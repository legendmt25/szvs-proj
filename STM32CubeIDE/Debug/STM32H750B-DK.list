
STM32H750B-DK.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .bootloader   0000227c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .isr_vector   00000298  90000000  90000000  00020000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00023c2c  900002a0  900002a0  000202a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000031b4  90023ecc  90023ecc  00043ecc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 FontSearchFlashSection 000001b8  90027080  90027080  00047080  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .ARM.extab    00000000  90027238  90027238  000a1d98  2**0
                  CONTENTS
  6 .ARM          00000000  90027238  90027238  000a1d98  2**0
                  CONTENTS
  7 .preinit_array 00000000  90027238  90027238  000a1d98  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  8 .init_array   0000001c  90027238  90027238  00047238  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .fini_array   00000008  90027254  90027254  00047254  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .data         00000140  24000000  9002725c  00050000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 CCMRAM        00005a00  24000140  9002739c  00050140  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .bss          00020b04  24005b40  9002cd9c  00055b40  2**3
                  ALLOC
 13 ._user_heap_stack 00002004  24026644  9002cd9c  00056644  2**0
                  ALLOC
 14 .ARM.attributes 0000002e  00000000  00000000  000a1d98  2**0
                  CONTENTS, READONLY
 15 FontFlashSection 00002164  90200000  90200000  00060000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 16 TextFlashSection 00000034  90202164  90202164  00062164  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 17 ExtFlashSection 0003fc00  90202198  90202198  00062198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 18 TouchGFX_Framebuffer 000bf400  d0000000  d0000000  000b0000  2**2
                  ALLOC
 19 Video_RGB_Buffer 00043800  d00bf400  d00bf400  000b0000  2**2
                  ALLOC
 20 .comment      000000c2  00000000  00000000  000a1dc6  2**0
                  CONTENTS, READONLY
 21 .debug_line   00077ae5  00000000  00000000  000a1e88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006b  00000000  00000000  0011996d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_info   000c4bdb  00000000  00000000  001199d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_abbrev 00015a83  00000000  00000000  001de5b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 25 .debug_aranges 000031b0  00000000  00000000  001f4038  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 26 .debug_str    001af938  00000000  00000000  001f71e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 27 .debug_rnglists 000065b4  00000000  00000000  003a6b20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 28 .debug_macro  0004ae71  00000000  00000000  003ad0d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 29 .debug_frame  0000a82c  00000000  00000000  003f7f48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 30 .debug_loclists 00038be0  00000000  00000000  00402774  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

900002a0 <__do_global_dtors_aux>:
900002a0:	b510      	push	{r4, lr}
900002a2:	4c05      	ldr	r4, [pc, #20]	; (900002b8 <__do_global_dtors_aux+0x18>)
900002a4:	7823      	ldrb	r3, [r4, #0]
900002a6:	b933      	cbnz	r3, 900002b6 <__do_global_dtors_aux+0x16>
900002a8:	4b04      	ldr	r3, [pc, #16]	; (900002bc <__do_global_dtors_aux+0x1c>)
900002aa:	b113      	cbz	r3, 900002b2 <__do_global_dtors_aux+0x12>
900002ac:	4804      	ldr	r0, [pc, #16]	; (900002c0 <__do_global_dtors_aux+0x20>)
900002ae:	f3af 8000 	nop.w
900002b2:	2301      	movs	r3, #1
900002b4:	7023      	strb	r3, [r4, #0]
900002b6:	bd10      	pop	{r4, pc}
900002b8:	24005b40 	.word	0x24005b40
900002bc:	00000000 	.word	0x00000000
900002c0:	90023eb4 	.word	0x90023eb4

900002c4 <frame_dummy>:
900002c4:	b508      	push	{r3, lr}
900002c6:	4b03      	ldr	r3, [pc, #12]	; (900002d4 <frame_dummy+0x10>)
900002c8:	b11b      	cbz	r3, 900002d2 <frame_dummy+0xe>
900002ca:	4903      	ldr	r1, [pc, #12]	; (900002d8 <frame_dummy+0x14>)
900002cc:	4803      	ldr	r0, [pc, #12]	; (900002dc <frame_dummy+0x18>)
900002ce:	f3af 8000 	nop.w
900002d2:	bd08      	pop	{r3, pc}
900002d4:	00000000 	.word	0x00000000
900002d8:	24005b44 	.word	0x24005b44
900002dc:	90023eb4 	.word	0x90023eb4

900002e0 <memchr>:
900002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
900002e4:	2a10      	cmp	r2, #16
900002e6:	db2b      	blt.n	90000340 <memchr+0x60>
900002e8:	f010 0f07 	tst.w	r0, #7
900002ec:	d008      	beq.n	90000300 <memchr+0x20>
900002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
900002f2:	3a01      	subs	r2, #1
900002f4:	428b      	cmp	r3, r1
900002f6:	d02d      	beq.n	90000354 <memchr+0x74>
900002f8:	f010 0f07 	tst.w	r0, #7
900002fc:	b342      	cbz	r2, 90000350 <memchr+0x70>
900002fe:	d1f6      	bne.n	900002ee <memchr+0xe>
90000300:	b4f0      	push	{r4, r5, r6, r7}
90000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
90000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
9000030a:	f022 0407 	bic.w	r4, r2, #7
9000030e:	f07f 0700 	mvns.w	r7, #0
90000312:	2300      	movs	r3, #0
90000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
90000318:	3c08      	subs	r4, #8
9000031a:	ea85 0501 	eor.w	r5, r5, r1
9000031e:	ea86 0601 	eor.w	r6, r6, r1
90000322:	fa85 f547 	uadd8	r5, r5, r7
90000326:	faa3 f587 	sel	r5, r3, r7
9000032a:	fa86 f647 	uadd8	r6, r6, r7
9000032e:	faa5 f687 	sel	r6, r5, r7
90000332:	b98e      	cbnz	r6, 90000358 <memchr+0x78>
90000334:	d1ee      	bne.n	90000314 <memchr+0x34>
90000336:	bcf0      	pop	{r4, r5, r6, r7}
90000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
9000033c:	f002 0207 	and.w	r2, r2, #7
90000340:	b132      	cbz	r2, 90000350 <memchr+0x70>
90000342:	f810 3b01 	ldrb.w	r3, [r0], #1
90000346:	3a01      	subs	r2, #1
90000348:	ea83 0301 	eor.w	r3, r3, r1
9000034c:	b113      	cbz	r3, 90000354 <memchr+0x74>
9000034e:	d1f8      	bne.n	90000342 <memchr+0x62>
90000350:	2000      	movs	r0, #0
90000352:	4770      	bx	lr
90000354:	3801      	subs	r0, #1
90000356:	4770      	bx	lr
90000358:	2d00      	cmp	r5, #0
9000035a:	bf06      	itte	eq
9000035c:	4635      	moveq	r5, r6
9000035e:	3803      	subeq	r0, #3
90000360:	3807      	subne	r0, #7
90000362:	f015 0f01 	tst.w	r5, #1
90000366:	d107      	bne.n	90000378 <memchr+0x98>
90000368:	3001      	adds	r0, #1
9000036a:	f415 7f80 	tst.w	r5, #256	; 0x100
9000036e:	bf02      	ittt	eq
90000370:	3001      	addeq	r0, #1
90000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
90000376:	3001      	addeq	r0, #1
90000378:	bcf0      	pop	{r4, r5, r6, r7}
9000037a:	3801      	subs	r0, #1
9000037c:	4770      	bx	lr
9000037e:	bf00      	nop

90000380 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
90000380:	f8df d034 	ldr.w	sp, [pc, #52]	; 900003b8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
90000384:	2100      	movs	r1, #0
  b  LoopCopyDataInit
90000386:	e003      	b.n	90000390 <LoopCopyDataInit>

90000388 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
90000388:	4b0c      	ldr	r3, [pc, #48]	; (900003bc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
9000038a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
9000038c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
9000038e:	3104      	adds	r1, #4

90000390 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
90000390:	480b      	ldr	r0, [pc, #44]	; (900003c0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
90000392:	4b0c      	ldr	r3, [pc, #48]	; (900003c4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
90000394:	1842      	adds	r2, r0, r1
  cmp  r2, r3
90000396:	429a      	cmp	r2, r3
  bcc  CopyDataInit
90000398:	d3f6      	bcc.n	90000388 <CopyDataInit>
  ldr  r2, =_sbss
9000039a:	4a0b      	ldr	r2, [pc, #44]	; (900003c8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
9000039c:	e002      	b.n	900003a4 <LoopFillZerobss>

9000039e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
9000039e:	2300      	movs	r3, #0
  str  r3, [r2], #4
900003a0:	f842 3b04 	str.w	r3, [r2], #4

900003a4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
900003a4:	4b09      	ldr	r3, [pc, #36]	; (900003cc <LoopFillZerobss+0x28>)
  cmp  r2, r3
900003a6:	429a      	cmp	r2, r3
  bcc  FillZerobss
900003a8:	d3f9      	bcc.n	9000039e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
900003aa:	f006 fc4d 	bl	90006c48 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
900003ae:	f023 f89b 	bl	900234e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
900003b2:	f003 fe5d 	bl	90004070 <main>
  bx  lr    
900003b6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
900003b8:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
900003bc:	9002725c 	.word	0x9002725c
  ldr  r0, =_sdata
900003c0:	24000000 	.word	0x24000000
  ldr  r3, =_edata
900003c4:	24000140 	.word	0x24000140
  ldr  r2, =_sbss
900003c8:	24005b40 	.word	0x24005b40
  ldr  r3, = _ebss
900003cc:	24026644 	.word	0x24026644

900003d0 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
900003d0:	e7fe      	b.n	900003d0 <ADC3_IRQHandler>
	...

900003d4 <MX_LIBJPEG_Init>:
  */

  /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */

}
900003d4:	4770      	bx	lr
900003d6:	bf00      	nop

900003d8 <MX_TouchGFX_PreOSInit>:
/**
 * PreOS Initialization function
 */
void MX_TouchGFX_PreOSInit(void)
{
}
900003d8:	4770      	bx	lr
900003da:	bf00      	nop

900003dc <MX_TouchGFX_Init>:

/**
 * Initialize TouchGFX application
 */
void MX_TouchGFX_Init(void)
{
900003dc:	b508      	push	{r3, lr}
  // Calling forward to touchgfx_init in C++ domain
  touchgfx_components_init();
900003de:	f001 fee7 	bl	900021b0 <touchgfx_components_init>
  touchgfx_init();
}
900003e2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  touchgfx_init();
900003e6:	f001 be6b 	b.w	900020c0 <touchgfx_init>
900003ea:	bf00      	nop

900003ec <TouchGFX_Task>:
 * TouchGFX application thread
 */
void TouchGFX_Task(void *argument)
{
  // Calling forward to touchgfx_taskEntry in C++ domain
  touchgfx_taskEntry();
900003ec:	f001 bee2 	b.w	900021b4 <touchgfx_taskEntry>

900003f0 <_ZN8touchgfx18MCUInstrumentation13getCCConsumedEv>:
     *
     * @return clock cycles.
     */
    virtual uint32_t getCCConsumed()
    {
        return cc_consumed;
900003f0:	6840      	ldr	r0, [r0, #4]
    }
900003f2:	4770      	bx	lr

900003f4 <_ZN8touchgfx18MCUInstrumentation13setCCConsumedEm>:
     *
     * @param  val number of clock cycles.
     */
    virtual void setCCConsumed(uint32_t val)
    {
        cc_consumed = val;
900003f4:	6041      	str	r1, [r0, #4]
    }
900003f6:	4770      	bx	lr

900003f8 <_ZN8touchgfx25CortexMMCUInstrumentation4initEv>:
    //                                    Embedded Trace Macrocell (ETM)
    //                                    Trace Port Interface Unit (TPIU).
    //                                    This enables control of power usage unless tracing is required. The application can enable this, for ITM use, or use by a debugger.

    // Enable Debug Exception and Monitor Control Register
    *((volatile unsigned int*)0xE000EDFC) |= 0x01000000;
900003f8:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    // Enable Lock Access Register
    *((volatile unsigned int*)0xE0001FB0) |= 0xC5ACCE55;
900003fc:	4b08      	ldr	r3, [pc, #32]	; (90000420 <_ZN8touchgfx25CortexMMCUInstrumentation4initEv+0x28>)
900003fe:	4a09      	ldr	r2, [pc, #36]	; (90000424 <_ZN8touchgfx25CortexMMCUInstrumentation4initEv+0x2c>)
    *((volatile unsigned int*)0xE000EDFC) |= 0x01000000;
90000400:	f8d0 1dfc 	ldr.w	r1, [r0, #3580]	; 0xdfc
90000404:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
90000408:	f8c0 1dfc 	str.w	r1, [r0, #3580]	; 0xdfc
    *((volatile unsigned int*)0xE0001FB0) |= 0xC5ACCE55;
9000040c:	f8d3 1fb0 	ldr.w	r1, [r3, #4016]	; 0xfb0
90000410:	430a      	orrs	r2, r1
90000412:	f8c3 2fb0 	str.w	r2, [r3, #4016]	; 0xfb0
    // Enable Data Watchpoint and Trace Control Register
    *((volatile unsigned int*)0xE0001000) |= 1;
90000416:	681a      	ldr	r2, [r3, #0]
90000418:	f042 0201 	orr.w	r2, r2, #1
9000041c:	601a      	str	r2, [r3, #0]
}
9000041e:	4770      	bx	lr
90000420:	e0001000 	.word	0xe0001000
90000424:	c5acce55 	.word	0xc5acce55

90000428 <_ZN8touchgfx25CortexMMCUInstrumentation12getElapsedUSEjjj>:

//Board specific clockfrequency
unsigned int CortexMMCUInstrumentation::getElapsedUS(unsigned int start, unsigned int now, unsigned int clockfrequency)
{
    return ((now - start) + (clockfrequency / 2)) / clockfrequency;
90000428:	1a51      	subs	r1, r2, r1
9000042a:	eb01 0153 	add.w	r1, r1, r3, lsr #1
}
9000042e:	fbb1 f0f3 	udiv	r0, r1, r3
90000432:	4770      	bx	lr

90000434 <_ZN8touchgfx25CortexMMCUInstrumentation12getCPUCyclesEv>:

unsigned int CortexMMCUInstrumentation::getCPUCycles()
{
    return *((volatile unsigned int*)0xE0001004);
90000434:	4b01      	ldr	r3, [pc, #4]	; (9000043c <_ZN8touchgfx25CortexMMCUInstrumentation12getCPUCyclesEv+0x8>)
90000436:	6858      	ldr	r0, [r3, #4]
}
90000438:	4770      	bx	lr
9000043a:	bf00      	nop
9000043c:	e0001000 	.word	0xe0001000

90000440 <_ZN8touchgfx25CortexMMCUInstrumentationD1Ev>:
 *        Interface for instrumenting Cortex-M processors to measure MCU load via measured CPU
 *        cycles.
 *
 * @sa MCUInstrumentation
 */
class CortexMMCUInstrumentation : public MCUInstrumentation
90000440:	4770      	bx	lr
90000442:	bf00      	nop

90000444 <_ZN8touchgfx25CortexMMCUInstrumentationD0Ev>:
90000444:	b510      	push	{r4, lr}
90000446:	4604      	mov	r4, r0
90000448:	210c      	movs	r1, #12
9000044a:	f022 fcca 	bl	90022de2 <_ZdlPvj>
9000044e:	4620      	mov	r0, r4
90000450:	bd10      	pop	{r4, pc}
90000452:	bf00      	nop

90000454 <_ZN8touchgfx25CortexMMCUInstrumentation12setMCUActiveEb>:

void CortexMMCUInstrumentation::setMCUActive(bool active)
{
    if (active) //idle task sched out
    {
        uint32_t cc_temp = getCPUCycles() - cc_in;
90000454:	6803      	ldr	r3, [r0, #0]
90000456:	4a0c      	ldr	r2, [pc, #48]	; (90000488 <_ZN8touchgfx25CortexMMCUInstrumentation12setMCUActiveEb+0x34>)
90000458:	691b      	ldr	r3, [r3, #16]
{
9000045a:	b510      	push	{r4, lr}
9000045c:	4604      	mov	r4, r0
    if (active) //idle task sched out
9000045e:	b149      	cbz	r1, 90000474 <_ZN8touchgfx25CortexMMCUInstrumentation12setMCUActiveEb+0x20>
        uint32_t cc_temp = getCPUCycles() - cc_in;
90000460:	4293      	cmp	r3, r2
90000462:	d10d      	bne.n	90000480 <_ZN8touchgfx25CortexMMCUInstrumentation12setMCUActiveEb+0x2c>
    return *((volatile unsigned int*)0xE0001004);
90000464:	4b09      	ldr	r3, [pc, #36]	; (9000048c <_ZN8touchgfx25CortexMMCUInstrumentation12setMCUActiveEb+0x38>)
90000466:	6858      	ldr	r0, [r3, #4]
        uint32_t cc_temp = getCPUCycles() - cc_in;
90000468:	68a2      	ldr	r2, [r4, #8]
        cc_consumed += cc_temp;
9000046a:	6863      	ldr	r3, [r4, #4]
9000046c:	1a9b      	subs	r3, r3, r2
9000046e:	4403      	add	r3, r0
90000470:	6063      	str	r3, [r4, #4]
    }
    else //idle task sched in
    {
        cc_in = getCPUCycles();
    }
}
90000472:	bd10      	pop	{r4, pc}
        cc_in = getCPUCycles();
90000474:	4293      	cmp	r3, r2
90000476:	d105      	bne.n	90000484 <_ZN8touchgfx25CortexMMCUInstrumentation12setMCUActiveEb+0x30>
    return *((volatile unsigned int*)0xE0001004);
90000478:	4b04      	ldr	r3, [pc, #16]	; (9000048c <_ZN8touchgfx25CortexMMCUInstrumentation12setMCUActiveEb+0x38>)
9000047a:	6858      	ldr	r0, [r3, #4]
        cc_in = getCPUCycles();
9000047c:	60a0      	str	r0, [r4, #8]
}
9000047e:	bd10      	pop	{r4, pc}
        uint32_t cc_temp = getCPUCycles() - cc_in;
90000480:	4798      	blx	r3
90000482:	e7f1      	b.n	90000468 <_ZN8touchgfx25CortexMMCUInstrumentation12setMCUActiveEb+0x14>
        cc_in = getCPUCycles();
90000484:	4798      	blx	r3
90000486:	e7f9      	b.n	9000047c <_ZN8touchgfx25CortexMMCUInstrumentation12setMCUActiveEb+0x28>
90000488:	90000435 	.word	0x90000435
9000048c:	e0001000 	.word	0xe0001000

90000490 <_ZN20STM32TouchControllerD1Ev>:
 * @brief This class specializes TouchController Interface.
 *
 * @sa touchgfx::TouchController
 */

class STM32TouchController : public touchgfx::TouchController
90000490:	4770      	bx	lr
90000492:	bf00      	nop
90000494:	0000      	movs	r0, r0
	...

90000498 <_ZN20STM32TouchController4initEv>:

#include <STM32TouchController.hpp>
#include "stm32h750b_discovery_ts.h"

void STM32TouchController::init()
{
90000498:	b500      	push	{lr}
9000049a:	b085      	sub	sp, #20
     *
     */
    TS_Init_t hTS;
    hTS.Orientation = TS_SWAP_XY;
    hTS.Accuracy = 0;
    hTS.Width = 480;
9000049c:	2208      	movs	r2, #8
9000049e:	2300      	movs	r3, #0
    hTS.Height = 272;
    BSP_TS_Init(0, &hTS);
900004a0:	2000      	movs	r0, #0
900004a2:	4669      	mov	r1, sp
    hTS.Width = 480;
900004a4:	ed9f 7b06 	vldr	d7, [pc, #24]	; 900004c0 <_ZN20STM32TouchController4initEv+0x28>
900004a8:	e9cd 2302 	strd	r2, r3, [sp, #8]
900004ac:	ed8d 7b00 	vstr	d7, [sp]
    BSP_TS_Init(0, &hTS);
900004b0:	f006 fad8 	bl	90006a64 <BSP_TS_Init>
}
900004b4:	b005      	add	sp, #20
900004b6:	f85d fb04 	ldr.w	pc, [sp], #4
900004ba:	bf00      	nop
900004bc:	f3af 8000 	nop.w
900004c0:	000001e0 	.word	0x000001e0
900004c4:	00000110 	.word	0x00000110

900004c8 <_ZN20STM32TouchController11sampleTouchERlS0_>:

bool STM32TouchController::sampleTouch(int32_t& x, int32_t& y)
{
900004c8:	b530      	push	{r4, r5, lr}
900004ca:	b085      	sub	sp, #20
     *
     * This function is called by the TouchGFX framework.
     * By default sampleTouch is called every tick, this can be adjusted by HAL::setTouchSampleRate(int8_t);
     *
     */
    TS_State_t  TS_State = { 0 };
900004cc:	2000      	movs	r0, #0
{
900004ce:	460d      	mov	r5, r1
900004d0:	4614      	mov	r4, r2
    BSP_TS_GetState(0, &TS_State);
900004d2:	a901      	add	r1, sp, #4
    TS_State_t  TS_State = { 0 };
900004d4:	9001      	str	r0, [sp, #4]
900004d6:	e9cd 0002 	strd	r0, r0, [sp, #8]
    BSP_TS_GetState(0, &TS_State);
900004da:	f006 fb51 	bl	90006b80 <BSP_TS_GetState>
    if (TS_State.TouchDetected)
900004de:	9801      	ldr	r0, [sp, #4]
900004e0:	b120      	cbz	r0, 900004ec <_ZN20STM32TouchController11sampleTouchERlS0_+0x24>
    {
        x = TS_State.TouchX;
        y = TS_State.TouchY;
        return true;
900004e2:	2001      	movs	r0, #1
        y = TS_State.TouchY;
900004e4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
        x = TS_State.TouchX;
900004e8:	602a      	str	r2, [r5, #0]
        y = TS_State.TouchY;
900004ea:	6023      	str	r3, [r4, #0]
    }

    return false;
}
900004ec:	b005      	add	sp, #20
900004ee:	bd30      	pop	{r4, r5, pc}

900004f0 <_ZN20STM32TouchControllerD0Ev>:
900004f0:	b510      	push	{r4, lr}
900004f2:	4604      	mov	r4, r0
900004f4:	2104      	movs	r1, #4
900004f6:	f022 fc74 	bl	90022de2 <_ZdlPvj>
900004fa:	4620      	mov	r0, r4
900004fc:	bd10      	pop	{r4, pc}
900004fe:	bf00      	nop

90000500 <_ZN8touchgfx4GPIO4initEv>:
    GPIO_PinState bitstatus = GPIO_PIN_RESET;
    switch (id)
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        bitstatus = HAL_GPIO_ReadPin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin);
90000500:	2108      	movs	r1, #8
90000502:	4810      	ldr	r0, [pc, #64]	; (90000544 <_ZN8touchgfx4GPIO4initEv+0x44>)
{
90000504:	b508      	push	{r3, lr}
        bitstatus = HAL_GPIO_ReadPin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin);
90000506:	f007 ff35 	bl	90008374 <HAL_GPIO_ReadPin>
        if (GPIO::get(static_cast<GPIO_ID>(id)))
9000050a:	2801      	cmp	r0, #1
9000050c:	d101      	bne.n	90000512 <_ZN8touchgfx4GPIO4initEv+0x12>
            GPIO_InvertedLevels[id] = 1;
9000050e:	4b0e      	ldr	r3, [pc, #56]	; (90000548 <_ZN8touchgfx4GPIO4initEv+0x48>)
90000510:	6018      	str	r0, [r3, #0]
#endif
        break;
    case GPIO::RENDER_TIME:
#if defined(RENDER_TIME_GPIO_Port) && defined(RENDER_TIME_Pin)
        bitstatus = HAL_GPIO_ReadPin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin);
90000512:	2180      	movs	r1, #128	; 0x80
90000514:	480d      	ldr	r0, [pc, #52]	; (9000054c <_ZN8touchgfx4GPIO4initEv+0x4c>)
90000516:	f007 ff2d 	bl	90008374 <HAL_GPIO_ReadPin>
        if (GPIO::get(static_cast<GPIO_ID>(id)))
9000051a:	2801      	cmp	r0, #1
9000051c:	d101      	bne.n	90000522 <_ZN8touchgfx4GPIO4initEv+0x22>
            GPIO_InvertedLevels[id] = 1;
9000051e:	4b0a      	ldr	r3, [pc, #40]	; (90000548 <_ZN8touchgfx4GPIO4initEv+0x48>)
90000520:	6058      	str	r0, [r3, #4]
#endif
        break;
    case GPIO::FRAME_RATE:
#if defined(FRAME_RATE_GPIO_Port) && defined(FRAME_RATE_Pin)
        bitstatus = HAL_GPIO_ReadPin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
90000522:	2140      	movs	r1, #64	; 0x40
90000524:	4809      	ldr	r0, [pc, #36]	; (9000054c <_ZN8touchgfx4GPIO4initEv+0x4c>)
90000526:	f007 ff25 	bl	90008374 <HAL_GPIO_ReadPin>
        if (GPIO::get(static_cast<GPIO_ID>(id)))
9000052a:	2801      	cmp	r0, #1
9000052c:	d101      	bne.n	90000532 <_ZN8touchgfx4GPIO4initEv+0x32>
            GPIO_InvertedLevels[id] = 1;
9000052e:	4b06      	ldr	r3, [pc, #24]	; (90000548 <_ZN8touchgfx4GPIO4initEv+0x48>)
90000530:	6098      	str	r0, [r3, #8]
#endif
        break;
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        bitstatus = HAL_GPIO_ReadPin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
90000532:	2140      	movs	r1, #64	; 0x40
90000534:	4806      	ldr	r0, [pc, #24]	; (90000550 <_ZN8touchgfx4GPIO4initEv+0x50>)
90000536:	f007 ff1d 	bl	90008374 <HAL_GPIO_ReadPin>
        if (GPIO::get(static_cast<GPIO_ID>(id)))
9000053a:	2801      	cmp	r0, #1
9000053c:	d101      	bne.n	90000542 <_ZN8touchgfx4GPIO4initEv+0x42>
            GPIO_InvertedLevels[id] = 1;
9000053e:	4b02      	ldr	r3, [pc, #8]	; (90000548 <_ZN8touchgfx4GPIO4initEv+0x48>)
90000540:	60d8      	str	r0, [r3, #12]
}
90000542:	bd08      	pop	{r3, pc}
90000544:	58021800 	.word	0x58021800
90000548:	24005b5c 	.word	0x24005b5c
9000054c:	58020400 	.word	0x58020400
90000550:	58020000 	.word	0x58020000

90000554 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>:
    switch (id)
90000554:	2803      	cmp	r0, #3
90000556:	d827      	bhi.n	900005a8 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x54>
90000558:	e8df f000 	tbb	[pc, r0]
9000055c:	020b141d 	.word	0x020b141d
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_SET(id));
90000560:	4b12      	ldr	r3, [pc, #72]	; (900005ac <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x58>)
90000562:	2140      	movs	r1, #64	; 0x40
90000564:	4812      	ldr	r0, [pc, #72]	; (900005b0 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x5c>)
90000566:	68da      	ldr	r2, [r3, #12]
90000568:	fab2 f282 	clz	r2, r2
9000056c:	0952      	lsrs	r2, r2, #5
9000056e:	f007 bf07 	b.w	90008380 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_SET(id));
90000572:	4b0e      	ldr	r3, [pc, #56]	; (900005ac <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x58>)
90000574:	2140      	movs	r1, #64	; 0x40
90000576:	480f      	ldr	r0, [pc, #60]	; (900005b4 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x60>)
90000578:	689a      	ldr	r2, [r3, #8]
9000057a:	fab2 f282 	clz	r2, r2
9000057e:	0952      	lsrs	r2, r2, #5
90000580:	f007 befe 	b.w	90008380 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, M_GPIO_PIN_SET(id));
90000584:	4b09      	ldr	r3, [pc, #36]	; (900005ac <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x58>)
90000586:	2180      	movs	r1, #128	; 0x80
90000588:	480a      	ldr	r0, [pc, #40]	; (900005b4 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x60>)
9000058a:	685a      	ldr	r2, [r3, #4]
9000058c:	fab2 f282 	clz	r2, r2
90000590:	0952      	lsrs	r2, r2, #5
90000592:	f007 bef5 	b.w	90008380 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, M_GPIO_PIN_SET(id));
90000596:	4b05      	ldr	r3, [pc, #20]	; (900005ac <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x58>)
90000598:	2108      	movs	r1, #8
9000059a:	4807      	ldr	r0, [pc, #28]	; (900005b8 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x64>)
9000059c:	681a      	ldr	r2, [r3, #0]
9000059e:	fab2 f282 	clz	r2, r2
900005a2:	0952      	lsrs	r2, r2, #5
900005a4:	f007 beec 	b.w	90008380 <HAL_GPIO_WritePin>
}
900005a8:	4770      	bx	lr
900005aa:	bf00      	nop
900005ac:	24005b5c 	.word	0x24005b5c
900005b0:	58020000 	.word	0x58020000
900005b4:	58020400 	.word	0x58020400
900005b8:	58021800 	.word	0x58021800

900005bc <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>:
    switch (id)
900005bc:	2803      	cmp	r0, #3
900005be:	d827      	bhi.n	90000610 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x54>
900005c0:	e8df f000 	tbb	[pc, r0]
900005c4:	020b141d 	.word	0x020b141d
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_RESET(id));
900005c8:	4b12      	ldr	r3, [pc, #72]	; (90000614 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x58>)
900005ca:	2140      	movs	r1, #64	; 0x40
900005cc:	4812      	ldr	r0, [pc, #72]	; (90000618 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x5c>)
900005ce:	68da      	ldr	r2, [r3, #12]
900005d0:	3a00      	subs	r2, #0
900005d2:	bf18      	it	ne
900005d4:	2201      	movne	r2, #1
900005d6:	f007 bed3 	b.w	90008380 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_RESET(id));
900005da:	4b0e      	ldr	r3, [pc, #56]	; (90000614 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x58>)
900005dc:	2140      	movs	r1, #64	; 0x40
900005de:	480f      	ldr	r0, [pc, #60]	; (9000061c <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x60>)
900005e0:	689a      	ldr	r2, [r3, #8]
900005e2:	3a00      	subs	r2, #0
900005e4:	bf18      	it	ne
900005e6:	2201      	movne	r2, #1
900005e8:	f007 beca 	b.w	90008380 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, M_GPIO_PIN_RESET(id));
900005ec:	4b09      	ldr	r3, [pc, #36]	; (90000614 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x58>)
900005ee:	2180      	movs	r1, #128	; 0x80
900005f0:	480a      	ldr	r0, [pc, #40]	; (9000061c <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x60>)
900005f2:	685a      	ldr	r2, [r3, #4]
900005f4:	3a00      	subs	r2, #0
900005f6:	bf18      	it	ne
900005f8:	2201      	movne	r2, #1
900005fa:	f007 bec1 	b.w	90008380 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, M_GPIO_PIN_RESET(id));
900005fe:	4b05      	ldr	r3, [pc, #20]	; (90000614 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x58>)
90000600:	2108      	movs	r1, #8
90000602:	4807      	ldr	r0, [pc, #28]	; (90000620 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x64>)
90000604:	681a      	ldr	r2, [r3, #0]
90000606:	3a00      	subs	r2, #0
90000608:	bf18      	it	ne
9000060a:	2201      	movne	r2, #1
9000060c:	f007 beb8 	b.w	90008380 <HAL_GPIO_WritePin>
}
90000610:	4770      	bx	lr
90000612:	bf00      	nop
90000614:	24005b5c 	.word	0x24005b5c
90000618:	58020000 	.word	0x58020000
9000061c:	58020400 	.word	0x58020400
90000620:	58021800 	.word	0x58021800

90000624 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>:
    switch (id)
90000624:	2803      	cmp	r0, #3
90000626:	d813      	bhi.n	90000650 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x2c>
90000628:	e8df f000 	tbb	[pc, r0]
9000062c:	02060a0e 	.word	0x02060a0e
        HAL_GPIO_TogglePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
90000630:	2140      	movs	r1, #64	; 0x40
90000632:	4808      	ldr	r0, [pc, #32]	; (90000654 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x30>)
90000634:	f007 bea8 	b.w	90008388 <HAL_GPIO_TogglePin>
        HAL_GPIO_TogglePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
90000638:	2140      	movs	r1, #64	; 0x40
9000063a:	4807      	ldr	r0, [pc, #28]	; (90000658 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x34>)
9000063c:	f007 bea4 	b.w	90008388 <HAL_GPIO_TogglePin>
        HAL_GPIO_TogglePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin);
90000640:	2180      	movs	r1, #128	; 0x80
90000642:	4805      	ldr	r0, [pc, #20]	; (90000658 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x34>)
90000644:	f007 bea0 	b.w	90008388 <HAL_GPIO_TogglePin>
        HAL_GPIO_TogglePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin);
90000648:	2108      	movs	r1, #8
9000064a:	4804      	ldr	r0, [pc, #16]	; (9000065c <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x38>)
9000064c:	f007 be9c 	b.w	90008388 <HAL_GPIO_TogglePin>
}
90000650:	4770      	bx	lr
90000652:	bf00      	nop
90000654:	58020000 	.word	0x58020000
90000658:	58020400 	.word	0x58020400
9000065c:	58021800 	.word	0x58021800

90000660 <_ZN8touchgfx13DMA_Interface10getDMATypeEv>:
     * @return a DMAType value of the concrete DMA_Interface implementation.
     */
    virtual DMAType getDMAType()
    {
        return DMA_TYPE_GENERIC;
    }
90000660:	2000      	movs	r0, #0
90000662:	4770      	bx	lr

90000664 <_ZN8touchgfx3HAL21setDisplayOrientationENS_18DisplayOrientationE>:
     * @note A screen transition must occur before this takes effect!
     */
    virtual void setDisplayOrientation(DisplayOrientation orientation)
    {
        requestedOrientation = orientation;
        displayOrientationChangeRequested = true;
90000664:	2301      	movs	r3, #1
        requestedOrientation = orientation;
90000666:	f880 1074 	strb.w	r1, [r0, #116]	; 0x74
        displayOrientationChangeRequested = true;
9000066a:	f880 3075 	strb.w	r3, [r0, #117]	; 0x75
    }
9000066e:	4770      	bx	lr

90000670 <_ZN8touchgfx3HAL9sampleKeyERh>:
     */
    virtual bool sampleKey(uint8_t& key)
    {
        (void)key; // Unused variable
        return false;
    }
90000670:	2000      	movs	r0, #0
90000672:	4770      	bx	lr

90000674 <_ZN8touchgfx3HAL19setAnimationStorageEPv>:
     * @see setFrameBufferStartAddresses
     */
    virtual void setAnimationStorage(void* animationStorage)
    {
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
        USE_ANIMATION_STORAGE = animationStorage != 0;
90000674:	1e0a      	subs	r2, r1, #0
90000676:	4b03      	ldr	r3, [pc, #12]	; (90000684 <_ZN8touchgfx3HAL19setAnimationStorageEPv+0x10>)
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
90000678:	6441      	str	r1, [r0, #68]	; 0x44
        USE_ANIMATION_STORAGE = animationStorage != 0;
9000067a:	bf18      	it	ne
9000067c:	2201      	movne	r2, #1
9000067e:	701a      	strb	r2, [r3, #0]
    }
90000680:	4770      	bx	lr
90000682:	bf00      	nop
90000684:	24026263 	.word	0x24026263

90000688 <_ZNK8touchgfx3HAL18getFlashDataReaderEv>:
     * @return the FlashDataReader.
     */
    virtual FlashDataReader* getFlashDataReader() const
    {
        return 0;
    }
90000688:	2000      	movs	r0, #0
9000068a:	4770      	bx	lr

9000068c <_ZN8touchgfx3HAL9taskDelayEt>:
     *
     * @see registerTaskDelayFunction
     */
    virtual void taskDelay(uint16_t ms)
    {
        if (taskDelayFunc)
9000068c:	6b83      	ldr	r3, [r0, #56]	; 0x38
    virtual void taskDelay(uint16_t ms)
9000068e:	4608      	mov	r0, r1
        if (taskDelayFunc)
90000690:	b103      	cbz	r3, 90000694 <_ZN8touchgfx3HAL9taskDelayEt+0x8>
        {
            taskDelayFunc(ms);
90000692:	4718      	bx	r3
        }
    }
90000694:	4770      	bx	lr
90000696:	bf00      	nop

90000698 <_ZN8touchgfx3HAL17getTFTCurrentLineEv>:
     *         implemented".
     */
    virtual uint16_t getTFTCurrentLine()
    {
        return 0xFFFFu;
    }
90000698:	f64f 70ff 	movw	r0, #65535	; 0xffff
9000069c:	4770      	bx	lr
9000069e:	bf00      	nop

900006a0 <_ZN11TouchGFXHALD1Ev>:
 *
 * @brief HAL implementation for TouchGFX.
 *
 * @sa HAL
 */
class TouchGFXHAL : public TouchGFXGeneratedHAL
900006a0:	4770      	bx	lr
900006a2:	bf00      	nop

900006a4 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt>:
    virtual void setFrameBufferSize(uint16_t width, uint16_t height)
900006a4:	b508      	push	{r3, lr}
        assert(width >= DISPLAY_WIDTH && height >= DISPLAY_HEIGHT && "Framebuffer cannot be smaller than display");
900006a6:	4b09      	ldr	r3, [pc, #36]	; (900006cc <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x28>)
900006a8:	881b      	ldrh	r3, [r3, #0]
900006aa:	428b      	cmp	r3, r1
900006ac:	d808      	bhi.n	900006c0 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x1c>
900006ae:	4b08      	ldr	r3, [pc, #32]	; (900006d0 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x2c>)
900006b0:	881b      	ldrh	r3, [r3, #0]
900006b2:	4293      	cmp	r3, r2
900006b4:	d804      	bhi.n	900006c0 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x1c>
        FRAME_BUFFER_WIDTH = width;
900006b6:	4807      	ldr	r0, [pc, #28]	; (900006d4 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x30>)
        FRAME_BUFFER_HEIGHT = height;
900006b8:	4b07      	ldr	r3, [pc, #28]	; (900006d8 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x34>)
        FRAME_BUFFER_WIDTH = width;
900006ba:	8001      	strh	r1, [r0, #0]
        FRAME_BUFFER_HEIGHT = height;
900006bc:	801a      	strh	r2, [r3, #0]
    }
900006be:	bd08      	pop	{r3, pc}
        assert(width >= DISPLAY_WIDTH && height >= DISPLAY_HEIGHT && "Framebuffer cannot be smaller than display");
900006c0:	4b06      	ldr	r3, [pc, #24]	; (900006dc <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x38>)
900006c2:	219e      	movs	r1, #158	; 0x9e
900006c4:	4a06      	ldr	r2, [pc, #24]	; (900006e0 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x3c>)
900006c6:	4807      	ldr	r0, [pc, #28]	; (900006e4 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x40>)
900006c8:	f022 fbba 	bl	90022e40 <__assert_func>
900006cc:	24026258 	.word	0x24026258
900006d0:	2402625a 	.word	0x2402625a
900006d4:	2402625e 	.word	0x2402625e
900006d8:	24026260 	.word	0x24026260
900006dc:	90023f4c 	.word	0x90023f4c
900006e0:	90023fb0 	.word	0x90023fb0
900006e4:	90023ff4 	.word	0x90023ff4

900006e8 <_ZN8touchgfx3HAL15backPorchExitedEv>:
    virtual void backPorchExited()
900006e8:	b510      	push	{r4, lr}
900006ea:	4604      	mov	r4, r0
        swapFrameBuffers();
900006ec:	f011 fd2a 	bl	90012144 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        tick();
900006f0:	6823      	ldr	r3, [r4, #0]
900006f2:	4620      	mov	r0, r4
900006f4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
    }
900006f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        tick();
900006fc:	4718      	bx	r3
900006fe:	bf00      	nop

90000700 <_ZNK11TouchGFXHAL17getTFTFrameBufferEv>:
    // Calling parent implementation of getTFTFrameBuffer().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    return TouchGFXGeneratedHAL::getTFTFrameBuffer();
90000700:	f001 be32 	b.w	90002368 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>

90000704 <_ZN11TouchGFXHAL17setTFTFrameBufferEPt>:
    // Calling parent implementation of setTFTFrameBuffer(uint16_t* address).
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::setTFTFrameBuffer(address);
90000704:	f001 be36 	b.w	90002374 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>

90000708 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE>:
 * @param rect The area of the screen that has been drawn, expressed in absolute coordinates.
 *
 * @see flushFrameBuffer().
 */
void TouchGFXHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
90000708:	b510      	push	{r4, lr}
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::flushFrameBuffer(const touchgfx::Rect& rect) must
    // be called to notify the touchgfx framework that flush has been performed.

    TouchGFXGeneratedHAL::flushFrameBuffer(rect);
9000070a:	f001 fef5 	bl	900024f8 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
9000070e:	4812      	ldr	r0, [pc, #72]	; (90000758 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x50>)
90000710:	2300      	movs	r3, #0
90000712:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
90000716:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
9000071a:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
                                            /* clean & invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
      do {
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
9000071e:	f643 74e0 	movw	r4, #16352	; 0x3fe0
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
90000722:	f3c3 3c4e 	ubfx	ip, r3, #13, #15
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
90000726:	f3c3 0ec9 	ubfx	lr, r3, #3, #10
9000072a:	ea4f 1c4c 	mov.w	ip, ip, lsl #5
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
9000072e:	ea0c 0104 	and.w	r1, ip, r4
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
90000732:	4673      	mov	r3, lr
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
90000734:	ea41 7283 	orr.w	r2, r1, r3, lsl #30
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
90000738:	3b01      	subs	r3, #1
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
9000073a:	f8c0 2274 	str.w	r2, [r0, #628]	; 0x274
      } while (ways-- != 0U);
9000073e:	1c5a      	adds	r2, r3, #1
90000740:	d1f8      	bne.n	90000734 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x2c>
    } while(sets-- != 0U);
90000742:	f1ac 0c20 	sub.w	ip, ip, #32
90000746:	f11c 0f20 	cmn.w	ip, #32
9000074a:	d1f0      	bne.n	9000072e <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x26>
9000074c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
90000750:	f3bf 8f6f 	isb	sy
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then we need
    // to flush the Dcache to make sure framebuffer is correct in RAM. That's done
    // using SCB_CleanInvalidateDCache().

    SCB_CleanInvalidateDCache();
}
90000754:	bd10      	pop	{r4, pc}
90000756:	bf00      	nop
90000758:	e000ed00 	.word	0xe000ed00

9000075c <_ZN11TouchGFXHAL19configureInterruptsEv>:
    // Calling parent implementation of configureInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::configureInterrupts();
9000075c:	f001 bde0 	b.w	90002320 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>

90000760 <_ZN11TouchGFXHAL16enableInterruptsEv>:
    // Calling parent implementation of enableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableInterrupts();
90000760:	f001 bff0 	b.w	90002744 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>

90000764 <_ZN11TouchGFXHAL17disableInterruptsEv>:
    // Calling parent implementation of disableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::disableInterrupts();
90000764:	f001 bfda 	b.w	9000271c <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>

90000768 <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv>:
    // Calling parent implementation of enableLCDControllerInterrupt().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableLCDControllerInterrupt();
90000768:	f001 bde4 	b.w	90002334 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>

9000076c <_ZN11TouchGFXHAL16flushFrameBufferEv>:
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
    {
        HAL::flushFrameBuffer();
9000076c:	f010 bf42 	b.w	900115f4 <_ZN8touchgfx3HAL16flushFrameBufferEv>

90000770 <_ZN11TouchGFXHALD0Ev>:
90000770:	b510      	push	{r4, lr}
90000772:	4604      	mov	r4, r0
90000774:	2188      	movs	r1, #136	; 0x88
90000776:	f022 fb34 	bl	90022de2 <_ZdlPvj>
9000077a:	4620      	mov	r0, r4
9000077c:	bd10      	pop	{r4, pc}
9000077e:	bf00      	nop

90000780 <_ZN8touchgfx3HAL11getBlitCapsEv>:
        if (useDMAAcceleration)
90000780:	f890 3077 	ldrb.w	r3, [r0, #119]	; 0x77
90000784:	b11b      	cbz	r3, 9000078e <_ZN8touchgfx3HAL11getBlitCapsEv+0xe>
            return dma.getBlitCaps();
90000786:	6840      	ldr	r0, [r0, #4]
90000788:	6803      	ldr	r3, [r0, #0]
9000078a:	681b      	ldr	r3, [r3, #0]
9000078c:	4718      	bx	r3
    }
9000078e:	4618      	mov	r0, r3
90000790:	4770      	bx	lr
90000792:	bf00      	nop

90000794 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv>:
    virtual void noTouch();

    /** Perform the actual display orientation change. */
    virtual void performDisplayOrientationChange()
    {
        if (requestedOrientation != nativeDisplayOrientation)
90000794:	f890 2074 	ldrb.w	r2, [r0, #116]	; 0x74
90000798:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
9000079c:	429a      	cmp	r2, r3
        {
            if (DISPLAY_ROTATION == rotate0)
9000079e:	4b0b      	ldr	r3, [pc, #44]	; (900007cc <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x38>)
900007a0:	781a      	ldrb	r2, [r3, #0]
        if (requestedOrientation != nativeDisplayOrientation)
900007a2:	d00b      	beq.n	900007bc <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x28>
            if (DISPLAY_ROTATION == rotate0)
900007a4:	b94a      	cbnz	r2, 900007ba <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x26>
            {
                const uint16_t tmp = DISPLAY_HEIGHT;
900007a6:	4a0a      	ldr	r2, [pc, #40]	; (900007d0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x3c>)
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
                DISPLAY_WIDTH = tmp;
                DISPLAY_ROTATION = rotate90;
900007a8:	f04f 0c01 	mov.w	ip, #1
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
900007ac:	4909      	ldr	r1, [pc, #36]	; (900007d4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x40>)
            }
        }
        else if (DISPLAY_ROTATION != rotate0)
        {
            const uint16_t tmp = DISPLAY_HEIGHT;
900007ae:	8810      	ldrh	r0, [r2, #0]
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
            DISPLAY_WIDTH = tmp;
            DISPLAY_ROTATION = rotate0;
900007b0:	f883 c000 	strb.w	ip, [r3]
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
900007b4:	880b      	ldrh	r3, [r1, #0]
            DISPLAY_WIDTH = tmp;
900007b6:	8008      	strh	r0, [r1, #0]
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
900007b8:	8013      	strh	r3, [r2, #0]
        }
    }
900007ba:	4770      	bx	lr
        else if (DISPLAY_ROTATION != rotate0)
900007bc:	2a00      	cmp	r2, #0
900007be:	d0fc      	beq.n	900007ba <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x26>
            const uint16_t tmp = DISPLAY_HEIGHT;
900007c0:	4a03      	ldr	r2, [pc, #12]	; (900007d0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x3c>)
            DISPLAY_ROTATION = rotate0;
900007c2:	f04f 0c00 	mov.w	ip, #0
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
900007c6:	4903      	ldr	r1, [pc, #12]	; (900007d4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x40>)
900007c8:	e7f1      	b.n	900007ae <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x1a>
900007ca:	bf00      	nop
900007cc:	2402625c 	.word	0x2402625c
900007d0:	2402625a 	.word	0x2402625a
900007d4:	24026258 	.word	0x24026258

900007d8 <_ZN8touchgfx3HAL10getDMATypeEv>:
        return dma.getDMAType();
900007d8:	6840      	ldr	r0, [r0, #4]
900007da:	4a04      	ldr	r2, [pc, #16]	; (900007ec <_ZN8touchgfx3HAL10getDMATypeEv+0x14>)
900007dc:	6803      	ldr	r3, [r0, #0]
900007de:	699b      	ldr	r3, [r3, #24]
900007e0:	4293      	cmp	r3, r2
900007e2:	d101      	bne.n	900007e8 <_ZN8touchgfx3HAL10getDMATypeEv+0x10>
    }
900007e4:	2000      	movs	r0, #0
900007e6:	4770      	bx	lr
        return dma.getDMAType();
900007e8:	4718      	bx	r3
900007ea:	bf00      	nop
900007ec:	90000661 	.word	0x90000661

900007f0 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_>:
        assert(frameBuffer != 0 && "A framebuffer address must be set");
900007f0:	b1a9      	cbz	r1, 9000081e <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x2e>
        frameBuffer1 = reinterpret_cast<uint16_t*>(doubleBuffer);
900007f2:	6402      	str	r2, [r0, #64]	; 0x40
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
900007f4:	3a00      	subs	r2, #0
        frameBuffer0 = reinterpret_cast<uint16_t*>(frameBuffer);
900007f6:	63c1      	str	r1, [r0, #60]	; 0x3c
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
900007f8:	bf18      	it	ne
900007fa:	2201      	movne	r2, #1
900007fc:	490c      	ldr	r1, [pc, #48]	; (90000830 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x40>)
900007fe:	700a      	strb	r2, [r1, #0]
        setAnimationStorage(animationStorage);
90000800:	6802      	ldr	r2, [r0, #0]
90000802:	490c      	ldr	r1, [pc, #48]	; (90000834 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x44>)
90000804:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
90000808:	428a      	cmp	r2, r1
9000080a:	d106      	bne.n	9000081a <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x2a>
        USE_ANIMATION_STORAGE = animationStorage != 0;
9000080c:	1e19      	subs	r1, r3, #0
9000080e:	4a0a      	ldr	r2, [pc, #40]	; (90000838 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x48>)
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
90000810:	6443      	str	r3, [r0, #68]	; 0x44
        USE_ANIMATION_STORAGE = animationStorage != 0;
90000812:	bf18      	it	ne
90000814:	2101      	movne	r1, #1
90000816:	7011      	strb	r1, [r2, #0]
90000818:	4770      	bx	lr
        setAnimationStorage(animationStorage);
9000081a:	4619      	mov	r1, r3
9000081c:	4710      	bx	r2
        assert(frameBuffer != 0 && "A framebuffer address must be set");
9000081e:	4b07      	ldr	r3, [pc, #28]	; (9000083c <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x4c>)
90000820:	f240 21d2 	movw	r1, #722	; 0x2d2
90000824:	4a06      	ldr	r2, [pc, #24]	; (90000840 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x50>)
90000826:	4807      	ldr	r0, [pc, #28]	; (90000844 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x54>)
    virtual void setFrameBufferStartAddresses(void* frameBuffer, void* doubleBuffer, void* animationStorage)
90000828:	b510      	push	{r4, lr}
        assert(frameBuffer != 0 && "A framebuffer address must be set");
9000082a:	f022 fb09 	bl	90022e40 <__assert_func>
9000082e:	bf00      	nop
90000830:	24026262 	.word	0x24026262
90000834:	90000675 	.word	0x90000675
90000838:	24026263 	.word	0x24026263
9000083c:	9002403c 	.word	0x9002403c
90000840:	90024074 	.word	0x90024074
90000844:	90023ff4 	.word	0x90023ff4

90000848 <_ZN11TouchGFXHAL9taskEntryEv>:
{
90000848:	b508      	push	{r3, lr}
    enableLCDControllerInterrupt();
9000084a:	6803      	ldr	r3, [r0, #0]
{
9000084c:	4604      	mov	r4, r0
9000084e:	4d17      	ldr	r5, [pc, #92]	; (900008ac <_ZN11TouchGFXHAL9taskEntryEv+0x64>)
    enableLCDControllerInterrupt();
90000850:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
90000854:	4798      	blx	r3
    enableInterrupts();
90000856:	6823      	ldr	r3, [r4, #0]
90000858:	4620      	mov	r0, r4
9000085a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
9000085c:	4798      	blx	r3
    OSWrappers::waitForVSync();
9000085e:	f001 f8bb 	bl	900019d8 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
    backPorchExited();
90000862:	6823      	ldr	r3, [r4, #0]
90000864:	4620      	mov	r0, r4
90000866:	6f1b      	ldr	r3, [r3, #112]	; 0x70
90000868:	4798      	blx	r3
    HAL_GPIO_WritePin(LCD_RESET_GPIO_Port, LCD_RESET_Pin, GPIO_PIN_SET);
9000086a:	2201      	movs	r2, #1
9000086c:	2104      	movs	r1, #4
9000086e:	4810      	ldr	r0, [pc, #64]	; (900008b0 <_ZN11TouchGFXHAL9taskEntryEv+0x68>)
90000870:	f007 fd86 	bl	90008380 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_DE_GPIO_Port, LCD_DE_Pin, GPIO_PIN_SET);
90000874:	2201      	movs	r2, #1
90000876:	2180      	movs	r1, #128	; 0x80
90000878:	480e      	ldr	r0, [pc, #56]	; (900008b4 <_ZN11TouchGFXHAL9taskEntryEv+0x6c>)
9000087a:	f007 fd81 	bl	90008380 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
9000087e:	2201      	movs	r2, #1
90000880:	480d      	ldr	r0, [pc, #52]	; (900008b8 <_ZN11TouchGFXHAL9taskEntryEv+0x70>)
90000882:	4611      	mov	r1, r2
90000884:	f007 fd7c 	bl	90008380 <HAL_GPIO_WritePin>
        OSWrappers::waitForVSync();
90000888:	f001 f8a6 	bl	900019d8 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
        backPorchExited();
9000088c:	6823      	ldr	r3, [r4, #0]
        swapFrameBuffers();
9000088e:	4620      	mov	r0, r4
90000890:	6f1b      	ldr	r3, [r3, #112]	; 0x70
90000892:	42ab      	cmp	r3, r5
90000894:	d107      	bne.n	900008a6 <_ZN11TouchGFXHAL9taskEntryEv+0x5e>
90000896:	f011 fc55 	bl	90012144 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        tick();
9000089a:	6823      	ldr	r3, [r4, #0]
9000089c:	4620      	mov	r0, r4
9000089e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
900008a2:	4798      	blx	r3
    }
900008a4:	e7f0      	b.n	90000888 <_ZN11TouchGFXHAL9taskEntryEv+0x40>
900008a6:	4798      	blx	r3
900008a8:	e7ee      	b.n	90000888 <_ZN11TouchGFXHAL9taskEntryEv+0x40>
900008aa:	bf00      	nop
900008ac:	900006e9 	.word	0x900006e9
900008b0:	58020000 	.word	0x58020000
900008b4:	58020c00 	.word	0x58020c00
900008b8:	58022800 	.word	0x58022800

900008bc <_ZN11TouchGFXHAL10initializeEv>:
{
900008bc:	b538      	push	{r3, r4, r5, lr}
900008be:	4604      	mov	r4, r0
    TouchGFXGeneratedHAL::initialize();
900008c0:	f001 ff4a 	bl	90002758 <_ZN20TouchGFXGeneratedHAL10initializeEv>
    setFrameBufferStartAddresses((void*)frameBuffer0, (void*)frameBuffer1, (void*)animationBuffer);
900008c4:	4817      	ldr	r0, [pc, #92]	; (90000924 <_ZN11TouchGFXHAL10initializeEv+0x68>)
900008c6:	6823      	ldr	r3, [r4, #0]
900008c8:	6be1      	ldr	r1, [r4, #60]	; 0x3c
900008ca:	f8d3 5088 	ldr.w	r5, [r3, #136]	; 0x88
900008ce:	6c22      	ldr	r2, [r4, #64]	; 0x40
900008d0:	4285      	cmp	r5, r0
900008d2:	d119      	bne.n	90000908 <_ZN11TouchGFXHAL10initializeEv+0x4c>
        assert(frameBuffer != 0 && "A framebuffer address must be set");
900008d4:	b1f9      	cbz	r1, 90000916 <_ZN11TouchGFXHAL10initializeEv+0x5a>
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
900008d6:	3a00      	subs	r2, #0
900008d8:	4913      	ldr	r1, [pc, #76]	; (90000928 <_ZN11TouchGFXHAL10initializeEv+0x6c>)
        setAnimationStorage(animationStorage);
900008da:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
900008de:	bf18      	it	ne
900008e0:	2201      	movne	r2, #1
900008e2:	4812      	ldr	r0, [pc, #72]	; (9000092c <_ZN11TouchGFXHAL10initializeEv+0x70>)
900008e4:	428b      	cmp	r3, r1
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
900008e6:	4912      	ldr	r1, [pc, #72]	; (90000930 <_ZN11TouchGFXHAL10initializeEv+0x74>)
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
900008e8:	7002      	strb	r2, [r0, #0]
        setAnimationStorage(animationStorage);
900008ea:	d111      	bne.n	90000910 <_ZN11TouchGFXHAL10initializeEv+0x54>
        USE_ANIMATION_STORAGE = animationStorage != 0;
900008ec:	4b11      	ldr	r3, [pc, #68]	; (90000934 <_ZN11TouchGFXHAL10initializeEv+0x78>)
900008ee:	2201      	movs	r2, #1
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
900008f0:	6461      	str	r1, [r4, #68]	; 0x44
        USE_ANIMATION_STORAGE = animationStorage != 0;
900008f2:	701a      	strb	r2, [r3, #0]
    instrumentation.init();
900008f4:	f104 057c 	add.w	r5, r4, #124	; 0x7c
900008f8:	4628      	mov	r0, r5
900008fa:	f7ff fd7d 	bl	900003f8 <_ZN8touchgfx25CortexMMCUInstrumentation4initEv>
        updateMCULoad = enabled;
900008fe:	2301      	movs	r3, #1
        mcuInstrumentation = mcuInstr;
90000900:	6125      	str	r5, [r4, #16]
        updateMCULoad = enabled;
90000902:	f884 306c 	strb.w	r3, [r4, #108]	; 0x6c
}
90000906:	bd38      	pop	{r3, r4, r5, pc}
    setFrameBufferStartAddresses((void*)frameBuffer0, (void*)frameBuffer1, (void*)animationBuffer);
90000908:	4b09      	ldr	r3, [pc, #36]	; (90000930 <_ZN11TouchGFXHAL10initializeEv+0x74>)
9000090a:	4620      	mov	r0, r4
9000090c:	47a8      	blx	r5
9000090e:	e7f1      	b.n	900008f4 <_ZN11TouchGFXHAL10initializeEv+0x38>
        setAnimationStorage(animationStorage);
90000910:	4620      	mov	r0, r4
90000912:	4798      	blx	r3
90000914:	e7ee      	b.n	900008f4 <_ZN11TouchGFXHAL10initializeEv+0x38>
        assert(frameBuffer != 0 && "A framebuffer address must be set");
90000916:	4b08      	ldr	r3, [pc, #32]	; (90000938 <_ZN11TouchGFXHAL10initializeEv+0x7c>)
90000918:	f240 21d2 	movw	r1, #722	; 0x2d2
9000091c:	4a07      	ldr	r2, [pc, #28]	; (9000093c <_ZN11TouchGFXHAL10initializeEv+0x80>)
9000091e:	4808      	ldr	r0, [pc, #32]	; (90000940 <_ZN11TouchGFXHAL10initializeEv+0x84>)
90000920:	f022 fa8e 	bl	90022e40 <__assert_func>
90000924:	900007f1 	.word	0x900007f1
90000928:	90000675 	.word	0x90000675
9000092c:	24026262 	.word	0x24026262
90000930:	d0000000 	.word	0xd0000000
90000934:	24026263 	.word	0x24026263
90000938:	9002403c 	.word	0x9002403c
9000093c:	90024074 	.word	0x90024074
90000940:	90023ff4 	.word	0x90023ff4

90000944 <IdleTaskHook>:
}

extern "C"
{
    portBASE_TYPE IdleTaskHook(void* p)
    {
90000944:	b508      	push	{r3, lr}
        return instance;
90000946:	4b07      	ldr	r3, [pc, #28]	; (90000964 <IdleTaskHook+0x20>)
        if ((int)p) //idle task sched out
90000948:	b128      	cbz	r0, 90000956 <IdleTaskHook+0x12>
        {
            touchgfx::HAL::getInstance()->setMCUActive(true);
9000094a:	6818      	ldr	r0, [r3, #0]
9000094c:	2101      	movs	r1, #1
9000094e:	f011 fc13 	bl	90012178 <_ZN8touchgfx3HAL12setMCUActiveEb>
        else //idle task sched in
        {
            touchgfx::HAL::getInstance()->setMCUActive(false);
        }
        return pdTRUE;
    }
90000952:	2001      	movs	r0, #1
90000954:	bd08      	pop	{r3, pc}
            touchgfx::HAL::getInstance()->setMCUActive(false);
90000956:	4601      	mov	r1, r0
90000958:	6818      	ldr	r0, [r3, #0]
9000095a:	f011 fc0d 	bl	90012178 <_ZN8touchgfx3HAL12setMCUActiveEb>
    }
9000095e:	2001      	movs	r0, #1
90000960:	bd08      	pop	{r3, pc}
90000962:	bf00      	nop
90000964:	24026264 	.word	0x24026264

90000968 <_ZNK20HardwareMJPEGDecoder21getCurrentFrameNumberEv>:
    virtual bool gotoNextFrame();
    //Decode part of the current frame
    virtual bool decodeFrame(const touchgfx::Rect& area, uint8_t* frameBuffer, uint32_t framebuffer_width);
    virtual bool decodeThumbnail(uint32_t frameno, uint8_t* buffer, uint16_t width, uint16_t height);
    virtual void gotoFrame(uint32_t frameno);
    virtual uint32_t getCurrentFrameNumber() const { return frameNumber; }
90000968:	6940      	ldr	r0, [r0, #20]
9000096a:	4770      	bx	lr

9000096c <_ZN20HardwareMJPEGDecoder12getLastErrorEv>:
    virtual void setRepeatVideo(bool repeat);
    virtual void getVideoInfo(touchgfx::VideoInformation* data);

    void setAVIFileBuffer(uint8_t* buffer, uint32_t size) { aviBuffer = buffer, aviBufferLength = size; }

    virtual AVIErrors getLastError() { return lastError; }
9000096c:	f890 0040 	ldrb.w	r0, [r0, #64]	; 0x40
90000970:	4770      	bx	lr
90000972:	bf00      	nop

90000974 <_ZN20HardwareMJPEGDecoder8hasVideoEv>:
    readVideoHeader();
}

bool HardwareMJPEGDecoder::hasVideo()
{
    return (reader != 0) || (movieData != 0);
90000974:	6b03      	ldr	r3, [r0, #48]	; 0x30
90000976:	b10b      	cbz	r3, 9000097c <_ZN20HardwareMJPEGDecoder8hasVideoEv+0x8>
90000978:	2001      	movs	r0, #1
}
9000097a:	4770      	bx	lr
    return (reader != 0) || (movieData != 0);
9000097c:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
9000097e:	3800      	subs	r0, #0
90000980:	bf18      	it	ne
90000982:	2001      	movne	r0, #1
90000984:	4770      	bx	lr
90000986:	bf00      	nop

90000988 <_ZN20HardwareMJPEGDecoder17getNumberOfFramesEv>:
}

uint32_t HardwareMJPEGDecoder::getNumberOfFrames()
{
    return videoInfo.number_of_frames;
}
90000988:	6880      	ldr	r0, [r0, #8]
9000098a:	4770      	bx	lr

9000098c <_ZN20HardwareMJPEGDecoder14setRepeatVideoEb>:

void HardwareMJPEGDecoder::setRepeatVideo(bool repeat)
{

}
9000098c:	4770      	bx	lr
9000098e:	bf00      	nop

90000990 <_ZN20HardwareMJPEGDecoder12getVideoInfoEPN8touchgfx16VideoInformationE>:

void HardwareMJPEGDecoder::getVideoInfo(touchgfx::VideoInformation* data)
{
    *data = videoInfo;
90000990:	3004      	adds	r0, #4
{
90000992:	468c      	mov	ip, r1
    *data = videoInfo;
90000994:	c80f      	ldmia	r0, {r0, r1, r2, r3}
90000996:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
}
9000099a:	4770      	bx	lr

9000099c <_ZN20HardwareMJPEGDecoderD1Ev>:
class HardwareMJPEGDecoder : public MJPEGDecoder
9000099c:	4770      	bx	lr
9000099e:	bf00      	nop

900009a0 <_ZN20HardwareMJPEGDecoder15decodeThumbnailEmPhtt>:
{
900009a0:	b508      	push	{r3, lr}
    assert(0);
900009a2:	4a03      	ldr	r2, [pc, #12]	; (900009b0 <_ZN20HardwareMJPEGDecoder15decodeThumbnailEmPhtt+0x10>)
900009a4:	f240 11cf 	movw	r1, #463	; 0x1cf
900009a8:	4b02      	ldr	r3, [pc, #8]	; (900009b4 <_ZN20HardwareMJPEGDecoder15decodeThumbnailEmPhtt+0x14>)
900009aa:	4803      	ldr	r0, [pc, #12]	; (900009b8 <_ZN20HardwareMJPEGDecoder15decodeThumbnailEmPhtt+0x18>)
900009ac:	f022 fa48 	bl	90022e40 <__assert_func>
900009b0:	900241a0 	.word	0x900241a0
900009b4:	9002419c 	.word	0x9002419c
900009b8:	900241fc 	.word	0x900241fc

900009bc <_ZN20HardwareMJPEGDecoderD0Ev>:
900009bc:	b510      	push	{r4, lr}
900009be:	4604      	mov	r4, r0
900009c0:	2148      	movs	r1, #72	; 0x48
900009c2:	f022 fa0e 	bl	90022de2 <_ZdlPvj>
900009c6:	4620      	mov	r0, r4
900009c8:	bd10      	pop	{r4, pc}
900009ca:	bf00      	nop

900009cc <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0>:
void HardwareMJPEGDecoder::decodeMJPEGFrame(const uint8_t* const mjpgdata, const uint32_t length, uint8_t* outputBuffer, uint16_t bufferWidth, uint16_t bufferHeight, uint32_t bufferStride)
900009cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
900009d0:	b085      	sub	sp, #20
900009d2:	4605      	mov	r5, r0
      JPEG_ConvertorParams.bytes_pr_pixel = 2;
900009d4:	4c65      	ldr	r4, [pc, #404]	; (90000b6c <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x1a0>)
void HardwareMJPEGDecoder::decodeMJPEGFrame(const uint8_t* const mjpgdata, const uint32_t length, uint8_t* outputBuffer, uint16_t bufferWidth, uint16_t bufferHeight, uint32_t bufferStride)
900009d6:	9003      	str	r0, [sp, #12]
      JPEG_ConvertorParams.bytes_pr_pixel = 2;
900009d8:	2002      	movs	r0, #2
900009da:	6120      	str	r0, [r4, #16]
      JPEG_ConvertorParams.WidthExtend = videoInfo.frame_width;
900009dc:	68e8      	ldr	r0, [r5, #12]
      if((JPEG_ConvertorParams.WidthExtend % 16) != 0)
900009de:	0705      	lsls	r5, r0, #28
900009e0:	d003      	beq.n	900009ea <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x1e>
          JPEG_ConvertorParams.WidthExtend += 16 - (JPEG_ConvertorParams.WidthExtend % 16);
900009e2:	f020 000f 	bic.w	r0, r0, #15
900009e6:	4c61      	ldr	r4, [pc, #388]	; (90000b6c <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x1a0>)
900009e8:	3010      	adds	r0, #16
900009ea:	6020      	str	r0, [r4, #0]
      JPEG_ConvertorParams.MCU_pr_line = JPEG_ConvertorParams.WidthExtend / MCU_WIDTH_PIXELS;
900009ec:	0900      	lsrs	r0, r0, #4
900009ee:	4c5f      	ldr	r4, [pc, #380]	; (90000b6c <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x1a0>)
  * @retval None
  */
uint32_t JPEG_Decode_DMA(JPEG_HandleTypeDef *hjpeg, uint8_t* input, uint32_t chunkSizeIn /* length */, uint8_t* output)
{
    FrameBufferAddress = output;
    Output_Is_Paused = 0;
900009f0:	2700      	movs	r7, #0
900009f2:	4e5f      	ldr	r6, [pc, #380]	; (90000b70 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x1a4>)
      JPEG_ConvertorParams.MCU_pr_line = JPEG_ConvertorParams.WidthExtend / MCU_WIDTH_PIXELS;
900009f4:	60e0      	str	r0, [r4, #12]
      Jpeg_OUT_BufferTab[i].State = JPEG_BUFFER_EMPTY;
      Jpeg_OUT_BufferTab[i].DataBufferSize = 0;
    }

    //Do not return from this function until done with decoding all chunks.
    HAL_JPEG_Decode_DMA(hjpeg, input, CHUNK_SIZE_IN, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
900009f6:	eb00 0040 	add.w	r0, r0, r0, lsl #1
      Jpeg_OUT_BufferTab[i].State = JPEG_BUFFER_EMPTY;
900009fa:	4d5e      	ldr	r5, [pc, #376]	; (90000b74 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x1a8>)
    HAL_JPEG_Decode_DMA(hjpeg, input, CHUNK_SIZE_IN, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
900009fc:	01c0      	lsls	r0, r0, #7
    Output_Is_Paused = 0;
900009fe:	6037      	str	r7, [r6, #0]
    DMA2D_output_Is_Paused = 1;
90000a00:	f8df b19c 	ldr.w	fp, [pc, #412]	; 90000ba0 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x1d4>
    HAL_JPEG_Decode_DMA(hjpeg, input, CHUNK_SIZE_IN, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
90000a04:	9000      	str	r0, [sp, #0]
      JPEG_ConvertorParams.LastLineHeight = 16 - (videoInfo.frame_height % MCU_HEIGHT_PIXELS);
90000a06:	9803      	ldr	r0, [sp, #12]
    JPEG_OUT_Read_BufferIndex = 0;
90000a08:	f8df 8198 	ldr.w	r8, [pc, #408]	; 90000ba4 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x1d8>
      JPEG_ConvertorParams.LastLineHeight = 16 - (videoInfo.frame_height % MCU_HEIGHT_PIXELS);
90000a0c:	6900      	ldr	r0, [r0, #16]
      Jpeg_OUT_BufferTab[i].State = JPEG_BUFFER_EMPTY;
90000a0e:	702f      	strb	r7, [r5, #0]
      JPEG_ConvertorParams.LastLineHeight = 16 - (videoInfo.frame_height % MCU_HEIGHT_PIXELS);
90000a10:	f000 000f 	and.w	r0, r0, #15
      Jpeg_OUT_BufferTab[i].DataBufferSize = 0;
90000a14:	60af      	str	r7, [r5, #8]
      Jpeg_OUT_BufferTab[i].State = JPEG_BUFFER_EMPTY;
90000a16:	732f      	strb	r7, [r5, #12]
      JPEG_ConvertorParams.LastLineHeight = 16 - (videoInfo.frame_height % MCU_HEIGHT_PIXELS);
90000a18:	f1c0 0010 	rsb	r0, r0, #16
      Jpeg_OUT_BufferTab[i].DataBufferSize = 0;
90000a1c:	616f      	str	r7, [r5, #20]
90000a1e:	f8df 9188 	ldr.w	r9, [pc, #392]	; 90000ba8 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x1dc>
      JPEG_ConvertorParams.LastLineHeight = 16 - (videoInfo.frame_height % MCU_HEIGHT_PIXELS);
90000a22:	60a0      	str	r0, [r4, #8]
      JPEG_ConvertorParams.ScaledWidth = 480 * JPEG_ConvertorParams.bytes_pr_pixel;
90000a24:	f44f 7070 	mov.w	r0, #960	; 0x3c0
90000a28:	f8df a180 	ldr.w	sl, [pc, #384]	; 90000bac <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x1e0>
90000a2c:	6060      	str	r0, [r4, #4]
    FrameBufferAddress = output;
90000a2e:	4852      	ldr	r0, [pc, #328]	; (90000b78 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x1ac>)
90000a30:	4c52      	ldr	r4, [pc, #328]	; (90000b7c <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x1b0>)
90000a32:	6003      	str	r3, [r0, #0]
    JPEG_OUT_Write_BufferIndex = 0;
90000a34:	4b52      	ldr	r3, [pc, #328]	; (90000b80 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x1b4>)
    HAL_JPEG_Decode_DMA(hjpeg, input, CHUNK_SIZE_IN, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
90000a36:	4853      	ldr	r0, [pc, #332]	; (90000b84 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x1b8>)
    JPEG_OUT_Write_BufferIndex = 0;
90000a38:	601f      	str	r7, [r3, #0]
    JPEG_InputImageIndex = 0;
90000a3a:	4b53      	ldr	r3, [pc, #332]	; (90000b88 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x1bc>)
    JPEG_OUT_Read_BufferIndex = 0;
90000a3c:	f8c8 7000 	str.w	r7, [r8]
    JPEG_InputImageIndex = 0;
90000a40:	601f      	str	r7, [r3, #0]
    JPEG_InputImageAddress = (uint32_t)input;
90000a42:	4b52      	ldr	r3, [pc, #328]	; (90000b8c <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x1c0>)
90000a44:	6019      	str	r1, [r3, #0]
    JPEG_InputImageSize_Bytes = chunkSizeIn;
90000a46:	4b52      	ldr	r3, [pc, #328]	; (90000b90 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x1c4>)
90000a48:	601a      	str	r2, [r3, #0]
    HAL_JPEG_Decode_DMA(hjpeg, input, CHUNK_SIZE_IN, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
90000a4a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    MCU_BlockIndex = 0;
90000a4e:	4b51      	ldr	r3, [pc, #324]	; (90000b94 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x1c8>)
90000a50:	601f      	str	r7, [r3, #0]
    DMA2D_output_Is_Paused = 1;
90000a52:	2301      	movs	r3, #1
90000a54:	f8cb 3000 	str.w	r3, [fp]
    HAL_JPEG_Decode_DMA(hjpeg, input, CHUNK_SIZE_IN, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
90000a58:	686b      	ldr	r3, [r5, #4]
90000a5a:	f008 fdc1 	bl	900095e0 <HAL_JPEG_Decode_DMA>
  * @param dma: DMA2D reference
  * @retval 1 : if JPEG processing has finished, 0 : if JPEG processing still ongoing
  */
uint32_t JPEG_OutputHandler(JPEG_HandleTypeDef *hjpeg, touchgfx::DMA_Interface& dma)
{
  if(Jpeg_HWDecodingEnd && DMA2D_CopyBufferEnd) // decode completed
90000a5e:	f8d9 3000 	ldr.w	r3, [r9]
90000a62:	b11b      	cbz	r3, 90000a6c <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0xa0>
90000a64:	4b4c      	ldr	r3, [pc, #304]	; (90000b98 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x1cc>)
90000a66:	681b      	ldr	r3, [r3, #0]
90000a68:	2b00      	cmp	r3, #0
90000a6a:	d17d      	bne.n	90000b68 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x19c>
  {
      return 1;
  }

  // Add job to DMA2D if ready and JPEG buffer is full
  if((Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].State == JPEG_BUFFER_FULL) && (DMA2D_output_Is_Paused == 1))
90000a6c:	f8d8 3000 	ldr.w	r3, [r8]
90000a70:	eb03 0243 	add.w	r2, r3, r3, lsl #1
90000a74:	f815 1022 	ldrb.w	r1, [r5, r2, lsl #2]
90000a78:	eb05 0282 	add.w	r2, r5, r2, lsl #2
90000a7c:	2901      	cmp	r1, #1
90000a7e:	d042      	beq.n	90000b06 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x13a>
      // Try to start DMA2D
      dma.start();
  }

  // Start JPEG IP if paused and next buffer is empty
  if((Output_Is_Paused == 1) && \
90000a80:	6833      	ldr	r3, [r6, #0]
          (Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State == JPEG_BUFFER_EMPTY) &&\
90000a82:	2b01      	cmp	r3, #1
90000a84:	d029      	beq.n	90000ada <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x10e>
  {
      Output_Is_Paused = 0;
      HAL_JPEG_Resume(hjpeg, JPEG_PAUSE_RESUME_OUTPUT);
  }

  if ((Output_Is_Paused == 0) && (DMA2D_output_Is_Paused == 0))
90000a86:	6833      	ldr	r3, [r6, #0]
90000a88:	b9c3      	cbnz	r3, 90000abc <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0xf0>
90000a8a:	f8db 3000 	ldr.w	r3, [fp]
90000a8e:	fab3 f383 	clz	r3, r3
90000a92:	095b      	lsrs	r3, r3, #5
90000a94:	005b      	lsls	r3, r3, #1
        JpegProcessing_End = JPEG_OutputHandler(&hjpeg, *pDma);
90000a96:	6023      	str	r3, [r4, #0]
        if (JpegProcessing_End == 2)
90000a98:	6823      	ldr	r3, [r4, #0]
90000a9a:	2b02      	cmp	r3, #2
90000a9c:	d013      	beq.n	90000ac6 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0xfa>
      while(JpegProcessing_End != 1);
90000a9e:	6823      	ldr	r3, [r4, #0]
90000aa0:	2b01      	cmp	r3, #1
90000aa2:	d1dc      	bne.n	90000a5e <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x92>
  {
      return count_ == max_size_;
  }
  void reset()
  {
      head_ = tail_ = count_ = 0;
90000aa4:	2300      	movs	r3, #0
      DMA2D_CopyBufferEnd = 0;
90000aa6:	4a3c      	ldr	r2, [pc, #240]	; (90000b98 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x1cc>)
90000aa8:	e9ca 3302 	strd	r3, r3, [sl, #8]
90000aac:	f8ca 3004 	str.w	r3, [sl, #4]
      Jpeg_HWDecodingEnd = 0;
90000ab0:	f8c9 3000 	str.w	r3, [r9]
      DMA2D_CopyBufferEnd = 0;
90000ab4:	6013      	str	r3, [r2, #0]
}
90000ab6:	b005      	add	sp, #20
90000ab8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  {
      return 2;
  }

  return 0;
90000abc:	2300      	movs	r3, #0
        JpegProcessing_End = JPEG_OutputHandler(&hjpeg, *pDma);
90000abe:	6023      	str	r3, [r4, #0]
        if (JpegProcessing_End == 2)
90000ac0:	6823      	ldr	r3, [r4, #0]
90000ac2:	2b02      	cmp	r3, #2
90000ac4:	d1eb      	bne.n	90000a9e <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0xd2>
          SEM_WAIT(semDecodingDone);
90000ac6:	4b35      	ldr	r3, [pc, #212]	; (90000b9c <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x1d0>)
90000ac8:	f04f 31ff 	mov.w	r1, #4294967295
90000acc:	6818      	ldr	r0, [r3, #0]
90000ace:	f00c fdf9 	bl	9000d6c4 <osSemaphoreAcquire>
      while(JpegProcessing_End != 1);
90000ad2:	6823      	ldr	r3, [r4, #0]
90000ad4:	2b01      	cmp	r3, #1
90000ad6:	d1c2      	bne.n	90000a5e <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x92>
90000ad8:	e7e4      	b.n	90000aa4 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0xd8>
          (Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State == JPEG_BUFFER_EMPTY) &&\
90000ada:	4b29      	ldr	r3, [pc, #164]	; (90000b80 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x1b4>)
90000adc:	681b      	ldr	r3, [r3, #0]
90000ade:	eb03 0343 	add.w	r3, r3, r3, lsl #1
  if((Output_Is_Paused == 1) && \
90000ae2:	f815 3023 	ldrb.w	r3, [r5, r3, lsl #2]
90000ae6:	2b00      	cmp	r3, #0
90000ae8:	d1cd      	bne.n	90000a86 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0xba>
          (Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].State == JPEG_BUFFER_EMPTY))
90000aea:	f8d8 3000 	ldr.w	r3, [r8]
90000aee:	eb03 0343 	add.w	r3, r3, r3, lsl #1
          (Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State == JPEG_BUFFER_EMPTY) &&\
90000af2:	f815 3023 	ldrb.w	r3, [r5, r3, lsl #2]
90000af6:	2b00      	cmp	r3, #0
90000af8:	d1c5      	bne.n	90000a86 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0xba>
      HAL_JPEG_Resume(hjpeg, JPEG_PAUSE_RESUME_OUTPUT);
90000afa:	2102      	movs	r1, #2
90000afc:	4821      	ldr	r0, [pc, #132]	; (90000b84 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x1b8>)
      Output_Is_Paused = 0;
90000afe:	6033      	str	r3, [r6, #0]
      HAL_JPEG_Resume(hjpeg, JPEG_PAUSE_RESUME_OUTPUT);
90000b00:	f008 feb6 	bl	90009870 <HAL_JPEG_Resume>
90000b04:	e7bf      	b.n	90000a86 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0xba>
  if((Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].State == JPEG_BUFFER_FULL) && (DMA2D_output_Is_Paused == 1))
90000b06:	f8db 1000 	ldr.w	r1, [fp]
90000b0a:	2901      	cmp	r1, #1
90000b0c:	d1b8      	bne.n	90000a80 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0xb4>
      JPEG_OUT_Read_BufferIndex++;
90000b0e:	3301      	adds	r3, #1
      };
90000b10:	4920      	ldr	r1, [pc, #128]	; (90000b94 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x1c8>)
      tail_ = (tail_ + 1) % max_size_;
90000b12:	f8da 0000 	ldr.w	r0, [sl]
      JPEG_OUT_Read_BufferIndex++;
90000b16:	2b01      	cmp	r3, #1
      };
90000b18:	f8d1 c000 	ldr.w	ip, [r1]
      JPEG_OUT_Read_BufferIndex++;
90000b1c:	bf88      	it	hi
90000b1e:	463b      	movhi	r3, r7
90000b20:	f8c8 3000 	str.w	r3, [r8]
      buffer_[tail_] = job;
90000b24:	f8da 3008 	ldr.w	r3, [sl, #8]
      tail_ = (tail_ + 1) % max_size_;
90000b28:	1c59      	adds	r1, r3, #1
      buffer_[tail_] = job;
90000b2a:	3302      	adds	r3, #2
90000b2c:	f84a c033 	str.w	ip, [sl, r3, lsl #3]
90000b30:	eb0a 03c3 	add.w	r3, sl, r3, lsl #3
90000b34:	605a      	str	r2, [r3, #4]
        JpegProcessing_End = JPEG_OutputHandler(&hjpeg, *pDma);
90000b36:	9a03      	ldr	r2, [sp, #12]
      tail_ = (tail_ + 1) % max_size_;
90000b38:	fbb1 f3f0 	udiv	r3, r1, r0
90000b3c:	fb00 1113 	mls	r1, r0, r3, r1
90000b40:	6c50      	ldr	r0, [r2, #68]	; 0x44
      count_++;
90000b42:	f8da 200c 	ldr.w	r2, [sl, #12]
      tail_ = (tail_ + 1) % max_size_;
90000b46:	f8ca 1008 	str.w	r1, [sl, #8]
      count_++;
90000b4a:	3201      	adds	r2, #1
      MCU_BlockIndex += JPEG_ConvertorParams.MCU_pr_line;
90000b4c:	4911      	ldr	r1, [pc, #68]	; (90000b94 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x1c8>)
90000b4e:	f8ca 200c 	str.w	r2, [sl, #12]
90000b52:	4a06      	ldr	r2, [pc, #24]	; (90000b6c <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x1a0>)
90000b54:	680b      	ldr	r3, [r1, #0]
90000b56:	68d2      	ldr	r2, [r2, #12]
90000b58:	4413      	add	r3, r2
90000b5a:	600b      	str	r3, [r1, #0]
      dma.start();
90000b5c:	6803      	ldr	r3, [r0, #0]
      DMA2D_output_Is_Paused = 0;
90000b5e:	f8cb 7000 	str.w	r7, [fp]
      dma.start();
90000b62:	691b      	ldr	r3, [r3, #16]
90000b64:	4798      	blx	r3
90000b66:	e78b      	b.n	90000a80 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0xb4>
      return 1;
90000b68:	2301      	movs	r3, #1
90000b6a:	e794      	b.n	90000a96 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0xca>
90000b6c:	24005ba0 	.word	0x24005ba0
90000b70:	24005b9c 	.word	0x24005b9c
90000b74:	24000004 	.word	0x24000004
90000b78:	24005b74 	.word	0x24005b74
90000b7c:	24005b8c 	.word	0x24005b8c
90000b80:	24005b88 	.word	0x24005b88
90000b84:	2400af00 	.word	0x2400af00
90000b88:	24005b7c 	.word	0x24005b7c
90000b8c:	24005b78 	.word	0x24005b78
90000b90:	24005b80 	.word	0x24005b80
90000b94:	24005b94 	.word	0x24005b94
90000b98:	24005b6c 	.word	0x24005b6c
90000b9c:	24005bd8 	.word	0x24005bd8
90000ba0:	24005b70 	.word	0x24005b70
90000ba4:	24005b84 	.word	0x24005b84
90000ba8:	24005b90 	.word	0x24005b90
90000bac:	24005bb4 	.word	0x24005bb4

90000bb0 <_ZN20HardwareMJPEGDecoder9gotoFrameEm>:
{
90000bb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (frameNumber > getNumberOfFrames())
90000bb2:	6803      	ldr	r3, [r0, #0]
90000bb4:	2901      	cmp	r1, #1
90000bb6:	4e2a      	ldr	r6, [pc, #168]	; (90000c60 <_ZN20HardwareMJPEGDecoder9gotoFrameEm+0xb0>)
{
90000bb8:	4604      	mov	r4, r0
    if (frameNumber > getNumberOfFrames())
90000bba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90000bbc:	bf38      	it	cc
90000bbe:	2101      	movcc	r1, #1
90000bc0:	42b3      	cmp	r3, r6
90000bc2:	460d      	mov	r5, r1
90000bc4:	d138      	bne.n	90000c38 <_ZN20HardwareMJPEGDecoder9gotoFrameEm+0x88>
    return videoInfo.number_of_frames;
90000bc6:	6883      	ldr	r3, [r0, #8]
    if (frameNumber > getNumberOfFrames())
90000bc8:	4299      	cmp	r1, r3
90000bca:	d82a      	bhi.n	90000c22 <_ZN20HardwareMJPEGDecoder9gotoFrameEm+0x72>
    uint32_t offset = indexOffset + 8 + (frameNumber-1)*16;
90000bcc:	1e6b      	subs	r3, r5, #1
90000bce:	69e2      	ldr	r2, [r4, #28]
    if (reader != 0)
90000bd0:	6b20      	ldr	r0, [r4, #48]	; 0x30
    uint32_t offset = indexOffset + 8 + (frameNumber-1)*16;
90000bd2:	eb02 1703 	add.w	r7, r2, r3, lsl #4
    if (reader != 0)
90000bd6:	b350      	cbz	r0, 90000c2e <_ZN20HardwareMJPEGDecoder9gotoFrameEm+0x7e>
        if (length > aviBufferLength)
90000bd8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
90000bda:	2b0f      	cmp	r3, #15
90000bdc:	d937      	bls.n	90000c4e <_ZN20HardwareMJPEGDecoder9gotoFrameEm+0x9e>
        reader->seek(offset);
90000bde:	6803      	ldr	r3, [r0, #0]
    uint32_t offset = indexOffset + 8 + (frameNumber-1)*16;
90000be0:	f107 0608 	add.w	r6, r7, #8
        reader->seek(offset);
90000be4:	68db      	ldr	r3, [r3, #12]
90000be6:	4631      	mov	r1, r6
90000be8:	4798      	blx	r3
        if (!reader->readData(aviBuffer, length))
90000bea:	6b20      	ldr	r0, [r4, #48]	; 0x30
90000bec:	2210      	movs	r2, #16
90000bee:	6b61      	ldr	r1, [r4, #52]	; 0x34
90000bf0:	6803      	ldr	r3, [r0, #0]
90000bf2:	691b      	ldr	r3, [r3, #16]
90000bf4:	4798      	blx	r3
90000bf6:	b1b0      	cbz	r0, 90000c26 <_ZN20HardwareMJPEGDecoder9gotoFrameEm+0x76>
    if (reader != 0)
90000bf8:	6b23      	ldr	r3, [r4, #48]	; 0x30
        aviBufferStartOffset = offset;
90000bfa:	63e6      	str	r6, [r4, #60]	; 0x3c
    if (reader != 0)
90000bfc:	b1bb      	cbz	r3, 90000c2e <_ZN20HardwareMJPEGDecoder9gotoFrameEm+0x7e>
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8) | (aviBuffer[index+2]<<16) | (aviBuffer[index+3]<<24);
90000bfe:	6b62      	ldr	r2, [r4, #52]	; 0x34
90000c00:	7a93      	ldrb	r3, [r2, #10]
90000c02:	7a51      	ldrb	r1, [r2, #9]
90000c04:	041b      	lsls	r3, r3, #16
90000c06:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
90000c0a:	7a11      	ldrb	r1, [r2, #8]
90000c0c:	7ad2      	ldrb	r2, [r2, #11]
90000c0e:	430b      	orrs	r3, r1
90000c10:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
    currentMovieOffset = getU32(offset + 8) + firstFrameOffset - 4;
90000c14:	6a22      	ldr	r2, [r4, #32]
    this->frameNumber = frameNumber;
90000c16:	6165      	str	r5, [r4, #20]
    currentMovieOffset = getU32(offset + 8) + firstFrameOffset - 4;
90000c18:	3a04      	subs	r2, #4
90000c1a:	441a      	add	r2, r3
90000c1c:	61a2      	str	r2, [r4, #24]
}
90000c1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return videoInfo.number_of_frames;
90000c20:	68a3      	ldr	r3, [r4, #8]
{
90000c22:	461d      	mov	r5, r3
90000c24:	e7d2      	b.n	90000bcc <_ZN20HardwareMJPEGDecoder9gotoFrameEm+0x1c>
            lastError = AVI_ERROR_EOF_REACHED;
90000c26:	230d      	movs	r3, #13
90000c28:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
90000c2c:	e7e4      	b.n	90000bf8 <_ZN20HardwareMJPEGDecoder9gotoFrameEm+0x48>
    currentMovieOffset = getU32(offset + 8) + firstFrameOffset - 4;
90000c2e:	f107 0310 	add.w	r3, r7, #16
        return d[0] | (d[1] << 8) | (d[2] << 16) | (d[3] << 24);
90000c32:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
90000c34:	58d3      	ldr	r3, [r2, r3]
90000c36:	e7ed      	b.n	90000c14 <_ZN20HardwareMJPEGDecoder9gotoFrameEm+0x64>
    if (frameNumber > getNumberOfFrames())
90000c38:	4798      	blx	r3
90000c3a:	4285      	cmp	r5, r0
90000c3c:	d9c6      	bls.n	90000bcc <_ZN20HardwareMJPEGDecoder9gotoFrameEm+0x1c>
        frameNumber = getNumberOfFrames();
90000c3e:	6823      	ldr	r3, [r4, #0]
90000c40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90000c42:	42b3      	cmp	r3, r6
90000c44:	d0ec      	beq.n	90000c20 <_ZN20HardwareMJPEGDecoder9gotoFrameEm+0x70>
90000c46:	4620      	mov	r0, r4
90000c48:	4798      	blx	r3
90000c4a:	4605      	mov	r5, r0
90000c4c:	e7be      	b.n	90000bcc <_ZN20HardwareMJPEGDecoder9gotoFrameEm+0x1c>
            lastError = AVI_ERROR_FILE_BUFFER_TO_SMALL;
90000c4e:	2009      	movs	r0, #9
            assert(!"Buffer to small");
90000c50:	4b04      	ldr	r3, [pc, #16]	; (90000c64 <_ZN20HardwareMJPEGDecoder9gotoFrameEm+0xb4>)
90000c52:	4a05      	ldr	r2, [pc, #20]	; (90000c68 <_ZN20HardwareMJPEGDecoder9gotoFrameEm+0xb8>)
90000c54:	21a6      	movs	r1, #166	; 0xa6
            lastError = AVI_ERROR_FILE_BUFFER_TO_SMALL;
90000c56:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
            assert(!"Buffer to small");
90000c5a:	4804      	ldr	r0, [pc, #16]	; (90000c6c <_ZN20HardwareMJPEGDecoder9gotoFrameEm+0xbc>)
90000c5c:	f022 f8f0 	bl	90022e40 <__assert_func>
90000c60:	90000989 	.word	0x90000989
90000c64:	90024258 	.word	0x90024258
90000c68:	9002426c 	.word	0x9002426c
90000c6c:	900241fc 	.word	0x900241fc

90000c70 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm>:
{
90000c70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90000c74:	4604      	mov	r4, r0
    if (reader != 0)
90000c76:	6b00      	ldr	r0, [r0, #48]	; 0x30
{
90000c78:	b083      	sub	sp, #12
90000c7a:	4615      	mov	r5, r2
    readData(currentMovieOffset, 8);
90000c7c:	69a6      	ldr	r6, [r4, #24]
    if (reader != 0)
90000c7e:	2800      	cmp	r0, #0
90000c80:	f000 80e4 	beq.w	90000e4c <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x1dc>
        if (length > aviBufferLength)
90000c84:	6ba3      	ldr	r3, [r4, #56]	; 0x38
90000c86:	2b07      	cmp	r3, #7
90000c88:	f240 80e7 	bls.w	90000e5a <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x1ea>
        reader->seek(offset);
90000c8c:	6803      	ldr	r3, [r0, #0]
90000c8e:	4631      	mov	r1, r6
90000c90:	68db      	ldr	r3, [r3, #12]
90000c92:	4798      	blx	r3
        if (!reader->readData(aviBuffer, length))
90000c94:	6b20      	ldr	r0, [r4, #48]	; 0x30
90000c96:	2208      	movs	r2, #8
90000c98:	6b61      	ldr	r1, [r4, #52]	; 0x34
90000c9a:	6803      	ldr	r3, [r0, #0]
90000c9c:	691b      	ldr	r3, [r3, #16]
90000c9e:	4798      	blx	r3
90000ca0:	2800      	cmp	r0, #0
90000ca2:	f000 80cf 	beq.w	90000e44 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x1d4>
    const uint32_t length = getU32(currentMovieOffset + 4);
90000ca6:	69a7      	ldr	r7, [r4, #24]
    if (reader != 0)
90000ca8:	6b20      	ldr	r0, [r4, #48]	; 0x30
    const uint32_t length = getU32(currentMovieOffset + 4);
90000caa:	1d3a      	adds	r2, r7, #4
        aviBufferStartOffset = offset;
90000cac:	63e6      	str	r6, [r4, #60]	; 0x3c
    if (reader != 0)
90000cae:	2800      	cmp	r0, #0
90000cb0:	f000 80dc 	beq.w	90000e6c <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x1fc>
        const uint32_t index = offset - aviBufferStartOffset;
90000cb4:	1b92      	subs	r2, r2, r6
    const uint8_t* mjpgdata = readData(currentMovieOffset + 8, length);
90000cb6:	3708      	adds	r7, #8
        if (length > aviBufferLength)
90000cb8:	e9d4 630d 	ldrd	r6, r3, [r4, #52]	; 0x34
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8) | (aviBuffer[index+2]<<16) | (aviBuffer[index+3]<<24);
90000cbc:	18b1      	adds	r1, r6, r2
90000cbe:	5cb2      	ldrb	r2, [r6, r2]
90000cc0:	788e      	ldrb	r6, [r1, #2]
90000cc2:	f891 c001 	ldrb.w	ip, [r1, #1]
90000cc6:	0436      	lsls	r6, r6, #16
90000cc8:	ea46 260c 	orr.w	r6, r6, ip, lsl #8
90000ccc:	4316      	orrs	r6, r2
90000cce:	78ca      	ldrb	r2, [r1, #3]
90000cd0:	ea46 6602 	orr.w	r6, r6, r2, lsl #24
        if (length > aviBufferLength)
90000cd4:	42b3      	cmp	r3, r6
90000cd6:	f0c0 80c0 	bcc.w	90000e5a <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x1ea>
        reader->seek(offset);
90000cda:	6803      	ldr	r3, [r0, #0]
90000cdc:	4639      	mov	r1, r7
90000cde:	68db      	ldr	r3, [r3, #12]
90000ce0:	4798      	blx	r3
        if (!reader->readData(aviBuffer, length))
90000ce2:	6b20      	ldr	r0, [r4, #48]	; 0x30
90000ce4:	4632      	mov	r2, r6
90000ce6:	6b61      	ldr	r1, [r4, #52]	; 0x34
90000ce8:	6803      	ldr	r3, [r0, #0]
90000cea:	691b      	ldr	r3, [r3, #16]
90000cec:	4798      	blx	r3
90000cee:	b910      	cbnz	r0, 90000cf6 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x86>
            lastError = AVI_ERROR_EOF_REACHED;
90000cf0:	230d      	movs	r3, #13
90000cf2:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        return aviBuffer;
90000cf6:	6b61      	ldr	r1, [r4, #52]	; 0x34
        aviBufferStartOffset = offset;
90000cf8:	63e7      	str	r7, [r4, #60]	; 0x3c
    if (frameBuffer) //only decode if buffers are assigned.
90000cfa:	2d00      	cmp	r5, #0
90000cfc:	d053      	beq.n	90000da6 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x136>
    HAL_JPEG_Decode_DMA(hjpeg, input, CHUNK_SIZE_IN, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
90000cfe:	4a5c      	ldr	r2, [pc, #368]	; (90000e70 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x200>)
    FrameBufferAddress = output;
90000d00:	4b5c      	ldr	r3, [pc, #368]	; (90000e74 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x204>)
    HAL_JPEG_Decode_DMA(hjpeg, input, CHUNK_SIZE_IN, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
90000d02:	68d2      	ldr	r2, [r2, #12]
    FrameBufferAddress = output;
90000d04:	601d      	str	r5, [r3, #0]
    Output_Is_Paused = 0;
90000d06:	2300      	movs	r3, #0
    HAL_JPEG_Decode_DMA(hjpeg, input, CHUNK_SIZE_IN, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
90000d08:	eb02 0242 	add.w	r2, r2, r2, lsl #1
      Jpeg_OUT_BufferTab[i].State = JPEG_BUFFER_EMPTY;
90000d0c:	4d5a      	ldr	r5, [pc, #360]	; (90000e78 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x208>)
    Output_Is_Paused = 0;
90000d0e:	4f5b      	ldr	r7, [pc, #364]	; (90000e7c <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x20c>)
    HAL_JPEG_Decode_DMA(hjpeg, input, CHUNK_SIZE_IN, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
90000d10:	01d2      	lsls	r2, r2, #7
      Jpeg_OUT_BufferTab[i].State = JPEG_BUFFER_EMPTY;
90000d12:	702b      	strb	r3, [r5, #0]
    Output_Is_Paused = 0;
90000d14:	603b      	str	r3, [r7, #0]
      Jpeg_OUT_BufferTab[i].DataBufferSize = 0;
90000d16:	60ab      	str	r3, [r5, #8]
      Jpeg_OUT_BufferTab[i].State = JPEG_BUFFER_EMPTY;
90000d18:	732b      	strb	r3, [r5, #12]
      Jpeg_OUT_BufferTab[i].DataBufferSize = 0;
90000d1a:	616b      	str	r3, [r5, #20]
    HAL_JPEG_Decode_DMA(hjpeg, input, CHUNK_SIZE_IN, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
90000d1c:	9200      	str	r2, [sp, #0]
    JPEG_OUT_Write_BufferIndex = 0;
90000d1e:	4a58      	ldr	r2, [pc, #352]	; (90000e80 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x210>)
    JPEG_OUT_Read_BufferIndex = 0;
90000d20:	f8df 8188 	ldr.w	r8, [pc, #392]	; 90000eac <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x23c>
    JPEG_OUT_Write_BufferIndex = 0;
90000d24:	6013      	str	r3, [r2, #0]
    JPEG_InputImageIndex = 0;
90000d26:	4a57      	ldr	r2, [pc, #348]	; (90000e84 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x214>)
    DMA2D_output_Is_Paused = 1;
90000d28:	f8df a184 	ldr.w	sl, [pc, #388]	; 90000eb0 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x240>
    JPEG_InputImageIndex = 0;
90000d2c:	6013      	str	r3, [r2, #0]
    JPEG_InputImageAddress = (uint32_t)input;
90000d2e:	4a56      	ldr	r2, [pc, #344]	; (90000e88 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x218>)
    JPEG_OUT_Read_BufferIndex = 0;
90000d30:	f8c8 3000 	str.w	r3, [r8]
    JPEG_InputImageAddress = (uint32_t)input;
90000d34:	6011      	str	r1, [r2, #0]
    JPEG_InputImageSize_Bytes = chunkSizeIn;
90000d36:	4a55      	ldr	r2, [pc, #340]	; (90000e8c <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x21c>)
    HAL_JPEG_Decode_DMA(hjpeg, input, CHUNK_SIZE_IN, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
90000d38:	4855      	ldr	r0, [pc, #340]	; (90000e90 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x220>)
    JPEG_InputImageSize_Bytes = chunkSizeIn;
90000d3a:	6016      	str	r6, [r2, #0]
    MCU_BlockIndex = 0;
90000d3c:	4a55      	ldr	r2, [pc, #340]	; (90000e94 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x224>)
90000d3e:	f8df 9174 	ldr.w	r9, [pc, #372]	; 90000eb4 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x244>
90000d42:	6013      	str	r3, [r2, #0]
    DMA2D_output_Is_Paused = 1;
90000d44:	2301      	movs	r3, #1
    HAL_JPEG_Decode_DMA(hjpeg, input, CHUNK_SIZE_IN, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
90000d46:	f44f 3280 	mov.w	r2, #65536	; 0x10000
90000d4a:	4e53      	ldr	r6, [pc, #332]	; (90000e98 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x228>)
    DMA2D_output_Is_Paused = 1;
90000d4c:	f8ca 3000 	str.w	r3, [sl]
    HAL_JPEG_Decode_DMA(hjpeg, input, CHUNK_SIZE_IN, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
90000d50:	686b      	ldr	r3, [r5, #4]
      buffer_[tail_] = job;
90000d52:	f8df b164 	ldr.w	fp, [pc, #356]	; 90000eb8 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x248>
90000d56:	f008 fc43 	bl	900095e0 <HAL_JPEG_Decode_DMA>
    return 0;
90000d5a:	e008      	b.n	90000d6e <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0xfe>
  if ((Output_Is_Paused == 0) && (DMA2D_output_Is_Paused == 0))
90000d5c:	f8da 3000 	ldr.w	r3, [sl]
90000d60:	fab3 f383 	clz	r3, r3
90000d64:	095b      	lsrs	r3, r3, #5
90000d66:	005b      	lsls	r3, r3, #1
        JpegProcessing_End = JPEG_OutputHandler(&hjpeg, *pDma);
90000d68:	6033      	str	r3, [r6, #0]
      while(JpegProcessing_End == 0);
90000d6a:	6833      	ldr	r3, [r6, #0]
90000d6c:	b9db      	cbnz	r3, 90000da6 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x136>
  if(Jpeg_HWDecodingEnd && DMA2D_CopyBufferEnd) // decode completed
90000d6e:	f8d9 3000 	ldr.w	r3, [r9]
90000d72:	b11b      	cbz	r3, 90000d7c <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x10c>
90000d74:	4b49      	ldr	r3, [pc, #292]	; (90000e9c <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x22c>)
90000d76:	681b      	ldr	r3, [r3, #0]
90000d78:	2b00      	cmp	r3, #0
90000d7a:	d161      	bne.n	90000e40 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x1d0>
  if((Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].State == JPEG_BUFFER_FULL) && (DMA2D_output_Is_Paused == 1))
90000d7c:	f8d8 3000 	ldr.w	r3, [r8]
90000d80:	eb03 0243 	add.w	r2, r3, r3, lsl #1
90000d84:	f815 1022 	ldrb.w	r1, [r5, r2, lsl #2]
90000d88:	eb05 0282 	add.w	r2, r5, r2, lsl #2
90000d8c:	2901      	cmp	r1, #1
90000d8e:	d024      	beq.n	90000dda <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x16a>
  if((Output_Is_Paused == 1) && \
90000d90:	683b      	ldr	r3, [r7, #0]
          (Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State == JPEG_BUFFER_EMPTY) &&\
90000d92:	2b01      	cmp	r3, #1
90000d94:	d00b      	beq.n	90000dae <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x13e>
  if ((Output_Is_Paused == 0) && (DMA2D_output_Is_Paused == 0))
90000d96:	683b      	ldr	r3, [r7, #0]
90000d98:	2b00      	cmp	r3, #0
90000d9a:	d0df      	beq.n	90000d5c <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0xec>
  return 0;
90000d9c:	2300      	movs	r3, #0
        JpegProcessing_End = JPEG_OutputHandler(&hjpeg, *pDma);
90000d9e:	6033      	str	r3, [r6, #0]
      while(JpegProcessing_End == 0);
90000da0:	6833      	ldr	r3, [r6, #0]
90000da2:	2b00      	cmp	r3, #0
90000da4:	d0e3      	beq.n	90000d6e <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0xfe>
}
90000da6:	2001      	movs	r0, #1
90000da8:	b003      	add	sp, #12
90000daa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          (Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State == JPEG_BUFFER_EMPTY) &&\
90000dae:	4b34      	ldr	r3, [pc, #208]	; (90000e80 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x210>)
90000db0:	681b      	ldr	r3, [r3, #0]
90000db2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
  if((Output_Is_Paused == 1) && \
90000db6:	f815 3023 	ldrb.w	r3, [r5, r3, lsl #2]
90000dba:	2b00      	cmp	r3, #0
90000dbc:	d1eb      	bne.n	90000d96 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x126>
          (Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].State == JPEG_BUFFER_EMPTY))
90000dbe:	f8d8 3000 	ldr.w	r3, [r8]
90000dc2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
          (Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State == JPEG_BUFFER_EMPTY) &&\
90000dc6:	f815 3023 	ldrb.w	r3, [r5, r3, lsl #2]
90000dca:	2b00      	cmp	r3, #0
90000dcc:	d1e3      	bne.n	90000d96 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x126>
      HAL_JPEG_Resume(hjpeg, JPEG_PAUSE_RESUME_OUTPUT);
90000dce:	2102      	movs	r1, #2
90000dd0:	482f      	ldr	r0, [pc, #188]	; (90000e90 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x220>)
      Output_Is_Paused = 0;
90000dd2:	603b      	str	r3, [r7, #0]
      HAL_JPEG_Resume(hjpeg, JPEG_PAUSE_RESUME_OUTPUT);
90000dd4:	f008 fd4c 	bl	90009870 <HAL_JPEG_Resume>
90000dd8:	e7dd      	b.n	90000d96 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x126>
  if((Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].State == JPEG_BUFFER_FULL) && (DMA2D_output_Is_Paused == 1))
90000dda:	f8da 1000 	ldr.w	r1, [sl]
90000dde:	2901      	cmp	r1, #1
90000de0:	d1d6      	bne.n	90000d90 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x120>
90000de2:	f8db 1008 	ldr.w	r1, [fp, #8]
      JPEG_OUT_Read_BufferIndex++;
90000de6:	3301      	adds	r3, #1
      };
90000de8:	482a      	ldr	r0, [pc, #168]	; (90000e94 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x224>)
      tail_ = (tail_ + 1) % max_size_;
90000dea:	f8db c000 	ldr.w	ip, [fp]
      if(JPEG_OUT_Read_BufferIndex >= NB_OUTPUT_DATA_BUFFERS)
90000dee:	2b01      	cmp	r3, #1
      };
90000df0:	f8d0 e000 	ldr.w	lr, [r0]
90000df4:	f101 0001 	add.w	r0, r1, #1
      buffer_[tail_] = job;
90000df8:	f101 0102 	add.w	r1, r1, #2
        JPEG_OUT_Read_BufferIndex = 0;
90000dfc:	bf88      	it	hi
90000dfe:	2300      	movhi	r3, #0
90000e00:	f84b e031 	str.w	lr, [fp, r1, lsl #3]
90000e04:	eb0b 01c1 	add.w	r1, fp, r1, lsl #3
90000e08:	f8c8 3000 	str.w	r3, [r8]
      DMA2D_output_Is_Paused = 0;
90000e0c:	2300      	movs	r3, #0
90000e0e:	604a      	str	r2, [r1, #4]
      count_++;
90000e10:	f8db 100c 	ldr.w	r1, [fp, #12]
      tail_ = (tail_ + 1) % max_size_;
90000e14:	fbb0 f2fc 	udiv	r2, r0, ip
      count_++;
90000e18:	3101      	adds	r1, #1
      tail_ = (tail_ + 1) % max_size_;
90000e1a:	fb0c 0012 	mls	r0, ip, r2, r0
      count_++;
90000e1e:	f8cb 100c 	str.w	r1, [fp, #12]
      tail_ = (tail_ + 1) % max_size_;
90000e22:	f8cb 0008 	str.w	r0, [fp, #8]
      MCU_BlockIndex += JPEG_ConvertorParams.MCU_pr_line;
90000e26:	4912      	ldr	r1, [pc, #72]	; (90000e70 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x200>)
90000e28:	481a      	ldr	r0, [pc, #104]	; (90000e94 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x224>)
90000e2a:	68c9      	ldr	r1, [r1, #12]
90000e2c:	6802      	ldr	r2, [r0, #0]
90000e2e:	440a      	add	r2, r1
90000e30:	6002      	str	r2, [r0, #0]
        JpegProcessing_End = JPEG_OutputHandler(&hjpeg, *pDma);
90000e32:	6c60      	ldr	r0, [r4, #68]	; 0x44
      DMA2D_output_Is_Paused = 0;
90000e34:	f8ca 3000 	str.w	r3, [sl]
      dma.start();
90000e38:	6803      	ldr	r3, [r0, #0]
90000e3a:	691b      	ldr	r3, [r3, #16]
90000e3c:	4798      	blx	r3
90000e3e:	e7a7      	b.n	90000d90 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x120>
      return 1;
90000e40:	2301      	movs	r3, #1
90000e42:	e791      	b.n	90000d68 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0xf8>
            lastError = AVI_ERROR_EOF_REACHED;
90000e44:	230d      	movs	r3, #13
90000e46:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
90000e4a:	e72c      	b.n	90000ca6 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x36>
    const uint32_t length = getU32(currentMovieOffset + 4);
90000e4c:	1d32      	adds	r2, r6, #4
    if (reader != 0)
90000e4e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    const uint8_t* mjpgdata = readData(currentMovieOffset + 8, length);
90000e50:	f106 0308 	add.w	r3, r6, #8
90000e54:	588e      	ldr	r6, [r1, r2]
    return movieData + offset;
90000e56:	4419      	add	r1, r3
90000e58:	e74f      	b.n	90000cfa <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x8a>
            lastError = AVI_ERROR_FILE_BUFFER_TO_SMALL;
90000e5a:	2009      	movs	r0, #9
            assert(!"Buffer to small");
90000e5c:	4b10      	ldr	r3, [pc, #64]	; (90000ea0 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x230>)
90000e5e:	4a11      	ldr	r2, [pc, #68]	; (90000ea4 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x234>)
90000e60:	21a6      	movs	r1, #166	; 0xa6
            lastError = AVI_ERROR_FILE_BUFFER_TO_SMALL;
90000e62:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
            assert(!"Buffer to small");
90000e66:	4810      	ldr	r0, [pc, #64]	; (90000ea8 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x238>)
90000e68:	f021 ffea 	bl	90022e40 <__assert_func>
    const uint32_t length = getU32(currentMovieOffset + 4);
90000e6c:	463e      	mov	r6, r7
90000e6e:	e7ee      	b.n	90000e4e <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x1de>
90000e70:	24005ba0 	.word	0x24005ba0
90000e74:	24005b74 	.word	0x24005b74
90000e78:	24000004 	.word	0x24000004
90000e7c:	24005b9c 	.word	0x24005b9c
90000e80:	24005b88 	.word	0x24005b88
90000e84:	24005b7c 	.word	0x24005b7c
90000e88:	24005b78 	.word	0x24005b78
90000e8c:	24005b80 	.word	0x24005b80
90000e90:	2400af00 	.word	0x2400af00
90000e94:	24005b94 	.word	0x24005b94
90000e98:	24005b8c 	.word	0x24005b8c
90000e9c:	24005b6c 	.word	0x24005b6c
90000ea0:	90024258 	.word	0x90024258
90000ea4:	9002426c 	.word	0x9002426c
90000ea8:	900241fc 	.word	0x900241fc
90000eac:	24005b84 	.word	0x24005b84
90000eb0:	24005b70 	.word	0x24005b70
90000eb4:	24005b90 	.word	0x24005b90
90000eb8:	24005bb4 	.word	0x24005bb4

90000ebc <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv>:
    assert((frameNumber > 0) && "HardwareMJPEGDecoder decoding without frame data!");
90000ebc:	6943      	ldr	r3, [r0, #20]
{
90000ebe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    assert((frameNumber > 0) && "HardwareMJPEGDecoder decoding without frame data!");
90000ec2:	2b00      	cmp	r3, #0
90000ec4:	f000 8098 	beq.w	90000ff8 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x13c>
    readData(currentMovieOffset, 8);
90000ec8:	4605      	mov	r5, r0
    if (reader != 0)
90000eca:	6b00      	ldr	r0, [r0, #48]	; 0x30
    readData(currentMovieOffset, 8);
90000ecc:	69ac      	ldr	r4, [r5, #24]
    if (reader != 0)
90000ece:	2800      	cmp	r0, #0
90000ed0:	f000 8082 	beq.w	90000fd8 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x11c>
        if (length > aviBufferLength)
90000ed4:	6bab      	ldr	r3, [r5, #56]	; 0x38
90000ed6:	2b07      	cmp	r3, #7
90000ed8:	f240 8083 	bls.w	90000fe2 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x126>
        reader->seek(offset);
90000edc:	6803      	ldr	r3, [r0, #0]
90000ede:	4621      	mov	r1, r4
90000ee0:	68db      	ldr	r3, [r3, #12]
90000ee2:	4798      	blx	r3
        if (!reader->readData(aviBuffer, length))
90000ee4:	6b28      	ldr	r0, [r5, #48]	; 0x30
90000ee6:	2208      	movs	r2, #8
90000ee8:	6b69      	ldr	r1, [r5, #52]	; 0x34
90000eea:	6803      	ldr	r3, [r0, #0]
90000eec:	691b      	ldr	r3, [r3, #16]
90000eee:	4798      	blx	r3
90000ef0:	2800      	cmp	r0, #0
90000ef2:	d06d      	beq.n	90000fd0 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x114>
    uint32_t chunkSize = getU32(currentMovieOffset + 4);
90000ef4:	69ab      	ldr	r3, [r5, #24]
    if (reader != 0)
90000ef6:	6b28      	ldr	r0, [r5, #48]	; 0x30
    uint32_t chunkSize = getU32(currentMovieOffset + 4);
90000ef8:	1d1a      	adds	r2, r3, #4
        aviBufferStartOffset = offset;
90000efa:	63ec      	str	r4, [r5, #60]	; 0x3c
    if (reader != 0)
90000efc:	2800      	cmp	r0, #0
90000efe:	d06d      	beq.n	90000fdc <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x120>
        const uint32_t index = offset - aviBufferStartOffset;
90000f00:	1b12      	subs	r2, r2, r4
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8) | (aviBuffer[index+2]<<16) | (aviBuffer[index+3]<<24);
90000f02:	6b6c      	ldr	r4, [r5, #52]	; 0x34
90000f04:	18a1      	adds	r1, r4, r2
90000f06:	5ca2      	ldrb	r2, [r4, r2]
90000f08:	788c      	ldrb	r4, [r1, #2]
90000f0a:	784e      	ldrb	r6, [r1, #1]
90000f0c:	0424      	lsls	r4, r4, #16
90000f0e:	ea44 2406 	orr.w	r4, r4, r6, lsl #8
90000f12:	4314      	orrs	r4, r2
90000f14:	78ca      	ldrb	r2, [r1, #3]
90000f16:	ea44 6402 	orr.w	r4, r4, r2, lsl #24
            lastError = AVI_ERROR_EOF_REACHED;
90000f1a:	270d      	movs	r7, #13
        if (streamNo == STREAM0 && chunkType == TYPEDC)
90000f1c:	f243 0630 	movw	r6, #12336	; 0x3030
90000f20:	e039      	b.n	90000f96 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0xda>
        if (length > aviBufferLength)
90000f22:	6bab      	ldr	r3, [r5, #56]	; 0x38
90000f24:	2b07      	cmp	r3, #7
90000f26:	d95c      	bls.n	90000fe2 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x126>
        reader->seek(offset);
90000f28:	6803      	ldr	r3, [r0, #0]
90000f2a:	4621      	mov	r1, r4
90000f2c:	68db      	ldr	r3, [r3, #12]
90000f2e:	4798      	blx	r3
        if (!reader->readData(aviBuffer, length))
90000f30:	6b28      	ldr	r0, [r5, #48]	; 0x30
90000f32:	2208      	movs	r2, #8
90000f34:	6b69      	ldr	r1, [r5, #52]	; 0x34
90000f36:	6803      	ldr	r3, [r0, #0]
90000f38:	691b      	ldr	r3, [r3, #16]
90000f3a:	4798      	blx	r3
90000f3c:	b908      	cbnz	r0, 90000f42 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x86>
            lastError = AVI_ERROR_EOF_REACHED;
90000f3e:	f885 7040 	strb.w	r7, [r5, #64]	; 0x40
    if (reader != 0)
90000f42:	6b28      	ldr	r0, [r5, #48]	; 0x30
        uint32_t streamNo  = getU16(currentMovieOffset);
90000f44:	69aa      	ldr	r2, [r5, #24]
        aviBufferStartOffset = offset;
90000f46:	63ec      	str	r4, [r5, #60]	; 0x3c
    if (reader != 0)
90000f48:	2800      	cmp	r0, #0
90000f4a:	d053      	beq.n	90000ff4 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x138>
        const uint32_t index = offset - aviBufferStartOffset;
90000f4c:	1b12      	subs	r2, r2, r4
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8);
90000f4e:	6b69      	ldr	r1, [r5, #52]	; 0x34
90000f50:	188b      	adds	r3, r1, r2
90000f52:	5c89      	ldrb	r1, [r1, r2]
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8) | (aviBuffer[index+2]<<16) | (aviBuffer[index+3]<<24);
90000f54:	799c      	ldrb	r4, [r3, #6]
90000f56:	f893 a005 	ldrb.w	sl, [r3, #5]
90000f5a:	0424      	lsls	r4, r4, #16
90000f5c:	f893 e004 	ldrb.w	lr, [r3, #4]
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8);
90000f60:	f893 9001 	ldrb.w	r9, [r3, #1]
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8) | (aviBuffer[index+2]<<16) | (aviBuffer[index+3]<<24);
90000f64:	ea44 240a 	orr.w	r4, r4, sl, lsl #8
90000f68:	f893 c007 	ldrb.w	ip, [r3, #7]
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8);
90000f6c:	f893 8003 	ldrb.w	r8, [r3, #3]
90000f70:	ea41 2109 	orr.w	r1, r1, r9, lsl #8
90000f74:	789a      	ldrb	r2, [r3, #2]
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8) | (aviBuffer[index+2]<<16) | (aviBuffer[index+3]<<24);
90000f76:	ea44 040e 	orr.w	r4, r4, lr
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8);
90000f7a:	ea42 2308 	orr.w	r3, r2, r8, lsl #8
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8) | (aviBuffer[index+2]<<16) | (aviBuffer[index+3]<<24);
90000f7e:	ea44 640c 	orr.w	r4, r4, ip, lsl #24
        if (streamNo == STREAM0 && chunkType == TYPEDC)
90000f82:	f246 3264 	movw	r2, #25444	; 0x6364
90000f86:	42b1      	cmp	r1, r6
90000f88:	bf08      	it	eq
90000f8a:	4293      	cmpeq	r3, r2
90000f8c:	bf0c      	ite	eq
90000f8e:	2101      	moveq	r1, #1
90000f90:	2100      	movne	r1, #0
90000f92:	d01a      	beq.n	90000fca <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x10e>
    while (currentMovieOffset + 8 + chunkSize < movieLength)
90000f94:	69ab      	ldr	r3, [r5, #24]
90000f96:	441c      	add	r4, r3
90000f98:	6aab      	ldr	r3, [r5, #40]	; 0x28
90000f9a:	f104 0208 	add.w	r2, r4, #8
90000f9e:	429a      	cmp	r2, r3
90000fa0:	d20e      	bcs.n	90000fc0 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x104>
        frameNumber++;
90000fa2:	696b      	ldr	r3, [r5, #20]
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; //pad to next word
90000fa4:	3409      	adds	r4, #9
        frameNumber++;
90000fa6:	3301      	adds	r3, #1
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; //pad to next word
90000fa8:	f024 0401 	bic.w	r4, r4, #1
90000fac:	e9c5 3405 	strd	r3, r4, [r5, #20]
    if (reader != 0)
90000fb0:	2800      	cmp	r0, #0
90000fb2:	d1b6      	bne.n	90000f22 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x66>
        const uint8_t* const d = movieData + offset;
90000fb4:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
        return d[0] | (d[1] << 8);
90000fb6:	191a      	adds	r2, r3, r4
90000fb8:	5b19      	ldrh	r1, [r3, r4]
90000fba:	8853      	ldrh	r3, [r2, #2]
        return d[0] | (d[1] << 8) | (d[2] << 16) | (d[3] << 24);
90000fbc:	6854      	ldr	r4, [r2, #4]
90000fbe:	e7e0      	b.n	90000f82 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0xc6>
    frameNumber = 1;
90000fc0:	2201      	movs	r2, #1
    currentMovieOffset = firstFrameOffset; //start over
90000fc2:	6a2b      	ldr	r3, [r5, #32]
    return false;
90000fc4:	2100      	movs	r1, #0
    currentMovieOffset = firstFrameOffset; //start over
90000fc6:	e9c5 2305 	strd	r2, r3, [r5, #20]
}
90000fca:	4608      	mov	r0, r1
90000fcc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            lastError = AVI_ERROR_EOF_REACHED;
90000fd0:	230d      	movs	r3, #13
90000fd2:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
90000fd6:	e78d      	b.n	90000ef4 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x38>
    uint32_t chunkSize = getU32(currentMovieOffset + 4);
90000fd8:	1d22      	adds	r2, r4, #4
90000fda:	4623      	mov	r3, r4
        return d[0] | (d[1] << 8) | (d[2] << 16) | (d[3] << 24);
90000fdc:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
90000fde:	588c      	ldr	r4, [r1, r2]
90000fe0:	e79b      	b.n	90000f1a <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x5e>
            lastError = AVI_ERROR_FILE_BUFFER_TO_SMALL;
90000fe2:	2009      	movs	r0, #9
            assert(!"Buffer to small");
90000fe4:	4b07      	ldr	r3, [pc, #28]	; (90001004 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x148>)
90000fe6:	4a08      	ldr	r2, [pc, #32]	; (90001008 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x14c>)
90000fe8:	21a6      	movs	r1, #166	; 0xa6
            lastError = AVI_ERROR_FILE_BUFFER_TO_SMALL;
90000fea:	f885 0040 	strb.w	r0, [r5, #64]	; 0x40
            assert(!"Buffer to small");
90000fee:	4807      	ldr	r0, [pc, #28]	; (9000100c <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x150>)
90000ff0:	f021 ff26 	bl	90022e40 <__assert_func>
        uint32_t streamNo  = getU16(currentMovieOffset);
90000ff4:	4614      	mov	r4, r2
90000ff6:	e7dd      	b.n	90000fb4 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0xf8>
    assert((frameNumber > 0) && "HardwareMJPEGDecoder decoding without frame data!");
90000ff8:	4b05      	ldr	r3, [pc, #20]	; (90001010 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x154>)
90000ffa:	21ec      	movs	r1, #236	; 0xec
90000ffc:	4a05      	ldr	r2, [pc, #20]	; (90001014 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x158>)
90000ffe:	4803      	ldr	r0, [pc, #12]	; (9000100c <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x150>)
90001000:	f021 ff1e 	bl	90022e40 <__assert_func>
90001004:	90024258 	.word	0x90024258
90001008:	9002426c 	.word	0x9002426c
9000100c:	900241fc 	.word	0x900241fc
90001010:	900242b0 	.word	0x900242b0
90001014:	900242fc 	.word	0x900242fc

90001018 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm>:
    assert((frameNumber > 0) && "HardwareMJPEGDecoder decoding without frame data!");
90001018:	6943      	ldr	r3, [r0, #20]
{
9000101a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    assert((frameNumber > 0) && "HardwareMJPEGDecoder decoding without frame data!");
9000101e:	2b00      	cmp	r3, #0
90001020:	f000 809b 	beq.w	9000115a <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x142>
    readData(currentMovieOffset, 8);
90001024:	4604      	mov	r4, r0
    if (reader != 0)
90001026:	6b00      	ldr	r0, [r0, #48]	; 0x30
90001028:	460e      	mov	r6, r1
    readData(currentMovieOffset, 8);
9000102a:	69a5      	ldr	r5, [r4, #24]
    if (reader != 0)
9000102c:	2800      	cmp	r0, #0
9000102e:	d061      	beq.n	900010f4 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xdc>
        if (length > aviBufferLength)
90001030:	6ba3      	ldr	r3, [r4, #56]	; 0x38
90001032:	2b07      	cmp	r3, #7
90001034:	f240 8097 	bls.w	90001166 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x14e>
        reader->seek(offset);
90001038:	6803      	ldr	r3, [r0, #0]
9000103a:	4629      	mov	r1, r5
9000103c:	68db      	ldr	r3, [r3, #12]
9000103e:	4798      	blx	r3
        if (!reader->readData(aviBuffer, length))
90001040:	6b20      	ldr	r0, [r4, #48]	; 0x30
90001042:	2208      	movs	r2, #8
90001044:	6b61      	ldr	r1, [r4, #52]	; 0x34
90001046:	6803      	ldr	r3, [r0, #0]
90001048:	691b      	ldr	r3, [r3, #16]
9000104a:	4798      	blx	r3
9000104c:	2800      	cmp	r0, #0
9000104e:	d04c      	beq.n	900010ea <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xd2>
    if (reader != 0)
90001050:	6b20      	ldr	r0, [r4, #48]	; 0x30
    uint32_t streamNo  = getU16(currentMovieOffset);
90001052:	69a1      	ldr	r1, [r4, #24]
        aviBufferStartOffset = offset;
90001054:	63e5      	str	r5, [r4, #60]	; 0x3c
    if (reader != 0)
90001056:	2800      	cmp	r0, #0
90001058:	d04b      	beq.n	900010f2 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xda>
    uint32_t chunkSize = getU32(currentMovieOffset + 4);
9000105a:	f101 0c04 	add.w	ip, r1, #4
    uint32_t chunkType = getU16(currentMovieOffset + 2);
9000105e:	1c8a      	adds	r2, r1, #2
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8);
90001060:	6b63      	ldr	r3, [r4, #52]	; 0x34
        const uint32_t index = offset - aviBufferStartOffset;
90001062:	ebac 0c05 	sub.w	ip, ip, r5
        const uint32_t index = offset - aviBufferStartOffset;
90001066:	1b52      	subs	r2, r2, r5
90001068:	1b4d      	subs	r5, r1, r5
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8) | (aviBuffer[index+2]<<16) | (aviBuffer[index+3]<<24);
9000106a:	eb03 0e0c 	add.w	lr, r3, ip
9000106e:	f813 700c 	ldrb.w	r7, [r3, ip]
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8);
90001072:	eb03 0805 	add.w	r8, r3, r5
90001076:	f813 c005 	ldrb.w	ip, [r3, r5]
9000107a:	f898 5001 	ldrb.w	r5, [r8, #1]
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8) | (aviBuffer[index+2]<<16) | (aviBuffer[index+3]<<24);
9000107e:	f89e 8001 	ldrb.w	r8, [lr, #1]
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8);
90001082:	ea4c 2c05 	orr.w	ip, ip, r5, lsl #8
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8) | (aviBuffer[index+2]<<16) | (aviBuffer[index+3]<<24);
90001086:	f89e 5002 	ldrb.w	r5, [lr, #2]
9000108a:	f89e e003 	ldrb.w	lr, [lr, #3]
9000108e:	042d      	lsls	r5, r5, #16
90001090:	ea45 2508 	orr.w	r5, r5, r8, lsl #8
90001094:	433d      	orrs	r5, r7
90001096:	ea45 650e 	orr.w	r5, r5, lr, lsl #24
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8);
9000109a:	eb03 0e02 	add.w	lr, r3, r2
9000109e:	5c9b      	ldrb	r3, [r3, r2]
900010a0:	f89e 2001 	ldrb.w	r2, [lr, #1]
900010a4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    if (currentMovieOffset + 8 + chunkSize < movieLength)
900010a8:	194a      	adds	r2, r1, r5
900010aa:	6aa7      	ldr	r7, [r4, #40]	; 0x28
900010ac:	f102 0e08 	add.w	lr, r2, #8
900010b0:	45be      	cmp	lr, r7
900010b2:	d213      	bcs.n	900010dc <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xc4>
        if (streamNo == STREAM0 && chunkType == TYPEDC && chunkSize > 0)
900010b4:	f243 0730 	movw	r7, #12336	; 0x3030
900010b8:	45bc      	cmp	ip, r7
900010ba:	d124      	bne.n	90001106 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xee>
900010bc:	f246 3764 	movw	r7, #25444	; 0x6364
900010c0:	42bb      	cmp	r3, r7
900010c2:	d120      	bne.n	90001106 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xee>
900010c4:	bb1d      	cbnz	r5, 9000110e <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xf6>
          currentMovieOffset += 8;
900010c6:	4672      	mov	r2, lr
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; //pad to next word
900010c8:	3201      	adds	r2, #1
        if (currentMovieOffset == lastFrameEnd)
900010ca:	6a63      	ldr	r3, [r4, #36]	; 0x24
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; //pad to next word
900010cc:	f022 0201 	bic.w	r2, r2, #1
        if (currentMovieOffset == lastFrameEnd)
900010d0:	429a      	cmp	r2, r3
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; //pad to next word
900010d2:	61a2      	str	r2, [r4, #24]
        if (currentMovieOffset == lastFrameEnd)
900010d4:	d002      	beq.n	900010dc <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xc4>
900010d6:	2001      	movs	r0, #1
}
900010d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        frameNumber = 1;
900010dc:	2201      	movs	r2, #1
        currentMovieOffset = firstFrameOffset; //start over
900010de:	6a23      	ldr	r3, [r4, #32]
900010e0:	2000      	movs	r0, #0
900010e2:	e9c4 2305 	strd	r2, r3, [r4, #20]
}
900010e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            lastError = AVI_ERROR_EOF_REACHED;
900010ea:	230d      	movs	r3, #13
900010ec:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
900010f0:	e7ae      	b.n	90001050 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x38>
    uint32_t streamNo  = getU16(currentMovieOffset);
900010f2:	460d      	mov	r5, r1
        const uint8_t* const d = movieData + offset;
900010f4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
        const uint8_t* const d = movieData + offset;
900010f6:	4629      	mov	r1, r5
900010f8:	2000      	movs	r0, #0
        return d[0] | (d[1] << 8);
900010fa:	f832 c005 	ldrh.w	ip, [r2, r5]
900010fe:	442a      	add	r2, r5
90001100:	8853      	ldrh	r3, [r2, #2]
        return d[0] | (d[1] << 8) | (d[2] << 16) | (d[3] << 24);
90001102:	6855      	ldr	r5, [r2, #4]
90001104:	e7d0      	b.n	900010a8 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x90>
        currentMovieOffset += chunkSize;
90001106:	61a2      	str	r2, [r4, #24]
        if (chunkSize == 0) // Empty frame - Skip
90001108:	2d00      	cmp	r5, #0
9000110a:	d1dd      	bne.n	900010c8 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xb0>
9000110c:	e7db      	b.n	900010c6 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xae>
            currentMovieOffset += 8;
9000110e:	f101 0708 	add.w	r7, r1, #8
90001112:	61a7      	str	r7, [r4, #24]
    if (reader != 0)
90001114:	b1f0      	cbz	r0, 90001154 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x13c>
        if (length > aviBufferLength)
90001116:	6ba3      	ldr	r3, [r4, #56]	; 0x38
90001118:	429d      	cmp	r5, r3
9000111a:	d824      	bhi.n	90001166 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x14e>
        reader->seek(offset);
9000111c:	6803      	ldr	r3, [r0, #0]
9000111e:	4639      	mov	r1, r7
90001120:	68db      	ldr	r3, [r3, #12]
90001122:	4798      	blx	r3
        if (!reader->readData(aviBuffer, length))
90001124:	6b20      	ldr	r0, [r4, #48]	; 0x30
90001126:	462a      	mov	r2, r5
90001128:	6b61      	ldr	r1, [r4, #52]	; 0x34
9000112a:	6803      	ldr	r3, [r0, #0]
9000112c:	691b      	ldr	r3, [r3, #16]
9000112e:	4798      	blx	r3
90001130:	b910      	cbnz	r0, 90001138 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x120>
            lastError = AVI_ERROR_EOF_REACHED;
90001132:	230d      	movs	r3, #13
90001134:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        return aviBuffer;
90001138:	6b61      	ldr	r1, [r4, #52]	; 0x34
        aviBufferStartOffset = offset;
9000113a:	63e7      	str	r7, [r4, #60]	; 0x3c
    if (outputBuffer) //only decode if buffers are assigned.
9000113c:	b126      	cbz	r6, 90001148 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x130>
9000113e:	4633      	mov	r3, r6
90001140:	462a      	mov	r2, r5
90001142:	4620      	mov	r0, r4
90001144:	f7ff fc42 	bl	900009cc <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0>
        currentMovieOffset += chunkSize;
90001148:	e9d4 3205 	ldrd	r3, r2, [r4, #20]
            frameNumber++;
9000114c:	3301      	adds	r3, #1
        currentMovieOffset += chunkSize;
9000114e:	442a      	add	r2, r5
            frameNumber++;
90001150:	6163      	str	r3, [r4, #20]
        if (chunkSize == 0) // Empty frame - Skip
90001152:	e7b9      	b.n	900010c8 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xb0>
    return movieData + offset;
90001154:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
90001156:	4439      	add	r1, r7
90001158:	e7f0      	b.n	9000113c <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x124>
    assert((frameNumber > 0) && "HardwareMJPEGDecoder decoding without frame data!");
9000115a:	4b07      	ldr	r3, [pc, #28]	; (90001178 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x160>)
9000115c:	21b8      	movs	r1, #184	; 0xb8
9000115e:	4a07      	ldr	r2, [pc, #28]	; (9000117c <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x164>)
90001160:	4807      	ldr	r0, [pc, #28]	; (90001180 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x168>)
90001162:	f021 fe6d 	bl	90022e40 <__assert_func>
            lastError = AVI_ERROR_FILE_BUFFER_TO_SMALL;
90001166:	2009      	movs	r0, #9
            assert(!"Buffer to small");
90001168:	4b06      	ldr	r3, [pc, #24]	; (90001184 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x16c>)
9000116a:	4a07      	ldr	r2, [pc, #28]	; (90001188 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x170>)
9000116c:	21a6      	movs	r1, #166	; 0xa6
            lastError = AVI_ERROR_FILE_BUFFER_TO_SMALL;
9000116e:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
            assert(!"Buffer to small");
90001172:	4803      	ldr	r0, [pc, #12]	; (90001180 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x168>)
90001174:	f021 fe64 	bl	90022e40 <__assert_func>
90001178:	900242b0 	.word	0x900242b0
9000117c:	90024330 	.word	0x90024330
90001180:	900241fc 	.word	0x900241fc
90001184:	90024258 	.word	0x90024258
90001188:	9002426c 	.word	0x9002426c

9000118c <_ZN20HardwareMJPEGDecoderC1Ev>:
HardwareMJPEGDecoder::HardwareMJPEGDecoder()
9000118c:	b538      	push	{r3, r4, r5, lr}
    : frameNumber(0), currentMovieOffset(0), indexOffset(0), firstFrameOffset(0), lastFrameEnd(0), movieLength(0), movieData(0),
9000118e:	2500      	movs	r5, #0
      reader(0), aviBuffer(0), aviBufferLength(0), aviBufferStartOffset(0), lastError(AVI_NO_ERROR)
90001190:	4b0f      	ldr	r3, [pc, #60]	; (900011d0 <_ZN20HardwareMJPEGDecoderC1Ev+0x44>)
HardwareMJPEGDecoder::HardwareMJPEGDecoder()
90001192:	4604      	mov	r4, r0
      reader(0), aviBuffer(0), aviBufferLength(0), aviBufferStartOffset(0), lastError(AVI_NO_ERROR)
90001194:	6003      	str	r3, [r0, #0]
90001196:	63c5      	str	r5, [r0, #60]	; 0x3c
90001198:	f880 5040 	strb.w	r5, [r0, #64]	; 0x40
    : frameNumber(0), currentMovieOffset(0), indexOffset(0), firstFrameOffset(0), lastFrameEnd(0), movieLength(0), movieData(0),
9000119c:	e9c0 5505 	strd	r5, r5, [r0, #20]
900011a0:	e9c0 5507 	strd	r5, r5, [r0, #28]
900011a4:	e9c0 5509 	strd	r5, r5, [r0, #36]	; 0x24
      reader(0), aviBuffer(0), aviBufferLength(0), aviBufferStartOffset(0), lastError(AVI_NO_ERROR)
900011a8:	e9c0 550b 	strd	r5, r5, [r0, #44]	; 0x2c
900011ac:	e9c0 550d 	strd	r5, r5, [r0, #52]	; 0x34
    videoInfo.frame_width = 0;
900011b0:	e9c0 5503 	strd	r5, r5, [r0, #12]
    videoInfo.number_of_frames = 0;
900011b4:	e9c0 5501 	strd	r5, r5, [r0, #4]
    TGFX_JPEG_InitColorTables();
900011b8:	f002 fa3e 	bl	90003638 <TGFX_JPEG_InitColorTables>
    semDecodingDone = SEM_CREATE();
900011bc:	462a      	mov	r2, r5
900011be:	4629      	mov	r1, r5
900011c0:	2001      	movs	r0, #1
900011c2:	f00c fa2f 	bl	9000d624 <osSemaphoreNew>
900011c6:	4b03      	ldr	r3, [pc, #12]	; (900011d4 <_ZN20HardwareMJPEGDecoderC1Ev+0x48>)
900011c8:	4602      	mov	r2, r0
}
900011ca:	4620      	mov	r0, r4
    semDecodingDone = SEM_CREATE();
900011cc:	601a      	str	r2, [r3, #0]
}
900011ce:	bd38      	pop	{r3, r4, r5, pc}
900011d0:	900244b0 	.word	0x900244b0
900011d4:	24005bd8 	.word	0x24005bd8

900011d8 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv>:
{
900011d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    currentMovieOffset = 0;
900011dc:	2100      	movs	r1, #0
    if (reader != 0)
900011de:	6b06      	ldr	r6, [r0, #48]	; 0x30
{
900011e0:	b083      	sub	sp, #12
900011e2:	4605      	mov	r5, r0
    currentMovieOffset = 0;
900011e4:	6181      	str	r1, [r0, #24]
    lastError = AVI_NO_ERROR;
900011e6:	f880 1040 	strb.w	r1, [r0, #64]	; 0x40
    if (reader != 0)
900011ea:	2e00      	cmp	r6, #0
900011ec:	f000 81aa 	beq.w	90001544 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x36c>
        if (length > aviBufferLength)
900011f0:	6b83      	ldr	r3, [r0, #56]	; 0x38
900011f2:	2b47      	cmp	r3, #71	; 0x47
900011f4:	f240 8202 	bls.w	900015fc <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x424>
        reader->seek(offset);
900011f8:	6833      	ldr	r3, [r6, #0]
900011fa:	4630      	mov	r0, r6
900011fc:	68db      	ldr	r3, [r3, #12]
900011fe:	4798      	blx	r3
        if (!reader->readData(aviBuffer, length))
90001200:	6b28      	ldr	r0, [r5, #48]	; 0x30
90001202:	2248      	movs	r2, #72	; 0x48
90001204:	6b69      	ldr	r1, [r5, #52]	; 0x34
90001206:	6803      	ldr	r3, [r0, #0]
90001208:	691b      	ldr	r3, [r3, #16]
9000120a:	4798      	blx	r3
9000120c:	2800      	cmp	r0, #0
9000120e:	f000 80ce 	beq.w	900013ae <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1d6>
        aviBufferStartOffset = offset;
90001212:	2300      	movs	r3, #0
    if (reader != 0)
90001214:	6b2e      	ldr	r6, [r5, #48]	; 0x30
    if (compare(currentMovieOffset, "RIFF", 4))
90001216:	69af      	ldr	r7, [r5, #24]
    if (reader != 0)
90001218:	46b1      	mov	r9, r6
        aviBufferStartOffset = offset;
9000121a:	63eb      	str	r3, [r5, #60]	; 0x3c
    if (reader != 0)
9000121c:	2e00      	cmp	r6, #0
9000121e:	f000 8192 	beq.w	90001546 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x36e>
        src = reinterpret_cast<const char*>(aviBuffer + (offset - aviBufferStartOffset));
90001222:	f8d5 8034 	ldr.w	r8, [r5, #52]	; 0x34
    return strncmp(src, str, num);
90001226:	2204      	movs	r2, #4
90001228:	49be      	ldr	r1, [pc, #760]	; (90001524 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x34c>)
        src = reinterpret_cast<const char*>(aviBuffer + (offset - aviBufferStartOffset));
9000122a:	eb08 0b07 	add.w	fp, r8, r7
    return strncmp(src, str, num);
9000122e:	4658      	mov	r0, fp
90001230:	f022 f8a8 	bl	90023384 <strncmp>
    if (compare(currentMovieOffset, "RIFF", 4))
90001234:	2800      	cmp	r0, #0
90001236:	f040 81ea 	bne.w	9000160e <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x436>
    currentMovieOffset += 8;
9000123a:	f107 0008 	add.w	r0, r7, #8
    return strncmp(src, str, num);
9000123e:	2204      	movs	r2, #4
90001240:	49b9      	ldr	r1, [pc, #740]	; (90001528 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x350>)
    currentMovieOffset += 8;
90001242:	61a8      	str	r0, [r5, #24]
    return strncmp(src, str, num);
90001244:	4440      	add	r0, r8
90001246:	f022 f89d 	bl	90023384 <strncmp>
    if (compare(currentMovieOffset, "AVI ", 4))
9000124a:	2800      	cmp	r0, #0
9000124c:	f040 81fa 	bne.w	90001644 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x46c>
    currentMovieOffset += 4;
90001250:	f107 0a0c 	add.w	sl, r7, #12
    return strncmp(src, str, num);
90001254:	2204      	movs	r2, #4
90001256:	49b5      	ldr	r1, [pc, #724]	; (9000152c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x354>)
90001258:	eb08 000a 	add.w	r0, r8, sl
    currentMovieOffset += 4;
9000125c:	f8c5 a018 	str.w	sl, [r5, #24]
    return strncmp(src, str, num);
90001260:	f022 f890 	bl	90023384 <strncmp>
    if (compare(currentMovieOffset, "LIST", 4))
90001264:	9001      	str	r0, [sp, #4]
90001266:	2800      	cmp	r0, #0
90001268:	f040 81e2 	bne.w	90001630 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x458>
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8) | (aviBuffer[index+2]<<16) | (aviBuffer[index+3]<<24);
9000126c:	f89b 4012 	ldrb.w	r4, [fp, #18]
90001270:	f89b 2011 	ldrb.w	r2, [fp, #17]
90001274:	0424      	lsls	r4, r4, #16
90001276:	f89b 3013 	ldrb.w	r3, [fp, #19]
9000127a:	ea44 2402 	orr.w	r4, r4, r2, lsl #8
9000127e:	f89b 2010 	ldrb.w	r2, [fp, #16]
90001282:	4314      	orrs	r4, r2
    assert(aviListSize);
90001284:	ea54 6403 	orrs.w	r4, r4, r3, lsl #24
90001288:	f000 81cb 	beq.w	90001622 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x44a>
    uint32_t offset =  currentMovieOffset + 8;
9000128c:	f107 0014 	add.w	r0, r7, #20
    return strncmp(src, str, num);
90001290:	2204      	movs	r2, #4
90001292:	49a7      	ldr	r1, [pc, #668]	; (90001530 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x358>)
90001294:	4440      	add	r0, r8
90001296:	f022 f875 	bl	90023384 <strncmp>
    if (compare(offset, "hdrl", 4))
9000129a:	2800      	cmp	r0, #0
9000129c:	f000 808b 	beq.w	900013b6 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1de>
        lastError = AVI_ERROR_AVI_HDRL_NOT_FOUND;
900012a0:	2306      	movs	r3, #6
        foundFrame = false;
900012a2:	f8dd b004 	ldr.w	fp, [sp, #4]
    offset += 4;
900012a6:	f107 0018 	add.w	r0, r7, #24
        lastError = AVI_ERROR_AVI_HDRL_NOT_FOUND;
900012aa:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
        src = reinterpret_cast<const char*>(aviBuffer + (offset - aviBufferStartOffset));
900012ae:	4440      	add	r0, r8
    return strncmp(src, str, num);
900012b0:	2204      	movs	r2, #4
900012b2:	49a0      	ldr	r1, [pc, #640]	; (90001534 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x35c>)
900012b4:	f022 f866 	bl	90023384 <strncmp>
    if (compare(offset, "avih", 4))
900012b8:	2800      	cmp	r0, #0
900012ba:	f000 8085 	beq.w	900013c8 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1f0>
        lastError = AVI_ERROR_AVI_AVIH_NOT_FOUND;
900012be:	2307      	movs	r3, #7
900012c0:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
    uint32_t listOffset = aviListOffset + aviListSize + 8;
900012c4:	4454      	add	r4, sl
900012c6:	3408      	adds	r4, #8
    if (reader != 0)
900012c8:	f1b9 0f00 	cmp.w	r9, #0
900012cc:	d015      	beq.n	900012fa <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x122>
        if (length > aviBufferLength)
900012ce:	6bab      	ldr	r3, [r5, #56]	; 0x38
900012d0:	2b0b      	cmp	r3, #11
900012d2:	f240 8193 	bls.w	900015fc <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x424>
        reader->seek(offset);
900012d6:	f8d9 3000 	ldr.w	r3, [r9]
900012da:	4621      	mov	r1, r4
900012dc:	4648      	mov	r0, r9
900012de:	68db      	ldr	r3, [r3, #12]
900012e0:	4798      	blx	r3
        if (!reader->readData(aviBuffer, length))
900012e2:	6b28      	ldr	r0, [r5, #48]	; 0x30
900012e4:	220c      	movs	r2, #12
900012e6:	6b69      	ldr	r1, [r5, #52]	; 0x34
900012e8:	6803      	ldr	r3, [r0, #0]
900012ea:	691b      	ldr	r3, [r3, #16]
900012ec:	4798      	blx	r3
900012ee:	b910      	cbnz	r0, 900012f6 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x11e>
            lastError = AVI_ERROR_EOF_REACHED;
900012f0:	230d      	movs	r3, #13
900012f2:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
        aviBufferStartOffset = offset;
900012f6:	6b2e      	ldr	r6, [r5, #48]	; 0x30
900012f8:	63ec      	str	r4, [r5, #60]	; 0x3c
        return aviBuffer;
900012fa:	f895 9040 	ldrb.w	r9, [r5, #64]	; 0x40
    return strncmp(src, str, num);
900012fe:	4f8e      	ldr	r7, [pc, #568]	; (90001538 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x360>)
    while (compare(listOffset + 8, "movi", 4) && (lastError == AVI_NO_ERROR) && listOffset < movieLength)
90001300:	f104 0808 	add.w	r8, r4, #8
    if (reader != 0)
90001304:	2e00      	cmp	r6, #0
90001306:	d041      	beq.n	9000138c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1b4>
        src = reinterpret_cast<const char*>(aviBuffer + (offset - aviBufferStartOffset));
90001308:	6beb      	ldr	r3, [r5, #60]	; 0x3c
    return strncmp(src, str, num);
9000130a:	2204      	movs	r2, #4
        src = reinterpret_cast<const char*>(aviBuffer + (offset - aviBufferStartOffset));
9000130c:	6b68      	ldr	r0, [r5, #52]	; 0x34
    return strncmp(src, str, num);
9000130e:	4639      	mov	r1, r7
        src = reinterpret_cast<const char*>(aviBuffer + (offset - aviBufferStartOffset));
90001310:	eba8 0303 	sub.w	r3, r8, r3
90001314:	4418      	add	r0, r3
    return strncmp(src, str, num);
90001316:	f022 f835 	bl	90023384 <strncmp>
    while (compare(listOffset + 8, "movi", 4) && (lastError == AVI_NO_ERROR) && listOffset < movieLength)
9000131a:	2800      	cmp	r0, #0
9000131c:	d03e      	beq.n	9000139c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1c4>
9000131e:	f1b9 0f00 	cmp.w	r9, #0
90001322:	d13e      	bne.n	900013a2 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1ca>
90001324:	6aab      	ldr	r3, [r5, #40]	; 0x28
90001326:	42a3      	cmp	r3, r4
90001328:	f240 80a7 	bls.w	9000147a <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2a2>
        const uint32_t listSize = getU32(listOffset + 4) + 8;
9000132c:	3404      	adds	r4, #4
    if (reader != 0)
9000132e:	2e00      	cmp	r6, #0
90001330:	d046      	beq.n	900013c0 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1e8>
        const uint32_t index = offset - aviBufferStartOffset;
90001332:	6bea      	ldr	r2, [r5, #60]	; 0x3c
        if (length > aviBufferLength)
90001334:	e9d5 130d 	ldrd	r1, r3, [r5, #52]	; 0x34
        const uint32_t index = offset - aviBufferStartOffset;
90001338:	1aa4      	subs	r4, r4, r2
        if (length > aviBufferLength)
9000133a:	2b0b      	cmp	r3, #11
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8) | (aviBuffer[index+2]<<16) | (aviBuffer[index+3]<<24);
9000133c:	eb01 0204 	add.w	r2, r1, r4
90001340:	5d09      	ldrb	r1, [r1, r4]
90001342:	7894      	ldrb	r4, [r2, #2]
90001344:	7850      	ldrb	r0, [r2, #1]
90001346:	ea4f 4404 	mov.w	r4, r4, lsl #16
9000134a:	78d2      	ldrb	r2, [r2, #3]
9000134c:	ea44 2400 	orr.w	r4, r4, r0, lsl #8
90001350:	ea44 0401 	orr.w	r4, r4, r1
90001354:	ea44 6402 	orr.w	r4, r4, r2, lsl #24
        listOffset += listSize;
90001358:	4444      	add	r4, r8
        if (length > aviBufferLength)
9000135a:	f240 814f 	bls.w	900015fc <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x424>
        reader->seek(offset);
9000135e:	6833      	ldr	r3, [r6, #0]
90001360:	4621      	mov	r1, r4
90001362:	4630      	mov	r0, r6
90001364:	68db      	ldr	r3, [r3, #12]
90001366:	4798      	blx	r3
        if (!reader->readData(aviBuffer, length))
90001368:	6b28      	ldr	r0, [r5, #48]	; 0x30
9000136a:	220c      	movs	r2, #12
9000136c:	6b69      	ldr	r1, [r5, #52]	; 0x34
9000136e:	6803      	ldr	r3, [r0, #0]
90001370:	691b      	ldr	r3, [r3, #16]
90001372:	4798      	blx	r3
90001374:	b910      	cbnz	r0, 9000137c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1a4>
            lastError = AVI_ERROR_EOF_REACHED;
90001376:	230d      	movs	r3, #13
90001378:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
        aviBufferStartOffset = offset;
9000137c:	6b2e      	ldr	r6, [r5, #48]	; 0x30
    while (compare(listOffset + 8, "movi", 4) && (lastError == AVI_NO_ERROR) && listOffset < movieLength)
9000137e:	f104 0808 	add.w	r8, r4, #8
90001382:	f895 9040 	ldrb.w	r9, [r5, #64]	; 0x40
        aviBufferStartOffset = offset;
90001386:	63ec      	str	r4, [r5, #60]	; 0x3c
    if (reader != 0)
90001388:	2e00      	cmp	r6, #0
9000138a:	d1bd      	bne.n	90001308 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x130>
        src = (const char*)movieData + offset;
9000138c:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
    return strncmp(src, str, num);
9000138e:	2204      	movs	r2, #4
90001390:	4639      	mov	r1, r7
        src = (const char*)movieData + offset;
90001392:	4440      	add	r0, r8
    return strncmp(src, str, num);
90001394:	f021 fff6 	bl	90023384 <strncmp>
    while (compare(listOffset + 8, "movi", 4) && (lastError == AVI_NO_ERROR) && listOffset < movieLength)
90001398:	2800      	cmp	r0, #0
9000139a:	d1c0      	bne.n	9000131e <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x146>
    if (lastError != AVI_NO_ERROR)
9000139c:	f1b9 0f00 	cmp.w	r9, #0
900013a0:	d06b      	beq.n	9000147a <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2a2>
        lastError = AVI_ERROR_MOVI_NOT_FOUND;
900013a2:	230a      	movs	r3, #10
900013a4:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
}
900013a8:	b003      	add	sp, #12
900013aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            lastError = AVI_ERROR_EOF_REACHED;
900013ae:	230d      	movs	r3, #13
900013b0:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
900013b4:	e72d      	b.n	90001212 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x3a>
    offset += 4;
900013b6:	f107 0018 	add.w	r0, r7, #24
    bool foundFrame = true;
900013ba:	f04f 0b01 	mov.w	fp, #1
900013be:	e776      	b.n	900012ae <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0xd6>
        listOffset += listSize;
900013c0:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
900013c2:	591c      	ldr	r4, [r3, r4]
900013c4:	4444      	add	r4, r8
    return movieData + offset;
900013c6:	e79b      	b.n	90001300 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x128>
    if (foundFrame)
900013c8:	f1bb 0f00 	cmp.w	fp, #0
900013cc:	f43f af7a 	beq.w	900012c4 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0xec>
        offset += 8; //skip fourcc and cb in AVIMAINHEADER
900013d0:	f107 0120 	add.w	r1, r7, #32
    if (reader != 0)
900013d4:	f1b9 0f00 	cmp.w	r9, #0
900013d8:	f000 80f4 	beq.w	900015c4 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x3ec>
        const uint32_t index = offset - aviBufferStartOffset;
900013dc:	6beb      	ldr	r3, [r5, #60]	; 0x3c
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8) | (aviBuffer[index+2]<<16) | (aviBuffer[index+3]<<24);
900013de:	6b6a      	ldr	r2, [r5, #52]	; 0x34
        const uint32_t index = offset - aviBufferStartOffset;
900013e0:	1ac9      	subs	r1, r1, r3
900013e2:	f1c3 0030 	rsb	r0, r3, #48	; 0x30
        videoInfo.ms_between_frames = getU32(offset)/1000;
900013e6:	f8df c158 	ldr.w	ip, [pc, #344]	; 90001540 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x368>
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8) | (aviBuffer[index+2]<<16) | (aviBuffer[index+3]<<24);
900013ea:	f812 8001 	ldrb.w	r8, [r2, r1]
900013ee:	eb02 0e01 	add.w	lr, r2, r1
        const uint32_t index = offset - aviBufferStartOffset;
900013f2:	f1c3 0140 	rsb	r1, r3, #64	; 0x40
900013f6:	f1c3 0344 	rsb	r3, r3, #68	; 0x44
900013fa:	4438      	add	r0, r7
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8) | (aviBuffer[index+2]<<16) | (aviBuffer[index+3]<<24);
900013fc:	f89e b001 	ldrb.w	fp, [lr, #1]
        const uint32_t index = offset - aviBufferStartOffset;
90001400:	4439      	add	r1, r7
90001402:	441f      	add	r7, r3
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8) | (aviBuffer[index+2]<<16) | (aviBuffer[index+3]<<24);
90001404:	f89e 3002 	ldrb.w	r3, [lr, #2]
90001408:	f89e e003 	ldrb.w	lr, [lr, #3]
9000140c:	041b      	lsls	r3, r3, #16
9000140e:	ea43 230b 	orr.w	r3, r3, fp, lsl #8
90001412:	ea43 0308 	orr.w	r3, r3, r8
90001416:	ea43 630e 	orr.w	r3, r3, lr, lsl #24
        videoInfo.ms_between_frames = getU32(offset)/1000;
9000141a:	fbac c303 	umull	ip, r3, ip, r3
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8) | (aviBuffer[index+2]<<16) | (aviBuffer[index+3]<<24);
9000141e:	eb02 0c00 	add.w	ip, r2, r0
        videoInfo.ms_between_frames = getU32(offset)/1000;
90001422:	099b      	lsrs	r3, r3, #6
90001424:	606b      	str	r3, [r5, #4]
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8) | (aviBuffer[index+2]<<16) | (aviBuffer[index+3]<<24);
90001426:	f89c 3002 	ldrb.w	r3, [ip, #2]
9000142a:	f89c 8001 	ldrb.w	r8, [ip, #1]
9000142e:	041b      	lsls	r3, r3, #16
90001430:	f812 e000 	ldrb.w	lr, [r2, r0]
90001434:	f89c c003 	ldrb.w	ip, [ip, #3]
90001438:	1850      	adds	r0, r2, r1
9000143a:	ea43 2308 	orr.w	r3, r3, r8, lsl #8
9000143e:	ea43 030e 	orr.w	r3, r3, lr
90001442:	ea43 630c 	orr.w	r3, r3, ip, lsl #24
        videoInfo.number_of_frames = getU32(offset + 16);
90001446:	60ab      	str	r3, [r5, #8]
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8) | (aviBuffer[index+2]<<16) | (aviBuffer[index+3]<<24);
90001448:	7883      	ldrb	r3, [r0, #2]
9000144a:	f890 c001 	ldrb.w	ip, [r0, #1]
9000144e:	041b      	lsls	r3, r3, #16
90001450:	5c51      	ldrb	r1, [r2, r1]
90001452:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
90001456:	430b      	orrs	r3, r1
90001458:	78c1      	ldrb	r1, [r0, #3]
9000145a:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
9000145e:	19d1      	adds	r1, r2, r7
        videoInfo.frame_width = getU32(offset + 32);
90001460:	60eb      	str	r3, [r5, #12]
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8) | (aviBuffer[index+2]<<16) | (aviBuffer[index+3]<<24);
90001462:	788b      	ldrb	r3, [r1, #2]
90001464:	7848      	ldrb	r0, [r1, #1]
90001466:	041b      	lsls	r3, r3, #16
90001468:	5dd2      	ldrb	r2, [r2, r7]
9000146a:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
9000146e:	4313      	orrs	r3, r2
90001470:	78ca      	ldrb	r2, [r1, #3]
90001472:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
        videoInfo.frame_height = getU32(offset + 36);
90001476:	612b      	str	r3, [r5, #16]
90001478:	e724      	b.n	900012c4 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0xec>
    currentMovieOffset = listOffset + 8 + 4; //skip LIST and 'movi'
9000147a:	f104 030c 	add.w	r3, r4, #12
    lastFrameEnd = listOffset + 8 + getU32(listOffset + 4);
9000147e:	3404      	adds	r4, #4
    currentMovieOffset = listOffset + 8 + 4; //skip LIST and 'movi'
90001480:	61ab      	str	r3, [r5, #24]
    if (reader != 0)
90001482:	2e00      	cmp	r6, #0
90001484:	f000 80b2 	beq.w	900015ec <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x414>
        const uint32_t index = offset - aviBufferStartOffset;
90001488:	6beb      	ldr	r3, [r5, #60]	; 0x3c
9000148a:	1ae4      	subs	r4, r4, r3
        if (length > aviBufferLength)
9000148c:	e9d5 120d 	ldrd	r1, r2, [r5, #52]	; 0x34
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8) | (aviBuffer[index+2]<<16) | (aviBuffer[index+3]<<24);
90001490:	f104 0c02 	add.w	ip, r4, #2
90001494:	1c67      	adds	r7, r4, #1
90001496:	f811 e004 	ldrb.w	lr, [r1, r4]
9000149a:	1ce0      	adds	r0, r4, #3
9000149c:	f811 300c 	ldrb.w	r3, [r1, ip]
        if (length > aviBufferLength)
900014a0:	2a03      	cmp	r2, #3
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8) | (aviBuffer[index+2]<<16) | (aviBuffer[index+3]<<24);
900014a2:	f811 9007 	ldrb.w	r9, [r1, r7]
900014a6:	ea4f 4303 	mov.w	r3, r3, lsl #16
900014aa:	ea43 2309 	orr.w	r3, r3, r9, lsl #8
900014ae:	ea43 030e 	orr.w	r3, r3, lr
900014b2:	f811 e000 	ldrb.w	lr, [r1, r0]
900014b6:	ea43 630e 	orr.w	r3, r3, lr, lsl #24
    lastFrameEnd = listOffset + 8 + getU32(listOffset + 4);
900014ba:	4443      	add	r3, r8
900014bc:	626b      	str	r3, [r5, #36]	; 0x24
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8) | (aviBuffer[index+2]<<16) | (aviBuffer[index+3]<<24);
900014be:	f811 300c 	ldrb.w	r3, [r1, ip]
900014c2:	f811 c007 	ldrb.w	ip, [r1, r7]
900014c6:	5d0f      	ldrb	r7, [r1, r4]
900014c8:	ea4f 4403 	mov.w	r4, r3, lsl #16
900014cc:	5c09      	ldrb	r1, [r1, r0]
900014ce:	ea44 240c 	orr.w	r4, r4, ip, lsl #8
900014d2:	ea44 0407 	orr.w	r4, r4, r7
900014d6:	ea44 6401 	orr.w	r4, r4, r1, lsl #24
    listOffset += listSize;
900014da:	4444      	add	r4, r8
        if (length > aviBufferLength)
900014dc:	f240 808e 	bls.w	900015fc <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x424>
        reader->seek(offset);
900014e0:	6833      	ldr	r3, [r6, #0]
900014e2:	4621      	mov	r1, r4
900014e4:	4630      	mov	r0, r6
900014e6:	68db      	ldr	r3, [r3, #12]
900014e8:	4798      	blx	r3
        if (!reader->readData(aviBuffer, length))
900014ea:	6b28      	ldr	r0, [r5, #48]	; 0x30
900014ec:	2204      	movs	r2, #4
900014ee:	6b69      	ldr	r1, [r5, #52]	; 0x34
900014f0:	6803      	ldr	r3, [r0, #0]
900014f2:	691b      	ldr	r3, [r3, #16]
900014f4:	4798      	blx	r3
900014f6:	2800      	cmp	r0, #0
900014f8:	d05a      	beq.n	900015b0 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x3d8>
    if (reader != 0)
900014fa:	6b2b      	ldr	r3, [r5, #48]	; 0x30
        aviBufferStartOffset = offset;
900014fc:	63ec      	str	r4, [r5, #60]	; 0x3c
    if (reader != 0)
900014fe:	2b00      	cmp	r3, #0
90001500:	f000 80aa 	beq.w	90001658 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x480>
        src = reinterpret_cast<const char*>(aviBuffer + (offset - aviBufferStartOffset));
90001504:	6b68      	ldr	r0, [r5, #52]	; 0x34
    return strncmp(src, str, num);
90001506:	2204      	movs	r2, #4
90001508:	490c      	ldr	r1, [pc, #48]	; (9000153c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x364>)
9000150a:	f021 ff3b 	bl	90023384 <strncmp>
    if (!compare(listOffset, "idx1", 4))
9000150e:	2800      	cmp	r0, #0
90001510:	d166      	bne.n	900015e0 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x408>
    frameNumber = 1; //next frame number is 1
90001512:	2201      	movs	r2, #1
    firstFrameOffset = currentMovieOffset;
90001514:	69ab      	ldr	r3, [r5, #24]
        indexOffset = listOffset;
90001516:	61ec      	str	r4, [r5, #28]
    frameNumber = 1; //next frame number is 1
90001518:	616a      	str	r2, [r5, #20]
    firstFrameOffset = currentMovieOffset;
9000151a:	622b      	str	r3, [r5, #32]
}
9000151c:	b003      	add	sp, #12
9000151e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90001522:	bf00      	nop
90001524:	9002438c 	.word	0x9002438c
90001528:	90024444 	.word	0x90024444
9000152c:	9002443c 	.word	0x9002443c
90001530:	90024434 	.word	0x90024434
90001534:	9002441c 	.word	0x9002441c
90001538:	90024424 	.word	0x90024424
9000153c:	9002442c 	.word	0x9002442c
90001540:	10624dd3 	.word	0x10624dd3
    if (compare(currentMovieOffset, "RIFF", 4))
90001544:	4637      	mov	r7, r6
        src = (const char*)movieData + offset;
90001546:	f8d5 802c 	ldr.w	r8, [r5, #44]	; 0x2c
    return strncmp(src, str, num);
9000154a:	2204      	movs	r2, #4
9000154c:	4944      	ldr	r1, [pc, #272]	; (90001660 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x488>)
        src = (const char*)movieData + offset;
9000154e:	eb08 0407 	add.w	r4, r8, r7
    return strncmp(src, str, num);
90001552:	4620      	mov	r0, r4
90001554:	f021 ff16 	bl	90023384 <strncmp>
    if (compare(currentMovieOffset, "RIFF", 4))
90001558:	2800      	cmp	r0, #0
9000155a:	d158      	bne.n	9000160e <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x436>
    currentMovieOffset += 8;
9000155c:	f107 0008 	add.w	r0, r7, #8
    return strncmp(src, str, num);
90001560:	2204      	movs	r2, #4
90001562:	4940      	ldr	r1, [pc, #256]	; (90001664 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x48c>)
    currentMovieOffset += 8;
90001564:	61a8      	str	r0, [r5, #24]
    return strncmp(src, str, num);
90001566:	4440      	add	r0, r8
90001568:	f021 ff0c 	bl	90023384 <strncmp>
    if (compare(currentMovieOffset, "AVI ", 4))
9000156c:	2800      	cmp	r0, #0
9000156e:	d169      	bne.n	90001644 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x46c>
    currentMovieOffset += 4;
90001570:	f107 0a0c 	add.w	sl, r7, #12
    return strncmp(src, str, num);
90001574:	2204      	movs	r2, #4
90001576:	493c      	ldr	r1, [pc, #240]	; (90001668 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x490>)
90001578:	eb08 000a 	add.w	r0, r8, sl
    currentMovieOffset += 4;
9000157c:	f8c5 a018 	str.w	sl, [r5, #24]
    return strncmp(src, str, num);
90001580:	f021 ff00 	bl	90023384 <strncmp>
    if (compare(currentMovieOffset, "LIST", 4))
90001584:	4683      	mov	fp, r0
90001586:	2800      	cmp	r0, #0
90001588:	d152      	bne.n	90001630 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x458>
        return d[0] | (d[1] << 8) | (d[2] << 16) | (d[3] << 24);
9000158a:	6924      	ldr	r4, [r4, #16]
    assert(aviListSize);
9000158c:	2c00      	cmp	r4, #0
9000158e:	d048      	beq.n	90001622 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x44a>
    uint32_t offset =  currentMovieOffset + 8;
90001590:	f107 0014 	add.w	r0, r7, #20
    return strncmp(src, str, num);
90001594:	2204      	movs	r2, #4
90001596:	4935      	ldr	r1, [pc, #212]	; (9000166c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x494>)
90001598:	4440      	add	r0, r8
9000159a:	f021 fef3 	bl	90023384 <strncmp>
    if (compare(offset, "hdrl", 4))
9000159e:	b958      	cbnz	r0, 900015b8 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x3e0>
    offset += 4;
900015a0:	f107 0018 	add.w	r0, r7, #24
    bool foundFrame = true;
900015a4:	f04f 0b01 	mov.w	fp, #1
        src = (const char*)movieData + offset;
900015a8:	4440      	add	r0, r8
900015aa:	f04f 0900 	mov.w	r9, #0
900015ae:	e67f      	b.n	900012b0 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0xd8>
            lastError = AVI_ERROR_EOF_REACHED;
900015b0:	230d      	movs	r3, #13
900015b2:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
900015b6:	e7a0      	b.n	900014fa <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x322>
        lastError = AVI_ERROR_AVI_HDRL_NOT_FOUND;
900015b8:	2306      	movs	r3, #6
    offset += 4;
900015ba:	f107 0018 	add.w	r0, r7, #24
        lastError = AVI_ERROR_AVI_HDRL_NOT_FOUND;
900015be:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
    if (reader != 0)
900015c2:	e7f1      	b.n	900015a8 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x3d0>
900015c4:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
        videoInfo.ms_between_frames = getU32(offset)/1000;
900015c6:	585a      	ldr	r2, [r3, r1]
900015c8:	443b      	add	r3, r7
900015ca:	4929      	ldr	r1, [pc, #164]	; (90001670 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x498>)
900015cc:	fba1 1202 	umull	r1, r2, r1, r2
900015d0:	0992      	lsrs	r2, r2, #6
900015d2:	606a      	str	r2, [r5, #4]
        return d[0] | (d[1] << 8) | (d[2] << 16) | (d[3] << 24);
900015d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
        videoInfo.number_of_frames = getU32(offset + 16);
900015d6:	60aa      	str	r2, [r5, #8]
        return d[0] | (d[1] << 8) | (d[2] << 16) | (d[3] << 24);
900015d8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
        videoInfo.frame_width = getU32(offset + 32);
900015da:	60ea      	str	r2, [r5, #12]
        return d[0] | (d[1] << 8) | (d[2] << 16) | (d[3] << 24);
900015dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
900015de:	e74a      	b.n	90001476 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x29e>
        lastError = AVI_ERROR_IDX1_NOT_FOUND;
900015e0:	230b      	movs	r3, #11
900015e2:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
}
900015e6:	b003      	add	sp, #12
900015e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
900015ec:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
    lastFrameEnd = listOffset + 8 + getU32(listOffset + 4);
900015ee:	5903      	ldr	r3, [r0, r4]
900015f0:	4443      	add	r3, r8
900015f2:	626b      	str	r3, [r5, #36]	; 0x24
    listOffset += listSize;
900015f4:	5904      	ldr	r4, [r0, r4]
900015f6:	4444      	add	r4, r8
        src = (const char*)movieData + offset;
900015f8:	4420      	add	r0, r4
900015fa:	e784      	b.n	90001506 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x32e>
            lastError = AVI_ERROR_FILE_BUFFER_TO_SMALL;
900015fc:	2009      	movs	r0, #9
            assert(!"Buffer to small");
900015fe:	4b1d      	ldr	r3, [pc, #116]	; (90001674 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x49c>)
90001600:	4a1d      	ldr	r2, [pc, #116]	; (90001678 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x4a0>)
90001602:	21a6      	movs	r1, #166	; 0xa6
            lastError = AVI_ERROR_FILE_BUFFER_TO_SMALL;
90001604:	f885 0040 	strb.w	r0, [r5, #64]	; 0x40
            assert(!"Buffer to small");
90001608:	481c      	ldr	r0, [pc, #112]	; (9000167c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x4a4>)
9000160a:	f021 fc19 	bl	90022e40 <__assert_func>
        lastError = AVI_ERROR_NOT_RIFF;
9000160e:	2003      	movs	r0, #3
        assert(!"RIFF header not found");
90001610:	4b1b      	ldr	r3, [pc, #108]	; (90001680 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x4a8>)
90001612:	4a1c      	ldr	r2, [pc, #112]	; (90001684 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x4ac>)
90001614:	f44f 719a 	mov.w	r1, #308	; 0x134
        lastError = AVI_ERROR_NOT_RIFF;
90001618:	f885 0040 	strb.w	r0, [r5, #64]	; 0x40
        assert(!"RIFF header not found");
9000161c:	4817      	ldr	r0, [pc, #92]	; (9000167c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x4a4>)
9000161e:	f021 fc0f 	bl	90022e40 <__assert_func>
    assert(aviListSize);
90001622:	4b19      	ldr	r3, [pc, #100]	; (90001688 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x4b0>)
90001624:	f240 1149 	movw	r1, #329	; 0x149
90001628:	4a16      	ldr	r2, [pc, #88]	; (90001684 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x4ac>)
9000162a:	4814      	ldr	r0, [pc, #80]	; (9000167c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x4a4>)
9000162c:	f021 fc08 	bl	90022e40 <__assert_func>
        lastError = AVI_ERROR_AVI_LIST_NOT_FOUND;
90001630:	2005      	movs	r0, #5
        assert(!"AVI LIST not found");
90001632:	4b16      	ldr	r3, [pc, #88]	; (9000168c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x4b4>)
90001634:	4a13      	ldr	r2, [pc, #76]	; (90001684 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x4ac>)
90001636:	f240 1143 	movw	r1, #323	; 0x143
        lastError = AVI_ERROR_AVI_LIST_NOT_FOUND;
9000163a:	f885 0040 	strb.w	r0, [r5, #64]	; 0x40
        assert(!"AVI LIST not found");
9000163e:	480f      	ldr	r0, [pc, #60]	; (9000167c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x4a4>)
90001640:	f021 fbfe 	bl	90022e40 <__assert_func>
        lastError = AVI_ERROR_AVI_HEADER_NOT_FOUND;
90001644:	2004      	movs	r0, #4
        assert(!"AVI header not found");
90001646:	4b12      	ldr	r3, [pc, #72]	; (90001690 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x4b8>)
90001648:	4a0e      	ldr	r2, [pc, #56]	; (90001684 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x4ac>)
9000164a:	f44f 719e 	mov.w	r1, #316	; 0x13c
        lastError = AVI_ERROR_AVI_HEADER_NOT_FOUND;
9000164e:	f885 0040 	strb.w	r0, [r5, #64]	; 0x40
        assert(!"AVI header not found");
90001652:	480a      	ldr	r0, [pc, #40]	; (9000167c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x4a4>)
90001654:	f021 fbf4 	bl	90022e40 <__assert_func>
        src = (const char*)movieData + offset;
90001658:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
9000165a:	4420      	add	r0, r4
9000165c:	e753      	b.n	90001506 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x32e>
9000165e:	bf00      	nop
90001660:	9002438c 	.word	0x9002438c
90001664:	90024444 	.word	0x90024444
90001668:	9002443c 	.word	0x9002443c
9000166c:	90024434 	.word	0x90024434
90001670:	10624dd3 	.word	0x10624dd3
90001674:	90024258 	.word	0x90024258
90001678:	9002426c 	.word	0x9002426c
9000167c:	900241fc 	.word	0x900241fc
90001680:	90024394 	.word	0x90024394
90001684:	900243b0 	.word	0x900243b0
90001688:	90024410 	.word	0x90024410
9000168c:	900243f8 	.word	0x900243f8
90001690:	900243e0 	.word	0x900243e0

90001694 <_ZN20HardwareMJPEGDecoder12setVideoDataEPKhm>:
{
90001694:	b410      	push	{r4}
    reader = 0; //not using reader
90001696:	2400      	movs	r4, #0
    movieLength = length;
90001698:	e9c0 210a 	strd	r2, r1, [r0, #40]	; 0x28
    reader = 0; //not using reader
9000169c:	6304      	str	r4, [r0, #48]	; 0x30
}
9000169e:	f85d 4b04 	ldr.w	r4, [sp], #4
    readVideoHeader();
900016a2:	f7ff bd99 	b.w	900011d8 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv>
900016a6:	bf00      	nop

900016a8 <_ZN20HardwareMJPEGDecoder12setVideoDataERN8touchgfx15VideoDataReaderE>:
{
900016a8:	b510      	push	{r4, lr}
    movieLength = reader.getDataLength();
900016aa:	680b      	ldr	r3, [r1, #0]
{
900016ac:	4604      	mov	r4, r0
    movieData = 0;
900016ae:	2200      	movs	r2, #0
    movieLength = reader.getDataLength();
900016b0:	4608      	mov	r0, r1
900016b2:	689b      	ldr	r3, [r3, #8]
    movieData = 0;
900016b4:	e9c4 210b 	strd	r2, r1, [r4, #44]	; 0x2c
    movieLength = reader.getDataLength();
900016b8:	4798      	blx	r3
900016ba:	4603      	mov	r3, r0
    readVideoHeader();
900016bc:	4620      	mov	r0, r4
    movieLength = reader.getDataLength();
900016be:	62a3      	str	r3, [r4, #40]	; 0x28
}
900016c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    readVideoHeader();
900016c4:	f7ff bd88 	b.w	900011d8 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv>

900016c8 <HAL_JPEG_InfoReadyCallback>:
{
900016c8:	b508      	push	{r3, lr}
  if(pInfo->ChromaSubsampling == JPEG_420_SUBSAMPLING)
900016ca:	684b      	ldr	r3, [r1, #4]
{
900016cc:	4608      	mov	r0, r1
  if(pInfo->ChromaSubsampling == JPEG_420_SUBSAMPLING)
900016ce:	2b01      	cmp	r3, #1
900016d0:	d01a      	beq.n	90001708 <HAL_JPEG_InfoReadyCallback+0x40>
    if(pInfo->ChromaSubsampling == JPEG_422_SUBSAMPLING)
900016d2:	2b02      	cmp	r3, #2
900016d4:	d010      	beq.n	900016f8 <HAL_JPEG_InfoReadyCallback+0x30>
    if(pInfo->ChromaSubsampling == JPEG_444_SUBSAMPLING)
900016d6:	b94b      	cbnz	r3, 900016ec <HAL_JPEG_InfoReadyCallback+0x24>
      if((pInfo->ImageWidth % 8) != 0)
900016d8:	68cb      	ldr	r3, [r1, #12]
900016da:	0759      	lsls	r1, r3, #29
900016dc:	d12f      	bne.n	9000173e <HAL_JPEG_InfoReadyCallback+0x76>
      if((pInfo->ImageHeight % 8) != 0)
900016de:	6883      	ldr	r3, [r0, #8]
900016e0:	075a      	lsls	r2, r3, #29
900016e2:	d003      	beq.n	900016ec <HAL_JPEG_InfoReadyCallback+0x24>
        pInfo->ImageHeight += (8 - (pInfo->ImageHeight % 8));
900016e4:	f023 0307 	bic.w	r3, r3, #7
900016e8:	3308      	adds	r3, #8
900016ea:	6083      	str	r3, [r0, #8]
    HAL_StatusTypeDef status = JPEG_GetDecodeColorConvertFunc(pInfo, &pConvert_Function, &MCU_TotalNb);
900016ec:	4a1a      	ldr	r2, [pc, #104]	; (90001758 <HAL_JPEG_InfoReadyCallback+0x90>)
900016ee:	491b      	ldr	r1, [pc, #108]	; (9000175c <HAL_JPEG_InfoReadyCallback+0x94>)
900016f0:	f00f fc28 	bl	90010f44 <JPEG_GetDecodeColorConvertFunc>
    if(status != HAL_OK)
900016f4:	bb40      	cbnz	r0, 90001748 <HAL_JPEG_InfoReadyCallback+0x80>
}
900016f6:	bd08      	pop	{r3, pc}
      if((pInfo->ImageWidth % 16) != 0)
900016f8:	68cb      	ldr	r3, [r1, #12]
900016fa:	071a      	lsls	r2, r3, #28
900016fc:	d0ef      	beq.n	900016de <HAL_JPEG_InfoReadyCallback+0x16>
        pInfo->ImageWidth += (16 - (pInfo->ImageWidth % 16));
900016fe:	f023 030f 	bic.w	r3, r3, #15
90001702:	3310      	adds	r3, #16
90001704:	60cb      	str	r3, [r1, #12]
90001706:	e7ea      	b.n	900016de <HAL_JPEG_InfoReadyCallback+0x16>
    if((pInfo->ImageWidth % 16) != 0)
90001708:	68cb      	ldr	r3, [r1, #12]
9000170a:	071a      	lsls	r2, r3, #28
9000170c:	d003      	beq.n	90001716 <HAL_JPEG_InfoReadyCallback+0x4e>
      pInfo->ImageWidth += (16 - (pInfo->ImageWidth % 16));
9000170e:	f023 030f 	bic.w	r3, r3, #15
90001712:	3310      	adds	r3, #16
90001714:	60cb      	str	r3, [r1, #12]
    if((pInfo->ImageHeight % 16) != 0)
90001716:	6883      	ldr	r3, [r0, #8]
90001718:	0719      	lsls	r1, r3, #28
9000171a:	d003      	beq.n	90001724 <HAL_JPEG_InfoReadyCallback+0x5c>
      pInfo->ImageHeight += (16 - (pInfo->ImageHeight % 16));
9000171c:	f023 030f 	bic.w	r3, r3, #15
90001720:	3310      	adds	r3, #16
90001722:	6083      	str	r3, [r0, #8]
    HAL_StatusTypeDef status = TGFX_JPEG_GetDecodeColorConvertFunc(pInfo, &pConvert_Function, &MCU_TotalNb);
90001724:	4a0c      	ldr	r2, [pc, #48]	; (90001758 <HAL_JPEG_InfoReadyCallback+0x90>)
90001726:	490d      	ldr	r1, [pc, #52]	; (9000175c <HAL_JPEG_InfoReadyCallback+0x94>)
90001728:	f001 fefa 	bl	90003520 <TGFX_JPEG_GetDecodeColorConvertFunc>
    if(status != HAL_OK)
9000172c:	2800      	cmp	r0, #0
9000172e:	d0e2      	beq.n	900016f6 <HAL_JPEG_InfoReadyCallback+0x2e>
      assert(status == HAL_OK);
90001730:	4b0b      	ldr	r3, [pc, #44]	; (90001760 <HAL_JPEG_InfoReadyCallback+0x98>)
90001732:	f240 212e 	movw	r1, #558	; 0x22e
90001736:	4a0b      	ldr	r2, [pc, #44]	; (90001764 <HAL_JPEG_InfoReadyCallback+0x9c>)
90001738:	480b      	ldr	r0, [pc, #44]	; (90001768 <HAL_JPEG_InfoReadyCallback+0xa0>)
9000173a:	f021 fb81 	bl	90022e40 <__assert_func>
        pInfo->ImageWidth += (8 - (pInfo->ImageWidth % 8));
9000173e:	f023 0307 	bic.w	r3, r3, #7
90001742:	3308      	adds	r3, #8
90001744:	60c3      	str	r3, [r0, #12]
90001746:	e7ca      	b.n	900016de <HAL_JPEG_InfoReadyCallback+0x16>
      assert(status == HAL_OK);
90001748:	4b05      	ldr	r3, [pc, #20]	; (90001760 <HAL_JPEG_InfoReadyCallback+0x98>)
9000174a:	f44f 7112 	mov.w	r1, #584	; 0x248
9000174e:	4a05      	ldr	r2, [pc, #20]	; (90001764 <HAL_JPEG_InfoReadyCallback+0x9c>)
90001750:	4805      	ldr	r0, [pc, #20]	; (90001768 <HAL_JPEG_InfoReadyCallback+0xa0>)
90001752:	f021 fb75 	bl	90022e40 <__assert_func>
90001756:	bf00      	nop
90001758:	24005b98 	.word	0x24005b98
9000175c:	24005bd4 	.word	0x24005bd4
90001760:	9002444c 	.word	0x9002444c
90001764:	90024460 	.word	0x90024460
90001768:	900241fc 	.word	0x900241fc

9000176c <HAL_JPEG_GetDataCallback>:
{
9000176c:	b410      	push	{r4}
  JPEG_InputImageIndex += NbDecodedData;
9000176e:	4c0c      	ldr	r4, [pc, #48]	; (900017a0 <HAL_JPEG_GetDataCallback+0x34>)
  if(JPEG_InputImageIndex < JPEG_InputImageSize_Bytes)
90001770:	4a0c      	ldr	r2, [pc, #48]	; (900017a4 <HAL_JPEG_GetDataCallback+0x38>)
  JPEG_InputImageIndex += NbDecodedData;
90001772:	6823      	ldr	r3, [r4, #0]
  if(JPEG_InputImageIndex < JPEG_InputImageSize_Bytes)
90001774:	6812      	ldr	r2, [r2, #0]
  JPEG_InputImageIndex += NbDecodedData;
90001776:	440b      	add	r3, r1
  if(JPEG_InputImageIndex < JPEG_InputImageSize_Bytes)
90001778:	4293      	cmp	r3, r2
  JPEG_InputImageIndex += NbDecodedData;
9000177a:	6023      	str	r3, [r4, #0]
  if(JPEG_InputImageIndex < JPEG_InputImageSize_Bytes)
9000177c:	d302      	bcc.n	90001784 <HAL_JPEG_GetDataCallback+0x18>
}
9000177e:	f85d 4b04 	ldr.w	r4, [sp], #4
90001782:	4770      	bx	lr
    uint32_t inDataLength = JPEG_InputImageSize_Bytes - JPEG_InputImageIndex;
90001784:	1ad2      	subs	r2, r2, r3
    JPEG_InputImageAddress = JPEG_InputImageAddress + NbDecodedData;
90001786:	4b08      	ldr	r3, [pc, #32]	; (900017a8 <HAL_JPEG_GetDataCallback+0x3c>)
90001788:	681c      	ldr	r4, [r3, #0]
    HAL_JPEG_ConfigInputBuffer(hjpeg,(uint8_t *)JPEG_InputImageAddress, inDataLength >= CHUNK_SIZE_IN ? CHUNK_SIZE_IN : inDataLength);
9000178a:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
    JPEG_InputImageAddress = JPEG_InputImageAddress + NbDecodedData;
9000178e:	4421      	add	r1, r4
    HAL_JPEG_ConfigInputBuffer(hjpeg,(uint8_t *)JPEG_InputImageAddress, inDataLength >= CHUNK_SIZE_IN ? CHUNK_SIZE_IN : inDataLength);
90001790:	bf28      	it	cs
90001792:	f44f 3280 	movcs.w	r2, #65536	; 0x10000
}
90001796:	f85d 4b04 	ldr.w	r4, [sp], #4
    JPEG_InputImageAddress = JPEG_InputImageAddress + NbDecodedData;
9000179a:	6019      	str	r1, [r3, #0]
    HAL_JPEG_ConfigInputBuffer(hjpeg,(uint8_t *)JPEG_InputImageAddress, inDataLength >= CHUNK_SIZE_IN ? CHUNK_SIZE_IN : inDataLength);
9000179c:	f007 bf9a 	b.w	900096d4 <HAL_JPEG_ConfigInputBuffer>
900017a0:	24005b7c 	.word	0x24005b7c
900017a4:	24005b80 	.word	0x24005b80
900017a8:	24005b78 	.word	0x24005b78

900017ac <HAL_JPEG_DataReadyCallback>:
{
900017ac:	b570      	push	{r4, r5, r6, lr}
    Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State = JPEG_BUFFER_FULL;
900017ae:	4e1e      	ldr	r6, [pc, #120]	; (90001828 <HAL_JPEG_DataReadyCallback+0x7c>)
{
900017b0:	4605      	mov	r5, r0
    Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State = JPEG_BUFFER_FULL;
900017b2:	2001      	movs	r0, #1
900017b4:	4c1d      	ldr	r4, [pc, #116]	; (9000182c <HAL_JPEG_DataReadyCallback+0x80>)
900017b6:	6833      	ldr	r3, [r6, #0]
900017b8:	eb03 0143 	add.w	r1, r3, r3, lsl #1
    JPEG_OUT_Write_BufferIndex++;
900017bc:	4403      	add	r3, r0
    Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State = JPEG_BUFFER_FULL;
900017be:	f804 0021 	strb.w	r0, [r4, r1, lsl #2]
    if(JPEG_OUT_Write_BufferIndex >= NB_OUTPUT_DATA_BUFFERS)
900017c2:	4283      	cmp	r3, r0
    Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State = JPEG_BUFFER_FULL;
900017c4:	eb04 0181 	add.w	r1, r4, r1, lsl #2
    Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBufferSize = OutDataLength;
900017c8:	608a      	str	r2, [r1, #8]
    if(JPEG_OUT_Write_BufferIndex >= NB_OUTPUT_DATA_BUFFERS)
900017ca:	d91a      	bls.n	90001802 <HAL_JPEG_DataReadyCallback+0x56>
      JPEG_OUT_Write_BufferIndex = 0;
900017cc:	2200      	movs	r2, #0
900017ce:	4613      	mov	r3, r2
900017d0:	6032      	str	r2, [r6, #0]
    if(Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State != JPEG_BUFFER_EMPTY)
900017d2:	eb03 0143 	add.w	r1, r3, r3, lsl #1
900017d6:	005a      	lsls	r2, r3, #1
900017d8:	f814 1021 	ldrb.w	r1, [r4, r1, lsl #2]
900017dc:	b9c9      	cbnz	r1, 90001812 <HAL_JPEG_DataReadyCallback+0x66>
    HAL_JPEG_ConfigOutputBuffer(hjpeg, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
900017de:	4914      	ldr	r1, [pc, #80]	; (90001830 <HAL_JPEG_DataReadyCallback+0x84>)
900017e0:	4413      	add	r3, r2
900017e2:	4628      	mov	r0, r5
900017e4:	68ca      	ldr	r2, [r1, #12]
900017e6:	eb04 0483 	add.w	r4, r4, r3, lsl #2
900017ea:	eb02 0242 	add.w	r2, r2, r2, lsl #1
900017ee:	6861      	ldr	r1, [r4, #4]
900017f0:	01d2      	lsls	r2, r2, #7
900017f2:	f007 ff73 	bl	900096dc <HAL_JPEG_ConfigOutputBuffer>
    SEM_POST(semDecodingDone);
900017f6:	4b0f      	ldr	r3, [pc, #60]	; (90001834 <HAL_JPEG_DataReadyCallback+0x88>)
}
900017f8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    SEM_POST(semDecodingDone);
900017fc:	6818      	ldr	r0, [r3, #0]
900017fe:	f00b bf95 	b.w	9000d72c <osSemaphoreRelease>
    if(Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State != JPEG_BUFFER_EMPTY)
90001802:	eb03 0143 	add.w	r1, r3, r3, lsl #1
    JPEG_OUT_Write_BufferIndex++;
90001806:	6033      	str	r3, [r6, #0]
    if(Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State != JPEG_BUFFER_EMPTY)
90001808:	005a      	lsls	r2, r3, #1
9000180a:	f814 1021 	ldrb.w	r1, [r4, r1, lsl #2]
9000180e:	2900      	cmp	r1, #0
90001810:	d0e5      	beq.n	900017de <HAL_JPEG_DataReadyCallback+0x32>
      HAL_JPEG_Pause(hjpeg, JPEG_PAUSE_RESUME_OUTPUT);
90001812:	2102      	movs	r1, #2
90001814:	4628      	mov	r0, r5
90001816:	f007 ff25 	bl	90009664 <HAL_JPEG_Pause>
      Output_Is_Paused = 1;
9000181a:	4a07      	ldr	r2, [pc, #28]	; (90001838 <HAL_JPEG_DataReadyCallback+0x8c>)
9000181c:	2101      	movs	r1, #1
    HAL_JPEG_ConfigOutputBuffer(hjpeg, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
9000181e:	6833      	ldr	r3, [r6, #0]
      Output_Is_Paused = 1;
90001820:	6011      	str	r1, [r2, #0]
90001822:	fa03 f201 	lsl.w	r2, r3, r1
90001826:	e7da      	b.n	900017de <HAL_JPEG_DataReadyCallback+0x32>
90001828:	24005b88 	.word	0x24005b88
9000182c:	24000004 	.word	0x24000004
90001830:	24005ba0 	.word	0x24005ba0
90001834:	24005bd8 	.word	0x24005bd8
90001838:	24005b9c 	.word	0x24005b9c

9000183c <HAL_JPEG_ErrorCallback>:
  __ASM volatile ("cpsid i" : : : "memory");
9000183c:	b672      	cpsid	i
  while (1)
9000183e:	e7fe      	b.n	9000183e <HAL_JPEG_ErrorCallback+0x2>

90001840 <HAL_JPEG_DecodeCpltCallback>:
  Jpeg_HWDecodingEnd = 1;
90001840:	4b01      	ldr	r3, [pc, #4]	; (90001848 <HAL_JPEG_DecodeCpltCallback+0x8>)
90001842:	2201      	movs	r2, #1
90001844:	601a      	str	r2, [r3, #0]
}
90001846:	4770      	bx	lr
90001848:	24005b90 	.word	0x24005b90

9000184c <DMA2D_CopyBuffer>:
  * @brief  Configures external DMA2D job to copy YCbCr data to RGB buffer(s)
  * @param job: External job reference
  * @retval None
  */
void DMA2D_CopyBuffer(External_DMA2D_JobTypeDef& job)
{
9000184c:	b570      	push	{r4, r5, r6, lr}
  uint32_t xRef, yRef, refline;

  xRef = ((job.MCU_index * MCU_WIDTH_PIXELS) / JPEG_ConvertorParams.WidthExtend) * MCU_WIDTH_PIXELS;
9000184e:	491b      	ldr	r1, [pc, #108]	; (900018bc <DMA2D_CopyBuffer+0x70>)
  yRef = ((job.MCU_index * MCU_WIDTH_PIXELS) % JPEG_ConvertorParams.WidthExtend);

  refline = (JPEG_ConvertorParams.ScaledWidth) * xRef + (JPEG_ConvertorParams.bytes_pr_pixel * yRef);

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB565);
90001850:	2302      	movs	r3, #2
  xRef = ((job.MCU_index * MCU_WIDTH_PIXELS) / JPEG_ConvertorParams.WidthExtend) * MCU_WIDTH_PIXELS;
90001852:	6805      	ldr	r5, [r0, #0]
  WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB565);
90001854:	4c1a      	ldr	r4, [pc, #104]	; (900018c0 <DMA2D_CopyBuffer+0x74>)
  xRef = ((job.MCU_index * MCU_WIDTH_PIXELS) / JPEG_ConvertorParams.WidthExtend) * MCU_WIDTH_PIXELS;
90001856:	680a      	ldr	r2, [r1, #0]
  WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB565);
90001858:	6363      	str	r3, [r4, #52]	; 0x34
  xRef = ((job.MCU_index * MCU_WIDTH_PIXELS) / JPEG_ConvertorParams.WidthExtend) * MCU_WIDTH_PIXELS;
9000185a:	012b      	lsls	r3, r5, #4

  /* Configure DMA2D data size */
  if(job.MCU_index >= (MCU_TotalNb - JPEG_ConvertorParams.MCU_pr_line))  // Last line of frame
9000185c:	4e19      	ldr	r6, [pc, #100]	; (900018c4 <DMA2D_CopyBuffer+0x78>)
  xRef = ((job.MCU_index * MCU_WIDTH_PIXELS) / JPEG_ConvertorParams.WidthExtend) * MCU_WIDTH_PIXELS;
9000185e:	fbb3 fcf2 	udiv	ip, r3, r2
  yRef = ((job.MCU_index * MCU_WIDTH_PIXELS) % JPEG_ConvertorParams.WidthExtend);
90001862:	fb02 321c 	mls	r2, r2, ip, r3
  refline = (JPEG_ConvertorParams.ScaledWidth) * xRef + (JPEG_ConvertorParams.bytes_pr_pixel * yRef);
90001866:	684b      	ldr	r3, [r1, #4]
  if(job.MCU_index >= (MCU_TotalNb - JPEG_ConvertorParams.MCU_pr_line))  // Last line of frame
90001868:	6836      	ldr	r6, [r6, #0]
  refline = (JPEG_ConvertorParams.ScaledWidth) * xRef + (JPEG_ConvertorParams.bytes_pr_pixel * yRef);
9000186a:	fb03 fc0c 	mul.w	ip, r3, ip
  if(job.MCU_index >= (MCU_TotalNb - JPEG_ConvertorParams.MCU_pr_line))  // Last line of frame
9000186e:	68cb      	ldr	r3, [r1, #12]
90001870:	eba6 0e03 	sub.w	lr, r6, r3
  refline = (JPEG_ConvertorParams.ScaledWidth) * xRef + (JPEG_ConvertorParams.bytes_pr_pixel * yRef);
90001874:	690e      	ldr	r6, [r1, #16]
90001876:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
  if(job.MCU_index >= (MCU_TotalNb - JPEG_ConvertorParams.MCU_pr_line))  // Last line of frame
9000187a:	4575      	cmp	r5, lr
  refline = (JPEG_ConvertorParams.ScaledWidth) * xRef + (JPEG_ConvertorParams.bytes_pr_pixel * yRef);
9000187c:	fb06 f202 	mul.w	r2, r6, r2
  if(job.MCU_index >= (MCU_TotalNb - JPEG_ConvertorParams.MCU_pr_line))  // Last line of frame
90001880:	d317      	bcc.n	900018b2 <DMA2D_CopyBuffer+0x66>
  {
      WRITE_REG(DMA2D->NLR, (JPEG_ConvertorParams.LastLineHeight | ((MCU_WIDTH_PIXELS * JPEG_ConvertorParams.MCU_pr_line) << DMA2D_NLR_PL_Pos)));
90001882:	6889      	ldr	r1, [r1, #8]
90001884:	ea41 5103 	orr.w	r1, r1, r3, lsl #20
90001888:	6461      	str	r1, [r4, #68]	; 0x44
  {
      WRITE_REG(DMA2D->NLR, (MCU_HEIGHT_PIXELS | ((MCU_WIDTH_PIXELS * JPEG_ConvertorParams.MCU_pr_line) << DMA2D_NLR_PL_Pos)));
  }

  /* Configure DMA2D destination address */
  WRITE_REG(DMA2D->OMAR, (reinterpret_cast<uint32_t>(FrameBufferAddress) + refline));
9000188a:	490f      	ldr	r1, [pc, #60]	; (900018c8 <DMA2D_CopyBuffer+0x7c>)

  /* DMA2D OOR register configuration ------------------------------------------*/
  WRITE_REG(DMA2D->OOR, 480 - (MCU_WIDTH_PIXELS * JPEG_ConvertorParams.MCU_pr_line));
9000188c:	f1c3 031e 	rsb	r3, r3, #30

  /* DMA2D FGPFCCR register configuration -------------------------------------*/
  WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_YCBCR | (DMA2D_CSS_420 << DMA2D_FGPFCCR_CSS_Pos) | (DMA2D_REPLACE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (0xFFU << DMA2D_FGPFCCR_ALPHA_Pos));

  /* Configure DMA2D source address */
  WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(job.jpeg_buffer->DataBuffer));
90001890:	6840      	ldr	r0, [r0, #4]
  WRITE_REG(DMA2D->FGOR, 0);
90001892:	2400      	movs	r4, #0
  WRITE_REG(DMA2D->OMAR, (reinterpret_cast<uint32_t>(FrameBufferAddress) + refline));
90001894:	6809      	ldr	r1, [r1, #0]
  WRITE_REG(DMA2D->OOR, 480 - (MCU_WIDTH_PIXELS * JPEG_ConvertorParams.MCU_pr_line));
90001896:	011b      	lsls	r3, r3, #4
  WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(job.jpeg_buffer->DataBuffer));
90001898:	6840      	ldr	r0, [r0, #4]
  WRITE_REG(DMA2D->OMAR, (reinterpret_cast<uint32_t>(FrameBufferAddress) + refline));
9000189a:	4411      	add	r1, r2
9000189c:	4a08      	ldr	r2, [pc, #32]	; (900018c0 <DMA2D_CopyBuffer+0x74>)
9000189e:	4461      	add	r1, ip
900018a0:	63d1      	str	r1, [r2, #60]	; 0x3c
  WRITE_REG(DMA2D->OOR, 480 - (MCU_WIDTH_PIXELS * JPEG_ConvertorParams.MCU_pr_line));
900018a2:	6413      	str	r3, [r2, #64]	; 0x40
  WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_YCBCR | (DMA2D_CSS_420 << DMA2D_FGPFCCR_CSS_Pos) | (DMA2D_REPLACE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (0xFFU << DMA2D_FGPFCCR_ALPHA_Pos));
900018a4:	4909      	ldr	r1, [pc, #36]	; (900018cc <DMA2D_CopyBuffer+0x80>)

  /* Configure DMA2D contol register */
  WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
900018a6:	4b0a      	ldr	r3, [pc, #40]	; (900018d0 <DMA2D_CopyBuffer+0x84>)
  WRITE_REG(DMA2D->FGOR, 0);
900018a8:	6114      	str	r4, [r2, #16]
  WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_YCBCR | (DMA2D_CSS_420 << DMA2D_FGPFCCR_CSS_Pos) | (DMA2D_REPLACE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (0xFFU << DMA2D_FGPFCCR_ALPHA_Pos));
900018aa:	61d1      	str	r1, [r2, #28]
  WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(job.jpeg_buffer->DataBuffer));
900018ac:	60d0      	str	r0, [r2, #12]
  WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
900018ae:	6013      	str	r3, [r2, #0]
}
900018b0:	bd70      	pop	{r4, r5, r6, pc}
      WRITE_REG(DMA2D->NLR, (MCU_HEIGHT_PIXELS | ((MCU_WIDTH_PIXELS * JPEG_ConvertorParams.MCU_pr_line) << DMA2D_NLR_PL_Pos)));
900018b2:	0519      	lsls	r1, r3, #20
900018b4:	f041 0110 	orr.w	r1, r1, #16
900018b8:	6461      	str	r1, [r4, #68]	; 0x44
900018ba:	e7e6      	b.n	9000188a <DMA2D_CopyBuffer+0x3e>
900018bc:	24005ba0 	.word	0x24005ba0
900018c0:	52001000 	.word	0x52001000
900018c4:	24005b98 	.word	0x24005b98
900018c8:	24005b74 	.word	0x24005b74
900018cc:	ff09000b 	.word	0xff09000b
900018d0:	00010201 	.word	0x00010201

900018d4 <DMA2D_ExternalJobCompleted>:
  * @retval None
  */
void DMA2D_ExternalJobCompleted(External_DMA2D_JobTypeDef& job)
{
  // Mark ycbcr empty
  job.jpeg_buffer->State = JPEG_BUFFER_EMPTY;
900018d4:	2200      	movs	r2, #0
900018d6:	6843      	ldr	r3, [r0, #4]
      return count_ == 0;
900018d8:	490b      	ldr	r1, [pc, #44]	; (90001908 <DMA2D_ExternalJobCompleted+0x34>)
900018da:	701a      	strb	r2, [r3, #0]
  job.jpeg_buffer->DataBufferSize = 0;

  // Mark dma paused if queue is empty
  if(external_queue.is_empty())
900018dc:	68c9      	ldr	r1, [r1, #12]
  job.jpeg_buffer->DataBufferSize = 0;
900018de:	609a      	str	r2, [r3, #8]
  if(external_queue.is_empty())
900018e0:	b911      	cbnz	r1, 900018e8 <DMA2D_ExternalJobCompleted+0x14>
  {
      DMA2D_output_Is_Paused = 1;
900018e2:	4b0a      	ldr	r3, [pc, #40]	; (9000190c <DMA2D_ExternalJobCompleted+0x38>)
900018e4:	2201      	movs	r2, #1
900018e6:	601a      	str	r2, [r3, #0]
  }

  // Check if last line
  if(job.MCU_index >= (MCU_TotalNb - JPEG_ConvertorParams.MCU_pr_line))
900018e8:	4b09      	ldr	r3, [pc, #36]	; (90001910 <DMA2D_ExternalJobCompleted+0x3c>)
900018ea:	490a      	ldr	r1, [pc, #40]	; (90001914 <DMA2D_ExternalJobCompleted+0x40>)
900018ec:	681b      	ldr	r3, [r3, #0]
900018ee:	68c9      	ldr	r1, [r1, #12]
900018f0:	6802      	ldr	r2, [r0, #0]
900018f2:	1a5b      	subs	r3, r3, r1
900018f4:	429a      	cmp	r2, r3
900018f6:	d302      	bcc.n	900018fe <DMA2D_ExternalJobCompleted+0x2a>
  {
      DMA2D_CopyBufferEnd = 1;
900018f8:	4b07      	ldr	r3, [pc, #28]	; (90001918 <DMA2D_ExternalJobCompleted+0x44>)
900018fa:	2201      	movs	r2, #1
900018fc:	601a      	str	r2, [r3, #0]
  }

  // Signal Hardware Decoding to wake up
  SEM_POST(semDecodingDone);
900018fe:	4b07      	ldr	r3, [pc, #28]	; (9000191c <DMA2D_ExternalJobCompleted+0x48>)
90001900:	6818      	ldr	r0, [r3, #0]
90001902:	f00b bf13 	b.w	9000d72c <osSemaphoreRelease>
90001906:	bf00      	nop
90001908:	24005bb4 	.word	0x24005bb4
9000190c:	24005b70 	.word	0x24005b70
90001910:	24005b98 	.word	0x24005b98
90001914:	24005ba0 	.word	0x24005ba0
90001918:	24005b6c 	.word	0x24005b6c
9000191c:	24005bd8 	.word	0x24005bd8

90001920 <_GLOBAL__sub_I_FrameBufferAddress>:
      : max_size_(Size), head_(0), tail_(0), count_(0)
90001920:	4b03      	ldr	r3, [pc, #12]	; (90001930 <_GLOBAL__sub_I_FrameBufferAddress+0x10>)
90001922:	2200      	movs	r2, #0
90001924:	2102      	movs	r1, #2
90001926:	60da      	str	r2, [r3, #12]
90001928:	6019      	str	r1, [r3, #0]
9000192a:	e9c3 2201 	strd	r2, r2, [r3, #4]
}
9000192e:	4770      	bx	lr
90001930:	24005bb4 	.word	0x24005bb4

90001934 <_ZN8touchgfx10OSWrappers10initializeEv>:
 * Initialize frame buffer semaphore and queue/mutex for VSYNC signal.
 */
void OSWrappers::initialize()
{
    // Create a queue of length 1
    frame_buffer_sem = osSemaphoreNew(1, 1, NULL); // Binary semaphore
90001934:	2101      	movs	r1, #1
90001936:	2200      	movs	r2, #0
{
90001938:	b508      	push	{r3, lr}
    frame_buffer_sem = osSemaphoreNew(1, 1, NULL); // Binary semaphore
9000193a:	4608      	mov	r0, r1
9000193c:	f00b fe72 	bl	9000d624 <osSemaphoreNew>
90001940:	4b0b      	ldr	r3, [pc, #44]	; (90001970 <_ZN8touchgfx10OSWrappers10initializeEv+0x3c>)
90001942:	6018      	str	r0, [r3, #0]
    assert((frame_buffer_sem != NULL) && "Creation of framebuffer semaphore failed");
90001944:	b140      	cbz	r0, 90001958 <_ZN8touchgfx10OSWrappers10initializeEv+0x24>

    // Create a queue of length 1
    vsync_queue = osMessageQueueNew(1, 4, NULL);
90001946:	2200      	movs	r2, #0
90001948:	2104      	movs	r1, #4
9000194a:	2001      	movs	r0, #1
9000194c:	f00b ff1a 	bl	9000d784 <osMessageQueueNew>
90001950:	4b08      	ldr	r3, [pc, #32]	; (90001974 <_ZN8touchgfx10OSWrappers10initializeEv+0x40>)
90001952:	6018      	str	r0, [r3, #0]
    assert((vsync_queue != NULL) && "Creation of vsync message queue failed");
90001954:	b130      	cbz	r0, 90001964 <_ZN8touchgfx10OSWrappers10initializeEv+0x30>
}
90001956:	bd08      	pop	{r3, pc}
    assert((frame_buffer_sem != NULL) && "Creation of framebuffer semaphore failed");
90001958:	4b07      	ldr	r3, [pc, #28]	; (90001978 <_ZN8touchgfx10OSWrappers10initializeEv+0x44>)
9000195a:	2128      	movs	r1, #40	; 0x28
9000195c:	4a07      	ldr	r2, [pc, #28]	; (9000197c <_ZN8touchgfx10OSWrappers10initializeEv+0x48>)
9000195e:	4808      	ldr	r0, [pc, #32]	; (90001980 <_ZN8touchgfx10OSWrappers10initializeEv+0x4c>)
90001960:	f021 fa6e 	bl	90022e40 <__assert_func>
    assert((vsync_queue != NULL) && "Creation of vsync message queue failed");
90001964:	4b07      	ldr	r3, [pc, #28]	; (90001984 <_ZN8touchgfx10OSWrappers10initializeEv+0x50>)
90001966:	212c      	movs	r1, #44	; 0x2c
90001968:	4a04      	ldr	r2, [pc, #16]	; (9000197c <_ZN8touchgfx10OSWrappers10initializeEv+0x48>)
9000196a:	4805      	ldr	r0, [pc, #20]	; (90001980 <_ZN8touchgfx10OSWrappers10initializeEv+0x4c>)
9000196c:	f021 fa68 	bl	90022e40 <__assert_func>
90001970:	24005be0 	.word	0x24005be0
90001974:	24005bdc 	.word	0x24005bdc
90001978:	900244ec 	.word	0x900244ec
9000197c:	90024538 	.word	0x90024538
90001980:	90024568 	.word	0x90024568
90001984:	900245bc 	.word	0x900245bc

90001988 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>:
/*
 * Take the frame buffer semaphore. Blocks until semaphore is available.
 */
void OSWrappers::takeFrameBufferSemaphore()
{
    osSemaphoreAcquire(frame_buffer_sem, osWaitForever);
90001988:	4b02      	ldr	r3, [pc, #8]	; (90001994 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0xc>)
9000198a:	f04f 31ff 	mov.w	r1, #4294967295
9000198e:	6818      	ldr	r0, [r3, #0]
90001990:	f00b be98 	b.w	9000d6c4 <osSemaphoreAcquire>
90001994:	24005be0 	.word	0x24005be0

90001998 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>:
/*
 * Release the frame buffer semaphore.
 */
void OSWrappers::giveFrameBufferSemaphore()
{
    osSemaphoreRelease(frame_buffer_sem);
90001998:	4b01      	ldr	r3, [pc, #4]	; (900019a0 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x8>)
9000199a:	6818      	ldr	r0, [r3, #0]
9000199c:	f00b bec6 	b.w	9000d72c <osSemaphoreRelease>
900019a0:	24005be0 	.word	0x24005be0

900019a4 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>:
 * Note must return immediately! This function does not care who has the taken the semaphore,
 * it only serves to make sure that the semaphore is taken by someone.
 */
void OSWrappers::tryTakeFrameBufferSemaphore()
{
    osSemaphoreAcquire(frame_buffer_sem, 0);
900019a4:	4b02      	ldr	r3, [pc, #8]	; (900019b0 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0xc>)
900019a6:	2100      	movs	r1, #0
900019a8:	6818      	ldr	r0, [r3, #0]
900019aa:	f00b be8b 	b.w	9000d6c4 <osSemaphoreAcquire>
900019ae:	bf00      	nop
900019b0:	24005be0 	.word	0x24005be0

900019b4 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>:
900019b4:	4b01      	ldr	r3, [pc, #4]	; (900019bc <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x8>)
900019b6:	6818      	ldr	r0, [r3, #0]
900019b8:	f00b beb8 	b.w	9000d72c <osSemaphoreRelease>
900019bc:	24005be0 	.word	0x24005be0

900019c0 <_ZN8touchgfx10OSWrappers11signalVSyncEv>:
 * Note This function is called from an ISR, and should (depending on OS) trigger a
 * scheduling.
 */
void OSWrappers::signalVSync()
{
    osMessageQueuePut(vsync_queue, &dummy, 0, 0);
900019c0:	4803      	ldr	r0, [pc, #12]	; (900019d0 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x10>)
900019c2:	2300      	movs	r3, #0
900019c4:	4903      	ldr	r1, [pc, #12]	; (900019d4 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x14>)
900019c6:	461a      	mov	r2, r3
900019c8:	6800      	ldr	r0, [r0, #0]
900019ca:	f00b bf19 	b.w	9000d800 <osMessageQueuePut>
900019ce:	bf00      	nop
900019d0:	24005bdc 	.word	0x24005bdc
900019d4:	2400001c 	.word	0x2400001c

900019d8 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>:
 *
 * Note This function must first clear the mutex/queue and then wait for the next one to
 * occur.
 */
void OSWrappers::waitForVSync()
{
900019d8:	b510      	push	{r4, lr}
    uint32_t dummyGet;
    // First make sure the queue is empty, by trying to remove an element with 0 timeout.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, 0);
900019da:	2300      	movs	r3, #0
{
900019dc:	b082      	sub	sp, #8
    osMessageQueueGet(vsync_queue, &dummyGet, 0, 0);
900019de:	4c07      	ldr	r4, [pc, #28]	; (900019fc <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x24>)
900019e0:	461a      	mov	r2, r3
900019e2:	a901      	add	r1, sp, #4
900019e4:	6820      	ldr	r0, [r4, #0]
900019e6:	f00b ff4d 	bl	9000d884 <osMessageQueueGet>

    // Then, wait for next VSYNC to occur.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, osWaitForever);
900019ea:	f04f 33ff 	mov.w	r3, #4294967295
900019ee:	2200      	movs	r2, #0
900019f0:	a901      	add	r1, sp, #4
900019f2:	6820      	ldr	r0, [r4, #0]
900019f4:	f00b ff46 	bl	9000d884 <osMessageQueueGet>
}
900019f8:	b002      	add	sp, #8
900019fa:	bd10      	pop	{r4, pc}
900019fc:	24005bdc 	.word	0x24005bdc

90001a00 <_ZN8touchgfx13DMA_Interface5flushEv>:
        waitForFrameBufferSemaphore();
90001a00:	6803      	ldr	r3, [r0, #0]
90001a02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
90001a04:	4718      	bx	r3
90001a06:	bf00      	nop

90001a08 <_ZN8STM32DMA10getDMATypeEv>:
     * @return a DMAType value of the concrete DMA_Interface implementation.
     */
    virtual touchgfx::DMAType getDMAType(void)
    {
        return touchgfx::DMA_TYPE_CHROMART;
    }
90001a08:	2001      	movs	r0, #1
90001a0a:	4770      	bx	lr

90001a0c <_ZN8STM32DMAD1Ev>:
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0])), started_by_external_job(false), mutexIsRunning(0)
{
    mutexIsRunning = MUTEX_CREATE();
}

STM32DMA::~STM32DMA()
90001a0c:	4905      	ldr	r1, [pc, #20]	; (90001a24 <_ZN8STM32DMAD1Ev+0x18>)
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
90001a0e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
90001a12:	4b05      	ldr	r3, [pc, #20]	; (90001a28 <_ZN8STM32DMAD1Ev+0x1c>)
90001a14:	6001      	str	r1, [r0, #0]
90001a16:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
90001a1a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
90001a1e:	f3bf 8f6f 	isb	sy
{
    /* Disable DMA2D global Interrupt */
    NVIC_DisableIRQ(DMA2D_IRQn);
}
90001a22:	4770      	bx	lr
90001a24:	90024768 	.word	0x90024768
90001a28:	e000e100 	.word	0xe000e100

90001a2c <_ZN8STM32DMA10initializeEv>:

void STM32DMA::initialize()
{
    /* Ensure DMA2D Clock is enabled */
    __HAL_RCC_DMA2D_CLK_ENABLE();
90001a2c:	4b0f      	ldr	r3, [pc, #60]	; (90001a6c <_ZN8STM32DMA10initializeEv+0x40>)
{
90001a2e:	b082      	sub	sp, #8
    __HAL_RCC_DMA2D_FORCE_RESET();
    __HAL_RCC_DMA2D_RELEASE_RESET();

    /* Add transfer complete callback function */
    hdma2d.XferCpltCallback = DMA2D_XferCpltCallback;
90001a30:	490f      	ldr	r1, [pc, #60]	; (90001a70 <_ZN8STM32DMA10initializeEv+0x44>)
    __HAL_RCC_DMA2D_CLK_ENABLE();
90001a32:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
    hdma2d.XferCpltCallback = DMA2D_XferCpltCallback;
90001a36:	480f      	ldr	r0, [pc, #60]	; (90001a74 <_ZN8STM32DMA10initializeEv+0x48>)
    __HAL_RCC_DMA2D_CLK_ENABLE();
90001a38:	f042 0210 	orr.w	r2, r2, #16
    hdma2d.XferCpltCallback = DMA2D_XferCpltCallback;
90001a3c:	6208      	str	r0, [r1, #32]
    __HAL_RCC_DMA2D_CLK_ENABLE();
90001a3e:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
90001a42:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
90001a46:	f002 0210 	and.w	r2, r2, #16
90001a4a:	9201      	str	r2, [sp, #4]
90001a4c:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_DMA2D_FORCE_RESET();
90001a4e:	6fda      	ldr	r2, [r3, #124]	; 0x7c
90001a50:	f042 0210 	orr.w	r2, r2, #16
90001a54:	67da      	str	r2, [r3, #124]	; 0x7c
    __HAL_RCC_DMA2D_RELEASE_RESET();
90001a56:	6fda      	ldr	r2, [r3, #124]	; 0x7c
90001a58:	f022 0210 	bic.w	r2, r2, #16
90001a5c:	67da      	str	r2, [r3, #124]	; 0x7c
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
90001a5e:	4b06      	ldr	r3, [pc, #24]	; (90001a78 <_ZN8STM32DMA10initializeEv+0x4c>)
90001a60:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
90001a64:	609a      	str	r2, [r3, #8]

    /* Enable DMA2D global Interrupt */
    NVIC_EnableIRQ(DMA2D_IRQn);
}
90001a66:	b002      	add	sp, #8
90001a68:	4770      	bx	lr
90001a6a:	bf00      	nop
90001a6c:	58024400 	.word	0x58024400
90001a70:	2400ae98 	.word	0x2400ae98
90001a74:	90001e25 	.word	0x90001e25
90001a78:	e000e100 	.word	0xe000e100

90001a7c <_ZN8STM32DMA11getBlitCapsEv>:
                                       | BLIT_OP_COPY_WITH_ALPHA
                                       | BLIT_OP_COPY_ARGB8888
                                       | BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                                       | BLIT_OP_COPY_A4
                                       | BLIT_OP_COPY_A8);
}
90001a7c:	f240 30ef 	movw	r0, #1007	; 0x3ef
90001a80:	4770      	bx	lr
90001a82:	bf00      	nop

90001a84 <_ZN8STM32DMAD0Ev>:
STM32DMA::~STM32DMA()
90001a84:	4909      	ldr	r1, [pc, #36]	; (90001aac <_ZN8STM32DMAD0Ev+0x28>)
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
90001a86:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
90001a8a:	4b09      	ldr	r3, [pc, #36]	; (90001ab0 <_ZN8STM32DMAD0Ev+0x2c>)
90001a8c:	b510      	push	{r4, lr}
90001a8e:	6001      	str	r1, [r0, #0]
90001a90:	4604      	mov	r4, r0
90001a92:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
90001a96:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
90001a9a:	f3bf 8f6f 	isb	sy
}
90001a9e:	f640 51a8 	movw	r1, #3496	; 0xda8
90001aa2:	f021 f99e 	bl	90022de2 <_ZdlPvj>
90001aa6:	4620      	mov	r0, r4
90001aa8:	bd10      	pop	{r4, pc}
90001aaa:	bf00      	nop
90001aac:	90024768 	.word	0x90024768
90001ab0:	e000e100 	.word	0xe000e100

90001ab4 <_ZN8STM32DMA5startEv>:
                externalJobExecute();
            }
        }
    }

    virtual void start()
90001ab4:	b510      	push	{r4, lr}
90001ab6:	4604      	mov	r4, r0
    {
        MUTEX_LOCK(mutexIsRunning);
90001ab8:	f04f 31ff 	mov.w	r1, #4294967295
90001abc:	f8d0 0da4 	ldr.w	r0, [r0, #3492]	; 0xda4
90001ac0:	f00b fd6a 	bl	9000d598 <osMutexAcquire>
        if (!queue.isEmpty() && isAllowed && !isRunning)
90001ac4:	6860      	ldr	r0, [r4, #4]
90001ac6:	6803      	ldr	r3, [r0, #0]
90001ac8:	681b      	ldr	r3, [r3, #0]
90001aca:	4798      	blx	r3
90001acc:	b978      	cbnz	r0, 90001aee <_ZN8STM32DMA5startEv+0x3a>
90001ace:	7a63      	ldrb	r3, [r4, #9]
90001ad0:	b16b      	cbz	r3, 90001aee <_ZN8STM32DMA5startEv+0x3a>
90001ad2:	7a23      	ldrb	r3, [r4, #8]
90001ad4:	b92b      	cbnz	r3, 90001ae2 <_ZN8STM32DMA5startEv+0x2e>
        {
            started_by_external_job = false;
            execute();
90001ad6:	6822      	ldr	r2, [r4, #0]
90001ad8:	4620      	mov	r0, r4
            started_by_external_job = false;
90001ada:	f884 3da0 	strb.w	r3, [r4, #3488]	; 0xda0
            execute();
90001ade:	6a53      	ldr	r3, [r2, #36]	; 0x24
90001ae0:	4798      	blx	r3
        else if(!external_queue.is_empty() && !isRunning)
        {
            started_by_external_job = true;
            externalJobExecute();
        }
        MUTEX_UNLOCK(mutexIsRunning);
90001ae2:	f8d4 0da4 	ldr.w	r0, [r4, #3492]	; 0xda4
    }
90001ae6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        MUTEX_UNLOCK(mutexIsRunning);
90001aea:	f00b bd79 	b.w	9000d5e0 <osMutexRelease>
      return count_ == 0;
90001aee:	4b0b      	ldr	r3, [pc, #44]	; (90001b1c <_ZN8STM32DMA5startEv+0x68>)
        else if(!external_queue.is_empty() && !isRunning)
90001af0:	68da      	ldr	r2, [r3, #12]
90001af2:	2a00      	cmp	r2, #0
90001af4:	d0f5      	beq.n	90001ae2 <_ZN8STM32DMA5startEv+0x2e>
90001af6:	7a22      	ldrb	r2, [r4, #8]
90001af8:	2a00      	cmp	r2, #0
90001afa:	d1f2      	bne.n	90001ae2 <_ZN8STM32DMA5startEv+0x2e>
      return buffer_[head_];
90001afc:	6858      	ldr	r0, [r3, #4]
            started_by_external_job = true;
90001afe:	2201      	movs	r2, #1
      return buffer_[head_];
90001b00:	3002      	adds	r0, #2
            started_by_external_job = true;
90001b02:	f884 2da0 	strb.w	r2, [r4, #3488]	; 0xda0
     *
     * @param None
     */
    void externalJobExecute()
    {
        isRunning = true;
90001b06:	7222      	strb	r2, [r4, #8]
        External_DMA2D_JobTypeDef& job = external_queue.front();
        DMA2D_CopyBuffer(job);
90001b08:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
90001b0c:	f7ff fe9e 	bl	9000184c <DMA2D_CopyBuffer>
        MUTEX_UNLOCK(mutexIsRunning);
90001b10:	f8d4 0da4 	ldr.w	r0, [r4, #3492]	; 0xda4
    }
90001b14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        MUTEX_UNLOCK(mutexIsRunning);
90001b18:	f00b bd62 	b.w	9000d5e0 <osMutexRelease>
90001b1c:	24005bb4 	.word	0x24005bb4

90001b20 <_ZN8STM32DMA18signalDMAInterruptEv>:
    virtual void signalDMAInterrupt()
90001b20:	b538      	push	{r3, r4, r5, lr}
        if(started_by_external_job)
90001b22:	f890 3da0 	ldrb.w	r3, [r0, #3488]	; 0xda0
    virtual void signalDMAInterrupt()
90001b26:	4604      	mov	r4, r0
        if(started_by_external_job)
90001b28:	b943      	cbnz	r3, 90001b3c <_ZN8STM32DMA18signalDMAInterruptEv+0x1c>
            executeCompleted();
90001b2a:	6803      	ldr	r3, [r0, #0]
90001b2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
90001b2e:	4798      	blx	r3
      return count_ == 0;
90001b30:	4b15      	ldr	r3, [pc, #84]	; (90001b88 <_ZN8STM32DMA18signalDMAInterruptEv+0x68>)
            if(!external_queue.is_empty() && !isRunning)
90001b32:	68da      	ldr	r2, [r3, #12]
90001b34:	b10a      	cbz	r2, 90001b3a <_ZN8STM32DMA18signalDMAInterruptEv+0x1a>
90001b36:	7a22      	ldrb	r2, [r4, #8]
90001b38:	b1d2      	cbz	r2, 90001b70 <_ZN8STM32DMA18signalDMAInterruptEv+0x50>
    }
90001b3a:	bd38      	pop	{r3, r4, r5, pc}
      return count_ == 0;
90001b3c:	4b12      	ldr	r3, [pc, #72]	; (90001b88 <_ZN8STM32DMA18signalDMAInterruptEv+0x68>)
90001b3e:	68da      	ldr	r2, [r3, #12]
        if(!external_queue.is_empty() && isRunning)
90001b40:	2a00      	cmp	r2, #0
90001b42:	d0fa      	beq.n	90001b3a <_ZN8STM32DMA18signalDMAInterruptEv+0x1a>
90001b44:	7a01      	ldrb	r1, [r0, #8]
90001b46:	2900      	cmp	r1, #0
90001b48:	d0f7      	beq.n	90001b3a <_ZN8STM32DMA18signalDMAInterruptEv+0x1a>
            isRunning = false;
90001b4a:	2100      	movs	r1, #0
      count_--;
90001b4c:	3a01      	subs	r2, #1
      head_ = (head_ + 1) % max_size_;
90001b4e:	e9d3 5000 	ldrd	r5, r0, [r3]
            isRunning = false;
90001b52:	7221      	strb	r1, [r4, #8]
      head_ = (head_ + 1) % max_size_;
90001b54:	1c41      	adds	r1, r0, #1
      count_--;
90001b56:	60da      	str	r2, [r3, #12]
      return buffer_[head_];
90001b58:	3002      	adds	r0, #2
      head_ = (head_ + 1) % max_size_;
90001b5a:	fbb1 f2f5 	udiv	r2, r1, r5
90001b5e:	fb05 1112 	mls	r1, r5, r2, r1
            DMA2D_ExternalJobCompleted(completed_job);
90001b62:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
      head_ = (head_ + 1) % max_size_;
90001b66:	6059      	str	r1, [r3, #4]
    }
90001b68:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
            DMA2D_ExternalJobCompleted(completed_job);
90001b6c:	f7ff beb2 	b.w	900018d4 <DMA2D_ExternalJobCompleted>
      return buffer_[head_];
90001b70:	6858      	ldr	r0, [r3, #4]
                started_by_external_job = true;
90001b72:	2201      	movs	r2, #1
      return buffer_[head_];
90001b74:	3002      	adds	r0, #2
                started_by_external_job = true;
90001b76:	f884 2da0 	strb.w	r2, [r4, #3488]	; 0xda0
        isRunning = true;
90001b7a:	7222      	strb	r2, [r4, #8]
        DMA2D_CopyBuffer(job);
90001b7c:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    }
90001b80:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        DMA2D_CopyBuffer(job);
90001b84:	f7ff be62 	b.w	9000184c <DMA2D_CopyBuffer>
90001b88:	24005bb4 	.word	0x24005bb4

90001b8c <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE>:
 * void STM32DMA::setupDataFill(const BlitOp& blitOp) handles blit operation of
 * BLIT_OP_FILL
 * BLIT_OP_FILL_WITH_ALPHA
 */
void STM32DMA::setupDataFill(const BlitOp& blitOp)
{
90001b8c:	b538      	push	{r3, r4, r5, lr}
    switch (format)
90001b8e:	7f8b      	ldrb	r3, [r1, #30]
90001b90:	2b0a      	cmp	r3, #10
90001b92:	d83e      	bhi.n	90001c12 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x86>
90001b94:	e8df f003 	tbb	[pc, r3]
90001b98:	3d2a063b 	.word	0x3d2a063b
90001b9c:	063d3d3d 	.word	0x063d3d3d
90001ba0:	0606      	.short	0x0606
90001ba2:	06          	.byte	0x06
90001ba3:	00          	.byte	0x00
90001ba4:	2401      	movs	r4, #1

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
90001ba6:	f8b1 c014 	ldrh.w	ip, [r1, #20]
90001baa:	8ac8      	ldrh	r0, [r1, #22]

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));

    /* DMA2D OOR register configuration */
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
90001bac:	8b4a      	ldrh	r2, [r1, #26]
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
90001bae:	4b1c      	ldr	r3, [pc, #112]	; (90001c20 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x94>)
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
90001bb0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
90001bb4:	eba2 020c 	sub.w	r2, r2, ip
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
90001bb8:	635c      	str	r4, [r3, #52]	; 0x34
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
90001bba:	6458      	str	r0, [r3, #68]	; 0x44
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
90001bbc:	6908      	ldr	r0, [r1, #16]
90001bbe:	63d8      	str	r0, [r3, #60]	; 0x3c
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
90001bc0:	641a      	str	r2, [r3, #64]	; 0x40

    if (blitOp.operation == BLIT_OP_FILL_WITH_ALPHA)
90001bc2:	680d      	ldr	r5, [r1, #0]
90001bc4:	2d08      	cmp	r5, #8
90001bc6:	d013      	beq.n	90001bf0 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x64>
    {
        /* Write DMA2D FGPFCCR register */
        WRITE_REG(DMA2D->FGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_FGPFCCR_AM_Pos));

        /* DMA2D FGOR register configuration */
        WRITE_REG(DMA2D->FGOR, 0);
90001bc8:	2200      	movs	r2, #0
        WRITE_REG(DMA2D->FGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_FGPFCCR_AM_Pos));
90001bca:	61dc      	str	r4, [r3, #28]

        /* Set color */
        WRITE_REG(DMA2D->OCOLR, ((blitOp.color >> 8) & 0xF800) | ((blitOp.color >> 5) & 0x07E0) | ((blitOp.color >> 3) & 0x001F));

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
90001bcc:	4c15      	ldr	r4, [pc, #84]	; (90001c24 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x98>)
        WRITE_REG(DMA2D->FGOR, 0);
90001bce:	611a      	str	r2, [r3, #16]
     *
     * @return The result of the operation.
     */
    operator uint32_t() const
    {
        return color;
90001bd0:	68c9      	ldr	r1, [r1, #12]
        WRITE_REG(DMA2D->OCOLR, ((blitOp.color >> 8) & 0xF800) | ((blitOp.color >> 5) & 0x07E0) | ((blitOp.color >> 3) & 0x001F));
90001bd2:	0a0a      	lsrs	r2, r1, #8
90001bd4:	0948      	lsrs	r0, r1, #5
90001bd6:	f3c1 01c4 	ubfx	r1, r1, #3, #5
90001bda:	f402 4278 	and.w	r2, r2, #63488	; 0xf800
90001bde:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
90001be2:	4302      	orrs	r2, r0
90001be4:	430a      	orrs	r2, r1
90001be6:	639a      	str	r2, [r3, #56]	; 0x38
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
90001be8:	601c      	str	r4, [r3, #0]
    }
}
90001bea:	bd38      	pop	{r3, r4, r5, pc}
        dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
90001bec:	2400      	movs	r4, #0
90001bee:	e7da      	b.n	90001ba6 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1a>
        WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
90001bf0:	619a      	str	r2, [r3, #24]
        WRITE_REG(DMA2D->FGOR, blitOp.dstLoopStride - blitOp.nSteps);
90001bf2:	611a      	str	r2, [r3, #16]
        WRITE_REG(DMA2D->BGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
90001bf4:	625c      	str	r4, [r3, #36]	; 0x24
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | ((blitOp.alpha << 24) & DMA2D_FGPFCCR_ALPHA));
90001bf6:	4a0c      	ldr	r2, [pc, #48]	; (90001c28 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x9c>)
90001bf8:	7f0c      	ldrb	r4, [r1, #28]
90001bfa:	ea42 6204 	orr.w	r2, r2, r4, lsl #24
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_M2M_BLEND));
90001bfe:	4c0b      	ldr	r4, [pc, #44]	; (90001c2c <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xa0>)
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | ((blitOp.alpha << 24) & DMA2D_FGPFCCR_ALPHA));
90001c00:	61da      	str	r2, [r3, #28]
90001c02:	68ca      	ldr	r2, [r1, #12]
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
90001c04:	621a      	str	r2, [r3, #32]
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
90001c06:	6158      	str	r0, [r3, #20]
        WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
90001c08:	60d8      	str	r0, [r3, #12]
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_M2M_BLEND));
90001c0a:	601c      	str	r4, [r3, #0]
}
90001c0c:	bd38      	pop	{r3, r4, r5, pc}
        dma2dColorMode = DMA2D_OUTPUT_RGB565;
90001c0e:	2402      	movs	r4, #2
90001c10:	e7c9      	b.n	90001ba6 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1a>
        assert(0 && "Unsupported Format!");
90001c12:	4b07      	ldr	r3, [pc, #28]	; (90001c30 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xa4>)
90001c14:	2188      	movs	r1, #136	; 0x88
90001c16:	4a07      	ldr	r2, [pc, #28]	; (90001c34 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xa8>)
90001c18:	4807      	ldr	r0, [pc, #28]	; (90001c38 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xac>)
90001c1a:	f021 f911 	bl	90022e40 <__assert_func>
90001c1e:	bf00      	nop
90001c20:	52001000 	.word	0x52001000
90001c24:	00030201 	.word	0x00030201
90001c28:	00010009 	.word	0x00010009
90001c2c:	00020201 	.word	0x00020201
90001c30:	90024600 	.word	0x90024600
90001c34:	9002461c 	.word	0x9002461c
90001c38:	90024668 	.word	0x90024668

90001c3c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE>:
{
90001c3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
90001c3e:	f891 e01d 	ldrb.w	lr, [r1, #29]
    switch (format)
90001c42:	f1be 0f0b 	cmp.w	lr, #11
90001c46:	f200 80c1 	bhi.w	90001dcc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x190>
90001c4a:	e8df f01e 	tbh	[pc, lr, lsl #1]
90001c4e:	0063      	.short	0x0063
90001c50:	004c0065 	.word	0x004c0065
90001c54:	00bf00bf 	.word	0x00bf00bf
90001c58:	00bf00bf 	.word	0x00bf00bf
90001c5c:	000c000c 	.word	0x000c000c
90001c60:	000c000c 	.word	0x000c000c
90001c64:	000c      	.short	0x000c
        dma2dColorMode = DMA2D_INPUT_L8;
90001c66:	2505      	movs	r5, #5
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
90001c68:	f891 c01e 	ldrb.w	ip, [r1, #30]
    switch (format)
90001c6c:	f1bc 0f0b 	cmp.w	ip, #11
90001c70:	f200 80ac 	bhi.w	90001dcc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x190>
90001c74:	e8df f00c 	tbb	[pc, ip]
90001c78:	aa0e4b52 	.word	0xaa0e4b52
90001c7c:	06aaaaaa 	.word	0x06aaaaaa
90001c80:	06060606 	.word	0x06060606
    switch (format)
90001c84:	f1ac 0307 	sub.w	r3, ip, #7
90001c88:	2b03      	cmp	r3, #3
90001c8a:	f200 80a5 	bhi.w	90001dd8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x19c>
90001c8e:	2605      	movs	r6, #5
90001c90:	2701      	movs	r7, #1
90001c92:	e001      	b.n	90001c98 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x5c>
        dma2dColorMode = DMA2D_INPUT_ARGB8888;
90001c94:	2600      	movs	r6, #0
        dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
90001c96:	4637      	mov	r7, r6
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
90001c98:	8a8b      	ldrh	r3, [r1, #20]
90001c9a:	8b4a      	ldrh	r2, [r1, #26]
    WRITE_REG(DMA2D->FGOR, blitOp.srcLoopStride - blitOp.nSteps);
90001c9c:	8b0c      	ldrh	r4, [r1, #24]
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
90001c9e:	8ac8      	ldrh	r0, [r1, #22]
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
90001ca0:	1ad2      	subs	r2, r2, r3
    WRITE_REG(DMA2D->FGOR, blitOp.srcLoopStride - blitOp.nSteps);
90001ca2:	1ae4      	subs	r4, r4, r3
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
90001ca4:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
90001ca8:	4b52      	ldr	r3, [pc, #328]	; (90001df4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1b8>)
90001caa:	641a      	str	r2, [r3, #64]	; 0x40
    WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
90001cac:	619a      	str	r2, [r3, #24]
    WRITE_REG(DMA2D->FGOR, blitOp.srcLoopStride - blitOp.nSteps);
90001cae:	611c      	str	r4, [r3, #16]
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pSrc));
90001cb0:	684a      	ldr	r2, [r1, #4]
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
90001cb2:	635f      	str	r7, [r3, #52]	; 0x34
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
90001cb4:	6458      	str	r0, [r3, #68]	; 0x44
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
90001cb6:	6908      	ldr	r0, [r1, #16]
90001cb8:	63d8      	str	r0, [r3, #60]	; 0x3c
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pSrc));
90001cba:	60da      	str	r2, [r3, #12]
    switch (blitOp.operation)
90001cbc:	680a      	ldr	r2, [r1, #0]
90001cbe:	2a80      	cmp	r2, #128	; 0x80
90001cc0:	d03b      	beq.n	90001d3a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xfe>
90001cc2:	d812      	bhi.n	90001cea <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xae>
90001cc4:	2a20      	cmp	r2, #32
90001cc6:	d02c      	beq.n	90001d22 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xe6>
90001cc8:	2a40      	cmp	r2, #64	; 0x40
90001cca:	d02a      	beq.n	90001d22 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xe6>
90001ccc:	2a04      	cmp	r2, #4
90001cce:	d169      	bne.n	90001da4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x168>
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
90001cd0:	7f0a      	ldrb	r2, [r1, #28]
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
90001cd2:	4949      	ldr	r1, [pc, #292]	; (90001df8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1bc>)
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
90001cd4:	ea45 6202 	orr.w	r2, r5, r2, lsl #24
90001cd8:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
90001cdc:	61da      	str	r2, [r3, #28]
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
90001cde:	625e      	str	r6, [r3, #36]	; 0x24
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
90001ce0:	6158      	str	r0, [r3, #20]
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
90001ce2:	6019      	str	r1, [r3, #0]
}
90001ce4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        dma2dColorMode = DMA2D_INPUT_ARGB8888;
90001ce6:	2500      	movs	r5, #0
90001ce8:	e7be      	b.n	90001c68 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2c>
    switch (blitOp.operation)
90001cea:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
90001cee:	d067      	beq.n	90001dc0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x184>
90001cf0:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
90001cf4:	d156      	bne.n	90001da4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x168>
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
90001cf6:	7f0c      	ldrb	r4, [r1, #28]
90001cf8:	4a40      	ldr	r2, [pc, #256]	; (90001dfc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1c0>)
90001cfa:	ea42 6204 	orr.w	r2, r2, r4, lsl #24
90001cfe:	61da      	str	r2, [r3, #28]
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
90001d00:	4a3d      	ldr	r2, [pc, #244]	; (90001df8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1bc>)
90001d02:	68c9      	ldr	r1, [r1, #12]
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
90001d04:	6219      	str	r1, [r3, #32]
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
90001d06:	625e      	str	r6, [r3, #36]	; 0x24
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
90001d08:	6158      	str	r0, [r3, #20]
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
90001d0a:	601a      	str	r2, [r3, #0]
}
90001d0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    switch (format)
90001d0e:	2601      	movs	r6, #1
90001d10:	4637      	mov	r7, r6
90001d12:	e7c1      	b.n	90001c98 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x5c>
90001d14:	2502      	movs	r5, #2
90001d16:	e7a7      	b.n	90001c68 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2c>
        dma2dColorMode = DMA2D_INPUT_RGB888;
90001d18:	2501      	movs	r5, #1
90001d1a:	e7a5      	b.n	90001c68 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2c>
        dma2dColorMode = DMA2D_INPUT_RGB565;
90001d1c:	2602      	movs	r6, #2
        dma2dColorMode = DMA2D_OUTPUT_RGB565;
90001d1e:	4637      	mov	r7, r6
90001d20:	e7ba      	b.n	90001c98 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x5c>
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
90001d22:	7f0b      	ldrb	r3, [r1, #28]
90001d24:	4a33      	ldr	r2, [pc, #204]	; (90001df4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1b8>)
90001d26:	ea45 6303 	orr.w	r3, r5, r3, lsl #24
90001d2a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
90001d2e:	61d3      	str	r3, [r2, #28]
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
90001d30:	4b31      	ldr	r3, [pc, #196]	; (90001df8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1bc>)
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
90001d32:	6256      	str	r6, [r2, #36]	; 0x24
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
90001d34:	6150      	str	r0, [r2, #20]
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
90001d36:	6013      	str	r3, [r2, #0]
}
90001d38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            const clutData_t* const palette = reinterpret_cast<const clutData_t*>(blitOp.pClut);
90001d3a:	688a      	ldr	r2, [r1, #8]
            WRITE_REG(DMA2D->FGCMAR, reinterpret_cast<uint32_t>(&palette->data));
90001d3c:	1d14      	adds	r4, r2, #4
90001d3e:	62dc      	str	r4, [r3, #44]	; 0x2c
            WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
90001d40:	7f0c      	ldrb	r4, [r1, #28]
            switch ((Bitmap::ClutFormat)palette->format)
90001d42:	7811      	ldrb	r1, [r2, #0]
            WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
90001d44:	ea45 6504 	orr.w	r5, r5, r4, lsl #24
90001d48:	f445 3500 	orr.w	r5, r5, #131072	; 0x20000
90001d4c:	61dd      	str	r5, [r3, #28]
            WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
90001d4e:	625e      	str	r6, [r3, #36]	; 0x24
            WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
90001d50:	6158      	str	r0, [r3, #20]
            switch ((Bitmap::ClutFormat)palette->format)
90001d52:	b9b1      	cbnz	r1, 90001d82 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x146>
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_ARGB8888 << DMA2D_FGPFCCR_CCM_Pos)));
90001d54:	8851      	ldrh	r1, [r2, #2]
            bool blend = true;
90001d56:	2401      	movs	r4, #1
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_ARGB8888 << DMA2D_FGPFCCR_CCM_Pos)));
90001d58:	69d8      	ldr	r0, [r3, #28]
90001d5a:	4a29      	ldr	r2, [pc, #164]	; (90001e00 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1c4>)
90001d5c:	3901      	subs	r1, #1
90001d5e:	4002      	ands	r2, r0
90001d60:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
90001d64:	61da      	str	r2, [r3, #28]
            SET_BIT(DMA2D->FGPFCCR, DMA2D_FGPFCCR_START);
90001d66:	4a23      	ldr	r2, [pc, #140]	; (90001df4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1b8>)
90001d68:	69d3      	ldr	r3, [r2, #28]
90001d6a:	f043 0320 	orr.w	r3, r3, #32
90001d6e:	61d3      	str	r3, [r2, #28]
            while ((READ_REG(DMA2D->FGPFCCR) & DMA2D_FGPFCCR_START) != 0U)
90001d70:	69d3      	ldr	r3, [r2, #28]
90001d72:	069b      	lsls	r3, r3, #26
90001d74:	d4fc      	bmi.n	90001d70 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x134>
            DMA2D->IFCR = (DMA2D_FLAG_CTC);
90001d76:	2310      	movs	r3, #16
90001d78:	6093      	str	r3, [r2, #8]
            if(blend)
90001d7a:	b324      	cbz	r4, 90001dc6 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x18a>
                WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
90001d7c:	4b1e      	ldr	r3, [pc, #120]	; (90001df8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1bc>)
90001d7e:	6013      	str	r3, [r2, #0]
}
90001d80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
90001d82:	2901      	cmp	r1, #1
90001d84:	d12e      	bne.n	90001de4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1a8>
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
90001d86:	8851      	ldrh	r1, [r2, #2]
                if(blitOp.alpha == 255)
90001d88:	3cff      	subs	r4, #255	; 0xff
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
90001d8a:	69d8      	ldr	r0, [r3, #28]
90001d8c:	4a1c      	ldr	r2, [pc, #112]	; (90001e00 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1c4>)
90001d8e:	f101 31ff 	add.w	r1, r1, #4294967295
                if(blitOp.alpha == 255)
90001d92:	bf18      	it	ne
90001d94:	2401      	movne	r4, #1
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
90001d96:	4002      	ands	r2, r0
90001d98:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
90001d9c:	f042 0210 	orr.w	r2, r2, #16
90001da0:	61da      	str	r2, [r3, #28]
                break;
90001da2:	e7e0      	b.n	90001d66 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x12a>
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
90001da4:	7f0a      	ldrb	r2, [r1, #28]
        if (blitOp.srcFormat != blitOp.dstFormat)
90001da6:	45e6      	cmp	lr, ip
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
90001da8:	4b12      	ldr	r3, [pc, #72]	; (90001df4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1b8>)
90001daa:	ea45 6502 	orr.w	r5, r5, r2, lsl #24
            WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
90001dae:	bf14      	ite	ne
90001db0:	4a14      	ldrne	r2, [pc, #80]	; (90001e04 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1c8>)
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
90001db2:	f240 2201 	movweq	r2, #513	; 0x201
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
90001db6:	f445 3500 	orr.w	r5, r5, #131072	; 0x20000
90001dba:	61dd      	str	r5, [r3, #28]
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
90001dbc:	601a      	str	r2, [r3, #0]
}
90001dbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A4 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
90001dc0:	7f0c      	ldrb	r4, [r1, #28]
90001dc2:	4a11      	ldr	r2, [pc, #68]	; (90001e08 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1cc>)
90001dc4:	e799      	b.n	90001cfa <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xbe>
                WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
90001dc6:	4b0f      	ldr	r3, [pc, #60]	; (90001e04 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1c8>)
90001dc8:	6013      	str	r3, [r2, #0]
}
90001dca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        assert(0 && "Unsupported Format!");
90001dcc:	4b0f      	ldr	r3, [pc, #60]	; (90001e0c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1d0>)
90001dce:	2167      	movs	r1, #103	; 0x67
90001dd0:	4a0f      	ldr	r2, [pc, #60]	; (90001e10 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1d4>)
90001dd2:	4810      	ldr	r0, [pc, #64]	; (90001e14 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1d8>)
90001dd4:	f021 f834 	bl	90022e40 <__assert_func>
        assert(0 && "Unsupported Format!");
90001dd8:	4b0c      	ldr	r3, [pc, #48]	; (90001e0c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1d0>)
90001dda:	2188      	movs	r1, #136	; 0x88
90001ddc:	4a0e      	ldr	r2, [pc, #56]	; (90001e18 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1dc>)
90001dde:	480d      	ldr	r0, [pc, #52]	; (90001e14 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1d8>)
90001de0:	f021 f82e 	bl	90022e40 <__assert_func>
                assert(0 && "Unsupported format");
90001de4:	4b0d      	ldr	r3, [pc, #52]	; (90001e1c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1e0>)
90001de6:	f44f 7189 	mov.w	r1, #274	; 0x112
90001dea:	4a0d      	ldr	r2, [pc, #52]	; (90001e20 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1e4>)
90001dec:	4809      	ldr	r0, [pc, #36]	; (90001e14 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1d8>)
90001dee:	f021 f827 	bl	90022e40 <__assert_func>
90001df2:	bf00      	nop
90001df4:	52001000 	.word	0x52001000
90001df8:	00020201 	.word	0x00020201
90001dfc:	00020009 	.word	0x00020009
90001e00:	ffff00ef 	.word	0xffff00ef
90001e04:	00010201 	.word	0x00010201
90001e08:	0002000a 	.word	0x0002000a
90001e0c:	90024600 	.word	0x90024600
90001e10:	900246b8 	.word	0x900246b8
90001e14:	90024668 	.word	0x90024668
90001e18:	9002461c 	.word	0x9002461c
90001e1c:	90024704 	.word	0x90024704
90001e20:	90024720 	.word	0x90024720

90001e24 <DMA2D_XferCpltCallback>:
        dma.signalDMAInterrupt();
90001e24:	4b1f      	ldr	r3, [pc, #124]	; (90001ea4 <DMA2D_XferCpltCallback+0x80>)
90001e26:	4920      	ldr	r1, [pc, #128]	; (90001ea8 <DMA2D_XferCpltCallback+0x84>)
90001e28:	681b      	ldr	r3, [r3, #0]
    {
90001e2a:	b570      	push	{r4, r5, r6, lr}
90001e2c:	685c      	ldr	r4, [r3, #4]
90001e2e:	6823      	ldr	r3, [r4, #0]
90001e30:	695a      	ldr	r2, [r3, #20]
90001e32:	428a      	cmp	r2, r1
90001e34:	d125      	bne.n	90001e82 <DMA2D_XferCpltCallback+0x5e>
        if(started_by_external_job)
90001e36:	f894 2da0 	ldrb.w	r2, [r4, #3488]	; 0xda0
90001e3a:	b942      	cbnz	r2, 90001e4e <DMA2D_XferCpltCallback+0x2a>
            executeCompleted();
90001e3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
90001e3e:	4620      	mov	r0, r4
90001e40:	4798      	blx	r3
      return count_ == 0;
90001e42:	4b1a      	ldr	r3, [pc, #104]	; (90001eac <DMA2D_XferCpltCallback+0x88>)
            if(!external_queue.is_empty() && !isRunning)
90001e44:	68da      	ldr	r2, [r3, #12]
90001e46:	b10a      	cbz	r2, 90001e4c <DMA2D_XferCpltCallback+0x28>
90001e48:	7a22      	ldrb	r2, [r4, #8]
90001e4a:	b1f2      	cbz	r2, 90001e8a <DMA2D_XferCpltCallback+0x66>
    }
90001e4c:	bd70      	pop	{r4, r5, r6, pc}
      return count_ == 0;
90001e4e:	4b17      	ldr	r3, [pc, #92]	; (90001eac <DMA2D_XferCpltCallback+0x88>)
90001e50:	68da      	ldr	r2, [r3, #12]
        if(!external_queue.is_empty() && isRunning)
90001e52:	2a00      	cmp	r2, #0
90001e54:	d0fa      	beq.n	90001e4c <DMA2D_XferCpltCallback+0x28>
90001e56:	7a21      	ldrb	r1, [r4, #8]
90001e58:	2900      	cmp	r1, #0
90001e5a:	d0f7      	beq.n	90001e4c <DMA2D_XferCpltCallback+0x28>
            isRunning = false;
90001e5c:	2100      	movs	r1, #0
      count_--;
90001e5e:	3a01      	subs	r2, #1
      head_ = (head_ + 1) % max_size_;
90001e60:	e9d3 5000 	ldrd	r5, r0, [r3]
            isRunning = false;
90001e64:	7221      	strb	r1, [r4, #8]
      head_ = (head_ + 1) % max_size_;
90001e66:	1c41      	adds	r1, r0, #1
      count_--;
90001e68:	60da      	str	r2, [r3, #12]
      return buffer_[head_];
90001e6a:	3002      	adds	r0, #2
      head_ = (head_ + 1) % max_size_;
90001e6c:	fbb1 f2f5 	udiv	r2, r1, r5
90001e70:	fb05 1112 	mls	r1, r5, r2, r1
            DMA2D_ExternalJobCompleted(completed_job);
90001e74:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
90001e78:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      head_ = (head_ + 1) % max_size_;
90001e7c:	6059      	str	r1, [r3, #4]
            DMA2D_ExternalJobCompleted(completed_job);
90001e7e:	f7ff bd29 	b.w	900018d4 <DMA2D_ExternalJobCompleted>
90001e82:	4620      	mov	r0, r4
90001e84:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
90001e88:	4710      	bx	r2
      return buffer_[head_];
90001e8a:	6858      	ldr	r0, [r3, #4]
                started_by_external_job = true;
90001e8c:	2201      	movs	r2, #1
      return buffer_[head_];
90001e8e:	3002      	adds	r0, #2
                started_by_external_job = true;
90001e90:	f884 2da0 	strb.w	r2, [r4, #3488]	; 0xda0
        isRunning = true;
90001e94:	7222      	strb	r2, [r4, #8]
        DMA2D_CopyBuffer(job);
90001e96:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
90001e9a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
90001e9e:	f7ff bcd5 	b.w	9000184c <DMA2D_CopyBuffer>
90001ea2:	bf00      	nop
90001ea4:	24026264 	.word	0x24026264
90001ea8:	90001b21 	.word	0x90001b21
90001eac:	24005bb4 	.word	0x24005bb4

90001eb0 <_ZN8STM32DMAC1Ev>:
STM32DMA::STM32DMA()
90001eb0:	b570      	push	{r4, r5, r6, lr}
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0])), started_by_external_job(false), mutexIsRunning(0)
90001eb2:	4b10      	ldr	r3, [pc, #64]	; (90001ef4 <_ZN8STM32DMAC1Ev+0x44>)
STM32DMA::STM32DMA()
90001eb4:	4606      	mov	r6, r0
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0])), started_by_external_job(false), mutexIsRunning(0)
90001eb6:	4604      	mov	r4, r0
     * Constructs a DMA Interface object.
     *
     * @param [in] dmaQueue Reference to the queue of DMA operations.
     */
    DMA_Interface(DMA_Queue& dmaQueue)
        : queue(dmaQueue), isRunning(false), isAllowed(false)
90001eb8:	2500      	movs	r5, #0
90001eba:	300c      	adds	r0, #12
90001ebc:	2260      	movs	r2, #96	; 0x60
90001ebe:	7235      	strb	r5, [r6, #8]
90001ec0:	7275      	strb	r5, [r6, #9]
90001ec2:	6070      	str	r0, [r6, #4]
90001ec4:	f844 3b20 	str.w	r3, [r4], #32
90001ec8:	4621      	mov	r1, r4
90001eca:	f010 fa7f 	bl	900123cc <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>
90001ece:	4621      	mov	r1, r4
90001ed0:	f506 635a 	add.w	r3, r6, #3488	; 0xda0
        : color(0)
90001ed4:	60cd      	str	r5, [r1, #12]
90001ed6:	3124      	adds	r1, #36	; 0x24
90001ed8:	428b      	cmp	r3, r1
90001eda:	d1fb      	bne.n	90001ed4 <_ZN8STM32DMAC1Ev+0x24>
90001edc:	f886 5da0 	strb.w	r5, [r6, #3488]	; 0xda0
    mutexIsRunning = MUTEX_CREATE();
90001ee0:	2000      	movs	r0, #0
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0])), started_by_external_job(false), mutexIsRunning(0)
90001ee2:	f8c6 5da4 	str.w	r5, [r6, #3492]	; 0xda4
    mutexIsRunning = MUTEX_CREATE();
90001ee6:	f00b fb17 	bl	9000d518 <osMutexNew>
90001eea:	4603      	mov	r3, r0
}
90001eec:	4630      	mov	r0, r6
    mutexIsRunning = MUTEX_CREATE();
90001eee:	f8c6 3da4 	str.w	r3, [r6, #3492]	; 0xda4
}
90001ef2:	bd70      	pop	{r4, r5, r6, pc}
90001ef4:	90024768 	.word	0x90024768

90001ef8 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    };

    virtual uint16_t capacity() const
    {
        return NUMBER_OF_ELEMENTS;
    }
90001ef8:	2001      	movs	r0, #1
90001efa:	4770      	bx	lr

90001efc <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:

    virtual uint32_t element_size()
    {
        return sizeof(stBlocks[0]);
    }
90001efc:	200c      	movs	r0, #12
90001efe:	4770      	bx	lr

90001f00 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

protected:
    virtual void* element(uint16_t index)
    {
        return &stBlocks[index];
90001f00:	eb01 0141 	add.w	r1, r1, r1, lsl #1
90001f04:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    }
90001f08:	3008      	adds	r0, #8
90001f0a:	4770      	bx	lr

90001f0c <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

    virtual const void* element(uint16_t index) const
    {
        return &stBlocks[index];
90001f0c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
90001f10:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    }
90001f14:	3008      	adds	r0, #8
90001f16:	4770      	bx	lr

90001f18 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    }
90001f18:	2001      	movs	r0, #1
90001f1a:	4770      	bx	lr

90001f1c <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    }
90001f1c:	20ec      	movs	r0, #236	; 0xec
90001f1e:	4770      	bx	lr

90001f20 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
90001f20:	23ec      	movs	r3, #236	; 0xec
90001f22:	fb03 0001 	mla	r0, r3, r1, r0
    }
90001f26:	3008      	adds	r0, #8
90001f28:	4770      	bx	lr
90001f2a:	bf00      	nop

90001f2c <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
90001f2c:	23ec      	movs	r3, #236	; 0xec
90001f2e:	fb03 0001 	mla	r0, r3, r1, r0
    }
90001f32:	3008      	adds	r0, #8
90001f34:	4770      	bx	lr
90001f36:	bf00      	nop

90001f38 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    }
90001f38:	2001      	movs	r0, #1
90001f3a:	4770      	bx	lr

90001f3c <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    }
90001f3c:	2010      	movs	r0, #16
90001f3e:	4770      	bx	lr

90001f40 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
90001f40:	eb00 1001 	add.w	r0, r0, r1, lsl #4
    }
90001f44:	3008      	adds	r0, #8
90001f46:	4770      	bx	lr

90001f48 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
90001f48:	eb00 1001 	add.w	r0, r0, r1, lsl #4
    }
90001f4c:	3008      	adds	r0, #8
90001f4e:	4770      	bx	lr

90001f50 <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>:
     */
    typedef touchgfx::meta::select_type_maxsize< GeneratedTransitionTypes >::type MaxGeneratedTransitionType;

    virtual void gotoStartScreen(FrontendApplication& app)
    {
        app.gotoScreen1ScreenNoTransition();
90001f50:	4608      	mov	r0, r1
90001f52:	f003 b8cd 	b.w	900050f0 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>
90001f56:	bf00      	nop

90001f58 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>:
class Partition : public AbstractPartition
90001f58:	4b03      	ldr	r3, [pc, #12]	; (90001f68 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
90001f5a:	b510      	push	{r4, lr}
90001f5c:	4604      	mov	r4, r0
90001f5e:	6003      	str	r3, [r0, #0]
90001f60:	f00f f89f 	bl	900110a2 <_ZN8touchgfx17AbstractPartitionD1Ev>
90001f64:	4620      	mov	r0, r4
90001f66:	bd10      	pop	{r4, pc}
90001f68:	90024820 	.word	0x90024820

90001f6c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED0Ev>:
90001f6c:	4b05      	ldr	r3, [pc, #20]	; (90001f84 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED0Ev+0x18>)
90001f6e:	b510      	push	{r4, lr}
90001f70:	4604      	mov	r4, r0
90001f72:	6003      	str	r3, [r0, #0]
90001f74:	f00f f895 	bl	900110a2 <_ZN8touchgfx17AbstractPartitionD1Ev>
90001f78:	2114      	movs	r1, #20
90001f7a:	4620      	mov	r0, r4
90001f7c:	f020 ff31 	bl	90022de2 <_ZdlPvj>
90001f80:	4620      	mov	r0, r4
90001f82:	bd10      	pop	{r4, pc}
90001f84:	90024820 	.word	0x90024820

90001f88 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>:
90001f88:	4b03      	ldr	r3, [pc, #12]	; (90001f98 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
90001f8a:	b510      	push	{r4, lr}
90001f8c:	4604      	mov	r4, r0
90001f8e:	6003      	str	r3, [r0, #0]
90001f90:	f00f f887 	bl	900110a2 <_ZN8touchgfx17AbstractPartitionD1Ev>
90001f94:	4620      	mov	r0, r4
90001f96:	bd10      	pop	{r4, pc}
90001f98:	900247ec 	.word	0x900247ec

90001f9c <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED0Ev>:
90001f9c:	4b05      	ldr	r3, [pc, #20]	; (90001fb4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED0Ev+0x18>)
90001f9e:	b510      	push	{r4, lr}
90001fa0:	4604      	mov	r4, r0
90001fa2:	6003      	str	r3, [r0, #0]
90001fa4:	f00f f87d 	bl	900110a2 <_ZN8touchgfx17AbstractPartitionD1Ev>
90001fa8:	21f4      	movs	r1, #244	; 0xf4
90001faa:	4620      	mov	r0, r4
90001fac:	f020 ff19 	bl	90022de2 <_ZdlPvj>
90001fb0:	4620      	mov	r0, r4
90001fb2:	bd10      	pop	{r4, pc}
90001fb4:	900247ec 	.word	0x900247ec

90001fb8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>:
90001fb8:	4b03      	ldr	r3, [pc, #12]	; (90001fc8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
90001fba:	b510      	push	{r4, lr}
90001fbc:	4604      	mov	r4, r0
90001fbe:	6003      	str	r3, [r0, #0]
90001fc0:	f00f f86f 	bl	900110a2 <_ZN8touchgfx17AbstractPartitionD1Ev>
90001fc4:	4620      	mov	r0, r4
90001fc6:	bd10      	pop	{r4, pc}
90001fc8:	900247b8 	.word	0x900247b8

90001fcc <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED0Ev>:
90001fcc:	4b05      	ldr	r3, [pc, #20]	; (90001fe4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED0Ev+0x18>)
90001fce:	b510      	push	{r4, lr}
90001fd0:	4604      	mov	r4, r0
90001fd2:	6003      	str	r3, [r0, #0]
90001fd4:	f00f f865 	bl	900110a2 <_ZN8touchgfx17AbstractPartitionD1Ev>
90001fd8:	2118      	movs	r1, #24
90001fda:	4620      	mov	r0, r4
90001fdc:	f020 ff01 	bl	90022de2 <_ZdlPvj>
90001fe0:	4620      	mov	r0, r4
90001fe2:	bd10      	pop	{r4, pc}
90001fe4:	900247b8 	.word	0x900247b8

90001fe8 <_ZN12FrontendHeapD1Ev>:
#ifndef FRONTENDHEAP_HPP
#define FRONTENDHEAP_HPP

#include <gui_generated/common/FrontendHeapBase.hpp>

class FrontendHeap : public FrontendHeapBase
90001fe8:	b510      	push	{r4, lr}
90001fea:	4a0c      	ldr	r2, [pc, #48]	; (9000201c <_ZN12FrontendHeapD1Ev+0x34>)
90001fec:	4604      	mov	r4, r0
90001fee:	4b0c      	ldr	r3, [pc, #48]	; (90002020 <_ZN12FrontendHeapD1Ev+0x38>)
90001ff0:	f500 7090 	add.w	r0, r0, #288	; 0x120
90001ff4:	6022      	str	r2, [r4, #0]
90001ff6:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
90001ffa:	f00f f852 	bl	900110a2 <_ZN8touchgfx17AbstractPartitionD1Ev>
90001ffe:	4620      	mov	r0, r4
90002000:	4b08      	ldr	r3, [pc, #32]	; (90002024 <_ZN12FrontendHeapD1Ev+0x3c>)
90002002:	f840 3f2c 	str.w	r3, [r0, #44]!
90002006:	f00f f84c 	bl	900110a2 <_ZN8touchgfx17AbstractPartitionD1Ev>
9000200a:	4620      	mov	r0, r4
9000200c:	4b06      	ldr	r3, [pc, #24]	; (90002028 <_ZN12FrontendHeapD1Ev+0x40>)
9000200e:	f840 3f14 	str.w	r3, [r0, #20]!
90002012:	f00f f846 	bl	900110a2 <_ZN8touchgfx17AbstractPartitionD1Ev>
90002016:	4620      	mov	r0, r4
90002018:	bd10      	pop	{r4, pc}
9000201a:	bf00      	nop
9000201c:	90024854 	.word	0x90024854
90002020:	90024820 	.word	0x90024820
90002024:	900247ec 	.word	0x900247ec
90002028:	900247b8 	.word	0x900247b8

9000202c <__tcf_0>:
                            > > CombinedTransitionTypes;
    typedef touchgfx::meta::select_type_maxsize< CombinedTransitionTypes >::type MaxTransitionType;

    static FrontendHeap& getInstance()
    {
        static FrontendHeap instance;
9000202c:	b510      	push	{r4, lr}
class FrontendHeap : public FrontendHeapBase
9000202e:	4c0c      	ldr	r4, [pc, #48]	; (90002060 <__tcf_0+0x34>)
90002030:	4a0c      	ldr	r2, [pc, #48]	; (90002064 <__tcf_0+0x38>)
90002032:	4b0d      	ldr	r3, [pc, #52]	; (90002068 <__tcf_0+0x3c>)
90002034:	f504 7090 	add.w	r0, r4, #288	; 0x120
90002038:	6022      	str	r2, [r4, #0]
9000203a:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
9000203e:	f00f f830 	bl	900110a2 <_ZN8touchgfx17AbstractPartitionD1Ev>
90002042:	4620      	mov	r0, r4
90002044:	4b09      	ldr	r3, [pc, #36]	; (9000206c <__tcf_0+0x40>)
90002046:	f840 3f2c 	str.w	r3, [r0, #44]!
9000204a:	f00f f82a 	bl	900110a2 <_ZN8touchgfx17AbstractPartitionD1Ev>
9000204e:	4620      	mov	r0, r4
90002050:	4b07      	ldr	r3, [pc, #28]	; (90002070 <__tcf_0+0x44>)
        static FrontendHeap instance;
90002052:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
90002056:	f840 3f14 	str.w	r3, [r0, #20]!
9000205a:	f00f b822 	b.w	900110a2 <_ZN8touchgfx17AbstractPartitionD1Ev>
9000205e:	bf00      	nop
90002060:	24005be8 	.word	0x24005be8
90002064:	90024854 	.word	0x90024854
90002068:	90024820 	.word	0x90024820
9000206c:	900247ec 	.word	0x900247ec
90002070:	900247b8 	.word	0x900247b8

90002074 <_ZN12FrontendHeapD0Ev>:
class FrontendHeap : public FrontendHeapBase
90002074:	b510      	push	{r4, lr}
90002076:	4a0e      	ldr	r2, [pc, #56]	; (900020b0 <_ZN12FrontendHeapD0Ev+0x3c>)
90002078:	4604      	mov	r4, r0
9000207a:	4b0e      	ldr	r3, [pc, #56]	; (900020b4 <_ZN12FrontendHeapD0Ev+0x40>)
9000207c:	f500 7090 	add.w	r0, r0, #288	; 0x120
90002080:	6022      	str	r2, [r4, #0]
90002082:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
90002086:	f00f f80c 	bl	900110a2 <_ZN8touchgfx17AbstractPartitionD1Ev>
9000208a:	4620      	mov	r0, r4
9000208c:	4b0a      	ldr	r3, [pc, #40]	; (900020b8 <_ZN12FrontendHeapD0Ev+0x44>)
9000208e:	f840 3f2c 	str.w	r3, [r0, #44]!
90002092:	f00f f806 	bl	900110a2 <_ZN8touchgfx17AbstractPartitionD1Ev>
90002096:	4b09      	ldr	r3, [pc, #36]	; (900020bc <_ZN12FrontendHeapD0Ev+0x48>)
90002098:	4620      	mov	r0, r4
9000209a:	f840 3f14 	str.w	r3, [r0, #20]!
9000209e:	f00f f800 	bl	900110a2 <_ZN8touchgfx17AbstractPartitionD1Ev>
900020a2:	4620      	mov	r0, r4
900020a4:	f44f 7126 	mov.w	r1, #664	; 0x298
900020a8:	f020 fe9b 	bl	90022de2 <_ZdlPvj>
900020ac:	4620      	mov	r0, r4
900020ae:	bd10      	pop	{r4, pc}
900020b0:	90024854 	.word	0x90024854
900020b4:	90024820 	.word	0x90024820
900020b8:	900247ec 	.word	0x900247ec
900020bc:	900247b8 	.word	0x900247b8

900020c0 <touchgfx_init>:
static ApplicationFontProvider fontProvider;
static Texts texts;
static TouchGFXHAL hal(dma, display, tc, 480, 272);

void touchgfx_init()
{
900020c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
900020c4:	b082      	sub	sp, #8
    Bitmap::registerBitmapDatabase(BitmapDatabase::getInstance(), BitmapDatabase::getInstanceSize());
900020c6:	2400      	movs	r4, #0
900020c8:	f002 fe28 	bl	90004d1c <_ZN14BitmapDatabase11getInstanceEv>
900020cc:	4605      	mov	r5, r0
900020ce:	f002 fe29 	bl	90004d24 <_ZN14BitmapDatabase15getInstanceSizeEv>
900020d2:	4623      	mov	r3, r4
900020d4:	4601      	mov	r1, r0
900020d6:	4622      	mov	r2, r4
900020d8:	4628      	mov	r0, r5
900020da:	9400      	str	r4, [sp, #0]
900020dc:	f015 f88c 	bl	900171f8 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>
     *
     * @param  t The array of texts.
     */
    static void registerTexts(const Texts* t)
    {
        texts = t;
900020e0:	4b28      	ldr	r3, [pc, #160]	; (90002184 <touchgfx_init+0xc4>)
900020e2:	4a29      	ldr	r2, [pc, #164]	; (90002188 <touchgfx_init+0xc8>)
    TypedText::registerTexts(&texts);
    Texts::setLanguage(0);
900020e4:	4620      	mov	r0, r4
        static FrontendHeap instance;
900020e6:	4c29      	ldr	r4, [pc, #164]	; (9000218c <touchgfx_init+0xcc>)
900020e8:	601a      	str	r2, [r3, #0]
900020ea:	f003 fbb3 	bl	90005854 <_ZN8touchgfx5Texts11setLanguageEt>

    FontManager::setFontProvider(&fontProvider);
900020ee:	4828      	ldr	r0, [pc, #160]	; (90002190 <touchgfx_init+0xd0>)
900020f0:	f014 ffea 	bl	900170c8 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>
900020f4:	6823      	ldr	r3, [r4, #0]
900020f6:	f3bf 8f5b 	dmb	ish
900020fa:	07db      	lsls	r3, r3, #31
900020fc:	d505      	bpl.n	9000210a <touchgfx_init+0x4a>
    (void)heap;

    /*
     * Initialize TouchGFX
     */
    hal.initialize();
900020fe:	4825      	ldr	r0, [pc, #148]	; (90002194 <touchgfx_init+0xd4>)
}
90002100:	b002      	add	sp, #8
90002102:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    hal.initialize();
90002106:	f7fe bbd9 	b.w	900008bc <_ZN11TouchGFXHAL10initializeEv>
9000210a:	4620      	mov	r0, r4
9000210c:	f020 fe6b 	bl	90022de6 <__cxa_guard_acquire>
90002110:	2800      	cmp	r0, #0
90002112:	d0f4      	beq.n	900020fe <touchgfx_init+0x3e>
     */
    MVPHeap(AbstractPartition& pres,
            AbstractPartition& scr,
            AbstractPartition& tra,
            MVPApplication& app)
        : presenterStorage(pres),
90002114:	4d20      	ldr	r5, [pc, #128]	; (90002198 <touchgfx_init+0xd8>)
    Model model;
    FrontendApplication app;

private:
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
                     app(model, *this)
90002116:	4b21      	ldr	r3, [pc, #132]	; (9000219c <touchgfx_init+0xdc>)
          screenStorage(scr),
          transitionStorage(tra),
          frontendApplication(app)
90002118:	f505 769e 	add.w	r6, r5, #316	; 0x13c
        : presenterStorage(pres),
9000211c:	f105 0014 	add.w	r0, r5, #20
          screenStorage(scr),
90002120:	f105 082c 	add.w	r8, r5, #44	; 0x2c
          transitionStorage(tra),
90002124:	f505 7790 	add.w	r7, r5, #288	; 0x120
90002128:	602b      	str	r3, [r5, #0]
9000212a:	60ef      	str	r7, [r5, #12]
          frontendApplication(app)
9000212c:	612e      	str	r6, [r5, #16]
          screenStorage(scr),
9000212e:	e9c5 0801 	strd	r0, r8, [r5, #4]
90002132:	f00e ffb7 	bl	900110a4 <_ZN8touchgfx17AbstractPartitionC1Ev>
90002136:	4b1a      	ldr	r3, [pc, #104]	; (900021a0 <touchgfx_init+0xe0>)
90002138:	4640      	mov	r0, r8
9000213a:	616b      	str	r3, [r5, #20]
9000213c:	f00e ffb2 	bl	900110a4 <_ZN8touchgfx17AbstractPartitionC1Ev>
90002140:	4b18      	ldr	r3, [pc, #96]	; (900021a4 <touchgfx_init+0xe4>)
90002142:	4638      	mov	r0, r7
90002144:	62eb      	str	r3, [r5, #44]	; 0x2c
90002146:	f00e ffad 	bl	900110a4 <_ZN8touchgfx17AbstractPartitionC1Ev>
9000214a:	4b17      	ldr	r3, [pc, #92]	; (900021a8 <touchgfx_init+0xe8>)
9000214c:	f505 709a 	add.w	r0, r5, #308	; 0x134
90002150:	f8c5 3120 	str.w	r3, [r5, #288]	; 0x120
90002154:	f003 fc00 	bl	90005958 <_ZN5ModelC1Ev>
90002158:	462a      	mov	r2, r5
9000215a:	f505 719a 	add.w	r1, r5, #308	; 0x134
9000215e:	4630      	mov	r0, r6
90002160:	f003 fbee 	bl	90005940 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>
90002164:	4630      	mov	r0, r6
90002166:	f002 ffc3 	bl	900050f0 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>
        static FrontendHeap instance;
9000216a:	4810      	ldr	r0, [pc, #64]	; (900021ac <touchgfx_init+0xec>)
9000216c:	f020 fe86 	bl	90022e7c <atexit>
90002170:	4620      	mov	r0, r4
90002172:	f020 fe44 	bl	90022dfe <__cxa_guard_release>
90002176:	4807      	ldr	r0, [pc, #28]	; (90002194 <touchgfx_init+0xd4>)
}
90002178:	b002      	add	sp, #8
9000217a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    hal.initialize();
9000217e:	f7fe bb9d 	b.w	900008bc <_ZN11TouchGFXHAL10initializeEv>
90002182:	bf00      	nop
90002184:	240262c0 	.word	0x240262c0
90002188:	24006cb4 	.word	0x24006cb4
9000218c:	24005be4 	.word	0x24005be4
90002190:	24000020 	.word	0x24000020
90002194:	24006c2c 	.word	0x24006c2c
90002198:	24005be8 	.word	0x24005be8
9000219c:	90024854 	.word	0x90024854
900021a0:	900247b8 	.word	0x900247b8
900021a4:	900247ec 	.word	0x900247ec
900021a8:	90024820 	.word	0x90024820
900021ac:	9000202d 	.word	0x9000202d

900021b0 <touchgfx_components_init>:

void touchgfx_components_init()
{
}
900021b0:	4770      	bx	lr
900021b2:	bf00      	nop

900021b4 <touchgfx_taskEntry>:
     * Main event loop. Will wait for VSYNC signal, and then process next frame. Call
     * this function from your GUI task.
     *
     * Note This function never returns
     */
    hal.taskEntry();
900021b4:	4801      	ldr	r0, [pc, #4]	; (900021bc <touchgfx_taskEntry+0x8>)
900021b6:	f7fe bb47 	b.w	90000848 <_ZN11TouchGFXHAL9taskEntryEv>
900021ba:	bf00      	nop
900021bc:	24006c2c 	.word	0x24006c2c

900021c0 <_GLOBAL__sub_I_touchgfx_init>:
}
900021c0:	b570      	push	{r4, r5, r6, lr}
{
public:

    STM32TouchController() {}
900021c2:	4b26      	ldr	r3, [pc, #152]	; (9000225c <_GLOBAL__sub_I_touchgfx_init+0x9c>)
900021c4:	4c26      	ldr	r4, [pc, #152]	; (90002260 <_GLOBAL__sub_I_touchgfx_init+0xa0>)
static STM32DMA dma;
900021c6:	4e27      	ldr	r6, [pc, #156]	; (90002264 <_GLOBAL__sub_I_touchgfx_init+0xa4>)
static LCD16bpp display;
900021c8:	4d27      	ldr	r5, [pc, #156]	; (90002268 <_GLOBAL__sub_I_touchgfx_init+0xa8>)
900021ca:	6023      	str	r3, [r4, #0]
static STM32DMA dma;
900021cc:	4630      	mov	r0, r6
900021ce:	f7ff fe6f 	bl	90001eb0 <_ZN8STM32DMAC1Ev>
static LCD16bpp display;
900021d2:	4628      	mov	r0, r5
900021d4:	f018 f91a 	bl	9001a40c <_ZN8touchgfx8LCD16bppC1Ev>
        : dma(dmaInterface),
900021d8:	4b24      	ldr	r3, [pc, #144]	; (9000226c <_GLOBAL__sub_I_touchgfx_init+0xac>)
          mcuInstrumentation(0),
900021da:	2200      	movs	r2, #0
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH = width;
900021dc:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
900021e0:	f44f 7188 	mov.w	r1, #272	; 0x110
    };

public:
    /** Default constructor. Does nothing. */
    Gestures()
        : drag(), listener(0), dragThresholdValue(0)
900021e4:	62da      	str	r2, [r3, #44]	; 0x2c
900021e6:	861a      	strh	r2, [r3, #48]	; 0x30
          vSyncCompensationEnabled(false),
900021e8:	669a      	str	r2, [r3, #104]	; 0x68
          updateMCULoad(0),
900021ea:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
          cc_begin(0),
900021ee:	671a      	str	r2, [r3, #112]	; 0x70
          mcuInstrumentation(0),
900021f0:	e9c3 4203 	strd	r4, r2, [r3, #12]
          touchSampleRate(1),
900021f4:	4c1e      	ldr	r4, [pc, #120]	; (90002270 <_GLOBAL__sub_I_touchgfx_init+0xb0>)
900021f6:	665c      	str	r4, [r3, #100]	; 0x64
          requestedOrientation(ORIENTATION_LANDSCAPE),
900021f8:	f04f 7480 	mov.w	r4, #16777216	; 0x1000000
900021fc:	675c      	str	r4, [r3, #116]	; 0x74
          lastRenderMethod(HARDWARE)
900021fe:	2401      	movs	r4, #1
90002200:	f883 4078 	strb.w	r4, [r3, #120]	; 0x78
        instance = this;
90002204:	4c1b      	ldr	r4, [pc, #108]	; (90002274 <_GLOBAL__sub_I_touchgfx_init+0xb4>)
90002206:	6023      	str	r3, [r4, #0]
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH = width;
90002208:	4c1b      	ldr	r4, [pc, #108]	; (90002278 <_GLOBAL__sub_I_touchgfx_init+0xb8>)
9000220a:	8020      	strh	r0, [r4, #0]
9000220c:	4c1b      	ldr	r4, [pc, #108]	; (9000227c <_GLOBAL__sub_I_touchgfx_init+0xbc>)
          lcdRef(display),
9000220e:	e9c3 6501 	strd	r6, r5, [r3, #4]
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH = width;
90002212:	8020      	strh	r0, [r4, #0]
          refreshStrategy(REFRESH_STRATEGY_DEFAULT),
90002214:	f44f 7580 	mov.w	r5, #256	; 0x100
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
90002218:	4c19      	ldr	r4, [pc, #100]	; (90002280 <_GLOBAL__sub_I_touchgfx_init+0xc0>)
9000221a:	481a      	ldr	r0, [pc, #104]	; (90002284 <_GLOBAL__sub_I_touchgfx_init+0xc4>)
          refreshStrategy(REFRESH_STRATEGY_DEFAULT),
9000221c:	649d      	str	r5, [r3, #72]	; 0x48
          frameBufferAllocator(0),
9000221e:	e9c3 2205 	strd	r2, r2, [r3, #20]
            : startX(0),
90002222:	e9c3 2207 	strd	r2, r2, [r3, #28]
        : drag(), listener(0), dragThresholdValue(0)
90002226:	e9c3 2209 	strd	r2, r2, [r3, #36]	; 0x24
          frameBuffer0(0),
9000222a:	e9c3 220e 	strd	r2, r2, [r3, #56]	; 0x38
          frameBuffer2(0),
9000222e:	e9c3 2210 	strd	r2, r2, [r3, #64]	; 0x40
class Rect
{
public:
    /** Default constructor. Resulting in an empty Rect with coordinates 0,0. */
    Rect()
        : x(0), y(0), width(0), height(0)
90002232:	e9c3 2213 	strd	r2, r2, [r3, #76]	; 0x4c
          listener(0),
90002236:	e9c3 2215 	strd	r2, r2, [r3, #84]	; 0x54
          lastY(0),
9000223a:	e9c3 2217 	strd	r2, r2, [r3, #92]	; 0x5c
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
9000223e:	8021      	strh	r1, [r4, #0]
90002240:	8001      	strh	r1, [r0, #0]
        DISPLAY_ROTATION = rotate0;
90002242:	4c11      	ldr	r4, [pc, #68]	; (90002288 <_GLOBAL__sub_I_touchgfx_init+0xc8>)
     * @param [in,out] display Reference to LCD interface.
     * @param [in,out] tc      Reference to Touch Controller driver.
     * @param width            Width of the display.
     * @param height           Height of the display.
     */
    TouchGFXHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) : TouchGFXGeneratedHAL(dma, display, tc, width, height)
90002244:	4811      	ldr	r0, [pc, #68]	; (9000228c <_GLOBAL__sub_I_touchgfx_init+0xcc>)
90002246:	4912      	ldr	r1, [pc, #72]	; (90002290 <_GLOBAL__sub_I_touchgfx_init+0xd0>)
        : cc_consumed(0),
90002248:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
9000224c:	7022      	strb	r2, [r4, #0]
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
9000224e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
90002252:	6018      	str	r0, [r3, #0]
          cc_in(0)
90002254:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
90002258:	67d9      	str	r1, [r3, #124]	; 0x7c
}
9000225a:	bd70      	pop	{r4, r5, r6, pc}
9000225c:	90023f3c 	.word	0x90023f3c
90002260:	24005e80 	.word	0x24005e80
90002264:	24005e84 	.word	0x24005e84
90002268:	24006cb8 	.word	0x24006cb8
9000226c:	24006c2c 	.word	0x24006c2c
90002270:	01000001 	.word	0x01000001
90002274:	24026264 	.word	0x24026264
90002278:	24026258 	.word	0x24026258
9000227c:	2402625e 	.word	0x2402625e
90002280:	2402625a 	.word	0x2402625a
90002284:	24026260 	.word	0x24026260
90002288:	2402625c 	.word	0x2402625c
9000228c:	900240cc 	.word	0x900240cc
90002290:	90023f14 	.word	0x90023f14

90002294 <_GLOBAL__sub_D_touchgfx_init>:
static STM32DMA dma;
90002294:	4801      	ldr	r0, [pc, #4]	; (9000229c <_GLOBAL__sub_D_touchgfx_init+0x8>)
90002296:	f7ff bbb9 	b.w	90001a0c <_ZN8STM32DMAD1Ev>
9000229a:	bf00      	nop
9000229c:	24005e84 	.word	0x24005e84

900022a0 <_ZNK8touchgfx8Drawable17invalidateContentEv>:
     * drawn by the widget.
     */
    virtual void invalidateContent() const
    {
        // Consider checking if *this is in the draw chain
        if (visible)
900022a0:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
900022a4:	b112      	cbz	r2, 900022ac <_ZNK8touchgfx8Drawable17invalidateContentEv+0xc>
        {
            invalidate();
900022a6:	6803      	ldr	r3, [r0, #0]
900022a8:	695b      	ldr	r3, [r3, #20]
900022aa:	4718      	bx	r3
        }
    }
900022ac:	4770      	bx	lr
900022ae:	bf00      	nop

900022b0 <_ZN8touchgfx8Drawable13getFirstChildEv>:
     * @see Container::getFirstChild
     */
    virtual Drawable* getFirstChild()
    {
        return 0;
    }
900022b0:	2000      	movs	r0, #0
900022b2:	4770      	bx	lr

900022b4 <_ZN8touchgfx8Drawable4setXEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setX(int16_t x)
    {
        rect.x = x;
900022b4:	8081      	strh	r1, [r0, #4]
    }
900022b6:	4770      	bx	lr

900022b8 <_ZN8touchgfx8Drawable4setYEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setY(int16_t y)
    {
        rect.y = y;
900022b8:	80c1      	strh	r1, [r0, #6]
    }
900022ba:	4770      	bx	lr

900022bc <_ZN8touchgfx8Drawable8setWidthEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setWidth(int16_t width)
    {
        rect.width = width;
900022bc:	8101      	strh	r1, [r0, #8]
    }
900022be:	4770      	bx	lr

900022c0 <_ZN8touchgfx8Drawable9setHeightEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setHeight(int16_t height)
    {
        rect.height = height;
900022c0:	8141      	strh	r1, [r0, #10]
    }
900022c2:	4770      	bx	lr

900022c4 <_ZN8touchgfx8Drawable20childGeometryChangedEv>:
     * one or more of its children has changed. Currently only used in ScrollableContainer
     * to redraw scrollbars when the size of the scrolling contents changes.
     */
    virtual void childGeometryChanged()
    {
    }
900022c4:	4770      	bx	lr
900022c6:	bf00      	nop

900022c8 <_ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE>:
     * @param  event The ClickEvent received from the HAL.
     */
    virtual void handleClickEvent(const ClickEvent& event)
    {
        (void)event; // Unused variable
    }
900022c8:	4770      	bx	lr
900022ca:	bf00      	nop

900022cc <_ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE>:
     * @param  event The GestureEvent received from the HAL.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
    {
        (void)event; // Unused variable
    }
900022cc:	4770      	bx	lr
900022ce:	bf00      	nop

900022d0 <_ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE>:
     * @param  event The DragEvent received from the HAL.
     */
    virtual void handleDragEvent(const DragEvent& event)
    {
        (void)event; // Unused variable
    }
900022d0:	4770      	bx	lr
900022d2:	bf00      	nop

900022d4 <_ZN8touchgfx8Drawable15handleTickEventEv>:
     *
     * @see Application::registerTimerWidget
     */
    virtual void handleTickEvent()
    {
    }
900022d4:	4770      	bx	lr
900022d6:	bf00      	nop

900022d8 <_ZN8touchgfx8Drawable6moveToEss>:
     *
     * @note Will redraw the appropriate areas of the screen.
     */
    virtual void moveTo(int16_t x, int16_t y)
    {
        moveRelative(x - rect.x, y - rect.y);
900022d8:	f8b0 c006 	ldrh.w	ip, [r0, #6]
900022dc:	6803      	ldr	r3, [r0, #0]
900022de:	eba2 020c 	sub.w	r2, r2, ip
900022e2:	f8b0 c004 	ldrh.w	ip, [r0, #4]
900022e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
900022e8:	eba1 010c 	sub.w	r1, r1, ip
900022ec:	b212      	sxth	r2, r2
900022ee:	b209      	sxth	r1, r1
900022f0:	4718      	bx	r3
900022f2:	bf00      	nop

900022f4 <_ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_>:
     */
    virtual void setupDrawChain(const Rect& invalidatedArea, Drawable** nextPreviousElement)
    {
        (void)invalidatedArea; // Unused variable
        resetDrawChainCache();
        nextDrawChainElement = *nextPreviousElement;
900022f4:	6813      	ldr	r3, [r2, #0]
        cachedVisibleRect.x = UNCACHED_INDICATOR;
900022f6:	f64f 7cff 	movw	ip, #65535	; 0xffff
        cachedAbsX = UNCACHED_INDICATOR;
900022fa:	f04f 31ff 	mov.w	r1, #4294967295
        cachedVisibleRect.x = UNCACHED_INDICATOR;
900022fe:	f8a0 c00c 	strh.w	ip, [r0, #12]
        nextDrawChainElement = *nextPreviousElement;
90002302:	e9c0 3107 	strd	r3, r1, [r0, #28]
        *nextPreviousElement = this;
90002306:	6010      	str	r0, [r2, #0]
    }
90002308:	4770      	bx	lr
9000230a:	bf00      	nop

9000230c <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE>:
     *
     * @param [out] last Result, the address of the actual instance of the Widget.
     */
    virtual void getLastChild(int16_t /*x*/, int16_t /*y*/, Drawable** last)
    {
        if (isVisible() && isTouchable())
9000230c:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
90002310:	b11a      	cbz	r2, 9000231a <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0xe>
90002312:	f890 2024 	ldrb.w	r2, [r0, #36]	; 0x24
90002316:	b102      	cbz	r2, 9000231a <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0xe>
        {
            *last = this;
90002318:	6018      	str	r0, [r3, #0]
        }
    }
9000231a:	4770      	bx	lr

9000231c <_ZNK8touchgfx8LCD16bpp17framebufferFormatEv>:
    }

    virtual Bitmap::BitmapFormat framebufferFormat() const
    {
        return Bitmap::RGB565;
    }
9000231c:	2000      	movs	r0, #0
9000231e:	4770      	bx	lr

90002320 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>:
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
90002320:	4b03      	ldr	r3, [pc, #12]	; (90002330 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv+0x10>)
90002322:	2290      	movs	r2, #144	; 0x90
90002324:	f883 235a 	strb.w	r2, [r3, #858]	; 0x35a
90002328:	f883 2358 	strb.w	r2, [r3, #856]	; 0x358

void TouchGFXGeneratedHAL::configureInterrupts()
{
    NVIC_SetPriority(DMA2D_IRQn, 9);
    NVIC_SetPriority(LTDC_IRQn, 9);
}
9000232c:	4770      	bx	lr
9000232e:	bf00      	nop
90002330:	e000e100 	.word	0xe000e100

90002334 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>:
    NVIC_DisableIRQ(LTDC_IRQn);
}

void TouchGFXGeneratedHAL::enableLCDControllerInterrupt()
{
    lcd_int_active_line = (LTDC->BPCR & 0x7FF) - 1;
90002334:	4a09      	ldr	r2, [pc, #36]	; (9000235c <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x28>)
90002336:	490a      	ldr	r1, [pc, #40]	; (90002360 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x2c>)
90002338:	68d3      	ldr	r3, [r2, #12]
    lcd_int_porch_line = (LTDC->AWCR & 0x7FF) - 1;
9000233a:	480a      	ldr	r0, [pc, #40]	; (90002364 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x30>)
    lcd_int_active_line = (LTDC->BPCR & 0x7FF) - 1;
9000233c:	f3c3 030a 	ubfx	r3, r3, #0, #11
90002340:	3b01      	subs	r3, #1
90002342:	b29b      	uxth	r3, r3
90002344:	800b      	strh	r3, [r1, #0]
    lcd_int_porch_line = (LTDC->AWCR & 0x7FF) - 1;
90002346:	6911      	ldr	r1, [r2, #16]
90002348:	f3c1 010a 	ubfx	r1, r1, #0, #11
9000234c:	3901      	subs	r1, #1
9000234e:	8001      	strh	r1, [r0, #0]

    /* Sets the Line Interrupt position */
    LTDC->LIPCR = lcd_int_active_line;
90002350:	6413      	str	r3, [r2, #64]	; 0x40
    /* Line Interrupt Enable            */
    LTDC->IER |= LTDC_IER_LIE;
90002352:	6b53      	ldr	r3, [r2, #52]	; 0x34
90002354:	f043 0301 	orr.w	r3, r3, #1
90002358:	6353      	str	r3, [r2, #52]	; 0x34
}
9000235a:	4770      	bx	lr
9000235c:	50001000 	.word	0x50001000
90002360:	24006d34 	.word	0x24006d34
90002364:	24006d32 	.word	0x24006d32

90002368 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>:
    videoController.endFrame();
}

uint16_t* TouchGFXGeneratedHAL::getTFTFrameBuffer() const
{
    return (uint16_t*)LTDC_Layer1->CFBAR;
90002368:	4b01      	ldr	r3, [pc, #4]	; (90002370 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv+0x8>)
9000236a:	f8d3 00ac 	ldr.w	r0, [r3, #172]	; 0xac
}
9000236e:	4770      	bx	lr
90002370:	50001000 	.word	0x50001000

90002374 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>:

void TouchGFXGeneratedHAL::setTFTFrameBuffer(uint16_t* adr)
{
    LTDC_Layer1->CFBAR = (uint32_t)adr;
90002374:	4b02      	ldr	r3, [pc, #8]	; (90002380 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0xc>)

    /* Reload immediate */
    LTDC->SRCR = (uint32_t)LTDC_SRCR_IMR;
90002376:	2201      	movs	r2, #1
    LTDC_Layer1->CFBAR = (uint32_t)adr;
90002378:	f8c3 10ac 	str.w	r1, [r3, #172]	; 0xac
    LTDC->SRCR = (uint32_t)LTDC_SRCR_IMR;
9000237c:	625a      	str	r2, [r3, #36]	; 0x24
}
9000237e:	4770      	bx	lr
90002380:	50001000 	.word	0x50001000

90002384 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12setRGBBufferEPhj>:

    virtual void setRGBBuffer(uint8_t* buffer, size_t sizeOfBuffer)
    {
        // Running in UI thread / main

        bufferRGB = buffer;
90002384:	e9c0 120c 	strd	r1, r2, [r0, #48]	; 0x30
        topBufferRGB = bufferRGB;
90002388:	6381      	str	r1, [r0, #56]	; 0x38
        sizeBufferRGB = sizeOfBuffer;
    }
9000238a:	4770      	bx	lr

9000238c <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EED1Ev>:
class DedicatedBufferController : public touchgfx::VideoController
9000238c:	4770      	bx	lr
9000238e:	bf00      	nop

90002390 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12setVideoDataEmRNS0_15VideoDataReaderE>:
        mjpegDecoders[handle]->setVideoData(reader);
90002390:	eb00 0081 	add.w	r0, r0, r1, lsl #2
90002394:	4611      	mov	r1, r2
90002396:	6840      	ldr	r0, [r0, #4]
90002398:	6803      	ldr	r3, [r0, #0]
9000239a:	68db      	ldr	r3, [r3, #12]
9000239c:	4718      	bx	r3
9000239e:	bf00      	nop

900023a0 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EED0Ev>:
class DedicatedBufferController : public touchgfx::VideoController
900023a0:	b510      	push	{r4, lr}
900023a2:	4604      	mov	r4, r0
900023a4:	2148      	movs	r1, #72	; 0x48
900023a6:	f020 fd1c 	bl	90022de2 <_ZdlPvj>
900023aa:	4620      	mov	r0, r4
900023ac:	bd10      	pop	{r4, pc}
900023ae:	bf00      	nop

900023b0 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12getIsPlayingEm>:
        mjpegDecoders[handle]->getVideoInfo(data);
    }

    virtual bool getIsPlaying(const Handle handle)
    {
        assert(handle < no_streams);
900023b0:	b911      	cbnz	r1, 900023b8 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12getIsPlayingEm+0x8>
        Stream& stream = streams[handle];
        return stream.isPlaying;
    }
900023b2:	f890 0029 	ldrb.w	r0, [r0, #41]	; 0x29
900023b6:	4770      	bx	lr
    virtual bool getIsPlaying(const Handle handle)
900023b8:	b508      	push	{r3, lr}
        assert(handle < no_streams);
900023ba:	4a03      	ldr	r2, [pc, #12]	; (900023c8 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12getIsPlayingEm+0x18>)
900023bc:	f44f 71b8 	mov.w	r1, #368	; 0x170
900023c0:	4b02      	ldr	r3, [pc, #8]	; (900023cc <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12getIsPlayingEm+0x1c>)
900023c2:	4803      	ldr	r0, [pc, #12]	; (900023d0 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12getIsPlayingEm+0x20>)
900023c4:	f020 fd3c 	bl	90022e40 <__assert_func>
900023c8:	90024874 	.word	0x90024874
900023cc:	90024860 	.word	0x90024860
900023d0:	90024a00 	.word	0x90024a00

900023d4 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19getVideoInformationEmPNS0_16VideoInformationE>:
        assert(handle < no_streams);
900023d4:	b921      	cbnz	r1, 900023e0 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19getVideoInformationEmPNS0_16VideoInformationE+0xc>
        mjpegDecoders[handle]->getVideoInfo(data);
900023d6:	6840      	ldr	r0, [r0, #4]
900023d8:	4611      	mov	r1, r2
900023da:	6803      	ldr	r3, [r0, #0]
900023dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
900023de:	4718      	bx	r3
        assert(handle < no_streams);
900023e0:	4b03      	ldr	r3, [pc, #12]	; (900023f0 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19getVideoInformationEmPNS0_16VideoInformationE+0x1c>)
900023e2:	f44f 71b5 	mov.w	r1, #362	; 0x16a
900023e6:	4a03      	ldr	r2, [pc, #12]	; (900023f4 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19getVideoInformationEmPNS0_16VideoInformationE+0x20>)
900023e8:	4803      	ldr	r0, [pc, #12]	; (900023f8 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19getVideoInformationEmPNS0_16VideoInformationE+0x24>)
    virtual void getVideoInformation(const Handle handle, touchgfx::VideoInformation* data)
900023ea:	b510      	push	{r4, lr}
        assert(handle < no_streams);
900023ec:	f020 fd28 	bl	90022e40 <__assert_func>
900023f0:	90024860 	.word	0x90024860
900023f4:	90024a44 	.word	0x90024a44
900023f8:	90024a00 	.word	0x90024a00

900023fc <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE21getCurrentFrameNumberEm>:
        assert(handle < no_streams);
900023fc:	b909      	cbnz	r1, 90002402 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE21getCurrentFrameNumberEm+0x6>
    }
900023fe:	68c0      	ldr	r0, [r0, #12]
90002400:	4770      	bx	lr
    virtual uint32_t getCurrentFrameNumber(const Handle handle)
90002402:	b508      	push	{r3, lr}
        assert(handle < no_streams);
90002404:	4a02      	ldr	r2, [pc, #8]	; (90002410 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE21getCurrentFrameNumberEm+0x14>)
90002406:	2179      	movs	r1, #121	; 0x79
90002408:	4b02      	ldr	r3, [pc, #8]	; (90002414 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE21getCurrentFrameNumberEm+0x18>)
9000240a:	4803      	ldr	r0, [pc, #12]	; (90002418 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE21getCurrentFrameNumberEm+0x1c>)
9000240c:	f020 fd18 	bl	90022e40 <__assert_func>
90002410:	90024bf4 	.word	0x90024bf4
90002414:	90024860 	.word	0x90024860
90002418:	90024a00 	.word	0x90024a00

9000241c <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12setVideoDataEmPKhm>:
    virtual void setVideoData(const Handle handle, const uint8_t* movie, const uint32_t length)
9000241c:	b510      	push	{r4, lr}
        assert(handle < no_streams);
9000241e:	460c      	mov	r4, r1
90002420:	b949      	cbnz	r1, 90002436 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12setVideoDataEmPKhm+0x1a>
90002422:	4611      	mov	r1, r2
90002424:	461a      	mov	r2, r3
        mjpegDecoders[handle]->setVideoData(movie, length);
90002426:	6843      	ldr	r3, [r0, #4]
        stream.frameNumber = 0;
90002428:	60c4      	str	r4, [r0, #12]
        mjpegDecoders[handle]->setVideoData(movie, length);
9000242a:	681c      	ldr	r4, [r3, #0]
9000242c:	4618      	mov	r0, r3
9000242e:	68a3      	ldr	r3, [r4, #8]
    }
90002430:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        mjpegDecoders[handle]->setVideoData(movie, length);
90002434:	4718      	bx	r3
        assert(handle < no_streams);
90002436:	4b03      	ldr	r3, [pc, #12]	; (90002444 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12setVideoDataEmPKhm+0x28>)
90002438:	2190      	movs	r1, #144	; 0x90
9000243a:	4a03      	ldr	r2, [pc, #12]	; (90002448 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12setVideoDataEmPKhm+0x2c>)
9000243c:	4803      	ldr	r0, [pc, #12]	; (9000244c <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12setVideoDataEmPKhm+0x30>)
9000243e:	f020 fcff 	bl	90022e40 <__assert_func>
90002442:	bf00      	nop
90002444:	90024860 	.word	0x90024860
90002448:	90024da8 	.word	0x90024da8
9000244c:	90024a00 	.word	0x90024a00

90002450 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12setFrameRateEmmm>:
        assert(handle < no_streams);
90002450:	b921      	cbnz	r1, 9000245c <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12setFrameRateEmmm+0xc>
        stream.tickCount = 0;
90002452:	e9c0 1104 	strd	r1, r1, [r0, #16]
        stream.frame_rate_video = video_frames;
90002456:	e9c0 3206 	strd	r3, r2, [r0, #24]
9000245a:	4770      	bx	lr
    virtual void setFrameRate(const Handle handle, uint32_t ui_frames, uint32_t video_frames)
9000245c:	b508      	push	{r3, lr}
        assert(handle < no_streams);
9000245e:	4a03      	ldr	r2, [pc, #12]	; (9000246c <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12setFrameRateEmmm+0x1c>)
90002460:	2182      	movs	r1, #130	; 0x82
90002462:	4b03      	ldr	r3, [pc, #12]	; (90002470 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12setFrameRateEmmm+0x20>)
90002464:	4803      	ldr	r0, [pc, #12]	; (90002474 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12setFrameRateEmmm+0x24>)
90002466:	f020 fceb 	bl	90022e40 <__assert_func>
9000246a:	bf00      	nop
9000246c:	90024f84 	.word	0x90024f84
90002470:	90024860 	.word	0x90024860
90002474:	90024a00 	.word	0x90024a00

90002478 <_ZN20TouchGFXGeneratedHAL10beginFrameEv>:
    return HAL::beginFrame();
90002478:	f00f b8f8 	b.w	9001166c <_ZN8touchgfx3HAL10beginFrameEv>

9000247c <_ZN20TouchGFXGeneratedHAL8endFrameEv>:
    if (frameBufferUpdatedThisFrame)
9000247c:	f890 304b 	ldrb.w	r3, [r0, #75]	; 0x4b
{
90002480:	b510      	push	{r4, lr}
    if (frameBufferUpdatedThisFrame)
90002482:	b113      	cbz	r3, 9000248a <_ZN20TouchGFXGeneratedHAL8endFrameEv+0xe>
        refreshRequested = true;
90002484:	4b1a      	ldr	r3, [pc, #104]	; (900024f0 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x74>)
90002486:	2201      	movs	r2, #1
90002488:	701a      	strb	r2, [r3, #0]
            if (stream.isPlaying || stream.isShowingOneFrame)
9000248a:	4c1a      	ldr	r4, [pc, #104]	; (900024f4 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x78>)
    HAL::endFrame();
9000248c:	f00f f8fa 	bl	90011684 <_ZN8touchgfx3HAL8endFrameEv>
90002490:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
90002494:	b963      	cbnz	r3, 900024b0 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x34>
90002496:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
9000249a:	b94b      	cbnz	r3, 900024b0 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x34>
        firstDrawThisFrame = true;
9000249c:	2301      	movs	r3, #1
        SEM_POST(semDecode);
9000249e:	6c20      	ldr	r0, [r4, #64]	; 0x40
        firstDrawThisFrame = true;
900024a0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        SEM_POST(semDecode);
900024a4:	f00b f942 	bl	9000d72c <osSemaphoreRelease>
        if (uiHasMutex)
900024a8:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
900024ac:	b9cb      	cbnz	r3, 900024e2 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x66>
}
900024ae:	bd10      	pop	{r4, pc}
    bool decodeForNextTick(Stream& stream)
    {
        // Running in UI thread

        // Compare tickCount/frameCount to frame_rate_ticks/frame_rate_video
        if ((stream.tickCount * stream.frame_rate_video) >= (stream.frame_rate_ticks * stream.frameCount))
900024b0:	e9d4 3005 	ldrd	r3, r0, [r4, #20]
900024b4:	69e1      	ldr	r1, [r4, #28]
900024b6:	6922      	ldr	r2, [r4, #16]
900024b8:	fb00 f303 	mul.w	r3, r0, r3
900024bc:	fb01 f202 	mul.w	r2, r1, r2
900024c0:	4293      	cmp	r3, r2
900024c2:	d3eb      	bcc.n	9000249c <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x20>
        {
            if (allowSkipFrames)
900024c4:	f894 003c 	ldrb.w	r0, [r4, #60]	; 0x3c
900024c8:	b138      	cbz	r0, 900024da <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x5e>
            {
                stream.skip_frames = (stream.tickCount * stream.frame_rate_video - stream.frame_rate_ticks * stream.frameCount) / stream.frame_rate_ticks;
900024ca:	1a9b      	subs	r3, r3, r2
900024cc:	fbb3 f2f1 	udiv	r2, r3, r1
                if (stream.skip_frames > 0)
900024d0:	4299      	cmp	r1, r3
                {
                    stream.skip_frames--;
900024d2:	bf98      	it	ls
900024d4:	f102 32ff 	addls.w	r2, r2, #4294967295
900024d8:	6262      	str	r2, [r4, #36]	; 0x24
                    stream.doDecode = true;
900024da:	2301      	movs	r3, #1
900024dc:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
        for (uint32_t i = 0; i < no_streams; i++)
900024e0:	e7dc      	b.n	9000249c <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x20>
            MUTEX_UNLOCK(mutexBuffers);
900024e2:	6c60      	ldr	r0, [r4, #68]	; 0x44
900024e4:	f00b f87c 	bl	9000d5e0 <osMutexRelease>
            uiHasMutex = false;
900024e8:	2300      	movs	r3, #0
900024ea:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
900024ee:	bd10      	pop	{r4, pc}
900024f0:	24006d30 	.word	0x24006d30
900024f4:	24006d80 	.word	0x24006d80

900024f8 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>:

void TouchGFXGeneratedHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
    HAL::flushFrameBuffer(rect);
900024f8:	f00f b882 	b.w	90011600 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>

900024fc <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>:
}

bool TouchGFXGeneratedHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
    return HAL::blockCopy(dest, src, numBytes);
900024fc:	f00f b9dd 	b.w	900118ba <_ZN8touchgfx3HAL9blockCopyEPvPKvm>

90002500 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE4drawEmRKNS0_4RectERKNS0_11VideoWidgetE>:
        if (firstDrawThisFrame)
90002500:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
90002504:	b903      	cbnz	r3, 90002508 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE4drawEmRKNS0_4RectERKNS0_11VideoWidgetE+0x8>
90002506:	4770      	bx	lr
    virtual void draw(const Handle handle, const touchgfx::Rect& invalidatedArea, const touchgfx::VideoWidget& widget)
90002508:	b510      	push	{r4, lr}
            MUTEX_LOCK(mutexBuffers);
9000250a:	f04f 31ff 	mov.w	r1, #4294967295
9000250e:	4604      	mov	r4, r0
90002510:	6c40      	ldr	r0, [r0, #68]	; 0x44
90002512:	f00b f841 	bl	9000d598 <osMutexAcquire>
            firstDrawThisFrame = false;
90002516:	f44f 7380 	mov.w	r3, #256	; 0x100
9000251a:	f8a4 303d 	strh.w	r3, [r4, #61]	; 0x3d
    }
9000251e:	bd10      	pop	{r4, pc}

90002520 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE21unregisterVideoWidgetEm>:
    virtual void unregisterVideoWidget(const Handle handle)
90002520:	b538      	push	{r3, r4, r5, lr}
90002522:	460c      	mov	r4, r1
90002524:	4605      	mov	r5, r0
        MUTEX_LOCK(mutexBuffers);
90002526:	f04f 31ff 	mov.w	r1, #4294967295
9000252a:	6c40      	ldr	r0, [r0, #68]	; 0x44
        streams[handle].isActive = false;
9000252c:	eb04 04c4 	add.w	r4, r4, r4, lsl #3
        MUTEX_LOCK(mutexBuffers);
90002530:	f00b f832 	bl	9000d598 <osMutexAcquire>
        MUTEX_UNLOCK(mutexBuffers);
90002534:	6c68      	ldr	r0, [r5, #68]	; 0x44
90002536:	f00b f853 	bl	9000d5e0 <osMutexRelease>
        streams[handle].isActive = false;
9000253a:	2300      	movs	r3, #0
9000253c:	eb05 0484 	add.w	r4, r5, r4, lsl #2
90002540:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
        if (oneIsActive == false)
90002544:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
90002548:	b90b      	cbnz	r3, 9000254e <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE21unregisterVideoWidgetEm+0x2e>
            topBufferRGB = bufferRGB;
9000254a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
9000254c:	63ab      	str	r3, [r5, #56]	; 0x38
    }
9000254e:	bd38      	pop	{r3, r4, r5, pc}

90002550 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv>:
{
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then
    // the DCache must be flushed prior to DMA2D accessing it. That's done
    // using the function SCB_CleanInvalidateDCache(). Remember to enable "CPU Cache" in the
    // "System Core" settings for "Cortex M7" in CubeMX in order for this function call to work.
    if (SCB->CCR & SCB_CCR_DC_Msk)
90002550:	4814      	ldr	r0, [pc, #80]	; (900025a4 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x54>)
90002552:	6943      	ldr	r3, [r0, #20]
90002554:	03d9      	lsls	r1, r3, #15
90002556:	d523      	bpl.n	900025a0 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x50>
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
90002558:	2300      	movs	r3, #0
{
9000255a:	b510      	push	{r4, lr}
9000255c:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
90002560:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
90002564:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
90002568:	f643 74e0 	movw	r4, #16352	; 0x3fe0
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
9000256c:	f3c3 3c4e 	ubfx	ip, r3, #13, #15
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
90002570:	f3c3 0ec9 	ubfx	lr, r3, #3, #10
90002574:	ea4f 1c4c 	mov.w	ip, ip, lsl #5
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
90002578:	ea0c 0104 	and.w	r1, ip, r4
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
9000257c:	4673      	mov	r3, lr
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
9000257e:	ea41 7283 	orr.w	r2, r1, r3, lsl #30
      } while (ways-- != 0U);
90002582:	3b01      	subs	r3, #1
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
90002584:	f8c0 2274 	str.w	r2, [r0, #628]	; 0x274
      } while (ways-- != 0U);
90002588:	1c5a      	adds	r2, r3, #1
9000258a:	d1f8      	bne.n	9000257e <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x2e>
    } while(sets-- != 0U);
9000258c:	f1ac 0c20 	sub.w	ip, ip, #32
90002590:	f11c 0f20 	cmn.w	ip, #32
90002594:	d1f0      	bne.n	90002578 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x28>
90002596:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
9000259a:	f3bf 8f6f 	isb	sy
    {
        SCB_CleanInvalidateDCache();
    }
}
9000259e:	bd10      	pop	{r4, pc}
900025a0:	4770      	bx	lr
900025a2:	bf00      	nop
900025a4:	e000ed00 	.word	0xe000ed00

900025a8 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm>:
    virtual void setCommand(const Handle handle, Command cmd, uint32_t param)
900025a8:	b510      	push	{r4, lr}
        assert(handle < no_streams);
900025aa:	2900      	cmp	r1, #0
900025ac:	d133      	bne.n	90002616 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0x6e>
900025ae:	4604      	mov	r4, r0
        switch (cmd)
900025b0:	2a05      	cmp	r2, #5
900025b2:	d809      	bhi.n	900025c8 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0x20>
900025b4:	e8df f002 	tbb	[pc, r2]
900025b8:	27221e0f 	.word	0x27221e0f
900025bc:	0903      	.short	0x0903
            stream.isPlaying = false;
900025be:	2200      	movs	r2, #0
            stream.seek_to_frame = 1;
900025c0:	2301      	movs	r3, #1
            stream.isPlaying = false;
900025c2:	f880 2029 	strb.w	r2, [r0, #41]	; 0x29
            stream.seek_to_frame = 1;
900025c6:	6203      	str	r3, [r0, #32]
    }
900025c8:	bd10      	pop	{r4, pc}
            stream.repeat = (param > 0);
900025ca:	3b00      	subs	r3, #0
900025cc:	bf18      	it	ne
900025ce:	2301      	movne	r3, #1
900025d0:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d
    }
900025d4:	bd10      	pop	{r4, pc}
            if (mjpegDecoders[handle]->hasVideo())
900025d6:	6840      	ldr	r0, [r0, #4]
900025d8:	6803      	ldr	r3, [r0, #0]
900025da:	691b      	ldr	r3, [r3, #16]
900025dc:	4798      	blx	r3
900025de:	2800      	cmp	r0, #0
900025e0:	d0f2      	beq.n	900025c8 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0x20>
                stream.isPlaying = true;
900025e2:	2201      	movs	r2, #1
                stream.frameCount = 0;
900025e4:	2300      	movs	r3, #0
                stream.isPlaying = true;
900025e6:	f884 2029 	strb.w	r2, [r4, #41]	; 0x29
                stream.hasMoreFrames = true; // Assume more frames, lowered on end
900025ea:	f884 202c 	strb.w	r2, [r4, #44]	; 0x2c
                stream.tickCount = 0;
900025ee:	e9c4 3304 	strd	r3, r3, [r4, #16]
    }
900025f2:	bd10      	pop	{r4, pc}
            stream.isPlaying = false;
900025f4:	2300      	movs	r3, #0
900025f6:	f880 3029 	strb.w	r3, [r0, #41]	; 0x29
    }
900025fa:	bd10      	pop	{r4, pc}
            stream.frameCount = 0;
900025fc:	2200      	movs	r2, #0
            stream.seek_to_frame = param;
900025fe:	6203      	str	r3, [r0, #32]
            stream.tickCount = 0;
90002600:	e9c0 2204 	strd	r2, r2, [r0, #16]
    }
90002604:	bd10      	pop	{r4, pc}
            stream.frameCount = 0;
90002606:	2200      	movs	r2, #0
            stream.isShowingOneFrame = true;
90002608:	2101      	movs	r1, #1
            stream.seek_to_frame = param;
9000260a:	6203      	str	r3, [r0, #32]
            stream.isShowingOneFrame = true;
9000260c:	f880 102a 	strb.w	r1, [r0, #42]	; 0x2a
            stream.tickCount = 0;
90002610:	e9c0 2204 	strd	r2, r2, [r0, #16]
    }
90002614:	bd10      	pop	{r4, pc}
        assert(handle < no_streams);
90002616:	4b03      	ldr	r3, [pc, #12]	; (90002624 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0x7c>)
90002618:	21a2      	movs	r1, #162	; 0xa2
9000261a:	4a03      	ldr	r2, [pc, #12]	; (90002628 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0x80>)
9000261c:	4803      	ldr	r0, [pc, #12]	; (9000262c <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0x84>)
9000261e:	f020 fc0f 	bl	90022e40 <__assert_func>
90002622:	bf00      	nop
90002624:	90024860 	.word	0x90024860
90002628:	90025140 	.word	0x90025140
9000262c:	90024a00 	.word	0x90024a00

90002630 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE>:
    virtual bool updateFrame(const Handle handle, touchgfx::VideoWidget& widget)
90002630:	b510      	push	{r4, lr}
        assert(handle < no_streams);
90002632:	bb39      	cbnz	r1, 90002684 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x54>
        if (stream.isPlaying)
90002634:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
90002638:	4604      	mov	r4, r0
9000263a:	b923      	cbnz	r3, 90002646 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x16>
        if (stream.doInvalidateOnNextTick)
9000263c:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
90002640:	b963      	cbnz	r3, 9000265c <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x2c>
        return true;
90002642:	2001      	movs	r0, #1
    }
90002644:	bd10      	pop	{r4, pc}
        return vSyncForFrame;
90002646:	4912      	ldr	r1, [pc, #72]	; (90002690 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x60>)
            stream.tickCount+=HAL::getInstance()->getLCDRefreshCount();
90002648:	6943      	ldr	r3, [r0, #20]
9000264a:	6809      	ldr	r1, [r1, #0]
9000264c:	f891 1067 	ldrb.w	r1, [r1, #103]	; 0x67
90002650:	440b      	add	r3, r1
90002652:	6143      	str	r3, [r0, #20]
        if (stream.doInvalidateOnNextTick)
90002654:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
90002658:	2b00      	cmp	r3, #0
9000265a:	d0f2      	beq.n	90002642 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x12>
     *
     * @param [in] videoBuffer Video buffer.
     */
    void setVideoBuffer(uint8_t* const videoBuffer)
    {
        buffer = videoBuffer;
9000265c:	68a1      	ldr	r1, [r4, #8]
            widget.invalidate();
9000265e:	4610      	mov	r0, r2
90002660:	6813      	ldr	r3, [r2, #0]
90002662:	695b      	ldr	r3, [r3, #20]
90002664:	6311      	str	r1, [r2, #48]	; 0x30
90002666:	4798      	blx	r3
            stream.doInvalidateOnNextTick = false;
90002668:	2300      	movs	r3, #0
            if (!stream.hasMoreFrames && !stream.repeat)
9000266a:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
            stream.doInvalidateOnNextTick = false;
9000266e:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
            if (!stream.hasMoreFrames && !stream.repeat)
90002672:	2800      	cmp	r0, #0
90002674:	d1e5      	bne.n	90002642 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x12>
90002676:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
9000267a:	2b00      	cmp	r3, #0
9000267c:	d1e2      	bne.n	90002644 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x14>
                stream.isPlaying = false;
9000267e:	f884 0029 	strb.w	r0, [r4, #41]	; 0x29
    }
90002682:	bd10      	pop	{r4, pc}
        assert(handle < no_streams);
90002684:	4b03      	ldr	r3, [pc, #12]	; (90002694 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x64>)
90002686:	21d0      	movs	r1, #208	; 0xd0
90002688:	4a03      	ldr	r2, [pc, #12]	; (90002698 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x68>)
9000268a:	4804      	ldr	r0, [pc, #16]	; (9000269c <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x6c>)
9000268c:	f020 fbd8 	bl	90022e40 <__assert_func>
90002690:	24026264 	.word	0x24026264
90002694:	90024860 	.word	0x90024860
90002698:	90025314 	.word	0x90025314
9000269c:	90024a00 	.word	0x90024a00

900026a0 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE>:
    {
        // Running in UI thread

        for (uint32_t i = 0; i < no_streams; i++)
        {
            if (streams[i].isActive == false)
900026a0:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
    virtual Handle registerVideoWidget(touchgfx::VideoWidget& widget)
900026a4:	b570      	push	{r4, r5, r6, lr}
            if (streams[i].isActive == false)
900026a6:	b9fb      	cbnz	r3, 900026e8 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE+0x48>
            {
                // Reset stream parameters
                streams[i] = Stream();
900026a8:	2201      	movs	r2, #1
        if (topBufferRGB + sizeOfOneDecodeBuffer > (bufferRGB + sizeBufferRGB))
900026aa:	6b85      	ldr	r5, [r0, #56]	; 0x38
                streams[i] = Stream();
900026ac:	60c3      	str	r3, [r0, #12]
900026ae:	f8a0 202d 	strh.w	r2, [r0, #45]	; 0x2d
        if (topBufferRGB + sizeOfOneDecodeBuffer > (bufferRGB + sizeBufferRGB))
900026b2:	f505 2487 	add.w	r4, r5, #276480	; 0x43800
        streams[handle].isActive = true;
900026b6:	f880 2028 	strb.w	r2, [r0, #40]	; 0x28
                streams[i] = Stream();
900026ba:	6103      	str	r3, [r0, #16]
900026bc:	6143      	str	r3, [r0, #20]
900026be:	6183      	str	r3, [r0, #24]
900026c0:	61c3      	str	r3, [r0, #28]
900026c2:	6203      	str	r3, [r0, #32]
900026c4:	6243      	str	r3, [r0, #36]	; 0x24
900026c6:	f8c0 3029 	str.w	r3, [r0, #41]	; 0x29
        if (topBufferRGB + sizeOfOneDecodeBuffer > (bufferRGB + sizeBufferRGB))
900026ca:	e9d0 260c 	ldrd	r2, r6, [r0, #48]	; 0x30
900026ce:	4432      	add	r2, r6
900026d0:	4294      	cmp	r4, r2
900026d2:	d810      	bhi.n	900026f6 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE+0x56>
     * @param height Height of the videoBuffer in pixels
     */
    void setVideoBufferFormat(Bitmap::BitmapFormat bufferFormat, int16_t width, int16_t height)
    {
        format = bufferFormat;
        bufferWidth = width;
900026d4:	4a0b      	ldr	r2, [pc, #44]	; (90002704 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE+0x64>)
        decodeBuffers[handle] = (uint32_t*)topBufferRGB;
900026d6:	6085      	str	r5, [r0, #8]
        topBufferRGB += sizeOfOneDecodeBuffer;
900026d8:	6384      	str	r4, [r0, #56]	; 0x38
    }
900026da:	4618      	mov	r0, r3
        format = bufferFormat;
900026dc:	f881 3034 	strb.w	r3, [r1, #52]	; 0x34
        bufferWidth = width;
900026e0:	f8c1 2036 	str.w	r2, [r1, #54]	; 0x36
        buffer = videoBuffer;
900026e4:	630b      	str	r3, [r1, #48]	; 0x30
900026e6:	bd70      	pop	{r4, r5, r6, pc}

                return static_cast<VideoController::Handle>(i);
            }
        }

        assert(0 && "Unable to find free video stream handle!");
900026e8:	4b07      	ldr	r3, [pc, #28]	; (90002708 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE+0x68>)
900026ea:	f240 11c5 	movw	r1, #453	; 0x1c5
900026ee:	4a07      	ldr	r2, [pc, #28]	; (9000270c <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE+0x6c>)
900026f0:	4807      	ldr	r0, [pc, #28]	; (90002710 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE+0x70>)
900026f2:	f020 fba5 	bl	90022e40 <__assert_func>
            assert(0 && "registerVideoWidget: Unable to allocate RGB buffer!");
900026f6:	4b07      	ldr	r3, [pc, #28]	; (90002714 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE+0x74>)
900026f8:	2152      	movs	r1, #82	; 0x52
900026fa:	4a07      	ldr	r2, [pc, #28]	; (90002718 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE+0x78>)
900026fc:	4804      	ldr	r0, [pc, #16]	; (90002710 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE+0x70>)
900026fe:	f020 fb9f 	bl	90022e40 <__assert_func>
90002702:	bf00      	nop
90002704:	012001e0 	.word	0x012001e0
90002708:	900254b4 	.word	0x900254b4
9000270c:	900254e4 	.word	0x900254e4
90002710:	90024a00 	.word	0x90024a00
90002714:	9002566c 	.word	0x9002566c
90002718:	900256a8 	.word	0x900256a8

9000271c <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>:
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
9000271c:	4b08      	ldr	r3, [pc, #32]	; (90002740 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv+0x24>)
9000271e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
90002722:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
90002726:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
9000272a:	f3bf 8f6f 	isb	sy
9000272e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
90002732:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
90002736:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
9000273a:	f3bf 8f6f 	isb	sy
}
9000273e:	4770      	bx	lr
90002740:	e000e100 	.word	0xe000e100

90002744 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>:
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
90002744:	4b03      	ldr	r3, [pc, #12]	; (90002754 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv+0x10>)
90002746:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
9000274a:	609a      	str	r2, [r3, #8]
9000274c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
90002750:	609a      	str	r2, [r3, #8]
}
90002752:	4770      	bx	lr
90002754:	e000e100 	.word	0xe000e100

90002758 <_ZN20TouchGFXGeneratedHAL10initializeEv>:
{
90002758:	b538      	push	{r3, r4, r5, lr}
9000275a:	4604      	mov	r4, r0
    HAL::initialize();
9000275c:	f00e ff9f 	bl	9001169e <_ZN8touchgfx3HAL10initializeEv>
    registerEventListener(*(Application::getInstance()));
90002760:	6823      	ldr	r3, [r4, #0]
90002762:	6e5d      	ldr	r5, [r3, #100]	; 0x64
90002764:	f011 fd42 	bl	900141ec <_ZN8touchgfx11Application11getInstanceEv>
90002768:	4601      	mov	r1, r0
9000276a:	4620      	mov	r0, r4
9000276c:	47a8      	blx	r5
    setFrameBufferStartAddresses((void*)frameBuf, (void*)(frameBuf + sizeof(frameBuf) / (sizeof(uint32_t) * 2)), (void*)0);
9000276e:	6823      	ldr	r3, [r4, #0]
90002770:	4a16      	ldr	r2, [pc, #88]	; (900027cc <_ZN20TouchGFXGeneratedHAL10initializeEv+0x74>)
90002772:	f8d3 5088 	ldr.w	r5, [r3, #136]	; 0x88
90002776:	4295      	cmp	r5, r2
90002778:	d11c      	bne.n	900027b4 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x5c>
        frameBuffer0 = reinterpret_cast<uint16_t*>(frameBuffer);
9000277a:	4a15      	ldr	r2, [pc, #84]	; (900027d0 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x78>)
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
9000277c:	2501      	movs	r5, #1
        setAnimationStorage(animationStorage);
9000277e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
        frameBuffer1 = reinterpret_cast<uint16_t*>(doubleBuffer);
90002782:	f502 317f 	add.w	r1, r2, #261120	; 0x3fc00
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
90002786:	4813      	ldr	r0, [pc, #76]	; (900027d4 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x7c>)
        frameBuffer0 = reinterpret_cast<uint16_t*>(frameBuffer);
90002788:	e9c4 210f 	strd	r2, r1, [r4, #60]	; 0x3c
        setAnimationStorage(animationStorage);
9000278c:	4a12      	ldr	r2, [pc, #72]	; (900027d8 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x80>)
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
9000278e:	7005      	strb	r5, [r0, #0]
90002790:	4293      	cmp	r3, r2
90002792:	d116      	bne.n	900027c2 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x6a>
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
90002794:	2300      	movs	r3, #0
        USE_ANIMATION_STORAGE = animationStorage != 0;
90002796:	4a11      	ldr	r2, [pc, #68]	; (900027dc <_ZN20TouchGFXGeneratedHAL10initializeEv+0x84>)
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
90002798:	6463      	str	r3, [r4, #68]	; 0x44
        USE_ANIMATION_STORAGE = animationStorage != 0;
9000279a:	7013      	strb	r3, [r2, #0]
    void addDMA(touchgfx::DMA_Interface& dma) { pDma = &dma; }
9000279c:	6864      	ldr	r4, [r4, #4]
        sizeBufferRGB = sizeOfBuffer;
9000279e:	f44f 2087 	mov.w	r0, #276480	; 0x43800
        mjpegDecoders[index] = &decoder;
900027a2:	4b0f      	ldr	r3, [pc, #60]	; (900027e0 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x88>)
900027a4:	490f      	ldr	r1, [pc, #60]	; (900027e4 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x8c>)
        bufferRGB = buffer;
900027a6:	4a10      	ldr	r2, [pc, #64]	; (900027e8 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x90>)
900027a8:	644c      	str	r4, [r1, #68]	; 0x44
        mjpegDecoders[index] = &decoder;
900027aa:	6059      	str	r1, [r3, #4]
        bufferRGB = buffer;
900027ac:	631a      	str	r2, [r3, #48]	; 0x30
        sizeBufferRGB = sizeOfBuffer;
900027ae:	e9c3 020d 	strd	r0, r2, [r3, #52]	; 0x34
}
900027b2:	bd38      	pop	{r3, r4, r5, pc}
    setFrameBufferStartAddresses((void*)frameBuf, (void*)(frameBuf + sizeof(frameBuf) / (sizeof(uint32_t) * 2)), (void*)0);
900027b4:	4a0d      	ldr	r2, [pc, #52]	; (900027ec <_ZN20TouchGFXGeneratedHAL10initializeEv+0x94>)
900027b6:	2300      	movs	r3, #0
900027b8:	4620      	mov	r0, r4
900027ba:	f5a2 317f 	sub.w	r1, r2, #261120	; 0x3fc00
900027be:	47a8      	blx	r5
900027c0:	e7ec      	b.n	9000279c <_ZN20TouchGFXGeneratedHAL10initializeEv+0x44>
        setAnimationStorage(animationStorage);
900027c2:	2100      	movs	r1, #0
900027c4:	4620      	mov	r0, r4
900027c6:	4798      	blx	r3
900027c8:	e7e8      	b.n	9000279c <_ZN20TouchGFXGeneratedHAL10initializeEv+0x44>
900027ca:	bf00      	nop
900027cc:	900007f1 	.word	0x900007f1
900027d0:	d003fc00 	.word	0xd003fc00
900027d4:	24026262 	.word	0x24026262
900027d8:	90000675 	.word	0x90000675
900027dc:	24026263 	.word	0x24026263
900027e0:	24006d80 	.word	0x24006d80
900027e4:	24006d38 	.word	0x24006d38
900027e8:	d00bf400 	.word	0xd00bf400
900027ec:	d007f800 	.word	0xd007f800

900027f0 <HAL_LTDC_LineEventCallback>:
}

extern "C"
{
    void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef* hltdc)
    {
900027f0:	b510      	push	{r4, lr}
        return instance;
900027f2:	4c14      	ldr	r4, [pc, #80]	; (90002844 <HAL_LTDC_LineEventCallback+0x54>)
        if (!HAL::getInstance())
900027f4:	6823      	ldr	r3, [r4, #0]
900027f6:	b323      	cbz	r3, 90002842 <HAL_LTDC_LineEventCallback+0x52>
        {
            return;
        }

        if (LTDC->LIPCR == lcd_int_active_line)
900027f8:	4b13      	ldr	r3, [pc, #76]	; (90002848 <HAL_LTDC_LineEventCallback+0x58>)
900027fa:	4a14      	ldr	r2, [pc, #80]	; (9000284c <HAL_LTDC_LineEventCallback+0x5c>)
900027fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
900027fe:	8811      	ldrh	r1, [r2, #0]
90002800:	428b      	cmp	r3, r1
90002802:	d00a      	beq.n	9000281a <HAL_LTDC_LineEventCallback+0x2a>
            GPIO::set(GPIO::VSYNC_FREQ);
        }
        else
        {
            //exiting active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
90002804:	f007 ff88 	bl	9000a718 <HAL_LTDC_ProgramLineEvent>
90002808:	6820      	ldr	r0, [r4, #0]
        allowDMATransfers();
9000280a:	6803      	ldr	r3, [r0, #0]
9000280c:	6a1b      	ldr	r3, [r3, #32]
9000280e:	4798      	blx	r3

            // Signal to the framework that display update has finished.
            HAL::getInstance()->frontPorchEntered();
            GPIO::clear(GPIO::VSYNC_FREQ);
90002810:	2000      	movs	r0, #0
        }
    }
90002812:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            GPIO::clear(GPIO::VSYNC_FREQ);
90002816:	f7fd bed1 	b.w	900005bc <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_porch_line);
9000281a:	4b0d      	ldr	r3, [pc, #52]	; (90002850 <HAL_LTDC_LineEventCallback+0x60>)
9000281c:	8819      	ldrh	r1, [r3, #0]
9000281e:	f007 ff7b 	bl	9000a718 <HAL_LTDC_ProgramLineEvent>
        return instance;
90002822:	6822      	ldr	r2, [r4, #0]
        vSyncCnt++;
90002824:	f892 3066 	ldrb.w	r3, [r2, #102]	; 0x66
90002828:	3301      	adds	r3, #1
9000282a:	f882 3066 	strb.w	r3, [r2, #102]	; 0x66
            OSWrappers::signalVSync();
9000282e:	f7ff f8c7 	bl	900019c0 <_ZN8touchgfx10OSWrappers11signalVSyncEv>
            HAL::getInstance()->swapFrameBuffers();
90002832:	6820      	ldr	r0, [r4, #0]
90002834:	f00f fc86 	bl	90012144 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
            GPIO::set(GPIO::VSYNC_FREQ);
90002838:	2000      	movs	r0, #0
    }
9000283a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            GPIO::set(GPIO::VSYNC_FREQ);
9000283e:	f7fd be89 	b.w	90000554 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
    }
90002842:	bd10      	pop	{r4, pc}
90002844:	24026264 	.word	0x24026264
90002848:	50001000 	.word	0x50001000
9000284c:	24006d34 	.word	0x24006d34
90002850:	24006d32 	.word	0x24006d32

90002854 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv>:
    void decoderTaskEntry()
90002854:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
90002858:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 90002914 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0xc0>
9000285c:	b083      	sub	sp, #12
                    stream.doInvalidateOnNextTick = true;
9000285e:	2601      	movs	r6, #1
                    stream.hasMoreFrames = decoder->decodeNextFrame((uint8_t*)decodeBuffers[i], width, height, stride);
90002860:	f44f 7770 	mov.w	r7, #960	; 0x3c0
    void decoderTaskEntry()
90002864:	4604      	mov	r4, r0
90002866:	e024      	b.n	900028b2 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0x5e>
                        decoder->gotoFrame(stream.seek_to_frame);
90002868:	682b      	ldr	r3, [r5, #0]
9000286a:	4628      	mov	r0, r5
9000286c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
9000286e:	4798      	blx	r3
                        stream.seek_to_frame = 0;
90002870:	2300      	movs	r3, #0
90002872:	6223      	str	r3, [r4, #32]
                    stream.hasMoreFrames = decoder->decodeNextFrame((uint8_t*)decodeBuffers[i], width, height, stride);
90002874:	6829      	ldr	r1, [r5, #0]
90002876:	f44f 7390 	mov.w	r3, #288	; 0x120
9000287a:	9700      	str	r7, [sp, #0]
9000287c:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
90002880:	f8d1 9014 	ldr.w	r9, [r1, #20]
90002884:	4628      	mov	r0, r5
90002886:	68a1      	ldr	r1, [r4, #8]
90002888:	47c8      	blx	r9
                    stream.frameCount++;
9000288a:	6923      	ldr	r3, [r4, #16]
                    stream.hasMoreFrames = decoder->decodeNextFrame((uint8_t*)decodeBuffers[i], width, height, stride);
9000288c:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
                    stream.frameCount++;
90002890:	3301      	adds	r3, #1
90002892:	6123      	str	r3, [r4, #16]
                    if (stream.hasMoreFrames)
90002894:	2800      	cmp	r0, #0
90002896:	d033      	beq.n	90002900 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0xac>
                        stream.frameNumber = decoder->getCurrentFrameNumber() - 1; // Points to frame after this
90002898:	682b      	ldr	r3, [r5, #0]
9000289a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
9000289c:	4543      	cmp	r3, r8
9000289e:	d131      	bne.n	90002904 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0xb0>
    virtual uint32_t getCurrentFrameNumber() const { return frameNumber; }
900028a0:	6968      	ldr	r0, [r5, #20]
900028a2:	3801      	subs	r0, #1
                    stream.doDecode = false;
900028a4:	2200      	movs	r2, #0
                        stream.frameNumber = decoder->getCurrentFrameNumber() - 1; // Points to frame after this
900028a6:	60e0      	str	r0, [r4, #12]
                    stream.doDecode = false;
900028a8:	f884 202e 	strb.w	r2, [r4, #46]	; 0x2e
            MUTEX_UNLOCK(mutexBuffers);
900028ac:	6c60      	ldr	r0, [r4, #68]	; 0x44
900028ae:	f00a fe97 	bl	9000d5e0 <osMutexRelease>
            SEM_WAIT(semDecode);
900028b2:	f04f 31ff 	mov.w	r1, #4294967295
900028b6:	6c20      	ldr	r0, [r4, #64]	; 0x40
900028b8:	f00a ff04 	bl	9000d6c4 <osSemaphoreAcquire>
            MUTEX_LOCK(mutexBuffers);
900028bc:	f04f 31ff 	mov.w	r1, #4294967295
900028c0:	6c60      	ldr	r0, [r4, #68]	; 0x44
900028c2:	f00a fe69 	bl	9000d598 <osMutexAcquire>
                if (stream.doDecode)
900028c6:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
900028ca:	2b00      	cmp	r3, #0
900028cc:	d0ee      	beq.n	900028ac <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0x58>
                    if (stream.seek_to_frame > 0)
900028ce:	6a21      	ldr	r1, [r4, #32]
                    MJPEGDecoder* const decoder = mjpegDecoders[i];
900028d0:	6865      	ldr	r5, [r4, #4]
                    stream.doInvalidateOnNextTick = true;
900028d2:	f884 602b 	strb.w	r6, [r4, #43]	; 0x2b
                    if (stream.seek_to_frame > 0)
900028d6:	2900      	cmp	r1, #0
900028d8:	d1c6      	bne.n	90002868 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0x14>
                        if (stream.skip_frames > 0)
900028da:	6a63      	ldr	r3, [r4, #36]	; 0x24
900028dc:	2b00      	cmp	r3, #0
900028de:	d0c9      	beq.n	90002874 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0x20>
                            decoder->gotoFrame(decoder->getCurrentFrameNumber() + stream.skip_frames);
900028e0:	682a      	ldr	r2, [r5, #0]
900028e2:	e9d2 9109 	ldrd	r9, r1, [r2, #36]	; 0x24
900028e6:	4541      	cmp	r1, r8
900028e8:	d10f      	bne.n	9000290a <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0xb6>
900028ea:	6968      	ldr	r0, [r5, #20]
900028ec:	18c1      	adds	r1, r0, r3
900028ee:	4628      	mov	r0, r5
900028f0:	47c8      	blx	r9
                            stream.frameCount += stream.skip_frames;
900028f2:	6923      	ldr	r3, [r4, #16]
900028f4:	6a61      	ldr	r1, [r4, #36]	; 0x24
                            stream.skip_frames = 0;
900028f6:	2200      	movs	r2, #0
                            stream.frameCount += stream.skip_frames;
900028f8:	440b      	add	r3, r1
                            stream.skip_frames = 0;
900028fa:	6262      	str	r2, [r4, #36]	; 0x24
                            stream.frameCount += stream.skip_frames;
900028fc:	6123      	str	r3, [r4, #16]
900028fe:	e7b9      	b.n	90002874 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0x20>
90002900:	2001      	movs	r0, #1
90002902:	e7cf      	b.n	900028a4 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0x50>
                        stream.frameNumber = decoder->getCurrentFrameNumber() - 1; // Points to frame after this
90002904:	4628      	mov	r0, r5
90002906:	4798      	blx	r3
90002908:	e7cb      	b.n	900028a2 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0x4e>
                            decoder->gotoFrame(decoder->getCurrentFrameNumber() + stream.skip_frames);
9000290a:	4628      	mov	r0, r5
9000290c:	4788      	blx	r1
9000290e:	6a63      	ldr	r3, [r4, #36]	; 0x24
90002910:	e7ec      	b.n	900028ec <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0x98>
90002912:	bf00      	nop
90002914:	90000969 	.word	0x90000969

90002918 <videoTaskFunc>:
    videoController.decoderTaskEntry();
90002918:	4801      	ldr	r0, [pc, #4]	; (90002920 <videoTaskFunc+0x8>)
{
9000291a:	b508      	push	{r3, lr}
    videoController.decoderTaskEntry();
9000291c:	f7ff ff9a 	bl	90002854 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv>
90002920:	24006d80 	.word	0x24006d80

90002924 <_GLOBAL__sub_I_mjpegdecoder1>:
}
90002924:	b538      	push	{r3, r4, r5, lr}
HardwareMJPEGDecoder mjpegdecoder1;
90002926:	4815      	ldr	r0, [pc, #84]	; (9000297c <_GLOBAL__sub_I_mjpegdecoder1+0x58>)
        Stream() : frameNumber(0), frameCount(0), tickCount(0), frame_rate_video(0), frame_rate_ticks(0),
90002928:	2500      	movs	r5, #0
9000292a:	f7fe fc2f 	bl	9000118c <_ZN20HardwareMJPEGDecoderC1Ev>
          allowSkipFrames(false), firstDrawThisFrame(true), uiHasMutex(false), semDecode(0), mutexBuffers(0)
9000292e:	4c14      	ldr	r4, [pc, #80]	; (90002980 <_GLOBAL__sub_I_mjpegdecoder1+0x5c>)
90002930:	4914      	ldr	r1, [pc, #80]	; (90002984 <_GLOBAL__sub_I_mjpegdecoder1+0x60>)
                   doInvalidateOnNextTick(false), hasMoreFrames(false), repeat(true), doDecode(false) {}
90002932:	f44f 7380 	mov.w	r3, #256	; 0x100
        semDecode = SEM_CREATE(); // Binary semaphore
90002936:	462a      	mov	r2, r5
90002938:	2001      	movs	r0, #1
          allowSkipFrames(false), firstDrawThisFrame(true), uiHasMutex(false), semDecode(0), mutexBuffers(0)
9000293a:	6021      	str	r1, [r4, #0]
        semDecode = SEM_CREATE(); // Binary semaphore
9000293c:	4629      	mov	r1, r5
                   doInvalidateOnNextTick(false), hasMoreFrames(false), repeat(true), doDecode(false) {}
9000293e:	85a3      	strh	r3, [r4, #44]	; 0x2c
          allowSkipFrames(false), firstDrawThisFrame(true), uiHasMutex(false), semDecode(0), mutexBuffers(0)
90002940:	87a3      	strh	r3, [r4, #60]	; 0x3c
        Stream() : frameNumber(0), frameCount(0), tickCount(0), frame_rate_video(0), frame_rate_ticks(0),
90002942:	60e5      	str	r5, [r4, #12]
                   isActive(false), isPlaying(false), isShowingOneFrame(false),
90002944:	62a5      	str	r5, [r4, #40]	; 0x28
                   doInvalidateOnNextTick(false), hasMoreFrames(false), repeat(true), doDecode(false) {}
90002946:	f884 502e 	strb.w	r5, [r4, #46]	; 0x2e
        : VideoController(), bufferRGB(0), sizeBufferRGB(0), topBufferRGB(0),
9000294a:	63a5      	str	r5, [r4, #56]	; 0x38
          allowSkipFrames(false), firstDrawThisFrame(true), uiHasMutex(false), semDecode(0), mutexBuffers(0)
9000294c:	f884 503e 	strb.w	r5, [r4, #62]	; 0x3e
        Stream() : frameNumber(0), frameCount(0), tickCount(0), frame_rate_video(0), frame_rate_ticks(0),
90002950:	e9c4 5504 	strd	r5, r5, [r4, #16]
90002954:	e9c4 5506 	strd	r5, r5, [r4, #24]
                   seek_to_frame(0), skip_frames(0),
90002958:	e9c4 5508 	strd	r5, r5, [r4, #32]
        : VideoController(), bufferRGB(0), sizeBufferRGB(0), topBufferRGB(0),
9000295c:	e9c4 550c 	strd	r5, r5, [r4, #48]	; 0x30
          allowSkipFrames(false), firstDrawThisFrame(true), uiHasMutex(false), semDecode(0), mutexBuffers(0)
90002960:	e9c4 5510 	strd	r5, r5, [r4, #64]	; 0x40
90002964:	e9c4 5501 	strd	r5, r5, [r4, #4]
        semDecode = SEM_CREATE(); // Binary semaphore
90002968:	f00a fe5c 	bl	9000d624 <osSemaphoreNew>
9000296c:	4603      	mov	r3, r0
        mutexBuffers = MUTEX_CREATE();
9000296e:	4628      	mov	r0, r5
        semDecode = SEM_CREATE(); // Binary semaphore
90002970:	6423      	str	r3, [r4, #64]	; 0x40
        mutexBuffers = MUTEX_CREATE();
90002972:	f00a fdd1 	bl	9000d518 <osMutexNew>
90002976:	6460      	str	r0, [r4, #68]	; 0x44
}
90002978:	bd38      	pop	{r3, r4, r5, pc}
9000297a:	bf00      	nop
9000297c:	24006d38 	.word	0x24006d38
90002980:	24006d80 	.word	0x24006d80
90002984:	90025854 	.word	0x90025854

90002988 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks>:
static uint32_t TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks(uint8_t *pInBuffer,
                                      uint8_t *pOutBuffer,
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{
90002988:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  int32_t c_red, c_blue, c_green;

  uint8_t *pOutAddr, *pOutAddr2;
  uint8_t *pChrom, *pLum;

  numberMCU = DataCount / YCBCR_420_BLOCK_SIZE;
9000298c:	4c7e      	ldr	r4, [pc, #504]	; (90002b88 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x200>)
{
9000298e:	b08d      	sub	sp, #52	; 0x34
  numberMCU = DataCount / YCBCR_420_BLOCK_SIZE;
90002990:	fba4 4303 	umull	r4, r3, r4, r3
{
90002994:	9109      	str	r1, [sp, #36]	; 0x24
  numberMCU = DataCount / YCBCR_420_BLOCK_SIZE;
90002996:	0a19      	lsrs	r1, r3, #8
{
90002998:	9208      	str	r2, [sp, #32]
  currentMCU = BlockIndex;

  while(currentMCU < (numberMCU + BlockIndex))
9000299a:	eb02 2313 	add.w	r3, r2, r3, lsr #8
{
9000299e:	9006      	str	r0, [sp, #24]
  numberMCU = DataCount / YCBCR_420_BLOCK_SIZE;
900029a0:	ee07 1a90 	vmov	s15, r1
  while(currentMCU < (numberMCU + BlockIndex))
900029a4:	4293      	cmp	r3, r2
900029a6:	930b      	str	r3, [sp, #44]	; 0x2c
900029a8:	f240 80e9 	bls.w	90002b7e <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x1f6>
  {
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*16;
900029ac:	4b77      	ldr	r3, [pc, #476]	; (90002b8c <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x204>)
900029ae:	f8df 81ec 	ldr.w	r8, [pc, #492]	; 90002b9c <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x214>
900029b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
900029b4:	f8df 91e8 	ldr.w	r9, [pc, #488]	; 90002ba0 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x218>
900029b8:	930a      	str	r3, [sp, #40]	; 0x28
900029ba:	9a06      	ldr	r2, [sp, #24]
    //tgfx: Set stride to the full width of the RGB Buffer, and not the video itself.
    JPEG_ConvertorParams.ScaledWidth = 480 * 2;

    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);

    currentMCU++;
900029bc:	f04f 0e02 	mov.w	lr, #2
900029c0:	9908      	ldr	r1, [sp, #32]
900029c2:	f502 7080 	add.w	r0, r2, #256	; 0x100
900029c6:	010b      	lsls	r3, r1, #4
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*16;
900029c8:	3101      	adds	r1, #1
    currentMCU++;
900029ca:	e9cd 2003 	strd	r2, r0, [sp, #12]
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*16;
900029ce:	980a      	ldr	r0, [sp, #40]	; 0x28
900029d0:	9108      	str	r1, [sp, #32]
900029d2:	fbb3 f2f0 	udiv	r2, r3, r0
    yRef = ((currentMCU *16) % JPEG_ConvertorParams.WidthExtend);
900029d6:	fb00 3312 	mls	r3, r0, r2, r3
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
900029da:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
900029de:	005b      	lsls	r3, r3, #1
900029e0:	eb03 2382 	add.w	r3, r3, r2, lsl #10
900029e4:	9301      	str	r3, [sp, #4]

    pChrom = pInBuffer + 256; /* pChroma = pInBuffer + 4*64 */

    pLum = pInBuffer;

    for(i= 0; i <  16; i+=2)
900029e6:	e009      	b.n	900029fc <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x74>
      if(i == 8)
      {
        pLum = pInBuffer + 128;
      }

      if(refline < JPEG_ConvertorParams.ScaledWidth * 288)
900029e8:	9b01      	ldr	r3, [sp, #4]
900029ea:	f5b3 2f87 	cmp.w	r3, #276480	; 0x43800
900029ee:	d30f      	bcc.n	90002a10 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x88>
    for(i= 0; i <  16; i+=2)
900029f0:	f1be 0f10 	cmp.w	lr, #16
900029f4:	f000 80b6 	beq.w	90002b64 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x1dc>
900029f8:	f10e 0e02 	add.w	lr, lr, #2
      if(i == 8)
900029fc:	f1be 0f0a 	cmp.w	lr, #10
90002a00:	d1f2      	bne.n	900029e8 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x60>
        pLum = pInBuffer + 128;
90002a02:	9b06      	ldr	r3, [sp, #24]
90002a04:	3380      	adds	r3, #128	; 0x80
90002a06:	9303      	str	r3, [sp, #12]
      if(refline < JPEG_ConvertorParams.ScaledWidth * 288)
90002a08:	9b01      	ldr	r3, [sp, #4]
90002a0a:	f5b3 2f87 	cmp.w	r3, #276480	; 0x43800
90002a0e:	d2f3      	bcs.n	900029f8 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x70>
      {
        pOutAddr = pOutBuffer + refline;
90002a10:	9a01      	ldr	r2, [sp, #4]
90002a12:	9b09      	ldr	r3, [sp, #36]	; 0x24
90002a14:	f8cd e01c 	str.w	lr, [sp, #28]
90002a18:	4413      	add	r3, r2
90002a1a:	e9dd 2103 	ldrd	r2, r1, [sp, #12]
90002a1e:	f103 0c10 	add.w	ip, r3, #16
90002a22:	3330      	adds	r3, #48	; 0x30
90002a24:	4696      	mov	lr, r2
90002a26:	9102      	str	r1, [sp, #8]
90002a28:	9305      	str	r3, [sp, #20]
90002a2a:	9b02      	ldr	r3, [sp, #8]
90002a2c:	f50c 766c 	add.w	r6, ip, #944	; 0x3b0
90002a30:	f1ac 0510 	sub.w	r5, ip, #16
        pOutAddr2 = pOutAddr + JPEG_ConvertorParams.ScaledWidth;

        for(k= 0; k<2; k++)
        {
          for(j=0; j < 8; j+=2)
90002a34:	4674      	mov	r4, lr
90002a36:	1e5f      	subs	r7, r3, #1
          {
            cbcomp = (int32_t)(*(pChrom));
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
90002a38:	f817 3f01 	ldrb.w	r3, [r7, #1]!
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
#endif /* JPEG_RGB_FORMAT */

            pOutAddr += JPEG_BYTES_PER_PIXEL * 2;
90002a3c:	3504      	adds	r5, #4
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
90002a3e:	4954      	ldr	r1, [pc, #336]	; (90002b90 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x208>)
          for(j=0; j < 8; j+=2)
90002a40:	3402      	adds	r4, #2
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));
90002a42:	f897 0040 	ldrb.w	r0, [r7, #64]	; 0x40
            pOutAddr2 += JPEG_BYTES_PER_PIXEL * 2;
90002a46:	3604      	adds	r6, #4
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
90002a48:	f851 a023 	ldr.w	sl, [r1, r3, lsl #2]
          for(j=0; j < 8; j+=2)
90002a4c:	4565      	cmp	r5, ip
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
90002a4e:	4951      	ldr	r1, [pc, #324]	; (90002b94 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x20c>)
            ycomp = (int32_t)(*(pLum +j));
90002a50:	f814 2c02 	ldrb.w	r2, [r4, #-2]
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
90002a54:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
90002a58:	f858 3020 	ldr.w	r3, [r8, r0, lsl #2]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90002a5c:	4449      	add	r1, r9
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
90002a5e:	449a      	add	sl, r3
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));
90002a60:	4b4d      	ldr	r3, [pc, #308]	; (90002b98 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x210>)
90002a62:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002a66:	eb09 432a 	add.w	r3, r9, sl, asr #16
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90002a6a:	eb01 0a02 	add.w	sl, r1, r2
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002a6e:	4448      	add	r0, r9
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002a70:	eb03 0b02 	add.w	fp, r3, r2
90002a74:	f89a a100 	ldrb.w	sl, [sl, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002a78:	4402      	add	r2, r0
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002a7a:	f89b b100 	ldrb.w	fp, [fp, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002a7e:	f892 2100 	ldrb.w	r2, [r2, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002a82:	ea4f 0b9b 	mov.w	fp, fp, lsr #2
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002a86:	ea4f 02d2 	mov.w	r2, r2, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002a8a:	ea4f 1b4b 	mov.w	fp, fp, lsl #5
90002a8e:	ea4b 22c2 	orr.w	r2, fp, r2, lsl #11
90002a92:	ea42 02da 	orr.w	r2, r2, sl, lsr #3
            *(__IO uint16_t *)pOutAddr =
90002a96:	f825 2c04 	strh.w	r2, [r5, #-4]
            ycomp = (int32_t)(*(pLum +j +1));
90002a9a:	f814 ac01 	ldrb.w	sl, [r4, #-1]
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002a9e:	eb03 020a 	add.w	r2, r3, sl
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002aa2:	eb00 0b0a 	add.w	fp, r0, sl
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90002aa6:	448a      	add	sl, r1
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002aa8:	f892 2100 	ldrb.w	r2, [r2, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002aac:	f89b b100 	ldrb.w	fp, [fp, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002ab0:	ea4f 0292 	mov.w	r2, r2, lsr #2
90002ab4:	f89a a100 	ldrb.w	sl, [sl, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002ab8:	ea4f 0bdb 	mov.w	fp, fp, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002abc:	ea4f 1242 	mov.w	r2, r2, lsl #5
90002ac0:	ea42 22cb 	orr.w	r2, r2, fp, lsl #11
90002ac4:	ea42 02da 	orr.w	r2, r2, sl, lsr #3
            *((__IO uint16_t *)(pOutAddr + 2)) =
90002ac8:	f825 2c02 	strh.w	r2, [r5, #-2]
            ycomp = (int32_t)(*(pLum +j +8));
90002acc:	f894 a006 	ldrb.w	sl, [r4, #6]
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002ad0:	eb03 020a 	add.w	r2, r3, sl
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002ad4:	eb00 0b0a 	add.w	fp, r0, sl
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90002ad8:	448a      	add	sl, r1
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002ada:	f892 2100 	ldrb.w	r2, [r2, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002ade:	f89b b100 	ldrb.w	fp, [fp, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002ae2:	ea4f 0292 	mov.w	r2, r2, lsr #2
90002ae6:	f89a a100 	ldrb.w	sl, [sl, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002aea:	ea4f 0bdb 	mov.w	fp, fp, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002aee:	ea4f 1242 	mov.w	r2, r2, lsl #5
90002af2:	ea42 22cb 	orr.w	r2, r2, fp, lsl #11
90002af6:	ea42 02da 	orr.w	r2, r2, sl, lsr #3
            *(__IO uint16_t *)pOutAddr2 =
90002afa:	f826 2c04 	strh.w	r2, [r6, #-4]
            ycomp = (int32_t)(*(pLum +j +8 +1));
90002afe:	79e2      	ldrb	r2, [r4, #7]
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002b00:	4413      	add	r3, r2
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002b02:	4410      	add	r0, r2
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90002b04:	4411      	add	r1, r2
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002b06:	f893 3100 	ldrb.w	r3, [r3, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002b0a:	f890 2100 	ldrb.w	r2, [r0, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002b0e:	ea4f 0393 	mov.w	r3, r3, lsr #2
90002b12:	f891 1100 	ldrb.w	r1, [r1, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002b16:	ea4f 02d2 	mov.w	r2, r2, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002b1a:	ea4f 1343 	mov.w	r3, r3, lsl #5
90002b1e:	ea43 23c2 	orr.w	r3, r3, r2, lsl #11
90002b22:	ea43 03d1 	orr.w	r3, r3, r1, lsr #3
            *((__IO uint16_t *)(pOutAddr2 +2)) =
90002b26:	f826 3c02 	strh.w	r3, [r6, #-2]
          for(j=0; j < 8; j+=2)
90002b2a:	d185      	bne.n	90002a38 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0xb0>

            pChrom++;
90002b2c:	9b02      	ldr	r3, [sp, #8]
        for(k= 0; k<2; k++)
90002b2e:	f105 0c10 	add.w	ip, r5, #16
          }
          pLum += 64;
90002b32:	f10e 0e40 	add.w	lr, lr, #64	; 0x40
            pChrom++;
90002b36:	3304      	adds	r3, #4
90002b38:	9302      	str	r3, [sp, #8]
        for(k= 0; k<2; k++)
90002b3a:	9b05      	ldr	r3, [sp, #20]
90002b3c:	4563      	cmp	r3, ip
90002b3e:	f47f af74 	bne.w	90002a2a <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0xa2>
            pChrom++;
90002b42:	9b04      	ldr	r3, [sp, #16]
90002b44:	f8dd e01c 	ldr.w	lr, [sp, #28]
90002b48:	3308      	adds	r3, #8
    for(i= 0; i <  16; i+=2)
90002b4a:	f1be 0f10 	cmp.w	lr, #16
            pChrom++;
90002b4e:	9304      	str	r3, [sp, #16]
        }

        pLum = pLum - 128 + 16;
90002b50:	9b03      	ldr	r3, [sp, #12]
90002b52:	f103 0310 	add.w	r3, r3, #16
90002b56:	9303      	str	r3, [sp, #12]

        refline += 2*JPEG_ConvertorParams.ScaledWidth;
90002b58:	9b01      	ldr	r3, [sp, #4]
90002b5a:	f503 63f0 	add.w	r3, r3, #1920	; 0x780
90002b5e:	9301      	str	r3, [sp, #4]
    for(i= 0; i <  16; i+=2)
90002b60:	f47f af4a 	bne.w	900029f8 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x70>
      }
    }

    pInBuffer +=  YCBCR_420_BLOCK_SIZE;
90002b64:	9b06      	ldr	r3, [sp, #24]
  while(currentMCU < (numberMCU + BlockIndex))
90002b66:	9a08      	ldr	r2, [sp, #32]
    pInBuffer +=  YCBCR_420_BLOCK_SIZE;
90002b68:	f503 73c0 	add.w	r3, r3, #384	; 0x180
90002b6c:	9306      	str	r3, [sp, #24]
  while(currentMCU < (numberMCU + BlockIndex))
90002b6e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
90002b70:	4293      	cmp	r3, r2
90002b72:	f47f af22 	bne.w	900029ba <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x32>
90002b76:	f44f 7370 	mov.w	r3, #960	; 0x3c0
90002b7a:	4a04      	ldr	r2, [pc, #16]	; (90002b8c <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x204>)
90002b7c:	6293      	str	r3, [r2, #40]	; 0x28
  }
  return numberMCU;
}
90002b7e:	ee17 0a90 	vmov	r0, s15
90002b82:	b00d      	add	sp, #52	; 0x34
90002b84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90002b88:	aaaaaaab 	.word	0xaaaaaaab
90002b8c:	24009a48 	.word	0x24009a48
90002b90:	24007dc8 	.word	0x24007dc8
90002b94:	240079c8 	.word	0x240079c8
90002b98:	240085c8 	.word	0x240085c8
90002b9c:	240081c8 	.word	0x240081c8
90002ba0:	9002588c 	.word	0x9002588c

90002ba4 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks>:
static uint32_t JPEG_MCU_YCbCr422_ARGB_ConvertBlocks(uint8_t *pInBuffer,
                                      uint8_t *pOutBuffer,
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{
90002ba4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  int32_t c_red, c_blue, c_green;

  uint8_t *pOutAddr;
  uint8_t *pChrom, *pLum;

  numberMCU = DataCount / YCBCR_422_BLOCK_SIZE;
90002ba8:	0a1c      	lsrs	r4, r3, #8
{
90002baa:	b08d      	sub	sp, #52	; 0x34
  currentMCU = BlockIndex;

  while(currentMCU < (numberMCU + BlockIndex))
90002bac:	eb02 2313 	add.w	r3, r2, r3, lsr #8
  numberMCU = DataCount / YCBCR_422_BLOCK_SIZE;
90002bb0:	ee07 4a90 	vmov	s15, r4
{
90002bb4:	9208      	str	r2, [sp, #32]
  while(currentMCU < (numberMCU + BlockIndex))
90002bb6:	429a      	cmp	r2, r3
{
90002bb8:	9007      	str	r0, [sp, #28]
90002bba:	9109      	str	r1, [sp, #36]	; 0x24
  while(currentMCU < (numberMCU + BlockIndex))
90002bbc:	930b      	str	r3, [sp, #44]	; 0x2c
90002bbe:	f080 814a 	bcs.w	90002e56 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x2b2>
  {
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*8;
90002bc2:	4ba7      	ldr	r3, [pc, #668]	; (90002e60 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x2bc>)
90002bc4:	4da7      	ldr	r5, [pc, #668]	; (90002e64 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x2c0>)
90002bc6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
90002bc8:	f8df 929c 	ldr.w	r9, [pc, #668]	; 90002e68 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x2c4>
90002bcc:	920a      	str	r2, [sp, #40]	; 0x28

    yRef = ((currentMCU *16) % JPEG_ConvertorParams.WidthExtend);

    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
90002bce:	6a9a      	ldr	r2, [r3, #40]	; 0x28

    pLum = pInBuffer;

    for(i= 0; i <  8; i++)
    {
       if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
90002bd0:	691b      	ldr	r3, [r3, #16]
90002bd2:	f8df a298 	ldr.w	sl, [pc, #664]	; 90002e6c <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x2c8>
90002bd6:	f8df b298 	ldr.w	fp, [pc, #664]	; 90002e70 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x2cc>
90002bda:	f8df 8298 	ldr.w	r8, [pc, #664]	; 90002e74 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x2d0>
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
90002bde:	9206      	str	r2, [sp, #24]
       if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
90002be0:	9301      	str	r3, [sp, #4]
90002be2:	e008      	b.n	90002bf6 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x52>

        refline += JPEG_ConvertorParams.ScaledWidth;
      }
    }

    pInBuffer +=  YCBCR_422_BLOCK_SIZE;
90002be4:	9b07      	ldr	r3, [sp, #28]
  while(currentMCU < (numberMCU + BlockIndex))
90002be6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    pInBuffer +=  YCBCR_422_BLOCK_SIZE;
90002be8:	f503 7380 	add.w	r3, r3, #256	; 0x100
90002bec:	9307      	str	r3, [sp, #28]
  while(currentMCU < (numberMCU + BlockIndex))
90002bee:	9b08      	ldr	r3, [sp, #32]
90002bf0:	4293      	cmp	r3, r2
90002bf2:	f000 8130 	beq.w	90002e56 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x2b2>
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*8;
90002bf6:	9a07      	ldr	r2, [sp, #28]
90002bf8:	9908      	ldr	r1, [sp, #32]
90002bfa:	f102 0080 	add.w	r0, r2, #128	; 0x80
90002bfe:	010b      	lsls	r3, r1, #4
90002c00:	3101      	adds	r1, #1
    currentMCU++;
90002c02:	e9cd 0202 	strd	r0, r2, [sp, #8]
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*8;
90002c06:	980a      	ldr	r0, [sp, #40]	; 0x28
90002c08:	9108      	str	r1, [sp, #32]
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
90002c0a:	9906      	ldr	r1, [sp, #24]
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*8;
90002c0c:	fbb3 f2f0 	udiv	r2, r3, r0
    yRef = ((currentMCU *16) % JPEG_ConvertorParams.WidthExtend);
90002c10:	fb00 3312 	mls	r3, r0, r2, r3
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
90002c14:	fb01 f202 	mul.w	r2, r1, r2
90002c18:	005b      	lsls	r3, r3, #1
90002c1a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
90002c1e:	9300      	str	r3, [sp, #0]
    currentMCU++;
90002c20:	2308      	movs	r3, #8
90002c22:	9305      	str	r3, [sp, #20]
       if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
90002c24:	e9dd 2300 	ldrd	r2, r3, [sp]
90002c28:	4293      	cmp	r3, r2
90002c2a:	d9db      	bls.n	90002be4 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x40>
        pOutAddr = pOutBuffer + refline;
90002c2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
90002c2e:	4413      	add	r3, r2
        for(k= 0; k<2; k++)
90002c30:	9a03      	ldr	r2, [sp, #12]
90002c32:	f102 0140 	add.w	r1, r2, #64	; 0x40
90002c36:	9a02      	ldr	r2, [sp, #8]
90002c38:	f103 0020 	add.w	r0, r3, #32
90002c3c:	3204      	adds	r2, #4
90002c3e:	9004      	str	r0, [sp, #16]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));
90002c40:	f892 003c 	ldrb.w	r0, [r2, #60]	; 0x3c
90002c44:	3310      	adds	r3, #16
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
90002c46:	f812 4c04 	ldrb.w	r4, [r2, #-4]
        for(k= 0; k<2; k++)
90002c4a:	3140      	adds	r1, #64	; 0x40
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));
90002c4c:	f859 7020 	ldr.w	r7, [r9, r0, lsl #2]
        for(k= 0; k<2; k++)
90002c50:	3204      	adds	r2, #4
            ycomp = (int32_t)(*(pLum +j));
90002c52:	f811 cc80 	ldrb.w	ip, [r1, #-128]
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
90002c56:	f855 6024 	ldr.w	r6, [r5, r4, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002c5a:	4447      	add	r7, r8
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
90002c5c:	f85b 4024 	ldr.w	r4, [fp, r4, lsl #2]
90002c60:	f85a 0020 	ldr.w	r0, [sl, r0, lsl #2]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90002c64:	4446      	add	r6, r8
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
90002c66:	4420      	add	r0, r4
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002c68:	eb07 040c 	add.w	r4, r7, ip
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002c6c:	eb08 4020 	add.w	r0, r8, r0, asr #16
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002c70:	f894 e100 	ldrb.w	lr, [r4, #256]	; 0x100
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90002c74:	eb06 040c 	add.w	r4, r6, ip
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002c78:	4484      	add	ip, r0
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002c7a:	ea4f 0ede 	mov.w	lr, lr, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002c7e:	f894 4100 	ldrb.w	r4, [r4, #256]	; 0x100
90002c82:	f89c c100 	ldrb.w	ip, [ip, #256]	; 0x100
90002c86:	08e4      	lsrs	r4, r4, #3
90002c88:	ea4f 0c9c 	mov.w	ip, ip, lsr #2
90002c8c:	ea44 24ce 	orr.w	r4, r4, lr, lsl #11
90002c90:	ea44 144c 	orr.w	r4, r4, ip, lsl #5
            *(__IO uint16_t *)pOutAddr =
90002c94:	f823 4c10 	strh.w	r4, [r3, #-16]
            ycomp = (int32_t)(*(pLum +j +1));
90002c98:	f811 4c7f 	ldrb.w	r4, [r1, #-127]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90002c9c:	4426      	add	r6, r4
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002c9e:	4427      	add	r7, r4
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002ca0:	4404      	add	r4, r0
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002ca2:	f897 7100 	ldrb.w	r7, [r7, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002ca6:	f896 0100 	ldrb.w	r0, [r6, #256]	; 0x100
90002caa:	f894 4100 	ldrb.w	r4, [r4, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002cae:	08fe      	lsrs	r6, r7, #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002cb0:	08c0      	lsrs	r0, r0, #3
90002cb2:	08a4      	lsrs	r4, r4, #2
90002cb4:	ea40 20c6 	orr.w	r0, r0, r6, lsl #11
90002cb8:	ea40 1044 	orr.w	r0, r0, r4, lsl #5
            *((__IO uint16_t *)(pOutAddr + 2)) =
90002cbc:	f823 0c0e 	strh.w	r0, [r3, #-14]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));
90002cc0:	f892 0039 	ldrb.w	r0, [r2, #57]	; 0x39
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
90002cc4:	f812 4c07 	ldrb.w	r4, [r2, #-7]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));
90002cc8:	f859 7020 	ldr.w	r7, [r9, r0, lsl #2]
            ycomp = (int32_t)(*(pLum +j));
90002ccc:	f811 cc7e 	ldrb.w	ip, [r1, #-126]
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
90002cd0:	f855 6024 	ldr.w	r6, [r5, r4, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002cd4:	4447      	add	r7, r8
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
90002cd6:	f85b 4024 	ldr.w	r4, [fp, r4, lsl #2]
90002cda:	f85a 0020 	ldr.w	r0, [sl, r0, lsl #2]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90002cde:	4446      	add	r6, r8
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
90002ce0:	4420      	add	r0, r4
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002ce2:	eb07 040c 	add.w	r4, r7, ip
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002ce6:	eb08 4020 	add.w	r0, r8, r0, asr #16
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002cea:	f894 e100 	ldrb.w	lr, [r4, #256]	; 0x100
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90002cee:	eb06 040c 	add.w	r4, r6, ip
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002cf2:	4484      	add	ip, r0
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002cf4:	ea4f 0ede 	mov.w	lr, lr, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002cf8:	f894 4100 	ldrb.w	r4, [r4, #256]	; 0x100
90002cfc:	f89c c100 	ldrb.w	ip, [ip, #256]	; 0x100
90002d00:	08e4      	lsrs	r4, r4, #3
90002d02:	ea4f 0c9c 	mov.w	ip, ip, lsr #2
90002d06:	ea44 24ce 	orr.w	r4, r4, lr, lsl #11
90002d0a:	ea44 144c 	orr.w	r4, r4, ip, lsl #5
            *(__IO uint16_t *)pOutAddr =
90002d0e:	f823 4c0c 	strh.w	r4, [r3, #-12]
            ycomp = (int32_t)(*(pLum +j +1));
90002d12:	f811 4c7d 	ldrb.w	r4, [r1, #-125]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90002d16:	4426      	add	r6, r4
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002d18:	4427      	add	r7, r4
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002d1a:	4404      	add	r4, r0
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002d1c:	f897 7100 	ldrb.w	r7, [r7, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002d20:	f896 0100 	ldrb.w	r0, [r6, #256]	; 0x100
90002d24:	f894 4100 	ldrb.w	r4, [r4, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002d28:	08fe      	lsrs	r6, r7, #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002d2a:	08c0      	lsrs	r0, r0, #3
90002d2c:	08a4      	lsrs	r4, r4, #2
90002d2e:	ea40 20c6 	orr.w	r0, r0, r6, lsl #11
90002d32:	ea40 1044 	orr.w	r0, r0, r4, lsl #5
            *((__IO uint16_t *)(pOutAddr + 2)) =
90002d36:	f823 0c0a 	strh.w	r0, [r3, #-10]
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
90002d3a:	f812 4c06 	ldrb.w	r4, [r2, #-6]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));
90002d3e:	f892 003a 	ldrb.w	r0, [r2, #58]	; 0x3a
            ycomp = (int32_t)(*(pLum +j));
90002d42:	f811 cc7c 	ldrb.w	ip, [r1, #-124]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));
90002d46:	f859 7020 	ldr.w	r7, [r9, r0, lsl #2]
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
90002d4a:	f855 6024 	ldr.w	r6, [r5, r4, lsl #2]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
90002d4e:	f85a 0020 	ldr.w	r0, [sl, r0, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002d52:	4447      	add	r7, r8
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
90002d54:	f85b 4024 	ldr.w	r4, [fp, r4, lsl #2]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90002d58:	4446      	add	r6, r8
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
90002d5a:	4420      	add	r0, r4
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002d5c:	eb07 040c 	add.w	r4, r7, ip
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002d60:	eb08 4020 	add.w	r0, r8, r0, asr #16
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002d64:	f894 e100 	ldrb.w	lr, [r4, #256]	; 0x100
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90002d68:	eb06 040c 	add.w	r4, r6, ip
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002d6c:	4484      	add	ip, r0
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002d6e:	ea4f 0ede 	mov.w	lr, lr, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002d72:	f894 4100 	ldrb.w	r4, [r4, #256]	; 0x100
90002d76:	f89c c100 	ldrb.w	ip, [ip, #256]	; 0x100
90002d7a:	08e4      	lsrs	r4, r4, #3
90002d7c:	ea4f 0c9c 	mov.w	ip, ip, lsr #2
90002d80:	ea44 24ce 	orr.w	r4, r4, lr, lsl #11
90002d84:	ea44 144c 	orr.w	r4, r4, ip, lsl #5
            *(__IO uint16_t *)pOutAddr =
90002d88:	f823 4c08 	strh.w	r4, [r3, #-8]
            ycomp = (int32_t)(*(pLum +j +1));
90002d8c:	f811 4c7b 	ldrb.w	r4, [r1, #-123]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90002d90:	4426      	add	r6, r4
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002d92:	4427      	add	r7, r4
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002d94:	4404      	add	r4, r0
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002d96:	f897 7100 	ldrb.w	r7, [r7, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002d9a:	f896 0100 	ldrb.w	r0, [r6, #256]	; 0x100
90002d9e:	f894 4100 	ldrb.w	r4, [r4, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002da2:	08fe      	lsrs	r6, r7, #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002da4:	08c0      	lsrs	r0, r0, #3
90002da6:	08a4      	lsrs	r4, r4, #2
90002da8:	ea40 20c6 	orr.w	r0, r0, r6, lsl #11
90002dac:	ea40 1044 	orr.w	r0, r0, r4, lsl #5
            *((__IO uint16_t *)(pOutAddr + 2)) =
90002db0:	f823 0c06 	strh.w	r0, [r3, #-6]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));
90002db4:	f892 003b 	ldrb.w	r0, [r2, #59]	; 0x3b
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
90002db8:	f812 4c05 	ldrb.w	r4, [r2, #-5]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));
90002dbc:	f859 7020 	ldr.w	r7, [r9, r0, lsl #2]
            ycomp = (int32_t)(*(pLum +j));
90002dc0:	f811 cc7a 	ldrb.w	ip, [r1, #-122]
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
90002dc4:	f855 6024 	ldr.w	r6, [r5, r4, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002dc8:	4447      	add	r7, r8
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
90002dca:	f85b 4024 	ldr.w	r4, [fp, r4, lsl #2]
90002dce:	f85a 0020 	ldr.w	r0, [sl, r0, lsl #2]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90002dd2:	4446      	add	r6, r8
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
90002dd4:	4420      	add	r0, r4
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002dd6:	eb07 040c 	add.w	r4, r7, ip
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002dda:	eb08 4020 	add.w	r0, r8, r0, asr #16
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002dde:	f894 e100 	ldrb.w	lr, [r4, #256]	; 0x100
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90002de2:	eb06 040c 	add.w	r4, r6, ip
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002de6:	4484      	add	ip, r0
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002de8:	ea4f 0ede 	mov.w	lr, lr, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002dec:	f894 4100 	ldrb.w	r4, [r4, #256]	; 0x100
90002df0:	f89c c100 	ldrb.w	ip, [ip, #256]	; 0x100
90002df4:	08e4      	lsrs	r4, r4, #3
90002df6:	ea4f 0c9c 	mov.w	ip, ip, lsr #2
90002dfa:	ea44 24ce 	orr.w	r4, r4, lr, lsl #11
90002dfe:	ea44 144c 	orr.w	r4, r4, ip, lsl #5
            *(__IO uint16_t *)pOutAddr =
90002e02:	f823 4c04 	strh.w	r4, [r3, #-4]
            ycomp = (int32_t)(*(pLum +j +1));
90002e06:	f811 4c79 	ldrb.w	r4, [r1, #-121]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90002e0a:	4426      	add	r6, r4
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002e0c:	4427      	add	r7, r4
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002e0e:	4404      	add	r4, r0
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002e10:	f897 7100 	ldrb.w	r7, [r7, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002e14:	f896 0100 	ldrb.w	r0, [r6, #256]	; 0x100
90002e18:	f894 4100 	ldrb.w	r4, [r4, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002e1c:	08fe      	lsrs	r6, r7, #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002e1e:	08c0      	lsrs	r0, r0, #3
90002e20:	08a4      	lsrs	r4, r4, #2
90002e22:	ea40 20c6 	orr.w	r0, r0, r6, lsl #11
90002e26:	ea40 1044 	orr.w	r0, r0, r4, lsl #5
            *((__IO uint16_t *)(pOutAddr + 2)) =
90002e2a:	f823 0c02 	strh.w	r0, [r3, #-2]
        for(k= 0; k<2; k++)
90002e2e:	9804      	ldr	r0, [sp, #16]
90002e30:	4283      	cmp	r3, r0
90002e32:	f47f af05 	bne.w	90002c40 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x9c>
            pChrom++;
90002e36:	9b02      	ldr	r3, [sp, #8]
        refline += JPEG_ConvertorParams.ScaledWidth;
90002e38:	9a06      	ldr	r2, [sp, #24]
            pChrom++;
90002e3a:	3308      	adds	r3, #8
90002e3c:	9302      	str	r3, [sp, #8]
        pLum = pLum - 128 + 8;
90002e3e:	9b03      	ldr	r3, [sp, #12]
90002e40:	3308      	adds	r3, #8
90002e42:	9303      	str	r3, [sp, #12]
        refline += JPEG_ConvertorParams.ScaledWidth;
90002e44:	9b00      	ldr	r3, [sp, #0]
90002e46:	4413      	add	r3, r2
90002e48:	9300      	str	r3, [sp, #0]
    for(i= 0; i <  8; i++)
90002e4a:	9b05      	ldr	r3, [sp, #20]
90002e4c:	3b01      	subs	r3, #1
90002e4e:	9305      	str	r3, [sp, #20]
90002e50:	f47f aee8 	bne.w	90002c24 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x80>
90002e54:	e6c6      	b.n	90002be4 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x40>
  }
  return numberMCU;
}
90002e56:	ee17 0a90 	vmov	r0, s15
90002e5a:	b00d      	add	sp, #52	; 0x34
90002e5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90002e60:	24009a48 	.word	0x24009a48
90002e64:	240079c8 	.word	0x240079c8
90002e68:	240085c8 	.word	0x240085c8
90002e6c:	240081c8 	.word	0x240081c8
90002e70:	24007dc8 	.word	0x24007dc8
90002e74:	9002588c 	.word	0x9002588c

90002e78 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks>:
static uint32_t JPEG_MCU_YCbCr444_ARGB_ConvertBlocks(uint8_t *pInBuffer,
                                      uint8_t *pOutBuffer,
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{
90002e78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  int32_t c_red, c_blue, c_green;

  uint8_t *pOutAddr;
  uint8_t *pChrom, *pLum;

  numberMCU = DataCount / YCBCR_444_BLOCK_SIZE;
90002e7c:	4cb6      	ldr	r4, [pc, #728]	; (90003158 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x2e0>)
{
90002e7e:	b089      	sub	sp, #36	; 0x24
  numberMCU = DataCount / YCBCR_444_BLOCK_SIZE;
90002e80:	fba4 4303 	umull	r4, r3, r4, r3
{
90002e84:	9102      	str	r1, [sp, #8]
  numberMCU = DataCount / YCBCR_444_BLOCK_SIZE;
90002e86:	09d9      	lsrs	r1, r3, #7
  currentMCU = BlockIndex;

  while(currentMCU < (numberMCU + BlockIndex))
90002e88:	eb02 13d3 	add.w	r3, r2, r3, lsr #7
  numberMCU = DataCount / YCBCR_444_BLOCK_SIZE;
90002e8c:	ee07 1a90 	vmov	s15, r1
  while(currentMCU < (numberMCU + BlockIndex))
90002e90:	429a      	cmp	r2, r3
90002e92:	9306      	str	r3, [sp, #24]
{
90002e94:	e9cd 0204 	strd	r0, r2, [sp, #16]
  while(currentMCU < (numberMCU + BlockIndex))
90002e98:	f080 8158 	bcs.w	9000314c <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x2d4>
  {

    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
90002e9c:	4baf      	ldr	r3, [pc, #700]	; (9000315c <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x2e4>)
#elif (JPEG_RGB_FORMAT == JPEG_RGB565)

            ycomp = (int32_t)(*(pLum +j));

            *(__IO uint16_t *)pOutAddr =
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002e9e:	4cb0      	ldr	r4, [pc, #704]	; (90003160 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x2e8>)
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
90002ea0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));
90002ea2:	f8df e2c4 	ldr.w	lr, [pc, #708]	; 90003168 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x2f0>
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
90002ea6:	9207      	str	r2, [sp, #28]
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
90002ea8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
90002eaa:	691b      	ldr	r3, [r3, #16]
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
90002eac:	f8df c2bc 	ldr.w	ip, [pc, #700]	; 9000316c <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x2f4>
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
90002eb0:	48ac      	ldr	r0, [pc, #688]	; (90003164 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x2ec>)
90002eb2:	f8df 82bc 	ldr.w	r8, [pc, #700]	; 90003170 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x2f8>
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
90002eb6:	9203      	str	r2, [sp, #12]
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
90002eb8:	9300      	str	r3, [sp, #0]
90002eba:	e007      	b.n	90002ecc <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x54>

        refline += JPEG_ConvertorParams.ScaledWidth;
      }
    }

    pInBuffer +=  YCBCR_444_BLOCK_SIZE;
90002ebc:	9b04      	ldr	r3, [sp, #16]
90002ebe:	33c0      	adds	r3, #192	; 0xc0
90002ec0:	9304      	str	r3, [sp, #16]
  while(currentMCU < (numberMCU + BlockIndex))
90002ec2:	e9dd 3205 	ldrd	r3, r2, [sp, #20]
90002ec6:	4293      	cmp	r3, r2
90002ec8:	f000 8140 	beq.w	9000314c <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x2d4>
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
90002ecc:	9e05      	ldr	r6, [sp, #20]
90002ece:	9f07      	ldr	r7, [sp, #28]
90002ed0:	00f2      	lsls	r2, r6, #3
90002ed2:	3601      	adds	r6, #1
90002ed4:	9904      	ldr	r1, [sp, #16]
90002ed6:	9605      	str	r6, [sp, #20]
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
90002ed8:	9e03      	ldr	r6, [sp, #12]
90002eda:	f101 0340 	add.w	r3, r1, #64	; 0x40
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
90002ede:	fbb2 f5f7 	udiv	r5, r2, r7
    yRef = ((currentMCU *8) % JPEG_ConvertorParams.WidthExtend);
90002ee2:	fb07 2215 	mls	r2, r7, r5, r2
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
90002ee6:	fb06 f505 	mul.w	r5, r6, r5
90002eea:	0052      	lsls	r2, r2, #1
90002eec:	eb02 02c5 	add.w	r2, r2, r5, lsl #3
    currentMCU++;
90002ef0:	2508      	movs	r5, #8
90002ef2:	9501      	str	r5, [sp, #4]
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
90002ef4:	9d00      	ldr	r5, [sp, #0]
90002ef6:	4295      	cmp	r5, r2
90002ef8:	d9e0      	bls.n	90002ebc <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x44>
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));
90002efa:	f893 7040 	ldrb.w	r7, [r3, #64]	; 0x40
          pLum += 8;
90002efe:	3108      	adds	r1, #8
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
90002f00:	f893 9000 	ldrb.w	r9, [r3]
            pChrom++;
90002f04:	3308      	adds	r3, #8
            ycomp = (int32_t)(*(pLum +j));
90002f06:	f811 5c08 	ldrb.w	r5, [r1, #-8]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
90002f0a:	f850 a027 	ldr.w	sl, [r0, r7, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002f0e:	f85e 6027 	ldr.w	r6, [lr, r7, lsl #2]
90002f12:	4425      	add	r5, r4
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90002f14:	f85c 7029 	ldr.w	r7, [ip, r9, lsl #2]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
90002f18:	f858 9029 	ldr.w	r9, [r8, r9, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002f1c:	442e      	add	r6, r5
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90002f1e:	442f      	add	r7, r5
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
90002f20:	44d1      	add	r9, sl
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002f22:	f896 6100 	ldrb.w	r6, [r6, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002f26:	eb05 4929 	add.w	r9, r5, r9, asr #16
90002f2a:	f897 5100 	ldrb.w	r5, [r7, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002f2e:	08f6      	lsrs	r6, r6, #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002f30:	f899 7100 	ldrb.w	r7, [r9, #256]	; 0x100
90002f34:	08ed      	lsrs	r5, r5, #3
90002f36:	08bf      	lsrs	r7, r7, #2
90002f38:	ea45 25c6 	orr.w	r5, r5, r6, lsl #11
            *(__IO uint16_t *)pOutAddr =
90002f3c:	9e02      	ldr	r6, [sp, #8]
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002f3e:	ea45 1547 	orr.w	r5, r5, r7, lsl #5
            *(__IO uint16_t *)pOutAddr =
90002f42:	52b5      	strh	r5, [r6, r2]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));
90002f44:	f893 7039 	ldrb.w	r7, [r3, #57]	; 0x39
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
90002f48:	f813 9c07 	ldrb.w	r9, [r3, #-7]
            ycomp = (int32_t)(*(pLum +j));
90002f4c:	f811 5c07 	ldrb.w	r5, [r1, #-7]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
90002f50:	f850 a027 	ldr.w	sl, [r0, r7, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002f54:	4425      	add	r5, r4
90002f56:	f85e 6027 	ldr.w	r6, [lr, r7, lsl #2]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90002f5a:	f85c 7029 	ldr.w	r7, [ip, r9, lsl #2]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
90002f5e:	f858 9029 	ldr.w	r9, [r8, r9, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002f62:	442e      	add	r6, r5
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90002f64:	442f      	add	r7, r5
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
90002f66:	44d1      	add	r9, sl
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002f68:	f896 6100 	ldrb.w	r6, [r6, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002f6c:	eb05 4929 	add.w	r9, r5, r9, asr #16
90002f70:	f897 5100 	ldrb.w	r5, [r7, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002f74:	08f6      	lsrs	r6, r6, #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002f76:	f899 7100 	ldrb.w	r7, [r9, #256]	; 0x100
90002f7a:	08ed      	lsrs	r5, r5, #3
90002f7c:	08bf      	lsrs	r7, r7, #2
90002f7e:	ea45 26c6 	orr.w	r6, r5, r6, lsl #11
        pOutAddr = pOutBuffer+ refline;
90002f82:	9d02      	ldr	r5, [sp, #8]
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002f84:	ea46 1647 	orr.w	r6, r6, r7, lsl #5
        pOutAddr = pOutBuffer+ refline;
90002f88:	4415      	add	r5, r2
            *(__IO uint16_t *)pOutAddr =
90002f8a:	806e      	strh	r6, [r5, #2]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));
90002f8c:	f893 a03a 	ldrb.w	sl, [r3, #58]	; 0x3a
            ycomp = (int32_t)(*(pLum +j));
90002f90:	f811 7c06 	ldrb.w	r7, [r1, #-6]
        refline += JPEG_ConvertorParams.ScaledWidth;
90002f94:	9e03      	ldr	r6, [sp, #12]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002f96:	4427      	add	r7, r4
90002f98:	f85e 902a 	ldr.w	r9, [lr, sl, lsl #2]
        refline += JPEG_ConvertorParams.ScaledWidth;
90002f9c:	4432      	add	r2, r6
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
90002f9e:	f813 6c06 	ldrb.w	r6, [r3, #-6]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002fa2:	44b9      	add	r9, r7
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
90002fa4:	f850 b02a 	ldr.w	fp, [r0, sl, lsl #2]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90002fa8:	f85c a026 	ldr.w	sl, [ip, r6, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002fac:	f899 9100 	ldrb.w	r9, [r9, #256]	; 0x100
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
90002fb0:	f858 6026 	ldr.w	r6, [r8, r6, lsl #2]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90002fb4:	44ba      	add	sl, r7
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002fb6:	ea4f 09d9 	mov.w	r9, r9, lsr #3
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
90002fba:	445e      	add	r6, fp
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002fbc:	eb07 4626 	add.w	r6, r7, r6, asr #16
90002fc0:	f89a 7100 	ldrb.w	r7, [sl, #256]	; 0x100
90002fc4:	f896 a100 	ldrb.w	sl, [r6, #256]	; 0x100
90002fc8:	08fe      	lsrs	r6, r7, #3
90002fca:	ea4f 0a9a 	mov.w	sl, sl, lsr #2
90002fce:	ea46 26c9 	orr.w	r6, r6, r9, lsl #11
90002fd2:	ea46 164a 	orr.w	r6, r6, sl, lsl #5
            *(__IO uint16_t *)pOutAddr =
90002fd6:	80ae      	strh	r6, [r5, #4]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));
90002fd8:	f893 a03b 	ldrb.w	sl, [r3, #59]	; 0x3b
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
90002fdc:	f813 6c05 	ldrb.w	r6, [r3, #-5]
            ycomp = (int32_t)(*(pLum +j));
90002fe0:	f811 7c05 	ldrb.w	r7, [r1, #-5]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
90002fe4:	f850 b02a 	ldr.w	fp, [r0, sl, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002fe8:	f85e 902a 	ldr.w	r9, [lr, sl, lsl #2]
90002fec:	4427      	add	r7, r4
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90002fee:	f85c a026 	ldr.w	sl, [ip, r6, lsl #2]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
90002ff2:	f858 6026 	ldr.w	r6, [r8, r6, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002ff6:	44b9      	add	r9, r7
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90002ff8:	44ba      	add	sl, r7
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
90002ffa:	445e      	add	r6, fp
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002ffc:	f899 9100 	ldrb.w	r9, [r9, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90003000:	eb07 4626 	add.w	r6, r7, r6, asr #16
90003004:	f89a 7100 	ldrb.w	r7, [sl, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90003008:	ea4f 09d9 	mov.w	r9, r9, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
9000300c:	f896 a100 	ldrb.w	sl, [r6, #256]	; 0x100
90003010:	08fe      	lsrs	r6, r7, #3
90003012:	ea4f 0a9a 	mov.w	sl, sl, lsr #2
90003016:	ea46 26c9 	orr.w	r6, r6, r9, lsl #11
9000301a:	ea46 164a 	orr.w	r6, r6, sl, lsl #5
            *(__IO uint16_t *)pOutAddr =
9000301e:	80ee      	strh	r6, [r5, #6]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));
90003020:	f893 a03c 	ldrb.w	sl, [r3, #60]	; 0x3c
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
90003024:	f813 6c04 	ldrb.w	r6, [r3, #-4]
            ycomp = (int32_t)(*(pLum +j));
90003028:	f811 7c04 	ldrb.w	r7, [r1, #-4]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
9000302c:	f850 b02a 	ldr.w	fp, [r0, sl, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90003030:	4427      	add	r7, r4
90003032:	f85e 902a 	ldr.w	r9, [lr, sl, lsl #2]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90003036:	f85c a026 	ldr.w	sl, [ip, r6, lsl #2]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
9000303a:	f858 6026 	ldr.w	r6, [r8, r6, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000303e:	44b9      	add	r9, r7
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90003040:	44ba      	add	sl, r7
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
90003042:	445e      	add	r6, fp
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90003044:	f899 9100 	ldrb.w	r9, [r9, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90003048:	eb07 4626 	add.w	r6, r7, r6, asr #16
9000304c:	f89a 7100 	ldrb.w	r7, [sl, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90003050:	ea4f 09d9 	mov.w	r9, r9, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90003054:	f896 a100 	ldrb.w	sl, [r6, #256]	; 0x100
90003058:	08fe      	lsrs	r6, r7, #3
9000305a:	ea4f 0a9a 	mov.w	sl, sl, lsr #2
9000305e:	ea46 26c9 	orr.w	r6, r6, r9, lsl #11
90003062:	ea46 164a 	orr.w	r6, r6, sl, lsl #5
            *(__IO uint16_t *)pOutAddr =
90003066:	812e      	strh	r6, [r5, #8]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));
90003068:	f893 a03d 	ldrb.w	sl, [r3, #61]	; 0x3d
            ycomp = (int32_t)(*(pLum +j));
9000306c:	f811 7c03 	ldrb.w	r7, [r1, #-3]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90003070:	f85e 902a 	ldr.w	r9, [lr, sl, lsl #2]
90003074:	4427      	add	r7, r4
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
90003076:	f813 6c03 	ldrb.w	r6, [r3, #-3]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
9000307a:	f850 b02a 	ldr.w	fp, [r0, sl, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000307e:	44b9      	add	r9, r7
90003080:	f899 9100 	ldrb.w	r9, [r9, #256]	; 0x100
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90003084:	f85c a026 	ldr.w	sl, [ip, r6, lsl #2]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
90003088:	f858 6026 	ldr.w	r6, [r8, r6, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000308c:	ea4f 09d9 	mov.w	r9, r9, lsr #3
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90003090:	44ba      	add	sl, r7
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
90003092:	445e      	add	r6, fp
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90003094:	eb07 4626 	add.w	r6, r7, r6, asr #16
90003098:	f89a 7100 	ldrb.w	r7, [sl, #256]	; 0x100
9000309c:	f896 a100 	ldrb.w	sl, [r6, #256]	; 0x100
900030a0:	08fe      	lsrs	r6, r7, #3
900030a2:	ea4f 0a9a 	mov.w	sl, sl, lsr #2
900030a6:	ea46 26c9 	orr.w	r6, r6, r9, lsl #11
900030aa:	ea46 164a 	orr.w	r6, r6, sl, lsl #5
            *(__IO uint16_t *)pOutAddr =
900030ae:	816e      	strh	r6, [r5, #10]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));
900030b0:	f893 a03e 	ldrb.w	sl, [r3, #62]	; 0x3e
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
900030b4:	f813 6c02 	ldrb.w	r6, [r3, #-2]
            ycomp = (int32_t)(*(pLum +j));
900030b8:	f811 7c02 	ldrb.w	r7, [r1, #-2]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
900030bc:	f850 b02a 	ldr.w	fp, [r0, sl, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
900030c0:	4427      	add	r7, r4
900030c2:	f85e 902a 	ldr.w	r9, [lr, sl, lsl #2]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
900030c6:	f85c a026 	ldr.w	sl, [ip, r6, lsl #2]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
900030ca:	f858 6026 	ldr.w	r6, [r8, r6, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
900030ce:	44b9      	add	r9, r7
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
900030d0:	44ba      	add	sl, r7
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
900030d2:	445e      	add	r6, fp
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
900030d4:	f899 9100 	ldrb.w	r9, [r9, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
900030d8:	eb07 4626 	add.w	r6, r7, r6, asr #16
900030dc:	f89a 7100 	ldrb.w	r7, [sl, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
900030e0:	ea4f 09d9 	mov.w	r9, r9, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
900030e4:	f896 a100 	ldrb.w	sl, [r6, #256]	; 0x100
900030e8:	08fe      	lsrs	r6, r7, #3
900030ea:	ea4f 0a9a 	mov.w	sl, sl, lsr #2
900030ee:	ea46 26c9 	orr.w	r6, r6, r9, lsl #11
900030f2:	ea46 164a 	orr.w	r6, r6, sl, lsl #5
            *(__IO uint16_t *)pOutAddr =
900030f6:	81ae      	strh	r6, [r5, #12]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));
900030f8:	f893 a03f 	ldrb.w	sl, [r3, #63]	; 0x3f
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
900030fc:	f813 6c01 	ldrb.w	r6, [r3, #-1]
            ycomp = (int32_t)(*(pLum +j));
90003100:	f811 7c01 	ldrb.w	r7, [r1, #-1]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90003104:	f85e 902a 	ldr.w	r9, [lr, sl, lsl #2]
90003108:	4427      	add	r7, r4
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
9000310a:	f850 b02a 	ldr.w	fp, [r0, sl, lsl #2]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
9000310e:	f85c a026 	ldr.w	sl, [ip, r6, lsl #2]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
90003112:	f858 6026 	ldr.w	r6, [r8, r6, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90003116:	44b9      	add	r9, r7
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90003118:	44ba      	add	sl, r7
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
9000311a:	445e      	add	r6, fp
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000311c:	f899 9100 	ldrb.w	r9, [r9, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90003120:	eb07 4626 	add.w	r6, r7, r6, asr #16
90003124:	f89a 7100 	ldrb.w	r7, [sl, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90003128:	ea4f 09d9 	mov.w	r9, r9, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
9000312c:	f896 a100 	ldrb.w	sl, [r6, #256]	; 0x100
90003130:	08fe      	lsrs	r6, r7, #3
90003132:	ea4f 0a9a 	mov.w	sl, sl, lsr #2
90003136:	ea46 26c9 	orr.w	r6, r6, r9, lsl #11
9000313a:	ea46 164a 	orr.w	r6, r6, sl, lsl #5
            *(__IO uint16_t *)pOutAddr =
9000313e:	81ee      	strh	r6, [r5, #14]
    for(i= 0; i <  8; i++)
90003140:	9d01      	ldr	r5, [sp, #4]
90003142:	3d01      	subs	r5, #1
90003144:	9501      	str	r5, [sp, #4]
90003146:	f47f aed5 	bne.w	90002ef4 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x7c>
9000314a:	e6b7      	b.n	90002ebc <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x44>
  }
  return numberMCU;
}
9000314c:	ee17 0a90 	vmov	r0, s15
90003150:	b009      	add	sp, #36	; 0x24
90003152:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90003156:	bf00      	nop
90003158:	aaaaaaab 	.word	0xaaaaaaab
9000315c:	24009a48 	.word	0x24009a48
90003160:	9002588c 	.word	0x9002588c
90003164:	240081c8 	.word	0x240081c8
90003168:	240085c8 	.word	0x240085c8
9000316c:	240079c8 	.word	0x240079c8
90003170:	24007dc8 	.word	0x24007dc8

90003174 <JPEG_MCU_Gray_ARGB_ConvertBlocks>:
static uint32_t JPEG_MCU_Gray_ARGB_ConvertBlocks(uint8_t *pInBuffer,
                                      uint8_t *pOutBuffer,
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{
90003174:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint8_t *pOutAddr,  *pLum;

  numberMCU = DataCount / GRAY_444_BLOCK_SIZE;
  currentMCU = BlockIndex;

  while(currentMCU < (numberMCU + BlockIndex))
90003178:	eb02 1a93 	add.w	sl, r2, r3, lsr #6
  numberMCU = DataCount / GRAY_444_BLOCK_SIZE;
9000317c:	099c      	lsrs	r4, r3, #6
  while(currentMCU < (numberMCU + BlockIndex))
9000317e:	4552      	cmp	r2, sl
  numberMCU = DataCount / GRAY_444_BLOCK_SIZE;
90003180:	ee07 4a90 	vmov	s15, r4
  while(currentMCU < (numberMCU + BlockIndex))
90003184:	f080 8088 	bcs.w	90003298 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x124>
  {
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
90003188:	4b45      	ldr	r3, [pc, #276]	; (900032a0 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x12c>)

    yRef = ((currentMCU *8) % JPEG_ConvertorParams.WidthExtend);

    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
9000318a:	e9d3 9809 	ldrd	r9, r8, [r3, #36]	; 0x24
    pLum = pInBuffer;

    for(i= 0; i <  8; i++)
    {
      pOutAddr = pOutBuffer + refline;
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
9000318e:	691e      	ldr	r6, [r3, #16]
90003190:	e003      	b.n	9000319a <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x26>
  while(currentMCU < (numberMCU + BlockIndex))
90003192:	4552      	cmp	r2, sl

        refline += JPEG_ConvertorParams.ScaledWidth;
      }
    }

    pInBuffer +=  GRAY_444_BLOCK_SIZE;
90003194:	f100 0040 	add.w	r0, r0, #64	; 0x40
  while(currentMCU < (numberMCU + BlockIndex))
90003198:	d07e      	beq.n	90003298 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x124>
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
9000319a:	00d3      	lsls	r3, r2, #3
    currentMCU++;
9000319c:	4604      	mov	r4, r0
9000319e:	f04f 0e08 	mov.w	lr, #8
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
900031a2:	3201      	adds	r2, #1
900031a4:	fbb3 f5f9 	udiv	r5, r3, r9
    yRef = ((currentMCU *8) % JPEG_ConvertorParams.WidthExtend);
900031a8:	fb09 3315 	mls	r3, r9, r5, r3
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
900031ac:	fb08 f505 	mul.w	r5, r8, r5
900031b0:	005b      	lsls	r3, r3, #1
900031b2:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
900031b6:	429e      	cmp	r6, r3
900031b8:	d9eb      	bls.n	90003192 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x1e>
          ySample =   (uint32_t)(*pLum);
900031ba:	f894 c000 	ldrb.w	ip, [r4]
      pOutAddr = pOutBuffer + refline;
900031be:	18cd      	adds	r5, r1, r3
          pLum++;
900031c0:	3408      	adds	r4, #8
    for(i= 0; i <  8; i++)
900031c2:	f1be 0e01 	subs.w	lr, lr, #1
          *(__IO uint16_t *)pOutAddr = ((ySample >> 3) << 11) |  ((ySample >> 2) << 5) | (ySample >> 3);
900031c6:	ea4f 07dc 	mov.w	r7, ip, lsr #3
900031ca:	ea4f 0c9c 	mov.w	ip, ip, lsr #2
900031ce:	ea4f 2bc7 	mov.w	fp, r7, lsl #11
900031d2:	ea4b 1c4c 	orr.w	ip, fp, ip, lsl #5
900031d6:	ea47 070c 	orr.w	r7, r7, ip
900031da:	52cf      	strh	r7, [r1, r3]
        refline += JPEG_ConvertorParams.ScaledWidth;
900031dc:	4443      	add	r3, r8
          ySample =   (uint32_t)(*pLum);
900031de:	f814 cc07 	ldrb.w	ip, [r4, #-7]
          *(__IO uint16_t *)pOutAddr = ((ySample >> 3) << 11) |  ((ySample >> 2) << 5) | (ySample >> 3);
900031e2:	ea4f 07dc 	mov.w	r7, ip, lsr #3
900031e6:	ea4f 0c9c 	mov.w	ip, ip, lsr #2
900031ea:	ea4f 2bc7 	mov.w	fp, r7, lsl #11
900031ee:	ea4b 1c4c 	orr.w	ip, fp, ip, lsl #5
900031f2:	ea47 070c 	orr.w	r7, r7, ip
900031f6:	806f      	strh	r7, [r5, #2]
          ySample =   (uint32_t)(*pLum);
900031f8:	f814 cc06 	ldrb.w	ip, [r4, #-6]
          *(__IO uint16_t *)pOutAddr = ((ySample >> 3) << 11) |  ((ySample >> 2) << 5) | (ySample >> 3);
900031fc:	ea4f 07dc 	mov.w	r7, ip, lsr #3
90003200:	ea4f 0c9c 	mov.w	ip, ip, lsr #2
90003204:	ea4f 2bc7 	mov.w	fp, r7, lsl #11
90003208:	ea4b 1c4c 	orr.w	ip, fp, ip, lsl #5
9000320c:	ea47 070c 	orr.w	r7, r7, ip
90003210:	80af      	strh	r7, [r5, #4]
          ySample =   (uint32_t)(*pLum);
90003212:	f814 cc05 	ldrb.w	ip, [r4, #-5]
          *(__IO uint16_t *)pOutAddr = ((ySample >> 3) << 11) |  ((ySample >> 2) << 5) | (ySample >> 3);
90003216:	ea4f 07dc 	mov.w	r7, ip, lsr #3
9000321a:	ea4f 0c9c 	mov.w	ip, ip, lsr #2
9000321e:	ea4f 2bc7 	mov.w	fp, r7, lsl #11
90003222:	ea4b 1c4c 	orr.w	ip, fp, ip, lsl #5
90003226:	ea47 070c 	orr.w	r7, r7, ip
9000322a:	80ef      	strh	r7, [r5, #6]
          ySample =   (uint32_t)(*pLum);
9000322c:	f814 cc04 	ldrb.w	ip, [r4, #-4]
          *(__IO uint16_t *)pOutAddr = ((ySample >> 3) << 11) |  ((ySample >> 2) << 5) | (ySample >> 3);
90003230:	ea4f 07dc 	mov.w	r7, ip, lsr #3
90003234:	ea4f 0c9c 	mov.w	ip, ip, lsr #2
90003238:	ea4f 2bc7 	mov.w	fp, r7, lsl #11
9000323c:	ea4b 1c4c 	orr.w	ip, fp, ip, lsl #5
90003240:	ea47 070c 	orr.w	r7, r7, ip
90003244:	812f      	strh	r7, [r5, #8]
          ySample =   (uint32_t)(*pLum);
90003246:	f814 cc03 	ldrb.w	ip, [r4, #-3]
          *(__IO uint16_t *)pOutAddr = ((ySample >> 3) << 11) |  ((ySample >> 2) << 5) | (ySample >> 3);
9000324a:	ea4f 07dc 	mov.w	r7, ip, lsr #3
9000324e:	ea4f 0c9c 	mov.w	ip, ip, lsr #2
90003252:	ea4f 2bc7 	mov.w	fp, r7, lsl #11
90003256:	ea4b 1c4c 	orr.w	ip, fp, ip, lsl #5
9000325a:	ea47 070c 	orr.w	r7, r7, ip
9000325e:	816f      	strh	r7, [r5, #10]
          ySample =   (uint32_t)(*pLum);
90003260:	f814 cc02 	ldrb.w	ip, [r4, #-2]
          *(__IO uint16_t *)pOutAddr = ((ySample >> 3) << 11) |  ((ySample >> 2) << 5) | (ySample >> 3);
90003264:	ea4f 07dc 	mov.w	r7, ip, lsr #3
90003268:	ea4f 0c9c 	mov.w	ip, ip, lsr #2
9000326c:	ea4f 2bc7 	mov.w	fp, r7, lsl #11
90003270:	ea4b 1c4c 	orr.w	ip, fp, ip, lsl #5
90003274:	ea47 070c 	orr.w	r7, r7, ip
90003278:	81af      	strh	r7, [r5, #12]
          ySample =   (uint32_t)(*pLum);
9000327a:	f814 cc01 	ldrb.w	ip, [r4, #-1]
          *(__IO uint16_t *)pOutAddr = ((ySample >> 3) << 11) |  ((ySample >> 2) << 5) | (ySample >> 3);
9000327e:	ea4f 07dc 	mov.w	r7, ip, lsr #3
90003282:	ea4f 0c9c 	mov.w	ip, ip, lsr #2
90003286:	ea4f 2bc7 	mov.w	fp, r7, lsl #11
9000328a:	ea4b 1c4c 	orr.w	ip, fp, ip, lsl #5
9000328e:	ea47 070c 	orr.w	r7, r7, ip
90003292:	81ef      	strh	r7, [r5, #14]
    for(i= 0; i <  8; i++)
90003294:	d18f      	bne.n	900031b6 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x42>
90003296:	e77c      	b.n	90003192 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x1e>
  }
  return numberMCU;
}
90003298:	ee17 0a90 	vmov	r0, s15
9000329c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
900032a0:	24009a48 	.word	0x24009a48

900032a4 <JPEG_MCU_YCCK_ARGB_ConvertBlocks>:
static uint32_t JPEG_MCU_YCCK_ARGB_ConvertBlocks(uint8_t *pInBuffer,
                                      uint8_t *pOutBuffer,
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{
900032a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

  int32_t c_red, c_blue, c_green;

  uint8_t *pOutAddr, *pChrom;

  numberMCU = DataCount / CMYK_444_BLOCK_SIZE;
900032a8:	0a1c      	lsrs	r4, r3, #8
{
900032aa:	b083      	sub	sp, #12
  currentMCU = BlockIndex;

  while(currentMCU < (numberMCU + BlockIndex))
900032ac:	eb02 2313 	add.w	r3, r2, r3, lsr #8
  numberMCU = DataCount / CMYK_444_BLOCK_SIZE;
900032b0:	ee07 4a90 	vmov	s15, r4
  while(currentMCU < (numberMCU + BlockIndex))
900032b4:	429a      	cmp	r2, r3
900032b6:	9300      	str	r3, [sp, #0]
900032b8:	f080 8129 	bcs.w	9000350e <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x26a>
  {

    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
900032bc:	4b96      	ldr	r3, [pc, #600]	; (90003518 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x274>)
        pOutAddr = pOutBuffer+ refline;

          for(j=0; j < 8; j++)
          {
            color_k = (int32_t)(*(pChrom + 192));
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
900032be:	f8df c25c 	ldr.w	ip, [pc, #604]	; 9000351c <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x278>
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
900032c2:	6a5c      	ldr	r4, [r3, #36]	; 0x24
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
900032c4:	f8d3 8028 	ldr.w	r8, [r3, #40]	; 0x28
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
900032c8:	691e      	ldr	r6, [r3, #16]
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
900032ca:	9401      	str	r4, [sp, #4]
900032cc:	e005      	b.n	900032da <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x36>
  while(currentMCU < (numberMCU + BlockIndex))
900032ce:	9b00      	ldr	r3, [sp, #0]

        refline += JPEG_ConvertorParams.ScaledWidth;
      }
    }

    pInBuffer +=  CMYK_444_BLOCK_SIZE;
900032d0:	f500 7080 	add.w	r0, r0, #256	; 0x100
  while(currentMCU < (numberMCU + BlockIndex))
900032d4:	429a      	cmp	r2, r3
900032d6:	f000 811a 	beq.w	9000350e <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x26a>
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
900032da:	00d3      	lsls	r3, r2, #3
900032dc:	9c01      	ldr	r4, [sp, #4]
900032de:	3201      	adds	r2, #1
    currentMCU++;
900032e0:	f04f 0e08 	mov.w	lr, #8
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
900032e4:	fbb3 f5f4 	udiv	r5, r3, r4
    yRef = ((currentMCU *8) % JPEG_ConvertorParams.WidthExtend);
900032e8:	fb04 3415 	mls	r4, r4, r5, r3
    currentMCU++;
900032ec:	4603      	mov	r3, r0
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
900032ee:	fb08 f505 	mul.w	r5, r8, r5
900032f2:	0064      	lsls	r4, r4, #1
900032f4:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
900032f8:	42a6      	cmp	r6, r4
900032fa:	d9e8      	bls.n	900032ce <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x2a>
            color_k = (int32_t)(*(pChrom + 192));
900032fc:	f893 a0c0 	ldrb.w	sl, [r3, #192]	; 0xc0
        pOutAddr = pOutBuffer+ refline;
90003300:	190f      	adds	r7, r1, r4
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
90003302:	f893 9040 	ldrb.w	r9, [r3, #64]	; 0x40
    for(i= 0; i <  8; i++)
90003306:	f1be 0e01 	subs.w	lr, lr, #1
            pChrom++;
9000330a:	f103 0308 	add.w	r3, r3, #8
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
9000330e:	fb19 f90a 	smulbb	r9, r9, sl
90003312:	fbac 5909 	umull	r5, r9, ip, r9
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
90003316:	f813 5c08 	ldrb.w	r5, [r3, #-8]
9000331a:	fb15 f50a 	smulbb	r5, r5, sl
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
9000331e:	ea4f 2959 	mov.w	r9, r9, lsr #9
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
90003322:	fbac b505 	umull	fp, r5, ip, r5
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
90003326:	ea4f 1949 	mov.w	r9, r9, lsl #5
            ((c_red >> 3) << JPEG_RED_OFFSET)     | \
9000332a:	ea4f 2595 	mov.w	r5, r5, lsr #10
9000332e:	ea49 25c5 	orr.w	r5, r9, r5, lsl #11
            c_blue = (color_k * (int32_t)(*(pChrom + 128)))/255;
90003332:	f893 9078 	ldrb.w	r9, [r3, #120]	; 0x78
90003336:	fb19 f90a 	smulbb	r9, r9, sl
9000333a:	fbac a909 	umull	sl, r9, ip, r9
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
9000333e:	ea45 2599 	orr.w	r5, r5, r9, lsr #10
90003342:	b2ad      	uxth	r5, r5
          *(__IO uint16_t *)pOutAddr =
90003344:	530d      	strh	r5, [r1, r4]
        refline += JPEG_ConvertorParams.ScaledWidth;
90003346:	4444      	add	r4, r8
            color_k = (int32_t)(*(pChrom + 192));
90003348:	f893 a0b9 	ldrb.w	sl, [r3, #185]	; 0xb9
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
9000334c:	f893 9039 	ldrb.w	r9, [r3, #57]	; 0x39
90003350:	fb19 f90a 	smulbb	r9, r9, sl
90003354:	fbac 5909 	umull	r5, r9, ip, r9
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
90003358:	f813 5c07 	ldrb.w	r5, [r3, #-7]
9000335c:	fb15 f50a 	smulbb	r5, r5, sl
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
90003360:	ea4f 2959 	mov.w	r9, r9, lsr #9
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
90003364:	fbac b505 	umull	fp, r5, ip, r5
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
90003368:	ea4f 1949 	mov.w	r9, r9, lsl #5
            ((c_red >> 3) << JPEG_RED_OFFSET)     | \
9000336c:	ea4f 2595 	mov.w	r5, r5, lsr #10
90003370:	ea49 25c5 	orr.w	r5, r9, r5, lsl #11
            c_blue = (color_k * (int32_t)(*(pChrom + 128)))/255;
90003374:	f893 9079 	ldrb.w	r9, [r3, #121]	; 0x79
90003378:	fb19 f90a 	smulbb	r9, r9, sl
9000337c:	fbac a909 	umull	sl, r9, ip, r9
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
90003380:	ea45 2599 	orr.w	r5, r5, r9, lsr #10
90003384:	b2ad      	uxth	r5, r5
          *(__IO uint16_t *)pOutAddr =
90003386:	807d      	strh	r5, [r7, #2]
            color_k = (int32_t)(*(pChrom + 192));
90003388:	f893 a0ba 	ldrb.w	sl, [r3, #186]	; 0xba
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
9000338c:	f893 903a 	ldrb.w	r9, [r3, #58]	; 0x3a
90003390:	fb19 f90a 	smulbb	r9, r9, sl
90003394:	fbac 5909 	umull	r5, r9, ip, r9
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
90003398:	f813 5c06 	ldrb.w	r5, [r3, #-6]
9000339c:	fb15 f50a 	smulbb	r5, r5, sl
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
900033a0:	ea4f 2959 	mov.w	r9, r9, lsr #9
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
900033a4:	fbac b505 	umull	fp, r5, ip, r5
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
900033a8:	ea4f 1949 	mov.w	r9, r9, lsl #5
            ((c_red >> 3) << JPEG_RED_OFFSET)     | \
900033ac:	ea4f 2595 	mov.w	r5, r5, lsr #10
900033b0:	ea49 25c5 	orr.w	r5, r9, r5, lsl #11
            c_blue = (color_k * (int32_t)(*(pChrom + 128)))/255;
900033b4:	f893 907a 	ldrb.w	r9, [r3, #122]	; 0x7a
900033b8:	fb19 f90a 	smulbb	r9, r9, sl
900033bc:	fbac a909 	umull	sl, r9, ip, r9
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
900033c0:	ea45 2599 	orr.w	r5, r5, r9, lsr #10
900033c4:	b2ad      	uxth	r5, r5
          *(__IO uint16_t *)pOutAddr =
900033c6:	80bd      	strh	r5, [r7, #4]
            color_k = (int32_t)(*(pChrom + 192));
900033c8:	f893 a0bb 	ldrb.w	sl, [r3, #187]	; 0xbb
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
900033cc:	f893 903b 	ldrb.w	r9, [r3, #59]	; 0x3b
900033d0:	fb19 f90a 	smulbb	r9, r9, sl
900033d4:	fbac 5909 	umull	r5, r9, ip, r9
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
900033d8:	f813 5c05 	ldrb.w	r5, [r3, #-5]
900033dc:	fb15 f50a 	smulbb	r5, r5, sl
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
900033e0:	ea4f 2959 	mov.w	r9, r9, lsr #9
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
900033e4:	fbac b505 	umull	fp, r5, ip, r5
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
900033e8:	ea4f 1949 	mov.w	r9, r9, lsl #5
            ((c_red >> 3) << JPEG_RED_OFFSET)     | \
900033ec:	ea4f 2595 	mov.w	r5, r5, lsr #10
900033f0:	ea49 25c5 	orr.w	r5, r9, r5, lsl #11
            c_blue = (color_k * (int32_t)(*(pChrom + 128)))/255;
900033f4:	f893 907b 	ldrb.w	r9, [r3, #123]	; 0x7b
900033f8:	fb19 f90a 	smulbb	r9, r9, sl
900033fc:	fbac a909 	umull	sl, r9, ip, r9
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
90003400:	ea45 2599 	orr.w	r5, r5, r9, lsr #10
90003404:	b2ad      	uxth	r5, r5
          *(__IO uint16_t *)pOutAddr =
90003406:	80fd      	strh	r5, [r7, #6]
            color_k = (int32_t)(*(pChrom + 192));
90003408:	f893 a0bc 	ldrb.w	sl, [r3, #188]	; 0xbc
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
9000340c:	f893 903c 	ldrb.w	r9, [r3, #60]	; 0x3c
90003410:	fb19 f90a 	smulbb	r9, r9, sl
90003414:	fbac 5909 	umull	r5, r9, ip, r9
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
90003418:	f813 5c04 	ldrb.w	r5, [r3, #-4]
9000341c:	fb15 f50a 	smulbb	r5, r5, sl
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
90003420:	ea4f 2959 	mov.w	r9, r9, lsr #9
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
90003424:	fbac b505 	umull	fp, r5, ip, r5
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
90003428:	ea4f 1949 	mov.w	r9, r9, lsl #5
            ((c_red >> 3) << JPEG_RED_OFFSET)     | \
9000342c:	ea4f 2595 	mov.w	r5, r5, lsr #10
90003430:	ea49 25c5 	orr.w	r5, r9, r5, lsl #11
            c_blue = (color_k * (int32_t)(*(pChrom + 128)))/255;
90003434:	f893 907c 	ldrb.w	r9, [r3, #124]	; 0x7c
90003438:	fb19 f90a 	smulbb	r9, r9, sl
9000343c:	fbac a909 	umull	sl, r9, ip, r9
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
90003440:	ea45 2599 	orr.w	r5, r5, r9, lsr #10
90003444:	b2ad      	uxth	r5, r5
          *(__IO uint16_t *)pOutAddr =
90003446:	813d      	strh	r5, [r7, #8]
            color_k = (int32_t)(*(pChrom + 192));
90003448:	f893 a0bd 	ldrb.w	sl, [r3, #189]	; 0xbd
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
9000344c:	f893 903d 	ldrb.w	r9, [r3, #61]	; 0x3d
90003450:	fb19 f90a 	smulbb	r9, r9, sl
90003454:	fbac 5909 	umull	r5, r9, ip, r9
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
90003458:	f813 5c03 	ldrb.w	r5, [r3, #-3]
9000345c:	fb15 f50a 	smulbb	r5, r5, sl
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
90003460:	ea4f 2959 	mov.w	r9, r9, lsr #9
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
90003464:	fbac b505 	umull	fp, r5, ip, r5
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
90003468:	ea4f 1949 	mov.w	r9, r9, lsl #5
            ((c_red >> 3) << JPEG_RED_OFFSET)     | \
9000346c:	ea4f 2595 	mov.w	r5, r5, lsr #10
90003470:	ea49 25c5 	orr.w	r5, r9, r5, lsl #11
            c_blue = (color_k * (int32_t)(*(pChrom + 128)))/255;
90003474:	f893 907d 	ldrb.w	r9, [r3, #125]	; 0x7d
90003478:	fb19 f90a 	smulbb	r9, r9, sl
9000347c:	fbac a909 	umull	sl, r9, ip, r9
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
90003480:	ea45 2599 	orr.w	r5, r5, r9, lsr #10
90003484:	b2ad      	uxth	r5, r5
          *(__IO uint16_t *)pOutAddr =
90003486:	817d      	strh	r5, [r7, #10]
            color_k = (int32_t)(*(pChrom + 192));
90003488:	f893 a0be 	ldrb.w	sl, [r3, #190]	; 0xbe
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
9000348c:	f813 9c02 	ldrb.w	r9, [r3, #-2]
90003490:	fb19 f90a 	smulbb	r9, r9, sl
90003494:	fbac 5909 	umull	r5, r9, ip, r9
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
90003498:	f893 503e 	ldrb.w	r5, [r3, #62]	; 0x3e
9000349c:	fb15 f50a 	smulbb	r5, r5, sl
            ((c_red >> 3) << JPEG_RED_OFFSET)     | \
900034a0:	ea4f 2999 	mov.w	r9, r9, lsr #10
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
900034a4:	fbac b505 	umull	fp, r5, ip, r5
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
900034a8:	ea4f 2555 	mov.w	r5, r5, lsr #9
900034ac:	ea4f 1545 	mov.w	r5, r5, lsl #5
            ((c_red >> 3) << JPEG_RED_OFFSET)     | \
900034b0:	ea45 25c9 	orr.w	r5, r5, r9, lsl #11
            c_blue = (color_k * (int32_t)(*(pChrom + 128)))/255;
900034b4:	f893 907e 	ldrb.w	r9, [r3, #126]	; 0x7e
900034b8:	fb19 f90a 	smulbb	r9, r9, sl
900034bc:	fbac a909 	umull	sl, r9, ip, r9
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
900034c0:	ea45 2599 	orr.w	r5, r5, r9, lsr #10
900034c4:	b2ad      	uxth	r5, r5
          *(__IO uint16_t *)pOutAddr =
900034c6:	81bd      	strh	r5, [r7, #12]
            color_k = (int32_t)(*(pChrom + 192));
900034c8:	f893 a0bf 	ldrb.w	sl, [r3, #191]	; 0xbf
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
900034cc:	f893 903f 	ldrb.w	r9, [r3, #63]	; 0x3f
900034d0:	fb19 f90a 	smulbb	r9, r9, sl
900034d4:	fbac 5909 	umull	r5, r9, ip, r9
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
900034d8:	f813 5c01 	ldrb.w	r5, [r3, #-1]
900034dc:	fb15 f50a 	smulbb	r5, r5, sl
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
900034e0:	ea4f 2959 	mov.w	r9, r9, lsr #9
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
900034e4:	fbac b505 	umull	fp, r5, ip, r5
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
900034e8:	ea4f 1949 	mov.w	r9, r9, lsl #5
            ((c_red >> 3) << JPEG_RED_OFFSET)     | \
900034ec:	ea4f 2595 	mov.w	r5, r5, lsr #10
900034f0:	ea49 25c5 	orr.w	r5, r9, r5, lsl #11
            c_blue = (color_k * (int32_t)(*(pChrom + 128)))/255;
900034f4:	f893 907f 	ldrb.w	r9, [r3, #127]	; 0x7f
900034f8:	fb19 f90a 	smulbb	r9, r9, sl
900034fc:	fbac a909 	umull	sl, r9, ip, r9
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
90003500:	ea45 2599 	orr.w	r5, r5, r9, lsr #10
90003504:	b2ad      	uxth	r5, r5
          *(__IO uint16_t *)pOutAddr =
90003506:	81fd      	strh	r5, [r7, #14]
    for(i= 0; i <  8; i++)
90003508:	f47f aef6 	bne.w	900032f8 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x54>
9000350c:	e6df      	b.n	900032ce <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x2a>
  }
  return numberMCU;
}
9000350e:	ee17 0a90 	vmov	r0, s15
90003512:	b003      	add	sp, #12
90003514:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90003518:	24009a48 	.word	0x24009a48
9000351c:	80808081 	.word	0x80808081

90003520 <TGFX_JPEG_GetDecodeColorConvertFunc>:
  *                      depending of the jpeg image color space and chroma sampling info.
  * @param ImageNbMCUs : pointer to uint32_t, used to retrive the total number of MCU blocks in the jpeg image.
  * @retval HAL status : HAL_OK or HAL_ERROR.
  */
HAL_StatusTypeDef TGFX_JPEG_GetDecodeColorConvertFunc(JPEG_ConfTypeDef *pJpegInfo, JPEG_YCbCrToRGB_Convert_Function *pFunction, uint32_t *ImageNbMCUs)
{
90003520:	b4f0      	push	{r4, r5, r6, r7}
  uint32_t hMCU, vMCU;

  JPEG_ConvertorParams.ColorSpace = pJpegInfo->ColorSpace;
  JPEG_ConvertorParams.ImageWidth = pJpegInfo->ImageWidth;
90003522:	68c3      	ldr	r3, [r0, #12]
  JPEG_ConvertorParams.ColorSpace = pJpegInfo->ColorSpace;
90003524:	6805      	ldr	r5, [r0, #0]
90003526:	4c3e      	ldr	r4, [pc, #248]	; (90003620 <TGFX_JPEG_GetDecodeColorConvertFunc+0x100>)
  JPEG_ConvertorParams.ImageHeight = pJpegInfo->ImageHeight;
  JPEG_ConvertorParams.ImageSize_Bytes = pJpegInfo->ImageWidth * pJpegInfo->ImageHeight * JPEG_BYTES_PER_PIXEL;

  JPEG_ConvertorParams.ChromaSubsampling = pJpegInfo->ChromaSubsampling;
  if(JPEG_ConvertorParams.ColorSpace == JPEG_YCBCR_COLORSPACE)
90003528:	2d10      	cmp	r5, #16
  JPEG_ConvertorParams.ImageWidth = pJpegInfo->ImageWidth;
9000352a:	60a3      	str	r3, [r4, #8]
  JPEG_ConvertorParams.ColorSpace = pJpegInfo->ColorSpace;
9000352c:	6025      	str	r5, [r4, #0]
  JPEG_ConvertorParams.ChromaSubsampling = pJpegInfo->ChromaSubsampling;
9000352e:	e9d0 7601 	ldrd	r7, r6, [r0, #4]
  JPEG_ConvertorParams.ImageSize_Bytes = pJpegInfo->ImageWidth * pJpegInfo->ImageHeight * JPEG_BYTES_PER_PIXEL;
90003532:	fb06 f003 	mul.w	r0, r6, r3
  JPEG_ConvertorParams.ImageHeight = pJpegInfo->ImageHeight;
90003536:	60e6      	str	r6, [r4, #12]
  JPEG_ConvertorParams.ImageSize_Bytes = pJpegInfo->ImageWidth * pJpegInfo->ImageHeight * JPEG_BYTES_PER_PIXEL;
90003538:	ea4f 0040 	mov.w	r0, r0, lsl #1
  JPEG_ConvertorParams.ChromaSubsampling = pJpegInfo->ChromaSubsampling;
9000353c:	6067      	str	r7, [r4, #4]
  JPEG_ConvertorParams.ImageSize_Bytes = pJpegInfo->ImageWidth * pJpegInfo->ImageHeight * JPEG_BYTES_PER_PIXEL;
9000353e:	6120      	str	r0, [r4, #16]
  if(JPEG_ConvertorParams.ColorSpace == JPEG_YCBCR_COLORSPACE)
90003540:	d027      	beq.n	90003592 <TGFX_JPEG_GetDecodeColorConvertFunc+0x72>
      }
      JPEG_ConvertorParams.H_factor = 8;
      JPEG_ConvertorParams.V_factor  = 8;
    }
  }
  else if(JPEG_ConvertorParams.ColorSpace == JPEG_GRAYSCALE_COLORSPACE)
90003542:	b9ed      	cbnz	r5, 90003580 <TGFX_JPEG_GetDecodeColorConvertFunc+0x60>
  {
    *pFunction =  JPEG_MCU_Gray_ARGB_ConvertBlocks;
90003544:	4837      	ldr	r0, [pc, #220]	; (90003624 <TGFX_JPEG_GetDecodeColorConvertFunc+0x104>)
90003546:	6008      	str	r0, [r1, #0]

    JPEG_ConvertorParams.LineOffset = JPEG_ConvertorParams.ImageWidth % 8;

    if(JPEG_ConvertorParams.LineOffset != 0)
90003548:	f013 0107 	ands.w	r1, r3, #7
9000354c:	d02b      	beq.n	900035a6 <TGFX_JPEG_GetDecodeColorConvertFunc+0x86>

    JPEG_ConvertorParams.LineOffset = JPEG_ConvertorParams.ImageWidth % 8;

    if(JPEG_ConvertorParams.LineOffset != 0)
    {
      JPEG_ConvertorParams.LineOffset = 8 - JPEG_ConvertorParams.LineOffset;
9000354e:	f1c1 0108 	rsb	r1, r1, #8
      JPEG_ConvertorParams.H_factor = 16;
90003552:	2508      	movs	r5, #8
      JPEG_ConvertorParams.LineOffset = 8 - JPEG_ConvertorParams.LineOffset;
90003554:	6161      	str	r1, [r4, #20]
  else
  {
    return HAL_ERROR; /* Color space Not supported*/
  }

  JPEG_ConvertorParams.WidthExtend = JPEG_ConvertorParams.ImageWidth + JPEG_ConvertorParams.LineOffset;
90003556:	4419      	add	r1, r3
90003558:	6261      	str	r1, [r4, #36]	; 0x24
  JPEG_ConvertorParams.ScaledWidth = JPEG_BYTES_PER_PIXEL * JPEG_ConvertorParams.ImageWidth;
9000355a:	0059      	lsls	r1, r3, #1

  hMCU = (JPEG_ConvertorParams.ImageWidth / JPEG_ConvertorParams.H_factor);
9000355c:	08db      	lsrs	r3, r3, #3
  JPEG_ConvertorParams.ScaledWidth = JPEG_BYTES_PER_PIXEL * JPEG_ConvertorParams.ImageWidth;
9000355e:	62a1      	str	r1, [r4, #40]	; 0x28
      JPEG_ConvertorParams.V_factor  = 8;
90003560:	e9c4 5507 	strd	r5, r5, [r4, #28]
  if((JPEG_ConvertorParams.ImageWidth % JPEG_ConvertorParams.H_factor) != 0)
  {
    hMCU++; /*+1 for horizenatl incomplete MCU */
90003564:	3301      	adds	r3, #1
  }

  vMCU = (JPEG_ConvertorParams.ImageHeight / JPEG_ConvertorParams.V_factor);
90003566:	fbb6 f1f5 	udiv	r1, r6, r5
  if((JPEG_ConvertorParams.ImageHeight % JPEG_ConvertorParams.V_factor) != 0)
9000356a:	fb05 6611 	mls	r6, r5, r1, r6
9000356e:	b106      	cbz	r6, 90003572 <TGFX_JPEG_GetDecodeColorConvertFunc+0x52>
  {
    vMCU++; /*+1 for vertical incomplete MCU */
90003570:	3101      	adds	r1, #1
  }
  JPEG_ConvertorParams.MCU_Total_Nb = (hMCU * vMCU);
90003572:	fb01 f303 	mul.w	r3, r1, r3
  *ImageNbMCUs = JPEG_ConvertorParams.MCU_Total_Nb;

  return HAL_OK;
90003576:	2000      	movs	r0, #0
  JPEG_ConvertorParams.MCU_Total_Nb = (hMCU * vMCU);
90003578:	62e3      	str	r3, [r4, #44]	; 0x2c
  *ImageNbMCUs = JPEG_ConvertorParams.MCU_Total_Nb;
9000357a:	6013      	str	r3, [r2, #0]
}
9000357c:	bcf0      	pop	{r4, r5, r6, r7}
9000357e:	4770      	bx	lr
  else if(JPEG_ConvertorParams.ColorSpace == JPEG_CMYK_COLORSPACE)
90003580:	2d30      	cmp	r5, #48	; 0x30
90003582:	d119      	bne.n	900035b8 <TGFX_JPEG_GetDecodeColorConvertFunc+0x98>
    *pFunction =  JPEG_MCU_YCCK_ARGB_ConvertBlocks;
90003584:	4828      	ldr	r0, [pc, #160]	; (90003628 <TGFX_JPEG_GetDecodeColorConvertFunc+0x108>)
90003586:	6008      	str	r0, [r1, #0]
    if(JPEG_ConvertorParams.LineOffset != 0)
90003588:	f013 0107 	ands.w	r1, r3, #7
9000358c:	d1df      	bne.n	9000354e <TGFX_JPEG_GetDecodeColorConvertFunc+0x2e>
    JPEG_ConvertorParams.LineOffset = JPEG_ConvertorParams.ImageWidth % 8;
9000358e:	6161      	str	r1, [r4, #20]
90003590:	e00a      	b.n	900035a8 <TGFX_JPEG_GetDecodeColorConvertFunc+0x88>
    if(JPEG_ConvertorParams.ChromaSubsampling == JPEG_420_SUBSAMPLING)
90003592:	2f01      	cmp	r7, #1
90003594:	d024      	beq.n	900035e0 <TGFX_JPEG_GetDecodeColorConvertFunc+0xc0>
    else if(JPEG_ConvertorParams.ChromaSubsampling == JPEG_422_SUBSAMPLING)
90003596:	2f02      	cmp	r7, #2
90003598:	d011      	beq.n	900035be <TGFX_JPEG_GetDecodeColorConvertFunc+0x9e>
      *pFunction =  JPEG_MCU_YCbCr444_ARGB_ConvertBlocks;
9000359a:	4824      	ldr	r0, [pc, #144]	; (9000362c <TGFX_JPEG_GetDecodeColorConvertFunc+0x10c>)
9000359c:	6008      	str	r0, [r1, #0]
      if(JPEG_ConvertorParams.LineOffset != 0)
9000359e:	f013 0107 	ands.w	r1, r3, #7
900035a2:	d1d4      	bne.n	9000354e <TGFX_JPEG_GetDecodeColorConvertFunc+0x2e>
900035a4:	e7f3      	b.n	9000358e <TGFX_JPEG_GetDecodeColorConvertFunc+0x6e>
    JPEG_ConvertorParams.LineOffset = JPEG_ConvertorParams.ImageWidth % 8;
900035a6:	6165      	str	r5, [r4, #20]
  JPEG_ConvertorParams.ScaledWidth = JPEG_BYTES_PER_PIXEL * JPEG_ConvertorParams.ImageWidth;
900035a8:	0059      	lsls	r1, r3, #1
      JPEG_ConvertorParams.H_factor = 16;
900035aa:	2508      	movs	r5, #8
  JPEG_ConvertorParams.WidthExtend = JPEG_ConvertorParams.ImageWidth + JPEG_ConvertorParams.LineOffset;
900035ac:	6263      	str	r3, [r4, #36]	; 0x24
  hMCU = (JPEG_ConvertorParams.ImageWidth / JPEG_ConvertorParams.H_factor);
900035ae:	08db      	lsrs	r3, r3, #3
  JPEG_ConvertorParams.ScaledWidth = JPEG_BYTES_PER_PIXEL * JPEG_ConvertorParams.ImageWidth;
900035b0:	62a1      	str	r1, [r4, #40]	; 0x28
      JPEG_ConvertorParams.V_factor  = 8;
900035b2:	e9c4 5507 	strd	r5, r5, [r4, #28]
  if((JPEG_ConvertorParams.ImageWidth % JPEG_ConvertorParams.H_factor) != 0)
900035b6:	e7d6      	b.n	90003566 <TGFX_JPEG_GetDecodeColorConvertFunc+0x46>
    return HAL_ERROR; /* Color space Not supported*/
900035b8:	2001      	movs	r0, #1
}
900035ba:	bcf0      	pop	{r4, r5, r6, r7}
900035bc:	4770      	bx	lr
      *pFunction =  JPEG_MCU_YCbCr422_ARGB_ConvertBlocks;
900035be:	481c      	ldr	r0, [pc, #112]	; (90003630 <TGFX_JPEG_GetDecodeColorConvertFunc+0x110>)
      JPEG_ConvertorParams.H_factor = 16;
900035c0:	61e5      	str	r5, [r4, #28]
      *pFunction =  JPEG_MCU_YCbCr422_ARGB_ConvertBlocks;
900035c2:	6008      	str	r0, [r1, #0]
      if(JPEG_ConvertorParams.LineOffset != 0)
900035c4:	f013 010f 	ands.w	r1, r3, #15
900035c8:	d022      	beq.n	90003610 <TGFX_JPEG_GetDecodeColorConvertFunc+0xf0>
        JPEG_ConvertorParams.LineOffset = 16 - JPEG_ConvertorParams.LineOffset;
900035ca:	f1c1 0110 	rsb	r1, r1, #16
      JPEG_ConvertorParams.V_factor  = 8;
900035ce:	2508      	movs	r5, #8
        JPEG_ConvertorParams.LineOffset = 16 - JPEG_ConvertorParams.LineOffset;
900035d0:	6161      	str	r1, [r4, #20]
  JPEG_ConvertorParams.WidthExtend = JPEG_ConvertorParams.ImageWidth + JPEG_ConvertorParams.LineOffset;
900035d2:	4419      	add	r1, r3
      JPEG_ConvertorParams.V_factor  = 8;
900035d4:	6225      	str	r5, [r4, #32]
  JPEG_ConvertorParams.WidthExtend = JPEG_ConvertorParams.ImageWidth + JPEG_ConvertorParams.LineOffset;
900035d6:	6261      	str	r1, [r4, #36]	; 0x24
  JPEG_ConvertorParams.ScaledWidth = JPEG_BYTES_PER_PIXEL * JPEG_ConvertorParams.ImageWidth;
900035d8:	0059      	lsls	r1, r3, #1
  hMCU = (JPEG_ConvertorParams.ImageWidth / JPEG_ConvertorParams.H_factor);
900035da:	091b      	lsrs	r3, r3, #4
  JPEG_ConvertorParams.ScaledWidth = JPEG_BYTES_PER_PIXEL * JPEG_ConvertorParams.ImageWidth;
900035dc:	62a1      	str	r1, [r4, #40]	; 0x28
900035de:	e7c1      	b.n	90003564 <TGFX_JPEG_GetDecodeColorConvertFunc+0x44>
      *pFunction = TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks;
900035e0:	4814      	ldr	r0, [pc, #80]	; (90003634 <TGFX_JPEG_GetDecodeColorConvertFunc+0x114>)
900035e2:	6008      	str	r0, [r1, #0]
      if(JPEG_ConvertorParams.LineOffset != 0)
900035e4:	f013 010f 	ands.w	r1, r3, #15
900035e8:	d107      	bne.n	900035fa <TGFX_JPEG_GetDecodeColorConvertFunc+0xda>
      JPEG_ConvertorParams.LineOffset = JPEG_ConvertorParams.ImageWidth % 16;
900035ea:	6161      	str	r1, [r4, #20]
  JPEG_ConvertorParams.ScaledWidth = JPEG_BYTES_PER_PIXEL * JPEG_ConvertorParams.ImageWidth;
900035ec:	0059      	lsls	r1, r3, #1
  JPEG_ConvertorParams.WidthExtend = JPEG_ConvertorParams.ImageWidth + JPEG_ConvertorParams.LineOffset;
900035ee:	6263      	str	r3, [r4, #36]	; 0x24
  hMCU = (JPEG_ConvertorParams.ImageWidth / JPEG_ConvertorParams.H_factor);
900035f0:	091b      	lsrs	r3, r3, #4
  JPEG_ConvertorParams.ScaledWidth = JPEG_BYTES_PER_PIXEL * JPEG_ConvertorParams.ImageWidth;
900035f2:	62a1      	str	r1, [r4, #40]	; 0x28
      JPEG_ConvertorParams.V_factor  = 8;
900035f4:	e9c4 5507 	strd	r5, r5, [r4, #28]
  if((JPEG_ConvertorParams.ImageWidth % JPEG_ConvertorParams.H_factor) != 0)
900035f8:	e7b5      	b.n	90003566 <TGFX_JPEG_GetDecodeColorConvertFunc+0x46>
        JPEG_ConvertorParams.LineOffset = 16 - JPEG_ConvertorParams.LineOffset;
900035fa:	f1c1 0110 	rsb	r1, r1, #16
900035fe:	6161      	str	r1, [r4, #20]
  JPEG_ConvertorParams.WidthExtend = JPEG_ConvertorParams.ImageWidth + JPEG_ConvertorParams.LineOffset;
90003600:	4419      	add	r1, r3
90003602:	6261      	str	r1, [r4, #36]	; 0x24
  JPEG_ConvertorParams.ScaledWidth = JPEG_BYTES_PER_PIXEL * JPEG_ConvertorParams.ImageWidth;
90003604:	0059      	lsls	r1, r3, #1
  hMCU = (JPEG_ConvertorParams.ImageWidth / JPEG_ConvertorParams.H_factor);
90003606:	091b      	lsrs	r3, r3, #4
  JPEG_ConvertorParams.ScaledWidth = JPEG_BYTES_PER_PIXEL * JPEG_ConvertorParams.ImageWidth;
90003608:	62a1      	str	r1, [r4, #40]	; 0x28
      JPEG_ConvertorParams.V_factor  = 8;
9000360a:	e9c4 5507 	strd	r5, r5, [r4, #28]
9000360e:	e7a9      	b.n	90003564 <TGFX_JPEG_GetDecodeColorConvertFunc+0x44>
90003610:	2508      	movs	r5, #8
      JPEG_ConvertorParams.LineOffset = JPEG_ConvertorParams.ImageWidth % 16;
90003612:	6161      	str	r1, [r4, #20]
  JPEG_ConvertorParams.ScaledWidth = JPEG_BYTES_PER_PIXEL * JPEG_ConvertorParams.ImageWidth;
90003614:	0059      	lsls	r1, r3, #1
      JPEG_ConvertorParams.V_factor  = 8;
90003616:	e9c4 5308 	strd	r5, r3, [r4, #32]
  JPEG_ConvertorParams.ScaledWidth = JPEG_BYTES_PER_PIXEL * JPEG_ConvertorParams.ImageWidth;
9000361a:	62a1      	str	r1, [r4, #40]	; 0x28
  hMCU = (JPEG_ConvertorParams.ImageWidth / JPEG_ConvertorParams.H_factor);
9000361c:	091b      	lsrs	r3, r3, #4
  if((JPEG_ConvertorParams.ImageWidth % JPEG_ConvertorParams.H_factor) != 0)
9000361e:	e7a2      	b.n	90003566 <TGFX_JPEG_GetDecodeColorConvertFunc+0x46>
90003620:	24009a48 	.word	0x24009a48
90003624:	90003175 	.word	0x90003175
90003628:	900032a5 	.word	0x900032a5
9000362c:	90002e79 	.word	0x90002e79
90003630:	90002ba5 	.word	0x90002ba5
90003634:	90002989 	.word	0x90002989

90003638 <TGFX_JPEG_InitColorTables>:
  * @brief  Initializes the colors conversion Look Up Tables
  * @param  None
  * @retval None
  */
void TGFX_JPEG_InitColorTables(void)
{
90003638:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9000363c:	f8df c12c 	ldr.w	ip, [pc, #300]	; 9000376c <TGFX_JPEG_InitColorTables+0x134>
90003640:	b0a5      	sub	sp, #148	; 0x94
90003642:	f8df 812c 	ldr.w	r8, [pc, #300]	; 90003770 <TGFX_JPEG_InitColorTables+0x138>
90003646:	f44f 4100 	mov.w	r1, #32768	; 0x8000
9000364a:	f8df e128 	ldr.w	lr, [pc, #296]	; 90003774 <TGFX_JPEG_InitColorTables+0x13c>
  */
void TGFX_JPEG_InitPreProcColorTables(void)
{
  int32_t i;

  for (i = 0; i <= 255; i++)
9000364e:	2300      	movs	r3, #0
90003650:	4f3d      	ldr	r7, [pc, #244]	; (90003748 <TGFX_JPEG_InitColorTables+0x110>)
    GREEN_CB_LUT[i]        = (((-((int32_t) ((0.3313 ) * (1L << 16)))) * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;

    /* BLUE_CB_LUT and RED_CR_LUT are identical */
    BLUE_CB_RED_CR_LUT[i]  = ((  ((int32_t) ((0.5 )    * (1L << 16)))  * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;

    GREEN_CR_LUT[i]        = (((-((int32_t) ((0.4187 ) * (1L << 16)))) * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
90003652:	f64e 3b2f 	movw	fp, #60207	; 0xeb2f
90003656:	4e3d      	ldr	r6, [pc, #244]	; (9000374c <TGFX_JPEG_InitColorTables+0x114>)
    BLUE_CR_LUT[i]         = (((-((int32_t) ((0.0813 ) * (1L << 16)))) * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
90003658:	f249 4ad0 	movw	sl, #38096	; 0x94d0
9000365c:	4d3c      	ldr	r5, [pc, #240]	; (90003750 <TGFX_JPEG_InitColorTables+0x118>)
  for (i = 0; i <= 255; i++)
9000365e:	f644 498b 	movw	r9, #19595	; 0x4c8b
90003662:	4c3c      	ldr	r4, [pc, #240]	; (90003754 <TGFX_JPEG_InitColorTables+0x11c>)
90003664:	483c      	ldr	r0, [pc, #240]	; (90003758 <TGFX_JPEG_InitColorTables+0x120>)
    GREEN_Y_LUT[i]         = ((  ((int32_t) ((0.587 )  * (1L << 16)))  * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
90003666:	f249 6245 	movw	r2, #38469	; 0x9645
9000366a:	fb02 f203 	mul.w	r2, r2, r3
9000366e:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
90003672:	1412      	asrs	r2, r2, #16
90003674:	f84e 2f04 	str.w	r2, [lr, #4]!
    BLUE_Y_LUT[i]          = ((  ((int32_t) ((0.114 )  * (1L << 16)))  * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
90003678:	f641 522f 	movw	r2, #7471	; 0x1d2f
9000367c:	fb02 f203 	mul.w	r2, r2, r3
90003680:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
90003684:	1412      	asrs	r2, r2, #16
90003686:	f84c 2f04 	str.w	r2, [ip, #4]!
    RED_CB_LUT[i]          = (((-((int32_t) ((0.1687 ) * (1L << 16)))) * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
9000368a:	4a34      	ldr	r2, [pc, #208]	; (9000375c <TGFX_JPEG_InitColorTables+0x124>)
9000368c:	fb02 f203 	mul.w	r2, r2, r3
90003690:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
90003694:	1412      	asrs	r2, r2, #16
90003696:	f847 2f04 	str.w	r2, [r7, #4]!
    GREEN_CB_LUT[i]        = (((-((int32_t) ((0.3313 ) * (1L << 16)))) * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
9000369a:	4a31      	ldr	r2, [pc, #196]	; (90003760 <TGFX_JPEG_InitColorTables+0x128>)
9000369c:	fb02 f203 	mul.w	r2, r2, r3
    BLUE_CB_RED_CR_LUT[i]  = ((  ((int32_t) ((0.5 )    * (1L << 16)))  * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
900036a0:	3301      	adds	r3, #1
    GREEN_CB_LUT[i]        = (((-((int32_t) ((0.3313 ) * (1L << 16)))) * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
900036a2:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
  for (i = 0; i <= 255; i++)
900036a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    GREEN_CB_LUT[i]        = (((-((int32_t) ((0.3313 ) * (1L << 16)))) * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
900036aa:	ea4f 4222 	mov.w	r2, r2, asr #16
900036ae:	f846 2f04 	str.w	r2, [r6, #4]!
    GREEN_CR_LUT[i]        = (((-((int32_t) ((0.4187 ) * (1L << 16)))) * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
900036b2:	4a2c      	ldr	r2, [pc, #176]	; (90003764 <TGFX_JPEG_InitColorTables+0x12c>)
900036b4:	fb02 b203 	mla	r2, r2, r3, fp
900036b8:	ea4f 4222 	mov.w	r2, r2, asr #16
900036bc:	f844 2f04 	str.w	r2, [r4, #4]!
    BLUE_CR_LUT[i]         = (((-((int32_t) ((0.0813 ) * (1L << 16)))) * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
900036c0:	4a29      	ldr	r2, [pc, #164]	; (90003768 <TGFX_JPEG_InitColorTables+0x130>)
900036c2:	fb02 a203 	mla	r2, r2, r3, sl
900036c6:	ea4f 4222 	mov.w	r2, r2, asr #16
900036ca:	f840 2f04 	str.w	r2, [r0, #4]!
    RED_Y_LUT[i]           = ((  ((int32_t) ((0.299 )  * (1L << 16)))  * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
900036ce:	ea4f 4221 	mov.w	r2, r1, asr #16
  for (i = 0; i <= 255; i++)
900036d2:	4449      	add	r1, r9
    RED_Y_LUT[i]           = ((  ((int32_t) ((0.299 )  * (1L << 16)))  * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
900036d4:	f848 2f04 	str.w	r2, [r8, #4]!
    BLUE_CB_RED_CR_LUT[i]  = ((  ((int32_t) ((0.5 )    * (1L << 16)))  * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
900036d8:	f343 024f 	sbfx	r2, r3, #1, #16
900036dc:	f845 2f04 	str.w	r2, [r5, #4]!
  for (i = 0; i <= 255; i++)
900036e0:	d1c1      	bne.n	90003666 <TGFX_JPEG_InitColorTables+0x2e>
900036e2:	f8df e094 	ldr.w	lr, [pc, #148]	; 90003778 <TGFX_JPEG_InitColorTables+0x140>
900036e6:	2138      	movs	r1, #56	; 0x38
void TGFX_JPEG_Init_MCU_LUT(void)
{
  uint32_t i, j, offset;

  /*Y LUT */
  for(i = 0; i < 16; i++)
900036e8:	f04f 0c00 	mov.w	ip, #0
900036ec:	e007      	b.n	900036fe <TGFX_JPEG_InitColorTables+0xc6>
900036ee:	f10c 0c01 	add.w	ip, ip, #1
900036f2:	4641      	mov	r1, r8
900036f4:	f10e 0e20 	add.w	lr, lr, #32
900036f8:	f1bc 0f10 	cmp.w	ip, #16
900036fc:	d03e      	beq.n	9000377c <TGFX_JPEG_InitColorTables+0x144>
  {
    for(j = 0; j < 16; j++)
    {
      offset =  j + (i*8);
      if((j>=8) && (i>=8)) offset+= 120;
900036fe:	f1bc 0f07 	cmp.w	ip, #7
90003702:	f101 0808 	add.w	r8, r1, #8
90003706:	4672      	mov	r2, lr
90003708:	f04f 0001 	mov.w	r0, #1
9000370c:	bf94      	ite	ls
9000370e:	2600      	movls	r6, #0
90003710:	2601      	movhi	r6, #1
90003712:	fa1f f388 	uxth.w	r3, r8
90003716:	2400      	movs	r4, #0
90003718:	2c07      	cmp	r4, #7
9000371a:	f1a1 0538 	sub.w	r5, r1, #56	; 0x38
9000371e:	bf94      	ite	ls
90003720:	2700      	movls	r7, #0
90003722:	2701      	movhi	r7, #1
90003724:	2f00      	cmp	r7, #0
90003726:	f000 8407 	beq.w	90003f38 <TGFX_JPEG_InitColorTables+0x900>
9000372a:	2e00      	cmp	r6, #0
9000372c:	f000 8404 	beq.w	90003f38 <TGFX_JPEG_InitColorTables+0x900>
90003730:	f101 0540 	add.w	r5, r1, #64	; 0x40
    for(j = 0; j < 16; j++)
90003734:	2810      	cmp	r0, #16
      else  if((j>=8) && (i<8)) offset+= 56;
      else  if((j<8) && (i>=8)) offset+= 64;

      JPEG_Y_MCU_LUT[i*16 + j] = offset;
90003736:	8015      	strh	r5, [r2, #0]
    for(j = 0; j < 16; j++)
90003738:	d0d9      	beq.n	900036ee <TGFX_JPEG_InitColorTables+0xb6>
9000373a:	3301      	adds	r3, #1
9000373c:	3401      	adds	r4, #1
9000373e:	3001      	adds	r0, #1
90003740:	3101      	adds	r1, #1
90003742:	3202      	adds	r2, #2
90003744:	b29b      	uxth	r3, r3
90003746:	e7e7      	b.n	90003718 <TGFX_JPEG_InitColorTables+0xe0>
90003748:	2400a604 	.word	0x2400a604
9000374c:	240089c4 	.word	0x240089c4
90003750:	24006dc4 	.word	0x24006dc4
90003754:	24008dc4 	.word	0x24008dc4
90003758:	240071c4 	.word	0x240071c4
9000375c:	ffffd4d1 	.word	0xffffd4d1
90003760:	ffffab30 	.word	0xffffab30
90003764:	ffff94d1 	.word	0xffff94d1
90003768:	ffffeb30 	.word	0xffffeb30
9000376c:	240075c4 	.word	0x240075c4
90003770:	2400aa04 	.word	0x2400aa04
90003774:	240091c4 	.word	0x240091c4
90003778:	2400a408 	.word	0x2400a408
9000377c:	4b07      	ldr	r3, [pc, #28]	; (9000379c <TGFX_JPEG_InitColorTables+0x164>)
    }
  }

  /*Cb Cr K LUT*/
  for(i = 0; i < 16; i++)
9000377e:	2000      	movs	r0, #0
90003780:	4907      	ldr	r1, [pc, #28]	; (900037a0 <TGFX_JPEG_InitColorTables+0x168>)
  for(i = 0; i < 16; i++)
90003782:	f04f 0c80 	mov.w	ip, #128	; 0x80
90003786:	9304      	str	r3, [sp, #16]
90003788:	4b06      	ldr	r3, [pc, #24]	; (900037a4 <TGFX_JPEG_InitColorTables+0x16c>)
9000378a:	4a07      	ldr	r2, [pc, #28]	; (900037a8 <TGFX_JPEG_InitColorTables+0x170>)
9000378c:	9303      	str	r3, [sp, #12]
9000378e:	4b07      	ldr	r3, [pc, #28]	; (900037ac <TGFX_JPEG_InitColorTables+0x174>)
90003790:	f8df e01c 	ldr.w	lr, [pc, #28]	; 900037b0 <TGFX_JPEG_InitColorTables+0x178>
  for(i = 0; i < 16; i++)
90003794:	469b      	mov	fp, r3
90003796:	9002      	str	r0, [sp, #8]
90003798:	e00c      	b.n	900037b4 <TGFX_JPEG_InitColorTables+0x17c>
9000379a:	bf00      	nop
9000379c:	240095c8 	.word	0x240095c8
900037a0:	24009c88 	.word	0x24009c88
900037a4:	240097c8 	.word	0x240097c8
900037a8:	24009f08 	.word	0x24009f08
900037ac:	24009a88 	.word	0x24009a88
900037b0:	2400a108 	.word	0x2400a108
  {
    for(j = 0; j < 16; j++)
    {
      offset = i*16 + j;

      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
900037b4:	9802      	ldr	r0, [sp, #8]
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
900037b6:	f10c 0501 	add.w	r5, ip, #1

      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
900037ba:	f10c 0640 	add.w	r6, ip, #64	; 0x40
900037be:	2400      	movs	r4, #0
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
900037c0:	0843      	lsrs	r3, r0, #1
  for(i = 0; i < 16; i++)
900037c2:	1c47      	adds	r7, r0, #1
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
900037c4:	b2ad      	uxth	r5, r5
900037c6:	2000      	movs	r0, #0
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
900037c8:	00db      	lsls	r3, r3, #3
  for(i = 0; i < 16; i++)
900037ca:	9702      	str	r7, [sp, #8]
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
900037cc:	b2b6      	uxth	r6, r6
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
900037ce:	9508      	str	r5, [sp, #32]
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
900037d0:	b29b      	uxth	r3, r3
  for(i = 0; i < 16; i++)
900037d2:	3220      	adds	r2, #32
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
900037d4:	9606      	str	r6, [sp, #24]
900037d6:	4626      	mov	r6, r4
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
900037d8:	f503 7580 	add.w	r5, r3, #256	; 0x100
900037dc:	f503 7a81 	add.w	sl, r3, #258	; 0x102
900037e0:	f203 1903 	addw	r9, r3, #259	; 0x103
  for(i = 0; i < 16; i++)
900037e4:	f10b 0b20 	add.w	fp, fp, #32
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
900037e8:	b2ad      	uxth	r5, r5
  for(i = 0; i < 16; i++)
900037ea:	3120      	adds	r1, #32
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
900037ec:	fa1f fa8a 	uxth.w	sl, sl
900037f0:	f365 060f 	bfi	r6, r5, #0, #16
900037f4:	fa1f f989 	uxth.w	r9, r9
900037f8:	f365 461f 	bfi	r6, r5, #16, #16
900037fc:	4635      	mov	r5, r6
900037fe:	9e04      	ldr	r6, [sp, #16]
90003800:	9500      	str	r5, [sp, #0]
90003802:	4634      	mov	r4, r6
90003804:	6035      	str	r5, [r6, #0]
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
90003806:	f10c 0541 	add.w	r5, ip, #65	; 0x41
9000380a:	b2ad      	uxth	r5, r5
9000380c:	950a      	str	r5, [sp, #40]	; 0x28
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
9000380e:	f10c 0502 	add.w	r5, ip, #2
90003812:	fa1f f885 	uxth.w	r8, r5
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
90003816:	f10c 0542 	add.w	r5, ip, #66	; 0x42
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
9000381a:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
9000381e:	fa1f f885 	uxth.w	r8, r5
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
90003822:	f10c 0503 	add.w	r5, ip, #3
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
90003826:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
9000382a:	fa1f f885 	uxth.w	r8, r5
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
9000382e:	f10c 0543 	add.w	r5, ip, #67	; 0x43
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
90003832:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
90003836:	fa1f f885 	uxth.w	r8, r5
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
9000383a:	f10c 0504 	add.w	r5, ip, #4
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
9000383e:	f8cd 8048 	str.w	r8, [sp, #72]	; 0x48
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
90003842:	fa1f f885 	uxth.w	r8, r5
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
90003846:	f10c 0544 	add.w	r5, ip, #68	; 0x44
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
9000384a:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
9000384e:	fa1f f885 	uxth.w	r8, r5
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
90003852:	f10c 0505 	add.w	r5, ip, #5
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
90003856:	f8cd 8058 	str.w	r8, [sp, #88]	; 0x58
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
9000385a:	fa1f f885 	uxth.w	r8, r5
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
9000385e:	f10c 0545 	add.w	r5, ip, #69	; 0x45
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
90003862:	f8cd 8060 	str.w	r8, [sp, #96]	; 0x60
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
90003866:	fa1f f885 	uxth.w	r8, r5
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
9000386a:	f10c 0506 	add.w	r5, ip, #6
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
9000386e:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
90003872:	fa1f f885 	uxth.w	r8, r5
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
90003876:	f10c 0546 	add.w	r5, ip, #70	; 0x46
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
9000387a:	f8cd 8070 	str.w	r8, [sp, #112]	; 0x70
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
9000387e:	fa1f f885 	uxth.w	r8, r5
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
90003882:	f10c 0507 	add.w	r5, ip, #7
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
90003886:	f8cd 8078 	str.w	r8, [sp, #120]	; 0x78
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
9000388a:	fa1f f885 	uxth.w	r8, r5
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
9000388e:	f10c 0547 	add.w	r5, ip, #71	; 0x47
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
90003892:	f8cd 8080 	str.w	r8, [sp, #128]	; 0x80
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
90003896:	fa1f f885 	uxth.w	r8, r5
      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
9000389a:	f503 75a0 	add.w	r5, r3, #320	; 0x140
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
9000389e:	f8cd 8088 	str.w	r8, [sp, #136]	; 0x88
      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
900038a2:	fa1f f885 	uxth.w	r8, r5

      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
900038a6:	f503 75c0 	add.w	r5, r3, #384	; 0x180
      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
900038aa:	f8cd 8014 	str.w	r8, [sp, #20]
      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
900038ae:	fa1f f885 	uxth.w	r8, r5
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
900038b2:	f203 1501 	addw	r5, r3, #257	; 0x101
      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
900038b6:	f8cd 801c 	str.w	r8, [sp, #28]
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
900038ba:	b2ad      	uxth	r5, r5
900038bc:	f365 000f 	bfi	r0, r5, #0, #16
900038c0:	f365 401f 	bfi	r0, r5, #16, #16
      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
900038c4:	f203 1541 	addw	r5, r3, #321	; 0x141
900038c8:	fa1f f885 	uxth.w	r8, r5
      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
900038cc:	f203 1581 	addw	r5, r3, #385	; 0x181
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
900038d0:	6070      	str	r0, [r6, #4]
      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
900038d2:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
900038d6:	fa1f f885 	uxth.w	r8, r5
      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
900038da:	f503 75a1 	add.w	r5, r3, #322	; 0x142
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
900038de:	9001      	str	r0, [sp, #4]
      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
900038e0:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
900038e4:	f203 1047 	addw	r0, r3, #327	; 0x147
900038e8:	fa1f f885 	uxth.w	r8, r5
      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
900038ec:	f503 75c1 	add.w	r5, r3, #386	; 0x182
      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
900038f0:	b280      	uxth	r0, r0
900038f2:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
900038f6:	fa1f f885 	uxth.w	r8, r5
      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
900038fa:	f203 1543 	addw	r5, r3, #323	; 0x143
      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
900038fe:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
90003902:	fa1f f885 	uxth.w	r8, r5
      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
90003906:	f203 1583 	addw	r5, r3, #387	; 0x183
      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
9000390a:	f8cd 8044 	str.w	r8, [sp, #68]	; 0x44
      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
9000390e:	fa1f f885 	uxth.w	r8, r5
      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
90003912:	f503 75a2 	add.w	r5, r3, #324	; 0x144
      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
90003916:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
9000391a:	f503 7882 	add.w	r8, r3, #260	; 0x104
      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
9000391e:	b2af      	uxth	r7, r5
      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
90003920:	f503 75c2 	add.w	r5, r3, #388	; 0x184
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
90003924:	fa1f f888 	uxth.w	r8, r8
      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
90003928:	9715      	str	r7, [sp, #84]	; 0x54
      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
9000392a:	b2af      	uxth	r7, r5
      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
9000392c:	f203 1545 	addw	r5, r3, #325	; 0x145
      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
90003930:	9717      	str	r7, [sp, #92]	; 0x5c
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
90003932:	f203 1705 	addw	r7, r3, #261	; 0x105
      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
90003936:	b2ae      	uxth	r6, r5
      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
90003938:	f203 1585 	addw	r5, r3, #389	; 0x185
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
9000393c:	b2bf      	uxth	r7, r7
      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
9000393e:	b2ad      	uxth	r5, r5
      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
90003940:	9619      	str	r6, [sp, #100]	; 0x64
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
90003942:	f503 7683 	add.w	r6, r3, #262	; 0x106
      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
90003946:	9021      	str	r0, [sp, #132]	; 0x84
      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
90003948:	951b      	str	r5, [sp, #108]	; 0x6c
      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
9000394a:	f503 75a3 	add.w	r5, r3, #326	; 0x146
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
9000394e:	b2b6      	uxth	r6, r6
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
90003950:	9803      	ldr	r0, [sp, #12]
      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
90003952:	b2ad      	uxth	r5, r5
90003954:	951d      	str	r5, [sp, #116]	; 0x74
      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
90003956:	f503 75c3 	add.w	r5, r3, #390	; 0x186
9000395a:	b2ad      	uxth	r5, r5
9000395c:	951f      	str	r5, [sp, #124]	; 0x7c
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
9000395e:	f203 1507 	addw	r5, r3, #263	; 0x107
      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
90003962:	f203 1387 	addw	r3, r3, #391	; 0x187
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
90003966:	b2ad      	uxth	r5, r5
      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
90003968:	b29b      	uxth	r3, r3
9000396a:	9323      	str	r3, [sp, #140]	; 0x8c
9000396c:	2300      	movs	r3, #0
9000396e:	f36a 030f 	bfi	r3, sl, #0, #16
90003972:	f36a 431f 	bfi	r3, sl, #16, #16
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
90003976:	f04f 0a00 	mov.w	sl, #0
9000397a:	f369 0a0f 	bfi	sl, r9, #0, #16
9000397e:	60a3      	str	r3, [r4, #8]
90003980:	f369 4a1f 	bfi	sl, r9, #16, #16
90003984:	f04f 0900 	mov.w	r9, #0
90003988:	f368 090f 	bfi	r9, r8, #0, #16
9000398c:	f8c4 a00c 	str.w	sl, [r4, #12]
90003990:	f368 491f 	bfi	r9, r8, #16, #16
90003994:	f04f 0800 	mov.w	r8, #0
90003998:	f367 080f 	bfi	r8, r7, #0, #16
9000399c:	f8c4 9010 	str.w	r9, [r4, #16]
900039a0:	f367 481f 	bfi	r8, r7, #16, #16
900039a4:	2700      	movs	r7, #0
900039a6:	f366 070f 	bfi	r7, r6, #0, #16
900039aa:	f8c4 8014 	str.w	r8, [r4, #20]
900039ae:	f366 471f 	bfi	r7, r6, #16, #16
900039b2:	2600      	movs	r6, #0
900039b4:	f365 060f 	bfi	r6, r5, #0, #16
900039b8:	61a7      	str	r7, [r4, #24]
900039ba:	f365 461f 	bfi	r6, r5, #16, #16
  for(i = 0; i < 16; i++)
900039be:	f104 0520 	add.w	r5, r4, #32
900039c2:	9504      	str	r5, [sp, #16]
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
900039c4:	2500      	movs	r5, #0
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
900039c6:	61e6      	str	r6, [r4, #28]
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
900039c8:	f36c 050f 	bfi	r5, ip, #0, #16
900039cc:	9c08      	ldr	r4, [sp, #32]
900039ce:	f36c 451f 	bfi	r5, ip, #16, #16
  for(i = 0; i < 16; i++)
900039d2:	f10c 0c08 	add.w	ip, ip, #8
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
900039d6:	6005      	str	r5, [r0, #0]
900039d8:	2500      	movs	r5, #0
  for(i = 0; i < 16; i++)
900039da:	fa1f fc8c 	uxth.w	ip, ip
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
900039de:	f364 050f 	bfi	r5, r4, #0, #16
900039e2:	f364 451f 	bfi	r5, r4, #16, #16
900039e6:	9c0c      	ldr	r4, [sp, #48]	; 0x30
900039e8:	6045      	str	r5, [r0, #4]
900039ea:	2500      	movs	r5, #0
900039ec:	f364 050f 	bfi	r5, r4, #0, #16
900039f0:	f364 451f 	bfi	r5, r4, #16, #16
900039f4:	9c10      	ldr	r4, [sp, #64]	; 0x40
900039f6:	6085      	str	r5, [r0, #8]
900039f8:	2500      	movs	r5, #0
900039fa:	f364 050f 	bfi	r5, r4, #0, #16
900039fe:	f364 451f 	bfi	r5, r4, #16, #16
90003a02:	9c14      	ldr	r4, [sp, #80]	; 0x50
90003a04:	60c5      	str	r5, [r0, #12]
90003a06:	2500      	movs	r5, #0
90003a08:	f364 050f 	bfi	r5, r4, #0, #16
90003a0c:	f364 451f 	bfi	r5, r4, #16, #16
90003a10:	9c18      	ldr	r4, [sp, #96]	; 0x60
90003a12:	6105      	str	r5, [r0, #16]
90003a14:	2500      	movs	r5, #0
90003a16:	f364 050f 	bfi	r5, r4, #0, #16
90003a1a:	f364 451f 	bfi	r5, r4, #16, #16
90003a1e:	9c1c      	ldr	r4, [sp, #112]	; 0x70
90003a20:	6145      	str	r5, [r0, #20]
90003a22:	2500      	movs	r5, #0
90003a24:	f364 050f 	bfi	r5, r4, #0, #16
90003a28:	f364 451f 	bfi	r5, r4, #16, #16
90003a2c:	9c20      	ldr	r4, [sp, #128]	; 0x80
90003a2e:	6185      	str	r5, [r0, #24]
90003a30:	2500      	movs	r5, #0
90003a32:	f364 050f 	bfi	r5, r4, #0, #16
90003a36:	f364 451f 	bfi	r5, r4, #16, #16
  for(i = 0; i < 16; i++)
90003a3a:	f100 0420 	add.w	r4, r0, #32
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
90003a3e:	61c5      	str	r5, [r0, #28]
      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
90003a40:	2500      	movs	r5, #0
  for(i = 0; i < 16; i++)
90003a42:	9403      	str	r4, [sp, #12]
      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
90003a44:	9c05      	ldr	r4, [sp, #20]
90003a46:	f364 050f 	bfi	r5, r4, #0, #16
90003a4a:	f364 451f 	bfi	r5, r4, #16, #16
90003a4e:	9c09      	ldr	r4, [sp, #36]	; 0x24
90003a50:	f84b 5c20 	str.w	r5, [fp, #-32]
90003a54:	2500      	movs	r5, #0
90003a56:	f364 050f 	bfi	r5, r4, #0, #16
90003a5a:	f364 451f 	bfi	r5, r4, #16, #16
90003a5e:	f84b 5c1c 	str.w	r5, [fp, #-28]
90003a62:	2500      	movs	r5, #0
90003a64:	9c0d      	ldr	r4, [sp, #52]	; 0x34
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
90003a66:	9806      	ldr	r0, [sp, #24]
      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
90003a68:	f364 050f 	bfi	r5, r4, #0, #16
90003a6c:	f364 451f 	bfi	r5, r4, #16, #16
90003a70:	9c11      	ldr	r4, [sp, #68]	; 0x44
90003a72:	f84b 5c18 	str.w	r5, [fp, #-24]
90003a76:	2500      	movs	r5, #0
90003a78:	f364 050f 	bfi	r5, r4, #0, #16
90003a7c:	f364 451f 	bfi	r5, r4, #16, #16
90003a80:	9c15      	ldr	r4, [sp, #84]	; 0x54
90003a82:	f84b 5c14 	str.w	r5, [fp, #-20]
90003a86:	2500      	movs	r5, #0
90003a88:	f364 050f 	bfi	r5, r4, #0, #16
90003a8c:	f364 451f 	bfi	r5, r4, #16, #16
90003a90:	9c19      	ldr	r4, [sp, #100]	; 0x64
90003a92:	f84b 5c10 	str.w	r5, [fp, #-16]
90003a96:	2500      	movs	r5, #0
90003a98:	f364 050f 	bfi	r5, r4, #0, #16
90003a9c:	f364 451f 	bfi	r5, r4, #16, #16
90003aa0:	9c1d      	ldr	r4, [sp, #116]	; 0x74
90003aa2:	f84b 5c0c 	str.w	r5, [fp, #-12]
90003aa6:	2500      	movs	r5, #0
90003aa8:	f364 050f 	bfi	r5, r4, #0, #16
90003aac:	f364 451f 	bfi	r5, r4, #16, #16
90003ab0:	9c21      	ldr	r4, [sp, #132]	; 0x84
90003ab2:	f84b 5c08 	str.w	r5, [fp, #-8]
90003ab6:	2500      	movs	r5, #0
90003ab8:	f364 050f 	bfi	r5, r4, #0, #16
90003abc:	f364 451f 	bfi	r5, r4, #16, #16
      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
90003ac0:	2400      	movs	r4, #0
      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
90003ac2:	f84b 5c04 	str.w	r5, [fp, #-4]
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
90003ac6:	2500      	movs	r5, #0
90003ac8:	f360 050f 	bfi	r5, r0, #0, #16
90003acc:	f360 451f 	bfi	r5, r0, #16, #16
90003ad0:	980a      	ldr	r0, [sp, #40]	; 0x28
90003ad2:	f841 5c20 	str.w	r5, [r1, #-32]
90003ad6:	2500      	movs	r5, #0
90003ad8:	f360 050f 	bfi	r5, r0, #0, #16
90003adc:	f360 451f 	bfi	r5, r0, #16, #16
90003ae0:	980e      	ldr	r0, [sp, #56]	; 0x38
90003ae2:	f841 5c1c 	str.w	r5, [r1, #-28]
90003ae6:	2500      	movs	r5, #0
90003ae8:	f360 050f 	bfi	r5, r0, #0, #16
90003aec:	f360 451f 	bfi	r5, r0, #16, #16
90003af0:	9812      	ldr	r0, [sp, #72]	; 0x48
90003af2:	f841 5c18 	str.w	r5, [r1, #-24]
90003af6:	2500      	movs	r5, #0
90003af8:	f360 050f 	bfi	r5, r0, #0, #16
90003afc:	f360 451f 	bfi	r5, r0, #16, #16
90003b00:	9816      	ldr	r0, [sp, #88]	; 0x58
90003b02:	f841 5c14 	str.w	r5, [r1, #-20]
90003b06:	2500      	movs	r5, #0
90003b08:	f360 050f 	bfi	r5, r0, #0, #16
90003b0c:	f360 451f 	bfi	r5, r0, #16, #16
90003b10:	981a      	ldr	r0, [sp, #104]	; 0x68
90003b12:	f841 5c10 	str.w	r5, [r1, #-16]
90003b16:	2500      	movs	r5, #0
90003b18:	f360 050f 	bfi	r5, r0, #0, #16
90003b1c:	f360 451f 	bfi	r5, r0, #16, #16
90003b20:	981e      	ldr	r0, [sp, #120]	; 0x78
90003b22:	f841 5c0c 	str.w	r5, [r1, #-12]
90003b26:	2500      	movs	r5, #0
90003b28:	f360 050f 	bfi	r5, r0, #0, #16
90003b2c:	f360 451f 	bfi	r5, r0, #16, #16
90003b30:	9822      	ldr	r0, [sp, #136]	; 0x88
90003b32:	f841 5c08 	str.w	r5, [r1, #-8]
90003b36:	2500      	movs	r5, #0
90003b38:	f360 050f 	bfi	r5, r0, #0, #16
90003b3c:	f360 451f 	bfi	r5, r0, #16, #16
      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
90003b40:	9807      	ldr	r0, [sp, #28]
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
90003b42:	f841 5c04 	str.w	r5, [r1, #-4]
      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
90003b46:	2500      	movs	r5, #0
90003b48:	f360 050f 	bfi	r5, r0, #0, #16
90003b4c:	f360 451f 	bfi	r5, r0, #16, #16
90003b50:	f842 5c20 	str.w	r5, [r2, #-32]
      JPEG_K_MCU_422_LUT[offset] = (j/2) + ((i/2)*8) + 256;
90003b54:	9d00      	ldr	r5, [sp, #0]
90003b56:	f8ce 5000 	str.w	r5, [lr]
90003b5a:	9801      	ldr	r0, [sp, #4]
90003b5c:	f8ce 601c 	str.w	r6, [lr, #28]
      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
90003b60:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
90003b62:	9d13      	ldr	r5, [sp, #76]	; 0x4c
      JPEG_K_MCU_422_LUT[offset] = (j/2) + ((i/2)*8) + 256;
90003b64:	e9ce 0301 	strd	r0, r3, [lr, #4]
      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
90003b68:	2300      	movs	r3, #0
90003b6a:	9817      	ldr	r0, [sp, #92]	; 0x5c
90003b6c:	f366 030f 	bfi	r3, r6, #0, #16
90003b70:	f366 431f 	bfi	r3, r6, #16, #16
90003b74:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
      JPEG_K_MCU_422_LUT[offset] = (j/2) + ((i/2)*8) + 256;
90003b76:	e9ce 8705 	strd	r8, r7, [lr, #20]
90003b7a:	e9ce a903 	strd	sl, r9, [lr, #12]
      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
90003b7e:	f842 3c1c 	str.w	r3, [r2, #-28]
90003b82:	2300      	movs	r3, #0
  for(i = 0; i < 16; i++)
90003b84:	9f02      	ldr	r7, [sp, #8]
90003b86:	f10e 0e20 	add.w	lr, lr, #32
      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
90003b8a:	f366 030f 	bfi	r3, r6, #0, #16
  for(i = 0; i < 16; i++)
90003b8e:	2f10      	cmp	r7, #16
      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
90003b90:	f366 431f 	bfi	r3, r6, #16, #16
90003b94:	f842 3c18 	str.w	r3, [r2, #-24]
90003b98:	f04f 0300 	mov.w	r3, #0
90003b9c:	f365 030f 	bfi	r3, r5, #0, #16
90003ba0:	f365 431f 	bfi	r3, r5, #16, #16
90003ba4:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
90003ba6:	f842 3c14 	str.w	r3, [r2, #-20]
90003baa:	f04f 0300 	mov.w	r3, #0
90003bae:	f365 040f 	bfi	r4, r5, #0, #16
90003bb2:	f360 030f 	bfi	r3, r0, #0, #16
90003bb6:	f365 441f 	bfi	r4, r5, #16, #16
90003bba:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
90003bbc:	f360 431f 	bfi	r3, r0, #16, #16
90003bc0:	f04f 0000 	mov.w	r0, #0
90003bc4:	f842 4c0c 	str.w	r4, [r2, #-12]
90003bc8:	f842 3c10 	str.w	r3, [r2, #-16]
90003bcc:	4603      	mov	r3, r0
90003bce:	9c23      	ldr	r4, [sp, #140]	; 0x8c
90003bd0:	f365 000f 	bfi	r0, r5, #0, #16
90003bd4:	f364 030f 	bfi	r3, r4, #0, #16
90003bd8:	f365 401f 	bfi	r0, r5, #16, #16
90003bdc:	f364 431f 	bfi	r3, r4, #16, #16
90003be0:	e942 0302 	strd	r0, r3, [r2, #-8]
  for(i = 0; i < 16; i++)
90003be4:	f47f ade6 	bne.w	900037b4 <TGFX_JPEG_InitColorTables+0x17c>
  {
    for(j = 0; j < 8; j++)
    {
      offset = i*8 + j;

      JPEG_Y_MCU_444_LUT[offset]  = offset;
90003be8:	48db      	ldr	r0, [pc, #876]	; (90003f58 <TGFX_JPEG_InitColorTables+0x920>)
90003bea:	f44f 3480 	mov.w	r4, #65536	; 0x10000
      JPEG_Cb_MCU_444_LUT[offset] = offset + 64 ;
90003bee:	49db      	ldr	r1, [pc, #876]	; (90003f5c <TGFX_JPEG_InitColorTables+0x924>)
      JPEG_Y_MCU_444_LUT[offset]  = offset;
90003bf0:	6004      	str	r4, [r0, #0]
90003bf2:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
      JPEG_Cr_MCU_444_LUT[offset] = offset + 128 ;
90003bf6:	4ada      	ldr	r2, [pc, #872]	; (90003f60 <TGFX_JPEG_InitColorTables+0x928>)
      JPEG_Y_MCU_444_LUT[offset]  = offset;
90003bf8:	6044      	str	r4, [r0, #4]
90003bfa:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
      JPEG_K_MCU_444_LUT[offset]  = offset + 192 ;
90003bfe:	4bd9      	ldr	r3, [pc, #868]	; (90003f64 <TGFX_JPEG_InitColorTables+0x92c>)
      JPEG_Y_MCU_444_LUT[offset]  = offset;
90003c00:	6084      	str	r4, [r0, #8]
90003c02:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
90003c06:	4fd8      	ldr	r7, [pc, #864]	; (90003f68 <TGFX_JPEG_InitColorTables+0x930>)
90003c08:	60c4      	str	r4, [r0, #12]
90003c0a:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
90003c0e:	4ed7      	ldr	r6, [pc, #860]	; (90003f6c <TGFX_JPEG_InitColorTables+0x934>)
90003c10:	6104      	str	r4, [r0, #16]
90003c12:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
90003c16:	4dd6      	ldr	r5, [pc, #856]	; (90003f70 <TGFX_JPEG_InitColorTables+0x938>)
90003c18:	6144      	str	r4, [r0, #20]
90003c1a:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
  for (i = 0; i <= 255; i++)
90003c1e:	f8df b374 	ldr.w	fp, [pc, #884]	; 90003f94 <TGFX_JPEG_InitColorTables+0x95c>
      JPEG_Y_MCU_444_LUT[offset]  = offset;
90003c22:	6184      	str	r4, [r0, #24]
90003c24:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
  for (i = 0; i <= 255; i++)
90003c28:	f8df a36c 	ldr.w	sl, [pc, #876]	; 90003f98 <TGFX_JPEG_InitColorTables+0x960>
      JPEG_Y_MCU_444_LUT[offset]  = offset;
90003c2c:	61c4      	str	r4, [r0, #28]
90003c2e:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
  for (i = 0; i <= 255; i++)
90003c32:	f8df 9368 	ldr.w	r9, [pc, #872]	; 90003f9c <TGFX_JPEG_InitColorTables+0x964>
      JPEG_Y_MCU_444_LUT[offset]  = offset;
90003c36:	6204      	str	r4, [r0, #32]
90003c38:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
  for (i = 0; i <= 255; i++)
90003c3c:	f8df 8360 	ldr.w	r8, [pc, #864]	; 90003fa0 <TGFX_JPEG_InitColorTables+0x968>
      JPEG_Y_MCU_444_LUT[offset]  = offset;
90003c40:	6244      	str	r4, [r0, #36]	; 0x24
90003c42:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
  for (i = 0; i <= 255; i++)
90003c46:	f8df e35c 	ldr.w	lr, [pc, #860]	; 90003fa4 <TGFX_JPEG_InitColorTables+0x96c>
      JPEG_Y_MCU_444_LUT[offset]  = offset;
90003c4a:	6284      	str	r4, [r0, #40]	; 0x28
90003c4c:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
90003c50:	62c4      	str	r4, [r0, #44]	; 0x2c
90003c52:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
90003c56:	6304      	str	r4, [r0, #48]	; 0x30
90003c58:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
90003c5c:	6344      	str	r4, [r0, #52]	; 0x34
90003c5e:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
90003c62:	6384      	str	r4, [r0, #56]	; 0x38
90003c64:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
90003c68:	63c4      	str	r4, [r0, #60]	; 0x3c
90003c6a:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
90003c6e:	6404      	str	r4, [r0, #64]	; 0x40
90003c70:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
90003c74:	6444      	str	r4, [r0, #68]	; 0x44
90003c76:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
90003c7a:	6484      	str	r4, [r0, #72]	; 0x48
90003c7c:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
90003c80:	64c4      	str	r4, [r0, #76]	; 0x4c
90003c82:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
90003c86:	6504      	str	r4, [r0, #80]	; 0x50
90003c88:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
90003c8c:	6544      	str	r4, [r0, #84]	; 0x54
90003c8e:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
90003c92:	6584      	str	r4, [r0, #88]	; 0x58
90003c94:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
90003c98:	65c4      	str	r4, [r0, #92]	; 0x5c
90003c9a:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
90003c9e:	6604      	str	r4, [r0, #96]	; 0x60
90003ca0:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
90003ca4:	6644      	str	r4, [r0, #100]	; 0x64
90003ca6:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
90003caa:	6684      	str	r4, [r0, #104]	; 0x68
90003cac:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
90003cb0:	66c4      	str	r4, [r0, #108]	; 0x6c
90003cb2:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
90003cb6:	6704      	str	r4, [r0, #112]	; 0x70
90003cb8:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
90003cbc:	6744      	str	r4, [r0, #116]	; 0x74
90003cbe:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
90003cc2:	6784      	str	r4, [r0, #120]	; 0x78
90003cc4:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
90003cc8:	67c4      	str	r4, [r0, #124]	; 0x7c
      JPEG_Cb_MCU_444_LUT[offset] = offset + 64 ;
90003cca:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
90003cce:	48a9      	ldr	r0, [pc, #676]	; (90003f74 <TGFX_JPEG_InitColorTables+0x93c>)
90003cd0:	e9c1 4000 	strd	r4, r0, [r1]
90003cd4:	f104 1404 	add.w	r4, r4, #262148	; 0x40004
90003cd8:	f100 1004 	add.w	r0, r0, #262148	; 0x40004
90003cdc:	e9c1 4002 	strd	r4, r0, [r1, #8]
90003ce0:	f104 1404 	add.w	r4, r4, #262148	; 0x40004
90003ce4:	f100 1004 	add.w	r0, r0, #262148	; 0x40004
90003ce8:	e9c1 4004 	strd	r4, r0, [r1, #16]
90003cec:	f104 1404 	add.w	r4, r4, #262148	; 0x40004
90003cf0:	f100 1004 	add.w	r0, r0, #262148	; 0x40004
90003cf4:	e9c1 4006 	strd	r4, r0, [r1, #24]
90003cf8:	f104 1404 	add.w	r4, r4, #262148	; 0x40004
90003cfc:	f100 1004 	add.w	r0, r0, #262148	; 0x40004
90003d00:	e9c1 4008 	strd	r4, r0, [r1, #32]
90003d04:	f104 1404 	add.w	r4, r4, #262148	; 0x40004
90003d08:	f100 1004 	add.w	r0, r0, #262148	; 0x40004
90003d0c:	e9c1 400a 	strd	r4, r0, [r1, #40]	; 0x28
90003d10:	f104 1404 	add.w	r4, r4, #262148	; 0x40004
90003d14:	f100 1004 	add.w	r0, r0, #262148	; 0x40004
90003d18:	e9c1 400c 	strd	r4, r0, [r1, #48]	; 0x30
90003d1c:	f104 1404 	add.w	r4, r4, #262148	; 0x40004
90003d20:	f100 1004 	add.w	r0, r0, #262148	; 0x40004
90003d24:	e9c1 400e 	strd	r4, r0, [r1, #56]	; 0x38
90003d28:	f104 1404 	add.w	r4, r4, #262148	; 0x40004
90003d2c:	f100 1004 	add.w	r0, r0, #262148	; 0x40004
90003d30:	e9c1 4010 	strd	r4, r0, [r1, #64]	; 0x40
90003d34:	f104 1404 	add.w	r4, r4, #262148	; 0x40004
90003d38:	f100 1004 	add.w	r0, r0, #262148	; 0x40004
90003d3c:	e9c1 4012 	strd	r4, r0, [r1, #72]	; 0x48
90003d40:	f104 1404 	add.w	r4, r4, #262148	; 0x40004
90003d44:	f100 1004 	add.w	r0, r0, #262148	; 0x40004
90003d48:	e9c1 4014 	strd	r4, r0, [r1, #80]	; 0x50
90003d4c:	f104 1404 	add.w	r4, r4, #262148	; 0x40004
90003d50:	f100 1004 	add.w	r0, r0, #262148	; 0x40004
90003d54:	e9c1 4016 	strd	r4, r0, [r1, #88]	; 0x58
90003d58:	f104 1404 	add.w	r4, r4, #262148	; 0x40004
90003d5c:	f100 1004 	add.w	r0, r0, #262148	; 0x40004
90003d60:	e9c1 4018 	strd	r4, r0, [r1, #96]	; 0x60
90003d64:	f104 1404 	add.w	r4, r4, #262148	; 0x40004
90003d68:	f100 1004 	add.w	r0, r0, #262148	; 0x40004
90003d6c:	e9c1 401a 	strd	r4, r0, [r1, #104]	; 0x68
90003d70:	f104 1404 	add.w	r4, r4, #262148	; 0x40004
90003d74:	f100 1004 	add.w	r0, r0, #262148	; 0x40004
90003d78:	e9c1 401c 	strd	r4, r0, [r1, #112]	; 0x70
90003d7c:	f104 1404 	add.w	r4, r4, #262148	; 0x40004
90003d80:	f100 1004 	add.w	r0, r0, #262148	; 0x40004
90003d84:	e9c1 401e 	strd	r4, r0, [r1, #120]	; 0x78
      JPEG_Cr_MCU_444_LUT[offset] = offset + 128 ;
90003d88:	f104 1404 	add.w	r4, r4, #262148	; 0x40004
90003d8c:	497a      	ldr	r1, [pc, #488]	; (90003f78 <TGFX_JPEG_InitColorTables+0x940>)
90003d8e:	f100 1006 	add.w	r0, r0, #393222	; 0x60006
90003d92:	e9c2 4100 	strd	r4, r1, [r2]
90003d96:	f101 1104 	add.w	r1, r1, #262148	; 0x40004
90003d9a:	f104 1408 	add.w	r4, r4, #524296	; 0x80008
90003d9e:	e9c2 0102 	strd	r0, r1, [r2, #8]
90003da2:	f101 1104 	add.w	r1, r1, #262148	; 0x40004
90003da6:	f100 1008 	add.w	r0, r0, #524296	; 0x80008
90003daa:	e9c2 4104 	strd	r4, r1, [r2, #16]
90003dae:	f101 1104 	add.w	r1, r1, #262148	; 0x40004
90003db2:	f104 1408 	add.w	r4, r4, #524296	; 0x80008
90003db6:	e9c2 0106 	strd	r0, r1, [r2, #24]
90003dba:	f101 1104 	add.w	r1, r1, #262148	; 0x40004
90003dbe:	f100 1008 	add.w	r0, r0, #524296	; 0x80008
90003dc2:	e9c2 4108 	strd	r4, r1, [r2, #32]
90003dc6:	f101 1104 	add.w	r1, r1, #262148	; 0x40004
90003dca:	f104 1408 	add.w	r4, r4, #524296	; 0x80008
90003dce:	e9c2 010a 	strd	r0, r1, [r2, #40]	; 0x28
90003dd2:	f101 1104 	add.w	r1, r1, #262148	; 0x40004
90003dd6:	f100 1008 	add.w	r0, r0, #524296	; 0x80008
90003dda:	e9c2 410c 	strd	r4, r1, [r2, #48]	; 0x30
90003dde:	f101 1104 	add.w	r1, r1, #262148	; 0x40004
90003de2:	f104 1408 	add.w	r4, r4, #524296	; 0x80008
90003de6:	e9c2 010e 	strd	r0, r1, [r2, #56]	; 0x38
90003dea:	f101 1104 	add.w	r1, r1, #262148	; 0x40004
90003dee:	f100 1008 	add.w	r0, r0, #524296	; 0x80008
90003df2:	e9c2 4110 	strd	r4, r1, [r2, #64]	; 0x40
90003df6:	f101 1104 	add.w	r1, r1, #262148	; 0x40004
90003dfa:	f104 1408 	add.w	r4, r4, #524296	; 0x80008
90003dfe:	e9c2 0112 	strd	r0, r1, [r2, #72]	; 0x48
90003e02:	f101 1104 	add.w	r1, r1, #262148	; 0x40004
90003e06:	f100 1008 	add.w	r0, r0, #524296	; 0x80008
90003e0a:	e9c2 4114 	strd	r4, r1, [r2, #80]	; 0x50
90003e0e:	f101 1104 	add.w	r1, r1, #262148	; 0x40004
90003e12:	f104 1408 	add.w	r4, r4, #524296	; 0x80008
90003e16:	e9c2 0116 	strd	r0, r1, [r2, #88]	; 0x58
90003e1a:	f101 1104 	add.w	r1, r1, #262148	; 0x40004
90003e1e:	f100 1008 	add.w	r0, r0, #524296	; 0x80008
90003e22:	e9c2 4118 	strd	r4, r1, [r2, #96]	; 0x60
90003e26:	f101 1104 	add.w	r1, r1, #262148	; 0x40004
90003e2a:	f104 1408 	add.w	r4, r4, #524296	; 0x80008
90003e2e:	e9c2 011a 	strd	r0, r1, [r2, #104]	; 0x68
90003e32:	f101 1104 	add.w	r1, r1, #262148	; 0x40004
90003e36:	f100 1008 	add.w	r0, r0, #524296	; 0x80008
90003e3a:	e9c2 411c 	strd	r4, r1, [r2, #112]	; 0x70
90003e3e:	f101 1104 	add.w	r1, r1, #262148	; 0x40004
      JPEG_K_MCU_444_LUT[offset]  = offset + 192 ;
90003e42:	f104 1408 	add.w	r4, r4, #524296	; 0x80008
      JPEG_Cr_MCU_444_LUT[offset] = offset + 128 ;
90003e46:	e9c2 011e 	strd	r0, r1, [r2, #120]	; 0x78
      JPEG_K_MCU_444_LUT[offset]  = offset + 192 ;
90003e4a:	f100 1006 	add.w	r0, r0, #393222	; 0x60006
90003e4e:	f101 1106 	add.w	r1, r1, #393222	; 0x60006
90003e52:	4a4a      	ldr	r2, [pc, #296]	; (90003f7c <TGFX_JPEG_InitColorTables+0x944>)
90003e54:	e9c3 4000 	strd	r4, r0, [r3]
90003e58:	e9c3 1202 	strd	r1, r2, [r3, #8]
90003e5c:	f104 1408 	add.w	r4, r4, #524296	; 0x80008
90003e60:	f100 1008 	add.w	r0, r0, #524296	; 0x80008
90003e64:	f101 1108 	add.w	r1, r1, #524296	; 0x80008
90003e68:	f102 1208 	add.w	r2, r2, #524296	; 0x80008
90003e6c:	e9c3 4004 	strd	r4, r0, [r3, #16]
90003e70:	e9c3 1206 	strd	r1, r2, [r3, #24]
90003e74:	f104 1408 	add.w	r4, r4, #524296	; 0x80008
90003e78:	f100 1008 	add.w	r0, r0, #524296	; 0x80008
90003e7c:	f101 1108 	add.w	r1, r1, #524296	; 0x80008
90003e80:	f102 1208 	add.w	r2, r2, #524296	; 0x80008
90003e84:	e9c3 4008 	strd	r4, r0, [r3, #32]
90003e88:	e9c3 120a 	strd	r1, r2, [r3, #40]	; 0x28
90003e8c:	f104 1408 	add.w	r4, r4, #524296	; 0x80008
90003e90:	f100 1008 	add.w	r0, r0, #524296	; 0x80008
90003e94:	f101 1108 	add.w	r1, r1, #524296	; 0x80008
90003e98:	f102 1208 	add.w	r2, r2, #524296	; 0x80008
90003e9c:	e9c3 400c 	strd	r4, r0, [r3, #48]	; 0x30
90003ea0:	e9c3 120e 	strd	r1, r2, [r3, #56]	; 0x38
90003ea4:	f104 1408 	add.w	r4, r4, #524296	; 0x80008
90003ea8:	f100 1008 	add.w	r0, r0, #524296	; 0x80008
90003eac:	f101 1108 	add.w	r1, r1, #524296	; 0x80008
90003eb0:	f102 1208 	add.w	r2, r2, #524296	; 0x80008
90003eb4:	e9c3 4010 	strd	r4, r0, [r3, #64]	; 0x40
90003eb8:	e9c3 1212 	strd	r1, r2, [r3, #72]	; 0x48
90003ebc:	f104 1408 	add.w	r4, r4, #524296	; 0x80008
90003ec0:	f100 1008 	add.w	r0, r0, #524296	; 0x80008
90003ec4:	f101 1108 	add.w	r1, r1, #524296	; 0x80008
90003ec8:	f102 1208 	add.w	r2, r2, #524296	; 0x80008
90003ecc:	e9c3 4014 	strd	r4, r0, [r3, #80]	; 0x50
90003ed0:	e9c3 1216 	strd	r1, r2, [r3, #88]	; 0x58
90003ed4:	f104 1408 	add.w	r4, r4, #524296	; 0x80008
90003ed8:	f100 1008 	add.w	r0, r0, #524296	; 0x80008
90003edc:	f101 1108 	add.w	r1, r1, #524296	; 0x80008
90003ee0:	f102 1208 	add.w	r2, r2, #524296	; 0x80008
90003ee4:	e9c3 4018 	strd	r4, r0, [r3, #96]	; 0x60
90003ee8:	e9c3 121a 	strd	r1, r2, [r3, #104]	; 0x68
90003eec:	f104 1408 	add.w	r4, r4, #524296	; 0x80008
90003ef0:	f100 1008 	add.w	r0, r0, #524296	; 0x80008
90003ef4:	f101 1108 	add.w	r1, r1, #524296	; 0x80008
90003ef8:	f102 1208 	add.w	r2, r2, #524296	; 0x80008
90003efc:	e9c3 401c 	strd	r4, r0, [r3, #112]	; 0x70
90003f00:	e9c3 121e 	strd	r1, r2, [r3, #120]	; 0x78
  for(i = 0; i < 8; i++)
90003f04:	4c1e      	ldr	r4, [pc, #120]	; (90003f80 <TGFX_JPEG_InitColorTables+0x948>)
      JPEG_K_MCU_444_LUT[offset]  = offset + 192 ;
90003f06:	481f      	ldr	r0, [pc, #124]	; (90003f84 <TGFX_JPEG_InitColorTables+0x94c>)
90003f08:	491f      	ldr	r1, [pc, #124]	; (90003f88 <TGFX_JPEG_InitColorTables+0x950>)
90003f0a:	4a20      	ldr	r2, [pc, #128]	; (90003f8c <TGFX_JPEG_InitColorTables+0x954>)
90003f0c:	4b20      	ldr	r3, [pc, #128]	; (90003f90 <TGFX_JPEG_InitColorTables+0x958>)
    CR_RED_LUT[i] = ( (((int32_t) ((1.40200 / 2) * (1L << 16)))  * index) + ((int32_t) 1 << (16 - 1))) >> 16;
90003f0e:	ea4f 4c23 	mov.w	ip, r3, asr #16
  for (i = 0; i <= 255; i++)
90003f12:	445b      	add	r3, fp
    CR_GREEN_LUT[i] = (-((int32_t) ((0.71414 / 2) * (1L << 16)))) * index;
90003f14:	f845 1f04 	str.w	r1, [r5, #4]!
  for (i = 0; i <= 255; i++)
90003f18:	4449      	add	r1, r9
    CR_RED_LUT[i] = ( (((int32_t) ((1.40200 / 2) * (1L << 16)))  * index) + ((int32_t) 1 << (16 - 1))) >> 16;
90003f1a:	f847 cf04 	str.w	ip, [r7, #4]!
  for (i = 0; i <= 255; i++)
90003f1e:	4573      	cmp	r3, lr
    CB_BLUE_LUT[i] = ( (((int32_t) ((1.77200 / 2) * (1L << 16)))  * index) + ((int32_t) 1 << (16 - 1))) >> 16;
90003f20:	ea4f 4c22 	mov.w	ip, r2, asr #16
    CB_GREEN_LUT[i] = (-((int32_t) ((0.34414 / 2) * (1L << 16)))) * index;
90003f24:	f844 0f04 	str.w	r0, [r4, #4]!
  for (i = 0; i <= 255; i++)
90003f28:	4452      	add	r2, sl
90003f2a:	4440      	add	r0, r8
    CB_BLUE_LUT[i] = ( (((int32_t) ((1.77200 / 2) * (1L << 16)))  * index) + ((int32_t) 1 << (16 - 1))) >> 16;
90003f2c:	f846 cf04 	str.w	ip, [r6, #4]!
  for (i = 0; i <= 255; i++)
90003f30:	d1ed      	bne.n	90003f0e <TGFX_JPEG_InitColorTables+0x8d6>
}
90003f32:	b025      	add	sp, #148	; 0x94
90003f34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      else  if((j>=8) && (i<8)) offset+= 56;
90003f38:	f1bc 0f07 	cmp.w	ip, #7
90003f3c:	d803      	bhi.n	90003f46 <TGFX_JPEG_InitColorTables+0x90e>
90003f3e:	b117      	cbz	r7, 90003f46 <TGFX_JPEG_InitColorTables+0x90e>
90003f40:	460d      	mov	r5, r1
90003f42:	f7ff bbf7 	b.w	90003734 <TGFX_JPEG_InitColorTables+0xfc>
      else  if((j<8) && (i>=8)) offset+= 64;
90003f46:	2c07      	cmp	r4, #7
90003f48:	f63f abf4 	bhi.w	90003734 <TGFX_JPEG_InitColorTables+0xfc>
90003f4c:	2e00      	cmp	r6, #0
90003f4e:	f43f abf1 	beq.w	90003734 <TGFX_JPEG_InitColorTables+0xfc>
      JPEG_Y_MCU_LUT[i*16 + j] = offset;
90003f52:	8013      	strh	r3, [r2, #0]
    for(j = 0; j < 16; j++)
90003f54:	f7ff bbf1 	b.w	9000373a <TGFX_JPEG_InitColorTables+0x102>
90003f58:	2400a388 	.word	0x2400a388
90003f5c:	240099c8 	.word	0x240099c8
90003f60:	24009e88 	.word	0x24009e88
90003f64:	2400a308 	.word	0x2400a308
90003f68:	240085c4 	.word	0x240085c4
90003f6c:	240079c4 	.word	0x240079c4
90003f70:	240081c4 	.word	0x240081c4
90003f74:	00430042 	.word	0x00430042
90003f78:	00830082 	.word	0x00830082
90003f7c:	00c700c6 	.word	0x00c700c6
90003f80:	24007dc4 	.word	0x24007dc4
90003f84:	002c0c00 	.word	0x002c0c00
90003f88:	005b6800 	.word	0x005b6800
90003f8c:	ff1db000 	.word	0xff1db000
90003f90:	ff4d0c00 	.word	0xff4d0c00
90003f94:	000166e8 	.word	0x000166e8
90003f98:	0001c5a0 	.word	0x0001c5a0
90003f9c:	ffff4930 	.word	0xffff4930
90003fa0:	ffffa7e8 	.word	0xffffa7e8
90003fa4:	00b3f400 	.word	0x00b3f400

90003fa8 <vApplicationIdleHook>:
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
  
  vTaskSetApplicationTaskTag(NULL, IdleTaskHook);
90003fa8:	4901      	ldr	r1, [pc, #4]	; (90003fb0 <vApplicationIdleHook+0x8>)
90003faa:	2000      	movs	r0, #0
90003fac:	f00b bd5c 	b.w	9000fa68 <vTaskSetApplicationTaskTag>
90003fb0:	90000945 	.word	0x90000945

90003fb4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
90003fb4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(100);
90003fb6:	2064      	movs	r0, #100	; 0x64
90003fb8:	f009 faa0 	bl	9000d4fc <osDelay>
  for(;;)
90003fbc:	e7fb      	b.n	90003fb6 <StartDefaultTask+0x2>
90003fbe:	bf00      	nop

90003fc0 <SystemClock_Config>:
{
90003fc0:	b570      	push	{r4, r5, r6, lr}
90003fc2:	b09e      	sub	sp, #120	; 0x78
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
90003fc4:	224c      	movs	r2, #76	; 0x4c
90003fc6:	2100      	movs	r1, #0
90003fc8:	a80a      	add	r0, sp, #40	; 0x28
90003fca:	f01f f9d3 	bl	90023374 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
90003fce:	2220      	movs	r2, #32
90003fd0:	2100      	movs	r1, #0
90003fd2:	a802      	add	r0, sp, #8
90003fd4:	f01f f9ce 	bl	90023374 <memset>
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
90003fd8:	2002      	movs	r0, #2
90003fda:	f006 fddb 	bl	9000ab94 <HAL_PWREx_ConfigSupply>
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
90003fde:	4b22      	ldr	r3, [pc, #136]	; (90004068 <SystemClock_Config+0xa8>)
90003fe0:	2100      	movs	r1, #0
90003fe2:	4a22      	ldr	r2, [pc, #136]	; (9000406c <SystemClock_Config+0xac>)
90003fe4:	9101      	str	r1, [sp, #4]
90003fe6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
90003fe8:	f021 0101 	bic.w	r1, r1, #1
90003fec:	62d9      	str	r1, [r3, #44]	; 0x2c
90003fee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90003ff0:	f003 0301 	and.w	r3, r3, #1
90003ff4:	9301      	str	r3, [sp, #4]
90003ff6:	6993      	ldr	r3, [r2, #24]
90003ff8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
90003ffc:	6193      	str	r3, [r2, #24]
90003ffe:	6993      	ldr	r3, [r2, #24]
90004000:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
90004004:	9301      	str	r3, [sp, #4]
90004006:	9b01      	ldr	r3, [sp, #4]
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
90004008:	6993      	ldr	r3, [r2, #24]
9000400a:	0499      	lsls	r1, r3, #18
9000400c:	d5fc      	bpl.n	90004008 <SystemClock_Config+0x48>
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
9000400e:	2201      	movs	r2, #1
90004010:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
90004014:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
90004016:	2608      	movs	r6, #8
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
90004018:	2500      	movs	r5, #0
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
9000401a:	a80a      	add	r0, sp, #40	; 0x28
  RCC_OscInitStruct.PLL.PLLP = 2;
9000401c:	9417      	str	r4, [sp, #92]	; 0x5c
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
9000401e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLN = 160;
90004022:	2205      	movs	r2, #5
90004024:	23a0      	movs	r3, #160	; 0xa0
90004026:	e9cd 2315 	strd	r2, r3, [sp, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLQ = 4;
9000402a:	2304      	movs	r3, #4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
9000402c:	e9cd 4413 	strd	r4, r4, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = 4;
90004030:	9318      	str	r3, [sp, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
90004032:	e9cd 4619 	strd	r4, r6, [sp, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
90004036:	e9cd 551b 	strd	r5, r5, [sp, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
9000403a:	f006 fe53 	bl	9000ace4 <HAL_RCC_OscConfig>
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
9000403e:	2340      	movs	r3, #64	; 0x40
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
90004040:	223f      	movs	r2, #63	; 0x3f
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
90004042:	4621      	mov	r1, r4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
90004044:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
90004046:	eb0d 0006 	add.w	r0, sp, r6
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
9000404a:	9202      	str	r2, [sp, #8]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
9000404c:	2203      	movs	r2, #3
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
9000404e:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
90004050:	9504      	str	r5, [sp, #16]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
90004052:	9203      	str	r2, [sp, #12]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
90004054:	e9cd 6305 	strd	r6, r3, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
90004058:	f44f 6380 	mov.w	r3, #1024	; 0x400
9000405c:	9308      	str	r3, [sp, #32]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
9000405e:	f007 f9d5 	bl	9000b40c <HAL_RCC_ClockConfig>
}
90004062:	b01e      	add	sp, #120	; 0x78
90004064:	bd70      	pop	{r4, r5, r6, pc}
90004066:	bf00      	nop
90004068:	58000400 	.word	0x58000400
9000406c:	58024800 	.word	0x58024800

90004070 <main>:
{
90004070:	b580      	push	{r7, lr}

/* MPU Configuration */

void MPU_Config(void)
{
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
90004072:	2400      	movs	r4, #0
{
90004074:	b09c      	sub	sp, #112	; 0x70
  /* Disables the MPU */
  HAL_MPU_Disable();

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
90004076:	2501      	movs	r5, #1

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
  MPU_InitStruct.BaseAddress = 0x90000000;
  MPU_InitStruct.Size = MPU_REGION_SIZE_256MB;
90004078:	271b      	movs	r7, #27

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
  MPU_InitStruct.Size = MPU_REGION_SIZE_128MB;
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
9000407a:	2603      	movs	r6, #3
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
9000407c:	e9cd 440f 	strd	r4, r4, [sp, #60]	; 0x3c
90004080:	e9cd 4411 	strd	r4, r4, [sp, #68]	; 0x44
  HAL_MPU_Disable();
90004084:	f003 fd6e 	bl	90007b64 <HAL_MPU_Disable>
  MPU_InitStruct.BaseAddress = 0x24000000;
90004088:	f04f 5310 	mov.w	r3, #603979776	; 0x24000000
  MPU_InitStruct.Size = MPU_REGION_SIZE_512KB;
9000408c:	49d6      	ldr	r1, [pc, #856]	; (900043e8 <main+0x378>)
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
9000408e:	a80f      	add	r0, sp, #60	; 0x3c
  MPU_InitStruct.BaseAddress = 0x24000000;
90004090:	9310      	str	r3, [sp, #64]	; 0x40
  MPU_InitStruct.Size = MPU_REGION_SIZE_512KB;
90004092:	4bd6      	ldr	r3, [pc, #856]	; (900043ec <main+0x37c>)
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
90004094:	f8ad 503c 	strh.w	r5, [sp, #60]	; 0x3c
  MPU_InitStruct.Size = MPU_REGION_SIZE_512KB;
90004098:	e9cd 1311 	strd	r1, r3, [sp, #68]	; 0x44
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
9000409c:	f003 fd80 	bl	90007ba0 <HAL_MPU_ConfigRegion>
  MPU_InitStruct.BaseAddress = 0x90000000;
900040a0:	f04f 4310 	mov.w	r3, #2415919104	; 0x90000000
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
900040a4:	a80f      	add	r0, sp, #60	; 0x3c
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
900040a6:	f88d 4047 	strb.w	r4, [sp, #71]	; 0x47
  MPU_InitStruct.BaseAddress = 0x90000000;
900040aa:	9310      	str	r3, [sp, #64]	; 0x40
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
900040ac:	f8ad 404a 	strh.w	r4, [sp, #74]	; 0x4a
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
900040b0:	f88d 503d 	strb.w	r5, [sp, #61]	; 0x3d
  MPU_InitStruct.Size = MPU_REGION_SIZE_256MB;
900040b4:	f88d 7044 	strb.w	r7, [sp, #68]	; 0x44
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
900040b8:	f003 fd72 	bl	90007ba0 <HAL_MPU_ConfigRegion>
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
900040bc:	2302      	movs	r3, #2
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
900040be:	a80f      	add	r0, sp, #60	; 0x3c
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
900040c0:	f8ad 6047 	strh.w	r6, [sp, #71]	; 0x47
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
900040c4:	f88d 303d 	strb.w	r3, [sp, #61]	; 0x3d
  MPU_InitStruct.Size = MPU_REGION_SIZE_128MB;
900040c8:	231a      	movs	r3, #26
900040ca:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
900040ce:	f240 1301 	movw	r3, #257	; 0x101
900040d2:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
900040d6:	f003 fd63 	bl	90007ba0 <HAL_MPU_ConfigRegion>
  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER3;
  MPU_InitStruct.BaseAddress = 0xD0000000;
  MPU_InitStruct.Size = MPU_REGION_SIZE_256MB;
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
900040da:	f44f 7380 	mov.w	r3, #256	; 0x100
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
900040de:	a80f      	add	r0, sp, #60	; 0x3c
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
900040e0:	f8ad 404a 	strh.w	r4, [sp, #74]	; 0x4a

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER4;
900040e4:	2404      	movs	r4, #4
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
900040e6:	f8ad 3047 	strh.w	r3, [sp, #71]	; 0x47
  MPU_InitStruct.BaseAddress = 0xD0000000;
900040ea:	f04f 4350 	mov.w	r3, #3489660928	; 0xd0000000
  MPU_InitStruct.Size = MPU_REGION_SIZE_256MB;
900040ee:	f88d 7044 	strb.w	r7, [sp, #68]	; 0x44
  MPU_InitStruct.BaseAddress = 0xD0000000;
900040f2:	9310      	str	r3, [sp, #64]	; 0x40
  MPU_InitStruct.Number = MPU_REGION_NUMBER3;
900040f4:	f88d 603d 	strb.w	r6, [sp, #61]	; 0x3d
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
900040f8:	f003 fd52 	bl	90007ba0 <HAL_MPU_ConfigRegion>
  MPU_InitStruct.Size = MPU_REGION_SIZE_32MB;
900040fc:	2318      	movs	r3, #24
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
900040fe:	a80f      	add	r0, sp, #60	; 0x3c
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
90004100:	f88d 6047 	strb.w	r6, [sp, #71]	; 0x47
  MPU_InitStruct.Size = MPU_REGION_SIZE_32MB;
90004104:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
  MPU_InitStruct.Number = MPU_REGION_NUMBER4;
90004108:	f88d 403d 	strb.w	r4, [sp, #61]	; 0x3d
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
9000410c:	f88d 504a 	strb.w	r5, [sp, #74]	; 0x4a
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
90004110:	f003 fd46 	bl	90007ba0 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
90004114:	4620      	mov	r0, r4
90004116:	f003 fd33 	bl	90007b80 <HAL_MPU_Enable>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
9000411a:	4ab5      	ldr	r2, [pc, #724]	; (900043f0 <main+0x380>)
9000411c:	6953      	ldr	r3, [r2, #20]
9000411e:	f413 3300 	ands.w	r3, r3, #131072	; 0x20000
90004122:	d111      	bne.n	90004148 <main+0xd8>
  __ASM volatile ("dsb 0xF":::"memory");
90004124:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
90004128:	f3bf 8f6f 	isb	sy
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
9000412c:	f8c2 3250 	str.w	r3, [r2, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
90004130:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
90004134:	f3bf 8f6f 	isb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
90004138:	6953      	ldr	r3, [r2, #20]
9000413a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
9000413e:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
90004140:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
90004144:	f3bf 8f6f 	isb	sy
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
90004148:	48a9      	ldr	r0, [pc, #676]	; (900043f0 <main+0x380>)
9000414a:	6943      	ldr	r3, [r0, #20]
9000414c:	f413 3380 	ands.w	r3, r3, #65536	; 0x10000
90004150:	d124      	bne.n	9000419c <main+0x12c>
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
90004152:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
90004156:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
9000415a:	f8d0 5080 	ldr.w	r5, [r0, #128]	; 0x80
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
9000415e:	f643 76e0 	movw	r6, #16352	; 0x3fe0
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
90004162:	f3c5 344e 	ubfx	r4, r5, #13, #15
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
90004166:	f3c5 05c9 	ubfx	r5, r5, #3, #10
9000416a:	0164      	lsls	r4, r4, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
9000416c:	ea04 0106 	and.w	r1, r4, r6
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
90004170:	462b      	mov	r3, r5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
90004172:	ea41 7283 	orr.w	r2, r1, r3, lsl #30
      } while (ways-- != 0U);
90004176:	3b01      	subs	r3, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
90004178:	f8c0 2260 	str.w	r2, [r0, #608]	; 0x260
      } while (ways-- != 0U);
9000417c:	1c5a      	adds	r2, r3, #1
9000417e:	d1f8      	bne.n	90004172 <main+0x102>
    } while(sets-- != 0U);
90004180:	3c20      	subs	r4, #32
90004182:	f114 0f20 	cmn.w	r4, #32
90004186:	d1f1      	bne.n	9000416c <main+0xfc>
90004188:	f3bf 8f4f 	dsb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
9000418c:	6943      	ldr	r3, [r0, #20]
9000418e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
90004192:	6143      	str	r3, [r0, #20]
90004194:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
90004198:	f3bf 8f6f 	isb	sy
  HAL_Init();
9000419c:	f002 fd96 	bl	90006ccc <HAL_Init>
  SystemClock_Config();
900041a0:	f7ff ff0e 	bl	90003fc0 <SystemClock_Config>
  __ASM volatile ("cpsie i" : : : "memory");
900041a4:	b662      	cpsie	i
  GPIO_InitTypeDef GPIO_InitStruct = {0};
900041a6:	2400      	movs	r4, #0
  __HAL_RCC_GPIOK_CLK_ENABLE();
900041a8:	4d92      	ldr	r5, [pc, #584]	; (900043f4 <main+0x384>)
  HAL_GPIO_WritePin(GPIOB, FRAME_RATE_Pin|RENDER_TIME_Pin, GPIO_PIN_RESET);
900041aa:	21c0      	movs	r1, #192	; 0xc0
900041ac:	4892      	ldr	r0, [pc, #584]	; (900043f8 <main+0x388>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
900041ae:	9413      	str	r4, [sp, #76]	; 0x4c
  HAL_GPIO_WritePin(GPIOB, FRAME_RATE_Pin|RENDER_TIME_Pin, GPIO_PIN_RESET);
900041b0:	4622      	mov	r2, r4
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
900041b2:	2601      	movs	r6, #1
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
900041b4:	f04f 0903 	mov.w	r9, #3
  GPIO_InitStruct.Pin = VSYNC_FREQ_Pin;
900041b8:	f04f 0808 	mov.w	r8, #8
  GPIO_InitStruct.Pin = LCD_RESET_Pin;
900041bc:	2704      	movs	r7, #4
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
900041be:	f04f 0a05 	mov.w	sl, #5
  GPIO_InitTypeDef GPIO_InitStruct = {0};
900041c2:	e9cd 440f 	strd	r4, r4, [sp, #60]	; 0x3c
900041c6:	e9cd 4411 	strd	r4, r4, [sp, #68]	; 0x44
  __HAL_RCC_GPIOK_CLK_ENABLE();
900041ca:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
900041ce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
900041d2:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
900041d6:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
900041da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
900041de:	9301      	str	r3, [sp, #4]
900041e0:	9b01      	ldr	r3, [sp, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
900041e2:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
900041e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
900041ea:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
900041ee:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
900041f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
900041f6:	9302      	str	r3, [sp, #8]
900041f8:	9b02      	ldr	r3, [sp, #8]
  __HAL_RCC_GPIOI_CLK_ENABLE();
900041fa:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
900041fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
90004202:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
90004206:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
9000420a:	f403 7380 	and.w	r3, r3, #256	; 0x100
9000420e:	9303      	str	r3, [sp, #12]
90004210:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
90004212:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
90004216:	f043 0310 	orr.w	r3, r3, #16
9000421a:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
9000421e:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
90004222:	f003 0310 	and.w	r3, r3, #16
90004226:	9304      	str	r3, [sp, #16]
90004228:	9b04      	ldr	r3, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
9000422a:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
9000422e:	f043 0302 	orr.w	r3, r3, #2
90004232:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
90004236:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
9000423a:	f003 0302 	and.w	r3, r3, #2
9000423e:	9305      	str	r3, [sp, #20]
90004240:	9b05      	ldr	r3, [sp, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
90004242:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
90004246:	f443 7300 	orr.w	r3, r3, #512	; 0x200
9000424a:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
9000424e:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
90004252:	f403 7300 	and.w	r3, r3, #512	; 0x200
90004256:	9306      	str	r3, [sp, #24]
90004258:	9b06      	ldr	r3, [sp, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
9000425a:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
9000425e:	f043 0308 	orr.w	r3, r3, #8
90004262:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
90004266:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
9000426a:	f003 0308 	and.w	r3, r3, #8
9000426e:	9307      	str	r3, [sp, #28]
90004270:	9b07      	ldr	r3, [sp, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
90004272:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
90004276:	f043 0320 	orr.w	r3, r3, #32
9000427a:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
9000427e:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
90004282:	f003 0320 	and.w	r3, r3, #32
90004286:	9308      	str	r3, [sp, #32]
90004288:	9b08      	ldr	r3, [sp, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
9000428a:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
9000428e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
90004292:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
90004296:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
9000429a:	f003 0380 	and.w	r3, r3, #128	; 0x80
9000429e:	9309      	str	r3, [sp, #36]	; 0x24
900042a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
  __HAL_RCC_GPIOC_CLK_ENABLE();
900042a2:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
900042a6:	f043 0304 	orr.w	r3, r3, #4
900042aa:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
900042ae:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
900042b2:	f003 0304 	and.w	r3, r3, #4
900042b6:	930a      	str	r3, [sp, #40]	; 0x28
900042b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  __HAL_RCC_GPIOA_CLK_ENABLE();
900042ba:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
900042be:	f043 0301 	orr.w	r3, r3, #1
900042c2:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
900042c6:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
900042ca:	f003 0301 	and.w	r3, r3, #1
900042ce:	930b      	str	r3, [sp, #44]	; 0x2c
900042d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  HAL_GPIO_WritePin(GPIOB, FRAME_RATE_Pin|RENDER_TIME_Pin, GPIO_PIN_RESET);
900042d2:	f004 f855 	bl	90008380 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_DE_GPIO_Port, LCD_DE_Pin, GPIO_PIN_RESET);
900042d6:	4622      	mov	r2, r4
900042d8:	2180      	movs	r1, #128	; 0x80
900042da:	4848      	ldr	r0, [pc, #288]	; (900043fc <main+0x38c>)
900042dc:	f004 f850 	bl	90008380 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, GPIO_PIN_RESET);
900042e0:	4622      	mov	r2, r4
900042e2:	2108      	movs	r1, #8
900042e4:	4846      	ldr	r0, [pc, #280]	; (90004400 <main+0x390>)
900042e6:	f004 f84b 	bl	90008380 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
900042ea:	2201      	movs	r2, #1
900042ec:	4845      	ldr	r0, [pc, #276]	; (90004404 <main+0x394>)
900042ee:	4611      	mov	r1, r2
900042f0:	f004 f846 	bl	90008380 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, LCD_RESET_Pin|MCU_ACTIVE_Pin, GPIO_PIN_RESET);
900042f4:	4622      	mov	r2, r4
900042f6:	2144      	movs	r1, #68	; 0x44
900042f8:	4843      	ldr	r0, [pc, #268]	; (90004408 <main+0x398>)
900042fa:	f004 f841 	bl	90008380 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = FRAME_RATE_Pin|RENDER_TIME_Pin;
900042fe:	23c0      	movs	r3, #192	; 0xc0
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
90004300:	a90f      	add	r1, sp, #60	; 0x3c
90004302:	483d      	ldr	r0, [pc, #244]	; (900043f8 <main+0x388>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
90004304:	e9cd 360f 	strd	r3, r6, [sp, #60]	; 0x3c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
90004308:	e9cd 4911 	strd	r4, r9, [sp, #68]	; 0x44
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
9000430c:	f003 fe38 	bl	90007f80 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LCD_DE_Pin;
90004310:	2380      	movs	r3, #128	; 0x80
  HAL_GPIO_Init(LCD_DE_GPIO_Port, &GPIO_InitStruct);
90004312:	a90f      	add	r1, sp, #60	; 0x3c
90004314:	4839      	ldr	r0, [pc, #228]	; (900043fc <main+0x38c>)
  GPIO_InitStruct.Pin = LCD_DE_Pin;
90004316:	930f      	str	r3, [sp, #60]	; 0x3c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
90004318:	9412      	str	r4, [sp, #72]	; 0x48
  GPIO_InitStruct.Pull = GPIO_NOPULL;
9000431a:	e9cd 6410 	strd	r6, r4, [sp, #64]	; 0x40
  HAL_GPIO_Init(LCD_DE_GPIO_Port, &GPIO_InitStruct);
9000431e:	f003 fe2f 	bl	90007f80 <HAL_GPIO_Init>
  HAL_GPIO_Init(VSYNC_FREQ_GPIO_Port, &GPIO_InitStruct);
90004322:	a90f      	add	r1, sp, #60	; 0x3c
90004324:	4836      	ldr	r0, [pc, #216]	; (90004400 <main+0x390>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
90004326:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
  GPIO_InitStruct.Pin = VSYNC_FREQ_Pin;
9000432a:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
9000432e:	e9cd 6410 	strd	r6, r4, [sp, #64]	; 0x40
  HAL_GPIO_Init(VSYNC_FREQ_GPIO_Port, &GPIO_InitStruct);
90004332:	f003 fe25 	bl	90007f80 <HAL_GPIO_Init>
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
90004336:	a90f      	add	r1, sp, #60	; 0x3c
90004338:	4832      	ldr	r0, [pc, #200]	; (90004404 <main+0x394>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
9000433a:	e9cd 660f 	strd	r6, r6, [sp, #60]	; 0x3c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
9000433e:	e9cd 4411 	strd	r4, r4, [sp, #68]	; 0x44
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
90004342:	f003 fe1d 	bl	90007f80 <HAL_GPIO_Init>
  HAL_GPIO_Init(LCD_RESET_GPIO_Port, &GPIO_InitStruct);
90004346:	a90f      	add	r1, sp, #60	; 0x3c
90004348:	482f      	ldr	r0, [pc, #188]	; (90004408 <main+0x398>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
9000434a:	e9cd 760f 	strd	r7, r6, [sp, #60]	; 0x3c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
9000434e:	e9cd 4411 	strd	r4, r4, [sp, #68]	; 0x44
  HAL_GPIO_Init(LCD_RESET_GPIO_Port, &GPIO_InitStruct);
90004352:	f003 fe15 	bl	90007f80 <HAL_GPIO_Init>
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
90004356:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
  GPIO_InitStruct.Pin = MCU_ACTIVE_Pin;
9000435a:	f04f 0940 	mov.w	r9, #64	; 0x40
  HAL_GPIO_Init(MCU_ACTIVE_GPIO_Port, &GPIO_InitStruct);
9000435e:	a90f      	add	r1, sp, #60	; 0x3c
90004360:	4829      	ldr	r0, [pc, #164]	; (90004408 <main+0x398>)
  GPIO_InitStruct.Pin = MCU_ACTIVE_Pin;
90004362:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
90004366:	e9cd 6410 	strd	r6, r4, [sp, #64]	; 0x40
  HAL_GPIO_Init(MCU_ACTIVE_GPIO_Port, &GPIO_InitStruct);
9000436a:	f003 fe09 	bl	90007f80 <HAL_GPIO_Init>
  __HAL_RCC_MDMA_CLK_ENABLE();
9000436e:	f8d5 30d4 	ldr.w	r3, [r5, #212]	; 0xd4
  HAL_NVIC_SetPriority(MDMA_IRQn, 5, 0);
90004372:	4622      	mov	r2, r4
90004374:	2105      	movs	r1, #5
  __HAL_RCC_MDMA_CLK_ENABLE();
90004376:	4333      	orrs	r3, r6
  HAL_NVIC_SetPriority(MDMA_IRQn, 5, 0);
90004378:	207a      	movs	r0, #122	; 0x7a
  __HAL_RCC_MDMA_CLK_ENABLE();
9000437a:	f8c5 30d4 	str.w	r3, [r5, #212]	; 0xd4
9000437e:	f8d5 30d4 	ldr.w	r3, [r5, #212]	; 0xd4
  hltdc.Instance = LTDC;
90004382:	4d22      	ldr	r5, [pc, #136]	; (9000440c <main+0x39c>)
  __HAL_RCC_MDMA_CLK_ENABLE();
90004384:	4033      	ands	r3, r6
90004386:	9300      	str	r3, [sp, #0]
90004388:	9b00      	ldr	r3, [sp, #0]
  HAL_NVIC_SetPriority(MDMA_IRQn, 5, 0);
9000438a:	f003 fb8d 	bl	90007aa8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(MDMA_IRQn);
9000438e:	207a      	movs	r0, #122	; 0x7a
90004390:	f003 fbc8 	bl	90007b24 <HAL_NVIC_EnableIRQ>
  LTDC_LayerCfgTypeDef pLayerCfg = {0};
90004394:	2234      	movs	r2, #52	; 0x34
90004396:	4621      	mov	r1, r4
90004398:	a80f      	add	r0, sp, #60	; 0x3c
9000439a:	f01e ffeb 	bl	90023374 <memset>
  hltdc.Instance = LTDC;
9000439e:	4b1c      	ldr	r3, [pc, #112]	; (90004410 <main+0x3a0>)
  hltdc.Init.AccumulatedVBP = 11;
900043a0:	202a      	movs	r0, #42	; 0x2a
  hltdc.Init.AccumulatedActiveH = 283;
900043a2:	f240 2c0a 	movw	ip, #522	; 0x20a
  hltdc.Instance = LTDC;
900043a6:	602b      	str	r3, [r5, #0]
  hltdc.Init.HorizontalSync = 39;
900043a8:	2327      	movs	r3, #39	; 0x27
  hltdc.Init.TotalHeigh = 285;
900043aa:	f44f 7e04 	mov.w	lr, #528	; 0x210
  hltdc.Init.Backcolor.Blue = 0;
900043ae:	86ac      	strh	r4, [r5, #52]	; 0x34
  hltdc.Init.HorizontalSync = 39;
900043b0:	616b      	str	r3, [r5, #20]
  hltdc.Init.AccumulatedVBP = 11;
900043b2:	230b      	movs	r3, #11
  hltdc.Init.VerticalSync = 8;
900043b4:	f8c5 8018 	str.w	r8, [r5, #24]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
900043b8:	f04f 0802 	mov.w	r8, #2
  hltdc.Init.Backcolor.Red = 0;
900043bc:	f885 4036 	strb.w	r4, [r5, #54]	; 0x36
  hltdc.Init.AccumulatedVBP = 11;
900043c0:	e9c5 0307 	strd	r0, r3, [r5, #28]
  hltdc.Init.AccumulatedActiveH = 283;
900043c4:	f240 131b 	movw	r3, #283	; 0x11b
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
900043c8:	4628      	mov	r0, r5
  hltdc.Init.AccumulatedActiveH = 283;
900043ca:	e9c5 c309 	strd	ip, r3, [r5, #36]	; 0x24
  hltdc.Init.TotalHeigh = 285;
900043ce:	f240 131d 	movw	r3, #285	; 0x11d
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
900043d2:	e9c5 4401 	strd	r4, r4, [r5, #4]
  hltdc.Init.TotalHeigh = 285;
900043d6:	e9c5 e30b 	strd	lr, r3, [r5, #44]	; 0x2c
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
900043da:	e9c5 4403 	strd	r4, r4, [r5, #12]
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
900043de:	f005 fff5 	bl	9000a3cc <HAL_LTDC_Init>
  pLayerCfg.WindowX1 = 480;
900043e2:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
900043e6:	e015      	b.n	90004414 <main+0x3a4>
900043e8:	03000012 	.word	0x03000012
900043ec:	01010001 	.word	0x01010001
900043f0:	e000ed00 	.word	0xe000ed00
900043f4:	58024400 	.word	0x58024400
900043f8:	58020400 	.word	0x58020400
900043fc:	58020c00 	.word	0x58020c00
90004400:	58021800 	.word	0x58021800
90004404:	58022800 	.word	0x58022800
90004408:	58020000 	.word	0x58020000
9000440c:	2400af58 	.word	0x2400af58
90004410:	50001000 	.word	0x50001000
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
90004414:	4622      	mov	r2, r4
90004416:	a90f      	add	r1, sp, #60	; 0x3c
  pLayerCfg.WindowX1 = 480;
90004418:	9310      	str	r3, [sp, #64]	; 0x40
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
9000441a:	4628      	mov	r0, r5
  pLayerCfg.ImageWidth = 480;
9000441c:	9319      	str	r3, [sp, #100]	; 0x64
  pLayerCfg.WindowY1 = 272;
9000441e:	f44f 7388 	mov.w	r3, #272	; 0x110
  hdma2d.Instance = DMA2D;
90004422:	4d59      	ldr	r5, [pc, #356]	; (90004588 <main+0x518>)
  pLayerCfg.WindowY1 = 272;
90004424:	9312      	str	r3, [sp, #72]	; 0x48
  pLayerCfg.ImageHeight = 272;
90004426:	931a      	str	r3, [sp, #104]	; 0x68
  pLayerCfg.Alpha = 255;
90004428:	23ff      	movs	r3, #255	; 0xff
  pLayerCfg.WindowX0 = 0;
9000442a:	940f      	str	r4, [sp, #60]	; 0x3c
  pLayerCfg.Alpha = 255;
9000442c:	9314      	str	r3, [sp, #80]	; 0x50
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
9000442e:	f44f 6380 	mov.w	r3, #1024	; 0x400
  pLayerCfg.WindowY0 = 0;
90004432:	9411      	str	r4, [sp, #68]	; 0x44
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
90004434:	9316      	str	r3, [sp, #88]	; 0x58
  pLayerCfg.Alpha0 = 0;
90004436:	9415      	str	r4, [sp, #84]	; 0x54
  pLayerCfg.FBStartAdress = 0;
90004438:	9418      	str	r4, [sp, #96]	; 0x60
  pLayerCfg.Backcolor.Blue = 0;
9000443a:	f8ad 406c 	strh.w	r4, [sp, #108]	; 0x6c
  pLayerCfg.Backcolor.Red = 0;
9000443e:	f88d 406e 	strb.w	r4, [sp, #110]	; 0x6e
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
90004442:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
90004446:	f8cd a05c 	str.w	sl, [sp, #92]	; 0x5c
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
9000444a:	f006 f893 	bl	9000a574 <HAL_LTDC_ConfigLayer>
  hdma2d.Instance = DMA2D;
9000444e:	4b4f      	ldr	r3, [pc, #316]	; (9000458c <main+0x51c>)
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
90004450:	4628      	mov	r0, r5
  hdma2d.LayerCfg[1].ChromaSubSampling = DMA2D_NO_CSS;
90004452:	65ec      	str	r4, [r5, #92]	; 0x5c
  hdma2d.Instance = DMA2D;
90004454:	602b      	str	r3, [r5, #0]
  hdma2d.Init.OutputOffset = 0;
90004456:	60ec      	str	r4, [r5, #12]
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_RGB565;
90004458:	e9c5 4811 	strd	r4, r8, [r5, #68]	; 0x44
  hdma2d.LayerCfg[1].InputAlpha = 0;
9000445c:	e9c5 4413 	strd	r4, r4, [r5, #76]	; 0x4c
  hdma2d.LayerCfg[1].RedBlueSwap = DMA2D_RB_REGULAR;
90004460:	e9c5 4415 	strd	r4, r4, [r5, #84]	; 0x54
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB565;
90004464:	e9c5 4801 	strd	r4, r8, [r5, #4]
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
90004468:	f003 fc42 	bl	90007cf0 <HAL_DMA2D_Init>
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
9000446c:	4631      	mov	r1, r6
9000446e:	4628      	mov	r0, r5
  hadc1.Instance = ADC1;
90004470:	4d47      	ldr	r5, [pc, #284]	; (90004590 <main+0x520>)
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
90004472:	f003 fd15 	bl	90007ea0 <HAL_DMA2D_ConfigLayer>
  SdramTiming.ExitSelfRefreshDelay = 7;
90004476:	2307      	movs	r3, #7
  hsdram2.Instance = FMC_SDRAM_DEVICE;
90004478:	4846      	ldr	r0, [pc, #280]	; (90004594 <main+0x524>)
  hsdram2.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
9000447a:	f44f 6e00 	mov.w	lr, #2048	; 0x800
  SdramTiming.ExitSelfRefreshDelay = 7;
9000447e:	9310      	str	r3, [sp, #64]	; 0x40
  if (HAL_SDRAM_Init(&hsdram2, &SdramTiming) != HAL_OK)
90004480:	a90f      	add	r1, sp, #60	; 0x3c
  SdramTiming.RowCycleDelay = 7;
90004482:	9312      	str	r3, [sp, #72]	; 0x48
  hsdram2.Instance = FMC_SDRAM_DEVICE;
90004484:	4b44      	ldr	r3, [pc, #272]	; (90004598 <main+0x528>)
  SdramTiming.WriteRecoveryTime = 5;
90004486:	f8cd a04c 	str.w	sl, [sp, #76]	; 0x4c
  hsdram2.Instance = FMC_SDRAM_DEVICE;
9000448a:	6003      	str	r3, [r0, #0]
  hsdram2.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
9000448c:	2310      	movs	r3, #16
  SdramTiming.LoadToActiveDelay = 2;
9000448e:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
  hsdram2.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
90004492:	6103      	str	r3, [r0, #16]
  hsdram2.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
90004494:	f44f 73c0 	mov.w	r3, #384	; 0x180
  SdramTiming.SelfRefreshTime = 4;
90004498:	9711      	str	r7, [sp, #68]	; 0x44
  hsdram2.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
9000449a:	6183      	str	r3, [r0, #24]
  hsdram2.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
9000449c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  hsdram2.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
900044a0:	f8c0 9014 	str.w	r9, [r0, #20]
  hsdram2.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
900044a4:	60c7      	str	r7, [r0, #12]
  hsdram2.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
900044a6:	61c4      	str	r4, [r0, #28]
  hsdram2.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
900044a8:	6284      	str	r4, [r0, #40]	; 0x28
  hsdram2.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
900044aa:	e9c0 e308 	strd	lr, r3, [r0, #32]
  SdramTiming.RCDDelay = 2;
900044ae:	e9cd 8814 	strd	r8, r8, [sp, #80]	; 0x50
  hsdram2.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
900044b2:	e9c0 6401 	strd	r6, r4, [r0, #4]
  if (HAL_SDRAM_Init(&hsdram2, &SdramTiming) != HAL_OK)
900044b6:	f008 fc8d 	bl	9000cdd4 <HAL_SDRAM_Init>
  BSP_SDRAM_DeInit(0);
900044ba:	4620      	mov	r0, r4
900044bc:	f002 f998 	bl	900067f0 <BSP_SDRAM_DeInit>
  if(BSP_SDRAM_Init(0) != BSP_ERROR_NONE)
900044c0:	4620      	mov	r0, r4
900044c2:	f002 f9df 	bl	90006884 <BSP_SDRAM_Init>
  MX_LIBJPEG_Init();
900044c6:	f7fb ff85 	bl	900003d4 <MX_LIBJPEG_Init>
  hjpeg.Instance = JPEG;
900044ca:	4b34      	ldr	r3, [pc, #208]	; (9000459c <main+0x52c>)
900044cc:	4834      	ldr	r0, [pc, #208]	; (900045a0 <main+0x530>)
900044ce:	6003      	str	r3, [r0, #0]
  if (HAL_JPEG_Init(&hjpeg) != HAL_OK)
900044d0:	f004 ff50 	bl	90009374 <HAL_JPEG_Init>
  hcrc.Instance = CRC;
900044d4:	4833      	ldr	r0, [pc, #204]	; (900045a4 <main+0x534>)
900044d6:	4b34      	ldr	r3, [pc, #208]	; (900045a8 <main+0x538>)
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
900044d8:	8084      	strh	r4, [r0, #4]
  hcrc.Instance = CRC;
900044da:	6003      	str	r3, [r0, #0]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
900044dc:	6206      	str	r6, [r0, #32]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
900044de:	e9c0 4405 	strd	r4, r4, [r0, #20]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
900044e2:	f003 fb8f 	bl	90007c04 <HAL_CRC_Init>
  hadc1.Instance = ADC1;
900044e6:	4b31      	ldr	r3, [pc, #196]	; (900045ac <main+0x53c>)
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
900044e8:	4628      	mov	r0, r5
  hadc1.Init.LowPowerAutoWait = DISABLE;
900044ea:	82ac      	strh	r4, [r5, #20]
  hadc1.Instance = ADC1;
900044ec:	602b      	str	r3, [r5, #0]
  hadc1.Init.NbrOfConversion = 1;
900044ee:	61ae      	str	r6, [r5, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
900044f0:	772c      	strb	r4, [r5, #28]
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
900044f2:	636c      	str	r4, [r5, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
900044f4:	f885 4038 	strb.w	r4, [r5, #56]	; 0x38
  ADC_MultiModeTypeDef multimode = {0};
900044f8:	940c      	str	r4, [sp, #48]	; 0x30
  ADC_ChannelConfTypeDef sConfig = {0};
900044fa:	9415      	str	r4, [sp, #84]	; 0x54
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
900044fc:	e9c5 4401 	strd	r4, r4, [r5, #4]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
90004500:	e9c5 4703 	strd	r4, r7, [r5, #12]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
90004504:	e9c5 4409 	strd	r4, r4, [r5, #36]	; 0x24
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
90004508:	e9c5 440b 	strd	r4, r4, [r5, #44]	; 0x2c
  ADC_ChannelConfTypeDef sConfig = {0};
9000450c:	e9cd 440f 	strd	r4, r4, [sp, #60]	; 0x3c
90004510:	e9cd 4411 	strd	r4, r4, [sp, #68]	; 0x44
90004514:	e9cd 4413 	strd	r4, r4, [sp, #76]	; 0x4c
  ADC_MultiModeTypeDef multimode = {0};
90004518:	e9cd 440d 	strd	r4, r4, [sp, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
9000451c:	f003 f93c 	bl	90007798 <HAL_ADC_Init>
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
90004520:	a90c      	add	r1, sp, #48	; 0x30
90004522:	4628      	mov	r0, r5
  multimode.Mode = ADC_MODE_INDEPENDENT;
90004524:	940c      	str	r4, [sp, #48]	; 0x30
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
90004526:	f003 fa45 	bl	900079b4 <HAL_ADCEx_MultiModeConfigChannel>
  sConfig.Channel = ADC_CHANNEL_10;
9000452a:	4b21      	ldr	r3, [pc, #132]	; (900045b0 <main+0x540>)
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
9000452c:	a90f      	add	r1, sp, #60	; 0x3c
9000452e:	4628      	mov	r0, r5
  sConfig.Channel = ADC_CHANNEL_10;
90004530:	930f      	str	r3, [sp, #60]	; 0x3c
  sConfig.Rank = ADC_REGULAR_RANK_1;
90004532:	2306      	movs	r3, #6
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
90004534:	9411      	str	r4, [sp, #68]	; 0x44
  sConfig.Rank = ADC_REGULAR_RANK_1;
90004536:	9310      	str	r3, [sp, #64]	; 0x40
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
90004538:	f240 73ff 	movw	r3, #2047	; 0x7ff
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
9000453c:	9713      	str	r7, [sp, #76]	; 0x4c
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
9000453e:	9312      	str	r3, [sp, #72]	; 0x48
  sConfig.Offset = 0;
90004540:	9414      	str	r4, [sp, #80]	; 0x50
  sConfig.OffsetSignedSaturation = DISABLE;
90004542:	f88d 4055 	strb.w	r4, [sp, #85]	; 0x55
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
90004546:	f002 fc93 	bl	90006e70 <HAL_ADC_ConfigChannel>
  MX_TouchGFX_Init();
9000454a:	f7fb ff47 	bl	900003dc <MX_TouchGFX_Init>
  MX_TouchGFX_PreOSInit();
9000454e:	f7fb ff43 	bl	900003d8 <MX_TouchGFX_PreOSInit>
  osKernelInitialize();
90004552:	f008 ff5d 	bl	9000d410 <osKernelInitialize>
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
90004556:	4a17      	ldr	r2, [pc, #92]	; (900045b4 <main+0x544>)
90004558:	4621      	mov	r1, r4
9000455a:	4817      	ldr	r0, [pc, #92]	; (900045b8 <main+0x548>)
9000455c:	f008 ff84 	bl	9000d468 <osThreadNew>
90004560:	4b16      	ldr	r3, [pc, #88]	; (900045bc <main+0x54c>)
  GUITaskHandle = osThreadNew(TouchGFX_Task, NULL, &GUITask_attributes);
90004562:	4a17      	ldr	r2, [pc, #92]	; (900045c0 <main+0x550>)
90004564:	4621      	mov	r1, r4
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
90004566:	6018      	str	r0, [r3, #0]
  GUITaskHandle = osThreadNew(TouchGFX_Task, NULL, &GUITask_attributes);
90004568:	4816      	ldr	r0, [pc, #88]	; (900045c4 <main+0x554>)
9000456a:	f008 ff7d 	bl	9000d468 <osThreadNew>
9000456e:	4b16      	ldr	r3, [pc, #88]	; (900045c8 <main+0x558>)
90004570:	4605      	mov	r5, r0
  videoTaskHandle = osThreadNew(videoTaskFunc, NULL, &videoTask_attributes);
90004572:	4a16      	ldr	r2, [pc, #88]	; (900045cc <main+0x55c>)
90004574:	4621      	mov	r1, r4
90004576:	4816      	ldr	r0, [pc, #88]	; (900045d0 <main+0x560>)
  GUITaskHandle = osThreadNew(TouchGFX_Task, NULL, &GUITask_attributes);
90004578:	601d      	str	r5, [r3, #0]
  videoTaskHandle = osThreadNew(videoTaskFunc, NULL, &videoTask_attributes);
9000457a:	f008 ff75 	bl	9000d468 <osThreadNew>
9000457e:	4b15      	ldr	r3, [pc, #84]	; (900045d4 <main+0x564>)
90004580:	6018      	str	r0, [r3, #0]
  osKernelStart();
90004582:	f008 ff57 	bl	9000d434 <osKernelStart>
  while (1)
90004586:	e7fe      	b.n	90004586 <main+0x516>
90004588:	2400ae98 	.word	0x2400ae98
9000458c:	52001000 	.word	0x52001000
90004590:	2400ae10 	.word	0x2400ae10
90004594:	2400b0d8 	.word	0x2400b0d8
90004598:	52004140 	.word	0x52004140
9000459c:	52003000 	.word	0x52003000
900045a0:	2400af00 	.word	0x2400af00
900045a4:	2400ae74 	.word	0x2400ae74
900045a8:	58024c00 	.word	0x58024c00
900045ac:	40022000 	.word	0x40022000
900045b0:	2a000400 	.word	0x2a000400
900045b4:	90025bd0 	.word	0x90025bd0
900045b8:	90003fb5 	.word	0x90003fb5
900045bc:	2400ae0c 	.word	0x2400ae0c
900045c0:	90025bac 	.word	0x90025bac
900045c4:	900003ed 	.word	0x900003ed
900045c8:	2400ae08 	.word	0x2400ae08
900045cc:	90025bf4 	.word	0x90025bf4
900045d0:	90002919 	.word	0x90002919
900045d4:	2400b10c 	.word	0x2400b10c

900045d8 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
900045d8:	4b03      	ldr	r3, [pc, #12]	; (900045e8 <HAL_TIM_PeriodElapsedCallback+0x10>)
900045da:	6802      	ldr	r2, [r0, #0]
900045dc:	429a      	cmp	r2, r3
900045de:	d000      	beq.n	900045e2 <HAL_TIM_PeriodElapsedCallback+0xa>
    HAL_IncTick();
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
900045e0:	4770      	bx	lr
    HAL_IncTick();
900045e2:	f002 bba3 	b.w	90006d2c <HAL_IncTick>
900045e6:	bf00      	nop
900045e8:	40001000 	.word	0x40001000

900045ec <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
900045ec:	4770      	bx	lr
900045ee:	bf00      	nop

900045f0 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
900045f0:	4b0b      	ldr	r3, [pc, #44]	; (90004620 <HAL_MspInit+0x30>)

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
900045f2:	2200      	movs	r2, #0
900045f4:	210f      	movs	r1, #15
900045f6:	f06f 0001 	mvn.w	r0, #1
{
900045fa:	b410      	push	{r4}
  __HAL_RCC_SYSCFG_CLK_ENABLE();
900045fc:	f8d3 40f4 	ldr.w	r4, [r3, #244]	; 0xf4
{
90004600:	b083      	sub	sp, #12
  __HAL_RCC_SYSCFG_CLK_ENABLE();
90004602:	f044 0402 	orr.w	r4, r4, #2
90004606:	f8c3 40f4 	str.w	r4, [r3, #244]	; 0xf4
9000460a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
9000460e:	f003 0302 	and.w	r3, r3, #2
90004612:	9301      	str	r3, [sp, #4]
90004614:	9b01      	ldr	r3, [sp, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
90004616:	b003      	add	sp, #12
90004618:	f85d 4b04 	ldr.w	r4, [sp], #4
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
9000461c:	f003 ba44 	b.w	90007aa8 <HAL_NVIC_SetPriority>
90004620:	58024400 	.word	0x58024400
90004624:	00000000 	.word	0x00000000

90004628 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
90004628:	b510      	push	{r4, lr}
9000462a:	b0b8      	sub	sp, #224	; 0xe0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
9000462c:	2100      	movs	r1, #0
{
9000462e:	4604      	mov	r4, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
90004630:	22c0      	movs	r2, #192	; 0xc0
90004632:	a808      	add	r0, sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
90004634:	9106      	str	r1, [sp, #24]
90004636:	e9cd 1102 	strd	r1, r1, [sp, #8]
9000463a:	e9cd 1104 	strd	r1, r1, [sp, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
9000463e:	f01e fe99 	bl	90023374 <memset>
  if(hadc->Instance==ADC1)
90004642:	4b25      	ldr	r3, [pc, #148]	; (900046d8 <HAL_ADC_MspInit+0xb0>)
90004644:	6822      	ldr	r2, [r4, #0]
90004646:	429a      	cmp	r2, r3
90004648:	d001      	beq.n	9000464e <HAL_ADC_MspInit+0x26>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
9000464a:	b038      	add	sp, #224	; 0xe0
9000464c:	bd10      	pop	{r4, pc}
    PeriphClkInitStruct.PLL2.PLL2P = 2;
9000464e:	2302      	movs	r3, #2
    PeriphClkInitStruct.PLL2.PLL2M = 32;
90004650:	2220      	movs	r2, #32
    PeriphClkInitStruct.PLL2.PLL2N = 129;
90004652:	2181      	movs	r1, #129	; 0x81
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
90004654:	a808      	add	r0, sp, #32
    PeriphClkInitStruct.PLL2.PLL2P = 2;
90004656:	930c      	str	r3, [sp, #48]	; 0x30
    PeriphClkInitStruct.PLL2.PLL2M = 32;
90004658:	920a      	str	r2, [sp, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2R = 2;
9000465a:	2202      	movs	r2, #2
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
9000465c:	930d      	str	r3, [sp, #52]	; 0x34
    PeriphClkInitStruct.PLL2.PLL2R = 2;
9000465e:	23c0      	movs	r3, #192	; 0xc0
    PeriphClkInitStruct.PLL2.PLL2N = 129;
90004660:	910b      	str	r1, [sp, #44]	; 0x2c
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
90004662:	ed9f 7b19 	vldr	d7, [pc, #100]	; 900046c8 <HAL_ADC_MspInit+0xa0>
    PeriphClkInitStruct.PLL2.PLL2R = 2;
90004666:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
9000466a:	ed8d 7b08 	vstr	d7, [sp, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
9000466e:	f007 f9e5 	bl	9000ba3c <HAL_RCCEx_PeriphCLKConfig>
90004672:	bb20      	cbnz	r0, 900046be <HAL_ADC_MspInit+0x96>
    __HAL_RCC_ADC12_CLK_ENABLE();
90004674:	4b19      	ldr	r3, [pc, #100]	; (900046dc <HAL_ADC_MspInit+0xb4>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
90004676:	2400      	movs	r4, #0
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
90004678:	a902      	add	r1, sp, #8
9000467a:	4819      	ldr	r0, [pc, #100]	; (900046e0 <HAL_ADC_MspInit+0xb8>)
    __HAL_RCC_ADC12_CLK_ENABLE();
9000467c:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
90004680:	f042 0220 	orr.w	r2, r2, #32
90004684:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
90004688:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
9000468c:	f002 0220 	and.w	r2, r2, #32
90004690:	9200      	str	r2, [sp, #0]
90004692:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
90004694:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
90004698:	f042 0204 	orr.w	r2, r2, #4
9000469c:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
900046a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
900046a4:	9404      	str	r4, [sp, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
900046a6:	f003 0304 	and.w	r3, r3, #4
    GPIO_InitStruct.Pin = GPIO_PIN_0;
900046aa:	ed9f 7b09 	vldr	d7, [pc, #36]	; 900046d0 <HAL_ADC_MspInit+0xa8>
    __HAL_RCC_GPIOC_CLK_ENABLE();
900046ae:	9301      	str	r3, [sp, #4]
900046b0:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
900046b2:	ed8d 7b02 	vstr	d7, [sp, #8]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
900046b6:	f003 fc63 	bl	90007f80 <HAL_GPIO_Init>
}
900046ba:	b038      	add	sp, #224	; 0xe0
900046bc:	bd10      	pop	{r4, pc}
      Error_Handler();
900046be:	f7ff ff95 	bl	900045ec <Error_Handler>
900046c2:	e7d7      	b.n	90004674 <HAL_ADC_MspInit+0x4c>
900046c4:	f3af 8000 	nop.w
900046c8:	00080000 	.word	0x00080000
900046cc:	00000000 	.word	0x00000000
900046d0:	00000001 	.word	0x00000001
900046d4:	00000003 	.word	0x00000003
900046d8:	40022000 	.word	0x40022000
900046dc:	58024400 	.word	0x58024400
900046e0:	58020800 	.word	0x58020800

900046e4 <HAL_CRC_MspInit>:
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
  if(hcrc->Instance==CRC)
900046e4:	4b0a      	ldr	r3, [pc, #40]	; (90004710 <HAL_CRC_MspInit+0x2c>)
900046e6:	6802      	ldr	r2, [r0, #0]
900046e8:	429a      	cmp	r2, r3
900046ea:	d000      	beq.n	900046ee <HAL_CRC_MspInit+0xa>
900046ec:	4770      	bx	lr
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
900046ee:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
{
900046f2:	b082      	sub	sp, #8
    __HAL_RCC_CRC_CLK_ENABLE();
900046f4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
900046f8:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
900046fc:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
90004700:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
90004704:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
90004708:	9301      	str	r3, [sp, #4]
9000470a:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
9000470c:	b002      	add	sp, #8
9000470e:	4770      	bx	lr
90004710:	58024c00 	.word	0x58024c00

90004714 <HAL_DMA2D_MspInit>:
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
  if(hdma2d->Instance==DMA2D)
90004714:	4b0f      	ldr	r3, [pc, #60]	; (90004754 <HAL_DMA2D_MspInit+0x40>)
90004716:	6802      	ldr	r2, [r0, #0]
90004718:	429a      	cmp	r2, r3
9000471a:	d000      	beq.n	9000471e <HAL_DMA2D_MspInit+0xa>
9000471c:	4770      	bx	lr
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
9000471e:	4b0e      	ldr	r3, [pc, #56]	; (90004758 <HAL_DMA2D_MspInit+0x44>)
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
90004720:	205a      	movs	r0, #90	; 0x5a
90004722:	2200      	movs	r2, #0
90004724:	2105      	movs	r1, #5
{
90004726:	b510      	push	{r4, lr}
    __HAL_RCC_DMA2D_CLK_ENABLE();
90004728:	f8d3 40d4 	ldr.w	r4, [r3, #212]	; 0xd4
{
9000472c:	b082      	sub	sp, #8
    __HAL_RCC_DMA2D_CLK_ENABLE();
9000472e:	f044 0410 	orr.w	r4, r4, #16
90004732:	f8c3 40d4 	str.w	r4, [r3, #212]	; 0xd4
90004736:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
9000473a:	f003 0310 	and.w	r3, r3, #16
9000473e:	9301      	str	r3, [sp, #4]
90004740:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
90004742:	f003 f9b1 	bl	90007aa8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
90004746:	205a      	movs	r0, #90	; 0x5a
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
90004748:	b002      	add	sp, #8
9000474a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
9000474e:	f003 b9e9 	b.w	90007b24 <HAL_NVIC_EnableIRQ>
90004752:	bf00      	nop
90004754:	52001000 	.word	0x52001000
90004758:	58024400 	.word	0x58024400

9000475c <HAL_JPEG_MspInit>:
* @param hjpeg: JPEG handle pointer
* @retval None
*/
void HAL_JPEG_MspInit(JPEG_HandleTypeDef* hjpeg)
{
  if(hjpeg->Instance==JPEG)
9000475c:	4b3f      	ldr	r3, [pc, #252]	; (9000485c <HAL_JPEG_MspInit+0x100>)
9000475e:	6802      	ldr	r2, [r0, #0]
90004760:	429a      	cmp	r2, r3
90004762:	d000      	beq.n	90004766 <HAL_JPEG_MspInit+0xa>
90004764:	4770      	bx	lr
{
90004766:	b570      	push	{r4, r5, r6, lr}
  /* USER CODE BEGIN JPEG_MspInit 0 */
	 hmdma_jpeg_infifo_th.Init.Request = MDMA_REQUEST_JPEG_INFIFO_TH;
	 hmdma_jpeg_outfifo_th.Init.Request = MDMA_REQUEST_JPEG_OUTFIFO_TH;
  /* USER CODE END JPEG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_JPEG_CLK_ENABLE();
90004768:	4b3d      	ldr	r3, [pc, #244]	; (90004860 <HAL_JPEG_MspInit+0x104>)
	 hmdma_jpeg_infifo_th.Init.Request = MDMA_REQUEST_JPEG_INFIFO_TH;
9000476a:	2211      	movs	r2, #17
9000476c:	4e3d      	ldr	r6, [pc, #244]	; (90004864 <HAL_JPEG_MspInit+0x108>)
{
9000476e:	b082      	sub	sp, #8
	 hmdma_jpeg_outfifo_th.Init.Request = MDMA_REQUEST_JPEG_OUTFIFO_TH;
90004770:	4d3d      	ldr	r5, [pc, #244]	; (90004868 <HAL_JPEG_MspInit+0x10c>)
90004772:	4604      	mov	r4, r0
	 hmdma_jpeg_infifo_th.Init.Request = MDMA_REQUEST_JPEG_INFIFO_TH;
90004774:	6072      	str	r2, [r6, #4]
    hmdma_jpeg_infifo_th.Init.BufferTransferLength = 32;
    hmdma_jpeg_infifo_th.Init.SourceBurst = MDMA_SOURCE_BURST_32BEATS;
    hmdma_jpeg_infifo_th.Init.DestBurst = MDMA_DEST_BURST_16BEATS;
    hmdma_jpeg_infifo_th.Init.SourceBlockAddressOffset = 0;
    hmdma_jpeg_infifo_th.Init.DestBlockAddressOffset = 0;
    if (HAL_MDMA_Init(&hmdma_jpeg_infifo_th) != HAL_OK)
90004776:	4630      	mov	r0, r6
    __HAL_RCC_JPEG_CLK_ENABLE();
90004778:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
    hmdma_jpeg_infifo_th.Instance = MDMA_Channel7;
9000477c:	493b      	ldr	r1, [pc, #236]	; (9000486c <HAL_JPEG_MspInit+0x110>)
    __HAL_RCC_JPEG_CLK_ENABLE();
9000477e:	f042 0220 	orr.w	r2, r2, #32
90004782:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
    hmdma_jpeg_infifo_th.Init.Priority = MDMA_PRIORITY_HIGH;
90004786:	2280      	movs	r2, #128	; 0x80
    __HAL_RCC_JPEG_CLK_ENABLE();
90004788:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
    hmdma_jpeg_infifo_th.Init.DestDataSize = MDMA_DEST_DATASIZE_WORD;
9000478c:	6232      	str	r2, [r6, #32]
    __HAL_RCC_JPEG_CLK_ENABLE();
9000478e:	f003 0320 	and.w	r3, r3, #32
    hmdma_jpeg_infifo_th.Instance = MDMA_Channel7;
90004792:	6031      	str	r1, [r6, #0]
    __HAL_RCC_JPEG_CLK_ENABLE();
90004794:	9301      	str	r3, [sp, #4]
    hmdma_jpeg_infifo_th.Init.TransferTriggerMode = MDMA_BUFFER_TRANSFER;
90004796:	2300      	movs	r3, #0
    __HAL_RCC_JPEG_CLK_ENABLE();
90004798:	9901      	ldr	r1, [sp, #4]
    hmdma_jpeg_infifo_th.Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
9000479a:	6133      	str	r3, [r6, #16]
    hmdma_jpeg_infifo_th.Init.Priority = MDMA_PRIORITY_HIGH;
9000479c:	e9c6 3202 	strd	r3, r2, [r6, #8]
    hmdma_jpeg_infifo_th.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
900047a0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
900047a4:	6272      	str	r2, [r6, #36]	; 0x24
    hmdma_jpeg_infifo_th.Init.BufferTransferLength = 32;
900047a6:	2220      	movs	r2, #32
    hmdma_jpeg_infifo_th.Init.SourceDataSize = MDMA_SRC_DATASIZE_BYTE;
900047a8:	e9c6 3306 	strd	r3, r3, [r6, #24]
    hmdma_jpeg_infifo_th.Init.DestBlockAddressOffset = 0;
900047ac:	e9c6 330d 	strd	r3, r3, [r6, #52]	; 0x34
    hmdma_jpeg_infifo_th.Init.BufferTransferLength = 32;
900047b0:	62b2      	str	r2, [r6, #40]	; 0x28
    hmdma_jpeg_infifo_th.Init.DestBurst = MDMA_DEST_BURST_16BEATS;
900047b2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
900047b6:	f44f 42a0 	mov.w	r2, #20480	; 0x5000
900047ba:	e9c6 230b 	strd	r2, r3, [r6, #44]	; 0x2c
	 hmdma_jpeg_outfifo_th.Init.Request = MDMA_REQUEST_JPEG_OUTFIFO_TH;
900047be:	2313      	movs	r3, #19
900047c0:	606b      	str	r3, [r5, #4]
    hmdma_jpeg_infifo_th.Init.SourceInc = MDMA_SRC_INC_BYTE;
900047c2:	2302      	movs	r3, #2
900047c4:	6173      	str	r3, [r6, #20]
    if (HAL_MDMA_Init(&hmdma_jpeg_infifo_th) != HAL_OK)
900047c6:	f005 ffc9 	bl	9000a75c <HAL_MDMA_Init>
900047ca:	2800      	cmp	r0, #0
900047cc:	d13a      	bne.n	90004844 <HAL_JPEG_MspInit+0xe8>
    {
      Error_Handler();
    }

    if (HAL_MDMA_ConfigPostRequestMask(&hmdma_jpeg_infifo_th, 0, 0) != HAL_OK)
900047ce:	2200      	movs	r2, #0
900047d0:	4824      	ldr	r0, [pc, #144]	; (90004864 <HAL_JPEG_MspInit+0x108>)
900047d2:	4611      	mov	r1, r2
900047d4:	f006 f860 	bl	9000a898 <HAL_MDMA_ConfigPostRequestMask>
900047d8:	2800      	cmp	r0, #0
900047da:	d13c      	bne.n	90004856 <HAL_JPEG_MspInit+0xfa>
    hmdma_jpeg_outfifo_th.Init.TransferTriggerMode = MDMA_BUFFER_TRANSFER;
    hmdma_jpeg_outfifo_th.Init.Priority = MDMA_PRIORITY_VERY_HIGH;
    hmdma_jpeg_outfifo_th.Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
    hmdma_jpeg_outfifo_th.Init.SourceInc = MDMA_SRC_INC_DISABLE;
    hmdma_jpeg_outfifo_th.Init.DestinationInc = MDMA_DEST_INC_BYTE;
    hmdma_jpeg_outfifo_th.Init.SourceDataSize = MDMA_SRC_DATASIZE_WORD;
900047dc:	2220      	movs	r2, #32
    hmdma_jpeg_outfifo_th.Init.TransferTriggerMode = MDMA_BUFFER_TRANSFER;
900047de:	2300      	movs	r3, #0
    __HAL_LINKDMA(hjpeg,hdmain,hmdma_jpeg_infifo_th);
900047e0:	6326      	str	r6, [r4, #48]	; 0x30
    hmdma_jpeg_outfifo_th.Init.Request = MDMA_REQUEST_JPEG_OUTFIFO_TH;
900047e2:	2013      	movs	r0, #19
    hmdma_jpeg_outfifo_th.Init.SourceDataSize = MDMA_SRC_DATASIZE_WORD;
900047e4:	61ea      	str	r2, [r5, #28]
    hmdma_jpeg_outfifo_th.Init.DestDataSize = MDMA_DEST_DATASIZE_BYTE;
    hmdma_jpeg_outfifo_th.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
    hmdma_jpeg_outfifo_th.Init.BufferTransferLength = 32;
900047e6:	62aa      	str	r2, [r5, #40]	; 0x28
    hmdma_jpeg_outfifo_th.Init.SourceBurst = MDMA_SOURCE_BURST_32BEATS;
    hmdma_jpeg_outfifo_th.Init.DestBurst = MDMA_DEST_BURST_32BEATS;
900047e8:	f44f 3220 	mov.w	r2, #163840	; 0x28000
    hmdma_jpeg_outfifo_th.Instance = MDMA_Channel6;
900047ec:	4920      	ldr	r1, [pc, #128]	; (90004870 <HAL_JPEG_MspInit+0x114>)
    hmdma_jpeg_outfifo_th.Init.TransferTriggerMode = MDMA_BUFFER_TRANSFER;
900047ee:	60ab      	str	r3, [r5, #8]
    hmdma_jpeg_outfifo_th.Init.DestDataSize = MDMA_DEST_DATASIZE_BYTE;
900047f0:	622b      	str	r3, [r5, #32]
    hmdma_jpeg_outfifo_th.Init.SourceBlockAddressOffset = 0;
    hmdma_jpeg_outfifo_th.Init.DestBlockAddressOffset = 0;
900047f2:	63ab      	str	r3, [r5, #56]	; 0x38
    __HAL_LINKDMA(hjpeg,hdmain,hmdma_jpeg_infifo_th);
900047f4:	6434      	str	r4, [r6, #64]	; 0x40
    hmdma_jpeg_outfifo_th.Init.DestBurst = MDMA_DEST_BURST_32BEATS;
900047f6:	e9c5 230c 	strd	r2, r3, [r5, #48]	; 0x30
    hmdma_jpeg_outfifo_th.Init.SourceInc = MDMA_SRC_INC_DISABLE;
900047fa:	e9c5 3304 	strd	r3, r3, [r5, #16]
    hmdma_jpeg_outfifo_th.Init.DestinationInc = MDMA_DEST_INC_BYTE;
900047fe:	2308      	movs	r3, #8
    hmdma_jpeg_outfifo_th.Init.Priority = MDMA_PRIORITY_VERY_HIGH;
90004800:	22c0      	movs	r2, #192	; 0xc0
    hmdma_jpeg_outfifo_th.Instance = MDMA_Channel6;
90004802:	e9c5 1000 	strd	r1, r0, [r5]
    hmdma_jpeg_outfifo_th.Init.DestinationInc = MDMA_DEST_INC_BYTE;
90004806:	61ab      	str	r3, [r5, #24]
    hmdma_jpeg_outfifo_th.Init.SourceBurst = MDMA_SOURCE_BURST_32BEATS;
90004808:	f44f 41a0 	mov.w	r1, #20480	; 0x5000
    hmdma_jpeg_outfifo_th.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
9000480c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
    if (HAL_MDMA_Init(&hmdma_jpeg_outfifo_th) != HAL_OK)
90004810:	4815      	ldr	r0, [pc, #84]	; (90004868 <HAL_JPEG_MspInit+0x10c>)
    hmdma_jpeg_outfifo_th.Init.SourceBurst = MDMA_SOURCE_BURST_32BEATS;
90004812:	62e9      	str	r1, [r5, #44]	; 0x2c
    hmdma_jpeg_outfifo_th.Init.Priority = MDMA_PRIORITY_VERY_HIGH;
90004814:	60ea      	str	r2, [r5, #12]
    hmdma_jpeg_outfifo_th.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
90004816:	626b      	str	r3, [r5, #36]	; 0x24
    if (HAL_MDMA_Init(&hmdma_jpeg_outfifo_th) != HAL_OK)
90004818:	f005 ffa0 	bl	9000a75c <HAL_MDMA_Init>
9000481c:	b9c0      	cbnz	r0, 90004850 <HAL_JPEG_MspInit+0xf4>
    {
      Error_Handler();
    }

    if (HAL_MDMA_ConfigPostRequestMask(&hmdma_jpeg_outfifo_th, 0, 0) != HAL_OK)
9000481e:	2200      	movs	r2, #0
90004820:	4811      	ldr	r0, [pc, #68]	; (90004868 <HAL_JPEG_MspInit+0x10c>)
90004822:	4611      	mov	r1, r2
90004824:	f006 f838 	bl	9000a898 <HAL_MDMA_ConfigPostRequestMask>
90004828:	b978      	cbnz	r0, 9000484a <HAL_JPEG_MspInit+0xee>
    {
      Error_Handler();
    }

    __HAL_LINKDMA(hjpeg,hdmaout,hmdma_jpeg_outfifo_th);
9000482a:	6365      	str	r5, [r4, #52]	; 0x34

    /* JPEG interrupt Init */
    HAL_NVIC_SetPriority(JPEG_IRQn, 5, 0);
9000482c:	2079      	movs	r0, #121	; 0x79
9000482e:	2200      	movs	r2, #0
90004830:	2105      	movs	r1, #5
    __HAL_LINKDMA(hjpeg,hdmaout,hmdma_jpeg_outfifo_th);
90004832:	642c      	str	r4, [r5, #64]	; 0x40
    HAL_NVIC_SetPriority(JPEG_IRQn, 5, 0);
90004834:	f003 f938 	bl	90007aa8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(JPEG_IRQn);
90004838:	2079      	movs	r0, #121	; 0x79
  /* USER CODE BEGIN JPEG_MspInit 1 */

  /* USER CODE END JPEG_MspInit 1 */
  }

}
9000483a:	b002      	add	sp, #8
9000483c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_NVIC_EnableIRQ(JPEG_IRQn);
90004840:	f003 b970 	b.w	90007b24 <HAL_NVIC_EnableIRQ>
      Error_Handler();
90004844:	f7ff fed2 	bl	900045ec <Error_Handler>
90004848:	e7c1      	b.n	900047ce <HAL_JPEG_MspInit+0x72>
      Error_Handler();
9000484a:	f7ff fecf 	bl	900045ec <Error_Handler>
9000484e:	e7ec      	b.n	9000482a <HAL_JPEG_MspInit+0xce>
      Error_Handler();
90004850:	f7ff fecc 	bl	900045ec <Error_Handler>
90004854:	e7e3      	b.n	9000481e <HAL_JPEG_MspInit+0xc2>
      Error_Handler();
90004856:	f7ff fec9 	bl	900045ec <Error_Handler>
9000485a:	e7bf      	b.n	900047dc <HAL_JPEG_MspInit+0x80>
9000485c:	52003000 	.word	0x52003000
90004860:	58024400 	.word	0x58024400
90004864:	2400b000 	.word	0x2400b000
90004868:	2400b06c 	.word	0x2400b06c
9000486c:	52000200 	.word	0x52000200
90004870:	520001c0 	.word	0x520001c0

90004874 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
90004874:	b570      	push	{r4, r5, r6, lr}
90004876:	b0ba      	sub	sp, #232	; 0xe8
  GPIO_InitTypeDef GPIO_InitStruct = {0};
90004878:	2100      	movs	r1, #0
{
9000487a:	4604      	mov	r4, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
9000487c:	22c0      	movs	r2, #192	; 0xc0
9000487e:	a80a      	add	r0, sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
90004880:	9109      	str	r1, [sp, #36]	; 0x24
90004882:	e9cd 1105 	strd	r1, r1, [sp, #20]
90004886:	e9cd 1107 	strd	r1, r1, [sp, #28]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
9000488a:	f01e fd73 	bl	90023374 <memset>
  if(hltdc->Instance==LTDC)
9000488e:	4b4a      	ldr	r3, [pc, #296]	; (900049b8 <HAL_LTDC_MspInit+0x144>)
90004890:	6822      	ldr	r2, [r4, #0]
90004892:	429a      	cmp	r2, r3
90004894:	d001      	beq.n	9000489a <HAL_LTDC_MspInit+0x26>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
90004896:	b03a      	add	sp, #232	; 0xe8
90004898:	bd70      	pop	{r4, r5, r6, pc}
    PeriphClkInitStruct.PLL3.PLL3P = 2;
9000489a:	2302      	movs	r3, #2
    PeriphClkInitStruct.PLL3.PLL3M = 5;
9000489c:	2205      	movs	r2, #5
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
9000489e:	f04f 5400 	mov.w	r4, #536870912	; 0x20000000
900048a2:	2500      	movs	r5, #0
    PeriphClkInitStruct.PLL3.PLL3N = 160;
900048a4:	21a0      	movs	r1, #160	; 0xa0
    PeriphClkInitStruct.PLL3.PLL3P = 2;
900048a6:	9316      	str	r3, [sp, #88]	; 0x58
    PeriphClkInitStruct.PLL3.PLL3M = 5;
900048a8:	9214      	str	r2, [sp, #80]	; 0x50
    PeriphClkInitStruct.PLL3.PLL3R = 83;
900048aa:	2253      	movs	r2, #83	; 0x53
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
900048ac:	9317      	str	r3, [sp, #92]	; 0x5c
    PeriphClkInitStruct.PLL3.PLL3R = 83;
900048ae:	f44f 6300 	mov.w	r3, #2048	; 0x800
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
900048b2:	a80a      	add	r0, sp, #40	; 0x28
    PeriphClkInitStruct.PLL3.PLL3N = 160;
900048b4:	9115      	str	r1, [sp, #84]	; 0x54
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
900048b6:	e9cd 450a 	strd	r4, r5, [sp, #40]	; 0x28
    PeriphClkInitStruct.PLL3.PLL3R = 83;
900048ba:	e9cd 2318 	strd	r2, r3, [sp, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
900048be:	f007 f8bd 	bl	9000ba3c <HAL_RCCEx_PeriphCLKConfig>
900048c2:	2800      	cmp	r0, #0
900048c4:	d174      	bne.n	900049b0 <HAL_LTDC_MspInit+0x13c>
    __HAL_RCC_LTDC_CLK_ENABLE();
900048c6:	4b3d      	ldr	r3, [pc, #244]	; (900049bc <HAL_LTDC_MspInit+0x148>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
900048c8:	2402      	movs	r4, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
900048ca:	2500      	movs	r5, #0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
900048cc:	260e      	movs	r6, #14
    __HAL_RCC_LTDC_CLK_ENABLE();
900048ce:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
900048d2:	a905      	add	r1, sp, #20
900048d4:	483a      	ldr	r0, [pc, #232]	; (900049c0 <HAL_LTDC_MspInit+0x14c>)
    __HAL_RCC_LTDC_CLK_ENABLE();
900048d6:	f042 0208 	orr.w	r2, r2, #8
900048da:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
900048de:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
900048e2:	f002 0208 	and.w	r2, r2, #8
900048e6:	9200      	str	r2, [sp, #0]
900048e8:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOK_CLK_ENABLE();
900048ea:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
900048ee:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
900048f2:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
900048f6:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
900048fa:	f402 6280 	and.w	r2, r2, #1024	; 0x400
900048fe:	9201      	str	r2, [sp, #4]
90004900:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOI_CLK_ENABLE();
90004902:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
90004906:	f442 7280 	orr.w	r2, r2, #256	; 0x100
9000490a:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
9000490e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
90004912:	f402 7280 	and.w	r2, r2, #256	; 0x100
90004916:	9202      	str	r2, [sp, #8]
90004918:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
9000491a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
9000491e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
90004922:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
90004926:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
9000492a:	f402 7200 	and.w	r2, r2, #512	; 0x200
9000492e:	9203      	str	r2, [sp, #12]
90004930:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOH_CLK_ENABLE();
90004932:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
90004936:	f042 0280 	orr.w	r2, r2, #128	; 0x80
9000493a:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
9000493e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
90004942:	9408      	str	r4, [sp, #32]
    __HAL_RCC_GPIOH_CLK_ENABLE();
90004944:	f003 0380 	and.w	r3, r3, #128	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
90004948:	9609      	str	r6, [sp, #36]	; 0x24
    __HAL_RCC_GPIOH_CLK_ENABLE();
9000494a:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_3
9000494c:	23fc      	movs	r3, #252	; 0xfc
    __HAL_RCC_GPIOH_CLK_ENABLE();
9000494e:	9a04      	ldr	r2, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_3
90004950:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
90004952:	e9cd 4506 	strd	r4, r5, [sp, #24]
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
90004956:	f003 fb13 	bl	90007f80 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_9|GPIO_PIN_12
9000495a:	f24d 2303 	movw	r3, #53763	; 0xd203
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
9000495e:	a905      	add	r1, sp, #20
90004960:	4818      	ldr	r0, [pc, #96]	; (900049c4 <HAL_LTDC_MspInit+0x150>)
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_9|GPIO_PIN_12
90004962:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
90004964:	e9cd 4506 	strd	r4, r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
90004968:	e9cd 4608 	strd	r4, r6, [sp, #32]
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
9000496c:	f003 fb08 	bl	90007f80 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_14|GPIO_PIN_12|GPIO_PIN_13
90004970:	f64f 73fb 	movw	r3, #65531	; 0xfffb
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
90004974:	a905      	add	r1, sp, #20
90004976:	4814      	ldr	r0, [pc, #80]	; (900049c8 <HAL_LTDC_MspInit+0x154>)
    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_14|GPIO_PIN_12|GPIO_PIN_13
90004978:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
9000497a:	e9cd 4506 	strd	r4, r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
9000497e:	e9cd 4608 	strd	r4, r6, [sp, #32]
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
90004982:	f003 fafd 	bl	90007f80 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_9;
90004986:	f44f 7300 	mov.w	r3, #512	; 0x200
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
9000498a:	a905      	add	r1, sp, #20
9000498c:	480f      	ldr	r0, [pc, #60]	; (900049cc <HAL_LTDC_MspInit+0x158>)
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
9000498e:	9609      	str	r6, [sp, #36]	; 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_9;
90004990:	e9cd 3405 	strd	r3, r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
90004994:	e9cd 5407 	strd	r5, r4, [sp, #28]
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
90004998:	f003 faf2 	bl	90007f80 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
9000499c:	462a      	mov	r2, r5
9000499e:	2105      	movs	r1, #5
900049a0:	2058      	movs	r0, #88	; 0x58
900049a2:	f003 f881 	bl	90007aa8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
900049a6:	2058      	movs	r0, #88	; 0x58
900049a8:	f003 f8bc 	bl	90007b24 <HAL_NVIC_EnableIRQ>
}
900049ac:	b03a      	add	sp, #232	; 0xe8
900049ae:	bd70      	pop	{r4, r5, r6, pc}
      Error_Handler();
900049b0:	f7ff fe1c 	bl	900045ec <Error_Handler>
900049b4:	e787      	b.n	900048c6 <HAL_LTDC_MspInit+0x52>
900049b6:	bf00      	nop
900049b8:	50001000 	.word	0x50001000
900049bc:	58024400 	.word	0x58024400
900049c0:	58022800 	.word	0x58022800
900049c4:	58022000 	.word	0x58022000
900049c8:	58022400 	.word	0x58022400
900049cc:	58021c00 	.word	0x58021c00

900049d0 <HAL_SDRAM_MspInit>:
static void HAL_FMC_MspInit(void){
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
  if (FMC_Initialized) {
900049d0:	4836      	ldr	r0, [pc, #216]	; (90004aac <HAL_SDRAM_MspInit+0xdc>)
  GPIO_InitTypeDef GPIO_InitStruct ={0};
900049d2:	2300      	movs	r3, #0
  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
900049d4:	b5d0      	push	{r4, r6, r7, lr}
  if (FMC_Initialized) {
900049d6:	6801      	ldr	r1, [r0, #0]
void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
900049d8:	b0b8      	sub	sp, #224	; 0xe0
  GPIO_InitTypeDef GPIO_InitStruct ={0};
900049da:	e9cd 3302 	strd	r3, r3, [sp, #8]
900049de:	e9cd 3304 	strd	r3, r3, [sp, #16]
900049e2:	9306      	str	r3, [sp, #24]
  if (FMC_Initialized) {
900049e4:	b109      	cbz	r1, 900049ea <HAL_SDRAM_MspInit+0x1a>
  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
900049e6:	b038      	add	sp, #224	; 0xe0
900049e8:	bdd0      	pop	{r4, r6, r7, pc}
  FMC_Initialized = 1;
900049ea:	2301      	movs	r3, #1
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
900049ec:	22b8      	movs	r2, #184	; 0xb8
  FMC_Initialized = 1;
900049ee:	6003      	str	r3, [r0, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
900049f0:	a80a      	add	r0, sp, #40	; 0x28
900049f2:	f01e fcbf 	bl	90023374 <memset>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC;
900049f6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
900049fa:	2300      	movs	r3, #0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
900049fc:	a808      	add	r0, sp, #32
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC;
900049fe:	e9cd 2308 	strd	r2, r3, [sp, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
90004a02:	f007 f81b 	bl	9000ba3c <HAL_RCCEx_PeriphCLKConfig>
90004a06:	2800      	cmp	r0, #0
90004a08:	d14c      	bne.n	90004aa4 <HAL_SDRAM_MspInit+0xd4>
  __HAL_RCC_FMC_CLK_ENABLE();
90004a0a:	4b29      	ldr	r3, [pc, #164]	; (90004ab0 <HAL_SDRAM_MspInit+0xe0>)
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_9
90004a0c:	f64f 7083 	movw	r0, #65411	; 0xff83
90004a10:	2102      	movs	r1, #2
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
90004a12:	240c      	movs	r4, #12
  __HAL_RCC_FMC_CLK_ENABLE();
90004a14:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_9
90004a18:	2600      	movs	r6, #0
90004a1a:	2703      	movs	r7, #3
  __HAL_RCC_FMC_CLK_ENABLE();
90004a1c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
90004a20:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
90004a24:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
90004a28:	9406      	str	r4, [sp, #24]
  __HAL_RCC_FMC_CLK_ENABLE();
90004a2a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_9
90004a2e:	e9cd 0102 	strd	r0, r1, [sp, #8]
  __HAL_RCC_FMC_CLK_ENABLE();
90004a32:	9301      	str	r3, [sp, #4]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
90004a34:	a902      	add	r1, sp, #8
90004a36:	481f      	ldr	r0, [pc, #124]	; (90004ab4 <HAL_SDRAM_MspInit+0xe4>)
  __HAL_RCC_FMC_CLK_ENABLE();
90004a38:	9b01      	ldr	r3, [sp, #4]
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_9
90004a3a:	e9cd 6704 	strd	r6, r7, [sp, #16]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
90004a3e:	f003 fa9f 	bl	90007f80 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_5|GPIO_PIN_4
90004a42:	f248 1233 	movw	r2, #33075	; 0x8133
90004a46:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
90004a48:	a902      	add	r1, sp, #8
90004a4a:	481b      	ldr	r0, [pc, #108]	; (90004ab8 <HAL_SDRAM_MspInit+0xe8>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
90004a4c:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_5|GPIO_PIN_4
90004a4e:	e9cd 2302 	strd	r2, r3, [sp, #8]
90004a52:	e9cd 6704 	strd	r6, r7, [sp, #16]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
90004a56:	f003 fa93 	bl	90007f80 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_14
90004a5a:	f24c 7203 	movw	r2, #50947	; 0xc703
90004a5e:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
90004a60:	a902      	add	r1, sp, #8
90004a62:	4816      	ldr	r0, [pc, #88]	; (90004abc <HAL_SDRAM_MspInit+0xec>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
90004a64:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_14
90004a66:	e9cd 2302 	strd	r2, r3, [sp, #8]
90004a6a:	e9cd 6704 	strd	r6, r7, [sp, #16]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
90004a6e:	f003 fa87 	bl	90007f80 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_3
90004a72:	f64f 023f 	movw	r2, #63551	; 0xf83f
90004a76:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
90004a78:	a902      	add	r1, sp, #8
90004a7a:	4811      	ldr	r0, [pc, #68]	; (90004ac0 <HAL_SDRAM_MspInit+0xf0>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
90004a7c:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_3
90004a7e:	e9cd 2302 	strd	r2, r3, [sp, #8]
90004a82:	e9cd 6704 	strd	r6, r7, [sp, #16]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
90004a86:	f003 fa7b 	bl	90007f80 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
90004a8a:	22e0      	movs	r2, #224	; 0xe0
90004a8c:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
90004a8e:	a902      	add	r1, sp, #8
90004a90:	480c      	ldr	r0, [pc, #48]	; (90004ac4 <HAL_SDRAM_MspInit+0xf4>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
90004a92:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
90004a94:	e9cd 6704 	strd	r6, r7, [sp, #16]
90004a98:	e9cd 2302 	strd	r2, r3, [sp, #8]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
90004a9c:	f003 fa70 	bl	90007f80 <HAL_GPIO_Init>
}
90004aa0:	b038      	add	sp, #224	; 0xe0
90004aa2:	bdd0      	pop	{r4, r6, r7, pc}
      Error_Handler();
90004aa4:	f7ff fda2 	bl	900045ec <Error_Handler>
90004aa8:	e7af      	b.n	90004a0a <HAL_SDRAM_MspInit+0x3a>
90004aaa:	bf00      	nop
90004aac:	2400b114 	.word	0x2400b114
90004ab0:	58024400 	.word	0x58024400
90004ab4:	58021000 	.word	0x58021000
90004ab8:	58021800 	.word	0x58021800
90004abc:	58020c00 	.word	0x58020c00
90004ac0:	58021400 	.word	0x58021400
90004ac4:	58021c00 	.word	0x58021c00

90004ac8 <HAL_SDRAM_MspDeInit>:

static void HAL_FMC_MspDeInit(void){
  /* USER CODE BEGIN FMC_MspDeInit 0 */

  /* USER CODE END FMC_MspDeInit 0 */
  if (FMC_DeInitialized) {
90004ac8:	4b13      	ldr	r3, [pc, #76]	; (90004b18 <HAL_SDRAM_MspDeInit+0x50>)
90004aca:	681a      	ldr	r2, [r3, #0]
90004acc:	b102      	cbz	r2, 90004ad0 <HAL_SDRAM_MspDeInit+0x8>
90004ace:	4770      	bx	lr
  /* USER CODE BEGIN FMC_MspDeInit 1 */

  /* USER CODE END FMC_MspDeInit 1 */
}

void HAL_SDRAM_MspDeInit(SDRAM_HandleTypeDef* hsdram){
90004ad0:	b510      	push	{r4, lr}
  __HAL_RCC_FMC_CLK_DISABLE();
90004ad2:	4a12      	ldr	r2, [pc, #72]	; (90004b1c <HAL_SDRAM_MspDeInit+0x54>)
  FMC_DeInitialized = 1;
90004ad4:	2401      	movs	r4, #1
  HAL_GPIO_DeInit(GPIOE, GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_9
90004ad6:	f64f 7183 	movw	r1, #65411	; 0xff83
90004ada:	4811      	ldr	r0, [pc, #68]	; (90004b20 <HAL_SDRAM_MspDeInit+0x58>)
  FMC_DeInitialized = 1;
90004adc:	601c      	str	r4, [r3, #0]
  __HAL_RCC_FMC_CLK_DISABLE();
90004ade:	f8d2 30d4 	ldr.w	r3, [r2, #212]	; 0xd4
90004ae2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
90004ae6:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
  HAL_GPIO_DeInit(GPIOE, GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_9
90004aea:	f003 fb7b 	bl	900081e4 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOG, GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_5|GPIO_PIN_4
90004aee:	f248 1133 	movw	r1, #33075	; 0x8133
90004af2:	480c      	ldr	r0, [pc, #48]	; (90004b24 <HAL_SDRAM_MspDeInit+0x5c>)
90004af4:	f003 fb76 	bl	900081e4 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOD, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_14
90004af8:	f24c 7103 	movw	r1, #50947	; 0xc703
90004afc:	480a      	ldr	r0, [pc, #40]	; (90004b28 <HAL_SDRAM_MspDeInit+0x60>)
90004afe:	f003 fb71 	bl	900081e4 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOF, GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_3
90004b02:	f64f 013f 	movw	r1, #63551	; 0xf83f
90004b06:	4809      	ldr	r0, [pc, #36]	; (90004b2c <HAL_SDRAM_MspDeInit+0x64>)
90004b08:	f003 fb6c 	bl	900081e4 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOH, GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7);
90004b0c:	21e0      	movs	r1, #224	; 0xe0
90004b0e:	4808      	ldr	r0, [pc, #32]	; (90004b30 <HAL_SDRAM_MspDeInit+0x68>)
  /* USER CODE END SDRAM_MspDeInit 0 */
  HAL_FMC_MspDeInit();
  /* USER CODE BEGIN SDRAM_MspDeInit 1 */

  /* USER CODE END SDRAM_MspDeInit 1 */
}
90004b10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_GPIO_DeInit(GPIOH, GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7);
90004b14:	f003 bb66 	b.w	900081e4 <HAL_GPIO_DeInit>
90004b18:	2400b110 	.word	0x2400b110
90004b1c:	58024400 	.word	0x58024400
90004b20:	58021000 	.word	0x58021000
90004b24:	58021800 	.word	0x58021800
90004b28:	58020c00 	.word	0x58020c00
90004b2c:	58021400 	.word	0x58021400
90004b30:	58021c00 	.word	0x58021c00

90004b34 <HAL_InitTick>:
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
90004b34:	280f      	cmp	r0, #15
90004b36:	d901      	bls.n	90004b3c <HAL_InitTick+0x8>
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
    uwTickPrio = TickPriority;
    }
  else
  {
    return HAL_ERROR;
90004b38:	2001      	movs	r0, #1
    return HAL_TIM_Base_Start_IT(&htim6);
  }

  /* Return function status */
  return HAL_ERROR;
}
90004b3a:	4770      	bx	lr
{
90004b3c:	b530      	push	{r4, r5, lr}
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
90004b3e:	4601      	mov	r1, r0
{
90004b40:	b08b      	sub	sp, #44	; 0x2c
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
90004b42:	2200      	movs	r2, #0
90004b44:	4604      	mov	r4, r0
90004b46:	2036      	movs	r0, #54	; 0x36
90004b48:	f002 ffae 	bl	90007aa8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
90004b4c:	2036      	movs	r0, #54	; 0x36
90004b4e:	f002 ffe9 	bl	90007b24 <HAL_NVIC_EnableIRQ>
  __HAL_RCC_TIM6_CLK_ENABLE();
90004b52:	4b1a      	ldr	r3, [pc, #104]	; (90004bbc <HAL_InitTick+0x88>)
    uwTickPrio = TickPriority;
90004b54:	4a1a      	ldr	r2, [pc, #104]	; (90004bc0 <HAL_InitTick+0x8c>)
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
90004b56:	4669      	mov	r1, sp
90004b58:	a802      	add	r0, sp, #8
    uwTickPrio = TickPriority;
90004b5a:	6014      	str	r4, [r2, #0]
  __HAL_RCC_TIM6_CLK_ENABLE();
90004b5c:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
90004b60:	f042 0210 	orr.w	r2, r2, #16
90004b64:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
90004b68:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
90004b6c:	f003 0310 	and.w	r3, r3, #16
90004b70:	9301      	str	r3, [sp, #4]
90004b72:	9b01      	ldr	r3, [sp, #4]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
90004b74:	f006 fe42 	bl	9000b7fc <HAL_RCC_GetClockConfig>
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
90004b78:	9b07      	ldr	r3, [sp, #28]
90004b7a:	b9bb      	cbnz	r3, 90004bac <HAL_InitTick+0x78>
    uwTimclock = HAL_RCC_GetPCLK1Freq();
90004b7c:	f006 fdae 	bl	9000b6dc <HAL_RCC_GetPCLK1Freq>
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
90004b80:	4b10      	ldr	r3, [pc, #64]	; (90004bc4 <HAL_InitTick+0x90>)
  htim6.Init.ClockDivision = 0;
90004b82:	2200      	movs	r2, #0
  htim6.Instance = TIM6;
90004b84:	4c10      	ldr	r4, [pc, #64]	; (90004bc8 <HAL_InitTick+0x94>)
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
90004b86:	fba3 1300 	umull	r1, r3, r3, r0
  htim6.Instance = TIM6;
90004b8a:	4d10      	ldr	r5, [pc, #64]	; (90004bcc <HAL_InitTick+0x98>)
  htim6.Init.Period = (1000000U / 1000U) - 1U;
90004b8c:	f240 31e7 	movw	r1, #999	; 0x3e7
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
90004b90:	4620      	mov	r0, r4
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
90004b92:	0c9b      	lsrs	r3, r3, #18
  htim6.Instance = TIM6;
90004b94:	6025      	str	r5, [r4, #0]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
90004b96:	60a2      	str	r2, [r4, #8]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
90004b98:	3b01      	subs	r3, #1
  htim6.Init.Period = (1000000U / 1000U) - 1U;
90004b9a:	e9c4 1203 	strd	r1, r2, [r4, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
90004b9e:	6063      	str	r3, [r4, #4]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
90004ba0:	f008 f98a 	bl	9000ceb8 <HAL_TIM_Base_Init>
90004ba4:	b130      	cbz	r0, 90004bb4 <HAL_InitTick+0x80>
    return HAL_ERROR;
90004ba6:	2001      	movs	r0, #1
}
90004ba8:	b00b      	add	sp, #44	; 0x2c
90004baa:	bd30      	pop	{r4, r5, pc}
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
90004bac:	f006 fd96 	bl	9000b6dc <HAL_RCC_GetPCLK1Freq>
90004bb0:	0040      	lsls	r0, r0, #1
90004bb2:	e7e5      	b.n	90004b80 <HAL_InitTick+0x4c>
    return HAL_TIM_Base_Start_IT(&htim6);
90004bb4:	4620      	mov	r0, r4
90004bb6:	f008 fa35 	bl	9000d024 <HAL_TIM_Base_Start_IT>
90004bba:	e7f5      	b.n	90004ba8 <HAL_InitTick+0x74>
90004bbc:	58024400 	.word	0x58024400
90004bc0:	24000060 	.word	0x24000060
90004bc4:	431bde83 	.word	0x431bde83
90004bc8:	2400b118 	.word	0x2400b118
90004bcc:	40001000 	.word	0x40001000

90004bd0 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
90004bd0:	4770      	bx	lr
90004bd2:	bf00      	nop

90004bd4 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
90004bd4:	e7fe      	b.n	90004bd4 <HardFault_Handler>
90004bd6:	bf00      	nop

90004bd8 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
90004bd8:	e7fe      	b.n	90004bd8 <MemManage_Handler>
90004bda:	bf00      	nop

90004bdc <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
90004bdc:	e7fe      	b.n	90004bdc <BusFault_Handler>
90004bde:	bf00      	nop

90004be0 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
90004be0:	e7fe      	b.n	90004be0 <UsageFault_Handler>
90004be2:	bf00      	nop

90004be4 <DebugMon_Handler>:
90004be4:	4770      	bx	lr
90004be6:	bf00      	nop

90004be8 <TIM6_DAC_IRQHandler>:
void TIM6_DAC_IRQHandler(void)
{
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
90004be8:	4801      	ldr	r0, [pc, #4]	; (90004bf0 <TIM6_DAC_IRQHandler+0x8>)
90004bea:	f008 ba7f 	b.w	9000d0ec <HAL_TIM_IRQHandler>
90004bee:	bf00      	nop
90004bf0:	2400b118 	.word	0x2400b118

90004bf4 <LTDC_IRQHandler>:
void LTDC_IRQHandler(void)
{
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
90004bf4:	4801      	ldr	r0, [pc, #4]	; (90004bfc <LTDC_IRQHandler+0x8>)
90004bf6:	f005 bc5b 	b.w	9000a4b0 <HAL_LTDC_IRQHandler>
90004bfa:	bf00      	nop
90004bfc:	2400af58 	.word	0x2400af58

90004c00 <DMA2D_IRQHandler>:
void DMA2D_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
90004c00:	4801      	ldr	r0, [pc, #4]	; (90004c08 <DMA2D_IRQHandler+0x8>)
90004c02:	f003 b8b9 	b.w	90007d78 <HAL_DMA2D_IRQHandler>
90004c06:	bf00      	nop
90004c08:	2400ae98 	.word	0x2400ae98

90004c0c <JPEG_IRQHandler>:
void JPEG_IRQHandler(void)
{
  /* USER CODE BEGIN JPEG_IRQn 0 */

  /* USER CODE END JPEG_IRQn 0 */
  HAL_JPEG_IRQHandler(&hjpeg);
90004c0c:	4801      	ldr	r0, [pc, #4]	; (90004c14 <JPEG_IRQHandler+0x8>)
90004c0e:	f005 bb3b 	b.w	9000a288 <HAL_JPEG_IRQHandler>
90004c12:	bf00      	nop
90004c14:	2400af00 	.word	0x2400af00

90004c18 <MDMA_IRQHandler>:
void MDMA_IRQHandler(void)
{
  /* USER CODE BEGIN MDMA_IRQn 0 */

  /* USER CODE END MDMA_IRQn 0 */
  HAL_MDMA_IRQHandler(&hmdma_jpeg_outfifo_th);
90004c18:	4804      	ldr	r0, [pc, #16]	; (90004c2c <MDMA_IRQHandler+0x14>)
{
90004c1a:	b508      	push	{r3, lr}
  HAL_MDMA_IRQHandler(&hmdma_jpeg_outfifo_th);
90004c1c:	f005 fefc 	bl	9000aa18 <HAL_MDMA_IRQHandler>
  HAL_MDMA_IRQHandler(&hmdma_jpeg_infifo_th);
90004c20:	4803      	ldr	r0, [pc, #12]	; (90004c30 <MDMA_IRQHandler+0x18>)
  /* USER CODE BEGIN MDMA_IRQn 1 */

  /* USER CODE END MDMA_IRQn 1 */
}
90004c22:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_MDMA_IRQHandler(&hmdma_jpeg_infifo_th);
90004c26:	f005 bef7 	b.w	9000aa18 <HAL_MDMA_IRQHandler>
90004c2a:	bf00      	nop
90004c2c:	2400b06c 	.word	0x2400b06c
90004c30:	2400b000 	.word	0x2400b000

90004c34 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
90004c34:	2001      	movs	r0, #1
90004c36:	4770      	bx	lr

90004c38 <_kill>:

int _kill(int pid, int sig)
{
90004c38:	b508      	push	{r3, lr}
	errno = EINVAL;
90004c3a:	f01e fc4f 	bl	900234dc <__errno>
90004c3e:	2216      	movs	r2, #22
90004c40:	4603      	mov	r3, r0
	return -1;
}
90004c42:	f04f 30ff 	mov.w	r0, #4294967295
	errno = EINVAL;
90004c46:	601a      	str	r2, [r3, #0]
}
90004c48:	bd08      	pop	{r3, pc}
90004c4a:	bf00      	nop

90004c4c <_exit>:

void _exit (int status)
{
90004c4c:	b508      	push	{r3, lr}
	errno = EINVAL;
90004c4e:	f01e fc45 	bl	900234dc <__errno>
90004c52:	2316      	movs	r3, #22
90004c54:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
90004c56:	e7fe      	b.n	90004c56 <_exit+0xa>

90004c58 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
90004c58:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
90004c5a:	1e16      	subs	r6, r2, #0
90004c5c:	dd07      	ble.n	90004c6e <_read+0x16>
90004c5e:	460c      	mov	r4, r1
90004c60:	198d      	adds	r5, r1, r6
	{
		*ptr++ = __io_getchar();
90004c62:	f3af 8000 	nop.w
90004c66:	f804 0b01 	strb.w	r0, [r4], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
90004c6a:	42a5      	cmp	r5, r4
90004c6c:	d1f9      	bne.n	90004c62 <_read+0xa>
	}

return len;
}
90004c6e:	4630      	mov	r0, r6
90004c70:	bd70      	pop	{r4, r5, r6, pc}
90004c72:	bf00      	nop

90004c74 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
90004c74:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
90004c76:	1e16      	subs	r6, r2, #0
90004c78:	dd07      	ble.n	90004c8a <_write+0x16>
90004c7a:	460c      	mov	r4, r1
90004c7c:	198d      	adds	r5, r1, r6
	{
		__io_putchar(*ptr++);
90004c7e:	f814 0b01 	ldrb.w	r0, [r4], #1
90004c82:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
90004c86:	42ac      	cmp	r4, r5
90004c88:	d1f9      	bne.n	90004c7e <_write+0xa>
	}
	return len;
}
90004c8a:	4630      	mov	r0, r6
90004c8c:	bd70      	pop	{r4, r5, r6, pc}
90004c8e:	bf00      	nop

90004c90 <_close>:

int _close(int file)
{
	return -1;
}
90004c90:	f04f 30ff 	mov.w	r0, #4294967295
90004c94:	4770      	bx	lr
90004c96:	bf00      	nop

90004c98 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
90004c98:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
90004c9c:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
90004c9e:	604b      	str	r3, [r1, #4]
}
90004ca0:	4770      	bx	lr
90004ca2:	bf00      	nop

90004ca4 <_isatty>:

int _isatty(int file)
{
	return 1;
}
90004ca4:	2001      	movs	r0, #1
90004ca6:	4770      	bx	lr

90004ca8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
90004ca8:	2000      	movs	r0, #0
90004caa:	4770      	bx	lr

90004cac <_sbrk>:
{
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
90004cac:	4a0a      	ldr	r2, [pc, #40]	; (90004cd8 <_sbrk+0x2c>)
{
90004cae:	b508      	push	{r3, lr}
90004cb0:	4603      	mov	r3, r0
	if (heap_end == 0)
90004cb2:	6810      	ldr	r0, [r2, #0]
90004cb4:	b128      	cbz	r0, 90004cc2 <_sbrk+0x16>
		heap_end = &end;

	prev_heap_end = heap_end;
	if (heap_end + incr > stack_ptr)
90004cb6:	4403      	add	r3, r0
90004cb8:	4669      	mov	r1, sp
90004cba:	428b      	cmp	r3, r1
90004cbc:	d805      	bhi.n	90004cca <_sbrk+0x1e>
	{
		errno = ENOMEM;
		return NULL;
	}

	heap_end += incr;
90004cbe:	6013      	str	r3, [r2, #0]

	return prev_heap_end;
}
90004cc0:	bd08      	pop	{r3, pc}
		heap_end = &end;
90004cc2:	4906      	ldr	r1, [pc, #24]	; (90004cdc <_sbrk+0x30>)
90004cc4:	4608      	mov	r0, r1
90004cc6:	6011      	str	r1, [r2, #0]
90004cc8:	e7f5      	b.n	90004cb6 <_sbrk+0xa>
		errno = ENOMEM;
90004cca:	f01e fc07 	bl	900234dc <__errno>
90004cce:	220c      	movs	r2, #12
90004cd0:	4603      	mov	r3, r0
		return NULL;
90004cd2:	2000      	movs	r0, #0
		errno = ENOMEM;
90004cd4:	601a      	str	r2, [r3, #0]
}
90004cd6:	bd08      	pop	{r3, pc}
90004cd8:	2400b164 	.word	0x2400b164
90004cdc:	24026648 	.word	0x24026648

90004ce0 <_ZN23ApplicationFontProviderD1Ev>:
    static const touchgfx::FontId LARGE = 1;   // verdana_40_4bpp
    static const touchgfx::FontId SMALL = 2;   // verdana_10_4bpp
    static const uint16_t NUMBER_OF_FONTS = 3;
};

class ApplicationFontProvider : public touchgfx::FontProvider
90004ce0:	4770      	bx	lr
90004ce2:	bf00      	nop

90004ce4 <_ZN23ApplicationFontProviderD0Ev>:
90004ce4:	b510      	push	{r4, lr}
90004ce6:	4604      	mov	r4, r0
90004ce8:	2104      	movs	r1, #4
90004cea:	f01e f87a 	bl	90022de2 <_ZdlPvj>
90004cee:	4620      	mov	r0, r4
90004cf0:	bd10      	pop	{r4, pc}
90004cf2:	bf00      	nop

90004cf4 <_ZN23ApplicationFontProvider7getFontEt>:
#include <fonts/GeneratedFont.hpp>
#include <texts/TypedTextDatabase.hpp>

touchgfx::Font* ApplicationFontProvider::getFont(touchgfx::FontId typography)
{
    switch (typography)
90004cf4:	2901      	cmp	r1, #1
{
90004cf6:	b508      	push	{r3, lr}
    switch (typography)
90004cf8:	d004      	beq.n	90004d04 <_ZN23ApplicationFontProvider7getFontEt+0x10>
90004cfa:	2902      	cmp	r1, #2
90004cfc:	d00a      	beq.n	90004d14 <_ZN23ApplicationFontProvider7getFontEt+0x20>
90004cfe:	b129      	cbz	r1, 90004d0c <_ZN23ApplicationFontProvider7getFontEt+0x18>
90004d00:	2000      	movs	r0, #0
        // verdana_10_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
    default:
        return 0;
    }
}
90004d02:	bd08      	pop	{r3, pc}
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[1]);
90004d04:	f000 fdf4 	bl	900058f0 <_ZN17TypedTextDatabase8getFontsEv>
90004d08:	6840      	ldr	r0, [r0, #4]
}
90004d0a:	bd08      	pop	{r3, pc}
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
90004d0c:	f000 fdf0 	bl	900058f0 <_ZN17TypedTextDatabase8getFontsEv>
90004d10:	6800      	ldr	r0, [r0, #0]
}
90004d12:	bd08      	pop	{r3, pc}
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
90004d14:	f000 fdec 	bl	900058f0 <_ZN17TypedTextDatabase8getFontsEv>
90004d18:	6880      	ldr	r0, [r0, #8]
}
90004d1a:	bd08      	pop	{r3, pc}

90004d1c <_ZN14BitmapDatabase11getInstanceEv>:
namespace BitmapDatabase
{
const touchgfx::Bitmap::BitmapData* getInstance()
{
    return bitmap_database;
}
90004d1c:	4800      	ldr	r0, [pc, #0]	; (90004d20 <_ZN14BitmapDatabase11getInstanceEv+0x4>)
90004d1e:	4770      	bx	lr
90004d20:	90025c2c 	.word	0x90025c2c

90004d24 <_ZN14BitmapDatabase15getInstanceSizeEv>:

uint16_t getInstanceSize()
{
    return (uint16_t)(sizeof(bitmap_database) / sizeof(touchgfx::Bitmap::BitmapData));
}
90004d24:	2001      	movs	r0, #1
90004d26:	4770      	bx	lr

90004d28 <_ZNK8touchgfx4Font8getGlyphEt>:
     *
     * @see TextProvider::getNextLigature
     */
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
    {
        if (unicode == 0)
90004d28:	b169      	cbz	r1, 90004d46 <_ZNK8touchgfx4Font8getGlyphEt+0x1e>
        {
            return 0;
        }
        const uint8_t* dummyPixelDataPointer = 0;
        uint8_t bitsPerPixelDummy = 0;
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
90004d2a:	6802      	ldr	r2, [r0, #0]
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
90004d2c:	b530      	push	{r4, r5, lr}
90004d2e:	b083      	sub	sp, #12
        const uint8_t* dummyPixelDataPointer = 0;
90004d30:	2400      	movs	r4, #0
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
90004d32:	6895      	ldr	r5, [r2, #8]
90004d34:	f10d 0303 	add.w	r3, sp, #3
90004d38:	aa01      	add	r2, sp, #4
        const uint8_t* dummyPixelDataPointer = 0;
90004d3a:	9401      	str	r4, [sp, #4]
        uint8_t bitsPerPixelDummy = 0;
90004d3c:	f88d 4003 	strb.w	r4, [sp, #3]
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
90004d40:	47a8      	blx	r5
        return glyph;
    }
90004d42:	b003      	add	sp, #12
90004d44:	bd30      	pop	{r4, r5, pc}
            return 0;
90004d46:	4608      	mov	r0, r1
    }
90004d48:	4770      	bx	lr
90004d4a:	bf00      	nop

90004d4c <_ZNK8touchgfx4Font15getFallbackCharEv>:
     * @return The default character for the typography in case no glyph is available.
     */
    virtual Unicode::UnicodeChar getFallbackChar() const
    {
        return fallbackCharacter;
    }
90004d4c:	89c0      	ldrh	r0, [r0, #14]
90004d4e:	4770      	bx	lr

90004d50 <_ZNK8touchgfx4Font15getEllipsisCharEv>:
     * @see TextArea::setWideTextAction
     */
    virtual Unicode::UnicodeChar getEllipsisChar() const
    {
        return ellipsisCharacter;
    }
90004d50:	8a00      	ldrh	r0, [r0, #16]
90004d52:	4770      	bx	lr

90004d54 <_ZNK8touchgfx4Font11getBaselineEv>:
     *       getMinimumTextHeight for this.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getBaseline() const
    {
        return baselineHeight;
    }
90004d54:	88c0      	ldrh	r0, [r0, #6]
90004d56:	4770      	bx	lr

90004d58 <_ZNK8touchgfx4Font9getHeightEv>:
     * @return The font height.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getHeight() const
    {
        return fontHeight;
    }
90004d58:	8880      	ldrh	r0, [r0, #4]
90004d5a:	4770      	bx	lr

90004d5c <_ZNK8touchgfx4Font15getBitsPerPixelEv>:
     *
     * @return The number of bits used per pixel in this font.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getBitsPerPixel() const
    {
        return bPerPixel;
90004d5c:	7a80      	ldrb	r0, [r0, #10]
    }
90004d5e:	f000 007f 	and.w	r0, r0, #127	; 0x7f
90004d62:	4770      	bx	lr

90004d64 <_ZNK8touchgfx4Font15getByteAlignRowEv>:
     *
     * @return True if each glyph row is stored byte aligned, false otherwise.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getByteAlignRow() const
    {
        return bAlignRow;
90004d64:	7a80      	ldrb	r0, [r0, #10]
    }
90004d66:	09c0      	lsrs	r0, r0, #7
90004d68:	4770      	bx	lr
90004d6a:	bf00      	nop

90004d6c <_ZN8touchgfx9TypedTextD1Ev>:
    }
90004d6c:	4770      	bx	lr
90004d6e:	bf00      	nop

90004d70 <_ZN8touchgfx9TypedTextD0Ev>:
    virtual ~TypedText()
90004d70:	b510      	push	{r4, lr}
90004d72:	4604      	mov	r4, r0
    }
90004d74:	2108      	movs	r1, #8
90004d76:	f01e f834 	bl	90022de2 <_ZdlPvj>
90004d7a:	4620      	mov	r0, r4
90004d7c:	bd10      	pop	{r4, pc}
90004d7e:	bf00      	nop

90004d80 <_ZN8touchgfx11Application15appSwitchScreenEh>:
     * @param screenId An id that maps to the desired screen.
     */
    virtual void appSwitchScreen(uint8_t screenId)
    {
        (void)screenId; // Unused variable
    }
90004d80:	4770      	bx	lr
90004d82:	bf00      	nop

90004d84 <_ZN8touchgfx11Application13requestRedrawERNS_4RectE>:
     *
     * @param [in,out] rect The Rect that must be redrawn.
     */
    virtual void requestRedraw(Rect& rect)
    {
        redraw = rect;
90004d84:	f500 7398 	add.w	r3, r0, #304	; 0x130
90004d88:	6808      	ldr	r0, [r1, #0]
90004d8a:	6849      	ldr	r1, [r1, #4]
90004d8c:	c303      	stmia	r3!, {r0, r1}
    }
90004d8e:	4770      	bx	lr

90004d90 <_ZN8touchgfx10Transition8tearDownEv>:
     * Tears down the Animation. Called before the destructor is called, when the
     * application changes the transition.
     */
    virtual void tearDown()
    {
    }
90004d90:	4770      	bx	lr
90004d92:	bf00      	nop

90004d94 <_ZN8touchgfx10Transition4initEv>:
     * Initializes the transition. Called after the constructor is called, when the
     * application changes the transition.
     */
    virtual void init()
    {
    }
90004d94:	4770      	bx	lr
90004d96:	bf00      	nop

90004d98 <_ZN8touchgfx10Transition18setScreenContainerERNS_9ContainerE>:
     *
     * @param [in] cont The Container the transition should have access to.
     */
    virtual void setScreenContainer(Container& cont)
    {
        screenContainer = &cont;
90004d98:	6041      	str	r1, [r0, #4]
    }
90004d9a:	4770      	bx	lr

90004d9c <_ZN23FrontendApplicationBaseD1Ev>:

class FrontendApplicationBase : public touchgfx::MVPApplication
{
public:
    FrontendApplicationBase(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplicationBase() { }
90004d9c:	4770      	bx	lr
90004d9e:	bf00      	nop

90004da0 <_ZN23FrontendApplicationBase19changeToStartScreenEv>:
 *
 * @note The member function to call must return void. The function can have zero, one, two or
 *       three arguments of any type.
 */
template <class dest_type>
struct Callback<dest_type, void, void, void> : public GenericCallback<>
90004da0:	4905      	ldr	r1, [pc, #20]	; (90004db8 <_ZN23FrontendApplicationBase19changeToStartScreenEv+0x18>)
90004da2:	2200      	movs	r2, #0
// Screen1

void FrontendApplicationBase::gotoScreen1ScreenNoTransition()
{
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoScreen1ScreenNoTransitionImpl);
    pendingScreenTransitionCallback = &transitionCallback;
90004da4:	f500 73a2 	add.w	r3, r0, #324	; 0x144
90004da8:	f8c0 2150 	str.w	r2, [r0, #336]	; 0x150
90004dac:	f8c0 3140 	str.w	r3, [r0, #320]	; 0x140
90004db0:	e9c0 0152 	strd	r0, r1, [r0, #328]	; 0x148

    virtual void changeToStartScreen()
    {
        gotoScreen1ScreenNoTransition();
    }
90004db4:	4770      	bx	lr
90004db6:	bf00      	nop
90004db8:	90004e45 	.word	0x90004e45

90004dbc <_ZN8touchgfx12NoTransition15handleTickEventEv>:
{
public:
    /** Indicates that the transition is done after the first tick. */
    virtual void handleTickEvent()
    {
        done = true;
90004dbc:	2301      	movs	r3, #1
90004dbe:	7203      	strb	r3, [r0, #8]
    }
90004dc0:	4770      	bx	lr
90004dc2:	bf00      	nop

90004dc4 <_ZN8touchgfx12NoTransitionD1Ev>:
class NoTransition : public Transition
90004dc4:	4770      	bx	lr
90004dc6:	bf00      	nop

90004dc8 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>:
90004dc8:	4770      	bx	lr
90004dca:	bf00      	nop

90004dcc <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv>:
     * Calls the member function. Do not call execute unless isValid() returns true (ie. a
     * pointer to the object and the function has been set).
     */
    virtual void execute()
    {
        (pobject->*pmemfun)();
90004dcc:	68c2      	ldr	r2, [r0, #12]
    virtual void execute()
90004dce:	4603      	mov	r3, r0
        (pobject->*pmemfun)();
90004dd0:	6841      	ldr	r1, [r0, #4]
90004dd2:	ea4f 0c62 	mov.w	ip, r2, asr #1
90004dd6:	eb01 0062 	add.w	r0, r1, r2, asr #1
90004dda:	07d2      	lsls	r2, r2, #31
90004ddc:	d401      	bmi.n	90004de2 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x16>
90004dde:	689b      	ldr	r3, [r3, #8]
90004de0:	4718      	bx	r3
90004de2:	f851 200c 	ldr.w	r2, [r1, ip]
90004de6:	689b      	ldr	r3, [r3, #8]
90004de8:	58d3      	ldr	r3, [r2, r3]
90004dea:	4718      	bx	r3

90004dec <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv>:
     *
     * @return true If the callback is valid (i.e. safe to call execute).
     */
    virtual bool isValid() const
    {
        return (pobject != 0) && (pmemfun != 0);
90004dec:	6843      	ldr	r3, [r0, #4]
90004dee:	b13b      	cbz	r3, 90004e00 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x14>
90004df0:	6883      	ldr	r3, [r0, #8]
90004df2:	b10b      	cbz	r3, 90004df8 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0xc>
90004df4:	2001      	movs	r0, #1
    }
90004df6:	4770      	bx	lr
        return (pobject != 0) && (pmemfun != 0);
90004df8:	68c0      	ldr	r0, [r0, #12]
90004dfa:	f000 0001 	and.w	r0, r0, #1
90004dfe:	4770      	bx	lr
90004e00:	4618      	mov	r0, r3
90004e02:	4770      	bx	lr

90004e04 <_ZN8touchgfx12NoTransitionD0Ev>:
90004e04:	b510      	push	{r4, lr}
90004e06:	4604      	mov	r4, r0
90004e08:	210c      	movs	r1, #12
90004e0a:	f01d ffea 	bl	90022de2 <_ZdlPvj>
90004e0e:	4620      	mov	r0, r4
90004e10:	bd10      	pop	{r4, pc}
90004e12:	bf00      	nop

90004e14 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED0Ev>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
90004e14:	b510      	push	{r4, lr}
90004e16:	4604      	mov	r4, r0
90004e18:	2110      	movs	r1, #16
90004e1a:	f01d ffe2 	bl	90022de2 <_ZdlPvj>
90004e1e:	4620      	mov	r0, r4
90004e20:	bd10      	pop	{r4, pc}
90004e22:	bf00      	nop

90004e24 <_ZN23FrontendApplicationBaseD0Ev>:
    virtual ~FrontendApplicationBase() { }
90004e24:	b510      	push	{r4, lr}
90004e26:	4604      	mov	r4, r0
90004e28:	f44f 71ae 	mov.w	r1, #348	; 0x15c
90004e2c:	f01d ffd9 	bl	90022de2 <_ZdlPvj>
90004e30:	4620      	mov	r0, r4
90004e32:	bd10      	pop	{r4, pc}

90004e34 <_ZN8touchgfx10Transition10invalidateEv>:
    virtual void invalidate()
90004e34:	b508      	push	{r3, lr}
        Application::getInstance()->invalidate();
90004e36:	f00f f9d9 	bl	900141ec <_ZN8touchgfx11Application11getInstanceEv>
    }
90004e3a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        Application::getInstance()->invalidate();
90004e3e:	f00f be1f 	b.w	90014a80 <_ZN8touchgfx11Application10invalidateEv>
90004e42:	bf00      	nop

90004e44 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv>:
}

void FrontendApplicationBase::gotoScreen1ScreenNoTransitionImpl()
{
90004e44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    touchgfx::makeTransition<Screen1View, Screen1Presenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
90004e48:	e9d0 4a55 	ldrd	r4, sl, [r0, #340]	; 0x154
{
90004e4c:	4607      	mov	r7, r0
90004e4e:	b081      	sub	sp, #4
 *         value as the old presenter due to memory reuse.
 */
template <class ScreenType, class PresenterType, class TransType, class ModelType>
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
{
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
90004e50:	68a0      	ldr	r0, [r4, #8]
90004e52:	6803      	ldr	r3, [r0, #0]
90004e54:	6a1b      	ldr	r3, [r3, #32]
90004e56:	4798      	blx	r3
90004e58:	28eb      	cmp	r0, #235	; 0xeb
90004e5a:	f240 80a8 	bls.w	90004fae <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x16a>
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
90004e5e:	6860      	ldr	r0, [r4, #4]
90004e60:	6803      	ldr	r3, [r0, #0]
90004e62:	6a1b      	ldr	r3, [r3, #32]
90004e64:	4798      	blx	r3
90004e66:	280f      	cmp	r0, #15
90004e68:	f240 809b 	bls.w	90004fa2 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x15e>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
90004e6c:	68e0      	ldr	r0, [r4, #12]
90004e6e:	6803      	ldr	r3, [r0, #0]
90004e70:	6a1b      	ldr	r3, [r3, #32]
90004e72:	4798      	blx	r3
90004e74:	280b      	cmp	r0, #11
90004e76:	f240 80a0 	bls.w	90004fba <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x176>
    if (*currentTrans)
90004e7a:	f8df 9170 	ldr.w	r9, [pc, #368]	; 90004fec <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x1a8>
    Application::getInstance()->clearAllTimerWidgets();
90004e7e:	f00f f9b5 	bl	900141ec <_ZN8touchgfx11Application11getInstanceEv>

    /** Clears all currently registered timer widgets. */

    void clearAllTimerWidgets()
    {
        timerWidgets.clear();
90004e82:	3004      	adds	r0, #4
90004e84:	f00f f9d7 	bl	90014236 <_ZN8touchgfx11Application12TimerWidgets5clearEv>
    if (*currentTrans)
90004e88:	f8d9 0000 	ldr.w	r0, [r9]
90004e8c:	b130      	cbz	r0, 90004e9c <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x58>
        (*currentTrans)->tearDown();
90004e8e:	6803      	ldr	r3, [r0, #0]
90004e90:	494d      	ldr	r1, [pc, #308]	; (90004fc8 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x184>)
90004e92:	68da      	ldr	r2, [r3, #12]
90004e94:	428a      	cmp	r2, r1
90004e96:	d17c      	bne.n	90004f92 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x14e>
        (*currentTrans)->~Transition();
90004e98:	681b      	ldr	r3, [r3, #0]
90004e9a:	4798      	blx	r3
    if (*currentScreen)
90004e9c:	f8df 8150 	ldr.w	r8, [pc, #336]	; 90004ff0 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x1ac>
90004ea0:	f8d8 0000 	ldr.w	r0, [r8]
90004ea4:	2800      	cmp	r0, #0
90004ea6:	d061      	beq.n	90004f6c <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x128>
        (*currentScreen)->tearDownScreen();
90004ea8:	6803      	ldr	r3, [r0, #0]
90004eaa:	695b      	ldr	r3, [r3, #20]
90004eac:	4798      	blx	r3
    if (*currentPresenter)
90004eae:	f8d7 013c 	ldr.w	r0, [r7, #316]	; 0x13c
90004eb2:	2800      	cmp	r0, #0
90004eb4:	d055      	beq.n	90004f62 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x11e>
        (*currentPresenter)->deactivate();
90004eb6:	6803      	ldr	r3, [r0, #0]
90004eb8:	685b      	ldr	r3, [r3, #4]
90004eba:	4798      	blx	r3
    if (*currentScreen)
90004ebc:	f8d8 0000 	ldr.w	r0, [r8]
90004ec0:	b110      	cbz	r0, 90004ec8 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x84>
        (*currentScreen)->~Screen();
90004ec2:	6803      	ldr	r3, [r0, #0]
90004ec4:	681b      	ldr	r3, [r3, #0]
90004ec6:	4798      	blx	r3
    if (*currentPresenter)
90004ec8:	f8d7 013c 	ldr.w	r0, [r7, #316]	; 0x13c
90004ecc:	b110      	cbz	r0, 90004ed4 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x90>
        (*currentPresenter)->~Presenter();
90004ece:	6803      	ldr	r3, [r0, #0]
90004ed0:	689b      	ldr	r3, [r3, #8]
90004ed2:	4798      	blx	r3

    prepareTransition(currentScreen, currentPresenter, currentTrans);

    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
90004ed4:	68e0      	ldr	r0, [r4, #12]
     * @return A typed reference to the object at the specified index.
     */
    template <typename T>
    T& at(const uint16_t index)
    {
        return *static_cast<T*>(element(index));
90004ed6:	2100      	movs	r1, #0
90004ed8:	6803      	ldr	r3, [r0, #0]
        : screenContainer(0), done(false)
90004eda:	468b      	mov	fp, r1
90004edc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
90004ede:	4798      	blx	r3
90004ee0:	4b3a      	ldr	r3, [pc, #232]	; (90004fcc <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x188>)
90004ee2:	4605      	mov	r5, r0
90004ee4:	f8c0 b004 	str.w	fp, [r0, #4]
90004ee8:	f880 b008 	strb.w	fp, [r0, #8]
90004eec:	4659      	mov	r1, fp
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
90004eee:	68a0      	ldr	r0, [r4, #8]
90004ef0:	602b      	str	r3, [r5, #0]
90004ef2:	6803      	ldr	r3, [r0, #0]
90004ef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
90004ef6:	4798      	blx	r3
90004ef8:	4606      	mov	r6, r0
90004efa:	f000 fda3 	bl	90005a44 <_ZN11Screen1ViewC1Ev>
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
90004efe:	6860      	ldr	r0, [r4, #4]
90004f00:	4659      	mov	r1, fp
90004f02:	6803      	ldr	r3, [r0, #0]
90004f04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
90004f06:	4798      	blx	r3
90004f08:	4604      	mov	r4, r0
90004f0a:	4631      	mov	r1, r6
90004f0c:	f000 fd70 	bl	900059f0 <_ZN16Screen1PresenterC1ER11Screen1View>
    *currentTrans = newTransition;
90004f10:	f8c9 5000 	str.w	r5, [r9]
    *currentPresenter = newPresenter;
90004f14:	f8c7 413c 	str.w	r4, [r7, #316]	; 0x13c
    *currentScreen = newScreen;
90004f18:	f8c8 6000 	str.w	r6, [r8]
    model->bind(newPresenter);
90004f1c:	b35c      	cbz	r4, 90004f76 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x132>
90004f1e:	1d23      	adds	r3, r4, #4
public:
    Model();

    void bind(ModelListener* listener)
    {
        modelListener = listener;
90004f20:	f8ca 3000 	str.w	r3, [sl]
    newScreen->setupScreen();
90004f24:	4630      	mov	r0, r6
90004f26:	6833      	ldr	r3, [r6, #0]
    
    virtual ~ModelListener() {}

    void bind(Model* m)
    {
        model = m;
90004f28:	f8c4 a008 	str.w	sl, [r4, #8]
90004f2c:	68db      	ldr	r3, [r3, #12]
     *
     * @param [in] newPresenter The specific Presenter to be associated with the View.
     */
    void bind(T& newPresenter)
    {
        presenter = &newPresenter;
90004f2e:	63f4      	str	r4, [r6, #60]	; 0x3c
90004f30:	4798      	blx	r3
    newPresenter->activate();
90004f32:	6823      	ldr	r3, [r4, #0]
90004f34:	4620      	mov	r0, r4
90004f36:	681b      	ldr	r3, [r3, #0]
90004f38:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
90004f3a:	4629      	mov	r1, r5
90004f3c:	4630      	mov	r0, r6
90004f3e:	f010 fdef 	bl	90015b20 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
90004f42:	682b      	ldr	r3, [r5, #0]
90004f44:	4922      	ldr	r1, [pc, #136]	; (90004fd0 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x18c>)
90004f46:	691a      	ldr	r2, [r3, #16]
90004f48:	428a      	cmp	r2, r1
90004f4a:	d116      	bne.n	90004f7a <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x136>
    newTransition->invalidate();
90004f4c:	695b      	ldr	r3, [r3, #20]
90004f4e:	4a21      	ldr	r2, [pc, #132]	; (90004fd4 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x190>)
90004f50:	4293      	cmp	r3, r2
90004f52:	d119      	bne.n	90004f88 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x144>
        Application::getInstance()->invalidate();
90004f54:	f00f f94a 	bl	900141ec <_ZN8touchgfx11Application11getInstanceEv>
}
90004f58:	b001      	add	sp, #4
90004f5a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90004f5e:	f00f bd8f 	b.w	90014a80 <_ZN8touchgfx11Application10invalidateEv>
    if (*currentScreen)
90004f62:	f8d8 0000 	ldr.w	r0, [r8]
90004f66:	2800      	cmp	r0, #0
90004f68:	d1ab      	bne.n	90004ec2 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x7e>
90004f6a:	e7b3      	b.n	90004ed4 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x90>
    if (*currentPresenter)
90004f6c:	f8d7 013c 	ldr.w	r0, [r7, #316]	; 0x13c
90004f70:	2800      	cmp	r0, #0
90004f72:	d1a0      	bne.n	90004eb6 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x72>
90004f74:	e7ae      	b.n	90004ed4 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x90>
    model->bind(newPresenter);
90004f76:	4623      	mov	r3, r4
90004f78:	e7d2      	b.n	90004f20 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0xdc>
    newTransition->init();
90004f7a:	4628      	mov	r0, r5
90004f7c:	4790      	blx	r2
    newTransition->invalidate();
90004f7e:	682b      	ldr	r3, [r5, #0]
90004f80:	4a14      	ldr	r2, [pc, #80]	; (90004fd4 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x190>)
90004f82:	695b      	ldr	r3, [r3, #20]
90004f84:	4293      	cmp	r3, r2
90004f86:	d0e5      	beq.n	90004f54 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x110>
90004f88:	4628      	mov	r0, r5
90004f8a:	b001      	add	sp, #4
90004f8c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90004f90:	4718      	bx	r3
        (*currentTrans)->tearDown();
90004f92:	4790      	blx	r2
    if (*currentTrans)
90004f94:	f8d9 0000 	ldr.w	r0, [r9]
90004f98:	2800      	cmp	r0, #0
90004f9a:	f43f af7f 	beq.w	90004e9c <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x58>
        (*currentTrans)->~Transition();
90004f9e:	6803      	ldr	r3, [r0, #0]
90004fa0:	e77a      	b.n	90004e98 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x54>
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
90004fa2:	4b0d      	ldr	r3, [pc, #52]	; (90004fd8 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x194>)
90004fa4:	21a4      	movs	r1, #164	; 0xa4
90004fa6:	4a0d      	ldr	r2, [pc, #52]	; (90004fdc <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x198>)
90004fa8:	480d      	ldr	r0, [pc, #52]	; (90004fe0 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x19c>)
90004faa:	f01d ff49 	bl	90022e40 <__assert_func>
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
90004fae:	4b0d      	ldr	r3, [pc, #52]	; (90004fe4 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x1a0>)
90004fb0:	21a3      	movs	r1, #163	; 0xa3
90004fb2:	4a0a      	ldr	r2, [pc, #40]	; (90004fdc <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x198>)
90004fb4:	480a      	ldr	r0, [pc, #40]	; (90004fe0 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x19c>)
90004fb6:	f01d ff43 	bl	90022e40 <__assert_func>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
90004fba:	4b0b      	ldr	r3, [pc, #44]	; (90004fe8 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x1a4>)
90004fbc:	21a5      	movs	r1, #165	; 0xa5
90004fbe:	4a07      	ldr	r2, [pc, #28]	; (90004fdc <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x198>)
90004fc0:	4807      	ldr	r0, [pc, #28]	; (90004fe0 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x19c>)
90004fc2:	f01d ff3d 	bl	90022e40 <__assert_func>
90004fc6:	bf00      	nop
90004fc8:	90004d91 	.word	0x90004d91
90004fcc:	90025fe0 	.word	0x90025fe0
90004fd0:	90004d95 	.word	0x90004d95
90004fd4:	90004e35 	.word	0x90004e35
90004fd8:	90025e2c 	.word	0x90025e2c
90004fdc:	90025ce0 	.word	0x90025ce0
90004fe0:	90025de4 	.word	0x90025de4
90004fe4:	90025c50 	.word	0x90025c50
90004fe8:	90025ed0 	.word	0x90025ed0
90004fec:	240262a4 	.word	0x240262a4
90004ff0:	240262a0 	.word	0x240262a0

90004ff4 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv>:
        if (pendingScreenTransitionCallback && pendingScreenTransitionCallback->isValid())
90004ff4:	f8d0 3140 	ldr.w	r3, [r0, #320]	; 0x140
90004ff8:	b1d3      	cbz	r3, 90005030 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x3c>
90004ffa:	681a      	ldr	r2, [r3, #0]
    virtual void handlePendingScreenTransition()
90004ffc:	b570      	push	{r4, r5, r6, lr}
        if (pendingScreenTransitionCallback && pendingScreenTransitionCallback->isValid())
90004ffe:	68d1      	ldr	r1, [r2, #12]
90005000:	4604      	mov	r4, r0
90005002:	4818      	ldr	r0, [pc, #96]	; (90005064 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x70>)
90005004:	4281      	cmp	r1, r0
90005006:	d118      	bne.n	9000503a <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x46>
        return (pobject != 0) && (pmemfun != 0);
90005008:	6858      	ldr	r0, [r3, #4]
9000500a:	b180      	cbz	r0, 9000502e <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x3a>
9000500c:	6899      	ldr	r1, [r3, #8]
9000500e:	b1e1      	cbz	r1, 9000504a <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x56>
            pendingScreenTransitionCallback->execute();
90005010:	6892      	ldr	r2, [r2, #8]
90005012:	4915      	ldr	r1, [pc, #84]	; (90005068 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x74>)
90005014:	428a      	cmp	r2, r1
90005016:	d122      	bne.n	9000505e <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x6a>
        (pobject->*pmemfun)();
90005018:	68da      	ldr	r2, [r3, #12]
9000501a:	6858      	ldr	r0, [r3, #4]
9000501c:	eb00 0062 	add.w	r0, r0, r2, asr #1
90005020:	07d2      	lsls	r2, r2, #31
90005022:	d406      	bmi.n	90005032 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x3e>
90005024:	689b      	ldr	r3, [r3, #8]
90005026:	4798      	blx	r3
            pendingScreenTransitionCallback = 0;
90005028:	2300      	movs	r3, #0
9000502a:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
    }
9000502e:	bd70      	pop	{r4, r5, r6, pc}
90005030:	4770      	bx	lr
90005032:	6899      	ldr	r1, [r3, #8]
90005034:	6803      	ldr	r3, [r0, #0]
90005036:	585b      	ldr	r3, [r3, r1]
90005038:	e7f5      	b.n	90005026 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x32>
        if (pendingScreenTransitionCallback && pendingScreenTransitionCallback->isValid())
9000503a:	4618      	mov	r0, r3
9000503c:	4788      	blx	r1
9000503e:	2800      	cmp	r0, #0
90005040:	d0f5      	beq.n	9000502e <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x3a>
            pendingScreenTransitionCallback->execute();
90005042:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
90005046:	681a      	ldr	r2, [r3, #0]
90005048:	e7e2      	b.n	90005010 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x1c>
        return (pobject != 0) && (pmemfun != 0);
9000504a:	68dd      	ldr	r5, [r3, #12]
9000504c:	07ee      	lsls	r6, r5, #31
9000504e:	d5ee      	bpl.n	9000502e <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x3a>
90005050:	6892      	ldr	r2, [r2, #8]
90005052:	4e05      	ldr	r6, [pc, #20]	; (90005068 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x74>)
90005054:	42b2      	cmp	r2, r6
90005056:	d102      	bne.n	9000505e <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x6a>
        (pobject->*pmemfun)();
90005058:	eb00 0065 	add.w	r0, r0, r5, asr #1
9000505c:	e7ea      	b.n	90005034 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x40>
9000505e:	4618      	mov	r0, r3
90005060:	4790      	blx	r2
90005062:	e7e1      	b.n	90005028 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x34>
90005064:	90004ded 	.word	0x90004ded
90005068:	90004dcd 	.word	0x90004dcd

9000506c <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>:
FrontendApplicationBase::FrontendApplicationBase(Model& m, FrontendHeap& heap)
9000506c:	b570      	push	{r4, r5, r6, lr}
9000506e:	4604      	mov	r4, r0
90005070:	4616      	mov	r6, r2
90005072:	460d      	mov	r5, r1
          pendingScreenTransitionCallback(0)
90005074:	f00f f980 	bl	90014378 <_ZN8touchgfx11ApplicationC1Ev>
        instance = this;
90005078:	4a18      	ldr	r2, [pc, #96]	; (900050dc <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x70>)
        : currentPresenter(0),
9000507a:	2300      	movs	r3, #0
      frontendHeap(heap),
9000507c:	f8c4 6154 	str.w	r6, [r4, #340]	; 0x154
        instance = this;
90005080:	6014      	str	r4, [r2, #0]
        return instance;
90005082:	4e17      	ldr	r6, [pc, #92]	; (900050e0 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x74>)
      model(m)
90005084:	4a17      	ldr	r2, [pc, #92]	; (900050e4 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x78>)
90005086:	6830      	ldr	r0, [r6, #0]
90005088:	6022      	str	r2, [r4, #0]
        : pobject(0), pmemfun(0)
9000508a:	4a17      	ldr	r2, [pc, #92]	; (900050e8 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x7c>)
9000508c:	4917      	ldr	r1, [pc, #92]	; (900050ec <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x80>)
9000508e:	f8c4 2144 	str.w	r2, [r4, #324]	; 0x144
90005092:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
90005096:	f8c4 5158 	str.w	r5, [r4, #344]	; 0x158
9000509a:	e9c4 3353 	strd	r3, r3, [r4, #332]	; 0x14c
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
9000509e:	6802      	ldr	r2, [r0, #0]
900050a0:	6892      	ldr	r2, [r2, #8]
900050a2:	428a      	cmp	r2, r1
          pendingScreenTransitionCallback(0)
900050a4:	e9c4 334f 	strd	r3, r3, [r4, #316]	; 0x13c
900050a8:	d115      	bne.n	900050d6 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x6a>
        requestedOrientation = orientation;
900050aa:	f44f 7380 	mov.w	r3, #256	; 0x100
900050ae:	f8a0 3074 	strh.w	r3, [r0, #116]	; 0x74
    touchgfx::Texts::setLanguage(GB);
900050b2:	2000      	movs	r0, #0
900050b4:	f000 fbce 	bl	90005854 <_ZN8touchgfx5Texts11setLanguageEt>
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
900050b8:	6833      	ldr	r3, [r6, #0]
900050ba:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
900050be:	b12a      	cbz	r2, 900050cc <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x60>
900050c0:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
900050c2:	b118      	cbz	r0, 900050cc <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x60>
    reinterpret_cast<touchgfx::LCD16bpp&>(touchgfx::HAL::lcd()).enableTextureMapperAll();
900050c4:	f016 ff89 	bl	9001bfda <_ZN8touchgfx8LCD16bpp22enableTextureMapperAllEv>
}
900050c8:	4620      	mov	r0, r4
900050ca:	bd70      	pop	{r4, r5, r6, pc}
        return instance->lcdRef;
900050cc:	6898      	ldr	r0, [r3, #8]
    reinterpret_cast<touchgfx::LCD16bpp&>(touchgfx::HAL::lcd()).enableTextureMapperAll();
900050ce:	f016 ff84 	bl	9001bfda <_ZN8touchgfx8LCD16bpp22enableTextureMapperAllEv>
}
900050d2:	4620      	mov	r0, r4
900050d4:	bd70      	pop	{r4, r5, r6, pc}
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
900050d6:	4619      	mov	r1, r3
900050d8:	4790      	blx	r2
900050da:	e7ea      	b.n	900050b2 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x46>
900050dc:	240262b0 	.word	0x240262b0
900050e0:	24026264 	.word	0x24026264
900050e4:	90025f94 	.word	0x90025f94
900050e8:	90025f7c 	.word	0x90025f7c
900050ec:	90000665 	.word	0x90000665

900050f0 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
900050f0:	4905      	ldr	r1, [pc, #20]	; (90005108 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv+0x18>)
900050f2:	2200      	movs	r2, #0
    pendingScreenTransitionCallback = &transitionCallback;
900050f4:	f500 73a2 	add.w	r3, r0, #324	; 0x144
900050f8:	f8c0 2150 	str.w	r2, [r0, #336]	; 0x150
900050fc:	f8c0 3140 	str.w	r3, [r0, #320]	; 0x140
90005100:	e9c0 0152 	strd	r0, r1, [r0, #328]	; 0x148
}
90005104:	4770      	bx	lr
90005106:	bf00      	nop
90005108:	90004e45 	.word	0x90004e45

9000510c <_ZNK8touchgfx13GeneratedFont12getGSUBTableEv>:
    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const;

    virtual const uint16_t* getGSUBTable() const
    {
        return gsubTable;
    }
9000510c:	6a40      	ldr	r0, [r0, #36]	; 0x24
9000510e:	4770      	bx	lr

90005110 <_ZNK8touchgfx13GeneratedFont23getContextualFormsTableEv>:

    virtual const FontContextualFormsTable* getContextualFormsTable() const
    {
        return arabicTable;
    }
90005110:	6a80      	ldr	r0, [r0, #40]	; 0x28
90005112:	4770      	bx	lr

90005114 <_ZN8touchgfx13GeneratedFontD1Ev>:
class GeneratedFont : public ConstFont
90005114:	4770      	bx	lr
90005116:	bf00      	nop

90005118 <_ZNK8touchgfx13GeneratedFont12getPixelDataEPKNS_9GlyphNodeE>:
}

const uint8_t* GeneratedFont::getPixelData(const GlyphNode* glyph) const
{
    const uint8_t* const* table = (const uint8_t* const*)glyphData;
    return &(table[glyph->unicode / 2048][glyph->dataOffset]);
90005118:	888b      	ldrh	r3, [r1, #4]
9000511a:	69c0      	ldr	r0, [r0, #28]
9000511c:	0adb      	lsrs	r3, r3, #11
9000511e:	680a      	ldr	r2, [r1, #0]
90005120:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
}
90005124:	4410      	add	r0, r2
90005126:	4770      	bx	lr

90005128 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE>:

int8_t GeneratedFont::getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
{
    if (!glyph || glyph->kerningTableSize == 0)
90005128:	b1da      	cbz	r2, 90005162 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x3a>
{
9000512a:	b510      	push	{r4, lr}
    if (!glyph || glyph->kerningTableSize == 0)
9000512c:	7b14      	ldrb	r4, [r2, #12]
9000512e:	b1b4      	cbz	r4, 9000515e <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x36>
        return ((flags & GLYPH_DATA_KERNINGTABLEPOS_BIT8_10) << 8) | _kerningTablePos;
90005130:	f892 c00d 	ldrb.w	ip, [r2, #13]
90005134:	f892 e00b 	ldrb.w	lr, [r2, #11]
90005138:	ea4f 220c 	mov.w	r2, ip, lsl #8
    {
        return 0;
    }

    const KerningNode* kerndata = kerningData + glyph->kerningTablePos();
9000513c:	6a03      	ldr	r3, [r0, #32]
9000513e:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
90005142:	ea4e 0202 	orr.w	r2, lr, r2
90005146:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
9000514a:	eb03 0084 	add.w	r0, r3, r4, lsl #2
    {
        if (prevChar == kerndata->unicodePrevChar)
9000514e:	881a      	ldrh	r2, [r3, #0]
90005150:	428a      	cmp	r2, r1
90005152:	d008      	beq.n	90005166 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x3e>
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
90005154:	f103 0304 	add.w	r3, r3, #4
        {
            return kerndata->distance;
        }
        if (prevChar < kerndata->unicodePrevChar)
90005158:	d801      	bhi.n	9000515e <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x36>
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
9000515a:	4283      	cmp	r3, r0
9000515c:	d1f7      	bne.n	9000514e <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x26>
        return 0;
9000515e:	2000      	movs	r0, #0
        {
            break;
        }
    }
    return 0;
}
90005160:	bd10      	pop	{r4, pc}
        return 0;
90005162:	4610      	mov	r0, r2
}
90005164:	4770      	bx	lr
            return kerndata->distance;
90005166:	f993 0002 	ldrsb.w	r0, [r3, #2]
}
9000516a:	bd10      	pop	{r4, pc}

9000516c <_ZN8touchgfx13GeneratedFontD0Ev>:
9000516c:	b510      	push	{r4, lr}
9000516e:	4604      	mov	r4, r0
90005170:	212c      	movs	r1, #44	; 0x2c
90005172:	f01d fe36 	bl	90022de2 <_ZdlPvj>
90005176:	4620      	mov	r0, r4
90005178:	bd10      	pop	{r4, pc}
9000517a:	bf00      	nop

9000517c <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>:
GeneratedFont::GeneratedFont(const GlyphNode* glyphs, uint16_t numGlyphs, uint16_t height, uint16_t baseline, uint8_t pixAboveTop, uint8_t pixBelowBottom, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
9000517c:	b530      	push	{r4, r5, lr}
9000517e:	b08b      	sub	sp, #44	; 0x2c
90005180:	4604      	mov	r4, r0
90005182:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
      arabicTable(formsTable)
90005186:	9500      	str	r5, [sp, #0]
GeneratedFont::GeneratedFont(const GlyphNode* glyphs, uint16_t numGlyphs, uint16_t height, uint16_t baseline, uint8_t pixAboveTop, uint8_t pixBelowBottom, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
90005188:	f89d 503c 	ldrb.w	r5, [sp, #60]	; 0x3c
      arabicTable(formsTable)
9000518c:	9501      	str	r5, [sp, #4]
GeneratedFont::GeneratedFont(const GlyphNode* glyphs, uint16_t numGlyphs, uint16_t height, uint16_t baseline, uint8_t pixAboveTop, uint8_t pixBelowBottom, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
9000518e:	f89d 5040 	ldrb.w	r5, [sp, #64]	; 0x40
      arabicTable(formsTable)
90005192:	9502      	str	r5, [sp, #8]
GeneratedFont::GeneratedFont(const GlyphNode* glyphs, uint16_t numGlyphs, uint16_t height, uint16_t baseline, uint8_t pixAboveTop, uint8_t pixBelowBottom, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
90005194:	f89d 5044 	ldrb.w	r5, [sp, #68]	; 0x44
      arabicTable(formsTable)
90005198:	9503      	str	r5, [sp, #12]
GeneratedFont::GeneratedFont(const GlyphNode* glyphs, uint16_t numGlyphs, uint16_t height, uint16_t baseline, uint8_t pixAboveTop, uint8_t pixBelowBottom, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
9000519a:	f89d 5048 	ldrb.w	r5, [sp, #72]	; 0x48
      arabicTable(formsTable)
9000519e:	9504      	str	r5, [sp, #16]
GeneratedFont::GeneratedFont(const GlyphNode* glyphs, uint16_t numGlyphs, uint16_t height, uint16_t baseline, uint8_t pixAboveTop, uint8_t pixBelowBottom, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
900051a0:	f89d 504c 	ldrb.w	r5, [sp, #76]	; 0x4c
      arabicTable(formsTable)
900051a4:	9505      	str	r5, [sp, #20]
GeneratedFont::GeneratedFont(const GlyphNode* glyphs, uint16_t numGlyphs, uint16_t height, uint16_t baseline, uint8_t pixAboveTop, uint8_t pixBelowBottom, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
900051a6:	f89d 5050 	ldrb.w	r5, [sp, #80]	; 0x50
      arabicTable(formsTable)
900051aa:	9506      	str	r5, [sp, #24]
GeneratedFont::GeneratedFont(const GlyphNode* glyphs, uint16_t numGlyphs, uint16_t height, uint16_t baseline, uint8_t pixAboveTop, uint8_t pixBelowBottom, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
900051ac:	f8bd 505c 	ldrh.w	r5, [sp, #92]	; 0x5c
      arabicTable(formsTable)
900051b0:	9507      	str	r5, [sp, #28]
GeneratedFont::GeneratedFont(const GlyphNode* glyphs, uint16_t numGlyphs, uint16_t height, uint16_t baseline, uint8_t pixAboveTop, uint8_t pixBelowBottom, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
900051b2:	f8bd 5060 	ldrh.w	r5, [sp, #96]	; 0x60
      arabicTable(formsTable)
900051b6:	9508      	str	r5, [sp, #32]
900051b8:	f010 f90a 	bl	900153d0 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt>
      glyphData(glyphDataInternalFlash),
900051bc:	9b15      	ldr	r3, [sp, #84]	; 0x54
}
900051be:	4620      	mov	r0, r4
      glyphData(glyphDataInternalFlash),
900051c0:	61e3      	str	r3, [r4, #28]
      kerningData(kerningList),
900051c2:	9b16      	ldr	r3, [sp, #88]	; 0x58
900051c4:	6223      	str	r3, [r4, #32]
      gsubTable(gsubData),
900051c6:	9b19      	ldr	r3, [sp, #100]	; 0x64
900051c8:	6263      	str	r3, [r4, #36]	; 0x24
      arabicTable(formsTable)
900051ca:	9b1a      	ldr	r3, [sp, #104]	; 0x68
900051cc:	62a3      	str	r3, [r4, #40]	; 0x28
900051ce:	4b02      	ldr	r3, [pc, #8]	; (900051d8 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE+0x5c>)
900051d0:	6023      	str	r3, [r4, #0]
}
900051d2:	b00b      	add	sp, #44	; 0x2c
900051d4:	bd30      	pop	{r4, r5, pc}
900051d6:	bf00      	nop
900051d8:	90026004 	.word	0x90026004

900051dc <_ZN8touchgfx6Screen15afterTransitionEv>:
     *
     * @see Application::handleTickEvent
     */
    virtual void afterTransition()
    {
    }
900051dc:	4770      	bx	lr
900051de:	bf00      	nop

900051e0 <_ZN8touchgfx6Screen14tearDownScreenEv>:
     *
     * @see Application::switchScreen
     */
    virtual void tearDownScreen()
    {
    }
900051e0:	4770      	bx	lr
900051e2:	bf00      	nop

900051e4 <_ZN8touchgfx6Screen15handleTickEventEv>:
     * Called by the Application on the current screen with a frequency of
     * Application::TICK_INTERVAL_MS.
     */
    virtual void handleTickEvent()
    {
    }
900051e4:	4770      	bx	lr
900051e6:	bf00      	nop

900051e8 <_ZN8touchgfx6Screen14handleKeyEventEh>:
     * @param  key The key to handle.
     */
    virtual void handleKeyEvent(uint8_t key)
    {
        (void)key; // Unused variable
    }
900051e8:	4770      	bx	lr
900051ea:	bf00      	nop

900051ec <_ZN8touchgfx8TextArea8setWidthEs>:
    TextArea()
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE), boundingArea()
    {
    }

    virtual void setWidth(int16_t width)
900051ec:	b530      	push	{r4, r5, lr}
900051ee:	b085      	sub	sp, #20
900051f0:	460a      	mov	r2, r1
    {
        Widget::setWidth(width);
        boundingArea = calculateBoundingArea();
900051f2:	6803      	ldr	r3, [r0, #0]
    virtual void setWidth(int16_t width)
900051f4:	4604      	mov	r4, r0
        boundingArea = calculateBoundingArea();
900051f6:	466d      	mov	r5, sp
900051f8:	4601      	mov	r1, r0
        rect.width = width;
900051fa:	8102      	strh	r2, [r0, #8]
900051fc:	343c      	adds	r4, #60	; 0x3c
900051fe:	4628      	mov	r0, r5
90005200:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
90005204:	4798      	blx	r3
90005206:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
9000520a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    }
9000520e:	b005      	add	sp, #20
90005210:	bd30      	pop	{r4, r5, pc}
90005212:	bf00      	nop

90005214 <_ZN8touchgfx8TextArea9setHeightEs>:

    virtual void setHeight(int16_t height)
90005214:	b530      	push	{r4, r5, lr}
90005216:	b085      	sub	sp, #20
90005218:	460a      	mov	r2, r1
    {
        Widget::setHeight(height);
        boundingArea = calculateBoundingArea();
9000521a:	6803      	ldr	r3, [r0, #0]
    virtual void setHeight(int16_t height)
9000521c:	4604      	mov	r4, r0
        boundingArea = calculateBoundingArea();
9000521e:	466d      	mov	r5, sp
90005220:	4601      	mov	r1, r0
        rect.height = height;
90005222:	8142      	strh	r2, [r0, #10]
90005224:	343c      	adds	r4, #60	; 0x3c
90005226:	4628      	mov	r0, r5
90005228:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
9000522c:	4798      	blx	r3
9000522e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
90005232:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    }
90005236:	b005      	add	sp, #20
90005238:	bd30      	pop	{r4, r5, pc}
9000523a:	bf00      	nop

9000523c <_ZNK8touchgfx8TextArea12getSolidRectEv>:
9000523c:	2200      	movs	r2, #0
9000523e:	6002      	str	r2, [r0, #0]
90005240:	6042      	str	r2, [r0, #4]

    virtual Rect getSolidRect() const
    {
        return Rect();
    }
90005242:	4770      	bx	lr

90005244 <_ZN8touchgfx8TextArea8setAlphaEh>:
    /**
     * @copydoc Image::setAlpha
     */
    virtual void setAlpha(uint8_t newAlpha)
    {
        alpha = newAlpha;
90005244:	f880 1036 	strb.w	r1, [r0, #54]	; 0x36
    }
90005248:	4770      	bx	lr
9000524a:	bf00      	nop

9000524c <_ZNK8touchgfx8TextArea12getWildcard2Ev>:
     * @see TextAreaWithOneWildcard, TextAreaWithTwoWildcards
     */
    virtual const Unicode::UnicodeChar* getWildcard2() const
    {
        return 0;
    }
9000524c:	2000      	movs	r0, #0
9000524e:	4770      	bx	lr

90005250 <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv>:
        if (visible)
90005250:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
90005254:	b112      	cbz	r2, 9000525c <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv+0xc>
            invalidate();
90005256:	6803      	ldr	r3, [r0, #0]
90005258:	695b      	ldr	r3, [r3, #20]
9000525a:	4718      	bx	r3
    virtual void draw(const Rect& area) const;

    virtual void invalidateContent() const
    {
        Widget::invalidateContent();
    }
9000525c:	4770      	bx	lr
9000525e:	bf00      	nop

90005260 <_ZNK8touchgfx24TextAreaWithWildcardBase21calculateBoundingAreaEv>:
     * @param  rectY      The y coordinate.
     * @param  rectWidth  The width.
     * @param  rectHeight The height.
     */
    Rect(int16_t rectX, int16_t rectY, int16_t rectWidth, int16_t rectHeight)
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
90005260:	2200      	movs	r2, #0
90005262:	f04f 31ff 	mov.w	r1, #4294967295
        /**
         * Initializes a new instance of the BoundingArea class which is invalid by default.
         */
        BoundingArea()
            : rect(Rect(0, 0, -1, -1)), // Negative width and height means invalid rectangle
              text(0)
90005266:	6082      	str	r2, [r0, #8]
90005268:	e9c0 2100 	strd	r2, r1, [r0]

protected:
    virtual TextArea::BoundingArea calculateBoundingArea() const
    {
        return TextArea::BoundingArea();
    }
9000526c:	4770      	bx	lr
9000526e:	bf00      	nop

90005270 <_ZNK8touchgfx23TextAreaWithOneWildcard12getWildcard1Ev>:
    }

    virtual const Unicode::UnicodeChar* getWildcard1() const
    {
        return wc1;
    }
90005270:	6c80      	ldr	r0, [r0, #72]	; 0x48
90005272:	4770      	bx	lr

90005274 <_ZN15Screen1ViewBaseD1Ev>:
}

Screen1ViewBase::~Screen1ViewBase()
{

}
90005274:	4770      	bx	lr
90005276:	bf00      	nop

90005278 <_ZN15Screen1ViewBase11setupScreenEv>:

void Screen1ViewBase::setupScreen()
{

}
90005278:	4770      	bx	lr
9000527a:	bf00      	nop

9000527c <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>:
class TextAreaWithOneWildcard : public TextAreaWithWildcardBase
9000527c:	4770      	bx	lr
9000527e:	bf00      	nop

90005280 <_ZN8touchgfx23TextAreaWithOneWildcardD0Ev>:
90005280:	b510      	push	{r4, lr}
90005282:	4604      	mov	r4, r0
90005284:	214c      	movs	r1, #76	; 0x4c
90005286:	f01d fdac 	bl	90022de2 <_ZdlPvj>
9000528a:	4620      	mov	r0, r4
9000528c:	bd10      	pop	{r4, pc}
9000528e:	bf00      	nop

90005290 <_ZN15Screen1ViewBaseD0Ev>:
Screen1ViewBase::~Screen1ViewBase()
90005290:	b510      	push	{r4, lr}
90005292:	4604      	mov	r4, r0
}
90005294:	21ec      	movs	r1, #236	; 0xec
90005296:	f01d fda4 	bl	90022de2 <_ZdlPvj>
9000529a:	4620      	mov	r0, r4
9000529c:	bd10      	pop	{r4, pc}
9000529e:	bf00      	nop

900052a0 <_ZN8touchgfx8TextArea12setBaselineYEs>:
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
900052a0:	4b1b      	ldr	r3, [pc, #108]	; (90005310 <_ZN8touchgfx8TextArea12setBaselineYEs+0x70>)
        setY(baselineY - getTypedText().getFont()->getBaseline());
900052a2:	6802      	ldr	r2, [r0, #0]
900052a4:	681b      	ldr	r3, [r3, #0]
    virtual void setBaselineY(int16_t baselineY)
900052a6:	b570      	push	{r4, r5, r6, lr}
        setY(baselineY - getTypedText().getFont()->getBaseline());
900052a8:	6b55      	ldr	r5, [r2, #52]	; 0x34
900052aa:	b323      	cbz	r3, 900052f6 <_ZN8touchgfx8TextArea12setBaselineYEs+0x56>
900052ac:	b28e      	uxth	r6, r1
        return typedTextId < numberOfTypedTexts;
900052ae:	4919      	ldr	r1, [pc, #100]	; (90005314 <_ZN8touchgfx8TextArea12setBaselineYEs+0x74>)
900052b0:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
900052b2:	4604      	mov	r4, r0
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
900052b4:	8809      	ldrh	r1, [r1, #0]
900052b6:	4291      	cmp	r1, r2
900052b8:	d923      	bls.n	90005302 <_ZN8touchgfx8TextArea12setBaselineYEs+0x62>
        return fonts[typedTexts[typedTextId].fontIdx];
900052ba:	f813 2012 	ldrb.w	r2, [r3, r2, lsl #1]
900052be:	4b16      	ldr	r3, [pc, #88]	; (90005318 <_ZN8touchgfx8TextArea12setBaselineYEs+0x78>)
900052c0:	681b      	ldr	r3, [r3, #0]
900052c2:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
900052c6:	4a15      	ldr	r2, [pc, #84]	; (9000531c <_ZN8touchgfx8TextArea12setBaselineYEs+0x7c>)
900052c8:	6803      	ldr	r3, [r0, #0]
900052ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
900052cc:	4293      	cmp	r3, r2
900052ce:	d107      	bne.n	900052e0 <_ZN8touchgfx8TextArea12setBaselineYEs+0x40>
        return baselineHeight;
900052d0:	88c0      	ldrh	r0, [r0, #6]
900052d2:	4b13      	ldr	r3, [pc, #76]	; (90005320 <_ZN8touchgfx8TextArea12setBaselineYEs+0x80>)
900052d4:	1a31      	subs	r1, r6, r0
900052d6:	429d      	cmp	r5, r3
900052d8:	b209      	sxth	r1, r1
900052da:	d107      	bne.n	900052ec <_ZN8touchgfx8TextArea12setBaselineYEs+0x4c>
        rect.y = y;
900052dc:	80e1      	strh	r1, [r4, #6]
    }
900052de:	bd70      	pop	{r4, r5, r6, pc}
        setY(baselineY - getTypedText().getFont()->getBaseline());
900052e0:	4798      	blx	r3
900052e2:	4b0f      	ldr	r3, [pc, #60]	; (90005320 <_ZN8touchgfx8TextArea12setBaselineYEs+0x80>)
900052e4:	1a31      	subs	r1, r6, r0
900052e6:	429d      	cmp	r5, r3
900052e8:	b209      	sxth	r1, r1
900052ea:	d0f7      	beq.n	900052dc <_ZN8touchgfx8TextArea12setBaselineYEs+0x3c>
900052ec:	4620      	mov	r0, r4
900052ee:	462b      	mov	r3, r5
    }
900052f0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        setY(baselineY - getTypedText().getFont()->getBaseline());
900052f4:	4718      	bx	r3
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
900052f6:	4b0b      	ldr	r3, [pc, #44]	; (90005324 <_ZN8touchgfx8TextArea12setBaselineYEs+0x84>)
900052f8:	216c      	movs	r1, #108	; 0x6c
900052fa:	4a0b      	ldr	r2, [pc, #44]	; (90005328 <_ZN8touchgfx8TextArea12setBaselineYEs+0x88>)
900052fc:	480b      	ldr	r0, [pc, #44]	; (9000532c <_ZN8touchgfx8TextArea12setBaselineYEs+0x8c>)
900052fe:	f01d fd9f 	bl	90022e40 <__assert_func>
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
90005302:	4b0b      	ldr	r3, [pc, #44]	; (90005330 <_ZN8touchgfx8TextArea12setBaselineYEs+0x90>)
90005304:	216d      	movs	r1, #109	; 0x6d
90005306:	4a08      	ldr	r2, [pc, #32]	; (90005328 <_ZN8touchgfx8TextArea12setBaselineYEs+0x88>)
90005308:	4808      	ldr	r0, [pc, #32]	; (9000532c <_ZN8touchgfx8TextArea12setBaselineYEs+0x8c>)
9000530a:	f01d fd99 	bl	90022e40 <__assert_func>
9000530e:	bf00      	nop
90005310:	240262b4 	.word	0x240262b4
90005314:	240262b8 	.word	0x240262b8
90005318:	240262bc 	.word	0x240262bc
9000531c:	90004d55 	.word	0x90004d55
90005320:	900022b9 	.word	0x900022b9
90005324:	9002605c 	.word	0x9002605c
90005328:	900260a0 	.word	0x900260a0
9000532c:	900260dc 	.word	0x900260dc
90005330:	90026124 	.word	0x90026124

90005334 <_ZN8touchgfx8TextArea13setXBaselineYEss>:
        setX(x);
90005334:	6803      	ldr	r3, [r0, #0]
    virtual void setXBaselineY(int16_t x, int16_t baselineY)
90005336:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
9000533a:	4f25      	ldr	r7, [pc, #148]	; (900053d0 <_ZN8touchgfx8TextArea13setXBaselineYEss+0x9c>)
9000533c:	4605      	mov	r5, r0
        setX(x);
9000533e:	6b1e      	ldr	r6, [r3, #48]	; 0x30
    virtual void setXBaselineY(int16_t x, int16_t baselineY)
90005340:	4690      	mov	r8, r2
90005342:	42be      	cmp	r6, r7
90005344:	d125      	bne.n	90005392 <_ZN8touchgfx8TextArea13setXBaselineYEss+0x5e>
        setBaselineY(baselineY);
90005346:	6e5c      	ldr	r4, [r3, #100]	; 0x64
        rect.x = x;
90005348:	80a9      	strh	r1, [r5, #4]
9000534a:	4922      	ldr	r1, [pc, #136]	; (900053d4 <_ZN8touchgfx8TextArea13setXBaselineYEss+0xa0>)
9000534c:	428c      	cmp	r4, r1
9000534e:	d126      	bne.n	9000539e <_ZN8touchgfx8TextArea13setXBaselineYEss+0x6a>
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
90005350:	4921      	ldr	r1, [pc, #132]	; (900053d8 <_ZN8touchgfx8TextArea13setXBaselineYEss+0xa4>)
        setY(baselineY - getTypedText().getFont()->getBaseline());
90005352:	fa1f f888 	uxth.w	r8, r8
90005356:	6b5e      	ldr	r6, [r3, #52]	; 0x34
90005358:	680b      	ldr	r3, [r1, #0]
9000535a:	2b00      	cmp	r3, #0
9000535c:	d032      	beq.n	900053c4 <_ZN8touchgfx8TextArea13setXBaselineYEss+0x90>
        return typedTextId < numberOfTypedTexts;
9000535e:	491f      	ldr	r1, [pc, #124]	; (900053dc <_ZN8touchgfx8TextArea13setXBaselineYEss+0xa8>)
90005360:	8daa      	ldrh	r2, [r5, #44]	; 0x2c
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
90005362:	8809      	ldrh	r1, [r1, #0]
90005364:	4291      	cmp	r1, r2
90005366:	d927      	bls.n	900053b8 <_ZN8touchgfx8TextArea13setXBaselineYEss+0x84>
        return fonts[typedTexts[typedTextId].fontIdx];
90005368:	f813 2012 	ldrb.w	r2, [r3, r2, lsl #1]
9000536c:	4b1c      	ldr	r3, [pc, #112]	; (900053e0 <_ZN8touchgfx8TextArea13setXBaselineYEss+0xac>)
9000536e:	681b      	ldr	r3, [r3, #0]
90005370:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
90005374:	4a1b      	ldr	r2, [pc, #108]	; (900053e4 <_ZN8touchgfx8TextArea13setXBaselineYEss+0xb0>)
90005376:	6803      	ldr	r3, [r0, #0]
90005378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
9000537a:	4293      	cmp	r3, r2
9000537c:	d11a      	bne.n	900053b4 <_ZN8touchgfx8TextArea13setXBaselineYEss+0x80>
9000537e:	88c0      	ldrh	r0, [r0, #6]
90005380:	4b19      	ldr	r3, [pc, #100]	; (900053e8 <_ZN8touchgfx8TextArea13setXBaselineYEss+0xb4>)
90005382:	eba8 0200 	sub.w	r2, r8, r0
90005386:	429e      	cmp	r6, r3
90005388:	b211      	sxth	r1, r2
9000538a:	d10e      	bne.n	900053aa <_ZN8touchgfx8TextArea13setXBaselineYEss+0x76>
        rect.y = y;
9000538c:	80e9      	strh	r1, [r5, #6]
    }
9000538e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        setX(x);
90005392:	47b0      	blx	r6
        setBaselineY(baselineY);
90005394:	682b      	ldr	r3, [r5, #0]
90005396:	490f      	ldr	r1, [pc, #60]	; (900053d4 <_ZN8touchgfx8TextArea13setXBaselineYEss+0xa0>)
90005398:	6e5c      	ldr	r4, [r3, #100]	; 0x64
9000539a:	428c      	cmp	r4, r1
9000539c:	d0d8      	beq.n	90005350 <_ZN8touchgfx8TextArea13setXBaselineYEss+0x1c>
9000539e:	4641      	mov	r1, r8
900053a0:	4628      	mov	r0, r5
900053a2:	4623      	mov	r3, r4
    }
900053a4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        setBaselineY(baselineY);
900053a8:	4718      	bx	r3
        setY(baselineY - getTypedText().getFont()->getBaseline());
900053aa:	4628      	mov	r0, r5
900053ac:	4633      	mov	r3, r6
    }
900053ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        setY(baselineY - getTypedText().getFont()->getBaseline());
900053b2:	4718      	bx	r3
900053b4:	4798      	blx	r3
900053b6:	e7e3      	b.n	90005380 <_ZN8touchgfx8TextArea13setXBaselineYEss+0x4c>
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
900053b8:	4b0c      	ldr	r3, [pc, #48]	; (900053ec <_ZN8touchgfx8TextArea13setXBaselineYEss+0xb8>)
900053ba:	216d      	movs	r1, #109	; 0x6d
900053bc:	4a0c      	ldr	r2, [pc, #48]	; (900053f0 <_ZN8touchgfx8TextArea13setXBaselineYEss+0xbc>)
900053be:	480d      	ldr	r0, [pc, #52]	; (900053f4 <_ZN8touchgfx8TextArea13setXBaselineYEss+0xc0>)
900053c0:	f01d fd3e 	bl	90022e40 <__assert_func>
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
900053c4:	4b0c      	ldr	r3, [pc, #48]	; (900053f8 <_ZN8touchgfx8TextArea13setXBaselineYEss+0xc4>)
900053c6:	216c      	movs	r1, #108	; 0x6c
900053c8:	4a09      	ldr	r2, [pc, #36]	; (900053f0 <_ZN8touchgfx8TextArea13setXBaselineYEss+0xbc>)
900053ca:	480a      	ldr	r0, [pc, #40]	; (900053f4 <_ZN8touchgfx8TextArea13setXBaselineYEss+0xc0>)
900053cc:	f01d fd38 	bl	90022e40 <__assert_func>
900053d0:	900022b5 	.word	0x900022b5
900053d4:	900052a1 	.word	0x900052a1
900053d8:	240262b4 	.word	0x240262b4
900053dc:	240262b8 	.word	0x240262b8
900053e0:	240262bc 	.word	0x240262bc
900053e4:	90004d55 	.word	0x90004d55
900053e8:	900022b9 	.word	0x900022b9
900053ec:	90026124 	.word	0x90026124
900053f0:	900260a0 	.word	0x900260a0
900053f4:	900260dc 	.word	0x900260dc
900053f8:	9002605c 	.word	0x9002605c

900053fc <_ZN15Screen1ViewBaseC1Ev>:
Screen1ViewBase::Screen1ViewBase()
900053fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
90005400:	b086      	sub	sp, #24
90005402:	4604      	mov	r4, r0
        : presenter(0)
90005404:	f010 f9e0 	bl	900157c8 <_ZN8touchgfx6ScreenC1Ev>
class Box : public Widget
{
public:
    /** Construct a new Box with a default alpha value of 255 (solid) */
    Box()
        : Widget(), alpha(255), color(0)
90005408:	4b5e      	ldr	r3, [pc, #376]	; (90005584 <_ZN15Screen1ViewBaseC1Ev+0x188>)
9000540a:	2500      	movs	r5, #0
9000540c:	4a5e      	ldr	r2, [pc, #376]	; (90005588 <_ZN15Screen1ViewBaseC1Ev+0x18c>)
     * array.
     *
     * @param  id (Optional) The unique bitmap identifier.
     */
    Bitmap(const BitmapId id = BITMAP_INVALID)
        : bitmapId(id)
9000540e:	f64f 76ff 	movw	r6, #65535	; 0xffff
          touchable(false),
90005412:	f44f 7880 	mov.w	r8, #256	; 0x100
90005416:	f104 076c 	add.w	r7, r4, #108	; 0x6c
9000541a:	f04f 09ff 	mov.w	r9, #255	; 0xff
9000541e:	6423      	str	r3, [r4, #64]	; 0x40
     * @see setBitmap
     */
    Image(const Bitmap& bmp = Bitmap())
        : Widget(), bitmap(bmp), alpha(255)
    {
        Image::setBitmap(bmp);
90005420:	a904      	add	r1, sp, #16
        : Widget(), bitmap(bmp), alpha(255)
90005422:	4b5a      	ldr	r3, [pc, #360]	; (9000558c <_ZN15Screen1ViewBaseC1Ev+0x190>)
        Image::setBitmap(bmp);
90005424:	4638      	mov	r0, r7
90005426:	6022      	str	r2, [r4, #0]
90005428:	f04f 3aff 	mov.w	sl, #4294967295
9000542c:	f8a4 8064 	strh.w	r8, [r4, #100]	; 0x64
90005430:	f884 9066 	strb.w	r9, [r4, #102]	; 0x66
90005434:	f8a4 8090 	strh.w	r8, [r4, #144]	; 0x90
        : Widget(), bitmap(bmp), alpha(255)
90005438:	f8a4 6092 	strh.w	r6, [r4, #146]	; 0x92
9000543c:	f884 6094 	strb.w	r6, [r4, #148]	; 0x94
90005440:	66e3      	str	r3, [r4, #108]	; 0x6c
90005442:	63e5      	str	r5, [r4, #60]	; 0x3c
        : x(0), y(0), width(0), height(0)
90005444:	6465      	str	r5, [r4, #68]	; 0x44
          cachedAbsX(0),
90005446:	6625      	str	r5, [r4, #96]	; 0x60
        : color(col)
90005448:	66a5      	str	r5, [r4, #104]	; 0x68
9000544a:	f8ad 6010 	strh.w	r6, [sp, #16]
        : x(0), y(0), width(0), height(0)
9000544e:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
          parent(0),
90005452:	e9c4 5514 	strd	r5, r5, [r4, #80]	; 0x50
          nextDrawChainElement(0),
90005456:	e9c4 5516 	strd	r5, r5, [r4, #88]	; 0x58
9000545a:	e9c4 551c 	strd	r5, r5, [r4, #112]	; 0x70
9000545e:	e9c4 551e 	strd	r5, r5, [r4, #120]	; 0x78
          nextSibling(0),
90005462:	e9c4 5520 	strd	r5, r5, [r4, #128]	; 0x80
          cachedAbsX(0),
90005466:	e9c4 5522 	strd	r5, r5, [r4, #136]	; 0x88
        Image::setBitmap(bmp);
9000546a:	f00d f992 	bl	90012792 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
        : TextAreaWithWildcardBase(), wc1(0)
9000546e:	4b48      	ldr	r3, [pc, #288]	; (90005590 <_ZN15Screen1ViewBaseC1Ev+0x194>)
          touchable(false),
90005470:	f8a4 80bc 	strh.w	r8, [r4, #188]	; 0xbc
     * @note Must not be called with a Drawable that was already added to the screen. If in doubt,
     *       call remove() first.
     */
    void add(Drawable& d)
    {
        container.add(d);
90005474:	f104 0804 	add.w	r8, r4, #4
        : typedTextId(id)
90005478:	f8a4 60c4 	strh.w	r6, [r4, #196]	; 0xc4
     *
     * @see getColor, Color::getColorFromRGB
     */
    void setColor(colortype newColor)
    {
        color = newColor;
9000547c:	f04f 467f 	mov.w	r6, #4278190080	; 0xff000000
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE), boundingArea()
90005480:	f8c4 90ce 	str.w	r9, [r4, #206]	; 0xce
90005484:	f104 0140 	add.w	r1, r4, #64	; 0x40
90005488:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
9000548c:	4640      	mov	r0, r8
        rect.x = x;
9000548e:	4b41      	ldr	r3, [pc, #260]	; (90005594 <_ZN15Screen1ViewBaseC1Ev+0x198>)
90005490:	f8df 912c 	ldr.w	r9, [pc, #300]	; 900055c0 <_ZN15Screen1ViewBaseC1Ev+0x1c4>
90005494:	64a3      	str	r3, [r4, #72]	; 0x48
90005496:	66a6      	str	r6, [r4, #104]	; 0x68
        : color(col)
90005498:	f8c4 50c8 	str.w	r5, [r4, #200]	; 0xc8
9000549c:	f8a4 50cc 	strh.w	r5, [r4, #204]	; 0xcc
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
900054a0:	f8c4 50d4 	str.w	r5, [r4, #212]	; 0xd4
900054a4:	f8c4 a0d8 	str.w	sl, [r4, #216]	; 0xd8
900054a8:	6465      	str	r5, [r4, #68]	; 0x44
900054aa:	f8c4 90c0 	str.w	r9, [r4, #192]	; 0xc0
        : x(0), y(0), width(0), height(0)
900054ae:	e9c4 5527 	strd	r5, r5, [r4, #156]	; 0x9c
900054b2:	e9c4 5529 	strd	r5, r5, [r4, #164]	; 0xa4
          nextSibling(0),
900054b6:	e9c4 552b 	strd	r5, r5, [r4, #172]	; 0xac
          cachedAbsX(0),
900054ba:	e9c4 552d 	strd	r5, r5, [r4, #180]	; 0xb4
900054be:	e9c4 5537 	strd	r5, r5, [r4, #220]	; 0xdc
900054c2:	f00b fe03 	bl	900110cc <_ZN8touchgfx9Container3addERNS_8DrawableE>
    image1.setBitmap(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_BACKGROUNDS_480X272_RAYS_ID));
900054c6:	a904      	add	r1, sp, #16
900054c8:	4638      	mov	r0, r7
        rect.x = x;
900054ca:	6725      	str	r5, [r4, #112]	; 0x70
900054cc:	f8ad 5010 	strh.w	r5, [sp, #16]
900054d0:	f00d f95f 	bl	90012792 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
900054d4:	4639      	mov	r1, r7
900054d6:	4640      	mov	r0, r8
900054d8:	f00b fdf8 	bl	900110cc <_ZN8touchgfx9Container3addERNS_8DrawableE>
900054dc:	4a2e      	ldr	r2, [pc, #184]	; (90005598 <_ZN15Screen1ViewBaseC1Ev+0x19c>)
        setX(x);
900054de:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
        color = newColor;
900054e2:	f8c4 60c8 	str.w	r6, [r4, #200]	; 0xc8
    textArea1.setXY(161, 124);
900054e6:	f104 0698 	add.w	r6, r4, #152	; 0x98
        boundingArea = calculateBoundingArea();
900054ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
        rect.x = x;
900054ee:	f8c4 209c 	str.w	r2, [r4, #156]	; 0x9c
900054f2:	4a2a      	ldr	r2, [pc, #168]	; (9000559c <_ZN15Screen1ViewBaseC1Ev+0x1a0>)
        linespace = space;
900054f4:	f8a4 50cc 	strh.w	r5, [r4, #204]	; 0xcc
900054f8:	4293      	cmp	r3, r2
900054fa:	d12c      	bne.n	90005556 <_ZN15Screen1ViewBaseC1Ev+0x15a>
        boundingArea = calculateBoundingArea();
900054fc:	f8c4 50dc 	str.w	r5, [r4, #220]	; 0xdc
90005500:	e9c4 5a35 	strd	r5, sl, [r4, #212]	; 0xd4
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
90005504:	4b26      	ldr	r3, [pc, #152]	; (900055a0 <_ZN15Screen1ViewBaseC1Ev+0x1a4>)
    Unicode::snprintf(textArea1Buffer, TEXTAREA1_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_1MEA).getText());
90005506:	f104 05e4 	add.w	r5, r4, #228	; 0xe4
9000550a:	681b      	ldr	r3, [r3, #0]
9000550c:	b3a3      	cbz	r3, 90005578 <_ZN15Screen1ViewBaseC1Ev+0x17c>
        return typedTextId < numberOfTypedTexts;
9000550e:	4b25      	ldr	r3, [pc, #148]	; (900055a4 <_ZN15Screen1ViewBaseC1Ev+0x1a8>)
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
90005510:	881b      	ldrh	r3, [r3, #0]
90005512:	b35b      	cbz	r3, 9000556c <_ZN15Screen1ViewBaseC1Ev+0x170>
        return texts->getText(typedTextId);
90005514:	4b24      	ldr	r3, [pc, #144]	; (900055a8 <_ZN15Screen1ViewBaseC1Ev+0x1ac>)
90005516:	2100      	movs	r1, #0
90005518:	6818      	ldr	r0, [r3, #0]
9000551a:	f000 f9d9 	bl	900058d0 <_ZNK8touchgfx5Texts7getTextEt>
9000551e:	4a23      	ldr	r2, [pc, #140]	; (900055ac <_ZN15Screen1ViewBaseC1Ev+0x1b0>)
90005520:	4603      	mov	r3, r0
90005522:	2104      	movs	r1, #4
90005524:	4628      	mov	r0, r5
90005526:	f011 fdc1 	bl	900170ac <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    textArea1.resizeToCurrentText();
9000552a:	4630      	mov	r0, r6
        wc1 = value;
9000552c:	f8c4 50e0 	str.w	r5, [r4, #224]	; 0xe0
90005530:	f00d f848 	bl	900125c4 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
        : typedTextId(id)
90005534:	2301      	movs	r3, #1
    textArea1.setTypedText(touchgfx::TypedText(T___SINGLEUSE_9J1Y));
90005536:	a904      	add	r1, sp, #16
90005538:	4630      	mov	r0, r6
9000553a:	f8ad 3014 	strh.w	r3, [sp, #20]
9000553e:	f8cd 9010 	str.w	r9, [sp, #16]
90005542:	f00d f85f 	bl	90012604 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
90005546:	4640      	mov	r0, r8
90005548:	4631      	mov	r1, r6
9000554a:	f00b fdbf 	bl	900110cc <_ZN8touchgfx9Container3addERNS_8DrawableE>
}
9000554e:	4620      	mov	r0, r4
90005550:	b006      	add	sp, #24
90005552:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
90005556:	466d      	mov	r5, sp
90005558:	4631      	mov	r1, r6
9000555a:	4628      	mov	r0, r5
9000555c:	4798      	blx	r3
9000555e:	f104 03d4 	add.w	r3, r4, #212	; 0xd4
90005562:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
90005566:	e883 0007 	stmia.w	r3, {r0, r1, r2}
9000556a:	e7cb      	b.n	90005504 <_ZN15Screen1ViewBaseC1Ev+0x108>
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
9000556c:	4b10      	ldr	r3, [pc, #64]	; (900055b0 <_ZN15Screen1ViewBaseC1Ev+0x1b4>)
9000556e:	2161      	movs	r1, #97	; 0x61
90005570:	4a10      	ldr	r2, [pc, #64]	; (900055b4 <_ZN15Screen1ViewBaseC1Ev+0x1b8>)
90005572:	4811      	ldr	r0, [pc, #68]	; (900055b8 <_ZN15Screen1ViewBaseC1Ev+0x1bc>)
90005574:	f01d fc64 	bl	90022e40 <__assert_func>
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
90005578:	4b10      	ldr	r3, [pc, #64]	; (900055bc <_ZN15Screen1ViewBaseC1Ev+0x1c0>)
9000557a:	2160      	movs	r1, #96	; 0x60
9000557c:	4a0d      	ldr	r2, [pc, #52]	; (900055b4 <_ZN15Screen1ViewBaseC1Ev+0x1b8>)
9000557e:	480e      	ldr	r0, [pc, #56]	; (900055b8 <_ZN15Screen1ViewBaseC1Ev+0x1bc>)
90005580:	f01d fc5e 	bl	90022e40 <__assert_func>
90005584:	90026b9c 	.word	0x90026b9c
90005588:	90026238 	.word	0x90026238
9000558c:	90026c04 	.word	0x90026c04
90005590:	900261a8 	.word	0x900261a8
90005594:	011001e0 	.word	0x011001e0
90005598:	007c00a1 	.word	0x007c00a1
9000559c:	90005261 	.word	0x90005261
900055a0:	240262b4 	.word	0x240262b4
900055a4:	240262b8 	.word	0x240262b8
900055a8:	240262c0 	.word	0x240262c0
900055ac:	9002619c 	.word	0x9002619c
900055b0:	90026124 	.word	0x90026124
900055b4:	90026164 	.word	0x90026164
900055b8:	900260dc 	.word	0x900260dc
900055bc:	9002605c 	.word	0x9002605c
900055c0:	90025c48 	.word	0x90025c48

900055c4 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_10_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_10_4bpp();

touchgfx::GeneratedFont& getFont_verdana_10_4bpp()
{
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 10, 0, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
900055c4:	4770      	bx	lr
900055c6:	bf00      	nop

900055c8 <_Z23getFont_verdana_10_4bppv>:
{
900055c8:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 10, 0, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
900055ca:	4d18      	ldr	r5, [pc, #96]	; (9000562c <_Z23getFont_verdana_10_4bppv+0x64>)
{
900055cc:	b08f      	sub	sp, #60	; 0x3c
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 10, 0, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
900055ce:	682c      	ldr	r4, [r5, #0]
900055d0:	f3bf 8f5b 	dmb	ish
900055d4:	f014 0401 	ands.w	r4, r4, #1
900055d8:	d002      	beq.n	900055e0 <_Z23getFont_verdana_10_4bppv+0x18>
    return verdana_10_4bpp;
}
900055da:	4815      	ldr	r0, [pc, #84]	; (90005630 <_Z23getFont_verdana_10_4bppv+0x68>)
900055dc:	b00f      	add	sp, #60	; 0x3c
900055de:	bd30      	pop	{r4, r5, pc}
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 10, 0, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
900055e0:	4628      	mov	r0, r5
900055e2:	f01d fc00 	bl	90022de6 <__cxa_guard_acquire>
900055e6:	2800      	cmp	r0, #0
900055e8:	d0f7      	beq.n	900055da <_Z23getFont_verdana_10_4bppv+0x12>
900055ea:	213f      	movs	r1, #63	; 0x3f
900055ec:	2201      	movs	r2, #1
900055ee:	230a      	movs	r3, #10
900055f0:	2004      	movs	r0, #4
900055f2:	9204      	str	r2, [sp, #16]
900055f4:	9300      	str	r3, [sp, #0]
900055f6:	9003      	str	r0, [sp, #12]
900055f8:	480d      	ldr	r0, [pc, #52]	; (90005630 <_Z23getFont_verdana_10_4bppv+0x68>)
900055fa:	e9cd 1409 	strd	r1, r4, [sp, #36]	; 0x24
900055fe:	490d      	ldr	r1, [pc, #52]	; (90005634 <_Z23getFont_verdana_10_4bppv+0x6c>)
90005600:	9108      	str	r1, [sp, #32]
90005602:	490d      	ldr	r1, [pc, #52]	; (90005638 <_Z23getFont_verdana_10_4bppv+0x70>)
90005604:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
90005608:	9107      	str	r1, [sp, #28]
9000560a:	490c      	ldr	r1, [pc, #48]	; (9000563c <_Z23getFont_verdana_10_4bppv+0x74>)
9000560c:	e9cd 4405 	strd	r4, r4, [sp, #20]
90005610:	e9cd 4401 	strd	r4, r4, [sp, #4]
90005614:	f7ff fdb2 	bl	9000517c <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
90005618:	4809      	ldr	r0, [pc, #36]	; (90005640 <_Z23getFont_verdana_10_4bppv+0x78>)
9000561a:	f01d fc2f 	bl	90022e7c <atexit>
9000561e:	4628      	mov	r0, r5
90005620:	f01d fbed 	bl	90022dfe <__cxa_guard_release>
}
90005624:	4802      	ldr	r0, [pc, #8]	; (90005630 <_Z23getFont_verdana_10_4bppv+0x68>)
90005626:	b00f      	add	sp, #60	; 0x3c
90005628:	bd30      	pop	{r4, r5, pc}
9000562a:	bf00      	nop
9000562c:	2400b168 	.word	0x2400b168
90005630:	2400b16c 	.word	0x2400b16c
90005634:	90027080 	.word	0x90027080
90005638:	9002722c 	.word	0x9002722c
9000563c:	90201c10 	.word	0x90201c10
90005640:	900055c5 	.word	0x900055c5

90005644 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_20_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_20_4bpp();

touchgfx::GeneratedFont& getFont_verdana_20_4bpp()
{
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 95, 24, 20, 0, 0, 4, 1, 1, 1, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
90005644:	4770      	bx	lr
90005646:	bf00      	nop

90005648 <_Z23getFont_verdana_20_4bppv>:
{
90005648:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 95, 24, 20, 0, 0, 4, 1, 1, 1, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
9000564a:	4d19      	ldr	r5, [pc, #100]	; (900056b0 <_Z23getFont_verdana_20_4bppv+0x68>)
{
9000564c:	b08f      	sub	sp, #60	; 0x3c
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 95, 24, 20, 0, 0, 4, 1, 1, 1, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
9000564e:	682c      	ldr	r4, [r5, #0]
90005650:	f3bf 8f5b 	dmb	ish
90005654:	f014 0401 	ands.w	r4, r4, #1
90005658:	d002      	beq.n	90005660 <_Z23getFont_verdana_20_4bppv+0x18>
    return verdana_20_4bpp;
}
9000565a:	4816      	ldr	r0, [pc, #88]	; (900056b4 <_Z23getFont_verdana_20_4bppv+0x6c>)
9000565c:	b00f      	add	sp, #60	; 0x3c
9000565e:	bd30      	pop	{r4, r5, pc}
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 95, 24, 20, 0, 0, 4, 1, 1, 1, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
90005660:	4628      	mov	r0, r5
90005662:	f01d fbc0 	bl	90022de6 <__cxa_guard_acquire>
90005666:	2800      	cmp	r0, #0
90005668:	d0f7      	beq.n	9000565a <_Z23getFont_verdana_20_4bppv+0x12>
9000566a:	213f      	movs	r1, #63	; 0x3f
9000566c:	4a12      	ldr	r2, [pc, #72]	; (900056b8 <_Z23getFont_verdana_20_4bppv+0x70>)
9000566e:	2301      	movs	r3, #1
90005670:	2014      	movs	r0, #20
90005672:	9208      	str	r2, [sp, #32]
90005674:	2204      	movs	r2, #4
90005676:	9304      	str	r3, [sp, #16]
90005678:	9000      	str	r0, [sp, #0]
9000567a:	9401      	str	r4, [sp, #4]
9000567c:	480d      	ldr	r0, [pc, #52]	; (900056b4 <_Z23getFont_verdana_20_4bppv+0x6c>)
9000567e:	e9cd 1409 	strd	r1, r4, [sp, #36]	; 0x24
90005682:	490e      	ldr	r1, [pc, #56]	; (900056bc <_Z23getFont_verdana_20_4bppv+0x74>)
90005684:	e9cd 3305 	strd	r3, r3, [sp, #20]
90005688:	9107      	str	r1, [sp, #28]
9000568a:	2318      	movs	r3, #24
9000568c:	490c      	ldr	r1, [pc, #48]	; (900056c0 <_Z23getFont_verdana_20_4bppv+0x78>)
9000568e:	e9cd 4202 	strd	r4, r2, [sp, #8]
90005692:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
90005696:	225f      	movs	r2, #95	; 0x5f
90005698:	f7ff fd70 	bl	9000517c <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
9000569c:	4809      	ldr	r0, [pc, #36]	; (900056c4 <_Z23getFont_verdana_20_4bppv+0x7c>)
9000569e:	f01d fbed 	bl	90022e7c <atexit>
900056a2:	4628      	mov	r0, r5
900056a4:	f01d fbab 	bl	90022dfe <__cxa_guard_release>
}
900056a8:	4802      	ldr	r0, [pc, #8]	; (900056b4 <_Z23getFont_verdana_20_4bppv+0x6c>)
900056aa:	b00f      	add	sp, #60	; 0x3c
900056ac:	bd30      	pop	{r4, r5, pc}
900056ae:	bf00      	nop
900056b0:	2400b198 	.word	0x2400b198
900056b4:	2400b19c 	.word	0x2400b19c
900056b8:	90027084 	.word	0x90027084
900056bc:	90027230 	.word	0x90027230
900056c0:	90201c20 	.word	0x90201c20
900056c4:	90005645 	.word	0x90005645

900056c8 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_40_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_40_4bpp();

touchgfx::GeneratedFont& getFont_verdana_40_4bpp()
{
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 40, 0, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
900056c8:	4770      	bx	lr
900056ca:	bf00      	nop

900056cc <_Z23getFont_verdana_40_4bppv>:
{
900056cc:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 40, 0, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
900056ce:	4d18      	ldr	r5, [pc, #96]	; (90005730 <_Z23getFont_verdana_40_4bppv+0x64>)
{
900056d0:	b08f      	sub	sp, #60	; 0x3c
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 40, 0, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
900056d2:	682c      	ldr	r4, [r5, #0]
900056d4:	f3bf 8f5b 	dmb	ish
900056d8:	f014 0401 	ands.w	r4, r4, #1
900056dc:	d002      	beq.n	900056e4 <_Z23getFont_verdana_40_4bppv+0x18>
    return verdana_40_4bpp;
}
900056de:	4815      	ldr	r0, [pc, #84]	; (90005734 <_Z23getFont_verdana_40_4bppv+0x68>)
900056e0:	b00f      	add	sp, #60	; 0x3c
900056e2:	bd30      	pop	{r4, r5, pc}
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 40, 0, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
900056e4:	4628      	mov	r0, r5
900056e6:	f01d fb7e 	bl	90022de6 <__cxa_guard_acquire>
900056ea:	2800      	cmp	r0, #0
900056ec:	d0f7      	beq.n	900056de <_Z23getFont_verdana_40_4bppv+0x12>
900056ee:	213f      	movs	r1, #63	; 0x3f
900056f0:	2201      	movs	r2, #1
900056f2:	2328      	movs	r3, #40	; 0x28
900056f4:	2004      	movs	r0, #4
900056f6:	9204      	str	r2, [sp, #16]
900056f8:	9300      	str	r3, [sp, #0]
900056fa:	9003      	str	r0, [sp, #12]
900056fc:	480d      	ldr	r0, [pc, #52]	; (90005734 <_Z23getFont_verdana_40_4bppv+0x68>)
900056fe:	e9cd 1409 	strd	r1, r4, [sp, #36]	; 0x24
90005702:	490d      	ldr	r1, [pc, #52]	; (90005738 <_Z23getFont_verdana_40_4bppv+0x6c>)
90005704:	9108      	str	r1, [sp, #32]
90005706:	490d      	ldr	r1, [pc, #52]	; (9000573c <_Z23getFont_verdana_40_4bppv+0x70>)
90005708:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
9000570c:	9107      	str	r1, [sp, #28]
9000570e:	490c      	ldr	r1, [pc, #48]	; (90005740 <_Z23getFont_verdana_40_4bppv+0x74>)
90005710:	e9cd 4405 	strd	r4, r4, [sp, #20]
90005714:	e9cd 4401 	strd	r4, r4, [sp, #4]
90005718:	f7ff fd30 	bl	9000517c <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
9000571c:	4809      	ldr	r0, [pc, #36]	; (90005744 <_Z23getFont_verdana_40_4bppv+0x78>)
9000571e:	f01d fbad 	bl	90022e7c <atexit>
90005722:	4628      	mov	r0, r5
90005724:	f01d fb6b 	bl	90022dfe <__cxa_guard_release>
}
90005728:	4802      	ldr	r0, [pc, #8]	; (90005734 <_Z23getFont_verdana_40_4bppv+0x68>)
9000572a:	b00f      	add	sp, #60	; 0x3c
9000572c:	bd30      	pop	{r4, r5, pc}
9000572e:	bf00      	nop
90005730:	2400b1c8 	.word	0x2400b1c8
90005734:	2400b1cc 	.word	0x2400b1cc
90005738:	90027228 	.word	0x90027228
9000573c:	90027234 	.word	0x90027234
90005740:	90202154 	.word	0x90202154
90005744:	900056c9 	.word	0x900056c9

90005748 <_ZNK8touchgfx4Font12getGSUBTableEv>:
     * @return The GSUB table or null if font has GSUB no table.
     */
    virtual const uint16_t* getGSUBTable() const
    {
        return 0;
    }
90005748:	2000      	movs	r0, #0
9000574a:	4770      	bx	lr

9000574c <_ZNK8touchgfx4Font23getContextualFormsTableEv>:
     * @return The FontContextualFormsTable or null if the font has no table.
     */
    virtual const FontContextualFormsTable* getContextualFormsTable() const
    {
        return 0;
    }
9000574c:	2000      	movs	r0, #0
9000574e:	4770      	bx	lr

90005750 <_ZNK8touchgfx4Font14getStringWidthEPKtz>:
#include <touchgfx/hal/HAL.hpp>
#include <touchgfx/lcd/LCD.hpp>
#include <texts/TypedTextDatabase.hpp>

uint16_t touchgfx::Font::getStringWidth(const touchgfx::Unicode::UnicodeChar* text, ...) const
{
90005750:	b40e      	push	{r1, r2, r3}
90005752:	b500      	push	{lr}
90005754:	b082      	sub	sp, #8
    va_list pArg;
    va_start(pArg, text);
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
90005756:	2100      	movs	r1, #0
{
90005758:	ab03      	add	r3, sp, #12
9000575a:	f853 2b04 	ldr.w	r2, [r3], #4
    va_start(pArg, text);
9000575e:	9301      	str	r3, [sp, #4]
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
90005760:	f00f fc5e 	bl	90015020 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
    va_end(pArg);
    return width;
}
90005764:	b002      	add	sp, #8
90005766:	f85d eb04 	ldr.w	lr, [sp], #4
9000576a:	b003      	add	sp, #12
9000576c:	4770      	bx	lr
9000576e:	bf00      	nop

90005770 <_ZNK8touchgfx4Font14getStringWidthEhPKtz>:

uint16_t touchgfx::Font::getStringWidth(touchgfx::TextDirection textDirection, const touchgfx::Unicode::UnicodeChar* text, ...) const
{
90005770:	b40c      	push	{r2, r3}
90005772:	b500      	push	{lr}
90005774:	b083      	sub	sp, #12
90005776:	ab04      	add	r3, sp, #16
90005778:	f853 2b04 	ldr.w	r2, [r3], #4
    va_list pArg;
    va_start(pArg, text);
9000577c:	9301      	str	r3, [sp, #4]
    uint16_t width = getStringWidthLTR(textDirection, text, pArg);
9000577e:	f00f fc4f 	bl	90015020 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
    va_end(pArg);
    return width;
}
90005782:	b003      	add	sp, #12
90005784:	f85d eb04 	ldr.w	lr, [sp], #4
90005788:	b002      	add	sp, #8
9000578a:	4770      	bx	lr

9000578c <_ZN8touchgfx12TextProvider15getNextLigatureEh>:

touchgfx::Unicode::UnicodeChar touchgfx::TextProvider::getNextLigature(TextDirection direction)
{
    if (fontGsubTable && nextCharacters.peekChar())
9000578c:	6c43      	ldr	r3, [r0, #68]	; 0x44
{
9000578e:	b510      	push	{r4, lr}
90005790:	4604      	mov	r4, r0
    if (fontGsubTable && nextCharacters.peekChar())
90005792:	b133      	cbz	r3, 900057a2 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x16>
            return used == size;
        }

        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
        {
            assert(used > 0);
90005794:	8f03      	ldrh	r3, [r0, #56]	; 0x38
90005796:	b39b      	cbz	r3, 90005800 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x74>
            return buffer[pos];
90005798:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
9000579a:	eb00 0343 	add.w	r3, r0, r3, lsl #1
9000579e:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
900057a0:	b923      	cbnz	r3, 900057ac <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x20>
        {
            nextCharacters.replaceAt1(nextCharacters.peekChar());
            nextCharacters.replaceAt0(0x093F);
        }
    }
    return getNextChar();
900057a2:	4620      	mov	r0, r4
}
900057a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return getNextChar();
900057a8:	f010 bdd4 	b.w	90016354 <_ZN8touchgfx12TextProvider11getNextCharEv>
        substituteGlyphs();
900057ac:	f010 fed0 	bl	90016550 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>
        }

        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar(uint16_t offset)
        {
            assert(offset < used);
900057b0:	8f23      	ldrh	r3, [r4, #56]	; 0x38
900057b2:	2b01      	cmp	r3, #1
900057b4:	d92a      	bls.n	9000580c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x80>
            const uint16_t index = pos + offset;
900057b6:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
900057b8:	1c53      	adds	r3, r2, #1
900057ba:	b29b      	uxth	r3, r3
            return buffer[index < size ? index : index - size];
900057bc:	2b09      	cmp	r3, #9
900057be:	d812      	bhi.n	900057e6 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x5a>
900057c0:	eb04 0143 	add.w	r1, r4, r3, lsl #1
        if (nextCharacters.peekChar(1) == 0x093F) // Hindi I-matra
900057c4:	f640 103f 	movw	r0, #2367	; 0x93f
900057c8:	8c49      	ldrh	r1, [r1, #34]	; 0x22
900057ca:	4281      	cmp	r1, r0
900057cc:	d1e9      	bne.n	900057a2 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x16>
            return buffer[pos];
900057ce:	eb04 0142 	add.w	r1, r4, r2, lsl #1
900057d2:	0052      	lsls	r2, r2, #1
900057d4:	8c49      	ldrh	r1, [r1, #34]	; 0x22

        FORCE_INLINE_FUNCTION void replaceAt1(Unicode::UnicodeChar newChar)
        {
            assert(used > 1);
            const uint16_t index = pos + 1;
            buffer[index < size ? index : 0] = newChar;
900057d6:	eb04 0343 	add.w	r3, r4, r3, lsl #1
            buffer[pos] = newChar;
900057da:	4422      	add	r2, r4
900057dc:	f640 103f 	movw	r0, #2367	; 0x93f
            buffer[index < size ? index : 0] = newChar;
900057e0:	8459      	strh	r1, [r3, #34]	; 0x22
            buffer[pos] = newChar;
900057e2:	8450      	strh	r0, [r2, #34]	; 0x22
        }
900057e4:	e7dd      	b.n	900057a2 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x16>
            return buffer[index < size ? index : index - size];
900057e6:	eb04 0343 	add.w	r3, r4, r3, lsl #1
900057ea:	f640 113f 	movw	r1, #2367	; 0x93f
900057ee:	89db      	ldrh	r3, [r3, #14]
900057f0:	428b      	cmp	r3, r1
900057f2:	d1d6      	bne.n	900057a2 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x16>
            return buffer[pos];
900057f4:	eb04 0142 	add.w	r1, r4, r2, lsl #1
900057f8:	2300      	movs	r3, #0
900057fa:	0052      	lsls	r2, r2, #1
900057fc:	8c49      	ldrh	r1, [r1, #34]	; 0x22
        FORCE_INLINE_FUNCTION void replaceAt1(Unicode::UnicodeChar newChar)
900057fe:	e7ea      	b.n	900057d6 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x4a>
            assert(used > 0);
90005800:	4b05      	ldr	r3, [pc, #20]	; (90005818 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x8c>)
90005802:	21c5      	movs	r1, #197	; 0xc5
90005804:	4a05      	ldr	r2, [pc, #20]	; (9000581c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x90>)
90005806:	4806      	ldr	r0, [pc, #24]	; (90005820 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x94>)
90005808:	f01d fb1a 	bl	90022e40 <__assert_func>
            assert(offset < used);
9000580c:	4b05      	ldr	r3, [pc, #20]	; (90005824 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x98>)
9000580e:	21cb      	movs	r1, #203	; 0xcb
90005810:	4a05      	ldr	r2, [pc, #20]	; (90005828 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x9c>)
90005812:	4803      	ldr	r0, [pc, #12]	; (90005820 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x94>)
90005814:	f01d fb14 	bl	90022e40 <__assert_func>
90005818:	90026264 	.word	0x90026264
9000581c:	90026270 	.word	0x90026270
90005820:	9002631c 	.word	0x9002631c
90005824:	90026368 	.word	0x90026368
90005828:	90026378 	.word	0x90026378

9000582c <_ZN8touchgfx12TextProvider18initializeInternalEv>:

void touchgfx::TextProvider::initializeInternal()
{
    fillInputBuffer();
9000582c:	f010 bd5b 	b.w	900162e6 <_ZN8touchgfx12TextProvider15fillInputBufferEv>

90005830 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>:
}

void touchgfx::LCD::drawString(touchgfx::Rect widgetArea, const touchgfx::Rect& invalidatedArea, const touchgfx::LCD::StringVisuals& stringVisuals, const touchgfx::Unicode::UnicodeChar* format, ...)
{
90005830:	b510      	push	{r4, lr}
90005832:	b086      	sub	sp, #24
90005834:	f10d 0c08 	add.w	ip, sp, #8
    va_list pArg;
    va_start(pArg, format);
90005838:	ac0a      	add	r4, sp, #40	; 0x28
{
9000583a:	e88c 0006 	stmia.w	ip, {r1, r2}
    drawStringLTR(widgetArea, invalidatedArea, stringVisuals, format, pArg);
9000583e:	461a      	mov	r2, r3
90005840:	9b09      	ldr	r3, [sp, #36]	; 0x24
90005842:	4661      	mov	r1, ip
90005844:	9401      	str	r4, [sp, #4]
90005846:	9300      	str	r3, [sp, #0]
90005848:	9b08      	ldr	r3, [sp, #32]
    va_start(pArg, format);
9000584a:	9405      	str	r4, [sp, #20]
    drawStringLTR(widgetArea, invalidatedArea, stringVisuals, format, pArg);
9000584c:	f00e f88a 	bl	90013964 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>
    va_end(pArg);
}
90005850:	b006      	add	sp, #24
90005852:	bd10      	pop	{r4, pc}

90005854 <_ZN8touchgfx5Texts11setLanguageEt>:
static const uint32_t* currentLanguageIndices = 0;

void touchgfx::Texts::setLanguage(touchgfx::LanguageId id)
{
    const touchgfx::TypedText::TypedTextData* currentLanguageTypedText = 0;
    if (id < 1)
90005854:	b9e0      	cbnz	r0, 90005890 <_ZN8touchgfx5Texts11setLanguageEt+0x3c>
{
90005856:	b538      	push	{r3, r4, r5, lr}
    {
        if (languagesArray[id] != 0)
90005858:	4b13      	ldr	r3, [pc, #76]	; (900058a8 <_ZN8touchgfx5Texts11setLanguageEt+0x54>)
9000585a:	681b      	ldr	r3, [r3, #0]
9000585c:	b1cb      	cbz	r3, 90005892 <_ZN8touchgfx5Texts11setLanguageEt+0x3e>
        {
            // Dynamic translation is added
            const TranslationHeader* translation = languagesArray[id];
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
9000585e:	4c13      	ldr	r4, [pc, #76]	; (900058ac <_ZN8touchgfx5Texts11setLanguageEt+0x58>)
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
90005860:	4813      	ldr	r0, [pc, #76]	; (900058b0 <_ZN8touchgfx5Texts11setLanguageEt+0x5c>)
90005862:	e9d3 1200 	ldrd	r1, r2, [r3]
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
90005866:	4419      	add	r1, r3
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
90005868:	441a      	add	r2, r3
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
9000586a:	6021      	str	r1, [r4, #0]
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
9000586c:	6899      	ldr	r1, [r3, #8]
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
9000586e:	6002      	str	r2, [r0, #0]
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
90005870:	185c      	adds	r4, r3, r1
        }
    }

    if (currentLanguageTypedText)
    {
        currentLanguage = id;
90005872:	4b10      	ldr	r3, [pc, #64]	; (900058b4 <_ZN8touchgfx5Texts11setLanguageEt+0x60>)
90005874:	2200      	movs	r2, #0
90005876:	801a      	strh	r2, [r3, #0]
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
                                                       TypedTextDatabase::getFonts(), TypedTextDatabase::getInstanceSize());
90005878:	f000 f83a 	bl	900058f0 <_ZN17TypedTextDatabase8getFontsEv>
9000587c:	4605      	mov	r5, r0
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
9000587e:	f000 f835 	bl	900058ec <_ZN17TypedTextDatabase15getInstanceSizeEv>
        typedTexts = data;
90005882:	4b0d      	ldr	r3, [pc, #52]	; (900058b8 <_ZN8touchgfx5Texts11setLanguageEt+0x64>)
        fonts = f;
90005884:	4a0d      	ldr	r2, [pc, #52]	; (900058bc <_ZN8touchgfx5Texts11setLanguageEt+0x68>)
        typedTexts = data;
90005886:	601c      	str	r4, [r3, #0]
        numberOfTypedTexts = n;
90005888:	4b0d      	ldr	r3, [pc, #52]	; (900058c0 <_ZN8touchgfx5Texts11setLanguageEt+0x6c>)
        fonts = f;
9000588a:	6015      	str	r5, [r2, #0]
        numberOfTypedTexts = n;
9000588c:	8018      	strh	r0, [r3, #0]
    }
}
9000588e:	bd38      	pop	{r3, r4, r5, pc}
90005890:	4770      	bx	lr
            currentLanguageTypedText = typedTextDatabaseArray[id];
90005892:	4c0c      	ldr	r4, [pc, #48]	; (900058c4 <_ZN8touchgfx5Texts11setLanguageEt+0x70>)
            currentLanguagePtr = texts_all_languages;
90005894:	4905      	ldr	r1, [pc, #20]	; (900058ac <_ZN8touchgfx5Texts11setLanguageEt+0x58>)
            currentLanguageTypedText = typedTextDatabaseArray[id];
90005896:	6824      	ldr	r4, [r4, #0]
            currentLanguagePtr = texts_all_languages;
90005898:	480b      	ldr	r0, [pc, #44]	; (900058c8 <_ZN8touchgfx5Texts11setLanguageEt+0x74>)
            currentLanguageIndices = staticLanguageIndices[id];
9000589a:	4b05      	ldr	r3, [pc, #20]	; (900058b0 <_ZN8touchgfx5Texts11setLanguageEt+0x5c>)
9000589c:	4a0b      	ldr	r2, [pc, #44]	; (900058cc <_ZN8touchgfx5Texts11setLanguageEt+0x78>)
            currentLanguagePtr = texts_all_languages;
9000589e:	6008      	str	r0, [r1, #0]
            currentLanguageIndices = staticLanguageIndices[id];
900058a0:	601a      	str	r2, [r3, #0]
    if (currentLanguageTypedText)
900058a2:	2c00      	cmp	r4, #0
900058a4:	d1e5      	bne.n	90005872 <_ZN8touchgfx5Texts11setLanguageEt+0x1e>
}
900058a6:	bd38      	pop	{r3, r4, r5, pc}
900058a8:	2400b1f8 	.word	0x2400b1f8
900058ac:	2400b1fc 	.word	0x2400b1fc
900058b0:	2400b200 	.word	0x2400b200
900058b4:	2400b204 	.word	0x2400b204
900058b8:	240262b4 	.word	0x240262b4
900058bc:	240262bc 	.word	0x240262bc
900058c0:	240262b8 	.word	0x240262b8
900058c4:	90202194 	.word	0x90202194
900058c8:	9020216c 	.word	0x9020216c
900058cc:	90202164 	.word	0x90202164

900058d0 <_ZNK8touchgfx5Texts7getTextEt>:
    languagesArray[id] = (const TranslationHeader*)translation;
}

const touchgfx::Unicode::UnicodeChar* touchgfx::Texts::getText(TypedTextId id) const
{
    return &currentLanguagePtr[currentLanguageIndices[id]];
900058d0:	4a04      	ldr	r2, [pc, #16]	; (900058e4 <_ZNK8touchgfx5Texts7getTextEt+0x14>)
900058d2:	4b05      	ldr	r3, [pc, #20]	; (900058e8 <_ZNK8touchgfx5Texts7getTextEt+0x18>)
900058d4:	6812      	ldr	r2, [r2, #0]
900058d6:	681b      	ldr	r3, [r3, #0]
900058d8:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
}
900058dc:	eb03 0040 	add.w	r0, r3, r0, lsl #1
900058e0:	4770      	bx	lr
900058e2:	bf00      	nop
900058e4:	2400b200 	.word	0x2400b200
900058e8:	2400b1fc 	.word	0x2400b1fc

900058ec <_ZN17TypedTextDatabase15getInstanceSizeEv>:
}

uint16_t getInstanceSize()
{
    return sizeof(typedText_database_DEFAULT) / sizeof(touchgfx::TypedText::TypedTextData);
}
900058ec:	2002      	movs	r0, #2
900058ee:	4770      	bx	lr

900058f0 <_ZN17TypedTextDatabase8getFontsEv>:

const touchgfx::Font** getFonts()
{
    return touchgfx_fonts;
}
900058f0:	4800      	ldr	r0, [pc, #0]	; (900058f4 <_ZN17TypedTextDatabase8getFontsEv+0x4>)
900058f2:	4770      	bx	lr
900058f4:	2400b208 	.word	0x2400b208

900058f8 <_GLOBAL__sub_I_touchgfx_fonts>:
    case 2:
        touchgfx_fonts[2] = &(getFont_verdana_10_4bpp());
        break;
    }
}
} // namespace TypedTextDatabase
900058f8:	b510      	push	{r4, lr}
};
900058fa:	4c05      	ldr	r4, [pc, #20]	; (90005910 <_GLOBAL__sub_I_touchgfx_fonts+0x18>)
    &(getFont_verdana_20_4bpp()),
900058fc:	f7ff fea4 	bl	90005648 <_Z23getFont_verdana_20_4bppv>
};
90005900:	6020      	str	r0, [r4, #0]
    &(getFont_verdana_40_4bpp()),
90005902:	f7ff fee3 	bl	900056cc <_Z23getFont_verdana_40_4bppv>
};
90005906:	6060      	str	r0, [r4, #4]
    &(getFont_verdana_10_4bpp())
90005908:	f7ff fe5e 	bl	900055c8 <_Z23getFont_verdana_10_4bppv>
};
9000590c:	60a0      	str	r0, [r4, #8]
} // namespace TypedTextDatabase
9000590e:	bd10      	pop	{r4, pc}
90005910:	2400b208 	.word	0x2400b208

90005914 <_ZN19FrontendApplicationD1Ev>:

class FrontendApplication : public FrontendApplicationBase
{
public:
    FrontendApplication(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplication() { }
90005914:	4770      	bx	lr
90005916:	bf00      	nop

90005918 <_ZN19FrontendApplicationD0Ev>:
90005918:	b510      	push	{r4, lr}
9000591a:	4604      	mov	r4, r0
9000591c:	f44f 71ae 	mov.w	r1, #348	; 0x15c
90005920:	f01d fa5f 	bl	90022de2 <_ZdlPvj>
90005924:	4620      	mov	r0, r4
90005926:	bd10      	pop	{r4, pc}

90005928 <_ZN19FrontendApplication15handleTickEventEv>:

    virtual void handleTickEvent()
90005928:	b510      	push	{r4, lr}
9000592a:	4604      	mov	r4, r0
    {
        model.tick();
9000592c:	f8d0 0158 	ldr.w	r0, [r0, #344]	; 0x158
90005930:	f000 f818 	bl	90005964 <_ZN5Model4tickEv>
        FrontendApplicationBase::handleTickEvent();
90005934:	4620      	mov	r0, r4
    }
90005936:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        FrontendApplicationBase::handleTickEvent();
9000593a:	f00e bcd9 	b.w	900142f0 <_ZN8touchgfx11Application15handleTickEventEv>
9000593e:	bf00      	nop

90005940 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>:
#include <gui/common/FrontendApplication.hpp>

FrontendApplication::FrontendApplication(Model& m, FrontendHeap& heap)
90005940:	b510      	push	{r4, lr}
90005942:	4604      	mov	r4, r0
    : FrontendApplicationBase(m, heap)
90005944:	f7ff fb92 	bl	9000506c <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>
90005948:	4b01      	ldr	r3, [pc, #4]	; (90005950 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap+0x10>)
{

}
9000594a:	4620      	mov	r0, r4
    : FrontendApplicationBase(m, heap)
9000594c:	6023      	str	r3, [r4, #0]
}
9000594e:	bd10      	pop	{r4, pc}
90005950:	90026454 	.word	0x90026454

90005954 <_ZN13ModelListener6setADCEi>:
    }
    virtual void setADC(int value) {};
90005954:	4770      	bx	lr
90005956:	bf00      	nop

90005958 <_ZN5ModelC1Ev>:
	{
	  return (x - in_min) * (out_max - out_min + 1) / (in_max - in_min + 1) + out_min;
	}
}
#endif
Model::Model() : modelListener(0), ADC_VAL(50)
90005958:	2100      	movs	r1, #0
9000595a:	2232      	movs	r2, #50	; 0x32
9000595c:	e9c0 1200 	strd	r1, r2, [r0]
{

}
90005960:	4770      	bx	lr
90005962:	bf00      	nop

90005964 <_ZN5Model4tickEv>:

void Model::tick()
{
90005964:	b570      	push	{r4, r5, r6, lr}
90005966:	4605      	mov	r5, r0
#ifndef SIMULATOR
	HAL_ADC_Start(&hadc1);
90005968:	480e      	ldr	r0, [pc, #56]	; (900059a4 <_ZN5Model4tickEv+0x40>)
9000596a:	f001 fd7b 	bl	90007464 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 10);
9000596e:	210a      	movs	r1, #10
90005970:	480c      	ldr	r0, [pc, #48]	; (900059a4 <_ZN5Model4tickEv+0x40>)
90005972:	f001 f9f3 	bl	90006d5c <HAL_ADC_PollForConversion>
	uint16_t value = HAL_ADC_GetValue(&hadc1);
90005976:	480b      	ldr	r0, [pc, #44]	; (900059a4 <_ZN5Model4tickEv+0x40>)
90005978:	f001 fa76 	bl	90006e68 <HAL_ADC_GetValue>
9000597c:	4604      	mov	r4, r0
	HAL_ADC_Stop (&hadc1);
9000597e:	4809      	ldr	r0, [pc, #36]	; (900059a4 <_ZN5Model4tickEv+0x40>)
90005980:	f001 fe28 	bl	900075d4 <HAL_ADC_Stop>

	ADC_VAL = map(value, 0, 65535, 0, 100);
	modelListener->setADC(ADC_VAL);
90005984:	6828      	ldr	r0, [r5, #0]
	  return (x - in_min) * (out_max - out_min + 1) / (in_max - in_min + 1) + out_min;
90005986:	2265      	movs	r2, #101	; 0x65
	ADC_VAL = map(value, 0, 65535, 0, 100);
90005988:	b2a1      	uxth	r1, r4
	modelListener->setADC(ADC_VAL);
9000598a:	6803      	ldr	r3, [r0, #0]
	  return (x - in_min) * (out_max - out_min + 1) / (in_max - in_min + 1) + out_min;
9000598c:	fb02 f101 	mul.w	r1, r2, r1
90005990:	4a05      	ldr	r2, [pc, #20]	; (900059a8 <_ZN5Model4tickEv+0x44>)
	modelListener->setADC(ADC_VAL);
90005992:	689b      	ldr	r3, [r3, #8]
	  return (x - in_min) * (out_max - out_min + 1) / (in_max - in_min + 1) + out_min;
90005994:	1409      	asrs	r1, r1, #16
90005996:	4293      	cmp	r3, r2
	ADC_VAL = map(value, 0, 65535, 0, 100);
90005998:	6069      	str	r1, [r5, #4]
	modelListener->setADC(ADC_VAL);
9000599a:	d100      	bne.n	9000599e <_ZN5Model4tickEv+0x3a>
	#endif
}
9000599c:	bd70      	pop	{r4, r5, r6, pc}
9000599e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	modelListener->setADC(ADC_VAL);
900059a2:	4718      	bx	r3
900059a4:	2400ae10 	.word	0x2400ae10
900059a8:	90005955 	.word	0x90005955

900059ac <_ZN16Screen1PresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~Screen1Presenter() {};
900059ac:	4770      	bx	lr
900059ae:	bf00      	nop

900059b0 <_ZThn4_N16Screen1PresenterD1Ev>:
900059b0:	3804      	subs	r0, #4
900059b2:	4770      	bx	lr

900059b4 <_ZN16Screen1Presenter10deactivateEv>:
}

void Screen1Presenter::activate()
{

}
900059b4:	4770      	bx	lr
900059b6:	bf00      	nop

900059b8 <_ZN16Screen1Presenter6setADCEi>:

}

void Screen1Presenter::setADC (int value)
{
	view.setADC(value);
900059b8:	68c0      	ldr	r0, [r0, #12]
900059ba:	6803      	ldr	r3, [r0, #0]
900059bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
900059be:	4718      	bx	r3

900059c0 <_ZN16Screen1PresenterD0Ev>:
900059c0:	b510      	push	{r4, lr}
900059c2:	4604      	mov	r4, r0
900059c4:	2110      	movs	r1, #16
900059c6:	f01d fa0c 	bl	90022de2 <_ZdlPvj>
900059ca:	4620      	mov	r0, r4
900059cc:	bd10      	pop	{r4, pc}
900059ce:	bf00      	nop

900059d0 <_ZThn4_N16Screen1PresenterD0Ev>:
900059d0:	b500      	push	{lr}
900059d2:	3804      	subs	r0, #4
900059d4:	b083      	sub	sp, #12
900059d6:	2110      	movs	r1, #16
900059d8:	9001      	str	r0, [sp, #4]
900059da:	f01d fa02 	bl	90022de2 <_ZdlPvj>
900059de:	9801      	ldr	r0, [sp, #4]
900059e0:	b003      	add	sp, #12
900059e2:	f85d fb04 	ldr.w	pc, [sp], #4
900059e6:	bf00      	nop

900059e8 <_ZThn4_N16Screen1Presenter6setADCEi>:
900059e8:	6880      	ldr	r0, [r0, #8]
900059ea:	6803      	ldr	r3, [r0, #0]
900059ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
900059ee:	4718      	bx	r3

900059f0 <_ZN16Screen1PresenterC1ER11Screen1View>:
    : view(v)
900059f0:	4a06      	ldr	r2, [pc, #24]	; (90005a0c <_ZN16Screen1PresenterC1ER11Screen1View+0x1c>)
900059f2:	60c1      	str	r1, [r0, #12]
Screen1Presenter::Screen1Presenter(Screen1View& v)
900059f4:	b410      	push	{r4}
    ModelListener() : model(0) {}
900059f6:	2400      	movs	r4, #0
900059f8:	6084      	str	r4, [r0, #8]
    : view(v)
900059fa:	f102 0408 	add.w	r4, r2, #8
900059fe:	3224      	adds	r2, #36	; 0x24
90005a00:	e9c0 4200 	strd	r4, r2, [r0]
}
90005a04:	f85d 4b04 	ldr.w	r4, [sp], #4
90005a08:	4770      	bx	lr
90005a0a:	bf00      	nop
90005a0c:	90026498 	.word	0x90026498

90005a10 <_ZN11Screen1View14tearDownScreenEv>:
}

void Screen1View::tearDownScreen()
{
    Screen1ViewBase::tearDownScreen();
}
90005a10:	4770      	bx	lr
90005a12:	bf00      	nop

90005a14 <_ZN11Screen1ViewD1Ev>:

class Screen1View : public Screen1ViewBase
{
public:
    Screen1View();
    virtual ~Screen1View() {}
90005a14:	4b03      	ldr	r3, [pc, #12]	; (90005a24 <_ZN11Screen1ViewD1Ev+0x10>)
90005a16:	b510      	push	{r4, lr}
90005a18:	4604      	mov	r4, r0
90005a1a:	6003      	str	r3, [r0, #0]
90005a1c:	f7ff fc2a 	bl	90005274 <_ZN15Screen1ViewBaseD1Ev>
90005a20:	4620      	mov	r0, r4
90005a22:	bd10      	pop	{r4, pc}
90005a24:	900264d4 	.word	0x900264d4

90005a28 <_ZN11Screen1ViewD0Ev>:
90005a28:	4b05      	ldr	r3, [pc, #20]	; (90005a40 <_ZN11Screen1ViewD0Ev+0x18>)
90005a2a:	b510      	push	{r4, lr}
90005a2c:	4604      	mov	r4, r0
90005a2e:	6003      	str	r3, [r0, #0]
90005a30:	f7ff fc20 	bl	90005274 <_ZN15Screen1ViewBaseD1Ev>
90005a34:	21ec      	movs	r1, #236	; 0xec
90005a36:	4620      	mov	r0, r4
90005a38:	f01d f9d3 	bl	90022de2 <_ZdlPvj>
90005a3c:	4620      	mov	r0, r4
90005a3e:	bd10      	pop	{r4, pc}
90005a40:	900264d4 	.word	0x900264d4

90005a44 <_ZN11Screen1ViewC1Ev>:
Screen1View::Screen1View()
90005a44:	b510      	push	{r4, lr}
90005a46:	4604      	mov	r4, r0
90005a48:	f7ff fcd8 	bl	900053fc <_ZN15Screen1ViewBaseC1Ev>
90005a4c:	4b01      	ldr	r3, [pc, #4]	; (90005a54 <_ZN11Screen1ViewC1Ev+0x10>)
}
90005a4e:	4620      	mov	r0, r4
Screen1View::Screen1View()
90005a50:	6023      	str	r3, [r4, #0]
}
90005a52:	bd10      	pop	{r4, pc}
90005a54:	900264d4 	.word	0x900264d4

90005a58 <_ZN11Screen1View11setupScreenEv>:
    Screen1ViewBase::setupScreen();
90005a58:	f7ff bc0e 	b.w	90005278 <_ZN15Screen1ViewBase11setupScreenEv>

90005a5c <_ZN11Screen1View6setADCEi>:

void Screen1View::setADC(int value) {
90005a5c:	b510      	push	{r4, lr}
90005a5e:	4604      	mov	r4, r0
90005a60:	460b      	mov	r3, r1
	Unicode::snprintf(textArea1Buffer, TEXTAREA1_SIZE, "%d", value);
90005a62:	4a05      	ldr	r2, [pc, #20]	; (90005a78 <_ZN11Screen1View6setADCEi+0x1c>)
90005a64:	2104      	movs	r1, #4
90005a66:	30e4      	adds	r0, #228	; 0xe4
90005a68:	f011 fb20 	bl	900170ac <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	textArea1.invalidate();
90005a6c:	f104 0098 	add.w	r0, r4, #152	; 0x98
};
90005a70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	textArea1.invalidate();
90005a74:	f00f bbff 	b.w	90015276 <_ZNK8touchgfx8Drawable10invalidateEv>
90005a78:	900264c8 	.word	0x900264c8

90005a7c <FT5336_GetCapabilities>:
{
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  /* Store component's capabilities */
  Capabilities->MultiTouch = 1;
90005a7c:	f240 1c01 	movw	ip, #257	; 0x101
  Capabilities->Gesture    = 1;
  Capabilities->MaxTouch   = FT5336_MAX_NB_TOUCH;
90005a80:	2005      	movs	r0, #5
  Capabilities->MaxXl      = FT5336_MAX_X_LENGTH;
90005a82:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
  Capabilities->MaxYl      = FT5336_MAX_Y_LENGTH;
90005a86:	f44f 7388 	mov.w	r3, #272	; 0x110
  Capabilities->MaxTouch   = FT5336_MAX_NB_TOUCH;
90005a8a:	7088      	strb	r0, [r1, #2]

  return FT5336_OK;
}
90005a8c:	2000      	movs	r0, #0
  Capabilities->MultiTouch = 1;
90005a8e:	f8a1 c000 	strh.w	ip, [r1]
  Capabilities->MaxYl      = FT5336_MAX_Y_LENGTH;
90005a92:	e9c1 2301 	strd	r2, r3, [r1, #4]
}
90005a96:	4770      	bx	lr

90005a98 <FT5336_DeInit>:
  */
int32_t FT5336_DeInit(FT5336_Object_t *pObj)
{
  int32_t ret = FT5336_OK;

  if(pObj->IsInitialized == 1U)
90005a98:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
90005a9c:	2b01      	cmp	r3, #1
90005a9e:	d102      	bne.n	90005aa6 <FT5336_DeInit+0xe>
  {
    pObj->IsInitialized = 0;
90005aa0:	2300      	movs	r3, #0
90005aa2:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  }

  return ret;
}
90005aa6:	2000      	movs	r0, #0
90005aa8:	4770      	bx	lr
90005aaa:	bf00      	nop

90005aac <FT5336_ITStatus>:
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  /* Always return FT5336_OK as feature not applicable to FT5336 */
  return FT5336_OK;
}
90005aac:	2000      	movs	r0, #0
90005aae:	4770      	bx	lr

90005ab0 <ReadRegWrap>:
  * @param  pData: The target register value to be written
  * @param  Length: buffer size to be written
  * @retval error status
  */
static int32_t ReadRegWrap(void *handle, uint8_t Reg, uint8_t* pData, uint16_t Length)
{
90005ab0:	b410      	push	{r4}
  FT5336_Object_t *pObj = (FT5336_Object_t *)handle;

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
90005ab2:	6904      	ldr	r4, [r0, #16]
90005ab4:	8900      	ldrh	r0, [r0, #8]
90005ab6:	46a4      	mov	ip, r4
}
90005ab8:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
90005abc:	4760      	bx	ip
90005abe:	bf00      	nop

90005ac0 <WriteRegWrap>:
  * @param  pData: The target register value to be written
  * @param  Length: buffer size to be written
  * @retval error status
  */
static int32_t WriteRegWrap(void *handle, uint8_t Reg, uint8_t* pData, uint16_t Length)
{
90005ac0:	b410      	push	{r4}
  FT5336_Object_t *pObj = (FT5336_Object_t *)handle;

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
90005ac2:	68c4      	ldr	r4, [r0, #12]
90005ac4:	8900      	ldrh	r0, [r0, #8]
90005ac6:	46a4      	mov	ip, r4
}
90005ac8:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
90005acc:	4760      	bx	ip
90005ace:	bf00      	nop

90005ad0 <FT5336_GestureConfig>:
{
90005ad0:	b570      	push	{r4, r5, r6, lr}
  ret = ft5336_radian_value(&pObj->Ctx, (uint8_t)GestureInit->Radian);
90005ad2:	f100 0518 	add.w	r5, r0, #24
{
90005ad6:	460e      	mov	r6, r1
  ret = ft5336_radian_value(&pObj->Ctx, (uint8_t)GestureInit->Radian);
90005ad8:	7809      	ldrb	r1, [r1, #0]
90005ada:	4628      	mov	r0, r5
90005adc:	f000 f96c 	bl	90005db8 <ft5336_radian_value>
90005ae0:	4604      	mov	r4, r0
  ret += ft5336_offset_left_right(&pObj->Ctx, (uint8_t)GestureInit->OffsetLeftRight);
90005ae2:	7931      	ldrb	r1, [r6, #4]
90005ae4:	4628      	mov	r0, r5
90005ae6:	f000 f975 	bl	90005dd4 <ft5336_offset_left_right>
90005aea:	4404      	add	r4, r0
  ret += ft5336_offset_up_down(&pObj->Ctx, (uint8_t)GestureInit->OffsetUpDown);
90005aec:	7a31      	ldrb	r1, [r6, #8]
90005aee:	4628      	mov	r0, r5
90005af0:	f000 f97e 	bl	90005df0 <ft5336_offset_up_down>
90005af4:	4404      	add	r4, r0
  ret += ft5336_disatnce_left_right(&pObj->Ctx, (uint8_t)GestureInit->DistanceLeftRight);
90005af6:	7b31      	ldrb	r1, [r6, #12]
90005af8:	4628      	mov	r0, r5
90005afa:	f000 f987 	bl	90005e0c <ft5336_disatnce_left_right>
  ret += ft5336_distance_up_down(&pObj->Ctx, (uint8_t)GestureInit->DistanceUpDown);
90005afe:	7c31      	ldrb	r1, [r6, #16]
  ret += ft5336_disatnce_left_right(&pObj->Ctx, (uint8_t)GestureInit->DistanceLeftRight);
90005b00:	4404      	add	r4, r0
  ret += ft5336_distance_up_down(&pObj->Ctx, (uint8_t)GestureInit->DistanceUpDown);
90005b02:	4628      	mov	r0, r5
90005b04:	f000 f990 	bl	90005e28 <ft5336_distance_up_down>
90005b08:	4603      	mov	r3, r0
  ret += ft5336_distance_zoom(&pObj->Ctx, (uint8_t)GestureInit->DistanceZoom);
90005b0a:	7d31      	ldrb	r1, [r6, #20]
90005b0c:	4628      	mov	r0, r5
  ret += ft5336_distance_up_down(&pObj->Ctx, (uint8_t)GestureInit->DistanceUpDown);
90005b0e:	441c      	add	r4, r3
  ret += ft5336_distance_zoom(&pObj->Ctx, (uint8_t)GestureInit->DistanceZoom);
90005b10:	f000 f998 	bl	90005e44 <ft5336_distance_zoom>
  if(ret != FT5336_OK)
90005b14:	42c4      	cmn	r4, r0
}
90005b16:	bf14      	ite	ne
90005b18:	f04f 30ff 	movne.w	r0, #4294967295
90005b1c:	2000      	moveq	r0, #0
90005b1e:	bd70      	pop	{r4, r5, r6, pc}

90005b20 <FT5336_ReadID>:
  return ft5336_chip_id(&pObj->Ctx, (uint8_t *)Id);
90005b20:	3018      	adds	r0, #24
90005b22:	f000 b9ab 	b.w	90005e7c <ft5336_chip_id>
90005b26:	bf00      	nop

90005b28 <FT5336_GetState>:
{
90005b28:	b530      	push	{r4, r5, lr}
  if(ft5336_td_status(&pObj->Ctx, &nb_touch) != FT5336_OK)
90005b2a:	f100 0518 	add.w	r5, r0, #24
{
90005b2e:	b083      	sub	sp, #12
90005b30:	460c      	mov	r4, r1
  if(ft5336_td_status(&pObj->Ctx, &nb_touch) != FT5336_OK)
90005b32:	4628      	mov	r0, r5
90005b34:	a901      	add	r1, sp, #4
90005b36:	f000 f931 	bl	90005d9c <ft5336_td_status>
90005b3a:	bb10      	cbnz	r0, 90005b82 <FT5336_GetState+0x5a>
    if(nb_touch > FT5336_MAX_NB_TOUCH)
90005b3c:	f89d 3004 	ldrb.w	r3, [sp, #4]
  State->TouchDetected = (uint32_t)FT5336_DetectTouch(pObj);
90005b40:	2b05      	cmp	r3, #5
90005b42:	bf94      	ite	ls
90005b44:	4619      	movls	r1, r3
90005b46:	2100      	movhi	r1, #0
  if(ft5336_read_reg(&pObj->Ctx, FT5336_P1_XH_REG, data, (uint16_t)sizeof(data)) != FT5336_OK)
90005b48:	2304      	movs	r3, #4
  State->TouchDetected = (uint32_t)FT5336_DetectTouch(pObj);
90005b4a:	6021      	str	r1, [r4, #0]
  if(ft5336_read_reg(&pObj->Ctx, FT5336_P1_XH_REG, data, (uint16_t)sizeof(data)) != FT5336_OK)
90005b4c:	4628      	mov	r0, r5
90005b4e:	2103      	movs	r1, #3
90005b50:	eb0d 0203 	add.w	r2, sp, r3
90005b54:	f000 f910 	bl	90005d78 <ft5336_read_reg>
90005b58:	b9b0      	cbnz	r0, 90005b88 <FT5336_GetState+0x60>
    State->TouchX = (((uint32_t)data[0] & FT5336_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT5336_P1_XL_TP_BIT_MASK);
90005b5a:	f89d 2004 	ldrb.w	r2, [sp, #4]
    State->TouchY = (((uint32_t)data[2] & FT5336_P1_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[3] & FT5336_P1_YL_TP_BIT_MASK);
90005b5e:	f89d 3006 	ldrb.w	r3, [sp, #6]
    State->TouchX = (((uint32_t)data[0] & FT5336_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT5336_P1_XL_TP_BIT_MASK);
90005b62:	0212      	lsls	r2, r2, #8
90005b64:	f89d 1005 	ldrb.w	r1, [sp, #5]
    State->TouchY = (((uint32_t)data[2] & FT5336_P1_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[3] & FT5336_P1_YL_TP_BIT_MASK);
90005b68:	021b      	lsls	r3, r3, #8
    State->TouchX = (((uint32_t)data[0] & FT5336_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT5336_P1_XL_TP_BIT_MASK);
90005b6a:	f402 6270 	and.w	r2, r2, #3840	; 0xf00
    State->TouchY = (((uint32_t)data[2] & FT5336_P1_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[3] & FT5336_P1_YL_TP_BIT_MASK);
90005b6e:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
    State->TouchX = (((uint32_t)data[0] & FT5336_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT5336_P1_XL_TP_BIT_MASK);
90005b72:	430a      	orrs	r2, r1
    State->TouchY = (((uint32_t)data[2] & FT5336_P1_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[3] & FT5336_P1_YL_TP_BIT_MASK);
90005b74:	f89d 1007 	ldrb.w	r1, [sp, #7]
90005b78:	430b      	orrs	r3, r1
90005b7a:	e9c4 2301 	strd	r2, r3, [r4, #4]
}
90005b7e:	b003      	add	sp, #12
90005b80:	bd30      	pop	{r4, r5, pc}
90005b82:	f04f 31ff 	mov.w	r1, #4294967295
90005b86:	e7df      	b.n	90005b48 <FT5336_GetState+0x20>
    ret = FT5336_ERROR;
90005b88:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
90005b8c:	e7f7      	b.n	90005b7e <FT5336_GetState+0x56>
90005b8e:	bf00      	nop

90005b90 <FT5336_GetMultiTouchState>:
{
90005b90:	b570      	push	{r4, r5, r6, lr}
  if(ft5336_td_status(&pObj->Ctx, &nb_touch) != FT5336_OK)
90005b92:	f100 0518 	add.w	r5, r0, #24
{
90005b96:	b088      	sub	sp, #32
90005b98:	460c      	mov	r4, r1
  if(ft5336_td_status(&pObj->Ctx, &nb_touch) != FT5336_OK)
90005b9a:	4628      	mov	r0, r5
90005b9c:	4669      	mov	r1, sp
90005b9e:	f000 f8fd 	bl	90005d9c <ft5336_td_status>
90005ba2:	2800      	cmp	r0, #0
90005ba4:	f040 809a 	bne.w	90005cdc <FT5336_GetMultiTouchState+0x14c>
    if(nb_touch > FT5336_MAX_NB_TOUCH)
90005ba8:	f89d 3000 	ldrb.w	r3, [sp]
  State->TouchDetected = (uint32_t)FT5336_DetectTouch(pObj);
90005bac:	2b05      	cmp	r3, #5
90005bae:	bf94      	ite	ls
90005bb0:	4619      	movls	r1, r3
90005bb2:	2100      	movhi	r1, #0
90005bb4:	6021      	str	r1, [r4, #0]
  if(ft5336_read_reg(&pObj->Ctx, FT5336_P1_XH_REG, data, (uint16_t)sizeof(data)) != FT5336_OK)
90005bb6:	231e      	movs	r3, #30
90005bb8:	466a      	mov	r2, sp
90005bba:	4628      	mov	r0, r5
90005bbc:	2103      	movs	r1, #3
90005bbe:	f000 f8db 	bl	90005d78 <ft5336_read_reg>
90005bc2:	2800      	cmp	r0, #0
90005bc4:	f040 808d 	bne.w	90005ce2 <FT5336_GetMultiTouchState+0x152>
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
90005bc8:	f89d 1000 	ldrb.w	r1, [sp]
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
90005bcc:	f89d 3002 	ldrb.w	r3, [sp, #2]
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
90005bd0:	020a      	lsls	r2, r1, #8
90005bd2:	f89d 5001 	ldrb.w	r5, [sp, #1]
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
90005bd6:	021b      	lsls	r3, r3, #8
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
90005bd8:	f89d c007 	ldrb.w	ip, [sp, #7]
90005bdc:	f402 6270 	and.w	r2, r2, #3840	; 0xf00
    State->TouchEvent[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_EF_BIT_MASK) >> FT5336_P1_XH_EF_BIT_POSITION);
90005be0:	0989      	lsrs	r1, r1, #6
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
90005be2:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
    State->TouchArea[i] = ((uint32_t)data[(i*6U) + 5U] & FT5336_P1_MISC_BIT_MASK) >> FT5336_P1_MISC_BIT_POSITION;
90005be6:	f89d 6011 	ldrb.w	r6, [sp, #17]
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
90005bea:	432a      	orrs	r2, r5
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
90005bec:	f89d 5003 	ldrb.w	r5, [sp, #3]
    State->TouchEvent[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_EF_BIT_MASK) >> FT5336_P1_XH_EF_BIT_POSITION);
90005bf0:	6421      	str	r1, [r4, #64]	; 0x40
    State->TouchArea[i] = ((uint32_t)data[(i*6U) + 5U] & FT5336_P1_MISC_BIT_MASK) >> FT5336_P1_MISC_BIT_POSITION;
90005bf2:	0936      	lsrs	r6, r6, #4
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
90005bf4:	432b      	orrs	r3, r5
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
90005bf6:	6062      	str	r2, [r4, #4]
    State->TouchWeight[i] = ((uint32_t)data[(i*6U) + 4U] & FT5336_P1_WEIGHT_BIT_MASK);
90005bf8:	f89d 2004 	ldrb.w	r2, [sp, #4]
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
90005bfc:	61a3      	str	r3, [r4, #24]
    State->TouchArea[i] = ((uint32_t)data[(i*6U) + 5U] & FT5336_P1_MISC_BIT_MASK) >> FT5336_P1_MISC_BIT_POSITION;
90005bfe:	f89d 3005 	ldrb.w	r3, [sp, #5]
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
90005c02:	f89d 1006 	ldrb.w	r1, [sp, #6]
    State->TouchArea[i] = ((uint32_t)data[(i*6U) + 5U] & FT5336_P1_MISC_BIT_MASK) >> FT5336_P1_MISC_BIT_POSITION;
90005c06:	091b      	lsrs	r3, r3, #4
    State->TouchWeight[i] = ((uint32_t)data[(i*6U) + 4U] & FT5336_P1_WEIGHT_BIT_MASK);
90005c08:	62e2      	str	r2, [r4, #44]	; 0x2c
    State->TouchArea[i] = ((uint32_t)data[(i*6U) + 5U] & FT5336_P1_MISC_BIT_MASK) >> FT5336_P1_MISC_BIT_POSITION;
90005c0a:	f89d 200b 	ldrb.w	r2, [sp, #11]
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
90005c0e:	020d      	lsls	r5, r1, #8
    State->TouchArea[i] = ((uint32_t)data[(i*6U) + 5U] & FT5336_P1_MISC_BIT_MASK) >> FT5336_P1_MISC_BIT_POSITION;
90005c10:	6563      	str	r3, [r4, #84]	; 0x54
    State->TouchEvent[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_EF_BIT_MASK) >> FT5336_P1_XH_EF_BIT_POSITION);
90005c12:	0989      	lsrs	r1, r1, #6
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
90005c14:	f89d 300c 	ldrb.w	r3, [sp, #12]
    State->TouchArea[i] = ((uint32_t)data[(i*6U) + 5U] & FT5336_P1_MISC_BIT_MASK) >> FT5336_P1_MISC_BIT_POSITION;
90005c18:	0912      	lsrs	r2, r2, #4
    State->TouchEvent[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_EF_BIT_MASK) >> FT5336_P1_XH_EF_BIT_POSITION);
90005c1a:	6461      	str	r1, [r4, #68]	; 0x44
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
90005c1c:	f405 6570 	and.w	r5, r5, #3840	; 0xf00
    State->TouchWeight[i] = ((uint32_t)data[(i*6U) + 4U] & FT5336_P1_WEIGHT_BIT_MASK);
90005c20:	f89d 100a 	ldrb.w	r1, [sp, #10]
    State->TouchArea[i] = ((uint32_t)data[(i*6U) + 5U] & FT5336_P1_MISC_BIT_MASK) >> FT5336_P1_MISC_BIT_POSITION;
90005c24:	65a2      	str	r2, [r4, #88]	; 0x58
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
90005c26:	021a      	lsls	r2, r3, #8
    State->TouchWeight[i] = ((uint32_t)data[(i*6U) + 4U] & FT5336_P1_WEIGHT_BIT_MASK);
90005c28:	6321      	str	r1, [r4, #48]	; 0x30
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
90005c2a:	ea45 050c 	orr.w	r5, r5, ip
90005c2e:	f402 6170 	and.w	r1, r2, #3840	; 0xf00
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
90005c32:	f89d 2008 	ldrb.w	r2, [sp, #8]
    State->TouchEvent[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_EF_BIT_MASK) >> FT5336_P1_XH_EF_BIT_POSITION);
90005c36:	099b      	lsrs	r3, r3, #6
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
90005c38:	60a5      	str	r5, [r4, #8]
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
90005c3a:	0212      	lsls	r2, r2, #8
90005c3c:	f89d 5009 	ldrb.w	r5, [sp, #9]
    State->TouchEvent[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_EF_BIT_MASK) >> FT5336_P1_XH_EF_BIT_POSITION);
90005c40:	64a3      	str	r3, [r4, #72]	; 0x48
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
90005c42:	f402 6270 	and.w	r2, r2, #3840	; 0xf00
    State->TouchWeight[i] = ((uint32_t)data[(i*6U) + 4U] & FT5336_P1_WEIGHT_BIT_MASK);
90005c46:	f89d 3010 	ldrb.w	r3, [sp, #16]
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
90005c4a:	432a      	orrs	r2, r5
    State->TouchWeight[i] = ((uint32_t)data[(i*6U) + 4U] & FT5336_P1_WEIGHT_BIT_MASK);
90005c4c:	6363      	str	r3, [r4, #52]	; 0x34
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
90005c4e:	f89d 300e 	ldrb.w	r3, [sp, #14]
90005c52:	61e2      	str	r2, [r4, #28]
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
90005c54:	f89d 200d 	ldrb.w	r2, [sp, #13]
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
90005c58:	021b      	lsls	r3, r3, #8
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
90005c5a:	430a      	orrs	r2, r1
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
90005c5c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
90005c60:	60e2      	str	r2, [r4, #12]
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
90005c62:	f89d 200f 	ldrb.w	r2, [sp, #15]
90005c66:	4313      	orrs	r3, r2
90005c68:	6223      	str	r3, [r4, #32]
    State->TouchArea[i] = ((uint32_t)data[(i*6U) + 5U] & FT5336_P1_MISC_BIT_MASK) >> FT5336_P1_MISC_BIT_POSITION;
90005c6a:	65e6      	str	r6, [r4, #92]	; 0x5c
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
90005c6c:	f89d 1012 	ldrb.w	r1, [sp, #18]
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
90005c70:	f89d 3014 	ldrb.w	r3, [sp, #20]
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
90005c74:	020a      	lsls	r2, r1, #8
90005c76:	f89d 5013 	ldrb.w	r5, [sp, #19]
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
90005c7a:	021b      	lsls	r3, r3, #8
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
90005c7c:	f402 6270 	and.w	r2, r2, #3840	; 0xf00
    State->TouchEvent[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_EF_BIT_MASK) >> FT5336_P1_XH_EF_BIT_POSITION);
90005c80:	0989      	lsrs	r1, r1, #6
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
90005c82:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
90005c86:	432a      	orrs	r2, r5
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
90005c88:	f89d 5015 	ldrb.w	r5, [sp, #21]
    State->TouchEvent[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_EF_BIT_MASK) >> FT5336_P1_XH_EF_BIT_POSITION);
90005c8c:	64e1      	str	r1, [r4, #76]	; 0x4c
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
90005c8e:	432b      	orrs	r3, r5
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
90005c90:	f89d 1018 	ldrb.w	r1, [sp, #24]
90005c94:	6122      	str	r2, [r4, #16]
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
90005c96:	6263      	str	r3, [r4, #36]	; 0x24
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
90005c98:	020b      	lsls	r3, r1, #8
    State->TouchWeight[i] = ((uint32_t)data[(i*6U) + 4U] & FT5336_P1_WEIGHT_BIT_MASK);
90005c9a:	f89d 2016 	ldrb.w	r2, [sp, #22]
    State->TouchEvent[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_EF_BIT_MASK) >> FT5336_P1_XH_EF_BIT_POSITION);
90005c9e:	0989      	lsrs	r1, r1, #6
    State->TouchArea[i] = ((uint32_t)data[(i*6U) + 5U] & FT5336_P1_MISC_BIT_MASK) >> FT5336_P1_MISC_BIT_POSITION;
90005ca0:	f89d 5017 	ldrb.w	r5, [sp, #23]
    State->TouchWeight[i] = ((uint32_t)data[(i*6U) + 4U] & FT5336_P1_WEIGHT_BIT_MASK);
90005ca4:	63a2      	str	r2, [r4, #56]	; 0x38
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
90005ca6:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
    State->TouchArea[i] = ((uint32_t)data[(i*6U) + 5U] & FT5336_P1_MISC_BIT_MASK) >> FT5336_P1_MISC_BIT_POSITION;
90005caa:	f89d 301d 	ldrb.w	r3, [sp, #29]
90005cae:	092d      	lsrs	r5, r5, #4
    State->TouchEvent[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_EF_BIT_MASK) >> FT5336_P1_XH_EF_BIT_POSITION);
90005cb0:	6521      	str	r1, [r4, #80]	; 0x50
    State->TouchArea[i] = ((uint32_t)data[(i*6U) + 5U] & FT5336_P1_MISC_BIT_MASK) >> FT5336_P1_MISC_BIT_POSITION;
90005cb2:	091b      	lsrs	r3, r3, #4
    State->TouchWeight[i] = ((uint32_t)data[(i*6U) + 4U] & FT5336_P1_WEIGHT_BIT_MASK);
90005cb4:	f89d 101c 	ldrb.w	r1, [sp, #28]
    State->TouchArea[i] = ((uint32_t)data[(i*6U) + 5U] & FT5336_P1_MISC_BIT_MASK) >> FT5336_P1_MISC_BIT_POSITION;
90005cb8:	6625      	str	r5, [r4, #96]	; 0x60
90005cba:	6663      	str	r3, [r4, #100]	; 0x64
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
90005cbc:	f89d 301a 	ldrb.w	r3, [sp, #26]
    State->TouchWeight[i] = ((uint32_t)data[(i*6U) + 4U] & FT5336_P1_WEIGHT_BIT_MASK);
90005cc0:	63e1      	str	r1, [r4, #60]	; 0x3c
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
90005cc2:	021b      	lsls	r3, r3, #8
90005cc4:	f89d 101b 	ldrb.w	r1, [sp, #27]
90005cc8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
90005ccc:	430b      	orrs	r3, r1
90005cce:	62a3      	str	r3, [r4, #40]	; 0x28
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
90005cd0:	f89d 3019 	ldrb.w	r3, [sp, #25]
90005cd4:	4313      	orrs	r3, r2
90005cd6:	6163      	str	r3, [r4, #20]
}
90005cd8:	b008      	add	sp, #32
90005cda:	bd70      	pop	{r4, r5, r6, pc}
90005cdc:	f04f 31ff 	mov.w	r1, #4294967295
90005ce0:	e768      	b.n	90005bb4 <FT5336_GetMultiTouchState+0x24>
    ret = FT5336_ERROR;
90005ce2:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
90005ce6:	e7f7      	b.n	90005cd8 <FT5336_GetMultiTouchState+0x148>

90005ce8 <FT5336_GetGesture>:
  return ft5336_gest_id(&pObj->Ctx, GestureId);
90005ce8:	3018      	adds	r0, #24
90005cea:	f000 b84d 	b.w	90005d88 <ft5336_gest_id>
90005cee:	bf00      	nop

90005cf0 <FT5336_EnableIT>:
  return ft5336_g_mode(&pObj->Ctx, FT5336_G_MODE_INTERRUPT_TRIGGER);
90005cf0:	2101      	movs	r1, #1
90005cf2:	3018      	adds	r0, #24
90005cf4:	f000 b8b4 	b.w	90005e60 <ft5336_g_mode>

90005cf8 <FT5336_DisableIT>:
  return ft5336_g_mode(&pObj->Ctx, FT5336_G_MODE_INTERRUPT_POLLING);
90005cf8:	2100      	movs	r1, #0
90005cfa:	3018      	adds	r0, #24
90005cfc:	f000 b8b0 	b.w	90005e60 <ft5336_g_mode>

90005d00 <FT5336_Init>:
{
90005d00:	b570      	push	{r4, r5, r6, lr}
  if(pObj->IsInitialized == 0U)
90005d02:	f890 5024 	ldrb.w	r5, [r0, #36]	; 0x24
90005d06:	b98d      	cbnz	r5, 90005d2c <FT5336_Init+0x2c>
    pObj->IO.Init();
90005d08:	4606      	mov	r6, r0
90005d0a:	4604      	mov	r4, r0
90005d0c:	f856 3b18 	ldr.w	r3, [r6], #24
90005d10:	4798      	blx	r3
  return ft5336_g_mode(&pObj->Ctx, FT5336_G_MODE_INTERRUPT_POLLING);
90005d12:	4629      	mov	r1, r5
90005d14:	4630      	mov	r0, r6
90005d16:	f000 f8a3 	bl	90005e60 <ft5336_g_mode>
  if(ret != FT5336_OK)
90005d1a:	3800      	subs	r0, #0
    pObj->IsInitialized = 1;
90005d1c:	f04f 0301 	mov.w	r3, #1
  if(ret != FT5336_OK)
90005d20:	bf18      	it	ne
90005d22:	2001      	movne	r0, #1
    pObj->IsInitialized = 1;
90005d24:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
  if(ret != FT5336_OK)
90005d28:	4240      	negs	r0, r0
}
90005d2a:	bd70      	pop	{r4, r5, r6, pc}
  int32_t ret = FT5336_OK;
90005d2c:	2000      	movs	r0, #0
}
90005d2e:	bd70      	pop	{r4, r5, r6, pc}

90005d30 <FT5336_ClearIT>:
90005d30:	2000      	movs	r0, #0
90005d32:	4770      	bx	lr

90005d34 <FT5336_RegisterBusIO>:
  if (pObj == NULL)
90005d34:	b1c0      	cbz	r0, 90005d68 <FT5336_RegisterBusIO+0x34>
    pObj->IO.Address   = pIO->Address;
90005d36:	890a      	ldrh	r2, [r1, #8]
{
90005d38:	b430      	push	{r4, r5}
    pObj->IO.DeInit    = pIO->DeInit;
90005d3a:	e9d1 3400 	ldrd	r3, r4, [r1]
    pObj->IO.Address   = pIO->Address;
90005d3e:	8102      	strh	r2, [r0, #8]
    pObj->IO.DeInit    = pIO->DeInit;
90005d40:	e9c0 3400 	strd	r3, r4, [r0]
    pObj->IO.WriteReg  = pIO->WriteReg;
90005d44:	694a      	ldr	r2, [r1, #20]
90005d46:	e9d1 5403 	ldrd	r5, r4, [r1, #12]
    pObj->Ctx.ReadReg  = ReadRegWrap;
90005d4a:	4909      	ldr	r1, [pc, #36]	; (90005d70 <FT5336_RegisterBusIO+0x3c>)
    pObj->IO.WriteReg  = pIO->WriteReg;
90005d4c:	60c5      	str	r5, [r0, #12]
90005d4e:	e9c0 4204 	strd	r4, r2, [r0, #16]
    pObj->Ctx.WriteReg = WriteRegWrap;
90005d52:	4a08      	ldr	r2, [pc, #32]	; (90005d74 <FT5336_RegisterBusIO+0x40>)
    pObj->Ctx.handle   = pObj;
90005d54:	e9c0 1007 	strd	r1, r0, [r0, #28]
    pObj->Ctx.WriteReg = WriteRegWrap;
90005d58:	6182      	str	r2, [r0, #24]
    if(pObj->IO.Init != NULL)
90005d5a:	b10b      	cbz	r3, 90005d60 <FT5336_RegisterBusIO+0x2c>
}
90005d5c:	bc30      	pop	{r4, r5}
      ret = pObj->IO.Init();
90005d5e:	4718      	bx	r3
}
90005d60:	f04f 30ff 	mov.w	r0, #4294967295
90005d64:	bc30      	pop	{r4, r5}
90005d66:	4770      	bx	lr
90005d68:	f04f 30ff 	mov.w	r0, #4294967295
90005d6c:	4770      	bx	lr
90005d6e:	bf00      	nop
90005d70:	90005ab1 	.word	0x90005ab1
90005d74:	90005ac1 	.word	0x90005ac1

90005d78 <ft5336_read_reg>:
  * @param  pdata pointer to data to be read
  * @param  length Length of data to read   
  * @retval Component status
  */
int32_t ft5336_read_reg(ft5336_ctx_t *ctx, uint8_t reg, uint8_t* pdata, uint16_t length)
{
90005d78:	b410      	push	{r4}
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
90005d7a:	e9d0 4001 	ldrd	r4, r0, [r0, #4]
90005d7e:	46a4      	mov	ip, r4
}
90005d80:	f85d 4b04 	ldr.w	r4, [sp], #4
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
90005d84:	4760      	bx	ip
90005d86:	bf00      	nop

90005d88 <ft5336_gest_id>:
  * @param  ctx Component context 
  * @param  value pointer to the value of FT5336_GEST_ID_REG register
  * @retval Component status
  */
int32_t  ft5336_gest_id(ft5336_ctx_t *ctx, uint8_t *value)
{
90005d88:	b410      	push	{r4}
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
90005d8a:	2301      	movs	r3, #1
{
90005d8c:	460a      	mov	r2, r1
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
90005d8e:	e9d0 4001 	ldrd	r4, r0, [r0, #4]
90005d92:	4619      	mov	r1, r3
90005d94:	46a4      	mov	ip, r4
  return ft5336_read_reg(ctx, FT5336_GEST_ID_REG, (uint8_t *)value, 1);
}
90005d96:	f85d 4b04 	ldr.w	r4, [sp], #4
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
90005d9a:	4760      	bx	ip

90005d9c <ft5336_td_status>:
  * @param  ctx Component context 
  * @param  value pointer to the value of Touch Data Status register
  * @retval Component status
  */
int32_t  ft5336_td_status(ft5336_ctx_t *ctx, uint8_t *value)
{
90005d9c:	b538      	push	{r3, r4, r5, lr}
90005d9e:	460c      	mov	r4, r1
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
90005da0:	2301      	movs	r3, #1
90005da2:	2102      	movs	r1, #2
90005da4:	4622      	mov	r2, r4
90005da6:	e9d0 5001 	ldrd	r5, r0, [r0, #4]
90005daa:	47a8      	blx	r5
  int32_t ret;
  
  ret = ft5336_read_reg(ctx, FT5336_TD_STAT_REG, (uint8_t *)value, 1);
  
  if(ret == 0)
90005dac:	b918      	cbnz	r0, 90005db6 <ft5336_td_status+0x1a>
  {
    *value &= FT5336_TD_STATUS_BIT_MASK; 
90005dae:	7823      	ldrb	r3, [r4, #0]
90005db0:	f003 030f 	and.w	r3, r3, #15
90005db4:	7023      	strb	r3, [r4, #0]
    *value = *value >> FT5336_TD_STATUS_BIT_POSITION; 
  }
  
  return ret;
}
90005db6:	bd38      	pop	{r3, r4, r5, pc}

90005db8 <ft5336_radian_value>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_RADIAN_VALUE_REG register
  * @retval Component status
  */
int32_t  ft5336_radian_value(ft5336_ctx_t *ctx, uint8_t value)
{
90005db8:	b510      	push	{r4, lr}
90005dba:	460c      	mov	r4, r1
90005dbc:	b082      	sub	sp, #8
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
90005dbe:	2301      	movs	r3, #1
90005dc0:	2191      	movs	r1, #145	; 0x91
{
90005dc2:	f88d 4007 	strb.w	r4, [sp, #7]
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
90005dc6:	f10d 0207 	add.w	r2, sp, #7
90005dca:	6804      	ldr	r4, [r0, #0]
90005dcc:	6880      	ldr	r0, [r0, #8]
90005dce:	47a0      	blx	r4
  return ft5336_write_reg(ctx, FT5336_RADIAN_VALUE_REG, &value, 1);
}
90005dd0:	b002      	add	sp, #8
90005dd2:	bd10      	pop	{r4, pc}

90005dd4 <ft5336_offset_left_right>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_OFFSET_LR_REG register
  * @retval Component status
  */
int32_t  ft5336_offset_left_right(ft5336_ctx_t *ctx, uint8_t value)
{
90005dd4:	b510      	push	{r4, lr}
90005dd6:	460c      	mov	r4, r1
90005dd8:	b082      	sub	sp, #8
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
90005dda:	2301      	movs	r3, #1
90005ddc:	2192      	movs	r1, #146	; 0x92
{
90005dde:	f88d 4007 	strb.w	r4, [sp, #7]
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
90005de2:	f10d 0207 	add.w	r2, sp, #7
90005de6:	6804      	ldr	r4, [r0, #0]
90005de8:	6880      	ldr	r0, [r0, #8]
90005dea:	47a0      	blx	r4
  return ft5336_write_reg(ctx, FT5336_OFFSET_LR_REG, &value, 1);
}
90005dec:	b002      	add	sp, #8
90005dee:	bd10      	pop	{r4, pc}

90005df0 <ft5336_offset_up_down>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_OFFSET_UD_REG register
  * @retval Component status
  */
int32_t  ft5336_offset_up_down(ft5336_ctx_t *ctx, uint8_t value)
{
90005df0:	b510      	push	{r4, lr}
90005df2:	460c      	mov	r4, r1
90005df4:	b082      	sub	sp, #8
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
90005df6:	2301      	movs	r3, #1
90005df8:	2193      	movs	r1, #147	; 0x93
{
90005dfa:	f88d 4007 	strb.w	r4, [sp, #7]
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
90005dfe:	f10d 0207 	add.w	r2, sp, #7
90005e02:	6804      	ldr	r4, [r0, #0]
90005e04:	6880      	ldr	r0, [r0, #8]
90005e06:	47a0      	blx	r4
  return ft5336_write_reg(ctx, FT5336_OFFSET_UD_REG, &value, 1);
}
90005e08:	b002      	add	sp, #8
90005e0a:	bd10      	pop	{r4, pc}

90005e0c <ft5336_disatnce_left_right>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_DISTANCE_LR_REG register
  * @retval Component status
  */
int32_t  ft5336_disatnce_left_right(ft5336_ctx_t *ctx, uint8_t value)
{
90005e0c:	b510      	push	{r4, lr}
90005e0e:	460c      	mov	r4, r1
90005e10:	b082      	sub	sp, #8
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
90005e12:	2301      	movs	r3, #1
90005e14:	2194      	movs	r1, #148	; 0x94
{
90005e16:	f88d 4007 	strb.w	r4, [sp, #7]
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
90005e1a:	f10d 0207 	add.w	r2, sp, #7
90005e1e:	6804      	ldr	r4, [r0, #0]
90005e20:	6880      	ldr	r0, [r0, #8]
90005e22:	47a0      	blx	r4
  return ft5336_write_reg(ctx, FT5336_DISTANCE_LR_REG, &value, 1);
}
90005e24:	b002      	add	sp, #8
90005e26:	bd10      	pop	{r4, pc}

90005e28 <ft5336_distance_up_down>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_DISTANCE_UD_REG register
  * @retval Component status
  */
int32_t  ft5336_distance_up_down(ft5336_ctx_t *ctx, uint8_t value)
{
90005e28:	b510      	push	{r4, lr}
90005e2a:	460c      	mov	r4, r1
90005e2c:	b082      	sub	sp, #8
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
90005e2e:	2301      	movs	r3, #1
90005e30:	2195      	movs	r1, #149	; 0x95
{
90005e32:	f88d 4007 	strb.w	r4, [sp, #7]
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
90005e36:	f10d 0207 	add.w	r2, sp, #7
90005e3a:	6804      	ldr	r4, [r0, #0]
90005e3c:	6880      	ldr	r0, [r0, #8]
90005e3e:	47a0      	blx	r4
  return ft5336_write_reg(ctx, FT5336_DISTANCE_UD_REG, &value, 1);
}
90005e40:	b002      	add	sp, #8
90005e42:	bd10      	pop	{r4, pc}

90005e44 <ft5336_distance_zoom>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_DISTANCE_ZOOM_REG register
  * @retval Component status
  */
int32_t  ft5336_distance_zoom(ft5336_ctx_t *ctx, uint8_t value)
{
90005e44:	b510      	push	{r4, lr}
90005e46:	460c      	mov	r4, r1
90005e48:	b082      	sub	sp, #8
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
90005e4a:	2301      	movs	r3, #1
90005e4c:	2196      	movs	r1, #150	; 0x96
{
90005e4e:	f88d 4007 	strb.w	r4, [sp, #7]
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
90005e52:	f10d 0207 	add.w	r2, sp, #7
90005e56:	6804      	ldr	r4, [r0, #0]
90005e58:	6880      	ldr	r0, [r0, #8]
90005e5a:	47a0      	blx	r4
  return ft5336_write_reg(ctx, FT5336_DISTANCE_ZOOM_REG, &value, 1);
}
90005e5c:	b002      	add	sp, #8
90005e5e:	bd10      	pop	{r4, pc}

90005e60 <ft5336_g_mode>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_GMODE_REG register
  * @retval Component status
  */
int32_t  ft5336_g_mode(ft5336_ctx_t *ctx, uint8_t value)
{
90005e60:	b510      	push	{r4, lr}
90005e62:	460c      	mov	r4, r1
90005e64:	b082      	sub	sp, #8
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
90005e66:	2301      	movs	r3, #1
90005e68:	21a4      	movs	r1, #164	; 0xa4
{
90005e6a:	f88d 4007 	strb.w	r4, [sp, #7]
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
90005e6e:	f10d 0207 	add.w	r2, sp, #7
90005e72:	6804      	ldr	r4, [r0, #0]
90005e74:	6880      	ldr	r0, [r0, #8]
90005e76:	47a0      	blx	r4
  return ft5336_write_reg(ctx, FT5336_GMODE_REG, &value, 1);
}
90005e78:	b002      	add	sp, #8
90005e7a:	bd10      	pop	{r4, pc}

90005e7c <ft5336_chip_id>:
  * @param  ctx Component context 
  * @param  value Pointer to FT5336_CHIP_ID_REG register value
  * @retval Component status
  */
int32_t  ft5336_chip_id(ft5336_ctx_t *ctx, uint8_t *value)
{
90005e7c:	b410      	push	{r4}
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
90005e7e:	e9d0 4001 	ldrd	r4, r0, [r0, #4]
{
90005e82:	460a      	mov	r2, r1
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
90005e84:	2301      	movs	r3, #1
90005e86:	46a4      	mov	ip, r4
90005e88:	21a8      	movs	r1, #168	; 0xa8
    *value &= FT5336_CHIP_ID_BIT_MASK; 
    *value = *value >> FT5336_CHIP_ID_BIT_POSITION; 
  }
  
  return ret;
}
90005e8a:	f85d 4b04 	ldr.w	r4, [sp], #4
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
90005e8e:	4760      	bx	ip

90005e90 <MT48LC4M32B2_Init>:
  * @param  Ctx : Component object pointer
  * @param  pRegMode : Pointer to Register Mode stucture
  * @retval error status
  */
int32_t MT48LC4M32B2_Init(SDRAM_HandleTypeDef *Ctx, MT48LC4M32B2_Context_t *pRegMode) 
{
90005e90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  int32_t ret = MT48LC4M32B2_ERROR;
  
  /* Step 1: Configure a clock configuration enable command */
  if(MT48LC4M32B2_ClockEnable(Ctx, pRegMode->TargetBank) == MT48LC4M32B2_OK)
90005e92:	680b      	ldr	r3, [r1, #0]
{
90005e94:	460d      	mov	r5, r1
  * @param  Interface : Could be FMC_SDRAM_CMD_TARGET_BANK1 or FMC_SDRAM_CMD_TARGET_BANK2
  * @retval error status
  */
int32_t MT48LC4M32B2_ClockEnable(SDRAM_HandleTypeDef *Ctx, uint32_t Interface) 
{
  Command.CommandMode            = MT48LC4M32B2_CLK_ENABLE_CMD;
90005e96:	4c2a      	ldr	r4, [pc, #168]	; (90005f40 <MT48LC4M32B2_Init+0xb0>)
  Command.CommandTarget          = Interface;
  Command.AutoRefreshNumber      = 1;
  Command.ModeRegisterDefinition = 0;

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
90005e98:	f64f 72ff 	movw	r2, #65535	; 0xffff
{
90005e9c:	4607      	mov	r7, r0
  Command.CommandTarget          = Interface;
90005e9e:	6063      	str	r3, [r4, #4]
  Command.ModeRegisterDefinition = 0;
90005ea0:	2300      	movs	r3, #0
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
90005ea2:	4621      	mov	r1, r4
  Command.ModeRegisterDefinition = 0;
90005ea4:	60e3      	str	r3, [r4, #12]
  Command.CommandMode            = MT48LC4M32B2_CLK_ENABLE_CMD;
90005ea6:	2301      	movs	r3, #1
90005ea8:	6023      	str	r3, [r4, #0]
  Command.AutoRefreshNumber      = 1;
90005eaa:	60a3      	str	r3, [r4, #8]
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
90005eac:	f006 ffca 	bl	9000ce44 <HAL_SDRAM_SendCommand>
90005eb0:	2800      	cmp	r0, #0
90005eb2:	d142      	bne.n	90005f3a <MT48LC4M32B2_Init+0xaa>
  * @retval MT48LC4M32B2_OK
  */
static int32_t MT48LC4M32B2_Delay(uint32_t Delay)
{  
  uint32_t tickstart;
  tickstart = HAL_GetTick();
90005eb4:	f000 ff46 	bl	90006d44 <HAL_GetTick>
90005eb8:	4606      	mov	r6, r0
  while((HAL_GetTick() - tickstart) < Delay)
90005eba:	f000 ff43 	bl	90006d44 <HAL_GetTick>
90005ebe:	4286      	cmp	r6, r0
90005ec0:	d0fb      	beq.n	90005eba <MT48LC4M32B2_Init+0x2a>
  Command.CommandMode            = MT48LC4M32B2_PALL_CMD;
90005ec2:	2302      	movs	r3, #2
    if(MT48LC4M32B2_Precharge(Ctx, pRegMode->TargetBank) == MT48LC4M32B2_OK)
90005ec4:	682a      	ldr	r2, [r5, #0]
  Command.AutoRefreshNumber      = 1;
90005ec6:	2601      	movs	r6, #1
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
90005ec8:	491d      	ldr	r1, [pc, #116]	; (90005f40 <MT48LC4M32B2_Init+0xb0>)
  Command.CommandMode            = MT48LC4M32B2_PALL_CMD;
90005eca:	6023      	str	r3, [r4, #0]
  Command.ModeRegisterDefinition = 0;
90005ecc:	2300      	movs	r3, #0
  Command.CommandTarget          = Interface;
90005ece:	6062      	str	r2, [r4, #4]
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
90005ed0:	4638      	mov	r0, r7
90005ed2:	f64f 72ff 	movw	r2, #65535	; 0xffff
  Command.AutoRefreshNumber      = 1;
90005ed6:	60a6      	str	r6, [r4, #8]
  Command.ModeRegisterDefinition = 0;
90005ed8:	60e3      	str	r3, [r4, #12]
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
90005eda:	f006 ffb3 	bl	9000ce44 <HAL_SDRAM_SendCommand>
90005ede:	bb60      	cbnz	r0, 90005f3a <MT48LC4M32B2_Init+0xaa>
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
90005ee0:	4917      	ldr	r1, [pc, #92]	; (90005f40 <MT48LC4M32B2_Init+0xb0>)
  Command.CommandMode            = RefreshMode;
90005ee2:	e9d5 3200 	ldrd	r3, r2, [r5]
  Command.ModeRegisterDefinition = 0;
90005ee6:	60e0      	str	r0, [r4, #12]
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
90005ee8:	4638      	mov	r0, r7
  Command.CommandMode            = RefreshMode;
90005eea:	e9c4 2300 	strd	r2, r3, [r4]
  Command.AutoRefreshNumber      = 8;
90005eee:	2308      	movs	r3, #8
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
90005ef0:	f64f 72ff 	movw	r2, #65535	; 0xffff
  Command.AutoRefreshNumber      = 8;
90005ef4:	60a3      	str	r3, [r4, #8]
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
90005ef6:	f006 ffa5 	bl	9000ce44 <HAL_SDRAM_SendCommand>
90005efa:	b9f0      	cbnz	r0, 90005f3a <MT48LC4M32B2_Init+0xaa>
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
90005efc:	4910      	ldr	r1, [pc, #64]	; (90005f40 <MT48LC4M32B2_Init+0xb0>)
90005efe:	4638      	mov	r0, r7
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
90005f00:	e9d5 3203 	ldrd	r3, r2, [r5, #12]
90005f04:	4313      	orrs	r3, r2
                     pRegMode->BurstType     |\
90005f06:	696a      	ldr	r2, [r5, #20]
90005f08:	4313      	orrs	r3, r2
                     pRegMode->CASLatency    |\
90005f0a:	69aa      	ldr	r2, [r5, #24]
90005f0c:	4313      	orrs	r3, r2
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
90005f0e:	69ea      	ldr	r2, [r5, #28]
90005f10:	4313      	orrs	r3, r2
  Command.CommandTarget          = pRegMode->TargetBank;
90005f12:	682a      	ldr	r2, [r5, #0]
  Command.ModeRegisterDefinition = tmpmrd;
90005f14:	60e3      	str	r3, [r4, #12]
  Command.CommandMode            = MT48LC4M32B2_LOAD_MODE_CMD;
90005f16:	2304      	movs	r3, #4
  Command.CommandTarget          = pRegMode->TargetBank;
90005f18:	e9c4 2601 	strd	r2, r6, [r4, #4]
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
90005f1c:	f64f 72ff 	movw	r2, #65535	; 0xffff
  Command.CommandMode            = MT48LC4M32B2_LOAD_MODE_CMD;
90005f20:	6023      	str	r3, [r4, #0]
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
90005f22:	f006 ff8f 	bl	9000ce44 <HAL_SDRAM_SendCommand>
90005f26:	b940      	cbnz	r0, 90005f3a <MT48LC4M32B2_Init+0xaa>
  if(HAL_SDRAM_ProgramRefreshRate(Ctx, RefreshCount) != HAL_OK)
90005f28:	68a9      	ldr	r1, [r5, #8]
90005f2a:	4638      	mov	r0, r7
90005f2c:	f006 ffaa 	bl	9000ce84 <HAL_SDRAM_ProgramRefreshRate>
90005f30:	3800      	subs	r0, #0
90005f32:	bf18      	it	ne
90005f34:	2001      	movne	r0, #1
90005f36:	4240      	negs	r0, r0
}
90005f38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  int32_t ret = MT48LC4M32B2_ERROR;
90005f3a:	f04f 30ff 	mov.w	r0, #4294967295
}
90005f3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
90005f40:	2400b214 	.word	0x2400b214

90005f44 <BSP_I2C4_DeInit>:
  */
int32_t BSP_I2C4_DeInit(void)
{
  int32_t ret  = BSP_ERROR_NONE;

  I2c4InitCounter--;
90005f44:	4a10      	ldr	r2, [pc, #64]	; (90005f88 <BSP_I2C4_DeInit+0x44>)
{
90005f46:	b508      	push	{r3, lr}
  I2c4InitCounter--;
90005f48:	6813      	ldr	r3, [r2, #0]
90005f4a:	3b01      	subs	r3, #1
90005f4c:	6013      	str	r3, [r2, #0]

  if (I2c4InitCounter == 0U)
90005f4e:	b10b      	cbz	r3, 90005f54 <BSP_I2C4_DeInit+0x10>
  int32_t ret  = BSP_ERROR_NONE;
90005f50:	2000      	movs	r0, #0
      ret = BSP_ERROR_BUS_FAILURE;
    }
  }

  return ret;
}
90005f52:	bd08      	pop	{r3, pc}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phi2c);

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = BUS_I2C4_SCL_PIN;
  HAL_GPIO_DeInit(BUS_I2C4_SCL_GPIO_PORT, gpio_init_structure.Pin );
90005f54:	f44f 5180 	mov.w	r1, #4096	; 0x1000
90005f58:	480c      	ldr	r0, [pc, #48]	; (90005f8c <BSP_I2C4_DeInit+0x48>)
90005f5a:	f002 f943 	bl	900081e4 <HAL_GPIO_DeInit>
  gpio_init_structure.Pin = BUS_I2C4_SDA_PIN;
  HAL_GPIO_DeInit(BUS_I2C4_SDA_GPIO_PORT, gpio_init_structure.Pin);
90005f5e:	480b      	ldr	r0, [pc, #44]	; (90005f8c <BSP_I2C4_DeInit+0x48>)
90005f60:	f44f 5100 	mov.w	r1, #8192	; 0x2000
90005f64:	f002 f93e 	bl	900081e4 <HAL_GPIO_DeInit>

  /* Disable I2C clock */
  BUS_I2C4_CLK_DISABLE();
90005f68:	4a09      	ldr	r2, [pc, #36]	; (90005f90 <BSP_I2C4_DeInit+0x4c>)
    if (HAL_I2C_DeInit(&hbus_i2c4) != HAL_OK)
90005f6a:	480a      	ldr	r0, [pc, #40]	; (90005f94 <BSP_I2C4_DeInit+0x50>)
  BUS_I2C4_CLK_DISABLE();
90005f6c:	f8d2 30f4 	ldr.w	r3, [r2, #244]	; 0xf4
90005f70:	f023 0380 	bic.w	r3, r3, #128	; 0x80
90005f74:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
    if (HAL_I2C_DeInit(&hbus_i2c4) != HAL_OK)
90005f78:	f002 fbdc 	bl	90008734 <HAL_I2C_DeInit>
90005f7c:	2800      	cmp	r0, #0
90005f7e:	d0e7      	beq.n	90005f50 <BSP_I2C4_DeInit+0xc>
      ret = BSP_ERROR_BUS_FAILURE;
90005f80:	f06f 0007 	mvn.w	r0, #7
}
90005f84:	bd08      	pop	{r3, pc}
90005f86:	bf00      	nop
90005f88:	2400b224 	.word	0x2400b224
90005f8c:	58020c00 	.word	0x58020c00
90005f90:	58024400 	.word	0x58024400
90005f94:	2400bc2c 	.word	0x2400bc2c

90005f98 <MX_I2C4_Init>:
  hI2c->Init.OwnAddress1      = 0;
90005f98:	2300      	movs	r3, #0
  hI2c->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
90005f9a:	2201      	movs	r2, #1
{
90005f9c:	b510      	push	{r4, lr}
  hI2c->Init.OwnAddress1      = 0;
90005f9e:	e9c0 1301 	strd	r1, r3, [r0, #4]
  hI2c->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
90005fa2:	e9c0 2303 	strd	r2, r3, [r0, #12]
  hI2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
90005fa6:	e9c0 3305 	strd	r3, r3, [r0, #20]
  hI2c->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
90005faa:	e9c0 3307 	strd	r3, r3, [r0, #28]
{
90005fae:	4604      	mov	r4, r0
  if (HAL_I2C_Init(hI2c) != HAL_OK)
90005fb0:	f002 fb68 	bl	90008684 <HAL_I2C_Init>
90005fb4:	b108      	cbz	r0, 90005fba <MX_I2C4_Init+0x22>
    status = HAL_ERROR;
90005fb6:	2001      	movs	r0, #1
}
90005fb8:	bd10      	pop	{r4, pc}
    if (HAL_I2CEx_ConfigAnalogFilter(hI2c, analog_filter) != HAL_OK)
90005fba:	4601      	mov	r1, r0
90005fbc:	4620      	mov	r0, r4
90005fbe:	f002 fe77 	bl	90008cb0 <HAL_I2CEx_ConfigAnalogFilter>
90005fc2:	2800      	cmp	r0, #0
90005fc4:	d1f7      	bne.n	90005fb6 <MX_I2C4_Init+0x1e>
      if (HAL_I2CEx_ConfigDigitalFilter(hI2c, I2C_DIGITAL_FILTER_COEF) != HAL_OK)
90005fc6:	4601      	mov	r1, r0
90005fc8:	4620      	mov	r0, r4
90005fca:	f002 fe9b 	bl	90008d04 <HAL_I2CEx_ConfigDigitalFilter>
    status = HAL_ERROR;
90005fce:	3800      	subs	r0, #0
90005fd0:	bf18      	it	ne
90005fd2:	2001      	movne	r0, #1
}
90005fd4:	bd10      	pop	{r4, pc}
90005fd6:	bf00      	nop

90005fd8 <BSP_I2C4_Init>:
  if (I2c4InitCounter == 0U)
90005fd8:	4b99      	ldr	r3, [pc, #612]	; (90006240 <BSP_I2C4_Init+0x268>)
  hbus_i2c4.Instance = BUS_I2C4;
90005fda:	489a      	ldr	r0, [pc, #616]	; (90006244 <BSP_I2C4_Init+0x26c>)
90005fdc:	4a9a      	ldr	r2, [pc, #616]	; (90006248 <BSP_I2C4_Init+0x270>)
  if (I2c4InitCounter == 0U)
90005fde:	6819      	ldr	r1, [r3, #0]
{
90005fe0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90005fe4:	b09f      	sub	sp, #124	; 0x7c
  hbus_i2c4.Instance = BUS_I2C4;
90005fe6:	6002      	str	r2, [r0, #0]
  if (I2c4InitCounter == 0U)
90005fe8:	9103      	str	r1, [sp, #12]
90005fea:	b119      	cbz	r1, 90005ff4 <BSP_I2C4_Init+0x1c>
  int32_t ret = BSP_ERROR_NONE;
90005fec:	2000      	movs	r0, #0
}
90005fee:	b01f      	add	sp, #124	; 0x7c
90005ff0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    I2c4InitCounter++;
90005ff4:	2201      	movs	r2, #1
90005ff6:	601a      	str	r2, [r3, #0]
    if (HAL_I2C_GetState(&hbus_i2c4) == HAL_I2C_STATE_RESET)
90005ff8:	f002 fe54 	bl	90008ca4 <HAL_I2C_GetState>
90005ffc:	2800      	cmp	r0, #0
90005ffe:	d1f5      	bne.n	90005fec <BSP_I2C4_Init+0x14>
  BUS_I2C4_SCL_GPIO_CLK_ENABLE();
90006000:	4c92      	ldr	r4, [pc, #584]	; (9000624c <BSP_I2C4_Init+0x274>)
  gpio_init_structure.Pin       = BUS_I2C4_SCL_PIN;
90006002:	f44f 5080 	mov.w	r0, #4096	; 0x1000
90006006:	2112      	movs	r1, #18
  gpio_init_structure.Alternate = BUS_I2C4_SCL_AF;
90006008:	2504      	movs	r5, #4
  BUS_I2C4_SCL_GPIO_CLK_ENABLE();
9000600a:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
  gpio_init_structure.Pin       = BUS_I2C4_SCL_PIN;
9000600e:	2600      	movs	r6, #0
90006010:	2702      	movs	r7, #2
  BUS_I2C4_SCL_GPIO_CLK_ENABLE();
90006012:	f043 0308 	orr.w	r3, r3, #8
90006016:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
9000601a:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
9000601e:	f003 0308 	and.w	r3, r3, #8
90006022:	9315      	str	r3, [sp, #84]	; 0x54
90006024:	9b15      	ldr	r3, [sp, #84]	; 0x54
  BUS_I2C4_SDA_GPIO_CLK_ENABLE();
90006026:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
9000602a:	f043 0308 	orr.w	r3, r3, #8
9000602e:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
90006032:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
  gpio_init_structure.Alternate = BUS_I2C4_SCL_AF;
90006036:	951c      	str	r5, [sp, #112]	; 0x70
  BUS_I2C4_SDA_GPIO_CLK_ENABLE();
90006038:	f003 0308 	and.w	r3, r3, #8
  gpio_init_structure.Pin       = BUS_I2C4_SCL_PIN;
9000603c:	e9cd 0118 	strd	r0, r1, [sp, #96]	; 0x60
  BUS_I2C4_SDA_GPIO_CLK_ENABLE();
90006040:	9316      	str	r3, [sp, #88]	; 0x58
  HAL_GPIO_Init(BUS_I2C4_SCL_GPIO_PORT, &gpio_init_structure);
90006042:	a918      	add	r1, sp, #96	; 0x60
90006044:	4882      	ldr	r0, [pc, #520]	; (90006250 <BSP_I2C4_Init+0x278>)
  BUS_I2C4_SDA_GPIO_CLK_ENABLE();
90006046:	9b16      	ldr	r3, [sp, #88]	; 0x58
  gpio_init_structure.Pin       = BUS_I2C4_SCL_PIN;
90006048:	e9cd 671a 	strd	r6, r7, [sp, #104]	; 0x68
  HAL_GPIO_Init(BUS_I2C4_SCL_GPIO_PORT, &gpio_init_structure);
9000604c:	f001 ff98 	bl	90007f80 <HAL_GPIO_Init>
  gpio_init_structure.Pin       = BUS_I2C4_SDA_PIN;
90006050:	2312      	movs	r3, #18
90006052:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  HAL_GPIO_Init(BUS_I2C4_SDA_GPIO_PORT, &gpio_init_structure);
90006056:	a918      	add	r1, sp, #96	; 0x60
90006058:	487d      	ldr	r0, [pc, #500]	; (90006250 <BSP_I2C4_Init+0x278>)
  gpio_init_structure.Alternate = BUS_I2C4_SDA_AF;
9000605a:	951c      	str	r5, [sp, #112]	; 0x70
  gpio_init_structure.Pin       = BUS_I2C4_SDA_PIN;
9000605c:	e9cd 2318 	strd	r2, r3, [sp, #96]	; 0x60
90006060:	e9cd 671a 	strd	r6, r7, [sp, #104]	; 0x68
  HAL_GPIO_Init(BUS_I2C4_SDA_GPIO_PORT, &gpio_init_structure);
90006064:	f001 ff8c 	bl	90007f80 <HAL_GPIO_Init>
  BUS_I2C4_CLK_ENABLE();
90006068:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
9000606c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
90006070:	f8c4 30f4 	str.w	r3, [r4, #244]	; 0xf4
90006074:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
90006078:	f003 0380 	and.w	r3, r3, #128	; 0x80
9000607c:	9317      	str	r3, [sp, #92]	; 0x5c
9000607e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  BUS_I2C4_FORCE_RESET();
90006080:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
90006084:	f043 0380 	orr.w	r3, r3, #128	; 0x80
90006088:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
  BUS_I2C4_RELEASE_RESET();
9000608c:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
90006090:	f023 0380 	bic.w	r3, r3, #128	; 0x80
90006094:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
        if (MX_I2C4_Init(&hbus_i2c4, I2C_GetTiming(HAL_RCC_GetPCLK2Freq(), BUS_I2C4_FREQUENCY)) != HAL_OK)
90006098:	f005 fb68 	bl	9000b76c <HAL_RCC_GetPCLK2Freq>
  if((clock_src_freq != 0U) && (i2c_freq != 0U))
9000609c:	2800      	cmp	r0, #0
9000609e:	f000 81f6 	beq.w	9000648e <BSP_I2C4_Init+0x4b6>
  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
900060a2:	4b6c      	ldr	r3, [pc, #432]	; (90006254 <BSP_I2C4_Init+0x27c>)
  uint32_t prev_presc = I2C_PRESC_MAX;
900060a4:	f04f 0b10 	mov.w	fp, #16
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
900060a8:	9e03      	ldr	r6, [sp, #12]
  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
900060aa:	eb03 0350 	add.w	r3, r3, r0, lsr #1
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
900060ae:	f8df a1ac 	ldr.w	sl, [pc, #428]	; 9000625c <BSP_I2C4_Init+0x284>
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
900060b2:	4635      	mov	r5, r6
  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
900060b4:	fbb3 f7f0 	udiv	r7, r3, r0
    (int32_t)tafdel_max - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 4) * (int32_t)ti2cclk);
900060b8:	00bb      	lsls	r3, r7, #2
  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
900060ba:	9702      	str	r7, [sp, #8]
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
900060bc:	eb07 0247 	add.w	r2, r7, r7, lsl #1
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
900060c0:	f5c3 7cc3 	rsb	ip, r3, #390	; 0x186
900060c4:	4b64      	ldr	r3, [pc, #400]	; (90006258 <BSP_I2C4_Init+0x280>)
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
900060c6:	f1c2 0432 	rsb	r4, r2, #50	; 0x32
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
900060ca:	0079      	lsls	r1, r7, #1
900060cc:	681b      	ldr	r3, [r3, #0]
900060ce:	ea2c 7cec 	bic.w	ip, ip, ip, asr #31
900060d2:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
900060d6:	9113      	str	r1, [sp, #76]	; 0x4c
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
900060d8:	4699      	mov	r9, r3
900060da:	930a      	str	r3, [sp, #40]	; 0x28
          if ((tsdadel >= (uint32_t)tsdadel_min) && (tsdadel <= (uint32_t)tsdadel_max))
900060dc:	ebb4 0f47 	cmp.w	r4, r7, lsl #1
900060e0:	46b8      	mov	r8, r7
900060e2:	eb07 0347 	add.w	r3, r7, r7, lsl #1
900060e6:	bf94      	ite	ls
900060e8:	2101      	movls	r1, #1
900060ea:	2100      	movhi	r1, #0
900060ec:	ebbc 0f47 	cmp.w	ip, r7, lsl #1
900060f0:	f001 0101 	and.w	r1, r1, #1
900060f4:	eb07 0287 	add.w	r2, r7, r7, lsl #2
900060f8:	bf38      	it	cc
900060fa:	2100      	movcc	r1, #0
900060fc:	429c      	cmp	r4, r3
900060fe:	ebc7 00c7 	rsb	r0, r7, r7, lsl #3
90006102:	9105      	str	r1, [sp, #20]
90006104:	bf8c      	ite	hi
90006106:	2100      	movhi	r1, #0
90006108:	2101      	movls	r1, #1
9000610a:	459c      	cmp	ip, r3
9000610c:	bf38      	it	cc
9000610e:	2100      	movcc	r1, #0
90006110:	ebb4 0f87 	cmp.w	r4, r7, lsl #2
90006114:	9106      	str	r1, [sp, #24]
90006116:	eb07 0142 	add.w	r1, r7, r2, lsl #1
9000611a:	9104      	str	r1, [sp, #16]
9000611c:	eb07 0183 	add.w	r1, r7, r3, lsl #2
90006120:	9111      	str	r1, [sp, #68]	; 0x44
90006122:	bf94      	ite	ls
90006124:	2101      	movls	r1, #1
90006126:	2100      	movhi	r1, #0
90006128:	ebbc 0f87 	cmp.w	ip, r7, lsl #2
9000612c:	f001 0e01 	and.w	lr, r1, #1
90006130:	bf38      	it	cc
90006132:	f04f 0e00 	movcc.w	lr, #0
90006136:	4294      	cmp	r4, r2
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
90006138:	f04f 0100 	mov.w	r1, #0
          if ((tsdadel >= (uint32_t)tsdadel_min) && (tsdadel <= (uint32_t)tsdadel_max))
9000613c:	f8cd e01c 	str.w	lr, [sp, #28]
90006140:	bf8c      	ite	hi
90006142:	f04f 0e00 	movhi.w	lr, #0
90006146:	f04f 0e01 	movls.w	lr, #1
9000614a:	4594      	cmp	ip, r2
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
9000614c:	9101      	str	r1, [sp, #4]
          if ((tsdadel >= (uint32_t)tsdadel_min) && (tsdadel <= (uint32_t)tsdadel_max))
9000614e:	bf38      	it	cc
90006150:	f04f 0e00 	movcc.w	lr, #0
90006154:	ebb4 0f43 	cmp.w	r4, r3, lsl #1
90006158:	bf98      	it	ls
9000615a:	2101      	movls	r1, #1
9000615c:	ebbc 0f43 	cmp.w	ip, r3, lsl #1
90006160:	f8cd e020 	str.w	lr, [sp, #32]
90006164:	f001 0101 	and.w	r1, r1, #1
90006168:	bf38      	it	cc
9000616a:	2100      	movcc	r1, #0
9000616c:	4284      	cmp	r4, r0
9000616e:	9109      	str	r1, [sp, #36]	; 0x24
90006170:	4601      	mov	r1, r0
90006172:	bf8c      	ite	hi
90006174:	2000      	movhi	r0, #0
90006176:	2001      	movls	r0, #1
90006178:	458c      	cmp	ip, r1
9000617a:	bf38      	it	cc
9000617c:	2000      	movcc	r0, #0
9000617e:	ebb4 0fc7 	cmp.w	r4, r7, lsl #3
90006182:	900b      	str	r0, [sp, #44]	; 0x2c
90006184:	bf94      	ite	ls
90006186:	2001      	movls	r0, #1
90006188:	2000      	movhi	r0, #0
9000618a:	ebbc 0fc7 	cmp.w	ip, r7, lsl #3
9000618e:	f000 0001 	and.w	r0, r0, #1
90006192:	bf38      	it	cc
90006194:	2000      	movcc	r0, #0
90006196:	900c      	str	r0, [sp, #48]	; 0x30
90006198:	eb07 00c7 	add.w	r0, r7, r7, lsl #3
9000619c:	4284      	cmp	r4, r0
9000619e:	bf8c      	ite	hi
900061a0:	f04f 0e00 	movhi.w	lr, #0
900061a4:	f04f 0e01 	movls.w	lr, #1
900061a8:	4584      	cmp	ip, r0
900061aa:	bf38      	it	cc
900061ac:	f04f 0e00 	movcc.w	lr, #0
900061b0:	ebb4 0f42 	cmp.w	r4, r2, lsl #1
900061b4:	4670      	mov	r0, lr
900061b6:	bf94      	ite	ls
900061b8:	2001      	movls	r0, #1
900061ba:	2000      	movhi	r0, #0
900061bc:	ebbc 0f42 	cmp.w	ip, r2, lsl #1
900061c0:	f8cd e034 	str.w	lr, [sp, #52]	; 0x34
900061c4:	f04f 0e00 	mov.w	lr, #0
900061c8:	f000 0001 	and.w	r0, r0, #1
900061cc:	bf38      	it	cc
900061ce:	2000      	movcc	r0, #0
900061d0:	900e      	str	r0, [sp, #56]	; 0x38
900061d2:	9804      	ldr	r0, [sp, #16]
900061d4:	4284      	cmp	r4, r0
900061d6:	4602      	mov	r2, r0
900061d8:	bf8c      	ite	hi
900061da:	2200      	movhi	r2, #0
900061dc:	2201      	movls	r2, #1
900061de:	4584      	cmp	ip, r0
900061e0:	bf38      	it	cc
900061e2:	2200      	movcc	r2, #0
900061e4:	ebb4 0f83 	cmp.w	r4, r3, lsl #2
900061e8:	920f      	str	r2, [sp, #60]	; 0x3c
900061ea:	bf94      	ite	ls
900061ec:	2201      	movls	r2, #1
900061ee:	2200      	movhi	r2, #0
900061f0:	ebbc 0f83 	cmp.w	ip, r3, lsl #2
900061f4:	f002 0201 	and.w	r2, r2, #1
900061f8:	bf38      	it	cc
900061fa:	2200      	movcc	r2, #0
900061fc:	9210      	str	r2, [sp, #64]	; 0x40
900061fe:	9a11      	ldr	r2, [sp, #68]	; 0x44
90006200:	4294      	cmp	r4, r2
90006202:	4613      	mov	r3, r2
90006204:	bf8c      	ite	hi
90006206:	2300      	movhi	r3, #0
90006208:	2301      	movls	r3, #1
9000620a:	4594      	cmp	ip, r2
9000620c:	bf38      	it	cc
9000620e:	2300      	movcc	r3, #0
90006210:	ebb4 0f41 	cmp.w	r4, r1, lsl #1
90006214:	9311      	str	r3, [sp, #68]	; 0x44
90006216:	bf94      	ite	ls
90006218:	2301      	movls	r3, #1
9000621a:	2300      	movhi	r3, #0
9000621c:	ebbc 0f41 	cmp.w	ip, r1, lsl #1
90006220:	f003 0301 	and.w	r3, r3, #1
90006224:	bf38      	it	cc
90006226:	2300      	movcc	r3, #0
90006228:	9312      	str	r3, [sp, #72]	; 0x48
9000622a:	ebc7 1307 	rsb	r3, r7, r7, lsl #4
9000622e:	429c      	cmp	r4, r3
90006230:	bf8c      	ite	hi
90006232:	2200      	movhi	r2, #0
90006234:	2201      	movls	r2, #1
90006236:	459c      	cmp	ip, r3
90006238:	bf38      	it	cc
9000623a:	2200      	movcc	r2, #0
9000623c:	9204      	str	r2, [sp, #16]
9000623e:	e014      	b.n	9000626a <BSP_I2C4_Init+0x292>
90006240:	2400b224 	.word	0x2400b224
90006244:	2400bc2c 	.word	0x2400bc2c
90006248:	58001c00 	.word	0x58001c00
9000624c:	58024400 	.word	0x58024400
90006250:	58020c00 	.word	0x58020c00
90006254:	3b9aca00 	.word	0x3b9aca00
90006258:	2400bc28 	.word	0x2400bc28
9000625c:	2400b228 	.word	0x2400b228
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
90006260:	f1be 0f10 	cmp.w	lr, #16
90006264:	44b8      	add	r8, r7
90006266:	f000 826c 	beq.w	90006742 <BSP_I2C4_Init+0x76a>
      if (tscldel >= (uint32_t)tscldel_min)
9000626a:	f5b8 7faf 	cmp.w	r8, #350	; 0x15e
9000626e:	4673      	mov	r3, lr
      uint32_t tscldel = (scldel + 1U) * (presc + 1U) * ti2cclk;
90006270:	f10e 0e01 	add.w	lr, lr, #1
      if (tscldel >= (uint32_t)tscldel_min)
90006274:	d3f4      	bcc.n	90006260 <BSP_I2C4_Init+0x288>
            if(presc != prev_presc)
90006276:	ebbb 0205 	subs.w	r2, fp, r5
9000627a:	bf18      	it	ne
9000627c:	2201      	movne	r2, #1
9000627e:	2c00      	cmp	r4, #0
90006280:	bf18      	it	ne
90006282:	2200      	movne	r2, #0
90006284:	2a00      	cmp	r2, #0
90006286:	f040 824a 	bne.w	9000671e <BSP_I2C4_Init+0x746>
          if ((tsdadel >= (uint32_t)tsdadel_min) && (tsdadel <= (uint32_t)tsdadel_max))
9000628a:	45bc      	cmp	ip, r7
9000628c:	bf34      	ite	cc
9000628e:	2200      	movcc	r2, #0
90006290:	2201      	movcs	r2, #1
90006292:	42bc      	cmp	r4, r7
90006294:	bf88      	it	hi
90006296:	2200      	movhi	r2, #0
            if(presc != prev_presc)
90006298:	45ab      	cmp	fp, r5
9000629a:	bf0c      	ite	eq
9000629c:	2200      	moveq	r2, #0
9000629e:	f002 0201 	andne.w	r2, r2, #1
900062a2:	2a00      	cmp	r2, #0
900062a4:	f000 80fd 	beq.w	900064a2 <BSP_I2C4_Init+0x4ca>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
900062a8:	eb09 0189 	add.w	r1, r9, r9, lsl #2
              I2c_valid_timing_nbr ++;
900062ac:	f109 0901 	add.w	r9, r9, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
900062b0:	2001      	movs	r0, #1
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
900062b2:	f84a 5021 	str.w	r5, [sl, r1, lsl #2]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
900062b6:	f1b9 0f7f 	cmp.w	r9, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
900062ba:	eb0a 0181 	add.w	r1, sl, r1, lsl #2
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
900062be:	6088      	str	r0, [r1, #8]
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
900062c0:	4650      	mov	r0, sl
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
900062c2:	604b      	str	r3, [r1, #4]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
900062c4:	f200 81a5 	bhi.w	90006612 <BSP_I2C4_Init+0x63a>
900062c8:	46ab      	mov	fp, r5
            if(presc != prev_presc)
900062ca:	9906      	ldr	r1, [sp, #24]
900062cc:	45ab      	cmp	fp, r5
900062ce:	bf0c      	ite	eq
900062d0:	2100      	moveq	r1, #0
900062d2:	f001 0101 	andne.w	r1, r1, #1
900062d6:	2900      	cmp	r1, #0
900062d8:	f000 80ff 	beq.w	900064da <BSP_I2C4_Init+0x502>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
900062dc:	eb09 0289 	add.w	r2, r9, r9, lsl #2
              I2c_valid_timing_nbr ++;
900062e0:	f109 0901 	add.w	r9, r9, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
900062e4:	2003      	movs	r0, #3
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
900062e6:	f84a 5022 	str.w	r5, [sl, r2, lsl #2]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
900062ea:	f1b9 0f7f 	cmp.w	r9, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
900062ee:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
900062f2:	6090      	str	r0, [r2, #8]
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
900062f4:	4650      	mov	r0, sl
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
900062f6:	6053      	str	r3, [r2, #4]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
900062f8:	f200 818b 	bhi.w	90006612 <BSP_I2C4_Init+0x63a>
900062fc:	460a      	mov	r2, r1
900062fe:	46ab      	mov	fp, r5
            if(presc != prev_presc)
90006300:	9908      	ldr	r1, [sp, #32]
90006302:	45ab      	cmp	fp, r5
90006304:	bf0c      	ite	eq
90006306:	2100      	moveq	r1, #0
90006308:	f001 0101 	andne.w	r1, r1, #1
9000630c:	2900      	cmp	r1, #0
9000630e:	f000 80ff 	beq.w	90006510 <BSP_I2C4_Init+0x538>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90006312:	eb09 0289 	add.w	r2, r9, r9, lsl #2
              I2c_valid_timing_nbr ++;
90006316:	f109 0901 	add.w	r9, r9, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
9000631a:	2005      	movs	r0, #5
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
9000631c:	f84a 5022 	str.w	r5, [sl, r2, lsl #2]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
90006320:	f1b9 0f7f 	cmp.w	r9, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90006324:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
90006328:	6090      	str	r0, [r2, #8]
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
9000632a:	4650      	mov	r0, sl
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
9000632c:	6053      	str	r3, [r2, #4]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
9000632e:	f200 8170 	bhi.w	90006612 <BSP_I2C4_Init+0x63a>
90006332:	460a      	mov	r2, r1
90006334:	46ab      	mov	fp, r5
            if(presc != prev_presc)
90006336:	990b      	ldr	r1, [sp, #44]	; 0x2c
90006338:	45ab      	cmp	fp, r5
9000633a:	bf0c      	ite	eq
9000633c:	2100      	moveq	r1, #0
9000633e:	f001 0101 	andne.w	r1, r1, #1
90006342:	2900      	cmp	r1, #0
90006344:	f000 80fe 	beq.w	90006544 <BSP_I2C4_Init+0x56c>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90006348:	eb09 0289 	add.w	r2, r9, r9, lsl #2
              I2c_valid_timing_nbr ++;
9000634c:	f109 0901 	add.w	r9, r9, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
90006350:	2007      	movs	r0, #7
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90006352:	f84a 5022 	str.w	r5, [sl, r2, lsl #2]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
90006356:	f1b9 0f7f 	cmp.w	r9, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
9000635a:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
9000635e:	6090      	str	r0, [r2, #8]
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90006360:	4650      	mov	r0, sl
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
90006362:	6053      	str	r3, [r2, #4]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
90006364:	f200 8155 	bhi.w	90006612 <BSP_I2C4_Init+0x63a>
90006368:	460a      	mov	r2, r1
9000636a:	46ab      	mov	fp, r5
            if(presc != prev_presc)
9000636c:	990d      	ldr	r1, [sp, #52]	; 0x34
9000636e:	45ab      	cmp	fp, r5
90006370:	bf0c      	ite	eq
90006372:	2100      	moveq	r1, #0
90006374:	f001 0101 	andne.w	r1, r1, #1
90006378:	2900      	cmp	r1, #0
9000637a:	f000 80fd 	beq.w	90006578 <BSP_I2C4_Init+0x5a0>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
9000637e:	eb09 0289 	add.w	r2, r9, r9, lsl #2
              I2c_valid_timing_nbr ++;
90006382:	f109 0901 	add.w	r9, r9, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
90006386:	2009      	movs	r0, #9
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90006388:	f84a 5022 	str.w	r5, [sl, r2, lsl #2]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
9000638c:	f1b9 0f7f 	cmp.w	r9, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90006390:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
90006394:	6090      	str	r0, [r2, #8]
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90006396:	4650      	mov	r0, sl
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
90006398:	6053      	str	r3, [r2, #4]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
9000639a:	f200 813a 	bhi.w	90006612 <BSP_I2C4_Init+0x63a>
9000639e:	460a      	mov	r2, r1
900063a0:	46ab      	mov	fp, r5
            if(presc != prev_presc)
900063a2:	990f      	ldr	r1, [sp, #60]	; 0x3c
900063a4:	45ab      	cmp	fp, r5
900063a6:	bf0c      	ite	eq
900063a8:	2100      	moveq	r1, #0
900063aa:	f001 0101 	andne.w	r1, r1, #1
900063ae:	2900      	cmp	r1, #0
900063b0:	f000 80fc 	beq.w	900065ac <BSP_I2C4_Init+0x5d4>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
900063b4:	eb09 0289 	add.w	r2, r9, r9, lsl #2
              I2c_valid_timing_nbr ++;
900063b8:	f109 0901 	add.w	r9, r9, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
900063bc:	200b      	movs	r0, #11
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
900063be:	f84a 5022 	str.w	r5, [sl, r2, lsl #2]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
900063c2:	f1b9 0f7f 	cmp.w	r9, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
900063c6:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
900063ca:	6090      	str	r0, [r2, #8]
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
900063cc:	4650      	mov	r0, sl
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
900063ce:	6053      	str	r3, [r2, #4]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
900063d0:	f200 811f 	bhi.w	90006612 <BSP_I2C4_Init+0x63a>
900063d4:	46ab      	mov	fp, r5
            if(presc != prev_presc)
900063d6:	9e11      	ldr	r6, [sp, #68]	; 0x44
900063d8:	455d      	cmp	r5, fp
900063da:	bf0c      	ite	eq
900063dc:	2600      	moveq	r6, #0
900063de:	f006 0601 	andne.w	r6, r6, #1
900063e2:	2e00      	cmp	r6, #0
900063e4:	f000 80fb 	beq.w	900065de <BSP_I2C4_Init+0x606>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
900063e8:	eb09 0289 	add.w	r2, r9, r9, lsl #2
              I2c_valid_timing_nbr ++;
900063ec:	f109 0901 	add.w	r9, r9, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
900063f0:	210d      	movs	r1, #13
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
900063f2:	4650      	mov	r0, sl
900063f4:	f84a 5022 	str.w	r5, [sl, r2, lsl #2]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
900063f8:	f1b9 0f7f 	cmp.w	r9, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
900063fc:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
90006400:	6053      	str	r3, [r2, #4]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
90006402:	6091      	str	r1, [r2, #8]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
90006404:	f200 8105 	bhi.w	90006612 <BSP_I2C4_Init+0x63a>
90006408:	4631      	mov	r1, r6
9000640a:	46ab      	mov	fp, r5
            if(presc != prev_presc)
9000640c:	9e04      	ldr	r6, [sp, #16]
9000640e:	455d      	cmp	r5, fp
90006410:	bf0c      	ite	eq
90006412:	2600      	moveq	r6, #0
90006414:	f006 0601 	andne.w	r6, r6, #1
90006418:	2e00      	cmp	r6, #0
9000641a:	f000 817c 	beq.w	90006716 <BSP_I2C4_Init+0x73e>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
9000641e:	eb09 0289 	add.w	r2, r9, r9, lsl #2
              I2c_valid_timing_nbr ++;
90006422:	f109 0901 	add.w	r9, r9, #1
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90006426:	4650      	mov	r0, sl
90006428:	f84a 5022 	str.w	r5, [sl, r2, lsl #2]
9000642c:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
90006430:	f1b9 0f7f 	cmp.w	r9, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
90006434:	6053      	str	r3, [r2, #4]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
90006436:	f04f 030f 	mov.w	r3, #15
9000643a:	6093      	str	r3, [r2, #8]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
9000643c:	f200 80e9 	bhi.w	90006612 <BSP_I2C4_Init+0x63a>
90006440:	46ab      	mov	fp, r5
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
90006442:	e70d      	b.n	90006260 <BSP_I2C4_Init+0x288>
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
90006444:	9a07      	ldr	r2, [sp, #28]
90006446:	9b08      	ldr	r3, [sp, #32]
90006448:	3214      	adds	r2, #20
9000644a:	3301      	adds	r3, #1
9000644c:	9207      	str	r2, [sp, #28]
9000644e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
90006450:	9308      	str	r3, [sp, #32]
90006452:	4293      	cmp	r3, r2
90006454:	f040 80ff 	bne.w	90006656 <BSP_I2C4_Init+0x67e>
        if (idx < I2C_VALID_TIMING_NBR)
90006458:	297f      	cmp	r1, #127	; 0x7f
9000645a:	d818      	bhi.n	9000648e <BSP_I2C4_Init+0x4b6>
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
9000645c:	eb01 0381 	add.w	r3, r1, r1, lsl #2
90006460:	990b      	ldr	r1, [sp, #44]	; 0x2c
90006462:	eb01 0283 	add.w	r2, r1, r3, lsl #2
90006466:	f851 4023 	ldr.w	r4, [r1, r3, lsl #2]
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
9000646a:	6850      	ldr	r0, [r2, #4]
                ((I2c_valid_timing[idx].scll & 0xFFU) << 0);
9000646c:	7c13      	ldrb	r3, [r2, #16]
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
9000646e:	0500      	lsls	r0, r0, #20
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
90006470:	ea43 7304 	orr.w	r3, r3, r4, lsl #28
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
90006474:	f400 0070 	and.w	r0, r0, #15728640	; 0xf00000
                ((I2c_valid_timing[idx].sclh & 0xFFU) << 8) |\
90006478:	e9d2 1202 	ldrd	r1, r2, [r2, #8]
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
9000647c:	4303      	orrs	r3, r0
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
9000647e:	0409      	lsls	r1, r1, #16
                ((I2c_valid_timing[idx].sclh & 0xFFU) << 8) |\
90006480:	0212      	lsls	r2, r2, #8
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
90006482:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
                ((I2c_valid_timing[idx].sclh & 0xFFU) << 8) |\
90006486:	b292      	uxth	r2, r2
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
90006488:	430b      	orrs	r3, r1
9000648a:	4313      	orrs	r3, r2
9000648c:	9303      	str	r3, [sp, #12]
        if (MX_I2C4_Init(&hbus_i2c4, I2C_GetTiming(HAL_RCC_GetPCLK2Freq(), BUS_I2C4_FREQUENCY)) != HAL_OK)
9000648e:	9903      	ldr	r1, [sp, #12]
90006490:	48b5      	ldr	r0, [pc, #724]	; (90006768 <BSP_I2C4_Init+0x790>)
90006492:	f7ff fd81 	bl	90005f98 <MX_I2C4_Init>
90006496:	2800      	cmp	r0, #0
90006498:	f43f ada8 	beq.w	90005fec <BSP_I2C4_Init+0x14>
          ret = BSP_ERROR_BUS_FAILURE;
9000649c:	f06f 0007 	mvn.w	r0, #7
  return ret;
900064a0:	e5a5      	b.n	90005fee <BSP_I2C4_Init+0x16>
            if(presc != prev_presc)
900064a2:	4632      	mov	r2, r6
900064a4:	9905      	ldr	r1, [sp, #20]
900064a6:	45ab      	cmp	fp, r5
900064a8:	bf0c      	ite	eq
900064aa:	2100      	moveq	r1, #0
900064ac:	f001 0101 	andne.w	r1, r1, #1
900064b0:	2900      	cmp	r1, #0
900064b2:	f43f af0a 	beq.w	900062ca <BSP_I2C4_Init+0x2f2>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
900064b6:	eb09 0289 	add.w	r2, r9, r9, lsl #2
              I2c_valid_timing_nbr ++;
900064ba:	f109 0901 	add.w	r9, r9, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
900064be:	2002      	movs	r0, #2
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
900064c0:	f84a 5022 	str.w	r5, [sl, r2, lsl #2]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
900064c4:	f1b9 0f7f 	cmp.w	r9, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
900064c8:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
900064cc:	6090      	str	r0, [r2, #8]
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
900064ce:	4650      	mov	r0, sl
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
900064d0:	6053      	str	r3, [r2, #4]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
900064d2:	f200 809e 	bhi.w	90006612 <BSP_I2C4_Init+0x63a>
900064d6:	460a      	mov	r2, r1
900064d8:	46ab      	mov	fp, r5
            if(presc != prev_presc)
900064da:	9907      	ldr	r1, [sp, #28]
900064dc:	45ab      	cmp	fp, r5
900064de:	bf0c      	ite	eq
900064e0:	2100      	moveq	r1, #0
900064e2:	f001 0101 	andne.w	r1, r1, #1
900064e6:	2900      	cmp	r1, #0
900064e8:	f43f af0a 	beq.w	90006300 <BSP_I2C4_Init+0x328>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
900064ec:	eb09 0289 	add.w	r2, r9, r9, lsl #2
              I2c_valid_timing_nbr ++;
900064f0:	f109 0901 	add.w	r9, r9, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
900064f4:	2004      	movs	r0, #4
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
900064f6:	f84a 5022 	str.w	r5, [sl, r2, lsl #2]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
900064fa:	f1b9 0f7f 	cmp.w	r9, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
900064fe:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
90006502:	6090      	str	r0, [r2, #8]
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90006504:	4650      	mov	r0, sl
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
90006506:	6053      	str	r3, [r2, #4]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
90006508:	f200 8083 	bhi.w	90006612 <BSP_I2C4_Init+0x63a>
9000650c:	460a      	mov	r2, r1
9000650e:	46ab      	mov	fp, r5
            if(presc != prev_presc)
90006510:	9909      	ldr	r1, [sp, #36]	; 0x24
90006512:	45ab      	cmp	fp, r5
90006514:	bf0c      	ite	eq
90006516:	2100      	moveq	r1, #0
90006518:	f001 0101 	andne.w	r1, r1, #1
9000651c:	2900      	cmp	r1, #0
9000651e:	f43f af0a 	beq.w	90006336 <BSP_I2C4_Init+0x35e>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90006522:	eb09 0289 	add.w	r2, r9, r9, lsl #2
              I2c_valid_timing_nbr ++;
90006526:	f109 0901 	add.w	r9, r9, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
9000652a:	2006      	movs	r0, #6
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
9000652c:	f84a 5022 	str.w	r5, [sl, r2, lsl #2]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
90006530:	f1b9 0f7f 	cmp.w	r9, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90006534:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
90006538:	6090      	str	r0, [r2, #8]
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
9000653a:	4650      	mov	r0, sl
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
9000653c:	6053      	str	r3, [r2, #4]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
9000653e:	d868      	bhi.n	90006612 <BSP_I2C4_Init+0x63a>
90006540:	460a      	mov	r2, r1
90006542:	46ab      	mov	fp, r5
            if(presc != prev_presc)
90006544:	990c      	ldr	r1, [sp, #48]	; 0x30
90006546:	45ab      	cmp	fp, r5
90006548:	bf0c      	ite	eq
9000654a:	2100      	moveq	r1, #0
9000654c:	f001 0101 	andne.w	r1, r1, #1
90006550:	2900      	cmp	r1, #0
90006552:	f43f af0b 	beq.w	9000636c <BSP_I2C4_Init+0x394>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90006556:	eb09 0289 	add.w	r2, r9, r9, lsl #2
              I2c_valid_timing_nbr ++;
9000655a:	f109 0901 	add.w	r9, r9, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
9000655e:	2008      	movs	r0, #8
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90006560:	f84a 5022 	str.w	r5, [sl, r2, lsl #2]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
90006564:	f1b9 0f7f 	cmp.w	r9, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90006568:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
9000656c:	6090      	str	r0, [r2, #8]
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
9000656e:	4650      	mov	r0, sl
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
90006570:	6053      	str	r3, [r2, #4]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
90006572:	d84e      	bhi.n	90006612 <BSP_I2C4_Init+0x63a>
90006574:	460a      	mov	r2, r1
90006576:	46ab      	mov	fp, r5
            if(presc != prev_presc)
90006578:	990e      	ldr	r1, [sp, #56]	; 0x38
9000657a:	45ab      	cmp	fp, r5
9000657c:	bf0c      	ite	eq
9000657e:	2100      	moveq	r1, #0
90006580:	f001 0101 	andne.w	r1, r1, #1
90006584:	2900      	cmp	r1, #0
90006586:	f43f af0c 	beq.w	900063a2 <BSP_I2C4_Init+0x3ca>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
9000658a:	eb09 0289 	add.w	r2, r9, r9, lsl #2
              I2c_valid_timing_nbr ++;
9000658e:	f109 0901 	add.w	r9, r9, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
90006592:	200a      	movs	r0, #10
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90006594:	f84a 5022 	str.w	r5, [sl, r2, lsl #2]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
90006598:	f1b9 0f7f 	cmp.w	r9, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
9000659c:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
900065a0:	6090      	str	r0, [r2, #8]
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
900065a2:	4650      	mov	r0, sl
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
900065a4:	6053      	str	r3, [r2, #4]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
900065a6:	d834      	bhi.n	90006612 <BSP_I2C4_Init+0x63a>
900065a8:	460a      	mov	r2, r1
900065aa:	46ab      	mov	fp, r5
            if(presc != prev_presc)
900065ac:	9910      	ldr	r1, [sp, #64]	; 0x40
900065ae:	45ab      	cmp	fp, r5
900065b0:	bf0c      	ite	eq
900065b2:	2100      	moveq	r1, #0
900065b4:	f001 0101 	andne.w	r1, r1, #1
900065b8:	2900      	cmp	r1, #0
900065ba:	f000 80ae 	beq.w	9000671a <BSP_I2C4_Init+0x742>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
900065be:	eb09 0289 	add.w	r2, r9, r9, lsl #2
              I2c_valid_timing_nbr ++;
900065c2:	f109 0901 	add.w	r9, r9, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
900065c6:	200c      	movs	r0, #12
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
900065c8:	f84a 5022 	str.w	r5, [sl, r2, lsl #2]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
900065cc:	f1b9 0f7f 	cmp.w	r9, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
900065d0:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
900065d4:	6090      	str	r0, [r2, #8]
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
900065d6:	4650      	mov	r0, sl
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
900065d8:	6053      	str	r3, [r2, #4]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
900065da:	d81a      	bhi.n	90006612 <BSP_I2C4_Init+0x63a>
900065dc:	46ab      	mov	fp, r5
            if(presc != prev_presc)
900065de:	9e12      	ldr	r6, [sp, #72]	; 0x48
900065e0:	455d      	cmp	r5, fp
900065e2:	bf0c      	ite	eq
900065e4:	2600      	moveq	r6, #0
900065e6:	f006 0601 	andne.w	r6, r6, #1
900065ea:	2e00      	cmp	r6, #0
900065ec:	f43f af0e 	beq.w	9000640c <BSP_I2C4_Init+0x434>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
900065f0:	eb09 0289 	add.w	r2, r9, r9, lsl #2
              I2c_valid_timing_nbr ++;
900065f4:	f109 0901 	add.w	r9, r9, #1
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
900065f8:	4650      	mov	r0, sl
900065fa:	f84a 5022 	str.w	r5, [sl, r2, lsl #2]
900065fe:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
90006602:	f1b9 0f7f 	cmp.w	r9, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
90006606:	6053      	str	r3, [r2, #4]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
90006608:	f04f 030e 	mov.w	r3, #14
9000660c:	6093      	str	r3, [r2, #8]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
9000660e:	f67f af17 	bls.w	90006440 <BSP_I2C4_Init+0x468>
90006612:	4b56      	ldr	r3, [pc, #344]	; (9000676c <BSP_I2C4_Init+0x794>)
90006614:	900b      	str	r0, [sp, #44]	; 0x2c
90006616:	f8c3 9000 	str.w	r9, [r3]
              I2c_valid_timing_nbr ++;
9000661a:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
9000661e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
90006620:	f240 4201 	movw	r2, #1025	; 0x401
90006624:	f240 2657 	movw	r6, #599	; 0x257
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
90006628:	f640 1ac4 	movw	sl, #2500	; 0x9c4
9000662c:	1ad2      	subs	r2, r2, r3
          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= I2C_Charac[I2C_speed].hscl_min) && (ti2cclk < tscl_h))
9000662e:	f240 4b12 	movw	fp, #1042	; 0x412
90006632:	920d      	str	r2, [sp, #52]	; 0x34
90006634:	9a02      	ldr	r2, [sp, #8]
90006636:	4296      	cmp	r6, r2
90006638:	bf38      	it	cc
9000663a:	4616      	movcc	r6, r2
9000663c:	4a4c      	ldr	r2, [pc, #304]	; (90006770 <BSP_I2C4_Init+0x798>)
9000663e:	9207      	str	r2, [sp, #28]
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
90006640:	2200      	movs	r2, #0
90006642:	9208      	str	r2, [sp, #32]
90006644:	f04f 32ff 	mov.w	r2, #4294967295
90006648:	4611      	mov	r1, r2
9000664a:	f103 0232 	add.w	r2, r3, #50	; 0x32
9000664e:	f6a3 0334 	subw	r3, r3, #2100	; 0x834
90006652:	920c      	str	r2, [sp, #48]	; 0x30
90006654:	930e      	str	r3, [sp, #56]	; 0x38
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
90006656:	9b07      	ldr	r3, [sp, #28]
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
90006658:	f04f 0800 	mov.w	r8, #0
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
9000665c:	6818      	ldr	r0, [r3, #0]
9000665e:	9b02      	ldr	r3, [sp, #8]
90006660:	fb00 3003 	mla	r0, r0, r3, r3
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
90006664:	9b0d      	ldr	r3, [sp, #52]	; 0x34
90006666:	1a1b      	subs	r3, r3, r0
90006668:	ea4f 0943 	mov.w	r9, r3, lsl #1
9000666c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
9000666e:	eb03 0e00 	add.w	lr, r3, r0
90006672:	9b0e      	ldr	r3, [sp, #56]	; 0x38
90006674:	4403      	add	r3, r0
90006676:	9309      	str	r3, [sp, #36]	; 0x24
90006678:	e006      	b.n	90006688 <BSP_I2C4_Init+0x6b0>
9000667a:	f5b8 7f80 	cmp.w	r8, #256	; 0x100
9000667e:	4486      	add	lr, r0
90006680:	eba9 0900 	sub.w	r9, r9, r0
90006684:	f43f aede 	beq.w	90006444 <BSP_I2C4_Init+0x46c>
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
90006688:	f240 5214 	movw	r2, #1300	; 0x514
9000668c:	f8cd 8004 	str.w	r8, [sp, #4]
90006690:	f1ae 0332 	sub.w	r3, lr, #50	; 0x32
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
90006694:	f108 0801 	add.w	r8, r8, #1
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
90006698:	4596      	cmp	lr, r2
9000669a:	d9ee      	bls.n	9000667a <BSP_I2C4_Init+0x6a2>
9000669c:	9a02      	ldr	r2, [sp, #8]
9000669e:	ebb2 0f93 	cmp.w	r2, r3, lsr #2
900066a2:	d2ea      	bcs.n	9000667a <BSP_I2C4_Init+0x6a2>
900066a4:	f640 0c34 	movw	ip, #2100	; 0x834
900066a8:	464c      	mov	r4, r9
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
900066aa:	f8cd 9018 	str.w	r9, [sp, #24]
900066ae:	2200      	movs	r2, #0
900066b0:	ebac 0c03 	sub.w	ip, ip, r3
900066b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
900066b6:	4689      	mov	r9, r1
900066b8:	4473      	add	r3, lr
900066ba:	e9cd e804 	strd	lr, r8, [sp, #16]
900066be:	f8dd 8020 	ldr.w	r8, [sp, #32]
900066c2:	f8dd e01c 	ldr.w	lr, [sp, #28]
900066c6:	e005      	b.n	900066d4 <BSP_I2C4_Init+0x6fc>
900066c8:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
900066cc:	4403      	add	r3, r0
900066ce:	eba4 0400 	sub.w	r4, r4, r0
900066d2:	d01a      	beq.n	9000670a <BSP_I2C4_Init+0x732>
          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= I2C_Charac[I2C_speed].hscl_min) && (ti2cclk < tscl_h))
900066d4:	eb0c 0103 	add.w	r1, ip, r3
900066d8:	4617      	mov	r7, r2
900066da:	f203 15a1 	addw	r5, r3, #417	; 0x1a1
          uint32_t tscl_h = tafdel_min + dnf_delay + (2U * ti2cclk) + ((sclh + 1U) * tpresc);
900066de:	3201      	adds	r2, #1
          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= I2C_Charac[I2C_speed].hscl_min) && (ti2cclk < tscl_h))
900066e0:	42b1      	cmp	r1, r6
900066e2:	d9f1      	bls.n	900066c8 <BSP_I2C4_Init+0x6f0>
900066e4:	455d      	cmp	r5, fp
900066e6:	d8ef      	bhi.n	900066c8 <BSP_I2C4_Init+0x6f0>
            if (error < 0)
900066e8:	ea33 0123 	bics.w	r1, r3, r3, asr #32
900066ec:	bf28      	it	cs
900066ee:	4621      	movcs	r1, r4
            if ((uint32_t)error < prev_error)
900066f0:	458a      	cmp	sl, r1
900066f2:	d9e9      	bls.n	900066c8 <BSP_I2C4_Init+0x6f0>
              I2c_valid_timing[count].sclh = sclh;
900066f4:	468a      	mov	sl, r1
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
900066f6:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
              I2c_valid_timing[count].scll = scll;
900066fa:	9901      	ldr	r1, [sp, #4]
              I2c_valid_timing[count].sclh = sclh;
900066fc:	46c1      	mov	r9, r8
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
900066fe:	4403      	add	r3, r0
90006700:	eba4 0400 	sub.w	r4, r4, r0
              I2c_valid_timing[count].sclh = sclh;
90006704:	e9ce 7103 	strd	r7, r1, [lr, #12]
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
90006708:	d1e4      	bne.n	900066d4 <BSP_I2C4_Init+0x6fc>
9000670a:	4649      	mov	r1, r9
9000670c:	f8dd 9018 	ldr.w	r9, [sp, #24]
90006710:	e9dd e804 	ldrd	lr, r8, [sp, #16]
90006714:	e7b1      	b.n	9000667a <BSP_I2C4_Init+0x6a2>
90006716:	460e      	mov	r6, r1
90006718:	e5a2      	b.n	90006260 <BSP_I2C4_Init+0x288>
            if(presc != prev_presc)
9000671a:	4611      	mov	r1, r2
9000671c:	e65b      	b.n	900063d6 <BSP_I2C4_Init+0x3fe>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
9000671e:	eb09 0189 	add.w	r1, r9, r9, lsl #2
              I2c_valid_timing_nbr ++;
90006722:	f109 0901 	add.w	r9, r9, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
90006726:	2000      	movs	r0, #0
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90006728:	f84a 5021 	str.w	r5, [sl, r1, lsl #2]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
9000672c:	f1b9 0f7f 	cmp.w	r9, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90006730:	eb0a 0181 	add.w	r1, sl, r1, lsl #2
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
90006734:	6088      	str	r0, [r1, #8]
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90006736:	4650      	mov	r0, sl
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
90006738:	604b      	str	r3, [r1, #4]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
9000673a:	f63f af6a 	bhi.w	90006612 <BSP_I2C4_Init+0x63a>
9000673e:	46ab      	mov	fp, r5
90006740:	e6b0      	b.n	900064a4 <BSP_I2C4_Init+0x4cc>
  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
90006742:	3501      	adds	r5, #1
90006744:	9b02      	ldr	r3, [sp, #8]
90006746:	2d10      	cmp	r5, #16
90006748:	441f      	add	r7, r3
9000674a:	f47f acc7 	bne.w	900060dc <BSP_I2C4_Init+0x104>
9000674e:	b126      	cbz	r6, 9000675a <BSP_I2C4_Init+0x782>
90006750:	4b06      	ldr	r3, [pc, #24]	; (9000676c <BSP_I2C4_Init+0x794>)
90006752:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
90006756:	f8c3 9000 	str.w	r9, [r3]
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
9000675a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
9000675c:	2b00      	cmp	r3, #0
9000675e:	f43f ae96 	beq.w	9000648e <BSP_I2C4_Init+0x4b6>
90006762:	4b03      	ldr	r3, [pc, #12]	; (90006770 <BSP_I2C4_Init+0x798>)
90006764:	930b      	str	r3, [sp, #44]	; 0x2c
90006766:	e75a      	b.n	9000661e <BSP_I2C4_Init+0x646>
90006768:	2400bc2c 	.word	0x2400bc2c
9000676c:	2400bc28 	.word	0x2400bc28
90006770:	2400b228 	.word	0x2400b228

90006774 <BSP_I2C4_WriteReg>:
{
90006774:	b530      	push	{r4, r5, lr}
90006776:	4614      	mov	r4, r2
90006778:	b085      	sub	sp, #20
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C4_WriteReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
  if(HAL_I2C_Mem_Write(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
9000677a:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
9000677e:	460a      	mov	r2, r1
90006780:	9301      	str	r3, [sp, #4]
90006782:	4601      	mov	r1, r0
90006784:	2301      	movs	r3, #1
90006786:	4809      	ldr	r0, [pc, #36]	; (900067ac <BSP_I2C4_WriteReg+0x38>)
90006788:	9502      	str	r5, [sp, #8]
9000678a:	9400      	str	r4, [sp, #0]
9000678c:	f001 ffec 	bl	90008768 <HAL_I2C_Mem_Write>
90006790:	b908      	cbnz	r0, 90006796 <BSP_I2C4_WriteReg+0x22>
}
90006792:	b005      	add	sp, #20
90006794:	bd30      	pop	{r4, r5, pc}
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
90006796:	4805      	ldr	r0, [pc, #20]	; (900067ac <BSP_I2C4_WriteReg+0x38>)
90006798:	f002 fa88 	bl	90008cac <HAL_I2C_GetError>
      ret =  BSP_ERROR_PERIPH_FAILURE;
9000679c:	2804      	cmp	r0, #4
9000679e:	bf0c      	ite	eq
900067a0:	f06f 0065 	mvneq.w	r0, #101	; 0x65
900067a4:	f06f 0003 	mvnne.w	r0, #3
900067a8:	e7f3      	b.n	90006792 <BSP_I2C4_WriteReg+0x1e>
900067aa:	bf00      	nop
900067ac:	2400bc2c 	.word	0x2400bc2c

900067b0 <BSP_I2C4_ReadReg>:
{
900067b0:	b530      	push	{r4, r5, lr}
900067b2:	4614      	mov	r4, r2
900067b4:	b085      	sub	sp, #20
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C4_ReadReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
  if (HAL_I2C_Mem_Read(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
900067b6:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
900067ba:	460a      	mov	r2, r1
900067bc:	9301      	str	r3, [sp, #4]
900067be:	4601      	mov	r1, r0
900067c0:	2301      	movs	r3, #1
900067c2:	4809      	ldr	r0, [pc, #36]	; (900067e8 <BSP_I2C4_ReadReg+0x38>)
900067c4:	9502      	str	r5, [sp, #8]
900067c6:	9400      	str	r4, [sp, #0]
900067c8:	f002 f902 	bl	900089d0 <HAL_I2C_Mem_Read>
900067cc:	b908      	cbnz	r0, 900067d2 <BSP_I2C4_ReadReg+0x22>
}
900067ce:	b005      	add	sp, #20
900067d0:	bd30      	pop	{r4, r5, pc}
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
900067d2:	4805      	ldr	r0, [pc, #20]	; (900067e8 <BSP_I2C4_ReadReg+0x38>)
900067d4:	f002 fa6a 	bl	90008cac <HAL_I2C_GetError>
      ret =  BSP_ERROR_PERIPH_FAILURE;
900067d8:	2804      	cmp	r0, #4
900067da:	bf0c      	ite	eq
900067dc:	f06f 0065 	mvneq.w	r0, #101	; 0x65
900067e0:	f06f 0003 	mvnne.w	r0, #3
900067e4:	e7f3      	b.n	900067ce <BSP_I2C4_ReadReg+0x1e>
900067e6:	bf00      	nop
900067e8:	2400bc2c 	.word	0x2400bc2c

900067ec <BSP_GetTick>:
  return (int32_t)HAL_GetTick();
900067ec:	f000 baaa 	b.w	90006d44 <HAL_GetTick>

900067f0 <BSP_SDRAM_DeInit>:
  */
int32_t BSP_SDRAM_DeInit(uint32_t Instance)
{
  int32_t ret = BSP_ERROR_NONE;

  if(Instance >= SDRAM_INSTANCES_NBR)
900067f0:	b970      	cbnz	r0, 90006810 <BSP_SDRAM_DeInit+0x20>
{
900067f2:	b510      	push	{r4, lr}
900067f4:	4604      	mov	r4, r0
  {
    ret =  BSP_ERROR_WRONG_PARAM;
  }
  else
  {
    (void)HAL_SDRAM_DeInit(&hsdram[Instance]);
900067f6:	4808      	ldr	r0, [pc, #32]	; (90006818 <BSP_SDRAM_DeInit+0x28>)
900067f8:	f006 fb16 	bl	9000ce28 <HAL_SDRAM_DeInit>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(hSdram);

  /* Disable NVIC configuration for DMA interrupt */
  HAL_NVIC_DisableIRQ(SDRAM_MDMAx_IRQn);
900067fc:	207a      	movs	r0, #122	; 0x7a
900067fe:	f001 f99f 	bl	90007b40 <HAL_NVIC_DisableIRQ>

  /* Deinitialize the stream for new transfer */
  mdma_handle.Instance = SDRAM_MDMAx_CHANNEL;
90006802:	4b06      	ldr	r3, [pc, #24]	; (9000681c <BSP_SDRAM_DeInit+0x2c>)
90006804:	4806      	ldr	r0, [pc, #24]	; (90006820 <BSP_SDRAM_DeInit+0x30>)
90006806:	6003      	str	r3, [r0, #0]
  (void)HAL_MDMA_DeInit(&mdma_handle);
90006808:	f004 f822 	bl	9000a850 <HAL_MDMA_DeInit>
  int32_t ret = BSP_ERROR_NONE;
9000680c:	4620      	mov	r0, r4
}
9000680e:	bd10      	pop	{r4, pc}
    ret =  BSP_ERROR_WRONG_PARAM;
90006810:	f06f 0001 	mvn.w	r0, #1
}
90006814:	4770      	bx	lr
90006816:	bf00      	nop
90006818:	2400bc80 	.word	0x2400bc80
9000681c:	52000040 	.word	0x52000040
90006820:	2400bcb4 	.word	0x2400bcb4

90006824 <MX_SDRAM_BANK2_Init>:
{
90006824:	b530      	push	{r4, r5, lr}
  hSdram->Init.MemoryDataWidth    = MemoryDataWidth;
90006826:	6102      	str	r2, [r0, #16]
  hSdram->Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
90006828:	2200      	movs	r2, #0
{
9000682a:	b089      	sub	sp, #36	; 0x24
  hsdram->Instance = FMC_SDRAM_DEVICE;
9000682c:	4c13      	ldr	r4, [pc, #76]	; (9000687c <MX_SDRAM_BANK2_Init+0x58>)
  hSdram->Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
9000682e:	6082      	str	r2, [r0, #8]
  hsdram->Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
90006830:	2540      	movs	r5, #64	; 0x40
  hSdram->Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
90006832:	61c2      	str	r2, [r0, #28]
  sdram_timing.ExitSelfRefreshDelay = 7;
90006834:	2307      	movs	r3, #7
  hSdram->Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
90006836:	6282      	str	r2, [r0, #40]	; 0x28
  sdram_timing.LoadToActiveDelay    = 2;
90006838:	2202      	movs	r2, #2
  hSdram->Init.RowBitsNumber      = RowBitsNumber;
9000683a:	60c1      	str	r1, [r0, #12]
  hSdram->Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_3;
9000683c:	f44f 71c0 	mov.w	r1, #384	; 0x180
  sdram_timing.LoadToActiveDelay    = 2;
90006840:	9200      	str	r2, [sp, #0]
  sdram_timing.RCDDelay             = 2;
90006842:	9206      	str	r2, [sp, #24]
  hSdram->Init.SDBank             = FMC_SDRAM_BANK2;
90006844:	2201      	movs	r2, #1
  sdram_timing.ExitSelfRefreshDelay = 7;
90006846:	9301      	str	r3, [sp, #4]
  hSdram->Init.SDBank             = FMC_SDRAM_BANK2;
90006848:	6042      	str	r2, [r0, #4]
  hSdram->Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
9000684a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  hsdram->Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
9000684e:	6165      	str	r5, [r4, #20]
  hSdram->Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
90006850:	f44f 6500 	mov.w	r5, #2048	; 0x800
  hSdram->Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_3;
90006854:	6181      	str	r1, [r0, #24]
  if(HAL_SDRAM_Init(hSdram, &sdram_timing) != HAL_OK)
90006856:	4669      	mov	r1, sp
  hSdram->Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
90006858:	e9c0 5208 	strd	r5, r2, [r0, #32]
  sdram_timing.SelfRefreshTime      = 4;
9000685c:	2204      	movs	r2, #4
9000685e:	e9cd 2302 	strd	r2, r3, [sp, #8]
  sdram_timing.WriteRecoveryTime    = 2;
90006862:	2202      	movs	r2, #2
90006864:	2302      	movs	r3, #2
90006866:	e9cd 2304 	strd	r2, r3, [sp, #16]
  hsdram->Instance = FMC_SDRAM_DEVICE;
9000686a:	4b05      	ldr	r3, [pc, #20]	; (90006880 <MX_SDRAM_BANK2_Init+0x5c>)
9000686c:	6023      	str	r3, [r4, #0]
  if(HAL_SDRAM_Init(hSdram, &sdram_timing) != HAL_OK)
9000686e:	f006 fab1 	bl	9000cdd4 <HAL_SDRAM_Init>
}
90006872:	3800      	subs	r0, #0
90006874:	bf18      	it	ne
90006876:	2001      	movne	r0, #1
90006878:	b009      	add	sp, #36	; 0x24
9000687a:	bd30      	pop	{r4, r5, pc}
9000687c:	2400bc80 	.word	0x2400bc80
90006880:	52004140 	.word	0x52004140

90006884 <BSP_SDRAM_Init>:
  if(Instance >=SDRAM_INSTANCES_NBR)
90006884:	2800      	cmp	r0, #0
90006886:	f040 80d2 	bne.w	90006a2e <BSP_SDRAM_Init+0x1aa>
  __HAL_RCC_FMC_CLK_ENABLE();
9000688a:	4b6c      	ldr	r3, [pc, #432]	; (90006a3c <BSP_SDRAM_Init+0x1b8>)
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
9000688c:	210c      	movs	r1, #12
  __HAL_RCC_FMC_CLK_ENABLE();
9000688e:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
90006892:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
{
90006896:	b570      	push	{r4, r5, r6, lr}
  __HAL_RCC_FMC_CLK_ENABLE();
90006898:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
{
9000689c:	b08e      	sub	sp, #56	; 0x38
  __HAL_RCC_FMC_CLK_ENABLE();
9000689e:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
900068a2:	4605      	mov	r5, r0
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8| GPIO_PIN_9 | GPIO_PIN_10 |\
900068a4:	f24c 7003 	movw	r0, #50947	; 0xc703
  mdma_handle.Init.Request = MDMA_REQUEST_SW;
900068a8:	4c65      	ldr	r4, [pc, #404]	; (90006a40 <BSP_SDRAM_Init+0x1bc>)
  __HAL_RCC_FMC_CLK_ENABLE();
900068aa:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
  __HAL_LINKDMA(hsdram, hmdma, mdma_handle);
900068ae:	4e65      	ldr	r6, [pc, #404]	; (90006a44 <BSP_SDRAM_Init+0x1c0>)
  __HAL_RCC_FMC_CLK_ENABLE();
900068b0:	9201      	str	r2, [sp, #4]
900068b2:	9a01      	ldr	r2, [sp, #4]
  SDRAM_MDMAx_CLK_ENABLE();
900068b4:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
900068b8:	f042 0201 	orr.w	r2, r2, #1
900068bc:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
900068c0:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
900068c4:	f002 0201 	and.w	r2, r2, #1
900068c8:	9202      	str	r2, [sp, #8]
900068ca:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
900068cc:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
900068d0:	f042 0208 	orr.w	r2, r2, #8
900068d4:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
900068d8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
900068dc:	f002 0208 	and.w	r2, r2, #8
900068e0:	9203      	str	r2, [sp, #12]
900068e2:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
900068e4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
900068e8:	f042 0210 	orr.w	r2, r2, #16
900068ec:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
900068f0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
900068f4:	f002 0210 	and.w	r2, r2, #16
900068f8:	9204      	str	r2, [sp, #16]
900068fa:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
900068fc:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
90006900:	f042 0220 	orr.w	r2, r2, #32
90006904:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
90006908:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
9000690c:	f002 0220 	and.w	r2, r2, #32
90006910:	9205      	str	r2, [sp, #20]
90006912:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
90006914:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
90006918:	f042 0240 	orr.w	r2, r2, #64	; 0x40
9000691c:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
90006920:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
90006924:	f002 0240 	and.w	r2, r2, #64	; 0x40
90006928:	9206      	str	r2, [sp, #24]
9000692a:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
9000692c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
90006930:	f042 0280 	orr.w	r2, r2, #128	; 0x80
90006934:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
90006938:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
9000693c:	910c      	str	r1, [sp, #48]	; 0x30
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8| GPIO_PIN_9 | GPIO_PIN_10 |\
9000693e:	2102      	movs	r1, #2
  __HAL_RCC_GPIOH_CLK_ENABLE();
90006940:	f003 0380 	and.w	r3, r3, #128	; 0x80
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8| GPIO_PIN_9 | GPIO_PIN_10 |\
90006944:	e9cd 0108 	strd	r0, r1, [sp, #32]
90006948:	2001      	movs	r0, #1
9000694a:	2103      	movs	r1, #3
  __HAL_RCC_GPIOH_CLK_ENABLE();
9000694c:	9307      	str	r3, [sp, #28]
9000694e:	9b07      	ldr	r3, [sp, #28]
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8| GPIO_PIN_9 | GPIO_PIN_10 |\
90006950:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
90006954:	a908      	add	r1, sp, #32
90006956:	483c      	ldr	r0, [pc, #240]	; (90006a48 <BSP_SDRAM_Init+0x1c4>)
90006958:	f001 fb12 	bl	90007f80 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
9000695c:	f64f 7383 	movw	r3, #65411	; 0xff83
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
90006960:	a908      	add	r1, sp, #32
90006962:	483a      	ldr	r0, [pc, #232]	; (90006a4c <BSP_SDRAM_Init+0x1c8>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
90006964:	9308      	str	r3, [sp, #32]
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
90006966:	f001 fb0b 	bl	90007f80 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
9000696a:	f64f 033f 	movw	r3, #63551	; 0xf83f
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
9000696e:	a908      	add	r1, sp, #32
90006970:	4837      	ldr	r0, [pc, #220]	; (90006a50 <BSP_SDRAM_Init+0x1cc>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
90006972:	9308      	str	r3, [sp, #32]
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
90006974:	f001 fb04 	bl	90007f80 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
90006978:	f248 1333 	movw	r3, #33075	; 0x8133
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
9000697c:	a908      	add	r1, sp, #32
9000697e:	4835      	ldr	r0, [pc, #212]	; (90006a54 <BSP_SDRAM_Init+0x1d0>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
90006980:	9308      	str	r3, [sp, #32]
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
90006982:	f001 fafd 	bl	90007f80 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 ;
90006986:	23e0      	movs	r3, #224	; 0xe0
  HAL_GPIO_Init(GPIOH, &gpio_init_structure);
90006988:	a908      	add	r1, sp, #32
9000698a:	4833      	ldr	r0, [pc, #204]	; (90006a58 <BSP_SDRAM_Init+0x1d4>)
  gpio_init_structure.Pin   = GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 ;
9000698c:	9308      	str	r3, [sp, #32]
  HAL_GPIO_Init(GPIOH, &gpio_init_structure);
9000698e:	f001 faf7 	bl	90007f80 <HAL_GPIO_Init>
  mdma_handle.Init.Priority = MDMA_PRIORITY_HIGH;
90006992:	2380      	movs	r3, #128	; 0x80
  mdma_handle.Init.Request = MDMA_REQUEST_SW;
90006994:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  mdma_handle.Init.SourceInc = MDMA_SRC_INC_WORD;
90006998:	f240 2102 	movw	r1, #514	; 0x202
  HAL_MDMA_DeInit(&mdma_handle);
9000699c:	4620      	mov	r0, r4
  mdma_handle.Init.DestDataSize = MDMA_DEST_DATASIZE_WORD;
9000699e:	6223      	str	r3, [r4, #32]
  mdma_handle.Init.BufferTransferLength = 128;
900069a0:	62a3      	str	r3, [r4, #40]	; 0x28
  mdma_handle.Init.Request = MDMA_REQUEST_SW;
900069a2:	6062      	str	r2, [r4, #4]
  mdma_handle.Init.TransferTriggerMode = MDMA_BLOCK_TRANSFER;
900069a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  mdma_handle.Init.SourceInc = MDMA_SRC_INC_WORD;
900069a8:	6161      	str	r1, [r4, #20]
  mdma_handle.Init.TransferTriggerMode = MDMA_BLOCK_TRANSFER;
900069aa:	60a2      	str	r2, [r4, #8]
  mdma_handle.Instance = SDRAM_MDMAx_CHANNEL;
900069ac:	4a2b      	ldr	r2, [pc, #172]	; (90006a5c <BSP_SDRAM_Init+0x1d8>)
  __HAL_LINKDMA(hsdram, hmdma, mdma_handle);
900069ae:	6334      	str	r4, [r6, #48]	; 0x30
  mdma_handle.Instance = SDRAM_MDMAx_CHANNEL;
900069b0:	6022      	str	r2, [r4, #0]
  __HAL_LINKDMA(hsdram, hmdma, mdma_handle);
900069b2:	6426      	str	r6, [r4, #64]	; 0x40
  mdma_handle.Init.Priority = MDMA_PRIORITY_HIGH;
900069b4:	e9c4 3503 	strd	r3, r5, [r4, #12]
  mdma_handle.Init.DestinationInc = MDMA_DEST_INC_WORD;
900069b8:	f640 0308 	movw	r3, #2056	; 0x808
900069bc:	61a3      	str	r3, [r4, #24]
  mdma_handle.Init.SourceDataSize = MDMA_SRC_DATASIZE_WORD;
900069be:	2320      	movs	r3, #32
900069c0:	61e3      	str	r3, [r4, #28]
  mdma_handle.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
900069c2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
  mdma_handle.Init.DestBurst = MDMA_DEST_BURST_SINGLE;
900069c6:	e9c4 550b 	strd	r5, r5, [r4, #44]	; 0x2c
  mdma_handle.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
900069ca:	6263      	str	r3, [r4, #36]	; 0x24
  mdma_handle.Init.DestBlockAddressOffset = 0;
900069cc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
  HAL_MDMA_DeInit(&mdma_handle);
900069d0:	f003 ff3e 	bl	9000a850 <HAL_MDMA_DeInit>
  HAL_MDMA_Init(&mdma_handle);
900069d4:	4620      	mov	r0, r4
900069d6:	f003 fec1 	bl	9000a75c <HAL_MDMA_Init>
  HAL_NVIC_SetPriority(SDRAM_MDMAx_IRQn, 0x0F, 0);
900069da:	462a      	mov	r2, r5
900069dc:	210f      	movs	r1, #15
900069de:	207a      	movs	r0, #122	; 0x7a
900069e0:	f001 f862 	bl	90007aa8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_MDMAx_IRQn);
900069e4:	207a      	movs	r0, #122	; 0x7a
900069e6:	f001 f89d 	bl	90007b24 <HAL_NVIC_EnableIRQ>
    if(MX_SDRAM_BANK2_Init(&hsdram[Instance],FMC_SDRAM_ROW_BITS_NUM_12, FMC_SDRAM_MEM_BUS_WIDTH_16) != HAL_OK)
900069ea:	2210      	movs	r2, #16
900069ec:	2104      	movs	r1, #4
900069ee:	4630      	mov	r0, r6
900069f0:	f7ff ff18 	bl	90006824 <MX_SDRAM_BANK2_Init>
900069f4:	b9f0      	cbnz	r0, 90006a34 <BSP_SDRAM_Init+0x1b0>
      pRegMode.TargetBank      = FMC_SDRAM_CMD_TARGET_BANK2;
900069f6:	491a      	ldr	r1, [pc, #104]	; (90006a60 <BSP_SDRAM_Init+0x1dc>)
900069f8:	2208      	movs	r2, #8
900069fa:	2303      	movs	r3, #3
      if(MT48LC4M32B2_Init(&hsdram[Instance], &pRegMode) != MT48LC4M32B2_OK)
900069fc:	4630      	mov	r0, r6
      pRegMode.TargetBank      = FMC_SDRAM_CMD_TARGET_BANK2;
900069fe:	e9c1 2300 	strd	r2, r3, [r1]
90006a02:	f240 6203 	movw	r2, #1539	; 0x603
90006a06:	2300      	movs	r3, #0
90006a08:	e9c1 2302 	strd	r2, r3, [r1, #8]
90006a0c:	2200      	movs	r2, #0
90006a0e:	2330      	movs	r3, #48	; 0x30
90006a10:	e9c1 2304 	strd	r2, r3, [r1, #16]
90006a14:	2200      	movs	r2, #0
90006a16:	f44f 7300 	mov.w	r3, #512	; 0x200
90006a1a:	e9c1 2306 	strd	r2, r3, [r1, #24]
      if(MT48LC4M32B2_Init(&hsdram[Instance], &pRegMode) != MT48LC4M32B2_OK)
90006a1e:	f7ff fa37 	bl	90005e90 <MT48LC4M32B2_Init>
        ret =  BSP_ERROR_COMPONENT_FAILURE;
90006a22:	2800      	cmp	r0, #0
90006a24:	bf18      	it	ne
90006a26:	f06f 0004 	mvnne.w	r0, #4
}
90006a2a:	b00e      	add	sp, #56	; 0x38
90006a2c:	bd70      	pop	{r4, r5, r6, pc}
    ret =  BSP_ERROR_WRONG_PARAM;
90006a2e:	f06f 0001 	mvn.w	r0, #1
}
90006a32:	4770      	bx	lr
      ret = BSP_ERROR_NO_INIT;
90006a34:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
90006a38:	e7f7      	b.n	90006a2a <BSP_SDRAM_Init+0x1a6>
90006a3a:	bf00      	nop
90006a3c:	58024400 	.word	0x58024400
90006a40:	2400bd20 	.word	0x2400bd20
90006a44:	2400bc80 	.word	0x2400bc80
90006a48:	58020c00 	.word	0x58020c00
90006a4c:	58021000 	.word	0x58021000
90006a50:	58021400 	.word	0x58021400
90006a54:	58021800 	.word	0x58021800
90006a58:	58021c00 	.word	0x58021c00
90006a5c:	52000040 	.word	0x52000040
90006a60:	2400bd90 	.word	0x2400bd90

90006a64 <BSP_TS_Init>:
  * @param  Instance TS instance. Could be only 0.
  * @param  TS_Init  TS Init structure
  * @retval BSP status
  */
int32_t BSP_TS_Init(uint32_t Instance, TS_Init_t *TS_Init)
{
90006a64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
90006a68:	b088      	sub	sp, #32
  int32_t ret = BSP_ERROR_NONE;

  if((Instance >=TS_INSTANCES_NBR) || (TS_Init->Width == 0U) ||( TS_Init->Width > TS_MAX_WIDTH) ||\
90006a6a:	2800      	cmp	r0, #0
90006a6c:	d16b      	bne.n	90006b46 <BSP_TS_Init+0xe2>
90006a6e:	680b      	ldr	r3, [r1, #0]
90006a70:	460c      	mov	r4, r1
90006a72:	1e5a      	subs	r2, r3, #1
90006a74:	f5b2 7ff0 	cmp.w	r2, #480	; 0x1e0
90006a78:	d265      	bcs.n	90006b46 <BSP_TS_Init+0xe2>
                         (TS_Init->Height == 0U) ||( TS_Init->Height > TS_MAX_HEIGHT) ||\
90006a7a:	684a      	ldr	r2, [r1, #4]
90006a7c:	1e51      	subs	r1, r2, #1
90006a7e:	f5b1 7f88 	cmp.w	r1, #272	; 0x110
90006a82:	d260      	bcs.n	90006b46 <BSP_TS_Init+0xe2>
                         (TS_Init->Accuracy > TS_MIN((TS_Init->Width), (TS_Init->Height))))
90006a84:	4293      	cmp	r3, r2
90006a86:	bf28      	it	cs
90006a88:	4613      	movcs	r3, r2
                         (TS_Init->Height == 0U) ||( TS_Init->Height > TS_MAX_HEIGHT) ||\
90006a8a:	68e2      	ldr	r2, [r4, #12]
90006a8c:	429a      	cmp	r2, r3
90006a8e:	d85a      	bhi.n	90006b46 <BSP_TS_Init+0xe2>
  FT5336_IO_t              IOCtx;
  static FT5336_Object_t   FT5336Obj;
  uint32_t ft5336_id       = 0;

  /* Configure the touch screen driver */
  IOCtx.Address     = TS_I2C_ADDRESS;
90006a90:	2270      	movs	r2, #112	; 0x70
  IOCtx.Init        = BSP_I2C4_Init;
90006a92:	4b31      	ldr	r3, [pc, #196]	; (90006b58 <BSP_TS_Init+0xf4>)
  IOCtx.DeInit      = BSP_I2C4_DeInit;
  IOCtx.ReadReg     = BSP_I2C4_ReadReg;
  IOCtx.WriteReg    = BSP_I2C4_WriteReg;
  IOCtx.GetTick     = BSP_GetTick;

  if(FT5336_RegisterBusIO (&FT5336Obj, &IOCtx) != FT5336_OK)
90006a94:	4d31      	ldr	r5, [pc, #196]	; (90006b5c <BSP_TS_Init+0xf8>)
90006a96:	a902      	add	r1, sp, #8
  IOCtx.Address     = TS_I2C_ADDRESS;
90006a98:	f8ad 2010 	strh.w	r2, [sp, #16]
  IOCtx.Init        = BSP_I2C4_Init;
90006a9c:	9302      	str	r3, [sp, #8]
  IOCtx.DeInit      = BSP_I2C4_DeInit;
90006a9e:	4a30      	ldr	r2, [pc, #192]	; (90006b60 <BSP_TS_Init+0xfc>)
  IOCtx.ReadReg     = BSP_I2C4_ReadReg;
90006aa0:	4b30      	ldr	r3, [pc, #192]	; (90006b64 <BSP_TS_Init+0x100>)
  IOCtx.DeInit      = BSP_I2C4_DeInit;
90006aa2:	9203      	str	r2, [sp, #12]
  IOCtx.ReadReg     = BSP_I2C4_ReadReg;
90006aa4:	9306      	str	r3, [sp, #24]
  IOCtx.WriteReg    = BSP_I2C4_WriteReg;
90006aa6:	4a30      	ldr	r2, [pc, #192]	; (90006b68 <BSP_TS_Init+0x104>)
  IOCtx.GetTick     = BSP_GetTick;
90006aa8:	4b30      	ldr	r3, [pc, #192]	; (90006b6c <BSP_TS_Init+0x108>)
  uint32_t ft5336_id       = 0;
90006aaa:	9001      	str	r0, [sp, #4]
  if(FT5336_RegisterBusIO (&FT5336Obj, &IOCtx) != FT5336_OK)
90006aac:	4628      	mov	r0, r5
  IOCtx.WriteReg    = BSP_I2C4_WriteReg;
90006aae:	9205      	str	r2, [sp, #20]
  IOCtx.GetTick     = BSP_GetTick;
90006ab0:	9307      	str	r3, [sp, #28]
  if(FT5336_RegisterBusIO (&FT5336Obj, &IOCtx) != FT5336_OK)
90006ab2:	f7ff f93f 	bl	90005d34 <FT5336_RegisterBusIO>
90006ab6:	2800      	cmp	r0, #0
90006ab8:	d14b      	bne.n	90006b52 <BSP_TS_Init+0xee>
  {
    ret = BSP_ERROR_BUS_FAILURE;
  }
  else if(FT5336_ReadID(&FT5336Obj, &ft5336_id) != FT5336_OK)
90006aba:	a901      	add	r1, sp, #4
90006abc:	4628      	mov	r0, r5
90006abe:	f7ff f82f 	bl	90005b20 <FT5336_ReadID>
90006ac2:	2800      	cmp	r0, #0
90006ac4:	d145      	bne.n	90006b52 <BSP_TS_Init+0xee>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }
  else if(ft5336_id != FT5336_ID)
90006ac6:	9b01      	ldr	r3, [sp, #4]
90006ac8:	2b51      	cmp	r3, #81	; 0x51
90006aca:	d142      	bne.n	90006b52 <BSP_TS_Init+0xee>
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
  }
  else
  {
    Ts_CompObj[Instance] = &FT5336Obj;
    Ts_Drv = (TS_Drv_t *) &FT5336_TS_Driver;
90006acc:	4b28      	ldr	r3, [pc, #160]	; (90006b70 <BSP_TS_Init+0x10c>)

    if(Ts_Drv->Init(Ts_CompObj[Instance]) != FT5336_OK)
90006ace:	4628      	mov	r0, r5
    Ts_CompObj[Instance] = &FT5336Obj;
90006ad0:	4f28      	ldr	r7, [pc, #160]	; (90006b74 <BSP_TS_Init+0x110>)
    Ts_Drv = (TS_Drv_t *) &FT5336_TS_Driver;
90006ad2:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 90006b7c <BSP_TS_Init+0x118>
    Ts_CompObj[Instance] = &FT5336Obj;
90006ad6:	603d      	str	r5, [r7, #0]
    Ts_Drv = (TS_Drv_t *) &FT5336_TS_Driver;
90006ad8:	f8c8 3000 	str.w	r3, [r8]
    if(Ts_Drv->Init(Ts_CompObj[Instance]) != FT5336_OK)
90006adc:	681b      	ldr	r3, [r3, #0]
90006ade:	4798      	blx	r3
90006ae0:	4606      	mov	r6, r0
90006ae2:	2800      	cmp	r0, #0
90006ae4:	d135      	bne.n	90006b52 <BSP_TS_Init+0xee>
      Ts_Ctx[Instance].Width             = TS_Init->Width;
90006ae6:	4d24      	ldr	r5, [pc, #144]	; (90006b78 <BSP_TS_Init+0x114>)
        if (Ts_Drv->GetCapabilities(Ts_CompObj[Instance], &Capabilities) < 0)
90006ae8:	a902      	add	r1, sp, #8
90006aea:	6838      	ldr	r0, [r7, #0]
90006aec:	f8d8 3000 	ldr.w	r3, [r8]
      Ts_Ctx[Instance].Width             = TS_Init->Width;
90006af0:	e9d4 7200 	ldrd	r7, r2, [r4]
        if (Ts_Drv->GetCapabilities(Ts_CompObj[Instance], &Capabilities) < 0)
90006af4:	69db      	ldr	r3, [r3, #28]
      Ts_Ctx[Instance].Width             = TS_Init->Width;
90006af6:	e9c5 7200 	strd	r7, r2, [r5]
90006afa:	68a2      	ldr	r2, [r4, #8]
90006afc:	60aa      	str	r2, [r5, #8]
90006afe:	68e2      	ldr	r2, [r4, #12]
90006b00:	60ea      	str	r2, [r5, #12]
        if (Ts_Drv->GetCapabilities(Ts_CompObj[Instance], &Capabilities) < 0)
90006b02:	4798      	blx	r3
90006b04:	2800      	cmp	r0, #0
90006b06:	db18      	blt.n	90006b3a <BSP_TS_Init+0xd6>
        Ts_Ctx[Instance].MaxX = Capabilities.MaxXl;
90006b08:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
90006b0c:	e9c5 3204 	strd	r3, r2, [r5, #16]
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
90006b10:	68e3      	ldr	r3, [r4, #12]
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
90006b12:	e9d4 2100 	ldrd	r2, r1, [r4]
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
90006b16:	441a      	add	r2, r3
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
90006b18:	440b      	add	r3, r1
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
90006b1a:	3201      	adds	r2, #1
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
90006b1c:	3301      	adds	r3, #1
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
90006b1e:	e9c5 2206 	strd	r2, r2, [r5, #24]
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
90006b22:	e9c5 330b 	strd	r3, r3, [r5, #44]	; 0x2c
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
90006b26:	622a      	str	r2, [r5, #32]
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
90006b28:	636b      	str	r3, [r5, #52]	; 0x34
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
90006b2a:	626a      	str	r2, [r5, #36]	; 0x24
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
90006b2c:	63ab      	str	r3, [r5, #56]	; 0x38
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
90006b2e:	62aa      	str	r2, [r5, #40]	; 0x28
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
90006b30:	63eb      	str	r3, [r5, #60]	; 0x3c
}
90006b32:	4630      	mov	r0, r6
90006b34:	b008      	add	sp, #32
90006b36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        ret = BSP_ERROR_COMPONENT_FAILURE;
90006b3a:	f06f 0604 	mvn.w	r6, #4
}
90006b3e:	4630      	mov	r0, r6
90006b40:	b008      	add	sp, #32
90006b42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret = BSP_ERROR_WRONG_PARAM;
90006b46:	f06f 0601 	mvn.w	r6, #1
}
90006b4a:	4630      	mov	r0, r6
90006b4c:	b008      	add	sp, #32
90006b4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      ret = BSP_ERROR_NO_INIT;
90006b52:	f04f 36ff 	mov.w	r6, #4294967295
90006b56:	e7ec      	b.n	90006b32 <BSP_TS_Init+0xce>
90006b58:	90005fd9 	.word	0x90005fd9
90006b5c:	2400bdb0 	.word	0x2400bdb0
90006b60:	90005f45 	.word	0x90005f45
90006b64:	900067b1 	.word	0x900067b1
90006b68:	90006775 	.word	0x90006775
90006b6c:	900067ed 	.word	0x900067ed
90006b70:	24000024 	.word	0x24000024
90006b74:	2400bdd8 	.word	0x2400bdd8
90006b78:	2400bddc 	.word	0x2400bddc
90006b7c:	2400be1c 	.word	0x2400be1c

90006b80 <BSP_TS_GetState>:
  if(Instance >= TS_INSTANCES_NBR)
90006b80:	2800      	cmp	r0, #0
90006b82:	d157      	bne.n	90006c34 <BSP_TS_GetState+0xb4>
    if(Ts_Drv->GetState(Ts_CompObj[Instance], &state) < 0)
90006b84:	4b2d      	ldr	r3, [pc, #180]	; (90006c3c <BSP_TS_GetState+0xbc>)
90006b86:	4a2e      	ldr	r2, [pc, #184]	; (90006c40 <BSP_TS_GetState+0xc0>)
90006b88:	681b      	ldr	r3, [r3, #0]
90006b8a:	6810      	ldr	r0, [r2, #0]
90006b8c:	691b      	ldr	r3, [r3, #16]
{
90006b8e:	b5f0      	push	{r4, r5, r6, r7, lr}
90006b90:	b085      	sub	sp, #20
90006b92:	460c      	mov	r4, r1
    if(Ts_Drv->GetState(Ts_CompObj[Instance], &state) < 0)
90006b94:	a901      	add	r1, sp, #4
90006b96:	4798      	blx	r3
90006b98:	2800      	cmp	r0, #0
90006b9a:	db41      	blt.n	90006c20 <BSP_TS_GetState+0xa0>
    else if(state.TouchDetected != 0U)
90006b9c:	9d01      	ldr	r5, [sp, #4]
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_XY) == TS_SWAP_XY)
90006b9e:	4b29      	ldr	r3, [pc, #164]	; (90006c44 <BSP_TS_GetState+0xc4>)
    else if(state.TouchDetected != 0U)
90006ba0:	b93d      	cbnz	r5, 90006bb2 <BSP_TS_GetState+0x32>
      TS_State->TouchX = Ts_Ctx[Instance].PreviousX[0];
90006ba2:	699a      	ldr	r2, [r3, #24]
  int32_t ret = BSP_ERROR_NONE;
90006ba4:	4628      	mov	r0, r5
      TS_State->TouchY = Ts_Ctx[Instance].PreviousY[0];
90006ba6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      TS_State->TouchDetected = 0U;
90006ba8:	6025      	str	r5, [r4, #0]
      TS_State->TouchY = Ts_Ctx[Instance].PreviousY[0];
90006baa:	e9c4 2301 	strd	r2, r3, [r4, #4]
}
90006bae:	b005      	add	sp, #20
90006bb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_XY) == TS_SWAP_XY)
90006bb2:	6898      	ldr	r0, [r3, #8]
90006bb4:	0702      	lsls	r2, r0, #28
      y_oriented = state.TouchY;
90006bb6:	e9dd c702 	ldrd	ip, r7, [sp, #8]
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_XY) == TS_SWAP_XY)
90006bba:	d435      	bmi.n	90006c28 <BSP_TS_GetState+0xa8>
      y_oriented = state.TouchY;
90006bbc:	4639      	mov	r1, r7
      x_oriented = state.TouchX;
90006bbe:	4662      	mov	r2, ip
        x_oriented = Ts_Ctx[Instance].MaxX - state.TouchX - 1UL;
90006bc0:	691e      	ldr	r6, [r3, #16]
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_X) == TS_SWAP_X)
90006bc2:	f010 0f02 	tst.w	r0, #2
        x_oriented = Ts_Ctx[Instance].MaxX - state.TouchX - 1UL;
90006bc6:	bf1c      	itt	ne
90006bc8:	f106 32ff 	addne.w	r2, r6, #4294967295
90006bcc:	eba2 020c 	subne.w	r2, r2, ip
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_Y) == TS_SWAP_Y)
90006bd0:	f010 0f04 	tst.w	r0, #4
        y_oriented = Ts_Ctx[Instance].MaxY - state.TouchY;
90006bd4:	6958      	ldr	r0, [r3, #20]
90006bd6:	bf18      	it	ne
90006bd8:	1bc1      	subne	r1, r0, r7
      TS_State->TouchX = (x_oriented * Ts_Ctx[Instance].Width) / Ts_Ctx[Instance].MaxX;
90006bda:	681f      	ldr	r7, [r3, #0]
90006bdc:	fb07 f202 	mul.w	r2, r7, r2
90006be0:	fbb2 f2f6 	udiv	r2, r2, r6
      TS_State->TouchY = (y_oriented * Ts_Ctx[Instance].Height) / Ts_Ctx[Instance].MaxY;
90006be4:	685e      	ldr	r6, [r3, #4]
      TS_State->TouchDetected = state.TouchDetected;
90006be6:	6025      	str	r5, [r4, #0]
      TS_State->TouchY = (y_oriented * Ts_Ctx[Instance].Height) / Ts_Ctx[Instance].MaxY;
90006be8:	fb06 f101 	mul.w	r1, r6, r1
      x_diff = (TS_State->TouchX > Ts_Ctx[Instance].PreviousX[0])?
90006bec:	699e      	ldr	r6, [r3, #24]
        y_diff = (TS_State->TouchY > Ts_Ctx[Instance].PreviousY[0])?
90006bee:	6add      	ldr	r5, [r3, #44]	; 0x2c
        (TS_State->TouchX - Ts_Ctx[Instance].PreviousX[0]):
90006bf0:	42b2      	cmp	r2, r6
      TS_State->TouchX = (x_oriented * Ts_Ctx[Instance].Width) / Ts_Ctx[Instance].MaxX;
90006bf2:	6062      	str	r2, [r4, #4]
      TS_State->TouchY = (y_oriented * Ts_Ctx[Instance].Height) / Ts_Ctx[Instance].MaxY;
90006bf4:	fbb1 f1f0 	udiv	r1, r1, r0
        (TS_State->TouchX - Ts_Ctx[Instance].PreviousX[0]):
90006bf8:	bf8c      	ite	hi
90006bfa:	1b90      	subhi	r0, r2, r6
90006bfc:	1ab0      	subls	r0, r6, r2
          (TS_State->TouchY - Ts_Ctx[Instance].PreviousY[0]):
90006bfe:	42a9      	cmp	r1, r5
      TS_State->TouchY = (y_oriented * Ts_Ctx[Instance].Height) / Ts_Ctx[Instance].MaxY;
90006c00:	60a1      	str	r1, [r4, #8]
          (TS_State->TouchY - Ts_Ctx[Instance].PreviousY[0]):
90006c02:	bf8c      	ite	hi
90006c04:	1b4f      	subhi	r7, r1, r5
90006c06:	1a6f      	subls	r7, r5, r1
          if ((x_diff > Ts_Ctx[Instance].Accuracy) || (y_diff > Ts_Ctx[Instance].Accuracy))
90006c08:	42b8      	cmp	r0, r7
90006c0a:	bf38      	it	cc
90006c0c:	4638      	movcc	r0, r7
90006c0e:	68df      	ldr	r7, [r3, #12]
90006c10:	4287      	cmp	r7, r0
  int32_t ret = BSP_ERROR_NONE;
90006c12:	f04f 0000 	mov.w	r0, #0
          if ((x_diff > Ts_Ctx[Instance].Accuracy) || (y_diff > Ts_Ctx[Instance].Accuracy))
90006c16:	d20a      	bcs.n	90006c2e <BSP_TS_GetState+0xae>
            Ts_Ctx[Instance].PreviousX[0] = TS_State->TouchX;
90006c18:	619a      	str	r2, [r3, #24]
            Ts_Ctx[Instance].PreviousY[0] = TS_State->TouchY;
90006c1a:	62d9      	str	r1, [r3, #44]	; 0x2c
}
90006c1c:	b005      	add	sp, #20
90006c1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      ret = BSP_ERROR_COMPONENT_FAILURE;
90006c20:	f06f 0004 	mvn.w	r0, #4
}
90006c24:	b005      	add	sp, #20
90006c26:	bdf0      	pop	{r4, r5, r6, r7, pc}
        y_oriented = state.TouchX;
90006c28:	4661      	mov	r1, ip
        x_oriented = state.TouchY;
90006c2a:	463a      	mov	r2, r7
90006c2c:	e7c8      	b.n	90006bc0 <BSP_TS_GetState+0x40>
            TS_State->TouchY = Ts_Ctx[Instance].PreviousY[0];
90006c2e:	e9c4 6501 	strd	r6, r5, [r4, #4]
90006c32:	e7bc      	b.n	90006bae <BSP_TS_GetState+0x2e>
    ret = BSP_ERROR_WRONG_PARAM;
90006c34:	f06f 0001 	mvn.w	r0, #1
}
90006c38:	4770      	bx	lr
90006c3a:	bf00      	nop
90006c3c:	2400be1c 	.word	0x2400be1c
90006c40:	2400bdd8 	.word	0x2400bdd8
90006c44:	2400bddc 	.word	0x2400bddc

90006c48 <SystemInit>:
#endif

extern unsigned int VECTOR_TABLE_LOCATION;

void SystemInit (void)
{
90006c48:	b410      	push	{r4}
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
90006c4a:	4c19      	ldr	r4, [pc, #100]	; (90006cb0 <SystemInit+0x68>)
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
90006c4c:	2200      	movs	r2, #0
  RCC->CR |= RCC_CR_HSION;
90006c4e:	4b19      	ldr	r3, [pc, #100]	; (90006cb4 <SystemInit+0x6c>)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
90006c50:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
90006c54:	4818      	ldr	r0, [pc, #96]	; (90006cb8 <SystemInit+0x70>)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
90006c56:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
90006c5a:	f8c4 1088 	str.w	r1, [r4, #136]	; 0x88
  RCC->CR |= RCC_CR_HSION;
90006c5e:	6819      	ldr	r1, [r3, #0]
  SCB->VTOR = FLASH_BANK2_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
#endif /* VECT_TAB_SRAM */

#else
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
90006c60:	4c16      	ldr	r4, [pc, #88]	; (90006cbc <SystemInit+0x74>)
  RCC->CR |= RCC_CR_HSION;
90006c62:	f041 0101 	orr.w	r1, r1, #1
90006c66:	6019      	str	r1, [r3, #0]
  RCC->CFGR = 0x00000000;
90006c68:	611a      	str	r2, [r3, #16]
  RCC->CR &= 0xEAF6ED7FU;
90006c6a:	6819      	ldr	r1, [r3, #0]
90006c6c:	4008      	ands	r0, r1
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
90006c6e:	4914      	ldr	r1, [pc, #80]	; (90006cc0 <SystemInit+0x78>)
  RCC->CR &= 0xEAF6ED7FU;
90006c70:	6018      	str	r0, [r3, #0]
  RCC->D1CFGR = 0x00000000;
90006c72:	619a      	str	r2, [r3, #24]
  RCC->D2CFGR = 0x00000000;
90006c74:	61da      	str	r2, [r3, #28]
  RCC->D3CFGR = 0x00000000;
90006c76:	621a      	str	r2, [r3, #32]
  RCC->PLLCKSELR = 0x00000000;
90006c78:	629a      	str	r2, [r3, #40]	; 0x28
  RCC->PLLCFGR = 0x00000000;
90006c7a:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC->PLL1DIVR = 0x00000000;
90006c7c:	631a      	str	r2, [r3, #48]	; 0x30
  RCC->PLL1FRACR = 0x00000000;
90006c7e:	635a      	str	r2, [r3, #52]	; 0x34
  RCC->PLL2DIVR = 0x00000000;
90006c80:	639a      	str	r2, [r3, #56]	; 0x38
  RCC->PLL2FRACR = 0x00000000;
90006c82:	63da      	str	r2, [r3, #60]	; 0x3c
  RCC->PLL3DIVR = 0x00000000;
90006c84:	641a      	str	r2, [r3, #64]	; 0x40
  RCC->PLL3FRACR = 0x00000000;
90006c86:	645a      	str	r2, [r3, #68]	; 0x44
  RCC->CR &= 0xFFFBFFFFU;
90006c88:	6818      	ldr	r0, [r3, #0]
90006c8a:	f420 2080 	bic.w	r0, r0, #262144	; 0x40000
90006c8e:	6018      	str	r0, [r3, #0]
  RCC->CIER = 0x00000000;
90006c90:	661a      	str	r2, [r3, #96]	; 0x60
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
90006c92:	6823      	ldr	r3, [r4, #0]
90006c94:	4019      	ands	r1, r3
90006c96:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
90006c9a:	d203      	bcs.n	90006ca4 <SystemInit+0x5c>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
90006c9c:	4b09      	ldr	r3, [pc, #36]	; (90006cc4 <SystemInit+0x7c>)
90006c9e:	2201      	movs	r2, #1
90006ca0:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#elif defined(VECT_TAB_QSPI)
  SCB->VTOR = (unsigned int)&VECTOR_TABLE_LOCATION; /* Vector Table Relocation in External FLASH */
90006ca4:	4a08      	ldr	r2, [pc, #32]	; (90006cc8 <SystemInit+0x80>)
90006ca6:	4b02      	ldr	r3, [pc, #8]	; (90006cb0 <SystemInit+0x68>)
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
90006ca8:	f85d 4b04 	ldr.w	r4, [sp], #4
  SCB->VTOR = (unsigned int)&VECTOR_TABLE_LOCATION; /* Vector Table Relocation in External FLASH */
90006cac:	609a      	str	r2, [r3, #8]
}
90006cae:	4770      	bx	lr
90006cb0:	e000ed00 	.word	0xe000ed00
90006cb4:	58024400 	.word	0x58024400
90006cb8:	eaf6ed7f 	.word	0xeaf6ed7f
90006cbc:	5c001000 	.word	0x5c001000
90006cc0:	ffff0000 	.word	0xffff0000
90006cc4:	51008000 	.word	0x51008000
90006cc8:	90000000 	.word	0x90000000

90006ccc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
90006ccc:	b510      	push	{r4, lr}
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
90006cce:	2003      	movs	r0, #3
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
90006cd0:	4c12      	ldr	r4, [pc, #72]	; (90006d1c <HAL_Init+0x50>)
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
90006cd2:	f000 fed7 	bl	90007a84 <HAL_NVIC_SetPriorityGrouping>
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
90006cd6:	f004 faf9 	bl	9000b2cc <HAL_RCC_GetSysClockFreq>
90006cda:	4b11      	ldr	r3, [pc, #68]	; (90006d20 <HAL_Init+0x54>)
90006cdc:	4911      	ldr	r1, [pc, #68]	; (90006d24 <HAL_Init+0x58>)
90006cde:	699a      	ldr	r2, [r3, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
90006ce0:	699b      	ldr	r3, [r3, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
90006ce2:	f3c2 2203 	ubfx	r2, r2, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
90006ce6:	f003 030f 	and.w	r3, r3, #15
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
90006cea:	5c8a      	ldrb	r2, [r1, r2]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
90006cec:	5ccb      	ldrb	r3, [r1, r3]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
90006cee:	f002 021f 	and.w	r2, r2, #31
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
90006cf2:	490d      	ldr	r1, [pc, #52]	; (90006d28 <HAL_Init+0x5c>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
90006cf4:	f003 031f 	and.w	r3, r3, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
90006cf8:	40d0      	lsrs	r0, r2
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
90006cfa:	fa20 f303 	lsr.w	r3, r0, r3
  SystemCoreClock = common_system_clock;
90006cfe:	6008      	str	r0, [r1, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
90006d00:	2000      	movs	r0, #0
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
90006d02:	6023      	str	r3, [r4, #0]
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
90006d04:	f7fd ff16 	bl	90004b34 <HAL_InitTick>
90006d08:	b110      	cbz	r0, 90006d10 <HAL_Init+0x44>
  {
    return HAL_ERROR;
90006d0a:	2401      	movs	r4, #1
  /* Init the low level hardware */
  HAL_MspInit();

  /* Return function status */
  return HAL_OK;
}
90006d0c:	4620      	mov	r0, r4
90006d0e:	bd10      	pop	{r4, pc}
90006d10:	4604      	mov	r4, r0
  HAL_MspInit();
90006d12:	f7fd fc6d 	bl	900045f0 <HAL_MspInit>
}
90006d16:	4620      	mov	r0, r4
90006d18:	bd10      	pop	{r4, pc}
90006d1a:	bf00      	nop
90006d1c:	24000058 	.word	0x24000058
90006d20:	58024400 	.word	0x58024400
90006d24:	90026504 	.word	0x90026504
90006d28:	24000054 	.word	0x24000054

90006d2c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
90006d2c:	4a03      	ldr	r2, [pc, #12]	; (90006d3c <HAL_IncTick+0x10>)
90006d2e:	4b04      	ldr	r3, [pc, #16]	; (90006d40 <HAL_IncTick+0x14>)
90006d30:	6811      	ldr	r1, [r2, #0]
90006d32:	781b      	ldrb	r3, [r3, #0]
90006d34:	440b      	add	r3, r1
90006d36:	6013      	str	r3, [r2, #0]
}
90006d38:	4770      	bx	lr
90006d3a:	bf00      	nop
90006d3c:	2400be20 	.word	0x2400be20
90006d40:	2400005c 	.word	0x2400005c

90006d44 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
90006d44:	4b01      	ldr	r3, [pc, #4]	; (90006d4c <HAL_GetTick+0x8>)
90006d46:	6818      	ldr	r0, [r3, #0]
}
90006d48:	4770      	bx	lr
90006d4a:	bf00      	nop
90006d4c:	2400be20 	.word	0x2400be20

90006d50 <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16);
90006d50:	4b01      	ldr	r3, [pc, #4]	; (90006d58 <HAL_GetREVID+0x8>)
90006d52:	6818      	ldr	r0, [r3, #0]
}
90006d54:	0c00      	lsrs	r0, r0, #16
90006d56:	4770      	bx	lr
90006d58:	5c001000 	.word	0x5c001000

90006d5c <HAL_ADC_PollForConversion>:
{
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
90006d5c:	4b3e      	ldr	r3, [pc, #248]	; (90006e58 <HAL_ADC_PollForConversion+0xfc>)
90006d5e:	6802      	ldr	r2, [r0, #0]
90006d60:	429a      	cmp	r2, r3
{
90006d62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
90006d66:	4605      	mov	r5, r0
90006d68:	460e      	mov	r6, r1
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
90006d6a:	d059      	beq.n	90006e20 <HAL_ADC_PollForConversion+0xc4>
90006d6c:	f503 7380 	add.w	r3, r3, #256	; 0x100
90006d70:	429a      	cmp	r2, r3
90006d72:	d055      	beq.n	90006e20 <HAL_ADC_PollForConversion+0xc4>
90006d74:	4939      	ldr	r1, [pc, #228]	; (90006e5c <HAL_ADC_PollForConversion+0x100>)

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
90006d76:	692c      	ldr	r4, [r5, #16]
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
90006d78:	688f      	ldr	r7, [r1, #8]
90006d7a:	2c08      	cmp	r4, #8
90006d7c:	f007 071f 	and.w	r7, r7, #31
90006d80:	d009      	beq.n	90006d96 <HAL_ADC_PollForConversion+0x3a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
90006d82:	f240 2321 	movw	r3, #545	; 0x221
90006d86:	40fb      	lsrs	r3, r7
90006d88:	07d8      	lsls	r0, r3, #31
90006d8a:	d458      	bmi.n	90006e3e <HAL_ADC_PollForConversion+0xe2>
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
90006d8c:	688b      	ldr	r3, [r1, #8]
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
90006d8e:	f413 4f40 	tst.w	r3, #49152	; 0xc000
90006d92:	d157      	bne.n	90006e44 <HAL_ADC_PollForConversion+0xe8>
        tmp_Flag_End = (ADC_FLAG_EOC);
90006d94:	2404      	movs	r4, #4
      }
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
90006d96:	f7ff ffd5 	bl	90006d44 <HAL_GetTick>
90006d9a:	682a      	ldr	r2, [r5, #0]
90006d9c:	4680      	mov	r8, r0

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
90006d9e:	1c73      	adds	r3, r6, #1
90006da0:	d127      	bne.n	90006df2 <HAL_ADC_PollForConversion+0x96>
90006da2:	6813      	ldr	r3, [r2, #0]
90006da4:	4223      	tst	r3, r4
90006da6:	d0fc      	beq.n	90006da2 <HAL_ADC_PollForConversion+0x46>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
90006da8:	6d6b      	ldr	r3, [r5, #84]	; 0x54
90006daa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
90006dae:	656b      	str	r3, [r5, #84]	; 0x54
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
90006db0:	68d3      	ldr	r3, [r2, #12]
90006db2:	f413 6f40 	tst.w	r3, #3072	; 0xc00
90006db6:	d10f      	bne.n	90006dd8 <HAL_ADC_PollForConversion+0x7c>

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
      && (hadc->Init.ContinuousConvMode == DISABLE)
90006db8:	7d6b      	ldrb	r3, [r5, #21]
90006dba:	b96b      	cbnz	r3, 90006dd8 <HAL_ADC_PollForConversion+0x7c>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
90006dbc:	6813      	ldr	r3, [r2, #0]
90006dbe:	0718      	lsls	r0, r3, #28
90006dc0:	d50a      	bpl.n	90006dd8 <HAL_ADC_PollForConversion+0x7c>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
90006dc2:	6d6b      	ldr	r3, [r5, #84]	; 0x54
90006dc4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
90006dc8:	656b      	str	r3, [r5, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
90006dca:	6d6b      	ldr	r3, [r5, #84]	; 0x54
90006dcc:	04d9      	lsls	r1, r3, #19
90006dce:	d403      	bmi.n	90006dd8 <HAL_ADC_PollForConversion+0x7c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
90006dd0:	6d6b      	ldr	r3, [r5, #84]	; 0x54
90006dd2:	f043 0301 	orr.w	r3, r3, #1
90006dd6:	656b      	str	r3, [r5, #84]	; 0x54
  }

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
90006dd8:	4b21      	ldr	r3, [pc, #132]	; (90006e60 <HAL_ADC_PollForConversion+0x104>)
90006dda:	429a      	cmp	r2, r3
90006ddc:	d022      	beq.n	90006e24 <HAL_ADC_PollForConversion+0xc8>
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
  }

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
90006dde:	2c08      	cmp	r4, #8
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
90006de0:	68d0      	ldr	r0, [r2, #12]
  if (tmp_Flag_End == ADC_FLAG_EOS)
90006de2:	d028      	beq.n	90006e36 <HAL_ADC_PollForConversion+0xda>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
90006de4:	f410 4080 	ands.w	r0, r0, #16384	; 0x4000
90006de8:	d133      	bne.n	90006e52 <HAL_ADC_PollForConversion+0xf6>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
90006dea:	230c      	movs	r3, #12
90006dec:	6013      	str	r3, [r2, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
}
90006dee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
90006df2:	6813      	ldr	r3, [r2, #0]
90006df4:	4223      	tst	r3, r4
90006df6:	d1d7      	bne.n	90006da8 <HAL_ADC_PollForConversion+0x4c>
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
90006df8:	f7ff ffa4 	bl	90006d44 <HAL_GetTick>
90006dfc:	eba0 0008 	sub.w	r0, r0, r8
90006e00:	682a      	ldr	r2, [r5, #0]
90006e02:	42b0      	cmp	r0, r6
90006e04:	d801      	bhi.n	90006e0a <HAL_ADC_PollForConversion+0xae>
90006e06:	2e00      	cmp	r6, #0
90006e08:	d1c9      	bne.n	90006d9e <HAL_ADC_PollForConversion+0x42>
        if((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
90006e0a:	6813      	ldr	r3, [r2, #0]
90006e0c:	4023      	ands	r3, r4
90006e0e:	d1c6      	bne.n	90006d9e <HAL_ADC_PollForConversion+0x42>
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
90006e10:	6d6a      	ldr	r2, [r5, #84]	; 0x54
          return HAL_TIMEOUT;
90006e12:	2003      	movs	r0, #3
          __HAL_UNLOCK(hadc);
90006e14:	f885 3050 	strb.w	r3, [r5, #80]	; 0x50
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
90006e18:	f042 0204 	orr.w	r2, r2, #4
90006e1c:	656a      	str	r2, [r5, #84]	; 0x54
          return HAL_TIMEOUT;
90006e1e:	e7e6      	b.n	90006dee <HAL_ADC_PollForConversion+0x92>
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
90006e20:	4910      	ldr	r1, [pc, #64]	; (90006e64 <HAL_ADC_PollForConversion+0x108>)
90006e22:	e7a8      	b.n	90006d76 <HAL_ADC_PollForConversion+0x1a>
90006e24:	f240 2321 	movw	r3, #545	; 0x221
90006e28:	40fb      	lsrs	r3, r7
90006e2a:	07db      	lsls	r3, r3, #31
90006e2c:	d4d7      	bmi.n	90006dde <HAL_ADC_PollForConversion+0x82>
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
90006e2e:	4b0a      	ldr	r3, [pc, #40]	; (90006e58 <HAL_ADC_PollForConversion+0xfc>)
  if (tmp_Flag_End == ADC_FLAG_EOS)
90006e30:	2c08      	cmp	r4, #8
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
90006e32:	68d8      	ldr	r0, [r3, #12]
  if (tmp_Flag_End == ADC_FLAG_EOS)
90006e34:	d1d6      	bne.n	90006de4 <HAL_ADC_PollForConversion+0x88>
  return HAL_OK;
90006e36:	2000      	movs	r0, #0
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
90006e38:	6014      	str	r4, [r2, #0]
}
90006e3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
90006e3e:	68d3      	ldr	r3, [r2, #12]
90006e40:	07da      	lsls	r2, r3, #31
90006e42:	d5a7      	bpl.n	90006d94 <HAL_ADC_PollForConversion+0x38>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
90006e44:	6d6b      	ldr	r3, [r5, #84]	; 0x54
        return HAL_ERROR;
90006e46:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
90006e48:	f043 0320 	orr.w	r3, r3, #32
90006e4c:	656b      	str	r3, [r5, #84]	; 0x54
}
90006e4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return HAL_OK;
90006e52:	2000      	movs	r0, #0
}
90006e54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
90006e58:	40022000 	.word	0x40022000
90006e5c:	58026300 	.word	0x58026300
90006e60:	40022100 	.word	0x40022100
90006e64:	40022300 	.word	0x40022300

90006e68 <HAL_ADC_GetValue>:

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
90006e68:	6803      	ldr	r3, [r0, #0]
90006e6a:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
90006e6c:	4770      	bx	lr
90006e6e:	bf00      	nop

90006e70 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
90006e70:	b5f0      	push	{r4, r5, r6, r7, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
90006e72:	2200      	movs	r2, #0
{
90006e74:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0;
90006e76:	9201      	str	r2, [sp, #4]
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
90006e78:	f890 2050 	ldrb.w	r2, [r0, #80]	; 0x50
90006e7c:	2a01      	cmp	r2, #1
90006e7e:	f000 8136 	beq.w	900070ee <HAL_ADC_ConfigChannel+0x27e>
90006e82:	4603      	mov	r3, r0
90006e84:	2001      	movs	r0, #1
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
90006e86:	681a      	ldr	r2, [r3, #0]
  __HAL_LOCK(hadc);
90006e88:	f883 0050 	strb.w	r0, [r3, #80]	; 0x50
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
90006e8c:	6894      	ldr	r4, [r2, #8]
90006e8e:	0766      	lsls	r6, r4, #29
90006e90:	f100 809a 	bmi.w	90006fc8 <HAL_ADC_ConfigChannel+0x158>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
90006e94:	680c      	ldr	r4, [r1, #0]
90006e96:	f3c4 0513 	ubfx	r5, r4, #0, #20
90006e9a:	2d00      	cmp	r5, #0
90006e9c:	f040 809d 	bne.w	90006fda <HAL_ADC_ConfigChannel+0x16a>
90006ea0:	f3c4 6484 	ubfx	r4, r4, #26, #5
90006ea4:	40a0      	lsls	r0, r4
90006ea6:	69d6      	ldr	r6, [r2, #28]
  MODIFY_REG(*preg,
90006ea8:	f04f 0e1f 	mov.w	lr, #31
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
90006eac:	684d      	ldr	r5, [r1, #4]
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
90006eae:	4330      	orrs	r0, r6
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
90006eb0:	ea4f 1c95 	mov.w	ip, r5, lsr #6
90006eb4:	61d0      	str	r0, [r2, #28]
  MODIFY_REG(*preg,
90006eb6:	f005 001f 	and.w	r0, r5, #31
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
90006eba:	f00c 050c 	and.w	r5, ip, #12
90006ebe:	f102 0c30 	add.w	ip, r2, #48	; 0x30
  MODIFY_REG(*preg,
90006ec2:	4084      	lsls	r4, r0
90006ec4:	fa0e fe00 	lsl.w	lr, lr, r0
90006ec8:	f85c 0005 	ldr.w	r0, [ip, r5]
90006ecc:	ea20 000e 	bic.w	r0, r0, lr
90006ed0:	4320      	orrs	r0, r4
90006ed2:	f84c 0005 	str.w	r0, [ip, r5]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
90006ed6:	6890      	ldr	r0, [r2, #8]
90006ed8:	f010 0f04 	tst.w	r0, #4
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
90006edc:	6890      	ldr	r0, [r2, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
90006ede:	d159      	bne.n	90006f94 <HAL_ADC_ConfigChannel+0x124>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
90006ee0:	0705      	lsls	r5, r0, #28
90006ee2:	d457      	bmi.n	90006f94 <HAL_ADC_ConfigChannel+0x124>
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
90006ee4:	680c      	ldr	r4, [r1, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
90006ee6:	f102 0614 	add.w	r6, r2, #20
  MODIFY_REG(*preg,
90006eea:	f04f 0c07 	mov.w	ip, #7
90006eee:	688f      	ldr	r7, [r1, #8]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
90006ef0:	0de5      	lsrs	r5, r4, #23
  MODIFY_REG(*preg,
90006ef2:	f3c4 5404 	ubfx	r4, r4, #20, #5
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
90006ef6:	f005 0504 	and.w	r5, r5, #4
  MODIFY_REG(*preg,
90006efa:	fa0c fc04 	lsl.w	ip, ip, r4
90006efe:	fa07 f404 	lsl.w	r4, r7, r4
90006f02:	5970      	ldr	r0, [r6, r5]
90006f04:	ea20 000c 	bic.w	r0, r0, ip
90006f08:	4320      	orrs	r0, r4
90006f0a:	5170      	str	r0, [r6, r5]
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
90006f0c:	48bd      	ldr	r0, [pc, #756]	; (90007204 <HAL_ADC_ConfigChannel+0x394>)
90006f0e:	6800      	ldr	r0, [r0, #0]
90006f10:	f000 4070 	and.w	r0, r0, #4026531840	; 0xf0000000
90006f14:	f1b0 5f80 	cmp.w	r0, #268435456	; 0x10000000
90006f18:	68d0      	ldr	r0, [r2, #12]
90006f1a:	f000 80e2 	beq.w	900070e2 <HAL_ADC_ConfigChannel+0x272>
90006f1e:	f010 0f10 	tst.w	r0, #16
90006f22:	694d      	ldr	r5, [r1, #20]
90006f24:	68d0      	ldr	r0, [r2, #12]
90006f26:	f040 8102 	bne.w	9000712e <HAL_ADC_ConfigChannel+0x2be>
90006f2a:	f3c0 0082 	ubfx	r0, r0, #2, #3
90006f2e:	0040      	lsls	r0, r0, #1
90006f30:	4085      	lsls	r5, r0
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
90006f32:	690e      	ldr	r6, [r1, #16]
90006f34:	2e04      	cmp	r6, #4
90006f36:	f000 80dd 	beq.w	900070f4 <HAL_ADC_ConfigChannel+0x284>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
90006f3a:	f102 0460 	add.w	r4, r2, #96	; 0x60
    MODIFY_REG(*preg,
90006f3e:	6808      	ldr	r0, [r1, #0]
90006f40:	f854 7026 	ldr.w	r7, [r4, r6, lsl #2]
90006f44:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
90006f48:	f007 4c00 	and.w	ip, r7, #2147483648	; 0x80000000
90006f4c:	ea40 000c 	orr.w	r0, r0, ip
90006f50:	4328      	orrs	r0, r5
90006f52:	f844 0026 	str.w	r0, [r4, r6, lsl #2]
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
90006f56:	7e4d      	ldrb	r5, [r1, #25]
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
90006f58:	690e      	ldr	r6, [r1, #16]
90006f5a:	f1a5 0501 	sub.w	r5, r5, #1
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
90006f5e:	f854 0026 	ldr.w	r0, [r4, r6, lsl #2]
90006f62:	fab5 f585 	clz	r5, r5
90006f66:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
90006f6a:	096d      	lsrs	r5, r5, #5
90006f6c:	ea40 70c5 	orr.w	r0, r0, r5, lsl #31
90006f70:	f844 0026 	str.w	r0, [r4, r6, lsl #2]

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
90006f74:	7e08      	ldrb	r0, [r1, #24]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
90006f76:	690d      	ldr	r5, [r1, #16]
90006f78:	f1a0 0001 	sub.w	r0, r0, #1
90006f7c:	6914      	ldr	r4, [r2, #16]
90006f7e:	f005 051f 	and.w	r5, r5, #31
90006f82:	fab0 f080 	clz	r0, r0
90006f86:	f424 44f0 	bic.w	r4, r4, #30720	; 0x7800
90006f8a:	0940      	lsrs	r0, r0, #5
90006f8c:	02c0      	lsls	r0, r0, #11
90006f8e:	40a8      	lsls	r0, r5
90006f90:	4320      	orrs	r0, r4
90006f92:	6110      	str	r0, [r2, #16]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
90006f94:	6890      	ldr	r0, [r2, #8]
90006f96:	07c4      	lsls	r4, r0, #31
90006f98:	d414      	bmi.n	90006fc4 <HAL_ADC_ConfigChannel+0x154>
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
90006f9a:	68ce      	ldr	r6, [r1, #12]
90006f9c:	680c      	ldr	r4, [r1, #0]
  MODIFY_REG(ADCx->DIFSEL,
90006f9e:	f006 0718 	and.w	r7, r6, #24
90006fa2:	4899      	ldr	r0, [pc, #612]	; (90007208 <HAL_ADC_ConfigChannel+0x398>)
90006fa4:	f8d2 50c0 	ldr.w	r5, [r2, #192]	; 0xc0
90006fa8:	40f8      	lsrs	r0, r7
90006faa:	f3c4 0713 	ubfx	r7, r4, #0, #20
90006fae:	4020      	ands	r0, r4
90006fb0:	ea25 0507 	bic.w	r5, r5, r7
90006fb4:	4328      	orrs	r0, r5
90006fb6:	f8c2 00c0 	str.w	r0, [r2, #192]	; 0xc0

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
90006fba:	4894      	ldr	r0, [pc, #592]	; (9000720c <HAL_ADC_ConfigChannel+0x39c>)
90006fbc:	4286      	cmp	r6, r0
90006fbe:	d043      	beq.n	90007048 <HAL_ADC_ConfigChannel+0x1d8>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
90006fc0:	2c00      	cmp	r4, #0
90006fc2:	db13      	blt.n	90006fec <HAL_ADC_ConfigChannel+0x17c>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
90006fc4:	2000      	movs	r0, #0
90006fc6:	e003      	b.n	90006fd0 <HAL_ADC_ConfigChannel+0x160>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
90006fc8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
90006fca:	f042 0220 	orr.w	r2, r2, #32
90006fce:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
90006fd0:	2200      	movs	r2, #0
90006fd2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
}
90006fd6:	b003      	add	sp, #12
90006fd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
90006fda:	fa94 f5a4 	rbit	r5, r4
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
90006fde:	b115      	cbz	r5, 90006fe6 <HAL_ADC_ConfigChannel+0x176>
  {
    return 32U;
  }
  return __builtin_clz(value);
90006fe0:	fab5 f585 	clz	r5, r5
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
90006fe4:	40a8      	lsls	r0, r5
90006fe6:	f3c4 6484 	ubfx	r4, r4, #26, #5
90006fea:	e75c      	b.n	90006ea6 <HAL_ADC_ConfigChannel+0x36>
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
90006fec:	4988      	ldr	r1, [pc, #544]	; (90007210 <HAL_ADC_ConfigChannel+0x3a0>)
90006fee:	428a      	cmp	r2, r1
90006ff0:	f000 80c1 	beq.w	90007176 <HAL_ADC_ConfigChannel+0x306>
90006ff4:	f501 7180 	add.w	r1, r1, #256	; 0x100
90006ff8:	428a      	cmp	r2, r1
90006ffa:	f000 80bc 	beq.w	90007176 <HAL_ADC_ConfigChannel+0x306>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
90006ffe:	4d85      	ldr	r5, [pc, #532]	; (90007214 <HAL_ADC_ConfigChannel+0x3a4>)
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
90007000:	4885      	ldr	r0, [pc, #532]	; (90007218 <HAL_ADC_ConfigChannel+0x3a8>)
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
90007002:	68a9      	ldr	r1, [r5, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
90007004:	6880      	ldr	r0, [r0, #8]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
90007006:	f001 76e0 	and.w	r6, r1, #29360128	; 0x1c00000
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
9000700a:	43c0      	mvns	r0, r0
9000700c:	f000 0001 	and.w	r0, r0, #1
90007010:	2800      	cmp	r0, #0
90007012:	f000 80bf 	beq.w	90007194 <HAL_ADC_ConfigChannel+0x324>
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
90007016:	4881      	ldr	r0, [pc, #516]	; (9000721c <HAL_ADC_ConfigChannel+0x3ac>)
90007018:	4284      	cmp	r4, r0
9000701a:	f000 8107 	beq.w	9000722c <HAL_ADC_ConfigChannel+0x3bc>
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
9000701e:	4880      	ldr	r0, [pc, #512]	; (90007220 <HAL_ADC_ConfigChannel+0x3b0>)
90007020:	4284      	cmp	r4, r0
90007022:	f000 8126 	beq.w	90007272 <HAL_ADC_ConfigChannel+0x402>
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
90007026:	487f      	ldr	r0, [pc, #508]	; (90007224 <HAL_ADC_ConfigChannel+0x3b4>)
90007028:	4284      	cmp	r4, r0
9000702a:	d1cb      	bne.n	90006fc4 <HAL_ADC_ConfigChannel+0x154>
            if (ADC_VREFINT_INSTANCE(hadc))
9000702c:	0249      	lsls	r1, r1, #9
9000702e:	d4c9      	bmi.n	90006fc4 <HAL_ADC_ConfigChannel+0x154>
90007030:	4979      	ldr	r1, [pc, #484]	; (90007218 <HAL_ADC_ConfigChannel+0x3a8>)
90007032:	428a      	cmp	r2, r1
90007034:	d1c6      	bne.n	90006fc4 <HAL_ADC_ConfigChannel+0x154>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
90007036:	68aa      	ldr	r2, [r5, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
90007038:	2000      	movs	r0, #0
9000703a:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
9000703e:	4332      	orrs	r2, r6
90007040:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
90007044:	60aa      	str	r2, [r5, #8]
}
90007046:	e7c3      	b.n	90006fd0 <HAL_ADC_ConfigChannel+0x160>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
90007048:	2f00      	cmp	r7, #0
9000704a:	d075      	beq.n	90007138 <HAL_ADC_ConfigChannel+0x2c8>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
9000704c:	fa94 f0a4 	rbit	r0, r4
  if (value == 0U)
90007050:	2800      	cmp	r0, #0
90007052:	f000 80b3 	beq.w	900071bc <HAL_ADC_ConfigChannel+0x34c>
  return __builtin_clz(value);
90007056:	fab0 f080 	clz	r0, r0
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
9000705a:	3001      	adds	r0, #1
9000705c:	f000 001f 	and.w	r0, r0, #31
90007060:	2809      	cmp	r0, #9
90007062:	f240 80ab 	bls.w	900071bc <HAL_ADC_ConfigChannel+0x34c>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
90007066:	fa94 f5a4 	rbit	r5, r4
  if (value == 0U)
9000706a:	2d00      	cmp	r5, #0
9000706c:	f000 8115 	beq.w	9000729a <HAL_ADC_ConfigChannel+0x42a>
  return __builtin_clz(value);
90007070:	fab5 f585 	clz	r5, r5
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
90007074:	3501      	adds	r5, #1
90007076:	06ad      	lsls	r5, r5, #26
90007078:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
9000707c:	fa94 f0a4 	rbit	r0, r4
  if (value == 0U)
90007080:	2800      	cmp	r0, #0
90007082:	f000 8108 	beq.w	90007296 <HAL_ADC_ConfigChannel+0x426>
  return __builtin_clz(value);
90007086:	fab0 f080 	clz	r0, r0
9000708a:	2601      	movs	r6, #1
9000708c:	3001      	adds	r0, #1
9000708e:	f000 001f 	and.w	r0, r0, #31
90007092:	fa06 f000 	lsl.w	r0, r6, r0
90007096:	4305      	orrs	r5, r0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
90007098:	fa94 f4a4 	rbit	r4, r4
  if (value == 0U)
9000709c:	2c00      	cmp	r4, #0
9000709e:	f000 80f8 	beq.w	90007292 <HAL_ADC_ConfigChannel+0x422>
  return __builtin_clz(value);
900070a2:	fab4 f484 	clz	r4, r4
900070a6:	2003      	movs	r0, #3
900070a8:	f06f 061d 	mvn.w	r6, #29
900070ac:	3401      	adds	r4, #1
900070ae:	f004 041f 	and.w	r4, r4, #31
900070b2:	fb10 6004 	smlabb	r0, r0, r4, r6
900070b6:	0500      	lsls	r0, r0, #20
900070b8:	f040 7000 	orr.w	r0, r0, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
900070bc:	4328      	orrs	r0, r5
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
900070be:	f102 0614 	add.w	r6, r2, #20
  MODIFY_REG(*preg,
900070c2:	2707      	movs	r7, #7
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
900070c4:	0dc5      	lsrs	r5, r0, #23
  MODIFY_REG(*preg,
900070c6:	f3c0 5004 	ubfx	r0, r0, #20, #5
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
900070ca:	f005 0504 	and.w	r5, r5, #4
  MODIFY_REG(*preg,
900070ce:	4087      	lsls	r7, r0
900070d0:	5974      	ldr	r4, [r6, r5]
900070d2:	ea24 0407 	bic.w	r4, r4, r7
900070d6:	688f      	ldr	r7, [r1, #8]
900070d8:	4087      	lsls	r7, r0
900070da:	433c      	orrs	r4, r7
900070dc:	5174      	str	r4, [r6, r5]
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
900070de:	680c      	ldr	r4, [r1, #0]
}
900070e0:	e76e      	b.n	90006fc0 <HAL_ADC_ConfigChannel+0x150>
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
900070e2:	f3c0 0082 	ubfx	r0, r0, #2, #3
900070e6:	694d      	ldr	r5, [r1, #20]
900070e8:	0040      	lsls	r0, r0, #1
900070ea:	4085      	lsls	r5, r0
900070ec:	e721      	b.n	90006f32 <HAL_ADC_ConfigChannel+0xc2>
  __HAL_LOCK(hadc);
900070ee:	2002      	movs	r0, #2
}
900070f0:	b003      	add	sp, #12
900070f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
900070f4:	6e10      	ldr	r0, [r2, #96]	; 0x60
900070f6:	680c      	ldr	r4, [r1, #0]
900070f8:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
900070fc:	06a5      	lsls	r5, r4, #26
900070fe:	ebb0 6f84 	cmp.w	r0, r4, lsl #26
90007102:	d02e      	beq.n	90007162 <HAL_ADC_ConfigChannel+0x2f2>
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
90007104:	6e50      	ldr	r0, [r2, #100]	; 0x64
90007106:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
9000710a:	4285      	cmp	r5, r0
9000710c:	d024      	beq.n	90007158 <HAL_ADC_ConfigChannel+0x2e8>
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
9000710e:	6e90      	ldr	r0, [r2, #104]	; 0x68
90007110:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
90007114:	4285      	cmp	r5, r0
90007116:	d029      	beq.n	9000716c <HAL_ADC_ConfigChannel+0x2fc>
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
90007118:	6ed0      	ldr	r0, [r2, #108]	; 0x6c
9000711a:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
9000711e:	4285      	cmp	r5, r0
90007120:	f47f af38 	bne.w	90006f94 <HAL_ADC_ConfigChannel+0x124>
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
90007124:	6ed0      	ldr	r0, [r2, #108]	; 0x6c
90007126:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
9000712a:	66d0      	str	r0, [r2, #108]	; 0x6c
9000712c:	e732      	b.n	90006f94 <HAL_ADC_ConfigChannel+0x124>
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
9000712e:	0840      	lsrs	r0, r0, #1
90007130:	f000 0008 	and.w	r0, r0, #8
90007134:	4085      	lsls	r5, r0
90007136:	e6fc      	b.n	90006f32 <HAL_ADC_ConfigChannel+0xc2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
90007138:	0ea0      	lsrs	r0, r4, #26
9000713a:	3001      	adds	r0, #1
9000713c:	f000 041f 	and.w	r4, r0, #31
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
90007140:	2c09      	cmp	r4, #9
90007142:	d82d      	bhi.n	900071a0 <HAL_ADC_ConfigChannel+0x330>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
90007144:	0685      	lsls	r5, r0, #26
90007146:	2001      	movs	r0, #1
90007148:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
9000714c:	40a0      	lsls	r0, r4
9000714e:	4305      	orrs	r5, r0
90007150:	eb04 0044 	add.w	r0, r4, r4, lsl #1
90007154:	0500      	lsls	r0, r0, #20
90007156:	e7b1      	b.n	900070bc <HAL_ADC_ConfigChannel+0x24c>
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
90007158:	6e50      	ldr	r0, [r2, #100]	; 0x64
9000715a:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
9000715e:	6650      	str	r0, [r2, #100]	; 0x64
90007160:	e7d5      	b.n	9000710e <HAL_ADC_ConfigChannel+0x29e>
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
90007162:	6e10      	ldr	r0, [r2, #96]	; 0x60
90007164:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
90007168:	6610      	str	r0, [r2, #96]	; 0x60
9000716a:	e7cb      	b.n	90007104 <HAL_ADC_ConfigChannel+0x294>
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
9000716c:	6e90      	ldr	r0, [r2, #104]	; 0x68
9000716e:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
90007172:	6690      	str	r0, [r2, #104]	; 0x68
90007174:	e7d0      	b.n	90007118 <HAL_ADC_ConfigChannel+0x2a8>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
90007176:	4826      	ldr	r0, [pc, #152]	; (90007210 <HAL_ADC_ConfigChannel+0x3a0>)
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
90007178:	4d2b      	ldr	r5, [pc, #172]	; (90007228 <HAL_ADC_ConfigChannel+0x3b8>)
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
9000717a:	f500 7080 	add.w	r0, r0, #256	; 0x100
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
9000717e:	68a9      	ldr	r1, [r5, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
90007180:	f850 6cf8 	ldr.w	r6, [r0, #-248]
90007184:	6880      	ldr	r0, [r0, #8]
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
90007186:	4330      	orrs	r0, r6
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
90007188:	f001 76e0 	and.w	r6, r1, #29360128	; 0x1c00000
9000718c:	43c0      	mvns	r0, r0
9000718e:	f000 0001 	and.w	r0, r0, #1
90007192:	e73d      	b.n	90007010 <HAL_ADC_ConfigChannel+0x1a0>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
90007194:	6d5a      	ldr	r2, [r3, #84]	; 0x54
          tmp_hal_status = HAL_ERROR;
90007196:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
90007198:	f042 0220 	orr.w	r2, r2, #32
9000719c:	655a      	str	r2, [r3, #84]	; 0x54
          tmp_hal_status = HAL_ERROR;
9000719e:	e717      	b.n	90006fd0 <HAL_ADC_ConfigChannel+0x160>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
900071a0:	0685      	lsls	r5, r0, #26
900071a2:	2601      	movs	r6, #1
900071a4:	eb04 0044 	add.w	r0, r4, r4, lsl #1
900071a8:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
900071ac:	fa06 f404 	lsl.w	r4, r6, r4
900071b0:	381e      	subs	r0, #30
900071b2:	4325      	orrs	r5, r4
900071b4:	0500      	lsls	r0, r0, #20
900071b6:	f040 7000 	orr.w	r0, r0, #33554432	; 0x2000000
900071ba:	e77f      	b.n	900070bc <HAL_ADC_ConfigChannel+0x24c>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
900071bc:	fa94 f5a4 	rbit	r5, r4
  if (value == 0U)
900071c0:	2d00      	cmp	r5, #0
900071c2:	d072      	beq.n	900072aa <HAL_ADC_ConfigChannel+0x43a>
  return __builtin_clz(value);
900071c4:	fab5 f585 	clz	r5, r5
900071c8:	3501      	adds	r5, #1
900071ca:	06ad      	lsls	r5, r5, #26
900071cc:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
900071d0:	fa94 f0a4 	rbit	r0, r4
  if (value == 0U)
900071d4:	2800      	cmp	r0, #0
900071d6:	d066      	beq.n	900072a6 <HAL_ADC_ConfigChannel+0x436>
  return __builtin_clz(value);
900071d8:	fab0 f080 	clz	r0, r0
900071dc:	2601      	movs	r6, #1
900071de:	3001      	adds	r0, #1
900071e0:	f000 001f 	and.w	r0, r0, #31
900071e4:	fa06 f000 	lsl.w	r0, r6, r0
900071e8:	4305      	orrs	r5, r0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
900071ea:	fa94 f4a4 	rbit	r4, r4
  if (value == 0U)
900071ee:	2c00      	cmp	r4, #0
900071f0:	d056      	beq.n	900072a0 <HAL_ADC_ConfigChannel+0x430>
  return __builtin_clz(value);
900071f2:	fab4 f084 	clz	r0, r4
900071f6:	3001      	adds	r0, #1
900071f8:	f000 001f 	and.w	r0, r0, #31
900071fc:	eb00 0040 	add.w	r0, r0, r0, lsl #1
90007200:	0500      	lsls	r0, r0, #20
90007202:	e75b      	b.n	900070bc <HAL_ADC_ConfigChannel+0x24c>
90007204:	5c001000 	.word	0x5c001000
90007208:	000fffff 	.word	0x000fffff
9000720c:	47ff0000 	.word	0x47ff0000
90007210:	40022000 	.word	0x40022000
90007214:	58026300 	.word	0x58026300
90007218:	58026000 	.word	0x58026000
9000721c:	cb840000 	.word	0xcb840000
90007220:	c7520000 	.word	0xc7520000
90007224:	cfb80000 	.word	0xcfb80000
90007228:	40022300 	.word	0x40022300
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
9000722c:	0208      	lsls	r0, r1, #8
9000722e:	f53f aec9 	bmi.w	90006fc4 <HAL_ADC_ConfigChannel+0x154>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
90007232:	491f      	ldr	r1, [pc, #124]	; (900072b0 <HAL_ADC_ConfigChannel+0x440>)
90007234:	428a      	cmp	r2, r1
90007236:	f47f aec5 	bne.w	90006fc4 <HAL_ADC_ConfigChannel+0x154>
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
9000723a:	4a1e      	ldr	r2, [pc, #120]	; (900072b4 <HAL_ADC_ConfigChannel+0x444>)
9000723c:	481e      	ldr	r0, [pc, #120]	; (900072b8 <HAL_ADC_ConfigChannel+0x448>)
9000723e:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
90007240:	68a9      	ldr	r1, [r5, #8]
90007242:	0992      	lsrs	r2, r2, #6
90007244:	f021 71e0 	bic.w	r1, r1, #29360128	; 0x1c00000
90007248:	fba0 0202 	umull	r0, r2, r0, r2
9000724c:	4331      	orrs	r1, r6
9000724e:	0992      	lsrs	r2, r2, #6
90007250:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
90007254:	3201      	adds	r2, #1
90007256:	60a9      	str	r1, [r5, #8]
90007258:	0052      	lsls	r2, r2, #1
9000725a:	9201      	str	r2, [sp, #4]
              while (wait_loop_index != 0UL)
9000725c:	9a01      	ldr	r2, [sp, #4]
9000725e:	2a00      	cmp	r2, #0
90007260:	f43f aeb0 	beq.w	90006fc4 <HAL_ADC_ConfigChannel+0x154>
                wait_loop_index--;
90007264:	9a01      	ldr	r2, [sp, #4]
90007266:	3a01      	subs	r2, #1
90007268:	9201      	str	r2, [sp, #4]
              while (wait_loop_index != 0UL)
9000726a:	9a01      	ldr	r2, [sp, #4]
9000726c:	2a00      	cmp	r2, #0
9000726e:	d1f9      	bne.n	90007264 <HAL_ADC_ConfigChannel+0x3f4>
90007270:	e6a8      	b.n	90006fc4 <HAL_ADC_ConfigChannel+0x154>
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
90007272:	f011 7080 	ands.w	r0, r1, #16777216	; 0x1000000
90007276:	f47f aea5 	bne.w	90006fc4 <HAL_ADC_ConfigChannel+0x154>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
9000727a:	490d      	ldr	r1, [pc, #52]	; (900072b0 <HAL_ADC_ConfigChannel+0x440>)
9000727c:	428a      	cmp	r2, r1
9000727e:	f47f aea1 	bne.w	90006fc4 <HAL_ADC_ConfigChannel+0x154>
90007282:	68aa      	ldr	r2, [r5, #8]
90007284:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
90007288:	4332      	orrs	r2, r6
9000728a:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
9000728e:	60aa      	str	r2, [r5, #8]
}
90007290:	e69e      	b.n	90006fd0 <HAL_ADC_ConfigChannel+0x160>
90007292:	480a      	ldr	r0, [pc, #40]	; (900072bc <HAL_ADC_ConfigChannel+0x44c>)
90007294:	e712      	b.n	900070bc <HAL_ADC_ConfigChannel+0x24c>
90007296:	2002      	movs	r0, #2
90007298:	e6fd      	b.n	90007096 <HAL_ADC_ConfigChannel+0x226>
9000729a:	f04f 6580 	mov.w	r5, #67108864	; 0x4000000
9000729e:	e6ed      	b.n	9000707c <HAL_ADC_ConfigChannel+0x20c>
900072a0:	f44f 1040 	mov.w	r0, #3145728	; 0x300000
900072a4:	e70a      	b.n	900070bc <HAL_ADC_ConfigChannel+0x24c>
900072a6:	2002      	movs	r0, #2
900072a8:	e79e      	b.n	900071e8 <HAL_ADC_ConfigChannel+0x378>
900072aa:	f04f 6580 	mov.w	r5, #67108864	; 0x4000000
900072ae:	e78f      	b.n	900071d0 <HAL_ADC_ConfigChannel+0x360>
900072b0:	58026000 	.word	0x58026000
900072b4:	24000054 	.word	0x24000054
900072b8:	053e2d63 	.word	0x053e2d63
900072bc:	fe500000 	.word	0xfe500000

900072c0 <ADC_ConversionStop>:
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
900072c0:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
900072c2:	689a      	ldr	r2, [r3, #8]
900072c4:	f012 0f04 	tst.w	r2, #4
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
900072c8:	689a      	ldr	r2, [r3, #8]
{
900072ca:	b570      	push	{r4, r5, r6, lr}
900072cc:	4604      	mov	r4, r0
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
900072ce:	d103      	bne.n	900072d8 <ADC_ConversionStop+0x18>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
900072d0:	0712      	lsls	r2, r2, #28
900072d2:	d401      	bmi.n	900072d8 <ADC_ConversionStop+0x18>
    }

  }

  /* Return HAL status */
  return HAL_OK;
900072d4:	2000      	movs	r0, #0
}
900072d6:	bd70      	pop	{r4, r5, r6, pc}
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
900072d8:	68da      	ldr	r2, [r3, #12]
900072da:	0196      	lsls	r6, r2, #6
900072dc:	d504      	bpl.n	900072e8 <ADC_ConversionStop+0x28>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
900072de:	8aa0      	ldrh	r0, [r4, #20]
900072e0:	f240 1201 	movw	r2, #257	; 0x101
900072e4:	4290      	cmp	r0, r2
900072e6:	d01a      	beq.n	9000731e <ADC_ConversionStop+0x5e>
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
900072e8:	2902      	cmp	r1, #2
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
900072ea:	689a      	ldr	r2, [r3, #8]
900072ec:	d040      	beq.n	90007370 <ADC_ConversionStop+0xb0>
900072ee:	0750      	lsls	r0, r2, #29
900072f0:	d508      	bpl.n	90007304 <ADC_ConversionStop+0x44>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
900072f2:	689a      	ldr	r2, [r3, #8]
900072f4:	0792      	lsls	r2, r2, #30
900072f6:	d405      	bmi.n	90007304 <ADC_ConversionStop+0x44>
  MODIFY_REG(ADCx->CR,
900072f8:	6898      	ldr	r0, [r3, #8]
900072fa:	4a2d      	ldr	r2, [pc, #180]	; (900073b0 <ADC_ConversionStop+0xf0>)
900072fc:	4002      	ands	r2, r0
900072fe:	f042 0210 	orr.w	r2, r2, #16
90007302:	609a      	str	r2, [r3, #8]
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
90007304:	2901      	cmp	r1, #1
90007306:	d019      	beq.n	9000733c <ADC_ConversionStop+0x7c>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
90007308:	689a      	ldr	r2, [r3, #8]
9000730a:	0716      	lsls	r6, r2, #28
9000730c:	d502      	bpl.n	90007314 <ADC_ConversionStop+0x54>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
9000730e:	689a      	ldr	r2, [r3, #8]
90007310:	0790      	lsls	r0, r2, #30
90007312:	d534      	bpl.n	9000737e <ADC_ConversionStop+0xbe>
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
90007314:	2903      	cmp	r1, #3
90007316:	bf14      	ite	ne
90007318:	2504      	movne	r5, #4
9000731a:	250c      	moveq	r5, #12
9000731c:	e00f      	b.n	9000733e <ADC_ConversionStop+0x7e>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
9000731e:	681a      	ldr	r2, [r3, #0]
90007320:	0650      	lsls	r0, r2, #25
90007322:	d406      	bmi.n	90007332 <ADC_ConversionStop+0x72>
90007324:	4a23      	ldr	r2, [pc, #140]	; (900073b4 <ADC_ConversionStop+0xf4>)
90007326:	e001      	b.n	9000732c <ADC_ConversionStop+0x6c>
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
90007328:	3a01      	subs	r2, #1
9000732a:	d018      	beq.n	9000735e <ADC_ConversionStop+0x9e>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
9000732c:	6819      	ldr	r1, [r3, #0]
9000732e:	0649      	lsls	r1, r1, #25
90007330:	d5fa      	bpl.n	90007328 <ADC_ConversionStop+0x68>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
90007332:	2240      	movs	r2, #64	; 0x40
90007334:	601a      	str	r2, [r3, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
90007336:	689a      	ldr	r2, [r3, #8]
90007338:	0756      	lsls	r6, r2, #29
9000733a:	d427      	bmi.n	9000738c <ADC_ConversionStop+0xcc>
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
9000733c:	2504      	movs	r5, #4
    tickstart = HAL_GetTick();
9000733e:	f7ff fd01 	bl	90006d44 <HAL_GetTick>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
90007342:	6823      	ldr	r3, [r4, #0]
    tickstart = HAL_GetTick();
90007344:	4606      	mov	r6, r0
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
90007346:	689b      	ldr	r3, [r3, #8]
90007348:	421d      	tst	r5, r3
9000734a:	d0c3      	beq.n	900072d4 <ADC_ConversionStop+0x14>
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
9000734c:	f7ff fcfa 	bl	90006d44 <HAL_GetTick>
90007350:	1b83      	subs	r3, r0, r6
90007352:	2b05      	cmp	r3, #5
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
90007354:	6823      	ldr	r3, [r4, #0]
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
90007356:	d9f6      	bls.n	90007346 <ADC_ConversionStop+0x86>
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
90007358:	689a      	ldr	r2, [r3, #8]
9000735a:	422a      	tst	r2, r5
9000735c:	d0f3      	beq.n	90007346 <ADC_ConversionStop+0x86>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
9000735e:	6d63      	ldr	r3, [r4, #84]	; 0x54
          return HAL_ERROR;
90007360:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
90007362:	f043 0310 	orr.w	r3, r3, #16
90007366:	6563      	str	r3, [r4, #84]	; 0x54
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
90007368:	6da3      	ldr	r3, [r4, #88]	; 0x58
9000736a:	4303      	orrs	r3, r0
9000736c:	65a3      	str	r3, [r4, #88]	; 0x58
}
9000736e:	bd70      	pop	{r4, r5, r6, pc}
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
90007370:	0715      	lsls	r5, r2, #28
90007372:	d502      	bpl.n	9000737a <ADC_ConversionStop+0xba>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
90007374:	689a      	ldr	r2, [r3, #8]
90007376:	0792      	lsls	r2, r2, #30
90007378:	d513      	bpl.n	900073a2 <ADC_ConversionStop+0xe2>
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
9000737a:	2508      	movs	r5, #8
9000737c:	e7df      	b.n	9000733e <ADC_ConversionStop+0x7e>
  MODIFY_REG(ADCx->CR,
9000737e:	6898      	ldr	r0, [r3, #8]
90007380:	4a0b      	ldr	r2, [pc, #44]	; (900073b0 <ADC_ConversionStop+0xf0>)
90007382:	4002      	ands	r2, r0
90007384:	f042 0220 	orr.w	r2, r2, #32
90007388:	609a      	str	r2, [r3, #8]
}
9000738a:	e7c3      	b.n	90007314 <ADC_ConversionStop+0x54>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
9000738c:	689a      	ldr	r2, [r3, #8]
9000738e:	0791      	lsls	r1, r2, #30
90007390:	d4d4      	bmi.n	9000733c <ADC_ConversionStop+0x7c>
  MODIFY_REG(ADCx->CR,
90007392:	6899      	ldr	r1, [r3, #8]
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
90007394:	2504      	movs	r5, #4
90007396:	4a06      	ldr	r2, [pc, #24]	; (900073b0 <ADC_ConversionStop+0xf0>)
90007398:	400a      	ands	r2, r1
9000739a:	f042 0210 	orr.w	r2, r2, #16
9000739e:	609a      	str	r2, [r3, #8]
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
900073a0:	e7cd      	b.n	9000733e <ADC_ConversionStop+0x7e>
  MODIFY_REG(ADCx->CR,
900073a2:	6899      	ldr	r1, [r3, #8]
900073a4:	4a02      	ldr	r2, [pc, #8]	; (900073b0 <ADC_ConversionStop+0xf0>)
900073a6:	400a      	ands	r2, r1
900073a8:	f042 0220 	orr.w	r2, r2, #32
900073ac:	609a      	str	r2, [r3, #8]
    switch (conversion_group_reassigned)
900073ae:	e7e4      	b.n	9000737a <ADC_ConversionStop+0xba>
900073b0:	7fffffc0 	.word	0x7fffffc0
900073b4:	000cdc00 	.word	0x000cdc00

900073b8 <ADC_Enable>:

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
900073b8:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
900073ba:	689a      	ldr	r2, [r3, #8]
900073bc:	07d1      	lsls	r1, r2, #31
900073be:	d501      	bpl.n	900073c4 <ADC_Enable+0xc>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
900073c0:	2000      	movs	r0, #0
}
900073c2:	4770      	bx	lr
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
900073c4:	6899      	ldr	r1, [r3, #8]
900073c6:	4a21      	ldr	r2, [pc, #132]	; (9000744c <ADC_Enable+0x94>)
900073c8:	4211      	tst	r1, r2
{
900073ca:	b570      	push	{r4, r5, r6, lr}
900073cc:	4604      	mov	r4, r0
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
900073ce:	d12c      	bne.n	9000742a <ADC_Enable+0x72>
  MODIFY_REG(ADCx->CR,
900073d0:	6899      	ldr	r1, [r3, #8]
900073d2:	4a1f      	ldr	r2, [pc, #124]	; (90007450 <ADC_Enable+0x98>)
900073d4:	400a      	ands	r2, r1
900073d6:	f042 0201 	orr.w	r2, r2, #1
900073da:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
900073dc:	f7ff fcb2 	bl	90006d44 <HAL_GetTick>
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
900073e0:	6823      	ldr	r3, [r4, #0]
900073e2:	4a1c      	ldr	r2, [pc, #112]	; (90007454 <ADC_Enable+0x9c>)
    tickstart = HAL_GetTick();
900073e4:	4605      	mov	r5, r0
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
900073e6:	4293      	cmp	r3, r2
900073e8:	d028      	beq.n	9000743c <ADC_Enable+0x84>
900073ea:	f502 7280 	add.w	r2, r2, #256	; 0x100
900073ee:	4293      	cmp	r3, r2
900073f0:	d024      	beq.n	9000743c <ADC_Enable+0x84>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
900073f2:	4a19      	ldr	r2, [pc, #100]	; (90007458 <ADC_Enable+0xa0>)
900073f4:	6892      	ldr	r2, [r2, #8]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
900073f6:	681a      	ldr	r2, [r3, #0]
900073f8:	07d6      	lsls	r6, r2, #31
900073fa:	d414      	bmi.n	90007426 <ADC_Enable+0x6e>
  MODIFY_REG(ADCx->CR,
900073fc:	4e14      	ldr	r6, [pc, #80]	; (90007450 <ADC_Enable+0x98>)
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
900073fe:	689a      	ldr	r2, [r3, #8]
90007400:	07d0      	lsls	r0, r2, #31
90007402:	d404      	bmi.n	9000740e <ADC_Enable+0x56>
  MODIFY_REG(ADCx->CR,
90007404:	689a      	ldr	r2, [r3, #8]
90007406:	4032      	ands	r2, r6
90007408:	f042 0201 	orr.w	r2, r2, #1
9000740c:	609a      	str	r2, [r3, #8]
        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
9000740e:	f7ff fc99 	bl	90006d44 <HAL_GetTick>
90007412:	1b43      	subs	r3, r0, r5
90007414:	2b02      	cmp	r3, #2
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
90007416:	6823      	ldr	r3, [r4, #0]
        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
90007418:	d902      	bls.n	90007420 <ADC_Enable+0x68>
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
9000741a:	681a      	ldr	r2, [r3, #0]
9000741c:	07d1      	lsls	r1, r2, #31
9000741e:	d504      	bpl.n	9000742a <ADC_Enable+0x72>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
90007420:	681a      	ldr	r2, [r3, #0]
90007422:	07d2      	lsls	r2, r2, #31
90007424:	d5eb      	bpl.n	900073fe <ADC_Enable+0x46>
  return HAL_OK;
90007426:	2000      	movs	r0, #0
}
90007428:	bd70      	pop	{r4, r5, r6, pc}
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
9000742a:	6d63      	ldr	r3, [r4, #84]	; 0x54
            return HAL_ERROR;
9000742c:	2001      	movs	r0, #1
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
9000742e:	f043 0310 	orr.w	r3, r3, #16
90007432:	6563      	str	r3, [r4, #84]	; 0x54
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
90007434:	6da3      	ldr	r3, [r4, #88]	; 0x58
90007436:	4303      	orrs	r3, r0
90007438:	65a3      	str	r3, [r4, #88]	; 0x58
}
9000743a:	bd70      	pop	{r4, r5, r6, pc}
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
9000743c:	4a07      	ldr	r2, [pc, #28]	; (9000745c <ADC_Enable+0xa4>)
9000743e:	6892      	ldr	r2, [r2, #8]
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
90007440:	06d2      	lsls	r2, r2, #27
90007442:	d0d8      	beq.n	900073f6 <ADC_Enable+0x3e>
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
90007444:	4a06      	ldr	r2, [pc, #24]	; (90007460 <ADC_Enable+0xa8>)
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
90007446:	4293      	cmp	r3, r2
90007448:	d1d5      	bne.n	900073f6 <ADC_Enable+0x3e>
9000744a:	e7ec      	b.n	90007426 <ADC_Enable+0x6e>
9000744c:	8000003f 	.word	0x8000003f
90007450:	7fffffc0 	.word	0x7fffffc0
90007454:	40022000 	.word	0x40022000
90007458:	58026300 	.word	0x58026300
9000745c:	40022300 	.word	0x40022300
90007460:	40022100 	.word	0x40022100

90007464 <HAL_ADC_Start>:
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
90007464:	4a38      	ldr	r2, [pc, #224]	; (90007548 <HAL_ADC_Start+0xe4>)
90007466:	6803      	ldr	r3, [r0, #0]
90007468:	4293      	cmp	r3, r2
{
9000746a:	b570      	push	{r4, r5, r6, lr}
9000746c:	4604      	mov	r4, r0
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
9000746e:	d049      	beq.n	90007504 <HAL_ADC_Start+0xa0>
90007470:	f502 7280 	add.w	r2, r2, #256	; 0x100
90007474:	4293      	cmp	r3, r2
90007476:	d045      	beq.n	90007504 <HAL_ADC_Start+0xa0>
90007478:	4a34      	ldr	r2, [pc, #208]	; (9000754c <HAL_ADC_Start+0xe8>)
9000747a:	6896      	ldr	r6, [r2, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
9000747c:	689d      	ldr	r5, [r3, #8]
9000747e:	f015 0504 	ands.w	r5, r5, #4
90007482:	d145      	bne.n	90007510 <HAL_ADC_Start+0xac>
    __HAL_LOCK(hadc);
90007484:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
90007488:	2b01      	cmp	r3, #1
9000748a:	d041      	beq.n	90007510 <HAL_ADC_Start+0xac>
9000748c:	2301      	movs	r3, #1
    tmp_hal_status = ADC_Enable(hadc);
9000748e:	4620      	mov	r0, r4
    __HAL_LOCK(hadc);
90007490:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
    tmp_hal_status = ADC_Enable(hadc);
90007494:	f7ff ff90 	bl	900073b8 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
90007498:	2800      	cmp	r0, #0
9000749a:	d13b      	bne.n	90007514 <HAL_ADC_Start+0xb0>
      ADC_STATE_CLR_SET(hadc->State,
9000749c:	6d63      	ldr	r3, [r4, #84]	; 0x54
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
9000749e:	f006 061f 	and.w	r6, r6, #31
900074a2:	4a2b      	ldr	r2, [pc, #172]	; (90007550 <HAL_ADC_Start+0xec>)
900074a4:	401a      	ands	r2, r3
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
900074a6:	6823      	ldr	r3, [r4, #0]
      ADC_STATE_CLR_SET(hadc->State,
900074a8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
900074ac:	6562      	str	r2, [r4, #84]	; 0x54
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
900074ae:	4a29      	ldr	r2, [pc, #164]	; (90007554 <HAL_ADC_Start+0xf0>)
900074b0:	4293      	cmp	r3, r2
900074b2:	d032      	beq.n	9000751a <HAL_ADC_Start+0xb6>
900074b4:	4619      	mov	r1, r3
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
900074b6:	6d62      	ldr	r2, [r4, #84]	; 0x54
900074b8:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
900074bc:	6562      	str	r2, [r4, #84]	; 0x54
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
900074be:	6d62      	ldr	r2, [r4, #84]	; 0x54
900074c0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
900074c4:	d03d      	beq.n	90007542 <HAL_ADC_Start+0xde>
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
900074c6:	6da2      	ldr	r2, [r4, #88]	; 0x58
900074c8:	f022 0206 	bic.w	r2, r2, #6
900074cc:	65a2      	str	r2, [r4, #88]	; 0x58
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
900074ce:	221c      	movs	r2, #28
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
900074d0:	428b      	cmp	r3, r1
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
900074d2:	601a      	str	r2, [r3, #0]
      __HAL_UNLOCK(hadc);
900074d4:	f04f 0200 	mov.w	r2, #0
900074d8:	f884 2050 	strb.w	r2, [r4, #80]	; 0x50
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
900074dc:	d021      	beq.n	90007522 <HAL_ADC_Start+0xbe>
900074de:	f240 2221 	movw	r2, #545	; 0x221
900074e2:	40f2      	lsrs	r2, r6
900074e4:	07d5      	lsls	r5, r2, #31
900074e6:	d41c      	bmi.n	90007522 <HAL_ADC_Start+0xbe>
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
900074e8:	6d63      	ldr	r3, [r4, #84]	; 0x54
900074ea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
900074ee:	6563      	str	r3, [r4, #84]	; 0x54
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
900074f0:	68cb      	ldr	r3, [r1, #12]
900074f2:	019b      	lsls	r3, r3, #6
900074f4:	d505      	bpl.n	90007502 <HAL_ADC_Start+0x9e>
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
900074f6:	6d63      	ldr	r3, [r4, #84]	; 0x54
900074f8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
900074fc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
90007500:	6563      	str	r3, [r4, #84]	; 0x54
}
90007502:	bd70      	pop	{r4, r5, r6, pc}
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
90007504:	4a14      	ldr	r2, [pc, #80]	; (90007558 <HAL_ADC_Start+0xf4>)
90007506:	6896      	ldr	r6, [r2, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
90007508:	689d      	ldr	r5, [r3, #8]
9000750a:	f015 0504 	ands.w	r5, r5, #4
9000750e:	d0b9      	beq.n	90007484 <HAL_ADC_Start+0x20>
    tmp_hal_status = HAL_BUSY;
90007510:	2002      	movs	r0, #2
}
90007512:	bd70      	pop	{r4, r5, r6, pc}
      __HAL_UNLOCK(hadc);
90007514:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
}
90007518:	bd70      	pop	{r4, r5, r6, pc}
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
9000751a:	490b      	ldr	r1, [pc, #44]	; (90007548 <HAL_ADC_Start+0xe4>)
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
9000751c:	2e00      	cmp	r6, #0
9000751e:	d0ca      	beq.n	900074b6 <HAL_ADC_Start+0x52>
90007520:	e7cd      	b.n	900074be <HAL_ADC_Start+0x5a>
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
90007522:	68da      	ldr	r2, [r3, #12]
90007524:	0192      	lsls	r2, r2, #6
90007526:	d505      	bpl.n	90007534 <HAL_ADC_Start+0xd0>
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
90007528:	6d62      	ldr	r2, [r4, #84]	; 0x54
9000752a:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
9000752e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
90007532:	6562      	str	r2, [r4, #84]	; 0x54
  MODIFY_REG(ADCx->CR,
90007534:	6899      	ldr	r1, [r3, #8]
90007536:	4a09      	ldr	r2, [pc, #36]	; (9000755c <HAL_ADC_Start+0xf8>)
90007538:	400a      	ands	r2, r1
9000753a:	f042 0204 	orr.w	r2, r2, #4
9000753e:	609a      	str	r2, [r3, #8]
}
90007540:	bd70      	pop	{r4, r5, r6, pc}
        ADC_CLEAR_ERRORCODE(hadc);
90007542:	65a2      	str	r2, [r4, #88]	; 0x58
90007544:	e7c3      	b.n	900074ce <HAL_ADC_Start+0x6a>
90007546:	bf00      	nop
90007548:	40022000 	.word	0x40022000
9000754c:	58026300 	.word	0x58026300
90007550:	fffff0fe 	.word	0xfffff0fe
90007554:	40022100 	.word	0x40022100
90007558:	40022300 	.word	0x40022300
9000755c:	7fffffc0 	.word	0x7fffffc0

90007560 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
90007560:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
90007562:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
90007564:	689a      	ldr	r2, [r3, #8]
90007566:	0795      	lsls	r5, r2, #30
90007568:	d502      	bpl.n	90007570 <ADC_Disable+0x10>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
9000756a:	689b      	ldr	r3, [r3, #8]
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
9000756c:	2000      	movs	r0, #0
}
9000756e:	bd38      	pop	{r3, r4, r5, pc}
90007570:	689a      	ldr	r2, [r3, #8]
90007572:	07d4      	lsls	r4, r2, #31
90007574:	d529      	bpl.n	900075ca <ADC_Disable+0x6a>
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
90007576:	689a      	ldr	r2, [r3, #8]
90007578:	4604      	mov	r4, r0
9000757a:	f002 020d 	and.w	r2, r2, #13
9000757e:	2a01      	cmp	r2, #1
90007580:	d008      	beq.n	90007594 <ADC_Disable+0x34>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
90007582:	6d63      	ldr	r3, [r4, #84]	; 0x54
          return HAL_ERROR;
90007584:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
90007586:	f043 0310 	orr.w	r3, r3, #16
9000758a:	6563      	str	r3, [r4, #84]	; 0x54
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
9000758c:	6da3      	ldr	r3, [r4, #88]	; 0x58
9000758e:	4303      	orrs	r3, r0
90007590:	65a3      	str	r3, [r4, #88]	; 0x58
}
90007592:	bd38      	pop	{r3, r4, r5, pc}
  MODIFY_REG(ADCx->CR,
90007594:	6898      	ldr	r0, [r3, #8]
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
90007596:	2103      	movs	r1, #3
90007598:	4a0d      	ldr	r2, [pc, #52]	; (900075d0 <ADC_Disable+0x70>)
9000759a:	4002      	ands	r2, r0
9000759c:	f042 0202 	orr.w	r2, r2, #2
900075a0:	609a      	str	r2, [r3, #8]
900075a2:	6019      	str	r1, [r3, #0]
    tickstart = HAL_GetTick();
900075a4:	f7ff fbce 	bl	90006d44 <HAL_GetTick>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
900075a8:	6823      	ldr	r3, [r4, #0]
    tickstart = HAL_GetTick();
900075aa:	4605      	mov	r5, r0
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
900075ac:	689b      	ldr	r3, [r3, #8]
900075ae:	07d9      	lsls	r1, r3, #31
900075b0:	d50b      	bpl.n	900075ca <ADC_Disable+0x6a>
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
900075b2:	f7ff fbc7 	bl	90006d44 <HAL_GetTick>
900075b6:	1b40      	subs	r0, r0, r5
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
900075b8:	6823      	ldr	r3, [r4, #0]
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
900075ba:	2802      	cmp	r0, #2
900075bc:	d902      	bls.n	900075c4 <ADC_Disable+0x64>
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
900075be:	689a      	ldr	r2, [r3, #8]
900075c0:	07d2      	lsls	r2, r2, #31
900075c2:	d4de      	bmi.n	90007582 <ADC_Disable+0x22>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
900075c4:	689b      	ldr	r3, [r3, #8]
900075c6:	07db      	lsls	r3, r3, #31
900075c8:	d4f3      	bmi.n	900075b2 <ADC_Disable+0x52>
  return HAL_OK;
900075ca:	2000      	movs	r0, #0
}
900075cc:	bd38      	pop	{r3, r4, r5, pc}
900075ce:	bf00      	nop
900075d0:	7fffffc0 	.word	0x7fffffc0

900075d4 <HAL_ADC_Stop>:
  __HAL_LOCK(hadc);
900075d4:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
900075d8:	2b01      	cmp	r3, #1
900075da:	d01b      	beq.n	90007614 <HAL_ADC_Stop+0x40>
900075dc:	2301      	movs	r3, #1
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
900075de:	2103      	movs	r1, #3
{
900075e0:	b510      	push	{r4, lr}
  __HAL_LOCK(hadc);
900075e2:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
900075e6:	4604      	mov	r4, r0
900075e8:	f7ff fe6a 	bl	900072c0 <ADC_ConversionStop>
  if (tmp_hal_status == HAL_OK)
900075ec:	b118      	cbz	r0, 900075f6 <HAL_ADC_Stop+0x22>
  __HAL_UNLOCK(hadc);
900075ee:	2300      	movs	r3, #0
900075f0:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
900075f4:	bd10      	pop	{r4, pc}
    tmp_hal_status = ADC_Disable(hadc);
900075f6:	4620      	mov	r0, r4
900075f8:	f7ff ffb2 	bl	90007560 <ADC_Disable>
    if (tmp_hal_status == HAL_OK)
900075fc:	2800      	cmp	r0, #0
900075fe:	d1f6      	bne.n	900075ee <HAL_ADC_Stop+0x1a>
      ADC_STATE_CLR_SET(hadc->State,
90007600:	6d62      	ldr	r2, [r4, #84]	; 0x54
90007602:	4b05      	ldr	r3, [pc, #20]	; (90007618 <HAL_ADC_Stop+0x44>)
90007604:	4013      	ands	r3, r2
90007606:	f043 0301 	orr.w	r3, r3, #1
9000760a:	6563      	str	r3, [r4, #84]	; 0x54
  __HAL_UNLOCK(hadc);
9000760c:	2300      	movs	r3, #0
9000760e:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
90007612:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hadc);
90007614:	2002      	movs	r0, #2
}
90007616:	4770      	bx	lr
90007618:	ffffeefe 	.word	0xffffeefe

9000761c <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
9000761c:	b538      	push	{r3, r4, r5, lr}
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
9000761e:	4a57      	ldr	r2, [pc, #348]	; (9000777c <ADC_ConfigureBoostMode+0x160>)
{
90007620:	4604      	mov	r4, r0
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
90007622:	6803      	ldr	r3, [r0, #0]
90007624:	4293      	cmp	r3, r2
90007626:	d026      	beq.n	90007676 <ADC_ConfigureBoostMode+0x5a>
90007628:	f502 7280 	add.w	r2, r2, #256	; 0x100
9000762c:	4293      	cmp	r3, r2
9000762e:	d022      	beq.n	90007676 <ADC_ConfigureBoostMode+0x5a>
90007630:	4b53      	ldr	r3, [pc, #332]	; (90007780 <ADC_ConfigureBoostMode+0x164>)
90007632:	689b      	ldr	r3, [r3, #8]
90007634:	f413 3f40 	tst.w	r3, #196608	; 0x30000
90007638:	d022      	beq.n	90007680 <ADC_ConfigureBoostMode+0x64>
  {
    freq = HAL_RCC_GetHCLKFreq();
9000763a:	f004 f80f 	bl	9000b65c <HAL_RCC_GetHCLKFreq>
    switch (hadc->Init.ClockPrescaler)
9000763e:	6863      	ldr	r3, [r4, #4]
    freq = HAL_RCC_GetHCLKFreq();
90007640:	4605      	mov	r5, r0
    switch (hadc->Init.ClockPrescaler)
90007642:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
90007646:	f000 8088 	beq.w	9000775a <ADC_ConfigureBoostMode+0x13e>
9000764a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
9000764e:	d06c      	beq.n	9000772a <ADC_ConfigureBoostMode+0x10e>
90007650:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
90007654:	f000 8081 	beq.w	9000775a <ADC_ConfigureBoostMode+0x13e>
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
90007658:	f7ff fb7a 	bl	90006d50 <HAL_GetREVID>
9000765c:	f241 0303 	movw	r3, #4099	; 0x1003
90007660:	4298      	cmp	r0, r3
90007662:	d84b      	bhi.n	900076fc <ADC_ConfigureBoostMode+0xe0>
  {
    if (freq > 20000000UL)
90007664:	4b47      	ldr	r3, [pc, #284]	; (90007784 <ADC_ConfigureBoostMode+0x168>)
90007666:	429d      	cmp	r5, r3
90007668:	d92a      	bls.n	900076c0 <ADC_ConfigureBoostMode+0xa4>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
9000766a:	6822      	ldr	r2, [r4, #0]
9000766c:	6893      	ldr	r3, [r2, #8]
9000766e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
90007672:	6093      	str	r3, [r2, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
90007674:	bd38      	pop	{r3, r4, r5, pc}
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
90007676:	4b44      	ldr	r3, [pc, #272]	; (90007788 <ADC_ConfigureBoostMode+0x16c>)
90007678:	689b      	ldr	r3, [r3, #8]
9000767a:	f413 3f40 	tst.w	r3, #196608	; 0x30000
9000767e:	d1dc      	bne.n	9000763a <ADC_ConfigureBoostMode+0x1e>
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
90007680:	f44f 2000 	mov.w	r0, #524288	; 0x80000
90007684:	2100      	movs	r1, #0
90007686:	f005 f9dd 	bl	9000ca44 <HAL_RCCEx_GetPeriphCLKFreq>
    switch (hadc->Init.ClockPrescaler)
9000768a:	6863      	ldr	r3, [r4, #4]
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
9000768c:	4605      	mov	r5, r0
    switch (hadc->Init.ClockPrescaler)
9000768e:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
90007692:	d06c      	beq.n	9000776e <ADC_ConfigureBoostMode+0x152>
90007694:	d808      	bhi.n	900076a8 <ADC_ConfigureBoostMode+0x8c>
90007696:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
9000769a:	d050      	beq.n	9000773e <ADC_ConfigureBoostMode+0x122>
9000769c:	d916      	bls.n	900076cc <ADC_ConfigureBoostMode+0xb0>
9000769e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
900076a2:	d1d9      	bne.n	90007658 <ADC_ConfigureBoostMode+0x3c>
        freq /= 32UL;
900076a4:	0945      	lsrs	r5, r0, #5
        break;
900076a6:	e7d7      	b.n	90007658 <ADC_ConfigureBoostMode+0x3c>
    switch (hadc->Init.ClockPrescaler)
900076a8:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
900076ac:	d045      	beq.n	9000773a <ADC_ConfigureBoostMode+0x11e>
900076ae:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
900076b2:	d1d1      	bne.n	90007658 <ADC_ConfigureBoostMode+0x3c>
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
900076b4:	f7ff fb4c 	bl	90006d50 <HAL_GetREVID>
900076b8:	f241 0303 	movw	r3, #4099	; 0x1003
900076bc:	4298      	cmp	r0, r3
900076be:	d840      	bhi.n	90007742 <ADC_ConfigureBoostMode+0x126>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
900076c0:	6822      	ldr	r2, [r4, #0]
900076c2:	6893      	ldr	r3, [r2, #8]
900076c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
900076c8:	6093      	str	r3, [r2, #8]
}
900076ca:	bd38      	pop	{r3, r4, r5, pc}
    switch (hadc->Init.ClockPrescaler)
900076cc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
900076d0:	d006      	beq.n	900076e0 <ADC_ConfigureBoostMode+0xc4>
900076d2:	d90a      	bls.n	900076ea <ADC_ConfigureBoostMode+0xce>
900076d4:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
900076d8:	d002      	beq.n	900076e0 <ADC_ConfigureBoostMode+0xc4>
900076da:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
900076de:	d1bb      	bne.n	90007658 <ADC_ConfigureBoostMode+0x3c>
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
900076e0:	0c9b      	lsrs	r3, r3, #18
900076e2:	005b      	lsls	r3, r3, #1
900076e4:	fbb5 f5f3 	udiv	r5, r5, r3
        break;
900076e8:	e7b6      	b.n	90007658 <ADC_ConfigureBoostMode+0x3c>
    switch (hadc->Init.ClockPrescaler)
900076ea:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
900076ee:	d0f7      	beq.n	900076e0 <ADC_ConfigureBoostMode+0xc4>
900076f0:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
900076f4:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
900076f8:	d0f2      	beq.n	900076e0 <ADC_ConfigureBoostMode+0xc4>
900076fa:	e7ad      	b.n	90007658 <ADC_ConfigureBoostMode+0x3c>
    if (freq <= 6250000UL)
900076fc:	4b23      	ldr	r3, [pc, #140]	; (9000778c <ADC_ConfigureBoostMode+0x170>)
900076fe:	429d      	cmp	r5, r3
90007700:	d805      	bhi.n	9000770e <ADC_ConfigureBoostMode+0xf2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
90007702:	6822      	ldr	r2, [r4, #0]
90007704:	6893      	ldr	r3, [r2, #8]
90007706:	f423 7340 	bic.w	r3, r3, #768	; 0x300
9000770a:	6093      	str	r3, [r2, #8]
}
9000770c:	bd38      	pop	{r3, r4, r5, pc}
    else if (freq <= 12500000UL)
9000770e:	4b20      	ldr	r3, [pc, #128]	; (90007790 <ADC_ConfigureBoostMode+0x174>)
90007710:	429d      	cmp	r5, r3
90007712:	d91a      	bls.n	9000774a <ADC_ConfigureBoostMode+0x12e>
    else if (freq <= 25000000UL)
90007714:	4b1f      	ldr	r3, [pc, #124]	; (90007794 <ADC_ConfigureBoostMode+0x178>)
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
90007716:	6822      	ldr	r2, [r4, #0]
    else if (freq <= 25000000UL)
90007718:	429d      	cmp	r5, r3
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
9000771a:	6893      	ldr	r3, [r2, #8]
    else if (freq <= 25000000UL)
9000771c:	d829      	bhi.n	90007772 <ADC_ConfigureBoostMode+0x156>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
9000771e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
90007722:	f443 7300 	orr.w	r3, r3, #512	; 0x200
90007726:	6093      	str	r3, [r2, #8]
}
90007728:	bd38      	pop	{r3, r4, r5, pc}
        freq /= 4UL;
9000772a:	0885      	lsrs	r5, r0, #2
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
9000772c:	f7ff fb10 	bl	90006d50 <HAL_GetREVID>
90007730:	f241 0303 	movw	r3, #4099	; 0x1003
90007734:	4298      	cmp	r0, r3
90007736:	d8e1      	bhi.n	900076fc <ADC_ConfigureBoostMode+0xe0>
90007738:	e794      	b.n	90007664 <ADC_ConfigureBoostMode+0x48>
        freq /= 128UL;
9000773a:	09c5      	lsrs	r5, r0, #7
        break;
9000773c:	e78c      	b.n	90007658 <ADC_ConfigureBoostMode+0x3c>
        freq /= 16UL;
9000773e:	0905      	lsrs	r5, r0, #4
        break;
90007740:	e78a      	b.n	90007658 <ADC_ConfigureBoostMode+0x3c>
    if (freq <= 6250000UL)
90007742:	4b12      	ldr	r3, [pc, #72]	; (9000778c <ADC_ConfigureBoostMode+0x170>)
90007744:	ebb3 2f15 	cmp.w	r3, r5, lsr #8
90007748:	d2db      	bcs.n	90007702 <ADC_ConfigureBoostMode+0xe6>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
9000774a:	6822      	ldr	r2, [r4, #0]
9000774c:	6893      	ldr	r3, [r2, #8]
9000774e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
90007752:	f443 7380 	orr.w	r3, r3, #256	; 0x100
90007756:	6093      	str	r3, [r2, #8]
}
90007758:	bd38      	pop	{r3, r4, r5, pc}
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
9000775a:	0c1b      	lsrs	r3, r3, #16
9000775c:	fbb5 f5f3 	udiv	r5, r5, r3
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
90007760:	f7ff faf6 	bl	90006d50 <HAL_GetREVID>
90007764:	f241 0303 	movw	r3, #4099	; 0x1003
90007768:	4298      	cmp	r0, r3
9000776a:	d8c7      	bhi.n	900076fc <ADC_ConfigureBoostMode+0xe0>
9000776c:	e77a      	b.n	90007664 <ADC_ConfigureBoostMode+0x48>
        freq /= 64UL;
9000776e:	0985      	lsrs	r5, r0, #6
        break;
90007770:	e772      	b.n	90007658 <ADC_ConfigureBoostMode+0x3c>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
90007772:	f443 7340 	orr.w	r3, r3, #768	; 0x300
90007776:	6093      	str	r3, [r2, #8]
}
90007778:	bd38      	pop	{r3, r4, r5, pc}
9000777a:	bf00      	nop
9000777c:	40022000 	.word	0x40022000
90007780:	58026300 	.word	0x58026300
90007784:	01312d00 	.word	0x01312d00
90007788:	40022300 	.word	0x40022300
9000778c:	00bebc21 	.word	0x00bebc21
90007790:	017d7841 	.word	0x017d7841
90007794:	02faf081 	.word	0x02faf081

90007798 <HAL_ADC_Init>:
{
90007798:	b570      	push	{r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0UL;
9000779a:	2300      	movs	r3, #0
{
9000779c:	b082      	sub	sp, #8
  __IO uint32_t wait_loop_index = 0UL;
9000779e:	9301      	str	r3, [sp, #4]
  if (hadc == NULL)
900077a0:	2800      	cmp	r0, #0
900077a2:	f000 80d1 	beq.w	90007948 <HAL_ADC_Init+0x1b0>
  if (hadc->State == HAL_ADC_STATE_RESET)
900077a6:	6d45      	ldr	r5, [r0, #84]	; 0x54
900077a8:	4604      	mov	r4, r0
900077aa:	2d00      	cmp	r5, #0
900077ac:	f000 80bb 	beq.w	90007926 <HAL_ADC_Init+0x18e>
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
900077b0:	6822      	ldr	r2, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
900077b2:	6893      	ldr	r3, [r2, #8]
900077b4:	009d      	lsls	r5, r3, #2
900077b6:	d503      	bpl.n	900077c0 <HAL_ADC_Init+0x28>
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
900077b8:	6891      	ldr	r1, [r2, #8]
900077ba:	4b72      	ldr	r3, [pc, #456]	; (90007984 <HAL_ADC_Init+0x1ec>)
900077bc:	400b      	ands	r3, r1
900077be:	6093      	str	r3, [r2, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
900077c0:	6893      	ldr	r3, [r2, #8]
900077c2:	00d8      	lsls	r0, r3, #3
900077c4:	d416      	bmi.n	900077f4 <HAL_ADC_Init+0x5c>
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
900077c6:	4b70      	ldr	r3, [pc, #448]	; (90007988 <HAL_ADC_Init+0x1f0>)
900077c8:	4970      	ldr	r1, [pc, #448]	; (9000798c <HAL_ADC_Init+0x1f4>)
900077ca:	681b      	ldr	r3, [r3, #0]
  MODIFY_REG(ADCx->CR,
900077cc:	6890      	ldr	r0, [r2, #8]
900077ce:	099b      	lsrs	r3, r3, #6
900077d0:	fba1 1303 	umull	r1, r3, r1, r3
900077d4:	496e      	ldr	r1, [pc, #440]	; (90007990 <HAL_ADC_Init+0x1f8>)
900077d6:	099b      	lsrs	r3, r3, #6
900077d8:	4001      	ands	r1, r0
900077da:	3301      	adds	r3, #1
900077dc:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
900077e0:	6091      	str	r1, [r2, #8]
900077e2:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
900077e4:	9b01      	ldr	r3, [sp, #4]
900077e6:	b12b      	cbz	r3, 900077f4 <HAL_ADC_Init+0x5c>
      wait_loop_index--;
900077e8:	9b01      	ldr	r3, [sp, #4]
900077ea:	3b01      	subs	r3, #1
900077ec:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
900077ee:	9b01      	ldr	r3, [sp, #4]
900077f0:	2b00      	cmp	r3, #0
900077f2:	d1f9      	bne.n	900077e8 <HAL_ADC_Init+0x50>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
900077f4:	6893      	ldr	r3, [r2, #8]
900077f6:	00d9      	lsls	r1, r3, #3
900077f8:	d424      	bmi.n	90007844 <HAL_ADC_Init+0xac>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
900077fa:	6d63      	ldr	r3, [r4, #84]	; 0x54
    tmp_hal_status = HAL_ERROR;
900077fc:	2501      	movs	r5, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
900077fe:	f043 0310 	orr.w	r3, r3, #16
90007802:	6563      	str	r3, [r4, #84]	; 0x54
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
90007804:	6da3      	ldr	r3, [r4, #88]	; 0x58
90007806:	432b      	orrs	r3, r5
90007808:	65a3      	str	r3, [r4, #88]	; 0x58
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
9000780a:	6893      	ldr	r3, [r2, #8]
9000780c:	f013 0f04 	tst.w	r3, #4
  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
90007810:	6d63      	ldr	r3, [r4, #84]	; 0x54
90007812:	d11d      	bne.n	90007850 <HAL_ADC_Init+0xb8>
90007814:	06db      	lsls	r3, r3, #27
90007816:	d41b      	bmi.n	90007850 <HAL_ADC_Init+0xb8>
    ADC_STATE_CLR_SET(hadc->State,
90007818:	6d63      	ldr	r3, [r4, #84]	; 0x54
9000781a:	f423 7381 	bic.w	r3, r3, #258	; 0x102
9000781e:	f043 0302 	orr.w	r3, r3, #2
90007822:	6563      	str	r3, [r4, #84]	; 0x54
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
90007824:	6893      	ldr	r3, [r2, #8]
90007826:	07de      	lsls	r6, r3, #31
90007828:	d428      	bmi.n	9000787c <HAL_ADC_Init+0xe4>
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
9000782a:	4b5a      	ldr	r3, [pc, #360]	; (90007994 <HAL_ADC_Init+0x1fc>)
9000782c:	429a      	cmp	r2, r3
9000782e:	d017      	beq.n	90007860 <HAL_ADC_Init+0xc8>
90007830:	f503 7380 	add.w	r3, r3, #256	; 0x100
90007834:	429a      	cmp	r2, r3
90007836:	d013      	beq.n	90007860 <HAL_ADC_Init+0xc8>
90007838:	4b57      	ldr	r3, [pc, #348]	; (90007998 <HAL_ADC_Init+0x200>)
9000783a:	689b      	ldr	r3, [r3, #8]
9000783c:	07d9      	lsls	r1, r3, #31
9000783e:	d41d      	bmi.n	9000787c <HAL_ADC_Init+0xe4>
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
90007840:	4a56      	ldr	r2, [pc, #344]	; (9000799c <HAL_ADC_Init+0x204>)
90007842:	e015      	b.n	90007870 <HAL_ADC_Init+0xd8>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
90007844:	6893      	ldr	r3, [r2, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
90007846:	2500      	movs	r5, #0
90007848:	f013 0f04 	tst.w	r3, #4
  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
9000784c:	6d63      	ldr	r3, [r4, #84]	; 0x54
9000784e:	d0e1      	beq.n	90007814 <HAL_ADC_Init+0x7c>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
90007850:	6d63      	ldr	r3, [r4, #84]	; 0x54
    tmp_hal_status = HAL_ERROR;
90007852:	2501      	movs	r5, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
90007854:	f043 0310 	orr.w	r3, r3, #16
}
90007858:	4628      	mov	r0, r5
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
9000785a:	6563      	str	r3, [r4, #84]	; 0x54
}
9000785c:	b002      	add	sp, #8
9000785e:	bd70      	pop	{r4, r5, r6, pc}
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
90007860:	4a4c      	ldr	r2, [pc, #304]	; (90007994 <HAL_ADC_Init+0x1fc>)
90007862:	4b4f      	ldr	r3, [pc, #316]	; (900079a0 <HAL_ADC_Init+0x208>)
90007864:	6892      	ldr	r2, [r2, #8]
90007866:	689b      	ldr	r3, [r3, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
90007868:	4313      	orrs	r3, r2
9000786a:	07d8      	lsls	r0, r3, #31
9000786c:	d406      	bmi.n	9000787c <HAL_ADC_Init+0xe4>
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
9000786e:	4a4d      	ldr	r2, [pc, #308]	; (900079a4 <HAL_ADC_Init+0x20c>)
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
90007870:	6893      	ldr	r3, [r2, #8]
90007872:	6861      	ldr	r1, [r4, #4]
90007874:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
90007878:	430b      	orrs	r3, r1
9000787a:	6093      	str	r3, [r2, #8]
    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
9000787c:	f7ff fa68 	bl	90006d50 <HAL_GetREVID>
90007880:	f241 0303 	movw	r3, #4099	; 0x1003
90007884:	68a1      	ldr	r1, [r4, #8]
90007886:	4298      	cmp	r0, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
90007888:	7f23      	ldrb	r3, [r4, #28]
    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
9000788a:	d852      	bhi.n	90007932 <HAL_ADC_Init+0x19a>
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
9000788c:	f894 c015 	ldrb.w	ip, [r4, #21]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
90007890:	041a      	lsls	r2, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
90007892:	6b20      	ldr	r0, [r4, #48]	; 0x30
90007894:	ea42 324c 	orr.w	r2, r2, ip, lsl #13
90007898:	4302      	orrs	r2, r0
9000789a:	430a      	orrs	r2, r1
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
9000789c:	2b01      	cmp	r3, #1
9000789e:	d103      	bne.n	900078a8 <HAL_ADC_Init+0x110>
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
900078a0:	6a23      	ldr	r3, [r4, #32]
900078a2:	3b01      	subs	r3, #1
900078a4:	ea42 4243 	orr.w	r2, r2, r3, lsl #17
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
900078a8:	6a63      	ldr	r3, [r4, #36]	; 0x24
900078aa:	b123      	cbz	r3, 900078b6 <HAL_ADC_Init+0x11e>
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
900078ac:	f403 7378 	and.w	r3, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
900078b0:	6aa1      	ldr	r1, [r4, #40]	; 0x28
900078b2:	430b      	orrs	r3, r1
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
900078b4:	431a      	orrs	r2, r3
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
900078b6:	6823      	ldr	r3, [r4, #0]
900078b8:	493b      	ldr	r1, [pc, #236]	; (900079a8 <HAL_ADC_Init+0x210>)
900078ba:	68d8      	ldr	r0, [r3, #12]
900078bc:	4001      	ands	r1, r0
900078be:	4311      	orrs	r1, r2
900078c0:	60d9      	str	r1, [r3, #12]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
900078c2:	689a      	ldr	r2, [r3, #8]
900078c4:	f012 0f04 	tst.w	r2, #4
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
900078c8:	689a      	ldr	r2, [r3, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
900078ca:	d11c      	bne.n	90007906 <HAL_ADC_Init+0x16e>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
900078cc:	0712      	lsls	r2, r2, #28
900078ce:	d41a      	bmi.n	90007906 <HAL_ADC_Init+0x16e>
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
900078d0:	68d8      	ldr	r0, [r3, #12]
900078d2:	4a36      	ldr	r2, [pc, #216]	; (900079ac <HAL_ADC_Init+0x214>)
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
900078d4:	7d21      	ldrb	r1, [r4, #20]
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
900078d6:	4002      	ands	r2, r0
900078d8:	ea42 3281 	orr.w	r2, r2, r1, lsl #14
900078dc:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
900078de:	430a      	orrs	r2, r1
900078e0:	60da      	str	r2, [r3, #12]
      if (hadc->Init.OversamplingMode == ENABLE)
900078e2:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
900078e6:	2a01      	cmp	r2, #1
900078e8:	d03a      	beq.n	90007960 <HAL_ADC_Init+0x1c8>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
900078ea:	691a      	ldr	r2, [r3, #16]
900078ec:	f022 0201 	bic.w	r2, r2, #1
900078f0:	611a      	str	r2, [r3, #16]
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
900078f2:	691a      	ldr	r2, [r3, #16]
      ADC_ConfigureBoostMode(hadc);
900078f4:	4620      	mov	r0, r4
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
900078f6:	6b61      	ldr	r1, [r4, #52]	; 0x34
900078f8:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
900078fc:	430a      	orrs	r2, r1
900078fe:	611a      	str	r2, [r3, #16]
      ADC_ConfigureBoostMode(hadc);
90007900:	f7ff fe8c 	bl	9000761c <ADC_ConfigureBoostMode>
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
90007904:	6823      	ldr	r3, [r4, #0]
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
90007906:	68e2      	ldr	r2, [r4, #12]
90007908:	2a01      	cmp	r2, #1
9000790a:	d021      	beq.n	90007950 <HAL_ADC_Init+0x1b8>
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
9000790c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
9000790e:	f022 020f 	bic.w	r2, r2, #15
90007912:	631a      	str	r2, [r3, #48]	; 0x30
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
90007914:	6d63      	ldr	r3, [r4, #84]	; 0x54
}
90007916:	4628      	mov	r0, r5
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
90007918:	f023 0303 	bic.w	r3, r3, #3
9000791c:	f043 0301 	orr.w	r3, r3, #1
90007920:	6563      	str	r3, [r4, #84]	; 0x54
}
90007922:	b002      	add	sp, #8
90007924:	bd70      	pop	{r4, r5, r6, pc}
    HAL_ADC_MspInit(hadc);
90007926:	f7fc fe7f 	bl	90004628 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
9000792a:	65a5      	str	r5, [r4, #88]	; 0x58
    hadc->Lock = HAL_UNLOCKED;
9000792c:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
90007930:	e73e      	b.n	900077b0 <HAL_ADC_Init+0x18>
    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
90007932:	2910      	cmp	r1, #16
90007934:	d1aa      	bne.n	9000788c <HAL_ADC_Init+0xf4>
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
90007936:	7d61      	ldrb	r1, [r4, #21]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
90007938:	041a      	lsls	r2, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
9000793a:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
9000793e:	6b21      	ldr	r1, [r4, #48]	; 0x30
90007940:	430a      	orrs	r2, r1
90007942:	f042 021c 	orr.w	r2, r2, #28
90007946:	e7a9      	b.n	9000789c <HAL_ADC_Init+0x104>
    return HAL_ERROR;
90007948:	2501      	movs	r5, #1
}
9000794a:	4628      	mov	r0, r5
9000794c:	b002      	add	sp, #8
9000794e:	bd70      	pop	{r4, r5, r6, pc}
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
90007950:	6b19      	ldr	r1, [r3, #48]	; 0x30
90007952:	69a2      	ldr	r2, [r4, #24]
90007954:	f021 010f 	bic.w	r1, r1, #15
90007958:	3a01      	subs	r2, #1
9000795a:	430a      	orrs	r2, r1
9000795c:	631a      	str	r2, [r3, #48]	; 0x30
9000795e:	e7d9      	b.n	90007914 <HAL_ADC_Init+0x17c>
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
90007960:	e9d4 120f 	ldrd	r1, r2, [r4, #60]	; 0x3c
90007964:	6c66      	ldr	r6, [r4, #68]	; 0x44
90007966:	3901      	subs	r1, #1
90007968:	6918      	ldr	r0, [r3, #16]
9000796a:	4332      	orrs	r2, r6
9000796c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
90007970:	6ca1      	ldr	r1, [r4, #72]	; 0x48
90007972:	430a      	orrs	r2, r1
90007974:	490e      	ldr	r1, [pc, #56]	; (900079b0 <HAL_ADC_Init+0x218>)
90007976:	4001      	ands	r1, r0
90007978:	430a      	orrs	r2, r1
9000797a:	f042 0201 	orr.w	r2, r2, #1
9000797e:	611a      	str	r2, [r3, #16]
90007980:	e7b7      	b.n	900078f2 <HAL_ADC_Init+0x15a>
90007982:	bf00      	nop
90007984:	5fffffc0 	.word	0x5fffffc0
90007988:	24000054 	.word	0x24000054
9000798c:	053e2d63 	.word	0x053e2d63
90007990:	6fffffc0 	.word	0x6fffffc0
90007994:	40022000 	.word	0x40022000
90007998:	58026000 	.word	0x58026000
9000799c:	58026300 	.word	0x58026300
900079a0:	40022100 	.word	0x40022100
900079a4:	40022300 	.word	0x40022300
900079a8:	fff0c003 	.word	0xfff0c003
900079ac:	ffffbffc 	.word	0xffffbffc
900079b0:	fc00f81e 	.word	0xfc00f81e

900079b4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
900079b4:	b4f0      	push	{r4, r5, r6, r7}
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
900079b6:	f890 2050 	ldrb.w	r2, [r0, #80]	; 0x50
{
900079ba:	b09a      	sub	sp, #104	; 0x68
  if (multimode->Mode != ADC_MODE_INDEPENDENT)
900079bc:	680e      	ldr	r6, [r1, #0]
  __HAL_LOCK(hadc);
900079be:	2a01      	cmp	r2, #1
900079c0:	d04d      	beq.n	90007a5e <HAL_ADCEx_MultiModeConfigChannel+0xaa>
900079c2:	4603      	mov	r3, r0

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
900079c4:	4c2b      	ldr	r4, [pc, #172]	; (90007a74 <HAL_ADCEx_MultiModeConfigChannel+0xc0>)
  tmphadcSlave.State = HAL_ADC_STATE_RESET;
900079c6:	2200      	movs	r2, #0
  __HAL_LOCK(hadc);
900079c8:	2001      	movs	r0, #1
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
900079ca:	681d      	ldr	r5, [r3, #0]
  tmphadcSlave.State = HAL_ADC_STATE_RESET;
900079cc:	9216      	str	r2, [sp, #88]	; 0x58
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
900079ce:	42a5      	cmp	r5, r4
  __HAL_LOCK(hadc);
900079d0:	f883 0050 	strb.w	r0, [r3, #80]	; 0x50
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
900079d4:	9217      	str	r2, [sp, #92]	; 0x5c
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
900079d6:	d008      	beq.n	900079ea <HAL_ADCEx_MultiModeConfigChannel+0x36>

  if (tmphadcSlave.Instance == NULL)
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
900079d8:	6d59      	ldr	r1, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
900079da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
900079de:	f041 0120 	orr.w	r1, r1, #32
900079e2:	6559      	str	r1, [r3, #84]	; 0x54
  /* Process unlocked */
  __HAL_UNLOCK(hadc);

  /* Return function status */
  return tmp_hal_status;
}
900079e4:	b01a      	add	sp, #104	; 0x68
900079e6:	bcf0      	pop	{r4, r5, r6, r7}
900079e8:	4770      	bx	lr
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
900079ea:	4c23      	ldr	r4, [pc, #140]	; (90007a78 <HAL_ADCEx_MultiModeConfigChannel+0xc4>)
900079ec:	68a2      	ldr	r2, [r4, #8]
900079ee:	0752      	lsls	r2, r2, #29
900079f0:	d50b      	bpl.n	90007a0a <HAL_ADCEx_MultiModeConfigChannel+0x56>
900079f2:	68aa      	ldr	r2, [r5, #8]
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
900079f4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
    tmp_hal_status = HAL_ERROR;
900079f6:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
900079f8:	f042 0220 	orr.w	r2, r2, #32
900079fc:	655a      	str	r2, [r3, #84]	; 0x54
  __HAL_UNLOCK(hadc);
900079fe:	2200      	movs	r2, #0
90007a00:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
}
90007a04:	b01a      	add	sp, #104	; 0x68
90007a06:	bcf0      	pop	{r4, r5, r6, r7}
90007a08:	4770      	bx	lr
90007a0a:	68a8      	ldr	r0, [r5, #8]
90007a0c:	f010 0004 	ands.w	r0, r0, #4
90007a10:	d1f0      	bne.n	900079f4 <HAL_ADCEx_MultiModeConfigChannel+0x40>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
90007a12:	b1c6      	cbz	r6, 90007a46 <HAL_ADCEx_MultiModeConfigChannel+0x92>
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
90007a14:	f8df c068 	ldr.w	ip, [pc, #104]	; 90007a80 <HAL_ADCEx_MultiModeConfigChannel+0xcc>
90007a18:	684f      	ldr	r7, [r1, #4]
90007a1a:	f8dc 2008 	ldr.w	r2, [ip, #8]
90007a1e:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
90007a22:	433a      	orrs	r2, r7
90007a24:	f8cc 2008 	str.w	r2, [ip, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
90007a28:	68ad      	ldr	r5, [r5, #8]
90007a2a:	68a2      	ldr	r2, [r4, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
90007a2c:	432a      	orrs	r2, r5
90007a2e:	07d4      	lsls	r4, r2, #31
90007a30:	d413      	bmi.n	90007a5a <HAL_ADCEx_MultiModeConfigChannel+0xa6>
        MODIFY_REG(tmpADC_Common->CCR,
90007a32:	688a      	ldr	r2, [r1, #8]
90007a34:	f8dc 4008 	ldr.w	r4, [ip, #8]
90007a38:	4910      	ldr	r1, [pc, #64]	; (90007a7c <HAL_ADCEx_MultiModeConfigChannel+0xc8>)
90007a3a:	4332      	orrs	r2, r6
90007a3c:	4021      	ands	r1, r4
90007a3e:	430a      	orrs	r2, r1
90007a40:	f8cc 2008 	str.w	r2, [ip, #8]
90007a44:	e7db      	b.n	900079fe <HAL_ADCEx_MultiModeConfigChannel+0x4a>
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
90007a46:	490e      	ldr	r1, [pc, #56]	; (90007a80 <HAL_ADCEx_MultiModeConfigChannel+0xcc>)
90007a48:	688a      	ldr	r2, [r1, #8]
90007a4a:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
90007a4e:	608a      	str	r2, [r1, #8]
90007a50:	68a8      	ldr	r0, [r5, #8]
90007a52:	68a2      	ldr	r2, [r4, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
90007a54:	4302      	orrs	r2, r0
90007a56:	07d0      	lsls	r0, r2, #31
90007a58:	d505      	bpl.n	90007a66 <HAL_ADCEx_MultiModeConfigChannel+0xb2>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
90007a5a:	2000      	movs	r0, #0
90007a5c:	e7cf      	b.n	900079fe <HAL_ADCEx_MultiModeConfigChannel+0x4a>
  __HAL_LOCK(hadc);
90007a5e:	2002      	movs	r0, #2
}
90007a60:	b01a      	add	sp, #104	; 0x68
90007a62:	bcf0      	pop	{r4, r5, r6, r7}
90007a64:	4770      	bx	lr
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
90007a66:	688c      	ldr	r4, [r1, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
90007a68:	4630      	mov	r0, r6
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
90007a6a:	4a04      	ldr	r2, [pc, #16]	; (90007a7c <HAL_ADCEx_MultiModeConfigChannel+0xc8>)
90007a6c:	4022      	ands	r2, r4
90007a6e:	608a      	str	r2, [r1, #8]
90007a70:	e7c5      	b.n	900079fe <HAL_ADCEx_MultiModeConfigChannel+0x4a>
90007a72:	bf00      	nop
90007a74:	40022000 	.word	0x40022000
90007a78:	40022100 	.word	0x40022100
90007a7c:	fffff0e0 	.word	0xfffff0e0
90007a80:	40022300 	.word	0x40022300

90007a84 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
90007a84:	4906      	ldr	r1, [pc, #24]	; (90007aa0 <HAL_NVIC_SetPriorityGrouping+0x1c>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
90007a86:	f64f 0cff 	movw	ip, #63743	; 0xf8ff
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
90007a8a:	0200      	lsls	r0, r0, #8
  reg_value  =  (reg_value                                   |
90007a8c:	4b05      	ldr	r3, [pc, #20]	; (90007aa4 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
90007a8e:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
90007a90:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
90007a94:	ea02 020c 	and.w	r2, r2, ip
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
90007a98:	4310      	orrs	r0, r2
  reg_value  =  (reg_value                                   |
90007a9a:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
90007a9c:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
90007a9e:	4770      	bx	lr
90007aa0:	e000ed00 	.word	0xe000ed00
90007aa4:	05fa0000 	.word	0x05fa0000

90007aa8 <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
90007aa8:	4b1b      	ldr	r3, [pc, #108]	; (90007b18 <HAL_NVIC_SetPriority+0x70>)
90007aaa:	68db      	ldr	r3, [r3, #12]
90007aac:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
90007ab0:	b500      	push	{lr}
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
90007ab2:	f1c3 0e07 	rsb	lr, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
90007ab6:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
90007aba:	f1be 0f04 	cmp.w	lr, #4
90007abe:	bf28      	it	cs
90007ac0:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
90007ac4:	f1bc 0f06 	cmp.w	ip, #6
90007ac8:	d91a      	bls.n	90007b00 <HAL_NVIC_SetPriority+0x58>
90007aca:	3b03      	subs	r3, #3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
90007acc:	f04f 3cff 	mov.w	ip, #4294967295
90007ad0:	fa0c fc03 	lsl.w	ip, ip, r3
90007ad4:	ea22 020c 	bic.w	r2, r2, ip
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
90007ad8:	f04f 3cff 	mov.w	ip, #4294967295
  if ((int32_t)(IRQn) >= 0)
90007adc:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
90007ade:	fa0c fc0e 	lsl.w	ip, ip, lr
90007ae2:	ea21 010c 	bic.w	r1, r1, ip
90007ae6:	fa01 f103 	lsl.w	r1, r1, r3
90007aea:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
90007aee:	db0a      	blt.n	90007b06 <HAL_NVIC_SetPriority+0x5e>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
90007af0:	0109      	lsls	r1, r1, #4
90007af2:	4b0a      	ldr	r3, [pc, #40]	; (90007b1c <HAL_NVIC_SetPriority+0x74>)
90007af4:	b2c9      	uxtb	r1, r1
90007af6:	4403      	add	r3, r0
90007af8:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
90007afc:	f85d fb04 	ldr.w	pc, [sp], #4
90007b00:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
90007b02:	4613      	mov	r3, r2
90007b04:	e7e8      	b.n	90007ad8 <HAL_NVIC_SetPriority+0x30>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
90007b06:	f000 000f 	and.w	r0, r0, #15
90007b0a:	0109      	lsls	r1, r1, #4
90007b0c:	4b04      	ldr	r3, [pc, #16]	; (90007b20 <HAL_NVIC_SetPriority+0x78>)
90007b0e:	b2c9      	uxtb	r1, r1
90007b10:	4403      	add	r3, r0
90007b12:	7619      	strb	r1, [r3, #24]
90007b14:	f85d fb04 	ldr.w	pc, [sp], #4
90007b18:	e000ed00 	.word	0xe000ed00
90007b1c:	e000e100 	.word	0xe000e100
90007b20:	e000ecfc 	.word	0xe000ecfc

90007b24 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
90007b24:	2800      	cmp	r0, #0
90007b26:	db07      	blt.n	90007b38 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
90007b28:	2301      	movs	r3, #1
90007b2a:	f000 011f 	and.w	r1, r0, #31
90007b2e:	4a03      	ldr	r2, [pc, #12]	; (90007b3c <HAL_NVIC_EnableIRQ+0x18>)
90007b30:	0940      	lsrs	r0, r0, #5
90007b32:	408b      	lsls	r3, r1
90007b34:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
90007b38:	4770      	bx	lr
90007b3a:	bf00      	nop
90007b3c:	e000e100 	.word	0xe000e100

90007b40 <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
90007b40:	2800      	cmp	r0, #0
90007b42:	db0c      	blt.n	90007b5e <HAL_NVIC_DisableIRQ+0x1e>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
90007b44:	0943      	lsrs	r3, r0, #5
90007b46:	2201      	movs	r2, #1
90007b48:	f000 001f 	and.w	r0, r0, #31
90007b4c:	4904      	ldr	r1, [pc, #16]	; (90007b60 <HAL_NVIC_DisableIRQ+0x20>)
90007b4e:	3320      	adds	r3, #32
90007b50:	4082      	lsls	r2, r0
90007b52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
90007b56:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
90007b5a:	f3bf 8f6f 	isb	sy
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
90007b5e:	4770      	bx	lr
90007b60:	e000e100 	.word	0xe000e100

90007b64 <HAL_MPU_Disable>:
  __ASM volatile ("dmb 0xF":::"memory");
90007b64:	f3bf 8f5f 	dmb	sy
{
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
90007b68:	4b04      	ldr	r3, [pc, #16]	; (90007b7c <HAL_MPU_Disable+0x18>)

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
90007b6a:	2100      	movs	r1, #0
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
90007b6c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
90007b6e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
90007b72:	625a      	str	r2, [r3, #36]	; 0x24
  MPU->CTRL = 0;
90007b74:	f8c3 1094 	str.w	r1, [r3, #148]	; 0x94
}
90007b78:	4770      	bx	lr
90007b7a:	bf00      	nop
90007b7c:	e000ed00 	.word	0xe000ed00

90007b80 <HAL_MPU_Enable>:
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
90007b80:	4b06      	ldr	r3, [pc, #24]	; (90007b9c <HAL_MPU_Enable+0x1c>)
90007b82:	f040 0001 	orr.w	r0, r0, #1
90007b86:	f8c3 0094 	str.w	r0, [r3, #148]	; 0x94

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
90007b8a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
90007b8c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
90007b90:	625a      	str	r2, [r3, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
90007b92:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
90007b96:	f3bf 8f6f 	isb	sy

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
90007b9a:	4770      	bx	lr
90007b9c:	e000ed00 	.word	0xe000ed00

90007ba0 <HAL_MPU_ConfigRegion>:
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
90007ba0:	4a17      	ldr	r2, [pc, #92]	; (90007c00 <HAL_MPU_ConfigRegion+0x60>)
90007ba2:	7843      	ldrb	r3, [r0, #1]
90007ba4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  if ((MPU_Init->Enable) != 0UL)
90007ba8:	7801      	ldrb	r1, [r0, #0]
90007baa:	b321      	cbz	r1, 90007bf6 <HAL_MPU_ConfigRegion+0x56>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
90007bac:	6843      	ldr	r3, [r0, #4]
{
90007bae:	b500      	push	{lr}
    MPU->RBAR = MPU_Init->BaseAddress;
90007bb0:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
90007bb4:	7ac3      	ldrb	r3, [r0, #11]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
90007bb6:	f890 c00c 	ldrb.w	ip, [r0, #12]
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
90007bba:	061b      	lsls	r3, r3, #24
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
90007bbc:	f890 e00f 	ldrb.w	lr, [r0, #15]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
90007bc0:	ea43 730c 	orr.w	r3, r3, ip, lsl #28
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
90007bc4:	f890 c00a 	ldrb.w	ip, [r0, #10]
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
90007bc8:	430b      	orrs	r3, r1
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
90007bca:	7b81      	ldrb	r1, [r0, #14]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
90007bcc:	ea43 43cc 	orr.w	r3, r3, ip, lsl #19
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
90007bd0:	f890 c00d 	ldrb.w	ip, [r0, #13]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
90007bd4:	ea43 438c 	orr.w	r3, r3, ip, lsl #18
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
90007bd8:	f890 c009 	ldrb.w	ip, [r0, #9]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
90007bdc:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
90007be0:	7a01      	ldrb	r1, [r0, #8]
90007be2:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
90007be6:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
90007bea:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
90007bee:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
90007bf2:	f85d fb04 	ldr.w	pc, [sp], #4
    MPU->RBAR = 0x00;
90007bf6:	f8c2 109c 	str.w	r1, [r2, #156]	; 0x9c
    MPU->RASR = 0x00;
90007bfa:	f8c2 10a0 	str.w	r1, [r2, #160]	; 0xa0
90007bfe:	4770      	bx	lr
90007c00:	e000ed00 	.word	0xe000ed00

90007c04 <HAL_CRC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
90007c04:	2800      	cmp	r0, #0
90007c06:	d036      	beq.n	90007c76 <HAL_CRC_Init+0x72>
{
90007c08:	b510      	push	{r4, lr}
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
90007c0a:	7f43      	ldrb	r3, [r0, #29]
90007c0c:	4604      	mov	r4, r0
90007c0e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
90007c12:	b363      	cbz	r3, 90007c6e <HAL_CRC_Init+0x6a>
    hcrc->Lock = HAL_UNLOCKED;
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
90007c14:	2202      	movs	r2, #2

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
90007c16:	7923      	ldrb	r3, [r4, #4]
  hcrc->State = HAL_CRC_STATE_BUSY;
90007c18:	7762      	strb	r2, [r4, #29]
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
90007c1a:	b9f3      	cbnz	r3, 90007c5a <HAL_CRC_Init+0x56>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
90007c1c:	6823      	ldr	r3, [r4, #0]
90007c1e:	4a17      	ldr	r2, [pc, #92]	; (90007c7c <HAL_CRC_Init+0x78>)
90007c20:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
90007c22:	689a      	ldr	r2, [r3, #8]
90007c24:	f022 0218 	bic.w	r2, r2, #24
90007c28:	609a      	str	r2, [r3, #8]
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
90007c2a:	7962      	ldrb	r2, [r4, #5]
90007c2c:	b18a      	cbz	r2, 90007c52 <HAL_CRC_Init+0x4e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
90007c2e:	6922      	ldr	r2, [r4, #16]
90007c30:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
90007c32:	689a      	ldr	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
90007c34:	e9d4 0105 	ldrd	r0, r1, [r4, #20]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
90007c38:	f022 0260 	bic.w	r2, r2, #96	; 0x60
90007c3c:	4302      	orrs	r2, r0

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;

  /* Return function status */
  return HAL_OK;
90007c3e:	2000      	movs	r0, #0
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
90007c40:	609a      	str	r2, [r3, #8]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
90007c42:	689a      	ldr	r2, [r3, #8]
90007c44:	f022 0280 	bic.w	r2, r2, #128	; 0x80
90007c48:	430a      	orrs	r2, r1
  hcrc->State = HAL_CRC_STATE_READY;
90007c4a:	2101      	movs	r1, #1
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
90007c4c:	609a      	str	r2, [r3, #8]
  hcrc->State = HAL_CRC_STATE_READY;
90007c4e:	7761      	strb	r1, [r4, #29]
}
90007c50:	bd10      	pop	{r4, pc}
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
90007c52:	f04f 32ff 	mov.w	r2, #4294967295
90007c56:	611a      	str	r2, [r3, #16]
90007c58:	e7eb      	b.n	90007c32 <HAL_CRC_Init+0x2e>
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
90007c5a:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
90007c5e:	4620      	mov	r0, r4
90007c60:	f000 f80e 	bl	90007c80 <HAL_CRCEx_Polynomial_Set>
90007c64:	b908      	cbnz	r0, 90007c6a <HAL_CRC_Init+0x66>
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
90007c66:	6823      	ldr	r3, [r4, #0]
90007c68:	e7df      	b.n	90007c2a <HAL_CRC_Init+0x26>
    return HAL_ERROR;
90007c6a:	2001      	movs	r0, #1
}
90007c6c:	bd10      	pop	{r4, pc}
    hcrc->Lock = HAL_UNLOCKED;
90007c6e:	7702      	strb	r2, [r0, #28]
    HAL_CRC_MspInit(hcrc);
90007c70:	f7fc fd38 	bl	900046e4 <HAL_CRC_MspInit>
90007c74:	e7ce      	b.n	90007c14 <HAL_CRC_Init+0x10>
    return HAL_ERROR;
90007c76:	2001      	movs	r0, #1
}
90007c78:	4770      	bx	lr
90007c7a:	bf00      	nop
90007c7c:	04c11db7 	.word	0x04c11db7

90007c80 <HAL_CRCEx_Polynomial_Set>:

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */ 
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
90007c80:	07cb      	lsls	r3, r1, #31
90007c82:	d51a      	bpl.n	90007cba <HAL_CRCEx_Polynomial_Set+0x3a>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
90007c84:	231e      	movs	r3, #30
{
90007c86:	b410      	push	{r4}
90007c88:	e001      	b.n	90007c8e <HAL_CRCEx_Polynomial_Set+0xe>
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
90007c8a:	3b01      	subs	r3, #1
90007c8c:	d317      	bcc.n	90007cbe <HAL_CRCEx_Polynomial_Set+0x3e>
90007c8e:	fa21 fc03 	lsr.w	ip, r1, r3
90007c92:	f01c 0f01 	tst.w	ip, #1
90007c96:	d0f8      	beq.n	90007c8a <HAL_CRCEx_Polynomial_Set+0xa>
    {
    }

    switch (PolyLength)
90007c98:	2a18      	cmp	r2, #24
90007c9a:	d811      	bhi.n	90007cc0 <HAL_CRCEx_Polynomial_Set+0x40>
90007c9c:	e8df f002 	tbb	[pc, r2]
90007ca0:	10101016 	.word	0x10101016
90007ca4:	10101010 	.word	0x10101010
90007ca8:	10101024 	.word	0x10101024
90007cac:	10101010 	.word	0x10101010
90007cb0:	10101021 	.word	0x10101021
90007cb4:	10101010 	.word	0x10101010
90007cb8:	14          	.byte	0x14
90007cb9:	00          	.byte	0x00
    status =  HAL_ERROR;
90007cba:	2001      	movs	r0, #1
    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
  }
  /* Return function status */
  return status;
}
90007cbc:	4770      	bx	lr
    switch (PolyLength)
90007cbe:	b12a      	cbz	r2, 90007ccc <HAL_CRCEx_Polynomial_Set+0x4c>
        status =  HAL_ERROR;
90007cc0:	2001      	movs	r0, #1
}
90007cc2:	f85d 4b04 	ldr.w	r4, [sp], #4
90007cc6:	4770      	bx	lr
        if (msb >= HAL_CRC_LENGTH_7B)
90007cc8:	2b06      	cmp	r3, #6
90007cca:	d8f9      	bhi.n	90007cc0 <HAL_CRCEx_Polynomial_Set+0x40>
    WRITE_REG(hcrc->Instance->POL, Pol);
90007ccc:	6804      	ldr	r4, [r0, #0]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
90007cce:	2000      	movs	r0, #0
    WRITE_REG(hcrc->Instance->POL, Pol);
90007cd0:	6161      	str	r1, [r4, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
90007cd2:	68a3      	ldr	r3, [r4, #8]
90007cd4:	f023 0318 	bic.w	r3, r3, #24
90007cd8:	4313      	orrs	r3, r2
90007cda:	60a3      	str	r3, [r4, #8]
}
90007cdc:	f85d 4b04 	ldr.w	r4, [sp], #4
90007ce0:	4770      	bx	lr
        if (msb >= HAL_CRC_LENGTH_8B)
90007ce2:	2b07      	cmp	r3, #7
90007ce4:	d9f2      	bls.n	90007ccc <HAL_CRCEx_Polynomial_Set+0x4c>
90007ce6:	e7eb      	b.n	90007cc0 <HAL_CRCEx_Polynomial_Set+0x40>
        if (msb >= HAL_CRC_LENGTH_16B)
90007ce8:	2b0f      	cmp	r3, #15
90007cea:	d9ef      	bls.n	90007ccc <HAL_CRCEx_Polynomial_Set+0x4c>
90007cec:	e7e8      	b.n	90007cc0 <HAL_CRCEx_Polynomial_Set+0x40>
90007cee:	bf00      	nop

90007cf0 <HAL_DMA2D_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
90007cf0:	2800      	cmp	r0, #0
90007cf2:	d035      	beq.n	90007d60 <HAL_DMA2D_Init+0x70>
{
90007cf4:	b538      	push	{r3, r4, r5, lr}

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
90007cf6:	f890 3061 	ldrb.w	r3, [r0, #97]	; 0x61
90007cfa:	4604      	mov	r4, r0
90007cfc:	f003 02ff 	and.w	r2, r3, #255	; 0xff
90007d00:	b34b      	cbz	r3, 90007d56 <HAL_DMA2D_Init+0x66>

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
90007d02:	6823      	ldr	r3, [r4, #0]
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
90007d04:	2002      	movs	r0, #2
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
90007d06:	6862      	ldr	r2, [r4, #4]
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
90007d08:	f884 0061 	strb.w	r0, [r4, #97]	; 0x61
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
90007d0c:	69e1      	ldr	r1, [r4, #28]
90007d0e:	681d      	ldr	r5, [r3, #0]
90007d10:	4814      	ldr	r0, [pc, #80]	; (90007d64 <HAL_DMA2D_Init+0x74>)
90007d12:	4311      	orrs	r1, r2

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
90007d14:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
90007d16:	4028      	ands	r0, r5
             hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
90007d18:	68e5      	ldr	r5, [r4, #12]
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
90007d1a:	4301      	orrs	r1, r0
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
90007d1c:	69a0      	ldr	r0, [r4, #24]
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
90007d1e:	6019      	str	r1, [r3, #0]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
90007d20:	4302      	orrs	r2, r0
90007d22:	6b59      	ldr	r1, [r3, #52]	; 0x34
90007d24:	4810      	ldr	r0, [pc, #64]	; (90007d68 <HAL_DMA2D_Init+0x78>)
90007d26:	4008      	ands	r0, r1
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
90007d28:	4910      	ldr	r1, [pc, #64]	; (90007d6c <HAL_DMA2D_Init+0x7c>)
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
90007d2a:	4302      	orrs	r2, r0
90007d2c:	635a      	str	r2, [r3, #52]	; 0x34
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
90007d2e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
90007d30:	4011      	ands	r1, r2
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
90007d32:	e9d4 0204 	ldrd	r0, r2, [r4, #16]
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
90007d36:	4329      	orrs	r1, r5
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
90007d38:	0552      	lsls	r2, r2, #21
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
90007d3a:	6419      	str	r1, [r3, #64]	; 0x40
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
90007d3c:	6b59      	ldr	r1, [r3, #52]	; 0x34
90007d3e:	ea42 5200 	orr.w	r2, r2, r0, lsl #20
             ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | \
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
90007d42:	2000      	movs	r0, #0
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
90007d44:	f421 1140 	bic.w	r1, r1, #3145728	; 0x300000
90007d48:	430a      	orrs	r2, r1
90007d4a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
90007d4c:	2301      	movs	r3, #1
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
90007d4e:	6660      	str	r0, [r4, #100]	; 0x64
  hdma2d->State  = HAL_DMA2D_STATE_READY;
90007d50:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61

  return HAL_OK;
}
90007d54:	bd38      	pop	{r3, r4, r5, pc}
    hdma2d->Lock = HAL_UNLOCKED;
90007d56:	f880 2060 	strb.w	r2, [r0, #96]	; 0x60
    HAL_DMA2D_MspInit(hdma2d);
90007d5a:	f7fc fcdb 	bl	90004714 <HAL_DMA2D_MspInit>
90007d5e:	e7d0      	b.n	90007d02 <HAL_DMA2D_Init+0x12>
    return HAL_ERROR;
90007d60:	2001      	movs	r0, #1
}
90007d62:	4770      	bx	lr
90007d64:	fff8ffbf 	.word	0xfff8ffbf
90007d68:	fffffef8 	.word	0xfffffef8
90007d6c:	ffff0000 	.word	0xffff0000

90007d70 <HAL_DMA2D_LineEventCallback>:
90007d70:	4770      	bx	lr
90007d72:	bf00      	nop

90007d74 <HAL_DMA2D_CLUTLoadingCpltCallback>:
90007d74:	4770      	bx	lr
90007d76:	bf00      	nop

90007d78 <HAL_DMA2D_IRQHandler>:
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
90007d78:	6803      	ldr	r3, [r0, #0]
{
90007d7a:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
90007d7c:	685d      	ldr	r5, [r3, #4]
{
90007d7e:	4604      	mov	r4, r0
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
90007d80:	681e      	ldr	r6, [r3, #0]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
90007d82:	07ea      	lsls	r2, r5, #31
90007d84:	d501      	bpl.n	90007d8a <HAL_DMA2D_IRQHandler+0x12>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
90007d86:	05f1      	lsls	r1, r6, #23
90007d88:	d456      	bmi.n	90007e38 <HAL_DMA2D_IRQHandler+0xc0>
        hdma2d->XferErrorCallback(hdma2d);
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
90007d8a:	06aa      	lsls	r2, r5, #26
90007d8c:	d501      	bpl.n	90007d92 <HAL_DMA2D_IRQHandler+0x1a>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
90007d8e:	04b3      	lsls	r3, r6, #18
90007d90:	d43b      	bmi.n	90007e0a <HAL_DMA2D_IRQHandler+0x92>
        hdma2d->XferErrorCallback(hdma2d);
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
90007d92:	0728      	lsls	r0, r5, #28
90007d94:	d501      	bpl.n	90007d9a <HAL_DMA2D_IRQHandler+0x22>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
90007d96:	0531      	lsls	r1, r6, #20
90007d98:	d421      	bmi.n	90007dde <HAL_DMA2D_IRQHandler+0x66>
        hdma2d->XferErrorCallback(hdma2d);
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
90007d9a:	076a      	lsls	r2, r5, #29
90007d9c:	d501      	bpl.n	90007da2 <HAL_DMA2D_IRQHandler+0x2a>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
90007d9e:	0573      	lsls	r3, r6, #21
90007da0:	d472      	bmi.n	90007e88 <HAL_DMA2D_IRQHandler+0x110>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
90007da2:	07a8      	lsls	r0, r5, #30
90007da4:	d501      	bpl.n	90007daa <HAL_DMA2D_IRQHandler+0x32>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
90007da6:	05b1      	lsls	r1, r6, #22
90007da8:	d404      	bmi.n	90007db4 <HAL_DMA2D_IRQHandler+0x3c>
        hdma2d->XferCpltCallback(hdma2d);
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
90007daa:	06ea      	lsls	r2, r5, #27
90007dac:	d501      	bpl.n	90007db2 <HAL_DMA2D_IRQHandler+0x3a>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
90007dae:	04f3      	lsls	r3, r6, #19
90007db0:	d457      	bmi.n	90007e62 <HAL_DMA2D_IRQHandler+0xea>
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
90007db2:	bd70      	pop	{r4, r5, r6, pc}
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
90007db4:	6823      	ldr	r3, [r4, #0]
90007db6:	681a      	ldr	r2, [r3, #0]
90007db8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
90007dbc:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
90007dbe:	2202      	movs	r2, #2
90007dc0:	609a      	str	r2, [r3, #8]
      hdma2d->State = HAL_DMA2D_STATE_READY;
90007dc2:	2201      	movs	r2, #1
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
90007dc4:	6e63      	ldr	r3, [r4, #100]	; 0x64
90007dc6:	6663      	str	r3, [r4, #100]	; 0x64
      __HAL_UNLOCK(hdma2d);
90007dc8:	2300      	movs	r3, #0
      hdma2d->State = HAL_DMA2D_STATE_READY;
90007dca:	f884 2061 	strb.w	r2, [r4, #97]	; 0x61
      __HAL_UNLOCK(hdma2d);
90007dce:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
      if (hdma2d->XferCpltCallback != NULL)
90007dd2:	6a23      	ldr	r3, [r4, #32]
90007dd4:	2b00      	cmp	r3, #0
90007dd6:	d0e8      	beq.n	90007daa <HAL_DMA2D_IRQHandler+0x32>
        hdma2d->XferCpltCallback(hdma2d);
90007dd8:	4620      	mov	r0, r4
90007dda:	4798      	blx	r3
90007ddc:	e7e5      	b.n	90007daa <HAL_DMA2D_IRQHandler+0x32>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
90007dde:	6823      	ldr	r3, [r4, #0]
90007de0:	681a      	ldr	r2, [r3, #0]
90007de2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
90007de6:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
90007de8:	2208      	movs	r2, #8
90007dea:	609a      	str	r2, [r3, #8]
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
90007dec:	2204      	movs	r2, #4
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
90007dee:	6e63      	ldr	r3, [r4, #100]	; 0x64
90007df0:	4313      	orrs	r3, r2
90007df2:	6663      	str	r3, [r4, #100]	; 0x64
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
90007df4:	f884 2061 	strb.w	r2, [r4, #97]	; 0x61
      __HAL_UNLOCK(hdma2d);
90007df8:	2200      	movs	r2, #0
      if (hdma2d->XferErrorCallback != NULL)
90007dfa:	6a63      	ldr	r3, [r4, #36]	; 0x24
      __HAL_UNLOCK(hdma2d);
90007dfc:	f884 2060 	strb.w	r2, [r4, #96]	; 0x60
      if (hdma2d->XferErrorCallback != NULL)
90007e00:	2b00      	cmp	r3, #0
90007e02:	d0ca      	beq.n	90007d9a <HAL_DMA2D_IRQHandler+0x22>
        hdma2d->XferErrorCallback(hdma2d);
90007e04:	4620      	mov	r0, r4
90007e06:	4798      	blx	r3
90007e08:	e7c7      	b.n	90007d9a <HAL_DMA2D_IRQHandler+0x22>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
90007e0a:	6823      	ldr	r3, [r4, #0]
90007e0c:	681a      	ldr	r2, [r3, #0]
90007e0e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
90007e12:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
90007e14:	2220      	movs	r2, #32
90007e16:	609a      	str	r2, [r3, #8]
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
90007e18:	2204      	movs	r2, #4
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
90007e1a:	6e63      	ldr	r3, [r4, #100]	; 0x64
90007e1c:	f043 0302 	orr.w	r3, r3, #2
90007e20:	6663      	str	r3, [r4, #100]	; 0x64
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
90007e22:	f884 2061 	strb.w	r2, [r4, #97]	; 0x61
      __HAL_UNLOCK(hdma2d);
90007e26:	2200      	movs	r2, #0
      if (hdma2d->XferErrorCallback != NULL)
90007e28:	6a63      	ldr	r3, [r4, #36]	; 0x24
      __HAL_UNLOCK(hdma2d);
90007e2a:	f884 2060 	strb.w	r2, [r4, #96]	; 0x60
      if (hdma2d->XferErrorCallback != NULL)
90007e2e:	2b00      	cmp	r3, #0
90007e30:	d0af      	beq.n	90007d92 <HAL_DMA2D_IRQHandler+0x1a>
        hdma2d->XferErrorCallback(hdma2d);
90007e32:	4620      	mov	r0, r4
90007e34:	4798      	blx	r3
90007e36:	e7ac      	b.n	90007d92 <HAL_DMA2D_IRQHandler+0x1a>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
90007e38:	681a      	ldr	r2, [r3, #0]
90007e3a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
90007e3e:	601a      	str	r2, [r3, #0]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
90007e40:	6e42      	ldr	r2, [r0, #100]	; 0x64
90007e42:	f042 0201 	orr.w	r2, r2, #1
90007e46:	6642      	str	r2, [r0, #100]	; 0x64
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
90007e48:	2201      	movs	r2, #1
90007e4a:	609a      	str	r2, [r3, #8]
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
90007e4c:	2304      	movs	r3, #4
90007e4e:	f880 3061 	strb.w	r3, [r0, #97]	; 0x61
      __HAL_UNLOCK(hdma2d);
90007e52:	2300      	movs	r3, #0
90007e54:	f880 3060 	strb.w	r3, [r0, #96]	; 0x60
      if (hdma2d->XferErrorCallback != NULL)
90007e58:	6a43      	ldr	r3, [r0, #36]	; 0x24
90007e5a:	2b00      	cmp	r3, #0
90007e5c:	d095      	beq.n	90007d8a <HAL_DMA2D_IRQHandler+0x12>
        hdma2d->XferErrorCallback(hdma2d);
90007e5e:	4798      	blx	r3
90007e60:	e793      	b.n	90007d8a <HAL_DMA2D_IRQHandler+0x12>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
90007e62:	6823      	ldr	r3, [r4, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
90007e64:	2010      	movs	r0, #16
      hdma2d->State = HAL_DMA2D_STATE_READY;
90007e66:	2101      	movs	r1, #1
      __HAL_UNLOCK(hdma2d);
90007e68:	2500      	movs	r5, #0
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
90007e6a:	681a      	ldr	r2, [r3, #0]
90007e6c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
90007e70:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
90007e72:	6098      	str	r0, [r3, #8]
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
90007e74:	4620      	mov	r0, r4
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
90007e76:	6e63      	ldr	r3, [r4, #100]	; 0x64
      __HAL_UNLOCK(hdma2d);
90007e78:	f884 5060 	strb.w	r5, [r4, #96]	; 0x60
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
90007e7c:	6663      	str	r3, [r4, #100]	; 0x64
      hdma2d->State = HAL_DMA2D_STATE_READY;
90007e7e:	f884 1061 	strb.w	r1, [r4, #97]	; 0x61
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
90007e82:	f7ff ff77 	bl	90007d74 <HAL_DMA2D_CLUTLoadingCpltCallback>
}
90007e86:	bd70      	pop	{r4, r5, r6, pc}
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
90007e88:	6823      	ldr	r3, [r4, #0]
      HAL_DMA2D_LineEventCallback(hdma2d);
90007e8a:	4620      	mov	r0, r4
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
90007e8c:	681a      	ldr	r2, [r3, #0]
90007e8e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
90007e92:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
90007e94:	2204      	movs	r2, #4
90007e96:	609a      	str	r2, [r3, #8]
      HAL_DMA2D_LineEventCallback(hdma2d);
90007e98:	f7ff ff6a 	bl	90007d70 <HAL_DMA2D_LineEventCallback>
90007e9c:	e781      	b.n	90007da2 <HAL_DMA2D_IRQHandler+0x2a>
90007e9e:	bf00      	nop

90007ea0 <HAL_DMA2D_ConfigLayer>:
  {
    assert_param(IS_DMA2D_CHROMA_SUB_SAMPLING(hdma2d->LayerCfg[LayerIdx].ChromaSubSampling));
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
90007ea0:	f890 2060 	ldrb.w	r2, [r0, #96]	; 0x60
90007ea4:	2a01      	cmp	r2, #1
90007ea6:	d065      	beq.n	90007f74 <HAL_DMA2D_ConfigLayer+0xd4>
90007ea8:	4603      	mov	r3, r0
  hdma2d->State = HAL_DMA2D_STATE_BUSY;

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
90007eaa:	ebc1 00c1 	rsb	r0, r1, r1, lsl #3
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
90007eae:	2202      	movs	r2, #2
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
90007eb0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
{
90007eb4:	b470      	push	{r4, r5, r6}
  __HAL_LOCK(hdma2d);
90007eb6:	2401      	movs	r4, #1
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
90007eb8:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
  __HAL_LOCK(hdma2d);
90007ebc:	f883 4060 	strb.w	r4, [r3, #96]	; 0x60
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
90007ec0:	6b82      	ldr	r2, [r0, #56]	; 0x38
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
90007ec2:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
90007ec4:	6b05      	ldr	r5, [r0, #48]	; 0x30
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
90007ec6:	0512      	lsls	r2, r2, #20
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
90007ec8:	f1a4 0c09 	sub.w	ip, r4, #9
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
90007ecc:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
90007ed0:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
90007ed2:	f1bc 0f01 	cmp.w	ip, #1
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
90007ed6:	ea42 0204 	orr.w	r2, r2, r4
90007eda:	ea42 5245 	orr.w	r2, r2, r5, lsl #21
  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
90007ede:	d922      	bls.n	90007f26 <HAL_DMA2D_ConfigLayer+0x86>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
90007ee0:	6b45      	ldr	r5, [r0, #52]	; 0x34
90007ee2:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
90007ee6:	b981      	cbnz	r1, 90007f0a <HAL_DMA2D_ConfigLayer+0x6a>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
90007ee8:	6818      	ldr	r0, [r3, #0]
90007eea:	4923      	ldr	r1, [pc, #140]	; (90007f78 <HAL_DMA2D_ConfigLayer+0xd8>)
90007eec:	6a45      	ldr	r5, [r0, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
90007eee:	6a9c      	ldr	r4, [r3, #40]	; 0x28
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
90007ef0:	4029      	ands	r1, r5
90007ef2:	4311      	orrs	r1, r2
90007ef4:	6241      	str	r1, [r0, #36]	; 0x24
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
90007ef6:	6184      	str	r4, [r0, #24]
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
90007ef8:	2200      	movs	r2, #0
  hdma2d->State = HAL_DMA2D_STATE_READY;
90007efa:	2101      	movs	r1, #1

  return HAL_OK;
90007efc:	4610      	mov	r0, r2
  hdma2d->State = HAL_DMA2D_STATE_READY;
90007efe:	f883 1061 	strb.w	r1, [r3, #97]	; 0x61
  __HAL_UNLOCK(hdma2d);
90007f02:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
}
90007f06:	bc70      	pop	{r4, r5, r6}
90007f08:	4770      	bx	lr
    if (pLayerCfg->InputColorMode == DMA2D_INPUT_YCBCR)
90007f0a:	2c0b      	cmp	r4, #11
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
90007f0c:	681c      	ldr	r4, [r3, #0]
    if (pLayerCfg->InputColorMode == DMA2D_INPUT_YCBCR)
90007f0e:	d129      	bne.n	90007f64 <HAL_DMA2D_ConfigLayer+0xc4>
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
90007f10:	69e5      	ldr	r5, [r4, #28]
90007f12:	491a      	ldr	r1, [pc, #104]	; (90007f7c <HAL_DMA2D_ConfigLayer+0xdc>)
90007f14:	4029      	ands	r1, r5
      regValue |= (pLayerCfg->ChromaSubSampling << DMA2D_FGPFCCR_CSS_Pos);
90007f16:	6c05      	ldr	r5, [r0, #64]	; 0x40
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
90007f18:	6a80      	ldr	r0, [r0, #40]	; 0x28
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
90007f1a:	ea41 4185 	orr.w	r1, r1, r5, lsl #18
90007f1e:	4311      	orrs	r1, r2
90007f20:	61e1      	str	r1, [r4, #28]
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
90007f22:	6120      	str	r0, [r4, #16]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
90007f24:	e7e8      	b.n	90007ef8 <HAL_DMA2D_ConfigLayer+0x58>
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
90007f26:	6b44      	ldr	r4, [r0, #52]	; 0x34
90007f28:	f004 447f 	and.w	r4, r4, #4278190080	; 0xff000000
90007f2c:	4314      	orrs	r4, r2
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
90007f2e:	b961      	cbnz	r1, 90007f4a <HAL_DMA2D_ConfigLayer+0xaa>
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
90007f30:	6819      	ldr	r1, [r3, #0]
90007f32:	4a11      	ldr	r2, [pc, #68]	; (90007f78 <HAL_DMA2D_ConfigLayer+0xd8>)
90007f34:	6a4e      	ldr	r6, [r1, #36]	; 0x24
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
90007f36:	6b58      	ldr	r0, [r3, #52]	; 0x34
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
90007f38:	4032      	ands	r2, r6
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
90007f3a:	6a9d      	ldr	r5, [r3, #40]	; 0x28
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
90007f3c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
90007f40:	4322      	orrs	r2, r4
90007f42:	624a      	str	r2, [r1, #36]	; 0x24
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
90007f44:	618d      	str	r5, [r1, #24]
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
90007f46:	6288      	str	r0, [r1, #40]	; 0x28
90007f48:	e7d6      	b.n	90007ef8 <HAL_DMA2D_ConfigLayer+0x58>
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
90007f4a:	6819      	ldr	r1, [r3, #0]
90007f4c:	4a0a      	ldr	r2, [pc, #40]	; (90007f78 <HAL_DMA2D_ConfigLayer+0xd8>)
90007f4e:	69cd      	ldr	r5, [r1, #28]
90007f50:	402a      	ands	r2, r5
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
90007f52:	6a85      	ldr	r5, [r0, #40]	; 0x28
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
90007f54:	4322      	orrs	r2, r4
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
90007f56:	6b44      	ldr	r4, [r0, #52]	; 0x34
90007f58:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
90007f5c:	61ca      	str	r2, [r1, #28]
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
90007f5e:	610d      	str	r5, [r1, #16]
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
90007f60:	620c      	str	r4, [r1, #32]
90007f62:	e7c9      	b.n	90007ef8 <HAL_DMA2D_ConfigLayer+0x58>
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
90007f64:	69e5      	ldr	r5, [r4, #28]
90007f66:	4904      	ldr	r1, [pc, #16]	; (90007f78 <HAL_DMA2D_ConfigLayer+0xd8>)
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
90007f68:	6a80      	ldr	r0, [r0, #40]	; 0x28
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
90007f6a:	4029      	ands	r1, r5
90007f6c:	4311      	orrs	r1, r2
90007f6e:	61e1      	str	r1, [r4, #28]
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
90007f70:	6120      	str	r0, [r4, #16]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
90007f72:	e7c1      	b.n	90007ef8 <HAL_DMA2D_ConfigLayer+0x58>
  __HAL_LOCK(hdma2d);
90007f74:	2002      	movs	r0, #2
}
90007f76:	4770      	bx	lr
90007f78:	00ccfff0 	.word	0x00ccfff0
90007f7c:	00c0fff0 	.word	0x00c0fff0

90007f80 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
90007f80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
90007f84:	680c      	ldr	r4, [r1, #0]
{
90007f86:	b083      	sub	sp, #12
  while (((GPIO_Init->Pin) >> position) != 0x00U)
90007f88:	2c00      	cmp	r4, #0
90007f8a:	f000 80a7 	beq.w	900080dc <HAL_GPIO_Init+0x15c>
90007f8e:	f04f 0c00 	mov.w	ip, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
90007f92:	4f8a      	ldr	r7, [pc, #552]	; (900081bc <HAL_GPIO_Init+0x23c>)
  uint32_t position = 0x00U;
90007f94:	4663      	mov	r3, ip
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
90007f96:	2201      	movs	r2, #1
90007f98:	409a      	lsls	r2, r3
    if (iocurrent != 0x00U)
90007f9a:	ea12 0e04 	ands.w	lr, r2, r4
90007f9e:	f000 8096 	beq.w	900080ce <HAL_GPIO_Init+0x14e>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
90007fa2:	684d      	ldr	r5, [r1, #4]
90007fa4:	f005 0903 	and.w	r9, r5, #3
90007fa8:	f109 36ff 	add.w	r6, r9, #4294967295
90007fac:	2e01      	cmp	r6, #1
90007fae:	f240 8098 	bls.w	900080e2 <HAL_GPIO_Init+0x162>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
90007fb2:	f1b9 0f03 	cmp.w	r9, #3
90007fb6:	f040 80d2 	bne.w	9000815e <HAL_GPIO_Init+0x1de>
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
90007fba:	fa09 f20c 	lsl.w	r2, r9, ip
90007fbe:	ea6f 0802 	mvn.w	r8, r2
      temp = GPIOx->MODER;
90007fc2:	6806      	ldr	r6, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
90007fc4:	f415 3f40 	tst.w	r5, #196608	; 0x30000
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
90007fc8:	ea06 0608 	and.w	r6, r6, r8
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
90007fcc:	ea42 0206 	orr.w	r2, r2, r6
      GPIOx->MODER = temp;
90007fd0:	6002      	str	r2, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
90007fd2:	d07c      	beq.n	900080ce <HAL_GPIO_Init+0x14e>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
90007fd4:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
90007fd8:	f023 0803 	bic.w	r8, r3, #3

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
90007fdc:	f003 0903 	and.w	r9, r3, #3
90007fe0:	260f      	movs	r6, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
90007fe2:	f042 0202 	orr.w	r2, r2, #2
90007fe6:	f108 48b0 	add.w	r8, r8, #1476395008	; 0x58000000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
90007fea:	ea4f 0989 	mov.w	r9, r9, lsl #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
90007fee:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
90007ff2:	f508 6880 	add.w	r8, r8, #1024	; 0x400
90007ff6:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
90007ffa:	fa06 f609 	lsl.w	r6, r6, r9
        __HAL_RCC_SYSCFG_CLK_ENABLE();
90007ffe:	f002 0202 	and.w	r2, r2, #2
90008002:	9201      	str	r2, [sp, #4]
90008004:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
90008006:	f8d8 2008 	ldr.w	r2, [r8, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
9000800a:	ea22 0206 	bic.w	r2, r2, r6
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
9000800e:	4e6c      	ldr	r6, [pc, #432]	; (900081c0 <HAL_GPIO_Init+0x240>)
90008010:	42b0      	cmp	r0, r6
90008012:	d028      	beq.n	90008066 <HAL_GPIO_Init+0xe6>
90008014:	f506 6680 	add.w	r6, r6, #1024	; 0x400
90008018:	42b0      	cmp	r0, r6
9000801a:	f000 80ac 	beq.w	90008176 <HAL_GPIO_Init+0x1f6>
9000801e:	4e69      	ldr	r6, [pc, #420]	; (900081c4 <HAL_GPIO_Init+0x244>)
90008020:	42b0      	cmp	r0, r6
90008022:	f000 80ad 	beq.w	90008180 <HAL_GPIO_Init+0x200>
90008026:	4e68      	ldr	r6, [pc, #416]	; (900081c8 <HAL_GPIO_Init+0x248>)
90008028:	42b0      	cmp	r0, r6
9000802a:	f000 809f 	beq.w	9000816c <HAL_GPIO_Init+0x1ec>
9000802e:	4e67      	ldr	r6, [pc, #412]	; (900081cc <HAL_GPIO_Init+0x24c>)
90008030:	42b0      	cmp	r0, r6
90008032:	f000 80af 	beq.w	90008194 <HAL_GPIO_Init+0x214>
90008036:	4e66      	ldr	r6, [pc, #408]	; (900081d0 <HAL_GPIO_Init+0x250>)
90008038:	42b0      	cmp	r0, r6
9000803a:	f000 80b0 	beq.w	9000819e <HAL_GPIO_Init+0x21e>
9000803e:	4e65      	ldr	r6, [pc, #404]	; (900081d4 <HAL_GPIO_Init+0x254>)
90008040:	42b0      	cmp	r0, r6
90008042:	f000 80a2 	beq.w	9000818a <HAL_GPIO_Init+0x20a>
90008046:	4e64      	ldr	r6, [pc, #400]	; (900081d8 <HAL_GPIO_Init+0x258>)
90008048:	42b0      	cmp	r0, r6
9000804a:	f000 80ad 	beq.w	900081a8 <HAL_GPIO_Init+0x228>
9000804e:	4e63      	ldr	r6, [pc, #396]	; (900081dc <HAL_GPIO_Init+0x25c>)
90008050:	42b0      	cmp	r0, r6
90008052:	f000 80ae 	beq.w	900081b2 <HAL_GPIO_Init+0x232>
90008056:	4e62      	ldr	r6, [pc, #392]	; (900081e0 <HAL_GPIO_Init+0x260>)
90008058:	42b0      	cmp	r0, r6
9000805a:	bf0c      	ite	eq
9000805c:	2609      	moveq	r6, #9
9000805e:	260a      	movne	r6, #10
90008060:	fa06 f609 	lsl.w	r6, r6, r9
90008064:	4332      	orrs	r2, r6
        SYSCFG->EXTICR[position >> 2U] = temp;
90008066:	f8c8 2008 	str.w	r2, [r8, #8]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
9000806a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
9000806e:	f415 1f80 	tst.w	r5, #1048576	; 0x100000
        temp &= ~(iocurrent);
90008072:	ea6f 060e 	mvn.w	r6, lr
        temp = EXTI->RTSR1;
90008076:	6812      	ldr	r2, [r2, #0]
        {
          temp |= iocurrent;
        }
        EXTI->RTSR1 = temp;
90008078:	f04f 48b0 	mov.w	r8, #1476395008	; 0x58000000
        temp &= ~(iocurrent);
9000807c:	bf0c      	ite	eq
9000807e:	4032      	andeq	r2, r6
          temp |= iocurrent;
90008080:	ea4e 0202 	orrne.w	r2, lr, r2

        temp = EXTI->FTSR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
90008084:	f415 1f00 	tst.w	r5, #2097152	; 0x200000
        EXTI->RTSR1 = temp;
90008088:	f8c8 2000 	str.w	r2, [r8]
        temp = EXTI->FTSR1;
9000808c:	f8d8 2004 	ldr.w	r2, [r8, #4]
        {
          temp |= iocurrent;
        }
        EXTI->FTSR1 = temp;
90008090:	f04f 48b0 	mov.w	r8, #1476395008	; 0x58000000
        temp &= ~(iocurrent);
90008094:	bf0c      	ite	eq
90008096:	4032      	andeq	r2, r6
          temp |= iocurrent;
90008098:	ea4e 0202 	orrne.w	r2, lr, r2

        temp = EXTI_CurrentCPU->EMR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
9000809c:	f415 3f00 	tst.w	r5, #131072	; 0x20000
        EXTI->FTSR1 = temp;
900080a0:	f8c8 2004 	str.w	r2, [r8, #4]
        temp = EXTI_CurrentCPU->EMR1;
900080a4:	f8d8 2084 	ldr.w	r2, [r8, #132]	; 0x84
        {
          temp |= iocurrent;
        }
        EXTI_CurrentCPU->EMR1 = temp;
900080a8:	f04f 48b0 	mov.w	r8, #1476395008	; 0x58000000
        temp &= ~(iocurrent);
900080ac:	bf0c      	ite	eq
900080ae:	4032      	andeq	r2, r6
          temp |= iocurrent;
900080b0:	ea4e 0202 	orrne.w	r2, lr, r2

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
900080b4:	03ed      	lsls	r5, r5, #15
        {
          temp |= iocurrent;
        }
        EXTI_CurrentCPU->IMR1 = temp;
900080b6:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
        EXTI_CurrentCPU->EMR1 = temp;
900080ba:	f8c8 2084 	str.w	r2, [r8, #132]	; 0x84
        temp = EXTI_CurrentCPU->IMR1;
900080be:	f8d8 2080 	ldr.w	r2, [r8, #128]	; 0x80
        temp &= ~(iocurrent);
900080c2:	bf54      	ite	pl
900080c4:	4032      	andpl	r2, r6
          temp |= iocurrent;
900080c6:	ea4e 0202 	orrmi.w	r2, lr, r2
        EXTI_CurrentCPU->IMR1 = temp;
900080ca:	f8c5 2080 	str.w	r2, [r5, #128]	; 0x80
      }
    }

    position++;
900080ce:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00U)
900080d0:	f10c 0c02 	add.w	ip, ip, #2
900080d4:	fa34 f203 	lsrs.w	r2, r4, r3
900080d8:	f47f af5d 	bne.w	90007f96 <HAL_GPIO_Init+0x16>
  }
}
900080dc:	b003      	add	sp, #12
900080de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
900080e2:	f04f 0803 	mov.w	r8, #3
        temp = GPIOx->OSPEEDR;
900080e6:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
900080e8:	fa08 f80c 	lsl.w	r8, r8, ip
900080ec:	ea26 0a08 	bic.w	sl, r6, r8
        temp |= (GPIO_Init->Speed << (position * 2U));
900080f0:	68ce      	ldr	r6, [r1, #12]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
900080f2:	ea6f 0808 	mvn.w	r8, r8
        temp |= (GPIO_Init->Speed << (position * 2U));
900080f6:	fa06 f60c 	lsl.w	r6, r6, ip
900080fa:	ea46 060a 	orr.w	r6, r6, sl
        GPIOx->OSPEEDR = temp;
900080fe:	6086      	str	r6, [r0, #8]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
90008100:	f3c5 1600 	ubfx	r6, r5, #4, #1
        temp = GPIOx->OTYPER;
90008104:	f8d0 a004 	ldr.w	sl, [r0, #4]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
90008108:	409e      	lsls	r6, r3
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
9000810a:	ea2a 0202 	bic.w	r2, sl, r2
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
9000810e:	4332      	orrs	r2, r6
        GPIOx->OTYPER = temp;
90008110:	6042      	str	r2, [r0, #4]
      temp = GPIOx->PUPDR;
90008112:	68c2      	ldr	r2, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
90008114:	f1b9 0f02 	cmp.w	r9, #2
      temp |= ((GPIO_Init->Pull) << (position * 2U));
90008118:	688e      	ldr	r6, [r1, #8]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
9000811a:	ea02 0208 	and.w	r2, r2, r8
      temp |= ((GPIO_Init->Pull) << (position * 2U));
9000811e:	fa06 f60c 	lsl.w	r6, r6, ip
90008122:	ea46 0602 	orr.w	r6, r6, r2
      GPIOx->PUPDR = temp;
90008126:	fa09 f20c 	lsl.w	r2, r9, ip
9000812a:	60c6      	str	r6, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
9000812c:	f47f af49 	bne.w	90007fc2 <HAL_GPIO_Init+0x42>
        temp = GPIOx->AFR[position >> 3U];
90008130:	ea4f 09d3 	mov.w	r9, r3, lsr #3
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
90008134:	f003 0b07 	and.w	fp, r3, #7
90008138:	260f      	movs	r6, #15
9000813a:	eb00 0989 	add.w	r9, r0, r9, lsl #2
9000813e:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = GPIOx->AFR[position >> 3U];
90008142:	f8d9 a020 	ldr.w	sl, [r9, #32]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
90008146:	fa06 f60b 	lsl.w	r6, r6, fp
9000814a:	ea2a 0a06 	bic.w	sl, sl, r6
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
9000814e:	690e      	ldr	r6, [r1, #16]
90008150:	fa06 f60b 	lsl.w	r6, r6, fp
90008154:	ea46 060a 	orr.w	r6, r6, sl
        GPIOx->AFR[position >> 3U] = temp;
90008158:	f8c9 6020 	str.w	r6, [r9, #32]
9000815c:	e731      	b.n	90007fc2 <HAL_GPIO_Init+0x42>
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
9000815e:	f04f 0803 	mov.w	r8, #3
90008162:	fa08 f80c 	lsl.w	r8, r8, ip
90008166:	ea6f 0808 	mvn.w	r8, r8
9000816a:	e7d2      	b.n	90008112 <HAL_GPIO_Init+0x192>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
9000816c:	2603      	movs	r6, #3
9000816e:	fa06 f609 	lsl.w	r6, r6, r9
90008172:	4332      	orrs	r2, r6
90008174:	e777      	b.n	90008066 <HAL_GPIO_Init+0xe6>
90008176:	2601      	movs	r6, #1
90008178:	fa06 f609 	lsl.w	r6, r6, r9
9000817c:	4332      	orrs	r2, r6
9000817e:	e772      	b.n	90008066 <HAL_GPIO_Init+0xe6>
90008180:	2602      	movs	r6, #2
90008182:	fa06 f609 	lsl.w	r6, r6, r9
90008186:	4332      	orrs	r2, r6
90008188:	e76d      	b.n	90008066 <HAL_GPIO_Init+0xe6>
9000818a:	2606      	movs	r6, #6
9000818c:	fa06 f609 	lsl.w	r6, r6, r9
90008190:	4332      	orrs	r2, r6
90008192:	e768      	b.n	90008066 <HAL_GPIO_Init+0xe6>
90008194:	2604      	movs	r6, #4
90008196:	fa06 f609 	lsl.w	r6, r6, r9
9000819a:	4332      	orrs	r2, r6
9000819c:	e763      	b.n	90008066 <HAL_GPIO_Init+0xe6>
9000819e:	2605      	movs	r6, #5
900081a0:	fa06 f609 	lsl.w	r6, r6, r9
900081a4:	4332      	orrs	r2, r6
900081a6:	e75e      	b.n	90008066 <HAL_GPIO_Init+0xe6>
900081a8:	2607      	movs	r6, #7
900081aa:	fa06 f609 	lsl.w	r6, r6, r9
900081ae:	4332      	orrs	r2, r6
900081b0:	e759      	b.n	90008066 <HAL_GPIO_Init+0xe6>
900081b2:	2608      	movs	r6, #8
900081b4:	fa06 f609 	lsl.w	r6, r6, r9
900081b8:	4332      	orrs	r2, r6
900081ba:	e754      	b.n	90008066 <HAL_GPIO_Init+0xe6>
900081bc:	58024400 	.word	0x58024400
900081c0:	58020000 	.word	0x58020000
900081c4:	58020800 	.word	0x58020800
900081c8:	58020c00 	.word	0x58020c00
900081cc:	58021000 	.word	0x58021000
900081d0:	58021400 	.word	0x58021400
900081d4:	58021800 	.word	0x58021800
900081d8:	58021c00 	.word	0x58021c00
900081dc:	58022000 	.word	0x58022000
900081e0:	58022400 	.word	0x58022400

900081e4 <HAL_GPIO_DeInit>:
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00U)
900081e4:	2900      	cmp	r1, #0
900081e6:	f000 80a4 	beq.w	90008332 <HAL_GPIO_DeInit+0x14e>
  uint32_t position = 0x00U;
900081ea:	2300      	movs	r3, #0
{
900081ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
900081f0:	f8df 9168 	ldr.w	r9, [pc, #360]	; 9000835c <HAL_GPIO_DeInit+0x178>
900081f4:	b083      	sub	sp, #12
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
900081f6:	f8df 8168 	ldr.w	r8, [pc, #360]	; 90008360 <HAL_GPIO_DeInit+0x17c>
900081fa:	f8df a168 	ldr.w	sl, [pc, #360]	; 90008364 <HAL_GPIO_DeInit+0x180>
900081fe:	f8df b168 	ldr.w	fp, [pc, #360]	; 90008368 <HAL_GPIO_DeInit+0x184>
    iocurrent = GPIO_Pin & (1UL << position) ;
90008202:	f04f 0e01 	mov.w	lr, #1
90008206:	fa0e f203 	lsl.w	r2, lr, r3
    if (iocurrent != 0x00U)
9000820a:	ea12 0c01 	ands.w	ip, r2, r1
9000820e:	d06b      	beq.n	900082e8 <HAL_GPIO_DeInit+0x104>
      tmp = SYSCFG->EXTICR[position >> 2U];
90008210:	f023 0503 	bic.w	r5, r3, #3
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
90008214:	f003 0403 	and.w	r4, r3, #3
90008218:	260f      	movs	r6, #15
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
9000821a:	4540      	cmp	r0, r8
9000821c:	444d      	add	r5, r9
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
9000821e:	ea4f 0484 	mov.w	r4, r4, lsl #2
      tmp = SYSCFG->EXTICR[position >> 2U];
90008222:	68af      	ldr	r7, [r5, #8]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
90008224:	fa06 f604 	lsl.w	r6, r6, r4
90008228:	ea07 0706 	and.w	r7, r7, r6
9000822c:	9701      	str	r7, [sp, #4]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
9000822e:	d01f      	beq.n	90008270 <HAL_GPIO_DeInit+0x8c>
90008230:	4550      	cmp	r0, sl
90008232:	d01a      	beq.n	9000826a <HAL_GPIO_DeInit+0x86>
90008234:	4558      	cmp	r0, fp
90008236:	d05e      	beq.n	900082f6 <HAL_GPIO_DeInit+0x112>
90008238:	4f43      	ldr	r7, [pc, #268]	; (90008348 <HAL_GPIO_DeInit+0x164>)
9000823a:	42b8      	cmp	r0, r7
9000823c:	d065      	beq.n	9000830a <HAL_GPIO_DeInit+0x126>
9000823e:	4f43      	ldr	r7, [pc, #268]	; (9000834c <HAL_GPIO_DeInit+0x168>)
90008240:	42b8      	cmp	r0, r7
90008242:	d067      	beq.n	90008314 <HAL_GPIO_DeInit+0x130>
90008244:	4f42      	ldr	r7, [pc, #264]	; (90008350 <HAL_GPIO_DeInit+0x16c>)
90008246:	42b8      	cmp	r0, r7
90008248:	d05a      	beq.n	90008300 <HAL_GPIO_DeInit+0x11c>
9000824a:	4f42      	ldr	r7, [pc, #264]	; (90008354 <HAL_GPIO_DeInit+0x170>)
9000824c:	42b8      	cmp	r0, r7
9000824e:	d06b      	beq.n	90008328 <HAL_GPIO_DeInit+0x144>
90008250:	4f41      	ldr	r7, [pc, #260]	; (90008358 <HAL_GPIO_DeInit+0x174>)
90008252:	42b8      	cmp	r0, r7
90008254:	d06e      	beq.n	90008334 <HAL_GPIO_DeInit+0x150>
90008256:	f8df e114 	ldr.w	lr, [pc, #276]	; 9000836c <HAL_GPIO_DeInit+0x188>
9000825a:	4570      	cmp	r0, lr
9000825c:	d05f      	beq.n	9000831e <HAL_GPIO_DeInit+0x13a>
9000825e:	f8df e110 	ldr.w	lr, [pc, #272]	; 90008370 <HAL_GPIO_DeInit+0x18c>
90008262:	4570      	cmp	r0, lr
90008264:	d06b      	beq.n	9000833e <HAL_GPIO_DeInit+0x15a>
90008266:	f04f 0e0a 	mov.w	lr, #10
9000826a:	fa0e f404 	lsl.w	r4, lr, r4
9000826e:	e000      	b.n	90008272 <HAL_GPIO_DeInit+0x8e>
90008270:	2400      	movs	r4, #0
90008272:	9f01      	ldr	r7, [sp, #4]
90008274:	42a7      	cmp	r7, r4
90008276:	d119      	bne.n	900082ac <HAL_GPIO_DeInit+0xc8>
      {
        /* Clear EXTI line configuration for Current CPU */
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
90008278:	f04f 44b0 	mov.w	r4, #1476395008	; 0x58000000
9000827c:	f8d4 7080 	ldr.w	r7, [r4, #128]	; 0x80
90008280:	ea27 070c 	bic.w	r7, r7, ip
90008284:	f8c4 7080 	str.w	r7, [r4, #128]	; 0x80
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
90008288:	f8d4 7084 	ldr.w	r7, [r4, #132]	; 0x84
9000828c:	ea27 070c 	bic.w	r7, r7, ip
90008290:	f8c4 7084 	str.w	r7, [r4, #132]	; 0x84

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
90008294:	6867      	ldr	r7, [r4, #4]
90008296:	ea27 070c 	bic.w	r7, r7, ip
9000829a:	6067      	str	r7, [r4, #4]
        EXTI->RTSR1 &= ~(iocurrent);
9000829c:	6827      	ldr	r7, [r4, #0]
9000829e:	ea27 070c 	bic.w	r7, r7, ip
900082a2:	6027      	str	r7, [r4, #0]

        tmp = 0x0FUL << (4U * (position & 0x03U));
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
900082a4:	68ac      	ldr	r4, [r5, #8]
900082a6:	ea24 0406 	bic.w	r4, r4, r6
900082aa:	60ac      	str	r4, [r5, #8]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
900082ac:	005d      	lsls	r5, r3, #1
900082ae:	2403      	movs	r4, #3

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
900082b0:	f003 0607 	and.w	r6, r3, #7
900082b4:	270f      	movs	r7, #15
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
900082b6:	40ac      	lsls	r4, r5
900082b8:	6805      	ldr	r5, [r0, #0]
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
900082ba:	00b6      	lsls	r6, r6, #2
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
900082bc:	4325      	orrs	r5, r4
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
900082be:	40b7      	lsls	r7, r6
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
900082c0:	6005      	str	r5, [r0, #0]
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
900082c2:	08dd      	lsrs	r5, r3, #3
900082c4:	eb00 0585 	add.w	r5, r0, r5, lsl #2
900082c8:	6a2e      	ldr	r6, [r5, #32]
900082ca:	ea26 0607 	bic.w	r6, r6, r7
900082ce:	622e      	str	r6, [r5, #32]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
900082d0:	68c5      	ldr	r5, [r0, #12]
900082d2:	ea25 0504 	bic.w	r5, r5, r4
900082d6:	60c5      	str	r5, [r0, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
900082d8:	6845      	ldr	r5, [r0, #4]
900082da:	ea25 0202 	bic.w	r2, r5, r2
900082de:	6042      	str	r2, [r0, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
900082e0:	6882      	ldr	r2, [r0, #8]
900082e2:	ea22 0204 	bic.w	r2, r2, r4
900082e6:	6082      	str	r2, [r0, #8]
    }

    position++;
900082e8:	3301      	adds	r3, #1
  while ((GPIO_Pin >> position) != 0x00U)
900082ea:	fa31 f203 	lsrs.w	r2, r1, r3
900082ee:	d188      	bne.n	90008202 <HAL_GPIO_DeInit+0x1e>
  }
}
900082f0:	b003      	add	sp, #12
900082f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
900082f6:	f04f 0e02 	mov.w	lr, #2
900082fa:	fa0e f404 	lsl.w	r4, lr, r4
900082fe:	e7b8      	b.n	90008272 <HAL_GPIO_DeInit+0x8e>
90008300:	f04f 0e05 	mov.w	lr, #5
90008304:	fa0e f404 	lsl.w	r4, lr, r4
90008308:	e7b3      	b.n	90008272 <HAL_GPIO_DeInit+0x8e>
9000830a:	f04f 0e03 	mov.w	lr, #3
9000830e:	fa0e f404 	lsl.w	r4, lr, r4
90008312:	e7ae      	b.n	90008272 <HAL_GPIO_DeInit+0x8e>
90008314:	f04f 0e04 	mov.w	lr, #4
90008318:	fa0e f404 	lsl.w	r4, lr, r4
9000831c:	e7a9      	b.n	90008272 <HAL_GPIO_DeInit+0x8e>
9000831e:	f04f 0e08 	mov.w	lr, #8
90008322:	fa0e f404 	lsl.w	r4, lr, r4
90008326:	e7a4      	b.n	90008272 <HAL_GPIO_DeInit+0x8e>
90008328:	f04f 0e06 	mov.w	lr, #6
9000832c:	fa0e f404 	lsl.w	r4, lr, r4
90008330:	e79f      	b.n	90008272 <HAL_GPIO_DeInit+0x8e>
90008332:	4770      	bx	lr
90008334:	f04f 0e07 	mov.w	lr, #7
90008338:	fa0e f404 	lsl.w	r4, lr, r4
9000833c:	e799      	b.n	90008272 <HAL_GPIO_DeInit+0x8e>
9000833e:	f04f 0e09 	mov.w	lr, #9
90008342:	fa0e f404 	lsl.w	r4, lr, r4
90008346:	e794      	b.n	90008272 <HAL_GPIO_DeInit+0x8e>
90008348:	58020c00 	.word	0x58020c00
9000834c:	58021000 	.word	0x58021000
90008350:	58021400 	.word	0x58021400
90008354:	58021800 	.word	0x58021800
90008358:	58021c00 	.word	0x58021c00
9000835c:	58000400 	.word	0x58000400
90008360:	58020000 	.word	0x58020000
90008364:	58020400 	.word	0x58020400
90008368:	58020800 	.word	0x58020800
9000836c:	58022000 	.word	0x58022000
90008370:	58022400 	.word	0x58022400

90008374 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
90008374:	6903      	ldr	r3, [r0, #16]
90008376:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
90008378:	bf14      	ite	ne
9000837a:	2001      	movne	r0, #1
9000837c:	2000      	moveq	r0, #0
9000837e:	4770      	bx	lr

90008380 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
90008380:	b902      	cbnz	r2, 90008384 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
90008382:	0409      	lsls	r1, r1, #16
90008384:	6181      	str	r1, [r0, #24]
  }
}
90008386:	4770      	bx	lr

90008388 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
90008388:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
9000838a:	ea01 0203 	and.w	r2, r1, r3
9000838e:	ea21 0103 	bic.w	r1, r1, r3
90008392:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
90008396:	6181      	str	r1, [r0, #24]
}
90008398:	4770      	bx	lr
9000839a:	bf00      	nop

9000839c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
9000839c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
900083a0:	6803      	ldr	r3, [r0, #0]
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
900083a2:	f04f 0820 	mov.w	r8, #32
{
900083a6:	4605      	mov	r5, r0
900083a8:	460e      	mov	r6, r1
900083aa:	4617      	mov	r7, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
900083ac:	6998      	ldr	r0, [r3, #24]
900083ae:	f010 0902 	ands.w	r9, r0, #2
900083b2:	f040 809e 	bne.w	900084f2 <I2C_WaitOnTXISFlagUntilTimeout+0x156>
  uint32_t itflag   = hi2c->Instance->ISR;
900083b6:	699c      	ldr	r4, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
900083b8:	f014 0410 	ands.w	r4, r4, #16
900083bc:	d068      	beq.n	90008490 <I2C_WaitOnTXISFlagUntilTimeout+0xf4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
900083be:	2210      	movs	r2, #16
  uint32_t tickstart = Tickstart;
900083c0:	463c      	mov	r4, r7
  HAL_StatusTypeDef status = HAL_OK;
900083c2:	46ca      	mov	sl, r9
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
900083c4:	61da      	str	r2, [r3, #28]
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
900083c6:	1c71      	adds	r1, r6, #1
900083c8:	699a      	ldr	r2, [r3, #24]
900083ca:	d163      	bne.n	90008494 <I2C_WaitOnTXISFlagUntilTimeout+0xf8>
900083cc:	0690      	lsls	r0, r2, #26
900083ce:	f100 8093 	bmi.w	900084f8 <I2C_WaitOnTXISFlagUntilTimeout+0x15c>
900083d2:	f1ba 0f00 	cmp.w	sl, #0
900083d6:	d104      	bne.n	900083e2 <I2C_WaitOnTXISFlagUntilTimeout+0x46>
900083d8:	699c      	ldr	r4, [r3, #24]
900083da:	06a1      	lsls	r1, r4, #26
900083dc:	d5fc      	bpl.n	900083d8 <I2C_WaitOnTXISFlagUntilTimeout+0x3c>

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
900083de:	f8c3 801c 	str.w	r8, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
900083e2:	f049 0404 	orr.w	r4, r9, #4

    status = HAL_ERROR;
900083e6:	2101      	movs	r1, #1
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
900083e8:	699a      	ldr	r2, [r3, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
900083ea:	05d0      	lsls	r0, r2, #23
900083ec:	d530      	bpl.n	90008450 <I2C_WaitOnTXISFlagUntilTimeout+0xb4>
  {
    error_code |= HAL_I2C_ERROR_BERR;

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
900083ee:	f44f 7180 	mov.w	r1, #256	; 0x100

    status = HAL_ERROR;
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
900083f2:	0556      	lsls	r6, r2, #21
    error_code |= HAL_I2C_ERROR_BERR;
900083f4:	f044 0401 	orr.w	r4, r4, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
900083f8:	61d9      	str	r1, [r3, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
900083fa:	d504      	bpl.n	90008406 <I2C_WaitOnTXISFlagUntilTimeout+0x6a>
  {
    error_code |= HAL_I2C_ERROR_OVR;

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
900083fc:	f44f 6180 	mov.w	r1, #1024	; 0x400
    error_code |= HAL_I2C_ERROR_OVR;
90008400:	f044 0408 	orr.w	r4, r4, #8
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
90008404:	61d9      	str	r1, [r3, #28]

    status = HAL_ERROR;
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
90008406:	0591      	lsls	r1, r2, #22
90008408:	d504      	bpl.n	90008414 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  {
    error_code |= HAL_I2C_ERROR_ARLO;

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
9000840a:	f44f 7200 	mov.w	r2, #512	; 0x200
    error_code |= HAL_I2C_ERROR_ARLO;
9000840e:	f044 0402 	orr.w	r4, r4, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
90008412:	61da      	str	r2, [r3, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
90008414:	699a      	ldr	r2, [r3, #24]
90008416:	0790      	lsls	r0, r2, #30
90008418:	d501      	bpl.n	9000841e <I2C_WaitOnTXISFlagUntilTimeout+0x82>
    hi2c->Instance->TXDR = 0x00U;
9000841a:	2200      	movs	r2, #0
9000841c:	629a      	str	r2, [r3, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
9000841e:	699a      	ldr	r2, [r3, #24]
90008420:	07d1      	lsls	r1, r2, #31
90008422:	d403      	bmi.n	9000842c <I2C_WaitOnTXISFlagUntilTimeout+0x90>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
90008424:	699a      	ldr	r2, [r3, #24]
90008426:	f042 0201 	orr.w	r2, r2, #1
9000842a:	619a      	str	r2, [r3, #24]
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
9000842c:	685a      	ldr	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
    hi2c->State = HAL_I2C_STATE_READY;
    hi2c->Mode = HAL_I2C_MODE_NONE;
9000842e:	2100      	movs	r1, #0
    I2C_RESET_CR2(hi2c);
90008430:	4834      	ldr	r0, [pc, #208]	; (90008504 <I2C_WaitOnTXISFlagUntilTimeout+0x168>)
    hi2c->State = HAL_I2C_STATE_READY;
90008432:	2620      	movs	r6, #32
    I2C_RESET_CR2(hi2c);
90008434:	4002      	ands	r2, r0
      return HAL_ERROR;
90008436:	2001      	movs	r0, #1
    I2C_RESET_CR2(hi2c);
90008438:	605a      	str	r2, [r3, #4]
    hi2c->ErrorCode |= error_code;
9000843a:	6c6b      	ldr	r3, [r5, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
9000843c:	f885 1040 	strb.w	r1, [r5, #64]	; 0x40
    hi2c->ErrorCode |= error_code;
90008440:	4323      	orrs	r3, r4
90008442:	646b      	str	r3, [r5, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
90008444:	f885 6041 	strb.w	r6, [r5, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
90008448:	f885 1042 	strb.w	r1, [r5, #66]	; 0x42
}
9000844c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
90008450:	0550      	lsls	r0, r2, #21
90008452:	d4d3      	bmi.n	900083fc <I2C_WaitOnTXISFlagUntilTimeout+0x60>
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
90008454:	0592      	lsls	r2, r2, #22
90008456:	d4d8      	bmi.n	9000840a <I2C_WaitOnTXISFlagUntilTimeout+0x6e>
  if (status != HAL_OK)
90008458:	2900      	cmp	r1, #0
9000845a:	d1db      	bne.n	90008414 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    if (Timeout != HAL_MAX_DELAY)
9000845c:	1c72      	adds	r2, r6, #1
9000845e:	d0a5      	beq.n	900083ac <I2C_WaitOnTXISFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
90008460:	f7fe fc70 	bl	90006d44 <HAL_GetTick>
90008464:	1bc0      	subs	r0, r0, r7
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
90008466:	682b      	ldr	r3, [r5, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
90008468:	42b0      	cmp	r0, r6
9000846a:	d801      	bhi.n	90008470 <I2C_WaitOnTXISFlagUntilTimeout+0xd4>
9000846c:	2e00      	cmp	r6, #0
9000846e:	d19d      	bne.n	900083ac <I2C_WaitOnTXISFlagUntilTimeout+0x10>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
90008470:	699a      	ldr	r2, [r3, #24]
90008472:	f012 0202 	ands.w	r2, r2, #2
90008476:	d199      	bne.n	900083ac <I2C_WaitOnTXISFlagUntilTimeout+0x10>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
90008478:	6c6b      	ldr	r3, [r5, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
9000847a:	2120      	movs	r1, #32
          __HAL_UNLOCK(hi2c);
9000847c:	2001      	movs	r0, #1
9000847e:	f885 2040 	strb.w	r2, [r5, #64]	; 0x40
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
90008482:	430b      	orrs	r3, r1
90008484:	646b      	str	r3, [r5, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
90008486:	f885 1041 	strb.w	r1, [r5, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
9000848a:	f885 2042 	strb.w	r2, [r5, #66]	; 0x42
          return HAL_ERROR;
9000848e:	e7dd      	b.n	9000844c <I2C_WaitOnTXISFlagUntilTimeout+0xb0>
  HAL_StatusTypeDef status = HAL_OK;
90008490:	4621      	mov	r1, r4
90008492:	e7a9      	b.n	900083e8 <I2C_WaitOnTXISFlagUntilTimeout+0x4c>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
90008494:	0692      	lsls	r2, r2, #26
90008496:	d42f      	bmi.n	900084f8 <I2C_WaitOnTXISFlagUntilTimeout+0x15c>
90008498:	f1ba 0f00 	cmp.w	sl, #0
9000849c:	d1a1      	bne.n	900083e2 <I2C_WaitOnTXISFlagUntilTimeout+0x46>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
9000849e:	f7fe fc51 	bl	90006d44 <HAL_GetTick>
900084a2:	1b00      	subs	r0, r0, r4
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
900084a4:	682b      	ldr	r3, [r5, #0]
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
900084a6:	4286      	cmp	r6, r0
900084a8:	d301      	bcc.n	900084ae <I2C_WaitOnTXISFlagUntilTimeout+0x112>
900084aa:	2e00      	cmp	r6, #0
900084ac:	d18b      	bne.n	900083c6 <I2C_WaitOnTXISFlagUntilTimeout+0x2a>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
900084ae:	6858      	ldr	r0, [r3, #4]
          tmp2 = hi2c->Mode;
900084b0:	f895 2042 	ldrb.w	r2, [r5, #66]	; 0x42
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
900084b4:	6999      	ldr	r1, [r3, #24]
          tmp2 = hi2c->Mode;
900084b6:	b2d2      	uxtb	r2, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
900084b8:	0409      	lsls	r1, r1, #16
900084ba:	d50b      	bpl.n	900084d4 <I2C_WaitOnTXISFlagUntilTimeout+0x138>
              (tmp1 != I2C_CR2_STOP) && \
900084bc:	0441      	lsls	r1, r0, #17
900084be:	d409      	bmi.n	900084d4 <I2C_WaitOnTXISFlagUntilTimeout+0x138>
900084c0:	2a20      	cmp	r2, #32
900084c2:	d007      	beq.n	900084d4 <I2C_WaitOnTXISFlagUntilTimeout+0x138>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
900084c4:	685a      	ldr	r2, [r3, #4]
900084c6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
900084ca:	605a      	str	r2, [r3, #4]
            tickstart = HAL_GetTick();
900084cc:	f7fe fc3a 	bl	90006d44 <HAL_GetTick>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
900084d0:	682b      	ldr	r3, [r5, #0]
            tickstart = HAL_GetTick();
900084d2:	4604      	mov	r4, r0
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
900084d4:	699a      	ldr	r2, [r3, #24]
900084d6:	0690      	lsls	r0, r2, #26
900084d8:	f53f af75 	bmi.w	900083c6 <I2C_WaitOnTXISFlagUntilTimeout+0x2a>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
900084dc:	f7fe fc32 	bl	90006d44 <HAL_GetTick>
900084e0:	1b00      	subs	r0, r0, r4
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
900084e2:	682b      	ldr	r3, [r5, #0]
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
900084e4:	2819      	cmp	r0, #25
900084e6:	d9f5      	bls.n	900084d4 <I2C_WaitOnTXISFlagUntilTimeout+0x138>
              error_code |= HAL_I2C_ERROR_TIMEOUT;
900084e8:	f04f 0920 	mov.w	r9, #32
              status = HAL_ERROR;
900084ec:	f04f 0a01 	mov.w	sl, #1
900084f0:	e769      	b.n	900083c6 <I2C_WaitOnTXISFlagUntilTimeout+0x2a>
  return HAL_OK;
900084f2:	2000      	movs	r0, #0
}
900084f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (status == HAL_OK)
900084f8:	f1ba 0f00 	cmp.w	sl, #0
900084fc:	f43f af6f 	beq.w	900083de <I2C_WaitOnTXISFlagUntilTimeout+0x42>
90008500:	e76f      	b.n	900083e2 <I2C_WaitOnTXISFlagUntilTimeout+0x46>
90008502:	bf00      	nop
90008504:	fe00e800 	.word	0xfe00e800

90008508 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
90008508:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
9000850c:	4690      	mov	r8, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
9000850e:	6802      	ldr	r2, [r0, #0]
{
90008510:	460f      	mov	r7, r1
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
90008512:	6991      	ldr	r1, [r2, #24]
90008514:	068c      	lsls	r4, r1, #26
90008516:	d469      	bmi.n	900085ec <I2C_WaitOnSTOPFlagUntilTimeout+0xe4>
90008518:	4606      	mov	r6, r0
9000851a:	4613      	mov	r3, r2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
9000851c:	f04f 0910 	mov.w	r9, #16
  uint32_t itflag   = hi2c->Instance->ISR;
90008520:	6994      	ldr	r4, [r2, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
90008522:	f014 0410 	ands.w	r4, r4, #16
90008526:	d064      	beq.n	900085f2 <I2C_WaitOnSTOPFlagUntilTimeout+0xea>
  uint32_t error_code = 0;
90008528:	2500      	movs	r5, #0
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
9000852a:	4613      	mov	r3, r2
  uint32_t tickstart = Tickstart;
9000852c:	4644      	mov	r4, r8
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
9000852e:	f8c2 901c 	str.w	r9, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
90008532:	46aa      	mov	sl, r5
90008534:	1c79      	adds	r1, r7, #1
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
90008536:	699a      	ldr	r2, [r3, #24]
90008538:	d15d      	bne.n	900085f6 <I2C_WaitOnSTOPFlagUntilTimeout+0xee>
9000853a:	0690      	lsls	r0, r2, #26
9000853c:	f100 8083 	bmi.w	90008646 <I2C_WaitOnSTOPFlagUntilTimeout+0x13e>
90008540:	f1ba 0f00 	cmp.w	sl, #0
90008544:	d104      	bne.n	90008550 <I2C_WaitOnSTOPFlagUntilTimeout+0x48>
90008546:	699c      	ldr	r4, [r3, #24]
90008548:	06a1      	lsls	r1, r4, #26
9000854a:	d5fc      	bpl.n	90008546 <I2C_WaitOnSTOPFlagUntilTimeout+0x3e>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
9000854c:	2220      	movs	r2, #32
9000854e:	61da      	str	r2, [r3, #28]
    error_code |= HAL_I2C_ERROR_AF;
90008550:	f045 0404 	orr.w	r4, r5, #4
    status = HAL_ERROR;
90008554:	2101      	movs	r1, #1
  itflag = hi2c->Instance->ISR;
90008556:	699a      	ldr	r2, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
90008558:	05d0      	lsls	r0, r2, #23
9000855a:	d530      	bpl.n	900085be <I2C_WaitOnSTOPFlagUntilTimeout+0xb6>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
9000855c:	f44f 7180 	mov.w	r1, #256	; 0x100
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
90008560:	0555      	lsls	r5, r2, #21
    error_code |= HAL_I2C_ERROR_BERR;
90008562:	f044 0401 	orr.w	r4, r4, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
90008566:	61d9      	str	r1, [r3, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
90008568:	d504      	bpl.n	90008574 <I2C_WaitOnSTOPFlagUntilTimeout+0x6c>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
9000856a:	f44f 6180 	mov.w	r1, #1024	; 0x400
    error_code |= HAL_I2C_ERROR_OVR;
9000856e:	f044 0408 	orr.w	r4, r4, #8
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
90008572:	61d9      	str	r1, [r3, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
90008574:	0591      	lsls	r1, r2, #22
90008576:	d504      	bpl.n	90008582 <I2C_WaitOnSTOPFlagUntilTimeout+0x7a>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
90008578:	f44f 7200 	mov.w	r2, #512	; 0x200
    error_code |= HAL_I2C_ERROR_ARLO;
9000857c:	f044 0402 	orr.w	r4, r4, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
90008580:	61da      	str	r2, [r3, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
90008582:	699a      	ldr	r2, [r3, #24]
90008584:	0795      	lsls	r5, r2, #30
90008586:	d501      	bpl.n	9000858c <I2C_WaitOnSTOPFlagUntilTimeout+0x84>
    hi2c->Instance->TXDR = 0x00U;
90008588:	2200      	movs	r2, #0
9000858a:	629a      	str	r2, [r3, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
9000858c:	699a      	ldr	r2, [r3, #24]
9000858e:	07d0      	lsls	r0, r2, #31
90008590:	d403      	bmi.n	9000859a <I2C_WaitOnSTOPFlagUntilTimeout+0x92>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
90008592:	699a      	ldr	r2, [r3, #24]
90008594:	f042 0201 	orr.w	r2, r2, #1
90008598:	619a      	str	r2, [r3, #24]
    I2C_RESET_CR2(hi2c);
9000859a:	685a      	ldr	r2, [r3, #4]
    hi2c->Mode = HAL_I2C_MODE_NONE;
9000859c:	2100      	movs	r1, #0
    I2C_RESET_CR2(hi2c);
9000859e:	4837      	ldr	r0, [pc, #220]	; (9000867c <I2C_WaitOnSTOPFlagUntilTimeout+0x174>)
    hi2c->State = HAL_I2C_STATE_READY;
900085a0:	2520      	movs	r5, #32
    I2C_RESET_CR2(hi2c);
900085a2:	4002      	ands	r2, r0
      return HAL_ERROR;
900085a4:	2001      	movs	r0, #1
    I2C_RESET_CR2(hi2c);
900085a6:	605a      	str	r2, [r3, #4]
    hi2c->ErrorCode |= error_code;
900085a8:	6c73      	ldr	r3, [r6, #68]	; 0x44
    __HAL_UNLOCK(hi2c);
900085aa:	f886 1040 	strb.w	r1, [r6, #64]	; 0x40
    hi2c->ErrorCode |= error_code;
900085ae:	4323      	orrs	r3, r4
900085b0:	6473      	str	r3, [r6, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
900085b2:	f886 5041 	strb.w	r5, [r6, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
900085b6:	f886 1042 	strb.w	r1, [r6, #66]	; 0x42
}
900085ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
900085be:	0550      	lsls	r0, r2, #21
900085c0:	d4d3      	bmi.n	9000856a <I2C_WaitOnSTOPFlagUntilTimeout+0x62>
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
900085c2:	0592      	lsls	r2, r2, #22
900085c4:	d4d8      	bmi.n	90008578 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  if (status != HAL_OK)
900085c6:	2900      	cmp	r1, #0
900085c8:	d1db      	bne.n	90008582 <I2C_WaitOnSTOPFlagUntilTimeout+0x7a>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
900085ca:	f7fe fbbb 	bl	90006d44 <HAL_GetTick>
900085ce:	eba0 0008 	sub.w	r0, r0, r8
900085d2:	42b8      	cmp	r0, r7
900085d4:	d801      	bhi.n	900085da <I2C_WaitOnSTOPFlagUntilTimeout+0xd2>
900085d6:	2f00      	cmp	r7, #0
900085d8:	d132      	bne.n	90008640 <I2C_WaitOnSTOPFlagUntilTimeout+0x138>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
900085da:	6832      	ldr	r2, [r6, #0]
900085dc:	6991      	ldr	r1, [r2, #24]
900085de:	4613      	mov	r3, r2
900085e0:	f011 0120 	ands.w	r1, r1, #32
900085e4:	d034      	beq.n	90008650 <I2C_WaitOnSTOPFlagUntilTimeout+0x148>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
900085e6:	6991      	ldr	r1, [r2, #24]
900085e8:	0689      	lsls	r1, r1, #26
900085ea:	d599      	bpl.n	90008520 <I2C_WaitOnSTOPFlagUntilTimeout+0x18>
  return HAL_OK;
900085ec:	2000      	movs	r0, #0
}
900085ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  HAL_StatusTypeDef status = HAL_OK;
900085f2:	4621      	mov	r1, r4
900085f4:	e7af      	b.n	90008556 <I2C_WaitOnSTOPFlagUntilTimeout+0x4e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
900085f6:	0692      	lsls	r2, r2, #26
900085f8:	d425      	bmi.n	90008646 <I2C_WaitOnSTOPFlagUntilTimeout+0x13e>
900085fa:	f1ba 0f00 	cmp.w	sl, #0
900085fe:	d1a7      	bne.n	90008550 <I2C_WaitOnSTOPFlagUntilTimeout+0x48>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
90008600:	f7fe fba0 	bl	90006d44 <HAL_GetTick>
90008604:	1b00      	subs	r0, r0, r4
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
90008606:	6833      	ldr	r3, [r6, #0]
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
90008608:	4287      	cmp	r7, r0
9000860a:	d301      	bcc.n	90008610 <I2C_WaitOnSTOPFlagUntilTimeout+0x108>
9000860c:	2f00      	cmp	r7, #0
9000860e:	d191      	bne.n	90008534 <I2C_WaitOnSTOPFlagUntilTimeout+0x2c>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
90008610:	6858      	ldr	r0, [r3, #4]
          tmp2 = hi2c->Mode;
90008612:	f896 2042 	ldrb.w	r2, [r6, #66]	; 0x42
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
90008616:	6999      	ldr	r1, [r3, #24]
          tmp2 = hi2c->Mode;
90008618:	b2d2      	uxtb	r2, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
9000861a:	0409      	lsls	r1, r1, #16
9000861c:	d503      	bpl.n	90008626 <I2C_WaitOnSTOPFlagUntilTimeout+0x11e>
              (tmp1 != I2C_CR2_STOP) && \
9000861e:	0441      	lsls	r1, r0, #17
90008620:	d401      	bmi.n	90008626 <I2C_WaitOnSTOPFlagUntilTimeout+0x11e>
90008622:	2a20      	cmp	r2, #32
90008624:	d121      	bne.n	9000866a <I2C_WaitOnSTOPFlagUntilTimeout+0x162>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
90008626:	699a      	ldr	r2, [r3, #24]
90008628:	0690      	lsls	r0, r2, #26
9000862a:	d483      	bmi.n	90008534 <I2C_WaitOnSTOPFlagUntilTimeout+0x2c>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
9000862c:	f7fe fb8a 	bl	90006d44 <HAL_GetTick>
90008630:	1b00      	subs	r0, r0, r4
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
90008632:	6833      	ldr	r3, [r6, #0]
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
90008634:	2819      	cmp	r0, #25
90008636:	d9f6      	bls.n	90008626 <I2C_WaitOnSTOPFlagUntilTimeout+0x11e>
              error_code |= HAL_I2C_ERROR_TIMEOUT;
90008638:	2520      	movs	r5, #32
              status = HAL_ERROR;
9000863a:	f04f 0a01 	mov.w	sl, #1
9000863e:	e779      	b.n	90008534 <I2C_WaitOnSTOPFlagUntilTimeout+0x2c>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
90008640:	6833      	ldr	r3, [r6, #0]
90008642:	461a      	mov	r2, r3
90008644:	e7cf      	b.n	900085e6 <I2C_WaitOnSTOPFlagUntilTimeout+0xde>
    if (status == HAL_OK)
90008646:	f1ba 0f00 	cmp.w	sl, #0
9000864a:	f43f af7f 	beq.w	9000854c <I2C_WaitOnSTOPFlagUntilTimeout+0x44>
9000864e:	e77f      	b.n	90008550 <I2C_WaitOnSTOPFlagUntilTimeout+0x48>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
90008650:	6c73      	ldr	r3, [r6, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
90008652:	2220      	movs	r2, #32
          __HAL_UNLOCK(hi2c);
90008654:	2001      	movs	r0, #1
90008656:	f886 1040 	strb.w	r1, [r6, #64]	; 0x40
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
9000865a:	4313      	orrs	r3, r2
9000865c:	6473      	str	r3, [r6, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
9000865e:	f886 2041 	strb.w	r2, [r6, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
90008662:	f886 1042 	strb.w	r1, [r6, #66]	; 0x42
}
90008666:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
9000866a:	685a      	ldr	r2, [r3, #4]
9000866c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
90008670:	605a      	str	r2, [r3, #4]
            tickstart = HAL_GetTick();
90008672:	f7fe fb67 	bl	90006d44 <HAL_GetTick>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
90008676:	6833      	ldr	r3, [r6, #0]
            tickstart = HAL_GetTick();
90008678:	4604      	mov	r4, r0
9000867a:	e7d4      	b.n	90008626 <I2C_WaitOnSTOPFlagUntilTimeout+0x11e>
9000867c:	fe00e800 	.word	0xfe00e800

90008680 <HAL_I2C_MspInit>:
}
90008680:	4770      	bx	lr
90008682:	bf00      	nop

90008684 <HAL_I2C_Init>:
  if (hi2c == NULL)
90008684:	2800      	cmp	r0, #0
90008686:	d04e      	beq.n	90008726 <HAL_I2C_Init+0xa2>
{
90008688:	b510      	push	{r4, lr}
  if (hi2c->State == HAL_I2C_STATE_RESET)
9000868a:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
9000868e:	4604      	mov	r4, r0
90008690:	f003 02ff 	and.w	r2, r3, #255	; 0xff
90008694:	2b00      	cmp	r3, #0
90008696:	d041      	beq.n	9000871c <HAL_I2C_Init+0x98>
  __HAL_I2C_DISABLE(hi2c);
90008698:	6823      	ldr	r3, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
9000869a:	2124      	movs	r1, #36	; 0x24
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
9000869c:	6862      	ldr	r2, [r4, #4]
  hi2c->State = HAL_I2C_STATE_BUSY;
9000869e:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
900086a2:	6819      	ldr	r1, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
900086a4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
900086a8:	68e0      	ldr	r0, [r4, #12]
  __HAL_I2C_DISABLE(hi2c);
900086aa:	f021 0101 	bic.w	r1, r1, #1
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
900086ae:	2801      	cmp	r0, #1
  __HAL_I2C_DISABLE(hi2c);
900086b0:	6019      	str	r1, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
900086b2:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
900086b4:	689a      	ldr	r2, [r3, #8]
900086b6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
900086ba:	609a      	str	r2, [r3, #8]
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
900086bc:	68a2      	ldr	r2, [r4, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
900086be:	d029      	beq.n	90008714 <HAL_I2C_Init+0x90>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
900086c0:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
900086c4:	2802      	cmp	r0, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
900086c6:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
900086c8:	d102      	bne.n	900086d0 <HAL_I2C_Init+0x4c>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
900086ca:	f44f 6200 	mov.w	r2, #2048	; 0x800
900086ce:	605a      	str	r2, [r3, #4]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
900086d0:	6858      	ldr	r0, [r3, #4]
  hi2c->State = HAL_I2C_STATE_READY;
900086d2:	f04f 0c20 	mov.w	ip, #32
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
900086d6:	4915      	ldr	r1, [pc, #84]	; (9000872c <HAL_I2C_Init+0xa8>)
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
900086d8:	6922      	ldr	r2, [r4, #16]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
900086da:	4301      	orrs	r1, r0
900086dc:	6059      	str	r1, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
900086de:	68d9      	ldr	r1, [r3, #12]
900086e0:	f421 4100 	bic.w	r1, r1, #32768	; 0x8000
900086e4:	60d9      	str	r1, [r3, #12]
                          (hi2c->Init.OwnAddress2Masks << 8));
900086e6:	e9d4 0105 	ldrd	r0, r1, [r4, #20]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
900086ea:	4302      	orrs	r2, r0
900086ec:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
900086f0:	e9d4 1007 	ldrd	r1, r0, [r4, #28]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
900086f4:	60da      	str	r2, [r3, #12]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
900086f6:	2200      	movs	r2, #0
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
900086f8:	4301      	orrs	r1, r0
  return HAL_OK;
900086fa:	4610      	mov	r0, r2
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
900086fc:	6019      	str	r1, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
900086fe:	6819      	ldr	r1, [r3, #0]
90008700:	f041 0101 	orr.w	r1, r1, #1
90008704:	6019      	str	r1, [r3, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
90008706:	6462      	str	r2, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
90008708:	f884 c041 	strb.w	ip, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
9000870c:	6322      	str	r2, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
9000870e:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
}
90008712:	bd10      	pop	{r4, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
90008714:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
90008718:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
9000871a:	e7d9      	b.n	900086d0 <HAL_I2C_Init+0x4c>
    hi2c->Lock = HAL_UNLOCKED;
9000871c:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
90008720:	f7ff ffae 	bl	90008680 <HAL_I2C_MspInit>
90008724:	e7b8      	b.n	90008698 <HAL_I2C_Init+0x14>
    return HAL_ERROR;
90008726:	2001      	movs	r0, #1
}
90008728:	4770      	bx	lr
9000872a:	bf00      	nop
9000872c:	02008000 	.word	0x02008000

90008730 <HAL_I2C_MspDeInit>:
90008730:	4770      	bx	lr
90008732:	bf00      	nop

90008734 <HAL_I2C_DeInit>:
  if (hi2c == NULL)
90008734:	b1b0      	cbz	r0, 90008764 <HAL_I2C_DeInit+0x30>
  __HAL_I2C_DISABLE(hi2c);
90008736:	6802      	ldr	r2, [r0, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
90008738:	2324      	movs	r3, #36	; 0x24
{
9000873a:	b510      	push	{r4, lr}
  hi2c->State = HAL_I2C_STATE_BUSY;
9000873c:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
90008740:	4604      	mov	r4, r0
  __HAL_I2C_DISABLE(hi2c);
90008742:	6813      	ldr	r3, [r2, #0]
90008744:	f023 0301 	bic.w	r3, r3, #1
90008748:	6013      	str	r3, [r2, #0]
  HAL_I2C_MspDeInit(hi2c);
9000874a:	f7ff fff1 	bl	90008730 <HAL_I2C_MspDeInit>
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
9000874e:	2300      	movs	r3, #0
90008750:	6463      	str	r3, [r4, #68]	; 0x44
  return HAL_OK;
90008752:	4618      	mov	r0, r3
  hi2c->State = HAL_I2C_STATE_RESET;
90008754:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_UNLOCK(hi2c);
90008758:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
  hi2c->PreviousState = I2C_STATE_NONE;
9000875c:	6323      	str	r3, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
9000875e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
}
90008762:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
90008764:	2001      	movs	r0, #1
}
90008766:	4770      	bx	lr

90008768 <HAL_I2C_Mem_Write>:
{
90008768:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
9000876c:	4698      	mov	r8, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
9000876e:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
90008772:	f8bd a024 	ldrh.w	sl, [sp, #36]	; 0x24
  if (hi2c->State == HAL_I2C_STATE_READY)
90008776:	2b20      	cmp	r3, #32
{
90008778:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  if (hi2c->State == HAL_I2C_STATE_READY)
9000877a:	d132      	bne.n	900087e2 <HAL_I2C_Mem_Write+0x7a>
    if ((pData == NULL) || (Size == 0U))
9000877c:	9b08      	ldr	r3, [sp, #32]
9000877e:	4604      	mov	r4, r0
90008780:	b34b      	cbz	r3, 900087d6 <HAL_I2C_Mem_Write+0x6e>
90008782:	f1ba 0f00 	cmp.w	sl, #0
90008786:	d026      	beq.n	900087d6 <HAL_I2C_Mem_Write+0x6e>
    __HAL_LOCK(hi2c);
90008788:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
9000878c:	2b01      	cmp	r3, #1
9000878e:	d028      	beq.n	900087e2 <HAL_I2C_Mem_Write+0x7a>
90008790:	2301      	movs	r3, #1
90008792:	460e      	mov	r6, r1
90008794:	4691      	mov	r9, r2
90008796:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
9000879a:	f7fe fad3 	bl	90006d44 <HAL_GetTick>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
9000879e:	6823      	ldr	r3, [r4, #0]
    tickstart = HAL_GetTick();
900087a0:	4605      	mov	r5, r0
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
900087a2:	699a      	ldr	r2, [r3, #24]
900087a4:	0411      	lsls	r1, r2, #16
900087a6:	d51f      	bpl.n	900087e8 <HAL_I2C_Mem_Write+0x80>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
900087a8:	f7fe facc 	bl	90006d44 <HAL_GetTick>
900087ac:	1b40      	subs	r0, r0, r5
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
900087ae:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
900087b0:	2819      	cmp	r0, #25
900087b2:	d9f6      	bls.n	900087a2 <HAL_I2C_Mem_Write+0x3a>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
900087b4:	699a      	ldr	r2, [r3, #24]
900087b6:	0412      	lsls	r2, r2, #16
900087b8:	d5f3      	bpl.n	900087a2 <HAL_I2C_Mem_Write+0x3a>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
900087ba:	6c63      	ldr	r3, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
900087bc:	2120      	movs	r1, #32
          hi2c->Mode = HAL_I2C_MODE_NONE;
900087be:	2200      	movs	r2, #0
      return HAL_ERROR;
900087c0:	2001      	movs	r0, #1
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
900087c2:	430b      	orrs	r3, r1
          __HAL_UNLOCK(hi2c);
900087c4:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
900087c8:	6463      	str	r3, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
900087ca:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
900087ce:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
}
900087d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
900087d6:	f44f 7300 	mov.w	r3, #512	; 0x200
      return  HAL_ERROR;
900087da:	2001      	movs	r0, #1
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
900087dc:	6463      	str	r3, [r4, #68]	; 0x44
}
900087de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return HAL_BUSY;
900087e2:	2002      	movs	r0, #2
}
900087e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    hi2c->pBuffPtr  = pData;
900087e8:	9a08      	ldr	r2, [sp, #32]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
900087ea:	2121      	movs	r1, #33	; 0x21
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
900087ec:	f3c6 0609 	ubfx	r6, r6, #0, #10
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
900087f0:	4620      	mov	r0, r4
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
900087f2:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
900087f6:	2140      	movs	r1, #64	; 0x40
    hi2c->pBuffPtr  = pData;
900087f8:	6262      	str	r2, [r4, #36]	; 0x24
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
900087fa:	2200      	movs	r2, #0
    hi2c->Mode      = HAL_I2C_MODE_MEM;
900087fc:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
    hi2c->XferISR   = NULL;
90008800:	6362      	str	r2, [r4, #52]	; 0x34
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
90008802:	6462      	str	r2, [r4, #68]	; 0x44
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
90008804:	496d      	ldr	r1, [pc, #436]	; (900089bc <HAL_I2C_Mem_Write+0x254>)
    hi2c->XferCount = Size;
90008806:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
  MODIFY_REG(hi2c->Instance->CR2, \
9000880a:	685a      	ldr	r2, [r3, #4]
9000880c:	400a      	ands	r2, r1
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
9000880e:	fa5f f188 	uxtb.w	r1, r8
  MODIFY_REG(hi2c->Instance->CR2, \
90008812:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
90008816:	496a      	ldr	r1, [pc, #424]	; (900089c0 <HAL_I2C_Mem_Write+0x258>)
90008818:	4332      	orrs	r2, r6
9000881a:	4311      	orrs	r1, r2
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
9000881c:	462a      	mov	r2, r5
  MODIFY_REG(hi2c->Instance->CR2, \
9000881e:	6059      	str	r1, [r3, #4]
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
90008820:	4639      	mov	r1, r7
90008822:	f7ff fdbb 	bl	9000839c <I2C_WaitOnTXISFlagUntilTimeout>
90008826:	2800      	cmp	r0, #0
90008828:	d175      	bne.n	90008916 <HAL_I2C_Mem_Write+0x1ae>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
9000882a:	f1b8 0f01 	cmp.w	r8, #1
9000882e:	d00a      	beq.n	90008846 <HAL_I2C_Mem_Write+0xde>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
90008830:	ea4f 2219 	mov.w	r2, r9, lsr #8
90008834:	6823      	ldr	r3, [r4, #0]
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
90008836:	4639      	mov	r1, r7
90008838:	4620      	mov	r0, r4
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
9000883a:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
9000883c:	462a      	mov	r2, r5
9000883e:	f7ff fdad 	bl	9000839c <I2C_WaitOnTXISFlagUntilTimeout>
90008842:	2800      	cmp	r0, #0
90008844:	d167      	bne.n	90008916 <HAL_I2C_Mem_Write+0x1ae>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
90008846:	fa5f f389 	uxtb.w	r3, r9
9000884a:	6822      	ldr	r2, [r4, #0]
9000884c:	6293      	str	r3, [r2, #40]	; 0x28
9000884e:	1c78      	adds	r0, r7, #1
90008850:	d14a      	bne.n	900088e8 <HAL_I2C_Mem_Write+0x180>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
90008852:	6993      	ldr	r3, [r2, #24]
90008854:	0619      	lsls	r1, r3, #24
90008856:	d5fc      	bpl.n	90008852 <HAL_I2C_Mem_Write+0xea>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
90008858:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
9000885a:	b29b      	uxth	r3, r3
9000885c:	2bff      	cmp	r3, #255	; 0xff
9000885e:	f240 808a 	bls.w	90008976 <HAL_I2C_Mem_Write+0x20e>
  MODIFY_REG(hi2c->Instance->CR2, \
90008862:	6853      	ldr	r3, [r2, #4]
90008864:	4957      	ldr	r1, [pc, #348]	; (900089c4 <HAL_I2C_Mem_Write+0x25c>)
90008866:	400b      	ands	r3, r1
90008868:	4957      	ldr	r1, [pc, #348]	; (900089c8 <HAL_I2C_Mem_Write+0x260>)
9000886a:	4333      	orrs	r3, r6
9000886c:	4319      	orrs	r1, r3
      hi2c->XferSize = MAX_NBYTE_SIZE;
9000886e:	23ff      	movs	r3, #255	; 0xff
90008870:	8523      	strh	r3, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
90008872:	6051      	str	r1, [r2, #4]
90008874:	f8df 814c 	ldr.w	r8, [pc, #332]	; 900089c4 <HAL_I2C_Mem_Write+0x25c>
          hi2c->XferSize = MAX_NBYTE_SIZE;
90008878:	f04f 0aff 	mov.w	sl, #255	; 0xff
  MODIFY_REG(hi2c->Instance->CR2, \
9000887c:	f8df 9148 	ldr.w	r9, [pc, #328]	; 900089c8 <HAL_I2C_Mem_Write+0x260>
90008880:	e004      	b.n	9000888c <HAL_I2C_Mem_Write+0x124>
    } while (hi2c->XferCount > 0U);
90008882:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
90008884:	b29b      	uxth	r3, r3
90008886:	2b00      	cmp	r3, #0
90008888:	f000 8083 	beq.w	90008992 <HAL_I2C_Mem_Write+0x22a>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
9000888c:	462a      	mov	r2, r5
9000888e:	4639      	mov	r1, r7
90008890:	4620      	mov	r0, r4
90008892:	f7ff fd83 	bl	9000839c <I2C_WaitOnTXISFlagUntilTimeout>
90008896:	2800      	cmp	r0, #0
90008898:	d16b      	bne.n	90008972 <HAL_I2C_Mem_Write+0x20a>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
9000889a:	6a62      	ldr	r2, [r4, #36]	; 0x24
9000889c:	6821      	ldr	r1, [r4, #0]
9000889e:	f812 0b01 	ldrb.w	r0, [r2], #1
      hi2c->XferSize--;
900088a2:	8d23      	ldrh	r3, [r4, #40]	; 0x28
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
900088a4:	6288      	str	r0, [r1, #40]	; 0x28
      hi2c->pBuffPtr++;
900088a6:	6262      	str	r2, [r4, #36]	; 0x24
      hi2c->XferSize--;
900088a8:	3b01      	subs	r3, #1
      hi2c->XferCount--;
900088aa:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      hi2c->XferSize--;
900088ac:	b29b      	uxth	r3, r3
      hi2c->XferCount--;
900088ae:	3a01      	subs	r2, #1
      hi2c->XferSize--;
900088b0:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
900088b2:	b292      	uxth	r2, r2
900088b4:	8562      	strh	r2, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
900088b6:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
900088b8:	b292      	uxth	r2, r2
900088ba:	2a00      	cmp	r2, #0
900088bc:	d0e1      	beq.n	90008882 <HAL_I2C_Mem_Write+0x11a>
900088be:	2b00      	cmp	r3, #0
900088c0:	d1df      	bne.n	90008882 <HAL_I2C_Mem_Write+0x11a>
900088c2:	1c78      	adds	r0, r7, #1
900088c4:	d12c      	bne.n	90008920 <HAL_I2C_Mem_Write+0x1b8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
900088c6:	698b      	ldr	r3, [r1, #24]
900088c8:	061a      	lsls	r2, r3, #24
900088ca:	d5fc      	bpl.n	900088c6 <HAL_I2C_Mem_Write+0x15e>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
900088cc:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
900088ce:	b29b      	uxth	r3, r3
900088d0:	2bff      	cmp	r3, #255	; 0xff
900088d2:	d940      	bls.n	90008956 <HAL_I2C_Mem_Write+0x1ee>
  MODIFY_REG(hi2c->Instance->CR2, \
900088d4:	684b      	ldr	r3, [r1, #4]
          hi2c->XferSize = MAX_NBYTE_SIZE;
900088d6:	f8a4 a028 	strh.w	sl, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
900088da:	ea03 0308 	and.w	r3, r3, r8
900088de:	4333      	orrs	r3, r6
900088e0:	ea43 0309 	orr.w	r3, r3, r9
900088e4:	604b      	str	r3, [r1, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
900088e6:	e7cc      	b.n	90008882 <HAL_I2C_Mem_Write+0x11a>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
900088e8:	6993      	ldr	r3, [r2, #24]
900088ea:	061b      	lsls	r3, r3, #24
900088ec:	d4b4      	bmi.n	90008858 <HAL_I2C_Mem_Write+0xf0>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
900088ee:	f7fe fa29 	bl	90006d44 <HAL_GetTick>
900088f2:	1b40      	subs	r0, r0, r5
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
900088f4:	6822      	ldr	r2, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
900088f6:	4287      	cmp	r7, r0
900088f8:	d301      	bcc.n	900088fe <HAL_I2C_Mem_Write+0x196>
900088fa:	2f00      	cmp	r7, #0
900088fc:	d1a7      	bne.n	9000884e <HAL_I2C_Mem_Write+0xe6>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
900088fe:	6993      	ldr	r3, [r2, #24]
90008900:	f013 0380 	ands.w	r3, r3, #128	; 0x80
90008904:	d1a3      	bne.n	9000884e <HAL_I2C_Mem_Write+0xe6>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
90008906:	6c62      	ldr	r2, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
90008908:	2120      	movs	r1, #32
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
9000890a:	430a      	orrs	r2, r1
9000890c:	6462      	str	r2, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
9000890e:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
90008912:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
90008916:	2300      	movs	r3, #0
      return HAL_ERROR;
90008918:	2001      	movs	r0, #1
      __HAL_UNLOCK(hi2c);
9000891a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
9000891e:	e75e      	b.n	900087de <HAL_I2C_Mem_Write+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
90008920:	698b      	ldr	r3, [r1, #24]
90008922:	061b      	lsls	r3, r3, #24
90008924:	d4d2      	bmi.n	900088cc <HAL_I2C_Mem_Write+0x164>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
90008926:	f7fe fa0d 	bl	90006d44 <HAL_GetTick>
9000892a:	1b40      	subs	r0, r0, r5
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
9000892c:	6821      	ldr	r1, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
9000892e:	4287      	cmp	r7, r0
90008930:	d301      	bcc.n	90008936 <HAL_I2C_Mem_Write+0x1ce>
90008932:	2f00      	cmp	r7, #0
90008934:	d1c5      	bne.n	900088c2 <HAL_I2C_Mem_Write+0x15a>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
90008936:	698b      	ldr	r3, [r1, #24]
90008938:	f013 0380 	ands.w	r3, r3, #128	; 0x80
9000893c:	d1c1      	bne.n	900088c2 <HAL_I2C_Mem_Write+0x15a>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
9000893e:	6c62      	ldr	r2, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
90008940:	2120      	movs	r1, #32
          return HAL_ERROR;
90008942:	2001      	movs	r0, #1
          __HAL_UNLOCK(hi2c);
90008944:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
90008948:	430a      	orrs	r2, r1
9000894a:	6462      	str	r2, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
9000894c:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
90008950:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
          return HAL_ERROR;
90008954:	e743      	b.n	900087de <HAL_I2C_Mem_Write+0x76>
          hi2c->XferSize = hi2c->XferCount;
90008956:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
90008958:	b29b      	uxth	r3, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
9000895a:	b2da      	uxtb	r2, r3
          hi2c->XferSize = hi2c->XferCount;
9000895c:	8523      	strh	r3, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
9000895e:	684b      	ldr	r3, [r1, #4]
90008960:	ea03 0308 	and.w	r3, r3, r8
90008964:	4333      	orrs	r3, r6
90008966:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
9000896a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
9000896e:	604b      	str	r3, [r1, #4]
}
90008970:	e787      	b.n	90008882 <HAL_I2C_Mem_Write+0x11a>
        return HAL_ERROR;
90008972:	2001      	movs	r0, #1
90008974:	e733      	b.n	900087de <HAL_I2C_Mem_Write+0x76>
      hi2c->XferSize = hi2c->XferCount;
90008976:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
  MODIFY_REG(hi2c->Instance->CR2, \
90008978:	4812      	ldr	r0, [pc, #72]	; (900089c4 <HAL_I2C_Mem_Write+0x25c>)
      hi2c->XferSize = hi2c->XferCount;
9000897a:	b29b      	uxth	r3, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
9000897c:	b2d9      	uxtb	r1, r3
      hi2c->XferSize = hi2c->XferCount;
9000897e:	8523      	strh	r3, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
90008980:	6853      	ldr	r3, [r2, #4]
90008982:	4003      	ands	r3, r0
90008984:	4333      	orrs	r3, r6
90008986:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
9000898a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
9000898e:	6053      	str	r3, [r2, #4]
}
90008990:	e770      	b.n	90008874 <HAL_I2C_Mem_Write+0x10c>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
90008992:	462a      	mov	r2, r5
90008994:	4639      	mov	r1, r7
90008996:	4620      	mov	r0, r4
90008998:	f7ff fdb6 	bl	90008508 <I2C_WaitOnSTOPFlagUntilTimeout>
9000899c:	2800      	cmp	r0, #0
9000899e:	d1e8      	bne.n	90008972 <HAL_I2C_Mem_Write+0x20a>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
900089a0:	6823      	ldr	r3, [r4, #0]
900089a2:	2120      	movs	r1, #32
    I2C_RESET_CR2(hi2c);
900089a4:	4d09      	ldr	r5, [pc, #36]	; (900089cc <HAL_I2C_Mem_Write+0x264>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
900089a6:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
900089a8:	685a      	ldr	r2, [r3, #4]
900089aa:	402a      	ands	r2, r5
900089ac:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
900089ae:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
900089b2:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
900089b6:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
900089ba:	e710      	b.n	900087de <HAL_I2C_Mem_Write+0x76>
900089bc:	fc009800 	.word	0xfc009800
900089c0:	01002000 	.word	0x01002000
900089c4:	fc009c00 	.word	0xfc009c00
900089c8:	01ff0000 	.word	0x01ff0000
900089cc:	fe00e800 	.word	0xfe00e800

900089d0 <HAL_I2C_Mem_Read>:
{
900089d0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
900089d4:	461c      	mov	r4, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
900089d6:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
900089da:	f8bd 902c 	ldrh.w	r9, [sp, #44]	; 0x2c
  if (hi2c->State == HAL_I2C_STATE_READY)
900089de:	2b20      	cmp	r3, #32
{
900089e0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
  if (hi2c->State == HAL_I2C_STATE_READY)
900089e2:	d137      	bne.n	90008a54 <HAL_I2C_Mem_Read+0x84>
    if ((pData == NULL) || (Size == 0U))
900089e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
900089e6:	4683      	mov	fp, r0
900089e8:	b36b      	cbz	r3, 90008a46 <HAL_I2C_Mem_Read+0x76>
900089ea:	f1b9 0f00 	cmp.w	r9, #0
900089ee:	d02a      	beq.n	90008a46 <HAL_I2C_Mem_Read+0x76>
    __HAL_LOCK(hi2c);
900089f0:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
900089f4:	2b01      	cmp	r3, #1
900089f6:	d02d      	beq.n	90008a54 <HAL_I2C_Mem_Read+0x84>
900089f8:	2301      	movs	r3, #1
900089fa:	460f      	mov	r7, r1
900089fc:	4690      	mov	r8, r2
900089fe:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
90008a02:	f7fe f99f 	bl	90006d44 <HAL_GetTick>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
90008a06:	f8db 3000 	ldr.w	r3, [fp]
    tickstart = HAL_GetTick();
90008a0a:	4606      	mov	r6, r0
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
90008a0c:	699a      	ldr	r2, [r3, #24]
90008a0e:	0410      	lsls	r0, r2, #16
90008a10:	d523      	bpl.n	90008a5a <HAL_I2C_Mem_Read+0x8a>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
90008a12:	f7fe f997 	bl	90006d44 <HAL_GetTick>
90008a16:	1b80      	subs	r0, r0, r6
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
90008a18:	f8db 3000 	ldr.w	r3, [fp]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
90008a1c:	2819      	cmp	r0, #25
90008a1e:	d9f5      	bls.n	90008a0c <HAL_I2C_Mem_Read+0x3c>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
90008a20:	699a      	ldr	r2, [r3, #24]
90008a22:	0411      	lsls	r1, r2, #16
90008a24:	d5f2      	bpl.n	90008a0c <HAL_I2C_Mem_Read+0x3c>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
90008a26:	f8db 3044 	ldr.w	r3, [fp, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
90008a2a:	2120      	movs	r1, #32
          hi2c->Mode = HAL_I2C_MODE_NONE;
90008a2c:	2200      	movs	r2, #0
      return HAL_ERROR;
90008a2e:	2001      	movs	r0, #1
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
90008a30:	430b      	orrs	r3, r1
          __HAL_UNLOCK(hi2c);
90008a32:	f88b 2040 	strb.w	r2, [fp, #64]	; 0x40
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
90008a36:	f8cb 3044 	str.w	r3, [fp, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
90008a3a:	f88b 1041 	strb.w	r1, [fp, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
90008a3e:	f88b 2042 	strb.w	r2, [fp, #66]	; 0x42
}
90008a42:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
90008a46:	f44f 7300 	mov.w	r3, #512	; 0x200
      return  HAL_ERROR;
90008a4a:	2001      	movs	r0, #1
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
90008a4c:	f8cb 3044 	str.w	r3, [fp, #68]	; 0x44
}
90008a50:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return HAL_BUSY;
90008a54:	2002      	movs	r0, #2
}
90008a56:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    hi2c->pBuffPtr  = pData;
90008a5a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
90008a5c:	2122      	movs	r1, #34	; 0x22
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
90008a5e:	f3c7 0709 	ubfx	r7, r7, #0, #10
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
90008a62:	4658      	mov	r0, fp
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
90008a64:	f88b 1041 	strb.w	r1, [fp, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
90008a68:	2140      	movs	r1, #64	; 0x40
    hi2c->pBuffPtr  = pData;
90008a6a:	f8cb 2024 	str.w	r2, [fp, #36]	; 0x24
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
90008a6e:	2200      	movs	r2, #0
    hi2c->Mode      = HAL_I2C_MODE_MEM;
90008a70:	f88b 1042 	strb.w	r1, [fp, #66]	; 0x42
    hi2c->XferISR   = NULL;
90008a74:	f8cb 2034 	str.w	r2, [fp, #52]	; 0x34
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
90008a78:	f8cb 2044 	str.w	r2, [fp, #68]	; 0x44
  MODIFY_REG(hi2c->Instance->CR2, \
90008a7c:	4983      	ldr	r1, [pc, #524]	; (90008c8c <HAL_I2C_Mem_Read+0x2bc>)
    hi2c->XferCount = Size;
90008a7e:	f8ab 902a 	strh.w	r9, [fp, #42]	; 0x2a
  MODIFY_REG(hi2c->Instance->CR2, \
90008a82:	685a      	ldr	r2, [r3, #4]
90008a84:	400a      	ands	r2, r1
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
90008a86:	b2e1      	uxtb	r1, r4
  MODIFY_REG(hi2c->Instance->CR2, \
90008a88:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
90008a8c:	4629      	mov	r1, r5
  MODIFY_REG(hi2c->Instance->CR2, \
90008a8e:	433a      	orrs	r2, r7
90008a90:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
90008a94:	605a      	str	r2, [r3, #4]
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
90008a96:	4632      	mov	r2, r6
90008a98:	f7ff fc80 	bl	9000839c <I2C_WaitOnTXISFlagUntilTimeout>
90008a9c:	2800      	cmp	r0, #0
90008a9e:	f040 8091 	bne.w	90008bc4 <HAL_I2C_Mem_Read+0x1f4>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
90008aa2:	2c01      	cmp	r4, #1
90008aa4:	d00c      	beq.n	90008ac0 <HAL_I2C_Mem_Read+0xf0>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
90008aa6:	ea4f 2218 	mov.w	r2, r8, lsr #8
90008aaa:	f8db 3000 	ldr.w	r3, [fp]
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
90008aae:	4629      	mov	r1, r5
90008ab0:	4658      	mov	r0, fp
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
90008ab2:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
90008ab4:	4632      	mov	r2, r6
90008ab6:	f7ff fc71 	bl	9000839c <I2C_WaitOnTXISFlagUntilTimeout>
90008aba:	2800      	cmp	r0, #0
90008abc:	f040 8082 	bne.w	90008bc4 <HAL_I2C_Mem_Read+0x1f4>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
90008ac0:	fa5f f388 	uxtb.w	r3, r8
90008ac4:	f8db 4000 	ldr.w	r4, [fp]
90008ac8:	62a3      	str	r3, [r4, #40]	; 0x28
90008aca:	1c6a      	adds	r2, r5, #1
90008acc:	d160      	bne.n	90008b90 <HAL_I2C_Mem_Read+0x1c0>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
90008ace:	69a3      	ldr	r3, [r4, #24]
90008ad0:	065b      	lsls	r3, r3, #25
90008ad2:	d5fc      	bpl.n	90008ace <HAL_I2C_Mem_Read+0xfe>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
90008ad4:	f8bb 302a 	ldrh.w	r3, [fp, #42]	; 0x2a
90008ad8:	b29b      	uxth	r3, r3
90008ada:	2bff      	cmp	r3, #255	; 0xff
90008adc:	f240 80ae 	bls.w	90008c3c <HAL_I2C_Mem_Read+0x26c>
  MODIFY_REG(hi2c->Instance->CR2, \
90008ae0:	6863      	ldr	r3, [r4, #4]
90008ae2:	4a6a      	ldr	r2, [pc, #424]	; (90008c8c <HAL_I2C_Mem_Read+0x2bc>)
90008ae4:	4013      	ands	r3, r2
90008ae6:	4a6a      	ldr	r2, [pc, #424]	; (90008c90 <HAL_I2C_Mem_Read+0x2c0>)
90008ae8:	433b      	orrs	r3, r7
90008aea:	431a      	orrs	r2, r3
      hi2c->XferSize = MAX_NBYTE_SIZE;
90008aec:	23ff      	movs	r3, #255	; 0xff
90008aee:	f8ab 3028 	strh.w	r3, [fp, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
90008af2:	6062      	str	r2, [r4, #4]
90008af4:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 90008c9c <HAL_I2C_Mem_Read+0x2cc>
          hi2c->XferSize = MAX_NBYTE_SIZE;
90008af8:	f04f 0aff 	mov.w	sl, #255	; 0xff
  MODIFY_REG(hi2c->Instance->CR2, \
90008afc:	f8df 91a0 	ldr.w	r9, [pc, #416]	; 90008ca0 <HAL_I2C_Mem_Read+0x2d0>
90008b00:	1c69      	adds	r1, r5, #1
90008b02:	d127      	bne.n	90008b54 <HAL_I2C_Mem_Read+0x184>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
90008b04:	69a3      	ldr	r3, [r4, #24]
90008b06:	075a      	lsls	r2, r3, #29
90008b08:	d5fc      	bpl.n	90008b04 <HAL_I2C_Mem_Read+0x134>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
90008b0a:	6a62      	ldr	r2, [r4, #36]	; 0x24
90008b0c:	f8db 3024 	ldr.w	r3, [fp, #36]	; 0x24
90008b10:	701a      	strb	r2, [r3, #0]
      hi2c->XferCount--;
90008b12:	f8bb 202a 	ldrh.w	r2, [fp, #42]	; 0x2a
      hi2c->pBuffPtr++;
90008b16:	f8db 3024 	ldr.w	r3, [fp, #36]	; 0x24
      hi2c->XferCount--;
90008b1a:	3a01      	subs	r2, #1
      hi2c->pBuffPtr++;
90008b1c:	3301      	adds	r3, #1
      hi2c->XferCount--;
90008b1e:	b292      	uxth	r2, r2
      hi2c->pBuffPtr++;
90008b20:	f8cb 3024 	str.w	r3, [fp, #36]	; 0x24
      hi2c->XferSize--;
90008b24:	f8bb 3028 	ldrh.w	r3, [fp, #40]	; 0x28
      hi2c->XferCount--;
90008b28:	f8ab 202a 	strh.w	r2, [fp, #42]	; 0x2a
      hi2c->XferSize--;
90008b2c:	3b01      	subs	r3, #1
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
90008b2e:	f8bb 202a 	ldrh.w	r2, [fp, #42]	; 0x2a
      hi2c->XferSize--;
90008b32:	b29b      	uxth	r3, r3
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
90008b34:	b292      	uxth	r2, r2
      hi2c->XferSize--;
90008b36:	f8ab 3028 	strh.w	r3, [fp, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
90008b3a:	b10a      	cbz	r2, 90008b40 <HAL_I2C_Mem_Read+0x170>
90008b3c:	2b00      	cmp	r3, #0
90008b3e:	d046      	beq.n	90008bce <HAL_I2C_Mem_Read+0x1fe>
    } while (hi2c->XferCount > 0U);
90008b40:	f8bb 302a 	ldrh.w	r3, [fp, #42]	; 0x2a
90008b44:	b29b      	uxth	r3, r3
90008b46:	2b00      	cmp	r3, #0
90008b48:	f000 8088 	beq.w	90008c5c <HAL_I2C_Mem_Read+0x28c>
90008b4c:	1c69      	adds	r1, r5, #1
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
90008b4e:	f8db 4000 	ldr.w	r4, [fp]
90008b52:	d0d7      	beq.n	90008b04 <HAL_I2C_Mem_Read+0x134>
90008b54:	69a3      	ldr	r3, [r4, #24]
90008b56:	075b      	lsls	r3, r3, #29
90008b58:	d4d7      	bmi.n	90008b0a <HAL_I2C_Mem_Read+0x13a>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
90008b5a:	f7fe f8f3 	bl	90006d44 <HAL_GetTick>
90008b5e:	1b80      	subs	r0, r0, r6
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
90008b60:	f8db 4000 	ldr.w	r4, [fp]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
90008b64:	4285      	cmp	r5, r0
90008b66:	d301      	bcc.n	90008b6c <HAL_I2C_Mem_Read+0x19c>
90008b68:	2d00      	cmp	r5, #0
90008b6a:	d1c9      	bne.n	90008b00 <HAL_I2C_Mem_Read+0x130>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
90008b6c:	69a3      	ldr	r3, [r4, #24]
90008b6e:	f013 0304 	ands.w	r3, r3, #4
90008b72:	d1c5      	bne.n	90008b00 <HAL_I2C_Mem_Read+0x130>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
90008b74:	f8db 2044 	ldr.w	r2, [fp, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
90008b78:	2120      	movs	r1, #32
          return HAL_ERROR;
90008b7a:	2001      	movs	r0, #1
          __HAL_UNLOCK(hi2c);
90008b7c:	f88b 3040 	strb.w	r3, [fp, #64]	; 0x40
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
90008b80:	430a      	orrs	r2, r1
90008b82:	f8cb 2044 	str.w	r2, [fp, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
90008b86:	f88b 1041 	strb.w	r1, [fp, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
90008b8a:	f88b 3042 	strb.w	r3, [fp, #66]	; 0x42
          return HAL_ERROR;
90008b8e:	e75f      	b.n	90008a50 <HAL_I2C_Mem_Read+0x80>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
90008b90:	69a3      	ldr	r3, [r4, #24]
90008b92:	0658      	lsls	r0, r3, #25
90008b94:	d49e      	bmi.n	90008ad4 <HAL_I2C_Mem_Read+0x104>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
90008b96:	f7fe f8d5 	bl	90006d44 <HAL_GetTick>
90008b9a:	1b80      	subs	r0, r0, r6
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
90008b9c:	f8db 4000 	ldr.w	r4, [fp]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
90008ba0:	4285      	cmp	r5, r0
90008ba2:	d301      	bcc.n	90008ba8 <HAL_I2C_Mem_Read+0x1d8>
90008ba4:	2d00      	cmp	r5, #0
90008ba6:	d190      	bne.n	90008aca <HAL_I2C_Mem_Read+0xfa>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
90008ba8:	69a3      	ldr	r3, [r4, #24]
90008baa:	f013 0340 	ands.w	r3, r3, #64	; 0x40
90008bae:	d18c      	bne.n	90008aca <HAL_I2C_Mem_Read+0xfa>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
90008bb0:	f8db 2044 	ldr.w	r2, [fp, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
90008bb4:	2120      	movs	r1, #32
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
90008bb6:	430a      	orrs	r2, r1
90008bb8:	f8cb 2044 	str.w	r2, [fp, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
90008bbc:	f88b 1041 	strb.w	r1, [fp, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
90008bc0:	f88b 3042 	strb.w	r3, [fp, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
90008bc4:	2300      	movs	r3, #0
      return HAL_ERROR;
90008bc6:	2001      	movs	r0, #1
      __HAL_UNLOCK(hi2c);
90008bc8:	f88b 3040 	strb.w	r3, [fp, #64]	; 0x40
      return HAL_ERROR;
90008bcc:	e740      	b.n	90008a50 <HAL_I2C_Mem_Read+0x80>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
90008bce:	f8db 2000 	ldr.w	r2, [fp]
90008bd2:	1c68      	adds	r0, r5, #1
90008bd4:	d111      	bne.n	90008bfa <HAL_I2C_Mem_Read+0x22a>
90008bd6:	6993      	ldr	r3, [r2, #24]
90008bd8:	0619      	lsls	r1, r3, #24
90008bda:	d5fc      	bpl.n	90008bd6 <HAL_I2C_Mem_Read+0x206>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
90008bdc:	f8bb 302a 	ldrh.w	r3, [fp, #42]	; 0x2a
90008be0:	b29b      	uxth	r3, r3
90008be2:	2bff      	cmp	r3, #255	; 0xff
90008be4:	d91a      	bls.n	90008c1c <HAL_I2C_Mem_Read+0x24c>
  MODIFY_REG(hi2c->Instance->CR2, \
90008be6:	6853      	ldr	r3, [r2, #4]
          hi2c->XferSize = MAX_NBYTE_SIZE;
90008be8:	f8ab a028 	strh.w	sl, [fp, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
90008bec:	ea03 0308 	and.w	r3, r3, r8
90008bf0:	433b      	orrs	r3, r7
90008bf2:	ea43 0309 	orr.w	r3, r3, r9
90008bf6:	6053      	str	r3, [r2, #4]
}
90008bf8:	e7a2      	b.n	90008b40 <HAL_I2C_Mem_Read+0x170>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
90008bfa:	6993      	ldr	r3, [r2, #24]
90008bfc:	061b      	lsls	r3, r3, #24
90008bfe:	d4ed      	bmi.n	90008bdc <HAL_I2C_Mem_Read+0x20c>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
90008c00:	f7fe f8a0 	bl	90006d44 <HAL_GetTick>
90008c04:	1b80      	subs	r0, r0, r6
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
90008c06:	f8db 2000 	ldr.w	r2, [fp]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
90008c0a:	4285      	cmp	r5, r0
90008c0c:	d301      	bcc.n	90008c12 <HAL_I2C_Mem_Read+0x242>
90008c0e:	2d00      	cmp	r5, #0
90008c10:	d1df      	bne.n	90008bd2 <HAL_I2C_Mem_Read+0x202>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
90008c12:	6993      	ldr	r3, [r2, #24]
90008c14:	f013 0380 	ands.w	r3, r3, #128	; 0x80
90008c18:	d1db      	bne.n	90008bd2 <HAL_I2C_Mem_Read+0x202>
90008c1a:	e7ab      	b.n	90008b74 <HAL_I2C_Mem_Read+0x1a4>
          hi2c->XferSize = hi2c->XferCount;
90008c1c:	f8bb 302a 	ldrh.w	r3, [fp, #42]	; 0x2a
90008c20:	b29b      	uxth	r3, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
90008c22:	b2d9      	uxtb	r1, r3
          hi2c->XferSize = hi2c->XferCount;
90008c24:	f8ab 3028 	strh.w	r3, [fp, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
90008c28:	6853      	ldr	r3, [r2, #4]
90008c2a:	ea03 0308 	and.w	r3, r3, r8
90008c2e:	433b      	orrs	r3, r7
90008c30:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
90008c34:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
90008c38:	6053      	str	r3, [r2, #4]
}
90008c3a:	e781      	b.n	90008b40 <HAL_I2C_Mem_Read+0x170>
      hi2c->XferSize = hi2c->XferCount;
90008c3c:	f8bb 302a 	ldrh.w	r3, [fp, #42]	; 0x2a
  MODIFY_REG(hi2c->Instance->CR2, \
90008c40:	4912      	ldr	r1, [pc, #72]	; (90008c8c <HAL_I2C_Mem_Read+0x2bc>)
      hi2c->XferSize = hi2c->XferCount;
90008c42:	b29b      	uxth	r3, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
90008c44:	b2da      	uxtb	r2, r3
      hi2c->XferSize = hi2c->XferCount;
90008c46:	f8ab 3028 	strh.w	r3, [fp, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
90008c4a:	6863      	ldr	r3, [r4, #4]
90008c4c:	400b      	ands	r3, r1
90008c4e:	433b      	orrs	r3, r7
90008c50:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
90008c54:	4a0f      	ldr	r2, [pc, #60]	; (90008c94 <HAL_I2C_Mem_Read+0x2c4>)
90008c56:	431a      	orrs	r2, r3
90008c58:	6062      	str	r2, [r4, #4]
}
90008c5a:	e74b      	b.n	90008af4 <HAL_I2C_Mem_Read+0x124>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
90008c5c:	4632      	mov	r2, r6
90008c5e:	4629      	mov	r1, r5
90008c60:	4658      	mov	r0, fp
90008c62:	f7ff fc51 	bl	90008508 <I2C_WaitOnSTOPFlagUntilTimeout>
90008c66:	b970      	cbnz	r0, 90008c86 <HAL_I2C_Mem_Read+0x2b6>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
90008c68:	f8db 3000 	ldr.w	r3, [fp]
90008c6c:	2120      	movs	r1, #32
    I2C_RESET_CR2(hi2c);
90008c6e:	4c0a      	ldr	r4, [pc, #40]	; (90008c98 <HAL_I2C_Mem_Read+0x2c8>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
90008c70:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
90008c72:	685a      	ldr	r2, [r3, #4]
90008c74:	4022      	ands	r2, r4
90008c76:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
90008c78:	f88b 1041 	strb.w	r1, [fp, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
90008c7c:	f88b 0040 	strb.w	r0, [fp, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
90008c80:	f88b 0042 	strb.w	r0, [fp, #66]	; 0x42
    return HAL_OK;
90008c84:	e6e4      	b.n	90008a50 <HAL_I2C_Mem_Read+0x80>
      return HAL_ERROR;
90008c86:	2001      	movs	r0, #1
90008c88:	e6e2      	b.n	90008a50 <HAL_I2C_Mem_Read+0x80>
90008c8a:	bf00      	nop
90008c8c:	fc009800 	.word	0xfc009800
90008c90:	01ff2400 	.word	0x01ff2400
90008c94:	02002400 	.word	0x02002400
90008c98:	fe00e800 	.word	0xfe00e800
90008c9c:	fc009c00 	.word	0xfc009c00
90008ca0:	01ff0000 	.word	0x01ff0000

90008ca4 <HAL_I2C_GetState>:
  return hi2c->State;
90008ca4:	f890 0041 	ldrb.w	r0, [r0, #65]	; 0x41
}
90008ca8:	4770      	bx	lr
90008caa:	bf00      	nop

90008cac <HAL_I2C_GetError>:
  return hi2c->ErrorCode;
90008cac:	6c40      	ldr	r0, [r0, #68]	; 0x44
}
90008cae:	4770      	bx	lr

90008cb0 <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
90008cb0:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
90008cb4:	2a20      	cmp	r2, #32
90008cb6:	d123      	bne.n	90008d00 <HAL_I2CEx_ConfigAnalogFilter+0x50>
90008cb8:	fa5f fc82 	uxtb.w	ip, r2
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
90008cbc:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
90008cc0:	4603      	mov	r3, r0
90008cc2:	2a01      	cmp	r2, #1
90008cc4:	d01c      	beq.n	90008d00 <HAL_I2CEx_ConfigAnalogFilter+0x50>

    hi2c->State = HAL_I2C_STATE_BUSY;

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
90008cc6:	6802      	ldr	r2, [r0, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
90008cc8:	2024      	movs	r0, #36	; 0x24
{
90008cca:	b500      	push	{lr}
    hi2c->State = HAL_I2C_STATE_BUSY;
90008ccc:	f883 0041 	strb.w	r0, [r3, #65]	; 0x41
    __HAL_I2C_ENABLE(hi2c);

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
90008cd0:	f04f 0e00 	mov.w	lr, #0
    __HAL_I2C_DISABLE(hi2c);
90008cd4:	6810      	ldr	r0, [r2, #0]
90008cd6:	f020 0001 	bic.w	r0, r0, #1
90008cda:	6010      	str	r0, [r2, #0]
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
90008cdc:	6810      	ldr	r0, [r2, #0]
90008cde:	f420 5080 	bic.w	r0, r0, #4096	; 0x1000
90008ce2:	6010      	str	r0, [r2, #0]
    hi2c->Instance->CR1 |= AnalogFilter;
90008ce4:	6810      	ldr	r0, [r2, #0]
90008ce6:	4301      	orrs	r1, r0

    return HAL_OK;
90008ce8:	4670      	mov	r0, lr
    hi2c->Instance->CR1 |= AnalogFilter;
90008cea:	6011      	str	r1, [r2, #0]
    __HAL_I2C_ENABLE(hi2c);
90008cec:	6811      	ldr	r1, [r2, #0]
90008cee:	f041 0101 	orr.w	r1, r1, #1
90008cf2:	6011      	str	r1, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
90008cf4:	f883 c041 	strb.w	ip, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
90008cf8:	f883 e040 	strb.w	lr, [r3, #64]	; 0x40
  }
  else
  {
    return HAL_BUSY;
  }
}
90008cfc:	f85d fb04 	ldr.w	pc, [sp], #4
    return HAL_BUSY;
90008d00:	2002      	movs	r0, #2
}
90008d02:	4770      	bx	lr

90008d04 <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
90008d04:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
90008d08:	2a20      	cmp	r2, #32
90008d0a:	d122      	bne.n	90008d52 <HAL_I2CEx_ConfigDigitalFilter+0x4e>
90008d0c:	4603      	mov	r3, r0
{
90008d0e:	b500      	push	{lr}
90008d10:	fa5f fe82 	uxtb.w	lr, r2
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
90008d14:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
90008d18:	2a01      	cmp	r2, #1
90008d1a:	d01c      	beq.n	90008d56 <HAL_I2CEx_ConfigDigitalFilter+0x52>

    hi2c->State = HAL_I2C_STATE_BUSY;

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
90008d1c:	6802      	ldr	r2, [r0, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
90008d1e:	2024      	movs	r0, #36	; 0x24
    __HAL_I2C_ENABLE(hi2c);

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
90008d20:	f04f 0c00 	mov.w	ip, #0
    hi2c->State = HAL_I2C_STATE_BUSY;
90008d24:	f883 0041 	strb.w	r0, [r3, #65]	; 0x41
    __HAL_I2C_DISABLE(hi2c);
90008d28:	6810      	ldr	r0, [r2, #0]
90008d2a:	f020 0001 	bic.w	r0, r0, #1
90008d2e:	6010      	str	r0, [r2, #0]
    tmpreg = hi2c->Instance->CR1;
90008d30:	6810      	ldr	r0, [r2, #0]
    tmpreg &= ~(I2C_CR1_DNF);
90008d32:	f420 6070 	bic.w	r0, r0, #3840	; 0xf00
    tmpreg |= DigitalFilter << 8U;
90008d36:	ea40 2101 	orr.w	r1, r0, r1, lsl #8

    return HAL_OK;
90008d3a:	4660      	mov	r0, ip
    hi2c->Instance->CR1 = tmpreg;
90008d3c:	6011      	str	r1, [r2, #0]
    __HAL_I2C_ENABLE(hi2c);
90008d3e:	6811      	ldr	r1, [r2, #0]
90008d40:	f041 0101 	orr.w	r1, r1, #1
90008d44:	6011      	str	r1, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
90008d46:	f883 e041 	strb.w	lr, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
90008d4a:	f883 c040 	strb.w	ip, [r3, #64]	; 0x40
  }
  else
  {
    return HAL_BUSY;
  }
}
90008d4e:	f85d fb04 	ldr.w	pc, [sp], #4
    return HAL_BUSY;
90008d52:	2002      	movs	r0, #2
}
90008d54:	4770      	bx	lr
    return HAL_BUSY;
90008d56:	2002      	movs	r0, #2
}
90008d58:	f85d fb04 	ldr.w	pc, [sp], #4

90008d5c <JPEG_Bits_To_SizeCodes>:
  * @param  Huffcode pointer to codes table
  * @param  LastK pointer to last Coeff (table dimension)
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Bits_To_SizeCodes(uint8_t *Bits, uint8_t *Huffsize, uint32_t *Huffcode, uint32_t *LastK)
{
90008d5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
90008d60:	460d      	mov	r5, r1
90008d62:	4614      	mov	r4, r2
90008d64:	469a      	mov	sl, r3

  /* Figure C.1: Generation of table of Huffman code sizes */
  p = 0;
  for (l = 0; l < 16UL; l++)
  {
    i = (uint32_t)Bits[l];
90008d66:	7806      	ldrb	r6, [r0, #0]
    if ((p + i) > 256UL)
90008d68:	4681      	mov	r9, r0
    i = (uint32_t)Bits[l];
90008d6a:	2701      	movs	r7, #1
  p = 0;
90008d6c:	f04f 0800 	mov.w	r8, #0
90008d70:	e006      	b.n	90008d80 <JPEG_Bits_To_SizeCodes+0x24>
    i = (uint32_t)Bits[l];
90008d72:	f819 6f01 	ldrb.w	r6, [r9, #1]!
    if ((p + i) > 256UL)
90008d76:	eb06 0308 	add.w	r3, r6, r8
90008d7a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
90008d7e:	d837      	bhi.n	90008df0 <JPEG_Bits_To_SizeCodes+0x94>
      /* check for table overflow */
      return HAL_ERROR;
    }
    while (i != 0UL)
    {
      Huffsize[p] = (uint8_t) l + 1U;
90008d80:	eb05 0008 	add.w	r0, r5, r8
90008d84:	4632      	mov	r2, r6
90008d86:	4639      	mov	r1, r7
    while (i != 0UL)
90008d88:	b116      	cbz	r6, 90008d90 <JPEG_Bits_To_SizeCodes+0x34>
      p++;
90008d8a:	44b0      	add	r8, r6
      Huffsize[p] = (uint8_t) l + 1U;
90008d8c:	f01a faf2 	bl	90023374 <memset>
  for (l = 0; l < 16UL; l++)
90008d90:	2f10      	cmp	r7, #16
    if ((p + i) > 256UL)
90008d92:	f107 0701 	add.w	r7, r7, #1
  for (l = 0; l < 16UL; l++)
90008d96:	d1ec      	bne.n	90008d72 <JPEG_Bits_To_SizeCodes+0x16>
      i--;
    }
  }
  Huffsize[p] = 0;
90008d98:	2300      	movs	r3, #0
90008d9a:	f805 3008 	strb.w	r3, [r5, r8]
  *LastK = p;
90008d9e:	f8ca 8000 	str.w	r8, [sl]

  /* Figure C.2: Generation of table of Huffman codes */
  code = 0;
  si = Huffsize[0];
90008da2:	7828      	ldrb	r0, [r5, #0]
90008da4:	4601      	mov	r1, r0
  p = 0;
  while (Huffsize[p] != 0U)
90008da6:	b300      	cbz	r0, 90008dea <JPEG_Bits_To_SizeCodes+0x8e>
90008da8:	f06f 4840 	mvn.w	r8, #3221225472	; 0xc0000000
    /* code must fit in "size" bits (si), no code is allowed to be all ones*/
    if(si > 31UL)
    {
      return HAL_ERROR;
    }
    if (((uint32_t) code) >= (((uint32_t) 1) << si))
90008dac:	2701      	movs	r7, #1
  p = 0;
90008dae:	461a      	mov	r2, r3
    while (((uint32_t) Huffsize[p]) == si)
90008db0:	4288      	cmp	r0, r1
90008db2:	d10f      	bne.n	90008dd4 <JPEG_Bits_To_SizeCodes+0x78>
90008db4:	eb02 0008 	add.w	r0, r2, r8
90008db8:	1c56      	adds	r6, r2, #1
90008dba:	eb05 0c02 	add.w	ip, r5, r2
90008dbe:	eb04 0080 	add.w	r0, r4, r0, lsl #2
90008dc2:	1af6      	subs	r6, r6, r3
      Huffcode[p] = code;
90008dc4:	f840 3f04 	str.w	r3, [r0, #4]!
      p++;
90008dc8:	18f2      	adds	r2, r6, r3
    while (((uint32_t) Huffsize[p]) == si)
90008dca:	f81c ef01 	ldrb.w	lr, [ip, #1]!
      code++;
90008dce:	3301      	adds	r3, #1
    while (((uint32_t) Huffsize[p]) == si)
90008dd0:	458e      	cmp	lr, r1
90008dd2:	d0f7      	beq.n	90008dc4 <JPEG_Bits_To_SizeCodes+0x68>
    if(si > 31UL)
90008dd4:	291f      	cmp	r1, #31
90008dd6:	d80b      	bhi.n	90008df0 <JPEG_Bits_To_SizeCodes+0x94>
    if (((uint32_t) code) >= (((uint32_t) 1) << si))
90008dd8:	fa07 f001 	lsl.w	r0, r7, r1
90008ddc:	4298      	cmp	r0, r3
90008dde:	d907      	bls.n	90008df0 <JPEG_Bits_To_SizeCodes+0x94>
  while (Huffsize[p] != 0U)
90008de0:	5ca8      	ldrb	r0, [r5, r2]
    {
      return HAL_ERROR;
    }
    code <<= 1;
90008de2:	005b      	lsls	r3, r3, #1
    si++;
90008de4:	3101      	adds	r1, #1
  while (Huffsize[p] != 0U)
90008de6:	2800      	cmp	r0, #0
90008de8:	d1e2      	bne.n	90008db0 <JPEG_Bits_To_SizeCodes+0x54>
  }
  /* Return function status */
  return HAL_OK;
90008dea:	2000      	movs	r0, #0
}
90008dec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      return HAL_ERROR;
90008df0:	2001      	movs	r0, #1
}
90008df2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
90008df6:	bf00      	nop

90008df8 <JPEG_DCHuff_BitsVals_To_SizeCodes>:
  * @param  DC_SizeCodesTable pointer to DC huffman Sizes/Codes table
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_DCHuff_BitsVals_To_SizeCodes(JPEG_DCHuffTableTypeDef *DC_BitsValsTable,
                                                           JPEG_DC_HuffCodeTableTypeDef *DC_SizeCodesTable)
{
90008df8:	b5f0      	push	{r4, r5, r6, r7, lr}
90008dfa:	f2ad 5d14 	subw	sp, sp, #1300	; 0x514
90008dfe:	460d      	mov	r5, r1
90008e00:	4604      	mov	r4, r0
  uint32_t k;
  uint32_t l;
  uint32_t lastK;
  uint8_t huffsize[257];
  uint32_t huffcode[257];
  error = JPEG_Bits_To_SizeCodes(DC_BitsValsTable->Bits, huffsize, huffcode, &lastK);
90008e02:	ab01      	add	r3, sp, #4
90008e04:	aa43      	add	r2, sp, #268	; 0x10c
90008e06:	a902      	add	r1, sp, #8
90008e08:	f7ff ffa8 	bl	90008d5c <JPEG_Bits_To_SizeCodes>
  if (error != HAL_OK)
90008e0c:	b9d0      	cbnz	r0, 90008e44 <JPEG_DCHuff_BitsVals_To_SizeCodes+0x4c>
    return  error;
  }
  /* Figure C.3: ordering procedure for encoding procedure code tables */
  k = 0;

  while (k < lastK)
90008e0e:	9f01      	ldr	r7, [sp, #4]
90008e10:	b1c7      	cbz	r7, 90008e44 <JPEG_DCHuff_BitsVals_To_SizeCodes+0x4c>
90008e12:	370f      	adds	r7, #15
90008e14:	f50d 7e86 	add.w	lr, sp, #268	; 0x10c
90008e18:	a902      	add	r1, sp, #8
90008e1a:	f104 0c0f 	add.w	ip, r4, #15
90008e1e:	4427      	add	r7, r4
90008e20:	e009      	b.n	90008e36 <JPEG_DCHuff_BitsVals_To_SizeCodes+0x3e>
      return HAL_ERROR; /* Huffman Table overflow error*/
    }
    else
    {
      DC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
      DC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
90008e22:	f811 2b01 	ldrb.w	r2, [r1], #1
  while (k < lastK)
90008e26:	45bc      	cmp	ip, r7
      DC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
90008e28:	f85e 6b04 	ldr.w	r6, [lr], #4
      DC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
90008e2c:	f102 32ff 	add.w	r2, r2, #4294967295
      DC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
90008e30:	60e6      	str	r6, [r4, #12]
      DC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
90008e32:	54ea      	strb	r2, [r5, r3]
  while (k < lastK)
90008e34:	d006      	beq.n	90008e44 <JPEG_DCHuff_BitsVals_To_SizeCodes+0x4c>
    l = DC_BitsValsTable->HuffVal[k];
90008e36:	f81c 3f01 	ldrb.w	r3, [ip, #1]!
    if (l >= JPEG_DC_HUFF_TABLE_SIZE)
90008e3a:	2b0b      	cmp	r3, #11
      DC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
90008e3c:	eb05 0483 	add.w	r4, r5, r3, lsl #2
    if (l >= JPEG_DC_HUFF_TABLE_SIZE)
90008e40:	d9ef      	bls.n	90008e22 <JPEG_DCHuff_BitsVals_To_SizeCodes+0x2a>
      return HAL_ERROR; /* Huffman Table overflow error*/
90008e42:	2001      	movs	r0, #1
    }
  }

  /* Return function status */
  return HAL_OK;
}
90008e44:	f20d 5d14 	addw	sp, sp, #1300	; 0x514
90008e48:	bdf0      	pop	{r4, r5, r6, r7, pc}
90008e4a:	bf00      	nop

90008e4c <JPEG_Set_HuffDC_Mem>:
  * @param  DCTableAddress Encoder DC huffman table address it could be HUFFENC_DC0 or HUFFENC_DC1.
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Set_HuffDC_Mem(JPEG_HandleTypeDef *hjpeg, JPEG_DCHuffTableTypeDef *HuffTableDC,
                                             const __IO uint32_t *DCTableAddress)
{
90008e4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t i;
  uint32_t lsb;
  uint32_t msb;
  __IO uint32_t *address, *addressDef;

  if (DCTableAddress == (hjpeg->Instance->HUFFENC_DC0))
90008e50:	6804      	ldr	r4, [r0, #0]
{
90008e52:	b093      	sub	sp, #76	; 0x4c
90008e54:	4608      	mov	r0, r1
  if (DCTableAddress == (hjpeg->Instance->HUFFENC_DC0))
90008e56:	f504 63f8 	add.w	r3, r4, #1984	; 0x7c0
90008e5a:	429a      	cmp	r2, r3
90008e5c:	f000 809d 	beq.w	90008f9a <JPEG_Set_HuffDC_Mem+0x14e>
  {
    address = (hjpeg->Instance->HUFFENC_DC0 + (JPEG_DC_HUFF_TABLE_SIZE / 2UL));
  }
  else if (DCTableAddress == (hjpeg->Instance->HUFFENC_DC1))
90008e60:	f504 63fc 	add.w	r3, r4, #2016	; 0x7e0
90008e64:	429a      	cmp	r2, r3
90008e66:	d003      	beq.n	90008e70 <JPEG_Set_HuffDC_Mem+0x24>
  {
    address = (hjpeg->Instance->HUFFENC_DC1 + (JPEG_DC_HUFF_TABLE_SIZE / 2UL));
  }
  else
  {
    return HAL_ERROR;
90008e68:	2001      	movs	r0, #1
    }
  }

  /* Return function status */
  return HAL_OK;
}
90008e6a:	b013      	add	sp, #76	; 0x4c
90008e6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    address = (hjpeg->Instance->HUFFENC_DC1 + (JPEG_DC_HUFF_TABLE_SIZE / 2UL));
90008e70:	f504 64ff 	add.w	r4, r4, #2040	; 0x7f8
    error = JPEG_DCHuff_BitsVals_To_SizeCodes(HuffTableDC, &dcSizeCodesTable);
90008e74:	a903      	add	r1, sp, #12
90008e76:	f7ff ffbf 	bl	90008df8 <JPEG_DCHuff_BitsVals_To_SizeCodes>
    if (error != HAL_OK)
90008e7a:	2800      	cmp	r0, #0
90008e7c:	d1f5      	bne.n	90008e6a <JPEG_Set_HuffDC_Mem+0x1e>
    *addressDef = 0x0FFF0FFF;
90008e7e:	f06f 23f0 	mvn.w	r3, #4026593280	; 0xf000f000
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
90008e82:	f89d a017 	ldrb.w	sl, [sp, #23]
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
90008e86:	f89d e016 	ldrb.w	lr, [sp, #22]
    *addressDef = 0x0FFF0FFF;
90008e8a:	6023      	str	r3, [r4, #0]
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
90008e8c:	ea4f 2a0a 	mov.w	sl, sl, lsl #8
    *addressDef = 0x0FFF0FFF;
90008e90:	6063      	str	r3, [r4, #4]
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
90008e92:	ea4f 2e0e 	mov.w	lr, lr, lsl #8
90008e96:	f89d 300e 	ldrb.w	r3, [sp, #14]
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
90008e9a:	f40a 6a70 	and.w	sl, sl, #3840	; 0xf00
90008e9e:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
90008ea2:	f40e 6e70 	and.w	lr, lr, #3840	; 0xf00
90008ea6:	021b      	lsls	r3, r3, #8
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
90008ea8:	f89d 9015 	ldrb.w	r9, [sp, #21]
90008eac:	ea4a 0a02 	orr.w	sl, sl, r2
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
90008eb0:	f89d c014 	ldrb.w	ip, [sp, #20]
90008eb4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
90008eb8:	ea4f 2909 	mov.w	r9, r9, lsl #8
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
90008ebc:	ea4f 2c0c 	mov.w	ip, ip, lsl #8
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
90008ec0:	f89d 8013 	ldrb.w	r8, [sp, #19]
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
90008ec4:	9301      	str	r3, [sp, #4]
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
90008ec6:	f409 6970 	and.w	r9, r9, #3840	; 0xf00
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
90008eca:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
90008ece:	f40c 6c70 	and.w	ip, ip, #3840	; 0xf00
90008ed2:	f89d 1012 	ldrb.w	r1, [sp, #18]
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
90008ed6:	ea4f 2808 	mov.w	r8, r8, lsl #8
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
90008eda:	ea4e 0e03 	orr.w	lr, lr, r3
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
90008ede:	f89d 7011 	ldrb.w	r7, [sp, #17]
90008ee2:	f408 6870 	and.w	r8, r8, #3840	; 0xf00
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
90008ee6:	0209      	lsls	r1, r1, #8
      *address = lsb | (msb << 16);
90008ee8:	ea4e 4e0a 	orr.w	lr, lr, sl, lsl #16
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
90008eec:	f89d 2010 	ldrb.w	r2, [sp, #16]
90008ef0:	f401 6170 	and.w	r1, r1, #3840	; 0xf00
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
90008ef4:	023f      	lsls	r7, r7, #8
      *address = lsb | (msb << 16);
90008ef6:	f844 ec04 	str.w	lr, [r4, #-4]
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
90008efa:	0212      	lsls	r2, r2, #8
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
90008efc:	f89d e03c 	ldrb.w	lr, [sp, #60]	; 0x3c
90008f00:	f407 6770 	and.w	r7, r7, #3840	; 0xf00
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
90008f04:	f402 6270 	and.w	r2, r2, #3840	; 0xf00
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
90008f08:	f89d 600f 	ldrb.w	r6, [sp, #15]
90008f0c:	ea49 090e 	orr.w	r9, r9, lr
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
90008f10:	f89d e038 	ldrb.w	lr, [sp, #56]	; 0x38
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
90008f14:	0236      	lsls	r6, r6, #8
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
90008f16:	9b01      	ldr	r3, [sp, #4]
90008f18:	ea4c 0c0e 	orr.w	ip, ip, lr
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
90008f1c:	f89d 500d 	ldrb.w	r5, [sp, #13]
90008f20:	f406 6670 	and.w	r6, r6, #3840	; 0xf00
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
90008f24:	f89d b00c 	ldrb.w	fp, [sp, #12]
      *address = lsb | (msb << 16);
90008f28:	ea4c 4c09 	orr.w	ip, ip, r9, lsl #16
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
90008f2c:	022d      	lsls	r5, r5, #8
      *address = lsb | (msb << 16);
90008f2e:	f844 cc08 	str.w	ip, [r4, #-8]
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
90008f32:	ea4f 2b0b 	mov.w	fp, fp, lsl #8
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
90008f36:	f89d c034 	ldrb.w	ip, [sp, #52]	; 0x34
90008f3a:	f405 6570 	and.w	r5, r5, #3840	; 0xf00
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
90008f3e:	f40b 6b70 	and.w	fp, fp, #3840	; 0xf00
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
90008f42:	ea48 080c 	orr.w	r8, r8, ip
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
90008f46:	f89d c030 	ldrb.w	ip, [sp, #48]	; 0x30
90008f4a:	ea41 010c 	orr.w	r1, r1, ip
      *address = lsb | (msb << 16);
90008f4e:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
90008f52:	f844 1c0c 	str.w	r1, [r4, #-12]
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
90008f56:	f89d 102c 	ldrb.w	r1, [sp, #44]	; 0x2c
90008f5a:	430f      	orrs	r7, r1
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
90008f5c:	f89d 1028 	ldrb.w	r1, [sp, #40]	; 0x28
90008f60:	430a      	orrs	r2, r1
      *address = lsb | (msb << 16);
90008f62:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
90008f66:	f844 2c10 	str.w	r2, [r4, #-16]
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
90008f6a:	f89d 2024 	ldrb.w	r2, [sp, #36]	; 0x24
90008f6e:	4316      	orrs	r6, r2
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
90008f70:	f89d 2020 	ldrb.w	r2, [sp, #32]
90008f74:	4313      	orrs	r3, r2
      *address = lsb | (msb << 16);
90008f76:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
90008f7a:	f844 3c14 	str.w	r3, [r4, #-20]
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
90008f7e:	f89d 301c 	ldrb.w	r3, [sp, #28]
90008f82:	431d      	orrs	r5, r3
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
90008f84:	f89d 3018 	ldrb.w	r3, [sp, #24]
90008f88:	ea4b 0303 	orr.w	r3, fp, r3
      *address = lsb | (msb << 16);
90008f8c:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
90008f90:	f844 3c18 	str.w	r3, [r4, #-24]
}
90008f94:	b013      	add	sp, #76	; 0x4c
90008f96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    address = (hjpeg->Instance->HUFFENC_DC0 + (JPEG_DC_HUFF_TABLE_SIZE / 2UL));
90008f9a:	f504 64fb 	add.w	r4, r4, #2008	; 0x7d8
90008f9e:	e769      	b.n	90008e74 <JPEG_Set_HuffDC_Mem+0x28>

90008fa0 <JPEG_Set_HuffAC_Mem>:
  * @param  ACTableAddress Encoder AC huffman table address it could be HUFFENC_AC0 or HUFFENC_AC1.
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Set_HuffAC_Mem(JPEG_HandleTypeDef *hjpeg, JPEG_ACHuffTableTypeDef *HuffTableAC,
                                             const __IO uint32_t *ACTableAddress)
{
90008fa0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  HAL_StatusTypeDef error;
  JPEG_AC_HuffCodeTableTypeDef acSizeCodesTable;
  uint32_t i, lsb, msb;
  __IO uint32_t *address, *addressDef;

  if (ACTableAddress == (hjpeg->Instance->HUFFENC_AC0))
90008fa4:	6804      	ldr	r4, [r0, #0]
{
90008fa6:	f6ad 0d3c 	subw	sp, sp, #2108	; 0x83c
90008faa:	460d      	mov	r5, r1
  if (ACTableAddress == (hjpeg->Instance->HUFFENC_AC0))
90008fac:	f504 63a0 	add.w	r3, r4, #1280	; 0x500
90008fb0:	429a      	cmp	r2, r3
90008fb2:	d042      	beq.n	9000903a <JPEG_Set_HuffAC_Mem+0x9a>
  {
    address = (hjpeg->Instance->HUFFENC_AC0 + (JPEG_AC_HUFF_TABLE_SIZE / 2UL));
  }
  else if (ACTableAddress == (hjpeg->Instance->HUFFENC_AC1))
90008fb4:	f504 63cc 	add.w	r3, r4, #1632	; 0x660
90008fb8:	429a      	cmp	r2, r3
90008fba:	d004      	beq.n	90008fc6 <JPEG_Set_HuffAC_Mem+0x26>
      return HAL_ERROR; /* Huffman Table overflow error*/
90008fbc:	2001      	movs	r0, #1
    }
  }

  /* Return function status */
  return HAL_OK;
}
90008fbe:	f60d 0d3c 	addw	sp, sp, #2108	; 0x83c
90008fc2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    address = (hjpeg->Instance->HUFFENC_AC1 + (JPEG_AC_HUFF_TABLE_SIZE / 2UL));
90008fc6:	f204 74a4 	addw	r4, r4, #1956	; 0x7a4
  error = JPEG_Bits_To_SizeCodes(AC_BitsValsTable->Bits, huffsize, huffcode, &lastK);
90008fca:	4628      	mov	r0, r5
90008fcc:	466b      	mov	r3, sp
90008fce:	f20d 4234 	addw	r2, sp, #1076	; 0x434
90008fd2:	a901      	add	r1, sp, #4
90008fd4:	f7ff fec2 	bl	90008d5c <JPEG_Bits_To_SizeCodes>
  if (error != HAL_OK)
90008fd8:	2800      	cmp	r0, #0
90008fda:	d1f0      	bne.n	90008fbe <JPEG_Set_HuffAC_Mem+0x1e>
  while (k < lastK)
90008fdc:	9b00      	ldr	r3, [sp, #0]
90008fde:	b37b      	cbz	r3, 90009040 <JPEG_Set_HuffAC_Mem+0xa0>
90008fe0:	330f      	adds	r3, #15
90008fe2:	f20d 4734 	addw	r7, sp, #1076	; 0x434
90008fe6:	f10d 0c04 	add.w	ip, sp, #4
90008fea:	f105 020f 	add.w	r2, r5, #15
90008fee:	eb05 0e03 	add.w	lr, r5, r3
      AC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
90008ff2:	ae42      	add	r6, sp, #264	; 0x108
90008ff4:	e011      	b.n	9000901a <JPEG_Set_HuffAC_Mem+0x7a>
      l = (msb * 10UL) + lsb - 1UL;
90008ff6:	eb03 0345 	add.w	r3, r3, r5, lsl #1
    if (l >= JPEG_AC_HUFF_TABLE_SIZE)
90008ffa:	2ba1      	cmp	r3, #161	; 0xa1
90008ffc:	d8de      	bhi.n	90008fbc <JPEG_Set_HuffAC_Mem+0x1c>
      AC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
90008ffe:	f81c 5b01 	ldrb.w	r5, [ip], #1
      AC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
90009002:	eb06 0883 	add.w	r8, r6, r3, lsl #2
90009006:	f857 9b04 	ldr.w	r9, [r7], #4
  while (k < lastK)
9000900a:	4596      	cmp	lr, r2
      AC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
9000900c:	f105 35ff 	add.w	r5, r5, #4294967295
      AC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
90009010:	4631      	mov	r1, r6
90009012:	f8c8 90a4 	str.w	r9, [r8, #164]	; 0xa4
      AC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
90009016:	54f5      	strb	r5, [r6, r3]
  while (k < lastK)
90009018:	d013      	beq.n	90009042 <JPEG_Set_HuffAC_Mem+0xa2>
    l = AC_BitsValsTable->HuffVal[k];
9000901a:	f812 1f01 	ldrb.w	r1, [r2, #1]!
      l = 160; /*l = 0x00 EOB code*/
9000901e:	23a0      	movs	r3, #160	; 0xa0
    if (l == 0UL)
90009020:	2900      	cmp	r1, #0
90009022:	d0ec      	beq.n	90008ffe <JPEG_Set_HuffAC_Mem+0x5e>
      msb = (l & 0xF0UL) >> 4;
90009024:	090d      	lsrs	r5, r1, #4
      lsb = (l & 0x0FUL);
90009026:	f001 030f 	and.w	r3, r1, #15
    else if (l == 0xF0UL) /* l = 0xF0 ZRL code*/
9000902a:	29f0      	cmp	r1, #240	; 0xf0
      l = (msb * 10UL) + lsb - 1UL;
9000902c:	eb05 0585 	add.w	r5, r5, r5, lsl #2
90009030:	f103 33ff 	add.w	r3, r3, #4294967295
    else if (l == 0xF0UL) /* l = 0xF0 ZRL code*/
90009034:	d1df      	bne.n	90008ff6 <JPEG_Set_HuffAC_Mem+0x56>
      l = 161;
90009036:	23a1      	movs	r3, #161	; 0xa1
90009038:	e7e1      	b.n	90008ffe <JPEG_Set_HuffAC_Mem+0x5e>
    address = (hjpeg->Instance->HUFFENC_AC0 + (JPEG_AC_HUFF_TABLE_SIZE / 2UL));
9000903a:	f204 6444 	addw	r4, r4, #1604	; 0x644
9000903e:	e7c4      	b.n	90008fca <JPEG_Set_HuffAC_Mem+0x2a>
90009040:	a942      	add	r1, sp, #264	; 0x108
      *addressDef = 0x0FFF0FFF;
90009042:	f06f 23f0 	mvn.w	r3, #4026593280	; 0xf000f000
    *addressDef = 0x0FD10FD0;
90009046:	4a1a      	ldr	r2, [pc, #104]	; (900090b0 <JPEG_Set_HuffAC_Mem+0x110>)
90009048:	eba1 0c81 	sub.w	ip, r1, r1, lsl #2
9000904c:	f10d 0566 	add.w	r5, sp, #102	; 0x66
      *addressDef = 0x0FFF0FFF;
90009050:	6023      	str	r3, [r4, #0]
90009052:	6063      	str	r3, [r4, #4]
90009054:	f50c 7e4a 	add.w	lr, ip, #808	; 0x328
90009058:	60a3      	str	r3, [r4, #8]
    *addressDef = 0x0FD30FD2;
9000905a:	f103 33d3 	add.w	r3, r3, #3553874899	; 0xd3d3d3d3
    *addressDef = 0x0FD10FD0;
9000905e:	60e2      	str	r2, [r4, #12]
    *addressDef = 0x0FD30FD2;
90009060:	f50c 7c49 	add.w	ip, ip, #804	; 0x324
90009064:	f103 232c 	add.w	r3, r3, #738208768	; 0x2c002c00
90009068:	6123      	str	r3, [r4, #16]
    *addressDef = 0x0FD50FD4;
9000906a:	f103 1302 	add.w	r3, r3, #131074	; 0x20002
9000906e:	6163      	str	r3, [r4, #20]
    *addressDef = 0x0FD70FD6;
90009070:	f103 1302 	add.w	r3, r3, #131074	; 0x20002
90009074:	61a3      	str	r3, [r4, #24]
      msb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
90009076:	f891 20a1 	ldrb.w	r2, [r1, #161]	; 0xa1
      lsb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
9000907a:	f891 30a0 	ldrb.w	r3, [r1, #160]	; 0xa0
      msb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
9000907e:	0212      	lsls	r2, r2, #8
90009080:	f81e 7021 	ldrb.w	r7, [lr, r1, lsl #2]
      lsb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
90009084:	021b      	lsls	r3, r3, #8
90009086:	f81c 6021 	ldrb.w	r6, [ip, r1, lsl #2]
      msb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
9000908a:	f402 6270 	and.w	r2, r2, #3840	; 0xf00
    while (i > 1UL)
9000908e:	3902      	subs	r1, #2
      lsb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
90009090:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
      msb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
90009094:	433a      	orrs	r2, r7
    while (i > 1UL)
90009096:	428d      	cmp	r5, r1
      lsb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
90009098:	ea43 0306 	orr.w	r3, r3, r6
      *address = lsb | (msb << 16);
9000909c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
900090a0:	f844 3d04 	str.w	r3, [r4, #-4]!
    while (i > 1UL)
900090a4:	d1e7      	bne.n	90009076 <JPEG_Set_HuffAC_Mem+0xd6>
}
900090a6:	f60d 0d3c 	addw	sp, sp, #2108	; 0x83c
900090aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
900090ae:	bf00      	nop
900090b0:	0fd10fd0 	.word	0x0fd10fd0

900090b4 <JPEG_Init_Process>:
  * @retval None
  */
static void JPEG_Init_Process(JPEG_HandleTypeDef *hjpeg)
{
  /*Reset pause*/
  hjpeg->Context &= (~(JPEG_CONTEXT_PAUSE_INPUT | JPEG_CONTEXT_PAUSE_OUTPUT));
900090b4:	6d43      	ldr	r3, [r0, #84]	; 0x54
900090b6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
900090ba:	6543      	str	r3, [r0, #84]	; 0x54

  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
900090bc:	6d43      	ldr	r3, [r0, #84]	; 0x54
900090be:	f003 0303 	and.w	r3, r3, #3
900090c2:	2b02      	cmp	r3, #2
  {
    /*Set JPEG Codec to Decoding mode */
    hjpeg->Instance->CONFR1 |= JPEG_CONFR1_DE;
900090c4:	6803      	ldr	r3, [r0, #0]
900090c6:	685a      	ldr	r2, [r3, #4]
900090c8:	bf0c      	ite	eq
900090ca:	f042 0208 	orreq.w	r2, r2, #8
  }
  else /* JPEG_CONTEXT_ENCODE */
  {
    /*Set JPEG Codec to Encoding mode */
    hjpeg->Instance->CONFR1 &= ~JPEG_CONFR1_DE;
900090ce:	f022 0208 	bicne.w	r2, r2, #8
900090d2:	605a      	str	r2, [r3, #4]
  }

  /*Stop JPEG processing */
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
900090d4:	681a      	ldr	r2, [r3, #0]
900090d6:	f022 0201 	bic.w	r2, r2, #1
900090da:	601a      	str	r2, [r3, #0]

  /* Disable All Interrupts */
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
900090dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
900090de:	f022 027e 	bic.w	r2, r2, #126	; 0x7e
900090e2:	631a      	str	r2, [r3, #48]	; 0x30

  /* Flush input and output FIFOs*/
  hjpeg->Instance->CR |= JPEG_CR_IFF;
900090e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
900090e6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
900090ea:	631a      	str	r2, [r3, #48]	; 0x30
  hjpeg->Instance->CR |= JPEG_CR_OFF;
900090ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
900090ee:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
900090f2:	631a      	str	r2, [r3, #48]	; 0x30

  /* Clear all flags */
  __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
900090f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
900090f6:	f042 0260 	orr.w	r2, r2, #96	; 0x60
900090fa:	639a      	str	r2, [r3, #56]	; 0x38

  /*Start Encoding/Decoding*/
  hjpeg->Instance->CONFR0 |=  JPEG_CONFR0_START;
900090fc:	681a      	ldr	r2, [r3, #0]
900090fe:	f042 0201 	orr.w	r2, r2, #1
90009102:	601a      	str	r2, [r3, #0]

  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
90009104:	6d42      	ldr	r2, [r0, #84]	; 0x54
90009106:	f002 020c 	and.w	r2, r2, #12
9000910a:	2a08      	cmp	r2, #8
9000910c:	d00a      	beq.n	90009124 <JPEG_Init_Process+0x70>
  {
    /*Enable IN/OUT, end of Conversation, and end of header parsing interruptions*/
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_IFT | JPEG_IT_IFNF | JPEG_IT_OFT | JPEG_IT_OFNE | JPEG_IT_EOC | JPEG_IT_HPD);
  }
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
9000910e:	6d42      	ldr	r2, [r0, #84]	; 0x54
90009110:	f002 020c 	and.w	r2, r2, #12
90009114:	2a0c      	cmp	r2, #12
90009116:	d000      	beq.n	9000911a <JPEG_Init_Process+0x66>
  }
  else
  {
    /* Nothing to do */
  }
}
90009118:	4770      	bx	lr
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
9000911a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
9000911c:	f042 0260 	orr.w	r2, r2, #96	; 0x60
90009120:	631a      	str	r2, [r3, #48]	; 0x30
}
90009122:	4770      	bx	lr
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_IFT | JPEG_IT_IFNF | JPEG_IT_OFT | JPEG_IT_OFNE | JPEG_IT_EOC | JPEG_IT_HPD);
90009124:	6b1a      	ldr	r2, [r3, #48]	; 0x30
90009126:	f042 026e 	orr.w	r2, r2, #110	; 0x6e
9000912a:	631a      	str	r2, [r3, #48]	; 0x30
9000912c:	4770      	bx	lr
9000912e:	bf00      	nop

90009130 <JPEG_DMA_StartProcess>:
  /*if the MDMA In is triggred with JPEG In FIFO Threshold flag
      then MDMA In buffer size is 32 bytes
    else (MDMA In is triggred with JPEG In FIFO not full flag)
      then MDMA In buffer size is 4 bytes
    */
  inXfrSize = hjpeg->hdmain->Init.BufferTransferLength;
90009130:	6b01      	ldr	r1, [r0, #48]	; 0x30
    else (MDMA Out is triggred with JPEG Out FIFO not empty flag)
      then MDMA buffer size is 4 bytes
    */
  outXfrSize = hjpeg->hdmaout->Init.BufferTransferLength;

  if ((hjpeg->InDataLength < inXfrSize) || (hjpeg->OutDataLength < outXfrSize))
90009132:	6a82      	ldr	r2, [r0, #40]	; 0x28
{
90009134:	b5f0      	push	{r4, r5, r6, r7, lr}
  inXfrSize = hjpeg->hdmain->Init.BufferTransferLength;
90009136:	6a8d      	ldr	r5, [r1, #40]	; 0x28
{
90009138:	b083      	sub	sp, #12
  if ((hjpeg->InDataLength < inXfrSize) || (hjpeg->OutDataLength < outXfrSize))
9000913a:	42aa      	cmp	r2, r5
9000913c:	d32d      	bcc.n	9000919a <JPEG_DMA_StartProcess+0x6a>
9000913e:	4604      	mov	r4, r0
  outXfrSize = hjpeg->hdmaout->Init.BufferTransferLength;
90009140:	6b40      	ldr	r0, [r0, #52]	; 0x34
  if ((hjpeg->InDataLength < inXfrSize) || (hjpeg->OutDataLength < outXfrSize))
90009142:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  outXfrSize = hjpeg->hdmaout->Init.BufferTransferLength;
90009144:	6a86      	ldr	r6, [r0, #40]	; 0x28
  if ((hjpeg->InDataLength < inXfrSize) || (hjpeg->OutDataLength < outXfrSize))
90009146:	42b3      	cmp	r3, r6
90009148:	d327      	bcc.n	9000919a <JPEG_DMA_StartProcess+0x6a>
    return HAL_ERROR;
  }
  /* Set the JPEG MDMA In transfer complete callback */
  hjpeg->hdmain->XferCpltCallback = JPEG_MDMAInCpltCallback;
  /* Set the MDMA In error callback */
  hjpeg->hdmain->XferErrorCallback = JPEG_MDMAErrorCallback;
9000914a:	4f1b      	ldr	r7, [pc, #108]	; (900091b8 <JPEG_DMA_StartProcess+0x88>)
  hjpeg->hdmain->XferCpltCallback = JPEG_MDMAInCpltCallback;
9000914c:	f8df c074 	ldr.w	ip, [pc, #116]	; 900091c4 <JPEG_DMA_StartProcess+0x94>
  hjpeg->hdmain->XferErrorCallback = JPEG_MDMAErrorCallback;
90009150:	654f      	str	r7, [r1, #84]	; 0x54
  hjpeg->hdmain->XferCpltCallback = JPEG_MDMAInCpltCallback;
90009152:	f8c1 c044 	str.w	ip, [r1, #68]	; 0x44

  /* Set the JPEG MDMA Out transfer complete callback */
  hjpeg->hdmaout->XferCpltCallback = JPEG_MDMAOutCpltCallback;
90009156:	4919      	ldr	r1, [pc, #100]	; (900091bc <JPEG_DMA_StartProcess+0x8c>)
  /* Set the MDMA In error callback */
  hjpeg->hdmaout->XferErrorCallback = JPEG_MDMAErrorCallback;
90009158:	6547      	str	r7, [r0, #84]	; 0x54
  hjpeg->hdmaout->XferCpltCallback = JPEG_MDMAOutCpltCallback;
9000915a:	6441      	str	r1, [r0, #68]	; 0x44
  /* Set the MDMA Out Abort callback */
  hjpeg->hdmaout->XferAbortCallback = JPEG_MDMAOutAbortCallback;
9000915c:	4918      	ldr	r1, [pc, #96]	; (900091c0 <JPEG_DMA_StartProcess+0x90>)
9000915e:	6581      	str	r1, [r0, #88]	; 0x58

  if ((inXfrSize == 0UL) || (outXfrSize == 0UL))
90009160:	b1a5      	cbz	r5, 9000918c <JPEG_DMA_StartProcess+0x5c>
90009162:	b19e      	cbz	r6, 9000918c <JPEG_DMA_StartProcess+0x5c>
  {
    hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
    return HAL_ERROR;
  }
  /*MDMA transfer size (BNDTR) must be a multiple of MDMA buffer size (TLEN)*/
  hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % inXfrSize);
90009164:	fbb2 f1f5 	udiv	r1, r2, r5
90009168:	fb05 2111 	mls	r1, r5, r1, r2
  /*MDMA transfer size (BNDTR) must be a multiple of MDMA buffer size (TLEN)*/
  hjpeg->OutDataLength = hjpeg->OutDataLength - (hjpeg->OutDataLength % outXfrSize);


  /* Start MDMA FIFO Out transfer */
  if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
9000916c:	2501      	movs	r5, #1
  hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % inXfrSize);
9000916e:	1a52      	subs	r2, r2, r1
  if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
90009170:	6821      	ldr	r1, [r4, #0]
  hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % inXfrSize);
90009172:	62a2      	str	r2, [r4, #40]	; 0x28
  if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
90009174:	3144      	adds	r1, #68	; 0x44
  hjpeg->OutDataLength = hjpeg->OutDataLength - (hjpeg->OutDataLength % outXfrSize);
90009176:	fbb3 f2f6 	udiv	r2, r3, r6
9000917a:	fb06 3212 	mls	r2, r6, r2, r3
9000917e:	1a9b      	subs	r3, r3, r2
90009180:	62e3      	str	r3, [r4, #44]	; 0x2c
  if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
90009182:	9500      	str	r5, [sp, #0]
90009184:	69e2      	ldr	r2, [r4, #28]
90009186:	f001 fbb5 	bl	9000a8f4 <HAL_MDMA_Start_IT>
9000918a:	b148      	cbz	r0, 900091a0 <JPEG_DMA_StartProcess+0x70>
    hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
9000918c:	6d23      	ldr	r3, [r4, #80]	; 0x50
    return HAL_ERROR;
9000918e:	2001      	movs	r0, #1
    hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
90009190:	f043 0304 	orr.w	r3, r3, #4
90009194:	6523      	str	r3, [r4, #80]	; 0x50
    hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
    return HAL_ERROR;
  }

  return HAL_OK;
}
90009196:	b003      	add	sp, #12
90009198:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return HAL_ERROR;
9000919a:	2001      	movs	r0, #1
}
9000919c:	b003      	add	sp, #12
9000919e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (HAL_MDMA_Start_IT(hjpeg->hdmain, (uint32_t)hjpeg->pJpegInBuffPtr, (uint32_t)&hjpeg->Instance->DIR,
900091a0:	6822      	ldr	r2, [r4, #0]
900091a2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
900091a4:	69a1      	ldr	r1, [r4, #24]
900091a6:	3240      	adds	r2, #64	; 0x40
900091a8:	9500      	str	r5, [sp, #0]
900091aa:	6b20      	ldr	r0, [r4, #48]	; 0x30
900091ac:	f001 fba2 	bl	9000a8f4 <HAL_MDMA_Start_IT>
900091b0:	2800      	cmp	r0, #0
900091b2:	d0f3      	beq.n	9000919c <JPEG_DMA_StartProcess+0x6c>
900091b4:	e7ea      	b.n	9000918c <JPEG_DMA_StartProcess+0x5c>
900091b6:	bf00      	nop
900091b8:	900096e9 	.word	0x900096e9
900091bc:	90009961 	.word	0x90009961
900091c0:	900099e1 	.word	0x900099e1
900091c4:	90009715 	.word	0x90009715

900091c8 <HAL_JPEG_GetInfo.part.0>:
  if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == JPEG_CONFR1_NF_1)
900091c8:	6803      	ldr	r3, [r0, #0]
900091ca:	685a      	ldr	r2, [r3, #4]
900091cc:	f002 0203 	and.w	r2, r2, #3
900091d0:	2a02      	cmp	r2, #2
HAL_StatusTypeDef HAL_JPEG_GetInfo(JPEG_HandleTypeDef *hjpeg, JPEG_ConfTypeDef *pInfo)
900091d2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
900091d6:	4689      	mov	r9, r1
  if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == JPEG_CONFR1_NF_1)
900091d8:	f000 8094 	beq.w	90009304 <HAL_JPEG_GetInfo.part.0+0x13c>
  else if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == 0UL)
900091dc:	685c      	ldr	r4, [r3, #4]
  pInfo->ImageHeight = (hjpeg->Instance->CONFR1 & 0xFFFF0000UL) >> 16;
900091de:	685a      	ldr	r2, [r3, #4]
  else if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == 0UL)
900091e0:	f014 0403 	ands.w	r4, r4, #3
900091e4:	d172      	bne.n	900092cc <HAL_JPEG_GetInfo.part.0+0x104>
  pInfo->ImageHeight = (hjpeg->Instance->CONFR1 & 0xFFFF0000UL) >> 16;
900091e6:	0c12      	lsrs	r2, r2, #16
    pInfo->ColorSpace = JPEG_YCBCR_COLORSPACE;
900091e8:	600c      	str	r4, [r1, #0]
  pInfo->ImageHeight = (hjpeg->Instance->CONFR1 & 0xFFFF0000UL) >> 16;
900091ea:	608a      	str	r2, [r1, #8]
  pInfo->ImageWidth  = (hjpeg->Instance->CONFR3 & 0xFFFF0000UL) >> 16;
900091ec:	68da      	ldr	r2, [r3, #12]
900091ee:	0c12      	lsrs	r2, r2, #16
900091f0:	60ca      	str	r2, [r1, #12]
  if ((pInfo->ColorSpace == JPEG_YCBCR_COLORSPACE) || (pInfo->ColorSpace == JPEG_CMYK_COLORSPACE))
900091f2:	4a5f      	ldr	r2, [pc, #380]	; (90009370 <HAL_JPEG_GetInfo.part.0+0x1a8>)
  */
static uint32_t JPEG_GetQuality(JPEG_HandleTypeDef *hjpeg)
{
  uint32_t quality = 0;
  uint32_t quantRow, quantVal, scale, i, j;
  __IO uint32_t *tableAddress = hjpeg->Instance->QMEM0;
900091f4:	f103 0c50 	add.w	ip, r3, #80	; 0x50
      pInfo->ChromaSubsampling = JPEG_422_SUBSAMPLING; /*16x8 block*/
900091f8:	f8c9 4004 	str.w	r4, [r9, #4]
  uint32_t quality = 0;
900091fc:	2600      	movs	r6, #0
900091fe:	f102 0540 	add.w	r5, r2, #64	; 0x40
        quality += 100UL;
      }
      else
      {
        /* Note that the quantization coefficients must be specified in the table in zigzag order */
        scale = (quantVal * 100UL) / ((uint32_t) hjpeg->QuantTable0[JPEG_ZIGZAG_ORDER[i + j]]);
90009202:	f04f 0e64 	mov.w	lr, #100	; 0x64
        {
          quality += (200UL - scale) / 2UL;
        }
        else
        {
          quality += 5000UL / scale;
90009206:	f241 3488 	movw	r4, #5000	; 0x1388
9000920a:	e033      	b.n	90009274 <HAL_JPEG_GetInfo.part.0+0xac>
        scale = (quantVal * 100UL) / ((uint32_t) hjpeg->QuantTable0[JPEG_ZIGZAG_ORDER[i + j]]);
9000920c:	f892 8001 	ldrb.w	r8, [r2, #1]
90009210:	fb0e f707 	mul.w	r7, lr, r7
90009214:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
90009216:	f811 8008 	ldrb.w	r8, [r1, r8]
9000921a:	fbb7 f7f8 	udiv	r7, r7, r8
        if (scale <= 100UL)
9000921e:	2f64      	cmp	r7, #100	; 0x64
90009220:	d961      	bls.n	900092e6 <HAL_JPEG_GetInfo.part.0+0x11e>
          quality += 5000UL / scale;
90009222:	fbb4 f7f7 	udiv	r7, r4, r7
90009226:	443e      	add	r6, r7
      quantVal = (quantRow >> (8UL * j)) & 0xFFUL;
90009228:	f3c3 4707 	ubfx	r7, r3, #16, #8
      if (quantVal == 1UL)
9000922c:	2f01      	cmp	r7, #1
9000922e:	d03d      	beq.n	900092ac <HAL_JPEG_GetInfo.part.0+0xe4>
        scale = (quantVal * 100UL) / ((uint32_t) hjpeg->QuantTable0[JPEG_ZIGZAG_ORDER[i + j]]);
90009230:	f892 8002 	ldrb.w	r8, [r2, #2]
90009234:	fb0e f707 	mul.w	r7, lr, r7
90009238:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
9000923a:	f811 8008 	ldrb.w	r8, [r1, r8]
9000923e:	fbb7 f7f8 	udiv	r7, r7, r8
        if (scale <= 100UL)
90009242:	2f64      	cmp	r7, #100	; 0x64
90009244:	d94a      	bls.n	900092dc <HAL_JPEG_GetInfo.part.0+0x114>
          quality += 5000UL / scale;
90009246:	fbb4 f7f7 	udiv	r7, r4, r7
9000924a:	443e      	add	r6, r7
      quantVal = (quantRow >> (8UL * j)) & 0xFFUL;
9000924c:	0e1b      	lsrs	r3, r3, #24
      if (quantVal == 1UL)
9000924e:	2b01      	cmp	r3, #1
90009250:	d030      	beq.n	900092b4 <HAL_JPEG_GetInfo.part.0+0xec>
        scale = (quantVal * 100UL) / ((uint32_t) hjpeg->QuantTable0[JPEG_ZIGZAG_ORDER[i + j]]);
90009252:	78d7      	ldrb	r7, [r2, #3]
90009254:	fb0e f303 	mul.w	r3, lr, r3
90009258:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
9000925a:	5dcf      	ldrb	r7, [r1, r7]
9000925c:	fbb3 f3f7 	udiv	r3, r3, r7
        if (scale <= 100UL)
90009260:	2b64      	cmp	r3, #100	; 0x64
90009262:	d94a      	bls.n	900092fa <HAL_JPEG_GetInfo.part.0+0x132>
          quality += 5000UL / scale;
90009264:	fbb4 f3f3 	udiv	r3, r4, r3
90009268:	441e      	add	r6, r3
  while (i < (JPEG_QUANT_TABLE_SIZE - 3UL))
9000926a:	3204      	adds	r2, #4
        }
      }
    }

    i += 4UL;
    tableAddress ++;
9000926c:	f10c 0c04 	add.w	ip, ip, #4
  while (i < (JPEG_QUANT_TABLE_SIZE - 3UL))
90009270:	4295      	cmp	r5, r2
90009272:	d025      	beq.n	900092c0 <HAL_JPEG_GetInfo.part.0+0xf8>
    quantRow = *tableAddress;
90009274:	f8dc 3000 	ldr.w	r3, [ip]
      quantVal = (quantRow >> (8UL * j)) & 0xFFUL;
90009278:	b2df      	uxtb	r7, r3
      if (quantVal == 1UL)
9000927a:	2f01      	cmp	r7, #1
9000927c:	d02c      	beq.n	900092d8 <HAL_JPEG_GetInfo.part.0+0x110>
        scale = (quantVal * 100UL) / ((uint32_t) hjpeg->QuantTable0[JPEG_ZIGZAG_ORDER[i + j]]);
9000927e:	f892 8000 	ldrb.w	r8, [r2]
90009282:	fb0e f707 	mul.w	r7, lr, r7
90009286:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
90009288:	f811 8008 	ldrb.w	r8, [r1, r8]
9000928c:	fbb7 f7f8 	udiv	r7, r7, r8
        if (scale <= 100UL)
90009290:	2f64      	cmp	r7, #100	; 0x64
90009292:	d92d      	bls.n	900092f0 <HAL_JPEG_GetInfo.part.0+0x128>
          quality += 5000UL / scale;
90009294:	fbb4 f7f7 	udiv	r7, r4, r7
90009298:	443e      	add	r6, r7
      quantVal = (quantRow >> (8UL * j)) & 0xFFUL;
9000929a:	f3c3 2707 	ubfx	r7, r3, #8, #8
      if (quantVal == 1UL)
9000929e:	2f01      	cmp	r7, #1
900092a0:	d1b4      	bne.n	9000920c <HAL_JPEG_GetInfo.part.0+0x44>
      quantVal = (quantRow >> (8UL * j)) & 0xFFUL;
900092a2:	f3c3 4707 	ubfx	r7, r3, #16, #8
        quality += 100UL;
900092a6:	3664      	adds	r6, #100	; 0x64
      if (quantVal == 1UL)
900092a8:	2f01      	cmp	r7, #1
900092aa:	d1c1      	bne.n	90009230 <HAL_JPEG_GetInfo.part.0+0x68>
      quantVal = (quantRow >> (8UL * j)) & 0xFFUL;
900092ac:	0e1b      	lsrs	r3, r3, #24
        quality += 100UL;
900092ae:	3664      	adds	r6, #100	; 0x64
      if (quantVal == 1UL)
900092b0:	2b01      	cmp	r3, #1
900092b2:	d1ce      	bne.n	90009252 <HAL_JPEG_GetInfo.part.0+0x8a>
  while (i < (JPEG_QUANT_TABLE_SIZE - 3UL))
900092b4:	3204      	adds	r2, #4
        quality += 100UL;
900092b6:	3664      	adds	r6, #100	; 0x64
    tableAddress ++;
900092b8:	f10c 0c04 	add.w	ip, ip, #4
  while (i < (JPEG_QUANT_TABLE_SIZE - 3UL))
900092bc:	4295      	cmp	r5, r2
900092be:	d1d9      	bne.n	90009274 <HAL_JPEG_GetInfo.part.0+0xac>
  }

  return (quality / 64UL);
900092c0:	09b6      	lsrs	r6, r6, #6
  return HAL_OK;
900092c2:	2000      	movs	r0, #0
  pInfo->ImageQuality = JPEG_GetQuality(hjpeg);
900092c4:	f8c9 6010 	str.w	r6, [r9, #16]
}
900092c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  else if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == JPEG_CONFR1_NF)
900092cc:	f002 0203 	and.w	r2, r2, #3
900092d0:	2a03      	cmp	r2, #3
900092d2:	d14a      	bne.n	9000936a <HAL_JPEG_GetInfo.part.0+0x1a2>
900092d4:	2430      	movs	r4, #48	; 0x30
900092d6:	e016      	b.n	90009306 <HAL_JPEG_GetInfo.part.0+0x13e>
        quality += 100UL;
900092d8:	3664      	adds	r6, #100	; 0x64
900092da:	e7de      	b.n	9000929a <HAL_JPEG_GetInfo.part.0+0xd2>
          quality += (200UL - scale) / 2UL;
900092dc:	f1c7 07c8 	rsb	r7, r7, #200	; 0xc8
900092e0:	eb06 0657 	add.w	r6, r6, r7, lsr #1
900092e4:	e7b2      	b.n	9000924c <HAL_JPEG_GetInfo.part.0+0x84>
900092e6:	f1c7 07c8 	rsb	r7, r7, #200	; 0xc8
900092ea:	eb06 0657 	add.w	r6, r6, r7, lsr #1
900092ee:	e79b      	b.n	90009228 <HAL_JPEG_GetInfo.part.0+0x60>
900092f0:	f1c7 07c8 	rsb	r7, r7, #200	; 0xc8
900092f4:	eb06 0657 	add.w	r6, r6, r7, lsr #1
900092f8:	e7cf      	b.n	9000929a <HAL_JPEG_GetInfo.part.0+0xd2>
900092fa:	f1c3 03c8 	rsb	r3, r3, #200	; 0xc8
900092fe:	eb06 0653 	add.w	r6, r6, r3, lsr #1
90009302:	e7b2      	b.n	9000926a <HAL_JPEG_GetInfo.part.0+0xa2>
90009304:	2410      	movs	r4, #16
  pInfo->ImageHeight = (hjpeg->Instance->CONFR1 & 0xFFFF0000UL) >> 16;
90009306:	685a      	ldr	r2, [r3, #4]
    pInfo->ColorSpace = JPEG_YCBCR_COLORSPACE;
90009308:	f8c9 4000 	str.w	r4, [r9]
  pInfo->ImageHeight = (hjpeg->Instance->CONFR1 & 0xFFFF0000UL) >> 16;
9000930c:	0c12      	lsrs	r2, r2, #16
9000930e:	f8c9 2008 	str.w	r2, [r9, #8]
  pInfo->ImageWidth  = (hjpeg->Instance->CONFR3 & 0xFFFF0000UL) >> 16;
90009312:	68da      	ldr	r2, [r3, #12]
    yblockNb  = (hjpeg->Instance->CONFR4 & JPEG_CONFR4_NB) >> 4;
90009314:	691d      	ldr	r5, [r3, #16]
    cBblockNb = (hjpeg->Instance->CONFR5 & JPEG_CONFR5_NB) >> 4;
90009316:	695f      	ldr	r7, [r3, #20]
  pInfo->ImageWidth  = (hjpeg->Instance->CONFR3 & 0xFFFF0000UL) >> 16;
90009318:	0c12      	lsrs	r2, r2, #16
    cRblockNb = (hjpeg->Instance->CONFR6 & JPEG_CONFR6_NB) >> 4;
9000931a:	699e      	ldr	r6, [r3, #24]
    if ((yblockNb == 1UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
9000931c:	f017 0ff0 	tst.w	r7, #240	; 0xf0
  pInfo->ImageWidth  = (hjpeg->Instance->CONFR3 & 0xFFFF0000UL) >> 16;
90009320:	f8c9 200c 	str.w	r2, [r9, #12]
    cRblockNb = (hjpeg->Instance->CONFR6 & JPEG_CONFR6_NB) >> 4;
90009324:	ea4f 1616 	mov.w	r6, r6, lsr #4
    yblockNb  = (hjpeg->Instance->CONFR4 & JPEG_CONFR4_NB) >> 4;
90009328:	ea4f 1215 	mov.w	r2, r5, lsr #4
9000932c:	f3c5 1503 	ubfx	r5, r5, #4, #4
    cBblockNb = (hjpeg->Instance->CONFR5 & JPEG_CONFR5_NB) >> 4;
90009330:	ea4f 1c17 	mov.w	ip, r7, lsr #4
    if ((yblockNb == 1UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
90009334:	d108      	bne.n	90009348 <HAL_JPEG_GetInfo.part.0+0x180>
90009336:	2d01      	cmp	r5, #1
90009338:	d106      	bne.n	90009348 <HAL_JPEG_GetInfo.part.0+0x180>
9000933a:	f016 0f0f 	tst.w	r6, #15
9000933e:	bf0c      	ite	eq
90009340:	2401      	moveq	r4, #1
90009342:	2400      	movne	r4, #0
90009344:	0064      	lsls	r4, r4, #1
90009346:	e754      	b.n	900091f2 <HAL_JPEG_GetInfo.part.0+0x2a>
    else if ((yblockNb == 0UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
90009348:	ea42 020c 	orr.w	r2, r2, ip
9000934c:	f012 040f 	ands.w	r4, r2, #15
90009350:	f43f af4f 	beq.w	900091f2 <HAL_JPEG_GetInfo.part.0+0x2a>
    else if ((yblockNb == 3UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
90009354:	ea4c 0206 	orr.w	r2, ip, r6
90009358:	f3c2 0203 	ubfx	r2, r2, #0, #4
9000935c:	2d03      	cmp	r5, #3
9000935e:	bf08      	it	eq
90009360:	2a00      	cmpeq	r2, #0
90009362:	bf0c      	ite	eq
90009364:	2401      	moveq	r4, #1
90009366:	2400      	movne	r4, #0
90009368:	e743      	b.n	900091f2 <HAL_JPEG_GetInfo.part.0+0x2a>
    return HAL_ERROR;
9000936a:	2001      	movs	r0, #1
}
9000936c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
90009370:	90026734 	.word	0x90026734

90009374 <HAL_JPEG_Init>:
  if (hjpeg == NULL)
90009374:	2800      	cmp	r0, #0
90009376:	f000 810b 	beq.w	90009590 <HAL_JPEG_Init+0x21c>
{
9000937a:	b570      	push	{r4, r5, r6, lr}
  if (hjpeg->State == HAL_JPEG_STATE_RESET)
9000937c:	f890 304d 	ldrb.w	r3, [r0, #77]	; 0x4d
90009380:	4604      	mov	r4, r0
90009382:	f003 02ff 	and.w	r2, r3, #255	; 0xff
90009386:	2b00      	cmp	r3, #0
90009388:	f000 80fd 	beq.w	90009586 <HAL_JPEG_Init+0x212>
  __HAL_JPEG_ENABLE(hjpeg);
9000938c:	6822      	ldr	r2, [r4, #0]
  hjpeg->State = HAL_JPEG_STATE_BUSY;
9000938e:	2102      	movs	r1, #2
  hjpeg->QuantTable2 = NULL;
90009390:	2300      	movs	r3, #0
  hjpeg->QuantTable0 = (uint8_t *)((uint32_t)JPEG_LUM_QuantTable);
90009392:	4880      	ldr	r0, [pc, #512]	; (90009594 <HAL_JPEG_Init+0x220>)
  hjpeg->State = HAL_JPEG_STATE_BUSY;
90009394:	f884 104d 	strb.w	r1, [r4, #77]	; 0x4d
  __HAL_JPEG_ENABLE(hjpeg);
90009398:	6b11      	ldr	r1, [r2, #48]	; 0x30
9000939a:	f041 0101 	orr.w	r1, r1, #1
9000939e:	6311      	str	r1, [r2, #48]	; 0x30
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
900093a0:	6811      	ldr	r1, [r2, #0]
900093a2:	f021 0101 	bic.w	r1, r1, #1
900093a6:	6011      	str	r1, [r2, #0]
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
900093a8:	6b11      	ldr	r1, [r2, #48]	; 0x30
900093aa:	f021 017e 	bic.w	r1, r1, #126	; 0x7e
900093ae:	6311      	str	r1, [r2, #48]	; 0x30
  hjpeg->Instance->CR |= JPEG_CR_IFF;
900093b0:	6b11      	ldr	r1, [r2, #48]	; 0x30
900093b2:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
900093b6:	6311      	str	r1, [r2, #48]	; 0x30
  hjpeg->Instance->CR |= JPEG_CR_OFF;
900093b8:	6b11      	ldr	r1, [r2, #48]	; 0x30
900093ba:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
900093be:	6311      	str	r1, [r2, #48]	; 0x30
  __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
900093c0:	6b91      	ldr	r1, [r2, #56]	; 0x38
900093c2:	f041 0160 	orr.w	r1, r1, #96	; 0x60
900093c6:	6391      	str	r1, [r2, #56]	; 0x38
  hjpeg->QuantTable1 = (uint8_t *)((uint32_t)JPEG_CHROM_QuantTable);
900093c8:	4973      	ldr	r1, [pc, #460]	; (90009598 <HAL_JPEG_Init+0x224>)
  hjpeg->QuantTable0 = (uint8_t *)((uint32_t)JPEG_LUM_QuantTable);
900093ca:	63e0      	str	r0, [r4, #60]	; 0x3c
    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
900093cc:	2001      	movs	r0, #1
  hjpeg->QuantTable3 = NULL;
900093ce:	64a3      	str	r3, [r4, #72]	; 0x48
  hjpeg->QuantTable1 = (uint8_t *)((uint32_t)JPEG_CHROM_QuantTable);
900093d0:	e9c4 1310 	strd	r1, r3, [r4, #64]	; 0x40
    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
900093d4:	f8c2 336c 	str.w	r3, [r2, #876]	; 0x36c
900093d8:	f04f 3101 	mov.w	r1, #16843009	; 0x1010101
900093dc:	4b6f      	ldr	r3, [pc, #444]	; (9000959c <HAL_JPEG_Init+0x228>)
900093de:	f8c2 0368 	str.w	r0, [r2, #872]	; 0x368
900093e2:	f8c2 1364 	str.w	r1, [r2, #868]	; 0x364
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
900093e6:	486e      	ldr	r0, [pc, #440]	; (900095a0 <HAL_JPEG_Init+0x22c>)
    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
900093e8:	f8c2 3360 	str.w	r3, [r2, #864]	; 0x360
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
900093ec:	4b6d      	ldr	r3, [pc, #436]	; (900095a4 <HAL_JPEG_Init+0x230>)
900093ee:	f8c2 0378 	str.w	r0, [r2, #888]	; 0x378
900093f2:	496d      	ldr	r1, [pc, #436]	; (900095a8 <HAL_JPEG_Init+0x234>)
900093f4:	f8c2 3374 	str.w	r3, [r2, #884]	; 0x374
    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
900093f8:	4b6c      	ldr	r3, [pc, #432]	; (900095ac <HAL_JPEG_Init+0x238>)
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
900093fa:	f8c2 1370 	str.w	r1, [r2, #880]	; 0x370
    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
900093fe:	486c      	ldr	r0, [pc, #432]	; (900095b0 <HAL_JPEG_Init+0x23c>)
90009400:	f8c2 3388 	str.w	r3, [r2, #904]	; 0x388
90009404:	496b      	ldr	r1, [pc, #428]	; (900095b4 <HAL_JPEG_Init+0x240>)
90009406:	4b6c      	ldr	r3, [pc, #432]	; (900095b8 <HAL_JPEG_Init+0x244>)
90009408:	f8c2 0384 	str.w	r0, [r2, #900]	; 0x384
9000940c:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
90009410:	f8c2 337c 	str.w	r3, [r2, #892]	; 0x37c
  value = value | (((uint32_t)HuffTableAC0->HuffVal[161] & 0xFFUL) << 8) | ((uint32_t)HuffTableAC0->HuffVal[160] & 0xFFUL);
90009414:	f64f 23f9 	movw	r3, #64249	; 0xfaf9
  value = *address & 0xFFFF0000U;
90009418:	f8d2 042c 	ldr.w	r0, [r2, #1068]	; 0x42c
9000941c:	4967      	ldr	r1, [pc, #412]	; (900095bc <HAL_JPEG_Init+0x248>)
9000941e:	4001      	ands	r1, r0
  address--; /* address = hjpeg->Instance->DHTMEM + 50*/
90009420:	f502 6085 	add.w	r0, r2, #1064	; 0x428
  value = value | (((uint32_t)HuffTableAC0->HuffVal[161] & 0xFFUL) << 8) | ((uint32_t)HuffTableAC0->HuffVal[160] & 0xFFUL);
90009424:	430b      	orrs	r3, r1
  *address = value;
90009426:	4966      	ldr	r1, [pc, #408]	; (900095c0 <HAL_JPEG_Init+0x24c>)
90009428:	f1a1 06a0 	sub.w	r6, r1, #160	; 0xa0
9000942c:	f8c2 342c 	str.w	r3, [r2, #1068]	; 0x42c
               (((uint32_t)HuffTableAC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
90009430:	f891 30ae 	ldrb.w	r3, [r1, #174]	; 0xae
  while (index > 3UL)
90009434:	3904      	subs	r1, #4
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
90009436:	f891 e0b3 	ldrb.w	lr, [r1, #179]	; 0xb3
               (((uint32_t)HuffTableAC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
9000943a:	041b      	lsls	r3, r3, #16
               ((uint32_t)HuffTableAC0->HuffVal[index - 4UL] & 0xFFUL);
9000943c:	f891 c0b0 	ldrb.w	ip, [r1, #176]	; 0xb0
               (((uint32_t)HuffTableAC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
90009440:	f891 50b1 	ldrb.w	r5, [r1, #177]	; 0xb1
  while (index > 3UL)
90009444:	42b1      	cmp	r1, r6
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
90009446:	ea43 630e 	orr.w	r3, r3, lr, lsl #24
               (((uint32_t)HuffTableAC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
9000944a:	ea43 030c 	orr.w	r3, r3, ip
9000944e:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
90009452:	f840 3904 	str.w	r3, [r0], #-4
  while (index > 3UL)
90009456:	d1eb      	bne.n	90009430 <HAL_JPEG_Init+0xbc>
  value = *address & 0x0000FFFFU;
90009458:	f8d2 342c 	ldr.w	r3, [r2, #1068]	; 0x42c
    *address = (((uint32_t)HuffTableDC1->Bits[index + 1UL] & 0xFFUL) << 24) |
9000945c:	f04f 3101 	mov.w	r1, #16843009	; 0x1010101
  value = *address & 0xFFFF0000U;
90009460:	4856      	ldr	r0, [pc, #344]	; (900095bc <HAL_JPEG_Init+0x248>)
    *address = (((uint32_t)HuffTableDC1->Bits[index + 1UL] & 0xFFUL) << 24) |
90009462:	2501      	movs	r5, #1
  value = *address & 0x0000FFFFU;
90009464:	b29b      	uxth	r3, r3
  value = value | (((uint32_t)HuffTableDC1->Bits[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableDC1->Bits[0] & 0xFFUL) << 16);
90009466:	f043 7340 	orr.w	r3, r3, #50331648	; 0x3000000
  *address = value;
9000946a:	f8c2 342c 	str.w	r3, [r2, #1068]	; 0x42c
  value = *address & 0xFFFF0000U;
9000946e:	f8d2 343c 	ldr.w	r3, [r2, #1084]	; 0x43c
90009472:	4003      	ands	r3, r0
  *address = value;
90009474:	f8c2 343c 	str.w	r3, [r2, #1084]	; 0x43c
    *address = (((uint32_t)HuffTableDC1->Bits[index + 1UL] & 0xFFUL) << 24) |
90009478:	f8c2 5438 	str.w	r5, [r2, #1080]	; 0x438
9000947c:	f8c2 1434 	str.w	r1, [r2, #1076]	; 0x434
90009480:	f8c2 1430 	str.w	r1, [r2, #1072]	; 0x430
  value = value | (((uint32_t)HuffTableDC1->HuffVal[11] & 0xFFUL) << 8) | ((uint32_t)HuffTableDC1->HuffVal[10] & 0xFFUL);
90009484:	f640 310a 	movw	r1, #2826	; 0xb0a
  value = *address & 0x0000FFFFUL;
90009488:	f8d2 343c 	ldr.w	r3, [r2, #1084]	; 0x43c
9000948c:	b29b      	uxth	r3, r3
  value = value | (((uint32_t)HuffTableDC1->HuffVal[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableDC1->HuffVal[0] & 0xFFUL) <<
9000948e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
  *address = value;
90009492:	f8c2 343c 	str.w	r3, [r2, #1084]	; 0x43c
  value = *address & 0xFFFF0000UL;
90009496:	f8d2 3448 	ldr.w	r3, [r2, #1096]	; 0x448
9000949a:	4003      	ands	r3, r0
  value = value | (((uint32_t)HuffTableDC1->HuffVal[11] & 0xFFUL) << 8) | ((uint32_t)HuffTableDC1->HuffVal[10] & 0xFFUL);
9000949c:	4319      	orrs	r1, r3
    *address = (((uint32_t)HuffTableDC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
9000949e:	4b49      	ldr	r3, [pc, #292]	; (900095c4 <HAL_JPEG_Init+0x250>)
  *address = value;
900094a0:	f8c2 1448 	str.w	r1, [r2, #1096]	; 0x448
  value = value | (((uint32_t)HuffTableAC1->Bits[15] & 0xFFUL) << 8) | ((uint32_t)HuffTableAC1->Bits[14] & 0xFFUL);
900094a4:	f247 7102 	movw	r1, #30466	; 0x7702
    *address = (((uint32_t)HuffTableDC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
900094a8:	f8c2 3444 	str.w	r3, [r2, #1092]	; 0x444
900094ac:	f1a3 3304 	sub.w	r3, r3, #67372036	; 0x4040404
900094b0:	f8c2 3440 	str.w	r3, [r2, #1088]	; 0x440
  value = *address & 0x0000FFFFU;
900094b4:	f8d2 3448 	ldr.w	r3, [r2, #1096]	; 0x448
900094b8:	b29b      	uxth	r3, r3
  value = value | (((uint32_t)HuffTableAC1->Bits[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableAC1->Bits[0] & 0xFFUL) << 16);
900094ba:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
  *address = value;
900094be:	f8c2 3448 	str.w	r3, [r2, #1096]	; 0x448
  value = *address & 0xFFFF0000U;
900094c2:	f8d2 3458 	ldr.w	r3, [r2, #1112]	; 0x458
900094c6:	4003      	ands	r3, r0
    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
900094c8:	483f      	ldr	r0, [pc, #252]	; (900095c8 <HAL_JPEG_Init+0x254>)
  value = value | (((uint32_t)HuffTableAC1->Bits[15] & 0xFFUL) << 8) | ((uint32_t)HuffTableAC1->Bits[14] & 0xFFUL);
900094ca:	4319      	orrs	r1, r3
    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
900094cc:	4b3f      	ldr	r3, [pc, #252]	; (900095cc <HAL_JPEG_Init+0x258>)
  *address = value;
900094ce:	f8c2 1458 	str.w	r1, [r2, #1112]	; 0x458
    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
900094d2:	493f      	ldr	r1, [pc, #252]	; (900095d0 <HAL_JPEG_Init+0x25c>)
900094d4:	f8c2 0454 	str.w	r0, [r2, #1108]	; 0x454
  address = (hjpeg->Instance->DHTMEM + 102);
900094d8:	f502 609f 	add.w	r0, r2, #1272	; 0x4f8
    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
900094dc:	f8c2 1450 	str.w	r1, [r2, #1104]	; 0x450
900094e0:	f8c2 344c 	str.w	r3, [r2, #1100]	; 0x44c
  value = *address & 0x0000FFFFUL;
900094e4:	f8d2 3458 	ldr.w	r3, [r2, #1112]	; 0x458
  value = value | (((uint32_t)HuffTableAC1->HuffVal[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableAC1->HuffVal[0] & 0xFFUL) <<
900094e8:	493a      	ldr	r1, [pc, #232]	; (900095d4 <HAL_JPEG_Init+0x260>)
  value = *address & 0x0000FFFFUL;
900094ea:	b29b      	uxth	r3, r3
900094ec:	f1a1 06a0 	sub.w	r6, r1, #160	; 0xa0
  value = value | (((uint32_t)HuffTableAC1->HuffVal[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableAC1->HuffVal[0] & 0xFFUL) <<
900094f0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
  *address = value;
900094f4:	f8c2 3458 	str.w	r3, [r2, #1112]	; 0x458
               (((uint32_t)HuffTableAC1->HuffVal[index] & 0xFFUL) << 16) |
900094f8:	f891 30b0 	ldrb.w	r3, [r1, #176]	; 0xb0
  while (index > 3UL)
900094fc:	3904      	subs	r1, #4
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
900094fe:	f891 50b5 	ldrb.w	r5, [r1, #181]	; 0xb5
               (((uint32_t)HuffTableAC1->HuffVal[index] & 0xFFUL) << 16) |
90009502:	041b      	lsls	r3, r3, #16
               ((uint32_t)HuffTableAC1->HuffVal[index - 2UL] & 0xFFUL);
90009504:	f891 e0b2 	ldrb.w	lr, [r1, #178]	; 0xb2
               (((uint32_t)HuffTableAC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
90009508:	f891 c0b3 	ldrb.w	ip, [r1, #179]	; 0xb3
  while (index > 3UL)
9000950c:	42b1      	cmp	r1, r6
               (((uint32_t)HuffTableAC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
9000950e:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
90009512:	ea43 030e 	orr.w	r3, r3, lr
90009516:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
9000951a:	f840 3904 	str.w	r3, [r0], #-4
  while (index > 3UL)
9000951e:	d1eb      	bne.n	900094f8 <HAL_JPEG_Init+0x184>
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACLUM_HuffTable,
90009520:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
90009524:	4926      	ldr	r1, [pc, #152]	; (900095c0 <HAL_JPEG_Init+0x24c>)
90009526:	4620      	mov	r0, r4
90009528:	f7ff fd3a 	bl	90008fa0 <JPEG_Set_HuffAC_Mem>
  if (error != HAL_OK)
9000952c:	b118      	cbz	r0, 90009536 <HAL_JPEG_Init+0x1c2>
    hjpeg->ErrorCode = HAL_JPEG_ERROR_HUFF_TABLE;
9000952e:	2301      	movs	r3, #1
    return HAL_ERROR;
90009530:	4618      	mov	r0, r3
    hjpeg->ErrorCode = HAL_JPEG_ERROR_HUFF_TABLE;
90009532:	6523      	str	r3, [r4, #80]	; 0x50
}
90009534:	bd70      	pop	{r4, r5, r6, pc}
                              (hjpeg->Instance->HUFFENC_AC1));
90009536:	6822      	ldr	r2, [r4, #0]
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACCHROM_HuffTable,
90009538:	4620      	mov	r0, r4
9000953a:	4926      	ldr	r1, [pc, #152]	; (900095d4 <HAL_JPEG_Init+0x260>)
9000953c:	f502 62cc 	add.w	r2, r2, #1632	; 0x660
90009540:	f7ff fd2e 	bl	90008fa0 <JPEG_Set_HuffAC_Mem>
  if (error != HAL_OK)
90009544:	2800      	cmp	r0, #0
90009546:	d1f2      	bne.n	9000952e <HAL_JPEG_Init+0x1ba>
                              hjpeg->Instance->HUFFENC_DC0);
90009548:	6822      	ldr	r2, [r4, #0]
  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCLUM_HuffTable,
9000954a:	4620      	mov	r0, r4
9000954c:	4922      	ldr	r1, [pc, #136]	; (900095d8 <HAL_JPEG_Init+0x264>)
9000954e:	f502 62f8 	add.w	r2, r2, #1984	; 0x7c0
90009552:	f7ff fc7b 	bl	90008e4c <JPEG_Set_HuffDC_Mem>
  if (error != HAL_OK)
90009556:	2800      	cmp	r0, #0
90009558:	d1e9      	bne.n	9000952e <HAL_JPEG_Init+0x1ba>
                              hjpeg->Instance->HUFFENC_DC1);
9000955a:	6822      	ldr	r2, [r4, #0]
  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCCHROM_HuffTable,
9000955c:	4620      	mov	r0, r4
9000955e:	491f      	ldr	r1, [pc, #124]	; (900095dc <HAL_JPEG_Init+0x268>)
90009560:	f502 62fc 	add.w	r2, r2, #2016	; 0x7e0
90009564:	f7ff fc72 	bl	90008e4c <JPEG_Set_HuffDC_Mem>
  if (JPEG_Set_HuffEnc_Mem(hjpeg) != HAL_OK)
90009568:	2800      	cmp	r0, #0
9000956a:	d1e0      	bne.n	9000952e <HAL_JPEG_Init+0x1ba>
  hjpeg->Instance->CONFR1 |= JPEG_CONFR1_HDR;
9000956c:	6822      	ldr	r2, [r4, #0]
  hjpeg->State = HAL_JPEG_STATE_READY;
9000956e:	2101      	movs	r1, #1
  hjpeg->Instance->CONFR1 |= JPEG_CONFR1_HDR;
90009570:	6853      	ldr	r3, [r2, #4]
90009572:	f443 7380 	orr.w	r3, r3, #256	; 0x100
90009576:	6053      	str	r3, [r2, #4]
  hjpeg->JpegInCount = 0;
90009578:	6220      	str	r0, [r4, #32]
  hjpeg->JpegOutCount = 0;
9000957a:	6260      	str	r0, [r4, #36]	; 0x24
  hjpeg->State = HAL_JPEG_STATE_READY;
9000957c:	f884 104d 	strb.w	r1, [r4, #77]	; 0x4d
  hjpeg->ErrorCode = HAL_JPEG_ERROR_NONE;
90009580:	6520      	str	r0, [r4, #80]	; 0x50
  hjpeg->Context = 0;
90009582:	6560      	str	r0, [r4, #84]	; 0x54
}
90009584:	bd70      	pop	{r4, r5, r6, pc}
    hjpeg->Lock = HAL_UNLOCKED;
90009586:	f880 204c 	strb.w	r2, [r0, #76]	; 0x4c
    HAL_JPEG_MspInit(hjpeg);
9000958a:	f7fb f8e7 	bl	9000475c <HAL_JPEG_MspInit>
9000958e:	e6fd      	b.n	9000938c <HAL_JPEG_Init+0x18>
    return HAL_ERROR;
90009590:	2001      	movs	r0, #1
}
90009592:	4770      	bx	lr
90009594:	900266f4 	.word	0x900266f4
90009598:	9002667c 	.word	0x9002667c
9000959c:	01050100 	.word	0x01050100
900095a0:	0b0a0908 	.word	0x0b0a0908
900095a4:	07060504 	.word	0x07060504
900095a8:	03020100 	.word	0x03020100
900095ac:	7d010000 	.word	0x7d010000
900095b0:	04040505 	.word	0x04040505
900095b4:	03040203 	.word	0x03040203
900095b8:	03010200 	.word	0x03010200
900095bc:	ffff0000 	.word	0xffff0000
900095c0:	900265c8 	.word	0x900265c8
900095c4:	09080706 	.word	0x09080706
900095c8:	01000404 	.word	0x01000404
900095cc:	04040201 	.word	0x04040201
900095d0:	05070403 	.word	0x05070403
900095d4:	90026514 	.word	0x90026514
900095d8:	900266d8 	.word	0x900266d8
900095dc:	900266bc 	.word	0x900266bc

900095e0 <HAL_JPEG_Decode_DMA>:
  if ((hjpeg == NULL) || (pDataIn == NULL) || (pDataOutMCU == NULL))
900095e0:	2b00      	cmp	r3, #0
900095e2:	bf18      	it	ne
900095e4:	2900      	cmpne	r1, #0
900095e6:	d03b      	beq.n	90009660 <HAL_JPEG_Decode_DMA+0x80>
{
900095e8:	b570      	push	{r4, r5, r6, lr}
  if ((hjpeg == NULL) || (pDataIn == NULL) || (pDataOutMCU == NULL))
900095ea:	fab0 f580 	clz	r5, r0
900095ee:	4604      	mov	r4, r0
900095f0:	096d      	lsrs	r5, r5, #5
900095f2:	b330      	cbz	r0, 90009642 <HAL_JPEG_Decode_DMA+0x62>
  __HAL_LOCK(hjpeg);
900095f4:	f890 c04c 	ldrb.w	ip, [r0, #76]	; 0x4c
900095f8:	f1bc 0f01 	cmp.w	ip, #1
900095fc:	d02e      	beq.n	9000965c <HAL_JPEG_Decode_DMA+0x7c>
  if (hjpeg->State == HAL_JPEG_STATE_READY)
900095fe:	f890 c04d 	ldrb.w	ip, [r0, #77]	; 0x4d
  __HAL_LOCK(hjpeg);
90009602:	f04f 0e01 	mov.w	lr, #1
  if (hjpeg->State == HAL_JPEG_STATE_READY)
90009606:	45f4      	cmp	ip, lr
90009608:	fa5f f68c 	uxtb.w	r6, ip
  __HAL_LOCK(hjpeg);
9000960c:	f880 e04c 	strb.w	lr, [r0, #76]	; 0x4c
  if (hjpeg->State == HAL_JPEG_STATE_READY)
90009610:	d119      	bne.n	90009646 <HAL_JPEG_Decode_DMA+0x66>
    hjpeg->InDataLength = InDataLength;
90009612:	6282      	str	r2, [r0, #40]	; 0x28
    hjpeg->pJpegOutBuffPtr = pDataOutMCU;
90009614:	e9c0 1306 	strd	r1, r3, [r0, #24]
    hjpeg->OutDataLength = OutDataLength;
90009618:	9b04      	ldr	r3, [sp, #16]
9000961a:	62c3      	str	r3, [r0, #44]	; 0x2c
    hjpeg->State = HAL_JPEG_STATE_BUSY_DECODING;
9000961c:	2304      	movs	r3, #4
9000961e:	f880 304d 	strb.w	r3, [r0, #77]	; 0x4d
    hjpeg->Context &= ~(JPEG_CONTEXT_OPERATION_MASK | JPEG_CONTEXT_METHOD_MASK);
90009622:	6d43      	ldr	r3, [r0, #84]	; 0x54
90009624:	f023 030f 	bic.w	r3, r3, #15
90009628:	6543      	str	r3, [r0, #84]	; 0x54
    hjpeg->Context |= (JPEG_CONTEXT_DECODE | JPEG_CONTEXT_DMA);
9000962a:	6d43      	ldr	r3, [r0, #84]	; 0x54
9000962c:	f043 030e 	orr.w	r3, r3, #14
90009630:	6543      	str	r3, [r0, #84]	; 0x54
    hjpeg->JpegInCount = 0;
90009632:	6205      	str	r5, [r0, #32]
    hjpeg->JpegOutCount = 0;
90009634:	6245      	str	r5, [r0, #36]	; 0x24
    JPEG_Init_Process(hjpeg);
90009636:	f7ff fd3d 	bl	900090b4 <JPEG_Init_Process>
    if (JPEG_DMA_StartProcess(hjpeg) != HAL_OK)
9000963a:	f7ff fd79 	bl	90009130 <JPEG_DMA_StartProcess>
9000963e:	b930      	cbnz	r0, 9000964e <HAL_JPEG_Decode_DMA+0x6e>
}
90009640:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
90009642:	2001      	movs	r0, #1
}
90009644:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_BUSY;
90009646:	2002      	movs	r0, #2
    __HAL_UNLOCK(hjpeg);
90009648:	f884 504c 	strb.w	r5, [r4, #76]	; 0x4c
}
9000964c:	bd70      	pop	{r4, r5, r6, pc}
      hjpeg->State = HAL_JPEG_STATE_ERROR;
9000964e:	2306      	movs	r3, #6
      return HAL_ERROR;
90009650:	4630      	mov	r0, r6
      __HAL_UNLOCK(hjpeg);
90009652:	f884 504c 	strb.w	r5, [r4, #76]	; 0x4c
      hjpeg->State = HAL_JPEG_STATE_ERROR;
90009656:	f884 304d 	strb.w	r3, [r4, #77]	; 0x4d
}
9000965a:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hjpeg);
9000965c:	2002      	movs	r0, #2
}
9000965e:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
90009660:	2001      	movs	r0, #1
}
90009662:	4770      	bx	lr

90009664 <HAL_JPEG_Pause>:
  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
90009664:	6d43      	ldr	r3, [r0, #84]	; 0x54
90009666:	f003 030c 	and.w	r3, r3, #12
9000966a:	2b0c      	cmp	r3, #12
9000966c:	d01a      	beq.n	900096a4 <HAL_JPEG_Pause+0x40>
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
9000966e:	6d43      	ldr	r3, [r0, #84]	; 0x54
90009670:	f003 030c 	and.w	r3, r3, #12
90009674:	2b08      	cmp	r3, #8
90009676:	d001      	beq.n	9000967c <HAL_JPEG_Pause+0x18>
}
90009678:	2000      	movs	r0, #0
9000967a:	4770      	bx	lr
    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
9000967c:	07ca      	lsls	r2, r1, #31
9000967e:	d41f      	bmi.n	900096c0 <HAL_JPEG_Pause+0x5c>
90009680:	f04f 3cff 	mov.w	ip, #4294967295
90009684:	f06f 0228 	mvn.w	r2, #40	; 0x28
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
90009688:	078b      	lsls	r3, r1, #30
9000968a:	d504      	bpl.n	90009696 <HAL_JPEG_Pause+0x32>
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_OUTPUT;
9000968c:	6d43      	ldr	r3, [r0, #84]	; 0x54
9000968e:	4694      	mov	ip, r2
90009690:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
90009694:	6543      	str	r3, [r0, #84]	; 0x54
    __HAL_JPEG_DISABLE_IT(hjpeg, mask);
90009696:	6802      	ldr	r2, [r0, #0]
}
90009698:	2000      	movs	r0, #0
    __HAL_JPEG_DISABLE_IT(hjpeg, mask);
9000969a:	6b13      	ldr	r3, [r2, #48]	; 0x30
9000969c:	ea03 030c 	and.w	r3, r3, ip
900096a0:	6313      	str	r3, [r2, #48]	; 0x30
}
900096a2:	4770      	bx	lr
    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
900096a4:	07cb      	lsls	r3, r1, #31
900096a6:	d503      	bpl.n	900096b0 <HAL_JPEG_Pause+0x4c>
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_INPUT;
900096a8:	6d43      	ldr	r3, [r0, #84]	; 0x54
900096aa:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
900096ae:	6543      	str	r3, [r0, #84]	; 0x54
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
900096b0:	0789      	lsls	r1, r1, #30
900096b2:	d5e1      	bpl.n	90009678 <HAL_JPEG_Pause+0x14>
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_OUTPUT;
900096b4:	6d43      	ldr	r3, [r0, #84]	; 0x54
900096b6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
900096ba:	6543      	str	r3, [r0, #84]	; 0x54
}
900096bc:	2000      	movs	r0, #0
900096be:	4770      	bx	lr
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_INPUT;
900096c0:	6d43      	ldr	r3, [r0, #84]	; 0x54
900096c2:	f06f 0c06 	mvn.w	ip, #6
900096c6:	f06f 022e 	mvn.w	r2, #46	; 0x2e
900096ca:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
900096ce:	6543      	str	r3, [r0, #84]	; 0x54
      mask |= (JPEG_IT_IFT | JPEG_IT_IFNF);
900096d0:	e7da      	b.n	90009688 <HAL_JPEG_Pause+0x24>
900096d2:	bf00      	nop

900096d4 <HAL_JPEG_ConfigInputBuffer>:
  hjpeg->pJpegInBuffPtr =  pNewInputBuffer;
900096d4:	6181      	str	r1, [r0, #24]
  hjpeg->InDataLength = InDataLength;
900096d6:	6282      	str	r2, [r0, #40]	; 0x28
}
900096d8:	4770      	bx	lr
900096da:	bf00      	nop

900096dc <HAL_JPEG_ConfigOutputBuffer>:
  hjpeg->pJpegOutBuffPtr = pNewOutputBuffer;
900096dc:	61c1      	str	r1, [r0, #28]
  hjpeg->OutDataLength = OutDataLength;
900096de:	62c2      	str	r2, [r0, #44]	; 0x2c
}
900096e0:	4770      	bx	lr
900096e2:	bf00      	nop

900096e4 <HAL_JPEG_EncodeCpltCallback>:
900096e4:	4770      	bx	lr
900096e6:	bf00      	nop

900096e8 <JPEG_MDMAErrorCallback>:
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((MDMA_HandleTypeDef *)hmdma)->Parent;
900096e8:	6c00      	ldr	r0, [r0, #64]	; 0x40
  hjpeg->State = HAL_JPEG_STATE_READY;
900096ea:	2101      	movs	r1, #1
{
900096ec:	b508      	push	{r3, lr}
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
900096ee:	6803      	ldr	r3, [r0, #0]
900096f0:	681a      	ldr	r2, [r3, #0]
900096f2:	f022 0201 	bic.w	r2, r2, #1
900096f6:	601a      	str	r2, [r3, #0]
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
900096f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
900096fa:	f022 027e 	bic.w	r2, r2, #126	; 0x7e
900096fe:	631a      	str	r2, [r3, #48]	; 0x30
  hjpeg->State = HAL_JPEG_STATE_READY;
90009700:	f880 104d 	strb.w	r1, [r0, #77]	; 0x4d
  hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
90009704:	6d03      	ldr	r3, [r0, #80]	; 0x50
90009706:	f043 0304 	orr.w	r3, r3, #4
9000970a:	6503      	str	r3, [r0, #80]	; 0x50
  HAL_JPEG_ErrorCallback(hjpeg);
9000970c:	f7f8 f896 	bl	9000183c <HAL_JPEG_ErrorCallback>
}
90009710:	bd08      	pop	{r3, pc}
90009712:	bf00      	nop

90009714 <JPEG_MDMAInCpltCallback>:
{
90009714:	b530      	push	{r4, r5, lr}
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((MDMA_HandleTypeDef *)hmdma)->Parent;
90009716:	6c04      	ldr	r4, [r0, #64]	; 0x40
  if ((hjpeg->Context & (JPEG_CONTEXT_METHOD_MASK | JPEG_CONTEXT_ENDING_DMA)) == JPEG_CONTEXT_DMA)
90009718:	f248 010c 	movw	r1, #32780	; 0x800c
{
9000971c:	b083      	sub	sp, #12
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
9000971e:	6822      	ldr	r2, [r4, #0]
90009720:	6b13      	ldr	r3, [r2, #48]	; 0x30
90009722:	f023 037e 	bic.w	r3, r3, #126	; 0x7e
90009726:	6313      	str	r3, [r2, #48]	; 0x30
  if ((hjpeg->Context & (JPEG_CONTEXT_METHOD_MASK | JPEG_CONTEXT_ENDING_DMA)) == JPEG_CONTEXT_DMA)
90009728:	6d63      	ldr	r3, [r4, #84]	; 0x54
9000972a:	400b      	ands	r3, r1
9000972c:	2b0c      	cmp	r3, #12
9000972e:	d001      	beq.n	90009734 <JPEG_MDMAInCpltCallback+0x20>
}
90009730:	b003      	add	sp, #12
90009732:	bd30      	pop	{r4, r5, pc}
    hjpeg->JpegInCount = hjpeg->InDataLength - (hmdma->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
90009734:	6802      	ldr	r2, [r0, #0]
    HAL_JPEG_GetDataCallback(hjpeg, hjpeg->JpegInCount);
90009736:	4620      	mov	r0, r4
    hjpeg->JpegInCount = hjpeg->InDataLength - (hmdma->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
90009738:	6aa3      	ldr	r3, [r4, #40]	; 0x28
9000973a:	6952      	ldr	r2, [r2, #20]
    inXfrSize = hjpeg->hdmain->Init.BufferTransferLength;
9000973c:	6b21      	ldr	r1, [r4, #48]	; 0x30
    hjpeg->JpegInCount = hjpeg->InDataLength - (hmdma->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
9000973e:	f3c2 0210 	ubfx	r2, r2, #0, #17
    inXfrSize = hjpeg->hdmain->Init.BufferTransferLength;
90009742:	6a8d      	ldr	r5, [r1, #40]	; 0x28
    hjpeg->JpegInCount = hjpeg->InDataLength - (hmdma->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
90009744:	1a9b      	subs	r3, r3, r2
90009746:	6223      	str	r3, [r4, #32]
    HAL_JPEG_GetDataCallback(hjpeg, hjpeg->JpegInCount);
90009748:	6a21      	ldr	r1, [r4, #32]
9000974a:	f7f8 f80f 	bl	9000176c <HAL_JPEG_GetDataCallback>
    if (hjpeg->InDataLength >= inXfrSize)
9000974e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
90009750:	42ab      	cmp	r3, r5
90009752:	d311      	bcc.n	90009778 <JPEG_MDMAInCpltCallback+0x64>
      if (inXfrSize == 0UL)
90009754:	b305      	cbz	r5, 90009798 <JPEG_MDMAInCpltCallback+0x84>
      hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % inXfrSize);
90009756:	fbb3 f2f5 	udiv	r2, r3, r5
9000975a:	fb05 3212 	mls	r2, r5, r2, r3
9000975e:	1a9b      	subs	r3, r3, r2
    if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (hjpeg->InDataLength > 0UL))
90009760:	6d62      	ldr	r2, [r4, #84]	; 0x54
      hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % inXfrSize);
90009762:	62a3      	str	r3, [r4, #40]	; 0x28
    if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (hjpeg->InDataLength > 0UL))
90009764:	04d1      	lsls	r1, r2, #19
90009766:	d400      	bmi.n	9000976a <JPEG_MDMAInCpltCallback+0x56>
90009768:	b963      	cbnz	r3, 90009784 <JPEG_MDMAInCpltCallback+0x70>
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
9000976a:	6822      	ldr	r2, [r4, #0]
9000976c:	6b13      	ldr	r3, [r2, #48]	; 0x30
9000976e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
90009772:	6313      	str	r3, [r2, #48]	; 0x30
}
90009774:	b003      	add	sp, #12
90009776:	bd30      	pop	{r4, r5, pc}
    else if (hjpeg->InDataLength > 0UL)
90009778:	b1cb      	cbz	r3, 900097ae <JPEG_MDMAInCpltCallback+0x9a>
      if ((hjpeg->InDataLength % 4UL) != 0UL)
9000977a:	0798      	lsls	r0, r3, #30
9000977c:	d119      	bne.n	900097b2 <JPEG_MDMAInCpltCallback+0x9e>
    if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (hjpeg->InDataLength > 0UL))
9000977e:	6d62      	ldr	r2, [r4, #84]	; 0x54
90009780:	04d2      	lsls	r2, r2, #19
90009782:	d4f2      	bmi.n	9000976a <JPEG_MDMAInCpltCallback+0x56>
      if (HAL_MDMA_Start_IT(hjpeg->hdmain, (uint32_t)hjpeg->pJpegInBuffPtr, (uint32_t)&hjpeg->Instance->DIR,
90009784:	6822      	ldr	r2, [r4, #0]
90009786:	2501      	movs	r5, #1
90009788:	69a1      	ldr	r1, [r4, #24]
9000978a:	6b20      	ldr	r0, [r4, #48]	; 0x30
9000978c:	3240      	adds	r2, #64	; 0x40
9000978e:	9500      	str	r5, [sp, #0]
90009790:	f001 f8b0 	bl	9000a8f4 <HAL_MDMA_Start_IT>
90009794:	2800      	cmp	r0, #0
90009796:	d0e8      	beq.n	9000976a <JPEG_MDMAInCpltCallback+0x56>
        hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
90009798:	6d23      	ldr	r3, [r4, #80]	; 0x50
        hjpeg->State = HAL_JPEG_STATE_ERROR;
9000979a:	2206      	movs	r2, #6
        HAL_JPEG_ErrorCallback(hjpeg);
9000979c:	4620      	mov	r0, r4
        hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
9000979e:	f043 0304 	orr.w	r3, r3, #4
900097a2:	6523      	str	r3, [r4, #80]	; 0x50
        hjpeg->State = HAL_JPEG_STATE_ERROR;
900097a4:	f884 204d 	strb.w	r2, [r4, #77]	; 0x4d
        HAL_JPEG_ErrorCallback(hjpeg);
900097a8:	f7f8 f848 	bl	9000183c <HAL_JPEG_ErrorCallback>
        return;
900097ac:	e7c0      	b.n	90009730 <JPEG_MDMAInCpltCallback+0x1c>
    if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (hjpeg->InDataLength > 0UL))
900097ae:	6d63      	ldr	r3, [r4, #84]	; 0x54
900097b0:	e7db      	b.n	9000976a <JPEG_MDMAInCpltCallback+0x56>
        hjpeg->InDataLength = ((hjpeg->InDataLength / 4UL) + 1UL) * 4UL;
900097b2:	f023 0303 	bic.w	r3, r3, #3
900097b6:	3304      	adds	r3, #4
900097b8:	e7d2      	b.n	90009760 <JPEG_MDMAInCpltCallback+0x4c>
900097ba:	bf00      	nop

900097bc <JPEG_DMA_PollResidualData>:
{
900097bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
      if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) != 0UL)
900097be:	6802      	ldr	r2, [r0, #0]
900097c0:	2610      	movs	r6, #16
{
900097c2:	4604      	mov	r4, r0
    if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
900097c4:	6d65      	ldr	r5, [r4, #84]	; 0x54
900097c6:	f415 5500 	ands.w	r5, r5, #8192	; 0x2000
900097ca:	d11d      	bne.n	90009808 <JPEG_DMA_PollResidualData+0x4c>
      if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) != 0UL)
900097cc:	6b53      	ldr	r3, [r2, #52]	; 0x34
900097ce:	06df      	lsls	r7, r3, #27
900097d0:	d51a      	bpl.n	90009808 <JPEG_DMA_PollResidualData+0x4c>
        dataOut = hjpeg->Instance->DOR;
900097d2:	6c53      	ldr	r3, [r2, #68]	; 0x44
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataOut & 0x000000FFUL);
900097d4:	69e7      	ldr	r7, [r4, #28]
900097d6:	6a62      	ldr	r2, [r4, #36]	; 0x24
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataOut & 0x0000FF00UL) >> 8);
900097d8:	0a18      	lsrs	r0, r3, #8
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataOut & 0x00FF0000UL) >> 16);
900097da:	0c19      	lsrs	r1, r3, #16
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataOut & 0x000000FFUL);
900097dc:	54bb      	strb	r3, [r7, r2]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataOut & 0xFF000000UL) >> 24);
900097de:	0e1b      	lsrs	r3, r3, #24
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataOut & 0x0000FF00UL) >> 8);
900097e0:	6a67      	ldr	r7, [r4, #36]	; 0x24
900097e2:	69e2      	ldr	r2, [r4, #28]
900097e4:	443a      	add	r2, r7
900097e6:	7050      	strb	r0, [r2, #1]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataOut & 0x00FF0000UL) >> 16);
900097e8:	6a60      	ldr	r0, [r4, #36]	; 0x24
900097ea:	69e2      	ldr	r2, [r4, #28]
900097ec:	4402      	add	r2, r0
900097ee:	7091      	strb	r1, [r2, #2]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataOut & 0xFF000000UL) >> 24);
900097f0:	6a61      	ldr	r1, [r4, #36]	; 0x24
900097f2:	69e2      	ldr	r2, [r4, #28]
900097f4:	440a      	add	r2, r1
900097f6:	70d3      	strb	r3, [r2, #3]
        hjpeg->JpegOutCount += 4UL;
900097f8:	6a63      	ldr	r3, [r4, #36]	; 0x24
        if (hjpeg->JpegOutCount == hjpeg->OutDataLength)
900097fa:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
        hjpeg->JpegOutCount += 4UL;
900097fc:	3304      	adds	r3, #4
900097fe:	6263      	str	r3, [r4, #36]	; 0x24
        if (hjpeg->JpegOutCount == hjpeg->OutDataLength)
90009800:	6a63      	ldr	r3, [r4, #36]	; 0x24
90009802:	4293      	cmp	r3, r2
90009804:	d021      	beq.n	9000984a <JPEG_DMA_PollResidualData+0x8e>
  if ((__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) == 0UL) || ((tmpContext & JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL))
90009806:	6822      	ldr	r2, [r4, #0]
  for (count = JPEG_FIFO_SIZE; count > 0UL; count--)
90009808:	3e01      	subs	r6, #1
9000980a:	d1db      	bne.n	900097c4 <JPEG_DMA_PollResidualData+0x8>
  tmpContext = hjpeg->Context;
9000980c:	6d61      	ldr	r1, [r4, #84]	; 0x54
  if ((__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) == 0UL) || ((tmpContext & JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL))
9000980e:	6b53      	ldr	r3, [r2, #52]	; 0x34
90009810:	06d8      	lsls	r0, r3, #27
90009812:	d501      	bpl.n	90009818 <JPEG_DMA_PollResidualData+0x5c>
90009814:	048b      	lsls	r3, r1, #18
90009816:	d417      	bmi.n	90009848 <JPEG_DMA_PollResidualData+0x8c>
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
90009818:	6813      	ldr	r3, [r2, #0]
9000981a:	f023 0301 	bic.w	r3, r3, #1
9000981e:	6013      	str	r3, [r2, #0]
    if (hjpeg->JpegOutCount > 0UL)
90009820:	6a63      	ldr	r3, [r4, #36]	; 0x24
90009822:	b9eb      	cbnz	r3, 90009860 <JPEG_DMA_PollResidualData+0xa4>
    tmpContext = hjpeg->Context;
90009824:	6d63      	ldr	r3, [r4, #84]	; 0x54
    __HAL_UNLOCK(hjpeg);
90009826:	2000      	movs	r0, #0
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
90009828:	6d62      	ldr	r2, [r4, #84]	; 0x54
    hjpeg->State = HAL_JPEG_STATE_READY;
9000982a:	2101      	movs	r1, #1
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
9000982c:	f003 0303 	and.w	r3, r3, #3
    __HAL_UNLOCK(hjpeg);
90009830:	f884 004c 	strb.w	r0, [r4, #76]	; 0x4c
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
90009834:	f402 4282 	and.w	r2, r2, #16640	; 0x4100
      HAL_JPEG_DecodeCpltCallback(hjpeg);
90009838:	4620      	mov	r0, r4
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
9000983a:	2b02      	cmp	r3, #2
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
9000983c:	6562      	str	r2, [r4, #84]	; 0x54
    hjpeg->State = HAL_JPEG_STATE_READY;
9000983e:	f884 104d 	strb.w	r1, [r4, #77]	; 0x4d
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
90009842:	d00a      	beq.n	9000985a <JPEG_DMA_PollResidualData+0x9e>
      HAL_JPEG_EncodeCpltCallback(hjpeg);
90009844:	f7ff ff4e 	bl	900096e4 <HAL_JPEG_EncodeCpltCallback>
}
90009848:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
          HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
9000984a:	6a62      	ldr	r2, [r4, #36]	; 0x24
9000984c:	4620      	mov	r0, r4
9000984e:	69e1      	ldr	r1, [r4, #28]
90009850:	f7f7 ffac 	bl	900017ac <HAL_JPEG_DataReadyCallback>
  if ((__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) == 0UL) || ((tmpContext & JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL))
90009854:	6822      	ldr	r2, [r4, #0]
          hjpeg->JpegOutCount = 0;
90009856:	6265      	str	r5, [r4, #36]	; 0x24
90009858:	e7d6      	b.n	90009808 <JPEG_DMA_PollResidualData+0x4c>
      HAL_JPEG_DecodeCpltCallback(hjpeg);
9000985a:	f7f7 fff1 	bl	90001840 <HAL_JPEG_DecodeCpltCallback>
}
9000985e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
90009860:	6a62      	ldr	r2, [r4, #36]	; 0x24
90009862:	4620      	mov	r0, r4
90009864:	69e1      	ldr	r1, [r4, #28]
90009866:	f7f7 ffa1 	bl	900017ac <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
9000986a:	2300      	movs	r3, #0
9000986c:	6263      	str	r3, [r4, #36]	; 0x24
9000986e:	e7d9      	b.n	90009824 <JPEG_DMA_PollResidualData+0x68>

90009870 <HAL_JPEG_Resume>:
  if ((hjpeg->Context & (JPEG_CONTEXT_PAUSE_INPUT | JPEG_CONTEXT_PAUSE_OUTPUT)) == 0UL)
90009870:	6d43      	ldr	r3, [r0, #84]	; 0x54
90009872:	f413 5f40 	tst.w	r3, #12288	; 0x3000
90009876:	d028      	beq.n	900098ca <HAL_JPEG_Resume+0x5a>
  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
90009878:	6d43      	ldr	r3, [r0, #84]	; 0x54
9000987a:	f003 030c 	and.w	r3, r3, #12
9000987e:	2b0c      	cmp	r3, #12
{
90009880:	b570      	push	{r4, r5, r6, lr}
90009882:	4604      	mov	r4, r0
90009884:	b082      	sub	sp, #8
90009886:	460d      	mov	r5, r1
  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
90009888:	d007      	beq.n	9000989a <HAL_JPEG_Resume+0x2a>
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
9000988a:	6d43      	ldr	r3, [r0, #84]	; 0x54
9000988c:	f003 030c 	and.w	r3, r3, #12
90009890:	2b08      	cmp	r3, #8
90009892:	d037      	beq.n	90009904 <HAL_JPEG_Resume+0x94>
  return HAL_OK;
90009894:	2000      	movs	r0, #0
}
90009896:	b002      	add	sp, #8
90009898:	bd70      	pop	{r4, r5, r6, pc}
    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
9000989a:	07c8      	lsls	r0, r1, #31
9000989c:	d417      	bmi.n	900098ce <HAL_JPEG_Resume+0x5e>
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
9000989e:	07a9      	lsls	r1, r5, #30
900098a0:	d5f8      	bpl.n	90009894 <HAL_JPEG_Resume+0x24>
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_OUTPUT);
900098a2:	6d63      	ldr	r3, [r4, #84]	; 0x54
900098a4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
900098a8:	6563      	str	r3, [r4, #84]	; 0x54
      if ((hjpeg->Context & JPEG_CONTEXT_ENDING_DMA) != 0UL)
900098aa:	6d63      	ldr	r3, [r4, #84]	; 0x54
900098ac:	041a      	lsls	r2, r3, #16
900098ae:	d453      	bmi.n	90009958 <HAL_JPEG_Resume+0xe8>
        xfrSize = hjpeg->hdmaout->Init.BufferTransferLength;
900098b0:	6b60      	ldr	r0, [r4, #52]	; 0x34
900098b2:	6a82      	ldr	r2, [r0, #40]	; 0x28
        if (xfrSize == 0UL)
900098b4:	2a00      	cmp	r2, #0
900098b6:	d13e      	bne.n	90009936 <HAL_JPEG_Resume+0xc6>
          hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
900098b8:	6d23      	ldr	r3, [r4, #80]	; 0x50
          hjpeg->State = HAL_JPEG_STATE_ERROR;
900098ba:	2206      	movs	r2, #6
          return HAL_ERROR;
900098bc:	2001      	movs	r0, #1
          hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
900098be:	f043 0304 	orr.w	r3, r3, #4
900098c2:	6523      	str	r3, [r4, #80]	; 0x50
          hjpeg->State = HAL_JPEG_STATE_ERROR;
900098c4:	f884 204d 	strb.w	r2, [r4, #77]	; 0x4d
          return HAL_ERROR;
900098c8:	e7e5      	b.n	90009896 <HAL_JPEG_Resume+0x26>
    return HAL_ERROR;
900098ca:	2001      	movs	r0, #1
}
900098cc:	4770      	bx	lr
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_INPUT);
900098ce:	6d63      	ldr	r3, [r4, #84]	; 0x54
      xfrSize = hjpeg->hdmain->Init.BufferTransferLength;
900098d0:	6b20      	ldr	r0, [r4, #48]	; 0x30
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_INPUT);
900098d2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
      xfrSize = hjpeg->hdmain->Init.BufferTransferLength;
900098d6:	6a82      	ldr	r2, [r0, #40]	; 0x28
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_INPUT);
900098d8:	6563      	str	r3, [r4, #84]	; 0x54
      if (xfrSize == 0UL)
900098da:	2a00      	cmp	r2, #0
900098dc:	d0ec      	beq.n	900098b8 <HAL_JPEG_Resume+0x48>
      hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % xfrSize);
900098de:	6aa3      	ldr	r3, [r4, #40]	; 0x28
900098e0:	fbb3 f1f2 	udiv	r1, r3, r2
900098e4:	fb02 3211 	mls	r2, r2, r1, r3
900098e8:	1a9b      	subs	r3, r3, r2
900098ea:	62a3      	str	r3, [r4, #40]	; 0x28
      if (hjpeg->InDataLength > 0UL)
900098ec:	2b00      	cmp	r3, #0
900098ee:	d0d6      	beq.n	9000989e <HAL_JPEG_Resume+0x2e>
        if (HAL_MDMA_Start_IT(hjpeg->hdmain, (uint32_t)hjpeg->pJpegInBuffPtr, (uint32_t)&hjpeg->Instance->DIR,
900098f0:	6822      	ldr	r2, [r4, #0]
900098f2:	2601      	movs	r6, #1
900098f4:	3240      	adds	r2, #64	; 0x40
900098f6:	9600      	str	r6, [sp, #0]
900098f8:	69a1      	ldr	r1, [r4, #24]
900098fa:	f000 fffb 	bl	9000a8f4 <HAL_MDMA_Start_IT>
900098fe:	2800      	cmp	r0, #0
90009900:	d0cd      	beq.n	9000989e <HAL_JPEG_Resume+0x2e>
90009902:	e7d9      	b.n	900098b8 <HAL_JPEG_Resume+0x48>
    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
90009904:	f011 0101 	ands.w	r1, r1, #1
90009908:	d013      	beq.n	90009932 <HAL_JPEG_Resume+0xc2>
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_INPUT);
9000990a:	6d43      	ldr	r3, [r0, #84]	; 0x54
9000990c:	222e      	movs	r2, #46	; 0x2e
      mask |= (JPEG_IT_IFT | JPEG_IT_IFNF);
9000990e:	2106      	movs	r1, #6
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_INPUT);
90009910:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
90009914:	6543      	str	r3, [r0, #84]	; 0x54
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
90009916:	07ab      	lsls	r3, r5, #30
90009918:	d504      	bpl.n	90009924 <HAL_JPEG_Resume+0xb4>
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_OUTPUT);
9000991a:	6d63      	ldr	r3, [r4, #84]	; 0x54
      mask |= (JPEG_IT_OFT | JPEG_IT_OFNE | JPEG_IT_EOC);
9000991c:	4611      	mov	r1, r2
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_OUTPUT);
9000991e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
90009922:	6563      	str	r3, [r4, #84]	; 0x54
    __HAL_JPEG_ENABLE_IT(hjpeg, mask);
90009924:	6822      	ldr	r2, [r4, #0]
  return HAL_OK;
90009926:	2000      	movs	r0, #0
    __HAL_JPEG_ENABLE_IT(hjpeg, mask);
90009928:	6b13      	ldr	r3, [r2, #48]	; 0x30
9000992a:	430b      	orrs	r3, r1
9000992c:	6313      	str	r3, [r2, #48]	; 0x30
}
9000992e:	b002      	add	sp, #8
90009930:	bd70      	pop	{r4, r5, r6, pc}
90009932:	2228      	movs	r2, #40	; 0x28
90009934:	e7ef      	b.n	90009916 <HAL_JPEG_Resume+0xa6>
        hjpeg->OutDataLength = hjpeg->OutDataLength - (hjpeg->OutDataLength % xfrSize);
90009936:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
        if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
90009938:	2501      	movs	r5, #1
        hjpeg->OutDataLength = hjpeg->OutDataLength - (hjpeg->OutDataLength % xfrSize);
9000993a:	fbb3 f1f2 	udiv	r1, r3, r2
9000993e:	fb02 3211 	mls	r2, r2, r1, r3
        if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
90009942:	6821      	ldr	r1, [r4, #0]
        hjpeg->OutDataLength = hjpeg->OutDataLength - (hjpeg->OutDataLength % xfrSize);
90009944:	1a9b      	subs	r3, r3, r2
        if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
90009946:	3144      	adds	r1, #68	; 0x44
        hjpeg->OutDataLength = hjpeg->OutDataLength - (hjpeg->OutDataLength % xfrSize);
90009948:	62e3      	str	r3, [r4, #44]	; 0x2c
        if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
9000994a:	9500      	str	r5, [sp, #0]
9000994c:	69e2      	ldr	r2, [r4, #28]
9000994e:	f000 ffd1 	bl	9000a8f4 <HAL_MDMA_Start_IT>
90009952:	2800      	cmp	r0, #0
90009954:	d09e      	beq.n	90009894 <HAL_JPEG_Resume+0x24>
90009956:	e7af      	b.n	900098b8 <HAL_JPEG_Resume+0x48>
        JPEG_DMA_PollResidualData(hjpeg);
90009958:	4620      	mov	r0, r4
9000995a:	f7ff ff2f 	bl	900097bc <JPEG_DMA_PollResidualData>
9000995e:	e799      	b.n	90009894 <HAL_JPEG_Resume+0x24>

90009960 <JPEG_MDMAOutCpltCallback>:
{
90009960:	b530      	push	{r4, r5, lr}
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((MDMA_HandleTypeDef *)hmdma)->Parent;
90009962:	6c04      	ldr	r4, [r0, #64]	; 0x40
  if ((hjpeg->Context & (JPEG_CONTEXT_METHOD_MASK | JPEG_CONTEXT_ENDING_DMA)) ==
90009964:	f248 010c 	movw	r1, #32780	; 0x800c
{
90009968:	b083      	sub	sp, #12
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
9000996a:	6823      	ldr	r3, [r4, #0]
9000996c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
9000996e:	f022 027e 	bic.w	r2, r2, #126	; 0x7e
90009972:	631a      	str	r2, [r3, #48]	; 0x30
  if ((hjpeg->Context & (JPEG_CONTEXT_METHOD_MASK | JPEG_CONTEXT_ENDING_DMA)) ==
90009974:	6d62      	ldr	r2, [r4, #84]	; 0x54
90009976:	400a      	ands	r2, r1
90009978:	2a0c      	cmp	r2, #12
9000997a:	d001      	beq.n	90009980 <JPEG_MDMAOutCpltCallback+0x20>
}
9000997c:	b003      	add	sp, #12
9000997e:	bd30      	pop	{r4, r5, pc}
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF) == 0UL)
90009980:	6b5a      	ldr	r2, [r3, #52]	; 0x34
90009982:	0692      	lsls	r2, r2, #26
90009984:	d505      	bpl.n	90009992 <JPEG_MDMAOutCpltCallback+0x32>
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
90009986:	6b1a      	ldr	r2, [r3, #48]	; 0x30
90009988:	f042 0260 	orr.w	r2, r2, #96	; 0x60
9000998c:	631a      	str	r2, [r3, #48]	; 0x30
}
9000998e:	b003      	add	sp, #12
90009990:	bd30      	pop	{r4, r5, pc}
      hjpeg->JpegOutCount = hjpeg->OutDataLength - (hmdma->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
90009992:	6802      	ldr	r2, [r0, #0]
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
90009994:	4620      	mov	r0, r4
      hjpeg->JpegOutCount = hjpeg->OutDataLength - (hmdma->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
90009996:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
90009998:	6952      	ldr	r2, [r2, #20]
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
9000999a:	69e1      	ldr	r1, [r4, #28]
      hjpeg->JpegOutCount = hjpeg->OutDataLength - (hmdma->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
9000999c:	f3c2 0210 	ubfx	r2, r2, #0, #17
900099a0:	1a9b      	subs	r3, r3, r2
900099a2:	6263      	str	r3, [r4, #36]	; 0x24
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
900099a4:	6a62      	ldr	r2, [r4, #36]	; 0x24
900099a6:	f7f7 ff01 	bl	900017ac <HAL_JPEG_DataReadyCallback>
      if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
900099aa:	6d63      	ldr	r3, [r4, #84]	; 0x54
900099ac:	049b      	lsls	r3, r3, #18
900099ae:	d501      	bpl.n	900099b4 <JPEG_MDMAOutCpltCallback+0x54>
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
900099b0:	6823      	ldr	r3, [r4, #0]
900099b2:	e7e8      	b.n	90009986 <JPEG_MDMAOutCpltCallback+0x26>
        if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
900099b4:	6821      	ldr	r1, [r4, #0]
900099b6:	2501      	movs	r5, #1
900099b8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
900099ba:	69e2      	ldr	r2, [r4, #28]
900099bc:	3144      	adds	r1, #68	; 0x44
900099be:	6b60      	ldr	r0, [r4, #52]	; 0x34
900099c0:	9500      	str	r5, [sp, #0]
900099c2:	f000 ff97 	bl	9000a8f4 <HAL_MDMA_Start_IT>
900099c6:	2800      	cmp	r0, #0
900099c8:	d0f2      	beq.n	900099b0 <JPEG_MDMAOutCpltCallback+0x50>
          hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
900099ca:	6d23      	ldr	r3, [r4, #80]	; 0x50
          hjpeg->State = HAL_JPEG_STATE_ERROR;
900099cc:	2206      	movs	r2, #6
          HAL_JPEG_ErrorCallback(hjpeg);
900099ce:	4620      	mov	r0, r4
          hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
900099d0:	f043 0304 	orr.w	r3, r3, #4
900099d4:	6523      	str	r3, [r4, #80]	; 0x50
          hjpeg->State = HAL_JPEG_STATE_ERROR;
900099d6:	f884 204d 	strb.w	r2, [r4, #77]	; 0x4d
          HAL_JPEG_ErrorCallback(hjpeg);
900099da:	f7f7 ff2f 	bl	9000183c <HAL_JPEG_ErrorCallback>
          return;
900099de:	e7cd      	b.n	9000997c <JPEG_MDMAOutCpltCallback+0x1c>

900099e0 <JPEG_MDMAOutAbortCallback>:
{
900099e0:	b538      	push	{r3, r4, r5, lr}
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((MDMA_HandleTypeDef *)hmdma)->Parent;
900099e2:	6c04      	ldr	r4, [r0, #64]	; 0x40
  if ((hjpeg->Context & JPEG_CONTEXT_ENDING_DMA) != 0UL)
900099e4:	6d63      	ldr	r3, [r4, #84]	; 0x54
900099e6:	041a      	lsls	r2, r3, #16
900099e8:	d400      	bmi.n	900099ec <JPEG_MDMAOutAbortCallback+0xc>
}
900099ea:	bd38      	pop	{r3, r4, r5, pc}
  hjpeg->JpegOutCount = hjpeg->OutDataLength - (hjpeg->hdmaout->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
900099ec:	6b63      	ldr	r3, [r4, #52]	; 0x34
900099ee:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
900099f0:	681b      	ldr	r3, [r3, #0]
900099f2:	695b      	ldr	r3, [r3, #20]
900099f4:	f3c3 0310 	ubfx	r3, r3, #0, #17
900099f8:	1ad3      	subs	r3, r2, r3
900099fa:	6263      	str	r3, [r4, #36]	; 0x24
  if (hjpeg->JpegOutCount == hjpeg->OutDataLength)
900099fc:	6a63      	ldr	r3, [r4, #36]	; 0x24
900099fe:	429a      	cmp	r2, r3
90009a00:	d025      	beq.n	90009a4e <JPEG_MDMAOutAbortCallback+0x6e>
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) == 0UL)
90009a02:	6822      	ldr	r2, [r4, #0]
90009a04:	6b55      	ldr	r5, [r2, #52]	; 0x34
90009a06:	f015 0510 	ands.w	r5, r5, #16
90009a0a:	d118      	bne.n	90009a3e <JPEG_MDMAOutAbortCallback+0x5e>
    if (hjpeg->JpegOutCount > 0UL)
90009a0c:	6a63      	ldr	r3, [r4, #36]	; 0x24
90009a0e:	bb4b      	cbnz	r3, 90009a64 <JPEG_MDMAOutAbortCallback+0x84>
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
90009a10:	6813      	ldr	r3, [r2, #0]
    __HAL_UNLOCK(hjpeg);
90009a12:	2000      	movs	r0, #0
    hjpeg->State = HAL_JPEG_STATE_READY;
90009a14:	2101      	movs	r1, #1
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
90009a16:	f023 0301 	bic.w	r3, r3, #1
90009a1a:	6013      	str	r3, [r2, #0]
    tmpContext = hjpeg->Context;
90009a1c:	6d63      	ldr	r3, [r4, #84]	; 0x54
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
90009a1e:	6d62      	ldr	r2, [r4, #84]	; 0x54
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
90009a20:	f003 0303 	and.w	r3, r3, #3
    __HAL_UNLOCK(hjpeg);
90009a24:	f884 004c 	strb.w	r0, [r4, #76]	; 0x4c
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
90009a28:	f402 4282 	and.w	r2, r2, #16640	; 0x4100
      HAL_JPEG_DecodeCpltCallback(hjpeg);
90009a2c:	4620      	mov	r0, r4
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
90009a2e:	2b02      	cmp	r3, #2
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
90009a30:	6562      	str	r2, [r4, #84]	; 0x54
    hjpeg->State = HAL_JPEG_STATE_READY;
90009a32:	f884 104d 	strb.w	r1, [r4, #77]	; 0x4d
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
90009a36:	d012      	beq.n	90009a5e <JPEG_MDMAOutAbortCallback+0x7e>
      HAL_JPEG_EncodeCpltCallback(hjpeg);
90009a38:	f7ff fe54 	bl	900096e4 <HAL_JPEG_EncodeCpltCallback>
}
90009a3c:	bd38      	pop	{r3, r4, r5, pc}
  else if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
90009a3e:	6d63      	ldr	r3, [r4, #84]	; 0x54
90009a40:	049b      	lsls	r3, r3, #18
90009a42:	d4d2      	bmi.n	900099ea <JPEG_MDMAOutAbortCallback+0xa>
    JPEG_DMA_PollResidualData(hjpeg);
90009a44:	4620      	mov	r0, r4
}
90009a46:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    JPEG_DMA_PollResidualData(hjpeg);
90009a4a:	f7ff beb7 	b.w	900097bc <JPEG_DMA_PollResidualData>
    HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
90009a4e:	6a62      	ldr	r2, [r4, #36]	; 0x24
90009a50:	4620      	mov	r0, r4
90009a52:	69e1      	ldr	r1, [r4, #28]
90009a54:	f7f7 feaa 	bl	900017ac <HAL_JPEG_DataReadyCallback>
    hjpeg->JpegOutCount = 0;
90009a58:	2300      	movs	r3, #0
90009a5a:	6263      	str	r3, [r4, #36]	; 0x24
90009a5c:	e7d1      	b.n	90009a02 <JPEG_MDMAOutAbortCallback+0x22>
      HAL_JPEG_DecodeCpltCallback(hjpeg);
90009a5e:	f7f7 feef 	bl	90001840 <HAL_JPEG_DecodeCpltCallback>
}
90009a62:	bd38      	pop	{r3, r4, r5, pc}
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
90009a64:	6a62      	ldr	r2, [r4, #36]	; 0x24
90009a66:	4620      	mov	r0, r4
90009a68:	69e1      	ldr	r1, [r4, #28]
90009a6a:	f7f7 fe9f 	bl	900017ac <HAL_JPEG_DataReadyCallback>
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
90009a6e:	6822      	ldr	r2, [r4, #0]
      hjpeg->JpegOutCount = 0;
90009a70:	6265      	str	r5, [r4, #36]	; 0x24
90009a72:	e7cd      	b.n	90009a10 <JPEG_MDMAOutAbortCallback+0x30>

90009a74 <JPEG_Process>:
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
90009a74:	6d43      	ldr	r3, [r0, #84]	; 0x54
90009a76:	f003 0303 	and.w	r3, r3, #3
90009a7a:	2b02      	cmp	r3, #2
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_HPDF) != 0UL)
90009a7c:	6803      	ldr	r3, [r0, #0]
{
90009a7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
90009a82:	4604      	mov	r4, r0
90009a84:	b082      	sub	sp, #8
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
90009a86:	d01f      	beq.n	90009ac8 <JPEG_Process+0x54>
  if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL)
90009a88:	6d62      	ldr	r2, [r4, #84]	; 0x54
90009a8a:	04d7      	lsls	r7, r2, #19
90009a8c:	d407      	bmi.n	90009a9e <JPEG_Process+0x2a>
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_IFTF) != 0UL)
90009a8e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
90009a90:	0796      	lsls	r6, r2, #30
90009a92:	f100 811d 	bmi.w	90009cd0 <JPEG_Process+0x25c>
    else if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_IFNFF) != 0UL)
90009a96:	6b5a      	ldr	r2, [r3, #52]	; 0x34
90009a98:	0750      	lsls	r0, r2, #29
90009a9a:	f100 81b1 	bmi.w	90009e00 <JPEG_Process+0x38c>
  if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
90009a9e:	6d65      	ldr	r5, [r4, #84]	; 0x54
90009aa0:	f415 5500 	ands.w	r5, r5, #8192	; 0x2000
90009aa4:	d107      	bne.n	90009ab6 <JPEG_Process+0x42>
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFTF) != 0UL)
90009aa6:	6b5e      	ldr	r6, [r3, #52]	; 0x34
90009aa8:	f016 0608 	ands.w	r6, r6, #8
90009aac:	d14c      	bne.n	90009b48 <JPEG_Process+0xd4>
    else if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) != 0UL)
90009aae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
90009ab0:	06d2      	lsls	r2, r2, #27
90009ab2:	f100 81e3 	bmi.w	90009e7c <JPEG_Process+0x408>
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF | JPEG_FLAG_OFTF | JPEG_FLAG_OFNEF) == JPEG_FLAG_EOCF)
90009ab6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
90009ab8:	f002 0238 	and.w	r2, r2, #56	; 0x38
90009abc:	2a20      	cmp	r2, #32
90009abe:	d01a      	beq.n	90009af6 <JPEG_Process+0x82>
  return JPEG_PROCESS_ONGOING;
90009ac0:	2000      	movs	r0, #0
}
90009ac2:	b002      	add	sp, #8
90009ac4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_HPDF) != 0UL)
90009ac8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
90009aca:	0652      	lsls	r2, r2, #25
90009acc:	d5dc      	bpl.n	90009a88 <JPEG_Process+0x14>
      (void) HAL_JPEG_GetInfo(hjpeg, &hjpeg->Conf);
90009ace:	1d01      	adds	r1, r0, #4
  if ((hjpeg == NULL) || (pInfo == NULL))
90009ad0:	9101      	str	r1, [sp, #4]
90009ad2:	f7ff fb79 	bl	900091c8 <HAL_JPEG_GetInfo.part.0>
      hjpeg->Conf.ImageQuality = 0;
90009ad6:	2300      	movs	r3, #0
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
90009ad8:	9901      	ldr	r1, [sp, #4]
90009ada:	4620      	mov	r0, r4
      hjpeg->Conf.ImageQuality = 0;
90009adc:	6163      	str	r3, [r4, #20]
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
90009ade:	f7f7 fdf3 	bl	900016c8 <HAL_JPEG_InfoReadyCallback>
      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_IT_HPD);
90009ae2:	6823      	ldr	r3, [r4, #0]
90009ae4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
90009ae6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
90009aea:	631a      	str	r2, [r3, #48]	; 0x30
      __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_HPDF);
90009aec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
90009aee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
90009af2:	639a      	str	r2, [r3, #56]	; 0x38
90009af4:	e7c8      	b.n	90009a88 <JPEG_Process+0x14>
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
90009af6:	681a      	ldr	r2, [r3, #0]
90009af8:	f022 0201 	bic.w	r2, r2, #1
90009afc:	601a      	str	r2, [r3, #0]
    if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
90009afe:	6d62      	ldr	r2, [r4, #84]	; 0x54
90009b00:	f002 020c 	and.w	r2, r2, #12
90009b04:	2a08      	cmp	r2, #8
90009b06:	f000 81e6 	beq.w	90009ed6 <JPEG_Process+0x462>
    __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
90009b0a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
90009b0c:	f042 0260 	orr.w	r2, r2, #96	; 0x60
90009b10:	639a      	str	r2, [r3, #56]	; 0x38
    if (hjpeg->JpegOutCount > 0UL)
90009b12:	6a63      	ldr	r3, [r4, #36]	; 0x24
90009b14:	2b00      	cmp	r3, #0
90009b16:	f040 81e3 	bne.w	90009ee0 <JPEG_Process+0x46c>
    tmpContext = hjpeg->Context;
90009b1a:	6d63      	ldr	r3, [r4, #84]	; 0x54
    __HAL_UNLOCK(hjpeg);
90009b1c:	2100      	movs	r1, #0
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
90009b1e:	6d62      	ldr	r2, [r4, #84]	; 0x54
    hjpeg->State = HAL_JPEG_STATE_READY;
90009b20:	2501      	movs	r5, #1
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
90009b22:	f003 0303 	and.w	r3, r3, #3
      HAL_JPEG_DecodeCpltCallback(hjpeg);
90009b26:	4620      	mov	r0, r4
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
90009b28:	f402 4282 	and.w	r2, r2, #16640	; 0x4100
    __HAL_UNLOCK(hjpeg);
90009b2c:	f884 104c 	strb.w	r1, [r4, #76]	; 0x4c
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
90009b30:	2b02      	cmp	r3, #2
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
90009b32:	6562      	str	r2, [r4, #84]	; 0x54
    hjpeg->State = HAL_JPEG_STATE_READY;
90009b34:	f884 504d 	strb.w	r5, [r4, #77]	; 0x4d
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
90009b38:	f000 81c9 	beq.w	90009ece <JPEG_Process+0x45a>
      HAL_JPEG_EncodeCpltCallback(hjpeg);
90009b3c:	f7ff fdd2 	bl	900096e4 <HAL_JPEG_EncodeCpltCallback>
    return JPEG_PROCESS_DONE;
90009b40:	4628      	mov	r0, r5
}
90009b42:	b002      	add	sp, #8
90009b44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (hjpeg->OutDataLength >= (hjpeg->JpegOutCount + (nbOutputWords * 4UL)))
90009b48:	6a62      	ldr	r2, [r4, #36]	; 0x24
90009b4a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
90009b4c:	3220      	adds	r2, #32
90009b4e:	4296      	cmp	r6, r2
90009b50:	f0c0 81e4 	bcc.w	90009f1c <JPEG_Process+0x4a8>
      dataword = hjpeg->Instance->DOR;
90009b54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
90009b56:	69e1      	ldr	r1, [r4, #28]
90009b58:	6a62      	ldr	r2, [r4, #36]	; 0x24
90009b5a:	548b      	strb	r3, [r1, r2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
90009b5c:	6a61      	ldr	r1, [r4, #36]	; 0x24
90009b5e:	69e2      	ldr	r2, [r4, #28]
90009b60:	440a      	add	r2, r1
90009b62:	0a19      	lsrs	r1, r3, #8
90009b64:	7051      	strb	r1, [r2, #1]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
90009b66:	6a61      	ldr	r1, [r4, #36]	; 0x24
90009b68:	69e2      	ldr	r2, [r4, #28]
90009b6a:	440a      	add	r2, r1
90009b6c:	0c19      	lsrs	r1, r3, #16
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
90009b6e:	0e1b      	lsrs	r3, r3, #24
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
90009b70:	7091      	strb	r1, [r2, #2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
90009b72:	6a61      	ldr	r1, [r4, #36]	; 0x24
90009b74:	69e2      	ldr	r2, [r4, #28]
90009b76:	440a      	add	r2, r1
90009b78:	70d3      	strb	r3, [r2, #3]
      hjpeg->JpegOutCount += 4UL;
90009b7a:	6a63      	ldr	r3, [r4, #36]	; 0x24
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF | JPEG_FLAG_OFTF | JPEG_FLAG_OFNEF) == JPEG_FLAG_EOCF)
90009b7c:	6822      	ldr	r2, [r4, #0]
      hjpeg->JpegOutCount += 4UL;
90009b7e:	3304      	adds	r3, #4
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
90009b80:	69e1      	ldr	r1, [r4, #28]
      hjpeg->JpegOutCount += 4UL;
90009b82:	6263      	str	r3, [r4, #36]	; 0x24
      dataword = hjpeg->Instance->DOR;
90009b84:	6c53      	ldr	r3, [r2, #68]	; 0x44
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
90009b86:	6a62      	ldr	r2, [r4, #36]	; 0x24
90009b88:	548b      	strb	r3, [r1, r2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
90009b8a:	6a61      	ldr	r1, [r4, #36]	; 0x24
90009b8c:	69e2      	ldr	r2, [r4, #28]
90009b8e:	440a      	add	r2, r1
90009b90:	0a19      	lsrs	r1, r3, #8
90009b92:	7051      	strb	r1, [r2, #1]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
90009b94:	6a61      	ldr	r1, [r4, #36]	; 0x24
90009b96:	69e2      	ldr	r2, [r4, #28]
90009b98:	440a      	add	r2, r1
90009b9a:	0c19      	lsrs	r1, r3, #16
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
90009b9c:	0e1b      	lsrs	r3, r3, #24
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
90009b9e:	7091      	strb	r1, [r2, #2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
90009ba0:	6a61      	ldr	r1, [r4, #36]	; 0x24
90009ba2:	69e2      	ldr	r2, [r4, #28]
90009ba4:	440a      	add	r2, r1
90009ba6:	70d3      	strb	r3, [r2, #3]
      hjpeg->JpegOutCount += 4UL;
90009ba8:	6a63      	ldr	r3, [r4, #36]	; 0x24
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF | JPEG_FLAG_OFTF | JPEG_FLAG_OFNEF) == JPEG_FLAG_EOCF)
90009baa:	6822      	ldr	r2, [r4, #0]
      hjpeg->JpegOutCount += 4UL;
90009bac:	3304      	adds	r3, #4
90009bae:	6263      	str	r3, [r4, #36]	; 0x24
      dataword = hjpeg->Instance->DOR;
90009bb0:	6c53      	ldr	r3, [r2, #68]	; 0x44
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
90009bb2:	6a62      	ldr	r2, [r4, #36]	; 0x24
90009bb4:	69e1      	ldr	r1, [r4, #28]
90009bb6:	548b      	strb	r3, [r1, r2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
90009bb8:	6a61      	ldr	r1, [r4, #36]	; 0x24
90009bba:	69e2      	ldr	r2, [r4, #28]
90009bbc:	440a      	add	r2, r1
90009bbe:	0a19      	lsrs	r1, r3, #8
90009bc0:	7051      	strb	r1, [r2, #1]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
90009bc2:	6a61      	ldr	r1, [r4, #36]	; 0x24
90009bc4:	69e2      	ldr	r2, [r4, #28]
90009bc6:	440a      	add	r2, r1
90009bc8:	0c19      	lsrs	r1, r3, #16
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
90009bca:	0e1b      	lsrs	r3, r3, #24
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
90009bcc:	7091      	strb	r1, [r2, #2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
90009bce:	6a61      	ldr	r1, [r4, #36]	; 0x24
90009bd0:	69e2      	ldr	r2, [r4, #28]
90009bd2:	440a      	add	r2, r1
90009bd4:	70d3      	strb	r3, [r2, #3]
      hjpeg->JpegOutCount += 4UL;
90009bd6:	6a63      	ldr	r3, [r4, #36]	; 0x24
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF | JPEG_FLAG_OFTF | JPEG_FLAG_OFNEF) == JPEG_FLAG_EOCF)
90009bd8:	6822      	ldr	r2, [r4, #0]
      hjpeg->JpegOutCount += 4UL;
90009bda:	3304      	adds	r3, #4
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
90009bdc:	69e1      	ldr	r1, [r4, #28]
      hjpeg->JpegOutCount += 4UL;
90009bde:	6263      	str	r3, [r4, #36]	; 0x24
      dataword = hjpeg->Instance->DOR;
90009be0:	6c53      	ldr	r3, [r2, #68]	; 0x44
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
90009be2:	6a62      	ldr	r2, [r4, #36]	; 0x24
90009be4:	548b      	strb	r3, [r1, r2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
90009be6:	6a61      	ldr	r1, [r4, #36]	; 0x24
90009be8:	69e2      	ldr	r2, [r4, #28]
90009bea:	440a      	add	r2, r1
90009bec:	0a19      	lsrs	r1, r3, #8
90009bee:	7051      	strb	r1, [r2, #1]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
90009bf0:	6a61      	ldr	r1, [r4, #36]	; 0x24
90009bf2:	69e2      	ldr	r2, [r4, #28]
90009bf4:	440a      	add	r2, r1
90009bf6:	0c19      	lsrs	r1, r3, #16
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
90009bf8:	0e1b      	lsrs	r3, r3, #24
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
90009bfa:	7091      	strb	r1, [r2, #2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
90009bfc:	6a61      	ldr	r1, [r4, #36]	; 0x24
90009bfe:	69e2      	ldr	r2, [r4, #28]
90009c00:	440a      	add	r2, r1
90009c02:	70d3      	strb	r3, [r2, #3]
      hjpeg->JpegOutCount += 4UL;
90009c04:	6a63      	ldr	r3, [r4, #36]	; 0x24
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF | JPEG_FLAG_OFTF | JPEG_FLAG_OFNEF) == JPEG_FLAG_EOCF)
90009c06:	6822      	ldr	r2, [r4, #0]
      hjpeg->JpegOutCount += 4UL;
90009c08:	3304      	adds	r3, #4
90009c0a:	6263      	str	r3, [r4, #36]	; 0x24
      dataword = hjpeg->Instance->DOR;
90009c0c:	6c53      	ldr	r3, [r2, #68]	; 0x44
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
90009c0e:	6a62      	ldr	r2, [r4, #36]	; 0x24
90009c10:	69e1      	ldr	r1, [r4, #28]
90009c12:	548b      	strb	r3, [r1, r2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
90009c14:	6a61      	ldr	r1, [r4, #36]	; 0x24
90009c16:	69e2      	ldr	r2, [r4, #28]
90009c18:	440a      	add	r2, r1
90009c1a:	0a19      	lsrs	r1, r3, #8
90009c1c:	7051      	strb	r1, [r2, #1]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
90009c1e:	6a61      	ldr	r1, [r4, #36]	; 0x24
90009c20:	69e2      	ldr	r2, [r4, #28]
90009c22:	440a      	add	r2, r1
90009c24:	0c19      	lsrs	r1, r3, #16
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
90009c26:	0e1b      	lsrs	r3, r3, #24
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
90009c28:	7091      	strb	r1, [r2, #2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
90009c2a:	6a61      	ldr	r1, [r4, #36]	; 0x24
90009c2c:	69e2      	ldr	r2, [r4, #28]
90009c2e:	440a      	add	r2, r1
90009c30:	70d3      	strb	r3, [r2, #3]
      hjpeg->JpegOutCount += 4UL;
90009c32:	6a63      	ldr	r3, [r4, #36]	; 0x24
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF | JPEG_FLAG_OFTF | JPEG_FLAG_OFNEF) == JPEG_FLAG_EOCF)
90009c34:	6822      	ldr	r2, [r4, #0]
      hjpeg->JpegOutCount += 4UL;
90009c36:	3304      	adds	r3, #4
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
90009c38:	69e1      	ldr	r1, [r4, #28]
      hjpeg->JpegOutCount += 4UL;
90009c3a:	6263      	str	r3, [r4, #36]	; 0x24
      dataword = hjpeg->Instance->DOR;
90009c3c:	6c53      	ldr	r3, [r2, #68]	; 0x44
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
90009c3e:	6a62      	ldr	r2, [r4, #36]	; 0x24
90009c40:	548b      	strb	r3, [r1, r2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
90009c42:	6a61      	ldr	r1, [r4, #36]	; 0x24
90009c44:	69e2      	ldr	r2, [r4, #28]
90009c46:	440a      	add	r2, r1
90009c48:	0a19      	lsrs	r1, r3, #8
90009c4a:	7051      	strb	r1, [r2, #1]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
90009c4c:	6a61      	ldr	r1, [r4, #36]	; 0x24
90009c4e:	69e2      	ldr	r2, [r4, #28]
90009c50:	440a      	add	r2, r1
90009c52:	0c19      	lsrs	r1, r3, #16
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
90009c54:	0e1b      	lsrs	r3, r3, #24
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
90009c56:	7091      	strb	r1, [r2, #2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
90009c58:	6a61      	ldr	r1, [r4, #36]	; 0x24
90009c5a:	69e2      	ldr	r2, [r4, #28]
90009c5c:	440a      	add	r2, r1
90009c5e:	70d3      	strb	r3, [r2, #3]
      hjpeg->JpegOutCount += 4UL;
90009c60:	6a63      	ldr	r3, [r4, #36]	; 0x24
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF | JPEG_FLAG_OFTF | JPEG_FLAG_OFNEF) == JPEG_FLAG_EOCF)
90009c62:	6822      	ldr	r2, [r4, #0]
      hjpeg->JpegOutCount += 4UL;
90009c64:	3304      	adds	r3, #4
90009c66:	6263      	str	r3, [r4, #36]	; 0x24
      dataword = hjpeg->Instance->DOR;
90009c68:	6c53      	ldr	r3, [r2, #68]	; 0x44
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
90009c6a:	6a62      	ldr	r2, [r4, #36]	; 0x24
90009c6c:	69e1      	ldr	r1, [r4, #28]
90009c6e:	548b      	strb	r3, [r1, r2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
90009c70:	6a61      	ldr	r1, [r4, #36]	; 0x24
90009c72:	69e2      	ldr	r2, [r4, #28]
90009c74:	440a      	add	r2, r1
90009c76:	0a19      	lsrs	r1, r3, #8
90009c78:	7051      	strb	r1, [r2, #1]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
90009c7a:	6a61      	ldr	r1, [r4, #36]	; 0x24
90009c7c:	69e2      	ldr	r2, [r4, #28]
90009c7e:	440a      	add	r2, r1
90009c80:	0c19      	lsrs	r1, r3, #16
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
90009c82:	0e1b      	lsrs	r3, r3, #24
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
90009c84:	7091      	strb	r1, [r2, #2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
90009c86:	6a61      	ldr	r1, [r4, #36]	; 0x24
90009c88:	69e2      	ldr	r2, [r4, #28]
90009c8a:	440a      	add	r2, r1
90009c8c:	70d3      	strb	r3, [r2, #3]
      hjpeg->JpegOutCount += 4UL;
90009c8e:	6a63      	ldr	r3, [r4, #36]	; 0x24
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF | JPEG_FLAG_OFTF | JPEG_FLAG_OFNEF) == JPEG_FLAG_EOCF)
90009c90:	6822      	ldr	r2, [r4, #0]
      hjpeg->JpegOutCount += 4UL;
90009c92:	3304      	adds	r3, #4
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
90009c94:	69e1      	ldr	r1, [r4, #28]
      hjpeg->JpegOutCount += 4UL;
90009c96:	6263      	str	r3, [r4, #36]	; 0x24
      dataword = hjpeg->Instance->DOR;
90009c98:	6c53      	ldr	r3, [r2, #68]	; 0x44
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
90009c9a:	6a62      	ldr	r2, [r4, #36]	; 0x24
90009c9c:	548b      	strb	r3, [r1, r2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
90009c9e:	6a61      	ldr	r1, [r4, #36]	; 0x24
90009ca0:	69e2      	ldr	r2, [r4, #28]
90009ca2:	440a      	add	r2, r1
90009ca4:	0a19      	lsrs	r1, r3, #8
90009ca6:	7051      	strb	r1, [r2, #1]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
90009ca8:	6a61      	ldr	r1, [r4, #36]	; 0x24
90009caa:	69e2      	ldr	r2, [r4, #28]
90009cac:	440a      	add	r2, r1
90009cae:	0c19      	lsrs	r1, r3, #16
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
90009cb0:	0e1b      	lsrs	r3, r3, #24
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
90009cb2:	7091      	strb	r1, [r2, #2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
90009cb4:	6a61      	ldr	r1, [r4, #36]	; 0x24
90009cb6:	69e2      	ldr	r2, [r4, #28]
90009cb8:	440a      	add	r2, r1
90009cba:	70d3      	strb	r3, [r2, #3]
      hjpeg->JpegOutCount += 4UL;
90009cbc:	6a63      	ldr	r3, [r4, #36]	; 0x24
90009cbe:	3304      	adds	r3, #4
90009cc0:	6263      	str	r3, [r4, #36]	; 0x24
    if (hjpeg->OutDataLength == hjpeg->JpegOutCount)
90009cc2:	6a63      	ldr	r3, [r4, #36]	; 0x24
90009cc4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
90009cc6:	429a      	cmp	r2, r3
90009cc8:	f000 82ae 	beq.w	9000a228 <JPEG_Process+0x7b4>
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF | JPEG_FLAG_OFTF | JPEG_FLAG_OFNEF) == JPEG_FLAG_EOCF)
90009ccc:	6823      	ldr	r3, [r4, #0]
90009cce:	e6f2      	b.n	90009ab6 <JPEG_Process+0x42>
  if ((hjpeg->InDataLength == 0UL) || (nbRequestWords == 0UL))
90009cd0:	6aa2      	ldr	r2, [r4, #40]	; 0x28
90009cd2:	2a00      	cmp	r2, #0
90009cd4:	f000 810c 	beq.w	90009ef0 <JPEG_Process+0x47c>
  else if (hjpeg->InDataLength > hjpeg->JpegInCount)
90009cd8:	6a21      	ldr	r1, [r4, #32]
90009cda:	428a      	cmp	r2, r1
    nb_bytes = hjpeg->InDataLength - hjpeg->JpegInCount;
90009cdc:	6a21      	ldr	r1, [r4, #32]
  else if (hjpeg->InDataLength > hjpeg->JpegInCount)
90009cde:	f240 81a4 	bls.w	9000a02a <JPEG_Process+0x5b6>
    nb_bytes = hjpeg->InDataLength - hjpeg->JpegInCount;
90009ce2:	1a52      	subs	r2, r2, r1
  if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (nb_bytes > 0UL))
90009ce4:	6d61      	ldr	r1, [r4, #84]	; 0x54
90009ce6:	04cd      	lsls	r5, r1, #19
90009ce8:	f53f aed9 	bmi.w	90009a9e <JPEG_Process+0x2a>
90009cec:	2a00      	cmp	r2, #0
90009cee:	f43f aed6 	beq.w	90009a9e <JPEG_Process+0x2a>
    if (nb_words >= nbRequestWords)
90009cf2:	2a1f      	cmp	r2, #31
    nb_words = nb_bytes / 4UL;
90009cf4:	ea4f 0192 	mov.w	r1, r2, lsr #2
    if (nb_words >= nbRequestWords)
90009cf8:	f240 8203 	bls.w	9000a102 <JPEG_Process+0x68e>
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
90009cfc:	69a2      	ldr	r2, [r4, #24]
        input_count = hjpeg->JpegInCount;
90009cfe:	6a21      	ldr	r1, [r4, #32]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
90009d00:	1850      	adds	r0, r2, r1
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
90009d02:	5c55      	ldrb	r5, [r2, r1]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
90009d04:	7881      	ldrb	r1, [r0, #2]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
90009d06:	7846      	ldrb	r6, [r0, #1]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
90009d08:	0409      	lsls	r1, r1, #16
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
90009d0a:	78c0      	ldrb	r0, [r0, #3]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
90009d0c:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
90009d10:	4329      	orrs	r1, r5
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
90009d12:	ea41 6100 	orr.w	r1, r1, r0, lsl #24
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
90009d16:	6419      	str	r1, [r3, #64]	; 0x40
        hjpeg->JpegInCount += 4UL;
90009d18:	6a21      	ldr	r1, [r4, #32]
90009d1a:	3104      	adds	r1, #4
90009d1c:	6221      	str	r1, [r4, #32]
        input_count = hjpeg->JpegInCount;
90009d1e:	6a21      	ldr	r1, [r4, #32]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
90009d20:	1850      	adds	r0, r2, r1
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
90009d22:	5c55      	ldrb	r5, [r2, r1]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
90009d24:	7881      	ldrb	r1, [r0, #2]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
90009d26:	7846      	ldrb	r6, [r0, #1]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
90009d28:	0409      	lsls	r1, r1, #16
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
90009d2a:	78c0      	ldrb	r0, [r0, #3]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
90009d2c:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
90009d30:	4329      	orrs	r1, r5
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
90009d32:	ea41 6100 	orr.w	r1, r1, r0, lsl #24
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
90009d36:	6419      	str	r1, [r3, #64]	; 0x40
        hjpeg->JpegInCount += 4UL;
90009d38:	6a21      	ldr	r1, [r4, #32]
90009d3a:	3104      	adds	r1, #4
90009d3c:	6221      	str	r1, [r4, #32]
        input_count = hjpeg->JpegInCount;
90009d3e:	6a21      	ldr	r1, [r4, #32]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
90009d40:	1850      	adds	r0, r2, r1
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
90009d42:	5c55      	ldrb	r5, [r2, r1]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
90009d44:	7881      	ldrb	r1, [r0, #2]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
90009d46:	7846      	ldrb	r6, [r0, #1]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
90009d48:	0409      	lsls	r1, r1, #16
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
90009d4a:	78c0      	ldrb	r0, [r0, #3]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
90009d4c:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
90009d50:	4329      	orrs	r1, r5
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
90009d52:	ea41 6100 	orr.w	r1, r1, r0, lsl #24
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
90009d56:	6419      	str	r1, [r3, #64]	; 0x40
        hjpeg->JpegInCount += 4UL;
90009d58:	6a21      	ldr	r1, [r4, #32]
90009d5a:	3104      	adds	r1, #4
90009d5c:	6221      	str	r1, [r4, #32]
        input_count = hjpeg->JpegInCount;
90009d5e:	6a21      	ldr	r1, [r4, #32]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
90009d60:	1850      	adds	r0, r2, r1
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
90009d62:	5c55      	ldrb	r5, [r2, r1]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
90009d64:	7881      	ldrb	r1, [r0, #2]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
90009d66:	7846      	ldrb	r6, [r0, #1]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
90009d68:	0409      	lsls	r1, r1, #16
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
90009d6a:	78c0      	ldrb	r0, [r0, #3]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
90009d6c:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
90009d70:	4329      	orrs	r1, r5
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
90009d72:	ea41 6100 	orr.w	r1, r1, r0, lsl #24
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
90009d76:	6419      	str	r1, [r3, #64]	; 0x40
        hjpeg->JpegInCount += 4UL;
90009d78:	6a21      	ldr	r1, [r4, #32]
90009d7a:	3104      	adds	r1, #4
90009d7c:	6221      	str	r1, [r4, #32]
        input_count = hjpeg->JpegInCount;
90009d7e:	6a21      	ldr	r1, [r4, #32]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
90009d80:	1850      	adds	r0, r2, r1
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
90009d82:	5c55      	ldrb	r5, [r2, r1]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
90009d84:	7881      	ldrb	r1, [r0, #2]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
90009d86:	7846      	ldrb	r6, [r0, #1]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
90009d88:	0409      	lsls	r1, r1, #16
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
90009d8a:	78c0      	ldrb	r0, [r0, #3]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
90009d8c:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
90009d90:	4329      	orrs	r1, r5
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
90009d92:	ea41 6100 	orr.w	r1, r1, r0, lsl #24
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
90009d96:	6419      	str	r1, [r3, #64]	; 0x40
        hjpeg->JpegInCount += 4UL;
90009d98:	6a21      	ldr	r1, [r4, #32]
90009d9a:	3104      	adds	r1, #4
90009d9c:	6221      	str	r1, [r4, #32]
        input_count = hjpeg->JpegInCount;
90009d9e:	6a21      	ldr	r1, [r4, #32]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
90009da0:	1850      	adds	r0, r2, r1
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
90009da2:	5c55      	ldrb	r5, [r2, r1]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
90009da4:	7881      	ldrb	r1, [r0, #2]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
90009da6:	7846      	ldrb	r6, [r0, #1]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
90009da8:	0409      	lsls	r1, r1, #16
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
90009daa:	78c0      	ldrb	r0, [r0, #3]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
90009dac:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
90009db0:	4329      	orrs	r1, r5
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
90009db2:	ea41 6100 	orr.w	r1, r1, r0, lsl #24
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
90009db6:	6419      	str	r1, [r3, #64]	; 0x40
        hjpeg->JpegInCount += 4UL;
90009db8:	6a21      	ldr	r1, [r4, #32]
90009dba:	3104      	adds	r1, #4
90009dbc:	6221      	str	r1, [r4, #32]
        input_count = hjpeg->JpegInCount;
90009dbe:	6a21      	ldr	r1, [r4, #32]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
90009dc0:	1850      	adds	r0, r2, r1
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
90009dc2:	5c55      	ldrb	r5, [r2, r1]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
90009dc4:	7881      	ldrb	r1, [r0, #2]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
90009dc6:	7846      	ldrb	r6, [r0, #1]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
90009dc8:	0409      	lsls	r1, r1, #16
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
90009dca:	78c0      	ldrb	r0, [r0, #3]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
90009dcc:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
90009dd0:	4329      	orrs	r1, r5
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
90009dd2:	ea41 6100 	orr.w	r1, r1, r0, lsl #24
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
90009dd6:	6419      	str	r1, [r3, #64]	; 0x40
        hjpeg->JpegInCount += 4UL;
90009dd8:	6a21      	ldr	r1, [r4, #32]
90009dda:	3104      	adds	r1, #4
90009ddc:	6221      	str	r1, [r4, #32]
        input_count = hjpeg->JpegInCount;
90009dde:	6a20      	ldr	r0, [r4, #32]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
90009de0:	1881      	adds	r1, r0, r2
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
90009de2:	5c85      	ldrb	r5, [r0, r2]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
90009de4:	788a      	ldrb	r2, [r1, #2]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
90009de6:	78c8      	ldrb	r0, [r1, #3]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
90009de8:	0412      	lsls	r2, r2, #16
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
90009dea:	7849      	ldrb	r1, [r1, #1]
90009dec:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
90009df0:	432a      	orrs	r2, r5
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
90009df2:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
90009df6:	641a      	str	r2, [r3, #64]	; 0x40
        hjpeg->JpegInCount += 4UL;
90009df8:	6a22      	ldr	r2, [r4, #32]
90009dfa:	3204      	adds	r2, #4
90009dfc:	6222      	str	r2, [r4, #32]
      for (index = 0; index < nbRequestWords; index++)
90009dfe:	e64e      	b.n	90009a9e <JPEG_Process+0x2a>
  if ((hjpeg->InDataLength == 0UL) || (nbRequestWords == 0UL))
90009e00:	6aa2      	ldr	r2, [r4, #40]	; 0x28
90009e02:	2a00      	cmp	r2, #0
90009e04:	d074      	beq.n	90009ef0 <JPEG_Process+0x47c>
  else if (hjpeg->InDataLength > hjpeg->JpegInCount)
90009e06:	6a21      	ldr	r1, [r4, #32]
90009e08:	428a      	cmp	r2, r1
    nb_bytes = hjpeg->InDataLength - hjpeg->JpegInCount;
90009e0a:	6a21      	ldr	r1, [r4, #32]
  else if (hjpeg->InDataLength > hjpeg->JpegInCount)
90009e0c:	f200 8164 	bhi.w	9000a0d8 <JPEG_Process+0x664>
  else if (hjpeg->InDataLength == hjpeg->JpegInCount)
90009e10:	428a      	cmp	r2, r1
90009e12:	f040 810c 	bne.w	9000a02e <JPEG_Process+0x5ba>
    HAL_JPEG_GetDataCallback(hjpeg, hjpeg->JpegInCount);
90009e16:	6a21      	ldr	r1, [r4, #32]
90009e18:	4620      	mov	r0, r4
90009e1a:	f7f7 fca7 	bl	9000176c <HAL_JPEG_GetDataCallback>
    if (hjpeg->InDataLength > 4UL)
90009e1e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
90009e20:	2a04      	cmp	r2, #4
90009e22:	d902      	bls.n	90009e2a <JPEG_Process+0x3b6>
      hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % 4UL);
90009e24:	f022 0203 	bic.w	r2, r2, #3
90009e28:	62a2      	str	r2, [r4, #40]	; 0x28
    hjpeg->JpegInCount = 0;
90009e2a:	2100      	movs	r1, #0
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
90009e2c:	6823      	ldr	r3, [r4, #0]
    hjpeg->JpegInCount = 0;
90009e2e:	6221      	str	r1, [r4, #32]
  if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (nb_bytes > 0UL))
90009e30:	6d61      	ldr	r1, [r4, #84]	; 0x54
90009e32:	04c9      	lsls	r1, r1, #19
90009e34:	f53f ae33 	bmi.w	90009a9e <JPEG_Process+0x2a>
90009e38:	2a00      	cmp	r2, #0
90009e3a:	f43f ae30 	beq.w	90009a9e <JPEG_Process+0x2a>
    if (nb_words >= nbRequestWords)
90009e3e:	0891      	lsrs	r1, r2, #2
90009e40:	f040 8203 	bne.w	9000a24a <JPEG_Process+0x7d6>
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
90009e44:	6a20      	ldr	r0, [r4, #32]
        for (index = 0; index < nb_bytes; index++)
90009e46:	2a01      	cmp	r2, #1
          hjpeg->JpegInCount++;
90009e48:	6a21      	ldr	r1, [r4, #32]
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
90009e4a:	69a5      	ldr	r5, [r4, #24]
          hjpeg->JpegInCount++;
90009e4c:	f101 0101 	add.w	r1, r1, #1
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
90009e50:	5c28      	ldrb	r0, [r5, r0]
          hjpeg->JpegInCount++;
90009e52:	6221      	str	r1, [r4, #32]
        for (index = 0; index < nb_bytes; index++)
90009e54:	d010      	beq.n	90009e78 <JPEG_Process+0x404>
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
90009e56:	6a21      	ldr	r1, [r4, #32]
        for (index = 0; index < nb_bytes; index++)
90009e58:	2a03      	cmp	r2, #3
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
90009e5a:	5c69      	ldrb	r1, [r5, r1]
90009e5c:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
          hjpeg->JpegInCount++;
90009e60:	6a21      	ldr	r1, [r4, #32]
90009e62:	f101 0101 	add.w	r1, r1, #1
90009e66:	6221      	str	r1, [r4, #32]
        for (index = 0; index < nb_bytes; index++)
90009e68:	d106      	bne.n	90009e78 <JPEG_Process+0x404>
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
90009e6a:	6a22      	ldr	r2, [r4, #32]
90009e6c:	5ca9      	ldrb	r1, [r5, r2]
          hjpeg->JpegInCount++;
90009e6e:	6a22      	ldr	r2, [r4, #32]
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
90009e70:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
          hjpeg->JpegInCount++;
90009e74:	3201      	adds	r2, #1
90009e76:	6222      	str	r2, [r4, #32]
        hjpeg->Instance->DIR = dataword;
90009e78:	6418      	str	r0, [r3, #64]	; 0x40
90009e7a:	e610      	b.n	90009a9e <JPEG_Process+0x2a>
  if (hjpeg->OutDataLength >= (hjpeg->JpegOutCount + (nbOutputWords * 4UL)))
90009e7c:	6a62      	ldr	r2, [r4, #36]	; 0x24
90009e7e:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
90009e80:	3204      	adds	r2, #4
90009e82:	4295      	cmp	r5, r2
90009e84:	f0c0 80d5 	bcc.w	9000a032 <JPEG_Process+0x5be>
      dataword = hjpeg->Instance->DOR;
90009e88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
90009e8a:	69e1      	ldr	r1, [r4, #28]
90009e8c:	6a62      	ldr	r2, [r4, #36]	; 0x24
90009e8e:	548b      	strb	r3, [r1, r2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
90009e90:	6a61      	ldr	r1, [r4, #36]	; 0x24
90009e92:	69e2      	ldr	r2, [r4, #28]
90009e94:	440a      	add	r2, r1
90009e96:	0a19      	lsrs	r1, r3, #8
90009e98:	7051      	strb	r1, [r2, #1]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
90009e9a:	6a61      	ldr	r1, [r4, #36]	; 0x24
90009e9c:	69e2      	ldr	r2, [r4, #28]
90009e9e:	440a      	add	r2, r1
90009ea0:	0c19      	lsrs	r1, r3, #16
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
90009ea2:	0e1b      	lsrs	r3, r3, #24
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
90009ea4:	7091      	strb	r1, [r2, #2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
90009ea6:	6a61      	ldr	r1, [r4, #36]	; 0x24
90009ea8:	69e2      	ldr	r2, [r4, #28]
90009eaa:	440a      	add	r2, r1
90009eac:	70d3      	strb	r3, [r2, #3]
      hjpeg->JpegOutCount += 4UL;
90009eae:	6a63      	ldr	r3, [r4, #36]	; 0x24
    if (hjpeg->OutDataLength == hjpeg->JpegOutCount)
90009eb0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
      hjpeg->JpegOutCount += 4UL;
90009eb2:	3304      	adds	r3, #4
90009eb4:	6263      	str	r3, [r4, #36]	; 0x24
    if (hjpeg->OutDataLength == hjpeg->JpegOutCount)
90009eb6:	6a63      	ldr	r3, [r4, #36]	; 0x24
90009eb8:	429a      	cmp	r2, r3
90009eba:	f47f af07 	bne.w	90009ccc <JPEG_Process+0x258>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
90009ebe:	6a62      	ldr	r2, [r4, #36]	; 0x24
90009ec0:	4620      	mov	r0, r4
90009ec2:	69e1      	ldr	r1, [r4, #28]
90009ec4:	f7f7 fc72 	bl	900017ac <HAL_JPEG_DataReadyCallback>
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF | JPEG_FLAG_OFTF | JPEG_FLAG_OFNEF) == JPEG_FLAG_EOCF)
90009ec8:	6823      	ldr	r3, [r4, #0]
      hjpeg->JpegOutCount = 0;
90009eca:	6266      	str	r6, [r4, #36]	; 0x24
90009ecc:	e5f3      	b.n	90009ab6 <JPEG_Process+0x42>
      HAL_JPEG_DecodeCpltCallback(hjpeg);
90009ece:	f7f7 fcb7 	bl	90001840 <HAL_JPEG_DecodeCpltCallback>
    return JPEG_PROCESS_DONE;
90009ed2:	4628      	mov	r0, r5
90009ed4:	e5f5      	b.n	90009ac2 <JPEG_Process+0x4e>
      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
90009ed6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
90009ed8:	f022 027e 	bic.w	r2, r2, #126	; 0x7e
90009edc:	631a      	str	r2, [r3, #48]	; 0x30
90009ede:	e614      	b.n	90009b0a <JPEG_Process+0x96>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
90009ee0:	6a62      	ldr	r2, [r4, #36]	; 0x24
90009ee2:	4620      	mov	r0, r4
90009ee4:	69e1      	ldr	r1, [r4, #28]
90009ee6:	f7f7 fc61 	bl	900017ac <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
90009eea:	2300      	movs	r3, #0
90009eec:	6263      	str	r3, [r4, #36]	; 0x24
90009eee:	e614      	b.n	90009b1a <JPEG_Process+0xa6>
  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
90009ef0:	6d62      	ldr	r2, [r4, #84]	; 0x54
90009ef2:	f002 020c 	and.w	r2, r2, #12
90009ef6:	2a0c      	cmp	r2, #12
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_INPUT;
90009ef8:	6d62      	ldr	r2, [r4, #84]	; 0x54
  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
90009efa:	f000 80fd 	beq.w	9000a0f8 <JPEG_Process+0x684>
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
90009efe:	f002 020c 	and.w	r2, r2, #12
90009f02:	2a08      	cmp	r2, #8
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_INPUT;
90009f04:	6d62      	ldr	r2, [r4, #84]	; 0x54
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
90009f06:	f47f adca 	bne.w	90009a9e <JPEG_Process+0x2a>
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_INPUT;
90009f0a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
90009f0e:	6562      	str	r2, [r4, #84]	; 0x54
    __HAL_JPEG_DISABLE_IT(hjpeg, mask);
90009f10:	6b1a      	ldr	r2, [r3, #48]	; 0x30
90009f12:	f022 0206 	bic.w	r2, r2, #6
90009f16:	631a      	str	r2, [r3, #48]	; 0x30
  if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (nb_bytes > 0UL))
90009f18:	6d62      	ldr	r2, [r4, #84]	; 0x54
90009f1a:	e5c0      	b.n	90009a9e <JPEG_Process+0x2a>
  else if (hjpeg->OutDataLength > hjpeg->JpegOutCount)
90009f1c:	6a62      	ldr	r2, [r4, #36]	; 0x24
90009f1e:	4296      	cmp	r6, r2
90009f20:	f67f adc9 	bls.w	90009ab6 <JPEG_Process+0x42>
    nb_words = (hjpeg->OutDataLength - hjpeg->JpegOutCount) / 4UL;
90009f24:	6a60      	ldr	r0, [r4, #36]	; 0x24
90009f26:	1a30      	subs	r0, r6, r0
    for (index = 0; index < nb_words; index++)
90009f28:	0880      	lsrs	r0, r0, #2
90009f2a:	d020      	beq.n	90009f6e <JPEG_Process+0x4fa>
90009f2c:	4629      	mov	r1, r5
90009f2e:	e000      	b.n	90009f32 <JPEG_Process+0x4be>
      dataword = hjpeg->Instance->DOR;
90009f30:	6823      	ldr	r3, [r4, #0]
90009f32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    for (index = 0; index < nb_words; index++)
90009f34:	3101      	adds	r1, #1
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
90009f36:	6a62      	ldr	r2, [r4, #36]	; 0x24
90009f38:	69e6      	ldr	r6, [r4, #28]
    for (index = 0; index < nb_words; index++)
90009f3a:	4288      	cmp	r0, r1
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
90009f3c:	54b3      	strb	r3, [r6, r2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
90009f3e:	6a66      	ldr	r6, [r4, #36]	; 0x24
90009f40:	69e2      	ldr	r2, [r4, #28]
90009f42:	4432      	add	r2, r6
90009f44:	ea4f 2613 	mov.w	r6, r3, lsr #8
90009f48:	7056      	strb	r6, [r2, #1]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
90009f4a:	6a66      	ldr	r6, [r4, #36]	; 0x24
90009f4c:	69e2      	ldr	r2, [r4, #28]
90009f4e:	4432      	add	r2, r6
90009f50:	ea4f 4613 	mov.w	r6, r3, lsr #16
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
90009f54:	ea4f 6313 	mov.w	r3, r3, lsr #24
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
90009f58:	7096      	strb	r6, [r2, #2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
90009f5a:	6a66      	ldr	r6, [r4, #36]	; 0x24
90009f5c:	69e2      	ldr	r2, [r4, #28]
90009f5e:	4432      	add	r2, r6
90009f60:	70d3      	strb	r3, [r2, #3]
      hjpeg->JpegOutCount += 4UL;
90009f62:	6a63      	ldr	r3, [r4, #36]	; 0x24
90009f64:	f103 0304 	add.w	r3, r3, #4
90009f68:	6263      	str	r3, [r4, #36]	; 0x24
    for (index = 0; index < nb_words; index++)
90009f6a:	d1e1      	bne.n	90009f30 <JPEG_Process+0x4bc>
    if (hjpeg->OutDataLength == hjpeg->JpegOutCount)
90009f6c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
90009f6e:	6a63      	ldr	r3, [r4, #36]	; 0x24
90009f70:	42b3      	cmp	r3, r6
90009f72:	f000 8161 	beq.w	9000a238 <JPEG_Process+0x7c4>
      nb_bytes = hjpeg->OutDataLength - hjpeg->JpegOutCount;
90009f76:	f8d4 8024 	ldr.w	r8, [r4, #36]	; 0x24
      dataword = hjpeg->Instance->DOR;
90009f7a:	6823      	ldr	r3, [r4, #0]
      for (index = 0; index < nb_bytes; index++)
90009f7c:	ebb6 0008 	subs.w	r0, r6, r8
      dataword = hjpeg->Instance->DOR;
90009f80:	6c5f      	ldr	r7, [r3, #68]	; 0x44
      for (index = 0; index < nb_bytes; index++)
90009f82:	d00e      	beq.n	90009fa2 <JPEG_Process+0x52e>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * (index & 0x3UL))) & 0xFFUL);
90009f84:	f005 0303 	and.w	r3, r5, #3
90009f88:	6a62      	ldr	r2, [r4, #36]	; 0x24
90009f8a:	69e1      	ldr	r1, [r4, #28]
      for (index = 0; index < nb_bytes; index++)
90009f8c:	3501      	adds	r5, #1
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * (index & 0x3UL))) & 0xFFUL);
90009f8e:	00db      	lsls	r3, r3, #3
      for (index = 0; index < nb_bytes; index++)
90009f90:	42a8      	cmp	r0, r5
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * (index & 0x3UL))) & 0xFFUL);
90009f92:	fa27 f303 	lsr.w	r3, r7, r3
90009f96:	548b      	strb	r3, [r1, r2]
        hjpeg->JpegOutCount++;
90009f98:	6a63      	ldr	r3, [r4, #36]	; 0x24
90009f9a:	f103 0301 	add.w	r3, r3, #1
90009f9e:	6263      	str	r3, [r4, #36]	; 0x24
      for (index = 0; index < nb_bytes; index++)
90009fa0:	d1f0      	bne.n	90009f84 <JPEG_Process+0x510>
      nb_bytes = 4UL - nb_bytes;
90009fa2:	f108 0804 	add.w	r8, r8, #4
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
90009fa6:	6a62      	ldr	r2, [r4, #36]	; 0x24
90009fa8:	69e1      	ldr	r1, [r4, #28]
90009faa:	4620      	mov	r0, r4
      nb_bytes = 4UL - nb_bytes;
90009fac:	eba8 0806 	sub.w	r8, r8, r6
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
90009fb0:	f7f7 fbfc 	bl	900017ac <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
90009fb4:	2300      	movs	r3, #0
      for (index = nb_bytes; index < 4UL; index++)
90009fb6:	f1b8 0f03 	cmp.w	r8, #3
      hjpeg->JpegOutCount = 0;
90009fba:	6263      	str	r3, [r4, #36]	; 0x24
      for (index = nb_bytes; index < 4UL; index++)
90009fbc:	f63f ae86 	bhi.w	90009ccc <JPEG_Process+0x258>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * index)) & 0xFFUL);
90009fc0:	ea4f 03c8 	mov.w	r3, r8, lsl #3
90009fc4:	6a62      	ldr	r2, [r4, #36]	; 0x24
90009fc6:	69e1      	ldr	r1, [r4, #28]
      for (index = nb_bytes; index < 4UL; index++)
90009fc8:	f1b8 0f03 	cmp.w	r8, #3
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * index)) & 0xFFUL);
90009fcc:	fa27 f003 	lsr.w	r0, r7, r3
90009fd0:	5488      	strb	r0, [r1, r2]
        hjpeg->JpegOutCount++;
90009fd2:	6a62      	ldr	r2, [r4, #36]	; 0x24
90009fd4:	f102 0201 	add.w	r2, r2, #1
90009fd8:	6262      	str	r2, [r4, #36]	; 0x24
      for (index = nb_bytes; index < 4UL; index++)
90009fda:	f43f ae77 	beq.w	90009ccc <JPEG_Process+0x258>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * index)) & 0xFFUL);
90009fde:	f103 0208 	add.w	r2, r3, #8
90009fe2:	6a61      	ldr	r1, [r4, #36]	; 0x24
90009fe4:	69e0      	ldr	r0, [r4, #28]
      for (index = nb_bytes; index < 4UL; index++)
90009fe6:	f1b8 0f02 	cmp.w	r8, #2
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * index)) & 0xFFUL);
90009fea:	fa27 f202 	lsr.w	r2, r7, r2
90009fee:	5442      	strb	r2, [r0, r1]
        hjpeg->JpegOutCount++;
90009ff0:	6a62      	ldr	r2, [r4, #36]	; 0x24
90009ff2:	f102 0201 	add.w	r2, r2, #1
90009ff6:	6262      	str	r2, [r4, #36]	; 0x24
      for (index = nb_bytes; index < 4UL; index++)
90009ff8:	f108 0202 	add.w	r2, r8, #2
90009ffc:	f43f ae66 	beq.w	90009ccc <JPEG_Process+0x258>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * index)) & 0xFFUL);
9000a000:	3310      	adds	r3, #16
9000a002:	6a61      	ldr	r1, [r4, #36]	; 0x24
9000a004:	69e0      	ldr	r0, [r4, #28]
      for (index = nb_bytes; index < 4UL; index++)
9000a006:	2a02      	cmp	r2, #2
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * index)) & 0xFFUL);
9000a008:	fa27 f303 	lsr.w	r3, r7, r3
9000a00c:	5443      	strb	r3, [r0, r1]
        hjpeg->JpegOutCount++;
9000a00e:	6a63      	ldr	r3, [r4, #36]	; 0x24
9000a010:	f103 0301 	add.w	r3, r3, #1
9000a014:	6263      	str	r3, [r4, #36]	; 0x24
      for (index = nb_bytes; index < 4UL; index++)
9000a016:	f47f ae59 	bne.w	90009ccc <JPEG_Process+0x258>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * index)) & 0xFFUL);
9000a01a:	6a63      	ldr	r3, [r4, #36]	; 0x24
9000a01c:	0e3f      	lsrs	r7, r7, #24
9000a01e:	69e2      	ldr	r2, [r4, #28]
9000a020:	54d7      	strb	r7, [r2, r3]
        hjpeg->JpegOutCount++;
9000a022:	6a63      	ldr	r3, [r4, #36]	; 0x24
9000a024:	3301      	adds	r3, #1
9000a026:	6263      	str	r3, [r4, #36]	; 0x24
      for (index = nb_bytes; index < 4UL; index++)
9000a028:	e650      	b.n	90009ccc <JPEG_Process+0x258>
  else if (hjpeg->InDataLength == hjpeg->JpegInCount)
9000a02a:	428a      	cmp	r2, r1
9000a02c:	d056      	beq.n	9000a0dc <JPEG_Process+0x668>
  if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (nb_bytes > 0UL))
9000a02e:	6d62      	ldr	r2, [r4, #84]	; 0x54
9000a030:	e535      	b.n	90009a9e <JPEG_Process+0x2a>
  else if (hjpeg->OutDataLength > hjpeg->JpegOutCount)
9000a032:	6a62      	ldr	r2, [r4, #36]	; 0x24
9000a034:	4295      	cmp	r5, r2
9000a036:	f67f ad3e 	bls.w	90009ab6 <JPEG_Process+0x42>
    nb_words = (hjpeg->OutDataLength - hjpeg->JpegOutCount) / 4UL;
9000a03a:	6a60      	ldr	r0, [r4, #36]	; 0x24
9000a03c:	1a28      	subs	r0, r5, r0
    for (index = 0; index < nb_words; index++)
9000a03e:	0880      	lsrs	r0, r0, #2
9000a040:	d020      	beq.n	9000a084 <JPEG_Process+0x610>
9000a042:	4631      	mov	r1, r6
9000a044:	e000      	b.n	9000a048 <JPEG_Process+0x5d4>
      dataword = hjpeg->Instance->DOR;
9000a046:	6823      	ldr	r3, [r4, #0]
9000a048:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    for (index = 0; index < nb_words; index++)
9000a04a:	3101      	adds	r1, #1
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
9000a04c:	6a62      	ldr	r2, [r4, #36]	; 0x24
9000a04e:	69e5      	ldr	r5, [r4, #28]
    for (index = 0; index < nb_words; index++)
9000a050:	4288      	cmp	r0, r1
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
9000a052:	54ab      	strb	r3, [r5, r2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
9000a054:	6a65      	ldr	r5, [r4, #36]	; 0x24
9000a056:	69e2      	ldr	r2, [r4, #28]
9000a058:	442a      	add	r2, r5
9000a05a:	ea4f 2513 	mov.w	r5, r3, lsr #8
9000a05e:	7055      	strb	r5, [r2, #1]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
9000a060:	6a65      	ldr	r5, [r4, #36]	; 0x24
9000a062:	69e2      	ldr	r2, [r4, #28]
9000a064:	442a      	add	r2, r5
9000a066:	ea4f 4513 	mov.w	r5, r3, lsr #16
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
9000a06a:	ea4f 6313 	mov.w	r3, r3, lsr #24
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
9000a06e:	7095      	strb	r5, [r2, #2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
9000a070:	6a65      	ldr	r5, [r4, #36]	; 0x24
9000a072:	69e2      	ldr	r2, [r4, #28]
9000a074:	442a      	add	r2, r5
9000a076:	70d3      	strb	r3, [r2, #3]
      hjpeg->JpegOutCount += 4UL;
9000a078:	6a63      	ldr	r3, [r4, #36]	; 0x24
9000a07a:	f103 0304 	add.w	r3, r3, #4
9000a07e:	6263      	str	r3, [r4, #36]	; 0x24
    for (index = 0; index < nb_words; index++)
9000a080:	d1e1      	bne.n	9000a046 <JPEG_Process+0x5d2>
    if (hjpeg->OutDataLength == hjpeg->JpegOutCount)
9000a082:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
9000a084:	6a63      	ldr	r3, [r4, #36]	; 0x24
9000a086:	429d      	cmp	r5, r3
9000a088:	f000 80d6 	beq.w	9000a238 <JPEG_Process+0x7c4>
      nb_bytes = hjpeg->OutDataLength - hjpeg->JpegOutCount;
9000a08c:	f8d4 8024 	ldr.w	r8, [r4, #36]	; 0x24
      dataword = hjpeg->Instance->DOR;
9000a090:	6823      	ldr	r3, [r4, #0]
      for (index = 0; index < nb_bytes; index++)
9000a092:	ebb5 0008 	subs.w	r0, r5, r8
      dataword = hjpeg->Instance->DOR;
9000a096:	6c5f      	ldr	r7, [r3, #68]	; 0x44
      for (index = 0; index < nb_bytes; index++)
9000a098:	d00e      	beq.n	9000a0b8 <JPEG_Process+0x644>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * (index & 0x3UL))) & 0xFFUL);
9000a09a:	f006 0303 	and.w	r3, r6, #3
9000a09e:	6a62      	ldr	r2, [r4, #36]	; 0x24
9000a0a0:	69e1      	ldr	r1, [r4, #28]
      for (index = 0; index < nb_bytes; index++)
9000a0a2:	3601      	adds	r6, #1
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * (index & 0x3UL))) & 0xFFUL);
9000a0a4:	00db      	lsls	r3, r3, #3
      for (index = 0; index < nb_bytes; index++)
9000a0a6:	42b0      	cmp	r0, r6
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * (index & 0x3UL))) & 0xFFUL);
9000a0a8:	fa27 f303 	lsr.w	r3, r7, r3
9000a0ac:	548b      	strb	r3, [r1, r2]
        hjpeg->JpegOutCount++;
9000a0ae:	6a63      	ldr	r3, [r4, #36]	; 0x24
9000a0b0:	f103 0301 	add.w	r3, r3, #1
9000a0b4:	6263      	str	r3, [r4, #36]	; 0x24
      for (index = 0; index < nb_bytes; index++)
9000a0b6:	d1f0      	bne.n	9000a09a <JPEG_Process+0x626>
      nb_bytes = 4UL - nb_bytes;
9000a0b8:	f108 0804 	add.w	r8, r8, #4
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
9000a0bc:	6a62      	ldr	r2, [r4, #36]	; 0x24
9000a0be:	69e1      	ldr	r1, [r4, #28]
9000a0c0:	4620      	mov	r0, r4
      nb_bytes = 4UL - nb_bytes;
9000a0c2:	eba8 0805 	sub.w	r8, r8, r5
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
9000a0c6:	f7f7 fb71 	bl	900017ac <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
9000a0ca:	2300      	movs	r3, #0
      for (index = nb_bytes; index < 4UL; index++)
9000a0cc:	f1b8 0f03 	cmp.w	r8, #3
      hjpeg->JpegOutCount = 0;
9000a0d0:	6263      	str	r3, [r4, #36]	; 0x24
      for (index = nb_bytes; index < 4UL; index++)
9000a0d2:	f67f af75 	bls.w	90009fc0 <JPEG_Process+0x54c>
9000a0d6:	e5f9      	b.n	90009ccc <JPEG_Process+0x258>
    nb_bytes = hjpeg->InDataLength - hjpeg->JpegInCount;
9000a0d8:	1a52      	subs	r2, r2, r1
9000a0da:	e6a9      	b.n	90009e30 <JPEG_Process+0x3bc>
    HAL_JPEG_GetDataCallback(hjpeg, hjpeg->JpegInCount);
9000a0dc:	6a21      	ldr	r1, [r4, #32]
9000a0de:	4620      	mov	r0, r4
9000a0e0:	f7f7 fb44 	bl	9000176c <HAL_JPEG_GetDataCallback>
    if (hjpeg->InDataLength > 4UL)
9000a0e4:	6aa2      	ldr	r2, [r4, #40]	; 0x28
9000a0e6:	2a04      	cmp	r2, #4
9000a0e8:	d902      	bls.n	9000a0f0 <JPEG_Process+0x67c>
      hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % 4UL);
9000a0ea:	f022 0203 	bic.w	r2, r2, #3
9000a0ee:	62a2      	str	r2, [r4, #40]	; 0x28
    hjpeg->JpegInCount = 0;
9000a0f0:	2100      	movs	r1, #0
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
9000a0f2:	6823      	ldr	r3, [r4, #0]
    hjpeg->JpegInCount = 0;
9000a0f4:	6221      	str	r1, [r4, #32]
    nb_bytes = hjpeg->InDataLength;
9000a0f6:	e5f5      	b.n	90009ce4 <JPEG_Process+0x270>
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_INPUT;
9000a0f8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
9000a0fc:	6562      	str	r2, [r4, #84]	; 0x54
  if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (nb_bytes > 0UL))
9000a0fe:	6d62      	ldr	r2, [r4, #84]	; 0x54
9000a100:	e4cd      	b.n	90009a9e <JPEG_Process+0x2a>
      if (nb_words > 0UL)
9000a102:	2a03      	cmp	r2, #3
9000a104:	f240 80a4 	bls.w	9000a250 <JPEG_Process+0x7dc>
        for (index = 0; index < nb_words; index++)
9000a108:	2900      	cmp	r1, #0
9000a10a:	f43f acc8 	beq.w	90009a9e <JPEG_Process+0x2a>
          input_count = hjpeg->JpegInCount;
9000a10e:	6a20      	ldr	r0, [r4, #32]
        for (index = 0; index < nb_words; index++)
9000a110:	2901      	cmp	r1, #1
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
9000a112:	69a2      	ldr	r2, [r4, #24]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
9000a114:	eb02 0500 	add.w	r5, r2, r0
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
9000a118:	5c16      	ldrb	r6, [r2, r0]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
9000a11a:	78a8      	ldrb	r0, [r5, #2]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
9000a11c:	786f      	ldrb	r7, [r5, #1]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
9000a11e:	ea4f 4000 	mov.w	r0, r0, lsl #16
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
9000a122:	78ed      	ldrb	r5, [r5, #3]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
9000a124:	ea40 2007 	orr.w	r0, r0, r7, lsl #8
9000a128:	ea40 0006 	orr.w	r0, r0, r6
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
9000a12c:	ea40 6005 	orr.w	r0, r0, r5, lsl #24
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
9000a130:	6418      	str	r0, [r3, #64]	; 0x40
          hjpeg->JpegInCount += 4UL;
9000a132:	6a20      	ldr	r0, [r4, #32]
9000a134:	f100 0004 	add.w	r0, r0, #4
9000a138:	6220      	str	r0, [r4, #32]
        for (index = 0; index < nb_words; index++)
9000a13a:	f43f acb0 	beq.w	90009a9e <JPEG_Process+0x2a>
          input_count = hjpeg->JpegInCount;
9000a13e:	6a20      	ldr	r0, [r4, #32]
        for (index = 0; index < nb_words; index++)
9000a140:	2902      	cmp	r1, #2
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
9000a142:	eb02 0500 	add.w	r5, r2, r0
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
9000a146:	5c16      	ldrb	r6, [r2, r0]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
9000a148:	78a8      	ldrb	r0, [r5, #2]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
9000a14a:	786f      	ldrb	r7, [r5, #1]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
9000a14c:	ea4f 4000 	mov.w	r0, r0, lsl #16
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
9000a150:	78ed      	ldrb	r5, [r5, #3]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
9000a152:	ea40 2007 	orr.w	r0, r0, r7, lsl #8
9000a156:	ea40 0006 	orr.w	r0, r0, r6
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
9000a15a:	ea40 6005 	orr.w	r0, r0, r5, lsl #24
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
9000a15e:	6418      	str	r0, [r3, #64]	; 0x40
          hjpeg->JpegInCount += 4UL;
9000a160:	6a20      	ldr	r0, [r4, #32]
9000a162:	f100 0004 	add.w	r0, r0, #4
9000a166:	6220      	str	r0, [r4, #32]
        for (index = 0; index < nb_words; index++)
9000a168:	f43f ac99 	beq.w	90009a9e <JPEG_Process+0x2a>
          input_count = hjpeg->JpegInCount;
9000a16c:	6a20      	ldr	r0, [r4, #32]
        for (index = 0; index < nb_words; index++)
9000a16e:	2903      	cmp	r1, #3
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
9000a170:	eb02 0500 	add.w	r5, r2, r0
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
9000a174:	5c16      	ldrb	r6, [r2, r0]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
9000a176:	78a8      	ldrb	r0, [r5, #2]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
9000a178:	786f      	ldrb	r7, [r5, #1]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
9000a17a:	ea4f 4000 	mov.w	r0, r0, lsl #16
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
9000a17e:	78ed      	ldrb	r5, [r5, #3]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
9000a180:	ea40 2007 	orr.w	r0, r0, r7, lsl #8
9000a184:	ea40 0006 	orr.w	r0, r0, r6
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
9000a188:	ea40 6005 	orr.w	r0, r0, r5, lsl #24
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
9000a18c:	6418      	str	r0, [r3, #64]	; 0x40
          hjpeg->JpegInCount += 4UL;
9000a18e:	6a20      	ldr	r0, [r4, #32]
9000a190:	f100 0004 	add.w	r0, r0, #4
9000a194:	6220      	str	r0, [r4, #32]
        for (index = 0; index < nb_words; index++)
9000a196:	f43f ac82 	beq.w	90009a9e <JPEG_Process+0x2a>
          input_count = hjpeg->JpegInCount;
9000a19a:	6a20      	ldr	r0, [r4, #32]
        for (index = 0; index < nb_words; index++)
9000a19c:	2904      	cmp	r1, #4
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
9000a19e:	eb02 0500 	add.w	r5, r2, r0
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
9000a1a2:	5c16      	ldrb	r6, [r2, r0]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
9000a1a4:	78a8      	ldrb	r0, [r5, #2]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
9000a1a6:	786f      	ldrb	r7, [r5, #1]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
9000a1a8:	ea4f 4000 	mov.w	r0, r0, lsl #16
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
9000a1ac:	78ed      	ldrb	r5, [r5, #3]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
9000a1ae:	ea40 2007 	orr.w	r0, r0, r7, lsl #8
9000a1b2:	ea40 0006 	orr.w	r0, r0, r6
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
9000a1b6:	ea40 6005 	orr.w	r0, r0, r5, lsl #24
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
9000a1ba:	6418      	str	r0, [r3, #64]	; 0x40
          hjpeg->JpegInCount += 4UL;
9000a1bc:	6a20      	ldr	r0, [r4, #32]
9000a1be:	f100 0004 	add.w	r0, r0, #4
9000a1c2:	6220      	str	r0, [r4, #32]
        for (index = 0; index < nb_words; index++)
9000a1c4:	f43f ac6b 	beq.w	90009a9e <JPEG_Process+0x2a>
          input_count = hjpeg->JpegInCount;
9000a1c8:	6a20      	ldr	r0, [r4, #32]
        for (index = 0; index < nb_words; index++)
9000a1ca:	2905      	cmp	r1, #5
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
9000a1cc:	eb02 0500 	add.w	r5, r2, r0
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
9000a1d0:	5c16      	ldrb	r6, [r2, r0]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
9000a1d2:	78a8      	ldrb	r0, [r5, #2]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
9000a1d4:	786f      	ldrb	r7, [r5, #1]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
9000a1d6:	ea4f 4000 	mov.w	r0, r0, lsl #16
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
9000a1da:	78ed      	ldrb	r5, [r5, #3]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
9000a1dc:	ea40 2007 	orr.w	r0, r0, r7, lsl #8
9000a1e0:	ea40 0006 	orr.w	r0, r0, r6
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
9000a1e4:	ea40 6005 	orr.w	r0, r0, r5, lsl #24
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
9000a1e8:	6418      	str	r0, [r3, #64]	; 0x40
          hjpeg->JpegInCount += 4UL;
9000a1ea:	6a20      	ldr	r0, [r4, #32]
9000a1ec:	f100 0004 	add.w	r0, r0, #4
9000a1f0:	6220      	str	r0, [r4, #32]
        for (index = 0; index < nb_words; index++)
9000a1f2:	f43f ac54 	beq.w	90009a9e <JPEG_Process+0x2a>
          input_count = hjpeg->JpegInCount;
9000a1f6:	6a20      	ldr	r0, [r4, #32]
        for (index = 0; index < nb_words; index++)
9000a1f8:	2907      	cmp	r1, #7
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
9000a1fa:	eb02 0500 	add.w	r5, r2, r0
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
9000a1fe:	5c16      	ldrb	r6, [r2, r0]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
9000a200:	78a8      	ldrb	r0, [r5, #2]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
9000a202:	786f      	ldrb	r7, [r5, #1]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
9000a204:	ea4f 4000 	mov.w	r0, r0, lsl #16
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
9000a208:	78ed      	ldrb	r5, [r5, #3]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
9000a20a:	ea40 2007 	orr.w	r0, r0, r7, lsl #8
9000a20e:	ea40 0006 	orr.w	r0, r0, r6
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
9000a212:	ea40 6005 	orr.w	r0, r0, r5, lsl #24
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
9000a216:	6418      	str	r0, [r3, #64]	; 0x40
          hjpeg->JpegInCount += 4UL;
9000a218:	6a20      	ldr	r0, [r4, #32]
9000a21a:	f100 0004 	add.w	r0, r0, #4
9000a21e:	6220      	str	r0, [r4, #32]
        for (index = 0; index < nb_words; index++)
9000a220:	f47f ac3d 	bne.w	90009a9e <JPEG_Process+0x2a>
          input_count = hjpeg->JpegInCount;
9000a224:	6a20      	ldr	r0, [r4, #32]
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
9000a226:	e5db      	b.n	90009de0 <JPEG_Process+0x36c>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
9000a228:	6a62      	ldr	r2, [r4, #36]	; 0x24
9000a22a:	4620      	mov	r0, r4
9000a22c:	69e1      	ldr	r1, [r4, #28]
9000a22e:	f7f7 fabd 	bl	900017ac <HAL_JPEG_DataReadyCallback>
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF | JPEG_FLAG_OFTF | JPEG_FLAG_OFNEF) == JPEG_FLAG_EOCF)
9000a232:	6823      	ldr	r3, [r4, #0]
      hjpeg->JpegOutCount = 0;
9000a234:	6265      	str	r5, [r4, #36]	; 0x24
9000a236:	e43e      	b.n	90009ab6 <JPEG_Process+0x42>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
9000a238:	6a62      	ldr	r2, [r4, #36]	; 0x24
9000a23a:	4620      	mov	r0, r4
9000a23c:	69e1      	ldr	r1, [r4, #28]
9000a23e:	f7f7 fab5 	bl	900017ac <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
9000a242:	2200      	movs	r2, #0
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF | JPEG_FLAG_OFTF | JPEG_FLAG_OFNEF) == JPEG_FLAG_EOCF)
9000a244:	6823      	ldr	r3, [r4, #0]
      hjpeg->JpegOutCount = 0;
9000a246:	6262      	str	r2, [r4, #36]	; 0x24
9000a248:	e435      	b.n	90009ab6 <JPEG_Process+0x42>
        input_count = hjpeg->JpegInCount;
9000a24a:	6a22      	ldr	r2, [r4, #32]
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
9000a24c:	69a0      	ldr	r0, [r4, #24]
9000a24e:	e5c7      	b.n	90009de0 <JPEG_Process+0x36c>
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
9000a250:	6a21      	ldr	r1, [r4, #32]
        for (index = 0; index < nb_bytes; index++)
9000a252:	2a01      	cmp	r2, #1
          hjpeg->JpegInCount++;
9000a254:	6a20      	ldr	r0, [r4, #32]
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
9000a256:	69a5      	ldr	r5, [r4, #24]
          hjpeg->JpegInCount++;
9000a258:	f100 0001 	add.w	r0, r0, #1
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
9000a25c:	5c69      	ldrb	r1, [r5, r1]
          hjpeg->JpegInCount++;
9000a25e:	6220      	str	r0, [r4, #32]
        for (index = 0; index < nb_bytes; index++)
9000a260:	d010      	beq.n	9000a284 <JPEG_Process+0x810>
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
9000a262:	6a20      	ldr	r0, [r4, #32]
        for (index = 0; index < nb_bytes; index++)
9000a264:	2a03      	cmp	r2, #3
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
9000a266:	5c28      	ldrb	r0, [r5, r0]
9000a268:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
          hjpeg->JpegInCount++;
9000a26c:	6a20      	ldr	r0, [r4, #32]
9000a26e:	f100 0001 	add.w	r0, r0, #1
9000a272:	6220      	str	r0, [r4, #32]
        for (index = 0; index < nb_bytes; index++)
9000a274:	d106      	bne.n	9000a284 <JPEG_Process+0x810>
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
9000a276:	6a22      	ldr	r2, [r4, #32]
9000a278:	5ca8      	ldrb	r0, [r5, r2]
          hjpeg->JpegInCount++;
9000a27a:	6a22      	ldr	r2, [r4, #32]
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
9000a27c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
          hjpeg->JpegInCount++;
9000a280:	3201      	adds	r2, #1
9000a282:	6222      	str	r2, [r4, #32]
        hjpeg->Instance->DIR = dataword;
9000a284:	6419      	str	r1, [r3, #64]	; 0x40
9000a286:	e40a      	b.n	90009a9e <JPEG_Process+0x2a>

9000a288 <HAL_JPEG_IRQHandler>:
  switch (hjpeg->State)
9000a288:	f890 304d 	ldrb.w	r3, [r0, #77]	; 0x4d
9000a28c:	3b03      	subs	r3, #3
9000a28e:	2b01      	cmp	r3, #1
9000a290:	d900      	bls.n	9000a294 <HAL_JPEG_IRQHandler+0xc>
9000a292:	4770      	bx	lr
      if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
9000a294:	6d43      	ldr	r3, [r0, #84]	; 0x54
9000a296:	f003 030c 	and.w	r3, r3, #12
9000a29a:	2b08      	cmp	r3, #8
{
9000a29c:	b530      	push	{r4, r5, lr}
9000a29e:	4604      	mov	r4, r0
9000a2a0:	b083      	sub	sp, #12
      if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
9000a2a2:	d006      	beq.n	9000a2b2 <HAL_JPEG_IRQHandler+0x2a>
      else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
9000a2a4:	6d43      	ldr	r3, [r0, #84]	; 0x54
9000a2a6:	f003 030c 	and.w	r3, r3, #12
9000a2aa:	2b0c      	cmp	r3, #12
9000a2ac:	d006      	beq.n	9000a2bc <HAL_JPEG_IRQHandler+0x34>
}
9000a2ae:	b003      	add	sp, #12
9000a2b0:	bd30      	pop	{r4, r5, pc}
9000a2b2:	b003      	add	sp, #12
9000a2b4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        (void) JPEG_Process(hjpeg);
9000a2b8:	f7ff bbdc 	b.w	90009a74 <JPEG_Process>
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
9000a2bc:	6d43      	ldr	r3, [r0, #84]	; 0x54
9000a2be:	f003 0303 	and.w	r3, r3, #3
9000a2c2:	2b02      	cmp	r3, #2
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_HPDF) != 0UL)
9000a2c4:	6803      	ldr	r3, [r0, #0]
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
9000a2c6:	d045      	beq.n	9000a354 <HAL_JPEG_IRQHandler+0xcc>
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF) != 0UL)
9000a2c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
9000a2ca:	0692      	lsls	r2, r2, #26
9000a2cc:	d5ef      	bpl.n	9000a2ae <HAL_JPEG_IRQHandler+0x26>
    hjpeg->Context |= JPEG_CONTEXT_ENDING_DMA;
9000a2ce:	6d62      	ldr	r2, [r4, #84]	; 0x54
    if (hjpeg->hdmain->State == HAL_MDMA_STATE_BUSY)
9000a2d0:	6b20      	ldr	r0, [r4, #48]	; 0x30
    hjpeg->Context |= JPEG_CONTEXT_ENDING_DMA;
9000a2d2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
9000a2d6:	6562      	str	r2, [r4, #84]	; 0x54
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
9000a2d8:	681a      	ldr	r2, [r3, #0]
9000a2da:	f022 0201 	bic.w	r2, r2, #1
9000a2de:	601a      	str	r2, [r3, #0]
    __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
9000a2e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
9000a2e2:	f022 027e 	bic.w	r2, r2, #126	; 0x7e
9000a2e6:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
9000a2e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
9000a2ea:	f042 0260 	orr.w	r2, r2, #96	; 0x60
9000a2ee:	639a      	str	r2, [r3, #56]	; 0x38
    if (hjpeg->hdmain->State == HAL_MDMA_STATE_BUSY)
9000a2f0:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
9000a2f4:	2b02      	cmp	r3, #2
9000a2f6:	d052      	beq.n	9000a39e <HAL_JPEG_IRQHandler+0x116>
    if (hjpeg->hdmaout->State == HAL_MDMA_STATE_BUSY)
9000a2f8:	6b60      	ldr	r0, [r4, #52]	; 0x34
9000a2fa:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
9000a2fe:	2b02      	cmp	r3, #2
9000a300:	d03f      	beq.n	9000a382 <HAL_JPEG_IRQHandler+0xfa>
  hjpeg->JpegOutCount = hjpeg->OutDataLength - (hjpeg->hdmaout->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
9000a302:	6803      	ldr	r3, [r0, #0]
9000a304:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
9000a306:	695b      	ldr	r3, [r3, #20]
9000a308:	f3c3 0310 	ubfx	r3, r3, #0, #17
9000a30c:	1ad3      	subs	r3, r2, r3
9000a30e:	6263      	str	r3, [r4, #36]	; 0x24
  if (hjpeg->JpegOutCount == hjpeg->OutDataLength)
9000a310:	6a63      	ldr	r3, [r4, #36]	; 0x24
9000a312:	429a      	cmp	r2, r3
9000a314:	d046      	beq.n	9000a3a4 <HAL_JPEG_IRQHandler+0x11c>
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) == 0UL)
9000a316:	6822      	ldr	r2, [r4, #0]
9000a318:	6b55      	ldr	r5, [r2, #52]	; 0x34
9000a31a:	f015 0510 	ands.w	r5, r5, #16
9000a31e:	d135      	bne.n	9000a38c <HAL_JPEG_IRQHandler+0x104>
    if (hjpeg->JpegOutCount > 0UL)
9000a320:	6a63      	ldr	r3, [r4, #36]	; 0x24
9000a322:	2b00      	cmp	r3, #0
9000a324:	d149      	bne.n	9000a3ba <HAL_JPEG_IRQHandler+0x132>
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
9000a326:	6813      	ldr	r3, [r2, #0]
    __HAL_UNLOCK(hjpeg);
9000a328:	2000      	movs	r0, #0
    hjpeg->State = HAL_JPEG_STATE_READY;
9000a32a:	2101      	movs	r1, #1
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
9000a32c:	f023 0301 	bic.w	r3, r3, #1
9000a330:	6013      	str	r3, [r2, #0]
    tmpContext = hjpeg->Context;
9000a332:	6d63      	ldr	r3, [r4, #84]	; 0x54
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
9000a334:	6d62      	ldr	r2, [r4, #84]	; 0x54
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
9000a336:	f003 0303 	and.w	r3, r3, #3
    __HAL_UNLOCK(hjpeg);
9000a33a:	f884 004c 	strb.w	r0, [r4, #76]	; 0x4c
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
9000a33e:	f402 4282 	and.w	r2, r2, #16640	; 0x4100
      HAL_JPEG_DecodeCpltCallback(hjpeg);
9000a342:	4620      	mov	r0, r4
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
9000a344:	2b02      	cmp	r3, #2
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
9000a346:	6562      	str	r2, [r4, #84]	; 0x54
    hjpeg->State = HAL_JPEG_STATE_READY;
9000a348:	f884 104d 	strb.w	r1, [r4, #77]	; 0x4d
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
9000a34c:	d032      	beq.n	9000a3b4 <HAL_JPEG_IRQHandler+0x12c>
      HAL_JPEG_EncodeCpltCallback(hjpeg);
9000a34e:	f7ff f9c9 	bl	900096e4 <HAL_JPEG_EncodeCpltCallback>
9000a352:	e7ac      	b.n	9000a2ae <HAL_JPEG_IRQHandler+0x26>
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_HPDF) != 0UL)
9000a354:	6b5a      	ldr	r2, [r3, #52]	; 0x34
9000a356:	0651      	lsls	r1, r2, #25
9000a358:	d5b6      	bpl.n	9000a2c8 <HAL_JPEG_IRQHandler+0x40>
      (void) HAL_JPEG_GetInfo(hjpeg, &hjpeg->Conf);
9000a35a:	1d01      	adds	r1, r0, #4
  if ((hjpeg == NULL) || (pInfo == NULL))
9000a35c:	9101      	str	r1, [sp, #4]
9000a35e:	f7fe ff33 	bl	900091c8 <HAL_JPEG_GetInfo.part.0>
      hjpeg->Conf.ImageQuality = 0;
9000a362:	2300      	movs	r3, #0
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
9000a364:	9901      	ldr	r1, [sp, #4]
9000a366:	4620      	mov	r0, r4
      hjpeg->Conf.ImageQuality = 0;
9000a368:	6163      	str	r3, [r4, #20]
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
9000a36a:	f7f7 f9ad 	bl	900016c8 <HAL_JPEG_InfoReadyCallback>
      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_IT_HPD);
9000a36e:	6823      	ldr	r3, [r4, #0]
9000a370:	6b1a      	ldr	r2, [r3, #48]	; 0x30
9000a372:	f022 0240 	bic.w	r2, r2, #64	; 0x40
9000a376:	631a      	str	r2, [r3, #48]	; 0x30
      __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_HPDF);
9000a378:	6b9a      	ldr	r2, [r3, #56]	; 0x38
9000a37a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
9000a37e:	639a      	str	r2, [r3, #56]	; 0x38
9000a380:	e7a2      	b.n	9000a2c8 <HAL_JPEG_IRQHandler+0x40>
}
9000a382:	b003      	add	sp, #12
9000a384:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
      (void) HAL_MDMA_Abort_IT(hjpeg->hdmaout);
9000a388:	f000 bb30 	b.w	9000a9ec <HAL_MDMA_Abort_IT>
  else if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
9000a38c:	6d63      	ldr	r3, [r4, #84]	; 0x54
9000a38e:	049b      	lsls	r3, r3, #18
9000a390:	d48d      	bmi.n	9000a2ae <HAL_JPEG_IRQHandler+0x26>
    JPEG_DMA_PollResidualData(hjpeg);
9000a392:	4620      	mov	r0, r4
}
9000a394:	b003      	add	sp, #12
9000a396:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    JPEG_DMA_PollResidualData(hjpeg);
9000a39a:	f7ff ba0f 	b.w	900097bc <JPEG_DMA_PollResidualData>
      (void) HAL_MDMA_Abort_IT(hjpeg->hdmain);
9000a39e:	f000 fb25 	bl	9000a9ec <HAL_MDMA_Abort_IT>
9000a3a2:	e7a9      	b.n	9000a2f8 <HAL_JPEG_IRQHandler+0x70>
    HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
9000a3a4:	6a62      	ldr	r2, [r4, #36]	; 0x24
9000a3a6:	4620      	mov	r0, r4
9000a3a8:	69e1      	ldr	r1, [r4, #28]
9000a3aa:	f7f7 f9ff 	bl	900017ac <HAL_JPEG_DataReadyCallback>
    hjpeg->JpegOutCount = 0;
9000a3ae:	2300      	movs	r3, #0
9000a3b0:	6263      	str	r3, [r4, #36]	; 0x24
9000a3b2:	e7b0      	b.n	9000a316 <HAL_JPEG_IRQHandler+0x8e>
      HAL_JPEG_DecodeCpltCallback(hjpeg);
9000a3b4:	f7f7 fa44 	bl	90001840 <HAL_JPEG_DecodeCpltCallback>
9000a3b8:	e779      	b.n	9000a2ae <HAL_JPEG_IRQHandler+0x26>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
9000a3ba:	6a62      	ldr	r2, [r4, #36]	; 0x24
9000a3bc:	4620      	mov	r0, r4
9000a3be:	69e1      	ldr	r1, [r4, #28]
9000a3c0:	f7f7 f9f4 	bl	900017ac <HAL_JPEG_DataReadyCallback>
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
9000a3c4:	6822      	ldr	r2, [r4, #0]
      hjpeg->JpegOutCount = 0;
9000a3c6:	6265      	str	r5, [r4, #36]	; 0x24
9000a3c8:	e7ad      	b.n	9000a326 <HAL_JPEG_IRQHandler+0x9e>
9000a3ca:	bf00      	nop

9000a3cc <HAL_LTDC_Init>:
{
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
9000a3cc:	2800      	cmp	r0, #0
9000a3ce:	d067      	beq.n	9000a4a0 <HAL_LTDC_Init+0xd4>
{
9000a3d0:	b538      	push	{r3, r4, r5, lr}
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
9000a3d2:	f890 30a1 	ldrb.w	r3, [r0, #161]	; 0xa1
9000a3d6:	4604      	mov	r4, r0
9000a3d8:	f003 02ff 	and.w	r2, r3, #255	; 0xff
9000a3dc:	2b00      	cmp	r3, #0
9000a3de:	d05a      	beq.n	9000a496 <HAL_LTDC_Init+0xca>
  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
9000a3e0:	68a0      	ldr	r0, [r4, #8]
  hltdc->State = HAL_LTDC_STATE_BUSY;
9000a3e2:	2102      	movs	r1, #2
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
9000a3e4:	e9d4 3200 	ldrd	r3, r2, [r4]
  hltdc->State = HAL_LTDC_STATE_BUSY;
9000a3e8:	f884 10a1 	strb.w	r1, [r4, #161]	; 0xa1
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
9000a3ec:	4302      	orrs	r2, r0
9000a3ee:	68e1      	ldr	r1, [r4, #12]
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
9000a3f0:	6998      	ldr	r0, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
9000a3f2:	430a      	orrs	r2, r1
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
9000a3f4:	6921      	ldr	r1, [r4, #16]
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
9000a3f6:	f020 4070 	bic.w	r0, r0, #4026531840	; 0xf0000000
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
9000a3fa:	430a      	orrs	r2, r1

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
9000a3fc:	4929      	ldr	r1, [pc, #164]	; (9000a4a4 <HAL_LTDC_Init+0xd8>)
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
9000a3fe:	6198      	str	r0, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
9000a400:	6998      	ldr	r0, [r3, #24]
9000a402:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.HorizontalSync << 16U);
9000a404:	6960      	ldr	r0, [r4, #20]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
9000a406:	619a      	str	r2, [r3, #24]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
9000a408:	689a      	ldr	r2, [r3, #8]
9000a40a:	400a      	ands	r2, r1
9000a40c:	609a      	str	r2, [r3, #8]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
9000a40e:	689a      	ldr	r2, [r3, #8]
9000a410:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
9000a414:	69a0      	ldr	r0, [r4, #24]
9000a416:	4302      	orrs	r2, r0

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
9000a418:	69e0      	ldr	r0, [r4, #28]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
9000a41a:	609a      	str	r2, [r3, #8]
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
9000a41c:	68da      	ldr	r2, [r3, #12]
9000a41e:	400a      	ands	r2, r1
9000a420:	60da      	str	r2, [r3, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
9000a422:	68da      	ldr	r2, [r3, #12]
9000a424:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
9000a428:	6a20      	ldr	r0, [r4, #32]
9000a42a:	4302      	orrs	r2, r0

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
9000a42c:	6a60      	ldr	r0, [r4, #36]	; 0x24
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
9000a42e:	60da      	str	r2, [r3, #12]
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
9000a430:	691a      	ldr	r2, [r3, #16]
9000a432:	400a      	ands	r2, r1
9000a434:	611a      	str	r2, [r3, #16]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
9000a436:	691a      	ldr	r2, [r3, #16]
9000a438:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
9000a43c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
9000a43e:	4302      	orrs	r2, r0

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
  tmp = (hltdc->Init.TotalWidth << 16U);
9000a440:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
9000a442:	611a      	str	r2, [r3, #16]
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
9000a444:	695a      	ldr	r2, [r3, #20]
9000a446:	400a      	ands	r2, r1
9000a448:	615a      	str	r2, [r3, #20]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
9000a44a:	695a      	ldr	r2, [r3, #20]
9000a44c:	6b21      	ldr	r1, [r4, #48]	; 0x30
9000a44e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
9000a452:	430a      	orrs	r2, r1
9000a454:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
9000a456:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
9000a458:	f894 0035 	ldrb.w	r0, [r4, #53]	; 0x35
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
9000a45c:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
9000a460:	f894 1036 	ldrb.w	r1, [r4, #54]	; 0x36
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
9000a464:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
9000a466:	6add      	ldr	r5, [r3, #44]	; 0x2c
9000a468:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
9000a46c:	432a      	orrs	r2, r5
9000a46e:	ea42 2200 	orr.w	r2, r2, r0, lsl #8

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
9000a472:	2000      	movs	r0, #0
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
9000a474:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
9000a478:	62da      	str	r2, [r3, #44]	; 0x2c
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
9000a47a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
9000a47c:	f042 0206 	orr.w	r2, r2, #6
9000a480:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_LTDC_ENABLE(hltdc);
9000a482:	699a      	ldr	r2, [r3, #24]
9000a484:	f042 0201 	orr.w	r2, r2, #1
9000a488:	619a      	str	r2, [r3, #24]

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
9000a48a:	2301      	movs	r3, #1
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
9000a48c:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
  hltdc->State = HAL_LTDC_STATE_READY;
9000a490:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1

  return HAL_OK;
}
9000a494:	bd38      	pop	{r3, r4, r5, pc}
    hltdc->Lock = HAL_UNLOCKED;
9000a496:	f880 20a0 	strb.w	r2, [r0, #160]	; 0xa0
    HAL_LTDC_MspInit(hltdc);
9000a49a:	f7fa f9eb 	bl	90004874 <HAL_LTDC_MspInit>
9000a49e:	e79f      	b.n	9000a3e0 <HAL_LTDC_Init+0x14>
    return HAL_ERROR;
9000a4a0:	2001      	movs	r0, #1
}
9000a4a2:	4770      	bx	lr
9000a4a4:	f000f800 	.word	0xf000f800

9000a4a8 <HAL_LTDC_ErrorCallback>:
9000a4a8:	4770      	bx	lr
9000a4aa:	bf00      	nop

9000a4ac <HAL_LTDC_ReloadEventCallback>:
9000a4ac:	4770      	bx	lr
9000a4ae:	bf00      	nop

9000a4b0 <HAL_LTDC_IRQHandler>:
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
9000a4b0:	6803      	ldr	r3, [r0, #0]
{
9000a4b2:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
9000a4b4:	6b9d      	ldr	r5, [r3, #56]	; 0x38
{
9000a4b6:	4604      	mov	r4, r0
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
9000a4b8:	6b5e      	ldr	r6, [r3, #52]	; 0x34

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
9000a4ba:	076a      	lsls	r2, r5, #29
9000a4bc:	d501      	bpl.n	9000a4c2 <HAL_LTDC_IRQHandler+0x12>
9000a4be:	0771      	lsls	r1, r6, #29
9000a4c0:	d41d      	bmi.n	9000a4fe <HAL_LTDC_IRQHandler+0x4e>
    HAL_LTDC_ErrorCallback(hltdc);
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
9000a4c2:	07aa      	lsls	r2, r5, #30
9000a4c4:	d501      	bpl.n	9000a4ca <HAL_LTDC_IRQHandler+0x1a>
9000a4c6:	07b3      	lsls	r3, r6, #30
9000a4c8:	d42d      	bmi.n	9000a526 <HAL_LTDC_IRQHandler+0x76>
    HAL_LTDC_ErrorCallback(hltdc);
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
9000a4ca:	07e8      	lsls	r0, r5, #31
9000a4cc:	d501      	bpl.n	9000a4d2 <HAL_LTDC_IRQHandler+0x22>
9000a4ce:	07f1      	lsls	r1, r6, #31
9000a4d0:	d440      	bmi.n	9000a554 <HAL_LTDC_IRQHandler+0xa4>
    HAL_LTDC_LineEventCallback(hltdc);
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
9000a4d2:	072a      	lsls	r2, r5, #28
9000a4d4:	d501      	bpl.n	9000a4da <HAL_LTDC_IRQHandler+0x2a>
9000a4d6:	0733      	lsls	r3, r6, #28
9000a4d8:	d400      	bmi.n	9000a4dc <HAL_LTDC_IRQHandler+0x2c>
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
9000a4da:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
9000a4dc:	6823      	ldr	r3, [r4, #0]
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
9000a4de:	2008      	movs	r0, #8
    hltdc->State = HAL_LTDC_STATE_READY;
9000a4e0:	2501      	movs	r5, #1
    __HAL_UNLOCK(hltdc);
9000a4e2:	2100      	movs	r1, #0
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
9000a4e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
9000a4e6:	f022 0208 	bic.w	r2, r2, #8
9000a4ea:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
9000a4ec:	63d8      	str	r0, [r3, #60]	; 0x3c
    HAL_LTDC_ReloadEventCallback(hltdc);
9000a4ee:	4620      	mov	r0, r4
    hltdc->State = HAL_LTDC_STATE_READY;
9000a4f0:	f884 50a1 	strb.w	r5, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
9000a4f4:	f884 10a0 	strb.w	r1, [r4, #160]	; 0xa0
    HAL_LTDC_ReloadEventCallback(hltdc);
9000a4f8:	f7ff ffd8 	bl	9000a4ac <HAL_LTDC_ReloadEventCallback>
}
9000a4fc:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
9000a4fe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
9000a500:	f022 0204 	bic.w	r2, r2, #4
9000a504:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
9000a506:	2204      	movs	r2, #4
9000a508:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
9000a50a:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
9000a50e:	f043 0301 	orr.w	r3, r3, #1
9000a512:	f8c0 30a4 	str.w	r3, [r0, #164]	; 0xa4
    __HAL_UNLOCK(hltdc);
9000a516:	2300      	movs	r3, #0
    hltdc->State = HAL_LTDC_STATE_ERROR;
9000a518:	f880 20a1 	strb.w	r2, [r0, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
9000a51c:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
9000a520:	f7ff ffc2 	bl	9000a4a8 <HAL_LTDC_ErrorCallback>
9000a524:	e7cd      	b.n	9000a4c2 <HAL_LTDC_IRQHandler+0x12>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
9000a526:	6823      	ldr	r3, [r4, #0]
    HAL_LTDC_ErrorCallback(hltdc);
9000a528:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
9000a52a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
9000a52c:	f022 0202 	bic.w	r2, r2, #2
9000a530:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
9000a532:	2202      	movs	r2, #2
9000a534:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->State = HAL_LTDC_STATE_ERROR;
9000a536:	2204      	movs	r2, #4
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
9000a538:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
9000a53c:	f043 0302 	orr.w	r3, r3, #2
9000a540:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
    __HAL_UNLOCK(hltdc);
9000a544:	2300      	movs	r3, #0
    hltdc->State = HAL_LTDC_STATE_ERROR;
9000a546:	f884 20a1 	strb.w	r2, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
9000a54a:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
9000a54e:	f7ff ffab 	bl	9000a4a8 <HAL_LTDC_ErrorCallback>
9000a552:	e7ba      	b.n	9000a4ca <HAL_LTDC_IRQHandler+0x1a>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
9000a554:	6823      	ldr	r3, [r4, #0]
    HAL_LTDC_LineEventCallback(hltdc);
9000a556:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
9000a558:	6b5a      	ldr	r2, [r3, #52]	; 0x34
9000a55a:	f022 0201 	bic.w	r2, r2, #1
9000a55e:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
9000a560:	2201      	movs	r2, #1
9000a562:	63da      	str	r2, [r3, #60]	; 0x3c
    __HAL_UNLOCK(hltdc);
9000a564:	2300      	movs	r3, #0
    hltdc->State = HAL_LTDC_STATE_READY;
9000a566:	f884 20a1 	strb.w	r2, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
9000a56a:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_LineEventCallback(hltdc);
9000a56e:	f7f8 f93f 	bl	900027f0 <HAL_LTDC_LineEventCallback>
9000a572:	e7ae      	b.n	9000a4d2 <HAL_LTDC_IRQHandler+0x22>

9000a574 <HAL_LTDC_ConfigLayer>:
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
9000a574:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
9000a578:	2b01      	cmp	r3, #1
9000a57a:	f000 80c0 	beq.w	9000a6fe <HAL_LTDC_ConfigLayer+0x18a>

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
9000a57e:	2302      	movs	r3, #2
{
9000a580:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
9000a584:	f04f 0e34 	mov.w	lr, #52	; 0x34
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
9000a588:	f8d0 9000 	ldr.w	r9, [r0]
  hltdc->State = HAL_LTDC_STATE_BUSY;
9000a58c:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
{
9000a590:	b083      	sub	sp, #12
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
9000a592:	fb0e 0e02 	mla	lr, lr, r2, r0
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
9000a596:	01d2      	lsls	r2, r2, #7
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
9000a598:	f8d9 300c 	ldr.w	r3, [r9, #12]
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
9000a59c:	460c      	mov	r4, r1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
9000a59e:	f102 0684 	add.w	r6, r2, #132	; 0x84
9000a5a2:	460d      	mov	r5, r1
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
9000a5a4:	f3c3 4b0b 	ubfx	fp, r3, #16, #12
9000a5a8:	4680      	mov	r8, r0
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
9000a5aa:	eb09 0c06 	add.w	ip, r9, r6
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
9000a5ae:	f10e 0e38 	add.w	lr, lr, #56	; 0x38
  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
9000a5b2:	f8df a160 	ldr.w	sl, [pc, #352]	; 9000a714 <HAL_LTDC_ConfigLayer+0x1a0>
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
9000a5b6:	f8dc 3004 	ldr.w	r3, [ip, #4]
9000a5ba:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
9000a5be:	9301      	str	r3, [sp, #4]
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
9000a5c0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
9000a5c2:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
9000a5c6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
9000a5c8:	686f      	ldr	r7, [r5, #4]
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
9000a5ca:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
9000a5ce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
9000a5d0:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
9000a5d4:	6823      	ldr	r3, [r4, #0]
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
9000a5d6:	44bb      	add	fp, r7
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
9000a5d8:	f8ce 3000 	str.w	r3, [lr]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
9000a5dc:	9b01      	ldr	r3, [sp, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
9000a5de:	682a      	ldr	r2, [r5, #0]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
9000a5e0:	f8cc 3004 	str.w	r3, [ip, #4]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
9000a5e4:	f8d9 300c 	ldr.w	r3, [r9, #12]
9000a5e8:	1c51      	adds	r1, r2, #1
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
9000a5ea:	68e8      	ldr	r0, [r5, #12]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
9000a5ec:	f3c3 430b 	ubfx	r3, r3, #16, #12
  tmp2 = (pLayerCfg->Alpha0 << 24U);
9000a5f0:	f8d5 e018 	ldr.w	lr, [r5, #24]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
9000a5f4:	440b      	add	r3, r1
9000a5f6:	ea43 430b 	orr.w	r3, r3, fp, lsl #16
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
9000a5fa:	f8cc 3004 	str.w	r3, [ip, #4]
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
9000a5fe:	f8d9 100c 	ldr.w	r1, [r9, #12]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
9000a602:	f8dc 3008 	ldr.w	r3, [ip, #8]
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
9000a606:	f3c1 010a 	ubfx	r1, r1, #0, #11
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
9000a60a:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
9000a60e:	4401      	add	r1, r0
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
9000a610:	f8cc 3008 	str.w	r3, [ip, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
9000a614:	68ab      	ldr	r3, [r5, #8]
9000a616:	f8d9 000c 	ldr.w	r0, [r9, #12]
9000a61a:	3301      	adds	r3, #1
9000a61c:	f3c0 000a 	ubfx	r0, r0, #0, #11
9000a620:	4403      	add	r3, r0
9000a622:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
9000a626:	6929      	ldr	r1, [r5, #16]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
9000a628:	f8cc 3008 	str.w	r3, [ip, #8]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
9000a62c:	f8dc 3010 	ldr.w	r3, [ip, #16]
9000a630:	f023 0307 	bic.w	r3, r3, #7
9000a634:	f8cc 3010 	str.w	r3, [ip, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
9000a638:	f8cc 1010 	str.w	r1, [ip, #16]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
9000a63c:	f8dc 3018 	ldr.w	r3, [ip, #24]
9000a640:	2300      	movs	r3, #0
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
9000a642:	f895 0032 	ldrb.w	r0, [r5, #50]	; 0x32
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
9000a646:	f895 4031 	ldrb.w	r4, [r5, #49]	; 0x31
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
9000a64a:	f8cc 3018 	str.w	r3, [ip, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
9000a64e:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
9000a652:	ea43 630e 	orr.w	r3, r3, lr, lsl #24
9000a656:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
9000a65a:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
9000a65e:	f8cc 3018 	str.w	r3, [ip, #24]
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
9000a662:	f8dc 3014 	ldr.w	r3, [ip, #20]
9000a666:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
9000a66a:	f8cc 3014 	str.w	r3, [ip, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
9000a66e:	696b      	ldr	r3, [r5, #20]
9000a670:	f8cc 3014 	str.w	r3, [ip, #20]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
9000a674:	f8dc 001c 	ldr.w	r0, [ip, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
9000a678:	69eb      	ldr	r3, [r5, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
9000a67a:	ea00 0a0a 	and.w	sl, r0, sl
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
9000a67e:	6a28      	ldr	r0, [r5, #32]
9000a680:	4303      	orrs	r3, r0
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
9000a682:	f8cc a01c 	str.w	sl, [ip, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
9000a686:	f8cc 301c 	str.w	r3, [ip, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
9000a68a:	f8dc 3028 	ldr.w	r3, [ip, #40]	; 0x28
9000a68e:	2300      	movs	r3, #0
9000a690:	f8cc 3028 	str.w	r3, [ip, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
9000a694:	6a6b      	ldr	r3, [r5, #36]	; 0x24
9000a696:	f8cc 3028 	str.w	r3, [ip, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
9000a69a:	bb59      	cbnz	r1, 9000a6f4 <HAL_LTDC_ConfigLayer+0x180>
  {
    tmp = 4U;
9000a69c:	2304      	movs	r3, #4
    tmp = 1U;
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
9000a69e:	1abf      	subs	r7, r7, r2
9000a6a0:	6aaa      	ldr	r2, [r5, #40]	; 0x28
9000a6a2:	fb03 f707 	mul.w	r7, r3, r7
9000a6a6:	fb02 f303 	mul.w	r3, r2, r3
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
9000a6aa:	6aea      	ldr	r2, [r5, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
9000a6ac:	3707      	adds	r7, #7
9000a6ae:	ea47 4703 	orr.w	r7, r7, r3, lsl #16
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
9000a6b2:	f8dc 302c 	ldr.w	r3, [ip, #44]	; 0x2c
9000a6b6:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
9000a6ba:	f8cc 302c 	str.w	r3, [ip, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
9000a6be:	f8cc 702c 	str.w	r7, [ip, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
9000a6c2:	4b12      	ldr	r3, [pc, #72]	; (9000a70c <HAL_LTDC_ConfigLayer+0x198>)
9000a6c4:	f8dc 1030 	ldr.w	r1, [ip, #48]	; 0x30
9000a6c8:	400b      	ands	r3, r1
9000a6ca:	f8cc 3030 	str.w	r3, [ip, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
9000a6ce:	f8cc 2030 	str.w	r2, [ip, #48]	; 0x30
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
9000a6d2:	2201      	movs	r2, #1

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
9000a6d4:	f859 3006 	ldr.w	r3, [r9, r6]
9000a6d8:	4313      	orrs	r3, r2
9000a6da:	f849 3006 	str.w	r3, [r9, r6]
  __HAL_UNLOCK(hltdc);
9000a6de:	2300      	movs	r3, #0
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
9000a6e0:	f8c9 2024 	str.w	r2, [r9, #36]	; 0x24
  return HAL_OK;
9000a6e4:	4618      	mov	r0, r3
  hltdc->State  = HAL_LTDC_STATE_READY;
9000a6e6:	f888 20a1 	strb.w	r2, [r8, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
9000a6ea:	f888 30a0 	strb.w	r3, [r8, #160]	; 0xa0
}
9000a6ee:	b003      	add	sp, #12
9000a6f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
9000a6f4:	3901      	subs	r1, #1
9000a6f6:	2906      	cmp	r1, #6
9000a6f8:	d903      	bls.n	9000a702 <HAL_LTDC_ConfigLayer+0x18e>
  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
9000a6fa:	2301      	movs	r3, #1
9000a6fc:	e7cf      	b.n	9000a69e <HAL_LTDC_ConfigLayer+0x12a>
  __HAL_LOCK(hltdc);
9000a6fe:	2002      	movs	r0, #2
}
9000a700:	4770      	bx	lr
9000a702:	4b03      	ldr	r3, [pc, #12]	; (9000a710 <HAL_LTDC_ConfigLayer+0x19c>)
9000a704:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
9000a708:	e7c9      	b.n	9000a69e <HAL_LTDC_ConfigLayer+0x12a>
9000a70a:	bf00      	nop
9000a70c:	fffff800 	.word	0xfffff800
9000a710:	90026774 	.word	0x90026774
9000a714:	fffff8f8 	.word	0xfffff8f8

9000a718 <HAL_LTDC_ProgramLineEvent>:
  __HAL_LOCK(hltdc);
9000a718:	f890 20a0 	ldrb.w	r2, [r0, #160]	; 0xa0
9000a71c:	2a01      	cmp	r2, #1
9000a71e:	d019      	beq.n	9000a754 <HAL_LTDC_ProgramLineEvent+0x3c>
  __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
9000a720:	6802      	ldr	r2, [r0, #0]
9000a722:	4603      	mov	r3, r0
  hltdc->State = HAL_LTDC_STATE_BUSY;
9000a724:	2002      	movs	r0, #2
  __HAL_UNLOCK(hltdc);
9000a726:	f04f 0c00 	mov.w	ip, #0
{
9000a72a:	b410      	push	{r4}
  hltdc->State = HAL_LTDC_STATE_BUSY;
9000a72c:	f883 00a1 	strb.w	r0, [r3, #161]	; 0xa1
  __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
9000a730:	6b50      	ldr	r0, [r2, #52]	; 0x34
  LTDC->LIPCR = (uint32_t)Line;
9000a732:	4c09      	ldr	r4, [pc, #36]	; (9000a758 <HAL_LTDC_ProgramLineEvent+0x40>)
  __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
9000a734:	f020 0001 	bic.w	r0, r0, #1
9000a738:	6350      	str	r0, [r2, #52]	; 0x34
  hltdc->State = HAL_LTDC_STATE_READY;
9000a73a:	2001      	movs	r0, #1
  LTDC->LIPCR = (uint32_t)Line;
9000a73c:	6421      	str	r1, [r4, #64]	; 0x40
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_LI);
9000a73e:	6b51      	ldr	r1, [r2, #52]	; 0x34
9000a740:	4301      	orrs	r1, r0
9000a742:	6351      	str	r1, [r2, #52]	; 0x34
  hltdc->State = HAL_LTDC_STATE_READY;
9000a744:	f883 00a1 	strb.w	r0, [r3, #161]	; 0xa1
  return HAL_OK;
9000a748:	4660      	mov	r0, ip
  __HAL_UNLOCK(hltdc);
9000a74a:	f883 c0a0 	strb.w	ip, [r3, #160]	; 0xa0
}
9000a74e:	f85d 4b04 	ldr.w	r4, [sp], #4
9000a752:	4770      	bx	lr
  __HAL_LOCK(hltdc);
9000a754:	2002      	movs	r0, #2
}
9000a756:	4770      	bx	lr
9000a758:	50001000 	.word	0x50001000

9000a75c <HAL_MDMA_Init>:
  * @param  hmdma: Pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
9000a75c:	b538      	push	{r3, r4, r5, lr}
9000a75e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
9000a760:	f7fc faf0 	bl	90006d44 <HAL_GetTick>

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
9000a764:	2c00      	cmp	r4, #0
9000a766:	d05a      	beq.n	9000a81e <HAL_MDMA_Init+0xc2>

  /* Change MDMA peripheral state */
  hmdma->State = HAL_MDMA_STATE_BUSY;

  /* Disable the MDMA channel */
  __HAL_MDMA_DISABLE(hmdma);
9000a768:	6823      	ldr	r3, [r4, #0]
  hmdma->State = HAL_MDMA_STATE_BUSY;
9000a76a:	2202      	movs	r2, #2
  __HAL_UNLOCK(hmdma);
9000a76c:	2100      	movs	r1, #0
9000a76e:	4605      	mov	r5, r0
  hmdma->State = HAL_MDMA_STATE_BUSY;
9000a770:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  __HAL_UNLOCK(hmdma);
9000a774:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c
  __HAL_MDMA_DISABLE(hmdma);
9000a778:	68da      	ldr	r2, [r3, #12]
9000a77a:	f022 0201 	bic.w	r2, r2, #1
9000a77e:	60da      	str	r2, [r3, #12]

  /* Check if the MDMA channel is effectively disabled */
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
9000a780:	e005      	b.n	9000a78e <HAL_MDMA_Init+0x32>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_MDMA_ABORT)
9000a782:	f7fc fadf 	bl	90006d44 <HAL_GetTick>
9000a786:	1b43      	subs	r3, r0, r5
9000a788:	2b05      	cmp	r3, #5
9000a78a:	d841      	bhi.n	9000a810 <HAL_MDMA_Init+0xb4>
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
9000a78c:	6823      	ldr	r3, [r4, #0]
9000a78e:	68da      	ldr	r2, [r3, #12]
9000a790:	07d2      	lsls	r2, r2, #31
9000a792:	d4f6      	bmi.n	9000a782 <HAL_MDMA_Init+0x26>
  /* Write new CTCR Register value */
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
                           hmdma->Init.DestBurst                                   | \
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
9000a794:	e9d4 2505 	ldrd	r2, r5, [r4, #20]
9000a798:	69e0      	ldr	r0, [r4, #28]
9000a79a:	432a      	orrs	r2, r5
  hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
9000a79c:	68e1      	ldr	r1, [r4, #12]
9000a79e:	6925      	ldr	r5, [r4, #16]
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
9000a7a0:	4302      	orrs	r2, r0
9000a7a2:	6a20      	ldr	r0, [r4, #32]
  hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
9000a7a4:	4329      	orrs	r1, r5
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
9000a7a6:	4302      	orrs	r2, r0
9000a7a8:	6a60      	ldr	r0, [r4, #36]	; 0x24
9000a7aa:	4302      	orrs	r2, r0
9000a7ac:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
9000a7ae:	4302      	orrs	r2, r0
9000a7b0:	6b20      	ldr	r0, [r4, #48]	; 0x30
9000a7b2:	4302      	orrs	r2, r0
9000a7b4:	68a0      	ldr	r0, [r4, #8]
9000a7b6:	4302      	orrs	r2, r0
9000a7b8:	6aa0      	ldr	r0, [r4, #40]	; 0x28
9000a7ba:	3801      	subs	r0, #1
9000a7bc:	ea42 4280 	orr.w	r2, r2, r0, lsl #18
                           hmdma->Init.TransferTriggerMode;

  /* If SW request set the CTCR register to SW Request Mode */
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
9000a7c0:	6860      	ldr	r0, [r4, #4]
  hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
9000a7c2:	60d9      	str	r1, [r3, #12]
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
9000a7c4:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
9000a7c8:	611a      	str	r2, [r3, #16]
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
9000a7ca:	d103      	bne.n	9000a7d4 <HAL_MDMA_Init+0x78>
    -If the request is done by SW : BWM could be set to 1 or 0.
    -If the request is done by a peripheral :
    If mask address not set (0) => BWM must be set to 0
    If mask address set (different than 0) => BWM could be set to 1 or 0
    */
    hmdma->Instance->CTCR |= (MDMA_CTCR_SWRM | MDMA_CTCR_BWM);
9000a7cc:	691a      	ldr	r2, [r3, #16]
9000a7ce:	f042 4240 	orr.w	r2, r2, #3221225472	; 0xc0000000
9000a7d2:	611a      	str	r2, [r3, #16]
  }

  /* Reset CBNDTR Register */
  hmdma->Instance->CBNDTR = 0;
9000a7d4:	2100      	movs	r1, #0

  /* if block source address offset is negative set the Block Repeat Source address Update Mode to decrement */
  if(hmdma->Init.SourceBlockAddressOffset < 0)
9000a7d6:	6b62      	ldr	r2, [r4, #52]	; 0x34
9000a7d8:	428a      	cmp	r2, r1
  hmdma->Instance->CBNDTR = 0;
9000a7da:	6159      	str	r1, [r3, #20]
  if(hmdma->Init.SourceBlockAddressOffset < 0)
9000a7dc:	db30      	blt.n	9000a840 <HAL_MDMA_Init+0xe4>
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
  }
  else
  {
    /* Write new CBRUR Register value : source repeat block offset */
    hmdma->Instance->CBRUR = (((uint32_t)hmdma->Init.SourceBlockAddressOffset) & 0x0000FFFFU);
9000a7de:	b292      	uxth	r2, r2
9000a7e0:	621a      	str	r2, [r3, #32]
  }

  /* If block destination address offset is negative set the Block Repeat destination address Update Mode to decrement */
  if(hmdma->Init.DestBlockAddressOffset < 0)
9000a7e2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
9000a7e4:	2a00      	cmp	r2, #0
9000a7e6:	db1c      	blt.n	9000a822 <HAL_MDMA_Init+0xc6>
    hmdma->Instance->CBRUR |= ((blockoffset & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
  }
  else
  {
    /*write new CBRUR Register value : destination repeat block offset */
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
9000a7e8:	6a19      	ldr	r1, [r3, #32]
  }

  /* if HW request set the HW request and the requet CleraMask and ClearData MaskData, */
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
9000a7ea:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
9000a7ee:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
9000a7f2:	621a      	str	r2, [r3, #32]
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
9000a7f4:	d021      	beq.n	9000a83a <HAL_MDMA_Init+0xde>
  {
    /* Set the HW request in CTRB register  */
    hmdma->Instance->CTBR = hmdma->Init.Request & MDMA_CTBR_TSEL;
9000a7f6:	b2c0      	uxtb	r0, r0
9000a7f8:	6298      	str	r0, [r3, #40]	; 0x28
  {
    hmdma->Instance->CTBR = 0;
  }

  /* Write Link Address Register */
  hmdma->Instance->CLAR =  0;
9000a7fa:	2200      	movs	r2, #0
  hmdma->State = HAL_MDMA_STATE_READY;
9000a7fc:	2101      	movs	r1, #1
  hmdma->Instance->CLAR =  0;
9000a7fe:	625a      	str	r2, [r3, #36]	; 0x24
  return HAL_OK;
9000a800:	4610      	mov	r0, r2
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
9000a802:	66a2      	str	r2, [r4, #104]	; 0x68
  hmdma->LinkedListNodeCounter  = 0;
9000a804:	6662      	str	r2, [r4, #100]	; 0x64
  hmdma->State = HAL_MDMA_STATE_READY;
9000a806:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
  hmdma->LastLinkedListNodeAddress   = 0;
9000a80a:	e9c4 2217 	strd	r2, r2, [r4, #92]	; 0x5c
}
9000a80e:	bd38      	pop	{r3, r4, r5, pc}
      hmdma->ErrorCode = HAL_MDMA_ERROR_TIMEOUT;
9000a810:	2240      	movs	r2, #64	; 0x40
      hmdma->State = HAL_MDMA_STATE_ERROR;
9000a812:	2303      	movs	r3, #3
      return HAL_ERROR;
9000a814:	2001      	movs	r0, #1
      hmdma->ErrorCode = HAL_MDMA_ERROR_TIMEOUT;
9000a816:	66a2      	str	r2, [r4, #104]	; 0x68
      hmdma->State = HAL_MDMA_STATE_ERROR;
9000a818:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
9000a81c:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
9000a81e:	2001      	movs	r0, #1
}
9000a820:	bd38      	pop	{r3, r4, r5, pc}
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
9000a822:	6959      	ldr	r1, [r3, #20]
    blockoffset = (uint32_t)(- hmdma->Init.DestBlockAddressOffset);
9000a824:	4252      	negs	r2, r2
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
9000a826:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
9000a82a:	f441 2100 	orr.w	r1, r1, #524288	; 0x80000
9000a82e:	6159      	str	r1, [r3, #20]
    hmdma->Instance->CBRUR |= ((blockoffset & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
9000a830:	6a19      	ldr	r1, [r3, #32]
9000a832:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
9000a836:	621a      	str	r2, [r3, #32]
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
9000a838:	d1dd      	bne.n	9000a7f6 <HAL_MDMA_Init+0x9a>
    hmdma->Instance->CTBR = 0;
9000a83a:	2200      	movs	r2, #0
9000a83c:	629a      	str	r2, [r3, #40]	; 0x28
9000a83e:	e7dc      	b.n	9000a7fa <HAL_MDMA_Init+0x9e>
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
9000a840:	6959      	ldr	r1, [r3, #20]
    blockoffset = (uint32_t)(- hmdma->Init.SourceBlockAddressOffset);
9000a842:	4252      	negs	r2, r2
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
9000a844:	f441 2180 	orr.w	r1, r1, #262144	; 0x40000
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
9000a848:	b292      	uxth	r2, r2
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
9000a84a:	6159      	str	r1, [r3, #20]
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
9000a84c:	621a      	str	r2, [r3, #32]
9000a84e:	e7c8      	b.n	9000a7e2 <HAL_MDMA_Init+0x86>

9000a850 <HAL_MDMA_DeInit>:
  if(hmdma == NULL)
9000a850:	b1f8      	cbz	r0, 9000a892 <HAL_MDMA_DeInit+0x42>
  __HAL_MDMA_DISABLE(hmdma);
9000a852:	6802      	ldr	r2, [r0, #0]
9000a854:	4601      	mov	r1, r0
  hmdma->Instance->CCR  = 0;
9000a856:	2300      	movs	r3, #0
  __HAL_MDMA_DISABLE(hmdma);
9000a858:	68d0      	ldr	r0, [r2, #12]
{
9000a85a:	b410      	push	{r4}
  __HAL_MDMA_DISABLE(hmdma);
9000a85c:	f020 0001 	bic.w	r0, r0, #1
  __HAL_MDMA_CLEAR_FLAG(hmdma,(MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_FLAG_BRT | MDMA_FLAG_BT | MDMA_FLAG_BFTC));
9000a860:	241f      	movs	r4, #31
  __HAL_MDMA_DISABLE(hmdma);
9000a862:	60d0      	str	r0, [r2, #12]
  return HAL_OK;
9000a864:	4618      	mov	r0, r3
  hmdma->Instance->CCR  = 0;
9000a866:	60d3      	str	r3, [r2, #12]
  hmdma->Instance->CTCR = 0;
9000a868:	6113      	str	r3, [r2, #16]
  hmdma->Instance->CBNDTR = 0;
9000a86a:	6153      	str	r3, [r2, #20]
  hmdma->Instance->CSAR = 0;
9000a86c:	6193      	str	r3, [r2, #24]
  hmdma->Instance->CDAR = 0;
9000a86e:	61d3      	str	r3, [r2, #28]
  hmdma->Instance->CBRUR = 0;
9000a870:	6213      	str	r3, [r2, #32]
  hmdma->Instance->CLAR = 0;
9000a872:	6253      	str	r3, [r2, #36]	; 0x24
  hmdma->Instance->CTBR = 0;
9000a874:	6293      	str	r3, [r2, #40]	; 0x28
  hmdma->Instance->CMAR = 0;
9000a876:	6313      	str	r3, [r2, #48]	; 0x30
  hmdma->Instance->CMDR = 0;
9000a878:	6353      	str	r3, [r2, #52]	; 0x34
  __HAL_MDMA_CLEAR_FLAG(hmdma,(MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_FLAG_BRT | MDMA_FLAG_BT | MDMA_FLAG_BFTC));
9000a87a:	6054      	str	r4, [r2, #4]
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
9000a87c:	668b      	str	r3, [r1, #104]	; 0x68
  __HAL_UNLOCK(hmdma);
9000a87e:	f881 303c 	strb.w	r3, [r1, #60]	; 0x3c
  hmdma->State = HAL_MDMA_STATE_RESET;
9000a882:	f881 303d 	strb.w	r3, [r1, #61]	; 0x3d
}
9000a886:	f85d 4b04 	ldr.w	r4, [sp], #4
  hmdma->LinkedListNodeCounter  = 0;
9000a88a:	664b      	str	r3, [r1, #100]	; 0x64
  hmdma->LastLinkedListNodeAddress   = 0;
9000a88c:	e9c1 3317 	strd	r3, r3, [r1, #92]	; 0x5c
}
9000a890:	4770      	bx	lr
    return HAL_ERROR;
9000a892:	2001      	movs	r0, #1
}
9000a894:	4770      	bx	lr
9000a896:	bf00      	nop

9000a898 <HAL_MDMA_ConfigPostRequestMask>:
  if(hmdma == NULL)
9000a898:	b310      	cbz	r0, 9000a8e0 <HAL_MDMA_ConfigPostRequestMask+0x48>
9000a89a:	4603      	mov	r3, r0
  __HAL_LOCK(hmdma);
9000a89c:	f890 003c 	ldrb.w	r0, [r0, #60]	; 0x3c
9000a8a0:	2801      	cmp	r0, #1
9000a8a2:	d01f      	beq.n	9000a8e4 <HAL_MDMA_ConfigPostRequestMask+0x4c>
{
9000a8a4:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(hmdma);
9000a8a6:	f04f 0e01 	mov.w	lr, #1
  if(HAL_MDMA_STATE_READY == hmdma->State)
9000a8aa:	f893 c03d 	ldrb.w	ip, [r3, #61]	; 0x3d
9000a8ae:	45f4      	cmp	ip, lr
9000a8b0:	fa5f f08c 	uxtb.w	r0, ip
  __HAL_LOCK(hmdma);
9000a8b4:	f883 e03c 	strb.w	lr, [r3, #60]	; 0x3c
  if(HAL_MDMA_STATE_READY == hmdma->State)
9000a8b8:	d004      	beq.n	9000a8c4 <HAL_MDMA_ConfigPostRequestMask+0x2c>
    status =  HAL_ERROR;
9000a8ba:	4670      	mov	r0, lr
  __HAL_UNLOCK(hmdma);
9000a8bc:	2200      	movs	r2, #0
9000a8be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
9000a8c2:	bd30      	pop	{r4, r5, pc}
    if((hmdma->Instance->CTCR & MDMA_CTCR_SWRM) == 0U)
9000a8c4:	681d      	ldr	r5, [r3, #0]
9000a8c6:	692c      	ldr	r4, [r5, #16]
9000a8c8:	f014 4480 	ands.w	r4, r4, #1073741824	; 0x40000000
9000a8cc:	d1f6      	bne.n	9000a8bc <HAL_MDMA_ConfigPostRequestMask+0x24>
      hmdma->Instance->CMAR = MaskAddress;
9000a8ce:	6329      	str	r1, [r5, #48]	; 0x30
      hmdma->Instance->CMDR = MaskData;
9000a8d0:	636a      	str	r2, [r5, #52]	; 0x34
        hmdma->Instance->CTCR &=  ~MDMA_CTCR_BWM;
9000a8d2:	692a      	ldr	r2, [r5, #16]
      if(MaskAddress == 0U)
9000a8d4:	b941      	cbnz	r1, 9000a8e8 <HAL_MDMA_ConfigPostRequestMask+0x50>
        hmdma->Instance->CTCR &=  ~MDMA_CTCR_BWM;
9000a8d6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
  HAL_StatusTypeDef  status = HAL_OK;
9000a8da:	4608      	mov	r0, r1
        hmdma->Instance->CTCR &=  ~MDMA_CTCR_BWM;
9000a8dc:	612a      	str	r2, [r5, #16]
9000a8de:	e7ed      	b.n	9000a8bc <HAL_MDMA_ConfigPostRequestMask+0x24>
    return HAL_ERROR;
9000a8e0:	2001      	movs	r0, #1
9000a8e2:	4770      	bx	lr
  __HAL_LOCK(hmdma);
9000a8e4:	2002      	movs	r0, #2
}
9000a8e6:	4770      	bx	lr
        hmdma->Instance->CTCR |=  MDMA_CTCR_BWM;
9000a8e8:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
  HAL_StatusTypeDef  status = HAL_OK;
9000a8ec:	4620      	mov	r0, r4
        hmdma->Instance->CTCR |=  MDMA_CTCR_BWM;
9000a8ee:	612a      	str	r2, [r5, #16]
9000a8f0:	e7e4      	b.n	9000a8bc <HAL_MDMA_ConfigPostRequestMask+0x24>
9000a8f2:	bf00      	nop

9000a8f4 <HAL_MDMA_Start_IT>:
  if(hmdma == NULL)
9000a8f4:	2800      	cmp	r0, #0
9000a8f6:	d06f      	beq.n	9000a9d8 <HAL_MDMA_Start_IT+0xe4>
9000a8f8:	4684      	mov	ip, r0
  __HAL_LOCK(hmdma);
9000a8fa:	f890 003c 	ldrb.w	r0, [r0, #60]	; 0x3c
9000a8fe:	2801      	cmp	r0, #1
9000a900:	d072      	beq.n	9000a9e8 <HAL_MDMA_Start_IT+0xf4>
9000a902:	2001      	movs	r0, #1
9000a904:	f88c 003c 	strb.w	r0, [ip, #60]	; 0x3c
  if(HAL_MDMA_STATE_READY == hmdma->State)
9000a908:	f89c 003d 	ldrb.w	r0, [ip, #61]	; 0x3d
9000a90c:	2801      	cmp	r0, #1
9000a90e:	d004      	beq.n	9000a91a <HAL_MDMA_Start_IT+0x26>
    __HAL_UNLOCK(hmdma);
9000a910:	2300      	movs	r3, #0
    return HAL_BUSY;
9000a912:	2002      	movs	r0, #2
    __HAL_UNLOCK(hmdma);
9000a914:	f88c 303c 	strb.w	r3, [ip, #60]	; 0x3c
    return HAL_BUSY;
9000a918:	4770      	bx	lr
    hmdma->State = HAL_MDMA_STATE_BUSY;
9000a91a:	2002      	movs	r0, #2
  MODIFY_REG(hmdma->Instance->CBNDTR ,MDMA_CBNDTR_BNDT, (BlockDataLength & MDMA_CBNDTR_BNDT));
9000a91c:	f3c3 0310 	ubfx	r3, r3, #0, #17
  if((addressMask == 0x20000000U) || (addressMask == 0x00000000U))
9000a920:	f011 4f5f 	tst.w	r1, #3741319168	; 0xdf000000
{
9000a924:	b530      	push	{r4, r5, lr}
  MODIFY_REG(hmdma->Instance->CBNDTR , MDMA_CBNDTR_BRC , ((BlockCount - 1U) << MDMA_CBNDTR_BRC_Pos) & MDMA_CBNDTR_BRC);
9000a926:	9d03      	ldr	r5, [sp, #12]
    hmdma->State = HAL_MDMA_STATE_BUSY;
9000a928:	f88c 003d 	strb.w	r0, [ip, #61]	; 0x3d
    hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
9000a92c:	f04f 0000 	mov.w	r0, #0
    __HAL_MDMA_DISABLE(hmdma);
9000a930:	f8dc 4000 	ldr.w	r4, [ip]
  MODIFY_REG(hmdma->Instance->CBNDTR , MDMA_CBNDTR_BRC , ((BlockCount - 1U) << MDMA_CBNDTR_BRC_Pos) & MDMA_CBNDTR_BRC);
9000a934:	f105 3eff 	add.w	lr, r5, #4294967295
    hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
9000a938:	f8cc 0068 	str.w	r0, [ip, #104]	; 0x68
  MODIFY_REG(hmdma->Instance->CBNDTR ,MDMA_CBNDTR_BNDT, (BlockDataLength & MDMA_CBNDTR_BNDT));
9000a93c:	f5a0 3000 	sub.w	r0, r0, #131072	; 0x20000
    __HAL_MDMA_DISABLE(hmdma);
9000a940:	68e5      	ldr	r5, [r4, #12]
9000a942:	f025 0501 	bic.w	r5, r5, #1
9000a946:	60e5      	str	r5, [r4, #12]
  MODIFY_REG(hmdma->Instance->CBNDTR ,MDMA_CBNDTR_BNDT, (BlockDataLength & MDMA_CBNDTR_BNDT));
9000a948:	6965      	ldr	r5, [r4, #20]
9000a94a:	ea00 0005 	and.w	r0, r0, r5
9000a94e:	ea40 0003 	orr.w	r0, r0, r3
9000a952:	6160      	str	r0, [r4, #20]
  MODIFY_REG(hmdma->Instance->CBNDTR , MDMA_CBNDTR_BRC , ((BlockCount - 1U) << MDMA_CBNDTR_BRC_Pos) & MDMA_CBNDTR_BRC);
9000a954:	6963      	ldr	r3, [r4, #20]
9000a956:	f3c3 0313 	ubfx	r3, r3, #0, #20
9000a95a:	ea43 530e 	orr.w	r3, r3, lr, lsl #20
9000a95e:	6163      	str	r3, [r4, #20]
  __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_CISR_BRTIF | MDMA_CISR_BTIF | MDMA_CISR_TCIF);
9000a960:	f04f 031f 	mov.w	r3, #31
9000a964:	6063      	str	r3, [r4, #4]
  hmdma->Instance->CDAR = DstAddress;
9000a966:	61e2      	str	r2, [r4, #28]
  hmdma->Instance->CSAR = SrcAddress;
9000a968:	61a1      	str	r1, [r4, #24]
    hmdma->Instance->CTBR |= MDMA_CTBR_SBUS;
9000a96a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
9000a96c:	bf0c      	ite	eq
9000a96e:	f443 3380 	orreq.w	r3, r3, #65536	; 0x10000
    hmdma->Instance->CTBR &= (~MDMA_CTBR_SBUS);
9000a972:	f423 3380 	bicne.w	r3, r3, #65536	; 0x10000
  if((addressMask == 0x20000000U) || (addressMask == 0x00000000U))
9000a976:	f012 4f5f 	tst.w	r2, #3741319168	; 0xdf000000
    if(hmdma->XferBlockCpltCallback != NULL)
9000a97a:	f8dc 204c 	ldr.w	r2, [ip, #76]	; 0x4c
    hmdma->Instance->CTBR &= (~MDMA_CTBR_SBUS);
9000a97e:	62a3      	str	r3, [r4, #40]	; 0x28
    hmdma->Instance->CTBR |= MDMA_CTBR_DBUS;
9000a980:	6aa3      	ldr	r3, [r4, #40]	; 0x28
9000a982:	bf0c      	ite	eq
9000a984:	f443 3300 	orreq.w	r3, r3, #131072	; 0x20000
    hmdma->Instance->CTBR &= (~MDMA_CTBR_DBUS);
9000a988:	f423 3300 	bicne.w	r3, r3, #131072	; 0x20000
9000a98c:	62a3      	str	r3, [r4, #40]	; 0x28
  hmdma->Instance->CLAR = (uint32_t)hmdma->FirstLinkedListNodeAddress;
9000a98e:	f8dc 305c 	ldr.w	r3, [ip, #92]	; 0x5c
9000a992:	6263      	str	r3, [r4, #36]	; 0x24
    __HAL_MDMA_ENABLE_IT(hmdma, (MDMA_IT_TE | MDMA_IT_CTC));
9000a994:	68e3      	ldr	r3, [r4, #12]
9000a996:	f043 0306 	orr.w	r3, r3, #6
9000a99a:	60e3      	str	r3, [r4, #12]
    if(hmdma->XferBlockCpltCallback != NULL)
9000a99c:	b11a      	cbz	r2, 9000a9a6 <HAL_MDMA_Start_IT+0xb2>
      __HAL_MDMA_ENABLE_IT(hmdma, MDMA_IT_BT);
9000a99e:	68e3      	ldr	r3, [r4, #12]
9000a9a0:	f043 0310 	orr.w	r3, r3, #16
9000a9a4:	60e3      	str	r3, [r4, #12]
    if(hmdma->XferRepeatBlockCpltCallback != NULL)
9000a9a6:	f8dc 3050 	ldr.w	r3, [ip, #80]	; 0x50
9000a9aa:	b11b      	cbz	r3, 9000a9b4 <HAL_MDMA_Start_IT+0xc0>
      __HAL_MDMA_ENABLE_IT(hmdma, MDMA_IT_BRT);
9000a9ac:	68e3      	ldr	r3, [r4, #12]
9000a9ae:	f043 0308 	orr.w	r3, r3, #8
9000a9b2:	60e3      	str	r3, [r4, #12]
    if(hmdma->XferBufferCpltCallback != NULL)
9000a9b4:	f8dc 3048 	ldr.w	r3, [ip, #72]	; 0x48
9000a9b8:	b11b      	cbz	r3, 9000a9c2 <HAL_MDMA_Start_IT+0xce>
      __HAL_MDMA_ENABLE_IT(hmdma, MDMA_IT_BFTC);
9000a9ba:	68e3      	ldr	r3, [r4, #12]
9000a9bc:	f043 0320 	orr.w	r3, r3, #32
9000a9c0:	60e3      	str	r3, [r4, #12]
    __HAL_MDMA_ENABLE(hmdma);
9000a9c2:	68e3      	ldr	r3, [r4, #12]
    if(hmdma->Init.Request == MDMA_REQUEST_SW)
9000a9c4:	f8dc 2004 	ldr.w	r2, [ip, #4]
    __HAL_MDMA_ENABLE(hmdma);
9000a9c8:	f043 0301 	orr.w	r3, r3, #1
    if(hmdma->Init.Request == MDMA_REQUEST_SW)
9000a9cc:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
    __HAL_MDMA_ENABLE(hmdma);
9000a9d0:	60e3      	str	r3, [r4, #12]
    if(hmdma->Init.Request == MDMA_REQUEST_SW)
9000a9d2:	d003      	beq.n	9000a9dc <HAL_MDMA_Start_IT+0xe8>
  return HAL_OK;
9000a9d4:	2000      	movs	r0, #0
}
9000a9d6:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
9000a9d8:	2001      	movs	r0, #1
9000a9da:	4770      	bx	lr
      hmdma->Instance->CCR |=  MDMA_CCR_SWRQ;
9000a9dc:	68e3      	ldr	r3, [r4, #12]
  return HAL_OK;
9000a9de:	2000      	movs	r0, #0
      hmdma->Instance->CCR |=  MDMA_CCR_SWRQ;
9000a9e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
9000a9e4:	60e3      	str	r3, [r4, #12]
}
9000a9e6:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(hmdma);
9000a9e8:	2002      	movs	r0, #2
}
9000a9ea:	4770      	bx	lr

9000a9ec <HAL_MDMA_Abort_IT>:
  if(hmdma == NULL)
9000a9ec:	4603      	mov	r3, r0
9000a9ee:	b188      	cbz	r0, 9000aa14 <HAL_MDMA_Abort_IT+0x28>
  if(HAL_MDMA_STATE_BUSY != hmdma->State)
9000a9f0:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
9000a9f4:	2a02      	cmp	r2, #2
9000a9f6:	d003      	beq.n	9000aa00 <HAL_MDMA_Abort_IT+0x14>
    hmdma->ErrorCode = HAL_MDMA_ERROR_NO_XFER;
9000a9f8:	2280      	movs	r2, #128	; 0x80
    return HAL_ERROR;
9000a9fa:	2001      	movs	r0, #1
    hmdma->ErrorCode = HAL_MDMA_ERROR_NO_XFER;
9000a9fc:	669a      	str	r2, [r3, #104]	; 0x68
    return HAL_ERROR;
9000a9fe:	4770      	bx	lr
    __HAL_MDMA_DISABLE(hmdma);
9000aa00:	6802      	ldr	r2, [r0, #0]
    hmdma->State = HAL_MDMA_STATE_ABORT;
9000aa02:	2104      	movs	r1, #4
  return HAL_OK;
9000aa04:	2000      	movs	r0, #0
    hmdma->State = HAL_MDMA_STATE_ABORT;
9000aa06:	f883 103d 	strb.w	r1, [r3, #61]	; 0x3d
    __HAL_MDMA_DISABLE(hmdma);
9000aa0a:	68d3      	ldr	r3, [r2, #12]
9000aa0c:	f023 0301 	bic.w	r3, r3, #1
9000aa10:	60d3      	str	r3, [r2, #12]
  return HAL_OK;
9000aa12:	4770      	bx	lr
    return HAL_ERROR;
9000aa14:	2001      	movs	r0, #1
}
9000aa16:	4770      	bx	lr

9000aa18 <HAL_MDMA_IRQHandler>:
{
9000aa18:	b530      	push	{r4, r5, lr}
  __IO uint32_t count = 0;
9000aa1a:	2300      	movs	r3, #0
{
9000aa1c:	b083      	sub	sp, #12
  if((MDMA->GISR0 & generalIntFlag) == 0U)
9000aa1e:	f04f 45a4 	mov.w	r5, #1375731712	; 0x52000000
{
9000aa22:	4604      	mov	r4, r0
  __IO uint32_t count = 0;
9000aa24:	9301      	str	r3, [sp, #4]
  generalIntFlag =  1UL << ((((uint32_t)hmdma->Instance - (uint32_t)(MDMA_Channel0))/HAL_MDMA_CHANNEL_SIZE) & 0x1FU);
9000aa26:	2101      	movs	r1, #1
  uint32_t timeout = SystemCoreClock / 9600U;
9000aa28:	4b57      	ldr	r3, [pc, #348]	; (9000ab88 <HAL_MDMA_IRQHandler+0x170>)
  if((MDMA->GISR0 & generalIntFlag) == 0U)
9000aa2a:	6828      	ldr	r0, [r5, #0]
  generalIntFlag =  1UL << ((((uint32_t)hmdma->Instance - (uint32_t)(MDMA_Channel0))/HAL_MDMA_CHANNEL_SIZE) & 0x1FU);
9000aa2c:	4a57      	ldr	r2, [pc, #348]	; (9000ab8c <HAL_MDMA_IRQHandler+0x174>)
  uint32_t timeout = SystemCoreClock / 9600U;
9000aa2e:	681d      	ldr	r5, [r3, #0]
  generalIntFlag =  1UL << ((((uint32_t)hmdma->Instance - (uint32_t)(MDMA_Channel0))/HAL_MDMA_CHANNEL_SIZE) & 0x1FU);
9000aa30:	6823      	ldr	r3, [r4, #0]
9000aa32:	441a      	add	r2, r3
9000aa34:	f3c2 1284 	ubfx	r2, r2, #6, #5
9000aa38:	fa01 f202 	lsl.w	r2, r1, r2
  if((MDMA->GISR0 & generalIntFlag) == 0U)
9000aa3c:	4202      	tst	r2, r0
9000aa3e:	f000 80a0 	beq.w	9000ab82 <HAL_MDMA_IRQHandler+0x16a>
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_TE) != 0U))
9000aa42:	681a      	ldr	r2, [r3, #0]
9000aa44:	07d1      	lsls	r1, r2, #31
9000aa46:	d529      	bpl.n	9000aa9c <HAL_MDMA_IRQHandler+0x84>
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_TE) != 0U)
9000aa48:	68da      	ldr	r2, [r3, #12]
9000aa4a:	0792      	lsls	r2, r2, #30
9000aa4c:	d526      	bpl.n	9000aa9c <HAL_MDMA_IRQHandler+0x84>
      __HAL_MDMA_DISABLE_IT(hmdma, MDMA_IT_TE);
9000aa4e:	68da      	ldr	r2, [r3, #12]
9000aa50:	f022 0202 	bic.w	r2, r2, #2
9000aa54:	60da      	str	r2, [r3, #12]
      errorFlag = hmdma->Instance->CESR;
9000aa56:	689a      	ldr	r2, [r3, #8]
        hmdma->ErrorCode |= HAL_MDMA_ERROR_READ_XFER;
9000aa58:	6ea1      	ldr	r1, [r4, #104]	; 0x68
      if((errorFlag & MDMA_CESR_TED) == 0U)
9000aa5a:	0610      	lsls	r0, r2, #24
        hmdma->ErrorCode |= HAL_MDMA_ERROR_READ_XFER;
9000aa5c:	bf54      	ite	pl
9000aa5e:	f041 0101 	orrpl.w	r1, r1, #1
        hmdma->ErrorCode |= HAL_MDMA_ERROR_WRITE_XFER;
9000aa62:	f041 0102 	orrmi.w	r1, r1, #2
9000aa66:	66a1      	str	r1, [r4, #104]	; 0x68
      if((errorFlag & MDMA_CESR_TEMD) != 0U)
9000aa68:	0591      	lsls	r1, r2, #22
9000aa6a:	d503      	bpl.n	9000aa74 <HAL_MDMA_IRQHandler+0x5c>
        hmdma->ErrorCode |= HAL_MDMA_ERROR_MASK_DATA;
9000aa6c:	6ea1      	ldr	r1, [r4, #104]	; 0x68
9000aa6e:	f041 0104 	orr.w	r1, r1, #4
9000aa72:	66a1      	str	r1, [r4, #104]	; 0x68
      if((errorFlag & MDMA_CESR_TELD) != 0U)
9000aa74:	05d0      	lsls	r0, r2, #23
9000aa76:	d503      	bpl.n	9000aa80 <HAL_MDMA_IRQHandler+0x68>
        hmdma->ErrorCode |= HAL_MDMA_ERROR_LINKED_LIST;
9000aa78:	6ea1      	ldr	r1, [r4, #104]	; 0x68
9000aa7a:	f041 0108 	orr.w	r1, r1, #8
9000aa7e:	66a1      	str	r1, [r4, #104]	; 0x68
      if((errorFlag & MDMA_CESR_ASE) != 0U)
9000aa80:	0551      	lsls	r1, r2, #21
9000aa82:	d503      	bpl.n	9000aa8c <HAL_MDMA_IRQHandler+0x74>
        hmdma->ErrorCode |= HAL_MDMA_ERROR_ALIGNMENT;
9000aa84:	6ea1      	ldr	r1, [r4, #104]	; 0x68
9000aa86:	f041 0110 	orr.w	r1, r1, #16
9000aa8a:	66a1      	str	r1, [r4, #104]	; 0x68
      if((errorFlag & MDMA_CESR_BSE) != 0U)
9000aa8c:	0510      	lsls	r0, r2, #20
9000aa8e:	d503      	bpl.n	9000aa98 <HAL_MDMA_IRQHandler+0x80>
        hmdma->ErrorCode |= HAL_MDMA_ERROR_BLOCK_SIZE;
9000aa90:	6ea2      	ldr	r2, [r4, #104]	; 0x68
9000aa92:	f042 0220 	orr.w	r2, r2, #32
9000aa96:	66a2      	str	r2, [r4, #104]	; 0x68
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_TE);
9000aa98:	2201      	movs	r2, #1
9000aa9a:	605a      	str	r2, [r3, #4]
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BFTC) != 0U))
9000aa9c:	681a      	ldr	r2, [r3, #0]
9000aa9e:	06d1      	lsls	r1, r2, #27
9000aaa0:	d509      	bpl.n	9000aab6 <HAL_MDMA_IRQHandler+0x9e>
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BFTC) != 0U)
9000aaa2:	68da      	ldr	r2, [r3, #12]
9000aaa4:	0692      	lsls	r2, r2, #26
9000aaa6:	d506      	bpl.n	9000aab6 <HAL_MDMA_IRQHandler+0x9e>
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BFTC);
9000aaa8:	2110      	movs	r1, #16
      if(hmdma->XferBufferCpltCallback != NULL)
9000aaaa:	6ca2      	ldr	r2, [r4, #72]	; 0x48
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BFTC);
9000aaac:	6059      	str	r1, [r3, #4]
      if(hmdma->XferBufferCpltCallback != NULL)
9000aaae:	b112      	cbz	r2, 9000aab6 <HAL_MDMA_IRQHandler+0x9e>
        hmdma->XferBufferCpltCallback(hmdma);
9000aab0:	4620      	mov	r0, r4
9000aab2:	4790      	blx	r2
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BT) != 0U))
9000aab4:	6823      	ldr	r3, [r4, #0]
9000aab6:	681a      	ldr	r2, [r3, #0]
9000aab8:	0710      	lsls	r0, r2, #28
9000aaba:	d509      	bpl.n	9000aad0 <HAL_MDMA_IRQHandler+0xb8>
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BT) != 0U)
9000aabc:	68da      	ldr	r2, [r3, #12]
9000aabe:	06d1      	lsls	r1, r2, #27
9000aac0:	d506      	bpl.n	9000aad0 <HAL_MDMA_IRQHandler+0xb8>
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BT);
9000aac2:	2108      	movs	r1, #8
      if(hmdma->XferBlockCpltCallback != NULL)
9000aac4:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BT);
9000aac6:	6059      	str	r1, [r3, #4]
      if(hmdma->XferBlockCpltCallback != NULL)
9000aac8:	b112      	cbz	r2, 9000aad0 <HAL_MDMA_IRQHandler+0xb8>
        hmdma->XferBlockCpltCallback(hmdma);
9000aaca:	4620      	mov	r0, r4
9000aacc:	4790      	blx	r2
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BRT) != 0U))
9000aace:	6823      	ldr	r3, [r4, #0]
9000aad0:	681a      	ldr	r2, [r3, #0]
9000aad2:	0752      	lsls	r2, r2, #29
9000aad4:	d509      	bpl.n	9000aaea <HAL_MDMA_IRQHandler+0xd2>
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BRT) != 0U)
9000aad6:	68da      	ldr	r2, [r3, #12]
9000aad8:	0710      	lsls	r0, r2, #28
9000aada:	d506      	bpl.n	9000aaea <HAL_MDMA_IRQHandler+0xd2>
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BRT);
9000aadc:	2104      	movs	r1, #4
      if(hmdma->XferRepeatBlockCpltCallback != NULL)
9000aade:	6d22      	ldr	r2, [r4, #80]	; 0x50
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BRT);
9000aae0:	6059      	str	r1, [r3, #4]
      if(hmdma->XferRepeatBlockCpltCallback != NULL)
9000aae2:	b112      	cbz	r2, 9000aaea <HAL_MDMA_IRQHandler+0xd2>
        hmdma->XferRepeatBlockCpltCallback(hmdma);
9000aae4:	4620      	mov	r0, r4
9000aae6:	4790      	blx	r2
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_CTC) != 0U))
9000aae8:	6823      	ldr	r3, [r4, #0]
9000aaea:	681a      	ldr	r2, [r3, #0]
9000aaec:	0791      	lsls	r1, r2, #30
9000aaee:	d516      	bpl.n	9000ab1e <HAL_MDMA_IRQHandler+0x106>
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_CTC) != 0U)
9000aaf0:	68da      	ldr	r2, [r3, #12]
9000aaf2:	0752      	lsls	r2, r2, #29
9000aaf4:	d513      	bpl.n	9000ab1e <HAL_MDMA_IRQHandler+0x106>
      __HAL_MDMA_DISABLE_IT(hmdma, (MDMA_IT_TE | MDMA_IT_CTC | MDMA_IT_BT | MDMA_IT_BRT | MDMA_IT_BFTC));
9000aaf6:	68da      	ldr	r2, [r3, #12]
9000aaf8:	f022 023e 	bic.w	r2, r2, #62	; 0x3e
9000aafc:	60da      	str	r2, [r3, #12]
      if(HAL_MDMA_STATE_ABORT == hmdma->State)
9000aafe:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
9000ab02:	2a04      	cmp	r2, #4
9000ab04:	d034      	beq.n	9000ab70 <HAL_MDMA_IRQHandler+0x158>
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_CTC);
9000ab06:	2202      	movs	r2, #2
      __HAL_UNLOCK(hmdma);
9000ab08:	2100      	movs	r1, #0
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_CTC);
9000ab0a:	605a      	str	r2, [r3, #4]
      hmdma->State = HAL_MDMA_STATE_READY;
9000ab0c:	2201      	movs	r2, #1
      if(hmdma->XferCpltCallback != NULL)
9000ab0e:	6c63      	ldr	r3, [r4, #68]	; 0x44
      __HAL_UNLOCK(hmdma);
9000ab10:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c
      hmdma->State = HAL_MDMA_STATE_READY;
9000ab14:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      if(hmdma->XferCpltCallback != NULL)
9000ab18:	b10b      	cbz	r3, 9000ab1e <HAL_MDMA_IRQHandler+0x106>
        hmdma->XferCpltCallback(hmdma);
9000ab1a:	4620      	mov	r0, r4
9000ab1c:	4798      	blx	r3
  if(hmdma->ErrorCode != HAL_MDMA_ERROR_NONE)
9000ab1e:	6ea3      	ldr	r3, [r4, #104]	; 0x68
9000ab20:	2b00      	cmp	r3, #0
9000ab22:	d02e      	beq.n	9000ab82 <HAL_MDMA_IRQHandler+0x16a>
    __HAL_MDMA_DISABLE(hmdma);
9000ab24:	6821      	ldr	r1, [r4, #0]
    hmdma->State = HAL_MDMA_STATE_ABORT;
9000ab26:	2004      	movs	r0, #4
  uint32_t timeout = SystemCoreClock / 9600U;
9000ab28:	4b19      	ldr	r3, [pc, #100]	; (9000ab90 <HAL_MDMA_IRQHandler+0x178>)
    hmdma->State = HAL_MDMA_STATE_ABORT;
9000ab2a:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  uint32_t timeout = SystemCoreClock / 9600U;
9000ab2e:	fba3 3205 	umull	r3, r2, r3, r5
    __HAL_MDMA_DISABLE(hmdma);
9000ab32:	68cb      	ldr	r3, [r1, #12]
9000ab34:	f023 0301 	bic.w	r3, r3, #1
  uint32_t timeout = SystemCoreClock / 9600U;
9000ab38:	0a92      	lsrs	r2, r2, #10
    __HAL_MDMA_DISABLE(hmdma);
9000ab3a:	60cb      	str	r3, [r1, #12]
9000ab3c:	e002      	b.n	9000ab44 <HAL_MDMA_IRQHandler+0x12c>
    while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U);
9000ab3e:	68cb      	ldr	r3, [r1, #12]
9000ab40:	07d8      	lsls	r0, r3, #31
9000ab42:	d504      	bpl.n	9000ab4e <HAL_MDMA_IRQHandler+0x136>
      if (++count > timeout)
9000ab44:	9b01      	ldr	r3, [sp, #4]
9000ab46:	3301      	adds	r3, #1
9000ab48:	4293      	cmp	r3, r2
9000ab4a:	9301      	str	r3, [sp, #4]
9000ab4c:	d9f7      	bls.n	9000ab3e <HAL_MDMA_IRQHandler+0x126>
    __HAL_UNLOCK(hmdma);
9000ab4e:	2300      	movs	r3, #0
9000ab50:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
9000ab54:	68cb      	ldr	r3, [r1, #12]
9000ab56:	07db      	lsls	r3, r3, #31
      hmdma->State = HAL_MDMA_STATE_ERROR;
9000ab58:	bf4c      	ite	mi
9000ab5a:	2303      	movmi	r3, #3
      hmdma->State = HAL_MDMA_STATE_READY;
9000ab5c:	2301      	movpl	r3, #1
9000ab5e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    if (hmdma->XferErrorCallback != NULL)
9000ab62:	6d63      	ldr	r3, [r4, #84]	; 0x54
9000ab64:	b16b      	cbz	r3, 9000ab82 <HAL_MDMA_IRQHandler+0x16a>
      hmdma->XferErrorCallback(hmdma);
9000ab66:	4620      	mov	r0, r4
}
9000ab68:	b003      	add	sp, #12
9000ab6a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
      hmdma->XferErrorCallback(hmdma);
9000ab6e:	4718      	bx	r3
        __HAL_UNLOCK(hmdma);
9000ab70:	2100      	movs	r1, #0
        hmdma->State = HAL_MDMA_STATE_READY;
9000ab72:	2201      	movs	r2, #1
        if(hmdma->XferAbortCallback != NULL)
9000ab74:	6da3      	ldr	r3, [r4, #88]	; 0x58
        __HAL_UNLOCK(hmdma);
9000ab76:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c
        hmdma->State = HAL_MDMA_STATE_READY;
9000ab7a:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        if(hmdma->XferAbortCallback != NULL)
9000ab7e:	2b00      	cmp	r3, #0
9000ab80:	d1f1      	bne.n	9000ab66 <HAL_MDMA_IRQHandler+0x14e>
}
9000ab82:	b003      	add	sp, #12
9000ab84:	bd30      	pop	{r4, r5, pc}
9000ab86:	bf00      	nop
9000ab88:	24000054 	.word	0x24000054
9000ab8c:	adffffc0 	.word	0xadffffc0
9000ab90:	1b4e81b5 	.word	0x1b4e81b5

9000ab94 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
9000ab94:	b538      	push	{r3, r4, r5, lr}
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
9000ab96:	4c10      	ldr	r4, [pc, #64]	; (9000abd8 <HAL_PWREx_ConfigSupply+0x44>)
9000ab98:	68e3      	ldr	r3, [r4, #12]
9000ab9a:	f013 0f04 	tst.w	r3, #4
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
9000ab9e:	68e3      	ldr	r3, [r4, #12]
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
9000aba0:	d105      	bne.n	9000abae <HAL_PWREx_ConfigSupply+0x1a>
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
9000aba2:	f003 0307 	and.w	r3, r3, #7
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
9000aba6:	1a18      	subs	r0, r3, r0
9000aba8:	bf18      	it	ne
9000abaa:	2001      	movne	r0, #1
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
}
9000abac:	bd38      	pop	{r3, r4, r5, pc}
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
9000abae:	f023 0307 	bic.w	r3, r3, #7
9000abb2:	4303      	orrs	r3, r0
9000abb4:	60e3      	str	r3, [r4, #12]
  tickstart = HAL_GetTick ();
9000abb6:	f7fc f8c5 	bl	90006d44 <HAL_GetTick>
9000abba:	4605      	mov	r5, r0
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
9000abbc:	e005      	b.n	9000abca <HAL_PWREx_ConfigSupply+0x36>
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
9000abbe:	f7fc f8c1 	bl	90006d44 <HAL_GetTick>
9000abc2:	1b40      	subs	r0, r0, r5
9000abc4:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
9000abc8:	d804      	bhi.n	9000abd4 <HAL_PWREx_ConfigSupply+0x40>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
9000abca:	6863      	ldr	r3, [r4, #4]
9000abcc:	049b      	lsls	r3, r3, #18
9000abce:	d5f6      	bpl.n	9000abbe <HAL_PWREx_ConfigSupply+0x2a>
  return HAL_OK;
9000abd0:	2000      	movs	r0, #0
}
9000abd2:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_ERROR;
9000abd4:	2001      	movs	r0, #1
}
9000abd6:	bd38      	pop	{r3, r4, r5, pc}
9000abd8:	58024800 	.word	0x58024800

9000abdc <HAL_RCC_GetSysClockFreq.part.0>:
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
9000abdc:	4b3b      	ldr	r3, [pc, #236]	; (9000accc <HAL_RCC_GetSysClockFreq.part.0+0xf0>)
uint32_t HAL_RCC_GetSysClockFreq(void)
9000abde:	b430      	push	{r4, r5}
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
9000abe0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
9000abe2:	6a9c      	ldr	r4, [r3, #40]	; 0x28
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
9000abe4:	6add      	ldr	r5, [r3, #44]	; 0x2c
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));

      if (pllm != 0U)
9000abe6:	f414 7f7c 	tst.w	r4, #1008	; 0x3f0
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
9000abea:	6b59      	ldr	r1, [r3, #52]	; 0x34
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
9000abec:	f3c4 1005 	ubfx	r0, r4, #4, #6
      if (pllm != 0U)
9000abf0:	d038      	beq.n	9000ac64 <HAL_RCC_GetSysClockFreq.part.0+0x88>
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
9000abf2:	f3c1 01cc 	ubfx	r1, r1, #3, #13
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
9000abf6:	f005 0501 	and.w	r5, r5, #1
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
9000abfa:	f002 0203 	and.w	r2, r2, #3
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
9000abfe:	fb05 f101 	mul.w	r1, r5, r1
9000ac02:	2a01      	cmp	r2, #1
9000ac04:	ee07 1a90 	vmov	s15, r1
9000ac08:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
      {
        switch (pllsource)
9000ac0c:	d002      	beq.n	9000ac14 <HAL_RCC_GetSysClockFreq.part.0+0x38>
9000ac0e:	2a02      	cmp	r2, #2
9000ac10:	d04e      	beq.n	9000acb0 <HAL_RCC_GetSysClockFreq.part.0+0xd4>
9000ac12:	b34a      	cbz	r2, 9000ac68 <HAL_RCC_GetSysClockFreq.part.0+0x8c>
          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            break;

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
9000ac14:	ee07 0a90 	vmov	s15, r0
9000ac18:	ed9f 5a2d 	vldr	s10, [pc, #180]	; 9000acd0 <HAL_RCC_GetSysClockFreq.part.0+0xf4>
9000ac1c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
9000ac20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
9000ac22:	eec5 6a27 	vdiv.f32	s13, s10, s15
9000ac26:	eddf 5a2b 	vldr	s11, [pc, #172]	; 9000acd4 <HAL_RCC_GetSysClockFreq.part.0+0xf8>
9000ac2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
9000ac2e:	ee07 3a90 	vmov	s15, r3
9000ac32:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
9000ac36:	eef8 7ae7 	vcvt.f32.s32	s15, s15
9000ac3a:	eee7 7a25 	vfma.f32	s15, s14, s11
9000ac3e:	ee77 7a86 	vadd.f32	s15, s15, s12
9000ac42:	ee66 6aa7 	vmul.f32	s13, s13, s15
            break;
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
9000ac46:	4b21      	ldr	r3, [pc, #132]	; (9000accc <HAL_RCC_GetSysClockFreq.part.0+0xf0>)
9000ac48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
9000ac4a:	f3c3 2346 	ubfx	r3, r3, #9, #7
9000ac4e:	3301      	adds	r3, #1
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
9000ac50:	ee07 3a90 	vmov	s15, r3
9000ac54:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
9000ac58:	eec6 7a87 	vdiv.f32	s15, s13, s14
9000ac5c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
9000ac60:	ee17 0a90 	vmov	r0, s15
      sysclockfreq = CSI_VALUE;
      break;
  }

  return sysclockfreq;
}
9000ac64:	bc30      	pop	{r4, r5}
9000ac66:	4770      	bx	lr
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
9000ac68:	681a      	ldr	r2, [r3, #0]
9000ac6a:	0692      	lsls	r2, r2, #26
9000ac6c:	d527      	bpl.n	9000acbe <HAL_RCC_GetSysClockFreq.part.0+0xe2>
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
9000ac6e:	6819      	ldr	r1, [r3, #0]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
9000ac70:	ee07 0a90 	vmov	s15, r0
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
9000ac74:	4a18      	ldr	r2, [pc, #96]	; (9000acd8 <HAL_RCC_GetSysClockFreq.part.0+0xfc>)
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
9000ac76:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
9000ac7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
9000ac7c:	f3c1 01c1 	ubfx	r1, r1, #3, #2
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
9000ac80:	eef8 7ae7 	vcvt.f32.s32	s15, s15
9000ac84:	ed9f 5a13 	vldr	s10, [pc, #76]	; 9000acd4 <HAL_RCC_GetSysClockFreq.part.0+0xf8>
9000ac88:	f3c3 0308 	ubfx	r3, r3, #0, #9
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
9000ac8c:	40ca      	lsrs	r2, r1
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
9000ac8e:	ee06 3a90 	vmov	s13, r3
9000ac92:	ee06 2a10 	vmov	s12, r2
9000ac96:	eef8 6ae6 	vcvt.f32.s32	s13, s13
9000ac9a:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
9000ac9e:	eee7 6a05 	vfma.f32	s13, s14, s10
9000aca2:	ee86 7a27 	vdiv.f32	s14, s12, s15
9000aca6:	ee76 6aa5 	vadd.f32	s13, s13, s11
9000acaa:	ee66 6a87 	vmul.f32	s13, s13, s14
9000acae:	e7ca      	b.n	9000ac46 <HAL_RCC_GetSysClockFreq.part.0+0x6a>
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
9000acb0:	ee07 0a90 	vmov	s15, r0
9000acb4:	ed9f 5a09 	vldr	s10, [pc, #36]	; 9000acdc <HAL_RCC_GetSysClockFreq.part.0+0x100>
9000acb8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
9000acbc:	e7b0      	b.n	9000ac20 <HAL_RCC_GetSysClockFreq.part.0+0x44>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
9000acbe:	ee07 0a90 	vmov	s15, r0
9000acc2:	ed9f 5a07 	vldr	s10, [pc, #28]	; 9000ace0 <HAL_RCC_GetSysClockFreq.part.0+0x104>
9000acc6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
9000acca:	e7a9      	b.n	9000ac20 <HAL_RCC_GetSysClockFreq.part.0+0x44>
9000accc:	58024400 	.word	0x58024400
9000acd0:	4a742400 	.word	0x4a742400
9000acd4:	39000000 	.word	0x39000000
9000acd8:	03d09000 	.word	0x03d09000
9000acdc:	4bbebc20 	.word	0x4bbebc20
9000ace0:	4c742400 	.word	0x4c742400

9000ace4 <HAL_RCC_OscConfig>:
  if (RCC_OscInitStruct == NULL)
9000ace4:	2800      	cmp	r0, #0
9000ace6:	f000 81e8 	beq.w	9000b0ba <HAL_RCC_OscConfig+0x3d6>
{
9000acea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
9000acec:	6803      	ldr	r3, [r0, #0]
9000acee:	4604      	mov	r4, r0
9000acf0:	07d9      	lsls	r1, r3, #31
9000acf2:	d52e      	bpl.n	9000ad52 <HAL_RCC_OscConfig+0x6e>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
9000acf4:	49a4      	ldr	r1, [pc, #656]	; (9000af88 <HAL_RCC_OscConfig+0x2a4>)
9000acf6:	690a      	ldr	r2, [r1, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
9000acf8:	6a89      	ldr	r1, [r1, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
9000acfa:	f002 0238 	and.w	r2, r2, #56	; 0x38
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
9000acfe:	2a10      	cmp	r2, #16
9000ad00:	f000 8107 	beq.w	9000af12 <HAL_RCC_OscConfig+0x22e>
9000ad04:	2a18      	cmp	r2, #24
9000ad06:	f000 80ff 	beq.w	9000af08 <HAL_RCC_OscConfig+0x224>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
9000ad0a:	6863      	ldr	r3, [r4, #4]
9000ad0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
9000ad10:	f000 812a 	beq.w	9000af68 <HAL_RCC_OscConfig+0x284>
9000ad14:	2b00      	cmp	r3, #0
9000ad16:	f000 8168 	beq.w	9000afea <HAL_RCC_OscConfig+0x306>
9000ad1a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
9000ad1e:	4b9a      	ldr	r3, [pc, #616]	; (9000af88 <HAL_RCC_OscConfig+0x2a4>)
9000ad20:	681a      	ldr	r2, [r3, #0]
9000ad22:	f000 8289 	beq.w	9000b238 <HAL_RCC_OscConfig+0x554>
9000ad26:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
9000ad2a:	601a      	str	r2, [r3, #0]
9000ad2c:	681a      	ldr	r2, [r3, #0]
9000ad2e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
9000ad32:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
9000ad34:	f7fc f806 	bl	90006d44 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
9000ad38:	4e93      	ldr	r6, [pc, #588]	; (9000af88 <HAL_RCC_OscConfig+0x2a4>)
        tickstart = HAL_GetTick();
9000ad3a:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
9000ad3c:	e005      	b.n	9000ad4a <HAL_RCC_OscConfig+0x66>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
9000ad3e:	f7fc f801 	bl	90006d44 <HAL_GetTick>
9000ad42:	1b40      	subs	r0, r0, r5
9000ad44:	2864      	cmp	r0, #100	; 0x64
9000ad46:	f200 814e 	bhi.w	9000afe6 <HAL_RCC_OscConfig+0x302>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
9000ad4a:	6833      	ldr	r3, [r6, #0]
9000ad4c:	039b      	lsls	r3, r3, #14
9000ad4e:	d5f6      	bpl.n	9000ad3e <HAL_RCC_OscConfig+0x5a>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
9000ad50:	6823      	ldr	r3, [r4, #0]
9000ad52:	079d      	lsls	r5, r3, #30
9000ad54:	f100 808a 	bmi.w	9000ae6c <HAL_RCC_OscConfig+0x188>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
9000ad58:	06d9      	lsls	r1, r3, #27
9000ad5a:	d533      	bpl.n	9000adc4 <HAL_RCC_OscConfig+0xe0>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
9000ad5c:	4a8a      	ldr	r2, [pc, #552]	; (9000af88 <HAL_RCC_OscConfig+0x2a4>)
9000ad5e:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
9000ad60:	6a92      	ldr	r2, [r2, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
9000ad62:	f003 0338 	and.w	r3, r3, #56	; 0x38
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
9000ad66:	2b08      	cmp	r3, #8
9000ad68:	f000 80e3 	beq.w	9000af32 <HAL_RCC_OscConfig+0x24e>
9000ad6c:	2b18      	cmp	r3, #24
9000ad6e:	f000 80db 	beq.w	9000af28 <HAL_RCC_OscConfig+0x244>
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
9000ad72:	69e3      	ldr	r3, [r4, #28]
        __HAL_RCC_CSI_ENABLE();
9000ad74:	4d84      	ldr	r5, [pc, #528]	; (9000af88 <HAL_RCC_OscConfig+0x2a4>)
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
9000ad76:	2b00      	cmp	r3, #0
9000ad78:	f000 816f 	beq.w	9000b05a <HAL_RCC_OscConfig+0x376>
        __HAL_RCC_CSI_ENABLE();
9000ad7c:	682b      	ldr	r3, [r5, #0]
9000ad7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
9000ad82:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
9000ad84:	f7fb ffde 	bl	90006d44 <HAL_GetTick>
9000ad88:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
9000ad8a:	e005      	b.n	9000ad98 <HAL_RCC_OscConfig+0xb4>
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
9000ad8c:	f7fb ffda 	bl	90006d44 <HAL_GetTick>
9000ad90:	1b80      	subs	r0, r0, r6
9000ad92:	2802      	cmp	r0, #2
9000ad94:	f200 8127 	bhi.w	9000afe6 <HAL_RCC_OscConfig+0x302>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
9000ad98:	682b      	ldr	r3, [r5, #0]
9000ad9a:	05db      	lsls	r3, r3, #23
9000ad9c:	d5f6      	bpl.n	9000ad8c <HAL_RCC_OscConfig+0xa8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
9000ad9e:	f7fb ffd7 	bl	90006d50 <HAL_GetREVID>
9000ada2:	f241 0303 	movw	r3, #4099	; 0x1003
9000ada6:	4298      	cmp	r0, r3
9000ada8:	f200 826d 	bhi.w	9000b286 <HAL_RCC_OscConfig+0x5a2>
9000adac:	6a22      	ldr	r2, [r4, #32]
9000adae:	686b      	ldr	r3, [r5, #4]
9000adb0:	2a20      	cmp	r2, #32
9000adb2:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
9000adb6:	bf0c      	ite	eq
9000adb8:	f043 4380 	orreq.w	r3, r3, #1073741824	; 0x40000000
9000adbc:	ea43 6382 	orrne.w	r3, r3, r2, lsl #26
9000adc0:	606b      	str	r3, [r5, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
9000adc2:	6823      	ldr	r3, [r4, #0]
9000adc4:	071d      	lsls	r5, r3, #28
9000adc6:	d516      	bpl.n	9000adf6 <HAL_RCC_OscConfig+0x112>
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
9000adc8:	6963      	ldr	r3, [r4, #20]
      __HAL_RCC_LSI_ENABLE();
9000adca:	4d6f      	ldr	r5, [pc, #444]	; (9000af88 <HAL_RCC_OscConfig+0x2a4>)
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
9000adcc:	2b00      	cmp	r3, #0
9000adce:	f000 8122 	beq.w	9000b016 <HAL_RCC_OscConfig+0x332>
      __HAL_RCC_LSI_ENABLE();
9000add2:	6f6b      	ldr	r3, [r5, #116]	; 0x74
9000add4:	f043 0301 	orr.w	r3, r3, #1
9000add8:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
9000adda:	f7fb ffb3 	bl	90006d44 <HAL_GetTick>
9000adde:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
9000ade0:	e005      	b.n	9000adee <HAL_RCC_OscConfig+0x10a>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
9000ade2:	f7fb ffaf 	bl	90006d44 <HAL_GetTick>
9000ade6:	1b80      	subs	r0, r0, r6
9000ade8:	2802      	cmp	r0, #2
9000adea:	f200 80fc 	bhi.w	9000afe6 <HAL_RCC_OscConfig+0x302>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
9000adee:	6f6b      	ldr	r3, [r5, #116]	; 0x74
9000adf0:	0798      	lsls	r0, r3, #30
9000adf2:	d5f6      	bpl.n	9000ade2 <HAL_RCC_OscConfig+0xfe>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
9000adf4:	6823      	ldr	r3, [r4, #0]
9000adf6:	069a      	lsls	r2, r3, #26
9000adf8:	d516      	bpl.n	9000ae28 <HAL_RCC_OscConfig+0x144>
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
9000adfa:	69a3      	ldr	r3, [r4, #24]
      __HAL_RCC_HSI48_ENABLE();
9000adfc:	4d62      	ldr	r5, [pc, #392]	; (9000af88 <HAL_RCC_OscConfig+0x2a4>)
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
9000adfe:	2b00      	cmp	r3, #0
9000ae00:	f000 811a 	beq.w	9000b038 <HAL_RCC_OscConfig+0x354>
      __HAL_RCC_HSI48_ENABLE();
9000ae04:	682b      	ldr	r3, [r5, #0]
9000ae06:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
9000ae0a:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
9000ae0c:	f7fb ff9a 	bl	90006d44 <HAL_GetTick>
9000ae10:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
9000ae12:	e005      	b.n	9000ae20 <HAL_RCC_OscConfig+0x13c>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
9000ae14:	f7fb ff96 	bl	90006d44 <HAL_GetTick>
9000ae18:	1b80      	subs	r0, r0, r6
9000ae1a:	2802      	cmp	r0, #2
9000ae1c:	f200 80e3 	bhi.w	9000afe6 <HAL_RCC_OscConfig+0x302>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
9000ae20:	682b      	ldr	r3, [r5, #0]
9000ae22:	049f      	lsls	r7, r3, #18
9000ae24:	d5f6      	bpl.n	9000ae14 <HAL_RCC_OscConfig+0x130>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
9000ae26:	6823      	ldr	r3, [r4, #0]
9000ae28:	0759      	lsls	r1, r3, #29
9000ae2a:	f100 80a3 	bmi.w	9000af74 <HAL_RCC_OscConfig+0x290>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
9000ae2e:	6a60      	ldr	r0, [r4, #36]	; 0x24
9000ae30:	b1d0      	cbz	r0, 9000ae68 <HAL_RCC_OscConfig+0x184>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
9000ae32:	4d55      	ldr	r5, [pc, #340]	; (9000af88 <HAL_RCC_OscConfig+0x2a4>)
9000ae34:	692b      	ldr	r3, [r5, #16]
9000ae36:	f003 0338 	and.w	r3, r3, #56	; 0x38
9000ae3a:	2b18      	cmp	r3, #24
9000ae3c:	f000 81ae 	beq.w	9000b19c <HAL_RCC_OscConfig+0x4b8>
        __HAL_RCC_PLL_DISABLE();
9000ae40:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
9000ae42:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
9000ae44:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
9000ae48:	602b      	str	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
9000ae4a:	f000 8142 	beq.w	9000b0d2 <HAL_RCC_OscConfig+0x3ee>
        tickstart = HAL_GetTick();
9000ae4e:	f7fb ff79 	bl	90006d44 <HAL_GetTick>
9000ae52:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
9000ae54:	e005      	b.n	9000ae62 <HAL_RCC_OscConfig+0x17e>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
9000ae56:	f7fb ff75 	bl	90006d44 <HAL_GetTick>
9000ae5a:	1b00      	subs	r0, r0, r4
9000ae5c:	2802      	cmp	r0, #2
9000ae5e:	f200 80c2 	bhi.w	9000afe6 <HAL_RCC_OscConfig+0x302>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
9000ae62:	682b      	ldr	r3, [r5, #0]
9000ae64:	019b      	lsls	r3, r3, #6
9000ae66:	d4f6      	bmi.n	9000ae56 <HAL_RCC_OscConfig+0x172>
  return HAL_OK;
9000ae68:	2000      	movs	r0, #0
}
9000ae6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
9000ae6c:	4a46      	ldr	r2, [pc, #280]	; (9000af88 <HAL_RCC_OscConfig+0x2a4>)
9000ae6e:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
9000ae70:	6a92      	ldr	r2, [r2, #40]	; 0x28
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
9000ae72:	f013 0338 	ands.w	r3, r3, #56	; 0x38
9000ae76:	d12d      	bne.n	9000aed4 <HAL_RCC_OscConfig+0x1f0>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
9000ae78:	4b43      	ldr	r3, [pc, #268]	; (9000af88 <HAL_RCC_OscConfig+0x2a4>)
9000ae7a:	68e2      	ldr	r2, [r4, #12]
9000ae7c:	681b      	ldr	r3, [r3, #0]
9000ae7e:	0759      	lsls	r1, r3, #29
9000ae80:	d501      	bpl.n	9000ae86 <HAL_RCC_OscConfig+0x1a2>
9000ae82:	2a00      	cmp	r2, #0
9000ae84:	d04e      	beq.n	9000af24 <HAL_RCC_OscConfig+0x240>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
9000ae86:	4d40      	ldr	r5, [pc, #256]	; (9000af88 <HAL_RCC_OscConfig+0x2a4>)
9000ae88:	682b      	ldr	r3, [r5, #0]
9000ae8a:	f023 0319 	bic.w	r3, r3, #25
9000ae8e:	4313      	orrs	r3, r2
9000ae90:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
9000ae92:	f7fb ff57 	bl	90006d44 <HAL_GetTick>
9000ae96:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
9000ae98:	e005      	b.n	9000aea6 <HAL_RCC_OscConfig+0x1c2>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
9000ae9a:	f7fb ff53 	bl	90006d44 <HAL_GetTick>
9000ae9e:	1b80      	subs	r0, r0, r6
9000aea0:	2802      	cmp	r0, #2
9000aea2:	f200 80a0 	bhi.w	9000afe6 <HAL_RCC_OscConfig+0x302>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
9000aea6:	682b      	ldr	r3, [r5, #0]
9000aea8:	075b      	lsls	r3, r3, #29
9000aeaa:	d5f6      	bpl.n	9000ae9a <HAL_RCC_OscConfig+0x1b6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
9000aeac:	f7fb ff50 	bl	90006d50 <HAL_GetREVID>
9000aeb0:	f241 0303 	movw	r3, #4099	; 0x1003
9000aeb4:	4298      	cmp	r0, r3
9000aeb6:	f200 80f7 	bhi.w	9000b0a8 <HAL_RCC_OscConfig+0x3c4>
9000aeba:	6922      	ldr	r2, [r4, #16]
9000aebc:	686b      	ldr	r3, [r5, #4]
9000aebe:	2a40      	cmp	r2, #64	; 0x40
9000aec0:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
9000aec4:	bf0c      	ite	eq
9000aec6:	f443 3300 	orreq.w	r3, r3, #131072	; 0x20000
9000aeca:	ea43 3302 	orrne.w	r3, r3, r2, lsl #12
9000aece:	606b      	str	r3, [r5, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
9000aed0:	6823      	ldr	r3, [r4, #0]
9000aed2:	e741      	b.n	9000ad58 <HAL_RCC_OscConfig+0x74>
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
9000aed4:	2b18      	cmp	r3, #24
9000aed6:	f000 80e3 	beq.w	9000b0a0 <HAL_RCC_OscConfig+0x3bc>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
9000aeda:	4d2b      	ldr	r5, [pc, #172]	; (9000af88 <HAL_RCC_OscConfig+0x2a4>)
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
9000aedc:	68e2      	ldr	r2, [r4, #12]
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
9000aede:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
9000aee0:	2a00      	cmp	r2, #0
9000aee2:	f000 80cc 	beq.w	9000b07e <HAL_RCC_OscConfig+0x39a>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
9000aee6:	f023 0319 	bic.w	r3, r3, #25
9000aeea:	4313      	orrs	r3, r2
9000aeec:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
9000aeee:	f7fb ff29 	bl	90006d44 <HAL_GetTick>
9000aef2:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
9000aef4:	e004      	b.n	9000af00 <HAL_RCC_OscConfig+0x21c>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
9000aef6:	f7fb ff25 	bl	90006d44 <HAL_GetTick>
9000aefa:	1b80      	subs	r0, r0, r6
9000aefc:	2802      	cmp	r0, #2
9000aefe:	d872      	bhi.n	9000afe6 <HAL_RCC_OscConfig+0x302>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
9000af00:	682b      	ldr	r3, [r5, #0]
9000af02:	075f      	lsls	r7, r3, #29
9000af04:	d5f7      	bpl.n	9000aef6 <HAL_RCC_OscConfig+0x212>
9000af06:	e7d1      	b.n	9000aeac <HAL_RCC_OscConfig+0x1c8>
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
9000af08:	f001 0103 	and.w	r1, r1, #3
9000af0c:	2902      	cmp	r1, #2
9000af0e:	f47f aefc 	bne.w	9000ad0a <HAL_RCC_OscConfig+0x26>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
9000af12:	4a1d      	ldr	r2, [pc, #116]	; (9000af88 <HAL_RCC_OscConfig+0x2a4>)
9000af14:	6812      	ldr	r2, [r2, #0]
9000af16:	0392      	lsls	r2, r2, #14
9000af18:	f57f af1b 	bpl.w	9000ad52 <HAL_RCC_OscConfig+0x6e>
9000af1c:	6862      	ldr	r2, [r4, #4]
9000af1e:	2a00      	cmp	r2, #0
9000af20:	f47f af17 	bne.w	9000ad52 <HAL_RCC_OscConfig+0x6e>
        return HAL_ERROR;
9000af24:	2001      	movs	r0, #1
}
9000af26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
9000af28:	f002 0203 	and.w	r2, r2, #3
9000af2c:	2a01      	cmp	r2, #1
9000af2e:	f47f af20 	bne.w	9000ad72 <HAL_RCC_OscConfig+0x8e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
9000af32:	4b15      	ldr	r3, [pc, #84]	; (9000af88 <HAL_RCC_OscConfig+0x2a4>)
9000af34:	681b      	ldr	r3, [r3, #0]
9000af36:	05da      	lsls	r2, r3, #23
9000af38:	d502      	bpl.n	9000af40 <HAL_RCC_OscConfig+0x25c>
9000af3a:	69e3      	ldr	r3, [r4, #28]
9000af3c:	2b80      	cmp	r3, #128	; 0x80
9000af3e:	d1f1      	bne.n	9000af24 <HAL_RCC_OscConfig+0x240>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
9000af40:	f7fb ff06 	bl	90006d50 <HAL_GetREVID>
9000af44:	f241 0303 	movw	r3, #4099	; 0x1003
9000af48:	4298      	cmp	r0, r3
9000af4a:	f200 80b8 	bhi.w	9000b0be <HAL_RCC_OscConfig+0x3da>
9000af4e:	6a22      	ldr	r2, [r4, #32]
9000af50:	2a20      	cmp	r2, #32
9000af52:	f000 81a7 	beq.w	9000b2a4 <HAL_RCC_OscConfig+0x5c0>
9000af56:	490c      	ldr	r1, [pc, #48]	; (9000af88 <HAL_RCC_OscConfig+0x2a4>)
9000af58:	684b      	ldr	r3, [r1, #4]
9000af5a:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
9000af5e:	ea43 6382 	orr.w	r3, r3, r2, lsl #26
9000af62:	604b      	str	r3, [r1, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
9000af64:	6823      	ldr	r3, [r4, #0]
9000af66:	e72d      	b.n	9000adc4 <HAL_RCC_OscConfig+0xe0>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
9000af68:	4a07      	ldr	r2, [pc, #28]	; (9000af88 <HAL_RCC_OscConfig+0x2a4>)
9000af6a:	6813      	ldr	r3, [r2, #0]
9000af6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
9000af70:	6013      	str	r3, [r2, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
9000af72:	e6df      	b.n	9000ad34 <HAL_RCC_OscConfig+0x50>
    PWR->CR1 |= PWR_CR1_DBP;
9000af74:	4d05      	ldr	r5, [pc, #20]	; (9000af8c <HAL_RCC_OscConfig+0x2a8>)
9000af76:	682b      	ldr	r3, [r5, #0]
9000af78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
9000af7c:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
9000af7e:	f7fb fee1 	bl	90006d44 <HAL_GetTick>
9000af82:	4606      	mov	r6, r0
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
9000af84:	e009      	b.n	9000af9a <HAL_RCC_OscConfig+0x2b6>
9000af86:	bf00      	nop
9000af88:	58024400 	.word	0x58024400
9000af8c:	58024800 	.word	0x58024800
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
9000af90:	f7fb fed8 	bl	90006d44 <HAL_GetTick>
9000af94:	1b80      	subs	r0, r0, r6
9000af96:	2864      	cmp	r0, #100	; 0x64
9000af98:	d825      	bhi.n	9000afe6 <HAL_RCC_OscConfig+0x302>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
9000af9a:	682b      	ldr	r3, [r5, #0]
9000af9c:	05da      	lsls	r2, r3, #23
9000af9e:	d5f7      	bpl.n	9000af90 <HAL_RCC_OscConfig+0x2ac>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
9000afa0:	68a3      	ldr	r3, [r4, #8]
9000afa2:	2b01      	cmp	r3, #1
9000afa4:	f000 8178 	beq.w	9000b298 <HAL_RCC_OscConfig+0x5b4>
9000afa8:	2b00      	cmp	r3, #0
9000afaa:	f000 8153 	beq.w	9000b254 <HAL_RCC_OscConfig+0x570>
9000afae:	2b05      	cmp	r3, #5
9000afb0:	4ba5      	ldr	r3, [pc, #660]	; (9000b248 <HAL_RCC_OscConfig+0x564>)
9000afb2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
9000afb4:	f000 817f 	beq.w	9000b2b6 <HAL_RCC_OscConfig+0x5d2>
9000afb8:	f022 0201 	bic.w	r2, r2, #1
9000afbc:	671a      	str	r2, [r3, #112]	; 0x70
9000afbe:	6f1a      	ldr	r2, [r3, #112]	; 0x70
9000afc0:	f022 0204 	bic.w	r2, r2, #4
9000afc4:	671a      	str	r2, [r3, #112]	; 0x70
      tickstart = HAL_GetTick();
9000afc6:	f7fb febd 	bl	90006d44 <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
9000afca:	4e9f      	ldr	r6, [pc, #636]	; (9000b248 <HAL_RCC_OscConfig+0x564>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
9000afcc:	f241 3788 	movw	r7, #5000	; 0x1388
      tickstart = HAL_GetTick();
9000afd0:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
9000afd2:	e004      	b.n	9000afde <HAL_RCC_OscConfig+0x2fa>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
9000afd4:	f7fb feb6 	bl	90006d44 <HAL_GetTick>
9000afd8:	1b40      	subs	r0, r0, r5
9000afda:	42b8      	cmp	r0, r7
9000afdc:	d803      	bhi.n	9000afe6 <HAL_RCC_OscConfig+0x302>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
9000afde:	6f33      	ldr	r3, [r6, #112]	; 0x70
9000afe0:	079b      	lsls	r3, r3, #30
9000afe2:	d5f7      	bpl.n	9000afd4 <HAL_RCC_OscConfig+0x2f0>
9000afe4:	e723      	b.n	9000ae2e <HAL_RCC_OscConfig+0x14a>
            return HAL_TIMEOUT;
9000afe6:	2003      	movs	r0, #3
}
9000afe8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
9000afea:	4d97      	ldr	r5, [pc, #604]	; (9000b248 <HAL_RCC_OscConfig+0x564>)
9000afec:	682b      	ldr	r3, [r5, #0]
9000afee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
9000aff2:	602b      	str	r3, [r5, #0]
9000aff4:	682b      	ldr	r3, [r5, #0]
9000aff6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
9000affa:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
9000affc:	f7fb fea2 	bl	90006d44 <HAL_GetTick>
9000b000:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
9000b002:	e004      	b.n	9000b00e <HAL_RCC_OscConfig+0x32a>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
9000b004:	f7fb fe9e 	bl	90006d44 <HAL_GetTick>
9000b008:	1b80      	subs	r0, r0, r6
9000b00a:	2864      	cmp	r0, #100	; 0x64
9000b00c:	d8eb      	bhi.n	9000afe6 <HAL_RCC_OscConfig+0x302>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
9000b00e:	682b      	ldr	r3, [r5, #0]
9000b010:	039f      	lsls	r7, r3, #14
9000b012:	d4f7      	bmi.n	9000b004 <HAL_RCC_OscConfig+0x320>
9000b014:	e69c      	b.n	9000ad50 <HAL_RCC_OscConfig+0x6c>
      __HAL_RCC_LSI_DISABLE();
9000b016:	6f6b      	ldr	r3, [r5, #116]	; 0x74
9000b018:	f023 0301 	bic.w	r3, r3, #1
9000b01c:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
9000b01e:	f7fb fe91 	bl	90006d44 <HAL_GetTick>
9000b022:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
9000b024:	e004      	b.n	9000b030 <HAL_RCC_OscConfig+0x34c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
9000b026:	f7fb fe8d 	bl	90006d44 <HAL_GetTick>
9000b02a:	1b80      	subs	r0, r0, r6
9000b02c:	2802      	cmp	r0, #2
9000b02e:	d8da      	bhi.n	9000afe6 <HAL_RCC_OscConfig+0x302>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
9000b030:	6f6b      	ldr	r3, [r5, #116]	; 0x74
9000b032:	0799      	lsls	r1, r3, #30
9000b034:	d4f7      	bmi.n	9000b026 <HAL_RCC_OscConfig+0x342>
9000b036:	e6dd      	b.n	9000adf4 <HAL_RCC_OscConfig+0x110>
      __HAL_RCC_HSI48_DISABLE();
9000b038:	682b      	ldr	r3, [r5, #0]
9000b03a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
9000b03e:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
9000b040:	f7fb fe80 	bl	90006d44 <HAL_GetTick>
9000b044:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
9000b046:	e004      	b.n	9000b052 <HAL_RCC_OscConfig+0x36e>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
9000b048:	f7fb fe7c 	bl	90006d44 <HAL_GetTick>
9000b04c:	1b80      	subs	r0, r0, r6
9000b04e:	2802      	cmp	r0, #2
9000b050:	d8c9      	bhi.n	9000afe6 <HAL_RCC_OscConfig+0x302>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
9000b052:	682b      	ldr	r3, [r5, #0]
9000b054:	0498      	lsls	r0, r3, #18
9000b056:	d4f7      	bmi.n	9000b048 <HAL_RCC_OscConfig+0x364>
9000b058:	e6e5      	b.n	9000ae26 <HAL_RCC_OscConfig+0x142>
        __HAL_RCC_CSI_DISABLE();
9000b05a:	682b      	ldr	r3, [r5, #0]
9000b05c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
9000b060:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
9000b062:	f7fb fe6f 	bl	90006d44 <HAL_GetTick>
9000b066:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
9000b068:	e004      	b.n	9000b074 <HAL_RCC_OscConfig+0x390>
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
9000b06a:	f7fb fe6b 	bl	90006d44 <HAL_GetTick>
9000b06e:	1b80      	subs	r0, r0, r6
9000b070:	2802      	cmp	r0, #2
9000b072:	d8b8      	bhi.n	9000afe6 <HAL_RCC_OscConfig+0x302>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
9000b074:	682b      	ldr	r3, [r5, #0]
9000b076:	05df      	lsls	r7, r3, #23
9000b078:	d4f7      	bmi.n	9000b06a <HAL_RCC_OscConfig+0x386>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
9000b07a:	6823      	ldr	r3, [r4, #0]
9000b07c:	e6a2      	b.n	9000adc4 <HAL_RCC_OscConfig+0xe0>
        __HAL_RCC_HSI_DISABLE();
9000b07e:	f023 0301 	bic.w	r3, r3, #1
9000b082:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
9000b084:	f7fb fe5e 	bl	90006d44 <HAL_GetTick>
9000b088:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
9000b08a:	e004      	b.n	9000b096 <HAL_RCC_OscConfig+0x3b2>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
9000b08c:	f7fb fe5a 	bl	90006d44 <HAL_GetTick>
9000b090:	1b80      	subs	r0, r0, r6
9000b092:	2802      	cmp	r0, #2
9000b094:	d8a7      	bhi.n	9000afe6 <HAL_RCC_OscConfig+0x302>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
9000b096:	682b      	ldr	r3, [r5, #0]
9000b098:	0758      	lsls	r0, r3, #29
9000b09a:	d4f7      	bmi.n	9000b08c <HAL_RCC_OscConfig+0x3a8>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
9000b09c:	6823      	ldr	r3, [r4, #0]
9000b09e:	e65b      	b.n	9000ad58 <HAL_RCC_OscConfig+0x74>
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
9000b0a0:	0790      	lsls	r0, r2, #30
9000b0a2:	f47f af1a 	bne.w	9000aeda <HAL_RCC_OscConfig+0x1f6>
9000b0a6:	e6e7      	b.n	9000ae78 <HAL_RCC_OscConfig+0x194>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
9000b0a8:	686b      	ldr	r3, [r5, #4]
9000b0aa:	6922      	ldr	r2, [r4, #16]
9000b0ac:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
9000b0b0:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
9000b0b4:	606b      	str	r3, [r5, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
9000b0b6:	6823      	ldr	r3, [r4, #0]
9000b0b8:	e64e      	b.n	9000ad58 <HAL_RCC_OscConfig+0x74>
    return HAL_ERROR;
9000b0ba:	2001      	movs	r0, #1
}
9000b0bc:	4770      	bx	lr
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
9000b0be:	4a62      	ldr	r2, [pc, #392]	; (9000b248 <HAL_RCC_OscConfig+0x564>)
9000b0c0:	6a21      	ldr	r1, [r4, #32]
9000b0c2:	68d3      	ldr	r3, [r2, #12]
9000b0c4:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
9000b0c8:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
9000b0cc:	60d3      	str	r3, [r2, #12]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
9000b0ce:	6823      	ldr	r3, [r4, #0]
9000b0d0:	e678      	b.n	9000adc4 <HAL_RCC_OscConfig+0xe0>
        tickstart = HAL_GetTick();
9000b0d2:	f7fb fe37 	bl	90006d44 <HAL_GetTick>
9000b0d6:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
9000b0d8:	e004      	b.n	9000b0e4 <HAL_RCC_OscConfig+0x400>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
9000b0da:	f7fb fe33 	bl	90006d44 <HAL_GetTick>
9000b0de:	1b80      	subs	r0, r0, r6
9000b0e0:	2802      	cmp	r0, #2
9000b0e2:	d880      	bhi.n	9000afe6 <HAL_RCC_OscConfig+0x302>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
9000b0e4:	682b      	ldr	r3, [r5, #0]
9000b0e6:	0199      	lsls	r1, r3, #6
9000b0e8:	d4f7      	bmi.n	9000b0da <HAL_RCC_OscConfig+0x3f6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
9000b0ea:	6aa9      	ldr	r1, [r5, #40]	; 0x28
9000b0ec:	4b57      	ldr	r3, [pc, #348]	; (9000b24c <HAL_RCC_OscConfig+0x568>)
9000b0ee:	6aa2      	ldr	r2, [r4, #40]	; 0x28
9000b0f0:	400b      	ands	r3, r1
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
9000b0f2:	4957      	ldr	r1, [pc, #348]	; (9000b250 <HAL_RCC_OscConfig+0x56c>)
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
9000b0f4:	4e54      	ldr	r6, [pc, #336]	; (9000b248 <HAL_RCC_OscConfig+0x564>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
9000b0f6:	4313      	orrs	r3, r2
9000b0f8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
9000b0fa:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
9000b0fe:	62ab      	str	r3, [r5, #40]	; 0x28
9000b100:	e9d4 320d 	ldrd	r3, r2, [r4, #52]	; 0x34
9000b104:	3b01      	subs	r3, #1
9000b106:	3a01      	subs	r2, #1
9000b108:	025b      	lsls	r3, r3, #9
9000b10a:	0412      	lsls	r2, r2, #16
9000b10c:	b29b      	uxth	r3, r3
9000b10e:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
9000b112:	4313      	orrs	r3, r2
9000b114:	6b22      	ldr	r2, [r4, #48]	; 0x30
9000b116:	3a01      	subs	r2, #1
9000b118:	f3c2 0208 	ubfx	r2, r2, #0, #9
9000b11c:	4313      	orrs	r3, r2
9000b11e:	6be2      	ldr	r2, [r4, #60]	; 0x3c
9000b120:	3a01      	subs	r2, #1
9000b122:	0612      	lsls	r2, r2, #24
9000b124:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
9000b128:	4313      	orrs	r3, r2
9000b12a:	632b      	str	r3, [r5, #48]	; 0x30
        __HAL_RCC_PLLFRACN_DISABLE();
9000b12c:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
9000b12e:	f023 0301 	bic.w	r3, r3, #1
9000b132:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
9000b134:	6b6a      	ldr	r2, [r5, #52]	; 0x34
9000b136:	6ca3      	ldr	r3, [r4, #72]	; 0x48
9000b138:	4011      	ands	r1, r2
9000b13a:	ea41 01c3 	orr.w	r1, r1, r3, lsl #3
9000b13e:	6369      	str	r1, [r5, #52]	; 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
9000b140:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
9000b142:	6c22      	ldr	r2, [r4, #64]	; 0x40
9000b144:	f023 030c 	bic.w	r3, r3, #12
9000b148:	4313      	orrs	r3, r2
9000b14a:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
9000b14c:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
9000b14e:	6c62      	ldr	r2, [r4, #68]	; 0x44
9000b150:	f023 0302 	bic.w	r3, r3, #2
9000b154:	4313      	orrs	r3, r2
9000b156:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
9000b158:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
9000b15a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
9000b15e:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
9000b160:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
9000b162:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
9000b166:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
9000b168:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
9000b16a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
9000b16e:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLFRACN_ENABLE();
9000b170:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
9000b172:	f043 0301 	orr.w	r3, r3, #1
9000b176:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_ENABLE();
9000b178:	682b      	ldr	r3, [r5, #0]
9000b17a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
9000b17e:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
9000b180:	f7fb fde0 	bl	90006d44 <HAL_GetTick>
9000b184:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
9000b186:	e005      	b.n	9000b194 <HAL_RCC_OscConfig+0x4b0>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
9000b188:	f7fb fddc 	bl	90006d44 <HAL_GetTick>
9000b18c:	1b00      	subs	r0, r0, r4
9000b18e:	2802      	cmp	r0, #2
9000b190:	f63f af29 	bhi.w	9000afe6 <HAL_RCC_OscConfig+0x302>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
9000b194:	6833      	ldr	r3, [r6, #0]
9000b196:	019a      	lsls	r2, r3, #6
9000b198:	d5f6      	bpl.n	9000b188 <HAL_RCC_OscConfig+0x4a4>
9000b19a:	e665      	b.n	9000ae68 <HAL_RCC_OscConfig+0x184>
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
9000b19c:	2801      	cmp	r0, #1
      temp1_pllckcfg = RCC->PLLCKSELR;
9000b19e:	6aaa      	ldr	r2, [r5, #40]	; 0x28
      temp2_pllckcfg = RCC->PLL1DIVR;
9000b1a0:	6b2e      	ldr	r6, [r5, #48]	; 0x30
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
9000b1a2:	f43f ae62 	beq.w	9000ae6a <HAL_RCC_OscConfig+0x186>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
9000b1a6:	f002 0303 	and.w	r3, r2, #3
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
9000b1aa:	6aa1      	ldr	r1, [r4, #40]	; 0x28
9000b1ac:	428b      	cmp	r3, r1
9000b1ae:	f47f aeb9 	bne.w	9000af24 <HAL_RCC_OscConfig+0x240>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
9000b1b2:	f3c2 1205 	ubfx	r2, r2, #4, #6
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
9000b1b6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
9000b1b8:	429a      	cmp	r2, r3
9000b1ba:	f47f aeb3 	bne.w	9000af24 <HAL_RCC_OscConfig+0x240>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
9000b1be:	6b23      	ldr	r3, [r4, #48]	; 0x30
9000b1c0:	f3c6 0208 	ubfx	r2, r6, #0, #9
9000b1c4:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
9000b1c6:	429a      	cmp	r2, r3
9000b1c8:	f47f aeac 	bne.w	9000af24 <HAL_RCC_OscConfig+0x240>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
9000b1cc:	6b63      	ldr	r3, [r4, #52]	; 0x34
9000b1ce:	f3c6 2246 	ubfx	r2, r6, #9, #7
9000b1d2:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
9000b1d4:	429a      	cmp	r2, r3
9000b1d6:	f47f aea5 	bne.w	9000af24 <HAL_RCC_OscConfig+0x240>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
9000b1da:	6ba3      	ldr	r3, [r4, #56]	; 0x38
9000b1dc:	f3c6 4206 	ubfx	r2, r6, #16, #7
9000b1e0:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
9000b1e2:	429a      	cmp	r2, r3
9000b1e4:	f47f ae9e 	bne.w	9000af24 <HAL_RCC_OscConfig+0x240>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
9000b1e8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
9000b1ea:	f3c6 6606 	ubfx	r6, r6, #24, #7
9000b1ee:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
9000b1f0:	429e      	cmp	r6, r3
9000b1f2:	f47f ae97 	bne.w	9000af24 <HAL_RCC_OscConfig+0x240>
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
9000b1f6:	6b6b      	ldr	r3, [r5, #52]	; 0x34
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
9000b1f8:	6ca2      	ldr	r2, [r4, #72]	; 0x48
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
9000b1fa:	f3c3 03cc 	ubfx	r3, r3, #3, #13
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
9000b1fe:	429a      	cmp	r2, r3
9000b200:	f43f ae32 	beq.w	9000ae68 <HAL_RCC_OscConfig+0x184>
          __HAL_RCC_PLLFRACN_DISABLE();
9000b204:	4a10      	ldr	r2, [pc, #64]	; (9000b248 <HAL_RCC_OscConfig+0x564>)
9000b206:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
9000b208:	f023 0301 	bic.w	r3, r3, #1
9000b20c:	62d3      	str	r3, [r2, #44]	; 0x2c
          tickstart = HAL_GetTick();
9000b20e:	f7fb fd99 	bl	90006d44 <HAL_GetTick>
9000b212:	4605      	mov	r5, r0
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
9000b214:	f7fb fd96 	bl	90006d44 <HAL_GetTick>
9000b218:	42a8      	cmp	r0, r5
9000b21a:	d0fb      	beq.n	9000b214 <HAL_RCC_OscConfig+0x530>
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
9000b21c:	4a0a      	ldr	r2, [pc, #40]	; (9000b248 <HAL_RCC_OscConfig+0x564>)
  return HAL_OK;
9000b21e:	2000      	movs	r0, #0
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
9000b220:	6ca1      	ldr	r1, [r4, #72]	; 0x48
9000b222:	4b0b      	ldr	r3, [pc, #44]	; (9000b250 <HAL_RCC_OscConfig+0x56c>)
9000b224:	6b54      	ldr	r4, [r2, #52]	; 0x34
9000b226:	4023      	ands	r3, r4
9000b228:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
9000b22c:	6353      	str	r3, [r2, #52]	; 0x34
          __HAL_RCC_PLLFRACN_ENABLE();
9000b22e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
9000b230:	f043 0301 	orr.w	r3, r3, #1
9000b234:	62d3      	str	r3, [r2, #44]	; 0x2c
}
9000b236:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
9000b238:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
9000b23c:	601a      	str	r2, [r3, #0]
9000b23e:	681a      	ldr	r2, [r3, #0]
9000b240:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
9000b244:	601a      	str	r2, [r3, #0]
9000b246:	e575      	b.n	9000ad34 <HAL_RCC_OscConfig+0x50>
9000b248:	58024400 	.word	0x58024400
9000b24c:	fffffc0c 	.word	0xfffffc0c
9000b250:	ffff0007 	.word	0xffff0007
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
9000b254:	4d1c      	ldr	r5, [pc, #112]	; (9000b2c8 <HAL_RCC_OscConfig+0x5e4>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
9000b256:	f241 3788 	movw	r7, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
9000b25a:	6f2b      	ldr	r3, [r5, #112]	; 0x70
9000b25c:	f023 0301 	bic.w	r3, r3, #1
9000b260:	672b      	str	r3, [r5, #112]	; 0x70
9000b262:	6f2b      	ldr	r3, [r5, #112]	; 0x70
9000b264:	f023 0304 	bic.w	r3, r3, #4
9000b268:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
9000b26a:	f7fb fd6b 	bl	90006d44 <HAL_GetTick>
9000b26e:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
9000b270:	e005      	b.n	9000b27e <HAL_RCC_OscConfig+0x59a>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
9000b272:	f7fb fd67 	bl	90006d44 <HAL_GetTick>
9000b276:	1b80      	subs	r0, r0, r6
9000b278:	42b8      	cmp	r0, r7
9000b27a:	f63f aeb4 	bhi.w	9000afe6 <HAL_RCC_OscConfig+0x302>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
9000b27e:	6f2b      	ldr	r3, [r5, #112]	; 0x70
9000b280:	0798      	lsls	r0, r3, #30
9000b282:	d4f6      	bmi.n	9000b272 <HAL_RCC_OscConfig+0x58e>
9000b284:	e5d3      	b.n	9000ae2e <HAL_RCC_OscConfig+0x14a>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
9000b286:	68eb      	ldr	r3, [r5, #12]
9000b288:	6a22      	ldr	r2, [r4, #32]
9000b28a:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
9000b28e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
9000b292:	60eb      	str	r3, [r5, #12]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
9000b294:	6823      	ldr	r3, [r4, #0]
9000b296:	e595      	b.n	9000adc4 <HAL_RCC_OscConfig+0xe0>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
9000b298:	4a0b      	ldr	r2, [pc, #44]	; (9000b2c8 <HAL_RCC_OscConfig+0x5e4>)
9000b29a:	6f13      	ldr	r3, [r2, #112]	; 0x70
9000b29c:	f043 0301 	orr.w	r3, r3, #1
9000b2a0:	6713      	str	r3, [r2, #112]	; 0x70
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
9000b2a2:	e690      	b.n	9000afc6 <HAL_RCC_OscConfig+0x2e2>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
9000b2a4:	4a08      	ldr	r2, [pc, #32]	; (9000b2c8 <HAL_RCC_OscConfig+0x5e4>)
9000b2a6:	6853      	ldr	r3, [r2, #4]
9000b2a8:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
9000b2ac:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
9000b2b0:	6053      	str	r3, [r2, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
9000b2b2:	6823      	ldr	r3, [r4, #0]
9000b2b4:	e586      	b.n	9000adc4 <HAL_RCC_OscConfig+0xe0>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
9000b2b6:	f042 0204 	orr.w	r2, r2, #4
9000b2ba:	671a      	str	r2, [r3, #112]	; 0x70
9000b2bc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
9000b2be:	f042 0201 	orr.w	r2, r2, #1
9000b2c2:	671a      	str	r2, [r3, #112]	; 0x70
9000b2c4:	e67f      	b.n	9000afc6 <HAL_RCC_OscConfig+0x2e2>
9000b2c6:	bf00      	nop
9000b2c8:	58024400 	.word	0x58024400

9000b2cc <HAL_RCC_GetSysClockFreq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
9000b2cc:	4a47      	ldr	r2, [pc, #284]	; (9000b3ec <HAL_RCC_GetSysClockFreq+0x120>)
9000b2ce:	6913      	ldr	r3, [r2, #16]
9000b2d0:	f003 0338 	and.w	r3, r3, #56	; 0x38
9000b2d4:	2b10      	cmp	r3, #16
9000b2d6:	d004      	beq.n	9000b2e2 <HAL_RCC_GetSysClockFreq+0x16>
9000b2d8:	2b18      	cmp	r3, #24
9000b2da:	d00d      	beq.n	9000b2f8 <HAL_RCC_GetSysClockFreq+0x2c>
9000b2dc:	b11b      	cbz	r3, 9000b2e6 <HAL_RCC_GetSysClockFreq+0x1a>
      sysclockfreq = CSI_VALUE;
9000b2de:	4844      	ldr	r0, [pc, #272]	; (9000b3f0 <HAL_RCC_GetSysClockFreq+0x124>)
9000b2e0:	4770      	bx	lr
  switch (RCC->CFGR & RCC_CFGR_SWS)
9000b2e2:	4844      	ldr	r0, [pc, #272]	; (9000b3f4 <HAL_RCC_GetSysClockFreq+0x128>)
9000b2e4:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
9000b2e6:	6813      	ldr	r3, [r2, #0]
9000b2e8:	0699      	lsls	r1, r3, #26
9000b2ea:	d54a      	bpl.n	9000b382 <HAL_RCC_GetSysClockFreq+0xb6>
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
9000b2ec:	6813      	ldr	r3, [r2, #0]
9000b2ee:	4842      	ldr	r0, [pc, #264]	; (9000b3f8 <HAL_RCC_GetSysClockFreq+0x12c>)
9000b2f0:	f3c3 03c1 	ubfx	r3, r3, #3, #2
9000b2f4:	40d8      	lsrs	r0, r3
9000b2f6:	4770      	bx	lr
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
9000b2f8:	6a93      	ldr	r3, [r2, #40]	; 0x28
{
9000b2fa:	b430      	push	{r4, r5}
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
9000b2fc:	6a94      	ldr	r4, [r2, #40]	; 0x28
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
9000b2fe:	6ad5      	ldr	r5, [r2, #44]	; 0x2c
      if (pllm != 0U)
9000b300:	f414 7f7c 	tst.w	r4, #1008	; 0x3f0
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
9000b304:	6b51      	ldr	r1, [r2, #52]	; 0x34
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
9000b306:	f3c4 1005 	ubfx	r0, r4, #4, #6
      if (pllm != 0U)
9000b30a:	d038      	beq.n	9000b37e <HAL_RCC_GetSysClockFreq+0xb2>
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
9000b30c:	f3c1 01cc 	ubfx	r1, r1, #3, #13
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
9000b310:	f005 0501 	and.w	r5, r5, #1
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
9000b314:	f003 0303 	and.w	r3, r3, #3
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
9000b318:	fb05 f101 	mul.w	r1, r5, r1
9000b31c:	2b01      	cmp	r3, #1
9000b31e:	ee07 1a90 	vmov	s15, r1
9000b322:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
        switch (pllsource)
9000b326:	d002      	beq.n	9000b32e <HAL_RCC_GetSysClockFreq+0x62>
9000b328:	2b02      	cmp	r3, #2
9000b32a:	d02c      	beq.n	9000b386 <HAL_RCC_GetSysClockFreq+0xba>
9000b32c:	b393      	cbz	r3, 9000b394 <HAL_RCC_GetSysClockFreq+0xc8>
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
9000b32e:	ee07 0a90 	vmov	s15, r0
9000b332:	ed9f 5a32 	vldr	s10, [pc, #200]	; 9000b3fc <HAL_RCC_GetSysClockFreq+0x130>
9000b336:	eef8 7ae7 	vcvt.f32.s32	s15, s15
9000b33a:	6b13      	ldr	r3, [r2, #48]	; 0x30
9000b33c:	eec5 6a27 	vdiv.f32	s13, s10, s15
9000b340:	eddf 5a2f 	vldr	s11, [pc, #188]	; 9000b400 <HAL_RCC_GetSysClockFreq+0x134>
9000b344:	f3c3 0308 	ubfx	r3, r3, #0, #9
9000b348:	ee07 3a90 	vmov	s15, r3
9000b34c:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
9000b350:	eef8 7ae7 	vcvt.f32.s32	s15, s15
9000b354:	eee7 7a25 	vfma.f32	s15, s14, s11
9000b358:	ee77 7a86 	vadd.f32	s15, s15, s12
9000b35c:	ee66 6aa7 	vmul.f32	s13, s13, s15
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
9000b360:	4b22      	ldr	r3, [pc, #136]	; (9000b3ec <HAL_RCC_GetSysClockFreq+0x120>)
9000b362:	6b1b      	ldr	r3, [r3, #48]	; 0x30
9000b364:	f3c3 2346 	ubfx	r3, r3, #9, #7
9000b368:	3301      	adds	r3, #1
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
9000b36a:	ee07 3a90 	vmov	s15, r3
9000b36e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
9000b372:	eec6 7a87 	vdiv.f32	s15, s13, s14
9000b376:	eefc 7ae7 	vcvt.u32.f32	s15, s15
9000b37a:	ee17 0a90 	vmov	r0, s15
}
9000b37e:	bc30      	pop	{r4, r5}
9000b380:	4770      	bx	lr
        sysclockfreq = (uint32_t) HSI_VALUE;
9000b382:	481d      	ldr	r0, [pc, #116]	; (9000b3f8 <HAL_RCC_GetSysClockFreq+0x12c>)
}
9000b384:	4770      	bx	lr
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
9000b386:	ee07 0a90 	vmov	s15, r0
9000b38a:	ed9f 5a1e 	vldr	s10, [pc, #120]	; 9000b404 <HAL_RCC_GetSysClockFreq+0x138>
9000b38e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
9000b392:	e7d2      	b.n	9000b33a <HAL_RCC_GetSysClockFreq+0x6e>
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
9000b394:	6813      	ldr	r3, [r2, #0]
9000b396:	069b      	lsls	r3, r3, #26
9000b398:	d520      	bpl.n	9000b3dc <HAL_RCC_GetSysClockFreq+0x110>
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
9000b39a:	6814      	ldr	r4, [r2, #0]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
9000b39c:	ee07 0a90 	vmov	s15, r0
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
9000b3a0:	4915      	ldr	r1, [pc, #84]	; (9000b3f8 <HAL_RCC_GetSysClockFreq+0x12c>)
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
9000b3a2:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
9000b3a6:	6b13      	ldr	r3, [r2, #48]	; 0x30
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
9000b3a8:	f3c4 04c1 	ubfx	r4, r4, #3, #2
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
9000b3ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
9000b3b0:	ed9f 5a13 	vldr	s10, [pc, #76]	; 9000b400 <HAL_RCC_GetSysClockFreq+0x134>
9000b3b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
9000b3b8:	40e1      	lsrs	r1, r4
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
9000b3ba:	ee06 3a90 	vmov	s13, r3
9000b3be:	ee06 1a10 	vmov	s12, r1
9000b3c2:	eef8 6ae6 	vcvt.f32.s32	s13, s13
9000b3c6:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
9000b3ca:	eee7 6a05 	vfma.f32	s13, s14, s10
9000b3ce:	ee86 7a27 	vdiv.f32	s14, s12, s15
9000b3d2:	ee76 6aa5 	vadd.f32	s13, s13, s11
9000b3d6:	ee66 6a87 	vmul.f32	s13, s13, s14
9000b3da:	e7c1      	b.n	9000b360 <HAL_RCC_GetSysClockFreq+0x94>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
9000b3dc:	ee07 0a90 	vmov	s15, r0
9000b3e0:	ed9f 5a09 	vldr	s10, [pc, #36]	; 9000b408 <HAL_RCC_GetSysClockFreq+0x13c>
9000b3e4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
9000b3e8:	e7a7      	b.n	9000b33a <HAL_RCC_GetSysClockFreq+0x6e>
9000b3ea:	bf00      	nop
9000b3ec:	58024400 	.word	0x58024400
9000b3f0:	003d0900 	.word	0x003d0900
9000b3f4:	017d7840 	.word	0x017d7840
9000b3f8:	03d09000 	.word	0x03d09000
9000b3fc:	4a742400 	.word	0x4a742400
9000b400:	39000000 	.word	0x39000000
9000b404:	4bbebc20 	.word	0x4bbebc20
9000b408:	4c742400 	.word	0x4c742400

9000b40c <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
9000b40c:	2800      	cmp	r0, #0
9000b40e:	f000 810c 	beq.w	9000b62a <HAL_RCC_ClockConfig+0x21e>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
9000b412:	4a8c      	ldr	r2, [pc, #560]	; (9000b644 <HAL_RCC_ClockConfig+0x238>)
9000b414:	6813      	ldr	r3, [r2, #0]
9000b416:	f003 030f 	and.w	r3, r3, #15
9000b41a:	428b      	cmp	r3, r1
{
9000b41c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
9000b420:	4604      	mov	r4, r0
9000b422:	460d      	mov	r5, r1
  if (FLatency > __HAL_FLASH_GET_LATENCY())
9000b424:	d20c      	bcs.n	9000b440 <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
9000b426:	6813      	ldr	r3, [r2, #0]
9000b428:	f023 030f 	bic.w	r3, r3, #15
9000b42c:	430b      	orrs	r3, r1
9000b42e:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
9000b430:	6813      	ldr	r3, [r2, #0]
9000b432:	f003 030f 	and.w	r3, r3, #15
9000b436:	428b      	cmp	r3, r1
9000b438:	d002      	beq.n	9000b440 <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
9000b43a:	2001      	movs	r0, #1
}
9000b43c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
9000b440:	6823      	ldr	r3, [r4, #0]
9000b442:	075f      	lsls	r7, r3, #29
9000b444:	d50b      	bpl.n	9000b45e <HAL_RCC_ClockConfig+0x52>
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
9000b446:	4980      	ldr	r1, [pc, #512]	; (9000b648 <HAL_RCC_ClockConfig+0x23c>)
9000b448:	6920      	ldr	r0, [r4, #16]
9000b44a:	698a      	ldr	r2, [r1, #24]
9000b44c:	f002 0270 	and.w	r2, r2, #112	; 0x70
9000b450:	4290      	cmp	r0, r2
9000b452:	d904      	bls.n	9000b45e <HAL_RCC_ClockConfig+0x52>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
9000b454:	698a      	ldr	r2, [r1, #24]
9000b456:	f022 0270 	bic.w	r2, r2, #112	; 0x70
9000b45a:	4302      	orrs	r2, r0
9000b45c:	618a      	str	r2, [r1, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
9000b45e:	071e      	lsls	r6, r3, #28
9000b460:	d50b      	bpl.n	9000b47a <HAL_RCC_ClockConfig+0x6e>
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
9000b462:	4979      	ldr	r1, [pc, #484]	; (9000b648 <HAL_RCC_ClockConfig+0x23c>)
9000b464:	6960      	ldr	r0, [r4, #20]
9000b466:	69ca      	ldr	r2, [r1, #28]
9000b468:	f002 0270 	and.w	r2, r2, #112	; 0x70
9000b46c:	4290      	cmp	r0, r2
9000b46e:	d904      	bls.n	9000b47a <HAL_RCC_ClockConfig+0x6e>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
9000b470:	69ca      	ldr	r2, [r1, #28]
9000b472:	f022 0270 	bic.w	r2, r2, #112	; 0x70
9000b476:	4302      	orrs	r2, r0
9000b478:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
9000b47a:	06d8      	lsls	r0, r3, #27
9000b47c:	d50b      	bpl.n	9000b496 <HAL_RCC_ClockConfig+0x8a>
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
9000b47e:	4972      	ldr	r1, [pc, #456]	; (9000b648 <HAL_RCC_ClockConfig+0x23c>)
9000b480:	69a0      	ldr	r0, [r4, #24]
9000b482:	69ca      	ldr	r2, [r1, #28]
9000b484:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
9000b488:	4290      	cmp	r0, r2
9000b48a:	d904      	bls.n	9000b496 <HAL_RCC_ClockConfig+0x8a>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
9000b48c:	69ca      	ldr	r2, [r1, #28]
9000b48e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
9000b492:	4302      	orrs	r2, r0
9000b494:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
9000b496:	0699      	lsls	r1, r3, #26
9000b498:	d50b      	bpl.n	9000b4b2 <HAL_RCC_ClockConfig+0xa6>
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
9000b49a:	496b      	ldr	r1, [pc, #428]	; (9000b648 <HAL_RCC_ClockConfig+0x23c>)
9000b49c:	69e0      	ldr	r0, [r4, #28]
9000b49e:	6a0a      	ldr	r2, [r1, #32]
9000b4a0:	f002 0270 	and.w	r2, r2, #112	; 0x70
9000b4a4:	4290      	cmp	r0, r2
9000b4a6:	d904      	bls.n	9000b4b2 <HAL_RCC_ClockConfig+0xa6>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
9000b4a8:	6a0a      	ldr	r2, [r1, #32]
9000b4aa:	f022 0270 	bic.w	r2, r2, #112	; 0x70
9000b4ae:	4302      	orrs	r2, r0
9000b4b0:	620a      	str	r2, [r1, #32]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
9000b4b2:	079a      	lsls	r2, r3, #30
9000b4b4:	f140 80ab 	bpl.w	9000b60e <HAL_RCC_ClockConfig+0x202>
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
9000b4b8:	4863      	ldr	r0, [pc, #396]	; (9000b648 <HAL_RCC_ClockConfig+0x23c>)
9000b4ba:	68e1      	ldr	r1, [r4, #12]
9000b4bc:	6982      	ldr	r2, [r0, #24]
9000b4be:	f002 020f 	and.w	r2, r2, #15
9000b4c2:	4291      	cmp	r1, r2
9000b4c4:	d904      	bls.n	9000b4d0 <HAL_RCC_ClockConfig+0xc4>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
9000b4c6:	6982      	ldr	r2, [r0, #24]
9000b4c8:	f022 020f 	bic.w	r2, r2, #15
9000b4cc:	430a      	orrs	r2, r1
9000b4ce:	6182      	str	r2, [r0, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
9000b4d0:	07d8      	lsls	r0, r3, #31
9000b4d2:	d530      	bpl.n	9000b536 <HAL_RCC_ClockConfig+0x12a>
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
9000b4d4:	4a5c      	ldr	r2, [pc, #368]	; (9000b648 <HAL_RCC_ClockConfig+0x23c>)
9000b4d6:	68a1      	ldr	r1, [r4, #8]
9000b4d8:	6993      	ldr	r3, [r2, #24]
9000b4da:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
9000b4de:	430b      	orrs	r3, r1
9000b4e0:	6193      	str	r3, [r2, #24]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
9000b4e2:	6861      	ldr	r1, [r4, #4]
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
9000b4e4:	6813      	ldr	r3, [r2, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
9000b4e6:	2902      	cmp	r1, #2
9000b4e8:	f000 80a1 	beq.w	9000b62e <HAL_RCC_ClockConfig+0x222>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
9000b4ec:	2903      	cmp	r1, #3
9000b4ee:	f000 8098 	beq.w	9000b622 <HAL_RCC_ClockConfig+0x216>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
9000b4f2:	2901      	cmp	r1, #1
9000b4f4:	f000 80a1 	beq.w	9000b63a <HAL_RCC_ClockConfig+0x22e>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
9000b4f8:	0758      	lsls	r0, r3, #29
9000b4fa:	d59e      	bpl.n	9000b43a <HAL_RCC_ClockConfig+0x2e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
9000b4fc:	4e52      	ldr	r6, [pc, #328]	; (9000b648 <HAL_RCC_ClockConfig+0x23c>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
9000b4fe:	f241 3888 	movw	r8, #5000	; 0x1388
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
9000b502:	6933      	ldr	r3, [r6, #16]
9000b504:	f023 0307 	bic.w	r3, r3, #7
9000b508:	430b      	orrs	r3, r1
9000b50a:	6133      	str	r3, [r6, #16]
    tickstart = HAL_GetTick();
9000b50c:	f7fb fc1a 	bl	90006d44 <HAL_GetTick>
9000b510:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
9000b512:	e005      	b.n	9000b520 <HAL_RCC_ClockConfig+0x114>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
9000b514:	f7fb fc16 	bl	90006d44 <HAL_GetTick>
9000b518:	1bc0      	subs	r0, r0, r7
9000b51a:	4540      	cmp	r0, r8
9000b51c:	f200 808b 	bhi.w	9000b636 <HAL_RCC_ClockConfig+0x22a>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
9000b520:	6933      	ldr	r3, [r6, #16]
9000b522:	6862      	ldr	r2, [r4, #4]
9000b524:	f003 0338 	and.w	r3, r3, #56	; 0x38
9000b528:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
9000b52c:	d1f2      	bne.n	9000b514 <HAL_RCC_ClockConfig+0x108>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
9000b52e:	6823      	ldr	r3, [r4, #0]
9000b530:	0799      	lsls	r1, r3, #30
9000b532:	d506      	bpl.n	9000b542 <HAL_RCC_ClockConfig+0x136>
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
9000b534:	68e1      	ldr	r1, [r4, #12]
9000b536:	4844      	ldr	r0, [pc, #272]	; (9000b648 <HAL_RCC_ClockConfig+0x23c>)
9000b538:	6982      	ldr	r2, [r0, #24]
9000b53a:	f002 020f 	and.w	r2, r2, #15
9000b53e:	428a      	cmp	r2, r1
9000b540:	d869      	bhi.n	9000b616 <HAL_RCC_ClockConfig+0x20a>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
9000b542:	4940      	ldr	r1, [pc, #256]	; (9000b644 <HAL_RCC_ClockConfig+0x238>)
9000b544:	680a      	ldr	r2, [r1, #0]
9000b546:	f002 020f 	and.w	r2, r2, #15
9000b54a:	42aa      	cmp	r2, r5
9000b54c:	d90a      	bls.n	9000b564 <HAL_RCC_ClockConfig+0x158>
    __HAL_FLASH_SET_LATENCY(FLatency);
9000b54e:	680a      	ldr	r2, [r1, #0]
9000b550:	f022 020f 	bic.w	r2, r2, #15
9000b554:	432a      	orrs	r2, r5
9000b556:	600a      	str	r2, [r1, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
9000b558:	680a      	ldr	r2, [r1, #0]
9000b55a:	f002 020f 	and.w	r2, r2, #15
9000b55e:	42aa      	cmp	r2, r5
9000b560:	f47f af6b 	bne.w	9000b43a <HAL_RCC_ClockConfig+0x2e>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
9000b564:	075a      	lsls	r2, r3, #29
9000b566:	d50b      	bpl.n	9000b580 <HAL_RCC_ClockConfig+0x174>
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
9000b568:	4937      	ldr	r1, [pc, #220]	; (9000b648 <HAL_RCC_ClockConfig+0x23c>)
9000b56a:	6920      	ldr	r0, [r4, #16]
9000b56c:	698a      	ldr	r2, [r1, #24]
9000b56e:	f002 0270 	and.w	r2, r2, #112	; 0x70
9000b572:	4290      	cmp	r0, r2
9000b574:	d204      	bcs.n	9000b580 <HAL_RCC_ClockConfig+0x174>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
9000b576:	698a      	ldr	r2, [r1, #24]
9000b578:	f022 0270 	bic.w	r2, r2, #112	; 0x70
9000b57c:	4302      	orrs	r2, r0
9000b57e:	618a      	str	r2, [r1, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
9000b580:	071f      	lsls	r7, r3, #28
9000b582:	d50b      	bpl.n	9000b59c <HAL_RCC_ClockConfig+0x190>
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
9000b584:	4930      	ldr	r1, [pc, #192]	; (9000b648 <HAL_RCC_ClockConfig+0x23c>)
9000b586:	6960      	ldr	r0, [r4, #20]
9000b588:	69ca      	ldr	r2, [r1, #28]
9000b58a:	f002 0270 	and.w	r2, r2, #112	; 0x70
9000b58e:	4290      	cmp	r0, r2
9000b590:	d204      	bcs.n	9000b59c <HAL_RCC_ClockConfig+0x190>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
9000b592:	69ca      	ldr	r2, [r1, #28]
9000b594:	f022 0270 	bic.w	r2, r2, #112	; 0x70
9000b598:	4302      	orrs	r2, r0
9000b59a:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
9000b59c:	06de      	lsls	r6, r3, #27
9000b59e:	d50b      	bpl.n	9000b5b8 <HAL_RCC_ClockConfig+0x1ac>
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
9000b5a0:	4929      	ldr	r1, [pc, #164]	; (9000b648 <HAL_RCC_ClockConfig+0x23c>)
9000b5a2:	69a0      	ldr	r0, [r4, #24]
9000b5a4:	69ca      	ldr	r2, [r1, #28]
9000b5a6:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
9000b5aa:	4290      	cmp	r0, r2
9000b5ac:	d204      	bcs.n	9000b5b8 <HAL_RCC_ClockConfig+0x1ac>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
9000b5ae:	69ca      	ldr	r2, [r1, #28]
9000b5b0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
9000b5b4:	4302      	orrs	r2, r0
9000b5b6:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
9000b5b8:	069d      	lsls	r5, r3, #26
9000b5ba:	d50b      	bpl.n	9000b5d4 <HAL_RCC_ClockConfig+0x1c8>
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
9000b5bc:	4a22      	ldr	r2, [pc, #136]	; (9000b648 <HAL_RCC_ClockConfig+0x23c>)
9000b5be:	69e1      	ldr	r1, [r4, #28]
9000b5c0:	6a13      	ldr	r3, [r2, #32]
9000b5c2:	f003 0370 	and.w	r3, r3, #112	; 0x70
9000b5c6:	4299      	cmp	r1, r3
9000b5c8:	d204      	bcs.n	9000b5d4 <HAL_RCC_ClockConfig+0x1c8>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
9000b5ca:	6a13      	ldr	r3, [r2, #32]
9000b5cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
9000b5d0:	430b      	orrs	r3, r1
9000b5d2:	6213      	str	r3, [r2, #32]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
9000b5d4:	f7ff fe7a 	bl	9000b2cc <HAL_RCC_GetSysClockFreq>
9000b5d8:	4a1b      	ldr	r2, [pc, #108]	; (9000b648 <HAL_RCC_ClockConfig+0x23c>)
9000b5da:	4603      	mov	r3, r0
9000b5dc:	481b      	ldr	r0, [pc, #108]	; (9000b64c <HAL_RCC_ClockConfig+0x240>)
9000b5de:	6991      	ldr	r1, [r2, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
9000b5e0:	6992      	ldr	r2, [r2, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
9000b5e2:	f3c1 2103 	ubfx	r1, r1, #8, #4
  SystemCoreClock = common_system_clock;
9000b5e6:	4d1a      	ldr	r5, [pc, #104]	; (9000b650 <HAL_RCC_ClockConfig+0x244>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
9000b5e8:	f002 020f 	and.w	r2, r2, #15
9000b5ec:	4c19      	ldr	r4, [pc, #100]	; (9000b654 <HAL_RCC_ClockConfig+0x248>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
9000b5ee:	5c41      	ldrb	r1, [r0, r1]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
9000b5f0:	5c82      	ldrb	r2, [r0, r2]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
9000b5f2:	f001 011f 	and.w	r1, r1, #31
  halstatus = HAL_InitTick(uwTickPrio);
9000b5f6:	4818      	ldr	r0, [pc, #96]	; (9000b658 <HAL_RCC_ClockConfig+0x24c>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
9000b5f8:	f002 021f 	and.w	r2, r2, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
9000b5fc:	40cb      	lsrs	r3, r1
  halstatus = HAL_InitTick(uwTickPrio);
9000b5fe:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = common_system_clock;
9000b600:	602b      	str	r3, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
9000b602:	40d3      	lsrs	r3, r2
9000b604:	6023      	str	r3, [r4, #0]
}
9000b606:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  halstatus = HAL_InitTick(uwTickPrio);
9000b60a:	f7f9 ba93 	b.w	90004b34 <HAL_InitTick>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
9000b60e:	07da      	lsls	r2, r3, #31
9000b610:	f53f af60 	bmi.w	9000b4d4 <HAL_RCC_ClockConfig+0xc8>
9000b614:	e795      	b.n	9000b542 <HAL_RCC_ClockConfig+0x136>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
9000b616:	6982      	ldr	r2, [r0, #24]
9000b618:	f022 020f 	bic.w	r2, r2, #15
9000b61c:	430a      	orrs	r2, r1
9000b61e:	6182      	str	r2, [r0, #24]
9000b620:	e78f      	b.n	9000b542 <HAL_RCC_ClockConfig+0x136>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
9000b622:	019f      	lsls	r7, r3, #6
9000b624:	f53f af6a 	bmi.w	9000b4fc <HAL_RCC_ClockConfig+0xf0>
9000b628:	e707      	b.n	9000b43a <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
9000b62a:	2001      	movs	r0, #1
}
9000b62c:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
9000b62e:	039b      	lsls	r3, r3, #14
9000b630:	f53f af64 	bmi.w	9000b4fc <HAL_RCC_ClockConfig+0xf0>
9000b634:	e701      	b.n	9000b43a <HAL_RCC_ClockConfig+0x2e>
        return HAL_TIMEOUT;
9000b636:	2003      	movs	r0, #3
9000b638:	e700      	b.n	9000b43c <HAL_RCC_ClockConfig+0x30>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
9000b63a:	05de      	lsls	r6, r3, #23
9000b63c:	f53f af5e 	bmi.w	9000b4fc <HAL_RCC_ClockConfig+0xf0>
9000b640:	e6fb      	b.n	9000b43a <HAL_RCC_ClockConfig+0x2e>
9000b642:	bf00      	nop
9000b644:	52002000 	.word	0x52002000
9000b648:	58024400 	.word	0x58024400
9000b64c:	90026504 	.word	0x90026504
9000b650:	24000054 	.word	0x24000054
9000b654:	24000058 	.word	0x24000058
9000b658:	24000060 	.word	0x24000060

9000b65c <HAL_RCC_GetHCLKFreq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
9000b65c:	4a18      	ldr	r2, [pc, #96]	; (9000b6c0 <HAL_RCC_GetHCLKFreq+0x64>)
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
9000b65e:	b538      	push	{r3, r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
9000b660:	6913      	ldr	r3, [r2, #16]
9000b662:	f003 0338 	and.w	r3, r3, #56	; 0x38
9000b666:	2b10      	cmp	r3, #16
9000b668:	d01a      	beq.n	9000b6a0 <HAL_RCC_GetHCLKFreq+0x44>
9000b66a:	2b18      	cmp	r3, #24
9000b66c:	d023      	beq.n	9000b6b6 <HAL_RCC_GetHCLKFreq+0x5a>
9000b66e:	b1cb      	cbz	r3, 9000b6a4 <HAL_RCC_GetHCLKFreq+0x48>
      sysclockfreq = CSI_VALUE;
9000b670:	4814      	ldr	r0, [pc, #80]	; (9000b6c4 <HAL_RCC_GetHCLKFreq+0x68>)
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
9000b672:	4b13      	ldr	r3, [pc, #76]	; (9000b6c0 <HAL_RCC_GetHCLKFreq+0x64>)
9000b674:	4914      	ldr	r1, [pc, #80]	; (9000b6c8 <HAL_RCC_GetHCLKFreq+0x6c>)
9000b676:	699a      	ldr	r2, [r3, #24]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
9000b678:	699b      	ldr	r3, [r3, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
9000b67a:	f3c2 2203 	ubfx	r2, r2, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
9000b67e:	4c13      	ldr	r4, [pc, #76]	; (9000b6cc <HAL_RCC_GetHCLKFreq+0x70>)
9000b680:	f003 030f 	and.w	r3, r3, #15
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
9000b684:	4d12      	ldr	r5, [pc, #72]	; (9000b6d0 <HAL_RCC_GetHCLKFreq+0x74>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
9000b686:	5c8a      	ldrb	r2, [r1, r2]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
9000b688:	5ccb      	ldrb	r3, [r1, r3]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
9000b68a:	f002 021f 	and.w	r2, r2, #31
9000b68e:	fa20 f202 	lsr.w	r2, r0, r2
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
9000b692:	f003 001f 	and.w	r0, r3, #31
9000b696:	fa22 f000 	lsr.w	r0, r2, r0
  SystemCoreClock = common_system_clock;
9000b69a:	602a      	str	r2, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
9000b69c:	6020      	str	r0, [r4, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
}
9000b69e:	bd38      	pop	{r3, r4, r5, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
9000b6a0:	480c      	ldr	r0, [pc, #48]	; (9000b6d4 <HAL_RCC_GetHCLKFreq+0x78>)
9000b6a2:	e7e6      	b.n	9000b672 <HAL_RCC_GetHCLKFreq+0x16>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
9000b6a4:	6813      	ldr	r3, [r2, #0]
9000b6a6:	069b      	lsls	r3, r3, #26
9000b6a8:	d508      	bpl.n	9000b6bc <HAL_RCC_GetHCLKFreq+0x60>
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
9000b6aa:	6813      	ldr	r3, [r2, #0]
9000b6ac:	480a      	ldr	r0, [pc, #40]	; (9000b6d8 <HAL_RCC_GetHCLKFreq+0x7c>)
9000b6ae:	f3c3 03c1 	ubfx	r3, r3, #3, #2
9000b6b2:	40d8      	lsrs	r0, r3
9000b6b4:	e7dd      	b.n	9000b672 <HAL_RCC_GetHCLKFreq+0x16>
9000b6b6:	f7ff fa91 	bl	9000abdc <HAL_RCC_GetSysClockFreq.part.0>
9000b6ba:	e7da      	b.n	9000b672 <HAL_RCC_GetHCLKFreq+0x16>
        sysclockfreq = (uint32_t) HSI_VALUE;
9000b6bc:	4806      	ldr	r0, [pc, #24]	; (9000b6d8 <HAL_RCC_GetHCLKFreq+0x7c>)
9000b6be:	e7d8      	b.n	9000b672 <HAL_RCC_GetHCLKFreq+0x16>
9000b6c0:	58024400 	.word	0x58024400
9000b6c4:	003d0900 	.word	0x003d0900
9000b6c8:	90026504 	.word	0x90026504
9000b6cc:	24000058 	.word	0x24000058
9000b6d0:	24000054 	.word	0x24000054
9000b6d4:	017d7840 	.word	0x017d7840
9000b6d8:	03d09000 	.word	0x03d09000

9000b6dc <HAL_RCC_GetPCLK1Freq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
9000b6dc:	4a1c      	ldr	r2, [pc, #112]	; (9000b750 <HAL_RCC_GetPCLK1Freq+0x74>)
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
9000b6de:	b538      	push	{r3, r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
9000b6e0:	6913      	ldr	r3, [r2, #16]
9000b6e2:	f003 0338 	and.w	r3, r3, #56	; 0x38
9000b6e6:	2b10      	cmp	r3, #16
9000b6e8:	d021      	beq.n	9000b72e <HAL_RCC_GetPCLK1Freq+0x52>
9000b6ea:	2b18      	cmp	r3, #24
9000b6ec:	d02a      	beq.n	9000b744 <HAL_RCC_GetPCLK1Freq+0x68>
9000b6ee:	b303      	cbz	r3, 9000b732 <HAL_RCC_GetPCLK1Freq+0x56>
      sysclockfreq = CSI_VALUE;
9000b6f0:	4818      	ldr	r0, [pc, #96]	; (9000b754 <HAL_RCC_GetPCLK1Freq+0x78>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
9000b6f2:	4a17      	ldr	r2, [pc, #92]	; (9000b750 <HAL_RCC_GetPCLK1Freq+0x74>)
9000b6f4:	4918      	ldr	r1, [pc, #96]	; (9000b758 <HAL_RCC_GetPCLK1Freq+0x7c>)
9000b6f6:	6993      	ldr	r3, [r2, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
9000b6f8:	4c18      	ldr	r4, [pc, #96]	; (9000b75c <HAL_RCC_GetPCLK1Freq+0x80>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
9000b6fa:	f3c3 2303 	ubfx	r3, r3, #8, #4
  SystemCoreClock = common_system_clock;
9000b6fe:	4d18      	ldr	r5, [pc, #96]	; (9000b760 <HAL_RCC_GetPCLK1Freq+0x84>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
9000b700:	5ccb      	ldrb	r3, [r1, r3]
9000b702:	f003 031f 	and.w	r3, r3, #31
9000b706:	40d8      	lsrs	r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
9000b708:	6993      	ldr	r3, [r2, #24]
9000b70a:	f003 030f 	and.w	r3, r3, #15
  SystemCoreClock = common_system_clock;
9000b70e:	6028      	str	r0, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
9000b710:	5ccb      	ldrb	r3, [r1, r3]
9000b712:	f003 031f 	and.w	r3, r3, #31
9000b716:	fa20 f303 	lsr.w	r3, r0, r3
9000b71a:	6023      	str	r3, [r4, #0]
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
9000b71c:	69d2      	ldr	r2, [r2, #28]
9000b71e:	f3c2 1202 	ubfx	r2, r2, #4, #3
9000b722:	5c88      	ldrb	r0, [r1, r2]
9000b724:	f000 001f 	and.w	r0, r0, #31
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
9000b728:	fa23 f000 	lsr.w	r0, r3, r0
9000b72c:	bd38      	pop	{r3, r4, r5, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
9000b72e:	480d      	ldr	r0, [pc, #52]	; (9000b764 <HAL_RCC_GetPCLK1Freq+0x88>)
9000b730:	e7df      	b.n	9000b6f2 <HAL_RCC_GetPCLK1Freq+0x16>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
9000b732:	6813      	ldr	r3, [r2, #0]
9000b734:	069b      	lsls	r3, r3, #26
9000b736:	d508      	bpl.n	9000b74a <HAL_RCC_GetPCLK1Freq+0x6e>
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
9000b738:	6813      	ldr	r3, [r2, #0]
9000b73a:	480b      	ldr	r0, [pc, #44]	; (9000b768 <HAL_RCC_GetPCLK1Freq+0x8c>)
9000b73c:	f3c3 03c1 	ubfx	r3, r3, #3, #2
9000b740:	40d8      	lsrs	r0, r3
9000b742:	e7d6      	b.n	9000b6f2 <HAL_RCC_GetPCLK1Freq+0x16>
9000b744:	f7ff fa4a 	bl	9000abdc <HAL_RCC_GetSysClockFreq.part.0>
9000b748:	e7d3      	b.n	9000b6f2 <HAL_RCC_GetPCLK1Freq+0x16>
        sysclockfreq = (uint32_t) HSI_VALUE;
9000b74a:	4807      	ldr	r0, [pc, #28]	; (9000b768 <HAL_RCC_GetPCLK1Freq+0x8c>)
9000b74c:	e7d1      	b.n	9000b6f2 <HAL_RCC_GetPCLK1Freq+0x16>
9000b74e:	bf00      	nop
9000b750:	58024400 	.word	0x58024400
9000b754:	003d0900 	.word	0x003d0900
9000b758:	90026504 	.word	0x90026504
9000b75c:	24000058 	.word	0x24000058
9000b760:	24000054 	.word	0x24000054
9000b764:	017d7840 	.word	0x017d7840
9000b768:	03d09000 	.word	0x03d09000

9000b76c <HAL_RCC_GetPCLK2Freq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
9000b76c:	4a1c      	ldr	r2, [pc, #112]	; (9000b7e0 <HAL_RCC_GetPCLK2Freq+0x74>)
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
9000b76e:	b538      	push	{r3, r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
9000b770:	6913      	ldr	r3, [r2, #16]
9000b772:	f003 0338 	and.w	r3, r3, #56	; 0x38
9000b776:	2b10      	cmp	r3, #16
9000b778:	d021      	beq.n	9000b7be <HAL_RCC_GetPCLK2Freq+0x52>
9000b77a:	2b18      	cmp	r3, #24
9000b77c:	d02a      	beq.n	9000b7d4 <HAL_RCC_GetPCLK2Freq+0x68>
9000b77e:	b303      	cbz	r3, 9000b7c2 <HAL_RCC_GetPCLK2Freq+0x56>
      sysclockfreq = CSI_VALUE;
9000b780:	4818      	ldr	r0, [pc, #96]	; (9000b7e4 <HAL_RCC_GetPCLK2Freq+0x78>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
9000b782:	4a17      	ldr	r2, [pc, #92]	; (9000b7e0 <HAL_RCC_GetPCLK2Freq+0x74>)
9000b784:	4918      	ldr	r1, [pc, #96]	; (9000b7e8 <HAL_RCC_GetPCLK2Freq+0x7c>)
9000b786:	6993      	ldr	r3, [r2, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
9000b788:	4c18      	ldr	r4, [pc, #96]	; (9000b7ec <HAL_RCC_GetPCLK2Freq+0x80>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
9000b78a:	f3c3 2303 	ubfx	r3, r3, #8, #4
  SystemCoreClock = common_system_clock;
9000b78e:	4d18      	ldr	r5, [pc, #96]	; (9000b7f0 <HAL_RCC_GetPCLK2Freq+0x84>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
9000b790:	5ccb      	ldrb	r3, [r1, r3]
9000b792:	f003 031f 	and.w	r3, r3, #31
9000b796:	40d8      	lsrs	r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
9000b798:	6993      	ldr	r3, [r2, #24]
9000b79a:	f003 030f 	and.w	r3, r3, #15
  SystemCoreClock = common_system_clock;
9000b79e:	6028      	str	r0, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
9000b7a0:	5ccb      	ldrb	r3, [r1, r3]
9000b7a2:	f003 031f 	and.w	r3, r3, #31
9000b7a6:	fa20 f303 	lsr.w	r3, r0, r3
9000b7aa:	6023      	str	r3, [r4, #0]
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
9000b7ac:	69d2      	ldr	r2, [r2, #28]
9000b7ae:	f3c2 2202 	ubfx	r2, r2, #8, #3
9000b7b2:	5c88      	ldrb	r0, [r1, r2]
9000b7b4:	f000 001f 	and.w	r0, r0, #31
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
9000b7b8:	fa23 f000 	lsr.w	r0, r3, r0
9000b7bc:	bd38      	pop	{r3, r4, r5, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
9000b7be:	480d      	ldr	r0, [pc, #52]	; (9000b7f4 <HAL_RCC_GetPCLK2Freq+0x88>)
9000b7c0:	e7df      	b.n	9000b782 <HAL_RCC_GetPCLK2Freq+0x16>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
9000b7c2:	6813      	ldr	r3, [r2, #0]
9000b7c4:	069b      	lsls	r3, r3, #26
9000b7c6:	d508      	bpl.n	9000b7da <HAL_RCC_GetPCLK2Freq+0x6e>
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
9000b7c8:	6813      	ldr	r3, [r2, #0]
9000b7ca:	480b      	ldr	r0, [pc, #44]	; (9000b7f8 <HAL_RCC_GetPCLK2Freq+0x8c>)
9000b7cc:	f3c3 03c1 	ubfx	r3, r3, #3, #2
9000b7d0:	40d8      	lsrs	r0, r3
9000b7d2:	e7d6      	b.n	9000b782 <HAL_RCC_GetPCLK2Freq+0x16>
9000b7d4:	f7ff fa02 	bl	9000abdc <HAL_RCC_GetSysClockFreq.part.0>
9000b7d8:	e7d3      	b.n	9000b782 <HAL_RCC_GetPCLK2Freq+0x16>
        sysclockfreq = (uint32_t) HSI_VALUE;
9000b7da:	4807      	ldr	r0, [pc, #28]	; (9000b7f8 <HAL_RCC_GetPCLK2Freq+0x8c>)
9000b7dc:	e7d1      	b.n	9000b782 <HAL_RCC_GetPCLK2Freq+0x16>
9000b7de:	bf00      	nop
9000b7e0:	58024400 	.word	0x58024400
9000b7e4:	003d0900 	.word	0x003d0900
9000b7e8:	90026504 	.word	0x90026504
9000b7ec:	24000058 	.word	0x24000058
9000b7f0:	24000054 	.word	0x24000054
9000b7f4:	017d7840 	.word	0x017d7840
9000b7f8:	03d09000 	.word	0x03d09000

9000b7fc <HAL_RCC_GetClockConfig>:
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
9000b7fc:	4b13      	ldr	r3, [pc, #76]	; (9000b84c <HAL_RCC_GetClockConfig+0x50>)
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
9000b7fe:	223f      	movs	r2, #63	; 0x3f
9000b800:	6002      	str	r2, [r0, #0]
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
9000b802:	691a      	ldr	r2, [r3, #16]
9000b804:	f002 0207 	and.w	r2, r2, #7
9000b808:	6042      	str	r2, [r0, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
9000b80a:	699a      	ldr	r2, [r3, #24]
9000b80c:	f402 6270 	and.w	r2, r2, #3840	; 0xf00
9000b810:	6082      	str	r2, [r0, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
9000b812:	699a      	ldr	r2, [r3, #24]
9000b814:	f002 020f 	and.w	r2, r2, #15
9000b818:	60c2      	str	r2, [r0, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
9000b81a:	699a      	ldr	r2, [r3, #24]
9000b81c:	f002 0270 	and.w	r2, r2, #112	; 0x70
9000b820:	6102      	str	r2, [r0, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
9000b822:	69da      	ldr	r2, [r3, #28]
9000b824:	f002 0270 	and.w	r2, r2, #112	; 0x70
9000b828:	6142      	str	r2, [r0, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
9000b82a:	69da      	ldr	r2, [r3, #28]
9000b82c:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
9000b830:	6182      	str	r2, [r0, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
9000b832:	6a1b      	ldr	r3, [r3, #32]
{
9000b834:	b410      	push	{r4}
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
9000b836:	f003 0370 	and.w	r3, r3, #112	; 0x70
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
9000b83a:	4c05      	ldr	r4, [pc, #20]	; (9000b850 <HAL_RCC_GetClockConfig+0x54>)
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
9000b83c:	61c3      	str	r3, [r0, #28]
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
9000b83e:	6823      	ldr	r3, [r4, #0]
}
9000b840:	f85d 4b04 	ldr.w	r4, [sp], #4
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
9000b844:	f003 030f 	and.w	r3, r3, #15
9000b848:	600b      	str	r3, [r1, #0]
}
9000b84a:	4770      	bx	lr
9000b84c:	58024400 	.word	0x58024400
9000b850:	52002000 	.word	0x52002000

9000b854 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
9000b854:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
9000b856:	4c3a      	ldr	r4, [pc, #232]	; (9000b940 <RCCEx_PLL2_Config+0xec>)
9000b858:	6aa3      	ldr	r3, [r4, #40]	; 0x28
9000b85a:	f003 0303 	and.w	r3, r3, #3
9000b85e:	2b03      	cmp	r3, #3
9000b860:	d067      	beq.n	9000b932 <RCCEx_PLL2_Config+0xde>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
9000b862:	6823      	ldr	r3, [r4, #0]
9000b864:	4606      	mov	r6, r0
9000b866:	460f      	mov	r7, r1
9000b868:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
9000b86c:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
9000b86e:	f7fb fa69 	bl	90006d44 <HAL_GetTick>
9000b872:	4605      	mov	r5, r0

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
9000b874:	e004      	b.n	9000b880 <RCCEx_PLL2_Config+0x2c>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
9000b876:	f7fb fa65 	bl	90006d44 <HAL_GetTick>
9000b87a:	1b43      	subs	r3, r0, r5
9000b87c:	2b02      	cmp	r3, #2
9000b87e:	d856      	bhi.n	9000b92e <RCCEx_PLL2_Config+0xda>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
9000b880:	6823      	ldr	r3, [r4, #0]
9000b882:	011a      	lsls	r2, r3, #4
9000b884:	d4f7      	bmi.n	9000b876 <RCCEx_PLL2_Config+0x22>
        return HAL_TIMEOUT;
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
9000b886:	6aa3      	ldr	r3, [r4, #40]	; 0x28
9000b888:	6832      	ldr	r2, [r6, #0]
9000b88a:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
9000b88e:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
9000b892:	62a3      	str	r3, [r4, #40]	; 0x28
9000b894:	e9d6 3202 	ldrd	r3, r2, [r6, #8]
9000b898:	3b01      	subs	r3, #1
9000b89a:	3a01      	subs	r2, #1
9000b89c:	025b      	lsls	r3, r3, #9
9000b89e:	0412      	lsls	r2, r2, #16
9000b8a0:	b29b      	uxth	r3, r3
9000b8a2:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
9000b8a6:	4313      	orrs	r3, r2
9000b8a8:	6872      	ldr	r2, [r6, #4]
9000b8aa:	3a01      	subs	r2, #1
9000b8ac:	f3c2 0208 	ubfx	r2, r2, #0, #9
9000b8b0:	4313      	orrs	r3, r2
9000b8b2:	6932      	ldr	r2, [r6, #16]
9000b8b4:	3a01      	subs	r2, #1
9000b8b6:	0612      	lsls	r2, r2, #24
9000b8b8:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
9000b8bc:	4313      	orrs	r3, r2
9000b8be:	63a3      	str	r3, [r4, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
9000b8c0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
9000b8c2:	6972      	ldr	r2, [r6, #20]
9000b8c4:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
9000b8c8:	4313      	orrs	r3, r2
9000b8ca:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
9000b8cc:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
9000b8ce:	69b3      	ldr	r3, [r6, #24]
9000b8d0:	f022 0220 	bic.w	r2, r2, #32
9000b8d4:	431a      	orrs	r2, r3

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
9000b8d6:	4b1b      	ldr	r3, [pc, #108]	; (9000b944 <RCCEx_PLL2_Config+0xf0>)
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
9000b8d8:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_RCC_PLL2FRACN_DISABLE();
9000b8da:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
9000b8dc:	f022 0210 	bic.w	r2, r2, #16
9000b8e0:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
9000b8e2:	6be1      	ldr	r1, [r4, #60]	; 0x3c
9000b8e4:	69f2      	ldr	r2, [r6, #28]
9000b8e6:	400b      	ands	r3, r1
9000b8e8:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
9000b8ec:	63e3      	str	r3, [r4, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
9000b8ee:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
9000b8f0:	f043 0310 	orr.w	r3, r3, #16
9000b8f4:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
9000b8f6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if (Divider == DIVIDER_P_UPDATE)
9000b8f8:	b1ef      	cbz	r7, 9000b936 <RCCEx_PLL2_Config+0xe2>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
9000b8fa:	2f01      	cmp	r7, #1
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
9000b8fc:	bf0c      	ite	eq
9000b8fe:	f443 1380 	orreq.w	r3, r3, #1048576	; 0x100000
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
9000b902:	f443 1300 	orrne.w	r3, r3, #2097152	; 0x200000
9000b906:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
9000b908:	4c0d      	ldr	r4, [pc, #52]	; (9000b940 <RCCEx_PLL2_Config+0xec>)
9000b90a:	6823      	ldr	r3, [r4, #0]
9000b90c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
9000b910:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
9000b912:	f7fb fa17 	bl	90006d44 <HAL_GetTick>
9000b916:	4605      	mov	r5, r0

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
9000b918:	e004      	b.n	9000b924 <RCCEx_PLL2_Config+0xd0>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
9000b91a:	f7fb fa13 	bl	90006d44 <HAL_GetTick>
9000b91e:	1b40      	subs	r0, r0, r5
9000b920:	2802      	cmp	r0, #2
9000b922:	d804      	bhi.n	9000b92e <RCCEx_PLL2_Config+0xda>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
9000b924:	6823      	ldr	r3, [r4, #0]
9000b926:	011b      	lsls	r3, r3, #4
9000b928:	d5f7      	bpl.n	9000b91a <RCCEx_PLL2_Config+0xc6>
    }

  }


  return status;
9000b92a:	2000      	movs	r0, #0
}
9000b92c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
9000b92e:	2003      	movs	r0, #3
}
9000b930:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
9000b932:	2001      	movs	r0, #1
}
9000b934:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
9000b936:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
9000b93a:	62e3      	str	r3, [r4, #44]	; 0x2c
9000b93c:	e7e4      	b.n	9000b908 <RCCEx_PLL2_Config+0xb4>
9000b93e:	bf00      	nop
9000b940:	58024400 	.word	0x58024400
9000b944:	ffff0007 	.word	0xffff0007

9000b948 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
9000b948:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
9000b94a:	4c3a      	ldr	r4, [pc, #232]	; (9000ba34 <RCCEx_PLL3_Config+0xec>)
9000b94c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
9000b94e:	f003 0303 	and.w	r3, r3, #3
9000b952:	2b03      	cmp	r3, #3
9000b954:	d067      	beq.n	9000ba26 <RCCEx_PLL3_Config+0xde>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
9000b956:	6823      	ldr	r3, [r4, #0]
9000b958:	4606      	mov	r6, r0
9000b95a:	460f      	mov	r7, r1
9000b95c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
9000b960:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
9000b962:	f7fb f9ef 	bl	90006d44 <HAL_GetTick>
9000b966:	4605      	mov	r5, r0
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
9000b968:	e004      	b.n	9000b974 <RCCEx_PLL3_Config+0x2c>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
9000b96a:	f7fb f9eb 	bl	90006d44 <HAL_GetTick>
9000b96e:	1b43      	subs	r3, r0, r5
9000b970:	2b02      	cmp	r3, #2
9000b972:	d856      	bhi.n	9000ba22 <RCCEx_PLL3_Config+0xda>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
9000b974:	6823      	ldr	r3, [r4, #0]
9000b976:	009a      	lsls	r2, r3, #2
9000b978:	d4f7      	bmi.n	9000b96a <RCCEx_PLL3_Config+0x22>
        return HAL_TIMEOUT;
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
9000b97a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
9000b97c:	6832      	ldr	r2, [r6, #0]
9000b97e:	f023 737c 	bic.w	r3, r3, #66060288	; 0x3f00000
9000b982:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
9000b986:	62a3      	str	r3, [r4, #40]	; 0x28
9000b988:	e9d6 3202 	ldrd	r3, r2, [r6, #8]
9000b98c:	3b01      	subs	r3, #1
9000b98e:	3a01      	subs	r2, #1
9000b990:	025b      	lsls	r3, r3, #9
9000b992:	0412      	lsls	r2, r2, #16
9000b994:	b29b      	uxth	r3, r3
9000b996:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
9000b99a:	4313      	orrs	r3, r2
9000b99c:	6872      	ldr	r2, [r6, #4]
9000b99e:	3a01      	subs	r2, #1
9000b9a0:	f3c2 0208 	ubfx	r2, r2, #0, #9
9000b9a4:	4313      	orrs	r3, r2
9000b9a6:	6932      	ldr	r2, [r6, #16]
9000b9a8:	3a01      	subs	r2, #1
9000b9aa:	0612      	lsls	r2, r2, #24
9000b9ac:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
9000b9b0:	4313      	orrs	r3, r2
9000b9b2:	6423      	str	r3, [r4, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
9000b9b4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
9000b9b6:	6972      	ldr	r2, [r6, #20]
9000b9b8:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
9000b9bc:	4313      	orrs	r3, r2
9000b9be:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
9000b9c0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
9000b9c2:	69b3      	ldr	r3, [r6, #24]
9000b9c4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
9000b9c8:	431a      	orrs	r2, r3

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
9000b9ca:	4b1b      	ldr	r3, [pc, #108]	; (9000ba38 <RCCEx_PLL3_Config+0xf0>)
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
9000b9cc:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_RCC_PLL3FRACN_DISABLE();
9000b9ce:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
9000b9d0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
9000b9d4:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
9000b9d6:	6c61      	ldr	r1, [r4, #68]	; 0x44
9000b9d8:	69f2      	ldr	r2, [r6, #28]
9000b9da:	400b      	ands	r3, r1
9000b9dc:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
9000b9e0:	6463      	str	r3, [r4, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
9000b9e2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
9000b9e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
9000b9e8:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
9000b9ea:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if (Divider == DIVIDER_P_UPDATE)
9000b9ec:	b1ef      	cbz	r7, 9000ba2a <RCCEx_PLL3_Config+0xe2>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
9000b9ee:	2f01      	cmp	r7, #1
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
9000b9f0:	bf0c      	ite	eq
9000b9f2:	f443 0300 	orreq.w	r3, r3, #8388608	; 0x800000
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
9000b9f6:	f043 7380 	orrne.w	r3, r3, #16777216	; 0x1000000
9000b9fa:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
9000b9fc:	4c0d      	ldr	r4, [pc, #52]	; (9000ba34 <RCCEx_PLL3_Config+0xec>)
9000b9fe:	6823      	ldr	r3, [r4, #0]
9000ba00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
9000ba04:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
9000ba06:	f7fb f99d 	bl	90006d44 <HAL_GetTick>
9000ba0a:	4605      	mov	r5, r0

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
9000ba0c:	e004      	b.n	9000ba18 <RCCEx_PLL3_Config+0xd0>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
9000ba0e:	f7fb f999 	bl	90006d44 <HAL_GetTick>
9000ba12:	1b40      	subs	r0, r0, r5
9000ba14:	2802      	cmp	r0, #2
9000ba16:	d804      	bhi.n	9000ba22 <RCCEx_PLL3_Config+0xda>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
9000ba18:	6823      	ldr	r3, [r4, #0]
9000ba1a:	009b      	lsls	r3, r3, #2
9000ba1c:	d5f7      	bpl.n	9000ba0e <RCCEx_PLL3_Config+0xc6>
    }

  }


  return status;
9000ba1e:	2000      	movs	r0, #0
}
9000ba20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
9000ba22:	2003      	movs	r0, #3
}
9000ba24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
9000ba26:	2001      	movs	r0, #1
}
9000ba28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
9000ba2a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
9000ba2e:	62e3      	str	r3, [r4, #44]	; 0x2c
9000ba30:	e7e4      	b.n	9000b9fc <RCCEx_PLL3_Config+0xb4>
9000ba32:	bf00      	nop
9000ba34:	58024400 	.word	0x58024400
9000ba38:	ffff0007 	.word	0xffff0007

9000ba3c <HAL_RCCEx_PeriphCLKConfig>:
{
9000ba3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
9000ba40:	e9d0 3200 	ldrd	r3, r2, [r0]
{
9000ba44:	4604      	mov	r4, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
9000ba46:	011d      	lsls	r5, r3, #4
9000ba48:	f003 6600 	and.w	r6, r3, #134217728	; 0x8000000
9000ba4c:	d523      	bpl.n	9000ba96 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    switch (PeriphClkInit->SpdifrxClockSelection)
9000ba4e:	6e81      	ldr	r1, [r0, #104]	; 0x68
9000ba50:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
9000ba54:	f000 8553 	beq.w	9000c4fe <HAL_RCCEx_PeriphCLKConfig+0xac2>
9000ba58:	d812      	bhi.n	9000ba80 <HAL_RCCEx_PeriphCLKConfig+0x44>
9000ba5a:	2900      	cmp	r1, #0
9000ba5c:	f000 85a9 	beq.w	9000c5b2 <HAL_RCCEx_PeriphCLKConfig+0xb76>
9000ba60:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
9000ba64:	f040 85a2 	bne.w	9000c5ac <HAL_RCCEx_PeriphCLKConfig+0xb70>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
9000ba68:	2102      	movs	r1, #2
9000ba6a:	3008      	adds	r0, #8
9000ba6c:	f7ff fef2 	bl	9000b854 <RCCEx_PLL2_Config>
9000ba70:	4606      	mov	r6, r0
    if (ret == HAL_OK)
9000ba72:	2e00      	cmp	r6, #0
9000ba74:	f040 8522 	bne.w	9000c4bc <HAL_RCCEx_PeriphCLKConfig+0xa80>
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
9000ba78:	6ea1      	ldr	r1, [r4, #104]	; 0x68
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
9000ba7a:	e9d4 3200 	ldrd	r3, r2, [r4]
9000ba7e:	e003      	b.n	9000ba88 <HAL_RCCEx_PeriphCLKConfig+0x4c>
    switch (PeriphClkInit->SpdifrxClockSelection)
9000ba80:	f5b1 1f40 	cmp.w	r1, #3145728	; 0x300000
9000ba84:	f040 8592 	bne.w	9000c5ac <HAL_RCCEx_PeriphCLKConfig+0xb70>
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
9000ba88:	4dae      	ldr	r5, [pc, #696]	; (9000bd44 <HAL_RCCEx_PeriphCLKConfig+0x308>)
9000ba8a:	2600      	movs	r6, #0
9000ba8c:	6d28      	ldr	r0, [r5, #80]	; 0x50
9000ba8e:	f420 1040 	bic.w	r0, r0, #3145728	; 0x300000
9000ba92:	4301      	orrs	r1, r0
9000ba94:	6529      	str	r1, [r5, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
9000ba96:	05d8      	lsls	r0, r3, #23
9000ba98:	d50a      	bpl.n	9000bab0 <HAL_RCCEx_PeriphCLKConfig+0x74>
    switch (PeriphClkInit->Sai1ClockSelection)
9000ba9a:	6da1      	ldr	r1, [r4, #88]	; 0x58
9000ba9c:	2904      	cmp	r1, #4
9000ba9e:	d806      	bhi.n	9000baae <HAL_RCCEx_PeriphCLKConfig+0x72>
9000baa0:	e8df f011 	tbh	[pc, r1, lsl #1]
9000baa4:	053d0536 	.word	0x053d0536
9000baa8:	0323051a 	.word	0x0323051a
9000baac:	0323      	.short	0x0323
9000baae:	2601      	movs	r6, #1
9000bab0:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
9000bab2:	0599      	lsls	r1, r3, #22
9000bab4:	d51d      	bpl.n	9000baf2 <HAL_RCCEx_PeriphCLKConfig+0xb6>
    switch (PeriphClkInit->Sai23ClockSelection)
9000bab6:	6de1      	ldr	r1, [r4, #92]	; 0x5c
9000bab8:	2980      	cmp	r1, #128	; 0x80
9000baba:	f000 8516 	beq.w	9000c4ea <HAL_RCCEx_PeriphCLKConfig+0xaae>
9000babe:	f200 80f9 	bhi.w	9000bcb4 <HAL_RCCEx_PeriphCLKConfig+0x278>
9000bac2:	2900      	cmp	r1, #0
9000bac4:	f000 8433 	beq.w	9000c32e <HAL_RCCEx_PeriphCLKConfig+0x8f2>
9000bac8:	2940      	cmp	r1, #64	; 0x40
9000baca:	f040 80fa 	bne.w	9000bcc2 <HAL_RCCEx_PeriphCLKConfig+0x286>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
9000bace:	2100      	movs	r1, #0
9000bad0:	f104 0008 	add.w	r0, r4, #8
9000bad4:	f7ff febe 	bl	9000b854 <RCCEx_PLL2_Config>
9000bad8:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
9000bada:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000bade:	2d00      	cmp	r5, #0
9000bae0:	f040 83fe 	bne.w	9000c2e0 <HAL_RCCEx_PeriphCLKConfig+0x8a4>
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
9000bae4:	4f97      	ldr	r7, [pc, #604]	; (9000bd44 <HAL_RCCEx_PeriphCLKConfig+0x308>)
9000bae6:	6de0      	ldr	r0, [r4, #92]	; 0x5c
9000bae8:	6d39      	ldr	r1, [r7, #80]	; 0x50
9000baea:	f421 71e0 	bic.w	r1, r1, #448	; 0x1c0
9000baee:	4301      	orrs	r1, r0
9000baf0:	6539      	str	r1, [r7, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
9000baf2:	055f      	lsls	r7, r3, #21
9000baf4:	d521      	bpl.n	9000bb3a <HAL_RCCEx_PeriphCLKConfig+0xfe>
    switch (PeriphClkInit->Sai4AClockSelection)
9000baf6:	f8d4 10a8 	ldr.w	r1, [r4, #168]	; 0xa8
9000bafa:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
9000bafe:	f000 8521 	beq.w	9000c544 <HAL_RCCEx_PeriphCLKConfig+0xb08>
9000bb02:	f200 80e1 	bhi.w	9000bcc8 <HAL_RCCEx_PeriphCLKConfig+0x28c>
9000bb06:	2900      	cmp	r1, #0
9000bb08:	f000 8418 	beq.w	9000c33c <HAL_RCCEx_PeriphCLKConfig+0x900>
9000bb0c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
9000bb10:	f040 80e2 	bne.w	9000bcd8 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
9000bb14:	2100      	movs	r1, #0
9000bb16:	f104 0008 	add.w	r0, r4, #8
9000bb1a:	f7ff fe9b 	bl	9000b854 <RCCEx_PLL2_Config>
9000bb1e:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
9000bb20:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000bb24:	2d00      	cmp	r5, #0
9000bb26:	f040 83e2 	bne.w	9000c2ee <HAL_RCCEx_PeriphCLKConfig+0x8b2>
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
9000bb2a:	4f86      	ldr	r7, [pc, #536]	; (9000bd44 <HAL_RCCEx_PeriphCLKConfig+0x308>)
9000bb2c:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
9000bb30:	6db9      	ldr	r1, [r7, #88]	; 0x58
9000bb32:	f421 0160 	bic.w	r1, r1, #14680064	; 0xe00000
9000bb36:	4301      	orrs	r1, r0
9000bb38:	65b9      	str	r1, [r7, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
9000bb3a:	0518      	lsls	r0, r3, #20
9000bb3c:	d521      	bpl.n	9000bb82 <HAL_RCCEx_PeriphCLKConfig+0x146>
    switch (PeriphClkInit->Sai4BClockSelection)
9000bb3e:	f8d4 10ac 	ldr.w	r1, [r4, #172]	; 0xac
9000bb42:	f1b1 7f00 	cmp.w	r1, #33554432	; 0x2000000
9000bb46:	f000 84bd 	beq.w	9000c4c4 <HAL_RCCEx_PeriphCLKConfig+0xa88>
9000bb4a:	f200 80c8 	bhi.w	9000bcde <HAL_RCCEx_PeriphCLKConfig+0x2a2>
9000bb4e:	2900      	cmp	r1, #0
9000bb50:	f000 83e7 	beq.w	9000c322 <HAL_RCCEx_PeriphCLKConfig+0x8e6>
9000bb54:	f1b1 7f80 	cmp.w	r1, #16777216	; 0x1000000
9000bb58:	f040 80c9 	bne.w	9000bcee <HAL_RCCEx_PeriphCLKConfig+0x2b2>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
9000bb5c:	2100      	movs	r1, #0
9000bb5e:	f104 0008 	add.w	r0, r4, #8
9000bb62:	f7ff fe77 	bl	9000b854 <RCCEx_PLL2_Config>
9000bb66:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
9000bb68:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000bb6c:	2d00      	cmp	r5, #0
9000bb6e:	f040 83b5 	bne.w	9000c2dc <HAL_RCCEx_PeriphCLKConfig+0x8a0>
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
9000bb72:	4f74      	ldr	r7, [pc, #464]	; (9000bd44 <HAL_RCCEx_PeriphCLKConfig+0x308>)
9000bb74:	f8d4 00ac 	ldr.w	r0, [r4, #172]	; 0xac
9000bb78:	6db9      	ldr	r1, [r7, #88]	; 0x58
9000bb7a:	f021 61e0 	bic.w	r1, r1, #117440512	; 0x7000000
9000bb7e:	4301      	orrs	r1, r0
9000bb80:	65b9      	str	r1, [r7, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
9000bb82:	0199      	lsls	r1, r3, #6
9000bb84:	d518      	bpl.n	9000bbb8 <HAL_RCCEx_PeriphCLKConfig+0x17c>
    switch (PeriphClkInit->QspiClockSelection)
9000bb86:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
9000bb88:	2920      	cmp	r1, #32
9000bb8a:	f000 841f 	beq.w	9000c3cc <HAL_RCCEx_PeriphCLKConfig+0x990>
9000bb8e:	f200 80b1 	bhi.w	9000bcf4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
9000bb92:	b139      	cbz	r1, 9000bba4 <HAL_RCCEx_PeriphCLKConfig+0x168>
9000bb94:	2910      	cmp	r1, #16
9000bb96:	f040 80b0 	bne.w	9000bcfa <HAL_RCCEx_PeriphCLKConfig+0x2be>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
9000bb9a:	486a      	ldr	r0, [pc, #424]	; (9000bd44 <HAL_RCCEx_PeriphCLKConfig+0x308>)
9000bb9c:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
9000bb9e:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
9000bba2:	62c1      	str	r1, [r0, #44]	; 0x2c
    if (ret == HAL_OK)
9000bba4:	2d00      	cmp	r5, #0
9000bba6:	f040 83d8 	bne.w	9000c35a <HAL_RCCEx_PeriphCLKConfig+0x91e>
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
9000bbaa:	4f66      	ldr	r7, [pc, #408]	; (9000bd44 <HAL_RCCEx_PeriphCLKConfig+0x308>)
9000bbac:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
9000bbae:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
9000bbb0:	f021 0130 	bic.w	r1, r1, #48	; 0x30
9000bbb4:	4301      	orrs	r1, r0
9000bbb6:	64f9      	str	r1, [r7, #76]	; 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
9000bbb8:	04df      	lsls	r7, r3, #19
9000bbba:	d51f      	bpl.n	9000bbfc <HAL_RCCEx_PeriphCLKConfig+0x1c0>
    switch (PeriphClkInit->Spi123ClockSelection)
9000bbbc:	6e21      	ldr	r1, [r4, #96]	; 0x60
9000bbbe:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
9000bbc2:	f000 84b5 	beq.w	9000c530 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
9000bbc6:	f200 809b 	bhi.w	9000bd00 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
9000bbca:	2900      	cmp	r1, #0
9000bbcc:	f000 83a3 	beq.w	9000c316 <HAL_RCCEx_PeriphCLKConfig+0x8da>
9000bbd0:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
9000bbd4:	f040 809c 	bne.w	9000bd10 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
9000bbd8:	2100      	movs	r1, #0
9000bbda:	f104 0008 	add.w	r0, r4, #8
9000bbde:	f7ff fe39 	bl	9000b854 <RCCEx_PLL2_Config>
9000bbe2:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
9000bbe4:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000bbe8:	2d00      	cmp	r5, #0
9000bbea:	f040 837b 	bne.w	9000c2e4 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
9000bbee:	4f55      	ldr	r7, [pc, #340]	; (9000bd44 <HAL_RCCEx_PeriphCLKConfig+0x308>)
9000bbf0:	6e20      	ldr	r0, [r4, #96]	; 0x60
9000bbf2:	6d39      	ldr	r1, [r7, #80]	; 0x50
9000bbf4:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
9000bbf8:	4301      	orrs	r1, r0
9000bbfa:	6539      	str	r1, [r7, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
9000bbfc:	0498      	lsls	r0, r3, #18
9000bbfe:	d51d      	bpl.n	9000bc3c <HAL_RCCEx_PeriphCLKConfig+0x200>
    switch (PeriphClkInit->Spi45ClockSelection)
9000bc00:	6e61      	ldr	r1, [r4, #100]	; 0x64
9000bc02:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
9000bc06:	f000 8410 	beq.w	9000c42a <HAL_RCCEx_PeriphCLKConfig+0x9ee>
9000bc0a:	f200 8084 	bhi.w	9000bd16 <HAL_RCCEx_PeriphCLKConfig+0x2da>
9000bc0e:	b159      	cbz	r1, 9000bc28 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
9000bc10:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
9000bc14:	f040 8087 	bne.w	9000bd26 <HAL_RCCEx_PeriphCLKConfig+0x2ea>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
9000bc18:	2101      	movs	r1, #1
9000bc1a:	f104 0008 	add.w	r0, r4, #8
9000bc1e:	f7ff fe19 	bl	9000b854 <RCCEx_PLL2_Config>
9000bc22:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
9000bc24:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000bc28:	2d00      	cmp	r5, #0
9000bc2a:	f040 839a 	bne.w	9000c362 <HAL_RCCEx_PeriphCLKConfig+0x926>
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
9000bc2e:	4f45      	ldr	r7, [pc, #276]	; (9000bd44 <HAL_RCCEx_PeriphCLKConfig+0x308>)
9000bc30:	6e60      	ldr	r0, [r4, #100]	; 0x64
9000bc32:	6d39      	ldr	r1, [r7, #80]	; 0x50
9000bc34:	f421 21e0 	bic.w	r1, r1, #458752	; 0x70000
9000bc38:	4301      	orrs	r1, r0
9000bc3a:	6539      	str	r1, [r7, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
9000bc3c:	0459      	lsls	r1, r3, #17
9000bc3e:	d51d      	bpl.n	9000bc7c <HAL_RCCEx_PeriphCLKConfig+0x240>
    switch (PeriphClkInit->Spi6ClockSelection)
9000bc40:	f8d4 10b0 	ldr.w	r1, [r4, #176]	; 0xb0
9000bc44:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
9000bc48:	f000 83fb 	beq.w	9000c442 <HAL_RCCEx_PeriphCLKConfig+0xa06>
9000bc4c:	d86e      	bhi.n	9000bd2c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
9000bc4e:	b151      	cbz	r1, 9000bc66 <HAL_RCCEx_PeriphCLKConfig+0x22a>
9000bc50:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
9000bc54:	d172      	bne.n	9000bd3c <HAL_RCCEx_PeriphCLKConfig+0x300>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
9000bc56:	2101      	movs	r1, #1
9000bc58:	f104 0008 	add.w	r0, r4, #8
9000bc5c:	f7ff fdfa 	bl	9000b854 <RCCEx_PLL2_Config>
9000bc60:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
9000bc62:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000bc66:	2d00      	cmp	r5, #0
9000bc68:	f040 837f 	bne.w	9000c36a <HAL_RCCEx_PeriphCLKConfig+0x92e>
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
9000bc6c:	4f35      	ldr	r7, [pc, #212]	; (9000bd44 <HAL_RCCEx_PeriphCLKConfig+0x308>)
9000bc6e:	f8d4 00b0 	ldr.w	r0, [r4, #176]	; 0xb0
9000bc72:	6db9      	ldr	r1, [r7, #88]	; 0x58
9000bc74:	f021 41e0 	bic.w	r1, r1, #1879048192	; 0x70000000
9000bc78:	4301      	orrs	r1, r0
9000bc7a:	65b9      	str	r1, [r7, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
9000bc7c:	041f      	lsls	r7, r3, #16
9000bc7e:	d50d      	bpl.n	9000bc9c <HAL_RCCEx_PeriphCLKConfig+0x260>
    switch (PeriphClkInit->FdcanClockSelection)
9000bc80:	6f21      	ldr	r1, [r4, #112]	; 0x70
9000bc82:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
9000bc86:	f000 83c8 	beq.w	9000c41a <HAL_RCCEx_PeriphCLKConfig+0x9de>
9000bc8a:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
9000bc8e:	f000 823b 	beq.w	9000c108 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
9000bc92:	2900      	cmp	r1, #0
9000bc94:	f000 8240 	beq.w	9000c118 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
9000bc98:	2601      	movs	r6, #1
9000bc9a:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
9000bc9c:	01d8      	lsls	r0, r3, #7
9000bc9e:	d562      	bpl.n	9000bd66 <HAL_RCCEx_PeriphCLKConfig+0x32a>
    switch (PeriphClkInit->FmcClockSelection)
9000bca0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
9000bca2:	2903      	cmp	r1, #3
9000bca4:	f200 84bf 	bhi.w	9000c626 <HAL_RCCEx_PeriphCLKConfig+0xbea>
9000bca8:	e8df f011 	tbh	[pc, r1, lsl #1]
9000bcac:	004e0053 	.word	0x004e0053
9000bcb0:	005303e2 	.word	0x005303e2
    switch (PeriphClkInit->Sai23ClockSelection)
9000bcb4:	29c0      	cmp	r1, #192	; 0xc0
9000bcb6:	f43f af12 	beq.w	9000bade <HAL_RCCEx_PeriphCLKConfig+0xa2>
9000bcba:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
9000bcbe:	f43f af0e 	beq.w	9000bade <HAL_RCCEx_PeriphCLKConfig+0xa2>
9000bcc2:	2601      	movs	r6, #1
9000bcc4:	4635      	mov	r5, r6
9000bcc6:	e714      	b.n	9000baf2 <HAL_RCCEx_PeriphCLKConfig+0xb6>
    switch (PeriphClkInit->Sai4AClockSelection)
9000bcc8:	f5b1 0fc0 	cmp.w	r1, #6291456	; 0x600000
9000bccc:	f43f af2a 	beq.w	9000bb24 <HAL_RCCEx_PeriphCLKConfig+0xe8>
9000bcd0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
9000bcd4:	f43f af26 	beq.w	9000bb24 <HAL_RCCEx_PeriphCLKConfig+0xe8>
9000bcd8:	2601      	movs	r6, #1
9000bcda:	4635      	mov	r5, r6
9000bcdc:	e72d      	b.n	9000bb3a <HAL_RCCEx_PeriphCLKConfig+0xfe>
    switch (PeriphClkInit->Sai4BClockSelection)
9000bcde:	f1b1 7f40 	cmp.w	r1, #50331648	; 0x3000000
9000bce2:	f43f af43 	beq.w	9000bb6c <HAL_RCCEx_PeriphCLKConfig+0x130>
9000bce6:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
9000bcea:	f43f af3f 	beq.w	9000bb6c <HAL_RCCEx_PeriphCLKConfig+0x130>
9000bcee:	2601      	movs	r6, #1
9000bcf0:	4635      	mov	r5, r6
9000bcf2:	e746      	b.n	9000bb82 <HAL_RCCEx_PeriphCLKConfig+0x146>
    switch (PeriphClkInit->QspiClockSelection)
9000bcf4:	2930      	cmp	r1, #48	; 0x30
9000bcf6:	f43f af55 	beq.w	9000bba4 <HAL_RCCEx_PeriphCLKConfig+0x168>
9000bcfa:	2601      	movs	r6, #1
9000bcfc:	4635      	mov	r5, r6
9000bcfe:	e75b      	b.n	9000bbb8 <HAL_RCCEx_PeriphCLKConfig+0x17c>
    switch (PeriphClkInit->Spi123ClockSelection)
9000bd00:	f5b1 5f40 	cmp.w	r1, #12288	; 0x3000
9000bd04:	f43f af70 	beq.w	9000bbe8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
9000bd08:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
9000bd0c:	f43f af6c 	beq.w	9000bbe8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
9000bd10:	2601      	movs	r6, #1
9000bd12:	4635      	mov	r5, r6
9000bd14:	e772      	b.n	9000bbfc <HAL_RCCEx_PeriphCLKConfig+0x1c0>
    switch (PeriphClkInit->Spi45ClockSelection)
9000bd16:	f421 3080 	bic.w	r0, r1, #65536	; 0x10000
9000bd1a:	f5b0 2f80 	cmp.w	r0, #262144	; 0x40000
9000bd1e:	d083      	beq.n	9000bc28 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
9000bd20:	f5b1 3f40 	cmp.w	r1, #196608	; 0x30000
9000bd24:	d080      	beq.n	9000bc28 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
9000bd26:	2601      	movs	r6, #1
9000bd28:	4635      	mov	r5, r6
9000bd2a:	e787      	b.n	9000bc3c <HAL_RCCEx_PeriphCLKConfig+0x200>
    switch (PeriphClkInit->Spi6ClockSelection)
9000bd2c:	f021 5080 	bic.w	r0, r1, #268435456	; 0x10000000
9000bd30:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
9000bd34:	d097      	beq.n	9000bc66 <HAL_RCCEx_PeriphCLKConfig+0x22a>
9000bd36:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
9000bd3a:	d094      	beq.n	9000bc66 <HAL_RCCEx_PeriphCLKConfig+0x22a>
9000bd3c:	2601      	movs	r6, #1
9000bd3e:	4635      	mov	r5, r6
9000bd40:	e79c      	b.n	9000bc7c <HAL_RCCEx_PeriphCLKConfig+0x240>
9000bd42:	bf00      	nop
9000bd44:	58024400 	.word	0x58024400
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
9000bd48:	4839      	ldr	r0, [pc, #228]	; (9000be30 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
9000bd4a:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
9000bd4c:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
9000bd50:	62c1      	str	r1, [r0, #44]	; 0x2c
    if (ret == HAL_OK)
9000bd52:	2d00      	cmp	r5, #0
9000bd54:	f040 8303 	bne.w	9000c35e <HAL_RCCEx_PeriphCLKConfig+0x922>
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
9000bd58:	4f35      	ldr	r7, [pc, #212]	; (9000be30 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
9000bd5a:	6ca0      	ldr	r0, [r4, #72]	; 0x48
9000bd5c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
9000bd5e:	f021 0103 	bic.w	r1, r1, #3
9000bd62:	4301      	orrs	r1, r0
9000bd64:	64f9      	str	r1, [r7, #76]	; 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
9000bd66:	0259      	lsls	r1, r3, #9
9000bd68:	f100 826a 	bmi.w	9000c240 <HAL_RCCEx_PeriphCLKConfig+0x804>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
9000bd6c:	07d8      	lsls	r0, r3, #31
9000bd6e:	d52f      	bpl.n	9000bdd0 <HAL_RCCEx_PeriphCLKConfig+0x394>
    switch (PeriphClkInit->Usart16ClockSelection)
9000bd70:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
9000bd72:	2928      	cmp	r1, #40	; 0x28
9000bd74:	d82a      	bhi.n	9000bdcc <HAL_RCCEx_PeriphCLKConfig+0x390>
9000bd76:	e8df f011 	tbh	[pc, r1, lsl #1]
9000bd7a:	020a      	.short	0x020a
9000bd7c:	00290029 	.word	0x00290029
9000bd80:	00290029 	.word	0x00290029
9000bd84:	00290029 	.word	0x00290029
9000bd88:	02020029 	.word	0x02020029
9000bd8c:	00290029 	.word	0x00290029
9000bd90:	00290029 	.word	0x00290029
9000bd94:	00290029 	.word	0x00290029
9000bd98:	04070029 	.word	0x04070029
9000bd9c:	00290029 	.word	0x00290029
9000bda0:	00290029 	.word	0x00290029
9000bda4:	00290029 	.word	0x00290029
9000bda8:	020a0029 	.word	0x020a0029
9000bdac:	00290029 	.word	0x00290029
9000bdb0:	00290029 	.word	0x00290029
9000bdb4:	00290029 	.word	0x00290029
9000bdb8:	020a0029 	.word	0x020a0029
9000bdbc:	00290029 	.word	0x00290029
9000bdc0:	00290029 	.word	0x00290029
9000bdc4:	00290029 	.word	0x00290029
9000bdc8:	020a0029 	.word	0x020a0029
9000bdcc:	2601      	movs	r6, #1
9000bdce:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
9000bdd0:	0799      	lsls	r1, r3, #30
9000bdd2:	d51d      	bpl.n	9000be10 <HAL_RCCEx_PeriphCLKConfig+0x3d4>
    switch (PeriphClkInit->Usart234578ClockSelection)
9000bdd4:	6fa1      	ldr	r1, [r4, #120]	; 0x78
9000bdd6:	2905      	cmp	r1, #5
9000bdd8:	f200 8421 	bhi.w	9000c61e <HAL_RCCEx_PeriphCLKConfig+0xbe2>
9000bddc:	e8df f011 	tbh	[pc, r1, lsl #1]
9000bde0:	0006000e 	.word	0x0006000e
9000bde4:	000e03c8 	.word	0x000e03c8
9000bde8:	000e000e 	.word	0x000e000e
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
9000bdec:	2101      	movs	r1, #1
9000bdee:	f104 0008 	add.w	r0, r4, #8
9000bdf2:	f7ff fd2f 	bl	9000b854 <RCCEx_PLL2_Config>
9000bdf6:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
9000bdf8:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000bdfc:	2d00      	cmp	r5, #0
9000bdfe:	f040 82b8 	bne.w	9000c372 <HAL_RCCEx_PeriphCLKConfig+0x936>
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
9000be02:	4f0b      	ldr	r7, [pc, #44]	; (9000be30 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
9000be04:	6fa0      	ldr	r0, [r4, #120]	; 0x78
9000be06:	6d79      	ldr	r1, [r7, #84]	; 0x54
9000be08:	f021 0107 	bic.w	r1, r1, #7
9000be0c:	4301      	orrs	r1, r0
9000be0e:	6579      	str	r1, [r7, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
9000be10:	075f      	lsls	r7, r3, #29
9000be12:	d522      	bpl.n	9000be5a <HAL_RCCEx_PeriphCLKConfig+0x41e>
    switch (PeriphClkInit->Lpuart1ClockSelection)
9000be14:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
9000be18:	2905      	cmp	r1, #5
9000be1a:	f200 8408 	bhi.w	9000c62e <HAL_RCCEx_PeriphCLKConfig+0xbf2>
9000be1e:	e8df f011 	tbh	[pc, r1, lsl #1]
9000be22:	0011      	.short	0x0011
9000be24:	039b0009 	.word	0x039b0009
9000be28:	00110011 	.word	0x00110011
9000be2c:	0011      	.short	0x0011
9000be2e:	bf00      	nop
9000be30:	58024400 	.word	0x58024400
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
9000be34:	2101      	movs	r1, #1
9000be36:	f104 0008 	add.w	r0, r4, #8
9000be3a:	f7ff fd0b 	bl	9000b854 <RCCEx_PLL2_Config>
9000be3e:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
9000be40:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000be44:	2d00      	cmp	r5, #0
9000be46:	f040 8286 	bne.w	9000c356 <HAL_RCCEx_PeriphCLKConfig+0x91a>
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
9000be4a:	4fae      	ldr	r7, [pc, #696]	; (9000c104 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
9000be4c:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
9000be50:	6db9      	ldr	r1, [r7, #88]	; 0x58
9000be52:	f021 0107 	bic.w	r1, r1, #7
9000be56:	4301      	orrs	r1, r0
9000be58:	65b9      	str	r1, [r7, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
9000be5a:	0698      	lsls	r0, r3, #26
9000be5c:	d51f      	bpl.n	9000be9e <HAL_RCCEx_PeriphCLKConfig+0x462>
    switch (PeriphClkInit->Lptim1ClockSelection)
9000be5e:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
9000be62:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
9000be66:	f000 82f7 	beq.w	9000c458 <HAL_RCCEx_PeriphCLKConfig+0xa1c>
9000be6a:	f200 810b 	bhi.w	9000c084 <HAL_RCCEx_PeriphCLKConfig+0x648>
9000be6e:	b159      	cbz	r1, 9000be88 <HAL_RCCEx_PeriphCLKConfig+0x44c>
9000be70:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
9000be74:	f040 8110 	bne.w	9000c098 <HAL_RCCEx_PeriphCLKConfig+0x65c>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
9000be78:	2100      	movs	r1, #0
9000be7a:	f104 0008 	add.w	r0, r4, #8
9000be7e:	f7ff fce9 	bl	9000b854 <RCCEx_PLL2_Config>
9000be82:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
9000be84:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000be88:	2d00      	cmp	r5, #0
9000be8a:	f040 8260 	bne.w	9000c34e <HAL_RCCEx_PeriphCLKConfig+0x912>
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
9000be8e:	4f9d      	ldr	r7, [pc, #628]	; (9000c104 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
9000be90:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
9000be94:	6d79      	ldr	r1, [r7, #84]	; 0x54
9000be96:	f021 41e0 	bic.w	r1, r1, #1879048192	; 0x70000000
9000be9a:	4301      	orrs	r1, r0
9000be9c:	6579      	str	r1, [r7, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
9000be9e:	0659      	lsls	r1, r3, #25
9000bea0:	d51f      	bpl.n	9000bee2 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    switch (PeriphClkInit->Lptim2ClockSelection)
9000bea2:	f8d4 109c 	ldr.w	r1, [r4, #156]	; 0x9c
9000bea6:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
9000beaa:	f000 829b 	beq.w	9000c3e4 <HAL_RCCEx_PeriphCLKConfig+0x9a8>
9000beae:	f200 80f6 	bhi.w	9000c09e <HAL_RCCEx_PeriphCLKConfig+0x662>
9000beb2:	b159      	cbz	r1, 9000becc <HAL_RCCEx_PeriphCLKConfig+0x490>
9000beb4:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
9000beb8:	f040 80fb 	bne.w	9000c0b2 <HAL_RCCEx_PeriphCLKConfig+0x676>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
9000bebc:	2100      	movs	r1, #0
9000bebe:	f104 0008 	add.w	r0, r4, #8
9000bec2:	f7ff fcc7 	bl	9000b854 <RCCEx_PLL2_Config>
9000bec6:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
9000bec8:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000becc:	2d00      	cmp	r5, #0
9000bece:	f040 824e 	bne.w	9000c36e <HAL_RCCEx_PeriphCLKConfig+0x932>
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
9000bed2:	4f8c      	ldr	r7, [pc, #560]	; (9000c104 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
9000bed4:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
9000bed8:	6db9      	ldr	r1, [r7, #88]	; 0x58
9000beda:	f421 51e0 	bic.w	r1, r1, #7168	; 0x1c00
9000bede:	4301      	orrs	r1, r0
9000bee0:	65b9      	str	r1, [r7, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
9000bee2:	061f      	lsls	r7, r3, #24
9000bee4:	d51f      	bpl.n	9000bf26 <HAL_RCCEx_PeriphCLKConfig+0x4ea>
    switch (PeriphClkInit->Lptim345ClockSelection)
9000bee6:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
9000beea:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
9000beee:	f000 8289 	beq.w	9000c404 <HAL_RCCEx_PeriphCLKConfig+0x9c8>
9000bef2:	f200 80e1 	bhi.w	9000c0b8 <HAL_RCCEx_PeriphCLKConfig+0x67c>
9000bef6:	b159      	cbz	r1, 9000bf10 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
9000bef8:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
9000befc:	f040 80e6 	bne.w	9000c0cc <HAL_RCCEx_PeriphCLKConfig+0x690>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
9000bf00:	2100      	movs	r1, #0
9000bf02:	f104 0008 	add.w	r0, r4, #8
9000bf06:	f7ff fca5 	bl	9000b854 <RCCEx_PLL2_Config>
9000bf0a:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
9000bf0c:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000bf10:	2d00      	cmp	r5, #0
9000bf12:	f040 8228 	bne.w	9000c366 <HAL_RCCEx_PeriphCLKConfig+0x92a>
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
9000bf16:	4f7b      	ldr	r7, [pc, #492]	; (9000c104 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
9000bf18:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
9000bf1c:	6db9      	ldr	r1, [r7, #88]	; 0x58
9000bf1e:	f421 4160 	bic.w	r1, r1, #57344	; 0xe000
9000bf22:	4301      	orrs	r1, r0
9000bf24:	65b9      	str	r1, [r7, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
9000bf26:	0718      	lsls	r0, r3, #28
9000bf28:	d50b      	bpl.n	9000bf42 <HAL_RCCEx_PeriphCLKConfig+0x506>
    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
9000bf2a:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
9000bf2e:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
9000bf32:	f000 82a9 	beq.w	9000c488 <HAL_RCCEx_PeriphCLKConfig+0xa4c>
    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
9000bf36:	4f73      	ldr	r7, [pc, #460]	; (9000c104 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
9000bf38:	6d79      	ldr	r1, [r7, #84]	; 0x54
9000bf3a:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
9000bf3e:	4301      	orrs	r1, r0
9000bf40:	6579      	str	r1, [r7, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
9000bf42:	06d9      	lsls	r1, r3, #27
9000bf44:	d50b      	bpl.n	9000bf5e <HAL_RCCEx_PeriphCLKConfig+0x522>
    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
9000bf46:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
9000bf4a:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
9000bf4e:	f000 82a8 	beq.w	9000c4a2 <HAL_RCCEx_PeriphCLKConfig+0xa66>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
9000bf52:	4f6c      	ldr	r7, [pc, #432]	; (9000c104 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
9000bf54:	6db9      	ldr	r1, [r7, #88]	; 0x58
9000bf56:	f421 7140 	bic.w	r1, r1, #768	; 0x300
9000bf5a:	4301      	orrs	r1, r0
9000bf5c:	65b9      	str	r1, [r7, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
9000bf5e:	031f      	lsls	r7, r3, #12
9000bf60:	d50e      	bpl.n	9000bf80 <HAL_RCCEx_PeriphCLKConfig+0x544>
    switch (PeriphClkInit->AdcClockSelection)
9000bf62:	f8d4 10a4 	ldr.w	r1, [r4, #164]	; 0xa4
9000bf66:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
9000bf6a:	f000 80f4 	beq.w	9000c156 <HAL_RCCEx_PeriphCLKConfig+0x71a>
9000bf6e:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
9000bf72:	f000 80f8 	beq.w	9000c166 <HAL_RCCEx_PeriphCLKConfig+0x72a>
9000bf76:	2900      	cmp	r1, #0
9000bf78:	f000 821c 	beq.w	9000c3b4 <HAL_RCCEx_PeriphCLKConfig+0x978>
9000bf7c:	2601      	movs	r6, #1
9000bf7e:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
9000bf80:	0358      	lsls	r0, r3, #13
9000bf82:	d50f      	bpl.n	9000bfa4 <HAL_RCCEx_PeriphCLKConfig+0x568>
    switch (PeriphClkInit->UsbClockSelection)
9000bf84:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
9000bf88:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
9000bf8c:	f000 80cf 	beq.w	9000c12e <HAL_RCCEx_PeriphCLKConfig+0x6f2>
9000bf90:	f5b1 1f40 	cmp.w	r1, #3145728	; 0x300000
9000bf94:	f000 80d3 	beq.w	9000c13e <HAL_RCCEx_PeriphCLKConfig+0x702>
9000bf98:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
9000bf9c:	f000 8202 	beq.w	9000c3a4 <HAL_RCCEx_PeriphCLKConfig+0x968>
9000bfa0:	2601      	movs	r6, #1
9000bfa2:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
9000bfa4:	03d9      	lsls	r1, r3, #15
9000bfa6:	d509      	bpl.n	9000bfbc <HAL_RCCEx_PeriphCLKConfig+0x580>
    switch (PeriphClkInit->SdmmcClockSelection)
9000bfa8:	6d21      	ldr	r1, [r4, #80]	; 0x50
9000bfaa:	2900      	cmp	r1, #0
9000bfac:	f000 81f1 	beq.w	9000c392 <HAL_RCCEx_PeriphCLKConfig+0x956>
9000bfb0:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
9000bfb4:	f000 819d 	beq.w	9000c2f2 <HAL_RCCEx_PeriphCLKConfig+0x8b6>
9000bfb8:	2601      	movs	r6, #1
9000bfba:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
9000bfbc:	009f      	lsls	r7, r3, #2
9000bfbe:	f100 80f1 	bmi.w	9000c1a4 <HAL_RCCEx_PeriphCLKConfig+0x768>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
9000bfc2:	0398      	lsls	r0, r3, #14
9000bfc4:	d50c      	bpl.n	9000bfe0 <HAL_RCCEx_PeriphCLKConfig+0x5a4>
    switch (PeriphClkInit->RngClockSelection)
9000bfc6:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
9000bfca:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
9000bfce:	f000 81d8 	beq.w	9000c382 <HAL_RCCEx_PeriphCLKConfig+0x946>
9000bfd2:	d97e      	bls.n	9000c0d2 <HAL_RCCEx_PeriphCLKConfig+0x696>
9000bfd4:	f421 7080 	bic.w	r0, r1, #256	; 0x100
9000bfd8:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
9000bfdc:	d07b      	beq.n	9000c0d6 <HAL_RCCEx_PeriphCLKConfig+0x69a>
9000bfde:	2601      	movs	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
9000bfe0:	02d9      	lsls	r1, r3, #11
9000bfe2:	d506      	bpl.n	9000bff2 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
9000bfe4:	4847      	ldr	r0, [pc, #284]	; (9000c104 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
9000bfe6:	6f65      	ldr	r5, [r4, #116]	; 0x74
9000bfe8:	6d01      	ldr	r1, [r0, #80]	; 0x50
9000bfea:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
9000bfee:	4329      	orrs	r1, r5
9000bff0:	6501      	str	r1, [r0, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
9000bff2:	00df      	lsls	r7, r3, #3
9000bff4:	d507      	bpl.n	9000c006 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
9000bff6:	4843      	ldr	r0, [pc, #268]	; (9000c104 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
9000bff8:	f8d4 50b8 	ldr.w	r5, [r4, #184]	; 0xb8
9000bffc:	6901      	ldr	r1, [r0, #16]
9000bffe:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
9000c002:	4329      	orrs	r1, r5
9000c004:	6101      	str	r1, [r0, #16]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
9000c006:	029d      	lsls	r5, r3, #10
9000c008:	d506      	bpl.n	9000c018 <HAL_RCCEx_PeriphCLKConfig+0x5dc>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
9000c00a:	483e      	ldr	r0, [pc, #248]	; (9000c104 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
9000c00c:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
9000c00e:	6d01      	ldr	r1, [r0, #80]	; 0x50
9000c010:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
9000c014:	4329      	orrs	r1, r5
9000c016:	6501      	str	r1, [r0, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
9000c018:	0058      	lsls	r0, r3, #1
9000c01a:	d509      	bpl.n	9000c030 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
9000c01c:	4939      	ldr	r1, [pc, #228]	; (9000c104 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
9000c01e:	6908      	ldr	r0, [r1, #16]
9000c020:	f420 4000 	bic.w	r0, r0, #32768	; 0x8000
9000c024:	6108      	str	r0, [r1, #16]
9000c026:	6908      	ldr	r0, [r1, #16]
9000c028:	f8d4 50bc 	ldr.w	r5, [r4, #188]	; 0xbc
9000c02c:	4328      	orrs	r0, r5
9000c02e:	6108      	str	r0, [r1, #16]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
9000c030:	2b00      	cmp	r3, #0
9000c032:	da06      	bge.n	9000c042 <HAL_RCCEx_PeriphCLKConfig+0x606>
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
9000c034:	4833      	ldr	r0, [pc, #204]	; (9000c104 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
9000c036:	6d65      	ldr	r5, [r4, #84]	; 0x54
9000c038:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
9000c03a:	f021 5140 	bic.w	r1, r1, #805306368	; 0x30000000
9000c03e:	4329      	orrs	r1, r5
9000c040:	64c1      	str	r1, [r0, #76]	; 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
9000c042:	0219      	lsls	r1, r3, #8
9000c044:	d507      	bpl.n	9000c056 <HAL_RCCEx_PeriphCLKConfig+0x61a>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
9000c046:	492f      	ldr	r1, [pc, #188]	; (9000c104 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
9000c048:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
9000c04c:	6d4b      	ldr	r3, [r1, #84]	; 0x54
9000c04e:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
9000c052:	4303      	orrs	r3, r0
9000c054:	654b      	str	r3, [r1, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
9000c056:	07d3      	lsls	r3, r2, #31
9000c058:	f100 80b0 	bmi.w	9000c1bc <HAL_RCCEx_PeriphCLKConfig+0x780>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
9000c05c:	0797      	lsls	r7, r2, #30
9000c05e:	f100 80ba 	bmi.w	9000c1d6 <HAL_RCCEx_PeriphCLKConfig+0x79a>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
9000c062:	0755      	lsls	r5, r2, #29
9000c064:	f100 80c4 	bmi.w	9000c1f0 <HAL_RCCEx_PeriphCLKConfig+0x7b4>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
9000c068:	0710      	lsls	r0, r2, #28
9000c06a:	f100 80ce 	bmi.w	9000c20a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
9000c06e:	06d1      	lsls	r1, r2, #27
9000c070:	f100 80d8 	bmi.w	9000c224 <HAL_RCCEx_PeriphCLKConfig+0x7e8>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
9000c074:	0692      	lsls	r2, r2, #26
9000c076:	f100 8125 	bmi.w	9000c2c4 <HAL_RCCEx_PeriphCLKConfig+0x888>
    return HAL_OK;
9000c07a:	1e30      	subs	r0, r6, #0
9000c07c:	bf18      	it	ne
9000c07e:	2001      	movne	r0, #1
}
9000c080:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    switch (PeriphClkInit->Lptim1ClockSelection)
9000c084:	f021 5080 	bic.w	r0, r1, #268435456	; 0x10000000
9000c088:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
9000c08c:	f43f aefc 	beq.w	9000be88 <HAL_RCCEx_PeriphCLKConfig+0x44c>
9000c090:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
9000c094:	f43f aef8 	beq.w	9000be88 <HAL_RCCEx_PeriphCLKConfig+0x44c>
9000c098:	2601      	movs	r6, #1
9000c09a:	4635      	mov	r5, r6
9000c09c:	e6ff      	b.n	9000be9e <HAL_RCCEx_PeriphCLKConfig+0x462>
    switch (PeriphClkInit->Lptim2ClockSelection)
9000c09e:	f421 6080 	bic.w	r0, r1, #1024	; 0x400
9000c0a2:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
9000c0a6:	f43f af11 	beq.w	9000becc <HAL_RCCEx_PeriphCLKConfig+0x490>
9000c0aa:	f5b1 6f40 	cmp.w	r1, #3072	; 0xc00
9000c0ae:	f43f af0d 	beq.w	9000becc <HAL_RCCEx_PeriphCLKConfig+0x490>
9000c0b2:	2601      	movs	r6, #1
9000c0b4:	4635      	mov	r5, r6
9000c0b6:	e714      	b.n	9000bee2 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    switch (PeriphClkInit->Lptim345ClockSelection)
9000c0b8:	f421 5000 	bic.w	r0, r1, #8192	; 0x2000
9000c0bc:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
9000c0c0:	f43f af26 	beq.w	9000bf10 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
9000c0c4:	f5b1 4fc0 	cmp.w	r1, #24576	; 0x6000
9000c0c8:	f43f af22 	beq.w	9000bf10 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
9000c0cc:	2601      	movs	r6, #1
9000c0ce:	4635      	mov	r5, r6
9000c0d0:	e729      	b.n	9000bf26 <HAL_RCCEx_PeriphCLKConfig+0x4ea>
    switch (PeriphClkInit->RngClockSelection)
9000c0d2:	2900      	cmp	r1, #0
9000c0d4:	d183      	bne.n	9000bfde <HAL_RCCEx_PeriphCLKConfig+0x5a2>
    if (ret == HAL_OK)
9000c0d6:	2d00      	cmp	r5, #0
9000c0d8:	f040 8151 	bne.w	9000c37e <HAL_RCCEx_PeriphCLKConfig+0x942>
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
9000c0dc:	4d09      	ldr	r5, [pc, #36]	; (9000c104 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
9000c0de:	6d68      	ldr	r0, [r5, #84]	; 0x54
9000c0e0:	f420 7040 	bic.w	r0, r0, #768	; 0x300
9000c0e4:	4301      	orrs	r1, r0
9000c0e6:	6569      	str	r1, [r5, #84]	; 0x54
9000c0e8:	e77a      	b.n	9000bfe0 <HAL_RCCEx_PeriphCLKConfig+0x5a4>
    switch (PeriphClkInit->Sai1ClockSelection)
9000c0ea:	4635      	mov	r5, r6
    if (ret == HAL_OK)
9000c0ec:	2d00      	cmp	r5, #0
9000c0ee:	f040 80fb 	bne.w	9000c2e8 <HAL_RCCEx_PeriphCLKConfig+0x8ac>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
9000c0f2:	4f04      	ldr	r7, [pc, #16]	; (9000c104 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
9000c0f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
9000c0f6:	6d39      	ldr	r1, [r7, #80]	; 0x50
9000c0f8:	f021 0107 	bic.w	r1, r1, #7
9000c0fc:	4301      	orrs	r1, r0
9000c0fe:	6539      	str	r1, [r7, #80]	; 0x50
9000c100:	e4d7      	b.n	9000bab2 <HAL_RCCEx_PeriphCLKConfig+0x76>
9000c102:	bf00      	nop
9000c104:	58024400 	.word	0x58024400
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
9000c108:	2101      	movs	r1, #1
9000c10a:	f104 0008 	add.w	r0, r4, #8
9000c10e:	f7ff fba1 	bl	9000b854 <RCCEx_PLL2_Config>
9000c112:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
9000c114:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000c118:	2d00      	cmp	r5, #0
9000c11a:	f040 811a 	bne.w	9000c352 <HAL_RCCEx_PeriphCLKConfig+0x916>
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
9000c11e:	4fb7      	ldr	r7, [pc, #732]	; (9000c3fc <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
9000c120:	6f20      	ldr	r0, [r4, #112]	; 0x70
9000c122:	6d39      	ldr	r1, [r7, #80]	; 0x50
9000c124:	f021 5140 	bic.w	r1, r1, #805306368	; 0x30000000
9000c128:	4301      	orrs	r1, r0
9000c12a:	6539      	str	r1, [r7, #80]	; 0x50
9000c12c:	e5b6      	b.n	9000bc9c <HAL_RCCEx_PeriphCLKConfig+0x260>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
9000c12e:	2101      	movs	r1, #1
9000c130:	f104 0028 	add.w	r0, r4, #40	; 0x28
9000c134:	f7ff fc08 	bl	9000b948 <RCCEx_PLL3_Config>
9000c138:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
9000c13a:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000c13e:	2d00      	cmp	r5, #0
9000c140:	f040 811b 	bne.w	9000c37a <HAL_RCCEx_PeriphCLKConfig+0x93e>
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
9000c144:	4fad      	ldr	r7, [pc, #692]	; (9000c3fc <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
9000c146:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
9000c14a:	6d79      	ldr	r1, [r7, #84]	; 0x54
9000c14c:	f421 1140 	bic.w	r1, r1, #3145728	; 0x300000
9000c150:	4301      	orrs	r1, r0
9000c152:	6579      	str	r1, [r7, #84]	; 0x54
9000c154:	e726      	b.n	9000bfa4 <HAL_RCCEx_PeriphCLKConfig+0x568>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
9000c156:	2102      	movs	r1, #2
9000c158:	f104 0028 	add.w	r0, r4, #40	; 0x28
9000c15c:	f7ff fbf4 	bl	9000b948 <RCCEx_PLL3_Config>
9000c160:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
9000c162:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000c166:	2d00      	cmp	r5, #0
9000c168:	f040 8105 	bne.w	9000c376 <HAL_RCCEx_PeriphCLKConfig+0x93a>
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
9000c16c:	4fa3      	ldr	r7, [pc, #652]	; (9000c3fc <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
9000c16e:	f8d4 00a4 	ldr.w	r0, [r4, #164]	; 0xa4
9000c172:	6db9      	ldr	r1, [r7, #88]	; 0x58
9000c174:	f421 3140 	bic.w	r1, r1, #196608	; 0x30000
9000c178:	4301      	orrs	r1, r0
9000c17a:	65b9      	str	r1, [r7, #88]	; 0x58
9000c17c:	e700      	b.n	9000bf80 <HAL_RCCEx_PeriphCLKConfig+0x544>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
9000c17e:	2101      	movs	r1, #1
9000c180:	f104 0008 	add.w	r0, r4, #8
9000c184:	f7ff fb66 	bl	9000b854 <RCCEx_PLL2_Config>
9000c188:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
9000c18a:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000c18e:	2d00      	cmp	r5, #0
9000c190:	f040 80db 	bne.w	9000c34a <HAL_RCCEx_PeriphCLKConfig+0x90e>
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
9000c194:	4f99      	ldr	r7, [pc, #612]	; (9000c3fc <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
9000c196:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
9000c198:	6d79      	ldr	r1, [r7, #84]	; 0x54
9000c19a:	f021 0138 	bic.w	r1, r1, #56	; 0x38
9000c19e:	4301      	orrs	r1, r0
9000c1a0:	6579      	str	r1, [r7, #84]	; 0x54
9000c1a2:	e615      	b.n	9000bdd0 <HAL_RCCEx_PeriphCLKConfig+0x394>
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
9000c1a4:	2102      	movs	r1, #2
9000c1a6:	f104 0028 	add.w	r0, r4, #40	; 0x28
9000c1aa:	f7ff fbcd 	bl	9000b948 <RCCEx_PLL3_Config>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
9000c1ae:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
9000c1b2:	2800      	cmp	r0, #0
9000c1b4:	f43f af05 	beq.w	9000bfc2 <HAL_RCCEx_PeriphCLKConfig+0x586>
      status = HAL_ERROR;
9000c1b8:	2601      	movs	r6, #1
9000c1ba:	e702      	b.n	9000bfc2 <HAL_RCCEx_PeriphCLKConfig+0x586>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
9000c1bc:	2100      	movs	r1, #0
9000c1be:	f104 0008 	add.w	r0, r4, #8
9000c1c2:	f7ff fb47 	bl	9000b854 <RCCEx_PLL2_Config>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
9000c1c6:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
9000c1c8:	2800      	cmp	r0, #0
9000c1ca:	f43f af47 	beq.w	9000c05c <HAL_RCCEx_PeriphCLKConfig+0x620>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
9000c1ce:	0797      	lsls	r7, r2, #30
9000c1d0:	4606      	mov	r6, r0
9000c1d2:	f57f af46 	bpl.w	9000c062 <HAL_RCCEx_PeriphCLKConfig+0x626>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
9000c1d6:	2101      	movs	r1, #1
9000c1d8:	f104 0008 	add.w	r0, r4, #8
9000c1dc:	f7ff fb3a 	bl	9000b854 <RCCEx_PLL2_Config>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
9000c1e0:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
9000c1e2:	2800      	cmp	r0, #0
9000c1e4:	f43f af3d 	beq.w	9000c062 <HAL_RCCEx_PeriphCLKConfig+0x626>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
9000c1e8:	0755      	lsls	r5, r2, #29
9000c1ea:	4606      	mov	r6, r0
9000c1ec:	f57f af3c 	bpl.w	9000c068 <HAL_RCCEx_PeriphCLKConfig+0x62c>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
9000c1f0:	2102      	movs	r1, #2
9000c1f2:	f104 0008 	add.w	r0, r4, #8
9000c1f6:	f7ff fb2d 	bl	9000b854 <RCCEx_PLL2_Config>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
9000c1fa:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
9000c1fc:	2800      	cmp	r0, #0
9000c1fe:	f43f af33 	beq.w	9000c068 <HAL_RCCEx_PeriphCLKConfig+0x62c>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
9000c202:	4606      	mov	r6, r0
9000c204:	0710      	lsls	r0, r2, #28
9000c206:	f57f af32 	bpl.w	9000c06e <HAL_RCCEx_PeriphCLKConfig+0x632>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
9000c20a:	2100      	movs	r1, #0
9000c20c:	f104 0028 	add.w	r0, r4, #40	; 0x28
9000c210:	f7ff fb9a 	bl	9000b948 <RCCEx_PLL3_Config>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
9000c214:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
9000c216:	2800      	cmp	r0, #0
9000c218:	f43f af29 	beq.w	9000c06e <HAL_RCCEx_PeriphCLKConfig+0x632>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
9000c21c:	06d1      	lsls	r1, r2, #27
9000c21e:	4606      	mov	r6, r0
9000c220:	f57f af28 	bpl.w	9000c074 <HAL_RCCEx_PeriphCLKConfig+0x638>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
9000c224:	f104 0528 	add.w	r5, r4, #40	; 0x28
9000c228:	2101      	movs	r1, #1
9000c22a:	4628      	mov	r0, r5
9000c22c:	f7ff fb8c 	bl	9000b948 <RCCEx_PLL3_Config>
    if (ret == HAL_OK)
9000c230:	2800      	cmp	r0, #0
9000c232:	f000 80c9 	beq.w	9000c3c8 <HAL_RCCEx_PeriphCLKConfig+0x98c>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
9000c236:	6863      	ldr	r3, [r4, #4]
9000c238:	069b      	lsls	r3, r3, #26
9000c23a:	d54c      	bpl.n	9000c2d6 <HAL_RCCEx_PeriphCLKConfig+0x89a>
9000c23c:	4606      	mov	r6, r0
9000c23e:	e043      	b.n	9000c2c8 <HAL_RCCEx_PeriphCLKConfig+0x88c>
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
9000c240:	4f6f      	ldr	r7, [pc, #444]	; (9000c400 <HAL_RCCEx_PeriphCLKConfig+0x9c4>)
9000c242:	683b      	ldr	r3, [r7, #0]
9000c244:	f443 7380 	orr.w	r3, r3, #256	; 0x100
9000c248:	603b      	str	r3, [r7, #0]
    tickstart = HAL_GetTick();
9000c24a:	f7fa fd7b 	bl	90006d44 <HAL_GetTick>
9000c24e:	4680      	mov	r8, r0
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
9000c250:	e006      	b.n	9000c260 <HAL_RCCEx_PeriphCLKConfig+0x824>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
9000c252:	f7fa fd77 	bl	90006d44 <HAL_GetTick>
9000c256:	eba0 0008 	sub.w	r0, r0, r8
9000c25a:	2864      	cmp	r0, #100	; 0x64
9000c25c:	f200 81a0 	bhi.w	9000c5a0 <HAL_RCCEx_PeriphCLKConfig+0xb64>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
9000c260:	683b      	ldr	r3, [r7, #0]
9000c262:	05da      	lsls	r2, r3, #23
9000c264:	d5f5      	bpl.n	9000c252 <HAL_RCCEx_PeriphCLKConfig+0x816>
    if (ret == HAL_OK)
9000c266:	2d00      	cmp	r5, #0
9000c268:	f040 81d4 	bne.w	9000c614 <HAL_RCCEx_PeriphCLKConfig+0xbd8>
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
9000c26c:	4a63      	ldr	r2, [pc, #396]	; (9000c3fc <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
9000c26e:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
9000c272:	6f11      	ldr	r1, [r2, #112]	; 0x70
9000c274:	4059      	eors	r1, r3
9000c276:	f411 7f40 	tst.w	r1, #768	; 0x300
9000c27a:	d00b      	beq.n	9000c294 <HAL_RCCEx_PeriphCLKConfig+0x858>
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
9000c27c:	6f11      	ldr	r1, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_FORCE();
9000c27e:	6f10      	ldr	r0, [r2, #112]	; 0x70
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
9000c280:	f421 7140 	bic.w	r1, r1, #768	; 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
9000c284:	f440 3080 	orr.w	r0, r0, #65536	; 0x10000
9000c288:	6710      	str	r0, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
9000c28a:	6f10      	ldr	r0, [r2, #112]	; 0x70
9000c28c:	f420 3080 	bic.w	r0, r0, #65536	; 0x10000
9000c290:	6710      	str	r0, [r2, #112]	; 0x70
        RCC->BDCR = tmpreg;
9000c292:	6711      	str	r1, [r2, #112]	; 0x70
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
9000c294:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
9000c298:	f000 819e 	beq.w	9000c5d8 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
9000c29c:	f403 7240 	and.w	r2, r3, #768	; 0x300
9000c2a0:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
9000c2a4:	f000 81ac 	beq.w	9000c600 <HAL_RCCEx_PeriphCLKConfig+0xbc4>
9000c2a8:	4954      	ldr	r1, [pc, #336]	; (9000c3fc <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
9000c2aa:	690a      	ldr	r2, [r1, #16]
9000c2ac:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
9000c2b0:	610a      	str	r2, [r1, #16]
9000c2b2:	4852      	ldr	r0, [pc, #328]	; (9000c3fc <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
9000c2b4:	f3c3 010b 	ubfx	r1, r3, #0, #12
9000c2b8:	6f07      	ldr	r7, [r0, #112]	; 0x70
9000c2ba:	4339      	orrs	r1, r7
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
9000c2bc:	e9d4 3200 	ldrd	r3, r2, [r4]
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
9000c2c0:	6701      	str	r1, [r0, #112]	; 0x70
9000c2c2:	e553      	b.n	9000bd6c <HAL_RCCEx_PeriphCLKConfig+0x330>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
9000c2c4:	f104 0528 	add.w	r5, r4, #40	; 0x28
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
9000c2c8:	2102      	movs	r1, #2
9000c2ca:	4628      	mov	r0, r5
9000c2cc:	f7ff fb3c 	bl	9000b948 <RCCEx_PLL3_Config>
    if (ret == HAL_OK)
9000c2d0:	2800      	cmp	r0, #0
9000c2d2:	f43f aed2 	beq.w	9000c07a <HAL_RCCEx_PeriphCLKConfig+0x63e>
  return HAL_ERROR;
9000c2d6:	2001      	movs	r0, #1
}
9000c2d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
9000c2dc:	462e      	mov	r6, r5
9000c2de:	e450      	b.n	9000bb82 <HAL_RCCEx_PeriphCLKConfig+0x146>
9000c2e0:	462e      	mov	r6, r5
9000c2e2:	e406      	b.n	9000baf2 <HAL_RCCEx_PeriphCLKConfig+0xb6>
9000c2e4:	462e      	mov	r6, r5
9000c2e6:	e489      	b.n	9000bbfc <HAL_RCCEx_PeriphCLKConfig+0x1c0>
9000c2e8:	462e      	mov	r6, r5
9000c2ea:	f7ff bbe2 	b.w	9000bab2 <HAL_RCCEx_PeriphCLKConfig+0x76>
9000c2ee:	462e      	mov	r6, r5
9000c2f0:	e423      	b.n	9000bb3a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
9000c2f2:	2102      	movs	r1, #2
9000c2f4:	f104 0008 	add.w	r0, r4, #8
9000c2f8:	f7ff faac 	bl	9000b854 <RCCEx_PLL2_Config>
9000c2fc:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
9000c2fe:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000c302:	2d00      	cmp	r5, #0
9000c304:	d14c      	bne.n	9000c3a0 <HAL_RCCEx_PeriphCLKConfig+0x964>
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
9000c306:	4f3d      	ldr	r7, [pc, #244]	; (9000c3fc <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
9000c308:	6d20      	ldr	r0, [r4, #80]	; 0x50
9000c30a:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
9000c30c:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
9000c310:	4301      	orrs	r1, r0
9000c312:	64f9      	str	r1, [r7, #76]	; 0x4c
9000c314:	e652      	b.n	9000bfbc <HAL_RCCEx_PeriphCLKConfig+0x580>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
9000c316:	4839      	ldr	r0, [pc, #228]	; (9000c3fc <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
9000c318:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
9000c31a:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
9000c31e:	62c1      	str	r1, [r0, #44]	; 0x2c
        break;
9000c320:	e462      	b.n	9000bbe8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
9000c322:	4836      	ldr	r0, [pc, #216]	; (9000c3fc <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
9000c324:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
9000c326:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
9000c32a:	62c1      	str	r1, [r0, #44]	; 0x2c
        break;
9000c32c:	e41e      	b.n	9000bb6c <HAL_RCCEx_PeriphCLKConfig+0x130>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
9000c32e:	4833      	ldr	r0, [pc, #204]	; (9000c3fc <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
9000c330:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
9000c332:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
9000c336:	62c1      	str	r1, [r0, #44]	; 0x2c
        break;
9000c338:	f7ff bbd1 	b.w	9000bade <HAL_RCCEx_PeriphCLKConfig+0xa2>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
9000c33c:	482f      	ldr	r0, [pc, #188]	; (9000c3fc <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
9000c33e:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
9000c340:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
9000c344:	62c1      	str	r1, [r0, #44]	; 0x2c
        break;
9000c346:	f7ff bbed 	b.w	9000bb24 <HAL_RCCEx_PeriphCLKConfig+0xe8>
9000c34a:	462e      	mov	r6, r5
9000c34c:	e540      	b.n	9000bdd0 <HAL_RCCEx_PeriphCLKConfig+0x394>
9000c34e:	462e      	mov	r6, r5
9000c350:	e5a5      	b.n	9000be9e <HAL_RCCEx_PeriphCLKConfig+0x462>
9000c352:	462e      	mov	r6, r5
9000c354:	e4a2      	b.n	9000bc9c <HAL_RCCEx_PeriphCLKConfig+0x260>
9000c356:	462e      	mov	r6, r5
9000c358:	e57f      	b.n	9000be5a <HAL_RCCEx_PeriphCLKConfig+0x41e>
9000c35a:	462e      	mov	r6, r5
9000c35c:	e42c      	b.n	9000bbb8 <HAL_RCCEx_PeriphCLKConfig+0x17c>
9000c35e:	462e      	mov	r6, r5
9000c360:	e501      	b.n	9000bd66 <HAL_RCCEx_PeriphCLKConfig+0x32a>
9000c362:	462e      	mov	r6, r5
9000c364:	e46a      	b.n	9000bc3c <HAL_RCCEx_PeriphCLKConfig+0x200>
9000c366:	462e      	mov	r6, r5
9000c368:	e5dd      	b.n	9000bf26 <HAL_RCCEx_PeriphCLKConfig+0x4ea>
9000c36a:	462e      	mov	r6, r5
9000c36c:	e486      	b.n	9000bc7c <HAL_RCCEx_PeriphCLKConfig+0x240>
9000c36e:	462e      	mov	r6, r5
9000c370:	e5b7      	b.n	9000bee2 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
9000c372:	462e      	mov	r6, r5
9000c374:	e54c      	b.n	9000be10 <HAL_RCCEx_PeriphCLKConfig+0x3d4>
9000c376:	462e      	mov	r6, r5
9000c378:	e602      	b.n	9000bf80 <HAL_RCCEx_PeriphCLKConfig+0x544>
9000c37a:	462e      	mov	r6, r5
9000c37c:	e612      	b.n	9000bfa4 <HAL_RCCEx_PeriphCLKConfig+0x568>
9000c37e:	462e      	mov	r6, r5
9000c380:	e62e      	b.n	9000bfe0 <HAL_RCCEx_PeriphCLKConfig+0x5a4>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
9000c382:	4f1e      	ldr	r7, [pc, #120]	; (9000c3fc <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
9000c384:	6af8      	ldr	r0, [r7, #44]	; 0x2c
9000c386:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
9000c38a:	62f8      	str	r0, [r7, #44]	; 0x2c
    if (ret == HAL_OK)
9000c38c:	2d00      	cmp	r5, #0
9000c38e:	d1f6      	bne.n	9000c37e <HAL_RCCEx_PeriphCLKConfig+0x942>
9000c390:	e6a4      	b.n	9000c0dc <HAL_RCCEx_PeriphCLKConfig+0x6a0>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
9000c392:	481a      	ldr	r0, [pc, #104]	; (9000c3fc <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
9000c394:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
9000c396:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
9000c39a:	62c1      	str	r1, [r0, #44]	; 0x2c
    if (ret == HAL_OK)
9000c39c:	2d00      	cmp	r5, #0
9000c39e:	d0b2      	beq.n	9000c306 <HAL_RCCEx_PeriphCLKConfig+0x8ca>
9000c3a0:	462e      	mov	r6, r5
9000c3a2:	e60b      	b.n	9000bfbc <HAL_RCCEx_PeriphCLKConfig+0x580>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
9000c3a4:	4815      	ldr	r0, [pc, #84]	; (9000c3fc <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
9000c3a6:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
9000c3a8:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
9000c3ac:	62c1      	str	r1, [r0, #44]	; 0x2c
    if (ret == HAL_OK)
9000c3ae:	2d00      	cmp	r5, #0
9000c3b0:	d1e3      	bne.n	9000c37a <HAL_RCCEx_PeriphCLKConfig+0x93e>
9000c3b2:	e6c7      	b.n	9000c144 <HAL_RCCEx_PeriphCLKConfig+0x708>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
9000c3b4:	f104 0008 	add.w	r0, r4, #8
9000c3b8:	f7ff fa4c 	bl	9000b854 <RCCEx_PLL2_Config>
9000c3bc:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
9000c3be:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000c3c2:	2d00      	cmp	r5, #0
9000c3c4:	d1d7      	bne.n	9000c376 <HAL_RCCEx_PeriphCLKConfig+0x93a>
9000c3c6:	e6d1      	b.n	9000c16c <HAL_RCCEx_PeriphCLKConfig+0x730>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
9000c3c8:	6862      	ldr	r2, [r4, #4]
9000c3ca:	e653      	b.n	9000c074 <HAL_RCCEx_PeriphCLKConfig+0x638>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
9000c3cc:	2102      	movs	r1, #2
9000c3ce:	f104 0008 	add.w	r0, r4, #8
9000c3d2:	f7ff fa3f 	bl	9000b854 <RCCEx_PLL2_Config>
9000c3d6:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
9000c3d8:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000c3dc:	2d00      	cmp	r5, #0
9000c3de:	d1bc      	bne.n	9000c35a <HAL_RCCEx_PeriphCLKConfig+0x91e>
9000c3e0:	f7ff bbe3 	b.w	9000bbaa <HAL_RCCEx_PeriphCLKConfig+0x16e>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
9000c3e4:	2102      	movs	r1, #2
9000c3e6:	f104 0028 	add.w	r0, r4, #40	; 0x28
9000c3ea:	f7ff faad 	bl	9000b948 <RCCEx_PLL3_Config>
9000c3ee:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
9000c3f0:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000c3f4:	2d00      	cmp	r5, #0
9000c3f6:	d1ba      	bne.n	9000c36e <HAL_RCCEx_PeriphCLKConfig+0x932>
9000c3f8:	e56b      	b.n	9000bed2 <HAL_RCCEx_PeriphCLKConfig+0x496>
9000c3fa:	bf00      	nop
9000c3fc:	58024400 	.word	0x58024400
9000c400:	58024800 	.word	0x58024800
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
9000c404:	2102      	movs	r1, #2
9000c406:	f104 0028 	add.w	r0, r4, #40	; 0x28
9000c40a:	f7ff fa9d 	bl	9000b948 <RCCEx_PLL3_Config>
9000c40e:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
9000c410:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000c414:	2d00      	cmp	r5, #0
9000c416:	d1a6      	bne.n	9000c366 <HAL_RCCEx_PeriphCLKConfig+0x92a>
9000c418:	e57d      	b.n	9000bf16 <HAL_RCCEx_PeriphCLKConfig+0x4da>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
9000c41a:	4886      	ldr	r0, [pc, #536]	; (9000c634 <HAL_RCCEx_PeriphCLKConfig+0xbf8>)
9000c41c:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
9000c41e:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
9000c422:	62c1      	str	r1, [r0, #44]	; 0x2c
    if (ret == HAL_OK)
9000c424:	2d00      	cmp	r5, #0
9000c426:	d194      	bne.n	9000c352 <HAL_RCCEx_PeriphCLKConfig+0x916>
9000c428:	e679      	b.n	9000c11e <HAL_RCCEx_PeriphCLKConfig+0x6e2>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
9000c42a:	2101      	movs	r1, #1
9000c42c:	f104 0028 	add.w	r0, r4, #40	; 0x28
9000c430:	f7ff fa8a 	bl	9000b948 <RCCEx_PLL3_Config>
9000c434:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
9000c436:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000c43a:	2d00      	cmp	r5, #0
9000c43c:	d191      	bne.n	9000c362 <HAL_RCCEx_PeriphCLKConfig+0x926>
9000c43e:	f7ff bbf6 	b.w	9000bc2e <HAL_RCCEx_PeriphCLKConfig+0x1f2>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
9000c442:	2101      	movs	r1, #1
9000c444:	f104 0028 	add.w	r0, r4, #40	; 0x28
9000c448:	f7ff fa7e 	bl	9000b948 <RCCEx_PLL3_Config>
9000c44c:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
9000c44e:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000c452:	2d00      	cmp	r5, #0
9000c454:	d189      	bne.n	9000c36a <HAL_RCCEx_PeriphCLKConfig+0x92e>
9000c456:	e409      	b.n	9000bc6c <HAL_RCCEx_PeriphCLKConfig+0x230>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
9000c458:	2102      	movs	r1, #2
9000c45a:	f104 0028 	add.w	r0, r4, #40	; 0x28
9000c45e:	f7ff fa73 	bl	9000b948 <RCCEx_PLL3_Config>
9000c462:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
9000c464:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000c468:	2d00      	cmp	r5, #0
9000c46a:	f47f af70 	bne.w	9000c34e <HAL_RCCEx_PeriphCLKConfig+0x912>
9000c46e:	e50e      	b.n	9000be8e <HAL_RCCEx_PeriphCLKConfig+0x452>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
9000c470:	2102      	movs	r1, #2
9000c472:	f104 0008 	add.w	r0, r4, #8
9000c476:	f7ff f9ed 	bl	9000b854 <RCCEx_PLL2_Config>
9000c47a:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
9000c47c:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000c480:	2d00      	cmp	r5, #0
9000c482:	f47f af6c 	bne.w	9000c35e <HAL_RCCEx_PeriphCLKConfig+0x922>
9000c486:	e467      	b.n	9000bd58 <HAL_RCCEx_PeriphCLKConfig+0x31c>
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
9000c488:	2102      	movs	r1, #2
9000c48a:	f104 0028 	add.w	r0, r4, #40	; 0x28
9000c48e:	f7ff fa5b 	bl	9000b948 <RCCEx_PLL3_Config>
9000c492:	2800      	cmp	r0, #0
9000c494:	f040 8094 	bne.w	9000c5c0 <HAL_RCCEx_PeriphCLKConfig+0xb84>
    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
9000c498:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
9000c49c:	e9d4 3200 	ldrd	r3, r2, [r4]
9000c4a0:	e549      	b.n	9000bf36 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
9000c4a2:	2102      	movs	r1, #2
9000c4a4:	f104 0028 	add.w	r0, r4, #40	; 0x28
9000c4a8:	f7ff fa4e 	bl	9000b948 <RCCEx_PLL3_Config>
9000c4ac:	2800      	cmp	r0, #0
9000c4ae:	f040 808d 	bne.w	9000c5cc <HAL_RCCEx_PeriphCLKConfig+0xb90>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
9000c4b2:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
9000c4b6:	e9d4 3200 	ldrd	r3, r2, [r4]
9000c4ba:	e54a      	b.n	9000bf52 <HAL_RCCEx_PeriphCLKConfig+0x516>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
9000c4bc:	e9d4 3200 	ldrd	r3, r2, [r4]
9000c4c0:	f7ff bae9 	b.w	9000ba96 <HAL_RCCEx_PeriphCLKConfig+0x5a>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
9000c4c4:	2100      	movs	r1, #0
9000c4c6:	f104 0028 	add.w	r0, r4, #40	; 0x28
9000c4ca:	f7ff fa3d 	bl	9000b948 <RCCEx_PLL3_Config>
9000c4ce:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
9000c4d0:	e9d4 3200 	ldrd	r3, r2, [r4]
        break;
9000c4d4:	f7ff bb4a 	b.w	9000bb6c <HAL_RCCEx_PeriphCLKConfig+0x130>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
9000c4d8:	2100      	movs	r1, #0
9000c4da:	f104 0028 	add.w	r0, r4, #40	; 0x28
9000c4de:	f7ff fa33 	bl	9000b948 <RCCEx_PLL3_Config>
9000c4e2:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
9000c4e4:	e9d4 3200 	ldrd	r3, r2, [r4]
        break;
9000c4e8:	e600      	b.n	9000c0ec <HAL_RCCEx_PeriphCLKConfig+0x6b0>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
9000c4ea:	2100      	movs	r1, #0
9000c4ec:	f104 0028 	add.w	r0, r4, #40	; 0x28
9000c4f0:	f7ff fa2a 	bl	9000b948 <RCCEx_PLL3_Config>
9000c4f4:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
9000c4f6:	e9d4 3200 	ldrd	r3, r2, [r4]
        break;
9000c4fa:	f7ff baf0 	b.w	9000bade <HAL_RCCEx_PeriphCLKConfig+0xa2>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
9000c4fe:	2102      	movs	r1, #2
9000c500:	3028      	adds	r0, #40	; 0x28
9000c502:	f7ff fa21 	bl	9000b948 <RCCEx_PLL3_Config>
9000c506:	4606      	mov	r6, r0
    if (ret == HAL_OK)
9000c508:	2e00      	cmp	r6, #0
9000c50a:	f43f aab5 	beq.w	9000ba78 <HAL_RCCEx_PeriphCLKConfig+0x3c>
9000c50e:	e7d5      	b.n	9000c4bc <HAL_RCCEx_PeriphCLKConfig+0xa80>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
9000c510:	4848      	ldr	r0, [pc, #288]	; (9000c634 <HAL_RCCEx_PeriphCLKConfig+0xbf8>)
        break;
9000c512:	4635      	mov	r5, r6
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
9000c514:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
9000c516:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
9000c51a:	62c1      	str	r1, [r0, #44]	; 0x2c
        break;
9000c51c:	e5e6      	b.n	9000c0ec <HAL_RCCEx_PeriphCLKConfig+0x6b0>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
9000c51e:	2100      	movs	r1, #0
9000c520:	f104 0008 	add.w	r0, r4, #8
9000c524:	f7ff f996 	bl	9000b854 <RCCEx_PLL2_Config>
9000c528:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
9000c52a:	e9d4 3200 	ldrd	r3, r2, [r4]
        break;
9000c52e:	e5dd      	b.n	9000c0ec <HAL_RCCEx_PeriphCLKConfig+0x6b0>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
9000c530:	2100      	movs	r1, #0
9000c532:	f104 0028 	add.w	r0, r4, #40	; 0x28
9000c536:	f7ff fa07 	bl	9000b948 <RCCEx_PLL3_Config>
9000c53a:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
9000c53c:	e9d4 3200 	ldrd	r3, r2, [r4]
        break;
9000c540:	f7ff bb52 	b.w	9000bbe8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
9000c544:	2100      	movs	r1, #0
9000c546:	f104 0028 	add.w	r0, r4, #40	; 0x28
9000c54a:	f7ff f9fd 	bl	9000b948 <RCCEx_PLL3_Config>
9000c54e:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
9000c550:	e9d4 3200 	ldrd	r3, r2, [r4]
        break;
9000c554:	f7ff bae6 	b.w	9000bb24 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
9000c558:	2101      	movs	r1, #1
9000c55a:	f104 0028 	add.w	r0, r4, #40	; 0x28
9000c55e:	f7ff f9f3 	bl	9000b948 <RCCEx_PLL3_Config>
9000c562:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
9000c564:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000c568:	2d00      	cmp	r5, #0
9000c56a:	f47f aef4 	bne.w	9000c356 <HAL_RCCEx_PeriphCLKConfig+0x91a>
9000c56e:	e46c      	b.n	9000be4a <HAL_RCCEx_PeriphCLKConfig+0x40e>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
9000c570:	2101      	movs	r1, #1
9000c572:	f104 0028 	add.w	r0, r4, #40	; 0x28
9000c576:	f7ff f9e7 	bl	9000b948 <RCCEx_PLL3_Config>
9000c57a:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
9000c57c:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000c580:	2d00      	cmp	r5, #0
9000c582:	f47f aef6 	bne.w	9000c372 <HAL_RCCEx_PeriphCLKConfig+0x936>
9000c586:	e43c      	b.n	9000be02 <HAL_RCCEx_PeriphCLKConfig+0x3c6>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
9000c588:	2101      	movs	r1, #1
9000c58a:	f104 0028 	add.w	r0, r4, #40	; 0x28
9000c58e:	f7ff f9db 	bl	9000b948 <RCCEx_PLL3_Config>
9000c592:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
9000c594:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000c598:	2d00      	cmp	r5, #0
9000c59a:	f47f aed6 	bne.w	9000c34a <HAL_RCCEx_PeriphCLKConfig+0x90e>
9000c59e:	e5f9      	b.n	9000c194 <HAL_RCCEx_PeriphCLKConfig+0x758>
        status = ret;
9000c5a0:	2603      	movs	r6, #3
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
9000c5a2:	e9d4 3200 	ldrd	r3, r2, [r4]
9000c5a6:	4635      	mov	r5, r6
9000c5a8:	f7ff bbe0 	b.w	9000bd6c <HAL_RCCEx_PeriphCLKConfig+0x330>
    switch (PeriphClkInit->SpdifrxClockSelection)
9000c5ac:	2601      	movs	r6, #1
9000c5ae:	f7ff ba72 	b.w	9000ba96 <HAL_RCCEx_PeriphCLKConfig+0x5a>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
9000c5b2:	4d20      	ldr	r5, [pc, #128]	; (9000c634 <HAL_RCCEx_PeriphCLKConfig+0xbf8>)
9000c5b4:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
9000c5b6:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
9000c5ba:	62e8      	str	r0, [r5, #44]	; 0x2c
    if (ret == HAL_OK)
9000c5bc:	f7ff ba64 	b.w	9000ba88 <HAL_RCCEx_PeriphCLKConfig+0x4c>
    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
9000c5c0:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
        status = HAL_ERROR;
9000c5c4:	2601      	movs	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
9000c5c6:	e9d4 3200 	ldrd	r3, r2, [r4]
9000c5ca:	e4b4      	b.n	9000bf36 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
9000c5cc:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
        status = HAL_ERROR;
9000c5d0:	2601      	movs	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
9000c5d2:	e9d4 3200 	ldrd	r3, r2, [r4]
9000c5d6:	e4bc      	b.n	9000bf52 <HAL_RCCEx_PeriphCLKConfig+0x516>
        tickstart = HAL_GetTick();
9000c5d8:	f7fa fbb4 	bl	90006d44 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
9000c5dc:	f8df 8054 	ldr.w	r8, [pc, #84]	; 9000c634 <HAL_RCCEx_PeriphCLKConfig+0xbf8>
        tickstart = HAL_GetTick();
9000c5e0:	4607      	mov	r7, r0
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
9000c5e2:	f241 3988 	movw	r9, #5000	; 0x1388
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
9000c5e6:	e004      	b.n	9000c5f2 <HAL_RCCEx_PeriphCLKConfig+0xbb6>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
9000c5e8:	f7fa fbac 	bl	90006d44 <HAL_GetTick>
9000c5ec:	1bc0      	subs	r0, r0, r7
9000c5ee:	4548      	cmp	r0, r9
9000c5f0:	d8d6      	bhi.n	9000c5a0 <HAL_RCCEx_PeriphCLKConfig+0xb64>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
9000c5f2:	f8d8 3070 	ldr.w	r3, [r8, #112]	; 0x70
9000c5f6:	079b      	lsls	r3, r3, #30
9000c5f8:	d5f6      	bpl.n	9000c5e8 <HAL_RCCEx_PeriphCLKConfig+0xbac>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
9000c5fa:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
9000c5fe:	e64d      	b.n	9000c29c <HAL_RCCEx_PeriphCLKConfig+0x860>
9000c600:	480c      	ldr	r0, [pc, #48]	; (9000c634 <HAL_RCCEx_PeriphCLKConfig+0xbf8>)
9000c602:	4a0d      	ldr	r2, [pc, #52]	; (9000c638 <HAL_RCCEx_PeriphCLKConfig+0xbfc>)
9000c604:	6901      	ldr	r1, [r0, #16]
9000c606:	ea02 1213 	and.w	r2, r2, r3, lsr #4
9000c60a:	f421 517c 	bic.w	r1, r1, #16128	; 0x3f00
9000c60e:	430a      	orrs	r2, r1
9000c610:	6102      	str	r2, [r0, #16]
9000c612:	e64e      	b.n	9000c2b2 <HAL_RCCEx_PeriphCLKConfig+0x876>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
9000c614:	e9d4 3200 	ldrd	r3, r2, [r4]
9000c618:	462e      	mov	r6, r5
9000c61a:	f7ff bba7 	b.w	9000bd6c <HAL_RCCEx_PeriphCLKConfig+0x330>
    switch (PeriphClkInit->Usart234578ClockSelection)
9000c61e:	2601      	movs	r6, #1
9000c620:	4635      	mov	r5, r6
9000c622:	f7ff bbf5 	b.w	9000be10 <HAL_RCCEx_PeriphCLKConfig+0x3d4>
    switch (PeriphClkInit->FmcClockSelection)
9000c626:	2601      	movs	r6, #1
9000c628:	4635      	mov	r5, r6
9000c62a:	f7ff bb9c 	b.w	9000bd66 <HAL_RCCEx_PeriphCLKConfig+0x32a>
    switch (PeriphClkInit->Lpuart1ClockSelection)
9000c62e:	2601      	movs	r6, #1
9000c630:	4635      	mov	r5, r6
9000c632:	e412      	b.n	9000be5a <HAL_RCCEx_PeriphCLKConfig+0x41e>
9000c634:	58024400 	.word	0x58024400
9000c638:	00ffffcf 	.word	0x00ffffcf

9000c63c <HAL_RCCEx_GetPLL2ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
9000c63c:	4a4f      	ldr	r2, [pc, #316]	; (9000c77c <HAL_RCCEx_GetPLL2ClockFreq+0x140>)
{
9000c63e:	b470      	push	{r4, r5, r6}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
9000c640:	6a91      	ldr	r1, [r2, #40]	; 0x28
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
9000c642:	6a95      	ldr	r5, [r2, #40]	; 0x28
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
9000c644:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
  if (pll2m != 0U)
9000c646:	f415 3f7c 	tst.w	r5, #258048	; 0x3f000
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
9000c64a:	f3c5 3305 	ubfx	r3, r5, #12, #6
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
9000c64e:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
  if (pll2m != 0U)
9000c650:	d05d      	beq.n	9000c70e <HAL_RCCEx_GetPLL2ClockFreq+0xd2>
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
9000c652:	f3c4 04cc 	ubfx	r4, r4, #3, #13
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
9000c656:	f3c6 1600 	ubfx	r6, r6, #4, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
9000c65a:	f001 0103 	and.w	r1, r1, #3
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
9000c65e:	fb06 f404 	mul.w	r4, r6, r4
    switch (pllsource)
9000c662:	2901      	cmp	r1, #1
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
9000c664:	ee07 4a90 	vmov	s15, r4
9000c668:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    switch (pllsource)
9000c66c:	d003      	beq.n	9000c676 <HAL_RCCEx_GetPLL2ClockFreq+0x3a>
9000c66e:	2902      	cmp	r1, #2
9000c670:	d076      	beq.n	9000c760 <HAL_RCCEx_GetPLL2ClockFreq+0x124>
9000c672:	2900      	cmp	r1, #0
9000c674:	d050      	beq.n	9000c718 <HAL_RCCEx_GetPLL2ClockFreq+0xdc>
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
9000c676:	ee07 3a90 	vmov	s15, r3
9000c67a:	ed9f 5a41 	vldr	s10, [pc, #260]	; 9000c780 <HAL_RCCEx_GetPLL2ClockFreq+0x144>
9000c67e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
9000c682:	6b93      	ldr	r3, [r2, #56]	; 0x38
9000c684:	eec5 6a27 	vdiv.f32	s13, s10, s15
9000c688:	eddf 5a3e 	vldr	s11, [pc, #248]	; 9000c784 <HAL_RCCEx_GetPLL2ClockFreq+0x148>
9000c68c:	f3c3 0308 	ubfx	r3, r3, #0, #9
9000c690:	ee07 3a90 	vmov	s15, r3
9000c694:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
9000c698:	eef8 7ae7 	vcvt.f32.s32	s15, s15
9000c69c:	eee7 7a25 	vfma.f32	s15, s14, s11
9000c6a0:	ee77 7a86 	vadd.f32	s15, s15, s12
9000c6a4:	ee66 6aa7 	vmul.f32	s13, s13, s15
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
9000c6a8:	4a34      	ldr	r2, [pc, #208]	; (9000c77c <HAL_RCCEx_GetPLL2ClockFreq+0x140>)
9000c6aa:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
9000c6ae:	6b93      	ldr	r3, [r2, #56]	; 0x38
9000c6b0:	f3c3 2346 	ubfx	r3, r3, #9, #7
9000c6b4:	ee07 3a90 	vmov	s15, r3
9000c6b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
9000c6bc:	bc70      	pop	{r4, r5, r6}
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
9000c6be:	ee77 7a86 	vadd.f32	s15, s15, s12
9000c6c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
9000c6c6:	eebc 7ac7 	vcvt.u32.f32	s14, s14
9000c6ca:	ed80 7a00 	vstr	s14, [r0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
9000c6ce:	6b93      	ldr	r3, [r2, #56]	; 0x38
9000c6d0:	f3c3 4306 	ubfx	r3, r3, #16, #7
9000c6d4:	ee07 3a90 	vmov	s15, r3
9000c6d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
9000c6dc:	ee77 7a86 	vadd.f32	s15, s15, s12
9000c6e0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
9000c6e4:	eebc 7ac7 	vcvt.u32.f32	s14, s14
9000c6e8:	ed80 7a01 	vstr	s14, [r0, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
9000c6ec:	6b93      	ldr	r3, [r2, #56]	; 0x38
9000c6ee:	f3c3 6306 	ubfx	r3, r3, #24, #7
9000c6f2:	ee07 3a10 	vmov	s14, r3
9000c6f6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
9000c6fa:	ee37 7a06 	vadd.f32	s14, s14, s12
9000c6fe:	eec6 7a87 	vdiv.f32	s15, s13, s14
9000c702:	eefc 7ae7 	vcvt.u32.f32	s15, s15
9000c706:	ee17 3a90 	vmov	r3, s15
9000c70a:	6083      	str	r3, [r0, #8]
}
9000c70c:	4770      	bx	lr
9000c70e:	bc70      	pop	{r4, r5, r6}
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
9000c710:	e9c0 3300 	strd	r3, r3, [r0]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
9000c714:	6083      	str	r3, [r0, #8]
}
9000c716:	4770      	bx	lr
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
9000c718:	6811      	ldr	r1, [r2, #0]
9000c71a:	0689      	lsls	r1, r1, #26
9000c71c:	d527      	bpl.n	9000c76e <HAL_RCCEx_GetPLL2ClockFreq+0x132>
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
9000c71e:	6814      	ldr	r4, [r2, #0]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
9000c720:	ee07 3a90 	vmov	s15, r3
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
9000c724:	4918      	ldr	r1, [pc, #96]	; (9000c788 <HAL_RCCEx_GetPLL2ClockFreq+0x14c>)
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
9000c726:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
9000c72a:	6b93      	ldr	r3, [r2, #56]	; 0x38
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
9000c72c:	f3c4 02c1 	ubfx	r2, r4, #3, #2
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
9000c730:	eef8 7ae7 	vcvt.f32.s32	s15, s15
9000c734:	ed9f 5a13 	vldr	s10, [pc, #76]	; 9000c784 <HAL_RCCEx_GetPLL2ClockFreq+0x148>
9000c738:	f3c3 0308 	ubfx	r3, r3, #0, #9
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
9000c73c:	40d1      	lsrs	r1, r2
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
9000c73e:	ee06 3a90 	vmov	s13, r3
9000c742:	ee06 1a10 	vmov	s12, r1
9000c746:	eef8 6ae6 	vcvt.f32.s32	s13, s13
9000c74a:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
9000c74e:	eee7 6a05 	vfma.f32	s13, s14, s10
9000c752:	ee86 7a27 	vdiv.f32	s14, s12, s15
9000c756:	ee76 6aa5 	vadd.f32	s13, s13, s11
9000c75a:	ee66 6a87 	vmul.f32	s13, s13, s14
9000c75e:	e7a3      	b.n	9000c6a8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
9000c760:	ee07 3a90 	vmov	s15, r3
9000c764:	ed9f 5a09 	vldr	s10, [pc, #36]	; 9000c78c <HAL_RCCEx_GetPLL2ClockFreq+0x150>
9000c768:	eef8 7ae7 	vcvt.f32.s32	s15, s15
9000c76c:	e789      	b.n	9000c682 <HAL_RCCEx_GetPLL2ClockFreq+0x46>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
9000c76e:	ee07 3a90 	vmov	s15, r3
9000c772:	ed9f 5a07 	vldr	s10, [pc, #28]	; 9000c790 <HAL_RCCEx_GetPLL2ClockFreq+0x154>
9000c776:	eef8 7ae7 	vcvt.f32.s32	s15, s15
9000c77a:	e782      	b.n	9000c682 <HAL_RCCEx_GetPLL2ClockFreq+0x46>
9000c77c:	58024400 	.word	0x58024400
9000c780:	4a742400 	.word	0x4a742400
9000c784:	39000000 	.word	0x39000000
9000c788:	03d09000 	.word	0x03d09000
9000c78c:	4bbebc20 	.word	0x4bbebc20
9000c790:	4c742400 	.word	0x4c742400

9000c794 <HAL_RCCEx_GetPLL3ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
9000c794:	4a4f      	ldr	r2, [pc, #316]	; (9000c8d4 <HAL_RCCEx_GetPLL3ClockFreq+0x140>)
{
9000c796:	b470      	push	{r4, r5, r6}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
9000c798:	6a91      	ldr	r1, [r2, #40]	; 0x28
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
9000c79a:	6a95      	ldr	r5, [r2, #40]	; 0x28
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
9000c79c:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
  if (pll3m != 0U)
9000c79e:	f015 7f7c 	tst.w	r5, #66060288	; 0x3f00000
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
9000c7a2:	f3c5 5305 	ubfx	r3, r5, #20, #6
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
9000c7a6:	6c54      	ldr	r4, [r2, #68]	; 0x44
  if (pll3m != 0U)
9000c7a8:	d05d      	beq.n	9000c866 <HAL_RCCEx_GetPLL3ClockFreq+0xd2>
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
9000c7aa:	f3c4 04cc 	ubfx	r4, r4, #3, #13
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
9000c7ae:	f3c6 2600 	ubfx	r6, r6, #8, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
9000c7b2:	f001 0103 	and.w	r1, r1, #3
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
9000c7b6:	fb06 f404 	mul.w	r4, r6, r4
    switch (pllsource)
9000c7ba:	2901      	cmp	r1, #1
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
9000c7bc:	ee07 4a90 	vmov	s15, r4
9000c7c0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    switch (pllsource)
9000c7c4:	d003      	beq.n	9000c7ce <HAL_RCCEx_GetPLL3ClockFreq+0x3a>
9000c7c6:	2902      	cmp	r1, #2
9000c7c8:	d076      	beq.n	9000c8b8 <HAL_RCCEx_GetPLL3ClockFreq+0x124>
9000c7ca:	2900      	cmp	r1, #0
9000c7cc:	d050      	beq.n	9000c870 <HAL_RCCEx_GetPLL3ClockFreq+0xdc>
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
9000c7ce:	ee07 3a90 	vmov	s15, r3
9000c7d2:	ed9f 5a41 	vldr	s10, [pc, #260]	; 9000c8d8 <HAL_RCCEx_GetPLL3ClockFreq+0x144>
9000c7d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
9000c7da:	6c13      	ldr	r3, [r2, #64]	; 0x40
9000c7dc:	eec5 6a27 	vdiv.f32	s13, s10, s15
9000c7e0:	eddf 5a3e 	vldr	s11, [pc, #248]	; 9000c8dc <HAL_RCCEx_GetPLL3ClockFreq+0x148>
9000c7e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
9000c7e8:	ee07 3a90 	vmov	s15, r3
9000c7ec:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
9000c7f0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
9000c7f4:	eee7 7a25 	vfma.f32	s15, s14, s11
9000c7f8:	ee77 7a86 	vadd.f32	s15, s15, s12
9000c7fc:	ee66 6aa7 	vmul.f32	s13, s13, s15
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
9000c800:	4a34      	ldr	r2, [pc, #208]	; (9000c8d4 <HAL_RCCEx_GetPLL3ClockFreq+0x140>)
9000c802:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
9000c806:	6c13      	ldr	r3, [r2, #64]	; 0x40
9000c808:	f3c3 2346 	ubfx	r3, r3, #9, #7
9000c80c:	ee07 3a90 	vmov	s15, r3
9000c810:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
9000c814:	bc70      	pop	{r4, r5, r6}
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
9000c816:	ee77 7a86 	vadd.f32	s15, s15, s12
9000c81a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
9000c81e:	eebc 7ac7 	vcvt.u32.f32	s14, s14
9000c822:	ed80 7a00 	vstr	s14, [r0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
9000c826:	6c13      	ldr	r3, [r2, #64]	; 0x40
9000c828:	f3c3 4306 	ubfx	r3, r3, #16, #7
9000c82c:	ee07 3a90 	vmov	s15, r3
9000c830:	eef8 7ae7 	vcvt.f32.s32	s15, s15
9000c834:	ee77 7a86 	vadd.f32	s15, s15, s12
9000c838:	ee86 7aa7 	vdiv.f32	s14, s13, s15
9000c83c:	eebc 7ac7 	vcvt.u32.f32	s14, s14
9000c840:	ed80 7a01 	vstr	s14, [r0, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
9000c844:	6c13      	ldr	r3, [r2, #64]	; 0x40
9000c846:	f3c3 6306 	ubfx	r3, r3, #24, #7
9000c84a:	ee07 3a10 	vmov	s14, r3
9000c84e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
9000c852:	ee37 7a06 	vadd.f32	s14, s14, s12
9000c856:	eec6 7a87 	vdiv.f32	s15, s13, s14
9000c85a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
9000c85e:	ee17 3a90 	vmov	r3, s15
9000c862:	6083      	str	r3, [r0, #8]
}
9000c864:	4770      	bx	lr
9000c866:	bc70      	pop	{r4, r5, r6}
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
9000c868:	e9c0 3300 	strd	r3, r3, [r0]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
9000c86c:	6083      	str	r3, [r0, #8]
}
9000c86e:	4770      	bx	lr
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
9000c870:	6811      	ldr	r1, [r2, #0]
9000c872:	0689      	lsls	r1, r1, #26
9000c874:	d527      	bpl.n	9000c8c6 <HAL_RCCEx_GetPLL3ClockFreq+0x132>
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
9000c876:	6814      	ldr	r4, [r2, #0]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
9000c878:	ee07 3a90 	vmov	s15, r3
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
9000c87c:	4918      	ldr	r1, [pc, #96]	; (9000c8e0 <HAL_RCCEx_GetPLL3ClockFreq+0x14c>)
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
9000c87e:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
9000c882:	6c13      	ldr	r3, [r2, #64]	; 0x40
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
9000c884:	f3c4 02c1 	ubfx	r2, r4, #3, #2
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
9000c888:	eef8 7ae7 	vcvt.f32.s32	s15, s15
9000c88c:	ed9f 5a13 	vldr	s10, [pc, #76]	; 9000c8dc <HAL_RCCEx_GetPLL3ClockFreq+0x148>
9000c890:	f3c3 0308 	ubfx	r3, r3, #0, #9
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
9000c894:	40d1      	lsrs	r1, r2
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
9000c896:	ee06 3a90 	vmov	s13, r3
9000c89a:	ee06 1a10 	vmov	s12, r1
9000c89e:	eef8 6ae6 	vcvt.f32.s32	s13, s13
9000c8a2:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
9000c8a6:	eee7 6a05 	vfma.f32	s13, s14, s10
9000c8aa:	ee86 7a27 	vdiv.f32	s14, s12, s15
9000c8ae:	ee76 6aa5 	vadd.f32	s13, s13, s11
9000c8b2:	ee66 6a87 	vmul.f32	s13, s13, s14
9000c8b6:	e7a3      	b.n	9000c800 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
9000c8b8:	ee07 3a90 	vmov	s15, r3
9000c8bc:	ed9f 5a09 	vldr	s10, [pc, #36]	; 9000c8e4 <HAL_RCCEx_GetPLL3ClockFreq+0x150>
9000c8c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
9000c8c4:	e789      	b.n	9000c7da <HAL_RCCEx_GetPLL3ClockFreq+0x46>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
9000c8c6:	ee07 3a90 	vmov	s15, r3
9000c8ca:	ed9f 5a07 	vldr	s10, [pc, #28]	; 9000c8e8 <HAL_RCCEx_GetPLL3ClockFreq+0x154>
9000c8ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
9000c8d2:	e782      	b.n	9000c7da <HAL_RCCEx_GetPLL3ClockFreq+0x46>
9000c8d4:	58024400 	.word	0x58024400
9000c8d8:	4a742400 	.word	0x4a742400
9000c8dc:	39000000 	.word	0x39000000
9000c8e0:	03d09000 	.word	0x03d09000
9000c8e4:	4bbebc20 	.word	0x4bbebc20
9000c8e8:	4c742400 	.word	0x4c742400

9000c8ec <HAL_RCCEx_GetPLL1ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
9000c8ec:	4a4f      	ldr	r2, [pc, #316]	; (9000ca2c <HAL_RCCEx_GetPLL1ClockFreq+0x140>)
{
9000c8ee:	b470      	push	{r4, r5, r6}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
9000c8f0:	6a91      	ldr	r1, [r2, #40]	; 0x28
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
9000c8f2:	6a95      	ldr	r5, [r2, #40]	; 0x28
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
9000c8f4:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
  if (pll1m != 0U)
9000c8f6:	f415 7f7c 	tst.w	r5, #1008	; 0x3f0
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
9000c8fa:	f3c5 1305 	ubfx	r3, r5, #4, #6
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
9000c8fe:	6b54      	ldr	r4, [r2, #52]	; 0x34
  if (pll1m != 0U)
9000c900:	d05d      	beq.n	9000c9be <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
9000c902:	f3c4 04cc 	ubfx	r4, r4, #3, #13
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
9000c906:	f006 0601 	and.w	r6, r6, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
9000c90a:	f001 0103 	and.w	r1, r1, #3
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
9000c90e:	fb06 f404 	mul.w	r4, r6, r4
    switch (pllsource)
9000c912:	2901      	cmp	r1, #1
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
9000c914:	ee07 4a90 	vmov	s15, r4
9000c918:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    switch (pllsource)
9000c91c:	d07f      	beq.n	9000ca1e <HAL_RCCEx_GetPLL1ClockFreq+0x132>
9000c91e:	2902      	cmp	r1, #2
9000c920:	d076      	beq.n	9000ca10 <HAL_RCCEx_GetPLL1ClockFreq+0x124>
9000c922:	2900      	cmp	r1, #0
9000c924:	d050      	beq.n	9000c9c8 <HAL_RCCEx_GetPLL1ClockFreq+0xdc>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
9000c926:	ee07 3a90 	vmov	s15, r3
9000c92a:	ed9f 5a41 	vldr	s10, [pc, #260]	; 9000ca30 <HAL_RCCEx_GetPLL1ClockFreq+0x144>
9000c92e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
9000c932:	6b13      	ldr	r3, [r2, #48]	; 0x30
9000c934:	eec5 6a27 	vdiv.f32	s13, s10, s15
9000c938:	eddf 5a3e 	vldr	s11, [pc, #248]	; 9000ca34 <HAL_RCCEx_GetPLL1ClockFreq+0x148>
9000c93c:	f3c3 0308 	ubfx	r3, r3, #0, #9
9000c940:	ee07 3a90 	vmov	s15, r3
9000c944:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
9000c948:	eef8 7ae7 	vcvt.f32.s32	s15, s15
9000c94c:	eee7 7a25 	vfma.f32	s15, s14, s11
9000c950:	ee77 7a86 	vadd.f32	s15, s15, s12
9000c954:	ee66 6aa7 	vmul.f32	s13, s13, s15
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
9000c958:	4a34      	ldr	r2, [pc, #208]	; (9000ca2c <HAL_RCCEx_GetPLL1ClockFreq+0x140>)
9000c95a:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
9000c95e:	6b13      	ldr	r3, [r2, #48]	; 0x30
9000c960:	f3c3 2346 	ubfx	r3, r3, #9, #7
9000c964:	ee07 3a90 	vmov	s15, r3
9000c968:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
9000c96c:	bc70      	pop	{r4, r5, r6}
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
9000c96e:	ee77 7a86 	vadd.f32	s15, s15, s12
9000c972:	ee86 7aa7 	vdiv.f32	s14, s13, s15
9000c976:	eebc 7ac7 	vcvt.u32.f32	s14, s14
9000c97a:	ed80 7a00 	vstr	s14, [r0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
9000c97e:	6b13      	ldr	r3, [r2, #48]	; 0x30
9000c980:	f3c3 4306 	ubfx	r3, r3, #16, #7
9000c984:	ee07 3a90 	vmov	s15, r3
9000c988:	eef8 7ae7 	vcvt.f32.s32	s15, s15
9000c98c:	ee77 7a86 	vadd.f32	s15, s15, s12
9000c990:	ee86 7aa7 	vdiv.f32	s14, s13, s15
9000c994:	eebc 7ac7 	vcvt.u32.f32	s14, s14
9000c998:	ed80 7a01 	vstr	s14, [r0, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
9000c99c:	6b13      	ldr	r3, [r2, #48]	; 0x30
9000c99e:	f3c3 6306 	ubfx	r3, r3, #24, #7
9000c9a2:	ee07 3a10 	vmov	s14, r3
9000c9a6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
9000c9aa:	ee37 7a06 	vadd.f32	s14, s14, s12
9000c9ae:	eec6 7a87 	vdiv.f32	s15, s13, s14
9000c9b2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
9000c9b6:	ee17 3a90 	vmov	r3, s15
9000c9ba:	6083      	str	r3, [r0, #8]
}
9000c9bc:	4770      	bx	lr
9000c9be:	bc70      	pop	{r4, r5, r6}
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
9000c9c0:	e9c0 3300 	strd	r3, r3, [r0]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
9000c9c4:	6083      	str	r3, [r0, #8]
}
9000c9c6:	4770      	bx	lr
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
9000c9c8:	6811      	ldr	r1, [r2, #0]
9000c9ca:	0689      	lsls	r1, r1, #26
9000c9cc:	d5ab      	bpl.n	9000c926 <HAL_RCCEx_GetPLL1ClockFreq+0x3a>
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
9000c9ce:	6814      	ldr	r4, [r2, #0]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
9000c9d0:	ee07 3a90 	vmov	s15, r3
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
9000c9d4:	4918      	ldr	r1, [pc, #96]	; (9000ca38 <HAL_RCCEx_GetPLL1ClockFreq+0x14c>)
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
9000c9d6:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
9000c9da:	6b13      	ldr	r3, [r2, #48]	; 0x30
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
9000c9dc:	f3c4 02c1 	ubfx	r2, r4, #3, #2
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
9000c9e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
9000c9e4:	ed9f 5a13 	vldr	s10, [pc, #76]	; 9000ca34 <HAL_RCCEx_GetPLL1ClockFreq+0x148>
9000c9e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
9000c9ec:	40d1      	lsrs	r1, r2
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
9000c9ee:	ee06 3a90 	vmov	s13, r3
9000c9f2:	ee06 1a10 	vmov	s12, r1
9000c9f6:	eef8 6ae6 	vcvt.f32.s32	s13, s13
9000c9fa:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
9000c9fe:	eee7 6a05 	vfma.f32	s13, s14, s10
9000ca02:	ee86 7a27 	vdiv.f32	s14, s12, s15
9000ca06:	ee76 6aa5 	vadd.f32	s13, s13, s11
9000ca0a:	ee66 6a87 	vmul.f32	s13, s13, s14
9000ca0e:	e7a3      	b.n	9000c958 <HAL_RCCEx_GetPLL1ClockFreq+0x6c>
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
9000ca10:	ee07 3a90 	vmov	s15, r3
9000ca14:	ed9f 5a09 	vldr	s10, [pc, #36]	; 9000ca3c <HAL_RCCEx_GetPLL1ClockFreq+0x150>
9000ca18:	eef8 7ae7 	vcvt.f32.s32	s15, s15
9000ca1c:	e789      	b.n	9000c932 <HAL_RCCEx_GetPLL1ClockFreq+0x46>
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
9000ca1e:	ee07 3a90 	vmov	s15, r3
9000ca22:	ed9f 5a07 	vldr	s10, [pc, #28]	; 9000ca40 <HAL_RCCEx_GetPLL1ClockFreq+0x154>
9000ca26:	eef8 7ae7 	vcvt.f32.s32	s15, s15
9000ca2a:	e782      	b.n	9000c932 <HAL_RCCEx_GetPLL1ClockFreq+0x46>
9000ca2c:	58024400 	.word	0x58024400
9000ca30:	4c742400 	.word	0x4c742400
9000ca34:	39000000 	.word	0x39000000
9000ca38:	03d09000 	.word	0x03d09000
9000ca3c:	4bbebc20 	.word	0x4bbebc20
9000ca40:	4a742400 	.word	0x4a742400

9000ca44 <HAL_RCCEx_GetPeriphCLKFreq>:
  if (PeriphClk == RCC_PERIPHCLK_SAI1)
9000ca44:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
9000ca48:	430b      	orrs	r3, r1
{
9000ca4a:	b500      	push	{lr}
9000ca4c:	b085      	sub	sp, #20
  if (PeriphClk == RCC_PERIPHCLK_SAI1)
9000ca4e:	f000 8083 	beq.w	9000cb58 <HAL_RCCEx_GetPeriphCLKFreq+0x114>
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
9000ca52:	f5a0 7300 	sub.w	r3, r0, #512	; 0x200
9000ca56:	430b      	orrs	r3, r1
9000ca58:	d038      	beq.n	9000cacc <HAL_RCCEx_GetPeriphCLKFreq+0x88>
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
9000ca5a:	f5a0 6380 	sub.w	r3, r0, #1024	; 0x400
9000ca5e:	430b      	orrs	r3, r1
9000ca60:	f000 80e6 	beq.w	9000cc30 <HAL_RCCEx_GetPeriphCLKFreq+0x1ec>
  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
9000ca64:	f5a0 6300 	sub.w	r3, r0, #2048	; 0x800
9000ca68:	430b      	orrs	r3, r1
9000ca6a:	f000 8089 	beq.w	9000cb80 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
9000ca6e:	f5a0 5380 	sub.w	r3, r0, #4096	; 0x1000
9000ca72:	430b      	orrs	r3, r1
9000ca74:	d060      	beq.n	9000cb38 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
9000ca76:	f5a0 5300 	sub.w	r3, r0, #8192	; 0x2000
9000ca7a:	430b      	orrs	r3, r1
9000ca7c:	f000 8112 	beq.w	9000cca4 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
9000ca80:	f5a0 2300 	sub.w	r3, r0, #524288	; 0x80000
9000ca84:	430b      	orrs	r3, r1
9000ca86:	f000 80a3 	beq.w	9000cbd0 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
9000ca8a:	f5a0 3380 	sub.w	r3, r0, #65536	; 0x10000
9000ca8e:	430b      	orrs	r3, r1
9000ca90:	f000 80fa 	beq.w	9000cc88 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
9000ca94:	f5a0 4380 	sub.w	r3, r0, #16384	; 0x4000
9000ca98:	430b      	orrs	r3, r1
9000ca9a:	f000 8143 	beq.w	9000cd24 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
9000ca9e:	f5a0 4000 	sub.w	r0, r0, #32768	; 0x8000
9000caa2:	4308      	orrs	r0, r1
9000caa4:	d137      	bne.n	9000cb16 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
9000caa6:	4a9a      	ldr	r2, [pc, #616]	; (9000cd10 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
9000caa8:	6d13      	ldr	r3, [r2, #80]	; 0x50
9000caaa:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
    switch (srcclk)
9000caae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
9000cab2:	f000 8084 	beq.w	9000cbbe <HAL_RCCEx_GetPeriphCLKFreq+0x17a>
9000cab6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
9000caba:	f000 8157 	beq.w	9000cd6c <HAL_RCCEx_GetPeriphCLKFreq+0x328>
9000cabe:	bb53      	cbnz	r3, 9000cb16 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
9000cac0:	6810      	ldr	r0, [r2, #0]
9000cac2:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
9000cac6:	d044      	beq.n	9000cb52 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          frequency = HSE_VALUE;
9000cac8:	4892      	ldr	r0, [pc, #584]	; (9000cd14 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
9000caca:	e042      	b.n	9000cb52 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
9000cacc:	4a90      	ldr	r2, [pc, #576]	; (9000cd10 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
9000cace:	6d13      	ldr	r3, [r2, #80]	; 0x50
9000cad0:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
    switch (saiclocksource)
9000cad4:	2b80      	cmp	r3, #128	; 0x80
9000cad6:	f000 80a6 	beq.w	9000cc26 <HAL_RCCEx_GetPeriphCLKFreq+0x1e2>
9000cada:	d920      	bls.n	9000cb1e <HAL_RCCEx_GetPeriphCLKFreq+0xda>
9000cadc:	2bc0      	cmp	r3, #192	; 0xc0
9000cade:	d037      	beq.n	9000cb50 <HAL_RCCEx_GetPeriphCLKFreq+0x10c>
9000cae0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
9000cae4:	d117      	bne.n	9000cb16 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
9000cae6:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
9000cae8:	6811      	ldr	r1, [r2, #0]
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
9000caea:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
9000caee:	0749      	lsls	r1, r1, #29
9000caf0:	d502      	bpl.n	9000caf8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
9000caf2:	2b00      	cmp	r3, #0
9000caf4:	f000 80c2 	beq.w	9000cc7c <HAL_RCCEx_GetPeriphCLKFreq+0x238>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
9000caf8:	4a85      	ldr	r2, [pc, #532]	; (9000cd10 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
9000cafa:	6812      	ldr	r2, [r2, #0]
9000cafc:	05d0      	lsls	r0, r2, #23
9000cafe:	d503      	bpl.n	9000cb08 <HAL_RCCEx_GetPeriphCLKFreq+0xc4>
9000cb00:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
9000cb04:	f000 8102 	beq.w	9000cd0c <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
9000cb08:	4a81      	ldr	r2, [pc, #516]	; (9000cd10 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
9000cb0a:	6812      	ldr	r2, [r2, #0]
9000cb0c:	0391      	lsls	r1, r2, #14
9000cb0e:	d502      	bpl.n	9000cb16 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
9000cb10:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
9000cb14:	d0d8      	beq.n	9000cac8 <HAL_RCCEx_GetPeriphCLKFreq+0x84>
    switch (srcclk)
9000cb16:	2000      	movs	r0, #0
}
9000cb18:	b005      	add	sp, #20
9000cb1a:	f85d fb04 	ldr.w	pc, [sp], #4
    switch (saiclocksource)
9000cb1e:	2b00      	cmp	r3, #0
9000cb20:	d04d      	beq.n	9000cbbe <HAL_RCCEx_GetPeriphCLKFreq+0x17a>
9000cb22:	2b40      	cmp	r3, #64	; 0x40
9000cb24:	d1f7      	bne.n	9000cb16 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
9000cb26:	6810      	ldr	r0, [r2, #0]
9000cb28:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
9000cb2c:	d011      	beq.n	9000cb52 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
9000cb2e:	a801      	add	r0, sp, #4
9000cb30:	f7ff fd84 	bl	9000c63c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
9000cb34:	9801      	ldr	r0, [sp, #4]
9000cb36:	e00c      	b.n	9000cb52 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
9000cb38:	4a75      	ldr	r2, [pc, #468]	; (9000cd10 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
9000cb3a:	6d13      	ldr	r3, [r2, #80]	; 0x50
9000cb3c:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
    switch (srcclk)
9000cb40:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
9000cb44:	d06f      	beq.n	9000cc26 <HAL_RCCEx_GetPeriphCLKFreq+0x1e2>
9000cb46:	d938      	bls.n	9000cbba <HAL_RCCEx_GetPeriphCLKFreq+0x176>
9000cb48:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
9000cb4c:	f040 8088 	bne.w	9000cc60 <HAL_RCCEx_GetPeriphCLKFreq+0x21c>
        frequency = EXTERNAL_CLOCK_VALUE;
9000cb50:	4871      	ldr	r0, [pc, #452]	; (9000cd18 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
}
9000cb52:	b005      	add	sp, #20
9000cb54:	f85d fb04 	ldr.w	pc, [sp], #4
    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
9000cb58:	4b6d      	ldr	r3, [pc, #436]	; (9000cd10 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
9000cb5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
9000cb5c:	f003 0307 	and.w	r3, r3, #7
    switch (saiclocksource)
9000cb60:	2b04      	cmp	r3, #4
9000cb62:	d8d8      	bhi.n	9000cb16 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
9000cb64:	a201      	add	r2, pc, #4	; (adr r2, 9000cb6c <HAL_RCCEx_GetPeriphCLKFreq+0x128>)
9000cb66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
9000cb6a:	bf00      	nop
9000cb6c:	9000cc0f 	.word	0x9000cc0f
9000cb70:	9000cbeb 	.word	0x9000cbeb
9000cb74:	9000cbfb 	.word	0x9000cbfb
9000cb78:	9000cb51 	.word	0x9000cb51
9000cb7c:	9000cbf7 	.word	0x9000cbf7
    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
9000cb80:	4a63      	ldr	r2, [pc, #396]	; (9000cd10 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
9000cb82:	6d93      	ldr	r3, [r2, #88]	; 0x58
9000cb84:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
    switch (saiclocksource)
9000cb88:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
9000cb8c:	d04b      	beq.n	9000cc26 <HAL_RCCEx_GetPeriphCLKFreq+0x1e2>
9000cb8e:	d944      	bls.n	9000cc1a <HAL_RCCEx_GetPeriphCLKFreq+0x1d6>
9000cb90:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
9000cb94:	d0dc      	beq.n	9000cb50 <HAL_RCCEx_GetPeriphCLKFreq+0x10c>
9000cb96:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
9000cb9a:	d1bc      	bne.n	9000cb16 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
9000cb9c:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
9000cb9e:	6812      	ldr	r2, [r2, #0]
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
9000cba0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
9000cba4:	0752      	lsls	r2, r2, #29
9000cba6:	d5a7      	bpl.n	9000caf8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
9000cba8:	2b00      	cmp	r3, #0
9000cbaa:	d1a5      	bne.n	9000caf8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
9000cbac:	4b58      	ldr	r3, [pc, #352]	; (9000cd10 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
9000cbae:	485b      	ldr	r0, [pc, #364]	; (9000cd1c <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
9000cbb0:	681b      	ldr	r3, [r3, #0]
9000cbb2:	f3c3 03c1 	ubfx	r3, r3, #3, #2
9000cbb6:	40d8      	lsrs	r0, r3
9000cbb8:	e7cb      	b.n	9000cb52 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
    switch (srcclk)
9000cbba:	2b00      	cmp	r3, #0
9000cbbc:	d154      	bne.n	9000cc68 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
9000cbbe:	6810      	ldr	r0, [r2, #0]
9000cbc0:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
9000cbc4:	d0c5      	beq.n	9000cb52 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
9000cbc6:	a801      	add	r0, sp, #4
9000cbc8:	f7ff fe90 	bl	9000c8ec <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
9000cbcc:	9802      	ldr	r0, [sp, #8]
9000cbce:	e7c0      	b.n	9000cb52 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
9000cbd0:	4a4f      	ldr	r2, [pc, #316]	; (9000cd10 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
9000cbd2:	6d93      	ldr	r3, [r2, #88]	; 0x58
9000cbd4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
    switch (srcclk)
9000cbd8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
9000cbdc:	f000 80d0 	beq.w	9000cd80 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
9000cbe0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
9000cbe4:	d0da      	beq.n	9000cb9c <HAL_RCCEx_GetPeriphCLKFreq+0x158>
9000cbe6:	2b00      	cmp	r3, #0
9000cbe8:	d195      	bne.n	9000cb16 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
9000cbea:	4b49      	ldr	r3, [pc, #292]	; (9000cd10 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
9000cbec:	6818      	ldr	r0, [r3, #0]
9000cbee:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
9000cbf2:	d0ae      	beq.n	9000cb52 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
9000cbf4:	e79b      	b.n	9000cb2e <HAL_RCCEx_GetPeriphCLKFreq+0xea>
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
9000cbf6:	4a46      	ldr	r2, [pc, #280]	; (9000cd10 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
9000cbf8:	e775      	b.n	9000cae6 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
9000cbfa:	4b45      	ldr	r3, [pc, #276]	; (9000cd10 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
9000cbfc:	6818      	ldr	r0, [r3, #0]
9000cbfe:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
9000cc02:	d0a6      	beq.n	9000cb52 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
9000cc04:	a801      	add	r0, sp, #4
9000cc06:	f7ff fdc5 	bl	9000c794 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
9000cc0a:	9801      	ldr	r0, [sp, #4]
9000cc0c:	e7a1      	b.n	9000cb52 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
9000cc0e:	4b40      	ldr	r3, [pc, #256]	; (9000cd10 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
9000cc10:	6818      	ldr	r0, [r3, #0]
9000cc12:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
9000cc16:	d09c      	beq.n	9000cb52 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
9000cc18:	e7d5      	b.n	9000cbc6 <HAL_RCCEx_GetPeriphCLKFreq+0x182>
    switch (saiclocksource)
9000cc1a:	2b00      	cmp	r3, #0
9000cc1c:	d0cf      	beq.n	9000cbbe <HAL_RCCEx_GetPeriphCLKFreq+0x17a>
9000cc1e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
9000cc22:	d080      	beq.n	9000cb26 <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
9000cc24:	e777      	b.n	9000cb16 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
9000cc26:	6810      	ldr	r0, [r2, #0]
9000cc28:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
9000cc2c:	d091      	beq.n	9000cb52 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
9000cc2e:	e7e9      	b.n	9000cc04 <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>
    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
9000cc30:	4a37      	ldr	r2, [pc, #220]	; (9000cd10 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
9000cc32:	6d93      	ldr	r3, [r2, #88]	; 0x58
9000cc34:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
    switch (saiclocksource)
9000cc38:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
9000cc3c:	d0f3      	beq.n	9000cc26 <HAL_RCCEx_GetPeriphCLKFreq+0x1e2>
9000cc3e:	d806      	bhi.n	9000cc4e <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
9000cc40:	2b00      	cmp	r3, #0
9000cc42:	d0bc      	beq.n	9000cbbe <HAL_RCCEx_GetPeriphCLKFreq+0x17a>
9000cc44:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
9000cc48:	f43f af6d 	beq.w	9000cb26 <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
9000cc4c:	e763      	b.n	9000cb16 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
9000cc4e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
9000cc52:	f43f af7d 	beq.w	9000cb50 <HAL_RCCEx_GetPeriphCLKFreq+0x10c>
9000cc56:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
9000cc5a:	f43f af44 	beq.w	9000cae6 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
9000cc5e:	e75a      	b.n	9000cb16 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
    switch (srcclk)
9000cc60:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
9000cc64:	d09a      	beq.n	9000cb9c <HAL_RCCEx_GetPeriphCLKFreq+0x158>
9000cc66:	e756      	b.n	9000cb16 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
9000cc68:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
9000cc6c:	f43f af5b 	beq.w	9000cb26 <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
9000cc70:	e751      	b.n	9000cb16 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
9000cc72:	6810      	ldr	r0, [r2, #0]
9000cc74:	f010 0004 	ands.w	r0, r0, #4
9000cc78:	f43f af6b 	beq.w	9000cb52 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
9000cc7c:	6813      	ldr	r3, [r2, #0]
9000cc7e:	4827      	ldr	r0, [pc, #156]	; (9000cd1c <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
9000cc80:	f3c3 03c1 	ubfx	r3, r3, #3, #2
9000cc84:	40d8      	lsrs	r0, r3
9000cc86:	e764      	b.n	9000cb52 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
9000cc88:	4b21      	ldr	r3, [pc, #132]	; (9000cd10 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
9000cc8a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    switch (srcclk)
9000cc8c:	03d2      	lsls	r2, r2, #15
9000cc8e:	d5bf      	bpl.n	9000cc10 <HAL_RCCEx_GetPeriphCLKFreq+0x1cc>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
9000cc90:	6818      	ldr	r0, [r3, #0]
9000cc92:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
9000cc96:	f43f af5c 	beq.w	9000cb52 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
9000cc9a:	a801      	add	r0, sp, #4
9000cc9c:	f7ff fcce 	bl	9000c63c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
9000cca0:	9803      	ldr	r0, [sp, #12]
9000cca2:	e756      	b.n	9000cb52 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
9000cca4:	4a1a      	ldr	r2, [pc, #104]	; (9000cd10 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
9000cca6:	6d13      	ldr	r3, [r2, #80]	; 0x50
9000cca8:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
    switch (srcclk)
9000ccac:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
9000ccb0:	d0df      	beq.n	9000cc72 <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
9000ccb2:	d810      	bhi.n	9000ccd6 <HAL_RCCEx_GetPeriphCLKFreq+0x292>
9000ccb4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
9000ccb8:	d058      	beq.n	9000cd6c <HAL_RCCEx_GetPeriphCLKFreq+0x328>
9000ccba:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
9000ccbe:	d118      	bne.n	9000ccf2 <HAL_RCCEx_GetPeriphCLKFreq+0x2ae>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
9000ccc0:	4b13      	ldr	r3, [pc, #76]	; (9000cd10 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
9000ccc2:	6818      	ldr	r0, [r3, #0]
9000ccc4:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
9000ccc8:	f43f af43 	beq.w	9000cb52 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
9000cccc:	a801      	add	r0, sp, #4
9000ccce:	f7ff fd61 	bl	9000c794 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
9000ccd2:	9802      	ldr	r0, [sp, #8]
9000ccd4:	e73d      	b.n	9000cb52 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
    switch (srcclk)
9000ccd6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
9000ccda:	d012      	beq.n	9000cd02 <HAL_RCCEx_GetPeriphCLKFreq+0x2be>
9000ccdc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
9000cce0:	f47f af19 	bne.w	9000cb16 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
9000cce4:	4b0a      	ldr	r3, [pc, #40]	; (9000cd10 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
9000cce6:	6818      	ldr	r0, [r3, #0]
9000cce8:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
9000ccec:	f43f af31 	beq.w	9000cb52 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
9000ccf0:	e6ea      	b.n	9000cac8 <HAL_RCCEx_GetPeriphCLKFreq+0x84>
    switch (srcclk)
9000ccf2:	2b00      	cmp	r3, #0
9000ccf4:	f47f af0f 	bne.w	9000cb16 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
}
9000ccf8:	b005      	add	sp, #20
9000ccfa:	f85d eb04 	ldr.w	lr, [sp], #4
        frequency = HAL_RCC_GetPCLK1Freq();
9000ccfe:	f7fe bced 	b.w	9000b6dc <HAL_RCC_GetPCLK1Freq>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
9000cd02:	6810      	ldr	r0, [r2, #0]
9000cd04:	f410 7080 	ands.w	r0, r0, #256	; 0x100
9000cd08:	f43f af23 	beq.w	9000cb52 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          frequency = CSI_VALUE;
9000cd0c:	4804      	ldr	r0, [pc, #16]	; (9000cd20 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
9000cd0e:	e720      	b.n	9000cb52 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
9000cd10:	58024400 	.word	0x58024400
9000cd14:	017d7840 	.word	0x017d7840
9000cd18:	00bb8000 	.word	0x00bb8000
9000cd1c:	03d09000 	.word	0x03d09000
9000cd20:	003d0900 	.word	0x003d0900
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
9000cd24:	4b28      	ldr	r3, [pc, #160]	; (9000cdc8 <HAL_RCCEx_GetPeriphCLKFreq+0x384>)
9000cd26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
9000cd28:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    switch (srcclk)
9000cd2c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
9000cd30:	d037      	beq.n	9000cda2 <HAL_RCCEx_GetPeriphCLKFreq+0x35e>
9000cd32:	d814      	bhi.n	9000cd5e <HAL_RCCEx_GetPeriphCLKFreq+0x31a>
9000cd34:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
9000cd38:	d03f      	beq.n	9000cdba <HAL_RCCEx_GetPeriphCLKFreq+0x376>
9000cd3a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
9000cd3e:	d0bf      	beq.n	9000ccc0 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
9000cd40:	2b00      	cmp	r3, #0
9000cd42:	f47f aee8 	bne.w	9000cb16 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
9000cd46:	f7fe fc89 	bl	9000b65c <HAL_RCC_GetHCLKFreq>
9000cd4a:	4b1f      	ldr	r3, [pc, #124]	; (9000cdc8 <HAL_RCCEx_GetPeriphCLKFreq+0x384>)
9000cd4c:	4a1f      	ldr	r2, [pc, #124]	; (9000cdcc <HAL_RCCEx_GetPeriphCLKFreq+0x388>)
9000cd4e:	6a1b      	ldr	r3, [r3, #32]
9000cd50:	f3c3 1302 	ubfx	r3, r3, #4, #3
9000cd54:	5cd3      	ldrb	r3, [r2, r3]
9000cd56:	f003 031f 	and.w	r3, r3, #31
9000cd5a:	40d8      	lsrs	r0, r3
        break;
9000cd5c:	e6f9      	b.n	9000cb52 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
    switch (srcclk)
9000cd5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
9000cd62:	d017      	beq.n	9000cd94 <HAL_RCCEx_GetPeriphCLKFreq+0x350>
9000cd64:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
9000cd68:	d0bc      	beq.n	9000cce4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>
9000cd6a:	e6d4      	b.n	9000cb16 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
9000cd6c:	6810      	ldr	r0, [r2, #0]
9000cd6e:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
9000cd72:	f43f aeee 	beq.w	9000cb52 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
9000cd76:	a801      	add	r0, sp, #4
9000cd78:	f7ff fc60 	bl	9000c63c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
9000cd7c:	9802      	ldr	r0, [sp, #8]
9000cd7e:	e6e8      	b.n	9000cb52 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
9000cd80:	6810      	ldr	r0, [r2, #0]
9000cd82:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
9000cd86:	f43f aee4 	beq.w	9000cb52 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
9000cd8a:	a801      	add	r0, sp, #4
9000cd8c:	f7ff fd02 	bl	9000c794 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
9000cd90:	9803      	ldr	r0, [sp, #12]
9000cd92:	e6de      	b.n	9000cb52 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
9000cd94:	4b0c      	ldr	r3, [pc, #48]	; (9000cdc8 <HAL_RCCEx_GetPeriphCLKFreq+0x384>)
9000cd96:	6818      	ldr	r0, [r3, #0]
9000cd98:	f410 7080 	ands.w	r0, r0, #256	; 0x100
9000cd9c:	f43f aed9 	beq.w	9000cb52 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
9000cda0:	e7b4      	b.n	9000cd0c <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
9000cda2:	4b09      	ldr	r3, [pc, #36]	; (9000cdc8 <HAL_RCCEx_GetPeriphCLKFreq+0x384>)
9000cda4:	6818      	ldr	r0, [r3, #0]
9000cda6:	f010 0004 	ands.w	r0, r0, #4
9000cdaa:	f43f aed2 	beq.w	9000cb52 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
9000cdae:	681b      	ldr	r3, [r3, #0]
9000cdb0:	4807      	ldr	r0, [pc, #28]	; (9000cdd0 <HAL_RCCEx_GetPeriphCLKFreq+0x38c>)
9000cdb2:	f3c3 03c1 	ubfx	r3, r3, #3, #2
9000cdb6:	40d8      	lsrs	r0, r3
9000cdb8:	e6cb      	b.n	9000cb52 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
9000cdba:	4b03      	ldr	r3, [pc, #12]	; (9000cdc8 <HAL_RCCEx_GetPeriphCLKFreq+0x384>)
9000cdbc:	6818      	ldr	r0, [r3, #0]
9000cdbe:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
9000cdc2:	f43f aec6 	beq.w	9000cb52 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
9000cdc6:	e7d6      	b.n	9000cd76 <HAL_RCCEx_GetPeriphCLKFreq+0x332>
9000cdc8:	58024400 	.word	0x58024400
9000cdcc:	90026504 	.word	0x90026504
9000cdd0:	03d09000 	.word	0x03d09000

9000cdd4 <HAL_SDRAM_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
9000cdd4:	b318      	cbz	r0, 9000ce1e <HAL_SDRAM_Init+0x4a>
{
9000cdd6:	b538      	push	{r3, r4, r5, lr}
  {
    return HAL_ERROR;
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
9000cdd8:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
9000cddc:	4604      	mov	r4, r0
9000cdde:	460d      	mov	r5, r1
9000cde0:	f003 02ff 	and.w	r2, r3, #255	; 0xff
9000cde4:	b1b3      	cbz	r3, 9000ce14 <HAL_SDRAM_Init+0x40>

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
9000cde6:	4621      	mov	r1, r4
  hsdram->State = HAL_SDRAM_STATE_BUSY;
9000cde8:	2302      	movs	r3, #2
9000cdea:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
9000cdee:	f851 0b04 	ldr.w	r0, [r1], #4
9000cdf2:	f000 fa39 	bl	9000d268 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
9000cdf6:	6862      	ldr	r2, [r4, #4]
9000cdf8:	4629      	mov	r1, r5
9000cdfa:	6820      	ldr	r0, [r4, #0]
9000cdfc:	f000 fa72 	bl	9000d2e4 <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
9000ce00:	4a08      	ldr	r2, [pc, #32]	; (9000ce24 <HAL_SDRAM_Init+0x50>)
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
9000ce02:	2101      	movs	r1, #1

  return HAL_OK;
9000ce04:	2000      	movs	r0, #0
  __FMC_ENABLE();
9000ce06:	6813      	ldr	r3, [r2, #0]
9000ce08:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
9000ce0c:	6013      	str	r3, [r2, #0]
  hsdram->State = HAL_SDRAM_STATE_READY;
9000ce0e:	f884 102c 	strb.w	r1, [r4, #44]	; 0x2c
}
9000ce12:	bd38      	pop	{r3, r4, r5, pc}
    hsdram->Lock = HAL_UNLOCKED;
9000ce14:	f880 202d 	strb.w	r2, [r0, #45]	; 0x2d
    HAL_SDRAM_MspInit(hsdram);
9000ce18:	f7f7 fdda 	bl	900049d0 <HAL_SDRAM_MspInit>
9000ce1c:	e7e3      	b.n	9000cde6 <HAL_SDRAM_Init+0x12>
    return HAL_ERROR;
9000ce1e:	2001      	movs	r0, #1
}
9000ce20:	4770      	bx	lr
9000ce22:	bf00      	nop
9000ce24:	52004000 	.word	0x52004000

9000ce28 <HAL_SDRAM_DeInit>:
  * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
  *                the configuration information for SDRAM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_DeInit(SDRAM_HandleTypeDef *hsdram)
{
9000ce28:	b510      	push	{r4, lr}
9000ce2a:	4604      	mov	r4, r0

  /* DeInit the low level hardware */
  hsdram->MspDeInitCallback(hsdram);
#else
  /* Initialize the low level hardware (MSP) */
  HAL_SDRAM_MspDeInit(hsdram);
9000ce2c:	f7f7 fe4c 	bl	90004ac8 <HAL_SDRAM_MspDeInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */

  /* Configure the SDRAM registers with their reset values */
  (void)FMC_SDRAM_DeInit(hsdram->Instance, hsdram->Init.SDBank);
9000ce30:	e9d4 0100 	ldrd	r0, r1, [r4]
9000ce34:	f000 faa4 	bl	9000d380 <FMC_SDRAM_DeInit>

  /* Reset the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_RESET;
9000ce38:	2000      	movs	r0, #0
9000ce3a:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c

  /* Release Lock */
  __HAL_UNLOCK(hsdram);
9000ce3e:	f884 002d 	strb.w	r0, [r4, #45]	; 0x2d

  return HAL_OK;
}
9000ce42:	bd10      	pop	{r4, pc}

9000ce44 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
9000ce44:	b570      	push	{r4, r5, r6, lr}
  HAL_SDRAM_StateTypeDef state = hsdram->State;
9000ce46:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
{
9000ce4a:	4604      	mov	r4, r0

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
9000ce4c:	2b02      	cmp	r3, #2
  HAL_SDRAM_StateTypeDef state = hsdram->State;
9000ce4e:	b2d8      	uxtb	r0, r3
  if (state == HAL_SDRAM_STATE_BUSY)
9000ce50:	d004      	beq.n	9000ce5c <HAL_SDRAM_SendCommand+0x18>
  {
    return HAL_BUSY;
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
9000ce52:	f000 06fb 	and.w	r6, r0, #251	; 0xfb
9000ce56:	2e01      	cmp	r6, #1
9000ce58:	d001      	beq.n	9000ce5e <HAL_SDRAM_SendCommand+0x1a>
      hsdram->State = HAL_SDRAM_STATE_READY;
    }
  }
  else
  {
    return HAL_ERROR;
9000ce5a:	2001      	movs	r0, #1
  }

  return HAL_OK;
}
9000ce5c:	bd70      	pop	{r4, r5, r6, pc}
    hsdram->State = HAL_SDRAM_STATE_BUSY;
9000ce5e:	2302      	movs	r3, #2
9000ce60:	460d      	mov	r5, r1
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
9000ce62:	6820      	ldr	r0, [r4, #0]
    hsdram->State = HAL_SDRAM_STATE_BUSY;
9000ce64:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
9000ce68:	f000 fa9e 	bl	9000d3a8 <FMC_SDRAM_SendCommand>
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
9000ce6c:	682b      	ldr	r3, [r5, #0]
9000ce6e:	2b02      	cmp	r3, #2
9000ce70:	d003      	beq.n	9000ce7a <HAL_SDRAM_SendCommand+0x36>
  return HAL_OK;
9000ce72:	2000      	movs	r0, #0
      hsdram->State = HAL_SDRAM_STATE_READY;
9000ce74:	f884 602c 	strb.w	r6, [r4, #44]	; 0x2c
}
9000ce78:	bd70      	pop	{r4, r5, r6, pc}
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
9000ce7a:	2305      	movs	r3, #5
  return HAL_OK;
9000ce7c:	2000      	movs	r0, #0
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
9000ce7e:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
}
9000ce82:	bd70      	pop	{r4, r5, r6, pc}

9000ce84 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
9000ce84:	b538      	push	{r3, r4, r5, lr}
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
9000ce86:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
{
9000ce8a:	4604      	mov	r4, r0
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
9000ce8c:	2b02      	cmp	r3, #2
9000ce8e:	b2d8      	uxtb	r0, r3
9000ce90:	d005      	beq.n	9000ce9e <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
9000ce92:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
9000ce96:	2b01      	cmp	r3, #1
9000ce98:	b2dd      	uxtb	r5, r3
9000ce9a:	d001      	beq.n	9000cea0 <HAL_SDRAM_ProgramRefreshRate+0x1c>
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
  }
  else
  {
    return HAL_ERROR;
9000ce9c:	2001      	movs	r0, #1
  }

  return HAL_OK;
}
9000ce9e:	bd38      	pop	{r3, r4, r5, pc}
    hsdram->State = HAL_SDRAM_STATE_BUSY;
9000cea0:	2302      	movs	r3, #2
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
9000cea2:	6820      	ldr	r0, [r4, #0]
    hsdram->State = HAL_SDRAM_STATE_BUSY;
9000cea4:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
9000cea8:	f000 fa96 	bl	9000d3d8 <FMC_SDRAM_ProgramRefreshRate>
  return HAL_OK;
9000ceac:	2000      	movs	r0, #0
    hsdram->State = HAL_SDRAM_STATE_READY;
9000ceae:	f884 502c 	strb.w	r5, [r4, #44]	; 0x2c
}
9000ceb2:	bd38      	pop	{r3, r4, r5, pc}

9000ceb4 <HAL_TIM_Base_MspInit>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
9000ceb4:	4770      	bx	lr
9000ceb6:	bf00      	nop

9000ceb8 <HAL_TIM_Base_Init>:
  if (htim == NULL)
9000ceb8:	2800      	cmp	r0, #0
9000ceba:	f000 80a5 	beq.w	9000d008 <HAL_TIM_Base_Init+0x150>
{
9000cebe:	b538      	push	{r3, r4, r5, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
9000cec0:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
9000cec4:	4604      	mov	r4, r0
9000cec6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
9000ceca:	2b00      	cmp	r3, #0
9000cecc:	d076      	beq.n	9000cfbc <HAL_TIM_Base_Init+0x104>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
9000cece:	6822      	ldr	r2, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
9000ced0:	2302      	movs	r3, #2
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
9000ced2:	494e      	ldr	r1, [pc, #312]	; (9000d00c <HAL_TIM_Base_Init+0x154>)
9000ced4:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
  htim->State = HAL_TIM_STATE_BUSY;
9000ced8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
9000cedc:	eba2 0101 	sub.w	r1, r2, r1
  tmpcr1 = TIMx->CR1;
9000cee0:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
9000cee2:	fab1 f181 	clz	r1, r1
9000cee6:	ea4f 1151 	mov.w	r1, r1, lsr #5
9000ceea:	d027      	beq.n	9000cf3c <HAL_TIM_Base_Init+0x84>
9000ceec:	bb31      	cbnz	r1, 9000cf3c <HAL_TIM_Base_Init+0x84>
9000ceee:	4848      	ldr	r0, [pc, #288]	; (9000d010 <HAL_TIM_Base_Init+0x158>)
9000cef0:	4d48      	ldr	r5, [pc, #288]	; (9000d014 <HAL_TIM_Base_Init+0x15c>)
9000cef2:	4282      	cmp	r2, r0
9000cef4:	d067      	beq.n	9000cfc6 <HAL_TIM_Base_Init+0x10e>
9000cef6:	f500 6080 	add.w	r0, r0, #1024	; 0x400
9000cefa:	4282      	cmp	r2, r0
9000cefc:	d063      	beq.n	9000cfc6 <HAL_TIM_Base_Init+0x10e>
9000cefe:	1b55      	subs	r5, r2, r5
9000cf00:	f500 6080 	add.w	r0, r0, #1024	; 0x400
9000cf04:	fab5 f585 	clz	r5, r5
9000cf08:	4282      	cmp	r2, r0
9000cf0a:	ea4f 1555 	mov.w	r5, r5, lsr #5
9000cf0e:	d063      	beq.n	9000cfd8 <HAL_TIM_Base_Init+0x120>
9000cf10:	2d00      	cmp	r5, #0
9000cf12:	d161      	bne.n	9000cfd8 <HAL_TIM_Base_Init+0x120>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
9000cf14:	4840      	ldr	r0, [pc, #256]	; (9000d018 <HAL_TIM_Base_Init+0x160>)
9000cf16:	4941      	ldr	r1, [pc, #260]	; (9000d01c <HAL_TIM_Base_Init+0x164>)
9000cf18:	428a      	cmp	r2, r1
9000cf1a:	bf18      	it	ne
9000cf1c:	4282      	cmpne	r2, r0
9000cf1e:	d065      	beq.n	9000cfec <HAL_TIM_Base_Init+0x134>
9000cf20:	f501 6180 	add.w	r1, r1, #1024	; 0x400
9000cf24:	428a      	cmp	r2, r1
9000cf26:	d061      	beq.n	9000cfec <HAL_TIM_Base_Init+0x134>
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
9000cf28:	69a0      	ldr	r0, [r4, #24]
9000cf2a:	f023 0380 	bic.w	r3, r3, #128	; 0x80

  TIMx->CR1 = tmpcr1;

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
9000cf2e:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
9000cf30:	4303      	orrs	r3, r0
  TIMx->CR1 = tmpcr1;
9000cf32:	6013      	str	r3, [r2, #0]

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
9000cf34:	6863      	ldr	r3, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
9000cf36:	62d1      	str	r1, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
9000cf38:	6293      	str	r3, [r2, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
9000cf3a:	e023      	b.n	9000cf84 <HAL_TIM_Base_Init+0xcc>
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
9000cf3c:	4d35      	ldr	r5, [pc, #212]	; (9000d014 <HAL_TIM_Base_Init+0x15c>)
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
9000cf3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
9000cf42:	68a0      	ldr	r0, [r4, #8]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
9000cf44:	1b55      	subs	r5, r2, r5
    tmpcr1 |= Structure->CounterMode;
9000cf46:	4303      	orrs	r3, r0
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
9000cf48:	fab5 f585 	clz	r5, r5
9000cf4c:	096d      	lsrs	r5, r5, #5
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
9000cf4e:	6920      	ldr	r0, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
9000cf50:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
9000cf54:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
9000cf56:	69a0      	ldr	r0, [r4, #24]
9000cf58:	f023 0380 	bic.w	r3, r3, #128	; 0x80
9000cf5c:	4303      	orrs	r3, r0
  TIMx->CR1 = tmpcr1;
9000cf5e:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
9000cf60:	68e3      	ldr	r3, [r4, #12]
9000cf62:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
9000cf64:	6863      	ldr	r3, [r4, #4]
9000cf66:	6293      	str	r3, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
9000cf68:	b951      	cbnz	r1, 9000cf80 <HAL_TIM_Base_Init+0xc8>
9000cf6a:	b94d      	cbnz	r5, 9000cf80 <HAL_TIM_Base_Init+0xc8>
9000cf6c:	492a      	ldr	r1, [pc, #168]	; (9000d018 <HAL_TIM_Base_Init+0x160>)
9000cf6e:	4b2b      	ldr	r3, [pc, #172]	; (9000d01c <HAL_TIM_Base_Init+0x164>)
9000cf70:	429a      	cmp	r2, r3
9000cf72:	bf18      	it	ne
9000cf74:	428a      	cmpne	r2, r1
9000cf76:	d003      	beq.n	9000cf80 <HAL_TIM_Base_Init+0xc8>
9000cf78:	f503 6380 	add.w	r3, r3, #1024	; 0x400
9000cf7c:	429a      	cmp	r2, r3
9000cf7e:	d101      	bne.n	9000cf84 <HAL_TIM_Base_Init+0xcc>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
9000cf80:	6963      	ldr	r3, [r4, #20]
9000cf82:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
9000cf84:	2301      	movs	r3, #1
  return HAL_OK;
9000cf86:	2000      	movs	r0, #0
  TIMx->EGR = TIM_EGR_UG;
9000cf88:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
9000cf8a:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
9000cf8e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
9000cf92:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
9000cf96:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
9000cf9a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
9000cf9e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
9000cfa2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
9000cfa6:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
9000cfaa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
9000cfae:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
9000cfb2:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
9000cfb6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
9000cfba:	bd38      	pop	{r3, r4, r5, pc}
    htim->Lock = HAL_UNLOCKED;
9000cfbc:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
9000cfc0:	f7ff ff78 	bl	9000ceb4 <HAL_TIM_Base_MspInit>
9000cfc4:	e783      	b.n	9000cece <HAL_TIM_Base_Init+0x16>
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
9000cfc6:	1b55      	subs	r5, r2, r5
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
9000cfc8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
9000cfcc:	68a0      	ldr	r0, [r4, #8]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
9000cfce:	fab5 f585 	clz	r5, r5
    tmpcr1 |= Structure->CounterMode;
9000cfd2:	4303      	orrs	r3, r0
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
9000cfd4:	096d      	lsrs	r5, r5, #5
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
9000cfd6:	e7ba      	b.n	9000cf4e <HAL_TIM_Base_Init+0x96>
    tmpcr1 |= Structure->CounterMode;
9000cfd8:	68a0      	ldr	r0, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
9000cfda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
9000cfde:	4303      	orrs	r3, r0
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
9000cfe0:	480f      	ldr	r0, [pc, #60]	; (9000d020 <HAL_TIM_Base_Init+0x168>)
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
9000cfe2:	4282      	cmp	r2, r0
9000cfe4:	d0b3      	beq.n	9000cf4e <HAL_TIM_Base_Init+0x96>
9000cfe6:	2d00      	cmp	r5, #0
9000cfe8:	d1b1      	bne.n	9000cf4e <HAL_TIM_Base_Init+0x96>
9000cfea:	e793      	b.n	9000cf14 <HAL_TIM_Base_Init+0x5c>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
9000cfec:	6920      	ldr	r0, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
9000cfee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
9000cff2:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
9000cff4:	4303      	orrs	r3, r0
  TIMx->ARR = (uint32_t)Structure->Period ;
9000cff6:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
9000cff8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
9000cffc:	430b      	orrs	r3, r1
  TIMx->PSC = Structure->Prescaler;
9000cffe:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
9000d000:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
9000d002:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
9000d004:	6291      	str	r1, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
9000d006:	e7b1      	b.n	9000cf6c <HAL_TIM_Base_Init+0xb4>
    return HAL_ERROR;
9000d008:	2001      	movs	r0, #1
}
9000d00a:	4770      	bx	lr
9000d00c:	40010000 	.word	0x40010000
9000d010:	40000400 	.word	0x40000400
9000d014:	40010400 	.word	0x40010400
9000d018:	40014000 	.word	0x40014000
9000d01c:	40014400 	.word	0x40014400
9000d020:	40000c00 	.word	0x40000c00

9000d024 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
9000d024:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
9000d028:	2b01      	cmp	r3, #1
9000d02a:	d141      	bne.n	9000d0b0 <HAL_TIM_Base_Start_IT+0x8c>
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
9000d02c:	6802      	ldr	r2, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
9000d02e:	2102      	movs	r1, #2
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
9000d030:	4b24      	ldr	r3, [pc, #144]	; (9000d0c4 <HAL_TIM_Base_Start_IT+0xa0>)
9000d032:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
9000d036:	bf18      	it	ne
9000d038:	429a      	cmpne	r2, r3
{
9000d03a:	b430      	push	{r4, r5}
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
9000d03c:	bf0c      	ite	eq
9000d03e:	2301      	moveq	r3, #1
9000d040:	2300      	movne	r3, #0
9000d042:	4d21      	ldr	r5, [pc, #132]	; (9000d0c8 <HAL_TIM_Base_Start_IT+0xa4>)
9000d044:	4c21      	ldr	r4, [pc, #132]	; (9000d0cc <HAL_TIM_Base_Start_IT+0xa8>)
9000d046:	42aa      	cmp	r2, r5
9000d048:	bf08      	it	eq
9000d04a:	f043 0301 	orreq.w	r3, r3, #1
  htim->State = HAL_TIM_STATE_BUSY;
9000d04e:	f880 103d 	strb.w	r1, [r0, #61]	; 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
9000d052:	68d1      	ldr	r1, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
9000d054:	42a2      	cmp	r2, r4
9000d056:	bf08      	it	eq
9000d058:	f043 0301 	orreq.w	r3, r3, #1
9000d05c:	f504 6480 	add.w	r4, r4, #1024	; 0x400
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
9000d060:	f041 0101 	orr.w	r1, r1, #1
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
9000d064:	481a      	ldr	r0, [pc, #104]	; (9000d0d0 <HAL_TIM_Base_Start_IT+0xac>)
9000d066:	42a2      	cmp	r2, r4
9000d068:	bf08      	it	eq
9000d06a:	f043 0301 	orreq.w	r3, r3, #1
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
9000d06e:	60d1      	str	r1, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
9000d070:	4282      	cmp	r2, r0
9000d072:	bf08      	it	eq
9000d074:	f043 0301 	orreq.w	r3, r3, #1
9000d078:	4916      	ldr	r1, [pc, #88]	; (9000d0d4 <HAL_TIM_Base_Start_IT+0xb0>)
9000d07a:	428a      	cmp	r2, r1
9000d07c:	bf08      	it	eq
9000d07e:	f043 0301 	orreq.w	r3, r3, #1
9000d082:	b933      	cbnz	r3, 9000d092 <HAL_TIM_Base_Start_IT+0x6e>
9000d084:	f500 5070 	add.w	r0, r0, #15360	; 0x3c00
9000d088:	1a10      	subs	r0, r2, r0
9000d08a:	fab0 f080 	clz	r0, r0
9000d08e:	0940      	lsrs	r0, r0, #5
9000d090:	b198      	cbz	r0, 9000d0ba <HAL_TIM_Base_Start_IT+0x96>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
9000d092:	6891      	ldr	r1, [r2, #8]
9000d094:	4b10      	ldr	r3, [pc, #64]	; (9000d0d8 <HAL_TIM_Base_Start_IT+0xb4>)
9000d096:	400b      	ands	r3, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
9000d098:	2b06      	cmp	r3, #6
9000d09a:	d00b      	beq.n	9000d0b4 <HAL_TIM_Base_Start_IT+0x90>
9000d09c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
9000d0a0:	d008      	beq.n	9000d0b4 <HAL_TIM_Base_Start_IT+0x90>
      __HAL_TIM_ENABLE(htim);
9000d0a2:	6813      	ldr	r3, [r2, #0]
  return HAL_OK;
9000d0a4:	2000      	movs	r0, #0
      __HAL_TIM_ENABLE(htim);
9000d0a6:	f043 0301 	orr.w	r3, r3, #1
9000d0aa:	6013      	str	r3, [r2, #0]
}
9000d0ac:	bc30      	pop	{r4, r5}
9000d0ae:	4770      	bx	lr
    return HAL_ERROR;
9000d0b0:	2001      	movs	r0, #1
}
9000d0b2:	4770      	bx	lr
  return HAL_OK;
9000d0b4:	2000      	movs	r0, #0
}
9000d0b6:	bc30      	pop	{r4, r5}
9000d0b8:	4770      	bx	lr
    __HAL_TIM_ENABLE(htim);
9000d0ba:	6813      	ldr	r3, [r2, #0]
9000d0bc:	f043 0301 	orr.w	r3, r3, #1
9000d0c0:	6013      	str	r3, [r2, #0]
9000d0c2:	e7f3      	b.n	9000d0ac <HAL_TIM_Base_Start_IT+0x88>
9000d0c4:	40010000 	.word	0x40010000
9000d0c8:	40000400 	.word	0x40000400
9000d0cc:	40000800 	.word	0x40000800
9000d0d0:	40010400 	.word	0x40010400
9000d0d4:	40001800 	.word	0x40001800
9000d0d8:	00010007 	.word	0x00010007

9000d0dc <HAL_TIM_OC_DelayElapsedCallback>:
9000d0dc:	4770      	bx	lr
9000d0de:	bf00      	nop

9000d0e0 <HAL_TIM_IC_CaptureCallback>:
9000d0e0:	4770      	bx	lr
9000d0e2:	bf00      	nop

9000d0e4 <HAL_TIM_PWM_PulseFinishedCallback>:
9000d0e4:	4770      	bx	lr
9000d0e6:	bf00      	nop

9000d0e8 <HAL_TIM_TriggerCallback>:
9000d0e8:	4770      	bx	lr
9000d0ea:	bf00      	nop

9000d0ec <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
9000d0ec:	6803      	ldr	r3, [r0, #0]
9000d0ee:	691a      	ldr	r2, [r3, #16]
9000d0f0:	0791      	lsls	r1, r2, #30
{
9000d0f2:	b510      	push	{r4, lr}
9000d0f4:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
9000d0f6:	d502      	bpl.n	9000d0fe <HAL_TIM_IRQHandler+0x12>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
9000d0f8:	68da      	ldr	r2, [r3, #12]
9000d0fa:	0792      	lsls	r2, r2, #30
9000d0fc:	d468      	bmi.n	9000d1d0 <HAL_TIM_IRQHandler+0xe4>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
9000d0fe:	691a      	ldr	r2, [r3, #16]
9000d100:	0752      	lsls	r2, r2, #29
9000d102:	d502      	bpl.n	9000d10a <HAL_TIM_IRQHandler+0x1e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
9000d104:	68da      	ldr	r2, [r3, #12]
9000d106:	0750      	lsls	r0, r2, #29
9000d108:	d44f      	bmi.n	9000d1aa <HAL_TIM_IRQHandler+0xbe>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
9000d10a:	691a      	ldr	r2, [r3, #16]
9000d10c:	0711      	lsls	r1, r2, #28
9000d10e:	d502      	bpl.n	9000d116 <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
9000d110:	68da      	ldr	r2, [r3, #12]
9000d112:	0712      	lsls	r2, r2, #28
9000d114:	d437      	bmi.n	9000d186 <HAL_TIM_IRQHandler+0x9a>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
9000d116:	691a      	ldr	r2, [r3, #16]
9000d118:	06d0      	lsls	r0, r2, #27
9000d11a:	d502      	bpl.n	9000d122 <HAL_TIM_IRQHandler+0x36>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
9000d11c:	68da      	ldr	r2, [r3, #12]
9000d11e:	06d1      	lsls	r1, r2, #27
9000d120:	d41e      	bmi.n	9000d160 <HAL_TIM_IRQHandler+0x74>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
9000d122:	691a      	ldr	r2, [r3, #16]
9000d124:	07d2      	lsls	r2, r2, #31
9000d126:	d502      	bpl.n	9000d12e <HAL_TIM_IRQHandler+0x42>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
9000d128:	68da      	ldr	r2, [r3, #12]
9000d12a:	07d0      	lsls	r0, r2, #31
9000d12c:	d469      	bmi.n	9000d202 <HAL_TIM_IRQHandler+0x116>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
9000d12e:	691a      	ldr	r2, [r3, #16]
9000d130:	0611      	lsls	r1, r2, #24
9000d132:	d502      	bpl.n	9000d13a <HAL_TIM_IRQHandler+0x4e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
9000d134:	68da      	ldr	r2, [r3, #12]
9000d136:	0612      	lsls	r2, r2, #24
9000d138:	d46b      	bmi.n	9000d212 <HAL_TIM_IRQHandler+0x126>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
9000d13a:	691a      	ldr	r2, [r3, #16]
9000d13c:	05d0      	lsls	r0, r2, #23
9000d13e:	d502      	bpl.n	9000d146 <HAL_TIM_IRQHandler+0x5a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
9000d140:	68da      	ldr	r2, [r3, #12]
9000d142:	0611      	lsls	r1, r2, #24
9000d144:	d46d      	bmi.n	9000d222 <HAL_TIM_IRQHandler+0x136>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
9000d146:	691a      	ldr	r2, [r3, #16]
9000d148:	0652      	lsls	r2, r2, #25
9000d14a:	d502      	bpl.n	9000d152 <HAL_TIM_IRQHandler+0x66>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
9000d14c:	68da      	ldr	r2, [r3, #12]
9000d14e:	0650      	lsls	r0, r2, #25
9000d150:	d46f      	bmi.n	9000d232 <HAL_TIM_IRQHandler+0x146>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
9000d152:	691a      	ldr	r2, [r3, #16]
9000d154:	0691      	lsls	r1, r2, #26
9000d156:	d502      	bpl.n	9000d15e <HAL_TIM_IRQHandler+0x72>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
9000d158:	68da      	ldr	r2, [r3, #12]
9000d15a:	0692      	lsls	r2, r2, #26
9000d15c:	d449      	bmi.n	9000d1f2 <HAL_TIM_IRQHandler+0x106>
}
9000d15e:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
9000d160:	f06f 0110 	mvn.w	r1, #16
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
9000d164:	2208      	movs	r2, #8
        HAL_TIM_IC_CaptureCallback(htim);
9000d166:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
9000d168:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
9000d16a:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
9000d16c:	69db      	ldr	r3, [r3, #28]
9000d16e:	f413 7f40 	tst.w	r3, #768	; 0x300
9000d172:	d16f      	bne.n	9000d254 <HAL_TIM_IRQHandler+0x168>
        HAL_TIM_OC_DelayElapsedCallback(htim);
9000d174:	f7ff ffb2 	bl	9000d0dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
9000d178:	4620      	mov	r0, r4
9000d17a:	f7ff ffb3 	bl	9000d0e4 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
9000d17e:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
9000d180:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
9000d182:	7722      	strb	r2, [r4, #28]
9000d184:	e7cd      	b.n	9000d122 <HAL_TIM_IRQHandler+0x36>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
9000d186:	f06f 0108 	mvn.w	r1, #8
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
9000d18a:	2204      	movs	r2, #4
        HAL_TIM_IC_CaptureCallback(htim);
9000d18c:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
9000d18e:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
9000d190:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
9000d192:	69db      	ldr	r3, [r3, #28]
9000d194:	079b      	lsls	r3, r3, #30
9000d196:	d15a      	bne.n	9000d24e <HAL_TIM_IRQHandler+0x162>
        HAL_TIM_OC_DelayElapsedCallback(htim);
9000d198:	f7ff ffa0 	bl	9000d0dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
9000d19c:	4620      	mov	r0, r4
9000d19e:	f7ff ffa1 	bl	9000d0e4 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
9000d1a2:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
9000d1a4:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
9000d1a6:	7722      	strb	r2, [r4, #28]
9000d1a8:	e7b5      	b.n	9000d116 <HAL_TIM_IRQHandler+0x2a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
9000d1aa:	f06f 0104 	mvn.w	r1, #4
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
9000d1ae:	2202      	movs	r2, #2
        HAL_TIM_IC_CaptureCallback(htim);
9000d1b0:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
9000d1b2:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
9000d1b4:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
9000d1b6:	699b      	ldr	r3, [r3, #24]
9000d1b8:	f413 7f40 	tst.w	r3, #768	; 0x300
9000d1bc:	d144      	bne.n	9000d248 <HAL_TIM_IRQHandler+0x15c>
        HAL_TIM_OC_DelayElapsedCallback(htim);
9000d1be:	f7ff ff8d 	bl	9000d0dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
9000d1c2:	4620      	mov	r0, r4
9000d1c4:	f7ff ff8e 	bl	9000d0e4 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
9000d1c8:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
9000d1ca:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
9000d1cc:	7722      	strb	r2, [r4, #28]
9000d1ce:	e79c      	b.n	9000d10a <HAL_TIM_IRQHandler+0x1e>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
9000d1d0:	f06f 0102 	mvn.w	r1, #2
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
9000d1d4:	2201      	movs	r2, #1
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
9000d1d6:	6119      	str	r1, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
9000d1d8:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
9000d1da:	699b      	ldr	r3, [r3, #24]
9000d1dc:	0799      	lsls	r1, r3, #30
9000d1de:	d130      	bne.n	9000d242 <HAL_TIM_IRQHandler+0x156>
          HAL_TIM_OC_DelayElapsedCallback(htim);
9000d1e0:	f7ff ff7c 	bl	9000d0dc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
9000d1e4:	4620      	mov	r0, r4
9000d1e6:	f7ff ff7d 	bl	9000d0e4 <HAL_TIM_PWM_PulseFinishedCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
9000d1ea:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
9000d1ec:	6823      	ldr	r3, [r4, #0]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
9000d1ee:	7722      	strb	r2, [r4, #28]
9000d1f0:	e785      	b.n	9000d0fe <HAL_TIM_IRQHandler+0x12>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
9000d1f2:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
9000d1f6:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
9000d1f8:	611a      	str	r2, [r3, #16]
}
9000d1fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
9000d1fe:	f000 b82d 	b.w	9000d25c <HAL_TIMEx_CommutCallback>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
9000d202:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
9000d206:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
9000d208:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
9000d20a:	f7f7 f9e5 	bl	900045d8 <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
9000d20e:	6823      	ldr	r3, [r4, #0]
9000d210:	e78d      	b.n	9000d12e <HAL_TIM_IRQHandler+0x42>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
9000d212:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
9000d216:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
9000d218:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
9000d21a:	f000 f821 	bl	9000d260 <HAL_TIMEx_BreakCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
9000d21e:	6823      	ldr	r3, [r4, #0]
9000d220:	e78b      	b.n	9000d13a <HAL_TIM_IRQHandler+0x4e>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
9000d222:	f46f 7280 	mvn.w	r2, #256	; 0x100
      HAL_TIMEx_Break2Callback(htim);
9000d226:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
9000d228:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
9000d22a:	f000 f81b 	bl	9000d264 <HAL_TIMEx_Break2Callback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
9000d22e:	6823      	ldr	r3, [r4, #0]
9000d230:	e789      	b.n	9000d146 <HAL_TIM_IRQHandler+0x5a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
9000d232:	f06f 0240 	mvn.w	r2, #64	; 0x40
      HAL_TIM_TriggerCallback(htim);
9000d236:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
9000d238:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
9000d23a:	f7ff ff55 	bl	9000d0e8 <HAL_TIM_TriggerCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
9000d23e:	6823      	ldr	r3, [r4, #0]
9000d240:	e787      	b.n	9000d152 <HAL_TIM_IRQHandler+0x66>
          HAL_TIM_IC_CaptureCallback(htim);
9000d242:	f7ff ff4d 	bl	9000d0e0 <HAL_TIM_IC_CaptureCallback>
9000d246:	e7d0      	b.n	9000d1ea <HAL_TIM_IRQHandler+0xfe>
        HAL_TIM_IC_CaptureCallback(htim);
9000d248:	f7ff ff4a 	bl	9000d0e0 <HAL_TIM_IC_CaptureCallback>
9000d24c:	e7bc      	b.n	9000d1c8 <HAL_TIM_IRQHandler+0xdc>
        HAL_TIM_IC_CaptureCallback(htim);
9000d24e:	f7ff ff47 	bl	9000d0e0 <HAL_TIM_IC_CaptureCallback>
9000d252:	e7a6      	b.n	9000d1a2 <HAL_TIM_IRQHandler+0xb6>
        HAL_TIM_IC_CaptureCallback(htim);
9000d254:	f7ff ff44 	bl	9000d0e0 <HAL_TIM_IC_CaptureCallback>
9000d258:	e791      	b.n	9000d17e <HAL_TIM_IRQHandler+0x92>
9000d25a:	bf00      	nop

9000d25c <HAL_TIMEx_CommutCallback>:
9000d25c:	4770      	bx	lr
9000d25e:	bf00      	nop

9000d260 <HAL_TIMEx_BreakCallback>:
9000d260:	4770      	bx	lr
9000d262:	bf00      	nop

9000d264 <HAL_TIMEx_Break2Callback>:
9000d264:	4770      	bx	lr
9000d266:	bf00      	nop

9000d268 <FMC_SDRAM_Init>:
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
9000d268:	680b      	ldr	r3, [r1, #0]
{
9000d26a:	b410      	push	{r4}
  if (Init->SDBank == FMC_SDRAM_BANK1)
9000d26c:	b9d3      	cbnz	r3, 9000d2a4 <FMC_SDRAM_Init+0x3c>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
9000d26e:	6804      	ldr	r4, [r0, #0]
9000d270:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
9000d274:	684a      	ldr	r2, [r1, #4]
9000d276:	4023      	ands	r3, r4
9000d278:	4313      	orrs	r3, r2
9000d27a:	e9d1 4202 	ldrd	r4, r2, [r1, #8]
9000d27e:	4323      	orrs	r3, r4
9000d280:	4313      	orrs	r3, r2
9000d282:	e9d1 4204 	ldrd	r4, r2, [r1, #16]
9000d286:	4323      	orrs	r3, r4
9000d288:	4313      	orrs	r3, r2
9000d28a:	e9d1 4206 	ldrd	r4, r2, [r1, #24]
9000d28e:	4323      	orrs	r3, r4
9000d290:	4313      	orrs	r3, r2
9000d292:	e9d1 4208 	ldrd	r4, r2, [r1, #32]
9000d296:	4323      	orrs	r3, r4
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
}
9000d298:	f85d 4b04 	ldr.w	r4, [sp], #4
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
9000d29c:	4313      	orrs	r3, r2
9000d29e:	6003      	str	r3, [r0, #0]
}
9000d2a0:	2000      	movs	r0, #0
9000d2a2:	4770      	bx	lr
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
9000d2a4:	6802      	ldr	r2, [r0, #0]
9000d2a6:	e9d1 4307 	ldrd	r4, r3, [r1, #28]
9000d2aa:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
9000d2ae:	4322      	orrs	r2, r4
9000d2b0:	6a4c      	ldr	r4, [r1, #36]	; 0x24
9000d2b2:	431a      	orrs	r2, r3
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
9000d2b4:	4b0a      	ldr	r3, [pc, #40]	; (9000d2e0 <FMC_SDRAM_Init+0x78>)
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
9000d2b6:	4322      	orrs	r2, r4
9000d2b8:	6002      	str	r2, [r0, #0]
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
9000d2ba:	6842      	ldr	r2, [r0, #4]
9000d2bc:	4013      	ands	r3, r2
9000d2be:	e9d1 4201 	ldrd	r4, r2, [r1, #4]
9000d2c2:	4323      	orrs	r3, r4
9000d2c4:	4313      	orrs	r3, r2
9000d2c6:	e9d1 4203 	ldrd	r4, r2, [r1, #12]
9000d2ca:	4323      	orrs	r3, r4
9000d2cc:	4313      	orrs	r3, r2
9000d2ce:	e9d1 4205 	ldrd	r4, r2, [r1, #20]
9000d2d2:	4323      	orrs	r3, r4
}
9000d2d4:	f85d 4b04 	ldr.w	r4, [sp], #4
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
9000d2d8:	4313      	orrs	r3, r2
9000d2da:	6043      	str	r3, [r0, #4]
}
9000d2dc:	2000      	movs	r0, #0
9000d2de:	4770      	bx	lr
9000d2e0:	ffff8000 	.word	0xffff8000

9000d2e4 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
9000d2e4:	b430      	push	{r4, r5}
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
9000d2e6:	bb0a      	cbnz	r2, 9000d32c <FMC_SDRAM_Timing_Init+0x48>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
9000d2e8:	6883      	ldr	r3, [r0, #8]
9000d2ea:	e9d1 2400 	ldrd	r2, r4, [r1]
9000d2ee:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
9000d2f2:	3c01      	subs	r4, #1
9000d2f4:	3a01      	subs	r2, #1
9000d2f6:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
9000d2fa:	4313      	orrs	r3, r2
9000d2fc:	e9d1 4202 	ldrd	r4, r2, [r1, #8]
9000d300:	3c01      	subs	r4, #1
9000d302:	3a01      	subs	r2, #1
9000d304:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
9000d308:	e9d1 5404 	ldrd	r5, r4, [r1, #16]
9000d30c:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
9000d310:	698a      	ldr	r2, [r1, #24]
9000d312:	3d01      	subs	r5, #1
9000d314:	1e61      	subs	r1, r4, #1
9000d316:	3a01      	subs	r2, #1
9000d318:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
9000d31c:	ea43 5301 	orr.w	r3, r3, r1, lsl #20
9000d320:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
}
9000d324:	bc30      	pop	{r4, r5}
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
9000d326:	6083      	str	r3, [r0, #8]
}
9000d328:	2000      	movs	r0, #0
9000d32a:	4770      	bx	lr
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
9000d32c:	6885      	ldr	r5, [r0, #8]
9000d32e:	68ca      	ldr	r2, [r1, #12]
9000d330:	4b12      	ldr	r3, [pc, #72]	; (9000d37c <FMC_SDRAM_Timing_Init+0x98>)
9000d332:	1e54      	subs	r4, r2, #1
9000d334:	694a      	ldr	r2, [r1, #20]
9000d336:	402b      	ands	r3, r5
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
9000d338:	688d      	ldr	r5, [r1, #8]
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
9000d33a:	3a01      	subs	r2, #1
9000d33c:	ea43 3304 	orr.w	r3, r3, r4, lsl #12
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
9000d340:	f105 3cff 	add.w	ip, r5, #4294967295
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
9000d344:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
9000d348:	e9d1 2400 	ldrd	r2, r4, [r1]
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
9000d34c:	6083      	str	r3, [r0, #8]
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
9000d34e:	68c3      	ldr	r3, [r0, #12]
9000d350:	3c01      	subs	r4, #1
9000d352:	3a01      	subs	r2, #1
9000d354:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
9000d358:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
9000d35c:	690c      	ldr	r4, [r1, #16]
9000d35e:	4313      	orrs	r3, r2
9000d360:	698a      	ldr	r2, [r1, #24]
9000d362:	1e61      	subs	r1, r4, #1
9000d364:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
9000d368:	3a01      	subs	r2, #1
9000d36a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
9000d36e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
}
9000d372:	bc30      	pop	{r4, r5}
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
9000d374:	60c3      	str	r3, [r0, #12]
}
9000d376:	2000      	movs	r0, #0
9000d378:	4770      	bx	lr
9000d37a:	bf00      	nop
9000d37c:	ff0f0fff 	.word	0xff0f0fff

9000d380 <FMC_SDRAM_DeInit>:
  * @brief  DeInitializes the FMC_SDRAM peripheral
  * @param  Device Pointer to SDRAM device instance
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_DeInit(FMC_SDRAM_TypeDef *Device, uint32_t Bank)
{
9000d380:	b430      	push	{r4, r5}
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* De-initialize the SDRAM device */
  Device->SDCR[Bank] = 0x000002D0U;
  Device->SDTR[Bank] = 0x0FFFFFFFU;
  Device->SDCMR      = 0x00000000U;
9000d382:	2200      	movs	r2, #0
{
9000d384:	4603      	mov	r3, r0
  Device->SDCR[Bank] = 0x000002D0U;
9000d386:	f44f 7534 	mov.w	r5, #720	; 0x2d0
  Device->SDTR[Bank] = 0x0FFFFFFFU;
9000d38a:	f06f 4470 	mvn.w	r4, #4026531840	; 0xf0000000
9000d38e:	eb00 0c81 	add.w	ip, r0, r1, lsl #2
  Device->SDCR[Bank] = 0x000002D0U;
9000d392:	f840 5021 	str.w	r5, [r0, r1, lsl #2]
  Device->SDRTR      = 0x00000000U;
  Device->SDSR       = 0x00000000U;

  return HAL_OK;
}
9000d396:	4610      	mov	r0, r2
  Device->SDTR[Bank] = 0x0FFFFFFFU;
9000d398:	f8cc 4008 	str.w	r4, [ip, #8]
  Device->SDCMR      = 0x00000000U;
9000d39c:	611a      	str	r2, [r3, #16]
  Device->SDRTR      = 0x00000000U;
9000d39e:	615a      	str	r2, [r3, #20]
  Device->SDSR       = 0x00000000U;
9000d3a0:	619a      	str	r2, [r3, #24]
}
9000d3a2:	bc30      	pop	{r4, r5}
9000d3a4:	4770      	bx	lr
9000d3a6:	bf00      	nop

9000d3a8 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
9000d3a8:	b410      	push	{r4}
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
9000d3aa:	e9d1 3400 	ldrd	r3, r4, [r1]
{
9000d3ae:	4602      	mov	r2, r0
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
9000d3b0:	6900      	ldr	r0, [r0, #16]
9000d3b2:	4323      	orrs	r3, r4
9000d3b4:	e9d1 1402 	ldrd	r1, r4, [r1, #8]
9000d3b8:	ea43 2344 	orr.w	r3, r3, r4, lsl #9
9000d3bc:	4c05      	ldr	r4, [pc, #20]	; (9000d3d4 <FMC_SDRAM_SendCommand+0x2c>)
9000d3be:	3901      	subs	r1, #1
9000d3c0:	4004      	ands	r4, r0
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
}
9000d3c2:	2000      	movs	r0, #0
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
9000d3c4:	4323      	orrs	r3, r4
}
9000d3c6:	f85d 4b04 	ldr.w	r4, [sp], #4
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
9000d3ca:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
9000d3ce:	6113      	str	r3, [r2, #16]
}
9000d3d0:	4770      	bx	lr
9000d3d2:	bf00      	nop
9000d3d4:	ffc00000 	.word	0xffc00000

9000d3d8 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
9000d3d8:	4602      	mov	r2, r0
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
9000d3da:	4b05      	ldr	r3, [pc, #20]	; (9000d3f0 <FMC_SDRAM_ProgramRefreshRate+0x18>)

  return HAL_OK;
}
9000d3dc:	2000      	movs	r0, #0
{
9000d3de:	b410      	push	{r4}
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
9000d3e0:	6954      	ldr	r4, [r2, #20]
9000d3e2:	4023      	ands	r3, r4
}
9000d3e4:	f85d 4b04 	ldr.w	r4, [sp], #4
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
9000d3e8:	ea43 0141 	orr.w	r1, r3, r1, lsl #1
9000d3ec:	6151      	str	r1, [r2, #20]
}
9000d3ee:	4770      	bx	lr
9000d3f0:	ffffc001 	.word	0xffffc001

9000d3f4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
9000d3f4:	b508      	push	{r3, lr}
  /* Clear overflow flag */
  SysTick->CTRL;
9000d3f6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
9000d3fa:	691b      	ldr	r3, [r3, #16]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
9000d3fc:	f002 fcdc 	bl	9000fdb8 <xTaskGetSchedulerState>
9000d400:	2801      	cmp	r0, #1
9000d402:	d100      	bne.n	9000d406 <SysTick_Handler+0x12>
    /* Call tick handler */
    xPortSysTickHandler();
  }
}
9000d404:	bd08      	pop	{r3, pc}
9000d406:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    xPortSysTickHandler();
9000d40a:	f000 bcdb 	b.w	9000ddc4 <xPortSysTickHandler>
9000d40e:	bf00      	nop

9000d410 <osKernelInitialize>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
9000d410:	f3ef 8305 	mrs	r3, IPSR
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
9000d414:	b92b      	cbnz	r3, 9000d422 <osKernelInitialize+0x12>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelInactive) {
9000d416:	4b06      	ldr	r3, [pc, #24]	; (9000d430 <osKernelInitialize+0x20>)
9000d418:	6818      	ldr	r0, [r3, #0]
9000d41a:	b928      	cbnz	r0, 9000d428 <osKernelInitialize+0x18>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
9000d41c:	2201      	movs	r2, #1
9000d41e:	601a      	str	r2, [r3, #0]
      stat = osOK;
9000d420:	4770      	bx	lr
    stat = osErrorISR;
9000d422:	f06f 0005 	mvn.w	r0, #5
9000d426:	4770      	bx	lr
    } else {
      stat = osError;
9000d428:	f04f 30ff 	mov.w	r0, #4294967295
    }
  }

  return (stat);
}
9000d42c:	4770      	bx	lr
9000d42e:	bf00      	nop
9000d430:	2400c084 	.word	0x2400c084

9000d434 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
9000d434:	b510      	push	{r4, lr}
9000d436:	f3ef 8405 	mrs	r4, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
9000d43a:	b974      	cbnz	r4, 9000d45a <osKernelStart+0x26>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelReady) {
9000d43c:	4b08      	ldr	r3, [pc, #32]	; (9000d460 <osKernelStart+0x2c>)
9000d43e:	681a      	ldr	r2, [r3, #0]
9000d440:	2a01      	cmp	r2, #1
9000d442:	d107      	bne.n	9000d454 <osKernelStart+0x20>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
9000d444:	4907      	ldr	r1, [pc, #28]	; (9000d464 <osKernelStart+0x30>)
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
9000d446:	2202      	movs	r2, #2
9000d448:	77cc      	strb	r4, [r1, #31]
9000d44a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
9000d44c:	f002 fa42 	bl	9000f8d4 <vTaskStartScheduler>
      stat = osOK;
9000d450:	4620      	mov	r0, r4
      stat = osError;
    }
  }

  return (stat);
}
9000d452:	bd10      	pop	{r4, pc}
      stat = osError;
9000d454:	f04f 30ff 	mov.w	r0, #4294967295
}
9000d458:	bd10      	pop	{r4, pc}
    stat = osErrorISR;
9000d45a:	f06f 0005 	mvn.w	r0, #5
}
9000d45e:	bd10      	pop	{r4, pc}
9000d460:	2400c084 	.word	0x2400c084
9000d464:	e000ed00 	.word	0xe000ed00

9000d468 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
9000d468:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
9000d46a:	2500      	movs	r5, #0
osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
9000d46c:	b087      	sub	sp, #28
9000d46e:	4614      	mov	r4, r2
  hTask = NULL;
9000d470:	9505      	str	r5, [sp, #20]
9000d472:	f3ef 8205 	mrs	r2, IPSR

  if (!IS_IRQ() && (func != NULL)) {
9000d476:	bb5a      	cbnz	r2, 9000d4d0 <osThreadNew+0x68>
9000d478:	4606      	mov	r6, r0
9000d47a:	b348      	cbz	r0, 9000d4d0 <osThreadNew+0x68>
    prio  = (UBaseType_t)osPriorityNormal;

    name = NULL;
    mem  = -1;

    if (attr != NULL) {
9000d47c:	b1e4      	cbz	r4, 9000d4b8 <osThreadNew+0x50>
      if (attr->name != NULL) {
        name = attr->name;
      }
      if (attr->priority != osPriorityNone) {
9000d47e:	69a7      	ldr	r7, [r4, #24]
9000d480:	bb4f      	cbnz	r7, 9000d4d6 <osThreadNew+0x6e>
9000d482:	2718      	movs	r7, #24
        prio = (UBaseType_t)attr->priority;
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
9000d484:	6863      	ldr	r3, [r4, #4]
9000d486:	07db      	lsls	r3, r3, #31
9000d488:	d422      	bmi.n	9000d4d0 <osThreadNew+0x68>
        return (NULL);
      }

      if (attr->stack_size > 0U) {
9000d48a:	6963      	ldr	r3, [r4, #20]
9000d48c:	b33b      	cbz	r3, 9000d4de <osThreadNew+0x76>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
9000d48e:	ea4f 0c93 	mov.w	ip, r3, lsr #2
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
9000d492:	68a0      	ldr	r0, [r4, #8]
      if (attr->name != NULL) {
9000d494:	6825      	ldr	r5, [r4, #0]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
9000d496:	b338      	cbz	r0, 9000d4e8 <osThreadNew+0x80>
9000d498:	68e2      	ldr	r2, [r4, #12]
9000d49a:	2a5f      	cmp	r2, #95	; 0x5f
9000d49c:	d918      	bls.n	9000d4d0 <osThreadNew+0x68>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
9000d49e:	6924      	ldr	r4, [r4, #16]
9000d4a0:	b1b3      	cbz	r3, 9000d4d0 <osThreadNew+0x68>
9000d4a2:	b1ac      	cbz	r4, 9000d4d0 <osThreadNew+0x68>
      mem = 0;
    }

    if (mem == 1) {
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
9000d4a4:	460b      	mov	r3, r1
9000d4a6:	4662      	mov	r2, ip
9000d4a8:	4629      	mov	r1, r5
9000d4aa:	9700      	str	r7, [sp, #0]
9000d4ac:	e9cd 4001 	strd	r4, r0, [sp, #4]
9000d4b0:	4630      	mov	r0, r6
9000d4b2:	f002 f873 	bl	9000f59c <xTaskCreateStatic>
9000d4b6:	e00c      	b.n	9000d4d2 <osThreadNew+0x6a>
9000d4b8:	2280      	movs	r2, #128	; 0x80
    prio  = (UBaseType_t)osPriorityNormal;
9000d4ba:	2718      	movs	r7, #24
      #endif
    }
    else {
      if (mem == 0) {
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
9000d4bc:	460b      	mov	r3, r1
9000d4be:	4621      	mov	r1, r4
9000d4c0:	ac05      	add	r4, sp, #20
9000d4c2:	4630      	mov	r0, r6
9000d4c4:	9700      	str	r7, [sp, #0]
9000d4c6:	9401      	str	r4, [sp, #4]
9000d4c8:	f002 f912 	bl	9000f6f0 <xTaskCreate>
9000d4cc:	2801      	cmp	r0, #1
9000d4ce:	d009      	beq.n	9000d4e4 <osThreadNew+0x7c>
        return (NULL);
9000d4d0:	2000      	movs	r0, #0
      }
    }
  }

  return ((osThreadId_t)hTask);
}
9000d4d2:	b007      	add	sp, #28
9000d4d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
9000d4d6:	1e7a      	subs	r2, r7, #1
9000d4d8:	2a37      	cmp	r2, #55	; 0x37
9000d4da:	d9d3      	bls.n	9000d484 <osThreadNew+0x1c>
9000d4dc:	e7f8      	b.n	9000d4d0 <osThreadNew+0x68>
    stack = configMINIMAL_STACK_SIZE;
9000d4de:	f04f 0c80 	mov.w	ip, #128	; 0x80
9000d4e2:	e7d6      	b.n	9000d492 <osThreadNew+0x2a>
  return ((osThreadId_t)hTask);
9000d4e4:	9805      	ldr	r0, [sp, #20]
9000d4e6:	e7f4      	b.n	9000d4d2 <osThreadNew+0x6a>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
9000d4e8:	68e3      	ldr	r3, [r4, #12]
9000d4ea:	2b00      	cmp	r3, #0
9000d4ec:	d1f1      	bne.n	9000d4d2 <osThreadNew+0x6a>
9000d4ee:	6923      	ldr	r3, [r4, #16]
9000d4f0:	2b00      	cmp	r3, #0
9000d4f2:	d1ee      	bne.n	9000d4d2 <osThreadNew+0x6a>
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
9000d4f4:	fa1f f28c 	uxth.w	r2, ip
9000d4f8:	462c      	mov	r4, r5
9000d4fa:	e7df      	b.n	9000d4bc <osThreadNew+0x54>

9000d4fc <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
9000d4fc:	b510      	push	{r4, lr}
9000d4fe:	f3ef 8405 	mrs	r4, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
9000d502:	b92c      	cbnz	r4, 9000d510 <osDelay+0x14>
    stat = osErrorISR;
  }
  else {
    stat = osOK;

    if (ticks != 0U) {
9000d504:	b900      	cbnz	r0, 9000d508 <osDelay+0xc>
      vTaskDelay(ticks);
    }
  }

  return (stat);
}
9000d506:	bd10      	pop	{r4, pc}
      vTaskDelay(ticks);
9000d508:	f002 f98e 	bl	9000f828 <vTaskDelay>
    stat = osOK;
9000d50c:	4620      	mov	r0, r4
}
9000d50e:	bd10      	pop	{r4, pc}
    stat = osErrorISR;
9000d510:	f06f 0005 	mvn.w	r0, #5
}
9000d514:	bd10      	pop	{r4, pc}
9000d516:	bf00      	nop

9000d518 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
9000d518:	b570      	push	{r4, r5, r6, lr}
9000d51a:	f3ef 8305 	mrs	r3, IPSR
  const char *name;
  #endif

  hMutex = NULL;

  if (!IS_IRQ()) {
9000d51e:	b9db      	cbnz	r3, 9000d558 <osMutexNew+0x40>
    if (attr != NULL) {
9000d520:	4604      	mov	r4, r0
9000d522:	b1e0      	cbz	r0, 9000d55e <osMutexNew+0x46>
      type = attr->attr_bits;
9000d524:	6846      	ldr	r6, [r0, #4]
      rmtx = 1U;
    } else {
      rmtx = 0U;
    }

    if ((type & osMutexRobust) != osMutexRobust) {
9000d526:	0733      	lsls	r3, r6, #28
9000d528:	d416      	bmi.n	9000d558 <osMutexNew+0x40>
      mem = -1;

      if (attr != NULL) {
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
9000d52a:	6881      	ldr	r1, [r0, #8]
    if ((type & osMutexRecursive) == osMutexRecursive) {
9000d52c:	f006 0601 	and.w	r6, r6, #1
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
9000d530:	68c3      	ldr	r3, [r0, #12]
9000d532:	b181      	cbz	r1, 9000d556 <osMutexNew+0x3e>
9000d534:	2b4f      	cmp	r3, #79	; 0x4f
9000d536:	d90f      	bls.n	9000d558 <osMutexNew+0x40>
        mem = 0;
      }

      if (mem == 1) {
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
9000d538:	b31e      	cbz	r6, 9000d582 <osMutexNew+0x6a>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
9000d53a:	2004      	movs	r0, #4
9000d53c:	f001 f854 	bl	9000e5e8 <xQueueCreateMutexStatic>
9000d540:	4605      	mov	r5, r0
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
9000d542:	b14d      	cbz	r5, 9000d558 <osMutexNew+0x40>
        if (attr != NULL) {
          name = attr->name;
        } else {
          name = NULL;
        }
        vQueueAddToRegistry (hMutex, name);
9000d544:	6821      	ldr	r1, [r4, #0]
9000d546:	4628      	mov	r0, r5
9000d548:	f001 fd84 	bl	9000f054 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
9000d54c:	b12e      	cbz	r6, 9000d55a <osMutexNew+0x42>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
9000d54e:	f045 0501 	orr.w	r5, r5, #1
      }
    }
  }

  return ((osMutexId_t)hMutex);
}
9000d552:	4628      	mov	r0, r5
9000d554:	bd70      	pop	{r4, r5, r6, pc}
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
9000d556:	b163      	cbz	r3, 9000d572 <osMutexNew+0x5a>
  hMutex = NULL;
9000d558:	2500      	movs	r5, #0
}
9000d55a:	4628      	mov	r0, r5
9000d55c:	bd70      	pop	{r4, r5, r6, pc}
              hMutex = xSemaphoreCreateMutex ();
9000d55e:	2001      	movs	r0, #1
9000d560:	f001 f8b2 	bl	9000e6c8 <xQueueCreateMutex>
      if (hMutex != NULL) {
9000d564:	4605      	mov	r5, r0
9000d566:	2800      	cmp	r0, #0
9000d568:	d0f6      	beq.n	9000d558 <osMutexNew+0x40>
        vQueueAddToRegistry (hMutex, name);
9000d56a:	4621      	mov	r1, r4
9000d56c:	f001 fd72 	bl	9000f054 <vQueueAddToRegistry>
      if ((hMutex != NULL) && (rmtx != 0U)) {
9000d570:	e7f3      	b.n	9000d55a <osMutexNew+0x42>
            if (rmtx != 0U) {
9000d572:	b15e      	cbz	r6, 9000d58c <osMutexNew+0x74>
              hMutex = xSemaphoreCreateRecursiveMutex ();
9000d574:	2004      	movs	r0, #4
9000d576:	f001 f8a7 	bl	9000e6c8 <xQueueCreateMutex>
      if (hMutex != NULL) {
9000d57a:	4605      	mov	r5, r0
9000d57c:	2800      	cmp	r0, #0
9000d57e:	d1e1      	bne.n	9000d544 <osMutexNew+0x2c>
9000d580:	e7ea      	b.n	9000d558 <osMutexNew+0x40>
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
9000d582:	2001      	movs	r0, #1
9000d584:	f001 f830 	bl	9000e5e8 <xQueueCreateMutexStatic>
9000d588:	4605      	mov	r5, r0
9000d58a:	e7da      	b.n	9000d542 <osMutexNew+0x2a>
              hMutex = xSemaphoreCreateMutex ();
9000d58c:	2001      	movs	r0, #1
9000d58e:	f001 f89b 	bl	9000e6c8 <xQueueCreateMutex>
      if (hMutex != NULL) {
9000d592:	4605      	mov	r5, r0
9000d594:	e7d5      	b.n	9000d542 <osMutexNew+0x2a>
9000d596:	bf00      	nop

9000d598 <osMutexAcquire>:
osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
9000d598:	f020 0201 	bic.w	r2, r0, #1

  rmtx = (uint32_t)mutex_id & 1U;
9000d59c:	f000 0301 	and.w	r3, r0, #1
9000d5a0:	f3ef 8005 	mrs	r0, IPSR

  stat = osOK;

  if (IS_IRQ()) {
9000d5a4:	b9a8      	cbnz	r0, 9000d5d2 <osMutexAcquire+0x3a>
    stat = osErrorISR;
  }
  else if (hMutex == NULL) {
9000d5a6:	b1ba      	cbz	r2, 9000d5d8 <osMutexAcquire+0x40>
    stat = osErrorParameter;
  }
  else {
    if (rmtx != 0U) {
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
9000d5a8:	4610      	mov	r0, r2
osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
9000d5aa:	b510      	push	{r4, lr}
9000d5ac:	460c      	mov	r4, r1
    if (rmtx != 0U) {
9000d5ae:	b953      	cbnz	r3, 9000d5c6 <osMutexAcquire+0x2e>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
9000d5b0:	f001 fb02 	bl	9000ebb8 <xQueueSemaphoreTake>
9000d5b4:	2801      	cmp	r0, #1
9000d5b6:	d00a      	beq.n	9000d5ce <osMutexAcquire+0x36>
          stat = osErrorResource;
9000d5b8:	2c00      	cmp	r4, #0
9000d5ba:	bf14      	ite	ne
9000d5bc:	f06f 0001 	mvnne.w	r0, #1
9000d5c0:	f06f 0002 	mvneq.w	r0, #2
      }
    }
  }

  return (stat);
}
9000d5c4:	bd10      	pop	{r4, pc}
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
9000d5c6:	f001 fc7f 	bl	9000eec8 <xQueueTakeMutexRecursive>
9000d5ca:	2801      	cmp	r0, #1
9000d5cc:	d1f4      	bne.n	9000d5b8 <osMutexAcquire+0x20>
  stat = osOK;
9000d5ce:	2000      	movs	r0, #0
}
9000d5d0:	bd10      	pop	{r4, pc}
    stat = osErrorISR;
9000d5d2:	f06f 0005 	mvn.w	r0, #5
9000d5d6:	4770      	bx	lr
    stat = osErrorParameter;
9000d5d8:	f06f 0003 	mvn.w	r0, #3
}
9000d5dc:	4770      	bx	lr
9000d5de:	bf00      	nop

9000d5e0 <osMutexRelease>:
9000d5e0:	f3ef 8205 	mrs	r2, IPSR

  rmtx = (uint32_t)mutex_id & 1U;

  stat = osOK;

  if (IS_IRQ()) {
9000d5e4:	b9ba      	cbnz	r2, 9000d616 <osMutexRelease+0x36>
osStatus_t osMutexRelease (osMutexId_t mutex_id) {
9000d5e6:	b510      	push	{r4, lr}
9000d5e8:	f020 0401 	bic.w	r4, r0, #1
    stat = osErrorISR;
  }
  else if (hMutex == NULL) {
9000d5ec:	b1b4      	cbz	r4, 9000d61c <osMutexRelease+0x3c>
    stat = osErrorParameter;
  }
  else {
    if (rmtx != 0U) {
9000d5ee:	f000 0301 	and.w	r3, r0, #1
9000d5f2:	b943      	cbnz	r3, 9000d606 <osMutexRelease+0x26>
        stat = osErrorResource;
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
9000d5f4:	461a      	mov	r2, r3
9000d5f6:	4619      	mov	r1, r3
9000d5f8:	4620      	mov	r0, r4
9000d5fa:	f000 fe73 	bl	9000e2e4 <xQueueGenericSend>
9000d5fe:	2801      	cmp	r0, #1
9000d600:	d106      	bne.n	9000d610 <osMutexRelease+0x30>
  stat = osOK;
9000d602:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
9000d604:	bd10      	pop	{r4, pc}
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
9000d606:	4620      	mov	r0, r4
9000d608:	f001 f83e 	bl	9000e688 <xQueueGiveMutexRecursive>
9000d60c:	2801      	cmp	r0, #1
9000d60e:	d0f8      	beq.n	9000d602 <osMutexRelease+0x22>
        stat = osErrorResource;
9000d610:	f06f 0002 	mvn.w	r0, #2
}
9000d614:	bd10      	pop	{r4, pc}
    stat = osErrorISR;
9000d616:	f06f 0005 	mvn.w	r0, #5
}
9000d61a:	4770      	bx	lr
    stat = osErrorParameter;
9000d61c:	f06f 0003 	mvn.w	r0, #3
}
9000d620:	bd10      	pop	{r4, pc}
9000d622:	bf00      	nop

9000d624 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
9000d624:	b5f0      	push	{r4, r5, r6, r7, lr}
9000d626:	b083      	sub	sp, #12
9000d628:	f3ef 8605 	mrs	r6, IPSR
  const char *name;
  #endif

  hSemaphore = NULL;

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
9000d62c:	b98e      	cbnz	r6, 9000d652 <osSemaphoreNew+0x2e>
9000d62e:	4605      	mov	r5, r0
9000d630:	b178      	cbz	r0, 9000d652 <osSemaphoreNew+0x2e>
9000d632:	4288      	cmp	r0, r1
9000d634:	460f      	mov	r7, r1
9000d636:	d30c      	bcc.n	9000d652 <osSemaphoreNew+0x2e>
    mem = -1;

    if (attr != NULL) {
9000d638:	4614      	mov	r4, r2
9000d63a:	b182      	cbz	r2, 9000d65e <osSemaphoreNew+0x3a>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
9000d63c:	e9d2 2302 	ldrd	r2, r3, [r2, #8]
9000d640:	b15a      	cbz	r2, 9000d65a <osSemaphoreNew+0x36>
9000d642:	2b4f      	cmp	r3, #79	; 0x4f
9000d644:	d905      	bls.n	9000d652 <osSemaphoreNew+0x2e>
    else {
      mem = 0;
    }

    if (mem != -1) {
      if (max_count == 1U) {
9000d646:	2801      	cmp	r0, #1
9000d648:	d032      	beq.n	9000d6b0 <osSemaphoreNew+0x8c>
        }
      }
      else {
        if (mem == 1) {
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
9000d64a:	f000 fda3 	bl	9000e194 <xQueueCreateCountingSemaphoreStatic>
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
9000d64e:	4605      	mov	r5, r0
9000d650:	b978      	cbnz	r0, 9000d672 <osSemaphoreNew+0x4e>
  hSemaphore = NULL;
9000d652:	2500      	movs	r5, #0
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
}
9000d654:	4628      	mov	r0, r5
9000d656:	b003      	add	sp, #12
9000d658:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
9000d65a:	2b00      	cmp	r3, #0
9000d65c:	d1f9      	bne.n	9000d652 <osSemaphoreNew+0x2e>
      if (max_count == 1U) {
9000d65e:	2d01      	cmp	r5, #1
9000d660:	d00f      	beq.n	9000d682 <osSemaphoreNew+0x5e>
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
9000d662:	4628      	mov	r0, r5
9000d664:	4639      	mov	r1, r7
9000d666:	f000 fdf7 	bl	9000e258 <xQueueCreateCountingSemaphore>
9000d66a:	4605      	mov	r5, r0
      if (hSemaphore != NULL) {
9000d66c:	2d00      	cmp	r5, #0
9000d66e:	d0f0      	beq.n	9000d652 <osSemaphoreNew+0x2e>
        if (attr != NULL) {
9000d670:	b104      	cbz	r4, 9000d674 <osSemaphoreNew+0x50>
          name = attr->name;
9000d672:	6824      	ldr	r4, [r4, #0]
        vQueueAddToRegistry (hSemaphore, name);
9000d674:	4628      	mov	r0, r5
9000d676:	4621      	mov	r1, r4
9000d678:	f001 fcec 	bl	9000f054 <vQueueAddToRegistry>
}
9000d67c:	4628      	mov	r0, r5
9000d67e:	b003      	add	sp, #12
9000d680:	bdf0      	pop	{r4, r5, r6, r7, pc}
            hSemaphore = xSemaphoreCreateBinary();
9000d682:	4628      	mov	r0, r5
9000d684:	2203      	movs	r2, #3
9000d686:	2100      	movs	r1, #0
9000d688:	f000 fd42 	bl	9000e110 <xQueueGenericCreate>
9000d68c:	4605      	mov	r5, r0
        if ((hSemaphore != NULL) && (initial_count != 0U)) {
9000d68e:	2d00      	cmp	r5, #0
9000d690:	d0df      	beq.n	9000d652 <osSemaphoreNew+0x2e>
9000d692:	2f00      	cmp	r7, #0
9000d694:	d0ea      	beq.n	9000d66c <osSemaphoreNew+0x48>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
9000d696:	2300      	movs	r3, #0
9000d698:	4628      	mov	r0, r5
9000d69a:	461a      	mov	r2, r3
9000d69c:	4619      	mov	r1, r3
9000d69e:	f000 fe21 	bl	9000e2e4 <xQueueGenericSend>
9000d6a2:	2801      	cmp	r0, #1
9000d6a4:	d0e4      	beq.n	9000d670 <osSemaphoreNew+0x4c>
            vSemaphoreDelete (hSemaphore);
9000d6a6:	4628      	mov	r0, r5
            hSemaphore = NULL;
9000d6a8:	2500      	movs	r5, #0
            vSemaphoreDelete (hSemaphore);
9000d6aa:	f001 fc8d 	bl	9000efc8 <vQueueDelete>
      if (hSemaphore != NULL) {
9000d6ae:	e7d1      	b.n	9000d654 <osSemaphoreNew+0x30>
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
9000d6b0:	4613      	mov	r3, r2
9000d6b2:	2203      	movs	r2, #3
9000d6b4:	4631      	mov	r1, r6
9000d6b6:	9200      	str	r2, [sp, #0]
9000d6b8:	4632      	mov	r2, r6
9000d6ba:	f000 fcbd 	bl	9000e038 <xQueueGenericCreateStatic>
9000d6be:	4605      	mov	r5, r0
9000d6c0:	e7e5      	b.n	9000d68e <osSemaphoreNew+0x6a>
9000d6c2:	bf00      	nop

9000d6c4 <osSemaphoreAcquire>:
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
9000d6c4:	b370      	cbz	r0, 9000d724 <osSemaphoreAcquire+0x60>
osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
9000d6c6:	b510      	push	{r4, lr}
9000d6c8:	460c      	mov	r4, r1
9000d6ca:	b082      	sub	sp, #8
9000d6cc:	f3ef 8305 	mrs	r3, IPSR
    stat = osErrorParameter;
  }
  else if (IS_IRQ()) {
9000d6d0:	b1c3      	cbz	r3, 9000d704 <osSemaphoreAcquire+0x40>
    if (timeout != 0U) {
9000d6d2:	bb21      	cbnz	r1, 9000d71e <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
9000d6d4:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
9000d6d6:	9101      	str	r1, [sp, #4]
      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
9000d6d8:	f001 fc16 	bl	9000ef08 <xQueueReceiveFromISR>
9000d6dc:	2801      	cmp	r0, #1
9000d6de:	d11a      	bne.n	9000d716 <osSemaphoreAcquire+0x52>
        stat = osErrorResource;
      } else {
        portYIELD_FROM_ISR (yield);
9000d6e0:	9b01      	ldr	r3, [sp, #4]
9000d6e2:	b913      	cbnz	r3, 9000d6ea <osSemaphoreAcquire+0x26>
  stat = osOK;
9000d6e4:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
9000d6e6:	b002      	add	sp, #8
9000d6e8:	bd10      	pop	{r4, pc}
        portYIELD_FROM_ISR (yield);
9000d6ea:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
9000d6ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
9000d6f2:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
9000d6f6:	f3bf 8f4f 	dsb	sy
9000d6fa:	f3bf 8f6f 	isb	sy
  stat = osOK;
9000d6fe:	4620      	mov	r0, r4
}
9000d700:	b002      	add	sp, #8
9000d702:	bd10      	pop	{r4, pc}
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
9000d704:	f001 fa58 	bl	9000ebb8 <xQueueSemaphoreTake>
9000d708:	2801      	cmp	r0, #1
9000d70a:	d0eb      	beq.n	9000d6e4 <osSemaphoreAcquire+0x20>
      if (timeout != 0U) {
9000d70c:	b11c      	cbz	r4, 9000d716 <osSemaphoreAcquire+0x52>
        stat = osErrorTimeout;
9000d70e:	f06f 0001 	mvn.w	r0, #1
}
9000d712:	b002      	add	sp, #8
9000d714:	bd10      	pop	{r4, pc}
        stat = osErrorResource;
9000d716:	f06f 0002 	mvn.w	r0, #2
}
9000d71a:	b002      	add	sp, #8
9000d71c:	bd10      	pop	{r4, pc}
    stat = osErrorParameter;
9000d71e:	f06f 0003 	mvn.w	r0, #3
9000d722:	e7e0      	b.n	9000d6e6 <osSemaphoreAcquire+0x22>
9000d724:	f06f 0003 	mvn.w	r0, #3
}
9000d728:	4770      	bx	lr
9000d72a:	bf00      	nop

9000d72c <osSemaphoreRelease>:
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
9000d72c:	b330      	cbz	r0, 9000d77c <osSemaphoreRelease+0x50>
osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
9000d72e:	b510      	push	{r4, lr}
9000d730:	b082      	sub	sp, #8
9000d732:	f3ef 8305 	mrs	r3, IPSR
    stat = osErrorParameter;
  }
  else if (IS_IRQ()) {
9000d736:	b1ab      	cbz	r3, 9000d764 <osSemaphoreRelease+0x38>
    yield = pdFALSE;
9000d738:	2400      	movs	r4, #0

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
9000d73a:	a901      	add	r1, sp, #4
    yield = pdFALSE;
9000d73c:	9401      	str	r4, [sp, #4]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
9000d73e:	f001 f865 	bl	9000e80c <xQueueGiveFromISR>
9000d742:	2801      	cmp	r0, #1
9000d744:	d117      	bne.n	9000d776 <osSemaphoreRelease+0x4a>
      stat = osErrorResource;
    } else {
      portYIELD_FROM_ISR (yield);
9000d746:	9b01      	ldr	r3, [sp, #4]
9000d748:	b193      	cbz	r3, 9000d770 <osSemaphoreRelease+0x44>
9000d74a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
9000d74e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
9000d752:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
9000d756:	f3bf 8f4f 	dsb	sy
9000d75a:	f3bf 8f6f 	isb	sy
  stat = osOK;
9000d75e:	4620      	mov	r0, r4
      stat = osErrorResource;
    }
  }

  return (stat);
}
9000d760:	b002      	add	sp, #8
9000d762:	bd10      	pop	{r4, pc}
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
9000d764:	461a      	mov	r2, r3
9000d766:	4619      	mov	r1, r3
9000d768:	f000 fdbc 	bl	9000e2e4 <xQueueGenericSend>
9000d76c:	2801      	cmp	r0, #1
9000d76e:	d102      	bne.n	9000d776 <osSemaphoreRelease+0x4a>
  stat = osOK;
9000d770:	2000      	movs	r0, #0
}
9000d772:	b002      	add	sp, #8
9000d774:	bd10      	pop	{r4, pc}
      stat = osErrorResource;
9000d776:	f06f 0002 	mvn.w	r0, #2
9000d77a:	e7fa      	b.n	9000d772 <osSemaphoreRelease+0x46>
    stat = osErrorParameter;
9000d77c:	f06f 0003 	mvn.w	r0, #3
}
9000d780:	4770      	bx	lr
9000d782:	bf00      	nop

9000d784 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
9000d784:	b5f0      	push	{r4, r5, r6, r7, lr}
9000d786:	b083      	sub	sp, #12
9000d788:	f3ef 8705 	mrs	r7, IPSR
  const char *name;
  #endif

  hQueue = NULL;

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
9000d78c:	b987      	cbnz	r7, 9000d7b0 <osMessageQueueNew+0x2c>
9000d78e:	4605      	mov	r5, r0
9000d790:	b170      	cbz	r0, 9000d7b0 <osMessageQueueNew+0x2c>
9000d792:	b169      	cbz	r1, 9000d7b0 <osMessageQueueNew+0x2c>
    mem = -1;

    if (attr != NULL) {
9000d794:	4614      	mov	r4, r2
9000d796:	b17a      	cbz	r2, 9000d7b8 <osMessageQueueNew+0x34>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
9000d798:	6893      	ldr	r3, [r2, #8]
9000d79a:	b1cb      	cbz	r3, 9000d7d0 <osMessageQueueNew+0x4c>
9000d79c:	68d2      	ldr	r2, [r2, #12]
9000d79e:	2a4f      	cmp	r2, #79	; 0x4f
9000d7a0:	d906      	bls.n	9000d7b0 <osMessageQueueNew+0x2c>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
9000d7a2:	6922      	ldr	r2, [r4, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
9000d7a4:	b122      	cbz	r2, 9000d7b0 <osMessageQueueNew+0x2c>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
9000d7a6:	fb01 f505 	mul.w	r5, r1, r5
9000d7aa:	6966      	ldr	r6, [r4, #20]
9000d7ac:	42ae      	cmp	r6, r5
9000d7ae:	d21f      	bcs.n	9000d7f0 <osMessageQueueNew+0x6c>
  hQueue = NULL;
9000d7b0:	2500      	movs	r5, #0
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
}
9000d7b2:	4628      	mov	r0, r5
9000d7b4:	b003      	add	sp, #12
9000d7b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
          hQueue = xQueueCreate (msg_count, msg_size);
9000d7b8:	f000 fcaa 	bl	9000e110 <xQueueGenericCreate>
    if (hQueue != NULL) {
9000d7bc:	4605      	mov	r5, r0
9000d7be:	2800      	cmp	r0, #0
9000d7c0:	d0f6      	beq.n	9000d7b0 <osMessageQueueNew+0x2c>
      vQueueAddToRegistry (hQueue, name);
9000d7c2:	4628      	mov	r0, r5
9000d7c4:	4621      	mov	r1, r4
9000d7c6:	f001 fc45 	bl	9000f054 <vQueueAddToRegistry>
}
9000d7ca:	4628      	mov	r0, r5
9000d7cc:	b003      	add	sp, #12
9000d7ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
9000d7d0:	68d3      	ldr	r3, [r2, #12]
9000d7d2:	2b00      	cmp	r3, #0
9000d7d4:	d1ec      	bne.n	9000d7b0 <osMessageQueueNew+0x2c>
9000d7d6:	6913      	ldr	r3, [r2, #16]
9000d7d8:	2b00      	cmp	r3, #0
9000d7da:	d1e9      	bne.n	9000d7b0 <osMessageQueueNew+0x2c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
9000d7dc:	6952      	ldr	r2, [r2, #20]
9000d7de:	2a00      	cmp	r2, #0
9000d7e0:	d1e6      	bne.n	9000d7b0 <osMessageQueueNew+0x2c>
          hQueue = xQueueCreate (msg_count, msg_size);
9000d7e2:	f000 fc95 	bl	9000e110 <xQueueGenericCreate>
    if (hQueue != NULL) {
9000d7e6:	4605      	mov	r5, r0
9000d7e8:	2800      	cmp	r0, #0
9000d7ea:	d0e1      	beq.n	9000d7b0 <osMessageQueueNew+0x2c>
        name = attr->name;
9000d7ec:	6824      	ldr	r4, [r4, #0]
9000d7ee:	e7e8      	b.n	9000d7c2 <osMessageQueueNew+0x3e>
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
9000d7f0:	9700      	str	r7, [sp, #0]
9000d7f2:	f000 fc21 	bl	9000e038 <xQueueGenericCreateStatic>
    if (hQueue != NULL) {
9000d7f6:	4605      	mov	r5, r0
9000d7f8:	2800      	cmp	r0, #0
9000d7fa:	d1f7      	bne.n	9000d7ec <osMessageQueueNew+0x68>
9000d7fc:	e7d8      	b.n	9000d7b0 <osMessageQueueNew+0x2c>
9000d7fe:	bf00      	nop

9000d800 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
9000d800:	b530      	push	{r4, r5, lr}
9000d802:	461c      	mov	r4, r3
9000d804:	b083      	sub	sp, #12
9000d806:	f3ef 8305 	mrs	r3, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
9000d80a:	b30b      	cbz	r3, 9000d850 <osMessageQueuePut+0x50>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
9000d80c:	3c00      	subs	r4, #0
9000d80e:	bf18      	it	ne
9000d810:	2401      	movne	r4, #1
9000d812:	2900      	cmp	r1, #0
9000d814:	bf08      	it	eq
9000d816:	f044 0401 	orreq.w	r4, r4, #1
9000d81a:	bb7c      	cbnz	r4, 9000d87c <osMessageQueuePut+0x7c>
9000d81c:	fab0 f480 	clz	r4, r0
9000d820:	0964      	lsrs	r4, r4, #5
9000d822:	b358      	cbz	r0, 9000d87c <osMessageQueuePut+0x7c>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
9000d824:	4623      	mov	r3, r4
9000d826:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
9000d828:	9401      	str	r4, [sp, #4]
      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
9000d82a:	f000 ff85 	bl	9000e738 <xQueueGenericSendFromISR>
9000d82e:	2801      	cmp	r0, #1
9000d830:	d120      	bne.n	9000d874 <osMessageQueuePut+0x74>
        stat = osErrorResource;
      } else {
        portYIELD_FROM_ISR (yield);
9000d832:	9b01      	ldr	r3, [sp, #4]
9000d834:	b1db      	cbz	r3, 9000d86e <osMessageQueuePut+0x6e>
9000d836:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
9000d83a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
9000d83e:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
9000d842:	f3bf 8f4f 	dsb	sy
9000d846:	f3bf 8f6f 	isb	sy
  stat = osOK;
9000d84a:	4620      	mov	r0, r4
      }
    }
  }

  return (stat);
}
9000d84c:	b003      	add	sp, #12
9000d84e:	bd30      	pop	{r4, r5, pc}
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
9000d850:	b1a0      	cbz	r0, 9000d87c <osMessageQueuePut+0x7c>
9000d852:	fab1 f381 	clz	r3, r1
9000d856:	095b      	lsrs	r3, r3, #5
9000d858:	b181      	cbz	r1, 9000d87c <osMessageQueuePut+0x7c>
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
9000d85a:	4622      	mov	r2, r4
9000d85c:	f000 fd42 	bl	9000e2e4 <xQueueGenericSend>
9000d860:	2801      	cmp	r0, #1
9000d862:	d004      	beq.n	9000d86e <osMessageQueuePut+0x6e>
        if (timeout != 0U) {
9000d864:	b134      	cbz	r4, 9000d874 <osMessageQueuePut+0x74>
          stat = osErrorTimeout;
9000d866:	f06f 0001 	mvn.w	r0, #1
}
9000d86a:	b003      	add	sp, #12
9000d86c:	bd30      	pop	{r4, r5, pc}
  stat = osOK;
9000d86e:	2000      	movs	r0, #0
}
9000d870:	b003      	add	sp, #12
9000d872:	bd30      	pop	{r4, r5, pc}
          stat = osErrorResource;
9000d874:	f06f 0002 	mvn.w	r0, #2
}
9000d878:	b003      	add	sp, #12
9000d87a:	bd30      	pop	{r4, r5, pc}
      stat = osErrorParameter;
9000d87c:	f06f 0003 	mvn.w	r0, #3
9000d880:	e7e4      	b.n	9000d84c <osMessageQueuePut+0x4c>
9000d882:	bf00      	nop

9000d884 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
9000d884:	b530      	push	{r4, r5, lr}
9000d886:	461c      	mov	r4, r3
9000d888:	b083      	sub	sp, #12
9000d88a:	f3ef 8305 	mrs	r3, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
9000d88e:	b303      	cbz	r3, 9000d8d2 <osMessageQueueGet+0x4e>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
9000d890:	3c00      	subs	r4, #0
9000d892:	bf18      	it	ne
9000d894:	2401      	movne	r4, #1
9000d896:	2900      	cmp	r1, #0
9000d898:	bf08      	it	eq
9000d89a:	f044 0401 	orreq.w	r4, r4, #1
9000d89e:	bb5c      	cbnz	r4, 9000d8f8 <osMessageQueueGet+0x74>
9000d8a0:	fab0 f480 	clz	r4, r0
9000d8a4:	0964      	lsrs	r4, r4, #5
9000d8a6:	b338      	cbz	r0, 9000d8f8 <osMessageQueueGet+0x74>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
9000d8a8:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
9000d8aa:	9401      	str	r4, [sp, #4]
      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
9000d8ac:	f001 fb2c 	bl	9000ef08 <xQueueReceiveFromISR>
9000d8b0:	2801      	cmp	r0, #1
9000d8b2:	d11d      	bne.n	9000d8f0 <osMessageQueueGet+0x6c>
        stat = osErrorResource;
      } else {
        portYIELD_FROM_ISR (yield);
9000d8b4:	9b01      	ldr	r3, [sp, #4]
9000d8b6:	b1c3      	cbz	r3, 9000d8ea <osMessageQueueGet+0x66>
9000d8b8:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
9000d8bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
9000d8c0:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
9000d8c4:	f3bf 8f4f 	dsb	sy
9000d8c8:	f3bf 8f6f 	isb	sy
  stat = osOK;
9000d8cc:	4620      	mov	r0, r4
      }
    }
  }

  return (stat);
}
9000d8ce:	b003      	add	sp, #12
9000d8d0:	bd30      	pop	{r4, r5, pc}
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
9000d8d2:	b188      	cbz	r0, 9000d8f8 <osMessageQueueGet+0x74>
9000d8d4:	b181      	cbz	r1, 9000d8f8 <osMessageQueueGet+0x74>
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
9000d8d6:	4622      	mov	r2, r4
9000d8d8:	f000 fff0 	bl	9000e8bc <xQueueReceive>
9000d8dc:	2801      	cmp	r0, #1
9000d8de:	d004      	beq.n	9000d8ea <osMessageQueueGet+0x66>
        if (timeout != 0U) {
9000d8e0:	b134      	cbz	r4, 9000d8f0 <osMessageQueueGet+0x6c>
          stat = osErrorTimeout;
9000d8e2:	f06f 0001 	mvn.w	r0, #1
}
9000d8e6:	b003      	add	sp, #12
9000d8e8:	bd30      	pop	{r4, r5, pc}
  stat = osOK;
9000d8ea:	2000      	movs	r0, #0
}
9000d8ec:	b003      	add	sp, #12
9000d8ee:	bd30      	pop	{r4, r5, pc}
          stat = osErrorResource;
9000d8f0:	f06f 0002 	mvn.w	r0, #2
}
9000d8f4:	b003      	add	sp, #12
9000d8f6:	bd30      	pop	{r4, r5, pc}
      stat = osErrorParameter;
9000d8f8:	f06f 0003 	mvn.w	r0, #3
9000d8fc:	e7e7      	b.n	9000d8ce <osMessageQueueGet+0x4a>
9000d8fe:	bf00      	nop

9000d900 <vApplicationGetIdleTaskMemory>:
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
9000d900:	4b04      	ldr	r3, [pc, #16]	; (9000d914 <vApplicationGetIdleTaskMemory+0x14>)
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
9000d902:	b410      	push	{r4}
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
9000d904:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
9000d906:	2380      	movs	r3, #128	; 0x80
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
9000d908:	4c03      	ldr	r4, [pc, #12]	; (9000d918 <vApplicationGetIdleTaskMemory+0x18>)
9000d90a:	600c      	str	r4, [r1, #0]
}
9000d90c:	f85d 4b04 	ldr.w	r4, [sp], #4
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
9000d910:	6013      	str	r3, [r2, #0]
}
9000d912:	4770      	bx	lr
9000d914:	2400c024 	.word	0x2400c024
9000d918:	2400be24 	.word	0x2400be24

9000d91c <vApplicationGetTimerTaskMemory>:
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
9000d91c:	4b05      	ldr	r3, [pc, #20]	; (9000d934 <vApplicationGetTimerTaskMemory+0x18>)
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
9000d91e:	b410      	push	{r4}
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
9000d920:	6003      	str	r3, [r0, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
9000d922:	f44f 7380 	mov.w	r3, #256	; 0x100
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
9000d926:	4c04      	ldr	r4, [pc, #16]	; (9000d938 <vApplicationGetTimerTaskMemory+0x1c>)
9000d928:	600c      	str	r4, [r1, #0]
}
9000d92a:	f85d 4b04 	ldr.w	r4, [sp], #4
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
9000d92e:	6013      	str	r3, [r2, #0]
}
9000d930:	4770      	bx	lr
9000d932:	bf00      	nop
9000d934:	2400c488 	.word	0x2400c488
9000d938:	2400c088 	.word	0x2400c088

9000d93c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
9000d93c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
9000d940:	4605      	mov	r5, r0
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;

	vTaskSuspendAll();
9000d942:	f002 f863 	bl	9000fa0c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
9000d946:	4a54      	ldr	r2, [pc, #336]	; (9000da98 <pvPortMalloc+0x15c>)
9000d948:	6816      	ldr	r6, [r2, #0]
9000d94a:	2e00      	cmp	r6, #0
9000d94c:	d06f      	beq.n	9000da2e <pvPortMalloc+0xf2>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
9000d94e:	4b53      	ldr	r3, [pc, #332]	; (9000da9c <pvPortMalloc+0x160>)
9000d950:	681f      	ldr	r7, [r3, #0]
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
9000d952:	423d      	tst	r5, r7
9000d954:	d12e      	bne.n	9000d9b4 <pvPortMalloc+0x78>
9000d956:	b36d      	cbz	r5, 9000d9b4 <pvPortMalloc+0x78>
			{
				xWantedSize += xHeapStructSize;
9000d958:	f105 0408 	add.w	r4, r5, #8

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
9000d95c:	076d      	lsls	r5, r5, #29
9000d95e:	d002      	beq.n	9000d966 <pvPortMalloc+0x2a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
9000d960:	f024 0407 	bic.w	r4, r4, #7
9000d964:	3408      	adds	r4, #8
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
9000d966:	b32c      	cbz	r4, 9000d9b4 <pvPortMalloc+0x78>
9000d968:	f8df c148 	ldr.w	ip, [pc, #328]	; 9000dab4 <pvPortMalloc+0x178>
9000d96c:	f8dc 5000 	ldr.w	r5, [ip]
9000d970:	42a5      	cmp	r5, r4
9000d972:	d31f      	bcc.n	9000d9b4 <pvPortMalloc+0x78>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
				pxBlock = xStart.pxNextFreeBlock;
9000d974:	484a      	ldr	r0, [pc, #296]	; (9000daa0 <pvPortMalloc+0x164>)
9000d976:	6803      	ldr	r3, [r0, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
9000d978:	e003      	b.n	9000d982 <pvPortMalloc+0x46>
9000d97a:	681a      	ldr	r2, [r3, #0]
9000d97c:	b122      	cbz	r2, 9000d988 <pvPortMalloc+0x4c>
9000d97e:	4618      	mov	r0, r3
9000d980:	4613      	mov	r3, r2
9000d982:	6859      	ldr	r1, [r3, #4]
9000d984:	42a1      	cmp	r1, r4
9000d986:	d3f8      	bcc.n	9000d97a <pvPortMalloc+0x3e>
					pxBlock = pxBlock->pxNextFreeBlock;
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
9000d988:	42b3      	cmp	r3, r6
9000d98a:	d013      	beq.n	9000d9b4 <pvPortMalloc+0x78>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
9000d98c:	4698      	mov	r8, r3
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
9000d98e:	1b0a      	subs	r2, r1, r4
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
9000d990:	f858 eb08 	ldr.w	lr, [r8], #8
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
9000d994:	2a10      	cmp	r2, #16
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
9000d996:	f8c0 e000 	str.w	lr, [r0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
9000d99a:	d929      	bls.n	9000d9f0 <pvPortMalloc+0xb4>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
9000d99c:	1919      	adds	r1, r3, r4
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
9000d99e:	0748      	lsls	r0, r1, #29
9000d9a0:	d00f      	beq.n	9000d9c2 <pvPortMalloc+0x86>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
9000d9a2:	f04f 0350 	mov.w	r3, #80	; 0x50
9000d9a6:	f383 8811 	msr	BASEPRI, r3
9000d9aa:	f3bf 8f6f 	isb	sy
9000d9ae:	f3bf 8f4f 	dsb	sy
9000d9b2:	e7fe      	b.n	9000d9b2 <pvPortMalloc+0x76>
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
9000d9b4:	f04f 0800 	mov.w	r8, #0
9000d9b8:	f002 f830 	bl	9000fa1c <xTaskResumeAll>
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
	return pvReturn;
}
9000d9bc:	4640      	mov	r0, r8
9000d9be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
9000d9c2:	604a      	str	r2, [r1, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
9000d9c4:	4a36      	ldr	r2, [pc, #216]	; (9000daa0 <pvPortMalloc+0x164>)
						pxBlock->xBlockSize = xWantedSize;
9000d9c6:	605c      	str	r4, [r3, #4]
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
9000d9c8:	4614      	mov	r4, r2
9000d9ca:	6812      	ldr	r2, [r2, #0]
9000d9cc:	4291      	cmp	r1, r2
9000d9ce:	d8fb      	bhi.n	9000d9c8 <pvPortMalloc+0x8c>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
9000d9d0:	6860      	ldr	r0, [r4, #4]
9000d9d2:	eb04 0e00 	add.w	lr, r4, r0
9000d9d6:	4571      	cmp	r1, lr
9000d9d8:	d04a      	beq.n	9000da70 <pvPortMalloc+0x134>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
9000d9da:	f8d1 e004 	ldr.w	lr, [r1, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
9000d9de:	eb01 000e 	add.w	r0, r1, lr
9000d9e2:	4282      	cmp	r2, r0
9000d9e4:	d050      	beq.n	9000da88 <pvPortMalloc+0x14c>

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
9000d9e6:	428c      	cmp	r4, r1
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
9000d9e8:	600a      	str	r2, [r1, #0]
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
9000d9ea:	bf18      	it	ne
9000d9ec:	6021      	strne	r1, [r4, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
9000d9ee:	6859      	ldr	r1, [r3, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
9000d9f0:	4a2c      	ldr	r2, [pc, #176]	; (9000daa4 <pvPortMalloc+0x168>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
9000d9f2:	1a6d      	subs	r5, r5, r1
					pxBlock->xBlockSize |= xBlockAllocatedBit;
9000d9f4:	4339      	orrs	r1, r7
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
9000d9f6:	6810      	ldr	r0, [r2, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
9000d9f8:	f8cc 5000 	str.w	r5, [ip]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
9000d9fc:	4285      	cmp	r5, r0
					pxBlock->pxNextFreeBlock = NULL;
9000d9fe:	f04f 0000 	mov.w	r0, #0
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
9000da02:	bf38      	it	cc
9000da04:	6015      	strcc	r5, [r2, #0]
					xNumberOfSuccessfulAllocations++;
9000da06:	4a28      	ldr	r2, [pc, #160]	; (9000daa8 <pvPortMalloc+0x16c>)
					pxBlock->pxNextFreeBlock = NULL;
9000da08:	e9c3 0100 	strd	r0, r1, [r3]
					xNumberOfSuccessfulAllocations++;
9000da0c:	6813      	ldr	r3, [r2, #0]
9000da0e:	3301      	adds	r3, #1
9000da10:	6013      	str	r3, [r2, #0]
	( void ) xTaskResumeAll();
9000da12:	f002 f803 	bl	9000fa1c <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
9000da16:	f018 0f07 	tst.w	r8, #7
9000da1a:	d0cf      	beq.n	9000d9bc <pvPortMalloc+0x80>
9000da1c:	f04f 0350 	mov.w	r3, #80	; 0x50
9000da20:	f383 8811 	msr	BASEPRI, r3
9000da24:	f3bf 8f6f 	isb	sy
9000da28:	f3bf 8f4f 	dsb	sy
9000da2c:	e7fe      	b.n	9000da2c <pvPortMalloc+0xf0>
	uxAddress = ( size_t ) ucHeap;
9000da2e:	4b1f      	ldr	r3, [pc, #124]	; (9000daac <pvPortMalloc+0x170>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
9000da30:	075e      	lsls	r6, r3, #29
9000da32:	d117      	bne.n	9000da64 <pvPortMalloc+0x128>
9000da34:	4e1e      	ldr	r6, [pc, #120]	; (9000dab0 <pvPortMalloc+0x174>)
9000da36:	4619      	mov	r1, r3
	uxAddress -= xHeapStructSize;
9000da38:	3e08      	subs	r6, #8
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
9000da3a:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
9000da3e:	4818      	ldr	r0, [pc, #96]	; (9000daa0 <pvPortMalloc+0x164>)
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
9000da40:	f026 0607 	bic.w	r6, r6, #7
	pxEnd = ( void * ) uxAddress;
9000da44:	6016      	str	r6, [r2, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
9000da46:	1af3      	subs	r3, r6, r3
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
9000da48:	4a16      	ldr	r2, [pc, #88]	; (9000daa4 <pvPortMalloc+0x168>)
9000da4a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
9000da4c:	4a19      	ldr	r2, [pc, #100]	; (9000dab4 <pvPortMalloc+0x178>)
9000da4e:	6013      	str	r3, [r2, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
9000da50:	4a12      	ldr	r2, [pc, #72]	; (9000da9c <pvPortMalloc+0x160>)
9000da52:	6017      	str	r7, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
9000da54:	2200      	movs	r2, #0
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
9000da56:	e9c0 1200 	strd	r1, r2, [r0]
	pxEnd->pxNextFreeBlock = NULL;
9000da5a:	e9c6 2200 	strd	r2, r2, [r6]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
9000da5e:	e9c1 6300 	strd	r6, r3, [r1]
}
9000da62:	e776      	b.n	9000d952 <pvPortMalloc+0x16>
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
9000da64:	3307      	adds	r3, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
9000da66:	4e12      	ldr	r6, [pc, #72]	; (9000dab0 <pvPortMalloc+0x174>)
	pucAlignedHeap = ( uint8_t * ) uxAddress;
9000da68:	f023 0107 	bic.w	r1, r3, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
9000da6c:	460b      	mov	r3, r1
9000da6e:	e7e3      	b.n	9000da38 <pvPortMalloc+0xfc>
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
9000da70:	6849      	ldr	r1, [r1, #4]
9000da72:	eb00 0e01 	add.w	lr, r0, r1
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
9000da76:	eb04 010e 	add.w	r1, r4, lr
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
9000da7a:	f8c4 e004 	str.w	lr, [r4, #4]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
9000da7e:	428a      	cmp	r2, r1
9000da80:	d001      	beq.n	9000da86 <pvPortMalloc+0x14a>
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
9000da82:	6022      	str	r2, [r4, #0]
	if( pxIterator != pxBlockToInsert )
9000da84:	e7b3      	b.n	9000d9ee <pvPortMalloc+0xb2>
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
9000da86:	4621      	mov	r1, r4
		if( pxIterator->pxNextFreeBlock != pxEnd )
9000da88:	42b2      	cmp	r2, r6
9000da8a:	d0ac      	beq.n	9000d9e6 <pvPortMalloc+0xaa>
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
9000da8c:	6850      	ldr	r0, [r2, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
9000da8e:	6812      	ldr	r2, [r2, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
9000da90:	4470      	add	r0, lr
9000da92:	6048      	str	r0, [r1, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
9000da94:	e7a7      	b.n	9000d9e6 <pvPortMalloc+0xaa>
9000da96:	bf00      	nop
9000da98:	2400c4e8 	.word	0x2400c4e8
9000da9c:	24024b8c 	.word	0x24024b8c
9000daa0:	24024ba0 	.word	0x24024ba0
9000daa4:	24024b94 	.word	0x24024b94
9000daa8:	24024b98 	.word	0x24024b98
9000daac:	2400c4ec 	.word	0x2400c4ec
9000dab0:	24024b8c 	.word	0x24024b8c
9000dab4:	24024b90 	.word	0x24024b90

9000dab8 <vPortFree>:
	if( pv != NULL )
9000dab8:	b1d0      	cbz	r0, 9000daf0 <vPortFree+0x38>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
9000daba:	4a2c      	ldr	r2, [pc, #176]	; (9000db6c <vPortFree+0xb4>)
9000dabc:	f850 3c04 	ldr.w	r3, [r0, #-4]
9000dac0:	6812      	ldr	r2, [r2, #0]
9000dac2:	4213      	tst	r3, r2
9000dac4:	d00b      	beq.n	9000dade <vPortFree+0x26>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
9000dac6:	f850 1c08 	ldr.w	r1, [r0, #-8]
9000daca:	b191      	cbz	r1, 9000daf2 <vPortFree+0x3a>
9000dacc:	f04f 0350 	mov.w	r3, #80	; 0x50
9000dad0:	f383 8811 	msr	BASEPRI, r3
9000dad4:	f3bf 8f6f 	isb	sy
9000dad8:	f3bf 8f4f 	dsb	sy
9000dadc:	e7fe      	b.n	9000dadc <vPortFree+0x24>
9000dade:	f04f 0350 	mov.w	r3, #80	; 0x50
9000dae2:	f383 8811 	msr	BASEPRI, r3
9000dae6:	f3bf 8f6f 	isb	sy
9000daea:	f3bf 8f4f 	dsb	sy
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
9000daee:	e7fe      	b.n	9000daee <vPortFree+0x36>
9000daf0:	4770      	bx	lr
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
9000daf2:	ea23 0302 	bic.w	r3, r3, r2
{
9000daf6:	b530      	push	{r4, r5, lr}
9000daf8:	b083      	sub	sp, #12
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
9000dafa:	f840 3c04 	str.w	r3, [r0, #-4]
		puc -= xHeapStructSize;
9000dafe:	f1a0 0408 	sub.w	r4, r0, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
9000db02:	4d1b      	ldr	r5, [pc, #108]	; (9000db70 <vPortFree+0xb8>)
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
9000db04:	9001      	str	r0, [sp, #4]
				vTaskSuspendAll();
9000db06:	f001 ff81 	bl	9000fa0c <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
9000db0a:	9801      	ldr	r0, [sp, #4]
9000db0c:	682a      	ldr	r2, [r5, #0]
9000db0e:	f850 1c04 	ldr.w	r1, [r0, #-4]
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
9000db12:	4b18      	ldr	r3, [pc, #96]	; (9000db74 <vPortFree+0xbc>)
					xFreeBytesRemaining += pxLink->xBlockSize;
9000db14:	440a      	add	r2, r1
9000db16:	602a      	str	r2, [r5, #0]
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
9000db18:	461a      	mov	r2, r3
9000db1a:	681b      	ldr	r3, [r3, #0]
9000db1c:	429c      	cmp	r4, r3
9000db1e:	d8fb      	bhi.n	9000db18 <vPortFree+0x60>
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
9000db20:	6850      	ldr	r0, [r2, #4]
9000db22:	eb02 0c00 	add.w	ip, r2, r0
9000db26:	4564      	cmp	r4, ip
9000db28:	d00f      	beq.n	9000db4a <vPortFree+0x92>
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
9000db2a:	1860      	adds	r0, r4, r1
9000db2c:	4283      	cmp	r3, r0
9000db2e:	d014      	beq.n	9000db5a <vPortFree+0xa2>
	if( pxIterator != pxBlockToInsert )
9000db30:	42a2      	cmp	r2, r4
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
9000db32:	6023      	str	r3, [r4, #0]
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
9000db34:	bf18      	it	ne
9000db36:	6014      	strne	r4, [r2, #0]
					xNumberOfSuccessfulFrees++;
9000db38:	4a0f      	ldr	r2, [pc, #60]	; (9000db78 <vPortFree+0xc0>)
9000db3a:	6813      	ldr	r3, [r2, #0]
9000db3c:	3301      	adds	r3, #1
9000db3e:	6013      	str	r3, [r2, #0]
}
9000db40:	b003      	add	sp, #12
9000db42:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
				( void ) xTaskResumeAll();
9000db46:	f001 bf69 	b.w	9000fa1c <xTaskResumeAll>
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
9000db4a:	4401      	add	r1, r0
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
9000db4c:	1850      	adds	r0, r2, r1
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
9000db4e:	6051      	str	r1, [r2, #4]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
9000db50:	4283      	cmp	r3, r0
9000db52:	d001      	beq.n	9000db58 <vPortFree+0xa0>
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
9000db54:	6013      	str	r3, [r2, #0]
	if( pxIterator != pxBlockToInsert )
9000db56:	e7ef      	b.n	9000db38 <vPortFree+0x80>
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
9000db58:	4614      	mov	r4, r2
		if( pxIterator->pxNextFreeBlock != pxEnd )
9000db5a:	4808      	ldr	r0, [pc, #32]	; (9000db7c <vPortFree+0xc4>)
9000db5c:	6800      	ldr	r0, [r0, #0]
9000db5e:	4283      	cmp	r3, r0
9000db60:	d0e6      	beq.n	9000db30 <vPortFree+0x78>
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
9000db62:	e9d3 3000 	ldrd	r3, r0, [r3]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
9000db66:	4401      	add	r1, r0
9000db68:	6061      	str	r1, [r4, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
9000db6a:	e7e1      	b.n	9000db30 <vPortFree+0x78>
9000db6c:	24024b8c 	.word	0x24024b8c
9000db70:	24024b90 	.word	0x24024b90
9000db74:	24024ba0 	.word	0x24024ba0
9000db78:	24024b9c 	.word	0x24024b9c
9000db7c:	2400c4e8 	.word	0x2400c4e8

9000db80 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
9000db80:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
9000db84:	f04f 31ff 	mov.w	r1, #4294967295
	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
9000db88:	2200      	movs	r2, #0
	pxList->xListEnd.xItemValue = portMAX_DELAY;
9000db8a:	6081      	str	r1, [r0, #8]
	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
9000db8c:	6002      	str	r2, [r0, #0]
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
9000db8e:	6043      	str	r3, [r0, #4]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
9000db90:	e9c0 3303 	strd	r3, r3, [r0, #12]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
9000db94:	4770      	bx	lr
9000db96:	bf00      	nop

9000db98 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
9000db98:	2300      	movs	r3, #0
9000db9a:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
9000db9c:	4770      	bx	lr
9000db9e:	bf00      	nop

9000dba0 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
9000dba0:	6843      	ldr	r3, [r0, #4]
	pxIndex->pxPrevious = pxNewListItem;

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
9000dba2:	6802      	ldr	r2, [r0, #0]
{
9000dba4:	b410      	push	{r4}
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
9000dba6:	689c      	ldr	r4, [r3, #8]
	( pxList->uxNumberOfItems )++;
9000dba8:	3201      	adds	r2, #1
	pxNewListItem->pxNext = pxIndex;
9000dbaa:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
9000dbac:	608c      	str	r4, [r1, #8]
	pxIndex->pxPrevious->pxNext = pxNewListItem;
9000dbae:	689c      	ldr	r4, [r3, #8]
9000dbb0:	6061      	str	r1, [r4, #4]
	pxIndex->pxPrevious = pxNewListItem;
9000dbb2:	6099      	str	r1, [r3, #8]
}
9000dbb4:	f85d 4b04 	ldr.w	r4, [sp], #4
	pxNewListItem->pxContainer = pxList;
9000dbb8:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
9000dbba:	6002      	str	r2, [r0, #0]
}
9000dbbc:	4770      	bx	lr
9000dbbe:	bf00      	nop

9000dbc0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
9000dbc0:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
9000dbc2:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
9000dbc4:	1c6b      	adds	r3, r5, #1
9000dbc6:	d010      	beq.n	9000dbea <vListInsert+0x2a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
9000dbc8:	f100 0308 	add.w	r3, r0, #8
9000dbcc:	461c      	mov	r4, r3
9000dbce:	685b      	ldr	r3, [r3, #4]
9000dbd0:	681a      	ldr	r2, [r3, #0]
9000dbd2:	42aa      	cmp	r2, r5
9000dbd4:	d9fa      	bls.n	9000dbcc <vListInsert+0xc>

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
9000dbd6:	6802      	ldr	r2, [r0, #0]
	pxNewListItem->pxNext = pxIterator->pxNext;
9000dbd8:	604b      	str	r3, [r1, #4]
	( pxList->uxNumberOfItems )++;
9000dbda:	3201      	adds	r2, #1
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
9000dbdc:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
9000dbde:	608c      	str	r4, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
9000dbe0:	6061      	str	r1, [r4, #4]
	pxNewListItem->pxContainer = pxList;
9000dbe2:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
9000dbe4:	6002      	str	r2, [r0, #0]
}
9000dbe6:	bc30      	pop	{r4, r5}
9000dbe8:	4770      	bx	lr
		pxIterator = pxList->xListEnd.pxPrevious;
9000dbea:	6904      	ldr	r4, [r0, #16]
	pxNewListItem->pxNext = pxIterator->pxNext;
9000dbec:	6863      	ldr	r3, [r4, #4]
9000dbee:	e7f2      	b.n	9000dbd6 <vListInsert+0x16>

9000dbf0 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
9000dbf0:	6903      	ldr	r3, [r0, #16]
{
9000dbf2:	b410      	push	{r4}

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
9000dbf4:	685c      	ldr	r4, [r3, #4]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
9000dbf6:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
	if( pxList->pxIndex == pxItemToRemove )
9000dbfa:	4284      	cmp	r4, r0

	pxItemToRemove->pxContainer = NULL;
	( pxList->uxNumberOfItems )--;

	return pxList->uxNumberOfItems;
}
9000dbfc:	f85d 4b04 	ldr.w	r4, [sp], #4
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
9000dc00:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
9000dc02:	6051      	str	r1, [r2, #4]
	pxItemToRemove->pxContainer = NULL;
9000dc04:	f04f 0100 	mov.w	r1, #0
		pxList->pxIndex = pxItemToRemove->pxPrevious;
9000dc08:	bf08      	it	eq
9000dc0a:	605a      	streq	r2, [r3, #4]
	( pxList->uxNumberOfItems )--;
9000dc0c:	681a      	ldr	r2, [r3, #0]
	pxItemToRemove->pxContainer = NULL;
9000dc0e:	6101      	str	r1, [r0, #16]
	( pxList->uxNumberOfItems )--;
9000dc10:	3a01      	subs	r2, #1
9000dc12:	601a      	str	r2, [r3, #0]
	return pxList->uxNumberOfItems;
9000dc14:	6818      	ldr	r0, [r3, #0]
}
9000dc16:	4770      	bx	lr

9000dc18 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
9000dc18:	4808      	ldr	r0, [pc, #32]	; (9000dc3c <prvPortStartFirstTask+0x24>)
9000dc1a:	6800      	ldr	r0, [r0, #0]
9000dc1c:	6800      	ldr	r0, [r0, #0]
9000dc1e:	f380 8808 	msr	MSP, r0
9000dc22:	f04f 0000 	mov.w	r0, #0
9000dc26:	f380 8814 	msr	CONTROL, r0
9000dc2a:	b662      	cpsie	i
9000dc2c:	b661      	cpsie	f
9000dc2e:	f3bf 8f4f 	dsb	sy
9000dc32:	f3bf 8f6f 	isb	sy
9000dc36:	df00      	svc	0
9000dc38:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
9000dc3a:	0000      	.short	0x0000
9000dc3c:	e000ed08 	.word	0xe000ed08

9000dc40 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
9000dc40:	f8df 000c 	ldr.w	r0, [pc, #12]	; 9000dc50 <vPortEnableVFP+0x10>
9000dc44:	6801      	ldr	r1, [r0, #0]
9000dc46:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
9000dc4a:	6001      	str	r1, [r0, #0]
9000dc4c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
9000dc4e:	0000      	.short	0x0000
9000dc50:	e000ed88 	.word	0xe000ed88

9000dc54 <prvTaskExitError>:
	configASSERT( uxCriticalNesting == ~0UL );
9000dc54:	4b0e      	ldr	r3, [pc, #56]	; (9000dc90 <prvTaskExitError+0x3c>)
{
9000dc56:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
9000dc58:	2200      	movs	r2, #0
	configASSERT( uxCriticalNesting == ~0UL );
9000dc5a:	681b      	ldr	r3, [r3, #0]
volatile uint32_t ulDummy = 0;
9000dc5c:	9201      	str	r2, [sp, #4]
	configASSERT( uxCriticalNesting == ~0UL );
9000dc5e:	3301      	adds	r3, #1
9000dc60:	d008      	beq.n	9000dc74 <prvTaskExitError+0x20>
9000dc62:	f04f 0350 	mov.w	r3, #80	; 0x50
9000dc66:	f383 8811 	msr	BASEPRI, r3
9000dc6a:	f3bf 8f6f 	isb	sy
9000dc6e:	f3bf 8f4f 	dsb	sy
9000dc72:	e7fe      	b.n	9000dc72 <prvTaskExitError+0x1e>
9000dc74:	f04f 0350 	mov.w	r3, #80	; 0x50
9000dc78:	f383 8811 	msr	BASEPRI, r3
9000dc7c:	f3bf 8f6f 	isb	sy
9000dc80:	f3bf 8f4f 	dsb	sy
	while( ulDummy == 0 )
9000dc84:	9b01      	ldr	r3, [sp, #4]
9000dc86:	2b00      	cmp	r3, #0
9000dc88:	d0fc      	beq.n	9000dc84 <prvTaskExitError+0x30>
}
9000dc8a:	b002      	add	sp, #8
9000dc8c:	4770      	bx	lr
9000dc8e:	bf00      	nop
9000dc90:	24000064 	.word	0x24000064

9000dc94 <pxPortInitialiseStack>:
{
9000dc94:	4603      	mov	r3, r0
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
9000dc96:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
9000dc9a:	4809      	ldr	r0, [pc, #36]	; (9000dcc0 <pxPortInitialiseStack+0x2c>)
{
9000dc9c:	b410      	push	{r4}
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
9000dc9e:	f04f 7480 	mov.w	r4, #16777216	; 0x1000000
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
9000dca2:	f843 0c0c 	str.w	r0, [r3, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
9000dca6:	f843 2c20 	str.w	r2, [r3, #-32]
}
9000dcaa:	f1a3 0044 	sub.w	r0, r3, #68	; 0x44
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
9000dcae:	e943 1402 	strd	r1, r4, [r3, #-8]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
9000dcb2:	f06f 0102 	mvn.w	r1, #2
}
9000dcb6:	f85d 4b04 	ldr.w	r4, [sp], #4
	*pxTopOfStack = portINITIAL_EXC_RETURN;
9000dcba:	f843 1c24 	str.w	r1, [r3, #-36]
}
9000dcbe:	4770      	bx	lr
9000dcc0:	9000dc55 	.word	0x9000dc55
	...

9000dcd0 <SVC_Handler>:
	__asm volatile (
9000dcd0:	4b07      	ldr	r3, [pc, #28]	; (9000dcf0 <pxCurrentTCBConst2>)
9000dcd2:	6819      	ldr	r1, [r3, #0]
9000dcd4:	6808      	ldr	r0, [r1, #0]
9000dcd6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9000dcda:	f380 8809 	msr	PSP, r0
9000dcde:	f3bf 8f6f 	isb	sy
9000dce2:	f04f 0000 	mov.w	r0, #0
9000dce6:	f380 8811 	msr	BASEPRI, r0
9000dcea:	4770      	bx	lr
9000dcec:	f3af 8000 	nop.w

9000dcf0 <pxCurrentTCBConst2>:
9000dcf0:	24024bf0 	.word	0x24024bf0

9000dcf4 <vPortEnterCritical>:
9000dcf4:	f04f 0350 	mov.w	r3, #80	; 0x50
9000dcf8:	f383 8811 	msr	BASEPRI, r3
9000dcfc:	f3bf 8f6f 	isb	sy
9000dd00:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
9000dd04:	4a0b      	ldr	r2, [pc, #44]	; (9000dd34 <vPortEnterCritical+0x40>)
9000dd06:	6813      	ldr	r3, [r2, #0]
9000dd08:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
9000dd0a:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
9000dd0c:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
9000dd0e:	d000      	beq.n	9000dd12 <vPortEnterCritical+0x1e>
}
9000dd10:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
9000dd12:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
9000dd16:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	; 0xd04
9000dd1a:	b2db      	uxtb	r3, r3
9000dd1c:	2b00      	cmp	r3, #0
9000dd1e:	d0f7      	beq.n	9000dd10 <vPortEnterCritical+0x1c>
9000dd20:	f04f 0350 	mov.w	r3, #80	; 0x50
9000dd24:	f383 8811 	msr	BASEPRI, r3
9000dd28:	f3bf 8f6f 	isb	sy
9000dd2c:	f3bf 8f4f 	dsb	sy
9000dd30:	e7fe      	b.n	9000dd30 <vPortEnterCritical+0x3c>
9000dd32:	bf00      	nop
9000dd34:	24000064 	.word	0x24000064

9000dd38 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
9000dd38:	4a08      	ldr	r2, [pc, #32]	; (9000dd5c <vPortExitCritical+0x24>)
9000dd3a:	6813      	ldr	r3, [r2, #0]
9000dd3c:	b943      	cbnz	r3, 9000dd50 <vPortExitCritical+0x18>
9000dd3e:	f04f 0350 	mov.w	r3, #80	; 0x50
9000dd42:	f383 8811 	msr	BASEPRI, r3
9000dd46:	f3bf 8f6f 	isb	sy
9000dd4a:	f3bf 8f4f 	dsb	sy
9000dd4e:	e7fe      	b.n	9000dd4e <vPortExitCritical+0x16>
	uxCriticalNesting--;
9000dd50:	3b01      	subs	r3, #1
9000dd52:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
9000dd54:	b90b      	cbnz	r3, 9000dd5a <vPortExitCritical+0x22>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
9000dd56:	f383 8811 	msr	BASEPRI, r3
}
9000dd5a:	4770      	bx	lr
9000dd5c:	24000064 	.word	0x24000064

9000dd60 <PendSV_Handler>:
	__asm volatile
9000dd60:	f3ef 8009 	mrs	r0, PSP
9000dd64:	f3bf 8f6f 	isb	sy
9000dd68:	4b15      	ldr	r3, [pc, #84]	; (9000ddc0 <pxCurrentTCBConst>)
9000dd6a:	681a      	ldr	r2, [r3, #0]
9000dd6c:	f01e 0f10 	tst.w	lr, #16
9000dd70:	bf08      	it	eq
9000dd72:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
9000dd76:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9000dd7a:	6010      	str	r0, [r2, #0]
9000dd7c:	e92d 0009 	stmdb	sp!, {r0, r3}
9000dd80:	f04f 0050 	mov.w	r0, #80	; 0x50
9000dd84:	f380 8811 	msr	BASEPRI, r0
9000dd88:	f3bf 8f4f 	dsb	sy
9000dd8c:	f3bf 8f6f 	isb	sy
9000dd90:	f001 fe80 	bl	9000fa94 <vTaskSwitchContext>
9000dd94:	f04f 0000 	mov.w	r0, #0
9000dd98:	f380 8811 	msr	BASEPRI, r0
9000dd9c:	bc09      	pop	{r0, r3}
9000dd9e:	6819      	ldr	r1, [r3, #0]
9000dda0:	6808      	ldr	r0, [r1, #0]
9000dda2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9000dda6:	f01e 0f10 	tst.w	lr, #16
9000ddaa:	bf08      	it	eq
9000ddac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
9000ddb0:	f380 8809 	msr	PSP, r0
9000ddb4:	f3bf 8f6f 	isb	sy
9000ddb8:	4770      	bx	lr
9000ddba:	bf00      	nop
9000ddbc:	f3af 8000 	nop.w

9000ddc0 <pxCurrentTCBConst>:
9000ddc0:	24024bf0 	.word	0x24024bf0

9000ddc4 <xPortSysTickHandler>:
{
9000ddc4:	b508      	push	{r3, lr}
	__asm volatile
9000ddc6:	f04f 0350 	mov.w	r3, #80	; 0x50
9000ddca:	f383 8811 	msr	BASEPRI, r3
9000ddce:	f3bf 8f6f 	isb	sy
9000ddd2:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
9000ddd6:	f001 fe37 	bl	9000fa48 <xTaskIncrementTick>
9000ddda:	b128      	cbz	r0, 9000dde8 <xPortSysTickHandler+0x24>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
9000dddc:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
9000dde0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
9000dde4:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
	__asm volatile
9000dde8:	2300      	movs	r3, #0
9000ddea:	f383 8811 	msr	BASEPRI, r3
}
9000ddee:	bd08      	pop	{r3, pc}

9000ddf0 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
9000ddf0:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
9000ddf4:	2300      	movs	r3, #0
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
9000ddf6:	4806      	ldr	r0, [pc, #24]	; (9000de10 <vPortSetupTimerInterrupt+0x20>)
	portNVIC_SYSTICK_CTRL_REG = 0UL;
9000ddf8:	6113      	str	r3, [r2, #16]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
9000ddfa:	4906      	ldr	r1, [pc, #24]	; (9000de14 <vPortSetupTimerInterrupt+0x24>)
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
9000ddfc:	6193      	str	r3, [r2, #24]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
9000ddfe:	6803      	ldr	r3, [r0, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
9000de00:	2007      	movs	r0, #7
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
9000de02:	fba1 1303 	umull	r1, r3, r1, r3
9000de06:	099b      	lsrs	r3, r3, #6
9000de08:	3b01      	subs	r3, #1
9000de0a:	6153      	str	r3, [r2, #20]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
9000de0c:	6110      	str	r0, [r2, #16]
}
9000de0e:	4770      	bx	lr
9000de10:	24000054 	.word	0x24000054
9000de14:	10624dd3 	.word	0x10624dd3

9000de18 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
9000de18:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
9000de1c:	4a48      	ldr	r2, [pc, #288]	; (9000df40 <xPortStartScheduler+0x128>)
9000de1e:	f8d3 1d00 	ldr.w	r1, [r3, #3328]	; 0xd00
9000de22:	4291      	cmp	r1, r2
9000de24:	d041      	beq.n	9000deaa <xPortStartScheduler+0x92>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
9000de26:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
9000de2a:	4b46      	ldr	r3, [pc, #280]	; (9000df44 <xPortStartScheduler+0x12c>)
9000de2c:	429a      	cmp	r2, r3
9000de2e:	d033      	beq.n	9000de98 <xPortStartScheduler+0x80>
		ulOriginalPriority = *pucFirstUserPriorityRegister;
9000de30:	4b45      	ldr	r3, [pc, #276]	; (9000df48 <xPortStartScheduler+0x130>)
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
9000de32:	20ff      	movs	r0, #255	; 0xff
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
9000de34:	4945      	ldr	r1, [pc, #276]	; (9000df4c <xPortStartScheduler+0x134>)
{
9000de36:	b570      	push	{r4, r5, r6, lr}
		ulOriginalPriority = *pucFirstUserPriorityRegister;
9000de38:	781a      	ldrb	r2, [r3, #0]
{
9000de3a:	b084      	sub	sp, #16
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
9000de3c:	4c44      	ldr	r4, [pc, #272]	; (9000df50 <xPortStartScheduler+0x138>)
		ulOriginalPriority = *pucFirstUserPriorityRegister;
9000de3e:	b2d2      	uxtb	r2, r2
9000de40:	9202      	str	r2, [sp, #8]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
9000de42:	2207      	movs	r2, #7
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
9000de44:	7018      	strb	r0, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
9000de46:	781b      	ldrb	r3, [r3, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
9000de48:	6022      	str	r2, [r4, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
9000de4a:	b2db      	uxtb	r3, r3
9000de4c:	f88d 3007 	strb.w	r3, [sp, #7]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
9000de50:	f89d 3007 	ldrb.w	r3, [sp, #7]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
9000de54:	f89d 2007 	ldrb.w	r2, [sp, #7]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
9000de58:	f003 0350 	and.w	r3, r3, #80	; 0x50
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
9000de5c:	0610      	lsls	r0, r2, #24
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
9000de5e:	700b      	strb	r3, [r1, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
9000de60:	d511      	bpl.n	9000de86 <xPortStartScheduler+0x6e>
9000de62:	2206      	movs	r2, #6
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
9000de64:	f89d 3007 	ldrb.w	r3, [sp, #7]
9000de68:	4610      	mov	r0, r2
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
9000de6a:	3a01      	subs	r2, #1
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
9000de6c:	005b      	lsls	r3, r3, #1
9000de6e:	b2db      	uxtb	r3, r3
9000de70:	f88d 3007 	strb.w	r3, [sp, #7]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
9000de74:	f89d 1007 	ldrb.w	r1, [sp, #7]
9000de78:	0609      	lsls	r1, r1, #24
9000de7a:	d4f3      	bmi.n	9000de64 <xPortStartScheduler+0x4c>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
9000de7c:	2803      	cmp	r0, #3
9000de7e:	6020      	str	r0, [r4, #0]
9000de80:	f88d 3007 	strb.w	r3, [sp, #7]
9000de84:	d01a      	beq.n	9000debc <xPortStartScheduler+0xa4>
	__asm volatile
9000de86:	f04f 0350 	mov.w	r3, #80	; 0x50
9000de8a:	f383 8811 	msr	BASEPRI, r3
9000de8e:	f3bf 8f6f 	isb	sy
9000de92:	f3bf 8f4f 	dsb	sy
9000de96:	e7fe      	b.n	9000de96 <xPortStartScheduler+0x7e>
9000de98:	f04f 0350 	mov.w	r3, #80	; 0x50
9000de9c:	f383 8811 	msr	BASEPRI, r3
9000dea0:	f3bf 8f6f 	isb	sy
9000dea4:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
9000dea8:	e7fe      	b.n	9000dea8 <xPortStartScheduler+0x90>
9000deaa:	f04f 0350 	mov.w	r3, #80	; 0x50
9000deae:	f383 8811 	msr	BASEPRI, r3
9000deb2:	f3bf 8f6f 	isb	sy
9000deb6:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
9000deba:	e7fe      	b.n	9000deba <xPortStartScheduler+0xa2>
		*pucFirstUserPriorityRegister = ulOriginalPriority;
9000debc:	9b02      	ldr	r3, [sp, #8]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
9000debe:	f04f 25e0 	mov.w	r5, #3758153728	; 0xe000e000
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
9000dec2:	f44f 7140 	mov.w	r1, #768	; 0x300
		*pucFirstUserPriorityRegister = ulOriginalPriority;
9000dec6:	4a20      	ldr	r2, [pc, #128]	; (9000df48 <xPortStartScheduler+0x130>)
9000dec8:	b2db      	uxtb	r3, r3
	uxCriticalNesting = 0;
9000deca:	4e22      	ldr	r6, [pc, #136]	; (9000df54 <xPortStartScheduler+0x13c>)
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
9000decc:	6021      	str	r1, [r4, #0]
	uxCriticalNesting = 0;
9000dece:	2400      	movs	r4, #0
		*pucFirstUserPriorityRegister = ulOriginalPriority;
9000ded0:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
9000ded2:	f8d5 3d20 	ldr.w	r3, [r5, #3360]	; 0xd20
9000ded6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
9000deda:	f8c5 3d20 	str.w	r3, [r5, #3360]	; 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
9000dede:	f8d5 3d20 	ldr.w	r3, [r5, #3360]	; 0xd20
9000dee2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
9000dee6:	f8c5 3d20 	str.w	r3, [r5, #3360]	; 0xd20
	vPortSetupTimerInterrupt();
9000deea:	f7ff ff81 	bl	9000ddf0 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
9000deee:	6034      	str	r4, [r6, #0]
	vPortEnableVFP();
9000def0:	f7ff fea6 	bl	9000dc40 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
9000def4:	f8d5 3f34 	ldr.w	r3, [r5, #3892]	; 0xf34
9000def8:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
9000defc:	f8c5 3f34 	str.w	r3, [r5, #3892]	; 0xf34
	prvPortStartFirstTask();
9000df00:	f7ff fe8a 	bl	9000dc18 <prvPortStartFirstTask>
	vTaskSwitchContext();
9000df04:	f001 fdc6 	bl	9000fa94 <vTaskSwitchContext>
	configASSERT( uxCriticalNesting == ~0UL );
9000df08:	6833      	ldr	r3, [r6, #0]
volatile uint32_t ulDummy = 0;
9000df0a:	9403      	str	r4, [sp, #12]
	configASSERT( uxCriticalNesting == ~0UL );
9000df0c:	3301      	adds	r3, #1
9000df0e:	d008      	beq.n	9000df22 <xPortStartScheduler+0x10a>
9000df10:	f04f 0350 	mov.w	r3, #80	; 0x50
9000df14:	f383 8811 	msr	BASEPRI, r3
9000df18:	f3bf 8f6f 	isb	sy
9000df1c:	f3bf 8f4f 	dsb	sy
9000df20:	e7fe      	b.n	9000df20 <xPortStartScheduler+0x108>
9000df22:	f04f 0350 	mov.w	r3, #80	; 0x50
9000df26:	f383 8811 	msr	BASEPRI, r3
9000df2a:	f3bf 8f6f 	isb	sy
9000df2e:	f3bf 8f4f 	dsb	sy
	while( ulDummy == 0 )
9000df32:	9b03      	ldr	r3, [sp, #12]
9000df34:	2b00      	cmp	r3, #0
9000df36:	d0fc      	beq.n	9000df32 <xPortStartScheduler+0x11a>
}
9000df38:	2000      	movs	r0, #0
9000df3a:	b004      	add	sp, #16
9000df3c:	bd70      	pop	{r4, r5, r6, pc}
9000df3e:	bf00      	nop
9000df40:	410fc271 	.word	0x410fc271
9000df44:	410fc270 	.word	0x410fc270
9000df48:	e000e400 	.word	0xe000e400
9000df4c:	24024ba8 	.word	0x24024ba8
9000df50:	24024bac 	.word	0x24024bac
9000df54:	24000064 	.word	0x24000064

9000df58 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
9000df58:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
9000df5c:	2b0f      	cmp	r3, #15
9000df5e:	d90e      	bls.n	9000df7e <vPortValidateInterruptPriority+0x26>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
9000df60:	4911      	ldr	r1, [pc, #68]	; (9000dfa8 <vPortValidateInterruptPriority+0x50>)
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
9000df62:	4a12      	ldr	r2, [pc, #72]	; (9000dfac <vPortValidateInterruptPriority+0x54>)
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
9000df64:	5c5b      	ldrb	r3, [r3, r1]
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
9000df66:	7812      	ldrb	r2, [r2, #0]
9000df68:	429a      	cmp	r2, r3
9000df6a:	d908      	bls.n	9000df7e <vPortValidateInterruptPriority+0x26>
9000df6c:	f04f 0350 	mov.w	r3, #80	; 0x50
9000df70:	f383 8811 	msr	BASEPRI, r3
9000df74:	f3bf 8f6f 	isb	sy
9000df78:	f3bf 8f4f 	dsb	sy
9000df7c:	e7fe      	b.n	9000df7c <vPortValidateInterruptPriority+0x24>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
9000df7e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
9000df82:	4a0b      	ldr	r2, [pc, #44]	; (9000dfb0 <vPortValidateInterruptPriority+0x58>)
9000df84:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	; 0xd0c
9000df88:	6812      	ldr	r2, [r2, #0]
9000df8a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
9000df8e:	4293      	cmp	r3, r2
9000df90:	d908      	bls.n	9000dfa4 <vPortValidateInterruptPriority+0x4c>
9000df92:	f04f 0350 	mov.w	r3, #80	; 0x50
9000df96:	f383 8811 	msr	BASEPRI, r3
9000df9a:	f3bf 8f6f 	isb	sy
9000df9e:	f3bf 8f4f 	dsb	sy
9000dfa2:	e7fe      	b.n	9000dfa2 <vPortValidateInterruptPriority+0x4a>
	}
9000dfa4:	4770      	bx	lr
9000dfa6:	bf00      	nop
9000dfa8:	e000e3f0 	.word	0xe000e3f0
9000dfac:	24024ba8 	.word	0x24024ba8
9000dfb0:	24024bac 	.word	0x24024bac

9000dfb4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
9000dfb4:	b570      	push	{r4, r5, r6, lr}
9000dfb6:	4615      	mov	r5, r2

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
9000dfb8:	6c02      	ldr	r2, [r0, #64]	; 0x40
{
9000dfba:	4604      	mov	r4, r0
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
9000dfbc:	6b86      	ldr	r6, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
9000dfbe:	b92a      	cbnz	r2, 9000dfcc <prvCopyDataToQueue+0x18>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
9000dfc0:	6805      	ldr	r5, [r0, #0]
9000dfc2:	b365      	cbz	r5, 9000e01e <prvCopyDataToQueue+0x6a>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
9000dfc4:	3601      	adds	r6, #1
BaseType_t xReturn = pdFALSE;
9000dfc6:	4610      	mov	r0, r2
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
9000dfc8:	63a6      	str	r6, [r4, #56]	; 0x38

	return xReturn;
}
9000dfca:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
9000dfcc:	b97d      	cbnz	r5, 9000dfee <prvCopyDataToQueue+0x3a>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
9000dfce:	6840      	ldr	r0, [r0, #4]
9000dfd0:	f015 fab1 	bl	90023536 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
9000dfd4:	6863      	ldr	r3, [r4, #4]
9000dfd6:	6c22      	ldr	r2, [r4, #64]	; 0x40
9000dfd8:	4413      	add	r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
9000dfda:	68a2      	ldr	r2, [r4, #8]
9000dfdc:	4293      	cmp	r3, r2
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
9000dfde:	6063      	str	r3, [r4, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
9000dfe0:	d319      	bcc.n	9000e016 <prvCopyDataToQueue+0x62>
			pxQueue->pcWriteTo = pxQueue->pcHead;
9000dfe2:	6822      	ldr	r2, [r4, #0]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
9000dfe4:	3601      	adds	r6, #1
BaseType_t xReturn = pdFALSE;
9000dfe6:	4628      	mov	r0, r5
			pxQueue->pcWriteTo = pxQueue->pcHead;
9000dfe8:	6062      	str	r2, [r4, #4]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
9000dfea:	63a6      	str	r6, [r4, #56]	; 0x38
}
9000dfec:	bd70      	pop	{r4, r5, r6, pc}
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
9000dfee:	68c0      	ldr	r0, [r0, #12]
9000dff0:	f015 faa1 	bl	90023536 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
9000dff4:	6c22      	ldr	r2, [r4, #64]	; 0x40
9000dff6:	68e3      	ldr	r3, [r4, #12]
9000dff8:	4251      	negs	r1, r2
9000dffa:	1a9b      	subs	r3, r3, r2
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
9000dffc:	6822      	ldr	r2, [r4, #0]
9000dffe:	4293      	cmp	r3, r2
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
9000e000:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
9000e002:	d202      	bcs.n	9000e00a <prvCopyDataToQueue+0x56>
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
9000e004:	68a3      	ldr	r3, [r4, #8]
9000e006:	440b      	add	r3, r1
9000e008:	60e3      	str	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
9000e00a:	2d02      	cmp	r5, #2
9000e00c:	d00d      	beq.n	9000e02a <prvCopyDataToQueue+0x76>
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
9000e00e:	3601      	adds	r6, #1
BaseType_t xReturn = pdFALSE;
9000e010:	2000      	movs	r0, #0
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
9000e012:	63a6      	str	r6, [r4, #56]	; 0x38
}
9000e014:	bd70      	pop	{r4, r5, r6, pc}
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
9000e016:	3601      	adds	r6, #1
BaseType_t xReturn = pdFALSE;
9000e018:	4628      	mov	r0, r5
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
9000e01a:	63a6      	str	r6, [r4, #56]	; 0x38
}
9000e01c:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
9000e01e:	6880      	ldr	r0, [r0, #8]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
9000e020:	3601      	adds	r6, #1
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
9000e022:	f001 ff1f 	bl	9000fe64 <xTaskPriorityDisinherit>
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
9000e026:	60a5      	str	r5, [r4, #8]
9000e028:	e7ce      	b.n	9000dfc8 <prvCopyDataToQueue+0x14>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
9000e02a:	2e01      	cmp	r6, #1
BaseType_t xReturn = pdFALSE;
9000e02c:	f04f 0000 	mov.w	r0, #0
9000e030:	bf38      	it	cc
9000e032:	2601      	movcc	r6, #1
9000e034:	e7c8      	b.n	9000dfc8 <prvCopyDataToQueue+0x14>
9000e036:	bf00      	nop

9000e038 <xQueueGenericCreateStatic>:
	{
9000e038:	b530      	push	{r4, r5, lr}
9000e03a:	b083      	sub	sp, #12
9000e03c:	f89d 4018 	ldrb.w	r4, [sp, #24]
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
9000e040:	b940      	cbnz	r0, 9000e054 <xQueueGenericCreateStatic+0x1c>
9000e042:	f04f 0350 	mov.w	r3, #80	; 0x50
9000e046:	f383 8811 	msr	BASEPRI, r3
9000e04a:	f3bf 8f6f 	isb	sy
9000e04e:	f3bf 8f4f 	dsb	sy
9000e052:	e7fe      	b.n	9000e052 <xQueueGenericCreateStatic+0x1a>
		configASSERT( pxStaticQueue != NULL );
9000e054:	461d      	mov	r5, r3
9000e056:	b153      	cbz	r3, 9000e06e <xQueueGenericCreateStatic+0x36>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
9000e058:	b30a      	cbz	r2, 9000e09e <xQueueGenericCreateStatic+0x66>
9000e05a:	b989      	cbnz	r1, 9000e080 <xQueueGenericCreateStatic+0x48>
9000e05c:	f04f 0350 	mov.w	r3, #80	; 0x50
9000e060:	f383 8811 	msr	BASEPRI, r3
9000e064:	f3bf 8f6f 	isb	sy
9000e068:	f3bf 8f4f 	dsb	sy
9000e06c:	e7fe      	b.n	9000e06c <xQueueGenericCreateStatic+0x34>
9000e06e:	f04f 0350 	mov.w	r3, #80	; 0x50
9000e072:	f383 8811 	msr	BASEPRI, r3
9000e076:	f3bf 8f6f 	isb	sy
9000e07a:	f3bf 8f4f 	dsb	sy
		configASSERT( pxStaticQueue != NULL );
9000e07e:	e7fe      	b.n	9000e07e <xQueueGenericCreateStatic+0x46>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
9000e080:	b16a      	cbz	r2, 9000e09e <xQueueGenericCreateStatic+0x66>
			volatile size_t xSize = sizeof( StaticQueue_t );
9000e082:	2350      	movs	r3, #80	; 0x50
9000e084:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
9000e086:	9b01      	ldr	r3, [sp, #4]
9000e088:	2b50      	cmp	r3, #80	; 0x50
9000e08a:	d013      	beq.n	9000e0b4 <xQueueGenericCreateStatic+0x7c>
9000e08c:	f04f 0350 	mov.w	r3, #80	; 0x50
9000e090:	f383 8811 	msr	BASEPRI, r3
9000e094:	f3bf 8f6f 	isb	sy
9000e098:	f3bf 8f4f 	dsb	sy
9000e09c:	e7fe      	b.n	9000e09c <xQueueGenericCreateStatic+0x64>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
9000e09e:	2900      	cmp	r1, #0
9000e0a0:	d0ef      	beq.n	9000e082 <xQueueGenericCreateStatic+0x4a>
9000e0a2:	f04f 0350 	mov.w	r3, #80	; 0x50
9000e0a6:	f383 8811 	msr	BASEPRI, r3
9000e0aa:	f3bf 8f6f 	isb	sy
9000e0ae:	f3bf 8f4f 	dsb	sy
9000e0b2:	e7fe      	b.n	9000e0b2 <xQueueGenericCreateStatic+0x7a>
	if( uxItemSize == ( UBaseType_t ) 0 )
9000e0b4:	2900      	cmp	r1, #0
9000e0b6:	bf08      	it	eq
9000e0b8:	462a      	moveq	r2, r5
	pxNewQueue->uxLength = uxQueueLength;
9000e0ba:	63e8      	str	r0, [r5, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
9000e0bc:	6429      	str	r1, [r5, #64]	; 0x40
9000e0be:	602a      	str	r2, [r5, #0]
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
9000e0c0:	9a01      	ldr	r2, [sp, #4]
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
9000e0c2:	2201      	movs	r2, #1
9000e0c4:	f885 2046 	strb.w	r2, [r5, #70]	; 0x46
	taskENTER_CRITICAL();
9000e0c8:	f7ff fe14 	bl	9000dcf4 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000e0cc:	6829      	ldr	r1, [r5, #0]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
9000e0ce:	2300      	movs	r3, #0
		pxQueue->pcWriteTo = pxQueue->pcHead;
9000e0d0:	6069      	str	r1, [r5, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
9000e0d2:	63ab      	str	r3, [r5, #56]	; 0x38
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000e0d4:	e9d5 200f 	ldrd	r2, r0, [r5, #60]	; 0x3c
9000e0d8:	fb00 f202 	mul.w	r2, r0, r2
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000e0dc:	1a10      	subs	r0, r2, r0
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000e0de:	440a      	add	r2, r1
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000e0e0:	4401      	add	r1, r0
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000e0e2:	60aa      	str	r2, [r5, #8]
		pxQueue->cRxLock = queueUNLOCKED;
9000e0e4:	22ff      	movs	r2, #255	; 0xff
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
9000e0e6:	f105 0010 	add.w	r0, r5, #16
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000e0ea:	60e9      	str	r1, [r5, #12]
		pxQueue->cRxLock = queueUNLOCKED;
9000e0ec:	f885 2044 	strb.w	r2, [r5, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
9000e0f0:	f885 2045 	strb.w	r2, [r5, #69]	; 0x45
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
9000e0f4:	f7ff fd44 	bl	9000db80 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
9000e0f8:	f105 0024 	add.w	r0, r5, #36	; 0x24
9000e0fc:	f7ff fd40 	bl	9000db80 <vListInitialise>
	taskEXIT_CRITICAL();
9000e100:	f7ff fe1a 	bl	9000dd38 <vPortExitCritical>
	}
9000e104:	4628      	mov	r0, r5
		pxNewQueue->ucQueueType = ucQueueType;
9000e106:	f885 404c 	strb.w	r4, [r5, #76]	; 0x4c
	}
9000e10a:	b003      	add	sp, #12
9000e10c:	bd30      	pop	{r4, r5, pc}
9000e10e:	bf00      	nop

9000e110 <xQueueGenericCreate>:
	{
9000e110:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
9000e112:	b940      	cbnz	r0, 9000e126 <xQueueGenericCreate+0x16>
9000e114:	f04f 0350 	mov.w	r3, #80	; 0x50
9000e118:	f383 8811 	msr	BASEPRI, r3
9000e11c:	f3bf 8f6f 	isb	sy
9000e120:	f3bf 8f4f 	dsb	sy
9000e124:	e7fe      	b.n	9000e124 <xQueueGenericCreate+0x14>
9000e126:	4605      	mov	r5, r0
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
9000e128:	fb01 f000 	mul.w	r0, r1, r0
9000e12c:	460e      	mov	r6, r1
9000e12e:	4617      	mov	r7, r2
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
9000e130:	3050      	adds	r0, #80	; 0x50
9000e132:	f7ff fc03 	bl	9000d93c <pvPortMalloc>
		if( pxNewQueue != NULL )
9000e136:	4604      	mov	r4, r0
9000e138:	b340      	cbz	r0, 9000e18c <xQueueGenericCreate+0x7c>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
9000e13a:	2300      	movs	r3, #0
9000e13c:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
	if( uxItemSize == ( UBaseType_t ) 0 )
9000e140:	b336      	cbz	r6, 9000e190 <xQueueGenericCreate+0x80>
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000e142:	f100 0350 	add.w	r3, r0, #80	; 0x50
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
9000e146:	6023      	str	r3, [r4, #0]
	pxNewQueue->uxItemSize = uxItemSize;
9000e148:	e9c4 560f 	strd	r5, r6, [r4, #60]	; 0x3c
	taskENTER_CRITICAL();
9000e14c:	f7ff fdd2 	bl	9000dcf4 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000e150:	6822      	ldr	r2, [r4, #0]
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
9000e152:	f104 0010 	add.w	r0, r4, #16
		pxQueue->pcWriteTo = pxQueue->pcHead;
9000e156:	6062      	str	r2, [r4, #4]
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000e158:	e9d4 310f 	ldrd	r3, r1, [r4, #60]	; 0x3c
9000e15c:	fb01 f303 	mul.w	r3, r1, r3
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000e160:	1a59      	subs	r1, r3, r1
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000e162:	4413      	add	r3, r2
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000e164:	440a      	add	r2, r1
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000e166:	60a3      	str	r3, [r4, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
9000e168:	2100      	movs	r1, #0
		pxQueue->cRxLock = queueUNLOCKED;
9000e16a:	23ff      	movs	r3, #255	; 0xff
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000e16c:	60e2      	str	r2, [r4, #12]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
9000e16e:	63a1      	str	r1, [r4, #56]	; 0x38
		pxQueue->cRxLock = queueUNLOCKED;
9000e170:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
9000e174:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
9000e178:	f7ff fd02 	bl	9000db80 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
9000e17c:	f104 0024 	add.w	r0, r4, #36	; 0x24
9000e180:	f7ff fcfe 	bl	9000db80 <vListInitialise>
	taskEXIT_CRITICAL();
9000e184:	f7ff fdd8 	bl	9000dd38 <vPortExitCritical>
		pxNewQueue->ucQueueType = ucQueueType;
9000e188:	f884 704c 	strb.w	r7, [r4, #76]	; 0x4c
	}
9000e18c:	4620      	mov	r0, r4
9000e18e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
9000e190:	4603      	mov	r3, r0
9000e192:	e7d8      	b.n	9000e146 <xQueueGenericCreate+0x36>

9000e194 <xQueueCreateCountingSemaphoreStatic>:
		configASSERT( uxMaxCount != 0 );
9000e194:	b940      	cbnz	r0, 9000e1a8 <xQueueCreateCountingSemaphoreStatic+0x14>
9000e196:	f04f 0350 	mov.w	r3, #80	; 0x50
9000e19a:	f383 8811 	msr	BASEPRI, r3
9000e19e:	f3bf 8f6f 	isb	sy
9000e1a2:	f3bf 8f4f 	dsb	sy
9000e1a6:	e7fe      	b.n	9000e1a6 <xQueueCreateCountingSemaphoreStatic+0x12>
		configASSERT( uxInitialCount <= uxMaxCount );
9000e1a8:	4288      	cmp	r0, r1
9000e1aa:	d208      	bcs.n	9000e1be <xQueueCreateCountingSemaphoreStatic+0x2a>
9000e1ac:	f04f 0350 	mov.w	r3, #80	; 0x50
9000e1b0:	f383 8811 	msr	BASEPRI, r3
9000e1b4:	f3bf 8f6f 	isb	sy
9000e1b8:	f3bf 8f4f 	dsb	sy
9000e1bc:	e7fe      	b.n	9000e1bc <xQueueCreateCountingSemaphoreStatic+0x28>
	{
9000e1be:	b530      	push	{r4, r5, lr}
9000e1c0:	4615      	mov	r5, r2
9000e1c2:	b085      	sub	sp, #20
		configASSERT( pxStaticQueue != NULL );
9000e1c4:	2a00      	cmp	r2, #0
9000e1c6:	d03d      	beq.n	9000e244 <xQueueCreateCountingSemaphoreStatic+0xb0>
			volatile size_t xSize = sizeof( StaticQueue_t );
9000e1c8:	2350      	movs	r3, #80	; 0x50
9000e1ca:	9303      	str	r3, [sp, #12]
			configASSERT( xSize == sizeof( Queue_t ) );
9000e1cc:	9b03      	ldr	r3, [sp, #12]
9000e1ce:	2b50      	cmp	r3, #80	; 0x50
9000e1d0:	d008      	beq.n	9000e1e4 <xQueueCreateCountingSemaphoreStatic+0x50>
9000e1d2:	f04f 0350 	mov.w	r3, #80	; 0x50
9000e1d6:	f383 8811 	msr	BASEPRI, r3
9000e1da:	f3bf 8f6f 	isb	sy
9000e1de:	f3bf 8f4f 	dsb	sy
9000e1e2:	e7fe      	b.n	9000e1e2 <xQueueCreateCountingSemaphoreStatic+0x4e>
	pxNewQueue->uxItemSize = uxItemSize;
9000e1e4:	2400      	movs	r4, #0
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
9000e1e6:	2301      	movs	r3, #1
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
9000e1e8:	602a      	str	r2, [r5, #0]
	pxNewQueue->uxLength = uxQueueLength;
9000e1ea:	63d0      	str	r0, [r2, #60]	; 0x3c
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
9000e1ec:	f882 3046 	strb.w	r3, [r2, #70]	; 0x46
	pxNewQueue->uxItemSize = uxItemSize;
9000e1f0:	6414      	str	r4, [r2, #64]	; 0x40
9000e1f2:	9101      	str	r1, [sp, #4]
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
9000e1f4:	9b03      	ldr	r3, [sp, #12]
	taskENTER_CRITICAL();
9000e1f6:	f7ff fd7d 	bl	9000dcf4 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000e1fa:	6828      	ldr	r0, [r5, #0]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
9000e1fc:	63ac      	str	r4, [r5, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
9000e1fe:	6068      	str	r0, [r5, #4]
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000e200:	e9d5 3c0f 	ldrd	r3, ip, [r5, #60]	; 0x3c
9000e204:	fb03 f30c 	mul.w	r3, r3, ip
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000e208:	eba3 0c0c 	sub.w	ip, r3, ip
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000e20c:	4403      	add	r3, r0
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000e20e:	4484      	add	ip, r0
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000e210:	60ab      	str	r3, [r5, #8]
		pxQueue->cRxLock = queueUNLOCKED;
9000e212:	23ff      	movs	r3, #255	; 0xff
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
9000e214:	f105 0010 	add.w	r0, r5, #16
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000e218:	f8c5 c00c 	str.w	ip, [r5, #12]
		pxQueue->cRxLock = queueUNLOCKED;
9000e21c:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
9000e220:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
9000e224:	f7ff fcac 	bl	9000db80 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
9000e228:	f105 0024 	add.w	r0, r5, #36	; 0x24
9000e22c:	f7ff fca8 	bl	9000db80 <vListInitialise>
	taskEXIT_CRITICAL();
9000e230:	f7ff fd82 	bl	9000dd38 <vPortExitCritical>
		pxNewQueue->ucQueueType = ucQueueType;
9000e234:	2302      	movs	r3, #2
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
9000e236:	9901      	ldr	r1, [sp, #4]
	}
9000e238:	4628      	mov	r0, r5
		pxNewQueue->ucQueueType = ucQueueType;
9000e23a:	f885 304c 	strb.w	r3, [r5, #76]	; 0x4c
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
9000e23e:	63a9      	str	r1, [r5, #56]	; 0x38
	}
9000e240:	b005      	add	sp, #20
9000e242:	bd30      	pop	{r4, r5, pc}
9000e244:	f04f 0350 	mov.w	r3, #80	; 0x50
9000e248:	f383 8811 	msr	BASEPRI, r3
9000e24c:	f3bf 8f6f 	isb	sy
9000e250:	f3bf 8f4f 	dsb	sy
		configASSERT( pxStaticQueue != NULL );
9000e254:	e7fe      	b.n	9000e254 <xQueueCreateCountingSemaphoreStatic+0xc0>
9000e256:	bf00      	nop

9000e258 <xQueueCreateCountingSemaphore>:
	{
9000e258:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		configASSERT( uxMaxCount != 0 );
9000e25a:	b940      	cbnz	r0, 9000e26e <xQueueCreateCountingSemaphore+0x16>
9000e25c:	f04f 0350 	mov.w	r3, #80	; 0x50
9000e260:	f383 8811 	msr	BASEPRI, r3
9000e264:	f3bf 8f6f 	isb	sy
9000e268:	f3bf 8f4f 	dsb	sy
9000e26c:	e7fe      	b.n	9000e26c <xQueueCreateCountingSemaphore+0x14>
		configASSERT( uxInitialCount <= uxMaxCount );
9000e26e:	4288      	cmp	r0, r1
9000e270:	4604      	mov	r4, r0
9000e272:	460e      	mov	r6, r1
9000e274:	d208      	bcs.n	9000e288 <xQueueCreateCountingSemaphore+0x30>
9000e276:	f04f 0350 	mov.w	r3, #80	; 0x50
9000e27a:	f383 8811 	msr	BASEPRI, r3
9000e27e:	f3bf 8f6f 	isb	sy
9000e282:	f3bf 8f4f 	dsb	sy
9000e286:	e7fe      	b.n	9000e286 <xQueueCreateCountingSemaphore+0x2e>
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
9000e288:	2050      	movs	r0, #80	; 0x50
9000e28a:	f7ff fb57 	bl	9000d93c <pvPortMalloc>
		if( pxNewQueue != NULL )
9000e28e:	4605      	mov	r5, r0
9000e290:	b330      	cbz	r0, 9000e2e0 <xQueueCreateCountingSemaphore+0x88>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
9000e292:	2700      	movs	r7, #0
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
9000e294:	6000      	str	r0, [r0, #0]
	pxNewQueue->uxLength = uxQueueLength;
9000e296:	63c4      	str	r4, [r0, #60]	; 0x3c
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
9000e298:	f880 7046 	strb.w	r7, [r0, #70]	; 0x46
	pxNewQueue->uxItemSize = uxItemSize;
9000e29c:	6407      	str	r7, [r0, #64]	; 0x40
	taskENTER_CRITICAL();
9000e29e:	f7ff fd29 	bl	9000dcf4 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000e2a2:	682a      	ldr	r2, [r5, #0]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
9000e2a4:	63af      	str	r7, [r5, #56]	; 0x38
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
9000e2a6:	f105 0010 	add.w	r0, r5, #16
		pxQueue->pcWriteTo = pxQueue->pcHead;
9000e2aa:	606a      	str	r2, [r5, #4]
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000e2ac:	e9d5 310f 	ldrd	r3, r1, [r5, #60]	; 0x3c
9000e2b0:	fb01 f303 	mul.w	r3, r1, r3
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000e2b4:	1a59      	subs	r1, r3, r1
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000e2b6:	4413      	add	r3, r2
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000e2b8:	440a      	add	r2, r1
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000e2ba:	60ab      	str	r3, [r5, #8]
		pxQueue->cRxLock = queueUNLOCKED;
9000e2bc:	23ff      	movs	r3, #255	; 0xff
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000e2be:	60ea      	str	r2, [r5, #12]
		pxQueue->cRxLock = queueUNLOCKED;
9000e2c0:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
9000e2c4:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
9000e2c8:	f7ff fc5a 	bl	9000db80 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
9000e2cc:	f105 0024 	add.w	r0, r5, #36	; 0x24
9000e2d0:	f7ff fc56 	bl	9000db80 <vListInitialise>
	taskEXIT_CRITICAL();
9000e2d4:	f7ff fd30 	bl	9000dd38 <vPortExitCritical>
		pxNewQueue->ucQueueType = ucQueueType;
9000e2d8:	2302      	movs	r3, #2
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
9000e2da:	63ae      	str	r6, [r5, #56]	; 0x38
		pxNewQueue->ucQueueType = ucQueueType;
9000e2dc:	f885 304c 	strb.w	r3, [r5, #76]	; 0x4c
	}
9000e2e0:	4628      	mov	r0, r5
9000e2e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

9000e2e4 <xQueueGenericSend>:
{
9000e2e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
9000e2e8:	b084      	sub	sp, #16
9000e2ea:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
9000e2ec:	2800      	cmp	r0, #0
9000e2ee:	f000 8103 	beq.w	9000e4f8 <xQueueGenericSend+0x214>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
9000e2f2:	4688      	mov	r8, r1
9000e2f4:	4604      	mov	r4, r0
9000e2f6:	461f      	mov	r7, r3
9000e2f8:	2900      	cmp	r1, #0
9000e2fa:	f000 8097 	beq.w	9000e42c <xQueueGenericSend+0x148>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
9000e2fe:	2f02      	cmp	r7, #2
9000e300:	d10b      	bne.n	9000e31a <xQueueGenericSend+0x36>
9000e302:	6be3      	ldr	r3, [r4, #60]	; 0x3c
9000e304:	2b01      	cmp	r3, #1
9000e306:	d008      	beq.n	9000e31a <xQueueGenericSend+0x36>
9000e308:	f04f 0350 	mov.w	r3, #80	; 0x50
9000e30c:	f383 8811 	msr	BASEPRI, r3
9000e310:	f3bf 8f6f 	isb	sy
9000e314:	f3bf 8f4f 	dsb	sy
9000e318:	e7fe      	b.n	9000e318 <xQueueGenericSend+0x34>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
9000e31a:	f001 fd4d 	bl	9000fdb8 <xTaskGetSchedulerState>
9000e31e:	2800      	cmp	r0, #0
9000e320:	f000 80f3 	beq.w	9000e50a <xQueueGenericSend+0x226>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
9000e324:	f1a7 0902 	sub.w	r9, r7, #2
9000e328:	2500      	movs	r5, #0
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
9000e32a:	f104 0624 	add.w	r6, r4, #36	; 0x24
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
9000e32e:	fab9 f989 	clz	r9, r9
9000e332:	ea4f 1959 	mov.w	r9, r9, lsr #5
		taskENTER_CRITICAL();
9000e336:	f7ff fcdd 	bl	9000dcf4 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
9000e33a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
9000e33c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
9000e33e:	429a      	cmp	r2, r3
9000e340:	f0c0 80f0 	bcc.w	9000e524 <xQueueGenericSend+0x240>
9000e344:	f1b9 0f00 	cmp.w	r9, #0
9000e348:	f040 80ec 	bne.w	9000e524 <xQueueGenericSend+0x240>
				if( xTicksToWait == ( TickType_t ) 0 )
9000e34c:	9b01      	ldr	r3, [sp, #4]
9000e34e:	2b00      	cmp	r3, #0
9000e350:	f000 8101 	beq.w	9000e556 <xQueueGenericSend+0x272>
				else if( xEntryTimeSet == pdFALSE )
9000e354:	2d00      	cmp	r5, #0
9000e356:	f000 80cb 	beq.w	9000e4f0 <xQueueGenericSend+0x20c>
		taskEXIT_CRITICAL();
9000e35a:	f7ff fced 	bl	9000dd38 <vPortExitCritical>
		vTaskSuspendAll();
9000e35e:	f001 fb55 	bl	9000fa0c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
9000e362:	f7ff fcc7 	bl	9000dcf4 <vPortEnterCritical>
9000e366:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
9000e36a:	2bff      	cmp	r3, #255	; 0xff
9000e36c:	d102      	bne.n	9000e374 <xQueueGenericSend+0x90>
9000e36e:	2300      	movs	r3, #0
9000e370:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
9000e374:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
9000e378:	2bff      	cmp	r3, #255	; 0xff
9000e37a:	d102      	bne.n	9000e382 <xQueueGenericSend+0x9e>
9000e37c:	2300      	movs	r3, #0
9000e37e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
9000e382:	f7ff fcd9 	bl	9000dd38 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
9000e386:	a901      	add	r1, sp, #4
9000e388:	a802      	add	r0, sp, #8
9000e38a:	f001 fcc1 	bl	9000fd10 <xTaskCheckForTimeOut>
9000e38e:	2800      	cmp	r0, #0
9000e390:	f040 80e5 	bne.w	9000e55e <xQueueGenericSend+0x27a>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
9000e394:	f7ff fcae 	bl	9000dcf4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
9000e398:	6ba2      	ldr	r2, [r4, #56]	; 0x38
9000e39a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
9000e39c:	429a      	cmp	r2, r3
9000e39e:	d052      	beq.n	9000e446 <xQueueGenericSend+0x162>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
9000e3a0:	f7ff fcca 	bl	9000dd38 <vPortExitCritical>
	taskENTER_CRITICAL();
9000e3a4:	f7ff fca6 	bl	9000dcf4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
9000e3a8:	f894 2045 	ldrb.w	r2, [r4, #69]	; 0x45
9000e3ac:	b255      	sxtb	r5, r2
		while( cTxLock > queueLOCKED_UNMODIFIED )
9000e3ae:	2d00      	cmp	r5, #0
9000e3b0:	dc04      	bgt.n	9000e3bc <xQueueGenericSend+0xd8>
9000e3b2:	e011      	b.n	9000e3d8 <xQueueGenericSend+0xf4>
			--cTxLock;
9000e3b4:	1e6a      	subs	r2, r5, #1
9000e3b6:	b2d3      	uxtb	r3, r2
9000e3b8:	b255      	sxtb	r5, r2
		while( cTxLock > queueLOCKED_UNMODIFIED )
9000e3ba:	b16b      	cbz	r3, 9000e3d8 <xQueueGenericSend+0xf4>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
9000e3bc:	6a63      	ldr	r3, [r4, #36]	; 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
9000e3be:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
9000e3c0:	b153      	cbz	r3, 9000e3d8 <xQueueGenericSend+0xf4>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
9000e3c2:	f001 fc4f 	bl	9000fc64 <xTaskRemoveFromEventList>
9000e3c6:	2800      	cmp	r0, #0
9000e3c8:	d0f4      	beq.n	9000e3b4 <xQueueGenericSend+0xd0>
						vTaskMissedYield();
9000e3ca:	f001 fce9 	bl	9000fda0 <vTaskMissedYield>
			--cTxLock;
9000e3ce:	1e6a      	subs	r2, r5, #1
9000e3d0:	b2d3      	uxtb	r3, r2
9000e3d2:	b255      	sxtb	r5, r2
		while( cTxLock > queueLOCKED_UNMODIFIED )
9000e3d4:	2b00      	cmp	r3, #0
9000e3d6:	d1f1      	bne.n	9000e3bc <xQueueGenericSend+0xd8>
		pxQueue->cTxLock = queueUNLOCKED;
9000e3d8:	23ff      	movs	r3, #255	; 0xff
9000e3da:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
9000e3de:	f7ff fcab 	bl	9000dd38 <vPortExitCritical>
	taskENTER_CRITICAL();
9000e3e2:	f7ff fc87 	bl	9000dcf4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
9000e3e6:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
9000e3ea:	b255      	sxtb	r5, r2
		while( cRxLock > queueLOCKED_UNMODIFIED )
9000e3ec:	2d00      	cmp	r5, #0
9000e3ee:	dd14      	ble.n	9000e41a <xQueueGenericSend+0x136>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9000e3f0:	f104 0a10 	add.w	sl, r4, #16
9000e3f4:	e003      	b.n	9000e3fe <xQueueGenericSend+0x11a>
				--cRxLock;
9000e3f6:	1e6a      	subs	r2, r5, #1
9000e3f8:	b2d3      	uxtb	r3, r2
9000e3fa:	b255      	sxtb	r5, r2
		while( cRxLock > queueLOCKED_UNMODIFIED )
9000e3fc:	b16b      	cbz	r3, 9000e41a <xQueueGenericSend+0x136>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
9000e3fe:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9000e400:	4650      	mov	r0, sl
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
9000e402:	b153      	cbz	r3, 9000e41a <xQueueGenericSend+0x136>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9000e404:	f001 fc2e 	bl	9000fc64 <xTaskRemoveFromEventList>
9000e408:	2800      	cmp	r0, #0
9000e40a:	d0f4      	beq.n	9000e3f6 <xQueueGenericSend+0x112>
					vTaskMissedYield();
9000e40c:	f001 fcc8 	bl	9000fda0 <vTaskMissedYield>
				--cRxLock;
9000e410:	1e6a      	subs	r2, r5, #1
9000e412:	b2d3      	uxtb	r3, r2
9000e414:	b255      	sxtb	r5, r2
		while( cRxLock > queueLOCKED_UNMODIFIED )
9000e416:	2b00      	cmp	r3, #0
9000e418:	d1f1      	bne.n	9000e3fe <xQueueGenericSend+0x11a>
		pxQueue->cRxLock = queueUNLOCKED;
9000e41a:	23ff      	movs	r3, #255	; 0xff
9000e41c:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
9000e420:	f7ff fc8a 	bl	9000dd38 <vPortExitCritical>
				( void ) xTaskResumeAll();
9000e424:	f001 fafa 	bl	9000fa1c <xTaskResumeAll>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
9000e428:	2501      	movs	r5, #1
9000e42a:	e784      	b.n	9000e336 <xQueueGenericSend+0x52>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
9000e42c:	6c03      	ldr	r3, [r0, #64]	; 0x40
9000e42e:	2b00      	cmp	r3, #0
9000e430:	f43f af65 	beq.w	9000e2fe <xQueueGenericSend+0x1a>
9000e434:	f04f 0350 	mov.w	r3, #80	; 0x50
9000e438:	f383 8811 	msr	BASEPRI, r3
9000e43c:	f3bf 8f6f 	isb	sy
9000e440:	f3bf 8f4f 	dsb	sy
9000e444:	e7fe      	b.n	9000e444 <xQueueGenericSend+0x160>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
9000e446:	f104 0a10 	add.w	sl, r4, #16
	taskEXIT_CRITICAL();
9000e44a:	f7ff fc75 	bl	9000dd38 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
9000e44e:	9901      	ldr	r1, [sp, #4]
9000e450:	4650      	mov	r0, sl
9000e452:	f001 fb79 	bl	9000fb48 <vTaskPlaceOnEventList>
	taskENTER_CRITICAL();
9000e456:	f7ff fc4d 	bl	9000dcf4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
9000e45a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
9000e45e:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
9000e460:	2d00      	cmp	r5, #0
9000e462:	dc04      	bgt.n	9000e46e <xQueueGenericSend+0x18a>
9000e464:	e011      	b.n	9000e48a <xQueueGenericSend+0x1a6>
			--cTxLock;
9000e466:	1e6b      	subs	r3, r5, #1
9000e468:	b2da      	uxtb	r2, r3
9000e46a:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
9000e46c:	b16a      	cbz	r2, 9000e48a <xQueueGenericSend+0x1a6>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
9000e46e:	6a63      	ldr	r3, [r4, #36]	; 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
9000e470:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
9000e472:	b153      	cbz	r3, 9000e48a <xQueueGenericSend+0x1a6>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
9000e474:	f001 fbf6 	bl	9000fc64 <xTaskRemoveFromEventList>
9000e478:	2800      	cmp	r0, #0
9000e47a:	d0f4      	beq.n	9000e466 <xQueueGenericSend+0x182>
						vTaskMissedYield();
9000e47c:	f001 fc90 	bl	9000fda0 <vTaskMissedYield>
			--cTxLock;
9000e480:	1e6b      	subs	r3, r5, #1
9000e482:	b2da      	uxtb	r2, r3
9000e484:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
9000e486:	2a00      	cmp	r2, #0
9000e488:	d1f1      	bne.n	9000e46e <xQueueGenericSend+0x18a>
		pxQueue->cTxLock = queueUNLOCKED;
9000e48a:	23ff      	movs	r3, #255	; 0xff
9000e48c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
9000e490:	f7ff fc52 	bl	9000dd38 <vPortExitCritical>
	taskENTER_CRITICAL();
9000e494:	f7ff fc2e 	bl	9000dcf4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
9000e498:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
9000e49c:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
9000e49e:	2d00      	cmp	r5, #0
9000e4a0:	dc04      	bgt.n	9000e4ac <xQueueGenericSend+0x1c8>
9000e4a2:	e011      	b.n	9000e4c8 <xQueueGenericSend+0x1e4>
				--cRxLock;
9000e4a4:	1e6b      	subs	r3, r5, #1
9000e4a6:	b2da      	uxtb	r2, r3
9000e4a8:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
9000e4aa:	b16a      	cbz	r2, 9000e4c8 <xQueueGenericSend+0x1e4>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
9000e4ac:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9000e4ae:	4650      	mov	r0, sl
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
9000e4b0:	b153      	cbz	r3, 9000e4c8 <xQueueGenericSend+0x1e4>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9000e4b2:	f001 fbd7 	bl	9000fc64 <xTaskRemoveFromEventList>
9000e4b6:	2800      	cmp	r0, #0
9000e4b8:	d0f4      	beq.n	9000e4a4 <xQueueGenericSend+0x1c0>
					vTaskMissedYield();
9000e4ba:	f001 fc71 	bl	9000fda0 <vTaskMissedYield>
				--cRxLock;
9000e4be:	1e6b      	subs	r3, r5, #1
9000e4c0:	b2da      	uxtb	r2, r3
9000e4c2:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
9000e4c4:	2a00      	cmp	r2, #0
9000e4c6:	d1f1      	bne.n	9000e4ac <xQueueGenericSend+0x1c8>
		pxQueue->cRxLock = queueUNLOCKED;
9000e4c8:	23ff      	movs	r3, #255	; 0xff
9000e4ca:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
9000e4ce:	f7ff fc33 	bl	9000dd38 <vPortExitCritical>
				if( xTaskResumeAll() == pdFALSE )
9000e4d2:	f001 faa3 	bl	9000fa1c <xTaskResumeAll>
9000e4d6:	2800      	cmp	r0, #0
9000e4d8:	d1a6      	bne.n	9000e428 <xQueueGenericSend+0x144>
					portYIELD_WITHIN_API();
9000e4da:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
9000e4de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
9000e4e2:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
9000e4e6:	f3bf 8f4f 	dsb	sy
9000e4ea:	f3bf 8f6f 	isb	sy
9000e4ee:	e79b      	b.n	9000e428 <xQueueGenericSend+0x144>
					vTaskInternalSetTimeOutState( &xTimeOut );
9000e4f0:	a802      	add	r0, sp, #8
9000e4f2:	f001 fc01 	bl	9000fcf8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
9000e4f6:	e730      	b.n	9000e35a <xQueueGenericSend+0x76>
9000e4f8:	f04f 0350 	mov.w	r3, #80	; 0x50
9000e4fc:	f383 8811 	msr	BASEPRI, r3
9000e500:	f3bf 8f6f 	isb	sy
9000e504:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
9000e508:	e7fe      	b.n	9000e508 <xQueueGenericSend+0x224>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
9000e50a:	9b01      	ldr	r3, [sp, #4]
9000e50c:	2b00      	cmp	r3, #0
9000e50e:	f43f af09 	beq.w	9000e324 <xQueueGenericSend+0x40>
9000e512:	f04f 0350 	mov.w	r3, #80	; 0x50
9000e516:	f383 8811 	msr	BASEPRI, r3
9000e51a:	f3bf 8f6f 	isb	sy
9000e51e:	f3bf 8f4f 	dsb	sy
9000e522:	e7fe      	b.n	9000e522 <xQueueGenericSend+0x23e>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
9000e524:	463a      	mov	r2, r7
9000e526:	4641      	mov	r1, r8
9000e528:	4620      	mov	r0, r4
9000e52a:	f7ff fd43 	bl	9000dfb4 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
9000e52e:	6a63      	ldr	r3, [r4, #36]	; 0x24
9000e530:	2b00      	cmp	r3, #0
9000e532:	d152      	bne.n	9000e5da <xQueueGenericSend+0x2f6>
					else if( xYieldRequired != pdFALSE )
9000e534:	b148      	cbz	r0, 9000e54a <xQueueGenericSend+0x266>
						queueYIELD_IF_USING_PREEMPTION();
9000e536:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
9000e53a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
9000e53e:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
9000e542:	f3bf 8f4f 	dsb	sy
9000e546:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
9000e54a:	f7ff fbf5 	bl	9000dd38 <vPortExitCritical>
				return pdPASS;
9000e54e:	2001      	movs	r0, #1
}
9000e550:	b004      	add	sp, #16
9000e552:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
					taskEXIT_CRITICAL();
9000e556:	f7ff fbef 	bl	9000dd38 <vPortExitCritical>
					return errQUEUE_FULL;
9000e55a:	4648      	mov	r0, r9
9000e55c:	e7f8      	b.n	9000e550 <xQueueGenericSend+0x26c>
	taskENTER_CRITICAL();
9000e55e:	f7ff fbc9 	bl	9000dcf4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
9000e562:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
9000e566:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
9000e568:	2d00      	cmp	r5, #0
9000e56a:	dd10      	ble.n	9000e58e <xQueueGenericSend+0x2aa>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
9000e56c:	f104 0624 	add.w	r6, r4, #36	; 0x24
9000e570:	e003      	b.n	9000e57a <xQueueGenericSend+0x296>
			--cTxLock;
9000e572:	1e6b      	subs	r3, r5, #1
9000e574:	b2da      	uxtb	r2, r3
9000e576:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
9000e578:	b14a      	cbz	r2, 9000e58e <xQueueGenericSend+0x2aa>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
9000e57a:	6a63      	ldr	r3, [r4, #36]	; 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
9000e57c:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
9000e57e:	b133      	cbz	r3, 9000e58e <xQueueGenericSend+0x2aa>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
9000e580:	f001 fb70 	bl	9000fc64 <xTaskRemoveFromEventList>
9000e584:	2800      	cmp	r0, #0
9000e586:	d0f4      	beq.n	9000e572 <xQueueGenericSend+0x28e>
						vTaskMissedYield();
9000e588:	f001 fc0a 	bl	9000fda0 <vTaskMissedYield>
9000e58c:	e7f1      	b.n	9000e572 <xQueueGenericSend+0x28e>
		pxQueue->cTxLock = queueUNLOCKED;
9000e58e:	23ff      	movs	r3, #255	; 0xff
9000e590:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
9000e594:	f7ff fbd0 	bl	9000dd38 <vPortExitCritical>
	taskENTER_CRITICAL();
9000e598:	f7ff fbac 	bl	9000dcf4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
9000e59c:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
9000e5a0:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
9000e5a2:	2d00      	cmp	r5, #0
9000e5a4:	dd10      	ble.n	9000e5c8 <xQueueGenericSend+0x2e4>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9000e5a6:	f104 0610 	add.w	r6, r4, #16
9000e5aa:	e003      	b.n	9000e5b4 <xQueueGenericSend+0x2d0>
				--cRxLock;
9000e5ac:	1e6b      	subs	r3, r5, #1
9000e5ae:	b2da      	uxtb	r2, r3
9000e5b0:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
9000e5b2:	b14a      	cbz	r2, 9000e5c8 <xQueueGenericSend+0x2e4>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
9000e5b4:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9000e5b6:	4630      	mov	r0, r6
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
9000e5b8:	b133      	cbz	r3, 9000e5c8 <xQueueGenericSend+0x2e4>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9000e5ba:	f001 fb53 	bl	9000fc64 <xTaskRemoveFromEventList>
9000e5be:	2800      	cmp	r0, #0
9000e5c0:	d0f4      	beq.n	9000e5ac <xQueueGenericSend+0x2c8>
					vTaskMissedYield();
9000e5c2:	f001 fbed 	bl	9000fda0 <vTaskMissedYield>
9000e5c6:	e7f1      	b.n	9000e5ac <xQueueGenericSend+0x2c8>
		pxQueue->cRxLock = queueUNLOCKED;
9000e5c8:	23ff      	movs	r3, #255	; 0xff
9000e5ca:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
9000e5ce:	f7ff fbb3 	bl	9000dd38 <vPortExitCritical>
			( void ) xTaskResumeAll();
9000e5d2:	f001 fa23 	bl	9000fa1c <xTaskResumeAll>
			return errQUEUE_FULL;
9000e5d6:	2000      	movs	r0, #0
9000e5d8:	e7ba      	b.n	9000e550 <xQueueGenericSend+0x26c>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
9000e5da:	f104 0024 	add.w	r0, r4, #36	; 0x24
9000e5de:	f001 fb41 	bl	9000fc64 <xTaskRemoveFromEventList>
9000e5e2:	2800      	cmp	r0, #0
9000e5e4:	d0b1      	beq.n	9000e54a <xQueueGenericSend+0x266>
9000e5e6:	e7a6      	b.n	9000e536 <xQueueGenericSend+0x252>

9000e5e8 <xQueueCreateMutexStatic>:
		configASSERT( pxStaticQueue != NULL );
9000e5e8:	b179      	cbz	r1, 9000e60a <xQueueCreateMutexStatic+0x22>
			volatile size_t xSize = sizeof( StaticQueue_t );
9000e5ea:	2350      	movs	r3, #80	; 0x50
	{
9000e5ec:	b570      	push	{r4, r5, r6, lr}
9000e5ee:	b082      	sub	sp, #8
			volatile size_t xSize = sizeof( StaticQueue_t );
9000e5f0:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
9000e5f2:	9b01      	ldr	r3, [sp, #4]
9000e5f4:	2b50      	cmp	r3, #80	; 0x50
9000e5f6:	d011      	beq.n	9000e61c <xQueueCreateMutexStatic+0x34>
9000e5f8:	f04f 0350 	mov.w	r3, #80	; 0x50
9000e5fc:	f383 8811 	msr	BASEPRI, r3
9000e600:	f3bf 8f6f 	isb	sy
9000e604:	f3bf 8f4f 	dsb	sy
9000e608:	e7fe      	b.n	9000e608 <xQueueCreateMutexStatic+0x20>
9000e60a:	f04f 0350 	mov.w	r3, #80	; 0x50
9000e60e:	f383 8811 	msr	BASEPRI, r3
9000e612:	f3bf 8f6f 	isb	sy
9000e616:	f3bf 8f4f 	dsb	sy
		configASSERT( pxStaticQueue != NULL );
9000e61a:	e7fe      	b.n	9000e61a <xQueueCreateMutexStatic+0x32>
	pxNewQueue->uxItemSize = uxItemSize;
9000e61c:	2600      	movs	r6, #0
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
9000e61e:	2301      	movs	r3, #1
9000e620:	460c      	mov	r4, r1
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
9000e622:	6009      	str	r1, [r1, #0]
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
9000e624:	f881 3046 	strb.w	r3, [r1, #70]	; 0x46
9000e628:	4605      	mov	r5, r0
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
9000e62a:	9a01      	ldr	r2, [sp, #4]
	pxNewQueue->uxItemSize = uxItemSize;
9000e62c:	e9c1 360f 	strd	r3, r6, [r1, #60]	; 0x3c
	taskENTER_CRITICAL();
9000e630:	f7ff fb60 	bl	9000dcf4 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000e634:	6821      	ldr	r1, [r4, #0]
		pxQueue->cRxLock = queueUNLOCKED;
9000e636:	23ff      	movs	r3, #255	; 0xff
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
9000e638:	63a6      	str	r6, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
9000e63a:	6061      	str	r1, [r4, #4]
		pxQueue->cRxLock = queueUNLOCKED;
9000e63c:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
9000e640:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000e644:	e9d4 200f 	ldrd	r2, r0, [r4, #60]	; 0x3c
9000e648:	fb00 f202 	mul.w	r2, r0, r2
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000e64c:	1a10      	subs	r0, r2, r0
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000e64e:	440a      	add	r2, r1
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000e650:	4401      	add	r1, r0
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
9000e652:	f104 0010 	add.w	r0, r4, #16
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000e656:	e9c4 2102 	strd	r2, r1, [r4, #8]
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
9000e65a:	f7ff fa91 	bl	9000db80 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
9000e65e:	f104 0024 	add.w	r0, r4, #36	; 0x24
9000e662:	f7ff fa8d 	bl	9000db80 <vListInitialise>
	taskEXIT_CRITICAL();
9000e666:	f7ff fb67 	bl	9000dd38 <vPortExitCritical>
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
9000e66a:	4633      	mov	r3, r6
9000e66c:	4632      	mov	r2, r6
9000e66e:	4631      	mov	r1, r6
9000e670:	4620      	mov	r0, r4
		pxNewQueue->ucQueueType = ucQueueType;
9000e672:	f884 504c 	strb.w	r5, [r4, #76]	; 0x4c
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
9000e676:	60a6      	str	r6, [r4, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
9000e678:	6026      	str	r6, [r4, #0]
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
9000e67a:	60e6      	str	r6, [r4, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
9000e67c:	f7ff fe32 	bl	9000e2e4 <xQueueGenericSend>
	}
9000e680:	4620      	mov	r0, r4
9000e682:	b002      	add	sp, #8
9000e684:	bd70      	pop	{r4, r5, r6, pc}
9000e686:	bf00      	nop

9000e688 <xQueueGiveMutexRecursive>:
	{
9000e688:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxMutex );
9000e68a:	b138      	cbz	r0, 9000e69c <xQueueGiveMutexRecursive+0x14>
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
9000e68c:	6885      	ldr	r5, [r0, #8]
9000e68e:	4604      	mov	r4, r0
9000e690:	f001 fb8c 	bl	9000fdac <xTaskGetCurrentTaskHandle>
9000e694:	4285      	cmp	r5, r0
9000e696:	d00a      	beq.n	9000e6ae <xQueueGiveMutexRecursive+0x26>
			xReturn = pdFAIL;
9000e698:	2000      	movs	r0, #0
	}
9000e69a:	bd38      	pop	{r3, r4, r5, pc}
9000e69c:	f04f 0350 	mov.w	r3, #80	; 0x50
9000e6a0:	f383 8811 	msr	BASEPRI, r3
9000e6a4:	f3bf 8f6f 	isb	sy
9000e6a8:	f3bf 8f4f 	dsb	sy
		configASSERT( pxMutex );
9000e6ac:	e7fe      	b.n	9000e6ac <xQueueGiveMutexRecursive+0x24>
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
9000e6ae:	68e3      	ldr	r3, [r4, #12]
9000e6b0:	3b01      	subs	r3, #1
9000e6b2:	60e3      	str	r3, [r4, #12]
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
9000e6b4:	b10b      	cbz	r3, 9000e6ba <xQueueGiveMutexRecursive+0x32>
			xReturn = pdPASS;
9000e6b6:	2001      	movs	r0, #1
	}
9000e6b8:	bd38      	pop	{r3, r4, r5, pc}
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
9000e6ba:	461a      	mov	r2, r3
9000e6bc:	4619      	mov	r1, r3
9000e6be:	4620      	mov	r0, r4
9000e6c0:	f7ff fe10 	bl	9000e2e4 <xQueueGenericSend>
			xReturn = pdPASS;
9000e6c4:	2001      	movs	r0, #1
	}
9000e6c6:	bd38      	pop	{r3, r4, r5, pc}

9000e6c8 <xQueueCreateMutex>:
	{
9000e6c8:	b570      	push	{r4, r5, r6, lr}
9000e6ca:	4605      	mov	r5, r0
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
9000e6cc:	2050      	movs	r0, #80	; 0x50
9000e6ce:	f7ff f935 	bl	9000d93c <pvPortMalloc>
		if( pxNewQueue != NULL )
9000e6d2:	4604      	mov	r4, r0
9000e6d4:	b370      	cbz	r0, 9000e734 <xQueueCreateMutex+0x6c>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
9000e6d6:	2600      	movs	r6, #0
	pxNewQueue->uxLength = uxQueueLength;
9000e6d8:	2301      	movs	r3, #1
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
9000e6da:	6020      	str	r0, [r4, #0]
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
9000e6dc:	f880 6046 	strb.w	r6, [r0, #70]	; 0x46
	pxNewQueue->uxItemSize = uxItemSize;
9000e6e0:	e9c0 360f 	strd	r3, r6, [r0, #60]	; 0x3c
	taskENTER_CRITICAL();
9000e6e4:	f7ff fb06 	bl	9000dcf4 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000e6e8:	6821      	ldr	r1, [r4, #0]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
9000e6ea:	63a6      	str	r6, [r4, #56]	; 0x38
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
9000e6ec:	f104 0010 	add.w	r0, r4, #16
		pxQueue->pcWriteTo = pxQueue->pcHead;
9000e6f0:	6061      	str	r1, [r4, #4]
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000e6f2:	e9d4 230f 	ldrd	r2, r3, [r4, #60]	; 0x3c
9000e6f6:	fb03 f202 	mul.w	r2, r3, r2
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000e6fa:	1ad3      	subs	r3, r2, r3
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000e6fc:	440a      	add	r2, r1
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000e6fe:	4419      	add	r1, r3
		pxQueue->cRxLock = queueUNLOCKED;
9000e700:	23ff      	movs	r3, #255	; 0xff
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000e702:	e9c4 2102 	strd	r2, r1, [r4, #8]
		pxQueue->cRxLock = queueUNLOCKED;
9000e706:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
9000e70a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
9000e70e:	f7ff fa37 	bl	9000db80 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
9000e712:	f104 0024 	add.w	r0, r4, #36	; 0x24
9000e716:	f7ff fa33 	bl	9000db80 <vListInitialise>
	taskEXIT_CRITICAL();
9000e71a:	f7ff fb0d 	bl	9000dd38 <vPortExitCritical>
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
9000e71e:	4633      	mov	r3, r6
9000e720:	4632      	mov	r2, r6
9000e722:	4631      	mov	r1, r6
9000e724:	4620      	mov	r0, r4
		pxNewQueue->ucQueueType = ucQueueType;
9000e726:	f884 504c 	strb.w	r5, [r4, #76]	; 0x4c
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
9000e72a:	60a6      	str	r6, [r4, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
9000e72c:	6026      	str	r6, [r4, #0]
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
9000e72e:	60e6      	str	r6, [r4, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
9000e730:	f7ff fdd8 	bl	9000e2e4 <xQueueGenericSend>
	}
9000e734:	4620      	mov	r0, r4
9000e736:	bd70      	pop	{r4, r5, r6, pc}

9000e738 <xQueueGenericSendFromISR>:
	configASSERT( pxQueue );
9000e738:	2800      	cmp	r0, #0
9000e73a:	d04e      	beq.n	9000e7da <xQueueGenericSendFromISR+0xa2>
{
9000e73c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
9000e740:	460e      	mov	r6, r1
9000e742:	4604      	mov	r4, r0
9000e744:	4617      	mov	r7, r2
9000e746:	461d      	mov	r5, r3
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
9000e748:	b339      	cbz	r1, 9000e79a <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
9000e74a:	2d02      	cmp	r5, #2
9000e74c:	d10b      	bne.n	9000e766 <xQueueGenericSendFromISR+0x2e>
9000e74e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
9000e750:	2b01      	cmp	r3, #1
9000e752:	d008      	beq.n	9000e766 <xQueueGenericSendFromISR+0x2e>
9000e754:	f04f 0350 	mov.w	r3, #80	; 0x50
9000e758:	f383 8811 	msr	BASEPRI, r3
9000e75c:	f3bf 8f6f 	isb	sy
9000e760:	f3bf 8f4f 	dsb	sy
9000e764:	e7fe      	b.n	9000e764 <xQueueGenericSendFromISR+0x2c>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
9000e766:	f7ff fbf7 	bl	9000df58 <vPortValidateInterruptPriority>
	__asm volatile
9000e76a:	f3ef 8811 	mrs	r8, BASEPRI
9000e76e:	f04f 0350 	mov.w	r3, #80	; 0x50
9000e772:	f383 8811 	msr	BASEPRI, r3
9000e776:	f3bf 8f6f 	isb	sy
9000e77a:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
9000e77e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
9000e780:	6be3      	ldr	r3, [r4, #60]	; 0x3c
9000e782:	429a      	cmp	r2, r3
9000e784:	d315      	bcc.n	9000e7b2 <xQueueGenericSendFromISR+0x7a>
9000e786:	f1a5 0002 	sub.w	r0, r5, #2
9000e78a:	fab0 f080 	clz	r0, r0
9000e78e:	0940      	lsrs	r0, r0, #5
9000e790:	b978      	cbnz	r0, 9000e7b2 <xQueueGenericSendFromISR+0x7a>
	__asm volatile
9000e792:	f388 8811 	msr	BASEPRI, r8
}
9000e796:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
9000e79a:	6c03      	ldr	r3, [r0, #64]	; 0x40
9000e79c:	2b00      	cmp	r3, #0
9000e79e:	d0d4      	beq.n	9000e74a <xQueueGenericSendFromISR+0x12>
	__asm volatile
9000e7a0:	f04f 0350 	mov.w	r3, #80	; 0x50
9000e7a4:	f383 8811 	msr	BASEPRI, r3
9000e7a8:	f3bf 8f6f 	isb	sy
9000e7ac:	f3bf 8f4f 	dsb	sy
9000e7b0:	e7fe      	b.n	9000e7b0 <xQueueGenericSendFromISR+0x78>
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
9000e7b2:	462a      	mov	r2, r5
			const int8_t cTxLock = pxQueue->cTxLock;
9000e7b4:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
9000e7b8:	4631      	mov	r1, r6
9000e7ba:	4620      	mov	r0, r4
			const int8_t cTxLock = pxQueue->cTxLock;
9000e7bc:	b26d      	sxtb	r5, r5
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
9000e7be:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
9000e7c0:	f7ff fbf8 	bl	9000dfb4 <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
9000e7c4:	1c6b      	adds	r3, r5, #1
9000e7c6:	d011      	beq.n	9000e7ec <xQueueGenericSendFromISR+0xb4>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
9000e7c8:	1c6b      	adds	r3, r5, #1
			xReturn = pdPASS;
9000e7ca:	2001      	movs	r0, #1
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
9000e7cc:	b25b      	sxtb	r3, r3
9000e7ce:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	__asm volatile
9000e7d2:	f388 8811 	msr	BASEPRI, r8
}
9000e7d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__asm volatile
9000e7da:	f04f 0350 	mov.w	r3, #80	; 0x50
9000e7de:	f383 8811 	msr	BASEPRI, r3
9000e7e2:	f3bf 8f6f 	isb	sy
9000e7e6:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
9000e7ea:	e7fe      	b.n	9000e7ea <xQueueGenericSendFromISR+0xb2>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
9000e7ec:	6a63      	ldr	r3, [r4, #36]	; 0x24
9000e7ee:	b90b      	cbnz	r3, 9000e7f4 <xQueueGenericSendFromISR+0xbc>
			xReturn = pdPASS;
9000e7f0:	2001      	movs	r0, #1
9000e7f2:	e7ce      	b.n	9000e792 <xQueueGenericSendFromISR+0x5a>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
9000e7f4:	f104 0024 	add.w	r0, r4, #36	; 0x24
9000e7f8:	f001 fa34 	bl	9000fc64 <xTaskRemoveFromEventList>
							if( pxHigherPriorityTaskWoken != NULL )
9000e7fc:	2800      	cmp	r0, #0
9000e7fe:	d0f7      	beq.n	9000e7f0 <xQueueGenericSendFromISR+0xb8>
9000e800:	2f00      	cmp	r7, #0
9000e802:	d0f5      	beq.n	9000e7f0 <xQueueGenericSendFromISR+0xb8>
								*pxHigherPriorityTaskWoken = pdTRUE;
9000e804:	2301      	movs	r3, #1
			xReturn = pdPASS;
9000e806:	4618      	mov	r0, r3
								*pxHigherPriorityTaskWoken = pdTRUE;
9000e808:	603b      	str	r3, [r7, #0]
9000e80a:	e7c2      	b.n	9000e792 <xQueueGenericSendFromISR+0x5a>

9000e80c <xQueueGiveFromISR>:
	configASSERT( pxQueue );
9000e80c:	b360      	cbz	r0, 9000e868 <xQueueGiveFromISR+0x5c>
	configASSERT( pxQueue->uxItemSize == 0 );
9000e80e:	6c03      	ldr	r3, [r0, #64]	; 0x40
{
9000e810:	b570      	push	{r4, r5, r6, lr}
9000e812:	4604      	mov	r4, r0
	configASSERT( pxQueue->uxItemSize == 0 );
9000e814:	b143      	cbz	r3, 9000e828 <xQueueGiveFromISR+0x1c>
9000e816:	f04f 0350 	mov.w	r3, #80	; 0x50
9000e81a:	f383 8811 	msr	BASEPRI, r3
9000e81e:	f3bf 8f6f 	isb	sy
9000e822:	f3bf 8f4f 	dsb	sy
9000e826:	e7fe      	b.n	9000e826 <xQueueGiveFromISR+0x1a>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
9000e828:	6803      	ldr	r3, [r0, #0]
9000e82a:	460d      	mov	r5, r1
9000e82c:	b32b      	cbz	r3, 9000e87a <xQueueGiveFromISR+0x6e>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
9000e82e:	f7ff fb93 	bl	9000df58 <vPortValidateInterruptPriority>
	__asm volatile
9000e832:	f3ef 8611 	mrs	r6, BASEPRI
9000e836:	f04f 0350 	mov.w	r3, #80	; 0x50
9000e83a:	f383 8811 	msr	BASEPRI, r3
9000e83e:	f3bf 8f6f 	isb	sy
9000e842:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
9000e846:	6ba3      	ldr	r3, [r4, #56]	; 0x38
		if( uxMessagesWaiting < pxQueue->uxLength )
9000e848:	6be2      	ldr	r2, [r4, #60]	; 0x3c
9000e84a:	429a      	cmp	r2, r3
9000e84c:	d921      	bls.n	9000e892 <xQueueGiveFromISR+0x86>
			const int8_t cTxLock = pxQueue->cTxLock;
9000e84e:	f894 2045 	ldrb.w	r2, [r4, #69]	; 0x45
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
9000e852:	3301      	adds	r3, #1
			if( cTxLock == queueUNLOCKED )
9000e854:	2aff      	cmp	r2, #255	; 0xff
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
9000e856:	63a3      	str	r3, [r4, #56]	; 0x38
			const int8_t cTxLock = pxQueue->cTxLock;
9000e858:	b253      	sxtb	r3, r2
			if( cTxLock == queueUNLOCKED )
9000e85a:	d01e      	beq.n	9000e89a <xQueueGiveFromISR+0x8e>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
9000e85c:	3301      	adds	r3, #1
			xReturn = pdPASS;
9000e85e:	2001      	movs	r0, #1
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
9000e860:	b25b      	sxtb	r3, r3
9000e862:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
9000e866:	e015      	b.n	9000e894 <xQueueGiveFromISR+0x88>
	__asm volatile
9000e868:	f04f 0350 	mov.w	r3, #80	; 0x50
9000e86c:	f383 8811 	msr	BASEPRI, r3
9000e870:	f3bf 8f6f 	isb	sy
9000e874:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
9000e878:	e7fe      	b.n	9000e878 <xQueueGiveFromISR+0x6c>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
9000e87a:	6883      	ldr	r3, [r0, #8]
9000e87c:	2b00      	cmp	r3, #0
9000e87e:	d0d6      	beq.n	9000e82e <xQueueGiveFromISR+0x22>
9000e880:	f04f 0350 	mov.w	r3, #80	; 0x50
9000e884:	f383 8811 	msr	BASEPRI, r3
9000e888:	f3bf 8f6f 	isb	sy
9000e88c:	f3bf 8f4f 	dsb	sy
9000e890:	e7fe      	b.n	9000e890 <xQueueGiveFromISR+0x84>
			xReturn = errQUEUE_FULL;
9000e892:	2000      	movs	r0, #0
	__asm volatile
9000e894:	f386 8811 	msr	BASEPRI, r6
}
9000e898:	bd70      	pop	{r4, r5, r6, pc}
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
9000e89a:	6a63      	ldr	r3, [r4, #36]	; 0x24
9000e89c:	b90b      	cbnz	r3, 9000e8a2 <xQueueGiveFromISR+0x96>
			xReturn = pdPASS;
9000e89e:	2001      	movs	r0, #1
9000e8a0:	e7f8      	b.n	9000e894 <xQueueGiveFromISR+0x88>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
9000e8a2:	f104 0024 	add.w	r0, r4, #36	; 0x24
9000e8a6:	f001 f9dd 	bl	9000fc64 <xTaskRemoveFromEventList>
							if( pxHigherPriorityTaskWoken != NULL )
9000e8aa:	2d00      	cmp	r5, #0
9000e8ac:	d0f7      	beq.n	9000e89e <xQueueGiveFromISR+0x92>
9000e8ae:	2800      	cmp	r0, #0
9000e8b0:	d0f5      	beq.n	9000e89e <xQueueGiveFromISR+0x92>
								*pxHigherPriorityTaskWoken = pdTRUE;
9000e8b2:	2301      	movs	r3, #1
			xReturn = pdPASS;
9000e8b4:	4618      	mov	r0, r3
								*pxHigherPriorityTaskWoken = pdTRUE;
9000e8b6:	602b      	str	r3, [r5, #0]
9000e8b8:	e7ec      	b.n	9000e894 <xQueueGiveFromISR+0x88>
9000e8ba:	bf00      	nop

9000e8bc <xQueueReceive>:
{
9000e8bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
9000e8c0:	b085      	sub	sp, #20
9000e8c2:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
9000e8c4:	2800      	cmp	r0, #0
9000e8c6:	f000 815c 	beq.w	9000eb82 <xQueueReceive+0x2c6>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
9000e8ca:	460f      	mov	r7, r1
9000e8cc:	4604      	mov	r4, r0
9000e8ce:	2900      	cmp	r1, #0
9000e8d0:	d079      	beq.n	9000e9c6 <xQueueReceive+0x10a>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
9000e8d2:	f001 fa71 	bl	9000fdb8 <xTaskGetSchedulerState>
9000e8d6:	2800      	cmp	r0, #0
9000e8d8:	f000 8081 	beq.w	9000e9de <xQueueReceive+0x122>
		taskENTER_CRITICAL();
9000e8dc:	f7ff fa0a 	bl	9000dcf4 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
9000e8e0:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
9000e8e2:	2d00      	cmp	r5, #0
9000e8e4:	f040 8138 	bne.w	9000eb58 <xQueueReceive+0x29c>
				if( xTicksToWait == ( TickType_t ) 0 )
9000e8e8:	9b01      	ldr	r3, [sp, #4]
9000e8ea:	2b00      	cmp	r3, #0
9000e8ec:	f000 80d5 	beq.w	9000ea9a <xQueueReceive+0x1de>
		prvLockQueue( pxQueue );
9000e8f0:	46a8      	mov	r8, r5
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
9000e8f2:	f104 0624 	add.w	r6, r4, #36	; 0x24
					vTaskInternalSetTimeOutState( &xTimeOut );
9000e8f6:	a802      	add	r0, sp, #8
9000e8f8:	f001 f9fe 	bl	9000fcf8 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
9000e8fc:	f7ff fa1c 	bl	9000dd38 <vPortExitCritical>
		vTaskSuspendAll();
9000e900:	f001 f884 	bl	9000fa0c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
9000e904:	f7ff f9f6 	bl	9000dcf4 <vPortEnterCritical>
9000e908:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
9000e90c:	2bff      	cmp	r3, #255	; 0xff
9000e90e:	d101      	bne.n	9000e914 <xQueueReceive+0x58>
9000e910:	f884 8044 	strb.w	r8, [r4, #68]	; 0x44
9000e914:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
9000e918:	2bff      	cmp	r3, #255	; 0xff
9000e91a:	d101      	bne.n	9000e920 <xQueueReceive+0x64>
9000e91c:	f884 8045 	strb.w	r8, [r4, #69]	; 0x45
9000e920:	f7ff fa0a 	bl	9000dd38 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
9000e924:	a901      	add	r1, sp, #4
9000e926:	a802      	add	r0, sp, #8
9000e928:	f001 f9f2 	bl	9000fd10 <xTaskCheckForTimeOut>
9000e92c:	2800      	cmp	r0, #0
9000e92e:	d163      	bne.n	9000e9f8 <xQueueReceive+0x13c>
	taskENTER_CRITICAL();
9000e930:	f7ff f9e0 	bl	9000dcf4 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
9000e934:	6ba3      	ldr	r3, [r4, #56]	; 0x38
9000e936:	2b00      	cmp	r3, #0
9000e938:	f000 80b5 	beq.w	9000eaa6 <xQueueReceive+0x1ea>
	taskEXIT_CRITICAL();
9000e93c:	f7ff f9fc 	bl	9000dd38 <vPortExitCritical>
	taskENTER_CRITICAL();
9000e940:	f7ff f9d8 	bl	9000dcf4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
9000e944:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
9000e948:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
9000e94a:	2d00      	cmp	r5, #0
9000e94c:	dc04      	bgt.n	9000e958 <xQueueReceive+0x9c>
9000e94e:	e011      	b.n	9000e974 <xQueueReceive+0xb8>
			--cTxLock;
9000e950:	1e6b      	subs	r3, r5, #1
9000e952:	b2da      	uxtb	r2, r3
9000e954:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
9000e956:	b16a      	cbz	r2, 9000e974 <xQueueReceive+0xb8>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
9000e958:	6a63      	ldr	r3, [r4, #36]	; 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
9000e95a:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
9000e95c:	b153      	cbz	r3, 9000e974 <xQueueReceive+0xb8>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
9000e95e:	f001 f981 	bl	9000fc64 <xTaskRemoveFromEventList>
9000e962:	2800      	cmp	r0, #0
9000e964:	d0f4      	beq.n	9000e950 <xQueueReceive+0x94>
						vTaskMissedYield();
9000e966:	f001 fa1b 	bl	9000fda0 <vTaskMissedYield>
			--cTxLock;
9000e96a:	1e6b      	subs	r3, r5, #1
9000e96c:	b2da      	uxtb	r2, r3
9000e96e:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
9000e970:	2a00      	cmp	r2, #0
9000e972:	d1f1      	bne.n	9000e958 <xQueueReceive+0x9c>
		pxQueue->cTxLock = queueUNLOCKED;
9000e974:	23ff      	movs	r3, #255	; 0xff
9000e976:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
9000e97a:	f7ff f9dd 	bl	9000dd38 <vPortExitCritical>
	taskENTER_CRITICAL();
9000e97e:	f7ff f9b9 	bl	9000dcf4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
9000e982:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
9000e986:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
9000e988:	2d00      	cmp	r5, #0
9000e98a:	dd14      	ble.n	9000e9b6 <xQueueReceive+0xfa>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9000e98c:	f104 0910 	add.w	r9, r4, #16
9000e990:	e003      	b.n	9000e99a <xQueueReceive+0xde>
				--cRxLock;
9000e992:	1e6b      	subs	r3, r5, #1
9000e994:	b2da      	uxtb	r2, r3
9000e996:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
9000e998:	b16a      	cbz	r2, 9000e9b6 <xQueueReceive+0xfa>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
9000e99a:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9000e99c:	4648      	mov	r0, r9
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
9000e99e:	b153      	cbz	r3, 9000e9b6 <xQueueReceive+0xfa>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9000e9a0:	f001 f960 	bl	9000fc64 <xTaskRemoveFromEventList>
9000e9a4:	2800      	cmp	r0, #0
9000e9a6:	d0f4      	beq.n	9000e992 <xQueueReceive+0xd6>
					vTaskMissedYield();
9000e9a8:	f001 f9fa 	bl	9000fda0 <vTaskMissedYield>
				--cRxLock;
9000e9ac:	1e6b      	subs	r3, r5, #1
9000e9ae:	b2da      	uxtb	r2, r3
9000e9b0:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
9000e9b2:	2a00      	cmp	r2, #0
9000e9b4:	d1f1      	bne.n	9000e99a <xQueueReceive+0xde>
		pxQueue->cRxLock = queueUNLOCKED;
9000e9b6:	23ff      	movs	r3, #255	; 0xff
9000e9b8:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
9000e9bc:	f7ff f9bc 	bl	9000dd38 <vPortExitCritical>
				( void ) xTaskResumeAll();
9000e9c0:	f001 f82c 	bl	9000fa1c <xTaskResumeAll>
		taskENTER_CRITICAL();
9000e9c4:	e060      	b.n	9000ea88 <xQueueReceive+0x1cc>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
9000e9c6:	6c03      	ldr	r3, [r0, #64]	; 0x40
9000e9c8:	2b00      	cmp	r3, #0
9000e9ca:	d082      	beq.n	9000e8d2 <xQueueReceive+0x16>
	__asm volatile
9000e9cc:	f04f 0350 	mov.w	r3, #80	; 0x50
9000e9d0:	f383 8811 	msr	BASEPRI, r3
9000e9d4:	f3bf 8f6f 	isb	sy
9000e9d8:	f3bf 8f4f 	dsb	sy
9000e9dc:	e7fe      	b.n	9000e9dc <xQueueReceive+0x120>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
9000e9de:	9b01      	ldr	r3, [sp, #4]
9000e9e0:	2b00      	cmp	r3, #0
9000e9e2:	f43f af7b 	beq.w	9000e8dc <xQueueReceive+0x20>
9000e9e6:	f04f 0350 	mov.w	r3, #80	; 0x50
9000e9ea:	f383 8811 	msr	BASEPRI, r3
9000e9ee:	f3bf 8f6f 	isb	sy
9000e9f2:	f3bf 8f4f 	dsb	sy
9000e9f6:	e7fe      	b.n	9000e9f6 <xQueueReceive+0x13a>
	taskENTER_CRITICAL();
9000e9f8:	f7ff f97c 	bl	9000dcf4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
9000e9fc:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
9000ea00:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
9000ea02:	2d00      	cmp	r5, #0
9000ea04:	dc04      	bgt.n	9000ea10 <xQueueReceive+0x154>
9000ea06:	e011      	b.n	9000ea2c <xQueueReceive+0x170>
			--cTxLock;
9000ea08:	1e6b      	subs	r3, r5, #1
9000ea0a:	b2da      	uxtb	r2, r3
9000ea0c:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
9000ea0e:	b16a      	cbz	r2, 9000ea2c <xQueueReceive+0x170>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
9000ea10:	6a63      	ldr	r3, [r4, #36]	; 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
9000ea12:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
9000ea14:	b153      	cbz	r3, 9000ea2c <xQueueReceive+0x170>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
9000ea16:	f001 f925 	bl	9000fc64 <xTaskRemoveFromEventList>
9000ea1a:	2800      	cmp	r0, #0
9000ea1c:	d0f4      	beq.n	9000ea08 <xQueueReceive+0x14c>
						vTaskMissedYield();
9000ea1e:	f001 f9bf 	bl	9000fda0 <vTaskMissedYield>
			--cTxLock;
9000ea22:	1e6b      	subs	r3, r5, #1
9000ea24:	b2da      	uxtb	r2, r3
9000ea26:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
9000ea28:	2a00      	cmp	r2, #0
9000ea2a:	d1f1      	bne.n	9000ea10 <xQueueReceive+0x154>
		pxQueue->cTxLock = queueUNLOCKED;
9000ea2c:	23ff      	movs	r3, #255	; 0xff
9000ea2e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
9000ea32:	f7ff f981 	bl	9000dd38 <vPortExitCritical>
	taskENTER_CRITICAL();
9000ea36:	f7ff f95d 	bl	9000dcf4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
9000ea3a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
9000ea3e:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
9000ea40:	2d00      	cmp	r5, #0
9000ea42:	dd14      	ble.n	9000ea6e <xQueueReceive+0x1b2>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9000ea44:	f104 0910 	add.w	r9, r4, #16
9000ea48:	e003      	b.n	9000ea52 <xQueueReceive+0x196>
				--cRxLock;
9000ea4a:	1e6b      	subs	r3, r5, #1
9000ea4c:	b2da      	uxtb	r2, r3
9000ea4e:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
9000ea50:	b16a      	cbz	r2, 9000ea6e <xQueueReceive+0x1b2>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
9000ea52:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9000ea54:	4648      	mov	r0, r9
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
9000ea56:	b153      	cbz	r3, 9000ea6e <xQueueReceive+0x1b2>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9000ea58:	f001 f904 	bl	9000fc64 <xTaskRemoveFromEventList>
9000ea5c:	2800      	cmp	r0, #0
9000ea5e:	d0f4      	beq.n	9000ea4a <xQueueReceive+0x18e>
					vTaskMissedYield();
9000ea60:	f001 f99e 	bl	9000fda0 <vTaskMissedYield>
				--cRxLock;
9000ea64:	1e6b      	subs	r3, r5, #1
9000ea66:	b2da      	uxtb	r2, r3
9000ea68:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
9000ea6a:	2a00      	cmp	r2, #0
9000ea6c:	d1f1      	bne.n	9000ea52 <xQueueReceive+0x196>
		pxQueue->cRxLock = queueUNLOCKED;
9000ea6e:	23ff      	movs	r3, #255	; 0xff
9000ea70:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
9000ea74:	f7ff f960 	bl	9000dd38 <vPortExitCritical>
			( void ) xTaskResumeAll();
9000ea78:	f000 ffd0 	bl	9000fa1c <xTaskResumeAll>
	taskENTER_CRITICAL();
9000ea7c:	f7ff f93a 	bl	9000dcf4 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
9000ea80:	6ba3      	ldr	r3, [r4, #56]	; 0x38
9000ea82:	b153      	cbz	r3, 9000ea9a <xQueueReceive+0x1de>
	taskEXIT_CRITICAL();
9000ea84:	f7ff f958 	bl	9000dd38 <vPortExitCritical>
		taskENTER_CRITICAL();
9000ea88:	f7ff f934 	bl	9000dcf4 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
9000ea8c:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
9000ea8e:	2d00      	cmp	r5, #0
9000ea90:	d162      	bne.n	9000eb58 <xQueueReceive+0x29c>
				if( xTicksToWait == ( TickType_t ) 0 )
9000ea92:	9b01      	ldr	r3, [sp, #4]
9000ea94:	2b00      	cmp	r3, #0
9000ea96:	f47f af31 	bne.w	9000e8fc <xQueueReceive+0x40>
					taskEXIT_CRITICAL();
9000ea9a:	f7ff f94d 	bl	9000dd38 <vPortExitCritical>
					return errQUEUE_EMPTY;
9000ea9e:	2000      	movs	r0, #0
}
9000eaa0:	b005      	add	sp, #20
9000eaa2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	taskEXIT_CRITICAL();
9000eaa6:	f7ff f947 	bl	9000dd38 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
9000eaaa:	9901      	ldr	r1, [sp, #4]
9000eaac:	4630      	mov	r0, r6
9000eaae:	f001 f84b 	bl	9000fb48 <vTaskPlaceOnEventList>
	taskENTER_CRITICAL();
9000eab2:	f7ff f91f 	bl	9000dcf4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
9000eab6:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
9000eaba:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
9000eabc:	2d00      	cmp	r5, #0
9000eabe:	dc04      	bgt.n	9000eaca <xQueueReceive+0x20e>
9000eac0:	e011      	b.n	9000eae6 <xQueueReceive+0x22a>
			--cTxLock;
9000eac2:	1e6b      	subs	r3, r5, #1
9000eac4:	b2da      	uxtb	r2, r3
9000eac6:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
9000eac8:	b16a      	cbz	r2, 9000eae6 <xQueueReceive+0x22a>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
9000eaca:	6a63      	ldr	r3, [r4, #36]	; 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
9000eacc:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
9000eace:	b153      	cbz	r3, 9000eae6 <xQueueReceive+0x22a>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
9000ead0:	f001 f8c8 	bl	9000fc64 <xTaskRemoveFromEventList>
9000ead4:	2800      	cmp	r0, #0
9000ead6:	d0f4      	beq.n	9000eac2 <xQueueReceive+0x206>
						vTaskMissedYield();
9000ead8:	f001 f962 	bl	9000fda0 <vTaskMissedYield>
			--cTxLock;
9000eadc:	1e6b      	subs	r3, r5, #1
9000eade:	b2da      	uxtb	r2, r3
9000eae0:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
9000eae2:	2a00      	cmp	r2, #0
9000eae4:	d1f1      	bne.n	9000eaca <xQueueReceive+0x20e>
		pxQueue->cTxLock = queueUNLOCKED;
9000eae6:	23ff      	movs	r3, #255	; 0xff
9000eae8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
9000eaec:	f7ff f924 	bl	9000dd38 <vPortExitCritical>
	taskENTER_CRITICAL();
9000eaf0:	f7ff f900 	bl	9000dcf4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
9000eaf4:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
9000eaf8:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
9000eafa:	2d00      	cmp	r5, #0
9000eafc:	dd14      	ble.n	9000eb28 <xQueueReceive+0x26c>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9000eafe:	f104 0910 	add.w	r9, r4, #16
9000eb02:	e003      	b.n	9000eb0c <xQueueReceive+0x250>
				--cRxLock;
9000eb04:	1e6b      	subs	r3, r5, #1
9000eb06:	b2da      	uxtb	r2, r3
9000eb08:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
9000eb0a:	b16a      	cbz	r2, 9000eb28 <xQueueReceive+0x26c>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
9000eb0c:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9000eb0e:	4648      	mov	r0, r9
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
9000eb10:	b153      	cbz	r3, 9000eb28 <xQueueReceive+0x26c>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9000eb12:	f001 f8a7 	bl	9000fc64 <xTaskRemoveFromEventList>
9000eb16:	2800      	cmp	r0, #0
9000eb18:	d0f4      	beq.n	9000eb04 <xQueueReceive+0x248>
					vTaskMissedYield();
9000eb1a:	f001 f941 	bl	9000fda0 <vTaskMissedYield>
				--cRxLock;
9000eb1e:	1e6b      	subs	r3, r5, #1
9000eb20:	b2da      	uxtb	r2, r3
9000eb22:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
9000eb24:	2a00      	cmp	r2, #0
9000eb26:	d1f1      	bne.n	9000eb0c <xQueueReceive+0x250>
		pxQueue->cRxLock = queueUNLOCKED;
9000eb28:	23ff      	movs	r3, #255	; 0xff
9000eb2a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
9000eb2e:	f7ff f903 	bl	9000dd38 <vPortExitCritical>
				if( xTaskResumeAll() == pdFALSE )
9000eb32:	f000 ff73 	bl	9000fa1c <xTaskResumeAll>
9000eb36:	2800      	cmp	r0, #0
9000eb38:	d1a6      	bne.n	9000ea88 <xQueueReceive+0x1cc>
					portYIELD_WITHIN_API();
9000eb3a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
9000eb3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
9000eb42:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
9000eb46:	f3bf 8f4f 	dsb	sy
9000eb4a:	f3bf 8f6f 	isb	sy
		taskENTER_CRITICAL();
9000eb4e:	f7ff f8d1 	bl	9000dcf4 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
9000eb52:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
9000eb54:	2d00      	cmp	r5, #0
9000eb56:	d09c      	beq.n	9000ea92 <xQueueReceive+0x1d6>
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
9000eb58:	6c22      	ldr	r2, [r4, #64]	; 0x40
9000eb5a:	b152      	cbz	r2, 9000eb72 <xQueueReceive+0x2b6>
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
9000eb5c:	68e1      	ldr	r1, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
9000eb5e:	68a3      	ldr	r3, [r4, #8]
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
9000eb60:	4411      	add	r1, r2
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
9000eb62:	4299      	cmp	r1, r3
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
9000eb64:	60e1      	str	r1, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
9000eb66:	d301      	bcc.n	9000eb6c <xQueueReceive+0x2b0>
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
9000eb68:	6821      	ldr	r1, [r4, #0]
9000eb6a:	60e1      	str	r1, [r4, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
9000eb6c:	4638      	mov	r0, r7
9000eb6e:	f014 fce2 	bl	90023536 <memcpy>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
9000eb72:	3d01      	subs	r5, #1
9000eb74:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
9000eb76:	6923      	ldr	r3, [r4, #16]
9000eb78:	b963      	cbnz	r3, 9000eb94 <xQueueReceive+0x2d8>
				taskEXIT_CRITICAL();
9000eb7a:	f7ff f8dd 	bl	9000dd38 <vPortExitCritical>
				return pdPASS;
9000eb7e:	2001      	movs	r0, #1
9000eb80:	e78e      	b.n	9000eaa0 <xQueueReceive+0x1e4>
9000eb82:	f04f 0350 	mov.w	r3, #80	; 0x50
9000eb86:	f383 8811 	msr	BASEPRI, r3
9000eb8a:	f3bf 8f6f 	isb	sy
9000eb8e:	f3bf 8f4f 	dsb	sy
	configASSERT( ( pxQueue ) );
9000eb92:	e7fe      	b.n	9000eb92 <xQueueReceive+0x2d6>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9000eb94:	f104 0010 	add.w	r0, r4, #16
9000eb98:	f001 f864 	bl	9000fc64 <xTaskRemoveFromEventList>
9000eb9c:	2800      	cmp	r0, #0
9000eb9e:	d0ec      	beq.n	9000eb7a <xQueueReceive+0x2be>
						queueYIELD_IF_USING_PREEMPTION();
9000eba0:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
9000eba4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
9000eba8:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
9000ebac:	f3bf 8f4f 	dsb	sy
9000ebb0:	f3bf 8f6f 	isb	sy
9000ebb4:	e7e1      	b.n	9000eb7a <xQueueReceive+0x2be>
9000ebb6:	bf00      	nop

9000ebb8 <xQueueSemaphoreTake>:
{
9000ebb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
9000ebbc:	b084      	sub	sp, #16
9000ebbe:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
9000ebc0:	2800      	cmp	r0, #0
9000ebc2:	d05c      	beq.n	9000ec7e <xQueueSemaphoreTake+0xc6>
	configASSERT( pxQueue->uxItemSize == 0 );
9000ebc4:	6c07      	ldr	r7, [r0, #64]	; 0x40
9000ebc6:	4604      	mov	r4, r0
9000ebc8:	b147      	cbz	r7, 9000ebdc <xQueueSemaphoreTake+0x24>
9000ebca:	f04f 0350 	mov.w	r3, #80	; 0x50
9000ebce:	f383 8811 	msr	BASEPRI, r3
9000ebd2:	f3bf 8f6f 	isb	sy
9000ebd6:	f3bf 8f4f 	dsb	sy
9000ebda:	e7fe      	b.n	9000ebda <xQueueSemaphoreTake+0x22>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
9000ebdc:	f001 f8ec 	bl	9000fdb8 <xTaskGetSchedulerState>
9000ebe0:	4605      	mov	r5, r0
9000ebe2:	2800      	cmp	r0, #0
9000ebe4:	d054      	beq.n	9000ec90 <xQueueSemaphoreTake+0xd8>
9000ebe6:	463d      	mov	r5, r7
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
9000ebe8:	f104 0624 	add.w	r6, r4, #36	; 0x24
		taskENTER_CRITICAL();
9000ebec:	f7ff f882 	bl	9000dcf4 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
9000ebf0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
9000ebf2:	2b00      	cmp	r3, #0
9000ebf4:	f040 8149 	bne.w	9000ee8a <xQueueSemaphoreTake+0x2d2>
				if( xTicksToWait == ( TickType_t ) 0 )
9000ebf8:	9b01      	ldr	r3, [sp, #4]
9000ebfa:	2b00      	cmp	r3, #0
9000ebfc:	f000 813a 	beq.w	9000ee74 <xQueueSemaphoreTake+0x2bc>
				else if( xEntryTimeSet == pdFALSE )
9000ec00:	2d00      	cmp	r5, #0
9000ec02:	f000 809d 	beq.w	9000ed40 <xQueueSemaphoreTake+0x188>
		taskEXIT_CRITICAL();
9000ec06:	f7ff f897 	bl	9000dd38 <vPortExitCritical>
		vTaskSuspendAll();
9000ec0a:	f000 feff 	bl	9000fa0c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
9000ec0e:	f7ff f871 	bl	9000dcf4 <vPortEnterCritical>
9000ec12:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
9000ec16:	2bff      	cmp	r3, #255	; 0xff
9000ec18:	d102      	bne.n	9000ec20 <xQueueSemaphoreTake+0x68>
9000ec1a:	2300      	movs	r3, #0
9000ec1c:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
9000ec20:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
9000ec24:	2bff      	cmp	r3, #255	; 0xff
9000ec26:	d102      	bne.n	9000ec2e <xQueueSemaphoreTake+0x76>
9000ec28:	2300      	movs	r3, #0
9000ec2a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
9000ec2e:	f7ff f883 	bl	9000dd38 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
9000ec32:	a901      	add	r1, sp, #4
9000ec34:	a802      	add	r0, sp, #8
9000ec36:	f001 f86b 	bl	9000fd10 <xTaskCheckForTimeOut>
9000ec3a:	2800      	cmp	r0, #0
9000ec3c:	d135      	bne.n	9000ecaa <xQueueSemaphoreTake+0xf2>
	taskENTER_CRITICAL();
9000ec3e:	f7ff f859 	bl	9000dcf4 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
9000ec42:	6ba3      	ldr	r3, [r4, #56]	; 0x38
9000ec44:	2b00      	cmp	r3, #0
9000ec46:	f000 80a4 	beq.w	9000ed92 <xQueueSemaphoreTake+0x1da>
	taskEXIT_CRITICAL();
9000ec4a:	f7ff f875 	bl	9000dd38 <vPortExitCritical>
	taskENTER_CRITICAL();
9000ec4e:	f7ff f851 	bl	9000dcf4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
9000ec52:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
9000ec56:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
9000ec58:	2d00      	cmp	r5, #0
9000ec5a:	dc05      	bgt.n	9000ec68 <xQueueSemaphoreTake+0xb0>
9000ec5c:	e074      	b.n	9000ed48 <xQueueSemaphoreTake+0x190>
			--cTxLock;
9000ec5e:	1e6b      	subs	r3, r5, #1
9000ec60:	b2da      	uxtb	r2, r3
9000ec62:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
9000ec64:	2a00      	cmp	r2, #0
9000ec66:	d06f      	beq.n	9000ed48 <xQueueSemaphoreTake+0x190>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
9000ec68:	6a63      	ldr	r3, [r4, #36]	; 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
9000ec6a:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
9000ec6c:	2b00      	cmp	r3, #0
9000ec6e:	d06b      	beq.n	9000ed48 <xQueueSemaphoreTake+0x190>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
9000ec70:	f000 fff8 	bl	9000fc64 <xTaskRemoveFromEventList>
9000ec74:	2800      	cmp	r0, #0
9000ec76:	d0f2      	beq.n	9000ec5e <xQueueSemaphoreTake+0xa6>
						vTaskMissedYield();
9000ec78:	f001 f892 	bl	9000fda0 <vTaskMissedYield>
9000ec7c:	e7ef      	b.n	9000ec5e <xQueueSemaphoreTake+0xa6>
9000ec7e:	f04f 0350 	mov.w	r3, #80	; 0x50
9000ec82:	f383 8811 	msr	BASEPRI, r3
9000ec86:	f3bf 8f6f 	isb	sy
9000ec8a:	f3bf 8f4f 	dsb	sy
	configASSERT( ( pxQueue ) );
9000ec8e:	e7fe      	b.n	9000ec8e <xQueueSemaphoreTake+0xd6>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
9000ec90:	9b01      	ldr	r3, [sp, #4]
9000ec92:	2b00      	cmp	r3, #0
9000ec94:	f000 80d4 	beq.w	9000ee40 <xQueueSemaphoreTake+0x288>
9000ec98:	f04f 0350 	mov.w	r3, #80	; 0x50
9000ec9c:	f383 8811 	msr	BASEPRI, r3
9000eca0:	f3bf 8f6f 	isb	sy
9000eca4:	f3bf 8f4f 	dsb	sy
9000eca8:	e7fe      	b.n	9000eca8 <xQueueSemaphoreTake+0xf0>
	taskENTER_CRITICAL();
9000ecaa:	f7ff f823 	bl	9000dcf4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
9000ecae:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
9000ecb2:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
9000ecb4:	2d00      	cmp	r5, #0
9000ecb6:	dc04      	bgt.n	9000ecc2 <xQueueSemaphoreTake+0x10a>
9000ecb8:	e011      	b.n	9000ecde <xQueueSemaphoreTake+0x126>
			--cTxLock;
9000ecba:	1e6b      	subs	r3, r5, #1
9000ecbc:	b2da      	uxtb	r2, r3
9000ecbe:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
9000ecc0:	b16a      	cbz	r2, 9000ecde <xQueueSemaphoreTake+0x126>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
9000ecc2:	6a63      	ldr	r3, [r4, #36]	; 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
9000ecc4:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
9000ecc6:	b153      	cbz	r3, 9000ecde <xQueueSemaphoreTake+0x126>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
9000ecc8:	f000 ffcc 	bl	9000fc64 <xTaskRemoveFromEventList>
9000eccc:	2800      	cmp	r0, #0
9000ecce:	d0f4      	beq.n	9000ecba <xQueueSemaphoreTake+0x102>
						vTaskMissedYield();
9000ecd0:	f001 f866 	bl	9000fda0 <vTaskMissedYield>
			--cTxLock;
9000ecd4:	1e6b      	subs	r3, r5, #1
9000ecd6:	b2da      	uxtb	r2, r3
9000ecd8:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
9000ecda:	2a00      	cmp	r2, #0
9000ecdc:	d1f1      	bne.n	9000ecc2 <xQueueSemaphoreTake+0x10a>
		pxQueue->cTxLock = queueUNLOCKED;
9000ecde:	23ff      	movs	r3, #255	; 0xff
9000ece0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
9000ece4:	f7ff f828 	bl	9000dd38 <vPortExitCritical>
	taskENTER_CRITICAL();
9000ece8:	f7ff f804 	bl	9000dcf4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
9000ecec:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
9000ecf0:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
9000ecf2:	2d00      	cmp	r5, #0
9000ecf4:	dd14      	ble.n	9000ed20 <xQueueSemaphoreTake+0x168>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9000ecf6:	f104 0810 	add.w	r8, r4, #16
9000ecfa:	e003      	b.n	9000ed04 <xQueueSemaphoreTake+0x14c>
				--cRxLock;
9000ecfc:	1e6b      	subs	r3, r5, #1
9000ecfe:	b2da      	uxtb	r2, r3
9000ed00:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
9000ed02:	b16a      	cbz	r2, 9000ed20 <xQueueSemaphoreTake+0x168>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
9000ed04:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9000ed06:	4640      	mov	r0, r8
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
9000ed08:	b153      	cbz	r3, 9000ed20 <xQueueSemaphoreTake+0x168>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9000ed0a:	f000 ffab 	bl	9000fc64 <xTaskRemoveFromEventList>
9000ed0e:	2800      	cmp	r0, #0
9000ed10:	d0f4      	beq.n	9000ecfc <xQueueSemaphoreTake+0x144>
					vTaskMissedYield();
9000ed12:	f001 f845 	bl	9000fda0 <vTaskMissedYield>
				--cRxLock;
9000ed16:	1e6b      	subs	r3, r5, #1
9000ed18:	b2da      	uxtb	r2, r3
9000ed1a:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
9000ed1c:	2a00      	cmp	r2, #0
9000ed1e:	d1f1      	bne.n	9000ed04 <xQueueSemaphoreTake+0x14c>
		pxQueue->cRxLock = queueUNLOCKED;
9000ed20:	23ff      	movs	r3, #255	; 0xff
9000ed22:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
9000ed26:	f7ff f807 	bl	9000dd38 <vPortExitCritical>
			( void ) xTaskResumeAll();
9000ed2a:	f000 fe77 	bl	9000fa1c <xTaskResumeAll>
	taskENTER_CRITICAL();
9000ed2e:	f7fe ffe1 	bl	9000dcf4 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
9000ed32:	6ba3      	ldr	r3, [r4, #56]	; 0x38
9000ed34:	2b00      	cmp	r3, #0
9000ed36:	d07c      	beq.n	9000ee32 <xQueueSemaphoreTake+0x27a>
	taskEXIT_CRITICAL();
9000ed38:	f7fe fffe 	bl	9000dd38 <vPortExitCritical>
	return xReturn;
9000ed3c:	2501      	movs	r5, #1
9000ed3e:	e755      	b.n	9000ebec <xQueueSemaphoreTake+0x34>
					vTaskInternalSetTimeOutState( &xTimeOut );
9000ed40:	a802      	add	r0, sp, #8
9000ed42:	f000 ffd9 	bl	9000fcf8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
9000ed46:	e75e      	b.n	9000ec06 <xQueueSemaphoreTake+0x4e>
		pxQueue->cTxLock = queueUNLOCKED;
9000ed48:	23ff      	movs	r3, #255	; 0xff
9000ed4a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
9000ed4e:	f7fe fff3 	bl	9000dd38 <vPortExitCritical>
	taskENTER_CRITICAL();
9000ed52:	f7fe ffcf 	bl	9000dcf4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
9000ed56:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
9000ed5a:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
9000ed5c:	2d00      	cmp	r5, #0
9000ed5e:	dd10      	ble.n	9000ed82 <xQueueSemaphoreTake+0x1ca>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9000ed60:	f104 0810 	add.w	r8, r4, #16
9000ed64:	e003      	b.n	9000ed6e <xQueueSemaphoreTake+0x1b6>
				--cRxLock;
9000ed66:	1e6b      	subs	r3, r5, #1
9000ed68:	b2da      	uxtb	r2, r3
9000ed6a:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
9000ed6c:	b14a      	cbz	r2, 9000ed82 <xQueueSemaphoreTake+0x1ca>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
9000ed6e:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9000ed70:	4640      	mov	r0, r8
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
9000ed72:	b133      	cbz	r3, 9000ed82 <xQueueSemaphoreTake+0x1ca>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9000ed74:	f000 ff76 	bl	9000fc64 <xTaskRemoveFromEventList>
9000ed78:	2800      	cmp	r0, #0
9000ed7a:	d0f4      	beq.n	9000ed66 <xQueueSemaphoreTake+0x1ae>
					vTaskMissedYield();
9000ed7c:	f001 f810 	bl	9000fda0 <vTaskMissedYield>
9000ed80:	e7f1      	b.n	9000ed66 <xQueueSemaphoreTake+0x1ae>
		pxQueue->cRxLock = queueUNLOCKED;
9000ed82:	23ff      	movs	r3, #255	; 0xff
9000ed84:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
9000ed88:	f7fe ffd6 	bl	9000dd38 <vPortExitCritical>
				( void ) xTaskResumeAll();
9000ed8c:	f000 fe46 	bl	9000fa1c <xTaskResumeAll>
9000ed90:	e7d4      	b.n	9000ed3c <xQueueSemaphoreTake+0x184>
	taskEXIT_CRITICAL();
9000ed92:	f7fe ffd1 	bl	9000dd38 <vPortExitCritical>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
9000ed96:	6823      	ldr	r3, [r4, #0]
9000ed98:	2b00      	cmp	r3, #0
9000ed9a:	d062      	beq.n	9000ee62 <xQueueSemaphoreTake+0x2aa>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
9000ed9c:	9901      	ldr	r1, [sp, #4]
9000ed9e:	4630      	mov	r0, r6
9000eda0:	f000 fed2 	bl	9000fb48 <vTaskPlaceOnEventList>
	taskENTER_CRITICAL();
9000eda4:	f7fe ffa6 	bl	9000dcf4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
9000eda8:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
9000edac:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
9000edae:	2d00      	cmp	r5, #0
9000edb0:	dc04      	bgt.n	9000edbc <xQueueSemaphoreTake+0x204>
9000edb2:	e00d      	b.n	9000edd0 <xQueueSemaphoreTake+0x218>
			--cTxLock;
9000edb4:	1e6b      	subs	r3, r5, #1
9000edb6:	b2da      	uxtb	r2, r3
9000edb8:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
9000edba:	b14a      	cbz	r2, 9000edd0 <xQueueSemaphoreTake+0x218>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
9000edbc:	6a63      	ldr	r3, [r4, #36]	; 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
9000edbe:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
9000edc0:	b133      	cbz	r3, 9000edd0 <xQueueSemaphoreTake+0x218>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
9000edc2:	f000 ff4f 	bl	9000fc64 <xTaskRemoveFromEventList>
9000edc6:	2800      	cmp	r0, #0
9000edc8:	d0f4      	beq.n	9000edb4 <xQueueSemaphoreTake+0x1fc>
						vTaskMissedYield();
9000edca:	f000 ffe9 	bl	9000fda0 <vTaskMissedYield>
9000edce:	e7f1      	b.n	9000edb4 <xQueueSemaphoreTake+0x1fc>
		pxQueue->cTxLock = queueUNLOCKED;
9000edd0:	23ff      	movs	r3, #255	; 0xff
9000edd2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
9000edd6:	f7fe ffaf 	bl	9000dd38 <vPortExitCritical>
	taskENTER_CRITICAL();
9000edda:	f7fe ff8b 	bl	9000dcf4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
9000edde:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
9000ede2:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
9000ede4:	2d00      	cmp	r5, #0
9000ede6:	dd10      	ble.n	9000ee0a <xQueueSemaphoreTake+0x252>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9000ede8:	f104 0810 	add.w	r8, r4, #16
9000edec:	e003      	b.n	9000edf6 <xQueueSemaphoreTake+0x23e>
				--cRxLock;
9000edee:	1e6b      	subs	r3, r5, #1
9000edf0:	b2da      	uxtb	r2, r3
9000edf2:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
9000edf4:	b14a      	cbz	r2, 9000ee0a <xQueueSemaphoreTake+0x252>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
9000edf6:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9000edf8:	4640      	mov	r0, r8
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
9000edfa:	b133      	cbz	r3, 9000ee0a <xQueueSemaphoreTake+0x252>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9000edfc:	f000 ff32 	bl	9000fc64 <xTaskRemoveFromEventList>
9000ee00:	2800      	cmp	r0, #0
9000ee02:	d0f4      	beq.n	9000edee <xQueueSemaphoreTake+0x236>
					vTaskMissedYield();
9000ee04:	f000 ffcc 	bl	9000fda0 <vTaskMissedYield>
9000ee08:	e7f1      	b.n	9000edee <xQueueSemaphoreTake+0x236>
		pxQueue->cRxLock = queueUNLOCKED;
9000ee0a:	23ff      	movs	r3, #255	; 0xff
9000ee0c:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
9000ee10:	f7fe ff92 	bl	9000dd38 <vPortExitCritical>
				if( xTaskResumeAll() == pdFALSE )
9000ee14:	f000 fe02 	bl	9000fa1c <xTaskResumeAll>
9000ee18:	2800      	cmp	r0, #0
9000ee1a:	d18f      	bne.n	9000ed3c <xQueueSemaphoreTake+0x184>
					portYIELD_WITHIN_API();
9000ee1c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
9000ee20:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
9000ee24:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
9000ee28:	f3bf 8f4f 	dsb	sy
9000ee2c:	f3bf 8f6f 	isb	sy
9000ee30:	e784      	b.n	9000ed3c <xQueueSemaphoreTake+0x184>
	taskEXIT_CRITICAL();
9000ee32:	f7fe ff81 	bl	9000dd38 <vPortExitCritical>
					if( xInheritanceOccurred != pdFALSE )
9000ee36:	b92f      	cbnz	r7, 9000ee44 <xQueueSemaphoreTake+0x28c>
}
9000ee38:	4638      	mov	r0, r7
9000ee3a:	b004      	add	sp, #16
9000ee3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
9000ee40:	4607      	mov	r7, r0
9000ee42:	e6d1      	b.n	9000ebe8 <xQueueSemaphoreTake+0x30>
						taskENTER_CRITICAL();
9000ee44:	f7fe ff56 	bl	9000dcf4 <vPortEnterCritical>
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
9000ee48:	6a61      	ldr	r1, [r4, #36]	; 0x24
9000ee4a:	b119      	cbz	r1, 9000ee54 <xQueueSemaphoreTake+0x29c>
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
9000ee4c:	6b23      	ldr	r3, [r4, #48]	; 0x30
9000ee4e:	6819      	ldr	r1, [r3, #0]
9000ee50:	f1c1 0138 	rsb	r1, r1, #56	; 0x38
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
9000ee54:	68a0      	ldr	r0, [r4, #8]
				return errQUEUE_EMPTY;
9000ee56:	2700      	movs	r7, #0
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
9000ee58:	f001 f84a 	bl	9000fef0 <vTaskPriorityDisinheritAfterTimeout>
						taskEXIT_CRITICAL();
9000ee5c:	f7fe ff6c 	bl	9000dd38 <vPortExitCritical>
9000ee60:	e7ea      	b.n	9000ee38 <xQueueSemaphoreTake+0x280>
						taskENTER_CRITICAL();
9000ee62:	f7fe ff47 	bl	9000dcf4 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
9000ee66:	68a0      	ldr	r0, [r4, #8]
9000ee68:	f000 ffb6 	bl	9000fdd8 <xTaskPriorityInherit>
9000ee6c:	4607      	mov	r7, r0
						taskEXIT_CRITICAL();
9000ee6e:	f7fe ff63 	bl	9000dd38 <vPortExitCritical>
9000ee72:	e793      	b.n	9000ed9c <xQueueSemaphoreTake+0x1e4>
						configASSERT( xInheritanceOccurred == pdFALSE );
9000ee74:	2f00      	cmp	r7, #0
9000ee76:	d0f1      	beq.n	9000ee5c <xQueueSemaphoreTake+0x2a4>
9000ee78:	f04f 0350 	mov.w	r3, #80	; 0x50
9000ee7c:	f383 8811 	msr	BASEPRI, r3
9000ee80:	f3bf 8f6f 	isb	sy
9000ee84:	f3bf 8f4f 	dsb	sy
9000ee88:	e7fe      	b.n	9000ee88 <xQueueSemaphoreTake+0x2d0>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
9000ee8a:	3b01      	subs	r3, #1
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
9000ee8c:	6822      	ldr	r2, [r4, #0]
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
9000ee8e:	63a3      	str	r3, [r4, #56]	; 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
9000ee90:	b12a      	cbz	r2, 9000ee9e <xQueueSemaphoreTake+0x2e6>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
9000ee92:	6923      	ldr	r3, [r4, #16]
9000ee94:	b93b      	cbnz	r3, 9000eea6 <xQueueSemaphoreTake+0x2ee>
				return pdPASS;
9000ee96:	2701      	movs	r7, #1
				taskEXIT_CRITICAL();
9000ee98:	f7fe ff4e 	bl	9000dd38 <vPortExitCritical>
				return pdPASS;
9000ee9c:	e7cc      	b.n	9000ee38 <xQueueSemaphoreTake+0x280>
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
9000ee9e:	f001 f87b 	bl	9000ff98 <pvTaskIncrementMutexHeldCount>
9000eea2:	60a0      	str	r0, [r4, #8]
9000eea4:	e7f5      	b.n	9000ee92 <xQueueSemaphoreTake+0x2da>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9000eea6:	f104 0010 	add.w	r0, r4, #16
9000eeaa:	f000 fedb 	bl	9000fc64 <xTaskRemoveFromEventList>
9000eeae:	2800      	cmp	r0, #0
9000eeb0:	d0f1      	beq.n	9000ee96 <xQueueSemaphoreTake+0x2de>
						queueYIELD_IF_USING_PREEMPTION();
9000eeb2:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
9000eeb6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
9000eeba:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
9000eebe:	f3bf 8f4f 	dsb	sy
9000eec2:	f3bf 8f6f 	isb	sy
9000eec6:	e7e6      	b.n	9000ee96 <xQueueSemaphoreTake+0x2de>

9000eec8 <xQueueTakeMutexRecursive>:
		configASSERT( pxMutex );
9000eec8:	b1a8      	cbz	r0, 9000eef6 <xQueueTakeMutexRecursive+0x2e>
	{
9000eeca:	b570      	push	{r4, r5, r6, lr}
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
9000eecc:	6886      	ldr	r6, [r0, #8]
9000eece:	4604      	mov	r4, r0
9000eed0:	460d      	mov	r5, r1
9000eed2:	f000 ff6b 	bl	9000fdac <xTaskGetCurrentTaskHandle>
9000eed6:	4286      	cmp	r6, r0
9000eed8:	d008      	beq.n	9000eeec <xQueueTakeMutexRecursive+0x24>
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
9000eeda:	4629      	mov	r1, r5
9000eedc:	4620      	mov	r0, r4
9000eede:	f7ff fe6b 	bl	9000ebb8 <xQueueSemaphoreTake>
			if( xReturn != pdFAIL )
9000eee2:	b110      	cbz	r0, 9000eeea <xQueueTakeMutexRecursive+0x22>
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
9000eee4:	68e3      	ldr	r3, [r4, #12]
9000eee6:	3301      	adds	r3, #1
9000eee8:	60e3      	str	r3, [r4, #12]
	}
9000eeea:	bd70      	pop	{r4, r5, r6, pc}
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
9000eeec:	68e3      	ldr	r3, [r4, #12]
			xReturn = pdPASS;
9000eeee:	2001      	movs	r0, #1
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
9000eef0:	4403      	add	r3, r0
9000eef2:	60e3      	str	r3, [r4, #12]
	}
9000eef4:	bd70      	pop	{r4, r5, r6, pc}
9000eef6:	f04f 0350 	mov.w	r3, #80	; 0x50
9000eefa:	f383 8811 	msr	BASEPRI, r3
9000eefe:	f3bf 8f6f 	isb	sy
9000ef02:	f3bf 8f4f 	dsb	sy
		configASSERT( pxMutex );
9000ef06:	e7fe      	b.n	9000ef06 <xQueueTakeMutexRecursive+0x3e>

9000ef08 <xQueueReceiveFromISR>:
{
9000ef08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
9000ef0c:	b310      	cbz	r0, 9000ef54 <xQueueReceiveFromISR+0x4c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
9000ef0e:	460e      	mov	r6, r1
9000ef10:	4604      	mov	r4, r0
9000ef12:	4617      	mov	r7, r2
9000ef14:	b191      	cbz	r1, 9000ef3c <xQueueReceiveFromISR+0x34>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
9000ef16:	f7ff f81f 	bl	9000df58 <vPortValidateInterruptPriority>
	__asm volatile
9000ef1a:	f3ef 8911 	mrs	r9, BASEPRI
9000ef1e:	f04f 0350 	mov.w	r3, #80	; 0x50
9000ef22:	f383 8811 	msr	BASEPRI, r3
9000ef26:	f3bf 8f6f 	isb	sy
9000ef2a:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
9000ef2e:	6ba5      	ldr	r5, [r4, #56]	; 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
9000ef30:	b9cd      	cbnz	r5, 9000ef66 <xQueueReceiveFromISR+0x5e>
			xReturn = pdFAIL;
9000ef32:	4628      	mov	r0, r5
	__asm volatile
9000ef34:	f389 8811 	msr	BASEPRI, r9
}
9000ef38:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
9000ef3c:	6c03      	ldr	r3, [r0, #64]	; 0x40
9000ef3e:	2b00      	cmp	r3, #0
9000ef40:	d0e9      	beq.n	9000ef16 <xQueueReceiveFromISR+0xe>
	__asm volatile
9000ef42:	f04f 0350 	mov.w	r3, #80	; 0x50
9000ef46:	f383 8811 	msr	BASEPRI, r3
9000ef4a:	f3bf 8f6f 	isb	sy
9000ef4e:	f3bf 8f4f 	dsb	sy
9000ef52:	e7fe      	b.n	9000ef52 <xQueueReceiveFromISR+0x4a>
9000ef54:	f04f 0350 	mov.w	r3, #80	; 0x50
9000ef58:	f383 8811 	msr	BASEPRI, r3
9000ef5c:	f3bf 8f6f 	isb	sy
9000ef60:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
9000ef64:	e7fe      	b.n	9000ef64 <xQueueReceiveFromISR+0x5c>
			const int8_t cRxLock = pxQueue->cRxLock;
9000ef66:	f894 8044 	ldrb.w	r8, [r4, #68]	; 0x44
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
9000ef6a:	6c22      	ldr	r2, [r4, #64]	; 0x40
			const int8_t cRxLock = pxQueue->cRxLock;
9000ef6c:	fa4f f888 	sxtb.w	r8, r8
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
9000ef70:	b142      	cbz	r2, 9000ef84 <xQueueReceiveFromISR+0x7c>
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
9000ef72:	68e1      	ldr	r1, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
9000ef74:	68a3      	ldr	r3, [r4, #8]
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
9000ef76:	4411      	add	r1, r2
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
9000ef78:	4299      	cmp	r1, r3
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
9000ef7a:	60e1      	str	r1, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
9000ef7c:	d215      	bcs.n	9000efaa <xQueueReceiveFromISR+0xa2>
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
9000ef7e:	4630      	mov	r0, r6
9000ef80:	f014 fad9 	bl	90023536 <memcpy>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
9000ef84:	3d01      	subs	r5, #1
			if( cRxLock == queueUNLOCKED )
9000ef86:	f1b8 3fff 	cmp.w	r8, #4294967295
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
9000ef8a:	63a5      	str	r5, [r4, #56]	; 0x38
			if( cRxLock == queueUNLOCKED )
9000ef8c:	d009      	beq.n	9000efa2 <xQueueReceiveFromISR+0x9a>
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
9000ef8e:	f108 0301 	add.w	r3, r8, #1
			xReturn = pdPASS;
9000ef92:	2001      	movs	r0, #1
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
9000ef94:	b25b      	sxtb	r3, r3
9000ef96:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	__asm volatile
9000ef9a:	f389 8811 	msr	BASEPRI, r9
}
9000ef9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
9000efa2:	6923      	ldr	r3, [r4, #16]
9000efa4:	b923      	cbnz	r3, 9000efb0 <xQueueReceiveFromISR+0xa8>
			xReturn = pdPASS;
9000efa6:	2001      	movs	r0, #1
9000efa8:	e7c4      	b.n	9000ef34 <xQueueReceiveFromISR+0x2c>
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
9000efaa:	6821      	ldr	r1, [r4, #0]
9000efac:	60e1      	str	r1, [r4, #12]
9000efae:	e7e6      	b.n	9000ef7e <xQueueReceiveFromISR+0x76>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9000efb0:	f104 0010 	add.w	r0, r4, #16
9000efb4:	f000 fe56 	bl	9000fc64 <xTaskRemoveFromEventList>
						if( pxHigherPriorityTaskWoken != NULL )
9000efb8:	2f00      	cmp	r7, #0
9000efba:	d0f4      	beq.n	9000efa6 <xQueueReceiveFromISR+0x9e>
9000efbc:	2800      	cmp	r0, #0
9000efbe:	d0f2      	beq.n	9000efa6 <xQueueReceiveFromISR+0x9e>
							*pxHigherPriorityTaskWoken = pdTRUE;
9000efc0:	2301      	movs	r3, #1
			xReturn = pdPASS;
9000efc2:	4618      	mov	r0, r3
							*pxHigherPriorityTaskWoken = pdTRUE;
9000efc4:	603b      	str	r3, [r7, #0]
9000efc6:	e7b5      	b.n	9000ef34 <xQueueReceiveFromISR+0x2c>

9000efc8 <vQueueDelete>:
	configASSERT( pxQueue );
9000efc8:	b1e0      	cbz	r0, 9000f004 <vQueueDelete+0x3c>

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
9000efca:	4b21      	ldr	r3, [pc, #132]	; (9000f050 <vQueueDelete+0x88>)
9000efcc:	685a      	ldr	r2, [r3, #4]
9000efce:	4290      	cmp	r0, r2
9000efd0:	d02b      	beq.n	9000f02a <vQueueDelete+0x62>
9000efd2:	68da      	ldr	r2, [r3, #12]
9000efd4:	4290      	cmp	r0, r2
9000efd6:	d02a      	beq.n	9000f02e <vQueueDelete+0x66>
9000efd8:	695a      	ldr	r2, [r3, #20]
9000efda:	4290      	cmp	r0, r2
9000efdc:	d029      	beq.n	9000f032 <vQueueDelete+0x6a>
9000efde:	69da      	ldr	r2, [r3, #28]
9000efe0:	4290      	cmp	r0, r2
9000efe2:	d028      	beq.n	9000f036 <vQueueDelete+0x6e>
9000efe4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
9000efe6:	4290      	cmp	r0, r2
9000efe8:	d027      	beq.n	9000f03a <vQueueDelete+0x72>
9000efea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
9000efec:	4290      	cmp	r0, r2
9000efee:	d014      	beq.n	9000f01a <vQueueDelete+0x52>
9000eff0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
9000eff2:	4290      	cmp	r0, r2
9000eff4:	d023      	beq.n	9000f03e <vQueueDelete+0x76>
9000eff6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
9000eff8:	4290      	cmp	r0, r2
9000effa:	d022      	beq.n	9000f042 <vQueueDelete+0x7a>
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
9000effc:	f890 3046 	ldrb.w	r3, [r0, #70]	; 0x46
9000f000:	b14b      	cbz	r3, 9000f016 <vQueueDelete+0x4e>
}
9000f002:	4770      	bx	lr
	__asm volatile
9000f004:	f04f 0350 	mov.w	r3, #80	; 0x50
9000f008:	f383 8811 	msr	BASEPRI, r3
9000f00c:	f3bf 8f6f 	isb	sy
9000f010:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
9000f014:	e7fe      	b.n	9000f014 <vQueueDelete+0x4c>
			vPortFree( pxQueue );
9000f016:	f7fe bd4f 	b.w	9000dab8 <vPortFree>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
9000f01a:	2205      	movs	r2, #5
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
9000f01c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
9000f020:	ed9f 7b09 	vldr	d7, [pc, #36]	; 9000f048 <vQueueDelete+0x80>
9000f024:	ed83 7b00 	vstr	d7, [r3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
				break;
9000f028:	e7e8      	b.n	9000effc <vQueueDelete+0x34>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
9000f02a:	2200      	movs	r2, #0
9000f02c:	e7f6      	b.n	9000f01c <vQueueDelete+0x54>
9000f02e:	2201      	movs	r2, #1
9000f030:	e7f4      	b.n	9000f01c <vQueueDelete+0x54>
9000f032:	2202      	movs	r2, #2
9000f034:	e7f2      	b.n	9000f01c <vQueueDelete+0x54>
9000f036:	2203      	movs	r2, #3
9000f038:	e7f0      	b.n	9000f01c <vQueueDelete+0x54>
9000f03a:	2204      	movs	r2, #4
9000f03c:	e7ee      	b.n	9000f01c <vQueueDelete+0x54>
9000f03e:	2206      	movs	r2, #6
9000f040:	e7ec      	b.n	9000f01c <vQueueDelete+0x54>
9000f042:	2207      	movs	r2, #7
9000f044:	e7ea      	b.n	9000f01c <vQueueDelete+0x54>
9000f046:	bf00      	nop
	...
9000f050:	24024bb0 	.word	0x24024bb0

9000f054 <vQueueAddToRegistry>:
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
9000f054:	4b12      	ldr	r3, [pc, #72]	; (9000f0a0 <vQueueAddToRegistry+0x4c>)
9000f056:	681a      	ldr	r2, [r3, #0]
9000f058:	b17a      	cbz	r2, 9000f07a <vQueueAddToRegistry+0x26>
9000f05a:	689a      	ldr	r2, [r3, #8]
9000f05c:	b162      	cbz	r2, 9000f078 <vQueueAddToRegistry+0x24>
9000f05e:	691a      	ldr	r2, [r3, #16]
9000f060:	b192      	cbz	r2, 9000f088 <vQueueAddToRegistry+0x34>
9000f062:	699a      	ldr	r2, [r3, #24]
9000f064:	b192      	cbz	r2, 9000f08c <vQueueAddToRegistry+0x38>
9000f066:	6a1a      	ldr	r2, [r3, #32]
9000f068:	b192      	cbz	r2, 9000f090 <vQueueAddToRegistry+0x3c>
9000f06a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
9000f06c:	b192      	cbz	r2, 9000f094 <vQueueAddToRegistry+0x40>
9000f06e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
9000f070:	b192      	cbz	r2, 9000f098 <vQueueAddToRegistry+0x44>
9000f072:	6b9a      	ldr	r2, [r3, #56]	; 0x38
9000f074:	b192      	cbz	r2, 9000f09c <vQueueAddToRegistry+0x48>
	}
9000f076:	4770      	bx	lr
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
9000f078:	2201      	movs	r2, #1
				xQueueRegistry[ ux ].xHandle = xQueue;
9000f07a:	eb03 0cc2 	add.w	ip, r3, r2, lsl #3
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
9000f07e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
9000f082:	f8cc 0004 	str.w	r0, [ip, #4]
	}
9000f086:	4770      	bx	lr
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
9000f088:	2202      	movs	r2, #2
9000f08a:	e7f6      	b.n	9000f07a <vQueueAddToRegistry+0x26>
9000f08c:	2203      	movs	r2, #3
9000f08e:	e7f4      	b.n	9000f07a <vQueueAddToRegistry+0x26>
9000f090:	2204      	movs	r2, #4
9000f092:	e7f2      	b.n	9000f07a <vQueueAddToRegistry+0x26>
9000f094:	2205      	movs	r2, #5
9000f096:	e7f0      	b.n	9000f07a <vQueueAddToRegistry+0x26>
9000f098:	2206      	movs	r2, #6
9000f09a:	e7ee      	b.n	9000f07a <vQueueAddToRegistry+0x26>
9000f09c:	2207      	movs	r2, #7
9000f09e:	e7ec      	b.n	9000f07a <vQueueAddToRegistry+0x26>
9000f0a0:	24024bb0 	.word	0x24024bb0

9000f0a4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
9000f0a4:	b570      	push	{r4, r5, r6, lr}
9000f0a6:	4605      	mov	r5, r0
9000f0a8:	460e      	mov	r6, r1
9000f0aa:	4614      	mov	r4, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
9000f0ac:	f7fe fe22 	bl	9000dcf4 <vPortEnterCritical>
9000f0b0:	f895 3044 	ldrb.w	r3, [r5, #68]	; 0x44
9000f0b4:	2bff      	cmp	r3, #255	; 0xff
9000f0b6:	d102      	bne.n	9000f0be <vQueueWaitForMessageRestricted+0x1a>
9000f0b8:	2300      	movs	r3, #0
9000f0ba:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
9000f0be:	f895 3045 	ldrb.w	r3, [r5, #69]	; 0x45
9000f0c2:	2bff      	cmp	r3, #255	; 0xff
9000f0c4:	d102      	bne.n	9000f0cc <vQueueWaitForMessageRestricted+0x28>
9000f0c6:	2300      	movs	r3, #0
9000f0c8:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
9000f0cc:	f7fe fe34 	bl	9000dd38 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
9000f0d0:	6bab      	ldr	r3, [r5, #56]	; 0x38
9000f0d2:	2b00      	cmp	r3, #0
9000f0d4:	d043      	beq.n	9000f15e <vQueueWaitForMessageRestricted+0xba>
	taskENTER_CRITICAL();
9000f0d6:	f7fe fe0d 	bl	9000dcf4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
9000f0da:	f895 3045 	ldrb.w	r3, [r5, #69]	; 0x45
9000f0de:	b25c      	sxtb	r4, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
9000f0e0:	2c00      	cmp	r4, #0
9000f0e2:	dd14      	ble.n	9000f10e <vQueueWaitForMessageRestricted+0x6a>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
9000f0e4:	f105 0624 	add.w	r6, r5, #36	; 0x24
9000f0e8:	e003      	b.n	9000f0f2 <vQueueWaitForMessageRestricted+0x4e>
			--cTxLock;
9000f0ea:	1e63      	subs	r3, r4, #1
9000f0ec:	b2da      	uxtb	r2, r3
9000f0ee:	b25c      	sxtb	r4, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
9000f0f0:	b16a      	cbz	r2, 9000f10e <vQueueWaitForMessageRestricted+0x6a>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
9000f0f2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
9000f0f4:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
9000f0f6:	b153      	cbz	r3, 9000f10e <vQueueWaitForMessageRestricted+0x6a>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
9000f0f8:	f000 fdb4 	bl	9000fc64 <xTaskRemoveFromEventList>
9000f0fc:	2800      	cmp	r0, #0
9000f0fe:	d0f4      	beq.n	9000f0ea <vQueueWaitForMessageRestricted+0x46>
						vTaskMissedYield();
9000f100:	f000 fe4e 	bl	9000fda0 <vTaskMissedYield>
			--cTxLock;
9000f104:	1e63      	subs	r3, r4, #1
9000f106:	b2da      	uxtb	r2, r3
9000f108:	b25c      	sxtb	r4, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
9000f10a:	2a00      	cmp	r2, #0
9000f10c:	d1f1      	bne.n	9000f0f2 <vQueueWaitForMessageRestricted+0x4e>
		pxQueue->cTxLock = queueUNLOCKED;
9000f10e:	23ff      	movs	r3, #255	; 0xff
9000f110:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
	taskEXIT_CRITICAL();
9000f114:	f7fe fe10 	bl	9000dd38 <vPortExitCritical>
	taskENTER_CRITICAL();
9000f118:	f7fe fdec 	bl	9000dcf4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
9000f11c:	f895 3044 	ldrb.w	r3, [r5, #68]	; 0x44
9000f120:	b25c      	sxtb	r4, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
9000f122:	2c00      	cmp	r4, #0
9000f124:	dd14      	ble.n	9000f150 <vQueueWaitForMessageRestricted+0xac>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9000f126:	f105 0610 	add.w	r6, r5, #16
9000f12a:	e003      	b.n	9000f134 <vQueueWaitForMessageRestricted+0x90>
				--cRxLock;
9000f12c:	1e63      	subs	r3, r4, #1
9000f12e:	b2da      	uxtb	r2, r3
9000f130:	b25c      	sxtb	r4, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
9000f132:	b16a      	cbz	r2, 9000f150 <vQueueWaitForMessageRestricted+0xac>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
9000f134:	692b      	ldr	r3, [r5, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9000f136:	4630      	mov	r0, r6
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
9000f138:	b153      	cbz	r3, 9000f150 <vQueueWaitForMessageRestricted+0xac>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9000f13a:	f000 fd93 	bl	9000fc64 <xTaskRemoveFromEventList>
9000f13e:	2800      	cmp	r0, #0
9000f140:	d0f4      	beq.n	9000f12c <vQueueWaitForMessageRestricted+0x88>
					vTaskMissedYield();
9000f142:	f000 fe2d 	bl	9000fda0 <vTaskMissedYield>
				--cRxLock;
9000f146:	1e63      	subs	r3, r4, #1
9000f148:	b2da      	uxtb	r2, r3
9000f14a:	b25c      	sxtb	r4, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
9000f14c:	2a00      	cmp	r2, #0
9000f14e:	d1f1      	bne.n	9000f134 <vQueueWaitForMessageRestricted+0x90>
		pxQueue->cRxLock = queueUNLOCKED;
9000f150:	23ff      	movs	r3, #255	; 0xff
9000f152:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
	}
9000f156:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
9000f15a:	f7fe bded 	b.w	9000dd38 <vPortExitCritical>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
9000f15e:	4622      	mov	r2, r4
9000f160:	4631      	mov	r1, r6
9000f162:	f105 0024 	add.w	r0, r5, #36	; 0x24
9000f166:	f000 fd33 	bl	9000fbd0 <vTaskPlaceOnEventListRestricted>
9000f16a:	e7b4      	b.n	9000f0d6 <vQueueWaitForMessageRestricted+0x32>

9000f16c <prvAddNewTaskToReadyList>:
	}
}
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
9000f16c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
9000f170:	4605      	mov	r5, r0
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
9000f172:	f7fe fdbf 	bl	9000dcf4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
9000f176:	4a34      	ldr	r2, [pc, #208]	; (9000f248 <prvAddNewTaskToReadyList+0xdc>)
		if( pxCurrentTCB == NULL )
9000f178:	4e34      	ldr	r6, [pc, #208]	; (9000f24c <prvAddNewTaskToReadyList+0xe0>)
		uxCurrentNumberOfTasks++;
9000f17a:	6813      	ldr	r3, [r2, #0]
9000f17c:	3301      	adds	r3, #1
9000f17e:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
9000f180:	6833      	ldr	r3, [r6, #0]
9000f182:	2b00      	cmp	r3, #0
9000f184:	d032      	beq.n	9000f1ec <prvAddNewTaskToReadyList+0x80>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
9000f186:	4c32      	ldr	r4, [pc, #200]	; (9000f250 <prvAddNewTaskToReadyList+0xe4>)
9000f188:	6823      	ldr	r3, [r4, #0]
9000f18a:	b33b      	cbz	r3, 9000f1dc <prvAddNewTaskToReadyList+0x70>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
9000f18c:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
9000f18e:	4f31      	ldr	r7, [pc, #196]	; (9000f254 <prvAddNewTaskToReadyList+0xe8>)
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
9000f190:	4a31      	ldr	r2, [pc, #196]	; (9000f258 <prvAddNewTaskToReadyList+0xec>)
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
9000f192:	4932      	ldr	r1, [pc, #200]	; (9000f25c <prvAddNewTaskToReadyList+0xf0>)
		uxTaskNumber++;
9000f194:	6813      	ldr	r3, [r2, #0]
9000f196:	3301      	adds	r3, #1
9000f198:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
9000f19a:	646b      	str	r3, [r5, #68]	; 0x44
		prvAddTaskToReadyList( pxNewTCB );
9000f19c:	680b      	ldr	r3, [r1, #0]
9000f19e:	4283      	cmp	r3, r0
9000f1a0:	d200      	bcs.n	9000f1a4 <prvAddNewTaskToReadyList+0x38>
9000f1a2:	6008      	str	r0, [r1, #0]
9000f1a4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
9000f1a8:	1d29      	adds	r1, r5, #4
9000f1aa:	eb07 0080 	add.w	r0, r7, r0, lsl #2
9000f1ae:	f7fe fcf7 	bl	9000dba0 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
9000f1b2:	f7fe fdc1 	bl	9000dd38 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
9000f1b6:	6823      	ldr	r3, [r4, #0]
9000f1b8:	b173      	cbz	r3, 9000f1d8 <prvAddNewTaskToReadyList+0x6c>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
9000f1ba:	6832      	ldr	r2, [r6, #0]
9000f1bc:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
9000f1be:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
9000f1c0:	429a      	cmp	r2, r3
9000f1c2:	d209      	bcs.n	9000f1d8 <prvAddNewTaskToReadyList+0x6c>
		{
			taskYIELD_IF_USING_PREEMPTION();
9000f1c4:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
9000f1c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
9000f1cc:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
9000f1d0:	f3bf 8f4f 	dsb	sy
9000f1d4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
9000f1d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
9000f1dc:	6833      	ldr	r3, [r6, #0]
9000f1de:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
9000f1e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9000f1e2:	4f1c      	ldr	r7, [pc, #112]	; (9000f254 <prvAddNewTaskToReadyList+0xe8>)
9000f1e4:	4283      	cmp	r3, r0
9000f1e6:	d8d3      	bhi.n	9000f190 <prvAddNewTaskToReadyList+0x24>
					pxCurrentTCB = pxNewTCB;
9000f1e8:	6035      	str	r5, [r6, #0]
9000f1ea:	e7d1      	b.n	9000f190 <prvAddNewTaskToReadyList+0x24>
			pxCurrentTCB = pxNewTCB;
9000f1ec:	6035      	str	r5, [r6, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
9000f1ee:	6813      	ldr	r3, [r2, #0]
9000f1f0:	2b01      	cmp	r3, #1
9000f1f2:	d003      	beq.n	9000f1fc <prvAddNewTaskToReadyList+0x90>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
9000f1f4:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
9000f1f6:	4f17      	ldr	r7, [pc, #92]	; (9000f254 <prvAddNewTaskToReadyList+0xe8>)
9000f1f8:	4c15      	ldr	r4, [pc, #84]	; (9000f250 <prvAddNewTaskToReadyList+0xe4>)
9000f1fa:	e7c9      	b.n	9000f190 <prvAddNewTaskToReadyList+0x24>
9000f1fc:	4f15      	ldr	r7, [pc, #84]	; (9000f254 <prvAddNewTaskToReadyList+0xe8>)
9000f1fe:	463c      	mov	r4, r7
9000f200:	f507 688c 	add.w	r8, r7, #1120	; 0x460
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
9000f204:	4620      	mov	r0, r4
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
9000f206:	3414      	adds	r4, #20
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
9000f208:	f7fe fcba 	bl	9000db80 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
9000f20c:	45a0      	cmp	r8, r4
9000f20e:	d1f9      	bne.n	9000f204 <prvAddNewTaskToReadyList+0x98>
	}

	vListInitialise( &xDelayedTaskList1 );
9000f210:	f8df 9060 	ldr.w	r9, [pc, #96]	; 9000f274 <prvAddNewTaskToReadyList+0x108>
	vListInitialise( &xDelayedTaskList2 );
9000f214:	f8df 8060 	ldr.w	r8, [pc, #96]	; 9000f278 <prvAddNewTaskToReadyList+0x10c>
	vListInitialise( &xDelayedTaskList1 );
9000f218:	4648      	mov	r0, r9
9000f21a:	4c0d      	ldr	r4, [pc, #52]	; (9000f250 <prvAddNewTaskToReadyList+0xe4>)
9000f21c:	f7fe fcb0 	bl	9000db80 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
9000f220:	4640      	mov	r0, r8
9000f222:	f7fe fcad 	bl	9000db80 <vListInitialise>
	vListInitialise( &xPendingReadyList );
9000f226:	480e      	ldr	r0, [pc, #56]	; (9000f260 <prvAddNewTaskToReadyList+0xf4>)
9000f228:	f7fe fcaa 	bl	9000db80 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
9000f22c:	480d      	ldr	r0, [pc, #52]	; (9000f264 <prvAddNewTaskToReadyList+0xf8>)
9000f22e:	f7fe fca7 	bl	9000db80 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
9000f232:	480d      	ldr	r0, [pc, #52]	; (9000f268 <prvAddNewTaskToReadyList+0xfc>)
9000f234:	f7fe fca4 	bl	9000db80 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
9000f238:	4b0c      	ldr	r3, [pc, #48]	; (9000f26c <prvAddNewTaskToReadyList+0x100>)
		prvAddTaskToReadyList( pxNewTCB );
9000f23a:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
	pxDelayedTaskList = &xDelayedTaskList1;
9000f23c:	f8c3 9000 	str.w	r9, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
9000f240:	4b0b      	ldr	r3, [pc, #44]	; (9000f270 <prvAddNewTaskToReadyList+0x104>)
9000f242:	f8c3 8000 	str.w	r8, [r3]
}
9000f246:	e7a3      	b.n	9000f190 <prvAddNewTaskToReadyList+0x24>
9000f248:	2402505c 	.word	0x2402505c
9000f24c:	24024bf0 	.word	0x24024bf0
9000f250:	240250b8 	.word	0x240250b8
9000f254:	24024bfc 	.word	0x24024bfc
9000f258:	24025068 	.word	0x24025068
9000f25c:	2402506c 	.word	0x2402506c
9000f260:	240250a4 	.word	0x240250a4
9000f264:	240250d0 	.word	0x240250d0
9000f268:	240250bc 	.word	0x240250bc
9000f26c:	24024bf4 	.word	0x24024bf4
9000f270:	24024bf8 	.word	0x24024bf8
9000f274:	24025070 	.word	0x24025070
9000f278:	24025084 	.word	0x24025084

9000f27c <prvIdleTask>:
{
9000f27c:	b580      	push	{r7, lr}
9000f27e:	4c22      	ldr	r4, [pc, #136]	; (9000f308 <prvIdleTask+0x8c>)
				taskYIELD();
9000f280:	f04f 29e0 	mov.w	r9, #3758153728	; 0xe000e000
9000f284:	4e21      	ldr	r6, [pc, #132]	; (9000f30c <prvIdleTask+0x90>)
9000f286:	f04f 5880 	mov.w	r8, #268435456	; 0x10000000
9000f28a:	4d21      	ldr	r5, [pc, #132]	; (9000f310 <prvIdleTask+0x94>)
9000f28c:	4f21      	ldr	r7, [pc, #132]	; (9000f314 <prvIdleTask+0x98>)
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
9000f28e:	6823      	ldr	r3, [r4, #0]
9000f290:	b353      	cbz	r3, 9000f2e8 <prvIdleTask+0x6c>
		{
			taskENTER_CRITICAL();
9000f292:	f7fe fd2f 	bl	9000dcf4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
9000f296:	68f3      	ldr	r3, [r6, #12]
9000f298:	f8d3 a00c 	ldr.w	sl, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
9000f29c:	f10a 0004 	add.w	r0, sl, #4
9000f2a0:	f7fe fca6 	bl	9000dbf0 <uxListRemove>
				--uxCurrentNumberOfTasks;
9000f2a4:	682b      	ldr	r3, [r5, #0]
9000f2a6:	3b01      	subs	r3, #1
9000f2a8:	602b      	str	r3, [r5, #0]
				--uxDeletedTasksWaitingCleanUp;
9000f2aa:	6823      	ldr	r3, [r4, #0]
9000f2ac:	3b01      	subs	r3, #1
9000f2ae:	6023      	str	r3, [r4, #0]
			}
			taskEXIT_CRITICAL();
9000f2b0:	f7fe fd42 	bl	9000dd38 <vPortExitCritical>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
9000f2b4:	f89a 305d 	ldrb.w	r3, [sl, #93]	; 0x5d
9000f2b8:	b163      	cbz	r3, 9000f2d4 <prvIdleTask+0x58>
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
				vPortFree( pxTCB );
			}
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
9000f2ba:	2b01      	cmp	r3, #1
9000f2bc:	d020      	beq.n	9000f300 <prvIdleTask+0x84>
			}
			else
			{
				/* Neither the stack nor the TCB were allocated dynamically, so
				nothing needs to be freed. */
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
9000f2be:	2b02      	cmp	r3, #2
9000f2c0:	d0e5      	beq.n	9000f28e <prvIdleTask+0x12>
9000f2c2:	f04f 0350 	mov.w	r3, #80	; 0x50
9000f2c6:	f383 8811 	msr	BASEPRI, r3
9000f2ca:	f3bf 8f6f 	isb	sy
9000f2ce:	f3bf 8f4f 	dsb	sy
9000f2d2:	e7fe      	b.n	9000f2d2 <prvIdleTask+0x56>
				vPortFree( pxTCB->pxStack );
9000f2d4:	f8da 0030 	ldr.w	r0, [sl, #48]	; 0x30
9000f2d8:	f7fe fbee 	bl	9000dab8 <vPortFree>
				vPortFree( pxTCB );
9000f2dc:	4650      	mov	r0, sl
9000f2de:	f7fe fbeb 	bl	9000dab8 <vPortFree>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
9000f2e2:	6823      	ldr	r3, [r4, #0]
9000f2e4:	2b00      	cmp	r3, #0
9000f2e6:	d1d4      	bne.n	9000f292 <prvIdleTask+0x16>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
9000f2e8:	683b      	ldr	r3, [r7, #0]
9000f2ea:	2b01      	cmp	r3, #1
9000f2ec:	d905      	bls.n	9000f2fa <prvIdleTask+0x7e>
				taskYIELD();
9000f2ee:	f8c9 8d04 	str.w	r8, [r9, #3332]	; 0xd04
9000f2f2:	f3bf 8f4f 	dsb	sy
9000f2f6:	f3bf 8f6f 	isb	sy
			vApplicationIdleHook();
9000f2fa:	f7f4 fe55 	bl	90003fa8 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
9000f2fe:	e7c6      	b.n	9000f28e <prvIdleTask+0x12>
				vPortFree( pxTCB );
9000f300:	4650      	mov	r0, sl
9000f302:	f7fe fbd9 	bl	9000dab8 <vPortFree>
9000f306:	e7c2      	b.n	9000f28e <prvIdleTask+0x12>
9000f308:	24025060 	.word	0x24025060
9000f30c:	240250d0 	.word	0x240250d0
9000f310:	2402505c 	.word	0x2402505c
9000f314:	24024bfc 	.word	0x24024bfc

9000f318 <xTaskIncrementTick.part.0>:
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
9000f318:	4b4a      	ldr	r3, [pc, #296]	; (9000f444 <xTaskIncrementTick.part.0+0x12c>)
BaseType_t xTaskIncrementTick( void )
9000f31a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
9000f31e:	681e      	ldr	r6, [r3, #0]
BaseType_t xTaskIncrementTick( void )
9000f320:	b083      	sub	sp, #12
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
9000f322:	3601      	adds	r6, #1
		xTickCount = xConstTickCount;
9000f324:	601e      	str	r6, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
9000f326:	2e00      	cmp	r6, #0
9000f328:	d040      	beq.n	9000f3ac <xTaskIncrementTick.part.0+0x94>
9000f32a:	f8df b12c 	ldr.w	fp, [pc, #300]	; 9000f458 <xTaskIncrementTick.part.0+0x140>
		if( xConstTickCount >= xNextTaskUnblockTime )
9000f32e:	f8db 3000 	ldr.w	r3, [fp]
9000f332:	429e      	cmp	r6, r3
9000f334:	d347      	bcc.n	9000f3c6 <xTaskIncrementTick.part.0+0xae>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
9000f336:	4f44      	ldr	r7, [pc, #272]	; (9000f448 <xTaskIncrementTick.part.0+0x130>)
9000f338:	683b      	ldr	r3, [r7, #0]
9000f33a:	681d      	ldr	r5, [r3, #0]
9000f33c:	2d00      	cmp	r5, #0
9000f33e:	d077      	beq.n	9000f430 <xTaskIncrementTick.part.0+0x118>
BaseType_t xSwitchRequired = pdFALSE;
9000f340:	2500      	movs	r5, #0
9000f342:	f8df 9118 	ldr.w	r9, [pc, #280]	; 9000f45c <xTaskIncrementTick.part.0+0x144>
9000f346:	f8df a118 	ldr.w	sl, [pc, #280]	; 9000f460 <xTaskIncrementTick.part.0+0x148>
					prvAddTaskToReadyList( pxTCB );
9000f34a:	f8df 8118 	ldr.w	r8, [pc, #280]	; 9000f464 <xTaskIncrementTick.part.0+0x14c>
9000f34e:	e022      	b.n	9000f396 <xTaskIncrementTick.part.0+0x7e>
9000f350:	9101      	str	r1, [sp, #4]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
9000f352:	f7fe fc4d 	bl	9000dbf0 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
9000f356:	6aa3      	ldr	r3, [r4, #40]	; 0x28
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
9000f358:	f104 0018 	add.w	r0, r4, #24
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
9000f35c:	9901      	ldr	r1, [sp, #4]
9000f35e:	b113      	cbz	r3, 9000f366 <xTaskIncrementTick.part.0+0x4e>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
9000f360:	f7fe fc46 	bl	9000dbf0 <uxListRemove>
9000f364:	9901      	ldr	r1, [sp, #4]
					prvAddTaskToReadyList( pxTCB );
9000f366:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
9000f368:	f8d8 2000 	ldr.w	r2, [r8]
9000f36c:	eb03 0083 	add.w	r0, r3, r3, lsl #2
9000f370:	4293      	cmp	r3, r2
9000f372:	eb09 0080 	add.w	r0, r9, r0, lsl #2
9000f376:	d901      	bls.n	9000f37c <xTaskIncrementTick.part.0+0x64>
9000f378:	f8c8 3000 	str.w	r3, [r8]
9000f37c:	f7fe fc10 	bl	9000dba0 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
9000f380:	f8da 2000 	ldr.w	r2, [sl]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
9000f384:	683b      	ldr	r3, [r7, #0]
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
9000f386:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
9000f388:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
9000f38a:	681b      	ldr	r3, [r3, #0]
							xSwitchRequired = pdTRUE;
9000f38c:	4291      	cmp	r1, r2
9000f38e:	bf28      	it	cs
9000f390:	2501      	movcs	r5, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
9000f392:	2b00      	cmp	r3, #0
9000f394:	d050      	beq.n	9000f438 <xTaskIncrementTick.part.0+0x120>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
9000f396:	683b      	ldr	r3, [r7, #0]
9000f398:	68db      	ldr	r3, [r3, #12]
9000f39a:	68dc      	ldr	r4, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
9000f39c:	6863      	ldr	r3, [r4, #4]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
9000f39e:	1d21      	adds	r1, r4, #4
					if( xConstTickCount < xItemValue )
9000f3a0:	429e      	cmp	r6, r3
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
9000f3a2:	4608      	mov	r0, r1
					if( xConstTickCount < xItemValue )
9000f3a4:	d2d4      	bcs.n	9000f350 <xTaskIncrementTick.part.0+0x38>
						xNextTaskUnblockTime = xItemValue;
9000f3a6:	f8cb 3000 	str.w	r3, [fp]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
9000f3aa:	e011      	b.n	9000f3d0 <xTaskIncrementTick.part.0+0xb8>
			taskSWITCH_DELAYED_LISTS();
9000f3ac:	4b26      	ldr	r3, [pc, #152]	; (9000f448 <xTaskIncrementTick.part.0+0x130>)
9000f3ae:	681a      	ldr	r2, [r3, #0]
9000f3b0:	6812      	ldr	r2, [r2, #0]
9000f3b2:	b30a      	cbz	r2, 9000f3f8 <xTaskIncrementTick.part.0+0xe0>
9000f3b4:	f04f 0350 	mov.w	r3, #80	; 0x50
9000f3b8:	f383 8811 	msr	BASEPRI, r3
9000f3bc:	f3bf 8f6f 	isb	sy
9000f3c0:	f3bf 8f4f 	dsb	sy
9000f3c4:	e7fe      	b.n	9000f3c4 <xTaskIncrementTick.part.0+0xac>
BaseType_t xSwitchRequired = pdFALSE;
9000f3c6:	2500      	movs	r5, #0
9000f3c8:	f8df 9090 	ldr.w	r9, [pc, #144]	; 9000f45c <xTaskIncrementTick.part.0+0x144>
9000f3cc:	f8df a090 	ldr.w	sl, [pc, #144]	; 9000f460 <xTaskIncrementTick.part.0+0x148>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
9000f3d0:	f8da 3000 	ldr.w	r3, [sl]
			if( xYieldPending != pdFALSE )
9000f3d4:	491d      	ldr	r1, [pc, #116]	; (9000f44c <xTaskIncrementTick.part.0+0x134>)
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
9000f3d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9000f3d8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
9000f3dc:	009b      	lsls	r3, r3, #2
9000f3de:	f859 2003 	ldr.w	r2, [r9, r3]
			if( xYieldPending != pdFALSE )
9000f3e2:	680b      	ldr	r3, [r1, #0]
				xSwitchRequired = pdTRUE;
9000f3e4:	2a02      	cmp	r2, #2
9000f3e6:	bf28      	it	cs
9000f3e8:	2501      	movcs	r5, #1
				xSwitchRequired = pdTRUE;
9000f3ea:	2b00      	cmp	r3, #0
}
9000f3ec:	bf0c      	ite	eq
9000f3ee:	4628      	moveq	r0, r5
9000f3f0:	2001      	movne	r0, #1
9000f3f2:	b003      	add	sp, #12
9000f3f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			taskSWITCH_DELAYED_LISTS();
9000f3f8:	4a15      	ldr	r2, [pc, #84]	; (9000f450 <xTaskIncrementTick.part.0+0x138>)
9000f3fa:	6818      	ldr	r0, [r3, #0]
9000f3fc:	6811      	ldr	r1, [r2, #0]
9000f3fe:	6019      	str	r1, [r3, #0]
9000f400:	4914      	ldr	r1, [pc, #80]	; (9000f454 <xTaskIncrementTick.part.0+0x13c>)
9000f402:	6010      	str	r0, [r2, #0]
9000f404:	680a      	ldr	r2, [r1, #0]
9000f406:	3201      	adds	r2, #1
9000f408:	600a      	str	r2, [r1, #0]

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
9000f40a:	681a      	ldr	r2, [r3, #0]
9000f40c:	6812      	ldr	r2, [r2, #0]
9000f40e:	b932      	cbnz	r2, 9000f41e <xTaskIncrementTick.part.0+0x106>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
9000f410:	f8df b044 	ldr.w	fp, [pc, #68]	; 9000f458 <xTaskIncrementTick.part.0+0x140>
9000f414:	f04f 33ff 	mov.w	r3, #4294967295
9000f418:	f8cb 3000 	str.w	r3, [fp]
9000f41c:	e787      	b.n	9000f32e <xTaskIncrementTick.part.0+0x16>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
9000f41e:	681b      	ldr	r3, [r3, #0]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
9000f420:	f8df b034 	ldr.w	fp, [pc, #52]	; 9000f458 <xTaskIncrementTick.part.0+0x140>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
9000f424:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
9000f426:	68db      	ldr	r3, [r3, #12]
9000f428:	685b      	ldr	r3, [r3, #4]
9000f42a:	f8cb 3000 	str.w	r3, [fp]
	}
}
9000f42e:	e77e      	b.n	9000f32e <xTaskIncrementTick.part.0+0x16>
9000f430:	f8df 9028 	ldr.w	r9, [pc, #40]	; 9000f45c <xTaskIncrementTick.part.0+0x144>
9000f434:	f8df a028 	ldr.w	sl, [pc, #40]	; 9000f460 <xTaskIncrementTick.part.0+0x148>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
9000f438:	f04f 33ff 	mov.w	r3, #4294967295
9000f43c:	f8cb 3000 	str.w	r3, [fp]
					break;
9000f440:	e7c6      	b.n	9000f3d0 <xTaskIncrementTick.part.0+0xb8>
9000f442:	bf00      	nop
9000f444:	240250e4 	.word	0x240250e4
9000f448:	24024bf4 	.word	0x24024bf4
9000f44c:	240250e8 	.word	0x240250e8
9000f450:	24024bf8 	.word	0x24024bf8
9000f454:	2402509c 	.word	0x2402509c
9000f458:	24025098 	.word	0x24025098
9000f45c:	24024bfc 	.word	0x24024bfc
9000f460:	24024bf0 	.word	0x24024bf0
9000f464:	2402506c 	.word	0x2402506c

9000f468 <xTaskResumeAll.part.0>:
BaseType_t xTaskResumeAll( void )
9000f468:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		--uxSchedulerSuspended;
9000f46c:	4d41      	ldr	r5, [pc, #260]	; (9000f574 <xTaskResumeAll.part.0+0x10c>)
BaseType_t xTaskResumeAll( void )
9000f46e:	b083      	sub	sp, #12
	taskENTER_CRITICAL();
9000f470:	f7fe fc40 	bl	9000dcf4 <vPortEnterCritical>
		--uxSchedulerSuspended;
9000f474:	682b      	ldr	r3, [r5, #0]
9000f476:	3b01      	subs	r3, #1
9000f478:	602b      	str	r3, [r5, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
9000f47a:	682b      	ldr	r3, [r5, #0]
9000f47c:	2b00      	cmp	r3, #0
9000f47e:	d161      	bne.n	9000f544 <xTaskResumeAll.part.0+0xdc>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
9000f480:	4b3d      	ldr	r3, [pc, #244]	; (9000f578 <xTaskResumeAll.part.0+0x110>)
9000f482:	681b      	ldr	r3, [r3, #0]
9000f484:	2b00      	cmp	r3, #0
9000f486:	d05d      	beq.n	9000f544 <xTaskResumeAll.part.0+0xdc>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
9000f488:	4e3c      	ldr	r6, [pc, #240]	; (9000f57c <xTaskResumeAll.part.0+0x114>)
9000f48a:	6833      	ldr	r3, [r6, #0]
9000f48c:	2b00      	cmp	r3, #0
9000f48e:	d06e      	beq.n	9000f56e <xTaskResumeAll.part.0+0x106>
9000f490:	4f3b      	ldr	r7, [pc, #236]	; (9000f580 <xTaskResumeAll.part.0+0x118>)
9000f492:	f8df 90fc 	ldr.w	r9, [pc, #252]	; 9000f590 <xTaskResumeAll.part.0+0x128>
9000f496:	f8df 80fc 	ldr.w	r8, [pc, #252]	; 9000f594 <xTaskResumeAll.part.0+0x12c>
9000f49a:	f8df a0fc 	ldr.w	sl, [pc, #252]	; 9000f598 <xTaskResumeAll.part.0+0x130>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
9000f49e:	68f3      	ldr	r3, [r6, #12]
9000f4a0:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
9000f4a2:	f104 0b04 	add.w	fp, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
9000f4a6:	f104 0018 	add.w	r0, r4, #24
9000f4aa:	f7fe fba1 	bl	9000dbf0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
9000f4ae:	4658      	mov	r0, fp
9000f4b0:	f7fe fb9e 	bl	9000dbf0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
9000f4b4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
9000f4b6:	683a      	ldr	r2, [r7, #0]
9000f4b8:	4659      	mov	r1, fp
9000f4ba:	eb03 0083 	add.w	r0, r3, r3, lsl #2
9000f4be:	4293      	cmp	r3, r2
9000f4c0:	eb09 0080 	add.w	r0, r9, r0, lsl #2
9000f4c4:	d900      	bls.n	9000f4c8 <xTaskResumeAll.part.0+0x60>
9000f4c6:	603b      	str	r3, [r7, #0]
9000f4c8:	f7fe fb6a 	bl	9000dba0 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
9000f4cc:	f8d8 3000 	ldr.w	r3, [r8]
9000f4d0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
9000f4d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9000f4d4:	429a      	cmp	r2, r3
9000f4d6:	d33d      	bcc.n	9000f554 <xTaskResumeAll.part.0+0xec>
						xYieldPending = pdTRUE;
9000f4d8:	2301      	movs	r3, #1
9000f4da:	f8ca 3000 	str.w	r3, [sl]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
9000f4de:	6833      	ldr	r3, [r6, #0]
9000f4e0:	2b00      	cmp	r3, #0
9000f4e2:	d1dc      	bne.n	9000f49e <xTaskResumeAll.part.0+0x36>
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
9000f4e4:	4b27      	ldr	r3, [pc, #156]	; (9000f584 <xTaskResumeAll.part.0+0x11c>)
9000f4e6:	681a      	ldr	r2, [r3, #0]
9000f4e8:	6812      	ldr	r2, [r2, #0]
9000f4ea:	2a00      	cmp	r2, #0
9000f4ec:	d03a      	beq.n	9000f564 <xTaskResumeAll.part.0+0xfc>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
9000f4ee:	681a      	ldr	r2, [r3, #0]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
9000f4f0:	4b25      	ldr	r3, [pc, #148]	; (9000f588 <xTaskResumeAll.part.0+0x120>)
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
9000f4f2:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
9000f4f4:	68d2      	ldr	r2, [r2, #12]
9000f4f6:	6852      	ldr	r2, [r2, #4]
9000f4f8:	601a      	str	r2, [r3, #0]
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
9000f4fa:	4e24      	ldr	r6, [pc, #144]	; (9000f58c <xTaskResumeAll.part.0+0x124>)
9000f4fc:	6834      	ldr	r4, [r6, #0]
					if( xPendedCounts > ( TickType_t ) 0U )
9000f4fe:	b194      	cbz	r4, 9000f526 <xTaskResumeAll.part.0+0xbe>
								xYieldPending = pdTRUE;
9000f500:	2701      	movs	r7, #1
9000f502:	e006      	b.n	9000f512 <xTaskResumeAll.part.0+0xaa>
9000f504:	f7ff ff08 	bl	9000f318 <xTaskIncrementTick.part.0>
							if( xTaskIncrementTick() != pdFALSE )
9000f508:	b108      	cbz	r0, 9000f50e <xTaskResumeAll.part.0+0xa6>
								xYieldPending = pdTRUE;
9000f50a:	f8ca 7000 	str.w	r7, [sl]
						} while( xPendedCounts > ( TickType_t ) 0U );
9000f50e:	3c01      	subs	r4, #1
9000f510:	d008      	beq.n	9000f524 <xTaskResumeAll.part.0+0xbc>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
9000f512:	682b      	ldr	r3, [r5, #0]
9000f514:	2b00      	cmp	r3, #0
9000f516:	d0f5      	beq.n	9000f504 <xTaskResumeAll.part.0+0x9c>
		++xPendedTicks;
9000f518:	6833      	ldr	r3, [r6, #0]
						} while( xPendedCounts > ( TickType_t ) 0U );
9000f51a:	3c01      	subs	r4, #1
		++xPendedTicks;
9000f51c:	f103 0301 	add.w	r3, r3, #1
9000f520:	6033      	str	r3, [r6, #0]
						} while( xPendedCounts > ( TickType_t ) 0U );
9000f522:	d1f6      	bne.n	9000f512 <xTaskResumeAll.part.0+0xaa>
						xPendedTicks = 0;
9000f524:	6034      	str	r4, [r6, #0]
				if( xYieldPending != pdFALSE )
9000f526:	f8da 3000 	ldr.w	r3, [sl]
9000f52a:	b15b      	cbz	r3, 9000f544 <xTaskResumeAll.part.0+0xdc>
					taskYIELD_IF_USING_PREEMPTION();
9000f52c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
9000f530:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
9000f534:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
9000f538:	f3bf 8f4f 	dsb	sy
9000f53c:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
9000f540:	2001      	movs	r0, #1
9000f542:	e000      	b.n	9000f546 <xTaskResumeAll.part.0+0xde>
BaseType_t xAlreadyYielded = pdFALSE;
9000f544:	2000      	movs	r0, #0
9000f546:	9001      	str	r0, [sp, #4]
	taskEXIT_CRITICAL();
9000f548:	f7fe fbf6 	bl	9000dd38 <vPortExitCritical>
}
9000f54c:	9801      	ldr	r0, [sp, #4]
9000f54e:	b003      	add	sp, #12
9000f550:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
9000f554:	6833      	ldr	r3, [r6, #0]
9000f556:	2b00      	cmp	r3, #0
9000f558:	d1a1      	bne.n	9000f49e <xTaskResumeAll.part.0+0x36>
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
9000f55a:	4b0a      	ldr	r3, [pc, #40]	; (9000f584 <xTaskResumeAll.part.0+0x11c>)
9000f55c:	681a      	ldr	r2, [r3, #0]
9000f55e:	6812      	ldr	r2, [r2, #0]
9000f560:	2a00      	cmp	r2, #0
9000f562:	d1c4      	bne.n	9000f4ee <xTaskResumeAll.part.0+0x86>
		xNextTaskUnblockTime = portMAX_DELAY;
9000f564:	4b08      	ldr	r3, [pc, #32]	; (9000f588 <xTaskResumeAll.part.0+0x120>)
9000f566:	f04f 32ff 	mov.w	r2, #4294967295
9000f56a:	601a      	str	r2, [r3, #0]
9000f56c:	e7c5      	b.n	9000f4fa <xTaskResumeAll.part.0+0x92>
9000f56e:	f8df a028 	ldr.w	sl, [pc, #40]	; 9000f598 <xTaskResumeAll.part.0+0x130>
9000f572:	e7c2      	b.n	9000f4fa <xTaskResumeAll.part.0+0x92>
9000f574:	24025064 	.word	0x24025064
9000f578:	2402505c 	.word	0x2402505c
9000f57c:	240250a4 	.word	0x240250a4
9000f580:	2402506c 	.word	0x2402506c
9000f584:	24024bf4 	.word	0x24024bf4
9000f588:	24025098 	.word	0x24025098
9000f58c:	240250a0 	.word	0x240250a0
9000f590:	24024bfc 	.word	0x24024bfc
9000f594:	24024bf0 	.word	0x24024bf0
9000f598:	240250e8 	.word	0x240250e8

9000f59c <xTaskCreateStatic>:
	{
9000f59c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
9000f5a0:	b083      	sub	sp, #12
9000f5a2:	4698      	mov	r8, r3
		configASSERT( puxStackBuffer != NULL );
9000f5a4:	e9dd 340b 	ldrd	r3, r4, [sp, #44]	; 0x2c
9000f5a8:	b1bb      	cbz	r3, 9000f5da <xTaskCreateStatic+0x3e>
		configASSERT( pxTaskBuffer != NULL );
9000f5aa:	b16c      	cbz	r4, 9000f5c8 <xTaskCreateStatic+0x2c>
			volatile size_t xSize = sizeof( StaticTask_t );
9000f5ac:	2360      	movs	r3, #96	; 0x60
9000f5ae:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( TCB_t ) );
9000f5b0:	9b01      	ldr	r3, [sp, #4]
9000f5b2:	2b60      	cmp	r3, #96	; 0x60
9000f5b4:	d01a      	beq.n	9000f5ec <xTaskCreateStatic+0x50>
9000f5b6:	f04f 0350 	mov.w	r3, #80	; 0x50
9000f5ba:	f383 8811 	msr	BASEPRI, r3
9000f5be:	f3bf 8f6f 	isb	sy
9000f5c2:	f3bf 8f4f 	dsb	sy
9000f5c6:	e7fe      	b.n	9000f5c6 <xTaskCreateStatic+0x2a>
9000f5c8:	f04f 0350 	mov.w	r3, #80	; 0x50
9000f5cc:	f383 8811 	msr	BASEPRI, r3
9000f5d0:	f3bf 8f6f 	isb	sy
9000f5d4:	f3bf 8f4f 	dsb	sy
		configASSERT( pxTaskBuffer != NULL );
9000f5d8:	e7fe      	b.n	9000f5d8 <xTaskCreateStatic+0x3c>
9000f5da:	f04f 0350 	mov.w	r3, #80	; 0x50
9000f5de:	f383 8811 	msr	BASEPRI, r3
9000f5e2:	f3bf 8f6f 	isb	sy
9000f5e6:	f3bf 8f4f 	dsb	sy
		configASSERT( puxStackBuffer != NULL );
9000f5ea:	e7fe      	b.n	9000f5ea <xTaskCreateStatic+0x4e>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
9000f5ec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
9000f5ee:	0096      	lsls	r6, r2, #2
9000f5f0:	4607      	mov	r7, r0
9000f5f2:	460d      	mov	r5, r1
9000f5f4:	4618      	mov	r0, r3
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
9000f5f6:	6323      	str	r3, [r4, #48]	; 0x30
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
9000f5f8:	9b01      	ldr	r3, [sp, #4]
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
9000f5fa:	2302      	movs	r3, #2
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
9000f5fc:	4632      	mov	r2, r6
9000f5fe:	21a5      	movs	r1, #165	; 0xa5
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
9000f600:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
9000f604:	f013 feb6 	bl	90023374 <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
9000f608:	1f32      	subs	r2, r6, #4
9000f60a:	6b23      	ldr	r3, [r4, #48]	; 0x30
9000f60c:	4413      	add	r3, r2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
9000f60e:	f023 0907 	bic.w	r9, r3, #7
	if( pcName != NULL )
9000f612:	2d00      	cmp	r5, #0
9000f614:	d069      	beq.n	9000f6ea <xTaskCreateStatic+0x14e>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
9000f616:	782b      	ldrb	r3, [r5, #0]
9000f618:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
			if( pcName[ x ] == ( char ) 0x00 )
9000f61c:	2b00      	cmp	r3, #0
9000f61e:	d03b      	beq.n	9000f698 <xTaskCreateStatic+0xfc>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
9000f620:	786b      	ldrb	r3, [r5, #1]
9000f622:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
			if( pcName[ x ] == ( char ) 0x00 )
9000f626:	2b00      	cmp	r3, #0
9000f628:	d036      	beq.n	9000f698 <xTaskCreateStatic+0xfc>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
9000f62a:	78ab      	ldrb	r3, [r5, #2]
9000f62c:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
			if( pcName[ x ] == ( char ) 0x00 )
9000f630:	b393      	cbz	r3, 9000f698 <xTaskCreateStatic+0xfc>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
9000f632:	78eb      	ldrb	r3, [r5, #3]
9000f634:	f884 3037 	strb.w	r3, [r4, #55]	; 0x37
			if( pcName[ x ] == ( char ) 0x00 )
9000f638:	b373      	cbz	r3, 9000f698 <xTaskCreateStatic+0xfc>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
9000f63a:	792b      	ldrb	r3, [r5, #4]
9000f63c:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
			if( pcName[ x ] == ( char ) 0x00 )
9000f640:	b353      	cbz	r3, 9000f698 <xTaskCreateStatic+0xfc>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
9000f642:	796b      	ldrb	r3, [r5, #5]
9000f644:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
			if( pcName[ x ] == ( char ) 0x00 )
9000f648:	b333      	cbz	r3, 9000f698 <xTaskCreateStatic+0xfc>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
9000f64a:	79ab      	ldrb	r3, [r5, #6]
9000f64c:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
			if( pcName[ x ] == ( char ) 0x00 )
9000f650:	b313      	cbz	r3, 9000f698 <xTaskCreateStatic+0xfc>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
9000f652:	79eb      	ldrb	r3, [r5, #7]
9000f654:	f884 303b 	strb.w	r3, [r4, #59]	; 0x3b
			if( pcName[ x ] == ( char ) 0x00 )
9000f658:	b1f3      	cbz	r3, 9000f698 <xTaskCreateStatic+0xfc>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
9000f65a:	7a2b      	ldrb	r3, [r5, #8]
9000f65c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
			if( pcName[ x ] == ( char ) 0x00 )
9000f660:	b1d3      	cbz	r3, 9000f698 <xTaskCreateStatic+0xfc>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
9000f662:	7a6b      	ldrb	r3, [r5, #9]
9000f664:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
			if( pcName[ x ] == ( char ) 0x00 )
9000f668:	b1b3      	cbz	r3, 9000f698 <xTaskCreateStatic+0xfc>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
9000f66a:	7aab      	ldrb	r3, [r5, #10]
9000f66c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
			if( pcName[ x ] == ( char ) 0x00 )
9000f670:	b193      	cbz	r3, 9000f698 <xTaskCreateStatic+0xfc>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
9000f672:	7aeb      	ldrb	r3, [r5, #11]
9000f674:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
			if( pcName[ x ] == ( char ) 0x00 )
9000f678:	b173      	cbz	r3, 9000f698 <xTaskCreateStatic+0xfc>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
9000f67a:	7b2b      	ldrb	r3, [r5, #12]
9000f67c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
			if( pcName[ x ] == ( char ) 0x00 )
9000f680:	b153      	cbz	r3, 9000f698 <xTaskCreateStatic+0xfc>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
9000f682:	7b6b      	ldrb	r3, [r5, #13]
9000f684:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
			if( pcName[ x ] == ( char ) 0x00 )
9000f688:	b133      	cbz	r3, 9000f698 <xTaskCreateStatic+0xfc>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
9000f68a:	7bab      	ldrb	r3, [r5, #14]
9000f68c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
			if( pcName[ x ] == ( char ) 0x00 )
9000f690:	b113      	cbz	r3, 9000f698 <xTaskCreateStatic+0xfc>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
9000f692:	7beb      	ldrb	r3, [r5, #15]
9000f694:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
9000f698:	2300      	movs	r3, #0
9000f69a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
9000f69e:	9d0a      	ldr	r5, [sp, #40]	; 0x28
		pxNewTCB->uxMutexesHeld = 0;
9000f6a0:	2600      	movs	r6, #0
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
9000f6a2:	1d20      	adds	r0, r4, #4
9000f6a4:	2d37      	cmp	r5, #55	; 0x37
		pxNewTCB->uxMutexesHeld = 0;
9000f6a6:	6526      	str	r6, [r4, #80]	; 0x50
9000f6a8:	bf28      	it	cs
9000f6aa:	2537      	movcs	r5, #55	; 0x37
	pxNewTCB->uxPriority = uxPriority;
9000f6ac:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
9000f6ae:	64e5      	str	r5, [r4, #76]	; 0x4c
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
9000f6b0:	f1c5 0538 	rsb	r5, r5, #56	; 0x38
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
9000f6b4:	f7fe fa70 	bl	9000db98 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
9000f6b8:	f104 0018 	add.w	r0, r4, #24
9000f6bc:	f7fe fa6c 	bl	9000db98 <vListInitialiseItem>
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
9000f6c0:	4642      	mov	r2, r8
9000f6c2:	4639      	mov	r1, r7
		pxNewTCB->ulNotifiedValue = 0;
9000f6c4:	65a6      	str	r6, [r4, #88]	; 0x58
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
9000f6c6:	4648      	mov	r0, r9
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
9000f6c8:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
9000f6ca:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
9000f6cc:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->pxTaskTag = NULL;
9000f6ce:	6566      	str	r6, [r4, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
9000f6d0:	f884 605c 	strb.w	r6, [r4, #92]	; 0x5c
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
9000f6d4:	f7fe fade 	bl	9000dc94 <pxPortInitialiseStack>
9000f6d8:	4603      	mov	r3, r0
			prvAddNewTaskToReadyList( pxNewTCB );
9000f6da:	4620      	mov	r0, r4
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
9000f6dc:	6023      	str	r3, [r4, #0]
			prvAddNewTaskToReadyList( pxNewTCB );
9000f6de:	f7ff fd45 	bl	9000f16c <prvAddNewTaskToReadyList>
	}
9000f6e2:	4620      	mov	r0, r4
9000f6e4:	b003      	add	sp, #12
9000f6e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
9000f6ea:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
9000f6ee:	e7d6      	b.n	9000f69e <xTaskCreateStatic+0x102>

9000f6f0 <xTaskCreate>:
	{
9000f6f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
9000f6f4:	0096      	lsls	r6, r2, #2
	{
9000f6f6:	4680      	mov	r8, r0
9000f6f8:	460d      	mov	r5, r1
9000f6fa:	4699      	mov	r9, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
9000f6fc:	4630      	mov	r0, r6
9000f6fe:	f7fe f91d 	bl	9000d93c <pvPortMalloc>
			if( pxStack != NULL )
9000f702:	2800      	cmp	r0, #0
9000f704:	f000 8083 	beq.w	9000f80e <xTaskCreate+0x11e>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
9000f708:	4607      	mov	r7, r0
9000f70a:	2060      	movs	r0, #96	; 0x60
9000f70c:	f7fe f916 	bl	9000d93c <pvPortMalloc>
				if( pxNewTCB != NULL )
9000f710:	4604      	mov	r4, r0
9000f712:	2800      	cmp	r0, #0
9000f714:	d07f      	beq.n	9000f816 <xTaskCreate+0x126>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
9000f716:	2300      	movs	r3, #0
					pxNewTCB->pxStack = pxStack;
9000f718:	6307      	str	r7, [r0, #48]	; 0x30
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
9000f71a:	4632      	mov	r2, r6
9000f71c:	4638      	mov	r0, r7
9000f71e:	21a5      	movs	r1, #165	; 0xa5
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
9000f720:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
9000f724:	f013 fe26 	bl	90023374 <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
9000f728:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
	if( pcName != NULL )
9000f72c:	2d00      	cmp	r5, #0
9000f72e:	d078      	beq.n	9000f822 <xTaskCreate+0x132>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
9000f730:	782b      	ldrb	r3, [r5, #0]
9000f732:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
			if( pcName[ x ] == ( char ) 0x00 )
9000f736:	2b00      	cmp	r3, #0
9000f738:	d03b      	beq.n	9000f7b2 <xTaskCreate+0xc2>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
9000f73a:	786b      	ldrb	r3, [r5, #1]
9000f73c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
			if( pcName[ x ] == ( char ) 0x00 )
9000f740:	2b00      	cmp	r3, #0
9000f742:	d036      	beq.n	9000f7b2 <xTaskCreate+0xc2>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
9000f744:	78ab      	ldrb	r3, [r5, #2]
9000f746:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
			if( pcName[ x ] == ( char ) 0x00 )
9000f74a:	b393      	cbz	r3, 9000f7b2 <xTaskCreate+0xc2>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
9000f74c:	78eb      	ldrb	r3, [r5, #3]
9000f74e:	f884 3037 	strb.w	r3, [r4, #55]	; 0x37
			if( pcName[ x ] == ( char ) 0x00 )
9000f752:	b373      	cbz	r3, 9000f7b2 <xTaskCreate+0xc2>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
9000f754:	792b      	ldrb	r3, [r5, #4]
9000f756:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
			if( pcName[ x ] == ( char ) 0x00 )
9000f75a:	b353      	cbz	r3, 9000f7b2 <xTaskCreate+0xc2>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
9000f75c:	796b      	ldrb	r3, [r5, #5]
9000f75e:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
			if( pcName[ x ] == ( char ) 0x00 )
9000f762:	b333      	cbz	r3, 9000f7b2 <xTaskCreate+0xc2>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
9000f764:	79ab      	ldrb	r3, [r5, #6]
9000f766:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
			if( pcName[ x ] == ( char ) 0x00 )
9000f76a:	b313      	cbz	r3, 9000f7b2 <xTaskCreate+0xc2>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
9000f76c:	79eb      	ldrb	r3, [r5, #7]
9000f76e:	f884 303b 	strb.w	r3, [r4, #59]	; 0x3b
			if( pcName[ x ] == ( char ) 0x00 )
9000f772:	b1f3      	cbz	r3, 9000f7b2 <xTaskCreate+0xc2>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
9000f774:	7a2b      	ldrb	r3, [r5, #8]
9000f776:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
			if( pcName[ x ] == ( char ) 0x00 )
9000f77a:	b1d3      	cbz	r3, 9000f7b2 <xTaskCreate+0xc2>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
9000f77c:	7a6b      	ldrb	r3, [r5, #9]
9000f77e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
			if( pcName[ x ] == ( char ) 0x00 )
9000f782:	b1b3      	cbz	r3, 9000f7b2 <xTaskCreate+0xc2>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
9000f784:	7aab      	ldrb	r3, [r5, #10]
9000f786:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
			if( pcName[ x ] == ( char ) 0x00 )
9000f78a:	b193      	cbz	r3, 9000f7b2 <xTaskCreate+0xc2>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
9000f78c:	7aeb      	ldrb	r3, [r5, #11]
9000f78e:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
			if( pcName[ x ] == ( char ) 0x00 )
9000f792:	b173      	cbz	r3, 9000f7b2 <xTaskCreate+0xc2>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
9000f794:	7b2b      	ldrb	r3, [r5, #12]
9000f796:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
			if( pcName[ x ] == ( char ) 0x00 )
9000f79a:	b153      	cbz	r3, 9000f7b2 <xTaskCreate+0xc2>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
9000f79c:	7b6b      	ldrb	r3, [r5, #13]
9000f79e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
			if( pcName[ x ] == ( char ) 0x00 )
9000f7a2:	b133      	cbz	r3, 9000f7b2 <xTaskCreate+0xc2>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
9000f7a4:	7bab      	ldrb	r3, [r5, #14]
9000f7a6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
			if( pcName[ x ] == ( char ) 0x00 )
9000f7aa:	b113      	cbz	r3, 9000f7b2 <xTaskCreate+0xc2>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
9000f7ac:	7beb      	ldrb	r3, [r5, #15]
9000f7ae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
9000f7b2:	2300      	movs	r3, #0
9000f7b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
9000f7b8:	9d08      	ldr	r5, [sp, #32]
		pxNewTCB->uxMutexesHeld = 0;
9000f7ba:	2700      	movs	r7, #0
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
9000f7bc:	1d20      	adds	r0, r4, #4
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
9000f7be:	3e04      	subs	r6, #4
9000f7c0:	2d37      	cmp	r5, #55	; 0x37
		pxNewTCB->uxMutexesHeld = 0;
9000f7c2:	6527      	str	r7, [r4, #80]	; 0x50
9000f7c4:	bf28      	it	cs
9000f7c6:	2537      	movcs	r5, #55	; 0x37
	pxNewTCB->uxPriority = uxPriority;
9000f7c8:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
9000f7ca:	64e5      	str	r5, [r4, #76]	; 0x4c
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
9000f7cc:	f1c5 0538 	rsb	r5, r5, #56	; 0x38
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
9000f7d0:	f7fe f9e2 	bl	9000db98 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
9000f7d4:	f104 0018 	add.w	r0, r4, #24
9000f7d8:	f7fe f9de 	bl	9000db98 <vListInitialiseItem>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
9000f7dc:	eb0a 0006 	add.w	r0, sl, r6
		pxNewTCB->ulNotifiedValue = 0;
9000f7e0:	65a7      	str	r7, [r4, #88]	; 0x58
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
9000f7e2:	464a      	mov	r2, r9
9000f7e4:	4641      	mov	r1, r8
9000f7e6:	f020 0007 	bic.w	r0, r0, #7
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
9000f7ea:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
9000f7ec:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
9000f7ee:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->pxTaskTag = NULL;
9000f7f0:	6567      	str	r7, [r4, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
9000f7f2:	f884 705c 	strb.w	r7, [r4, #92]	; 0x5c
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
9000f7f6:	f7fe fa4d 	bl	9000dc94 <pxPortInitialiseStack>
	if( pxCreatedTask != NULL )
9000f7fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
9000f7fc:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
9000f7fe:	b103      	cbz	r3, 9000f802 <xTaskCreate+0x112>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
9000f800:	601c      	str	r4, [r3, #0]
			prvAddNewTaskToReadyList( pxNewTCB );
9000f802:	4620      	mov	r0, r4
9000f804:	f7ff fcb2 	bl	9000f16c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
9000f808:	2001      	movs	r0, #1
	}
9000f80a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
9000f80e:	f04f 30ff 	mov.w	r0, #4294967295
	}
9000f812:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
					vPortFree( pxStack );
9000f816:	4638      	mov	r0, r7
9000f818:	f7fe f94e 	bl	9000dab8 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
9000f81c:	f04f 30ff 	mov.w	r0, #4294967295
9000f820:	e7f3      	b.n	9000f80a <xTaskCreate+0x11a>
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
9000f822:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
9000f826:	e7c7      	b.n	9000f7b8 <xTaskCreate+0xc8>

9000f828 <vTaskDelay>:
	{
9000f828:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
9000f82a:	b950      	cbnz	r0, 9000f842 <vTaskDelay+0x1a>
			portYIELD_WITHIN_API();
9000f82c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
9000f830:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
9000f834:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
9000f838:	f3bf 8f4f 	dsb	sy
9000f83c:	f3bf 8f6f 	isb	sy
	}
9000f840:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			configASSERT( uxSchedulerSuspended == 0 );
9000f842:	4d1e      	ldr	r5, [pc, #120]	; (9000f8bc <vTaskDelay+0x94>)
9000f844:	682b      	ldr	r3, [r5, #0]
9000f846:	b143      	cbz	r3, 9000f85a <vTaskDelay+0x32>
9000f848:	f04f 0350 	mov.w	r3, #80	; 0x50
9000f84c:	f383 8811 	msr	BASEPRI, r3
9000f850:	f3bf 8f6f 	isb	sy
9000f854:	f3bf 8f4f 	dsb	sy
9000f858:	e7fe      	b.n	9000f858 <vTaskDelay+0x30>
	++uxSchedulerSuspended;
9000f85a:	682b      	ldr	r3, [r5, #0]
9000f85c:	4604      	mov	r4, r0
9000f85e:	3301      	adds	r3, #1
9000f860:	602b      	str	r3, [r5, #0]
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
9000f862:	4b17      	ldr	r3, [pc, #92]	; (9000f8c0 <vTaskDelay+0x98>)
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
9000f864:	4e17      	ldr	r6, [pc, #92]	; (9000f8c4 <vTaskDelay+0x9c>)
const TickType_t xConstTickCount = xTickCount;
9000f866:	681f      	ldr	r7, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
9000f868:	6830      	ldr	r0, [r6, #0]
9000f86a:	3004      	adds	r0, #4
9000f86c:	f7fe f9c0 	bl	9000dbf0 <uxListRemove>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
9000f870:	19e4      	adds	r4, r4, r7

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
9000f872:	6833      	ldr	r3, [r6, #0]
9000f874:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
9000f876:	d315      	bcc.n	9000f8a4 <vTaskDelay+0x7c>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
9000f878:	4b13      	ldr	r3, [pc, #76]	; (9000f8c8 <vTaskDelay+0xa0>)
9000f87a:	6818      	ldr	r0, [r3, #0]
9000f87c:	6831      	ldr	r1, [r6, #0]
9000f87e:	3104      	adds	r1, #4
9000f880:	f7fe f99e 	bl	9000dbc0 <vListInsert>
	configASSERT( uxSchedulerSuspended );
9000f884:	682b      	ldr	r3, [r5, #0]
9000f886:	b943      	cbnz	r3, 9000f89a <vTaskDelay+0x72>
9000f888:	f04f 0350 	mov.w	r3, #80	; 0x50
9000f88c:	f383 8811 	msr	BASEPRI, r3
9000f890:	f3bf 8f6f 	isb	sy
9000f894:	f3bf 8f4f 	dsb	sy
9000f898:	e7fe      	b.n	9000f898 <vTaskDelay+0x70>
9000f89a:	f7ff fde5 	bl	9000f468 <xTaskResumeAll.part.0>
		if( xAlreadyYielded == pdFALSE )
9000f89e:	2800      	cmp	r0, #0
9000f8a0:	d0c4      	beq.n	9000f82c <vTaskDelay+0x4>
	}
9000f8a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
9000f8a4:	4b09      	ldr	r3, [pc, #36]	; (9000f8cc <vTaskDelay+0xa4>)
9000f8a6:	6818      	ldr	r0, [r3, #0]
9000f8a8:	6831      	ldr	r1, [r6, #0]
9000f8aa:	3104      	adds	r1, #4
9000f8ac:	f7fe f988 	bl	9000dbc0 <vListInsert>

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
9000f8b0:	4b07      	ldr	r3, [pc, #28]	; (9000f8d0 <vTaskDelay+0xa8>)
9000f8b2:	681a      	ldr	r2, [r3, #0]
9000f8b4:	4294      	cmp	r4, r2
9000f8b6:	d2e5      	bcs.n	9000f884 <vTaskDelay+0x5c>
				{
					xNextTaskUnblockTime = xTimeToWake;
9000f8b8:	601c      	str	r4, [r3, #0]
9000f8ba:	e7e3      	b.n	9000f884 <vTaskDelay+0x5c>
9000f8bc:	24025064 	.word	0x24025064
9000f8c0:	240250e4 	.word	0x240250e4
9000f8c4:	24024bf0 	.word	0x24024bf0
9000f8c8:	24024bf8 	.word	0x24024bf8
9000f8cc:	24024bf4 	.word	0x24024bf4
9000f8d0:	24025098 	.word	0x24025098

9000f8d4 <vTaskStartScheduler>:
{
9000f8d4:	b570      	push	{r4, r5, r6, lr}
9000f8d6:	b084      	sub	sp, #16
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
9000f8d8:	2400      	movs	r4, #0
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
9000f8da:	4668      	mov	r0, sp
9000f8dc:	aa02      	add	r2, sp, #8
9000f8de:	a901      	add	r1, sp, #4
		StackType_t *pxIdleTaskStackBuffer = NULL;
9000f8e0:	e9cd 4400 	strd	r4, r4, [sp]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
9000f8e4:	f7fe f80c 	bl	9000d900 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
9000f8e8:	9d00      	ldr	r5, [sp, #0]
9000f8ea:	e9dd 0601 	ldrd	r0, r6, [sp, #4]
		configASSERT( puxStackBuffer != NULL );
9000f8ee:	b1b8      	cbz	r0, 9000f920 <vTaskStartScheduler+0x4c>
		configASSERT( pxTaskBuffer != NULL );
9000f8f0:	b16d      	cbz	r5, 9000f90e <vTaskStartScheduler+0x3a>
			volatile size_t xSize = sizeof( StaticTask_t );
9000f8f2:	2260      	movs	r2, #96	; 0x60
9000f8f4:	9203      	str	r2, [sp, #12]
			configASSERT( xSize == sizeof( TCB_t ) );
9000f8f6:	9a03      	ldr	r2, [sp, #12]
9000f8f8:	2a60      	cmp	r2, #96	; 0x60
9000f8fa:	d01a      	beq.n	9000f932 <vTaskStartScheduler+0x5e>
9000f8fc:	f04f 0350 	mov.w	r3, #80	; 0x50
9000f900:	f383 8811 	msr	BASEPRI, r3
9000f904:	f3bf 8f6f 	isb	sy
9000f908:	f3bf 8f4f 	dsb	sy
9000f90c:	e7fe      	b.n	9000f90c <vTaskStartScheduler+0x38>
9000f90e:	f04f 0350 	mov.w	r3, #80	; 0x50
9000f912:	f383 8811 	msr	BASEPRI, r3
9000f916:	f3bf 8f6f 	isb	sy
9000f91a:	f3bf 8f4f 	dsb	sy
		configASSERT( pxTaskBuffer != NULL );
9000f91e:	e7fe      	b.n	9000f91e <vTaskStartScheduler+0x4a>
9000f920:	f04f 0350 	mov.w	r3, #80	; 0x50
9000f924:	f383 8811 	msr	BASEPRI, r3
9000f928:	f3bf 8f6f 	isb	sy
9000f92c:	f3bf 8f4f 	dsb	sy
		configASSERT( puxStackBuffer != NULL );
9000f930:	e7fe      	b.n	9000f930 <vTaskStartScheduler+0x5c>
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
9000f932:	00b6      	lsls	r6, r6, #2
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
9000f934:	2302      	movs	r3, #2
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
9000f936:	21a5      	movs	r1, #165	; 0xa5
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
9000f938:	6328      	str	r0, [r5, #48]	; 0x30
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
9000f93a:	4632      	mov	r2, r6
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
9000f93c:	f885 305d 	strb.w	r3, [r5, #93]	; 0x5d
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
9000f940:	9b03      	ldr	r3, [sp, #12]
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
9000f942:	f013 fd17 	bl	90023374 <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
9000f946:	1f33      	subs	r3, r6, #4
9000f948:	6b2a      	ldr	r2, [r5, #48]	; 0x30
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
9000f94a:	492a      	ldr	r1, [pc, #168]	; (9000f9f4 <vTaskStartScheduler+0x120>)
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
9000f94c:	1d28      	adds	r0, r5, #4
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
9000f94e:	441a      	add	r2, r3
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
9000f950:	f885 4038 	strb.w	r4, [r5, #56]	; 0x38
9000f954:	6369      	str	r1, [r5, #52]	; 0x34
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
9000f956:	f885 4043 	strb.w	r4, [r5, #67]	; 0x43
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
9000f95a:	f022 0607 	bic.w	r6, r2, #7
	pxNewTCB->uxPriority = uxPriority;
9000f95e:	62ec      	str	r4, [r5, #44]	; 0x2c
		pxNewTCB->uxMutexesHeld = 0;
9000f960:	e9c5 4413 	strd	r4, r4, [r5, #76]	; 0x4c
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
9000f964:	f7fe f918 	bl	9000db98 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
9000f968:	f105 0018 	add.w	r0, r5, #24
9000f96c:	f7fe f914 	bl	9000db98 <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
9000f970:	2338      	movs	r3, #56	; 0x38
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
9000f972:	4622      	mov	r2, r4
9000f974:	4920      	ldr	r1, [pc, #128]	; (9000f9f8 <vTaskStartScheduler+0x124>)
		pxNewTCB->ulNotifiedValue = 0;
9000f976:	65ac      	str	r4, [r5, #88]	; 0x58
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
9000f978:	4630      	mov	r0, r6
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
9000f97a:	61ab      	str	r3, [r5, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
9000f97c:	612d      	str	r5, [r5, #16]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
9000f97e:	626d      	str	r5, [r5, #36]	; 0x24
		pxNewTCB->pxTaskTag = NULL;
9000f980:	656c      	str	r4, [r5, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
9000f982:	f885 405c 	strb.w	r4, [r5, #92]	; 0x5c
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
9000f986:	f7fe f985 	bl	9000dc94 <pxPortInitialiseStack>
9000f98a:	4603      	mov	r3, r0
			prvAddNewTaskToReadyList( pxNewTCB );
9000f98c:	4628      	mov	r0, r5
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
9000f98e:	602b      	str	r3, [r5, #0]
			prvAddNewTaskToReadyList( pxNewTCB );
9000f990:	f7ff fbec 	bl	9000f16c <prvAddNewTaskToReadyList>
			xReturn = xTimerCreateTimerTask();
9000f994:	f000 fca4 	bl	900102e0 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
9000f998:	2801      	cmp	r0, #1
9000f99a:	d00c      	beq.n	9000f9b6 <vTaskStartScheduler+0xe2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
9000f99c:	3001      	adds	r0, #1
9000f99e:	d001      	beq.n	9000f9a4 <vTaskStartScheduler+0xd0>
}
9000f9a0:	b004      	add	sp, #16
9000f9a2:	bd70      	pop	{r4, r5, r6, pc}
9000f9a4:	f04f 0350 	mov.w	r3, #80	; 0x50
9000f9a8:	f383 8811 	msr	BASEPRI, r3
9000f9ac:	f3bf 8f6f 	isb	sy
9000f9b0:	f3bf 8f4f 	dsb	sy
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
9000f9b4:	e7fe      	b.n	9000f9b4 <vTaskStartScheduler+0xe0>
9000f9b6:	f04f 0350 	mov.w	r3, #80	; 0x50
9000f9ba:	f383 8811 	msr	BASEPRI, r3
9000f9be:	f3bf 8f6f 	isb	sy
9000f9c2:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
9000f9c6:	4b0d      	ldr	r3, [pc, #52]	; (9000f9fc <vTaskStartScheduler+0x128>)
9000f9c8:	f04f 32ff 	mov.w	r2, #4294967295
		xSchedulerRunning = pdTRUE;
9000f9cc:	490c      	ldr	r1, [pc, #48]	; (9000fa00 <vTaskStartScheduler+0x12c>)
		xNextTaskUnblockTime = portMAX_DELAY;
9000f9ce:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
9000f9d0:	4b0c      	ldr	r3, [pc, #48]	; (9000fa04 <vTaskStartScheduler+0x130>)
		traceTASK_SWITCHED_IN();
9000f9d2:	4a0d      	ldr	r2, [pc, #52]	; (9000fa08 <vTaskStartScheduler+0x134>)
		xSchedulerRunning = pdTRUE;
9000f9d4:	6008      	str	r0, [r1, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
9000f9d6:	601c      	str	r4, [r3, #0]
		traceTASK_SWITCHED_IN();
9000f9d8:	6813      	ldr	r3, [r2, #0]
		if( xTask == NULL )
9000f9da:	b143      	cbz	r3, 9000f9ee <vTaskStartScheduler+0x11a>
		if( xTCB->pxTaskTag != NULL )
9000f9dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
9000f9de:	b10b      	cbz	r3, 9000f9e4 <vTaskStartScheduler+0x110>
			xReturn = xTCB->pxTaskTag( pvParameter );
9000f9e0:	2000      	movs	r0, #0
9000f9e2:	4798      	blx	r3
}
9000f9e4:	b004      	add	sp, #16
9000f9e6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		if( xPortStartScheduler() != pdFALSE )
9000f9ea:	f7fe ba15 	b.w	9000de18 <xPortStartScheduler>
			xTCB = pxCurrentTCB;
9000f9ee:	6813      	ldr	r3, [r2, #0]
9000f9f0:	e7f4      	b.n	9000f9dc <vTaskStartScheduler+0x108>
9000f9f2:	bf00      	nop
9000f9f4:	454c4449 	.word	0x454c4449
9000f9f8:	9000f27d 	.word	0x9000f27d
9000f9fc:	24025098 	.word	0x24025098
9000fa00:	240250b8 	.word	0x240250b8
9000fa04:	240250e4 	.word	0x240250e4
9000fa08:	24024bf0 	.word	0x24024bf0

9000fa0c <vTaskSuspendAll>:
	++uxSchedulerSuspended;
9000fa0c:	4a02      	ldr	r2, [pc, #8]	; (9000fa18 <vTaskSuspendAll+0xc>)
9000fa0e:	6813      	ldr	r3, [r2, #0]
9000fa10:	3301      	adds	r3, #1
9000fa12:	6013      	str	r3, [r2, #0]
}
9000fa14:	4770      	bx	lr
9000fa16:	bf00      	nop
9000fa18:	24025064 	.word	0x24025064

9000fa1c <xTaskResumeAll>:
	configASSERT( uxSchedulerSuspended );
9000fa1c:	4b06      	ldr	r3, [pc, #24]	; (9000fa38 <xTaskResumeAll+0x1c>)
9000fa1e:	681b      	ldr	r3, [r3, #0]
9000fa20:	b943      	cbnz	r3, 9000fa34 <xTaskResumeAll+0x18>
9000fa22:	f04f 0350 	mov.w	r3, #80	; 0x50
9000fa26:	f383 8811 	msr	BASEPRI, r3
9000fa2a:	f3bf 8f6f 	isb	sy
9000fa2e:	f3bf 8f4f 	dsb	sy
9000fa32:	e7fe      	b.n	9000fa32 <xTaskResumeAll+0x16>
9000fa34:	f7ff bd18 	b.w	9000f468 <xTaskResumeAll.part.0>
9000fa38:	24025064 	.word	0x24025064

9000fa3c <xTaskGetTickCount>:
		xTicks = xTickCount;
9000fa3c:	4b01      	ldr	r3, [pc, #4]	; (9000fa44 <xTaskGetTickCount+0x8>)
9000fa3e:	6818      	ldr	r0, [r3, #0]
}
9000fa40:	4770      	bx	lr
9000fa42:	bf00      	nop
9000fa44:	240250e4 	.word	0x240250e4

9000fa48 <xTaskIncrementTick>:
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
9000fa48:	4b05      	ldr	r3, [pc, #20]	; (9000fa60 <xTaskIncrementTick+0x18>)
9000fa4a:	681b      	ldr	r3, [r3, #0]
9000fa4c:	b90b      	cbnz	r3, 9000fa52 <xTaskIncrementTick+0xa>
9000fa4e:	f7ff bc63 	b.w	9000f318 <xTaskIncrementTick.part.0>
		++xPendedTicks;
9000fa52:	4a04      	ldr	r2, [pc, #16]	; (9000fa64 <xTaskIncrementTick+0x1c>)
}
9000fa54:	2000      	movs	r0, #0
		++xPendedTicks;
9000fa56:	6813      	ldr	r3, [r2, #0]
9000fa58:	3301      	adds	r3, #1
9000fa5a:	6013      	str	r3, [r2, #0]
}
9000fa5c:	4770      	bx	lr
9000fa5e:	bf00      	nop
9000fa60:	24025064 	.word	0x24025064
9000fa64:	240250a0 	.word	0x240250a0

9000fa68 <vTaskSetApplicationTaskTag>:
	{
9000fa68:	b538      	push	{r3, r4, r5, lr}
9000fa6a:	460d      	mov	r5, r1
		if( xTask == NULL )
9000fa6c:	b138      	cbz	r0, 9000fa7e <vTaskSetApplicationTaskTag+0x16>
9000fa6e:	4604      	mov	r4, r0
		taskENTER_CRITICAL();
9000fa70:	f7fe f940 	bl	9000dcf4 <vPortEnterCritical>
			xTCB->pxTaskTag = pxHookFunction;
9000fa74:	6565      	str	r5, [r4, #84]	; 0x54
	}
9000fa76:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		taskEXIT_CRITICAL();
9000fa7a:	f7fe b95d 	b.w	9000dd38 <vPortExitCritical>
			xTCB = ( TCB_t * ) pxCurrentTCB;
9000fa7e:	4b04      	ldr	r3, [pc, #16]	; (9000fa90 <vTaskSetApplicationTaskTag+0x28>)
9000fa80:	681c      	ldr	r4, [r3, #0]
		taskENTER_CRITICAL();
9000fa82:	f7fe f937 	bl	9000dcf4 <vPortEnterCritical>
			xTCB->pxTaskTag = pxHookFunction;
9000fa86:	6565      	str	r5, [r4, #84]	; 0x54
	}
9000fa88:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		taskEXIT_CRITICAL();
9000fa8c:	f7fe b954 	b.w	9000dd38 <vPortExitCritical>
9000fa90:	24024bf0 	.word	0x24024bf0

9000fa94 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
9000fa94:	4b27      	ldr	r3, [pc, #156]	; (9000fb34 <vTaskSwitchContext+0xa0>)
9000fa96:	681b      	ldr	r3, [r3, #0]
9000fa98:	b11b      	cbz	r3, 9000faa2 <vTaskSwitchContext+0xe>
		xYieldPending = pdTRUE;
9000fa9a:	4b27      	ldr	r3, [pc, #156]	; (9000fb38 <vTaskSwitchContext+0xa4>)
9000fa9c:	2201      	movs	r2, #1
9000fa9e:	601a      	str	r2, [r3, #0]
9000faa0:	4770      	bx	lr
{
9000faa2:	b570      	push	{r4, r5, r6, lr}
		xYieldPending = pdFALSE;
9000faa4:	4a24      	ldr	r2, [pc, #144]	; (9000fb38 <vTaskSwitchContext+0xa4>)
		traceTASK_SWITCHED_OUT();
9000faa6:	4c25      	ldr	r4, [pc, #148]	; (9000fb3c <vTaskSwitchContext+0xa8>)
		xYieldPending = pdFALSE;
9000faa8:	6013      	str	r3, [r2, #0]
		traceTASK_SWITCHED_OUT();
9000faaa:	6823      	ldr	r3, [r4, #0]
		if( xTask == NULL )
9000faac:	2b00      	cmp	r3, #0
9000faae:	d036      	beq.n	9000fb1e <vTaskSwitchContext+0x8a>
		if( xTCB->pxTaskTag != NULL )
9000fab0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
9000fab2:	b10b      	cbz	r3, 9000fab8 <vTaskSwitchContext+0x24>
			xReturn = xTCB->pxTaskTag( pvParameter );
9000fab4:	2001      	movs	r0, #1
9000fab6:	4798      	blx	r3
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
9000fab8:	4d21      	ldr	r5, [pc, #132]	; (9000fb40 <vTaskSwitchContext+0xac>)
9000faba:	4922      	ldr	r1, [pc, #136]	; (9000fb44 <vTaskSwitchContext+0xb0>)
9000fabc:	682b      	ldr	r3, [r5, #0]
9000fabe:	eb03 0283 	add.w	r2, r3, r3, lsl #2
9000fac2:	0098      	lsls	r0, r3, #2
9000fac4:	0092      	lsls	r2, r2, #2
9000fac6:	588a      	ldr	r2, [r1, r2]
9000fac8:	b942      	cbnz	r2, 9000fadc <vTaskSwitchContext+0x48>
9000faca:	b1fb      	cbz	r3, 9000fb0c <vTaskSwitchContext+0x78>
9000facc:	3b01      	subs	r3, #1
9000face:	eb03 0283 	add.w	r2, r3, r3, lsl #2
9000fad2:	0098      	lsls	r0, r3, #2
9000fad4:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
9000fad8:	2a00      	cmp	r2, #0
9000fada:	d0f6      	beq.n	9000faca <vTaskSwitchContext+0x36>
9000fadc:	4418      	add	r0, r3
9000fade:	eb01 0c80 	add.w	ip, r1, r0, lsl #2
9000fae2:	f8dc 1004 	ldr.w	r1, [ip, #4]
9000fae6:	4662      	mov	r2, ip
9000fae8:	6849      	ldr	r1, [r1, #4]
9000faea:	3208      	adds	r2, #8
9000faec:	4291      	cmp	r1, r2
9000faee:	f8cc 1004 	str.w	r1, [ip, #4]
9000faf2:	d01b      	beq.n	9000fb2c <vTaskSwitchContext+0x98>
9000faf4:	68ca      	ldr	r2, [r1, #12]
9000faf6:	6022      	str	r2, [r4, #0]
9000faf8:	602b      	str	r3, [r5, #0]
		traceTASK_SWITCHED_IN();
9000fafa:	6823      	ldr	r3, [r4, #0]
		if( xTask == NULL )
9000fafc:	b1a3      	cbz	r3, 9000fb28 <vTaskSwitchContext+0x94>
		if( xTCB->pxTaskTag != NULL )
9000fafe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
9000fb00:	b11b      	cbz	r3, 9000fb0a <vTaskSwitchContext+0x76>
			xReturn = xTCB->pxTaskTag( pvParameter );
9000fb02:	2000      	movs	r0, #0
}
9000fb04:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			xReturn = xTCB->pxTaskTag( pvParameter );
9000fb08:	4718      	bx	r3
}
9000fb0a:	bd70      	pop	{r4, r5, r6, pc}
9000fb0c:	f04f 0350 	mov.w	r3, #80	; 0x50
9000fb10:	f383 8811 	msr	BASEPRI, r3
9000fb14:	f3bf 8f6f 	isb	sy
9000fb18:	f3bf 8f4f 	dsb	sy
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
9000fb1c:	e7fe      	b.n	9000fb1c <vTaskSwitchContext+0x88>
			xTCB = pxCurrentTCB;
9000fb1e:	6823      	ldr	r3, [r4, #0]
		if( xTCB->pxTaskTag != NULL )
9000fb20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
9000fb22:	2b00      	cmp	r3, #0
9000fb24:	d1c6      	bne.n	9000fab4 <vTaskSwitchContext+0x20>
9000fb26:	e7c7      	b.n	9000fab8 <vTaskSwitchContext+0x24>
			xTCB = pxCurrentTCB;
9000fb28:	6823      	ldr	r3, [r4, #0]
9000fb2a:	e7e8      	b.n	9000fafe <vTaskSwitchContext+0x6a>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
9000fb2c:	6849      	ldr	r1, [r1, #4]
9000fb2e:	f8cc 1004 	str.w	r1, [ip, #4]
9000fb32:	e7df      	b.n	9000faf4 <vTaskSwitchContext+0x60>
9000fb34:	24025064 	.word	0x24025064
9000fb38:	240250e8 	.word	0x240250e8
9000fb3c:	24024bf0 	.word	0x24024bf0
9000fb40:	2402506c 	.word	0x2402506c
9000fb44:	24024bfc 	.word	0x24024bfc

9000fb48 <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
9000fb48:	b1f0      	cbz	r0, 9000fb88 <vTaskPlaceOnEventList+0x40>
{
9000fb4a:	b570      	push	{r4, r5, r6, lr}
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
9000fb4c:	4d1a      	ldr	r5, [pc, #104]	; (9000fbb8 <vTaskPlaceOnEventList+0x70>)
9000fb4e:	460c      	mov	r4, r1
9000fb50:	6829      	ldr	r1, [r5, #0]
9000fb52:	3118      	adds	r1, #24
9000fb54:	f7fe f834 	bl	9000dbc0 <vListInsert>
const TickType_t xConstTickCount = xTickCount;
9000fb58:	4b18      	ldr	r3, [pc, #96]	; (9000fbbc <vTaskPlaceOnEventList+0x74>)
9000fb5a:	681e      	ldr	r6, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
9000fb5c:	6828      	ldr	r0, [r5, #0]
9000fb5e:	3004      	adds	r0, #4
9000fb60:	f7fe f846 	bl	9000dbf0 <uxListRemove>
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
9000fb64:	1c63      	adds	r3, r4, #1
9000fb66:	d020      	beq.n	9000fbaa <vTaskPlaceOnEventList+0x62>
			xTimeToWake = xConstTickCount + xTicksToWait;
9000fb68:	19a4      	adds	r4, r4, r6
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
9000fb6a:	682b      	ldr	r3, [r5, #0]
9000fb6c:	605c      	str	r4, [r3, #4]
			if( xTimeToWake < xConstTickCount )
9000fb6e:	d214      	bcs.n	9000fb9a <vTaskPlaceOnEventList+0x52>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
9000fb70:	4b13      	ldr	r3, [pc, #76]	; (9000fbc0 <vTaskPlaceOnEventList+0x78>)
9000fb72:	6818      	ldr	r0, [r3, #0]
9000fb74:	6829      	ldr	r1, [r5, #0]
9000fb76:	3104      	adds	r1, #4
9000fb78:	f7fe f822 	bl	9000dbc0 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
9000fb7c:	4b11      	ldr	r3, [pc, #68]	; (9000fbc4 <vTaskPlaceOnEventList+0x7c>)
9000fb7e:	681a      	ldr	r2, [r3, #0]
9000fb80:	4294      	cmp	r4, r2
9000fb82:	d200      	bcs.n	9000fb86 <vTaskPlaceOnEventList+0x3e>
					xNextTaskUnblockTime = xTimeToWake;
9000fb84:	601c      	str	r4, [r3, #0]
}
9000fb86:	bd70      	pop	{r4, r5, r6, pc}
9000fb88:	f04f 0350 	mov.w	r3, #80	; 0x50
9000fb8c:	f383 8811 	msr	BASEPRI, r3
9000fb90:	f3bf 8f6f 	isb	sy
9000fb94:	f3bf 8f4f 	dsb	sy
	configASSERT( pxEventList );
9000fb98:	e7fe      	b.n	9000fb98 <vTaskPlaceOnEventList+0x50>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
9000fb9a:	4b0b      	ldr	r3, [pc, #44]	; (9000fbc8 <vTaskPlaceOnEventList+0x80>)
9000fb9c:	6818      	ldr	r0, [r3, #0]
9000fb9e:	6829      	ldr	r1, [r5, #0]
}
9000fba0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
9000fba4:	3104      	adds	r1, #4
9000fba6:	f7fe b80b 	b.w	9000dbc0 <vListInsert>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
9000fbaa:	6829      	ldr	r1, [r5, #0]
9000fbac:	4807      	ldr	r0, [pc, #28]	; (9000fbcc <vTaskPlaceOnEventList+0x84>)
9000fbae:	3104      	adds	r1, #4
}
9000fbb0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
9000fbb4:	f7fd bff4 	b.w	9000dba0 <vListInsertEnd>
9000fbb8:	24024bf0 	.word	0x24024bf0
9000fbbc:	240250e4 	.word	0x240250e4
9000fbc0:	24024bf4 	.word	0x24024bf4
9000fbc4:	24025098 	.word	0x24025098
9000fbc8:	24024bf8 	.word	0x24024bf8
9000fbcc:	240250bc 	.word	0x240250bc

9000fbd0 <vTaskPlaceOnEventListRestricted>:
		configASSERT( pxEventList );
9000fbd0:	b358      	cbz	r0, 9000fc2a <vTaskPlaceOnEventListRestricted+0x5a>
	{
9000fbd2:	b570      	push	{r4, r5, r6, lr}
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
9000fbd4:	4e1d      	ldr	r6, [pc, #116]	; (9000fc4c <vTaskPlaceOnEventListRestricted+0x7c>)
9000fbd6:	460c      	mov	r4, r1
9000fbd8:	4615      	mov	r5, r2
9000fbda:	6831      	ldr	r1, [r6, #0]
9000fbdc:	3118      	adds	r1, #24
9000fbde:	f7fd ffdf 	bl	9000dba0 <vListInsertEnd>
		if( xWaitIndefinitely != pdFALSE )
9000fbe2:	b165      	cbz	r5, 9000fbfe <vTaskPlaceOnEventListRestricted+0x2e>
const TickType_t xConstTickCount = xTickCount;
9000fbe4:	4b1a      	ldr	r3, [pc, #104]	; (9000fc50 <vTaskPlaceOnEventListRestricted+0x80>)
9000fbe6:	681b      	ldr	r3, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
9000fbe8:	6830      	ldr	r0, [r6, #0]
9000fbea:	3004      	adds	r0, #4
9000fbec:	f7fe f800 	bl	9000dbf0 <uxListRemove>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
9000fbf0:	6831      	ldr	r1, [r6, #0]
9000fbf2:	4818      	ldr	r0, [pc, #96]	; (9000fc54 <vTaskPlaceOnEventListRestricted+0x84>)
9000fbf4:	3104      	adds	r1, #4
	}
9000fbf6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
9000fbfa:	f7fd bfd1 	b.w	9000dba0 <vListInsertEnd>
const TickType_t xConstTickCount = xTickCount;
9000fbfe:	4b14      	ldr	r3, [pc, #80]	; (9000fc50 <vTaskPlaceOnEventListRestricted+0x80>)
9000fc00:	681d      	ldr	r5, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
9000fc02:	6830      	ldr	r0, [r6, #0]
9000fc04:	3004      	adds	r0, #4
9000fc06:	f7fd fff3 	bl	9000dbf0 <uxListRemove>
			xTimeToWake = xConstTickCount + xTicksToWait;
9000fc0a:	1964      	adds	r4, r4, r5
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
9000fc0c:	6833      	ldr	r3, [r6, #0]
9000fc0e:	605c      	str	r4, [r3, #4]
			if( xTimeToWake < xConstTickCount )
9000fc10:	d214      	bcs.n	9000fc3c <vTaskPlaceOnEventListRestricted+0x6c>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
9000fc12:	4b11      	ldr	r3, [pc, #68]	; (9000fc58 <vTaskPlaceOnEventListRestricted+0x88>)
9000fc14:	6818      	ldr	r0, [r3, #0]
9000fc16:	6831      	ldr	r1, [r6, #0]
9000fc18:	3104      	adds	r1, #4
9000fc1a:	f7fd ffd1 	bl	9000dbc0 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
9000fc1e:	4b0f      	ldr	r3, [pc, #60]	; (9000fc5c <vTaskPlaceOnEventListRestricted+0x8c>)
9000fc20:	681a      	ldr	r2, [r3, #0]
9000fc22:	4294      	cmp	r4, r2
9000fc24:	d200      	bcs.n	9000fc28 <vTaskPlaceOnEventListRestricted+0x58>
					xNextTaskUnblockTime = xTimeToWake;
9000fc26:	601c      	str	r4, [r3, #0]
	}
9000fc28:	bd70      	pop	{r4, r5, r6, pc}
9000fc2a:	f04f 0350 	mov.w	r3, #80	; 0x50
9000fc2e:	f383 8811 	msr	BASEPRI, r3
9000fc32:	f3bf 8f6f 	isb	sy
9000fc36:	f3bf 8f4f 	dsb	sy
		configASSERT( pxEventList );
9000fc3a:	e7fe      	b.n	9000fc3a <vTaskPlaceOnEventListRestricted+0x6a>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
9000fc3c:	4b08      	ldr	r3, [pc, #32]	; (9000fc60 <vTaskPlaceOnEventListRestricted+0x90>)
9000fc3e:	6818      	ldr	r0, [r3, #0]
9000fc40:	6831      	ldr	r1, [r6, #0]
	}
9000fc42:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
9000fc46:	3104      	adds	r1, #4
9000fc48:	f7fd bfba 	b.w	9000dbc0 <vListInsert>
9000fc4c:	24024bf0 	.word	0x24024bf0
9000fc50:	240250e4 	.word	0x240250e4
9000fc54:	240250bc 	.word	0x240250bc
9000fc58:	24024bf4 	.word	0x24024bf4
9000fc5c:	24025098 	.word	0x24025098
9000fc60:	24024bf8 	.word	0x24024bf8

9000fc64 <xTaskRemoveFromEventList>:
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
9000fc64:	68c3      	ldr	r3, [r0, #12]
{
9000fc66:	b530      	push	{r4, r5, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
9000fc68:	68dc      	ldr	r4, [r3, #12]
{
9000fc6a:	b083      	sub	sp, #12
	configASSERT( pxUnblockedTCB );
9000fc6c:	b35c      	cbz	r4, 9000fcc6 <xTaskRemoveFromEventList+0x62>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
9000fc6e:	f104 0518 	add.w	r5, r4, #24
9000fc72:	4628      	mov	r0, r5
9000fc74:	f7fd ffbc 	bl	9000dbf0 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
9000fc78:	4b19      	ldr	r3, [pc, #100]	; (9000fce0 <xTaskRemoveFromEventList+0x7c>)
9000fc7a:	681b      	ldr	r3, [r3, #0]
9000fc7c:	b17b      	cbz	r3, 9000fc9e <xTaskRemoveFromEventList+0x3a>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
9000fc7e:	4629      	mov	r1, r5
9000fc80:	4818      	ldr	r0, [pc, #96]	; (9000fce4 <xTaskRemoveFromEventList+0x80>)
9000fc82:	f7fd ff8d 	bl	9000dba0 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
9000fc86:	4b18      	ldr	r3, [pc, #96]	; (9000fce8 <xTaskRemoveFromEventList+0x84>)
9000fc88:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
9000fc8a:	681b      	ldr	r3, [r3, #0]
9000fc8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9000fc8e:	429a      	cmp	r2, r3
9000fc90:	d922      	bls.n	9000fcd8 <xTaskRemoveFromEventList+0x74>
		xYieldPending = pdTRUE;
9000fc92:	2301      	movs	r3, #1
9000fc94:	4a15      	ldr	r2, [pc, #84]	; (9000fcec <xTaskRemoveFromEventList+0x88>)
		xReturn = pdTRUE;
9000fc96:	4618      	mov	r0, r3
		xYieldPending = pdTRUE;
9000fc98:	6013      	str	r3, [r2, #0]
}
9000fc9a:	b003      	add	sp, #12
9000fc9c:	bd30      	pop	{r4, r5, pc}
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
9000fc9e:	1d21      	adds	r1, r4, #4
9000fca0:	4608      	mov	r0, r1
9000fca2:	9101      	str	r1, [sp, #4]
9000fca4:	f7fd ffa4 	bl	9000dbf0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
9000fca8:	4a11      	ldr	r2, [pc, #68]	; (9000fcf0 <xTaskRemoveFromEventList+0x8c>)
9000fcaa:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
9000fcac:	6810      	ldr	r0, [r2, #0]
9000fcae:	9901      	ldr	r1, [sp, #4]
9000fcb0:	4283      	cmp	r3, r0
9000fcb2:	d900      	bls.n	9000fcb6 <xTaskRemoveFromEventList+0x52>
9000fcb4:	6013      	str	r3, [r2, #0]
9000fcb6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
9000fcba:	480e      	ldr	r0, [pc, #56]	; (9000fcf4 <xTaskRemoveFromEventList+0x90>)
9000fcbc:	eb00 0083 	add.w	r0, r0, r3, lsl #2
9000fcc0:	f7fd ff6e 	bl	9000dba0 <vListInsertEnd>
9000fcc4:	e7df      	b.n	9000fc86 <xTaskRemoveFromEventList+0x22>
9000fcc6:	f04f 0350 	mov.w	r3, #80	; 0x50
9000fcca:	f383 8811 	msr	BASEPRI, r3
9000fcce:	f3bf 8f6f 	isb	sy
9000fcd2:	f3bf 8f4f 	dsb	sy
	configASSERT( pxUnblockedTCB );
9000fcd6:	e7fe      	b.n	9000fcd6 <xTaskRemoveFromEventList+0x72>
		xReturn = pdFALSE;
9000fcd8:	2000      	movs	r0, #0
}
9000fcda:	b003      	add	sp, #12
9000fcdc:	bd30      	pop	{r4, r5, pc}
9000fcde:	bf00      	nop
9000fce0:	24025064 	.word	0x24025064
9000fce4:	240250a4 	.word	0x240250a4
9000fce8:	24024bf0 	.word	0x24024bf0
9000fcec:	240250e8 	.word	0x240250e8
9000fcf0:	2402506c 	.word	0x2402506c
9000fcf4:	24024bfc 	.word	0x24024bfc

9000fcf8 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
9000fcf8:	4a03      	ldr	r2, [pc, #12]	; (9000fd08 <vTaskInternalSetTimeOutState+0x10>)
	pxTimeOut->xTimeOnEntering = xTickCount;
9000fcfa:	4b04      	ldr	r3, [pc, #16]	; (9000fd0c <vTaskInternalSetTimeOutState+0x14>)
	pxTimeOut->xOverflowCount = xNumOfOverflows;
9000fcfc:	6812      	ldr	r2, [r2, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
9000fcfe:	681b      	ldr	r3, [r3, #0]
9000fd00:	e9c0 2300 	strd	r2, r3, [r0]
}
9000fd04:	4770      	bx	lr
9000fd06:	bf00      	nop
9000fd08:	2402509c 	.word	0x2402509c
9000fd0c:	240250e4 	.word	0x240250e4

9000fd10 <xTaskCheckForTimeOut>:
	configASSERT( pxTimeOut );
9000fd10:	b328      	cbz	r0, 9000fd5e <xTaskCheckForTimeOut+0x4e>
{
9000fd12:	b5f0      	push	{r4, r5, r6, r7, lr}
9000fd14:	460d      	mov	r5, r1
9000fd16:	b083      	sub	sp, #12
	configASSERT( pxTicksToWait );
9000fd18:	b1c1      	cbz	r1, 9000fd4c <xTaskCheckForTimeOut+0x3c>
9000fd1a:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
9000fd1c:	f7fd ffea 	bl	9000dcf4 <vPortEnterCritical>
			if( *pxTicksToWait == portMAX_DELAY )
9000fd20:	682b      	ldr	r3, [r5, #0]
		const TickType_t xConstTickCount = xTickCount;
9000fd22:	4a1d      	ldr	r2, [pc, #116]	; (9000fd98 <xTaskCheckForTimeOut+0x88>)
			if( *pxTicksToWait == portMAX_DELAY )
9000fd24:	1c58      	adds	r0, r3, #1
		const TickType_t xConstTickCount = xTickCount;
9000fd26:	6811      	ldr	r1, [r2, #0]
			if( *pxTicksToWait == portMAX_DELAY )
9000fd28:	d030      	beq.n	9000fd8c <xTaskCheckForTimeOut+0x7c>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
9000fd2a:	f8df c070 	ldr.w	ip, [pc, #112]	; 9000fd9c <xTaskCheckForTimeOut+0x8c>
9000fd2e:	6826      	ldr	r6, [r4, #0]
9000fd30:	f8dc 7000 	ldr.w	r7, [ip]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
9000fd34:	6860      	ldr	r0, [r4, #4]
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
9000fd36:	42be      	cmp	r6, r7
9000fd38:	d01a      	beq.n	9000fd70 <xTaskCheckForTimeOut+0x60>
9000fd3a:	4288      	cmp	r0, r1
9000fd3c:	d818      	bhi.n	9000fd70 <xTaskCheckForTimeOut+0x60>
			xReturn = pdTRUE;
9000fd3e:	2001      	movs	r0, #1
9000fd40:	9001      	str	r0, [sp, #4]
	taskEXIT_CRITICAL();
9000fd42:	f7fd fff9 	bl	9000dd38 <vPortExitCritical>
}
9000fd46:	9801      	ldr	r0, [sp, #4]
9000fd48:	b003      	add	sp, #12
9000fd4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
9000fd4c:	f04f 0350 	mov.w	r3, #80	; 0x50
9000fd50:	f383 8811 	msr	BASEPRI, r3
9000fd54:	f3bf 8f6f 	isb	sy
9000fd58:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTicksToWait );
9000fd5c:	e7fe      	b.n	9000fd5c <xTaskCheckForTimeOut+0x4c>
9000fd5e:	f04f 0350 	mov.w	r3, #80	; 0x50
9000fd62:	f383 8811 	msr	BASEPRI, r3
9000fd66:	f3bf 8f6f 	isb	sy
9000fd6a:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTimeOut );
9000fd6e:	e7fe      	b.n	9000fd6e <xTaskCheckForTimeOut+0x5e>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
9000fd70:	eba1 0e00 	sub.w	lr, r1, r0
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
9000fd74:	4573      	cmp	r3, lr
9000fd76:	d90b      	bls.n	9000fd90 <xTaskCheckForTimeOut+0x80>
			*pxTicksToWait -= xElapsedTime;
9000fd78:	1a5b      	subs	r3, r3, r1
	pxTimeOut->xOverflowCount = xNumOfOverflows;
9000fd7a:	f8dc 1000 	ldr.w	r1, [ip]
	pxTimeOut->xTimeOnEntering = xTickCount;
9000fd7e:	6812      	ldr	r2, [r2, #0]
			*pxTicksToWait -= xElapsedTime;
9000fd80:	4403      	add	r3, r0
			xReturn = pdFALSE;
9000fd82:	2000      	movs	r0, #0
			*pxTicksToWait -= xElapsedTime;
9000fd84:	602b      	str	r3, [r5, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
9000fd86:	e9c4 1200 	strd	r1, r2, [r4]
			xReturn = pdFALSE;
9000fd8a:	e7d9      	b.n	9000fd40 <xTaskCheckForTimeOut+0x30>
				xReturn = pdFALSE;
9000fd8c:	2000      	movs	r0, #0
9000fd8e:	e7d7      	b.n	9000fd40 <xTaskCheckForTimeOut+0x30>
			*pxTicksToWait = 0;
9000fd90:	2300      	movs	r3, #0
			xReturn = pdTRUE;
9000fd92:	2001      	movs	r0, #1
			*pxTicksToWait = 0;
9000fd94:	602b      	str	r3, [r5, #0]
			xReturn = pdTRUE;
9000fd96:	e7d3      	b.n	9000fd40 <xTaskCheckForTimeOut+0x30>
9000fd98:	240250e4 	.word	0x240250e4
9000fd9c:	2402509c 	.word	0x2402509c

9000fda0 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
9000fda0:	4b01      	ldr	r3, [pc, #4]	; (9000fda8 <vTaskMissedYield+0x8>)
9000fda2:	2201      	movs	r2, #1
9000fda4:	601a      	str	r2, [r3, #0]
}
9000fda6:	4770      	bx	lr
9000fda8:	240250e8 	.word	0x240250e8

9000fdac <xTaskGetCurrentTaskHandle>:
		xReturn = pxCurrentTCB;
9000fdac:	4b01      	ldr	r3, [pc, #4]	; (9000fdb4 <xTaskGetCurrentTaskHandle+0x8>)
9000fdae:	6818      	ldr	r0, [r3, #0]
	}
9000fdb0:	4770      	bx	lr
9000fdb2:	bf00      	nop
9000fdb4:	24024bf0 	.word	0x24024bf0

9000fdb8 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
9000fdb8:	4b05      	ldr	r3, [pc, #20]	; (9000fdd0 <xTaskGetSchedulerState+0x18>)
9000fdba:	681b      	ldr	r3, [r3, #0]
9000fdbc:	b133      	cbz	r3, 9000fdcc <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
9000fdbe:	4b05      	ldr	r3, [pc, #20]	; (9000fdd4 <xTaskGetSchedulerState+0x1c>)
9000fdc0:	6818      	ldr	r0, [r3, #0]
9000fdc2:	fab0 f080 	clz	r0, r0
9000fdc6:	0940      	lsrs	r0, r0, #5
9000fdc8:	0040      	lsls	r0, r0, #1
9000fdca:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
9000fdcc:	2001      	movs	r0, #1
	}
9000fdce:	4770      	bx	lr
9000fdd0:	240250b8 	.word	0x240250b8
9000fdd4:	24025064 	.word	0x24025064

9000fdd8 <xTaskPriorityInherit>:
	{
9000fdd8:	b570      	push	{r4, r5, r6, lr}
		if( pxMutexHolder != NULL )
9000fdda:	4604      	mov	r4, r0
	{
9000fddc:	b082      	sub	sp, #8
		if( pxMutexHolder != NULL )
9000fdde:	b1c8      	cbz	r0, 9000fe14 <xTaskPriorityInherit+0x3c>
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
9000fde0:	4d1d      	ldr	r5, [pc, #116]	; (9000fe58 <xTaskPriorityInherit+0x80>)
9000fde2:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
9000fde4:	682a      	ldr	r2, [r5, #0]
9000fde6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
9000fde8:	4293      	cmp	r3, r2
9000fdea:	d215      	bcs.n	9000fe18 <xTaskPriorityInherit+0x40>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
9000fdec:	6982      	ldr	r2, [r0, #24]
9000fdee:	2a00      	cmp	r2, #0
9000fdf0:	db04      	blt.n	9000fdfc <xTaskPriorityInherit+0x24>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
9000fdf2:	682a      	ldr	r2, [r5, #0]
9000fdf4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
9000fdf6:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
9000fdfa:	6182      	str	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
9000fdfc:	4e17      	ldr	r6, [pc, #92]	; (9000fe5c <xTaskPriorityInherit+0x84>)
9000fdfe:	eb03 0383 	add.w	r3, r3, r3, lsl #2
9000fe02:	6962      	ldr	r2, [r4, #20]
9000fe04:	eb06 0383 	add.w	r3, r6, r3, lsl #2
9000fe08:	429a      	cmp	r2, r3
9000fe0a:	d00e      	beq.n	9000fe2a <xTaskPriorityInherit+0x52>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
9000fe0c:	682b      	ldr	r3, [r5, #0]
				xReturn = pdTRUE;
9000fe0e:	2001      	movs	r0, #1
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
9000fe10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9000fe12:	62e3      	str	r3, [r4, #44]	; 0x2c
	}
9000fe14:	b002      	add	sp, #8
9000fe16:	bd70      	pop	{r4, r5, r6, pc}
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
9000fe18:	682b      	ldr	r3, [r5, #0]
9000fe1a:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
9000fe1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9000fe1e:	4298      	cmp	r0, r3
9000fe20:	bf2c      	ite	cs
9000fe22:	2000      	movcs	r0, #0
9000fe24:	2001      	movcc	r0, #1
	}
9000fe26:	b002      	add	sp, #8
9000fe28:	bd70      	pop	{r4, r5, r6, pc}
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
9000fe2a:	1d21      	adds	r1, r4, #4
9000fe2c:	4608      	mov	r0, r1
9000fe2e:	9101      	str	r1, [sp, #4]
9000fe30:	f7fd fede 	bl	9000dbf0 <uxListRemove>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
9000fe34:	682a      	ldr	r2, [r5, #0]
					prvAddTaskToReadyList( pxMutexHolderTCB );
9000fe36:	4b0a      	ldr	r3, [pc, #40]	; (9000fe60 <xTaskPriorityInherit+0x88>)
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
9000fe38:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
9000fe3a:	681a      	ldr	r2, [r3, #0]
9000fe3c:	9901      	ldr	r1, [sp, #4]
9000fe3e:	4290      	cmp	r0, r2
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
9000fe40:	62e0      	str	r0, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
9000fe42:	d900      	bls.n	9000fe46 <xTaskPriorityInherit+0x6e>
9000fe44:	6018      	str	r0, [r3, #0]
9000fe46:	eb00 0080 	add.w	r0, r0, r0, lsl #2
9000fe4a:	eb06 0080 	add.w	r0, r6, r0, lsl #2
9000fe4e:	f7fd fea7 	bl	9000dba0 <vListInsertEnd>
				xReturn = pdTRUE;
9000fe52:	2001      	movs	r0, #1
9000fe54:	e7de      	b.n	9000fe14 <xTaskPriorityInherit+0x3c>
9000fe56:	bf00      	nop
9000fe58:	24024bf0 	.word	0x24024bf0
9000fe5c:	24024bfc 	.word	0x24024bfc
9000fe60:	2402506c 	.word	0x2402506c

9000fe64 <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
9000fe64:	b318      	cbz	r0, 9000feae <xTaskPriorityDisinherit+0x4a>
			configASSERT( pxTCB == pxCurrentTCB );
9000fe66:	4b1f      	ldr	r3, [pc, #124]	; (9000fee4 <xTaskPriorityDisinherit+0x80>)
	{
9000fe68:	b510      	push	{r4, lr}
			configASSERT( pxTCB == pxCurrentTCB );
9000fe6a:	681c      	ldr	r4, [r3, #0]
	{
9000fe6c:	b082      	sub	sp, #8
			configASSERT( pxTCB == pxCurrentTCB );
9000fe6e:	4284      	cmp	r4, r0
9000fe70:	d008      	beq.n	9000fe84 <xTaskPriorityDisinherit+0x20>
9000fe72:	f04f 0350 	mov.w	r3, #80	; 0x50
9000fe76:	f383 8811 	msr	BASEPRI, r3
9000fe7a:	f3bf 8f6f 	isb	sy
9000fe7e:	f3bf 8f4f 	dsb	sy
9000fe82:	e7fe      	b.n	9000fe82 <xTaskPriorityDisinherit+0x1e>
			configASSERT( pxTCB->uxMutexesHeld );
9000fe84:	6d23      	ldr	r3, [r4, #80]	; 0x50
9000fe86:	b14b      	cbz	r3, 9000fe9c <xTaskPriorityDisinherit+0x38>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
9000fe88:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
			( pxTCB->uxMutexesHeld )--;
9000fe8a:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
9000fe8c:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
			( pxTCB->uxMutexesHeld )--;
9000fe8e:	6523      	str	r3, [r4, #80]	; 0x50
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
9000fe90:	4291      	cmp	r1, r2
9000fe92:	d000      	beq.n	9000fe96 <xTaskPriorityDisinherit+0x32>
9000fe94:	b16b      	cbz	r3, 9000feb2 <xTaskPriorityDisinherit+0x4e>
	BaseType_t xReturn = pdFALSE;
9000fe96:	2000      	movs	r0, #0
	}
9000fe98:	b002      	add	sp, #8
9000fe9a:	bd10      	pop	{r4, pc}
9000fe9c:	f04f 0350 	mov.w	r3, #80	; 0x50
9000fea0:	f383 8811 	msr	BASEPRI, r3
9000fea4:	f3bf 8f6f 	isb	sy
9000fea8:	f3bf 8f4f 	dsb	sy
			configASSERT( pxTCB->uxMutexesHeld );
9000feac:	e7fe      	b.n	9000feac <xTaskPriorityDisinherit+0x48>
	BaseType_t xReturn = pdFALSE;
9000feae:	2000      	movs	r0, #0
	}
9000feb0:	4770      	bx	lr
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
9000feb2:	1d21      	adds	r1, r4, #4
9000feb4:	4608      	mov	r0, r1
9000feb6:	9101      	str	r1, [sp, #4]
9000feb8:	f7fd fe9a 	bl	9000dbf0 <uxListRemove>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
9000febc:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
					prvAddTaskToReadyList( pxTCB );
9000febe:	4b0a      	ldr	r3, [pc, #40]	; (9000fee8 <xTaskPriorityDisinherit+0x84>)
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
9000fec0:	f1c0 0238 	rsb	r2, r0, #56	; 0x38
					prvAddTaskToReadyList( pxTCB );
9000fec4:	9901      	ldr	r1, [sp, #4]
					pxTCB->uxPriority = pxTCB->uxBasePriority;
9000fec6:	62e0      	str	r0, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
9000fec8:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
9000feca:	681a      	ldr	r2, [r3, #0]
9000fecc:	4290      	cmp	r0, r2
9000fece:	d900      	bls.n	9000fed2 <xTaskPriorityDisinherit+0x6e>
9000fed0:	6018      	str	r0, [r3, #0]
9000fed2:	4b06      	ldr	r3, [pc, #24]	; (9000feec <xTaskPriorityDisinherit+0x88>)
9000fed4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
9000fed8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
9000fedc:	f7fd fe60 	bl	9000dba0 <vListInsertEnd>
					xReturn = pdTRUE;
9000fee0:	2001      	movs	r0, #1
		return xReturn;
9000fee2:	e7d9      	b.n	9000fe98 <xTaskPriorityDisinherit+0x34>
9000fee4:	24024bf0 	.word	0x24024bf0
9000fee8:	2402506c 	.word	0x2402506c
9000feec:	24024bfc 	.word	0x24024bfc

9000fef0 <vTaskPriorityDisinheritAfterTimeout>:
		if( pxMutexHolder != NULL )
9000fef0:	2800      	cmp	r0, #0
9000fef2:	d040      	beq.n	9000ff76 <vTaskPriorityDisinheritAfterTimeout+0x86>
			configASSERT( pxTCB->uxMutexesHeld );
9000fef4:	6d03      	ldr	r3, [r0, #80]	; 0x50
	{
9000fef6:	b530      	push	{r4, r5, lr}
9000fef8:	4604      	mov	r4, r0
9000fefa:	b083      	sub	sp, #12
			configASSERT( pxTCB->uxMutexesHeld );
9000fefc:	b153      	cbz	r3, 9000ff14 <vTaskPriorityDisinheritAfterTimeout+0x24>
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
9000fefe:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
			if( pxTCB->uxPriority != uxPriorityToUse )
9000ff00:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
9000ff02:	4281      	cmp	r1, r0
9000ff04:	bf38      	it	cc
9000ff06:	4601      	movcc	r1, r0
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
9000ff08:	2b01      	cmp	r3, #1
9000ff0a:	d101      	bne.n	9000ff10 <vTaskPriorityDisinheritAfterTimeout+0x20>
9000ff0c:	428a      	cmp	r2, r1
9000ff0e:	d10a      	bne.n	9000ff26 <vTaskPriorityDisinheritAfterTimeout+0x36>
	}
9000ff10:	b003      	add	sp, #12
9000ff12:	bd30      	pop	{r4, r5, pc}
9000ff14:	f04f 0350 	mov.w	r3, #80	; 0x50
9000ff18:	f383 8811 	msr	BASEPRI, r3
9000ff1c:	f3bf 8f6f 	isb	sy
9000ff20:	f3bf 8f4f 	dsb	sy
			configASSERT( pxTCB->uxMutexesHeld );
9000ff24:	e7fe      	b.n	9000ff24 <vTaskPriorityDisinheritAfterTimeout+0x34>
					configASSERT( pxTCB != pxCurrentTCB );
9000ff26:	4b19      	ldr	r3, [pc, #100]	; (9000ff8c <vTaskPriorityDisinheritAfterTimeout+0x9c>)
9000ff28:	681b      	ldr	r3, [r3, #0]
9000ff2a:	42a3      	cmp	r3, r4
9000ff2c:	d024      	beq.n	9000ff78 <vTaskPriorityDisinheritAfterTimeout+0x88>
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
9000ff2e:	69a3      	ldr	r3, [r4, #24]
					pxTCB->uxPriority = uxPriorityToUse;
9000ff30:	62e1      	str	r1, [r4, #44]	; 0x2c
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
9000ff32:	2b00      	cmp	r3, #0
9000ff34:	db02      	blt.n	9000ff3c <vTaskPriorityDisinheritAfterTimeout+0x4c>
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
9000ff36:	f1c1 0138 	rsb	r1, r1, #56	; 0x38
9000ff3a:	61a1      	str	r1, [r4, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
9000ff3c:	4d14      	ldr	r5, [pc, #80]	; (9000ff90 <vTaskPriorityDisinheritAfterTimeout+0xa0>)
9000ff3e:	eb02 0282 	add.w	r2, r2, r2, lsl #2
9000ff42:	6961      	ldr	r1, [r4, #20]
9000ff44:	eb05 0382 	add.w	r3, r5, r2, lsl #2
9000ff48:	4299      	cmp	r1, r3
9000ff4a:	d1e1      	bne.n	9000ff10 <vTaskPriorityDisinheritAfterTimeout+0x20>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
9000ff4c:	1d21      	adds	r1, r4, #4
9000ff4e:	4608      	mov	r0, r1
9000ff50:	9101      	str	r1, [sp, #4]
9000ff52:	f7fd fe4d 	bl	9000dbf0 <uxListRemove>
						prvAddTaskToReadyList( pxTCB );
9000ff56:	4b0f      	ldr	r3, [pc, #60]	; (9000ff94 <vTaskPriorityDisinheritAfterTimeout+0xa4>)
9000ff58:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
9000ff5a:	681a      	ldr	r2, [r3, #0]
9000ff5c:	9901      	ldr	r1, [sp, #4]
9000ff5e:	4290      	cmp	r0, r2
9000ff60:	d900      	bls.n	9000ff64 <vTaskPriorityDisinheritAfterTimeout+0x74>
9000ff62:	6018      	str	r0, [r3, #0]
9000ff64:	eb00 0080 	add.w	r0, r0, r0, lsl #2
9000ff68:	eb05 0080 	add.w	r0, r5, r0, lsl #2
	}
9000ff6c:	b003      	add	sp, #12
9000ff6e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
						prvAddTaskToReadyList( pxTCB );
9000ff72:	f7fd be15 	b.w	9000dba0 <vListInsertEnd>
9000ff76:	4770      	bx	lr
9000ff78:	f04f 0350 	mov.w	r3, #80	; 0x50
9000ff7c:	f383 8811 	msr	BASEPRI, r3
9000ff80:	f3bf 8f6f 	isb	sy
9000ff84:	f3bf 8f4f 	dsb	sy
					configASSERT( pxTCB != pxCurrentTCB );
9000ff88:	e7fe      	b.n	9000ff88 <vTaskPriorityDisinheritAfterTimeout+0x98>
9000ff8a:	bf00      	nop
9000ff8c:	24024bf0 	.word	0x24024bf0
9000ff90:	24024bfc 	.word	0x24024bfc
9000ff94:	2402506c 	.word	0x2402506c

9000ff98 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
9000ff98:	4b04      	ldr	r3, [pc, #16]	; (9000ffac <pvTaskIncrementMutexHeldCount+0x14>)
9000ff9a:	681a      	ldr	r2, [r3, #0]
9000ff9c:	b11a      	cbz	r2, 9000ffa6 <pvTaskIncrementMutexHeldCount+0xe>
			( pxCurrentTCB->uxMutexesHeld )++;
9000ff9e:	6819      	ldr	r1, [r3, #0]
9000ffa0:	6d0a      	ldr	r2, [r1, #80]	; 0x50
9000ffa2:	3201      	adds	r2, #1
9000ffa4:	650a      	str	r2, [r1, #80]	; 0x50
		return pxCurrentTCB;
9000ffa6:	6818      	ldr	r0, [r3, #0]
	}
9000ffa8:	4770      	bx	lr
9000ffaa:	bf00      	nop
9000ffac:	24024bf0 	.word	0x24024bf0

9000ffb0 <prvSwitchTimerLists>:
	}
}
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
9000ffb0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
9000ffb4:	4e22      	ldr	r6, [pc, #136]	; (90010040 <prvSwitchTimerLists+0x90>)
9000ffb6:	b085      	sub	sp, #20
	if( xTimerQueue != NULL )
9000ffb8:	f8df 908c 	ldr.w	r9, [pc, #140]	; 90010048 <prvSwitchTimerLists+0x98>
		xMessage.xMessageID = xCommandID;
9000ffbc:	f04f 0800 	mov.w	r8, #0

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
9000ffc0:	e00d      	b.n	9000ffde <prvSwitchTimerLists+0x2e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
9000ffc2:	68db      	ldr	r3, [r3, #12]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
9000ffc4:	68dc      	ldr	r4, [r3, #12]
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
9000ffc6:	681f      	ldr	r7, [r3, #0]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
9000ffc8:	1d25      	adds	r5, r4, #4
9000ffca:	4628      	mov	r0, r5
9000ffcc:	f7fd fe10 	bl	9000dbf0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
9000ffd0:	6a23      	ldr	r3, [r4, #32]
9000ffd2:	4620      	mov	r0, r4
9000ffd4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
9000ffd6:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
9000ffda:	075b      	lsls	r3, r3, #29
9000ffdc:	d40a      	bmi.n	9000fff4 <prvSwitchTimerLists+0x44>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
9000ffde:	6833      	ldr	r3, [r6, #0]
9000ffe0:	681a      	ldr	r2, [r3, #0]
9000ffe2:	2a00      	cmp	r2, #0
9000ffe4:	d1ed      	bne.n	9000ffc2 <prvSwitchTimerLists+0x12>
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
	pxCurrentTimerList = pxOverflowTimerList;
9000ffe6:	4a17      	ldr	r2, [pc, #92]	; (90010044 <prvSwitchTimerLists+0x94>)
9000ffe8:	6811      	ldr	r1, [r2, #0]
	pxOverflowTimerList = pxTemp;
9000ffea:	6013      	str	r3, [r2, #0]
	pxCurrentTimerList = pxOverflowTimerList;
9000ffec:	6031      	str	r1, [r6, #0]
}
9000ffee:	b005      	add	sp, #20
9000fff0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
9000fff4:	69a3      	ldr	r3, [r4, #24]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
9000fff6:	4629      	mov	r1, r5
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
9000fff8:	443b      	add	r3, r7
			if( xReloadTime > xNextExpireTime )
9000fffa:	429f      	cmp	r7, r3
9000fffc:	d205      	bcs.n	9001000a <prvSwitchTimerLists+0x5a>
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
9000fffe:	6830      	ldr	r0, [r6, #0]
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
90010000:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
90010002:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
90010004:	f7fd fddc 	bl	9000dbc0 <vListInsert>
90010008:	e7e9      	b.n	9000ffde <prvSwitchTimerLists+0x2e>
	if( xTimerQueue != NULL )
9001000a:	f8d9 3000 	ldr.w	r3, [r9]
9001000e:	b16b      	cbz	r3, 9001002c <prvSwitchTimerLists+0x7c>
		xMessage.u.xTimerParameters.pxTimer = xTimer;
90010010:	9402      	str	r4, [sp, #8]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
90010012:	e9cd 8700 	strd	r8, r7, [sp]
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
90010016:	f7ff fecf 	bl	9000fdb8 <xTaskGetSchedulerState>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
9001001a:	2300      	movs	r3, #0
9001001c:	4669      	mov	r1, sp
9001001e:	f8d9 0000 	ldr.w	r0, [r9]
90010022:	461a      	mov	r2, r3
90010024:	f7fe f95e 	bl	9000e2e4 <xQueueGenericSend>
				configASSERT( xResult );
90010028:	2800      	cmp	r0, #0
9001002a:	d1d8      	bne.n	9000ffde <prvSwitchTimerLists+0x2e>
9001002c:	f04f 0350 	mov.w	r3, #80	; 0x50
90010030:	f383 8811 	msr	BASEPRI, r3
90010034:	f3bf 8f6f 	isb	sy
90010038:	f3bf 8f4f 	dsb	sy
9001003c:	e7fe      	b.n	9001003c <prvSwitchTimerLists+0x8c>
9001003e:	bf00      	nop
90010040:	240250ec 	.word	0x240250ec
90010044:	240250f0 	.word	0x240250f0
90010048:	24025210 	.word	0x24025210

9001004c <prvTimerTask>:
{
9001004c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90010050:	4e9f      	ldr	r6, [pc, #636]	; (900102d0 <prvTimerTask+0x284>)
90010052:	b089      	sub	sp, #36	; 0x24
90010054:	4d9f      	ldr	r5, [pc, #636]	; (900102d4 <prvTimerTask+0x288>)
					portYIELD_WITHIN_API();
90010056:	f04f 29e0 	mov.w	r9, #3758153728	; 0xe000e000
9001005a:	4c9f      	ldr	r4, [pc, #636]	; (900102d8 <prvTimerTask+0x28c>)
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
9001005c:	6833      	ldr	r3, [r6, #0]
9001005e:	681f      	ldr	r7, [r3, #0]
90010060:	2f00      	cmp	r7, #0
90010062:	f000 80b2 	beq.w	900101ca <prvTimerTask+0x17e>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
90010066:	68db      	ldr	r3, [r3, #12]
90010068:	681f      	ldr	r7, [r3, #0]
	vTaskSuspendAll();
9001006a:	f7ff fccf 	bl	9000fa0c <vTaskSuspendAll>
	xTimeNow = xTaskGetTickCount();
9001006e:	f7ff fce5 	bl	9000fa3c <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
90010072:	682a      	ldr	r2, [r5, #0]
	xTimeNow = xTaskGetTickCount();
90010074:	4682      	mov	sl, r0
	if( xTimeNow < xLastTime )
90010076:	4290      	cmp	r0, r2
90010078:	f0c0 80af 	bcc.w	900101da <prvTimerTask+0x18e>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
9001007c:	4287      	cmp	r7, r0
	xLastTime = xTimeNow;
9001007e:	6028      	str	r0, [r5, #0]
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
90010080:	f200 80d0 	bhi.w	90010224 <prvTimerTask+0x1d8>
				( void ) xTaskResumeAll();
90010084:	f7ff fcca 	bl	9000fa1c <xTaskResumeAll>
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
90010088:	6832      	ldr	r2, [r6, #0]
9001008a:	68d2      	ldr	r2, [r2, #12]
9001008c:	f8d2 b00c 	ldr.w	fp, [r2, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
90010090:	f10b 0804 	add.w	r8, fp, #4
90010094:	4640      	mov	r0, r8
90010096:	f7fd fdab 	bl	9000dbf0 <uxListRemove>
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
9001009a:	f89b 0028 	ldrb.w	r0, [fp, #40]	; 0x28
9001009e:	0741      	lsls	r1, r0, #29
900100a0:	f100 80d0 	bmi.w	90010244 <prvTimerTask+0x1f8>
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
900100a4:	f020 0001 	bic.w	r0, r0, #1
900100a8:	f88b 0028 	strb.w	r0, [fp, #40]	; 0x28
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
900100ac:	f8db 3020 	ldr.w	r3, [fp, #32]
900100b0:	4658      	mov	r0, fp
900100b2:	4798      	blx	r3
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
900100b4:	2200      	movs	r2, #0
900100b6:	4669      	mov	r1, sp
900100b8:	6820      	ldr	r0, [r4, #0]
900100ba:	f7fe fbff 	bl	9000e8bc <xQueueReceive>
900100be:	2800      	cmp	r0, #0
900100c0:	d0cc      	beq.n	9001005c <prvTimerTask+0x10>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
900100c2:	9b00      	ldr	r3, [sp, #0]
900100c4:	2b00      	cmp	r3, #0
900100c6:	db77      	blt.n	900101b8 <prvTimerTask+0x16c>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
900100c8:	9f02      	ldr	r7, [sp, #8]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
900100ca:	697b      	ldr	r3, [r7, #20]
900100cc:	b113      	cbz	r3, 900100d4 <prvTimerTask+0x88>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
900100ce:	1d38      	adds	r0, r7, #4
900100d0:	f7fd fd8e 	bl	9000dbf0 <uxListRemove>
	xTimeNow = xTaskGetTickCount();
900100d4:	f7ff fcb2 	bl	9000fa3c <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
900100d8:	682b      	ldr	r3, [r5, #0]
	xTimeNow = xTaskGetTickCount();
900100da:	4680      	mov	r8, r0
	if( xTimeNow < xLastTime )
900100dc:	4298      	cmp	r0, r3
900100de:	f0c0 8083 	bcc.w	900101e8 <prvTimerTask+0x19c>
			switch( xMessage.xMessageID )
900100e2:	9b00      	ldr	r3, [sp, #0]
	xLastTime = xTimeNow;
900100e4:	f8c5 8000 	str.w	r8, [r5]
			switch( xMessage.xMessageID )
900100e8:	2b09      	cmp	r3, #9
900100ea:	d8e3      	bhi.n	900100b4 <prvTimerTask+0x68>
900100ec:	e8df f003 	tbb	[pc, r3]
900100f0:	54050505 	.word	0x54050505
900100f4:	05055b3e 	.word	0x05055b3e
900100f8:	3e54      	.short	0x3e54
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
900100fa:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
900100fe:	69ba      	ldr	r2, [r7, #24]
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
90010100:	f043 0301 	orr.w	r3, r3, #1
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
90010104:	613f      	str	r7, [r7, #16]
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
90010106:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
9001010a:	9b01      	ldr	r3, [sp, #4]
9001010c:	1899      	adds	r1, r3, r2
9001010e:	bf2c      	ite	cs
90010110:	2001      	movcs	r0, #1
90010112:	2000      	movcc	r0, #0
	if( xNextExpiryTime <= xTimeNow )
90010114:	4541      	cmp	r1, r8
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
90010116:	6079      	str	r1, [r7, #4]
	if( xNextExpiryTime <= xTimeNow )
90010118:	f200 8086 	bhi.w	90010228 <prvTimerTask+0x1dc>
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
9001011c:	eba8 0303 	sub.w	r3, r8, r3
90010120:	429a      	cmp	r2, r3
90010122:	f200 80c0 	bhi.w	900102a6 <prvTimerTask+0x25a>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
90010126:	6a3b      	ldr	r3, [r7, #32]
90010128:	4638      	mov	r0, r7
9001012a:	4798      	blx	r3
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
9001012c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
90010130:	075b      	lsls	r3, r3, #29
90010132:	d5bf      	bpl.n	900100b4 <prvTimerTask+0x68>
	if( xTimerQueue != NULL )
90010134:	6822      	ldr	r2, [r4, #0]
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
90010136:	9901      	ldr	r1, [sp, #4]
90010138:	69bb      	ldr	r3, [r7, #24]
	if( xTimerQueue != NULL )
9001013a:	b172      	cbz	r2, 9001015a <prvTimerTask+0x10e>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
9001013c:	440b      	add	r3, r1
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
9001013e:	e9cd 3705 	strd	r3, r7, [sp, #20]
		xMessage.xMessageID = xCommandID;
90010142:	2300      	movs	r3, #0
90010144:	9304      	str	r3, [sp, #16]
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
90010146:	f7ff fe37 	bl	9000fdb8 <xTaskGetSchedulerState>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
9001014a:	2300      	movs	r3, #0
9001014c:	a904      	add	r1, sp, #16
9001014e:	6820      	ldr	r0, [r4, #0]
90010150:	461a      	mov	r2, r3
90010152:	f7fe f8c7 	bl	9000e2e4 <xQueueGenericSend>
							configASSERT( xResult );
90010156:	2800      	cmp	r0, #0
90010158:	d1ac      	bne.n	900100b4 <prvTimerTask+0x68>
9001015a:	f04f 0350 	mov.w	r3, #80	; 0x50
9001015e:	f383 8811 	msr	BASEPRI, r3
90010162:	f3bf 8f6f 	isb	sy
90010166:	f3bf 8f4f 	dsb	sy
9001016a:	e7fe      	b.n	9001016a <prvTimerTask+0x11e>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
9001016c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
90010170:	f043 0301 	orr.w	r3, r3, #1
90010174:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
90010178:	9b01      	ldr	r3, [sp, #4]
9001017a:	61bb      	str	r3, [r7, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
9001017c:	2b00      	cmp	r3, #0
9001017e:	f000 809e 	beq.w	900102be <prvTimerTask+0x272>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
90010182:	4443      	add	r3, r8
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
90010184:	1d39      	adds	r1, r7, #4
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
90010186:	613f      	str	r7, [r7, #16]
	if( xNextExpiryTime <= xTimeNow )
90010188:	4543      	cmp	r3, r8
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
9001018a:	607b      	str	r3, [r7, #4]
	if( xNextExpiryTime <= xTimeNow )
9001018c:	d856      	bhi.n	9001023c <prvTimerTask+0x1f0>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
9001018e:	4b53      	ldr	r3, [pc, #332]	; (900102dc <prvTimerTask+0x290>)
90010190:	6818      	ldr	r0, [r3, #0]
90010192:	f7fd fd15 	bl	9000dbc0 <vListInsert>
	return xProcessTimerNow;
90010196:	e78d      	b.n	900100b4 <prvTimerTask+0x68>
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
90010198:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
9001019c:	f023 0301 	bic.w	r3, r3, #1
900101a0:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
					break;
900101a4:	e786      	b.n	900100b4 <prvTimerTask+0x68>
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
900101a6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
900101aa:	079a      	lsls	r2, r3, #30
900101ac:	d572      	bpl.n	90010294 <prvTimerTask+0x248>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
900101ae:	f023 0301 	bic.w	r3, r3, #1
900101b2:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
900101b6:	e77d      	b.n	900100b4 <prvTimerTask+0x68>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
900101b8:	9b01      	ldr	r3, [sp, #4]
900101ba:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
900101be:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
900101c0:	9b00      	ldr	r3, [sp, #0]
900101c2:	2b00      	cmp	r3, #0
900101c4:	f6ff af76 	blt.w	900100b4 <prvTimerTask+0x68>
900101c8:	e77e      	b.n	900100c8 <prvTimerTask+0x7c>
	vTaskSuspendAll();
900101ca:	f7ff fc1f 	bl	9000fa0c <vTaskSuspendAll>
	xTimeNow = xTaskGetTickCount();
900101ce:	f7ff fc35 	bl	9000fa3c <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
900101d2:	682a      	ldr	r2, [r5, #0]
	xTimeNow = xTaskGetTickCount();
900101d4:	4682      	mov	sl, r0
	if( xTimeNow < xLastTime )
900101d6:	4282      	cmp	r2, r0
900101d8:	d909      	bls.n	900101ee <prvTimerTask+0x1a2>
		prvSwitchTimerLists();
900101da:	f7ff fee9 	bl	9000ffb0 <prvSwitchTimerLists>
	xLastTime = xTimeNow;
900101de:	f8c5 a000 	str.w	sl, [r5]
			( void ) xTaskResumeAll();
900101e2:	f7ff fc1b 	bl	9000fa1c <xTaskResumeAll>
900101e6:	e765      	b.n	900100b4 <prvTimerTask+0x68>
		prvSwitchTimerLists();
900101e8:	f7ff fee2 	bl	9000ffb0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
900101ec:	e779      	b.n	900100e2 <prvTimerTask+0x96>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
900101ee:	4b3b      	ldr	r3, [pc, #236]	; (900102dc <prvTimerTask+0x290>)
	xLastTime = xTimeNow;
900101f0:	f8c5 a000 	str.w	sl, [r5]
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
900101f4:	681a      	ldr	r2, [r3, #0]
900101f6:	6812      	ldr	r2, [r2, #0]
900101f8:	fab2 f282 	clz	r2, r2
900101fc:	0952      	lsrs	r2, r2, #5
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
900101fe:	eba7 010a 	sub.w	r1, r7, sl
90010202:	6820      	ldr	r0, [r4, #0]
90010204:	f7fe ff4e 	bl	9000f0a4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
90010208:	f7ff fc08 	bl	9000fa1c <xTaskResumeAll>
9001020c:	2800      	cmp	r0, #0
9001020e:	f47f af51 	bne.w	900100b4 <prvTimerTask+0x68>
					portYIELD_WITHIN_API();
90010212:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
90010216:	f8c9 3d04 	str.w	r3, [r9, #3332]	; 0xd04
9001021a:	f3bf 8f4f 	dsb	sy
9001021e:	f3bf 8f6f 	isb	sy
90010222:	e747      	b.n	900100b4 <prvTimerTask+0x68>
90010224:	2200      	movs	r2, #0
90010226:	e7ea      	b.n	900101fe <prvTimerTask+0x1b2>
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
90010228:	4543      	cmp	r3, r8
9001022a:	d902      	bls.n	90010232 <prvTimerTask+0x1e6>
9001022c:	2800      	cmp	r0, #0
9001022e:	f43f af7a 	beq.w	90010126 <prvTimerTask+0xda>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
90010232:	1d39      	adds	r1, r7, #4
90010234:	6830      	ldr	r0, [r6, #0]
90010236:	f7fd fcc3 	bl	9000dbc0 <vListInsert>
	return xProcessTimerNow;
9001023a:	e73b      	b.n	900100b4 <prvTimerTask+0x68>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
9001023c:	6830      	ldr	r0, [r6, #0]
9001023e:	f7fd fcbf 	bl	9000dbc0 <vListInsert>
90010242:	e737      	b.n	900100b4 <prvTimerTask+0x68>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
90010244:	f8db 2018 	ldr.w	r2, [fp, #24]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
90010248:	f8cb b010 	str.w	fp, [fp, #16]
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
9001024c:	18b8      	adds	r0, r7, r2
	if( xNextExpiryTime <= xTimeNow )
9001024e:	4582      	cmp	sl, r0
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
90010250:	f8cb 0004 	str.w	r0, [fp, #4]
	if( xNextExpiryTime <= xTimeNow )
90010254:	d322      	bcc.n	9001029c <prvTimerTask+0x250>
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
90010256:	ebaa 0307 	sub.w	r3, sl, r7
9001025a:	429a      	cmp	r2, r3
9001025c:	d829      	bhi.n	900102b2 <prvTimerTask+0x266>
	if( xTimerQueue != NULL )
9001025e:	6823      	ldr	r3, [r4, #0]
90010260:	b17b      	cbz	r3, 90010282 <prvTimerTask+0x236>
		xMessage.xMessageID = xCommandID;
90010262:	2300      	movs	r3, #0
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
90010264:	9705      	str	r7, [sp, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
90010266:	f8cd b018 	str.w	fp, [sp, #24]
		xMessage.xMessageID = xCommandID;
9001026a:	9304      	str	r3, [sp, #16]
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
9001026c:	f7ff fda4 	bl	9000fdb8 <xTaskGetSchedulerState>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
90010270:	2300      	movs	r3, #0
90010272:	a904      	add	r1, sp, #16
90010274:	6820      	ldr	r0, [r4, #0]
90010276:	461a      	mov	r2, r3
90010278:	f7fe f834 	bl	9000e2e4 <xQueueGenericSend>
			configASSERT( xResult );
9001027c:	2800      	cmp	r0, #0
9001027e:	f47f af15 	bne.w	900100ac <prvTimerTask+0x60>
90010282:	f04f 0350 	mov.w	r3, #80	; 0x50
90010286:	f383 8811 	msr	BASEPRI, r3
9001028a:	f3bf 8f6f 	isb	sy
9001028e:	f3bf 8f4f 	dsb	sy
90010292:	e7fe      	b.n	90010292 <prvTimerTask+0x246>
							vPortFree( pxTimer );
90010294:	4638      	mov	r0, r7
90010296:	f7fd fc0f 	bl	9000dab8 <vPortFree>
9001029a:	e70b      	b.n	900100b4 <prvTimerTask+0x68>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
9001029c:	4641      	mov	r1, r8
9001029e:	6830      	ldr	r0, [r6, #0]
900102a0:	f7fd fc8e 	bl	9000dbc0 <vListInsert>
	return xProcessTimerNow;
900102a4:	e702      	b.n	900100ac <prvTimerTask+0x60>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
900102a6:	4b0d      	ldr	r3, [pc, #52]	; (900102dc <prvTimerTask+0x290>)
900102a8:	1d39      	adds	r1, r7, #4
900102aa:	6818      	ldr	r0, [r3, #0]
900102ac:	f7fd fc88 	bl	9000dbc0 <vListInsert>
	return xProcessTimerNow;
900102b0:	e700      	b.n	900100b4 <prvTimerTask+0x68>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
900102b2:	4b0a      	ldr	r3, [pc, #40]	; (900102dc <prvTimerTask+0x290>)
900102b4:	4641      	mov	r1, r8
900102b6:	6818      	ldr	r0, [r3, #0]
900102b8:	f7fd fc82 	bl	9000dbc0 <vListInsert>
	return xProcessTimerNow;
900102bc:	e6f6      	b.n	900100ac <prvTimerTask+0x60>
900102be:	f04f 0350 	mov.w	r3, #80	; 0x50
900102c2:	f383 8811 	msr	BASEPRI, r3
900102c6:	f3bf 8f6f 	isb	sy
900102ca:	f3bf 8f4f 	dsb	sy
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
900102ce:	e7fe      	b.n	900102ce <prvTimerTask+0x282>
900102d0:	240250ec 	.word	0x240250ec
900102d4:	240251bc 	.word	0x240251bc
900102d8:	24025210 	.word	0x24025210
900102dc:	240250f0 	.word	0x240250f0

900102e0 <xTimerCreateTimerTask>:
{
900102e0:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
	{
		if( xTimerQueue == NULL )
900102e2:	4c23      	ldr	r4, [pc, #140]	; (90010370 <xTimerCreateTimerTask+0x90>)
{
900102e4:	b089      	sub	sp, #36	; 0x24
	taskENTER_CRITICAL();
900102e6:	f7fd fd05 	bl	9000dcf4 <vPortEnterCritical>
		if( xTimerQueue == NULL )
900102ea:	6825      	ldr	r5, [r4, #0]
900102ec:	b335      	cbz	r5, 9001033c <xTimerCreateTimerTask+0x5c>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
900102ee:	f7fd fd23 	bl	9000dd38 <vPortExitCritical>
	if( xTimerQueue != NULL )
900102f2:	6823      	ldr	r3, [r4, #0]
900102f4:	b1cb      	cbz	r3, 9001032a <xTimerCreateTimerTask+0x4a>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
900102f6:	2400      	movs	r4, #0
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
900102f8:	aa07      	add	r2, sp, #28
900102fa:	a906      	add	r1, sp, #24
900102fc:	a805      	add	r0, sp, #20
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
900102fe:	2502      	movs	r5, #2
			StackType_t *pxTimerTaskStackBuffer = NULL;
90010300:	e9cd 4405 	strd	r4, r4, [sp, #20]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
90010304:	f7fd fb0a 	bl	9000d91c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
90010308:	4623      	mov	r3, r4
9001030a:	9a07      	ldr	r2, [sp, #28]
9001030c:	9500      	str	r5, [sp, #0]
9001030e:	e9dd 0105 	ldrd	r0, r1, [sp, #20]
90010312:	e9cd 1001 	strd	r1, r0, [sp, #4]
90010316:	4917      	ldr	r1, [pc, #92]	; (90010374 <xTimerCreateTimerTask+0x94>)
90010318:	4817      	ldr	r0, [pc, #92]	; (90010378 <xTimerCreateTimerTask+0x98>)
9001031a:	f7ff f93f 	bl	9000f59c <xTaskCreateStatic>
9001031e:	4b17      	ldr	r3, [pc, #92]	; (9001037c <xTimerCreateTimerTask+0x9c>)
90010320:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
90010322:	b110      	cbz	r0, 9001032a <xTimerCreateTimerTask+0x4a>
}
90010324:	2001      	movs	r0, #1
90010326:	b009      	add	sp, #36	; 0x24
90010328:	bdf0      	pop	{r4, r5, r6, r7, pc}
9001032a:	f04f 0350 	mov.w	r3, #80	; 0x50
9001032e:	f383 8811 	msr	BASEPRI, r3
90010332:	f3bf 8f6f 	isb	sy
90010336:	f3bf 8f4f 	dsb	sy
	configASSERT( xReturn );
9001033a:	e7fe      	b.n	9001033a <xTimerCreateTimerTask+0x5a>
			vListInitialise( &xActiveTimerList1 );
9001033c:	4f10      	ldr	r7, [pc, #64]	; (90010380 <xTimerCreateTimerTask+0xa0>)
			vListInitialise( &xActiveTimerList2 );
9001033e:	4e11      	ldr	r6, [pc, #68]	; (90010384 <xTimerCreateTimerTask+0xa4>)
			vListInitialise( &xActiveTimerList1 );
90010340:	4638      	mov	r0, r7
90010342:	f7fd fc1d 	bl	9000db80 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
90010346:	4630      	mov	r0, r6
90010348:	f7fd fc1a 	bl	9000db80 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
9001034c:	4a0e      	ldr	r2, [pc, #56]	; (90010388 <xTimerCreateTimerTask+0xa8>)
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
9001034e:	9500      	str	r5, [sp, #0]
90010350:	2110      	movs	r1, #16
			pxCurrentTimerList = &xActiveTimerList1;
90010352:	6017      	str	r7, [r2, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
90010354:	200a      	movs	r0, #10
			pxOverflowTimerList = &xActiveTimerList2;
90010356:	4a0d      	ldr	r2, [pc, #52]	; (9001038c <xTimerCreateTimerTask+0xac>)
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
90010358:	4b0d      	ldr	r3, [pc, #52]	; (90010390 <xTimerCreateTimerTask+0xb0>)
			pxOverflowTimerList = &xActiveTimerList2;
9001035a:	6016      	str	r6, [r2, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
9001035c:	4a0d      	ldr	r2, [pc, #52]	; (90010394 <xTimerCreateTimerTask+0xb4>)
9001035e:	f7fd fe6b 	bl	9000e038 <xQueueGenericCreateStatic>
90010362:	6020      	str	r0, [r4, #0]
				if( xTimerQueue != NULL )
90010364:	2800      	cmp	r0, #0
90010366:	d0c2      	beq.n	900102ee <xTimerCreateTimerTask+0xe>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
90010368:	490b      	ldr	r1, [pc, #44]	; (90010398 <xTimerCreateTimerTask+0xb8>)
9001036a:	f7fe fe73 	bl	9000f054 <vQueueAddToRegistry>
9001036e:	e7be      	b.n	900102ee <xTimerCreateTimerTask+0xe>
90010370:	24025210 	.word	0x24025210
90010374:	90026798 	.word	0x90026798
90010378:	9001004d 	.word	0x9001004d
9001037c:	24025214 	.word	0x24025214
90010380:	24025194 	.word	0x24025194
90010384:	240251a8 	.word	0x240251a8
90010388:	240250ec 	.word	0x240250ec
9001038c:	240250f0 	.word	0x240250f0
90010390:	240251c0 	.word	0x240251c0
90010394:	240250f4 	.word	0x240250f4
90010398:	90026790 	.word	0x90026790

9001039c <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks>:
static uint32_t JPEG_MCU_YCbCr420_ARGB_ConvertBlocks(uint8_t *pInBuffer, 
                                      uint8_t *pOutBuffer, 
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{  
9001039c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  int32_t c_red, c_blue, c_green;
  
  uint8_t *pOutAddr, *pOutAddr2;
  uint8_t *pChrom, *pLum;
  
  numberMCU = DataCount / YCBCR_420_BLOCK_SIZE;
900103a0:	4c82      	ldr	r4, [pc, #520]	; (900105ac <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x210>)
{  
900103a2:	b091      	sub	sp, #68	; 0x44
  numberMCU = DataCount / YCBCR_420_BLOCK_SIZE;
900103a4:	fba4 4303 	umull	r4, r3, r4, r3
{  
900103a8:	910d      	str	r1, [sp, #52]	; 0x34
  numberMCU = DataCount / YCBCR_420_BLOCK_SIZE;
900103aa:	0a19      	lsrs	r1, r3, #8
{  
900103ac:	920b      	str	r2, [sp, #44]	; 0x2c
  currentMCU = BlockIndex;
  

  while(currentMCU < (numberMCU + BlockIndex))
900103ae:	eb02 2313 	add.w	r3, r2, r3, lsr #8
{  
900103b2:	9008      	str	r0, [sp, #32]
  numberMCU = DataCount / YCBCR_420_BLOCK_SIZE;
900103b4:	ee07 1a90 	vmov	s15, r1
  while(currentMCU < (numberMCU + BlockIndex))
900103b8:	4293      	cmp	r3, r2
900103ba:	930f      	str	r3, [sp, #60]	; 0x3c
900103bc:	f240 80f1 	bls.w	900105a2 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x206>
  {
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*16;
900103c0:	4b7b      	ldr	r3, [pc, #492]	; (900105b0 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x214>)
900103c2:	f8df 81fc 	ldr.w	r8, [pc, #508]	; 900105c0 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x224>
    
    yRef = ((currentMCU *16) % JPEG_ConvertorParams.WidthExtend);
    
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
900103c6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*16;
900103c8:	6a59      	ldr	r1, [r3, #36]	; 0x24
      if(i == 8)
      {
        pLum = pInBuffer + 128;
      }
      
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
900103ca:	691b      	ldr	r3, [r3, #16]
900103cc:	f8df 91f4 	ldr.w	r9, [pc, #500]	; 900105c4 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x228>
900103d0:	9305      	str	r3, [sp, #20]
          pLum += 64;                      
        }

        pLum = pLum - 128 + 16;
        
        refline += 2*JPEG_ConvertorParams.ScaledWidth;          
900103d2:	0053      	lsls	r3, r2, #1
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
900103d4:	920a      	str	r2, [sp, #40]	; 0x28
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*16;
900103d6:	910e      	str	r1, [sp, #56]	; 0x38
        refline += 2*JPEG_ConvertorParams.ScaledWidth;          
900103d8:	930c      	str	r3, [sp, #48]	; 0x30
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*16;
900103da:	9a08      	ldr	r2, [sp, #32]
    currentMCU++;
900103dc:	f04f 0e02 	mov.w	lr, #2
900103e0:	990b      	ldr	r1, [sp, #44]	; 0x2c
900103e2:	f502 7080 	add.w	r0, r2, #256	; 0x100
900103e6:	9204      	str	r2, [sp, #16]
900103e8:	010b      	lsls	r3, r1, #4
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*16;
900103ea:	3101      	adds	r1, #1
900103ec:	9006      	str	r0, [sp, #24]
900103ee:	980e      	ldr	r0, [sp, #56]	; 0x38
900103f0:	910b      	str	r1, [sp, #44]	; 0x2c
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
900103f2:	990a      	ldr	r1, [sp, #40]	; 0x28
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*16;
900103f4:	fbb3 f2f0 	udiv	r2, r3, r0
    yRef = ((currentMCU *16) % JPEG_ConvertorParams.WidthExtend);
900103f8:	fb00 3312 	mls	r3, r0, r2, r3
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
900103fc:	fb01 f202 	mul.w	r2, r1, r2
90010400:	005b      	lsls	r3, r3, #1
90010402:	eb03 1302 	add.w	r3, r3, r2, lsl #4
90010406:	9301      	str	r3, [sp, #4]
    for(i= 0; i <  16; i+=2)
90010408:	e009      	b.n	9001041e <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x82>
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
9001040a:	9b05      	ldr	r3, [sp, #20]
9001040c:	9a01      	ldr	r2, [sp, #4]
9001040e:	4293      	cmp	r3, r2
90010410:	d80f      	bhi.n	90010432 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x96>
    for(i= 0; i <  16; i+=2)
90010412:	f1be 0f10 	cmp.w	lr, #16
90010416:	f000 80bb 	beq.w	90010590 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x1f4>
9001041a:	f10e 0e02 	add.w	lr, lr, #2
      if(i == 8)
9001041e:	f1be 0f0a 	cmp.w	lr, #10
90010422:	d1f2      	bne.n	9001040a <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x6e>
        pLum = pInBuffer + 128;
90010424:	9b08      	ldr	r3, [sp, #32]
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
90010426:	9a01      	ldr	r2, [sp, #4]
90010428:	3380      	adds	r3, #128	; 0x80
9001042a:	9304      	str	r3, [sp, #16]
9001042c:	9b05      	ldr	r3, [sp, #20]
9001042e:	4293      	cmp	r3, r2
90010430:	d9f3      	bls.n	9001041a <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x7e>
        pOutAddr = pOutBuffer + refline;
90010432:	9a01      	ldr	r2, [sp, #4]
        pOutAddr2 = pOutAddr + JPEG_ConvertorParams.ScaledWidth;
90010434:	9906      	ldr	r1, [sp, #24]
        pOutAddr = pOutBuffer + refline;
90010436:	9b0d      	ldr	r3, [sp, #52]	; 0x34
        pOutAddr2 = pOutAddr + JPEG_ConvertorParams.ScaledWidth;
90010438:	9103      	str	r1, [sp, #12]
        pOutAddr = pOutBuffer + refline;
9001043a:	4413      	add	r3, r2
        pOutAddr2 = pOutAddr + JPEG_ConvertorParams.ScaledWidth;
9001043c:	990a      	ldr	r1, [sp, #40]	; 0x28
9001043e:	9a04      	ldr	r2, [sp, #16]
90010440:	1859      	adds	r1, r3, r1
90010442:	f103 0c10 	add.w	ip, r3, #16
90010446:	f8cd e024 	str.w	lr, [sp, #36]	; 0x24
9001044a:	3330      	adds	r3, #48	; 0x30
9001044c:	4696      	mov	lr, r2
9001044e:	9102      	str	r1, [sp, #8]
        for(k= 0; k<2; k++)
90010450:	9307      	str	r3, [sp, #28]
90010452:	9b03      	ldr	r3, [sp, #12]
90010454:	f1ac 0510 	sub.w	r5, ip, #16
          for(j=0; j < 8; j+=2)
90010458:	4674      	mov	r4, lr
    currentMCU++;
9001045a:	9e02      	ldr	r6, [sp, #8]
9001045c:	1e5f      	subs	r7, r3, #1
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
9001045e:	f817 3f01 	ldrb.w	r3, [r7, #1]!
            pOutAddr += JPEG_BYTES_PER_PIXEL * 2;
90010462:	3504      	adds	r5, #4
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
90010464:	4953      	ldr	r1, [pc, #332]	; (900105b4 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x218>)
          for(j=0; j < 8; j+=2)
90010466:	3402      	adds	r4, #2
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));          
90010468:	f897 0040 	ldrb.w	r0, [r7, #64]	; 0x40
            pOutAddr2 += JPEG_BYTES_PER_PIXEL * 2;
9001046c:	3604      	adds	r6, #4
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
9001046e:	f851 a023 	ldr.w	sl, [r1, r3, lsl #2]
          for(j=0; j < 8; j+=2)
90010472:	4565      	cmp	r5, ip
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
90010474:	4950      	ldr	r1, [pc, #320]	; (900105b8 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x21c>)
            ycomp = (int32_t)(*(pLum +j));
90010476:	f814 2c02 	ldrb.w	r2, [r4, #-2]
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
9001047a:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
9001047e:	f858 3020 	ldr.w	r3, [r8, r0, lsl #2]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90010482:	4449      	add	r1, r9
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
90010484:	449a      	add	sl, r3
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));          
90010486:	4b4d      	ldr	r3, [pc, #308]	; (900105bc <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x220>)
90010488:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
9001048c:	eb09 432a 	add.w	r3, r9, sl, asr #16
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90010490:	eb01 0a02 	add.w	sl, r1, r2
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90010494:	4448      	add	r0, r9
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90010496:	eb03 0b02 	add.w	fp, r3, r2
9001049a:	f89a a100 	ldrb.w	sl, [sl, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9001049e:	4402      	add	r2, r0
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
900104a0:	f89b b100 	ldrb.w	fp, [fp, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
900104a4:	f892 2100 	ldrb.w	r2, [r2, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
900104a8:	ea4f 0b9b 	mov.w	fp, fp, lsr #2
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
900104ac:	ea4f 02d2 	mov.w	r2, r2, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
900104b0:	ea4f 1b4b 	mov.w	fp, fp, lsl #5
900104b4:	ea4b 22c2 	orr.w	r2, fp, r2, lsl #11
900104b8:	ea42 02da 	orr.w	r2, r2, sl, lsr #3
            *(__IO uint16_t *)pOutAddr = 
900104bc:	f825 2c04 	strh.w	r2, [r5, #-4]
            ycomp = (int32_t)(*(pLum +j +1));
900104c0:	f814 ac01 	ldrb.w	sl, [r4, #-1]
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
900104c4:	eb03 020a 	add.w	r2, r3, sl
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
900104c8:	eb00 0b0a 	add.w	fp, r0, sl
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
900104cc:	448a      	add	sl, r1
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
900104ce:	f892 2100 	ldrb.w	r2, [r2, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
900104d2:	f89b b100 	ldrb.w	fp, [fp, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
900104d6:	ea4f 0292 	mov.w	r2, r2, lsr #2
900104da:	f89a a100 	ldrb.w	sl, [sl, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
900104de:	ea4f 0bdb 	mov.w	fp, fp, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
900104e2:	ea4f 1242 	mov.w	r2, r2, lsl #5
900104e6:	ea42 22cb 	orr.w	r2, r2, fp, lsl #11
900104ea:	ea42 02da 	orr.w	r2, r2, sl, lsr #3
            *((__IO uint16_t *)(pOutAddr + 2)) = 
900104ee:	f825 2c02 	strh.w	r2, [r5, #-2]
            ycomp = (int32_t)(*(pLum +j +8));
900104f2:	f894 a006 	ldrb.w	sl, [r4, #6]
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
900104f6:	eb03 020a 	add.w	r2, r3, sl
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
900104fa:	eb00 0b0a 	add.w	fp, r0, sl
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
900104fe:	448a      	add	sl, r1
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90010500:	f892 2100 	ldrb.w	r2, [r2, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90010504:	f89b b100 	ldrb.w	fp, [fp, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90010508:	ea4f 0292 	mov.w	r2, r2, lsr #2
9001050c:	f89a a100 	ldrb.w	sl, [sl, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90010510:	ea4f 0bdb 	mov.w	fp, fp, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90010514:	ea4f 1242 	mov.w	r2, r2, lsl #5
90010518:	ea42 22cb 	orr.w	r2, r2, fp, lsl #11
9001051c:	ea42 02da 	orr.w	r2, r2, sl, lsr #3
            *(__IO uint16_t *)pOutAddr2 = 
90010520:	f826 2c04 	strh.w	r2, [r6, #-4]
            ycomp = (int32_t)(*(pLum +j +8 +1));
90010524:	79e2      	ldrb	r2, [r4, #7]
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90010526:	4413      	add	r3, r2
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90010528:	4410      	add	r0, r2
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);         
9001052a:	4411      	add	r1, r2
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
9001052c:	f893 3100 	ldrb.w	r3, [r3, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90010530:	f890 2100 	ldrb.w	r2, [r0, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90010534:	ea4f 0393 	mov.w	r3, r3, lsr #2
90010538:	f891 1100 	ldrb.w	r1, [r1, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9001053c:	ea4f 02d2 	mov.w	r2, r2, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90010540:	ea4f 1343 	mov.w	r3, r3, lsl #5
90010544:	ea43 23c2 	orr.w	r3, r3, r2, lsl #11
90010548:	ea43 03d1 	orr.w	r3, r3, r1, lsr #3
            *((__IO uint16_t *)(pOutAddr2 +2)) = 
9001054c:	f826 3c02 	strh.w	r3, [r6, #-2]
          for(j=0; j < 8; j+=2)
90010550:	d185      	bne.n	9001045e <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0xc2>
            pOutAddr2 += JPEG_BYTES_PER_PIXEL * 2;
90010552:	9b02      	ldr	r3, [sp, #8]
        for(k= 0; k<2; k++)
90010554:	f105 0c10 	add.w	ip, r5, #16
          pLum += 64;                      
90010558:	f10e 0e40 	add.w	lr, lr, #64	; 0x40
            pOutAddr2 += JPEG_BYTES_PER_PIXEL * 2;
9001055c:	3310      	adds	r3, #16
9001055e:	9302      	str	r3, [sp, #8]
            pChrom++;
90010560:	9b03      	ldr	r3, [sp, #12]
90010562:	3304      	adds	r3, #4
90010564:	9303      	str	r3, [sp, #12]
        for(k= 0; k<2; k++)
90010566:	9b07      	ldr	r3, [sp, #28]
90010568:	4563      	cmp	r3, ip
9001056a:	f47f af72 	bne.w	90010452 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0xb6>
            pChrom++;
9001056e:	9b06      	ldr	r3, [sp, #24]
90010570:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
90010574:	3308      	adds	r3, #8
        refline += 2*JPEG_ConvertorParams.ScaledWidth;          
90010576:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    for(i= 0; i <  16; i+=2)
90010578:	f1be 0f10 	cmp.w	lr, #16
            pChrom++;
9001057c:	9306      	str	r3, [sp, #24]
        pLum = pLum - 128 + 16;
9001057e:	9b04      	ldr	r3, [sp, #16]
90010580:	f103 0310 	add.w	r3, r3, #16
90010584:	9304      	str	r3, [sp, #16]
        refline += 2*JPEG_ConvertorParams.ScaledWidth;          
90010586:	9b01      	ldr	r3, [sp, #4]
90010588:	4413      	add	r3, r2
9001058a:	9301      	str	r3, [sp, #4]
    for(i= 0; i <  16; i+=2)
9001058c:	f47f af45 	bne.w	9001041a <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x7e>
      }
    }   
    
    pInBuffer +=  YCBCR_420_BLOCK_SIZE;
90010590:	9b08      	ldr	r3, [sp, #32]
  while(currentMCU < (numberMCU + BlockIndex))
90010592:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    pInBuffer +=  YCBCR_420_BLOCK_SIZE;
90010594:	f503 73c0 	add.w	r3, r3, #384	; 0x180
90010598:	9308      	str	r3, [sp, #32]
  while(currentMCU < (numberMCU + BlockIndex))
9001059a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
9001059c:	4293      	cmp	r3, r2
9001059e:	f47f af1c 	bne.w	900103da <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x3e>
  }
  return numberMCU;
}
900105a2:	ee17 0a90 	vmov	r0, s15
900105a6:	b011      	add	sp, #68	; 0x44
900105a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
900105ac:	aaaaaaab 	.word	0xaaaaaaab
900105b0:	24026218 	.word	0x24026218
900105b4:	24025618 	.word	0x24025618
900105b8:	24025218 	.word	0x24025218
900105bc:	24025e18 	.word	0x24025e18
900105c0:	24025a18 	.word	0x24025a18
900105c4:	900267a0 	.word	0x900267a0

900105c8 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks>:
static uint32_t JPEG_MCU_YCbCr422_ARGB_ConvertBlocks(uint8_t *pInBuffer, 
                                      uint8_t *pOutBuffer,
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{  
900105c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  int32_t c_red, c_blue, c_green;
  
  uint8_t *pOutAddr;
  uint8_t *pChrom, *pLum;
  
  numberMCU = DataCount / YCBCR_422_BLOCK_SIZE;
900105cc:	0a1c      	lsrs	r4, r3, #8
{  
900105ce:	b08d      	sub	sp, #52	; 0x34
  currentMCU = BlockIndex;
  

  while(currentMCU < (numberMCU + BlockIndex))
900105d0:	eb02 2313 	add.w	r3, r2, r3, lsr #8
  numberMCU = DataCount / YCBCR_422_BLOCK_SIZE;
900105d4:	ee07 4a90 	vmov	s15, r4
{  
900105d8:	9208      	str	r2, [sp, #32]
  while(currentMCU < (numberMCU + BlockIndex))
900105da:	429a      	cmp	r2, r3
{  
900105dc:	9007      	str	r0, [sp, #28]
900105de:	9109      	str	r1, [sp, #36]	; 0x24
  while(currentMCU < (numberMCU + BlockIndex))
900105e0:	930b      	str	r3, [sp, #44]	; 0x2c
900105e2:	f080 814a 	bcs.w	9001087a <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x2b2>
  {
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*8;
900105e6:	4ba7      	ldr	r3, [pc, #668]	; (90010884 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x2bc>)
900105e8:	4da7      	ldr	r5, [pc, #668]	; (90010888 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x2c0>)
900105ea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
900105ec:	f8df 929c 	ldr.w	r9, [pc, #668]	; 9001088c <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x2c4>
900105f0:	920a      	str	r2, [sp, #40]	; 0x28
    
    yRef = ((currentMCU *16) % JPEG_ConvertorParams.WidthExtend);
    
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
900105f2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    
    pLum = pInBuffer;
    
    for(i= 0; i <  8; i++)
    {
       if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
900105f4:	691b      	ldr	r3, [r3, #16]
900105f6:	f8df a298 	ldr.w	sl, [pc, #664]	; 90010890 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x2c8>
900105fa:	f8df b298 	ldr.w	fp, [pc, #664]	; 90010894 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x2cc>
900105fe:	f8df 8298 	ldr.w	r8, [pc, #664]	; 90010898 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x2d0>
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
90010602:	9206      	str	r2, [sp, #24]
       if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
90010604:	9301      	str	r3, [sp, #4]
90010606:	e008      	b.n	9001061a <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x52>
        
        refline += JPEG_ConvertorParams.ScaledWidth;          
      }
    }   
    
    pInBuffer +=  YCBCR_422_BLOCK_SIZE;
90010608:	9b07      	ldr	r3, [sp, #28]
  while(currentMCU < (numberMCU + BlockIndex))
9001060a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    pInBuffer +=  YCBCR_422_BLOCK_SIZE;
9001060c:	f503 7380 	add.w	r3, r3, #256	; 0x100
90010610:	9307      	str	r3, [sp, #28]
  while(currentMCU < (numberMCU + BlockIndex))
90010612:	9b08      	ldr	r3, [sp, #32]
90010614:	4293      	cmp	r3, r2
90010616:	f000 8130 	beq.w	9001087a <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x2b2>
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*8;
9001061a:	9a07      	ldr	r2, [sp, #28]
9001061c:	9908      	ldr	r1, [sp, #32]
9001061e:	f102 0080 	add.w	r0, r2, #128	; 0x80
90010622:	010b      	lsls	r3, r1, #4
90010624:	3101      	adds	r1, #1
    currentMCU++;
90010626:	e9cd 0202 	strd	r0, r2, [sp, #8]
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*8;
9001062a:	980a      	ldr	r0, [sp, #40]	; 0x28
9001062c:	9108      	str	r1, [sp, #32]
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
9001062e:	9906      	ldr	r1, [sp, #24]
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*8;
90010630:	fbb3 f2f0 	udiv	r2, r3, r0
    yRef = ((currentMCU *16) % JPEG_ConvertorParams.WidthExtend);
90010634:	fb00 3312 	mls	r3, r0, r2, r3
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
90010638:	fb01 f202 	mul.w	r2, r1, r2
9001063c:	005b      	lsls	r3, r3, #1
9001063e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
90010642:	9300      	str	r3, [sp, #0]
    currentMCU++;
90010644:	2308      	movs	r3, #8
90010646:	9305      	str	r3, [sp, #20]
       if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
90010648:	e9dd 2300 	ldrd	r2, r3, [sp]
9001064c:	4293      	cmp	r3, r2
9001064e:	d9db      	bls.n	90010608 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x40>
        pOutAddr = pOutBuffer + refline;
90010650:	9b09      	ldr	r3, [sp, #36]	; 0x24
90010652:	4413      	add	r3, r2
        for(k= 0; k<2; k++)
90010654:	9a03      	ldr	r2, [sp, #12]
90010656:	f102 0140 	add.w	r1, r2, #64	; 0x40
9001065a:	9a02      	ldr	r2, [sp, #8]
9001065c:	f103 0020 	add.w	r0, r3, #32
90010660:	3204      	adds	r2, #4
90010662:	9004      	str	r0, [sp, #16]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));          
90010664:	f892 003c 	ldrb.w	r0, [r2, #60]	; 0x3c
90010668:	3310      	adds	r3, #16
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
9001066a:	f812 4c04 	ldrb.w	r4, [r2, #-4]
        for(k= 0; k<2; k++)
9001066e:	3140      	adds	r1, #64	; 0x40
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));          
90010670:	f859 7020 	ldr.w	r7, [r9, r0, lsl #2]
        for(k= 0; k<2; k++)
90010674:	3204      	adds	r2, #4
            ycomp = (int32_t)(*(pLum +j));
90010676:	f811 cc80 	ldrb.w	ip, [r1, #-128]
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
9001067a:	f855 6024 	ldr.w	r6, [r5, r4, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9001067e:	4447      	add	r7, r8
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
90010680:	f85b 4024 	ldr.w	r4, [fp, r4, lsl #2]
90010684:	f85a 0020 	ldr.w	r0, [sl, r0, lsl #2]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90010688:	4446      	add	r6, r8
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
9001068a:	4420      	add	r0, r4
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9001068c:	eb07 040c 	add.w	r4, r7, ip
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90010690:	eb08 4020 	add.w	r0, r8, r0, asr #16
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90010694:	f894 e100 	ldrb.w	lr, [r4, #256]	; 0x100
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90010698:	eb06 040c 	add.w	r4, r6, ip
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
9001069c:	4484      	add	ip, r0
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9001069e:	ea4f 0ede 	mov.w	lr, lr, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
900106a2:	f894 4100 	ldrb.w	r4, [r4, #256]	; 0x100
900106a6:	f89c c100 	ldrb.w	ip, [ip, #256]	; 0x100
900106aa:	08e4      	lsrs	r4, r4, #3
900106ac:	ea4f 0c9c 	mov.w	ip, ip, lsr #2
900106b0:	ea44 24ce 	orr.w	r4, r4, lr, lsl #11
900106b4:	ea44 144c 	orr.w	r4, r4, ip, lsl #5
            *(__IO uint16_t *)pOutAddr = 
900106b8:	f823 4c10 	strh.w	r4, [r3, #-16]
            ycomp = (int32_t)(*(pLum +j +1));
900106bc:	f811 4c7f 	ldrb.w	r4, [r1, #-127]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);         
900106c0:	4426      	add	r6, r4
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
900106c2:	4427      	add	r7, r4
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
900106c4:	4404      	add	r4, r0
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
900106c6:	f897 7100 	ldrb.w	r7, [r7, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
900106ca:	f896 0100 	ldrb.w	r0, [r6, #256]	; 0x100
900106ce:	f894 4100 	ldrb.w	r4, [r4, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
900106d2:	08fe      	lsrs	r6, r7, #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
900106d4:	08c0      	lsrs	r0, r0, #3
900106d6:	08a4      	lsrs	r4, r4, #2
900106d8:	ea40 20c6 	orr.w	r0, r0, r6, lsl #11
900106dc:	ea40 1044 	orr.w	r0, r0, r4, lsl #5
            *((__IO uint16_t *)(pOutAddr + 2)) = 
900106e0:	f823 0c0e 	strh.w	r0, [r3, #-14]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));          
900106e4:	f892 0039 	ldrb.w	r0, [r2, #57]	; 0x39
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
900106e8:	f812 4c07 	ldrb.w	r4, [r2, #-7]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));          
900106ec:	f859 7020 	ldr.w	r7, [r9, r0, lsl #2]
            ycomp = (int32_t)(*(pLum +j));
900106f0:	f811 cc7e 	ldrb.w	ip, [r1, #-126]
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
900106f4:	f855 6024 	ldr.w	r6, [r5, r4, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
900106f8:	4447      	add	r7, r8
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
900106fa:	f85b 4024 	ldr.w	r4, [fp, r4, lsl #2]
900106fe:	f85a 0020 	ldr.w	r0, [sl, r0, lsl #2]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90010702:	4446      	add	r6, r8
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
90010704:	4420      	add	r0, r4
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90010706:	eb07 040c 	add.w	r4, r7, ip
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
9001070a:	eb08 4020 	add.w	r0, r8, r0, asr #16
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9001070e:	f894 e100 	ldrb.w	lr, [r4, #256]	; 0x100
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90010712:	eb06 040c 	add.w	r4, r6, ip
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90010716:	4484      	add	ip, r0
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90010718:	ea4f 0ede 	mov.w	lr, lr, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
9001071c:	f894 4100 	ldrb.w	r4, [r4, #256]	; 0x100
90010720:	f89c c100 	ldrb.w	ip, [ip, #256]	; 0x100
90010724:	08e4      	lsrs	r4, r4, #3
90010726:	ea4f 0c9c 	mov.w	ip, ip, lsr #2
9001072a:	ea44 24ce 	orr.w	r4, r4, lr, lsl #11
9001072e:	ea44 144c 	orr.w	r4, r4, ip, lsl #5
            *(__IO uint16_t *)pOutAddr = 
90010732:	f823 4c0c 	strh.w	r4, [r3, #-12]
            ycomp = (int32_t)(*(pLum +j +1));
90010736:	f811 4c7d 	ldrb.w	r4, [r1, #-125]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);         
9001073a:	4426      	add	r6, r4
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9001073c:	4427      	add	r7, r4
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
9001073e:	4404      	add	r4, r0
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90010740:	f897 7100 	ldrb.w	r7, [r7, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90010744:	f896 0100 	ldrb.w	r0, [r6, #256]	; 0x100
90010748:	f894 4100 	ldrb.w	r4, [r4, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9001074c:	08fe      	lsrs	r6, r7, #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
9001074e:	08c0      	lsrs	r0, r0, #3
90010750:	08a4      	lsrs	r4, r4, #2
90010752:	ea40 20c6 	orr.w	r0, r0, r6, lsl #11
90010756:	ea40 1044 	orr.w	r0, r0, r4, lsl #5
            *((__IO uint16_t *)(pOutAddr + 2)) = 
9001075a:	f823 0c0a 	strh.w	r0, [r3, #-10]
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
9001075e:	f812 4c06 	ldrb.w	r4, [r2, #-6]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));          
90010762:	f892 003a 	ldrb.w	r0, [r2, #58]	; 0x3a
            ycomp = (int32_t)(*(pLum +j));
90010766:	f811 cc7c 	ldrb.w	ip, [r1, #-124]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));          
9001076a:	f859 7020 	ldr.w	r7, [r9, r0, lsl #2]
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
9001076e:	f855 6024 	ldr.w	r6, [r5, r4, lsl #2]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
90010772:	f85a 0020 	ldr.w	r0, [sl, r0, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90010776:	4447      	add	r7, r8
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
90010778:	f85b 4024 	ldr.w	r4, [fp, r4, lsl #2]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
9001077c:	4446      	add	r6, r8
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
9001077e:	4420      	add	r0, r4
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90010780:	eb07 040c 	add.w	r4, r7, ip
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90010784:	eb08 4020 	add.w	r0, r8, r0, asr #16
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90010788:	f894 e100 	ldrb.w	lr, [r4, #256]	; 0x100
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
9001078c:	eb06 040c 	add.w	r4, r6, ip
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90010790:	4484      	add	ip, r0
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90010792:	ea4f 0ede 	mov.w	lr, lr, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90010796:	f894 4100 	ldrb.w	r4, [r4, #256]	; 0x100
9001079a:	f89c c100 	ldrb.w	ip, [ip, #256]	; 0x100
9001079e:	08e4      	lsrs	r4, r4, #3
900107a0:	ea4f 0c9c 	mov.w	ip, ip, lsr #2
900107a4:	ea44 24ce 	orr.w	r4, r4, lr, lsl #11
900107a8:	ea44 144c 	orr.w	r4, r4, ip, lsl #5
            *(__IO uint16_t *)pOutAddr = 
900107ac:	f823 4c08 	strh.w	r4, [r3, #-8]
            ycomp = (int32_t)(*(pLum +j +1));
900107b0:	f811 4c7b 	ldrb.w	r4, [r1, #-123]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);         
900107b4:	4426      	add	r6, r4
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
900107b6:	4427      	add	r7, r4
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
900107b8:	4404      	add	r4, r0
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
900107ba:	f897 7100 	ldrb.w	r7, [r7, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
900107be:	f896 0100 	ldrb.w	r0, [r6, #256]	; 0x100
900107c2:	f894 4100 	ldrb.w	r4, [r4, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
900107c6:	08fe      	lsrs	r6, r7, #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
900107c8:	08c0      	lsrs	r0, r0, #3
900107ca:	08a4      	lsrs	r4, r4, #2
900107cc:	ea40 20c6 	orr.w	r0, r0, r6, lsl #11
900107d0:	ea40 1044 	orr.w	r0, r0, r4, lsl #5
            *((__IO uint16_t *)(pOutAddr + 2)) = 
900107d4:	f823 0c06 	strh.w	r0, [r3, #-6]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));          
900107d8:	f892 003b 	ldrb.w	r0, [r2, #59]	; 0x3b
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
900107dc:	f812 4c05 	ldrb.w	r4, [r2, #-5]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));          
900107e0:	f859 7020 	ldr.w	r7, [r9, r0, lsl #2]
            ycomp = (int32_t)(*(pLum +j));
900107e4:	f811 cc7a 	ldrb.w	ip, [r1, #-122]
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
900107e8:	f855 6024 	ldr.w	r6, [r5, r4, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
900107ec:	4447      	add	r7, r8
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
900107ee:	f85b 4024 	ldr.w	r4, [fp, r4, lsl #2]
900107f2:	f85a 0020 	ldr.w	r0, [sl, r0, lsl #2]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
900107f6:	4446      	add	r6, r8
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
900107f8:	4420      	add	r0, r4
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
900107fa:	eb07 040c 	add.w	r4, r7, ip
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
900107fe:	eb08 4020 	add.w	r0, r8, r0, asr #16
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90010802:	f894 e100 	ldrb.w	lr, [r4, #256]	; 0x100
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90010806:	eb06 040c 	add.w	r4, r6, ip
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
9001080a:	4484      	add	ip, r0
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9001080c:	ea4f 0ede 	mov.w	lr, lr, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90010810:	f894 4100 	ldrb.w	r4, [r4, #256]	; 0x100
90010814:	f89c c100 	ldrb.w	ip, [ip, #256]	; 0x100
90010818:	08e4      	lsrs	r4, r4, #3
9001081a:	ea4f 0c9c 	mov.w	ip, ip, lsr #2
9001081e:	ea44 24ce 	orr.w	r4, r4, lr, lsl #11
90010822:	ea44 144c 	orr.w	r4, r4, ip, lsl #5
            *(__IO uint16_t *)pOutAddr = 
90010826:	f823 4c04 	strh.w	r4, [r3, #-4]
            ycomp = (int32_t)(*(pLum +j +1));
9001082a:	f811 4c79 	ldrb.w	r4, [r1, #-121]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);         
9001082e:	4426      	add	r6, r4
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90010830:	4427      	add	r7, r4
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90010832:	4404      	add	r4, r0
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90010834:	f897 7100 	ldrb.w	r7, [r7, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90010838:	f896 0100 	ldrb.w	r0, [r6, #256]	; 0x100
9001083c:	f894 4100 	ldrb.w	r4, [r4, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90010840:	08fe      	lsrs	r6, r7, #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90010842:	08c0      	lsrs	r0, r0, #3
90010844:	08a4      	lsrs	r4, r4, #2
90010846:	ea40 20c6 	orr.w	r0, r0, r6, lsl #11
9001084a:	ea40 1044 	orr.w	r0, r0, r4, lsl #5
            *((__IO uint16_t *)(pOutAddr + 2)) = 
9001084e:	f823 0c02 	strh.w	r0, [r3, #-2]
        for(k= 0; k<2; k++)
90010852:	9804      	ldr	r0, [sp, #16]
90010854:	4283      	cmp	r3, r0
90010856:	f47f af05 	bne.w	90010664 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x9c>
            pChrom++;
9001085a:	9b02      	ldr	r3, [sp, #8]
        refline += JPEG_ConvertorParams.ScaledWidth;          
9001085c:	9a06      	ldr	r2, [sp, #24]
            pChrom++;
9001085e:	3308      	adds	r3, #8
90010860:	9302      	str	r3, [sp, #8]
        pLum = pLum - 128 + 8;
90010862:	9b03      	ldr	r3, [sp, #12]
90010864:	3308      	adds	r3, #8
90010866:	9303      	str	r3, [sp, #12]
        refline += JPEG_ConvertorParams.ScaledWidth;          
90010868:	9b00      	ldr	r3, [sp, #0]
9001086a:	4413      	add	r3, r2
9001086c:	9300      	str	r3, [sp, #0]
    for(i= 0; i <  8; i++)
9001086e:	9b05      	ldr	r3, [sp, #20]
90010870:	3b01      	subs	r3, #1
90010872:	9305      	str	r3, [sp, #20]
90010874:	f47f aee8 	bne.w	90010648 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x80>
90010878:	e6c6      	b.n	90010608 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x40>
  }
  return numberMCU;
}
9001087a:	ee17 0a90 	vmov	r0, s15
9001087e:	b00d      	add	sp, #52	; 0x34
90010880:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90010884:	24026218 	.word	0x24026218
90010888:	24025218 	.word	0x24025218
9001088c:	24025e18 	.word	0x24025e18
90010890:	24025a18 	.word	0x24025a18
90010894:	24025618 	.word	0x24025618
90010898:	900267a0 	.word	0x900267a0

9001089c <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks>:
static uint32_t JPEG_MCU_YCbCr444_ARGB_ConvertBlocks(uint8_t *pInBuffer, 
                                      uint8_t *pOutBuffer,
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{  
9001089c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  int32_t c_red, c_blue, c_green;
  
  uint8_t *pOutAddr;
  uint8_t *pChrom, *pLum;
  
  numberMCU = DataCount / YCBCR_444_BLOCK_SIZE;
900108a0:	4cb6      	ldr	r4, [pc, #728]	; (90010b7c <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x2e0>)
{  
900108a2:	b089      	sub	sp, #36	; 0x24
  numberMCU = DataCount / YCBCR_444_BLOCK_SIZE;
900108a4:	fba4 4303 	umull	r4, r3, r4, r3
{  
900108a8:	9102      	str	r1, [sp, #8]
  numberMCU = DataCount / YCBCR_444_BLOCK_SIZE;
900108aa:	09d9      	lsrs	r1, r3, #7
  currentMCU = BlockIndex;
  

  while(currentMCU < (numberMCU + BlockIndex))
900108ac:	eb02 13d3 	add.w	r3, r2, r3, lsr #7
  numberMCU = DataCount / YCBCR_444_BLOCK_SIZE;
900108b0:	ee07 1a90 	vmov	s15, r1
  while(currentMCU < (numberMCU + BlockIndex))
900108b4:	429a      	cmp	r2, r3
900108b6:	9306      	str	r3, [sp, #24]
{  
900108b8:	e9cd 0204 	strd	r0, r2, [sp, #16]
  while(currentMCU < (numberMCU + BlockIndex))
900108bc:	f080 8158 	bcs.w	90010b70 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x2d4>
  {

    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
900108c0:	4baf      	ldr	r3, [pc, #700]	; (90010b80 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x2e4>)
#elif (JPEG_RGB_FORMAT == JPEG_RGB565)  
            
            ycomp = (int32_t)(*(pLum +j));
          
            *(__IO uint16_t *)pOutAddr = 
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
900108c2:	4cb0      	ldr	r4, [pc, #704]	; (90010b84 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x2e8>)
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
900108c4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));          
900108c6:	f8df e2c4 	ldr.w	lr, [pc, #708]	; 90010b8c <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x2f0>
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
900108ca:	9207      	str	r2, [sp, #28]
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
900108cc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
900108ce:	691b      	ldr	r3, [r3, #16]
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
900108d0:	f8df c2bc 	ldr.w	ip, [pc, #700]	; 90010b90 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x2f4>
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
900108d4:	48ac      	ldr	r0, [pc, #688]	; (90010b88 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x2ec>)
900108d6:	f8df 82bc 	ldr.w	r8, [pc, #700]	; 90010b94 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x2f8>
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
900108da:	9203      	str	r2, [sp, #12]
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
900108dc:	9300      	str	r3, [sp, #0]
900108de:	e007      	b.n	900108f0 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x54>

        refline += JPEG_ConvertorParams.ScaledWidth;          
      }
    }   
    
    pInBuffer +=  YCBCR_444_BLOCK_SIZE;
900108e0:	9b04      	ldr	r3, [sp, #16]
900108e2:	33c0      	adds	r3, #192	; 0xc0
900108e4:	9304      	str	r3, [sp, #16]
  while(currentMCU < (numberMCU + BlockIndex))
900108e6:	e9dd 3205 	ldrd	r3, r2, [sp, #20]
900108ea:	4293      	cmp	r3, r2
900108ec:	f000 8140 	beq.w	90010b70 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x2d4>
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
900108f0:	9e05      	ldr	r6, [sp, #20]
900108f2:	9f07      	ldr	r7, [sp, #28]
900108f4:	00f2      	lsls	r2, r6, #3
900108f6:	3601      	adds	r6, #1
900108f8:	9904      	ldr	r1, [sp, #16]
900108fa:	9605      	str	r6, [sp, #20]
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
900108fc:	9e03      	ldr	r6, [sp, #12]
900108fe:	f101 0340 	add.w	r3, r1, #64	; 0x40
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
90010902:	fbb2 f5f7 	udiv	r5, r2, r7
    yRef = ((currentMCU *8) % JPEG_ConvertorParams.WidthExtend);
90010906:	fb07 2215 	mls	r2, r7, r5, r2
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
9001090a:	fb06 f505 	mul.w	r5, r6, r5
9001090e:	0052      	lsls	r2, r2, #1
90010910:	eb02 02c5 	add.w	r2, r2, r5, lsl #3
    currentMCU++;   
90010914:	2508      	movs	r5, #8
90010916:	9501      	str	r5, [sp, #4]
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
90010918:	9d00      	ldr	r5, [sp, #0]
9001091a:	4295      	cmp	r5, r2
9001091c:	d9e0      	bls.n	900108e0 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x44>
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));          
9001091e:	f893 7040 	ldrb.w	r7, [r3, #64]	; 0x40
          pLum += 8;
90010922:	3108      	adds	r1, #8
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
90010924:	f893 9000 	ldrb.w	r9, [r3]
            pChrom++;
90010928:	3308      	adds	r3, #8
            ycomp = (int32_t)(*(pLum +j));
9001092a:	f811 5c08 	ldrb.w	r5, [r1, #-8]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
9001092e:	f850 a027 	ldr.w	sl, [r0, r7, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90010932:	f85e 6027 	ldr.w	r6, [lr, r7, lsl #2]
90010936:	4425      	add	r5, r4
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);      
90010938:	f85c 7029 	ldr.w	r7, [ip, r9, lsl #2]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
9001093c:	f858 9029 	ldr.w	r9, [r8, r9, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90010940:	442e      	add	r6, r5
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);      
90010942:	442f      	add	r7, r5
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
90010944:	44d1      	add	r9, sl
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90010946:	f896 6100 	ldrb.w	r6, [r6, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
9001094a:	eb05 4929 	add.w	r9, r5, r9, asr #16
9001094e:	f897 5100 	ldrb.w	r5, [r7, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90010952:	08f6      	lsrs	r6, r6, #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90010954:	f899 7100 	ldrb.w	r7, [r9, #256]	; 0x100
90010958:	08ed      	lsrs	r5, r5, #3
9001095a:	08bf      	lsrs	r7, r7, #2
9001095c:	ea45 25c6 	orr.w	r5, r5, r6, lsl #11
            *(__IO uint16_t *)pOutAddr = 
90010960:	9e02      	ldr	r6, [sp, #8]
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90010962:	ea45 1547 	orr.w	r5, r5, r7, lsl #5
            *(__IO uint16_t *)pOutAddr = 
90010966:	52b5      	strh	r5, [r6, r2]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));          
90010968:	f893 7039 	ldrb.w	r7, [r3, #57]	; 0x39
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
9001096c:	f813 9c07 	ldrb.w	r9, [r3, #-7]
            ycomp = (int32_t)(*(pLum +j));
90010970:	f811 5c07 	ldrb.w	r5, [r1, #-7]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
90010974:	f850 a027 	ldr.w	sl, [r0, r7, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90010978:	4425      	add	r5, r4
9001097a:	f85e 6027 	ldr.w	r6, [lr, r7, lsl #2]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);      
9001097e:	f85c 7029 	ldr.w	r7, [ip, r9, lsl #2]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
90010982:	f858 9029 	ldr.w	r9, [r8, r9, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90010986:	442e      	add	r6, r5
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);      
90010988:	442f      	add	r7, r5
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
9001098a:	44d1      	add	r9, sl
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9001098c:	f896 6100 	ldrb.w	r6, [r6, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90010990:	eb05 4929 	add.w	r9, r5, r9, asr #16
90010994:	f897 5100 	ldrb.w	r5, [r7, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90010998:	08f6      	lsrs	r6, r6, #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
9001099a:	f899 7100 	ldrb.w	r7, [r9, #256]	; 0x100
9001099e:	08ed      	lsrs	r5, r5, #3
900109a0:	08bf      	lsrs	r7, r7, #2
900109a2:	ea45 26c6 	orr.w	r6, r5, r6, lsl #11
        pOutAddr = pOutBuffer+ refline;
900109a6:	9d02      	ldr	r5, [sp, #8]
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
900109a8:	ea46 1647 	orr.w	r6, r6, r7, lsl #5
        pOutAddr = pOutBuffer+ refline;
900109ac:	4415      	add	r5, r2
            *(__IO uint16_t *)pOutAddr = 
900109ae:	806e      	strh	r6, [r5, #2]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));          
900109b0:	f893 a03a 	ldrb.w	sl, [r3, #58]	; 0x3a
            ycomp = (int32_t)(*(pLum +j));
900109b4:	f811 7c06 	ldrb.w	r7, [r1, #-6]
        refline += JPEG_ConvertorParams.ScaledWidth;          
900109b8:	9e03      	ldr	r6, [sp, #12]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
900109ba:	4427      	add	r7, r4
900109bc:	f85e 902a 	ldr.w	r9, [lr, sl, lsl #2]
        refline += JPEG_ConvertorParams.ScaledWidth;          
900109c0:	4432      	add	r2, r6
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
900109c2:	f813 6c06 	ldrb.w	r6, [r3, #-6]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
900109c6:	44b9      	add	r9, r7
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
900109c8:	f850 b02a 	ldr.w	fp, [r0, sl, lsl #2]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);      
900109cc:	f85c a026 	ldr.w	sl, [ip, r6, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
900109d0:	f899 9100 	ldrb.w	r9, [r9, #256]	; 0x100
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
900109d4:	f858 6026 	ldr.w	r6, [r8, r6, lsl #2]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);      
900109d8:	44ba      	add	sl, r7
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
900109da:	ea4f 09d9 	mov.w	r9, r9, lsr #3
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
900109de:	445e      	add	r6, fp
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
900109e0:	eb07 4626 	add.w	r6, r7, r6, asr #16
900109e4:	f89a 7100 	ldrb.w	r7, [sl, #256]	; 0x100
900109e8:	f896 a100 	ldrb.w	sl, [r6, #256]	; 0x100
900109ec:	08fe      	lsrs	r6, r7, #3
900109ee:	ea4f 0a9a 	mov.w	sl, sl, lsr #2
900109f2:	ea46 26c9 	orr.w	r6, r6, r9, lsl #11
900109f6:	ea46 164a 	orr.w	r6, r6, sl, lsl #5
            *(__IO uint16_t *)pOutAddr = 
900109fa:	80ae      	strh	r6, [r5, #4]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));          
900109fc:	f893 a03b 	ldrb.w	sl, [r3, #59]	; 0x3b
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
90010a00:	f813 6c05 	ldrb.w	r6, [r3, #-5]
            ycomp = (int32_t)(*(pLum +j));
90010a04:	f811 7c05 	ldrb.w	r7, [r1, #-5]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
90010a08:	f850 b02a 	ldr.w	fp, [r0, sl, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90010a0c:	f85e 902a 	ldr.w	r9, [lr, sl, lsl #2]
90010a10:	4427      	add	r7, r4
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);      
90010a12:	f85c a026 	ldr.w	sl, [ip, r6, lsl #2]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
90010a16:	f858 6026 	ldr.w	r6, [r8, r6, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90010a1a:	44b9      	add	r9, r7
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);      
90010a1c:	44ba      	add	sl, r7
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
90010a1e:	445e      	add	r6, fp
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90010a20:	f899 9100 	ldrb.w	r9, [r9, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90010a24:	eb07 4626 	add.w	r6, r7, r6, asr #16
90010a28:	f89a 7100 	ldrb.w	r7, [sl, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90010a2c:	ea4f 09d9 	mov.w	r9, r9, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90010a30:	f896 a100 	ldrb.w	sl, [r6, #256]	; 0x100
90010a34:	08fe      	lsrs	r6, r7, #3
90010a36:	ea4f 0a9a 	mov.w	sl, sl, lsr #2
90010a3a:	ea46 26c9 	orr.w	r6, r6, r9, lsl #11
90010a3e:	ea46 164a 	orr.w	r6, r6, sl, lsl #5
            *(__IO uint16_t *)pOutAddr = 
90010a42:	80ee      	strh	r6, [r5, #6]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));          
90010a44:	f893 a03c 	ldrb.w	sl, [r3, #60]	; 0x3c
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
90010a48:	f813 6c04 	ldrb.w	r6, [r3, #-4]
            ycomp = (int32_t)(*(pLum +j));
90010a4c:	f811 7c04 	ldrb.w	r7, [r1, #-4]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
90010a50:	f850 b02a 	ldr.w	fp, [r0, sl, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90010a54:	4427      	add	r7, r4
90010a56:	f85e 902a 	ldr.w	r9, [lr, sl, lsl #2]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);      
90010a5a:	f85c a026 	ldr.w	sl, [ip, r6, lsl #2]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
90010a5e:	f858 6026 	ldr.w	r6, [r8, r6, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90010a62:	44b9      	add	r9, r7
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);      
90010a64:	44ba      	add	sl, r7
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
90010a66:	445e      	add	r6, fp
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90010a68:	f899 9100 	ldrb.w	r9, [r9, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90010a6c:	eb07 4626 	add.w	r6, r7, r6, asr #16
90010a70:	f89a 7100 	ldrb.w	r7, [sl, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90010a74:	ea4f 09d9 	mov.w	r9, r9, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90010a78:	f896 a100 	ldrb.w	sl, [r6, #256]	; 0x100
90010a7c:	08fe      	lsrs	r6, r7, #3
90010a7e:	ea4f 0a9a 	mov.w	sl, sl, lsr #2
90010a82:	ea46 26c9 	orr.w	r6, r6, r9, lsl #11
90010a86:	ea46 164a 	orr.w	r6, r6, sl, lsl #5
            *(__IO uint16_t *)pOutAddr = 
90010a8a:	812e      	strh	r6, [r5, #8]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));          
90010a8c:	f893 a03d 	ldrb.w	sl, [r3, #61]	; 0x3d
            ycomp = (int32_t)(*(pLum +j));
90010a90:	f811 7c03 	ldrb.w	r7, [r1, #-3]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90010a94:	f85e 902a 	ldr.w	r9, [lr, sl, lsl #2]
90010a98:	4427      	add	r7, r4
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
90010a9a:	f813 6c03 	ldrb.w	r6, [r3, #-3]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
90010a9e:	f850 b02a 	ldr.w	fp, [r0, sl, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90010aa2:	44b9      	add	r9, r7
90010aa4:	f899 9100 	ldrb.w	r9, [r9, #256]	; 0x100
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);      
90010aa8:	f85c a026 	ldr.w	sl, [ip, r6, lsl #2]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
90010aac:	f858 6026 	ldr.w	r6, [r8, r6, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90010ab0:	ea4f 09d9 	mov.w	r9, r9, lsr #3
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);      
90010ab4:	44ba      	add	sl, r7
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
90010ab6:	445e      	add	r6, fp
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90010ab8:	eb07 4626 	add.w	r6, r7, r6, asr #16
90010abc:	f89a 7100 	ldrb.w	r7, [sl, #256]	; 0x100
90010ac0:	f896 a100 	ldrb.w	sl, [r6, #256]	; 0x100
90010ac4:	08fe      	lsrs	r6, r7, #3
90010ac6:	ea4f 0a9a 	mov.w	sl, sl, lsr #2
90010aca:	ea46 26c9 	orr.w	r6, r6, r9, lsl #11
90010ace:	ea46 164a 	orr.w	r6, r6, sl, lsl #5
            *(__IO uint16_t *)pOutAddr = 
90010ad2:	816e      	strh	r6, [r5, #10]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));          
90010ad4:	f893 a03e 	ldrb.w	sl, [r3, #62]	; 0x3e
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
90010ad8:	f813 6c02 	ldrb.w	r6, [r3, #-2]
            ycomp = (int32_t)(*(pLum +j));
90010adc:	f811 7c02 	ldrb.w	r7, [r1, #-2]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
90010ae0:	f850 b02a 	ldr.w	fp, [r0, sl, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90010ae4:	4427      	add	r7, r4
90010ae6:	f85e 902a 	ldr.w	r9, [lr, sl, lsl #2]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);      
90010aea:	f85c a026 	ldr.w	sl, [ip, r6, lsl #2]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
90010aee:	f858 6026 	ldr.w	r6, [r8, r6, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90010af2:	44b9      	add	r9, r7
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);      
90010af4:	44ba      	add	sl, r7
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
90010af6:	445e      	add	r6, fp
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90010af8:	f899 9100 	ldrb.w	r9, [r9, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90010afc:	eb07 4626 	add.w	r6, r7, r6, asr #16
90010b00:	f89a 7100 	ldrb.w	r7, [sl, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90010b04:	ea4f 09d9 	mov.w	r9, r9, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90010b08:	f896 a100 	ldrb.w	sl, [r6, #256]	; 0x100
90010b0c:	08fe      	lsrs	r6, r7, #3
90010b0e:	ea4f 0a9a 	mov.w	sl, sl, lsr #2
90010b12:	ea46 26c9 	orr.w	r6, r6, r9, lsl #11
90010b16:	ea46 164a 	orr.w	r6, r6, sl, lsl #5
            *(__IO uint16_t *)pOutAddr = 
90010b1a:	81ae      	strh	r6, [r5, #12]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));          
90010b1c:	f893 a03f 	ldrb.w	sl, [r3, #63]	; 0x3f
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
90010b20:	f813 6c01 	ldrb.w	r6, [r3, #-1]
            ycomp = (int32_t)(*(pLum +j));
90010b24:	f811 7c01 	ldrb.w	r7, [r1, #-1]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90010b28:	f85e 902a 	ldr.w	r9, [lr, sl, lsl #2]
90010b2c:	4427      	add	r7, r4
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
90010b2e:	f850 b02a 	ldr.w	fp, [r0, sl, lsl #2]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);      
90010b32:	f85c a026 	ldr.w	sl, [ip, r6, lsl #2]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
90010b36:	f858 6026 	ldr.w	r6, [r8, r6, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90010b3a:	44b9      	add	r9, r7
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);      
90010b3c:	44ba      	add	sl, r7
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
90010b3e:	445e      	add	r6, fp
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90010b40:	f899 9100 	ldrb.w	r9, [r9, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90010b44:	eb07 4626 	add.w	r6, r7, r6, asr #16
90010b48:	f89a 7100 	ldrb.w	r7, [sl, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90010b4c:	ea4f 09d9 	mov.w	r9, r9, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90010b50:	f896 a100 	ldrb.w	sl, [r6, #256]	; 0x100
90010b54:	08fe      	lsrs	r6, r7, #3
90010b56:	ea4f 0a9a 	mov.w	sl, sl, lsr #2
90010b5a:	ea46 26c9 	orr.w	r6, r6, r9, lsl #11
90010b5e:	ea46 164a 	orr.w	r6, r6, sl, lsl #5
            *(__IO uint16_t *)pOutAddr = 
90010b62:	81ee      	strh	r6, [r5, #14]
    for(i= 0; i <  8; i++)
90010b64:	9d01      	ldr	r5, [sp, #4]
90010b66:	3d01      	subs	r5, #1
90010b68:	9501      	str	r5, [sp, #4]
90010b6a:	f47f aed5 	bne.w	90010918 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x7c>
90010b6e:	e6b7      	b.n	900108e0 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x44>
  }
  return numberMCU;
}
90010b70:	ee17 0a90 	vmov	r0, s15
90010b74:	b009      	add	sp, #36	; 0x24
90010b76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90010b7a:	bf00      	nop
90010b7c:	aaaaaaab 	.word	0xaaaaaaab
90010b80:	24026218 	.word	0x24026218
90010b84:	900267a0 	.word	0x900267a0
90010b88:	24025a18 	.word	0x24025a18
90010b8c:	24025e18 	.word	0x24025e18
90010b90:	24025218 	.word	0x24025218
90010b94:	24025618 	.word	0x24025618

90010b98 <JPEG_MCU_Gray_ARGB_ConvertBlocks>:
static uint32_t JPEG_MCU_Gray_ARGB_ConvertBlocks(uint8_t *pInBuffer, 
                                      uint8_t *pOutBuffer,
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{
90010b98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

  
  numberMCU = DataCount / GRAY_444_BLOCK_SIZE;
  currentMCU = BlockIndex;
  
  while(currentMCU < (numberMCU + BlockIndex))
90010b9c:	eb02 1a93 	add.w	sl, r2, r3, lsr #6
  numberMCU = DataCount / GRAY_444_BLOCK_SIZE;
90010ba0:	099c      	lsrs	r4, r3, #6
  while(currentMCU < (numberMCU + BlockIndex))
90010ba2:	4552      	cmp	r2, sl
  numberMCU = DataCount / GRAY_444_BLOCK_SIZE;
90010ba4:	ee07 4a90 	vmov	s15, r4
  while(currentMCU < (numberMCU + BlockIndex))
90010ba8:	f080 8088 	bcs.w	90010cbc <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x124>
  {
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
90010bac:	4b45      	ldr	r3, [pc, #276]	; (90010cc4 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x12c>)
    
    yRef = ((currentMCU *8) % JPEG_ConvertorParams.WidthExtend);
    
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
90010bae:	e9d3 9809 	ldrd	r9, r8, [r3, #36]	; 0x24
    pLum = pInBuffer;
    
    for(i= 0; i <  8; i++)
    { 
      pOutAddr = pOutBuffer + refline;
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
90010bb2:	691e      	ldr	r6, [r3, #16]
90010bb4:	e003      	b.n	90010bbe <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x26>
  while(currentMCU < (numberMCU + BlockIndex))
90010bb6:	4552      	cmp	r2, sl

        refline += JPEG_ConvertorParams.ScaledWidth;        
      }
    }
    
    pInBuffer +=  GRAY_444_BLOCK_SIZE;    
90010bb8:	f100 0040 	add.w	r0, r0, #64	; 0x40
  while(currentMCU < (numberMCU + BlockIndex))
90010bbc:	d07e      	beq.n	90010cbc <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x124>
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
90010bbe:	00d3      	lsls	r3, r2, #3
    currentMCU++;
90010bc0:	4604      	mov	r4, r0
90010bc2:	f04f 0e08 	mov.w	lr, #8
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
90010bc6:	3201      	adds	r2, #1
90010bc8:	fbb3 f5f9 	udiv	r5, r3, r9
    yRef = ((currentMCU *8) % JPEG_ConvertorParams.WidthExtend);
90010bcc:	fb09 3315 	mls	r3, r9, r5, r3
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
90010bd0:	fb08 f505 	mul.w	r5, r8, r5
90010bd4:	005b      	lsls	r3, r3, #1
90010bd6:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
90010bda:	429e      	cmp	r6, r3
90010bdc:	d9eb      	bls.n	90010bb6 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x1e>
          ySample =   (uint32_t)(*pLum);
90010bde:	f894 c000 	ldrb.w	ip, [r4]
      pOutAddr = pOutBuffer + refline;
90010be2:	18cd      	adds	r5, r1, r3
          pLum++;
90010be4:	3408      	adds	r4, #8
    for(i= 0; i <  8; i++)
90010be6:	f1be 0e01 	subs.w	lr, lr, #1
          *(__IO uint16_t *)pOutAddr = ((ySample >> 3) << 11) |  ((ySample >> 2) << 5) | (ySample >> 3);     
90010bea:	ea4f 07dc 	mov.w	r7, ip, lsr #3
90010bee:	ea4f 0c9c 	mov.w	ip, ip, lsr #2
90010bf2:	ea4f 2bc7 	mov.w	fp, r7, lsl #11
90010bf6:	ea4b 1c4c 	orr.w	ip, fp, ip, lsl #5
90010bfa:	ea47 070c 	orr.w	r7, r7, ip
90010bfe:	52cf      	strh	r7, [r1, r3]
        refline += JPEG_ConvertorParams.ScaledWidth;        
90010c00:	4443      	add	r3, r8
          ySample =   (uint32_t)(*pLum);
90010c02:	f814 cc07 	ldrb.w	ip, [r4, #-7]
          *(__IO uint16_t *)pOutAddr = ((ySample >> 3) << 11) |  ((ySample >> 2) << 5) | (ySample >> 3);     
90010c06:	ea4f 07dc 	mov.w	r7, ip, lsr #3
90010c0a:	ea4f 0c9c 	mov.w	ip, ip, lsr #2
90010c0e:	ea4f 2bc7 	mov.w	fp, r7, lsl #11
90010c12:	ea4b 1c4c 	orr.w	ip, fp, ip, lsl #5
90010c16:	ea47 070c 	orr.w	r7, r7, ip
90010c1a:	806f      	strh	r7, [r5, #2]
          ySample =   (uint32_t)(*pLum);
90010c1c:	f814 cc06 	ldrb.w	ip, [r4, #-6]
          *(__IO uint16_t *)pOutAddr = ((ySample >> 3) << 11) |  ((ySample >> 2) << 5) | (ySample >> 3);     
90010c20:	ea4f 07dc 	mov.w	r7, ip, lsr #3
90010c24:	ea4f 0c9c 	mov.w	ip, ip, lsr #2
90010c28:	ea4f 2bc7 	mov.w	fp, r7, lsl #11
90010c2c:	ea4b 1c4c 	orr.w	ip, fp, ip, lsl #5
90010c30:	ea47 070c 	orr.w	r7, r7, ip
90010c34:	80af      	strh	r7, [r5, #4]
          ySample =   (uint32_t)(*pLum);
90010c36:	f814 cc05 	ldrb.w	ip, [r4, #-5]
          *(__IO uint16_t *)pOutAddr = ((ySample >> 3) << 11) |  ((ySample >> 2) << 5) | (ySample >> 3);     
90010c3a:	ea4f 07dc 	mov.w	r7, ip, lsr #3
90010c3e:	ea4f 0c9c 	mov.w	ip, ip, lsr #2
90010c42:	ea4f 2bc7 	mov.w	fp, r7, lsl #11
90010c46:	ea4b 1c4c 	orr.w	ip, fp, ip, lsl #5
90010c4a:	ea47 070c 	orr.w	r7, r7, ip
90010c4e:	80ef      	strh	r7, [r5, #6]
          ySample =   (uint32_t)(*pLum);
90010c50:	f814 cc04 	ldrb.w	ip, [r4, #-4]
          *(__IO uint16_t *)pOutAddr = ((ySample >> 3) << 11) |  ((ySample >> 2) << 5) | (ySample >> 3);     
90010c54:	ea4f 07dc 	mov.w	r7, ip, lsr #3
90010c58:	ea4f 0c9c 	mov.w	ip, ip, lsr #2
90010c5c:	ea4f 2bc7 	mov.w	fp, r7, lsl #11
90010c60:	ea4b 1c4c 	orr.w	ip, fp, ip, lsl #5
90010c64:	ea47 070c 	orr.w	r7, r7, ip
90010c68:	812f      	strh	r7, [r5, #8]
          ySample =   (uint32_t)(*pLum);
90010c6a:	f814 cc03 	ldrb.w	ip, [r4, #-3]
          *(__IO uint16_t *)pOutAddr = ((ySample >> 3) << 11) |  ((ySample >> 2) << 5) | (ySample >> 3);     
90010c6e:	ea4f 07dc 	mov.w	r7, ip, lsr #3
90010c72:	ea4f 0c9c 	mov.w	ip, ip, lsr #2
90010c76:	ea4f 2bc7 	mov.w	fp, r7, lsl #11
90010c7a:	ea4b 1c4c 	orr.w	ip, fp, ip, lsl #5
90010c7e:	ea47 070c 	orr.w	r7, r7, ip
90010c82:	816f      	strh	r7, [r5, #10]
          ySample =   (uint32_t)(*pLum);
90010c84:	f814 cc02 	ldrb.w	ip, [r4, #-2]
          *(__IO uint16_t *)pOutAddr = ((ySample >> 3) << 11) |  ((ySample >> 2) << 5) | (ySample >> 3);     
90010c88:	ea4f 07dc 	mov.w	r7, ip, lsr #3
90010c8c:	ea4f 0c9c 	mov.w	ip, ip, lsr #2
90010c90:	ea4f 2bc7 	mov.w	fp, r7, lsl #11
90010c94:	ea4b 1c4c 	orr.w	ip, fp, ip, lsl #5
90010c98:	ea47 070c 	orr.w	r7, r7, ip
90010c9c:	81af      	strh	r7, [r5, #12]
          ySample =   (uint32_t)(*pLum);
90010c9e:	f814 cc01 	ldrb.w	ip, [r4, #-1]
          *(__IO uint16_t *)pOutAddr = ((ySample >> 3) << 11) |  ((ySample >> 2) << 5) | (ySample >> 3);     
90010ca2:	ea4f 07dc 	mov.w	r7, ip, lsr #3
90010ca6:	ea4f 0c9c 	mov.w	ip, ip, lsr #2
90010caa:	ea4f 2bc7 	mov.w	fp, r7, lsl #11
90010cae:	ea4b 1c4c 	orr.w	ip, fp, ip, lsl #5
90010cb2:	ea47 070c 	orr.w	r7, r7, ip
90010cb6:	81ef      	strh	r7, [r5, #14]
    for(i= 0; i <  8; i++)
90010cb8:	d18f      	bne.n	90010bda <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x42>
90010cba:	e77c      	b.n	90010bb6 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x1e>
  }
  return numberMCU;
}
90010cbc:	ee17 0a90 	vmov	r0, s15
90010cc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90010cc4:	24026218 	.word	0x24026218

90010cc8 <JPEG_MCU_YCCK_ARGB_ConvertBlocks>:
static uint32_t JPEG_MCU_YCCK_ARGB_ConvertBlocks(uint8_t *pInBuffer, 
                                      uint8_t *pOutBuffer, 
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{  
90010cc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  
  int32_t c_red, c_blue, c_green;
  
  uint8_t *pOutAddr, *pChrom;
  
  numberMCU = DataCount / CMYK_444_BLOCK_SIZE;
90010ccc:	0a1c      	lsrs	r4, r3, #8
{  
90010cce:	b083      	sub	sp, #12
  currentMCU = BlockIndex;
  

  while(currentMCU < (numberMCU + BlockIndex))
90010cd0:	eb02 2313 	add.w	r3, r2, r3, lsr #8
  numberMCU = DataCount / CMYK_444_BLOCK_SIZE;
90010cd4:	ee07 4a90 	vmov	s15, r4
  while(currentMCU < (numberMCU + BlockIndex))
90010cd8:	429a      	cmp	r2, r3
90010cda:	9300      	str	r3, [sp, #0]
90010cdc:	f080 8129 	bcs.w	90010f32 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x26a>
  {

    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
90010ce0:	4b96      	ldr	r3, [pc, #600]	; (90010f3c <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x274>)
        pOutAddr = pOutBuffer+ refline;        

          for(j=0; j < 8; j++)
          {           
            color_k = (int32_t)(*(pChrom + 192));
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
90010ce2:	f8df c25c 	ldr.w	ip, [pc, #604]	; 90010f40 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x278>
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
90010ce6:	6a5c      	ldr	r4, [r3, #36]	; 0x24
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
90010ce8:	f8d3 8028 	ldr.w	r8, [r3, #40]	; 0x28
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
90010cec:	691e      	ldr	r6, [r3, #16]
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
90010cee:	9401      	str	r4, [sp, #4]
90010cf0:	e005      	b.n	90010cfe <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x36>
  while(currentMCU < (numberMCU + BlockIndex))
90010cf2:	9b00      	ldr	r3, [sp, #0]

        refline += JPEG_ConvertorParams.ScaledWidth;          
      }
    }   
    
    pInBuffer +=  CMYK_444_BLOCK_SIZE;
90010cf4:	f500 7080 	add.w	r0, r0, #256	; 0x100
  while(currentMCU < (numberMCU + BlockIndex))
90010cf8:	429a      	cmp	r2, r3
90010cfa:	f000 811a 	beq.w	90010f32 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x26a>
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
90010cfe:	00d3      	lsls	r3, r2, #3
90010d00:	9c01      	ldr	r4, [sp, #4]
90010d02:	3201      	adds	r2, #1
    currentMCU++;
90010d04:	f04f 0e08 	mov.w	lr, #8
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
90010d08:	fbb3 f5f4 	udiv	r5, r3, r4
    yRef = ((currentMCU *8) % JPEG_ConvertorParams.WidthExtend);
90010d0c:	fb04 3415 	mls	r4, r4, r5, r3
    currentMCU++;
90010d10:	4603      	mov	r3, r0
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
90010d12:	fb08 f505 	mul.w	r5, r8, r5
90010d16:	0064      	lsls	r4, r4, #1
90010d18:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
90010d1c:	42a6      	cmp	r6, r4
90010d1e:	d9e8      	bls.n	90010cf2 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x2a>
            color_k = (int32_t)(*(pChrom + 192));
90010d20:	f893 a0c0 	ldrb.w	sl, [r3, #192]	; 0xc0
        pOutAddr = pOutBuffer+ refline;        
90010d24:	190f      	adds	r7, r1, r4
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
90010d26:	f893 9040 	ldrb.w	r9, [r3, #64]	; 0x40
    for(i= 0; i <  8; i++)
90010d2a:	f1be 0e01 	subs.w	lr, lr, #1
            pChrom++;
90010d2e:	f103 0308 	add.w	r3, r3, #8
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
90010d32:	fb19 f90a 	smulbb	r9, r9, sl
90010d36:	fbac 5909 	umull	r5, r9, ip, r9
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
90010d3a:	f813 5c08 	ldrb.w	r5, [r3, #-8]
90010d3e:	fb15 f50a 	smulbb	r5, r5, sl
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
90010d42:	ea4f 2959 	mov.w	r9, r9, lsr #9
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
90010d46:	fbac b505 	umull	fp, r5, ip, r5
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
90010d4a:	ea4f 1949 	mov.w	r9, r9, lsl #5
            ((c_red >> 3) << JPEG_RED_OFFSET)     | \
90010d4e:	ea4f 2595 	mov.w	r5, r5, lsr #10
90010d52:	ea49 25c5 	orr.w	r5, r9, r5, lsl #11
            c_blue = (color_k * (int32_t)(*(pChrom + 128)))/255;
90010d56:	f893 9078 	ldrb.w	r9, [r3, #120]	; 0x78
90010d5a:	fb19 f90a 	smulbb	r9, r9, sl
90010d5e:	fbac a909 	umull	sl, r9, ip, r9
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
90010d62:	ea45 2599 	orr.w	r5, r5, r9, lsr #10
90010d66:	b2ad      	uxth	r5, r5
          *(__IO uint16_t *)pOutAddr = 
90010d68:	530d      	strh	r5, [r1, r4]
        refline += JPEG_ConvertorParams.ScaledWidth;          
90010d6a:	4444      	add	r4, r8
            color_k = (int32_t)(*(pChrom + 192));
90010d6c:	f893 a0b9 	ldrb.w	sl, [r3, #185]	; 0xb9
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
90010d70:	f893 9039 	ldrb.w	r9, [r3, #57]	; 0x39
90010d74:	fb19 f90a 	smulbb	r9, r9, sl
90010d78:	fbac 5909 	umull	r5, r9, ip, r9
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
90010d7c:	f813 5c07 	ldrb.w	r5, [r3, #-7]
90010d80:	fb15 f50a 	smulbb	r5, r5, sl
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
90010d84:	ea4f 2959 	mov.w	r9, r9, lsr #9
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
90010d88:	fbac b505 	umull	fp, r5, ip, r5
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
90010d8c:	ea4f 1949 	mov.w	r9, r9, lsl #5
            ((c_red >> 3) << JPEG_RED_OFFSET)     | \
90010d90:	ea4f 2595 	mov.w	r5, r5, lsr #10
90010d94:	ea49 25c5 	orr.w	r5, r9, r5, lsl #11
            c_blue = (color_k * (int32_t)(*(pChrom + 128)))/255;
90010d98:	f893 9079 	ldrb.w	r9, [r3, #121]	; 0x79
90010d9c:	fb19 f90a 	smulbb	r9, r9, sl
90010da0:	fbac a909 	umull	sl, r9, ip, r9
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
90010da4:	ea45 2599 	orr.w	r5, r5, r9, lsr #10
90010da8:	b2ad      	uxth	r5, r5
          *(__IO uint16_t *)pOutAddr = 
90010daa:	807d      	strh	r5, [r7, #2]
            color_k = (int32_t)(*(pChrom + 192));
90010dac:	f893 a0ba 	ldrb.w	sl, [r3, #186]	; 0xba
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
90010db0:	f893 903a 	ldrb.w	r9, [r3, #58]	; 0x3a
90010db4:	fb19 f90a 	smulbb	r9, r9, sl
90010db8:	fbac 5909 	umull	r5, r9, ip, r9
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
90010dbc:	f813 5c06 	ldrb.w	r5, [r3, #-6]
90010dc0:	fb15 f50a 	smulbb	r5, r5, sl
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
90010dc4:	ea4f 2959 	mov.w	r9, r9, lsr #9
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
90010dc8:	fbac b505 	umull	fp, r5, ip, r5
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
90010dcc:	ea4f 1949 	mov.w	r9, r9, lsl #5
            ((c_red >> 3) << JPEG_RED_OFFSET)     | \
90010dd0:	ea4f 2595 	mov.w	r5, r5, lsr #10
90010dd4:	ea49 25c5 	orr.w	r5, r9, r5, lsl #11
            c_blue = (color_k * (int32_t)(*(pChrom + 128)))/255;
90010dd8:	f893 907a 	ldrb.w	r9, [r3, #122]	; 0x7a
90010ddc:	fb19 f90a 	smulbb	r9, r9, sl
90010de0:	fbac a909 	umull	sl, r9, ip, r9
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
90010de4:	ea45 2599 	orr.w	r5, r5, r9, lsr #10
90010de8:	b2ad      	uxth	r5, r5
          *(__IO uint16_t *)pOutAddr = 
90010dea:	80bd      	strh	r5, [r7, #4]
            color_k = (int32_t)(*(pChrom + 192));
90010dec:	f893 a0bb 	ldrb.w	sl, [r3, #187]	; 0xbb
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
90010df0:	f893 903b 	ldrb.w	r9, [r3, #59]	; 0x3b
90010df4:	fb19 f90a 	smulbb	r9, r9, sl
90010df8:	fbac 5909 	umull	r5, r9, ip, r9
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
90010dfc:	f813 5c05 	ldrb.w	r5, [r3, #-5]
90010e00:	fb15 f50a 	smulbb	r5, r5, sl
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
90010e04:	ea4f 2959 	mov.w	r9, r9, lsr #9
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
90010e08:	fbac b505 	umull	fp, r5, ip, r5
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
90010e0c:	ea4f 1949 	mov.w	r9, r9, lsl #5
            ((c_red >> 3) << JPEG_RED_OFFSET)     | \
90010e10:	ea4f 2595 	mov.w	r5, r5, lsr #10
90010e14:	ea49 25c5 	orr.w	r5, r9, r5, lsl #11
            c_blue = (color_k * (int32_t)(*(pChrom + 128)))/255;
90010e18:	f893 907b 	ldrb.w	r9, [r3, #123]	; 0x7b
90010e1c:	fb19 f90a 	smulbb	r9, r9, sl
90010e20:	fbac a909 	umull	sl, r9, ip, r9
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
90010e24:	ea45 2599 	orr.w	r5, r5, r9, lsr #10
90010e28:	b2ad      	uxth	r5, r5
          *(__IO uint16_t *)pOutAddr = 
90010e2a:	80fd      	strh	r5, [r7, #6]
            color_k = (int32_t)(*(pChrom + 192));
90010e2c:	f893 a0bc 	ldrb.w	sl, [r3, #188]	; 0xbc
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
90010e30:	f893 903c 	ldrb.w	r9, [r3, #60]	; 0x3c
90010e34:	fb19 f90a 	smulbb	r9, r9, sl
90010e38:	fbac 5909 	umull	r5, r9, ip, r9
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
90010e3c:	f813 5c04 	ldrb.w	r5, [r3, #-4]
90010e40:	fb15 f50a 	smulbb	r5, r5, sl
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
90010e44:	ea4f 2959 	mov.w	r9, r9, lsr #9
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
90010e48:	fbac b505 	umull	fp, r5, ip, r5
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
90010e4c:	ea4f 1949 	mov.w	r9, r9, lsl #5
            ((c_red >> 3) << JPEG_RED_OFFSET)     | \
90010e50:	ea4f 2595 	mov.w	r5, r5, lsr #10
90010e54:	ea49 25c5 	orr.w	r5, r9, r5, lsl #11
            c_blue = (color_k * (int32_t)(*(pChrom + 128)))/255;
90010e58:	f893 907c 	ldrb.w	r9, [r3, #124]	; 0x7c
90010e5c:	fb19 f90a 	smulbb	r9, r9, sl
90010e60:	fbac a909 	umull	sl, r9, ip, r9
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
90010e64:	ea45 2599 	orr.w	r5, r5, r9, lsr #10
90010e68:	b2ad      	uxth	r5, r5
          *(__IO uint16_t *)pOutAddr = 
90010e6a:	813d      	strh	r5, [r7, #8]
            color_k = (int32_t)(*(pChrom + 192));
90010e6c:	f893 a0bd 	ldrb.w	sl, [r3, #189]	; 0xbd
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
90010e70:	f893 903d 	ldrb.w	r9, [r3, #61]	; 0x3d
90010e74:	fb19 f90a 	smulbb	r9, r9, sl
90010e78:	fbac 5909 	umull	r5, r9, ip, r9
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
90010e7c:	f813 5c03 	ldrb.w	r5, [r3, #-3]
90010e80:	fb15 f50a 	smulbb	r5, r5, sl
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
90010e84:	ea4f 2959 	mov.w	r9, r9, lsr #9
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
90010e88:	fbac b505 	umull	fp, r5, ip, r5
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
90010e8c:	ea4f 1949 	mov.w	r9, r9, lsl #5
            ((c_red >> 3) << JPEG_RED_OFFSET)     | \
90010e90:	ea4f 2595 	mov.w	r5, r5, lsr #10
90010e94:	ea49 25c5 	orr.w	r5, r9, r5, lsl #11
            c_blue = (color_k * (int32_t)(*(pChrom + 128)))/255;
90010e98:	f893 907d 	ldrb.w	r9, [r3, #125]	; 0x7d
90010e9c:	fb19 f90a 	smulbb	r9, r9, sl
90010ea0:	fbac a909 	umull	sl, r9, ip, r9
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
90010ea4:	ea45 2599 	orr.w	r5, r5, r9, lsr #10
90010ea8:	b2ad      	uxth	r5, r5
          *(__IO uint16_t *)pOutAddr = 
90010eaa:	817d      	strh	r5, [r7, #10]
            color_k = (int32_t)(*(pChrom + 192));
90010eac:	f893 a0be 	ldrb.w	sl, [r3, #190]	; 0xbe
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
90010eb0:	f813 9c02 	ldrb.w	r9, [r3, #-2]
90010eb4:	fb19 f90a 	smulbb	r9, r9, sl
90010eb8:	fbac 5909 	umull	r5, r9, ip, r9
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
90010ebc:	f893 503e 	ldrb.w	r5, [r3, #62]	; 0x3e
90010ec0:	fb15 f50a 	smulbb	r5, r5, sl
            ((c_red >> 3) << JPEG_RED_OFFSET)     | \
90010ec4:	ea4f 2999 	mov.w	r9, r9, lsr #10
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
90010ec8:	fbac b505 	umull	fp, r5, ip, r5
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
90010ecc:	ea4f 2555 	mov.w	r5, r5, lsr #9
90010ed0:	ea4f 1545 	mov.w	r5, r5, lsl #5
            ((c_red >> 3) << JPEG_RED_OFFSET)     | \
90010ed4:	ea45 25c9 	orr.w	r5, r5, r9, lsl #11
            c_blue = (color_k * (int32_t)(*(pChrom + 128)))/255;
90010ed8:	f893 907e 	ldrb.w	r9, [r3, #126]	; 0x7e
90010edc:	fb19 f90a 	smulbb	r9, r9, sl
90010ee0:	fbac a909 	umull	sl, r9, ip, r9
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
90010ee4:	ea45 2599 	orr.w	r5, r5, r9, lsr #10
90010ee8:	b2ad      	uxth	r5, r5
          *(__IO uint16_t *)pOutAddr = 
90010eea:	81bd      	strh	r5, [r7, #12]
            color_k = (int32_t)(*(pChrom + 192));
90010eec:	f893 a0bf 	ldrb.w	sl, [r3, #191]	; 0xbf
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
90010ef0:	f893 903f 	ldrb.w	r9, [r3, #63]	; 0x3f
90010ef4:	fb19 f90a 	smulbb	r9, r9, sl
90010ef8:	fbac 5909 	umull	r5, r9, ip, r9
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
90010efc:	f813 5c01 	ldrb.w	r5, [r3, #-1]
90010f00:	fb15 f50a 	smulbb	r5, r5, sl
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
90010f04:	ea4f 2959 	mov.w	r9, r9, lsr #9
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
90010f08:	fbac b505 	umull	fp, r5, ip, r5
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
90010f0c:	ea4f 1949 	mov.w	r9, r9, lsl #5
            ((c_red >> 3) << JPEG_RED_OFFSET)     | \
90010f10:	ea4f 2595 	mov.w	r5, r5, lsr #10
90010f14:	ea49 25c5 	orr.w	r5, r9, r5, lsl #11
            c_blue = (color_k * (int32_t)(*(pChrom + 128)))/255;
90010f18:	f893 907f 	ldrb.w	r9, [r3, #127]	; 0x7f
90010f1c:	fb19 f90a 	smulbb	r9, r9, sl
90010f20:	fbac a909 	umull	sl, r9, ip, r9
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
90010f24:	ea45 2599 	orr.w	r5, r5, r9, lsr #10
90010f28:	b2ad      	uxth	r5, r5
          *(__IO uint16_t *)pOutAddr = 
90010f2a:	81fd      	strh	r5, [r7, #14]
    for(i= 0; i <  8; i++)
90010f2c:	f47f aef6 	bne.w	90010d1c <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x54>
90010f30:	e6df      	b.n	90010cf2 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x2a>
  }
  return numberMCU;
}
90010f32:	ee17 0a90 	vmov	r0, s15
90010f36:	b003      	add	sp, #12
90010f38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90010f3c:	24026218 	.word	0x24026218
90010f40:	80808081 	.word	0x80808081

90010f44 <JPEG_GetDecodeColorConvertFunc>:
  *                      depending of the jpeg image color space and chroma sampling info. 
  * @param ImageNbMCUs : pointer to uint32_t, used to retrive the total number of MCU blocks in the jpeg image.  
  * @retval HAL status : HAL_OK or HAL_ERROR.
  */
HAL_StatusTypeDef JPEG_GetDecodeColorConvertFunc(JPEG_ConfTypeDef *pJpegInfo, JPEG_YCbCrToRGB_Convert_Function *pFunction, uint32_t *ImageNbMCUs)
{
90010f44:	b4f0      	push	{r4, r5, r6, r7}
  uint32_t hMCU, vMCU;

  JPEG_ConvertorParams.ColorSpace = pJpegInfo->ColorSpace;
  JPEG_ConvertorParams.ImageWidth = pJpegInfo->ImageWidth;
90010f46:	68c3      	ldr	r3, [r0, #12]
  JPEG_ConvertorParams.ColorSpace = pJpegInfo->ColorSpace;
90010f48:	6805      	ldr	r5, [r0, #0]
90010f4a:	4c3e      	ldr	r4, [pc, #248]	; (90011044 <JPEG_GetDecodeColorConvertFunc+0x100>)
  JPEG_ConvertorParams.ImageHeight = pJpegInfo->ImageHeight;
  JPEG_ConvertorParams.ImageSize_Bytes = pJpegInfo->ImageWidth * pJpegInfo->ImageHeight * JPEG_BYTES_PER_PIXEL;
  
  JPEG_ConvertorParams.ChromaSubsampling = pJpegInfo->ChromaSubsampling;  
  if(JPEG_ConvertorParams.ColorSpace == JPEG_YCBCR_COLORSPACE)
90010f4c:	2d10      	cmp	r5, #16
  JPEG_ConvertorParams.ImageWidth = pJpegInfo->ImageWidth;
90010f4e:	60a3      	str	r3, [r4, #8]
  JPEG_ConvertorParams.ColorSpace = pJpegInfo->ColorSpace;
90010f50:	6025      	str	r5, [r4, #0]
  JPEG_ConvertorParams.ChromaSubsampling = pJpegInfo->ChromaSubsampling;  
90010f52:	e9d0 7601 	ldrd	r7, r6, [r0, #4]
  JPEG_ConvertorParams.ImageSize_Bytes = pJpegInfo->ImageWidth * pJpegInfo->ImageHeight * JPEG_BYTES_PER_PIXEL;
90010f56:	fb06 f003 	mul.w	r0, r6, r3
  JPEG_ConvertorParams.ImageHeight = pJpegInfo->ImageHeight;
90010f5a:	60e6      	str	r6, [r4, #12]
  JPEG_ConvertorParams.ImageSize_Bytes = pJpegInfo->ImageWidth * pJpegInfo->ImageHeight * JPEG_BYTES_PER_PIXEL;
90010f5c:	ea4f 0040 	mov.w	r0, r0, lsl #1
  JPEG_ConvertorParams.ChromaSubsampling = pJpegInfo->ChromaSubsampling;  
90010f60:	6067      	str	r7, [r4, #4]
  JPEG_ConvertorParams.ImageSize_Bytes = pJpegInfo->ImageWidth * pJpegInfo->ImageHeight * JPEG_BYTES_PER_PIXEL;
90010f62:	6120      	str	r0, [r4, #16]
  if(JPEG_ConvertorParams.ColorSpace == JPEG_YCBCR_COLORSPACE)
90010f64:	d027      	beq.n	90010fb6 <JPEG_GetDecodeColorConvertFunc+0x72>
      }
      JPEG_ConvertorParams.H_factor = 8;
      JPEG_ConvertorParams.V_factor  = 8;
    }   
  }
  else if(JPEG_ConvertorParams.ColorSpace == JPEG_GRAYSCALE_COLORSPACE)
90010f66:	b9ed      	cbnz	r5, 90010fa4 <JPEG_GetDecodeColorConvertFunc+0x60>
  {
    *pFunction =  JPEG_MCU_Gray_ARGB_ConvertBlocks;
90010f68:	4837      	ldr	r0, [pc, #220]	; (90011048 <JPEG_GetDecodeColorConvertFunc+0x104>)
90010f6a:	6008      	str	r0, [r1, #0]

    JPEG_ConvertorParams.LineOffset = JPEG_ConvertorParams.ImageWidth % 8;
      
    if(JPEG_ConvertorParams.LineOffset != 0)
90010f6c:	f013 0107 	ands.w	r1, r3, #7
90010f70:	d02b      	beq.n	90010fca <JPEG_GetDecodeColorConvertFunc+0x86>

    JPEG_ConvertorParams.LineOffset = JPEG_ConvertorParams.ImageWidth % 8;
      
    if(JPEG_ConvertorParams.LineOffset != 0)
    {
      JPEG_ConvertorParams.LineOffset = 8 - JPEG_ConvertorParams.LineOffset;  
90010f72:	f1c1 0108 	rsb	r1, r1, #8
      JPEG_ConvertorParams.H_factor = 16;
90010f76:	2508      	movs	r5, #8
      JPEG_ConvertorParams.LineOffset = 8 - JPEG_ConvertorParams.LineOffset;  
90010f78:	6161      	str	r1, [r4, #20]
  else
  {  
    return HAL_ERROR; /* Color space Not supported*/
  }
 
  JPEG_ConvertorParams.WidthExtend = JPEG_ConvertorParams.ImageWidth + JPEG_ConvertorParams.LineOffset;
90010f7a:	4419      	add	r1, r3
90010f7c:	6261      	str	r1, [r4, #36]	; 0x24
  JPEG_ConvertorParams.ScaledWidth = JPEG_BYTES_PER_PIXEL * JPEG_ConvertorParams.ImageWidth; 
90010f7e:	0059      	lsls	r1, r3, #1
  
  hMCU = (JPEG_ConvertorParams.ImageWidth / JPEG_ConvertorParams.H_factor);
90010f80:	08db      	lsrs	r3, r3, #3
  JPEG_ConvertorParams.ScaledWidth = JPEG_BYTES_PER_PIXEL * JPEG_ConvertorParams.ImageWidth; 
90010f82:	62a1      	str	r1, [r4, #40]	; 0x28
      JPEG_ConvertorParams.V_factor  = 8;
90010f84:	e9c4 5507 	strd	r5, r5, [r4, #28]
  if((JPEG_ConvertorParams.ImageWidth % JPEG_ConvertorParams.H_factor) != 0)
  {
    hMCU++; /*+1 for horizenatl incomplete MCU */                
90010f88:	3301      	adds	r3, #1
  }

  vMCU = (JPEG_ConvertorParams.ImageHeight / JPEG_ConvertorParams.V_factor);
90010f8a:	fbb6 f1f5 	udiv	r1, r6, r5
  if((JPEG_ConvertorParams.ImageHeight % JPEG_ConvertorParams.V_factor) != 0)
90010f8e:	fb05 6611 	mls	r6, r5, r1, r6
90010f92:	b106      	cbz	r6, 90010f96 <JPEG_GetDecodeColorConvertFunc+0x52>
  {
    vMCU++; /*+1 for vertical incomplete MCU */                
90010f94:	3101      	adds	r1, #1
  }
  JPEG_ConvertorParams.MCU_Total_Nb = (hMCU * vMCU);
90010f96:	fb01 f303 	mul.w	r3, r1, r3
  *ImageNbMCUs = JPEG_ConvertorParams.MCU_Total_Nb;

  return HAL_OK;
90010f9a:	2000      	movs	r0, #0
  JPEG_ConvertorParams.MCU_Total_Nb = (hMCU * vMCU);
90010f9c:	62e3      	str	r3, [r4, #44]	; 0x2c
  *ImageNbMCUs = JPEG_ConvertorParams.MCU_Total_Nb;
90010f9e:	6013      	str	r3, [r2, #0]
}
90010fa0:	bcf0      	pop	{r4, r5, r6, r7}
90010fa2:	4770      	bx	lr
  else if(JPEG_ConvertorParams.ColorSpace == JPEG_CMYK_COLORSPACE)
90010fa4:	2d30      	cmp	r5, #48	; 0x30
90010fa6:	d119      	bne.n	90010fdc <JPEG_GetDecodeColorConvertFunc+0x98>
    *pFunction =  JPEG_MCU_YCCK_ARGB_ConvertBlocks;
90010fa8:	4828      	ldr	r0, [pc, #160]	; (9001104c <JPEG_GetDecodeColorConvertFunc+0x108>)
90010faa:	6008      	str	r0, [r1, #0]
    if(JPEG_ConvertorParams.LineOffset != 0)
90010fac:	f013 0107 	ands.w	r1, r3, #7
90010fb0:	d1df      	bne.n	90010f72 <JPEG_GetDecodeColorConvertFunc+0x2e>
    JPEG_ConvertorParams.LineOffset = JPEG_ConvertorParams.ImageWidth % 8;
90010fb2:	6161      	str	r1, [r4, #20]
90010fb4:	e00a      	b.n	90010fcc <JPEG_GetDecodeColorConvertFunc+0x88>
    if(JPEG_ConvertorParams.ChromaSubsampling == JPEG_420_SUBSAMPLING)
90010fb6:	2f01      	cmp	r7, #1
90010fb8:	d024      	beq.n	90011004 <JPEG_GetDecodeColorConvertFunc+0xc0>
    else if(JPEG_ConvertorParams.ChromaSubsampling == JPEG_422_SUBSAMPLING)
90010fba:	2f02      	cmp	r7, #2
90010fbc:	d011      	beq.n	90010fe2 <JPEG_GetDecodeColorConvertFunc+0x9e>
      *pFunction =  JPEG_MCU_YCbCr444_ARGB_ConvertBlocks;
90010fbe:	4824      	ldr	r0, [pc, #144]	; (90011050 <JPEG_GetDecodeColorConvertFunc+0x10c>)
90010fc0:	6008      	str	r0, [r1, #0]
      if(JPEG_ConvertorParams.LineOffset != 0)
90010fc2:	f013 0107 	ands.w	r1, r3, #7
90010fc6:	d1d4      	bne.n	90010f72 <JPEG_GetDecodeColorConvertFunc+0x2e>
90010fc8:	e7f3      	b.n	90010fb2 <JPEG_GetDecodeColorConvertFunc+0x6e>
    JPEG_ConvertorParams.LineOffset = JPEG_ConvertorParams.ImageWidth % 8;
90010fca:	6165      	str	r5, [r4, #20]
  JPEG_ConvertorParams.ScaledWidth = JPEG_BYTES_PER_PIXEL * JPEG_ConvertorParams.ImageWidth; 
90010fcc:	0059      	lsls	r1, r3, #1
      JPEG_ConvertorParams.H_factor = 16;
90010fce:	2508      	movs	r5, #8
  JPEG_ConvertorParams.WidthExtend = JPEG_ConvertorParams.ImageWidth + JPEG_ConvertorParams.LineOffset;
90010fd0:	6263      	str	r3, [r4, #36]	; 0x24
  hMCU = (JPEG_ConvertorParams.ImageWidth / JPEG_ConvertorParams.H_factor);
90010fd2:	08db      	lsrs	r3, r3, #3
  JPEG_ConvertorParams.ScaledWidth = JPEG_BYTES_PER_PIXEL * JPEG_ConvertorParams.ImageWidth; 
90010fd4:	62a1      	str	r1, [r4, #40]	; 0x28
      JPEG_ConvertorParams.V_factor  = 8;
90010fd6:	e9c4 5507 	strd	r5, r5, [r4, #28]
  if((JPEG_ConvertorParams.ImageWidth % JPEG_ConvertorParams.H_factor) != 0)
90010fda:	e7d6      	b.n	90010f8a <JPEG_GetDecodeColorConvertFunc+0x46>
    return HAL_ERROR; /* Color space Not supported*/
90010fdc:	2001      	movs	r0, #1
}
90010fde:	bcf0      	pop	{r4, r5, r6, r7}
90010fe0:	4770      	bx	lr
      *pFunction =  JPEG_MCU_YCbCr422_ARGB_ConvertBlocks;
90010fe2:	481c      	ldr	r0, [pc, #112]	; (90011054 <JPEG_GetDecodeColorConvertFunc+0x110>)
      JPEG_ConvertorParams.H_factor = 16;
90010fe4:	61e5      	str	r5, [r4, #28]
      *pFunction =  JPEG_MCU_YCbCr422_ARGB_ConvertBlocks;
90010fe6:	6008      	str	r0, [r1, #0]
      if(JPEG_ConvertorParams.LineOffset != 0)
90010fe8:	f013 010f 	ands.w	r1, r3, #15
90010fec:	d022      	beq.n	90011034 <JPEG_GetDecodeColorConvertFunc+0xf0>
        JPEG_ConvertorParams.LineOffset = 16 - JPEG_ConvertorParams.LineOffset;  
90010fee:	f1c1 0110 	rsb	r1, r1, #16
      JPEG_ConvertorParams.V_factor  = 8;
90010ff2:	2508      	movs	r5, #8
        JPEG_ConvertorParams.LineOffset = 16 - JPEG_ConvertorParams.LineOffset;  
90010ff4:	6161      	str	r1, [r4, #20]
  JPEG_ConvertorParams.WidthExtend = JPEG_ConvertorParams.ImageWidth + JPEG_ConvertorParams.LineOffset;
90010ff6:	4419      	add	r1, r3
      JPEG_ConvertorParams.V_factor  = 8;
90010ff8:	6225      	str	r5, [r4, #32]
  JPEG_ConvertorParams.WidthExtend = JPEG_ConvertorParams.ImageWidth + JPEG_ConvertorParams.LineOffset;
90010ffa:	6261      	str	r1, [r4, #36]	; 0x24
  JPEG_ConvertorParams.ScaledWidth = JPEG_BYTES_PER_PIXEL * JPEG_ConvertorParams.ImageWidth; 
90010ffc:	0059      	lsls	r1, r3, #1
  hMCU = (JPEG_ConvertorParams.ImageWidth / JPEG_ConvertorParams.H_factor);
90010ffe:	091b      	lsrs	r3, r3, #4
  JPEG_ConvertorParams.ScaledWidth = JPEG_BYTES_PER_PIXEL * JPEG_ConvertorParams.ImageWidth; 
90011000:	62a1      	str	r1, [r4, #40]	; 0x28
90011002:	e7c1      	b.n	90010f88 <JPEG_GetDecodeColorConvertFunc+0x44>
      *pFunction = JPEG_MCU_YCbCr420_ARGB_ConvertBlocks;
90011004:	4814      	ldr	r0, [pc, #80]	; (90011058 <JPEG_GetDecodeColorConvertFunc+0x114>)
90011006:	6008      	str	r0, [r1, #0]
      if(JPEG_ConvertorParams.LineOffset != 0)
90011008:	f013 010f 	ands.w	r1, r3, #15
9001100c:	d107      	bne.n	9001101e <JPEG_GetDecodeColorConvertFunc+0xda>
      JPEG_ConvertorParams.LineOffset = JPEG_ConvertorParams.ImageWidth % 16;
9001100e:	6161      	str	r1, [r4, #20]
  JPEG_ConvertorParams.ScaledWidth = JPEG_BYTES_PER_PIXEL * JPEG_ConvertorParams.ImageWidth; 
90011010:	0059      	lsls	r1, r3, #1
  JPEG_ConvertorParams.WidthExtend = JPEG_ConvertorParams.ImageWidth + JPEG_ConvertorParams.LineOffset;
90011012:	6263      	str	r3, [r4, #36]	; 0x24
  hMCU = (JPEG_ConvertorParams.ImageWidth / JPEG_ConvertorParams.H_factor);
90011014:	091b      	lsrs	r3, r3, #4
  JPEG_ConvertorParams.ScaledWidth = JPEG_BYTES_PER_PIXEL * JPEG_ConvertorParams.ImageWidth; 
90011016:	62a1      	str	r1, [r4, #40]	; 0x28
      JPEG_ConvertorParams.V_factor  = 8;
90011018:	e9c4 5507 	strd	r5, r5, [r4, #28]
  if((JPEG_ConvertorParams.ImageWidth % JPEG_ConvertorParams.H_factor) != 0)
9001101c:	e7b5      	b.n	90010f8a <JPEG_GetDecodeColorConvertFunc+0x46>
        JPEG_ConvertorParams.LineOffset = 16 - JPEG_ConvertorParams.LineOffset;  
9001101e:	f1c1 0110 	rsb	r1, r1, #16
90011022:	6161      	str	r1, [r4, #20]
  JPEG_ConvertorParams.WidthExtend = JPEG_ConvertorParams.ImageWidth + JPEG_ConvertorParams.LineOffset;
90011024:	4419      	add	r1, r3
90011026:	6261      	str	r1, [r4, #36]	; 0x24
  JPEG_ConvertorParams.ScaledWidth = JPEG_BYTES_PER_PIXEL * JPEG_ConvertorParams.ImageWidth; 
90011028:	0059      	lsls	r1, r3, #1
  hMCU = (JPEG_ConvertorParams.ImageWidth / JPEG_ConvertorParams.H_factor);
9001102a:	091b      	lsrs	r3, r3, #4
  JPEG_ConvertorParams.ScaledWidth = JPEG_BYTES_PER_PIXEL * JPEG_ConvertorParams.ImageWidth; 
9001102c:	62a1      	str	r1, [r4, #40]	; 0x28
      JPEG_ConvertorParams.V_factor  = 8;
9001102e:	e9c4 5507 	strd	r5, r5, [r4, #28]
90011032:	e7a9      	b.n	90010f88 <JPEG_GetDecodeColorConvertFunc+0x44>
90011034:	2508      	movs	r5, #8
      JPEG_ConvertorParams.LineOffset = JPEG_ConvertorParams.ImageWidth % 16;
90011036:	6161      	str	r1, [r4, #20]
  JPEG_ConvertorParams.ScaledWidth = JPEG_BYTES_PER_PIXEL * JPEG_ConvertorParams.ImageWidth; 
90011038:	0059      	lsls	r1, r3, #1
      JPEG_ConvertorParams.V_factor  = 8;
9001103a:	e9c4 5308 	strd	r5, r3, [r4, #32]
  JPEG_ConvertorParams.ScaledWidth = JPEG_BYTES_PER_PIXEL * JPEG_ConvertorParams.ImageWidth; 
9001103e:	62a1      	str	r1, [r4, #40]	; 0x28
  hMCU = (JPEG_ConvertorParams.ImageWidth / JPEG_ConvertorParams.H_factor);
90011040:	091b      	lsrs	r3, r3, #4
  if((JPEG_ConvertorParams.ImageWidth % JPEG_ConvertorParams.H_factor) != 0)
90011042:	e7a2      	b.n	90010f8a <JPEG_GetDecodeColorConvertFunc+0x46>
90011044:	24026218 	.word	0x24026218
90011048:	90010b99 	.word	0x90010b99
9001104c:	90010cc9 	.word	0x90010cc9
90011050:	9001089d 	.word	0x9001089d
90011054:	900105c9 	.word	0x900105c9
90011058:	9001039d 	.word	0x9001039d

9001105c <_ZNK8touchgfx17AbstractPartition18getAllocationCountEv>:
9001105c:	8880      	ldrh	r0, [r0, #4]
9001105e:	4770      	bx	lr

90011060 <_ZN8touchgfx17AbstractPartition7indexOfEPKv>:
90011060:	b570      	push	{r4, r5, r6, lr}
90011062:	6803      	ldr	r3, [r0, #0]
90011064:	460c      	mov	r4, r1
90011066:	2100      	movs	r1, #0
90011068:	4605      	mov	r5, r0
9001106a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
9001106c:	4798      	blx	r3
9001106e:	4606      	mov	r6, r0
90011070:	682b      	ldr	r3, [r5, #0]
90011072:	4628      	mov	r0, r5
90011074:	1ba4      	subs	r4, r4, r6
90011076:	6a1b      	ldr	r3, [r3, #32]
90011078:	b2a4      	uxth	r4, r4
9001107a:	4798      	blx	r3
9001107c:	fbb4 f0f0 	udiv	r0, r4, r0
90011080:	bd70      	pop	{r4, r5, r6, pc}

90011082 <_ZN8touchgfx17AbstractPartition5clearEv>:
90011082:	2300      	movs	r3, #0
90011084:	8083      	strh	r3, [r0, #4]
90011086:	4770      	bx	lr

90011088 <_ZN8touchgfx17AbstractPartition8allocateEt>:
90011088:	b510      	push	{r4, lr}
9001108a:	6803      	ldr	r3, [r0, #0]
9001108c:	4604      	mov	r4, r0
9001108e:	8881      	ldrh	r1, [r0, #4]
90011090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
90011092:	4798      	blx	r3
90011094:	88a3      	ldrh	r3, [r4, #4]
90011096:	3301      	adds	r3, #1
90011098:	80a3      	strh	r3, [r4, #4]
9001109a:	bd10      	pop	{r4, pc}

9001109c <_ZN8touchgfx17AbstractPartition10allocateAtEtt>:
9001109c:	6803      	ldr	r3, [r0, #0]
9001109e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
900110a0:	4718      	bx	r3

900110a2 <_ZN8touchgfx17AbstractPartitionD1Ev>:
900110a2:	4770      	bx	lr

900110a4 <_ZN8touchgfx17AbstractPartitionC1Ev>:
900110a4:	4a02      	ldr	r2, [pc, #8]	; (900110b0 <_ZN8touchgfx17AbstractPartitionC1Ev+0xc>)
900110a6:	6002      	str	r2, [r0, #0]
900110a8:	2200      	movs	r2, #0
900110aa:	8082      	strh	r2, [r0, #4]
900110ac:	4770      	bx	lr
900110ae:	bf00      	nop
900110b0:	90026aa8 	.word	0x90026aa8

900110b4 <_ZN8touchgfx9Container13getFirstChildEv>:
900110b4:	6a80      	ldr	r0, [r0, #40]	; 0x28
900110b6:	4770      	bx	lr

900110b8 <_ZN8touchgfx9Container8containsERKNS_8DrawableE>:
900110b8:	6a83      	ldr	r3, [r0, #40]	; 0x28
900110ba:	2000      	movs	r0, #0
900110bc:	b12b      	cbz	r3, 900110ca <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
900110be:	b920      	cbnz	r0, 900110ca <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
900110c0:	1a5a      	subs	r2, r3, r1
900110c2:	699b      	ldr	r3, [r3, #24]
900110c4:	4250      	negs	r0, r2
900110c6:	4150      	adcs	r0, r2
900110c8:	e7f8      	b.n	900110bc <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x4>
900110ca:	4770      	bx	lr

900110cc <_ZN8touchgfx9Container3addERNS_8DrawableE>:
900110cc:	2300      	movs	r3, #0
900110ce:	6148      	str	r0, [r1, #20]
900110d0:	618b      	str	r3, [r1, #24]
900110d2:	6a83      	ldr	r3, [r0, #40]	; 0x28
900110d4:	b913      	cbnz	r3, 900110dc <_ZN8touchgfx9Container3addERNS_8DrawableE+0x10>
900110d6:	6281      	str	r1, [r0, #40]	; 0x28
900110d8:	4770      	bx	lr
900110da:	4613      	mov	r3, r2
900110dc:	699a      	ldr	r2, [r3, #24]
900110de:	2a00      	cmp	r2, #0
900110e0:	d1fb      	bne.n	900110da <_ZN8touchgfx9Container3addERNS_8DrawableE+0xe>
900110e2:	6199      	str	r1, [r3, #24]
900110e4:	4770      	bx	lr

900110e6 <_ZN8touchgfx9Container9removeAllEv>:
900110e6:	2200      	movs	r2, #0
900110e8:	6a83      	ldr	r3, [r0, #40]	; 0x28
900110ea:	b123      	cbz	r3, 900110f6 <_ZN8touchgfx9Container9removeAllEv+0x10>
900110ec:	6999      	ldr	r1, [r3, #24]
900110ee:	6281      	str	r1, [r0, #40]	; 0x28
900110f0:	e9c3 2205 	strd	r2, r2, [r3, #20]
900110f4:	e7f8      	b.n	900110e8 <_ZN8touchgfx9Container9removeAllEv+0x2>
900110f6:	4770      	bx	lr

900110f8 <_ZN8touchgfx9Container6unlinkEv>:
900110f8:	2300      	movs	r3, #0
900110fa:	6283      	str	r3, [r0, #40]	; 0x28
900110fc:	4770      	bx	lr

900110fe <_ZNK8touchgfx9Container12getSolidRectEv>:
900110fe:	2200      	movs	r2, #0
90011100:	8002      	strh	r2, [r0, #0]
90011102:	8042      	strh	r2, [r0, #2]
90011104:	8082      	strh	r2, [r0, #4]
90011106:	80c2      	strh	r2, [r0, #6]
90011108:	4770      	bx	lr

9001110a <_ZN8touchgfx9Container20moveChildrenRelativeEss>:
9001110a:	b570      	push	{r4, r5, r6, lr}
9001110c:	460d      	mov	r5, r1
9001110e:	4616      	mov	r6, r2
90011110:	6a84      	ldr	r4, [r0, #40]	; 0x28
90011112:	b13c      	cbz	r4, 90011124 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x1a>
90011114:	6823      	ldr	r3, [r4, #0]
90011116:	4620      	mov	r0, r4
90011118:	4632      	mov	r2, r6
9001111a:	4629      	mov	r1, r5
9001111c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
9001111e:	4798      	blx	r3
90011120:	69a4      	ldr	r4, [r4, #24]
90011122:	e7f6      	b.n	90011112 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x8>
90011124:	bd70      	pop	{r4, r5, r6, pc}

90011126 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE>:
90011126:	b538      	push	{r3, r4, r5, lr}
90011128:	460d      	mov	r5, r1
9001112a:	6a84      	ldr	r4, [r0, #40]	; 0x28
9001112c:	b134      	cbz	r4, 9001113c <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x16>
9001112e:	682b      	ldr	r3, [r5, #0]
90011130:	4621      	mov	r1, r4
90011132:	4628      	mov	r0, r5
90011134:	689b      	ldr	r3, [r3, #8]
90011136:	4798      	blx	r3
90011138:	69a4      	ldr	r4, [r4, #24]
9001113a:	e7f7      	b.n	9001112c <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x6>
9001113c:	bd38      	pop	{r3, r4, r5, pc}

9001113e <_ZN8touchgfx9ContainerD1Ev>:
9001113e:	4770      	bx	lr

90011140 <_ZN8touchgfx9ContainerD0Ev>:
90011140:	b510      	push	{r4, lr}
90011142:	4604      	mov	r4, r0
90011144:	212c      	movs	r1, #44	; 0x2c
90011146:	f011 fe4c 	bl	90022de2 <_ZdlPvj>
9001114a:	4620      	mov	r0, r4
9001114c:	bd10      	pop	{r4, pc}

9001114e <_ZN8touchgfx9Container6removeERNS_8DrawableE>:
9001114e:	6a83      	ldr	r3, [r0, #40]	; 0x28
90011150:	b19b      	cbz	r3, 9001117a <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
90011152:	428b      	cmp	r3, r1
90011154:	d109      	bne.n	9001116a <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x1c>
90011156:	699a      	ldr	r2, [r3, #24]
90011158:	2100      	movs	r1, #0
9001115a:	6159      	str	r1, [r3, #20]
9001115c:	6282      	str	r2, [r0, #40]	; 0x28
9001115e:	b902      	cbnz	r2, 90011162 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x14>
90011160:	4770      	bx	lr
90011162:	6199      	str	r1, [r3, #24]
90011164:	4770      	bx	lr
90011166:	4613      	mov	r3, r2
90011168:	b13a      	cbz	r2, 9001117a <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
9001116a:	699a      	ldr	r2, [r3, #24]
9001116c:	428a      	cmp	r2, r1
9001116e:	d1fa      	bne.n	90011166 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x18>
90011170:	698a      	ldr	r2, [r1, #24]
90011172:	619a      	str	r2, [r3, #24]
90011174:	2300      	movs	r3, #0
90011176:	e9c1 3305 	strd	r3, r3, [r1, #20]
9001117a:	4770      	bx	lr

9001117c <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_>:
9001117c:	b410      	push	{r4}
9001117e:	6a83      	ldr	r3, [r0, #40]	; 0x28
90011180:	4604      	mov	r4, r0
90011182:	b92b      	cbnz	r3, 90011190 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x14>
90011184:	6803      	ldr	r3, [r0, #0]
90011186:	4611      	mov	r1, r2
90011188:	f85d 4b04 	ldr.w	r4, [sp], #4
9001118c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
9001118e:	4718      	bx	r3
90011190:	b941      	cbnz	r1, 900111a4 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x28>
90011192:	6193      	str	r3, [r2, #24]
90011194:	6282      	str	r2, [r0, #40]	; 0x28
90011196:	6154      	str	r4, [r2, #20]
90011198:	f85d 4b04 	ldr.w	r4, [sp], #4
9001119c:	4770      	bx	lr
9001119e:	4603      	mov	r3, r0
900111a0:	2800      	cmp	r0, #0
900111a2:	d0f9      	beq.n	90011198 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1c>
900111a4:	4299      	cmp	r1, r3
900111a6:	6998      	ldr	r0, [r3, #24]
900111a8:	d1f9      	bne.n	9001119e <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x22>
900111aa:	6190      	str	r0, [r2, #24]
900111ac:	618a      	str	r2, [r1, #24]
900111ae:	e7f2      	b.n	90011196 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1a>

900111b0 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>:
900111b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
900111b4:	461f      	mov	r7, r3
900111b6:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
900111ba:	460d      	mov	r5, r1
900111bc:	4616      	mov	r6, r2
900111be:	b103      	cbz	r3, 900111c2 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x12>
900111c0:	6038      	str	r0, [r7, #0]
900111c2:	6a84      	ldr	r4, [r0, #40]	; 0x28
900111c4:	b314      	cbz	r4, 9001120c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x5c>
900111c6:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
900111ca:	b1eb      	cbz	r3, 90011208 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
900111cc:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
900111d0:	428d      	cmp	r5, r1
900111d2:	db19      	blt.n	90011208 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
900111d4:	b289      	uxth	r1, r1
900111d6:	8923      	ldrh	r3, [r4, #8]
900111d8:	440b      	add	r3, r1
900111da:	b21b      	sxth	r3, r3
900111dc:	429d      	cmp	r5, r3
900111de:	da13      	bge.n	90011208 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
900111e0:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
900111e4:	4296      	cmp	r6, r2
900111e6:	db0f      	blt.n	90011208 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
900111e8:	b292      	uxth	r2, r2
900111ea:	8963      	ldrh	r3, [r4, #10]
900111ec:	4413      	add	r3, r2
900111ee:	b21b      	sxth	r3, r3
900111f0:	429e      	cmp	r6, r3
900111f2:	da09      	bge.n	90011208 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
900111f4:	6823      	ldr	r3, [r4, #0]
900111f6:	1ab2      	subs	r2, r6, r2
900111f8:	1a69      	subs	r1, r5, r1
900111fa:	4620      	mov	r0, r4
900111fc:	f8d3 8024 	ldr.w	r8, [r3, #36]	; 0x24
90011200:	b212      	sxth	r2, r2
90011202:	463b      	mov	r3, r7
90011204:	b209      	sxth	r1, r1
90011206:	47c0      	blx	r8
90011208:	69a4      	ldr	r4, [r4, #24]
9001120a:	e7db      	b.n	900111c4 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x14>
9001120c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

90011210 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>:
90011210:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90011214:	4c6d      	ldr	r4, [pc, #436]	; (900113cc <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1bc>)
90011216:	b0a1      	sub	sp, #132	; 0x84
90011218:	4606      	mov	r6, r0
9001121a:	6824      	ldr	r4, [r4, #0]
9001121c:	9d2a      	ldr	r5, [sp, #168]	; 0xa8
9001121e:	f894 9049 	ldrb.w	r9, [r4, #73]	; 0x49
90011222:	2400      	movs	r4, #0
90011224:	9303      	str	r3, [sp, #12]
90011226:	802c      	strh	r4, [r5, #0]
90011228:	9d2b      	ldr	r5, [sp, #172]	; 0xac
9001122a:	802c      	strh	r4, [r5, #0]
9001122c:	601c      	str	r4, [r3, #0]
9001122e:	e9cd 1201 	strd	r1, r2, [sp, #4]
90011232:	f7ff ffbd 	bl	900111b0 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
90011236:	f1b9 0f03 	cmp.w	r9, #3
9001123a:	f340 80c1 	ble.w	900113c0 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b0>
9001123e:	4631      	mov	r1, r6
90011240:	a80c      	add	r0, sp, #48	; 0x30
90011242:	f004 f8b3 	bl	900153ac <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
90011246:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
9001124a:	9306      	str	r3, [sp, #24]
9001124c:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
90011250:	9307      	str	r3, [sp, #28]
90011252:	9b03      	ldr	r3, [sp, #12]
90011254:	f8d3 a000 	ldr.w	sl, [r3]
90011258:	f1ba 0f00 	cmp.w	sl, #0
9001125c:	f000 80b3 	beq.w	900113c6 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b6>
90011260:	4651      	mov	r1, sl
90011262:	a810      	add	r0, sp, #64	; 0x40
90011264:	f004 f8a2 	bl	900153ac <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
90011268:	2002      	movs	r0, #2
9001126a:	f9bd 1044 	ldrsh.w	r1, [sp, #68]	; 0x44
9001126e:	9b01      	ldr	r3, [sp, #4]
90011270:	9a06      	ldr	r2, [sp, #24]
90011272:	fb91 f1f0 	sdiv	r1, r1, r0
90011276:	189d      	adds	r5, r3, r2
90011278:	f9bd 3040 	ldrsh.w	r3, [sp, #64]	; 0x40
9001127c:	9a07      	ldr	r2, [sp, #28]
9001127e:	4419      	add	r1, r3
90011280:	9b02      	ldr	r3, [sp, #8]
90011282:	4413      	add	r3, r2
90011284:	f9bd 2046 	ldrsh.w	r2, [sp, #70]	; 0x46
90011288:	1a6d      	subs	r5, r5, r1
9001128a:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
9001128e:	fb92 f2f0 	sdiv	r2, r2, r0
90011292:	440a      	add	r2, r1
90011294:	1a9b      	subs	r3, r3, r2
90011296:	435b      	muls	r3, r3
90011298:	fb05 3505 	mla	r5, r5, r5, r3
9001129c:	4f4c      	ldr	r7, [pc, #304]	; (900113d0 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1c0>)
9001129e:	ac10      	add	r4, sp, #64	; 0x40
900112a0:	f1b9 0f0c 	cmp.w	r9, #12
900112a4:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
900112a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
900112a8:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
900112aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
900112ac:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
900112ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
900112b0:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
900112b4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
900112b8:	f04f 0303 	mov.w	r3, #3
900112bc:	bfd8      	it	le
900112be:	f109 32ff 	addle.w	r2, r9, #4294967295
900112c2:	f04f 0400 	mov.w	r4, #0
900112c6:	f8cd 9000 	str.w	r9, [sp]
900112ca:	bfcc      	ite	gt
900112cc:	4698      	movgt	r8, r3
900112ce:	fb92 f8f3 	sdivle	r8, r2, r3
900112d2:	1c63      	adds	r3, r4, #1
900112d4:	aa10      	add	r2, sp, #64	; 0x40
900112d6:	f004 0401 	and.w	r4, r4, #1
900112da:	f04f 0b00 	mov.w	fp, #0
900112de:	9308      	str	r3, [sp, #32]
900112e0:	9b00      	ldr	r3, [sp, #0]
900112e2:	eb02 1444 	add.w	r4, r2, r4, lsl #5
900112e6:	fb93 f3f8 	sdiv	r3, r3, r8
900112ea:	3404      	adds	r4, #4
900112ec:	b29b      	uxth	r3, r3
900112ee:	9304      	str	r3, [sp, #16]
900112f0:	9a04      	ldr	r2, [sp, #16]
900112f2:	f854 3c04 	ldr.w	r3, [r4, #-4]
900112f6:	fb13 f302 	smulbb	r3, r3, r2
900112fa:	9a01      	ldr	r2, [sp, #4]
900112fc:	b29b      	uxth	r3, r3
900112fe:	1899      	adds	r1, r3, r2
90011300:	9305      	str	r3, [sp, #20]
90011302:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
90011306:	b209      	sxth	r1, r1
90011308:	4299      	cmp	r1, r3
9001130a:	db4d      	blt.n	900113a8 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
9001130c:	8932      	ldrh	r2, [r6, #8]
9001130e:	4413      	add	r3, r2
90011310:	b21b      	sxth	r3, r3
90011312:	4299      	cmp	r1, r3
90011314:	da48      	bge.n	900113a8 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
90011316:	9b04      	ldr	r3, [sp, #16]
90011318:	6827      	ldr	r7, [r4, #0]
9001131a:	fb17 f703 	smulbb	r7, r7, r3
9001131e:	9b02      	ldr	r3, [sp, #8]
90011320:	b2bf      	uxth	r7, r7
90011322:	18fa      	adds	r2, r7, r3
90011324:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
90011328:	b212      	sxth	r2, r2
9001132a:	429a      	cmp	r2, r3
9001132c:	db3c      	blt.n	900113a8 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
9001132e:	8970      	ldrh	r0, [r6, #10]
90011330:	4403      	add	r3, r0
90011332:	b21b      	sxth	r3, r3
90011334:	429a      	cmp	r2, r3
90011336:	da37      	bge.n	900113a8 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
90011338:	2300      	movs	r3, #0
9001133a:	4630      	mov	r0, r6
9001133c:	930b      	str	r3, [sp, #44]	; 0x2c
9001133e:	ab0b      	add	r3, sp, #44	; 0x2c
90011340:	f7ff ff36 	bl	900111b0 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
90011344:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
90011346:	b37a      	cbz	r2, 900113a8 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
90011348:	4552      	cmp	r2, sl
9001134a:	d02d      	beq.n	900113a8 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
9001134c:	4611      	mov	r1, r2
9001134e:	a80e      	add	r0, sp, #56	; 0x38
90011350:	9209      	str	r2, [sp, #36]	; 0x24
90011352:	f004 f82b 	bl	900153ac <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
90011356:	f04f 0e02 	mov.w	lr, #2
9001135a:	f9bd 103c 	ldrsh.w	r1, [sp, #60]	; 0x3c
9001135e:	9a06      	ldr	r2, [sp, #24]
90011360:	f9bd 0038 	ldrsh.w	r0, [sp, #56]	; 0x38
90011364:	9b01      	ldr	r3, [sp, #4]
90011366:	f9bd c03e 	ldrsh.w	ip, [sp, #62]	; 0x3e
9001136a:	4413      	add	r3, r2
9001136c:	9a07      	ldr	r2, [sp, #28]
9001136e:	fb91 f1fe 	sdiv	r1, r1, lr
90011372:	fb9c fcfe 	sdiv	ip, ip, lr
90011376:	4401      	add	r1, r0
90011378:	1a58      	subs	r0, r3, r1
9001137a:	9b02      	ldr	r3, [sp, #8]
9001137c:	f9bd 103a 	ldrsh.w	r1, [sp, #58]	; 0x3a
90011380:	4413      	add	r3, r2
90011382:	9a09      	ldr	r2, [sp, #36]	; 0x24
90011384:	448c      	add	ip, r1
90011386:	eba3 030c 	sub.w	r3, r3, ip
9001138a:	435b      	muls	r3, r3
9001138c:	fb00 3300 	mla	r3, r0, r0, r3
90011390:	42ab      	cmp	r3, r5
90011392:	d208      	bcs.n	900113a6 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x196>
90011394:	990b      	ldr	r1, [sp, #44]	; 0x2c
90011396:	461d      	mov	r5, r3
90011398:	9803      	ldr	r0, [sp, #12]
9001139a:	6001      	str	r1, [r0, #0]
9001139c:	992a      	ldr	r1, [sp, #168]	; 0xa8
9001139e:	9805      	ldr	r0, [sp, #20]
900113a0:	8008      	strh	r0, [r1, #0]
900113a2:	992b      	ldr	r1, [sp, #172]	; 0xac
900113a4:	800f      	strh	r7, [r1, #0]
900113a6:	4692      	mov	sl, r2
900113a8:	f10b 0b01 	add.w	fp, fp, #1
900113ac:	3408      	adds	r4, #8
900113ae:	f1bb 0f04 	cmp.w	fp, #4
900113b2:	d19d      	bne.n	900112f0 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xe0>
900113b4:	9b00      	ldr	r3, [sp, #0]
900113b6:	9c08      	ldr	r4, [sp, #32]
900113b8:	444b      	add	r3, r9
900113ba:	4544      	cmp	r4, r8
900113bc:	9300      	str	r3, [sp, #0]
900113be:	d188      	bne.n	900112d2 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xc2>
900113c0:	b021      	add	sp, #132	; 0x84
900113c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
900113c6:	f04f 35ff 	mov.w	r5, #4294967295
900113ca:	e767      	b.n	9001129c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x8c>
900113cc:	24026264 	.word	0x24026264
900113d0:	90023ecc 	.word	0x90023ecc

900113d4 <_ZN8touchgfx4RectaNERKS0_>:
900113d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
900113d8:	f9b1 7000 	ldrsh.w	r7, [r1]
900113dc:	888c      	ldrh	r4, [r1, #4]
900113de:	f9b0 9000 	ldrsh.w	r9, [r0]
900113e2:	443c      	add	r4, r7
900113e4:	b2a4      	uxth	r4, r4
900113e6:	fa0f f884 	sxth.w	r8, r4
900113ea:	45c1      	cmp	r9, r8
900113ec:	da2f      	bge.n	9001144e <_ZN8touchgfx4RectaNERKS0_+0x7a>
900113ee:	8882      	ldrh	r2, [r0, #4]
900113f0:	444a      	add	r2, r9
900113f2:	b292      	uxth	r2, r2
900113f4:	fa0f fe82 	sxth.w	lr, r2
900113f8:	4577      	cmp	r7, lr
900113fa:	da28      	bge.n	9001144e <_ZN8touchgfx4RectaNERKS0_+0x7a>
900113fc:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
90011400:	88cb      	ldrh	r3, [r1, #6]
90011402:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
90011406:	442b      	add	r3, r5
90011408:	b21b      	sxth	r3, r3
9001140a:	429e      	cmp	r6, r3
9001140c:	da1f      	bge.n	9001144e <_ZN8touchgfx4RectaNERKS0_+0x7a>
9001140e:	88c3      	ldrh	r3, [r0, #6]
90011410:	4433      	add	r3, r6
90011412:	b29b      	uxth	r3, r3
90011414:	fa0f fc83 	sxth.w	ip, r3
90011418:	4565      	cmp	r5, ip
9001141a:	da18      	bge.n	9001144e <_ZN8touchgfx4RectaNERKS0_+0x7a>
9001141c:	454f      	cmp	r7, r9
9001141e:	bfb8      	it	lt
90011420:	464f      	movlt	r7, r9
90011422:	42b5      	cmp	r5, r6
90011424:	bfb8      	it	lt
90011426:	4635      	movlt	r5, r6
90011428:	45f0      	cmp	r8, lr
9001142a:	bfd8      	it	le
9001142c:	4622      	movle	r2, r4
9001142e:	1bd2      	subs	r2, r2, r7
90011430:	8082      	strh	r2, [r0, #4]
90011432:	884a      	ldrh	r2, [r1, #2]
90011434:	88c9      	ldrh	r1, [r1, #6]
90011436:	8007      	strh	r7, [r0, #0]
90011438:	440a      	add	r2, r1
9001143a:	8045      	strh	r5, [r0, #2]
9001143c:	b292      	uxth	r2, r2
9001143e:	b211      	sxth	r1, r2
90011440:	458c      	cmp	ip, r1
90011442:	bfa8      	it	ge
90011444:	4613      	movge	r3, r2
90011446:	1b5b      	subs	r3, r3, r5
90011448:	80c3      	strh	r3, [r0, #6]
9001144a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
9001144e:	2300      	movs	r3, #0
90011450:	8003      	strh	r3, [r0, #0]
90011452:	8043      	strh	r3, [r0, #2]
90011454:	8083      	strh	r3, [r0, #4]
90011456:	80c3      	strh	r3, [r0, #6]
90011458:	e7f7      	b.n	9001144a <_ZN8touchgfx4RectaNERKS0_+0x76>

9001145a <_ZNK8touchgfx4Rect7isEmptyEv>:
9001145a:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
9001145e:	2b00      	cmp	r3, #0
90011460:	dd06      	ble.n	90011470 <_ZNK8touchgfx4Rect7isEmptyEv+0x16>
90011462:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
90011466:	2800      	cmp	r0, #0
90011468:	bfcc      	ite	gt
9001146a:	2000      	movgt	r0, #0
9001146c:	2001      	movle	r0, #1
9001146e:	4770      	bx	lr
90011470:	2001      	movs	r0, #1
90011472:	4770      	bx	lr

90011474 <_ZNK8touchgfx9Container16getContainedAreaEv>:
90011474:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
90011478:	2300      	movs	r3, #0
9001147a:	4604      	mov	r4, r0
9001147c:	6a8d      	ldr	r5, [r1, #40]	; 0x28
9001147e:	8003      	strh	r3, [r0, #0]
90011480:	8043      	strh	r3, [r0, #2]
90011482:	8083      	strh	r3, [r0, #4]
90011484:	80c3      	strh	r3, [r0, #6]
90011486:	2d00      	cmp	r5, #0
90011488:	d040      	beq.n	9001150c <_ZNK8touchgfx9Container16getContainedAreaEv+0x98>
9001148a:	1d28      	adds	r0, r5, #4
9001148c:	f7ff ffe5 	bl	9001145a <_ZNK8touchgfx4Rect7isEmptyEv>
90011490:	b988      	cbnz	r0, 900114b6 <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
90011492:	4620      	mov	r0, r4
90011494:	f7ff ffe1 	bl	9001145a <_ZNK8touchgfx4Rect7isEmptyEv>
90011498:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
9001149c:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
900114a0:	f9b5 e008 	ldrsh.w	lr, [r5, #8]
900114a4:	f9b5 c00a 	ldrsh.w	ip, [r5, #10]
900114a8:	b138      	cbz	r0, 900114ba <_ZNK8touchgfx9Container16getContainedAreaEv+0x46>
900114aa:	8022      	strh	r2, [r4, #0]
900114ac:	8063      	strh	r3, [r4, #2]
900114ae:	f8a4 e004 	strh.w	lr, [r4, #4]
900114b2:	f8a4 c006 	strh.w	ip, [r4, #6]
900114b6:	69ad      	ldr	r5, [r5, #24]
900114b8:	e7e5      	b.n	90011486 <_ZNK8touchgfx9Container16getContainedAreaEv+0x12>
900114ba:	f9b4 0000 	ldrsh.w	r0, [r4]
900114be:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
900114c2:	4290      	cmp	r0, r2
900114c4:	4607      	mov	r7, r0
900114c6:	f8b4 8004 	ldrh.w	r8, [r4, #4]
900114ca:	460e      	mov	r6, r1
900114cc:	bfa8      	it	ge
900114ce:	4617      	movge	r7, r2
900114d0:	4299      	cmp	r1, r3
900114d2:	4472      	add	r2, lr
900114d4:	f8b4 e006 	ldrh.w	lr, [r4, #6]
900114d8:	bfa8      	it	ge
900114da:	461e      	movge	r6, r3
900114dc:	4440      	add	r0, r8
900114de:	4471      	add	r1, lr
900114e0:	4463      	add	r3, ip
900114e2:	b200      	sxth	r0, r0
900114e4:	8027      	strh	r7, [r4, #0]
900114e6:	b212      	sxth	r2, r2
900114e8:	8066      	strh	r6, [r4, #2]
900114ea:	b209      	sxth	r1, r1
900114ec:	b21b      	sxth	r3, r3
900114ee:	4290      	cmp	r0, r2
900114f0:	bfac      	ite	ge
900114f2:	ebc7 0200 	rsbge	r2, r7, r0
900114f6:	ebc7 0202 	rsblt	r2, r7, r2
900114fa:	4299      	cmp	r1, r3
900114fc:	bfac      	ite	ge
900114fe:	ebc6 0301 	rsbge	r3, r6, r1
90011502:	ebc6 0303 	rsblt	r3, r6, r3
90011506:	80a2      	strh	r2, [r4, #4]
90011508:	80e3      	strh	r3, [r4, #6]
9001150a:	e7d4      	b.n	900114b6 <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
9001150c:	4620      	mov	r0, r4
9001150e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

90011512 <_ZNK8touchgfx9Container4drawERKNS_4RectE>:
90011512:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
90011516:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
9001151a:	b383      	cbz	r3, 9001157e <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
9001151c:	6a84      	ldr	r4, [r0, #40]	; 0x28
9001151e:	b374      	cbz	r4, 9001157e <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
90011520:	f9b1 5000 	ldrsh.w	r5, [r1]
90011524:	f9b1 6002 	ldrsh.w	r6, [r1, #2]
90011528:	f9b1 7004 	ldrsh.w	r7, [r1, #4]
9001152c:	f9b1 8006 	ldrsh.w	r8, [r1, #6]
90011530:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
90011534:	b303      	cbz	r3, 90011578 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
90011536:	4668      	mov	r0, sp
90011538:	1d21      	adds	r1, r4, #4
9001153a:	f8ad 5000 	strh.w	r5, [sp]
9001153e:	f8ad 6002 	strh.w	r6, [sp, #2]
90011542:	f8ad 7004 	strh.w	r7, [sp, #4]
90011546:	f8ad 8006 	strh.w	r8, [sp, #6]
9001154a:	f7ff ff43 	bl	900113d4 <_ZN8touchgfx4RectaNERKS0_>
9001154e:	4668      	mov	r0, sp
90011550:	f7ff ff83 	bl	9001145a <_ZNK8touchgfx4Rect7isEmptyEv>
90011554:	b980      	cbnz	r0, 90011578 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
90011556:	f8bd 3000 	ldrh.w	r3, [sp]
9001155a:	4669      	mov	r1, sp
9001155c:	88a2      	ldrh	r2, [r4, #4]
9001155e:	4620      	mov	r0, r4
90011560:	1a9b      	subs	r3, r3, r2
90011562:	88e2      	ldrh	r2, [r4, #6]
90011564:	f8ad 3000 	strh.w	r3, [sp]
90011568:	f8bd 3002 	ldrh.w	r3, [sp, #2]
9001156c:	1a9b      	subs	r3, r3, r2
9001156e:	f8ad 3002 	strh.w	r3, [sp, #2]
90011572:	6823      	ldr	r3, [r4, #0]
90011574:	689b      	ldr	r3, [r3, #8]
90011576:	4798      	blx	r3
90011578:	69a4      	ldr	r4, [r4, #24]
9001157a:	2c00      	cmp	r4, #0
9001157c:	d1d8      	bne.n	90011530 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x1e>
9001157e:	b002      	add	sp, #8
90011580:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

90011584 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>:
90011584:	b573      	push	{r0, r1, r4, r5, r6, lr}
90011586:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
9001158a:	460d      	mov	r5, r1
9001158c:	4616      	mov	r6, r2
9001158e:	b323      	cbz	r3, 900115da <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
90011590:	6a84      	ldr	r4, [r0, #40]	; 0x28
90011592:	b314      	cbz	r4, 900115da <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
90011594:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
90011598:	b1eb      	cbz	r3, 900115d6 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
9001159a:	6828      	ldr	r0, [r5, #0]
9001159c:	466b      	mov	r3, sp
9001159e:	6869      	ldr	r1, [r5, #4]
900115a0:	c303      	stmia	r3!, {r0, r1}
900115a2:	4668      	mov	r0, sp
900115a4:	1d21      	adds	r1, r4, #4
900115a6:	f7ff ff15 	bl	900113d4 <_ZN8touchgfx4RectaNERKS0_>
900115aa:	4668      	mov	r0, sp
900115ac:	f7ff ff55 	bl	9001145a <_ZNK8touchgfx4Rect7isEmptyEv>
900115b0:	b988      	cbnz	r0, 900115d6 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
900115b2:	f8bd 3000 	ldrh.w	r3, [sp]
900115b6:	4669      	mov	r1, sp
900115b8:	88a2      	ldrh	r2, [r4, #4]
900115ba:	4620      	mov	r0, r4
900115bc:	1a9b      	subs	r3, r3, r2
900115be:	88e2      	ldrh	r2, [r4, #6]
900115c0:	f8ad 3000 	strh.w	r3, [sp]
900115c4:	f8bd 3002 	ldrh.w	r3, [sp, #2]
900115c8:	1a9b      	subs	r3, r3, r2
900115ca:	4632      	mov	r2, r6
900115cc:	f8ad 3002 	strh.w	r3, [sp, #2]
900115d0:	6823      	ldr	r3, [r4, #0]
900115d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
900115d4:	4798      	blx	r3
900115d6:	69a4      	ldr	r4, [r4, #24]
900115d8:	e7db      	b.n	90011592 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xe>
900115da:	b002      	add	sp, #8
900115dc:	bd70      	pop	{r4, r5, r6, pc}

900115de <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEt>:
900115de:	6803      	ldr	r3, [r0, #0]
900115e0:	b513      	push	{r0, r1, r4, lr}
900115e2:	f8d3 40a8 	ldr.w	r4, [r3, #168]	; 0xa8
900115e6:	2300      	movs	r3, #0
900115e8:	e9cd 3300 	strd	r3, r3, [sp]
900115ec:	466b      	mov	r3, sp
900115ee:	47a0      	blx	r4
900115f0:	b002      	add	sp, #8
900115f2:	bd10      	pop	{r4, pc}

900115f4 <_ZN8touchgfx3HAL16flushFrameBufferEv>:
900115f4:	2301      	movs	r3, #1
900115f6:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
900115fa:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
900115fe:	4770      	bx	lr

90011600 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>:
90011600:	2301      	movs	r3, #1
90011602:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
90011606:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
9001160a:	4770      	bx	lr

9001160c <_ZN8touchgfx3HAL17allowDMATransfersEv>:
9001160c:	6843      	ldr	r3, [r0, #4]
9001160e:	2201      	movs	r2, #1
90011610:	725a      	strb	r2, [r3, #9]
90011612:	6840      	ldr	r0, [r0, #4]
90011614:	6803      	ldr	r3, [r0, #0]
90011616:	691b      	ldr	r3, [r3, #16]
90011618:	4718      	bx	r3

9001161a <_ZN8touchgfx3HAL8flushDMAEv>:
9001161a:	6840      	ldr	r0, [r0, #4]
9001161c:	6803      	ldr	r3, [r0, #0]
9001161e:	689b      	ldr	r3, [r3, #8]
90011620:	4718      	bx	r3

90011622 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbtNS_6Bitmap12BitmapFormatES4_b>:
90011622:	b530      	push	{r4, r5, lr}
90011624:	b08b      	sub	sp, #44	; 0x2c
90011626:	6804      	ldr	r4, [r0, #0]
90011628:	f89d 5058 	ldrb.w	r5, [sp, #88]	; 0x58
9001162c:	9509      	str	r5, [sp, #36]	; 0x24
9001162e:	f89d 5054 	ldrb.w	r5, [sp, #84]	; 0x54
90011632:	9508      	str	r5, [sp, #32]
90011634:	f89d 5050 	ldrb.w	r5, [sp, #80]	; 0x50
90011638:	9507      	str	r5, [sp, #28]
9001163a:	f8bd 504c 	ldrh.w	r5, [sp, #76]	; 0x4c
9001163e:	9506      	str	r5, [sp, #24]
90011640:	f89d 5048 	ldrb.w	r5, [sp, #72]	; 0x48
90011644:	9505      	str	r5, [sp, #20]
90011646:	f89d 5044 	ldrb.w	r5, [sp, #68]	; 0x44
9001164a:	9504      	str	r5, [sp, #16]
9001164c:	f8bd 5040 	ldrh.w	r5, [sp, #64]	; 0x40
90011650:	9503      	str	r5, [sp, #12]
90011652:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
90011656:	9502      	str	r5, [sp, #8]
90011658:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
9001165c:	e9cd 3500 	strd	r3, r5, [sp]
90011660:	4613      	mov	r3, r2
90011662:	6be4      	ldr	r4, [r4, #60]	; 0x3c
90011664:	2200      	movs	r2, #0
90011666:	47a0      	blx	r4
90011668:	b00b      	add	sp, #44	; 0x2c
9001166a:	bd30      	pop	{r4, r5, pc}

9001166c <_ZN8touchgfx3HAL10beginFrameEv>:
9001166c:	4b04      	ldr	r3, [pc, #16]	; (90011680 <_ZN8touchgfx3HAL10beginFrameEv+0x14>)
9001166e:	781b      	ldrb	r3, [r3, #0]
90011670:	b123      	cbz	r3, 9001167c <_ZN8touchgfx3HAL10beginFrameEv+0x10>
90011672:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
90011676:	f080 0001 	eor.w	r0, r0, #1
9001167a:	4770      	bx	lr
9001167c:	2001      	movs	r0, #1
9001167e:	4770      	bx	lr
90011680:	24026262 	.word	0x24026262

90011684 <_ZN8touchgfx3HAL8endFrameEv>:
90011684:	b510      	push	{r4, lr}
90011686:	4604      	mov	r4, r0
90011688:	6840      	ldr	r0, [r0, #4]
9001168a:	6803      	ldr	r3, [r0, #0]
9001168c:	689b      	ldr	r3, [r3, #8]
9001168e:	4798      	blx	r3
90011690:	f894 3069 	ldrb.w	r3, [r4, #105]	; 0x69
90011694:	b113      	cbz	r3, 9001169c <_ZN8touchgfx3HAL8endFrameEv+0x18>
90011696:	2301      	movs	r3, #1
90011698:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
9001169c:	bd10      	pop	{r4, pc}

9001169e <_ZN8touchgfx3HAL10initializeEv>:
9001169e:	b510      	push	{r4, lr}
900116a0:	4604      	mov	r4, r0
900116a2:	f7f0 f947 	bl	90001934 <_ZN8touchgfx10OSWrappers10initializeEv>
900116a6:	f7ee ff2b 	bl	90000500 <_ZN8touchgfx4GPIO4initEv>
900116aa:	6860      	ldr	r0, [r4, #4]
900116ac:	6803      	ldr	r3, [r0, #0]
900116ae:	68db      	ldr	r3, [r3, #12]
900116b0:	4798      	blx	r3
900116b2:	68e0      	ldr	r0, [r4, #12]
900116b4:	6803      	ldr	r3, [r0, #0]
900116b6:	689b      	ldr	r3, [r3, #8]
900116b8:	4798      	blx	r3
900116ba:	6823      	ldr	r3, [r4, #0]
900116bc:	4620      	mov	r0, r4
900116be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
900116c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
900116c4:	4718      	bx	r3
	...

900116c8 <_ZN8touchgfx3HAL4tickEv>:
900116c8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
900116ca:	6803      	ldr	r3, [r0, #0]
900116cc:	4604      	mov	r4, r0
900116ce:	4d5b      	ldr	r5, [pc, #364]	; (9001183c <_ZN8touchgfx3HAL4tickEv+0x174>)
900116d0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
900116d4:	4798      	blx	r3
900116d6:	2800      	cmp	r0, #0
900116d8:	f000 8095 	beq.w	90011806 <_ZN8touchgfx3HAL4tickEv+0x13e>
900116dc:	2001      	movs	r0, #1
900116de:	2600      	movs	r6, #0
900116e0:	f7ee ff38 	bl	90000554 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
900116e4:	f894 3066 	ldrb.w	r3, [r4, #102]	; 0x66
900116e8:	f884 604b 	strb.w	r6, [r4, #75]	; 0x4b
900116ec:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
900116f0:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
900116f4:	f884 6066 	strb.w	r6, [r4, #102]	; 0x66
900116f8:	b133      	cbz	r3, 90011708 <_ZN8touchgfx3HAL4tickEv+0x40>
900116fa:	6823      	ldr	r3, [r4, #0]
900116fc:	4620      	mov	r0, r4
900116fe:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
90011702:	4798      	blx	r3
90011704:	f884 6075 	strb.w	r6, [r4, #117]	; 0x75
90011708:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
9001170c:	2601      	movs	r6, #1
9001170e:	6862      	ldr	r2, [r4, #4]
90011710:	f083 0301 	eor.w	r3, r3, #1
90011714:	702e      	strb	r6, [r5, #0]
90011716:	7253      	strb	r3, [r2, #9]
90011718:	f002 fd68 	bl	900141ec <_ZN8touchgfx11Application11getInstanceEv>
9001171c:	6803      	ldr	r3, [r0, #0]
9001171e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
90011720:	4798      	blx	r3
90011722:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
90011726:	b90b      	cbnz	r3, 9001172c <_ZN8touchgfx3HAL4tickEv+0x64>
90011728:	f884 6067 	strb.w	r6, [r4, #103]	; 0x67
9001172c:	f002 fd5e 	bl	900141ec <_ZN8touchgfx11Application11getInstanceEv>
90011730:	6803      	ldr	r3, [r0, #0]
90011732:	695b      	ldr	r3, [r3, #20]
90011734:	4798      	blx	r3
90011736:	6da0      	ldr	r0, [r4, #88]	; 0x58
90011738:	6803      	ldr	r3, [r0, #0]
9001173a:	691b      	ldr	r3, [r3, #16]
9001173c:	4798      	blx	r3
9001173e:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
90011742:	f894 2068 	ldrb.w	r2, [r4, #104]	; 0x68
90011746:	3b01      	subs	r3, #1
90011748:	b2db      	uxtb	r3, r3
9001174a:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
9001174e:	b10a      	cbz	r2, 90011754 <_ZN8touchgfx3HAL4tickEv+0x8c>
90011750:	2b00      	cmp	r3, #0
90011752:	d1eb      	bne.n	9001172c <_ZN8touchgfx3HAL4tickEv+0x64>
90011754:	4a3a      	ldr	r2, [pc, #232]	; (90011840 <_ZN8touchgfx3HAL4tickEv+0x178>)
90011756:	f994 1064 	ldrsb.w	r1, [r4, #100]	; 0x64
9001175a:	7813      	ldrb	r3, [r2, #0]
9001175c:	3301      	adds	r3, #1
9001175e:	b25b      	sxtb	r3, r3
90011760:	4299      	cmp	r1, r3
90011762:	7013      	strb	r3, [r2, #0]
90011764:	dc10      	bgt.n	90011788 <_ZN8touchgfx3HAL4tickEv+0xc0>
90011766:	2300      	movs	r3, #0
90011768:	68e0      	ldr	r0, [r4, #12]
9001176a:	a902      	add	r1, sp, #8
9001176c:	7013      	strb	r3, [r2, #0]
9001176e:	aa03      	add	r2, sp, #12
90011770:	6803      	ldr	r3, [r0, #0]
90011772:	68db      	ldr	r3, [r3, #12]
90011774:	4798      	blx	r3
90011776:	6823      	ldr	r3, [r4, #0]
90011778:	2800      	cmp	r0, #0
9001177a:	d050      	beq.n	9001181e <_ZN8touchgfx3HAL4tickEv+0x156>
9001177c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
90011780:	4620      	mov	r0, r4
90011782:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
90011786:	4798      	blx	r3
90011788:	2300      	movs	r3, #0
9001178a:	6960      	ldr	r0, [r4, #20]
9001178c:	f88d 3007 	strb.w	r3, [sp, #7]
90011790:	b158      	cbz	r0, 900117aa <_ZN8touchgfx3HAL4tickEv+0xe2>
90011792:	6803      	ldr	r3, [r0, #0]
90011794:	f10d 0107 	add.w	r1, sp, #7
90011798:	68db      	ldr	r3, [r3, #12]
9001179a:	4798      	blx	r3
9001179c:	b128      	cbz	r0, 900117aa <_ZN8touchgfx3HAL4tickEv+0xe2>
9001179e:	6da0      	ldr	r0, [r4, #88]	; 0x58
900117a0:	f89d 1007 	ldrb.w	r1, [sp, #7]
900117a4:	6803      	ldr	r3, [r0, #0]
900117a6:	68db      	ldr	r3, [r3, #12]
900117a8:	4798      	blx	r3
900117aa:	f104 001c 	add.w	r0, r4, #28
900117ae:	f011 fa63 	bl	90022c78 <_ZN8touchgfx8Gestures4tickEv>
900117b2:	f894 306c 	ldrb.w	r3, [r4, #108]	; 0x6c
900117b6:	b30b      	cbz	r3, 900117fc <_ZN8touchgfx3HAL4tickEv+0x134>
900117b8:	6920      	ldr	r0, [r4, #16]
900117ba:	6803      	ldr	r3, [r0, #0]
900117bc:	691b      	ldr	r3, [r3, #16]
900117be:	4798      	blx	r3
900117c0:	6f23      	ldr	r3, [r4, #112]	; 0x70
900117c2:	4606      	mov	r6, r0
900117c4:	b903      	cbnz	r3, 900117c8 <_ZN8touchgfx3HAL4tickEv+0x100>
900117c6:	6720      	str	r0, [r4, #112]	; 0x70
900117c8:	6f23      	ldr	r3, [r4, #112]	; 0x70
900117ca:	4a1e      	ldr	r2, [pc, #120]	; (90011844 <_ZN8touchgfx3HAL4tickEv+0x17c>)
900117cc:	1af3      	subs	r3, r6, r3
900117ce:	4293      	cmp	r3, r2
900117d0:	d914      	bls.n	900117fc <_ZN8touchgfx3HAL4tickEv+0x134>
900117d2:	6920      	ldr	r0, [r4, #16]
900117d4:	6803      	ldr	r3, [r0, #0]
900117d6:	699b      	ldr	r3, [r3, #24]
900117d8:	4798      	blx	r3
900117da:	6f23      	ldr	r3, [r4, #112]	; 0x70
900117dc:	2264      	movs	r2, #100	; 0x64
900117de:	1af3      	subs	r3, r6, r3
900117e0:	fbb3 f3f2 	udiv	r3, r3, r2
900117e4:	fbb0 f0f3 	udiv	r0, r0, r3
900117e8:	2800      	cmp	r0, #0
900117ea:	dc1d      	bgt.n	90011828 <_ZN8touchgfx3HAL4tickEv+0x160>
900117ec:	f884 2065 	strb.w	r2, [r4, #101]	; 0x65
900117f0:	6920      	ldr	r0, [r4, #16]
900117f2:	2100      	movs	r1, #0
900117f4:	6803      	ldr	r3, [r0, #0]
900117f6:	69db      	ldr	r3, [r3, #28]
900117f8:	4798      	blx	r3
900117fa:	6726      	str	r6, [r4, #112]	; 0x70
900117fc:	f002 fcf6 	bl	900141ec <_ZN8touchgfx11Application11getInstanceEv>
90011800:	6803      	ldr	r3, [r0, #0]
90011802:	6b9b      	ldr	r3, [r3, #56]	; 0x38
90011804:	4798      	blx	r3
90011806:	6823      	ldr	r3, [r4, #0]
90011808:	4620      	mov	r0, r4
9001180a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
9001180e:	4798      	blx	r3
90011810:	2001      	movs	r0, #1
90011812:	f7ee fed3 	bl	900005bc <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
90011816:	2300      	movs	r3, #0
90011818:	702b      	strb	r3, [r5, #0]
9001181a:	b004      	add	sp, #16
9001181c:	bd70      	pop	{r4, r5, r6, pc}
9001181e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
90011822:	4620      	mov	r0, r4
90011824:	4798      	blx	r3
90011826:	e7af      	b.n	90011788 <_ZN8touchgfx3HAL4tickEv+0xc0>
90011828:	2863      	cmp	r0, #99	; 0x63
9001182a:	bfcb      	itete	gt
9001182c:	2300      	movgt	r3, #0
9001182e:	f1c0 0064 	rsble	r0, r0, #100	; 0x64
90011832:	f884 3065 	strbgt.w	r3, [r4, #101]	; 0x65
90011836:	f884 0065 	strble.w	r0, [r4, #101]	; 0x65
9001183a:	e7d9      	b.n	900117f0 <_ZN8touchgfx3HAL4tickEv+0x128>
9001183c:	24026268 	.word	0x24026268
90011840:	24026269 	.word	0x24026269
90011844:	05f5e100 	.word	0x05f5e100

90011848 <_ZN8touchgfx3HAL17unlockFrameBufferEv>:
90011848:	f7f0 b8a6 	b.w	90001998 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

9001184c <_ZN8touchgfx3HAL21registerEventListenerERNS_15UIEventListenerE>:
9001184c:	6581      	str	r1, [r0, #88]	; 0x58
9001184e:	301c      	adds	r0, #28
90011850:	f011 ba10 	b.w	90022c74 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>

90011854 <_ZN8touchgfx3HAL5touchEll>:
90011854:	b530      	push	{r4, r5, lr}
90011856:	b087      	sub	sp, #28
90011858:	4604      	mov	r4, r0
9001185a:	a804      	add	r0, sp, #16
9001185c:	e9cd 1204 	strd	r1, r2, [sp, #16]
90011860:	f002 fac2 	bl	90013de8 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>
90011864:	9b04      	ldr	r3, [sp, #16]
90011866:	a906      	add	r1, sp, #24
90011868:	a803      	add	r0, sp, #12
9001186a:	f8ad 300c 	strh.w	r3, [sp, #12]
9001186e:	9b05      	ldr	r3, [sp, #20]
90011870:	f821 3d0a 	strh.w	r3, [r1, #-10]!
90011874:	f002 fb0a 	bl	90013e8c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>
90011878:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
9001187c:	f104 001c 	add.w	r0, r4, #28
90011880:	f8bd 200c 	ldrh.w	r2, [sp, #12]
90011884:	f8bd 300e 	ldrh.w	r3, [sp, #14]
90011888:	b189      	cbz	r1, 900118ae <_ZN8touchgfx3HAL5touchEll+0x5a>
9001188a:	f8b4 5060 	ldrh.w	r5, [r4, #96]	; 0x60
9001188e:	9300      	str	r3, [sp, #0]
90011890:	4613      	mov	r3, r2
90011892:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
90011896:	462a      	mov	r2, r5
90011898:	f011 f9fc 	bl	90022c94 <_ZN8touchgfx8Gestures17registerDragEventEtttt>
9001189c:	b128      	cbz	r0, 900118aa <_ZN8touchgfx3HAL5touchEll+0x56>
9001189e:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
900118a2:	65e3      	str	r3, [r4, #92]	; 0x5c
900118a4:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
900118a8:	6623      	str	r3, [r4, #96]	; 0x60
900118aa:	b007      	add	sp, #28
900118ac:	bd30      	pop	{r4, r5, pc}
900118ae:	f011 fa31 	bl	90022d14 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
900118b2:	2301      	movs	r3, #1
900118b4:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
900118b8:	e7f1      	b.n	9001189e <_ZN8touchgfx3HAL5touchEll+0x4a>

900118ba <_ZN8touchgfx3HAL9blockCopyEPvPKvm>:
900118ba:	b510      	push	{r4, lr}
900118bc:	2b00      	cmp	r3, #0
900118be:	d046      	beq.n	9001194e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
900118c0:	ea81 0002 	eor.w	r0, r1, r2
900118c4:	07c4      	lsls	r4, r0, #31
900118c6:	d508      	bpl.n	900118da <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x20>
900118c8:	440b      	add	r3, r1
900118ca:	3a01      	subs	r2, #1
900118cc:	428b      	cmp	r3, r1
900118ce:	d93e      	bls.n	9001194e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
900118d0:	f812 0f01 	ldrb.w	r0, [r2, #1]!
900118d4:	f801 0b01 	strb.w	r0, [r1], #1
900118d8:	e7f8      	b.n	900118cc <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x12>
900118da:	07d0      	lsls	r0, r2, #31
900118dc:	bf42      	ittt	mi
900118de:	f812 0b01 	ldrbmi.w	r0, [r2], #1
900118e2:	f103 33ff 	addmi.w	r3, r3, #4294967295
900118e6:	f801 0b01 	strbmi.w	r0, [r1], #1
900118ea:	2b01      	cmp	r3, #1
900118ec:	d911      	bls.n	90011912 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
900118ee:	ea81 0402 	eor.w	r4, r1, r2
900118f2:	4610      	mov	r0, r2
900118f4:	07a4      	lsls	r4, r4, #30
900118f6:	d022      	beq.n	9001193e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x84>
900118f8:	f023 0401 	bic.w	r4, r3, #1
900118fc:	440c      	add	r4, r1
900118fe:	428c      	cmp	r4, r1
90011900:	4602      	mov	r2, r0
90011902:	d904      	bls.n	9001190e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x54>
90011904:	8812      	ldrh	r2, [r2, #0]
90011906:	3002      	adds	r0, #2
90011908:	f821 2b02 	strh.w	r2, [r1], #2
9001190c:	e7f7      	b.n	900118fe <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x44>
9001190e:	f003 0301 	and.w	r3, r3, #1
90011912:	f023 0003 	bic.w	r0, r3, #3
90011916:	4408      	add	r0, r1
90011918:	4288      	cmp	r0, r1
9001191a:	4614      	mov	r4, r2
9001191c:	d904      	bls.n	90011928 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x6e>
9001191e:	6824      	ldr	r4, [r4, #0]
90011920:	3204      	adds	r2, #4
90011922:	f841 4b04 	str.w	r4, [r1], #4
90011926:	e7f7      	b.n	90011918 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x5e>
90011928:	f003 0303 	and.w	r3, r3, #3
9001192c:	3a01      	subs	r2, #1
9001192e:	440b      	add	r3, r1
90011930:	428b      	cmp	r3, r1
90011932:	d90c      	bls.n	9001194e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
90011934:	f812 0f01 	ldrb.w	r0, [r2, #1]!
90011938:	f801 0b01 	strb.w	r0, [r1], #1
9001193c:	e7f8      	b.n	90011930 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x76>
9001193e:	0790      	lsls	r0, r2, #30
90011940:	d0e7      	beq.n	90011912 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
90011942:	f832 0b02 	ldrh.w	r0, [r2], #2
90011946:	3b02      	subs	r3, #2
90011948:	f821 0b02 	strh.w	r0, [r1], #2
9001194c:	e7e1      	b.n	90011912 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
9001194e:	2001      	movs	r0, #1
90011950:	bd10      	pop	{r4, pc}

90011952 <_ZN8touchgfx3HAL7noTouchEv>:
90011952:	b510      	push	{r4, lr}
90011954:	f890 306b 	ldrb.w	r3, [r0, #107]	; 0x6b
90011958:	4604      	mov	r4, r0
9001195a:	b153      	cbz	r3, 90011972 <_ZN8touchgfx3HAL7noTouchEv+0x20>
9001195c:	f8b0 3060 	ldrh.w	r3, [r0, #96]	; 0x60
90011960:	2101      	movs	r1, #1
90011962:	f8b0 205c 	ldrh.w	r2, [r0, #92]	; 0x5c
90011966:	301c      	adds	r0, #28
90011968:	f011 f9d4 	bl	90022d14 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
9001196c:	2300      	movs	r3, #0
9001196e:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
90011972:	bd10      	pop	{r4, pc}

90011974 <_ZN8touchgfx8Drawable5setXYEss>:
90011974:	b570      	push	{r4, r5, r6, lr}
90011976:	6803      	ldr	r3, [r0, #0]
90011978:	4604      	mov	r4, r0
9001197a:	4615      	mov	r5, r2
9001197c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
9001197e:	4798      	blx	r3
90011980:	6823      	ldr	r3, [r4, #0]
90011982:	4629      	mov	r1, r5
90011984:	4620      	mov	r0, r4
90011986:	6b5b      	ldr	r3, [r3, #52]	; 0x34
90011988:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
9001198c:	4718      	bx	r3
	...

90011990 <_ZN8touchgfx3HAL3lcdEv>:
90011990:	4b04      	ldr	r3, [pc, #16]	; (900119a4 <_ZN8touchgfx3HAL3lcdEv+0x14>)
90011992:	681b      	ldr	r3, [r3, #0]
90011994:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
90011998:	b10a      	cbz	r2, 9001199e <_ZN8touchgfx3HAL3lcdEv+0xe>
9001199a:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
9001199c:	b900      	cbnz	r0, 900119a0 <_ZN8touchgfx3HAL3lcdEv+0x10>
9001199e:	6898      	ldr	r0, [r3, #8]
900119a0:	4770      	bx	lr
900119a2:	bf00      	nop
900119a4:	24026264 	.word	0x24026264

900119a8 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt>:
900119a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
900119ac:	b085      	sub	sp, #20
900119ae:	4604      	mov	r4, r0
900119b0:	2000      	movs	r0, #0
900119b2:	4699      	mov	r9, r3
900119b4:	ad04      	add	r5, sp, #16
900119b6:	460f      	mov	r7, r1
900119b8:	4690      	mov	r8, r2
900119ba:	f845 0d04 	str.w	r0, [r5, #-4]!
900119be:	69a0      	ldr	r0, [r4, #24]
900119c0:	6806      	ldr	r6, [r0, #0]
900119c2:	9501      	str	r5, [sp, #4]
900119c4:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
900119c8:	9500      	str	r5, [sp, #0]
900119ca:	6835      	ldr	r5, [r6, #0]
900119cc:	47a8      	blx	r5
900119ce:	4d10      	ldr	r5, [pc, #64]	; (90011a10 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x68>)
900119d0:	4606      	mov	r6, r0
900119d2:	f8a5 9000 	strh.w	r9, [r5]
900119d6:	f7ff ffdb 	bl	90011990 <_ZN8touchgfx3HAL3lcdEv>
900119da:	6803      	ldr	r3, [r0, #0]
900119dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
900119de:	4798      	blx	r3
900119e0:	b128      	cbz	r0, 900119ee <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x46>
900119e2:	2801      	cmp	r0, #1
900119e4:	d00b      	beq.n	900119fe <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x56>
900119e6:	4630      	mov	r0, r6
900119e8:	b005      	add	sp, #20
900119ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
900119ee:	882b      	ldrh	r3, [r5, #0]
900119f0:	fb08 7203 	mla	r2, r8, r3, r7
900119f4:	9b03      	ldr	r3, [sp, #12]
900119f6:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
900119fa:	63e3      	str	r3, [r4, #60]	; 0x3c
900119fc:	e7f3      	b.n	900119e6 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
900119fe:	882a      	ldrh	r2, [r5, #0]
90011a00:	9b03      	ldr	r3, [sp, #12]
90011a02:	fb08 7202 	mla	r2, r8, r2, r7
90011a06:	eb02 0242 	add.w	r2, r2, r2, lsl #1
90011a0a:	1a9a      	subs	r2, r3, r2
90011a0c:	63e2      	str	r2, [r4, #60]	; 0x3c
90011a0e:	e7ea      	b.n	900119e6 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
90011a10:	2402625e 	.word	0x2402625e

90011a14 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb>:
90011a14:	b5f0      	push	{r4, r5, r6, r7, lr}
90011a16:	b08b      	sub	sp, #44	; 0x2c
90011a18:	4617      	mov	r7, r2
90011a1a:	4604      	mov	r4, r0
90011a1c:	460e      	mov	r6, r1
90011a1e:	461d      	mov	r5, r3
90011a20:	f7ff ffb6 	bl	90011990 <_ZN8touchgfx3HAL3lcdEv>
90011a24:	6803      	ldr	r3, [r0, #0]
90011a26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90011a28:	4798      	blx	r3
90011a2a:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
90011a2e:	9007      	str	r0, [sp, #28]
90011a30:	4631      	mov	r1, r6
90011a32:	6822      	ldr	r2, [r4, #0]
90011a34:	e9cd 0308 	strd	r0, r3, [sp, #32]
90011a38:	4b0c      	ldr	r3, [pc, #48]	; (90011a6c <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb+0x58>)
90011a3a:	4620      	mov	r0, r4
90011a3c:	881b      	ldrh	r3, [r3, #0]
90011a3e:	9306      	str	r3, [sp, #24]
90011a40:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
90011a44:	9305      	str	r3, [sp, #20]
90011a46:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
90011a4a:	9304      	str	r3, [sp, #16]
90011a4c:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
90011a50:	9303      	str	r3, [sp, #12]
90011a52:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
90011a56:	9302      	str	r3, [sp, #8]
90011a58:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
90011a5c:	e9cd 5300 	strd	r5, r3, [sp]
90011a60:	463b      	mov	r3, r7
90011a62:	6bd5      	ldr	r5, [r2, #60]	; 0x3c
90011a64:	2200      	movs	r2, #0
90011a66:	47a8      	blx	r5
90011a68:	b00b      	add	sp, #44	; 0x2c
90011a6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
90011a6c:	2402625e 	.word	0x2402625e

90011a70 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb>:
90011a70:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
90011a74:	4698      	mov	r8, r3
90011a76:	6803      	ldr	r3, [r0, #0]
90011a78:	b08b      	sub	sp, #44	; 0x2c
90011a7a:	4617      	mov	r7, r2
90011a7c:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
90011a7e:	460e      	mov	r6, r1
90011a80:	4b13      	ldr	r3, [pc, #76]	; (90011ad0 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb+0x60>)
90011a82:	4604      	mov	r4, r0
90011a84:	f8b3 9000 	ldrh.w	r9, [r3]
90011a88:	f7ff ff82 	bl	90011990 <_ZN8touchgfx3HAL3lcdEv>
90011a8c:	6803      	ldr	r3, [r0, #0]
90011a8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90011a90:	4798      	blx	r3
90011a92:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
90011a96:	2200      	movs	r2, #0
90011a98:	4631      	mov	r1, r6
90011a9a:	e9cd 0308 	strd	r0, r3, [sp, #32]
90011a9e:	2302      	movs	r3, #2
90011aa0:	4620      	mov	r0, r4
90011aa2:	e9cd 9306 	strd	r9, r3, [sp, #24]
90011aa6:	2301      	movs	r3, #1
90011aa8:	9305      	str	r3, [sp, #20]
90011aaa:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
90011aae:	9304      	str	r3, [sp, #16]
90011ab0:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
90011ab4:	9303      	str	r3, [sp, #12]
90011ab6:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
90011aba:	9302      	str	r3, [sp, #8]
90011abc:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
90011ac0:	e9cd 8300 	strd	r8, r3, [sp]
90011ac4:	463b      	mov	r3, r7
90011ac6:	47a8      	blx	r5
90011ac8:	b00b      	add	sp, #44	; 0x2c
90011aca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
90011ace:	bf00      	nop
90011ad0:	2402625e 	.word	0x2402625e

90011ad4 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb>:
90011ad4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
90011ad8:	4698      	mov	r8, r3
90011ada:	6803      	ldr	r3, [r0, #0]
90011adc:	b087      	sub	sp, #28
90011ade:	460e      	mov	r6, r1
90011ae0:	6d9d      	ldr	r5, [r3, #88]	; 0x58
90011ae2:	4617      	mov	r7, r2
90011ae4:	4b0f      	ldr	r3, [pc, #60]	; (90011b24 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb+0x50>)
90011ae6:	4604      	mov	r4, r0
90011ae8:	f8b3 9000 	ldrh.w	r9, [r3]
90011aec:	f7ff ff50 	bl	90011990 <_ZN8touchgfx3HAL3lcdEv>
90011af0:	6803      	ldr	r3, [r0, #0]
90011af2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90011af4:	4798      	blx	r3
90011af6:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
90011afa:	463a      	mov	r2, r7
90011afc:	4631      	mov	r1, r6
90011afe:	f8cd 900c 	str.w	r9, [sp, #12]
90011b02:	e9cd 0304 	strd	r0, r3, [sp, #16]
90011b06:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
90011b0a:	4620      	mov	r0, r4
90011b0c:	9302      	str	r3, [sp, #8]
90011b0e:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
90011b12:	9301      	str	r3, [sp, #4]
90011b14:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
90011b18:	9300      	str	r3, [sp, #0]
90011b1a:	4643      	mov	r3, r8
90011b1c:	47a8      	blx	r5
90011b1e:	b007      	add	sp, #28
90011b20:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
90011b24:	2402625e 	.word	0x2402625e

90011b28 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE>:
90011b28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90011b2c:	4604      	mov	r4, r0
90011b2e:	b08f      	sub	sp, #60	; 0x3c
90011b30:	4610      	mov	r0, r2
90011b32:	460d      	mov	r5, r1
90011b34:	4691      	mov	r9, r2
90011b36:	461e      	mov	r6, r3
90011b38:	f005 fade 	bl	900170f8 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
90011b3c:	2800      	cmp	r0, #0
90011b3e:	f000 809d 	beq.w	90011c7c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x154>
90011b42:	6823      	ldr	r3, [r4, #0]
90011b44:	4620      	mov	r0, r4
90011b46:	f8df b198 	ldr.w	fp, [pc, #408]	; 90011ce0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>
90011b4a:	f10d 0838 	add.w	r8, sp, #56	; 0x38
90011b4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
90011b50:	4798      	blx	r3
90011b52:	6823      	ldr	r3, [r4, #0]
90011b54:	4620      	mov	r0, r4
90011b56:	f8df a18c 	ldr.w	sl, [pc, #396]	; 90011ce4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>
90011b5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90011b5c:	4798      	blx	r3
90011b5e:	f8bb 3000 	ldrh.w	r3, [fp]
90011b62:	4f5c      	ldr	r7, [pc, #368]	; (90011cd4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
90011b64:	9301      	str	r3, [sp, #4]
90011b66:	f8ba 3000 	ldrh.w	r3, [sl]
90011b6a:	f828 9d1c 	strh.w	r9, [r8, #-28]!
90011b6e:	4640      	mov	r0, r8
90011b70:	9302      	str	r3, [sp, #8]
90011b72:	883b      	ldrh	r3, [r7, #0]
90011b74:	9303      	str	r3, [sp, #12]
90011b76:	4b58      	ldr	r3, [pc, #352]	; (90011cd8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
90011b78:	881a      	ldrh	r2, [r3, #0]
90011b7a:	9305      	str	r3, [sp, #20]
90011b7c:	9204      	str	r2, [sp, #16]
90011b7e:	f005 fb4f 	bl	90017220 <_ZNK8touchgfx6Bitmap8getWidthEv>
90011b82:	8038      	strh	r0, [r7, #0]
90011b84:	4640      	mov	r0, r8
90011b86:	f005 fb7f 	bl	90017288 <_ZNK8touchgfx6Bitmap9getHeightEv>
90011b8a:	9b05      	ldr	r3, [sp, #20]
90011b8c:	b280      	uxth	r0, r0
90011b8e:	8018      	strh	r0, [r3, #0]
90011b90:	4b52      	ldr	r3, [pc, #328]	; (90011cdc <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b4>)
90011b92:	781b      	ldrb	r3, [r3, #0]
90011b94:	2b00      	cmp	r3, #0
90011b96:	d174      	bne.n	90011c82 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x15a>
90011b98:	883b      	ldrh	r3, [r7, #0]
90011b9a:	f8aa 0000 	strh.w	r0, [sl]
90011b9e:	f8ab 3000 	strh.w	r3, [fp]
90011ba2:	4648      	mov	r0, r9
90011ba4:	e9d4 870f 	ldrd	r8, r7, [r4, #60]	; 0x3c
90011ba8:	f005 faa6 	bl	900170f8 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
90011bac:	2200      	movs	r2, #0
90011bae:	e9c4 000f 	strd	r0, r0, [r4, #60]	; 0x3c
90011bb2:	4611      	mov	r1, r2
90011bb4:	4628      	mov	r0, r5
90011bb6:	f9b5 9004 	ldrsh.w	r9, [r5, #4]
90011bba:	f9b5 a006 	ldrsh.w	sl, [r5, #6]
90011bbe:	f7ff fed9 	bl	90011974 <_ZN8touchgfx8Drawable5setXYEss>
90011bc2:	2301      	movs	r3, #1
90011bc4:	f895 b025 	ldrb.w	fp, [r5, #37]	; 0x25
90011bc8:	f885 3025 	strb.w	r3, [r5, #37]	; 0x25
90011bcc:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
90011bd0:	2b00      	cmp	r3, #0
90011bd2:	dd5c      	ble.n	90011c8e <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
90011bd4:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
90011bd8:	2b00      	cmp	r3, #0
90011bda:	dd58      	ble.n	90011c8e <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
90011bdc:	462a      	mov	r2, r5
90011bde:	ab0a      	add	r3, sp, #40	; 0x28
90011be0:	f852 0f04 	ldr.w	r0, [r2, #4]!
90011be4:	6851      	ldr	r1, [r2, #4]
90011be6:	c303      	stmia	r3!, {r0, r1}
90011be8:	4631      	mov	r1, r6
90011bea:	a80a      	add	r0, sp, #40	; 0x28
90011bec:	f7ff fbf2 	bl	900113d4 <_ZN8touchgfx4RectaNERKS0_>
90011bf0:	4b38      	ldr	r3, [pc, #224]	; (90011cd4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
90011bf2:	2100      	movs	r1, #0
90011bf4:	f9b3 2000 	ldrsh.w	r2, [r3]
90011bf8:	4b37      	ldr	r3, [pc, #220]	; (90011cd8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
90011bfa:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
90011bfe:	aa0a      	add	r2, sp, #40	; 0x28
90011c00:	f9b3 3000 	ldrsh.w	r3, [r3]
90011c04:	910c      	str	r1, [sp, #48]	; 0x30
90011c06:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
90011c0a:	ab08      	add	r3, sp, #32
90011c0c:	e892 0003 	ldmia.w	r2, {r0, r1}
90011c10:	e883 0003 	stmia.w	r3, {r0, r1}
90011c14:	4618      	mov	r0, r3
90011c16:	a90c      	add	r1, sp, #48	; 0x30
90011c18:	f7ff fbdc 	bl	900113d4 <_ZN8touchgfx4RectaNERKS0_>
90011c1c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
90011c1e:	2b00      	cmp	r3, #0
90011c20:	d13c      	bne.n	90011c9c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x174>
90011c22:	2000      	movs	r0, #0
90011c24:	f884 0076 	strb.w	r0, [r4, #118]	; 0x76
90011c28:	2600      	movs	r6, #0
90011c2a:	696b      	ldr	r3, [r5, #20]
90011c2c:	a908      	add	r1, sp, #32
90011c2e:	682a      	ldr	r2, [r5, #0]
90011c30:	4628      	mov	r0, r5
90011c32:	9305      	str	r3, [sp, #20]
90011c34:	616e      	str	r6, [r5, #20]
90011c36:	6892      	ldr	r2, [r2, #8]
90011c38:	4790      	blx	r2
90011c3a:	9b05      	ldr	r3, [sp, #20]
90011c3c:	4652      	mov	r2, sl
90011c3e:	4649      	mov	r1, r9
90011c40:	616b      	str	r3, [r5, #20]
90011c42:	4628      	mov	r0, r5
90011c44:	f884 6076 	strb.w	r6, [r4, #118]	; 0x76
90011c48:	f885 b025 	strb.w	fp, [r5, #37]	; 0x25
90011c4c:	f7ff fe92 	bl	90011974 <_ZN8touchgfx8Drawable5setXYEss>
90011c50:	9a01      	ldr	r2, [sp, #4]
90011c52:	4b23      	ldr	r3, [pc, #140]	; (90011ce0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>)
90011c54:	4620      	mov	r0, r4
90011c56:	801a      	strh	r2, [r3, #0]
90011c58:	9a02      	ldr	r2, [sp, #8]
90011c5a:	4b22      	ldr	r3, [pc, #136]	; (90011ce4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>)
90011c5c:	801a      	strh	r2, [r3, #0]
90011c5e:	9a03      	ldr	r2, [sp, #12]
90011c60:	4b1c      	ldr	r3, [pc, #112]	; (90011cd4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
90011c62:	801a      	strh	r2, [r3, #0]
90011c64:	4b1c      	ldr	r3, [pc, #112]	; (90011cd8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
90011c66:	9a04      	ldr	r2, [sp, #16]
90011c68:	801a      	strh	r2, [r3, #0]
90011c6a:	6823      	ldr	r3, [r4, #0]
90011c6c:	e9c4 870f 	strd	r8, r7, [r4, #60]	; 0x3c
90011c70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
90011c72:	4798      	blx	r3
90011c74:	6823      	ldr	r3, [r4, #0]
90011c76:	4620      	mov	r0, r4
90011c78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90011c7a:	4798      	blx	r3
90011c7c:	b00f      	add	sp, #60	; 0x3c
90011c7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90011c82:	883b      	ldrh	r3, [r7, #0]
90011c84:	f8ab 0000 	strh.w	r0, [fp]
90011c88:	f8aa 3000 	strh.w	r3, [sl]
90011c8c:	e789      	b.n	90011ba2 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x7a>
90011c8e:	462a      	mov	r2, r5
90011c90:	ab0a      	add	r3, sp, #40	; 0x28
90011c92:	f852 0f04 	ldr.w	r0, [r2, #4]!
90011c96:	6851      	ldr	r1, [r2, #4]
90011c98:	c303      	stmia	r3!, {r0, r1}
90011c9a:	e7a9      	b.n	90011bf0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xc8>
90011c9c:	a807      	add	r0, sp, #28
90011c9e:	f005 fc2f 	bl	90017500 <_ZNK8touchgfx6Bitmap9getFormatEv>
90011ca2:	4606      	mov	r6, r0
90011ca4:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
90011ca6:	6803      	ldr	r3, [r0, #0]
90011ca8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90011caa:	4798      	blx	r3
90011cac:	4286      	cmp	r6, r0
90011cae:	d1b8      	bne.n	90011c22 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfa>
90011cb0:	f7ff fe6e 	bl	90011990 <_ZN8touchgfx3HAL3lcdEv>
90011cb4:	6803      	ldr	r3, [r0, #0]
90011cb6:	4606      	mov	r6, r0
90011cb8:	a807      	add	r0, sp, #28
90011cba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
90011cbc:	9305      	str	r3, [sp, #20]
90011cbe:	f005 fc1f 	bl	90017500 <_ZNK8touchgfx6Bitmap9getFormatEv>
90011cc2:	9b05      	ldr	r3, [sp, #20]
90011cc4:	4601      	mov	r1, r0
90011cc6:	4630      	mov	r0, r6
90011cc8:	4798      	blx	r3
90011cca:	f080 0001 	eor.w	r0, r0, #1
90011cce:	b2c0      	uxtb	r0, r0
90011cd0:	e7a8      	b.n	90011c24 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfc>
90011cd2:	bf00      	nop
90011cd4:	24026258 	.word	0x24026258
90011cd8:	2402625a 	.word	0x2402625a
90011cdc:	2402625c 	.word	0x2402625c
90011ce0:	2402625e 	.word	0x2402625e
90011ce4:	24026260 	.word	0x24026260

90011ce8 <_ZN8touchgfx3HAL20getClientFrameBufferEv>:
90011ce8:	4b07      	ldr	r3, [pc, #28]	; (90011d08 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x20>)
90011cea:	b510      	push	{r4, lr}
90011cec:	781b      	ldrb	r3, [r3, #0]
90011cee:	4604      	mov	r4, r0
90011cf0:	b13b      	cbz	r3, 90011d02 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
90011cf2:	6803      	ldr	r3, [r0, #0]
90011cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90011cf6:	4798      	blx	r3
90011cf8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
90011cfa:	4283      	cmp	r3, r0
90011cfc:	d101      	bne.n	90011d02 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
90011cfe:	6c20      	ldr	r0, [r4, #64]	; 0x40
90011d00:	bd10      	pop	{r4, pc}
90011d02:	6be0      	ldr	r0, [r4, #60]	; 0x3c
90011d04:	e7fc      	b.n	90011d00 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x18>
90011d06:	bf00      	nop
90011d08:	24026262 	.word	0x24026262

90011d0c <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt>:
90011d0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
90011d10:	461d      	mov	r5, r3
90011d12:	b08a      	sub	sp, #40	; 0x28
90011d14:	f44f 6380 	mov.w	r3, #1024	; 0x400
90011d18:	4690      	mov	r8, r2
90011d1a:	f8bd 604c 	ldrh.w	r6, [sp, #76]	; 0x4c
90011d1e:	2400      	movs	r4, #0
90011d20:	4607      	mov	r7, r0
90011d22:	fb06 8505 	mla	r5, r6, r5, r8
90011d26:	9404      	str	r4, [sp, #16]
90011d28:	f88d 4020 	strb.w	r4, [sp, #32]
90011d2c:	e9cd 3101 	strd	r3, r1, [sp, #4]
90011d30:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
90011d34:	f8ad 3018 	strh.w	r3, [sp, #24]
90011d38:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
90011d3c:	f8ad 301a 	strh.w	r3, [sp, #26]
90011d40:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
90011d44:	f8ad 301c 	strh.w	r3, [sp, #28]
90011d48:	f7ff ffce 	bl	90011ce8 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
90011d4c:	eb00 0545 	add.w	r5, r0, r5, lsl #1
90011d50:	6878      	ldr	r0, [r7, #4]
90011d52:	f8ad 601e 	strh.w	r6, [sp, #30]
90011d56:	a901      	add	r1, sp, #4
90011d58:	9505      	str	r5, [sp, #20]
90011d5a:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
90011d5e:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
90011d62:	f88d 4023 	strb.w	r4, [sp, #35]	; 0x23
90011d66:	f88d 4024 	strb.w	r4, [sp, #36]	; 0x24
90011d6a:	6803      	ldr	r3, [r0, #0]
90011d6c:	685b      	ldr	r3, [r3, #4]
90011d6e:	4798      	blx	r3
90011d70:	b00a      	add	sp, #40	; 0x28
90011d72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

90011d76 <_ZN8touchgfx3HAL12blitFillWordEtttttt>:
90011d76:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
90011d7a:	b08b      	sub	sp, #44	; 0x2c
90011d7c:	2400      	movs	r4, #0
90011d7e:	4691      	mov	r9, r2
90011d80:	461d      	mov	r5, r3
90011d82:	f8bd 6050 	ldrh.w	r6, [sp, #80]	; 0x50
90011d86:	f44f 6300 	mov.w	r3, #2048	; 0x800
90011d8a:	4688      	mov	r8, r1
90011d8c:	4607      	mov	r7, r0
90011d8e:	9404      	str	r4, [sp, #16]
90011d90:	fb06 9505 	mla	r5, r6, r5, r9
90011d94:	e9cd 3401 	strd	r3, r4, [sp, #4]
90011d98:	f7ff ffa6 	bl	90011ce8 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
90011d9c:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
90011da0:	eb00 0545 	add.w	r5, r0, r5, lsl #1
90011da4:	6878      	ldr	r0, [r7, #4]
90011da6:	f8ad 3018 	strh.w	r3, [sp, #24]
90011daa:	a901      	add	r1, sp, #4
90011dac:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
90011db0:	9505      	str	r5, [sp, #20]
90011db2:	f8ad 301a 	strh.w	r3, [sp, #26]
90011db6:	f8ad 401c 	strh.w	r4, [sp, #28]
90011dba:	f8ad 601e 	strh.w	r6, [sp, #30]
90011dbe:	f8cd 8010 	str.w	r8, [sp, #16]
90011dc2:	f8ad 4020 	strh.w	r4, [sp, #32]
90011dc6:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
90011dca:	f88d 4023 	strb.w	r4, [sp, #35]	; 0x23
90011dce:	f88d 4024 	strb.w	r4, [sp, #36]	; 0x24
90011dd2:	6803      	ldr	r3, [r0, #0]
90011dd4:	685b      	ldr	r3, [r3, #4]
90011dd6:	4798      	blx	r3
90011dd8:	b00b      	add	sp, #44	; 0x2c
90011dda:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

90011de0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b>:
90011de0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
90011de4:	b08a      	sub	sp, #40	; 0x28
90011de6:	4698      	mov	r8, r3
90011de8:	2300      	movs	r3, #0
90011dea:	4606      	mov	r6, r0
90011dec:	f89d 505c 	ldrb.w	r5, [sp, #92]	; 0x5c
90011df0:	f89d 0050 	ldrb.w	r0, [sp, #80]	; 0x50
90011df4:	2d0b      	cmp	r5, #11
90011df6:	f89d c054 	ldrb.w	ip, [sp, #84]	; 0x54
90011dfa:	f8bd 7058 	ldrh.w	r7, [sp, #88]	; 0x58
90011dfe:	f89d 4060 	ldrb.w	r4, [sp, #96]	; 0x60
90011e02:	9304      	str	r3, [sp, #16]
90011e04:	d137      	bne.n	90011e76 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x96>
90011e06:	2380      	movs	r3, #128	; 0x80
90011e08:	f88d 0020 	strb.w	r0, [sp, #32]
90011e0c:	4630      	mov	r0, r6
90011e0e:	9203      	str	r2, [sp, #12]
90011e10:	e9cd 3101 	strd	r3, r1, [sp, #4]
90011e14:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
90011e18:	f8ad 3018 	strh.w	r3, [sp, #24]
90011e1c:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
90011e20:	f8ad 301a 	strh.w	r3, [sp, #26]
90011e24:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
90011e28:	f8ad 301c 	strh.w	r3, [sp, #28]
90011e2c:	f7ff ff5c 	bl	90011ce8 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
90011e30:	2c0b      	cmp	r4, #11
90011e32:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
90011e36:	f8ad 701e 	strh.w	r7, [sp, #30]
90011e3a:	bf94      	ite	ls
90011e3c:	4b19      	ldrls	r3, [pc, #100]	; (90011ea4 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xc4>)
90011e3e:	2100      	movhi	r1, #0
90011e40:	f88d 5021 	strb.w	r5, [sp, #33]	; 0x21
90011e44:	bf98      	it	ls
90011e46:	5d19      	ldrbls	r1, [r3, r4]
90011e48:	fb02 8307 	mla	r3, r2, r7, r8
90011e4c:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
90011e50:	10c9      	asrs	r1, r1, #3
90011e52:	fb01 0003 	mla	r0, r1, r3, r0
90011e56:	f89d 3064 	ldrb.w	r3, [sp, #100]	; 0x64
90011e5a:	a901      	add	r1, sp, #4
90011e5c:	9005      	str	r0, [sp, #20]
90011e5e:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
90011e62:	2300      	movs	r3, #0
90011e64:	6870      	ldr	r0, [r6, #4]
90011e66:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
90011e6a:	6803      	ldr	r3, [r0, #0]
90011e6c:	685b      	ldr	r3, [r3, #4]
90011e6e:	4798      	blx	r3
90011e70:	b00a      	add	sp, #40	; 0x28
90011e72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
90011e76:	2d02      	cmp	r5, #2
90011e78:	d109      	bne.n	90011e8e <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xae>
90011e7a:	28ff      	cmp	r0, #255	; 0xff
90011e7c:	d105      	bne.n	90011e8a <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xaa>
90011e7e:	f1bc 0f00 	cmp.w	ip, #0
90011e82:	bf14      	ite	ne
90011e84:	2340      	movne	r3, #64	; 0x40
90011e86:	2320      	moveq	r3, #32
90011e88:	e7be      	b.n	90011e08 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
90011e8a:	2340      	movs	r3, #64	; 0x40
90011e8c:	e7bc      	b.n	90011e08 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
90011e8e:	28ff      	cmp	r0, #255	; 0xff
90011e90:	d105      	bne.n	90011e9e <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xbe>
90011e92:	f1bc 0f00 	cmp.w	ip, #0
90011e96:	bf14      	ite	ne
90011e98:	2304      	movne	r3, #4
90011e9a:	2301      	moveq	r3, #1
90011e9c:	e7b4      	b.n	90011e08 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
90011e9e:	2304      	movs	r3, #4
90011ea0:	e7b2      	b.n	90011e08 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
90011ea2:	bf00      	nop
90011ea4:	90026b64 	.word	0x90026b64

90011ea8 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb>:
90011ea8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90011eac:	b08b      	sub	sp, #44	; 0x2c
90011eae:	461d      	mov	r5, r3
90011eb0:	2400      	movs	r4, #0
90011eb2:	4688      	mov	r8, r1
90011eb4:	f89d 9058 	ldrb.w	r9, [sp, #88]	; 0x58
90011eb8:	4693      	mov	fp, r2
90011eba:	f89d 6060 	ldrb.w	r6, [sp, #96]	; 0x60
90011ebe:	4607      	mov	r7, r0
90011ec0:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
90011ec4:	f8bd a05c 	ldrh.w	sl, [sp, #92]	; 0x5c
90011ec8:	9404      	str	r4, [sp, #16]
90011eca:	bf14      	ite	ne
90011ecc:	2308      	movne	r3, #8
90011ece:	2302      	moveq	r3, #2
90011ed0:	fb05 b50a 	mla	r5, r5, sl, fp
90011ed4:	e9cd 3401 	strd	r3, r4, [sp, #4]
90011ed8:	f7ff ff06 	bl	90011ce8 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
90011edc:	2e0b      	cmp	r6, #11
90011ede:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
90011ee2:	a901      	add	r1, sp, #4
90011ee4:	bf98      	it	ls
90011ee6:	4b13      	ldrls	r3, [pc, #76]	; (90011f34 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0x8c>)
90011ee8:	f8ad a01e 	strh.w	sl, [sp, #30]
90011eec:	bf98      	it	ls
90011eee:	5d9c      	ldrbls	r4, [r3, r6]
90011ef0:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
90011ef4:	10e4      	asrs	r4, r4, #3
90011ef6:	f8cd 8010 	str.w	r8, [sp, #16]
90011efa:	f8ad 3018 	strh.w	r3, [sp, #24]
90011efe:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
90011f02:	fb04 0405 	mla	r4, r4, r5, r0
90011f06:	6878      	ldr	r0, [r7, #4]
90011f08:	f8ad 301a 	strh.w	r3, [sp, #26]
90011f0c:	2300      	movs	r3, #0
90011f0e:	9405      	str	r4, [sp, #20]
90011f10:	f8ad 301c 	strh.w	r3, [sp, #28]
90011f14:	f88d 9020 	strb.w	r9, [sp, #32]
90011f18:	f88d 2023 	strb.w	r2, [sp, #35]	; 0x23
90011f1c:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
90011f20:	f88d 6021 	strb.w	r6, [sp, #33]	; 0x21
90011f24:	f88d 6022 	strb.w	r6, [sp, #34]	; 0x22
90011f28:	6803      	ldr	r3, [r0, #0]
90011f2a:	685b      	ldr	r3, [r3, #4]
90011f2c:	4798      	blx	r3
90011f2e:	b00b      	add	sp, #44	; 0x2c
90011f30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90011f34:	90026b64 	.word	0x90026b64

90011f38 <_ZNK8touchgfx3HAL13getDstAddressEttPt>:
90011f38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
90011f3c:	461e      	mov	r6, r3
90011f3e:	4b0a      	ldr	r3, [pc, #40]	; (90011f68 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x30>)
90011f40:	460f      	mov	r7, r1
90011f42:	4690      	mov	r8, r2
90011f44:	881d      	ldrh	r5, [r3, #0]
90011f46:	f7ff fd23 	bl	90011990 <_ZN8touchgfx3HAL3lcdEv>
90011f4a:	6803      	ldr	r3, [r0, #0]
90011f4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90011f4e:	4798      	blx	r3
90011f50:	280b      	cmp	r0, #11
90011f52:	bf96      	itet	ls
90011f54:	4b05      	ldrls	r3, [pc, #20]	; (90011f6c <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x34>)
90011f56:	2400      	movhi	r4, #0
90011f58:	5c1c      	ldrbls	r4, [r3, r0]
90011f5a:	fb08 7005 	mla	r0, r8, r5, r7
90011f5e:	10e4      	asrs	r4, r4, #3
90011f60:	fb04 6000 	mla	r0, r4, r0, r6
90011f64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
90011f68:	2402625e 	.word	0x2402625e
90011f6c:	90026b64 	.word	0x90026b64

90011f70 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb>:
90011f70:	b5f0      	push	{r4, r5, r6, r7, lr}
90011f72:	b08b      	sub	sp, #44	; 0x2c
90011f74:	461f      	mov	r7, r3
90011f76:	4604      	mov	r4, r0
90011f78:	4616      	mov	r6, r2
90011f7a:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
90011f7e:	2500      	movs	r5, #0
90011f80:	e9cd 3101 	strd	r3, r1, [sp, #4]
90011f84:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
90011f88:	9504      	str	r5, [sp, #16]
90011f8a:	f8ad 3018 	strh.w	r3, [sp, #24]
90011f8e:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
90011f92:	f8ad 301a 	strh.w	r3, [sp, #26]
90011f96:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
90011f9a:	f8ad 301c 	strh.w	r3, [sp, #28]
90011f9e:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
90011fa2:	f88d 3020 	strb.w	r3, [sp, #32]
90011fa6:	f7ff fe9f 	bl	90011ce8 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
90011faa:	463a      	mov	r2, r7
90011fac:	4631      	mov	r1, r6
90011fae:	4603      	mov	r3, r0
90011fb0:	4620      	mov	r0, r4
90011fb2:	f7ff ffc1 	bl	90011f38 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
90011fb6:	4b0e      	ldr	r3, [pc, #56]	; (90011ff0 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x80>)
90011fb8:	9005      	str	r0, [sp, #20]
90011fba:	881b      	ldrh	r3, [r3, #0]
90011fbc:	f8ad 301e 	strh.w	r3, [sp, #30]
90011fc0:	f7ff fce6 	bl	90011990 <_ZN8touchgfx3HAL3lcdEv>
90011fc4:	6803      	ldr	r3, [r0, #0]
90011fc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90011fc8:	4798      	blx	r3
90011fca:	9b13      	ldr	r3, [sp, #76]	; 0x4c
90011fcc:	f88d 0022 	strb.w	r0, [sp, #34]	; 0x22
90011fd0:	a901      	add	r1, sp, #4
90011fd2:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
90011fd6:	9304      	str	r3, [sp, #16]
90011fd8:	6860      	ldr	r0, [r4, #4]
90011fda:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
90011fde:	f88d 5024 	strb.w	r5, [sp, #36]	; 0x24
90011fe2:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
90011fe6:	6803      	ldr	r3, [r0, #0]
90011fe8:	685b      	ldr	r3, [r3, #4]
90011fea:	4798      	blx	r3
90011fec:	b00b      	add	sp, #44	; 0x2c
90011fee:	bdf0      	pop	{r4, r5, r6, r7, pc}
90011ff0:	2402625e 	.word	0x2402625e

90011ff4 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE>:
90011ff4:	b5f0      	push	{r4, r5, r6, r7, lr}
90011ff6:	b08d      	sub	sp, #52	; 0x34
90011ff8:	2501      	movs	r5, #1
90011ffa:	4604      	mov	r4, r0
90011ffc:	466b      	mov	r3, sp
90011ffe:	9503      	str	r5, [sp, #12]
90012000:	e883 0006 	stmia.w	r3, {r1, r2}
90012004:	2300      	movs	r3, #0
90012006:	f8bd 6000 	ldrh.w	r6, [sp]
9001200a:	f8bd 7002 	ldrh.w	r7, [sp, #2]
9001200e:	9306      	str	r3, [sp, #24]
90012010:	6803      	ldr	r3, [r0, #0]
90012012:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90012014:	4798      	blx	r3
90012016:	463a      	mov	r2, r7
90012018:	4631      	mov	r1, r6
9001201a:	4603      	mov	r3, r0
9001201c:	4620      	mov	r0, r4
9001201e:	f7ff ff8b 	bl	90011f38 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
90012022:	6c63      	ldr	r3, [r4, #68]	; 0x44
90012024:	9004      	str	r0, [sp, #16]
90012026:	9307      	str	r3, [sp, #28]
90012028:	f8bd 3004 	ldrh.w	r3, [sp, #4]
9001202c:	f8ad 3020 	strh.w	r3, [sp, #32]
90012030:	f8bd 3006 	ldrh.w	r3, [sp, #6]
90012034:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
90012038:	4b0e      	ldr	r3, [pc, #56]	; (90012074 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x80>)
9001203a:	881b      	ldrh	r3, [r3, #0]
9001203c:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
90012040:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
90012044:	f7ff fca4 	bl	90011990 <_ZN8touchgfx3HAL3lcdEv>
90012048:	6803      	ldr	r3, [r0, #0]
9001204a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9001204c:	4798      	blx	r3
9001204e:	23ff      	movs	r3, #255	; 0xff
90012050:	f88d 0029 	strb.w	r0, [sp, #41]	; 0x29
90012054:	a903      	add	r1, sp, #12
90012056:	f88d 002a 	strb.w	r0, [sp, #42]	; 0x2a
9001205a:	6860      	ldr	r0, [r4, #4]
9001205c:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
90012060:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
90012064:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
90012068:	6803      	ldr	r3, [r0, #0]
9001206a:	685b      	ldr	r3, [r3, #4]
9001206c:	4798      	blx	r3
9001206e:	6c60      	ldr	r0, [r4, #68]	; 0x44
90012070:	b00d      	add	sp, #52	; 0x34
90012072:	bdf0      	pop	{r4, r5, r6, r7, pc}
90012074:	2402625e 	.word	0x2402625e

90012078 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm>:
90012078:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
9001207c:	b08c      	sub	sp, #48	; 0x30
9001207e:	461e      	mov	r6, r3
90012080:	2300      	movs	r3, #0
90012082:	4604      	mov	r4, r0
90012084:	466d      	mov	r5, sp
90012086:	9306      	str	r3, [sp, #24]
90012088:	6803      	ldr	r3, [r0, #0]
9001208a:	e885 0006 	stmia.w	r5, {r1, r2}
9001208e:	2501      	movs	r5, #1
90012090:	f8bd 7000 	ldrh.w	r7, [sp]
90012094:	f8bd 8002 	ldrh.w	r8, [sp, #2]
90012098:	9503      	str	r5, [sp, #12]
9001209a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
9001209c:	4798      	blx	r3
9001209e:	4642      	mov	r2, r8
900120a0:	4639      	mov	r1, r7
900120a2:	4603      	mov	r3, r0
900120a4:	4620      	mov	r0, r4
900120a6:	f7ff ff47 	bl	90011f38 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
900120aa:	f8bd 3004 	ldrh.w	r3, [sp, #4]
900120ae:	9004      	str	r0, [sp, #16]
900120b0:	f8ad 3020 	strh.w	r3, [sp, #32]
900120b4:	f8bd 3006 	ldrh.w	r3, [sp, #6]
900120b8:	9607      	str	r6, [sp, #28]
900120ba:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
900120be:	4b10      	ldr	r3, [pc, #64]	; (90012100 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm+0x88>)
900120c0:	881b      	ldrh	r3, [r3, #0]
900120c2:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
900120c6:	9b12      	ldr	r3, [sp, #72]	; 0x48
900120c8:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
900120cc:	f7ff fc60 	bl	90011990 <_ZN8touchgfx3HAL3lcdEv>
900120d0:	6803      	ldr	r3, [r0, #0]
900120d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
900120d4:	4798      	blx	r3
900120d6:	23ff      	movs	r3, #255	; 0xff
900120d8:	f88d 0029 	strb.w	r0, [sp, #41]	; 0x29
900120dc:	a903      	add	r1, sp, #12
900120de:	f88d 002a 	strb.w	r0, [sp, #42]	; 0x2a
900120e2:	6860      	ldr	r0, [r4, #4]
900120e4:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
900120e8:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
900120ec:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
900120f0:	6803      	ldr	r3, [r0, #0]
900120f2:	685b      	ldr	r3, [r3, #4]
900120f4:	4798      	blx	r3
900120f6:	4630      	mov	r0, r6
900120f8:	b00c      	add	sp, #48	; 0x30
900120fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
900120fe:	bf00      	nop
90012100:	2402625e 	.word	0x2402625e

90012104 <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE>:
90012104:	b5f0      	push	{r4, r5, r6, r7, lr}
90012106:	b085      	sub	sp, #20
90012108:	4605      	mov	r5, r0
9001210a:	ac02      	add	r4, sp, #8
9001210c:	e884 0006 	stmia.w	r4, {r1, r2}
90012110:	f8bd 6008 	ldrh.w	r6, [sp, #8]
90012114:	f8bd 700a 	ldrh.w	r7, [sp, #10]
90012118:	f7ff fde6 	bl	90011ce8 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
9001211c:	4631      	mov	r1, r6
9001211e:	4603      	mov	r3, r0
90012120:	463a      	mov	r2, r7
90012122:	4628      	mov	r0, r5
90012124:	f7ff ff08 	bl	90011f38 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
90012128:	4a05      	ldr	r2, [pc, #20]	; (90012140 <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE+0x3c>)
9001212a:	682b      	ldr	r3, [r5, #0]
9001212c:	8812      	ldrh	r2, [r2, #0]
9001212e:	9200      	str	r2, [sp, #0]
90012130:	6ede      	ldr	r6, [r3, #108]	; 0x6c
90012132:	4603      	mov	r3, r0
90012134:	4628      	mov	r0, r5
90012136:	e894 0006 	ldmia.w	r4, {r1, r2}
9001213a:	47b0      	blx	r6
9001213c:	b005      	add	sp, #20
9001213e:	bdf0      	pop	{r4, r5, r6, r7, pc}
90012140:	2402625e 	.word	0x2402625e

90012144 <_ZN8touchgfx3HAL16swapFrameBuffersEv>:
90012144:	b570      	push	{r4, r5, r6, lr}
90012146:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
9001214a:	4604      	mov	r4, r0
9001214c:	b19b      	cbz	r3, 90012176 <_ZN8touchgfx3HAL16swapFrameBuffersEv+0x32>
9001214e:	2002      	movs	r0, #2
90012150:	f7ee fa68 	bl	90000624 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>
90012154:	2300      	movs	r3, #0
90012156:	4620      	mov	r0, r4
90012158:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
9001215c:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
90012160:	6823      	ldr	r3, [r4, #0]
90012162:	f8d3 50b8 	ldr.w	r5, [r3, #184]	; 0xb8
90012166:	f7ff fdbf 	bl	90011ce8 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
9001216a:	4601      	mov	r1, r0
9001216c:	4620      	mov	r0, r4
9001216e:	462b      	mov	r3, r5
90012170:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
90012174:	4718      	bx	r3
90012176:	bd70      	pop	{r4, r5, r6, pc}

90012178 <_ZN8touchgfx3HAL12setMCUActiveEb>:
90012178:	b570      	push	{r4, r5, r6, lr}
9001217a:	4605      	mov	r5, r0
9001217c:	460c      	mov	r4, r1
9001217e:	2003      	movs	r0, #3
90012180:	b149      	cbz	r1, 90012196 <_ZN8touchgfx3HAL12setMCUActiveEb+0x1e>
90012182:	f7ee f9e7 	bl	90000554 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
90012186:	6928      	ldr	r0, [r5, #16]
90012188:	b168      	cbz	r0, 900121a6 <_ZN8touchgfx3HAL12setMCUActiveEb+0x2e>
9001218a:	6803      	ldr	r3, [r0, #0]
9001218c:	2101      	movs	r1, #1
9001218e:	695b      	ldr	r3, [r3, #20]
90012190:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
90012194:	4718      	bx	r3
90012196:	f7ee fa11 	bl	900005bc <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
9001219a:	6928      	ldr	r0, [r5, #16]
9001219c:	b118      	cbz	r0, 900121a6 <_ZN8touchgfx3HAL12setMCUActiveEb+0x2e>
9001219e:	6803      	ldr	r3, [r0, #0]
900121a0:	4621      	mov	r1, r4
900121a2:	695b      	ldr	r3, [r3, #20]
900121a4:	e7f4      	b.n	90012190 <_ZN8touchgfx3HAL12setMCUActiveEb+0x18>
900121a6:	bd70      	pop	{r4, r5, r6, pc}

900121a8 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>:
900121a8:	b538      	push	{r3, r4, r5, lr}
900121aa:	f890 3078 	ldrb.w	r3, [r0, #120]	; 0x78
900121ae:	4604      	mov	r4, r0
900121b0:	460d      	mov	r5, r1
900121b2:	428b      	cmp	r3, r1
900121b4:	d006      	beq.n	900121c4 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1c>
900121b6:	6803      	ldr	r3, [r0, #0]
900121b8:	b929      	cbnz	r1, 900121c6 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1e>
900121ba:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
900121be:	4798      	blx	r3
900121c0:	f884 5078 	strb.w	r5, [r4, #120]	; 0x78
900121c4:	bd38      	pop	{r3, r4, r5, pc}
900121c6:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
900121ca:	e7f8      	b.n	900121be <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x16>

900121cc <_ZN8touchgfx3HAL15lockFrameBufferEv>:
900121cc:	4b0d      	ldr	r3, [pc, #52]	; (90012204 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x38>)
900121ce:	b510      	push	{r4, lr}
900121d0:	781b      	ldrb	r3, [r3, #0]
900121d2:	4604      	mov	r4, r0
900121d4:	b95b      	cbnz	r3, 900121ee <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
900121d6:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
900121da:	2b02      	cmp	r3, #2
900121dc:	d007      	beq.n	900121ee <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
900121de:	6840      	ldr	r0, [r0, #4]
900121e0:	f000 f900 	bl	900123e4 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>
900121e4:	b118      	cbz	r0, 900121ee <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
900121e6:	6862      	ldr	r2, [r4, #4]
900121e8:	7a53      	ldrb	r3, [r2, #9]
900121ea:	2b00      	cmp	r3, #0
900121ec:	d0fc      	beq.n	900121e8 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x1c>
900121ee:	f7ef fbcb 	bl	90001988 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
900121f2:	4620      	mov	r0, r4
900121f4:	2100      	movs	r1, #0
900121f6:	f7ff ffd7 	bl	900121a8 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
900121fa:	4620      	mov	r0, r4
900121fc:	f7ff fd74 	bl	90011ce8 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
90012200:	bd10      	pop	{r4, pc}
90012202:	bf00      	nop
90012204:	24026262 	.word	0x24026262

90012208 <_ZN8touchgfx17LockFreeDMA_Queue7isEmptyEv>:
90012208:	e9d0 2003 	ldrd	r2, r0, [r0, #12]
9001220c:	1a13      	subs	r3, r2, r0
9001220e:	4258      	negs	r0, r3
90012210:	4158      	adcs	r0, r3
90012212:	4770      	bx	lr

90012214 <_ZN8touchgfx17LockFreeDMA_Queue6isFullEv>:
90012214:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
90012218:	1a9b      	subs	r3, r3, r2
9001221a:	2b00      	cmp	r3, #0
9001221c:	bfdc      	itt	le
9001221e:	6882      	ldrle	r2, [r0, #8]
90012220:	189b      	addle	r3, r3, r2
90012222:	2b01      	cmp	r3, #1
90012224:	bfcc      	ite	gt
90012226:	2000      	movgt	r0, #0
90012228:	2001      	movle	r0, #1
9001222a:	4770      	bx	lr

9001222c <_ZN8touchgfx17LockFreeDMA_Queue5firstEv>:
9001222c:	6902      	ldr	r2, [r0, #16]
9001222e:	6843      	ldr	r3, [r0, #4]
90012230:	2024      	movs	r0, #36	; 0x24
90012232:	fb00 3002 	mla	r0, r0, r2, r3
90012236:	4770      	bx	lr

90012238 <_ZN8touchgfx13DMA_Interface13seedExecutionEv>:
90012238:	6803      	ldr	r3, [r0, #0]
9001223a:	691b      	ldr	r3, [r3, #16]
9001223c:	4718      	bx	r3

9001223e <_ZN8touchgfx13DMA_Interface7executeEv>:
9001223e:	2301      	movs	r3, #1
90012240:	b570      	push	{r4, r5, r6, lr}
90012242:	7203      	strb	r3, [r0, #8]
90012244:	4604      	mov	r4, r0
90012246:	6840      	ldr	r0, [r0, #4]
90012248:	6803      	ldr	r3, [r0, #0]
9001224a:	699b      	ldr	r3, [r3, #24]
9001224c:	4798      	blx	r3
9001224e:	6803      	ldr	r3, [r0, #0]
90012250:	4605      	mov	r5, r0
90012252:	2b40      	cmp	r3, #64	; 0x40
90012254:	d00c      	beq.n	90012270 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
90012256:	d810      	bhi.n	9001227a <_ZN8touchgfx13DMA_Interface7executeEv+0x3c>
90012258:	2b04      	cmp	r3, #4
9001225a:	d01d      	beq.n	90012298 <_ZN8touchgfx13DMA_Interface7executeEv+0x5a>
9001225c:	d804      	bhi.n	90012268 <_ZN8touchgfx13DMA_Interface7executeEv+0x2a>
9001225e:	2b01      	cmp	r3, #1
90012260:	d006      	beq.n	90012270 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
90012262:	2b02      	cmp	r3, #2
90012264:	d02c      	beq.n	900122c0 <_ZN8touchgfx13DMA_Interface7executeEv+0x82>
90012266:	bd70      	pop	{r4, r5, r6, pc}
90012268:	2b08      	cmp	r3, #8
9001226a:	d01d      	beq.n	900122a8 <_ZN8touchgfx13DMA_Interface7executeEv+0x6a>
9001226c:	2b20      	cmp	r3, #32
9001226e:	d1fa      	bne.n	90012266 <_ZN8touchgfx13DMA_Interface7executeEv+0x28>
90012270:	6823      	ldr	r3, [r4, #0]
90012272:	4620      	mov	r0, r4
90012274:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
90012276:	4798      	blx	r3
90012278:	e013      	b.n	900122a2 <_ZN8touchgfx13DMA_Interface7executeEv+0x64>
9001227a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
9001227e:	d0f7      	beq.n	90012270 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
90012280:	d804      	bhi.n	9001228c <_ZN8touchgfx13DMA_Interface7executeEv+0x4e>
90012282:	2b80      	cmp	r3, #128	; 0x80
90012284:	d0f4      	beq.n	90012270 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
90012286:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
9001228a:	e7f0      	b.n	9001226e <_ZN8touchgfx13DMA_Interface7executeEv+0x30>
9001228c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
90012290:	d0ee      	beq.n	90012270 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
90012292:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
90012296:	e7e5      	b.n	90012264 <_ZN8touchgfx13DMA_Interface7executeEv+0x26>
90012298:	6823      	ldr	r3, [r4, #0]
9001229a:	7f01      	ldrb	r1, [r0, #28]
9001229c:	4620      	mov	r0, r4
9001229e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
900122a0:	4798      	blx	r3
900122a2:	6823      	ldr	r3, [r4, #0]
900122a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
900122a6:	e006      	b.n	900122b6 <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
900122a8:	6823      	ldr	r3, [r4, #0]
900122aa:	7f01      	ldrb	r1, [r0, #28]
900122ac:	4620      	mov	r0, r4
900122ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
900122b0:	4798      	blx	r3
900122b2:	6823      	ldr	r3, [r4, #0]
900122b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
900122b6:	4629      	mov	r1, r5
900122b8:	4620      	mov	r0, r4
900122ba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
900122be:	4718      	bx	r3
900122c0:	6823      	ldr	r3, [r4, #0]
900122c2:	4620      	mov	r0, r4
900122c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
900122c6:	4798      	blx	r3
900122c8:	e7f3      	b.n	900122b2 <_ZN8touchgfx13DMA_Interface7executeEv+0x74>

900122ca <_ZN8touchgfx13DMA_Interface11enableAlphaEh>:
900122ca:	4770      	bx	lr

900122cc <_ZN8touchgfx13DMA_Interface12disableAlphaEv>:
900122cc:	4770      	bx	lr

900122ce <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>:
900122ce:	4770      	bx	lr

900122d0 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE>:
900122d0:	e9d0 3203 	ldrd	r3, r2, [r0, #12]
900122d4:	b510      	push	{r4, lr}
900122d6:	1ad2      	subs	r2, r2, r3
900122d8:	2a00      	cmp	r2, #0
900122da:	bfdc      	itt	le
900122dc:	6884      	ldrle	r4, [r0, #8]
900122de:	1912      	addle	r2, r2, r4
900122e0:	2a01      	cmp	r2, #1
900122e2:	dd16      	ble.n	90012312 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x42>
900122e4:	6842      	ldr	r2, [r0, #4]
900122e6:	2424      	movs	r4, #36	; 0x24
900122e8:	fb04 2303 	mla	r3, r4, r3, r2
900122ec:	f101 0220 	add.w	r2, r1, #32
900122f0:	f851 4b04 	ldr.w	r4, [r1], #4
900122f4:	4291      	cmp	r1, r2
900122f6:	f843 4b04 	str.w	r4, [r3], #4
900122fa:	d1f9      	bne.n	900122f0 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x20>
900122fc:	780a      	ldrb	r2, [r1, #0]
900122fe:	701a      	strb	r2, [r3, #0]
90012300:	68c3      	ldr	r3, [r0, #12]
90012302:	6882      	ldr	r2, [r0, #8]
90012304:	f3bf 8f5b 	dmb	ish
90012308:	3301      	adds	r3, #1
9001230a:	429a      	cmp	r2, r3
9001230c:	bfd8      	it	le
9001230e:	1a9b      	suble	r3, r3, r2
90012310:	60c3      	str	r3, [r0, #12]
90012312:	bd10      	pop	{r4, pc}

90012314 <_ZN8touchgfx17LockFreeDMA_Queue3popEv>:
90012314:	6903      	ldr	r3, [r0, #16]
90012316:	6882      	ldr	r2, [r0, #8]
90012318:	f3bf 8f5b 	dmb	ish
9001231c:	3301      	adds	r3, #1
9001231e:	429a      	cmp	r2, r3
90012320:	bfd8      	it	le
90012322:	1a9b      	suble	r3, r3, r2
90012324:	6103      	str	r3, [r0, #16]
90012326:	4770      	bx	lr

90012328 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE>:
90012328:	b570      	push	{r4, r5, r6, lr}
9001232a:	4604      	mov	r4, r0
9001232c:	460e      	mov	r6, r1
9001232e:	6860      	ldr	r0, [r4, #4]
90012330:	6803      	ldr	r3, [r0, #0]
90012332:	685b      	ldr	r3, [r3, #4]
90012334:	4798      	blx	r3
90012336:	2800      	cmp	r0, #0
90012338:	d1f9      	bne.n	9001232e <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x6>
9001233a:	4d0d      	ldr	r5, [pc, #52]	; (90012370 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x48>)
9001233c:	6828      	ldr	r0, [r5, #0]
9001233e:	6803      	ldr	r3, [r0, #0]
90012340:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
90012342:	4798      	blx	r3
90012344:	f7ef fb2e 	bl	900019a4 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>
90012348:	6828      	ldr	r0, [r5, #0]
9001234a:	2101      	movs	r1, #1
9001234c:	f7ff ff2c 	bl	900121a8 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
90012350:	6860      	ldr	r0, [r4, #4]
90012352:	4631      	mov	r1, r6
90012354:	6803      	ldr	r3, [r0, #0]
90012356:	689b      	ldr	r3, [r3, #8]
90012358:	4798      	blx	r3
9001235a:	6823      	ldr	r3, [r4, #0]
9001235c:	4620      	mov	r0, r4
9001235e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90012360:	4798      	blx	r3
90012362:	6828      	ldr	r0, [r5, #0]
90012364:	6803      	ldr	r3, [r0, #0]
90012366:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
9001236a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
9001236c:	4718      	bx	r3
9001236e:	bf00      	nop
90012370:	24026264 	.word	0x24026264

90012374 <_ZN8touchgfx13DMA_Interface27waitForFrameBufferSemaphoreEv>:
90012374:	b508      	push	{r3, lr}
90012376:	f7ef fb07 	bl	90001988 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
9001237a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
9001237e:	f7ef bb0b 	b.w	90001998 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

90012382 <_ZN8touchgfx17LockFreeDMA_QueueD0Ev>:
90012382:	b510      	push	{r4, lr}
90012384:	4604      	mov	r4, r0
90012386:	2114      	movs	r1, #20
90012388:	f010 fd2b 	bl	90022de2 <_ZdlPvj>
9001238c:	4620      	mov	r0, r4
9001238e:	bd10      	pop	{r4, pc}

90012390 <_ZN8touchgfx13DMA_Interface16executeCompletedEv>:
90012390:	b570      	push	{r4, r5, r6, lr}
90012392:	4604      	mov	r4, r0
90012394:	6840      	ldr	r0, [r0, #4]
90012396:	6803      	ldr	r3, [r0, #0]
90012398:	681b      	ldr	r3, [r3, #0]
9001239a:	4798      	blx	r3
9001239c:	4605      	mov	r5, r0
9001239e:	b930      	cbnz	r0, 900123ae <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
900123a0:	7a23      	ldrb	r3, [r4, #8]
900123a2:	b123      	cbz	r3, 900123ae <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
900123a4:	6860      	ldr	r0, [r4, #4]
900123a6:	6803      	ldr	r3, [r0, #0]
900123a8:	695b      	ldr	r3, [r3, #20]
900123aa:	4798      	blx	r3
900123ac:	7225      	strb	r5, [r4, #8]
900123ae:	6860      	ldr	r0, [r4, #4]
900123b0:	6803      	ldr	r3, [r0, #0]
900123b2:	681b      	ldr	r3, [r3, #0]
900123b4:	4798      	blx	r3
900123b6:	b928      	cbnz	r0, 900123c4 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x34>
900123b8:	6823      	ldr	r3, [r4, #0]
900123ba:	4620      	mov	r0, r4
900123bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
900123be:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
900123c2:	4718      	bx	r3
900123c4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
900123c8:	f7ef baf4 	b.w	900019b4 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>

900123cc <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>:
900123cc:	b510      	push	{r4, lr}
900123ce:	6082      	str	r2, [r0, #8]
900123d0:	2200      	movs	r2, #0
900123d2:	4c03      	ldr	r4, [pc, #12]	; (900123e0 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi+0x14>)
900123d4:	e9c0 2203 	strd	r2, r2, [r0, #12]
900123d8:	e9c0 4100 	strd	r4, r1, [r0]
900123dc:	bd10      	pop	{r4, pc}
900123de:	bf00      	nop
900123e0:	90026b78 	.word	0x90026b78

900123e4 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>:
900123e4:	6840      	ldr	r0, [r0, #4]
900123e6:	6803      	ldr	r3, [r0, #0]
900123e8:	681b      	ldr	r3, [r3, #0]
900123ea:	4718      	bx	r3

900123ec <_ZNK8touchgfx8TextArea12getAlignmentEv>:
900123ec:	4b07      	ldr	r3, [pc, #28]	; (9001240c <_ZNK8touchgfx8TextArea12getAlignmentEv+0x20>)
900123ee:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
900123f0:	881b      	ldrh	r3, [r3, #0]
900123f2:	4293      	cmp	r3, r2
900123f4:	bf81      	itttt	hi
900123f6:	4b06      	ldrhi	r3, [pc, #24]	; (90012410 <_ZNK8touchgfx8TextArea12getAlignmentEv+0x24>)
900123f8:	681b      	ldrhi	r3, [r3, #0]
900123fa:	eb03 0342 	addhi.w	r3, r3, r2, lsl #1
900123fe:	7858      	ldrbhi	r0, [r3, #1]
90012400:	bf8c      	ite	hi
90012402:	f000 0003 	andhi.w	r0, r0, #3
90012406:	2000      	movls	r0, #0
90012408:	4770      	bx	lr
9001240a:	bf00      	nop
9001240c:	240262b8 	.word	0x240262b8
90012410:	240262b4 	.word	0x240262b4

90012414 <_ZNK8touchgfx8TextArea13getTextHeightEv>:
90012414:	4b11      	ldr	r3, [pc, #68]	; (9001245c <_ZNK8touchgfx8TextArea13getTextHeightEv+0x48>)
90012416:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
9001241a:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
9001241c:	4604      	mov	r4, r0
9001241e:	881b      	ldrh	r3, [r3, #0]
90012420:	428b      	cmp	r3, r1
90012422:	d918      	bls.n	90012456 <_ZNK8touchgfx8TextArea13getTextHeightEv+0x42>
90012424:	6803      	ldr	r3, [r0, #0]
90012426:	6f9d      	ldr	r5, [r3, #120]	; 0x78
90012428:	4b0d      	ldr	r3, [pc, #52]	; (90012460 <_ZNK8touchgfx8TextArea13getTextHeightEv+0x4c>)
9001242a:	6818      	ldr	r0, [r3, #0]
9001242c:	f7f3 fa50 	bl	900058d0 <_ZNK8touchgfx5Texts7getTextEt>
90012430:	6823      	ldr	r3, [r4, #0]
90012432:	4606      	mov	r6, r0
90012434:	4620      	mov	r0, r4
90012436:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
90012438:	4798      	blx	r3
9001243a:	6823      	ldr	r3, [r4, #0]
9001243c:	4607      	mov	r7, r0
9001243e:	4620      	mov	r0, r4
90012440:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
90012444:	4798      	blx	r3
90012446:	463a      	mov	r2, r7
90012448:	4603      	mov	r3, r0
9001244a:	4631      	mov	r1, r6
9001244c:	4620      	mov	r0, r4
9001244e:	46ac      	mov	ip, r5
90012450:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
90012454:	4760      	bx	ip
90012456:	2000      	movs	r0, #0
90012458:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
9001245c:	240262b8 	.word	0x240262b8
90012460:	240262c0 	.word	0x240262c0

90012464 <_ZNK8touchgfx8TextArea12getTextWidthEv>:
90012464:	4b18      	ldr	r3, [pc, #96]	; (900124c8 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x64>)
90012466:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
9001246a:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
9001246c:	4604      	mov	r4, r0
9001246e:	881b      	ldrh	r3, [r3, #0]
90012470:	428b      	cmp	r3, r1
90012472:	d926      	bls.n	900124c2 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x5e>
90012474:	4b15      	ldr	r3, [pc, #84]	; (900124cc <_ZNK8touchgfx8TextArea12getTextWidthEv+0x68>)
90012476:	681b      	ldr	r3, [r3, #0]
90012478:	eb03 0241 	add.w	r2, r3, r1, lsl #1
9001247c:	f813 0011 	ldrb.w	r0, [r3, r1, lsl #1]
90012480:	4b13      	ldr	r3, [pc, #76]	; (900124d0 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x6c>)
90012482:	7855      	ldrb	r5, [r2, #1]
90012484:	681b      	ldr	r3, [r3, #0]
90012486:	f3c5 0581 	ubfx	r5, r5, #2, #2
9001248a:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
9001248e:	6833      	ldr	r3, [r6, #0]
90012490:	69df      	ldr	r7, [r3, #28]
90012492:	4b10      	ldr	r3, [pc, #64]	; (900124d4 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x70>)
90012494:	6818      	ldr	r0, [r3, #0]
90012496:	f7f3 fa1b 	bl	900058d0 <_ZNK8touchgfx5Texts7getTextEt>
9001249a:	6823      	ldr	r3, [r4, #0]
9001249c:	4680      	mov	r8, r0
9001249e:	4620      	mov	r0, r4
900124a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
900124a2:	4798      	blx	r3
900124a4:	6823      	ldr	r3, [r4, #0]
900124a6:	4681      	mov	r9, r0
900124a8:	4620      	mov	r0, r4
900124aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
900124ae:	4798      	blx	r3
900124b0:	464b      	mov	r3, r9
900124b2:	9000      	str	r0, [sp, #0]
900124b4:	4642      	mov	r2, r8
900124b6:	4629      	mov	r1, r5
900124b8:	4630      	mov	r0, r6
900124ba:	47b8      	blx	r7
900124bc:	b003      	add	sp, #12
900124be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
900124c2:	2000      	movs	r0, #0
900124c4:	e7fa      	b.n	900124bc <_ZNK8touchgfx8TextArea12getTextWidthEv+0x58>
900124c6:	bf00      	nop
900124c8:	240262b8 	.word	0x240262b8
900124cc:	240262b4 	.word	0x240262b4
900124d0:	240262bc 	.word	0x240262bc
900124d4:	240262c0 	.word	0x240262c0

900124d8 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz>:
900124d8:	b40e      	push	{r1, r2, r3}
900124da:	4b30      	ldr	r3, [pc, #192]	; (9001259c <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xc4>)
900124dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
900124e0:	881a      	ldrh	r2, [r3, #0]
900124e2:	b09d      	sub	sp, #116	; 0x74
900124e4:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
900124e6:	4604      	mov	r4, r0
900124e8:	429a      	cmp	r2, r3
900124ea:	d954      	bls.n	90012596 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xbe>
900124ec:	aa26      	add	r2, sp, #152	; 0x98
900124ee:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 900125a0 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xc8>
900124f2:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 900125a4 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xcc>
900124f6:	9202      	str	r2, [sp, #8]
900124f8:	f8d9 2000 	ldr.w	r2, [r9]
900124fc:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
90012500:	f8d8 3000 	ldr.w	r3, [r8]
90012504:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
90012508:	682b      	ldr	r3, [r5, #0]
9001250a:	4628      	mov	r0, r5
9001250c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
9001250e:	4798      	blx	r3
90012510:	4606      	mov	r6, r0
90012512:	b207      	sxth	r7, r0
90012514:	a803      	add	r0, sp, #12
90012516:	f003 fb09 	bl	90015b2c <_ZN8touchgfx12TextProviderC1Ev>
9001251a:	682b      	ldr	r3, [r5, #0]
9001251c:	4628      	mov	r0, r5
9001251e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
90012520:	4798      	blx	r3
90012522:	682b      	ldr	r3, [r5, #0]
90012524:	4682      	mov	sl, r0
90012526:	4628      	mov	r0, r5
90012528:	6d1b      	ldr	r3, [r3, #80]	; 0x50
9001252a:	4798      	blx	r3
9001252c:	4653      	mov	r3, sl
9001252e:	9000      	str	r0, [sp, #0]
90012530:	a803      	add	r0, sp, #12
90012532:	9a02      	ldr	r2, [sp, #8]
90012534:	9925      	ldr	r1, [sp, #148]	; 0x94
90012536:	f003 fb4c 	bl	90015bd2 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
9001253a:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
9001253c:	f8d9 3000 	ldr.w	r3, [r9]
90012540:	f894 c037 	ldrb.w	ip, [r4, #55]	; 0x37
90012544:	8925      	ldrh	r5, [r4, #8]
90012546:	eb03 0142 	add.w	r1, r3, r2, lsl #1
9001254a:	f813 0012 	ldrb.w	r0, [r3, r2, lsl #1]
9001254e:	eba5 050c 	sub.w	r5, r5, ip
90012552:	784a      	ldrb	r2, [r1, #1]
90012554:	f8d8 3000 	ldr.w	r3, [r8]
90012558:	b22d      	sxth	r5, r5
9001255a:	f894 1039 	ldrb.w	r1, [r4, #57]	; 0x39
9001255e:	f3c2 0281 	ubfx	r2, r2, #2, #2
90012562:	9500      	str	r5, [sp, #0]
90012564:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
90012568:	a803      	add	r0, sp, #12
9001256a:	f001 f9cb 	bl	90013904 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>
9001256e:	f9b4 2034 	ldrsh.w	r2, [r4, #52]	; 0x34
90012572:	b203      	sxth	r3, r0
90012574:	18b9      	adds	r1, r7, r2
90012576:	2900      	cmp	r1, #0
90012578:	dd0b      	ble.n	90012592 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xba>
9001257a:	3b01      	subs	r3, #1
9001257c:	fb13 f302 	smulbb	r3, r3, r2
90012580:	fb16 3300 	smlabb	r3, r6, r0, r3
90012584:	b21f      	sxth	r7, r3
90012586:	4638      	mov	r0, r7
90012588:	b01d      	add	sp, #116	; 0x74
9001258a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
9001258e:	b003      	add	sp, #12
90012590:	4770      	bx	lr
90012592:	2b00      	cmp	r3, #0
90012594:	dcf7      	bgt.n	90012586 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xae>
90012596:	2700      	movs	r7, #0
90012598:	e7f5      	b.n	90012586 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xae>
9001259a:	bf00      	nop
9001259c:	240262b8 	.word	0x240262b8
900125a0:	240262b4 	.word	0x240262b4
900125a4:	240262bc 	.word	0x240262bc

900125a8 <_ZN8touchgfx8Drawable14setWidthHeightEss>:
900125a8:	b570      	push	{r4, r5, r6, lr}
900125aa:	6803      	ldr	r3, [r0, #0]
900125ac:	4604      	mov	r4, r0
900125ae:	4615      	mov	r5, r2
900125b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
900125b2:	4798      	blx	r3
900125b4:	6823      	ldr	r3, [r4, #0]
900125b6:	4629      	mov	r1, r5
900125b8:	4620      	mov	r0, r4
900125ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
900125bc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
900125c0:	4718      	bx	r3
	...

900125c4 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>:
900125c4:	b538      	push	{r3, r4, r5, lr}
900125c6:	4b0e      	ldr	r3, [pc, #56]	; (90012600 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x3c>)
900125c8:	4604      	mov	r4, r0
900125ca:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
900125cc:	881b      	ldrh	r3, [r3, #0]
900125ce:	429a      	cmp	r2, r3
900125d0:	d214      	bcs.n	900125fc <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x38>
900125d2:	6803      	ldr	r3, [r0, #0]
900125d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
900125d6:	4798      	blx	r3
900125d8:	6823      	ldr	r3, [r4, #0]
900125da:	4605      	mov	r5, r0
900125dc:	4620      	mov	r0, r4
900125de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
900125e0:	4798      	blx	r3
900125e2:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
900125e6:	b22d      	sxth	r5, r5
900125e8:	4601      	mov	r1, r0
900125ea:	f013 0ffd 	tst.w	r3, #253	; 0xfd
900125ee:	bf06      	itte	eq
900125f0:	4602      	moveq	r2, r0
900125f2:	4629      	moveq	r1, r5
900125f4:	462a      	movne	r2, r5
900125f6:	4620      	mov	r0, r4
900125f8:	f7ff ffd6 	bl	900125a8 <_ZN8touchgfx8Drawable14setWidthHeightEss>
900125fc:	bd38      	pop	{r3, r4, r5, pc}
900125fe:	bf00      	nop
90012600:	240262b8 	.word	0x240262b8

90012604 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>:
90012604:	b530      	push	{r4, r5, lr}
90012606:	888b      	ldrh	r3, [r1, #4]
90012608:	b085      	sub	sp, #20
9001260a:	4604      	mov	r4, r0
9001260c:	8583      	strh	r3, [r0, #44]	; 0x2c
9001260e:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
90012612:	b923      	cbnz	r3, 9001261e <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE+0x1a>
90012614:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
90012618:	b90b      	cbnz	r3, 9001261e <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE+0x1a>
9001261a:	f7ff ffd3 	bl	900125c4 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
9001261e:	6823      	ldr	r3, [r4, #0]
90012620:	466d      	mov	r5, sp
90012622:	4621      	mov	r1, r4
90012624:	343c      	adds	r4, #60	; 0x3c
90012626:	4628      	mov	r0, r5
90012628:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
9001262c:	4798      	blx	r3
9001262e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
90012632:	e884 0007 	stmia.w	r4, {r0, r1, r2}
90012636:	b005      	add	sp, #20
90012638:	bd30      	pop	{r4, r5, pc}

9001263a <_ZNK8touchgfx3Box12getSolidRectEv>:
9001263a:	2300      	movs	r3, #0
9001263c:	8083      	strh	r3, [r0, #4]
9001263e:	80c3      	strh	r3, [r0, #6]
90012640:	8003      	strh	r3, [r0, #0]
90012642:	8043      	strh	r3, [r0, #2]
90012644:	f891 3026 	ldrb.w	r3, [r1, #38]	; 0x26
90012648:	2bff      	cmp	r3, #255	; 0xff
9001264a:	bf01      	itttt	eq
9001264c:	890b      	ldrheq	r3, [r1, #8]
9001264e:	8083      	strheq	r3, [r0, #4]
90012650:	894b      	ldrheq	r3, [r1, #10]
90012652:	80c3      	strheq	r3, [r0, #6]
90012654:	4770      	bx	lr
	...

90012658 <_ZNK8touchgfx3Box4drawERKNS_4RectE>:
90012658:	b537      	push	{r0, r1, r2, r4, r5, lr}
9001265a:	4604      	mov	r4, r0
9001265c:	466b      	mov	r3, sp
9001265e:	6808      	ldr	r0, [r1, #0]
90012660:	6849      	ldr	r1, [r1, #4]
90012662:	c303      	stmia	r3!, {r0, r1}
90012664:	6823      	ldr	r3, [r4, #0]
90012666:	4669      	mov	r1, sp
90012668:	4620      	mov	r0, r4
9001266a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9001266c:	4798      	blx	r3
9001266e:	4b08      	ldr	r3, [pc, #32]	; (90012690 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x38>)
90012670:	681b      	ldr	r3, [r3, #0]
90012672:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
90012676:	b10a      	cbz	r2, 9001267c <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x24>
90012678:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
9001267a:	b900      	cbnz	r0, 9001267e <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x26>
9001267c:	6898      	ldr	r0, [r3, #8]
9001267e:	6803      	ldr	r3, [r0, #0]
90012680:	4669      	mov	r1, sp
90012682:	6aa2      	ldr	r2, [r4, #40]	; 0x28
90012684:	6a1d      	ldr	r5, [r3, #32]
90012686:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
9001268a:	47a8      	blx	r5
9001268c:	b003      	add	sp, #12
9001268e:	bd30      	pop	{r4, r5, pc}
90012690:	24026264 	.word	0x24026264

90012694 <_ZN8touchgfx3BoxD1Ev>:
90012694:	4770      	bx	lr

90012696 <_ZN8touchgfx3BoxD0Ev>:
90012696:	b510      	push	{r4, lr}
90012698:	4604      	mov	r4, r0
9001269a:	212c      	movs	r1, #44	; 0x2c
9001269c:	f010 fba1 	bl	90022de2 <_ZdlPvj>
900126a0:	4620      	mov	r0, r4
900126a2:	bd10      	pop	{r4, pc}

900126a4 <_ZNK8touchgfx3Box17invalidateContentEv>:
900126a4:	f890 2026 	ldrb.w	r2, [r0, #38]	; 0x26
900126a8:	b12a      	cbz	r2, 900126b6 <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
900126aa:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
900126ae:	b112      	cbz	r2, 900126b6 <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
900126b0:	6803      	ldr	r3, [r0, #0]
900126b2:	695b      	ldr	r3, [r3, #20]
900126b4:	4718      	bx	r3
900126b6:	4770      	bx	lr

900126b8 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE>:
900126b8:	4b30      	ldr	r3, [pc, #192]	; (9001277c <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xc4>)
900126ba:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
900126be:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
900126c0:	b08d      	sub	sp, #52	; 0x34
900126c2:	881b      	ldrh	r3, [r3, #0]
900126c4:	4604      	mov	r4, r0
900126c6:	460f      	mov	r7, r1
900126c8:	4293      	cmp	r3, r2
900126ca:	d954      	bls.n	90012776 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xbe>
900126cc:	4b2c      	ldr	r3, [pc, #176]	; (90012780 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xc8>)
900126ce:	6819      	ldr	r1, [r3, #0]
900126d0:	eb01 0342 	add.w	r3, r1, r2, lsl #1
900126d4:	f811 1012 	ldrb.w	r1, [r1, r2, lsl #1]
900126d8:	4a2a      	ldr	r2, [pc, #168]	; (90012784 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xcc>)
900126da:	6812      	ldr	r2, [r2, #0]
900126dc:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
900126e0:	2900      	cmp	r1, #0
900126e2:	d048      	beq.n	90012776 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xbe>
900126e4:	785a      	ldrb	r2, [r3, #1]
900126e6:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
900126ea:	f3c2 0801 	ubfx	r8, r2, #0, #2
900126ee:	f3c2 0281 	ubfx	r2, r2, #2, #2
900126f2:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
900126f6:	4b24      	ldr	r3, [pc, #144]	; (90012788 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xd0>)
900126f8:	f88d 2021 	strb.w	r2, [sp, #33]	; 0x21
900126fc:	681a      	ldr	r2, [r3, #0]
900126fe:	f890 5036 	ldrb.w	r5, [r0, #54]	; 0x36
90012702:	f9b0 c034 	ldrsh.w	ip, [r0, #52]	; 0x34
90012706:	f890 e038 	ldrb.w	lr, [r0, #56]	; 0x38
9001270a:	6b26      	ldr	r6, [r4, #48]	; 0x30
9001270c:	f890 0037 	ldrb.w	r0, [r0, #55]	; 0x37
90012710:	f892 3076 	ldrb.w	r3, [r2, #118]	; 0x76
90012714:	9107      	str	r1, [sp, #28]
90012716:	f88d 8020 	strb.w	r8, [sp, #32]
9001271a:	f88d e022 	strb.w	lr, [sp, #34]	; 0x22
9001271e:	9609      	str	r6, [sp, #36]	; 0x24
90012720:	f8ad c028 	strh.w	ip, [sp, #40]	; 0x28
90012724:	f88d 502a 	strb.w	r5, [sp, #42]	; 0x2a
90012728:	f88d 002b 	strb.w	r0, [sp, #43]	; 0x2b
9001272c:	b10b      	cbz	r3, 90012732 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0x7a>
9001272e:	6cd5      	ldr	r5, [r2, #76]	; 0x4c
90012730:	b905      	cbnz	r5, 90012734 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0x7c>
90012732:	6895      	ldr	r5, [r2, #8]
90012734:	ae05      	add	r6, sp, #20
90012736:	4621      	mov	r1, r4
90012738:	4630      	mov	r0, r6
9001273a:	f002 fe37 	bl	900153ac <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
9001273e:	4b13      	ldr	r3, [pc, #76]	; (9001278c <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xd4>)
90012740:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
90012742:	6818      	ldr	r0, [r3, #0]
90012744:	f7f3 f8c4 	bl	900058d0 <_ZNK8touchgfx5Texts7getTextEt>
90012748:	6823      	ldr	r3, [r4, #0]
9001274a:	4680      	mov	r8, r0
9001274c:	4620      	mov	r0, r4
9001274e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
90012750:	4798      	blx	r3
90012752:	6823      	ldr	r3, [r4, #0]
90012754:	4681      	mov	r9, r0
90012756:	4620      	mov	r0, r4
90012758:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
9001275c:	4798      	blx	r3
9001275e:	ab07      	add	r3, sp, #28
90012760:	f8cd 8004 	str.w	r8, [sp, #4]
90012764:	9300      	str	r3, [sp, #0]
90012766:	463b      	mov	r3, r7
90012768:	e9cd 9002 	strd	r9, r0, [sp, #8]
9001276c:	4628      	mov	r0, r5
9001276e:	e896 0006 	ldmia.w	r6, {r1, r2}
90012772:	f7f3 f85d 	bl	90005830 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
90012776:	b00d      	add	sp, #52	; 0x34
90012778:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
9001277c:	240262b8 	.word	0x240262b8
90012780:	240262b4 	.word	0x240262b4
90012784:	240262bc 	.word	0x240262bc
90012788:	24026264 	.word	0x24026264
9001278c:	240262c0 	.word	0x240262c0

90012790 <_ZN8touchgfx5ImageD1Ev>:
90012790:	4770      	bx	lr

90012792 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>:
90012792:	b570      	push	{r4, r5, r6, lr}
90012794:	880b      	ldrh	r3, [r1, #0]
90012796:	460d      	mov	r5, r1
90012798:	4604      	mov	r4, r0
9001279a:	84c3      	strh	r3, [r0, #38]	; 0x26
9001279c:	4608      	mov	r0, r1
9001279e:	f004 fd3f 	bl	90017220 <_ZNK8touchgfx6Bitmap8getWidthEv>
900127a2:	4606      	mov	r6, r0
900127a4:	4628      	mov	r0, r5
900127a6:	f004 fd6f 	bl	90017288 <_ZNK8touchgfx6Bitmap9getHeightEv>
900127aa:	6823      	ldr	r3, [r4, #0]
900127ac:	4605      	mov	r5, r0
900127ae:	4631      	mov	r1, r6
900127b0:	4620      	mov	r0, r4
900127b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
900127b4:	4798      	blx	r3
900127b6:	6823      	ldr	r3, [r4, #0]
900127b8:	4629      	mov	r1, r5
900127ba:	4620      	mov	r0, r4
900127bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
900127be:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
900127c2:	4718      	bx	r3

900127c4 <_ZN8touchgfx5ImageD0Ev>:
900127c4:	b510      	push	{r4, lr}
900127c6:	4604      	mov	r4, r0
900127c8:	212c      	movs	r1, #44	; 0x2c
900127ca:	f010 fb0a 	bl	90022de2 <_ZdlPvj>
900127ce:	4620      	mov	r0, r4
900127d0:	bd10      	pop	{r4, pc}

900127d2 <_ZNK8touchgfx5Image12getSolidRectEv>:
900127d2:	b510      	push	{r4, lr}
900127d4:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
900127d8:	4604      	mov	r4, r0
900127da:	2bff      	cmp	r3, #255	; 0xff
900127dc:	d006      	beq.n	900127ec <_ZNK8touchgfx5Image12getSolidRectEv+0x1a>
900127de:	2300      	movs	r3, #0
900127e0:	8003      	strh	r3, [r0, #0]
900127e2:	8043      	strh	r3, [r0, #2]
900127e4:	8083      	strh	r3, [r0, #4]
900127e6:	80c3      	strh	r3, [r0, #6]
900127e8:	4620      	mov	r0, r4
900127ea:	bd10      	pop	{r4, pc}
900127ec:	3126      	adds	r1, #38	; 0x26
900127ee:	f004 fd7f 	bl	900172f0 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
900127f2:	e7f9      	b.n	900127e8 <_ZNK8touchgfx5Image12getSolidRectEv+0x16>

900127f4 <_ZNK8touchgfx5Image17invalidateContentEv>:
900127f4:	f890 2028 	ldrb.w	r2, [r0, #40]	; 0x28
900127f8:	b12a      	cbz	r2, 90012806 <_ZNK8touchgfx5Image17invalidateContentEv+0x12>
900127fa:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
900127fe:	b112      	cbz	r2, 90012806 <_ZNK8touchgfx5Image17invalidateContentEv+0x12>
90012800:	6803      	ldr	r3, [r0, #0]
90012802:	695b      	ldr	r3, [r3, #20]
90012804:	4718      	bx	r3
90012806:	4770      	bx	lr

90012808 <_ZNK8touchgfx5Image4drawERKNS_4RectE>:
90012808:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
9001280c:	4604      	mov	r4, r0
9001280e:	b088      	sub	sp, #32
90012810:	2500      	movs	r5, #0
90012812:	460f      	mov	r7, r1
90012814:	f854 3b26 	ldr.w	r3, [r4], #38
90012818:	a904      	add	r1, sp, #16
9001281a:	4606      	mov	r6, r0
9001281c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9001281e:	e9cd 5504 	strd	r5, r5, [sp, #16]
90012822:	4798      	blx	r3
90012824:	4620      	mov	r0, r4
90012826:	f004 fcfb 	bl	90017220 <_ZNK8touchgfx6Bitmap8getWidthEv>
9001282a:	4680      	mov	r8, r0
9001282c:	4620      	mov	r0, r4
9001282e:	f004 fd2b 	bl	90017288 <_ZNK8touchgfx6Bitmap9getHeightEv>
90012832:	9506      	str	r5, [sp, #24]
90012834:	ad06      	add	r5, sp, #24
90012836:	f8ad 001e 	strh.w	r0, [sp, #30]
9001283a:	4639      	mov	r1, r7
9001283c:	f8ad 801c 	strh.w	r8, [sp, #28]
90012840:	4628      	mov	r0, r5
90012842:	f7fe fdc7 	bl	900113d4 <_ZN8touchgfx4RectaNERKS0_>
90012846:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
9001284a:	2b00      	cmp	r3, #0
9001284c:	dd19      	ble.n	90012882 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
9001284e:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
90012852:	2b00      	cmp	r3, #0
90012854:	dd15      	ble.n	90012882 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
90012856:	4b0c      	ldr	r3, [pc, #48]	; (90012888 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x80>)
90012858:	681b      	ldr	r3, [r3, #0]
9001285a:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
9001285e:	b10a      	cbz	r2, 90012864 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5c>
90012860:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
90012862:	b900      	cbnz	r0, 90012866 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5e>
90012864:	6898      	ldr	r0, [r3, #8]
90012866:	2701      	movs	r7, #1
90012868:	6801      	ldr	r1, [r0, #0]
9001286a:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
9001286e:	9702      	str	r7, [sp, #8]
90012870:	f896 6028 	ldrb.w	r6, [r6, #40]	; 0x28
90012874:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
90012878:	e9cd 5600 	strd	r5, r6, [sp]
9001287c:	688d      	ldr	r5, [r1, #8]
9001287e:	4621      	mov	r1, r4
90012880:	47a8      	blx	r5
90012882:	b008      	add	sp, #32
90012884:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
90012888:	24026264 	.word	0x24026264

9001288c <_ZN8touchgfx3LCD27supportDynamicBitmapDrawingENS_6Bitmap12BitmapFormatE>:
9001288c:	b510      	push	{r4, lr}
9001288e:	6803      	ldr	r3, [r0, #0]
90012890:	460c      	mov	r4, r1
90012892:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90012894:	4798      	blx	r3
90012896:	1b03      	subs	r3, r0, r4
90012898:	4258      	negs	r0, r3
9001289a:	4158      	adcs	r0, r3
9001289c:	bd10      	pop	{r4, pc}
	...

900128a0 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE>:
900128a0:	4b01      	ldr	r3, [pc, #4]	; (900128a8 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE+0x8>)
900128a2:	6019      	str	r1, [r3, #0]
900128a4:	4770      	bx	lr
900128a6:	bf00      	nop
900128a8:	2402626c 	.word	0x2402626c

900128ac <_ZN8touchgfx3LCD18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
900128ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
900128b0:	4696      	mov	lr, r2
900128b2:	b097      	sub	sp, #92	; 0x5c
900128b4:	4605      	mov	r5, r0
900128b6:	4614      	mov	r4, r2
900128b8:	460e      	mov	r6, r1
900128ba:	461f      	mov	r7, r3
900128bc:	f10d 0c1c 	add.w	ip, sp, #28
900128c0:	f8bd 8088 	ldrh.w	r8, [sp, #136]	; 0x88
900128c4:	f89d 908c 	ldrb.w	r9, [sp, #140]	; 0x8c
900128c8:	f8bd a090 	ldrh.w	sl, [sp, #144]	; 0x90
900128cc:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
900128d0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
900128d4:	f8de 3000 	ldr.w	r3, [lr]
900128d8:	f104 0e14 	add.w	lr, r4, #20
900128dc:	f8cc 3000 	str.w	r3, [ip]
900128e0:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
900128e4:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
900128e8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
900128ec:	f8de 3000 	ldr.w	r3, [lr]
900128f0:	f104 0e28 	add.w	lr, r4, #40	; 0x28
900128f4:	f8cc 3000 	str.w	r3, [ip]
900128f8:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
900128fc:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
90012900:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
90012904:	f8de 3000 	ldr.w	r3, [lr]
90012908:	4631      	mov	r1, r6
9001290a:	9a21      	ldr	r2, [sp, #132]	; 0x84
9001290c:	4628      	mov	r0, r5
9001290e:	f8cc 3000 	str.w	r3, [ip]
90012912:	682b      	ldr	r3, [r5, #0]
90012914:	9201      	str	r2, [sp, #4]
90012916:	9a20      	ldr	r2, [sp, #128]	; 0x80
90012918:	f8cd 8008 	str.w	r8, [sp, #8]
9001291c:	9200      	str	r2, [sp, #0]
9001291e:	aa07      	add	r2, sp, #28
90012920:	e9cd 9a03 	strd	r9, sl, [sp, #12]
90012924:	f8d3 b03c 	ldr.w	fp, [r3, #60]	; 0x3c
90012928:	463b      	mov	r3, r7
9001292a:	47d8      	blx	fp
9001292c:	46a6      	mov	lr, r4
9001292e:	f10d 0c1c 	add.w	ip, sp, #28
90012932:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
90012936:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
9001293a:	f8de 3000 	ldr.w	r3, [lr]
9001293e:	f104 0e28 	add.w	lr, r4, #40	; 0x28
90012942:	343c      	adds	r4, #60	; 0x3c
90012944:	f8cc 3000 	str.w	r3, [ip]
90012948:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
9001294c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
90012950:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
90012954:	f8de 3000 	ldr.w	r3, [lr]
90012958:	f8cc 3000 	str.w	r3, [ip]
9001295c:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
90012960:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
90012962:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
90012966:	6823      	ldr	r3, [r4, #0]
90012968:	4631      	mov	r1, r6
9001296a:	4628      	mov	r0, r5
9001296c:	f8cc 3000 	str.w	r3, [ip]
90012970:	682b      	ldr	r3, [r5, #0]
90012972:	e9cd 9a03 	strd	r9, sl, [sp, #12]
90012976:	9a21      	ldr	r2, [sp, #132]	; 0x84
90012978:	f8cd 8008 	str.w	r8, [sp, #8]
9001297c:	9201      	str	r2, [sp, #4]
9001297e:	9a20      	ldr	r2, [sp, #128]	; 0x80
90012980:	9200      	str	r2, [sp, #0]
90012982:	aa07      	add	r2, sp, #28
90012984:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
90012986:	463b      	mov	r3, r7
90012988:	47a0      	blx	r4
9001298a:	b017      	add	sp, #92	; 0x5c
9001298c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

90012990 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht>:
90012990:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90012994:	b08d      	sub	sp, #52	; 0x34
90012996:	4688      	mov	r8, r1
90012998:	f8d3 c000 	ldr.w	ip, [r3]
9001299c:	9916      	ldr	r1, [sp, #88]	; 0x58
9001299e:	f8bd 4070 	ldrh.w	r4, [sp, #112]	; 0x70
900129a2:	680f      	ldr	r7, [r1, #0]
900129a4:	ed92 4a09 	vldr	s8, [r2, #36]	; 0x24
900129a8:	eba7 070c 	sub.w	r7, r7, ip
900129ac:	edd2 4a0b 	vldr	s9, [r2, #44]	; 0x2c
900129b0:	edd3 6a07 	vldr	s13, [r3, #28]
900129b4:	42bc      	cmp	r4, r7
900129b6:	9918      	ldr	r1, [sp, #96]	; 0x60
900129b8:	f8dd a064 	ldr.w	sl, [sp, #100]	; 0x64
900129bc:	bfa8      	it	ge
900129be:	463c      	movge	r4, r7
900129c0:	f9b1 9000 	ldrsh.w	r9, [r1]
900129c4:	f9ba 1000 	ldrsh.w	r1, [sl]
900129c8:	ee07 4a90 	vmov	s15, r4
900129cc:	eb09 0e0c 	add.w	lr, r9, ip
900129d0:	edd3 1a0a 	vldr	s3, [r3, #40]	; 0x28
900129d4:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
900129d8:	edd2 7a0d 	vldr	s15, [r2, #52]	; 0x34
900129dc:	ed93 2a0d 	vldr	s4, [r3, #52]	; 0x34
900129e0:	4571      	cmp	r1, lr
900129e2:	ee25 4a04 	vmul.f32	s8, s10, s8
900129e6:	ee65 4a24 	vmul.f32	s9, s10, s9
900129ea:	ee25 5a27 	vmul.f32	s10, s10, s15
900129ee:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
900129f2:	ee71 0aa4 	vadd.f32	s1, s3, s9
900129f6:	ee32 1a05 	vadd.f32	s2, s4, s10
900129fa:	ee87 7aa6 	vdiv.f32	s14, s15, s13
900129fe:	ee36 0a84 	vadd.f32	s0, s13, s8
90012a02:	ee61 1a87 	vmul.f32	s3, s3, s14
90012a06:	ee22 2a07 	vmul.f32	s4, s4, s14
90012a0a:	f340 808c 	ble.w	90012b26 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x196>
90012a0e:	eba1 060e 	sub.w	r6, r1, lr
90012a12:	fb96 f5f4 	sdiv	r5, r6, r4
90012a16:	ee07 5a10 	vmov	s14, r5
90012a1a:	2d00      	cmp	r5, #0
90012a1c:	fb04 6615 	mls	r6, r4, r5, r6
90012a20:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
90012a24:	eea7 0a04 	vfma.f32	s0, s14, s8
90012a28:	eee7 0a24 	vfma.f32	s1, s14, s9
90012a2c:	eea7 1a05 	vfma.f32	s2, s14, s10
90012a30:	dd12      	ble.n	90012a58 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xc8>
90012a32:	ee70 6a44 	vsub.f32	s13, s0, s8
90012a36:	ee70 1ae4 	vsub.f32	s3, s1, s9
90012a3a:	ee31 2a45 	vsub.f32	s4, s2, s10
90012a3e:	eef5 6a40 	vcmp.f32	s13, #0.0
90012a42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
90012a46:	bf14      	ite	ne
90012a48:	ee87 7aa6 	vdivne.f32	s14, s15, s13
90012a4c:	eeb0 7a67 	vmoveq.f32	s14, s15
90012a50:	ee61 1a87 	vmul.f32	s3, s3, s14
90012a54:	ee22 2a07 	vmul.f32	s4, s4, s14
90012a58:	fb05 f204 	mul.w	r2, r5, r4
90012a5c:	1abf      	subs	r7, r7, r2
90012a5e:	4494      	add	ip, r2
90012a60:	f8ba 2004 	ldrh.w	r2, [sl, #4]
90012a64:	4411      	add	r1, r2
90012a66:	eb09 020c 	add.w	r2, r9, ip
90012a6a:	b209      	sxth	r1, r1
90012a6c:	443a      	add	r2, r7
90012a6e:	428a      	cmp	r2, r1
90012a70:	bfc4      	itt	gt
90012a72:	eba1 0209 	subgt.w	r2, r1, r9
90012a76:	eba2 070c 	subgt.w	r7, r2, ip
90012a7a:	2f00      	cmp	r7, #0
90012a7c:	dd50      	ble.n	90012b20 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x190>
90012a7e:	fb97 f1f4 	sdiv	r1, r7, r4
90012a82:	fb04 7211 	mls	r2, r4, r1, r7
90012a86:	b90a      	cbnz	r2, 90012a8c <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xfc>
90012a88:	3901      	subs	r1, #1
90012a8a:	4622      	mov	r2, r4
90012a8c:	eec7 3a80 	vdiv.f32	s7, s15, s0
90012a90:	6840      	ldr	r0, [r0, #4]
90012a92:	f89d b06c 	ldrb.w	fp, [sp, #108]	; 0x6c
90012a96:	44b6      	add	lr, r6
90012a98:	f8d0 a000 	ldr.w	sl, [r0]
90012a9c:	2900      	cmp	r1, #0
90012a9e:	bfcc      	ite	gt
90012aa0:	46a1      	movgt	r9, r4
90012aa2:	4691      	movle	r9, r2
90012aa4:	900b      	str	r0, [sp, #44]	; 0x2c
90012aa6:	9817      	ldr	r0, [sp, #92]	; 0x5c
90012aa8:	fb04 e505 	mla	r5, r4, r5, lr
90012aac:	eef0 6a42 	vmov.f32	s13, s4
90012ab0:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
90012ab4:	9008      	str	r0, [sp, #32]
90012ab6:	eeb0 7a61 	vmov.f32	s14, s3
90012aba:	9818      	ldr	r0, [sp, #96]	; 0x60
90012abc:	695b      	ldr	r3, [r3, #20]
90012abe:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
90012ac2:	f9b0 b002 	ldrsh.w	fp, [r0, #2]
90012ac6:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
90012aca:	980b      	ldr	r0, [sp, #44]	; 0x2c
90012acc:	445b      	add	r3, fp
90012ace:	9307      	str	r3, [sp, #28]
90012ad0:	ee16 3a90 	vmov	r3, s13
90012ad4:	e9cd 8505 	strd	r8, r5, [sp, #20]
90012ad8:	ee60 2aa3 	vmul.f32	s5, s1, s7
90012adc:	ee21 3a23 	vmul.f32	s6, s2, s7
90012ae0:	ee72 7ae1 	vsub.f32	s15, s5, s3
90012ae4:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
90012ae8:	ee17 7a90 	vmov	r7, s15
90012aec:	ee73 7a42 	vsub.f32	s15, s6, s4
90012af0:	fb97 f7f4 	sdiv	r7, r7, r4
90012af4:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
90012af8:	ee17 ca90 	vmov	ip, s15
90012afc:	fb9c fcf4 	sdiv	ip, ip, r4
90012b00:	fb0c 3306 	mla	r3, ip, r6, r3
90012b04:	9302      	str	r3, [sp, #8]
90012b06:	ee17 3a10 	vmov	r3, s14
90012b0a:	e9cd 7c03 	strd	r7, ip, [sp, #12]
90012b0e:	fb07 3706 	mla	r7, r7, r6, r3
90012b12:	eba9 0306 	sub.w	r3, r9, r6
90012b16:	e9cd 4700 	strd	r4, r7, [sp]
90012b1a:	f8da 4008 	ldr.w	r4, [sl, #8]
90012b1e:	47a0      	blx	r4
90012b20:	b00d      	add	sp, #52	; 0x34
90012b22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90012b26:	2500      	movs	r5, #0
90012b28:	462e      	mov	r6, r5
90012b2a:	e799      	b.n	90012a60 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd0>

90012b2c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
90012b2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90012b30:	b0db      	sub	sp, #364	; 0x16c
90012b32:	461d      	mov	r5, r3
90012b34:	4614      	mov	r4, r2
90012b36:	f8bd 3198 	ldrh.w	r3, [sp, #408]	; 0x198
90012b3a:	910f      	str	r1, [sp, #60]	; 0x3c
90012b3c:	4629      	mov	r1, r5
90012b3e:	930a      	str	r3, [sp, #40]	; 0x28
90012b40:	f89d 319c 	ldrb.w	r3, [sp, #412]	; 0x19c
90012b44:	9009      	str	r0, [sp, #36]	; 0x24
90012b46:	930b      	str	r3, [sp, #44]	; 0x2c
90012b48:	f8bd 31a0 	ldrh.w	r3, [sp, #416]	; 0x1a0
90012b4c:	f8dd b194 	ldr.w	fp, [sp, #404]	; 0x194
90012b50:	9310      	str	r3, [sp, #64]	; 0x40
90012b52:	6803      	ldr	r3, [r0, #0]
90012b54:	6c5f      	ldr	r7, [r3, #68]	; 0x44
90012b56:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
90012b5a:	47b8      	blx	r7
90012b5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
90012b5e:	6058      	str	r0, [r3, #4]
90012b60:	2800      	cmp	r0, #0
90012b62:	f000 83a1 	beq.w	900132a8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
90012b66:	682b      	ldr	r3, [r5, #0]
90012b68:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
90012b6c:	ed94 7a02 	vldr	s14, [r4, #8]
90012b70:	9314      	str	r3, [sp, #80]	; 0x50
90012b72:	686b      	ldr	r3, [r5, #4]
90012b74:	eeb4 7ae7 	vcmpe.f32	s14, s15
90012b78:	9315      	str	r3, [sp, #84]	; 0x54
90012b7a:	4bc1      	ldr	r3, [pc, #772]	; (90012e80 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x354>)
90012b7c:	7819      	ldrb	r1, [r3, #0]
90012b7e:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
90012b82:	2900      	cmp	r1, #0
90012b84:	bf16      	itet	ne
90012b86:	4619      	movne	r1, r3
90012b88:	4611      	moveq	r1, r2
90012b8a:	4613      	movne	r3, r2
90012b8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
90012b90:	9116      	str	r1, [sp, #88]	; 0x58
90012b92:	e9cd 3217 	strd	r3, r2, [sp, #92]	; 0x5c
90012b96:	f240 8387 	bls.w	900132a8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
90012b9a:	ed94 7a07 	vldr	s14, [r4, #28]
90012b9e:	eeb4 7ae7 	vcmpe.f32	s14, s15
90012ba2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
90012ba6:	f240 837f 	bls.w	900132a8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
90012baa:	ed94 7a0c 	vldr	s14, [r4, #48]	; 0x30
90012bae:	eeb4 7ae7 	vcmpe.f32	s14, s15
90012bb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
90012bb6:	f240 8377 	bls.w	900132a8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
90012bba:	6822      	ldr	r2, [r4, #0]
90012bbc:	4bb1      	ldr	r3, [pc, #708]	; (90012e84 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x358>)
90012bbe:	429a      	cmp	r2, r3
90012bc0:	f2c0 8372 	blt.w	900132a8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
90012bc4:	49b0      	ldr	r1, [pc, #704]	; (90012e88 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x35c>)
90012bc6:	6963      	ldr	r3, [r4, #20]
90012bc8:	428a      	cmp	r2, r1
90012bca:	f300 836d 	bgt.w	900132a8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
90012bce:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
90012bd2:	48ae      	ldr	r0, [pc, #696]	; (90012e8c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x360>)
90012bd4:	33ff      	adds	r3, #255	; 0xff
90012bd6:	4283      	cmp	r3, r0
90012bd8:	f200 8366 	bhi.w	900132a8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
90012bdc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
90012bde:	4dac      	ldr	r5, [pc, #688]	; (90012e90 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x364>)
90012be0:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
90012be4:	33ff      	adds	r3, #255	; 0xff
90012be6:	42ab      	cmp	r3, r5
90012be8:	f200 835e 	bhi.w	900132a8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
90012bec:	6862      	ldr	r2, [r4, #4]
90012bee:	f502 331c 	add.w	r3, r2, #159744	; 0x27000
90012bf2:	33ff      	adds	r3, #255	; 0xff
90012bf4:	4283      	cmp	r3, r0
90012bf6:	f200 8357 	bhi.w	900132a8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
90012bfa:	69a1      	ldr	r1, [r4, #24]
90012bfc:	f501 331c 	add.w	r3, r1, #159744	; 0x27000
90012c00:	33ff      	adds	r3, #255	; 0xff
90012c02:	4283      	cmp	r3, r0
90012c04:	f200 8350 	bhi.w	900132a8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
90012c08:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
90012c0a:	f503 301c 	add.w	r0, r3, #159744	; 0x27000
90012c0e:	30ff      	adds	r0, #255	; 0xff
90012c10:	42a8      	cmp	r0, r5
90012c12:	f200 8349 	bhi.w	900132a8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
90012c16:	428a      	cmp	r2, r1
90012c18:	f280 8110 	bge.w	90012e3c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x310>
90012c1c:	429a      	cmp	r2, r3
90012c1e:	f300 8119 	bgt.w	90012e54 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x328>
90012c22:	4299      	cmp	r1, r3
90012c24:	f280 811d 	bge.w	90012e62 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x336>
90012c28:	2502      	movs	r5, #2
90012c2a:	2701      	movs	r7, #1
90012c2c:	46a9      	mov	r9, r5
90012c2e:	46b8      	mov	r8, r7
90012c30:	f04f 0a00 	mov.w	sl, #0
90012c34:	4621      	mov	r1, r4
90012c36:	a849      	add	r0, sp, #292	; 0x124
90012c38:	f003 fcaa 	bl	90016590 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>
90012c3c:	4622      	mov	r2, r4
90012c3e:	4653      	mov	r3, sl
90012c40:	a949      	add	r1, sp, #292	; 0x124
90012c42:	f8cd 9000 	str.w	r9, [sp]
90012c46:	a819      	add	r0, sp, #100	; 0x64
90012c48:	f003 fdd2 	bl	900167f0 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
90012c4c:	4622      	mov	r2, r4
90012c4e:	4653      	mov	r3, sl
90012c50:	a949      	add	r1, sp, #292	; 0x124
90012c52:	f8cd 8000 	str.w	r8, [sp]
90012c56:	a829      	add	r0, sp, #164	; 0xa4
90012c58:	f003 fdca 	bl	900167f0 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
90012c5c:	4643      	mov	r3, r8
90012c5e:	4622      	mov	r2, r4
90012c60:	a949      	add	r1, sp, #292	; 0x124
90012c62:	f8cd 9000 	str.w	r9, [sp]
90012c66:	a839      	add	r0, sp, #228	; 0xe4
90012c68:	f003 fdc2 	bl	900167f0 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
90012c6c:	42af      	cmp	r7, r5
90012c6e:	af12      	add	r7, sp, #72	; 0x48
90012c70:	bfb7      	itett	lt
90012c72:	2300      	movlt	r3, #0
90012c74:	2301      	movge	r3, #1
90012c76:	ad29      	addlt	r5, sp, #164	; 0xa4
90012c78:	ac19      	addlt	r4, sp, #100	; 0x64
90012c7a:	bfb1      	iteee	lt
90012c7c:	930e      	strlt	r3, [sp, #56]	; 0x38
90012c7e:	ad19      	addge	r5, sp, #100	; 0x64
90012c80:	930e      	strge	r3, [sp, #56]	; 0x38
90012c82:	ac29      	addge	r4, sp, #164	; 0xa4
90012c84:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
90012c86:	e893 0003 	ldmia.w	r3, {r0, r1}
90012c8a:	e887 0003 	stmia.w	r7, {r0, r1}
90012c8e:	b928      	cbnz	r0, 90012c9c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x170>
90012c90:	4b80      	ldr	r3, [pc, #512]	; (90012e94 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x368>)
90012c92:	6818      	ldr	r0, [r3, #0]
90012c94:	6803      	ldr	r3, [r0, #0]
90012c96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
90012c98:	4798      	blx	r3
90012c9a:	6038      	str	r0, [r7, #0]
90012c9c:	9b64      	ldr	r3, [sp, #400]	; 0x190
90012c9e:	f8bb 0006 	ldrh.w	r0, [fp, #6]
90012ca2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
90012ca6:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
90012ca8:	930c      	str	r3, [sp, #48]	; 0x30
90012caa:	990c      	ldr	r1, [sp, #48]	; 0x30
90012cac:	6963      	ldr	r3, [r4, #20]
90012cae:	440b      	add	r3, r1
90012cb0:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
90012cb4:	4408      	add	r0, r1
90012cb6:	b200      	sxth	r0, r0
90012cb8:	4283      	cmp	r3, r0
90012cba:	900d      	str	r0, [sp, #52]	; 0x34
90012cbc:	f280 80dd 	bge.w	90012e7a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x34e>
90012cc0:	428b      	cmp	r3, r1
90012cc2:	da08      	bge.n	90012cd6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
90012cc4:	2a00      	cmp	r2, #0
90012cc6:	dd06      	ble.n	90012cd6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
90012cc8:	1acb      	subs	r3, r1, r3
90012cca:	429a      	cmp	r2, r3
90012ccc:	f2c0 80e4 	blt.w	90012e98 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36c>
90012cd0:	2b00      	cmp	r3, #0
90012cd2:	f300 80e2 	bgt.w	90012e9a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36e>
90012cd6:	6967      	ldr	r7, [r4, #20]
90012cd8:	f10d 0850 	add.w	r8, sp, #80	; 0x50
90012cdc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
90012cde:	443b      	add	r3, r7
90012ce0:	461f      	mov	r7, r3
90012ce2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
90012ce4:	1bdf      	subs	r7, r3, r7
90012ce6:	4297      	cmp	r7, r2
90012ce8:	bfa8      	it	ge
90012cea:	4617      	movge	r7, r2
90012cec:	2f00      	cmp	r7, #0
90012cee:	f340 8166 	ble.w	90012fbe <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x492>
90012cf2:	9b64      	ldr	r3, [sp, #400]	; 0x190
90012cf4:	6829      	ldr	r1, [r5, #0]
90012cf6:	f9b3 2000 	ldrsh.w	r2, [r3]
90012cfa:	f9bb 3000 	ldrsh.w	r3, [fp]
90012cfe:	4411      	add	r1, r2
90012d00:	6820      	ldr	r0, [r4, #0]
90012d02:	4299      	cmp	r1, r3
90012d04:	dd1a      	ble.n	90012d3c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
90012d06:	f8bb 1004 	ldrh.w	r1, [fp, #4]
90012d0a:	4402      	add	r2, r0
90012d0c:	440b      	add	r3, r1
90012d0e:	b21b      	sxth	r3, r3
90012d10:	429a      	cmp	r2, r3
90012d12:	dc13      	bgt.n	90012d3c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
90012d14:	9a10      	ldr	r2, [sp, #64]	; 0x40
90012d16:	a912      	add	r1, sp, #72	; 0x48
90012d18:	9b09      	ldr	r3, [sp, #36]	; 0x24
90012d1a:	9809      	ldr	r0, [sp, #36]	; 0x24
90012d1c:	681b      	ldr	r3, [r3, #0]
90012d1e:	9206      	str	r2, [sp, #24]
90012d20:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
90012d22:	9500      	str	r5, [sp, #0]
90012d24:	9205      	str	r2, [sp, #20]
90012d26:	9a0a      	ldr	r2, [sp, #40]	; 0x28
90012d28:	e9cd b203 	strd	fp, r2, [sp, #12]
90012d2c:	9a64      	ldr	r2, [sp, #400]	; 0x190
90012d2e:	e9cd 8201 	strd	r8, r2, [sp, #4]
90012d32:	aa49      	add	r2, sp, #292	; 0x124
90012d34:	f8d3 9048 	ldr.w	r9, [r3, #72]	; 0x48
90012d38:	4623      	mov	r3, r4
90012d3a:	47c8      	blx	r9
90012d3c:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
90012d40:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
90012d44:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
90012d48:	ee37 7a27 	vadd.f32	s14, s14, s15
90012d4c:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
90012d50:	68a1      	ldr	r1, [r4, #8]
90012d52:	ee77 7aa6 	vadd.f32	s15, s15, s13
90012d56:	ed94 6a08 	vldr	s12, [r4, #32]
90012d5a:	edd4 6a07 	vldr	s13, [r4, #28]
90012d5e:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
90012d62:	ee76 6a86 	vadd.f32	s13, s13, s12
90012d66:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
90012d6a:	e9d4 2300 	ldrd	r2, r3, [r4]
90012d6e:	edc4 6a07 	vstr	s13, [r4, #28]
90012d72:	441a      	add	r2, r3
90012d74:	6963      	ldr	r3, [r4, #20]
90012d76:	3301      	adds	r3, #1
90012d78:	6022      	str	r2, [r4, #0]
90012d7a:	6163      	str	r3, [r4, #20]
90012d7c:	69a3      	ldr	r3, [r4, #24]
90012d7e:	3b01      	subs	r3, #1
90012d80:	61a3      	str	r3, [r4, #24]
90012d82:	6923      	ldr	r3, [r4, #16]
90012d84:	440b      	add	r3, r1
90012d86:	68e1      	ldr	r1, [r4, #12]
90012d88:	428b      	cmp	r3, r1
90012d8a:	6123      	str	r3, [r4, #16]
90012d8c:	db15      	blt.n	90012dba <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x28e>
90012d8e:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
90012d92:	3201      	adds	r2, #1
90012d94:	1a5b      	subs	r3, r3, r1
90012d96:	ee76 6a26 	vadd.f32	s13, s12, s13
90012d9a:	6022      	str	r2, [r4, #0]
90012d9c:	6123      	str	r3, [r4, #16]
90012d9e:	edc4 6a07 	vstr	s13, [r4, #28]
90012da2:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
90012da6:	ee36 7a87 	vadd.f32	s14, s13, s14
90012daa:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
90012dae:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
90012db2:	ee77 7a27 	vadd.f32	s15, s14, s15
90012db6:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
90012dba:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
90012dbe:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
90012dc2:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
90012dc6:	ee37 7a27 	vadd.f32	s14, s14, s15
90012dca:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
90012dce:	68a9      	ldr	r1, [r5, #8]
90012dd0:	ee77 7aa6 	vadd.f32	s15, s15, s13
90012dd4:	ed95 6a08 	vldr	s12, [r5, #32]
90012dd8:	edd5 6a07 	vldr	s13, [r5, #28]
90012ddc:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
90012de0:	ee76 6a86 	vadd.f32	s13, s13, s12
90012de4:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
90012de8:	e9d5 2300 	ldrd	r2, r3, [r5]
90012dec:	edc5 6a07 	vstr	s13, [r5, #28]
90012df0:	441a      	add	r2, r3
90012df2:	696b      	ldr	r3, [r5, #20]
90012df4:	3301      	adds	r3, #1
90012df6:	602a      	str	r2, [r5, #0]
90012df8:	616b      	str	r3, [r5, #20]
90012dfa:	69ab      	ldr	r3, [r5, #24]
90012dfc:	3b01      	subs	r3, #1
90012dfe:	61ab      	str	r3, [r5, #24]
90012e00:	692b      	ldr	r3, [r5, #16]
90012e02:	440b      	add	r3, r1
90012e04:	68e9      	ldr	r1, [r5, #12]
90012e06:	428b      	cmp	r3, r1
90012e08:	612b      	str	r3, [r5, #16]
90012e0a:	db15      	blt.n	90012e38 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x30c>
90012e0c:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
90012e10:	3201      	adds	r2, #1
90012e12:	1a5b      	subs	r3, r3, r1
90012e14:	ee76 6a26 	vadd.f32	s13, s12, s13
90012e18:	602a      	str	r2, [r5, #0]
90012e1a:	612b      	str	r3, [r5, #16]
90012e1c:	edc5 6a07 	vstr	s13, [r5, #28]
90012e20:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
90012e24:	ee36 7a87 	vadd.f32	s14, s13, s14
90012e28:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
90012e2c:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
90012e30:	ee77 7a27 	vadd.f32	s15, s14, s15
90012e34:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
90012e38:	3f01      	subs	r7, #1
90012e3a:	e757      	b.n	90012cec <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1c0>
90012e3c:	4299      	cmp	r1, r3
90012e3e:	dc13      	bgt.n	90012e68 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x33c>
90012e40:	429a      	cmp	r2, r3
90012e42:	da14      	bge.n	90012e6e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x342>
90012e44:	2502      	movs	r5, #2
90012e46:	2703      	movs	r7, #3
90012e48:	f04f 0800 	mov.w	r8, #0
90012e4c:	46a9      	mov	r9, r5
90012e4e:	f04f 0a01 	mov.w	sl, #1
90012e52:	e6ef      	b.n	90012c34 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
90012e54:	2501      	movs	r5, #1
90012e56:	2700      	movs	r7, #0
90012e58:	46a9      	mov	r9, r5
90012e5a:	46b8      	mov	r8, r7
90012e5c:	f04f 0a02 	mov.w	sl, #2
90012e60:	e6e8      	b.n	90012c34 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
90012e62:	2501      	movs	r5, #1
90012e64:	2702      	movs	r7, #2
90012e66:	e6e1      	b.n	90012c2c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x100>
90012e68:	2500      	movs	r5, #0
90012e6a:	2701      	movs	r7, #1
90012e6c:	e7f4      	b.n	90012e58 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x32c>
90012e6e:	2702      	movs	r7, #2
90012e70:	2503      	movs	r5, #3
90012e72:	f04f 0900 	mov.w	r9, #0
90012e76:	46b8      	mov	r8, r7
90012e78:	e7e9      	b.n	90012e4e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x322>
90012e7a:	4613      	mov	r3, r2
90012e7c:	e728      	b.n	90012cd0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1a4>
90012e7e:	bf00      	nop
90012e80:	2402625c 	.word	0x2402625c
90012e84:	fffd8f01 	.word	0xfffd8f01
90012e88:	00027100 	.word	0x00027100
90012e8c:	0004e1ff 	.word	0x0004e1ff
90012e90:	0004e1fe 	.word	0x0004e1fe
90012e94:	24026264 	.word	0x24026264
90012e98:	4613      	mov	r3, r2
90012e9a:	992b      	ldr	r1, [sp, #172]	; 0xac
90012e9c:	469e      	mov	lr, r3
90012e9e:	9f2e      	ldr	r7, [sp, #184]	; 0xb8
90012ea0:	469c      	mov	ip, r3
90012ea2:	9111      	str	r1, [sp, #68]	; 0x44
90012ea4:	f04f 0900 	mov.w	r9, #0
90012ea8:	eddd 4a34 	vldr	s9, [sp, #208]	; 0xd0
90012eac:	ed9d 7a33 	vldr	s14, [sp, #204]	; 0xcc
90012eb0:	ed9d 4a37 	vldr	s8, [sp, #220]	; 0xdc
90012eb4:	eddd 7a36 	vldr	s15, [sp, #216]	; 0xd8
90012eb8:	eddd 3a31 	vldr	s7, [sp, #196]	; 0xc4
90012ebc:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
90012ec0:	ed9d 5a32 	vldr	s10, [sp, #200]	; 0xc8
90012ec4:	eddd 5a35 	vldr	s11, [sp, #212]	; 0xd4
90012ec8:	ed9d 6a38 	vldr	s12, [sp, #224]	; 0xe0
90012ecc:	e9dd 0a29 	ldrd	r0, sl, [sp, #164]	; 0xa4
90012ed0:	e9dd 812c 	ldrd	r8, r1, [sp, #176]	; 0xb0
90012ed4:	f1bc 0f00 	cmp.w	ip, #0
90012ed8:	d147      	bne.n	90012f6a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x43e>
90012eda:	eb03 0c07 	add.w	ip, r3, r7
90012ede:	1ad7      	subs	r7, r2, r3
90012ee0:	f1b9 0f00 	cmp.w	r9, #0
90012ee4:	d009      	beq.n	90012efa <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3ce>
90012ee6:	9029      	str	r0, [sp, #164]	; 0xa4
90012ee8:	ed8d 7a33 	vstr	s14, [sp, #204]	; 0xcc
90012eec:	edcd 7a36 	vstr	s15, [sp, #216]	; 0xd8
90012ef0:	edcd 6a30 	vstr	s13, [sp, #192]	; 0xc0
90012ef4:	912d      	str	r1, [sp, #180]	; 0xb4
90012ef6:	e9cd c72e 	strd	ip, r7, [sp, #184]	; 0xb8
90012efa:	991b      	ldr	r1, [sp, #108]	; 0x6c
90012efc:	f04f 0800 	mov.w	r8, #0
90012f00:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
90012f04:	9111      	str	r1, [sp, #68]	; 0x44
90012f06:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
90012f0a:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
90012f0e:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
90012f12:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
90012f16:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
90012f1a:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
90012f1e:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
90012f22:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
90012f26:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
90012f2a:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
90012f2e:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
90012f32:	f1be 0f00 	cmp.w	lr, #0
90012f36:	d031      	beq.n	90012f9c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x470>
90012f38:	9e11      	ldr	r6, [sp, #68]	; 0x44
90012f3a:	4450      	add	r0, sl
90012f3c:	ee76 6aa4 	vadd.f32	s13, s13, s9
90012f40:	4431      	add	r1, r6
90012f42:	ee37 7a04 	vadd.f32	s14, s14, s8
90012f46:	ee77 7aa3 	vadd.f32	s15, s15, s7
90012f4a:	4549      	cmp	r1, r9
90012f4c:	db08      	blt.n	90012f60 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x434>
90012f4e:	ee77 7a85 	vadd.f32	s15, s15, s10
90012f52:	3001      	adds	r0, #1
90012f54:	ee76 6aa5 	vadd.f32	s13, s13, s11
90012f58:	eba1 0109 	sub.w	r1, r1, r9
90012f5c:	ee37 7a06 	vadd.f32	s14, s14, s12
90012f60:	f10e 3eff 	add.w	lr, lr, #4294967295
90012f64:	f04f 0801 	mov.w	r8, #1
90012f68:	e7e3      	b.n	90012f32 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x406>
90012f6a:	9e11      	ldr	r6, [sp, #68]	; 0x44
90012f6c:	4450      	add	r0, sl
90012f6e:	ee37 7a24 	vadd.f32	s14, s14, s9
90012f72:	4431      	add	r1, r6
90012f74:	ee77 7a84 	vadd.f32	s15, s15, s8
90012f78:	ee76 6aa3 	vadd.f32	s13, s13, s7
90012f7c:	4541      	cmp	r1, r8
90012f7e:	db08      	blt.n	90012f92 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x466>
90012f80:	ee76 6a85 	vadd.f32	s13, s13, s10
90012f84:	3001      	adds	r0, #1
90012f86:	ee37 7a25 	vadd.f32	s14, s14, s11
90012f8a:	eba1 0108 	sub.w	r1, r1, r8
90012f8e:	ee77 7a86 	vadd.f32	s15, s15, s12
90012f92:	f10c 3cff 	add.w	ip, ip, #4294967295
90012f96:	f04f 0901 	mov.w	r9, #1
90012f9a:	e79b      	b.n	90012ed4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3a8>
90012f9c:	449c      	add	ip, r3
90012f9e:	1aff      	subs	r7, r7, r3
90012fa0:	f1b8 0f00 	cmp.w	r8, #0
90012fa4:	d009      	beq.n	90012fba <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x48e>
90012fa6:	9019      	str	r0, [sp, #100]	; 0x64
90012fa8:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
90012fac:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
90012fb0:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
90012fb4:	911d      	str	r1, [sp, #116]	; 0x74
90012fb6:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
90012fba:	1ad2      	subs	r2, r2, r3
90012fbc:	e68b      	b.n	90012cd6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
90012fbe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
90012fc0:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
90012fc2:	2b00      	cmp	r3, #0
90012fc4:	f000 80d1 	beq.w	9001316a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63e>
90012fc8:	ad19      	add	r5, sp, #100	; 0x64
90012fca:	ac39      	add	r4, sp, #228	; 0xe4
90012fcc:	9b64      	ldr	r3, [sp, #400]	; 0x190
90012fce:	f8bb 0006 	ldrh.w	r0, [fp, #6]
90012fd2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
90012fd6:	930c      	str	r3, [sp, #48]	; 0x30
90012fd8:	990c      	ldr	r1, [sp, #48]	; 0x30
90012fda:	6963      	ldr	r3, [r4, #20]
90012fdc:	440b      	add	r3, r1
90012fde:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
90012fe2:	4408      	add	r0, r1
90012fe4:	b200      	sxth	r0, r0
90012fe6:	4283      	cmp	r3, r0
90012fe8:	900d      	str	r0, [sp, #52]	; 0x34
90012fea:	f280 80c1 	bge.w	90013170 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x644>
90012fee:	428b      	cmp	r3, r1
90012ff0:	da08      	bge.n	90013004 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
90012ff2:	2a00      	cmp	r2, #0
90012ff4:	dd06      	ble.n	90013004 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
90012ff6:	1acb      	subs	r3, r1, r3
90012ff8:	429a      	cmp	r2, r3
90012ffa:	f2c0 80bb 	blt.w	90013174 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x648>
90012ffe:	2b00      	cmp	r3, #0
90013000:	f300 80b9 	bgt.w	90013176 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x64a>
90013004:	6967      	ldr	r7, [r4, #20]
90013006:	f10d 0850 	add.w	r8, sp, #80	; 0x50
9001300a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
9001300c:	443b      	add	r3, r7
9001300e:	461f      	mov	r7, r3
90013010:	9b0d      	ldr	r3, [sp, #52]	; 0x34
90013012:	1bdf      	subs	r7, r3, r7
90013014:	4297      	cmp	r7, r2
90013016:	bfa8      	it	ge
90013018:	4617      	movge	r7, r2
9001301a:	2f00      	cmp	r7, #0
9001301c:	f340 813c 	ble.w	90013298 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x76c>
90013020:	9b64      	ldr	r3, [sp, #400]	; 0x190
90013022:	6829      	ldr	r1, [r5, #0]
90013024:	f9b3 2000 	ldrsh.w	r2, [r3]
90013028:	f9bb 3000 	ldrsh.w	r3, [fp]
9001302c:	4411      	add	r1, r2
9001302e:	6820      	ldr	r0, [r4, #0]
90013030:	4299      	cmp	r1, r3
90013032:	dd1a      	ble.n	9001306a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
90013034:	f8bb 1004 	ldrh.w	r1, [fp, #4]
90013038:	4402      	add	r2, r0
9001303a:	440b      	add	r3, r1
9001303c:	b21b      	sxth	r3, r3
9001303e:	429a      	cmp	r2, r3
90013040:	dc13      	bgt.n	9001306a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
90013042:	9a10      	ldr	r2, [sp, #64]	; 0x40
90013044:	a912      	add	r1, sp, #72	; 0x48
90013046:	9b09      	ldr	r3, [sp, #36]	; 0x24
90013048:	9809      	ldr	r0, [sp, #36]	; 0x24
9001304a:	681b      	ldr	r3, [r3, #0]
9001304c:	9206      	str	r2, [sp, #24]
9001304e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
90013050:	9500      	str	r5, [sp, #0]
90013052:	9205      	str	r2, [sp, #20]
90013054:	9a0a      	ldr	r2, [sp, #40]	; 0x28
90013056:	e9cd b203 	strd	fp, r2, [sp, #12]
9001305a:	9a64      	ldr	r2, [sp, #400]	; 0x190
9001305c:	e9cd 8201 	strd	r8, r2, [sp, #4]
90013060:	aa49      	add	r2, sp, #292	; 0x124
90013062:	f8d3 9048 	ldr.w	r9, [r3, #72]	; 0x48
90013066:	4623      	mov	r3, r4
90013068:	47c8      	blx	r9
9001306a:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
9001306e:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
90013072:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
90013076:	ee37 7a27 	vadd.f32	s14, s14, s15
9001307a:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
9001307e:	68a1      	ldr	r1, [r4, #8]
90013080:	ee77 7aa6 	vadd.f32	s15, s15, s13
90013084:	ed94 6a08 	vldr	s12, [r4, #32]
90013088:	edd4 6a07 	vldr	s13, [r4, #28]
9001308c:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
90013090:	ee76 6a86 	vadd.f32	s13, s13, s12
90013094:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
90013098:	e9d4 2300 	ldrd	r2, r3, [r4]
9001309c:	edc4 6a07 	vstr	s13, [r4, #28]
900130a0:	441a      	add	r2, r3
900130a2:	6963      	ldr	r3, [r4, #20]
900130a4:	3301      	adds	r3, #1
900130a6:	6022      	str	r2, [r4, #0]
900130a8:	6163      	str	r3, [r4, #20]
900130aa:	69a3      	ldr	r3, [r4, #24]
900130ac:	3b01      	subs	r3, #1
900130ae:	61a3      	str	r3, [r4, #24]
900130b0:	6923      	ldr	r3, [r4, #16]
900130b2:	440b      	add	r3, r1
900130b4:	68e1      	ldr	r1, [r4, #12]
900130b6:	428b      	cmp	r3, r1
900130b8:	6123      	str	r3, [r4, #16]
900130ba:	db15      	blt.n	900130e8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x5bc>
900130bc:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
900130c0:	3201      	adds	r2, #1
900130c2:	1a5b      	subs	r3, r3, r1
900130c4:	ee76 6a26 	vadd.f32	s13, s12, s13
900130c8:	6022      	str	r2, [r4, #0]
900130ca:	6123      	str	r3, [r4, #16]
900130cc:	edc4 6a07 	vstr	s13, [r4, #28]
900130d0:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
900130d4:	ee36 7a87 	vadd.f32	s14, s13, s14
900130d8:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
900130dc:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
900130e0:	ee77 7a27 	vadd.f32	s15, s14, s15
900130e4:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
900130e8:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
900130ec:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
900130f0:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
900130f4:	ee37 7a27 	vadd.f32	s14, s14, s15
900130f8:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
900130fc:	68a9      	ldr	r1, [r5, #8]
900130fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
90013102:	ed95 6a08 	vldr	s12, [r5, #32]
90013106:	edd5 6a07 	vldr	s13, [r5, #28]
9001310a:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
9001310e:	ee76 6a86 	vadd.f32	s13, s13, s12
90013112:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
90013116:	e9d5 2300 	ldrd	r2, r3, [r5]
9001311a:	edc5 6a07 	vstr	s13, [r5, #28]
9001311e:	441a      	add	r2, r3
90013120:	696b      	ldr	r3, [r5, #20]
90013122:	3301      	adds	r3, #1
90013124:	602a      	str	r2, [r5, #0]
90013126:	616b      	str	r3, [r5, #20]
90013128:	69ab      	ldr	r3, [r5, #24]
9001312a:	3b01      	subs	r3, #1
9001312c:	61ab      	str	r3, [r5, #24]
9001312e:	692b      	ldr	r3, [r5, #16]
90013130:	440b      	add	r3, r1
90013132:	68e9      	ldr	r1, [r5, #12]
90013134:	428b      	cmp	r3, r1
90013136:	612b      	str	r3, [r5, #16]
90013138:	db15      	blt.n	90013166 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63a>
9001313a:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
9001313e:	3201      	adds	r2, #1
90013140:	1a5b      	subs	r3, r3, r1
90013142:	ee76 6a26 	vadd.f32	s13, s12, s13
90013146:	602a      	str	r2, [r5, #0]
90013148:	612b      	str	r3, [r5, #16]
9001314a:	edc5 6a07 	vstr	s13, [r5, #28]
9001314e:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
90013152:	ee36 7a87 	vadd.f32	s14, s13, s14
90013156:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
9001315a:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
9001315e:	ee77 7a27 	vadd.f32	s15, s14, s15
90013162:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
90013166:	3f01      	subs	r7, #1
90013168:	e757      	b.n	9001301a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4ee>
9001316a:	ad39      	add	r5, sp, #228	; 0xe4
9001316c:	ac19      	add	r4, sp, #100	; 0x64
9001316e:	e72d      	b.n	90012fcc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4a0>
90013170:	4613      	mov	r3, r2
90013172:	e744      	b.n	90012ffe <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d2>
90013174:	4613      	mov	r3, r2
90013176:	9e3b      	ldr	r6, [sp, #236]	; 0xec
90013178:	469e      	mov	lr, r3
9001317a:	f8dd c0f8 	ldr.w	ip, [sp, #248]	; 0xf8
9001317e:	461f      	mov	r7, r3
90013180:	ed9d 7a43 	vldr	s14, [sp, #268]	; 0x10c
90013184:	f04f 0900 	mov.w	r9, #0
90013188:	eddd 4a44 	vldr	s9, [sp, #272]	; 0x110
9001318c:	eddd 7a46 	vldr	s15, [sp, #280]	; 0x118
90013190:	ed9d 4a47 	vldr	s8, [sp, #284]	; 0x11c
90013194:	eddd 6a40 	vldr	s13, [sp, #256]	; 0x100
90013198:	eddd 3a41 	vldr	s7, [sp, #260]	; 0x104
9001319c:	993d      	ldr	r1, [sp, #244]	; 0xf4
9001319e:	f8dd 80f0 	ldr.w	r8, [sp, #240]	; 0xf0
900131a2:	ed9d 5a42 	vldr	s10, [sp, #264]	; 0x108
900131a6:	eddd 5a45 	vldr	s11, [sp, #276]	; 0x114
900131aa:	ed9d 6a48 	vldr	s12, [sp, #288]	; 0x120
900131ae:	960e      	str	r6, [sp, #56]	; 0x38
900131b0:	e9dd 0a39 	ldrd	r0, sl, [sp, #228]	; 0xe4
900131b4:	2f00      	cmp	r7, #0
900131b6:	d146      	bne.n	90013246 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x71a>
900131b8:	449c      	add	ip, r3
900131ba:	1ad7      	subs	r7, r2, r3
900131bc:	f1b9 0f00 	cmp.w	r9, #0
900131c0:	d009      	beq.n	900131d6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6aa>
900131c2:	9039      	str	r0, [sp, #228]	; 0xe4
900131c4:	913d      	str	r1, [sp, #244]	; 0xf4
900131c6:	edcd 6a40 	vstr	s13, [sp, #256]	; 0x100
900131ca:	ed8d 7a43 	vstr	s14, [sp, #268]	; 0x10c
900131ce:	edcd 7a46 	vstr	s15, [sp, #280]	; 0x118
900131d2:	e9cd c73e 	strd	ip, r7, [sp, #248]	; 0xf8
900131d6:	991b      	ldr	r1, [sp, #108]	; 0x6c
900131d8:	f04f 0800 	mov.w	r8, #0
900131dc:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
900131e0:	910e      	str	r1, [sp, #56]	; 0x38
900131e2:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
900131e6:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
900131ea:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
900131ee:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
900131f2:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
900131f6:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
900131fa:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
900131fe:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
90013202:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
90013206:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
9001320a:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
9001320e:	f1be 0f00 	cmp.w	lr, #0
90013212:	d030      	beq.n	90013276 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x74a>
90013214:	9e0e      	ldr	r6, [sp, #56]	; 0x38
90013216:	4450      	add	r0, sl
90013218:	ee76 6aa4 	vadd.f32	s13, s13, s9
9001321c:	4431      	add	r1, r6
9001321e:	ee37 7a04 	vadd.f32	s14, s14, s8
90013222:	ee77 7aa3 	vadd.f32	s15, s15, s7
90013226:	4549      	cmp	r1, r9
90013228:	db08      	blt.n	9001323c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x710>
9001322a:	ee77 7a85 	vadd.f32	s15, s15, s10
9001322e:	3001      	adds	r0, #1
90013230:	ee76 6aa5 	vadd.f32	s13, s13, s11
90013234:	eba1 0109 	sub.w	r1, r1, r9
90013238:	ee37 7a06 	vadd.f32	s14, s14, s12
9001323c:	f10e 3eff 	add.w	lr, lr, #4294967295
90013240:	f04f 0801 	mov.w	r8, #1
90013244:	e7e3      	b.n	9001320e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6e2>
90013246:	9e0e      	ldr	r6, [sp, #56]	; 0x38
90013248:	4450      	add	r0, sl
9001324a:	ee37 7a24 	vadd.f32	s14, s14, s9
9001324e:	4431      	add	r1, r6
90013250:	ee77 7a84 	vadd.f32	s15, s15, s8
90013254:	ee76 6aa3 	vadd.f32	s13, s13, s7
90013258:	4541      	cmp	r1, r8
9001325a:	db08      	blt.n	9001326e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x742>
9001325c:	ee76 6a85 	vadd.f32	s13, s13, s10
90013260:	3001      	adds	r0, #1
90013262:	ee37 7a25 	vadd.f32	s14, s14, s11
90013266:	eba1 0108 	sub.w	r1, r1, r8
9001326a:	ee77 7a86 	vadd.f32	s15, s15, s12
9001326e:	3f01      	subs	r7, #1
90013270:	f04f 0901 	mov.w	r9, #1
90013274:	e79e      	b.n	900131b4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x688>
90013276:	449c      	add	ip, r3
90013278:	1aff      	subs	r7, r7, r3
9001327a:	f1b8 0f00 	cmp.w	r8, #0
9001327e:	d009      	beq.n	90013294 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x768>
90013280:	9019      	str	r0, [sp, #100]	; 0x64
90013282:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
90013286:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
9001328a:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
9001328e:	911d      	str	r1, [sp, #116]	; 0x74
90013290:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
90013294:	1ad2      	subs	r2, r2, r3
90013296:	e6b5      	b.n	90013004 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
90013298:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
9001329a:	681b      	ldr	r3, [r3, #0]
9001329c:	b923      	cbnz	r3, 900132a8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
9001329e:	4b04      	ldr	r3, [pc, #16]	; (900132b0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x784>)
900132a0:	6818      	ldr	r0, [r3, #0]
900132a2:	6803      	ldr	r3, [r0, #0]
900132a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
900132a6:	4798      	blx	r3
900132a8:	b05b      	add	sp, #364	; 0x16c
900132aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
900132ae:	bf00      	nop
900132b0:	24026264 	.word	0x24026264

900132b4 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE>:
900132b4:	b570      	push	{r4, r5, r6, lr}
900132b6:	4604      	mov	r4, r0
900132b8:	2500      	movs	r5, #0
900132ba:	9805      	ldr	r0, [sp, #20]
900132bc:	f89d 601c 	ldrb.w	r6, [sp, #28]
900132c0:	6061      	str	r1, [r4, #4]
900132c2:	8263      	strh	r3, [r4, #18]
900132c4:	f89d 1010 	ldrb.w	r1, [sp, #16]
900132c8:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
900132cc:	8025      	strh	r5, [r4, #0]
900132ce:	7221      	strb	r1, [r4, #8]
900132d0:	7266      	strb	r6, [r4, #9]
900132d2:	60e0      	str	r0, [r4, #12]
900132d4:	8222      	strh	r2, [r4, #16]
900132d6:	82a3      	strh	r3, [r4, #20]
900132d8:	82e5      	strh	r5, [r4, #22]
900132da:	8325      	strh	r5, [r4, #24]
900132dc:	8365      	strh	r5, [r4, #26]
900132de:	83a5      	strh	r5, [r4, #28]
900132e0:	83e5      	strh	r5, [r4, #30]
900132e2:	8425      	strh	r5, [r4, #32]
900132e4:	f884 5022 	strb.w	r5, [r4, #34]	; 0x22
900132e8:	b32e      	cbz	r6, 90013336 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
900132ea:	6803      	ldr	r3, [r0, #0]
900132ec:	695b      	ldr	r3, [r3, #20]
900132ee:	4798      	blx	r3
900132f0:	4606      	mov	r6, r0
900132f2:	b300      	cbz	r0, 90013336 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
900132f4:	68e0      	ldr	r0, [r4, #12]
900132f6:	4631      	mov	r1, r6
900132f8:	6803      	ldr	r3, [r0, #0]
900132fa:	68db      	ldr	r3, [r3, #12]
900132fc:	4798      	blx	r3
900132fe:	4605      	mov	r5, r0
90013300:	b1c8      	cbz	r0, 90013336 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
90013302:	7b43      	ldrb	r3, [r0, #13]
90013304:	7a82      	ldrb	r2, [r0, #10]
90013306:	005b      	lsls	r3, r3, #1
90013308:	f403 7380 	and.w	r3, r3, #256	; 0x100
9001330c:	4313      	orrs	r3, r2
9001330e:	8423      	strh	r3, [r4, #32]
90013310:	7a63      	ldrb	r3, [r4, #9]
90013312:	2b06      	cmp	r3, #6
90013314:	d10f      	bne.n	90013336 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
90013316:	68e0      	ldr	r0, [r4, #12]
90013318:	462a      	mov	r2, r5
9001331a:	4631      	mov	r1, r6
9001331c:	6803      	ldr	r3, [r0, #0]
9001331e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
90013320:	4798      	blx	r3
90013322:	7b6b      	ldrb	r3, [r5, #13]
90013324:	005b      	lsls	r3, r3, #1
90013326:	f403 7280 	and.w	r2, r3, #256	; 0x100
9001332a:	7aab      	ldrb	r3, [r5, #10]
9001332c:	4313      	orrs	r3, r2
9001332e:	4418      	add	r0, r3
90013330:	8c23      	ldrh	r3, [r4, #32]
90013332:	4418      	add	r0, r3
90013334:	8420      	strh	r0, [r4, #32]
90013336:	4620      	mov	r0, r4
90013338:	bd70      	pop	{r4, r5, r6, pc}

9001333a <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>:
9001333a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001333e:	2400      	movs	r4, #0
90013340:	b085      	sub	sp, #20
90013342:	4681      	mov	r9, r0
90013344:	4688      	mov	r8, r1
90013346:	4692      	mov	sl, r2
90013348:	469b      	mov	fp, r3
9001334a:	4627      	mov	r7, r4
9001334c:	4625      	mov	r5, r4
9001334e:	4626      	mov	r6, r4
90013350:	4554      	cmp	r4, sl
90013352:	da2a      	bge.n	900133aa <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
90013354:	2300      	movs	r3, #0
90013356:	9303      	str	r3, [sp, #12]
90013358:	f64f 63ff 	movw	r3, #65279	; 0xfeff
9001335c:	429d      	cmp	r5, r3
9001335e:	d004      	beq.n	9001336a <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x30>
90013360:	f242 030b 	movw	r3, #8203	; 0x200b
90013364:	429d      	cmp	r5, r3
90013366:	bf18      	it	ne
90013368:	462f      	movne	r7, r5
9001336a:	ab03      	add	r3, sp, #12
9001336c:	4642      	mov	r2, r8
9001336e:	4659      	mov	r1, fp
90013370:	4648      	mov	r0, r9
90013372:	f002 ff23 	bl	900161bc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
90013376:	4605      	mov	r5, r0
90013378:	b1b8      	cbz	r0, 900133aa <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
9001337a:	280a      	cmp	r0, #10
9001337c:	d015      	beq.n	900133aa <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
9001337e:	9a03      	ldr	r2, [sp, #12]
90013380:	b18a      	cbz	r2, 900133a6 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x6c>
90013382:	7b50      	ldrb	r0, [r2, #13]
90013384:	4639      	mov	r1, r7
90013386:	7a93      	ldrb	r3, [r2, #10]
90013388:	0040      	lsls	r0, r0, #1
9001338a:	8895      	ldrh	r5, [r2, #4]
9001338c:	f400 7080 	and.w	r0, r0, #256	; 0x100
90013390:	4303      	orrs	r3, r0
90013392:	4640      	mov	r0, r8
90013394:	9301      	str	r3, [sp, #4]
90013396:	f8d8 3000 	ldr.w	r3, [r8]
9001339a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
9001339c:	4798      	blx	r3
9001339e:	9b01      	ldr	r3, [sp, #4]
900133a0:	4418      	add	r0, r3
900133a2:	4406      	add	r6, r0
900133a4:	b2b6      	uxth	r6, r6
900133a6:	3401      	adds	r4, #1
900133a8:	e7d2      	b.n	90013350 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x16>
900133aa:	4630      	mov	r0, r6
900133ac:	b005      	add	sp, #20
900133ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

900133b2 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>:
900133b2:	2a02      	cmp	r2, #2
900133b4:	b530      	push	{r4, r5, lr}
900133b6:	d011      	beq.n	900133dc <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x2a>
900133b8:	2a03      	cmp	r2, #3
900133ba:	d01c      	beq.n	900133f6 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x44>
900133bc:	2a01      	cmp	r2, #1
900133be:	d10c      	bne.n	900133da <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
900133c0:	888b      	ldrh	r3, [r1, #4]
900133c2:	8801      	ldrh	r1, [r0, #0]
900133c4:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
900133c8:	1a5b      	subs	r3, r3, r1
900133ca:	8844      	ldrh	r4, [r0, #2]
900133cc:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
900133d0:	1a9b      	subs	r3, r3, r2
900133d2:	8004      	strh	r4, [r0, #0]
900133d4:	8081      	strh	r1, [r0, #4]
900133d6:	8043      	strh	r3, [r0, #2]
900133d8:	80c2      	strh	r2, [r0, #6]
900133da:	bd30      	pop	{r4, r5, pc}
900133dc:	88cb      	ldrh	r3, [r1, #6]
900133de:	8842      	ldrh	r2, [r0, #2]
900133e0:	1a9b      	subs	r3, r3, r2
900133e2:	88c2      	ldrh	r2, [r0, #6]
900133e4:	1a9b      	subs	r3, r3, r2
900133e6:	888a      	ldrh	r2, [r1, #4]
900133e8:	8801      	ldrh	r1, [r0, #0]
900133ea:	8043      	strh	r3, [r0, #2]
900133ec:	1a52      	subs	r2, r2, r1
900133ee:	8881      	ldrh	r1, [r0, #4]
900133f0:	1a52      	subs	r2, r2, r1
900133f2:	8002      	strh	r2, [r0, #0]
900133f4:	e7f1      	b.n	900133da <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
900133f6:	88cb      	ldrh	r3, [r1, #6]
900133f8:	8841      	ldrh	r1, [r0, #2]
900133fa:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
900133fe:	1a5b      	subs	r3, r3, r1
90013400:	f9b0 5000 	ldrsh.w	r5, [r0]
90013404:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
90013408:	1a9b      	subs	r3, r3, r2
9001340a:	8045      	strh	r5, [r0, #2]
9001340c:	8082      	strh	r2, [r0, #4]
9001340e:	8003      	strh	r3, [r0, #0]
90013410:	80c4      	strh	r4, [r0, #6]
90013412:	e7e2      	b.n	900133da <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>

90013414 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>:
90013414:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90013418:	b09f      	sub	sp, #124	; 0x7c
9001341a:	9116      	str	r1, [sp, #88]	; 0x58
9001341c:	9317      	str	r3, [sp, #92]	; 0x5c
9001341e:	9929      	ldr	r1, [sp, #164]	; 0xa4
90013420:	9b29      	ldr	r3, [sp, #164]	; 0xa4
90013422:	8809      	ldrh	r1, [r1, #0]
90013424:	889b      	ldrh	r3, [r3, #4]
90013426:	f8dd 80a8 	ldr.w	r8, [sp, #168]	; 0xa8
9001342a:	440b      	add	r3, r1
9001342c:	9212      	str	r2, [sp, #72]	; 0x48
9001342e:	f89d 20b8 	ldrb.w	r2, [sp, #184]	; 0xb8
90013432:	b21b      	sxth	r3, r3
90013434:	9011      	str	r0, [sp, #68]	; 0x44
90013436:	f89d b0ac 	ldrb.w	fp, [sp, #172]	; 0xac
9001343a:	9310      	str	r3, [sp, #64]	; 0x40
9001343c:	f8d8 3000 	ldr.w	r3, [r8]
90013440:	f9bd 60a0 	ldrsh.w	r6, [sp, #160]	; 0xa0
90013444:	7b19      	ldrb	r1, [r3, #12]
90013446:	7adb      	ldrb	r3, [r3, #11]
90013448:	9114      	str	r1, [sp, #80]	; 0x50
9001344a:	9315      	str	r3, [sp, #84]	; 0x54
9001344c:	2a00      	cmp	r2, #0
9001344e:	d06a      	beq.n	90013526 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x112>
90013450:	f898 3010 	ldrb.w	r3, [r8, #16]
90013454:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
90013456:	2b06      	cmp	r3, #6
90013458:	bf14      	ite	ne
9001345a:	2301      	movne	r3, #1
9001345c:	2302      	moveq	r3, #2
9001345e:	4413      	add	r3, r2
90013460:	f04f 0900 	mov.w	r9, #0
90013464:	930f      	str	r3, [sp, #60]	; 0x3c
90013466:	464c      	mov	r4, r9
90013468:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
9001346c:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
90013470:	e9dd 320e 	ldrd	r3, r2, [sp, #56]	; 0x38
90013474:	4293      	cmp	r3, r2
90013476:	f280 808f 	bge.w	90013598 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x184>
9001347a:	2300      	movs	r3, #0
9001347c:	e9cd 331c 	strd	r3, r3, [sp, #112]	; 0x70
90013480:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
90013484:	f64f 63ff 	movw	r3, #65279	; 0xfeff
90013488:	429c      	cmp	r4, r3
9001348a:	d006      	beq.n	9001349a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x86>
9001348c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
9001348e:	f242 020b 	movw	r2, #8203	; 0x200b
90013492:	4294      	cmp	r4, r2
90013494:	bf18      	it	ne
90013496:	4623      	movne	r3, r4
90013498:	930d      	str	r3, [sp, #52]	; 0x34
9001349a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
9001349c:	992d      	ldr	r1, [sp, #180]	; 0xb4
9001349e:	f8d8 2000 	ldr.w	r2, [r8]
900134a2:	428b      	cmp	r3, r1
900134a4:	db41      	blt.n	9001352a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x116>
900134a6:	6813      	ldr	r3, [r2, #0]
900134a8:	4610      	mov	r0, r2
900134aa:	695b      	ldr	r3, [r3, #20]
900134ac:	4798      	blx	r3
900134ae:	4604      	mov	r4, r0
900134b0:	f8d8 0000 	ldr.w	r0, [r8]
900134b4:	aa1d      	add	r2, sp, #116	; 0x74
900134b6:	4621      	mov	r1, r4
900134b8:	6803      	ldr	r3, [r0, #0]
900134ba:	689d      	ldr	r5, [r3, #8]
900134bc:	f10d 036f 	add.w	r3, sp, #111	; 0x6f
900134c0:	47a8      	blx	r5
900134c2:	901c      	str	r0, [sp, #112]	; 0x70
900134c4:	f64f 63ff 	movw	r3, #65279	; 0xfeff
900134c8:	429c      	cmp	r4, r3
900134ca:	f000 80ec 	beq.w	900136a6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
900134ce:	f242 030b 	movw	r3, #8203	; 0x200b
900134d2:	429c      	cmp	r4, r3
900134d4:	f000 80e7 	beq.w	900136a6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
900134d8:	2c00      	cmp	r4, #0
900134da:	f000 80f9 	beq.w	900136d0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2bc>
900134de:	2c0a      	cmp	r4, #10
900134e0:	d060      	beq.n	900135a4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x190>
900134e2:	9a1c      	ldr	r2, [sp, #112]	; 0x70
900134e4:	b36a      	cbz	r2, 90013542 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x12e>
900134e6:	8894      	ldrh	r4, [r2, #4]
900134e8:	f1bb 0f00 	cmp.w	fp, #0
900134ec:	d03b      	beq.n	90013566 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x152>
900134ee:	f892 900d 	ldrb.w	r9, [r2, #13]
900134f2:	f1bb 0f01 	cmp.w	fp, #1
900134f6:	ea4f 0949 	mov.w	r9, r9, lsl #1
900134fa:	f409 7380 	and.w	r3, r9, #256	; 0x100
900134fe:	f892 900a 	ldrb.w	r9, [r2, #10]
90013502:	ea49 0903 	orr.w	r9, r9, r3
90013506:	d134      	bne.n	90013572 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x15e>
90013508:	9b0d      	ldr	r3, [sp, #52]	; 0x34
9001350a:	eba6 0609 	sub.w	r6, r6, r9
9001350e:	2b00      	cmp	r3, #0
90013510:	d14f      	bne.n	900135b2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19e>
90013512:	9a14      	ldr	r2, [sp, #80]	; 0x50
90013514:	eb09 0306 	add.w	r3, r9, r6
90013518:	4413      	add	r3, r2
9001351a:	9a29      	ldr	r2, [sp, #164]	; 0xa4
9001351c:	f9b2 2000 	ldrsh.w	r2, [r2]
90013520:	4293      	cmp	r3, r2
90013522:	da51      	bge.n	900135c8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b4>
90013524:	e038      	b.n	90013598 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x184>
90013526:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
90013528:	e79a      	b.n	90013460 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x4c>
9001352a:	f10d 036f 	add.w	r3, sp, #111	; 0x6f
9001352e:	4659      	mov	r1, fp
90013530:	982c      	ldr	r0, [sp, #176]	; 0xb0
90013532:	9301      	str	r3, [sp, #4]
90013534:	ab1d      	add	r3, sp, #116	; 0x74
90013536:	9300      	str	r3, [sp, #0]
90013538:	ab1c      	add	r3, sp, #112	; 0x70
9001353a:	f002 fe88 	bl	9001624e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>
9001353e:	4604      	mov	r4, r0
90013540:	e7c0      	b.n	900134c4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xb0>
90013542:	f8d8 0000 	ldr.w	r0, [r8]
90013546:	6803      	ldr	r3, [r0, #0]
90013548:	691b      	ldr	r3, [r3, #16]
9001354a:	4798      	blx	r3
9001354c:	f64f 63ff 	movw	r3, #65279	; 0xfeff
90013550:	4298      	cmp	r0, r3
90013552:	f000 80a8 	beq.w	900136a6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
90013556:	f242 030b 	movw	r3, #8203	; 0x200b
9001355a:	4298      	cmp	r0, r3
9001355c:	f000 80a3 	beq.w	900136a6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
90013560:	f1bb 0f00 	cmp.w	fp, #0
90013564:	d100      	bne.n	90013568 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x154>
90013566:	444e      	add	r6, r9
90013568:	9a1c      	ldr	r2, [sp, #112]	; 0x70
9001356a:	2a00      	cmp	r2, #0
9001356c:	d1bf      	bne.n	900134ee <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xda>
9001356e:	4691      	mov	r9, r2
90013570:	e099      	b.n	900136a6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
90013572:	9b0d      	ldr	r3, [sp, #52]	; 0x34
90013574:	2b00      	cmp	r3, #0
90013576:	f000 80ad 	beq.w	900136d4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2c0>
9001357a:	f1bb 0f00 	cmp.w	fp, #0
9001357e:	d118      	bne.n	900135b2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19e>
90013580:	f8d8 0000 	ldr.w	r0, [r8]
90013584:	990d      	ldr	r1, [sp, #52]	; 0x34
90013586:	6803      	ldr	r3, [r0, #0]
90013588:	6c5b      	ldr	r3, [r3, #68]	; 0x44
9001358a:	4798      	blx	r3
9001358c:	4406      	add	r6, r0
9001358e:	9b15      	ldr	r3, [sp, #84]	; 0x54
90013590:	9a10      	ldr	r2, [sp, #64]	; 0x40
90013592:	1af3      	subs	r3, r6, r3
90013594:	4293      	cmp	r3, r2
90013596:	dd17      	ble.n	900135c8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b4>
90013598:	2c00      	cmp	r4, #0
9001359a:	f000 8099 	beq.w	900136d0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2bc>
9001359e:	2c0a      	cmp	r4, #10
900135a0:	f040 8087 	bne.w	900136b2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x29e>
900135a4:	240a      	movs	r4, #10
900135a6:	fab4 f084 	clz	r0, r4
900135aa:	0940      	lsrs	r0, r0, #5
900135ac:	b01f      	add	sp, #124	; 0x7c
900135ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
900135b2:	f8d8 0000 	ldr.w	r0, [r8]
900135b6:	990d      	ldr	r1, [sp, #52]	; 0x34
900135b8:	6803      	ldr	r3, [r0, #0]
900135ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
900135bc:	4798      	blx	r3
900135be:	f1bb 0f01 	cmp.w	fp, #1
900135c2:	eba6 0600 	sub.w	r6, r6, r0
900135c6:	d0a4      	beq.n	90013512 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xfe>
900135c8:	981c      	ldr	r0, [sp, #112]	; 0x70
900135ca:	9b29      	ldr	r3, [sp, #164]	; 0xa4
900135cc:	f990 1009 	ldrsb.w	r1, [r0, #9]
900135d0:	f9b3 7000 	ldrsh.w	r7, [r3]
900135d4:	7b43      	ldrb	r3, [r0, #13]
900135d6:	4431      	add	r1, r6
900135d8:	015b      	lsls	r3, r3, #5
900135da:	f403 7280 	and.w	r2, r3, #256	; 0x100
900135de:	7983      	ldrb	r3, [r0, #6]
900135e0:	4313      	orrs	r3, r2
900135e2:	440b      	add	r3, r1
900135e4:	42bb      	cmp	r3, r7
900135e6:	db5e      	blt.n	900136a6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
900135e8:	9b10      	ldr	r3, [sp, #64]	; 0x40
900135ea:	4299      	cmp	r1, r3
900135ec:	da5b      	bge.n	900136a6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
900135ee:	f8d8 0000 	ldr.w	r0, [r8]
900135f2:	42b7      	cmp	r7, r6
900135f4:	6803      	ldr	r3, [r0, #0]
900135f6:	bfcc      	ite	gt
900135f8:	1bbf      	subgt	r7, r7, r6
900135fa:	2700      	movle	r7, #0
900135fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
900135fe:	bfc8      	it	gt
90013600:	b2bf      	uxthgt	r7, r7
90013602:	4798      	blx	r3
90013604:	9b1c      	ldr	r3, [sp, #112]	; 0x70
90013606:	7b5a      	ldrb	r2, [r3, #13]
90013608:	00d1      	lsls	r1, r2, #3
9001360a:	f401 7580 	and.w	r5, r1, #256	; 0x100
9001360e:	7a19      	ldrb	r1, [r3, #8]
90013610:	4329      	orrs	r1, r5
90013612:	0655      	lsls	r5, r2, #25
90013614:	9d17      	ldr	r5, [sp, #92]	; 0x5c
90013616:	bf48      	it	mi
90013618:	f5a1 7100 	submi.w	r1, r1, #512	; 0x200
9001361c:	4405      	add	r5, r0
9001361e:	bf48      	it	mi
90013620:	b209      	sxthmi	r1, r1
90013622:	1a6d      	subs	r5, r5, r1
90013624:	9929      	ldr	r1, [sp, #164]	; 0xa4
90013626:	b2ad      	uxth	r5, r5
90013628:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
9001362c:	fa0f fa85 	sxth.w	sl, r5
90013630:	4551      	cmp	r1, sl
90013632:	dd3c      	ble.n	900136ae <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x29a>
90013634:	0112      	lsls	r2, r2, #4
90013636:	79d8      	ldrb	r0, [r3, #7]
90013638:	f402 7280 	and.w	r2, r2, #256	; 0x100
9001363c:	4302      	orrs	r2, r0
9001363e:	4492      	add	sl, r2
90013640:	4551      	cmp	r1, sl
90013642:	dc30      	bgt.n	900136a6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
90013644:	1b4d      	subs	r5, r1, r5
90013646:	468a      	mov	sl, r1
90013648:	b22d      	sxth	r5, r5
9001364a:	9319      	str	r3, [sp, #100]	; 0x64
9001364c:	b2ad      	uxth	r5, r5
9001364e:	9b11      	ldr	r3, [sp, #68]	; 0x44
90013650:	f8d8 0000 	ldr.w	r0, [r8]
90013654:	681a      	ldr	r2, [r3, #0]
90013656:	6801      	ldr	r1, [r0, #0]
90013658:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
9001365a:	9a1d      	ldr	r2, [sp, #116]	; 0x74
9001365c:	9313      	str	r3, [sp, #76]	; 0x4c
9001365e:	9218      	str	r2, [sp, #96]	; 0x60
90013660:	6c09      	ldr	r1, [r1, #64]	; 0x40
90013662:	4788      	blx	r1
90013664:	f898 1006 	ldrb.w	r1, [r8, #6]
90013668:	9b19      	ldr	r3, [sp, #100]	; 0x64
9001366a:	910b      	str	r1, [sp, #44]	; 0x2c
9001366c:	f898 100e 	ldrb.w	r1, [r8, #14]
90013670:	9a18      	ldr	r2, [sp, #96]	; 0x60
90013672:	910a      	str	r1, [sp, #40]	; 0x28
90013674:	f89d 106f 	ldrb.w	r1, [sp, #111]	; 0x6f
90013678:	9109      	str	r1, [sp, #36]	; 0x24
9001367a:	f8d8 1008 	ldr.w	r1, [r8, #8]
9001367e:	9305      	str	r3, [sp, #20]
90013680:	9b29      	ldr	r3, [sp, #164]	; 0xa4
90013682:	9206      	str	r2, [sp, #24]
90013684:	9304      	str	r3, [sp, #16]
90013686:	9b12      	ldr	r3, [sp, #72]	; 0x48
90013688:	f8cd a004 	str.w	sl, [sp, #4]
9001368c:	e9cd 7502 	strd	r7, r5, [sp, #8]
90013690:	4437      	add	r7, r6
90013692:	9d13      	ldr	r5, [sp, #76]	; 0x4c
90013694:	b23f      	sxth	r7, r7
90013696:	e9cd 0107 	strd	r0, r1, [sp, #28]
9001369a:	9700      	str	r7, [sp, #0]
9001369c:	9916      	ldr	r1, [sp, #88]	; 0x58
9001369e:	681a      	ldr	r2, [r3, #0]
900136a0:	9811      	ldr	r0, [sp, #68]	; 0x44
900136a2:	685b      	ldr	r3, [r3, #4]
900136a4:	47a8      	blx	r5
900136a6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
900136a8:	3301      	adds	r3, #1
900136aa:	930e      	str	r3, [sp, #56]	; 0x38
900136ac:	e6e0      	b.n	90013470 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x5c>
900136ae:	2500      	movs	r5, #0
900136b0:	e7cb      	b.n	9001364a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x236>
900136b2:	9d0e      	ldr	r5, [sp, #56]	; 0x38
900136b4:	3501      	adds	r5, #1
900136b6:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
900136b8:	429d      	cmp	r5, r3
900136ba:	f6bf af74 	bge.w	900135a6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x192>
900136be:	4659      	mov	r1, fp
900136c0:	982c      	ldr	r0, [sp, #176]	; 0xb0
900136c2:	f7f2 f863 	bl	9000578c <_ZN8touchgfx12TextProvider15getNextLigatureEh>
900136c6:	4604      	mov	r4, r0
900136c8:	b110      	cbz	r0, 900136d0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2bc>
900136ca:	280a      	cmp	r0, #10
900136cc:	d1f2      	bne.n	900136b4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2a0>
900136ce:	e769      	b.n	900135a4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x190>
900136d0:	2400      	movs	r4, #0
900136d2:	e768      	b.n	900135a6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x192>
900136d4:	f1bb 0f00 	cmp.w	fp, #0
900136d8:	f43f af59 	beq.w	9001358e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x17a>
900136dc:	e774      	b.n	900135c8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b4>

900136de <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>:
900136de:	b530      	push	{r4, r5, lr}
900136e0:	8ac4      	ldrh	r4, [r0, #22]
900136e2:	8b45      	ldrh	r5, [r0, #26]
900136e4:	8343      	strh	r3, [r0, #26]
900136e6:	442c      	add	r4, r5
900136e8:	1ae4      	subs	r4, r4, r3
900136ea:	8b83      	ldrh	r3, [r0, #28]
900136ec:	82c4      	strh	r4, [r0, #22]
900136ee:	8b04      	ldrh	r4, [r0, #24]
900136f0:	4422      	add	r2, r4
900136f2:	440c      	add	r4, r1
900136f4:	1a59      	subs	r1, r3, r1
900136f6:	83c2      	strh	r2, [r0, #30]
900136f8:	8304      	strh	r4, [r0, #24]
900136fa:	8381      	strh	r1, [r0, #28]
900136fc:	bd30      	pop	{r4, r5, pc}

900136fe <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>:
900136fe:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90013702:	4604      	mov	r4, r0
90013704:	8a47      	ldrh	r7, [r0, #18]
90013706:	68c0      	ldr	r0, [r0, #12]
90013708:	b085      	sub	sp, #20
9001370a:	6803      	ldr	r3, [r0, #0]
9001370c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
9001370e:	4798      	blx	r3
90013710:	f9b4 6014 	ldrsh.w	r6, [r4, #20]
90013714:	7a63      	ldrb	r3, [r4, #9]
90013716:	eb06 0640 	add.w	r6, r6, r0, lsl #1
9001371a:	3b01      	subs	r3, #1
9001371c:	42b7      	cmp	r7, r6
9001371e:	bfac      	ite	ge
90013720:	f04f 0900 	movge.w	r9, #0
90013724:	f04f 0901 	movlt.w	r9, #1
90013728:	2b05      	cmp	r3, #5
9001372a:	d804      	bhi.n	90013736 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x38>
9001372c:	e8df f003 	tbb	[pc, r3]
90013730:	470f0854 	.word	0x470f0854
90013734:	4c4c      	.short	0x4c4c
90013736:	2500      	movs	r5, #0
90013738:	46a9      	mov	r9, r5
9001373a:	462e      	mov	r6, r5
9001373c:	462f      	mov	r7, r5
9001373e:	e00e      	b.n	9001375e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x60>
90013740:	42b7      	cmp	r7, r6
90013742:	f04f 0500 	mov.w	r5, #0
90013746:	bfb4      	ite	lt
90013748:	2600      	movlt	r6, #0
9001374a:	2601      	movge	r6, #1
9001374c:	e7f6      	b.n	9001373c <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x3e>
9001374e:	42b7      	cmp	r7, r6
90013750:	464d      	mov	r5, r9
90013752:	f04f 0900 	mov.w	r9, #0
90013756:	bfb4      	ite	lt
90013758:	2600      	movlt	r6, #0
9001375a:	2601      	movge	r6, #1
9001375c:	464f      	mov	r7, r9
9001375e:	f04f 0800 	mov.w	r8, #0
90013762:	f8a4 8016 	strh.w	r8, [r4, #22]
90013766:	f8a4 8018 	strh.w	r8, [r4, #24]
9001376a:	f8cd 8004 	str.w	r8, [sp, #4]
9001376e:	2300      	movs	r3, #0
90013770:	9303      	str	r3, [sp, #12]
90013772:	8823      	ldrh	r3, [r4, #0]
90013774:	2b20      	cmp	r3, #32
90013776:	d033      	beq.n	900137e0 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xe2>
90013778:	f242 010b 	movw	r1, #8203	; 0x200b
9001377c:	1a5a      	subs	r2, r3, r1
9001377e:	f1d2 0a00 	rsbs	sl, r2, #0
90013782:	eb4a 0a02 	adc.w	sl, sl, r2
90013786:	f64f 62ff 	movw	r2, #65279	; 0xfeff
9001378a:	4293      	cmp	r3, r2
9001378c:	d008      	beq.n	900137a0 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xa2>
9001378e:	428b      	cmp	r3, r1
90013790:	9a01      	ldr	r2, [sp, #4]
90013792:	bf0e      	itee	eq
90013794:	f04f 0a01 	moveq.w	sl, #1
90013798:	461a      	movne	r2, r3
9001379a:	f04f 0a00 	movne.w	sl, #0
9001379e:	9201      	str	r2, [sp, #4]
900137a0:	ab03      	add	r3, sp, #12
900137a2:	68e2      	ldr	r2, [r4, #12]
900137a4:	7a21      	ldrb	r1, [r4, #8]
900137a6:	6860      	ldr	r0, [r4, #4]
900137a8:	f002 fd08 	bl	900161bc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
900137ac:	8020      	strh	r0, [r4, #0]
900137ae:	b9d8      	cbnz	r0, 900137e8 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xea>
900137b0:	8ba2      	ldrh	r2, [r4, #28]
900137b2:	2300      	movs	r3, #0
900137b4:	4611      	mov	r1, r2
900137b6:	4620      	mov	r0, r4
900137b8:	f7ff ff91 	bl	900136de <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
900137bc:	e06e      	b.n	9001389c <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x19e>
900137be:	2500      	movs	r5, #0
900137c0:	2701      	movs	r7, #1
900137c2:	46a9      	mov	r9, r5
900137c4:	462e      	mov	r6, r5
900137c6:	e7ca      	b.n	9001375e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x60>
900137c8:	42b7      	cmp	r7, r6
900137ca:	f04f 0500 	mov.w	r5, #0
900137ce:	bfb4      	ite	lt
900137d0:	2700      	movlt	r7, #0
900137d2:	2701      	movge	r7, #1
900137d4:	462e      	mov	r6, r5
900137d6:	e7c2      	b.n	9001375e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x60>
900137d8:	2500      	movs	r5, #0
900137da:	2601      	movs	r6, #1
900137dc:	46a9      	mov	r9, r5
900137de:	e7ad      	b.n	9001373c <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x3e>
900137e0:	9301      	str	r3, [sp, #4]
900137e2:	f04f 0a01 	mov.w	sl, #1
900137e6:	e7db      	b.n	900137a0 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xa2>
900137e8:	8b63      	ldrh	r3, [r4, #26]
900137ea:	280a      	cmp	r0, #10
900137ec:	f103 0301 	add.w	r3, r3, #1
900137f0:	8363      	strh	r3, [r4, #26]
900137f2:	d0dd      	beq.n	900137b0 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xb2>
900137f4:	9a03      	ldr	r2, [sp, #12]
900137f6:	bb62      	cbnz	r2, 90013852 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x154>
900137f8:	f64f 63ff 	movw	r3, #65279	; 0xfeff
900137fc:	4298      	cmp	r0, r3
900137fe:	d003      	beq.n	90013808 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x10a>
90013800:	f242 030b 	movw	r3, #8203	; 0x200b
90013804:	4298      	cmp	r0, r3
90013806:	d1b2      	bne.n	9001376e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
90013808:	8823      	ldrh	r3, [r4, #0]
9001380a:	8ba1      	ldrh	r1, [r4, #28]
9001380c:	2b20      	cmp	r3, #32
9001380e:	d003      	beq.n	90013818 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x11a>
90013810:	f242 000b 	movw	r0, #8203	; 0x200b
90013814:	4283      	cmp	r3, r0
90013816:	d131      	bne.n	9001387c <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x17e>
90013818:	f1ba 0f00 	cmp.w	sl, #0
9001381c:	bf0a      	itet	eq
9001381e:	4688      	moveq	r8, r1
90013820:	4650      	movne	r0, sl
90013822:	2001      	moveq	r0, #1
90013824:	440a      	add	r2, r1
90013826:	8b23      	ldrh	r3, [r4, #24]
90013828:	f8b4 c010 	ldrh.w	ip, [r4, #16]
9001382c:	b292      	uxth	r2, r2
9001382e:	83a2      	strh	r2, [r4, #28]
90013830:	4413      	add	r3, r2
90013832:	f1b9 0f00 	cmp.w	r9, #0
90013836:	d102      	bne.n	9001383e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x140>
90013838:	2d00      	cmp	r5, #0
9001383a:	d042      	beq.n	900138c2 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1c4>
9001383c:	b300      	cbz	r0, 90013880 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x182>
9001383e:	8c21      	ldrh	r1, [r4, #32]
90013840:	4419      	add	r1, r3
90013842:	458c      	cmp	ip, r1
90013844:	da37      	bge.n	900138b6 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1b8>
90013846:	8ae1      	ldrh	r1, [r4, #22]
90013848:	2900      	cmp	r1, #0
9001384a:	d034      	beq.n	900138b6 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1b8>
9001384c:	4563      	cmp	r3, ip
9001384e:	dd8e      	ble.n	9001376e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
90013850:	e01d      	b.n	9001388e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x190>
90013852:	8893      	ldrh	r3, [r2, #4]
90013854:	9901      	ldr	r1, [sp, #4]
90013856:	8023      	strh	r3, [r4, #0]
90013858:	f892 b00d 	ldrb.w	fp, [r2, #13]
9001385c:	ea4f 0b4b 	mov.w	fp, fp, lsl #1
90013860:	f40b 7080 	and.w	r0, fp, #256	; 0x100
90013864:	f892 b00a 	ldrb.w	fp, [r2, #10]
90013868:	ea4b 0b00 	orr.w	fp, fp, r0
9001386c:	68e0      	ldr	r0, [r4, #12]
9001386e:	6803      	ldr	r3, [r0, #0]
90013870:	6c5b      	ldr	r3, [r3, #68]	; 0x44
90013872:	4798      	blx	r3
90013874:	eb0b 0200 	add.w	r2, fp, r0
90013878:	b292      	uxth	r2, r2
9001387a:	e7c5      	b.n	90013808 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x10a>
9001387c:	2000      	movs	r0, #0
9001387e:	e7d1      	b.n	90013824 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x126>
90013880:	4563      	cmp	r3, ip
90013882:	f77f af74 	ble.w	9001376e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
90013886:	8ae3      	ldrh	r3, [r4, #22]
90013888:	2b00      	cmp	r3, #0
9001388a:	f43f af70 	beq.w	9001376e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
9001388e:	2301      	movs	r3, #1
90013890:	8c22      	ldrh	r2, [r4, #32]
90013892:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
90013896:	8be3      	ldrh	r3, [r4, #30]
90013898:	4413      	add	r3, r2
9001389a:	83e3      	strh	r3, [r4, #30]
9001389c:	68e0      	ldr	r0, [r4, #12]
9001389e:	6803      	ldr	r3, [r0, #0]
900138a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
900138a2:	4798      	blx	r3
900138a4:	f9b4 3014 	ldrsh.w	r3, [r4, #20]
900138a8:	4418      	add	r0, r3
900138aa:	8a63      	ldrh	r3, [r4, #18]
900138ac:	1a18      	subs	r0, r3, r0
900138ae:	8260      	strh	r0, [r4, #18]
900138b0:	b005      	add	sp, #20
900138b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
900138b6:	2300      	movs	r3, #0
900138b8:	4611      	mov	r1, r2
900138ba:	4620      	mov	r0, r4
900138bc:	f7ff ff0f 	bl	900136de <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
900138c0:	e755      	b.n	9001376e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
900138c2:	4563      	cmp	r3, ip
900138c4:	dd14      	ble.n	900138f0 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1f2>
900138c6:	b117      	cbz	r7, 900138ce <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1d0>
900138c8:	2301      	movs	r3, #1
900138ca:	460a      	mov	r2, r1
900138cc:	e772      	b.n	900137b4 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xb6>
900138ce:	2e00      	cmp	r6, #0
900138d0:	f43f af4d 	beq.w	9001376e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
900138d4:	2800      	cmp	r0, #0
900138d6:	f47f af4a 	bne.w	9001376e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
900138da:	f1ba 0f00 	cmp.w	sl, #0
900138de:	d002      	beq.n	900138e6 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1e8>
900138e0:	2301      	movs	r3, #1
900138e2:	4642      	mov	r2, r8
900138e4:	e767      	b.n	900137b6 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xb8>
900138e6:	8ae3      	ldrh	r3, [r4, #22]
900138e8:	2b00      	cmp	r3, #0
900138ea:	f43f af40 	beq.w	9001376e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
900138ee:	e7d5      	b.n	9001389c <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x19e>
900138f0:	2800      	cmp	r0, #0
900138f2:	f47f af3c 	bne.w	9001376e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
900138f6:	f1ba 0f00 	cmp.w	sl, #0
900138fa:	f43f af38 	beq.w	9001376e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
900138fe:	2301      	movs	r3, #1
90013900:	4642      	mov	r2, r8
90013902:	e7da      	b.n	900138ba <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1bc>

90013904 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>:
90013904:	b5f0      	push	{r4, r5, r6, r7, lr}
90013906:	4605      	mov	r5, r0
90013908:	b08f      	sub	sp, #60	; 0x3c
9001390a:	4617      	mov	r7, r2
9001390c:	461c      	mov	r4, r3
9001390e:	460e      	mov	r6, r1
90013910:	b1d1      	cbz	r1, 90013948 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x44>
90013912:	681b      	ldr	r3, [r3, #0]
90013914:	4620      	mov	r0, r4
90013916:	6b9b      	ldr	r3, [r3, #56]	; 0x38
90013918:	4798      	blx	r3
9001391a:	4240      	negs	r0, r0
9001391c:	9603      	str	r6, [sp, #12]
9001391e:	f64f 73ff 	movw	r3, #65535	; 0xffff
90013922:	b200      	sxth	r0, r0
90013924:	9700      	str	r7, [sp, #0]
90013926:	f8bd 2050 	ldrh.w	r2, [sp, #80]	; 0x50
9001392a:	4629      	mov	r1, r5
9001392c:	e9cd 4001 	strd	r4, r0, [sp, #4]
90013930:	2401      	movs	r4, #1
90013932:	a805      	add	r0, sp, #20
90013934:	f7ff fcbe 	bl	900132b4 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE>
90013938:	a805      	add	r0, sp, #20
9001393a:	f7ff fee0 	bl	900136fe <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
9001393e:	f8bd 3014 	ldrh.w	r3, [sp, #20]
90013942:	b163      	cbz	r3, 9001395e <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x5a>
90013944:	3401      	adds	r4, #1
90013946:	e7f7      	b.n	90013938 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x34>
90013948:	2401      	movs	r4, #1
9001394a:	f002 fd03 	bl	90016354 <_ZN8touchgfx12TextProvider11getNextCharEv>
9001394e:	280a      	cmp	r0, #10
90013950:	4628      	mov	r0, r5
90013952:	bf08      	it	eq
90013954:	3401      	addeq	r4, #1
90013956:	f002 fcfd 	bl	90016354 <_ZN8touchgfx12TextProvider11getNextCharEv>
9001395a:	2800      	cmp	r0, #0
9001395c:	d1f7      	bne.n	9001394e <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x4a>
9001395e:	b2a0      	uxth	r0, r4
90013960:	b00f      	add	sp, #60	; 0x3c
90013962:	bdf0      	pop	{r4, r5, r6, r7, pc}

90013964 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>:
90013964:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90013968:	b0e3      	sub	sp, #396	; 0x18c
9001396a:	461c      	mov	r4, r3
9001396c:	4683      	mov	fp, r0
9001396e:	4688      	mov	r8, r1
90013970:	9b6c      	ldr	r3, [sp, #432]	; 0x1b0
90013972:	2b00      	cmp	r3, #0
90013974:	f000 810f 	beq.w	90013b96 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x232>
90013978:	6823      	ldr	r3, [r4, #0]
9001397a:	2b00      	cmp	r3, #0
9001397c:	f000 810b 	beq.w	90013b96 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x232>
90013980:	7ba3      	ldrb	r3, [r4, #14]
90013982:	2b00      	cmp	r3, #0
90013984:	f000 8107 	beq.w	90013b96 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x232>
90013988:	ad0a      	add	r5, sp, #40	; 0x28
9001398a:	6810      	ldr	r0, [r2, #0]
9001398c:	6851      	ldr	r1, [r2, #4]
9001398e:	462b      	mov	r3, r5
90013990:	f9b8 2004 	ldrsh.w	r2, [r8, #4]
90013994:	c303      	stmia	r3!, {r0, r1}
90013996:	2100      	movs	r1, #0
90013998:	f9b8 3006 	ldrsh.w	r3, [r8, #6]
9001399c:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
900139a0:	4628      	mov	r0, r5
900139a2:	910c      	str	r1, [sp, #48]	; 0x30
900139a4:	a90c      	add	r1, sp, #48	; 0x30
900139a6:	79a2      	ldrb	r2, [r4, #6]
900139a8:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
900139ac:	f7ff fd01 	bl	900133b2 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
900139b0:	a90c      	add	r1, sp, #48	; 0x30
900139b2:	79a2      	ldrb	r2, [r4, #6]
900139b4:	4608      	mov	r0, r1
900139b6:	f7ff fcfc 	bl	900133b2 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
900139ba:	a817      	add	r0, sp, #92	; 0x5c
900139bc:	f002 f8b6 	bl	90015b2c <_ZN8touchgfx12TextProviderC1Ev>
900139c0:	6820      	ldr	r0, [r4, #0]
900139c2:	6803      	ldr	r3, [r0, #0]
900139c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
900139c6:	4798      	blx	r3
900139c8:	4606      	mov	r6, r0
900139ca:	6820      	ldr	r0, [r4, #0]
900139cc:	6803      	ldr	r3, [r0, #0]
900139ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
900139d0:	4798      	blx	r3
900139d2:	4633      	mov	r3, r6
900139d4:	9a6d      	ldr	r2, [sp, #436]	; 0x1b4
900139d6:	996c      	ldr	r1, [sp, #432]	; 0x1b0
900139d8:	9000      	str	r0, [sp, #0]
900139da:	a817      	add	r0, sp, #92	; 0x5c
900139dc:	f002 f8f9 	bl	90015bd2 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
900139e0:	6820      	ldr	r0, [r4, #0]
900139e2:	f894 a004 	ldrb.w	sl, [r4, #4]
900139e6:	6803      	ldr	r3, [r0, #0]
900139e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
900139ea:	4798      	blx	r3
900139ec:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
900139f0:	6823      	ldr	r3, [r4, #0]
900139f2:	4607      	mov	r7, r0
900139f4:	4406      	add	r6, r0
900139f6:	a830      	add	r0, sp, #192	; 0xc0
900139f8:	f893 9009 	ldrb.w	r9, [r3, #9]
900139fc:	f002 f896 	bl	90015b2c <_ZN8touchgfx12TextProviderC1Ev>
90013a00:	7c23      	ldrb	r3, [r4, #16]
90013a02:	b17b      	cbz	r3, 90013a24 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xc0>
90013a04:	6820      	ldr	r0, [r4, #0]
90013a06:	6803      	ldr	r3, [r0, #0]
90013a08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
90013a0a:	4798      	blx	r3
90013a0c:	9009      	str	r0, [sp, #36]	; 0x24
90013a0e:	6820      	ldr	r0, [r4, #0]
90013a10:	6802      	ldr	r2, [r0, #0]
90013a12:	6d12      	ldr	r2, [r2, #80]	; 0x50
90013a14:	4790      	blx	r2
90013a16:	9b09      	ldr	r3, [sp, #36]	; 0x24
90013a18:	9000      	str	r0, [sp, #0]
90013a1a:	a830      	add	r0, sp, #192	; 0xc0
90013a1c:	9a6d      	ldr	r2, [sp, #436]	; 0x1b4
90013a1e:	996c      	ldr	r1, [sp, #432]	; 0x1b0
90013a20:	f002 f8d7 	bl	90015bd2 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
90013a24:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
90013a28:	a80e      	add	r0, sp, #56	; 0x38
90013a2a:	7be2      	ldrb	r2, [r4, #15]
90013a2c:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
90013a30:	1a8a      	subs	r2, r1, r2
90013a32:	7c21      	ldrb	r1, [r4, #16]
90013a34:	9103      	str	r1, [sp, #12]
90013a36:	b292      	uxth	r2, r2
90013a38:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
90013a3c:	9102      	str	r1, [sp, #8]
90013a3e:	6821      	ldr	r1, [r4, #0]
90013a40:	9101      	str	r1, [sp, #4]
90013a42:	7961      	ldrb	r1, [r4, #5]
90013a44:	9100      	str	r1, [sp, #0]
90013a46:	a930      	add	r1, sp, #192	; 0xc0
90013a48:	f7ff fc34 	bl	900132b4 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE>
90013a4c:	2e00      	cmp	r6, #0
90013a4e:	dc5b      	bgt.n	90013b08 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a4>
90013a50:	af17      	add	r7, sp, #92	; 0x5c
90013a52:	f04f 0900 	mov.w	r9, #0
90013a56:	7c23      	ldrb	r3, [r4, #16]
90013a58:	2b00      	cmp	r3, #0
90013a5a:	f000 80ae 	beq.w	90013bba <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x256>
90013a5e:	a80e      	add	r0, sp, #56	; 0x38
90013a60:	f7ff fe4d 	bl	900136fe <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
90013a64:	f1ba 0f00 	cmp.w	sl, #0
90013a68:	f000 80a2 	beq.w	90013bb0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x24c>
90013a6c:	7c23      	ldrb	r3, [r4, #16]
90013a6e:	2264      	movs	r2, #100	; 0x64
90013a70:	4639      	mov	r1, r7
90013a72:	a849      	add	r0, sp, #292	; 0x124
90013a74:	9309      	str	r3, [sp, #36]	; 0x24
90013a76:	f00f fd5e 	bl	90023536 <memcpy>
90013a7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
90013a7c:	2b00      	cmp	r3, #0
90013a7e:	f000 80a4 	beq.w	90013bca <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x266>
90013a82:	f9bd 3056 	ldrsh.w	r3, [sp, #86]	; 0x56
90013a86:	7922      	ldrb	r2, [r4, #4]
90013a88:	2a01      	cmp	r2, #1
90013a8a:	f040 8087 	bne.w	90013b9c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
90013a8e:	f9bd 0034 	ldrsh.w	r0, [sp, #52]	; 0x34
90013a92:	1ac0      	subs	r0, r0, r3
90013a94:	2302      	movs	r3, #2
90013a96:	fb90 f0f3 	sdiv	r0, r0, r3
90013a9a:	b200      	sxth	r0, r0
90013a9c:	7c23      	ldrb	r3, [r4, #16]
90013a9e:	2b00      	cmp	r3, #0
90013aa0:	f000 8088 	beq.w	90013bb4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x250>
90013aa4:	f8bd 204e 	ldrh.w	r2, [sp, #78]	; 0x4e
90013aa8:	f89d 105a 	ldrb.w	r1, [sp, #90]	; 0x5a
90013aac:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
90013ab0:	e9cd 2105 	strd	r2, r1, [sp, #20]
90013ab4:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
90013ab8:	2100      	movs	r1, #0
90013aba:	4410      	add	r0, r2
90013abc:	4642      	mov	r2, r8
90013abe:	b200      	sxth	r0, r0
90013ac0:	e9cd 9703 	strd	r9, r7, [sp, #12]
90013ac4:	9000      	str	r0, [sp, #0]
90013ac6:	4658      	mov	r0, fp
90013ac8:	e9cd 5401 	strd	r5, r4, [sp, #4]
90013acc:	f7ff fca2 	bl	90013414 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>
90013ad0:	2800      	cmp	r0, #0
90013ad2:	d160      	bne.n	90013b96 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x232>
90013ad4:	b2b2      	uxth	r2, r6
90013ad6:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
90013ada:	f8bd 1036 	ldrh.w	r1, [sp, #54]	; 0x36
90013ade:	4413      	add	r3, r2
90013ae0:	1a8a      	subs	r2, r1, r2
90013ae2:	b21b      	sxth	r3, r3
90013ae4:	f8ad 2036 	strh.w	r2, [sp, #54]	; 0x36
90013ae8:	f89d 205a 	ldrb.w	r2, [sp, #90]	; 0x5a
90013aec:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
90013af0:	2a00      	cmp	r2, #0
90013af2:	d150      	bne.n	90013b96 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x232>
90013af4:	6822      	ldr	r2, [r4, #0]
90013af6:	8869      	ldrh	r1, [r5, #2]
90013af8:	7a12      	ldrb	r2, [r2, #8]
90013afa:	1a9b      	subs	r3, r3, r2
90013afc:	88ea      	ldrh	r2, [r5, #6]
90013afe:	440a      	add	r2, r1
90013b00:	b212      	sxth	r2, r2
90013b02:	4293      	cmp	r3, r2
90013b04:	dda7      	ble.n	90013a56 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xf2>
90013b06:	e046      	b.n	90013b96 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x232>
90013b08:	7c23      	ldrb	r3, [r4, #16]
90013b0a:	444f      	add	r7, r9
90013b0c:	b1c3      	cbz	r3, 90013b40 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1dc>
90013b0e:	f64f 79ff 	movw	r9, #65535	; 0xffff
90013b12:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
90013b16:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
90013b1a:	443b      	add	r3, r7
90013b1c:	4293      	cmp	r3, r2
90013b1e:	da97      	bge.n	90013a50 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xec>
90013b20:	a80e      	add	r0, sp, #56	; 0x38
90013b22:	f7ff fdec 	bl	900136fe <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
90013b26:	f8bd 304e 	ldrh.w	r3, [sp, #78]	; 0x4e
90013b2a:	3b01      	subs	r3, #1
90013b2c:	b29b      	uxth	r3, r3
90013b2e:	454b      	cmp	r3, r9
90013b30:	9309      	str	r3, [sp, #36]	; 0x24
90013b32:	d021      	beq.n	90013b78 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x214>
90013b34:	7961      	ldrb	r1, [r4, #5]
90013b36:	a817      	add	r0, sp, #92	; 0x5c
90013b38:	f7f1 fe28 	bl	9000578c <_ZN8touchgfx12TextProvider15getNextLigatureEh>
90013b3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
90013b3e:	e7f4      	b.n	90013b2a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1c6>
90013b40:	fa1f f986 	uxth.w	r9, r6
90013b44:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
90013b48:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
90013b4c:	443b      	add	r3, r7
90013b4e:	4293      	cmp	r3, r2
90013b50:	f6bf af7e 	bge.w	90013a50 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xec>
90013b54:	a817      	add	r0, sp, #92	; 0x5c
90013b56:	f002 fbfd 	bl	90016354 <_ZN8touchgfx12TextProvider11getNextCharEv>
90013b5a:	b1e0      	cbz	r0, 90013b96 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x232>
90013b5c:	280a      	cmp	r0, #10
90013b5e:	d1f1      	bne.n	90013b44 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1e0>
90013b60:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
90013b64:	444b      	add	r3, r9
90013b66:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
90013b6a:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
90013b6e:	eba3 0309 	sub.w	r3, r3, r9
90013b72:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
90013b76:	e7e5      	b.n	90013b44 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1e0>
90013b78:	b2b3      	uxth	r3, r6
90013b7a:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
90013b7e:	441a      	add	r2, r3
90013b80:	f8ad 2032 	strh.w	r2, [sp, #50]	; 0x32
90013b84:	f8bd 2036 	ldrh.w	r2, [sp, #54]	; 0x36
90013b88:	1ad3      	subs	r3, r2, r3
90013b8a:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
90013b8e:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
90013b92:	2b00      	cmp	r3, #0
90013b94:	d1bd      	bne.n	90013b12 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1ae>
90013b96:	b063      	add	sp, #396	; 0x18c
90013b98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90013b9c:	2a02      	cmp	r2, #2
90013b9e:	d105      	bne.n	90013bac <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x248>
90013ba0:	7be2      	ldrb	r2, [r4, #15]
90013ba2:	f8bd 0034 	ldrh.w	r0, [sp, #52]	; 0x34
90013ba6:	1a80      	subs	r0, r0, r2
90013ba8:	1ac0      	subs	r0, r0, r3
90013baa:	e776      	b.n	90013a9a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x136>
90013bac:	2000      	movs	r0, #0
90013bae:	e775      	b.n	90013a9c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x138>
90013bb0:	7be0      	ldrb	r0, [r4, #15]
90013bb2:	e773      	b.n	90013a9c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x138>
90013bb4:	f647 72ff 	movw	r2, #32767	; 0x7fff
90013bb8:	e776      	b.n	90013aa8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x144>
90013bba:	f1ba 0f00 	cmp.w	sl, #0
90013bbe:	d0f7      	beq.n	90013bb0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x24c>
90013bc0:	2264      	movs	r2, #100	; 0x64
90013bc2:	4639      	mov	r1, r7
90013bc4:	a849      	add	r0, sp, #292	; 0x124
90013bc6:	f00f fcb6 	bl	90023536 <memcpy>
90013bca:	2300      	movs	r3, #0
90013bcc:	f647 72ff 	movw	r2, #32767	; 0x7fff
90013bd0:	6821      	ldr	r1, [r4, #0]
90013bd2:	a849      	add	r0, sp, #292	; 0x124
90013bd4:	f7ff fbb1 	bl	9001333a <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
90013bd8:	b203      	sxth	r3, r0
90013bda:	e754      	b.n	90013a86 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x122>

90013bdc <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>:
90013bdc:	2b03      	cmp	r3, #3
90013bde:	d818      	bhi.n	90013c12 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x36>
90013be0:	e8df f003 	tbb	[pc, r3]
90013be4:	130d0602 	.word	0x130d0602
90013be8:	f9b0 2000 	ldrsh.w	r2, [r0]
90013bec:	1850      	adds	r0, r2, r1
90013bee:	4770      	bx	lr
90013bf0:	8803      	ldrh	r3, [r0, #0]
90013bf2:	8880      	ldrh	r0, [r0, #4]
90013bf4:	4418      	add	r0, r3
90013bf6:	b200      	sxth	r0, r0
90013bf8:	1a80      	subs	r0, r0, r2
90013bfa:	3801      	subs	r0, #1
90013bfc:	4770      	bx	lr
90013bfe:	8803      	ldrh	r3, [r0, #0]
90013c00:	8880      	ldrh	r0, [r0, #4]
90013c02:	4418      	add	r0, r3
90013c04:	b200      	sxth	r0, r0
90013c06:	1a40      	subs	r0, r0, r1
90013c08:	e7f7      	b.n	90013bfa <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x1e>
90013c0a:	f9b0 0000 	ldrsh.w	r0, [r0]
90013c0e:	4410      	add	r0, r2
90013c10:	4770      	bx	lr
90013c12:	2000      	movs	r0, #0
90013c14:	4770      	bx	lr

90013c16 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>:
90013c16:	2b03      	cmp	r3, #3
90013c18:	d817      	bhi.n	90013c4a <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x34>
90013c1a:	e8df f003 	tbb	[pc, r3]
90013c1e:	0602      	.short	0x0602
90013c20:	1009      	.short	0x1009
90013c22:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
90013c26:	1850      	adds	r0, r2, r1
90013c28:	4770      	bx	lr
90013c2a:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
90013c2e:	e7fa      	b.n	90013c26 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x10>
90013c30:	8843      	ldrh	r3, [r0, #2]
90013c32:	88c0      	ldrh	r0, [r0, #6]
90013c34:	4418      	add	r0, r3
90013c36:	b200      	sxth	r0, r0
90013c38:	1a80      	subs	r0, r0, r2
90013c3a:	3801      	subs	r0, #1
90013c3c:	4770      	bx	lr
90013c3e:	8843      	ldrh	r3, [r0, #2]
90013c40:	88c0      	ldrh	r0, [r0, #6]
90013c42:	4418      	add	r0, r3
90013c44:	b200      	sxth	r0, r0
90013c46:	1a40      	subs	r0, r0, r1
90013c48:	e7f7      	b.n	90013c3a <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x24>
90013c4a:	2000      	movs	r0, #0
90013c4c:	4770      	bx	lr
	...

90013c50 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE>:
90013c50:	4b01      	ldr	r3, [pc, #4]	; (90013c58 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE+0x8>)
90013c52:	2200      	movs	r2, #0
90013c54:	601a      	str	r2, [r3, #0]
90013c56:	4770      	bx	lr
90013c58:	2402626c 	.word	0x2402626c

90013c5c <_ZN8touchgfx16TouchCalibration4clzuEm>:
90013c5c:	4603      	mov	r3, r0
90013c5e:	b1c8      	cbz	r0, 90013c94 <_ZN8touchgfx16TouchCalibration4clzuEm+0x38>
90013c60:	0c02      	lsrs	r2, r0, #16
90013c62:	0412      	lsls	r2, r2, #16
90013c64:	b9a2      	cbnz	r2, 90013c90 <_ZN8touchgfx16TouchCalibration4clzuEm+0x34>
90013c66:	0403      	lsls	r3, r0, #16
90013c68:	2010      	movs	r0, #16
90013c6a:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
90013c6e:	bf04      	itt	eq
90013c70:	021b      	lsleq	r3, r3, #8
90013c72:	3008      	addeq	r0, #8
90013c74:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
90013c78:	bf04      	itt	eq
90013c7a:	011b      	lsleq	r3, r3, #4
90013c7c:	3004      	addeq	r0, #4
90013c7e:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
90013c82:	bf04      	itt	eq
90013c84:	009b      	lsleq	r3, r3, #2
90013c86:	3002      	addeq	r0, #2
90013c88:	2b00      	cmp	r3, #0
90013c8a:	db04      	blt.n	90013c96 <_ZN8touchgfx16TouchCalibration4clzuEm+0x3a>
90013c8c:	3001      	adds	r0, #1
90013c8e:	4770      	bx	lr
90013c90:	2000      	movs	r0, #0
90013c92:	e7ea      	b.n	90013c6a <_ZN8touchgfx16TouchCalibration4clzuEm+0xe>
90013c94:	2020      	movs	r0, #32
90013c96:	4770      	bx	lr

90013c98 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>:
90013c98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90013c9c:	b087      	sub	sp, #28
90013c9e:	4681      	mov	r9, r0
90013ca0:	4698      	mov	r8, r3
90013ca2:	4610      	mov	r0, r2
90013ca4:	460d      	mov	r5, r1
90013ca6:	e9dd 4710 	ldrd	r4, r7, [sp, #64]	; 0x40
90013caa:	b981      	cbnz	r1, 90013cce <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x36>
90013cac:	b14b      	cbz	r3, 90013cc2 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x2a>
90013cae:	460b      	mov	r3, r1
90013cb0:	464a      	mov	r2, r9
90013cb2:	4641      	mov	r1, r8
90013cb4:	e9cd 4700 	strd	r4, r7, [sp]
90013cb8:	f7ff ffee 	bl	90013c98 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
90013cbc:	b007      	add	sp, #28
90013cbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90013cc2:	f04f 33ff 	mov.w	r3, #4294967295
90013cc6:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
90013cca:	603b      	str	r3, [r7, #0]
90013ccc:	e7f6      	b.n	90013cbc <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>
90013cce:	fa32 fa01 	lsrs.w	sl, r2, r1
90013cd2:	d107      	bne.n	90013ce4 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x4c>
90013cd4:	fb09 f602 	mul.w	r6, r9, r2
90013cd8:	fbb6 f0f4 	udiv	r0, r6, r4
90013cdc:	fb04 6610 	mls	r6, r4, r0, r6
90013ce0:	603e      	str	r6, [r7, #0]
90013ce2:	e7eb      	b.n	90013cbc <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>
90013ce4:	2601      	movs	r6, #1
90013ce6:	fa09 fb01 	lsl.w	fp, r9, r1
90013cea:	408e      	lsls	r6, r1
90013cec:	fbbb f3f4 	udiv	r3, fp, r4
90013cf0:	3e01      	subs	r6, #1
90013cf2:	9302      	str	r3, [sp, #8]
90013cf4:	fb0a f303 	mul.w	r3, sl, r3
90013cf8:	4016      	ands	r6, r2
90013cfa:	9303      	str	r3, [sp, #12]
90013cfc:	4630      	mov	r0, r6
90013cfe:	f7ff ffad 	bl	90013c5c <_ZN8touchgfx16TouchCalibration4clzuEm>
90013d02:	464a      	mov	r2, r9
90013d04:	460b      	mov	r3, r1
90013d06:	4601      	mov	r1, r0
90013d08:	4630      	mov	r0, r6
90013d0a:	e9cd 4700 	strd	r4, r7, [sp]
90013d0e:	f7ff ffc3 	bl	90013c98 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
90013d12:	9b02      	ldr	r3, [sp, #8]
90013d14:	4606      	mov	r6, r0
90013d16:	eb05 0108 	add.w	r1, r5, r8
90013d1a:	fb04 bb13 	mls	fp, r4, r3, fp
90013d1e:	4658      	mov	r0, fp
90013d20:	f7ff ff9c 	bl	90013c5c <_ZN8touchgfx16TouchCalibration4clzuEm>
90013d24:	ab05      	add	r3, sp, #20
90013d26:	465a      	mov	r2, fp
90013d28:	e9cd 4300 	strd	r4, r3, [sp]
90013d2c:	4603      	mov	r3, r0
90013d2e:	4650      	mov	r0, sl
90013d30:	f7ff ffb2 	bl	90013c98 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
90013d34:	6839      	ldr	r1, [r7, #0]
90013d36:	9a05      	ldr	r2, [sp, #20]
90013d38:	9b03      	ldr	r3, [sp, #12]
90013d3a:	4411      	add	r1, r2
90013d3c:	fbb1 f2f4 	udiv	r2, r1, r4
90013d40:	18d3      	adds	r3, r2, r3
90013d42:	fb04 1412 	mls	r4, r4, r2, r1
90013d46:	441e      	add	r6, r3
90013d48:	603c      	str	r4, [r7, #0]
90013d4a:	4430      	add	r0, r6
90013d4c:	e7b6      	b.n	90013cbc <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>

90013d4e <_ZN8touchgfx16TouchCalibration6muldivEllllRl>:
90013d4e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
90013d52:	b085      	sub	sp, #20
90013d54:	f1b0 0900 	subs.w	r9, r0, #0
90013d58:	461d      	mov	r5, r3
90013d5a:	4617      	mov	r7, r2
90013d5c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
90013d5e:	bfbb      	ittet	lt
90013d60:	f1c9 0900 	rsblt	r9, r9, #0
90013d64:	f04f 36ff 	movlt.w	r6, #4294967295
90013d68:	2601      	movge	r6, #1
90013d6a:	6823      	ldrlt	r3, [r4, #0]
90013d6c:	bfbc      	itt	lt
90013d6e:	425b      	neglt	r3, r3
90013d70:	6023      	strlt	r3, [r4, #0]
90013d72:	2a00      	cmp	r2, #0
90013d74:	da04      	bge.n	90013d80 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x32>
90013d76:	6823      	ldr	r3, [r4, #0]
90013d78:	4257      	negs	r7, r2
90013d7a:	4276      	negs	r6, r6
90013d7c:	425b      	negs	r3, r3
90013d7e:	6023      	str	r3, [r4, #0]
90013d80:	2d00      	cmp	r5, #0
90013d82:	4638      	mov	r0, r7
90013d84:	bfba      	itte	lt
90013d86:	426d      	neglt	r5, r5
90013d88:	f04f 38ff 	movlt.w	r8, #4294967295
90013d8c:	f04f 0801 	movge.w	r8, #1
90013d90:	f7ff ff64 	bl	90013c5c <_ZN8touchgfx16TouchCalibration4clzuEm>
90013d94:	ab03      	add	r3, sp, #12
90013d96:	463a      	mov	r2, r7
90013d98:	e9cd 5300 	strd	r5, r3, [sp]
90013d9c:	4603      	mov	r3, r0
90013d9e:	4648      	mov	r0, r9
90013da0:	f7ff ff7a 	bl	90013c98 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
90013da4:	6823      	ldr	r3, [r4, #0]
90013da6:	9a03      	ldr	r2, [sp, #12]
90013da8:	4546      	cmp	r6, r8
90013daa:	441a      	add	r2, r3
90013dac:	fb92 f3f5 	sdiv	r3, r2, r5
90013db0:	4418      	add	r0, r3
90013db2:	fb05 2313 	mls	r3, r5, r3, r2
90013db6:	bf18      	it	ne
90013db8:	4240      	negne	r0, r0
90013dba:	1c72      	adds	r2, r6, #1
90013dbc:	6023      	str	r3, [r4, #0]
90013dbe:	d105      	bne.n	90013dcc <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7e>
90013dc0:	2b00      	cmp	r3, #0
90013dc2:	f1c3 0200 	rsb	r2, r3, #0
90013dc6:	db0b      	blt.n	90013de0 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x92>
90013dc8:	6022      	str	r2, [r4, #0]
90013dca:	e006      	b.n	90013dda <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
90013dcc:	2e01      	cmp	r6, #1
90013dce:	d104      	bne.n	90013dda <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
90013dd0:	2b00      	cmp	r3, #0
90013dd2:	da02      	bge.n	90013dda <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
90013dd4:	442b      	add	r3, r5
90013dd6:	3801      	subs	r0, #1
90013dd8:	6023      	str	r3, [r4, #0]
90013dda:	b005      	add	sp, #20
90013ddc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
90013de0:	3801      	subs	r0, #1
90013de2:	1b52      	subs	r2, r2, r5
90013de4:	e7f0      	b.n	90013dc8 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7a>
	...

90013de8 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>:
90013de8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
90013dec:	4c1c      	ldr	r4, [pc, #112]	; (90013e60 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x78>)
90013dee:	4605      	mov	r5, r0
90013df0:	6807      	ldr	r7, [r0, #0]
90013df2:	69a3      	ldr	r3, [r4, #24]
90013df4:	b92b      	cbnz	r3, 90013e02 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x1a>
90013df6:	6840      	ldr	r0, [r0, #4]
90013df8:	e9c5 7000 	strd	r7, r0, [r5]
90013dfc:	b004      	add	sp, #16
90013dfe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
90013e02:	f04f 0802 	mov.w	r8, #2
90013e06:	68a2      	ldr	r2, [r4, #8]
90013e08:	ae04      	add	r6, sp, #16
90013e0a:	6820      	ldr	r0, [r4, #0]
90013e0c:	fb93 f1f8 	sdiv	r1, r3, r8
90013e10:	440a      	add	r2, r1
90013e12:	69e1      	ldr	r1, [r4, #28]
90013e14:	f846 2d04 	str.w	r2, [r6, #-4]!
90013e18:	463a      	mov	r2, r7
90013e1a:	9600      	str	r6, [sp, #0]
90013e1c:	f7ff ff97 	bl	90013d4e <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
90013e20:	69a3      	ldr	r3, [r4, #24]
90013e22:	4607      	mov	r7, r0
90013e24:	686a      	ldr	r2, [r5, #4]
90013e26:	6a21      	ldr	r1, [r4, #32]
90013e28:	9600      	str	r6, [sp, #0]
90013e2a:	6860      	ldr	r0, [r4, #4]
90013e2c:	f7ff ff8f 	bl	90013d4e <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
90013e30:	69a3      	ldr	r3, [r4, #24]
90013e32:	6962      	ldr	r2, [r4, #20]
90013e34:	4407      	add	r7, r0
90013e36:	6a61      	ldr	r1, [r4, #36]	; 0x24
90013e38:	9600      	str	r6, [sp, #0]
90013e3a:	68e0      	ldr	r0, [r4, #12]
90013e3c:	fb93 f8f8 	sdiv	r8, r3, r8
90013e40:	4442      	add	r2, r8
90013e42:	9203      	str	r2, [sp, #12]
90013e44:	682a      	ldr	r2, [r5, #0]
90013e46:	f7ff ff82 	bl	90013d4e <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
90013e4a:	4680      	mov	r8, r0
90013e4c:	9600      	str	r6, [sp, #0]
90013e4e:	69a3      	ldr	r3, [r4, #24]
90013e50:	686a      	ldr	r2, [r5, #4]
90013e52:	6aa1      	ldr	r1, [r4, #40]	; 0x28
90013e54:	6920      	ldr	r0, [r4, #16]
90013e56:	f7ff ff7a 	bl	90013d4e <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
90013e5a:	4440      	add	r0, r8
90013e5c:	e7cc      	b.n	90013df8 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x10>
90013e5e:	bf00      	nop
90013e60:	24026270 	.word	0x24026270

90013e64 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>:
90013e64:	4b07      	ldr	r3, [pc, #28]	; (90013e84 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x20>)
90013e66:	781b      	ldrb	r3, [r3, #0]
90013e68:	2b01      	cmp	r3, #1
90013e6a:	d109      	bne.n	90013e80 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x1c>
90013e6c:	f9b1 3000 	ldrsh.w	r3, [r1]
90013e70:	f9b0 2000 	ldrsh.w	r2, [r0]
90013e74:	8003      	strh	r3, [r0, #0]
90013e76:	4b04      	ldr	r3, [pc, #16]	; (90013e88 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x24>)
90013e78:	881b      	ldrh	r3, [r3, #0]
90013e7a:	3b01      	subs	r3, #1
90013e7c:	1a9b      	subs	r3, r3, r2
90013e7e:	800b      	strh	r3, [r1, #0]
90013e80:	4770      	bx	lr
90013e82:	bf00      	nop
90013e84:	2402625c 	.word	0x2402625c
90013e88:	24026258 	.word	0x24026258

90013e8c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>:
90013e8c:	4b07      	ldr	r3, [pc, #28]	; (90013eac <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x20>)
90013e8e:	b510      	push	{r4, lr}
90013e90:	781b      	ldrb	r3, [r3, #0]
90013e92:	2b01      	cmp	r3, #1
90013e94:	d108      	bne.n	90013ea8 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x1c>
90013e96:	4b06      	ldr	r3, [pc, #24]	; (90013eb0 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x24>)
90013e98:	880c      	ldrh	r4, [r1, #0]
90013e9a:	881b      	ldrh	r3, [r3, #0]
90013e9c:	f9b0 2000 	ldrsh.w	r2, [r0]
90013ea0:	3b01      	subs	r3, #1
90013ea2:	1b1b      	subs	r3, r3, r4
90013ea4:	8003      	strh	r3, [r0, #0]
90013ea6:	800a      	strh	r2, [r1, #0]
90013ea8:	bd10      	pop	{r4, pc}
90013eaa:	bf00      	nop
90013eac:	2402625c 	.word	0x2402625c
90013eb0:	24026258 	.word	0x24026258

90013eb4 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>:
90013eb4:	4b0a      	ldr	r3, [pc, #40]	; (90013ee0 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x2c>)
90013eb6:	b510      	push	{r4, lr}
90013eb8:	781b      	ldrb	r3, [r3, #0]
90013eba:	2b01      	cmp	r3, #1
90013ebc:	d10e      	bne.n	90013edc <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x28>
90013ebe:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
90013ec2:	8843      	ldrh	r3, [r0, #2]
90013ec4:	f9b0 4000 	ldrsh.w	r4, [r0]
90013ec8:	18ca      	adds	r2, r1, r3
90013eca:	4b06      	ldr	r3, [pc, #24]	; (90013ee4 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x30>)
90013ecc:	8044      	strh	r4, [r0, #2]
90013ece:	881b      	ldrh	r3, [r3, #0]
90013ed0:	1a9b      	subs	r3, r3, r2
90013ed2:	8003      	strh	r3, [r0, #0]
90013ed4:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
90013ed8:	8081      	strh	r1, [r0, #4]
90013eda:	80c3      	strh	r3, [r0, #6]
90013edc:	bd10      	pop	{r4, pc}
90013ede:	bf00      	nop
90013ee0:	2402625c 	.word	0x2402625c
90013ee4:	24026258 	.word	0x24026258

90013ee8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>:
90013ee8:	4b08      	ldr	r3, [pc, #32]	; (90013f0c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x24>)
90013eea:	781b      	ldrb	r3, [r3, #0]
90013eec:	2b01      	cmp	r3, #1
90013eee:	d10c      	bne.n	90013f0a <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x22>
90013ef0:	8803      	ldrh	r3, [r0, #0]
90013ef2:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
90013ef6:	8842      	ldrh	r2, [r0, #2]
90013ef8:	8002      	strh	r2, [r0, #0]
90013efa:	185a      	adds	r2, r3, r1
90013efc:	4b04      	ldr	r3, [pc, #16]	; (90013f10 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x28>)
90013efe:	881b      	ldrh	r3, [r3, #0]
90013f00:	1a9b      	subs	r3, r3, r2
90013f02:	8043      	strh	r3, [r0, #2]
90013f04:	88c3      	ldrh	r3, [r0, #6]
90013f06:	80c1      	strh	r1, [r0, #6]
90013f08:	8083      	strh	r3, [r0, #4]
90013f0a:	4770      	bx	lr
90013f0c:	2402625c 	.word	0x2402625c
90013f10:	24026258 	.word	0x24026258

90013f14 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>:
90013f14:	4b07      	ldr	r3, [pc, #28]	; (90013f34 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x20>)
90013f16:	b510      	push	{r4, lr}
90013f18:	781b      	ldrb	r3, [r3, #0]
90013f1a:	2b01      	cmp	r3, #1
90013f1c:	d108      	bne.n	90013f30 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x1c>
90013f1e:	f9b1 3000 	ldrsh.w	r3, [r1]
90013f22:	f9b0 4000 	ldrsh.w	r4, [r0]
90013f26:	8003      	strh	r3, [r0, #0]
90013f28:	8893      	ldrh	r3, [r2, #4]
90013f2a:	3b01      	subs	r3, #1
90013f2c:	1b1b      	subs	r3, r3, r4
90013f2e:	800b      	strh	r3, [r1, #0]
90013f30:	bd10      	pop	{r4, pc}
90013f32:	bf00      	nop
90013f34:	2402625c 	.word	0x2402625c

90013f38 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>:
90013f38:	4b0a      	ldr	r3, [pc, #40]	; (90013f64 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x2c>)
90013f3a:	460a      	mov	r2, r1
90013f3c:	b510      	push	{r4, lr}
90013f3e:	781b      	ldrb	r3, [r3, #0]
90013f40:	2b01      	cmp	r3, #1
90013f42:	d10d      	bne.n	90013f60 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x28>
90013f44:	8881      	ldrh	r1, [r0, #4]
90013f46:	8803      	ldrh	r3, [r0, #0]
90013f48:	440b      	add	r3, r1
90013f4a:	4601      	mov	r1, r0
90013f4c:	3b01      	subs	r3, #1
90013f4e:	f821 3b02 	strh.w	r3, [r1], #2
90013f52:	f7ff ffdf 	bl	90013f14 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
90013f56:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
90013f5a:	88c2      	ldrh	r2, [r0, #6]
90013f5c:	80c3      	strh	r3, [r0, #6]
90013f5e:	8082      	strh	r2, [r0, #4]
90013f60:	bd10      	pop	{r4, pc}
90013f62:	bf00      	nop
90013f64:	2402625c 	.word	0x2402625c

90013f68 <_ZN8touchgfx11Application19changeToStartScreenEv>:
90013f68:	4770      	bx	lr
	...

90013f6c <_ZN8touchgfx11Application13requestRedrawEv>:
90013f6c:	4b06      	ldr	r3, [pc, #24]	; (90013f88 <_ZN8touchgfx11Application13requestRedrawEv+0x1c>)
90013f6e:	2100      	movs	r1, #0
90013f70:	f9b3 2000 	ldrsh.w	r2, [r3]
90013f74:	4b05      	ldr	r3, [pc, #20]	; (90013f8c <_ZN8touchgfx11Application13requestRedrawEv+0x20>)
90013f76:	f8c0 1130 	str.w	r1, [r0, #304]	; 0x130
90013f7a:	f9b3 3000 	ldrsh.w	r3, [r3]
90013f7e:	f8a0 2134 	strh.w	r2, [r0, #308]	; 0x134
90013f82:	f8a0 3136 	strh.w	r3, [r0, #310]	; 0x136
90013f86:	4770      	bx	lr
90013f88:	24026258 	.word	0x24026258
90013f8c:	2402625a 	.word	0x2402625a

90013f90 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE>:
90013f90:	4b03      	ldr	r3, [pc, #12]	; (90013fa0 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0x10>)
90013f92:	6818      	ldr	r0, [r3, #0]
90013f94:	b110      	cbz	r0, 90013f9c <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0xc>
90013f96:	6803      	ldr	r3, [r0, #0]
90013f98:	699b      	ldr	r3, [r3, #24]
90013f9a:	4718      	bx	r3
90013f9c:	4770      	bx	lr
90013f9e:	bf00      	nop
90013fa0:	240262a0 	.word	0x240262a0

90013fa4 <_ZN8touchgfx11Application29handlePendingScreenTransitionEv>:
90013fa4:	4770      	bx	lr
	...

90013fa8 <_ZN8touchgfx11Application4drawEv>:
90013fa8:	4b09      	ldr	r3, [pc, #36]	; (90013fd0 <_ZN8touchgfx11Application4drawEv+0x28>)
90013faa:	b507      	push	{r0, r1, r2, lr}
90013fac:	f9b3 2000 	ldrsh.w	r2, [r3]
90013fb0:	2100      	movs	r1, #0
90013fb2:	4b08      	ldr	r3, [pc, #32]	; (90013fd4 <_ZN8touchgfx11Application4drawEv+0x2c>)
90013fb4:	9100      	str	r1, [sp, #0]
90013fb6:	4669      	mov	r1, sp
90013fb8:	f9b3 3000 	ldrsh.w	r3, [r3]
90013fbc:	f8ad 2004 	strh.w	r2, [sp, #4]
90013fc0:	f8ad 3006 	strh.w	r3, [sp, #6]
90013fc4:	6803      	ldr	r3, [r0, #0]
90013fc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
90013fc8:	4798      	blx	r3
90013fca:	b003      	add	sp, #12
90013fcc:	f85d fb04 	ldr.w	pc, [sp], #4
90013fd0:	24026258 	.word	0x24026258
90013fd4:	2402625a 	.word	0x2402625a

90013fd8 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE>:
90013fd8:	4b03      	ldr	r3, [pc, #12]	; (90013fe8 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0x10>)
90013fda:	6818      	ldr	r0, [r3, #0]
90013fdc:	b110      	cbz	r0, 90013fe4 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0xc>
90013fde:	6803      	ldr	r3, [r0, #0]
90013fe0:	69db      	ldr	r3, [r3, #28]
90013fe2:	4718      	bx	r3
90013fe4:	4770      	bx	lr
90013fe6:	bf00      	nop
90013fe8:	240262a0 	.word	0x240262a0

90013fec <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE>:
90013fec:	4b03      	ldr	r3, [pc, #12]	; (90013ffc <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0x10>)
90013fee:	6818      	ldr	r0, [r3, #0]
90013ff0:	b110      	cbz	r0, 90013ff8 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0xc>
90013ff2:	6803      	ldr	r3, [r0, #0]
90013ff4:	6a1b      	ldr	r3, [r3, #32]
90013ff6:	4718      	bx	r3
90013ff8:	4770      	bx	lr
90013ffa:	bf00      	nop
90013ffc:	240262a0 	.word	0x240262a0

90014000 <_ZN8touchgfx11Application16clearCachedAreasEv>:
90014000:	2300      	movs	r3, #0
90014002:	f8a0 30ec 	strh.w	r3, [r0, #236]	; 0xec
90014006:	4770      	bx	lr

90014008 <_ZN8touchgfx11Application14handleKeyEventEh>:
90014008:	4b03      	ldr	r3, [pc, #12]	; (90014018 <_ZN8touchgfx11Application14handleKeyEventEh+0x10>)
9001400a:	6818      	ldr	r0, [r3, #0]
9001400c:	b110      	cbz	r0, 90014014 <_ZN8touchgfx11Application14handleKeyEventEh+0xc>
9001400e:	6803      	ldr	r3, [r0, #0]
90014010:	6a9b      	ldr	r3, [r3, #40]	; 0x28
90014012:	4718      	bx	r3
90014014:	4770      	bx	lr
90014016:	bf00      	nop
90014018:	240262a0 	.word	0x240262a0

9001401c <_ZN8touchgfx11ApplicationD1Ev>:
9001401c:	4770      	bx	lr

9001401e <_ZN8touchgfx11ApplicationD0Ev>:
9001401e:	b510      	push	{r4, lr}
90014020:	4604      	mov	r4, r0
90014022:	f44f 719e 	mov.w	r1, #316	; 0x13c
90014026:	f00e fedc 	bl	90022de2 <_ZdlPvj>
9001402a:	4620      	mov	r0, r4
9001402c:	bd10      	pop	{r4, pc}

9001402e <_ZNK8touchgfx4Rect9intersectERKS0_>:
9001402e:	b510      	push	{r4, lr}
90014030:	f9b1 4000 	ldrsh.w	r4, [r1]
90014034:	888a      	ldrh	r2, [r1, #4]
90014036:	f9b0 3000 	ldrsh.w	r3, [r0]
9001403a:	4422      	add	r2, r4
9001403c:	b212      	sxth	r2, r2
9001403e:	4293      	cmp	r3, r2
90014040:	da15      	bge.n	9001406e <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
90014042:	8882      	ldrh	r2, [r0, #4]
90014044:	4413      	add	r3, r2
90014046:	b21b      	sxth	r3, r3
90014048:	429c      	cmp	r4, r3
9001404a:	da10      	bge.n	9001406e <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
9001404c:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
90014050:	88c9      	ldrh	r1, [r1, #6]
90014052:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
90014056:	4419      	add	r1, r3
90014058:	b209      	sxth	r1, r1
9001405a:	428a      	cmp	r2, r1
9001405c:	da07      	bge.n	9001406e <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
9001405e:	88c0      	ldrh	r0, [r0, #6]
90014060:	4410      	add	r0, r2
90014062:	b200      	sxth	r0, r0
90014064:	4283      	cmp	r3, r0
90014066:	bfac      	ite	ge
90014068:	2000      	movge	r0, #0
9001406a:	2001      	movlt	r0, #1
9001406c:	bd10      	pop	{r4, pc}
9001406e:	2000      	movs	r0, #0
90014070:	e7fc      	b.n	9001406c <_ZNK8touchgfx4Rect9intersectERKS0_+0x3e>

90014072 <_ZN8touchgfx4Rect10restrictToEss>:
90014072:	f9b0 3000 	ldrsh.w	r3, [r0]
90014076:	2b00      	cmp	r3, #0
90014078:	b510      	push	{r4, lr}
9001407a:	da04      	bge.n	90014086 <_ZN8touchgfx4Rect10restrictToEss+0x14>
9001407c:	8884      	ldrh	r4, [r0, #4]
9001407e:	4423      	add	r3, r4
90014080:	8083      	strh	r3, [r0, #4]
90014082:	2300      	movs	r3, #0
90014084:	8003      	strh	r3, [r0, #0]
90014086:	f9b0 4000 	ldrsh.w	r4, [r0]
9001408a:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
9001408e:	1b09      	subs	r1, r1, r4
90014090:	428b      	cmp	r3, r1
90014092:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
90014096:	bfc8      	it	gt
90014098:	8081      	strhgt	r1, [r0, #4]
9001409a:	2b00      	cmp	r3, #0
9001409c:	da04      	bge.n	900140a8 <_ZN8touchgfx4Rect10restrictToEss+0x36>
9001409e:	88c1      	ldrh	r1, [r0, #6]
900140a0:	440b      	add	r3, r1
900140a2:	80c3      	strh	r3, [r0, #6]
900140a4:	2300      	movs	r3, #0
900140a6:	8043      	strh	r3, [r0, #2]
900140a8:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
900140ac:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
900140b0:	1a52      	subs	r2, r2, r1
900140b2:	4293      	cmp	r3, r2
900140b4:	bfc8      	it	gt
900140b6:	80c2      	strhgt	r2, [r0, #6]
900140b8:	bd10      	pop	{r4, pc}
	...

900140bc <_ZN8touchgfx11Application4drawERNS_4RectE>:
900140bc:	4b10      	ldr	r3, [pc, #64]	; (90014100 <_ZN8touchgfx11Application4drawERNS_4RectE+0x44>)
900140be:	b510      	push	{r4, lr}
900140c0:	460c      	mov	r4, r1
900140c2:	f9b3 2000 	ldrsh.w	r2, [r3]
900140c6:	4b0f      	ldr	r3, [pc, #60]	; (90014104 <_ZN8touchgfx11Application4drawERNS_4RectE+0x48>)
900140c8:	4620      	mov	r0, r4
900140ca:	f9b3 1000 	ldrsh.w	r1, [r3]
900140ce:	f7ff ffd0 	bl	90014072 <_ZN8touchgfx4Rect10restrictToEss>
900140d2:	4b0d      	ldr	r3, [pc, #52]	; (90014108 <_ZN8touchgfx11Application4drawERNS_4RectE+0x4c>)
900140d4:	6818      	ldr	r0, [r3, #0]
900140d6:	b190      	cbz	r0, 900140fe <_ZN8touchgfx11Application4drawERNS_4RectE+0x42>
900140d8:	6803      	ldr	r3, [r0, #0]
900140da:	4621      	mov	r1, r4
900140dc:	689b      	ldr	r3, [r3, #8]
900140de:	4798      	blx	r3
900140e0:	4b0a      	ldr	r3, [pc, #40]	; (9001410c <_ZN8touchgfx11Application4drawERNS_4RectE+0x50>)
900140e2:	6818      	ldr	r0, [r3, #0]
900140e4:	b118      	cbz	r0, 900140ee <_ZN8touchgfx11Application4drawERNS_4RectE+0x32>
900140e6:	6803      	ldr	r3, [r0, #0]
900140e8:	4621      	mov	r1, r4
900140ea:	689b      	ldr	r3, [r3, #8]
900140ec:	4798      	blx	r3
900140ee:	4b08      	ldr	r3, [pc, #32]	; (90014110 <_ZN8touchgfx11Application4drawERNS_4RectE+0x54>)
900140f0:	4621      	mov	r1, r4
900140f2:	6818      	ldr	r0, [r3, #0]
900140f4:	6803      	ldr	r3, [r0, #0]
900140f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
900140fa:	69db      	ldr	r3, [r3, #28]
900140fc:	4718      	bx	r3
900140fe:	bd10      	pop	{r4, pc}
90014100:	2402625a 	.word	0x2402625a
90014104:	24026258 	.word	0x24026258
90014108:	240262a0 	.word	0x240262a0
9001410c:	2402629c 	.word	0x2402629c
90014110:	24026264 	.word	0x24026264

90014114 <_ZNK8touchgfx4Rect8includesERKS0_>:
90014114:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
90014116:	4606      	mov	r6, r0
90014118:	4608      	mov	r0, r1
9001411a:	460f      	mov	r7, r1
9001411c:	f7fd f99d 	bl	9001145a <_ZNK8touchgfx4Rect7isEmptyEv>
90014120:	b9e8      	cbnz	r0, 9001415e <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
90014122:	f9b7 5000 	ldrsh.w	r5, [r7]
90014126:	f9b6 4000 	ldrsh.w	r4, [r6]
9001412a:	42a5      	cmp	r5, r4
9001412c:	db17      	blt.n	9001415e <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
9001412e:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
90014132:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
90014136:	429a      	cmp	r2, r3
90014138:	db11      	blt.n	9001415e <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
9001413a:	88b9      	ldrh	r1, [r7, #4]
9001413c:	440d      	add	r5, r1
9001413e:	88b1      	ldrh	r1, [r6, #4]
90014140:	440c      	add	r4, r1
90014142:	b22d      	sxth	r5, r5
90014144:	b224      	sxth	r4, r4
90014146:	42a5      	cmp	r5, r4
90014148:	dc09      	bgt.n	9001415e <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
9001414a:	88f8      	ldrh	r0, [r7, #6]
9001414c:	4410      	add	r0, r2
9001414e:	88f2      	ldrh	r2, [r6, #6]
90014150:	4413      	add	r3, r2
90014152:	b200      	sxth	r0, r0
90014154:	b21b      	sxth	r3, r3
90014156:	4298      	cmp	r0, r3
90014158:	bfcc      	ite	gt
9001415a:	2000      	movgt	r0, #0
9001415c:	2001      	movle	r0, #1
9001415e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

90014160 <_ZN8touchgfx4Rect11expandToFitERKS0_>:
90014160:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
90014162:	4604      	mov	r4, r0
90014164:	4608      	mov	r0, r1
90014166:	460d      	mov	r5, r1
90014168:	f7fd f977 	bl	9001145a <_ZNK8touchgfx4Rect7isEmptyEv>
9001416c:	b978      	cbnz	r0, 9001418e <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
9001416e:	4620      	mov	r0, r4
90014170:	f7fd f973 	bl	9001145a <_ZNK8touchgfx4Rect7isEmptyEv>
90014174:	f9b5 6000 	ldrsh.w	r6, [r5]
90014178:	b150      	cbz	r0, 90014190 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x30>
9001417a:	8026      	strh	r6, [r4, #0]
9001417c:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
90014180:	8063      	strh	r3, [r4, #2]
90014182:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
90014186:	80a3      	strh	r3, [r4, #4]
90014188:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
9001418c:	80e3      	strh	r3, [r4, #6]
9001418e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
90014190:	f9b4 1000 	ldrsh.w	r1, [r4]
90014194:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
90014198:	42b1      	cmp	r1, r6
9001419a:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
9001419e:	f8b5 c004 	ldrh.w	ip, [r5, #4]
900141a2:	460f      	mov	r7, r1
900141a4:	88ed      	ldrh	r5, [r5, #6]
900141a6:	bfa8      	it	ge
900141a8:	4637      	movge	r7, r6
900141aa:	4293      	cmp	r3, r2
900141ac:	4618      	mov	r0, r3
900141ae:	4466      	add	r6, ip
900141b0:	f8b4 c004 	ldrh.w	ip, [r4, #4]
900141b4:	bfa8      	it	ge
900141b6:	4610      	movge	r0, r2
900141b8:	442a      	add	r2, r5
900141ba:	88e5      	ldrh	r5, [r4, #6]
900141bc:	4461      	add	r1, ip
900141be:	b236      	sxth	r6, r6
900141c0:	8027      	strh	r7, [r4, #0]
900141c2:	442b      	add	r3, r5
900141c4:	b209      	sxth	r1, r1
900141c6:	b212      	sxth	r2, r2
900141c8:	8060      	strh	r0, [r4, #2]
900141ca:	b21b      	sxth	r3, r3
900141cc:	428e      	cmp	r6, r1
900141ce:	bfac      	ite	ge
900141d0:	ebc7 0106 	rsbge	r1, r7, r6
900141d4:	ebc7 0101 	rsblt	r1, r7, r1
900141d8:	429a      	cmp	r2, r3
900141da:	bfac      	ite	ge
900141dc:	ebc0 0202 	rsbge	r2, r0, r2
900141e0:	ebc0 0203 	rsblt	r2, r0, r3
900141e4:	80a1      	strh	r1, [r4, #4]
900141e6:	80e2      	strh	r2, [r4, #6]
900141e8:	e7d1      	b.n	9001418e <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
	...

900141ec <_ZN8touchgfx11Application11getInstanceEv>:
900141ec:	4b01      	ldr	r3, [pc, #4]	; (900141f4 <_ZN8touchgfx11Application11getInstanceEv+0x8>)
900141ee:	6818      	ldr	r0, [r3, #0]
900141f0:	4770      	bx	lr
900141f2:	bf00      	nop
900141f4:	240262b0 	.word	0x240262b0

900141f8 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv>:
900141f8:	2300      	movs	r3, #0
900141fa:	b510      	push	{r4, lr}
900141fc:	f8a0 30a4 	strh.w	r3, [r0, #164]	; 0xa4
90014200:	4604      	mov	r4, r0
90014202:	f8b0 3080 	ldrh.w	r3, [r0, #128]	; 0x80
90014206:	f8a0 30a6 	strh.w	r3, [r0, #166]	; 0xa6
9001420a:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	; 0xa4
9001420e:	f8b4 20a6 	ldrh.w	r2, [r4, #166]	; 0xa6
90014212:	429a      	cmp	r2, r3
90014214:	d90e      	bls.n	90014234 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x3c>
90014216:	18e2      	adds	r2, r4, r3
90014218:	f892 2084 	ldrb.w	r2, [r2, #132]	; 0x84
9001421c:	b122      	cbz	r2, 90014228 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x30>
9001421e:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
90014222:	6803      	ldr	r3, [r0, #0]
90014224:	6d1b      	ldr	r3, [r3, #80]	; 0x50
90014226:	4798      	blx	r3
90014228:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	; 0xa4
9001422c:	3301      	adds	r3, #1
9001422e:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
90014232:	e7ea      	b.n	9001420a <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x12>
90014234:	bd10      	pop	{r4, pc}

90014236 <_ZN8touchgfx11Application12TimerWidgets5clearEv>:
90014236:	2300      	movs	r3, #0
90014238:	f100 0284 	add.w	r2, r0, #132	; 0x84
9001423c:	30a4      	adds	r0, #164	; 0xa4
9001423e:	f820 3c24 	strh.w	r3, [r0, #-36]
90014242:	f802 3b01 	strb.w	r3, [r2], #1
90014246:	4282      	cmp	r2, r0
90014248:	d1fb      	bne.n	90014242 <_ZN8touchgfx11Application12TimerWidgets5clearEv+0xc>
9001424a:	4770      	bx	lr

9001424c <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE>:
9001424c:	b570      	push	{r4, r5, r6, lr}
9001424e:	4c0b      	ldr	r4, [pc, #44]	; (9001427c <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x30>)
90014250:	4605      	mov	r5, r0
90014252:	460e      	mov	r6, r1
90014254:	6820      	ldr	r0, [r4, #0]
90014256:	b110      	cbz	r0, 9001425e <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x12>
90014258:	6803      	ldr	r3, [r0, #0]
9001425a:	695b      	ldr	r3, [r3, #20]
9001425c:	4798      	blx	r3
9001425e:	1d28      	adds	r0, r5, #4
90014260:	f7ff ffe9 	bl	90014236 <_ZN8touchgfx11Application12TimerWidgets5clearEv>
90014264:	6026      	str	r6, [r4, #0]
90014266:	6833      	ldr	r3, [r6, #0]
90014268:	4630      	mov	r0, r6
9001426a:	68db      	ldr	r3, [r3, #12]
9001426c:	4798      	blx	r3
9001426e:	682b      	ldr	r3, [r5, #0]
90014270:	4628      	mov	r0, r5
90014272:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
90014274:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
90014278:	4718      	bx	r3
9001427a:	bf00      	nop
9001427c:	240262a0 	.word	0x240262a0

90014280 <_ZN8touchgfx11Application12TimerWidgets7compactEv>:
90014280:	2300      	movs	r3, #0
90014282:	f8b0 c080 	ldrh.w	ip, [r0, #128]	; 0x80
90014286:	f8b0 10a4 	ldrh.w	r1, [r0, #164]	; 0xa4
9001428a:	461a      	mov	r2, r3
9001428c:	b5f0      	push	{r4, r5, r6, r7, lr}
9001428e:	461c      	mov	r4, r3
90014290:	461d      	mov	r5, r3
90014292:	459c      	cmp	ip, r3
90014294:	dd1a      	ble.n	900142cc <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x4c>
90014296:	18c6      	adds	r6, r0, r3
90014298:	f896 6084 	ldrb.w	r6, [r6, #132]	; 0x84
9001429c:	b16e      	cbz	r6, 900142ba <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x3a>
9001429e:	429a      	cmp	r2, r3
900142a0:	d008      	beq.n	900142b4 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x34>
900142a2:	f850 7023 	ldr.w	r7, [r0, r3, lsl #2]
900142a6:	fa1f fe82 	uxth.w	lr, r2
900142aa:	f840 702e 	str.w	r7, [r0, lr, lsl #2]
900142ae:	1887      	adds	r7, r0, r2
900142b0:	f887 6084 	strb.w	r6, [r7, #132]	; 0x84
900142b4:	3201      	adds	r2, #1
900142b6:	3301      	adds	r3, #1
900142b8:	e7eb      	b.n	90014292 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x12>
900142ba:	4299      	cmp	r1, r3
900142bc:	f8b0 60a6 	ldrh.w	r6, [r0, #166]	; 0xa6
900142c0:	bfa8      	it	ge
900142c2:	3501      	addge	r5, #1
900142c4:	429e      	cmp	r6, r3
900142c6:	bfc8      	it	gt
900142c8:	3401      	addgt	r4, #1
900142ca:	e7f4      	b.n	900142b6 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x36>
900142cc:	f8b0 30a6 	ldrh.w	r3, [r0, #166]	; 0xa6
900142d0:	1b49      	subs	r1, r1, r5
900142d2:	1b1b      	subs	r3, r3, r4
900142d4:	f8a0 10a4 	strh.w	r1, [r0, #164]	; 0xa4
900142d8:	f8a0 30a6 	strh.w	r3, [r0, #166]	; 0xa6
900142dc:	f8b0 3080 	ldrh.w	r3, [r0, #128]	; 0x80
900142e0:	4293      	cmp	r3, r2
900142e2:	dd03      	ble.n	900142ec <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x6c>
900142e4:	3b01      	subs	r3, #1
900142e6:	f8a0 3080 	strh.w	r3, [r0, #128]	; 0x80
900142ea:	e7f7      	b.n	900142dc <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x5c>
900142ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

900142f0 <_ZN8touchgfx11Application15handleTickEventEv>:
900142f0:	b570      	push	{r4, r5, r6, lr}
900142f2:	4d16      	ldr	r5, [pc, #88]	; (9001434c <_ZN8touchgfx11Application15handleTickEventEv+0x5c>)
900142f4:	4604      	mov	r4, r0
900142f6:	6828      	ldr	r0, [r5, #0]
900142f8:	b140      	cbz	r0, 9001430c <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
900142fa:	7a03      	ldrb	r3, [r0, #8]
900142fc:	b933      	cbnz	r3, 9001430c <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
900142fe:	f884 3138 	strb.w	r3, [r4, #312]	; 0x138
90014302:	6803      	ldr	r3, [r0, #0]
90014304:	689b      	ldr	r3, [r3, #8]
90014306:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
9001430a:	4718      	bx	r3
9001430c:	f894 3138 	ldrb.w	r3, [r4, #312]	; 0x138
90014310:	4e0f      	ldr	r6, [pc, #60]	; (90014350 <_ZN8touchgfx11Application15handleTickEventEv+0x60>)
90014312:	b973      	cbnz	r3, 90014332 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
90014314:	b168      	cbz	r0, 90014332 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
90014316:	7a03      	ldrb	r3, [r0, #8]
90014318:	b15b      	cbz	r3, 90014332 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
9001431a:	6830      	ldr	r0, [r6, #0]
9001431c:	b110      	cbz	r0, 90014324 <_ZN8touchgfx11Application15handleTickEventEv+0x34>
9001431e:	6803      	ldr	r3, [r0, #0]
90014320:	691b      	ldr	r3, [r3, #16]
90014322:	4798      	blx	r3
90014324:	6828      	ldr	r0, [r5, #0]
90014326:	6803      	ldr	r3, [r0, #0]
90014328:	68db      	ldr	r3, [r3, #12]
9001432a:	4798      	blx	r3
9001432c:	2301      	movs	r3, #1
9001432e:	f884 3138 	strb.w	r3, [r4, #312]	; 0x138
90014332:	3404      	adds	r4, #4
90014334:	4620      	mov	r0, r4
90014336:	f7ff ff5f 	bl	900141f8 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv>
9001433a:	4620      	mov	r0, r4
9001433c:	f7ff ffa0 	bl	90014280 <_ZN8touchgfx11Application12TimerWidgets7compactEv>
90014340:	6830      	ldr	r0, [r6, #0]
90014342:	b110      	cbz	r0, 9001434a <_ZN8touchgfx11Application15handleTickEventEv+0x5a>
90014344:	6803      	ldr	r3, [r0, #0]
90014346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
90014348:	e7dd      	b.n	90014306 <_ZN8touchgfx11Application15handleTickEventEv+0x16>
9001434a:	bd70      	pop	{r4, r5, r6, pc}
9001434c:	240262a4 	.word	0x240262a4
90014350:	240262a0 	.word	0x240262a0

90014354 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>:
90014354:	4603      	mov	r3, r0
90014356:	f100 0140 	add.w	r1, r0, #64	; 0x40
9001435a:	2200      	movs	r2, #0
9001435c:	801a      	strh	r2, [r3, #0]
9001435e:	3308      	adds	r3, #8
90014360:	f823 2c06 	strh.w	r2, [r3, #-6]
90014364:	f823 2c04 	strh.w	r2, [r3, #-4]
90014368:	f823 2c02 	strh.w	r2, [r3, #-2]
9001436c:	428b      	cmp	r3, r1
9001436e:	d1f5      	bne.n	9001435c <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev+0x8>
90014370:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
90014374:	4770      	bx	lr
	...

90014378 <_ZN8touchgfx11ApplicationC1Ev>:
90014378:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
9001437a:	4b1d      	ldr	r3, [pc, #116]	; (900143f0 <_ZN8touchgfx11ApplicationC1Ev+0x78>)
9001437c:	4606      	mov	r6, r0
9001437e:	4604      	mov	r4, r0
90014380:	2500      	movs	r5, #0
90014382:	f846 3b04 	str.w	r3, [r6], #4
90014386:	22a8      	movs	r2, #168	; 0xa8
90014388:	2100      	movs	r1, #0
9001438a:	4630      	mov	r0, r6
9001438c:	f00e fff2 	bl	90023374 <memset>
90014390:	f8a4 5084 	strh.w	r5, [r4, #132]	; 0x84
90014394:	f104 00ac 	add.w	r0, r4, #172	; 0xac
90014398:	4f16      	ldr	r7, [pc, #88]	; (900143f4 <_ZN8touchgfx11ApplicationC1Ev+0x7c>)
9001439a:	f7ff ffdb 	bl	90014354 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
9001439e:	f104 00ee 	add.w	r0, r4, #238	; 0xee
900143a2:	f7ff ffd7 	bl	90014354 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
900143a6:	f8a4 5130 	strh.w	r5, [r4, #304]	; 0x130
900143aa:	f8a4 5132 	strh.w	r5, [r4, #306]	; 0x132
900143ae:	f8a4 5134 	strh.w	r5, [r4, #308]	; 0x134
900143b2:	f8a4 5136 	strh.w	r5, [r4, #310]	; 0x136
900143b6:	f884 5138 	strb.w	r5, [r4, #312]	; 0x138
900143ba:	490f      	ldr	r1, [pc, #60]	; (900143f8 <_ZN8touchgfx11ApplicationC1Ev+0x80>)
900143bc:	480f      	ldr	r0, [pc, #60]	; (900143fc <_ZN8touchgfx11ApplicationC1Ev+0x84>)
900143be:	f00e fc07 	bl	90022bd0 <CRC_Lock>
900143c2:	4b0f      	ldr	r3, [pc, #60]	; (90014400 <_ZN8touchgfx11ApplicationC1Ev+0x88>)
900143c4:	b158      	cbz	r0, 900143de <_ZN8touchgfx11ApplicationC1Ev+0x66>
900143c6:	801d      	strh	r5, [r3, #0]
900143c8:	2300      	movs	r3, #0
900143ca:	4a0e      	ldr	r2, [pc, #56]	; (90014404 <_ZN8touchgfx11ApplicationC1Ev+0x8c>)
900143cc:	4630      	mov	r0, r6
900143ce:	6013      	str	r3, [r2, #0]
900143d0:	4a0d      	ldr	r2, [pc, #52]	; (90014408 <_ZN8touchgfx11ApplicationC1Ev+0x90>)
900143d2:	603b      	str	r3, [r7, #0]
900143d4:	6013      	str	r3, [r2, #0]
900143d6:	f7ff ff2e 	bl	90014236 <_ZN8touchgfx11Application12TimerWidgets5clearEv>
900143da:	4620      	mov	r0, r4
900143dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
900143de:	f44f 6280 	mov.w	r2, #1024	; 0x400
900143e2:	2002      	movs	r0, #2
900143e4:	801a      	strh	r2, [r3, #0]
900143e6:	6038      	str	r0, [r7, #0]
900143e8:	f001 fa26 	bl	90015838 <_ZN8touchgfx6Screen4drawEv>
900143ec:	e7ec      	b.n	900143c8 <_ZN8touchgfx11ApplicationC1Ev+0x50>
900143ee:	bf00      	nop
900143f0:	90026c70 	.word	0x90026c70
900143f4:	240262a0 	.word	0x240262a0
900143f8:	b5e8b5cd 	.word	0xb5e8b5cd
900143fc:	f407a5c2 	.word	0xf407a5c2
90014400:	24000068 	.word	0x24000068
90014404:	240262b0 	.word	0x240262b0
90014408:	240262a4 	.word	0x240262a4

9001440c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>:
9001440c:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
90014410:	3b01      	subs	r3, #1
90014412:	b29b      	uxth	r3, r3
90014414:	428b      	cmp	r3, r1
90014416:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
9001441a:	b510      	push	{r4, lr}
9001441c:	d908      	bls.n	90014430 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x24>
9001441e:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
90014422:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
90014426:	681a      	ldr	r2, [r3, #0]
90014428:	f840 2031 	str.w	r2, [r0, r1, lsl #3]
9001442c:	685a      	ldr	r2, [r3, #4]
9001442e:	6062      	str	r2, [r4, #4]
90014430:	bd10      	pop	{r4, pc}
	...

90014434 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>:
90014434:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90014438:	b08f      	sub	sp, #60	; 0x3c
9001443a:	4b8f      	ldr	r3, [pc, #572]	; (90014678 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x244>)
9001443c:	4683      	mov	fp, r0
9001443e:	ac0a      	add	r4, sp, #40	; 0x28
90014440:	e884 0006 	stmia.w	r4, {r1, r2}
90014444:	f9b3 2000 	ldrsh.w	r2, [r3]
90014448:	4620      	mov	r0, r4
9001444a:	4b8c      	ldr	r3, [pc, #560]	; (9001467c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x248>)
9001444c:	f9b3 1000 	ldrsh.w	r1, [r3]
90014450:	f7ff fe0f 	bl	90014072 <_ZN8touchgfx4Rect10restrictToEss>
90014454:	4620      	mov	r0, r4
90014456:	f7fd f800 	bl	9001145a <_ZNK8touchgfx4Rect7isEmptyEv>
9001445a:	2800      	cmp	r0, #0
9001445c:	d16a      	bne.n	90014534 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
9001445e:	9403      	str	r4, [sp, #12]
90014460:	f8bb 40ec 	ldrh.w	r4, [fp, #236]	; 0xec
90014464:	f10b 03ac 	add.w	r3, fp, #172	; 0xac
90014468:	eb0b 05c4 	add.w	r5, fp, r4, lsl #3
9001446c:	9301      	str	r3, [sp, #4]
9001446e:	35a4      	adds	r5, #164	; 0xa4
90014470:	b15c      	cbz	r4, 9001448a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56>
90014472:	4629      	mov	r1, r5
90014474:	9803      	ldr	r0, [sp, #12]
90014476:	f7ff fe4d 	bl	90014114 <_ZNK8touchgfx4Rect8includesERKS0_>
9001447a:	3c01      	subs	r4, #1
9001447c:	b118      	cbz	r0, 90014486 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52>
9001447e:	b2a1      	uxth	r1, r4
90014480:	9801      	ldr	r0, [sp, #4]
90014482:	f7ff ffc3 	bl	9001440c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
90014486:	3d08      	subs	r5, #8
90014488:	e7f2      	b.n	90014470 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3c>
9001448a:	f8bb 80ec 	ldrh.w	r8, [fp, #236]	; 0xec
9001448e:	f108 33ff 	add.w	r3, r8, #4294967295
90014492:	f8cd 8010 	str.w	r8, [sp, #16]
90014496:	9302      	str	r3, [sp, #8]
90014498:	ea4f 03c8 	mov.w	r3, r8, lsl #3
9001449c:	f103 04a4 	add.w	r4, r3, #164	; 0xa4
900144a0:	9306      	str	r3, [sp, #24]
900144a2:	445c      	add	r4, fp
900144a4:	2500      	movs	r5, #0
900144a6:	4626      	mov	r6, r4
900144a8:	f8cd 8014 	str.w	r8, [sp, #20]
900144ac:	462f      	mov	r7, r5
900144ae:	9b05      	ldr	r3, [sp, #20]
900144b0:	2b00      	cmp	r3, #0
900144b2:	d073      	beq.n	9001459c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x168>
900144b4:	9903      	ldr	r1, [sp, #12]
900144b6:	4630      	mov	r0, r6
900144b8:	f7ff fdb9 	bl	9001402e <_ZNK8touchgfx4Rect9intersectERKS0_>
900144bc:	b350      	cbz	r0, 90014514 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xe0>
900144be:	f9bd e028 	ldrsh.w	lr, [sp, #40]	; 0x28
900144c2:	f9b6 c000 	ldrsh.w	ip, [r6]
900144c6:	f9bd a02a 	ldrsh.w	sl, [sp, #42]	; 0x2a
900144ca:	45e6      	cmp	lr, ip
900144cc:	f9b6 9002 	ldrsh.w	r9, [r6, #2]
900144d0:	db33      	blt.n	9001453a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x106>
900144d2:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
900144d6:	88b3      	ldrh	r3, [r6, #4]
900144d8:	4472      	add	r2, lr
900144da:	4463      	add	r3, ip
900144dc:	b212      	sxth	r2, r2
900144de:	b21b      	sxth	r3, r3
900144e0:	429a      	cmp	r2, r3
900144e2:	dc2a      	bgt.n	9001453a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x106>
900144e4:	fa1f f289 	uxth.w	r2, r9
900144e8:	88f3      	ldrh	r3, [r6, #6]
900144ea:	45ca      	cmp	sl, r9
900144ec:	f8bd 102e 	ldrh.w	r1, [sp, #46]	; 0x2e
900144f0:	4413      	add	r3, r2
900144f2:	fa1f fc8a 	uxth.w	ip, sl
900144f6:	b29b      	uxth	r3, r3
900144f8:	fa0f fe83 	sxth.w	lr, r3
900144fc:	db0f      	blt.n	9001451e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xea>
900144fe:	eba3 030c 	sub.w	r3, r3, ip
90014502:	1ac9      	subs	r1, r1, r3
90014504:	b209      	sxth	r1, r1
90014506:	2900      	cmp	r1, #0
90014508:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
9001450c:	dd12      	ble.n	90014534 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
9001450e:	f8ad e02a 	strh.w	lr, [sp, #42]	; 0x2a
90014512:	4605      	mov	r5, r0
90014514:	9b05      	ldr	r3, [sp, #20]
90014516:	3e08      	subs	r6, #8
90014518:	3b01      	subs	r3, #1
9001451a:	9305      	str	r3, [sp, #20]
9001451c:	e7c7      	b.n	900144ae <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x7a>
9001451e:	4461      	add	r1, ip
90014520:	b209      	sxth	r1, r1
90014522:	4571      	cmp	r1, lr
90014524:	dc38      	bgt.n	90014598 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
90014526:	eba2 020c 	sub.w	r2, r2, ip
9001452a:	b212      	sxth	r2, r2
9001452c:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
90014530:	2a00      	cmp	r2, #0
90014532:	dcee      	bgt.n	90014512 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xde>
90014534:	b00f      	add	sp, #60	; 0x3c
90014536:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9001453a:	45ca      	cmp	sl, r9
9001453c:	db2c      	blt.n	90014598 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
9001453e:	f8bd 302e 	ldrh.w	r3, [sp, #46]	; 0x2e
90014542:	449a      	add	sl, r3
90014544:	88f3      	ldrh	r3, [r6, #6]
90014546:	4499      	add	r9, r3
90014548:	fa0f fa8a 	sxth.w	sl, sl
9001454c:	fa0f f989 	sxth.w	r9, r9
90014550:	45ca      	cmp	sl, r9
90014552:	dc21      	bgt.n	90014598 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
90014554:	fa1f f28c 	uxth.w	r2, ip
90014558:	88b3      	ldrh	r3, [r6, #4]
9001455a:	45e6      	cmp	lr, ip
9001455c:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
90014560:	4413      	add	r3, r2
90014562:	fa1f f98e 	uxth.w	r9, lr
90014566:	b29b      	uxth	r3, r3
90014568:	fa0f fa83 	sxth.w	sl, r3
9001456c:	db0a      	blt.n	90014584 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x150>
9001456e:	eba3 0309 	sub.w	r3, r3, r9
90014572:	1ac9      	subs	r1, r1, r3
90014574:	b209      	sxth	r1, r1
90014576:	2900      	cmp	r1, #0
90014578:	f8ad 102c 	strh.w	r1, [sp, #44]	; 0x2c
9001457c:	ddda      	ble.n	90014534 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
9001457e:	f8ad a028 	strh.w	sl, [sp, #40]	; 0x28
90014582:	e7c6      	b.n	90014512 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xde>
90014584:	4449      	add	r1, r9
90014586:	b209      	sxth	r1, r1
90014588:	4551      	cmp	r1, sl
9001458a:	dc05      	bgt.n	90014598 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
9001458c:	eba2 0209 	sub.w	r2, r2, r9
90014590:	b212      	sxth	r2, r2
90014592:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
90014596:	e7cb      	b.n	90014530 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xfc>
90014598:	4607      	mov	r7, r0
9001459a:	e7bb      	b.n	90014514 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xe0>
9001459c:	2d00      	cmp	r5, #0
9001459e:	d181      	bne.n	900144a4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x70>
900145a0:	2f00      	cmp	r7, #0
900145a2:	f000 81dd 	beq.w	90014960 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52c>
900145a6:	f9bd 6028 	ldrsh.w	r6, [sp, #40]	; 0x28
900145aa:	f9bd 702a 	ldrsh.w	r7, [sp, #42]	; 0x2a
900145ae:	b2b3      	uxth	r3, r6
900145b0:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
900145b4:	b2b9      	uxth	r1, r7
900145b6:	f8bd a02e 	ldrh.w	sl, [sp, #46]	; 0x2e
900145ba:	441a      	add	r2, r3
900145bc:	448a      	add	sl, r1
900145be:	9105      	str	r1, [sp, #20]
900145c0:	b292      	uxth	r2, r2
900145c2:	fa1f fa8a 	uxth.w	sl, sl
900145c6:	fa0f f882 	sxth.w	r8, r2
900145ca:	fa0f f98a 	sxth.w	r9, sl
900145ce:	e9cd 2307 	strd	r2, r3, [sp, #28]
900145d2:	9b04      	ldr	r3, [sp, #16]
900145d4:	2b00      	cmp	r3, #0
900145d6:	d053      	beq.n	90014680 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x24c>
900145d8:	9903      	ldr	r1, [sp, #12]
900145da:	4620      	mov	r0, r4
900145dc:	f7ff fd27 	bl	9001402e <_ZNK8touchgfx4Rect9intersectERKS0_>
900145e0:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
900145e4:	b1c0      	cbz	r0, 90014618 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
900145e6:	f9b4 e000 	ldrsh.w	lr, [r4]
900145ea:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
900145ee:	4576      	cmp	r6, lr
900145f0:	dc23      	bgt.n	9001463a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
900145f2:	f8b4 c004 	ldrh.w	ip, [r4, #4]
900145f6:	44f4      	add	ip, lr
900145f8:	fa0f fc8c 	sxth.w	ip, ip
900145fc:	45e0      	cmp	r8, ip
900145fe:	db1c      	blt.n	9001463a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
90014600:	428f      	cmp	r7, r1
90014602:	fa1f fc81 	uxth.w	ip, r1
90014606:	88e1      	ldrh	r1, [r4, #6]
90014608:	dc0d      	bgt.n	90014626 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f2>
9001460a:	ebaa 0c0c 	sub.w	ip, sl, ip
9001460e:	f8a4 9002 	strh.w	r9, [r4, #2]
90014612:	eba1 010c 	sub.w	r1, r1, ip
90014616:	80e1      	strh	r1, [r4, #6]
90014618:	4628      	mov	r0, r5
9001461a:	9904      	ldr	r1, [sp, #16]
9001461c:	3c08      	subs	r4, #8
9001461e:	4605      	mov	r5, r0
90014620:	3901      	subs	r1, #1
90014622:	9104      	str	r1, [sp, #16]
90014624:	e7d3      	b.n	900145ce <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x19a>
90014626:	4461      	add	r1, ip
90014628:	b209      	sxth	r1, r1
9001462a:	4549      	cmp	r1, r9
9001462c:	dcf5      	bgt.n	9001461a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
9001462e:	9905      	ldr	r1, [sp, #20]
90014630:	eba1 0c0c 	sub.w	ip, r1, ip
90014634:	f8a4 c006 	strh.w	ip, [r4, #6]
90014638:	e7ee      	b.n	90014618 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
9001463a:	428f      	cmp	r7, r1
9001463c:	dced      	bgt.n	9001461a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
9001463e:	f8b4 c006 	ldrh.w	ip, [r4, #6]
90014642:	4461      	add	r1, ip
90014644:	b209      	sxth	r1, r1
90014646:	4589      	cmp	r9, r1
90014648:	dbe7      	blt.n	9001461a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
9001464a:	4576      	cmp	r6, lr
9001464c:	fa1f fc8e 	uxth.w	ip, lr
90014650:	88a1      	ldrh	r1, [r4, #4]
90014652:	dc07      	bgt.n	90014664 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x230>
90014654:	eba2 0c0c 	sub.w	ip, r2, ip
90014658:	f8a4 8000 	strh.w	r8, [r4]
9001465c:	eba1 010c 	sub.w	r1, r1, ip
90014660:	80a1      	strh	r1, [r4, #4]
90014662:	e7d9      	b.n	90014618 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
90014664:	4461      	add	r1, ip
90014666:	b209      	sxth	r1, r1
90014668:	4588      	cmp	r8, r1
9001466a:	dbd6      	blt.n	9001461a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
9001466c:	eba3 0c0c 	sub.w	ip, r3, ip
90014670:	f8a4 c004 	strh.w	ip, [r4, #4]
90014674:	e7d0      	b.n	90014618 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
90014676:	bf00      	nop
90014678:	2402625a 	.word	0x2402625a
9001467c:	24026258 	.word	0x24026258
90014680:	2d00      	cmp	r5, #0
90014682:	f000 816d 	beq.w	90014960 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52c>
90014686:	9b06      	ldr	r3, [sp, #24]
90014688:	445b      	add	r3, fp
9001468a:	461c      	mov	r4, r3
9001468c:	9b02      	ldr	r3, [sp, #8]
9001468e:	3301      	adds	r3, #1
90014690:	f000 8166 	beq.w	90014960 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52c>
90014694:	f104 05a4 	add.w	r5, r4, #164	; 0xa4
90014698:	9803      	ldr	r0, [sp, #12]
9001469a:	4629      	mov	r1, r5
9001469c:	f7ff fd3a 	bl	90014114 <_ZNK8touchgfx4Rect8includesERKS0_>
900146a0:	b120      	cbz	r0, 900146ac <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x278>
900146a2:	f8bd 1008 	ldrh.w	r1, [sp, #8]
900146a6:	9801      	ldr	r0, [sp, #4]
900146a8:	f7ff feb0 	bl	9001440c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
900146ac:	9903      	ldr	r1, [sp, #12]
900146ae:	4628      	mov	r0, r5
900146b0:	f7ff fcbd 	bl	9001402e <_ZNK8touchgfx4Rect9intersectERKS0_>
900146b4:	2800      	cmp	r0, #0
900146b6:	f000 809c 	beq.w	900147f2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3be>
900146ba:	f9b4 90a4 	ldrsh.w	r9, [r4, #164]	; 0xa4
900146be:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	; 0xa8
900146c2:	fa1f f189 	uxth.w	r1, r9
900146c6:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	; 0x28
900146ca:	9309      	str	r3, [sp, #36]	; 0x24
900146cc:	eb01 0c03 	add.w	ip, r1, r3
900146d0:	b283      	uxth	r3, r0
900146d2:	4548      	cmp	r0, r9
900146d4:	f9bd e02a 	ldrsh.w	lr, [sp, #42]	; 0x2a
900146d8:	fa1f fa8c 	uxth.w	sl, ip
900146dc:	f8bd c02c 	ldrh.w	ip, [sp, #44]	; 0x2c
900146e0:	f9b4 20a6 	ldrsh.w	r2, [r4, #166]	; 0xa6
900146e4:	eb03 050c 	add.w	r5, r3, ip
900146e8:	b2ad      	uxth	r5, r5
900146ea:	9505      	str	r5, [sp, #20]
900146ec:	f9bd 5014 	ldrsh.w	r5, [sp, #20]
900146f0:	9504      	str	r5, [sp, #16]
900146f2:	f8bb 50ec 	ldrh.w	r5, [fp, #236]	; 0xec
900146f6:	f340 8099 	ble.w	9001482c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3f8>
900146fa:	1a5b      	subs	r3, r3, r1
900146fc:	4596      	cmp	lr, r2
900146fe:	fa0f f08a 	sxth.w	r0, sl
90014702:	b29b      	uxth	r3, r3
90014704:	b21e      	sxth	r6, r3
90014706:	dd2e      	ble.n	90014766 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x332>
90014708:	9f02      	ldr	r7, [sp, #8]
9001470a:	fa1f fe8e 	uxth.w	lr, lr
9001470e:	b292      	uxth	r2, r2
90014710:	f8bd 402e 	ldrh.w	r4, [sp, #46]	; 0x2e
90014714:	eb0b 08c7 	add.w	r8, fp, r7, lsl #3
90014718:	9f04      	ldr	r7, [sp, #16]
9001471a:	ebae 0102 	sub.w	r1, lr, r2
9001471e:	44a6      	add	lr, r4
90014720:	1a3f      	subs	r7, r7, r0
90014722:	f8b8 00b2 	ldrh.w	r0, [r8, #178]	; 0xb2
90014726:	b289      	uxth	r1, r1
90014728:	4402      	add	r2, r0
9001472a:	fa0f fe8e 	sxth.w	lr, lr
9001472e:	b20d      	sxth	r5, r1
90014730:	b212      	sxth	r2, r2
90014732:	436f      	muls	r7, r5
90014734:	ebae 0202 	sub.w	r2, lr, r2
90014738:	4372      	muls	r2, r6
9001473a:	4297      	cmp	r7, r2
9001473c:	db09      	blt.n	90014752 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x31e>
9001473e:	f8b8 20ac 	ldrh.w	r2, [r8, #172]	; 0xac
90014742:	f8a8 50b2 	strh.w	r5, [r8, #178]	; 0xb2
90014746:	449c      	add	ip, r3
90014748:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
9001474c:	f8ad c02c 	strh.w	ip, [sp, #44]	; 0x2c
90014750:	e686      	b.n	90014460 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
90014752:	4421      	add	r1, r4
90014754:	f8b8 30ae 	ldrh.w	r3, [r8, #174]	; 0xae
90014758:	f8a8 60b0 	strh.w	r6, [r8, #176]	; 0xb0
9001475c:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
90014760:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
90014764:	e67c      	b.n	90014460 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
90014766:	9f04      	ldr	r7, [sp, #16]
90014768:	42b8      	cmp	r0, r7
9001476a:	da27      	bge.n	900147bc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x388>
9001476c:	9902      	ldr	r1, [sp, #8]
9001476e:	1a3f      	subs	r7, r7, r0
90014770:	f8bd 502e 	ldrh.w	r5, [sp, #46]	; 0x2e
90014774:	eb0b 04c1 	add.w	r4, fp, r1, lsl #3
90014778:	eb05 010e 	add.w	r1, r5, lr
9001477c:	fa1f f881 	uxth.w	r8, r1
90014780:	f8b4 10b2 	ldrh.w	r1, [r4, #178]	; 0xb2
90014784:	4411      	add	r1, r2
90014786:	fa0f f988 	sxth.w	r9, r8
9001478a:	eba2 020e 	sub.w	r2, r2, lr
9001478e:	eba1 0108 	sub.w	r1, r1, r8
90014792:	4372      	muls	r2, r6
90014794:	b289      	uxth	r1, r1
90014796:	fa0f f881 	sxth.w	r8, r1
9001479a:	fb08 f707 	mul.w	r7, r8, r7
9001479e:	42ba      	cmp	r2, r7
900147a0:	dc06      	bgt.n	900147b0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x37c>
900147a2:	f8a4 90ae 	strh.w	r9, [r4, #174]	; 0xae
900147a6:	f8a4 80b2 	strh.w	r8, [r4, #178]	; 0xb2
900147aa:	f8b4 20ac 	ldrh.w	r2, [r4, #172]	; 0xac
900147ae:	e7ca      	b.n	90014746 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x312>
900147b0:	4429      	add	r1, r5
900147b2:	f8a4 60b0 	strh.w	r6, [r4, #176]	; 0xb0
900147b6:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
900147ba:	e651      	b.n	90014460 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
900147bc:	9805      	ldr	r0, [sp, #20]
900147be:	2d06      	cmp	r5, #6
900147c0:	ebaa 0000 	sub.w	r0, sl, r0
900147c4:	b280      	uxth	r0, r0
900147c6:	fa0f fe80 	sxth.w	lr, r0
900147ca:	d817      	bhi.n	900147fc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3c8>
900147cc:	9b04      	ldr	r3, [sp, #16]
900147ce:	f9b4 10aa 	ldrsh.w	r1, [r4, #170]	; 0xaa
900147d2:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
900147d6:	1c6b      	adds	r3, r5, #1
900147d8:	f8a4 e0a8 	strh.w	lr, [r4, #168]	; 0xa8
900147dc:	f8ab 30ec 	strh.w	r3, [fp, #236]	; 0xec
900147e0:	9b01      	ldr	r3, [sp, #4]
900147e2:	9801      	ldr	r0, [sp, #4]
900147e4:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
900147e8:	f820 9035 	strh.w	r9, [r0, r5, lsl #3]
900147ec:	805a      	strh	r2, [r3, #2]
900147ee:	809e      	strh	r6, [r3, #4]
900147f0:	80d9      	strh	r1, [r3, #6]
900147f2:	9b02      	ldr	r3, [sp, #8]
900147f4:	3c08      	subs	r4, #8
900147f6:	3b01      	subs	r3, #1
900147f8:	9302      	str	r3, [sp, #8]
900147fa:	e747      	b.n	9001468c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x258>
900147fc:	9a02      	ldr	r2, [sp, #8]
900147fe:	45b6      	cmp	lr, r6
90014800:	ea4f 02c2 	mov.w	r2, r2, lsl #3
90014804:	db0d      	blt.n	90014822 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3ee>
90014806:	449c      	add	ip, r3
90014808:	445a      	add	r2, fp
9001480a:	f8ad 9028 	strh.w	r9, [sp, #40]	; 0x28
9001480e:	fa1f fc8c 	uxth.w	ip, ip
90014812:	f8a2 e0b0 	strh.w	lr, [r2, #176]	; 0xb0
90014816:	f8ad c02c 	strh.w	ip, [sp, #44]	; 0x2c
9001481a:	448c      	add	ip, r1
9001481c:	f8a2 c0ac 	strh.w	ip, [r2, #172]	; 0xac
90014820:	e61e      	b.n	90014460 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
90014822:	445a      	add	r2, fp
90014824:	4484      	add	ip, r0
90014826:	f8a2 60b0 	strh.w	r6, [r2, #176]	; 0xb0
9001482a:	e78f      	b.n	9001474c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
9001482c:	fa1f f18e 	uxth.w	r1, lr
90014830:	f8bd 602e 	ldrh.w	r6, [sp, #46]	; 0x2e
90014834:	b293      	uxth	r3, r2
90014836:	4596      	cmp	lr, r2
90014838:	eb01 0806 	add.w	r8, r1, r6
9001483c:	9306      	str	r3, [sp, #24]
9001483e:	fa1f f888 	uxth.w	r8, r8
90014842:	9f06      	ldr	r7, [sp, #24]
90014844:	fa0f f388 	sxth.w	r3, r8
90014848:	9307      	str	r3, [sp, #28]
9001484a:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	; 0xaa
9001484e:	443b      	add	r3, r7
90014850:	b29b      	uxth	r3, r3
90014852:	9308      	str	r3, [sp, #32]
90014854:	da24      	bge.n	900148a0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x46c>
90014856:	9905      	ldr	r1, [sp, #20]
90014858:	eba3 0308 	sub.w	r3, r3, r8
9001485c:	eba2 020e 	sub.w	r2, r2, lr
90014860:	eba9 0000 	sub.w	r0, r9, r0
90014864:	ebaa 0401 	sub.w	r4, sl, r1
90014868:	b29b      	uxth	r3, r3
9001486a:	b2a4      	uxth	r4, r4
9001486c:	b219      	sxth	r1, r3
9001486e:	b225      	sxth	r5, r4
90014870:	4348      	muls	r0, r1
90014872:	436a      	muls	r2, r5
90014874:	4282      	cmp	r2, r0
90014876:	9a02      	ldr	r2, [sp, #8]
90014878:	ea4f 02c2 	mov.w	r2, r2, lsl #3
9001487c:	445a      	add	r2, fp
9001487e:	dc06      	bgt.n	9001488e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x45a>
90014880:	9b07      	ldr	r3, [sp, #28]
90014882:	44a4      	add	ip, r4
90014884:	f8a2 10b2 	strh.w	r1, [r2, #178]	; 0xb2
90014888:	f8a2 30ae 	strh.w	r3, [r2, #174]	; 0xae
9001488c:	e75e      	b.n	9001474c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
9001488e:	9904      	ldr	r1, [sp, #16]
90014890:	f8a2 50b0 	strh.w	r5, [r2, #176]	; 0xb0
90014894:	f8a2 10ac 	strh.w	r1, [r2, #172]	; 0xac
90014898:	4433      	add	r3, r6
9001489a:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
9001489e:	e5df      	b.n	90014460 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
900148a0:	9f06      	ldr	r7, [sp, #24]
900148a2:	9b04      	ldr	r3, [sp, #16]
900148a4:	1bc9      	subs	r1, r1, r7
900148a6:	fa0f f78a 	sxth.w	r7, sl
900148aa:	b289      	uxth	r1, r1
900148ac:	429f      	cmp	r7, r3
900148ae:	fa0f fe81 	sxth.w	lr, r1
900148b2:	dd23      	ble.n	900148fc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4c8>
900148b4:	9a05      	ldr	r2, [sp, #20]
900148b6:	eba9 0000 	sub.w	r0, r9, r0
900148ba:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
900148be:	ebaa 0202 	sub.w	r2, sl, r2
900148c2:	9d07      	ldr	r5, [sp, #28]
900148c4:	fb0e f000 	mul.w	r0, lr, r0
900148c8:	b292      	uxth	r2, r2
900148ca:	eba5 0a03 	sub.w	sl, r5, r3
900148ce:	9b02      	ldr	r3, [sp, #8]
900148d0:	b214      	sxth	r4, r2
900148d2:	00db      	lsls	r3, r3, #3
900148d4:	fb04 fa0a 	mul.w	sl, r4, sl
900148d8:	445b      	add	r3, fp
900148da:	4550      	cmp	r0, sl
900148dc:	db03      	blt.n	900148e6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4b2>
900148de:	f8a3 e0b2 	strh.w	lr, [r3, #178]	; 0xb2
900148e2:	4494      	add	ip, r2
900148e4:	e732      	b.n	9001474c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
900148e6:	9a04      	ldr	r2, [sp, #16]
900148e8:	4431      	add	r1, r6
900148ea:	f8a3 40b0 	strh.w	r4, [r3, #176]	; 0xb0
900148ee:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
900148f2:	f8b3 30ae 	ldrh.w	r3, [r3, #174]	; 0xae
900148f6:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
900148fa:	e75c      	b.n	900147b6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x382>
900148fc:	9b08      	ldr	r3, [sp, #32]
900148fe:	2d06      	cmp	r5, #6
90014900:	eba3 0308 	sub.w	r3, r3, r8
90014904:	b29b      	uxth	r3, r3
90014906:	b218      	sxth	r0, r3
90014908:	d813      	bhi.n	90014932 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4fe>
9001490a:	9b07      	ldr	r3, [sp, #28]
9001490c:	f8a4 00aa 	strh.w	r0, [r4, #170]	; 0xaa
90014910:	f8a4 30a6 	strh.w	r3, [r4, #166]	; 0xa6
90014914:	1c6b      	adds	r3, r5, #1
90014916:	9901      	ldr	r1, [sp, #4]
90014918:	f8ab 30ec 	strh.w	r3, [fp, #236]	; 0xec
9001491c:	9b01      	ldr	r3, [sp, #4]
9001491e:	f821 9035 	strh.w	r9, [r1, r5, lsl #3]
90014922:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
90014926:	805a      	strh	r2, [r3, #2]
90014928:	9a09      	ldr	r2, [sp, #36]	; 0x24
9001492a:	f8a3 e006 	strh.w	lr, [r3, #6]
9001492e:	809a      	strh	r2, [r3, #4]
90014930:	e75f      	b.n	900147f2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3be>
90014932:	9c02      	ldr	r4, [sp, #8]
90014934:	4570      	cmp	r0, lr
90014936:	ea4f 04c4 	mov.w	r4, r4, lsl #3
9001493a:	db0d      	blt.n	90014958 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x524>
9001493c:	4431      	add	r1, r6
9001493e:	9b06      	ldr	r3, [sp, #24]
90014940:	445c      	add	r4, fp
90014942:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
90014946:	b289      	uxth	r1, r1
90014948:	f8a4 00b2 	strh.w	r0, [r4, #178]	; 0xb2
9001494c:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
90014950:	4419      	add	r1, r3
90014952:	f8a4 10ae 	strh.w	r1, [r4, #174]	; 0xae
90014956:	e583      	b.n	90014460 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
90014958:	445c      	add	r4, fp
9001495a:	f8a4 e0b2 	strh.w	lr, [r4, #178]	; 0xb2
9001495e:	e79b      	b.n	90014898 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x464>
90014960:	f8bb 60ec 	ldrh.w	r6, [fp, #236]	; 0xec
90014964:	2e07      	cmp	r6, #7
90014966:	ea4f 04c6 	mov.w	r4, r6, lsl #3
9001496a:	d812      	bhi.n	90014992 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x55e>
9001496c:	1c75      	adds	r5, r6, #1
9001496e:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	; 0x28
90014972:	f9bd 102a 	ldrsh.w	r1, [sp, #42]	; 0x2a
90014976:	f8ab 50ec 	strh.w	r5, [fp, #236]	; 0xec
9001497a:	9d01      	ldr	r5, [sp, #4]
9001497c:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	; 0x2c
90014980:	442c      	add	r4, r5
90014982:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	; 0x2e
90014986:	f825 0036 	strh.w	r0, [r5, r6, lsl #3]
9001498a:	8061      	strh	r1, [r4, #2]
9001498c:	80a2      	strh	r2, [r4, #4]
9001498e:	80e3      	strh	r3, [r4, #6]
90014990:	e5d0      	b.n	90014534 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
90014992:	f10b 03ac 	add.w	r3, fp, #172	; 0xac
90014996:	3e01      	subs	r6, #1
90014998:	445c      	add	r4, fp
9001499a:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
9001499e:	f04f 37ff 	mov.w	r7, #4294967295
900149a2:	2500      	movs	r5, #0
900149a4:	9305      	str	r3, [sp, #20]
900149a6:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	; 0xa8
900149aa:	1e72      	subs	r2, r6, #1
900149ac:	9302      	str	r3, [sp, #8]
900149ae:	4691      	mov	r9, r2
900149b0:	f9b4 30aa 	ldrsh.w	r3, [r4, #170]	; 0xaa
900149b4:	9304      	str	r3, [sp, #16]
900149b6:	f104 03a4 	add.w	r3, r4, #164	; 0xa4
900149ba:	f1b9 3fff 	cmp.w	r9, #4294967295
900149be:	6818      	ldr	r0, [r3, #0]
900149c0:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
900149c4:	9207      	str	r2, [sp, #28]
900149c6:	bf16      	itet	ne
900149c8:	9905      	ldrne	r1, [sp, #20]
900149ca:	f8dd e00c 	ldreq.w	lr, [sp, #12]
900149ce:	eb01 0ec9 	addne.w	lr, r1, r9, lsl #3
900149d2:	9306      	str	r3, [sp, #24]
900149d4:	f8be 1006 	ldrh.w	r1, [lr, #6]
900149d8:	f8be 8004 	ldrh.w	r8, [lr, #4]
900149dc:	fb18 f801 	smulbb	r8, r8, r1
900149e0:	6859      	ldr	r1, [r3, #4]
900149e2:	e8ac 0003 	stmia.w	ip!, {r0, r1}
900149e6:	4671      	mov	r1, lr
900149e8:	a80c      	add	r0, sp, #48	; 0x30
900149ea:	f7ff fbb9 	bl	90014160 <_ZN8touchgfx4Rect11expandToFitERKS0_>
900149ee:	f8bd 1036 	ldrh.w	r1, [sp, #54]	; 0x36
900149f2:	f8bd 0034 	ldrh.w	r0, [sp, #52]	; 0x34
900149f6:	f04f 0c08 	mov.w	ip, #8
900149fa:	9b04      	ldr	r3, [sp, #16]
900149fc:	9a02      	ldr	r2, [sp, #8]
900149fe:	fb10 f001 	smulbb	r0, r0, r1
90014a02:	fb02 8803 	mla	r8, r2, r3, r8
90014a06:	eba0 0108 	sub.w	r1, r0, r8
90014a0a:	fb90 f0fc 	sdiv	r0, r0, ip
90014a0e:	4288      	cmp	r0, r1
90014a10:	dc20      	bgt.n	90014a54 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x620>
90014a12:	4551      	cmp	r1, sl
90014a14:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
90014a18:	da03      	bge.n	90014a22 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5ee>
90014a1a:	b1d9      	cbz	r1, 90014a54 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x620>
90014a1c:	468a      	mov	sl, r1
90014a1e:	464f      	mov	r7, r9
90014a20:	4635      	mov	r5, r6
90014a22:	f109 39ff 	add.w	r9, r9, #4294967295
90014a26:	f119 0f02 	cmn.w	r9, #2
90014a2a:	d1c6      	bne.n	900149ba <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x586>
90014a2c:	4616      	mov	r6, r2
90014a2e:	3201      	adds	r2, #1
90014a30:	f1a4 0408 	sub.w	r4, r4, #8
90014a34:	d1b7      	bne.n	900149a6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x572>
90014a36:	9b01      	ldr	r3, [sp, #4]
90014a38:	b2ac      	uxth	r4, r5
90014a3a:	00ed      	lsls	r5, r5, #3
90014a3c:	1958      	adds	r0, r3, r5
90014a3e:	1c7b      	adds	r3, r7, #1
90014a40:	d10b      	bne.n	90014a5a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x626>
90014a42:	4601      	mov	r1, r0
90014a44:	9803      	ldr	r0, [sp, #12]
90014a46:	f7ff fb8b 	bl	90014160 <_ZN8touchgfx4Rect11expandToFitERKS0_>
90014a4a:	4621      	mov	r1, r4
90014a4c:	9801      	ldr	r0, [sp, #4]
90014a4e:	f7ff fcdd 	bl	9001440c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
90014a52:	e505      	b.n	90014460 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
90014a54:	464f      	mov	r7, r9
90014a56:	4635      	mov	r5, r6
90014a58:	e7ed      	b.n	90014a36 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x602>
90014a5a:	9b01      	ldr	r3, [sp, #4]
90014a5c:	00ff      	lsls	r7, r7, #3
90014a5e:	445d      	add	r5, fp
90014a60:	19d9      	adds	r1, r3, r7
90014a62:	445f      	add	r7, fp
90014a64:	f7ff fb7c 	bl	90014160 <_ZN8touchgfx4Rect11expandToFitERKS0_>
90014a68:	9b03      	ldr	r3, [sp, #12]
90014a6a:	cb03      	ldmia	r3!, {r0, r1}
90014a6c:	9b03      	ldr	r3, [sp, #12]
90014a6e:	f8c7 00ac 	str.w	r0, [r7, #172]	; 0xac
90014a72:	f8c7 10b0 	str.w	r1, [r7, #176]	; 0xb0
90014a76:	f855 0fac 	ldr.w	r0, [r5, #172]!
90014a7a:	6869      	ldr	r1, [r5, #4]
90014a7c:	c303      	stmia	r3!, {r0, r1}
90014a7e:	e7e4      	b.n	90014a4a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x616>

90014a80 <_ZN8touchgfx11Application10invalidateEv>:
90014a80:	4b09      	ldr	r3, [pc, #36]	; (90014aa8 <_ZN8touchgfx11Application10invalidateEv+0x28>)
90014a82:	b082      	sub	sp, #8
90014a84:	2100      	movs	r1, #0
90014a86:	f9b3 2000 	ldrsh.w	r2, [r3]
90014a8a:	4b08      	ldr	r3, [pc, #32]	; (90014aac <_ZN8touchgfx11Application10invalidateEv+0x2c>)
90014a8c:	9100      	str	r1, [sp, #0]
90014a8e:	f9b3 3000 	ldrsh.w	r3, [r3]
90014a92:	f8ad 2004 	strh.w	r2, [sp, #4]
90014a96:	f8ad 3006 	strh.w	r3, [sp, #6]
90014a9a:	ab02      	add	r3, sp, #8
90014a9c:	e913 0006 	ldmdb	r3, {r1, r2}
90014aa0:	b002      	add	sp, #8
90014aa2:	f7ff bcc7 	b.w	90014434 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
90014aa6:	bf00      	nop
90014aa8:	24026258 	.word	0x24026258
90014aac:	2402625a 	.word	0x2402625a

90014ab0 <_ZN8touchgfx11Application15drawCachedAreasEv>:
90014ab0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90014ab4:	f500 7698 	add.w	r6, r0, #304	; 0x130
90014ab8:	b09b      	sub	sp, #108	; 0x6c
90014aba:	4604      	mov	r4, r0
90014abc:	4630      	mov	r0, r6
90014abe:	f7fc fccc 	bl	9001145a <_ZNK8touchgfx4Rect7isEmptyEv>
90014ac2:	4605      	mov	r5, r0
90014ac4:	b940      	cbnz	r0, 90014ad8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x28>
90014ac6:	4620      	mov	r0, r4
90014ac8:	e896 0006 	ldmia.w	r6, {r1, r2}
90014acc:	f7ff fcb2 	bl	90014434 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
90014ad0:	f8c4 5130 	str.w	r5, [r4, #304]	; 0x130
90014ad4:	f8c4 5134 	str.w	r5, [r4, #308]	; 0x134
90014ad8:	4bc8      	ldr	r3, [pc, #800]	; (90014dfc <_ZN8touchgfx11Application15drawCachedAreasEv+0x34c>)
90014ada:	681b      	ldr	r3, [r3, #0]
90014adc:	2b00      	cmp	r3, #0
90014ade:	d03e      	beq.n	90014b5e <_ZN8touchgfx11Application15drawCachedAreasEv+0xae>
90014ae0:	4dc7      	ldr	r5, [pc, #796]	; (90014e00 <_ZN8touchgfx11Application15drawCachedAreasEv+0x350>)
90014ae2:	4628      	mov	r0, r5
90014ae4:	f7fc fcb9 	bl	9001145a <_ZNK8touchgfx4Rect7isEmptyEv>
90014ae8:	4606      	mov	r6, r0
90014aea:	2800      	cmp	r0, #0
90014aec:	d137      	bne.n	90014b5e <_ZN8touchgfx11Application15drawCachedAreasEv+0xae>
90014aee:	4628      	mov	r0, r5
90014af0:	f7ff f9e0 	bl	90013eb4 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
90014af4:	6829      	ldr	r1, [r5, #0]
90014af6:	686a      	ldr	r2, [r5, #4]
90014af8:	4620      	mov	r0, r4
90014afa:	f7ff fc9b 	bl	90014434 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
90014afe:	802e      	strh	r6, [r5, #0]
90014b00:	806e      	strh	r6, [r5, #2]
90014b02:	80ae      	strh	r6, [r5, #4]
90014b04:	80ee      	strh	r6, [r5, #6]
90014b06:	ae09      	add	r6, sp, #36	; 0x24
90014b08:	4630      	mov	r0, r6
90014b0a:	f7ff fc23 	bl	90014354 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
90014b0e:	4abd      	ldr	r2, [pc, #756]	; (90014e04 <_ZN8touchgfx11Application15drawCachedAreasEv+0x354>)
90014b10:	f8b4 70ec 	ldrh.w	r7, [r4, #236]	; 0xec
90014b14:	f104 00ac 	add.w	r0, r4, #172	; 0xac
90014b18:	8815      	ldrh	r5, [r2, #0]
90014b1a:	9202      	str	r2, [sp, #8]
90014b1c:	462b      	mov	r3, r5
90014b1e:	429f      	cmp	r7, r3
90014b20:	d924      	bls.n	90014b6c <_ZN8touchgfx11Application15drawCachedAreasEv+0xbc>
90014b22:	f8bd 1064 	ldrh.w	r1, [sp, #100]	; 0x64
90014b26:	2907      	cmp	r1, #7
90014b28:	d816      	bhi.n	90014b58 <_ZN8touchgfx11Application15drawCachedAreasEv+0xa8>
90014b2a:	eb00 02c3 	add.w	r2, r0, r3, lsl #3
90014b2e:	f930 8033 	ldrsh.w	r8, [r0, r3, lsl #3]
90014b32:	f9b2 9002 	ldrsh.w	r9, [r2, #2]
90014b36:	f9b2 e004 	ldrsh.w	lr, [r2, #4]
90014b3a:	f9b2 c006 	ldrsh.w	ip, [r2, #6]
90014b3e:	1c4a      	adds	r2, r1, #1
90014b40:	f8ad 2064 	strh.w	r2, [sp, #100]	; 0x64
90014b44:	eb06 02c1 	add.w	r2, r6, r1, lsl #3
90014b48:	f826 8031 	strh.w	r8, [r6, r1, lsl #3]
90014b4c:	f8a2 9002 	strh.w	r9, [r2, #2]
90014b50:	f8a2 e004 	strh.w	lr, [r2, #4]
90014b54:	f8a2 c006 	strh.w	ip, [r2, #6]
90014b58:	3301      	adds	r3, #1
90014b5a:	b29b      	uxth	r3, r3
90014b5c:	e7df      	b.n	90014b1e <_ZN8touchgfx11Application15drawCachedAreasEv+0x6e>
90014b5e:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	; 0xec
90014b62:	2b00      	cmp	r3, #0
90014b64:	d1cf      	bne.n	90014b06 <_ZN8touchgfx11Application15drawCachedAreasEv+0x56>
90014b66:	b01b      	add	sp, #108	; 0x6c
90014b68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90014b6c:	462f      	mov	r7, r5
90014b6e:	f8b4 312e 	ldrh.w	r3, [r4, #302]	; 0x12e
90014b72:	42bb      	cmp	r3, r7
90014b74:	d90b      	bls.n	90014b8e <_ZN8touchgfx11Application15drawCachedAreasEv+0xde>
90014b76:	eb04 03c7 	add.w	r3, r4, r7, lsl #3
90014b7a:	3701      	adds	r7, #1
90014b7c:	4620      	mov	r0, r4
90014b7e:	f8d3 10ee 	ldr.w	r1, [r3, #238]	; 0xee
90014b82:	b2bf      	uxth	r7, r7
90014b84:	f8d3 20f2 	ldr.w	r2, [r3, #242]	; 0xf2
90014b88:	f7ff fc54 	bl	90014434 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
90014b8c:	e7ef      	b.n	90014b6e <_ZN8touchgfx11Application15drawCachedAreasEv+0xbe>
90014b8e:	4a9e      	ldr	r2, [pc, #632]	; (90014e08 <_ZN8touchgfx11Application15drawCachedAreasEv+0x358>)
90014b90:	6813      	ldr	r3, [r2, #0]
90014b92:	4690      	mov	r8, r2
90014b94:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
90014b98:	2b01      	cmp	r3, #1
90014b9a:	f040 80e4 	bne.w	90014d66 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2b6>
90014b9e:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
90014ba2:	4629      	mov	r1, r5
90014ba4:	f8b4 70ec 	ldrh.w	r7, [r4, #236]	; 0xec
90014ba8:	2500      	movs	r5, #0
90014baa:	33ae      	adds	r3, #174	; 0xae
90014bac:	428f      	cmp	r7, r1
90014bae:	f103 0308 	add.w	r3, r3, #8
90014bb2:	dd0a      	ble.n	90014bca <_ZN8touchgfx11Application15drawCachedAreasEv+0x11a>
90014bb4:	f833 2c08 	ldrh.w	r2, [r3, #-8]
90014bb8:	3101      	adds	r1, #1
90014bba:	f833 0c04 	ldrh.w	r0, [r3, #-4]
90014bbe:	4402      	add	r2, r0
90014bc0:	b212      	sxth	r2, r2
90014bc2:	4295      	cmp	r5, r2
90014bc4:	bfb8      	it	lt
90014bc6:	4615      	movlt	r5, r2
90014bc8:	e7f0      	b.n	90014bac <_ZN8touchgfx11Application15drawCachedAreasEv+0xfc>
90014bca:	4b90      	ldr	r3, [pc, #576]	; (90014e0c <_ZN8touchgfx11Application15drawCachedAreasEv+0x35c>)
90014bcc:	f8df b238 	ldr.w	fp, [pc, #568]	; 90014e08 <_ZN8touchgfx11Application15drawCachedAreasEv+0x358>
90014bd0:	881b      	ldrh	r3, [r3, #0]
90014bd2:	46d8      	mov	r8, fp
90014bd4:	2b0f      	cmp	r3, #15
90014bd6:	bf8c      	ite	hi
90014bd8:	ea4f 0ad3 	movhi.w	sl, r3, lsr #3
90014bdc:	f04f 0a01 	movls.w	sl, #1
90014be0:	2300      	movs	r3, #0
90014be2:	e9cd 3305 	strd	r3, r3, [sp, #20]
90014be6:	f8bd 701a 	ldrh.w	r7, [sp, #26]
90014bea:	f8bd 0016 	ldrh.w	r0, [sp, #22]
90014bee:	4438      	add	r0, r7
90014bf0:	b207      	sxth	r7, r0
90014bf2:	f8db 0000 	ldr.w	r0, [fp]
90014bf6:	42bd      	cmp	r5, r7
90014bf8:	6803      	ldr	r3, [r0, #0]
90014bfa:	f340 8084 	ble.w	90014d06 <_ZN8touchgfx11Application15drawCachedAreasEv+0x256>
90014bfe:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
90014c02:	4798      	blx	r3
90014c04:	eb07 030a 	add.w	r3, r7, sl
90014c08:	4298      	cmp	r0, r3
90014c0a:	da07      	bge.n	90014c1c <_ZN8touchgfx11Application15drawCachedAreasEv+0x16c>
90014c0c:	4285      	cmp	r5, r0
90014c0e:	dd05      	ble.n	90014c1c <_ZN8touchgfx11Application15drawCachedAreasEv+0x16c>
90014c10:	4287      	cmp	r7, r0
90014c12:	dd6d      	ble.n	90014cf0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x240>
90014c14:	2f00      	cmp	r7, #0
90014c16:	dd6b      	ble.n	90014cf0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x240>
90014c18:	4628      	mov	r0, r5
90014c1a:	e004      	b.n	90014c26 <_ZN8touchgfx11Application15drawCachedAreasEv+0x176>
90014c1c:	4287      	cmp	r7, r0
90014c1e:	dcfb      	bgt.n	90014c18 <_ZN8touchgfx11Application15drawCachedAreasEv+0x168>
90014c20:	42a8      	cmp	r0, r5
90014c22:	bfa8      	it	ge
90014c24:	4628      	movge	r0, r5
90014c26:	4b7a      	ldr	r3, [pc, #488]	; (90014e10 <_ZN8touchgfx11Application15drawCachedAreasEv+0x360>)
90014c28:	1bc0      	subs	r0, r0, r7
90014c2a:	2200      	movs	r2, #0
90014c2c:	f8ad 7016 	strh.w	r7, [sp, #22]
90014c30:	f9b3 3000 	ldrsh.w	r3, [r3]
90014c34:	f8ad 2014 	strh.w	r2, [sp, #20]
90014c38:	f8ad 3018 	strh.w	r3, [sp, #24]
90014c3c:	9b02      	ldr	r3, [sp, #8]
90014c3e:	f8ad 001a 	strh.w	r0, [sp, #26]
90014c42:	881f      	ldrh	r7, [r3, #0]
90014c44:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	; 0xec
90014c48:	42bb      	cmp	r3, r7
90014c4a:	d9cc      	bls.n	90014be6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x136>
90014c4c:	eb04 02c7 	add.w	r2, r4, r7, lsl #3
90014c50:	ab07      	add	r3, sp, #28
90014c52:	f852 0fac 	ldr.w	r0, [r2, #172]!
90014c56:	6851      	ldr	r1, [r2, #4]
90014c58:	c303      	stmia	r3!, {r0, r1}
90014c5a:	a905      	add	r1, sp, #20
90014c5c:	a807      	add	r0, sp, #28
90014c5e:	f7ff f9e6 	bl	9001402e <_ZNK8touchgfx4Rect9intersectERKS0_>
90014c62:	2800      	cmp	r0, #0
90014c64:	d04c      	beq.n	90014d00 <_ZN8touchgfx11Application15drawCachedAreasEv+0x250>
90014c66:	f9bd 001c 	ldrsh.w	r0, [sp, #28]
90014c6a:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
90014c6e:	f8bd 9020 	ldrh.w	r9, [sp, #32]
90014c72:	4686      	mov	lr, r0
90014c74:	4290      	cmp	r0, r2
90014c76:	f9bd 101e 	ldrsh.w	r1, [sp, #30]
90014c7a:	4448      	add	r0, r9
90014c7c:	f8bd 9018 	ldrh.w	r9, [sp, #24]
90014c80:	bfb8      	it	lt
90014c82:	4696      	movlt	lr, r2
90014c84:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
90014c88:	444a      	add	r2, r9
90014c8a:	b280      	uxth	r0, r0
90014c8c:	4299      	cmp	r1, r3
90014c8e:	468c      	mov	ip, r1
90014c90:	b292      	uxth	r2, r2
90014c92:	9303      	str	r3, [sp, #12]
90014c94:	bfb8      	it	lt
90014c96:	469c      	movlt	ip, r3
90014c98:	b203      	sxth	r3, r0
90014c9a:	fa0f f982 	sxth.w	r9, r2
90014c9e:	f8ad e01c 	strh.w	lr, [sp, #28]
90014ca2:	f8ad c01e 	strh.w	ip, [sp, #30]
90014ca6:	454b      	cmp	r3, r9
90014ca8:	bfb8      	it	lt
90014caa:	4602      	movlt	r2, r0
90014cac:	9b03      	ldr	r3, [sp, #12]
90014cae:	eba2 020e 	sub.w	r2, r2, lr
90014cb2:	f8ad 2020 	strh.w	r2, [sp, #32]
90014cb6:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
90014cba:	4411      	add	r1, r2
90014cbc:	f8bd 201a 	ldrh.w	r2, [sp, #26]
90014cc0:	4413      	add	r3, r2
90014cc2:	b289      	uxth	r1, r1
90014cc4:	b29b      	uxth	r3, r3
90014cc6:	b208      	sxth	r0, r1
90014cc8:	b21a      	sxth	r2, r3
90014cca:	4290      	cmp	r0, r2
90014ccc:	bfb8      	it	lt
90014cce:	460b      	movlt	r3, r1
90014cd0:	eba3 030c 	sub.w	r3, r3, ip
90014cd4:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
90014cd8:	a807      	add	r0, sp, #28
90014cda:	f7fc fbbe 	bl	9001145a <_ZNK8touchgfx4Rect7isEmptyEv>
90014cde:	b920      	cbnz	r0, 90014cea <_ZN8touchgfx11Application15drawCachedAreasEv+0x23a>
90014ce0:	6823      	ldr	r3, [r4, #0]
90014ce2:	a907      	add	r1, sp, #28
90014ce4:	4620      	mov	r0, r4
90014ce6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
90014ce8:	4798      	blx	r3
90014cea:	3701      	adds	r7, #1
90014cec:	b2bf      	uxth	r7, r7
90014cee:	e7a9      	b.n	90014c44 <_ZN8touchgfx11Application15drawCachedAreasEv+0x194>
90014cf0:	f8d8 0000 	ldr.w	r0, [r8]
90014cf4:	2101      	movs	r1, #1
90014cf6:	6803      	ldr	r3, [r0, #0]
90014cf8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
90014cfc:	4798      	blx	r3
90014cfe:	e772      	b.n	90014be6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x136>
90014d00:	e9cd 0007 	strd	r0, r0, [sp, #28]
90014d04:	e7e8      	b.n	90014cd8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x228>
90014d06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
90014d08:	4798      	blx	r3
90014d0a:	4b42      	ldr	r3, [pc, #264]	; (90014e14 <_ZN8touchgfx11Application15drawCachedAreasEv+0x364>)
90014d0c:	781b      	ldrb	r3, [r3, #0]
90014d0e:	2b00      	cmp	r3, #0
90014d10:	f43f af29 	beq.w	90014b66 <_ZN8touchgfx11Application15drawCachedAreasEv+0xb6>
90014d14:	2300      	movs	r3, #0
90014d16:	f8bd 5064 	ldrh.w	r5, [sp, #100]	; 0x64
90014d1a:	f104 00ee 	add.w	r0, r4, #238	; 0xee
90014d1e:	f8a4 312e 	strh.w	r3, [r4, #302]	; 0x12e
90014d22:	9b02      	ldr	r3, [sp, #8]
90014d24:	881b      	ldrh	r3, [r3, #0]
90014d26:	429d      	cmp	r5, r3
90014d28:	f67f af1d 	bls.w	90014b66 <_ZN8touchgfx11Application15drawCachedAreasEv+0xb6>
90014d2c:	f8b4 112e 	ldrh.w	r1, [r4, #302]	; 0x12e
90014d30:	2907      	cmp	r1, #7
90014d32:	d815      	bhi.n	90014d60 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2b0>
90014d34:	eb06 02c3 	add.w	r2, r6, r3, lsl #3
90014d38:	f936 8033 	ldrsh.w	r8, [r6, r3, lsl #3]
90014d3c:	f9b2 e002 	ldrsh.w	lr, [r2, #2]
90014d40:	f9b2 c004 	ldrsh.w	ip, [r2, #4]
90014d44:	f9b2 7006 	ldrsh.w	r7, [r2, #6]
90014d48:	1c4a      	adds	r2, r1, #1
90014d4a:	f8a4 212e 	strh.w	r2, [r4, #302]	; 0x12e
90014d4e:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
90014d52:	f820 8031 	strh.w	r8, [r0, r1, lsl #3]
90014d56:	f8a2 e002 	strh.w	lr, [r2, #2]
90014d5a:	f8a2 c004 	strh.w	ip, [r2, #4]
90014d5e:	80d7      	strh	r7, [r2, #6]
90014d60:	3301      	adds	r3, #1
90014d62:	b29b      	uxth	r3, r3
90014d64:	e7df      	b.n	90014d26 <_ZN8touchgfx11Application15drawCachedAreasEv+0x276>
90014d66:	2b02      	cmp	r3, #2
90014d68:	f040 8135 	bne.w	90014fd6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x526>
90014d6c:	4b2a      	ldr	r3, [pc, #168]	; (90014e18 <_ZN8touchgfx11Application15drawCachedAreasEv+0x368>)
90014d6e:	f104 09ac 	add.w	r9, r4, #172	; 0xac
90014d72:	781b      	ldrb	r3, [r3, #0]
90014d74:	2b01      	cmp	r3, #1
90014d76:	f000 809c 	beq.w	90014eb2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x402>
90014d7a:	9b02      	ldr	r3, [sp, #8]
90014d7c:	f8b4 20ec 	ldrh.w	r2, [r4, #236]	; 0xec
90014d80:	f8b3 b000 	ldrh.w	fp, [r3]
90014d84:	f10b 0b01 	add.w	fp, fp, #1
90014d88:	fa1f fb8b 	uxth.w	fp, fp
90014d8c:	2a00      	cmp	r2, #0
90014d8e:	d0bc      	beq.n	90014d0a <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
90014d90:	f8b4 50ae 	ldrh.w	r5, [r4, #174]	; 0xae
90014d94:	4659      	mov	r1, fp
90014d96:	f8b4 30b2 	ldrh.w	r3, [r4, #178]	; 0xb2
90014d9a:	f04f 0800 	mov.w	r8, #0
90014d9e:	441d      	add	r5, r3
90014da0:	b22d      	sxth	r5, r5
90014da2:	b28b      	uxth	r3, r1
90014da4:	ea4f 07c8 	mov.w	r7, r8, lsl #3
90014da8:	429a      	cmp	r2, r3
90014daa:	f240 80c0 	bls.w	90014f2e <_ZN8touchgfx11Application15drawCachedAreasEv+0x47e>
90014dae:	4427      	add	r7, r4
90014db0:	eb04 0ec1 	add.w	lr, r4, r1, lsl #3
90014db4:	4608      	mov	r0, r1
90014db6:	f9b7 30ae 	ldrsh.w	r3, [r7, #174]	; 0xae
90014dba:	f9be c0ae 	ldrsh.w	ip, [lr, #174]	; 0xae
90014dbe:	4563      	cmp	r3, ip
90014dc0:	f340 80a2 	ble.w	90014f08 <_ZN8touchgfx11Application15drawCachedAreasEv+0x458>
90014dc4:	f8be 50b2 	ldrh.w	r5, [lr, #178]	; 0xb2
90014dc8:	4465      	add	r5, ip
90014dca:	b22d      	sxth	r5, r5
90014dcc:	429d      	cmp	r5, r3
90014dce:	bfa8      	it	ge
90014dd0:	461d      	movge	r5, r3
90014dd2:	3101      	adds	r1, #1
90014dd4:	4680      	mov	r8, r0
90014dd6:	e7e4      	b.n	90014da2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2f2>
90014dd8:	d10b      	bne.n	90014df2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x342>
90014dda:	f9b5 c0b2 	ldrsh.w	ip, [r5, #178]	; 0xb2
90014dde:	f9ba 10b2 	ldrsh.w	r1, [sl, #178]	; 0xb2
90014de2:	458c      	cmp	ip, r1
90014de4:	bfb4      	ite	lt
90014de6:	469c      	movlt	ip, r3
90014de8:	46bc      	movge	ip, r7
90014dea:	4572      	cmp	r2, lr
90014dec:	bfb8      	it	lt
90014dee:	4672      	movlt	r2, lr
90014df0:	e087      	b.n	90014f02 <_ZN8touchgfx11Application15drawCachedAreasEv+0x452>
90014df2:	428a      	cmp	r2, r1
90014df4:	46bc      	mov	ip, r7
90014df6:	bfb8      	it	lt
90014df8:	460a      	movlt	r2, r1
90014dfa:	e082      	b.n	90014f02 <_ZN8touchgfx11Application15drawCachedAreasEv+0x452>
90014dfc:	2402629c 	.word	0x2402629c
90014e00:	240262a8 	.word	0x240262a8
90014e04:	24000068 	.word	0x24000068
90014e08:	24026264 	.word	0x24026264
90014e0c:	2402625a 	.word	0x2402625a
90014e10:	24026258 	.word	0x24026258
90014e14:	24026262 	.word	0x24026262
90014e18:	2402625c 	.word	0x2402625c
90014e1c:	1961      	adds	r1, r4, r5
90014e1e:	ab07      	add	r3, sp, #28
90014e20:	f851 0fac 	ldr.w	r0, [r1, #172]!
90014e24:	6849      	ldr	r1, [r1, #4]
90014e26:	c303      	stmia	r3!, {r0, r1}
90014e28:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
90014e2c:	a807      	add	r0, sp, #28
90014e2e:	f8bd 101c 	ldrh.w	r1, [sp, #28]
90014e32:	2b13      	cmp	r3, #19
90014e34:	440b      	add	r3, r1
90014e36:	bfd8      	it	le
90014e38:	f9bd 201c 	ldrshle.w	r2, [sp, #28]
90014e3c:	1a9b      	subs	r3, r3, r2
90014e3e:	f8ad 201c 	strh.w	r2, [sp, #28]
90014e42:	f8ad 3020 	strh.w	r3, [sp, #32]
90014e46:	f7ff f84f 	bl	90013ee8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
90014e4a:	a807      	add	r0, sp, #28
90014e4c:	f7fc fb05 	bl	9001145a <_ZNK8touchgfx4Rect7isEmptyEv>
90014e50:	bb78      	cbnz	r0, 90014eb2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x402>
90014e52:	f9bd c022 	ldrsh.w	ip, [sp, #34]	; 0x22
90014e56:	4425      	add	r5, r4
90014e58:	f8d8 0000 	ldr.w	r0, [r8]
90014e5c:	f1bc 0f14 	cmp.w	ip, #20
90014e60:	f8bd 3020 	ldrh.w	r3, [sp, #32]
90014e64:	f8d0 e000 	ldr.w	lr, [r0]
90014e68:	bfa8      	it	ge
90014e6a:	f04f 0c14 	movge.w	ip, #20
90014e6e:	f8bd 201e 	ldrh.w	r2, [sp, #30]
90014e72:	f8bd 101c 	ldrh.w	r1, [sp, #28]
90014e76:	fa1f fc8c 	uxth.w	ip, ip
90014e7a:	f8cd c000 	str.w	ip, [sp]
90014e7e:	f8de a090 	ldr.w	sl, [lr, #144]	; 0x90
90014e82:	47d0      	blx	sl
90014e84:	4682      	mov	sl, r0
90014e86:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
90014e8a:	a807      	add	r0, sp, #28
90014e8c:	f7ff f812 	bl	90013eb4 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
90014e90:	6823      	ldr	r3, [r4, #0]
90014e92:	4620      	mov	r0, r4
90014e94:	a907      	add	r1, sp, #28
90014e96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
90014e98:	4798      	blx	r3
90014e9a:	f8b5 00b0 	ldrh.w	r0, [r5, #176]	; 0xb0
90014e9e:	eba0 000a 	sub.w	r0, r0, sl
90014ea2:	b200      	sxth	r0, r0
90014ea4:	f8a5 00b0 	strh.w	r0, [r5, #176]	; 0xb0
90014ea8:	b918      	cbnz	r0, 90014eb2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x402>
90014eaa:	b2b9      	uxth	r1, r7
90014eac:	4648      	mov	r0, r9
90014eae:	f7ff faad 	bl	9001440c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
90014eb2:	f8b4 b0ec 	ldrh.w	fp, [r4, #236]	; 0xec
90014eb6:	f1bb 0f00 	cmp.w	fp, #0
90014eba:	f43f af26 	beq.w	90014d0a <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
90014ebe:	9b02      	ldr	r3, [sp, #8]
90014ec0:	2700      	movs	r7, #0
90014ec2:	f9b4 20ac 	ldrsh.w	r2, [r4, #172]	; 0xac
90014ec6:	881b      	ldrh	r3, [r3, #0]
90014ec8:	3301      	adds	r3, #1
90014eca:	b29b      	uxth	r3, r3
90014ecc:	b299      	uxth	r1, r3
90014ece:	00fd      	lsls	r5, r7, #3
90014ed0:	458b      	cmp	fp, r1
90014ed2:	d9a3      	bls.n	90014e1c <_ZN8touchgfx11Application15drawCachedAreasEv+0x36c>
90014ed4:	4425      	add	r5, r4
90014ed6:	eb04 0ac3 	add.w	sl, r4, r3, lsl #3
90014eda:	469c      	mov	ip, r3
90014edc:	f8b5 10b0 	ldrh.w	r1, [r5, #176]	; 0xb0
90014ee0:	f8b5 00ac 	ldrh.w	r0, [r5, #172]	; 0xac
90014ee4:	f9ba e0ac 	ldrsh.w	lr, [sl, #172]	; 0xac
90014ee8:	4408      	add	r0, r1
90014eea:	f8ba 10b0 	ldrh.w	r1, [sl, #176]	; 0xb0
90014eee:	4471      	add	r1, lr
90014ef0:	b200      	sxth	r0, r0
90014ef2:	b209      	sxth	r1, r1
90014ef4:	4288      	cmp	r0, r1
90014ef6:	f6bf af6f 	bge.w	90014dd8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x328>
90014efa:	4586      	cmp	lr, r0
90014efc:	4672      	mov	r2, lr
90014efe:	bfb8      	it	lt
90014f00:	4602      	movlt	r2, r0
90014f02:	3301      	adds	r3, #1
90014f04:	4667      	mov	r7, ip
90014f06:	e7e1      	b.n	90014ecc <_ZN8touchgfx11Application15drawCachedAreasEv+0x41c>
90014f08:	d10c      	bne.n	90014f24 <_ZN8touchgfx11Application15drawCachedAreasEv+0x474>
90014f0a:	f9b7 70b0 	ldrsh.w	r7, [r7, #176]	; 0xb0
90014f0e:	f9be 00b0 	ldrsh.w	r0, [lr, #176]	; 0xb0
90014f12:	4287      	cmp	r7, r0
90014f14:	bfb4      	ite	lt
90014f16:	4608      	movlt	r0, r1
90014f18:	4640      	movge	r0, r8
90014f1a:	f8be 70b2 	ldrh.w	r7, [lr, #178]	; 0xb2
90014f1e:	443b      	add	r3, r7
90014f20:	b21b      	sxth	r3, r3
90014f22:	e753      	b.n	90014dcc <_ZN8touchgfx11Application15drawCachedAreasEv+0x31c>
90014f24:	4565      	cmp	r5, ip
90014f26:	4640      	mov	r0, r8
90014f28:	bfa8      	it	ge
90014f2a:	4665      	movge	r5, ip
90014f2c:	e751      	b.n	90014dd2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x322>
90014f2e:	eb09 0007 	add.w	r0, r9, r7
90014f32:	4427      	add	r7, r4
90014f34:	9203      	str	r2, [sp, #12]
90014f36:	f9b7 a0b2 	ldrsh.w	sl, [r7, #178]	; 0xb2
90014f3a:	f1ba 0f13 	cmp.w	sl, #19
90014f3e:	bfde      	ittt	le
90014f40:	f8b7 50ae 	ldrhle.w	r5, [r7, #174]	; 0xae
90014f44:	4455      	addle	r5, sl
90014f46:	b22d      	sxthle	r5, r5
90014f48:	f7fc fa87 	bl	9001145a <_ZNK8touchgfx4Rect7isEmptyEv>
90014f4c:	9a03      	ldr	r2, [sp, #12]
90014f4e:	2800      	cmp	r0, #0
90014f50:	f47f af1c 	bne.w	90014d8c <_ZN8touchgfx11Application15drawCachedAreasEv+0x2dc>
90014f54:	f9b7 20ae 	ldrsh.w	r2, [r7, #174]	; 0xae
90014f58:	fa1f fa8a 	uxth.w	sl, sl
90014f5c:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
90014f60:	1aad      	subs	r5, r5, r2
90014f62:	4829      	ldr	r0, [pc, #164]	; (90015008 <_ZN8touchgfx11Application15drawCachedAreasEv+0x558>)
90014f64:	f9b7 10ac 	ldrsh.w	r1, [r7, #172]	; 0xac
90014f68:	2d14      	cmp	r5, #20
90014f6a:	f9b7 30b0 	ldrsh.w	r3, [r7, #176]	; 0xb0
90014f6e:	6800      	ldr	r0, [r0, #0]
90014f70:	bfa8      	it	ge
90014f72:	2514      	movge	r5, #20
90014f74:	f8ad 101c 	strh.w	r1, [sp, #28]
90014f78:	f8ad 201e 	strh.w	r2, [sp, #30]
90014f7c:	b289      	uxth	r1, r1
90014f7e:	f8ad 3020 	strh.w	r3, [sp, #32]
90014f82:	b2ad      	uxth	r5, r5
90014f84:	f8d0 c000 	ldr.w	ip, [r0]
90014f88:	b292      	uxth	r2, r2
90014f8a:	4555      	cmp	r5, sl
90014f8c:	bf94      	ite	ls
90014f8e:	9500      	strls	r5, [sp, #0]
90014f90:	f8cd a000 	strhi.w	sl, [sp]
90014f94:	b29b      	uxth	r3, r3
90014f96:	f8dc 5090 	ldr.w	r5, [ip, #144]	; 0x90
90014f9a:	47a8      	blx	r5
90014f9c:	6823      	ldr	r3, [r4, #0]
90014f9e:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
90014fa2:	a907      	add	r1, sp, #28
90014fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
90014fa6:	4620      	mov	r0, r4
90014fa8:	4798      	blx	r3
90014faa:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
90014fae:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
90014fb2:	f8b7 20ae 	ldrh.w	r2, [r7, #174]	; 0xae
90014fb6:	1a5b      	subs	r3, r3, r1
90014fb8:	440a      	add	r2, r1
90014fba:	b21b      	sxth	r3, r3
90014fbc:	f8a7 20ae 	strh.w	r2, [r7, #174]	; 0xae
90014fc0:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
90014fc4:	2b00      	cmp	r3, #0
90014fc6:	f47f aed8 	bne.w	90014d7a <_ZN8touchgfx11Application15drawCachedAreasEv+0x2ca>
90014fca:	fa1f f188 	uxth.w	r1, r8
90014fce:	4648      	mov	r0, r9
90014fd0:	f7ff fa1c 	bl	9001440c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
90014fd4:	e6d1      	b.n	90014d7a <_ZN8touchgfx11Application15drawCachedAreasEv+0x2ca>
90014fd6:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	; 0xec
90014fda:	42ab      	cmp	r3, r5
90014fdc:	f67f ae95 	bls.w	90014d0a <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
90014fe0:	eb04 02c5 	add.w	r2, r4, r5, lsl #3
90014fe4:	ab07      	add	r3, sp, #28
90014fe6:	f852 0fac 	ldr.w	r0, [r2, #172]!
90014fea:	6851      	ldr	r1, [r2, #4]
90014fec:	c303      	stmia	r3!, {r0, r1}
90014fee:	a807      	add	r0, sp, #28
90014ff0:	f7fc fa33 	bl	9001145a <_ZNK8touchgfx4Rect7isEmptyEv>
90014ff4:	b920      	cbnz	r0, 90015000 <_ZN8touchgfx11Application15drawCachedAreasEv+0x550>
90014ff6:	6823      	ldr	r3, [r4, #0]
90014ff8:	a907      	add	r1, sp, #28
90014ffa:	4620      	mov	r0, r4
90014ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
90014ffe:	4798      	blx	r3
90015000:	3501      	adds	r5, #1
90015002:	b2ad      	uxth	r5, r5
90015004:	e7e7      	b.n	90014fd6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x526>
90015006:	bf00      	nop
90015008:	24026264 	.word	0x24026264

9001500c <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE>:
9001500c:	4b03      	ldr	r3, [pc, #12]	; (9001501c <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE+0x10>)
9001500e:	2200      	movs	r2, #0
90015010:	801a      	strh	r2, [r3, #0]
90015012:	805a      	strh	r2, [r3, #2]
90015014:	809a      	strh	r2, [r3, #4]
90015016:	80da      	strh	r2, [r3, #6]
90015018:	4770      	bx	lr
9001501a:	bf00      	nop
9001501c:	240262a8 	.word	0x240262a8

90015020 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>:
90015020:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90015024:	b09d      	sub	sp, #116	; 0x74
90015026:	4606      	mov	r6, r0
90015028:	4614      	mov	r4, r2
9001502a:	468a      	mov	sl, r1
9001502c:	a803      	add	r0, sp, #12
9001502e:	461d      	mov	r5, r3
90015030:	f000 fd7c 	bl	90015b2c <_ZN8touchgfx12TextProviderC1Ev>
90015034:	6833      	ldr	r3, [r6, #0]
90015036:	4630      	mov	r0, r6
90015038:	f242 0b0b 	movw	fp, #8203	; 0x200b
9001503c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
9001503e:	4798      	blx	r3
90015040:	6833      	ldr	r3, [r6, #0]
90015042:	4607      	mov	r7, r0
90015044:	4630      	mov	r0, r6
90015046:	6d1b      	ldr	r3, [r3, #80]	; 0x50
90015048:	4798      	blx	r3
9001504a:	462a      	mov	r2, r5
9001504c:	2500      	movs	r5, #0
9001504e:	4621      	mov	r1, r4
90015050:	9000      	str	r0, [sp, #0]
90015052:	463b      	mov	r3, r7
90015054:	462c      	mov	r4, r5
90015056:	46a9      	mov	r9, r5
90015058:	46a8      	mov	r8, r5
9001505a:	a803      	add	r0, sp, #12
9001505c:	f000 fdb9 	bl	90015bd2 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
90015060:	2300      	movs	r3, #0
90015062:	9302      	str	r3, [sp, #8]
90015064:	f64f 63ff 	movw	r3, #65279	; 0xfeff
90015068:	429c      	cmp	r4, r3
9001506a:	d002      	beq.n	90015072 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x52>
9001506c:	455c      	cmp	r4, fp
9001506e:	bf18      	it	ne
90015070:	4625      	movne	r5, r4
90015072:	ab02      	add	r3, sp, #8
90015074:	4632      	mov	r2, r6
90015076:	4651      	mov	r1, sl
90015078:	a803      	add	r0, sp, #12
9001507a:	f001 f89f 	bl	900161bc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
9001507e:	4604      	mov	r4, r0
90015080:	b108      	cbz	r0, 90015086 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x66>
90015082:	280a      	cmp	r0, #10
90015084:	d10a      	bne.n	9001509c <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x7c>
90015086:	45c1      	cmp	r9, r8
90015088:	bf38      	it	cc
9001508a:	46c1      	movcc	r9, r8
9001508c:	f04f 0800 	mov.w	r8, #0
90015090:	2c00      	cmp	r4, #0
90015092:	d1e5      	bne.n	90015060 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
90015094:	4648      	mov	r0, r9
90015096:	b01d      	add	sp, #116	; 0x74
90015098:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9001509c:	9a02      	ldr	r2, [sp, #8]
9001509e:	2a00      	cmp	r2, #0
900150a0:	d0de      	beq.n	90015060 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
900150a2:	7b57      	ldrb	r7, [r2, #13]
900150a4:	4629      	mov	r1, r5
900150a6:	6833      	ldr	r3, [r6, #0]
900150a8:	007f      	lsls	r7, r7, #1
900150aa:	8894      	ldrh	r4, [r2, #4]
900150ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
900150ae:	f407 7080 	and.w	r0, r7, #256	; 0x100
900150b2:	7a97      	ldrb	r7, [r2, #10]
900150b4:	4307      	orrs	r7, r0
900150b6:	4630      	mov	r0, r6
900150b8:	4798      	blx	r3
900150ba:	4438      	add	r0, r7
900150bc:	4480      	add	r8, r0
900150be:	fa1f f888 	uxth.w	r8, r8
900150c2:	e7e5      	b.n	90015090 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x70>

900150c4 <_ZNK8touchgfx4Font12getCharWidthEt>:
900150c4:	b508      	push	{r3, lr}
900150c6:	6803      	ldr	r3, [r0, #0]
900150c8:	68db      	ldr	r3, [r3, #12]
900150ca:	4798      	blx	r3
900150cc:	b128      	cbz	r0, 900150da <_ZNK8touchgfx4Font12getCharWidthEt+0x16>
900150ce:	7b43      	ldrb	r3, [r0, #13]
900150d0:	7a80      	ldrb	r0, [r0, #10]
900150d2:	005b      	lsls	r3, r3, #1
900150d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
900150d8:	4318      	orrs	r0, r3
900150da:	bd08      	pop	{r3, pc}

900150dc <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz>:
900150dc:	b40e      	push	{r1, r2, r3}
900150de:	b5f0      	push	{r4, r5, r6, r7, lr}
900150e0:	b09e      	sub	sp, #120	; 0x78
900150e2:	4605      	mov	r5, r0
900150e4:	ab23      	add	r3, sp, #140	; 0x8c
900150e6:	a805      	add	r0, sp, #20
900150e8:	f853 4b04 	ldr.w	r4, [r3], #4
900150ec:	9303      	str	r3, [sp, #12]
900150ee:	f000 fd1d 	bl	90015b2c <_ZN8touchgfx12TextProviderC1Ev>
900150f2:	682b      	ldr	r3, [r5, #0]
900150f4:	4628      	mov	r0, r5
900150f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
900150f8:	4798      	blx	r3
900150fa:	682b      	ldr	r3, [r5, #0]
900150fc:	4606      	mov	r6, r0
900150fe:	4628      	mov	r0, r5
90015100:	6d1b      	ldr	r3, [r3, #80]	; 0x50
90015102:	4798      	blx	r3
90015104:	4633      	mov	r3, r6
90015106:	4621      	mov	r1, r4
90015108:	ae1e      	add	r6, sp, #120	; 0x78
9001510a:	2400      	movs	r4, #0
9001510c:	9000      	str	r0, [sp, #0]
9001510e:	9a03      	ldr	r2, [sp, #12]
90015110:	a805      	add	r0, sp, #20
90015112:	f000 fd5e 	bl	90015bd2 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
90015116:	f846 4d68 	str.w	r4, [r6, #-104]!
9001511a:	462a      	mov	r2, r5
9001511c:	4633      	mov	r3, r6
9001511e:	4621      	mov	r1, r4
90015120:	a805      	add	r0, sp, #20
90015122:	f001 f84b 	bl	900161bc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
90015126:	b300      	cbz	r0, 9001516a <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x8e>
90015128:	280a      	cmp	r0, #10
9001512a:	d01a      	beq.n	90015162 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
9001512c:	9f04      	ldr	r7, [sp, #16]
9001512e:	b1c7      	cbz	r7, 90015162 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
90015130:	7b78      	ldrb	r0, [r7, #13]
90015132:	7a3b      	ldrb	r3, [r7, #8]
90015134:	00c1      	lsls	r1, r0, #3
90015136:	88ea      	ldrh	r2, [r5, #6]
90015138:	f401 7180 	and.w	r1, r1, #256	; 0x100
9001513c:	4319      	orrs	r1, r3
9001513e:	0643      	lsls	r3, r0, #25
90015140:	ea4f 1000 	mov.w	r0, r0, lsl #4
90015144:	bf48      	it	mi
90015146:	f5a1 7300 	submi.w	r3, r1, #512	; 0x200
9001514a:	f400 7080 	and.w	r0, r0, #256	; 0x100
9001514e:	bf48      	it	mi
90015150:	b219      	sxthmi	r1, r3
90015152:	79fb      	ldrb	r3, [r7, #7]
90015154:	4303      	orrs	r3, r0
90015156:	4413      	add	r3, r2
90015158:	1a5b      	subs	r3, r3, r1
9001515a:	b21b      	sxth	r3, r3
9001515c:	429c      	cmp	r4, r3
9001515e:	bfb8      	it	lt
90015160:	461c      	movlt	r4, r3
90015162:	4633      	mov	r3, r6
90015164:	462a      	mov	r2, r5
90015166:	2100      	movs	r1, #0
90015168:	e7da      	b.n	90015120 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x44>
9001516a:	b2a0      	uxth	r0, r4
9001516c:	b01e      	add	sp, #120	; 0x78
9001516e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
90015172:	b003      	add	sp, #12
90015174:	4770      	bx	lr

90015176 <_ZNK8touchgfx4Font20getMinimumTextHeightEv>:
90015176:	7a43      	ldrb	r3, [r0, #9]
90015178:	8880      	ldrh	r0, [r0, #4]
9001517a:	4418      	add	r0, r3
9001517c:	b280      	uxth	r0, r0
9001517e:	4770      	bx	lr

90015180 <_ZNK8touchgfx4Font13getFontHeightEv>:
90015180:	6803      	ldr	r3, [r0, #0]
90015182:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90015184:	4718      	bx	r3

90015186 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz>:
90015186:	b40e      	push	{r1, r2, r3}
90015188:	b570      	push	{r4, r5, r6, lr}
9001518a:	b09d      	sub	sp, #116	; 0x74
9001518c:	4604      	mov	r4, r0
9001518e:	ab21      	add	r3, sp, #132	; 0x84
90015190:	a803      	add	r0, sp, #12
90015192:	f853 5b04 	ldr.w	r5, [r3], #4
90015196:	9302      	str	r3, [sp, #8]
90015198:	f000 fcc8 	bl	90015b2c <_ZN8touchgfx12TextProviderC1Ev>
9001519c:	6823      	ldr	r3, [r4, #0]
9001519e:	4620      	mov	r0, r4
900151a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
900151a2:	4798      	blx	r3
900151a4:	6823      	ldr	r3, [r4, #0]
900151a6:	4606      	mov	r6, r0
900151a8:	4620      	mov	r0, r4
900151aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
900151ac:	2401      	movs	r4, #1
900151ae:	4798      	blx	r3
900151b0:	4633      	mov	r3, r6
900151b2:	9000      	str	r0, [sp, #0]
900151b4:	4629      	mov	r1, r5
900151b6:	9a02      	ldr	r2, [sp, #8]
900151b8:	a803      	add	r0, sp, #12
900151ba:	f000 fd0a 	bl	90015bd2 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
900151be:	a803      	add	r0, sp, #12
900151c0:	f001 f8c8 	bl	90016354 <_ZN8touchgfx12TextProvider11getNextCharEv>
900151c4:	b2a3      	uxth	r3, r4
900151c6:	b138      	cbz	r0, 900151d8 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x52>
900151c8:	280a      	cmp	r0, #10
900151ca:	a803      	add	r0, sp, #12
900151cc:	bf04      	itt	eq
900151ce:	3301      	addeq	r3, #1
900151d0:	b21c      	sxtheq	r4, r3
900151d2:	f001 f8bf 	bl	90016354 <_ZN8touchgfx12TextProvider11getNextCharEv>
900151d6:	e7f5      	b.n	900151c4 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x3e>
900151d8:	4618      	mov	r0, r3
900151da:	b01d      	add	sp, #116	; 0x74
900151dc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
900151e0:	b003      	add	sp, #12
900151e2:	4770      	bx	lr

900151e4 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz>:
900151e4:	b40e      	push	{r1, r2, r3}
900151e6:	b5f0      	push	{r4, r5, r6, r7, lr}
900151e8:	b09e      	sub	sp, #120	; 0x78
900151ea:	4604      	mov	r4, r0
900151ec:	ab23      	add	r3, sp, #140	; 0x8c
900151ee:	a805      	add	r0, sp, #20
900151f0:	f853 5b04 	ldr.w	r5, [r3], #4
900151f4:	9303      	str	r3, [sp, #12]
900151f6:	f000 fc99 	bl	90015b2c <_ZN8touchgfx12TextProviderC1Ev>
900151fa:	6823      	ldr	r3, [r4, #0]
900151fc:	4620      	mov	r0, r4
900151fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
90015200:	4798      	blx	r3
90015202:	6823      	ldr	r3, [r4, #0]
90015204:	4606      	mov	r6, r0
90015206:	4620      	mov	r0, r4
90015208:	6d1b      	ldr	r3, [r3, #80]	; 0x50
9001520a:	4798      	blx	r3
9001520c:	4633      	mov	r3, r6
9001520e:	4629      	mov	r1, r5
90015210:	9000      	str	r0, [sp, #0]
90015212:	9a03      	ldr	r2, [sp, #12]
90015214:	a805      	add	r0, sp, #20
90015216:	f000 fcdc 	bl	90015bd2 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
9001521a:	ad1e      	add	r5, sp, #120	; 0x78
9001521c:	2100      	movs	r1, #0
9001521e:	f647 76ff 	movw	r6, #32767	; 0x7fff
90015222:	4622      	mov	r2, r4
90015224:	a805      	add	r0, sp, #20
90015226:	f845 1d68 	str.w	r1, [r5, #-104]!
9001522a:	462b      	mov	r3, r5
9001522c:	f000 ffc6 	bl	900161bc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
90015230:	b1d8      	cbz	r0, 9001526a <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x86>
90015232:	280a      	cmp	r0, #10
90015234:	d012      	beq.n	9001525c <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x78>
90015236:	9804      	ldr	r0, [sp, #16]
90015238:	b180      	cbz	r0, 9001525c <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x78>
9001523a:	7b47      	ldrb	r7, [r0, #13]
9001523c:	88e2      	ldrh	r2, [r4, #6]
9001523e:	00fb      	lsls	r3, r7, #3
90015240:	f403 7180 	and.w	r1, r3, #256	; 0x100
90015244:	7a03      	ldrb	r3, [r0, #8]
90015246:	430b      	orrs	r3, r1
90015248:	0679      	lsls	r1, r7, #25
9001524a:	bf44      	itt	mi
9001524c:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
90015250:	b21b      	sxthmi	r3, r3
90015252:	1ad3      	subs	r3, r2, r3
90015254:	b21b      	sxth	r3, r3
90015256:	429e      	cmp	r6, r3
90015258:	bfa8      	it	ge
9001525a:	461e      	movge	r6, r3
9001525c:	462b      	mov	r3, r5
9001525e:	4622      	mov	r2, r4
90015260:	2100      	movs	r1, #0
90015262:	a805      	add	r0, sp, #20
90015264:	f000 ffaa 	bl	900161bc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
90015268:	e7e2      	b.n	90015230 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x4c>
9001526a:	4630      	mov	r0, r6
9001526c:	b01e      	add	sp, #120	; 0x78
9001526e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
90015272:	b003      	add	sp, #12
90015274:	4770      	bx	lr

90015276 <_ZNK8touchgfx8Drawable10invalidateEv>:
90015276:	b513      	push	{r0, r1, r4, lr}
90015278:	6803      	ldr	r3, [r0, #0]
9001527a:	2400      	movs	r4, #0
9001527c:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
90015280:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
90015284:	f8ad 1004 	strh.w	r1, [sp, #4]
90015288:	4669      	mov	r1, sp
9001528a:	691b      	ldr	r3, [r3, #16]
9001528c:	9400      	str	r4, [sp, #0]
9001528e:	f8ad 2006 	strh.w	r2, [sp, #6]
90015292:	4798      	blx	r3
90015294:	b002      	add	sp, #8
90015296:	bd10      	pop	{r4, pc}

90015298 <_ZN8touchgfx8Drawable20getSolidRectAbsoluteEv>:
90015298:	b538      	push	{r3, r4, r5, lr}
9001529a:	680b      	ldr	r3, [r1, #0]
9001529c:	460c      	mov	r4, r1
9001529e:	4605      	mov	r5, r0
900152a0:	68db      	ldr	r3, [r3, #12]
900152a2:	4798      	blx	r3
900152a4:	6823      	ldr	r3, [r4, #0]
900152a6:	4620      	mov	r0, r4
900152a8:	4629      	mov	r1, r5
900152aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
900152ac:	4798      	blx	r3
900152ae:	4628      	mov	r0, r5
900152b0:	bd38      	pop	{r3, r4, r5, pc}

900152b2 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE>:
900152b2:	b410      	push	{r4}
900152b4:	880a      	ldrh	r2, [r1, #0]
900152b6:	8884      	ldrh	r4, [r0, #4]
900152b8:	4422      	add	r2, r4
900152ba:	800a      	strh	r2, [r1, #0]
900152bc:	884a      	ldrh	r2, [r1, #2]
900152be:	88c4      	ldrh	r4, [r0, #6]
900152c0:	4422      	add	r2, r4
900152c2:	804a      	strh	r2, [r1, #2]
900152c4:	6940      	ldr	r0, [r0, #20]
900152c6:	b120      	cbz	r0, 900152d2 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE+0x20>
900152c8:	6803      	ldr	r3, [r0, #0]
900152ca:	f85d 4b04 	ldr.w	r4, [sp], #4
900152ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
900152d0:	4718      	bx	r3
900152d2:	f85d 4b04 	ldr.w	r4, [sp], #4
900152d6:	4770      	bx	lr

900152d8 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE>:
900152d8:	b570      	push	{r4, r5, r6, lr}
900152da:	8882      	ldrh	r2, [r0, #4]
900152dc:	460c      	mov	r4, r1
900152de:	880b      	ldrh	r3, [r1, #0]
900152e0:	4605      	mov	r5, r0
900152e2:	4413      	add	r3, r2
900152e4:	800b      	strh	r3, [r1, #0]
900152e6:	884b      	ldrh	r3, [r1, #2]
900152e8:	88c2      	ldrh	r2, [r0, #6]
900152ea:	4413      	add	r3, r2
900152ec:	804b      	strh	r3, [r1, #2]
900152ee:	1d01      	adds	r1, r0, #4
900152f0:	4620      	mov	r0, r4
900152f2:	f7fc f86f 	bl	900113d4 <_ZN8touchgfx4RectaNERKS0_>
900152f6:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
900152fa:	2b00      	cmp	r3, #0
900152fc:	dd0b      	ble.n	90015316 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
900152fe:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
90015302:	2b00      	cmp	r3, #0
90015304:	dd07      	ble.n	90015316 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
90015306:	6968      	ldr	r0, [r5, #20]
90015308:	b128      	cbz	r0, 90015316 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
9001530a:	6803      	ldr	r3, [r0, #0]
9001530c:	4621      	mov	r1, r4
9001530e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
90015310:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
90015314:	4718      	bx	r3
90015316:	bd70      	pop	{r4, r5, r6, pc}

90015318 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE>:
90015318:	b570      	push	{r4, r5, r6, lr}
9001531a:	8882      	ldrh	r2, [r0, #4]
9001531c:	460c      	mov	r4, r1
9001531e:	880b      	ldrh	r3, [r1, #0]
90015320:	4605      	mov	r5, r0
90015322:	4413      	add	r3, r2
90015324:	800b      	strh	r3, [r1, #0]
90015326:	884b      	ldrh	r3, [r1, #2]
90015328:	88c2      	ldrh	r2, [r0, #6]
9001532a:	4413      	add	r3, r2
9001532c:	804b      	strh	r3, [r1, #2]
9001532e:	1d01      	adds	r1, r0, #4
90015330:	4620      	mov	r0, r4
90015332:	f7fc f84f 	bl	900113d4 <_ZN8touchgfx4RectaNERKS0_>
90015336:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
9001533a:	2b00      	cmp	r3, #0
9001533c:	dd18      	ble.n	90015370 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x58>
9001533e:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
90015342:	2b00      	cmp	r3, #0
90015344:	dd14      	ble.n	90015370 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x58>
90015346:	6968      	ldr	r0, [r5, #20]
90015348:	b128      	cbz	r0, 90015356 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x3e>
9001534a:	6803      	ldr	r3, [r0, #0]
9001534c:	4621      	mov	r1, r4
9001534e:	691b      	ldr	r3, [r3, #16]
90015350:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
90015354:	4718      	bx	r3
90015356:	4b07      	ldr	r3, [pc, #28]	; (90015374 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5c>)
90015358:	681b      	ldr	r3, [r3, #0]
9001535a:	3304      	adds	r3, #4
9001535c:	429d      	cmp	r5, r3
9001535e:	d107      	bne.n	90015370 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x58>
90015360:	f7fe ff44 	bl	900141ec <_ZN8touchgfx11Application11getInstanceEv>
90015364:	6821      	ldr	r1, [r4, #0]
90015366:	6862      	ldr	r2, [r4, #4]
90015368:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
9001536c:	f7ff b862 	b.w	90014434 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
90015370:	bd70      	pop	{r4, r5, r6, pc}
90015372:	bf00      	nop
90015374:	240262a0 	.word	0x240262a0

90015378 <_ZN8touchgfx8Drawable12moveRelativeEss>:
90015378:	b570      	push	{r4, r5, r6, lr}
9001537a:	4604      	mov	r4, r0
9001537c:	4616      	mov	r6, r2
9001537e:	460d      	mov	r5, r1
90015380:	b901      	cbnz	r1, 90015384 <_ZN8touchgfx8Drawable12moveRelativeEss+0xc>
90015382:	b192      	cbz	r2, 900153aa <_ZN8touchgfx8Drawable12moveRelativeEss+0x32>
90015384:	6823      	ldr	r3, [r4, #0]
90015386:	4620      	mov	r0, r4
90015388:	699b      	ldr	r3, [r3, #24]
9001538a:	4798      	blx	r3
9001538c:	88e2      	ldrh	r2, [r4, #6]
9001538e:	88a1      	ldrh	r1, [r4, #4]
90015390:	4620      	mov	r0, r4
90015392:	4432      	add	r2, r6
90015394:	4429      	add	r1, r5
90015396:	b212      	sxth	r2, r2
90015398:	b209      	sxth	r1, r1
9001539a:	f7fc faeb 	bl	90011974 <_ZN8touchgfx8Drawable5setXYEss>
9001539e:	6823      	ldr	r3, [r4, #0]
900153a0:	4620      	mov	r0, r4
900153a2:	699b      	ldr	r3, [r3, #24]
900153a4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
900153a8:	4718      	bx	r3
900153aa:	bd70      	pop	{r4, r5, r6, pc}

900153ac <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>:
900153ac:	b510      	push	{r4, lr}
900153ae:	2300      	movs	r3, #0
900153b0:	4604      	mov	r4, r0
900153b2:	4608      	mov	r0, r1
900153b4:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
900153b8:	8023      	strh	r3, [r4, #0]
900153ba:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
900153be:	8063      	strh	r3, [r4, #2]
900153c0:	6803      	ldr	r3, [r0, #0]
900153c2:	80a1      	strh	r1, [r4, #4]
900153c4:	4621      	mov	r1, r4
900153c6:	80e2      	strh	r2, [r4, #6]
900153c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
900153ca:	4798      	blx	r3
900153cc:	4620      	mov	r0, r4
900153ce:	bd10      	pop	{r4, pc}

900153d0 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt>:
900153d0:	b530      	push	{r4, r5, lr}
900153d2:	8083      	strh	r3, [r0, #4]
900153d4:	f8bd 300c 	ldrh.w	r3, [sp, #12]
900153d8:	f89d 5018 	ldrb.w	r5, [sp, #24]
900153dc:	80c3      	strh	r3, [r0, #6]
900153de:	f89d 3010 	ldrb.w	r3, [sp, #16]
900153e2:	6141      	str	r1, [r0, #20]
900153e4:	7203      	strb	r3, [r0, #8]
900153e6:	f89d 3014 	ldrb.w	r3, [sp, #20]
900153ea:	8302      	strh	r2, [r0, #24]
900153ec:	7243      	strb	r3, [r0, #9]
900153ee:	7a83      	ldrb	r3, [r0, #10]
900153f0:	f365 0306 	bfi	r3, r5, #0, #7
900153f4:	f89d 501c 	ldrb.w	r5, [sp, #28]
900153f8:	f365 13c7 	bfi	r3, r5, #7, #1
900153fc:	7283      	strb	r3, [r0, #10]
900153fe:	f89d 3020 	ldrb.w	r3, [sp, #32]
90015402:	72c3      	strb	r3, [r0, #11]
90015404:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
90015408:	7303      	strb	r3, [r0, #12]
9001540a:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
9001540e:	81c3      	strh	r3, [r0, #14]
90015410:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
90015414:	8203      	strh	r3, [r0, #16]
90015416:	4b01      	ldr	r3, [pc, #4]	; (9001541c <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt+0x4c>)
90015418:	6003      	str	r3, [r0, #0]
9001541a:	bd30      	pop	{r4, r5, pc}
9001541c:	90026cbc 	.word	0x90026cbc

90015420 <_ZNK8touchgfx9ConstFont4findEt>:
90015420:	b5f0      	push	{r4, r5, r6, r7, lr}
90015422:	6944      	ldr	r4, [r0, #20]
90015424:	b3bc      	cbz	r4, 90015496 <_ZNK8touchgfx9ConstFont4findEt+0x76>
90015426:	88a3      	ldrh	r3, [r4, #4]
90015428:	8b02      	ldrh	r2, [r0, #24]
9001542a:	1acb      	subs	r3, r1, r3
9001542c:	f102 32ff 	add.w	r2, r2, #4294967295
90015430:	d431      	bmi.n	90015496 <_ZNK8touchgfx9ConstFont4findEt+0x76>
90015432:	4293      	cmp	r3, r2
90015434:	dd0c      	ble.n	90015450 <_ZNK8touchgfx9ConstFont4findEt+0x30>
90015436:	230e      	movs	r3, #14
90015438:	fb03 4302 	mla	r3, r3, r2, r4
9001543c:	889b      	ldrh	r3, [r3, #4]
9001543e:	1a5b      	subs	r3, r3, r1
90015440:	1ad3      	subs	r3, r2, r3
90015442:	429a      	cmp	r2, r3
90015444:	db27      	blt.n	90015496 <_ZNK8touchgfx9ConstFont4findEt+0x76>
90015446:	2b00      	cmp	r3, #0
90015448:	bfbc      	itt	lt
9001544a:	2302      	movlt	r3, #2
9001544c:	fb92 f3f3 	sdivlt	r3, r2, r3
90015450:	2500      	movs	r5, #0
90015452:	260e      	movs	r6, #14
90015454:	4295      	cmp	r5, r2
90015456:	dc1e      	bgt.n	90015496 <_ZNK8touchgfx9ConstFont4findEt+0x76>
90015458:	fb06 4003 	mla	r0, r6, r3, r4
9001545c:	8887      	ldrh	r7, [r0, #4]
9001545e:	42b9      	cmp	r1, r7
90015460:	d01a      	beq.n	90015498 <_ZNK8touchgfx9ConstFont4findEt+0x78>
90015462:	d20d      	bcs.n	90015480 <_ZNK8touchgfx9ConstFont4findEt+0x60>
90015464:	1e5a      	subs	r2, r3, #1
90015466:	4295      	cmp	r5, r2
90015468:	dc15      	bgt.n	90015496 <_ZNK8touchgfx9ConstFont4findEt+0x76>
9001546a:	f830 3c0a 	ldrh.w	r3, [r0, #-10]
9001546e:	1a5b      	subs	r3, r3, r1
90015470:	1ad3      	subs	r3, r2, r3
90015472:	429a      	cmp	r2, r3
90015474:	db0f      	blt.n	90015496 <_ZNK8touchgfx9ConstFont4findEt+0x76>
90015476:	429d      	cmp	r5, r3
90015478:	ddec      	ble.n	90015454 <_ZNK8touchgfx9ConstFont4findEt+0x34>
9001547a:	1953      	adds	r3, r2, r5
9001547c:	105b      	asrs	r3, r3, #1
9001547e:	e7e9      	b.n	90015454 <_ZNK8touchgfx9ConstFont4findEt+0x34>
90015480:	1c5d      	adds	r5, r3, #1
90015482:	42aa      	cmp	r2, r5
90015484:	db07      	blt.n	90015496 <_ZNK8touchgfx9ConstFont4findEt+0x76>
90015486:	8a43      	ldrh	r3, [r0, #18]
90015488:	1acb      	subs	r3, r1, r3
9001548a:	442b      	add	r3, r5
9001548c:	429d      	cmp	r5, r3
9001548e:	dc02      	bgt.n	90015496 <_ZNK8touchgfx9ConstFont4findEt+0x76>
90015490:	429a      	cmp	r2, r3
90015492:	dadf      	bge.n	90015454 <_ZNK8touchgfx9ConstFont4findEt+0x34>
90015494:	e7f1      	b.n	9001547a <_ZNK8touchgfx9ConstFont4findEt+0x5a>
90015496:	2000      	movs	r0, #0
90015498:	bdf0      	pop	{r4, r5, r6, r7, pc}

9001549a <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh>:
9001549a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
9001549c:	4604      	mov	r4, r0
9001549e:	4617      	mov	r7, r2
900154a0:	461e      	mov	r6, r3
900154a2:	b911      	cbnz	r1, 900154aa <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
900154a4:	2500      	movs	r5, #0
900154a6:	4628      	mov	r0, r5
900154a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
900154aa:	290a      	cmp	r1, #10
900154ac:	d0fa      	beq.n	900154a4 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
900154ae:	f64f 62ff 	movw	r2, #65279	; 0xfeff
900154b2:	4291      	cmp	r1, r2
900154b4:	d0f6      	beq.n	900154a4 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
900154b6:	f242 020b 	movw	r2, #8203	; 0x200b
900154ba:	4291      	cmp	r1, r2
900154bc:	d0f2      	beq.n	900154a4 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
900154be:	f7ff ffaf 	bl	90015420 <_ZNK8touchgfx9ConstFont4findEt>
900154c2:	4605      	mov	r5, r0
900154c4:	b950      	cbnz	r0, 900154dc <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x42>
900154c6:	6823      	ldr	r3, [r4, #0]
900154c8:	4620      	mov	r0, r4
900154ca:	691b      	ldr	r3, [r3, #16]
900154cc:	4798      	blx	r3
900154ce:	4601      	mov	r1, r0
900154d0:	4620      	mov	r0, r4
900154d2:	f7ff ffa5 	bl	90015420 <_ZNK8touchgfx9ConstFont4findEt>
900154d6:	4605      	mov	r5, r0
900154d8:	2800      	cmp	r0, #0
900154da:	d0e3      	beq.n	900154a4 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
900154dc:	6823      	ldr	r3, [r4, #0]
900154de:	4629      	mov	r1, r5
900154e0:	4620      	mov	r0, r4
900154e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
900154e4:	4798      	blx	r3
900154e6:	6038      	str	r0, [r7, #0]
900154e8:	6823      	ldr	r3, [r4, #0]
900154ea:	4620      	mov	r0, r4
900154ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
900154ee:	4798      	blx	r3
900154f0:	7030      	strb	r0, [r6, #0]
900154f2:	e7d8      	b.n	900154a6 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xc>

900154f4 <_ZNK8touchgfx10ClickEvent12getEventTypeEv>:
900154f4:	2000      	movs	r0, #0
900154f6:	4770      	bx	lr

900154f8 <_ZNK8touchgfx9DragEvent12getEventTypeEv>:
900154f8:	2001      	movs	r0, #1
900154fa:	4770      	bx	lr

900154fc <_ZNK8touchgfx12GestureEvent12getEventTypeEv>:
900154fc:	2002      	movs	r0, #2
900154fe:	4770      	bx	lr

90015500 <_ZN8touchgfx6ScreenD1Ev>:
90015500:	4770      	bx	lr

90015502 <_ZN8touchgfx6Screen11setupScreenEv>:
90015502:	4770      	bx	lr

90015504 <_ZN8touchgfx12GestureEventD1Ev>:
90015504:	4770      	bx	lr

90015506 <_ZN8touchgfx9DragEventD1Ev>:
90015506:	4770      	bx	lr

90015508 <_ZN8touchgfx10ClickEventD1Ev>:
90015508:	4770      	bx	lr

9001550a <_ZN8touchgfx10ClickEventD0Ev>:
9001550a:	b510      	push	{r4, lr}
9001550c:	4604      	mov	r4, r0
9001550e:	210c      	movs	r1, #12
90015510:	f00d fc67 	bl	90022de2 <_ZdlPvj>
90015514:	4620      	mov	r0, r4
90015516:	bd10      	pop	{r4, pc}

90015518 <_ZN8touchgfx9DragEventD0Ev>:
90015518:	b510      	push	{r4, lr}
9001551a:	4604      	mov	r4, r0
9001551c:	2110      	movs	r1, #16
9001551e:	f00d fc60 	bl	90022de2 <_ZdlPvj>
90015522:	4620      	mov	r0, r4
90015524:	bd10      	pop	{r4, pc}

90015526 <_ZN8touchgfx12GestureEventD0Ev>:
90015526:	b510      	push	{r4, lr}
90015528:	4604      	mov	r4, r0
9001552a:	210c      	movs	r1, #12
9001552c:	f00d fc59 	bl	90022de2 <_ZdlPvj>
90015530:	4620      	mov	r0, r4
90015532:	bd10      	pop	{r4, pc}

90015534 <_ZN8touchgfx6ScreenD0Ev>:
90015534:	b510      	push	{r4, lr}
90015536:	4604      	mov	r4, r0
90015538:	213c      	movs	r1, #60	; 0x3c
9001553a:	f00d fc52 	bl	90022de2 <_ZdlPvj>
9001553e:	4620      	mov	r0, r4
90015540:	bd10      	pop	{r4, pc}
	...

90015544 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE>:
90015544:	b530      	push	{r4, r5, lr}
90015546:	460d      	mov	r5, r1
90015548:	6b01      	ldr	r1, [r0, #48]	; 0x30
9001554a:	b087      	sub	sp, #28
9001554c:	4604      	mov	r4, r0
9001554e:	b301      	cbz	r1, 90015592 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x4e>
90015550:	a801      	add	r0, sp, #4
90015552:	f7ff ff2b 	bl	900153ac <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
90015556:	892a      	ldrh	r2, [r5, #8]
90015558:	f8bd 3004 	ldrh.w	r3, [sp, #4]
9001555c:	7928      	ldrb	r0, [r5, #4]
9001555e:	1ad2      	subs	r2, r2, r3
90015560:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
90015562:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
90015566:	441a      	add	r2, r3
90015568:	896b      	ldrh	r3, [r5, #10]
9001556a:	f8bd 5006 	ldrh.w	r5, [sp, #6]
9001556e:	f88d 0010 	strb.w	r0, [sp, #16]
90015572:	1b5b      	subs	r3, r3, r5
90015574:	8ee5      	ldrh	r5, [r4, #54]	; 0x36
90015576:	6b20      	ldr	r0, [r4, #48]	; 0x30
90015578:	442b      	add	r3, r5
9001557a:	4d07      	ldr	r5, [pc, #28]	; (90015598 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x54>)
9001557c:	f8ad 1012 	strh.w	r1, [sp, #18]
90015580:	a903      	add	r1, sp, #12
90015582:	9503      	str	r5, [sp, #12]
90015584:	f8ad 2014 	strh.w	r2, [sp, #20]
90015588:	f8ad 3016 	strh.w	r3, [sp, #22]
9001558c:	6803      	ldr	r3, [r0, #0]
9001558e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
90015590:	4798      	blx	r3
90015592:	b007      	add	sp, #28
90015594:	bd30      	pop	{r4, r5, pc}
90015596:	bf00      	nop
90015598:	90026d44 	.word	0x90026d44

9001559c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE>:
9001559c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
900155a0:	6b03      	ldr	r3, [r0, #48]	; 0x30
900155a2:	b08a      	sub	sp, #40	; 0x28
900155a4:	4604      	mov	r4, r0
900155a6:	460d      	mov	r5, r1
900155a8:	b113      	cbz	r3, 900155b0 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x14>
900155aa:	790b      	ldrb	r3, [r1, #4]
900155ac:	2b00      	cmp	r3, #0
900155ae:	d044      	beq.n	9001563a <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
900155b0:	f104 0804 	add.w	r8, r4, #4
900155b4:	a803      	add	r0, sp, #12
900155b6:	4641      	mov	r1, r8
900155b8:	f7ff fef8 	bl	900153ac <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
900155bc:	792b      	ldrb	r3, [r5, #4]
900155be:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
900155c2:	f9bd 600e 	ldrsh.w	r6, [sp, #14]
900155c6:	b983      	cbnz	r3, 900155ea <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x4e>
900155c8:	f104 0336 	add.w	r3, r4, #54	; 0x36
900155cc:	892a      	ldrh	r2, [r5, #8]
900155ce:	88e9      	ldrh	r1, [r5, #6]
900155d0:	4640      	mov	r0, r8
900155d2:	1b92      	subs	r2, r2, r6
900155d4:	9301      	str	r3, [sp, #4]
900155d6:	1bc9      	subs	r1, r1, r7
900155d8:	f104 0334 	add.w	r3, r4, #52	; 0x34
900155dc:	b212      	sxth	r2, r2
900155de:	9300      	str	r3, [sp, #0]
900155e0:	b209      	sxth	r1, r1
900155e2:	f104 0330 	add.w	r3, r4, #48	; 0x30
900155e6:	f7fb fe13 	bl	90011210 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>
900155ea:	6b21      	ldr	r1, [r4, #48]	; 0x30
900155ec:	b329      	cbz	r1, 9001563a <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
900155ee:	a805      	add	r0, sp, #20
900155f0:	f7ff fedc 	bl	900153ac <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
900155f4:	f8bd 2014 	ldrh.w	r2, [sp, #20]
900155f8:	792b      	ldrb	r3, [r5, #4]
900155fa:	a907      	add	r1, sp, #28
900155fc:	1abf      	subs	r7, r7, r2
900155fe:	88ea      	ldrh	r2, [r5, #6]
90015600:	6b20      	ldr	r0, [r4, #48]	; 0x30
90015602:	4417      	add	r7, r2
90015604:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
90015606:	f88d 3020 	strb.w	r3, [sp, #32]
9001560a:	4417      	add	r7, r2
9001560c:	f8bd 2016 	ldrh.w	r2, [sp, #22]
90015610:	1ab6      	subs	r6, r6, r2
90015612:	892a      	ldrh	r2, [r5, #8]
90015614:	f8ad 7022 	strh.w	r7, [sp, #34]	; 0x22
90015618:	4416      	add	r6, r2
9001561a:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
9001561c:	4416      	add	r6, r2
9001561e:	4a08      	ldr	r2, [pc, #32]	; (90015640 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0xa4>)
90015620:	f8ad 6024 	strh.w	r6, [sp, #36]	; 0x24
90015624:	2600      	movs	r6, #0
90015626:	9207      	str	r2, [sp, #28]
90015628:	f8ad 6026 	strh.w	r6, [sp, #38]	; 0x26
9001562c:	6803      	ldr	r3, [r0, #0]
9001562e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
90015630:	4798      	blx	r3
90015632:	792b      	ldrb	r3, [r5, #4]
90015634:	b10b      	cbz	r3, 9001563a <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
90015636:	e9c4 660c 	strd	r6, r6, [r4, #48]	; 0x30
9001563a:	b00a      	add	sp, #40	; 0x28
9001563c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
90015640:	90026d1c 	.word	0x90026d1c

90015644 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE>:
90015644:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
90015648:	460c      	mov	r4, r1
9001564a:	6b01      	ldr	r1, [r0, #48]	; 0x30
9001564c:	b088      	sub	sp, #32
9001564e:	4605      	mov	r5, r0
90015650:	2900      	cmp	r1, #0
90015652:	d06d      	beq.n	90015730 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xec>
90015654:	4668      	mov	r0, sp
90015656:	f7ff fea9 	bl	900153ac <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
9001565a:	8ea9      	ldrh	r1, [r5, #52]	; 0x34
9001565c:	88e3      	ldrh	r3, [r4, #6]
9001565e:	f9bd 8000 	ldrsh.w	r8, [sp]
90015662:	440b      	add	r3, r1
90015664:	f9bd 7002 	ldrsh.w	r7, [sp, #2]
90015668:	b21b      	sxth	r3, r3
9001566a:	4543      	cmp	r3, r8
9001566c:	db31      	blt.n	900156d2 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
9001566e:	f8bd c004 	ldrh.w	ip, [sp, #4]
90015672:	44c4      	add	ip, r8
90015674:	fa0f fc8c 	sxth.w	ip, ip
90015678:	4563      	cmp	r3, ip
9001567a:	da2a      	bge.n	900156d2 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
9001567c:	8eea      	ldrh	r2, [r5, #54]	; 0x36
9001567e:	8926      	ldrh	r6, [r4, #8]
90015680:	4416      	add	r6, r2
90015682:	b236      	sxth	r6, r6
90015684:	42be      	cmp	r6, r7
90015686:	db24      	blt.n	900156d2 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
90015688:	f8bd 0006 	ldrh.w	r0, [sp, #6]
9001568c:	4438      	add	r0, r7
9001568e:	b200      	sxth	r0, r0
90015690:	4286      	cmp	r6, r0
90015692:	da1e      	bge.n	900156d2 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
90015694:	8963      	ldrh	r3, [r4, #10]
90015696:	4419      	add	r1, r3
90015698:	b209      	sxth	r1, r1
9001569a:	4541      	cmp	r1, r8
9001569c:	db08      	blt.n	900156b0 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
9001569e:	4561      	cmp	r1, ip
900156a0:	da06      	bge.n	900156b0 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
900156a2:	89a3      	ldrh	r3, [r4, #12]
900156a4:	441a      	add	r2, r3
900156a6:	b212      	sxth	r2, r2
900156a8:	42ba      	cmp	r2, r7
900156aa:	db01      	blt.n	900156b0 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
900156ac:	4282      	cmp	r2, r0
900156ae:	db10      	blt.n	900156d2 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
900156b0:	4b21      	ldr	r3, [pc, #132]	; (90015738 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf4>)
900156b2:	a904      	add	r1, sp, #16
900156b4:	6b28      	ldr	r0, [r5, #48]	; 0x30
900156b6:	9304      	str	r3, [sp, #16]
900156b8:	2302      	movs	r3, #2
900156ba:	f88d 3014 	strb.w	r3, [sp, #20]
900156be:	2300      	movs	r3, #0
900156c0:	f8ad 3016 	strh.w	r3, [sp, #22]
900156c4:	f8ad 3018 	strh.w	r3, [sp, #24]
900156c8:	f8ad 301a 	strh.w	r3, [sp, #26]
900156cc:	6803      	ldr	r3, [r0, #0]
900156ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
900156d0:	4798      	blx	r3
900156d2:	1d29      	adds	r1, r5, #4
900156d4:	a802      	add	r0, sp, #8
900156d6:	f7ff fe69 	bl	900153ac <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
900156da:	f8bd 3008 	ldrh.w	r3, [sp, #8]
900156de:	88e0      	ldrh	r0, [r4, #6]
900156e0:	eba3 0808 	sub.w	r8, r3, r8
900156e4:	f8bd 300a 	ldrh.w	r3, [sp, #10]
900156e8:	7921      	ldrb	r1, [r4, #4]
900156ea:	fa1f f888 	uxth.w	r8, r8
900156ee:	1bdf      	subs	r7, r3, r7
900156f0:	f8b5 c034 	ldrh.w	ip, [r5, #52]	; 0x34
900156f4:	b2bb      	uxth	r3, r7
900156f6:	4440      	add	r0, r8
900156f8:	8922      	ldrh	r2, [r4, #8]
900156fa:	8967      	ldrh	r7, [r4, #10]
900156fc:	4460      	add	r0, ip
900156fe:	89a4      	ldrh	r4, [r4, #12]
90015700:	441a      	add	r2, r3
90015702:	8eee      	ldrh	r6, [r5, #54]	; 0x36
90015704:	44b8      	add	r8, r7
90015706:	4423      	add	r3, r4
90015708:	f8ad 0016 	strh.w	r0, [sp, #22]
9001570c:	4432      	add	r2, r6
9001570e:	44e0      	add	r8, ip
90015710:	4433      	add	r3, r6
90015712:	4c0a      	ldr	r4, [pc, #40]	; (9001573c <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf8>)
90015714:	6b28      	ldr	r0, [r5, #48]	; 0x30
90015716:	f88d 1014 	strb.w	r1, [sp, #20]
9001571a:	a904      	add	r1, sp, #16
9001571c:	9404      	str	r4, [sp, #16]
9001571e:	f8ad 2018 	strh.w	r2, [sp, #24]
90015722:	f8ad 801a 	strh.w	r8, [sp, #26]
90015726:	f8ad 301c 	strh.w	r3, [sp, #28]
9001572a:	6803      	ldr	r3, [r0, #0]
9001572c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
9001572e:	4798      	blx	r3
90015730:	b008      	add	sp, #32
90015732:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
90015736:	bf00      	nop
90015738:	90026d1c 	.word	0x90026d1c
9001573c:	90026d30 	.word	0x90026d30

90015740 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>:
90015740:	b537      	push	{r0, r1, r2, r4, r5, lr}
90015742:	4604      	mov	r4, r0
90015744:	f934 2f0c 	ldrsh.w	r2, [r4, #12]!
90015748:	3201      	adds	r2, #1
9001574a:	d112      	bne.n	90015772 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv+0x32>
9001574c:	2500      	movs	r5, #0
9001574e:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
90015752:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
90015756:	6803      	ldr	r3, [r0, #0]
90015758:	9500      	str	r5, [sp, #0]
9001575a:	466d      	mov	r5, sp
9001575c:	f8ad 1004 	strh.w	r1, [sp, #4]
90015760:	f8ad 2006 	strh.w	r2, [sp, #6]
90015764:	4629      	mov	r1, r5
90015766:	6a9b      	ldr	r3, [r3, #40]	; 0x28
90015768:	4798      	blx	r3
9001576a:	e895 0003 	ldmia.w	r5, {r0, r1}
9001576e:	e884 0003 	stmia.w	r4, {r0, r1}
90015772:	4620      	mov	r0, r4
90015774:	b003      	add	sp, #12
90015776:	bd30      	pop	{r4, r5, pc}

90015778 <_ZN8touchgfx8Drawable13getCachedAbsXEv>:
90015778:	b513      	push	{r0, r1, r4, lr}
9001577a:	f9b0 3020 	ldrsh.w	r3, [r0, #32]
9001577e:	4604      	mov	r4, r0
90015780:	3301      	adds	r3, #1
90015782:	d109      	bne.n	90015798 <_ZN8touchgfx8Drawable13getCachedAbsXEv+0x20>
90015784:	4601      	mov	r1, r0
90015786:	4668      	mov	r0, sp
90015788:	f7ff fe10 	bl	900153ac <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
9001578c:	f8bd 3000 	ldrh.w	r3, [sp]
90015790:	8423      	strh	r3, [r4, #32]
90015792:	f8bd 3002 	ldrh.w	r3, [sp, #2]
90015796:	8463      	strh	r3, [r4, #34]	; 0x22
90015798:	f9b4 0020 	ldrsh.w	r0, [r4, #32]
9001579c:	b002      	add	sp, #8
9001579e:	bd10      	pop	{r4, pc}

900157a0 <_ZN8touchgfx8Drawable13getCachedAbsYEv>:
900157a0:	b513      	push	{r0, r1, r4, lr}
900157a2:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	; 0x22
900157a6:	4604      	mov	r4, r0
900157a8:	3301      	adds	r3, #1
900157aa:	d109      	bne.n	900157c0 <_ZN8touchgfx8Drawable13getCachedAbsYEv+0x20>
900157ac:	4601      	mov	r1, r0
900157ae:	4668      	mov	r0, sp
900157b0:	f7ff fdfc 	bl	900153ac <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
900157b4:	f8bd 3000 	ldrh.w	r3, [sp]
900157b8:	8423      	strh	r3, [r4, #32]
900157ba:	f8bd 3002 	ldrh.w	r3, [sp, #2]
900157be:	8463      	strh	r3, [r4, #34]	; 0x22
900157c0:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	; 0x22
900157c4:	b002      	add	sp, #8
900157c6:	bd10      	pop	{r4, pc}

900157c8 <_ZN8touchgfx6ScreenC1Ev>:
900157c8:	b570      	push	{r4, r5, r6, lr}
900157ca:	4b17      	ldr	r3, [pc, #92]	; (90015828 <_ZN8touchgfx6ScreenC1Ev+0x60>)
900157cc:	4605      	mov	r5, r0
900157ce:	4a17      	ldr	r2, [pc, #92]	; (9001582c <_ZN8touchgfx6ScreenC1Ev+0x64>)
900157d0:	2101      	movs	r1, #1
900157d2:	f845 3b04 	str.w	r3, [r5], #4
900157d6:	2300      	movs	r3, #0
900157d8:	6042      	str	r2, [r0, #4]
900157da:	4604      	mov	r4, r0
900157dc:	8103      	strh	r3, [r0, #8]
900157de:	8143      	strh	r3, [r0, #10]
900157e0:	8183      	strh	r3, [r0, #12]
900157e2:	81c3      	strh	r3, [r0, #14]
900157e4:	8203      	strh	r3, [r0, #16]
900157e6:	8243      	strh	r3, [r0, #18]
900157e8:	8283      	strh	r3, [r0, #20]
900157ea:	82c3      	strh	r3, [r0, #22]
900157ec:	6203      	str	r3, [r0, #32]
900157ee:	8483      	strh	r3, [r0, #36]	; 0x24
900157f0:	84c3      	strh	r3, [r0, #38]	; 0x26
900157f2:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
900157f6:	6343      	str	r3, [r0, #52]	; 0x34
900157f8:	f880 1029 	strb.w	r1, [r0, #41]	; 0x29
900157fc:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
90015800:	e9c0 3306 	strd	r3, r3, [r0, #24]
90015804:	e9c0 330b 	strd	r3, r3, [r0, #44]	; 0x2c
90015808:	4b09      	ldr	r3, [pc, #36]	; (90015830 <_ZN8touchgfx6ScreenC1Ev+0x68>)
9001580a:	4628      	mov	r0, r5
9001580c:	f9b3 6000 	ldrsh.w	r6, [r3]
90015810:	6b93      	ldr	r3, [r2, #56]	; 0x38
90015812:	4a08      	ldr	r2, [pc, #32]	; (90015834 <_ZN8touchgfx6ScreenC1Ev+0x6c>)
90015814:	f9b2 1000 	ldrsh.w	r1, [r2]
90015818:	4798      	blx	r3
9001581a:	6863      	ldr	r3, [r4, #4]
9001581c:	4628      	mov	r0, r5
9001581e:	4631      	mov	r1, r6
90015820:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
90015822:	4798      	blx	r3
90015824:	4620      	mov	r0, r4
90015826:	bd70      	pop	{r4, r5, r6, pc}
90015828:	90026d58 	.word	0x90026d58
9001582c:	90026adc 	.word	0x90026adc
90015830:	2402625a 	.word	0x2402625a
90015834:	24026258 	.word	0x24026258

90015838 <_ZN8touchgfx6Screen4drawEv>:
90015838:	4b09      	ldr	r3, [pc, #36]	; (90015860 <_ZN8touchgfx6Screen4drawEv+0x28>)
9001583a:	b507      	push	{r0, r1, r2, lr}
9001583c:	f9b3 2000 	ldrsh.w	r2, [r3]
90015840:	2100      	movs	r1, #0
90015842:	4b08      	ldr	r3, [pc, #32]	; (90015864 <_ZN8touchgfx6Screen4drawEv+0x2c>)
90015844:	9100      	str	r1, [sp, #0]
90015846:	4669      	mov	r1, sp
90015848:	f9b3 3000 	ldrsh.w	r3, [r3]
9001584c:	f8ad 2004 	strh.w	r2, [sp, #4]
90015850:	f8ad 3006 	strh.w	r3, [sp, #6]
90015854:	6803      	ldr	r3, [r0, #0]
90015856:	689b      	ldr	r3, [r3, #8]
90015858:	4798      	blx	r3
9001585a:	b003      	add	sp, #12
9001585c:	f85d fb04 	ldr.w	pc, [sp], #4
90015860:	24026258 	.word	0x24026258
90015864:	2402625a 	.word	0x2402625a

90015868 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>:
90015868:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001586c:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
90015870:	b089      	sub	sp, #36	; 0x24
90015872:	4680      	mov	r8, r0
90015874:	460c      	mov	r4, r1
90015876:	2b00      	cmp	r3, #0
90015878:	4615      	mov	r5, r2
9001587a:	dd0e      	ble.n	9001589a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
9001587c:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
90015880:	2b00      	cmp	r3, #0
90015882:	dd0a      	ble.n	9001589a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
90015884:	4628      	mov	r0, r5
90015886:	f7ff ff5b 	bl	90015740 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
9001588a:	4621      	mov	r1, r4
9001588c:	f7fe fbcf 	bl	9001402e <_ZNK8touchgfx4Rect9intersectERKS0_>
90015890:	69eb      	ldr	r3, [r5, #28]
90015892:	b928      	cbnz	r0, 900158a0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x38>
90015894:	461d      	mov	r5, r3
90015896:	2b00      	cmp	r3, #0
90015898:	d1f4      	bne.n	90015884 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1c>
9001589a:	b009      	add	sp, #36	; 0x24
9001589c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
900158a0:	ae04      	add	r6, sp, #16
900158a2:	2b00      	cmp	r3, #0
900158a4:	f000 80b5 	beq.w	90015a12 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
900158a8:	682b      	ldr	r3, [r5, #0]
900158aa:	4629      	mov	r1, r5
900158ac:	a802      	add	r0, sp, #8
900158ae:	68db      	ldr	r3, [r3, #12]
900158b0:	4798      	blx	r3
900158b2:	4628      	mov	r0, r5
900158b4:	f7ff ff60 	bl	90015778 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
900158b8:	f8bd 7008 	ldrh.w	r7, [sp, #8]
900158bc:	4407      	add	r7, r0
900158be:	4628      	mov	r0, r5
900158c0:	f7ff ff6e 	bl	900157a0 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
900158c4:	f8bd 300a 	ldrh.w	r3, [sp, #10]
900158c8:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
900158cc:	b23f      	sxth	r7, r7
900158ce:	4418      	add	r0, r3
900158d0:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
900158d4:	4621      	mov	r1, r4
900158d6:	f8ad 2014 	strh.w	r2, [sp, #20]
900158da:	f8ad 0012 	strh.w	r0, [sp, #18]
900158de:	4630      	mov	r0, r6
900158e0:	f8ad 3016 	strh.w	r3, [sp, #22]
900158e4:	f8ad 7010 	strh.w	r7, [sp, #16]
900158e8:	f7fb fd74 	bl	900113d4 <_ZN8touchgfx4RectaNERKS0_>
900158ec:	4628      	mov	r0, r5
900158ee:	f7ff ff27 	bl	90015740 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
900158f2:	ab06      	add	r3, sp, #24
900158f4:	4602      	mov	r2, r0
900158f6:	e896 0003 	ldmia.w	r6, {r0, r1}
900158fa:	e883 0003 	stmia.w	r3, {r0, r1}
900158fe:	4611      	mov	r1, r2
90015900:	4618      	mov	r0, r3
90015902:	f7fb fd67 	bl	900113d4 <_ZN8touchgfx4RectaNERKS0_>
90015906:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
9001590a:	f9b4 1000 	ldrsh.w	r1, [r4]
9001590e:	f9bd a01a 	ldrsh.w	sl, [sp, #26]
90015912:	4299      	cmp	r1, r3
90015914:	f9bd b01c 	ldrsh.w	fp, [sp, #28]
90015918:	f9bd 901e 	ldrsh.w	r9, [sp, #30]
9001591c:	d10b      	bne.n	90015936 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
9001591e:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
90015922:	4552      	cmp	r2, sl
90015924:	d107      	bne.n	90015936 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
90015926:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
9001592a:	455a      	cmp	r2, fp
9001592c:	d103      	bne.n	90015936 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
9001592e:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
90015932:	454a      	cmp	r2, r9
90015934:	d06d      	beq.n	90015a12 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
90015936:	f1bb 0f00 	cmp.w	fp, #0
9001593a:	dd65      	ble.n	90015a08 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
9001593c:	f1b9 0f00 	cmp.w	r9, #0
90015940:	dd62      	ble.n	90015a08 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
90015942:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
90015946:	fa1f f08a 	uxth.w	r0, sl
9001594a:	4552      	cmp	r2, sl
9001594c:	9000      	str	r0, [sp, #0]
9001594e:	da12      	bge.n	90015976 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x10e>
90015950:	9301      	str	r3, [sp, #4]
90015952:	9b00      	ldr	r3, [sp, #0]
90015954:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
90015958:	f8ad 2012 	strh.w	r2, [sp, #18]
9001595c:	1a9a      	subs	r2, r3, r2
9001595e:	f8ad 1010 	strh.w	r1, [sp, #16]
90015962:	4631      	mov	r1, r6
90015964:	f8ad 0014 	strh.w	r0, [sp, #20]
90015968:	4640      	mov	r0, r8
9001596a:	f8ad 2016 	strh.w	r2, [sp, #22]
9001596e:	69ea      	ldr	r2, [r5, #28]
90015970:	f7ff ff7a 	bl	90015868 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
90015974:	9b01      	ldr	r3, [sp, #4]
90015976:	f9b4 2000 	ldrsh.w	r2, [r4]
9001597a:	b29f      	uxth	r7, r3
9001597c:	429a      	cmp	r2, r3
9001597e:	da0d      	bge.n	9001599c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x134>
90015980:	f8ad 2010 	strh.w	r2, [sp, #16]
90015984:	1aba      	subs	r2, r7, r2
90015986:	f8ad a012 	strh.w	sl, [sp, #18]
9001598a:	4631      	mov	r1, r6
9001598c:	f8ad 2014 	strh.w	r2, [sp, #20]
90015990:	4640      	mov	r0, r8
90015992:	f8ad 9016 	strh.w	r9, [sp, #22]
90015996:	69ea      	ldr	r2, [r5, #28]
90015998:	f7ff ff66 	bl	90015868 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
9001599c:	8822      	ldrh	r2, [r4, #0]
9001599e:	445f      	add	r7, fp
900159a0:	88a3      	ldrh	r3, [r4, #4]
900159a2:	b2bf      	uxth	r7, r7
900159a4:	4413      	add	r3, r2
900159a6:	b23a      	sxth	r2, r7
900159a8:	b29b      	uxth	r3, r3
900159aa:	b219      	sxth	r1, r3
900159ac:	4291      	cmp	r1, r2
900159ae:	dd0d      	ble.n	900159cc <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x164>
900159b0:	1bdb      	subs	r3, r3, r7
900159b2:	f8ad 2010 	strh.w	r2, [sp, #16]
900159b6:	f8ad a012 	strh.w	sl, [sp, #18]
900159ba:	4631      	mov	r1, r6
900159bc:	f8ad 3014 	strh.w	r3, [sp, #20]
900159c0:	4640      	mov	r0, r8
900159c2:	f8ad 9016 	strh.w	r9, [sp, #22]
900159c6:	69ea      	ldr	r2, [r5, #28]
900159c8:	f7ff ff4e 	bl	90015868 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
900159cc:	88e2      	ldrh	r2, [r4, #6]
900159ce:	8863      	ldrh	r3, [r4, #2]
900159d0:	4413      	add	r3, r2
900159d2:	9a00      	ldr	r2, [sp, #0]
900159d4:	444a      	add	r2, r9
900159d6:	b29b      	uxth	r3, r3
900159d8:	fa1f f982 	uxth.w	r9, r2
900159dc:	b219      	sxth	r1, r3
900159de:	fa0f f289 	sxth.w	r2, r9
900159e2:	428a      	cmp	r2, r1
900159e4:	da15      	bge.n	90015a12 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
900159e6:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
900159ea:	eba3 0309 	sub.w	r3, r3, r9
900159ee:	f9b4 0000 	ldrsh.w	r0, [r4]
900159f2:	f8ad 1014 	strh.w	r1, [sp, #20]
900159f6:	4631      	mov	r1, r6
900159f8:	f8ad 0010 	strh.w	r0, [sp, #16]
900159fc:	f8ad 2012 	strh.w	r2, [sp, #18]
90015a00:	f8ad 3016 	strh.w	r3, [sp, #22]
90015a04:	69ea      	ldr	r2, [r5, #28]
90015a06:	e001      	b.n	90015a0c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a4>
90015a08:	69ea      	ldr	r2, [r5, #28]
90015a0a:	4621      	mov	r1, r4
90015a0c:	4640      	mov	r0, r8
90015a0e:	f7ff ff2b 	bl	90015868 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
90015a12:	4628      	mov	r0, r5
90015a14:	f7ff fe94 	bl	90015740 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
90015a18:	6861      	ldr	r1, [r4, #4]
90015a1a:	4602      	mov	r2, r0
90015a1c:	4633      	mov	r3, r6
90015a1e:	6820      	ldr	r0, [r4, #0]
90015a20:	c303      	stmia	r3!, {r0, r1}
90015a22:	4611      	mov	r1, r2
90015a24:	4630      	mov	r0, r6
90015a26:	f7fb fcd5 	bl	900113d4 <_ZN8touchgfx4RectaNERKS0_>
90015a2a:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
90015a2e:	2b00      	cmp	r3, #0
90015a30:	f77f af33 	ble.w	9001589a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
90015a34:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
90015a38:	2b00      	cmp	r3, #0
90015a3a:	f77f af2e 	ble.w	9001589a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
90015a3e:	4628      	mov	r0, r5
90015a40:	f7ff fe9a 	bl	90015778 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
90015a44:	f8bd 3010 	ldrh.w	r3, [sp, #16]
90015a48:	1a18      	subs	r0, r3, r0
90015a4a:	f8ad 0010 	strh.w	r0, [sp, #16]
90015a4e:	4628      	mov	r0, r5
90015a50:	f7ff fea6 	bl	900157a0 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
90015a54:	f8bd 3012 	ldrh.w	r3, [sp, #18]
90015a58:	4631      	mov	r1, r6
90015a5a:	1a18      	subs	r0, r3, r0
90015a5c:	f8ad 0012 	strh.w	r0, [sp, #18]
90015a60:	4628      	mov	r0, r5
90015a62:	682b      	ldr	r3, [r5, #0]
90015a64:	689b      	ldr	r3, [r3, #8]
90015a66:	4798      	blx	r3
90015a68:	e717      	b.n	9001589a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>

90015a6a <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>:
90015a6a:	b570      	push	{r4, r5, r6, lr}
90015a6c:	1d06      	adds	r6, r0, #4
90015a6e:	b086      	sub	sp, #24
90015a70:	460c      	mov	r4, r1
90015a72:	2300      	movs	r3, #0
90015a74:	4631      	mov	r1, r6
90015a76:	4605      	mov	r5, r0
90015a78:	a802      	add	r0, sp, #8
90015a7a:	9301      	str	r3, [sp, #4]
90015a7c:	f7ff fc96 	bl	900153ac <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
90015a80:	f8bd 3008 	ldrh.w	r3, [sp, #8]
90015a84:	8822      	ldrh	r2, [r4, #0]
90015a86:	f8bd 100a 	ldrh.w	r1, [sp, #10]
90015a8a:	1ad2      	subs	r2, r2, r3
90015a8c:	8863      	ldrh	r3, [r4, #2]
90015a8e:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
90015a92:	1a5b      	subs	r3, r3, r1
90015a94:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
90015a98:	f8ad 2010 	strh.w	r2, [sp, #16]
90015a9c:	aa01      	add	r2, sp, #4
90015a9e:	f8ad 0014 	strh.w	r0, [sp, #20]
90015aa2:	4630      	mov	r0, r6
90015aa4:	f8ad 1016 	strh.w	r1, [sp, #22]
90015aa8:	a904      	add	r1, sp, #16
90015aaa:	f8ad 3012 	strh.w	r3, [sp, #18]
90015aae:	f7fb fd69 	bl	90011584 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>
90015ab2:	9a01      	ldr	r2, [sp, #4]
90015ab4:	b11a      	cbz	r2, 90015abe <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE+0x54>
90015ab6:	4621      	mov	r1, r4
90015ab8:	4628      	mov	r0, r5
90015aba:	f7ff fed5 	bl	90015868 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
90015abe:	b006      	add	sp, #24
90015ac0:	bd70      	pop	{r4, r5, r6, pc}

90015ac2 <_ZN8touchgfx6Screen4drawERNS_4RectE>:
90015ac2:	4602      	mov	r2, r0
90015ac4:	b530      	push	{r4, r5, lr}
90015ac6:	4604      	mov	r4, r0
90015ac8:	b085      	sub	sp, #20
90015aca:	f852 0f08 	ldr.w	r0, [r2, #8]!
90015ace:	460d      	mov	r5, r1
90015ad0:	466b      	mov	r3, sp
90015ad2:	6851      	ldr	r1, [r2, #4]
90015ad4:	c303      	stmia	r3!, {r0, r1}
90015ad6:	4629      	mov	r1, r5
90015ad8:	4668      	mov	r0, sp
90015ada:	f7fb fc7b 	bl	900113d4 <_ZN8touchgfx4RectaNERKS0_>
90015ade:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
90015ae2:	b12b      	cbz	r3, 90015af0 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2e>
90015ae4:	4669      	mov	r1, sp
90015ae6:	4620      	mov	r0, r4
90015ae8:	f7ff ffbf 	bl	90015a6a <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>
90015aec:	b005      	add	sp, #20
90015aee:	bd30      	pop	{r4, r5, pc}
90015af0:	3404      	adds	r4, #4
90015af2:	a802      	add	r0, sp, #8
90015af4:	4621      	mov	r1, r4
90015af6:	f7ff fc59 	bl	900153ac <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
90015afa:	f8bd 3000 	ldrh.w	r3, [sp]
90015afe:	f8bd 2008 	ldrh.w	r2, [sp, #8]
90015b02:	4669      	mov	r1, sp
90015b04:	4620      	mov	r0, r4
90015b06:	1a9b      	subs	r3, r3, r2
90015b08:	f8bd 200a 	ldrh.w	r2, [sp, #10]
90015b0c:	f8ad 3000 	strh.w	r3, [sp]
90015b10:	f8bd 3002 	ldrh.w	r3, [sp, #2]
90015b14:	1a9b      	subs	r3, r3, r2
90015b16:	f8ad 3002 	strh.w	r3, [sp, #2]
90015b1a:	f7fb fcfa 	bl	90011512 <_ZNK8touchgfx9Container4drawERKNS_4RectE>
90015b1e:	e7e5      	b.n	90015aec <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2a>

90015b20 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>:
90015b20:	460b      	mov	r3, r1
90015b22:	680a      	ldr	r2, [r1, #0]
90015b24:	1d01      	adds	r1, r0, #4
90015b26:	6992      	ldr	r2, [r2, #24]
90015b28:	4618      	mov	r0, r3
90015b2a:	4710      	bx	r2

90015b2c <_ZN8touchgfx12TextProviderC1Ev>:
90015b2c:	b538      	push	{r3, r4, r5, lr}
90015b2e:	2500      	movs	r5, #0
90015b30:	2302      	movs	r3, #2
90015b32:	4604      	mov	r4, r0
90015b34:	220e      	movs	r2, #14
90015b36:	7403      	strb	r3, [r0, #16]
90015b38:	4629      	mov	r1, r5
90015b3a:	6145      	str	r5, [r0, #20]
90015b3c:	7605      	strb	r5, [r0, #24]
90015b3e:	83c5      	strh	r5, [r0, #30]
90015b40:	8405      	strh	r5, [r0, #32]
90015b42:	86c5      	strh	r5, [r0, #54]	; 0x36
90015b44:	8705      	strh	r5, [r0, #56]	; 0x38
90015b46:	87c5      	strh	r5, [r0, #62]	; 0x3e
90015b48:	f8a0 5040 	strh.w	r5, [r0, #64]	; 0x40
90015b4c:	e9c0 5500 	strd	r5, r5, [r0]
90015b50:	e9c0 5511 	strd	r5, r5, [r0, #68]	; 0x44
90015b54:	304c      	adds	r0, #76	; 0x4c
90015b56:	f00d fc0d 	bl	90023374 <memset>
90015b5a:	2301      	movs	r3, #1
90015b5c:	4620      	mov	r0, r4
90015b5e:	f8a4 505a 	strh.w	r5, [r4, #90]	; 0x5a
90015b62:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
90015b66:	f8a4 505e 	strh.w	r5, [r4, #94]	; 0x5e
90015b6a:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
90015b6e:	f884 5061 	strb.w	r5, [r4, #97]	; 0x61
90015b72:	f7ef fe5b 	bl	9000582c <_ZN8touchgfx12TextProvider18initializeInternalEv>
90015b76:	4620      	mov	r0, r4
90015b78:	bd38      	pop	{r3, r4, r5, pc}

90015b7a <_ZN8touchgfx12TextProvider19getNextCharInternalEv>:
90015b7a:	b530      	push	{r4, r5, lr}
90015b7c:	2500      	movs	r5, #0
90015b7e:	2401      	movs	r4, #1
90015b80:	6843      	ldr	r3, [r0, #4]
90015b82:	b913      	cbnz	r3, 90015b8a <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x10>
90015b84:	6803      	ldr	r3, [r0, #0]
90015b86:	b313      	cbz	r3, 90015bce <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
90015b88:	6043      	str	r3, [r0, #4]
90015b8a:	7e03      	ldrb	r3, [r0, #24]
90015b8c:	b143      	cbz	r3, 90015ba0 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x26>
90015b8e:	6943      	ldr	r3, [r0, #20]
90015b90:	b12b      	cbz	r3, 90015b9e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
90015b92:	881a      	ldrh	r2, [r3, #0]
90015b94:	b11a      	cbz	r2, 90015b9e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
90015b96:	1c9a      	adds	r2, r3, #2
90015b98:	6142      	str	r2, [r0, #20]
90015b9a:	8818      	ldrh	r0, [r3, #0]
90015b9c:	bd30      	pop	{r4, r5, pc}
90015b9e:	7605      	strb	r5, [r0, #24]
90015ba0:	6843      	ldr	r3, [r0, #4]
90015ba2:	8819      	ldrh	r1, [r3, #0]
90015ba4:	b199      	cbz	r1, 90015bce <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
90015ba6:	1c9a      	adds	r2, r3, #2
90015ba8:	2902      	cmp	r1, #2
90015baa:	6042      	str	r2, [r0, #4]
90015bac:	d1f5      	bne.n	90015b9a <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x20>
90015bae:	7c03      	ldrb	r3, [r0, #16]
90015bb0:	2b01      	cmp	r3, #1
90015bb2:	d8e5      	bhi.n	90015b80 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
90015bb4:	1c5a      	adds	r2, r3, #1
90015bb6:	3302      	adds	r3, #2
90015bb8:	7402      	strb	r2, [r0, #16]
90015bba:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
90015bbe:	6143      	str	r3, [r0, #20]
90015bc0:	2b00      	cmp	r3, #0
90015bc2:	d0dd      	beq.n	90015b80 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
90015bc4:	881b      	ldrh	r3, [r3, #0]
90015bc6:	2b00      	cmp	r3, #0
90015bc8:	d0da      	beq.n	90015b80 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
90015bca:	7604      	strb	r4, [r0, #24]
90015bcc:	e7d8      	b.n	90015b80 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
90015bce:	2000      	movs	r0, #0
90015bd0:	e7e4      	b.n	90015b9c <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x22>

90015bd2 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>:
90015bd2:	6001      	str	r1, [r0, #0]
90015bd4:	2100      	movs	r1, #0
90015bd6:	b430      	push	{r4, r5}
90015bd8:	6041      	str	r1, [r0, #4]
90015bda:	6815      	ldr	r5, [r2, #0]
90015bdc:	6085      	str	r5, [r0, #8]
90015bde:	6852      	ldr	r2, [r2, #4]
90015be0:	6443      	str	r3, [r0, #68]	; 0x44
90015be2:	9b02      	ldr	r3, [sp, #8]
90015be4:	60c2      	str	r2, [r0, #12]
90015be6:	7401      	strb	r1, [r0, #16]
90015be8:	6141      	str	r1, [r0, #20]
90015bea:	7601      	strb	r1, [r0, #24]
90015bec:	8701      	strh	r1, [r0, #56]	; 0x38
90015bee:	8401      	strh	r1, [r0, #32]
90015bf0:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
90015bf4:	6483      	str	r3, [r0, #72]	; 0x48
90015bf6:	bc30      	pop	{r4, r5}
90015bf8:	f7ef be18 	b.w	9000582c <_ZN8touchgfx12TextProvider18initializeInternalEv>

90015bfc <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>:
90015bfc:	b5f0      	push	{r4, r5, r6, r7, lr}
90015bfe:	4605      	mov	r5, r0
90015c00:	4608      	mov	r0, r1
90015c02:	b1f1      	cbz	r1, 90015c42 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x46>
90015c04:	f105 044c 	add.w	r4, r5, #76	; 0x4c
90015c08:	460b      	mov	r3, r1
90015c0a:	f101 0708 	add.w	r7, r1, #8
90015c0e:	4622      	mov	r2, r4
90015c10:	6818      	ldr	r0, [r3, #0]
90015c12:	3308      	adds	r3, #8
90015c14:	f853 1c04 	ldr.w	r1, [r3, #-4]
90015c18:	4626      	mov	r6, r4
90015c1a:	42bb      	cmp	r3, r7
90015c1c:	c603      	stmia	r6!, {r0, r1}
90015c1e:	4634      	mov	r4, r6
90015c20:	d1f6      	bne.n	90015c10 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x14>
90015c22:	6818      	ldr	r0, [r3, #0]
90015c24:	6030      	str	r0, [r6, #0]
90015c26:	4610      	mov	r0, r2
90015c28:	889b      	ldrh	r3, [r3, #4]
90015c2a:	80b3      	strh	r3, [r6, #4]
90015c2c:	f895 3059 	ldrb.w	r3, [r5, #89]	; 0x59
90015c30:	015b      	lsls	r3, r3, #5
90015c32:	f403 7180 	and.w	r1, r3, #256	; 0x100
90015c36:	f895 3052 	ldrb.w	r3, [r5, #82]	; 0x52
90015c3a:	430b      	orrs	r3, r1
90015c3c:	425b      	negs	r3, r3
90015c3e:	f885 3055 	strb.w	r3, [r5, #85]	; 0x55
90015c42:	bdf0      	pop	{r4, r5, r6, r7, pc}

90015c44 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>:
90015c44:	b538      	push	{r3, r4, r5, lr}
90015c46:	460c      	mov	r4, r1
90015c48:	6811      	ldr	r1, [r2, #0]
90015c4a:	4610      	mov	r0, r2
90015c4c:	68cd      	ldr	r5, [r1, #12]
90015c4e:	4619      	mov	r1, r3
90015c50:	47a8      	blx	r5
90015c52:	2800      	cmp	r0, #0
90015c54:	bf08      	it	eq
90015c56:	4620      	moveq	r0, r4
90015c58:	bd38      	pop	{r3, r4, r5, pc}
	...

90015c5c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>:
90015c5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
90015c5e:	4604      	mov	r4, r0
90015c60:	4615      	mov	r5, r2
90015c62:	4608      	mov	r0, r1
90015c64:	b93a      	cbnz	r2, 90015c76 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1a>
90015c66:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
90015c6a:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
90015c6e:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
90015c72:	4628      	mov	r0, r5
90015c74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
90015c76:	f892 c00d 	ldrb.w	ip, [r2, #13]
90015c7a:	f46f 6763 	mvn.w	r7, #3632	; 0xe30
90015c7e:	8893      	ldrh	r3, [r2, #4]
90015c80:	ea4f 160c 	mov.w	r6, ip, lsl #4
90015c84:	f406 7280 	and.w	r2, r6, #256	; 0x100
90015c88:	79ee      	ldrb	r6, [r5, #7]
90015c8a:	4316      	orrs	r6, r2
90015c8c:	19da      	adds	r2, r3, r7
90015c8e:	b291      	uxth	r1, r2
90015c90:	b2b7      	uxth	r7, r6
90015c92:	291d      	cmp	r1, #29
90015c94:	d87b      	bhi.n	90015d8e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x132>
90015c96:	2201      	movs	r2, #1
90015c98:	10f6      	asrs	r6, r6, #3
90015c9a:	408a      	lsls	r2, r1
90015c9c:	4974      	ldr	r1, [pc, #464]	; (90015e70 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x214>)
90015c9e:	420a      	tst	r2, r1
90015ca0:	d12e      	bne.n	90015d00 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa4>
90015ca2:	f412 7f60 	tst.w	r2, #896	; 0x380
90015ca6:	d072      	beq.n	90015d8e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x132>
90015ca8:	f104 024c 	add.w	r2, r4, #76	; 0x4c
90015cac:	462b      	mov	r3, r5
90015cae:	f105 0e08 	add.w	lr, r5, #8
90015cb2:	4615      	mov	r5, r2
90015cb4:	6818      	ldr	r0, [r3, #0]
90015cb6:	3308      	adds	r3, #8
90015cb8:	f853 1c04 	ldr.w	r1, [r3, #-4]
90015cbc:	4694      	mov	ip, r2
90015cbe:	4573      	cmp	r3, lr
90015cc0:	e8ac 0003 	stmia.w	ip!, {r0, r1}
90015cc4:	4662      	mov	r2, ip
90015cc6:	d1f5      	bne.n	90015cb4 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x58>
90015cc8:	6818      	ldr	r0, [r3, #0]
90015cca:	f8cc 0000 	str.w	r0, [ip]
90015cce:	889b      	ldrh	r3, [r3, #4]
90015cd0:	f8ac 3004 	strh.w	r3, [ip, #4]
90015cd4:	b2b3      	uxth	r3, r6
90015cd6:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
90015cda:	f894 0059 	ldrb.w	r0, [r4, #89]	; 0x59
90015cde:	1aca      	subs	r2, r1, r3
90015ce0:	1bcf      	subs	r7, r1, r7
90015ce2:	f020 0060 	bic.w	r0, r0, #96	; 0x60
90015ce6:	b292      	uxth	r2, r2
90015ce8:	1afb      	subs	r3, r7, r3
90015cea:	f884 2054 	strb.w	r2, [r4, #84]	; 0x54
90015cee:	10d2      	asrs	r2, r2, #3
90015cf0:	f002 0260 	and.w	r2, r2, #96	; 0x60
90015cf4:	4302      	orrs	r2, r0
90015cf6:	f884 2059 	strb.w	r2, [r4, #89]	; 0x59
90015cfa:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
90015cfe:	e7b8      	b.n	90015c72 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
90015d00:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
90015d02:	eb04 0343 	add.w	r3, r4, r3, lsl #1
90015d06:	8c59      	ldrh	r1, [r3, #34]	; 0x22
90015d08:	f640 6333 	movw	r3, #3635	; 0xe33
90015d0c:	4299      	cmp	r1, r3
90015d0e:	d110      	bne.n	90015d32 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xd6>
90015d10:	6803      	ldr	r3, [r0, #0]
90015d12:	68db      	ldr	r3, [r3, #12]
90015d14:	4798      	blx	r3
90015d16:	7b41      	ldrb	r1, [r0, #13]
90015d18:	00cb      	lsls	r3, r1, #3
90015d1a:	f403 7280 	and.w	r2, r3, #256	; 0x100
90015d1e:	7a03      	ldrb	r3, [r0, #8]
90015d20:	0648      	lsls	r0, r1, #25
90015d22:	ea43 0302 	orr.w	r3, r3, r2
90015d26:	bf44      	itt	mi
90015d28:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
90015d2c:	b21b      	sxthmi	r3, r3
90015d2e:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
90015d32:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
90015d36:	462a      	mov	r2, r5
90015d38:	f105 0c08 	add.w	ip, r5, #8
90015d3c:	443b      	add	r3, r7
90015d3e:	4433      	add	r3, r6
90015d40:	f104 064c 	add.w	r6, r4, #76	; 0x4c
90015d44:	b29b      	uxth	r3, r3
90015d46:	4635      	mov	r5, r6
90015d48:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
90015d4c:	6810      	ldr	r0, [r2, #0]
90015d4e:	3208      	adds	r2, #8
90015d50:	f852 1c04 	ldr.w	r1, [r2, #-4]
90015d54:	4637      	mov	r7, r6
90015d56:	4562      	cmp	r2, ip
90015d58:	c703      	stmia	r7!, {r0, r1}
90015d5a:	463e      	mov	r6, r7
90015d5c:	d1f6      	bne.n	90015d4c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xf0>
90015d5e:	6810      	ldr	r0, [r2, #0]
90015d60:	6038      	str	r0, [r7, #0]
90015d62:	8892      	ldrh	r2, [r2, #4]
90015d64:	80ba      	strh	r2, [r7, #4]
90015d66:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
90015d6a:	10db      	asrs	r3, r3, #3
90015d6c:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
90015d70:	f003 0360 	and.w	r3, r3, #96	; 0x60
90015d74:	f022 0260 	bic.w	r2, r2, #96	; 0x60
90015d78:	4313      	orrs	r3, r2
90015d7a:	f894 205e 	ldrb.w	r2, [r4, #94]	; 0x5e
90015d7e:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
90015d82:	f894 3055 	ldrb.w	r3, [r4, #85]	; 0x55
90015d86:	1a9b      	subs	r3, r3, r2
90015d88:	f884 3055 	strb.w	r3, [r4, #85]	; 0x55
90015d8c:	e771      	b.n	90015c72 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
90015d8e:	f023 0204 	bic.w	r2, r3, #4
90015d92:	f640 611b 	movw	r1, #3611	; 0xe1b
90015d96:	428a      	cmp	r2, r1
90015d98:	d003      	beq.n	90015da2 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x146>
90015d9a:	f640 621d 	movw	r2, #3613	; 0xe1d
90015d9e:	4293      	cmp	r3, r2
90015da0:	d120      	bne.n	90015de4 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x188>
90015da2:	3b01      	subs	r3, #1
90015da4:	4602      	mov	r2, r0
90015da6:	4629      	mov	r1, r5
90015da8:	4620      	mov	r0, r4
90015daa:	b29b      	uxth	r3, r3
90015dac:	f7ff ff4a 	bl	90015c44 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
90015db0:	7b41      	ldrb	r1, [r0, #13]
90015db2:	00cb      	lsls	r3, r1, #3
90015db4:	0649      	lsls	r1, r1, #25
90015db6:	f403 7280 	and.w	r2, r3, #256	; 0x100
90015dba:	7a03      	ldrb	r3, [r0, #8]
90015dbc:	ea43 0302 	orr.w	r3, r3, r2
90015dc0:	bf44      	itt	mi
90015dc2:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
90015dc6:	b21b      	sxthmi	r3, r3
90015dc8:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
90015dcc:	7b6b      	ldrb	r3, [r5, #13]
90015dce:	7aaa      	ldrb	r2, [r5, #10]
90015dd0:	005b      	lsls	r3, r3, #1
90015dd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
90015dd6:	4313      	orrs	r3, r2
90015dd8:	115a      	asrs	r2, r3, #5
90015dda:	eb02 0393 	add.w	r3, r2, r3, lsr #2
90015dde:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
90015de2:	e035      	b.n	90015e50 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1f4>
90015de4:	ea4f 02cc 	mov.w	r2, ip, lsl #3
90015de8:	f01c 0f40 	tst.w	ip, #64	; 0x40
90015dec:	f402 7180 	and.w	r1, r2, #256	; 0x100
90015df0:	7a2a      	ldrb	r2, [r5, #8]
90015df2:	ea42 0201 	orr.w	r2, r2, r1
90015df6:	f640 6109 	movw	r1, #3593	; 0xe09
90015dfa:	bf1c      	itt	ne
90015dfc:	f5a2 7200 	subne.w	r2, r2, #512	; 0x200
90015e00:	b212      	sxthne	r2, r2
90015e02:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
90015e06:	f023 0210 	bic.w	r2, r3, #16
90015e0a:	428a      	cmp	r2, r1
90015e0c:	d003      	beq.n	90015e16 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1ba>
90015e0e:	f640 6213 	movw	r2, #3603	; 0xe13
90015e12:	4293      	cmp	r3, r2
90015e14:	d129      	bne.n	90015e6a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x20e>
90015e16:	7b6e      	ldrb	r6, [r5, #13]
90015e18:	4629      	mov	r1, r5
90015e1a:	0076      	lsls	r6, r6, #1
90015e1c:	f406 7280 	and.w	r2, r6, #256	; 0x100
90015e20:	7aae      	ldrb	r6, [r5, #10]
90015e22:	4316      	orrs	r6, r2
90015e24:	f640 6213 	movw	r2, #3603	; 0xe13
90015e28:	4293      	cmp	r3, r2
90015e2a:	4602      	mov	r2, r0
90015e2c:	4620      	mov	r0, r4
90015e2e:	bf16      	itet	ne
90015e30:	f103 33ff 	addne.w	r3, r3, #4294967295
90015e34:	f640 630c 	movweq	r3, #3596	; 0xe0c
90015e38:	b29b      	uxthne	r3, r3
90015e3a:	f7ff ff03 	bl	90015c44 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
90015e3e:	7b43      	ldrb	r3, [r0, #13]
90015e40:	7a82      	ldrb	r2, [r0, #10]
90015e42:	005b      	lsls	r3, r3, #1
90015e44:	f403 7380 	and.w	r3, r3, #256	; 0x100
90015e48:	4313      	orrs	r3, r2
90015e4a:	1af6      	subs	r6, r6, r3
90015e4c:	f8a4 605e 	strh.w	r6, [r4, #94]	; 0x5e
90015e50:	7b69      	ldrb	r1, [r5, #13]
90015e52:	00cb      	lsls	r3, r1, #3
90015e54:	f403 7280 	and.w	r2, r3, #256	; 0x100
90015e58:	7a2b      	ldrb	r3, [r5, #8]
90015e5a:	4313      	orrs	r3, r2
90015e5c:	064a      	lsls	r2, r1, #25
90015e5e:	bf44      	itt	mi
90015e60:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
90015e64:	b21b      	sxthmi	r3, r3
90015e66:	1bdb      	subs	r3, r3, r7
90015e68:	e747      	b.n	90015cfa <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x9e>
90015e6a:	2300      	movs	r3, #0
90015e6c:	e7b7      	b.n	90015dde <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x182>
90015e6e:	bf00      	nop
90015e70:	3fc00079 	.word	0x3fc00079

90015e74 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>:
90015e74:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
90015e78:	4604      	mov	r4, r0
90015e7a:	b942      	cbnz	r2, 90015e8e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1a>
90015e7c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
90015e80:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
90015e84:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
90015e88:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
90015e8c:	e047      	b.n	90015f1e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
90015e8e:	7b51      	ldrb	r1, [r2, #13]
90015e90:	8893      	ldrh	r3, [r2, #4]
90015e92:	010d      	lsls	r5, r1, #4
90015e94:	f405 7080 	and.w	r0, r5, #256	; 0x100
90015e98:	79d5      	ldrb	r5, [r2, #7]
90015e9a:	4305      	orrs	r5, r0
90015e9c:	2d04      	cmp	r5, #4
90015e9e:	bfcc      	ite	gt
90015ea0:	ea4f 0e95 	movgt.w	lr, r5, lsr #2
90015ea4:	f04f 0e01 	movle.w	lr, #1
90015ea8:	f5b3 6fdd 	cmp.w	r3, #1768	; 0x6e8
90015eac:	f200 80ab 	bhi.w	90016006 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x192>
90015eb0:	f240 60e7 	movw	r0, #1767	; 0x6e7
90015eb4:	4283      	cmp	r3, r0
90015eb6:	d216      	bcs.n	90015ee6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
90015eb8:	f240 605b 	movw	r0, #1627	; 0x65b
90015ebc:	4283      	cmp	r3, r0
90015ebe:	d859      	bhi.n	90015f74 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x100>
90015ec0:	f240 6057 	movw	r0, #1623	; 0x657
90015ec4:	4283      	cmp	r3, r0
90015ec6:	d20e      	bcs.n	90015ee6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
90015ec8:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
90015ecc:	d24a      	bcs.n	90015f64 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xf0>
90015ece:	f240 604e 	movw	r0, #1614	; 0x64e
90015ed2:	4283      	cmp	r3, r0
90015ed4:	d207      	bcs.n	90015ee6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
90015ed6:	f240 601a 	movw	r0, #1562	; 0x61a
90015eda:	4283      	cmp	r3, r0
90015edc:	d02a      	beq.n	90015f34 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
90015ede:	d821      	bhi.n	90015f24 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xb0>
90015ee0:	f5b3 6fc2 	cmp.w	r3, #1552	; 0x610
90015ee4:	d35b      	bcc.n	90015f9e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
90015ee6:	f9b4 305a 	ldrsh.w	r3, [r4, #90]	; 0x5a
90015eea:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
90015eee:	f040 80d0 	bne.w	90016092 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
90015ef2:	f9b4 005c 	ldrsh.w	r0, [r4, #92]	; 0x5c
90015ef6:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
90015efa:	f040 80ca 	bne.w	90016092 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
90015efe:	00cb      	lsls	r3, r1, #3
90015f00:	0649      	lsls	r1, r1, #25
90015f02:	f403 7080 	and.w	r0, r3, #256	; 0x100
90015f06:	7a13      	ldrb	r3, [r2, #8]
90015f08:	ea43 0300 	orr.w	r3, r3, r0
90015f0c:	bf44      	itt	mi
90015f0e:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
90015f12:	b21b      	sxthmi	r3, r3
90015f14:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
90015f18:	1b5d      	subs	r5, r3, r5
90015f1a:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
90015f1e:	4610      	mov	r0, r2
90015f20:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
90015f24:	f240 604b 	movw	r0, #1611	; 0x64b
90015f28:	4283      	cmp	r3, r0
90015f2a:	d338      	bcc.n	90015f9e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
90015f2c:	f240 604c 	movw	r0, #1612	; 0x64c
90015f30:	4283      	cmp	r3, r0
90015f32:	d9d8      	bls.n	90015ee6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
90015f34:	f9b4 005a 	ldrsh.w	r0, [r4, #90]	; 0x5a
90015f38:	f9b4 305c 	ldrsh.w	r3, [r4, #92]	; 0x5c
90015f3c:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
90015f40:	f040 80f3 	bne.w	9001612a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b6>
90015f44:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
90015f48:	f040 80ef 	bne.w	9001612a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b6>
90015f4c:	00cb      	lsls	r3, r1, #3
90015f4e:	064e      	lsls	r6, r1, #25
90015f50:	f403 7080 	and.w	r0, r3, #256	; 0x100
90015f54:	7a13      	ldrb	r3, [r2, #8]
90015f56:	ea43 0300 	orr.w	r3, r3, r0
90015f5a:	bf44      	itt	mi
90015f5c:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
90015f60:	b21b      	sxthmi	r3, r3
90015f62:	e7d9      	b.n	90015f18 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa4>
90015f64:	f240 6054 	movw	r0, #1620	; 0x654
90015f68:	4283      	cmp	r3, r0
90015f6a:	d8e3      	bhi.n	90015f34 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
90015f6c:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
90015f70:	d9e0      	bls.n	90015f34 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
90015f72:	e7b8      	b.n	90015ee6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
90015f74:	f240 6074 	movw	r0, #1652	; 0x674
90015f78:	4283      	cmp	r3, r0
90015f7a:	d0b4      	beq.n	90015ee6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
90015f7c:	d82d      	bhi.n	90015fda <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x166>
90015f7e:	f240 605e 	movw	r0, #1630	; 0x65e
90015f82:	4283      	cmp	r3, r0
90015f84:	d804      	bhi.n	90015f90 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x11c>
90015f86:	f240 605d 	movw	r0, #1629	; 0x65d
90015f8a:	4283      	cmp	r3, r0
90015f8c:	d3d2      	bcc.n	90015f34 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
90015f8e:	e7aa      	b.n	90015ee6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
90015f90:	f240 605f 	movw	r0, #1631	; 0x65f
90015f94:	4283      	cmp	r3, r0
90015f96:	d0cd      	beq.n	90015f34 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
90015f98:	f5b3 6fce 	cmp.w	r3, #1648	; 0x670
90015f9c:	d0a3      	beq.n	90015ee6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
90015f9e:	00cb      	lsls	r3, r1, #3
90015fa0:	0649      	lsls	r1, r1, #25
90015fa2:	f403 7080 	and.w	r0, r3, #256	; 0x100
90015fa6:	7a13      	ldrb	r3, [r2, #8]
90015fa8:	ea43 0300 	orr.w	r3, r3, r0
90015fac:	bf44      	itt	mi
90015fae:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
90015fb2:	b21b      	sxthmi	r3, r3
90015fb4:	1b5d      	subs	r5, r3, r5
90015fb6:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
90015fba:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
90015fbe:	7b53      	ldrb	r3, [r2, #13]
90015fc0:	015b      	lsls	r3, r3, #5
90015fc2:	f403 7180 	and.w	r1, r3, #256	; 0x100
90015fc6:	7993      	ldrb	r3, [r2, #6]
90015fc8:	430b      	orrs	r3, r1
90015fca:	2105      	movs	r1, #5
90015fcc:	005b      	lsls	r3, r3, #1
90015fce:	fb93 f3f1 	sdiv	r3, r3, r1
90015fd2:	f992 1009 	ldrsb.w	r1, [r2, #9]
90015fd6:	440b      	add	r3, r1
90015fd8:	e756      	b.n	90015e88 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x14>
90015fda:	f240 60e2 	movw	r0, #1762	; 0x6e2
90015fde:	4283      	cmp	r3, r0
90015fe0:	d809      	bhi.n	90015ff6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x182>
90015fe2:	f240 60df 	movw	r0, #1759	; 0x6df
90015fe6:	4283      	cmp	r3, r0
90015fe8:	f4bf af7d 	bcs.w	90015ee6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
90015fec:	f2a3 63d6 	subw	r3, r3, #1750	; 0x6d6
90015ff0:	2b05      	cmp	r3, #5
90015ff2:	d8d4      	bhi.n	90015f9e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
90015ff4:	e777      	b.n	90015ee6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
90015ff6:	f240 60e3 	movw	r0, #1763	; 0x6e3
90015ffa:	4283      	cmp	r3, r0
90015ffc:	d09a      	beq.n	90015f34 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
90015ffe:	f240 60e4 	movw	r0, #1764	; 0x6e4
90016002:	4283      	cmp	r3, r0
90016004:	e7ca      	b.n	90015f9c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
90016006:	f5b3 6f0f 	cmp.w	r3, #2288	; 0x8f0
9001600a:	d22b      	bcs.n	90016064 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1f0>
9001600c:	f640 00ed 	movw	r0, #2285	; 0x8ed
90016010:	4283      	cmp	r3, r0
90016012:	d28f      	bcs.n	90015f34 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
90016014:	f640 00e5 	movw	r0, #2277	; 0x8e5
90016018:	4283      	cmp	r3, r0
9001601a:	d816      	bhi.n	9001604a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d6>
9001601c:	f640 00e4 	movw	r0, #2276	; 0x8e4
90016020:	4283      	cmp	r3, r0
90016022:	f4bf af60 	bcs.w	90015ee6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
90016026:	f240 60ec 	movw	r0, #1772	; 0x6ec
9001602a:	4283      	cmp	r3, r0
9001602c:	d80a      	bhi.n	90016044 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d0>
9001602e:	f240 60eb 	movw	r0, #1771	; 0x6eb
90016032:	4283      	cmp	r3, r0
90016034:	f4bf af57 	bcs.w	90015ee6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
90016038:	f240 60ea 	movw	r0, #1770	; 0x6ea
9001603c:	4283      	cmp	r3, r0
9001603e:	f43f af79 	beq.w	90015f34 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
90016042:	e7ac      	b.n	90015f9e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
90016044:	f240 60ed 	movw	r0, #1773	; 0x6ed
90016048:	e7f8      	b.n	9001603c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1c8>
9001604a:	f640 00e8 	movw	r0, #2280	; 0x8e8
9001604e:	4283      	cmp	r3, r0
90016050:	d802      	bhi.n	90016058 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e4>
90016052:	f640 00e7 	movw	r0, #2279	; 0x8e7
90016056:	e798      	b.n	90015f8a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x116>
90016058:	f640 00e9 	movw	r0, #2281	; 0x8e9
9001605c:	4283      	cmp	r3, r0
9001605e:	f47f af42 	bne.w	90015ee6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
90016062:	e767      	b.n	90015f34 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
90016064:	f640 00f6 	movw	r0, #2294	; 0x8f6
90016068:	4283      	cmp	r3, r0
9001606a:	f43f af63 	beq.w	90015f34 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
9001606e:	d802      	bhi.n	90016076 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x202>
90016070:	f640 00f2 	movw	r0, #2290	; 0x8f2
90016074:	e7f2      	b.n	9001605c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e8>
90016076:	f640 00fa 	movw	r0, #2298	; 0x8fa
9001607a:	4283      	cmp	r3, r0
9001607c:	d805      	bhi.n	9001608a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x216>
9001607e:	f640 00f9 	movw	r0, #2297	; 0x8f9
90016082:	4283      	cmp	r3, r0
90016084:	f4ff af2f 	bcc.w	90015ee6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
90016088:	e754      	b.n	90015f34 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
9001608a:	f640 00fe 	movw	r0, #2302	; 0x8fe
9001608e:	4283      	cmp	r3, r0
90016090:	e7af      	b.n	90015ff2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x17e>
90016092:	f104 0c4c 	add.w	ip, r4, #76	; 0x4c
90016096:	4617      	mov	r7, r2
90016098:	f102 0808 	add.w	r8, r2, #8
9001609c:	4666      	mov	r6, ip
9001609e:	6838      	ldr	r0, [r7, #0]
900160a0:	3708      	adds	r7, #8
900160a2:	f857 1c04 	ldr.w	r1, [r7, #-4]
900160a6:	46e6      	mov	lr, ip
900160a8:	4547      	cmp	r7, r8
900160aa:	e8ae 0003 	stmia.w	lr!, {r0, r1}
900160ae:	46f4      	mov	ip, lr
900160b0:	d1f5      	bne.n	9001609e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x22a>
900160b2:	6838      	ldr	r0, [r7, #0]
900160b4:	f8ce 0000 	str.w	r0, [lr]
900160b8:	88b9      	ldrh	r1, [r7, #4]
900160ba:	f8ae 1004 	strh.w	r1, [lr, #4]
900160be:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	; 0x5e
900160c2:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
900160c6:	d009      	beq.n	900160dc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x268>
900160c8:	7b51      	ldrb	r1, [r2, #13]
900160ca:	7992      	ldrb	r2, [r2, #6]
900160cc:	0149      	lsls	r1, r1, #5
900160ce:	f401 7180 	and.w	r1, r1, #256	; 0x100
900160d2:	4311      	orrs	r1, r2
900160d4:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
900160d8:	f884 0055 	strb.w	r0, [r4, #85]	; 0x55
900160dc:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
900160e0:	b2ad      	uxth	r5, r5
900160e2:	d00d      	beq.n	90016100 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x28c>
900160e4:	442b      	add	r3, r5
900160e6:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
900160ea:	b29b      	uxth	r3, r3
900160ec:	f022 0260 	bic.w	r2, r2, #96	; 0x60
900160f0:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
900160f4:	10db      	asrs	r3, r3, #3
900160f6:	f003 0360 	and.w	r3, r3, #96	; 0x60
900160fa:	4313      	orrs	r3, r2
900160fc:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
90016100:	f894 1059 	ldrb.w	r1, [r4, #89]	; 0x59
90016104:	00cb      	lsls	r3, r1, #3
90016106:	064f      	lsls	r7, r1, #25
90016108:	f403 7280 	and.w	r2, r3, #256	; 0x100
9001610c:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
90016110:	ea43 0302 	orr.w	r3, r3, r2
90016114:	bf44      	itt	mi
90016116:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
9001611a:	b21b      	sxthmi	r3, r3
9001611c:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
90016120:	1b5b      	subs	r3, r3, r5
90016122:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
90016126:	4632      	mov	r2, r6
90016128:	e6f9      	b.n	90015f1e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
9001612a:	f104 0c4c 	add.w	ip, r4, #76	; 0x4c
9001612e:	4617      	mov	r7, r2
90016130:	f102 0908 	add.w	r9, r2, #8
90016134:	4666      	mov	r6, ip
90016136:	6838      	ldr	r0, [r7, #0]
90016138:	3708      	adds	r7, #8
9001613a:	f857 1c04 	ldr.w	r1, [r7, #-4]
9001613e:	46e0      	mov	r8, ip
90016140:	454f      	cmp	r7, r9
90016142:	e8a8 0003 	stmia.w	r8!, {r0, r1}
90016146:	46c4      	mov	ip, r8
90016148:	d1f5      	bne.n	90016136 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2c2>
9001614a:	6838      	ldr	r0, [r7, #0]
9001614c:	f8c8 0000 	str.w	r0, [r8]
90016150:	88b9      	ldrh	r1, [r7, #4]
90016152:	f8a8 1004 	strh.w	r1, [r8, #4]
90016156:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	; 0x5e
9001615a:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
9001615e:	d009      	beq.n	90016174 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x300>
90016160:	7b51      	ldrb	r1, [r2, #13]
90016162:	7992      	ldrb	r2, [r2, #6]
90016164:	0149      	lsls	r1, r1, #5
90016166:	f401 7180 	and.w	r1, r1, #256	; 0x100
9001616a:	4311      	orrs	r1, r2
9001616c:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
90016170:	f884 0055 	strb.w	r0, [r4, #85]	; 0x55
90016174:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
90016178:	d00e      	beq.n	90016198 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x324>
9001617a:	eba3 030e 	sub.w	r3, r3, lr
9001617e:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
90016182:	b29b      	uxth	r3, r3
90016184:	f022 0260 	bic.w	r2, r2, #96	; 0x60
90016188:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
9001618c:	10db      	asrs	r3, r3, #3
9001618e:	f003 0360 	and.w	r3, r3, #96	; 0x60
90016192:	4313      	orrs	r3, r2
90016194:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
90016198:	f894 1059 	ldrb.w	r1, [r4, #89]	; 0x59
9001619c:	00cb      	lsls	r3, r1, #3
9001619e:	0648      	lsls	r0, r1, #25
900161a0:	f403 7280 	and.w	r2, r3, #256	; 0x100
900161a4:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
900161a8:	ea43 0302 	orr.w	r3, r3, r2
900161ac:	bf44      	itt	mi
900161ae:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
900161b2:	b21b      	sxthmi	r3, r3
900161b4:	1b5d      	subs	r5, r3, r5
900161b6:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
900161ba:	e7b4      	b.n	90016126 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b2>

900161bc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>:
900161bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
900161c0:	461e      	mov	r6, r3
900161c2:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
900161c4:	4604      	mov	r4, r0
900161c6:	4617      	mov	r7, r2
900161c8:	eb00 0343 	add.w	r3, r0, r3, lsl #1
900161cc:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
900161d0:	f7ef fadc 	bl	9000578c <_ZN8touchgfx12TextProvider15getNextLigatureEh>
900161d4:	4605      	mov	r5, r0
900161d6:	b918      	cbnz	r0, 900161e0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x24>
900161d8:	6030      	str	r0, [r6, #0]
900161da:	4628      	mov	r0, r5
900161dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
900161e0:	683b      	ldr	r3, [r7, #0]
900161e2:	4601      	mov	r1, r0
900161e4:	4638      	mov	r0, r7
900161e6:	68db      	ldr	r3, [r3, #12]
900161e8:	4798      	blx	r3
900161ea:	f5a8 63c0 	sub.w	r3, r8, #1536	; 0x600
900161ee:	4602      	mov	r2, r0
900161f0:	6030      	str	r0, [r6, #0]
900161f2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
900161f6:	d213      	bcs.n	90016220 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x64>
900161f8:	4643      	mov	r3, r8
900161fa:	4639      	mov	r1, r7
900161fc:	4620      	mov	r0, r4
900161fe:	f7ff fe39 	bl	90015e74 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
90016202:	6030      	str	r0, [r6, #0]
90016204:	6833      	ldr	r3, [r6, #0]
90016206:	b143      	cbz	r3, 9001621a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x5e>
90016208:	7b5a      	ldrb	r2, [r3, #13]
9001620a:	7a9b      	ldrb	r3, [r3, #10]
9001620c:	0052      	lsls	r2, r2, #1
9001620e:	f402 7280 	and.w	r2, r2, #256	; 0x100
90016212:	4313      	orrs	r3, r2
90016214:	bf0c      	ite	eq
90016216:	2301      	moveq	r3, #1
90016218:	2300      	movne	r3, #0
9001621a:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
9001621e:	e7dc      	b.n	900161da <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x1e>
90016220:	f5a5 6360 	sub.w	r3, r5, #3584	; 0xe00
90016224:	b29b      	uxth	r3, r3
90016226:	2b7f      	cmp	r3, #127	; 0x7f
90016228:	d804      	bhi.n	90016234 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x78>
9001622a:	4639      	mov	r1, r7
9001622c:	4620      	mov	r0, r4
9001622e:	f7ff fd15 	bl	90015c5c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
90016232:	e7e6      	b.n	90016202 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>
90016234:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
90016238:	2b00      	cmp	r3, #0
9001623a:	d0e3      	beq.n	90016204 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
9001623c:	f640 1302 	movw	r3, #2306	; 0x902
90016240:	429d      	cmp	r5, r3
90016242:	d1df      	bne.n	90016204 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
90016244:	4601      	mov	r1, r0
90016246:	4620      	mov	r0, r4
90016248:	f7ff fcd8 	bl	90015bfc <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
9001624c:	e7d9      	b.n	90016202 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>

9001624e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>:
9001624e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
90016252:	461e      	mov	r6, r3
90016254:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
90016256:	4604      	mov	r4, r0
90016258:	4617      	mov	r7, r2
9001625a:	eb00 0343 	add.w	r3, r0, r3, lsl #1
9001625e:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
90016262:	f7ef fa93 	bl	9000578c <_ZN8touchgfx12TextProvider15getNextLigatureEh>
90016266:	4605      	mov	r5, r0
90016268:	b918      	cbnz	r0, 90016272 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x24>
9001626a:	6030      	str	r0, [r6, #0]
9001626c:	4628      	mov	r0, r5
9001626e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
90016272:	683b      	ldr	r3, [r7, #0]
90016274:	4601      	mov	r1, r0
90016276:	4638      	mov	r0, r7
90016278:	f8d3 9008 	ldr.w	r9, [r3, #8]
9001627c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
90016280:	47c8      	blx	r9
90016282:	f5a8 63c0 	sub.w	r3, r8, #1536	; 0x600
90016286:	4602      	mov	r2, r0
90016288:	6030      	str	r0, [r6, #0]
9001628a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
9001628e:	d213      	bcs.n	900162b8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x6a>
90016290:	4643      	mov	r3, r8
90016292:	4639      	mov	r1, r7
90016294:	4620      	mov	r0, r4
90016296:	f7ff fded 	bl	90015e74 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
9001629a:	6030      	str	r0, [r6, #0]
9001629c:	6833      	ldr	r3, [r6, #0]
9001629e:	b143      	cbz	r3, 900162b2 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x64>
900162a0:	7b5a      	ldrb	r2, [r3, #13]
900162a2:	7a9b      	ldrb	r3, [r3, #10]
900162a4:	0052      	lsls	r2, r2, #1
900162a6:	f402 7280 	and.w	r2, r2, #256	; 0x100
900162aa:	4313      	orrs	r3, r2
900162ac:	bf0c      	ite	eq
900162ae:	2301      	moveq	r3, #1
900162b0:	2300      	movne	r3, #0
900162b2:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
900162b6:	e7d9      	b.n	9001626c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x1e>
900162b8:	f5a5 6360 	sub.w	r3, r5, #3584	; 0xe00
900162bc:	b29b      	uxth	r3, r3
900162be:	2b7f      	cmp	r3, #127	; 0x7f
900162c0:	d804      	bhi.n	900162cc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x7e>
900162c2:	4639      	mov	r1, r7
900162c4:	4620      	mov	r0, r4
900162c6:	f7ff fcc9 	bl	90015c5c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
900162ca:	e7e6      	b.n	9001629a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4c>
900162cc:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
900162d0:	2b00      	cmp	r3, #0
900162d2:	d0e3      	beq.n	9001629c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4e>
900162d4:	f640 1302 	movw	r3, #2306	; 0x902
900162d8:	429d      	cmp	r5, r3
900162da:	d1df      	bne.n	9001629c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4e>
900162dc:	4601      	mov	r1, r0
900162de:	4620      	mov	r0, r4
900162e0:	f7ff fc8c 	bl	90015bfc <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
900162e4:	e7d9      	b.n	9001629a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4c>

900162e6 <_ZN8touchgfx12TextProvider15fillInputBufferEv>:
900162e6:	b510      	push	{r4, lr}
900162e8:	4604      	mov	r4, r0
900162ea:	f8b4 1040 	ldrh.w	r1, [r4, #64]	; 0x40
900162ee:	8f23      	ldrh	r3, [r4, #56]	; 0x38
900162f0:	b1e1      	cbz	r1, 9001632c <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x46>
900162f2:	2b0a      	cmp	r3, #10
900162f4:	d02d      	beq.n	90016352 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x6c>
900162f6:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
900162f8:	3901      	subs	r1, #1
900162fa:	eb04 0042 	add.w	r0, r4, r2, lsl #1
900162fe:	8f40      	ldrh	r0, [r0, #58]	; 0x3a
90016300:	f8a4 1040 	strh.w	r1, [r4, #64]	; 0x40
90016304:	1c51      	adds	r1, r2, #1
90016306:	b289      	uxth	r1, r1
90016308:	2901      	cmp	r1, #1
9001630a:	bf8a      	itet	hi
9001630c:	f102 32ff 	addhi.w	r2, r2, #4294967295
90016310:	87e1      	strhls	r1, [r4, #62]	; 0x3e
90016312:	87e2      	strhhi	r2, [r4, #62]	; 0x3e
90016314:	1c5a      	adds	r2, r3, #1
90016316:	8722      	strh	r2, [r4, #56]	; 0x38
90016318:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
9001631a:	4413      	add	r3, r2
9001631c:	b29b      	uxth	r3, r3
9001631e:	2b09      	cmp	r3, #9
90016320:	bf88      	it	hi
90016322:	3b0a      	subhi	r3, #10
90016324:	eb04 0343 	add.w	r3, r4, r3, lsl #1
90016328:	8458      	strh	r0, [r3, #34]	; 0x22
9001632a:	e7de      	b.n	900162ea <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4>
9001632c:	8f23      	ldrh	r3, [r4, #56]	; 0x38
9001632e:	2b0a      	cmp	r3, #10
90016330:	d00f      	beq.n	90016352 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x6c>
90016332:	4620      	mov	r0, r4
90016334:	f7ff fc21 	bl	90015b7a <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
90016338:	8f23      	ldrh	r3, [r4, #56]	; 0x38
9001633a:	1c5a      	adds	r2, r3, #1
9001633c:	8722      	strh	r2, [r4, #56]	; 0x38
9001633e:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
90016340:	4413      	add	r3, r2
90016342:	b29b      	uxth	r3, r3
90016344:	2b09      	cmp	r3, #9
90016346:	bf88      	it	hi
90016348:	3b0a      	subhi	r3, #10
9001634a:	eb04 0343 	add.w	r3, r4, r3, lsl #1
9001634e:	8458      	strh	r0, [r3, #34]	; 0x22
90016350:	e7ec      	b.n	9001632c <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x46>
90016352:	bd10      	pop	{r4, pc}

90016354 <_ZN8touchgfx12TextProvider11getNextCharEv>:
90016354:	b538      	push	{r3, r4, r5, lr}
90016356:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
90016358:	4604      	mov	r4, r0
9001635a:	eb00 0243 	add.w	r2, r0, r3, lsl #1
9001635e:	8c55      	ldrh	r5, [r2, #34]	; 0x22
90016360:	8f02      	ldrh	r2, [r0, #56]	; 0x38
90016362:	3a01      	subs	r2, #1
90016364:	8702      	strh	r2, [r0, #56]	; 0x38
90016366:	1c5a      	adds	r2, r3, #1
90016368:	b292      	uxth	r2, r2
9001636a:	2a09      	cmp	r2, #9
9001636c:	bf8a      	itet	hi
9001636e:	3b09      	subhi	r3, #9
90016370:	86c2      	strhls	r2, [r0, #54]	; 0x36
90016372:	86c3      	strhhi	r3, [r0, #54]	; 0x36
90016374:	f7ff ffb7 	bl	900162e6 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
90016378:	8c23      	ldrh	r3, [r4, #32]
9001637a:	2b01      	cmp	r3, #1
9001637c:	bf9c      	itt	ls
9001637e:	3301      	addls	r3, #1
90016380:	8423      	strhls	r3, [r4, #32]
90016382:	8be3      	ldrh	r3, [r4, #30]
90016384:	b90b      	cbnz	r3, 9001638a <_ZN8touchgfx12TextProvider11getNextCharEv+0x36>
90016386:	2302      	movs	r3, #2
90016388:	83e3      	strh	r3, [r4, #30]
9001638a:	8be3      	ldrh	r3, [r4, #30]
9001638c:	4628      	mov	r0, r5
9001638e:	3b01      	subs	r3, #1
90016390:	b29b      	uxth	r3, r3
90016392:	83e3      	strh	r3, [r4, #30]
90016394:	eb04 0443 	add.w	r4, r4, r3, lsl #1
90016398:	8365      	strh	r5, [r4, #26]
9001639a:	bd38      	pop	{r3, r4, r5, pc}

9001639c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>:
9001639c:	428a      	cmp	r2, r1
9001639e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
900163a2:	8ec7      	ldrh	r7, [r0, #54]	; 0x36
900163a4:	d932      	bls.n	9001640c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x70>
900163a6:	8f05      	ldrh	r5, [r0, #56]	; 0x38
900163a8:	1a54      	subs	r4, r2, r1
900163aa:	f8b0 8040 	ldrh.w	r8, [r0, #64]	; 0x40
900163ae:	19ee      	adds	r6, r5, r7
900163b0:	fa1f fe84 	uxth.w	lr, r4
900163b4:	f8b0 c03e 	ldrh.w	ip, [r0, #62]	; 0x3e
900163b8:	3e01      	subs	r6, #1
900163ba:	b2b4      	uxth	r4, r6
900163bc:	eba4 090e 	sub.w	r9, r4, lr
900163c0:	fa1f f989 	uxth.w	r9, r9
900163c4:	2c09      	cmp	r4, #9
900163c6:	4626      	mov	r6, r4
900163c8:	bf88      	it	hi
900163ca:	f1a4 060a 	subhi.w	r6, r4, #10
900163ce:	f1bc 0f00 	cmp.w	ip, #0
900163d2:	f104 34ff 	add.w	r4, r4, #4294967295
900163d6:	bf08      	it	eq
900163d8:	f04f 0c02 	moveq.w	ip, #2
900163dc:	eb00 0646 	add.w	r6, r0, r6, lsl #1
900163e0:	b2a4      	uxth	r4, r4
900163e2:	f10c 3cff 	add.w	ip, ip, #4294967295
900163e6:	f8b6 a022 	ldrh.w	sl, [r6, #34]	; 0x22
900163ea:	454c      	cmp	r4, r9
900163ec:	fa1f fc8c 	uxth.w	ip, ip
900163f0:	eb00 064c 	add.w	r6, r0, ip, lsl #1
900163f4:	f8a6 a03a 	strh.w	sl, [r6, #58]	; 0x3a
900163f8:	d1e4      	bne.n	900163c4 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x28>
900163fa:	eba5 050e 	sub.w	r5, r5, lr
900163fe:	eb0e 0408 	add.w	r4, lr, r8
90016402:	f8a0 c03e 	strh.w	ip, [r0, #62]	; 0x3e
90016406:	8705      	strh	r5, [r0, #56]	; 0x38
90016408:	f8a0 4040 	strh.w	r4, [r0, #64]	; 0x40
9001640c:	8f04      	ldrh	r4, [r0, #56]	; 0x38
9001640e:	250a      	movs	r5, #10
90016410:	1a64      	subs	r4, r4, r1
90016412:	4439      	add	r1, r7
90016414:	b289      	uxth	r1, r1
90016416:	8704      	strh	r4, [r0, #56]	; 0x38
90016418:	2909      	cmp	r1, #9
9001641a:	bf88      	it	hi
9001641c:	390a      	subhi	r1, #10
9001641e:	86c1      	strh	r1, [r0, #54]	; 0x36
90016420:	b18a      	cbz	r2, 90016446 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xaa>
90016422:	8f01      	ldrh	r1, [r0, #56]	; 0x38
90016424:	3a01      	subs	r2, #1
90016426:	3101      	adds	r1, #1
90016428:	b292      	uxth	r2, r2
9001642a:	f833 4012 	ldrh.w	r4, [r3, r2, lsl #1]
9001642e:	8701      	strh	r1, [r0, #56]	; 0x38
90016430:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
90016432:	b901      	cbnz	r1, 90016436 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x9a>
90016434:	86c5      	strh	r5, [r0, #54]	; 0x36
90016436:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
90016438:	3901      	subs	r1, #1
9001643a:	b289      	uxth	r1, r1
9001643c:	86c1      	strh	r1, [r0, #54]	; 0x36
9001643e:	eb00 0141 	add.w	r1, r0, r1, lsl #1
90016442:	844c      	strh	r4, [r1, #34]	; 0x22
90016444:	e7ec      	b.n	90016420 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x84>
90016446:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
9001644a:	f7ff bf4c 	b.w	900162e6 <_ZN8touchgfx12TextProvider15fillInputBufferEv>

9001644e <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>:
9001644e:	b570      	push	{r4, r5, r6, lr}
90016450:	2500      	movs	r5, #0
90016452:	4295      	cmp	r5, r2
90016454:	d011      	beq.n	9001647a <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x2c>
90016456:	8bc4      	ldrh	r4, [r0, #30]
90016458:	f831 6b02 	ldrh.w	r6, [r1], #2
9001645c:	4414      	add	r4, r2
9001645e:	3c01      	subs	r4, #1
90016460:	1b64      	subs	r4, r4, r5
90016462:	b2a4      	uxth	r4, r4
90016464:	2c01      	cmp	r4, #1
90016466:	bf88      	it	hi
90016468:	3c02      	subhi	r4, #2
9001646a:	eb00 0444 	add.w	r4, r0, r4, lsl #1
9001646e:	8b64      	ldrh	r4, [r4, #26]
90016470:	42b4      	cmp	r4, r6
90016472:	d117      	bne.n	900164a4 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x56>
90016474:	3501      	adds	r5, #1
90016476:	b2ad      	uxth	r5, r5
90016478:	e7eb      	b.n	90016452 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x4>
9001647a:	f8bd 2010 	ldrh.w	r2, [sp, #16]
9001647e:	2400      	movs	r4, #0
90016480:	4413      	add	r3, r2
90016482:	b2a2      	uxth	r2, r4
90016484:	429a      	cmp	r2, r3
90016486:	da0f      	bge.n	900164a8 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x5a>
90016488:	8ec6      	ldrh	r6, [r0, #54]	; 0x36
9001648a:	f831 5014 	ldrh.w	r5, [r1, r4, lsl #1]
9001648e:	3401      	adds	r4, #1
90016490:	4432      	add	r2, r6
90016492:	b292      	uxth	r2, r2
90016494:	2a09      	cmp	r2, #9
90016496:	bf88      	it	hi
90016498:	3a0a      	subhi	r2, #10
9001649a:	eb00 0242 	add.w	r2, r0, r2, lsl #1
9001649e:	8c52      	ldrh	r2, [r2, #34]	; 0x22
900164a0:	42aa      	cmp	r2, r5
900164a2:	d0ee      	beq.n	90016482 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x34>
900164a4:	2000      	movs	r0, #0
900164a6:	bd70      	pop	{r4, r5, r6, pc}
900164a8:	2001      	movs	r0, #1
900164aa:	e7fc      	b.n	900164a6 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x58>

900164ac <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>:
900164ac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
900164b0:	4605      	mov	r5, r0
900164b2:	4616      	mov	r6, r2
900164b4:	1c8c      	adds	r4, r1, #2
900164b6:	8809      	ldrh	r1, [r1, #0]
900164b8:	ea4f 3a11 	mov.w	sl, r1, lsr #12
900164bc:	f834 301a 	ldrh.w	r3, [r4, sl, lsl #1]
900164c0:	42b3      	cmp	r3, r6
900164c2:	d124      	bne.n	9001650e <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x62>
900164c4:	f3c1 2903 	ubfx	r9, r1, #8, #4
900164c8:	f3c1 1803 	ubfx	r8, r1, #4, #4
900164cc:	f001 070f 	and.w	r7, r1, #15
900164d0:	4652      	mov	r2, sl
900164d2:	f8cd 8000 	str.w	r8, [sp]
900164d6:	464b      	mov	r3, r9
900164d8:	4621      	mov	r1, r4
900164da:	4628      	mov	r0, r5
900164dc:	f7ff ffb7 	bl	9001644e <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>
900164e0:	4683      	mov	fp, r0
900164e2:	b168      	cbz	r0, 90016500 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x54>
900164e4:	eb0a 0109 	add.w	r1, sl, r9
900164e8:	463a      	mov	r2, r7
900164ea:	4628      	mov	r0, r5
900164ec:	4441      	add	r1, r8
900164ee:	eb04 0341 	add.w	r3, r4, r1, lsl #1
900164f2:	4649      	mov	r1, r9
900164f4:	f7ff ff52 	bl	9001639c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>
900164f8:	4658      	mov	r0, fp
900164fa:	b003      	add	sp, #12
900164fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90016500:	eb07 010a 	add.w	r1, r7, sl
90016504:	4449      	add	r1, r9
90016506:	4441      	add	r1, r8
90016508:	eb04 0141 	add.w	r1, r4, r1, lsl #1
9001650c:	e7d2      	b.n	900164b4 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x8>
9001650e:	f04f 0b00 	mov.w	fp, #0
90016512:	e7f1      	b.n	900164f8 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x4c>

90016514 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>:
90016514:	b570      	push	{r4, r5, r6, lr}
90016516:	8810      	ldrh	r0, [r2, #0]
90016518:	4298      	cmp	r0, r3
9001651a:	d817      	bhi.n	9001654c <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
9001651c:	1e48      	subs	r0, r1, #1
9001651e:	f832 0020 	ldrh.w	r0, [r2, r0, lsl #2]
90016522:	4298      	cmp	r0, r3
90016524:	d312      	bcc.n	9001654c <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
90016526:	2400      	movs	r4, #0
90016528:	428c      	cmp	r4, r1
9001652a:	d20f      	bcs.n	9001654c <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
9001652c:	1860      	adds	r0, r4, r1
9001652e:	1040      	asrs	r0, r0, #1
90016530:	f832 6020 	ldrh.w	r6, [r2, r0, lsl #2]
90016534:	0085      	lsls	r5, r0, #2
90016536:	42b3      	cmp	r3, r6
90016538:	d902      	bls.n	90016540 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x2c>
9001653a:	3001      	adds	r0, #1
9001653c:	b284      	uxth	r4, r0
9001653e:	e7f3      	b.n	90016528 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
90016540:	d201      	bcs.n	90016546 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x32>
90016542:	b281      	uxth	r1, r0
90016544:	e7f0      	b.n	90016528 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
90016546:	442a      	add	r2, r5
90016548:	8850      	ldrh	r0, [r2, #2]
9001654a:	bd70      	pop	{r4, r5, r6, pc}
9001654c:	2000      	movs	r0, #0
9001654e:	e7fc      	b.n	9001654a <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x36>

90016550 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>:
90016550:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
90016554:	6c45      	ldr	r5, [r0, #68]	; 0x44
90016556:	4604      	mov	r4, r0
90016558:	260b      	movs	r6, #11
9001655a:	886f      	ldrh	r7, [r5, #2]
9001655c:	087f      	lsrs	r7, r7, #1
9001655e:	3e01      	subs	r6, #1
90016560:	d013      	beq.n	9001658a <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
90016562:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
90016564:	462a      	mov	r2, r5
90016566:	4639      	mov	r1, r7
90016568:	4620      	mov	r0, r4
9001656a:	eb04 0343 	add.w	r3, r4, r3, lsl #1
9001656e:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
90016572:	4643      	mov	r3, r8
90016574:	f7ff ffce 	bl	90016514 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>
90016578:	b138      	cbz	r0, 9001658a <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
9001657a:	eb05 0140 	add.w	r1, r5, r0, lsl #1
9001657e:	4642      	mov	r2, r8
90016580:	4620      	mov	r0, r4
90016582:	f7ff ff93 	bl	900164ac <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>
90016586:	2800      	cmp	r0, #0
90016588:	d1e9      	bne.n	9001655e <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0xe>
9001658a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

90016590 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>:
90016590:	b570      	push	{r4, r5, r6, lr}
90016592:	694a      	ldr	r2, [r1, #20]
90016594:	6a8d      	ldr	r5, [r1, #40]	; 0x28
90016596:	684b      	ldr	r3, [r1, #4]
90016598:	1b54      	subs	r4, r2, r5
9001659a:	6ace      	ldr	r6, [r1, #44]	; 0x2c
9001659c:	f000 8106 	beq.w	900167ac <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x21c>
900165a0:	1b9b      	subs	r3, r3, r6
900165a2:	d003      	beq.n	900165ac <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
900165a4:	4363      	muls	r3, r4
900165a6:	2210      	movs	r2, #16
900165a8:	fb93 f3f2 	sdiv	r3, r3, r2
900165ac:	680c      	ldr	r4, [r1, #0]
900165ae:	698a      	ldr	r2, [r1, #24]
900165b0:	1b65      	subs	r5, r4, r5
900165b2:	f000 80fd 	beq.w	900167b0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x220>
900165b6:	1b92      	subs	r2, r2, r6
900165b8:	d003      	beq.n	900165c2 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
900165ba:	436a      	muls	r2, r5
900165bc:	2410      	movs	r4, #16
900165be:	fb92 f2f4 	sdiv	r2, r2, r4
900165c2:	1a9b      	subs	r3, r3, r2
900165c4:	ed9f 4a89 	vldr	s8, [pc, #548]	; 900167ec <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x25c>
900165c8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
900165cc:	460a      	mov	r2, r1
900165ce:	ee07 3a90 	vmov	s15, r3
900165d2:	f100 040c 	add.w	r4, r0, #12
900165d6:	4603      	mov	r3, r0
900165d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
900165dc:	ee67 7a84 	vmul.f32	s15, s15, s8
900165e0:	ee87 3a27 	vdiv.f32	s6, s14, s15
900165e4:	eeb1 6a43 	vneg.f32	s12, s6
900165e8:	edd2 7a02 	vldr	s15, [r2, #8]
900165ec:	3214      	adds	r2, #20
900165ee:	eec7 6a27 	vdiv.f32	s13, s14, s15
900165f2:	ece3 6a01 	vstmia	r3!, {s13}
900165f6:	429c      	cmp	r4, r3
900165f8:	ed52 7a02 	vldr	s15, [r2, #-8]
900165fc:	ee67 7aa6 	vmul.f32	s15, s15, s13
90016600:	edc3 7a02 	vstr	s15, [r3, #8]
90016604:	ed52 7a01 	vldr	s15, [r2, #-4]
90016608:	ee67 7aa6 	vmul.f32	s15, s15, s13
9001660c:	edc3 7a05 	vstr	s15, [r3, #20]
90016610:	d1ea      	bne.n	900165e8 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x58>
90016612:	6aca      	ldr	r2, [r1, #44]	; 0x2c
90016614:	698b      	ldr	r3, [r1, #24]
90016616:	edd0 4a02 	vldr	s9, [r0, #8]
9001661a:	1a9b      	subs	r3, r3, r2
9001661c:	edd0 3a00 	vldr	s7, [r0]
90016620:	edd0 6a01 	vldr	s13, [r0, #4]
90016624:	ee07 3a90 	vmov	s15, r3
90016628:	684b      	ldr	r3, [r1, #4]
9001662a:	ee76 6ae4 	vsub.f32	s13, s13, s9
9001662e:	ed90 5a05 	vldr	s10, [r0, #20]
90016632:	1a9b      	subs	r3, r3, r2
90016634:	eef8 7ae7 	vcvt.f32.s32	s15, s15
90016638:	ee73 4ae4 	vsub.f32	s9, s7, s9
9001663c:	ed90 2a03 	vldr	s4, [r0, #12]
90016640:	ee07 3a10 	vmov	s14, r3
90016644:	edd0 5a04 	vldr	s11, [r0, #16]
90016648:	ee67 7a84 	vmul.f32	s15, s15, s8
9001664c:	ed90 1a07 	vldr	s2, [r0, #28]
90016650:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
90016654:	edd0 2a06 	vldr	s5, [r0, #24]
90016658:	ee75 5ac5 	vsub.f32	s11, s11, s10
9001665c:	ee64 7ae7 	vnmul.f32	s15, s9, s15
90016660:	ee27 7a04 	vmul.f32	s14, s14, s8
90016664:	ee32 5a45 	vsub.f32	s10, s4, s10
90016668:	eee6 7a87 	vfma.f32	s15, s13, s14
9001666c:	ee67 7a83 	vmul.f32	s15, s15, s6
90016670:	edc0 7a09 	vstr	s15, [r0, #36]	; 0x24
90016674:	6a8c      	ldr	r4, [r1, #40]	; 0x28
90016676:	694a      	ldr	r2, [r1, #20]
90016678:	1b13      	subs	r3, r2, r4
9001667a:	ee07 3a10 	vmov	s14, r3
9001667e:	680b      	ldr	r3, [r1, #0]
90016680:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
90016684:	1b1b      	subs	r3, r3, r4
90016686:	ee27 7a04 	vmul.f32	s14, s14, s8
9001668a:	ee64 4ac7 	vnmul.f32	s9, s9, s14
9001668e:	ee07 3a10 	vmov	s14, r3
90016692:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
90016696:	ee27 7a04 	vmul.f32	s14, s14, s8
9001669a:	eee6 4a87 	vfma.f32	s9, s13, s14
9001669e:	ee64 4a86 	vmul.f32	s9, s9, s12
900166a2:	edc0 4a0a 	vstr	s9, [r0, #40]	; 0x28
900166a6:	6aca      	ldr	r2, [r1, #44]	; 0x2c
900166a8:	698b      	ldr	r3, [r1, #24]
900166aa:	1a9b      	subs	r3, r3, r2
900166ac:	ee06 3a90 	vmov	s13, r3
900166b0:	684b      	ldr	r3, [r1, #4]
900166b2:	1a9b      	subs	r3, r3, r2
900166b4:	eef8 6ae6 	vcvt.f32.s32	s13, s13
900166b8:	ee07 3a10 	vmov	s14, r3
900166bc:	ee66 6a84 	vmul.f32	s13, s13, s8
900166c0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
900166c4:	ee65 6a66 	vnmul.f32	s13, s10, s13
900166c8:	ee27 7a04 	vmul.f32	s14, s14, s8
900166cc:	eee5 6a87 	vfma.f32	s13, s11, s14
900166d0:	ee66 6a83 	vmul.f32	s13, s13, s6
900166d4:	edc0 6a0b 	vstr	s13, [r0, #44]	; 0x2c
900166d8:	6a8c      	ldr	r4, [r1, #40]	; 0x28
900166da:	694a      	ldr	r2, [r1, #20]
900166dc:	1b13      	subs	r3, r2, r4
900166de:	ee07 3a10 	vmov	s14, r3
900166e2:	680b      	ldr	r3, [r1, #0]
900166e4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
900166e8:	1b1b      	subs	r3, r3, r4
900166ea:	ee27 7a04 	vmul.f32	s14, s14, s8
900166ee:	ee25 5a47 	vnmul.f32	s10, s10, s14
900166f2:	ee07 3a10 	vmov	s14, r3
900166f6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
900166fa:	ee27 7a04 	vmul.f32	s14, s14, s8
900166fe:	eea5 5a87 	vfma.f32	s10, s11, s14
90016702:	edd0 5a08 	vldr	s11, [r0, #32]
90016706:	ee31 1a65 	vsub.f32	s2, s2, s11
9001670a:	ee72 5ae5 	vsub.f32	s11, s5, s11
9001670e:	ee25 5a06 	vmul.f32	s10, s10, s12
90016712:	ed80 5a0c 	vstr	s10, [r0, #48]	; 0x30
90016716:	6aca      	ldr	r2, [r1, #44]	; 0x2c
90016718:	698b      	ldr	r3, [r1, #24]
9001671a:	1a9b      	subs	r3, r3, r2
9001671c:	ee07 3a10 	vmov	s14, r3
90016720:	684b      	ldr	r3, [r1, #4]
90016722:	1a9b      	subs	r3, r3, r2
90016724:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
90016728:	ee01 3a90 	vmov	s3, r3
9001672c:	ee27 7a04 	vmul.f32	s14, s14, s8
90016730:	eef8 1ae1 	vcvt.f32.s32	s3, s3
90016734:	ee25 7ac7 	vnmul.f32	s14, s11, s14
90016738:	ee61 1a84 	vmul.f32	s3, s3, s8
9001673c:	eea1 7a21 	vfma.f32	s14, s2, s3
90016740:	ee27 7a03 	vmul.f32	s14, s14, s6
90016744:	ed80 7a0d 	vstr	s14, [r0, #52]	; 0x34
90016748:	6a8c      	ldr	r4, [r1, #40]	; 0x28
9001674a:	694a      	ldr	r2, [r1, #20]
9001674c:	1b13      	subs	r3, r2, r4
9001674e:	ee03 3a10 	vmov	s6, r3
90016752:	680b      	ldr	r3, [r1, #0]
90016754:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
90016758:	1b1b      	subs	r3, r3, r4
9001675a:	ee23 3a04 	vmul.f32	s6, s6, s8
9001675e:	ee65 5ac3 	vnmul.f32	s11, s11, s6
90016762:	ee03 3a10 	vmov	s6, r3
90016766:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
9001676a:	ee23 4a04 	vmul.f32	s8, s6, s8
9001676e:	eee1 5a04 	vfma.f32	s11, s2, s8
90016772:	ee25 6a86 	vmul.f32	s12, s11, s12
90016776:	ee62 5a67 	vnmul.f32	s11, s4, s15
9001677a:	ed80 6a0e 	vstr	s12, [r0, #56]	; 0x38
9001677e:	eee3 5aa6 	vfma.f32	s11, s7, s13
90016782:	eef5 5ac0 	vcmpe.f32	s11, #0.0
90016786:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
9001678a:	dd13      	ble.n	900167b4 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x224>
9001678c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
90016790:	ee62 7ae7 	vnmul.f32	s15, s5, s15
90016794:	63c3      	str	r3, [r0, #60]	; 0x3c
90016796:	eee3 7a87 	vfma.f32	s15, s7, s14
9001679a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
9001679e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
900167a2:	dd15      	ble.n	900167d0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x240>
900167a4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
900167a8:	6403      	str	r3, [r0, #64]	; 0x40
900167aa:	bd70      	pop	{r4, r5, r6, pc}
900167ac:	4623      	mov	r3, r4
900167ae:	e6fd      	b.n	900165ac <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
900167b0:	462a      	mov	r2, r5
900167b2:	e706      	b.n	900165c2 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
900167b4:	d502      	bpl.n	900167bc <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x22c>
900167b6:	f647 73ff 	movw	r3, #32767	; 0x7fff
900167ba:	e7e9      	b.n	90016790 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x200>
900167bc:	ee22 2a64 	vnmul.f32	s4, s4, s9
900167c0:	eea3 2a85 	vfma.f32	s4, s7, s10
900167c4:	eeb5 2ac0 	vcmpe.f32	s4, #0.0
900167c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
900167cc:	dade      	bge.n	9001678c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1fc>
900167ce:	e7f2      	b.n	900167b6 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x226>
900167d0:	d502      	bpl.n	900167d8 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x248>
900167d2:	f647 73ff 	movw	r3, #32767	; 0x7fff
900167d6:	e7e7      	b.n	900167a8 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x218>
900167d8:	ee62 4ae4 	vnmul.f32	s9, s5, s9
900167dc:	eee3 4a86 	vfma.f32	s9, s7, s12
900167e0:	eef5 4ac0 	vcmpe.f32	s9, #0.0
900167e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
900167e8:	dadc      	bge.n	900167a4 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x214>
900167ea:	e7f2      	b.n	900167d2 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x242>
900167ec:	3d800000 	.word	0x3d800000

900167f0 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>:
900167f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
900167f4:	2714      	movs	r7, #20
900167f6:	435f      	muls	r7, r3
900167f8:	eb02 0c07 	add.w	ip, r2, r7
900167fc:	f8dc 5004 	ldr.w	r5, [ip, #4]
90016800:	f115 0e0f 	adds.w	lr, r5, #15
90016804:	f100 80a2 	bmi.w	9001694c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x15c>
90016808:	ea4f 1e2e 	mov.w	lr, lr, asr #4
9001680c:	9c08      	ldr	r4, [sp, #32]
9001680e:	2614      	movs	r6, #20
90016810:	f8c0 e014 	str.w	lr, [r0, #20]
90016814:	4366      	muls	r6, r4
90016816:	eb02 0806 	add.w	r8, r2, r6
9001681a:	f8d8 5004 	ldr.w	r5, [r8, #4]
9001681e:	f115 040f 	adds.w	r4, r5, #15
90016822:	f100 809f 	bmi.w	90016964 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x174>
90016826:	1124      	asrs	r4, r4, #4
90016828:	eba4 040e 	sub.w	r4, r4, lr
9001682c:	6184      	str	r4, [r0, #24]
9001682e:	2c00      	cmp	r4, #0
90016830:	f000 808a 	beq.w	90016948 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x158>
90016834:	f8dc 9004 	ldr.w	r9, [ip, #4]
90016838:	f8d8 4004 	ldr.w	r4, [r8, #4]
9001683c:	5995      	ldr	r5, [r2, r6]
9001683e:	eba4 0809 	sub.w	r8, r4, r9
90016842:	59d4      	ldr	r4, [r2, r7]
90016844:	eba5 0a04 	sub.w	sl, r5, r4
90016848:	ea4f 1608 	mov.w	r6, r8, lsl #4
9001684c:	ea4f 150a 	mov.w	r5, sl, lsl #4
90016850:	fb0e fe05 	mul.w	lr, lr, r5
90016854:	fb0a ee19 	mls	lr, sl, r9, lr
90016858:	fb08 e404 	mla	r4, r8, r4, lr
9001685c:	3c01      	subs	r4, #1
9001685e:	19a4      	adds	r4, r4, r6
90016860:	f100 808c 	bmi.w	9001697c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x18c>
90016864:	fb94 fef6 	sdiv	lr, r4, r6
90016868:	fb06 441e 	mls	r4, r6, lr, r4
9001686c:	f8c0 e000 	str.w	lr, [r0]
90016870:	6104      	str	r4, [r0, #16]
90016872:	2d00      	cmp	r5, #0
90016874:	f2c0 8095 	blt.w	900169a2 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1b2>
90016878:	fb95 f4f6 	sdiv	r4, r5, r6
9001687c:	fb06 5514 	mls	r5, r6, r4, r5
90016880:	6044      	str	r4, [r0, #4]
90016882:	6085      	str	r5, [r0, #8]
90016884:	60c6      	str	r6, [r0, #12]
90016886:	eb01 0383 	add.w	r3, r1, r3, lsl #2
9001688a:	f8dc 4004 	ldr.w	r4, [ip, #4]
9001688e:	6945      	ldr	r5, [r0, #20]
90016890:	59d2      	ldr	r2, [r2, r7]
90016892:	ebc4 1405 	rsb	r4, r4, r5, lsl #4
90016896:	eddf 6a4b 	vldr	s13, [pc, #300]	; 900169c4 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1d4>
9001689a:	ed91 6a0a 	vldr	s12, [r1, #40]	; 0x28
9001689e:	ee07 4a10 	vmov	s14, r4
900168a2:	6804      	ldr	r4, [r0, #0]
900168a4:	ebc2 1204 	rsb	r2, r2, r4, lsl #4
900168a8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
900168ac:	ee07 2a90 	vmov	s15, r2
900168b0:	ee27 7a26 	vmul.f32	s14, s14, s13
900168b4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
900168b8:	ee67 7aa6 	vmul.f32	s15, s15, s13
900168bc:	edd3 6a00 	vldr	s13, [r3]
900168c0:	eee6 6a07 	vfma.f32	s13, s12, s14
900168c4:	ed91 6a09 	vldr	s12, [r1, #36]	; 0x24
900168c8:	eee6 6a27 	vfma.f32	s13, s12, s15
900168cc:	edc0 6a07 	vstr	s13, [r0, #28]
900168d0:	edd0 6a01 	vldr	s13, [r0, #4]
900168d4:	edd1 5a09 	vldr	s11, [r1, #36]	; 0x24
900168d8:	eef8 6ae6 	vcvt.f32.s32	s13, s13
900168dc:	ed91 6a0a 	vldr	s12, [r1, #40]	; 0x28
900168e0:	eea6 6aa5 	vfma.f32	s12, s13, s11
900168e4:	ed80 6a08 	vstr	s12, [r0, #32]
900168e8:	6a4a      	ldr	r2, [r1, #36]	; 0x24
900168ea:	6242      	str	r2, [r0, #36]	; 0x24
900168ec:	edd1 5a0c 	vldr	s11, [r1, #48]	; 0x30
900168f0:	ed93 6a03 	vldr	s12, [r3, #12]
900168f4:	eea5 6a87 	vfma.f32	s12, s11, s14
900168f8:	edd1 5a0b 	vldr	s11, [r1, #44]	; 0x2c
900168fc:	eea5 6aa7 	vfma.f32	s12, s11, s15
90016900:	ed80 6a0a 	vstr	s12, [r0, #40]	; 0x28
90016904:	edd1 5a0b 	vldr	s11, [r1, #44]	; 0x2c
90016908:	ed91 6a0c 	vldr	s12, [r1, #48]	; 0x30
9001690c:	eea6 6aa5 	vfma.f32	s12, s13, s11
90016910:	ed80 6a0b 	vstr	s12, [r0, #44]	; 0x2c
90016914:	6aca      	ldr	r2, [r1, #44]	; 0x2c
90016916:	6302      	str	r2, [r0, #48]	; 0x30
90016918:	ed93 6a06 	vldr	s12, [r3, #24]
9001691c:	edd1 5a0e 	vldr	s11, [r1, #56]	; 0x38
90016920:	eea5 6a87 	vfma.f32	s12, s11, s14
90016924:	eeb0 7a46 	vmov.f32	s14, s12
90016928:	ed91 6a0d 	vldr	s12, [r1, #52]	; 0x34
9001692c:	eea6 7a27 	vfma.f32	s14, s12, s15
90016930:	ed80 7a0d 	vstr	s14, [r0, #52]	; 0x34
90016934:	ed91 7a0d 	vldr	s14, [r1, #52]	; 0x34
90016938:	edd1 7a0e 	vldr	s15, [r1, #56]	; 0x38
9001693c:	eee6 7a87 	vfma.f32	s15, s13, s14
90016940:	edc0 7a0e 	vstr	s15, [r0, #56]	; 0x38
90016944:	6b4b      	ldr	r3, [r1, #52]	; 0x34
90016946:	63c3      	str	r3, [r0, #60]	; 0x3c
90016948:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
9001694c:	2410      	movs	r4, #16
9001694e:	f1c5 0501 	rsb	r5, r5, #1
90016952:	fb9e fef4 	sdiv	lr, lr, r4
90016956:	f015 050f 	ands.w	r5, r5, #15
9001695a:	bf18      	it	ne
9001695c:	2501      	movne	r5, #1
9001695e:	ebae 0e05 	sub.w	lr, lr, r5
90016962:	e753      	b.n	9001680c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1c>
90016964:	f04f 0910 	mov.w	r9, #16
90016968:	f1c5 0501 	rsb	r5, r5, #1
9001696c:	fb94 f4f9 	sdiv	r4, r4, r9
90016970:	f015 050f 	ands.w	r5, r5, #15
90016974:	bf18      	it	ne
90016976:	2501      	movne	r5, #1
90016978:	1b64      	subs	r4, r4, r5
9001697a:	e755      	b.n	90016828 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x38>
9001697c:	4264      	negs	r4, r4
9001697e:	fb94 fef6 	sdiv	lr, r4, r6
90016982:	f1ce 0800 	rsb	r8, lr, #0
90016986:	fb06 441e 	mls	r4, r6, lr, r4
9001698a:	f8c0 8000 	str.w	r8, [r0]
9001698e:	6104      	str	r4, [r0, #16]
90016990:	2c00      	cmp	r4, #0
90016992:	f43f af6e 	beq.w	90016872 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x82>
90016996:	ea6f 0e0e 	mvn.w	lr, lr
9001699a:	1b34      	subs	r4, r6, r4
9001699c:	f8c0 e000 	str.w	lr, [r0]
900169a0:	e766      	b.n	90016870 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x80>
900169a2:	426d      	negs	r5, r5
900169a4:	fb95 f4f6 	sdiv	r4, r5, r6
900169a8:	f1c4 0e00 	rsb	lr, r4, #0
900169ac:	fb06 5514 	mls	r5, r6, r4, r5
900169b0:	f8c0 e004 	str.w	lr, [r0, #4]
900169b4:	6085      	str	r5, [r0, #8]
900169b6:	2d00      	cmp	r5, #0
900169b8:	f43f af64 	beq.w	90016884 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x94>
900169bc:	43e4      	mvns	r4, r4
900169be:	1b75      	subs	r5, r6, r5
900169c0:	6044      	str	r4, [r0, #4]
900169c2:	e75e      	b.n	90016882 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x92>
900169c4:	3d800000 	.word	0x3d800000

900169c8 <_ZN8touchgfx7Unicode6strlenEPKt>:
900169c8:	4602      	mov	r2, r0
900169ca:	b148      	cbz	r0, 900169e0 <_ZN8touchgfx7Unicode6strlenEPKt+0x18>
900169cc:	2300      	movs	r3, #0
900169ce:	b298      	uxth	r0, r3
900169d0:	3301      	adds	r3, #1
900169d2:	eb02 0143 	add.w	r1, r2, r3, lsl #1
900169d6:	f831 1c02 	ldrh.w	r1, [r1, #-2]
900169da:	2900      	cmp	r1, #0
900169dc:	d1f7      	bne.n	900169ce <_ZN8touchgfx7Unicode6strlenEPKt+0x6>
900169de:	4770      	bx	lr
900169e0:	4770      	bx	lr

900169e2 <_ZN8touchgfx7Unicode7strncpyEPtPKct>:
900169e2:	b530      	push	{r4, r5, lr}
900169e4:	4604      	mov	r4, r0
900169e6:	b159      	cbz	r1, 90016a00 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1e>
900169e8:	b148      	cbz	r0, 900169fe <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
900169ea:	2300      	movs	r3, #0
900169ec:	b298      	uxth	r0, r3
900169ee:	4282      	cmp	r2, r0
900169f0:	d905      	bls.n	900169fe <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
900169f2:	5ccd      	ldrb	r5, [r1, r3]
900169f4:	f824 5013 	strh.w	r5, [r4, r3, lsl #1]
900169f8:	3301      	adds	r3, #1
900169fa:	2d00      	cmp	r5, #0
900169fc:	d1f6      	bne.n	900169ec <_ZN8touchgfx7Unicode7strncpyEPtPKct+0xa>
900169fe:	bd30      	pop	{r4, r5, pc}
90016a00:	4608      	mov	r0, r1
90016a02:	e7fc      	b.n	900169fe <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>

90016a04 <_ZN8touchgfx7Unicode4utoaEmPtti.part.2>:
90016a04:	b5f0      	push	{r4, r5, r6, r7, lr}
90016a06:	468c      	mov	ip, r1
90016a08:	b08b      	sub	sp, #44	; 0x2c
90016a0a:	2100      	movs	r1, #0
90016a0c:	ae01      	add	r6, sp, #4
90016a0e:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
90016a12:	211f      	movs	r1, #31
90016a14:	fbb0 f7f3 	udiv	r7, r0, r3
90016a18:	fb03 0517 	mls	r5, r3, r7, r0
90016a1c:	4638      	mov	r0, r7
90016a1e:	b2ec      	uxtb	r4, r5
90016a20:	2d09      	cmp	r5, #9
90016a22:	bfd4      	ite	le
90016a24:	3430      	addle	r4, #48	; 0x30
90016a26:	3457      	addgt	r4, #87	; 0x57
90016a28:	b2e4      	uxtb	r4, r4
90016a2a:	558c      	strb	r4, [r1, r6]
90016a2c:	1e4c      	subs	r4, r1, #1
90016a2e:	b92f      	cbnz	r7, 90016a3c <_ZN8touchgfx7Unicode4utoaEmPtti.part.2+0x38>
90016a30:	4431      	add	r1, r6
90016a32:	4660      	mov	r0, ip
90016a34:	f7ff ffd5 	bl	900169e2 <_ZN8touchgfx7Unicode7strncpyEPtPKct>
90016a38:	b00b      	add	sp, #44	; 0x2c
90016a3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
90016a3c:	4621      	mov	r1, r4
90016a3e:	e7e9      	b.n	90016a14 <_ZN8touchgfx7Unicode4utoaEmPtti.part.2+0x10>

90016a40 <_ZN8touchgfx7Unicode4itoaElPtti>:
90016a40:	b5f0      	push	{r4, r5, r6, r7, lr}
90016a42:	4607      	mov	r7, r0
90016a44:	b08b      	sub	sp, #44	; 0x2c
90016a46:	4608      	mov	r0, r1
90016a48:	b341      	cbz	r1, 90016a9c <_ZN8touchgfx7Unicode4itoaElPtti+0x5c>
90016a4a:	1e99      	subs	r1, r3, #2
90016a4c:	2922      	cmp	r1, #34	; 0x22
90016a4e:	d825      	bhi.n	90016a9c <_ZN8touchgfx7Unicode4itoaElPtti+0x5c>
90016a50:	2100      	movs	r1, #0
90016a52:	463c      	mov	r4, r7
90016a54:	261f      	movs	r6, #31
90016a56:	f10d 0c04 	add.w	ip, sp, #4
90016a5a:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
90016a5e:	1e71      	subs	r1, r6, #1
90016a60:	fb94 fef3 	sdiv	lr, r4, r3
90016a64:	fb03 441e 	mls	r4, r3, lr, r4
90016a68:	ea84 75e4 	eor.w	r5, r4, r4, asr #31
90016a6c:	eba5 75e4 	sub.w	r5, r5, r4, asr #31
90016a70:	b2ec      	uxtb	r4, r5
90016a72:	2d09      	cmp	r5, #9
90016a74:	bfd4      	ite	le
90016a76:	3430      	addle	r4, #48	; 0x30
90016a78:	3457      	addgt	r4, #87	; 0x57
90016a7a:	b2e4      	uxtb	r4, r4
90016a7c:	f80c 4006 	strb.w	r4, [ip, r6]
90016a80:	4674      	mov	r4, lr
90016a82:	b96c      	cbnz	r4, 90016aa0 <_ZN8touchgfx7Unicode4itoaElPtti+0x60>
90016a84:	2f00      	cmp	r7, #0
90016a86:	da05      	bge.n	90016a94 <_ZN8touchgfx7Unicode4itoaElPtti+0x54>
90016a88:	ab0a      	add	r3, sp, #40	; 0x28
90016a8a:	4419      	add	r1, r3
90016a8c:	232d      	movs	r3, #45	; 0x2d
90016a8e:	f801 3c24 	strb.w	r3, [r1, #-36]
90016a92:	1eb1      	subs	r1, r6, #2
90016a94:	3101      	adds	r1, #1
90016a96:	4461      	add	r1, ip
90016a98:	f7ff ffa3 	bl	900169e2 <_ZN8touchgfx7Unicode7strncpyEPtPKct>
90016a9c:	b00b      	add	sp, #44	; 0x2c
90016a9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
90016aa0:	460e      	mov	r6, r1
90016aa2:	e7dc      	b.n	90016a5e <_ZN8touchgfx7Unicode4itoaElPtti+0x1e>

90016aa4 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt>:
90016aa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90016aa8:	b085      	sub	sp, #20
90016aaa:	4691      	mov	r9, r2
90016aac:	6802      	ldr	r2, [r0, #0]
90016aae:	4688      	mov	r8, r1
90016ab0:	461c      	mov	r4, r3
90016ab2:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
90016ab6:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
90016aba:	4683      	mov	fp, r0
90016abc:	4610      	mov	r0, r2
90016abe:	9103      	str	r1, [sp, #12]
90016ac0:	9302      	str	r3, [sp, #8]
90016ac2:	9201      	str	r2, [sp, #4]
90016ac4:	f7ff ff80 	bl	900169c8 <_ZN8touchgfx7Unicode6strlenEPKt>
90016ac8:	f1b8 0f00 	cmp.w	r8, #0
90016acc:	bf0c      	ite	eq
90016ace:	4684      	moveq	ip, r0
90016ad0:	f100 0c01 	addne.w	ip, r0, #1
90016ad4:	f1b9 0f69 	cmp.w	r9, #105	; 0x69
90016ad8:	f89d 6038 	ldrb.w	r6, [sp, #56]	; 0x38
90016adc:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
90016ade:	fa1f fc8c 	uxth.w	ip, ip
90016ae2:	9d13      	ldr	r5, [sp, #76]	; 0x4c
90016ae4:	f8dd a054 	ldr.w	sl, [sp, #84]	; 0x54
90016ae8:	9903      	ldr	r1, [sp, #12]
90016aea:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
90016aee:	d041      	beq.n	90016b74 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xd0>
90016af0:	d834      	bhi.n	90016b5c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xb8>
90016af2:	f1b9 0f63 	cmp.w	r9, #99	; 0x63
90016af6:	d059      	beq.n	90016bac <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x108>
90016af8:	f1b9 0f64 	cmp.w	r9, #100	; 0x64
90016afc:	d03a      	beq.n	90016b74 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xd0>
90016afe:	f1b9 0f58 	cmp.w	r9, #88	; 0x58
90016b02:	d034      	beq.n	90016b6e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xca>
90016b04:	2400      	movs	r4, #0
90016b06:	f8bd 2050 	ldrh.w	r2, [sp, #80]	; 0x50
90016b0a:	3a01      	subs	r2, #1
90016b0c:	b169      	cbz	r1, 90016b2a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
90016b0e:	9911      	ldr	r1, [sp, #68]	; 0x44
90016b10:	458c      	cmp	ip, r1
90016b12:	da09      	bge.n	90016b28 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x84>
90016b14:	eba1 010c 	sub.w	r1, r1, ip
90016b18:	b289      	uxth	r1, r1
90016b1a:	b933      	cbnz	r3, 90016b2a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
90016b1c:	2e00      	cmp	r6, #0
90016b1e:	d051      	beq.n	90016bc4 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x120>
90016b20:	2800      	cmp	r0, #0
90016b22:	d04f      	beq.n	90016bc4 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x120>
90016b24:	440c      	add	r4, r1
90016b26:	b2a4      	uxth	r4, r4
90016b28:	2100      	movs	r1, #0
90016b2a:	682b      	ldr	r3, [r5, #0]
90016b2c:	4293      	cmp	r3, r2
90016b2e:	da07      	bge.n	90016b40 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9c>
90016b30:	f1b8 0f00 	cmp.w	r8, #0
90016b34:	d004      	beq.n	90016b40 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9c>
90016b36:	f82a 8013 	strh.w	r8, [sl, r3, lsl #1]
90016b3a:	682b      	ldr	r3, [r5, #0]
90016b3c:	3301      	adds	r3, #1
90016b3e:	602b      	str	r3, [r5, #0]
90016b40:	2730      	movs	r7, #48	; 0x30
90016b42:	2c00      	cmp	r4, #0
90016b44:	d04e      	beq.n	90016be4 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
90016b46:	682e      	ldr	r6, [r5, #0]
90016b48:	3c01      	subs	r4, #1
90016b4a:	42b2      	cmp	r2, r6
90016b4c:	b2a4      	uxth	r4, r4
90016b4e:	dd49      	ble.n	90016be4 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
90016b50:	f82a 7016 	strh.w	r7, [sl, r6, lsl #1]
90016b54:	682b      	ldr	r3, [r5, #0]
90016b56:	3301      	adds	r3, #1
90016b58:	602b      	str	r3, [r5, #0]
90016b5a:	e7f2      	b.n	90016b42 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9e>
90016b5c:	f1b9 0f73 	cmp.w	r9, #115	; 0x73
90016b60:	d01d      	beq.n	90016b9e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xfa>
90016b62:	f1b9 0f78 	cmp.w	r9, #120	; 0x78
90016b66:	d002      	beq.n	90016b6e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xca>
90016b68:	f1b9 0f6f 	cmp.w	r9, #111	; 0x6f
90016b6c:	e7c9      	b.n	90016b02 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x5e>
90016b6e:	4684      	mov	ip, r0
90016b70:	f04f 0800 	mov.w	r8, #0
90016b74:	2c00      	cmp	r4, #0
90016b76:	d0c6      	beq.n	90016b06 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
90016b78:	b947      	cbnz	r7, 90016b8c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xe8>
90016b7a:	2801      	cmp	r0, #1
90016b7c:	d106      	bne.n	90016b8c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xe8>
90016b7e:	8814      	ldrh	r4, [r2, #0]
90016b80:	2c30      	cmp	r4, #48	; 0x30
90016b82:	bf02      	ittt	eq
90016b84:	3202      	addeq	r2, #2
90016b86:	4638      	moveq	r0, r7
90016b88:	f8cb 2000 	streq.w	r2, [fp]
90016b8c:	45bc      	cmp	ip, r7
90016b8e:	da14      	bge.n	90016bba <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x116>
90016b90:	b2bf      	uxth	r7, r7
90016b92:	eba7 040c 	sub.w	r4, r7, ip
90016b96:	46bc      	mov	ip, r7
90016b98:	b2a4      	uxth	r4, r4
90016b9a:	2600      	movs	r6, #0
90016b9c:	e7b3      	b.n	90016b06 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
90016b9e:	4684      	mov	ip, r0
90016ba0:	b16c      	cbz	r4, 90016bbe <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x11a>
90016ba2:	42b8      	cmp	r0, r7
90016ba4:	dd00      	ble.n	90016ba8 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x104>
90016ba6:	b2b8      	uxth	r0, r7
90016ba8:	2400      	movs	r4, #0
90016baa:	e003      	b.n	90016bb4 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x110>
90016bac:	f04f 0c01 	mov.w	ip, #1
90016bb0:	2400      	movs	r4, #0
90016bb2:	4660      	mov	r0, ip
90016bb4:	4626      	mov	r6, r4
90016bb6:	46a0      	mov	r8, r4
90016bb8:	e7a5      	b.n	90016b06 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
90016bba:	2400      	movs	r4, #0
90016bbc:	e7ed      	b.n	90016b9a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xf6>
90016bbe:	4626      	mov	r6, r4
90016bc0:	46a0      	mov	r8, r4
90016bc2:	e7a0      	b.n	90016b06 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
90016bc4:	2900      	cmp	r1, #0
90016bc6:	d0b0      	beq.n	90016b2a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
90016bc8:	2720      	movs	r7, #32
90016bca:	682e      	ldr	r6, [r5, #0]
90016bcc:	2900      	cmp	r1, #0
90016bce:	d0ac      	beq.n	90016b2a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
90016bd0:	3901      	subs	r1, #1
90016bd2:	4296      	cmp	r6, r2
90016bd4:	b289      	uxth	r1, r1
90016bd6:	daa7      	bge.n	90016b28 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x84>
90016bd8:	f82a 7016 	strh.w	r7, [sl, r6, lsl #1]
90016bdc:	682b      	ldr	r3, [r5, #0]
90016bde:	3301      	adds	r3, #1
90016be0:	602b      	str	r3, [r5, #0]
90016be2:	e7f2      	b.n	90016bca <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x126>
90016be4:	b188      	cbz	r0, 90016c0a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x166>
90016be6:	682b      	ldr	r3, [r5, #0]
90016be8:	3801      	subs	r0, #1
90016bea:	429a      	cmp	r2, r3
90016bec:	b280      	uxth	r0, r0
90016bee:	dd0c      	ble.n	90016c0a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x166>
90016bf0:	f8db 3000 	ldr.w	r3, [fp]
90016bf4:	1c9c      	adds	r4, r3, #2
90016bf6:	f8cb 4000 	str.w	r4, [fp]
90016bfa:	881c      	ldrh	r4, [r3, #0]
90016bfc:	682b      	ldr	r3, [r5, #0]
90016bfe:	f82a 4013 	strh.w	r4, [sl, r3, lsl #1]
90016c02:	682b      	ldr	r3, [r5, #0]
90016c04:	3301      	adds	r3, #1
90016c06:	602b      	str	r3, [r5, #0]
90016c08:	e7ec      	b.n	90016be4 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
90016c0a:	2620      	movs	r6, #32
90016c0c:	b151      	cbz	r1, 90016c24 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x180>
90016c0e:	6828      	ldr	r0, [r5, #0]
90016c10:	3901      	subs	r1, #1
90016c12:	4282      	cmp	r2, r0
90016c14:	b289      	uxth	r1, r1
90016c16:	dd05      	ble.n	90016c24 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x180>
90016c18:	f82a 6010 	strh.w	r6, [sl, r0, lsl #1]
90016c1c:	682b      	ldr	r3, [r5, #0]
90016c1e:	3301      	adds	r3, #1
90016c20:	602b      	str	r3, [r5, #0]
90016c22:	e7f3      	b.n	90016c0c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x168>
90016c24:	b005      	add	sp, #20
90016c26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

90016c2a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_>:
90016c2a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
90016c2e:	2400      	movs	r4, #0
90016c30:	e9dd 8c07 	ldrd	r8, ip, [sp, #28]
90016c34:	e9dd e609 	ldrd	lr, r6, [sp, #36]	; 0x24
90016c38:	e9dd 750b 	ldrd	r7, r5, [sp, #44]	; 0x2c
90016c3c:	8014      	strh	r4, [r2, #0]
90016c3e:	701c      	strb	r4, [r3, #0]
90016c40:	f888 4000 	strb.w	r4, [r8]
90016c44:	f88c 4000 	strb.w	r4, [ip]
90016c48:	f88e 4000 	strb.w	r4, [lr]
90016c4c:	703c      	strb	r4, [r7, #0]
90016c4e:	6804      	ldr	r4, [r0, #0]
90016c50:	b1a4      	cbz	r4, 90016c7c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x52>
90016c52:	8824      	ldrh	r4, [r4, #0]
90016c54:	f04f 0901 	mov.w	r9, #1
90016c58:	b314      	cbz	r4, 90016ca0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
90016c5a:	2c2b      	cmp	r4, #43	; 0x2b
90016c5c:	d001      	beq.n	90016c62 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x38>
90016c5e:	2c20      	cmp	r4, #32
90016c60:	d110      	bne.n	90016c84 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x5a>
90016c62:	8014      	strh	r4, [r2, #0]
90016c64:	6804      	ldr	r4, [r0, #0]
90016c66:	b10c      	cbz	r4, 90016c6c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x42>
90016c68:	3402      	adds	r4, #2
90016c6a:	6004      	str	r4, [r0, #0]
90016c6c:	680c      	ldr	r4, [r1, #0]
90016c6e:	b10c      	cbz	r4, 90016c74 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x4a>
90016c70:	3401      	adds	r4, #1
90016c72:	600c      	str	r4, [r1, #0]
90016c74:	6804      	ldr	r4, [r0, #0]
90016c76:	b17c      	cbz	r4, 90016c98 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x6e>
90016c78:	8824      	ldrh	r4, [r4, #0]
90016c7a:	e7ed      	b.n	90016c58 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2e>
90016c7c:	680c      	ldr	r4, [r1, #0]
90016c7e:	b17c      	cbz	r4, 90016ca0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
90016c80:	7824      	ldrb	r4, [r4, #0]
90016c82:	e7e7      	b.n	90016c54 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2a>
90016c84:	2c2d      	cmp	r4, #45	; 0x2d
90016c86:	d102      	bne.n	90016c8e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x64>
90016c88:	f883 9000 	strb.w	r9, [r3]
90016c8c:	e7ea      	b.n	90016c64 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x3a>
90016c8e:	2c23      	cmp	r4, #35	; 0x23
90016c90:	d107      	bne.n	90016ca2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x78>
90016c92:	f888 9000 	strb.w	r9, [r8]
90016c96:	e7e5      	b.n	90016c64 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x3a>
90016c98:	680c      	ldr	r4, [r1, #0]
90016c9a:	b10c      	cbz	r4, 90016ca0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
90016c9c:	7824      	ldrb	r4, [r4, #0]
90016c9e:	e7db      	b.n	90016c58 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2e>
90016ca0:	2400      	movs	r4, #0
90016ca2:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
90016ca6:	2b09      	cmp	r3, #9
90016ca8:	d901      	bls.n	90016cae <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x84>
90016caa:	2c2a      	cmp	r4, #42	; 0x2a
90016cac:	d122      	bne.n	90016cf4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
90016cae:	2301      	movs	r3, #1
90016cb0:	2c30      	cmp	r4, #48	; 0x30
90016cb2:	f88e 3000 	strb.w	r3, [lr]
90016cb6:	d10d      	bne.n	90016cd4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xaa>
90016cb8:	f88c 3000 	strb.w	r3, [ip]
90016cbc:	6803      	ldr	r3, [r0, #0]
90016cbe:	b10b      	cbz	r3, 90016cc4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x9a>
90016cc0:	3302      	adds	r3, #2
90016cc2:	6003      	str	r3, [r0, #0]
90016cc4:	680b      	ldr	r3, [r1, #0]
90016cc6:	b10b      	cbz	r3, 90016ccc <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xa2>
90016cc8:	3301      	adds	r3, #1
90016cca:	600b      	str	r3, [r1, #0]
90016ccc:	6803      	ldr	r3, [r0, #0]
90016cce:	2b00      	cmp	r3, #0
90016cd0:	d02f      	beq.n	90016d32 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x108>
90016cd2:	881c      	ldrh	r4, [r3, #0]
90016cd4:	2c2a      	cmp	r4, #42	; 0x2a
90016cd6:	d135      	bne.n	90016d44 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x11a>
90016cd8:	f04f 33ff 	mov.w	r3, #4294967295
90016cdc:	6033      	str	r3, [r6, #0]
90016cde:	6803      	ldr	r3, [r0, #0]
90016ce0:	b10b      	cbz	r3, 90016ce6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xbc>
90016ce2:	3302      	adds	r3, #2
90016ce4:	6003      	str	r3, [r0, #0]
90016ce6:	680b      	ldr	r3, [r1, #0]
90016ce8:	b10b      	cbz	r3, 90016cee <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xc4>
90016cea:	3301      	adds	r3, #1
90016cec:	600b      	str	r3, [r1, #0]
90016cee:	6803      	ldr	r3, [r0, #0]
90016cf0:	b31b      	cbz	r3, 90016d3a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x110>
90016cf2:	881c      	ldrh	r4, [r3, #0]
90016cf4:	2c2e      	cmp	r4, #46	; 0x2e
90016cf6:	d11a      	bne.n	90016d2e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
90016cf8:	2301      	movs	r3, #1
90016cfa:	703b      	strb	r3, [r7, #0]
90016cfc:	6803      	ldr	r3, [r0, #0]
90016cfe:	b10b      	cbz	r3, 90016d04 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xda>
90016d00:	3302      	adds	r3, #2
90016d02:	6003      	str	r3, [r0, #0]
90016d04:	680b      	ldr	r3, [r1, #0]
90016d06:	b10b      	cbz	r3, 90016d0c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xe2>
90016d08:	3301      	adds	r3, #1
90016d0a:	600b      	str	r3, [r1, #0]
90016d0c:	6803      	ldr	r3, [r0, #0]
90016d0e:	2b00      	cmp	r3, #0
90016d10:	d036      	beq.n	90016d80 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x156>
90016d12:	881b      	ldrh	r3, [r3, #0]
90016d14:	2b2a      	cmp	r3, #42	; 0x2a
90016d16:	d137      	bne.n	90016d88 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x15e>
90016d18:	f04f 33ff 	mov.w	r3, #4294967295
90016d1c:	602b      	str	r3, [r5, #0]
90016d1e:	6803      	ldr	r3, [r0, #0]
90016d20:	b10b      	cbz	r3, 90016d26 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xfc>
90016d22:	3302      	adds	r3, #2
90016d24:	6003      	str	r3, [r0, #0]
90016d26:	680b      	ldr	r3, [r1, #0]
90016d28:	b10b      	cbz	r3, 90016d2e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
90016d2a:	3301      	adds	r3, #1
90016d2c:	600b      	str	r3, [r1, #0]
90016d2e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
90016d32:	680c      	ldr	r4, [r1, #0]
90016d34:	b134      	cbz	r4, 90016d44 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x11a>
90016d36:	7824      	ldrb	r4, [r4, #0]
90016d38:	e7cc      	b.n	90016cd4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xaa>
90016d3a:	680b      	ldr	r3, [r1, #0]
90016d3c:	2b00      	cmp	r3, #0
90016d3e:	d0f6      	beq.n	90016d2e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
90016d40:	781c      	ldrb	r4, [r3, #0]
90016d42:	e7d7      	b.n	90016cf4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
90016d44:	2300      	movs	r3, #0
90016d46:	220a      	movs	r2, #10
90016d48:	6033      	str	r3, [r6, #0]
90016d4a:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
90016d4e:	fa1f f38c 	uxth.w	r3, ip
90016d52:	2b09      	cmp	r3, #9
90016d54:	d8ce      	bhi.n	90016cf4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
90016d56:	6833      	ldr	r3, [r6, #0]
90016d58:	fb02 c303 	mla	r3, r2, r3, ip
90016d5c:	6033      	str	r3, [r6, #0]
90016d5e:	6803      	ldr	r3, [r0, #0]
90016d60:	b10b      	cbz	r3, 90016d66 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x13c>
90016d62:	3302      	adds	r3, #2
90016d64:	6003      	str	r3, [r0, #0]
90016d66:	680b      	ldr	r3, [r1, #0]
90016d68:	b10b      	cbz	r3, 90016d6e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x144>
90016d6a:	3301      	adds	r3, #1
90016d6c:	600b      	str	r3, [r1, #0]
90016d6e:	6803      	ldr	r3, [r0, #0]
90016d70:	b10b      	cbz	r3, 90016d76 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x14c>
90016d72:	881c      	ldrh	r4, [r3, #0]
90016d74:	e7e9      	b.n	90016d4a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
90016d76:	680c      	ldr	r4, [r1, #0]
90016d78:	2c00      	cmp	r4, #0
90016d7a:	d0e6      	beq.n	90016d4a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
90016d7c:	7824      	ldrb	r4, [r4, #0]
90016d7e:	e7e4      	b.n	90016d4a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
90016d80:	680b      	ldr	r3, [r1, #0]
90016d82:	b10b      	cbz	r3, 90016d88 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x15e>
90016d84:	781b      	ldrb	r3, [r3, #0]
90016d86:	e7c5      	b.n	90016d14 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xea>
90016d88:	2200      	movs	r2, #0
90016d8a:	240a      	movs	r4, #10
90016d8c:	602a      	str	r2, [r5, #0]
90016d8e:	3b30      	subs	r3, #48	; 0x30
90016d90:	682a      	ldr	r2, [r5, #0]
90016d92:	b29e      	uxth	r6, r3
90016d94:	2e09      	cmp	r6, #9
90016d96:	d813      	bhi.n	90016dc0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x196>
90016d98:	fb04 3302 	mla	r3, r4, r2, r3
90016d9c:	602b      	str	r3, [r5, #0]
90016d9e:	6803      	ldr	r3, [r0, #0]
90016da0:	b10b      	cbz	r3, 90016da6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x17c>
90016da2:	3302      	adds	r3, #2
90016da4:	6003      	str	r3, [r0, #0]
90016da6:	680b      	ldr	r3, [r1, #0]
90016da8:	b10b      	cbz	r3, 90016dae <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x184>
90016daa:	3301      	adds	r3, #1
90016dac:	600b      	str	r3, [r1, #0]
90016dae:	6803      	ldr	r3, [r0, #0]
90016db0:	b10b      	cbz	r3, 90016db6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x18c>
90016db2:	881b      	ldrh	r3, [r3, #0]
90016db4:	e7eb      	b.n	90016d8e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
90016db6:	680b      	ldr	r3, [r1, #0]
90016db8:	2b00      	cmp	r3, #0
90016dba:	d0e8      	beq.n	90016d8e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
90016dbc:	781b      	ldrb	r3, [r3, #0]
90016dbe:	e7e6      	b.n	90016d8e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
90016dc0:	2a06      	cmp	r2, #6
90016dc2:	bfa8      	it	ge
90016dc4:	2206      	movge	r2, #6
90016dc6:	602a      	str	r2, [r5, #0]
90016dc8:	e7b1      	b.n	90016d2e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>

90016dca <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list>:
90016dca:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90016dce:	b0a3      	sub	sp, #140	; 0x8c
90016dd0:	2600      	movs	r6, #0
90016dd2:	4607      	mov	r7, r0
90016dd4:	4688      	mov	r8, r1
90016dd6:	f10d 0944 	add.w	r9, sp, #68	; 0x44
90016dda:	4631      	mov	r1, r6
90016ddc:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
90016dde:	4648      	mov	r0, r9
90016de0:	960d      	str	r6, [sp, #52]	; 0x34
90016de2:	e9cd 3208 	strd	r3, r2, [sp, #32]
90016de6:	2242      	movs	r2, #66	; 0x42
90016de8:	f00c fac4 	bl	90023374 <memset>
90016dec:	b15f      	cbz	r7, 90016e06 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x3c>
90016dee:	f108 3aff 	add.w	sl, r8, #4294967295
90016df2:	9a09      	ldr	r2, [sp, #36]	; 0x24
90016df4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
90016df6:	b152      	cbz	r2, 90016e0e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x44>
90016df8:	8812      	ldrh	r2, [r2, #0]
90016dfa:	b10a      	cbz	r2, 90016e00 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x36>
90016dfc:	459a      	cmp	sl, r3
90016dfe:	dc2e      	bgt.n	90016e5e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x94>
90016e00:	2200      	movs	r2, #0
90016e02:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
90016e06:	4638      	mov	r0, r7
90016e08:	b023      	add	sp, #140	; 0x8c
90016e0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90016e0e:	9a08      	ldr	r2, [sp, #32]
90016e10:	2a00      	cmp	r2, #0
90016e12:	d0f5      	beq.n	90016e00 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x36>
90016e14:	7812      	ldrb	r2, [r2, #0]
90016e16:	e7f0      	b.n	90016dfa <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x30>
90016e18:	2d00      	cmp	r5, #0
90016e1a:	d0ea      	beq.n	90016df2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
90016e1c:	782a      	ldrb	r2, [r5, #0]
90016e1e:	b142      	cbz	r2, 90016e32 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x68>
90016e20:	2a25      	cmp	r2, #37	; 0x25
90016e22:	d001      	beq.n	90016e28 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x5e>
90016e24:	459a      	cmp	sl, r3
90016e26:	dc08      	bgt.n	90016e3a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x70>
90016e28:	f1bb 0f00 	cmp.w	fp, #0
90016e2c:	d121      	bne.n	90016e72 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xa8>
90016e2e:	2d00      	cmp	r5, #0
90016e30:	d0df      	beq.n	90016df2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
90016e32:	782a      	ldrb	r2, [r5, #0]
90016e34:	f04f 0b00 	mov.w	fp, #0
90016e38:	e01d      	b.n	90016e76 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xac>
90016e3a:	f1bb 0f00 	cmp.w	fp, #0
90016e3e:	d077      	beq.n	90016f30 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x166>
90016e40:	f8bb 2000 	ldrh.w	r2, [fp]
90016e44:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
90016e48:	f1bb 0f00 	cmp.w	fp, #0
90016e4c:	d002      	beq.n	90016e54 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x8a>
90016e4e:	f10b 0202 	add.w	r2, fp, #2
90016e52:	9209      	str	r2, [sp, #36]	; 0x24
90016e54:	b10d      	cbz	r5, 90016e5a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x90>
90016e56:	3501      	adds	r5, #1
90016e58:	9508      	str	r5, [sp, #32]
90016e5a:	3301      	adds	r3, #1
90016e5c:	930d      	str	r3, [sp, #52]	; 0x34
90016e5e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
90016e60:	e9dd 5b08 	ldrd	r5, fp, [sp, #32]
90016e64:	f1bb 0f00 	cmp.w	fp, #0
90016e68:	d0d6      	beq.n	90016e18 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x4e>
90016e6a:	f8bb 2000 	ldrh.w	r2, [fp]
90016e6e:	2a00      	cmp	r2, #0
90016e70:	d1d6      	bne.n	90016e20 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x56>
90016e72:	f8bb 2000 	ldrh.w	r2, [fp]
90016e76:	2a00      	cmp	r2, #0
90016e78:	d0bb      	beq.n	90016df2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
90016e7a:	459a      	cmp	sl, r3
90016e7c:	ddb9      	ble.n	90016df2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
90016e7e:	f8ad 6032 	strh.w	r6, [sp, #50]	; 0x32
90016e82:	f88d 602d 	strb.w	r6, [sp, #45]	; 0x2d
90016e86:	f88d 602e 	strb.w	r6, [sp, #46]	; 0x2e
90016e8a:	f88d 602f 	strb.w	r6, [sp, #47]	; 0x2f
90016e8e:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
90016e92:	960e      	str	r6, [sp, #56]	; 0x38
90016e94:	f88d 6031 	strb.w	r6, [sp, #49]	; 0x31
90016e98:	960f      	str	r6, [sp, #60]	; 0x3c
90016e9a:	f1bb 0f00 	cmp.w	fp, #0
90016e9e:	d002      	beq.n	90016ea6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xdc>
90016ea0:	f10b 0302 	add.w	r3, fp, #2
90016ea4:	9309      	str	r3, [sp, #36]	; 0x24
90016ea6:	b10d      	cbz	r5, 90016eac <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xe2>
90016ea8:	1c6b      	adds	r3, r5, #1
90016eaa:	9308      	str	r3, [sp, #32]
90016eac:	ab0f      	add	r3, sp, #60	; 0x3c
90016eae:	f10d 0232 	add.w	r2, sp, #50	; 0x32
90016eb2:	a908      	add	r1, sp, #32
90016eb4:	a809      	add	r0, sp, #36	; 0x24
90016eb6:	9305      	str	r3, [sp, #20]
90016eb8:	f10d 0331 	add.w	r3, sp, #49	; 0x31
90016ebc:	9304      	str	r3, [sp, #16]
90016ebe:	ab0e      	add	r3, sp, #56	; 0x38
90016ec0:	9303      	str	r3, [sp, #12]
90016ec2:	ab0c      	add	r3, sp, #48	; 0x30
90016ec4:	9302      	str	r3, [sp, #8]
90016ec6:	f10d 032f 	add.w	r3, sp, #47	; 0x2f
90016eca:	9301      	str	r3, [sp, #4]
90016ecc:	f10d 032e 	add.w	r3, sp, #46	; 0x2e
90016ed0:	9300      	str	r3, [sp, #0]
90016ed2:	f10d 032d 	add.w	r3, sp, #45	; 0x2d
90016ed6:	f7ff fea8 	bl	90016c2a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_>
90016eda:	9b0e      	ldr	r3, [sp, #56]	; 0x38
90016edc:	2b00      	cmp	r3, #0
90016ede:	bfbf      	itttt	lt
90016ee0:	6823      	ldrlt	r3, [r4, #0]
90016ee2:	3404      	addlt	r4, #4
90016ee4:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
90016ee8:	930e      	strlt	r3, [sp, #56]	; 0x38
90016eea:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
90016eec:	2b00      	cmp	r3, #0
90016eee:	bfbe      	ittt	lt
90016ef0:	6823      	ldrlt	r3, [r4, #0]
90016ef2:	3404      	addlt	r4, #4
90016ef4:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
90016ef8:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
90016efc:	bfb8      	it	lt
90016efe:	930f      	strlt	r3, [sp, #60]	; 0x3c
90016f00:	b1d9      	cbz	r1, 90016f3a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x170>
90016f02:	880b      	ldrh	r3, [r1, #0]
90016f04:	2b69      	cmp	r3, #105	; 0x69
90016f06:	d01f      	beq.n	90016f48 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
90016f08:	d82f      	bhi.n	90016f6a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1a0>
90016f0a:	2b58      	cmp	r3, #88	; 0x58
90016f0c:	d01c      	beq.n	90016f48 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
90016f0e:	d818      	bhi.n	90016f42 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x178>
90016f10:	2b25      	cmp	r3, #37	; 0x25
90016f12:	d034      	beq.n	90016f7e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1b4>
90016f14:	9b0d      	ldr	r3, [sp, #52]	; 0x34
90016f16:	e9cd 5b08 	strd	r5, fp, [sp, #32]
90016f1a:	f1bb 0f00 	cmp.w	fp, #0
90016f1e:	f000 80b7 	beq.w	90017090 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2c6>
90016f22:	f8bb 5000 	ldrh.w	r5, [fp]
90016f26:	f827 5013 	strh.w	r5, [r7, r3, lsl #1]
90016f2a:	3301      	adds	r3, #1
90016f2c:	930d      	str	r3, [sp, #52]	; 0x34
90016f2e:	e029      	b.n	90016f84 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ba>
90016f30:	b10d      	cbz	r5, 90016f36 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x16c>
90016f32:	782a      	ldrb	r2, [r5, #0]
90016f34:	e786      	b.n	90016e44 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x7a>
90016f36:	462a      	mov	r2, r5
90016f38:	e784      	b.n	90016e44 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x7a>
90016f3a:	2a00      	cmp	r2, #0
90016f3c:	d0ea      	beq.n	90016f14 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14a>
90016f3e:	7813      	ldrb	r3, [r2, #0]
90016f40:	e7e0      	b.n	90016f04 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x13a>
90016f42:	3b63      	subs	r3, #99	; 0x63
90016f44:	2b01      	cmp	r3, #1
90016f46:	d8e5      	bhi.n	90016f14 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14a>
90016f48:	f8cd 9040 	str.w	r9, [sp, #64]	; 0x40
90016f4c:	b329      	cbz	r1, 90016f9a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1d0>
90016f4e:	880b      	ldrh	r3, [r1, #0]
90016f50:	2b69      	cmp	r3, #105	; 0x69
90016f52:	d063      	beq.n	9001701c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x252>
90016f54:	d825      	bhi.n	90016fa2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1d8>
90016f56:	2b63      	cmp	r3, #99	; 0x63
90016f58:	d038      	beq.n	90016fcc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x202>
90016f5a:	2b64      	cmp	r3, #100	; 0x64
90016f5c:	d05e      	beq.n	9001701c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x252>
90016f5e:	2b58      	cmp	r3, #88	; 0x58
90016f60:	d07a      	beq.n	90017058 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28e>
90016f62:	f8ad 6044 	strh.w	r6, [sp, #68]	; 0x44
90016f66:	4625      	mov	r5, r4
90016f68:	e036      	b.n	90016fd8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
90016f6a:	2b73      	cmp	r3, #115	; 0x73
90016f6c:	d0ec      	beq.n	90016f48 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
90016f6e:	d802      	bhi.n	90016f76 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ac>
90016f70:	2b6f      	cmp	r3, #111	; 0x6f
90016f72:	d1cf      	bne.n	90016f14 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14a>
90016f74:	e7e8      	b.n	90016f48 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
90016f76:	2b75      	cmp	r3, #117	; 0x75
90016f78:	d0e6      	beq.n	90016f48 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
90016f7a:	2b78      	cmp	r3, #120	; 0x78
90016f7c:	e7f9      	b.n	90016f72 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1a8>
90016f7e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
90016f80:	f827 3012 	strh.w	r3, [r7, r2, lsl #1]
90016f84:	9b09      	ldr	r3, [sp, #36]	; 0x24
90016f86:	b10b      	cbz	r3, 90016f8c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1c2>
90016f88:	3302      	adds	r3, #2
90016f8a:	9309      	str	r3, [sp, #36]	; 0x24
90016f8c:	9b08      	ldr	r3, [sp, #32]
90016f8e:	2b00      	cmp	r3, #0
90016f90:	f43f af2f 	beq.w	90016df2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
90016f94:	3301      	adds	r3, #1
90016f96:	9308      	str	r3, [sp, #32]
90016f98:	e72b      	b.n	90016df2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
90016f9a:	2a00      	cmp	r2, #0
90016f9c:	d0e1      	beq.n	90016f62 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x198>
90016f9e:	7813      	ldrb	r3, [r2, #0]
90016fa0:	e7d6      	b.n	90016f50 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x186>
90016fa2:	2b73      	cmp	r3, #115	; 0x73
90016fa4:	d036      	beq.n	90017014 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x24a>
90016fa6:	d807      	bhi.n	90016fb8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ee>
90016fa8:	2b6f      	cmp	r3, #111	; 0x6f
90016faa:	d1da      	bne.n	90016f62 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x198>
90016fac:	9a0d      	ldr	r2, [sp, #52]	; 0x34
90016fae:	1d25      	adds	r5, r4, #4
90016fb0:	2308      	movs	r3, #8
90016fb2:	eba8 0202 	sub.w	r2, r8, r2
90016fb6:	e049      	b.n	9001704c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x282>
90016fb8:	2b75      	cmp	r3, #117	; 0x75
90016fba:	d042      	beq.n	90017042 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x278>
90016fbc:	2b78      	cmp	r3, #120	; 0x78
90016fbe:	d1d0      	bne.n	90016f62 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x198>
90016fc0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
90016fc2:	1d25      	adds	r5, r4, #4
90016fc4:	2310      	movs	r3, #16
90016fc6:	eba8 0202 	sub.w	r2, r8, r2
90016fca:	e03f      	b.n	9001704c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x282>
90016fcc:	6823      	ldr	r3, [r4, #0]
90016fce:	1d25      	adds	r5, r4, #4
90016fd0:	f8ad 6046 	strh.w	r6, [sp, #70]	; 0x46
90016fd4:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
90016fd8:	9b09      	ldr	r3, [sp, #36]	; 0x24
90016fda:	f8bd 1032 	ldrh.w	r1, [sp, #50]	; 0x32
90016fde:	2b00      	cmp	r3, #0
90016fe0:	d051      	beq.n	90017086 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2bc>
90016fe2:	881a      	ldrh	r2, [r3, #0]
90016fe4:	a80d      	add	r0, sp, #52	; 0x34
90016fe6:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
90016fea:	462c      	mov	r4, r5
90016fec:	9005      	str	r0, [sp, #20]
90016fee:	f89d 002d 	ldrb.w	r0, [sp, #45]	; 0x2d
90016ff2:	9004      	str	r0, [sp, #16]
90016ff4:	980e      	ldr	r0, [sp, #56]	; 0x38
90016ff6:	9003      	str	r0, [sp, #12]
90016ff8:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
90016ffc:	9002      	str	r0, [sp, #8]
90016ffe:	980f      	ldr	r0, [sp, #60]	; 0x3c
90017000:	9001      	str	r0, [sp, #4]
90017002:	f89d 002f 	ldrb.w	r0, [sp, #47]	; 0x2f
90017006:	e9cd 8706 	strd	r8, r7, [sp, #24]
9001700a:	9000      	str	r0, [sp, #0]
9001700c:	a810      	add	r0, sp, #64	; 0x40
9001700e:	f7ff fd49 	bl	90016aa4 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt>
90017012:	e7b7      	b.n	90016f84 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ba>
90017014:	1d25      	adds	r5, r4, #4
90017016:	6823      	ldr	r3, [r4, #0]
90017018:	9310      	str	r3, [sp, #64]	; 0x40
9001701a:	e7dd      	b.n	90016fd8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
9001701c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
9001701e:	230a      	movs	r3, #10
90017020:	4649      	mov	r1, r9
90017022:	6820      	ldr	r0, [r4, #0]
90017024:	eba8 0202 	sub.w	r2, r8, r2
90017028:	1d25      	adds	r5, r4, #4
9001702a:	b292      	uxth	r2, r2
9001702c:	f7ff fd08 	bl	90016a40 <_ZN8touchgfx7Unicode4itoaElPtti>
90017030:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
90017034:	2b2d      	cmp	r3, #45	; 0x2d
90017036:	d1cf      	bne.n	90016fd8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
90017038:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
9001703c:	9b10      	ldr	r3, [sp, #64]	; 0x40
9001703e:	3302      	adds	r3, #2
90017040:	e7ea      	b.n	90017018 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x24e>
90017042:	9a0d      	ldr	r2, [sp, #52]	; 0x34
90017044:	1d25      	adds	r5, r4, #4
90017046:	230a      	movs	r3, #10
90017048:	eba8 0202 	sub.w	r2, r8, r2
9001704c:	b292      	uxth	r2, r2
9001704e:	4649      	mov	r1, r9
90017050:	6820      	ldr	r0, [r4, #0]
90017052:	f7ff fcd7 	bl	90016a04 <_ZN8touchgfx7Unicode4utoaEmPtti.part.2>
90017056:	e7bf      	b.n	90016fd8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
90017058:	9a0d      	ldr	r2, [sp, #52]	; 0x34
9001705a:	2310      	movs	r3, #16
9001705c:	4649      	mov	r1, r9
9001705e:	6820      	ldr	r0, [r4, #0]
90017060:	eba8 0202 	sub.w	r2, r8, r2
90017064:	1d25      	adds	r5, r4, #4
90017066:	b292      	uxth	r2, r2
90017068:	f7ff fccc 	bl	90016a04 <_ZN8touchgfx7Unicode4utoaEmPtti.part.2>
9001706c:	f10d 0242 	add.w	r2, sp, #66	; 0x42
90017070:	f832 3f02 	ldrh.w	r3, [r2, #2]!
90017074:	2b00      	cmp	r3, #0
90017076:	d0af      	beq.n	90016fd8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
90017078:	f1a3 0161 	sub.w	r1, r3, #97	; 0x61
9001707c:	2919      	cmp	r1, #25
9001707e:	d8f7      	bhi.n	90017070 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2a6>
90017080:	3b20      	subs	r3, #32
90017082:	8013      	strh	r3, [r2, #0]
90017084:	e7f4      	b.n	90017070 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2a6>
90017086:	9a08      	ldr	r2, [sp, #32]
90017088:	2a00      	cmp	r2, #0
9001708a:	d0ab      	beq.n	90016fe4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x21a>
9001708c:	7812      	ldrb	r2, [r2, #0]
9001708e:	e7a9      	b.n	90016fe4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x21a>
90017090:	2d00      	cmp	r5, #0
90017092:	f43f af48 	beq.w	90016f26 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x15c>
90017096:	782d      	ldrb	r5, [r5, #0]
90017098:	e745      	b.n	90016f26 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x15c>

9001709a <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>:
9001709a:	b507      	push	{r0, r1, r2, lr}
9001709c:	9300      	str	r3, [sp, #0]
9001709e:	4613      	mov	r3, r2
900170a0:	2200      	movs	r2, #0
900170a2:	f7ff fe92 	bl	90016dca <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list>
900170a6:	b003      	add	sp, #12
900170a8:	f85d fb04 	ldr.w	pc, [sp], #4

900170ac <_ZN8touchgfx7Unicode8snprintfEPttPKcz>:
900170ac:	b40c      	push	{r2, r3}
900170ae:	b507      	push	{r0, r1, r2, lr}
900170b0:	ab04      	add	r3, sp, #16
900170b2:	f853 2b04 	ldr.w	r2, [r3], #4
900170b6:	9301      	str	r3, [sp, #4]
900170b8:	f7ff ffef 	bl	9001709a <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>
900170bc:	b003      	add	sp, #12
900170be:	f85d eb04 	ldr.w	lr, [sp], #4
900170c2:	b002      	add	sp, #8
900170c4:	4770      	bx	lr
	...

900170c8 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>:
900170c8:	4b01      	ldr	r3, [pc, #4]	; (900170d0 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE+0x8>)
900170ca:	6018      	str	r0, [r3, #0]
900170cc:	4770      	bx	lr
900170ce:	bf00      	nop
900170d0:	240262c4 	.word	0x240262c4

900170d4 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>:
900170d4:	4b06      	ldr	r3, [pc, #24]	; (900170f0 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x1c>)
900170d6:	881a      	ldrh	r2, [r3, #0]
900170d8:	4282      	cmp	r2, r0
900170da:	d807      	bhi.n	900170ec <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x18>
900170dc:	4b05      	ldr	r3, [pc, #20]	; (900170f4 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x20>)
900170de:	881b      	ldrh	r3, [r3, #0]
900170e0:	4413      	add	r3, r2
900170e2:	4298      	cmp	r0, r3
900170e4:	bfac      	ite	ge
900170e6:	2000      	movge	r0, #0
900170e8:	2001      	movlt	r0, #1
900170ea:	4770      	bx	lr
900170ec:	2000      	movs	r0, #0
900170ee:	4770      	bx	lr
900170f0:	240262e4 	.word	0x240262e4
900170f4:	240262e8 	.word	0x240262e8

900170f8 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>:
900170f8:	b508      	push	{r3, lr}
900170fa:	4601      	mov	r1, r0
900170fc:	f7ff ffea 	bl	900170d4 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
90017100:	b118      	cbz	r0, 9001710a <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x12>
90017102:	4b02      	ldr	r3, [pc, #8]	; (9001710c <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x14>)
90017104:	681b      	ldr	r3, [r3, #0]
90017106:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
9001710a:	bd08      	pop	{r3, pc}
9001710c:	240262c8 	.word	0x240262c8

90017110 <_ZN8touchgfx6Bitmap10clearCacheEv>:
90017110:	b5f0      	push	{r4, r5, r6, r7, lr}
90017112:	4c24      	ldr	r4, [pc, #144]	; (900171a4 <_ZN8touchgfx6Bitmap10clearCacheEv+0x94>)
90017114:	6823      	ldr	r3, [r4, #0]
90017116:	2b00      	cmp	r3, #0
90017118:	d042      	beq.n	900171a0 <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
9001711a:	4a23      	ldr	r2, [pc, #140]	; (900171a8 <_ZN8touchgfx6Bitmap10clearCacheEv+0x98>)
9001711c:	4d23      	ldr	r5, [pc, #140]	; (900171ac <_ZN8touchgfx6Bitmap10clearCacheEv+0x9c>)
9001711e:	8811      	ldrh	r1, [r2, #0]
90017120:	f8b5 c000 	ldrh.w	ip, [r5]
90017124:	4822      	ldr	r0, [pc, #136]	; (900171b0 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa0>)
90017126:	4461      	add	r1, ip
90017128:	1c4a      	adds	r2, r1, #1
9001712a:	008f      	lsls	r7, r1, #2
9001712c:	f022 0201 	bic.w	r2, r2, #1
90017130:	19de      	adds	r6, r3, r7
90017132:	0412      	lsls	r2, r2, #16
90017134:	6006      	str	r6, [r0, #0]
90017136:	4e1f      	ldr	r6, [pc, #124]	; (900171b4 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa4>)
90017138:	0c12      	lsrs	r2, r2, #16
9001713a:	eb07 0742 	add.w	r7, r7, r2, lsl #1
9001713e:	19da      	adds	r2, r3, r7
90017140:	6032      	str	r2, [r6, #0]
90017142:	220e      	movs	r2, #14
90017144:	fb02 f20c 	mul.w	r2, r2, ip
90017148:	3203      	adds	r2, #3
9001714a:	f022 0203 	bic.w	r2, r2, #3
9001714e:	443a      	add	r2, r7
90017150:	4f19      	ldr	r7, [pc, #100]	; (900171b8 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa8>)
90017152:	4413      	add	r3, r2
90017154:	603b      	str	r3, [r7, #0]
90017156:	2300      	movs	r3, #0
90017158:	4f18      	ldr	r7, [pc, #96]	; (900171bc <_ZN8touchgfx6Bitmap10clearCacheEv+0xac>)
9001715a:	469c      	mov	ip, r3
9001715c:	803b      	strh	r3, [r7, #0]
9001715e:	4f18      	ldr	r7, [pc, #96]	; (900171c0 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb0>)
90017160:	683f      	ldr	r7, [r7, #0]
90017162:	1aba      	subs	r2, r7, r2
90017164:	4f17      	ldr	r7, [pc, #92]	; (900171c4 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb4>)
90017166:	603a      	str	r2, [r7, #0]
90017168:	f64f 77ff 	movw	r7, #65535	; 0xffff
9001716c:	4a16      	ldr	r2, [pc, #88]	; (900171c8 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb8>)
9001716e:	8013      	strh	r3, [r2, #0]
90017170:	428b      	cmp	r3, r1
90017172:	d10d      	bne.n	90017190 <_ZN8touchgfx6Bitmap10clearCacheEv+0x80>
90017174:	882d      	ldrh	r5, [r5, #0]
90017176:	2300      	movs	r3, #0
90017178:	6830      	ldr	r0, [r6, #0]
9001717a:	240e      	movs	r4, #14
9001717c:	429d      	cmp	r5, r3
9001717e:	d90f      	bls.n	900171a0 <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
90017180:	fb04 0203 	mla	r2, r4, r3, r0
90017184:	3301      	adds	r3, #1
90017186:	7b11      	ldrb	r1, [r2, #12]
90017188:	f36f 1145 	bfc	r1, #5, #1
9001718c:	7311      	strb	r1, [r2, #12]
9001718e:	e7f5      	b.n	9001717c <_ZN8touchgfx6Bitmap10clearCacheEv+0x6c>
90017190:	6822      	ldr	r2, [r4, #0]
90017192:	f842 c023 	str.w	ip, [r2, r3, lsl #2]
90017196:	6802      	ldr	r2, [r0, #0]
90017198:	f822 7013 	strh.w	r7, [r2, r3, lsl #1]
9001719c:	3301      	adds	r3, #1
9001719e:	e7e7      	b.n	90017170 <_ZN8touchgfx6Bitmap10clearCacheEv+0x60>
900171a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
900171a2:	bf00      	nop
900171a4:	240262c8 	.word	0x240262c8
900171a8:	240262e4 	.word	0x240262e4
900171ac:	240262e8 	.word	0x240262e8
900171b0:	240262dc 	.word	0x240262dc
900171b4:	240262cc 	.word	0x240262cc
900171b8:	240262d4 	.word	0x240262d4
900171bc:	240262e6 	.word	0x240262e6
900171c0:	240262d0 	.word	0x240262d0
900171c4:	240262e0 	.word	0x240262e0
900171c8:	240262d8 	.word	0x240262d8

900171cc <_ZN8touchgfx6Bitmap8setCacheEPtmm>:
900171cc:	4b06      	ldr	r3, [pc, #24]	; (900171e8 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x1c>)
900171ce:	681b      	ldr	r3, [r3, #0]
900171d0:	b943      	cbnz	r3, 900171e4 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
900171d2:	b139      	cbz	r1, 900171e4 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
900171d4:	4b05      	ldr	r3, [pc, #20]	; (900171ec <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x20>)
900171d6:	801a      	strh	r2, [r3, #0]
900171d8:	4b05      	ldr	r3, [pc, #20]	; (900171f0 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x24>)
900171da:	6019      	str	r1, [r3, #0]
900171dc:	4b05      	ldr	r3, [pc, #20]	; (900171f4 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x28>)
900171de:	6018      	str	r0, [r3, #0]
900171e0:	f7ff bf96 	b.w	90017110 <_ZN8touchgfx6Bitmap10clearCacheEv>
900171e4:	4770      	bx	lr
900171e6:	bf00      	nop
900171e8:	240262d4 	.word	0x240262d4
900171ec:	240262e8 	.word	0x240262e8
900171f0:	240262d0 	.word	0x240262d0
900171f4:	240262c8 	.word	0x240262c8

900171f8 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>:
900171f8:	b470      	push	{r4, r5, r6}
900171fa:	4c07      	ldr	r4, [pc, #28]	; (90017218 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x20>)
900171fc:	4605      	mov	r5, r0
900171fe:	4610      	mov	r0, r2
90017200:	9a03      	ldr	r2, [sp, #12]
90017202:	6826      	ldr	r6, [r4, #0]
90017204:	b936      	cbnz	r6, 90017214 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x1c>
90017206:	6025      	str	r5, [r4, #0]
90017208:	4c04      	ldr	r4, [pc, #16]	; (9001721c <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x24>)
9001720a:	8021      	strh	r1, [r4, #0]
9001720c:	4619      	mov	r1, r3
9001720e:	bc70      	pop	{r4, r5, r6}
90017210:	f7ff bfdc 	b.w	900171cc <_ZN8touchgfx6Bitmap8setCacheEPtmm>
90017214:	bc70      	pop	{r4, r5, r6}
90017216:	4770      	bx	lr
90017218:	240262ec 	.word	0x240262ec
9001721c:	240262e4 	.word	0x240262e4

90017220 <_ZNK8touchgfx6Bitmap8getWidthEv>:
90017220:	4a12      	ldr	r2, [pc, #72]	; (9001726c <_ZNK8touchgfx6Bitmap8getWidthEv+0x4c>)
90017222:	8803      	ldrh	r3, [r0, #0]
90017224:	8812      	ldrh	r2, [r2, #0]
90017226:	4293      	cmp	r3, r2
90017228:	d207      	bcs.n	9001723a <_ZNK8touchgfx6Bitmap8getWidthEv+0x1a>
9001722a:	4a11      	ldr	r2, [pc, #68]	; (90017270 <_ZNK8touchgfx6Bitmap8getWidthEv+0x50>)
9001722c:	2114      	movs	r1, #20
9001722e:	6812      	ldr	r2, [r2, #0]
90017230:	fb01 2303 	mla	r3, r1, r3, r2
90017234:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
90017238:	4770      	bx	lr
9001723a:	490e      	ldr	r1, [pc, #56]	; (90017274 <_ZNK8touchgfx6Bitmap8getWidthEv+0x54>)
9001723c:	8809      	ldrh	r1, [r1, #0]
9001723e:	4411      	add	r1, r2
90017240:	428b      	cmp	r3, r1
90017242:	da04      	bge.n	9001724e <_ZNK8touchgfx6Bitmap8getWidthEv+0x2e>
90017244:	1a9b      	subs	r3, r3, r2
90017246:	4a0c      	ldr	r2, [pc, #48]	; (90017278 <_ZNK8touchgfx6Bitmap8getWidthEv+0x58>)
90017248:	210e      	movs	r1, #14
9001724a:	6812      	ldr	r2, [r2, #0]
9001724c:	e7f0      	b.n	90017230 <_ZNK8touchgfx6Bitmap8getWidthEv+0x10>
9001724e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
90017252:	4293      	cmp	r3, r2
90017254:	d108      	bne.n	90017268 <_ZNK8touchgfx6Bitmap8getWidthEv+0x48>
90017256:	4b09      	ldr	r3, [pc, #36]	; (9001727c <_ZNK8touchgfx6Bitmap8getWidthEv+0x5c>)
90017258:	781b      	ldrb	r3, [r3, #0]
9001725a:	b91b      	cbnz	r3, 90017264 <_ZNK8touchgfx6Bitmap8getWidthEv+0x44>
9001725c:	4b08      	ldr	r3, [pc, #32]	; (90017280 <_ZNK8touchgfx6Bitmap8getWidthEv+0x60>)
9001725e:	f9b3 0000 	ldrsh.w	r0, [r3]
90017262:	4770      	bx	lr
90017264:	4b07      	ldr	r3, [pc, #28]	; (90017284 <_ZNK8touchgfx6Bitmap8getWidthEv+0x64>)
90017266:	e7fa      	b.n	9001725e <_ZNK8touchgfx6Bitmap8getWidthEv+0x3e>
90017268:	2000      	movs	r0, #0
9001726a:	4770      	bx	lr
9001726c:	240262e4 	.word	0x240262e4
90017270:	240262ec 	.word	0x240262ec
90017274:	240262e8 	.word	0x240262e8
90017278:	240262cc 	.word	0x240262cc
9001727c:	2402625c 	.word	0x2402625c
90017280:	2402625e 	.word	0x2402625e
90017284:	24026260 	.word	0x24026260

90017288 <_ZNK8touchgfx6Bitmap9getHeightEv>:
90017288:	4a12      	ldr	r2, [pc, #72]	; (900172d4 <_ZNK8touchgfx6Bitmap9getHeightEv+0x4c>)
9001728a:	8803      	ldrh	r3, [r0, #0]
9001728c:	8812      	ldrh	r2, [r2, #0]
9001728e:	4293      	cmp	r3, r2
90017290:	d207      	bcs.n	900172a2 <_ZNK8touchgfx6Bitmap9getHeightEv+0x1a>
90017292:	4a11      	ldr	r2, [pc, #68]	; (900172d8 <_ZNK8touchgfx6Bitmap9getHeightEv+0x50>)
90017294:	2114      	movs	r1, #20
90017296:	6812      	ldr	r2, [r2, #0]
90017298:	fb01 2303 	mla	r3, r1, r3, r2
9001729c:	f9b3 000a 	ldrsh.w	r0, [r3, #10]
900172a0:	4770      	bx	lr
900172a2:	490e      	ldr	r1, [pc, #56]	; (900172dc <_ZNK8touchgfx6Bitmap9getHeightEv+0x54>)
900172a4:	8809      	ldrh	r1, [r1, #0]
900172a6:	4411      	add	r1, r2
900172a8:	428b      	cmp	r3, r1
900172aa:	da04      	bge.n	900172b6 <_ZNK8touchgfx6Bitmap9getHeightEv+0x2e>
900172ac:	1a9b      	subs	r3, r3, r2
900172ae:	4a0c      	ldr	r2, [pc, #48]	; (900172e0 <_ZNK8touchgfx6Bitmap9getHeightEv+0x58>)
900172b0:	210e      	movs	r1, #14
900172b2:	6812      	ldr	r2, [r2, #0]
900172b4:	e7f0      	b.n	90017298 <_ZNK8touchgfx6Bitmap9getHeightEv+0x10>
900172b6:	f64f 72fe 	movw	r2, #65534	; 0xfffe
900172ba:	4293      	cmp	r3, r2
900172bc:	d108      	bne.n	900172d0 <_ZNK8touchgfx6Bitmap9getHeightEv+0x48>
900172be:	4b09      	ldr	r3, [pc, #36]	; (900172e4 <_ZNK8touchgfx6Bitmap9getHeightEv+0x5c>)
900172c0:	781b      	ldrb	r3, [r3, #0]
900172c2:	b91b      	cbnz	r3, 900172cc <_ZNK8touchgfx6Bitmap9getHeightEv+0x44>
900172c4:	4b08      	ldr	r3, [pc, #32]	; (900172e8 <_ZNK8touchgfx6Bitmap9getHeightEv+0x60>)
900172c6:	f9b3 0000 	ldrsh.w	r0, [r3]
900172ca:	4770      	bx	lr
900172cc:	4b07      	ldr	r3, [pc, #28]	; (900172ec <_ZNK8touchgfx6Bitmap9getHeightEv+0x64>)
900172ce:	e7fa      	b.n	900172c6 <_ZNK8touchgfx6Bitmap9getHeightEv+0x3e>
900172d0:	2000      	movs	r0, #0
900172d2:	4770      	bx	lr
900172d4:	240262e4 	.word	0x240262e4
900172d8:	240262ec 	.word	0x240262ec
900172dc:	240262e8 	.word	0x240262e8
900172e0:	240262cc 	.word	0x240262cc
900172e4:	2402625c 	.word	0x2402625c
900172e8:	24026260 	.word	0x24026260
900172ec:	2402625e 	.word	0x2402625e

900172f0 <_ZNK8touchgfx6Bitmap12getSolidRectEv>:
900172f0:	4a1f      	ldr	r2, [pc, #124]	; (90017370 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x80>)
900172f2:	b510      	push	{r4, lr}
900172f4:	880b      	ldrh	r3, [r1, #0]
900172f6:	8812      	ldrh	r2, [r2, #0]
900172f8:	4293      	cmp	r3, r2
900172fa:	d213      	bcs.n	90017324 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x34>
900172fc:	4a1d      	ldr	r2, [pc, #116]	; (90017374 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x84>)
900172fe:	2114      	movs	r1, #20
90017300:	6812      	ldr	r2, [r2, #0]
90017302:	fb01 2303 	mla	r3, r1, r3, r2
90017306:	f9b3 400c 	ldrsh.w	r4, [r3, #12]
9001730a:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
9001730e:	8a1a      	ldrh	r2, [r3, #16]
90017310:	8a5b      	ldrh	r3, [r3, #18]
90017312:	f3c2 020c 	ubfx	r2, r2, #0, #13
90017316:	8004      	strh	r4, [r0, #0]
90017318:	f3c3 030c 	ubfx	r3, r3, #0, #13
9001731c:	8041      	strh	r1, [r0, #2]
9001731e:	8082      	strh	r2, [r0, #4]
90017320:	80c3      	strh	r3, [r0, #6]
90017322:	e00e      	b.n	90017342 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x52>
90017324:	4914      	ldr	r1, [pc, #80]	; (90017378 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x88>)
90017326:	8809      	ldrh	r1, [r1, #0]
90017328:	4411      	add	r1, r2
9001732a:	428b      	cmp	r3, r1
9001732c:	da0a      	bge.n	90017344 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x54>
9001732e:	1a9b      	subs	r3, r3, r2
90017330:	4a12      	ldr	r2, [pc, #72]	; (9001737c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x8c>)
90017332:	210e      	movs	r1, #14
90017334:	6812      	ldr	r2, [r2, #0]
90017336:	fb01 2303 	mla	r3, r1, r3, r2
9001733a:	681a      	ldr	r2, [r3, #0]
9001733c:	6002      	str	r2, [r0, #0]
9001733e:	685a      	ldr	r2, [r3, #4]
90017340:	6042      	str	r2, [r0, #4]
90017342:	bd10      	pop	{r4, pc}
90017344:	f64f 72fe 	movw	r2, #65534	; 0xfffe
90017348:	4293      	cmp	r3, r2
9001734a:	d10b      	bne.n	90017364 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x74>
9001734c:	4b0c      	ldr	r3, [pc, #48]	; (90017380 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x90>)
9001734e:	f9b3 1000 	ldrsh.w	r1, [r3]
90017352:	4b0c      	ldr	r3, [pc, #48]	; (90017384 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x94>)
90017354:	8081      	strh	r1, [r0, #4]
90017356:	f9b3 2000 	ldrsh.w	r2, [r3]
9001735a:	2300      	movs	r3, #0
9001735c:	80c2      	strh	r2, [r0, #6]
9001735e:	8003      	strh	r3, [r0, #0]
90017360:	8043      	strh	r3, [r0, #2]
90017362:	e7ee      	b.n	90017342 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x52>
90017364:	2300      	movs	r3, #0
90017366:	8003      	strh	r3, [r0, #0]
90017368:	8043      	strh	r3, [r0, #2]
9001736a:	8083      	strh	r3, [r0, #4]
9001736c:	e7d8      	b.n	90017320 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x30>
9001736e:	bf00      	nop
90017370:	240262e4 	.word	0x240262e4
90017374:	240262ec 	.word	0x240262ec
90017378:	240262e8 	.word	0x240262e8
9001737c:	240262cc 	.word	0x240262cc
90017380:	24026258 	.word	0x24026258
90017384:	2402625a 	.word	0x2402625a

90017388 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>:
90017388:	4a17      	ldr	r2, [pc, #92]	; (900173e8 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x60>)
9001738a:	8803      	ldrh	r3, [r0, #0]
9001738c:	8812      	ldrh	r2, [r2, #0]
9001738e:	4293      	cmp	r3, r2
90017390:	d213      	bcs.n	900173ba <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x32>
90017392:	4a16      	ldr	r2, [pc, #88]	; (900173ec <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x64>)
90017394:	2114      	movs	r1, #20
90017396:	6812      	ldr	r2, [r2, #0]
90017398:	fb01 2303 	mla	r3, r1, r3, r2
9001739c:	8a1a      	ldrh	r2, [r3, #16]
9001739e:	8919      	ldrh	r1, [r3, #8]
900173a0:	f3c2 020c 	ubfx	r2, r2, #0, #13
900173a4:	428a      	cmp	r2, r1
900173a6:	db1d      	blt.n	900173e4 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5c>
900173a8:	8a58      	ldrh	r0, [r3, #18]
900173aa:	f3c0 000c 	ubfx	r0, r0, #0, #13
900173ae:	895b      	ldrh	r3, [r3, #10]
900173b0:	4298      	cmp	r0, r3
900173b2:	bfac      	ite	ge
900173b4:	2000      	movge	r0, #0
900173b6:	2001      	movlt	r0, #1
900173b8:	4770      	bx	lr
900173ba:	490d      	ldr	r1, [pc, #52]	; (900173f0 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x68>)
900173bc:	8809      	ldrh	r1, [r1, #0]
900173be:	4411      	add	r1, r2
900173c0:	428b      	cmp	r3, r1
900173c2:	da0d      	bge.n	900173e0 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x58>
900173c4:	1a9b      	subs	r3, r3, r2
900173c6:	4a0b      	ldr	r2, [pc, #44]	; (900173f4 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x6c>)
900173c8:	210e      	movs	r1, #14
900173ca:	6812      	ldr	r2, [r2, #0]
900173cc:	fb01 2303 	mla	r3, r1, r3, r2
900173d0:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
900173d4:	891a      	ldrh	r2, [r3, #8]
900173d6:	4291      	cmp	r1, r2
900173d8:	db04      	blt.n	900173e4 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5c>
900173da:	f9b3 0006 	ldrsh.w	r0, [r3, #6]
900173de:	e7e6      	b.n	900173ae <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x26>
900173e0:	2000      	movs	r0, #0
900173e2:	4770      	bx	lr
900173e4:	2001      	movs	r0, #1
900173e6:	4770      	bx	lr
900173e8:	240262e4 	.word	0x240262e4
900173ec:	240262ec 	.word	0x240262ec
900173f0:	240262e8 	.word	0x240262e8
900173f4:	240262cc 	.word	0x240262cc

900173f8 <_ZNK8touchgfx6Bitmap7getDataEv>:
900173f8:	4a12      	ldr	r2, [pc, #72]	; (90017444 <_ZNK8touchgfx6Bitmap7getDataEv+0x4c>)
900173fa:	8803      	ldrh	r3, [r0, #0]
900173fc:	8811      	ldrh	r1, [r2, #0]
900173fe:	428b      	cmp	r3, r1
90017400:	d20b      	bcs.n	9001741a <_ZNK8touchgfx6Bitmap7getDataEv+0x22>
90017402:	4a11      	ldr	r2, [pc, #68]	; (90017448 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
90017404:	6812      	ldr	r2, [r2, #0]
90017406:	b112      	cbz	r2, 9001740e <_ZNK8touchgfx6Bitmap7getDataEv+0x16>
90017408:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
9001740c:	b9c0      	cbnz	r0, 90017440 <_ZNK8touchgfx6Bitmap7getDataEv+0x48>
9001740e:	4a0f      	ldr	r2, [pc, #60]	; (9001744c <_ZNK8touchgfx6Bitmap7getDataEv+0x54>)
90017410:	6811      	ldr	r1, [r2, #0]
90017412:	2214      	movs	r2, #20
90017414:	4353      	muls	r3, r2
90017416:	58c8      	ldr	r0, [r1, r3]
90017418:	4770      	bx	lr
9001741a:	4a0d      	ldr	r2, [pc, #52]	; (90017450 <_ZNK8touchgfx6Bitmap7getDataEv+0x58>)
9001741c:	8812      	ldrh	r2, [r2, #0]
9001741e:	440a      	add	r2, r1
90017420:	4293      	cmp	r3, r2
90017422:	da04      	bge.n	9001742e <_ZNK8touchgfx6Bitmap7getDataEv+0x36>
90017424:	4a08      	ldr	r2, [pc, #32]	; (90017448 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
90017426:	6812      	ldr	r2, [r2, #0]
90017428:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
9001742c:	4770      	bx	lr
9001742e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
90017432:	4293      	cmp	r3, r2
90017434:	d103      	bne.n	9001743e <_ZNK8touchgfx6Bitmap7getDataEv+0x46>
90017436:	4b07      	ldr	r3, [pc, #28]	; (90017454 <_ZNK8touchgfx6Bitmap7getDataEv+0x5c>)
90017438:	681b      	ldr	r3, [r3, #0]
9001743a:	6c58      	ldr	r0, [r3, #68]	; 0x44
9001743c:	4770      	bx	lr
9001743e:	2000      	movs	r0, #0
90017440:	4770      	bx	lr
90017442:	bf00      	nop
90017444:	240262e4 	.word	0x240262e4
90017448:	240262c8 	.word	0x240262c8
9001744c:	240262ec 	.word	0x240262ec
90017450:	240262e8 	.word	0x240262e8
90017454:	24026264 	.word	0x24026264

90017458 <_ZNK8touchgfx6Bitmap12getExtraDataEv>:
90017458:	4b24      	ldr	r3, [pc, #144]	; (900174ec <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x94>)
9001745a:	8802      	ldrh	r2, [r0, #0]
9001745c:	8818      	ldrh	r0, [r3, #0]
9001745e:	4282      	cmp	r2, r0
90017460:	d221      	bcs.n	900174a6 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x4e>
90017462:	4b23      	ldr	r3, [pc, #140]	; (900174f0 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>)
90017464:	6819      	ldr	r1, [r3, #0]
90017466:	2314      	movs	r3, #20
90017468:	fb03 1302 	mla	r3, r3, r2, r1
9001746c:	6858      	ldr	r0, [r3, #4]
9001746e:	2800      	cmp	r0, #0
90017470:	d03a      	beq.n	900174e8 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
90017472:	4920      	ldr	r1, [pc, #128]	; (900174f4 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
90017474:	6809      	ldr	r1, [r1, #0]
90017476:	2900      	cmp	r1, #0
90017478:	d036      	beq.n	900174e8 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
9001747a:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
9001747e:	2900      	cmp	r1, #0
90017480:	d032      	beq.n	900174e8 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
90017482:	891a      	ldrh	r2, [r3, #8]
90017484:	8958      	ldrh	r0, [r3, #10]
90017486:	4350      	muls	r0, r2
90017488:	7c5a      	ldrb	r2, [r3, #17]
9001748a:	7cdb      	ldrb	r3, [r3, #19]
9001748c:	0952      	lsrs	r2, r2, #5
9001748e:	f3c3 1342 	ubfx	r3, r3, #5, #3
90017492:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
90017496:	2b0b      	cmp	r3, #11
90017498:	bf18      	it	ne
9001749a:	0040      	lslne	r0, r0, #1
9001749c:	3003      	adds	r0, #3
9001749e:	f020 0003 	bic.w	r0, r0, #3
900174a2:	4408      	add	r0, r1
900174a4:	4770      	bx	lr
900174a6:	4b14      	ldr	r3, [pc, #80]	; (900174f8 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa0>)
900174a8:	881b      	ldrh	r3, [r3, #0]
900174aa:	4403      	add	r3, r0
900174ac:	429a      	cmp	r2, r3
900174ae:	da1a      	bge.n	900174e6 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
900174b0:	4b12      	ldr	r3, [pc, #72]	; (900174fc <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa4>)
900174b2:	1a10      	subs	r0, r2, r0
900174b4:	210e      	movs	r1, #14
900174b6:	681b      	ldr	r3, [r3, #0]
900174b8:	fb01 3000 	mla	r0, r1, r0, r3
900174bc:	7b03      	ldrb	r3, [r0, #12]
900174be:	f003 031f 	and.w	r3, r3, #31
900174c2:	2b0b      	cmp	r3, #11
900174c4:	d10b      	bne.n	900174de <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x86>
900174c6:	8903      	ldrh	r3, [r0, #8]
900174c8:	8940      	ldrh	r0, [r0, #10]
900174ca:	4358      	muls	r0, r3
900174cc:	4b09      	ldr	r3, [pc, #36]	; (900174f4 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
900174ce:	3003      	adds	r0, #3
900174d0:	6819      	ldr	r1, [r3, #0]
900174d2:	f020 0303 	bic.w	r3, r0, #3
900174d6:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
900174da:	4418      	add	r0, r3
900174dc:	4770      	bx	lr
900174de:	2b0d      	cmp	r3, #13
900174e0:	d101      	bne.n	900174e6 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
900174e2:	300d      	adds	r0, #13
900174e4:	4770      	bx	lr
900174e6:	2000      	movs	r0, #0
900174e8:	4770      	bx	lr
900174ea:	bf00      	nop
900174ec:	240262e4 	.word	0x240262e4
900174f0:	240262ec 	.word	0x240262ec
900174f4:	240262c8 	.word	0x240262c8
900174f8:	240262e8 	.word	0x240262e8
900174fc:	240262cc 	.word	0x240262cc

90017500 <_ZNK8touchgfx6Bitmap9getFormatEv>:
90017500:	4a17      	ldr	r2, [pc, #92]	; (90017560 <_ZNK8touchgfx6Bitmap9getFormatEv+0x60>)
90017502:	b510      	push	{r4, lr}
90017504:	8803      	ldrh	r3, [r0, #0]
90017506:	8812      	ldrh	r2, [r2, #0]
90017508:	4293      	cmp	r3, r2
9001750a:	d20c      	bcs.n	90017526 <_ZNK8touchgfx6Bitmap9getFormatEv+0x26>
9001750c:	4a15      	ldr	r2, [pc, #84]	; (90017564 <_ZNK8touchgfx6Bitmap9getFormatEv+0x64>)
9001750e:	2114      	movs	r1, #20
90017510:	6812      	ldr	r2, [r2, #0]
90017512:	fb01 2303 	mla	r3, r1, r3, r2
90017516:	7c58      	ldrb	r0, [r3, #17]
90017518:	0942      	lsrs	r2, r0, #5
9001751a:	7cd8      	ldrb	r0, [r3, #19]
9001751c:	f3c0 1042 	ubfx	r0, r0, #5, #3
90017520:	ea40 00c2 	orr.w	r0, r0, r2, lsl #3
90017524:	bd10      	pop	{r4, pc}
90017526:	4910      	ldr	r1, [pc, #64]	; (90017568 <_ZNK8touchgfx6Bitmap9getFormatEv+0x68>)
90017528:	8809      	ldrh	r1, [r1, #0]
9001752a:	4411      	add	r1, r2
9001752c:	428b      	cmp	r3, r1
9001752e:	da09      	bge.n	90017544 <_ZNK8touchgfx6Bitmap9getFormatEv+0x44>
90017530:	1a9b      	subs	r3, r3, r2
90017532:	4a0e      	ldr	r2, [pc, #56]	; (9001756c <_ZNK8touchgfx6Bitmap9getFormatEv+0x6c>)
90017534:	210e      	movs	r1, #14
90017536:	6812      	ldr	r2, [r2, #0]
90017538:	fb01 2303 	mla	r3, r1, r3, r2
9001753c:	7b18      	ldrb	r0, [r3, #12]
9001753e:	f000 001f 	and.w	r0, r0, #31
90017542:	e7ef      	b.n	90017524 <_ZNK8touchgfx6Bitmap9getFormatEv+0x24>
90017544:	f64f 72fe 	movw	r2, #65534	; 0xfffe
90017548:	4293      	cmp	r3, r2
9001754a:	d106      	bne.n	9001755a <_ZNK8touchgfx6Bitmap9getFormatEv+0x5a>
9001754c:	f7fa fa20 	bl	90011990 <_ZN8touchgfx3HAL3lcdEv>
90017550:	6803      	ldr	r3, [r0, #0]
90017552:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
90017556:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90017558:	4718      	bx	r3
9001755a:	2000      	movs	r0, #0
9001755c:	e7e2      	b.n	90017524 <_ZNK8touchgfx6Bitmap9getFormatEv+0x24>
9001755e:	bf00      	nop
90017560:	240262e4 	.word	0x240262e4
90017564:	240262ec 	.word	0x240262ec
90017568:	240262e8 	.word	0x240262e8
9001756c:	240262cc 	.word	0x240262cc

90017570 <_ZNK8touchgfx8LCD16bpp8bitDepthEv>:
90017570:	2010      	movs	r0, #16
90017572:	4770      	bx	lr

90017574 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv>:
90017574:	4b02      	ldr	r3, [pc, #8]	; (90017580 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0xc>)
90017576:	8818      	ldrh	r0, [r3, #0]
90017578:	0040      	lsls	r0, r0, #1
9001757a:	b280      	uxth	r0, r0
9001757c:	4770      	bx	lr
9001757e:	bf00      	nop
90017580:	2402625e 	.word	0x2402625e

90017584 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
90017584:	2bff      	cmp	r3, #255	; 0xff
90017586:	d050      	beq.n	9001762a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa6>
90017588:	2a0b      	cmp	r2, #11
9001758a:	d04a      	beq.n	90017622 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
9001758c:	d80e      	bhi.n	900175ac <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x28>
9001758e:	2a03      	cmp	r2, #3
90017590:	d03f      	beq.n	90017612 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8e>
90017592:	d804      	bhi.n	9001759e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
90017594:	2a01      	cmp	r2, #1
90017596:	d03e      	beq.n	90017616 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x92>
90017598:	d93f      	bls.n	9001761a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x96>
9001759a:	6b80      	ldr	r0, [r0, #56]	; 0x38
9001759c:	4770      	bx	lr
9001759e:	2a09      	cmp	r2, #9
900175a0:	d03f      	beq.n	90017622 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
900175a2:	d83c      	bhi.n	9001761e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
900175a4:	2a08      	cmp	r2, #8
900175a6:	d03a      	beq.n	9001761e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
900175a8:	2000      	movs	r0, #0
900175aa:	4770      	bx	lr
900175ac:	2a2f      	cmp	r2, #47	; 0x2f
900175ae:	d024      	beq.n	900175fa <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x76>
900175b0:	d80d      	bhi.n	900175ce <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x4a>
900175b2:	2a2d      	cmp	r2, #45	; 0x2d
900175b4:	d014      	beq.n	900175e0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x5c>
900175b6:	d826      	bhi.n	90017606 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x82>
900175b8:	2a2c      	cmp	r2, #44	; 0x2c
900175ba:	d1f5      	bne.n	900175a8 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
900175bc:	684b      	ldr	r3, [r1, #4]
900175be:	781b      	ldrb	r3, [r3, #0]
900175c0:	2b01      	cmp	r3, #1
900175c2:	d018      	beq.n	900175f6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x72>
900175c4:	d323      	bcc.n	9001760e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8a>
900175c6:	2b02      	cmp	r3, #2
900175c8:	d1ee      	bne.n	900175a8 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
900175ca:	6880      	ldr	r0, [r0, #8]
900175cc:	4770      	bx	lr
900175ce:	2a31      	cmp	r2, #49	; 0x31
900175d0:	d004      	beq.n	900175dc <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x58>
900175d2:	d328      	bcc.n	90017626 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
900175d4:	2a32      	cmp	r2, #50	; 0x32
900175d6:	d026      	beq.n	90017626 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
900175d8:	2a33      	cmp	r2, #51	; 0x33
900175da:	d1e5      	bne.n	900175a8 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
900175dc:	6f00      	ldr	r0, [r0, #112]	; 0x70
900175de:	4770      	bx	lr
900175e0:	684b      	ldr	r3, [r1, #4]
900175e2:	781b      	ldrb	r3, [r3, #0]
900175e4:	2b01      	cmp	r3, #1
900175e6:	d004      	beq.n	900175f2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
900175e8:	d30b      	bcc.n	90017602 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
900175ea:	2b02      	cmp	r3, #2
900175ec:	d1dc      	bne.n	900175a8 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
900175ee:	6900      	ldr	r0, [r0, #16]
900175f0:	4770      	bx	lr
900175f2:	6a00      	ldr	r0, [r0, #32]
900175f4:	4770      	bx	lr
900175f6:	6980      	ldr	r0, [r0, #24]
900175f8:	4770      	bx	lr
900175fa:	684b      	ldr	r3, [r1, #4]
900175fc:	781b      	ldrb	r3, [r3, #0]
900175fe:	2b00      	cmp	r3, #0
90017600:	d1d2      	bne.n	900175a8 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
90017602:	6b00      	ldr	r0, [r0, #48]	; 0x30
90017604:	4770      	bx	lr
90017606:	684b      	ldr	r3, [r1, #4]
90017608:	781b      	ldrb	r3, [r3, #0]
9001760a:	2b00      	cmp	r3, #0
9001760c:	d1cc      	bne.n	900175a8 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
9001760e:	6a80      	ldr	r0, [r0, #40]	; 0x28
90017610:	4770      	bx	lr
90017612:	6c80      	ldr	r0, [r0, #72]	; 0x48
90017614:	4770      	bx	lr
90017616:	6d00      	ldr	r0, [r0, #80]	; 0x50
90017618:	4770      	bx	lr
9001761a:	6c00      	ldr	r0, [r0, #64]	; 0x40
9001761c:	4770      	bx	lr
9001761e:	6d80      	ldr	r0, [r0, #88]	; 0x58
90017620:	4770      	bx	lr
90017622:	6e00      	ldr	r0, [r0, #96]	; 0x60
90017624:	4770      	bx	lr
90017626:	6e80      	ldr	r0, [r0, #104]	; 0x68
90017628:	4770      	bx	lr
9001762a:	2a0b      	cmp	r2, #11
9001762c:	d049      	beq.n	900176c2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
9001762e:	d80e      	bhi.n	9001764e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xca>
90017630:	2a03      	cmp	r2, #3
90017632:	d040      	beq.n	900176b6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x132>
90017634:	d804      	bhi.n	90017640 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xbc>
90017636:	2a01      	cmp	r2, #1
90017638:	d03f      	beq.n	900176ba <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x136>
9001763a:	d940      	bls.n	900176be <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13a>
9001763c:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
9001763e:	4770      	bx	lr
90017640:	2a09      	cmp	r2, #9
90017642:	d03e      	beq.n	900176c2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
90017644:	d801      	bhi.n	9001764a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc6>
90017646:	2a08      	cmp	r2, #8
90017648:	d1ae      	bne.n	900175a8 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
9001764a:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
9001764c:	4770      	bx	lr
9001764e:	2a2f      	cmp	r2, #47	; 0x2f
90017650:	d024      	beq.n	9001769c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x118>
90017652:	d80d      	bhi.n	90017670 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xec>
90017654:	2a2d      	cmp	r2, #45	; 0x2d
90017656:	d014      	beq.n	90017682 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xfe>
90017658:	d826      	bhi.n	900176a8 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x124>
9001765a:	2a2c      	cmp	r2, #44	; 0x2c
9001765c:	d1a4      	bne.n	900175a8 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
9001765e:	684b      	ldr	r3, [r1, #4]
90017660:	781b      	ldrb	r3, [r3, #0]
90017662:	2b01      	cmp	r3, #1
90017664:	d018      	beq.n	90017698 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x114>
90017666:	d324      	bcc.n	900176b2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x12e>
90017668:	2b02      	cmp	r3, #2
9001766a:	d19d      	bne.n	900175a8 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
9001766c:	68c0      	ldr	r0, [r0, #12]
9001766e:	4770      	bx	lr
90017670:	2a31      	cmp	r2, #49	; 0x31
90017672:	d004      	beq.n	9001767e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xfa>
90017674:	d327      	bcc.n	900176c6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x142>
90017676:	2a32      	cmp	r2, #50	; 0x32
90017678:	d025      	beq.n	900176c6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x142>
9001767a:	2a33      	cmp	r2, #51	; 0x33
9001767c:	d194      	bne.n	900175a8 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
9001767e:	6f40      	ldr	r0, [r0, #116]	; 0x74
90017680:	4770      	bx	lr
90017682:	684b      	ldr	r3, [r1, #4]
90017684:	781b      	ldrb	r3, [r3, #0]
90017686:	2b01      	cmp	r3, #1
90017688:	d004      	beq.n	90017694 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x110>
9001768a:	d30b      	bcc.n	900176a4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x120>
9001768c:	2b02      	cmp	r3, #2
9001768e:	d18b      	bne.n	900175a8 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
90017690:	6940      	ldr	r0, [r0, #20]
90017692:	4770      	bx	lr
90017694:	6a40      	ldr	r0, [r0, #36]	; 0x24
90017696:	4770      	bx	lr
90017698:	69c0      	ldr	r0, [r0, #28]
9001769a:	4770      	bx	lr
9001769c:	684b      	ldr	r3, [r1, #4]
9001769e:	781b      	ldrb	r3, [r3, #0]
900176a0:	2b00      	cmp	r3, #0
900176a2:	d181      	bne.n	900175a8 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
900176a4:	6b40      	ldr	r0, [r0, #52]	; 0x34
900176a6:	4770      	bx	lr
900176a8:	684b      	ldr	r3, [r1, #4]
900176aa:	781b      	ldrb	r3, [r3, #0]
900176ac:	2b00      	cmp	r3, #0
900176ae:	f47f af7b 	bne.w	900175a8 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
900176b2:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
900176b4:	4770      	bx	lr
900176b6:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
900176b8:	4770      	bx	lr
900176ba:	6d40      	ldr	r0, [r0, #84]	; 0x54
900176bc:	4770      	bx	lr
900176be:	6c40      	ldr	r0, [r0, #68]	; 0x44
900176c0:	4770      	bx	lr
900176c2:	6e40      	ldr	r0, [r0, #100]	; 0x64
900176c4:	4770      	bx	lr
900176c6:	6ec0      	ldr	r0, [r0, #108]	; 0x6c
900176c8:	4770      	bx	lr

900176ca <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
900176ca:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
900176ce:	b087      	sub	sp, #28
900176d0:	9815      	ldr	r0, [sp, #84]	; 0x54
900176d2:	9205      	str	r2, [sp, #20]
900176d4:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
900176d8:	9101      	str	r1, [sp, #4]
900176da:	9202      	str	r2, [sp, #8]
900176dc:	6841      	ldr	r1, [r0, #4]
900176de:	f8dd e060 	ldr.w	lr, [sp, #96]	; 0x60
900176e2:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
900176e6:	fb01 2404 	mla	r4, r1, r4, r2
900176ea:	6802      	ldr	r2, [r0, #0]
900176ec:	eb02 0444 	add.w	r4, r2, r4, lsl #1
900176f0:	f8de 2000 	ldr.w	r2, [lr]
900176f4:	9203      	str	r2, [sp, #12]
900176f6:	f8de 2004 	ldr.w	r2, [lr, #4]
900176fa:	3204      	adds	r2, #4
900176fc:	9204      	str	r2, [sp, #16]
900176fe:	9a02      	ldr	r2, [sp, #8]
90017700:	43d6      	mvns	r6, r2
90017702:	b2f6      	uxtb	r6, r6
90017704:	9a01      	ldr	r2, [sp, #4]
90017706:	2a00      	cmp	r2, #0
90017708:	dc03      	bgt.n	90017712 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
9001770a:	9a05      	ldr	r2, [sp, #20]
9001770c:	2a00      	cmp	r2, #0
9001770e:	f340 8129 	ble.w	90017964 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
90017712:	9a11      	ldr	r2, [sp, #68]	; 0x44
90017714:	f9be c008 	ldrsh.w	ip, [lr, #8]
90017718:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
9001771c:	9a12      	ldr	r2, [sp, #72]	; 0x48
9001771e:	f9be 700c 	ldrsh.w	r7, [lr, #12]
90017722:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
90017726:	2b00      	cmp	r3, #0
90017728:	dd0e      	ble.n	90017748 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
9001772a:	1408      	asrs	r0, r1, #16
9001772c:	d405      	bmi.n	9001773a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
9001772e:	4560      	cmp	r0, ip
90017730:	da03      	bge.n	9001773a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
90017732:	1410      	asrs	r0, r2, #16
90017734:	d401      	bmi.n	9001773a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
90017736:	42b8      	cmp	r0, r7
90017738:	db07      	blt.n	9001774a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
9001773a:	9813      	ldr	r0, [sp, #76]	; 0x4c
9001773c:	3b01      	subs	r3, #1
9001773e:	3402      	adds	r4, #2
90017740:	4401      	add	r1, r0
90017742:	9814      	ldr	r0, [sp, #80]	; 0x50
90017744:	4402      	add	r2, r0
90017746:	e7ee      	b.n	90017726 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
90017748:	d071      	beq.n	9001782e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
9001774a:	1e58      	subs	r0, r3, #1
9001774c:	9d13      	ldr	r5, [sp, #76]	; 0x4c
9001774e:	fb05 1500 	mla	r5, r5, r0, r1
90017752:	142d      	asrs	r5, r5, #16
90017754:	d45f      	bmi.n	90017816 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
90017756:	4565      	cmp	r5, ip
90017758:	da5d      	bge.n	90017816 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
9001775a:	9d14      	ldr	r5, [sp, #80]	; 0x50
9001775c:	fb05 2000 	mla	r0, r5, r0, r2
90017760:	1400      	asrs	r0, r0, #16
90017762:	d458      	bmi.n	90017816 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
90017764:	42b8      	cmp	r0, r7
90017766:	da56      	bge.n	90017816 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
90017768:	4699      	mov	r9, r3
9001776a:	46a2      	mov	sl, r4
9001776c:	f8bd b008 	ldrh.w	fp, [sp, #8]
90017770:	f1b9 0f00 	cmp.w	r9, #0
90017774:	dd57      	ble.n	90017826 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15c>
90017776:	ea4f 4c22 	mov.w	ip, r2, asr #16
9001777a:	f9be 7008 	ldrsh.w	r7, [lr, #8]
9001777e:	9803      	ldr	r0, [sp, #12]
90017780:	140d      	asrs	r5, r1, #16
90017782:	f109 39ff 	add.w	r9, r9, #4294967295
90017786:	fb07 000c 	mla	r0, r7, ip, r0
9001778a:	5d40      	ldrb	r0, [r0, r5]
9001778c:	9d04      	ldr	r5, [sp, #16]
9001778e:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
90017792:	f8ba 5000 	ldrh.w	r5, [sl]
90017796:	ea4f 2c20 	mov.w	ip, r0, asr #8
9001779a:	122f      	asrs	r7, r5, #8
9001779c:	ea4f 08e5 	mov.w	r8, r5, asr #3
900177a0:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
900177a4:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
900177a8:	00ed      	lsls	r5, r5, #3
900177aa:	f008 08fc 	and.w	r8, r8, #252	; 0xfc
900177ae:	fb17 f706 	smulbb	r7, r7, r6
900177b2:	b2ed      	uxtb	r5, r5
900177b4:	fb18 f806 	smulbb	r8, r8, r6
900177b8:	fb0c 7c0b 	mla	ip, ip, fp, r7
900177bc:	10c7      	asrs	r7, r0, #3
900177be:	fb15 f506 	smulbb	r5, r5, r6
900177c2:	00c0      	lsls	r0, r0, #3
900177c4:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
900177c8:	fa1f fc8c 	uxth.w	ip, ip
900177cc:	b2c0      	uxtb	r0, r0
900177ce:	fb07 870b 	mla	r7, r7, fp, r8
900177d2:	fb00 500b 	mla	r0, r0, fp, r5
900177d6:	f10c 0501 	add.w	r5, ip, #1
900177da:	b2bf      	uxth	r7, r7
900177dc:	b280      	uxth	r0, r0
900177de:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
900177e2:	f107 0801 	add.w	r8, r7, #1
900177e6:	1c45      	adds	r5, r0, #1
900177e8:	eb08 2817 	add.w	r8, r8, r7, lsr #8
900177ec:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
900177f0:	eb05 2510 	add.w	r5, r5, r0, lsr #8
900177f4:	9813      	ldr	r0, [sp, #76]	; 0x4c
900177f6:	ea4f 1858 	mov.w	r8, r8, lsr #5
900177fa:	f3c5 25c4 	ubfx	r5, r5, #11, #5
900177fe:	4401      	add	r1, r0
90017800:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
90017804:	9814      	ldr	r0, [sp, #80]	; 0x50
90017806:	ea45 0c0c 	orr.w	ip, r5, ip
9001780a:	4402      	add	r2, r0
9001780c:	ea4c 0c08 	orr.w	ip, ip, r8
90017810:	f82a cb02 	strh.w	ip, [sl], #2
90017814:	e7ac      	b.n	90017770 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
90017816:	f04f 0800 	mov.w	r8, #0
9001781a:	f8bd a008 	ldrh.w	sl, [sp, #8]
9001781e:	eb03 0008 	add.w	r0, r3, r8
90017822:	2800      	cmp	r0, #0
90017824:	dc41      	bgt.n	900178aa <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
90017826:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
9001782a:	eb04 0443 	add.w	r4, r4, r3, lsl #1
9001782e:	9b01      	ldr	r3, [sp, #4]
90017830:	2b00      	cmp	r3, #0
90017832:	f340 8097 	ble.w	90017964 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
90017836:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
9001783a:	9b10      	ldr	r3, [sp, #64]	; 0x40
9001783c:	ee30 0a04 	vadd.f32	s0, s0, s8
90017840:	ee70 0aa4 	vadd.f32	s1, s1, s9
90017844:	eef0 6a62 	vmov.f32	s13, s5
90017848:	eec7 7a00 	vdiv.f32	s15, s14, s0
9001784c:	ee31 1a05 	vadd.f32	s2, s2, s10
90017850:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
90017854:	edcd 6a11 	vstr	s13, [sp, #68]	; 0x44
90017858:	eef0 6a43 	vmov.f32	s13, s6
9001785c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
90017860:	edcd 6a12 	vstr	s13, [sp, #72]	; 0x48
90017864:	ee20 7aa7 	vmul.f32	s14, s1, s15
90017868:	ee61 7a27 	vmul.f32	s15, s2, s15
9001786c:	ee77 2a62 	vsub.f32	s5, s14, s5
90017870:	ee37 3ac3 	vsub.f32	s6, s15, s6
90017874:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
90017878:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
9001787c:	ee12 2a90 	vmov	r2, s5
90017880:	eef0 2a47 	vmov.f32	s5, s14
90017884:	fb92 f3f3 	sdiv	r3, r2, r3
90017888:	ee13 2a10 	vmov	r2, s6
9001788c:	9313      	str	r3, [sp, #76]	; 0x4c
9001788e:	9b10      	ldr	r3, [sp, #64]	; 0x40
90017890:	eeb0 3a67 	vmov.f32	s6, s15
90017894:	fb92 f3f3 	sdiv	r3, r2, r3
90017898:	9314      	str	r3, [sp, #80]	; 0x50
9001789a:	9b01      	ldr	r3, [sp, #4]
9001789c:	9a05      	ldr	r2, [sp, #20]
9001789e:	3b01      	subs	r3, #1
900178a0:	9301      	str	r3, [sp, #4]
900178a2:	9b10      	ldr	r3, [sp, #64]	; 0x40
900178a4:	bf08      	it	eq
900178a6:	4613      	moveq	r3, r2
900178a8:	e72c      	b.n	90017704 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
900178aa:	140f      	asrs	r7, r1, #16
900178ac:	d453      	bmi.n	90017956 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
900178ae:	f8de 5008 	ldr.w	r5, [lr, #8]
900178b2:	42bd      	cmp	r5, r7
900178b4:	dd4f      	ble.n	90017956 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
900178b6:	ea5f 4c22 	movs.w	ip, r2, asr #16
900178ba:	d44c      	bmi.n	90017956 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
900178bc:	f8de 000c 	ldr.w	r0, [lr, #12]
900178c0:	4560      	cmp	r0, ip
900178c2:	dd48      	ble.n	90017956 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
900178c4:	9803      	ldr	r0, [sp, #12]
900178c6:	b22d      	sxth	r5, r5
900178c8:	fb0c 0505 	mla	r5, ip, r5, r0
900178cc:	5de8      	ldrb	r0, [r5, r7]
900178ce:	9d04      	ldr	r5, [sp, #16]
900178d0:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
900178d4:	f06f 0501 	mvn.w	r5, #1
900178d8:	fb05 fb08 	mul.w	fp, r5, r8
900178dc:	ea4f 2c20 	mov.w	ip, r0, asr #8
900178e0:	f834 500b 	ldrh.w	r5, [r4, fp]
900178e4:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
900178e8:	122f      	asrs	r7, r5, #8
900178ea:	ea4f 09e5 	mov.w	r9, r5, asr #3
900178ee:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
900178f2:	00ed      	lsls	r5, r5, #3
900178f4:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
900178f8:	fb17 f706 	smulbb	r7, r7, r6
900178fc:	b2ed      	uxtb	r5, r5
900178fe:	fb19 f906 	smulbb	r9, r9, r6
90017902:	fb0c 7c0a 	mla	ip, ip, sl, r7
90017906:	10c7      	asrs	r7, r0, #3
90017908:	fb15 f506 	smulbb	r5, r5, r6
9001790c:	00c0      	lsls	r0, r0, #3
9001790e:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
90017912:	fa1f fc8c 	uxth.w	ip, ip
90017916:	b2c0      	uxtb	r0, r0
90017918:	fb07 970a 	mla	r7, r7, sl, r9
9001791c:	fb00 500a 	mla	r0, r0, sl, r5
90017920:	f10c 0501 	add.w	r5, ip, #1
90017924:	b2bf      	uxth	r7, r7
90017926:	b280      	uxth	r0, r0
90017928:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
9001792c:	f107 0901 	add.w	r9, r7, #1
90017930:	1c45      	adds	r5, r0, #1
90017932:	eb09 2917 	add.w	r9, r9, r7, lsr #8
90017936:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
9001793a:	eb05 2510 	add.w	r5, r5, r0, lsr #8
9001793e:	ea4f 1959 	mov.w	r9, r9, lsr #5
90017942:	f3c5 25c4 	ubfx	r5, r5, #11, #5
90017946:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
9001794a:	ea45 0c0c 	orr.w	ip, r5, ip
9001794e:	ea4c 0c09 	orr.w	ip, ip, r9
90017952:	f824 c00b 	strh.w	ip, [r4, fp]
90017956:	9813      	ldr	r0, [sp, #76]	; 0x4c
90017958:	f108 38ff 	add.w	r8, r8, #4294967295
9001795c:	4401      	add	r1, r0
9001795e:	9814      	ldr	r0, [sp, #80]	; 0x50
90017960:	4402      	add	r2, r0
90017962:	e75c      	b.n	9001781e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
90017964:	b007      	add	sp, #28
90017966:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

9001796a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
9001796a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001796e:	b085      	sub	sp, #20
90017970:	4693      	mov	fp, r2
90017972:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
90017976:	9e13      	ldr	r6, [sp, #76]	; 0x4c
90017978:	9d16      	ldr	r5, [sp, #88]	; 0x58
9001797a:	6870      	ldr	r0, [r6, #4]
9001797c:	9100      	str	r1, [sp, #0]
9001797e:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
90017982:	e9dd ec11 	ldrd	lr, ip, [sp, #68]	; 0x44
90017986:	fb00 2404 	mla	r4, r0, r4, r2
9001798a:	6832      	ldr	r2, [r6, #0]
9001798c:	eb02 0444 	add.w	r4, r2, r4, lsl #1
90017990:	682a      	ldr	r2, [r5, #0]
90017992:	9201      	str	r2, [sp, #4]
90017994:	686a      	ldr	r2, [r5, #4]
90017996:	3204      	adds	r2, #4
90017998:	9202      	str	r2, [sp, #8]
9001799a:	9a00      	ldr	r2, [sp, #0]
9001799c:	2a00      	cmp	r2, #0
9001799e:	dc03      	bgt.n	900179a8 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
900179a0:	f1bb 0f00 	cmp.w	fp, #0
900179a4:	f340 80a0 	ble.w	90017ae8 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17e>
900179a8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
900179aa:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
900179ae:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
900179b2:	9a10      	ldr	r2, [sp, #64]	; 0x40
900179b4:	f9b5 800c 	ldrsh.w	r8, [r5, #12]
900179b8:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
900179bc:	2b00      	cmp	r3, #0
900179be:	dd0c      	ble.n	900179da <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
900179c0:	1406      	asrs	r6, r0, #16
900179c2:	d405      	bmi.n	900179d0 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
900179c4:	454e      	cmp	r6, r9
900179c6:	da03      	bge.n	900179d0 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
900179c8:	1416      	asrs	r6, r2, #16
900179ca:	d401      	bmi.n	900179d0 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
900179cc:	4546      	cmp	r6, r8
900179ce:	db05      	blt.n	900179dc <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
900179d0:	4470      	add	r0, lr
900179d2:	4462      	add	r2, ip
900179d4:	3b01      	subs	r3, #1
900179d6:	3402      	adds	r4, #2
900179d8:	e7f0      	b.n	900179bc <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
900179da:	d00f      	beq.n	900179fc <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
900179dc:	1e5e      	subs	r6, r3, #1
900179de:	fb0e 0706 	mla	r7, lr, r6, r0
900179e2:	143f      	asrs	r7, r7, #16
900179e4:	d541      	bpl.n	90017a6a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x100>
900179e6:	eb04 0643 	add.w	r6, r4, r3, lsl #1
900179ea:	4698      	mov	r8, r3
900179ec:	9603      	str	r6, [sp, #12]
900179ee:	f1b8 0f00 	cmp.w	r8, #0
900179f2:	dc59      	bgt.n	90017aa8 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
900179f4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
900179f8:	eb04 0443 	add.w	r4, r4, r3, lsl #1
900179fc:	9b00      	ldr	r3, [sp, #0]
900179fe:	2b00      	cmp	r3, #0
90017a00:	dd72      	ble.n	90017ae8 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17e>
90017a02:	ee30 0a04 	vadd.f32	s0, s0, s8
90017a06:	9b0e      	ldr	r3, [sp, #56]	; 0x38
90017a08:	ee70 0aa4 	vadd.f32	s1, s1, s9
90017a0c:	eeb0 6a62 	vmov.f32	s12, s5
90017a10:	eec6 7a80 	vdiv.f32	s15, s13, s0
90017a14:	ee31 1a05 	vadd.f32	s2, s2, s10
90017a18:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
90017a1c:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
90017a20:	eeb0 6a43 	vmov.f32	s12, s6
90017a24:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
90017a28:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
90017a2c:	ee20 7aa7 	vmul.f32	s14, s1, s15
90017a30:	ee61 7a27 	vmul.f32	s15, s2, s15
90017a34:	ee77 2a62 	vsub.f32	s5, s14, s5
90017a38:	ee37 3ac3 	vsub.f32	s6, s15, s6
90017a3c:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
90017a40:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
90017a44:	ee12 2a90 	vmov	r2, s5
90017a48:	eef0 2a47 	vmov.f32	s5, s14
90017a4c:	fb92 fef3 	sdiv	lr, r2, r3
90017a50:	ee13 2a10 	vmov	r2, s6
90017a54:	eeb0 3a67 	vmov.f32	s6, s15
90017a58:	fb92 fcf3 	sdiv	ip, r2, r3
90017a5c:	9b00      	ldr	r3, [sp, #0]
90017a5e:	3b01      	subs	r3, #1
90017a60:	9300      	str	r3, [sp, #0]
90017a62:	9b0e      	ldr	r3, [sp, #56]	; 0x38
90017a64:	bf08      	it	eq
90017a66:	465b      	moveq	r3, fp
90017a68:	e797      	b.n	9001799a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
90017a6a:	454f      	cmp	r7, r9
90017a6c:	dabb      	bge.n	900179e6 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
90017a6e:	fb0c 2606 	mla	r6, ip, r6, r2
90017a72:	1436      	asrs	r6, r6, #16
90017a74:	d4b7      	bmi.n	900179e6 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
90017a76:	4546      	cmp	r6, r8
90017a78:	dab5      	bge.n	900179e6 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
90017a7a:	461e      	mov	r6, r3
90017a7c:	46a0      	mov	r8, r4
90017a7e:	2e00      	cmp	r6, #0
90017a80:	ddb8      	ble.n	900179f4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
90017a82:	1417      	asrs	r7, r2, #16
90017a84:	f9b5 a008 	ldrsh.w	sl, [r5, #8]
90017a88:	9901      	ldr	r1, [sp, #4]
90017a8a:	ea4f 4920 	mov.w	r9, r0, asr #16
90017a8e:	4462      	add	r2, ip
90017a90:	4470      	add	r0, lr
90017a92:	fb0a 1707 	mla	r7, sl, r7, r1
90017a96:	9902      	ldr	r1, [sp, #8]
90017a98:	3e01      	subs	r6, #1
90017a9a:	f817 7009 	ldrb.w	r7, [r7, r9]
90017a9e:	f831 7017 	ldrh.w	r7, [r1, r7, lsl #1]
90017aa2:	f828 7b02 	strh.w	r7, [r8], #2
90017aa6:	e7ea      	b.n	90017a7e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x114>
90017aa8:	ea5f 4920 	movs.w	r9, r0, asr #16
90017aac:	d417      	bmi.n	90017ade <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
90017aae:	68ae      	ldr	r6, [r5, #8]
90017ab0:	454e      	cmp	r6, r9
90017ab2:	dd14      	ble.n	90017ade <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
90017ab4:	ea5f 4a22 	movs.w	sl, r2, asr #16
90017ab8:	d411      	bmi.n	90017ade <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
90017aba:	68ef      	ldr	r7, [r5, #12]
90017abc:	4557      	cmp	r7, sl
90017abe:	dd0e      	ble.n	90017ade <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
90017ac0:	9f01      	ldr	r7, [sp, #4]
90017ac2:	b236      	sxth	r6, r6
90017ac4:	f06f 0101 	mvn.w	r1, #1
90017ac8:	fb0a 7606 	mla	r6, sl, r6, r7
90017acc:	9f02      	ldr	r7, [sp, #8]
90017ace:	f816 6009 	ldrb.w	r6, [r6, r9]
90017ad2:	f837 7016 	ldrh.w	r7, [r7, r6, lsl #1]
90017ad6:	fb01 f608 	mul.w	r6, r1, r8
90017ada:	9903      	ldr	r1, [sp, #12]
90017adc:	538f      	strh	r7, [r1, r6]
90017ade:	4470      	add	r0, lr
90017ae0:	4462      	add	r2, ip
90017ae2:	f108 38ff 	add.w	r8, r8, #4294967295
90017ae6:	e782      	b.n	900179ee <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
90017ae8:	b005      	add	sp, #20
90017aea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

90017aee <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
90017aee:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90017af2:	b087      	sub	sp, #28
90017af4:	9c15      	ldr	r4, [sp, #84]	; 0x54
90017af6:	9205      	str	r2, [sp, #20]
90017af8:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
90017afc:	9102      	str	r1, [sp, #8]
90017afe:	9203      	str	r2, [sp, #12]
90017b00:	6861      	ldr	r1, [r4, #4]
90017b02:	f8dd c060 	ldr.w	ip, [sp, #96]	; 0x60
90017b06:	e9dd 2016 	ldrd	r2, r0, [sp, #88]	; 0x58
90017b0a:	fb01 2000 	mla	r0, r1, r0, r2
90017b0e:	6822      	ldr	r2, [r4, #0]
90017b10:	eb02 0240 	add.w	r2, r2, r0, lsl #1
90017b14:	9200      	str	r2, [sp, #0]
90017b16:	f8dc 2000 	ldr.w	r2, [ip]
90017b1a:	9204      	str	r2, [sp, #16]
90017b1c:	f8dc 2004 	ldr.w	r2, [ip, #4]
90017b20:	3204      	adds	r2, #4
90017b22:	9201      	str	r2, [sp, #4]
90017b24:	9a03      	ldr	r2, [sp, #12]
90017b26:	43d5      	mvns	r5, r2
90017b28:	b2ed      	uxtb	r5, r5
90017b2a:	9a02      	ldr	r2, [sp, #8]
90017b2c:	2a00      	cmp	r2, #0
90017b2e:	dc03      	bgt.n	90017b38 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
90017b30:	9a05      	ldr	r2, [sp, #20]
90017b32:	2a00      	cmp	r2, #0
90017b34:	f340 812c 	ble.w	90017d90 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
90017b38:	9a11      	ldr	r2, [sp, #68]	; 0x44
90017b3a:	f9bc e008 	ldrsh.w	lr, [ip, #8]
90017b3e:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
90017b42:	9a12      	ldr	r2, [sp, #72]	; 0x48
90017b44:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
90017b48:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
90017b4c:	2b00      	cmp	r3, #0
90017b4e:	dd10      	ble.n	90017b72 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
90017b50:	140c      	asrs	r4, r1, #16
90017b52:	d405      	bmi.n	90017b60 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
90017b54:	4574      	cmp	r4, lr
90017b56:	da03      	bge.n	90017b60 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
90017b58:	1414      	asrs	r4, r2, #16
90017b5a:	d401      	bmi.n	90017b60 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
90017b5c:	42bc      	cmp	r4, r7
90017b5e:	db09      	blt.n	90017b74 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
90017b60:	9c13      	ldr	r4, [sp, #76]	; 0x4c
90017b62:	3b01      	subs	r3, #1
90017b64:	9800      	ldr	r0, [sp, #0]
90017b66:	4421      	add	r1, r4
90017b68:	9c14      	ldr	r4, [sp, #80]	; 0x50
90017b6a:	3002      	adds	r0, #2
90017b6c:	4422      	add	r2, r4
90017b6e:	9000      	str	r0, [sp, #0]
90017b70:	e7ec      	b.n	90017b4c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
90017b72:	d071      	beq.n	90017c58 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16a>
90017b74:	1e5c      	subs	r4, r3, #1
90017b76:	9e13      	ldr	r6, [sp, #76]	; 0x4c
90017b78:	fb06 1604 	mla	r6, r6, r4, r1
90017b7c:	1436      	asrs	r6, r6, #16
90017b7e:	d45d      	bmi.n	90017c3c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
90017b80:	4576      	cmp	r6, lr
90017b82:	da5b      	bge.n	90017c3c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
90017b84:	9e14      	ldr	r6, [sp, #80]	; 0x50
90017b86:	fb06 2404 	mla	r4, r6, r4, r2
90017b8a:	1424      	asrs	r4, r4, #16
90017b8c:	d456      	bmi.n	90017c3c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
90017b8e:	42bc      	cmp	r4, r7
90017b90:	da54      	bge.n	90017c3c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
90017b92:	4698      	mov	r8, r3
90017b94:	f8dd 9000 	ldr.w	r9, [sp]
90017b98:	f8bd a00c 	ldrh.w	sl, [sp, #12]
90017b9c:	f1b8 0f00 	cmp.w	r8, #0
90017ba0:	dd54      	ble.n	90017c4c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15e>
90017ba2:	f9bc 7008 	ldrsh.w	r7, [ip, #8]
90017ba6:	1414      	asrs	r4, r2, #16
90017ba8:	9804      	ldr	r0, [sp, #16]
90017baa:	140e      	asrs	r6, r1, #16
90017bac:	f108 38ff 	add.w	r8, r8, #4294967295
90017bb0:	fb07 0404 	mla	r4, r7, r4, r0
90017bb4:	9801      	ldr	r0, [sp, #4]
90017bb6:	f814 e006 	ldrb.w	lr, [r4, r6]
90017bba:	f8b9 4000 	ldrh.w	r4, [r9]
90017bbe:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
90017bc2:	1227      	asrs	r7, r4, #8
90017bc4:	eb00 0b0e 	add.w	fp, r0, lr
90017bc8:	f810 e00e 	ldrb.w	lr, [r0, lr]
90017bcc:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
90017bd0:	9813      	ldr	r0, [sp, #76]	; 0x4c
90017bd2:	f89b 6002 	ldrb.w	r6, [fp, #2]
90017bd6:	f89b b001 	ldrb.w	fp, [fp, #1]
90017bda:	4401      	add	r1, r0
90017bdc:	fb16 f60a 	smulbb	r6, r6, sl
90017be0:	9814      	ldr	r0, [sp, #80]	; 0x50
90017be2:	fb1b fb0a 	smulbb	fp, fp, sl
90017be6:	fb07 6705 	mla	r7, r7, r5, r6
90017bea:	10e6      	asrs	r6, r4, #3
90017bec:	00e4      	lsls	r4, r4, #3
90017bee:	4402      	add	r2, r0
90017bf0:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
90017bf4:	b2bf      	uxth	r7, r7
90017bf6:	b2e4      	uxtb	r4, r4
90017bf8:	fb06 b605 	mla	r6, r6, r5, fp
90017bfc:	fb14 f405 	smulbb	r4, r4, r5
90017c00:	b2b6      	uxth	r6, r6
90017c02:	fb0e 4e0a 	mla	lr, lr, sl, r4
90017c06:	1c7c      	adds	r4, r7, #1
90017c08:	f106 0b01 	add.w	fp, r6, #1
90017c0c:	fa1f fe8e 	uxth.w	lr, lr
90017c10:	eb04 2717 	add.w	r7, r4, r7, lsr #8
90017c14:	f10e 0401 	add.w	r4, lr, #1
90017c18:	eb0b 2b16 	add.w	fp, fp, r6, lsr #8
90017c1c:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
90017c20:	eb04 241e 	add.w	r4, r4, lr, lsr #8
90017c24:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
90017c28:	f3c4 24c4 	ubfx	r4, r4, #11, #5
90017c2c:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
90017c30:	4327      	orrs	r7, r4
90017c32:	ea47 070b 	orr.w	r7, r7, fp
90017c36:	f829 7b02 	strh.w	r7, [r9], #2
90017c3a:	e7af      	b.n	90017b9c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
90017c3c:	f04f 0e00 	mov.w	lr, #0
90017c40:	f8bd 900c 	ldrh.w	r9, [sp, #12]
90017c44:	eb03 040e 	add.w	r4, r3, lr
90017c48:	2c00      	cmp	r4, #0
90017c4a:	dc43      	bgt.n	90017cd4 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
90017c4c:	9a00      	ldr	r2, [sp, #0]
90017c4e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
90017c52:	eb02 0343 	add.w	r3, r2, r3, lsl #1
90017c56:	9300      	str	r3, [sp, #0]
90017c58:	9b02      	ldr	r3, [sp, #8]
90017c5a:	2b00      	cmp	r3, #0
90017c5c:	f340 8098 	ble.w	90017d90 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
90017c60:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
90017c64:	9b10      	ldr	r3, [sp, #64]	; 0x40
90017c66:	ee30 0a04 	vadd.f32	s0, s0, s8
90017c6a:	ee70 0aa4 	vadd.f32	s1, s1, s9
90017c6e:	eef0 6a62 	vmov.f32	s13, s5
90017c72:	eec7 7a00 	vdiv.f32	s15, s14, s0
90017c76:	ee31 1a05 	vadd.f32	s2, s2, s10
90017c7a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
90017c7e:	edcd 6a11 	vstr	s13, [sp, #68]	; 0x44
90017c82:	eef0 6a43 	vmov.f32	s13, s6
90017c86:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
90017c8a:	edcd 6a12 	vstr	s13, [sp, #72]	; 0x48
90017c8e:	ee20 7aa7 	vmul.f32	s14, s1, s15
90017c92:	ee61 7a27 	vmul.f32	s15, s2, s15
90017c96:	ee77 2a62 	vsub.f32	s5, s14, s5
90017c9a:	ee37 3ac3 	vsub.f32	s6, s15, s6
90017c9e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
90017ca2:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
90017ca6:	ee12 2a90 	vmov	r2, s5
90017caa:	eef0 2a47 	vmov.f32	s5, s14
90017cae:	fb92 f3f3 	sdiv	r3, r2, r3
90017cb2:	ee13 2a10 	vmov	r2, s6
90017cb6:	9313      	str	r3, [sp, #76]	; 0x4c
90017cb8:	9b10      	ldr	r3, [sp, #64]	; 0x40
90017cba:	eeb0 3a67 	vmov.f32	s6, s15
90017cbe:	fb92 f3f3 	sdiv	r3, r2, r3
90017cc2:	9314      	str	r3, [sp, #80]	; 0x50
90017cc4:	9b02      	ldr	r3, [sp, #8]
90017cc6:	9a05      	ldr	r2, [sp, #20]
90017cc8:	3b01      	subs	r3, #1
90017cca:	9302      	str	r3, [sp, #8]
90017ccc:	9b10      	ldr	r3, [sp, #64]	; 0x40
90017cce:	bf08      	it	eq
90017cd0:	4613      	moveq	r3, r2
90017cd2:	e72a      	b.n	90017b2a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
90017cd4:	140f      	asrs	r7, r1, #16
90017cd6:	d454      	bmi.n	90017d82 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
90017cd8:	f8dc 6008 	ldr.w	r6, [ip, #8]
90017cdc:	42be      	cmp	r6, r7
90017cde:	dd50      	ble.n	90017d82 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
90017ce0:	ea5f 4822 	movs.w	r8, r2, asr #16
90017ce4:	d44d      	bmi.n	90017d82 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
90017ce6:	f8dc 400c 	ldr.w	r4, [ip, #12]
90017cea:	4544      	cmp	r4, r8
90017cec:	dd49      	ble.n	90017d82 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
90017cee:	9c04      	ldr	r4, [sp, #16]
90017cf0:	b236      	sxth	r6, r6
90017cf2:	f06f 0001 	mvn.w	r0, #1
90017cf6:	fb08 4606 	mla	r6, r8, r6, r4
90017cfa:	9c01      	ldr	r4, [sp, #4]
90017cfc:	fb00 fa0e 	mul.w	sl, r0, lr
90017d00:	9800      	ldr	r0, [sp, #0]
90017d02:	f816 8007 	ldrb.w	r8, [r6, r7]
90017d06:	eb08 0848 	add.w	r8, r8, r8, lsl #1
90017d0a:	eb04 0b08 	add.w	fp, r4, r8
90017d0e:	f830 400a 	ldrh.w	r4, [r0, sl]
90017d12:	9801      	ldr	r0, [sp, #4]
90017d14:	f89b 6002 	ldrb.w	r6, [fp, #2]
90017d18:	1227      	asrs	r7, r4, #8
90017d1a:	f89b b001 	ldrb.w	fp, [fp, #1]
90017d1e:	fb16 f609 	smulbb	r6, r6, r9
90017d22:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
90017d26:	f810 8008 	ldrb.w	r8, [r0, r8]
90017d2a:	fb1b fb09 	smulbb	fp, fp, r9
90017d2e:	fb07 6705 	mla	r7, r7, r5, r6
90017d32:	10e6      	asrs	r6, r4, #3
90017d34:	00e4      	lsls	r4, r4, #3
90017d36:	9800      	ldr	r0, [sp, #0]
90017d38:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
90017d3c:	b2bf      	uxth	r7, r7
90017d3e:	b2e4      	uxtb	r4, r4
90017d40:	fb06 b605 	mla	r6, r6, r5, fp
90017d44:	fb14 f405 	smulbb	r4, r4, r5
90017d48:	b2b6      	uxth	r6, r6
90017d4a:	fb08 4809 	mla	r8, r8, r9, r4
90017d4e:	1c7c      	adds	r4, r7, #1
90017d50:	f106 0b01 	add.w	fp, r6, #1
90017d54:	fa1f f888 	uxth.w	r8, r8
90017d58:	eb04 2717 	add.w	r7, r4, r7, lsr #8
90017d5c:	f108 0401 	add.w	r4, r8, #1
90017d60:	eb0b 2b16 	add.w	fp, fp, r6, lsr #8
90017d64:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
90017d68:	eb04 2418 	add.w	r4, r4, r8, lsr #8
90017d6c:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
90017d70:	f3c4 24c4 	ubfx	r4, r4, #11, #5
90017d74:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
90017d78:	4327      	orrs	r7, r4
90017d7a:	ea47 070b 	orr.w	r7, r7, fp
90017d7e:	f820 700a 	strh.w	r7, [r0, sl]
90017d82:	9813      	ldr	r0, [sp, #76]	; 0x4c
90017d84:	f10e 3eff 	add.w	lr, lr, #4294967295
90017d88:	4401      	add	r1, r0
90017d8a:	9814      	ldr	r0, [sp, #80]	; 0x50
90017d8c:	4402      	add	r2, r0
90017d8e:	e759      	b.n	90017c44 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
90017d90:	b007      	add	sp, #28
90017d92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

90017d98 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
90017d98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90017d9c:	b085      	sub	sp, #20
90017d9e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
90017da2:	9e13      	ldr	r6, [sp, #76]	; 0x4c
90017da4:	9d16      	ldr	r5, [sp, #88]	; 0x58
90017da6:	9203      	str	r2, [sp, #12]
90017da8:	6870      	ldr	r0, [r6, #4]
90017daa:	686f      	ldr	r7, [r5, #4]
90017dac:	f8dd c044 	ldr.w	ip, [sp, #68]	; 0x44
90017db0:	3704      	adds	r7, #4
90017db2:	9101      	str	r1, [sp, #4]
90017db4:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
90017db8:	fb00 2404 	mla	r4, r0, r4, r2
90017dbc:	6832      	ldr	r2, [r6, #0]
90017dbe:	eb02 0444 	add.w	r4, r2, r4, lsl #1
90017dc2:	682a      	ldr	r2, [r5, #0]
90017dc4:	9202      	str	r2, [sp, #8]
90017dc6:	9a01      	ldr	r2, [sp, #4]
90017dc8:	2a00      	cmp	r2, #0
90017dca:	dc03      	bgt.n	90017dd4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
90017dcc:	9a03      	ldr	r2, [sp, #12]
90017dce:	2a00      	cmp	r2, #0
90017dd0:	f340 80cc 	ble.w	90017f6c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
90017dd4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
90017dd6:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
90017dda:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
90017dde:	9a10      	ldr	r2, [sp, #64]	; 0x40
90017de0:	f9b5 800c 	ldrsh.w	r8, [r5, #12]
90017de4:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
90017de8:	2b00      	cmp	r3, #0
90017dea:	dd0d      	ble.n	90017e08 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
90017dec:	1406      	asrs	r6, r0, #16
90017dee:	d405      	bmi.n	90017dfc <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
90017df0:	454e      	cmp	r6, r9
90017df2:	da03      	bge.n	90017dfc <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
90017df4:	1416      	asrs	r6, r2, #16
90017df6:	d401      	bmi.n	90017dfc <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
90017df8:	4546      	cmp	r6, r8
90017dfa:	db06      	blt.n	90017e0a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
90017dfc:	9e12      	ldr	r6, [sp, #72]	; 0x48
90017dfe:	4460      	add	r0, ip
90017e00:	3b01      	subs	r3, #1
90017e02:	3402      	adds	r4, #2
90017e04:	4432      	add	r2, r6
90017e06:	e7ef      	b.n	90017de8 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
90017e08:	d00f      	beq.n	90017e2a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
90017e0a:	1e5e      	subs	r6, r3, #1
90017e0c:	fb0c 0e06 	mla	lr, ip, r6, r0
90017e10:	ea5f 4e2e 	movs.w	lr, lr, asr #16
90017e14:	d543      	bpl.n	90017e9e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x106>
90017e16:	4698      	mov	r8, r3
90017e18:	eb04 0a43 	add.w	sl, r4, r3, lsl #1
90017e1c:	f1b8 0f00 	cmp.w	r8, #0
90017e20:	dc71      	bgt.n	90017f06 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16e>
90017e22:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
90017e26:	eb04 0443 	add.w	r4, r4, r3, lsl #1
90017e2a:	9b01      	ldr	r3, [sp, #4]
90017e2c:	2b00      	cmp	r3, #0
90017e2e:	f340 809d 	ble.w	90017f6c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
90017e32:	ee30 0a04 	vadd.f32	s0, s0, s8
90017e36:	9b0e      	ldr	r3, [sp, #56]	; 0x38
90017e38:	ee70 0aa4 	vadd.f32	s1, s1, s9
90017e3c:	eeb0 6a62 	vmov.f32	s12, s5
90017e40:	eec6 7a80 	vdiv.f32	s15, s13, s0
90017e44:	ee31 1a05 	vadd.f32	s2, s2, s10
90017e48:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
90017e4c:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
90017e50:	eeb0 6a43 	vmov.f32	s12, s6
90017e54:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
90017e58:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
90017e5c:	ee20 7aa7 	vmul.f32	s14, s1, s15
90017e60:	ee61 7a27 	vmul.f32	s15, s2, s15
90017e64:	ee77 2a62 	vsub.f32	s5, s14, s5
90017e68:	ee37 3ac3 	vsub.f32	s6, s15, s6
90017e6c:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
90017e70:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
90017e74:	ee12 2a90 	vmov	r2, s5
90017e78:	eef0 2a47 	vmov.f32	s5, s14
90017e7c:	fb92 fcf3 	sdiv	ip, r2, r3
90017e80:	ee13 2a10 	vmov	r2, s6
90017e84:	eeb0 3a67 	vmov.f32	s6, s15
90017e88:	fb92 f3f3 	sdiv	r3, r2, r3
90017e8c:	9312      	str	r3, [sp, #72]	; 0x48
90017e8e:	9b01      	ldr	r3, [sp, #4]
90017e90:	9a03      	ldr	r2, [sp, #12]
90017e92:	3b01      	subs	r3, #1
90017e94:	9301      	str	r3, [sp, #4]
90017e96:	9b0e      	ldr	r3, [sp, #56]	; 0x38
90017e98:	bf08      	it	eq
90017e9a:	4613      	moveq	r3, r2
90017e9c:	e793      	b.n	90017dc6 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
90017e9e:	45ce      	cmp	lr, r9
90017ea0:	dab9      	bge.n	90017e16 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
90017ea2:	9912      	ldr	r1, [sp, #72]	; 0x48
90017ea4:	fb01 2606 	mla	r6, r1, r6, r2
90017ea8:	1436      	asrs	r6, r6, #16
90017eaa:	d4b4      	bmi.n	90017e16 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
90017eac:	4546      	cmp	r6, r8
90017eae:	dab2      	bge.n	90017e16 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
90017eb0:	4698      	mov	r8, r3
90017eb2:	46a2      	mov	sl, r4
90017eb4:	f1b8 0f00 	cmp.w	r8, #0
90017eb8:	ddb3      	ble.n	90017e22 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
90017eba:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
90017ebe:	1416      	asrs	r6, r2, #16
90017ec0:	9902      	ldr	r1, [sp, #8]
90017ec2:	ea4f 4e20 	mov.w	lr, r0, asr #16
90017ec6:	f108 38ff 	add.w	r8, r8, #4294967295
90017eca:	4460      	add	r0, ip
90017ecc:	fb09 1606 	mla	r6, r9, r6, r1
90017ed0:	4928      	ldr	r1, [pc, #160]	; (90017f74 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1dc>)
90017ed2:	f816 e00e 	ldrb.w	lr, [r6, lr]
90017ed6:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
90017eda:	eb07 0b0e 	add.w	fp, r7, lr
90017ede:	f89b 6001 	ldrb.w	r6, [fp, #1]
90017ee2:	f89b 9002 	ldrb.w	r9, [fp, #2]
90017ee6:	00f6      	lsls	r6, r6, #3
90017ee8:	ea01 2909 	and.w	r9, r1, r9, lsl #8
90017eec:	9912      	ldr	r1, [sp, #72]	; 0x48
90017eee:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
90017ef2:	440a      	add	r2, r1
90017ef4:	ea49 0606 	orr.w	r6, r9, r6
90017ef8:	f817 900e 	ldrb.w	r9, [r7, lr]
90017efc:	ea46 06d9 	orr.w	r6, r6, r9, lsr #3
90017f00:	f82a 6b02 	strh.w	r6, [sl], #2
90017f04:	e7d6      	b.n	90017eb4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
90017f06:	ea5f 4920 	movs.w	r9, r0, asr #16
90017f0a:	d429      	bmi.n	90017f60 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
90017f0c:	68ae      	ldr	r6, [r5, #8]
90017f0e:	454e      	cmp	r6, r9
90017f10:	dd26      	ble.n	90017f60 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
90017f12:	ea5f 4b22 	movs.w	fp, r2, asr #16
90017f16:	d423      	bmi.n	90017f60 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
90017f18:	68e9      	ldr	r1, [r5, #12]
90017f1a:	4559      	cmp	r1, fp
90017f1c:	dd20      	ble.n	90017f60 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
90017f1e:	fa0f fe86 	sxth.w	lr, r6
90017f22:	9902      	ldr	r1, [sp, #8]
90017f24:	fb0b 1e0e 	mla	lr, fp, lr, r1
90017f28:	f06f 0101 	mvn.w	r1, #1
90017f2c:	f81e e009 	ldrb.w	lr, [lr, r9]
90017f30:	fb01 f908 	mul.w	r9, r1, r8
90017f34:	f2a1 71fe 	subw	r1, r1, #2046	; 0x7fe
90017f38:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
90017f3c:	eb07 060e 	add.w	r6, r7, lr
90017f40:	f896 b002 	ldrb.w	fp, [r6, #2]
90017f44:	7876      	ldrb	r6, [r6, #1]
90017f46:	ea01 2b0b 	and.w	fp, r1, fp, lsl #8
90017f4a:	00f6      	lsls	r6, r6, #3
90017f4c:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
90017f50:	ea4b 0606 	orr.w	r6, fp, r6
90017f54:	f817 b00e 	ldrb.w	fp, [r7, lr]
90017f58:	ea46 06db 	orr.w	r6, r6, fp, lsr #3
90017f5c:	f82a 6009 	strh.w	r6, [sl, r9]
90017f60:	9912      	ldr	r1, [sp, #72]	; 0x48
90017f62:	4460      	add	r0, ip
90017f64:	f108 38ff 	add.w	r8, r8, #4294967295
90017f68:	440a      	add	r2, r1
90017f6a:	e757      	b.n	90017e1c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
90017f6c:	b005      	add	sp, #20
90017f6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90017f72:	bf00      	nop
90017f74:	fffff800 	.word	0xfffff800

90017f78 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
90017f78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90017f7c:	b087      	sub	sp, #28
90017f7e:	468b      	mov	fp, r1
90017f80:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
90017f84:	9815      	ldr	r0, [sp, #84]	; 0x54
90017f86:	9204      	str	r2, [sp, #16]
90017f88:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
90017f8c:	6841      	ldr	r1, [r0, #4]
90017f8e:	9205      	str	r2, [sp, #20]
90017f90:	f8dd c060 	ldr.w	ip, [sp, #96]	; 0x60
90017f94:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
90017f98:	fb01 2404 	mla	r4, r1, r4, r2
90017f9c:	6802      	ldr	r2, [r0, #0]
90017f9e:	eb02 0444 	add.w	r4, r2, r4, lsl #1
90017fa2:	f8dc 2000 	ldr.w	r2, [ip]
90017fa6:	9201      	str	r2, [sp, #4]
90017fa8:	f8dc 2004 	ldr.w	r2, [ip, #4]
90017fac:	3204      	adds	r2, #4
90017fae:	9202      	str	r2, [sp, #8]
90017fb0:	f1bb 0f00 	cmp.w	fp, #0
90017fb4:	dc03      	bgt.n	90017fbe <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46>
90017fb6:	9a04      	ldr	r2, [sp, #16]
90017fb8:	2a00      	cmp	r2, #0
90017fba:	f340 8138 	ble.w	9001822e <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
90017fbe:	9a11      	ldr	r2, [sp, #68]	; 0x44
90017fc0:	f9bc 7008 	ldrsh.w	r7, [ip, #8]
90017fc4:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
90017fc8:	9a12      	ldr	r2, [sp, #72]	; 0x48
90017fca:	f9bc 600c 	ldrsh.w	r6, [ip, #12]
90017fce:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
90017fd2:	2b00      	cmp	r3, #0
90017fd4:	dd0e      	ble.n	90017ff4 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
90017fd6:	1402      	asrs	r2, r0, #16
90017fd8:	d405      	bmi.n	90017fe6 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
90017fda:	42ba      	cmp	r2, r7
90017fdc:	da03      	bge.n	90017fe6 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
90017fde:	140a      	asrs	r2, r1, #16
90017fe0:	d401      	bmi.n	90017fe6 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
90017fe2:	42b2      	cmp	r2, r6
90017fe4:	db07      	blt.n	90017ff6 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
90017fe6:	9a13      	ldr	r2, [sp, #76]	; 0x4c
90017fe8:	3b01      	subs	r3, #1
90017fea:	3402      	adds	r4, #2
90017fec:	4410      	add	r0, r2
90017fee:	9a14      	ldr	r2, [sp, #80]	; 0x50
90017ff0:	4411      	add	r1, r2
90017ff2:	e7ee      	b.n	90017fd2 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
90017ff4:	d019      	beq.n	9001802a <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
90017ff6:	1e5a      	subs	r2, r3, #1
90017ff8:	9d13      	ldr	r5, [sp, #76]	; 0x4c
90017ffa:	fb05 0502 	mla	r5, r5, r2, r0
90017ffe:	142d      	asrs	r5, r5, #16
90018000:	d409      	bmi.n	90018016 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
90018002:	42bd      	cmp	r5, r7
90018004:	da07      	bge.n	90018016 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
90018006:	9d14      	ldr	r5, [sp, #80]	; 0x50
90018008:	fb05 1202 	mla	r2, r5, r2, r1
9001800c:	1412      	asrs	r2, r2, #16
9001800e:	d402      	bmi.n	90018016 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
90018010:	42b2      	cmp	r2, r6
90018012:	f2c0 80ac 	blt.w	9001816e <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f6>
90018016:	f04f 0e00 	mov.w	lr, #0
9001801a:	eb03 020e 	add.w	r2, r3, lr
9001801e:	2a00      	cmp	r2, #0
90018020:	dc3e      	bgt.n	900180a0 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
90018022:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
90018026:	eb04 0443 	add.w	r4, r4, r3, lsl #1
9001802a:	f1bb 0f00 	cmp.w	fp, #0
9001802e:	f340 80fe 	ble.w	9001822e <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
90018032:	ee30 0a04 	vadd.f32	s0, s0, s8
90018036:	9b10      	ldr	r3, [sp, #64]	; 0x40
90018038:	ee70 0aa4 	vadd.f32	s1, s1, s9
9001803c:	f1bb 0b01 	subs.w	fp, fp, #1
90018040:	eeb0 6a62 	vmov.f32	s12, s5
90018044:	eec6 7a80 	vdiv.f32	s15, s13, s0
90018048:	ee31 1a05 	vadd.f32	s2, s2, s10
9001804c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
90018050:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
90018054:	eeb0 6a43 	vmov.f32	s12, s6
90018058:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
9001805c:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
90018060:	ee20 7aa7 	vmul.f32	s14, s1, s15
90018064:	ee61 7a27 	vmul.f32	s15, s2, s15
90018068:	ee77 2a62 	vsub.f32	s5, s14, s5
9001806c:	ee37 3ac3 	vsub.f32	s6, s15, s6
90018070:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
90018074:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
90018078:	ee12 2a90 	vmov	r2, s5
9001807c:	eef0 2a47 	vmov.f32	s5, s14
90018080:	fb92 f3f3 	sdiv	r3, r2, r3
90018084:	ee13 2a10 	vmov	r2, s6
90018088:	9313      	str	r3, [sp, #76]	; 0x4c
9001808a:	9b10      	ldr	r3, [sp, #64]	; 0x40
9001808c:	eeb0 3a67 	vmov.f32	s6, s15
90018090:	fb92 f3f3 	sdiv	r3, r2, r3
90018094:	9a04      	ldr	r2, [sp, #16]
90018096:	9314      	str	r3, [sp, #80]	; 0x50
90018098:	9b10      	ldr	r3, [sp, #64]	; 0x40
9001809a:	bf08      	it	eq
9001809c:	4613      	moveq	r3, r2
9001809e:	e787      	b.n	90017fb0 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
900180a0:	1406      	asrs	r6, r0, #16
900180a2:	d45d      	bmi.n	90018160 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
900180a4:	f8dc 5008 	ldr.w	r5, [ip, #8]
900180a8:	42b5      	cmp	r5, r6
900180aa:	dd59      	ble.n	90018160 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
900180ac:	140f      	asrs	r7, r1, #16
900180ae:	d457      	bmi.n	90018160 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
900180b0:	f8dc 200c 	ldr.w	r2, [ip, #12]
900180b4:	42ba      	cmp	r2, r7
900180b6:	dd53      	ble.n	90018160 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
900180b8:	9a01      	ldr	r2, [sp, #4]
900180ba:	b22d      	sxth	r5, r5
900180bc:	fb07 2505 	mla	r5, r7, r5, r2
900180c0:	5daa      	ldrb	r2, [r5, r6]
900180c2:	9d02      	ldr	r5, [sp, #8]
900180c4:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
900180c8:	0e2e      	lsrs	r6, r5, #24
900180ca:	d049      	beq.n	90018160 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
900180cc:	f06f 0201 	mvn.w	r2, #1
900180d0:	f3c5 2a07 	ubfx	sl, r5, #8, #8
900180d4:	fb02 f20e 	mul.w	r2, r2, lr
900180d8:	f834 8002 	ldrh.w	r8, [r4, r2]
900180dc:	9203      	str	r2, [sp, #12]
900180de:	9a05      	ldr	r2, [sp, #20]
900180e0:	ea4f 2728 	mov.w	r7, r8, asr #8
900180e4:	4356      	muls	r6, r2
900180e6:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
900180ea:	1c72      	adds	r2, r6, #1
900180ec:	eb02 2226 	add.w	r2, r2, r6, asr #8
900180f0:	f3c5 4607 	ubfx	r6, r5, #16, #8
900180f4:	b2ed      	uxtb	r5, r5
900180f6:	1212      	asrs	r2, r2, #8
900180f8:	fa1f f982 	uxth.w	r9, r2
900180fc:	43d2      	mvns	r2, r2
900180fe:	fb16 f609 	smulbb	r6, r6, r9
90018102:	b2d2      	uxtb	r2, r2
90018104:	fb15 f509 	smulbb	r5, r5, r9
90018108:	fb07 6702 	mla	r7, r7, r2, r6
9001810c:	ea4f 06e8 	mov.w	r6, r8, asr #3
90018110:	fb1a fa09 	smulbb	sl, sl, r9
90018114:	ea4f 08c8 	mov.w	r8, r8, lsl #3
90018118:	b2bf      	uxth	r7, r7
9001811a:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
9001811e:	fa5f f888 	uxtb.w	r8, r8
90018122:	fb06 a602 	mla	r6, r6, r2, sl
90018126:	fb08 5502 	mla	r5, r8, r2, r5
9001812a:	1c7a      	adds	r2, r7, #1
9001812c:	b2b6      	uxth	r6, r6
9001812e:	b2ad      	uxth	r5, r5
90018130:	eb02 2717 	add.w	r7, r2, r7, lsr #8
90018134:	9a03      	ldr	r2, [sp, #12]
90018136:	f105 0a01 	add.w	sl, r5, #1
9001813a:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
9001813e:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
90018142:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
90018146:	ea4a 0707 	orr.w	r7, sl, r7
9001814a:	f106 0a01 	add.w	sl, r6, #1
9001814e:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
90018152:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
90018156:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
9001815a:	ea47 070a 	orr.w	r7, r7, sl
9001815e:	52a7      	strh	r7, [r4, r2]
90018160:	9a13      	ldr	r2, [sp, #76]	; 0x4c
90018162:	f10e 3eff 	add.w	lr, lr, #4294967295
90018166:	4410      	add	r0, r2
90018168:	9a14      	ldr	r2, [sp, #80]	; 0x50
9001816a:	4411      	add	r1, r2
9001816c:	e755      	b.n	9001801a <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
9001816e:	f04f 0800 	mov.w	r8, #0
90018172:	eba3 0208 	sub.w	r2, r3, r8
90018176:	2a00      	cmp	r2, #0
90018178:	f77f af53 	ble.w	90018022 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
9001817c:	f9bc 6008 	ldrsh.w	r6, [ip, #8]
90018180:	140a      	asrs	r2, r1, #16
90018182:	9f01      	ldr	r7, [sp, #4]
90018184:	1405      	asrs	r5, r0, #16
90018186:	fb06 7202 	mla	r2, r6, r2, r7
9001818a:	5d52      	ldrb	r2, [r2, r5]
9001818c:	9d02      	ldr	r5, [sp, #8]
9001818e:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
90018192:	0e2e      	lsrs	r6, r5, #24
90018194:	d044      	beq.n	90018220 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a8>
90018196:	9a05      	ldr	r2, [sp, #20]
90018198:	f3c5 2a07 	ubfx	sl, r5, #8, #8
9001819c:	f834 e018 	ldrh.w	lr, [r4, r8, lsl #1]
900181a0:	4356      	muls	r6, r2
900181a2:	ea4f 272e 	mov.w	r7, lr, asr #8
900181a6:	1c72      	adds	r2, r6, #1
900181a8:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
900181ac:	eb02 2226 	add.w	r2, r2, r6, asr #8
900181b0:	f3c5 4607 	ubfx	r6, r5, #16, #8
900181b4:	b2ed      	uxtb	r5, r5
900181b6:	1212      	asrs	r2, r2, #8
900181b8:	fa1f f982 	uxth.w	r9, r2
900181bc:	43d2      	mvns	r2, r2
900181be:	fb16 f609 	smulbb	r6, r6, r9
900181c2:	b2d2      	uxtb	r2, r2
900181c4:	fb15 f509 	smulbb	r5, r5, r9
900181c8:	fb07 6702 	mla	r7, r7, r2, r6
900181cc:	ea4f 06ee 	mov.w	r6, lr, asr #3
900181d0:	fb1a fa09 	smulbb	sl, sl, r9
900181d4:	ea4f 0ece 	mov.w	lr, lr, lsl #3
900181d8:	b2bf      	uxth	r7, r7
900181da:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
900181de:	fa5f fe8e 	uxtb.w	lr, lr
900181e2:	fb06 a602 	mla	r6, r6, r2, sl
900181e6:	fb0e 5502 	mla	r5, lr, r2, r5
900181ea:	1c7a      	adds	r2, r7, #1
900181ec:	b2b6      	uxth	r6, r6
900181ee:	b2ad      	uxth	r5, r5
900181f0:	eb02 2717 	add.w	r7, r2, r7, lsr #8
900181f4:	f105 0a01 	add.w	sl, r5, #1
900181f8:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
900181fc:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
90018200:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
90018204:	ea4a 0707 	orr.w	r7, sl, r7
90018208:	f106 0a01 	add.w	sl, r6, #1
9001820c:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
90018210:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
90018214:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
90018218:	ea47 070a 	orr.w	r7, r7, sl
9001821c:	f824 7018 	strh.w	r7, [r4, r8, lsl #1]
90018220:	9a13      	ldr	r2, [sp, #76]	; 0x4c
90018222:	f108 0801 	add.w	r8, r8, #1
90018226:	4410      	add	r0, r2
90018228:	9a14      	ldr	r2, [sp, #80]	; 0x50
9001822a:	4411      	add	r1, r2
9001822c:	e7a1      	b.n	90018172 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
9001822e:	b007      	add	sp, #28
90018230:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

90018234 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
90018234:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90018238:	b085      	sub	sp, #20
9001823a:	468b      	mov	fp, r1
9001823c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
90018240:	9813      	ldr	r0, [sp, #76]	; 0x4c
90018242:	9203      	str	r2, [sp, #12]
90018244:	6841      	ldr	r1, [r0, #4]
90018246:	f8dd e058 	ldr.w	lr, [sp, #88]	; 0x58
9001824a:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
9001824e:	fb01 2404 	mla	r4, r1, r4, r2
90018252:	6802      	ldr	r2, [r0, #0]
90018254:	eb02 0444 	add.w	r4, r2, r4, lsl #1
90018258:	f8de 2000 	ldr.w	r2, [lr]
9001825c:	9200      	str	r2, [sp, #0]
9001825e:	f8de 2004 	ldr.w	r2, [lr, #4]
90018262:	3204      	adds	r2, #4
90018264:	9201      	str	r2, [sp, #4]
90018266:	f1bb 0f00 	cmp.w	fp, #0
9001826a:	dc03      	bgt.n	90018274 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
9001826c:	9a03      	ldr	r2, [sp, #12]
9001826e:	2a00      	cmp	r2, #0
90018270:	f340 8153 	ble.w	9001851a <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e6>
90018274:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
90018276:	f9be 7008 	ldrsh.w	r7, [lr, #8]
9001827a:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
9001827e:	9a10      	ldr	r2, [sp, #64]	; 0x40
90018280:	f9be 600c 	ldrsh.w	r6, [lr, #12]
90018284:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
90018288:	2b00      	cmp	r3, #0
9001828a:	dd0e      	ble.n	900182aa <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
9001828c:	1408      	asrs	r0, r1, #16
9001828e:	d405      	bmi.n	9001829c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
90018290:	42b8      	cmp	r0, r7
90018292:	da03      	bge.n	9001829c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
90018294:	1410      	asrs	r0, r2, #16
90018296:	d401      	bmi.n	9001829c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
90018298:	42b0      	cmp	r0, r6
9001829a:	db07      	blt.n	900182ac <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
9001829c:	9811      	ldr	r0, [sp, #68]	; 0x44
9001829e:	3b01      	subs	r3, #1
900182a0:	3402      	adds	r4, #2
900182a2:	4401      	add	r1, r0
900182a4:	9812      	ldr	r0, [sp, #72]	; 0x48
900182a6:	4402      	add	r2, r0
900182a8:	e7ee      	b.n	90018288 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
900182aa:	d017      	beq.n	900182dc <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
900182ac:	1e58      	subs	r0, r3, #1
900182ae:	9d11      	ldr	r5, [sp, #68]	; 0x44
900182b0:	fb05 1500 	mla	r5, r5, r0, r1
900182b4:	142d      	asrs	r5, r5, #16
900182b6:	d409      	bmi.n	900182cc <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
900182b8:	42bd      	cmp	r5, r7
900182ba:	da07      	bge.n	900182cc <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
900182bc:	9d12      	ldr	r5, [sp, #72]	; 0x48
900182be:	fb05 2000 	mla	r0, r5, r0, r2
900182c2:	1400      	asrs	r0, r0, #16
900182c4:	d402      	bmi.n	900182cc <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
900182c6:	42b0      	cmp	r0, r6
900182c8:	f2c0 80bc 	blt.w	90018444 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x210>
900182cc:	2600      	movs	r6, #0
900182ce:	1998      	adds	r0, r3, r6
900182d0:	2800      	cmp	r0, #0
900182d2:	dc3e      	bgt.n	90018352 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
900182d4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
900182d8:	eb04 0443 	add.w	r4, r4, r3, lsl #1
900182dc:	f1bb 0f00 	cmp.w	fp, #0
900182e0:	f340 811b 	ble.w	9001851a <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e6>
900182e4:	ee30 0a04 	vadd.f32	s0, s0, s8
900182e8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
900182ea:	ee70 0aa4 	vadd.f32	s1, s1, s9
900182ee:	f1bb 0b01 	subs.w	fp, fp, #1
900182f2:	eeb0 6a62 	vmov.f32	s12, s5
900182f6:	eec6 7a80 	vdiv.f32	s15, s13, s0
900182fa:	ee31 1a05 	vadd.f32	s2, s2, s10
900182fe:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
90018302:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
90018306:	eeb0 6a43 	vmov.f32	s12, s6
9001830a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
9001830e:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
90018312:	ee20 7aa7 	vmul.f32	s14, s1, s15
90018316:	ee61 7a27 	vmul.f32	s15, s2, s15
9001831a:	ee77 2a62 	vsub.f32	s5, s14, s5
9001831e:	ee37 3ac3 	vsub.f32	s6, s15, s6
90018322:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
90018326:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
9001832a:	ee12 2a90 	vmov	r2, s5
9001832e:	eef0 2a47 	vmov.f32	s5, s14
90018332:	fb92 f3f3 	sdiv	r3, r2, r3
90018336:	ee13 2a10 	vmov	r2, s6
9001833a:	9311      	str	r3, [sp, #68]	; 0x44
9001833c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
9001833e:	eeb0 3a67 	vmov.f32	s6, s15
90018342:	fb92 f3f3 	sdiv	r3, r2, r3
90018346:	9a03      	ldr	r2, [sp, #12]
90018348:	9312      	str	r3, [sp, #72]	; 0x48
9001834a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
9001834c:	bf08      	it	eq
9001834e:	4613      	moveq	r3, r2
90018350:	e789      	b.n	90018266 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32>
90018352:	140f      	asrs	r7, r1, #16
90018354:	d426      	bmi.n	900183a4 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
90018356:	f8de 5008 	ldr.w	r5, [lr, #8]
9001835a:	42bd      	cmp	r5, r7
9001835c:	dd22      	ble.n	900183a4 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
9001835e:	ea5f 4c22 	movs.w	ip, r2, asr #16
90018362:	d41f      	bmi.n	900183a4 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
90018364:	f8de 000c 	ldr.w	r0, [lr, #12]
90018368:	4560      	cmp	r0, ip
9001836a:	dd1b      	ble.n	900183a4 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
9001836c:	9800      	ldr	r0, [sp, #0]
9001836e:	b22d      	sxth	r5, r5
90018370:	fb0c 0505 	mla	r5, ip, r5, r0
90018374:	5de8      	ldrb	r0, [r5, r7]
90018376:	9d01      	ldr	r5, [sp, #4]
90018378:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
9001837c:	0e07      	lsrs	r7, r0, #24
9001837e:	2fff      	cmp	r7, #255	; 0xff
90018380:	d116      	bne.n	900183b0 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
90018382:	f06f 0501 	mvn.w	r5, #1
90018386:	fb05 f706 	mul.w	r7, r5, r6
9001838a:	f2a5 75fe 	subw	r5, r5, #2046	; 0x7fe
9001838e:	ea05 2c10 	and.w	ip, r5, r0, lsr #8
90018392:	0945      	lsrs	r5, r0, #5
90018394:	f3c0 00c4 	ubfx	r0, r0, #3, #5
90018398:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
9001839c:	ea4c 0505 	orr.w	r5, ip, r5
900183a0:	4305      	orrs	r5, r0
900183a2:	53e5      	strh	r5, [r4, r7]
900183a4:	9811      	ldr	r0, [sp, #68]	; 0x44
900183a6:	3e01      	subs	r6, #1
900183a8:	4401      	add	r1, r0
900183aa:	9812      	ldr	r0, [sp, #72]	; 0x48
900183ac:	4402      	add	r2, r0
900183ae:	e78e      	b.n	900182ce <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
900183b0:	b2fd      	uxtb	r5, r7
900183b2:	2f00      	cmp	r7, #0
900183b4:	d0f6      	beq.n	900183a4 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
900183b6:	f06f 0701 	mvn.w	r7, #1
900183ba:	fa1f f985 	uxth.w	r9, r5
900183be:	43ed      	mvns	r5, r5
900183c0:	f3c0 2a07 	ubfx	sl, r0, #8, #8
900183c4:	4377      	muls	r7, r6
900183c6:	fb1a fa09 	smulbb	sl, sl, r9
900183ca:	b2ed      	uxtb	r5, r5
900183cc:	f834 8007 	ldrh.w	r8, [r4, r7]
900183d0:	9702      	str	r7, [sp, #8]
900183d2:	f3c0 4707 	ubfx	r7, r0, #16, #8
900183d6:	ea4f 2c28 	mov.w	ip, r8, asr #8
900183da:	fb17 f709 	smulbb	r7, r7, r9
900183de:	b2c0      	uxtb	r0, r0
900183e0:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
900183e4:	fb10 f009 	smulbb	r0, r0, r9
900183e8:	fb0c 7c05 	mla	ip, ip, r5, r7
900183ec:	ea4f 07e8 	mov.w	r7, r8, asr #3
900183f0:	ea4f 08c8 	mov.w	r8, r8, lsl #3
900183f4:	fa1f fc8c 	uxth.w	ip, ip
900183f8:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
900183fc:	fa5f f888 	uxtb.w	r8, r8
90018400:	fb07 a705 	mla	r7, r7, r5, sl
90018404:	fb08 0005 	mla	r0, r8, r5, r0
90018408:	f10c 0501 	add.w	r5, ip, #1
9001840c:	b2bf      	uxth	r7, r7
9001840e:	b280      	uxth	r0, r0
90018410:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
90018414:	f100 0a01 	add.w	sl, r0, #1
90018418:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
9001841c:	eb0a 2a10 	add.w	sl, sl, r0, lsr #8
90018420:	9802      	ldr	r0, [sp, #8]
90018422:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
90018426:	ea4a 0c0c 	orr.w	ip, sl, ip
9001842a:	f107 0a01 	add.w	sl, r7, #1
9001842e:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
90018432:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
90018436:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
9001843a:	ea4c 0c0a 	orr.w	ip, ip, sl
9001843e:	f824 c000 	strh.w	ip, [r4, r0]
90018442:	e7af      	b.n	900183a4 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
90018444:	f04f 0800 	mov.w	r8, #0
90018448:	eba3 0008 	sub.w	r0, r3, r8
9001844c:	2800      	cmp	r0, #0
9001844e:	f77f af41 	ble.w	900182d4 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
90018452:	f9be 6008 	ldrsh.w	r6, [lr, #8]
90018456:	1410      	asrs	r0, r2, #16
90018458:	9f00      	ldr	r7, [sp, #0]
9001845a:	140d      	asrs	r5, r1, #16
9001845c:	fb06 7000 	mla	r0, r6, r0, r7
90018460:	5d40      	ldrb	r0, [r0, r5]
90018462:	9d01      	ldr	r5, [sp, #4]
90018464:	f855 5020 	ldr.w	r5, [r5, r0, lsl #2]
90018468:	0e2e      	lsrs	r6, r5, #24
9001846a:	2eff      	cmp	r6, #255	; 0xff
9001846c:	d112      	bne.n	90018494 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x260>
9001846e:	482c      	ldr	r0, [pc, #176]	; (90018520 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ec>)
90018470:	ea00 2615 	and.w	r6, r0, r5, lsr #8
90018474:	0968      	lsrs	r0, r5, #5
90018476:	f3c5 05c4 	ubfx	r5, r5, #3, #5
9001847a:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
9001847e:	4330      	orrs	r0, r6
90018480:	4328      	orrs	r0, r5
90018482:	f824 0018 	strh.w	r0, [r4, r8, lsl #1]
90018486:	9811      	ldr	r0, [sp, #68]	; 0x44
90018488:	f108 0801 	add.w	r8, r8, #1
9001848c:	4401      	add	r1, r0
9001848e:	9812      	ldr	r0, [sp, #72]	; 0x48
90018490:	4402      	add	r2, r0
90018492:	e7d9      	b.n	90018448 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
90018494:	b2f0      	uxtb	r0, r6
90018496:	2e00      	cmp	r6, #0
90018498:	d0f5      	beq.n	90018486 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
9001849a:	f834 c018 	ldrh.w	ip, [r4, r8, lsl #1]
9001849e:	fa1f f980 	uxth.w	r9, r0
900184a2:	f3c5 4607 	ubfx	r6, r5, #16, #8
900184a6:	43c0      	mvns	r0, r0
900184a8:	ea4f 272c 	mov.w	r7, ip, asr #8
900184ac:	f3c5 2a07 	ubfx	sl, r5, #8, #8
900184b0:	fb16 f609 	smulbb	r6, r6, r9
900184b4:	b2c0      	uxtb	r0, r0
900184b6:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
900184ba:	b2ed      	uxtb	r5, r5
900184bc:	fb1a fa09 	smulbb	sl, sl, r9
900184c0:	fb07 6700 	mla	r7, r7, r0, r6
900184c4:	ea4f 06ec 	mov.w	r6, ip, asr #3
900184c8:	fb15 f509 	smulbb	r5, r5, r9
900184cc:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
900184d0:	b2bf      	uxth	r7, r7
900184d2:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
900184d6:	fa5f fc8c 	uxtb.w	ip, ip
900184da:	fb06 a600 	mla	r6, r6, r0, sl
900184de:	fb0c 5500 	mla	r5, ip, r0, r5
900184e2:	1c78      	adds	r0, r7, #1
900184e4:	b2b6      	uxth	r6, r6
900184e6:	b2ad      	uxth	r5, r5
900184e8:	eb00 2717 	add.w	r7, r0, r7, lsr #8
900184ec:	f105 0a01 	add.w	sl, r5, #1
900184f0:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
900184f4:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
900184f8:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
900184fc:	ea4a 0707 	orr.w	r7, sl, r7
90018500:	f106 0a01 	add.w	sl, r6, #1
90018504:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
90018508:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
9001850c:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
90018510:	ea47 070a 	orr.w	r7, r7, sl
90018514:	f824 7018 	strh.w	r7, [r4, r8, lsl #1]
90018518:	e7b5      	b.n	90018486 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
9001851a:	b005      	add	sp, #20
9001851c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90018520:	fffff800 	.word	0xfffff800

90018524 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
90018524:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90018528:	b087      	sub	sp, #28
9001852a:	468b      	mov	fp, r1
9001852c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
90018530:	9c15      	ldr	r4, [sp, #84]	; 0x54
90018532:	9204      	str	r2, [sp, #16]
90018534:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
90018538:	6861      	ldr	r1, [r4, #4]
9001853a:	9205      	str	r2, [sp, #20]
9001853c:	f8dd e060 	ldr.w	lr, [sp, #96]	; 0x60
90018540:	e9dd 2016 	ldrd	r2, r0, [sp, #88]	; 0x58
90018544:	fb01 2000 	mla	r0, r1, r0, r2
90018548:	6822      	ldr	r2, [r4, #0]
9001854a:	eb02 0040 	add.w	r0, r2, r0, lsl #1
9001854e:	f8de 2000 	ldr.w	r2, [lr]
90018552:	9201      	str	r2, [sp, #4]
90018554:	f8de 2004 	ldr.w	r2, [lr, #4]
90018558:	9202      	str	r2, [sp, #8]
9001855a:	f1bb 0f00 	cmp.w	fp, #0
9001855e:	dc03      	bgt.n	90018568 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44>
90018560:	9a04      	ldr	r2, [sp, #16]
90018562:	2a00      	cmp	r2, #0
90018564:	f340 8142 	ble.w	900187ec <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c8>
90018568:	9a11      	ldr	r2, [sp, #68]	; 0x44
9001856a:	f9be 7008 	ldrsh.w	r7, [lr, #8]
9001856e:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
90018572:	9a12      	ldr	r2, [sp, #72]	; 0x48
90018574:	f9be 600c 	ldrsh.w	r6, [lr, #12]
90018578:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
9001857c:	2b00      	cmp	r3, #0
9001857e:	dd0e      	ble.n	9001859e <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
90018580:	140c      	asrs	r4, r1, #16
90018582:	d405      	bmi.n	90018590 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
90018584:	42bc      	cmp	r4, r7
90018586:	da03      	bge.n	90018590 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
90018588:	1414      	asrs	r4, r2, #16
9001858a:	d401      	bmi.n	90018590 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
9001858c:	42b4      	cmp	r4, r6
9001858e:	db07      	blt.n	900185a0 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
90018590:	9c13      	ldr	r4, [sp, #76]	; 0x4c
90018592:	3b01      	subs	r3, #1
90018594:	3002      	adds	r0, #2
90018596:	4421      	add	r1, r4
90018598:	9c14      	ldr	r4, [sp, #80]	; 0x50
9001859a:	4422      	add	r2, r4
9001859c:	e7ee      	b.n	9001857c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
9001859e:	d019      	beq.n	900185d4 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
900185a0:	1e5c      	subs	r4, r3, #1
900185a2:	9d13      	ldr	r5, [sp, #76]	; 0x4c
900185a4:	fb05 1504 	mla	r5, r5, r4, r1
900185a8:	142d      	asrs	r5, r5, #16
900185aa:	d409      	bmi.n	900185c0 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
900185ac:	42bd      	cmp	r5, r7
900185ae:	da07      	bge.n	900185c0 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
900185b0:	9d14      	ldr	r5, [sp, #80]	; 0x50
900185b2:	fb05 2404 	mla	r4, r5, r4, r2
900185b6:	1424      	asrs	r4, r4, #16
900185b8:	d402      	bmi.n	900185c0 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
900185ba:	42b4      	cmp	r4, r6
900185bc:	f2c0 80b1 	blt.w	90018722 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fe>
900185c0:	f04f 0800 	mov.w	r8, #0
900185c4:	eb03 0408 	add.w	r4, r3, r8
900185c8:	2c00      	cmp	r4, #0
900185ca:	dc3e      	bgt.n	9001864a <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
900185cc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
900185d0:	eb00 0043 	add.w	r0, r0, r3, lsl #1
900185d4:	f1bb 0f00 	cmp.w	fp, #0
900185d8:	f340 8108 	ble.w	900187ec <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c8>
900185dc:	ee30 0a04 	vadd.f32	s0, s0, s8
900185e0:	9b10      	ldr	r3, [sp, #64]	; 0x40
900185e2:	ee70 0aa4 	vadd.f32	s1, s1, s9
900185e6:	f1bb 0b01 	subs.w	fp, fp, #1
900185ea:	eeb0 6a62 	vmov.f32	s12, s5
900185ee:	eec6 7a80 	vdiv.f32	s15, s13, s0
900185f2:	ee31 1a05 	vadd.f32	s2, s2, s10
900185f6:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
900185fa:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
900185fe:	eeb0 6a43 	vmov.f32	s12, s6
90018602:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
90018606:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
9001860a:	ee20 7aa7 	vmul.f32	s14, s1, s15
9001860e:	ee61 7a27 	vmul.f32	s15, s2, s15
90018612:	ee77 2a62 	vsub.f32	s5, s14, s5
90018616:	ee37 3ac3 	vsub.f32	s6, s15, s6
9001861a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
9001861e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
90018622:	ee12 2a90 	vmov	r2, s5
90018626:	eef0 2a47 	vmov.f32	s5, s14
9001862a:	fb92 f3f3 	sdiv	r3, r2, r3
9001862e:	ee13 2a10 	vmov	r2, s6
90018632:	9313      	str	r3, [sp, #76]	; 0x4c
90018634:	9b10      	ldr	r3, [sp, #64]	; 0x40
90018636:	eeb0 3a67 	vmov.f32	s6, s15
9001863a:	fb92 f3f3 	sdiv	r3, r2, r3
9001863e:	9a04      	ldr	r2, [sp, #16]
90018640:	9314      	str	r3, [sp, #80]	; 0x50
90018642:	9b10      	ldr	r3, [sp, #64]	; 0x40
90018644:	bf08      	it	eq
90018646:	4613      	moveq	r3, r2
90018648:	e787      	b.n	9001855a <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
9001864a:	140e      	asrs	r6, r1, #16
9001864c:	d462      	bmi.n	90018714 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
9001864e:	f8de 5008 	ldr.w	r5, [lr, #8]
90018652:	42b5      	cmp	r5, r6
90018654:	dd5e      	ble.n	90018714 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
90018656:	1417      	asrs	r7, r2, #16
90018658:	d45c      	bmi.n	90018714 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
9001865a:	f8de 400c 	ldr.w	r4, [lr, #12]
9001865e:	42bc      	cmp	r4, r7
90018660:	dd58      	ble.n	90018714 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
90018662:	b22d      	sxth	r5, r5
90018664:	9c02      	ldr	r4, [sp, #8]
90018666:	fb07 6505 	mla	r5, r7, r5, r6
9001866a:	5d66      	ldrb	r6, [r4, r5]
9001866c:	2e00      	cmp	r6, #0
9001866e:	d051      	beq.n	90018714 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
90018670:	9c01      	ldr	r4, [sp, #4]
90018672:	f834 9015 	ldrh.w	r9, [r4, r5, lsl #1]
90018676:	f06f 0401 	mvn.w	r4, #1
9001867a:	fb04 f408 	mul.w	r4, r4, r8
9001867e:	ea4f 2c29 	mov.w	ip, r9, asr #8
90018682:	5b05      	ldrh	r5, [r0, r4]
90018684:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
90018688:	9403      	str	r4, [sp, #12]
9001868a:	9c05      	ldr	r4, [sp, #20]
9001868c:	ea4f 0ae5 	mov.w	sl, r5, asr #3
90018690:	4366      	muls	r6, r4
90018692:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
90018696:	1c74      	adds	r4, r6, #1
90018698:	eb04 2416 	add.w	r4, r4, r6, lsr #8
9001869c:	122e      	asrs	r6, r5, #8
9001869e:	1224      	asrs	r4, r4, #8
900186a0:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
900186a4:	00ed      	lsls	r5, r5, #3
900186a6:	b2a7      	uxth	r7, r4
900186a8:	43e4      	mvns	r4, r4
900186aa:	b2ed      	uxtb	r5, r5
900186ac:	b2e4      	uxtb	r4, r4
900186ae:	fb16 f604 	smulbb	r6, r6, r4
900186b2:	fb15 f504 	smulbb	r5, r5, r4
900186b6:	fb0c 6c07 	mla	ip, ip, r7, r6
900186ba:	ea4f 06e9 	mov.w	r6, r9, asr #3
900186be:	fb1a fa04 	smulbb	sl, sl, r4
900186c2:	ea4f 09c9 	mov.w	r9, r9, lsl #3
900186c6:	fa1f fc8c 	uxth.w	ip, ip
900186ca:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
900186ce:	fa5f f989 	uxtb.w	r9, r9
900186d2:	fb06 a607 	mla	r6, r6, r7, sl
900186d6:	f10c 0401 	add.w	r4, ip, #1
900186da:	fb09 5507 	mla	r5, r9, r7, r5
900186de:	eb04 2c1c 	add.w	ip, r4, ip, lsr #8
900186e2:	9c03      	ldr	r4, [sp, #12]
900186e4:	b2ad      	uxth	r5, r5
900186e6:	b2b6      	uxth	r6, r6
900186e8:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
900186ec:	f105 0a01 	add.w	sl, r5, #1
900186f0:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
900186f4:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
900186f8:	ea4a 0c0c 	orr.w	ip, sl, ip
900186fc:	f106 0a01 	add.w	sl, r6, #1
90018700:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
90018704:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
90018708:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
9001870c:	ea4c 0c0a 	orr.w	ip, ip, sl
90018710:	f820 c004 	strh.w	ip, [r0, r4]
90018714:	9c13      	ldr	r4, [sp, #76]	; 0x4c
90018716:	f108 38ff 	add.w	r8, r8, #4294967295
9001871a:	4421      	add	r1, r4
9001871c:	9c14      	ldr	r4, [sp, #80]	; 0x50
9001871e:	4422      	add	r2, r4
90018720:	e750      	b.n	900185c4 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
90018722:	f04f 0900 	mov.w	r9, #0
90018726:	eba3 0409 	sub.w	r4, r3, r9
9001872a:	2c00      	cmp	r4, #0
9001872c:	f77f af4e 	ble.w	900185cc <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
90018730:	f9be 6008 	ldrsh.w	r6, [lr, #8]
90018734:	140d      	asrs	r5, r1, #16
90018736:	1414      	asrs	r4, r2, #16
90018738:	fb06 5404 	mla	r4, r6, r4, r5
9001873c:	9d02      	ldr	r5, [sp, #8]
9001873e:	5d2e      	ldrb	r6, [r5, r4]
90018740:	2e00      	cmp	r6, #0
90018742:	d04c      	beq.n	900187de <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
90018744:	9d01      	ldr	r5, [sp, #4]
90018746:	f835 8014 	ldrh.w	r8, [r5, r4, lsl #1]
9001874a:	9c05      	ldr	r4, [sp, #20]
9001874c:	f830 5019 	ldrh.w	r5, [r0, r9, lsl #1]
90018750:	ea4f 2c28 	mov.w	ip, r8, asr #8
90018754:	4366      	muls	r6, r4
90018756:	ea4f 0ae5 	mov.w	sl, r5, asr #3
9001875a:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
9001875e:	1c74      	adds	r4, r6, #1
90018760:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
90018764:	eb04 2416 	add.w	r4, r4, r6, lsr #8
90018768:	122e      	asrs	r6, r5, #8
9001876a:	1224      	asrs	r4, r4, #8
9001876c:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
90018770:	00ed      	lsls	r5, r5, #3
90018772:	b2a7      	uxth	r7, r4
90018774:	43e4      	mvns	r4, r4
90018776:	b2ed      	uxtb	r5, r5
90018778:	b2e4      	uxtb	r4, r4
9001877a:	fb16 f604 	smulbb	r6, r6, r4
9001877e:	fb15 f504 	smulbb	r5, r5, r4
90018782:	fb0c 6c07 	mla	ip, ip, r7, r6
90018786:	ea4f 06e8 	mov.w	r6, r8, asr #3
9001878a:	fb1a fa04 	smulbb	sl, sl, r4
9001878e:	ea4f 08c8 	mov.w	r8, r8, lsl #3
90018792:	fa1f fc8c 	uxth.w	ip, ip
90018796:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
9001879a:	fa5f f888 	uxtb.w	r8, r8
9001879e:	fb06 a607 	mla	r6, r6, r7, sl
900187a2:	f10c 0401 	add.w	r4, ip, #1
900187a6:	fb08 5507 	mla	r5, r8, r7, r5
900187aa:	eb04 2c1c 	add.w	ip, r4, ip, lsr #8
900187ae:	b2ad      	uxth	r5, r5
900187b0:	b2b6      	uxth	r6, r6
900187b2:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
900187b6:	f105 0a01 	add.w	sl, r5, #1
900187ba:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
900187be:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
900187c2:	ea4a 0c0c 	orr.w	ip, sl, ip
900187c6:	f106 0a01 	add.w	sl, r6, #1
900187ca:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
900187ce:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
900187d2:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
900187d6:	ea4c 0c0a 	orr.w	ip, ip, sl
900187da:	f820 c019 	strh.w	ip, [r0, r9, lsl #1]
900187de:	9c13      	ldr	r4, [sp, #76]	; 0x4c
900187e0:	f109 0901 	add.w	r9, r9, #1
900187e4:	4421      	add	r1, r4
900187e6:	9c14      	ldr	r4, [sp, #80]	; 0x50
900187e8:	4422      	add	r2, r4
900187ea:	e79c      	b.n	90018726 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x202>
900187ec:	b007      	add	sp, #28
900187ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

900187f2 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
900187f2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
900187f6:	b085      	sub	sp, #20
900187f8:	468b      	mov	fp, r1
900187fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
900187fe:	9c13      	ldr	r4, [sp, #76]	; 0x4c
90018800:	9203      	str	r2, [sp, #12]
90018802:	6861      	ldr	r1, [r4, #4]
90018804:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
90018808:	e9dd 2014 	ldrd	r2, r0, [sp, #80]	; 0x50
9001880c:	fb01 2000 	mla	r0, r1, r0, r2
90018810:	6822      	ldr	r2, [r4, #0]
90018812:	eb02 0040 	add.w	r0, r2, r0, lsl #1
90018816:	f8d8 2000 	ldr.w	r2, [r8]
9001881a:	9200      	str	r2, [sp, #0]
9001881c:	f8d8 2004 	ldr.w	r2, [r8, #4]
90018820:	9201      	str	r2, [sp, #4]
90018822:	f1bb 0f00 	cmp.w	fp, #0
90018826:	dc03      	bgt.n	90018830 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
90018828:	9a03      	ldr	r2, [sp, #12]
9001882a:	2a00      	cmp	r2, #0
9001882c:	f340 8146 	ble.w	90018abc <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
90018830:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
90018832:	f9b8 7008 	ldrsh.w	r7, [r8, #8]
90018836:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
9001883a:	9a10      	ldr	r2, [sp, #64]	; 0x40
9001883c:	f9b8 600c 	ldrsh.w	r6, [r8, #12]
90018840:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
90018844:	2b00      	cmp	r3, #0
90018846:	dd0e      	ble.n	90018866 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
90018848:	140c      	asrs	r4, r1, #16
9001884a:	d405      	bmi.n	90018858 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
9001884c:	42bc      	cmp	r4, r7
9001884e:	da03      	bge.n	90018858 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
90018850:	1414      	asrs	r4, r2, #16
90018852:	d401      	bmi.n	90018858 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
90018854:	42b4      	cmp	r4, r6
90018856:	db07      	blt.n	90018868 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
90018858:	9c11      	ldr	r4, [sp, #68]	; 0x44
9001885a:	3b01      	subs	r3, #1
9001885c:	3002      	adds	r0, #2
9001885e:	4421      	add	r1, r4
90018860:	9c12      	ldr	r4, [sp, #72]	; 0x48
90018862:	4422      	add	r2, r4
90018864:	e7ee      	b.n	90018844 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
90018866:	d017      	beq.n	90018898 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
90018868:	1e5c      	subs	r4, r3, #1
9001886a:	9d11      	ldr	r5, [sp, #68]	; 0x44
9001886c:	fb05 1504 	mla	r5, r5, r4, r1
90018870:	142d      	asrs	r5, r5, #16
90018872:	d409      	bmi.n	90018888 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
90018874:	42bd      	cmp	r5, r7
90018876:	da07      	bge.n	90018888 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
90018878:	9d12      	ldr	r5, [sp, #72]	; 0x48
9001887a:	fb05 2404 	mla	r4, r5, r4, r2
9001887e:	1424      	asrs	r4, r4, #16
90018880:	d402      	bmi.n	90018888 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
90018882:	42b4      	cmp	r4, r6
90018884:	f2c0 80b3 	blt.w	900189ee <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fc>
90018888:	2600      	movs	r6, #0
9001888a:	199c      	adds	r4, r3, r6
9001888c:	2c00      	cmp	r4, #0
9001888e:	dc3e      	bgt.n	9001890e <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
90018890:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
90018894:	eb00 0043 	add.w	r0, r0, r3, lsl #1
90018898:	f1bb 0f00 	cmp.w	fp, #0
9001889c:	f340 810e 	ble.w	90018abc <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
900188a0:	ee30 0a04 	vadd.f32	s0, s0, s8
900188a4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
900188a6:	ee70 0aa4 	vadd.f32	s1, s1, s9
900188aa:	f1bb 0b01 	subs.w	fp, fp, #1
900188ae:	eeb0 6a62 	vmov.f32	s12, s5
900188b2:	eec6 7a80 	vdiv.f32	s15, s13, s0
900188b6:	ee31 1a05 	vadd.f32	s2, s2, s10
900188ba:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
900188be:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
900188c2:	eeb0 6a43 	vmov.f32	s12, s6
900188c6:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
900188ca:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
900188ce:	ee20 7aa7 	vmul.f32	s14, s1, s15
900188d2:	ee61 7a27 	vmul.f32	s15, s2, s15
900188d6:	ee77 2a62 	vsub.f32	s5, s14, s5
900188da:	ee37 3ac3 	vsub.f32	s6, s15, s6
900188de:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
900188e2:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
900188e6:	ee12 2a90 	vmov	r2, s5
900188ea:	eef0 2a47 	vmov.f32	s5, s14
900188ee:	fb92 f3f3 	sdiv	r3, r2, r3
900188f2:	ee13 2a10 	vmov	r2, s6
900188f6:	9311      	str	r3, [sp, #68]	; 0x44
900188f8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
900188fa:	eeb0 3a67 	vmov.f32	s6, s15
900188fe:	fb92 f3f3 	sdiv	r3, r2, r3
90018902:	9a03      	ldr	r2, [sp, #12]
90018904:	9312      	str	r3, [sp, #72]	; 0x48
90018906:	9b0e      	ldr	r3, [sp, #56]	; 0x38
90018908:	bf08      	it	eq
9001890a:	4613      	moveq	r3, r2
9001890c:	e789      	b.n	90018822 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
9001890e:	140f      	asrs	r7, r1, #16
90018910:	d418      	bmi.n	90018944 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
90018912:	f8d8 5008 	ldr.w	r5, [r8, #8]
90018916:	42bd      	cmp	r5, r7
90018918:	dd14      	ble.n	90018944 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
9001891a:	ea5f 4c22 	movs.w	ip, r2, asr #16
9001891e:	d411      	bmi.n	90018944 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
90018920:	f8d8 400c 	ldr.w	r4, [r8, #12]
90018924:	4564      	cmp	r4, ip
90018926:	dd0d      	ble.n	90018944 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
90018928:	b22d      	sxth	r5, r5
9001892a:	9c01      	ldr	r4, [sp, #4]
9001892c:	fb0c 7505 	mla	r5, ip, r5, r7
90018930:	5d64      	ldrb	r4, [r4, r5]
90018932:	2cff      	cmp	r4, #255	; 0xff
90018934:	d10c      	bne.n	90018950 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15e>
90018936:	9c00      	ldr	r4, [sp, #0]
90018938:	f834 5015 	ldrh.w	r5, [r4, r5, lsl #1]
9001893c:	f06f 0401 	mvn.w	r4, #1
90018940:	4374      	muls	r4, r6
90018942:	5305      	strh	r5, [r0, r4]
90018944:	9c11      	ldr	r4, [sp, #68]	; 0x44
90018946:	3e01      	subs	r6, #1
90018948:	4421      	add	r1, r4
9001894a:	9c12      	ldr	r4, [sp, #72]	; 0x48
9001894c:	4422      	add	r2, r4
9001894e:	e79c      	b.n	9001888a <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
90018950:	2c00      	cmp	r4, #0
90018952:	d0f7      	beq.n	90018944 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
90018954:	9f00      	ldr	r7, [sp, #0]
90018956:	fa1f fc84 	uxth.w	ip, r4
9001895a:	43e4      	mvns	r4, r4
9001895c:	f837 9015 	ldrh.w	r9, [r7, r5, lsl #1]
90018960:	f06f 0501 	mvn.w	r5, #1
90018964:	b2e4      	uxtb	r4, r4
90018966:	4375      	muls	r5, r6
90018968:	ea4f 2e29 	mov.w	lr, r9, asr #8
9001896c:	9502      	str	r5, [sp, #8]
9001896e:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
90018972:	5b45      	ldrh	r5, [r0, r5]
90018974:	122f      	asrs	r7, r5, #8
90018976:	ea4f 0ae5 	mov.w	sl, r5, asr #3
9001897a:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
9001897e:	00ed      	lsls	r5, r5, #3
90018980:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
90018984:	fb17 f704 	smulbb	r7, r7, r4
90018988:	b2ed      	uxtb	r5, r5
9001898a:	fb1a fa04 	smulbb	sl, sl, r4
9001898e:	fb0e 7e0c 	mla	lr, lr, ip, r7
90018992:	ea4f 07e9 	mov.w	r7, r9, asr #3
90018996:	fb15 f504 	smulbb	r5, r5, r4
9001899a:	ea4f 09c9 	mov.w	r9, r9, lsl #3
9001899e:	fa1f fe8e 	uxth.w	lr, lr
900189a2:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
900189a6:	fa5f f989 	uxtb.w	r9, r9
900189aa:	fb07 a70c 	mla	r7, r7, ip, sl
900189ae:	f10e 0401 	add.w	r4, lr, #1
900189b2:	fb09 550c 	mla	r5, r9, ip, r5
900189b6:	eb04 2e1e 	add.w	lr, r4, lr, lsr #8
900189ba:	9c02      	ldr	r4, [sp, #8]
900189bc:	b2ad      	uxth	r5, r5
900189be:	b2bf      	uxth	r7, r7
900189c0:	f40e 4e78 	and.w	lr, lr, #63488	; 0xf800
900189c4:	f105 0a01 	add.w	sl, r5, #1
900189c8:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
900189cc:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
900189d0:	ea4a 0e0e 	orr.w	lr, sl, lr
900189d4:	f107 0a01 	add.w	sl, r7, #1
900189d8:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
900189dc:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
900189e0:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
900189e4:	ea4e 0e0a 	orr.w	lr, lr, sl
900189e8:	f820 e004 	strh.w	lr, [r0, r4]
900189ec:	e7aa      	b.n	90018944 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
900189ee:	f04f 0900 	mov.w	r9, #0
900189f2:	eba3 0409 	sub.w	r4, r3, r9
900189f6:	2c00      	cmp	r4, #0
900189f8:	f77f af4a 	ble.w	90018890 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
900189fc:	1414      	asrs	r4, r2, #16
900189fe:	f9b8 6008 	ldrsh.w	r6, [r8, #8]
90018a02:	140d      	asrs	r5, r1, #16
90018a04:	fb06 5504 	mla	r5, r6, r4, r5
90018a08:	9c01      	ldr	r4, [sp, #4]
90018a0a:	5d64      	ldrb	r4, [r4, r5]
90018a0c:	2cff      	cmp	r4, #255	; 0xff
90018a0e:	d10b      	bne.n	90018a28 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
90018a10:	9c00      	ldr	r4, [sp, #0]
90018a12:	f834 4015 	ldrh.w	r4, [r4, r5, lsl #1]
90018a16:	f820 4019 	strh.w	r4, [r0, r9, lsl #1]
90018a1a:	9c11      	ldr	r4, [sp, #68]	; 0x44
90018a1c:	f109 0901 	add.w	r9, r9, #1
90018a20:	4421      	add	r1, r4
90018a22:	9c12      	ldr	r4, [sp, #72]	; 0x48
90018a24:	4422      	add	r2, r4
90018a26:	e7e4      	b.n	900189f2 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
90018a28:	2c00      	cmp	r4, #0
90018a2a:	d0f6      	beq.n	90018a1a <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
90018a2c:	9e00      	ldr	r6, [sp, #0]
90018a2e:	b2a7      	uxth	r7, r4
90018a30:	43e4      	mvns	r4, r4
90018a32:	f836 e015 	ldrh.w	lr, [r6, r5, lsl #1]
90018a36:	f830 5019 	ldrh.w	r5, [r0, r9, lsl #1]
90018a3a:	b2e4      	uxtb	r4, r4
90018a3c:	ea4f 2c2e 	mov.w	ip, lr, asr #8
90018a40:	122e      	asrs	r6, r5, #8
90018a42:	ea4f 0ae5 	mov.w	sl, r5, asr #3
90018a46:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
90018a4a:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
90018a4e:	00ed      	lsls	r5, r5, #3
90018a50:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
90018a54:	fb16 f604 	smulbb	r6, r6, r4
90018a58:	b2ed      	uxtb	r5, r5
90018a5a:	fb1a fa04 	smulbb	sl, sl, r4
90018a5e:	fb0c 6c07 	mla	ip, ip, r7, r6
90018a62:	ea4f 06ee 	mov.w	r6, lr, asr #3
90018a66:	fb15 f504 	smulbb	r5, r5, r4
90018a6a:	ea4f 0ece 	mov.w	lr, lr, lsl #3
90018a6e:	fa1f fc8c 	uxth.w	ip, ip
90018a72:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
90018a76:	fa5f fe8e 	uxtb.w	lr, lr
90018a7a:	fb06 a607 	mla	r6, r6, r7, sl
90018a7e:	f10c 0401 	add.w	r4, ip, #1
90018a82:	fb0e 5507 	mla	r5, lr, r7, r5
90018a86:	eb04 2c1c 	add.w	ip, r4, ip, lsr #8
90018a8a:	b2ad      	uxth	r5, r5
90018a8c:	b2b6      	uxth	r6, r6
90018a8e:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
90018a92:	f105 0a01 	add.w	sl, r5, #1
90018a96:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
90018a9a:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
90018a9e:	ea4a 0c0c 	orr.w	ip, sl, ip
90018aa2:	f106 0a01 	add.w	sl, r6, #1
90018aa6:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
90018aaa:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
90018aae:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
90018ab2:	ea4c 0c0a 	orr.w	ip, ip, sl
90018ab6:	f820 c019 	strh.w	ip, [r0, r9, lsl #1]
90018aba:	e7ae      	b.n	90018a1a <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
90018abc:	b005      	add	sp, #20
90018abe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

90018ac2 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
90018ac2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90018ac6:	b085      	sub	sp, #20
90018ac8:	9813      	ldr	r0, [sp, #76]	; 0x4c
90018aca:	9203      	str	r2, [sp, #12]
90018acc:	f89d 205c 	ldrb.w	r2, [sp, #92]	; 0x5c
90018ad0:	9100      	str	r1, [sp, #0]
90018ad2:	9201      	str	r2, [sp, #4]
90018ad4:	6841      	ldr	r1, [r0, #4]
90018ad6:	f8dd e058 	ldr.w	lr, [sp, #88]	; 0x58
90018ada:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
90018ade:	fb01 2404 	mla	r4, r1, r4, r2
90018ae2:	6802      	ldr	r2, [r0, #0]
90018ae4:	eb02 0444 	add.w	r4, r2, r4, lsl #1
90018ae8:	f8de 2000 	ldr.w	r2, [lr]
90018aec:	9202      	str	r2, [sp, #8]
90018aee:	9a01      	ldr	r2, [sp, #4]
90018af0:	43d6      	mvns	r6, r2
90018af2:	b2f6      	uxtb	r6, r6
90018af4:	9a00      	ldr	r2, [sp, #0]
90018af6:	2a00      	cmp	r2, #0
90018af8:	dc03      	bgt.n	90018b02 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
90018afa:	9a03      	ldr	r2, [sp, #12]
90018afc:	2a00      	cmp	r2, #0
90018afe:	f340 8124 	ble.w	90018d4a <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
90018b02:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
90018b04:	f9be c008 	ldrsh.w	ip, [lr, #8]
90018b08:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
90018b0c:	9a10      	ldr	r2, [sp, #64]	; 0x40
90018b0e:	f9be 700c 	ldrsh.w	r7, [lr, #12]
90018b12:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
90018b16:	2b00      	cmp	r3, #0
90018b18:	dd0e      	ble.n	90018b38 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
90018b1a:	1408      	asrs	r0, r1, #16
90018b1c:	d405      	bmi.n	90018b2a <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
90018b1e:	4560      	cmp	r0, ip
90018b20:	da03      	bge.n	90018b2a <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
90018b22:	1410      	asrs	r0, r2, #16
90018b24:	d401      	bmi.n	90018b2a <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
90018b26:	42b8      	cmp	r0, r7
90018b28:	db07      	blt.n	90018b3a <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
90018b2a:	9811      	ldr	r0, [sp, #68]	; 0x44
90018b2c:	3b01      	subs	r3, #1
90018b2e:	3402      	adds	r4, #2
90018b30:	4401      	add	r1, r0
90018b32:	9812      	ldr	r0, [sp, #72]	; 0x48
90018b34:	4402      	add	r2, r0
90018b36:	e7ee      	b.n	90018b16 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
90018b38:	d06e      	beq.n	90018c18 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
90018b3a:	1e58      	subs	r0, r3, #1
90018b3c:	9d11      	ldr	r5, [sp, #68]	; 0x44
90018b3e:	fb05 1500 	mla	r5, r5, r0, r1
90018b42:	142d      	asrs	r5, r5, #16
90018b44:	d45c      	bmi.n	90018c00 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
90018b46:	4565      	cmp	r5, ip
90018b48:	da5a      	bge.n	90018c00 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
90018b4a:	9d12      	ldr	r5, [sp, #72]	; 0x48
90018b4c:	fb05 2000 	mla	r0, r5, r0, r2
90018b50:	1400      	asrs	r0, r0, #16
90018b52:	d455      	bmi.n	90018c00 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
90018b54:	42b8      	cmp	r0, r7
90018b56:	da53      	bge.n	90018c00 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
90018b58:	4699      	mov	r9, r3
90018b5a:	46a2      	mov	sl, r4
90018b5c:	f8bd b004 	ldrh.w	fp, [sp, #4]
90018b60:	f1b9 0f00 	cmp.w	r9, #0
90018b64:	dd54      	ble.n	90018c10 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
90018b66:	f9be 7008 	ldrsh.w	r7, [lr, #8]
90018b6a:	140d      	asrs	r5, r1, #16
90018b6c:	1410      	asrs	r0, r2, #16
90018b6e:	f109 39ff 	add.w	r9, r9, #4294967295
90018b72:	fb07 5000 	mla	r0, r7, r0, r5
90018b76:	9d02      	ldr	r5, [sp, #8]
90018b78:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
90018b7c:	f8ba 5000 	ldrh.w	r5, [sl]
90018b80:	ea4f 2c20 	mov.w	ip, r0, asr #8
90018b84:	122f      	asrs	r7, r5, #8
90018b86:	ea4f 08e5 	mov.w	r8, r5, asr #3
90018b8a:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
90018b8e:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
90018b92:	00ed      	lsls	r5, r5, #3
90018b94:	f008 08fc 	and.w	r8, r8, #252	; 0xfc
90018b98:	fb17 f706 	smulbb	r7, r7, r6
90018b9c:	b2ed      	uxtb	r5, r5
90018b9e:	fb18 f806 	smulbb	r8, r8, r6
90018ba2:	fb0c 7c0b 	mla	ip, ip, fp, r7
90018ba6:	10c7      	asrs	r7, r0, #3
90018ba8:	fb15 f506 	smulbb	r5, r5, r6
90018bac:	00c0      	lsls	r0, r0, #3
90018bae:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
90018bb2:	fa1f fc8c 	uxth.w	ip, ip
90018bb6:	b2c0      	uxtb	r0, r0
90018bb8:	fb07 870b 	mla	r7, r7, fp, r8
90018bbc:	fb00 500b 	mla	r0, r0, fp, r5
90018bc0:	f10c 0501 	add.w	r5, ip, #1
90018bc4:	b2bf      	uxth	r7, r7
90018bc6:	b280      	uxth	r0, r0
90018bc8:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
90018bcc:	f107 0801 	add.w	r8, r7, #1
90018bd0:	1c45      	adds	r5, r0, #1
90018bd2:	eb08 2817 	add.w	r8, r8, r7, lsr #8
90018bd6:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
90018bda:	eb05 2510 	add.w	r5, r5, r0, lsr #8
90018bde:	9811      	ldr	r0, [sp, #68]	; 0x44
90018be0:	ea4f 1858 	mov.w	r8, r8, lsr #5
90018be4:	f3c5 25c4 	ubfx	r5, r5, #11, #5
90018be8:	4401      	add	r1, r0
90018bea:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
90018bee:	9812      	ldr	r0, [sp, #72]	; 0x48
90018bf0:	ea45 0c0c 	orr.w	ip, r5, ip
90018bf4:	4402      	add	r2, r0
90018bf6:	ea4c 0c08 	orr.w	ip, ip, r8
90018bfa:	f82a cb02 	strh.w	ip, [sl], #2
90018bfe:	e7af      	b.n	90018b60 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
90018c00:	f04f 0800 	mov.w	r8, #0
90018c04:	f8bd a004 	ldrh.w	sl, [sp, #4]
90018c08:	eb03 0008 	add.w	r0, r3, r8
90018c0c:	2800      	cmp	r0, #0
90018c0e:	dc41      	bgt.n	90018c94 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
90018c10:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
90018c14:	eb04 0443 	add.w	r4, r4, r3, lsl #1
90018c18:	9b00      	ldr	r3, [sp, #0]
90018c1a:	2b00      	cmp	r3, #0
90018c1c:	f340 8095 	ble.w	90018d4a <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
90018c20:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
90018c24:	9b0e      	ldr	r3, [sp, #56]	; 0x38
90018c26:	ee30 0a04 	vadd.f32	s0, s0, s8
90018c2a:	ee70 0aa4 	vadd.f32	s1, s1, s9
90018c2e:	eef0 6a62 	vmov.f32	s13, s5
90018c32:	eec7 7a00 	vdiv.f32	s15, s14, s0
90018c36:	ee31 1a05 	vadd.f32	s2, s2, s10
90018c3a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
90018c3e:	edcd 6a0f 	vstr	s13, [sp, #60]	; 0x3c
90018c42:	eef0 6a43 	vmov.f32	s13, s6
90018c46:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
90018c4a:	edcd 6a10 	vstr	s13, [sp, #64]	; 0x40
90018c4e:	ee20 7aa7 	vmul.f32	s14, s1, s15
90018c52:	ee61 7a27 	vmul.f32	s15, s2, s15
90018c56:	ee77 2a62 	vsub.f32	s5, s14, s5
90018c5a:	ee37 3ac3 	vsub.f32	s6, s15, s6
90018c5e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
90018c62:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
90018c66:	ee12 2a90 	vmov	r2, s5
90018c6a:	eef0 2a47 	vmov.f32	s5, s14
90018c6e:	fb92 f3f3 	sdiv	r3, r2, r3
90018c72:	ee13 2a10 	vmov	r2, s6
90018c76:	9311      	str	r3, [sp, #68]	; 0x44
90018c78:	9b0e      	ldr	r3, [sp, #56]	; 0x38
90018c7a:	eeb0 3a67 	vmov.f32	s6, s15
90018c7e:	fb92 f3f3 	sdiv	r3, r2, r3
90018c82:	9312      	str	r3, [sp, #72]	; 0x48
90018c84:	9b00      	ldr	r3, [sp, #0]
90018c86:	9a03      	ldr	r2, [sp, #12]
90018c88:	3b01      	subs	r3, #1
90018c8a:	9300      	str	r3, [sp, #0]
90018c8c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
90018c8e:	bf08      	it	eq
90018c90:	4613      	moveq	r3, r2
90018c92:	e72f      	b.n	90018af4 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32>
90018c94:	140f      	asrs	r7, r1, #16
90018c96:	d451      	bmi.n	90018d3c <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
90018c98:	f8de 5008 	ldr.w	r5, [lr, #8]
90018c9c:	42bd      	cmp	r5, r7
90018c9e:	dd4d      	ble.n	90018d3c <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
90018ca0:	ea5f 4c22 	movs.w	ip, r2, asr #16
90018ca4:	d44a      	bmi.n	90018d3c <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
90018ca6:	f8de 000c 	ldr.w	r0, [lr, #12]
90018caa:	4560      	cmp	r0, ip
90018cac:	dd46      	ble.n	90018d3c <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
90018cae:	b22d      	sxth	r5, r5
90018cb0:	9802      	ldr	r0, [sp, #8]
90018cb2:	fb0c 7505 	mla	r5, ip, r5, r7
90018cb6:	f830 0015 	ldrh.w	r0, [r0, r5, lsl #1]
90018cba:	f06f 0501 	mvn.w	r5, #1
90018cbe:	fb05 fb08 	mul.w	fp, r5, r8
90018cc2:	ea4f 2c20 	mov.w	ip, r0, asr #8
90018cc6:	f834 500b 	ldrh.w	r5, [r4, fp]
90018cca:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
90018cce:	122f      	asrs	r7, r5, #8
90018cd0:	ea4f 09e5 	mov.w	r9, r5, asr #3
90018cd4:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
90018cd8:	00ed      	lsls	r5, r5, #3
90018cda:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
90018cde:	fb17 f706 	smulbb	r7, r7, r6
90018ce2:	b2ed      	uxtb	r5, r5
90018ce4:	fb19 f906 	smulbb	r9, r9, r6
90018ce8:	fb0c 7c0a 	mla	ip, ip, sl, r7
90018cec:	10c7      	asrs	r7, r0, #3
90018cee:	fb15 f506 	smulbb	r5, r5, r6
90018cf2:	00c0      	lsls	r0, r0, #3
90018cf4:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
90018cf8:	fa1f fc8c 	uxth.w	ip, ip
90018cfc:	b2c0      	uxtb	r0, r0
90018cfe:	fb07 970a 	mla	r7, r7, sl, r9
90018d02:	fb00 500a 	mla	r0, r0, sl, r5
90018d06:	f10c 0501 	add.w	r5, ip, #1
90018d0a:	b2bf      	uxth	r7, r7
90018d0c:	b280      	uxth	r0, r0
90018d0e:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
90018d12:	f107 0901 	add.w	r9, r7, #1
90018d16:	1c45      	adds	r5, r0, #1
90018d18:	eb09 2917 	add.w	r9, r9, r7, lsr #8
90018d1c:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
90018d20:	eb05 2510 	add.w	r5, r5, r0, lsr #8
90018d24:	ea4f 1959 	mov.w	r9, r9, lsr #5
90018d28:	f3c5 25c4 	ubfx	r5, r5, #11, #5
90018d2c:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
90018d30:	ea45 0c0c 	orr.w	ip, r5, ip
90018d34:	ea4c 0c09 	orr.w	ip, ip, r9
90018d38:	f824 c00b 	strh.w	ip, [r4, fp]
90018d3c:	9811      	ldr	r0, [sp, #68]	; 0x44
90018d3e:	f108 38ff 	add.w	r8, r8, #4294967295
90018d42:	4401      	add	r1, r0
90018d44:	9812      	ldr	r0, [sp, #72]	; 0x48
90018d46:	4402      	add	r2, r0
90018d48:	e75e      	b.n	90018c08 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
90018d4a:	b005      	add	sp, #20
90018d4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

90018d50 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
90018d50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90018d54:	b085      	sub	sp, #20
90018d56:	4693      	mov	fp, r2
90018d58:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
90018d5c:	9e13      	ldr	r6, [sp, #76]	; 0x4c
90018d5e:	9d16      	ldr	r5, [sp, #88]	; 0x58
90018d60:	6870      	ldr	r0, [r6, #4]
90018d62:	9101      	str	r1, [sp, #4]
90018d64:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
90018d68:	e9dd ec11 	ldrd	lr, ip, [sp, #68]	; 0x44
90018d6c:	fb00 2404 	mla	r4, r0, r4, r2
90018d70:	6832      	ldr	r2, [r6, #0]
90018d72:	eb02 0444 	add.w	r4, r2, r4, lsl #1
90018d76:	682a      	ldr	r2, [r5, #0]
90018d78:	9202      	str	r2, [sp, #8]
90018d7a:	9a01      	ldr	r2, [sp, #4]
90018d7c:	2a00      	cmp	r2, #0
90018d7e:	dc03      	bgt.n	90018d88 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
90018d80:	f1bb 0f00 	cmp.w	fp, #0
90018d84:	f340 809a 	ble.w	90018ebc <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
90018d88:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
90018d8a:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
90018d8e:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
90018d92:	9a10      	ldr	r2, [sp, #64]	; 0x40
90018d94:	f9b5 800c 	ldrsh.w	r8, [r5, #12]
90018d98:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
90018d9c:	2b00      	cmp	r3, #0
90018d9e:	dd0c      	ble.n	90018dba <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
90018da0:	1406      	asrs	r6, r0, #16
90018da2:	d405      	bmi.n	90018db0 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
90018da4:	454e      	cmp	r6, r9
90018da6:	da03      	bge.n	90018db0 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
90018da8:	1416      	asrs	r6, r2, #16
90018daa:	d401      	bmi.n	90018db0 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
90018dac:	4546      	cmp	r6, r8
90018dae:	db05      	blt.n	90018dbc <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
90018db0:	4470      	add	r0, lr
90018db2:	4462      	add	r2, ip
90018db4:	3b01      	subs	r3, #1
90018db6:	3402      	adds	r4, #2
90018db8:	e7f0      	b.n	90018d9c <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
90018dba:	d00f      	beq.n	90018ddc <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
90018dbc:	1e5e      	subs	r6, r3, #1
90018dbe:	fb0e 0706 	mla	r7, lr, r6, r0
90018dc2:	143f      	asrs	r7, r7, #16
90018dc4:	d541      	bpl.n	90018e4a <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xfa>
90018dc6:	eb04 0643 	add.w	r6, r4, r3, lsl #1
90018dca:	4698      	mov	r8, r3
90018dcc:	9603      	str	r6, [sp, #12]
90018dce:	f1b8 0f00 	cmp.w	r8, #0
90018dd2:	dc56      	bgt.n	90018e82 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x132>
90018dd4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
90018dd8:	eb04 0443 	add.w	r4, r4, r3, lsl #1
90018ddc:	9b01      	ldr	r3, [sp, #4]
90018dde:	2b00      	cmp	r3, #0
90018de0:	dd6c      	ble.n	90018ebc <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
90018de2:	ee30 0a04 	vadd.f32	s0, s0, s8
90018de6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
90018de8:	ee70 0aa4 	vadd.f32	s1, s1, s9
90018dec:	eeb0 6a62 	vmov.f32	s12, s5
90018df0:	eec6 7a80 	vdiv.f32	s15, s13, s0
90018df4:	ee31 1a05 	vadd.f32	s2, s2, s10
90018df8:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
90018dfc:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
90018e00:	eeb0 6a43 	vmov.f32	s12, s6
90018e04:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
90018e08:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
90018e0c:	ee20 7aa7 	vmul.f32	s14, s1, s15
90018e10:	ee61 7a27 	vmul.f32	s15, s2, s15
90018e14:	ee77 2a62 	vsub.f32	s5, s14, s5
90018e18:	ee37 3ac3 	vsub.f32	s6, s15, s6
90018e1c:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
90018e20:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
90018e24:	ee12 2a90 	vmov	r2, s5
90018e28:	eef0 2a47 	vmov.f32	s5, s14
90018e2c:	fb92 fef3 	sdiv	lr, r2, r3
90018e30:	ee13 2a10 	vmov	r2, s6
90018e34:	eeb0 3a67 	vmov.f32	s6, s15
90018e38:	fb92 fcf3 	sdiv	ip, r2, r3
90018e3c:	9b01      	ldr	r3, [sp, #4]
90018e3e:	3b01      	subs	r3, #1
90018e40:	9301      	str	r3, [sp, #4]
90018e42:	9b0e      	ldr	r3, [sp, #56]	; 0x38
90018e44:	bf08      	it	eq
90018e46:	465b      	moveq	r3, fp
90018e48:	e797      	b.n	90018d7a <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a>
90018e4a:	454f      	cmp	r7, r9
90018e4c:	dabb      	bge.n	90018dc6 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
90018e4e:	fb0c 2606 	mla	r6, ip, r6, r2
90018e52:	1436      	asrs	r6, r6, #16
90018e54:	d4b7      	bmi.n	90018dc6 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
90018e56:	4546      	cmp	r6, r8
90018e58:	dab5      	bge.n	90018dc6 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
90018e5a:	461e      	mov	r6, r3
90018e5c:	46a0      	mov	r8, r4
90018e5e:	2e00      	cmp	r6, #0
90018e60:	ddb8      	ble.n	90018dd4 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
90018e62:	1417      	asrs	r7, r2, #16
90018e64:	f9b5 a008 	ldrsh.w	sl, [r5, #8]
90018e68:	ea4f 4920 	mov.w	r9, r0, asr #16
90018e6c:	9902      	ldr	r1, [sp, #8]
90018e6e:	4470      	add	r0, lr
90018e70:	4462      	add	r2, ip
90018e72:	fb0a 9707 	mla	r7, sl, r7, r9
90018e76:	3e01      	subs	r6, #1
90018e78:	f831 7017 	ldrh.w	r7, [r1, r7, lsl #1]
90018e7c:	f828 7b02 	strh.w	r7, [r8], #2
90018e80:	e7ed      	b.n	90018e5e <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10e>
90018e82:	ea5f 4920 	movs.w	r9, r0, asr #16
90018e86:	d414      	bmi.n	90018eb2 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
90018e88:	68ae      	ldr	r6, [r5, #8]
90018e8a:	454e      	cmp	r6, r9
90018e8c:	dd11      	ble.n	90018eb2 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
90018e8e:	ea5f 4a22 	movs.w	sl, r2, asr #16
90018e92:	d40e      	bmi.n	90018eb2 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
90018e94:	68ef      	ldr	r7, [r5, #12]
90018e96:	4557      	cmp	r7, sl
90018e98:	dd0b      	ble.n	90018eb2 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
90018e9a:	b236      	sxth	r6, r6
90018e9c:	f06f 0101 	mvn.w	r1, #1
90018ea0:	9f02      	ldr	r7, [sp, #8]
90018ea2:	fb0a 9606 	mla	r6, sl, r6, r9
90018ea6:	f837 7016 	ldrh.w	r7, [r7, r6, lsl #1]
90018eaa:	fb01 f608 	mul.w	r6, r1, r8
90018eae:	9903      	ldr	r1, [sp, #12]
90018eb0:	538f      	strh	r7, [r1, r6]
90018eb2:	4470      	add	r0, lr
90018eb4:	4462      	add	r2, ip
90018eb6:	f108 38ff 	add.w	r8, r8, #4294967295
90018eba:	e788      	b.n	90018dce <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
90018ebc:	b005      	add	sp, #20
90018ebe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

90018ec2 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
90018ec2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90018ec6:	b087      	sub	sp, #28
90018ec8:	468b      	mov	fp, r1
90018eca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
90018ece:	9815      	ldr	r0, [sp, #84]	; 0x54
90018ed0:	9203      	str	r2, [sp, #12]
90018ed2:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
90018ed6:	6841      	ldr	r1, [r0, #4]
90018ed8:	9204      	str	r2, [sp, #16]
90018eda:	f8dd 9060 	ldr.w	r9, [sp, #96]	; 0x60
90018ede:	e9dd 2516 	ldrd	r2, r5, [sp, #88]	; 0x58
90018ee2:	fb01 2505 	mla	r5, r1, r5, r2
90018ee6:	6802      	ldr	r2, [r0, #0]
90018ee8:	eb02 0545 	add.w	r5, r2, r5, lsl #1
90018eec:	f8d9 2000 	ldr.w	r2, [r9]
90018ef0:	9201      	str	r2, [sp, #4]
90018ef2:	f1bb 0f00 	cmp.w	fp, #0
90018ef6:	dc03      	bgt.n	90018f00 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
90018ef8:	9a03      	ldr	r2, [sp, #12]
90018efa:	2a00      	cmp	r2, #0
90018efc:	f340 8158 	ble.w	900191b0 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ee>
90018f00:	9a11      	ldr	r2, [sp, #68]	; 0x44
90018f02:	f9b9 7008 	ldrsh.w	r7, [r9, #8]
90018f06:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
90018f0a:	9a12      	ldr	r2, [sp, #72]	; 0x48
90018f0c:	f9b9 600c 	ldrsh.w	r6, [r9, #12]
90018f10:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
90018f14:	2b00      	cmp	r3, #0
90018f16:	dd0e      	ble.n	90018f36 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
90018f18:	1402      	asrs	r2, r0, #16
90018f1a:	d405      	bmi.n	90018f28 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
90018f1c:	42ba      	cmp	r2, r7
90018f1e:	da03      	bge.n	90018f28 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
90018f20:	140a      	asrs	r2, r1, #16
90018f22:	d401      	bmi.n	90018f28 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
90018f24:	42b2      	cmp	r2, r6
90018f26:	db07      	blt.n	90018f38 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
90018f28:	9a13      	ldr	r2, [sp, #76]	; 0x4c
90018f2a:	3b01      	subs	r3, #1
90018f2c:	3502      	adds	r5, #2
90018f2e:	4410      	add	r0, r2
90018f30:	9a14      	ldr	r2, [sp, #80]	; 0x50
90018f32:	4411      	add	r1, r2
90018f34:	e7ee      	b.n	90018f14 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
90018f36:	d017      	beq.n	90018f68 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
90018f38:	1e5a      	subs	r2, r3, #1
90018f3a:	9c13      	ldr	r4, [sp, #76]	; 0x4c
90018f3c:	fb04 0402 	mla	r4, r4, r2, r0
90018f40:	1424      	asrs	r4, r4, #16
90018f42:	d409      	bmi.n	90018f58 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
90018f44:	42bc      	cmp	r4, r7
90018f46:	da07      	bge.n	90018f58 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
90018f48:	9c14      	ldr	r4, [sp, #80]	; 0x50
90018f4a:	fb04 1202 	mla	r2, r4, r2, r1
90018f4e:	1412      	asrs	r2, r2, #16
90018f50:	d402      	bmi.n	90018f58 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
90018f52:	42b2      	cmp	r2, r6
90018f54:	f2c0 80bf 	blt.w	900190d6 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
90018f58:	2700      	movs	r7, #0
90018f5a:	19da      	adds	r2, r3, r7
90018f5c:	2a00      	cmp	r2, #0
90018f5e:	dc3e      	bgt.n	90018fde <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
90018f60:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
90018f64:	eb05 0543 	add.w	r5, r5, r3, lsl #1
90018f68:	f1bb 0f00 	cmp.w	fp, #0
90018f6c:	f340 8120 	ble.w	900191b0 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ee>
90018f70:	ee30 0a04 	vadd.f32	s0, s0, s8
90018f74:	9b10      	ldr	r3, [sp, #64]	; 0x40
90018f76:	ee70 0aa4 	vadd.f32	s1, s1, s9
90018f7a:	f1bb 0b01 	subs.w	fp, fp, #1
90018f7e:	eeb0 6a62 	vmov.f32	s12, s5
90018f82:	eec6 7a80 	vdiv.f32	s15, s13, s0
90018f86:	ee31 1a05 	vadd.f32	s2, s2, s10
90018f8a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
90018f8e:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
90018f92:	eeb0 6a43 	vmov.f32	s12, s6
90018f96:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
90018f9a:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
90018f9e:	ee20 7aa7 	vmul.f32	s14, s1, s15
90018fa2:	ee61 7a27 	vmul.f32	s15, s2, s15
90018fa6:	ee77 2a62 	vsub.f32	s5, s14, s5
90018faa:	ee37 3ac3 	vsub.f32	s6, s15, s6
90018fae:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
90018fb2:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
90018fb6:	ee12 2a90 	vmov	r2, s5
90018fba:	eef0 2a47 	vmov.f32	s5, s14
90018fbe:	fb92 f3f3 	sdiv	r3, r2, r3
90018fc2:	ee13 2a10 	vmov	r2, s6
90018fc6:	9313      	str	r3, [sp, #76]	; 0x4c
90018fc8:	9b10      	ldr	r3, [sp, #64]	; 0x40
90018fca:	eeb0 3a67 	vmov.f32	s6, s15
90018fce:	fb92 f3f3 	sdiv	r3, r2, r3
90018fd2:	9a03      	ldr	r2, [sp, #12]
90018fd4:	9314      	str	r3, [sp, #80]	; 0x50
90018fd6:	9b10      	ldr	r3, [sp, #64]	; 0x40
90018fd8:	bf08      	it	eq
90018fda:	4613      	moveq	r3, r2
90018fdc:	e789      	b.n	90018ef2 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
90018fde:	1406      	asrs	r6, r0, #16
90018fe0:	d42d      	bmi.n	9001903e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
90018fe2:	f8d9 4008 	ldr.w	r4, [r9, #8]
90018fe6:	42b4      	cmp	r4, r6
90018fe8:	dd29      	ble.n	9001903e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
90018fea:	ea5f 4c21 	movs.w	ip, r1, asr #16
90018fee:	d426      	bmi.n	9001903e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
90018ff0:	f8d9 200c 	ldr.w	r2, [r9, #12]
90018ff4:	4562      	cmp	r2, ip
90018ff6:	dd22      	ble.n	9001903e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
90018ff8:	b224      	sxth	r4, r4
90018ffa:	9a01      	ldr	r2, [sp, #4]
90018ffc:	fb0c 6404 	mla	r4, ip, r4, r6
90019000:	f852 4024 	ldr.w	r4, [r2, r4, lsl #2]
90019004:	0e22      	lsrs	r2, r4, #24
90019006:	d01a      	beq.n	9001903e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
90019008:	9e04      	ldr	r6, [sp, #16]
9001900a:	4372      	muls	r2, r6
9001900c:	1c56      	adds	r6, r2, #1
9001900e:	eb06 2222 	add.w	r2, r6, r2, asr #8
90019012:	0a26      	lsrs	r6, r4, #8
90019014:	1212      	asrs	r2, r2, #8
90019016:	9605      	str	r6, [sp, #20]
90019018:	2aff      	cmp	r2, #255	; 0xff
9001901a:	d116      	bne.n	9001904a <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x188>
9001901c:	f06f 0201 	mvn.w	r2, #1
90019020:	f426 66ff 	bic.w	r6, r6, #2040	; 0x7f8
90019024:	fb02 fc07 	mul.w	ip, r2, r7
90019028:	0962      	lsrs	r2, r4, #5
9001902a:	f026 0607 	bic.w	r6, r6, #7
9001902e:	f3c4 04c4 	ubfx	r4, r4, #3, #5
90019032:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
90019036:	4316      	orrs	r6, r2
90019038:	4326      	orrs	r6, r4
9001903a:	f825 600c 	strh.w	r6, [r5, ip]
9001903e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
90019040:	3f01      	subs	r7, #1
90019042:	4410      	add	r0, r2
90019044:	9a14      	ldr	r2, [sp, #80]	; 0x50
90019046:	4411      	add	r1, r2
90019048:	e787      	b.n	90018f5a <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
9001904a:	f06f 0601 	mvn.w	r6, #1
9001904e:	fa1f fa82 	uxth.w	sl, r2
90019052:	f3c4 4c07 	ubfx	ip, r4, #16, #8
90019056:	43d2      	mvns	r2, r2
90019058:	437e      	muls	r6, r7
9001905a:	b2e4      	uxtb	r4, r4
9001905c:	fb1c fc0a 	smulbb	ip, ip, sl
90019060:	b2d2      	uxtb	r2, r2
90019062:	f835 8006 	ldrh.w	r8, [r5, r6]
90019066:	fb14 f40a 	smulbb	r4, r4, sl
9001906a:	9602      	str	r6, [sp, #8]
9001906c:	ea4f 2e28 	mov.w	lr, r8, asr #8
90019070:	f89d 6014 	ldrb.w	r6, [sp, #20]
90019074:	fb16 f60a 	smulbb	r6, r6, sl
90019078:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
9001907c:	fb0e ce02 	mla	lr, lr, r2, ip
90019080:	ea4f 0ce8 	mov.w	ip, r8, asr #3
90019084:	ea4f 08c8 	mov.w	r8, r8, lsl #3
90019088:	fa1f fe8e 	uxth.w	lr, lr
9001908c:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
90019090:	fa5f f888 	uxtb.w	r8, r8
90019094:	fb0c 6c02 	mla	ip, ip, r2, r6
90019098:	fb08 4402 	mla	r4, r8, r2, r4
9001909c:	f10e 0201 	add.w	r2, lr, #1
900190a0:	fa1f fc8c 	uxth.w	ip, ip
900190a4:	b2a4      	uxth	r4, r4
900190a6:	eb02 2e1e 	add.w	lr, r2, lr, lsr #8
900190aa:	9a02      	ldr	r2, [sp, #8]
900190ac:	1c66      	adds	r6, r4, #1
900190ae:	f40e 4e78 	and.w	lr, lr, #63488	; 0xf800
900190b2:	eb06 2614 	add.w	r6, r6, r4, lsr #8
900190b6:	f3c6 26c4 	ubfx	r6, r6, #11, #5
900190ba:	ea46 0e0e 	orr.w	lr, r6, lr
900190be:	f10c 0601 	add.w	r6, ip, #1
900190c2:	eb06 261c 	add.w	r6, r6, ip, lsr #8
900190c6:	0976      	lsrs	r6, r6, #5
900190c8:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
900190cc:	ea4e 0e06 	orr.w	lr, lr, r6
900190d0:	f825 e002 	strh.w	lr, [r5, r2]
900190d4:	e7b3      	b.n	9001903e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
900190d6:	f04f 0800 	mov.w	r8, #0
900190da:	eba3 0208 	sub.w	r2, r3, r8
900190de:	2a00      	cmp	r2, #0
900190e0:	f77f af3e 	ble.w	90018f60 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
900190e4:	1404      	asrs	r4, r0, #16
900190e6:	f9b9 6008 	ldrsh.w	r6, [r9, #8]
900190ea:	140a      	asrs	r2, r1, #16
900190ec:	fb06 4202 	mla	r2, r6, r2, r4
900190f0:	9c01      	ldr	r4, [sp, #4]
900190f2:	f854 4022 	ldr.w	r4, [r4, r2, lsl #2]
900190f6:	0e22      	lsrs	r2, r4, #24
900190f8:	d015      	beq.n	90019126 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x264>
900190fa:	9e04      	ldr	r6, [sp, #16]
900190fc:	4372      	muls	r2, r6
900190fe:	1c56      	adds	r6, r2, #1
90019100:	eb06 2222 	add.w	r2, r6, r2, asr #8
90019104:	0a26      	lsrs	r6, r4, #8
90019106:	1212      	asrs	r2, r2, #8
90019108:	2aff      	cmp	r2, #255	; 0xff
9001910a:	d113      	bne.n	90019134 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x272>
9001910c:	0962      	lsrs	r2, r4, #5
9001910e:	f426 66ff 	bic.w	r6, r6, #2040	; 0x7f8
90019112:	f3c4 04c4 	ubfx	r4, r4, #3, #5
90019116:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
9001911a:	f026 0607 	bic.w	r6, r6, #7
9001911e:	4316      	orrs	r6, r2
90019120:	4326      	orrs	r6, r4
90019122:	f825 6018 	strh.w	r6, [r5, r8, lsl #1]
90019126:	9a13      	ldr	r2, [sp, #76]	; 0x4c
90019128:	f108 0801 	add.w	r8, r8, #1
9001912c:	4410      	add	r0, r2
9001912e:	9a14      	ldr	r2, [sp, #80]	; 0x50
90019130:	4411      	add	r1, r2
90019132:	e7d2      	b.n	900190da <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x218>
90019134:	f835 e018 	ldrh.w	lr, [r5, r8, lsl #1]
90019138:	fa1f fa82 	uxth.w	sl, r2
9001913c:	f3c4 4707 	ubfx	r7, r4, #16, #8
90019140:	43d2      	mvns	r2, r2
90019142:	ea4f 2c2e 	mov.w	ip, lr, asr #8
90019146:	fb17 f70a 	smulbb	r7, r7, sl
9001914a:	b2d2      	uxtb	r2, r2
9001914c:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
90019150:	b2e4      	uxtb	r4, r4
90019152:	b2f6      	uxtb	r6, r6
90019154:	fb0c 7c02 	mla	ip, ip, r2, r7
90019158:	ea4f 07ee 	mov.w	r7, lr, asr #3
9001915c:	fb14 f40a 	smulbb	r4, r4, sl
90019160:	ea4f 0ece 	mov.w	lr, lr, lsl #3
90019164:	fa1f fc8c 	uxth.w	ip, ip
90019168:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
9001916c:	fb16 f60a 	smulbb	r6, r6, sl
90019170:	fa5f fe8e 	uxtb.w	lr, lr
90019174:	fb0e 4402 	mla	r4, lr, r2, r4
90019178:	fb07 6702 	mla	r7, r7, r2, r6
9001917c:	f10c 0201 	add.w	r2, ip, #1
90019180:	b2a4      	uxth	r4, r4
90019182:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
90019186:	1c66      	adds	r6, r4, #1
90019188:	b2bf      	uxth	r7, r7
9001918a:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
9001918e:	eb06 2614 	add.w	r6, r6, r4, lsr #8
90019192:	f3c6 26c4 	ubfx	r6, r6, #11, #5
90019196:	ea46 0c0c 	orr.w	ip, r6, ip
9001919a:	1c7e      	adds	r6, r7, #1
9001919c:	eb06 2617 	add.w	r6, r6, r7, lsr #8
900191a0:	0976      	lsrs	r6, r6, #5
900191a2:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
900191a6:	ea4c 0c06 	orr.w	ip, ip, r6
900191aa:	f825 c018 	strh.w	ip, [r5, r8, lsl #1]
900191ae:	e7ba      	b.n	90019126 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x264>
900191b0:	b007      	add	sp, #28
900191b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

900191b8 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
900191b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
900191bc:	b085      	sub	sp, #20
900191be:	468b      	mov	fp, r1
900191c0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
900191c4:	9813      	ldr	r0, [sp, #76]	; 0x4c
900191c6:	9203      	str	r2, [sp, #12]
900191c8:	6841      	ldr	r1, [r0, #4]
900191ca:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
900191ce:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
900191d2:	fb01 2404 	mla	r4, r1, r4, r2
900191d6:	6802      	ldr	r2, [r0, #0]
900191d8:	eb02 0444 	add.w	r4, r2, r4, lsl #1
900191dc:	f8d8 2000 	ldr.w	r2, [r8]
900191e0:	9201      	str	r2, [sp, #4]
900191e2:	f1bb 0f00 	cmp.w	fp, #0
900191e6:	dc03      	bgt.n	900191f0 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
900191e8:	9a03      	ldr	r2, [sp, #12]
900191ea:	2a00      	cmp	r2, #0
900191ec:	f340 814f 	ble.w	9001948e <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d6>
900191f0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
900191f2:	f9b8 7008 	ldrsh.w	r7, [r8, #8]
900191f6:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
900191fa:	9a10      	ldr	r2, [sp, #64]	; 0x40
900191fc:	f9b8 600c 	ldrsh.w	r6, [r8, #12]
90019200:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
90019204:	2b00      	cmp	r3, #0
90019206:	dd0e      	ble.n	90019226 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
90019208:	1408      	asrs	r0, r1, #16
9001920a:	d405      	bmi.n	90019218 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
9001920c:	42b8      	cmp	r0, r7
9001920e:	da03      	bge.n	90019218 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
90019210:	1410      	asrs	r0, r2, #16
90019212:	d401      	bmi.n	90019218 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
90019214:	42b0      	cmp	r0, r6
90019216:	db07      	blt.n	90019228 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
90019218:	9811      	ldr	r0, [sp, #68]	; 0x44
9001921a:	3b01      	subs	r3, #1
9001921c:	3402      	adds	r4, #2
9001921e:	4401      	add	r1, r0
90019220:	9812      	ldr	r0, [sp, #72]	; 0x48
90019222:	4402      	add	r2, r0
90019224:	e7ee      	b.n	90019204 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
90019226:	d017      	beq.n	90019258 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
90019228:	1e58      	subs	r0, r3, #1
9001922a:	9d11      	ldr	r5, [sp, #68]	; 0x44
9001922c:	fb05 1500 	mla	r5, r5, r0, r1
90019230:	142d      	asrs	r5, r5, #16
90019232:	d409      	bmi.n	90019248 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
90019234:	42bd      	cmp	r5, r7
90019236:	da07      	bge.n	90019248 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
90019238:	9d12      	ldr	r5, [sp, #72]	; 0x48
9001923a:	fb05 2000 	mla	r0, r5, r0, r2
9001923e:	1400      	asrs	r0, r0, #16
90019240:	d402      	bmi.n	90019248 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
90019242:	42b0      	cmp	r0, r6
90019244:	f2c0 80ba 	blt.w	900193bc <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
90019248:	2600      	movs	r6, #0
9001924a:	1998      	adds	r0, r3, r6
9001924c:	2800      	cmp	r0, #0
9001924e:	dc3e      	bgt.n	900192ce <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
90019250:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
90019254:	eb04 0443 	add.w	r4, r4, r3, lsl #1
90019258:	f1bb 0f00 	cmp.w	fp, #0
9001925c:	f340 8117 	ble.w	9001948e <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d6>
90019260:	ee30 0a04 	vadd.f32	s0, s0, s8
90019264:	9b0e      	ldr	r3, [sp, #56]	; 0x38
90019266:	ee70 0aa4 	vadd.f32	s1, s1, s9
9001926a:	f1bb 0b01 	subs.w	fp, fp, #1
9001926e:	eeb0 6a62 	vmov.f32	s12, s5
90019272:	eec6 7a80 	vdiv.f32	s15, s13, s0
90019276:	ee31 1a05 	vadd.f32	s2, s2, s10
9001927a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
9001927e:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
90019282:	eeb0 6a43 	vmov.f32	s12, s6
90019286:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
9001928a:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
9001928e:	ee20 7aa7 	vmul.f32	s14, s1, s15
90019292:	ee61 7a27 	vmul.f32	s15, s2, s15
90019296:	ee77 2a62 	vsub.f32	s5, s14, s5
9001929a:	ee37 3ac3 	vsub.f32	s6, s15, s6
9001929e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
900192a2:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
900192a6:	ee12 2a90 	vmov	r2, s5
900192aa:	eef0 2a47 	vmov.f32	s5, s14
900192ae:	fb92 f3f3 	sdiv	r3, r2, r3
900192b2:	ee13 2a10 	vmov	r2, s6
900192b6:	9311      	str	r3, [sp, #68]	; 0x44
900192b8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
900192ba:	eeb0 3a67 	vmov.f32	s6, s15
900192be:	fb92 f3f3 	sdiv	r3, r2, r3
900192c2:	9a03      	ldr	r2, [sp, #12]
900192c4:	9312      	str	r3, [sp, #72]	; 0x48
900192c6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
900192c8:	bf08      	it	eq
900192ca:	4613      	moveq	r3, r2
900192cc:	e789      	b.n	900191e2 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a>
900192ce:	140f      	asrs	r7, r1, #16
900192d0:	d424      	bmi.n	9001931c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
900192d2:	f8d8 5008 	ldr.w	r5, [r8, #8]
900192d6:	42bd      	cmp	r5, r7
900192d8:	dd20      	ble.n	9001931c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
900192da:	ea5f 4c22 	movs.w	ip, r2, asr #16
900192de:	d41d      	bmi.n	9001931c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
900192e0:	f8d8 000c 	ldr.w	r0, [r8, #12]
900192e4:	4560      	cmp	r0, ip
900192e6:	dd19      	ble.n	9001931c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
900192e8:	b22d      	sxth	r5, r5
900192ea:	9801      	ldr	r0, [sp, #4]
900192ec:	fb0c 7505 	mla	r5, ip, r5, r7
900192f0:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
900192f4:	0e07      	lsrs	r7, r0, #24
900192f6:	2fff      	cmp	r7, #255	; 0xff
900192f8:	d116      	bne.n	90019328 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
900192fa:	f06f 0501 	mvn.w	r5, #1
900192fe:	fb05 f706 	mul.w	r7, r5, r6
90019302:	f2a5 75fe 	subw	r5, r5, #2046	; 0x7fe
90019306:	ea05 2c10 	and.w	ip, r5, r0, lsr #8
9001930a:	0945      	lsrs	r5, r0, #5
9001930c:	f3c0 00c4 	ubfx	r0, r0, #3, #5
90019310:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
90019314:	ea4c 0505 	orr.w	r5, ip, r5
90019318:	4305      	orrs	r5, r0
9001931a:	53e5      	strh	r5, [r4, r7]
9001931c:	9811      	ldr	r0, [sp, #68]	; 0x44
9001931e:	3e01      	subs	r6, #1
90019320:	4401      	add	r1, r0
90019322:	9812      	ldr	r0, [sp, #72]	; 0x48
90019324:	4402      	add	r2, r0
90019326:	e790      	b.n	9001924a <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
90019328:	b2fd      	uxtb	r5, r7
9001932a:	2f00      	cmp	r7, #0
9001932c:	d0f6      	beq.n	9001931c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
9001932e:	f06f 0701 	mvn.w	r7, #1
90019332:	fa1f f985 	uxth.w	r9, r5
90019336:	43ed      	mvns	r5, r5
90019338:	f3c0 2a07 	ubfx	sl, r0, #8, #8
9001933c:	4377      	muls	r7, r6
9001933e:	fb1a fa09 	smulbb	sl, sl, r9
90019342:	b2ed      	uxtb	r5, r5
90019344:	f834 e007 	ldrh.w	lr, [r4, r7]
90019348:	9702      	str	r7, [sp, #8]
9001934a:	f3c0 4707 	ubfx	r7, r0, #16, #8
9001934e:	ea4f 2c2e 	mov.w	ip, lr, asr #8
90019352:	fb17 f709 	smulbb	r7, r7, r9
90019356:	b2c0      	uxtb	r0, r0
90019358:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
9001935c:	fb10 f009 	smulbb	r0, r0, r9
90019360:	fb0c 7c05 	mla	ip, ip, r5, r7
90019364:	ea4f 07ee 	mov.w	r7, lr, asr #3
90019368:	ea4f 0ece 	mov.w	lr, lr, lsl #3
9001936c:	fa1f fc8c 	uxth.w	ip, ip
90019370:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
90019374:	fa5f fe8e 	uxtb.w	lr, lr
90019378:	fb07 a705 	mla	r7, r7, r5, sl
9001937c:	fb0e 0005 	mla	r0, lr, r5, r0
90019380:	f10c 0501 	add.w	r5, ip, #1
90019384:	b2bf      	uxth	r7, r7
90019386:	b280      	uxth	r0, r0
90019388:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
9001938c:	f100 0a01 	add.w	sl, r0, #1
90019390:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
90019394:	eb0a 2a10 	add.w	sl, sl, r0, lsr #8
90019398:	9802      	ldr	r0, [sp, #8]
9001939a:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
9001939e:	ea4a 0c0c 	orr.w	ip, sl, ip
900193a2:	f107 0a01 	add.w	sl, r7, #1
900193a6:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
900193aa:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
900193ae:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
900193b2:	ea4c 0c0a 	orr.w	ip, ip, sl
900193b6:	f824 c000 	strh.w	ip, [r4, r0]
900193ba:	e7af      	b.n	9001931c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
900193bc:	f04f 0e00 	mov.w	lr, #0
900193c0:	eba3 000e 	sub.w	r0, r3, lr
900193c4:	2800      	cmp	r0, #0
900193c6:	f77f af43 	ble.w	90019250 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
900193ca:	f9b8 6008 	ldrsh.w	r6, [r8, #8]
900193ce:	140d      	asrs	r5, r1, #16
900193d0:	1410      	asrs	r0, r2, #16
900193d2:	fb06 5000 	mla	r0, r6, r0, r5
900193d6:	9d01      	ldr	r5, [sp, #4]
900193d8:	f855 5020 	ldr.w	r5, [r5, r0, lsl #2]
900193dc:	0e2e      	lsrs	r6, r5, #24
900193de:	2eff      	cmp	r6, #255	; 0xff
900193e0:	d112      	bne.n	90019408 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x250>
900193e2:	482c      	ldr	r0, [pc, #176]	; (90019494 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2dc>)
900193e4:	ea00 2615 	and.w	r6, r0, r5, lsr #8
900193e8:	0968      	lsrs	r0, r5, #5
900193ea:	f3c5 05c4 	ubfx	r5, r5, #3, #5
900193ee:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
900193f2:	4330      	orrs	r0, r6
900193f4:	4328      	orrs	r0, r5
900193f6:	f824 001e 	strh.w	r0, [r4, lr, lsl #1]
900193fa:	9811      	ldr	r0, [sp, #68]	; 0x44
900193fc:	f10e 0e01 	add.w	lr, lr, #1
90019400:	4401      	add	r1, r0
90019402:	9812      	ldr	r0, [sp, #72]	; 0x48
90019404:	4402      	add	r2, r0
90019406:	e7db      	b.n	900193c0 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
90019408:	b2f0      	uxtb	r0, r6
9001940a:	2e00      	cmp	r6, #0
9001940c:	d0f5      	beq.n	900193fa <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
9001940e:	f834 c01e 	ldrh.w	ip, [r4, lr, lsl #1]
90019412:	fa1f f980 	uxth.w	r9, r0
90019416:	f3c5 4607 	ubfx	r6, r5, #16, #8
9001941a:	43c0      	mvns	r0, r0
9001941c:	ea4f 272c 	mov.w	r7, ip, asr #8
90019420:	f3c5 2a07 	ubfx	sl, r5, #8, #8
90019424:	fb16 f609 	smulbb	r6, r6, r9
90019428:	b2c0      	uxtb	r0, r0
9001942a:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
9001942e:	b2ed      	uxtb	r5, r5
90019430:	fb1a fa09 	smulbb	sl, sl, r9
90019434:	fb07 6700 	mla	r7, r7, r0, r6
90019438:	ea4f 06ec 	mov.w	r6, ip, asr #3
9001943c:	fb15 f509 	smulbb	r5, r5, r9
90019440:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
90019444:	b2bf      	uxth	r7, r7
90019446:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
9001944a:	fa5f fc8c 	uxtb.w	ip, ip
9001944e:	fb06 a600 	mla	r6, r6, r0, sl
90019452:	fb0c 5500 	mla	r5, ip, r0, r5
90019456:	1c78      	adds	r0, r7, #1
90019458:	b2b6      	uxth	r6, r6
9001945a:	b2ad      	uxth	r5, r5
9001945c:	eb00 2717 	add.w	r7, r0, r7, lsr #8
90019460:	f105 0a01 	add.w	sl, r5, #1
90019464:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
90019468:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
9001946c:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
90019470:	ea4a 0707 	orr.w	r7, sl, r7
90019474:	f106 0a01 	add.w	sl, r6, #1
90019478:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
9001947c:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
90019480:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
90019484:	ea47 070a 	orr.w	r7, r7, sl
90019488:	f824 701e 	strh.w	r7, [r4, lr, lsl #1]
9001948c:	e7b5      	b.n	900193fa <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
9001948e:	b005      	add	sp, #20
90019490:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90019494:	fffff800 	.word	0xfffff800

90019498 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
90019498:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001949c:	b087      	sub	sp, #28
9001949e:	468b      	mov	fp, r1
900194a0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
900194a4:	9815      	ldr	r0, [sp, #84]	; 0x54
900194a6:	9203      	str	r2, [sp, #12]
900194a8:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
900194ac:	6841      	ldr	r1, [r0, #4]
900194ae:	9204      	str	r2, [sp, #16]
900194b0:	f8dd 9060 	ldr.w	r9, [sp, #96]	; 0x60
900194b4:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
900194b8:	fb01 2404 	mla	r4, r1, r4, r2
900194bc:	6802      	ldr	r2, [r0, #0]
900194be:	eb02 0444 	add.w	r4, r2, r4, lsl #1
900194c2:	f8d9 2008 	ldr.w	r2, [r9, #8]
900194c6:	3201      	adds	r2, #1
900194c8:	f022 0201 	bic.w	r2, r2, #1
900194cc:	9200      	str	r2, [sp, #0]
900194ce:	f8d9 2000 	ldr.w	r2, [r9]
900194d2:	9201      	str	r2, [sp, #4]
900194d4:	f1bb 0f00 	cmp.w	fp, #0
900194d8:	dc03      	bgt.n	900194e2 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
900194da:	9a03      	ldr	r2, [sp, #12]
900194dc:	2a00      	cmp	r2, #0
900194de:	f340 816a 	ble.w	900197b6 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
900194e2:	9a11      	ldr	r2, [sp, #68]	; 0x44
900194e4:	f9b9 7008 	ldrsh.w	r7, [r9, #8]
900194e8:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
900194ec:	9a12      	ldr	r2, [sp, #72]	; 0x48
900194ee:	f9b9 600c 	ldrsh.w	r6, [r9, #12]
900194f2:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
900194f6:	2b00      	cmp	r3, #0
900194f8:	dd0e      	ble.n	90019518 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
900194fa:	1402      	asrs	r2, r0, #16
900194fc:	d405      	bmi.n	9001950a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
900194fe:	42ba      	cmp	r2, r7
90019500:	da03      	bge.n	9001950a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
90019502:	140a      	asrs	r2, r1, #16
90019504:	d401      	bmi.n	9001950a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
90019506:	42b2      	cmp	r2, r6
90019508:	db07      	blt.n	9001951a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
9001950a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
9001950c:	3b01      	subs	r3, #1
9001950e:	3402      	adds	r4, #2
90019510:	4410      	add	r0, r2
90019512:	9a14      	ldr	r2, [sp, #80]	; 0x50
90019514:	4411      	add	r1, r2
90019516:	e7ee      	b.n	900194f6 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
90019518:	d017      	beq.n	9001954a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
9001951a:	1e5a      	subs	r2, r3, #1
9001951c:	9d13      	ldr	r5, [sp, #76]	; 0x4c
9001951e:	fb05 0502 	mla	r5, r5, r2, r0
90019522:	142d      	asrs	r5, r5, #16
90019524:	d409      	bmi.n	9001953a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
90019526:	42bd      	cmp	r5, r7
90019528:	da07      	bge.n	9001953a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
9001952a:	9d14      	ldr	r5, [sp, #80]	; 0x50
9001952c:	fb05 1202 	mla	r2, r5, r2, r1
90019530:	1412      	asrs	r2, r2, #16
90019532:	d402      	bmi.n	9001953a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
90019534:	42b2      	cmp	r2, r6
90019536:	f2c0 80c8 	blt.w	900196ca <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x232>
9001953a:	2700      	movs	r7, #0
9001953c:	19da      	adds	r2, r3, r7
9001953e:	2a00      	cmp	r2, #0
90019540:	dc3e      	bgt.n	900195c0 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
90019542:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
90019546:	eb04 0443 	add.w	r4, r4, r3, lsl #1
9001954a:	f1bb 0f00 	cmp.w	fp, #0
9001954e:	f340 8132 	ble.w	900197b6 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
90019552:	ee30 0a04 	vadd.f32	s0, s0, s8
90019556:	9b10      	ldr	r3, [sp, #64]	; 0x40
90019558:	ee70 0aa4 	vadd.f32	s1, s1, s9
9001955c:	f1bb 0b01 	subs.w	fp, fp, #1
90019560:	eeb0 6a62 	vmov.f32	s12, s5
90019564:	eec6 7a80 	vdiv.f32	s15, s13, s0
90019568:	ee31 1a05 	vadd.f32	s2, s2, s10
9001956c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
90019570:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
90019574:	eeb0 6a43 	vmov.f32	s12, s6
90019578:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
9001957c:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
90019580:	ee20 7aa7 	vmul.f32	s14, s1, s15
90019584:	ee61 7a27 	vmul.f32	s15, s2, s15
90019588:	ee77 2a62 	vsub.f32	s5, s14, s5
9001958c:	ee37 3ac3 	vsub.f32	s6, s15, s6
90019590:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
90019594:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
90019598:	ee12 2a90 	vmov	r2, s5
9001959c:	eef0 2a47 	vmov.f32	s5, s14
900195a0:	fb92 f3f3 	sdiv	r3, r2, r3
900195a4:	ee13 2a10 	vmov	r2, s6
900195a8:	9313      	str	r3, [sp, #76]	; 0x4c
900195aa:	9b10      	ldr	r3, [sp, #64]	; 0x40
900195ac:	eeb0 3a67 	vmov.f32	s6, s15
900195b0:	fb92 f3f3 	sdiv	r3, r2, r3
900195b4:	9a03      	ldr	r2, [sp, #12]
900195b6:	9314      	str	r3, [sp, #80]	; 0x50
900195b8:	9b10      	ldr	r3, [sp, #64]	; 0x40
900195ba:	bf08      	it	eq
900195bc:	4613      	moveq	r3, r2
900195be:	e789      	b.n	900194d4 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
900195c0:	1405      	asrs	r5, r0, #16
900195c2:	d436      	bmi.n	90019632 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
900195c4:	f8d9 2008 	ldr.w	r2, [r9, #8]
900195c8:	42aa      	cmp	r2, r5
900195ca:	dd32      	ble.n	90019632 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
900195cc:	140e      	asrs	r6, r1, #16
900195ce:	d430      	bmi.n	90019632 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
900195d0:	f8d9 200c 	ldr.w	r2, [r9, #12]
900195d4:	42b2      	cmp	r2, r6
900195d6:	dd2c      	ble.n	90019632 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
900195d8:	9a00      	ldr	r2, [sp, #0]
900195da:	fb06 5502 	mla	r5, r6, r2, r5
900195de:	9e01      	ldr	r6, [sp, #4]
900195e0:	086a      	lsrs	r2, r5, #1
900195e2:	5cb2      	ldrb	r2, [r6, r2]
900195e4:	07ee      	lsls	r6, r5, #31
900195e6:	bf54      	ite	pl
900195e8:	f002 020f 	andpl.w	r2, r2, #15
900195ec:	1112      	asrmi	r2, r2, #4
900195ee:	eb02 1202 	add.w	r2, r2, r2, lsl #4
900195f2:	b2d2      	uxtb	r2, r2
900195f4:	b1ea      	cbz	r2, 90019632 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
900195f6:	9d04      	ldr	r5, [sp, #16]
900195f8:	436a      	muls	r2, r5
900195fa:	1c55      	adds	r5, r2, #1
900195fc:	eb05 2222 	add.w	r2, r5, r2, asr #8
90019600:	4d6e      	ldr	r5, [pc, #440]	; (900197bc <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x324>)
90019602:	1212      	asrs	r2, r2, #8
90019604:	682d      	ldr	r5, [r5, #0]
90019606:	2aff      	cmp	r2, #255	; 0xff
90019608:	ea4f 2615 	mov.w	r6, r5, lsr #8
9001960c:	9605      	str	r6, [sp, #20]
9001960e:	d116      	bne.n	9001963e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
90019610:	f06f 0201 	mvn.w	r2, #1
90019614:	f426 66ff 	bic.w	r6, r6, #2040	; 0x7f8
90019618:	fb02 fc07 	mul.w	ip, r2, r7
9001961c:	096a      	lsrs	r2, r5, #5
9001961e:	f026 0607 	bic.w	r6, r6, #7
90019622:	f3c5 05c4 	ubfx	r5, r5, #3, #5
90019626:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
9001962a:	4316      	orrs	r6, r2
9001962c:	432e      	orrs	r6, r5
9001962e:	f824 600c 	strh.w	r6, [r4, ip]
90019632:	9a13      	ldr	r2, [sp, #76]	; 0x4c
90019634:	3f01      	subs	r7, #1
90019636:	4410      	add	r0, r2
90019638:	9a14      	ldr	r2, [sp, #80]	; 0x50
9001963a:	4411      	add	r1, r2
9001963c:	e77e      	b.n	9001953c <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa4>
9001963e:	f06f 0601 	mvn.w	r6, #1
90019642:	fa1f fa82 	uxth.w	sl, r2
90019646:	f3c5 4c07 	ubfx	ip, r5, #16, #8
9001964a:	43d2      	mvns	r2, r2
9001964c:	437e      	muls	r6, r7
9001964e:	b2ed      	uxtb	r5, r5
90019650:	fb1c fc0a 	smulbb	ip, ip, sl
90019654:	b2d2      	uxtb	r2, r2
90019656:	f834 8006 	ldrh.w	r8, [r4, r6]
9001965a:	fb15 f50a 	smulbb	r5, r5, sl
9001965e:	9602      	str	r6, [sp, #8]
90019660:	ea4f 2e28 	mov.w	lr, r8, asr #8
90019664:	f89d 6014 	ldrb.w	r6, [sp, #20]
90019668:	fb16 f60a 	smulbb	r6, r6, sl
9001966c:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
90019670:	fb0e ce02 	mla	lr, lr, r2, ip
90019674:	ea4f 0ce8 	mov.w	ip, r8, asr #3
90019678:	ea4f 08c8 	mov.w	r8, r8, lsl #3
9001967c:	fa1f fe8e 	uxth.w	lr, lr
90019680:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
90019684:	fa5f f888 	uxtb.w	r8, r8
90019688:	fb0c 6c02 	mla	ip, ip, r2, r6
9001968c:	fb08 5502 	mla	r5, r8, r2, r5
90019690:	f10e 0201 	add.w	r2, lr, #1
90019694:	fa1f fc8c 	uxth.w	ip, ip
90019698:	b2ad      	uxth	r5, r5
9001969a:	eb02 2e1e 	add.w	lr, r2, lr, lsr #8
9001969e:	9a02      	ldr	r2, [sp, #8]
900196a0:	1c6e      	adds	r6, r5, #1
900196a2:	f40e 4e78 	and.w	lr, lr, #63488	; 0xf800
900196a6:	eb06 2615 	add.w	r6, r6, r5, lsr #8
900196aa:	f3c6 26c4 	ubfx	r6, r6, #11, #5
900196ae:	ea46 0e0e 	orr.w	lr, r6, lr
900196b2:	f10c 0601 	add.w	r6, ip, #1
900196b6:	eb06 261c 	add.w	r6, r6, ip, lsr #8
900196ba:	0976      	lsrs	r6, r6, #5
900196bc:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
900196c0:	ea4e 0e06 	orr.w	lr, lr, r6
900196c4:	f824 e002 	strh.w	lr, [r4, r2]
900196c8:	e7b3      	b.n	90019632 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
900196ca:	f04f 0800 	mov.w	r8, #0
900196ce:	eba3 0208 	sub.w	r2, r3, r8
900196d2:	2a00      	cmp	r2, #0
900196d4:	f77f af35 	ble.w	90019542 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
900196d8:	1402      	asrs	r2, r0, #16
900196da:	9e00      	ldr	r6, [sp, #0]
900196dc:	140d      	asrs	r5, r1, #16
900196de:	fb06 2505 	mla	r5, r6, r5, r2
900196e2:	9e01      	ldr	r6, [sp, #4]
900196e4:	086a      	lsrs	r2, r5, #1
900196e6:	07ed      	lsls	r5, r5, #31
900196e8:	5cb2      	ldrb	r2, [r6, r2]
900196ea:	bf54      	ite	pl
900196ec:	f002 020f 	andpl.w	r2, r2, #15
900196f0:	1112      	asrmi	r2, r2, #4
900196f2:	eb02 1202 	add.w	r2, r2, r2, lsl #4
900196f6:	b2d2      	uxtb	r2, r2
900196f8:	b1c2      	cbz	r2, 9001972c <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
900196fa:	9d04      	ldr	r5, [sp, #16]
900196fc:	436a      	muls	r2, r5
900196fe:	1c55      	adds	r5, r2, #1
90019700:	eb05 2222 	add.w	r2, r5, r2, asr #8
90019704:	4d2d      	ldr	r5, [pc, #180]	; (900197bc <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x324>)
90019706:	1212      	asrs	r2, r2, #8
90019708:	682e      	ldr	r6, [r5, #0]
9001970a:	2aff      	cmp	r2, #255	; 0xff
9001970c:	ea4f 2516 	mov.w	r5, r6, lsr #8
90019710:	d113      	bne.n	9001973a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
90019712:	0972      	lsrs	r2, r6, #5
90019714:	f425 65ff 	bic.w	r5, r5, #2040	; 0x7f8
90019718:	f3c6 06c4 	ubfx	r6, r6, #3, #5
9001971c:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
90019720:	f025 0507 	bic.w	r5, r5, #7
90019724:	4315      	orrs	r5, r2
90019726:	4335      	orrs	r5, r6
90019728:	f824 5018 	strh.w	r5, [r4, r8, lsl #1]
9001972c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
9001972e:	f108 0801 	add.w	r8, r8, #1
90019732:	4410      	add	r0, r2
90019734:	9a14      	ldr	r2, [sp, #80]	; 0x50
90019736:	4411      	add	r1, r2
90019738:	e7c9      	b.n	900196ce <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
9001973a:	f834 e018 	ldrh.w	lr, [r4, r8, lsl #1]
9001973e:	fa1f fa82 	uxth.w	sl, r2
90019742:	f3c6 4707 	ubfx	r7, r6, #16, #8
90019746:	43d2      	mvns	r2, r2
90019748:	ea4f 2c2e 	mov.w	ip, lr, asr #8
9001974c:	fb17 f70a 	smulbb	r7, r7, sl
90019750:	b2d2      	uxtb	r2, r2
90019752:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
90019756:	b2f6      	uxtb	r6, r6
90019758:	b2ed      	uxtb	r5, r5
9001975a:	fb0c 7c02 	mla	ip, ip, r2, r7
9001975e:	ea4f 07ee 	mov.w	r7, lr, asr #3
90019762:	fb16 f60a 	smulbb	r6, r6, sl
90019766:	ea4f 0ece 	mov.w	lr, lr, lsl #3
9001976a:	fa1f fc8c 	uxth.w	ip, ip
9001976e:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
90019772:	fb15 f50a 	smulbb	r5, r5, sl
90019776:	fa5f fe8e 	uxtb.w	lr, lr
9001977a:	fb0e 6602 	mla	r6, lr, r2, r6
9001977e:	fb07 5702 	mla	r7, r7, r2, r5
90019782:	f10c 0201 	add.w	r2, ip, #1
90019786:	b2b6      	uxth	r6, r6
90019788:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
9001978c:	1c75      	adds	r5, r6, #1
9001978e:	b2bf      	uxth	r7, r7
90019790:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
90019794:	eb05 2516 	add.w	r5, r5, r6, lsr #8
90019798:	f3c5 25c4 	ubfx	r5, r5, #11, #5
9001979c:	ea45 0c0c 	orr.w	ip, r5, ip
900197a0:	1c7d      	adds	r5, r7, #1
900197a2:	eb05 2517 	add.w	r5, r5, r7, lsr #8
900197a6:	096d      	lsrs	r5, r5, #5
900197a8:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
900197ac:	ea4c 0c05 	orr.w	ip, ip, r5
900197b0:	f824 c018 	strh.w	ip, [r4, r8, lsl #1]
900197b4:	e7ba      	b.n	9001972c <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
900197b6:	b007      	add	sp, #28
900197b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
900197bc:	2402626c 	.word	0x2402626c

900197c0 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
900197c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
900197c4:	b087      	sub	sp, #28
900197c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
900197ca:	f8df 8308 	ldr.w	r8, [pc, #776]	; 90019ad4 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x314>
900197ce:	9815      	ldr	r0, [sp, #84]	; 0x54
900197d0:	9101      	str	r1, [sp, #4]
900197d2:	9205      	str	r2, [sp, #20]
900197d4:	6841      	ldr	r1, [r0, #4]
900197d6:	f8dd b060 	ldr.w	fp, [sp, #96]	; 0x60
900197da:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
900197de:	fb01 2404 	mla	r4, r1, r4, r2
900197e2:	6802      	ldr	r2, [r0, #0]
900197e4:	eb02 0444 	add.w	r4, r2, r4, lsl #1
900197e8:	f8db 2008 	ldr.w	r2, [fp, #8]
900197ec:	3201      	adds	r2, #1
900197ee:	f022 0201 	bic.w	r2, r2, #1
900197f2:	9202      	str	r2, [sp, #8]
900197f4:	f8db 2000 	ldr.w	r2, [fp]
900197f8:	9203      	str	r2, [sp, #12]
900197fa:	9a01      	ldr	r2, [sp, #4]
900197fc:	2a00      	cmp	r2, #0
900197fe:	dc03      	bgt.n	90019808 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
90019800:	9a05      	ldr	r2, [sp, #20]
90019802:	2a00      	cmp	r2, #0
90019804:	f340 8162 	ble.w	90019acc <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
90019808:	9a11      	ldr	r2, [sp, #68]	; 0x44
9001980a:	f9bb 7008 	ldrsh.w	r7, [fp, #8]
9001980e:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
90019812:	9a12      	ldr	r2, [sp, #72]	; 0x48
90019814:	f9bb 600c 	ldrsh.w	r6, [fp, #12]
90019818:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
9001981c:	2b00      	cmp	r3, #0
9001981e:	dd0e      	ble.n	9001983e <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
90019820:	1402      	asrs	r2, r0, #16
90019822:	d405      	bmi.n	90019830 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
90019824:	42ba      	cmp	r2, r7
90019826:	da03      	bge.n	90019830 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
90019828:	140a      	asrs	r2, r1, #16
9001982a:	d401      	bmi.n	90019830 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
9001982c:	42b2      	cmp	r2, r6
9001982e:	db07      	blt.n	90019840 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
90019830:	9a13      	ldr	r2, [sp, #76]	; 0x4c
90019832:	3b01      	subs	r3, #1
90019834:	3402      	adds	r4, #2
90019836:	4410      	add	r0, r2
90019838:	9a14      	ldr	r2, [sp, #80]	; 0x50
9001983a:	4411      	add	r1, r2
9001983c:	e7ee      	b.n	9001981c <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
9001983e:	d017      	beq.n	90019870 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
90019840:	1e5a      	subs	r2, r3, #1
90019842:	9d13      	ldr	r5, [sp, #76]	; 0x4c
90019844:	fb05 0502 	mla	r5, r5, r2, r0
90019848:	142d      	asrs	r5, r5, #16
9001984a:	d409      	bmi.n	90019860 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
9001984c:	42bd      	cmp	r5, r7
9001984e:	da07      	bge.n	90019860 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
90019850:	9d14      	ldr	r5, [sp, #80]	; 0x50
90019852:	fb05 1202 	mla	r2, r5, r2, r1
90019856:	1412      	asrs	r2, r2, #16
90019858:	d402      	bmi.n	90019860 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
9001985a:	42b2      	cmp	r2, r6
9001985c:	f2c0 80c3 	blt.w	900199e6 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x226>
90019860:	2500      	movs	r5, #0
90019862:	195a      	adds	r2, r3, r5
90019864:	2a00      	cmp	r2, #0
90019866:	dc3f      	bgt.n	900198e8 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
90019868:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
9001986c:	eb04 0443 	add.w	r4, r4, r3, lsl #1
90019870:	9b01      	ldr	r3, [sp, #4]
90019872:	2b00      	cmp	r3, #0
90019874:	f340 812a 	ble.w	90019acc <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
90019878:	ee30 0a04 	vadd.f32	s0, s0, s8
9001987c:	9b10      	ldr	r3, [sp, #64]	; 0x40
9001987e:	ee70 0aa4 	vadd.f32	s1, s1, s9
90019882:	eeb0 6a62 	vmov.f32	s12, s5
90019886:	eec6 7a80 	vdiv.f32	s15, s13, s0
9001988a:	ee31 1a05 	vadd.f32	s2, s2, s10
9001988e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
90019892:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
90019896:	eeb0 6a43 	vmov.f32	s12, s6
9001989a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
9001989e:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
900198a2:	ee20 7aa7 	vmul.f32	s14, s1, s15
900198a6:	ee61 7a27 	vmul.f32	s15, s2, s15
900198aa:	ee77 2a62 	vsub.f32	s5, s14, s5
900198ae:	ee37 3ac3 	vsub.f32	s6, s15, s6
900198b2:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
900198b6:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
900198ba:	ee12 2a90 	vmov	r2, s5
900198be:	eef0 2a47 	vmov.f32	s5, s14
900198c2:	fb92 f3f3 	sdiv	r3, r2, r3
900198c6:	ee13 2a10 	vmov	r2, s6
900198ca:	9313      	str	r3, [sp, #76]	; 0x4c
900198cc:	9b10      	ldr	r3, [sp, #64]	; 0x40
900198ce:	eeb0 3a67 	vmov.f32	s6, s15
900198d2:	fb92 f3f3 	sdiv	r3, r2, r3
900198d6:	9314      	str	r3, [sp, #80]	; 0x50
900198d8:	9b01      	ldr	r3, [sp, #4]
900198da:	9a05      	ldr	r2, [sp, #20]
900198dc:	3b01      	subs	r3, #1
900198de:	9301      	str	r3, [sp, #4]
900198e0:	9b10      	ldr	r3, [sp, #64]	; 0x40
900198e2:	bf08      	it	eq
900198e4:	4613      	moveq	r3, r2
900198e6:	e788      	b.n	900197fa <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
900198e8:	1406      	asrs	r6, r0, #16
900198ea:	d42c      	bmi.n	90019946 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
900198ec:	f8db 2008 	ldr.w	r2, [fp, #8]
900198f0:	42b2      	cmp	r2, r6
900198f2:	dd28      	ble.n	90019946 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
900198f4:	140f      	asrs	r7, r1, #16
900198f6:	d426      	bmi.n	90019946 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
900198f8:	f8db 200c 	ldr.w	r2, [fp, #12]
900198fc:	42ba      	cmp	r2, r7
900198fe:	dd22      	ble.n	90019946 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
90019900:	9a02      	ldr	r2, [sp, #8]
90019902:	fb07 6602 	mla	r6, r7, r2, r6
90019906:	9f03      	ldr	r7, [sp, #12]
90019908:	0872      	lsrs	r2, r6, #1
9001990a:	07f6      	lsls	r6, r6, #31
9001990c:	5cba      	ldrb	r2, [r7, r2]
9001990e:	bf54      	ite	pl
90019910:	f002 020f 	andpl.w	r2, r2, #15
90019914:	1112      	asrmi	r2, r2, #4
90019916:	eb02 1202 	add.w	r2, r2, r2, lsl #4
9001991a:	b2d2      	uxtb	r2, r2
9001991c:	2aff      	cmp	r2, #255	; 0xff
9001991e:	d118      	bne.n	90019952 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x192>
90019920:	f06f 0601 	mvn.w	r6, #1
90019924:	f8d8 2000 	ldr.w	r2, [r8]
90019928:	fb06 f705 	mul.w	r7, r6, r5
9001992c:	f2a6 76fe 	subw	r6, r6, #2046	; 0x7fe
90019930:	ea06 2c12 	and.w	ip, r6, r2, lsr #8
90019934:	0956      	lsrs	r6, r2, #5
90019936:	f3c2 02c4 	ubfx	r2, r2, #3, #5
9001993a:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
9001993e:	ea4c 0606 	orr.w	r6, ip, r6
90019942:	4316      	orrs	r6, r2
90019944:	53e6      	strh	r6, [r4, r7]
90019946:	9a13      	ldr	r2, [sp, #76]	; 0x4c
90019948:	3d01      	subs	r5, #1
9001994a:	4410      	add	r0, r2
9001994c:	9a14      	ldr	r2, [sp, #80]	; 0x50
9001994e:	4411      	add	r1, r2
90019950:	e787      	b.n	90019862 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
90019952:	2a00      	cmp	r2, #0
90019954:	d0f7      	beq.n	90019946 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
90019956:	f06f 0601 	mvn.w	r6, #1
9001995a:	f8d8 c000 	ldr.w	ip, [r8]
9001995e:	fa1f f982 	uxth.w	r9, r2
90019962:	43d2      	mvns	r2, r2
90019964:	436e      	muls	r6, r5
90019966:	f3cc 2a07 	ubfx	sl, ip, #8, #8
9001996a:	b2d2      	uxtb	r2, r2
9001996c:	f834 e006 	ldrh.w	lr, [r4, r6]
90019970:	fb1a fa09 	smulbb	sl, sl, r9
90019974:	9604      	str	r6, [sp, #16]
90019976:	f3cc 4607 	ubfx	r6, ip, #16, #8
9001997a:	ea4f 272e 	mov.w	r7, lr, asr #8
9001997e:	fb16 f609 	smulbb	r6, r6, r9
90019982:	fa5f fc8c 	uxtb.w	ip, ip
90019986:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
9001998a:	fb1c fc09 	smulbb	ip, ip, r9
9001998e:	fb07 6702 	mla	r7, r7, r2, r6
90019992:	ea4f 06ee 	mov.w	r6, lr, asr #3
90019996:	ea4f 0ece 	mov.w	lr, lr, lsl #3
9001999a:	b2bf      	uxth	r7, r7
9001999c:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
900199a0:	fa5f fe8e 	uxtb.w	lr, lr
900199a4:	fb06 a602 	mla	r6, r6, r2, sl
900199a8:	fb0e cc02 	mla	ip, lr, r2, ip
900199ac:	1c7a      	adds	r2, r7, #1
900199ae:	b2b6      	uxth	r6, r6
900199b0:	fa1f fc8c 	uxth.w	ip, ip
900199b4:	eb02 2717 	add.w	r7, r2, r7, lsr #8
900199b8:	9a04      	ldr	r2, [sp, #16]
900199ba:	f10c 0a01 	add.w	sl, ip, #1
900199be:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
900199c2:	eb0a 2a1c 	add.w	sl, sl, ip, lsr #8
900199c6:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
900199ca:	ea4a 0707 	orr.w	r7, sl, r7
900199ce:	f106 0a01 	add.w	sl, r6, #1
900199d2:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
900199d6:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
900199da:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
900199de:	ea47 070a 	orr.w	r7, r7, sl
900199e2:	52a7      	strh	r7, [r4, r2]
900199e4:	e7af      	b.n	90019946 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
900199e6:	f04f 0e00 	mov.w	lr, #0
900199ea:	eba3 020e 	sub.w	r2, r3, lr
900199ee:	2a00      	cmp	r2, #0
900199f0:	f77f af3a 	ble.w	90019868 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
900199f4:	1402      	asrs	r2, r0, #16
900199f6:	9e02      	ldr	r6, [sp, #8]
900199f8:	140d      	asrs	r5, r1, #16
900199fa:	fb06 2505 	mla	r5, r6, r5, r2
900199fe:	9e03      	ldr	r6, [sp, #12]
90019a00:	086a      	lsrs	r2, r5, #1
90019a02:	07ed      	lsls	r5, r5, #31
90019a04:	5cb2      	ldrb	r2, [r6, r2]
90019a06:	bf54      	ite	pl
90019a08:	f002 020f 	andpl.w	r2, r2, #15
90019a0c:	1112      	asrmi	r2, r2, #4
90019a0e:	eb02 1202 	add.w	r2, r2, r2, lsl #4
90019a12:	b2d2      	uxtb	r2, r2
90019a14:	2aff      	cmp	r2, #255	; 0xff
90019a16:	d115      	bne.n	90019a44 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x284>
90019a18:	f8d8 5000 	ldr.w	r5, [r8]
90019a1c:	f6a2 02ff 	subw	r2, r2, #2303	; 0x8ff
90019a20:	ea02 2615 	and.w	r6, r2, r5, lsr #8
90019a24:	096a      	lsrs	r2, r5, #5
90019a26:	f3c5 05c4 	ubfx	r5, r5, #3, #5
90019a2a:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
90019a2e:	4332      	orrs	r2, r6
90019a30:	432a      	orrs	r2, r5
90019a32:	f824 201e 	strh.w	r2, [r4, lr, lsl #1]
90019a36:	9a13      	ldr	r2, [sp, #76]	; 0x4c
90019a38:	f10e 0e01 	add.w	lr, lr, #1
90019a3c:	4410      	add	r0, r2
90019a3e:	9a14      	ldr	r2, [sp, #80]	; 0x50
90019a40:	4411      	add	r1, r2
90019a42:	e7d2      	b.n	900199ea <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
90019a44:	2a00      	cmp	r2, #0
90019a46:	d0f6      	beq.n	90019a36 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
90019a48:	f8d8 7000 	ldr.w	r7, [r8]
90019a4c:	fa1f f982 	uxth.w	r9, r2
90019a50:	f834 c01e 	ldrh.w	ip, [r4, lr, lsl #1]
90019a54:	43d2      	mvns	r2, r2
90019a56:	f3c7 4507 	ubfx	r5, r7, #16, #8
90019a5a:	f3c7 2a07 	ubfx	sl, r7, #8, #8
90019a5e:	ea4f 262c 	mov.w	r6, ip, asr #8
90019a62:	fb15 f509 	smulbb	r5, r5, r9
90019a66:	b2d2      	uxtb	r2, r2
90019a68:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
90019a6c:	b2ff      	uxtb	r7, r7
90019a6e:	fb1a fa09 	smulbb	sl, sl, r9
90019a72:	fb06 5602 	mla	r6, r6, r2, r5
90019a76:	ea4f 05ec 	mov.w	r5, ip, asr #3
90019a7a:	fb17 f709 	smulbb	r7, r7, r9
90019a7e:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
90019a82:	b2b6      	uxth	r6, r6
90019a84:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
90019a88:	fa5f fc8c 	uxtb.w	ip, ip
90019a8c:	fb05 a502 	mla	r5, r5, r2, sl
90019a90:	fb0c 7702 	mla	r7, ip, r2, r7
90019a94:	1c72      	adds	r2, r6, #1
90019a96:	b2ad      	uxth	r5, r5
90019a98:	b2bf      	uxth	r7, r7
90019a9a:	eb02 2616 	add.w	r6, r2, r6, lsr #8
90019a9e:	f107 0a01 	add.w	sl, r7, #1
90019aa2:	f406 4678 	and.w	r6, r6, #63488	; 0xf800
90019aa6:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
90019aaa:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
90019aae:	ea4a 0606 	orr.w	r6, sl, r6
90019ab2:	f105 0a01 	add.w	sl, r5, #1
90019ab6:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
90019aba:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
90019abe:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
90019ac2:	ea46 060a 	orr.w	r6, r6, sl
90019ac6:	f824 601e 	strh.w	r6, [r4, lr, lsl #1]
90019aca:	e7b4      	b.n	90019a36 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
90019acc:	b007      	add	sp, #28
90019ace:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90019ad2:	bf00      	nop
90019ad4:	2402626c 	.word	0x2402626c

90019ad8 <_ZN8touchgfx8LCD16bppD1Ev>:
90019ad8:	4770      	bx	lr

90019ada <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGAD1Ev>:
90019ada:	4770      	bx	lr

90019adc <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GAD1Ev>:
90019adc:	4770      	bx	lr

90019ade <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGAD1Ev>:
90019ade:	4770      	bx	lr

90019ae0 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GAD1Ev>:
90019ae0:	4770      	bx	lr

90019ae2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
90019ae2:	4770      	bx	lr

90019ae4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
90019ae4:	4770      	bx	lr

90019ae6 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
90019ae6:	4770      	bx	lr

90019ae8 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
90019ae8:	4770      	bx	lr

90019aea <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGAD1Ev>:
90019aea:	4770      	bx	lr

90019aec <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GAD1Ev>:
90019aec:	4770      	bx	lr

90019aee <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
90019aee:	4770      	bx	lr

90019af0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GAD1Ev>:
90019af0:	4770      	bx	lr

90019af2 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGAD1Ev>:
90019af2:	4770      	bx	lr

90019af4 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GAD1Ev>:
90019af4:	4770      	bx	lr

90019af6 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGAD1Ev>:
90019af6:	4770      	bx	lr

90019af8 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GAD1Ev>:
90019af8:	4770      	bx	lr

90019afa <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
90019afa:	4770      	bx	lr

90019afc <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
90019afc:	4770      	bx	lr

90019afe <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
90019afe:	4770      	bx	lr

90019b00 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
90019b00:	4770      	bx	lr

90019b02 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
90019b02:	4770      	bx	lr

90019b04 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
90019b04:	4770      	bx	lr

90019b06 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
90019b06:	4770      	bx	lr

90019b08 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
90019b08:	4770      	bx	lr

90019b0a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGAD1Ev>:
90019b0a:	4770      	bx	lr

90019b0c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GAD1Ev>:
90019b0c:	4770      	bx	lr

90019b0e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGAD1Ev>:
90019b0e:	4770      	bx	lr

90019b10 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GAD1Ev>:
90019b10:	4770      	bx	lr

90019b12 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t>:
90019b12:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
90019b16:	b088      	sub	sp, #32
90019b18:	4606      	mov	r6, r0
90019b1a:	4688      	mov	r8, r1
90019b1c:	4691      	mov	r9, r2
90019b1e:	ac08      	add	r4, sp, #32
90019b20:	f824 3d0c 	strh.w	r3, [r4, #-12]!
90019b24:	4620      	mov	r0, r4
90019b26:	f7fd fc67 	bl	900173f8 <_ZNK8touchgfx6Bitmap7getDataEv>
90019b2a:	6833      	ldr	r3, [r6, #0]
90019b2c:	4605      	mov	r5, r0
90019b2e:	4620      	mov	r0, r4
90019b30:	699f      	ldr	r7, [r3, #24]
90019b32:	f7fd fb75 	bl	90017220 <_ZNK8touchgfx6Bitmap8getWidthEv>
90019b36:	4682      	mov	sl, r0
90019b38:	4620      	mov	r0, r4
90019b3a:	f7fd fba5 	bl	90017288 <_ZNK8touchgfx6Bitmap9getHeightEv>
90019b3e:	9500      	str	r5, [sp, #0]
90019b40:	464b      	mov	r3, r9
90019b42:	4642      	mov	r2, r8
90019b44:	4631      	mov	r1, r6
90019b46:	e9cd a001 	strd	sl, r0, [sp, #4]
90019b4a:	a806      	add	r0, sp, #24
90019b4c:	47b8      	blx	r7
90019b4e:	4628      	mov	r0, r5
90019b50:	b008      	add	sp, #32
90019b52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

90019b58 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE>:
90019b58:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
90019b5c:	2300      	movs	r3, #0
90019b5e:	9300      	str	r3, [sp, #0]
90019b60:	4b3d      	ldr	r3, [pc, #244]	; (90019c58 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x100>)
90019b62:	781b      	ldrb	r3, [r3, #0]
90019b64:	2b00      	cmp	r3, #0
90019b66:	d137      	bne.n	90019bd8 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x80>
90019b68:	4a3c      	ldr	r2, [pc, #240]	; (90019c5c <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>)
90019b6a:	f9b2 2000 	ldrsh.w	r2, [r2]
90019b6e:	f8ad 2004 	strh.w	r2, [sp, #4]
90019b72:	2b00      	cmp	r3, #0
90019b74:	d132      	bne.n	90019bdc <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x84>
90019b76:	4b3a      	ldr	r3, [pc, #232]	; (90019c60 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x108>)
90019b78:	f9b3 3000 	ldrsh.w	r3, [r3]
90019b7c:	ac02      	add	r4, sp, #8
90019b7e:	6808      	ldr	r0, [r1, #0]
90019b80:	f8ad 3006 	strh.w	r3, [sp, #6]
90019b84:	ab02      	add	r3, sp, #8
90019b86:	6849      	ldr	r1, [r1, #4]
90019b88:	4d36      	ldr	r5, [pc, #216]	; (90019c64 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x10c>)
90019b8a:	c303      	stmia	r3!, {r0, r1}
90019b8c:	4669      	mov	r1, sp
90019b8e:	4620      	mov	r0, r4
90019b90:	f7fa f9d2 	bl	90013f38 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
90019b94:	4668      	mov	r0, sp
90019b96:	f7fa f9a7 	bl	90013ee8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
90019b9a:	f8bd 3008 	ldrh.w	r3, [sp, #8]
90019b9e:	f8bd 2000 	ldrh.w	r2, [sp]
90019ba2:	462f      	mov	r7, r5
90019ba4:	6828      	ldr	r0, [r5, #0]
90019ba6:	4413      	add	r3, r2
90019ba8:	f8bd 2002 	ldrh.w	r2, [sp, #2]
90019bac:	f8ad 3008 	strh.w	r3, [sp, #8]
90019bb0:	f8bd 300a 	ldrh.w	r3, [sp, #10]
90019bb4:	4413      	add	r3, r2
90019bb6:	f8ad 300a 	strh.w	r3, [sp, #10]
90019bba:	6803      	ldr	r3, [r0, #0]
90019bbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
90019bbe:	4798      	blx	r3
90019bc0:	f010 0f01 	tst.w	r0, #1
90019bc4:	d00c      	beq.n	90019be0 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x88>
90019bc6:	6828      	ldr	r0, [r5, #0]
90019bc8:	6803      	ldr	r3, [r0, #0]
90019bca:	e894 0006 	ldmia.w	r4, {r1, r2}
90019bce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
90019bd0:	4798      	blx	r3
90019bd2:	b004      	add	sp, #16
90019bd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
90019bd8:	4a21      	ldr	r2, [pc, #132]	; (90019c60 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x108>)
90019bda:	e7c6      	b.n	90019b6a <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x12>
90019bdc:	4b1f      	ldr	r3, [pc, #124]	; (90019c5c <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>)
90019bde:	e7cb      	b.n	90019b78 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x20>
90019be0:	6838      	ldr	r0, [r7, #0]
90019be2:	f9bd 800c 	ldrsh.w	r8, [sp, #12]
90019be6:	6803      	ldr	r3, [r0, #0]
90019be8:	f9bd 500e 	ldrsh.w	r5, [sp, #14]
90019bec:	ea4f 0848 	mov.w	r8, r8, lsl #1
90019bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90019bf2:	4798      	blx	r3
90019bf4:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
90019bf8:	f8bd 200a 	ldrh.w	r2, [sp, #10]
90019bfc:	f8bd 6004 	ldrh.w	r6, [sp, #4]
90019c00:	fb16 3602 	smlabb	r6, r6, r2, r3
90019c04:	eb00 0646 	add.w	r6, r0, r6, lsl #1
90019c08:	6838      	ldr	r0, [r7, #0]
90019c0a:	6803      	ldr	r3, [r0, #0]
90019c0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
90019c0e:	4798      	blx	r3
90019c10:	4a12      	ldr	r2, [pc, #72]	; (90019c5c <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>)
90019c12:	f9bd 400a 	ldrsh.w	r4, [sp, #10]
90019c16:	8813      	ldrh	r3, [r2, #0]
90019c18:	4691      	mov	r9, r2
90019c1a:	f9bd 1008 	ldrsh.w	r1, [sp, #8]
90019c1e:	435d      	muls	r5, r3
90019c20:	fb03 1404 	mla	r4, r3, r4, r1
90019c24:	eb00 0444 	add.w	r4, r0, r4, lsl #1
90019c28:	eb04 0545 	add.w	r5, r4, r5, lsl #1
90019c2c:	6838      	ldr	r0, [r7, #0]
90019c2e:	42ac      	cmp	r4, r5
90019c30:	6803      	ldr	r3, [r0, #0]
90019c32:	d20e      	bcs.n	90019c52 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xfa>
90019c34:	f8d3 a034 	ldr.w	sl, [r3, #52]	; 0x34
90019c38:	4632      	mov	r2, r6
90019c3a:	4643      	mov	r3, r8
90019c3c:	4621      	mov	r1, r4
90019c3e:	47d0      	blx	sl
90019c40:	f8b9 3000 	ldrh.w	r3, [r9]
90019c44:	eb04 0443 	add.w	r4, r4, r3, lsl #1
90019c48:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
90019c4c:	eb06 0643 	add.w	r6, r6, r3, lsl #1
90019c50:	e7ec      	b.n	90019c2c <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xd4>
90019c52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90019c54:	4798      	blx	r3
90019c56:	e7bc      	b.n	90019bd2 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x7a>
90019c58:	2402625c 	.word	0x2402625c
90019c5c:	2402625e 	.word	0x2402625e
90019c60:	24026260 	.word	0x24026260
90019c64:	24026264 	.word	0x24026264

90019c68 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb>:
90019c68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90019c6c:	b08b      	sub	sp, #44	; 0x2c
90019c6e:	460f      	mov	r7, r1
90019c70:	4616      	mov	r6, r2
90019c72:	f89d b050 	ldrb.w	fp, [sp, #80]	; 0x50
90019c76:	f89d 4054 	ldrb.w	r4, [sp, #84]	; 0x54
90019c7a:	f1bb 0f00 	cmp.w	fp, #0
90019c7e:	d049      	beq.n	90019d14 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xac>
90019c80:	6810      	ldr	r0, [r2, #0]
90019c82:	ad06      	add	r5, sp, #24
90019c84:	6851      	ldr	r1, [r2, #4]
90019c86:	c503      	stmia	r5!, {r0, r1}
90019c88:	6818      	ldr	r0, [r3, #0]
90019c8a:	ad08      	add	r5, sp, #32
90019c8c:	6859      	ldr	r1, [r3, #4]
90019c8e:	c503      	stmia	r5!, {r0, r1}
90019c90:	a806      	add	r0, sp, #24
90019c92:	f7fa f929 	bl	90013ee8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
90019c96:	4631      	mov	r1, r6
90019c98:	a808      	add	r0, sp, #32
90019c9a:	f7fa f94d 	bl	90013f38 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
90019c9e:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
90019ca2:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
90019ca6:	f8bd 601c 	ldrh.w	r6, [sp, #28]
90019caa:	f9bd 8024 	ldrsh.w	r8, [sp, #36]	; 0x24
90019cae:	fb16 2103 	smlabb	r1, r6, r3, r2
90019cb2:	f9bd 5026 	ldrsh.w	r5, [sp, #38]	; 0x26
90019cb6:	eb07 0641 	add.w	r6, r7, r1, lsl #1
90019cba:	f8bd 1018 	ldrh.w	r1, [sp, #24]
90019cbe:	4f5f      	ldr	r7, [pc, #380]	; (90019e3c <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d4>)
90019cc0:	440a      	add	r2, r1
90019cc2:	6838      	ldr	r0, [r7, #0]
90019cc4:	46b9      	mov	r9, r7
90019cc6:	f8ad 2020 	strh.w	r2, [sp, #32]
90019cca:	f8bd 201a 	ldrh.w	r2, [sp, #26]
90019cce:	4413      	add	r3, r2
90019cd0:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
90019cd4:	6803      	ldr	r3, [r0, #0]
90019cd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
90019cd8:	4798      	blx	r3
90019cda:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
90019cde:	d01c      	beq.n	90019d1a <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb2>
90019ce0:	f010 0f04 	tst.w	r0, #4
90019ce4:	d01d      	beq.n	90019d22 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xba>
90019ce6:	f8d9 0000 	ldr.w	r0, [r9]
90019cea:	2700      	movs	r7, #0
90019cec:	b2ad      	uxth	r5, r5
90019cee:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
90019cf2:	6801      	ldr	r1, [r0, #0]
90019cf4:	f8bd 2020 	ldrh.w	r2, [sp, #32]
90019cf8:	f8cd b00c 	str.w	fp, [sp, #12]
90019cfc:	9501      	str	r5, [sp, #4]
90019cfe:	e9cd 4704 	strd	r4, r7, [sp, #16]
90019d02:	f8bd 401c 	ldrh.w	r4, [sp, #28]
90019d06:	9402      	str	r4, [sp, #8]
90019d08:	fa1f f488 	uxth.w	r4, r8
90019d0c:	9400      	str	r4, [sp, #0]
90019d0e:	6c4c      	ldr	r4, [r1, #68]	; 0x44
90019d10:	4631      	mov	r1, r6
90019d12:	47a0      	blx	r4
90019d14:	b00b      	add	sp, #44	; 0x2c
90019d16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90019d1a:	b914      	cbnz	r4, 90019d22 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xba>
90019d1c:	f010 0f01 	tst.w	r0, #1
90019d20:	e7e0      	b.n	90019ce4 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x7c>
90019d22:	f8d9 0000 	ldr.w	r0, [r9]
90019d26:	ea4f 0748 	mov.w	r7, r8, lsl #1
90019d2a:	6803      	ldr	r3, [r0, #0]
90019d2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
90019d2e:	4798      	blx	r3
90019d30:	4b43      	ldr	r3, [pc, #268]	; (90019e40 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d8>)
90019d32:	f9bd 4022 	ldrsh.w	r4, [sp, #34]	; 0x22
90019d36:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
90019d3a:	881a      	ldrh	r2, [r3, #0]
90019d3c:	469a      	mov	sl, r3
90019d3e:	f9bd 1020 	ldrsh.w	r1, [sp, #32]
90019d42:	fb05 f502 	mul.w	r5, r5, r2
90019d46:	fb02 1404 	mla	r4, r2, r4, r1
90019d4a:	eb00 0444 	add.w	r4, r0, r4, lsl #1
90019d4e:	d059      	beq.n	90019e04 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x19c>
90019d50:	f1cb 09ff 	rsb	r9, fp, #255	; 0xff
90019d54:	eb04 0545 	add.w	r5, r4, r5, lsl #1
90019d58:	fa1f f28b 	uxth.w	r2, fp
90019d5c:	469e      	mov	lr, r3
90019d5e:	fa1f f989 	uxth.w	r9, r9
90019d62:	42ac      	cmp	r4, r5
90019d64:	d264      	bcs.n	90019e30 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1c8>
90019d66:	eb04 0a07 	add.w	sl, r4, r7
90019d6a:	4554      	cmp	r4, sl
90019d6c:	d23d      	bcs.n	90019dea <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x182>
90019d6e:	8821      	ldrh	r1, [r4, #0]
90019d70:	f836 3b02 	ldrh.w	r3, [r6], #2
90019d74:	1208      	asrs	r0, r1, #8
90019d76:	ea4f 2c23 	mov.w	ip, r3, asr #8
90019d7a:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
90019d7e:	ea4f 0be1 	mov.w	fp, r1, asr #3
90019d82:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
90019d86:	00c9      	lsls	r1, r1, #3
90019d88:	fb10 f009 	smulbb	r0, r0, r9
90019d8c:	f00b 0bfc 	and.w	fp, fp, #252	; 0xfc
90019d90:	b2c9      	uxtb	r1, r1
90019d92:	fb0c 0c02 	mla	ip, ip, r2, r0
90019d96:	10d8      	asrs	r0, r3, #3
90019d98:	fb1b fb09 	smulbb	fp, fp, r9
90019d9c:	00db      	lsls	r3, r3, #3
90019d9e:	fa1f fc8c 	uxth.w	ip, ip
90019da2:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
90019da6:	fb11 f109 	smulbb	r1, r1, r9
90019daa:	b2db      	uxtb	r3, r3
90019dac:	fb00 b002 	mla	r0, r0, r2, fp
90019db0:	f10c 0b01 	add.w	fp, ip, #1
90019db4:	fb03 1302 	mla	r3, r3, r2, r1
90019db8:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
90019dbc:	b29b      	uxth	r3, r3
90019dbe:	b280      	uxth	r0, r0
90019dc0:	f40c 4b78 	and.w	fp, ip, #63488	; 0xf800
90019dc4:	f103 0c01 	add.w	ip, r3, #1
90019dc8:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
90019dcc:	1c43      	adds	r3, r0, #1
90019dce:	eb03 2010 	add.w	r0, r3, r0, lsr #8
90019dd2:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
90019dd6:	0940      	lsrs	r0, r0, #5
90019dd8:	ea4c 0c0b 	orr.w	ip, ip, fp
90019ddc:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
90019de0:	ea4c 0c00 	orr.w	ip, ip, r0
90019de4:	f824 cb02 	strh.w	ip, [r4], #2
90019de8:	e7bf      	b.n	90019d6a <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x102>
90019dea:	f8be 3000 	ldrh.w	r3, [lr]
90019dee:	eba3 0308 	sub.w	r3, r3, r8
90019df2:	eb04 0443 	add.w	r4, r4, r3, lsl #1
90019df6:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
90019dfa:	eba3 0308 	sub.w	r3, r3, r8
90019dfe:	eb06 0643 	add.w	r6, r6, r3, lsl #1
90019e02:	e7ae      	b.n	90019d62 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xfa>
90019e04:	eb04 0545 	add.w	r5, r4, r5, lsl #1
90019e08:	f8d9 0000 	ldr.w	r0, [r9]
90019e0c:	42ac      	cmp	r4, r5
90019e0e:	6803      	ldr	r3, [r0, #0]
90019e10:	d20e      	bcs.n	90019e30 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1c8>
90019e12:	f8d3 8034 	ldr.w	r8, [r3, #52]	; 0x34
90019e16:	4632      	mov	r2, r6
90019e18:	463b      	mov	r3, r7
90019e1a:	4621      	mov	r1, r4
90019e1c:	47c0      	blx	r8
90019e1e:	f8ba 3000 	ldrh.w	r3, [sl]
90019e22:	eb04 0443 	add.w	r4, r4, r3, lsl #1
90019e26:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
90019e2a:	eb06 0643 	add.w	r6, r6, r3, lsl #1
90019e2e:	e7eb      	b.n	90019e08 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1a0>
90019e30:	4b02      	ldr	r3, [pc, #8]	; (90019e3c <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d4>)
90019e32:	6818      	ldr	r0, [r3, #0]
90019e34:	6803      	ldr	r3, [r0, #0]
90019e36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90019e38:	4798      	blx	r3
90019e3a:	e76b      	b.n	90019d14 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xac>
90019e3c:	24026264 	.word	0x24026264
90019e40:	2402625e 	.word	0x2402625e

90019e44 <_ZN8touchgfx8LCD16bppD0Ev>:
90019e44:	b510      	push	{r4, lr}
90019e46:	4604      	mov	r4, r0
90019e48:	2178      	movs	r1, #120	; 0x78
90019e4a:	f008 ffca 	bl	90022de2 <_ZdlPvj>
90019e4e:	4620      	mov	r0, r4
90019e50:	bd10      	pop	{r4, pc}

90019e52 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGAD0Ev>:
90019e52:	b510      	push	{r4, lr}
90019e54:	4604      	mov	r4, r0
90019e56:	2104      	movs	r1, #4
90019e58:	f008 ffc3 	bl	90022de2 <_ZdlPvj>
90019e5c:	4620      	mov	r0, r4
90019e5e:	bd10      	pop	{r4, pc}

90019e60 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GAD0Ev>:
90019e60:	b510      	push	{r4, lr}
90019e62:	4604      	mov	r4, r0
90019e64:	2104      	movs	r1, #4
90019e66:	f008 ffbc 	bl	90022de2 <_ZdlPvj>
90019e6a:	4620      	mov	r0, r4
90019e6c:	bd10      	pop	{r4, pc}

90019e6e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGAD0Ev>:
90019e6e:	b510      	push	{r4, lr}
90019e70:	4604      	mov	r4, r0
90019e72:	2104      	movs	r1, #4
90019e74:	f008 ffb5 	bl	90022de2 <_ZdlPvj>
90019e78:	4620      	mov	r0, r4
90019e7a:	bd10      	pop	{r4, pc}

90019e7c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GAD0Ev>:
90019e7c:	b510      	push	{r4, lr}
90019e7e:	4604      	mov	r4, r0
90019e80:	2104      	movs	r1, #4
90019e82:	f008 ffae 	bl	90022de2 <_ZdlPvj>
90019e86:	4620      	mov	r0, r4
90019e88:	bd10      	pop	{r4, pc}

90019e8a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
90019e8a:	b510      	push	{r4, lr}
90019e8c:	4604      	mov	r4, r0
90019e8e:	2104      	movs	r1, #4
90019e90:	f008 ffa7 	bl	90022de2 <_ZdlPvj>
90019e94:	4620      	mov	r0, r4
90019e96:	bd10      	pop	{r4, pc}

90019e98 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
90019e98:	b510      	push	{r4, lr}
90019e9a:	4604      	mov	r4, r0
90019e9c:	2104      	movs	r1, #4
90019e9e:	f008 ffa0 	bl	90022de2 <_ZdlPvj>
90019ea2:	4620      	mov	r0, r4
90019ea4:	bd10      	pop	{r4, pc}

90019ea6 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
90019ea6:	b510      	push	{r4, lr}
90019ea8:	4604      	mov	r4, r0
90019eaa:	2104      	movs	r1, #4
90019eac:	f008 ff99 	bl	90022de2 <_ZdlPvj>
90019eb0:	4620      	mov	r0, r4
90019eb2:	bd10      	pop	{r4, pc}

90019eb4 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
90019eb4:	b510      	push	{r4, lr}
90019eb6:	4604      	mov	r4, r0
90019eb8:	2104      	movs	r1, #4
90019eba:	f008 ff92 	bl	90022de2 <_ZdlPvj>
90019ebe:	4620      	mov	r0, r4
90019ec0:	bd10      	pop	{r4, pc}

90019ec2 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
90019ec2:	b510      	push	{r4, lr}
90019ec4:	4604      	mov	r4, r0
90019ec6:	2104      	movs	r1, #4
90019ec8:	f008 ff8b 	bl	90022de2 <_ZdlPvj>
90019ecc:	4620      	mov	r0, r4
90019ece:	bd10      	pop	{r4, pc}

90019ed0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
90019ed0:	b510      	push	{r4, lr}
90019ed2:	4604      	mov	r4, r0
90019ed4:	2104      	movs	r1, #4
90019ed6:	f008 ff84 	bl	90022de2 <_ZdlPvj>
90019eda:	4620      	mov	r0, r4
90019edc:	bd10      	pop	{r4, pc}

90019ede <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
90019ede:	b510      	push	{r4, lr}
90019ee0:	4604      	mov	r4, r0
90019ee2:	2104      	movs	r1, #4
90019ee4:	f008 ff7d 	bl	90022de2 <_ZdlPvj>
90019ee8:	4620      	mov	r0, r4
90019eea:	bd10      	pop	{r4, pc}

90019eec <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
90019eec:	b510      	push	{r4, lr}
90019eee:	4604      	mov	r4, r0
90019ef0:	2104      	movs	r1, #4
90019ef2:	f008 ff76 	bl	90022de2 <_ZdlPvj>
90019ef6:	4620      	mov	r0, r4
90019ef8:	bd10      	pop	{r4, pc}

90019efa <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGAD0Ev>:
90019efa:	b510      	push	{r4, lr}
90019efc:	4604      	mov	r4, r0
90019efe:	2104      	movs	r1, #4
90019f00:	f008 ff6f 	bl	90022de2 <_ZdlPvj>
90019f04:	4620      	mov	r0, r4
90019f06:	bd10      	pop	{r4, pc}

90019f08 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GAD0Ev>:
90019f08:	b510      	push	{r4, lr}
90019f0a:	4604      	mov	r4, r0
90019f0c:	2104      	movs	r1, #4
90019f0e:	f008 ff68 	bl	90022de2 <_ZdlPvj>
90019f12:	4620      	mov	r0, r4
90019f14:	bd10      	pop	{r4, pc}

90019f16 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
90019f16:	b510      	push	{r4, lr}
90019f18:	4604      	mov	r4, r0
90019f1a:	2104      	movs	r1, #4
90019f1c:	f008 ff61 	bl	90022de2 <_ZdlPvj>
90019f20:	4620      	mov	r0, r4
90019f22:	bd10      	pop	{r4, pc}

90019f24 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GAD0Ev>:
90019f24:	b510      	push	{r4, lr}
90019f26:	4604      	mov	r4, r0
90019f28:	2104      	movs	r1, #4
90019f2a:	f008 ff5a 	bl	90022de2 <_ZdlPvj>
90019f2e:	4620      	mov	r0, r4
90019f30:	bd10      	pop	{r4, pc}

90019f32 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGAD0Ev>:
90019f32:	b510      	push	{r4, lr}
90019f34:	4604      	mov	r4, r0
90019f36:	2104      	movs	r1, #4
90019f38:	f008 ff53 	bl	90022de2 <_ZdlPvj>
90019f3c:	4620      	mov	r0, r4
90019f3e:	bd10      	pop	{r4, pc}

90019f40 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GAD0Ev>:
90019f40:	b510      	push	{r4, lr}
90019f42:	4604      	mov	r4, r0
90019f44:	2104      	movs	r1, #4
90019f46:	f008 ff4c 	bl	90022de2 <_ZdlPvj>
90019f4a:	4620      	mov	r0, r4
90019f4c:	bd10      	pop	{r4, pc}

90019f4e <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGAD0Ev>:
90019f4e:	b510      	push	{r4, lr}
90019f50:	4604      	mov	r4, r0
90019f52:	2104      	movs	r1, #4
90019f54:	f008 ff45 	bl	90022de2 <_ZdlPvj>
90019f58:	4620      	mov	r0, r4
90019f5a:	bd10      	pop	{r4, pc}

90019f5c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GAD0Ev>:
90019f5c:	b510      	push	{r4, lr}
90019f5e:	4604      	mov	r4, r0
90019f60:	2104      	movs	r1, #4
90019f62:	f008 ff3e 	bl	90022de2 <_ZdlPvj>
90019f66:	4620      	mov	r0, r4
90019f68:	bd10      	pop	{r4, pc}

90019f6a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
90019f6a:	b510      	push	{r4, lr}
90019f6c:	4604      	mov	r4, r0
90019f6e:	2104      	movs	r1, #4
90019f70:	f008 ff37 	bl	90022de2 <_ZdlPvj>
90019f74:	4620      	mov	r0, r4
90019f76:	bd10      	pop	{r4, pc}

90019f78 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
90019f78:	b510      	push	{r4, lr}
90019f7a:	4604      	mov	r4, r0
90019f7c:	2104      	movs	r1, #4
90019f7e:	f008 ff30 	bl	90022de2 <_ZdlPvj>
90019f82:	4620      	mov	r0, r4
90019f84:	bd10      	pop	{r4, pc}

90019f86 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
90019f86:	b510      	push	{r4, lr}
90019f88:	4604      	mov	r4, r0
90019f8a:	2104      	movs	r1, #4
90019f8c:	f008 ff29 	bl	90022de2 <_ZdlPvj>
90019f90:	4620      	mov	r0, r4
90019f92:	bd10      	pop	{r4, pc}

90019f94 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
90019f94:	b510      	push	{r4, lr}
90019f96:	4604      	mov	r4, r0
90019f98:	2104      	movs	r1, #4
90019f9a:	f008 ff22 	bl	90022de2 <_ZdlPvj>
90019f9e:	4620      	mov	r0, r4
90019fa0:	bd10      	pop	{r4, pc}

90019fa2 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGAD0Ev>:
90019fa2:	b510      	push	{r4, lr}
90019fa4:	4604      	mov	r4, r0
90019fa6:	2104      	movs	r1, #4
90019fa8:	f008 ff1b 	bl	90022de2 <_ZdlPvj>
90019fac:	4620      	mov	r0, r4
90019fae:	bd10      	pop	{r4, pc}

90019fb0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GAD0Ev>:
90019fb0:	b510      	push	{r4, lr}
90019fb2:	4604      	mov	r4, r0
90019fb4:	2104      	movs	r1, #4
90019fb6:	f008 ff14 	bl	90022de2 <_ZdlPvj>
90019fba:	4620      	mov	r0, r4
90019fbc:	bd10      	pop	{r4, pc}

90019fbe <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGAD0Ev>:
90019fbe:	b510      	push	{r4, lr}
90019fc0:	4604      	mov	r4, r0
90019fc2:	2104      	movs	r1, #4
90019fc4:	f008 ff0d 	bl	90022de2 <_ZdlPvj>
90019fc8:	4620      	mov	r0, r4
90019fca:	bd10      	pop	{r4, pc}

90019fcc <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GAD0Ev>:
90019fcc:	b510      	push	{r4, lr}
90019fce:	4604      	mov	r4, r0
90019fd0:	2104      	movs	r1, #4
90019fd2:	f008 ff06 	bl	90022de2 <_ZdlPvj>
90019fd6:	4620      	mov	r0, r4
90019fd8:	bd10      	pop	{r4, pc}
	...

90019fdc <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss>:
90019fdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90019fe0:	b091      	sub	sp, #68	; 0x44
90019fe2:	469b      	mov	fp, r3
90019fe4:	4616      	mov	r6, r2
90019fe6:	f9b3 2000 	ldrsh.w	r2, [r3]
90019fea:	f10d 0828 	add.w	r8, sp, #40	; 0x28
90019fee:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
90019ff2:	f9bd 906c 	ldrsh.w	r9, [sp, #108]	; 0x6c
90019ff6:	4604      	mov	r4, r0
90019ff8:	f9bd 7070 	ldrsh.w	r7, [sp, #112]	; 0x70
90019ffc:	4640      	mov	r0, r8
90019ffe:	460d      	mov	r5, r1
9001a000:	4659      	mov	r1, fp
9001a002:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
9001a006:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
9001a00a:	f8ad 902c 	strh.w	r9, [sp, #44]	; 0x2c
9001a00e:	f8ad 702e 	strh.w	r7, [sp, #46]	; 0x2e
9001a012:	f7f7 f9df 	bl	900113d4 <_ZN8touchgfx4RectaNERKS0_>
9001a016:	4631      	mov	r1, r6
9001a018:	4640      	mov	r0, r8
9001a01a:	f7f7 f9db 	bl	900113d4 <_ZN8touchgfx4RectaNERKS0_>
9001a01e:	4b74      	ldr	r3, [pc, #464]	; (9001a1f0 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x214>)
9001a020:	8818      	ldrh	r0, [r3, #0]
9001a022:	4b74      	ldr	r3, [pc, #464]	; (9001a1f4 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x218>)
9001a024:	b202      	sxth	r2, r0
9001a026:	8819      	ldrh	r1, [r3, #0]
9001a028:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
9001a02c:	b20e      	sxth	r6, r1
9001a02e:	2b00      	cmp	r3, #0
9001a030:	da07      	bge.n	9001a042 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x66>
9001a032:	f8bd c02c 	ldrh.w	ip, [sp, #44]	; 0x2c
9001a036:	4463      	add	r3, ip
9001a038:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
9001a03c:	2300      	movs	r3, #0
9001a03e:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
9001a042:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
9001a046:	f9bd c02c 	ldrsh.w	ip, [sp, #44]	; 0x2c
9001a04a:	1ad2      	subs	r2, r2, r3
9001a04c:	4594      	cmp	ip, r2
9001a04e:	bfc4      	itt	gt
9001a050:	1ac2      	subgt	r2, r0, r3
9001a052:	f8ad 202c 	strhgt.w	r2, [sp, #44]	; 0x2c
9001a056:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	; 0x2a
9001a05a:	2a00      	cmp	r2, #0
9001a05c:	da07      	bge.n	9001a06e <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x92>
9001a05e:	f8bd c02e 	ldrh.w	ip, [sp, #46]	; 0x2e
9001a062:	4462      	add	r2, ip
9001a064:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
9001a068:	2200      	movs	r2, #0
9001a06a:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
9001a06e:	f9bd a02a 	ldrsh.w	sl, [sp, #42]	; 0x2a
9001a072:	f9bd 202e 	ldrsh.w	r2, [sp, #46]	; 0x2e
9001a076:	eba6 060a 	sub.w	r6, r6, sl
9001a07a:	42b2      	cmp	r2, r6
9001a07c:	bfc4      	itt	gt
9001a07e:	eba1 020a 	subgt.w	r2, r1, sl
9001a082:	f8ad 202e 	strhgt.w	r2, [sp, #46]	; 0x2e
9001a086:	4a5c      	ldr	r2, [pc, #368]	; (9001a1f8 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x21c>)
9001a088:	7812      	ldrb	r2, [r2, #0]
9001a08a:	b9a2      	cbnz	r2, 9001a0b6 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xda>
9001a08c:	f9bd 602c 	ldrsh.w	r6, [sp, #44]	; 0x2c
9001a090:	4286      	cmp	r6, r0
9001a092:	4640      	mov	r0, r8
9001a094:	9303      	str	r3, [sp, #12]
9001a096:	bf14      	ite	ne
9001a098:	2600      	movne	r6, #0
9001a09a:	2601      	moveq	r6, #1
9001a09c:	f7f7 f9dd 	bl	9001145a <_ZNK8touchgfx4Rect7isEmptyEv>
9001a0a0:	9b03      	ldr	r3, [sp, #12]
9001a0a2:	b160      	cbz	r0, 9001a0be <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xe2>
9001a0a4:	2300      	movs	r3, #0
9001a0a6:	8023      	strh	r3, [r4, #0]
9001a0a8:	8063      	strh	r3, [r4, #2]
9001a0aa:	80a3      	strh	r3, [r4, #4]
9001a0ac:	4620      	mov	r0, r4
9001a0ae:	80e3      	strh	r3, [r4, #6]
9001a0b0:	b011      	add	sp, #68	; 0x44
9001a0b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9001a0b6:	f9bd 602e 	ldrsh.w	r6, [sp, #46]	; 0x2e
9001a0ba:	428e      	cmp	r6, r1
9001a0bc:	e7e9      	b.n	9001a092 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xb6>
9001a0be:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	; 0x2c
9001a0c2:	a90e      	add	r1, sp, #56	; 0x38
9001a0c4:	900e      	str	r0, [sp, #56]	; 0x38
9001a0c6:	a80c      	add	r0, sp, #48	; 0x30
9001a0c8:	9205      	str	r2, [sp, #20]
9001a0ca:	f9bd 202e 	ldrsh.w	r2, [sp, #46]	; 0x2e
9001a0ce:	f8ad 903c 	strh.w	r9, [sp, #60]	; 0x3c
9001a0d2:	9206      	str	r2, [sp, #24]
9001a0d4:	f8bb 2000 	ldrh.w	r2, [fp]
9001a0d8:	f8ad 703e 	strh.w	r7, [sp, #62]	; 0x3e
9001a0dc:	1a9b      	subs	r3, r3, r2
9001a0de:	b21b      	sxth	r3, r3
9001a0e0:	9303      	str	r3, [sp, #12]
9001a0e2:	f8bb 3002 	ldrh.w	r3, [fp, #2]
9001a0e6:	f8df b118 	ldr.w	fp, [pc, #280]	; 9001a200 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x224>
9001a0ea:	ebaa 0a03 	sub.w	sl, sl, r3
9001a0ee:	fa0f f38a 	sxth.w	r3, sl
9001a0f2:	9304      	str	r3, [sp, #16]
9001a0f4:	9b03      	ldr	r3, [sp, #12]
9001a0f6:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
9001a0fa:	9b04      	ldr	r3, [sp, #16]
9001a0fc:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
9001a100:	9b05      	ldr	r3, [sp, #20]
9001a102:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
9001a106:	9b06      	ldr	r3, [sp, #24]
9001a108:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
9001a10c:	f7f9 ff14 	bl	90013f38 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
9001a110:	4640      	mov	r0, r8
9001a112:	f7f9 fee9 	bl	90013ee8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
9001a116:	a80e      	add	r0, sp, #56	; 0x38
9001a118:	f7f9 fee6 	bl	90013ee8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
9001a11c:	4b37      	ldr	r3, [pc, #220]	; (9001a1fc <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x220>)
9001a11e:	4628      	mov	r0, r5
9001a120:	f9bd a03c 	ldrsh.w	sl, [sp, #60]	; 0x3c
9001a124:	881b      	ldrh	r3, [r3, #0]
9001a126:	9307      	str	r3, [sp, #28]
9001a128:	682b      	ldr	r3, [r5, #0]
9001a12a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
9001a12c:	4798      	blx	r3
9001a12e:	f8bd 5032 	ldrh.w	r5, [sp, #50]	; 0x32
9001a132:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
9001a136:	4681      	mov	r9, r0
9001a138:	f8db 0000 	ldr.w	r0, [fp]
9001a13c:	fb1a 3305 	smlabb	r3, sl, r5, r3
9001a140:	9d1a      	ldr	r5, [sp, #104]	; 0x68
9001a142:	eb05 0543 	add.w	r5, r5, r3, lsl #1
9001a146:	6803      	ldr	r3, [r0, #0]
9001a148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
9001a14a:	4798      	blx	r3
9001a14c:	4607      	mov	r7, r0
9001a14e:	f8db 0000 	ldr.w	r0, [fp]
9001a152:	f9bd 1028 	ldrsh.w	r1, [sp, #40]	; 0x28
9001a156:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	; 0x2a
9001a15a:	6803      	ldr	r3, [r0, #0]
9001a15c:	9109      	str	r1, [sp, #36]	; 0x24
9001a15e:	9208      	str	r2, [sp, #32]
9001a160:	6b9b      	ldr	r3, [r3, #56]	; 0x38
9001a162:	4798      	blx	r3
9001a164:	f010 0f01 	tst.w	r0, #1
9001a168:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
9001a16c:	d012      	beq.n	9001a194 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1b8>
9001a16e:	f8db 0000 	ldr.w	r0, [fp]
9001a172:	f9bd 2034 	ldrsh.w	r2, [sp, #52]	; 0x34
9001a176:	6803      	ldr	r3, [r0, #0]
9001a178:	9200      	str	r2, [sp, #0]
9001a17a:	6ede      	ldr	r6, [r3, #108]	; 0x6c
9001a17c:	462b      	mov	r3, r5
9001a17e:	e898 0006 	ldmia.w	r8, {r1, r2}
9001a182:	47b0      	blx	r6
9001a184:	9b03      	ldr	r3, [sp, #12]
9001a186:	8023      	strh	r3, [r4, #0]
9001a188:	9b04      	ldr	r3, [sp, #16]
9001a18a:	8063      	strh	r3, [r4, #2]
9001a18c:	9b05      	ldr	r3, [sp, #20]
9001a18e:	80a3      	strh	r3, [r4, #4]
9001a190:	9b06      	ldr	r3, [sp, #24]
9001a192:	e78b      	b.n	9001a0ac <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xd0>
9001a194:	fb09 f202 	mul.w	r2, r9, r2
9001a198:	f9bd 3036 	ldrsh.w	r3, [sp, #54]	; 0x36
9001a19c:	eb02 0141 	add.w	r1, r2, r1, lsl #1
9001a1a0:	440f      	add	r7, r1
9001a1a2:	b166      	cbz	r6, 9001a1be <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1e2>
9001a1a4:	9a07      	ldr	r2, [sp, #28]
9001a1a6:	4592      	cmp	sl, r2
9001a1a8:	d109      	bne.n	9001a1be <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1e2>
9001a1aa:	f8db 0000 	ldr.w	r0, [fp]
9001a1ae:	fb09 f303 	mul.w	r3, r9, r3
9001a1b2:	4629      	mov	r1, r5
9001a1b4:	6802      	ldr	r2, [r0, #0]
9001a1b6:	6b56      	ldr	r6, [r2, #52]	; 0x34
9001a1b8:	463a      	mov	r2, r7
9001a1ba:	47b0      	blx	r6
9001a1bc:	e7e2      	b.n	9001a184 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1a8>
9001a1be:	fb0a f303 	mul.w	r3, sl, r3
9001a1c2:	ea4f 064a 	mov.w	r6, sl, lsl #1
9001a1c6:	f8df b038 	ldr.w	fp, [pc, #56]	; 9001a200 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x224>
9001a1ca:	eb05 0843 	add.w	r8, r5, r3, lsl #1
9001a1ce:	4545      	cmp	r5, r8
9001a1d0:	d2d8      	bcs.n	9001a184 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1a8>
9001a1d2:	f8db 0000 	ldr.w	r0, [fp]
9001a1d6:	4629      	mov	r1, r5
9001a1d8:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
9001a1dc:	4435      	add	r5, r6
9001a1de:	6802      	ldr	r2, [r0, #0]
9001a1e0:	005b      	lsls	r3, r3, #1
9001a1e2:	f8d2 a034 	ldr.w	sl, [r2, #52]	; 0x34
9001a1e6:	463a      	mov	r2, r7
9001a1e8:	47d0      	blx	sl
9001a1ea:	444f      	add	r7, r9
9001a1ec:	e7ef      	b.n	9001a1ce <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1f2>
9001a1ee:	bf00      	nop
9001a1f0:	24026258 	.word	0x24026258
9001a1f4:	2402625a 	.word	0x2402625a
9001a1f8:	2402625c 	.word	0x2402625c
9001a1fc:	2402625e 	.word	0x2402625e
9001a200:	24026264 	.word	0x24026264

9001a204 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh>:
9001a204:	b5f0      	push	{r4, r5, r6, r7, lr}
9001a206:	4606      	mov	r6, r0
9001a208:	b087      	sub	sp, #28
9001a20a:	460c      	mov	r4, r1
9001a20c:	4617      	mov	r7, r2
9001a20e:	461d      	mov	r5, r3
9001a210:	b333      	cbz	r3, 9001a260 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
9001a212:	4608      	mov	r0, r1
9001a214:	f7f7 f921 	bl	9001145a <_ZNK8touchgfx4Rect7isEmptyEv>
9001a218:	bb10      	cbnz	r0, 9001a260 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
9001a21a:	6820      	ldr	r0, [r4, #0]
9001a21c:	ab04      	add	r3, sp, #16
9001a21e:	6861      	ldr	r1, [r4, #4]
9001a220:	4c1b      	ldr	r4, [pc, #108]	; (9001a290 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x8c>)
9001a222:	c303      	stmia	r3!, {r0, r1}
9001a224:	a804      	add	r0, sp, #16
9001a226:	f7f9 fe5f 	bl	90013ee8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
9001a22a:	6820      	ldr	r0, [r4, #0]
9001a22c:	6803      	ldr	r3, [r0, #0]
9001a22e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
9001a230:	4798      	blx	r3
9001a232:	2dff      	cmp	r5, #255	; 0xff
9001a234:	d016      	beq.n	9001a264 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x60>
9001a236:	f010 0f08 	tst.w	r0, #8
9001a23a:	6820      	ldr	r0, [r4, #0]
9001a23c:	d015      	beq.n	9001a26a <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x66>
9001a23e:	2400      	movs	r4, #0
9001a240:	6801      	ldr	r1, [r0, #0]
9001a242:	f8bd 3012 	ldrh.w	r3, [sp, #18]
9001a246:	f8bd 2010 	ldrh.w	r2, [sp, #16]
9001a24a:	e9cd 5402 	strd	r5, r4, [sp, #8]
9001a24e:	f8bd 4016 	ldrh.w	r4, [sp, #22]
9001a252:	9401      	str	r4, [sp, #4]
9001a254:	f8bd 4014 	ldrh.w	r4, [sp, #20]
9001a258:	9400      	str	r4, [sp, #0]
9001a25a:	6e0c      	ldr	r4, [r1, #96]	; 0x60
9001a25c:	4639      	mov	r1, r7
9001a25e:	47a0      	blx	r4
9001a260:	b007      	add	sp, #28
9001a262:	bdf0      	pop	{r4, r5, r6, r7, pc}
9001a264:	f010 0f02 	tst.w	r0, #2
9001a268:	e7e7      	b.n	9001a23a <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x36>
9001a26a:	6803      	ldr	r3, [r0, #0]
9001a26c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
9001a26e:	4798      	blx	r3
9001a270:	4b08      	ldr	r3, [pc, #32]	; (9001a294 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x90>)
9001a272:	4601      	mov	r1, r0
9001a274:	4630      	mov	r0, r6
9001a276:	881a      	ldrh	r2, [r3, #0]
9001a278:	6833      	ldr	r3, [r6, #0]
9001a27a:	e9cd 7500 	strd	r7, r5, [sp]
9001a27e:	6a5d      	ldr	r5, [r3, #36]	; 0x24
9001a280:	ab04      	add	r3, sp, #16
9001a282:	47a8      	blx	r5
9001a284:	6820      	ldr	r0, [r4, #0]
9001a286:	6803      	ldr	r3, [r0, #0]
9001a288:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9001a28a:	4798      	blx	r3
9001a28c:	e7e8      	b.n	9001a260 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
9001a28e:	bf00      	nop
9001a290:	24026264 	.word	0x24026264
9001a294:	2402625e 	.word	0x2402625e

9001a298 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh>:
9001a298:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
9001a29c:	f89d 7024 	ldrb.w	r7, [sp, #36]	; 0x24
9001a2a0:	4688      	mov	r8, r1
9001a2a2:	4614      	mov	r4, r2
9001a2a4:	461d      	mov	r5, r3
9001a2a6:	9e08      	ldr	r6, [sp, #32]
9001a2a8:	2f00      	cmp	r7, #0
9001a2aa:	f000 80ab 	beq.w	9001a404 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>
9001a2ae:	4618      	mov	r0, r3
9001a2b0:	f7f7 f8d3 	bl	9001145a <_ZNK8touchgfx4Rect7isEmptyEv>
9001a2b4:	2800      	cmp	r0, #0
9001a2b6:	f040 80a5 	bne.w	9001a404 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>
9001a2ba:	f9b5 1000 	ldrsh.w	r1, [r5]
9001a2be:	2fff      	cmp	r7, #255	; 0xff
9001a2c0:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
9001a2c4:	f9b5 0004 	ldrsh.w	r0, [r5, #4]
9001a2c8:	fb04 1303 	mla	r3, r4, r3, r1
9001a2cc:	f9b5 5006 	ldrsh.w	r5, [r5, #6]
9001a2d0:	eba4 0200 	sub.w	r2, r4, r0
9001a2d4:	eb08 0143 	add.w	r1, r8, r3, lsl #1
9001a2d8:	fb04 f505 	mul.w	r5, r4, r5
9001a2dc:	ea4f 2816 	mov.w	r8, r6, lsr #8
9001a2e0:	eb01 0545 	add.w	r5, r1, r5, lsl #1
9001a2e4:	d04a      	beq.n	9001a37c <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xe4>
9001a2e6:	b2bc      	uxth	r4, r7
9001a2e8:	f1c7 0cff 	rsb	ip, r7, #255	; 0xff
9001a2ec:	f3c6 4e07 	ubfx	lr, r6, #16, #8
9001a2f0:	fa5f f788 	uxtb.w	r7, r8
9001a2f4:	b2f3      	uxtb	r3, r6
9001a2f6:	0040      	lsls	r0, r0, #1
9001a2f8:	fb0e fe04 	mul.w	lr, lr, r4
9001a2fc:	4367      	muls	r7, r4
9001a2fe:	ea4f 0842 	mov.w	r8, r2, lsl #1
9001a302:	4363      	muls	r3, r4
9001a304:	fa1f fc8c 	uxth.w	ip, ip
9001a308:	42a9      	cmp	r1, r5
9001a30a:	d27b      	bcs.n	9001a404 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>
9001a30c:	eb01 0900 	add.w	r9, r1, r0
9001a310:	4549      	cmp	r1, r9
9001a312:	d231      	bcs.n	9001a378 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xe0>
9001a314:	880a      	ldrh	r2, [r1, #0]
9001a316:	1214      	asrs	r4, r2, #8
9001a318:	10d6      	asrs	r6, r2, #3
9001a31a:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
9001a31e:	00d2      	lsls	r2, r2, #3
9001a320:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
9001a324:	b2d2      	uxtb	r2, r2
9001a326:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
9001a32a:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
9001a32e:	fb14 f40c 	smulbb	r4, r4, ip
9001a332:	ea46 1696 	orr.w	r6, r6, r6, lsr #6
9001a336:	fb12 f20c 	smulbb	r2, r2, ip
9001a33a:	fb16 f60c 	smulbb	r6, r6, ip
9001a33e:	4474      	add	r4, lr
9001a340:	441a      	add	r2, r3
9001a342:	b2a4      	uxth	r4, r4
9001a344:	443e      	add	r6, r7
9001a346:	b292      	uxth	r2, r2
9001a348:	f104 0a01 	add.w	sl, r4, #1
9001a34c:	b2b6      	uxth	r6, r6
9001a34e:	eb0a 2414 	add.w	r4, sl, r4, lsr #8
9001a352:	f102 0a01 	add.w	sl, r2, #1
9001a356:	eb0a 2212 	add.w	r2, sl, r2, lsr #8
9001a35a:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
9001a35e:	f3c2 22c4 	ubfx	r2, r2, #11, #5
9001a362:	4322      	orrs	r2, r4
9001a364:	1c74      	adds	r4, r6, #1
9001a366:	eb04 2616 	add.w	r6, r4, r6, lsr #8
9001a36a:	0976      	lsrs	r6, r6, #5
9001a36c:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
9001a370:	4332      	orrs	r2, r6
9001a372:	f821 2b02 	strh.w	r2, [r1], #2
9001a376:	e7cb      	b.n	9001a310 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x78>
9001a378:	4441      	add	r1, r8
9001a37a:	e7c5      	b.n	9001a308 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x70>
9001a37c:	0973      	lsrs	r3, r6, #5
9001a37e:	4f22      	ldr	r7, [pc, #136]	; (9001a408 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x170>)
9001a380:	f3c6 06c4 	ubfx	r6, r6, #3, #5
9001a384:	ea08 0707 	and.w	r7, r8, r7
9001a388:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
9001a38c:	433b      	orrs	r3, r7
9001a38e:	07e7      	lsls	r7, r4, #31
9001a390:	ea43 0306 	orr.w	r3, r3, r6
9001a394:	b29b      	uxth	r3, r3
9001a396:	d50b      	bpl.n	9001a3b0 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x118>
9001a398:	0040      	lsls	r0, r0, #1
9001a39a:	0052      	lsls	r2, r2, #1
9001a39c:	42a9      	cmp	r1, r5
9001a39e:	d231      	bcs.n	9001a404 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>
9001a3a0:	180c      	adds	r4, r1, r0
9001a3a2:	42a1      	cmp	r1, r4
9001a3a4:	d202      	bcs.n	9001a3ac <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x114>
9001a3a6:	f821 3b02 	strh.w	r3, [r1], #2
9001a3aa:	e7fa      	b.n	9001a3a2 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x10a>
9001a3ac:	4411      	add	r1, r2
9001a3ae:	e7f5      	b.n	9001a39c <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x104>
9001a3b0:	078e      	lsls	r6, r1, #30
9001a3b2:	d008      	beq.n	9001a3c6 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x12e>
9001a3b4:	0066      	lsls	r6, r4, #1
9001a3b6:	460a      	mov	r2, r1
9001a3b8:	42aa      	cmp	r2, r5
9001a3ba:	d202      	bcs.n	9001a3c2 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x12a>
9001a3bc:	8013      	strh	r3, [r2, #0]
9001a3be:	4432      	add	r2, r6
9001a3c0:	e7fa      	b.n	9001a3b8 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x120>
9001a3c2:	3102      	adds	r1, #2
9001a3c4:	3801      	subs	r0, #1
9001a3c6:	07c2      	lsls	r2, r0, #31
9001a3c8:	d50b      	bpl.n	9001a3e2 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x14a>
9001a3ca:	f100 4200 	add.w	r2, r0, #2147483648	; 0x80000000
9001a3ce:	0066      	lsls	r6, r4, #1
9001a3d0:	3a01      	subs	r2, #1
9001a3d2:	eb01 0242 	add.w	r2, r1, r2, lsl #1
9001a3d6:	42aa      	cmp	r2, r5
9001a3d8:	d202      	bcs.n	9001a3e0 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x148>
9001a3da:	8013      	strh	r3, [r2, #0]
9001a3dc:	4432      	add	r2, r6
9001a3de:	e7fa      	b.n	9001a3d6 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x13e>
9001a3e0:	3801      	subs	r0, #1
9001a3e2:	b178      	cbz	r0, 9001a404 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>
9001a3e4:	1040      	asrs	r0, r0, #1
9001a3e6:	ea43 4303 	orr.w	r3, r3, r3, lsl #16
9001a3ea:	0080      	lsls	r0, r0, #2
9001a3ec:	0064      	lsls	r4, r4, #1
9001a3ee:	42a9      	cmp	r1, r5
9001a3f0:	d208      	bcs.n	9001a404 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>
9001a3f2:	180e      	adds	r6, r1, r0
9001a3f4:	460a      	mov	r2, r1
9001a3f6:	42b2      	cmp	r2, r6
9001a3f8:	d202      	bcs.n	9001a400 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x168>
9001a3fa:	f842 3b04 	str.w	r3, [r2], #4
9001a3fe:	e7fa      	b.n	9001a3f6 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x15e>
9001a400:	4421      	add	r1, r4
9001a402:	e7f4      	b.n	9001a3ee <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x156>
9001a404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
9001a408:	00fff800 	.word	0x00fff800

9001a40c <_ZN8touchgfx8LCD16bppC1Ev>:
9001a40c:	2200      	movs	r2, #0
9001a40e:	4910      	ldr	r1, [pc, #64]	; (9001a450 <_ZN8touchgfx8LCD16bppC1Ev+0x44>)
9001a410:	6042      	str	r2, [r0, #4]
9001a412:	6001      	str	r1, [r0, #0]
9001a414:	e9c0 2202 	strd	r2, r2, [r0, #8]
9001a418:	e9c0 2204 	strd	r2, r2, [r0, #16]
9001a41c:	e9c0 2206 	strd	r2, r2, [r0, #24]
9001a420:	e9c0 2208 	strd	r2, r2, [r0, #32]
9001a424:	e9c0 220a 	strd	r2, r2, [r0, #40]	; 0x28
9001a428:	e9c0 220c 	strd	r2, r2, [r0, #48]	; 0x30
9001a42c:	e9c0 220e 	strd	r2, r2, [r0, #56]	; 0x38
9001a430:	e9c0 2210 	strd	r2, r2, [r0, #64]	; 0x40
9001a434:	e9c0 2212 	strd	r2, r2, [r0, #72]	; 0x48
9001a438:	e9c0 2214 	strd	r2, r2, [r0, #80]	; 0x50
9001a43c:	e9c0 2216 	strd	r2, r2, [r0, #88]	; 0x58
9001a440:	e9c0 2218 	strd	r2, r2, [r0, #96]	; 0x60
9001a444:	e9c0 221a 	strd	r2, r2, [r0, #104]	; 0x68
9001a448:	e9c0 221c 	strd	r2, r2, [r0, #112]	; 0x70
9001a44c:	4770      	bx	lr
9001a44e:	bf00      	nop
9001a450:	90026fbc 	.word	0x90026fbc

9001a454 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>:
9001a454:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001a458:	b08d      	sub	sp, #52	; 0x34
9001a45a:	460d      	mov	r5, r1
9001a45c:	4604      	mov	r4, r0
9001a45e:	4699      	mov	r9, r3
9001a460:	6808      	ldr	r0, [r1, #0]
9001a462:	ab08      	add	r3, sp, #32
9001a464:	6849      	ldr	r1, [r1, #4]
9001a466:	c303      	stmia	r3!, {r0, r1}
9001a468:	6810      	ldr	r0, [r2, #0]
9001a46a:	ab0a      	add	r3, sp, #40	; 0x28
9001a46c:	6851      	ldr	r1, [r2, #4]
9001a46e:	c303      	stmia	r3!, {r0, r1}
9001a470:	a808      	add	r0, sp, #32
9001a472:	f7f9 fd39 	bl	90013ee8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
9001a476:	4629      	mov	r1, r5
9001a478:	a80a      	add	r0, sp, #40	; 0x28
9001a47a:	4d67      	ldr	r5, [pc, #412]	; (9001a618 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c4>)
9001a47c:	f7f9 fd5c 	bl	90013f38 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
9001a480:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
9001a484:	f9bd 302a 	ldrsh.w	r3, [sp, #42]	; 0x2a
9001a488:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
9001a48c:	6828      	ldr	r0, [r5, #0]
9001a48e:	fb11 2103 	smlabb	r1, r1, r3, r2
9001a492:	f9bd 802c 	ldrsh.w	r8, [sp, #44]	; 0x2c
9001a496:	f9bd 602e 	ldrsh.w	r6, [sp, #46]	; 0x2e
9001a49a:	eb04 0481 	add.w	r4, r4, r1, lsl #2
9001a49e:	f8bd 1020 	ldrh.w	r1, [sp, #32]
9001a4a2:	440a      	add	r2, r1
9001a4a4:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
9001a4a8:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
9001a4ac:	4413      	add	r3, r2
9001a4ae:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
9001a4b2:	6803      	ldr	r3, [r0, #0]
9001a4b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
9001a4b6:	4798      	blx	r3
9001a4b8:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
9001a4bc:	d119      	bne.n	9001a4f2 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x9e>
9001a4be:	f010 0f20 	tst.w	r0, #32
9001a4c2:	6828      	ldr	r0, [r5, #0]
9001a4c4:	d018      	beq.n	9001a4f8 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xa4>
9001a4c6:	2500      	movs	r5, #0
9001a4c8:	6801      	ldr	r1, [r0, #0]
9001a4ca:	b2b6      	uxth	r6, r6
9001a4cc:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
9001a4d0:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
9001a4d4:	9601      	str	r6, [sp, #4]
9001a4d6:	e9cd 9503 	strd	r9, r5, [sp, #12]
9001a4da:	f8bd 5024 	ldrh.w	r5, [sp, #36]	; 0x24
9001a4de:	9502      	str	r5, [sp, #8]
9001a4e0:	fa1f f588 	uxth.w	r5, r8
9001a4e4:	9500      	str	r5, [sp, #0]
9001a4e6:	6d0d      	ldr	r5, [r1, #80]	; 0x50
9001a4e8:	4621      	mov	r1, r4
9001a4ea:	47a8      	blx	r5
9001a4ec:	b00d      	add	sp, #52	; 0x34
9001a4ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9001a4f2:	f010 0f40 	tst.w	r0, #64	; 0x40
9001a4f6:	e7e4      	b.n	9001a4c2 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x6e>
9001a4f8:	6803      	ldr	r3, [r0, #0]
9001a4fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
9001a4fc:	4798      	blx	r3
9001a4fe:	4947      	ldr	r1, [pc, #284]	; (9001a61c <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c8>)
9001a500:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	; 0x2a
9001a504:	880b      	ldrh	r3, [r1, #0]
9001a506:	468a      	mov	sl, r1
9001a508:	f9bd 5028 	ldrsh.w	r5, [sp, #40]	; 0x28
9001a50c:	fb03 5202 	mla	r2, r3, r2, r5
9001a510:	4373      	muls	r3, r6
9001a512:	eb00 0042 	add.w	r0, r0, r2, lsl #1
9001a516:	eb00 0343 	add.w	r3, r0, r3, lsl #1
9001a51a:	9307      	str	r3, [sp, #28]
9001a51c:	ea4f 0348 	mov.w	r3, r8, lsl #1
9001a520:	9306      	str	r3, [sp, #24]
9001a522:	9b07      	ldr	r3, [sp, #28]
9001a524:	4298      	cmp	r0, r3
9001a526:	d270      	bcs.n	9001a60a <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1b6>
9001a528:	9b06      	ldr	r3, [sp, #24]
9001a52a:	4621      	mov	r1, r4
9001a52c:	eb00 0b03 	add.w	fp, r0, r3
9001a530:	4558      	cmp	r0, fp
9001a532:	d25d      	bcs.n	9001a5f0 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x19c>
9001a534:	f851 4b04 	ldr.w	r4, [r1], #4
9001a538:	0e23      	lsrs	r3, r4, #24
9001a53a:	d014      	beq.n	9001a566 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x112>
9001a53c:	2bff      	cmp	r3, #255	; 0xff
9001a53e:	ea4f 2c14 	mov.w	ip, r4, lsr #8
9001a542:	d112      	bne.n	9001a56a <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x116>
9001a544:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
9001a548:	d10f      	bne.n	9001a56a <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x116>
9001a54a:	0963      	lsrs	r3, r4, #5
9001a54c:	f42c 6cff 	bic.w	ip, ip, #2040	; 0x7f8
9001a550:	f3c4 04c4 	ubfx	r4, r4, #3, #5
9001a554:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
9001a558:	f02c 0c07 	bic.w	ip, ip, #7
9001a55c:	ea43 0c0c 	orr.w	ip, r3, ip
9001a560:	ea4c 0404 	orr.w	r4, ip, r4
9001a564:	8004      	strh	r4, [r0, #0]
9001a566:	3002      	adds	r0, #2
9001a568:	e7e2      	b.n	9001a530 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xdc>
9001a56a:	fb09 f303 	mul.w	r3, r9, r3
9001a56e:	8807      	ldrh	r7, [r0, #0]
9001a570:	f3c4 4e07 	ubfx	lr, r4, #16, #8
9001a574:	fa5f fc8c 	uxtb.w	ip, ip
9001a578:	1c5a      	adds	r2, r3, #1
9001a57a:	123e      	asrs	r6, r7, #8
9001a57c:	10fd      	asrs	r5, r7, #3
9001a57e:	eb02 2223 	add.w	r2, r2, r3, asr #8
9001a582:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
9001a586:	00ff      	lsls	r7, r7, #3
9001a588:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
9001a58c:	1212      	asrs	r2, r2, #8
9001a58e:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
9001a592:	b293      	uxth	r3, r2
9001a594:	43d2      	mvns	r2, r2
9001a596:	b2ff      	uxtb	r7, r7
9001a598:	fb1e fe03 	smulbb	lr, lr, r3
9001a59c:	b2d2      	uxtb	r2, r2
9001a59e:	fb1c fc03 	smulbb	ip, ip, r3
9001a5a2:	b2e4      	uxtb	r4, r4
9001a5a4:	fb06 e602 	mla	r6, r6, r2, lr
9001a5a8:	ea45 1595 	orr.w	r5, r5, r5, lsr #6
9001a5ac:	fb14 f403 	smulbb	r4, r4, r3
9001a5b0:	ea47 1757 	orr.w	r7, r7, r7, lsr #5
9001a5b4:	b2b6      	uxth	r6, r6
9001a5b6:	fb05 c502 	mla	r5, r5, r2, ip
9001a5ba:	fb07 4702 	mla	r7, r7, r2, r4
9001a5be:	f106 0e01 	add.w	lr, r6, #1
9001a5c2:	b2ad      	uxth	r5, r5
9001a5c4:	b2bf      	uxth	r7, r7
9001a5c6:	eb0e 2616 	add.w	r6, lr, r6, lsr #8
9001a5ca:	f105 0c01 	add.w	ip, r5, #1
9001a5ce:	f406 4e78 	and.w	lr, r6, #63488	; 0xf800
9001a5d2:	1c7e      	adds	r6, r7, #1
9001a5d4:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
9001a5d8:	eb06 2617 	add.w	r6, r6, r7, lsr #8
9001a5dc:	096d      	lsrs	r5, r5, #5
9001a5de:	f3c6 26c4 	ubfx	r6, r6, #11, #5
9001a5e2:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
9001a5e6:	ea46 060e 	orr.w	r6, r6, lr
9001a5ea:	432e      	orrs	r6, r5
9001a5ec:	8006      	strh	r6, [r0, #0]
9001a5ee:	e7ba      	b.n	9001a566 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x112>
9001a5f0:	f8ba 3000 	ldrh.w	r3, [sl]
9001a5f4:	f9bd 4024 	ldrsh.w	r4, [sp, #36]	; 0x24
9001a5f8:	eba3 0308 	sub.w	r3, r3, r8
9001a5fc:	eba4 0408 	sub.w	r4, r4, r8
9001a600:	eb00 0043 	add.w	r0, r0, r3, lsl #1
9001a604:	eb01 0484 	add.w	r4, r1, r4, lsl #2
9001a608:	e78b      	b.n	9001a522 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xce>
9001a60a:	4b03      	ldr	r3, [pc, #12]	; (9001a618 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c4>)
9001a60c:	6818      	ldr	r0, [r3, #0]
9001a60e:	6803      	ldr	r3, [r0, #0]
9001a610:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9001a612:	4798      	blx	r3
9001a614:	e76a      	b.n	9001a4ec <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x98>
9001a616:	bf00      	nop
9001a618:	24026264 	.word	0x24026264
9001a61c:	2402625e 	.word	0x2402625e

9001a620 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>:
9001a620:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
9001a624:	b085      	sub	sp, #20
9001a626:	6810      	ldr	r0, [r2, #0]
9001a628:	460c      	mov	r4, r1
9001a62a:	6851      	ldr	r1, [r2, #4]
9001a62c:	466d      	mov	r5, sp
9001a62e:	4616      	mov	r6, r2
9001a630:	c503      	stmia	r5!, {r0, r1}
9001a632:	6818      	ldr	r0, [r3, #0]
9001a634:	6859      	ldr	r1, [r3, #4]
9001a636:	c503      	stmia	r5!, {r0, r1}
9001a638:	4668      	mov	r0, sp
9001a63a:	4d2e      	ldr	r5, [pc, #184]	; (9001a6f4 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xd4>)
9001a63c:	f7f9 fc54 	bl	90013ee8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
9001a640:	4631      	mov	r1, r6
9001a642:	a802      	add	r0, sp, #8
9001a644:	4e2c      	ldr	r6, [pc, #176]	; (9001a6f8 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xd8>)
9001a646:	f7f9 fc77 	bl	90013f38 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
9001a64a:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
9001a64e:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
9001a652:	f8bd 1004 	ldrh.w	r1, [sp, #4]
9001a656:	6828      	ldr	r0, [r5, #0]
9001a658:	fb11 2103 	smlabb	r1, r1, r3, r2
9001a65c:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
9001a660:	f9bd 800e 	ldrsh.w	r8, [sp, #14]
9001a664:	eb04 0481 	add.w	r4, r4, r1, lsl #2
9001a668:	f8bd 1000 	ldrh.w	r1, [sp]
9001a66c:	440a      	add	r2, r1
9001a66e:	f8ad 2008 	strh.w	r2, [sp, #8]
9001a672:	f8bd 2002 	ldrh.w	r2, [sp, #2]
9001a676:	4413      	add	r3, r2
9001a678:	f8ad 300a 	strh.w	r3, [sp, #10]
9001a67c:	6803      	ldr	r3, [r0, #0]
9001a67e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
9001a680:	4798      	blx	r3
9001a682:	8833      	ldrh	r3, [r6, #0]
9001a684:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
9001a688:	ea4f 0c47 	mov.w	ip, r7, lsl #1
9001a68c:	f9bd 1008 	ldrsh.w	r1, [sp, #8]
9001a690:	f8df e068 	ldr.w	lr, [pc, #104]	; 9001a6fc <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xdc>
9001a694:	fb03 1202 	mla	r2, r3, r2, r1
9001a698:	fb08 f303 	mul.w	r3, r8, r3
9001a69c:	eb00 0042 	add.w	r0, r0, r2, lsl #1
9001a6a0:	eb00 0343 	add.w	r3, r0, r3, lsl #1
9001a6a4:	4298      	cmp	r0, r3
9001a6a6:	d21d      	bcs.n	9001a6e4 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xc4>
9001a6a8:	eb00 080c 	add.w	r8, r0, ip
9001a6ac:	4540      	cmp	r0, r8
9001a6ae:	d20f      	bcs.n	9001a6d0 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xb0>
9001a6b0:	f854 1b04 	ldr.w	r1, [r4], #4
9001a6b4:	ea4f 1951 	mov.w	r9, r1, lsr #5
9001a6b8:	ea0e 2211 	and.w	r2, lr, r1, lsr #8
9001a6bc:	f3c1 01c4 	ubfx	r1, r1, #3, #5
9001a6c0:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
9001a6c4:	ea42 0209 	orr.w	r2, r2, r9
9001a6c8:	430a      	orrs	r2, r1
9001a6ca:	f820 2b02 	strh.w	r2, [r0], #2
9001a6ce:	e7ed      	b.n	9001a6ac <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0x8c>
9001a6d0:	8832      	ldrh	r2, [r6, #0]
9001a6d2:	1bd2      	subs	r2, r2, r7
9001a6d4:	eb00 0042 	add.w	r0, r0, r2, lsl #1
9001a6d8:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
9001a6dc:	1bd2      	subs	r2, r2, r7
9001a6de:	eb04 0482 	add.w	r4, r4, r2, lsl #2
9001a6e2:	e7df      	b.n	9001a6a4 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0x84>
9001a6e4:	6828      	ldr	r0, [r5, #0]
9001a6e6:	6803      	ldr	r3, [r0, #0]
9001a6e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9001a6ea:	4798      	blx	r3
9001a6ec:	b005      	add	sp, #20
9001a6ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
9001a6f2:	bf00      	nop
9001a6f4:	24026264 	.word	0x24026264
9001a6f8:	2402625e 	.word	0x2402625e
9001a6fc:	fffff800 	.word	0xfffff800

9001a700 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>:
9001a700:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
9001a704:	b08e      	sub	sp, #56	; 0x38
9001a706:	460e      	mov	r6, r1
9001a708:	4604      	mov	r4, r0
9001a70a:	461d      	mov	r5, r3
9001a70c:	6808      	ldr	r0, [r1, #0]
9001a70e:	ab0a      	add	r3, sp, #40	; 0x28
9001a710:	6849      	ldr	r1, [r1, #4]
9001a712:	f8df 81d4 	ldr.w	r8, [pc, #468]	; 9001a8e8 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e8>
9001a716:	f8df 91d4 	ldr.w	r9, [pc, #468]	; 9001a8ec <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1ec>
9001a71a:	c303      	stmia	r3!, {r0, r1}
9001a71c:	6810      	ldr	r0, [r2, #0]
9001a71e:	ab0c      	add	r3, sp, #48	; 0x30
9001a720:	6851      	ldr	r1, [r2, #4]
9001a722:	c303      	stmia	r3!, {r0, r1}
9001a724:	a80a      	add	r0, sp, #40	; 0x28
9001a726:	f7f9 fbdf 	bl	90013ee8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
9001a72a:	4631      	mov	r1, r6
9001a72c:	a80c      	add	r0, sp, #48	; 0x30
9001a72e:	f7f9 fc03 	bl	90013f38 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
9001a732:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	; 0x30
9001a736:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
9001a73a:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
9001a73e:	f8d8 0000 	ldr.w	r0, [r8]
9001a742:	fb11 2103 	smlabb	r1, r1, r3, r2
9001a746:	f9bd 7034 	ldrsh.w	r7, [sp, #52]	; 0x34
9001a74a:	f9bd 6036 	ldrsh.w	r6, [sp, #54]	; 0x36
9001a74e:	eb01 0141 	add.w	r1, r1, r1, lsl #1
9001a752:	440c      	add	r4, r1
9001a754:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
9001a758:	440a      	add	r2, r1
9001a75a:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
9001a75e:	f8bd 202a 	ldrh.w	r2, [sp, #42]	; 0x2a
9001a762:	4413      	add	r3, r2
9001a764:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
9001a768:	6803      	ldr	r3, [r0, #0]
9001a76a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
9001a76c:	4798      	blx	r3
9001a76e:	2dff      	cmp	r5, #255	; 0xff
9001a770:	d124      	bne.n	9001a7bc <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xbc>
9001a772:	f010 0f01 	tst.w	r0, #1
9001a776:	f8d8 0000 	ldr.w	r0, [r8]
9001a77a:	d022      	beq.n	9001a7c2 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xc2>
9001a77c:	2100      	movs	r1, #0
9001a77e:	f04f 0e01 	mov.w	lr, #1
9001a782:	f8d0 c000 	ldr.w	ip, [r0]
9001a786:	b2b6      	uxth	r6, r6
9001a788:	f8cd e018 	str.w	lr, [sp, #24]
9001a78c:	b2bf      	uxth	r7, r7
9001a78e:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
9001a792:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
9001a796:	e9cd 1107 	strd	r1, r1, [sp, #28]
9001a79a:	f8b9 e000 	ldrh.w	lr, [r9]
9001a79e:	9503      	str	r5, [sp, #12]
9001a7a0:	9601      	str	r6, [sp, #4]
9001a7a2:	9700      	str	r7, [sp, #0]
9001a7a4:	e9cd 1e04 	strd	r1, lr, [sp, #16]
9001a7a8:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
9001a7ac:	9102      	str	r1, [sp, #8]
9001a7ae:	4621      	mov	r1, r4
9001a7b0:	f8dc 5040 	ldr.w	r5, [ip, #64]	; 0x40
9001a7b4:	47a8      	blx	r5
9001a7b6:	b00e      	add	sp, #56	; 0x38
9001a7b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
9001a7bc:	f010 0f04 	tst.w	r0, #4
9001a7c0:	e7d9      	b.n	9001a776 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x76>
9001a7c2:	6803      	ldr	r3, [r0, #0]
9001a7c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
9001a7c6:	4798      	blx	r3
9001a7c8:	f8b9 3000 	ldrh.w	r3, [r9]
9001a7cc:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	; 0x32
9001a7d0:	ea4f 0e47 	mov.w	lr, r7, lsl #1
9001a7d4:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	; 0x30
9001a7d8:	435e      	muls	r6, r3
9001a7da:	f9bd c02c 	ldrsh.w	ip, [sp, #44]	; 0x2c
9001a7de:	2dff      	cmp	r5, #255	; 0xff
9001a7e0:	fb03 1202 	mla	r2, r3, r2, r1
9001a7e4:	ebac 0c07 	sub.w	ip, ip, r7
9001a7e8:	eba3 0707 	sub.w	r7, r3, r7
9001a7ec:	eb00 0042 	add.w	r0, r0, r2, lsl #1
9001a7f0:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
9001a7f4:	eb00 0646 	add.w	r6, r0, r6, lsl #1
9001a7f8:	ea4f 0747 	mov.w	r7, r7, lsl #1
9001a7fc:	d049      	beq.n	9001a892 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x192>
9001a7fe:	43eb      	mvns	r3, r5
9001a800:	fa1f f985 	uxth.w	r9, r5
9001a804:	b2db      	uxtb	r3, r3
9001a806:	42b0      	cmp	r0, r6
9001a808:	d266      	bcs.n	9001a8d8 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d8>
9001a80a:	eb00 0a0e 	add.w	sl, r0, lr
9001a80e:	4550      	cmp	r0, sl
9001a810:	4621      	mov	r1, r4
9001a812:	f104 0403 	add.w	r4, r4, #3
9001a816:	d25b      	bcs.n	9001a8d0 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d0>
9001a818:	8802      	ldrh	r2, [r0, #0]
9001a81a:	f814 1c01 	ldrb.w	r1, [r4, #-1]
9001a81e:	ea4f 2822 	mov.w	r8, r2, asr #8
9001a822:	fb11 f109 	smulbb	r1, r1, r9
9001a826:	10d5      	asrs	r5, r2, #3
9001a828:	f008 08f8 	and.w	r8, r8, #248	; 0xf8
9001a82c:	00d2      	lsls	r2, r2, #3
9001a82e:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
9001a832:	ea48 1858 	orr.w	r8, r8, r8, lsr #5
9001a836:	ea45 1595 	orr.w	r5, r5, r5, lsr #6
9001a83a:	fb08 1803 	mla	r8, r8, r3, r1
9001a83e:	f814 1c02 	ldrb.w	r1, [r4, #-2]
9001a842:	b2d2      	uxtb	r2, r2
9001a844:	fb11 f109 	smulbb	r1, r1, r9
9001a848:	fa1f f888 	uxth.w	r8, r8
9001a84c:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
9001a850:	fb05 1503 	mla	r5, r5, r3, r1
9001a854:	f814 1c03 	ldrb.w	r1, [r4, #-3]
9001a858:	fb11 f109 	smulbb	r1, r1, r9
9001a85c:	b2ad      	uxth	r5, r5
9001a85e:	fb02 1203 	mla	r2, r2, r3, r1
9001a862:	f108 0101 	add.w	r1, r8, #1
9001a866:	b292      	uxth	r2, r2
9001a868:	eb01 2818 	add.w	r8, r1, r8, lsr #8
9001a86c:	1c51      	adds	r1, r2, #1
9001a86e:	f408 4878 	and.w	r8, r8, #63488	; 0xf800
9001a872:	eb01 2212 	add.w	r2, r1, r2, lsr #8
9001a876:	1c69      	adds	r1, r5, #1
9001a878:	eb01 2515 	add.w	r5, r1, r5, lsr #8
9001a87c:	f3c2 22c4 	ubfx	r2, r2, #11, #5
9001a880:	096d      	lsrs	r5, r5, #5
9001a882:	ea42 0208 	orr.w	r2, r2, r8
9001a886:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
9001a88a:	432a      	orrs	r2, r5
9001a88c:	f820 2b02 	strh.w	r2, [r0], #2
9001a890:	e7bd      	b.n	9001a80e <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x10e>
9001a892:	4a14      	ldr	r2, [pc, #80]	; (9001a8e4 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e4>)
9001a894:	42b0      	cmp	r0, r6
9001a896:	d21f      	bcs.n	9001a8d8 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d8>
9001a898:	eb00 050e 	add.w	r5, r0, lr
9001a89c:	42a8      	cmp	r0, r5
9001a89e:	4621      	mov	r1, r4
9001a8a0:	f104 0403 	add.w	r4, r4, #3
9001a8a4:	d210      	bcs.n	9001a8c8 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1c8>
9001a8a6:	f814 3c02 	ldrb.w	r3, [r4, #-2]
9001a8aa:	f814 1c01 	ldrb.w	r1, [r4, #-1]
9001a8ae:	00db      	lsls	r3, r3, #3
9001a8b0:	ea02 2101 	and.w	r1, r2, r1, lsl #8
9001a8b4:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
9001a8b8:	430b      	orrs	r3, r1
9001a8ba:	f814 1c03 	ldrb.w	r1, [r4, #-3]
9001a8be:	ea43 03d1 	orr.w	r3, r3, r1, lsr #3
9001a8c2:	f820 3b02 	strh.w	r3, [r0], #2
9001a8c6:	e7e9      	b.n	9001a89c <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x19c>
9001a8c8:	4438      	add	r0, r7
9001a8ca:	eb01 040c 	add.w	r4, r1, ip
9001a8ce:	e7e1      	b.n	9001a894 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x194>
9001a8d0:	4438      	add	r0, r7
9001a8d2:	eb01 040c 	add.w	r4, r1, ip
9001a8d6:	e796      	b.n	9001a806 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x106>
9001a8d8:	4b03      	ldr	r3, [pc, #12]	; (9001a8e8 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e8>)
9001a8da:	6818      	ldr	r0, [r3, #0]
9001a8dc:	6803      	ldr	r3, [r0, #0]
9001a8de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9001a8e0:	4798      	blx	r3
9001a8e2:	e768      	b.n	9001a7b6 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xb6>
9001a8e4:	fffff800 	.word	0xfffff800
9001a8e8:	24026264 	.word	0x24026264
9001a8ec:	2402625e 	.word	0x2402625e

9001a8f0 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb>:
9001a8f0:	b4f0      	push	{r4, r5, r6, r7}
9001a8f2:	4616      	mov	r6, r2
9001a8f4:	461c      	mov	r4, r3
9001a8f6:	460d      	mov	r5, r1
9001a8f8:	9a04      	ldr	r2, [sp, #16]
9001a8fa:	2e01      	cmp	r6, #1
9001a8fc:	f89d 3014 	ldrb.w	r3, [sp, #20]
9001a900:	f89d 7018 	ldrb.w	r7, [sp, #24]
9001a904:	d012      	beq.n	9001a92c <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x3c>
9001a906:	d303      	bcc.n	9001a910 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x20>
9001a908:	2e02      	cmp	r6, #2
9001a90a:	d00a      	beq.n	9001a922 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x32>
9001a90c:	bcf0      	pop	{r4, r5, r6, r7}
9001a90e:	4770      	bx	lr
9001a910:	6805      	ldr	r5, [r0, #0]
9001a912:	e9cd 3704 	strd	r3, r7, [sp, #16]
9001a916:	68ed      	ldr	r5, [r5, #12]
9001a918:	4613      	mov	r3, r2
9001a91a:	4622      	mov	r2, r4
9001a91c:	46ac      	mov	ip, r5
9001a91e:	bcf0      	pop	{r4, r5, r6, r7}
9001a920:	4760      	bx	ip
9001a922:	4621      	mov	r1, r4
9001a924:	4628      	mov	r0, r5
9001a926:	bcf0      	pop	{r4, r5, r6, r7}
9001a928:	f7ff bd94 	b.w	9001a454 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
9001a92c:	4621      	mov	r1, r4
9001a92e:	4628      	mov	r0, r5
9001a930:	bcf0      	pop	{r4, r5, r6, r7}
9001a932:	f7ff bee5 	b.w	9001a700 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>
	...

9001a938 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>:
9001a938:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001a93c:	b093      	sub	sp, #76	; 0x4c
9001a93e:	4681      	mov	r9, r0
9001a940:	4688      	mov	r8, r1
9001a942:	6810      	ldr	r0, [r2, #0]
9001a944:	6851      	ldr	r1, [r2, #4]
9001a946:	ac0e      	add	r4, sp, #56	; 0x38
9001a948:	4616      	mov	r6, r2
9001a94a:	f89d a070 	ldrb.w	sl, [sp, #112]	; 0x70
9001a94e:	4f6b      	ldr	r7, [pc, #428]	; (9001aafc <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c4>)
9001a950:	c403      	stmia	r4!, {r0, r1}
9001a952:	6818      	ldr	r0, [r3, #0]
9001a954:	ac10      	add	r4, sp, #64	; 0x40
9001a956:	6859      	ldr	r1, [r3, #4]
9001a958:	c403      	stmia	r4!, {r0, r1}
9001a95a:	a80e      	add	r0, sp, #56	; 0x38
9001a95c:	f7f9 fac4 	bl	90013ee8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
9001a960:	4631      	mov	r1, r6
9001a962:	a810      	add	r0, sp, #64	; 0x40
9001a964:	4e66      	ldr	r6, [pc, #408]	; (9001ab00 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c8>)
9001a966:	f7f9 fae7 	bl	90013f38 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
9001a96a:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	; 0x40
9001a96e:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	; 0x42
9001a972:	f8bd 103c 	ldrh.w	r1, [sp, #60]	; 0x3c
9001a976:	6830      	ldr	r0, [r6, #0]
9001a978:	fb11 2103 	smlabb	r1, r1, r3, r2
9001a97c:	f9bd 4044 	ldrsh.w	r4, [sp, #68]	; 0x44
9001a980:	f9bd 5046 	ldrsh.w	r5, [sp, #70]	; 0x46
9001a984:	4489      	add	r9, r1
9001a986:	f8bd 1038 	ldrh.w	r1, [sp, #56]	; 0x38
9001a98a:	440a      	add	r2, r1
9001a98c:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
9001a990:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
9001a994:	4413      	add	r3, r2
9001a996:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
9001a99a:	6803      	ldr	r3, [r0, #0]
9001a99c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
9001a99e:	4798      	blx	r3
9001a9a0:	f010 0f80 	tst.w	r0, #128	; 0x80
9001a9a4:	6830      	ldr	r0, [r6, #0]
9001a9a6:	d01d      	beq.n	9001a9e4 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xac>
9001a9a8:	2200      	movs	r2, #0
9001a9aa:	6801      	ldr	r1, [r0, #0]
9001a9ac:	b2a4      	uxth	r4, r4
9001a9ae:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
9001a9b2:	b2ad      	uxth	r5, r5
9001a9b4:	e9cd 2208 	strd	r2, r2, [sp, #32]
9001a9b8:	220b      	movs	r2, #11
9001a9ba:	9207      	str	r2, [sp, #28]
9001a9bc:	883a      	ldrh	r2, [r7, #0]
9001a9be:	9502      	str	r5, [sp, #8]
9001a9c0:	9206      	str	r2, [sp, #24]
9001a9c2:	2201      	movs	r2, #1
9001a9c4:	9401      	str	r4, [sp, #4]
9001a9c6:	e9cd a204 	strd	sl, r2, [sp, #16]
9001a9ca:	f8bd 203c 	ldrh.w	r2, [sp, #60]	; 0x3c
9001a9ce:	9203      	str	r2, [sp, #12]
9001a9d0:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
9001a9d4:	9200      	str	r2, [sp, #0]
9001a9d6:	4642      	mov	r2, r8
9001a9d8:	6bcc      	ldr	r4, [r1, #60]	; 0x3c
9001a9da:	4649      	mov	r1, r9
9001a9dc:	47a0      	blx	r4
9001a9de:	b013      	add	sp, #76	; 0x4c
9001a9e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9001a9e4:	6803      	ldr	r3, [r0, #0]
9001a9e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
9001a9e8:	4798      	blx	r3
9001a9ea:	883b      	ldrh	r3, [r7, #0]
9001a9ec:	f9bd 2042 	ldrsh.w	r2, [sp, #66]	; 0x42
9001a9f0:	f04f 0e04 	mov.w	lr, #4
9001a9f4:	f9bd 1040 	ldrsh.w	r1, [sp, #64]	; 0x40
9001a9f8:	435d      	muls	r5, r3
9001a9fa:	fb03 1202 	mla	r2, r3, r2, r1
9001a9fe:	eb00 0042 	add.w	r0, r0, r2, lsl #1
9001aa02:	eb00 0245 	add.w	r2, r0, r5, lsl #1
9001aa06:	920c      	str	r2, [sp, #48]	; 0x30
9001aa08:	f9bd 203c 	ldrsh.w	r2, [sp, #60]	; 0x3c
9001aa0c:	1b12      	subs	r2, r2, r4
9001aa0e:	920d      	str	r2, [sp, #52]	; 0x34
9001aa10:	0062      	lsls	r2, r4, #1
9001aa12:	1b1c      	subs	r4, r3, r4
9001aa14:	920a      	str	r2, [sp, #40]	; 0x28
9001aa16:	0063      	lsls	r3, r4, #1
9001aa18:	930b      	str	r3, [sp, #44]	; 0x2c
9001aa1a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
9001aa1c:	4298      	cmp	r0, r3
9001aa1e:	d266      	bcs.n	9001aaee <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1b6>
9001aa20:	9b0a      	ldr	r3, [sp, #40]	; 0x28
9001aa22:	eb00 0b03 	add.w	fp, r0, r3
9001aa26:	4558      	cmp	r0, fp
9001aa28:	d25c      	bcs.n	9001aae4 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1ac>
9001aa2a:	f819 3b01 	ldrb.w	r3, [r9], #1
9001aa2e:	fb1e e303 	smlabb	r3, lr, r3, lr
9001aa32:	f858 2003 	ldr.w	r2, [r8, r3]
9001aa36:	0e11      	lsrs	r1, r2, #24
9001aa38:	d012      	beq.n	9001aa60 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
9001aa3a:	29ff      	cmp	r1, #255	; 0xff
9001aa3c:	ea4f 2712 	mov.w	r7, r2, lsr #8
9001aa40:	d110      	bne.n	9001aa64 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
9001aa42:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
9001aa46:	d10d      	bne.n	9001aa64 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
9001aa48:	0953      	lsrs	r3, r2, #5
9001aa4a:	f427 67ff 	bic.w	r7, r7, #2040	; 0x7f8
9001aa4e:	f3c2 02c4 	ubfx	r2, r2, #3, #5
9001aa52:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
9001aa56:	f027 0707 	bic.w	r7, r7, #7
9001aa5a:	431f      	orrs	r7, r3
9001aa5c:	433a      	orrs	r2, r7
9001aa5e:	8002      	strh	r2, [r0, #0]
9001aa60:	3002      	adds	r0, #2
9001aa62:	e7e0      	b.n	9001aa26 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xee>
9001aa64:	fb0a f101 	mul.w	r1, sl, r1
9001aa68:	8806      	ldrh	r6, [r0, #0]
9001aa6a:	f3c2 4c07 	ubfx	ip, r2, #16, #8
9001aa6e:	b2d2      	uxtb	r2, r2
9001aa70:	1c4b      	adds	r3, r1, #1
9001aa72:	1235      	asrs	r5, r6, #8
9001aa74:	10f4      	asrs	r4, r6, #3
9001aa76:	eb03 2321 	add.w	r3, r3, r1, asr #8
9001aa7a:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
9001aa7e:	00f6      	lsls	r6, r6, #3
9001aa80:	f004 04fc 	and.w	r4, r4, #252	; 0xfc
9001aa84:	121b      	asrs	r3, r3, #8
9001aa86:	b2f6      	uxtb	r6, r6
9001aa88:	b299      	uxth	r1, r3
9001aa8a:	43db      	mvns	r3, r3
9001aa8c:	ea45 1555 	orr.w	r5, r5, r5, lsr #5
9001aa90:	fb1c fc01 	smulbb	ip, ip, r1
9001aa94:	b2db      	uxtb	r3, r3
9001aa96:	fb12 f201 	smulbb	r2, r2, r1
9001aa9a:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
9001aa9e:	fb05 c503 	mla	r5, r5, r3, ip
9001aaa2:	b2ff      	uxtb	r7, r7
9001aaa4:	fb06 2203 	mla	r2, r6, r3, r2
9001aaa8:	ea44 1494 	orr.w	r4, r4, r4, lsr #6
9001aaac:	fb17 f701 	smulbb	r7, r7, r1
9001aab0:	b2ad      	uxth	r5, r5
9001aab2:	b292      	uxth	r2, r2
9001aab4:	fb04 7403 	mla	r4, r4, r3, r7
9001aab8:	f105 0c01 	add.w	ip, r5, #1
9001aabc:	1c57      	adds	r7, r2, #1
9001aabe:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
9001aac2:	eb07 2712 	add.w	r7, r7, r2, lsr #8
9001aac6:	b2a4      	uxth	r4, r4
9001aac8:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
9001aacc:	f3c7 27c4 	ubfx	r7, r7, #11, #5
9001aad0:	433d      	orrs	r5, r7
9001aad2:	1c67      	adds	r7, r4, #1
9001aad4:	eb07 2414 	add.w	r4, r7, r4, lsr #8
9001aad8:	0964      	lsrs	r4, r4, #5
9001aada:	f404 64fc 	and.w	r4, r4, #2016	; 0x7e0
9001aade:	4325      	orrs	r5, r4
9001aae0:	8005      	strh	r5, [r0, #0]
9001aae2:	e7bd      	b.n	9001aa60 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
9001aae4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
9001aae6:	4418      	add	r0, r3
9001aae8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
9001aaea:	4499      	add	r9, r3
9001aaec:	e795      	b.n	9001aa1a <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xe2>
9001aaee:	4b04      	ldr	r3, [pc, #16]	; (9001ab00 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c8>)
9001aaf0:	6818      	ldr	r0, [r3, #0]
9001aaf2:	6803      	ldr	r3, [r0, #0]
9001aaf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9001aaf6:	4798      	blx	r3
9001aaf8:	e771      	b.n	9001a9de <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xa6>
9001aafa:	bf00      	nop
9001aafc:	2402625e 	.word	0x2402625e
9001ab00:	24026264 	.word	0x24026264

9001ab04 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h>:
9001ab04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001ab08:	b087      	sub	sp, #28
9001ab0a:	4680      	mov	r8, r0
9001ab0c:	460d      	mov	r5, r1
9001ab0e:	4614      	mov	r4, r2
9001ab10:	f89d 6040 	ldrb.w	r6, [sp, #64]	; 0x40
9001ab14:	2e00      	cmp	r6, #0
9001ab16:	f000 80b9 	beq.w	9001ac8c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x188>
9001ab1a:	6810      	ldr	r0, [r2, #0]
9001ab1c:	af02      	add	r7, sp, #8
9001ab1e:	6851      	ldr	r1, [r2, #4]
9001ab20:	c703      	stmia	r7!, {r0, r1}
9001ab22:	6818      	ldr	r0, [r3, #0]
9001ab24:	af04      	add	r7, sp, #16
9001ab26:	6859      	ldr	r1, [r3, #4]
9001ab28:	c703      	stmia	r7!, {r0, r1}
9001ab2a:	a802      	add	r0, sp, #8
9001ab2c:	f7f9 f9dc 	bl	90013ee8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
9001ab30:	4621      	mov	r1, r4
9001ab32:	a804      	add	r0, sp, #16
9001ab34:	f7f9 fa00 	bl	90013f38 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
9001ab38:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
9001ab3c:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
9001ab40:	f8bd 400c 	ldrh.w	r4, [sp, #12]
9001ab44:	f9bd 7016 	ldrsh.w	r7, [sp, #22]
9001ab48:	fb14 2103 	smlabb	r1, r4, r3, r2
9001ab4c:	eb08 0401 	add.w	r4, r8, r1
9001ab50:	f8bd 1008 	ldrh.w	r1, [sp, #8]
9001ab54:	f9bd 8014 	ldrsh.w	r8, [sp, #20]
9001ab58:	440a      	add	r2, r1
9001ab5a:	ea4f 0a48 	mov.w	sl, r8, lsl #1
9001ab5e:	f8ad 2010 	strh.w	r2, [sp, #16]
9001ab62:	f8bd 200a 	ldrh.w	r2, [sp, #10]
9001ab66:	4413      	add	r3, r2
9001ab68:	f8ad 3012 	strh.w	r3, [sp, #18]
9001ab6c:	4b49      	ldr	r3, [pc, #292]	; (9001ac94 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x190>)
9001ab6e:	6818      	ldr	r0, [r3, #0]
9001ab70:	6803      	ldr	r3, [r0, #0]
9001ab72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
9001ab74:	4798      	blx	r3
9001ab76:	4b48      	ldr	r3, [pc, #288]	; (9001ac98 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x194>)
9001ab78:	f9bd 1012 	ldrsh.w	r1, [sp, #18]
9001ab7c:	2eff      	cmp	r6, #255	; 0xff
9001ab7e:	881a      	ldrh	r2, [r3, #0]
9001ab80:	f9bd c010 	ldrsh.w	ip, [sp, #16]
9001ab84:	fb02 c101 	mla	r1, r2, r1, ip
9001ab88:	fb02 f207 	mul.w	r2, r2, r7
9001ab8c:	eb00 0041 	add.w	r0, r0, r1, lsl #1
9001ab90:	f105 0104 	add.w	r1, r5, #4
9001ab94:	461d      	mov	r5, r3
9001ab96:	d05a      	beq.n	9001ac4e <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x14a>
9001ab98:	f1c6 0eff 	rsb	lr, r6, #255	; 0xff
9001ab9c:	eb00 0242 	add.w	r2, r0, r2, lsl #1
9001aba0:	b2b6      	uxth	r6, r6
9001aba2:	9301      	str	r3, [sp, #4]
9001aba4:	fa1f fe8e 	uxth.w	lr, lr
9001aba8:	4282      	cmp	r2, r0
9001abaa:	d96a      	bls.n	9001ac82 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x17e>
9001abac:	eb00 0b0a 	add.w	fp, r0, sl
9001abb0:	4583      	cmp	fp, r0
9001abb2:	d940      	bls.n	9001ac36 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x132>
9001abb4:	8805      	ldrh	r5, [r0, #0]
9001abb6:	f814 3b01 	ldrb.w	r3, [r4], #1
9001abba:	122f      	asrs	r7, r5, #8
9001abbc:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
9001abc0:	ea4f 09e5 	mov.w	r9, r5, asr #3
9001abc4:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
9001abc8:	00ed      	lsls	r5, r5, #3
9001abca:	ea4f 2c23 	mov.w	ip, r3, asr #8
9001abce:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
9001abd2:	fb17 f70e 	smulbb	r7, r7, lr
9001abd6:	b2ed      	uxtb	r5, r5
9001abd8:	fb19 f90e 	smulbb	r9, r9, lr
9001abdc:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
9001abe0:	fb15 f50e 	smulbb	r5, r5, lr
9001abe4:	fb0c 7c06 	mla	ip, ip, r6, r7
9001abe8:	10df      	asrs	r7, r3, #3
9001abea:	00db      	lsls	r3, r3, #3
9001abec:	fa1f fc8c 	uxth.w	ip, ip
9001abf0:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
9001abf4:	b2db      	uxtb	r3, r3
9001abf6:	fb07 9706 	mla	r7, r7, r6, r9
9001abfa:	f10c 0901 	add.w	r9, ip, #1
9001abfe:	fb03 5306 	mla	r3, r3, r6, r5
9001ac02:	eb09 2c1c 	add.w	ip, r9, ip, lsr #8
9001ac06:	b29b      	uxth	r3, r3
9001ac08:	f40c 4978 	and.w	r9, ip, #63488	; 0xf800
9001ac0c:	b2bf      	uxth	r7, r7
9001ac0e:	f103 0c01 	add.w	ip, r3, #1
9001ac12:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
9001ac16:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
9001ac1a:	ea4c 0c09 	orr.w	ip, ip, r9
9001ac1e:	f107 0901 	add.w	r9, r7, #1
9001ac22:	eb09 2717 	add.w	r7, r9, r7, lsr #8
9001ac26:	097f      	lsrs	r7, r7, #5
9001ac28:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
9001ac2c:	ea4c 0c07 	orr.w	ip, ip, r7
9001ac30:	f820 cb02 	strh.w	ip, [r0], #2
9001ac34:	e7bc      	b.n	9001abb0 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xac>
9001ac36:	9b01      	ldr	r3, [sp, #4]
9001ac38:	881b      	ldrh	r3, [r3, #0]
9001ac3a:	eba3 0308 	sub.w	r3, r3, r8
9001ac3e:	eb00 0043 	add.w	r0, r0, r3, lsl #1
9001ac42:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
9001ac46:	eba3 0308 	sub.w	r3, r3, r8
9001ac4a:	441c      	add	r4, r3
9001ac4c:	e7ac      	b.n	9001aba8 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xa4>
9001ac4e:	eb00 0242 	add.w	r2, r0, r2, lsl #1
9001ac52:	4282      	cmp	r2, r0
9001ac54:	d915      	bls.n	9001ac82 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x17e>
9001ac56:	eb00 060a 	add.w	r6, r0, sl
9001ac5a:	4286      	cmp	r6, r0
9001ac5c:	d906      	bls.n	9001ac6c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x168>
9001ac5e:	f814 3b01 	ldrb.w	r3, [r4], #1
9001ac62:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
9001ac66:	f820 3b02 	strh.w	r3, [r0], #2
9001ac6a:	e7f6      	b.n	9001ac5a <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x156>
9001ac6c:	882b      	ldrh	r3, [r5, #0]
9001ac6e:	eba3 0308 	sub.w	r3, r3, r8
9001ac72:	eb00 0043 	add.w	r0, r0, r3, lsl #1
9001ac76:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
9001ac7a:	eba3 0308 	sub.w	r3, r3, r8
9001ac7e:	441c      	add	r4, r3
9001ac80:	e7e7      	b.n	9001ac52 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x14e>
9001ac82:	4b04      	ldr	r3, [pc, #16]	; (9001ac94 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x190>)
9001ac84:	6818      	ldr	r0, [r3, #0]
9001ac86:	6803      	ldr	r3, [r0, #0]
9001ac88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9001ac8a:	4798      	blx	r3
9001ac8c:	b007      	add	sp, #28
9001ac8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9001ac92:	bf00      	nop
9001ac94:	24026264 	.word	0x24026264
9001ac98:	2402625e 	.word	0x2402625e

9001ac9c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>:
9001ac9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001aca0:	b091      	sub	sp, #68	; 0x44
9001aca2:	4680      	mov	r8, r0
9001aca4:	460f      	mov	r7, r1
9001aca6:	4614      	mov	r4, r2
9001aca8:	f89d 5068 	ldrb.w	r5, [sp, #104]	; 0x68
9001acac:	2d00      	cmp	r5, #0
9001acae:	d051      	beq.n	9001ad54 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xb8>
9001acb0:	6810      	ldr	r0, [r2, #0]
9001acb2:	ae0c      	add	r6, sp, #48	; 0x30
9001acb4:	6851      	ldr	r1, [r2, #4]
9001acb6:	f8df 9200 	ldr.w	r9, [pc, #512]	; 9001aeb8 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x21c>
9001acba:	c603      	stmia	r6!, {r0, r1}
9001acbc:	6818      	ldr	r0, [r3, #0]
9001acbe:	ae0e      	add	r6, sp, #56	; 0x38
9001acc0:	6859      	ldr	r1, [r3, #4]
9001acc2:	c603      	stmia	r6!, {r0, r1}
9001acc4:	a80c      	add	r0, sp, #48	; 0x30
9001acc6:	f7f9 f90f 	bl	90013ee8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
9001acca:	4621      	mov	r1, r4
9001accc:	a80e      	add	r0, sp, #56	; 0x38
9001acce:	f7f9 f933 	bl	90013f38 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
9001acd2:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
9001acd6:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
9001acda:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
9001acde:	f8d9 0000 	ldr.w	r0, [r9]
9001ace2:	fb11 2103 	smlabb	r1, r1, r3, r2
9001ace6:	f9bd 603c 	ldrsh.w	r6, [sp, #60]	; 0x3c
9001acea:	f9bd a03e 	ldrsh.w	sl, [sp, #62]	; 0x3e
9001acee:	eb08 0401 	add.w	r4, r8, r1
9001acf2:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
9001acf6:	f8df 81c4 	ldr.w	r8, [pc, #452]	; 9001aebc <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x220>
9001acfa:	440a      	add	r2, r1
9001acfc:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
9001ad00:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
9001ad04:	4413      	add	r3, r2
9001ad06:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
9001ad0a:	6803      	ldr	r3, [r0, #0]
9001ad0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
9001ad0e:	4798      	blx	r3
9001ad10:	f010 0f80 	tst.w	r0, #128	; 0x80
9001ad14:	f8d9 0000 	ldr.w	r0, [r9]
9001ad18:	d01f      	beq.n	9001ad5a <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xbe>
9001ad1a:	2200      	movs	r2, #0
9001ad1c:	6801      	ldr	r1, [r0, #0]
9001ad1e:	b2b6      	uxth	r6, r6
9001ad20:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
9001ad24:	e9cd 2208 	strd	r2, r2, [sp, #32]
9001ad28:	220b      	movs	r2, #11
9001ad2a:	9207      	str	r2, [sp, #28]
9001ad2c:	f8b8 2000 	ldrh.w	r2, [r8]
9001ad30:	9601      	str	r6, [sp, #4]
9001ad32:	9206      	str	r2, [sp, #24]
9001ad34:	2201      	movs	r2, #1
9001ad36:	e9cd 5204 	strd	r5, r2, [sp, #16]
9001ad3a:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
9001ad3e:	9203      	str	r2, [sp, #12]
9001ad40:	fa1f f28a 	uxth.w	r2, sl
9001ad44:	9202      	str	r2, [sp, #8]
9001ad46:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
9001ad4a:	9200      	str	r2, [sp, #0]
9001ad4c:	463a      	mov	r2, r7
9001ad4e:	6bcd      	ldr	r5, [r1, #60]	; 0x3c
9001ad50:	4621      	mov	r1, r4
9001ad52:	47a8      	blx	r5
9001ad54:	b011      	add	sp, #68	; 0x44
9001ad56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9001ad5a:	6803      	ldr	r3, [r0, #0]
9001ad5c:	ea4f 0946 	mov.w	r9, r6, lsl #1
9001ad60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
9001ad62:	4798      	blx	r3
9001ad64:	f8b8 2000 	ldrh.w	r2, [r8]
9001ad68:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
9001ad6c:	2dff      	cmp	r5, #255	; 0xff
9001ad6e:	f9bd 1038 	ldrsh.w	r1, [sp, #56]	; 0x38
9001ad72:	fb0a fa02 	mul.w	sl, sl, r2
9001ad76:	fb02 1303 	mla	r3, r2, r3, r1
9001ad7a:	eb00 0043 	add.w	r0, r0, r3, lsl #1
9001ad7e:	d062      	beq.n	9001ae46 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1aa>
9001ad80:	ea6f 0c05 	mvn.w	ip, r5
9001ad84:	eb00 034a 	add.w	r3, r0, sl, lsl #1
9001ad88:	b2ad      	uxth	r5, r5
9001ad8a:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
9001ad8e:	fa5f fc8c 	uxtb.w	ip, ip
9001ad92:	930a      	str	r3, [sp, #40]	; 0x28
9001ad94:	9b0a      	ldr	r3, [sp, #40]	; 0x28
9001ad96:	4298      	cmp	r0, r3
9001ad98:	f080 8085 	bcs.w	9001aea6 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x20a>
9001ad9c:	eb00 0b09 	add.w	fp, r0, r9
9001ada0:	4558      	cmp	r0, fp
9001ada2:	d246      	bcs.n	9001ae32 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x196>
9001ada4:	f814 eb01 	ldrb.w	lr, [r4], #1
9001ada8:	2303      	movs	r3, #3
9001adaa:	2204      	movs	r2, #4
9001adac:	fb13 2e0e 	smlabb	lr, r3, lr, r2
9001adb0:	8803      	ldrh	r3, [r0, #0]
9001adb2:	eb07 0a0e 	add.w	sl, r7, lr
9001adb6:	1219      	asrs	r1, r3, #8
9001adb8:	10da      	asrs	r2, r3, #3
9001adba:	f817 e00e 	ldrb.w	lr, [r7, lr]
9001adbe:	f89a 8002 	ldrb.w	r8, [sl, #2]
9001adc2:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
9001adc6:	00db      	lsls	r3, r3, #3
9001adc8:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
9001adcc:	fb18 f805 	smulbb	r8, r8, r5
9001add0:	ea41 1151 	orr.w	r1, r1, r1, lsr #5
9001add4:	fb1e fe05 	smulbb	lr, lr, r5
9001add8:	b2db      	uxtb	r3, r3
9001adda:	fb01 810c 	mla	r1, r1, ip, r8
9001adde:	f89a 8001 	ldrb.w	r8, [sl, #1]
9001ade2:	ea42 1292 	orr.w	r2, r2, r2, lsr #6
9001ade6:	fb18 f805 	smulbb	r8, r8, r5
9001adea:	ea43 1353 	orr.w	r3, r3, r3, lsr #5
9001adee:	b289      	uxth	r1, r1
9001adf0:	fb02 820c 	mla	r2, r2, ip, r8
9001adf4:	fb03 e30c 	mla	r3, r3, ip, lr
9001adf8:	f101 0801 	add.w	r8, r1, #1
9001adfc:	b292      	uxth	r2, r2
9001adfe:	b29b      	uxth	r3, r3
9001ae00:	eb08 2111 	add.w	r1, r8, r1, lsr #8
9001ae04:	f102 0801 	add.w	r8, r2, #1
9001ae08:	f103 0e01 	add.w	lr, r3, #1
9001ae0c:	eb08 2812 	add.w	r8, r8, r2, lsr #8
9001ae10:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
9001ae14:	eb0e 2e13 	add.w	lr, lr, r3, lsr #8
9001ae18:	ea4f 1858 	mov.w	r8, r8, lsr #5
9001ae1c:	f3ce 2ec4 	ubfx	lr, lr, #11, #5
9001ae20:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
9001ae24:	ea4e 0101 	orr.w	r1, lr, r1
9001ae28:	ea41 0108 	orr.w	r1, r1, r8
9001ae2c:	f820 1b02 	strh.w	r1, [r0], #2
9001ae30:	e7b6      	b.n	9001ada0 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x104>
9001ae32:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
9001ae34:	881b      	ldrh	r3, [r3, #0]
9001ae36:	1b9b      	subs	r3, r3, r6
9001ae38:	eb00 0043 	add.w	r0, r0, r3, lsl #1
9001ae3c:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
9001ae40:	1b9b      	subs	r3, r3, r6
9001ae42:	441c      	add	r4, r3
9001ae44:	e7a6      	b.n	9001ad94 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xf8>
9001ae46:	eb00 0a4a 	add.w	sl, r0, sl, lsl #1
9001ae4a:	2203      	movs	r2, #3
9001ae4c:	2504      	movs	r5, #4
9001ae4e:	4919      	ldr	r1, [pc, #100]	; (9001aeb4 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x218>)
9001ae50:	4550      	cmp	r0, sl
9001ae52:	d228      	bcs.n	9001aea6 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x20a>
9001ae54:	eb00 0c09 	add.w	ip, r0, r9
9001ae58:	4560      	cmp	r0, ip
9001ae5a:	4623      	mov	r3, r4
9001ae5c:	d219      	bcs.n	9001ae92 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1f6>
9001ae5e:	f893 e000 	ldrb.w	lr, [r3]
9001ae62:	3401      	adds	r4, #1
9001ae64:	fb12 5e0e 	smlabb	lr, r2, lr, r5
9001ae68:	eb07 0b0e 	add.w	fp, r7, lr
9001ae6c:	f817 e00e 	ldrb.w	lr, [r7, lr]
9001ae70:	f89b 3002 	ldrb.w	r3, [fp, #2]
9001ae74:	f89b b001 	ldrb.w	fp, [fp, #1]
9001ae78:	ea01 2303 	and.w	r3, r1, r3, lsl #8
9001ae7c:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
9001ae80:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
9001ae84:	ea43 030b 	orr.w	r3, r3, fp
9001ae88:	ea43 03de 	orr.w	r3, r3, lr, lsr #3
9001ae8c:	f820 3b02 	strh.w	r3, [r0], #2
9001ae90:	e7e2      	b.n	9001ae58 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1bc>
9001ae92:	f8b8 3000 	ldrh.w	r3, [r8]
9001ae96:	1b9b      	subs	r3, r3, r6
9001ae98:	eb00 0043 	add.w	r0, r0, r3, lsl #1
9001ae9c:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
9001aea0:	1b9b      	subs	r3, r3, r6
9001aea2:	441c      	add	r4, r3
9001aea4:	e7d4      	b.n	9001ae50 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1b4>
9001aea6:	4b04      	ldr	r3, [pc, #16]	; (9001aeb8 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x21c>)
9001aea8:	6818      	ldr	r0, [r3, #0]
9001aeaa:	6803      	ldr	r3, [r0, #0]
9001aeac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9001aeae:	4798      	blx	r3
9001aeb0:	e750      	b.n	9001ad54 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xb8>
9001aeb2:	bf00      	nop
9001aeb4:	fffff800 	.word	0xfffff800
9001aeb8:	24026264 	.word	0x24026264
9001aebc:	2402625e 	.word	0x2402625e

9001aec0 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>:
9001aec0:	b430      	push	{r4, r5}
9001aec2:	780d      	ldrb	r5, [r1, #0]
9001aec4:	f89d 4008 	ldrb.w	r4, [sp, #8]
9001aec8:	2d01      	cmp	r5, #1
9001aeca:	d00a      	beq.n	9001aee2 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x22>
9001aecc:	d305      	bcc.n	9001aeda <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x1a>
9001aece:	2d02      	cmp	r5, #2
9001aed0:	d10b      	bne.n	9001aeea <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x2a>
9001aed2:	9402      	str	r4, [sp, #8]
9001aed4:	bc30      	pop	{r4, r5}
9001aed6:	f7ff be15 	b.w	9001ab04 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h>
9001aeda:	9402      	str	r4, [sp, #8]
9001aedc:	bc30      	pop	{r4, r5}
9001aede:	f7ff bd2b 	b.w	9001a938 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>
9001aee2:	9402      	str	r4, [sp, #8]
9001aee4:	bc30      	pop	{r4, r5}
9001aee6:	f7ff bed9 	b.w	9001ac9c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>
9001aeea:	bc30      	pop	{r4, r5}
9001aeec:	4770      	bx	lr
	...

9001aef0 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>:
9001aef0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001aef4:	b087      	sub	sp, #28
9001aef6:	4604      	mov	r4, r0
9001aef8:	460e      	mov	r6, r1
9001aefa:	6810      	ldr	r0, [r2, #0]
9001aefc:	6851      	ldr	r1, [r2, #4]
9001aefe:	ad02      	add	r5, sp, #8
9001af00:	4617      	mov	r7, r2
9001af02:	f89d a040 	ldrb.w	sl, [sp, #64]	; 0x40
9001af06:	f8df 9230 	ldr.w	r9, [pc, #560]	; 9001b138 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x248>
9001af0a:	c503      	stmia	r5!, {r0, r1}
9001af0c:	6818      	ldr	r0, [r3, #0]
9001af0e:	ad04      	add	r5, sp, #16
9001af10:	6859      	ldr	r1, [r3, #4]
9001af12:	c503      	stmia	r5!, {r0, r1}
9001af14:	a802      	add	r0, sp, #8
9001af16:	f7f8 ffe7 	bl	90013ee8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
9001af1a:	4639      	mov	r1, r7
9001af1c:	a804      	add	r0, sp, #16
9001af1e:	f7f9 f80b 	bl	90013f38 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
9001af22:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
9001af26:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
9001af2a:	f8bd 100c 	ldrh.w	r1, [sp, #12]
9001af2e:	f9bd 8014 	ldrsh.w	r8, [sp, #20]
9001af32:	fb11 2103 	smlabb	r1, r1, r3, r2
9001af36:	f9bd 5016 	ldrsh.w	r5, [sp, #22]
9001af3a:	eb04 0441 	add.w	r4, r4, r1, lsl #1
9001af3e:	440e      	add	r6, r1
9001af40:	f8bd 1008 	ldrh.w	r1, [sp, #8]
9001af44:	440a      	add	r2, r1
9001af46:	f8ad 2010 	strh.w	r2, [sp, #16]
9001af4a:	f8bd 200a 	ldrh.w	r2, [sp, #10]
9001af4e:	4413      	add	r3, r2
9001af50:	f8ad 3012 	strh.w	r3, [sp, #18]
9001af54:	4b77      	ldr	r3, [pc, #476]	; (9001b134 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x244>)
9001af56:	6818      	ldr	r0, [r3, #0]
9001af58:	6803      	ldr	r3, [r0, #0]
9001af5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
9001af5c:	4798      	blx	r3
9001af5e:	f8b9 b000 	ldrh.w	fp, [r9]
9001af62:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
9001af66:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
9001af6a:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
9001af6e:	fb05 f50b 	mul.w	r5, r5, fp
9001af72:	fb0b 2303 	mla	r3, fp, r3, r2
9001af76:	eb00 0043 	add.w	r0, r0, r3, lsl #1
9001af7a:	ea4f 0348 	mov.w	r3, r8, lsl #1
9001af7e:	9300      	str	r3, [sp, #0]
9001af80:	d069      	beq.n	9001b056 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x166>
9001af82:	eb00 0b45 	add.w	fp, r0, r5, lsl #1
9001af86:	4558      	cmp	r0, fp
9001af88:	f080 80cc 	bcs.w	9001b124 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x234>
9001af8c:	9b00      	ldr	r3, [sp, #0]
9001af8e:	4631      	mov	r1, r6
9001af90:	18c3      	adds	r3, r0, r3
9001af92:	9301      	str	r3, [sp, #4]
9001af94:	9b01      	ldr	r3, [sp, #4]
9001af96:	4298      	cmp	r0, r3
9001af98:	d24f      	bcs.n	9001b03a <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x14a>
9001af9a:	f811 2b01 	ldrb.w	r2, [r1], #1
9001af9e:	2a00      	cmp	r2, #0
9001afa0:	d048      	beq.n	9001b034 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x144>
9001afa2:	fb0a f202 	mul.w	r2, sl, r2
9001afa6:	1c53      	adds	r3, r2, #1
9001afa8:	eb03 2312 	add.w	r3, r3, r2, lsr #8
9001afac:	121b      	asrs	r3, r3, #8
9001afae:	d041      	beq.n	9001b034 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x144>
9001afb0:	8802      	ldrh	r2, [r0, #0]
9001afb2:	b29e      	uxth	r6, r3
9001afb4:	f8b4 c000 	ldrh.w	ip, [r4]
9001afb8:	43db      	mvns	r3, r3
9001afba:	1215      	asrs	r5, r2, #8
9001afbc:	b2db      	uxtb	r3, r3
9001afbe:	ea4f 272c 	mov.w	r7, ip, asr #8
9001afc2:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
9001afc6:	ea4f 0ee2 	mov.w	lr, r2, asr #3
9001afca:	fb15 f503 	smulbb	r5, r5, r3
9001afce:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
9001afd2:	00d2      	lsls	r2, r2, #3
9001afd4:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
9001afd8:	fb07 5706 	mla	r7, r7, r6, r5
9001afdc:	ea4f 05ec 	mov.w	r5, ip, asr #3
9001afe0:	b2d2      	uxtb	r2, r2
9001afe2:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
9001afe6:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
9001afea:	fb1e fe03 	smulbb	lr, lr, r3
9001afee:	b2bf      	uxth	r7, r7
9001aff0:	fb12 f203 	smulbb	r2, r2, r3
9001aff4:	fa5f fc8c 	uxtb.w	ip, ip
9001aff8:	fb05 e506 	mla	r5, r5, r6, lr
9001affc:	f107 0e01 	add.w	lr, r7, #1
9001b000:	fb0c 2c06 	mla	ip, ip, r6, r2
9001b004:	eb0e 2717 	add.w	r7, lr, r7, lsr #8
9001b008:	fa1f fc8c 	uxth.w	ip, ip
9001b00c:	f407 4e78 	and.w	lr, r7, #63488	; 0xf800
9001b010:	b2ad      	uxth	r5, r5
9001b012:	f10c 0701 	add.w	r7, ip, #1
9001b016:	eb07 271c 	add.w	r7, r7, ip, lsr #8
9001b01a:	f3c7 27c4 	ubfx	r7, r7, #11, #5
9001b01e:	ea47 070e 	orr.w	r7, r7, lr
9001b022:	f105 0e01 	add.w	lr, r5, #1
9001b026:	eb0e 2515 	add.w	r5, lr, r5, lsr #8
9001b02a:	096d      	lsrs	r5, r5, #5
9001b02c:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
9001b030:	432f      	orrs	r7, r5
9001b032:	8007      	strh	r7, [r0, #0]
9001b034:	3002      	adds	r0, #2
9001b036:	3402      	adds	r4, #2
9001b038:	e7ac      	b.n	9001af94 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0xa4>
9001b03a:	f8b9 3000 	ldrh.w	r3, [r9]
9001b03e:	f9bd 600c 	ldrsh.w	r6, [sp, #12]
9001b042:	eba3 0308 	sub.w	r3, r3, r8
9001b046:	eba6 0608 	sub.w	r6, r6, r8
9001b04a:	eb00 0043 	add.w	r0, r0, r3, lsl #1
9001b04e:	eb04 0446 	add.w	r4, r4, r6, lsl #1
9001b052:	440e      	add	r6, r1
9001b054:	e797      	b.n	9001af86 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x96>
9001b056:	eb00 0545 	add.w	r5, r0, r5, lsl #1
9001b05a:	42a8      	cmp	r0, r5
9001b05c:	d262      	bcs.n	9001b124 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x234>
9001b05e:	9b00      	ldr	r3, [sp, #0]
9001b060:	4631      	mov	r1, r6
9001b062:	eb00 0b03 	add.w	fp, r0, r3
9001b066:	4558      	cmp	r0, fp
9001b068:	d24e      	bcs.n	9001b108 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x218>
9001b06a:	f811 3b01 	ldrb.w	r3, [r1], #1
9001b06e:	b12b      	cbz	r3, 9001b07c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x18c>
9001b070:	2bff      	cmp	r3, #255	; 0xff
9001b072:	f8b4 e000 	ldrh.w	lr, [r4]
9001b076:	d104      	bne.n	9001b082 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x192>
9001b078:	f8a0 e000 	strh.w	lr, [r0]
9001b07c:	3002      	adds	r0, #2
9001b07e:	3402      	adds	r4, #2
9001b080:	e7f1      	b.n	9001b066 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x176>
9001b082:	8802      	ldrh	r2, [r0, #0]
9001b084:	b29f      	uxth	r7, r3
9001b086:	43db      	mvns	r3, r3
9001b088:	ea4f 2c2e 	mov.w	ip, lr, asr #8
9001b08c:	1216      	asrs	r6, r2, #8
9001b08e:	b2db      	uxtb	r3, r3
9001b090:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
9001b094:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
9001b098:	ea4f 0ae2 	mov.w	sl, r2, asr #3
9001b09c:	00d2      	lsls	r2, r2, #3
9001b09e:	fb16 f603 	smulbb	r6, r6, r3
9001b0a2:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
9001b0a6:	b2d2      	uxtb	r2, r2
9001b0a8:	fb0c 6c07 	mla	ip, ip, r7, r6
9001b0ac:	ea4f 06ee 	mov.w	r6, lr, asr #3
9001b0b0:	fb1a fa03 	smulbb	sl, sl, r3
9001b0b4:	ea4f 0ece 	mov.w	lr, lr, lsl #3
9001b0b8:	fa1f fc8c 	uxth.w	ip, ip
9001b0bc:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
9001b0c0:	fb12 f303 	smulbb	r3, r2, r3
9001b0c4:	fa5f fe8e 	uxtb.w	lr, lr
9001b0c8:	fb06 a607 	mla	r6, r6, r7, sl
9001b0cc:	f10c 0201 	add.w	r2, ip, #1
9001b0d0:	fb0e 3307 	mla	r3, lr, r7, r3
9001b0d4:	b2b6      	uxth	r6, r6
9001b0d6:	b29b      	uxth	r3, r3
9001b0d8:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
9001b0dc:	f106 0a01 	add.w	sl, r6, #1
9001b0e0:	f40c 4278 	and.w	r2, ip, #63488	; 0xf800
9001b0e4:	f103 0c01 	add.w	ip, r3, #1
9001b0e8:	eb0a 2616 	add.w	r6, sl, r6, lsr #8
9001b0ec:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
9001b0f0:	0976      	lsrs	r6, r6, #5
9001b0f2:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
9001b0f6:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
9001b0fa:	ea4c 0c02 	orr.w	ip, ip, r2
9001b0fe:	ea4c 0c06 	orr.w	ip, ip, r6
9001b102:	f8a0 c000 	strh.w	ip, [r0]
9001b106:	e7b9      	b.n	9001b07c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x18c>
9001b108:	f8b9 3000 	ldrh.w	r3, [r9]
9001b10c:	f9bd 600c 	ldrsh.w	r6, [sp, #12]
9001b110:	eba3 0308 	sub.w	r3, r3, r8
9001b114:	eba6 0608 	sub.w	r6, r6, r8
9001b118:	eb00 0043 	add.w	r0, r0, r3, lsl #1
9001b11c:	eb04 0446 	add.w	r4, r4, r6, lsl #1
9001b120:	440e      	add	r6, r1
9001b122:	e79a      	b.n	9001b05a <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x16a>
9001b124:	4b03      	ldr	r3, [pc, #12]	; (9001b134 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x244>)
9001b126:	6818      	ldr	r0, [r3, #0]
9001b128:	6803      	ldr	r3, [r0, #0]
9001b12a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9001b12c:	4798      	blx	r3
9001b12e:	b007      	add	sp, #28
9001b130:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9001b134:	24026264 	.word	0x24026264
9001b138:	2402625e 	.word	0x2402625e

9001b13c <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb>:
9001b13c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001b140:	b089      	sub	sp, #36	; 0x24
9001b142:	4682      	mov	sl, r0
9001b144:	460f      	mov	r7, r1
9001b146:	4691      	mov	r9, r2
9001b148:	f89d 604c 	ldrb.w	r6, [sp, #76]	; 0x4c
9001b14c:	4698      	mov	r8, r3
9001b14e:	9c12      	ldr	r4, [sp, #72]	; 0x48
9001b150:	2e00      	cmp	r6, #0
9001b152:	d036      	beq.n	9001b1c2 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
9001b154:	4608      	mov	r0, r1
9001b156:	f7fc f863 	bl	90017220 <_ZNK8touchgfx6Bitmap8getWidthEv>
9001b15a:	4605      	mov	r5, r0
9001b15c:	4638      	mov	r0, r7
9001b15e:	f7fc f893 	bl	90017288 <_ZNK8touchgfx6Bitmap9getHeightEv>
9001b162:	f8ad 000e 	strh.w	r0, [sp, #14]
9001b166:	4638      	mov	r0, r7
9001b168:	f8ad 9008 	strh.w	r9, [sp, #8]
9001b16c:	f8ad 500c 	strh.w	r5, [sp, #12]
9001b170:	f8ad 800a 	strh.w	r8, [sp, #10]
9001b174:	f7fc f940 	bl	900173f8 <_ZNK8touchgfx6Bitmap7getDataEv>
9001b178:	4605      	mov	r5, r0
9001b17a:	4638      	mov	r0, r7
9001b17c:	f7fc f96c 	bl	90017458 <_ZNK8touchgfx6Bitmap12getExtraDataEv>
9001b180:	4681      	mov	r9, r0
9001b182:	4638      	mov	r0, r7
9001b184:	f7fc f9bc 	bl	90017500 <_ZNK8touchgfx6Bitmap9getFormatEv>
9001b188:	280b      	cmp	r0, #11
9001b18a:	d81a      	bhi.n	9001b1c2 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
9001b18c:	e8df f000 	tbb	[pc, r0]
9001b190:	1906aebd 	.word	0x1906aebd
9001b194:	19191919 	.word	0x19191919
9001b198:	b5191919 	.word	0xb5191919
9001b19c:	4bb0      	ldr	r3, [pc, #704]	; (9001b460 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x324>)
9001b19e:	6818      	ldr	r0, [r3, #0]
9001b1a0:	6803      	ldr	r3, [r0, #0]
9001b1a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
9001b1a4:	4798      	blx	r3
9001b1a6:	2eff      	cmp	r6, #255	; 0xff
9001b1a8:	d121      	bne.n	9001b1ee <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xb2>
9001b1aa:	0683      	lsls	r3, r0, #26
9001b1ac:	d41f      	bmi.n	9001b1ee <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xb2>
9001b1ae:	4638      	mov	r0, r7
9001b1b0:	f7fc f8ea 	bl	90017388 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
9001b1b4:	b940      	cbnz	r0, 9001b1c8 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x8c>
9001b1b6:	4623      	mov	r3, r4
9001b1b8:	aa02      	add	r2, sp, #8
9001b1ba:	4629      	mov	r1, r5
9001b1bc:	4650      	mov	r0, sl
9001b1be:	f7ff fa2f 	bl	9001a620 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>
9001b1c2:	b009      	add	sp, #36	; 0x24
9001b1c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9001b1c8:	f10d 0818 	add.w	r8, sp, #24
9001b1cc:	4639      	mov	r1, r7
9001b1ce:	af04      	add	r7, sp, #16
9001b1d0:	4640      	mov	r0, r8
9001b1d2:	f7fc f88d 	bl	900172f0 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
9001b1d6:	e898 0003 	ldmia.w	r8, {r0, r1}
9001b1da:	e887 0003 	stmia.w	r7, {r0, r1}
9001b1de:	4638      	mov	r0, r7
9001b1e0:	4621      	mov	r1, r4
9001b1e2:	f7f6 f8f7 	bl	900113d4 <_ZN8touchgfx4RectaNERKS0_>
9001b1e6:	4638      	mov	r0, r7
9001b1e8:	f7f6 f937 	bl	9001145a <_ZNK8touchgfx4Rect7isEmptyEv>
9001b1ec:	b130      	cbz	r0, 9001b1fc <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc0>
9001b1ee:	4633      	mov	r3, r6
9001b1f0:	4622      	mov	r2, r4
9001b1f2:	a902      	add	r1, sp, #8
9001b1f4:	4628      	mov	r0, r5
9001b1f6:	f7ff f92d 	bl	9001a454 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
9001b1fa:	e7e2      	b.n	9001b1c2 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
9001b1fc:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
9001b200:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
9001b204:	4293      	cmp	r3, r2
9001b206:	dd12      	ble.n	9001b22e <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xf2>
9001b208:	1a9b      	subs	r3, r3, r2
9001b20a:	f9b4 0000 	ldrsh.w	r0, [r4]
9001b20e:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
9001b212:	f8ad 0018 	strh.w	r0, [sp, #24]
9001b216:	4628      	mov	r0, r5
9001b218:	f8ad 201a 	strh.w	r2, [sp, #26]
9001b21c:	4642      	mov	r2, r8
9001b21e:	f8ad 101c 	strh.w	r1, [sp, #28]
9001b222:	a902      	add	r1, sp, #8
9001b224:	f8ad 301e 	strh.w	r3, [sp, #30]
9001b228:	4633      	mov	r3, r6
9001b22a:	f7ff f913 	bl	9001a454 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
9001b22e:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
9001b232:	f9b4 2000 	ldrsh.w	r2, [r4]
9001b236:	4293      	cmp	r3, r2
9001b238:	dd12      	ble.n	9001b260 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x124>
9001b23a:	1a9b      	subs	r3, r3, r2
9001b23c:	f9bd 0012 	ldrsh.w	r0, [sp, #18]
9001b240:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
9001b244:	f8ad 2018 	strh.w	r2, [sp, #24]
9001b248:	4642      	mov	r2, r8
9001b24a:	f8ad 001a 	strh.w	r0, [sp, #26]
9001b24e:	4628      	mov	r0, r5
9001b250:	f8ad 301c 	strh.w	r3, [sp, #28]
9001b254:	23ff      	movs	r3, #255	; 0xff
9001b256:	f8ad 101e 	strh.w	r1, [sp, #30]
9001b25a:	a902      	add	r1, sp, #8
9001b25c:	f7ff f8fa 	bl	9001a454 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
9001b260:	463b      	mov	r3, r7
9001b262:	aa02      	add	r2, sp, #8
9001b264:	4629      	mov	r1, r5
9001b266:	4650      	mov	r0, sl
9001b268:	f7ff f9da 	bl	9001a620 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>
9001b26c:	88a2      	ldrh	r2, [r4, #4]
9001b26e:	8823      	ldrh	r3, [r4, #0]
9001b270:	f8bd 1014 	ldrh.w	r1, [sp, #20]
9001b274:	4413      	add	r3, r2
9001b276:	f8bd 2010 	ldrh.w	r2, [sp, #16]
9001b27a:	440a      	add	r2, r1
9001b27c:	b29b      	uxth	r3, r3
9001b27e:	b292      	uxth	r2, r2
9001b280:	b218      	sxth	r0, r3
9001b282:	b211      	sxth	r1, r2
9001b284:	4288      	cmp	r0, r1
9001b286:	dd12      	ble.n	9001b2ae <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x172>
9001b288:	1a9b      	subs	r3, r3, r2
9001b28a:	f9bd 0016 	ldrsh.w	r0, [sp, #22]
9001b28e:	f9bd 6012 	ldrsh.w	r6, [sp, #18]
9001b292:	4642      	mov	r2, r8
9001b294:	f8ad 1018 	strh.w	r1, [sp, #24]
9001b298:	a902      	add	r1, sp, #8
9001b29a:	f8ad 301c 	strh.w	r3, [sp, #28]
9001b29e:	23ff      	movs	r3, #255	; 0xff
9001b2a0:	f8ad 001e 	strh.w	r0, [sp, #30]
9001b2a4:	4628      	mov	r0, r5
9001b2a6:	f8ad 601a 	strh.w	r6, [sp, #26]
9001b2aa:	f7ff f8d3 	bl	9001a454 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
9001b2ae:	88e2      	ldrh	r2, [r4, #6]
9001b2b0:	8863      	ldrh	r3, [r4, #2]
9001b2b2:	f8bd 1016 	ldrh.w	r1, [sp, #22]
9001b2b6:	4413      	add	r3, r2
9001b2b8:	f8bd 2012 	ldrh.w	r2, [sp, #18]
9001b2bc:	440a      	add	r2, r1
9001b2be:	b29b      	uxth	r3, r3
9001b2c0:	b292      	uxth	r2, r2
9001b2c2:	b218      	sxth	r0, r3
9001b2c4:	b211      	sxth	r1, r2
9001b2c6:	4288      	cmp	r0, r1
9001b2c8:	f77f af7b 	ble.w	9001b1c2 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
9001b2cc:	1a9b      	subs	r3, r3, r2
9001b2ce:	f9b4 6000 	ldrsh.w	r6, [r4]
9001b2d2:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
9001b2d6:	4642      	mov	r2, r8
9001b2d8:	f8ad 301e 	strh.w	r3, [sp, #30]
9001b2dc:	23ff      	movs	r3, #255	; 0xff
9001b2de:	f8ad 6018 	strh.w	r6, [sp, #24]
9001b2e2:	f8ad 101a 	strh.w	r1, [sp, #26]
9001b2e6:	f8ad 001c 	strh.w	r0, [sp, #28]
9001b2ea:	e782      	b.n	9001b1f2 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xb6>
9001b2ec:	4633      	mov	r3, r6
9001b2ee:	4622      	mov	r2, r4
9001b2f0:	a902      	add	r1, sp, #8
9001b2f2:	4628      	mov	r0, r5
9001b2f4:	f7ff fa04 	bl	9001a700 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>
9001b2f8:	e763      	b.n	9001b1c2 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
9001b2fa:	9600      	str	r6, [sp, #0]
9001b2fc:	4623      	mov	r3, r4
9001b2fe:	aa02      	add	r2, sp, #8
9001b300:	4649      	mov	r1, r9
9001b302:	4628      	mov	r0, r5
9001b304:	f7ff fddc 	bl	9001aec0 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>
9001b308:	e75b      	b.n	9001b1c2 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
9001b30a:	4638      	mov	r0, r7
9001b30c:	f7fc f83c 	bl	90017388 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
9001b310:	b950      	cbnz	r0, 9001b328 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x1ec>
9001b312:	f8da 3000 	ldr.w	r3, [sl]
9001b316:	aa02      	add	r2, sp, #8
9001b318:	4629      	mov	r1, r5
9001b31a:	e9cd 6000 	strd	r6, r0, [sp]
9001b31e:	4650      	mov	r0, sl
9001b320:	68de      	ldr	r6, [r3, #12]
9001b322:	4623      	mov	r3, r4
9001b324:	47b0      	blx	r6
9001b326:	e74c      	b.n	9001b1c2 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
9001b328:	f10d 0818 	add.w	r8, sp, #24
9001b32c:	4639      	mov	r1, r7
9001b32e:	af04      	add	r7, sp, #16
9001b330:	4640      	mov	r0, r8
9001b332:	f7fb ffdd 	bl	900172f0 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
9001b336:	e898 0003 	ldmia.w	r8, {r0, r1}
9001b33a:	e887 0003 	stmia.w	r7, {r0, r1}
9001b33e:	4638      	mov	r0, r7
9001b340:	4621      	mov	r1, r4
9001b342:	f7f6 f847 	bl	900113d4 <_ZN8touchgfx4RectaNERKS0_>
9001b346:	4638      	mov	r0, r7
9001b348:	f7f6 f887 	bl	9001145a <_ZNK8touchgfx4Rect7isEmptyEv>
9001b34c:	b138      	cbz	r0, 9001b35e <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x222>
9001b34e:	4623      	mov	r3, r4
9001b350:	9600      	str	r6, [sp, #0]
9001b352:	aa02      	add	r2, sp, #8
9001b354:	4649      	mov	r1, r9
9001b356:	4628      	mov	r0, r5
9001b358:	f7ff fdca 	bl	9001aef0 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
9001b35c:	e731      	b.n	9001b1c2 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
9001b35e:	f8da 3000 	ldr.w	r3, [sl]
9001b362:	aa02      	add	r2, sp, #8
9001b364:	4629      	mov	r1, r5
9001b366:	e9cd 6000 	strd	r6, r0, [sp]
9001b36a:	4650      	mov	r0, sl
9001b36c:	f8d3 b00c 	ldr.w	fp, [r3, #12]
9001b370:	463b      	mov	r3, r7
9001b372:	47d8      	blx	fp
9001b374:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
9001b378:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
9001b37c:	4293      	cmp	r3, r2
9001b37e:	dd13      	ble.n	9001b3a8 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x26c>
9001b380:	f9b4 0000 	ldrsh.w	r0, [r4]
9001b384:	1a9b      	subs	r3, r3, r2
9001b386:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
9001b38a:	f8ad 0018 	strh.w	r0, [sp, #24]
9001b38e:	4628      	mov	r0, r5
9001b390:	f8ad 201a 	strh.w	r2, [sp, #26]
9001b394:	aa02      	add	r2, sp, #8
9001b396:	f8ad 101c 	strh.w	r1, [sp, #28]
9001b39a:	4649      	mov	r1, r9
9001b39c:	f8ad 301e 	strh.w	r3, [sp, #30]
9001b3a0:	4643      	mov	r3, r8
9001b3a2:	9600      	str	r6, [sp, #0]
9001b3a4:	f7ff fda4 	bl	9001aef0 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
9001b3a8:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
9001b3ac:	f9b4 2000 	ldrsh.w	r2, [r4]
9001b3b0:	4293      	cmp	r3, r2
9001b3b2:	dd13      	ble.n	9001b3dc <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x2a0>
9001b3b4:	1a9b      	subs	r3, r3, r2
9001b3b6:	f9bd 0012 	ldrsh.w	r0, [sp, #18]
9001b3ba:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
9001b3be:	f8ad 2018 	strh.w	r2, [sp, #24]
9001b3c2:	aa02      	add	r2, sp, #8
9001b3c4:	f8ad 001a 	strh.w	r0, [sp, #26]
9001b3c8:	4628      	mov	r0, r5
9001b3ca:	f8ad 301c 	strh.w	r3, [sp, #28]
9001b3ce:	4643      	mov	r3, r8
9001b3d0:	f8ad 101e 	strh.w	r1, [sp, #30]
9001b3d4:	4649      	mov	r1, r9
9001b3d6:	9600      	str	r6, [sp, #0]
9001b3d8:	f7ff fd8a 	bl	9001aef0 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
9001b3dc:	88a2      	ldrh	r2, [r4, #4]
9001b3de:	8823      	ldrh	r3, [r4, #0]
9001b3e0:	f8bd 1014 	ldrh.w	r1, [sp, #20]
9001b3e4:	4413      	add	r3, r2
9001b3e6:	f8bd 2010 	ldrh.w	r2, [sp, #16]
9001b3ea:	440a      	add	r2, r1
9001b3ec:	b29b      	uxth	r3, r3
9001b3ee:	b292      	uxth	r2, r2
9001b3f0:	b218      	sxth	r0, r3
9001b3f2:	b211      	sxth	r1, r2
9001b3f4:	4288      	cmp	r0, r1
9001b3f6:	dd13      	ble.n	9001b420 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x2e4>
9001b3f8:	1a9b      	subs	r3, r3, r2
9001b3fa:	f9bd 0016 	ldrsh.w	r0, [sp, #22]
9001b3fe:	f9bd 7012 	ldrsh.w	r7, [sp, #18]
9001b402:	aa02      	add	r2, sp, #8
9001b404:	f8ad 1018 	strh.w	r1, [sp, #24]
9001b408:	4649      	mov	r1, r9
9001b40a:	f8ad 301c 	strh.w	r3, [sp, #28]
9001b40e:	4643      	mov	r3, r8
9001b410:	f8ad 001e 	strh.w	r0, [sp, #30]
9001b414:	4628      	mov	r0, r5
9001b416:	9600      	str	r6, [sp, #0]
9001b418:	f8ad 701a 	strh.w	r7, [sp, #26]
9001b41c:	f7ff fd68 	bl	9001aef0 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
9001b420:	88e2      	ldrh	r2, [r4, #6]
9001b422:	8863      	ldrh	r3, [r4, #2]
9001b424:	f8bd 1016 	ldrh.w	r1, [sp, #22]
9001b428:	4413      	add	r3, r2
9001b42a:	f8bd 2012 	ldrh.w	r2, [sp, #18]
9001b42e:	440a      	add	r2, r1
9001b430:	b29b      	uxth	r3, r3
9001b432:	b292      	uxth	r2, r2
9001b434:	b218      	sxth	r0, r3
9001b436:	b211      	sxth	r1, r2
9001b438:	4288      	cmp	r0, r1
9001b43a:	f77f aec2 	ble.w	9001b1c2 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
9001b43e:	f9b4 7000 	ldrsh.w	r7, [r4]
9001b442:	1a9b      	subs	r3, r3, r2
9001b444:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
9001b448:	f8ad 301e 	strh.w	r3, [sp, #30]
9001b44c:	4643      	mov	r3, r8
9001b44e:	f8ad 7018 	strh.w	r7, [sp, #24]
9001b452:	f8ad 101a 	strh.w	r1, [sp, #26]
9001b456:	f8ad 001c 	strh.w	r0, [sp, #28]
9001b45a:	9600      	str	r6, [sp, #0]
9001b45c:	e779      	b.n	9001b352 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x216>
9001b45e:	bf00      	nop
9001b460:	24026264 	.word	0x24026264

9001b464 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE>:
9001b464:	b180      	cbz	r0, 9001b488 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x24>
9001b466:	2903      	cmp	r1, #3
9001b468:	d81c      	bhi.n	9001b4a4 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x40>
9001b46a:	e8df f001 	tbb	[pc, r1]
9001b46e:	1d02      	.short	0x1d02
9001b470:	1f08      	.short	0x1f08
9001b472:	4b10      	ldr	r3, [pc, #64]	; (9001b4b4 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x50>)
9001b474:	8818      	ldrh	r0, [r3, #0]
9001b476:	f3c0 000e 	ubfx	r0, r0, #0, #15
9001b47a:	4240      	negs	r0, r0
9001b47c:	4770      	bx	lr
9001b47e:	4b0d      	ldr	r3, [pc, #52]	; (9001b4b4 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x50>)
9001b480:	8818      	ldrh	r0, [r3, #0]
9001b482:	f3c0 000e 	ubfx	r0, r0, #0, #15
9001b486:	4770      	bx	lr
9001b488:	2903      	cmp	r1, #3
9001b48a:	d80b      	bhi.n	9001b4a4 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x40>
9001b48c:	a301      	add	r3, pc, #4	; (adr r3, 9001b494 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x30>)
9001b48e:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
9001b492:	bf00      	nop
9001b494:	9001b4a9 	.word	0x9001b4a9
9001b498:	9001b47f 	.word	0x9001b47f
9001b49c:	9001b4ad 	.word	0x9001b4ad
9001b4a0:	9001b473 	.word	0x9001b473
9001b4a4:	2000      	movs	r0, #0
9001b4a6:	4770      	bx	lr
9001b4a8:	2001      	movs	r0, #1
9001b4aa:	4770      	bx	lr
9001b4ac:	f04f 30ff 	mov.w	r0, #4294967295
9001b4b0:	4770      	bx	lr
9001b4b2:	bf00      	nop
9001b4b4:	2402625e 	.word	0x2402625e

9001b4b8 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE>:
9001b4b8:	b180      	cbz	r0, 9001b4dc <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x24>
9001b4ba:	2903      	cmp	r1, #3
9001b4bc:	d81c      	bhi.n	9001b4f8 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x40>
9001b4be:	e8df f001 	tbb	[pc, r1]
9001b4c2:	021d      	.short	0x021d
9001b4c4:	071f      	.short	0x071f
9001b4c6:	4b10      	ldr	r3, [pc, #64]	; (9001b508 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x50>)
9001b4c8:	8818      	ldrh	r0, [r3, #0]
9001b4ca:	f3c0 000e 	ubfx	r0, r0, #0, #15
9001b4ce:	4770      	bx	lr
9001b4d0:	4b0d      	ldr	r3, [pc, #52]	; (9001b508 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x50>)
9001b4d2:	8818      	ldrh	r0, [r3, #0]
9001b4d4:	f3c0 000e 	ubfx	r0, r0, #0, #15
9001b4d8:	4240      	negs	r0, r0
9001b4da:	4770      	bx	lr
9001b4dc:	2903      	cmp	r1, #3
9001b4de:	d80b      	bhi.n	9001b4f8 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x40>
9001b4e0:	a301      	add	r3, pc, #4	; (adr r3, 9001b4e8 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x30>)
9001b4e2:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
9001b4e6:	bf00      	nop
9001b4e8:	9001b4c7 	.word	0x9001b4c7
9001b4ec:	9001b501 	.word	0x9001b501
9001b4f0:	9001b4d1 	.word	0x9001b4d1
9001b4f4:	9001b4fd 	.word	0x9001b4fd
9001b4f8:	2000      	movs	r0, #0
9001b4fa:	4770      	bx	lr
9001b4fc:	2001      	movs	r0, #1
9001b4fe:	4770      	bx	lr
9001b500:	f04f 30ff 	mov.w	r0, #4294967295
9001b504:	4770      	bx	lr
9001b506:	bf00      	nop
9001b508:	2402625e 	.word	0x2402625e

9001b50c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE>:
9001b50c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001b510:	b099      	sub	sp, #100	; 0x64
9001b512:	910b      	str	r1, [sp, #44]	; 0x2c
9001b514:	a914      	add	r1, sp, #80	; 0x50
9001b516:	f9bd 4088 	ldrsh.w	r4, [sp, #136]	; 0x88
9001b51a:	f8bd 5090 	ldrh.w	r5, [sp, #144]	; 0x90
9001b51e:	f8bd 6094 	ldrh.w	r6, [sp, #148]	; 0x94
9001b522:	f89d 80ac 	ldrb.w	r8, [sp, #172]	; 0xac
9001b526:	f89d a0b4 	ldrb.w	sl, [sp, #180]	; 0xb4
9001b52a:	e881 000c 	stmia.w	r1, {r2, r3}
9001b52e:	f9bd 308c 	ldrsh.w	r3, [sp, #140]	; 0x8c
9001b532:	e9dd 2126 	ldrd	r2, r1, [sp, #152]	; 0x98
9001b536:	9309      	str	r3, [sp, #36]	; 0x24
9001b538:	f891 900d 	ldrb.w	r9, [r1, #13]
9001b53c:	f89d 30a4 	ldrb.w	r3, [sp, #164]	; 0xa4
9001b540:	ea4f 1749 	mov.w	r7, r9, lsl #5
9001b544:	9310      	str	r3, [sp, #64]	; 0x40
9001b546:	f89d 30b0 	ldrb.w	r3, [sp, #176]	; 0xb0
9001b54a:	930c      	str	r3, [sp, #48]	; 0x30
9001b54c:	f407 7380 	and.w	r3, r7, #256	; 0x100
9001b550:	798f      	ldrb	r7, [r1, #6]
9001b552:	431f      	orrs	r7, r3
9001b554:	f000 8195 	beq.w	9001b882 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
9001b558:	ea4f 1909 	mov.w	r9, r9, lsl #4
9001b55c:	f409 7380 	and.w	r3, r9, #256	; 0x100
9001b560:	f891 9007 	ldrb.w	r9, [r1, #7]
9001b564:	ea59 0903 	orrs.w	r9, r9, r3
9001b568:	f000 818b 	beq.w	9001b882 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
9001b56c:	f991 3009 	ldrsb.w	r3, [r1, #9]
9001b570:	b29b      	uxth	r3, r3
9001b572:	2d00      	cmp	r5, #0
9001b574:	f000 812e 	beq.w	9001b7d4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2c8>
9001b578:	1aed      	subs	r5, r5, r3
9001b57a:	b2ad      	uxth	r5, r5
9001b57c:	042b      	lsls	r3, r5, #16
9001b57e:	d502      	bpl.n	9001b586 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x7a>
9001b580:	1b64      	subs	r4, r4, r5
9001b582:	2500      	movs	r5, #0
9001b584:	b224      	sxth	r4, r4
9001b586:	f9b2 1000 	ldrsh.w	r1, [r2]
9001b58a:	a814      	add	r0, sp, #80	; 0x50
9001b58c:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
9001b590:	428c      	cmp	r4, r1
9001b592:	b28b      	uxth	r3, r1
9001b594:	bfbf      	itttt	lt
9001b596:	18ed      	addlt	r5, r5, r3
9001b598:	1b2c      	sublt	r4, r5, r4
9001b59a:	b2a5      	uxthlt	r5, r4
9001b59c:	460c      	movlt	r4, r1
9001b59e:	8891      	ldrh	r1, [r2, #4]
9001b5a0:	440b      	add	r3, r1
9001b5a2:	4621      	mov	r1, r4
9001b5a4:	b21b      	sxth	r3, r3
9001b5a6:	930f      	str	r3, [sp, #60]	; 0x3c
9001b5a8:	88d3      	ldrh	r3, [r2, #6]
9001b5aa:	8852      	ldrh	r2, [r2, #2]
9001b5ac:	4413      	add	r3, r2
9001b5ae:	9a09      	ldr	r2, [sp, #36]	; 0x24
9001b5b0:	b21b      	sxth	r3, r3
9001b5b2:	930d      	str	r3, [sp, #52]	; 0x34
9001b5b4:	4bbd      	ldr	r3, [pc, #756]	; (9001b8ac <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a0>)
9001b5b6:	f893 b000 	ldrb.w	fp, [r3]
9001b5ba:	f10b 3cff 	add.w	ip, fp, #4294967295
9001b5be:	f1dc 0300 	rsbs	r3, ip, #0
9001b5c2:	eb43 030c 	adc.w	r3, r3, ip
9001b5c6:	930e      	str	r3, [sp, #56]	; 0x38
9001b5c8:	4653      	mov	r3, sl
9001b5ca:	f7f8 fb07 	bl	90013bdc <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>
9001b5ce:	4621      	mov	r1, r4
9001b5d0:	f8ad 005c 	strh.w	r0, [sp, #92]	; 0x5c
9001b5d4:	4653      	mov	r3, sl
9001b5d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
9001b5d8:	a814      	add	r0, sp, #80	; 0x50
9001b5da:	f7f8 fb1c 	bl	90013c16 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>
9001b5de:	a918      	add	r1, sp, #96	; 0x60
9001b5e0:	f821 0d02 	strh.w	r0, [r1, #-2]!
9001b5e4:	a817      	add	r0, sp, #92	; 0x5c
9001b5e6:	f7f8 fc3d 	bl	90013e64 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>
9001b5ea:	f1ba 0f00 	cmp.w	sl, #0
9001b5ee:	f040 80f4 	bne.w	9001b7da <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2ce>
9001b5f2:	f1bb 0f01 	cmp.w	fp, #1
9001b5f6:	f040 80f8 	bne.w	9001b7ea <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2de>
9001b5fa:	9b10      	ldr	r3, [sp, #64]	; 0x40
9001b5fc:	2b00      	cmp	r3, #0
9001b5fe:	f040 8145 	bne.w	9001b88c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x380>
9001b602:	b2ba      	uxth	r2, r7
9001b604:	b905      	cbnz	r5, 9001b608 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xfc>
9001b606:	b16e      	cbz	r6, 9001b624 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x118>
9001b608:	fb06 5302 	mla	r3, r6, r2, r5
9001b60c:	9828      	ldr	r0, [sp, #160]	; 0xa0
9001b60e:	4631      	mov	r1, r6
9001b610:	fb08 f303 	mul.w	r3, r8, r3
9001b614:	f003 0607 	and.w	r6, r3, #7
9001b618:	eb00 03d3 	add.w	r3, r0, r3, lsr #3
9001b61c:	9328      	str	r3, [sp, #160]	; 0xa0
9001b61e:	eba9 0301 	sub.w	r3, r9, r1
9001b622:	930a      	str	r3, [sp, #40]	; 0x28
9001b624:	4651      	mov	r1, sl
9001b626:	980e      	ldr	r0, [sp, #56]	; 0x38
9001b628:	f7ff ff1c 	bl	9001b464 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE>
9001b62c:	4681      	mov	r9, r0
9001b62e:	980e      	ldr	r0, [sp, #56]	; 0x38
9001b630:	f7ff ff42 	bl	9001b4b8 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE>
9001b634:	9b0d      	ldr	r3, [sp, #52]	; 0x34
9001b636:	9909      	ldr	r1, [sp, #36]	; 0x24
9001b638:	4683      	mov	fp, r0
9001b63a:	eba3 0a01 	sub.w	sl, r3, r1
9001b63e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
9001b640:	459a      	cmp	sl, r3
9001b642:	bfa8      	it	ge
9001b644:	469a      	movge	sl, r3
9001b646:	f1ba 0f00 	cmp.w	sl, #0
9001b64a:	f340 811a 	ble.w	9001b882 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
9001b64e:	1b64      	subs	r4, r4, r5
9001b650:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
9001b652:	1b1c      	subs	r4, r3, r4
9001b654:	42bc      	cmp	r4, r7
9001b656:	bfd4      	ite	le
9001b658:	ebc5 0504 	rsble	r5, r5, r4
9001b65c:	ebc5 0507 	rsbgt	r5, r5, r7
9001b660:	2d00      	cmp	r5, #0
9001b662:	f340 810e 	ble.w	9001b882 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
9001b666:	1b52      	subs	r2, r2, r5
9001b668:	fb08 f302 	mul.w	r3, r8, r2
9001b66c:	930f      	str	r3, [sp, #60]	; 0x3c
9001b66e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
9001b670:	2b00      	cmp	r3, #0
9001b672:	f040 8116 	bne.w	9001b8a2 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x396>
9001b676:	4b8e      	ldr	r3, [pc, #568]	; (9001b8b0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a4>)
9001b678:	6818      	ldr	r0, [r3, #0]
9001b67a:	6803      	ldr	r3, [r0, #0]
9001b67c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
9001b67e:	4798      	blx	r3
9001b680:	2301      	movs	r3, #1
9001b682:	4a8c      	ldr	r2, [pc, #560]	; (9001b8b4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a8>)
9001b684:	fa03 f308 	lsl.w	r3, r3, r8
9001b688:	8811      	ldrh	r1, [r2, #0]
9001b68a:	f9bd 205c 	ldrsh.w	r2, [sp, #92]	; 0x5c
9001b68e:	3b01      	subs	r3, #1
9001b690:	b2db      	uxtb	r3, r3
9001b692:	930e      	str	r3, [sp, #56]	; 0x38
9001b694:	f9bd 305e 	ldrsh.w	r3, [sp, #94]	; 0x5e
9001b698:	fb01 2303 	mla	r3, r1, r3, r2
9001b69c:	eb00 0343 	add.w	r3, r0, r3, lsl #1
9001b6a0:	930a      	str	r3, [sp, #40]	; 0x28
9001b6a2:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
9001b6a4:	f3c3 4307 	ubfx	r3, r3, #16, #8
9001b6a8:	9313      	str	r3, [sp, #76]	; 0x4c
9001b6aa:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
9001b6ac:	0a19      	lsrs	r1, r3, #8
9001b6ae:	b2cb      	uxtb	r3, r1
9001b6b0:	9312      	str	r3, [sp, #72]	; 0x48
9001b6b2:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
9001b6b4:	b2db      	uxtb	r3, r3
9001b6b6:	9311      	str	r3, [sp, #68]	; 0x44
9001b6b8:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
9001b6ba:	095a      	lsrs	r2, r3, #5
9001b6bc:	4b7e      	ldr	r3, [pc, #504]	; (9001b8b8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ac>)
9001b6be:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
9001b6c2:	400b      	ands	r3, r1
9001b6c4:	4313      	orrs	r3, r2
9001b6c6:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
9001b6c8:	f3c2 02c4 	ubfx	r2, r2, #3, #5
9001b6cc:	4313      	orrs	r3, r2
9001b6ce:	b29b      	uxth	r3, r3
9001b6d0:	9310      	str	r3, [sp, #64]	; 0x40
9001b6d2:	9b28      	ldr	r3, [sp, #160]	; 0xa0
9001b6d4:	781a      	ldrb	r2, [r3, #0]
9001b6d6:	ea4f 0349 	mov.w	r3, r9, lsl #1
9001b6da:	fb05 b919 	mls	r9, r5, r9, fp
9001b6de:	4132      	asrs	r2, r6
9001b6e0:	fb03 fb05 	mul.w	fp, r3, r5
9001b6e4:	930d      	str	r3, [sp, #52]	; 0x34
9001b6e6:	b2d2      	uxtb	r2, r2
9001b6e8:	eb0b 0b49 	add.w	fp, fp, r9, lsl #1
9001b6ec:	f11a 3aff 	adds.w	sl, sl, #4294967295
9001b6f0:	f0c0 80f5 	bcc.w	9001b8de <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3d2>
9001b6f4:	46ae      	mov	lr, r5
9001b6f6:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
9001b6fa:	f11e 3eff 	adds.w	lr, lr, #4294967295
9001b6fe:	f0c0 80dd 	bcc.w	9001b8bc <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3b0>
9001b702:	9b0e      	ldr	r3, [sp, #56]	; 0x38
9001b704:	4013      	ands	r3, r2
9001b706:	d055      	beq.n	9001b7b4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2a8>
9001b708:	20ff      	movs	r0, #255	; 0xff
9001b70a:	990e      	ldr	r1, [sp, #56]	; 0x38
9001b70c:	fb90 f1f1 	sdiv	r1, r0, r1
9001b710:	434b      	muls	r3, r1
9001b712:	2bfe      	cmp	r3, #254	; 0xfe
9001b714:	dd03      	ble.n	9001b71e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x212>
9001b716:	990c      	ldr	r1, [sp, #48]	; 0x30
9001b718:	4281      	cmp	r1, r0
9001b71a:	f000 80c4 	beq.w	9001b8a6 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39a>
9001b71e:	990c      	ldr	r1, [sp, #48]	; 0x30
9001b720:	f8bc 4000 	ldrh.w	r4, [ip]
9001b724:	fb11 f303 	smulbb	r3, r1, r3
9001b728:	1220      	asrs	r0, r4, #8
9001b72a:	b29b      	uxth	r3, r3
9001b72c:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
9001b730:	1c59      	adds	r1, r3, #1
9001b732:	ea40 1050 	orr.w	r0, r0, r0, lsr #5
9001b736:	eb01 2313 	add.w	r3, r1, r3, lsr #8
9001b73a:	10e1      	asrs	r1, r4, #3
9001b73c:	f3c3 2307 	ubfx	r3, r3, #8, #8
9001b740:	00e4      	lsls	r4, r4, #3
9001b742:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
9001b746:	b29f      	uxth	r7, r3
9001b748:	43db      	mvns	r3, r3
9001b74a:	ea41 1191 	orr.w	r1, r1, r1, lsr #6
9001b74e:	b2db      	uxtb	r3, r3
9001b750:	b2e4      	uxtb	r4, r4
9001b752:	9309      	str	r3, [sp, #36]	; 0x24
9001b754:	9b13      	ldr	r3, [sp, #76]	; 0x4c
9001b756:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
9001b75a:	fb13 f907 	smulbb	r9, r3, r7
9001b75e:	9b09      	ldr	r3, [sp, #36]	; 0x24
9001b760:	fb00 9003 	mla	r0, r0, r3, r9
9001b764:	9b12      	ldr	r3, [sp, #72]	; 0x48
9001b766:	fb13 f907 	smulbb	r9, r3, r7
9001b76a:	9b09      	ldr	r3, [sp, #36]	; 0x24
9001b76c:	b280      	uxth	r0, r0
9001b76e:	fb01 9103 	mla	r1, r1, r3, r9
9001b772:	9b11      	ldr	r3, [sp, #68]	; 0x44
9001b774:	fb13 f707 	smulbb	r7, r3, r7
9001b778:	9b09      	ldr	r3, [sp, #36]	; 0x24
9001b77a:	b289      	uxth	r1, r1
9001b77c:	fb04 7403 	mla	r4, r4, r3, r7
9001b780:	1c43      	adds	r3, r0, #1
9001b782:	b2a4      	uxth	r4, r4
9001b784:	eb03 2010 	add.w	r0, r3, r0, lsr #8
9001b788:	f104 0901 	add.w	r9, r4, #1
9001b78c:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
9001b790:	eb09 2914 	add.w	r9, r9, r4, lsr #8
9001b794:	f3c9 29c4 	ubfx	r9, r9, #11, #5
9001b798:	ea49 0000 	orr.w	r0, r9, r0
9001b79c:	f101 0901 	add.w	r9, r1, #1
9001b7a0:	eb09 2911 	add.w	r9, r9, r1, lsr #8
9001b7a4:	ea4f 1959 	mov.w	r9, r9, lsr #5
9001b7a8:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
9001b7ac:	ea40 0009 	orr.w	r0, r0, r9
9001b7b0:	f8ac 0000 	strh.w	r0, [ip]
9001b7b4:	4446      	add	r6, r8
9001b7b6:	b2b6      	uxth	r6, r6
9001b7b8:	2e07      	cmp	r6, #7
9001b7ba:	bf89      	itett	hi
9001b7bc:	9b28      	ldrhi	r3, [sp, #160]	; 0xa0
9001b7be:	fa42 f208 	asrls.w	r2, r2, r8
9001b7c2:	2600      	movhi	r6, #0
9001b7c4:	785a      	ldrbhi	r2, [r3, #1]
9001b7c6:	bf8a      	itet	hi
9001b7c8:	3301      	addhi	r3, #1
9001b7ca:	b2d2      	uxtbls	r2, r2
9001b7cc:	9328      	strhi	r3, [sp, #160]	; 0xa0
9001b7ce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
9001b7d0:	449c      	add	ip, r3
9001b7d2:	e792      	b.n	9001b6fa <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1ee>
9001b7d4:	441c      	add	r4, r3
9001b7d6:	b224      	sxth	r4, r4
9001b7d8:	e6d5      	b.n	9001b586 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x7a>
9001b7da:	f1ba 0f01 	cmp.w	sl, #1
9001b7de:	f47f af0c 	bne.w	9001b5fa <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
9001b7e2:	f1bb 0f01 	cmp.w	fp, #1
9001b7e6:	f47f af08 	bne.w	9001b5fa <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
9001b7ea:	f8df b0c4 	ldr.w	fp, [pc, #196]	; 9001b8b0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a4>
9001b7ee:	f8db 0000 	ldr.w	r0, [fp]
9001b7f2:	6803      	ldr	r3, [r0, #0]
9001b7f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
9001b7f6:	4798      	blx	r3
9001b7f8:	f410 7380 	ands.w	r3, r0, #256	; 0x100
9001b7fc:	465a      	mov	r2, fp
9001b7fe:	d006      	beq.n	9001b80e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x302>
9001b800:	f1b8 0f04 	cmp.w	r8, #4
9001b804:	d140      	bne.n	9001b888 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x37c>
9001b806:	9b10      	ldr	r3, [sp, #64]	; 0x40
9001b808:	3300      	adds	r3, #0
9001b80a:	bf18      	it	ne
9001b80c:	2301      	movne	r3, #1
9001b80e:	0580      	lsls	r0, r0, #22
9001b810:	d56e      	bpl.n	9001b8f0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3e4>
9001b812:	f1b8 0f08 	cmp.w	r8, #8
9001b816:	d16b      	bne.n	9001b8f0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3e4>
9001b818:	2b00      	cmp	r3, #0
9001b81a:	bf0c      	ite	eq
9001b81c:	f44f 7100 	moveq.w	r1, #512	; 0x200
9001b820:	f44f 7180 	movne.w	r1, #256	; 0x100
9001b824:	2d00      	cmp	r5, #0
9001b826:	f47f aee8 	bne.w	9001b5fa <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
9001b82a:	2e00      	cmp	r6, #0
9001b82c:	f47f aee5 	bne.w	9001b5fa <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
9001b830:	19e3      	adds	r3, r4, r7
9001b832:	980f      	ldr	r0, [sp, #60]	; 0x3c
9001b834:	4283      	cmp	r3, r0
9001b836:	f73f aee0 	bgt.w	9001b5fa <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
9001b83a:	9b09      	ldr	r3, [sp, #36]	; 0x24
9001b83c:	980d      	ldr	r0, [sp, #52]	; 0x34
9001b83e:	444b      	add	r3, r9
9001b840:	4283      	cmp	r3, r0
9001b842:	f73f aeda 	bgt.w	9001b5fa <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
9001b846:	b2bf      	uxth	r7, r7
9001b848:	f1b8 0f08 	cmp.w	r8, #8
9001b84c:	6810      	ldr	r0, [r2, #0]
9001b84e:	f04f 0500 	mov.w	r5, #0
9001b852:	bf18      	it	ne
9001b854:	3701      	addne	r7, #1
9001b856:	f8bd 305e 	ldrh.w	r3, [sp, #94]	; 0x5e
9001b85a:	6804      	ldr	r4, [r0, #0]
9001b85c:	bf18      	it	ne
9001b85e:	f027 0701 	bicne.w	r7, r7, #1
9001b862:	f8bd 205c 	ldrh.w	r2, [sp, #92]	; 0x5c
9001b866:	e9cd 1505 	strd	r1, r5, [sp, #20]
9001b86a:	990c      	ldr	r1, [sp, #48]	; 0x30
9001b86c:	bf18      	it	ne
9001b86e:	b2bf      	uxthne	r7, r7
9001b870:	9104      	str	r1, [sp, #16]
9001b872:	992a      	ldr	r1, [sp, #168]	; 0xa8
9001b874:	e9cd 7900 	strd	r7, r9, [sp]
9001b878:	e9cd 7102 	strd	r7, r1, [sp, #8]
9001b87c:	9928      	ldr	r1, [sp, #160]	; 0xa0
9001b87e:	6d64      	ldr	r4, [r4, #84]	; 0x54
9001b880:	47a0      	blx	r4
9001b882:	b019      	add	sp, #100	; 0x64
9001b884:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9001b888:	2300      	movs	r3, #0
9001b88a:	e7c0      	b.n	9001b80e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x302>
9001b88c:	2208      	movs	r2, #8
9001b88e:	fb92 f3f8 	sdiv	r3, r2, r8
9001b892:	1e5a      	subs	r2, r3, #1
9001b894:	443a      	add	r2, r7
9001b896:	fb92 f2f3 	sdiv	r2, r2, r3
9001b89a:	fb12 f203 	smulbb	r2, r2, r3
9001b89e:	b292      	uxth	r2, r2
9001b8a0:	e6b0      	b.n	9001b604 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf8>
9001b8a2:	980b      	ldr	r0, [sp, #44]	; 0x2c
9001b8a4:	e6ec      	b.n	9001b680 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x174>
9001b8a6:	9810      	ldr	r0, [sp, #64]	; 0x40
9001b8a8:	e782      	b.n	9001b7b0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2a4>
9001b8aa:	bf00      	nop
9001b8ac:	2402625c 	.word	0x2402625c
9001b8b0:	24026264 	.word	0x24026264
9001b8b4:	2402625e 	.word	0x2402625e
9001b8b8:	00fff800 	.word	0x00fff800
9001b8bc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
9001b8be:	b153      	cbz	r3, 9001b8d6 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ca>
9001b8c0:	441e      	add	r6, r3
9001b8c2:	9b28      	ldr	r3, [sp, #160]	; 0xa0
9001b8c4:	b2b6      	uxth	r6, r6
9001b8c6:	eb03 03d6 	add.w	r3, r3, r6, lsr #3
9001b8ca:	f006 0607 	and.w	r6, r6, #7
9001b8ce:	781a      	ldrb	r2, [r3, #0]
9001b8d0:	9328      	str	r3, [sp, #160]	; 0xa0
9001b8d2:	4132      	asrs	r2, r6
9001b8d4:	b2d2      	uxtb	r2, r2
9001b8d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
9001b8d8:	445b      	add	r3, fp
9001b8da:	930a      	str	r3, [sp, #40]	; 0x28
9001b8dc:	e706      	b.n	9001b6ec <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1e0>
9001b8de:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
9001b8e0:	2b00      	cmp	r3, #0
9001b8e2:	d1ce      	bne.n	9001b882 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
9001b8e4:	4b05      	ldr	r3, [pc, #20]	; (9001b8fc <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3f0>)
9001b8e6:	6818      	ldr	r0, [r3, #0]
9001b8e8:	6803      	ldr	r3, [r0, #0]
9001b8ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9001b8ec:	4798      	blx	r3
9001b8ee:	e7c8      	b.n	9001b882 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
9001b8f0:	2b00      	cmp	r3, #0
9001b8f2:	f43f ae82 	beq.w	9001b5fa <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
9001b8f6:	f44f 7180 	mov.w	r1, #256	; 0x100
9001b8fa:	e793      	b.n	9001b824 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x318>
9001b8fc:	24026264 	.word	0x24026264

9001b900 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv>:
9001b900:	b538      	push	{r3, r4, r5, lr}
9001b902:	4c15      	ldr	r4, [pc, #84]	; (9001b958 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x58>)
9001b904:	4605      	mov	r5, r0
9001b906:	7823      	ldrb	r3, [r4, #0]
9001b908:	f3bf 8f5b 	dmb	ish
9001b90c:	07da      	lsls	r2, r3, #31
9001b90e:	d40b      	bmi.n	9001b928 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x28>
9001b910:	4620      	mov	r0, r4
9001b912:	f007 fa68 	bl	90022de6 <__cxa_guard_acquire>
9001b916:	b138      	cbz	r0, 9001b928 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x28>
9001b918:	4620      	mov	r0, r4
9001b91a:	f007 fa70 	bl	90022dfe <__cxa_guard_release>
9001b91e:	4a0f      	ldr	r2, [pc, #60]	; (9001b95c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x5c>)
9001b920:	490f      	ldr	r1, [pc, #60]	; (9001b960 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x60>)
9001b922:	4810      	ldr	r0, [pc, #64]	; (9001b964 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x64>)
9001b924:	f007 fa58 	bl	90022dd8 <__aeabi_atexit>
9001b928:	4c0f      	ldr	r4, [pc, #60]	; (9001b968 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x68>)
9001b92a:	7823      	ldrb	r3, [r4, #0]
9001b92c:	f3bf 8f5b 	dmb	ish
9001b930:	07db      	lsls	r3, r3, #31
9001b932:	d40b      	bmi.n	9001b94c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x4c>
9001b934:	4620      	mov	r0, r4
9001b936:	f007 fa56 	bl	90022de6 <__cxa_guard_acquire>
9001b93a:	b138      	cbz	r0, 9001b94c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x4c>
9001b93c:	4620      	mov	r0, r4
9001b93e:	f007 fa5e 	bl	90022dfe <__cxa_guard_release>
9001b942:	4a06      	ldr	r2, [pc, #24]	; (9001b95c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x5c>)
9001b944:	4909      	ldr	r1, [pc, #36]	; (9001b96c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x6c>)
9001b946:	480a      	ldr	r0, [pc, #40]	; (9001b970 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x70>)
9001b948:	f007 fa46 	bl	90022dd8 <__aeabi_atexit>
9001b94c:	4b05      	ldr	r3, [pc, #20]	; (9001b964 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x64>)
9001b94e:	612b      	str	r3, [r5, #16]
9001b950:	4b07      	ldr	r3, [pc, #28]	; (9001b970 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x70>)
9001b952:	616b      	str	r3, [r5, #20]
9001b954:	bd38      	pop	{r3, r4, r5, pc}
9001b956:	bf00      	nop
9001b958:	24026330 	.word	0x24026330
9001b95c:	24000000 	.word	0x24000000
9001b960:	90019b0d 	.word	0x90019b0d
9001b964:	240000ac 	.word	0x240000ac
9001b968:	24026334 	.word	0x24026334
9001b96c:	90019b0b 	.word	0x90019b0b
9001b970:	240000b0 	.word	0x240000b0

9001b974 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv>:
9001b974:	b538      	push	{r3, r4, r5, lr}
9001b976:	4c15      	ldr	r4, [pc, #84]	; (9001b9cc <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x58>)
9001b978:	4605      	mov	r5, r0
9001b97a:	7823      	ldrb	r3, [r4, #0]
9001b97c:	f3bf 8f5b 	dmb	ish
9001b980:	07da      	lsls	r2, r3, #31
9001b982:	d40b      	bmi.n	9001b99c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x28>
9001b984:	4620      	mov	r0, r4
9001b986:	f007 fa2e 	bl	90022de6 <__cxa_guard_acquire>
9001b98a:	b138      	cbz	r0, 9001b99c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x28>
9001b98c:	4620      	mov	r0, r4
9001b98e:	f007 fa36 	bl	90022dfe <__cxa_guard_release>
9001b992:	4a0f      	ldr	r2, [pc, #60]	; (9001b9d0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x5c>)
9001b994:	490f      	ldr	r1, [pc, #60]	; (9001b9d4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x60>)
9001b996:	4810      	ldr	r0, [pc, #64]	; (9001b9d8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x64>)
9001b998:	f007 fa1e 	bl	90022dd8 <__aeabi_atexit>
9001b99c:	4c0f      	ldr	r4, [pc, #60]	; (9001b9dc <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x68>)
9001b99e:	7823      	ldrb	r3, [r4, #0]
9001b9a0:	f3bf 8f5b 	dmb	ish
9001b9a4:	07db      	lsls	r3, r3, #31
9001b9a6:	d40b      	bmi.n	9001b9c0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x4c>
9001b9a8:	4620      	mov	r0, r4
9001b9aa:	f007 fa1c 	bl	90022de6 <__cxa_guard_acquire>
9001b9ae:	b138      	cbz	r0, 9001b9c0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x4c>
9001b9b0:	4620      	mov	r0, r4
9001b9b2:	f007 fa24 	bl	90022dfe <__cxa_guard_release>
9001b9b6:	4a06      	ldr	r2, [pc, #24]	; (9001b9d0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x5c>)
9001b9b8:	4909      	ldr	r1, [pc, #36]	; (9001b9e0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x6c>)
9001b9ba:	480a      	ldr	r0, [pc, #40]	; (9001b9e4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x70>)
9001b9bc:	f007 fa0c 	bl	90022dd8 <__aeabi_atexit>
9001b9c0:	4b05      	ldr	r3, [pc, #20]	; (9001b9d8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x64>)
9001b9c2:	60ab      	str	r3, [r5, #8]
9001b9c4:	4b07      	ldr	r3, [pc, #28]	; (9001b9e4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x70>)
9001b9c6:	60eb      	str	r3, [r5, #12]
9001b9c8:	bd38      	pop	{r3, r4, r5, pc}
9001b9ca:	bf00      	nop
9001b9cc:	24026308 	.word	0x24026308
9001b9d0:	24000000 	.word	0x24000000
9001b9d4:	90019b11 	.word	0x90019b11
9001b9d8:	24000084 	.word	0x24000084
9001b9dc:	2402630c 	.word	0x2402630c
9001b9e0:	90019b0f 	.word	0x90019b0f
9001b9e4:	24000088 	.word	0x24000088

9001b9e8 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB565Ev>:
9001b9e8:	b510      	push	{r4, lr}
9001b9ea:	4604      	mov	r4, r0
9001b9ec:	f7ff ff88 	bl	9001b900 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv>
9001b9f0:	4620      	mov	r0, r4
9001b9f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
9001b9f6:	f7ff bfbd 	b.w	9001b974 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv>
	...

9001b9fc <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>:
9001b9fc:	b538      	push	{r3, r4, r5, lr}
9001b9fe:	4c15      	ldr	r4, [pc, #84]	; (9001ba54 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x58>)
9001ba00:	4605      	mov	r5, r0
9001ba02:	7823      	ldrb	r3, [r4, #0]
9001ba04:	f3bf 8f5b 	dmb	ish
9001ba08:	07da      	lsls	r2, r3, #31
9001ba0a:	d40b      	bmi.n	9001ba24 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
9001ba0c:	4620      	mov	r0, r4
9001ba0e:	f007 f9ea 	bl	90022de6 <__cxa_guard_acquire>
9001ba12:	b138      	cbz	r0, 9001ba24 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
9001ba14:	4620      	mov	r0, r4
9001ba16:	f007 f9f2 	bl	90022dfe <__cxa_guard_release>
9001ba1a:	4a0f      	ldr	r2, [pc, #60]	; (9001ba58 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
9001ba1c:	490f      	ldr	r1, [pc, #60]	; (9001ba5c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x60>)
9001ba1e:	4810      	ldr	r0, [pc, #64]	; (9001ba60 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
9001ba20:	f007 f9da 	bl	90022dd8 <__aeabi_atexit>
9001ba24:	4c0f      	ldr	r4, [pc, #60]	; (9001ba64 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x68>)
9001ba26:	7823      	ldrb	r3, [r4, #0]
9001ba28:	f3bf 8f5b 	dmb	ish
9001ba2c:	07db      	lsls	r3, r3, #31
9001ba2e:	d40b      	bmi.n	9001ba48 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
9001ba30:	4620      	mov	r0, r4
9001ba32:	f007 f9d8 	bl	90022de6 <__cxa_guard_acquire>
9001ba36:	b138      	cbz	r0, 9001ba48 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
9001ba38:	4620      	mov	r0, r4
9001ba3a:	f007 f9e0 	bl	90022dfe <__cxa_guard_release>
9001ba3e:	4a06      	ldr	r2, [pc, #24]	; (9001ba58 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
9001ba40:	4909      	ldr	r1, [pc, #36]	; (9001ba68 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x6c>)
9001ba42:	480a      	ldr	r0, [pc, #40]	; (9001ba6c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
9001ba44:	f007 f9c8 	bl	90022dd8 <__aeabi_atexit>
9001ba48:	4b05      	ldr	r3, [pc, #20]	; (9001ba60 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
9001ba4a:	622b      	str	r3, [r5, #32]
9001ba4c:	4b07      	ldr	r3, [pc, #28]	; (9001ba6c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
9001ba4e:	626b      	str	r3, [r5, #36]	; 0x24
9001ba50:	bd38      	pop	{r3, r4, r5, pc}
9001ba52:	bf00      	nop
9001ba54:	24026338 	.word	0x24026338
9001ba58:	24000000 	.word	0x24000000
9001ba5c:	90019b05 	.word	0x90019b05
9001ba60:	240000b4 	.word	0x240000b4
9001ba64:	2402633c 	.word	0x2402633c
9001ba68:	90019b03 	.word	0x90019b03
9001ba6c:	240000b8 	.word	0x240000b8

9001ba70 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>:
9001ba70:	b538      	push	{r3, r4, r5, lr}
9001ba72:	4c15      	ldr	r4, [pc, #84]	; (9001bac8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x58>)
9001ba74:	4605      	mov	r5, r0
9001ba76:	7823      	ldrb	r3, [r4, #0]
9001ba78:	f3bf 8f5b 	dmb	ish
9001ba7c:	07da      	lsls	r2, r3, #31
9001ba7e:	d40b      	bmi.n	9001ba98 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
9001ba80:	4620      	mov	r0, r4
9001ba82:	f007 f9b0 	bl	90022de6 <__cxa_guard_acquire>
9001ba86:	b138      	cbz	r0, 9001ba98 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
9001ba88:	4620      	mov	r0, r4
9001ba8a:	f007 f9b8 	bl	90022dfe <__cxa_guard_release>
9001ba8e:	4a0f      	ldr	r2, [pc, #60]	; (9001bacc <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
9001ba90:	490f      	ldr	r1, [pc, #60]	; (9001bad0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x60>)
9001ba92:	4810      	ldr	r0, [pc, #64]	; (9001bad4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
9001ba94:	f007 f9a0 	bl	90022dd8 <__aeabi_atexit>
9001ba98:	4c0f      	ldr	r4, [pc, #60]	; (9001bad8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x68>)
9001ba9a:	7823      	ldrb	r3, [r4, #0]
9001ba9c:	f3bf 8f5b 	dmb	ish
9001baa0:	07db      	lsls	r3, r3, #31
9001baa2:	d40b      	bmi.n	9001babc <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
9001baa4:	4620      	mov	r0, r4
9001baa6:	f007 f99e 	bl	90022de6 <__cxa_guard_acquire>
9001baaa:	b138      	cbz	r0, 9001babc <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
9001baac:	4620      	mov	r0, r4
9001baae:	f007 f9a6 	bl	90022dfe <__cxa_guard_release>
9001bab2:	4a06      	ldr	r2, [pc, #24]	; (9001bacc <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
9001bab4:	4909      	ldr	r1, [pc, #36]	; (9001badc <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x6c>)
9001bab6:	480a      	ldr	r0, [pc, #40]	; (9001bae0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
9001bab8:	f007 f98e 	bl	90022dd8 <__aeabi_atexit>
9001babc:	4b05      	ldr	r3, [pc, #20]	; (9001bad4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
9001babe:	61ab      	str	r3, [r5, #24]
9001bac0:	4b07      	ldr	r3, [pc, #28]	; (9001bae0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
9001bac2:	61eb      	str	r3, [r5, #28]
9001bac4:	bd38      	pop	{r3, r4, r5, pc}
9001bac6:	bf00      	nop
9001bac8:	24026310 	.word	0x24026310
9001bacc:	24000000 	.word	0x24000000
9001bad0:	90019b09 	.word	0x90019b09
9001bad4:	2400008c 	.word	0x2400008c
9001bad8:	24026314 	.word	0x24026314
9001badc:	90019b07 	.word	0x90019b07
9001bae0:	24000090 	.word	0x24000090

9001bae4 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB888Ev>:
9001bae4:	b510      	push	{r4, lr}
9001bae6:	4604      	mov	r4, r0
9001bae8:	f7ff ff88 	bl	9001b9fc <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>
9001baec:	4620      	mov	r0, r4
9001baee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
9001baf2:	f7ff bfbd 	b.w	9001ba70 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>
	...

9001baf8 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>:
9001baf8:	b538      	push	{r3, r4, r5, lr}
9001bafa:	4c15      	ldr	r4, [pc, #84]	; (9001bb50 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x58>)
9001bafc:	4605      	mov	r5, r0
9001bafe:	7823      	ldrb	r3, [r4, #0]
9001bb00:	f3bf 8f5b 	dmb	ish
9001bb04:	07da      	lsls	r2, r3, #31
9001bb06:	d40b      	bmi.n	9001bb20 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
9001bb08:	4620      	mov	r0, r4
9001bb0a:	f007 f96c 	bl	90022de6 <__cxa_guard_acquire>
9001bb0e:	b138      	cbz	r0, 9001bb20 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
9001bb10:	4620      	mov	r0, r4
9001bb12:	f007 f974 	bl	90022dfe <__cxa_guard_release>
9001bb16:	4a0f      	ldr	r2, [pc, #60]	; (9001bb54 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
9001bb18:	490f      	ldr	r1, [pc, #60]	; (9001bb58 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x60>)
9001bb1a:	4810      	ldr	r0, [pc, #64]	; (9001bb5c <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
9001bb1c:	f007 f95c 	bl	90022dd8 <__aeabi_atexit>
9001bb20:	4c0f      	ldr	r4, [pc, #60]	; (9001bb60 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x68>)
9001bb22:	7823      	ldrb	r3, [r4, #0]
9001bb24:	f3bf 8f5b 	dmb	ish
9001bb28:	07db      	lsls	r3, r3, #31
9001bb2a:	d40b      	bmi.n	9001bb44 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
9001bb2c:	4620      	mov	r0, r4
9001bb2e:	f007 f95a 	bl	90022de6 <__cxa_guard_acquire>
9001bb32:	b138      	cbz	r0, 9001bb44 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
9001bb34:	4620      	mov	r0, r4
9001bb36:	f007 f962 	bl	90022dfe <__cxa_guard_release>
9001bb3a:	4a06      	ldr	r2, [pc, #24]	; (9001bb54 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
9001bb3c:	4909      	ldr	r1, [pc, #36]	; (9001bb64 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x6c>)
9001bb3e:	480a      	ldr	r0, [pc, #40]	; (9001bb68 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
9001bb40:	f007 f94a 	bl	90022dd8 <__aeabi_atexit>
9001bb44:	4b05      	ldr	r3, [pc, #20]	; (9001bb5c <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
9001bb46:	632b      	str	r3, [r5, #48]	; 0x30
9001bb48:	4b07      	ldr	r3, [pc, #28]	; (9001bb68 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
9001bb4a:	636b      	str	r3, [r5, #52]	; 0x34
9001bb4c:	bd38      	pop	{r3, r4, r5, pc}
9001bb4e:	bf00      	nop
9001bb50:	24026348 	.word	0x24026348
9001bb54:	24000000 	.word	0x24000000
9001bb58:	90019afd 	.word	0x90019afd
9001bb5c:	240000c4 	.word	0x240000c4
9001bb60:	2402634c 	.word	0x2402634c
9001bb64:	90019afb 	.word	0x90019afb
9001bb68:	240000c8 	.word	0x240000c8

9001bb6c <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>:
9001bb6c:	b538      	push	{r3, r4, r5, lr}
9001bb6e:	4c15      	ldr	r4, [pc, #84]	; (9001bbc4 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x58>)
9001bb70:	4605      	mov	r5, r0
9001bb72:	7823      	ldrb	r3, [r4, #0]
9001bb74:	f3bf 8f5b 	dmb	ish
9001bb78:	07da      	lsls	r2, r3, #31
9001bb7a:	d40b      	bmi.n	9001bb94 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
9001bb7c:	4620      	mov	r0, r4
9001bb7e:	f007 f932 	bl	90022de6 <__cxa_guard_acquire>
9001bb82:	b138      	cbz	r0, 9001bb94 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
9001bb84:	4620      	mov	r0, r4
9001bb86:	f007 f93a 	bl	90022dfe <__cxa_guard_release>
9001bb8a:	4a0f      	ldr	r2, [pc, #60]	; (9001bbc8 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
9001bb8c:	490f      	ldr	r1, [pc, #60]	; (9001bbcc <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x60>)
9001bb8e:	4810      	ldr	r0, [pc, #64]	; (9001bbd0 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
9001bb90:	f007 f922 	bl	90022dd8 <__aeabi_atexit>
9001bb94:	4c0f      	ldr	r4, [pc, #60]	; (9001bbd4 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x68>)
9001bb96:	7823      	ldrb	r3, [r4, #0]
9001bb98:	f3bf 8f5b 	dmb	ish
9001bb9c:	07db      	lsls	r3, r3, #31
9001bb9e:	d40b      	bmi.n	9001bbb8 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
9001bba0:	4620      	mov	r0, r4
9001bba2:	f007 f920 	bl	90022de6 <__cxa_guard_acquire>
9001bba6:	b138      	cbz	r0, 9001bbb8 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
9001bba8:	4620      	mov	r0, r4
9001bbaa:	f007 f928 	bl	90022dfe <__cxa_guard_release>
9001bbae:	4a06      	ldr	r2, [pc, #24]	; (9001bbc8 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
9001bbb0:	4909      	ldr	r1, [pc, #36]	; (9001bbd8 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x6c>)
9001bbb2:	480a      	ldr	r0, [pc, #40]	; (9001bbdc <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
9001bbb4:	f007 f910 	bl	90022dd8 <__aeabi_atexit>
9001bbb8:	4b05      	ldr	r3, [pc, #20]	; (9001bbd0 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
9001bbba:	62ab      	str	r3, [r5, #40]	; 0x28
9001bbbc:	4b07      	ldr	r3, [pc, #28]	; (9001bbdc <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
9001bbbe:	62eb      	str	r3, [r5, #44]	; 0x2c
9001bbc0:	bd38      	pop	{r3, r4, r5, pc}
9001bbc2:	bf00      	nop
9001bbc4:	24026318 	.word	0x24026318
9001bbc8:	24000000 	.word	0x24000000
9001bbcc:	90019b01 	.word	0x90019b01
9001bbd0:	24000094 	.word	0x24000094
9001bbd4:	2402631c 	.word	0x2402631c
9001bbd8:	90019aff 	.word	0x90019aff
9001bbdc:	24000098 	.word	0x24000098

9001bbe0 <_ZN8touchgfx8LCD16bpp30enableTextureMapperL8_ARGB8888Ev>:
9001bbe0:	b510      	push	{r4, lr}
9001bbe2:	4604      	mov	r4, r0
9001bbe4:	f7ff ff88 	bl	9001baf8 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>
9001bbe8:	4620      	mov	r0, r4
9001bbea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
9001bbee:	f7ff bfbd 	b.w	9001bb6c <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>
	...

9001bbf4 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv>:
9001bbf4:	b538      	push	{r3, r4, r5, lr}
9001bbf6:	4c15      	ldr	r4, [pc, #84]	; (9001bc4c <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x58>)
9001bbf8:	4605      	mov	r5, r0
9001bbfa:	7823      	ldrb	r3, [r4, #0]
9001bbfc:	f3bf 8f5b 	dmb	ish
9001bc00:	07da      	lsls	r2, r3, #31
9001bc02:	d40b      	bmi.n	9001bc1c <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x28>
9001bc04:	4620      	mov	r0, r4
9001bc06:	f007 f8ee 	bl	90022de6 <__cxa_guard_acquire>
9001bc0a:	b138      	cbz	r0, 9001bc1c <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x28>
9001bc0c:	4620      	mov	r0, r4
9001bc0e:	f007 f8f6 	bl	90022dfe <__cxa_guard_release>
9001bc12:	4a0f      	ldr	r2, [pc, #60]	; (9001bc50 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x5c>)
9001bc14:	490f      	ldr	r1, [pc, #60]	; (9001bc54 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x60>)
9001bc16:	4810      	ldr	r0, [pc, #64]	; (9001bc58 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x64>)
9001bc18:	f007 f8de 	bl	90022dd8 <__aeabi_atexit>
9001bc1c:	4c0f      	ldr	r4, [pc, #60]	; (9001bc5c <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x68>)
9001bc1e:	7823      	ldrb	r3, [r4, #0]
9001bc20:	f3bf 8f5b 	dmb	ish
9001bc24:	07db      	lsls	r3, r3, #31
9001bc26:	d40b      	bmi.n	9001bc40 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x4c>
9001bc28:	4620      	mov	r0, r4
9001bc2a:	f007 f8dc 	bl	90022de6 <__cxa_guard_acquire>
9001bc2e:	b138      	cbz	r0, 9001bc40 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x4c>
9001bc30:	4620      	mov	r0, r4
9001bc32:	f007 f8e4 	bl	90022dfe <__cxa_guard_release>
9001bc36:	4a06      	ldr	r2, [pc, #24]	; (9001bc50 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x5c>)
9001bc38:	4909      	ldr	r1, [pc, #36]	; (9001bc60 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x6c>)
9001bc3a:	480a      	ldr	r0, [pc, #40]	; (9001bc64 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x70>)
9001bc3c:	f007 f8cc 	bl	90022dd8 <__aeabi_atexit>
9001bc40:	4b05      	ldr	r3, [pc, #20]	; (9001bc58 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x64>)
9001bc42:	652b      	str	r3, [r5, #80]	; 0x50
9001bc44:	4b07      	ldr	r3, [pc, #28]	; (9001bc64 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x70>)
9001bc46:	656b      	str	r3, [r5, #84]	; 0x54
9001bc48:	bd38      	pop	{r3, r4, r5, pc}
9001bc4a:	bf00      	nop
9001bc4c:	24026350 	.word	0x24026350
9001bc50:	24000000 	.word	0x24000000
9001bc54:	90019aed 	.word	0x90019aed
9001bc58:	240000cc 	.word	0x240000cc
9001bc5c:	24026354 	.word	0x24026354
9001bc60:	90019aeb 	.word	0x90019aeb
9001bc64:	240000d0 	.word	0x240000d0

9001bc68 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv>:
9001bc68:	b538      	push	{r3, r4, r5, lr}
9001bc6a:	4c15      	ldr	r4, [pc, #84]	; (9001bcc0 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x58>)
9001bc6c:	4605      	mov	r5, r0
9001bc6e:	7823      	ldrb	r3, [r4, #0]
9001bc70:	f3bf 8f5b 	dmb	ish
9001bc74:	07da      	lsls	r2, r3, #31
9001bc76:	d40b      	bmi.n	9001bc90 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x28>
9001bc78:	4620      	mov	r0, r4
9001bc7a:	f007 f8b4 	bl	90022de6 <__cxa_guard_acquire>
9001bc7e:	b138      	cbz	r0, 9001bc90 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x28>
9001bc80:	4620      	mov	r0, r4
9001bc82:	f007 f8bc 	bl	90022dfe <__cxa_guard_release>
9001bc86:	4a0f      	ldr	r2, [pc, #60]	; (9001bcc4 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x5c>)
9001bc88:	490f      	ldr	r1, [pc, #60]	; (9001bcc8 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x60>)
9001bc8a:	4810      	ldr	r0, [pc, #64]	; (9001bccc <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x64>)
9001bc8c:	f007 f8a4 	bl	90022dd8 <__aeabi_atexit>
9001bc90:	4c0f      	ldr	r4, [pc, #60]	; (9001bcd0 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x68>)
9001bc92:	7823      	ldrb	r3, [r4, #0]
9001bc94:	f3bf 8f5b 	dmb	ish
9001bc98:	07db      	lsls	r3, r3, #31
9001bc9a:	d40b      	bmi.n	9001bcb4 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x4c>
9001bc9c:	4620      	mov	r0, r4
9001bc9e:	f007 f8a2 	bl	90022de6 <__cxa_guard_acquire>
9001bca2:	b138      	cbz	r0, 9001bcb4 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x4c>
9001bca4:	4620      	mov	r0, r4
9001bca6:	f007 f8aa 	bl	90022dfe <__cxa_guard_release>
9001bcaa:	4a06      	ldr	r2, [pc, #24]	; (9001bcc4 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x5c>)
9001bcac:	4909      	ldr	r1, [pc, #36]	; (9001bcd4 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x6c>)
9001bcae:	480a      	ldr	r0, [pc, #40]	; (9001bcd8 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x70>)
9001bcb0:	f007 f892 	bl	90022dd8 <__aeabi_atexit>
9001bcb4:	4b05      	ldr	r3, [pc, #20]	; (9001bccc <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x64>)
9001bcb6:	64ab      	str	r3, [r5, #72]	; 0x48
9001bcb8:	4b07      	ldr	r3, [pc, #28]	; (9001bcd8 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x70>)
9001bcba:	64eb      	str	r3, [r5, #76]	; 0x4c
9001bcbc:	bd38      	pop	{r3, r4, r5, pc}
9001bcbe:	bf00      	nop
9001bcc0:	24026358 	.word	0x24026358
9001bcc4:	24000000 	.word	0x24000000
9001bcc8:	90019af1 	.word	0x90019af1
9001bccc:	240000d4 	.word	0x240000d4
9001bcd0:	2402635c 	.word	0x2402635c
9001bcd4:	90019aef 	.word	0x90019aef
9001bcd8:	240000d8 	.word	0x240000d8

9001bcdc <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv>:
9001bcdc:	b538      	push	{r3, r4, r5, lr}
9001bcde:	4c15      	ldr	r4, [pc, #84]	; (9001bd34 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x58>)
9001bce0:	4605      	mov	r5, r0
9001bce2:	7823      	ldrb	r3, [r4, #0]
9001bce4:	f3bf 8f5b 	dmb	ish
9001bce8:	07da      	lsls	r2, r3, #31
9001bcea:	d40b      	bmi.n	9001bd04 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x28>
9001bcec:	4620      	mov	r0, r4
9001bcee:	f007 f87a 	bl	90022de6 <__cxa_guard_acquire>
9001bcf2:	b138      	cbz	r0, 9001bd04 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x28>
9001bcf4:	4620      	mov	r0, r4
9001bcf6:	f007 f882 	bl	90022dfe <__cxa_guard_release>
9001bcfa:	4a0f      	ldr	r2, [pc, #60]	; (9001bd38 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x5c>)
9001bcfc:	490f      	ldr	r1, [pc, #60]	; (9001bd3c <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x60>)
9001bcfe:	4810      	ldr	r0, [pc, #64]	; (9001bd40 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x64>)
9001bd00:	f007 f86a 	bl	90022dd8 <__aeabi_atexit>
9001bd04:	4c0f      	ldr	r4, [pc, #60]	; (9001bd44 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x68>)
9001bd06:	7823      	ldrb	r3, [r4, #0]
9001bd08:	f3bf 8f5b 	dmb	ish
9001bd0c:	07db      	lsls	r3, r3, #31
9001bd0e:	d40b      	bmi.n	9001bd28 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x4c>
9001bd10:	4620      	mov	r0, r4
9001bd12:	f007 f868 	bl	90022de6 <__cxa_guard_acquire>
9001bd16:	b138      	cbz	r0, 9001bd28 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x4c>
9001bd18:	4620      	mov	r0, r4
9001bd1a:	f007 f870 	bl	90022dfe <__cxa_guard_release>
9001bd1e:	4a06      	ldr	r2, [pc, #24]	; (9001bd38 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x5c>)
9001bd20:	4909      	ldr	r1, [pc, #36]	; (9001bd48 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x6c>)
9001bd22:	480a      	ldr	r0, [pc, #40]	; (9001bd4c <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x70>)
9001bd24:	f007 f858 	bl	90022dd8 <__aeabi_atexit>
9001bd28:	4b05      	ldr	r3, [pc, #20]	; (9001bd40 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x64>)
9001bd2a:	642b      	str	r3, [r5, #64]	; 0x40
9001bd2c:	4b07      	ldr	r3, [pc, #28]	; (9001bd4c <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x70>)
9001bd2e:	646b      	str	r3, [r5, #68]	; 0x44
9001bd30:	bd38      	pop	{r3, r4, r5, pc}
9001bd32:	bf00      	nop
9001bd34:	24026320 	.word	0x24026320
9001bd38:	24000000 	.word	0x24000000
9001bd3c:	90019af5 	.word	0x90019af5
9001bd40:	2400009c 	.word	0x2400009c
9001bd44:	24026324 	.word	0x24026324
9001bd48:	90019af3 	.word	0x90019af3
9001bd4c:	240000a0 	.word	0x240000a0

9001bd50 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv>:
9001bd50:	b538      	push	{r3, r4, r5, lr}
9001bd52:	4c15      	ldr	r4, [pc, #84]	; (9001bda8 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x58>)
9001bd54:	4605      	mov	r5, r0
9001bd56:	7823      	ldrb	r3, [r4, #0]
9001bd58:	f3bf 8f5b 	dmb	ish
9001bd5c:	07da      	lsls	r2, r3, #31
9001bd5e:	d40b      	bmi.n	9001bd78 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x28>
9001bd60:	4620      	mov	r0, r4
9001bd62:	f007 f840 	bl	90022de6 <__cxa_guard_acquire>
9001bd66:	b138      	cbz	r0, 9001bd78 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x28>
9001bd68:	4620      	mov	r0, r4
9001bd6a:	f007 f848 	bl	90022dfe <__cxa_guard_release>
9001bd6e:	4a0f      	ldr	r2, [pc, #60]	; (9001bdac <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x5c>)
9001bd70:	490f      	ldr	r1, [pc, #60]	; (9001bdb0 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x60>)
9001bd72:	4810      	ldr	r0, [pc, #64]	; (9001bdb4 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x64>)
9001bd74:	f007 f830 	bl	90022dd8 <__aeabi_atexit>
9001bd78:	4c0f      	ldr	r4, [pc, #60]	; (9001bdb8 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x68>)
9001bd7a:	7823      	ldrb	r3, [r4, #0]
9001bd7c:	f3bf 8f5b 	dmb	ish
9001bd80:	07db      	lsls	r3, r3, #31
9001bd82:	d40b      	bmi.n	9001bd9c <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x4c>
9001bd84:	4620      	mov	r0, r4
9001bd86:	f007 f82e 	bl	90022de6 <__cxa_guard_acquire>
9001bd8a:	b138      	cbz	r0, 9001bd9c <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x4c>
9001bd8c:	4620      	mov	r0, r4
9001bd8e:	f007 f836 	bl	90022dfe <__cxa_guard_release>
9001bd92:	4a06      	ldr	r2, [pc, #24]	; (9001bdac <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x5c>)
9001bd94:	4909      	ldr	r1, [pc, #36]	; (9001bdbc <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x6c>)
9001bd96:	480a      	ldr	r0, [pc, #40]	; (9001bdc0 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x70>)
9001bd98:	f007 f81e 	bl	90022dd8 <__aeabi_atexit>
9001bd9c:	4b05      	ldr	r3, [pc, #20]	; (9001bdb4 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x64>)
9001bd9e:	63ab      	str	r3, [r5, #56]	; 0x38
9001bda0:	4b07      	ldr	r3, [pc, #28]	; (9001bdc0 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x70>)
9001bda2:	63eb      	str	r3, [r5, #60]	; 0x3c
9001bda4:	bd38      	pop	{r3, r4, r5, pc}
9001bda6:	bf00      	nop
9001bda8:	24026340 	.word	0x24026340
9001bdac:	24000000 	.word	0x24000000
9001bdb0:	90019af9 	.word	0x90019af9
9001bdb4:	240000bc 	.word	0x240000bc
9001bdb8:	24026344 	.word	0x24026344
9001bdbc:	90019af7 	.word	0x90019af7
9001bdc0:	240000c0 	.word	0x240000c0

9001bdc4 <_ZN8touchgfx8LCD16bpp25enableTextureMapperRGB565Ev>:
9001bdc4:	b510      	push	{r4, lr}
9001bdc6:	4604      	mov	r4, r0
9001bdc8:	f7ff ff14 	bl	9001bbf4 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv>
9001bdcc:	4620      	mov	r0, r4
9001bdce:	f7ff ff85 	bl	9001bcdc <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv>
9001bdd2:	4620      	mov	r0, r4
9001bdd4:	f7ff ff48 	bl	9001bc68 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv>
9001bdd8:	4620      	mov	r0, r4
9001bdda:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
9001bdde:	f7ff bfb7 	b.w	9001bd50 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv>
	...

9001bde4 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>:
9001bde4:	b538      	push	{r3, r4, r5, lr}
9001bde6:	4c15      	ldr	r4, [pc, #84]	; (9001be3c <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x58>)
9001bde8:	4605      	mov	r5, r0
9001bdea:	7823      	ldrb	r3, [r4, #0]
9001bdec:	f3bf 8f5b 	dmb	ish
9001bdf0:	07da      	lsls	r2, r3, #31
9001bdf2:	d40b      	bmi.n	9001be0c <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
9001bdf4:	4620      	mov	r0, r4
9001bdf6:	f006 fff6 	bl	90022de6 <__cxa_guard_acquire>
9001bdfa:	b138      	cbz	r0, 9001be0c <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
9001bdfc:	4620      	mov	r0, r4
9001bdfe:	f006 fffe 	bl	90022dfe <__cxa_guard_release>
9001be02:	4a0f      	ldr	r2, [pc, #60]	; (9001be40 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
9001be04:	490f      	ldr	r1, [pc, #60]	; (9001be44 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x60>)
9001be06:	4810      	ldr	r0, [pc, #64]	; (9001be48 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
9001be08:	f006 ffe6 	bl	90022dd8 <__aeabi_atexit>
9001be0c:	4c0f      	ldr	r4, [pc, #60]	; (9001be4c <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x68>)
9001be0e:	7823      	ldrb	r3, [r4, #0]
9001be10:	f3bf 8f5b 	dmb	ish
9001be14:	07db      	lsls	r3, r3, #31
9001be16:	d40b      	bmi.n	9001be30 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
9001be18:	4620      	mov	r0, r4
9001be1a:	f006 ffe4 	bl	90022de6 <__cxa_guard_acquire>
9001be1e:	b138      	cbz	r0, 9001be30 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
9001be20:	4620      	mov	r0, r4
9001be22:	f006 ffec 	bl	90022dfe <__cxa_guard_release>
9001be26:	4a06      	ldr	r2, [pc, #24]	; (9001be40 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
9001be28:	4909      	ldr	r1, [pc, #36]	; (9001be50 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x6c>)
9001be2a:	480a      	ldr	r0, [pc, #40]	; (9001be54 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
9001be2c:	f006 ffd4 	bl	90022dd8 <__aeabi_atexit>
9001be30:	4b05      	ldr	r3, [pc, #20]	; (9001be48 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
9001be32:	662b      	str	r3, [r5, #96]	; 0x60
9001be34:	4b07      	ldr	r3, [pc, #28]	; (9001be54 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
9001be36:	666b      	str	r3, [r5, #100]	; 0x64
9001be38:	bd38      	pop	{r3, r4, r5, pc}
9001be3a:	bf00      	nop
9001be3c:	24026328 	.word	0x24026328
9001be40:	24000000 	.word	0x24000000
9001be44:	90019ae5 	.word	0x90019ae5
9001be48:	240000a4 	.word	0x240000a4
9001be4c:	2402632c 	.word	0x2402632c
9001be50:	90019ae3 	.word	0x90019ae3
9001be54:	240000a8 	.word	0x240000a8

9001be58 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv>:
9001be58:	b538      	push	{r3, r4, r5, lr}
9001be5a:	4c15      	ldr	r4, [pc, #84]	; (9001beb0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x58>)
9001be5c:	4605      	mov	r5, r0
9001be5e:	7823      	ldrb	r3, [r4, #0]
9001be60:	f3bf 8f5b 	dmb	ish
9001be64:	07da      	lsls	r2, r3, #31
9001be66:	d40b      	bmi.n	9001be80 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
9001be68:	4620      	mov	r0, r4
9001be6a:	f006 ffbc 	bl	90022de6 <__cxa_guard_acquire>
9001be6e:	b138      	cbz	r0, 9001be80 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
9001be70:	4620      	mov	r0, r4
9001be72:	f006 ffc4 	bl	90022dfe <__cxa_guard_release>
9001be76:	4a0f      	ldr	r2, [pc, #60]	; (9001beb4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
9001be78:	490f      	ldr	r1, [pc, #60]	; (9001beb8 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x60>)
9001be7a:	4810      	ldr	r0, [pc, #64]	; (9001bebc <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
9001be7c:	f006 ffac 	bl	90022dd8 <__aeabi_atexit>
9001be80:	4c0f      	ldr	r4, [pc, #60]	; (9001bec0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x68>)
9001be82:	7823      	ldrb	r3, [r4, #0]
9001be84:	f3bf 8f5b 	dmb	ish
9001be88:	07db      	lsls	r3, r3, #31
9001be8a:	d40b      	bmi.n	9001bea4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
9001be8c:	4620      	mov	r0, r4
9001be8e:	f006 ffaa 	bl	90022de6 <__cxa_guard_acquire>
9001be92:	b138      	cbz	r0, 9001bea4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
9001be94:	4620      	mov	r0, r4
9001be96:	f006 ffb2 	bl	90022dfe <__cxa_guard_release>
9001be9a:	4a06      	ldr	r2, [pc, #24]	; (9001beb4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
9001be9c:	4909      	ldr	r1, [pc, #36]	; (9001bec4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x6c>)
9001be9e:	480a      	ldr	r0, [pc, #40]	; (9001bec8 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
9001bea0:	f006 ff9a 	bl	90022dd8 <__aeabi_atexit>
9001bea4:	4b05      	ldr	r3, [pc, #20]	; (9001bebc <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
9001bea6:	65ab      	str	r3, [r5, #88]	; 0x58
9001bea8:	4b07      	ldr	r3, [pc, #28]	; (9001bec8 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
9001beaa:	65eb      	str	r3, [r5, #92]	; 0x5c
9001beac:	bd38      	pop	{r3, r4, r5, pc}
9001beae:	bf00      	nop
9001beb0:	24026300 	.word	0x24026300
9001beb4:	24000000 	.word	0x24000000
9001beb8:	90019ae9 	.word	0x90019ae9
9001bebc:	2400007c 	.word	0x2400007c
9001bec0:	24026304 	.word	0x24026304
9001bec4:	90019ae7 	.word	0x90019ae7
9001bec8:	24000080 	.word	0x24000080

9001becc <_ZN8touchgfx8LCD16bpp27enableTextureMapperARGB8888Ev>:
9001becc:	b510      	push	{r4, lr}
9001bece:	4604      	mov	r4, r0
9001bed0:	f7ff ff88 	bl	9001bde4 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>
9001bed4:	4620      	mov	r0, r4
9001bed6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
9001beda:	f7ff bfbd 	b.w	9001be58 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv>
	...

9001bee0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv>:
9001bee0:	b538      	push	{r3, r4, r5, lr}
9001bee2:	4c15      	ldr	r4, [pc, #84]	; (9001bf38 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x58>)
9001bee4:	4605      	mov	r5, r0
9001bee6:	7823      	ldrb	r3, [r4, #0]
9001bee8:	f3bf 8f5b 	dmb	ish
9001beec:	07da      	lsls	r2, r3, #31
9001beee:	d40b      	bmi.n	9001bf08 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
9001bef0:	4620      	mov	r0, r4
9001bef2:	f006 ff78 	bl	90022de6 <__cxa_guard_acquire>
9001bef6:	b138      	cbz	r0, 9001bf08 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
9001bef8:	4620      	mov	r0, r4
9001befa:	f006 ff80 	bl	90022dfe <__cxa_guard_release>
9001befe:	4a0f      	ldr	r2, [pc, #60]	; (9001bf3c <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
9001bf00:	490f      	ldr	r1, [pc, #60]	; (9001bf40 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x60>)
9001bf02:	4810      	ldr	r0, [pc, #64]	; (9001bf44 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
9001bf04:	f006 ff68 	bl	90022dd8 <__aeabi_atexit>
9001bf08:	4c0f      	ldr	r4, [pc, #60]	; (9001bf48 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x68>)
9001bf0a:	7823      	ldrb	r3, [r4, #0]
9001bf0c:	f3bf 8f5b 	dmb	ish
9001bf10:	07db      	lsls	r3, r3, #31
9001bf12:	d40b      	bmi.n	9001bf2c <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
9001bf14:	4620      	mov	r0, r4
9001bf16:	f006 ff66 	bl	90022de6 <__cxa_guard_acquire>
9001bf1a:	b138      	cbz	r0, 9001bf2c <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
9001bf1c:	4620      	mov	r0, r4
9001bf1e:	f006 ff6e 	bl	90022dfe <__cxa_guard_release>
9001bf22:	4a06      	ldr	r2, [pc, #24]	; (9001bf3c <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
9001bf24:	4909      	ldr	r1, [pc, #36]	; (9001bf4c <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x6c>)
9001bf26:	480a      	ldr	r0, [pc, #40]	; (9001bf50 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
9001bf28:	f006 ff56 	bl	90022dd8 <__aeabi_atexit>
9001bf2c:	4b05      	ldr	r3, [pc, #20]	; (9001bf44 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
9001bf2e:	672b      	str	r3, [r5, #112]	; 0x70
9001bf30:	4b07      	ldr	r3, [pc, #28]	; (9001bf50 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
9001bf32:	676b      	str	r3, [r5, #116]	; 0x74
9001bf34:	bd38      	pop	{r3, r4, r5, pc}
9001bf36:	bf00      	nop
9001bf38:	240262f8 	.word	0x240262f8
9001bf3c:	24000000 	.word	0x24000000
9001bf40:	90019add 	.word	0x90019add
9001bf44:	24000074 	.word	0x24000074
9001bf48:	240262fc 	.word	0x240262fc
9001bf4c:	90019adb 	.word	0x90019adb
9001bf50:	24000078 	.word	0x24000078

9001bf54 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv>:
9001bf54:	b538      	push	{r3, r4, r5, lr}
9001bf56:	4c15      	ldr	r4, [pc, #84]	; (9001bfac <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x58>)
9001bf58:	4605      	mov	r5, r0
9001bf5a:	7823      	ldrb	r3, [r4, #0]
9001bf5c:	f3bf 8f5b 	dmb	ish
9001bf60:	07da      	lsls	r2, r3, #31
9001bf62:	d40b      	bmi.n	9001bf7c <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
9001bf64:	4620      	mov	r0, r4
9001bf66:	f006 ff3e 	bl	90022de6 <__cxa_guard_acquire>
9001bf6a:	b138      	cbz	r0, 9001bf7c <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
9001bf6c:	4620      	mov	r0, r4
9001bf6e:	f006 ff46 	bl	90022dfe <__cxa_guard_release>
9001bf72:	4a0f      	ldr	r2, [pc, #60]	; (9001bfb0 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
9001bf74:	490f      	ldr	r1, [pc, #60]	; (9001bfb4 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x60>)
9001bf76:	4810      	ldr	r0, [pc, #64]	; (9001bfb8 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
9001bf78:	f006 ff2e 	bl	90022dd8 <__aeabi_atexit>
9001bf7c:	4c0f      	ldr	r4, [pc, #60]	; (9001bfbc <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x68>)
9001bf7e:	7823      	ldrb	r3, [r4, #0]
9001bf80:	f3bf 8f5b 	dmb	ish
9001bf84:	07db      	lsls	r3, r3, #31
9001bf86:	d40b      	bmi.n	9001bfa0 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
9001bf88:	4620      	mov	r0, r4
9001bf8a:	f006 ff2c 	bl	90022de6 <__cxa_guard_acquire>
9001bf8e:	b138      	cbz	r0, 9001bfa0 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
9001bf90:	4620      	mov	r0, r4
9001bf92:	f006 ff34 	bl	90022dfe <__cxa_guard_release>
9001bf96:	4a06      	ldr	r2, [pc, #24]	; (9001bfb0 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
9001bf98:	4909      	ldr	r1, [pc, #36]	; (9001bfc0 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x6c>)
9001bf9a:	480a      	ldr	r0, [pc, #40]	; (9001bfc4 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
9001bf9c:	f006 ff1c 	bl	90022dd8 <__aeabi_atexit>
9001bfa0:	4b05      	ldr	r3, [pc, #20]	; (9001bfb8 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
9001bfa2:	66ab      	str	r3, [r5, #104]	; 0x68
9001bfa4:	4b07      	ldr	r3, [pc, #28]	; (9001bfc4 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
9001bfa6:	66eb      	str	r3, [r5, #108]	; 0x6c
9001bfa8:	bd38      	pop	{r3, r4, r5, pc}
9001bfaa:	bf00      	nop
9001bfac:	240262f0 	.word	0x240262f0
9001bfb0:	24000000 	.word	0x24000000
9001bfb4:	90019ae1 	.word	0x90019ae1
9001bfb8:	2400006c 	.word	0x2400006c
9001bfbc:	240262f4 	.word	0x240262f4
9001bfc0:	90019adf 	.word	0x90019adf
9001bfc4:	24000070 	.word	0x24000070

9001bfc8 <_ZN8touchgfx8LCD16bpp21enableTextureMapperA4Ev>:
9001bfc8:	b510      	push	{r4, lr}
9001bfca:	4604      	mov	r4, r0
9001bfcc:	f7ff ff88 	bl	9001bee0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv>
9001bfd0:	4620      	mov	r0, r4
9001bfd2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
9001bfd6:	f7ff bfbd 	b.w	9001bf54 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv>

9001bfda <_ZN8touchgfx8LCD16bpp22enableTextureMapperAllEv>:
9001bfda:	b510      	push	{r4, lr}
9001bfdc:	4604      	mov	r4, r0
9001bfde:	f7ff fff3 	bl	9001bfc8 <_ZN8touchgfx8LCD16bpp21enableTextureMapperA4Ev>
9001bfe2:	4620      	mov	r0, r4
9001bfe4:	f7ff ff72 	bl	9001becc <_ZN8touchgfx8LCD16bpp27enableTextureMapperARGB8888Ev>
9001bfe8:	4620      	mov	r0, r4
9001bfea:	f7ff fdf9 	bl	9001bbe0 <_ZN8touchgfx8LCD16bpp30enableTextureMapperL8_ARGB8888Ev>
9001bfee:	4620      	mov	r0, r4
9001bff0:	f7ff fcfa 	bl	9001b9e8 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB565Ev>
9001bff4:	4620      	mov	r0, r4
9001bff6:	f7ff fd75 	bl	9001bae4 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB888Ev>
9001bffa:	4620      	mov	r0, r4
9001bffc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
9001c000:	f7ff bee0 	b.w	9001bdc4 <_ZN8touchgfx8LCD16bpp25enableTextureMapperRGB565Ev>

9001c004 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh>:
9001c004:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001c008:	e9dd 450b 	ldrd	r4, r5, [sp, #44]	; 0x2c
9001c00c:	f9bd e024 	ldrsh.w	lr, [sp, #36]	; 0x24
9001c010:	2d00      	cmp	r5, #0
9001c012:	f9bd b028 	ldrsh.w	fp, [sp, #40]	; 0x28
9001c016:	fb05 4c0e 	mla	ip, r5, lr, r4
9001c01a:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
9001c01e:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
9001c022:	f89d 603c 	ldrb.w	r6, [sp, #60]	; 0x3c
9001c026:	eb02 0a0c 	add.w	sl, r2, ip
9001c02a:	8808      	ldrh	r0, [r1, #0]
9001c02c:	f2c0 80b0 	blt.w	9001c190 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x18c>
9001c030:	45ab      	cmp	fp, r5
9001c032:	f340 80ad 	ble.w	9001c190 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x18c>
9001c036:	2c00      	cmp	r4, #0
9001c038:	f2c0 80a8 	blt.w	9001c18c <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x188>
9001c03c:	45a6      	cmp	lr, r4
9001c03e:	f340 80a5 	ble.w	9001c18c <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x188>
9001c042:	f812 200c 	ldrb.w	r2, [r2, ip]
9001c046:	f833 8012 	ldrh.w	r8, [r3, r2, lsl #1]
9001c04a:	1c62      	adds	r2, r4, #1
9001c04c:	f100 80a3 	bmi.w	9001c196 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x192>
9001c050:	4596      	cmp	lr, r2
9001c052:	f340 80a0 	ble.w	9001c196 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x192>
9001c056:	f1b9 0f00 	cmp.w	r9, #0
9001c05a:	f000 809c 	beq.w	9001c196 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x192>
9001c05e:	f89a 2001 	ldrb.w	r2, [sl, #1]
9001c062:	f833 c012 	ldrh.w	ip, [r3, r2, lsl #1]
9001c066:	3501      	adds	r5, #1
9001c068:	f100 8099 	bmi.w	9001c19e <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x19a>
9001c06c:	45ab      	cmp	fp, r5
9001c06e:	f340 8096 	ble.w	9001c19e <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x19a>
9001c072:	2f00      	cmp	r7, #0
9001c074:	f000 8093 	beq.w	9001c19e <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x19a>
9001c078:	2c00      	cmp	r4, #0
9001c07a:	f2c0 808e 	blt.w	9001c19a <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x196>
9001c07e:	45a6      	cmp	lr, r4
9001c080:	f340 808b 	ble.w	9001c19a <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x196>
9001c084:	f81a 200e 	ldrb.w	r2, [sl, lr]
9001c088:	f833 5012 	ldrh.w	r5, [r3, r2, lsl #1]
9001c08c:	3401      	adds	r4, #1
9001c08e:	f100 8089 	bmi.w	9001c1a4 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1a0>
9001c092:	45a6      	cmp	lr, r4
9001c094:	f340 8086 	ble.w	9001c1a4 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1a0>
9001c098:	f1b9 0f00 	cmp.w	r9, #0
9001c09c:	f000 8082 	beq.w	9001c1a4 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1a0>
9001c0a0:	44d6      	add	lr, sl
9001c0a2:	f89e 2001 	ldrb.w	r2, [lr, #1]
9001c0a6:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
9001c0aa:	ea4f 4408 	mov.w	r4, r8, lsl #16
9001c0ae:	f428 68fc 	bic.w	r8, r8, #2016	; 0x7e0
9001c0b2:	fb19 fe07 	smulbb	lr, r9, r7
9001c0b6:	f1c7 0210 	rsb	r2, r7, #16
9001c0ba:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
9001c0be:	f3ce 0ec7 	ubfx	lr, lr, #3, #8
9001c0c2:	eba2 0209 	sub.w	r2, r2, r9
9001c0c6:	ea44 0808 	orr.w	r8, r4, r8
9001c0ca:	ea4f 440c 	mov.w	r4, ip, lsl #16
9001c0ce:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
9001c0d2:	eb0e 0242 	add.w	r2, lr, r2, lsl #1
9001c0d6:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
9001c0da:	ebce 0747 	rsb	r7, lr, r7, lsl #1
9001c0de:	ea44 0c0c 	orr.w	ip, r4, ip
9001c0e2:	ebce 0449 	rsb	r4, lr, r9, lsl #1
9001c0e6:	fb04 f40c 	mul.w	r4, r4, ip
9001c0ea:	fb02 4808 	mla	r8, r2, r8, r4
9001c0ee:	041a      	lsls	r2, r3, #16
9001c0f0:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
9001c0f4:	b2b4      	uxth	r4, r6
9001c0f6:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
9001c0fa:	43f6      	mvns	r6, r6
9001c0fc:	4313      	orrs	r3, r2
9001c0fe:	042a      	lsls	r2, r5, #16
9001c100:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
9001c104:	b2f6      	uxtb	r6, r6
9001c106:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
9001c10a:	fb0e 8303 	mla	r3, lr, r3, r8
9001c10e:	432a      	orrs	r2, r5
9001c110:	fb07 3202 	mla	r2, r7, r2, r3
9001c114:	10c7      	asrs	r7, r0, #3
9001c116:	0d53      	lsrs	r3, r2, #21
9001c118:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
9001c11c:	0952      	lsrs	r2, r2, #5
9001c11e:	fb17 f706 	smulbb	r7, r7, r6
9001c122:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
9001c126:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
9001c12a:	431a      	orrs	r2, r3
9001c12c:	b293      	uxth	r3, r2
9001c12e:	1202      	asrs	r2, r0, #8
9001c130:	121d      	asrs	r5, r3, #8
9001c132:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
9001c136:	00c0      	lsls	r0, r0, #3
9001c138:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
9001c13c:	fb12 f206 	smulbb	r2, r2, r6
9001c140:	b2c0      	uxtb	r0, r0
9001c142:	fb05 2504 	mla	r5, r5, r4, r2
9001c146:	10da      	asrs	r2, r3, #3
9001c148:	fb10 f006 	smulbb	r0, r0, r6
9001c14c:	00db      	lsls	r3, r3, #3
9001c14e:	b2ad      	uxth	r5, r5
9001c150:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
9001c154:	b2db      	uxtb	r3, r3
9001c156:	fb02 7204 	mla	r2, r2, r4, r7
9001c15a:	fb03 0004 	mla	r0, r3, r4, r0
9001c15e:	1c6b      	adds	r3, r5, #1
9001c160:	b292      	uxth	r2, r2
9001c162:	b280      	uxth	r0, r0
9001c164:	eb03 2515 	add.w	r5, r3, r5, lsr #8
9001c168:	1c43      	adds	r3, r0, #1
9001c16a:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
9001c16e:	eb03 2310 	add.w	r3, r3, r0, lsr #8
9001c172:	1c50      	adds	r0, r2, #1
9001c174:	eb00 2212 	add.w	r2, r0, r2, lsr #8
9001c178:	f3c3 23c4 	ubfx	r3, r3, #11, #5
9001c17c:	0952      	lsrs	r2, r2, #5
9001c17e:	432b      	orrs	r3, r5
9001c180:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
9001c184:	4313      	orrs	r3, r2
9001c186:	800b      	strh	r3, [r1, #0]
9001c188:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9001c18c:	4680      	mov	r8, r0
9001c18e:	e75c      	b.n	9001c04a <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x46>
9001c190:	4684      	mov	ip, r0
9001c192:	4680      	mov	r8, r0
9001c194:	e767      	b.n	9001c066 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x62>
9001c196:	4684      	mov	ip, r0
9001c198:	e765      	b.n	9001c066 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x62>
9001c19a:	4605      	mov	r5, r0
9001c19c:	e776      	b.n	9001c08c <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x88>
9001c19e:	4603      	mov	r3, r0
9001c1a0:	4605      	mov	r5, r0
9001c1a2:	e782      	b.n	9001c0aa <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa6>
9001c1a4:	4603      	mov	r3, r0
9001c1a6:	e780      	b.n	9001c0aa <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa6>

9001c1a8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
9001c1a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001c1ac:	b099      	sub	sp, #100	; 0x64
9001c1ae:	9215      	str	r2, [sp, #84]	; 0x54
9001c1b0:	9309      	str	r3, [sp, #36]	; 0x24
9001c1b2:	9a27      	ldr	r2, [sp, #156]	; 0x9c
9001c1b4:	f89d 30ac 	ldrb.w	r3, [sp, #172]	; 0xac
9001c1b8:	9016      	str	r0, [sp, #88]	; 0x58
9001c1ba:	930d      	str	r3, [sp, #52]	; 0x34
9001c1bc:	6850      	ldr	r0, [r2, #4]
9001c1be:	910c      	str	r1, [sp, #48]	; 0x30
9001c1c0:	6812      	ldr	r2, [r2, #0]
9001c1c2:	e9dd 1328 	ldrd	r1, r3, [sp, #160]	; 0xa0
9001c1c6:	e9dd a523 	ldrd	sl, r5, [sp, #140]	; 0x8c
9001c1ca:	fb00 1303 	mla	r3, r0, r3, r1
9001c1ce:	eb02 0843 	add.w	r8, r2, r3, lsl #1
9001c1d2:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
9001c1d4:	681b      	ldr	r3, [r3, #0]
9001c1d6:	930b      	str	r3, [sp, #44]	; 0x2c
9001c1d8:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
9001c1da:	685e      	ldr	r6, [r3, #4]
9001c1dc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
9001c1de:	3604      	adds	r6, #4
9001c1e0:	43db      	mvns	r3, r3
9001c1e2:	b2db      	uxtb	r3, r3
9001c1e4:	930a      	str	r3, [sp, #40]	; 0x28
9001c1e6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
9001c1e8:	2b00      	cmp	r3, #0
9001c1ea:	dc03      	bgt.n	9001c1f4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
9001c1ec:	9b15      	ldr	r3, [sp, #84]	; 0x54
9001c1ee:	2b00      	cmp	r3, #0
9001c1f0:	f340 8225 	ble.w	9001c63e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x496>
9001c1f4:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
9001c1f6:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
9001c1fa:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
9001c1fe:	1e48      	subs	r0, r1, #1
9001c200:	1e57      	subs	r7, r2, #1
9001c202:	9b09      	ldr	r3, [sp, #36]	; 0x24
9001c204:	2b00      	cmp	r3, #0
9001c206:	f340 80e3 	ble.w	9001c3d0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
9001c20a:	ea5f 4c2a 	movs.w	ip, sl, asr #16
9001c20e:	ea4f 4325 	mov.w	r3, r5, asr #16
9001c212:	d406      	bmi.n	9001c222 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
9001c214:	4584      	cmp	ip, r0
9001c216:	da04      	bge.n	9001c222 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
9001c218:	2b00      	cmp	r3, #0
9001c21a:	db02      	blt.n	9001c222 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
9001c21c:	42bb      	cmp	r3, r7
9001c21e:	f2c0 80d8 	blt.w	9001c3d2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
9001c222:	f11c 0c01 	adds.w	ip, ip, #1
9001c226:	f100 80c9 	bmi.w	9001c3bc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
9001c22a:	4561      	cmp	r1, ip
9001c22c:	f2c0 80c6 	blt.w	9001c3bc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
9001c230:	3301      	adds	r3, #1
9001c232:	f100 80c3 	bmi.w	9001c3bc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
9001c236:	429a      	cmp	r2, r3
9001c238:	f2c0 80c0 	blt.w	9001c3bc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
9001c23c:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
9001c240:	4647      	mov	r7, r8
9001c242:	f1bb 0f00 	cmp.w	fp, #0
9001c246:	f340 80e3 	ble.w	9001c410 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x268>
9001c24a:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
9001c24c:	ea4f 4c25 	mov.w	ip, r5, asr #16
9001c250:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
9001c252:	f3ca 3003 	ubfx	r0, sl, #12, #4
9001c256:	f8d2 e00c 	ldr.w	lr, [r2, #12]
9001c25a:	ea5f 422a 	movs.w	r2, sl, asr #16
9001c25e:	f3c5 3103 	ubfx	r1, r5, #12, #4
9001c262:	689b      	ldr	r3, [r3, #8]
9001c264:	f100 8121 	bmi.w	9001c4aa <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x302>
9001c268:	f103 39ff 	add.w	r9, r3, #4294967295
9001c26c:	454a      	cmp	r2, r9
9001c26e:	f280 811c 	bge.w	9001c4aa <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x302>
9001c272:	f1bc 0f00 	cmp.w	ip, #0
9001c276:	f2c0 8118 	blt.w	9001c4aa <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x302>
9001c27a:	f10e 39ff 	add.w	r9, lr, #4294967295
9001c27e:	45cc      	cmp	ip, r9
9001c280:	f280 8113 	bge.w	9001c4aa <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x302>
9001c284:	b21b      	sxth	r3, r3
9001c286:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
9001c288:	fb0c 2203 	mla	r2, ip, r3, r2
9001c28c:	eb04 0902 	add.w	r9, r4, r2
9001c290:	5ca2      	ldrb	r2, [r4, r2]
9001c292:	f836 e012 	ldrh.w	lr, [r6, r2, lsl #1]
9001c296:	2800      	cmp	r0, #0
9001c298:	f000 80fe 	beq.w	9001c498 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f0>
9001c29c:	f899 2001 	ldrb.w	r2, [r9, #1]
9001c2a0:	f836 2012 	ldrh.w	r2, [r6, r2, lsl #1]
9001c2a4:	9211      	str	r2, [sp, #68]	; 0x44
9001c2a6:	b151      	cbz	r1, 9001c2be <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
9001c2a8:	eb09 0203 	add.w	r2, r9, r3
9001c2ac:	f819 3003 	ldrb.w	r3, [r9, r3]
9001c2b0:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
9001c2b4:	930f      	str	r3, [sp, #60]	; 0x3c
9001c2b6:	7853      	ldrb	r3, [r2, #1]
9001c2b8:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
9001c2bc:	9312      	str	r3, [sp, #72]	; 0x48
9001c2be:	9b11      	ldr	r3, [sp, #68]	; 0x44
9001c2c0:	fb10 f201 	smulbb	r2, r0, r1
9001c2c4:	9c12      	ldr	r4, [sp, #72]	; 0x48
9001c2c6:	ea4f 4c03 	mov.w	ip, r3, lsl #16
9001c2ca:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
9001c2ce:	f424 64fc 	bic.w	r4, r4, #2016	; 0x7e0
9001c2d2:	10d2      	asrs	r2, r2, #3
9001c2d4:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
9001c2d8:	ebc2 0940 	rsb	r9, r2, r0, lsl #1
9001c2dc:	ea4c 0c03 	orr.w	ip, ip, r3
9001c2e0:	9b12      	ldr	r3, [sp, #72]	; 0x48
9001c2e2:	041b      	lsls	r3, r3, #16
9001c2e4:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
9001c2e8:	4323      	orrs	r3, r4
9001c2ea:	9c0a      	ldr	r4, [sp, #40]	; 0x28
9001c2ec:	4353      	muls	r3, r2
9001c2ee:	fb09 330c 	mla	r3, r9, ip, r3
9001c2f2:	ea4f 4c0e 	mov.w	ip, lr, lsl #16
9001c2f6:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
9001c2fa:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
9001c2fe:	ea4c 0e0e 	orr.w	lr, ip, lr
9001c302:	f1c1 0c10 	rsb	ip, r1, #16
9001c306:	ebac 0c00 	sub.w	ip, ip, r0
9001c30a:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
9001c30e:	ebc2 0241 	rsb	r2, r2, r1, lsl #1
9001c312:	fb0c 3c0e 	mla	ip, ip, lr, r3
9001c316:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
9001c318:	0418      	lsls	r0, r3, #16
9001c31a:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
9001c31e:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
9001c322:	4318      	orrs	r0, r3
9001c324:	fb02 c200 	mla	r2, r2, r0, ip
9001c328:	8838      	ldrh	r0, [r7, #0]
9001c32a:	0d53      	lsrs	r3, r2, #21
9001c32c:	0952      	lsrs	r2, r2, #5
9001c32e:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
9001c332:	1201      	asrs	r1, r0, #8
9001c334:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
9001c338:	ea4f 0ee0 	mov.w	lr, r0, asr #3
9001c33c:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
9001c340:	00c0      	lsls	r0, r0, #3
9001c342:	431a      	orrs	r2, r3
9001c344:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
9001c348:	fb11 f104 	smulbb	r1, r1, r4
9001c34c:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
9001c350:	b292      	uxth	r2, r2
9001c352:	fb1e fe04 	smulbb	lr, lr, r4
9001c356:	b2c0      	uxtb	r0, r0
9001c358:	ea4f 2c22 	mov.w	ip, r2, asr #8
9001c35c:	fb10 f004 	smulbb	r0, r0, r4
9001c360:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
9001c364:	fb0c 1c03 	mla	ip, ip, r3, r1
9001c368:	10d1      	asrs	r1, r2, #3
9001c36a:	00d2      	lsls	r2, r2, #3
9001c36c:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
9001c370:	fa1f fc8c 	uxth.w	ip, ip
9001c374:	b2d2      	uxtb	r2, r2
9001c376:	fb01 e103 	mla	r1, r1, r3, lr
9001c37a:	fb02 0303 	mla	r3, r2, r3, r0
9001c37e:	b289      	uxth	r1, r1
9001c380:	b29a      	uxth	r2, r3
9001c382:	f10c 0301 	add.w	r3, ip, #1
9001c386:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
9001c38a:	1c53      	adds	r3, r2, #1
9001c38c:	eb03 2312 	add.w	r3, r3, r2, lsr #8
9001c390:	1c4a      	adds	r2, r1, #1
9001c392:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
9001c396:	eb02 2111 	add.w	r1, r2, r1, lsr #8
9001c39a:	f3c3 23c4 	ubfx	r3, r3, #11, #5
9001c39e:	0949      	lsrs	r1, r1, #5
9001c3a0:	ea43 030c 	orr.w	r3, r3, ip
9001c3a4:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
9001c3a8:	430b      	orrs	r3, r1
9001c3aa:	803b      	strh	r3, [r7, #0]
9001c3ac:	9b25      	ldr	r3, [sp, #148]	; 0x94
9001c3ae:	3702      	adds	r7, #2
9001c3b0:	f10b 3bff 	add.w	fp, fp, #4294967295
9001c3b4:	449a      	add	sl, r3
9001c3b6:	9b26      	ldr	r3, [sp, #152]	; 0x98
9001c3b8:	441d      	add	r5, r3
9001c3ba:	e742      	b.n	9001c242 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
9001c3bc:	9b25      	ldr	r3, [sp, #148]	; 0x94
9001c3be:	f108 0802 	add.w	r8, r8, #2
9001c3c2:	449a      	add	sl, r3
9001c3c4:	9b26      	ldr	r3, [sp, #152]	; 0x98
9001c3c6:	441d      	add	r5, r3
9001c3c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
9001c3ca:	3b01      	subs	r3, #1
9001c3cc:	9309      	str	r3, [sp, #36]	; 0x24
9001c3ce:	e718      	b.n	9001c202 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
9001c3d0:	d023      	beq.n	9001c41a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x272>
9001c3d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
9001c3d4:	9825      	ldr	r0, [sp, #148]	; 0x94
9001c3d6:	3b01      	subs	r3, #1
9001c3d8:	fb00 a003 	mla	r0, r0, r3, sl
9001c3dc:	1400      	asrs	r0, r0, #16
9001c3de:	f53f af2d 	bmi.w	9001c23c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
9001c3e2:	3901      	subs	r1, #1
9001c3e4:	4288      	cmp	r0, r1
9001c3e6:	f6bf af29 	bge.w	9001c23c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
9001c3ea:	9926      	ldr	r1, [sp, #152]	; 0x98
9001c3ec:	fb01 5303 	mla	r3, r1, r3, r5
9001c3f0:	141b      	asrs	r3, r3, #16
9001c3f2:	f53f af23 	bmi.w	9001c23c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
9001c3f6:	3a01      	subs	r2, #1
9001c3f8:	4293      	cmp	r3, r2
9001c3fa:	f6bf af1f 	bge.w	9001c23c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
9001c3fe:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
9001c402:	f8bd 9034 	ldrh.w	r9, [sp, #52]	; 0x34
9001c406:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
9001c40a:	f1be 0f00 	cmp.w	lr, #0
9001c40e:	dc6c      	bgt.n	9001c4ea <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
9001c410:	9b09      	ldr	r3, [sp, #36]	; 0x24
9001c412:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
9001c416:	eb08 0844 	add.w	r8, r8, r4, lsl #1
9001c41a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
9001c41c:	2b00      	cmp	r3, #0
9001c41e:	f340 810e 	ble.w	9001c63e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x496>
9001c422:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
9001c426:	9b22      	ldr	r3, [sp, #136]	; 0x88
9001c428:	ee30 0a04 	vadd.f32	s0, s0, s8
9001c42c:	ee70 0aa4 	vadd.f32	s1, s1, s9
9001c430:	eef0 6a62 	vmov.f32	s13, s5
9001c434:	eec7 7a00 	vdiv.f32	s15, s14, s0
9001c438:	ee31 1a05 	vadd.f32	s2, s2, s10
9001c43c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
9001c440:	ee16 aa90 	vmov	sl, s13
9001c444:	eef0 6a43 	vmov.f32	s13, s6
9001c448:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
9001c44c:	ee16 5a90 	vmov	r5, s13
9001c450:	ee20 7aa7 	vmul.f32	s14, s1, s15
9001c454:	ee61 7a27 	vmul.f32	s15, s2, s15
9001c458:	ee77 2a62 	vsub.f32	s5, s14, s5
9001c45c:	ee37 3ac3 	vsub.f32	s6, s15, s6
9001c460:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
9001c464:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
9001c468:	ee12 2a90 	vmov	r2, s5
9001c46c:	eef0 2a47 	vmov.f32	s5, s14
9001c470:	fb92 f3f3 	sdiv	r3, r2, r3
9001c474:	ee13 2a10 	vmov	r2, s6
9001c478:	9325      	str	r3, [sp, #148]	; 0x94
9001c47a:	9b22      	ldr	r3, [sp, #136]	; 0x88
9001c47c:	eeb0 3a67 	vmov.f32	s6, s15
9001c480:	fb92 f3f3 	sdiv	r3, r2, r3
9001c484:	9326      	str	r3, [sp, #152]	; 0x98
9001c486:	9b0c      	ldr	r3, [sp, #48]	; 0x30
9001c488:	9a15      	ldr	r2, [sp, #84]	; 0x54
9001c48a:	3b01      	subs	r3, #1
9001c48c:	930c      	str	r3, [sp, #48]	; 0x30
9001c48e:	9b22      	ldr	r3, [sp, #136]	; 0x88
9001c490:	bf08      	it	eq
9001c492:	4613      	moveq	r3, r2
9001c494:	9309      	str	r3, [sp, #36]	; 0x24
9001c496:	e6a6      	b.n	9001c1e6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
9001c498:	2900      	cmp	r1, #0
9001c49a:	f43f af10 	beq.w	9001c2be <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
9001c49e:	f819 3003 	ldrb.w	r3, [r9, r3]
9001c4a2:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
9001c4a6:	930f      	str	r3, [sp, #60]	; 0x3c
9001c4a8:	e709      	b.n	9001c2be <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
9001c4aa:	f112 0901 	adds.w	r9, r2, #1
9001c4ae:	f53f af7d 	bmi.w	9001c3ac <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
9001c4b2:	454b      	cmp	r3, r9
9001c4b4:	f6ff af7a 	blt.w	9001c3ac <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
9001c4b8:	f11c 0901 	adds.w	r9, ip, #1
9001c4bc:	f53f af76 	bmi.w	9001c3ac <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
9001c4c0:	45ce      	cmp	lr, r9
9001c4c2:	f6ff af73 	blt.w	9001c3ac <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
9001c4c6:	9c0d      	ldr	r4, [sp, #52]	; 0x34
9001c4c8:	b21b      	sxth	r3, r3
9001c4ca:	9202      	str	r2, [sp, #8]
9001c4cc:	fa0f f28e 	sxth.w	r2, lr
9001c4d0:	9300      	str	r3, [sp, #0]
9001c4d2:	4633      	mov	r3, r6
9001c4d4:	9201      	str	r2, [sp, #4]
9001c4d6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
9001c4d8:	e9cd 1405 	strd	r1, r4, [sp, #20]
9001c4dc:	e9cd c003 	strd	ip, r0, [sp, #12]
9001c4e0:	4639      	mov	r1, r7
9001c4e2:	9816      	ldr	r0, [sp, #88]	; 0x58
9001c4e4:	f7ff fd8e 	bl	9001c004 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh>
9001c4e8:	e760      	b.n	9001c3ac <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
9001c4ea:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
9001c4ec:	ea4f 422a 	mov.w	r2, sl, asr #16
9001c4f0:	1429      	asrs	r1, r5, #16
9001c4f2:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
9001c4f4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
9001c4f8:	f3ca 3c03 	ubfx	ip, sl, #12, #4
9001c4fc:	f3c5 3003 	ubfx	r0, r5, #12, #4
9001c500:	fb03 2101 	mla	r1, r3, r1, r2
9001c504:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
9001c506:	440a      	add	r2, r1
9001c508:	5c61      	ldrb	r1, [r4, r1]
9001c50a:	f836 1011 	ldrh.w	r1, [r6, r1, lsl #1]
9001c50e:	f1bc 0f00 	cmp.w	ip, #0
9001c512:	f000 808c 	beq.w	9001c62e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x486>
9001c516:	7857      	ldrb	r7, [r2, #1]
9001c518:	f836 4017 	ldrh.w	r4, [r6, r7, lsl #1]
9001c51c:	9413      	str	r4, [sp, #76]	; 0x4c
9001c51e:	b140      	cbz	r0, 9001c532 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
9001c520:	18d7      	adds	r7, r2, r3
9001c522:	5cd3      	ldrb	r3, [r2, r3]
9001c524:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
9001c528:	9310      	str	r3, [sp, #64]	; 0x40
9001c52a:	787b      	ldrb	r3, [r7, #1]
9001c52c:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
9001c530:	9314      	str	r3, [sp, #80]	; 0x50
9001c532:	9b13      	ldr	r3, [sp, #76]	; 0x4c
9001c534:	fb1c f200 	smulbb	r2, ip, r0
9001c538:	9c14      	ldr	r4, [sp, #80]	; 0x50
9001c53a:	f10e 3eff 	add.w	lr, lr, #4294967295
9001c53e:	041f      	lsls	r7, r3, #16
9001c540:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
9001c544:	10d2      	asrs	r2, r2, #3
9001c546:	f424 6bfc 	bic.w	fp, r4, #2016	; 0x7e0
9001c54a:	f007 67fc 	and.w	r7, r7, #132120576	; 0x7e00000
9001c54e:	431f      	orrs	r7, r3
9001c550:	ebc2 034c 	rsb	r3, r2, ip, lsl #1
9001c554:	9317      	str	r3, [sp, #92]	; 0x5c
9001c556:	9b14      	ldr	r3, [sp, #80]	; 0x50
9001c558:	9c17      	ldr	r4, [sp, #92]	; 0x5c
9001c55a:	041b      	lsls	r3, r3, #16
9001c55c:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
9001c560:	ea43 030b 	orr.w	r3, r3, fp
9001c564:	ea4f 4b01 	mov.w	fp, r1, lsl #16
9001c568:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
9001c56c:	4353      	muls	r3, r2
9001c56e:	fb04 3707 	mla	r7, r4, r7, r3
9001c572:	f00b 63fc 	and.w	r3, fp, #132120576	; 0x7e00000
9001c576:	9c0a      	ldr	r4, [sp, #40]	; 0x28
9001c578:	ea43 0b01 	orr.w	fp, r3, r1
9001c57c:	f1c0 0110 	rsb	r1, r0, #16
9001c580:	9b10      	ldr	r3, [sp, #64]	; 0x40
9001c582:	eba1 0c0c 	sub.w	ip, r1, ip
9001c586:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
9001c58a:	ebc2 0240 	rsb	r2, r2, r0, lsl #1
9001c58e:	fb0c 770b 	mla	r7, ip, fp, r7
9001c592:	ea4f 4c03 	mov.w	ip, r3, lsl #16
9001c596:	f423 6bfc 	bic.w	fp, r3, #2016	; 0x7e0
9001c59a:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
9001c59e:	ea4c 0c0b 	orr.w	ip, ip, fp
9001c5a2:	fb02 770c 	mla	r7, r2, ip, r7
9001c5a6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
9001c5a8:	0d79      	lsrs	r1, r7, #21
9001c5aa:	8812      	ldrh	r2, [r2, #0]
9001c5ac:	097f      	lsrs	r7, r7, #5
9001c5ae:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
9001c5b2:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
9001c5b6:	430f      	orrs	r7, r1
9001c5b8:	1211      	asrs	r1, r2, #8
9001c5ba:	b2bb      	uxth	r3, r7
9001c5bc:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
9001c5c0:	10d7      	asrs	r7, r2, #3
9001c5c2:	fb11 f104 	smulbb	r1, r1, r4
9001c5c6:	1218      	asrs	r0, r3, #8
9001c5c8:	00d2      	lsls	r2, r2, #3
9001c5ca:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
9001c5ce:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
9001c5d2:	fb17 f704 	smulbb	r7, r7, r4
9001c5d6:	b2d2      	uxtb	r2, r2
9001c5d8:	fb00 1009 	mla	r0, r0, r9, r1
9001c5dc:	10d9      	asrs	r1, r3, #3
9001c5de:	fb12 f204 	smulbb	r2, r2, r4
9001c5e2:	00db      	lsls	r3, r3, #3
9001c5e4:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
9001c5e8:	b280      	uxth	r0, r0
9001c5ea:	b2db      	uxtb	r3, r3
9001c5ec:	fb01 7109 	mla	r1, r1, r9, r7
9001c5f0:	fb03 2309 	mla	r3, r3, r9, r2
9001c5f4:	1c42      	adds	r2, r0, #1
9001c5f6:	b289      	uxth	r1, r1
9001c5f8:	b29b      	uxth	r3, r3
9001c5fa:	eb02 2010 	add.w	r0, r2, r0, lsr #8
9001c5fe:	1c4f      	adds	r7, r1, #1
9001c600:	1c5a      	adds	r2, r3, #1
9001c602:	eb07 2111 	add.w	r1, r7, r1, lsr #8
9001c606:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
9001c60a:	eb02 2213 	add.w	r2, r2, r3, lsr #8
9001c60e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
9001c610:	0949      	lsrs	r1, r1, #5
9001c612:	f3c2 22c4 	ubfx	r2, r2, #11, #5
9001c616:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
9001c61a:	4310      	orrs	r0, r2
9001c61c:	4308      	orrs	r0, r1
9001c61e:	f823 0b02 	strh.w	r0, [r3], #2
9001c622:	930e      	str	r3, [sp, #56]	; 0x38
9001c624:	9b25      	ldr	r3, [sp, #148]	; 0x94
9001c626:	449a      	add	sl, r3
9001c628:	9b26      	ldr	r3, [sp, #152]	; 0x98
9001c62a:	441d      	add	r5, r3
9001c62c:	e6ed      	b.n	9001c40a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x262>
9001c62e:	2800      	cmp	r0, #0
9001c630:	f43f af7f 	beq.w	9001c532 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
9001c634:	5cd3      	ldrb	r3, [r2, r3]
9001c636:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
9001c63a:	9310      	str	r3, [sp, #64]	; 0x40
9001c63c:	e779      	b.n	9001c532 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
9001c63e:	b019      	add	sp, #100	; 0x64
9001c640:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

9001c644 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>:
9001c644:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
9001c648:	e9dd 480a 	ldrd	r4, r8, [sp, #40]	; 0x28
9001c64c:	f9bd e020 	ldrsh.w	lr, [sp, #32]
9001c650:	f1b8 0f00 	cmp.w	r8, #0
9001c654:	f9bd a024 	ldrsh.w	sl, [sp, #36]	; 0x24
9001c658:	fb08 470e 	mla	r7, r8, lr, r4
9001c65c:	f89d 5030 	ldrb.w	r5, [sp, #48]	; 0x30
9001c660:	f89d 6034 	ldrb.w	r6, [sp, #52]	; 0x34
9001c664:	eb02 0907 	add.w	r9, r2, r7
9001c668:	8808      	ldrh	r0, [r1, #0]
9001c66a:	db67      	blt.n	9001c73c <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xf8>
9001c66c:	45c2      	cmp	sl, r8
9001c66e:	dd65      	ble.n	9001c73c <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xf8>
9001c670:	2c00      	cmp	r4, #0
9001c672:	db61      	blt.n	9001c738 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xf4>
9001c674:	45a6      	cmp	lr, r4
9001c676:	dd5f      	ble.n	9001c738 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xf4>
9001c678:	5dd2      	ldrb	r2, [r2, r7]
9001c67a:	f833 c012 	ldrh.w	ip, [r3, r2, lsl #1]
9001c67e:	1c62      	adds	r2, r4, #1
9001c680:	d45f      	bmi.n	9001c742 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xfe>
9001c682:	4596      	cmp	lr, r2
9001c684:	dd5d      	ble.n	9001c742 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xfe>
9001c686:	2d00      	cmp	r5, #0
9001c688:	d05b      	beq.n	9001c742 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xfe>
9001c68a:	f899 2001 	ldrb.w	r2, [r9, #1]
9001c68e:	f833 7012 	ldrh.w	r7, [r3, r2, lsl #1]
9001c692:	f118 0801 	adds.w	r8, r8, #1
9001c696:	d458      	bmi.n	9001c74a <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x106>
9001c698:	45c2      	cmp	sl, r8
9001c69a:	dd56      	ble.n	9001c74a <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x106>
9001c69c:	2e00      	cmp	r6, #0
9001c69e:	d054      	beq.n	9001c74a <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x106>
9001c6a0:	2c00      	cmp	r4, #0
9001c6a2:	db50      	blt.n	9001c746 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x102>
9001c6a4:	45a6      	cmp	lr, r4
9001c6a6:	dd4e      	ble.n	9001c746 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x102>
9001c6a8:	f819 200e 	ldrb.w	r2, [r9, lr]
9001c6ac:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
9001c6b0:	3401      	adds	r4, #1
9001c6b2:	d407      	bmi.n	9001c6c4 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>
9001c6b4:	45a6      	cmp	lr, r4
9001c6b6:	dd05      	ble.n	9001c6c4 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>
9001c6b8:	b125      	cbz	r5, 9001c6c4 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>
9001c6ba:	44ce      	add	lr, r9
9001c6bc:	f89e 0001 	ldrb.w	r0, [lr, #1]
9001c6c0:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
9001c6c4:	fb15 f406 	smulbb	r4, r5, r6
9001c6c8:	ea4f 430c 	mov.w	r3, ip, lsl #16
9001c6cc:	ea4f 4e07 	mov.w	lr, r7, lsl #16
9001c6d0:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
9001c6d4:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
9001c6d8:	f3c4 04c7 	ubfx	r4, r4, #3, #8
9001c6dc:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
9001c6e0:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
9001c6e4:	ea43 0c0c 	orr.w	ip, r3, ip
9001c6e8:	f1c6 0310 	rsb	r3, r6, #16
9001c6ec:	ea4e 0707 	orr.w	r7, lr, r7
9001c6f0:	ebc4 0646 	rsb	r6, r4, r6, lsl #1
9001c6f4:	1b5b      	subs	r3, r3, r5
9001c6f6:	ebc4 0545 	rsb	r5, r4, r5, lsl #1
9001c6fa:	eb04 0343 	add.w	r3, r4, r3, lsl #1
9001c6fe:	437d      	muls	r5, r7
9001c700:	fb03 5c0c 	mla	ip, r3, ip, r5
9001c704:	0403      	lsls	r3, r0, #16
9001c706:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
9001c70a:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
9001c70e:	4318      	orrs	r0, r3
9001c710:	0413      	lsls	r3, r2, #16
9001c712:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
9001c716:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
9001c71a:	fb04 c000 	mla	r0, r4, r0, ip
9001c71e:	4313      	orrs	r3, r2
9001c720:	fb06 0003 	mla	r0, r6, r3, r0
9001c724:	0d43      	lsrs	r3, r0, #21
9001c726:	0940      	lsrs	r0, r0, #5
9001c728:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
9001c72c:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
9001c730:	4318      	orrs	r0, r3
9001c732:	8008      	strh	r0, [r1, #0]
9001c734:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
9001c738:	4684      	mov	ip, r0
9001c73a:	e7a0      	b.n	9001c67e <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x3a>
9001c73c:	4607      	mov	r7, r0
9001c73e:	4684      	mov	ip, r0
9001c740:	e7a7      	b.n	9001c692 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x4e>
9001c742:	4607      	mov	r7, r0
9001c744:	e7a5      	b.n	9001c692 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x4e>
9001c746:	4602      	mov	r2, r0
9001c748:	e7b2      	b.n	9001c6b0 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x6c>
9001c74a:	4602      	mov	r2, r0
9001c74c:	e7ba      	b.n	9001c6c4 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>

9001c74e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
9001c74e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001c752:	b093      	sub	sp, #76	; 0x4c
9001c754:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
9001c758:	920f      	str	r2, [sp, #60]	; 0x3c
9001c75a:	9a21      	ldr	r2, [sp, #132]	; 0x84
9001c75c:	9010      	str	r0, [sp, #64]	; 0x40
9001c75e:	9108      	str	r1, [sp, #32]
9001c760:	6850      	ldr	r0, [r2, #4]
9001c762:	9306      	str	r3, [sp, #24]
9001c764:	6812      	ldr	r2, [r2, #0]
9001c766:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	; 0x88
9001c76a:	e9dd 461d 	ldrd	r4, r6, [sp, #116]	; 0x74
9001c76e:	fb00 1303 	mla	r3, r0, r3, r1
9001c772:	eb02 0943 	add.w	r9, r2, r3, lsl #1
9001c776:	9b24      	ldr	r3, [sp, #144]	; 0x90
9001c778:	681b      	ldr	r3, [r3, #0]
9001c77a:	9307      	str	r3, [sp, #28]
9001c77c:	9b24      	ldr	r3, [sp, #144]	; 0x90
9001c77e:	685f      	ldr	r7, [r3, #4]
9001c780:	3704      	adds	r7, #4
9001c782:	9b08      	ldr	r3, [sp, #32]
9001c784:	2b00      	cmp	r3, #0
9001c786:	dc03      	bgt.n	9001c790 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
9001c788:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
9001c78a:	2b00      	cmp	r3, #0
9001c78c:	f340 81b2 	ble.w	9001caf4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a6>
9001c790:	9b24      	ldr	r3, [sp, #144]	; 0x90
9001c792:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
9001c796:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
9001c79a:	1e48      	subs	r0, r1, #1
9001c79c:	f102 3cff 	add.w	ip, r2, #4294967295
9001c7a0:	9b06      	ldr	r3, [sp, #24]
9001c7a2:	2b00      	cmp	r3, #0
9001c7a4:	f340 80a9 	ble.w	9001c8fa <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
9001c7a8:	ea5f 4e24 	movs.w	lr, r4, asr #16
9001c7ac:	ea4f 4326 	mov.w	r3, r6, asr #16
9001c7b0:	d406      	bmi.n	9001c7c0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
9001c7b2:	4586      	cmp	lr, r0
9001c7b4:	da04      	bge.n	9001c7c0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
9001c7b6:	2b00      	cmp	r3, #0
9001c7b8:	db02      	blt.n	9001c7c0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
9001c7ba:	4563      	cmp	r3, ip
9001c7bc:	f2c0 809e 	blt.w	9001c8fc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ae>
9001c7c0:	f11e 0e01 	adds.w	lr, lr, #1
9001c7c4:	f100 808f 	bmi.w	9001c8e6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
9001c7c8:	4571      	cmp	r1, lr
9001c7ca:	f2c0 808c 	blt.w	9001c8e6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
9001c7ce:	3301      	adds	r3, #1
9001c7d0:	f100 8089 	bmi.w	9001c8e6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
9001c7d4:	429a      	cmp	r2, r3
9001c7d6:	f2c0 8086 	blt.w	9001c8e6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
9001c7da:	f8dd b018 	ldr.w	fp, [sp, #24]
9001c7de:	46c8      	mov	r8, r9
9001c7e0:	f1bb 0f00 	cmp.w	fp, #0
9001c7e4:	f340 80a6 	ble.w	9001c934 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
9001c7e8:	9a24      	ldr	r2, [sp, #144]	; 0x90
9001c7ea:	ea4f 4c26 	mov.w	ip, r6, asr #16
9001c7ee:	9b24      	ldr	r3, [sp, #144]	; 0x90
9001c7f0:	f3c4 3003 	ubfx	r0, r4, #12, #4
9001c7f4:	f8d2 e00c 	ldr.w	lr, [r2, #12]
9001c7f8:	1422      	asrs	r2, r4, #16
9001c7fa:	f3c6 3103 	ubfx	r1, r6, #12, #4
9001c7fe:	689b      	ldr	r3, [r3, #8]
9001c800:	f100 80e3 	bmi.w	9001c9ca <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
9001c804:	f103 3aff 	add.w	sl, r3, #4294967295
9001c808:	4552      	cmp	r2, sl
9001c80a:	f280 80de 	bge.w	9001c9ca <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
9001c80e:	f1bc 0f00 	cmp.w	ip, #0
9001c812:	f2c0 80da 	blt.w	9001c9ca <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
9001c816:	f10e 3aff 	add.w	sl, lr, #4294967295
9001c81a:	45d4      	cmp	ip, sl
9001c81c:	f280 80d5 	bge.w	9001c9ca <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
9001c820:	b21b      	sxth	r3, r3
9001c822:	9d07      	ldr	r5, [sp, #28]
9001c824:	fb0c 2203 	mla	r2, ip, r3, r2
9001c828:	eb05 0a02 	add.w	sl, r5, r2
9001c82c:	5caa      	ldrb	r2, [r5, r2]
9001c82e:	f837 e012 	ldrh.w	lr, [r7, r2, lsl #1]
9001c832:	2800      	cmp	r0, #0
9001c834:	f000 80c0 	beq.w	9001c9b8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
9001c838:	f89a 2001 	ldrb.w	r2, [sl, #1]
9001c83c:	f837 2012 	ldrh.w	r2, [r7, r2, lsl #1]
9001c840:	920b      	str	r2, [sp, #44]	; 0x2c
9001c842:	b151      	cbz	r1, 9001c85a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10c>
9001c844:	eb0a 0203 	add.w	r2, sl, r3
9001c848:	f81a 3003 	ldrb.w	r3, [sl, r3]
9001c84c:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
9001c850:	9309      	str	r3, [sp, #36]	; 0x24
9001c852:	7853      	ldrb	r3, [r2, #1]
9001c854:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
9001c858:	930c      	str	r3, [sp, #48]	; 0x30
9001c85a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
9001c85c:	fb10 f201 	smulbb	r2, r0, r1
9001c860:	9d0c      	ldr	r5, [sp, #48]	; 0x30
9001c862:	ea4f 4c03 	mov.w	ip, r3, lsl #16
9001c866:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
9001c86a:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
9001c86e:	10d2      	asrs	r2, r2, #3
9001c870:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
9001c874:	ebc2 0a40 	rsb	sl, r2, r0, lsl #1
9001c878:	ea4c 0c03 	orr.w	ip, ip, r3
9001c87c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
9001c87e:	041b      	lsls	r3, r3, #16
9001c880:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
9001c884:	432b      	orrs	r3, r5
9001c886:	4353      	muls	r3, r2
9001c888:	fb0a 330c 	mla	r3, sl, ip, r3
9001c88c:	ea4f 4c0e 	mov.w	ip, lr, lsl #16
9001c890:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
9001c894:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
9001c898:	ea4c 0e0e 	orr.w	lr, ip, lr
9001c89c:	f1c1 0c10 	rsb	ip, r1, #16
9001c8a0:	ebac 0c00 	sub.w	ip, ip, r0
9001c8a4:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
9001c8a8:	ebc2 0241 	rsb	r2, r2, r1, lsl #1
9001c8ac:	fb0c 3c0e 	mla	ip, ip, lr, r3
9001c8b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
9001c8b2:	0418      	lsls	r0, r3, #16
9001c8b4:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
9001c8b8:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
9001c8bc:	4318      	orrs	r0, r3
9001c8be:	fb02 c200 	mla	r2, r2, r0, ip
9001c8c2:	0d53      	lsrs	r3, r2, #21
9001c8c4:	0952      	lsrs	r2, r2, #5
9001c8c6:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
9001c8ca:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
9001c8ce:	431a      	orrs	r2, r3
9001c8d0:	f8a8 2000 	strh.w	r2, [r8]
9001c8d4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
9001c8d6:	f108 0802 	add.w	r8, r8, #2
9001c8da:	f10b 3bff 	add.w	fp, fp, #4294967295
9001c8de:	441c      	add	r4, r3
9001c8e0:	9b20      	ldr	r3, [sp, #128]	; 0x80
9001c8e2:	441e      	add	r6, r3
9001c8e4:	e77c      	b.n	9001c7e0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
9001c8e6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
9001c8e8:	f109 0902 	add.w	r9, r9, #2
9001c8ec:	441c      	add	r4, r3
9001c8ee:	9b20      	ldr	r3, [sp, #128]	; 0x80
9001c8f0:	441e      	add	r6, r3
9001c8f2:	9b06      	ldr	r3, [sp, #24]
9001c8f4:	3b01      	subs	r3, #1
9001c8f6:	9306      	str	r3, [sp, #24]
9001c8f8:	e752      	b.n	9001c7a0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
9001c8fa:	d020      	beq.n	9001c93e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
9001c8fc:	9b06      	ldr	r3, [sp, #24]
9001c8fe:	981f      	ldr	r0, [sp, #124]	; 0x7c
9001c900:	3b01      	subs	r3, #1
9001c902:	fb00 4003 	mla	r0, r0, r3, r4
9001c906:	1400      	asrs	r0, r0, #16
9001c908:	f53f af67 	bmi.w	9001c7da <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
9001c90c:	3901      	subs	r1, #1
9001c90e:	4288      	cmp	r0, r1
9001c910:	f6bf af63 	bge.w	9001c7da <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
9001c914:	9920      	ldr	r1, [sp, #128]	; 0x80
9001c916:	fb01 6303 	mla	r3, r1, r3, r6
9001c91a:	141b      	asrs	r3, r3, #16
9001c91c:	f53f af5d 	bmi.w	9001c7da <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
9001c920:	3a01      	subs	r2, #1
9001c922:	4293      	cmp	r3, r2
9001c924:	f6bf af59 	bge.w	9001c7da <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
9001c928:	f8dd 8018 	ldr.w	r8, [sp, #24]
9001c92c:	46ca      	mov	sl, r9
9001c92e:	f1b8 0f00 	cmp.w	r8, #0
9001c932:	dc67      	bgt.n	9001ca04 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
9001c934:	9b06      	ldr	r3, [sp, #24]
9001c936:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
9001c93a:	eb09 0945 	add.w	r9, r9, r5, lsl #1
9001c93e:	9b08      	ldr	r3, [sp, #32]
9001c940:	2b00      	cmp	r3, #0
9001c942:	f340 80d7 	ble.w	9001caf4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a6>
9001c946:	ee30 0a04 	vadd.f32	s0, s0, s8
9001c94a:	9b1c      	ldr	r3, [sp, #112]	; 0x70
9001c94c:	ee70 0aa4 	vadd.f32	s1, s1, s9
9001c950:	eeb0 6a62 	vmov.f32	s12, s5
9001c954:	eec6 7a80 	vdiv.f32	s15, s13, s0
9001c958:	ee31 1a05 	vadd.f32	s2, s2, s10
9001c95c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
9001c960:	ee16 4a10 	vmov	r4, s12
9001c964:	eeb0 6a43 	vmov.f32	s12, s6
9001c968:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
9001c96c:	ee16 6a10 	vmov	r6, s12
9001c970:	ee20 7aa7 	vmul.f32	s14, s1, s15
9001c974:	ee61 7a27 	vmul.f32	s15, s2, s15
9001c978:	ee77 2a62 	vsub.f32	s5, s14, s5
9001c97c:	ee37 3ac3 	vsub.f32	s6, s15, s6
9001c980:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
9001c984:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
9001c988:	ee12 2a90 	vmov	r2, s5
9001c98c:	eef0 2a47 	vmov.f32	s5, s14
9001c990:	fb92 f3f3 	sdiv	r3, r2, r3
9001c994:	ee13 2a10 	vmov	r2, s6
9001c998:	931f      	str	r3, [sp, #124]	; 0x7c
9001c99a:	9b1c      	ldr	r3, [sp, #112]	; 0x70
9001c99c:	eeb0 3a67 	vmov.f32	s6, s15
9001c9a0:	fb92 f3f3 	sdiv	r3, r2, r3
9001c9a4:	9320      	str	r3, [sp, #128]	; 0x80
9001c9a6:	9b08      	ldr	r3, [sp, #32]
9001c9a8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
9001c9aa:	3b01      	subs	r3, #1
9001c9ac:	9308      	str	r3, [sp, #32]
9001c9ae:	9b1c      	ldr	r3, [sp, #112]	; 0x70
9001c9b0:	bf08      	it	eq
9001c9b2:	4613      	moveq	r3, r2
9001c9b4:	9306      	str	r3, [sp, #24]
9001c9b6:	e6e4      	b.n	9001c782 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
9001c9b8:	2900      	cmp	r1, #0
9001c9ba:	f43f af4e 	beq.w	9001c85a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10c>
9001c9be:	f81a 3003 	ldrb.w	r3, [sl, r3]
9001c9c2:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
9001c9c6:	9309      	str	r3, [sp, #36]	; 0x24
9001c9c8:	e747      	b.n	9001c85a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10c>
9001c9ca:	f112 0a01 	adds.w	sl, r2, #1
9001c9ce:	d481      	bmi.n	9001c8d4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
9001c9d0:	4553      	cmp	r3, sl
9001c9d2:	f6ff af7f 	blt.w	9001c8d4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
9001c9d6:	f11c 0a01 	adds.w	sl, ip, #1
9001c9da:	f53f af7b 	bmi.w	9001c8d4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
9001c9de:	45d6      	cmp	lr, sl
9001c9e0:	f6ff af78 	blt.w	9001c8d4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
9001c9e4:	b21b      	sxth	r3, r3
9001c9e6:	e9cd 2c02 	strd	r2, ip, [sp, #8]
9001c9ea:	fa0f f28e 	sxth.w	r2, lr
9001c9ee:	9300      	str	r3, [sp, #0]
9001c9f0:	463b      	mov	r3, r7
9001c9f2:	9201      	str	r2, [sp, #4]
9001c9f4:	9a07      	ldr	r2, [sp, #28]
9001c9f6:	e9cd 0104 	strd	r0, r1, [sp, #16]
9001c9fa:	4641      	mov	r1, r8
9001c9fc:	9810      	ldr	r0, [sp, #64]	; 0x40
9001c9fe:	f7ff fe21 	bl	9001c644 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>
9001ca02:	e767      	b.n	9001c8d4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
9001ca04:	9b24      	ldr	r3, [sp, #144]	; 0x90
9001ca06:	1422      	asrs	r2, r4, #16
9001ca08:	1431      	asrs	r1, r6, #16
9001ca0a:	9d07      	ldr	r5, [sp, #28]
9001ca0c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
9001ca10:	f3c4 3e03 	ubfx	lr, r4, #12, #4
9001ca14:	f3c6 3003 	ubfx	r0, r6, #12, #4
9001ca18:	fb03 2101 	mla	r1, r3, r1, r2
9001ca1c:	9a07      	ldr	r2, [sp, #28]
9001ca1e:	440a      	add	r2, r1
9001ca20:	5c69      	ldrb	r1, [r5, r1]
9001ca22:	f837 1011 	ldrh.w	r1, [r7, r1, lsl #1]
9001ca26:	f1be 0f00 	cmp.w	lr, #0
9001ca2a:	d05c      	beq.n	9001cae6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x398>
9001ca2c:	f892 c001 	ldrb.w	ip, [r2, #1]
9001ca30:	f837 501c 	ldrh.w	r5, [r7, ip, lsl #1]
9001ca34:	950d      	str	r5, [sp, #52]	; 0x34
9001ca36:	b150      	cbz	r0, 9001ca4e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x300>
9001ca38:	eb02 0c03 	add.w	ip, r2, r3
9001ca3c:	5cd3      	ldrb	r3, [r2, r3]
9001ca3e:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
9001ca42:	930a      	str	r3, [sp, #40]	; 0x28
9001ca44:	f89c 3001 	ldrb.w	r3, [ip, #1]
9001ca48:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
9001ca4c:	930e      	str	r3, [sp, #56]	; 0x38
9001ca4e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
9001ca50:	fb1e f200 	smulbb	r2, lr, r0
9001ca54:	9d0e      	ldr	r5, [sp, #56]	; 0x38
9001ca56:	f108 38ff 	add.w	r8, r8, #4294967295
9001ca5a:	ea4f 4c03 	mov.w	ip, r3, lsl #16
9001ca5e:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
9001ca62:	10d2      	asrs	r2, r2, #3
9001ca64:	f425 6bfc 	bic.w	fp, r5, #2016	; 0x7e0
9001ca68:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
9001ca6c:	ea4c 0c03 	orr.w	ip, ip, r3
9001ca70:	ebc2 034e 	rsb	r3, r2, lr, lsl #1
9001ca74:	9311      	str	r3, [sp, #68]	; 0x44
9001ca76:	9b0e      	ldr	r3, [sp, #56]	; 0x38
9001ca78:	9d11      	ldr	r5, [sp, #68]	; 0x44
9001ca7a:	041b      	lsls	r3, r3, #16
9001ca7c:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
9001ca80:	ea43 030b 	orr.w	r3, r3, fp
9001ca84:	ea4f 4b01 	mov.w	fp, r1, lsl #16
9001ca88:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
9001ca8c:	4353      	muls	r3, r2
9001ca8e:	fb05 3c0c 	mla	ip, r5, ip, r3
9001ca92:	f00b 63fc 	and.w	r3, fp, #132120576	; 0x7e00000
9001ca96:	ea43 0b01 	orr.w	fp, r3, r1
9001ca9a:	f1c0 0110 	rsb	r1, r0, #16
9001ca9e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
9001caa0:	eba1 0e0e 	sub.w	lr, r1, lr
9001caa4:	eb02 0e4e 	add.w	lr, r2, lr, lsl #1
9001caa8:	ebc2 0240 	rsb	r2, r2, r0, lsl #1
9001caac:	fb0e cc0b 	mla	ip, lr, fp, ip
9001cab0:	ea4f 4b03 	mov.w	fp, r3, lsl #16
9001cab4:	f423 6efc 	bic.w	lr, r3, #2016	; 0x7e0
9001cab8:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
9001cabc:	ea4b 0e0e 	orr.w	lr, fp, lr
9001cac0:	fb02 cc0e 	mla	ip, r2, lr, ip
9001cac4:	ea4f 535c 	mov.w	r3, ip, lsr #21
9001cac8:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
9001cacc:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
9001cad0:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
9001cad4:	ea43 0c0c 	orr.w	ip, r3, ip
9001cad8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
9001cada:	441c      	add	r4, r3
9001cadc:	9b20      	ldr	r3, [sp, #128]	; 0x80
9001cade:	f82a cb02 	strh.w	ip, [sl], #2
9001cae2:	441e      	add	r6, r3
9001cae4:	e723      	b.n	9001c92e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
9001cae6:	2800      	cmp	r0, #0
9001cae8:	d0b1      	beq.n	9001ca4e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x300>
9001caea:	5cd3      	ldrb	r3, [r2, r3]
9001caec:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
9001caf0:	930a      	str	r3, [sp, #40]	; 0x28
9001caf2:	e7ac      	b.n	9001ca4e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x300>
9001caf4:	b013      	add	sp, #76	; 0x4c
9001caf6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

9001cafa <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh>:
9001cafa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001cafe:	880d      	ldrh	r5, [r1, #0]
9001cb00:	b087      	sub	sp, #28
9001cb02:	10ef      	asrs	r7, r5, #3
9001cb04:	9103      	str	r1, [sp, #12]
9001cb06:	ea4f 2a25 	mov.w	sl, r5, asr #8
9001cb0a:	f9bd 9040 	ldrsh.w	r9, [sp, #64]	; 0x40
9001cb0e:	00ed      	lsls	r5, r5, #3
9001cb10:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
9001cb14:	f00a 0af8 	and.w	sl, sl, #248	; 0xf8
9001cb18:	f9bd b044 	ldrsh.w	fp, [sp, #68]	; 0x44
9001cb1c:	b2ed      	uxtb	r5, r5
9001cb1e:	9701      	str	r7, [sp, #4]
9001cb20:	f89d 4050 	ldrb.w	r4, [sp, #80]	; 0x50
9001cb24:	9502      	str	r5, [sp, #8]
9001cb26:	9d01      	ldr	r5, [sp, #4]
9001cb28:	9902      	ldr	r1, [sp, #8]
9001cb2a:	022d      	lsls	r5, r5, #8
9001cb2c:	f89d e054 	ldrb.w	lr, [sp, #84]	; 0x54
9001cb30:	f89d 8058 	ldrb.w	r8, [sp, #88]	; 0x58
9001cb34:	ea45 450a 	orr.w	r5, r5, sl, lsl #16
9001cb38:	e9dd 0612 	ldrd	r0, r6, [sp, #72]	; 0x48
9001cb3c:	430d      	orrs	r5, r1
9001cb3e:	fb06 0709 	mla	r7, r6, r9, r0
9001cb42:	2e00      	cmp	r6, #0
9001cb44:	9505      	str	r5, [sp, #20]
9001cb46:	eb02 0c07 	add.w	ip, r2, r7
9001cb4a:	f2c0 80b6 	blt.w	9001ccba <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c0>
9001cb4e:	45b3      	cmp	fp, r6
9001cb50:	f340 80b3 	ble.w	9001ccba <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c0>
9001cb54:	2800      	cmp	r0, #0
9001cb56:	f2c0 80ae 	blt.w	9001ccb6 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1bc>
9001cb5a:	4581      	cmp	r9, r0
9001cb5c:	f340 80ab 	ble.w	9001ccb6 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1bc>
9001cb60:	5dd7      	ldrb	r7, [r2, r7]
9001cb62:	eb07 0747 	add.w	r7, r7, r7, lsl #1
9001cb66:	441f      	add	r7, r3
9001cb68:	1c42      	adds	r2, r0, #1
9001cb6a:	f100 80a9 	bmi.w	9001ccc0 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c6>
9001cb6e:	4591      	cmp	r9, r2
9001cb70:	f340 80a6 	ble.w	9001ccc0 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c6>
9001cb74:	2c00      	cmp	r4, #0
9001cb76:	f000 80a3 	beq.w	9001ccc0 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c6>
9001cb7a:	f89c 5001 	ldrb.w	r5, [ip, #1]
9001cb7e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
9001cb82:	441d      	add	r5, r3
9001cb84:	3601      	adds	r6, #1
9001cb86:	f100 809f 	bmi.w	9001ccc8 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ce>
9001cb8a:	45b3      	cmp	fp, r6
9001cb8c:	f340 809c 	ble.w	9001ccc8 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ce>
9001cb90:	f1be 0f00 	cmp.w	lr, #0
9001cb94:	f000 8098 	beq.w	9001ccc8 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ce>
9001cb98:	2800      	cmp	r0, #0
9001cb9a:	f2c0 8093 	blt.w	9001ccc4 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ca>
9001cb9e:	4581      	cmp	r9, r0
9001cba0:	f340 8090 	ble.w	9001ccc4 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ca>
9001cba4:	f81c 6009 	ldrb.w	r6, [ip, r9]
9001cba8:	eb06 0646 	add.w	r6, r6, r6, lsl #1
9001cbac:	441e      	add	r6, r3
9001cbae:	3001      	adds	r0, #1
9001cbb0:	f100 808d 	bmi.w	9001ccce <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1d4>
9001cbb4:	4581      	cmp	r9, r0
9001cbb6:	f340 808a 	ble.w	9001ccce <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1d4>
9001cbba:	2c00      	cmp	r4, #0
9001cbbc:	f000 8087 	beq.w	9001ccce <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1d4>
9001cbc0:	44e1      	add	r9, ip
9001cbc2:	f899 2001 	ldrb.w	r2, [r9, #1]
9001cbc6:	eb02 0242 	add.w	r2, r2, r2, lsl #1
9001cbca:	4413      	add	r3, r2
9001cbcc:	b2a4      	uxth	r4, r4
9001cbce:	f897 c002 	ldrb.w	ip, [r7, #2]
9001cbd2:	fa1f fe8e 	uxth.w	lr, lr
9001cbd6:	9901      	ldr	r1, [sp, #4]
9001cbd8:	fb04 fb0e 	mul.w	fp, r4, lr
9001cbdc:	0124      	lsls	r4, r4, #4
9001cbde:	ebcb 1e0e 	rsb	lr, fp, lr, lsl #4
9001cbe2:	f5c4 7980 	rsb	r9, r4, #256	; 0x100
9001cbe6:	eba4 040b 	sub.w	r4, r4, fp
9001cbea:	fa1f f08e 	uxth.w	r0, lr
9001cbee:	b2a2      	uxth	r2, r4
9001cbf0:	78ac      	ldrb	r4, [r5, #2]
9001cbf2:	eba9 0900 	sub.w	r9, r9, r0
9001cbf6:	fa1f fe88 	uxth.w	lr, r8
9001cbfa:	4354      	muls	r4, r2
9001cbfc:	ea6f 0808 	mvn.w	r8, r8
9001cc00:	fa1f f989 	uxth.w	r9, r9
9001cc04:	fa5f f888 	uxtb.w	r8, r8
9001cc08:	fb09 440c 	mla	r4, r9, ip, r4
9001cc0c:	f896 c002 	ldrb.w	ip, [r6, #2]
9001cc10:	fb1a fa08 	smulbb	sl, sl, r8
9001cc14:	fb00 440c 	mla	r4, r0, ip, r4
9001cc18:	f893 c002 	ldrb.w	ip, [r3, #2]
9001cc1c:	fb0b 4c0c 	mla	ip, fp, ip, r4
9001cc20:	787c      	ldrb	r4, [r7, #1]
9001cc22:	783f      	ldrb	r7, [r7, #0]
9001cc24:	f3cc 2c07 	ubfx	ip, ip, #8, #8
9001cc28:	fb0c ac0e 	mla	ip, ip, lr, sl
9001cc2c:	f895 a001 	ldrb.w	sl, [r5, #1]
9001cc30:	782d      	ldrb	r5, [r5, #0]
9001cc32:	fb02 fa0a 	mul.w	sl, r2, sl
9001cc36:	fa1f fc8c 	uxth.w	ip, ip
9001cc3a:	436a      	muls	r2, r5
9001cc3c:	7835      	ldrb	r5, [r6, #0]
9001cc3e:	fb09 aa04 	mla	sl, r9, r4, sl
9001cc42:	7874      	ldrb	r4, [r6, #1]
9001cc44:	fb09 2207 	mla	r2, r9, r7, r2
9001cc48:	fb00 aa04 	mla	sl, r0, r4, sl
9001cc4c:	785c      	ldrb	r4, [r3, #1]
9001cc4e:	fb00 2005 	mla	r0, r0, r5, r2
9001cc52:	781b      	ldrb	r3, [r3, #0]
9001cc54:	fb0b a404 	mla	r4, fp, r4, sl
9001cc58:	fb11 fa08 	smulbb	sl, r1, r8
9001cc5c:	fb0b 0b03 	mla	fp, fp, r3, r0
9001cc60:	9b02      	ldr	r3, [sp, #8]
9001cc62:	f3c4 2407 	ubfx	r4, r4, #8, #8
9001cc66:	fb13 f808 	smulbb	r8, r3, r8
9001cc6a:	f3cb 2b07 	ubfx	fp, fp, #8, #8
9001cc6e:	fb04 a40e 	mla	r4, r4, lr, sl
9001cc72:	f10c 0301 	add.w	r3, ip, #1
9001cc76:	fb0b 8e0e 	mla	lr, fp, lr, r8
9001cc7a:	b2a4      	uxth	r4, r4
9001cc7c:	fa1f fe8e 	uxth.w	lr, lr
9001cc80:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
9001cc84:	f104 0a01 	add.w	sl, r4, #1
9001cc88:	f40c 4378 	and.w	r3, ip, #63488	; 0xf800
9001cc8c:	f10e 0c01 	add.w	ip, lr, #1
9001cc90:	eb0a 2414 	add.w	r4, sl, r4, lsr #8
9001cc94:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
9001cc98:	0964      	lsrs	r4, r4, #5
9001cc9a:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
9001cc9e:	f404 64fc 	and.w	r4, r4, #2016	; 0x7e0
9001cca2:	ea4c 0c03 	orr.w	ip, ip, r3
9001cca6:	9b03      	ldr	r3, [sp, #12]
9001cca8:	ea4c 0c04 	orr.w	ip, ip, r4
9001ccac:	f8a3 c000 	strh.w	ip, [r3]
9001ccb0:	b007      	add	sp, #28
9001ccb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9001ccb6:	af05      	add	r7, sp, #20
9001ccb8:	e756      	b.n	9001cb68 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x6e>
9001ccba:	ad05      	add	r5, sp, #20
9001ccbc:	462f      	mov	r7, r5
9001ccbe:	e761      	b.n	9001cb84 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x8a>
9001ccc0:	ad05      	add	r5, sp, #20
9001ccc2:	e75f      	b.n	9001cb84 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x8a>
9001ccc4:	ae05      	add	r6, sp, #20
9001ccc6:	e772      	b.n	9001cbae <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xb4>
9001ccc8:	ab05      	add	r3, sp, #20
9001ccca:	461e      	mov	r6, r3
9001cccc:	e77e      	b.n	9001cbcc <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xd2>
9001ccce:	ab05      	add	r3, sp, #20
9001ccd0:	e77c      	b.n	9001cbcc <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xd2>

9001ccd2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
9001ccd2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001ccd6:	b095      	sub	sp, #84	; 0x54
9001ccd8:	9212      	str	r2, [sp, #72]	; 0x48
9001ccda:	9309      	str	r3, [sp, #36]	; 0x24
9001ccdc:	9a23      	ldr	r2, [sp, #140]	; 0x8c
9001ccde:	f89d 309c 	ldrb.w	r3, [sp, #156]	; 0x9c
9001cce2:	9013      	str	r0, [sp, #76]	; 0x4c
9001cce4:	930f      	str	r3, [sp, #60]	; 0x3c
9001cce6:	6850      	ldr	r0, [r2, #4]
9001cce8:	910e      	str	r1, [sp, #56]	; 0x38
9001ccea:	6812      	ldr	r2, [r2, #0]
9001ccec:	e9dd 1324 	ldrd	r1, r3, [sp, #144]	; 0x90
9001ccf0:	fb00 1303 	mla	r3, r0, r3, r1
9001ccf4:	eb02 0343 	add.w	r3, r2, r3, lsl #1
9001ccf8:	930a      	str	r3, [sp, #40]	; 0x28
9001ccfa:	9b26      	ldr	r3, [sp, #152]	; 0x98
9001ccfc:	681b      	ldr	r3, [r3, #0]
9001ccfe:	930d      	str	r3, [sp, #52]	; 0x34
9001cd00:	9b26      	ldr	r3, [sp, #152]	; 0x98
9001cd02:	685c      	ldr	r4, [r3, #4]
9001cd04:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
9001cd06:	3404      	adds	r4, #4
9001cd08:	43db      	mvns	r3, r3
9001cd0a:	b2db      	uxtb	r3, r3
9001cd0c:	930b      	str	r3, [sp, #44]	; 0x2c
9001cd0e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
9001cd10:	2b00      	cmp	r3, #0
9001cd12:	dc03      	bgt.n	9001cd1c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
9001cd14:	9b12      	ldr	r3, [sp, #72]	; 0x48
9001cd16:	2b00      	cmp	r3, #0
9001cd18:	f340 8255 	ble.w	9001d1c6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f4>
9001cd1c:	9b26      	ldr	r3, [sp, #152]	; 0x98
9001cd1e:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
9001cd22:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
9001cd26:	1e48      	subs	r0, r1, #1
9001cd28:	1e55      	subs	r5, r2, #1
9001cd2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
9001cd2c:	2b00      	cmp	r3, #0
9001cd2e:	f340 80f9 	ble.w	9001cf24 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
9001cd32:	9e1f      	ldr	r6, [sp, #124]	; 0x7c
9001cd34:	9b20      	ldr	r3, [sp, #128]	; 0x80
9001cd36:	1436      	asrs	r6, r6, #16
9001cd38:	ea4f 4323 	mov.w	r3, r3, asr #16
9001cd3c:	d406      	bmi.n	9001cd4c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
9001cd3e:	4286      	cmp	r6, r0
9001cd40:	da04      	bge.n	9001cd4c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
9001cd42:	2b00      	cmp	r3, #0
9001cd44:	db02      	blt.n	9001cd4c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
9001cd46:	42ab      	cmp	r3, r5
9001cd48:	f2c0 80ed 	blt.w	9001cf26 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x254>
9001cd4c:	3601      	adds	r6, #1
9001cd4e:	f100 80da 	bmi.w	9001cf06 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
9001cd52:	42b1      	cmp	r1, r6
9001cd54:	f2c0 80d7 	blt.w	9001cf06 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
9001cd58:	3301      	adds	r3, #1
9001cd5a:	f100 80d4 	bmi.w	9001cf06 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
9001cd5e:	429a      	cmp	r2, r3
9001cd60:	f2c0 80d1 	blt.w	9001cf06 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
9001cd64:	9b09      	ldr	r3, [sp, #36]	; 0x24
9001cd66:	9311      	str	r3, [sp, #68]	; 0x44
9001cd68:	9b0a      	ldr	r3, [sp, #40]	; 0x28
9001cd6a:	930c      	str	r3, [sp, #48]	; 0x30
9001cd6c:	9b11      	ldr	r3, [sp, #68]	; 0x44
9001cd6e:	2b00      	cmp	r3, #0
9001cd70:	f340 80fa 	ble.w	9001cf68 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
9001cd74:	9826      	ldr	r0, [sp, #152]	; 0x98
9001cd76:	9b20      	ldr	r3, [sp, #128]	; 0x80
9001cd78:	9a20      	ldr	r2, [sp, #128]	; 0x80
9001cd7a:	68c6      	ldr	r6, [r0, #12]
9001cd7c:	141d      	asrs	r5, r3, #16
9001cd7e:	981f      	ldr	r0, [sp, #124]	; 0x7c
9001cd80:	f3c2 3103 	ubfx	r1, r2, #12, #4
9001cd84:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
9001cd86:	9a26      	ldr	r2, [sp, #152]	; 0x98
9001cd88:	1400      	asrs	r0, r0, #16
9001cd8a:	f3c3 3303 	ubfx	r3, r3, #12, #4
9001cd8e:	6892      	ldr	r2, [r2, #8]
9001cd90:	f100 813e 	bmi.w	9001d010 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
9001cd94:	1e57      	subs	r7, r2, #1
9001cd96:	42b8      	cmp	r0, r7
9001cd98:	f280 813a 	bge.w	9001d010 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
9001cd9c:	2d00      	cmp	r5, #0
9001cd9e:	f2c0 8137 	blt.w	9001d010 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
9001cda2:	1e77      	subs	r7, r6, #1
9001cda4:	42bd      	cmp	r5, r7
9001cda6:	f280 8133 	bge.w	9001d010 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
9001cdaa:	b212      	sxth	r2, r2
9001cdac:	fb05 0002 	mla	r0, r5, r2, r0
9001cdb0:	9d0d      	ldr	r5, [sp, #52]	; 0x34
9001cdb2:	f815 a000 	ldrb.w	sl, [r5, r0]
9001cdb6:	182e      	adds	r6, r5, r0
9001cdb8:	eb0a 0a4a 	add.w	sl, sl, sl, lsl #1
9001cdbc:	eb04 050a 	add.w	r5, r4, sl
9001cdc0:	2b00      	cmp	r3, #0
9001cdc2:	f000 8117 	beq.w	9001cff4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
9001cdc6:	f896 c001 	ldrb.w	ip, [r6, #1]
9001cdca:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
9001cdce:	44a4      	add	ip, r4
9001cdd0:	2900      	cmp	r1, #0
9001cdd2:	f000 8117 	beq.w	9001d004 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
9001cdd6:	18b0      	adds	r0, r6, r2
9001cdd8:	5cb2      	ldrb	r2, [r6, r2]
9001cdda:	7840      	ldrb	r0, [r0, #1]
9001cddc:	eb02 0242 	add.w	r2, r2, r2, lsl #1
9001cde0:	eb00 0040 	add.w	r0, r0, r0, lsl #1
9001cde4:	4422      	add	r2, r4
9001cde6:	4420      	add	r0, r4
9001cde8:	b29b      	uxth	r3, r3
9001cdea:	f89c 7002 	ldrb.w	r7, [ip, #2]
9001cdee:	b289      	uxth	r1, r1
9001cdf0:	f895 b002 	ldrb.w	fp, [r5, #2]
9001cdf4:	9e0c      	ldr	r6, [sp, #48]	; 0x30
9001cdf6:	fb03 f901 	mul.w	r9, r3, r1
9001cdfa:	011b      	lsls	r3, r3, #4
9001cdfc:	f8b6 e000 	ldrh.w	lr, [r6]
9001ce00:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
9001ce04:	f5c3 7880 	rsb	r8, r3, #256	; 0x100
9001ce08:	eba3 0309 	sub.w	r3, r3, r9
9001ce0c:	f8bd 603c 	ldrh.w	r6, [sp, #60]	; 0x3c
9001ce10:	b289      	uxth	r1, r1
9001ce12:	f814 a00a 	ldrb.w	sl, [r4, sl]
9001ce16:	b29b      	uxth	r3, r3
9001ce18:	eba8 0801 	sub.w	r8, r8, r1
9001ce1c:	435f      	muls	r7, r3
9001ce1e:	fa1f f888 	uxth.w	r8, r8
9001ce22:	9310      	str	r3, [sp, #64]	; 0x40
9001ce24:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
9001ce26:	fb08 770b 	mla	r7, r8, fp, r7
9001ce2a:	f892 b002 	ldrb.w	fp, [r2, #2]
9001ce2e:	fb01 770b 	mla	r7, r1, fp, r7
9001ce32:	f890 b002 	ldrb.w	fp, [r0, #2]
9001ce36:	fb09 770b 	mla	r7, r9, fp, r7
9001ce3a:	ea4f 2b2e 	mov.w	fp, lr, asr #8
9001ce3e:	f00b 0bf8 	and.w	fp, fp, #248	; 0xf8
9001ce42:	f3c7 2707 	ubfx	r7, r7, #8, #8
9001ce46:	fb1b fb03 	smulbb	fp, fp, r3
9001ce4a:	9b10      	ldr	r3, [sp, #64]	; 0x40
9001ce4c:	fb07 b706 	mla	r7, r7, r6, fp
9001ce50:	f895 b001 	ldrb.w	fp, [r5, #1]
9001ce54:	f89c 5001 	ldrb.w	r5, [ip, #1]
9001ce58:	f89c c000 	ldrb.w	ip, [ip]
9001ce5c:	b2bf      	uxth	r7, r7
9001ce5e:	435d      	muls	r5, r3
9001ce60:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
9001ce62:	fb08 550b 	mla	r5, r8, fp, r5
9001ce66:	f892 b001 	ldrb.w	fp, [r2, #1]
9001ce6a:	fb01 550b 	mla	r5, r1, fp, r5
9001ce6e:	f890 b001 	ldrb.w	fp, [r0, #1]
9001ce72:	fb09 550b 	mla	r5, r9, fp, r5
9001ce76:	ea4f 0bee 	mov.w	fp, lr, asr #3
9001ce7a:	ea4f 0ece 	mov.w	lr, lr, lsl #3
9001ce7e:	f00b 0bfc 	and.w	fp, fp, #252	; 0xfc
9001ce82:	f3c5 2507 	ubfx	r5, r5, #8, #8
9001ce86:	fa5f fe8e 	uxtb.w	lr, lr
9001ce8a:	fb1b fb03 	smulbb	fp, fp, r3
9001ce8e:	9b10      	ldr	r3, [sp, #64]	; 0x40
9001ce90:	fb03 f30c 	mul.w	r3, r3, ip
9001ce94:	f892 c000 	ldrb.w	ip, [r2]
9001ce98:	fb05 b506 	mla	r5, r5, r6, fp
9001ce9c:	fb08 330a 	mla	r3, r8, sl, r3
9001cea0:	b2ad      	uxth	r5, r5
9001cea2:	fb01 330c 	mla	r3, r1, ip, r3
9001cea6:	f890 c000 	ldrb.w	ip, [r0]
9001ceaa:	f105 0b01 	add.w	fp, r5, #1
9001ceae:	fb09 3c0c 	mla	ip, r9, ip, r3
9001ceb2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
9001ceb4:	eb0b 2515 	add.w	r5, fp, r5, lsr #8
9001ceb8:	fb1e fe03 	smulbb	lr, lr, r3
9001cebc:	f3cc 2c07 	ubfx	ip, ip, #8, #8
9001cec0:	1c7b      	adds	r3, r7, #1
9001cec2:	096d      	lsrs	r5, r5, #5
9001cec4:	fb0c e606 	mla	r6, ip, r6, lr
9001cec8:	eb03 2717 	add.w	r7, r3, r7, lsr #8
9001cecc:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
9001ced0:	b2b6      	uxth	r6, r6
9001ced2:	f407 4378 	and.w	r3, r7, #63488	; 0xf800
9001ced6:	1c77      	adds	r7, r6, #1
9001ced8:	eb07 2716 	add.w	r7, r7, r6, lsr #8
9001cedc:	f3c7 27c4 	ubfx	r7, r7, #11, #5
9001cee0:	431f      	orrs	r7, r3
9001cee2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
9001cee4:	433d      	orrs	r5, r7
9001cee6:	801d      	strh	r5, [r3, #0]
9001cee8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
9001ceea:	9a21      	ldr	r2, [sp, #132]	; 0x84
9001ceec:	3302      	adds	r3, #2
9001ceee:	930c      	str	r3, [sp, #48]	; 0x30
9001cef0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
9001cef2:	4413      	add	r3, r2
9001cef4:	9a22      	ldr	r2, [sp, #136]	; 0x88
9001cef6:	931f      	str	r3, [sp, #124]	; 0x7c
9001cef8:	9b20      	ldr	r3, [sp, #128]	; 0x80
9001cefa:	4413      	add	r3, r2
9001cefc:	9320      	str	r3, [sp, #128]	; 0x80
9001cefe:	9b11      	ldr	r3, [sp, #68]	; 0x44
9001cf00:	3b01      	subs	r3, #1
9001cf02:	9311      	str	r3, [sp, #68]	; 0x44
9001cf04:	e732      	b.n	9001cd6c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
9001cf06:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
9001cf08:	9e21      	ldr	r6, [sp, #132]	; 0x84
9001cf0a:	4433      	add	r3, r6
9001cf0c:	9e22      	ldr	r6, [sp, #136]	; 0x88
9001cf0e:	931f      	str	r3, [sp, #124]	; 0x7c
9001cf10:	9b20      	ldr	r3, [sp, #128]	; 0x80
9001cf12:	4433      	add	r3, r6
9001cf14:	9320      	str	r3, [sp, #128]	; 0x80
9001cf16:	9b09      	ldr	r3, [sp, #36]	; 0x24
9001cf18:	3b01      	subs	r3, #1
9001cf1a:	9309      	str	r3, [sp, #36]	; 0x24
9001cf1c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
9001cf1e:	3302      	adds	r3, #2
9001cf20:	930a      	str	r3, [sp, #40]	; 0x28
9001cf22:	e702      	b.n	9001cd2a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
9001cf24:	d027      	beq.n	9001cf76 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a4>
9001cf26:	9b09      	ldr	r3, [sp, #36]	; 0x24
9001cf28:	9821      	ldr	r0, [sp, #132]	; 0x84
9001cf2a:	3b01      	subs	r3, #1
9001cf2c:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
9001cf2e:	fb00 5003 	mla	r0, r0, r3, r5
9001cf32:	1400      	asrs	r0, r0, #16
9001cf34:	f53f af16 	bmi.w	9001cd64 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
9001cf38:	3901      	subs	r1, #1
9001cf3a:	4288      	cmp	r0, r1
9001cf3c:	f6bf af12 	bge.w	9001cd64 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
9001cf40:	9922      	ldr	r1, [sp, #136]	; 0x88
9001cf42:	9820      	ldr	r0, [sp, #128]	; 0x80
9001cf44:	fb01 0303 	mla	r3, r1, r3, r0
9001cf48:	141b      	asrs	r3, r3, #16
9001cf4a:	f53f af0b 	bmi.w	9001cd64 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
9001cf4e:	3a01      	subs	r2, #1
9001cf50:	4293      	cmp	r3, r2
9001cf52:	f6bf af07 	bge.w	9001cd64 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
9001cf56:	9b09      	ldr	r3, [sp, #36]	; 0x24
9001cf58:	f8bd a03c 	ldrh.w	sl, [sp, #60]	; 0x3c
9001cf5c:	9311      	str	r3, [sp, #68]	; 0x44
9001cf5e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
9001cf60:	930c      	str	r3, [sp, #48]	; 0x30
9001cf62:	9b11      	ldr	r3, [sp, #68]	; 0x44
9001cf64:	2b00      	cmp	r3, #0
9001cf66:	dc70      	bgt.n	9001d04a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x378>
9001cf68:	9b09      	ldr	r3, [sp, #36]	; 0x24
9001cf6a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
9001cf6c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
9001cf70:	eb02 0343 	add.w	r3, r2, r3, lsl #1
9001cf74:	930a      	str	r3, [sp, #40]	; 0x28
9001cf76:	9b0e      	ldr	r3, [sp, #56]	; 0x38
9001cf78:	2b00      	cmp	r3, #0
9001cf7a:	f340 8124 	ble.w	9001d1c6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f4>
9001cf7e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
9001cf82:	9b1e      	ldr	r3, [sp, #120]	; 0x78
9001cf84:	ee30 0a04 	vadd.f32	s0, s0, s8
9001cf88:	ee70 0aa4 	vadd.f32	s1, s1, s9
9001cf8c:	eef0 6a62 	vmov.f32	s13, s5
9001cf90:	eec7 7a00 	vdiv.f32	s15, s14, s0
9001cf94:	ee31 1a05 	vadd.f32	s2, s2, s10
9001cf98:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
9001cf9c:	edcd 6a1f 	vstr	s13, [sp, #124]	; 0x7c
9001cfa0:	eef0 6a43 	vmov.f32	s13, s6
9001cfa4:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
9001cfa8:	edcd 6a20 	vstr	s13, [sp, #128]	; 0x80
9001cfac:	ee20 7aa7 	vmul.f32	s14, s1, s15
9001cfb0:	ee61 7a27 	vmul.f32	s15, s2, s15
9001cfb4:	ee77 2a62 	vsub.f32	s5, s14, s5
9001cfb8:	ee37 3ac3 	vsub.f32	s6, s15, s6
9001cfbc:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
9001cfc0:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
9001cfc4:	ee12 2a90 	vmov	r2, s5
9001cfc8:	eef0 2a47 	vmov.f32	s5, s14
9001cfcc:	fb92 f3f3 	sdiv	r3, r2, r3
9001cfd0:	ee13 2a10 	vmov	r2, s6
9001cfd4:	9321      	str	r3, [sp, #132]	; 0x84
9001cfd6:	9b1e      	ldr	r3, [sp, #120]	; 0x78
9001cfd8:	eeb0 3a67 	vmov.f32	s6, s15
9001cfdc:	fb92 f3f3 	sdiv	r3, r2, r3
9001cfe0:	9322      	str	r3, [sp, #136]	; 0x88
9001cfe2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
9001cfe4:	9a12      	ldr	r2, [sp, #72]	; 0x48
9001cfe6:	3b01      	subs	r3, #1
9001cfe8:	930e      	str	r3, [sp, #56]	; 0x38
9001cfea:	9b1e      	ldr	r3, [sp, #120]	; 0x78
9001cfec:	bf08      	it	eq
9001cfee:	4613      	moveq	r3, r2
9001cff0:	9309      	str	r3, [sp, #36]	; 0x24
9001cff2:	e68c      	b.n	9001cd0e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
9001cff4:	b149      	cbz	r1, 9001d00a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x338>
9001cff6:	5cb2      	ldrb	r2, [r6, r2]
9001cff8:	4628      	mov	r0, r5
9001cffa:	eb02 0242 	add.w	r2, r2, r2, lsl #1
9001cffe:	4422      	add	r2, r4
9001d000:	46ac      	mov	ip, r5
9001d002:	e6f1      	b.n	9001cde8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
9001d004:	4628      	mov	r0, r5
9001d006:	462a      	mov	r2, r5
9001d008:	e6ee      	b.n	9001cde8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
9001d00a:	4628      	mov	r0, r5
9001d00c:	462a      	mov	r2, r5
9001d00e:	e7f7      	b.n	9001d000 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32e>
9001d010:	1c47      	adds	r7, r0, #1
9001d012:	f53f af69 	bmi.w	9001cee8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
9001d016:	42ba      	cmp	r2, r7
9001d018:	f6ff af66 	blt.w	9001cee8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
9001d01c:	1c6f      	adds	r7, r5, #1
9001d01e:	f53f af63 	bmi.w	9001cee8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
9001d022:	42be      	cmp	r6, r7
9001d024:	f6ff af60 	blt.w	9001cee8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
9001d028:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
9001d02a:	b236      	sxth	r6, r6
9001d02c:	b212      	sxth	r2, r2
9001d02e:	9002      	str	r0, [sp, #8]
9001d030:	9601      	str	r6, [sp, #4]
9001d032:	9200      	str	r2, [sp, #0]
9001d034:	9813      	ldr	r0, [sp, #76]	; 0x4c
9001d036:	e9cd 1705 	strd	r1, r7, [sp, #20]
9001d03a:	e9cd 5303 	strd	r5, r3, [sp, #12]
9001d03e:	e9dd 120c 	ldrd	r1, r2, [sp, #48]	; 0x30
9001d042:	4623      	mov	r3, r4
9001d044:	f7ff fd59 	bl	9001cafa <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh>
9001d048:	e74e      	b.n	9001cee8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
9001d04a:	9a20      	ldr	r2, [sp, #128]	; 0x80
9001d04c:	9820      	ldr	r0, [sp, #128]	; 0x80
9001d04e:	f3c2 3103 	ubfx	r1, r2, #12, #4
9001d052:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
9001d054:	9a26      	ldr	r2, [sp, #152]	; 0x98
9001d056:	1400      	asrs	r0, r0, #16
9001d058:	142d      	asrs	r5, r5, #16
9001d05a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
9001d05c:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
9001d060:	f3c3 3303 	ubfx	r3, r3, #12, #4
9001d064:	fb02 5000 	mla	r0, r2, r0, r5
9001d068:	9d0d      	ldr	r5, [sp, #52]	; 0x34
9001d06a:	f815 9000 	ldrb.w	r9, [r5, r0]
9001d06e:	182e      	adds	r6, r5, r0
9001d070:	eb09 0949 	add.w	r9, r9, r9, lsl #1
9001d074:	eb04 0509 	add.w	r5, r4, r9
9001d078:	2b00      	cmp	r3, #0
9001d07a:	f000 8096 	beq.w	9001d1aa <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d8>
9001d07e:	7877      	ldrb	r7, [r6, #1]
9001d080:	eb07 0747 	add.w	r7, r7, r7, lsl #1
9001d084:	4427      	add	r7, r4
9001d086:	2900      	cmp	r1, #0
9001d088:	f000 8097 	beq.w	9001d1ba <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e8>
9001d08c:	18b0      	adds	r0, r6, r2
9001d08e:	5cb2      	ldrb	r2, [r6, r2]
9001d090:	7840      	ldrb	r0, [r0, #1]
9001d092:	eb02 0242 	add.w	r2, r2, r2, lsl #1
9001d096:	eb00 0040 	add.w	r0, r0, r0, lsl #1
9001d09a:	4422      	add	r2, r4
9001d09c:	4420      	add	r0, r4
9001d09e:	b29b      	uxth	r3, r3
9001d0a0:	9e0c      	ldr	r6, [sp, #48]	; 0x30
9001d0a2:	b289      	uxth	r1, r1
9001d0a4:	f895 b002 	ldrb.w	fp, [r5, #2]
9001d0a8:	f8b6 c000 	ldrh.w	ip, [r6]
9001d0ac:	fb03 f801 	mul.w	r8, r3, r1
9001d0b0:	011b      	lsls	r3, r3, #4
9001d0b2:	78be      	ldrb	r6, [r7, #2]
9001d0b4:	ebc8 1101 	rsb	r1, r8, r1, lsl #4
9001d0b8:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
9001d0bc:	eba3 0308 	sub.w	r3, r3, r8
9001d0c0:	f814 9009 	ldrb.w	r9, [r4, r9]
9001d0c4:	b289      	uxth	r1, r1
9001d0c6:	b29b      	uxth	r3, r3
9001d0c8:	ebae 0e01 	sub.w	lr, lr, r1
9001d0cc:	435e      	muls	r6, r3
9001d0ce:	fa1f fe8e 	uxth.w	lr, lr
9001d0d2:	9310      	str	r3, [sp, #64]	; 0x40
9001d0d4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
9001d0d6:	fb0e 660b 	mla	r6, lr, fp, r6
9001d0da:	f892 b002 	ldrb.w	fp, [r2, #2]
9001d0de:	fb01 660b 	mla	r6, r1, fp, r6
9001d0e2:	f890 b002 	ldrb.w	fp, [r0, #2]
9001d0e6:	fb08 660b 	mla	r6, r8, fp, r6
9001d0ea:	ea4f 2b2c 	mov.w	fp, ip, asr #8
9001d0ee:	f00b 0bf8 	and.w	fp, fp, #248	; 0xf8
9001d0f2:	f3c6 2607 	ubfx	r6, r6, #8, #8
9001d0f6:	fb1b fb03 	smulbb	fp, fp, r3
9001d0fa:	9b10      	ldr	r3, [sp, #64]	; 0x40
9001d0fc:	fb06 b60a 	mla	r6, r6, sl, fp
9001d100:	f895 b001 	ldrb.w	fp, [r5, #1]
9001d104:	787d      	ldrb	r5, [r7, #1]
9001d106:	783f      	ldrb	r7, [r7, #0]
9001d108:	b2b6      	uxth	r6, r6
9001d10a:	435d      	muls	r5, r3
9001d10c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
9001d10e:	fb0e 550b 	mla	r5, lr, fp, r5
9001d112:	f892 b001 	ldrb.w	fp, [r2, #1]
9001d116:	fb01 550b 	mla	r5, r1, fp, r5
9001d11a:	f890 b001 	ldrb.w	fp, [r0, #1]
9001d11e:	fb08 550b 	mla	r5, r8, fp, r5
9001d122:	ea4f 0bec 	mov.w	fp, ip, asr #3
9001d126:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
9001d12a:	f00b 0bfc 	and.w	fp, fp, #252	; 0xfc
9001d12e:	f3c5 2507 	ubfx	r5, r5, #8, #8
9001d132:	fa5f fc8c 	uxtb.w	ip, ip
9001d136:	fb1b fb03 	smulbb	fp, fp, r3
9001d13a:	9b10      	ldr	r3, [sp, #64]	; 0x40
9001d13c:	437b      	muls	r3, r7
9001d13e:	7817      	ldrb	r7, [r2, #0]
9001d140:	fb05 b50a 	mla	r5, r5, sl, fp
9001d144:	fb0e 3309 	mla	r3, lr, r9, r3
9001d148:	b2ad      	uxth	r5, r5
9001d14a:	fb01 3307 	mla	r3, r1, r7, r3
9001d14e:	7807      	ldrb	r7, [r0, #0]
9001d150:	f105 0b01 	add.w	fp, r5, #1
9001d154:	fb08 3707 	mla	r7, r8, r7, r3
9001d158:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
9001d15a:	eb0b 2515 	add.w	r5, fp, r5, lsr #8
9001d15e:	fb1c fc03 	smulbb	ip, ip, r3
9001d162:	f3c7 2707 	ubfx	r7, r7, #8, #8
9001d166:	1c73      	adds	r3, r6, #1
9001d168:	096d      	lsrs	r5, r5, #5
9001d16a:	fb07 c70a 	mla	r7, r7, sl, ip
9001d16e:	eb03 2616 	add.w	r6, r3, r6, lsr #8
9001d172:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
9001d176:	b2bf      	uxth	r7, r7
9001d178:	9b0c      	ldr	r3, [sp, #48]	; 0x30
9001d17a:	f406 4678 	and.w	r6, r6, #63488	; 0xf800
9001d17e:	1c7a      	adds	r2, r7, #1
9001d180:	eb02 2217 	add.w	r2, r2, r7, lsr #8
9001d184:	f3c2 22c4 	ubfx	r2, r2, #11, #5
9001d188:	4316      	orrs	r6, r2
9001d18a:	9a21      	ldr	r2, [sp, #132]	; 0x84
9001d18c:	432e      	orrs	r6, r5
9001d18e:	f823 6b02 	strh.w	r6, [r3], #2
9001d192:	930c      	str	r3, [sp, #48]	; 0x30
9001d194:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
9001d196:	4413      	add	r3, r2
9001d198:	9a22      	ldr	r2, [sp, #136]	; 0x88
9001d19a:	931f      	str	r3, [sp, #124]	; 0x7c
9001d19c:	9b20      	ldr	r3, [sp, #128]	; 0x80
9001d19e:	4413      	add	r3, r2
9001d1a0:	9320      	str	r3, [sp, #128]	; 0x80
9001d1a2:	9b11      	ldr	r3, [sp, #68]	; 0x44
9001d1a4:	3b01      	subs	r3, #1
9001d1a6:	9311      	str	r3, [sp, #68]	; 0x44
9001d1a8:	e6db      	b.n	9001cf62 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x290>
9001d1aa:	b149      	cbz	r1, 9001d1c0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ee>
9001d1ac:	5cb2      	ldrb	r2, [r6, r2]
9001d1ae:	4628      	mov	r0, r5
9001d1b0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
9001d1b4:	4422      	add	r2, r4
9001d1b6:	462f      	mov	r7, r5
9001d1b8:	e771      	b.n	9001d09e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3cc>
9001d1ba:	4628      	mov	r0, r5
9001d1bc:	462a      	mov	r2, r5
9001d1be:	e76e      	b.n	9001d09e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3cc>
9001d1c0:	4628      	mov	r0, r5
9001d1c2:	462a      	mov	r2, r5
9001d1c4:	e7f7      	b.n	9001d1b6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
9001d1c6:	b015      	add	sp, #84	; 0x54
9001d1c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

9001d1cc <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh>:
9001d1cc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001d1d0:	880f      	ldrh	r7, [r1, #0]
9001d1d2:	f9bd e030 	ldrsh.w	lr, [sp, #48]	; 0x30
9001d1d6:	023c      	lsls	r4, r7, #8
9001d1d8:	f9bd 9034 	ldrsh.w	r9, [sp, #52]	; 0x34
9001d1dc:	f89d 0040 	ldrb.w	r0, [sp, #64]	; 0x40
9001d1e0:	f404 0b78 	and.w	fp, r4, #16252928	; 0xf80000
9001d1e4:	017c      	lsls	r4, r7, #5
9001d1e6:	00ff      	lsls	r7, r7, #3
9001d1e8:	f89d 6044 	ldrb.w	r6, [sp, #68]	; 0x44
9001d1ec:	f404 447c 	and.w	r4, r4, #64512	; 0xfc00
9001d1f0:	b2ff      	uxtb	r7, r7
9001d1f2:	ea4b 0404 	orr.w	r4, fp, r4
9001d1f6:	e9dd c50e 	ldrd	ip, r5, [sp, #56]	; 0x38
9001d1fa:	4327      	orrs	r7, r4
9001d1fc:	fb05 ca0e 	mla	sl, r5, lr, ip
9001d200:	2d00      	cmp	r5, #0
9001d202:	9701      	str	r7, [sp, #4]
9001d204:	eb02 080a 	add.w	r8, r2, sl
9001d208:	db7e      	blt.n	9001d308 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x13c>
9001d20a:	45a9      	cmp	r9, r5
9001d20c:	dd7c      	ble.n	9001d308 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x13c>
9001d20e:	f1bc 0f00 	cmp.w	ip, #0
9001d212:	db77      	blt.n	9001d304 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x138>
9001d214:	45e6      	cmp	lr, ip
9001d216:	dd75      	ble.n	9001d304 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x138>
9001d218:	f812 700a 	ldrb.w	r7, [r2, sl]
9001d21c:	eb07 0747 	add.w	r7, r7, r7, lsl #1
9001d220:	441f      	add	r7, r3
9001d222:	f11c 0201 	adds.w	r2, ip, #1
9001d226:	d472      	bmi.n	9001d30e <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x142>
9001d228:	4596      	cmp	lr, r2
9001d22a:	dd70      	ble.n	9001d30e <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x142>
9001d22c:	2800      	cmp	r0, #0
9001d22e:	d06e      	beq.n	9001d30e <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x142>
9001d230:	f898 4001 	ldrb.w	r4, [r8, #1]
9001d234:	eb04 0444 	add.w	r4, r4, r4, lsl #1
9001d238:	441c      	add	r4, r3
9001d23a:	3501      	adds	r5, #1
9001d23c:	d46b      	bmi.n	9001d316 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x14a>
9001d23e:	45a9      	cmp	r9, r5
9001d240:	dd69      	ble.n	9001d316 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x14a>
9001d242:	2e00      	cmp	r6, #0
9001d244:	d067      	beq.n	9001d316 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x14a>
9001d246:	f1bc 0f00 	cmp.w	ip, #0
9001d24a:	db62      	blt.n	9001d312 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x146>
9001d24c:	45e6      	cmp	lr, ip
9001d24e:	dd60      	ble.n	9001d312 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x146>
9001d250:	f818 500e 	ldrb.w	r5, [r8, lr]
9001d254:	eb05 0545 	add.w	r5, r5, r5, lsl #1
9001d258:	441d      	add	r5, r3
9001d25a:	f11c 0201 	adds.w	r2, ip, #1
9001d25e:	d45d      	bmi.n	9001d31c <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x150>
9001d260:	4596      	cmp	lr, r2
9001d262:	dd5b      	ble.n	9001d31c <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x150>
9001d264:	2800      	cmp	r0, #0
9001d266:	d059      	beq.n	9001d31c <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x150>
9001d268:	44c6      	add	lr, r8
9001d26a:	f89e 2001 	ldrb.w	r2, [lr, #1]
9001d26e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
9001d272:	4413      	add	r3, r2
9001d274:	b280      	uxth	r0, r0
9001d276:	f897 e002 	ldrb.w	lr, [r7, #2]
9001d27a:	b2b2      	uxth	r2, r6
9001d27c:	f897 9000 	ldrb.w	r9, [r7]
9001d280:	787f      	ldrb	r7, [r7, #1]
9001d282:	fb00 f602 	mul.w	r6, r0, r2
9001d286:	0100      	lsls	r0, r0, #4
9001d288:	ebc6 1202 	rsb	r2, r6, r2, lsl #4
9001d28c:	f5c0 7880 	rsb	r8, r0, #256	; 0x100
9001d290:	1b80      	subs	r0, r0, r6
9001d292:	fa1f fc82 	uxth.w	ip, r2
9001d296:	b282      	uxth	r2, r0
9001d298:	78a0      	ldrb	r0, [r4, #2]
9001d29a:	eba8 080c 	sub.w	r8, r8, ip
9001d29e:	4350      	muls	r0, r2
9001d2a0:	fa1f f888 	uxth.w	r8, r8
9001d2a4:	fb08 0e0e 	mla	lr, r8, lr, r0
9001d2a8:	78a8      	ldrb	r0, [r5, #2]
9001d2aa:	fb0c e000 	mla	r0, ip, r0, lr
9001d2ae:	f893 e002 	ldrb.w	lr, [r3, #2]
9001d2b2:	fb06 0e0e 	mla	lr, r6, lr, r0
9001d2b6:	f40e 4078 	and.w	r0, lr, #63488	; 0xf800
9001d2ba:	f894 e000 	ldrb.w	lr, [r4]
9001d2be:	fb02 fe0e 	mul.w	lr, r2, lr
9001d2c2:	fb08 e909 	mla	r9, r8, r9, lr
9001d2c6:	f895 e000 	ldrb.w	lr, [r5]
9001d2ca:	fb0c 990e 	mla	r9, ip, lr, r9
9001d2ce:	f893 e000 	ldrb.w	lr, [r3]
9001d2d2:	785b      	ldrb	r3, [r3, #1]
9001d2d4:	fb06 9e0e 	mla	lr, r6, lr, r9
9001d2d8:	f3ce 2ec4 	ubfx	lr, lr, #11, #5
9001d2dc:	ea4e 0e00 	orr.w	lr, lr, r0
9001d2e0:	7860      	ldrb	r0, [r4, #1]
9001d2e2:	4350      	muls	r0, r2
9001d2e4:	786a      	ldrb	r2, [r5, #1]
9001d2e6:	fb08 0007 	mla	r0, r8, r7, r0
9001d2ea:	fb0c 0202 	mla	r2, ip, r2, r0
9001d2ee:	fb06 2303 	mla	r3, r6, r3, r2
9001d2f2:	095b      	lsrs	r3, r3, #5
9001d2f4:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
9001d2f8:	ea4e 0303 	orr.w	r3, lr, r3
9001d2fc:	800b      	strh	r3, [r1, #0]
9001d2fe:	b003      	add	sp, #12
9001d300:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9001d304:	af01      	add	r7, sp, #4
9001d306:	e78c      	b.n	9001d222 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x56>
9001d308:	ac01      	add	r4, sp, #4
9001d30a:	4627      	mov	r7, r4
9001d30c:	e795      	b.n	9001d23a <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x6e>
9001d30e:	ac01      	add	r4, sp, #4
9001d310:	e793      	b.n	9001d23a <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x6e>
9001d312:	ad01      	add	r5, sp, #4
9001d314:	e7a1      	b.n	9001d25a <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x8e>
9001d316:	ab01      	add	r3, sp, #4
9001d318:	461d      	mov	r5, r3
9001d31a:	e7ab      	b.n	9001d274 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xa8>
9001d31c:	ab01      	add	r3, sp, #4
9001d31e:	e7a9      	b.n	9001d274 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xa8>

9001d320 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
9001d320:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001d324:	b08f      	sub	sp, #60	; 0x3c
9001d326:	920c      	str	r2, [sp, #48]	; 0x30
9001d328:	9a1d      	ldr	r2, [sp, #116]	; 0x74
9001d32a:	900d      	str	r0, [sp, #52]	; 0x34
9001d32c:	910a      	str	r1, [sp, #40]	; 0x28
9001d32e:	6850      	ldr	r0, [r2, #4]
9001d330:	9306      	str	r3, [sp, #24]
9001d332:	6812      	ldr	r2, [r2, #0]
9001d334:	e9dd 131e 	ldrd	r1, r3, [sp, #120]	; 0x78
9001d338:	e9dd b519 	ldrd	fp, r5, [sp, #100]	; 0x64
9001d33c:	fb00 1303 	mla	r3, r0, r3, r1
9001d340:	eb02 0343 	add.w	r3, r2, r3, lsl #1
9001d344:	9307      	str	r3, [sp, #28]
9001d346:	9b20      	ldr	r3, [sp, #128]	; 0x80
9001d348:	681b      	ldr	r3, [r3, #0]
9001d34a:	9308      	str	r3, [sp, #32]
9001d34c:	9b20      	ldr	r3, [sp, #128]	; 0x80
9001d34e:	685c      	ldr	r4, [r3, #4]
9001d350:	3404      	adds	r4, #4
9001d352:	9b0a      	ldr	r3, [sp, #40]	; 0x28
9001d354:	2b00      	cmp	r3, #0
9001d356:	dc03      	bgt.n	9001d360 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
9001d358:	9b0c      	ldr	r3, [sp, #48]	; 0x30
9001d35a:	2b00      	cmp	r3, #0
9001d35c:	f340 81d5 	ble.w	9001d70a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ea>
9001d360:	9b20      	ldr	r3, [sp, #128]	; 0x80
9001d362:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
9001d366:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
9001d36a:	1e48      	subs	r0, r1, #1
9001d36c:	1e56      	subs	r6, r2, #1
9001d36e:	9b06      	ldr	r3, [sp, #24]
9001d370:	2b00      	cmp	r3, #0
9001d372:	f340 80b6 	ble.w	9001d4e2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
9001d376:	ea5f 472b 	movs.w	r7, fp, asr #16
9001d37a:	ea4f 4325 	mov.w	r3, r5, asr #16
9001d37e:	d406      	bmi.n	9001d38e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
9001d380:	4287      	cmp	r7, r0
9001d382:	da04      	bge.n	9001d38e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
9001d384:	2b00      	cmp	r3, #0
9001d386:	db02      	blt.n	9001d38e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
9001d388:	42b3      	cmp	r3, r6
9001d38a:	f2c0 80ab 	blt.w	9001d4e4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c4>
9001d38e:	3701      	adds	r7, #1
9001d390:	f100 809c 	bmi.w	9001d4cc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
9001d394:	42b9      	cmp	r1, r7
9001d396:	f2c0 8099 	blt.w	9001d4cc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
9001d39a:	3301      	adds	r3, #1
9001d39c:	f100 8096 	bmi.w	9001d4cc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
9001d3a0:	429a      	cmp	r2, r3
9001d3a2:	f2c0 8093 	blt.w	9001d4cc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
9001d3a6:	9b06      	ldr	r3, [sp, #24]
9001d3a8:	930b      	str	r3, [sp, #44]	; 0x2c
9001d3aa:	9b07      	ldr	r3, [sp, #28]
9001d3ac:	9309      	str	r3, [sp, #36]	; 0x24
9001d3ae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
9001d3b0:	2b00      	cmp	r3, #0
9001d3b2:	f340 80b4 	ble.w	9001d51e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fe>
9001d3b6:	9820      	ldr	r0, [sp, #128]	; 0x80
9001d3b8:	142e      	asrs	r6, r5, #16
9001d3ba:	9a20      	ldr	r2, [sp, #128]	; 0x80
9001d3bc:	f3cb 3303 	ubfx	r3, fp, #12, #4
9001d3c0:	68c7      	ldr	r7, [r0, #12]
9001d3c2:	ea5f 402b 	movs.w	r0, fp, asr #16
9001d3c6:	f3c5 3103 	ubfx	r1, r5, #12, #4
9001d3ca:	6892      	ldr	r2, [r2, #8]
9001d3cc:	f100 80fb 	bmi.w	9001d5c6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
9001d3d0:	f102 3cff 	add.w	ip, r2, #4294967295
9001d3d4:	4560      	cmp	r0, ip
9001d3d6:	f280 80f6 	bge.w	9001d5c6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
9001d3da:	2e00      	cmp	r6, #0
9001d3dc:	f2c0 80f3 	blt.w	9001d5c6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
9001d3e0:	f107 3cff 	add.w	ip, r7, #4294967295
9001d3e4:	4566      	cmp	r6, ip
9001d3e6:	f280 80ee 	bge.w	9001d5c6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
9001d3ea:	b212      	sxth	r2, r2
9001d3ec:	fb06 0002 	mla	r0, r6, r2, r0
9001d3f0:	9e08      	ldr	r6, [sp, #32]
9001d3f2:	1837      	adds	r7, r6, r0
9001d3f4:	5c30      	ldrb	r0, [r6, r0]
9001d3f6:	eb00 0840 	add.w	r8, r0, r0, lsl #1
9001d3fa:	eb04 0c08 	add.w	ip, r4, r8
9001d3fe:	2b00      	cmp	r3, #0
9001d400:	f000 80d3 	beq.w	9001d5aa <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
9001d404:	787e      	ldrb	r6, [r7, #1]
9001d406:	eb06 0646 	add.w	r6, r6, r6, lsl #1
9001d40a:	4426      	add	r6, r4
9001d40c:	2900      	cmp	r1, #0
9001d40e:	f000 80d4 	beq.w	9001d5ba <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
9001d412:	18b8      	adds	r0, r7, r2
9001d414:	5cba      	ldrb	r2, [r7, r2]
9001d416:	7840      	ldrb	r0, [r0, #1]
9001d418:	eb02 0242 	add.w	r2, r2, r2, lsl #1
9001d41c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
9001d420:	4422      	add	r2, r4
9001d422:	4420      	add	r0, r4
9001d424:	b29b      	uxth	r3, r3
9001d426:	78b7      	ldrb	r7, [r6, #2]
9001d428:	b289      	uxth	r1, r1
9001d42a:	f89c a002 	ldrb.w	sl, [ip, #2]
9001d42e:	f89c c001 	ldrb.w	ip, [ip, #1]
9001d432:	fb03 f901 	mul.w	r9, r3, r1
9001d436:	011b      	lsls	r3, r3, #4
9001d438:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
9001d43c:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
9001d440:	eba3 0309 	sub.w	r3, r3, r9
9001d444:	b289      	uxth	r1, r1
9001d446:	b29b      	uxth	r3, r3
9001d448:	ebae 0e01 	sub.w	lr, lr, r1
9001d44c:	435f      	muls	r7, r3
9001d44e:	fa1f fe8e 	uxth.w	lr, lr
9001d452:	fb0e 770a 	mla	r7, lr, sl, r7
9001d456:	f892 a002 	ldrb.w	sl, [r2, #2]
9001d45a:	fb01 770a 	mla	r7, r1, sl, r7
9001d45e:	f890 a002 	ldrb.w	sl, [r0, #2]
9001d462:	fb09 7a0a 	mla	sl, r9, sl, r7
9001d466:	f814 7008 	ldrb.w	r7, [r4, r8]
9001d46a:	f896 8000 	ldrb.w	r8, [r6]
9001d46e:	7876      	ldrb	r6, [r6, #1]
9001d470:	f40a 4a78 	and.w	sl, sl, #63488	; 0xf800
9001d474:	fb03 f808 	mul.w	r8, r3, r8
9001d478:	4373      	muls	r3, r6
9001d47a:	fb0e 8807 	mla	r8, lr, r7, r8
9001d47e:	7817      	ldrb	r7, [r2, #0]
9001d480:	fb0e 330c 	mla	r3, lr, ip, r3
9001d484:	fb01 8807 	mla	r8, r1, r7, r8
9001d488:	7807      	ldrb	r7, [r0, #0]
9001d48a:	fb09 8707 	mla	r7, r9, r7, r8
9001d48e:	f3c7 27c4 	ubfx	r7, r7, #11, #5
9001d492:	ea47 070a 	orr.w	r7, r7, sl
9001d496:	f892 a001 	ldrb.w	sl, [r2, #1]
9001d49a:	fb01 310a 	mla	r1, r1, sl, r3
9001d49e:	f890 a001 	ldrb.w	sl, [r0, #1]
9001d4a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
9001d4a4:	fb09 1a0a 	mla	sl, r9, sl, r1
9001d4a8:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
9001d4ac:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
9001d4b0:	ea47 070a 	orr.w	r7, r7, sl
9001d4b4:	801f      	strh	r7, [r3, #0]
9001d4b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
9001d4b8:	3302      	adds	r3, #2
9001d4ba:	9309      	str	r3, [sp, #36]	; 0x24
9001d4bc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
9001d4be:	449b      	add	fp, r3
9001d4c0:	9b1c      	ldr	r3, [sp, #112]	; 0x70
9001d4c2:	441d      	add	r5, r3
9001d4c4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
9001d4c6:	3b01      	subs	r3, #1
9001d4c8:	930b      	str	r3, [sp, #44]	; 0x2c
9001d4ca:	e770      	b.n	9001d3ae <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
9001d4cc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
9001d4ce:	449b      	add	fp, r3
9001d4d0:	9b1c      	ldr	r3, [sp, #112]	; 0x70
9001d4d2:	441d      	add	r5, r3
9001d4d4:	9b06      	ldr	r3, [sp, #24]
9001d4d6:	3b01      	subs	r3, #1
9001d4d8:	9306      	str	r3, [sp, #24]
9001d4da:	9b07      	ldr	r3, [sp, #28]
9001d4dc:	3302      	adds	r3, #2
9001d4de:	9307      	str	r3, [sp, #28]
9001d4e0:	e745      	b.n	9001d36e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e>
9001d4e2:	d023      	beq.n	9001d52c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20c>
9001d4e4:	9b06      	ldr	r3, [sp, #24]
9001d4e6:	981b      	ldr	r0, [sp, #108]	; 0x6c
9001d4e8:	3b01      	subs	r3, #1
9001d4ea:	fb00 b003 	mla	r0, r0, r3, fp
9001d4ee:	1400      	asrs	r0, r0, #16
9001d4f0:	f53f af59 	bmi.w	9001d3a6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
9001d4f4:	3901      	subs	r1, #1
9001d4f6:	4288      	cmp	r0, r1
9001d4f8:	f6bf af55 	bge.w	9001d3a6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
9001d4fc:	991c      	ldr	r1, [sp, #112]	; 0x70
9001d4fe:	fb01 5303 	mla	r3, r1, r3, r5
9001d502:	141b      	asrs	r3, r3, #16
9001d504:	f53f af4f 	bmi.w	9001d3a6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
9001d508:	3a01      	subs	r2, #1
9001d50a:	4293      	cmp	r3, r2
9001d50c:	f6bf af4b 	bge.w	9001d3a6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
9001d510:	9b06      	ldr	r3, [sp, #24]
9001d512:	9309      	str	r3, [sp, #36]	; 0x24
9001d514:	9b07      	ldr	r3, [sp, #28]
9001d516:	930b      	str	r3, [sp, #44]	; 0x2c
9001d518:	9b09      	ldr	r3, [sp, #36]	; 0x24
9001d51a:	2b00      	cmp	r3, #0
9001d51c:	dc70      	bgt.n	9001d600 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
9001d51e:	9b06      	ldr	r3, [sp, #24]
9001d520:	9a07      	ldr	r2, [sp, #28]
9001d522:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
9001d526:	eb02 0343 	add.w	r3, r2, r3, lsl #1
9001d52a:	9307      	str	r3, [sp, #28]
9001d52c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
9001d52e:	2b00      	cmp	r3, #0
9001d530:	f340 80eb 	ble.w	9001d70a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ea>
9001d534:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
9001d538:	9b18      	ldr	r3, [sp, #96]	; 0x60
9001d53a:	ee30 0a04 	vadd.f32	s0, s0, s8
9001d53e:	ee70 0aa4 	vadd.f32	s1, s1, s9
9001d542:	eef0 6a62 	vmov.f32	s13, s5
9001d546:	eec7 7a00 	vdiv.f32	s15, s14, s0
9001d54a:	ee31 1a05 	vadd.f32	s2, s2, s10
9001d54e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
9001d552:	ee16 ba90 	vmov	fp, s13
9001d556:	eef0 6a43 	vmov.f32	s13, s6
9001d55a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
9001d55e:	ee16 5a90 	vmov	r5, s13
9001d562:	ee20 7aa7 	vmul.f32	s14, s1, s15
9001d566:	ee61 7a27 	vmul.f32	s15, s2, s15
9001d56a:	ee77 2a62 	vsub.f32	s5, s14, s5
9001d56e:	ee37 3ac3 	vsub.f32	s6, s15, s6
9001d572:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
9001d576:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
9001d57a:	ee12 2a90 	vmov	r2, s5
9001d57e:	eef0 2a47 	vmov.f32	s5, s14
9001d582:	fb92 f3f3 	sdiv	r3, r2, r3
9001d586:	ee13 2a10 	vmov	r2, s6
9001d58a:	931b      	str	r3, [sp, #108]	; 0x6c
9001d58c:	9b18      	ldr	r3, [sp, #96]	; 0x60
9001d58e:	eeb0 3a67 	vmov.f32	s6, s15
9001d592:	fb92 f3f3 	sdiv	r3, r2, r3
9001d596:	931c      	str	r3, [sp, #112]	; 0x70
9001d598:	9b0a      	ldr	r3, [sp, #40]	; 0x28
9001d59a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
9001d59c:	3b01      	subs	r3, #1
9001d59e:	930a      	str	r3, [sp, #40]	; 0x28
9001d5a0:	9b18      	ldr	r3, [sp, #96]	; 0x60
9001d5a2:	bf08      	it	eq
9001d5a4:	4613      	moveq	r3, r2
9001d5a6:	9306      	str	r3, [sp, #24]
9001d5a8:	e6d3      	b.n	9001d352 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32>
9001d5aa:	b149      	cbz	r1, 9001d5c0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a0>
9001d5ac:	5cba      	ldrb	r2, [r7, r2]
9001d5ae:	4660      	mov	r0, ip
9001d5b0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
9001d5b4:	4422      	add	r2, r4
9001d5b6:	4666      	mov	r6, ip
9001d5b8:	e734      	b.n	9001d424 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x104>
9001d5ba:	4660      	mov	r0, ip
9001d5bc:	4662      	mov	r2, ip
9001d5be:	e731      	b.n	9001d424 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x104>
9001d5c0:	4660      	mov	r0, ip
9001d5c2:	4662      	mov	r2, ip
9001d5c4:	e7f7      	b.n	9001d5b6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
9001d5c6:	f110 0c01 	adds.w	ip, r0, #1
9001d5ca:	f53f af74 	bmi.w	9001d4b6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
9001d5ce:	4562      	cmp	r2, ip
9001d5d0:	f6ff af71 	blt.w	9001d4b6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
9001d5d4:	f116 0c01 	adds.w	ip, r6, #1
9001d5d8:	f53f af6d 	bmi.w	9001d4b6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
9001d5dc:	4567      	cmp	r7, ip
9001d5de:	f6ff af6a 	blt.w	9001d4b6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
9001d5e2:	b23f      	sxth	r7, r7
9001d5e4:	b212      	sxth	r2, r2
9001d5e6:	9701      	str	r7, [sp, #4]
9001d5e8:	9200      	str	r2, [sp, #0]
9001d5ea:	e9cd 3104 	strd	r3, r1, [sp, #16]
9001d5ee:	e9cd 0602 	strd	r0, r6, [sp, #8]
9001d5f2:	4623      	mov	r3, r4
9001d5f4:	980d      	ldr	r0, [sp, #52]	; 0x34
9001d5f6:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
9001d5fa:	f7ff fde7 	bl	9001d1cc <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh>
9001d5fe:	e75a      	b.n	9001d4b6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
9001d600:	9a20      	ldr	r2, [sp, #128]	; 0x80
9001d602:	ea4f 462b 	mov.w	r6, fp, asr #16
9001d606:	1428      	asrs	r0, r5, #16
9001d608:	f3cb 3303 	ubfx	r3, fp, #12, #4
9001d60c:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
9001d610:	f3c5 3103 	ubfx	r1, r5, #12, #4
9001d614:	fb02 6000 	mla	r0, r2, r0, r6
9001d618:	9e08      	ldr	r6, [sp, #32]
9001d61a:	f816 8000 	ldrb.w	r8, [r6, r0]
9001d61e:	1837      	adds	r7, r6, r0
9001d620:	eb08 0848 	add.w	r8, r8, r8, lsl #1
9001d624:	eb04 0c08 	add.w	ip, r4, r8
9001d628:	2b00      	cmp	r3, #0
9001d62a:	d060      	beq.n	9001d6ee <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ce>
9001d62c:	787e      	ldrb	r6, [r7, #1]
9001d62e:	eb06 0646 	add.w	r6, r6, r6, lsl #1
9001d632:	4426      	add	r6, r4
9001d634:	2900      	cmp	r1, #0
9001d636:	d062      	beq.n	9001d6fe <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3de>
9001d638:	18b8      	adds	r0, r7, r2
9001d63a:	5cba      	ldrb	r2, [r7, r2]
9001d63c:	7840      	ldrb	r0, [r0, #1]
9001d63e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
9001d642:	eb00 0040 	add.w	r0, r0, r0, lsl #1
9001d646:	4422      	add	r2, r4
9001d648:	4420      	add	r0, r4
9001d64a:	b29b      	uxth	r3, r3
9001d64c:	78b7      	ldrb	r7, [r6, #2]
9001d64e:	b289      	uxth	r1, r1
9001d650:	f89c a002 	ldrb.w	sl, [ip, #2]
9001d654:	f89c c001 	ldrb.w	ip, [ip, #1]
9001d658:	fb03 f901 	mul.w	r9, r3, r1
9001d65c:	011b      	lsls	r3, r3, #4
9001d65e:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
9001d662:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
9001d666:	eba3 0309 	sub.w	r3, r3, r9
9001d66a:	b289      	uxth	r1, r1
9001d66c:	b29b      	uxth	r3, r3
9001d66e:	ebae 0e01 	sub.w	lr, lr, r1
9001d672:	435f      	muls	r7, r3
9001d674:	fa1f fe8e 	uxth.w	lr, lr
9001d678:	fb0e 770a 	mla	r7, lr, sl, r7
9001d67c:	f892 a002 	ldrb.w	sl, [r2, #2]
9001d680:	fb01 770a 	mla	r7, r1, sl, r7
9001d684:	f890 a002 	ldrb.w	sl, [r0, #2]
9001d688:	fb09 7a0a 	mla	sl, r9, sl, r7
9001d68c:	f814 7008 	ldrb.w	r7, [r4, r8]
9001d690:	f896 8000 	ldrb.w	r8, [r6]
9001d694:	7876      	ldrb	r6, [r6, #1]
9001d696:	f40a 4a78 	and.w	sl, sl, #63488	; 0xf800
9001d69a:	fb03 f808 	mul.w	r8, r3, r8
9001d69e:	4373      	muls	r3, r6
9001d6a0:	7856      	ldrb	r6, [r2, #1]
9001d6a2:	fb0e 8807 	mla	r8, lr, r7, r8
9001d6a6:	7817      	ldrb	r7, [r2, #0]
9001d6a8:	fb0e 330c 	mla	r3, lr, ip, r3
9001d6ac:	fb01 8807 	mla	r8, r1, r7, r8
9001d6b0:	7807      	ldrb	r7, [r0, #0]
9001d6b2:	fb01 3306 	mla	r3, r1, r6, r3
9001d6b6:	fb09 8707 	mla	r7, r9, r7, r8
9001d6ba:	f3c7 27c4 	ubfx	r7, r7, #11, #5
9001d6be:	ea47 070a 	orr.w	r7, r7, sl
9001d6c2:	f890 a001 	ldrb.w	sl, [r0, #1]
9001d6c6:	fb09 3a0a 	mla	sl, r9, sl, r3
9001d6ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
9001d6cc:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
9001d6d0:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
9001d6d4:	ea47 070a 	orr.w	r7, r7, sl
9001d6d8:	f823 7b02 	strh.w	r7, [r3], #2
9001d6dc:	930b      	str	r3, [sp, #44]	; 0x2c
9001d6de:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
9001d6e0:	449b      	add	fp, r3
9001d6e2:	9b1c      	ldr	r3, [sp, #112]	; 0x70
9001d6e4:	441d      	add	r5, r3
9001d6e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
9001d6e8:	3b01      	subs	r3, #1
9001d6ea:	9309      	str	r3, [sp, #36]	; 0x24
9001d6ec:	e714      	b.n	9001d518 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f8>
9001d6ee:	b149      	cbz	r1, 9001d704 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e4>
9001d6f0:	5cba      	ldrb	r2, [r7, r2]
9001d6f2:	4660      	mov	r0, ip
9001d6f4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
9001d6f8:	4422      	add	r2, r4
9001d6fa:	4666      	mov	r6, ip
9001d6fc:	e7a5      	b.n	9001d64a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32a>
9001d6fe:	4660      	mov	r0, ip
9001d700:	4662      	mov	r2, ip
9001d702:	e7a2      	b.n	9001d64a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32a>
9001d704:	4660      	mov	r0, ip
9001d706:	4662      	mov	r2, ip
9001d708:	e7f7      	b.n	9001d6fa <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3da>
9001d70a:	b00f      	add	sp, #60	; 0x3c
9001d70c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

9001d710 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh>:
9001d710:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001d714:	b085      	sub	sp, #20
9001d716:	e9dd 7410 	ldrd	r7, r4, [sp, #64]	; 0x40
9001d71a:	f9bd c038 	ldrsh.w	ip, [sp, #56]	; 0x38
9001d71e:	9102      	str	r1, [sp, #8]
9001d720:	2c00      	cmp	r4, #0
9001d722:	fb04 710c 	mla	r1, r4, ip, r7
9001d726:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	; 0x3c
9001d72a:	f89d 6048 	ldrb.w	r6, [sp, #72]	; 0x48
9001d72e:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
9001d732:	eb02 0e01 	add.w	lr, r2, r1
9001d736:	f2c0 8122 	blt.w	9001d97e <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x26e>
9001d73a:	45a0      	cmp	r8, r4
9001d73c:	f340 811f 	ble.w	9001d97e <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x26e>
9001d740:	2f00      	cmp	r7, #0
9001d742:	f2c0 811a 	blt.w	9001d97a <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x26a>
9001d746:	45bc      	cmp	ip, r7
9001d748:	f340 8117 	ble.w	9001d97a <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x26a>
9001d74c:	5c52      	ldrb	r2, [r2, r1]
9001d74e:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
9001d752:	1c7a      	adds	r2, r7, #1
9001d754:	f100 8116 	bmi.w	9001d984 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x274>
9001d758:	4594      	cmp	ip, r2
9001d75a:	f340 8113 	ble.w	9001d984 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x274>
9001d75e:	2e00      	cmp	r6, #0
9001d760:	f000 8112 	beq.w	9001d988 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x278>
9001d764:	f89e 2001 	ldrb.w	r2, [lr, #1]
9001d768:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
9001d76c:	3401      	adds	r4, #1
9001d76e:	f100 810f 	bmi.w	9001d990 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x280>
9001d772:	45a0      	cmp	r8, r4
9001d774:	f340 810c 	ble.w	9001d990 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x280>
9001d778:	2800      	cmp	r0, #0
9001d77a:	f000 810c 	beq.w	9001d996 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x286>
9001d77e:	2f00      	cmp	r7, #0
9001d780:	f2c0 8104 	blt.w	9001d98c <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x27c>
9001d784:	45bc      	cmp	ip, r7
9001d786:	f340 8101 	ble.w	9001d98c <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x27c>
9001d78a:	f81e 200c 	ldrb.w	r2, [lr, ip]
9001d78e:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
9001d792:	3701      	adds	r7, #1
9001d794:	f100 8102 	bmi.w	9001d99c <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x28c>
9001d798:	45bc      	cmp	ip, r7
9001d79a:	f340 80ff 	ble.w	9001d99c <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x28c>
9001d79e:	2e00      	cmp	r6, #0
9001d7a0:	f000 80fe 	beq.w	9001d9a0 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x290>
9001d7a4:	44f4      	add	ip, lr
9001d7a6:	f89c 2001 	ldrb.w	r2, [ip, #1]
9001d7aa:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
9001d7ae:	b2b6      	uxth	r6, r6
9001d7b0:	b280      	uxth	r0, r0
9001d7b2:	ea4f 6a11 	mov.w	sl, r1, lsr #24
9001d7b6:	fb00 fe06 	mul.w	lr, r0, r6
9001d7ba:	0136      	lsls	r6, r6, #4
9001d7bc:	ea4f 6b15 	mov.w	fp, r5, lsr #24
9001d7c0:	ebce 1000 	rsb	r0, lr, r0, lsl #4
9001d7c4:	eba6 070e 	sub.w	r7, r6, lr
9001d7c8:	f5c6 7380 	rsb	r3, r6, #256	; 0x100
9001d7cc:	ea4f 6914 	mov.w	r9, r4, lsr #24
9001d7d0:	b280      	uxth	r0, r0
9001d7d2:	b2bf      	uxth	r7, r7
9001d7d4:	1a1b      	subs	r3, r3, r0
9001d7d6:	ea4f 6812 	mov.w	r8, r2, lsr #24
9001d7da:	fb0a f607 	mul.w	r6, sl, r7
9001d7de:	b29b      	uxth	r3, r3
9001d7e0:	fb0b 6603 	mla	r6, fp, r3, r6
9001d7e4:	fb00 6609 	mla	r6, r0, r9, r6
9001d7e8:	fb0e 6608 	mla	r6, lr, r8, r6
9001d7ec:	f3c6 2607 	ubfx	r6, r6, #8, #8
9001d7f0:	9600      	str	r6, [sp, #0]
9001d7f2:	2e00      	cmp	r6, #0
9001d7f4:	f000 80be 	beq.w	9001d974 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x264>
9001d7f8:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
9001d7fc:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
9001d800:	9e02      	ldr	r6, [sp, #8]
9001d802:	fb0b fc0c 	mul.w	ip, fp, ip
9001d806:	fb0b f505 	mul.w	r5, fp, r5
9001d80a:	8836      	ldrh	r6, [r6, #0]
9001d80c:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
9001d810:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
9001d814:	9501      	str	r5, [sp, #4]
9001d816:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
9001d81a:	44dc      	add	ip, fp
9001d81c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
9001d820:	f00c 15ff 	and.w	r5, ip, #16711935	; 0xff00ff
9001d824:	9503      	str	r5, [sp, #12]
9001d826:	9d01      	ldr	r5, [sp, #4]
9001d828:	f505 7c80 	add.w	ip, r5, #256	; 0x100
9001d82c:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
9001d830:	f001 1cff 	and.w	ip, r1, #16711935	; 0xff00ff
9001d834:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
9001d838:	fb0a fc0c 	mul.w	ip, sl, ip
9001d83c:	ea4f 2b15 	mov.w	fp, r5, lsr #8
9001d840:	fb0a fa01 	mul.w	sl, sl, r1
9001d844:	ea4f 251c 	mov.w	r5, ip, lsr #8
9001d848:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
9001d84c:	f50a 7180 	add.w	r1, sl, #256	; 0x100
9001d850:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
9001d854:	eb01 2a1a 	add.w	sl, r1, sl, lsr #8
9001d858:	4465      	add	r5, ip
9001d85a:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
9001d85e:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
9001d862:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
9001d866:	fb09 fc0c 	mul.w	ip, r9, ip
9001d86a:	0a2d      	lsrs	r5, r5, #8
9001d86c:	fb09 f904 	mul.w	r9, r9, r4
9001d870:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
9001d874:	ea4f 211c 	mov.w	r1, ip, lsr #8
9001d878:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
9001d87c:	f509 7480 	add.w	r4, r9, #256	; 0x100
9001d880:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
9001d884:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
9001d888:	437d      	muls	r5, r7
9001d88a:	eb04 2919 	add.w	r9, r4, r9, lsr #8
9001d88e:	f002 14ff 	and.w	r4, r2, #16711935	; 0xff00ff
9001d892:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
9001d896:	4461      	add	r1, ip
9001d898:	fb08 f404 	mul.w	r4, r8, r4
9001d89c:	ea4f 2919 	mov.w	r9, r9, lsr #8
9001d8a0:	fb08 f802 	mul.w	r8, r8, r2
9001d8a4:	0a09      	lsrs	r1, r1, #8
9001d8a6:	0a22      	lsrs	r2, r4, #8
9001d8a8:	f104 1401 	add.w	r4, r4, #65537	; 0x10001
9001d8ac:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
9001d8b0:	fb07 f70a 	mul.w	r7, r7, sl
9001d8b4:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
9001d8b8:	4414      	add	r4, r2
9001d8ba:	f508 7280 	add.w	r2, r8, #256	; 0x100
9001d8be:	0a24      	lsrs	r4, r4, #8
9001d8c0:	eb02 2818 	add.w	r8, r2, r8, lsr #8
9001d8c4:	9a03      	ldr	r2, [sp, #12]
9001d8c6:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
9001d8ca:	fb02 5503 	mla	r5, r2, r3, r5
9001d8ce:	ea4f 2818 	mov.w	r8, r8, lsr #8
9001d8d2:	9a00      	ldr	r2, [sp, #0]
9001d8d4:	fb04 540e 	mla	r4, r4, lr, r5
9001d8d8:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
9001d8dc:	1235      	asrs	r5, r6, #8
9001d8de:	fb01 4100 	mla	r1, r1, r0, r4
9001d8e2:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
9001d8e6:	0a09      	lsrs	r1, r1, #8
9001d8e8:	f001 14ff 	and.w	r4, r1, #16711935	; 0xff00ff
9001d8ec:	f40b 417f 	and.w	r1, fp, #65280	; 0xff00
9001d8f0:	fb03 7101 	mla	r1, r3, r1, r7
9001d8f4:	fb0e 1e08 	mla	lr, lr, r8, r1
9001d8f8:	f409 417f 	and.w	r1, r9, #65280	; 0xff00
9001d8fc:	fb00 e101 	mla	r1, r0, r1, lr
9001d900:	f89d 0050 	ldrb.w	r0, [sp, #80]	; 0x50
9001d904:	b287      	uxth	r7, r0
9001d906:	0a09      	lsrs	r1, r1, #8
9001d908:	437a      	muls	r2, r7
9001d90a:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
9001d90e:	1c53      	adds	r3, r2, #1
9001d910:	4321      	orrs	r1, r4
9001d912:	eb03 2312 	add.w	r3, r3, r2, lsr #8
9001d916:	0c0a      	lsrs	r2, r1, #16
9001d918:	f3c1 2407 	ubfx	r4, r1, #8, #8
9001d91c:	ea6f 2313 	mvn.w	r3, r3, lsr #8
9001d920:	b2c8      	uxtb	r0, r1
9001d922:	fb12 f207 	smulbb	r2, r2, r7
9001d926:	fb14 f407 	smulbb	r4, r4, r7
9001d92a:	b2db      	uxtb	r3, r3
9001d92c:	fb10 f007 	smulbb	r0, r0, r7
9001d930:	fb05 2503 	mla	r5, r5, r3, r2
9001d934:	10f2      	asrs	r2, r6, #3
9001d936:	00f6      	lsls	r6, r6, #3
9001d938:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
9001d93c:	b2ad      	uxth	r5, r5
9001d93e:	b2f6      	uxtb	r6, r6
9001d940:	fb02 4203 	mla	r2, r2, r3, r4
9001d944:	fb06 0303 	mla	r3, r6, r3, r0
9001d948:	b294      	uxth	r4, r2
9001d94a:	b299      	uxth	r1, r3
9001d94c:	1c6b      	adds	r3, r5, #1
9001d94e:	1c62      	adds	r2, r4, #1
9001d950:	eb03 2515 	add.w	r5, r3, r5, lsr #8
9001d954:	1c4b      	adds	r3, r1, #1
9001d956:	eb02 2214 	add.w	r2, r2, r4, lsr #8
9001d95a:	eb03 2311 	add.w	r3, r3, r1, lsr #8
9001d95e:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
9001d962:	0952      	lsrs	r2, r2, #5
9001d964:	f3c3 23c4 	ubfx	r3, r3, #11, #5
9001d968:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
9001d96c:	432b      	orrs	r3, r5
9001d96e:	4313      	orrs	r3, r2
9001d970:	9a02      	ldr	r2, [sp, #8]
9001d972:	8013      	strh	r3, [r2, #0]
9001d974:	b005      	add	sp, #20
9001d976:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9001d97a:	2500      	movs	r5, #0
9001d97c:	e6e9      	b.n	9001d752 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x42>
9001d97e:	2100      	movs	r1, #0
9001d980:	460d      	mov	r5, r1
9001d982:	e6f3      	b.n	9001d76c <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x5c>
9001d984:	2100      	movs	r1, #0
9001d986:	e6f1      	b.n	9001d76c <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x5c>
9001d988:	4631      	mov	r1, r6
9001d98a:	e6ef      	b.n	9001d76c <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x5c>
9001d98c:	2400      	movs	r4, #0
9001d98e:	e700      	b.n	9001d792 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x82>
9001d990:	2200      	movs	r2, #0
9001d992:	4614      	mov	r4, r2
9001d994:	e70b      	b.n	9001d7ae <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x9e>
9001d996:	4602      	mov	r2, r0
9001d998:	4604      	mov	r4, r0
9001d99a:	e708      	b.n	9001d7ae <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x9e>
9001d99c:	2200      	movs	r2, #0
9001d99e:	e706      	b.n	9001d7ae <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x9e>
9001d9a0:	4632      	mov	r2, r6
9001d9a2:	e704      	b.n	9001d7ae <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x9e>

9001d9a4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
9001d9a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001d9a8:	b09f      	sub	sp, #124	; 0x7c
9001d9aa:	921b      	str	r2, [sp, #108]	; 0x6c
9001d9ac:	9309      	str	r3, [sp, #36]	; 0x24
9001d9ae:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
9001d9b0:	f89d 30c4 	ldrb.w	r3, [sp, #196]	; 0xc4
9001d9b4:	901d      	str	r0, [sp, #116]	; 0x74
9001d9b6:	931c      	str	r3, [sp, #112]	; 0x70
9001d9b8:	6850      	ldr	r0, [r2, #4]
9001d9ba:	9119      	str	r1, [sp, #100]	; 0x64
9001d9bc:	6812      	ldr	r2, [r2, #0]
9001d9be:	9d2a      	ldr	r5, [sp, #168]	; 0xa8
9001d9c0:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
9001d9c4:	fb00 1303 	mla	r3, r0, r3, r1
9001d9c8:	eb02 0343 	add.w	r3, r2, r3, lsl #1
9001d9cc:	930c      	str	r3, [sp, #48]	; 0x30
9001d9ce:	9b30      	ldr	r3, [sp, #192]	; 0xc0
9001d9d0:	681b      	ldr	r3, [r3, #0]
9001d9d2:	9312      	str	r3, [sp, #72]	; 0x48
9001d9d4:	9b30      	ldr	r3, [sp, #192]	; 0xc0
9001d9d6:	685e      	ldr	r6, [r3, #4]
9001d9d8:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
9001d9dc:	3604      	adds	r6, #4
9001d9de:	930d      	str	r3, [sp, #52]	; 0x34
9001d9e0:	9b19      	ldr	r3, [sp, #100]	; 0x64
9001d9e2:	2b00      	cmp	r3, #0
9001d9e4:	dc03      	bgt.n	9001d9ee <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
9001d9e6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
9001d9e8:	2b00      	cmp	r3, #0
9001d9ea:	f340 8387 	ble.w	9001e0fc <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x758>
9001d9ee:	9b30      	ldr	r3, [sp, #192]	; 0xc0
9001d9f0:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
9001d9f4:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
9001d9f8:	1e48      	subs	r0, r1, #1
9001d9fa:	1e57      	subs	r7, r2, #1
9001d9fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
9001d9fe:	2b00      	cmp	r3, #0
9001da00:	f340 8194 	ble.w	9001dd2c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x388>
9001da04:	9c29      	ldr	r4, [sp, #164]	; 0xa4
9001da06:	142b      	asrs	r3, r5, #16
9001da08:	ea5f 4c24 	movs.w	ip, r4, asr #16
9001da0c:	d406      	bmi.n	9001da1c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
9001da0e:	4584      	cmp	ip, r0
9001da10:	da04      	bge.n	9001da1c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
9001da12:	2b00      	cmp	r3, #0
9001da14:	db02      	blt.n	9001da1c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
9001da16:	42bb      	cmp	r3, r7
9001da18:	f2c0 8189 	blt.w	9001dd2e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
9001da1c:	f11c 0c01 	adds.w	ip, ip, #1
9001da20:	f100 8177 	bmi.w	9001dd12 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
9001da24:	4561      	cmp	r1, ip
9001da26:	f2c0 8174 	blt.w	9001dd12 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
9001da2a:	3301      	adds	r3, #1
9001da2c:	f100 8171 	bmi.w	9001dd12 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
9001da30:	429a      	cmp	r2, r3
9001da32:	f2c0 816e 	blt.w	9001dd12 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
9001da36:	9b09      	ldr	r3, [sp, #36]	; 0x24
9001da38:	9f0c      	ldr	r7, [sp, #48]	; 0x30
9001da3a:	931a      	str	r3, [sp, #104]	; 0x68
9001da3c:	9b1a      	ldr	r3, [sp, #104]	; 0x68
9001da3e:	2b00      	cmp	r3, #0
9001da40:	f340 8193 	ble.w	9001dd6a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c6>
9001da44:	9b29      	ldr	r3, [sp, #164]	; 0xa4
9001da46:	ea4f 4c25 	mov.w	ip, r5, asr #16
9001da4a:	f3c5 3103 	ubfx	r1, r5, #12, #4
9001da4e:	f3c3 3203 	ubfx	r2, r3, #12, #4
9001da52:	9b30      	ldr	r3, [sp, #192]	; 0xc0
9001da54:	e9d3 0e02 	ldrd	r0, lr, [r3, #8]
9001da58:	9b29      	ldr	r3, [sp, #164]	; 0xa4
9001da5a:	141b      	asrs	r3, r3, #16
9001da5c:	f100 81d6 	bmi.w	9001de0c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x468>
9001da60:	f100 38ff 	add.w	r8, r0, #4294967295
9001da64:	4543      	cmp	r3, r8
9001da66:	f280 81d1 	bge.w	9001de0c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x468>
9001da6a:	f1bc 0f00 	cmp.w	ip, #0
9001da6e:	f2c0 81cd 	blt.w	9001de0c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x468>
9001da72:	f10e 38ff 	add.w	r8, lr, #4294967295
9001da76:	45c4      	cmp	ip, r8
9001da78:	f280 81c8 	bge.w	9001de0c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x468>
9001da7c:	b200      	sxth	r0, r0
9001da7e:	9c12      	ldr	r4, [sp, #72]	; 0x48
9001da80:	fb0c 3300 	mla	r3, ip, r0, r3
9001da84:	eb04 0803 	add.w	r8, r4, r3
9001da88:	5ce3      	ldrb	r3, [r4, r3]
9001da8a:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
9001da8e:	ea4f 6e13 	mov.w	lr, r3, lsr #24
9001da92:	2a00      	cmp	r2, #0
9001da94:	f000 81af 	beq.w	9001ddf6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
9001da98:	f898 c001 	ldrb.w	ip, [r8, #1]
9001da9c:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
9001daa0:	940e      	str	r4, [sp, #56]	; 0x38
9001daa2:	0e24      	lsrs	r4, r4, #24
9001daa4:	9415      	str	r4, [sp, #84]	; 0x54
9001daa6:	b179      	cbz	r1, 9001dac8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x124>
9001daa8:	eb08 0c00 	add.w	ip, r8, r0
9001daac:	f818 0000 	ldrb.w	r0, [r8, r0]
9001dab0:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
9001dab4:	900a      	str	r0, [sp, #40]	; 0x28
9001dab6:	0e00      	lsrs	r0, r0, #24
9001dab8:	9013      	str	r0, [sp, #76]	; 0x4c
9001daba:	f89c 0001 	ldrb.w	r0, [ip, #1]
9001dabe:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
9001dac2:	900f      	str	r0, [sp, #60]	; 0x3c
9001dac4:	0e00      	lsrs	r0, r0, #24
9001dac6:	9016      	str	r0, [sp, #88]	; 0x58
9001dac8:	b292      	uxth	r2, r2
9001daca:	9815      	ldr	r0, [sp, #84]	; 0x54
9001dacc:	b289      	uxth	r1, r1
9001dace:	9c13      	ldr	r4, [sp, #76]	; 0x4c
9001dad0:	fb02 f901 	mul.w	r9, r2, r1
9001dad4:	0112      	lsls	r2, r2, #4
9001dad6:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
9001dada:	eba2 0809 	sub.w	r8, r2, r9
9001dade:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
9001dae2:	b289      	uxth	r1, r1
9001dae4:	fa1f f888 	uxth.w	r8, r8
9001dae8:	1a52      	subs	r2, r2, r1
9001daea:	fb08 f000 	mul.w	r0, r8, r0
9001daee:	b292      	uxth	r2, r2
9001daf0:	fb02 000e 	mla	r0, r2, lr, r0
9001daf4:	fb01 0004 	mla	r0, r1, r4, r0
9001daf8:	9c16      	ldr	r4, [sp, #88]	; 0x58
9001dafa:	fb09 0004 	mla	r0, r9, r4, r0
9001dafe:	f3c0 2007 	ubfx	r0, r0, #8, #8
9001db02:	2800      	cmp	r0, #0
9001db04:	f000 80fa 	beq.w	9001dcfc <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
9001db08:	f1be 0fff 	cmp.w	lr, #255	; 0xff
9001db0c:	d01b      	beq.n	9001db46 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
9001db0e:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
9001db12:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
9001db16:	fb0e fa0a 	mul.w	sl, lr, sl
9001db1a:	fb0e fe03 	mul.w	lr, lr, r3
9001db1e:	ea4f 231a 	mov.w	r3, sl, lsr #8
9001db22:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
9001db26:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
9001db2a:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
9001db2e:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
9001db32:	4453      	add	r3, sl
9001db34:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
9001db38:	0a1b      	lsrs	r3, r3, #8
9001db3a:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
9001db3e:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
9001db42:	ea43 030c 	orr.w	r3, r3, ip
9001db46:	9c15      	ldr	r4, [sp, #84]	; 0x54
9001db48:	2cff      	cmp	r4, #255	; 0xff
9001db4a:	d021      	beq.n	9001db90 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ec>
9001db4c:	9c0e      	ldr	r4, [sp, #56]	; 0x38
9001db4e:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
9001db52:	9c15      	ldr	r4, [sp, #84]	; 0x54
9001db54:	fb04 fb0b 	mul.w	fp, r4, fp
9001db58:	9c0e      	ldr	r4, [sp, #56]	; 0x38
9001db5a:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
9001db5e:	9c15      	ldr	r4, [sp, #84]	; 0x54
9001db60:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
9001db64:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
9001db68:	fb04 fa0a 	mul.w	sl, r4, sl
9001db6c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
9001db70:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
9001db74:	44de      	add	lr, fp
9001db76:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
9001db7a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
9001db7e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
9001db82:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
9001db86:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
9001db8a:	ea4e 040a 	orr.w	r4, lr, sl
9001db8e:	940e      	str	r4, [sp, #56]	; 0x38
9001db90:	9c13      	ldr	r4, [sp, #76]	; 0x4c
9001db92:	2cff      	cmp	r4, #255	; 0xff
9001db94:	d021      	beq.n	9001dbda <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
9001db96:	9c0a      	ldr	r4, [sp, #40]	; 0x28
9001db98:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
9001db9c:	9c13      	ldr	r4, [sp, #76]	; 0x4c
9001db9e:	fb04 fb0b 	mul.w	fp, r4, fp
9001dba2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
9001dba4:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
9001dba8:	9c13      	ldr	r4, [sp, #76]	; 0x4c
9001dbaa:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
9001dbae:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
9001dbb2:	fb04 fa0a 	mul.w	sl, r4, sl
9001dbb6:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
9001dbba:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
9001dbbe:	44de      	add	lr, fp
9001dbc0:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
9001dbc4:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
9001dbc8:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
9001dbcc:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
9001dbd0:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
9001dbd4:	ea4e 040a 	orr.w	r4, lr, sl
9001dbd8:	940a      	str	r4, [sp, #40]	; 0x28
9001dbda:	9c16      	ldr	r4, [sp, #88]	; 0x58
9001dbdc:	2cff      	cmp	r4, #255	; 0xff
9001dbde:	d021      	beq.n	9001dc24 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x280>
9001dbe0:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
9001dbe2:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
9001dbe6:	9c16      	ldr	r4, [sp, #88]	; 0x58
9001dbe8:	fb04 fb0b 	mul.w	fp, r4, fp
9001dbec:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
9001dbee:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
9001dbf2:	9c16      	ldr	r4, [sp, #88]	; 0x58
9001dbf4:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
9001dbf8:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
9001dbfc:	fb04 fa0a 	mul.w	sl, r4, sl
9001dc00:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
9001dc04:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
9001dc08:	44de      	add	lr, fp
9001dc0a:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
9001dc0e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
9001dc12:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
9001dc16:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
9001dc1a:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
9001dc1e:	ea4e 040a 	orr.w	r4, lr, sl
9001dc22:	940f      	str	r4, [sp, #60]	; 0x3c
9001dc24:	9c0e      	ldr	r4, [sp, #56]	; 0x38
9001dc26:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
9001dc2a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
9001dc2e:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
9001dc32:	9c0a      	ldr	r4, [sp, #40]	; 0x28
9001dc34:	fb08 fc0c 	mul.w	ip, r8, ip
9001dc38:	fb02 cc0e 	mla	ip, r2, lr, ip
9001dc3c:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
9001dc40:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
9001dc42:	fb01 cc0e 	mla	ip, r1, lr, ip
9001dc46:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
9001dc4a:	9c0e      	ldr	r4, [sp, #56]	; 0x38
9001dc4c:	fb09 cc0e 	mla	ip, r9, lr, ip
9001dc50:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
9001dc54:	9c0d      	ldr	r4, [sp, #52]	; 0x34
9001dc56:	fb08 f80e 	mul.w	r8, r8, lr
9001dc5a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
9001dc5e:	fb02 8303 	mla	r3, r2, r3, r8
9001dc62:	9a0a      	ldr	r2, [sp, #40]	; 0x28
9001dc64:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
9001dc68:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
9001dc6c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
9001dc6e:	fb01 330a 	mla	r3, r1, sl, r3
9001dc72:	f402 417f 	and.w	r1, r2, #65280	; 0xff00
9001dc76:	9a0d      	ldr	r2, [sp, #52]	; 0x34
9001dc78:	fb09 3901 	mla	r9, r9, r1, r3
9001dc7c:	883b      	ldrh	r3, [r7, #0]
9001dc7e:	4342      	muls	r2, r0
9001dc80:	ea4f 2919 	mov.w	r9, r9, lsr #8
9001dc84:	1c50      	adds	r0, r2, #1
9001dc86:	1219      	asrs	r1, r3, #8
9001dc88:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
9001dc8c:	eb00 2012 	add.w	r0, r0, r2, lsr #8
9001dc90:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
9001dc94:	ea4c 0c09 	orr.w	ip, ip, r9
9001dc98:	ea6f 2010 	mvn.w	r0, r0, lsr #8
9001dc9c:	ea4f 421c 	mov.w	r2, ip, lsr #16
9001dca0:	f3cc 2e07 	ubfx	lr, ip, #8, #8
9001dca4:	b2c0      	uxtb	r0, r0
9001dca6:	fb12 f204 	smulbb	r2, r2, r4
9001dcaa:	fa5f fc8c 	uxtb.w	ip, ip
9001dcae:	fb1e fe04 	smulbb	lr, lr, r4
9001dcb2:	fb01 2100 	mla	r1, r1, r0, r2
9001dcb6:	10da      	asrs	r2, r3, #3
9001dcb8:	fb1c fc04 	smulbb	ip, ip, r4
9001dcbc:	00db      	lsls	r3, r3, #3
9001dcbe:	b289      	uxth	r1, r1
9001dcc0:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
9001dcc4:	b2db      	uxtb	r3, r3
9001dcc6:	fb02 e200 	mla	r2, r2, r0, lr
9001dcca:	fb03 c300 	mla	r3, r3, r0, ip
9001dcce:	b292      	uxth	r2, r2
9001dcd0:	fa1f fc83 	uxth.w	ip, r3
9001dcd4:	1c4b      	adds	r3, r1, #1
9001dcd6:	eb03 2111 	add.w	r1, r3, r1, lsr #8
9001dcda:	f10c 0301 	add.w	r3, ip, #1
9001dcde:	eb03 231c 	add.w	r3, r3, ip, lsr #8
9001dce2:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
9001dce6:	f3c3 23c4 	ubfx	r3, r3, #11, #5
9001dcea:	430b      	orrs	r3, r1
9001dcec:	1c51      	adds	r1, r2, #1
9001dcee:	eb01 2212 	add.w	r2, r1, r2, lsr #8
9001dcf2:	0952      	lsrs	r2, r2, #5
9001dcf4:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
9001dcf8:	4313      	orrs	r3, r2
9001dcfa:	803b      	strh	r3, [r7, #0]
9001dcfc:	9b2b      	ldr	r3, [sp, #172]	; 0xac
9001dcfe:	3702      	adds	r7, #2
9001dd00:	9a29      	ldr	r2, [sp, #164]	; 0xa4
9001dd02:	441a      	add	r2, r3
9001dd04:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
9001dd06:	441d      	add	r5, r3
9001dd08:	9b1a      	ldr	r3, [sp, #104]	; 0x68
9001dd0a:	9229      	str	r2, [sp, #164]	; 0xa4
9001dd0c:	3b01      	subs	r3, #1
9001dd0e:	931a      	str	r3, [sp, #104]	; 0x68
9001dd10:	e694      	b.n	9001da3c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
9001dd12:	9b2b      	ldr	r3, [sp, #172]	; 0xac
9001dd14:	9c29      	ldr	r4, [sp, #164]	; 0xa4
9001dd16:	441c      	add	r4, r3
9001dd18:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
9001dd1a:	441d      	add	r5, r3
9001dd1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
9001dd1e:	9429      	str	r4, [sp, #164]	; 0xa4
9001dd20:	3b01      	subs	r3, #1
9001dd22:	9309      	str	r3, [sp, #36]	; 0x24
9001dd24:	9b0c      	ldr	r3, [sp, #48]	; 0x30
9001dd26:	3302      	adds	r3, #2
9001dd28:	930c      	str	r3, [sp, #48]	; 0x30
9001dd2a:	e667      	b.n	9001d9fc <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
9001dd2c:	d024      	beq.n	9001dd78 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3d4>
9001dd2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
9001dd30:	982b      	ldr	r0, [sp, #172]	; 0xac
9001dd32:	3b01      	subs	r3, #1
9001dd34:	9c29      	ldr	r4, [sp, #164]	; 0xa4
9001dd36:	fb00 4003 	mla	r0, r0, r3, r4
9001dd3a:	1400      	asrs	r0, r0, #16
9001dd3c:	f53f ae7b 	bmi.w	9001da36 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
9001dd40:	3901      	subs	r1, #1
9001dd42:	4288      	cmp	r0, r1
9001dd44:	f6bf ae77 	bge.w	9001da36 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
9001dd48:	992c      	ldr	r1, [sp, #176]	; 0xb0
9001dd4a:	fb01 5303 	mla	r3, r1, r3, r5
9001dd4e:	141b      	asrs	r3, r3, #16
9001dd50:	f53f ae71 	bmi.w	9001da36 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
9001dd54:	3a01      	subs	r2, #1
9001dd56:	4293      	cmp	r3, r2
9001dd58:	f6bf ae6d 	bge.w	9001da36 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
9001dd5c:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
9001dd60:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
9001dd64:	f1bb 0f00 	cmp.w	fp, #0
9001dd68:	dc70      	bgt.n	9001de4c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a8>
9001dd6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
9001dd6c:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
9001dd70:	9b0c      	ldr	r3, [sp, #48]	; 0x30
9001dd72:	eb03 0344 	add.w	r3, r3, r4, lsl #1
9001dd76:	930c      	str	r3, [sp, #48]	; 0x30
9001dd78:	9b19      	ldr	r3, [sp, #100]	; 0x64
9001dd7a:	2b00      	cmp	r3, #0
9001dd7c:	f340 81be 	ble.w	9001e0fc <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x758>
9001dd80:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
9001dd84:	9b28      	ldr	r3, [sp, #160]	; 0xa0
9001dd86:	ee30 0a04 	vadd.f32	s0, s0, s8
9001dd8a:	ee70 0aa4 	vadd.f32	s1, s1, s9
9001dd8e:	eef0 6a62 	vmov.f32	s13, s5
9001dd92:	eec7 7a00 	vdiv.f32	s15, s14, s0
9001dd96:	ee31 1a05 	vadd.f32	s2, s2, s10
9001dd9a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
9001dd9e:	edcd 6a29 	vstr	s13, [sp, #164]	; 0xa4
9001dda2:	eef0 6a43 	vmov.f32	s13, s6
9001dda6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
9001ddaa:	ee16 5a90 	vmov	r5, s13
9001ddae:	ee20 7aa7 	vmul.f32	s14, s1, s15
9001ddb2:	ee61 7a27 	vmul.f32	s15, s2, s15
9001ddb6:	ee77 2a62 	vsub.f32	s5, s14, s5
9001ddba:	ee37 3ac3 	vsub.f32	s6, s15, s6
9001ddbe:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
9001ddc2:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
9001ddc6:	ee12 2a90 	vmov	r2, s5
9001ddca:	eef0 2a47 	vmov.f32	s5, s14
9001ddce:	fb92 f3f3 	sdiv	r3, r2, r3
9001ddd2:	ee13 2a10 	vmov	r2, s6
9001ddd6:	932b      	str	r3, [sp, #172]	; 0xac
9001ddd8:	9b28      	ldr	r3, [sp, #160]	; 0xa0
9001ddda:	eeb0 3a67 	vmov.f32	s6, s15
9001ddde:	fb92 f3f3 	sdiv	r3, r2, r3
9001dde2:	932c      	str	r3, [sp, #176]	; 0xb0
9001dde4:	9b19      	ldr	r3, [sp, #100]	; 0x64
9001dde6:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
9001dde8:	3b01      	subs	r3, #1
9001ddea:	9319      	str	r3, [sp, #100]	; 0x64
9001ddec:	9b28      	ldr	r3, [sp, #160]	; 0xa0
9001ddee:	bf08      	it	eq
9001ddf0:	4613      	moveq	r3, r2
9001ddf2:	9309      	str	r3, [sp, #36]	; 0x24
9001ddf4:	e5f4      	b.n	9001d9e0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
9001ddf6:	2900      	cmp	r1, #0
9001ddf8:	f43f ae66 	beq.w	9001dac8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x124>
9001ddfc:	f818 0000 	ldrb.w	r0, [r8, r0]
9001de00:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
9001de04:	900a      	str	r0, [sp, #40]	; 0x28
9001de06:	0e00      	lsrs	r0, r0, #24
9001de08:	9013      	str	r0, [sp, #76]	; 0x4c
9001de0a:	e65d      	b.n	9001dac8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x124>
9001de0c:	f113 0801 	adds.w	r8, r3, #1
9001de10:	f53f af74 	bmi.w	9001dcfc <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
9001de14:	4540      	cmp	r0, r8
9001de16:	f6ff af71 	blt.w	9001dcfc <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
9001de1a:	f11c 0801 	adds.w	r8, ip, #1
9001de1e:	f53f af6d 	bmi.w	9001dcfc <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
9001de22:	45c6      	cmp	lr, r8
9001de24:	f6ff af6a 	blt.w	9001dcfc <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
9001de28:	9c1c      	ldr	r4, [sp, #112]	; 0x70
9001de2a:	b200      	sxth	r0, r0
9001de2c:	9302      	str	r3, [sp, #8]
9001de2e:	fa0f f38e 	sxth.w	r3, lr
9001de32:	9000      	str	r0, [sp, #0]
9001de34:	9301      	str	r3, [sp, #4]
9001de36:	4633      	mov	r3, r6
9001de38:	981d      	ldr	r0, [sp, #116]	; 0x74
9001de3a:	e9cd 1405 	strd	r1, r4, [sp, #20]
9001de3e:	e9cd c203 	strd	ip, r2, [sp, #12]
9001de42:	4639      	mov	r1, r7
9001de44:	9a12      	ldr	r2, [sp, #72]	; 0x48
9001de46:	f7ff fc63 	bl	9001d710 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh>
9001de4a:	e757      	b.n	9001dcfc <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
9001de4c:	9b29      	ldr	r3, [sp, #164]	; 0xa4
9001de4e:	f3c5 3003 	ubfx	r0, r5, #12, #4
9001de52:	9c29      	ldr	r4, [sp, #164]	; 0xa4
9001de54:	f3c3 3203 	ubfx	r2, r3, #12, #4
9001de58:	9b30      	ldr	r3, [sp, #192]	; 0xc0
9001de5a:	1427      	asrs	r7, r4, #16
9001de5c:	9c12      	ldr	r4, [sp, #72]	; 0x48
9001de5e:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
9001de62:	142b      	asrs	r3, r5, #16
9001de64:	fb01 7303 	mla	r3, r1, r3, r7
9001de68:	18e7      	adds	r7, r4, r3
9001de6a:	5ce3      	ldrb	r3, [r4, r3]
9001de6c:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
9001de70:	ea4f 6c13 	mov.w	ip, r3, lsr #24
9001de74:	2a00      	cmp	r2, #0
9001de76:	f000 8137 	beq.w	9001e0e8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x744>
9001de7a:	f897 e001 	ldrb.w	lr, [r7, #1]
9001de7e:	f856 402e 	ldr.w	r4, [r6, lr, lsl #2]
9001de82:	9410      	str	r4, [sp, #64]	; 0x40
9001de84:	0e24      	lsrs	r4, r4, #24
9001de86:	9417      	str	r4, [sp, #92]	; 0x5c
9001de88:	b170      	cbz	r0, 9001dea8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x504>
9001de8a:	eb07 0e01 	add.w	lr, r7, r1
9001de8e:	5c79      	ldrb	r1, [r7, r1]
9001de90:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
9001de94:	910b      	str	r1, [sp, #44]	; 0x2c
9001de96:	0e09      	lsrs	r1, r1, #24
9001de98:	9114      	str	r1, [sp, #80]	; 0x50
9001de9a:	f89e 1001 	ldrb.w	r1, [lr, #1]
9001de9e:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
9001dea2:	9111      	str	r1, [sp, #68]	; 0x44
9001dea4:	0e09      	lsrs	r1, r1, #24
9001dea6:	9118      	str	r1, [sp, #96]	; 0x60
9001dea8:	b292      	uxth	r2, r2
9001deaa:	9917      	ldr	r1, [sp, #92]	; 0x5c
9001deac:	b280      	uxth	r0, r0
9001deae:	9c14      	ldr	r4, [sp, #80]	; 0x50
9001deb0:	fb02 f800 	mul.w	r8, r2, r0
9001deb4:	0112      	lsls	r2, r2, #4
9001deb6:	ebc8 1000 	rsb	r0, r8, r0, lsl #4
9001deba:	eba2 0e08 	sub.w	lr, r2, r8
9001debe:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
9001dec2:	b280      	uxth	r0, r0
9001dec4:	fa1f fe8e 	uxth.w	lr, lr
9001dec8:	1a12      	subs	r2, r2, r0
9001deca:	fb0e f101 	mul.w	r1, lr, r1
9001dece:	b292      	uxth	r2, r2
9001ded0:	fb02 110c 	mla	r1, r2, ip, r1
9001ded4:	fb00 1104 	mla	r1, r0, r4, r1
9001ded8:	9c18      	ldr	r4, [sp, #96]	; 0x60
9001deda:	fb08 1104 	mla	r1, r8, r4, r1
9001dede:	f3c1 2107 	ubfx	r1, r1, #8, #8
9001dee2:	2900      	cmp	r1, #0
9001dee4:	f000 80f5 	beq.w	9001e0d2 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72e>
9001dee8:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
9001deec:	d019      	beq.n	9001df22 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x57e>
9001deee:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
9001def2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
9001def6:	fb0c fa0a 	mul.w	sl, ip, sl
9001defa:	fb0c fc03 	mul.w	ip, ip, r3
9001defe:	ea4f 231a 	mov.w	r3, sl, lsr #8
9001df02:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
9001df06:	f50c 7780 	add.w	r7, ip, #256	; 0x100
9001df0a:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
9001df0e:	eb07 271c 	add.w	r7, r7, ip, lsr #8
9001df12:	4453      	add	r3, sl
9001df14:	0a3f      	lsrs	r7, r7, #8
9001df16:	0a1b      	lsrs	r3, r3, #8
9001df18:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
9001df1c:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
9001df20:	433b      	orrs	r3, r7
9001df22:	9c17      	ldr	r4, [sp, #92]	; 0x5c
9001df24:	2cff      	cmp	r4, #255	; 0xff
9001df26:	d020      	beq.n	9001df6a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c6>
9001df28:	9c10      	ldr	r4, [sp, #64]	; 0x40
9001df2a:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
9001df2e:	9c17      	ldr	r4, [sp, #92]	; 0x5c
9001df30:	4367      	muls	r7, r4
9001df32:	9c10      	ldr	r4, [sp, #64]	; 0x40
9001df34:	ea4f 2c17 	mov.w	ip, r7, lsr #8
9001df38:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
9001df3c:	9c17      	ldr	r4, [sp, #92]	; 0x5c
9001df3e:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
9001df42:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
9001df46:	fb04 fa0a 	mul.w	sl, r4, sl
9001df4a:	44bc      	add	ip, r7
9001df4c:	f50a 7780 	add.w	r7, sl, #256	; 0x100
9001df50:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
9001df54:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
9001df58:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
9001df5c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
9001df60:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
9001df64:	ea4c 040a 	orr.w	r4, ip, sl
9001df68:	9410      	str	r4, [sp, #64]	; 0x40
9001df6a:	9c14      	ldr	r4, [sp, #80]	; 0x50
9001df6c:	2cff      	cmp	r4, #255	; 0xff
9001df6e:	d020      	beq.n	9001dfb2 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60e>
9001df70:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
9001df72:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
9001df76:	9c14      	ldr	r4, [sp, #80]	; 0x50
9001df78:	4367      	muls	r7, r4
9001df7a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
9001df7c:	ea4f 2c17 	mov.w	ip, r7, lsr #8
9001df80:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
9001df84:	9c14      	ldr	r4, [sp, #80]	; 0x50
9001df86:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
9001df8a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
9001df8e:	fb04 fa0a 	mul.w	sl, r4, sl
9001df92:	44bc      	add	ip, r7
9001df94:	f50a 7780 	add.w	r7, sl, #256	; 0x100
9001df98:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
9001df9c:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
9001dfa0:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
9001dfa4:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
9001dfa8:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
9001dfac:	ea4c 040a 	orr.w	r4, ip, sl
9001dfb0:	940b      	str	r4, [sp, #44]	; 0x2c
9001dfb2:	9c18      	ldr	r4, [sp, #96]	; 0x60
9001dfb4:	2cff      	cmp	r4, #255	; 0xff
9001dfb6:	d020      	beq.n	9001dffa <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x656>
9001dfb8:	9c11      	ldr	r4, [sp, #68]	; 0x44
9001dfba:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
9001dfbe:	9c18      	ldr	r4, [sp, #96]	; 0x60
9001dfc0:	4367      	muls	r7, r4
9001dfc2:	9c11      	ldr	r4, [sp, #68]	; 0x44
9001dfc4:	ea4f 2c17 	mov.w	ip, r7, lsr #8
9001dfc8:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
9001dfcc:	9c18      	ldr	r4, [sp, #96]	; 0x60
9001dfce:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
9001dfd2:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
9001dfd6:	fb04 fa0a 	mul.w	sl, r4, sl
9001dfda:	44bc      	add	ip, r7
9001dfdc:	f50a 7780 	add.w	r7, sl, #256	; 0x100
9001dfe0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
9001dfe4:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
9001dfe8:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
9001dfec:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
9001dff0:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
9001dff4:	ea4c 040a 	orr.w	r4, ip, sl
9001dff8:	9411      	str	r4, [sp, #68]	; 0x44
9001dffa:	9c10      	ldr	r4, [sp, #64]	; 0x40
9001dffc:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
9001e000:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
9001e004:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
9001e008:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
9001e00a:	fb0e f707 	mul.w	r7, lr, r7
9001e00e:	fb02 770c 	mla	r7, r2, ip, r7
9001e012:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
9001e016:	9c11      	ldr	r4, [sp, #68]	; 0x44
9001e018:	fb00 770c 	mla	r7, r0, ip, r7
9001e01c:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
9001e020:	9c10      	ldr	r4, [sp, #64]	; 0x40
9001e022:	fb08 770c 	mla	r7, r8, ip, r7
9001e026:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
9001e02a:	9c0d      	ldr	r4, [sp, #52]	; 0x34
9001e02c:	fb0e fe0c 	mul.w	lr, lr, ip
9001e030:	0a3f      	lsrs	r7, r7, #8
9001e032:	fb02 e303 	mla	r3, r2, r3, lr
9001e036:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
9001e038:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
9001e03c:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
9001e040:	9a11      	ldr	r2, [sp, #68]	; 0x44
9001e042:	fb00 330a 	mla	r3, r0, sl, r3
9001e046:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
9001e04a:	f8b9 0000 	ldrh.w	r0, [r9]
9001e04e:	fb08 3c0c 	mla	ip, r8, ip, r3
9001e052:	9b0d      	ldr	r3, [sp, #52]	; 0x34
9001e054:	1202      	asrs	r2, r0, #8
9001e056:	434b      	muls	r3, r1
9001e058:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
9001e05c:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
9001e060:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
9001e064:	1c59      	adds	r1, r3, #1
9001e066:	ea47 070c 	orr.w	r7, r7, ip
9001e06a:	eb01 2113 	add.w	r1, r1, r3, lsr #8
9001e06e:	0c3b      	lsrs	r3, r7, #16
9001e070:	ea6f 2111 	mvn.w	r1, r1, lsr #8
9001e074:	f3c7 2c07 	ubfx	ip, r7, #8, #8
9001e078:	b2ff      	uxtb	r7, r7
9001e07a:	fb13 f304 	smulbb	r3, r3, r4
9001e07e:	b2c9      	uxtb	r1, r1
9001e080:	fb1c fc04 	smulbb	ip, ip, r4
9001e084:	fb02 3201 	mla	r2, r2, r1, r3
9001e088:	10c3      	asrs	r3, r0, #3
9001e08a:	fb17 f704 	smulbb	r7, r7, r4
9001e08e:	00c0      	lsls	r0, r0, #3
9001e090:	b292      	uxth	r2, r2
9001e092:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
9001e096:	b2c0      	uxtb	r0, r0
9001e098:	fb03 c301 	mla	r3, r3, r1, ip
9001e09c:	f102 0c01 	add.w	ip, r2, #1
9001e0a0:	fb00 7001 	mla	r0, r0, r1, r7
9001e0a4:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
9001e0a8:	b280      	uxth	r0, r0
9001e0aa:	f402 4c78 	and.w	ip, r2, #63488	; 0xf800
9001e0ae:	b29b      	uxth	r3, r3
9001e0b0:	1c42      	adds	r2, r0, #1
9001e0b2:	eb02 2210 	add.w	r2, r2, r0, lsr #8
9001e0b6:	f3c2 22c4 	ubfx	r2, r2, #11, #5
9001e0ba:	ea42 020c 	orr.w	r2, r2, ip
9001e0be:	f103 0c01 	add.w	ip, r3, #1
9001e0c2:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
9001e0c6:	095b      	lsrs	r3, r3, #5
9001e0c8:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
9001e0cc:	431a      	orrs	r2, r3
9001e0ce:	f8a9 2000 	strh.w	r2, [r9]
9001e0d2:	9b2b      	ldr	r3, [sp, #172]	; 0xac
9001e0d4:	f109 0902 	add.w	r9, r9, #2
9001e0d8:	9a29      	ldr	r2, [sp, #164]	; 0xa4
9001e0da:	f10b 3bff 	add.w	fp, fp, #4294967295
9001e0de:	441a      	add	r2, r3
9001e0e0:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
9001e0e2:	9229      	str	r2, [sp, #164]	; 0xa4
9001e0e4:	441d      	add	r5, r3
9001e0e6:	e63d      	b.n	9001dd64 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c0>
9001e0e8:	2800      	cmp	r0, #0
9001e0ea:	f43f aedd 	beq.w	9001dea8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x504>
9001e0ee:	5c79      	ldrb	r1, [r7, r1]
9001e0f0:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
9001e0f4:	910b      	str	r1, [sp, #44]	; 0x2c
9001e0f6:	0e09      	lsrs	r1, r1, #24
9001e0f8:	9114      	str	r1, [sp, #80]	; 0x50
9001e0fa:	e6d5      	b.n	9001dea8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x504>
9001e0fc:	b01f      	add	sp, #124	; 0x7c
9001e0fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

9001e102 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh>:
9001e102:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001e106:	b089      	sub	sp, #36	; 0x24
9001e108:	9101      	str	r1, [sp, #4]
9001e10a:	9801      	ldr	r0, [sp, #4]
9001e10c:	f9bd c048 	ldrsh.w	ip, [sp, #72]	; 0x48
9001e110:	8800      	ldrh	r0, [r0, #0]
9001e112:	f9bd 804c 	ldrsh.w	r8, [sp, #76]	; 0x4c
9001e116:	1206      	asrs	r6, r0, #8
9001e118:	f89d 5058 	ldrb.w	r5, [sp, #88]	; 0x58
9001e11c:	f89d 405c 	ldrb.w	r4, [sp, #92]	; 0x5c
9001e120:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
9001e124:	9602      	str	r6, [sp, #8]
9001e126:	10c6      	asrs	r6, r0, #3
9001e128:	00c0      	lsls	r0, r0, #3
9001e12a:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
9001e12e:	b2c0      	uxtb	r0, r0
9001e130:	9603      	str	r6, [sp, #12]
9001e132:	9004      	str	r0, [sp, #16]
9001e134:	e9dd 1714 	ldrd	r1, r7, [sp, #80]	; 0x50
9001e138:	fb07 100c 	mla	r0, r7, ip, r1
9001e13c:	2f00      	cmp	r7, #0
9001e13e:	eb02 0e00 	add.w	lr, r2, r0
9001e142:	f2c0 810a 	blt.w	9001e35a <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x258>
9001e146:	45b8      	cmp	r8, r7
9001e148:	f340 8107 	ble.w	9001e35a <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x258>
9001e14c:	2900      	cmp	r1, #0
9001e14e:	f2c0 8102 	blt.w	9001e356 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x254>
9001e152:	458c      	cmp	ip, r1
9001e154:	f340 80ff 	ble.w	9001e356 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x254>
9001e158:	5c12      	ldrb	r2, [r2, r0]
9001e15a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
9001e15e:	1c4a      	adds	r2, r1, #1
9001e160:	f100 80fe 	bmi.w	9001e360 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x25e>
9001e164:	4594      	cmp	ip, r2
9001e166:	f340 80fb 	ble.w	9001e360 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x25e>
9001e16a:	2d00      	cmp	r5, #0
9001e16c:	f000 80fa 	beq.w	9001e364 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x262>
9001e170:	f89e 2001 	ldrb.w	r2, [lr, #1]
9001e174:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
9001e178:	3701      	adds	r7, #1
9001e17a:	f100 80f7 	bmi.w	9001e36c <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x26a>
9001e17e:	45b8      	cmp	r8, r7
9001e180:	f340 80f4 	ble.w	9001e36c <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x26a>
9001e184:	2c00      	cmp	r4, #0
9001e186:	f000 80f4 	beq.w	9001e372 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x270>
9001e18a:	2900      	cmp	r1, #0
9001e18c:	eb0e 020c 	add.w	r2, lr, ip
9001e190:	f2c0 80ea 	blt.w	9001e368 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x266>
9001e194:	458c      	cmp	ip, r1
9001e196:	f340 80e7 	ble.w	9001e368 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x266>
9001e19a:	f81e 700c 	ldrb.w	r7, [lr, ip]
9001e19e:	f853 7027 	ldr.w	r7, [r3, r7, lsl #2]
9001e1a2:	3101      	adds	r1, #1
9001e1a4:	f100 80e8 	bmi.w	9001e378 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x276>
9001e1a8:	458c      	cmp	ip, r1
9001e1aa:	f340 80e5 	ble.w	9001e378 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x276>
9001e1ae:	2d00      	cmp	r5, #0
9001e1b0:	f000 80e4 	beq.w	9001e37c <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x27a>
9001e1b4:	7852      	ldrb	r2, [r2, #1]
9001e1b6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
9001e1ba:	0e0b      	lsrs	r3, r1, #24
9001e1bc:	f007 1cff 	and.w	ip, r7, #16711935	; 0xff00ff
9001e1c0:	ea4f 6a10 	mov.w	sl, r0, lsr #24
9001e1c4:	9300      	str	r3, [sp, #0]
9001e1c6:	b2a4      	uxth	r4, r4
9001e1c8:	b2ab      	uxth	r3, r5
9001e1ca:	f000 15ff 	and.w	r5, r0, #16711935	; 0xff00ff
9001e1ce:	ea4f 6b16 	mov.w	fp, r6, lsr #24
9001e1d2:	fb03 f904 	mul.w	r9, r3, r4
9001e1d6:	011b      	lsls	r3, r3, #4
9001e1d8:	fb0a f505 	mul.w	r5, sl, r5
9001e1dc:	ea4f 6817 	mov.w	r8, r7, lsr #24
9001e1e0:	eba3 0e09 	sub.w	lr, r3, r9
9001e1e4:	f5c3 7280 	rsb	r2, r3, #256	; 0x100
9001e1e8:	f400 437f 	and.w	r3, r0, #65280	; 0xff00
9001e1ec:	0a28      	lsrs	r0, r5, #8
9001e1ee:	f105 1501 	add.w	r5, r5, #65537	; 0x10001
9001e1f2:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
9001e1f6:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
9001e1fa:	fb0a f303 	mul.w	r3, sl, r3
9001e1fe:	fb08 f707 	mul.w	r7, r8, r7
9001e202:	ebc9 1404 	rsb	r4, r9, r4, lsl #4
9001e206:	4405      	add	r5, r0
9001e208:	fb08 fc0c 	mul.w	ip, r8, ip
9001e20c:	b2a4      	uxth	r4, r4
9001e20e:	0a2d      	lsrs	r5, r5, #8
9001e210:	fa1f fe8e 	uxth.w	lr, lr
9001e214:	1b12      	subs	r2, r2, r4
9001e216:	f005 10ff 	and.w	r0, r5, #16711935	; 0xff00ff
9001e21a:	b292      	uxth	r2, r2
9001e21c:	9005      	str	r0, [sp, #20]
9001e21e:	f503 7080 	add.w	r0, r3, #256	; 0x100
9001e222:	eb00 2313 	add.w	r3, r0, r3, lsr #8
9001e226:	ea4f 201c 	mov.w	r0, ip, lsr #8
9001e22a:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
9001e22e:	0a1b      	lsrs	r3, r3, #8
9001e230:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
9001e234:	9306      	str	r3, [sp, #24]
9001e236:	f006 13ff 	and.w	r3, r6, #16711935	; 0xff00ff
9001e23a:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
9001e23e:	4460      	add	r0, ip
9001e240:	fb0b f303 	mul.w	r3, fp, r3
9001e244:	fb0b f606 	mul.w	r6, fp, r6
9001e248:	0a00      	lsrs	r0, r0, #8
9001e24a:	0a1d      	lsrs	r5, r3, #8
9001e24c:	f103 1301 	add.w	r3, r3, #65537	; 0x10001
9001e250:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
9001e254:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
9001e258:	441d      	add	r5, r3
9001e25a:	f506 7380 	add.w	r3, r6, #256	; 0x100
9001e25e:	eb03 2616 	add.w	r6, r3, r6, lsr #8
9001e262:	f507 7380 	add.w	r3, r7, #256	; 0x100
9001e266:	0a2d      	lsrs	r5, r5, #8
9001e268:	eb03 2317 	add.w	r3, r3, r7, lsr #8
9001e26c:	f001 17ff 	and.w	r7, r1, #16711935	; 0xff00ff
9001e270:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
9001e274:	0a36      	lsrs	r6, r6, #8
9001e276:	0a1b      	lsrs	r3, r3, #8
9001e278:	fb05 f50e 	mul.w	r5, r5, lr
9001e27c:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
9001e280:	9307      	str	r3, [sp, #28]
9001e282:	0e0b      	lsrs	r3, r1, #24
9001e284:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
9001e288:	fb0e f606 	mul.w	r6, lr, r6
9001e28c:	435f      	muls	r7, r3
9001e28e:	4359      	muls	r1, r3
9001e290:	9b05      	ldr	r3, [sp, #20]
9001e292:	ea4f 2c17 	mov.w	ip, r7, lsr #8
9001e296:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
9001e29a:	fb03 5502 	mla	r5, r3, r2, r5
9001e29e:	9b06      	ldr	r3, [sp, #24]
9001e2a0:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
9001e2a4:	fb0e fe0b 	mul.w	lr, lr, fp
9001e2a8:	44bc      	add	ip, r7
9001e2aa:	f501 7780 	add.w	r7, r1, #256	; 0x100
9001e2ae:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
9001e2b2:	eb07 2111 	add.w	r1, r7, r1, lsr #8
9001e2b6:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
9001e2ba:	0a09      	lsrs	r1, r1, #8
9001e2bc:	fb0c 5509 	mla	r5, ip, r9, r5
9001e2c0:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
9001e2c4:	fb00 5504 	mla	r5, r0, r4, r5
9001e2c8:	f403 407f 	and.w	r0, r3, #65280	; 0xff00
9001e2cc:	9b07      	ldr	r3, [sp, #28]
9001e2ce:	fb02 6000 	mla	r0, r2, r0, r6
9001e2d2:	0a2d      	lsrs	r5, r5, #8
9001e2d4:	fb02 e20a 	mla	r2, r2, sl, lr
9001e2d8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
9001e2dc:	fb09 0001 	mla	r0, r9, r1, r0
9001e2e0:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
9001e2e4:	fb04 0003 	mla	r0, r4, r3, r0
9001e2e8:	9b00      	ldr	r3, [sp, #0]
9001e2ea:	fb04 2408 	mla	r4, r4, r8, r2
9001e2ee:	9a04      	ldr	r2, [sp, #16]
9001e2f0:	0a00      	lsrs	r0, r0, #8
9001e2f2:	fb09 4903 	mla	r9, r9, r3, r4
9001e2f6:	9b02      	ldr	r3, [sp, #8]
9001e2f8:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
9001e2fc:	ea6f 2929 	mvn.w	r9, r9, asr #8
9001e300:	4305      	orrs	r5, r0
9001e302:	fa5f f989 	uxtb.w	r9, r9
9001e306:	fb03 f109 	mul.w	r1, r3, r9
9001e30a:	9b03      	ldr	r3, [sp, #12]
9001e30c:	fb03 f309 	mul.w	r3, r3, r9
9001e310:	fb02 f909 	mul.w	r9, r2, r9
9001e314:	1c4a      	adds	r2, r1, #1
9001e316:	1c58      	adds	r0, r3, #1
9001e318:	eb02 2111 	add.w	r1, r2, r1, lsr #8
9001e31c:	eb00 2013 	add.w	r0, r0, r3, lsr #8
9001e320:	0c2a      	lsrs	r2, r5, #16
9001e322:	0a2b      	lsrs	r3, r5, #8
9001e324:	eb02 2211 	add.w	r2, r2, r1, lsr #8
9001e328:	eb03 2310 	add.w	r3, r3, r0, lsr #8
9001e32c:	0212      	lsls	r2, r2, #8
9001e32e:	00db      	lsls	r3, r3, #3
9001e330:	f402 4278 	and.w	r2, r2, #63488	; 0xf800
9001e334:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
9001e338:	4313      	orrs	r3, r2
9001e33a:	f109 0201 	add.w	r2, r9, #1
9001e33e:	eb02 2919 	add.w	r9, r2, r9, lsr #8
9001e342:	eb05 2519 	add.w	r5, r5, r9, lsr #8
9001e346:	f3c5 05c4 	ubfx	r5, r5, #3, #5
9001e34a:	431d      	orrs	r5, r3
9001e34c:	9b01      	ldr	r3, [sp, #4]
9001e34e:	801d      	strh	r5, [r3, #0]
9001e350:	b009      	add	sp, #36	; 0x24
9001e352:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9001e356:	2000      	movs	r0, #0
9001e358:	e701      	b.n	9001e15e <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x5c>
9001e35a:	2600      	movs	r6, #0
9001e35c:	4630      	mov	r0, r6
9001e35e:	e70b      	b.n	9001e178 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x76>
9001e360:	2600      	movs	r6, #0
9001e362:	e709      	b.n	9001e178 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x76>
9001e364:	462e      	mov	r6, r5
9001e366:	e707      	b.n	9001e178 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x76>
9001e368:	2700      	movs	r7, #0
9001e36a:	e71a      	b.n	9001e1a2 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xa0>
9001e36c:	2100      	movs	r1, #0
9001e36e:	460f      	mov	r7, r1
9001e370:	e723      	b.n	9001e1ba <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xb8>
9001e372:	4621      	mov	r1, r4
9001e374:	4627      	mov	r7, r4
9001e376:	e720      	b.n	9001e1ba <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xb8>
9001e378:	2100      	movs	r1, #0
9001e37a:	e71e      	b.n	9001e1ba <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xb8>
9001e37c:	4629      	mov	r1, r5
9001e37e:	e71c      	b.n	9001e1ba <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xb8>

9001e380 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
9001e380:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001e384:	b09b      	sub	sp, #108	; 0x6c
9001e386:	9218      	str	r2, [sp, #96]	; 0x60
9001e388:	9a29      	ldr	r2, [sp, #164]	; 0xa4
9001e38a:	9019      	str	r0, [sp, #100]	; 0x64
9001e38c:	9116      	str	r1, [sp, #88]	; 0x58
9001e38e:	6850      	ldr	r0, [r2, #4]
9001e390:	9307      	str	r3, [sp, #28]
9001e392:	6812      	ldr	r2, [r2, #0]
9001e394:	9d26      	ldr	r5, [sp, #152]	; 0x98
9001e396:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	; 0xa8
9001e39a:	fb00 1303 	mla	r3, r0, r3, r1
9001e39e:	eb02 0343 	add.w	r3, r2, r3, lsl #1
9001e3a2:	930a      	str	r3, [sp, #40]	; 0x28
9001e3a4:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
9001e3a6:	681b      	ldr	r3, [r3, #0]
9001e3a8:	930f      	str	r3, [sp, #60]	; 0x3c
9001e3aa:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
9001e3ac:	685e      	ldr	r6, [r3, #4]
9001e3ae:	3604      	adds	r6, #4
9001e3b0:	9b16      	ldr	r3, [sp, #88]	; 0x58
9001e3b2:	2b00      	cmp	r3, #0
9001e3b4:	dc03      	bgt.n	9001e3be <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
9001e3b6:	9b18      	ldr	r3, [sp, #96]	; 0x60
9001e3b8:	2b00      	cmp	r3, #0
9001e3ba:	f340 8373 	ble.w	9001eaa4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x724>
9001e3be:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
9001e3c0:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
9001e3c4:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
9001e3c8:	1e48      	subs	r0, r1, #1
9001e3ca:	1e57      	subs	r7, r2, #1
9001e3cc:	9b07      	ldr	r3, [sp, #28]
9001e3ce:	2b00      	cmp	r3, #0
9001e3d0:	f340 818f 	ble.w	9001e6f2 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x372>
9001e3d4:	9c25      	ldr	r4, [sp, #148]	; 0x94
9001e3d6:	142b      	asrs	r3, r5, #16
9001e3d8:	ea5f 4c24 	movs.w	ip, r4, asr #16
9001e3dc:	d406      	bmi.n	9001e3ec <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
9001e3de:	4584      	cmp	ip, r0
9001e3e0:	da04      	bge.n	9001e3ec <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
9001e3e2:	2b00      	cmp	r3, #0
9001e3e4:	db02      	blt.n	9001e3ec <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
9001e3e6:	42bb      	cmp	r3, r7
9001e3e8:	f2c0 8184 	blt.w	9001e6f4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x374>
9001e3ec:	f11c 0c01 	adds.w	ip, ip, #1
9001e3f0:	f100 8172 	bmi.w	9001e6d8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
9001e3f4:	4561      	cmp	r1, ip
9001e3f6:	f2c0 816f 	blt.w	9001e6d8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
9001e3fa:	3301      	adds	r3, #1
9001e3fc:	f100 816c 	bmi.w	9001e6d8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
9001e400:	429a      	cmp	r2, r3
9001e402:	f2c0 8169 	blt.w	9001e6d8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
9001e406:	9b07      	ldr	r3, [sp, #28]
9001e408:	9f0a      	ldr	r7, [sp, #40]	; 0x28
9001e40a:	9317      	str	r3, [sp, #92]	; 0x5c
9001e40c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
9001e40e:	2b00      	cmp	r3, #0
9001e410:	f340 818e 	ble.w	9001e730 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b0>
9001e414:	9b25      	ldr	r3, [sp, #148]	; 0x94
9001e416:	ea4f 4c25 	mov.w	ip, r5, asr #16
9001e41a:	f3c5 3003 	ubfx	r0, r5, #12, #4
9001e41e:	f3c3 3203 	ubfx	r2, r3, #12, #4
9001e422:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
9001e424:	e9d3 1e02 	ldrd	r1, lr, [r3, #8]
9001e428:	9b25      	ldr	r3, [sp, #148]	; 0x94
9001e42a:	141b      	asrs	r3, r3, #16
9001e42c:	f100 81d1 	bmi.w	9001e7d2 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
9001e430:	f101 38ff 	add.w	r8, r1, #4294967295
9001e434:	4543      	cmp	r3, r8
9001e436:	f280 81cc 	bge.w	9001e7d2 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
9001e43a:	f1bc 0f00 	cmp.w	ip, #0
9001e43e:	f2c0 81c8 	blt.w	9001e7d2 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
9001e442:	f10e 38ff 	add.w	r8, lr, #4294967295
9001e446:	45c4      	cmp	ip, r8
9001e448:	f280 81c3 	bge.w	9001e7d2 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
9001e44c:	b209      	sxth	r1, r1
9001e44e:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
9001e450:	fb0c 3301 	mla	r3, ip, r1, r3
9001e454:	eb04 0803 	add.w	r8, r4, r3
9001e458:	5ce3      	ldrb	r3, [r4, r3]
9001e45a:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
9001e45e:	ea4f 6e13 	mov.w	lr, r3, lsr #24
9001e462:	2a00      	cmp	r2, #0
9001e464:	f000 81aa 	beq.w	9001e7bc <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x43c>
9001e468:	f898 c001 	ldrb.w	ip, [r8, #1]
9001e46c:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
9001e470:	940b      	str	r4, [sp, #44]	; 0x2c
9001e472:	0e24      	lsrs	r4, r4, #24
9001e474:	9412      	str	r4, [sp, #72]	; 0x48
9001e476:	b178      	cbz	r0, 9001e498 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
9001e478:	eb08 0c01 	add.w	ip, r8, r1
9001e47c:	f818 1001 	ldrb.w	r1, [r8, r1]
9001e480:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
9001e484:	9108      	str	r1, [sp, #32]
9001e486:	0e09      	lsrs	r1, r1, #24
9001e488:	9110      	str	r1, [sp, #64]	; 0x40
9001e48a:	f89c 1001 	ldrb.w	r1, [ip, #1]
9001e48e:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
9001e492:	910c      	str	r1, [sp, #48]	; 0x30
9001e494:	0e09      	lsrs	r1, r1, #24
9001e496:	9113      	str	r1, [sp, #76]	; 0x4c
9001e498:	b292      	uxth	r2, r2
9001e49a:	9912      	ldr	r1, [sp, #72]	; 0x48
9001e49c:	b280      	uxth	r0, r0
9001e49e:	9c10      	ldr	r4, [sp, #64]	; 0x40
9001e4a0:	fb02 f900 	mul.w	r9, r2, r0
9001e4a4:	0112      	lsls	r2, r2, #4
9001e4a6:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
9001e4aa:	eba2 0809 	sub.w	r8, r2, r9
9001e4ae:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
9001e4b2:	b280      	uxth	r0, r0
9001e4b4:	fa1f f888 	uxth.w	r8, r8
9001e4b8:	1a12      	subs	r2, r2, r0
9001e4ba:	fb08 f101 	mul.w	r1, r8, r1
9001e4be:	b292      	uxth	r2, r2
9001e4c0:	fb02 110e 	mla	r1, r2, lr, r1
9001e4c4:	fb00 1104 	mla	r1, r0, r4, r1
9001e4c8:	9c13      	ldr	r4, [sp, #76]	; 0x4c
9001e4ca:	fb09 1104 	mla	r1, r9, r4, r1
9001e4ce:	f3c1 2107 	ubfx	r1, r1, #8, #8
9001e4d2:	2900      	cmp	r1, #0
9001e4d4:	f000 80f5 	beq.w	9001e6c2 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
9001e4d8:	f1be 0fff 	cmp.w	lr, #255	; 0xff
9001e4dc:	d01b      	beq.n	9001e516 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
9001e4de:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
9001e4e2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
9001e4e6:	fb0e fa0a 	mul.w	sl, lr, sl
9001e4ea:	fb0e fe03 	mul.w	lr, lr, r3
9001e4ee:	ea4f 231a 	mov.w	r3, sl, lsr #8
9001e4f2:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
9001e4f6:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
9001e4fa:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
9001e4fe:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
9001e502:	4453      	add	r3, sl
9001e504:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
9001e508:	0a1b      	lsrs	r3, r3, #8
9001e50a:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
9001e50e:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
9001e512:	ea43 030c 	orr.w	r3, r3, ip
9001e516:	9c12      	ldr	r4, [sp, #72]	; 0x48
9001e518:	2cff      	cmp	r4, #255	; 0xff
9001e51a:	d021      	beq.n	9001e560 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
9001e51c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
9001e51e:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
9001e522:	9c12      	ldr	r4, [sp, #72]	; 0x48
9001e524:	fb04 fb0b 	mul.w	fp, r4, fp
9001e528:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
9001e52a:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
9001e52e:	9c12      	ldr	r4, [sp, #72]	; 0x48
9001e530:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
9001e534:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
9001e538:	fb04 fa0a 	mul.w	sl, r4, sl
9001e53c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
9001e540:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
9001e544:	44de      	add	lr, fp
9001e546:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
9001e54a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
9001e54e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
9001e552:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
9001e556:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
9001e55a:	ea4e 040a 	orr.w	r4, lr, sl
9001e55e:	940b      	str	r4, [sp, #44]	; 0x2c
9001e560:	9c10      	ldr	r4, [sp, #64]	; 0x40
9001e562:	2cff      	cmp	r4, #255	; 0xff
9001e564:	d021      	beq.n	9001e5aa <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
9001e566:	9c08      	ldr	r4, [sp, #32]
9001e568:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
9001e56c:	9c10      	ldr	r4, [sp, #64]	; 0x40
9001e56e:	fb04 fb0b 	mul.w	fp, r4, fp
9001e572:	9c08      	ldr	r4, [sp, #32]
9001e574:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
9001e578:	9c10      	ldr	r4, [sp, #64]	; 0x40
9001e57a:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
9001e57e:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
9001e582:	fb04 fa0a 	mul.w	sl, r4, sl
9001e586:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
9001e58a:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
9001e58e:	44de      	add	lr, fp
9001e590:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
9001e594:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
9001e598:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
9001e59c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
9001e5a0:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
9001e5a4:	ea4e 040a 	orr.w	r4, lr, sl
9001e5a8:	9408      	str	r4, [sp, #32]
9001e5aa:	9c13      	ldr	r4, [sp, #76]	; 0x4c
9001e5ac:	2cff      	cmp	r4, #255	; 0xff
9001e5ae:	d021      	beq.n	9001e5f4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x274>
9001e5b0:	9c0c      	ldr	r4, [sp, #48]	; 0x30
9001e5b2:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
9001e5b6:	9c13      	ldr	r4, [sp, #76]	; 0x4c
9001e5b8:	fb04 fb0b 	mul.w	fp, r4, fp
9001e5bc:	9c0c      	ldr	r4, [sp, #48]	; 0x30
9001e5be:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
9001e5c2:	9c13      	ldr	r4, [sp, #76]	; 0x4c
9001e5c4:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
9001e5c8:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
9001e5cc:	fb04 fa0a 	mul.w	sl, r4, sl
9001e5d0:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
9001e5d4:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
9001e5d8:	44de      	add	lr, fp
9001e5da:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
9001e5de:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
9001e5e2:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
9001e5e6:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
9001e5ea:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
9001e5ee:	ea4e 040a 	orr.w	r4, lr, sl
9001e5f2:	940c      	str	r4, [sp, #48]	; 0x30
9001e5f4:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
9001e5f6:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
9001e5fa:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
9001e5fe:	43c9      	mvns	r1, r1
9001e600:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
9001e604:	9c08      	ldr	r4, [sp, #32]
9001e606:	fb08 fc0c 	mul.w	ip, r8, ip
9001e60a:	fb02 cc0e 	mla	ip, r2, lr, ip
9001e60e:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
9001e612:	9c0c      	ldr	r4, [sp, #48]	; 0x30
9001e614:	fb00 cc0e 	mla	ip, r0, lr, ip
9001e618:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
9001e61c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
9001e61e:	fb09 cc0e 	mla	ip, r9, lr, ip
9001e622:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
9001e626:	fb08 f80e 	mul.w	r8, r8, lr
9001e62a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
9001e62e:	fa5f fe81 	uxtb.w	lr, r1
9001e632:	fb02 8303 	mla	r3, r2, r3, r8
9001e636:	9a08      	ldr	r2, [sp, #32]
9001e638:	f8b7 8000 	ldrh.w	r8, [r7]
9001e63c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
9001e640:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
9001e644:	9a0c      	ldr	r2, [sp, #48]	; 0x30
9001e646:	ea4f 01c8 	mov.w	r1, r8, lsl #3
9001e64a:	fb00 330a 	mla	r3, r0, sl, r3
9001e64e:	f402 407f 	and.w	r0, r2, #65280	; 0xff00
9001e652:	ea4f 2228 	mov.w	r2, r8, asr #8
9001e656:	fb09 3900 	mla	r9, r9, r0, r3
9001e65a:	ea4f 00e8 	mov.w	r0, r8, asr #3
9001e65e:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
9001e662:	b2c9      	uxtb	r1, r1
9001e664:	ea4f 2919 	mov.w	r9, r9, lsr #8
9001e668:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
9001e66c:	fb02 f20e 	mul.w	r2, r2, lr
9001e670:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
9001e674:	fb00 f00e 	mul.w	r0, r0, lr
9001e678:	1c53      	adds	r3, r2, #1
9001e67a:	fb01 f10e 	mul.w	r1, r1, lr
9001e67e:	ea4c 0c09 	orr.w	ip, ip, r9
9001e682:	eb03 2212 	add.w	r2, r3, r2, lsr #8
9001e686:	ea4f 431c 	mov.w	r3, ip, lsr #16
9001e68a:	eb03 2312 	add.w	r3, r3, r2, lsr #8
9001e68e:	4a60      	ldr	r2, [pc, #384]	; (9001e810 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x490>)
9001e690:	b2db      	uxtb	r3, r3
9001e692:	ea02 2203 	and.w	r2, r2, r3, lsl #8
9001e696:	1c43      	adds	r3, r0, #1
9001e698:	eb03 2010 	add.w	r0, r3, r0, lsr #8
9001e69c:	ea4f 231c 	mov.w	r3, ip, lsr #8
9001e6a0:	eb03 2310 	add.w	r3, r3, r0, lsr #8
9001e6a4:	00db      	lsls	r3, r3, #3
9001e6a6:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
9001e6aa:	4313      	orrs	r3, r2
9001e6ac:	1c4a      	adds	r2, r1, #1
9001e6ae:	eb02 2111 	add.w	r1, r2, r1, lsr #8
9001e6b2:	eb0c 2c11 	add.w	ip, ip, r1, lsr #8
9001e6b6:	f3cc 0cc4 	ubfx	ip, ip, #3, #5
9001e6ba:	ea4c 0c03 	orr.w	ip, ip, r3
9001e6be:	f8a7 c000 	strh.w	ip, [r7]
9001e6c2:	9b27      	ldr	r3, [sp, #156]	; 0x9c
9001e6c4:	3702      	adds	r7, #2
9001e6c6:	9a25      	ldr	r2, [sp, #148]	; 0x94
9001e6c8:	441a      	add	r2, r3
9001e6ca:	9b28      	ldr	r3, [sp, #160]	; 0xa0
9001e6cc:	441d      	add	r5, r3
9001e6ce:	9b17      	ldr	r3, [sp, #92]	; 0x5c
9001e6d0:	9225      	str	r2, [sp, #148]	; 0x94
9001e6d2:	3b01      	subs	r3, #1
9001e6d4:	9317      	str	r3, [sp, #92]	; 0x5c
9001e6d6:	e699      	b.n	9001e40c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
9001e6d8:	9b27      	ldr	r3, [sp, #156]	; 0x9c
9001e6da:	9c25      	ldr	r4, [sp, #148]	; 0x94
9001e6dc:	441c      	add	r4, r3
9001e6de:	9b28      	ldr	r3, [sp, #160]	; 0xa0
9001e6e0:	441d      	add	r5, r3
9001e6e2:	9b07      	ldr	r3, [sp, #28]
9001e6e4:	9425      	str	r4, [sp, #148]	; 0x94
9001e6e6:	3b01      	subs	r3, #1
9001e6e8:	9307      	str	r3, [sp, #28]
9001e6ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
9001e6ec:	3302      	adds	r3, #2
9001e6ee:	930a      	str	r3, [sp, #40]	; 0x28
9001e6f0:	e66c      	b.n	9001e3cc <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
9001e6f2:	d024      	beq.n	9001e73e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3be>
9001e6f4:	9b07      	ldr	r3, [sp, #28]
9001e6f6:	9827      	ldr	r0, [sp, #156]	; 0x9c
9001e6f8:	3b01      	subs	r3, #1
9001e6fa:	9c25      	ldr	r4, [sp, #148]	; 0x94
9001e6fc:	fb00 4003 	mla	r0, r0, r3, r4
9001e700:	1400      	asrs	r0, r0, #16
9001e702:	f53f ae80 	bmi.w	9001e406 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
9001e706:	3901      	subs	r1, #1
9001e708:	4288      	cmp	r0, r1
9001e70a:	f6bf ae7c 	bge.w	9001e406 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
9001e70e:	9928      	ldr	r1, [sp, #160]	; 0xa0
9001e710:	fb01 5303 	mla	r3, r1, r3, r5
9001e714:	141b      	asrs	r3, r3, #16
9001e716:	f53f ae76 	bmi.w	9001e406 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
9001e71a:	3a01      	subs	r2, #1
9001e71c:	4293      	cmp	r3, r2
9001e71e:	f6bf ae72 	bge.w	9001e406 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
9001e722:	f8dd b01c 	ldr.w	fp, [sp, #28]
9001e726:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
9001e72a:	f1bb 0f00 	cmp.w	fp, #0
9001e72e:	dc71      	bgt.n	9001e814 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x494>
9001e730:	9b07      	ldr	r3, [sp, #28]
9001e732:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
9001e736:	9b0a      	ldr	r3, [sp, #40]	; 0x28
9001e738:	eb03 0344 	add.w	r3, r3, r4, lsl #1
9001e73c:	930a      	str	r3, [sp, #40]	; 0x28
9001e73e:	9b16      	ldr	r3, [sp, #88]	; 0x58
9001e740:	2b00      	cmp	r3, #0
9001e742:	f340 81af 	ble.w	9001eaa4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x724>
9001e746:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
9001e74a:	9b24      	ldr	r3, [sp, #144]	; 0x90
9001e74c:	ee30 0a04 	vadd.f32	s0, s0, s8
9001e750:	ee70 0aa4 	vadd.f32	s1, s1, s9
9001e754:	eef0 6a62 	vmov.f32	s13, s5
9001e758:	eec7 7a00 	vdiv.f32	s15, s14, s0
9001e75c:	ee31 1a05 	vadd.f32	s2, s2, s10
9001e760:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
9001e764:	edcd 6a25 	vstr	s13, [sp, #148]	; 0x94
9001e768:	eef0 6a43 	vmov.f32	s13, s6
9001e76c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
9001e770:	ee16 5a90 	vmov	r5, s13
9001e774:	ee20 7aa7 	vmul.f32	s14, s1, s15
9001e778:	ee61 7a27 	vmul.f32	s15, s2, s15
9001e77c:	ee77 2a62 	vsub.f32	s5, s14, s5
9001e780:	ee37 3ac3 	vsub.f32	s6, s15, s6
9001e784:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
9001e788:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
9001e78c:	ee12 2a90 	vmov	r2, s5
9001e790:	eef0 2a47 	vmov.f32	s5, s14
9001e794:	fb92 f3f3 	sdiv	r3, r2, r3
9001e798:	ee13 2a10 	vmov	r2, s6
9001e79c:	9327      	str	r3, [sp, #156]	; 0x9c
9001e79e:	9b24      	ldr	r3, [sp, #144]	; 0x90
9001e7a0:	eeb0 3a67 	vmov.f32	s6, s15
9001e7a4:	fb92 f3f3 	sdiv	r3, r2, r3
9001e7a8:	9328      	str	r3, [sp, #160]	; 0xa0
9001e7aa:	9b16      	ldr	r3, [sp, #88]	; 0x58
9001e7ac:	9a18      	ldr	r2, [sp, #96]	; 0x60
9001e7ae:	3b01      	subs	r3, #1
9001e7b0:	9316      	str	r3, [sp, #88]	; 0x58
9001e7b2:	9b24      	ldr	r3, [sp, #144]	; 0x90
9001e7b4:	bf08      	it	eq
9001e7b6:	4613      	moveq	r3, r2
9001e7b8:	9307      	str	r3, [sp, #28]
9001e7ba:	e5f9      	b.n	9001e3b0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
9001e7bc:	2800      	cmp	r0, #0
9001e7be:	f43f ae6b 	beq.w	9001e498 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
9001e7c2:	f818 1001 	ldrb.w	r1, [r8, r1]
9001e7c6:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
9001e7ca:	9108      	str	r1, [sp, #32]
9001e7cc:	0e09      	lsrs	r1, r1, #24
9001e7ce:	9110      	str	r1, [sp, #64]	; 0x40
9001e7d0:	e662      	b.n	9001e498 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
9001e7d2:	f113 0801 	adds.w	r8, r3, #1
9001e7d6:	f53f af74 	bmi.w	9001e6c2 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
9001e7da:	4541      	cmp	r1, r8
9001e7dc:	f6ff af71 	blt.w	9001e6c2 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
9001e7e0:	f11c 0801 	adds.w	r8, ip, #1
9001e7e4:	f53f af6d 	bmi.w	9001e6c2 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
9001e7e8:	45c6      	cmp	lr, r8
9001e7ea:	f6ff af6a 	blt.w	9001e6c2 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
9001e7ee:	b209      	sxth	r1, r1
9001e7f0:	e9cd 3c02 	strd	r3, ip, [sp, #8]
9001e7f4:	fa0f f38e 	sxth.w	r3, lr
9001e7f8:	9100      	str	r1, [sp, #0]
9001e7fa:	4639      	mov	r1, r7
9001e7fc:	9301      	str	r3, [sp, #4]
9001e7fe:	4633      	mov	r3, r6
9001e800:	e9cd 2004 	strd	r2, r0, [sp, #16]
9001e804:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
9001e806:	9819      	ldr	r0, [sp, #100]	; 0x64
9001e808:	f7ff fc7b 	bl	9001e102 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh>
9001e80c:	e759      	b.n	9001e6c2 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
9001e80e:	bf00      	nop
9001e810:	fffff800 	.word	0xfffff800
9001e814:	9b25      	ldr	r3, [sp, #148]	; 0x94
9001e816:	f3c5 3003 	ubfx	r0, r5, #12, #4
9001e81a:	9c25      	ldr	r4, [sp, #148]	; 0x94
9001e81c:	f3c3 3203 	ubfx	r2, r3, #12, #4
9001e820:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
9001e822:	1427      	asrs	r7, r4, #16
9001e824:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
9001e826:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
9001e82a:	142b      	asrs	r3, r5, #16
9001e82c:	fb01 7303 	mla	r3, r1, r3, r7
9001e830:	18e7      	adds	r7, r4, r3
9001e832:	5ce3      	ldrb	r3, [r4, r3]
9001e834:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
9001e838:	ea4f 6c13 	mov.w	ip, r3, lsr #24
9001e83c:	2a00      	cmp	r2, #0
9001e83e:	f000 8127 	beq.w	9001ea90 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x710>
9001e842:	f897 e001 	ldrb.w	lr, [r7, #1]
9001e846:	f856 402e 	ldr.w	r4, [r6, lr, lsl #2]
9001e84a:	940d      	str	r4, [sp, #52]	; 0x34
9001e84c:	0e24      	lsrs	r4, r4, #24
9001e84e:	9414      	str	r4, [sp, #80]	; 0x50
9001e850:	b170      	cbz	r0, 9001e870 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f0>
9001e852:	eb07 0e01 	add.w	lr, r7, r1
9001e856:	5c79      	ldrb	r1, [r7, r1]
9001e858:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
9001e85c:	9109      	str	r1, [sp, #36]	; 0x24
9001e85e:	0e09      	lsrs	r1, r1, #24
9001e860:	9111      	str	r1, [sp, #68]	; 0x44
9001e862:	f89e 1001 	ldrb.w	r1, [lr, #1]
9001e866:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
9001e86a:	910e      	str	r1, [sp, #56]	; 0x38
9001e86c:	0e09      	lsrs	r1, r1, #24
9001e86e:	9115      	str	r1, [sp, #84]	; 0x54
9001e870:	b292      	uxth	r2, r2
9001e872:	9c11      	ldr	r4, [sp, #68]	; 0x44
9001e874:	b280      	uxth	r0, r0
9001e876:	fb02 f800 	mul.w	r8, r2, r0
9001e87a:	0112      	lsls	r2, r2, #4
9001e87c:	ebc8 1000 	rsb	r0, r8, r0, lsl #4
9001e880:	eba2 0e08 	sub.w	lr, r2, r8
9001e884:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
9001e888:	9a14      	ldr	r2, [sp, #80]	; 0x50
9001e88a:	b280      	uxth	r0, r0
9001e88c:	fa1f fe8e 	uxth.w	lr, lr
9001e890:	1a09      	subs	r1, r1, r0
9001e892:	fb0e f202 	mul.w	r2, lr, r2
9001e896:	b289      	uxth	r1, r1
9001e898:	fb01 220c 	mla	r2, r1, ip, r2
9001e89c:	fb00 2204 	mla	r2, r0, r4, r2
9001e8a0:	9c15      	ldr	r4, [sp, #84]	; 0x54
9001e8a2:	fb08 2204 	mla	r2, r8, r4, r2
9001e8a6:	f3c2 2207 	ubfx	r2, r2, #8, #8
9001e8aa:	2a00      	cmp	r2, #0
9001e8ac:	f000 80e5 	beq.w	9001ea7a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6fa>
9001e8b0:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
9001e8b4:	d019      	beq.n	9001e8ea <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56a>
9001e8b6:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
9001e8ba:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
9001e8be:	fb0c fa0a 	mul.w	sl, ip, sl
9001e8c2:	fb0c fc03 	mul.w	ip, ip, r3
9001e8c6:	ea4f 231a 	mov.w	r3, sl, lsr #8
9001e8ca:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
9001e8ce:	f50c 7780 	add.w	r7, ip, #256	; 0x100
9001e8d2:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
9001e8d6:	eb07 271c 	add.w	r7, r7, ip, lsr #8
9001e8da:	4453      	add	r3, sl
9001e8dc:	0a3f      	lsrs	r7, r7, #8
9001e8de:	0a1b      	lsrs	r3, r3, #8
9001e8e0:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
9001e8e4:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
9001e8e8:	433b      	orrs	r3, r7
9001e8ea:	9c14      	ldr	r4, [sp, #80]	; 0x50
9001e8ec:	2cff      	cmp	r4, #255	; 0xff
9001e8ee:	d020      	beq.n	9001e932 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5b2>
9001e8f0:	9c0d      	ldr	r4, [sp, #52]	; 0x34
9001e8f2:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
9001e8f6:	9c14      	ldr	r4, [sp, #80]	; 0x50
9001e8f8:	4367      	muls	r7, r4
9001e8fa:	9c0d      	ldr	r4, [sp, #52]	; 0x34
9001e8fc:	ea4f 2c17 	mov.w	ip, r7, lsr #8
9001e900:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
9001e904:	9c14      	ldr	r4, [sp, #80]	; 0x50
9001e906:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
9001e90a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
9001e90e:	fb04 fa0a 	mul.w	sl, r4, sl
9001e912:	44bc      	add	ip, r7
9001e914:	f50a 7780 	add.w	r7, sl, #256	; 0x100
9001e918:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
9001e91c:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
9001e920:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
9001e924:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
9001e928:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
9001e92c:	ea4c 040a 	orr.w	r4, ip, sl
9001e930:	940d      	str	r4, [sp, #52]	; 0x34
9001e932:	9c11      	ldr	r4, [sp, #68]	; 0x44
9001e934:	2cff      	cmp	r4, #255	; 0xff
9001e936:	d020      	beq.n	9001e97a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5fa>
9001e938:	9c09      	ldr	r4, [sp, #36]	; 0x24
9001e93a:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
9001e93e:	9c11      	ldr	r4, [sp, #68]	; 0x44
9001e940:	4367      	muls	r7, r4
9001e942:	9c09      	ldr	r4, [sp, #36]	; 0x24
9001e944:	ea4f 2c17 	mov.w	ip, r7, lsr #8
9001e948:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
9001e94c:	9c11      	ldr	r4, [sp, #68]	; 0x44
9001e94e:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
9001e952:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
9001e956:	fb04 fa0a 	mul.w	sl, r4, sl
9001e95a:	44bc      	add	ip, r7
9001e95c:	f50a 7780 	add.w	r7, sl, #256	; 0x100
9001e960:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
9001e964:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
9001e968:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
9001e96c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
9001e970:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
9001e974:	ea4c 040a 	orr.w	r4, ip, sl
9001e978:	9409      	str	r4, [sp, #36]	; 0x24
9001e97a:	9c15      	ldr	r4, [sp, #84]	; 0x54
9001e97c:	2cff      	cmp	r4, #255	; 0xff
9001e97e:	d020      	beq.n	9001e9c2 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x642>
9001e980:	9c0e      	ldr	r4, [sp, #56]	; 0x38
9001e982:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
9001e986:	9c15      	ldr	r4, [sp, #84]	; 0x54
9001e988:	4367      	muls	r7, r4
9001e98a:	9c0e      	ldr	r4, [sp, #56]	; 0x38
9001e98c:	ea4f 2c17 	mov.w	ip, r7, lsr #8
9001e990:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
9001e994:	9c15      	ldr	r4, [sp, #84]	; 0x54
9001e996:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
9001e99a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
9001e99e:	fb04 fa0a 	mul.w	sl, r4, sl
9001e9a2:	44bc      	add	ip, r7
9001e9a4:	f50a 7780 	add.w	r7, sl, #256	; 0x100
9001e9a8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
9001e9ac:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
9001e9b0:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
9001e9b4:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
9001e9b8:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
9001e9bc:	ea4c 040a 	orr.w	r4, ip, sl
9001e9c0:	940e      	str	r4, [sp, #56]	; 0x38
9001e9c2:	9c0d      	ldr	r4, [sp, #52]	; 0x34
9001e9c4:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
9001e9c8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
9001e9cc:	43d2      	mvns	r2, r2
9001e9ce:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
9001e9d2:	9c09      	ldr	r4, [sp, #36]	; 0x24
9001e9d4:	b2d2      	uxtb	r2, r2
9001e9d6:	fb0e f707 	mul.w	r7, lr, r7
9001e9da:	fb01 770c 	mla	r7, r1, ip, r7
9001e9de:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
9001e9e2:	9c0e      	ldr	r4, [sp, #56]	; 0x38
9001e9e4:	fb00 770c 	mla	r7, r0, ip, r7
9001e9e8:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
9001e9ec:	9c0d      	ldr	r4, [sp, #52]	; 0x34
9001e9ee:	fb08 770c 	mla	r7, r8, ip, r7
9001e9f2:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
9001e9f6:	fb0e fe0c 	mul.w	lr, lr, ip
9001e9fa:	0a3f      	lsrs	r7, r7, #8
9001e9fc:	fb01 e303 	mla	r3, r1, r3, lr
9001ea00:	9909      	ldr	r1, [sp, #36]	; 0x24
9001ea02:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
9001ea06:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
9001ea0a:	990e      	ldr	r1, [sp, #56]	; 0x38
9001ea0c:	fb00 330a 	mla	r3, r0, sl, r3
9001ea10:	f401 4c7f 	and.w	ip, r1, #65280	; 0xff00
9001ea14:	fb08 3c0c 	mla	ip, r8, ip, r3
9001ea18:	f8b9 3000 	ldrh.w	r3, [r9]
9001ea1c:	1218      	asrs	r0, r3, #8
9001ea1e:	10d9      	asrs	r1, r3, #3
9001ea20:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
9001ea24:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
9001ea28:	00db      	lsls	r3, r3, #3
9001ea2a:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
9001ea2e:	4350      	muls	r0, r2
9001ea30:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
9001ea34:	b2db      	uxtb	r3, r3
9001ea36:	4351      	muls	r1, r2
9001ea38:	ea47 070c 	orr.w	r7, r7, ip
9001ea3c:	4353      	muls	r3, r2
9001ea3e:	1c42      	adds	r2, r0, #1
9001ea40:	eb02 2010 	add.w	r0, r2, r0, lsr #8
9001ea44:	0c3a      	lsrs	r2, r7, #16
9001ea46:	eb02 2010 	add.w	r0, r2, r0, lsr #8
9001ea4a:	4a18      	ldr	r2, [pc, #96]	; (9001eaac <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72c>)
9001ea4c:	b2c0      	uxtb	r0, r0
9001ea4e:	ea02 2000 	and.w	r0, r2, r0, lsl #8
9001ea52:	1c4a      	adds	r2, r1, #1
9001ea54:	eb02 2111 	add.w	r1, r2, r1, lsr #8
9001ea58:	0a3a      	lsrs	r2, r7, #8
9001ea5a:	eb02 2111 	add.w	r1, r2, r1, lsr #8
9001ea5e:	00c9      	lsls	r1, r1, #3
9001ea60:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
9001ea64:	4301      	orrs	r1, r0
9001ea66:	1c58      	adds	r0, r3, #1
9001ea68:	eb00 2013 	add.w	r0, r0, r3, lsr #8
9001ea6c:	eb07 2710 	add.w	r7, r7, r0, lsr #8
9001ea70:	f3c7 00c4 	ubfx	r0, r7, #3, #5
9001ea74:	4308      	orrs	r0, r1
9001ea76:	f8a9 0000 	strh.w	r0, [r9]
9001ea7a:	9b27      	ldr	r3, [sp, #156]	; 0x9c
9001ea7c:	f109 0902 	add.w	r9, r9, #2
9001ea80:	9a25      	ldr	r2, [sp, #148]	; 0x94
9001ea82:	f10b 3bff 	add.w	fp, fp, #4294967295
9001ea86:	441a      	add	r2, r3
9001ea88:	9b28      	ldr	r3, [sp, #160]	; 0xa0
9001ea8a:	9225      	str	r2, [sp, #148]	; 0x94
9001ea8c:	441d      	add	r5, r3
9001ea8e:	e64c      	b.n	9001e72a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3aa>
9001ea90:	2800      	cmp	r0, #0
9001ea92:	f43f aeed 	beq.w	9001e870 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f0>
9001ea96:	5c79      	ldrb	r1, [r7, r1]
9001ea98:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
9001ea9c:	9109      	str	r1, [sp, #36]	; 0x24
9001ea9e:	0e09      	lsrs	r1, r1, #24
9001eaa0:	9111      	str	r1, [sp, #68]	; 0x44
9001eaa2:	e6e5      	b.n	9001e870 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f0>
9001eaa4:	b01b      	add	sp, #108	; 0x6c
9001eaa6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9001eaaa:	bf00      	nop
9001eaac:	fffff800 	.word	0xfffff800

9001eab0 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh>:
9001eab0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001eab4:	b085      	sub	sp, #20
9001eab6:	e9dd 7010 	ldrd	r7, r0, [sp, #64]	; 0x40
9001eaba:	f9bd 6038 	ldrsh.w	r6, [sp, #56]	; 0x38
9001eabe:	2800      	cmp	r0, #0
9001eac0:	9103      	str	r1, [sp, #12]
9001eac2:	fb00 7406 	mla	r4, r0, r6, r7
9001eac6:	f9bd b03c 	ldrsh.w	fp, [sp, #60]	; 0x3c
9001eaca:	f89d 1048 	ldrb.w	r1, [sp, #72]	; 0x48
9001eace:	eb02 0544 	add.w	r5, r2, r4, lsl #1
9001ead2:	f89d e04c 	ldrb.w	lr, [sp, #76]	; 0x4c
9001ead6:	eb03 0904 	add.w	r9, r3, r4
9001eada:	9501      	str	r5, [sp, #4]
9001eadc:	f2c0 8150 	blt.w	9001ed80 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2d0>
9001eae0:	4583      	cmp	fp, r0
9001eae2:	f340 814d 	ble.w	9001ed80 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2d0>
9001eae6:	2f00      	cmp	r7, #0
9001eae8:	f2c0 8146 	blt.w	9001ed78 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2c8>
9001eaec:	42be      	cmp	r6, r7
9001eaee:	f340 8143 	ble.w	9001ed78 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2c8>
9001eaf2:	f813 c004 	ldrb.w	ip, [r3, r4]
9001eaf6:	f832 3014 	ldrh.w	r3, [r2, r4, lsl #1]
9001eafa:	f64f 041f 	movw	r4, #63519	; 0xf81f
9001eafe:	ea4f 02ec 	mov.w	r2, ip, asr #3
9001eb02:	f423 65fc 	bic.w	r5, r3, #2016	; 0x7e0
9001eb06:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
9001eb0a:	4355      	muls	r5, r2
9001eb0c:	fb0c f203 	mul.w	r2, ip, r3
9001eb10:	ea04 1355 	and.w	r3, r4, r5, lsr #5
9001eb14:	f605 0501 	addw	r5, r5, #2049	; 0x801
9001eb18:	441d      	add	r5, r3
9001eb1a:	f102 0320 	add.w	r3, r2, #32
9001eb1e:	eb03 2312 	add.w	r3, r3, r2, lsr #8
9001eb22:	ea04 1455 	and.w	r4, r4, r5, lsr #5
9001eb26:	0a1b      	lsrs	r3, r3, #8
9001eb28:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
9001eb2c:	431c      	orrs	r4, r3
9001eb2e:	1c7b      	adds	r3, r7, #1
9001eb30:	f100 812b 	bmi.w	9001ed8a <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2da>
9001eb34:	429e      	cmp	r6, r3
9001eb36:	f340 8128 	ble.w	9001ed8a <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2da>
9001eb3a:	2900      	cmp	r1, #0
9001eb3c:	f000 8128 	beq.w	9001ed90 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2e0>
9001eb40:	9a01      	ldr	r2, [sp, #4]
9001eb42:	f899 3001 	ldrb.w	r3, [r9, #1]
9001eb46:	8855      	ldrh	r5, [r2, #2]
9001eb48:	ea4f 08e3 	mov.w	r8, r3, asr #3
9001eb4c:	f425 62fc 	bic.w	r2, r5, #2016	; 0x7e0
9001eb50:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
9001eb54:	fb08 f802 	mul.w	r8, r8, r2
9001eb58:	f64f 021f 	movw	r2, #63519	; 0xf81f
9001eb5c:	435d      	muls	r5, r3
9001eb5e:	ea02 1a58 	and.w	sl, r2, r8, lsr #5
9001eb62:	f608 0801 	addw	r8, r8, #2049	; 0x801
9001eb66:	44d0      	add	r8, sl
9001eb68:	f105 0a20 	add.w	sl, r5, #32
9001eb6c:	eb0a 2515 	add.w	r5, sl, r5, lsr #8
9001eb70:	ea02 1258 	and.w	r2, r2, r8, lsr #5
9001eb74:	0a2d      	lsrs	r5, r5, #8
9001eb76:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
9001eb7a:	432a      	orrs	r2, r5
9001eb7c:	3001      	adds	r0, #1
9001eb7e:	f100 810d 	bmi.w	9001ed9c <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2ec>
9001eb82:	4583      	cmp	fp, r0
9001eb84:	f340 810a 	ble.w	9001ed9c <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2ec>
9001eb88:	f1be 0f00 	cmp.w	lr, #0
9001eb8c:	f000 810b 	beq.w	9001eda6 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2f6>
9001eb90:	2f00      	cmp	r7, #0
9001eb92:	f2c0 8100 	blt.w	9001ed96 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2e6>
9001eb96:	42be      	cmp	r6, r7
9001eb98:	f340 80fd 	ble.w	9001ed96 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2e6>
9001eb9c:	9801      	ldr	r0, [sp, #4]
9001eb9e:	f64f 0b1f 	movw	fp, #63519	; 0xf81f
9001eba2:	f819 5006 	ldrb.w	r5, [r9, r6]
9001eba6:	f830 8016 	ldrh.w	r8, [r0, r6, lsl #1]
9001ebaa:	ea4f 0ae5 	mov.w	sl, r5, asr #3
9001ebae:	f428 60fc 	bic.w	r0, r8, #2016	; 0x7e0
9001ebb2:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
9001ebb6:	fb0a fa00 	mul.w	sl, sl, r0
9001ebba:	fb05 f808 	mul.w	r8, r5, r8
9001ebbe:	ea0b 105a 	and.w	r0, fp, sl, lsr #5
9001ebc2:	f60a 0a01 	addw	sl, sl, #2049	; 0x801
9001ebc6:	4482      	add	sl, r0
9001ebc8:	f108 0020 	add.w	r0, r8, #32
9001ebcc:	eb00 2018 	add.w	r0, r0, r8, lsr #8
9001ebd0:	ea0b 1b5a 	and.w	fp, fp, sl, lsr #5
9001ebd4:	0a00      	lsrs	r0, r0, #8
9001ebd6:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
9001ebda:	ea4b 0b00 	orr.w	fp, fp, r0
9001ebde:	3701      	adds	r7, #1
9001ebe0:	f100 80e6 	bmi.w	9001edb0 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x300>
9001ebe4:	42be      	cmp	r6, r7
9001ebe6:	f340 80e3 	ble.w	9001edb0 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x300>
9001ebea:	2900      	cmp	r1, #0
9001ebec:	f000 80e3 	beq.w	9001edb6 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x306>
9001ebf0:	3601      	adds	r6, #1
9001ebf2:	9801      	ldr	r0, [sp, #4]
9001ebf4:	f819 7006 	ldrb.w	r7, [r9, r6]
9001ebf8:	f830 0016 	ldrh.w	r0, [r0, r6, lsl #1]
9001ebfc:	ea4f 09e7 	mov.w	r9, r7, asr #3
9001ec00:	f420 66fc 	bic.w	r6, r0, #2016	; 0x7e0
9001ec04:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
9001ec08:	fb09 f906 	mul.w	r9, r9, r6
9001ec0c:	fb07 f800 	mul.w	r8, r7, r0
9001ec10:	f64f 001f 	movw	r0, #63519	; 0xf81f
9001ec14:	ea00 1a59 	and.w	sl, r0, r9, lsr #5
9001ec18:	f609 0901 	addw	r9, r9, #2049	; 0x801
9001ec1c:	44d1      	add	r9, sl
9001ec1e:	ea00 1659 	and.w	r6, r0, r9, lsr #5
9001ec22:	f108 0020 	add.w	r0, r8, #32
9001ec26:	eb00 2018 	add.w	r0, r0, r8, lsr #8
9001ec2a:	0a00      	lsrs	r0, r0, #8
9001ec2c:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
9001ec30:	4330      	orrs	r0, r6
9001ec32:	b28e      	uxth	r6, r1
9001ec34:	fa1f f98e 	uxth.w	r9, lr
9001ec38:	ea4f 4a04 	mov.w	sl, r4, lsl #16
9001ec3c:	f424 64fc 	bic.w	r4, r4, #2016	; 0x7e0
9001ec40:	fb06 f809 	mul.w	r8, r6, r9
9001ec44:	0136      	lsls	r6, r6, #4
9001ec46:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
9001ec4a:	ebc8 1909 	rsb	r9, r8, r9, lsl #4
9001ec4e:	9601      	str	r6, [sp, #4]
9001ec50:	ea4a 0404 	orr.w	r4, sl, r4
9001ec54:	ea4f 4a02 	mov.w	sl, r2, lsl #16
9001ec58:	fa1f f689 	uxth.w	r6, r9
9001ec5c:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
9001ec60:	fb11 f90e 	smulbb	r9, r1, lr
9001ec64:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
9001ec68:	9602      	str	r6, [sp, #8]
9001ec6a:	4626      	mov	r6, r4
9001ec6c:	f3c9 09c7 	ubfx	r9, r9, #3, #8
9001ec70:	f1ce 0410 	rsb	r4, lr, #16
9001ec74:	ea4a 0202 	orr.w	r2, sl, r2
9001ec78:	ea4f 4a00 	mov.w	sl, r0, lsl #16
9001ec7c:	1a64      	subs	r4, r4, r1
9001ec7e:	ebc9 0141 	rsb	r1, r9, r1, lsl #1
9001ec82:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
9001ec86:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
9001ec8a:	434a      	muls	r2, r1
9001ec8c:	eb09 0444 	add.w	r4, r9, r4, lsl #1
9001ec90:	ea4a 0000 	orr.w	r0, sl, r0
9001ec94:	9903      	ldr	r1, [sp, #12]
9001ec96:	fb04 2406 	mla	r4, r4, r6, r2
9001ec9a:	9e02      	ldr	r6, [sp, #8]
9001ec9c:	ebc9 0e4e 	rsb	lr, r9, lr, lsl #1
9001eca0:	fb09 4200 	mla	r2, r9, r0, r4
9001eca4:	ea4f 440b 	mov.w	r4, fp, lsl #16
9001eca8:	f42b 6bfc 	bic.w	fp, fp, #2016	; 0x7e0
9001ecac:	8808      	ldrh	r0, [r1, #0]
9001ecae:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
9001ecb2:	f89d 1050 	ldrb.w	r1, [sp, #80]	; 0x50
9001ecb6:	ea44 0b0b 	orr.w	fp, r4, fp
9001ecba:	9c01      	ldr	r4, [sp, #4]
9001ecbc:	b289      	uxth	r1, r1
9001ecbe:	f5c4 7480 	rsb	r4, r4, #256	; 0x100
9001ecc2:	fb0e 2e0b 	mla	lr, lr, fp, r2
9001ecc6:	1ba4      	subs	r4, r4, r6
9001ecc8:	9e01      	ldr	r6, [sp, #4]
9001ecca:	ea4f 525e 	mov.w	r2, lr, lsr #21
9001ecce:	eba6 0608 	sub.w	r6, r6, r8
9001ecd2:	b2a4      	uxth	r4, r4
9001ecd4:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
9001ecd8:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
9001ecdc:	b2b6      	uxth	r6, r6
9001ecde:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
9001ece2:	4373      	muls	r3, r6
9001ece4:	ea42 0e0e 	orr.w	lr, r2, lr
9001ece8:	fb0c 3304 	mla	r3, ip, r4, r3
9001ecec:	9c02      	ldr	r4, [sp, #8]
9001ecee:	fa1f f28e 	uxth.w	r2, lr
9001ecf2:	fb04 3505 	mla	r5, r4, r5, r3
9001ecf6:	10d4      	asrs	r4, r2, #3
9001ecf8:	fb08 5707 	mla	r7, r8, r7, r5
9001ecfc:	1215      	asrs	r5, r2, #8
9001ecfe:	f004 04fc 	and.w	r4, r4, #252	; 0xfc
9001ed02:	00d2      	lsls	r2, r2, #3
9001ed04:	f3c7 2707 	ubfx	r7, r7, #8, #8
9001ed08:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
9001ed0c:	b2d2      	uxtb	r2, r2
9001ed0e:	434f      	muls	r7, r1
9001ed10:	1c7b      	adds	r3, r7, #1
9001ed12:	eb03 2717 	add.w	r7, r3, r7, lsr #8
9001ed16:	1203      	asrs	r3, r0, #8
9001ed18:	ea6f 2717 	mvn.w	r7, r7, lsr #8
9001ed1c:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
9001ed20:	b2ff      	uxtb	r7, r7
9001ed22:	fb13 f307 	smulbb	r3, r3, r7
9001ed26:	fb05 3501 	mla	r5, r5, r1, r3
9001ed2a:	10c3      	asrs	r3, r0, #3
9001ed2c:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
9001ed30:	b2ad      	uxth	r5, r5
9001ed32:	fb13 f307 	smulbb	r3, r3, r7
9001ed36:	fb04 3401 	mla	r4, r4, r1, r3
9001ed3a:	00c3      	lsls	r3, r0, #3
9001ed3c:	b2db      	uxtb	r3, r3
9001ed3e:	b2a4      	uxth	r4, r4
9001ed40:	fb13 f307 	smulbb	r3, r3, r7
9001ed44:	fb02 3101 	mla	r1, r2, r1, r3
9001ed48:	1c6b      	adds	r3, r5, #1
9001ed4a:	1c62      	adds	r2, r4, #1
9001ed4c:	b289      	uxth	r1, r1
9001ed4e:	eb03 2515 	add.w	r5, r3, r5, lsr #8
9001ed52:	1c4b      	adds	r3, r1, #1
9001ed54:	eb02 2414 	add.w	r4, r2, r4, lsr #8
9001ed58:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
9001ed5c:	9a03      	ldr	r2, [sp, #12]
9001ed5e:	eb03 2311 	add.w	r3, r3, r1, lsr #8
9001ed62:	0964      	lsrs	r4, r4, #5
9001ed64:	f3c3 23c4 	ubfx	r3, r3, #11, #5
9001ed68:	f404 64fc 	and.w	r4, r4, #2016	; 0x7e0
9001ed6c:	432b      	orrs	r3, r5
9001ed6e:	4323      	orrs	r3, r4
9001ed70:	8013      	strh	r3, [r2, #0]
9001ed72:	b005      	add	sp, #20
9001ed74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9001ed78:	f04f 0c00 	mov.w	ip, #0
9001ed7c:	4664      	mov	r4, ip
9001ed7e:	e6d6      	b.n	9001eb2e <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x7e>
9001ed80:	2300      	movs	r3, #0
9001ed82:	469c      	mov	ip, r3
9001ed84:	461a      	mov	r2, r3
9001ed86:	461c      	mov	r4, r3
9001ed88:	e6f8      	b.n	9001eb7c <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xcc>
9001ed8a:	2300      	movs	r3, #0
9001ed8c:	461a      	mov	r2, r3
9001ed8e:	e6f5      	b.n	9001eb7c <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xcc>
9001ed90:	460b      	mov	r3, r1
9001ed92:	460a      	mov	r2, r1
9001ed94:	e6f2      	b.n	9001eb7c <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xcc>
9001ed96:	2500      	movs	r5, #0
9001ed98:	46ab      	mov	fp, r5
9001ed9a:	e720      	b.n	9001ebde <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x12e>
9001ed9c:	2700      	movs	r7, #0
9001ed9e:	463d      	mov	r5, r7
9001eda0:	4638      	mov	r0, r7
9001eda2:	46bb      	mov	fp, r7
9001eda4:	e745      	b.n	9001ec32 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x182>
9001eda6:	4677      	mov	r7, lr
9001eda8:	4675      	mov	r5, lr
9001edaa:	4670      	mov	r0, lr
9001edac:	46f3      	mov	fp, lr
9001edae:	e740      	b.n	9001ec32 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x182>
9001edb0:	2700      	movs	r7, #0
9001edb2:	4638      	mov	r0, r7
9001edb4:	e73d      	b.n	9001ec32 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x182>
9001edb6:	460f      	mov	r7, r1
9001edb8:	4608      	mov	r0, r1
9001edba:	e73a      	b.n	9001ec32 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x182>

9001edbc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
9001edbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001edc0:	b097      	sub	sp, #92	; 0x5c
9001edc2:	9214      	str	r2, [sp, #80]	; 0x50
9001edc4:	9308      	str	r3, [sp, #32]
9001edc6:	9a25      	ldr	r2, [sp, #148]	; 0x94
9001edc8:	f89d 30a4 	ldrb.w	r3, [sp, #164]	; 0xa4
9001edcc:	9015      	str	r0, [sp, #84]	; 0x54
9001edce:	9312      	str	r3, [sp, #72]	; 0x48
9001edd0:	6850      	ldr	r0, [r2, #4]
9001edd2:	9111      	str	r1, [sp, #68]	; 0x44
9001edd4:	6812      	ldr	r2, [r2, #0]
9001edd6:	e9dd 1326 	ldrd	r1, r3, [sp, #152]	; 0x98
9001edda:	fb00 1303 	mla	r3, r0, r3, r1
9001edde:	eb02 0343 	add.w	r3, r2, r3, lsl #1
9001ede2:	9309      	str	r3, [sp, #36]	; 0x24
9001ede4:	9b28      	ldr	r3, [sp, #160]	; 0xa0
9001ede6:	681b      	ldr	r3, [r3, #0]
9001ede8:	930b      	str	r3, [sp, #44]	; 0x2c
9001edea:	9b28      	ldr	r3, [sp, #160]	; 0xa0
9001edec:	685b      	ldr	r3, [r3, #4]
9001edee:	930c      	str	r3, [sp, #48]	; 0x30
9001edf0:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
9001edf4:	930a      	str	r3, [sp, #40]	; 0x28
9001edf6:	9b11      	ldr	r3, [sp, #68]	; 0x44
9001edf8:	2b00      	cmp	r3, #0
9001edfa:	dc03      	bgt.n	9001ee04 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
9001edfc:	9b14      	ldr	r3, [sp, #80]	; 0x50
9001edfe:	2b00      	cmp	r3, #0
9001ee00:	f340 83cd 	ble.w	9001f59e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e2>
9001ee04:	9b28      	ldr	r3, [sp, #160]	; 0xa0
9001ee06:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
9001ee0a:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
9001ee0e:	1e48      	subs	r0, r1, #1
9001ee10:	1e55      	subs	r5, r2, #1
9001ee12:	9b08      	ldr	r3, [sp, #32]
9001ee14:	2b00      	cmp	r3, #0
9001ee16:	f340 81a5 	ble.w	9001f164 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a8>
9001ee1a:	9e21      	ldr	r6, [sp, #132]	; 0x84
9001ee1c:	9b22      	ldr	r3, [sp, #136]	; 0x88
9001ee1e:	1436      	asrs	r6, r6, #16
9001ee20:	ea4f 4323 	mov.w	r3, r3, asr #16
9001ee24:	d406      	bmi.n	9001ee34 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
9001ee26:	4286      	cmp	r6, r0
9001ee28:	da04      	bge.n	9001ee34 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
9001ee2a:	2b00      	cmp	r3, #0
9001ee2c:	db02      	blt.n	9001ee34 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
9001ee2e:	42ab      	cmp	r3, r5
9001ee30:	f2c0 8199 	blt.w	9001f166 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3aa>
9001ee34:	3601      	adds	r6, #1
9001ee36:	f100 8186 	bmi.w	9001f146 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
9001ee3a:	42b1      	cmp	r1, r6
9001ee3c:	f2c0 8183 	blt.w	9001f146 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
9001ee40:	3301      	adds	r3, #1
9001ee42:	f100 8180 	bmi.w	9001f146 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
9001ee46:	429a      	cmp	r2, r3
9001ee48:	f2c0 817d 	blt.w	9001f146 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
9001ee4c:	9b08      	ldr	r3, [sp, #32]
9001ee4e:	f64f 061f 	movw	r6, #63519	; 0xf81f
9001ee52:	9f09      	ldr	r7, [sp, #36]	; 0x24
9001ee54:	9313      	str	r3, [sp, #76]	; 0x4c
9001ee56:	9b13      	ldr	r3, [sp, #76]	; 0x4c
9001ee58:	2b00      	cmp	r3, #0
9001ee5a:	f340 81a6 	ble.w	9001f1aa <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
9001ee5e:	9b22      	ldr	r3, [sp, #136]	; 0x88
9001ee60:	9d21      	ldr	r5, [sp, #132]	; 0x84
9001ee62:	1418      	asrs	r0, r3, #16
9001ee64:	9b21      	ldr	r3, [sp, #132]	; 0x84
9001ee66:	142d      	asrs	r5, r5, #16
9001ee68:	f3c3 3103 	ubfx	r1, r3, #12, #4
9001ee6c:	9b22      	ldr	r3, [sp, #136]	; 0x88
9001ee6e:	f3c3 3c03 	ubfx	ip, r3, #12, #4
9001ee72:	9b28      	ldr	r3, [sp, #160]	; 0xa0
9001ee74:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
9001ee78:	f100 81fa 	bmi.w	9001f270 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
9001ee7c:	f102 3eff 	add.w	lr, r2, #4294967295
9001ee80:	4575      	cmp	r5, lr
9001ee82:	f280 81f5 	bge.w	9001f270 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
9001ee86:	2800      	cmp	r0, #0
9001ee88:	f2c0 81f2 	blt.w	9001f270 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
9001ee8c:	f103 3eff 	add.w	lr, r3, #4294967295
9001ee90:	4570      	cmp	r0, lr
9001ee92:	f280 81ed 	bge.w	9001f270 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
9001ee96:	b212      	sxth	r2, r2
9001ee98:	9b0c      	ldr	r3, [sp, #48]	; 0x30
9001ee9a:	fa1f fe81 	uxth.w	lr, r1
9001ee9e:	fb00 5002 	mla	r0, r0, r2, r5
9001eea2:	ea4f 150e 	mov.w	r5, lr, lsl #4
9001eea6:	eb03 0a00 	add.w	sl, r3, r0
9001eeaa:	f813 9000 	ldrb.w	r9, [r3, r0]
9001eeae:	f5c5 7380 	rsb	r3, r5, #256	; 0x100
9001eeb2:	f89a 8001 	ldrb.w	r8, [sl, #1]
9001eeb6:	b29b      	uxth	r3, r3
9001eeb8:	f1bc 0f00 	cmp.w	ip, #0
9001eebc:	f000 81bb 	beq.w	9001f236 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x47a>
9001eec0:	f81a 4002 	ldrb.w	r4, [sl, r2]
9001eec4:	eb0a 0b02 	add.w	fp, sl, r2
9001eec8:	fa1f fa8c 	uxth.w	sl, ip
9001eecc:	940d      	str	r4, [sp, #52]	; 0x34
9001eece:	fb0a fe0e 	mul.w	lr, sl, lr
9001eed2:	f89b 4001 	ldrb.w	r4, [fp, #1]
9001eed6:	ebce 1a0a 	rsb	sl, lr, sl, lsl #4
9001eeda:	eba5 050e 	sub.w	r5, r5, lr
9001eede:	940e      	str	r4, [sp, #56]	; 0x38
9001eee0:	fa1f fa8a 	uxth.w	sl, sl
9001eee4:	9c0d      	ldr	r4, [sp, #52]	; 0x34
9001eee6:	b2ad      	uxth	r5, r5
9001eee8:	eba3 030a 	sub.w	r3, r3, sl
9001eeec:	fb08 f505 	mul.w	r5, r8, r5
9001eef0:	b29b      	uxth	r3, r3
9001eef2:	fb09 5303 	mla	r3, r9, r3, r5
9001eef6:	fb0a 3304 	mla	r3, sl, r4, r3
9001eefa:	9c0e      	ldr	r4, [sp, #56]	; 0x38
9001eefc:	fb0e 3304 	mla	r3, lr, r4, r3
9001ef00:	f3c3 2307 	ubfx	r3, r3, #8, #8
9001ef04:	2b00      	cmp	r3, #0
9001ef06:	f000 8111 	beq.w	9001f12c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
9001ef0a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
9001ef0c:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
9001ef10:	eb04 0540 	add.w	r5, r4, r0, lsl #1
9001ef14:	f834 0010 	ldrh.w	r0, [r4, r0, lsl #1]
9001ef18:	f000 8192 	beq.w	9001f240 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x484>
9001ef1c:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
9001ef20:	ea4f 0ae9 	mov.w	sl, r9, asr #3
9001ef24:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
9001ef28:	fb0a fe0e 	mul.w	lr, sl, lr
9001ef2c:	fb09 f000 	mul.w	r0, r9, r0
9001ef30:	ea06 195e 	and.w	r9, r6, lr, lsr #5
9001ef34:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
9001ef38:	f100 0b20 	add.w	fp, r0, #32
9001ef3c:	44ce      	add	lr, r9
9001ef3e:	eb0b 2910 	add.w	r9, fp, r0, lsr #8
9001ef42:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
9001ef46:	ea4f 2919 	mov.w	r9, r9, lsr #8
9001ef4a:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
9001ef4e:	ea4e 0909 	orr.w	r9, lr, r9
9001ef52:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
9001ef56:	8868      	ldrh	r0, [r5, #2]
9001ef58:	d019      	beq.n	9001ef8e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
9001ef5a:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
9001ef5e:	ea4f 0ae8 	mov.w	sl, r8, asr #3
9001ef62:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
9001ef66:	fb0a fe0e 	mul.w	lr, sl, lr
9001ef6a:	fb08 f800 	mul.w	r8, r8, r0
9001ef6e:	ea06 105e 	and.w	r0, r6, lr, lsr #5
9001ef72:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
9001ef76:	f108 0b20 	add.w	fp, r8, #32
9001ef7a:	4486      	add	lr, r0
9001ef7c:	eb0b 2018 	add.w	r0, fp, r8, lsr #8
9001ef80:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
9001ef84:	0a00      	lsrs	r0, r0, #8
9001ef86:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
9001ef8a:	ea4e 0000 	orr.w	r0, lr, r0
9001ef8e:	ea4f 4e09 	mov.w	lr, r9, lsl #16
9001ef92:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
9001ef96:	ea4f 4a00 	mov.w	sl, r0, lsl #16
9001ef9a:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
9001ef9e:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
9001efa2:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
9001efa6:	ea4e 0909 	orr.w	r9, lr, r9
9001efaa:	ea4a 0000 	orr.w	r0, sl, r0
9001efae:	f1bc 0f00 	cmp.w	ip, #0
9001efb2:	f000 8147 	beq.w	9001f244 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x488>
9001efb6:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
9001efba:	9c0d      	ldr	r4, [sp, #52]	; 0x34
9001efbc:	3a01      	subs	r2, #1
9001efbe:	2cff      	cmp	r4, #255	; 0xff
9001efc0:	ea4f 0242 	mov.w	r2, r2, lsl #1
9001efc4:	f102 0202 	add.w	r2, r2, #2
9001efc8:	eb05 0e02 	add.w	lr, r5, r2
9001efcc:	5aaa      	ldrh	r2, [r5, r2]
9001efce:	d018      	beq.n	9001f002 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x246>
9001efd0:	f422 65fc 	bic.w	r5, r2, #2016	; 0x7e0
9001efd4:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
9001efd8:	ea4f 08e4 	mov.w	r8, r4, asr #3
9001efdc:	fb04 fa02 	mul.w	sl, r4, r2
9001efe0:	fb08 f805 	mul.w	r8, r8, r5
9001efe4:	f10a 0520 	add.w	r5, sl, #32
9001efe8:	ea06 1258 	and.w	r2, r6, r8, lsr #5
9001efec:	f608 0801 	addw	r8, r8, #2049	; 0x801
9001eff0:	eb05 251a 	add.w	r5, r5, sl, lsr #8
9001eff4:	4442      	add	r2, r8
9001eff6:	0a2d      	lsrs	r5, r5, #8
9001eff8:	ea06 1252 	and.w	r2, r6, r2, lsr #5
9001effc:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
9001f000:	432a      	orrs	r2, r5
9001f002:	9c0e      	ldr	r4, [sp, #56]	; 0x38
9001f004:	f8be 5002 	ldrh.w	r5, [lr, #2]
9001f008:	2cff      	cmp	r4, #255	; 0xff
9001f00a:	d01a      	beq.n	9001f042 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x286>
9001f00c:	f425 6efc 	bic.w	lr, r5, #2016	; 0x7e0
9001f010:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
9001f014:	ea4f 08e4 	mov.w	r8, r4, asr #3
9001f018:	fb04 fa05 	mul.w	sl, r4, r5
9001f01c:	fb08 f80e 	mul.w	r8, r8, lr
9001f020:	f10a 0e20 	add.w	lr, sl, #32
9001f024:	ea06 1558 	and.w	r5, r6, r8, lsr #5
9001f028:	f608 0801 	addw	r8, r8, #2049	; 0x801
9001f02c:	eb0e 2e1a 	add.w	lr, lr, sl, lsr #8
9001f030:	4445      	add	r5, r8
9001f032:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
9001f036:	ea06 1555 	and.w	r5, r6, r5, lsr #5
9001f03a:	f40e 6efc 	and.w	lr, lr, #2016	; 0x7e0
9001f03e:	ea45 050e 	orr.w	r5, r5, lr
9001f042:	fb1c fe01 	smulbb	lr, ip, r1
9001f046:	f1cc 0810 	rsb	r8, ip, #16
9001f04a:	ea4f 4a02 	mov.w	sl, r2, lsl #16
9001f04e:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
9001f052:	ea4f 0eee 	mov.w	lr, lr, asr #3
9001f056:	eba8 0801 	sub.w	r8, r8, r1
9001f05a:	ea4f 4b05 	mov.w	fp, r5, lsl #16
9001f05e:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
9001f062:	ebce 0141 	rsb	r1, lr, r1, lsl #1
9001f066:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
9001f06a:	eb0e 0848 	add.w	r8, lr, r8, lsl #1
9001f06e:	ea4a 0202 	orr.w	r2, sl, r2
9001f072:	4341      	muls	r1, r0
9001f074:	ebce 0c4c 	rsb	ip, lr, ip, lsl #1
9001f078:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
9001f07c:	fb09 1108 	mla	r1, r9, r8, r1
9001f080:	ea4b 0505 	orr.w	r5, fp, r5
9001f084:	fb0c 1102 	mla	r1, ip, r2, r1
9001f088:	fb0e 1e05 	mla	lr, lr, r5, r1
9001f08c:	ea4f 525e 	mov.w	r2, lr, lsr #21
9001f090:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
9001f094:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
9001f098:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
9001f09c:	ea42 0e0e 	orr.w	lr, r2, lr
9001f0a0:	fa1f f28e 	uxth.w	r2, lr
9001f0a4:	2bff      	cmp	r3, #255	; 0xff
9001f0a6:	d103      	bne.n	9001f0b0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
9001f0a8:	9912      	ldr	r1, [sp, #72]	; 0x48
9001f0aa:	29ff      	cmp	r1, #255	; 0xff
9001f0ac:	f000 80de 	beq.w	9001f26c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>
9001f0b0:	990a      	ldr	r1, [sp, #40]	; 0x28
9001f0b2:	1215      	asrs	r5, r2, #8
9001f0b4:	8838      	ldrh	r0, [r7, #0]
9001f0b6:	434b      	muls	r3, r1
9001f0b8:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
9001f0bc:	9c0a      	ldr	r4, [sp, #40]	; 0x28
9001f0be:	f103 0c01 	add.w	ip, r3, #1
9001f0c2:	eb0c 2323 	add.w	r3, ip, r3, asr #8
9001f0c6:	ea6f 2323 	mvn.w	r3, r3, asr #8
9001f0ca:	fa5f fc83 	uxtb.w	ip, r3
9001f0ce:	1203      	asrs	r3, r0, #8
9001f0d0:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
9001f0d4:	fb13 f30c 	smulbb	r3, r3, ip
9001f0d8:	fb05 3501 	mla	r5, r5, r1, r3
9001f0dc:	10c3      	asrs	r3, r0, #3
9001f0de:	10d1      	asrs	r1, r2, #3
9001f0e0:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
9001f0e4:	00d2      	lsls	r2, r2, #3
9001f0e6:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
9001f0ea:	b2ad      	uxth	r5, r5
9001f0ec:	fb13 f30c 	smulbb	r3, r3, ip
9001f0f0:	b2d2      	uxtb	r2, r2
9001f0f2:	fb01 3104 	mla	r1, r1, r4, r3
9001f0f6:	00c3      	lsls	r3, r0, #3
9001f0f8:	b2db      	uxtb	r3, r3
9001f0fa:	b289      	uxth	r1, r1
9001f0fc:	fb13 f30c 	smulbb	r3, r3, ip
9001f100:	fb02 3304 	mla	r3, r2, r4, r3
9001f104:	b29a      	uxth	r2, r3
9001f106:	1c6b      	adds	r3, r5, #1
9001f108:	eb03 2515 	add.w	r5, r3, r5, lsr #8
9001f10c:	1c53      	adds	r3, r2, #1
9001f10e:	eb03 2312 	add.w	r3, r3, r2, lsr #8
9001f112:	1c4a      	adds	r2, r1, #1
9001f114:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
9001f118:	eb02 2111 	add.w	r1, r2, r1, lsr #8
9001f11c:	f3c3 23c4 	ubfx	r3, r3, #11, #5
9001f120:	0949      	lsrs	r1, r1, #5
9001f122:	432b      	orrs	r3, r5
9001f124:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
9001f128:	430b      	orrs	r3, r1
9001f12a:	803b      	strh	r3, [r7, #0]
9001f12c:	9b21      	ldr	r3, [sp, #132]	; 0x84
9001f12e:	3702      	adds	r7, #2
9001f130:	9a23      	ldr	r2, [sp, #140]	; 0x8c
9001f132:	4413      	add	r3, r2
9001f134:	9a22      	ldr	r2, [sp, #136]	; 0x88
9001f136:	9321      	str	r3, [sp, #132]	; 0x84
9001f138:	9b24      	ldr	r3, [sp, #144]	; 0x90
9001f13a:	441a      	add	r2, r3
9001f13c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
9001f13e:	3b01      	subs	r3, #1
9001f140:	9222      	str	r2, [sp, #136]	; 0x88
9001f142:	9313      	str	r3, [sp, #76]	; 0x4c
9001f144:	e687      	b.n	9001ee56 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
9001f146:	9b21      	ldr	r3, [sp, #132]	; 0x84
9001f148:	9e23      	ldr	r6, [sp, #140]	; 0x8c
9001f14a:	9c22      	ldr	r4, [sp, #136]	; 0x88
9001f14c:	4433      	add	r3, r6
9001f14e:	9321      	str	r3, [sp, #132]	; 0x84
9001f150:	9b24      	ldr	r3, [sp, #144]	; 0x90
9001f152:	441c      	add	r4, r3
9001f154:	9b08      	ldr	r3, [sp, #32]
9001f156:	3b01      	subs	r3, #1
9001f158:	9422      	str	r4, [sp, #136]	; 0x88
9001f15a:	9308      	str	r3, [sp, #32]
9001f15c:	9b09      	ldr	r3, [sp, #36]	; 0x24
9001f15e:	3302      	adds	r3, #2
9001f160:	9309      	str	r3, [sp, #36]	; 0x24
9001f162:	e656      	b.n	9001ee12 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
9001f164:	d028      	beq.n	9001f1b8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3fc>
9001f166:	9b08      	ldr	r3, [sp, #32]
9001f168:	9823      	ldr	r0, [sp, #140]	; 0x8c
9001f16a:	3b01      	subs	r3, #1
9001f16c:	9d21      	ldr	r5, [sp, #132]	; 0x84
9001f16e:	fb00 5003 	mla	r0, r0, r3, r5
9001f172:	1400      	asrs	r0, r0, #16
9001f174:	f53f ae6a 	bmi.w	9001ee4c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
9001f178:	3901      	subs	r1, #1
9001f17a:	4288      	cmp	r0, r1
9001f17c:	f6bf ae66 	bge.w	9001ee4c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
9001f180:	9924      	ldr	r1, [sp, #144]	; 0x90
9001f182:	9822      	ldr	r0, [sp, #136]	; 0x88
9001f184:	fb01 0303 	mla	r3, r1, r3, r0
9001f188:	141b      	asrs	r3, r3, #16
9001f18a:	f53f ae5f 	bmi.w	9001ee4c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
9001f18e:	3a01      	subs	r2, #1
9001f190:	4293      	cmp	r3, r2
9001f192:	f6bf ae5b 	bge.w	9001ee4c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
9001f196:	9b08      	ldr	r3, [sp, #32]
9001f198:	f64f 061f 	movw	r6, #63519	; 0xf81f
9001f19c:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
9001f1a0:	9313      	str	r3, [sp, #76]	; 0x4c
9001f1a2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
9001f1a4:	2b00      	cmp	r3, #0
9001f1a6:	f300 8082 	bgt.w	9001f2ae <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f2>
9001f1aa:	9b08      	ldr	r3, [sp, #32]
9001f1ac:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
9001f1b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
9001f1b2:	eb03 0344 	add.w	r3, r3, r4, lsl #1
9001f1b6:	9309      	str	r3, [sp, #36]	; 0x24
9001f1b8:	9b11      	ldr	r3, [sp, #68]	; 0x44
9001f1ba:	2b00      	cmp	r3, #0
9001f1bc:	f340 81ef 	ble.w	9001f59e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e2>
9001f1c0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
9001f1c4:	9b20      	ldr	r3, [sp, #128]	; 0x80
9001f1c6:	ee30 0a04 	vadd.f32	s0, s0, s8
9001f1ca:	ee70 0aa4 	vadd.f32	s1, s1, s9
9001f1ce:	eef0 6a62 	vmov.f32	s13, s5
9001f1d2:	eec7 7a00 	vdiv.f32	s15, s14, s0
9001f1d6:	ee31 1a05 	vadd.f32	s2, s2, s10
9001f1da:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
9001f1de:	edcd 6a21 	vstr	s13, [sp, #132]	; 0x84
9001f1e2:	eef0 6a43 	vmov.f32	s13, s6
9001f1e6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
9001f1ea:	edcd 6a22 	vstr	s13, [sp, #136]	; 0x88
9001f1ee:	ee20 7aa7 	vmul.f32	s14, s1, s15
9001f1f2:	ee61 7a27 	vmul.f32	s15, s2, s15
9001f1f6:	ee77 2a62 	vsub.f32	s5, s14, s5
9001f1fa:	ee37 3ac3 	vsub.f32	s6, s15, s6
9001f1fe:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
9001f202:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
9001f206:	ee12 2a90 	vmov	r2, s5
9001f20a:	eef0 2a47 	vmov.f32	s5, s14
9001f20e:	fb92 f3f3 	sdiv	r3, r2, r3
9001f212:	ee13 2a10 	vmov	r2, s6
9001f216:	9323      	str	r3, [sp, #140]	; 0x8c
9001f218:	9b20      	ldr	r3, [sp, #128]	; 0x80
9001f21a:	eeb0 3a67 	vmov.f32	s6, s15
9001f21e:	fb92 f3f3 	sdiv	r3, r2, r3
9001f222:	9324      	str	r3, [sp, #144]	; 0x90
9001f224:	9b11      	ldr	r3, [sp, #68]	; 0x44
9001f226:	9a14      	ldr	r2, [sp, #80]	; 0x50
9001f228:	3b01      	subs	r3, #1
9001f22a:	9311      	str	r3, [sp, #68]	; 0x44
9001f22c:	9b20      	ldr	r3, [sp, #128]	; 0x80
9001f22e:	bf08      	it	eq
9001f230:	4613      	moveq	r3, r2
9001f232:	9308      	str	r3, [sp, #32]
9001f234:	e5df      	b.n	9001edf6 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
9001f236:	fb08 f505 	mul.w	r5, r8, r5
9001f23a:	fb09 5303 	mla	r3, r9, r3, r5
9001f23e:	e65f      	b.n	9001ef00 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x144>
9001f240:	4681      	mov	r9, r0
9001f242:	e686      	b.n	9001ef52 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
9001f244:	f1c1 0210 	rsb	r2, r1, #16
9001f248:	4341      	muls	r1, r0
9001f24a:	fb09 1902 	mla	r9, r9, r2, r1
9001f24e:	ea4f 0949 	mov.w	r9, r9, lsl #1
9001f252:	ea4f 5259 	mov.w	r2, r9, lsr #21
9001f256:	ea4f 1959 	mov.w	r9, r9, lsr #5
9001f25a:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
9001f25e:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
9001f262:	ea42 0909 	orr.w	r9, r2, r9
9001f266:	fa1f f289 	uxth.w	r2, r9
9001f26a:	e71b      	b.n	9001f0a4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e8>
9001f26c:	803a      	strh	r2, [r7, #0]
9001f26e:	e75d      	b.n	9001f12c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
9001f270:	f115 0e01 	adds.w	lr, r5, #1
9001f274:	f53f af5a 	bmi.w	9001f12c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
9001f278:	4572      	cmp	r2, lr
9001f27a:	f6ff af57 	blt.w	9001f12c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
9001f27e:	f110 0e01 	adds.w	lr, r0, #1
9001f282:	f53f af53 	bmi.w	9001f12c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
9001f286:	4573      	cmp	r3, lr
9001f288:	f6ff af50 	blt.w	9001f12c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
9001f28c:	9c12      	ldr	r4, [sp, #72]	; 0x48
9001f28e:	b21b      	sxth	r3, r3
9001f290:	b212      	sxth	r2, r2
9001f292:	9502      	str	r5, [sp, #8]
9001f294:	9301      	str	r3, [sp, #4]
9001f296:	9200      	str	r2, [sp, #0]
9001f298:	e9cd 0103 	strd	r0, r1, [sp, #12]
9001f29c:	e9cd c405 	strd	ip, r4, [sp, #20]
9001f2a0:	e9dd 230b 	ldrd	r2, r3, [sp, #44]	; 0x2c
9001f2a4:	4639      	mov	r1, r7
9001f2a6:	9815      	ldr	r0, [sp, #84]	; 0x54
9001f2a8:	f7ff fc02 	bl	9001eab0 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh>
9001f2ac:	e73e      	b.n	9001f12c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
9001f2ae:	9b21      	ldr	r3, [sp, #132]	; 0x84
9001f2b0:	f3c3 3203 	ubfx	r2, r3, #12, #4
9001f2b4:	9b22      	ldr	r3, [sp, #136]	; 0x88
9001f2b6:	f3c3 3503 	ubfx	r5, r3, #12, #4
9001f2ba:	9b28      	ldr	r3, [sp, #160]	; 0xa0
9001f2bc:	fa1f fc82 	uxth.w	ip, r2
9001f2c0:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
9001f2c4:	9b22      	ldr	r3, [sp, #136]	; 0x88
9001f2c6:	ea4f 100c 	mov.w	r0, ip, lsl #4
9001f2ca:	141f      	asrs	r7, r3, #16
9001f2cc:	9b21      	ldr	r3, [sp, #132]	; 0x84
9001f2ce:	141b      	asrs	r3, r3, #16
9001f2d0:	fb01 3707 	mla	r7, r1, r7, r3
9001f2d4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
9001f2d6:	eb03 0a07 	add.w	sl, r3, r7
9001f2da:	f813 9007 	ldrb.w	r9, [r3, r7]
9001f2de:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
9001f2e2:	f89a 8001 	ldrb.w	r8, [sl, #1]
9001f2e6:	b29b      	uxth	r3, r3
9001f2e8:	2d00      	cmp	r5, #0
9001f2ea:	f000 813d 	beq.w	9001f568 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7ac>
9001f2ee:	f81a 4001 	ldrb.w	r4, [sl, r1]
9001f2f2:	eb0a 0b01 	add.w	fp, sl, r1
9001f2f6:	fa1f fa85 	uxth.w	sl, r5
9001f2fa:	940f      	str	r4, [sp, #60]	; 0x3c
9001f2fc:	fb0a fc0c 	mul.w	ip, sl, ip
9001f300:	f89b 4001 	ldrb.w	r4, [fp, #1]
9001f304:	ebcc 1a0a 	rsb	sl, ip, sl, lsl #4
9001f308:	eba0 000c 	sub.w	r0, r0, ip
9001f30c:	9410      	str	r4, [sp, #64]	; 0x40
9001f30e:	fa1f fa8a 	uxth.w	sl, sl
9001f312:	b280      	uxth	r0, r0
9001f314:	eba3 030a 	sub.w	r3, r3, sl
9001f318:	fb08 f000 	mul.w	r0, r8, r0
9001f31c:	b29b      	uxth	r3, r3
9001f31e:	fb09 0303 	mla	r3, r9, r3, r0
9001f322:	980f      	ldr	r0, [sp, #60]	; 0x3c
9001f324:	fb0a 3300 	mla	r3, sl, r0, r3
9001f328:	fb0c 3304 	mla	r3, ip, r4, r3
9001f32c:	f3c3 2307 	ubfx	r3, r3, #8, #8
9001f330:	2b00      	cmp	r3, #0
9001f332:	f000 810b 	beq.w	9001f54c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x790>
9001f336:	980b      	ldr	r0, [sp, #44]	; 0x2c
9001f338:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
9001f33c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
9001f33e:	eb00 0047 	add.w	r0, r0, r7, lsl #1
9001f342:	f834 7017 	ldrh.w	r7, [r4, r7, lsl #1]
9001f346:	f000 8114 	beq.w	9001f572 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7b6>
9001f34a:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
9001f34e:	ea4f 0ae9 	mov.w	sl, r9, asr #3
9001f352:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
9001f356:	fb0a fc0c 	mul.w	ip, sl, ip
9001f35a:	fb09 f707 	mul.w	r7, r9, r7
9001f35e:	ea06 195c 	and.w	r9, r6, ip, lsr #5
9001f362:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
9001f366:	f107 0b20 	add.w	fp, r7, #32
9001f36a:	44cc      	add	ip, r9
9001f36c:	eb0b 2917 	add.w	r9, fp, r7, lsr #8
9001f370:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
9001f374:	ea4f 2919 	mov.w	r9, r9, lsr #8
9001f378:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
9001f37c:	ea4c 0909 	orr.w	r9, ip, r9
9001f380:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
9001f384:	8847      	ldrh	r7, [r0, #2]
9001f386:	d019      	beq.n	9001f3bc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x600>
9001f388:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
9001f38c:	ea4f 0ae8 	mov.w	sl, r8, asr #3
9001f390:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
9001f394:	fb0a fc0c 	mul.w	ip, sl, ip
9001f398:	fb08 f807 	mul.w	r8, r8, r7
9001f39c:	ea06 175c 	and.w	r7, r6, ip, lsr #5
9001f3a0:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
9001f3a4:	f108 0b20 	add.w	fp, r8, #32
9001f3a8:	44bc      	add	ip, r7
9001f3aa:	eb0b 2718 	add.w	r7, fp, r8, lsr #8
9001f3ae:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
9001f3b2:	0a3f      	lsrs	r7, r7, #8
9001f3b4:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
9001f3b8:	ea4c 0707 	orr.w	r7, ip, r7
9001f3bc:	ea4f 4c09 	mov.w	ip, r9, lsl #16
9001f3c0:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
9001f3c4:	ea4f 4a07 	mov.w	sl, r7, lsl #16
9001f3c8:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
9001f3cc:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
9001f3d0:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
9001f3d4:	ea4c 0909 	orr.w	r9, ip, r9
9001f3d8:	ea4a 0707 	orr.w	r7, sl, r7
9001f3dc:	2d00      	cmp	r5, #0
9001f3de:	f000 80ca 	beq.w	9001f576 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7ba>
9001f3e2:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
9001f3e6:	3901      	subs	r1, #1
9001f3e8:	0049      	lsls	r1, r1, #1
9001f3ea:	3102      	adds	r1, #2
9001f3ec:	eb00 0c01 	add.w	ip, r0, r1
9001f3f0:	5a41      	ldrh	r1, [r0, r1]
9001f3f2:	980f      	ldr	r0, [sp, #60]	; 0x3c
9001f3f4:	28ff      	cmp	r0, #255	; 0xff
9001f3f6:	d019      	beq.n	9001f42c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x670>
9001f3f8:	f421 60fc 	bic.w	r0, r1, #2016	; 0x7e0
9001f3fc:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
9001f3fe:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
9001f402:	ea4f 08e4 	mov.w	r8, r4, asr #3
9001f406:	fb04 fa01 	mul.w	sl, r4, r1
9001f40a:	fb08 f800 	mul.w	r8, r8, r0
9001f40e:	f10a 0020 	add.w	r0, sl, #32
9001f412:	ea06 1158 	and.w	r1, r6, r8, lsr #5
9001f416:	f608 0801 	addw	r8, r8, #2049	; 0x801
9001f41a:	eb00 201a 	add.w	r0, r0, sl, lsr #8
9001f41e:	4441      	add	r1, r8
9001f420:	0a00      	lsrs	r0, r0, #8
9001f422:	ea06 1151 	and.w	r1, r6, r1, lsr #5
9001f426:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
9001f42a:	4301      	orrs	r1, r0
9001f42c:	9c10      	ldr	r4, [sp, #64]	; 0x40
9001f42e:	f8bc 0002 	ldrh.w	r0, [ip, #2]
9001f432:	2cff      	cmp	r4, #255	; 0xff
9001f434:	d01a      	beq.n	9001f46c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6b0>
9001f436:	f420 6cfc 	bic.w	ip, r0, #2016	; 0x7e0
9001f43a:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
9001f43e:	ea4f 08e4 	mov.w	r8, r4, asr #3
9001f442:	fb04 fa00 	mul.w	sl, r4, r0
9001f446:	fb08 f80c 	mul.w	r8, r8, ip
9001f44a:	f10a 0c20 	add.w	ip, sl, #32
9001f44e:	ea06 1058 	and.w	r0, r6, r8, lsr #5
9001f452:	f608 0801 	addw	r8, r8, #2049	; 0x801
9001f456:	eb0c 2c1a 	add.w	ip, ip, sl, lsr #8
9001f45a:	4440      	add	r0, r8
9001f45c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
9001f460:	ea06 1050 	and.w	r0, r6, r0, lsr #5
9001f464:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
9001f468:	ea40 000c 	orr.w	r0, r0, ip
9001f46c:	fb15 fc02 	smulbb	ip, r5, r2
9001f470:	f1c5 0810 	rsb	r8, r5, #16
9001f474:	ea4f 4a01 	mov.w	sl, r1, lsl #16
9001f478:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
9001f47c:	ea4f 0cec 	mov.w	ip, ip, asr #3
9001f480:	eba8 0802 	sub.w	r8, r8, r2
9001f484:	ea4f 4b00 	mov.w	fp, r0, lsl #16
9001f488:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
9001f48c:	ebcc 0242 	rsb	r2, ip, r2, lsl #1
9001f490:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
9001f494:	eb0c 0848 	add.w	r8, ip, r8, lsl #1
9001f498:	ea4a 0101 	orr.w	r1, sl, r1
9001f49c:	437a      	muls	r2, r7
9001f49e:	ebcc 0545 	rsb	r5, ip, r5, lsl #1
9001f4a2:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
9001f4a6:	fb09 2208 	mla	r2, r9, r8, r2
9001f4aa:	ea4b 0000 	orr.w	r0, fp, r0
9001f4ae:	fb05 2201 	mla	r2, r5, r1, r2
9001f4b2:	fb0c 2200 	mla	r2, ip, r0, r2
9001f4b6:	0d57      	lsrs	r7, r2, #21
9001f4b8:	0952      	lsrs	r2, r2, #5
9001f4ba:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
9001f4be:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
9001f4c2:	433a      	orrs	r2, r7
9001f4c4:	2bff      	cmp	r3, #255	; 0xff
9001f4c6:	b292      	uxth	r2, r2
9001f4c8:	d102      	bne.n	9001f4d0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x714>
9001f4ca:	9912      	ldr	r1, [sp, #72]	; 0x48
9001f4cc:	29ff      	cmp	r1, #255	; 0xff
9001f4ce:	d063      	beq.n	9001f598 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7dc>
9001f4d0:	980a      	ldr	r0, [sp, #40]	; 0x28
9001f4d2:	1215      	asrs	r5, r2, #8
9001f4d4:	f8be 1000 	ldrh.w	r1, [lr]
9001f4d8:	4343      	muls	r3, r0
9001f4da:	9c0a      	ldr	r4, [sp, #40]	; 0x28
9001f4dc:	10cf      	asrs	r7, r1, #3
9001f4de:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
9001f4e2:	1c58      	adds	r0, r3, #1
9001f4e4:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
9001f4e8:	eb00 2323 	add.w	r3, r0, r3, asr #8
9001f4ec:	1208      	asrs	r0, r1, #8
9001f4ee:	ea6f 2323 	mvn.w	r3, r3, asr #8
9001f4f2:	00c9      	lsls	r1, r1, #3
9001f4f4:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
9001f4f8:	b2db      	uxtb	r3, r3
9001f4fa:	b2c9      	uxtb	r1, r1
9001f4fc:	fb10 f003 	smulbb	r0, r0, r3
9001f500:	fb11 f103 	smulbb	r1, r1, r3
9001f504:	fb05 0504 	mla	r5, r5, r4, r0
9001f508:	10d0      	asrs	r0, r2, #3
9001f50a:	fb17 f703 	smulbb	r7, r7, r3
9001f50e:	00d2      	lsls	r2, r2, #3
9001f510:	b2ad      	uxth	r5, r5
9001f512:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
9001f516:	b2d2      	uxtb	r2, r2
9001f518:	fb00 7004 	mla	r0, r0, r4, r7
9001f51c:	1c6b      	adds	r3, r5, #1
9001f51e:	fb02 1204 	mla	r2, r2, r4, r1
9001f522:	eb03 2515 	add.w	r5, r3, r5, lsr #8
9001f526:	b292      	uxth	r2, r2
9001f528:	b280      	uxth	r0, r0
9001f52a:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
9001f52e:	1c57      	adds	r7, r2, #1
9001f530:	eb07 2712 	add.w	r7, r7, r2, lsr #8
9001f534:	f3c7 27c4 	ubfx	r7, r7, #11, #5
9001f538:	433d      	orrs	r5, r7
9001f53a:	1c47      	adds	r7, r0, #1
9001f53c:	eb07 2710 	add.w	r7, r7, r0, lsr #8
9001f540:	097f      	lsrs	r7, r7, #5
9001f542:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
9001f546:	433d      	orrs	r5, r7
9001f548:	f8ae 5000 	strh.w	r5, [lr]
9001f54c:	9b21      	ldr	r3, [sp, #132]	; 0x84
9001f54e:	f10e 0e02 	add.w	lr, lr, #2
9001f552:	9a23      	ldr	r2, [sp, #140]	; 0x8c
9001f554:	4413      	add	r3, r2
9001f556:	9a22      	ldr	r2, [sp, #136]	; 0x88
9001f558:	9321      	str	r3, [sp, #132]	; 0x84
9001f55a:	9b24      	ldr	r3, [sp, #144]	; 0x90
9001f55c:	441a      	add	r2, r3
9001f55e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
9001f560:	3b01      	subs	r3, #1
9001f562:	9222      	str	r2, [sp, #136]	; 0x88
9001f564:	9313      	str	r3, [sp, #76]	; 0x4c
9001f566:	e61c      	b.n	9001f1a2 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e6>
9001f568:	fb08 f000 	mul.w	r0, r8, r0
9001f56c:	fb09 0303 	mla	r3, r9, r3, r0
9001f570:	e6dc      	b.n	9001f32c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x570>
9001f572:	46b9      	mov	r9, r7
9001f574:	e704      	b.n	9001f380 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c4>
9001f576:	f1c2 0110 	rsb	r1, r2, #16
9001f57a:	437a      	muls	r2, r7
9001f57c:	fb09 2901 	mla	r9, r9, r1, r2
9001f580:	ea4f 0949 	mov.w	r9, r9, lsl #1
9001f584:	ea4f 5059 	mov.w	r0, r9, lsr #21
9001f588:	ea4f 1259 	mov.w	r2, r9, lsr #5
9001f58c:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
9001f590:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
9001f594:	4302      	orrs	r2, r0
9001f596:	e795      	b.n	9001f4c4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x708>
9001f598:	f8ae 2000 	strh.w	r2, [lr]
9001f59c:	e7d6      	b.n	9001f54c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x790>
9001f59e:	b017      	add	sp, #92	; 0x5c
9001f5a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

9001f5a4 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>:
9001f5a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001f5a8:	b085      	sub	sp, #20
9001f5aa:	e9dd 7010 	ldrd	r7, r0, [sp, #64]	; 0x40
9001f5ae:	f9bd 6038 	ldrsh.w	r6, [sp, #56]	; 0x38
9001f5b2:	2800      	cmp	r0, #0
9001f5b4:	9103      	str	r1, [sp, #12]
9001f5b6:	fb00 7406 	mla	r4, r0, r6, r7
9001f5ba:	f9bd b03c 	ldrsh.w	fp, [sp, #60]	; 0x3c
9001f5be:	f89d 1048 	ldrb.w	r1, [sp, #72]	; 0x48
9001f5c2:	eb03 0544 	add.w	r5, r3, r4, lsl #1
9001f5c6:	f89d e04c 	ldrb.w	lr, [sp, #76]	; 0x4c
9001f5ca:	eb02 0904 	add.w	r9, r2, r4
9001f5ce:	9501      	str	r5, [sp, #4]
9001f5d0:	f2c0 8141 	blt.w	9001f856 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2b2>
9001f5d4:	4583      	cmp	fp, r0
9001f5d6:	f340 813e 	ble.w	9001f856 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2b2>
9001f5da:	2f00      	cmp	r7, #0
9001f5dc:	f2c0 8137 	blt.w	9001f84e <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2aa>
9001f5e0:	42be      	cmp	r6, r7
9001f5e2:	f340 8134 	ble.w	9001f84e <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2aa>
9001f5e6:	f812 c004 	ldrb.w	ip, [r2, r4]
9001f5ea:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
9001f5ee:	f64f 041f 	movw	r4, #63519	; 0xf81f
9001f5f2:	ea4f 02ec 	mov.w	r2, ip, asr #3
9001f5f6:	f423 65fc 	bic.w	r5, r3, #2016	; 0x7e0
9001f5fa:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
9001f5fe:	4355      	muls	r5, r2
9001f600:	fb0c f203 	mul.w	r2, ip, r3
9001f604:	ea04 1355 	and.w	r3, r4, r5, lsr #5
9001f608:	f605 0501 	addw	r5, r5, #2049	; 0x801
9001f60c:	441d      	add	r5, r3
9001f60e:	f102 0320 	add.w	r3, r2, #32
9001f612:	eb03 2312 	add.w	r3, r3, r2, lsr #8
9001f616:	ea04 1455 	and.w	r4, r4, r5, lsr #5
9001f61a:	0a1b      	lsrs	r3, r3, #8
9001f61c:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
9001f620:	431c      	orrs	r4, r3
9001f622:	1c7b      	adds	r3, r7, #1
9001f624:	f100 811c 	bmi.w	9001f860 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2bc>
9001f628:	429e      	cmp	r6, r3
9001f62a:	f340 8119 	ble.w	9001f860 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2bc>
9001f62e:	2900      	cmp	r1, #0
9001f630:	f000 8119 	beq.w	9001f866 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2c2>
9001f634:	9a01      	ldr	r2, [sp, #4]
9001f636:	f899 3001 	ldrb.w	r3, [r9, #1]
9001f63a:	8855      	ldrh	r5, [r2, #2]
9001f63c:	ea4f 08e3 	mov.w	r8, r3, asr #3
9001f640:	f425 62fc 	bic.w	r2, r5, #2016	; 0x7e0
9001f644:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
9001f648:	fb08 f802 	mul.w	r8, r8, r2
9001f64c:	f64f 021f 	movw	r2, #63519	; 0xf81f
9001f650:	435d      	muls	r5, r3
9001f652:	ea02 1a58 	and.w	sl, r2, r8, lsr #5
9001f656:	f608 0801 	addw	r8, r8, #2049	; 0x801
9001f65a:	44d0      	add	r8, sl
9001f65c:	f105 0a20 	add.w	sl, r5, #32
9001f660:	eb0a 2515 	add.w	r5, sl, r5, lsr #8
9001f664:	ea02 1258 	and.w	r2, r2, r8, lsr #5
9001f668:	0a2d      	lsrs	r5, r5, #8
9001f66a:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
9001f66e:	432a      	orrs	r2, r5
9001f670:	3001      	adds	r0, #1
9001f672:	f100 80fe 	bmi.w	9001f872 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2ce>
9001f676:	4583      	cmp	fp, r0
9001f678:	f340 80fb 	ble.w	9001f872 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2ce>
9001f67c:	f1be 0f00 	cmp.w	lr, #0
9001f680:	f000 80fc 	beq.w	9001f87c <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2d8>
9001f684:	2f00      	cmp	r7, #0
9001f686:	f2c0 80f1 	blt.w	9001f86c <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2c8>
9001f68a:	42be      	cmp	r6, r7
9001f68c:	f340 80ee 	ble.w	9001f86c <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2c8>
9001f690:	9801      	ldr	r0, [sp, #4]
9001f692:	f64f 0b1f 	movw	fp, #63519	; 0xf81f
9001f696:	f819 5006 	ldrb.w	r5, [r9, r6]
9001f69a:	f830 8016 	ldrh.w	r8, [r0, r6, lsl #1]
9001f69e:	ea4f 0ae5 	mov.w	sl, r5, asr #3
9001f6a2:	f428 60fc 	bic.w	r0, r8, #2016	; 0x7e0
9001f6a6:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
9001f6aa:	fb0a fa00 	mul.w	sl, sl, r0
9001f6ae:	fb05 f808 	mul.w	r8, r5, r8
9001f6b2:	ea0b 105a 	and.w	r0, fp, sl, lsr #5
9001f6b6:	f60a 0a01 	addw	sl, sl, #2049	; 0x801
9001f6ba:	4482      	add	sl, r0
9001f6bc:	f108 0020 	add.w	r0, r8, #32
9001f6c0:	eb00 2018 	add.w	r0, r0, r8, lsr #8
9001f6c4:	ea0b 1b5a 	and.w	fp, fp, sl, lsr #5
9001f6c8:	0a00      	lsrs	r0, r0, #8
9001f6ca:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
9001f6ce:	ea4b 0b00 	orr.w	fp, fp, r0
9001f6d2:	3701      	adds	r7, #1
9001f6d4:	f100 80d7 	bmi.w	9001f886 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2e2>
9001f6d8:	42be      	cmp	r6, r7
9001f6da:	f340 80d4 	ble.w	9001f886 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2e2>
9001f6de:	2900      	cmp	r1, #0
9001f6e0:	f000 80d4 	beq.w	9001f88c <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2e8>
9001f6e4:	3601      	adds	r6, #1
9001f6e6:	9801      	ldr	r0, [sp, #4]
9001f6e8:	f819 7006 	ldrb.w	r7, [r9, r6]
9001f6ec:	f830 0016 	ldrh.w	r0, [r0, r6, lsl #1]
9001f6f0:	ea4f 09e7 	mov.w	r9, r7, asr #3
9001f6f4:	f420 66fc 	bic.w	r6, r0, #2016	; 0x7e0
9001f6f8:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
9001f6fc:	fb09 f906 	mul.w	r9, r9, r6
9001f700:	fb07 f800 	mul.w	r8, r7, r0
9001f704:	f64f 001f 	movw	r0, #63519	; 0xf81f
9001f708:	ea00 1a59 	and.w	sl, r0, r9, lsr #5
9001f70c:	f609 0901 	addw	r9, r9, #2049	; 0x801
9001f710:	44d1      	add	r9, sl
9001f712:	ea00 1659 	and.w	r6, r0, r9, lsr #5
9001f716:	f108 0020 	add.w	r0, r8, #32
9001f71a:	eb00 2018 	add.w	r0, r0, r8, lsr #8
9001f71e:	0a00      	lsrs	r0, r0, #8
9001f720:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
9001f724:	4330      	orrs	r0, r6
9001f726:	b28e      	uxth	r6, r1
9001f728:	fa1f f98e 	uxth.w	r9, lr
9001f72c:	ea4f 4a04 	mov.w	sl, r4, lsl #16
9001f730:	f424 64fc 	bic.w	r4, r4, #2016	; 0x7e0
9001f734:	fb06 f809 	mul.w	r8, r6, r9
9001f738:	0136      	lsls	r6, r6, #4
9001f73a:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
9001f73e:	ebc8 1909 	rsb	r9, r8, r9, lsl #4
9001f742:	9601      	str	r6, [sp, #4]
9001f744:	ea4a 0404 	orr.w	r4, sl, r4
9001f748:	ea4f 4a02 	mov.w	sl, r2, lsl #16
9001f74c:	fa1f f689 	uxth.w	r6, r9
9001f750:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
9001f754:	fb11 f90e 	smulbb	r9, r1, lr
9001f758:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
9001f75c:	9602      	str	r6, [sp, #8]
9001f75e:	4626      	mov	r6, r4
9001f760:	f3c9 09c7 	ubfx	r9, r9, #3, #8
9001f764:	f1ce 0410 	rsb	r4, lr, #16
9001f768:	ea4a 0202 	orr.w	r2, sl, r2
9001f76c:	ea4f 4a00 	mov.w	sl, r0, lsl #16
9001f770:	1a64      	subs	r4, r4, r1
9001f772:	ebc9 0141 	rsb	r1, r9, r1, lsl #1
9001f776:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
9001f77a:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
9001f77e:	434a      	muls	r2, r1
9001f780:	eb09 0444 	add.w	r4, r9, r4, lsl #1
9001f784:	ea4a 0000 	orr.w	r0, sl, r0
9001f788:	ebc9 0e4e 	rsb	lr, r9, lr, lsl #1
9001f78c:	fb04 2406 	mla	r4, r4, r6, r2
9001f790:	9903      	ldr	r1, [sp, #12]
9001f792:	fb09 4200 	mla	r2, r9, r0, r4
9001f796:	ea4f 440b 	mov.w	r4, fp, lsl #16
9001f79a:	9801      	ldr	r0, [sp, #4]
9001f79c:	f42b 6bfc 	bic.w	fp, fp, #2016	; 0x7e0
9001f7a0:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
9001f7a4:	8809      	ldrh	r1, [r1, #0]
9001f7a6:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
9001f7aa:	ea44 0b0b 	orr.w	fp, r4, fp
9001f7ae:	9c02      	ldr	r4, [sp, #8]
9001f7b0:	1b00      	subs	r0, r0, r4
9001f7b2:	9c01      	ldr	r4, [sp, #4]
9001f7b4:	fb0e 2e0b 	mla	lr, lr, fp, r2
9001f7b8:	eba4 0608 	sub.w	r6, r4, r8
9001f7bc:	b280      	uxth	r0, r0
9001f7be:	ea4f 525e 	mov.w	r2, lr, lsr #21
9001f7c2:	b2b6      	uxth	r6, r6
9001f7c4:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
9001f7c8:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
9001f7cc:	4373      	muls	r3, r6
9001f7ce:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
9001f7d2:	fb0c 3300 	mla	r3, ip, r0, r3
9001f7d6:	9802      	ldr	r0, [sp, #8]
9001f7d8:	ea42 0e0e 	orr.w	lr, r2, lr
9001f7dc:	fb00 3505 	mla	r5, r0, r5, r3
9001f7e0:	120b      	asrs	r3, r1, #8
9001f7e2:	10c8      	asrs	r0, r1, #3
9001f7e4:	fb08 5707 	mla	r7, r8, r7, r5
9001f7e8:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
9001f7ec:	00c9      	lsls	r1, r1, #3
9001f7ee:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
9001f7f2:	ea6f 2727 	mvn.w	r7, r7, asr #8
9001f7f6:	fa1f f28e 	uxth.w	r2, lr
9001f7fa:	b2c9      	uxtb	r1, r1
9001f7fc:	b2ff      	uxtb	r7, r7
9001f7fe:	437b      	muls	r3, r7
9001f800:	4378      	muls	r0, r7
9001f802:	434f      	muls	r7, r1
9001f804:	1c59      	adds	r1, r3, #1
9001f806:	eb01 2113 	add.w	r1, r1, r3, lsr #8
9001f80a:	1213      	asrs	r3, r2, #8
9001f80c:	f023 0307 	bic.w	r3, r3, #7
9001f810:	eb03 2311 	add.w	r3, r3, r1, lsr #8
9001f814:	1c41      	adds	r1, r0, #1
9001f816:	eb01 2010 	add.w	r0, r1, r0, lsr #8
9001f81a:	10d1      	asrs	r1, r2, #3
9001f81c:	021b      	lsls	r3, r3, #8
9001f81e:	f021 0103 	bic.w	r1, r1, #3
9001f822:	00d2      	lsls	r2, r2, #3
9001f824:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
9001f828:	eb01 2110 	add.w	r1, r1, r0, lsr #8
9001f82c:	00c9      	lsls	r1, r1, #3
9001f82e:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
9001f832:	430b      	orrs	r3, r1
9001f834:	1c79      	adds	r1, r7, #1
9001f836:	eb01 2717 	add.w	r7, r1, r7, lsr #8
9001f83a:	eb02 2217 	add.w	r2, r2, r7, lsr #8
9001f83e:	f3c2 02c4 	ubfx	r2, r2, #3, #5
9001f842:	431a      	orrs	r2, r3
9001f844:	9b03      	ldr	r3, [sp, #12]
9001f846:	801a      	strh	r2, [r3, #0]
9001f848:	b005      	add	sp, #20
9001f84a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9001f84e:	f04f 0c00 	mov.w	ip, #0
9001f852:	4664      	mov	r4, ip
9001f854:	e6e5      	b.n	9001f622 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x7e>
9001f856:	2300      	movs	r3, #0
9001f858:	469c      	mov	ip, r3
9001f85a:	461a      	mov	r2, r3
9001f85c:	461c      	mov	r4, r3
9001f85e:	e707      	b.n	9001f670 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xcc>
9001f860:	2300      	movs	r3, #0
9001f862:	461a      	mov	r2, r3
9001f864:	e704      	b.n	9001f670 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xcc>
9001f866:	460b      	mov	r3, r1
9001f868:	460a      	mov	r2, r1
9001f86a:	e701      	b.n	9001f670 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xcc>
9001f86c:	2500      	movs	r5, #0
9001f86e:	46ab      	mov	fp, r5
9001f870:	e72f      	b.n	9001f6d2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x12e>
9001f872:	2700      	movs	r7, #0
9001f874:	463d      	mov	r5, r7
9001f876:	4638      	mov	r0, r7
9001f878:	46bb      	mov	fp, r7
9001f87a:	e754      	b.n	9001f726 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x182>
9001f87c:	4677      	mov	r7, lr
9001f87e:	4675      	mov	r5, lr
9001f880:	4670      	mov	r0, lr
9001f882:	46f3      	mov	fp, lr
9001f884:	e74f      	b.n	9001f726 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x182>
9001f886:	2700      	movs	r7, #0
9001f888:	4638      	mov	r0, r7
9001f88a:	e74c      	b.n	9001f726 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x182>
9001f88c:	460f      	mov	r7, r1
9001f88e:	4608      	mov	r0, r1
9001f890:	e749      	b.n	9001f726 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x182>
	...

9001f894 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
9001f894:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001f898:	b093      	sub	sp, #76	; 0x4c
9001f89a:	9210      	str	r2, [sp, #64]	; 0x40
9001f89c:	9a21      	ldr	r2, [sp, #132]	; 0x84
9001f89e:	9011      	str	r0, [sp, #68]	; 0x44
9001f8a0:	910e      	str	r1, [sp, #56]	; 0x38
9001f8a2:	6850      	ldr	r0, [r2, #4]
9001f8a4:	9306      	str	r3, [sp, #24]
9001f8a6:	6812      	ldr	r2, [r2, #0]
9001f8a8:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	; 0x88
9001f8ac:	fb00 1303 	mla	r3, r0, r3, r1
9001f8b0:	eb02 0343 	add.w	r3, r2, r3, lsl #1
9001f8b4:	9307      	str	r3, [sp, #28]
9001f8b6:	9b24      	ldr	r3, [sp, #144]	; 0x90
9001f8b8:	681b      	ldr	r3, [r3, #0]
9001f8ba:	9308      	str	r3, [sp, #32]
9001f8bc:	9b24      	ldr	r3, [sp, #144]	; 0x90
9001f8be:	685b      	ldr	r3, [r3, #4]
9001f8c0:	9309      	str	r3, [sp, #36]	; 0x24
9001f8c2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
9001f8c4:	2b00      	cmp	r3, #0
9001f8c6:	dc03      	bgt.n	9001f8d0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
9001f8c8:	9b10      	ldr	r3, [sp, #64]	; 0x40
9001f8ca:	2b00      	cmp	r3, #0
9001f8cc:	f340 83b6 	ble.w	9002003c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a8>
9001f8d0:	9b24      	ldr	r3, [sp, #144]	; 0x90
9001f8d2:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
9001f8d6:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
9001f8da:	1e48      	subs	r0, r1, #1
9001f8dc:	1e55      	subs	r5, r2, #1
9001f8de:	9b06      	ldr	r3, [sp, #24]
9001f8e0:	2b00      	cmp	r3, #0
9001f8e2:	f340 8165 	ble.w	9001fbb0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31c>
9001f8e6:	9e1d      	ldr	r6, [sp, #116]	; 0x74
9001f8e8:	9b1e      	ldr	r3, [sp, #120]	; 0x78
9001f8ea:	1436      	asrs	r6, r6, #16
9001f8ec:	ea4f 4323 	mov.w	r3, r3, asr #16
9001f8f0:	d406      	bmi.n	9001f900 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
9001f8f2:	4286      	cmp	r6, r0
9001f8f4:	da04      	bge.n	9001f900 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
9001f8f6:	2b00      	cmp	r3, #0
9001f8f8:	db02      	blt.n	9001f900 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
9001f8fa:	42ab      	cmp	r3, r5
9001f8fc:	f2c0 8159 	blt.w	9001fbb2 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
9001f900:	3601      	adds	r6, #1
9001f902:	f100 8146 	bmi.w	9001fb92 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
9001f906:	42b1      	cmp	r1, r6
9001f908:	f2c0 8143 	blt.w	9001fb92 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
9001f90c:	3301      	adds	r3, #1
9001f90e:	f100 8140 	bmi.w	9001fb92 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
9001f912:	429a      	cmp	r2, r3
9001f914:	f2c0 813d 	blt.w	9001fb92 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
9001f918:	9b06      	ldr	r3, [sp, #24]
9001f91a:	f64f 061f 	movw	r6, #63519	; 0xf81f
9001f91e:	9f07      	ldr	r7, [sp, #28]
9001f920:	930f      	str	r3, [sp, #60]	; 0x3c
9001f922:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
9001f924:	2b00      	cmp	r3, #0
9001f926:	f340 8166 	ble.w	9001fbf6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
9001f92a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
9001f92c:	9d1d      	ldr	r5, [sp, #116]	; 0x74
9001f92e:	1418      	asrs	r0, r3, #16
9001f930:	9b1d      	ldr	r3, [sp, #116]	; 0x74
9001f932:	142d      	asrs	r5, r5, #16
9001f934:	f3c3 3103 	ubfx	r1, r3, #12, #4
9001f938:	9b1e      	ldr	r3, [sp, #120]	; 0x78
9001f93a:	f3c3 3c03 	ubfx	ip, r3, #12, #4
9001f93e:	9b24      	ldr	r3, [sp, #144]	; 0x90
9001f940:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
9001f944:	f100 81f0 	bmi.w	9001fd28 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x494>
9001f948:	f102 3eff 	add.w	lr, r2, #4294967295
9001f94c:	4575      	cmp	r5, lr
9001f94e:	f280 81eb 	bge.w	9001fd28 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x494>
9001f952:	2800      	cmp	r0, #0
9001f954:	f2c0 81e8 	blt.w	9001fd28 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x494>
9001f958:	f103 3eff 	add.w	lr, r3, #4294967295
9001f95c:	4570      	cmp	r0, lr
9001f95e:	f280 81e3 	bge.w	9001fd28 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x494>
9001f962:	b212      	sxth	r2, r2
9001f964:	9b09      	ldr	r3, [sp, #36]	; 0x24
9001f966:	fa1f fe81 	uxth.w	lr, r1
9001f96a:	fb00 5002 	mla	r0, r0, r2, r5
9001f96e:	ea4f 150e 	mov.w	r5, lr, lsl #4
9001f972:	eb03 0a00 	add.w	sl, r3, r0
9001f976:	f813 9000 	ldrb.w	r9, [r3, r0]
9001f97a:	f5c5 7380 	rsb	r3, r5, #256	; 0x100
9001f97e:	f89a 8001 	ldrb.w	r8, [sl, #1]
9001f982:	b29b      	uxth	r3, r3
9001f984:	f1bc 0f00 	cmp.w	ip, #0
9001f988:	f000 817b 	beq.w	9001fc82 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
9001f98c:	f81a 4002 	ldrb.w	r4, [sl, r2]
9001f990:	eb0a 0b02 	add.w	fp, sl, r2
9001f994:	fa1f fa8c 	uxth.w	sl, ip
9001f998:	940a      	str	r4, [sp, #40]	; 0x28
9001f99a:	fb0a fe0e 	mul.w	lr, sl, lr
9001f99e:	f89b 4001 	ldrb.w	r4, [fp, #1]
9001f9a2:	ebce 1a0a 	rsb	sl, lr, sl, lsl #4
9001f9a6:	eba5 050e 	sub.w	r5, r5, lr
9001f9aa:	940b      	str	r4, [sp, #44]	; 0x2c
9001f9ac:	fa1f fa8a 	uxth.w	sl, sl
9001f9b0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
9001f9b2:	b2ad      	uxth	r5, r5
9001f9b4:	eba3 030a 	sub.w	r3, r3, sl
9001f9b8:	fb08 f505 	mul.w	r5, r8, r5
9001f9bc:	b29b      	uxth	r3, r3
9001f9be:	fb09 5303 	mla	r3, r9, r3, r5
9001f9c2:	fb0a 3304 	mla	r3, sl, r4, r3
9001f9c6:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
9001f9c8:	fb0e 3304 	mla	r3, lr, r4, r3
9001f9cc:	f3c3 2307 	ubfx	r3, r3, #8, #8
9001f9d0:	2b00      	cmp	r3, #0
9001f9d2:	f000 80d1 	beq.w	9001fb78 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
9001f9d6:	9c08      	ldr	r4, [sp, #32]
9001f9d8:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
9001f9dc:	eb04 0540 	add.w	r5, r4, r0, lsl #1
9001f9e0:	f834 0010 	ldrh.w	r0, [r4, r0, lsl #1]
9001f9e4:	f000 8152 	beq.w	9001fc8c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f8>
9001f9e8:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
9001f9ec:	ea4f 0ae9 	mov.w	sl, r9, asr #3
9001f9f0:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
9001f9f4:	fb0a fe0e 	mul.w	lr, sl, lr
9001f9f8:	fb09 f000 	mul.w	r0, r9, r0
9001f9fc:	ea06 195e 	and.w	r9, r6, lr, lsr #5
9001fa00:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
9001fa04:	f100 0b20 	add.w	fp, r0, #32
9001fa08:	44ce      	add	lr, r9
9001fa0a:	eb0b 2910 	add.w	r9, fp, r0, lsr #8
9001fa0e:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
9001fa12:	ea4f 2919 	mov.w	r9, r9, lsr #8
9001fa16:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
9001fa1a:	ea4e 0909 	orr.w	r9, lr, r9
9001fa1e:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
9001fa22:	8868      	ldrh	r0, [r5, #2]
9001fa24:	d019      	beq.n	9001fa5a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
9001fa26:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
9001fa2a:	ea4f 0ae8 	mov.w	sl, r8, asr #3
9001fa2e:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
9001fa32:	fb0a fe0e 	mul.w	lr, sl, lr
9001fa36:	fb08 f800 	mul.w	r8, r8, r0
9001fa3a:	ea06 105e 	and.w	r0, r6, lr, lsr #5
9001fa3e:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
9001fa42:	f108 0b20 	add.w	fp, r8, #32
9001fa46:	4486      	add	lr, r0
9001fa48:	eb0b 2018 	add.w	r0, fp, r8, lsr #8
9001fa4c:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
9001fa50:	0a00      	lsrs	r0, r0, #8
9001fa52:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
9001fa56:	ea4e 0000 	orr.w	r0, lr, r0
9001fa5a:	ea4f 4e09 	mov.w	lr, r9, lsl #16
9001fa5e:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
9001fa62:	ea4f 4a00 	mov.w	sl, r0, lsl #16
9001fa66:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
9001fa6a:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
9001fa6e:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
9001fa72:	ea4e 0909 	orr.w	r9, lr, r9
9001fa76:	ea4a 0000 	orr.w	r0, sl, r0
9001fa7a:	f1bc 0f00 	cmp.w	ip, #0
9001fa7e:	f000 8107 	beq.w	9001fc90 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3fc>
9001fa82:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
9001fa86:	9c0a      	ldr	r4, [sp, #40]	; 0x28
9001fa88:	3a01      	subs	r2, #1
9001fa8a:	2cff      	cmp	r4, #255	; 0xff
9001fa8c:	ea4f 0242 	mov.w	r2, r2, lsl #1
9001fa90:	f102 0202 	add.w	r2, r2, #2
9001fa94:	eb05 0e02 	add.w	lr, r5, r2
9001fa98:	5aaa      	ldrh	r2, [r5, r2]
9001fa9a:	d018      	beq.n	9001face <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23a>
9001fa9c:	f422 65fc 	bic.w	r5, r2, #2016	; 0x7e0
9001faa0:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
9001faa4:	ea4f 08e4 	mov.w	r8, r4, asr #3
9001faa8:	fb04 fa02 	mul.w	sl, r4, r2
9001faac:	fb08 f805 	mul.w	r8, r8, r5
9001fab0:	f10a 0520 	add.w	r5, sl, #32
9001fab4:	ea06 1258 	and.w	r2, r6, r8, lsr #5
9001fab8:	f608 0801 	addw	r8, r8, #2049	; 0x801
9001fabc:	eb05 251a 	add.w	r5, r5, sl, lsr #8
9001fac0:	4442      	add	r2, r8
9001fac2:	0a2d      	lsrs	r5, r5, #8
9001fac4:	ea06 1252 	and.w	r2, r6, r2, lsr #5
9001fac8:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
9001facc:	432a      	orrs	r2, r5
9001face:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
9001fad0:	f8be 5002 	ldrh.w	r5, [lr, #2]
9001fad4:	2cff      	cmp	r4, #255	; 0xff
9001fad6:	d01a      	beq.n	9001fb0e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
9001fad8:	f425 6efc 	bic.w	lr, r5, #2016	; 0x7e0
9001fadc:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
9001fae0:	ea4f 08e4 	mov.w	r8, r4, asr #3
9001fae4:	fb04 fa05 	mul.w	sl, r4, r5
9001fae8:	fb08 f80e 	mul.w	r8, r8, lr
9001faec:	f10a 0e20 	add.w	lr, sl, #32
9001faf0:	ea06 1558 	and.w	r5, r6, r8, lsr #5
9001faf4:	f608 0801 	addw	r8, r8, #2049	; 0x801
9001faf8:	eb0e 2e1a 	add.w	lr, lr, sl, lsr #8
9001fafc:	4445      	add	r5, r8
9001fafe:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
9001fb02:	ea06 1555 	and.w	r5, r6, r5, lsr #5
9001fb06:	f40e 6efc 	and.w	lr, lr, #2016	; 0x7e0
9001fb0a:	ea45 050e 	orr.w	r5, r5, lr
9001fb0e:	fb1c fe01 	smulbb	lr, ip, r1
9001fb12:	f1cc 0810 	rsb	r8, ip, #16
9001fb16:	ea4f 4a02 	mov.w	sl, r2, lsl #16
9001fb1a:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
9001fb1e:	ea4f 0eee 	mov.w	lr, lr, asr #3
9001fb22:	eba8 0801 	sub.w	r8, r8, r1
9001fb26:	ea4f 4b05 	mov.w	fp, r5, lsl #16
9001fb2a:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
9001fb2e:	ebce 0141 	rsb	r1, lr, r1, lsl #1
9001fb32:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
9001fb36:	eb0e 0848 	add.w	r8, lr, r8, lsl #1
9001fb3a:	ea4a 0202 	orr.w	r2, sl, r2
9001fb3e:	4341      	muls	r1, r0
9001fb40:	ebce 0c4c 	rsb	ip, lr, ip, lsl #1
9001fb44:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
9001fb48:	fb09 1108 	mla	r1, r9, r8, r1
9001fb4c:	ea4b 0505 	orr.w	r5, fp, r5
9001fb50:	fb0c 1102 	mla	r1, ip, r2, r1
9001fb54:	fb0e 1e05 	mla	lr, lr, r5, r1
9001fb58:	ea4f 525e 	mov.w	r2, lr, lsr #21
9001fb5c:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
9001fb60:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
9001fb64:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
9001fb68:	ea42 0e0e 	orr.w	lr, r2, lr
9001fb6c:	fa1f f28e 	uxth.w	r2, lr
9001fb70:	2bff      	cmp	r3, #255	; 0xff
9001fb72:	f040 80a1 	bne.w	9001fcb8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x424>
9001fb76:	803a      	strh	r2, [r7, #0]
9001fb78:	9b1d      	ldr	r3, [sp, #116]	; 0x74
9001fb7a:	3702      	adds	r7, #2
9001fb7c:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
9001fb7e:	4413      	add	r3, r2
9001fb80:	9a1e      	ldr	r2, [sp, #120]	; 0x78
9001fb82:	931d      	str	r3, [sp, #116]	; 0x74
9001fb84:	9b20      	ldr	r3, [sp, #128]	; 0x80
9001fb86:	441a      	add	r2, r3
9001fb88:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
9001fb8a:	3b01      	subs	r3, #1
9001fb8c:	921e      	str	r2, [sp, #120]	; 0x78
9001fb8e:	930f      	str	r3, [sp, #60]	; 0x3c
9001fb90:	e6c7      	b.n	9001f922 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
9001fb92:	9b1d      	ldr	r3, [sp, #116]	; 0x74
9001fb94:	9e1f      	ldr	r6, [sp, #124]	; 0x7c
9001fb96:	9c1e      	ldr	r4, [sp, #120]	; 0x78
9001fb98:	4433      	add	r3, r6
9001fb9a:	931d      	str	r3, [sp, #116]	; 0x74
9001fb9c:	9b20      	ldr	r3, [sp, #128]	; 0x80
9001fb9e:	441c      	add	r4, r3
9001fba0:	9b06      	ldr	r3, [sp, #24]
9001fba2:	3b01      	subs	r3, #1
9001fba4:	941e      	str	r4, [sp, #120]	; 0x78
9001fba6:	9306      	str	r3, [sp, #24]
9001fba8:	9b07      	ldr	r3, [sp, #28]
9001fbaa:	3302      	adds	r3, #2
9001fbac:	9307      	str	r3, [sp, #28]
9001fbae:	e696      	b.n	9001f8de <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
9001fbb0:	d028      	beq.n	9001fc04 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
9001fbb2:	9b06      	ldr	r3, [sp, #24]
9001fbb4:	981f      	ldr	r0, [sp, #124]	; 0x7c
9001fbb6:	3b01      	subs	r3, #1
9001fbb8:	9d1d      	ldr	r5, [sp, #116]	; 0x74
9001fbba:	fb00 5003 	mla	r0, r0, r3, r5
9001fbbe:	1400      	asrs	r0, r0, #16
9001fbc0:	f53f aeaa 	bmi.w	9001f918 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
9001fbc4:	3901      	subs	r1, #1
9001fbc6:	4288      	cmp	r0, r1
9001fbc8:	f6bf aea6 	bge.w	9001f918 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
9001fbcc:	9920      	ldr	r1, [sp, #128]	; 0x80
9001fbce:	981e      	ldr	r0, [sp, #120]	; 0x78
9001fbd0:	fb01 0303 	mla	r3, r1, r3, r0
9001fbd4:	141b      	asrs	r3, r3, #16
9001fbd6:	f53f ae9f 	bmi.w	9001f918 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
9001fbda:	3a01      	subs	r2, #1
9001fbdc:	4293      	cmp	r3, r2
9001fbde:	f6bf ae9b 	bge.w	9001f918 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
9001fbe2:	9b06      	ldr	r3, [sp, #24]
9001fbe4:	f64f 061f 	movw	r6, #63519	; 0xf81f
9001fbe8:	f8dd e01c 	ldr.w	lr, [sp, #28]
9001fbec:	930f      	str	r3, [sp, #60]	; 0x3c
9001fbee:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
9001fbf0:	2b00      	cmp	r3, #0
9001fbf2:	f300 80b6 	bgt.w	9001fd62 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ce>
9001fbf6:	9b06      	ldr	r3, [sp, #24]
9001fbf8:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
9001fbfc:	9b07      	ldr	r3, [sp, #28]
9001fbfe:	eb03 0344 	add.w	r3, r3, r4, lsl #1
9001fc02:	9307      	str	r3, [sp, #28]
9001fc04:	9b0e      	ldr	r3, [sp, #56]	; 0x38
9001fc06:	2b00      	cmp	r3, #0
9001fc08:	f340 8218 	ble.w	9002003c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a8>
9001fc0c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
9001fc10:	9b1c      	ldr	r3, [sp, #112]	; 0x70
9001fc12:	ee30 0a04 	vadd.f32	s0, s0, s8
9001fc16:	ee70 0aa4 	vadd.f32	s1, s1, s9
9001fc1a:	eef0 6a62 	vmov.f32	s13, s5
9001fc1e:	eec7 7a00 	vdiv.f32	s15, s14, s0
9001fc22:	ee31 1a05 	vadd.f32	s2, s2, s10
9001fc26:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
9001fc2a:	edcd 6a1d 	vstr	s13, [sp, #116]	; 0x74
9001fc2e:	eef0 6a43 	vmov.f32	s13, s6
9001fc32:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
9001fc36:	edcd 6a1e 	vstr	s13, [sp, #120]	; 0x78
9001fc3a:	ee20 7aa7 	vmul.f32	s14, s1, s15
9001fc3e:	ee61 7a27 	vmul.f32	s15, s2, s15
9001fc42:	ee77 2a62 	vsub.f32	s5, s14, s5
9001fc46:	ee37 3ac3 	vsub.f32	s6, s15, s6
9001fc4a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
9001fc4e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
9001fc52:	ee12 2a90 	vmov	r2, s5
9001fc56:	eef0 2a47 	vmov.f32	s5, s14
9001fc5a:	fb92 f3f3 	sdiv	r3, r2, r3
9001fc5e:	ee13 2a10 	vmov	r2, s6
9001fc62:	931f      	str	r3, [sp, #124]	; 0x7c
9001fc64:	9b1c      	ldr	r3, [sp, #112]	; 0x70
9001fc66:	eeb0 3a67 	vmov.f32	s6, s15
9001fc6a:	fb92 f3f3 	sdiv	r3, r2, r3
9001fc6e:	9320      	str	r3, [sp, #128]	; 0x80
9001fc70:	9b0e      	ldr	r3, [sp, #56]	; 0x38
9001fc72:	9a10      	ldr	r2, [sp, #64]	; 0x40
9001fc74:	3b01      	subs	r3, #1
9001fc76:	930e      	str	r3, [sp, #56]	; 0x38
9001fc78:	9b1c      	ldr	r3, [sp, #112]	; 0x70
9001fc7a:	bf08      	it	eq
9001fc7c:	4613      	moveq	r3, r2
9001fc7e:	9306      	str	r3, [sp, #24]
9001fc80:	e61f      	b.n	9001f8c2 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
9001fc82:	fb08 f505 	mul.w	r5, r8, r5
9001fc86:	fb09 5303 	mla	r3, r9, r3, r5
9001fc8a:	e69f      	b.n	9001f9cc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
9001fc8c:	4681      	mov	r9, r0
9001fc8e:	e6c6      	b.n	9001fa1e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
9001fc90:	f1c1 0210 	rsb	r2, r1, #16
9001fc94:	4341      	muls	r1, r0
9001fc96:	fb09 1902 	mla	r9, r9, r2, r1
9001fc9a:	ea4f 0949 	mov.w	r9, r9, lsl #1
9001fc9e:	ea4f 5259 	mov.w	r2, r9, lsr #21
9001fca2:	ea4f 1959 	mov.w	r9, r9, lsr #5
9001fca6:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
9001fcaa:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
9001fcae:	ea42 0909 	orr.w	r9, r2, r9
9001fcb2:	fa1f f289 	uxth.w	r2, r9
9001fcb6:	e75b      	b.n	9001fb70 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2dc>
9001fcb8:	f8b7 c000 	ldrh.w	ip, [r7]
9001fcbc:	43db      	mvns	r3, r3
9001fcbe:	ea4f 202c 	mov.w	r0, ip, asr #8
9001fcc2:	fa5f fe83 	uxtb.w	lr, r3
9001fcc6:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
9001fcca:	ea4f 05ec 	mov.w	r5, ip, asr #3
9001fcce:	ea4f 03cc 	mov.w	r3, ip, lsl #3
9001fcd2:	fb00 f00e 	mul.w	r0, r0, lr
9001fcd6:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
9001fcda:	b2db      	uxtb	r3, r3
9001fcdc:	1c41      	adds	r1, r0, #1
9001fcde:	fb05 f50e 	mul.w	r5, r5, lr
9001fce2:	fb03 f30e 	mul.w	r3, r3, lr
9001fce6:	eb01 2010 	add.w	r0, r1, r0, lsr #8
9001fcea:	1211      	asrs	r1, r2, #8
9001fcec:	f021 0107 	bic.w	r1, r1, #7
9001fcf0:	eb01 2110 	add.w	r1, r1, r0, lsr #8
9001fcf4:	48d3      	ldr	r0, [pc, #844]	; (90020044 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7b0>)
9001fcf6:	b2c9      	uxtb	r1, r1
9001fcf8:	ea00 2001 	and.w	r0, r0, r1, lsl #8
9001fcfc:	1c69      	adds	r1, r5, #1
9001fcfe:	eb01 2515 	add.w	r5, r1, r5, lsr #8
9001fd02:	10d1      	asrs	r1, r2, #3
9001fd04:	00d2      	lsls	r2, r2, #3
9001fd06:	f021 0103 	bic.w	r1, r1, #3
9001fd0a:	eb01 2115 	add.w	r1, r1, r5, lsr #8
9001fd0e:	00c9      	lsls	r1, r1, #3
9001fd10:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
9001fd14:	4301      	orrs	r1, r0
9001fd16:	1c58      	adds	r0, r3, #1
9001fd18:	eb00 2313 	add.w	r3, r0, r3, lsr #8
9001fd1c:	eb02 2213 	add.w	r2, r2, r3, lsr #8
9001fd20:	f3c2 02c4 	ubfx	r2, r2, #3, #5
9001fd24:	430a      	orrs	r2, r1
9001fd26:	e726      	b.n	9001fb76 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e2>
9001fd28:	f115 0e01 	adds.w	lr, r5, #1
9001fd2c:	f53f af24 	bmi.w	9001fb78 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
9001fd30:	4572      	cmp	r2, lr
9001fd32:	f6ff af21 	blt.w	9001fb78 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
9001fd36:	f110 0e01 	adds.w	lr, r0, #1
9001fd3a:	f53f af1d 	bmi.w	9001fb78 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
9001fd3e:	4573      	cmp	r3, lr
9001fd40:	f6ff af1a 	blt.w	9001fb78 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
9001fd44:	b21b      	sxth	r3, r3
9001fd46:	b212      	sxth	r2, r2
9001fd48:	9301      	str	r3, [sp, #4]
9001fd4a:	9200      	str	r2, [sp, #0]
9001fd4c:	e9cd 1c04 	strd	r1, ip, [sp, #16]
9001fd50:	e9cd 5002 	strd	r5, r0, [sp, #8]
9001fd54:	e9dd 3208 	ldrd	r3, r2, [sp, #32]
9001fd58:	4639      	mov	r1, r7
9001fd5a:	9811      	ldr	r0, [sp, #68]	; 0x44
9001fd5c:	f7ff fc22 	bl	9001f5a4 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>
9001fd60:	e70a      	b.n	9001fb78 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
9001fd62:	9b1d      	ldr	r3, [sp, #116]	; 0x74
9001fd64:	f3c3 3203 	ubfx	r2, r3, #12, #4
9001fd68:	9b1e      	ldr	r3, [sp, #120]	; 0x78
9001fd6a:	f3c3 3503 	ubfx	r5, r3, #12, #4
9001fd6e:	9b24      	ldr	r3, [sp, #144]	; 0x90
9001fd70:	fa1f fc82 	uxth.w	ip, r2
9001fd74:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
9001fd78:	9b1e      	ldr	r3, [sp, #120]	; 0x78
9001fd7a:	ea4f 100c 	mov.w	r0, ip, lsl #4
9001fd7e:	141f      	asrs	r7, r3, #16
9001fd80:	9b1d      	ldr	r3, [sp, #116]	; 0x74
9001fd82:	141b      	asrs	r3, r3, #16
9001fd84:	fb01 3707 	mla	r7, r1, r7, r3
9001fd88:	9b09      	ldr	r3, [sp, #36]	; 0x24
9001fd8a:	eb03 0a07 	add.w	sl, r3, r7
9001fd8e:	f813 9007 	ldrb.w	r9, [r3, r7]
9001fd92:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
9001fd96:	f89a 8001 	ldrb.w	r8, [sl, #1]
9001fd9a:	b29b      	uxth	r3, r3
9001fd9c:	2d00      	cmp	r5, #0
9001fd9e:	f000 80fe 	beq.w	9001ff9e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70a>
9001fda2:	f81a 4001 	ldrb.w	r4, [sl, r1]
9001fda6:	eb0a 0b01 	add.w	fp, sl, r1
9001fdaa:	fa1f fa85 	uxth.w	sl, r5
9001fdae:	940c      	str	r4, [sp, #48]	; 0x30
9001fdb0:	fb0a fc0c 	mul.w	ip, sl, ip
9001fdb4:	f89b 4001 	ldrb.w	r4, [fp, #1]
9001fdb8:	ebcc 1a0a 	rsb	sl, ip, sl, lsl #4
9001fdbc:	eba0 000c 	sub.w	r0, r0, ip
9001fdc0:	940d      	str	r4, [sp, #52]	; 0x34
9001fdc2:	fa1f fa8a 	uxth.w	sl, sl
9001fdc6:	b280      	uxth	r0, r0
9001fdc8:	eba3 030a 	sub.w	r3, r3, sl
9001fdcc:	fb08 f000 	mul.w	r0, r8, r0
9001fdd0:	b29b      	uxth	r3, r3
9001fdd2:	fb09 0303 	mla	r3, r9, r3, r0
9001fdd6:	980c      	ldr	r0, [sp, #48]	; 0x30
9001fdd8:	fb0a 3300 	mla	r3, sl, r0, r3
9001fddc:	fb0c 3304 	mla	r3, ip, r4, r3
9001fde0:	f3c3 2307 	ubfx	r3, r3, #8, #8
9001fde4:	2b00      	cmp	r3, #0
9001fde6:	f000 80cc 	beq.w	9001ff82 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ee>
9001fdea:	9808      	ldr	r0, [sp, #32]
9001fdec:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
9001fdf0:	9c08      	ldr	r4, [sp, #32]
9001fdf2:	eb00 0047 	add.w	r0, r0, r7, lsl #1
9001fdf6:	f834 7017 	ldrh.w	r7, [r4, r7, lsl #1]
9001fdfa:	f000 80d5 	beq.w	9001ffa8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x714>
9001fdfe:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
9001fe02:	ea4f 0ae9 	mov.w	sl, r9, asr #3
9001fe06:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
9001fe0a:	fb0a fc0c 	mul.w	ip, sl, ip
9001fe0e:	fb09 f707 	mul.w	r7, r9, r7
9001fe12:	ea06 195c 	and.w	r9, r6, ip, lsr #5
9001fe16:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
9001fe1a:	f107 0b20 	add.w	fp, r7, #32
9001fe1e:	44cc      	add	ip, r9
9001fe20:	eb0b 2917 	add.w	r9, fp, r7, lsr #8
9001fe24:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
9001fe28:	ea4f 2919 	mov.w	r9, r9, lsr #8
9001fe2c:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
9001fe30:	ea4c 0909 	orr.w	r9, ip, r9
9001fe34:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
9001fe38:	8847      	ldrh	r7, [r0, #2]
9001fe3a:	d019      	beq.n	9001fe70 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5dc>
9001fe3c:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
9001fe40:	ea4f 0ae8 	mov.w	sl, r8, asr #3
9001fe44:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
9001fe48:	fb0a fc0c 	mul.w	ip, sl, ip
9001fe4c:	fb08 f807 	mul.w	r8, r8, r7
9001fe50:	ea06 175c 	and.w	r7, r6, ip, lsr #5
9001fe54:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
9001fe58:	f108 0b20 	add.w	fp, r8, #32
9001fe5c:	44bc      	add	ip, r7
9001fe5e:	eb0b 2718 	add.w	r7, fp, r8, lsr #8
9001fe62:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
9001fe66:	0a3f      	lsrs	r7, r7, #8
9001fe68:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
9001fe6c:	ea4c 0707 	orr.w	r7, ip, r7
9001fe70:	ea4f 4c09 	mov.w	ip, r9, lsl #16
9001fe74:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
9001fe78:	ea4f 4a07 	mov.w	sl, r7, lsl #16
9001fe7c:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
9001fe80:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
9001fe84:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
9001fe88:	ea4c 0909 	orr.w	r9, ip, r9
9001fe8c:	ea4a 0707 	orr.w	r7, sl, r7
9001fe90:	2d00      	cmp	r5, #0
9001fe92:	f000 808b 	beq.w	9001ffac <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x718>
9001fe96:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
9001fe9a:	3901      	subs	r1, #1
9001fe9c:	0049      	lsls	r1, r1, #1
9001fe9e:	3102      	adds	r1, #2
9001fea0:	eb00 0c01 	add.w	ip, r0, r1
9001fea4:	5a41      	ldrh	r1, [r0, r1]
9001fea6:	980c      	ldr	r0, [sp, #48]	; 0x30
9001fea8:	28ff      	cmp	r0, #255	; 0xff
9001feaa:	d019      	beq.n	9001fee0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64c>
9001feac:	f421 60fc 	bic.w	r0, r1, #2016	; 0x7e0
9001feb0:	9c0c      	ldr	r4, [sp, #48]	; 0x30
9001feb2:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
9001feb6:	ea4f 08e4 	mov.w	r8, r4, asr #3
9001feba:	fb04 fa01 	mul.w	sl, r4, r1
9001febe:	fb08 f800 	mul.w	r8, r8, r0
9001fec2:	f10a 0020 	add.w	r0, sl, #32
9001fec6:	ea06 1158 	and.w	r1, r6, r8, lsr #5
9001feca:	f608 0801 	addw	r8, r8, #2049	; 0x801
9001fece:	eb00 201a 	add.w	r0, r0, sl, lsr #8
9001fed2:	4441      	add	r1, r8
9001fed4:	0a00      	lsrs	r0, r0, #8
9001fed6:	ea06 1151 	and.w	r1, r6, r1, lsr #5
9001feda:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
9001fede:	4301      	orrs	r1, r0
9001fee0:	9c0d      	ldr	r4, [sp, #52]	; 0x34
9001fee2:	f8bc 0002 	ldrh.w	r0, [ip, #2]
9001fee6:	2cff      	cmp	r4, #255	; 0xff
9001fee8:	d01a      	beq.n	9001ff20 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68c>
9001feea:	f420 6cfc 	bic.w	ip, r0, #2016	; 0x7e0
9001feee:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
9001fef2:	ea4f 08e4 	mov.w	r8, r4, asr #3
9001fef6:	fb04 fa00 	mul.w	sl, r4, r0
9001fefa:	fb08 f80c 	mul.w	r8, r8, ip
9001fefe:	f10a 0c20 	add.w	ip, sl, #32
9001ff02:	ea06 1058 	and.w	r0, r6, r8, lsr #5
9001ff06:	f608 0801 	addw	r8, r8, #2049	; 0x801
9001ff0a:	eb0c 2c1a 	add.w	ip, ip, sl, lsr #8
9001ff0e:	4440      	add	r0, r8
9001ff10:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
9001ff14:	ea06 1050 	and.w	r0, r6, r0, lsr #5
9001ff18:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
9001ff1c:	ea40 000c 	orr.w	r0, r0, ip
9001ff20:	fb15 fc02 	smulbb	ip, r5, r2
9001ff24:	f1c5 0810 	rsb	r8, r5, #16
9001ff28:	ea4f 4a01 	mov.w	sl, r1, lsl #16
9001ff2c:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
9001ff30:	ea4f 0cec 	mov.w	ip, ip, asr #3
9001ff34:	eba8 0802 	sub.w	r8, r8, r2
9001ff38:	ea4f 4b00 	mov.w	fp, r0, lsl #16
9001ff3c:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
9001ff40:	ebcc 0242 	rsb	r2, ip, r2, lsl #1
9001ff44:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
9001ff48:	eb0c 0848 	add.w	r8, ip, r8, lsl #1
9001ff4c:	ea4a 0101 	orr.w	r1, sl, r1
9001ff50:	437a      	muls	r2, r7
9001ff52:	ebcc 0545 	rsb	r5, ip, r5, lsl #1
9001ff56:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
9001ff5a:	fb09 2208 	mla	r2, r9, r8, r2
9001ff5e:	ea4b 0000 	orr.w	r0, fp, r0
9001ff62:	fb05 2201 	mla	r2, r5, r1, r2
9001ff66:	fb0c 2200 	mla	r2, ip, r0, r2
9001ff6a:	0d57      	lsrs	r7, r2, #21
9001ff6c:	0952      	lsrs	r2, r2, #5
9001ff6e:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
9001ff72:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
9001ff76:	433a      	orrs	r2, r7
9001ff78:	2bff      	cmp	r3, #255	; 0xff
9001ff7a:	b292      	uxth	r2, r2
9001ff7c:	d127      	bne.n	9001ffce <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x73a>
9001ff7e:	f8ae 2000 	strh.w	r2, [lr]
9001ff82:	9b1d      	ldr	r3, [sp, #116]	; 0x74
9001ff84:	f10e 0e02 	add.w	lr, lr, #2
9001ff88:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
9001ff8a:	4413      	add	r3, r2
9001ff8c:	9a1e      	ldr	r2, [sp, #120]	; 0x78
9001ff8e:	931d      	str	r3, [sp, #116]	; 0x74
9001ff90:	9b20      	ldr	r3, [sp, #128]	; 0x80
9001ff92:	441a      	add	r2, r3
9001ff94:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
9001ff96:	3b01      	subs	r3, #1
9001ff98:	921e      	str	r2, [sp, #120]	; 0x78
9001ff9a:	930f      	str	r3, [sp, #60]	; 0x3c
9001ff9c:	e627      	b.n	9001fbee <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35a>
9001ff9e:	fb08 f000 	mul.w	r0, r8, r0
9001ffa2:	fb09 0303 	mla	r3, r9, r3, r0
9001ffa6:	e71b      	b.n	9001fde0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54c>
9001ffa8:	46b9      	mov	r9, r7
9001ffaa:	e743      	b.n	9001fe34 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a0>
9001ffac:	f1c2 0110 	rsb	r1, r2, #16
9001ffb0:	437a      	muls	r2, r7
9001ffb2:	fb09 2901 	mla	r9, r9, r1, r2
9001ffb6:	ea4f 0949 	mov.w	r9, r9, lsl #1
9001ffba:	ea4f 5059 	mov.w	r0, r9, lsr #21
9001ffbe:	ea4f 1259 	mov.w	r2, r9, lsr #5
9001ffc2:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
9001ffc6:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
9001ffca:	4302      	orrs	r2, r0
9001ffcc:	e7d4      	b.n	9001ff78 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e4>
9001ffce:	f8be 7000 	ldrh.w	r7, [lr]
9001ffd2:	43db      	mvns	r3, r3
9001ffd4:	4c1b      	ldr	r4, [pc, #108]	; (90020044 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7b0>)
9001ffd6:	1238      	asrs	r0, r7, #8
9001ffd8:	fa5f fc83 	uxtb.w	ip, r3
9001ffdc:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
9001ffe0:	10fd      	asrs	r5, r7, #3
9001ffe2:	00fb      	lsls	r3, r7, #3
9001ffe4:	fb00 f00c 	mul.w	r0, r0, ip
9001ffe8:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
9001ffec:	b2db      	uxtb	r3, r3
9001ffee:	fb05 f10c 	mul.w	r1, r5, ip
9001fff2:	1c45      	adds	r5, r0, #1
9001fff4:	fb03 f30c 	mul.w	r3, r3, ip
9001fff8:	eb05 2010 	add.w	r0, r5, r0, lsr #8
9001fffc:	1215      	asrs	r5, r2, #8
9001fffe:	f025 0507 	bic.w	r5, r5, #7
90020002:	eb05 2010 	add.w	r0, r5, r0, lsr #8
90020006:	1c4d      	adds	r5, r1, #1
90020008:	eb05 2511 	add.w	r5, r5, r1, lsr #8
9002000c:	10d1      	asrs	r1, r2, #3
9002000e:	b2c0      	uxtb	r0, r0
90020010:	f021 0103 	bic.w	r1, r1, #3
90020014:	00d2      	lsls	r2, r2, #3
90020016:	ea04 2000 	and.w	r0, r4, r0, lsl #8
9002001a:	eb01 2115 	add.w	r1, r1, r5, lsr #8
9002001e:	00c9      	lsls	r1, r1, #3
90020020:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
90020024:	4308      	orrs	r0, r1
90020026:	1c59      	adds	r1, r3, #1
90020028:	eb01 2313 	add.w	r3, r1, r3, lsr #8
9002002c:	eb02 2313 	add.w	r3, r2, r3, lsr #8
90020030:	f3c3 03c4 	ubfx	r3, r3, #3, #5
90020034:	4318      	orrs	r0, r3
90020036:	f8ae 0000 	strh.w	r0, [lr]
9002003a:	e7a2      	b.n	9001ff82 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ee>
9002003c:	b013      	add	sp, #76	; 0x4c
9002003e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90020042:	bf00      	nop
90020044:	fffff800 	.word	0xfffff800

90020048 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh>:
90020048:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
9002004c:	e9dd 4509 	ldrd	r4, r5, [sp, #36]	; 0x24
90020050:	f9bd a020 	ldrsh.w	sl, [sp, #32]
90020054:	fb05 4c03 	mla	ip, r5, r3, r4
90020058:	2d00      	cmp	r5, #0
9002005a:	f89d 902c 	ldrb.w	r9, [sp, #44]	; 0x2c
9002005e:	f89d 7030 	ldrb.w	r7, [sp, #48]	; 0x30
90020062:	eb02 0e4c 	add.w	lr, r2, ip, lsl #1
90020066:	f89d 6034 	ldrb.w	r6, [sp, #52]	; 0x34
9002006a:	8808      	ldrh	r0, [r1, #0]
9002006c:	f2c0 80a7 	blt.w	900201be <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x176>
90020070:	45aa      	cmp	sl, r5
90020072:	f340 80a4 	ble.w	900201be <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x176>
90020076:	2c00      	cmp	r4, #0
90020078:	f2c0 809f 	blt.w	900201ba <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x172>
9002007c:	42a3      	cmp	r3, r4
9002007e:	f340 809c 	ble.w	900201ba <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x172>
90020082:	f832 801c 	ldrh.w	r8, [r2, ip, lsl #1]
90020086:	1c62      	adds	r2, r4, #1
90020088:	f100 809c 	bmi.w	900201c4 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x17c>
9002008c:	4293      	cmp	r3, r2
9002008e:	f340 8099 	ble.w	900201c4 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x17c>
90020092:	f1b9 0f00 	cmp.w	r9, #0
90020096:	f000 8095 	beq.w	900201c4 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x17c>
9002009a:	f8be c002 	ldrh.w	ip, [lr, #2]
9002009e:	3501      	adds	r5, #1
900200a0:	f100 8094 	bmi.w	900201cc <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x184>
900200a4:	45aa      	cmp	sl, r5
900200a6:	f340 8091 	ble.w	900201cc <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x184>
900200aa:	2f00      	cmp	r7, #0
900200ac:	f000 808e 	beq.w	900201cc <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x184>
900200b0:	2c00      	cmp	r4, #0
900200b2:	f2c0 8089 	blt.w	900201c8 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x180>
900200b6:	42a3      	cmp	r3, r4
900200b8:	f340 8086 	ble.w	900201c8 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x180>
900200bc:	f83e 5013 	ldrh.w	r5, [lr, r3, lsl #1]
900200c0:	3401      	adds	r4, #1
900200c2:	f100 8086 	bmi.w	900201d2 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x18a>
900200c6:	42a3      	cmp	r3, r4
900200c8:	f340 8083 	ble.w	900201d2 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x18a>
900200cc:	f1b9 0f00 	cmp.w	r9, #0
900200d0:	d07f      	beq.n	900201d2 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x18a>
900200d2:	3301      	adds	r3, #1
900200d4:	f83e 3013 	ldrh.w	r3, [lr, r3, lsl #1]
900200d8:	ea4f 4408 	mov.w	r4, r8, lsl #16
900200dc:	f428 68fc 	bic.w	r8, r8, #2016	; 0x7e0
900200e0:	fb19 fe07 	smulbb	lr, r9, r7
900200e4:	f1c7 0210 	rsb	r2, r7, #16
900200e8:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
900200ec:	f3ce 0ec7 	ubfx	lr, lr, #3, #8
900200f0:	eba2 0209 	sub.w	r2, r2, r9
900200f4:	ea44 0808 	orr.w	r8, r4, r8
900200f8:	ea4f 440c 	mov.w	r4, ip, lsl #16
900200fc:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
90020100:	eb0e 0242 	add.w	r2, lr, r2, lsl #1
90020104:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
90020108:	ebce 0747 	rsb	r7, lr, r7, lsl #1
9002010c:	ea44 0c0c 	orr.w	ip, r4, ip
90020110:	ebce 0449 	rsb	r4, lr, r9, lsl #1
90020114:	fb04 f40c 	mul.w	r4, r4, ip
90020118:	fb02 4808 	mla	r8, r2, r8, r4
9002011c:	041a      	lsls	r2, r3, #16
9002011e:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
90020122:	b2b4      	uxth	r4, r6
90020124:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
90020128:	43f6      	mvns	r6, r6
9002012a:	4313      	orrs	r3, r2
9002012c:	042a      	lsls	r2, r5, #16
9002012e:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
90020132:	b2f6      	uxtb	r6, r6
90020134:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
90020138:	fb0e 8303 	mla	r3, lr, r3, r8
9002013c:	432a      	orrs	r2, r5
9002013e:	fb07 3202 	mla	r2, r7, r2, r3
90020142:	10c7      	asrs	r7, r0, #3
90020144:	0d53      	lsrs	r3, r2, #21
90020146:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
9002014a:	0952      	lsrs	r2, r2, #5
9002014c:	fb17 f706 	smulbb	r7, r7, r6
90020150:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
90020154:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
90020158:	431a      	orrs	r2, r3
9002015a:	b293      	uxth	r3, r2
9002015c:	1202      	asrs	r2, r0, #8
9002015e:	121d      	asrs	r5, r3, #8
90020160:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
90020164:	00c0      	lsls	r0, r0, #3
90020166:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
9002016a:	fb12 f206 	smulbb	r2, r2, r6
9002016e:	b2c0      	uxtb	r0, r0
90020170:	fb05 2504 	mla	r5, r5, r4, r2
90020174:	10da      	asrs	r2, r3, #3
90020176:	fb10 f006 	smulbb	r0, r0, r6
9002017a:	00db      	lsls	r3, r3, #3
9002017c:	b2ad      	uxth	r5, r5
9002017e:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
90020182:	b2db      	uxtb	r3, r3
90020184:	fb02 7204 	mla	r2, r2, r4, r7
90020188:	fb03 0004 	mla	r0, r3, r4, r0
9002018c:	1c6b      	adds	r3, r5, #1
9002018e:	b292      	uxth	r2, r2
90020190:	b280      	uxth	r0, r0
90020192:	eb03 2515 	add.w	r5, r3, r5, lsr #8
90020196:	1c43      	adds	r3, r0, #1
90020198:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
9002019c:	eb03 2310 	add.w	r3, r3, r0, lsr #8
900201a0:	1c50      	adds	r0, r2, #1
900201a2:	eb00 2212 	add.w	r2, r0, r2, lsr #8
900201a6:	f3c3 23c4 	ubfx	r3, r3, #11, #5
900201aa:	0952      	lsrs	r2, r2, #5
900201ac:	432b      	orrs	r3, r5
900201ae:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
900201b2:	4313      	orrs	r3, r2
900201b4:	800b      	strh	r3, [r1, #0]
900201b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
900201ba:	4680      	mov	r8, r0
900201bc:	e763      	b.n	90020086 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x3e>
900201be:	4684      	mov	ip, r0
900201c0:	4680      	mov	r8, r0
900201c2:	e76c      	b.n	9002009e <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x56>
900201c4:	4684      	mov	ip, r0
900201c6:	e76a      	b.n	9002009e <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x56>
900201c8:	4605      	mov	r5, r0
900201ca:	e779      	b.n	900200c0 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x78>
900201cc:	4603      	mov	r3, r0
900201ce:	4605      	mov	r5, r0
900201d0:	e782      	b.n	900200d8 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x90>
900201d2:	4603      	mov	r3, r0
900201d4:	e780      	b.n	900200d8 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x90>

900201d6 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
900201d6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
900201da:	b093      	sub	sp, #76	; 0x4c
900201dc:	461d      	mov	r5, r3
900201de:	9210      	str	r2, [sp, #64]	; 0x40
900201e0:	9b21      	ldr	r3, [sp, #132]	; 0x84
900201e2:	f89d 2094 	ldrb.w	r2, [sp, #148]	; 0x94
900201e6:	910a      	str	r1, [sp, #40]	; 0x28
900201e8:	920b      	str	r2, [sp, #44]	; 0x2c
900201ea:	6859      	ldr	r1, [r3, #4]
900201ec:	681b      	ldr	r3, [r3, #0]
900201ee:	9011      	str	r0, [sp, #68]	; 0x44
900201f0:	e9dd 2722 	ldrd	r2, r7, [sp, #136]	; 0x88
900201f4:	e9dd 461d 	ldrd	r4, r6, [sp, #116]	; 0x74
900201f8:	fb01 2707 	mla	r7, r1, r7, r2
900201fc:	eb03 0347 	add.w	r3, r3, r7, lsl #1
90020200:	9307      	str	r3, [sp, #28]
90020202:	9b24      	ldr	r3, [sp, #144]	; 0x90
90020204:	681b      	ldr	r3, [r3, #0]
90020206:	9309      	str	r3, [sp, #36]	; 0x24
90020208:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
9002020a:	43db      	mvns	r3, r3
9002020c:	b2db      	uxtb	r3, r3
9002020e:	9308      	str	r3, [sp, #32]
90020210:	9b0a      	ldr	r3, [sp, #40]	; 0x28
90020212:	2b00      	cmp	r3, #0
90020214:	dc03      	bgt.n	9002021e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
90020216:	9b10      	ldr	r3, [sp, #64]	; 0x40
90020218:	2b00      	cmp	r3, #0
9002021a:	f340 8205 	ble.w	90020628 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
9002021e:	9b24      	ldr	r3, [sp, #144]	; 0x90
90020220:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
90020224:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
90020228:	1e48      	subs	r0, r1, #1
9002022a:	f102 3cff 	add.w	ip, r2, #4294967295
9002022e:	2d00      	cmp	r5, #0
90020230:	f340 80da 	ble.w	900203e8 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x212>
90020234:	ea5f 4e24 	movs.w	lr, r4, asr #16
90020238:	ea4f 4326 	mov.w	r3, r6, asr #16
9002023c:	d406      	bmi.n	9002024c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
9002023e:	4586      	cmp	lr, r0
90020240:	da04      	bge.n	9002024c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
90020242:	2b00      	cmp	r3, #0
90020244:	db02      	blt.n	9002024c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
90020246:	4563      	cmp	r3, ip
90020248:	f2c0 80cf 	blt.w	900203ea <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
9002024c:	f11e 0e01 	adds.w	lr, lr, #1
90020250:	f100 80c1 	bmi.w	900203d6 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
90020254:	4571      	cmp	r1, lr
90020256:	f2c0 80be 	blt.w	900203d6 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
9002025a:	3301      	adds	r3, #1
9002025c:	f100 80bb 	bmi.w	900203d6 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
90020260:	429a      	cmp	r2, r3
90020262:	f2c0 80b8 	blt.w	900203d6 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
90020266:	46a9      	mov	r9, r5
90020268:	f8dd 801c 	ldr.w	r8, [sp, #28]
9002026c:	f1b9 0f00 	cmp.w	r9, #0
90020270:	f340 80d8 	ble.w	90020424 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x24e>
90020274:	9b24      	ldr	r3, [sp, #144]	; 0x90
90020276:	1421      	asrs	r1, r4, #16
90020278:	ea4f 4026 	mov.w	r0, r6, asr #16
9002027c:	f3c4 3203 	ubfx	r2, r4, #12, #4
90020280:	f3c6 3c03 	ubfx	ip, r6, #12, #4
90020284:	e9d3 e302 	ldrd	lr, r3, [r3, #8]
90020288:	f100 8112 	bmi.w	900204b0 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2da>
9002028c:	f10e 3aff 	add.w	sl, lr, #4294967295
90020290:	4551      	cmp	r1, sl
90020292:	f280 810d 	bge.w	900204b0 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2da>
90020296:	2800      	cmp	r0, #0
90020298:	f2c0 810a 	blt.w	900204b0 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2da>
9002029c:	f103 3aff 	add.w	sl, r3, #4294967295
900202a0:	4550      	cmp	r0, sl
900202a2:	f280 8105 	bge.w	900204b0 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2da>
900202a6:	fa0f f38e 	sxth.w	r3, lr
900202aa:	fb00 1103 	mla	r1, r0, r3, r1
900202ae:	9809      	ldr	r0, [sp, #36]	; 0x24
900202b0:	eb00 0a41 	add.w	sl, r0, r1, lsl #1
900202b4:	f830 e011 	ldrh.w	lr, [r0, r1, lsl #1]
900202b8:	f8ba 1002 	ldrh.w	r1, [sl, #2]
900202bc:	f1bc 0f00 	cmp.w	ip, #0
900202c0:	d007      	beq.n	900202d2 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xfc>
900202c2:	005b      	lsls	r3, r3, #1
900202c4:	eb0a 0003 	add.w	r0, sl, r3
900202c8:	f83a 3003 	ldrh.w	r3, [sl, r3]
900202cc:	930c      	str	r3, [sp, #48]	; 0x30
900202ce:	8843      	ldrh	r3, [r0, #2]
900202d0:	930d      	str	r3, [sp, #52]	; 0x34
900202d2:	ea4f 400e 	mov.w	r0, lr, lsl #16
900202d6:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
900202da:	fb12 f30c 	smulbb	r3, r2, ip
900202de:	ea4f 4a01 	mov.w	sl, r1, lsl #16
900202e2:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
900202e6:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
900202ea:	10db      	asrs	r3, r3, #3
900202ec:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
900202f0:	ea40 000e 	orr.w	r0, r0, lr
900202f4:	f1cc 0e10 	rsb	lr, ip, #16
900202f8:	ea4a 0101 	orr.w	r1, sl, r1
900202fc:	9f08      	ldr	r7, [sp, #32]
900202fe:	ebae 0e02 	sub.w	lr, lr, r2
90020302:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
90020306:	eb03 0e4e 	add.w	lr, r3, lr, lsl #1
9002030a:	4351      	muls	r1, r2
9002030c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
9002030e:	fb0e 1e00 	mla	lr, lr, r0, r1
90020312:	990c      	ldr	r1, [sp, #48]	; 0x30
90020314:	0410      	lsls	r0, r2, #16
90020316:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
9002031a:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
9002031e:	4310      	orrs	r0, r2
90020320:	9a0c      	ldr	r2, [sp, #48]	; 0x30
90020322:	0412      	lsls	r2, r2, #16
90020324:	fb03 e000 	mla	r0, r3, r0, lr
90020328:	f421 6efc 	bic.w	lr, r1, #2016	; 0x7e0
9002032c:	ebc3 034c 	rsb	r3, r3, ip, lsl #1
90020330:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
90020334:	ea42 020e 	orr.w	r2, r2, lr
90020338:	fb03 0302 	mla	r3, r3, r2, r0
9002033c:	f8b8 0000 	ldrh.w	r0, [r8]
90020340:	0d5a      	lsrs	r2, r3, #21
90020342:	095b      	lsrs	r3, r3, #5
90020344:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
90020348:	1201      	asrs	r1, r0, #8
9002034a:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
9002034e:	ea4f 0ee0 	mov.w	lr, r0, asr #3
90020352:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
90020356:	00c0      	lsls	r0, r0, #3
90020358:	4313      	orrs	r3, r2
9002035a:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
9002035e:	fb11 f107 	smulbb	r1, r1, r7
90020362:	b2c0      	uxtb	r0, r0
90020364:	b29b      	uxth	r3, r3
90020366:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
9002036a:	fb10 f007 	smulbb	r0, r0, r7
9002036e:	fb1e fe07 	smulbb	lr, lr, r7
90020372:	ea4f 2c23 	mov.w	ip, r3, asr #8
90020376:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
9002037a:	fb0c 1c02 	mla	ip, ip, r2, r1
9002037e:	10d9      	asrs	r1, r3, #3
90020380:	00db      	lsls	r3, r3, #3
90020382:	fa1f fc8c 	uxth.w	ip, ip
90020386:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
9002038a:	b2db      	uxtb	r3, r3
9002038c:	fb01 e102 	mla	r1, r1, r2, lr
90020390:	fb03 0302 	mla	r3, r3, r2, r0
90020394:	b289      	uxth	r1, r1
90020396:	b29a      	uxth	r2, r3
90020398:	f10c 0301 	add.w	r3, ip, #1
9002039c:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
900203a0:	1c53      	adds	r3, r2, #1
900203a2:	eb03 2312 	add.w	r3, r3, r2, lsr #8
900203a6:	1c4a      	adds	r2, r1, #1
900203a8:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
900203ac:	eb02 2111 	add.w	r1, r2, r1, lsr #8
900203b0:	f3c3 23c4 	ubfx	r3, r3, #11, #5
900203b4:	0949      	lsrs	r1, r1, #5
900203b6:	ea43 030c 	orr.w	r3, r3, ip
900203ba:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
900203be:	430b      	orrs	r3, r1
900203c0:	f8a8 3000 	strh.w	r3, [r8]
900203c4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
900203c6:	f108 0802 	add.w	r8, r8, #2
900203ca:	f109 39ff 	add.w	r9, r9, #4294967295
900203ce:	441c      	add	r4, r3
900203d0:	9b20      	ldr	r3, [sp, #128]	; 0x80
900203d2:	441e      	add	r6, r3
900203d4:	e74a      	b.n	9002026c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
900203d6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
900203d8:	3d01      	subs	r5, #1
900203da:	441c      	add	r4, r3
900203dc:	9b20      	ldr	r3, [sp, #128]	; 0x80
900203de:	441e      	add	r6, r3
900203e0:	9b07      	ldr	r3, [sp, #28]
900203e2:	3302      	adds	r3, #2
900203e4:	9307      	str	r3, [sp, #28]
900203e6:	e722      	b.n	9002022e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
900203e8:	d022      	beq.n	90020430 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25a>
900203ea:	1e6b      	subs	r3, r5, #1
900203ec:	981f      	ldr	r0, [sp, #124]	; 0x7c
900203ee:	fb00 4003 	mla	r0, r0, r3, r4
900203f2:	1400      	asrs	r0, r0, #16
900203f4:	f53f af37 	bmi.w	90020266 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
900203f8:	3901      	subs	r1, #1
900203fa:	4288      	cmp	r0, r1
900203fc:	f6bf af33 	bge.w	90020266 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
90020400:	9920      	ldr	r1, [sp, #128]	; 0x80
90020402:	fb01 6303 	mla	r3, r1, r3, r6
90020406:	141b      	asrs	r3, r3, #16
90020408:	f53f af2d 	bmi.w	90020266 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
9002040c:	3a01      	subs	r2, #1
9002040e:	4293      	cmp	r3, r2
90020410:	f6bf af29 	bge.w	90020266 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
90020414:	46a8      	mov	r8, r5
90020416:	f8dd 901c 	ldr.w	r9, [sp, #28]
9002041a:	f8bd a02c 	ldrh.w	sl, [sp, #44]	; 0x2c
9002041e:	f1b8 0f00 	cmp.w	r8, #0
90020422:	dc60      	bgt.n	900204e6 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x310>
90020424:	9b07      	ldr	r3, [sp, #28]
90020426:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
9002042a:	eb03 0345 	add.w	r3, r3, r5, lsl #1
9002042e:	9307      	str	r3, [sp, #28]
90020430:	9b0a      	ldr	r3, [sp, #40]	; 0x28
90020432:	2b00      	cmp	r3, #0
90020434:	f340 80f8 	ble.w	90020628 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
90020438:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
9002043c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
9002043e:	ee30 0a04 	vadd.f32	s0, s0, s8
90020442:	ee70 0aa4 	vadd.f32	s1, s1, s9
90020446:	eef0 6a62 	vmov.f32	s13, s5
9002044a:	eec7 7a00 	vdiv.f32	s15, s14, s0
9002044e:	ee31 1a05 	vadd.f32	s2, s2, s10
90020452:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
90020456:	ee16 4a90 	vmov	r4, s13
9002045a:	eef0 6a43 	vmov.f32	s13, s6
9002045e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
90020462:	ee16 6a90 	vmov	r6, s13
90020466:	ee20 7aa7 	vmul.f32	s14, s1, s15
9002046a:	ee61 7a27 	vmul.f32	s15, s2, s15
9002046e:	ee77 2a62 	vsub.f32	s5, s14, s5
90020472:	ee37 3ac3 	vsub.f32	s6, s15, s6
90020476:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
9002047a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
9002047e:	ee12 2a90 	vmov	r2, s5
90020482:	eef0 2a47 	vmov.f32	s5, s14
90020486:	fb92 f3f3 	sdiv	r3, r2, r3
9002048a:	ee13 2a10 	vmov	r2, s6
9002048e:	931f      	str	r3, [sp, #124]	; 0x7c
90020490:	9b1c      	ldr	r3, [sp, #112]	; 0x70
90020492:	eeb0 3a67 	vmov.f32	s6, s15
90020496:	fb92 f3f3 	sdiv	r3, r2, r3
9002049a:	9320      	str	r3, [sp, #128]	; 0x80
9002049c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
9002049e:	9a10      	ldr	r2, [sp, #64]	; 0x40
900204a0:	3b01      	subs	r3, #1
900204a2:	930a      	str	r3, [sp, #40]	; 0x28
900204a4:	bf08      	it	eq
900204a6:	4615      	moveq	r5, r2
900204a8:	9b1c      	ldr	r3, [sp, #112]	; 0x70
900204aa:	bf18      	it	ne
900204ac:	461d      	movne	r5, r3
900204ae:	e6af      	b.n	90020210 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
900204b0:	f111 0a01 	adds.w	sl, r1, #1
900204b4:	d486      	bmi.n	900203c4 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
900204b6:	45d6      	cmp	lr, sl
900204b8:	db84      	blt.n	900203c4 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
900204ba:	f110 0a01 	adds.w	sl, r0, #1
900204be:	d481      	bmi.n	900203c4 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
900204c0:	4553      	cmp	r3, sl
900204c2:	f6ff af7f 	blt.w	900203c4 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
900204c6:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
900204c8:	b21b      	sxth	r3, r3
900204ca:	9101      	str	r1, [sp, #4]
900204cc:	4641      	mov	r1, r8
900204ce:	9300      	str	r3, [sp, #0]
900204d0:	fa0f f38e 	sxth.w	r3, lr
900204d4:	e9cd 0202 	strd	r0, r2, [sp, #8]
900204d8:	e9cd c704 	strd	ip, r7, [sp, #16]
900204dc:	9a09      	ldr	r2, [sp, #36]	; 0x24
900204de:	9811      	ldr	r0, [sp, #68]	; 0x44
900204e0:	f7ff fdb2 	bl	90020048 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh>
900204e4:	e76e      	b.n	900203c4 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
900204e6:	9b24      	ldr	r3, [sp, #144]	; 0x90
900204e8:	1430      	asrs	r0, r6, #16
900204ea:	9f09      	ldr	r7, [sp, #36]	; 0x24
900204ec:	f3c6 3e03 	ubfx	lr, r6, #12, #4
900204f0:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
900204f4:	1423      	asrs	r3, r4, #16
900204f6:	f3c4 3203 	ubfx	r2, r4, #12, #4
900204fa:	fb01 3000 	mla	r0, r1, r0, r3
900204fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
90020500:	eb03 0340 	add.w	r3, r3, r0, lsl #1
90020504:	f837 c010 	ldrh.w	ip, [r7, r0, lsl #1]
90020508:	8858      	ldrh	r0, [r3, #2]
9002050a:	f1be 0f00 	cmp.w	lr, #0
9002050e:	d00b      	beq.n	90020528 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x352>
90020510:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
90020514:	3901      	subs	r1, #1
90020516:	0049      	lsls	r1, r1, #1
90020518:	3102      	adds	r1, #2
9002051a:	eb03 0b01 	add.w	fp, r3, r1
9002051e:	5a5b      	ldrh	r3, [r3, r1]
90020520:	930e      	str	r3, [sp, #56]	; 0x38
90020522:	f8bb 3002 	ldrh.w	r3, [fp, #2]
90020526:	930f      	str	r3, [sp, #60]	; 0x3c
90020528:	ea4f 410c 	mov.w	r1, ip, lsl #16
9002052c:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
90020530:	fb12 f30e 	smulbb	r3, r2, lr
90020534:	ea4f 4b00 	mov.w	fp, r0, lsl #16
90020538:	f001 61fc 	and.w	r1, r1, #132120576	; 0x7e00000
9002053c:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
90020540:	10db      	asrs	r3, r3, #3
90020542:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
90020546:	ea41 010c 	orr.w	r1, r1, ip
9002054a:	f1ce 0c10 	rsb	ip, lr, #16
9002054e:	ea4b 0000 	orr.w	r0, fp, r0
90020552:	9f08      	ldr	r7, [sp, #32]
90020554:	ebac 0c02 	sub.w	ip, ip, r2
90020558:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
9002055c:	f108 38ff 	add.w	r8, r8, #4294967295
90020560:	4350      	muls	r0, r2
90020562:	eb03 0c4c 	add.w	ip, r3, ip, lsl #1
90020566:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
90020568:	fb0c 0c01 	mla	ip, ip, r1, r0
9002056c:	980e      	ldr	r0, [sp, #56]	; 0x38
9002056e:	ea4f 4b02 	mov.w	fp, r2, lsl #16
90020572:	f422 61fc 	bic.w	r1, r2, #2016	; 0x7e0
90020576:	9a0e      	ldr	r2, [sp, #56]	; 0x38
90020578:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
9002057c:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
90020580:	0412      	lsls	r2, r2, #16
90020582:	ea4b 0101 	orr.w	r1, fp, r1
90020586:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
9002058a:	fb03 c101 	mla	r1, r3, r1, ip
9002058e:	ebc3 034e 	rsb	r3, r3, lr, lsl #1
90020592:	4302      	orrs	r2, r0
90020594:	fb03 1202 	mla	r2, r3, r2, r1
90020598:	ea4f 5b52 	mov.w	fp, r2, lsr #21
9002059c:	0952      	lsrs	r2, r2, #5
9002059e:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
900205a2:	f422 63fc 	bic.w	r3, r2, #2016	; 0x7e0
900205a6:	f8b9 2000 	ldrh.w	r2, [r9]
900205aa:	ea4b 0303 	orr.w	r3, fp, r3
900205ae:	1211      	asrs	r1, r2, #8
900205b0:	ea4f 0ce2 	mov.w	ip, r2, asr #3
900205b4:	b29b      	uxth	r3, r3
900205b6:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
900205ba:	00d2      	lsls	r2, r2, #3
900205bc:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
900205c0:	fb11 f107 	smulbb	r1, r1, r7
900205c4:	1218      	asrs	r0, r3, #8
900205c6:	fb1c fc07 	smulbb	ip, ip, r7
900205ca:	b2d2      	uxtb	r2, r2
900205cc:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
900205d0:	fb12 f207 	smulbb	r2, r2, r7
900205d4:	fb00 100a 	mla	r0, r0, sl, r1
900205d8:	10d9      	asrs	r1, r3, #3
900205da:	00db      	lsls	r3, r3, #3
900205dc:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
900205e0:	b280      	uxth	r0, r0
900205e2:	b2db      	uxtb	r3, r3
900205e4:	fb01 c10a 	mla	r1, r1, sl, ip
900205e8:	fb03 230a 	mla	r3, r3, sl, r2
900205ec:	1c42      	adds	r2, r0, #1
900205ee:	b289      	uxth	r1, r1
900205f0:	b29b      	uxth	r3, r3
900205f2:	eb02 2010 	add.w	r0, r2, r0, lsr #8
900205f6:	f101 0c01 	add.w	ip, r1, #1
900205fa:	1c5a      	adds	r2, r3, #1
900205fc:	eb0c 2c11 	add.w	ip, ip, r1, lsr #8
90020600:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
90020604:	eb02 2213 	add.w	r2, r2, r3, lsr #8
90020608:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
9002060a:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
9002060e:	f3c2 22c4 	ubfx	r2, r2, #11, #5
90020612:	441c      	add	r4, r3
90020614:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
90020618:	9b20      	ldr	r3, [sp, #128]	; 0x80
9002061a:	4310      	orrs	r0, r2
9002061c:	441e      	add	r6, r3
9002061e:	ea40 000c 	orr.w	r0, r0, ip
90020622:	f829 0b02 	strh.w	r0, [r9], #2
90020626:	e6fa      	b.n	9002041e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
90020628:	b013      	add	sp, #76	; 0x4c
9002062a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

9002062e <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh>:
9002062e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
90020632:	e9dd 4e08 	ldrd	r4, lr, [sp, #32]
90020636:	f9bd 901c 	ldrsh.w	r9, [sp, #28]
9002063a:	fb0e 4703 	mla	r7, lr, r3, r4
9002063e:	f1be 0f00 	cmp.w	lr, #0
90020642:	f89d 5028 	ldrb.w	r5, [sp, #40]	; 0x28
90020646:	f89d 602c 	ldrb.w	r6, [sp, #44]	; 0x2c
9002064a:	eb02 0847 	add.w	r8, r2, r7, lsl #1
9002064e:	8808      	ldrh	r0, [r1, #0]
90020650:	db60      	blt.n	90020714 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xe6>
90020652:	45f1      	cmp	r9, lr
90020654:	dd5e      	ble.n	90020714 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xe6>
90020656:	2c00      	cmp	r4, #0
90020658:	db5a      	blt.n	90020710 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xe2>
9002065a:	42a3      	cmp	r3, r4
9002065c:	dd58      	ble.n	90020710 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xe2>
9002065e:	f832 c017 	ldrh.w	ip, [r2, r7, lsl #1]
90020662:	1c62      	adds	r2, r4, #1
90020664:	d459      	bmi.n	9002071a <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xec>
90020666:	4293      	cmp	r3, r2
90020668:	dd57      	ble.n	9002071a <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xec>
9002066a:	2d00      	cmp	r5, #0
9002066c:	d055      	beq.n	9002071a <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xec>
9002066e:	f8b8 7002 	ldrh.w	r7, [r8, #2]
90020672:	f11e 0e01 	adds.w	lr, lr, #1
90020676:	d454      	bmi.n	90020722 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf4>
90020678:	45f1      	cmp	r9, lr
9002067a:	dd52      	ble.n	90020722 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf4>
9002067c:	2e00      	cmp	r6, #0
9002067e:	d050      	beq.n	90020722 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf4>
90020680:	2c00      	cmp	r4, #0
90020682:	db4c      	blt.n	9002071e <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf0>
90020684:	42a3      	cmp	r3, r4
90020686:	dd4a      	ble.n	9002071e <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf0>
90020688:	f838 2013 	ldrh.w	r2, [r8, r3, lsl #1]
9002068c:	3401      	adds	r4, #1
9002068e:	d405      	bmi.n	9002069c <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>
90020690:	42a3      	cmp	r3, r4
90020692:	dd03      	ble.n	9002069c <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>
90020694:	b115      	cbz	r5, 9002069c <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>
90020696:	3301      	adds	r3, #1
90020698:	f838 0013 	ldrh.w	r0, [r8, r3, lsl #1]
9002069c:	fb15 f406 	smulbb	r4, r5, r6
900206a0:	ea4f 430c 	mov.w	r3, ip, lsl #16
900206a4:	ea4f 4e07 	mov.w	lr, r7, lsl #16
900206a8:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
900206ac:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
900206b0:	f3c4 04c7 	ubfx	r4, r4, #3, #8
900206b4:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
900206b8:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
900206bc:	ea43 0c0c 	orr.w	ip, r3, ip
900206c0:	f1c6 0310 	rsb	r3, r6, #16
900206c4:	ea4e 0707 	orr.w	r7, lr, r7
900206c8:	ebc4 0646 	rsb	r6, r4, r6, lsl #1
900206cc:	1b5b      	subs	r3, r3, r5
900206ce:	ebc4 0545 	rsb	r5, r4, r5, lsl #1
900206d2:	eb04 0343 	add.w	r3, r4, r3, lsl #1
900206d6:	437d      	muls	r5, r7
900206d8:	fb03 5c0c 	mla	ip, r3, ip, r5
900206dc:	0403      	lsls	r3, r0, #16
900206de:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
900206e2:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
900206e6:	4318      	orrs	r0, r3
900206e8:	0413      	lsls	r3, r2, #16
900206ea:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
900206ee:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
900206f2:	fb04 c000 	mla	r0, r4, r0, ip
900206f6:	4313      	orrs	r3, r2
900206f8:	fb06 0003 	mla	r0, r6, r3, r0
900206fc:	0d43      	lsrs	r3, r0, #21
900206fe:	0940      	lsrs	r0, r0, #5
90020700:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
90020704:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
90020708:	4318      	orrs	r0, r3
9002070a:	8008      	strh	r0, [r1, #0]
9002070c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
90020710:	4684      	mov	ip, r0
90020712:	e7a6      	b.n	90020662 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x34>
90020714:	4607      	mov	r7, r0
90020716:	4684      	mov	ip, r0
90020718:	e7ab      	b.n	90020672 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x44>
9002071a:	4607      	mov	r7, r0
9002071c:	e7a9      	b.n	90020672 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x44>
9002071e:	4602      	mov	r2, r0
90020720:	e7b4      	b.n	9002068c <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x5e>
90020722:	4602      	mov	r2, r0
90020724:	e7ba      	b.n	9002069c <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>

90020726 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
90020726:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9002072a:	b08f      	sub	sp, #60	; 0x3c
9002072c:	461d      	mov	r5, r3
9002072e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
90020730:	9107      	str	r1, [sp, #28]
90020732:	920c      	str	r2, [sp, #48]	; 0x30
90020734:	6859      	ldr	r1, [r3, #4]
90020736:	681b      	ldr	r3, [r3, #0]
90020738:	900d      	str	r0, [sp, #52]	; 0x34
9002073a:	e9dd 271e 	ldrd	r2, r7, [sp, #120]	; 0x78
9002073e:	e9dd 4619 	ldrd	r4, r6, [sp, #100]	; 0x64
90020742:	fb01 2707 	mla	r7, r1, r7, r2
90020746:	eb03 0747 	add.w	r7, r3, r7, lsl #1
9002074a:	9b20      	ldr	r3, [sp, #128]	; 0x80
9002074c:	f8d3 8000 	ldr.w	r8, [r3]
90020750:	9b07      	ldr	r3, [sp, #28]
90020752:	2b00      	cmp	r3, #0
90020754:	dc03      	bgt.n	9002075e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
90020756:	9b0c      	ldr	r3, [sp, #48]	; 0x30
90020758:	2b00      	cmp	r3, #0
9002075a:	f340 8182 	ble.w	90020a62 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33c>
9002075e:	9b20      	ldr	r3, [sp, #128]	; 0x80
90020760:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
90020764:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
90020768:	1e48      	subs	r0, r1, #1
9002076a:	f102 3cff 	add.w	ip, r2, #4294967295
9002076e:	2d00      	cmp	r5, #0
90020770:	f340 809b 	ble.w	900208aa <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x184>
90020774:	ea5f 4e24 	movs.w	lr, r4, asr #16
90020778:	ea4f 4326 	mov.w	r3, r6, asr #16
9002077c:	d406      	bmi.n	9002078c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
9002077e:	4586      	cmp	lr, r0
90020780:	da04      	bge.n	9002078c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
90020782:	2b00      	cmp	r3, #0
90020784:	db02      	blt.n	9002078c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
90020786:	4563      	cmp	r3, ip
90020788:	f2c0 8090 	blt.w	900208ac <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
9002078c:	f11e 0e01 	adds.w	lr, lr, #1
90020790:	f100 8084 	bmi.w	9002089c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
90020794:	4571      	cmp	r1, lr
90020796:	f2c0 8081 	blt.w	9002089c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
9002079a:	3301      	adds	r3, #1
9002079c:	d47e      	bmi.n	9002089c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
9002079e:	429a      	cmp	r2, r3
900207a0:	db7c      	blt.n	9002089c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
900207a2:	46aa      	mov	sl, r5
900207a4:	46b9      	mov	r9, r7
900207a6:	f1ba 0f00 	cmp.w	sl, #0
900207aa:	f340 8099 	ble.w	900208e0 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
900207ae:	9b20      	ldr	r3, [sp, #128]	; 0x80
900207b0:	1421      	asrs	r1, r4, #16
900207b2:	ea4f 4026 	mov.w	r0, r6, asr #16
900207b6:	f3c4 3203 	ubfx	r2, r4, #12, #4
900207ba:	f3c6 3c03 	ubfx	ip, r6, #12, #4
900207be:	e9d3 e302 	ldrd	lr, r3, [r3, #8]
900207c2:	f100 80d1 	bmi.w	90020968 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
900207c6:	f10e 3bff 	add.w	fp, lr, #4294967295
900207ca:	4559      	cmp	r1, fp
900207cc:	f280 80cc 	bge.w	90020968 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
900207d0:	2800      	cmp	r0, #0
900207d2:	f2c0 80c9 	blt.w	90020968 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
900207d6:	f103 3bff 	add.w	fp, r3, #4294967295
900207da:	4558      	cmp	r0, fp
900207dc:	f280 80c4 	bge.w	90020968 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
900207e0:	fa0f fe8e 	sxth.w	lr, lr
900207e4:	fb00 110e 	mla	r1, r0, lr, r1
900207e8:	eb08 0041 	add.w	r0, r8, r1, lsl #1
900207ec:	f838 b011 	ldrh.w	fp, [r8, r1, lsl #1]
900207f0:	8841      	ldrh	r1, [r0, #2]
900207f2:	f1bc 0f00 	cmp.w	ip, #0
900207f6:	d00b      	beq.n	90020810 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xea>
900207f8:	f10e 4300 	add.w	r3, lr, #2147483648	; 0x80000000
900207fc:	3b01      	subs	r3, #1
900207fe:	005b      	lsls	r3, r3, #1
90020800:	3302      	adds	r3, #2
90020802:	eb00 0e03 	add.w	lr, r0, r3
90020806:	5ac3      	ldrh	r3, [r0, r3]
90020808:	9308      	str	r3, [sp, #32]
9002080a:	f8be 3002 	ldrh.w	r3, [lr, #2]
9002080e:	9309      	str	r3, [sp, #36]	; 0x24
90020810:	ea4f 400b 	mov.w	r0, fp, lsl #16
90020814:	f42b 6bfc 	bic.w	fp, fp, #2016	; 0x7e0
90020818:	fb12 f30c 	smulbb	r3, r2, ip
9002081c:	f1cc 0e10 	rsb	lr, ip, #16
90020820:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
90020824:	10db      	asrs	r3, r3, #3
90020826:	ebae 0e02 	sub.w	lr, lr, r2
9002082a:	ea40 000b 	orr.w	r0, r0, fp
9002082e:	ea4f 4b01 	mov.w	fp, r1, lsl #16
90020832:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
90020836:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
9002083a:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
9002083e:	eb03 0e4e 	add.w	lr, r3, lr, lsl #1
90020842:	ea4b 0101 	orr.w	r1, fp, r1
90020846:	4351      	muls	r1, r2
90020848:	9a09      	ldr	r2, [sp, #36]	; 0x24
9002084a:	fb0e 1e00 	mla	lr, lr, r0, r1
9002084e:	0410      	lsls	r0, r2, #16
90020850:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
90020854:	9908      	ldr	r1, [sp, #32]
90020856:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
9002085a:	4310      	orrs	r0, r2
9002085c:	9a08      	ldr	r2, [sp, #32]
9002085e:	0412      	lsls	r2, r2, #16
90020860:	fb03 e000 	mla	r0, r3, r0, lr
90020864:	f421 6efc 	bic.w	lr, r1, #2016	; 0x7e0
90020868:	ebc3 034c 	rsb	r3, r3, ip, lsl #1
9002086c:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
90020870:	ea42 020e 	orr.w	r2, r2, lr
90020874:	fb03 0302 	mla	r3, r3, r2, r0
90020878:	0d5a      	lsrs	r2, r3, #21
9002087a:	095b      	lsrs	r3, r3, #5
9002087c:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
90020880:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
90020884:	4313      	orrs	r3, r2
90020886:	f8a9 3000 	strh.w	r3, [r9]
9002088a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
9002088c:	f109 0902 	add.w	r9, r9, #2
90020890:	f10a 3aff 	add.w	sl, sl, #4294967295
90020894:	441c      	add	r4, r3
90020896:	9b1c      	ldr	r3, [sp, #112]	; 0x70
90020898:	441e      	add	r6, r3
9002089a:	e784      	b.n	900207a6 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
9002089c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
9002089e:	3d01      	subs	r5, #1
900208a0:	3702      	adds	r7, #2
900208a2:	441c      	add	r4, r3
900208a4:	9b1c      	ldr	r3, [sp, #112]	; 0x70
900208a6:	441e      	add	r6, r3
900208a8:	e761      	b.n	9002076e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
900208aa:	d01d      	beq.n	900208e8 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
900208ac:	1e6b      	subs	r3, r5, #1
900208ae:	981b      	ldr	r0, [sp, #108]	; 0x6c
900208b0:	fb00 4003 	mla	r0, r0, r3, r4
900208b4:	1400      	asrs	r0, r0, #16
900208b6:	f53f af74 	bmi.w	900207a2 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
900208ba:	3901      	subs	r1, #1
900208bc:	4288      	cmp	r0, r1
900208be:	f6bf af70 	bge.w	900207a2 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
900208c2:	991c      	ldr	r1, [sp, #112]	; 0x70
900208c4:	fb01 6303 	mla	r3, r1, r3, r6
900208c8:	141b      	asrs	r3, r3, #16
900208ca:	f53f af6a 	bmi.w	900207a2 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
900208ce:	3a01      	subs	r2, #1
900208d0:	4293      	cmp	r3, r2
900208d2:	f6bf af66 	bge.w	900207a2 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
900208d6:	46a9      	mov	r9, r5
900208d8:	46ba      	mov	sl, r7
900208da:	f1b9 0f00 	cmp.w	r9, #0
900208de:	dc5b      	bgt.n	90020998 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x272>
900208e0:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
900208e4:	eb07 0745 	add.w	r7, r7, r5, lsl #1
900208e8:	9b07      	ldr	r3, [sp, #28]
900208ea:	2b00      	cmp	r3, #0
900208ec:	f340 80b9 	ble.w	90020a62 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33c>
900208f0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
900208f4:	9b18      	ldr	r3, [sp, #96]	; 0x60
900208f6:	ee30 0a04 	vadd.f32	s0, s0, s8
900208fa:	ee70 0aa4 	vadd.f32	s1, s1, s9
900208fe:	eef0 6a62 	vmov.f32	s13, s5
90020902:	eec7 7a00 	vdiv.f32	s15, s14, s0
90020906:	ee31 1a05 	vadd.f32	s2, s2, s10
9002090a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
9002090e:	ee16 4a90 	vmov	r4, s13
90020912:	eef0 6a43 	vmov.f32	s13, s6
90020916:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
9002091a:	ee16 6a90 	vmov	r6, s13
9002091e:	ee20 7aa7 	vmul.f32	s14, s1, s15
90020922:	ee61 7a27 	vmul.f32	s15, s2, s15
90020926:	ee77 2a62 	vsub.f32	s5, s14, s5
9002092a:	ee37 3ac3 	vsub.f32	s6, s15, s6
9002092e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
90020932:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
90020936:	ee12 2a90 	vmov	r2, s5
9002093a:	eef0 2a47 	vmov.f32	s5, s14
9002093e:	fb92 f3f3 	sdiv	r3, r2, r3
90020942:	ee13 2a10 	vmov	r2, s6
90020946:	931b      	str	r3, [sp, #108]	; 0x6c
90020948:	9b18      	ldr	r3, [sp, #96]	; 0x60
9002094a:	eeb0 3a67 	vmov.f32	s6, s15
9002094e:	fb92 f3f3 	sdiv	r3, r2, r3
90020952:	931c      	str	r3, [sp, #112]	; 0x70
90020954:	9b07      	ldr	r3, [sp, #28]
90020956:	9a0c      	ldr	r2, [sp, #48]	; 0x30
90020958:	3b01      	subs	r3, #1
9002095a:	9307      	str	r3, [sp, #28]
9002095c:	bf08      	it	eq
9002095e:	4615      	moveq	r5, r2
90020960:	9b18      	ldr	r3, [sp, #96]	; 0x60
90020962:	bf18      	it	ne
90020964:	461d      	movne	r5, r3
90020966:	e6f3      	b.n	90020750 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a>
90020968:	f111 0b01 	adds.w	fp, r1, #1
9002096c:	d48d      	bmi.n	9002088a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
9002096e:	45de      	cmp	lr, fp
90020970:	db8b      	blt.n	9002088a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
90020972:	f110 0b01 	adds.w	fp, r0, #1
90020976:	d488      	bmi.n	9002088a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
90020978:	455b      	cmp	r3, fp
9002097a:	db86      	blt.n	9002088a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
9002097c:	b21b      	sxth	r3, r3
9002097e:	e9cd 1001 	strd	r1, r0, [sp, #4]
90020982:	e9cd 2c03 	strd	r2, ip, [sp, #12]
90020986:	9300      	str	r3, [sp, #0]
90020988:	4642      	mov	r2, r8
9002098a:	fa0f f38e 	sxth.w	r3, lr
9002098e:	4649      	mov	r1, r9
90020990:	980d      	ldr	r0, [sp, #52]	; 0x34
90020992:	f7ff fe4c 	bl	9002062e <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh>
90020996:	e778      	b.n	9002088a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
90020998:	9b20      	ldr	r3, [sp, #128]	; 0x80
9002099a:	1420      	asrs	r0, r4, #16
9002099c:	1431      	asrs	r1, r6, #16
9002099e:	f3c6 3e03 	ubfx	lr, r6, #12, #4
900209a2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
900209a6:	f3c4 3203 	ubfx	r2, r4, #12, #4
900209aa:	fb03 0101 	mla	r1, r3, r1, r0
900209ae:	eb08 0041 	add.w	r0, r8, r1, lsl #1
900209b2:	f838 c011 	ldrh.w	ip, [r8, r1, lsl #1]
900209b6:	8841      	ldrh	r1, [r0, #2]
900209b8:	f1be 0f00 	cmp.w	lr, #0
900209bc:	d00b      	beq.n	900209d6 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
900209be:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
900209c2:	3b01      	subs	r3, #1
900209c4:	005b      	lsls	r3, r3, #1
900209c6:	3302      	adds	r3, #2
900209c8:	eb00 0b03 	add.w	fp, r0, r3
900209cc:	5ac3      	ldrh	r3, [r0, r3]
900209ce:	930a      	str	r3, [sp, #40]	; 0x28
900209d0:	f8bb 3002 	ldrh.w	r3, [fp, #2]
900209d4:	930b      	str	r3, [sp, #44]	; 0x2c
900209d6:	ea4f 400c 	mov.w	r0, ip, lsl #16
900209da:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
900209de:	fb12 f30e 	smulbb	r3, r2, lr
900209e2:	ea4f 4b01 	mov.w	fp, r1, lsl #16
900209e6:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
900209ea:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
900209ee:	10db      	asrs	r3, r3, #3
900209f0:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
900209f4:	ea40 000c 	orr.w	r0, r0, ip
900209f8:	f1ce 0c10 	rsb	ip, lr, #16
900209fc:	ea4b 0101 	orr.w	r1, fp, r1
90020a00:	f109 39ff 	add.w	r9, r9, #4294967295
90020a04:	ebac 0c02 	sub.w	ip, ip, r2
90020a08:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
90020a0c:	eb03 0c4c 	add.w	ip, r3, ip, lsl #1
90020a10:	4351      	muls	r1, r2
90020a12:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
90020a14:	fb0c 1c00 	mla	ip, ip, r0, r1
90020a18:	990a      	ldr	r1, [sp, #40]	; 0x28
90020a1a:	ea4f 4b02 	mov.w	fp, r2, lsl #16
90020a1e:	f422 60fc 	bic.w	r0, r2, #2016	; 0x7e0
90020a22:	9a0a      	ldr	r2, [sp, #40]	; 0x28
90020a24:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
90020a28:	0412      	lsls	r2, r2, #16
90020a2a:	ea4b 0000 	orr.w	r0, fp, r0
90020a2e:	f421 6bfc 	bic.w	fp, r1, #2016	; 0x7e0
90020a32:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
90020a36:	fb03 c000 	mla	r0, r3, r0, ip
90020a3a:	ebc3 034e 	rsb	r3, r3, lr, lsl #1
90020a3e:	ea42 0b0b 	orr.w	fp, r2, fp
90020a42:	fb03 000b 	mla	r0, r3, fp, r0
90020a46:	0d43      	lsrs	r3, r0, #21
90020a48:	0940      	lsrs	r0, r0, #5
90020a4a:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
90020a4e:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
90020a52:	4318      	orrs	r0, r3
90020a54:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
90020a56:	441c      	add	r4, r3
90020a58:	9b1c      	ldr	r3, [sp, #112]	; 0x70
90020a5a:	f82a 0b02 	strh.w	r0, [sl], #2
90020a5e:	441e      	add	r6, r3
90020a60:	e73b      	b.n	900208da <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
90020a62:	b00f      	add	sp, #60	; 0x3c
90020a64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

90020a68 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh>:
90020a68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90020a6c:	b085      	sub	sp, #20
90020a6e:	e9dd 740f 	ldrd	r7, r4, [sp, #60]	; 0x3c
90020a72:	9102      	str	r1, [sp, #8]
90020a74:	2c00      	cmp	r4, #0
90020a76:	fb04 7103 	mla	r1, r4, r3, r7
90020a7a:	f9bd e038 	ldrsh.w	lr, [sp, #56]	; 0x38
90020a7e:	f89d 6044 	ldrb.w	r6, [sp, #68]	; 0x44
90020a82:	eb02 0c81 	add.w	ip, r2, r1, lsl #2
90020a86:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
90020a8a:	f2c0 811b 	blt.w	90020cc4 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x25c>
90020a8e:	45a6      	cmp	lr, r4
90020a90:	f340 8118 	ble.w	90020cc4 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x25c>
90020a94:	2f00      	cmp	r7, #0
90020a96:	f2c0 8113 	blt.w	90020cc0 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x258>
90020a9a:	42bb      	cmp	r3, r7
90020a9c:	f340 8110 	ble.w	90020cc0 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x258>
90020aa0:	f852 5021 	ldr.w	r5, [r2, r1, lsl #2]
90020aa4:	1c7a      	adds	r2, r7, #1
90020aa6:	f100 8110 	bmi.w	90020cca <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x262>
90020aaa:	4293      	cmp	r3, r2
90020aac:	f340 810d 	ble.w	90020cca <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x262>
90020ab0:	2e00      	cmp	r6, #0
90020ab2:	f000 810c 	beq.w	90020cce <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x266>
90020ab6:	f8dc 1004 	ldr.w	r1, [ip, #4]
90020aba:	3401      	adds	r4, #1
90020abc:	f100 810b 	bmi.w	90020cd6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x26e>
90020ac0:	45a6      	cmp	lr, r4
90020ac2:	f340 8108 	ble.w	90020cd6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x26e>
90020ac6:	2800      	cmp	r0, #0
90020ac8:	f000 8108 	beq.w	90020cdc <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x274>
90020acc:	2f00      	cmp	r7, #0
90020ace:	f2c0 8100 	blt.w	90020cd2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x26a>
90020ad2:	42bb      	cmp	r3, r7
90020ad4:	f340 80fd 	ble.w	90020cd2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x26a>
90020ad8:	f85c 4023 	ldr.w	r4, [ip, r3, lsl #2]
90020adc:	3701      	adds	r7, #1
90020ade:	f100 8100 	bmi.w	90020ce2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x27a>
90020ae2:	42bb      	cmp	r3, r7
90020ae4:	f340 80fd 	ble.w	90020ce2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x27a>
90020ae8:	2e00      	cmp	r6, #0
90020aea:	f000 80fc 	beq.w	90020ce6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x27e>
90020aee:	3301      	adds	r3, #1
90020af0:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
90020af4:	b2b6      	uxth	r6, r6
90020af6:	b280      	uxth	r0, r0
90020af8:	ea4f 6a11 	mov.w	sl, r1, lsr #24
90020afc:	fb00 fe06 	mul.w	lr, r0, r6
90020b00:	0136      	lsls	r6, r6, #4
90020b02:	ea4f 6b15 	mov.w	fp, r5, lsr #24
90020b06:	ebce 1000 	rsb	r0, lr, r0, lsl #4
90020b0a:	eba6 070e 	sub.w	r7, r6, lr
90020b0e:	f5c6 7380 	rsb	r3, r6, #256	; 0x100
90020b12:	ea4f 6914 	mov.w	r9, r4, lsr #24
90020b16:	b280      	uxth	r0, r0
90020b18:	b2bf      	uxth	r7, r7
90020b1a:	1a1b      	subs	r3, r3, r0
90020b1c:	ea4f 6812 	mov.w	r8, r2, lsr #24
90020b20:	fb0a f607 	mul.w	r6, sl, r7
90020b24:	b29b      	uxth	r3, r3
90020b26:	fb0b 6603 	mla	r6, fp, r3, r6
90020b2a:	fb00 6609 	mla	r6, r0, r9, r6
90020b2e:	fb0e 6608 	mla	r6, lr, r8, r6
90020b32:	f3c6 2607 	ubfx	r6, r6, #8, #8
90020b36:	9600      	str	r6, [sp, #0]
90020b38:	2e00      	cmp	r6, #0
90020b3a:	f000 80be 	beq.w	90020cba <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x252>
90020b3e:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
90020b42:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
90020b46:	9e02      	ldr	r6, [sp, #8]
90020b48:	fb0b fc0c 	mul.w	ip, fp, ip
90020b4c:	fb0b f505 	mul.w	r5, fp, r5
90020b50:	8836      	ldrh	r6, [r6, #0]
90020b52:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
90020b56:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
90020b5a:	9501      	str	r5, [sp, #4]
90020b5c:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
90020b60:	44dc      	add	ip, fp
90020b62:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
90020b66:	f00c 15ff 	and.w	r5, ip, #16711935	; 0xff00ff
90020b6a:	9503      	str	r5, [sp, #12]
90020b6c:	9d01      	ldr	r5, [sp, #4]
90020b6e:	f505 7c80 	add.w	ip, r5, #256	; 0x100
90020b72:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
90020b76:	f001 1cff 	and.w	ip, r1, #16711935	; 0xff00ff
90020b7a:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
90020b7e:	fb0a fc0c 	mul.w	ip, sl, ip
90020b82:	ea4f 2b15 	mov.w	fp, r5, lsr #8
90020b86:	fb0a fa01 	mul.w	sl, sl, r1
90020b8a:	ea4f 251c 	mov.w	r5, ip, lsr #8
90020b8e:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
90020b92:	f50a 7180 	add.w	r1, sl, #256	; 0x100
90020b96:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
90020b9a:	eb01 2a1a 	add.w	sl, r1, sl, lsr #8
90020b9e:	4465      	add	r5, ip
90020ba0:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
90020ba4:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
90020ba8:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
90020bac:	fb09 fc0c 	mul.w	ip, r9, ip
90020bb0:	0a2d      	lsrs	r5, r5, #8
90020bb2:	fb09 f904 	mul.w	r9, r9, r4
90020bb6:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
90020bba:	ea4f 211c 	mov.w	r1, ip, lsr #8
90020bbe:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
90020bc2:	f509 7480 	add.w	r4, r9, #256	; 0x100
90020bc6:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
90020bca:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
90020bce:	437d      	muls	r5, r7
90020bd0:	eb04 2919 	add.w	r9, r4, r9, lsr #8
90020bd4:	f002 14ff 	and.w	r4, r2, #16711935	; 0xff00ff
90020bd8:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
90020bdc:	4461      	add	r1, ip
90020bde:	fb08 f404 	mul.w	r4, r8, r4
90020be2:	ea4f 2919 	mov.w	r9, r9, lsr #8
90020be6:	fb08 f802 	mul.w	r8, r8, r2
90020bea:	0a09      	lsrs	r1, r1, #8
90020bec:	0a22      	lsrs	r2, r4, #8
90020bee:	f104 1401 	add.w	r4, r4, #65537	; 0x10001
90020bf2:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
90020bf6:	fb07 f70a 	mul.w	r7, r7, sl
90020bfa:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
90020bfe:	4414      	add	r4, r2
90020c00:	f508 7280 	add.w	r2, r8, #256	; 0x100
90020c04:	0a24      	lsrs	r4, r4, #8
90020c06:	eb02 2818 	add.w	r8, r2, r8, lsr #8
90020c0a:	9a03      	ldr	r2, [sp, #12]
90020c0c:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
90020c10:	fb02 5503 	mla	r5, r2, r3, r5
90020c14:	ea4f 2818 	mov.w	r8, r8, lsr #8
90020c18:	9a00      	ldr	r2, [sp, #0]
90020c1a:	fb04 540e 	mla	r4, r4, lr, r5
90020c1e:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
90020c22:	1235      	asrs	r5, r6, #8
90020c24:	fb01 4100 	mla	r1, r1, r0, r4
90020c28:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
90020c2c:	0a09      	lsrs	r1, r1, #8
90020c2e:	f001 14ff 	and.w	r4, r1, #16711935	; 0xff00ff
90020c32:	f40b 417f 	and.w	r1, fp, #65280	; 0xff00
90020c36:	fb03 7101 	mla	r1, r3, r1, r7
90020c3a:	fb0e 1e08 	mla	lr, lr, r8, r1
90020c3e:	f409 417f 	and.w	r1, r9, #65280	; 0xff00
90020c42:	fb00 e101 	mla	r1, r0, r1, lr
90020c46:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
90020c4a:	b287      	uxth	r7, r0
90020c4c:	0a09      	lsrs	r1, r1, #8
90020c4e:	437a      	muls	r2, r7
90020c50:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
90020c54:	1c53      	adds	r3, r2, #1
90020c56:	4321      	orrs	r1, r4
90020c58:	eb03 2312 	add.w	r3, r3, r2, lsr #8
90020c5c:	0c0a      	lsrs	r2, r1, #16
90020c5e:	f3c1 2407 	ubfx	r4, r1, #8, #8
90020c62:	ea6f 2313 	mvn.w	r3, r3, lsr #8
90020c66:	b2c8      	uxtb	r0, r1
90020c68:	fb12 f207 	smulbb	r2, r2, r7
90020c6c:	fb14 f407 	smulbb	r4, r4, r7
90020c70:	b2db      	uxtb	r3, r3
90020c72:	fb10 f007 	smulbb	r0, r0, r7
90020c76:	fb05 2503 	mla	r5, r5, r3, r2
90020c7a:	10f2      	asrs	r2, r6, #3
90020c7c:	00f6      	lsls	r6, r6, #3
90020c7e:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
90020c82:	b2ad      	uxth	r5, r5
90020c84:	b2f6      	uxtb	r6, r6
90020c86:	fb02 4203 	mla	r2, r2, r3, r4
90020c8a:	fb06 0303 	mla	r3, r6, r3, r0
90020c8e:	b294      	uxth	r4, r2
90020c90:	b299      	uxth	r1, r3
90020c92:	1c6b      	adds	r3, r5, #1
90020c94:	1c62      	adds	r2, r4, #1
90020c96:	eb03 2515 	add.w	r5, r3, r5, lsr #8
90020c9a:	1c4b      	adds	r3, r1, #1
90020c9c:	eb02 2214 	add.w	r2, r2, r4, lsr #8
90020ca0:	eb03 2311 	add.w	r3, r3, r1, lsr #8
90020ca4:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
90020ca8:	0952      	lsrs	r2, r2, #5
90020caa:	f3c3 23c4 	ubfx	r3, r3, #11, #5
90020cae:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
90020cb2:	432b      	orrs	r3, r5
90020cb4:	4313      	orrs	r3, r2
90020cb6:	9a02      	ldr	r2, [sp, #8]
90020cb8:	8013      	strh	r3, [r2, #0]
90020cba:	b005      	add	sp, #20
90020cbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90020cc0:	2500      	movs	r5, #0
90020cc2:	e6ef      	b.n	90020aa4 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x3c>
90020cc4:	2100      	movs	r1, #0
90020cc6:	460d      	mov	r5, r1
90020cc8:	e6f7      	b.n	90020aba <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x52>
90020cca:	2100      	movs	r1, #0
90020ccc:	e6f5      	b.n	90020aba <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x52>
90020cce:	4631      	mov	r1, r6
90020cd0:	e6f3      	b.n	90020aba <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x52>
90020cd2:	2400      	movs	r4, #0
90020cd4:	e702      	b.n	90020adc <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x74>
90020cd6:	2200      	movs	r2, #0
90020cd8:	4614      	mov	r4, r2
90020cda:	e70b      	b.n	90020af4 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8c>
90020cdc:	4602      	mov	r2, r0
90020cde:	4604      	mov	r4, r0
90020ce0:	e708      	b.n	90020af4 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8c>
90020ce2:	2200      	movs	r2, #0
90020ce4:	e706      	b.n	90020af4 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8c>
90020ce6:	4632      	mov	r2, r6
90020ce8:	e704      	b.n	90020af4 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8c>

90020cea <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
90020cea:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90020cee:	b09d      	sub	sp, #116	; 0x74
90020cf0:	9219      	str	r2, [sp, #100]	; 0x64
90020cf2:	9307      	str	r3, [sp, #28]
90020cf4:	9a2b      	ldr	r2, [sp, #172]	; 0xac
90020cf6:	f89d 30bc 	ldrb.w	r3, [sp, #188]	; 0xbc
90020cfa:	901b      	str	r0, [sp, #108]	; 0x6c
90020cfc:	931a      	str	r3, [sp, #104]	; 0x68
90020cfe:	6850      	ldr	r0, [r2, #4]
90020d00:	9117      	str	r1, [sp, #92]	; 0x5c
90020d02:	6812      	ldr	r2, [r2, #0]
90020d04:	e9dd 132c 	ldrd	r1, r3, [sp, #176]	; 0xb0
90020d08:	e9dd 4627 	ldrd	r4, r6, [sp, #156]	; 0x9c
90020d0c:	fb00 1303 	mla	r3, r0, r3, r1
90020d10:	eb02 0343 	add.w	r3, r2, r3, lsl #1
90020d14:	930a      	str	r3, [sp, #40]	; 0x28
90020d16:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
90020d18:	681b      	ldr	r3, [r3, #0]
90020d1a:	9310      	str	r3, [sp, #64]	; 0x40
90020d1c:	f8bd 3068 	ldrh.w	r3, [sp, #104]	; 0x68
90020d20:	930b      	str	r3, [sp, #44]	; 0x2c
90020d22:	9b17      	ldr	r3, [sp, #92]	; 0x5c
90020d24:	2b00      	cmp	r3, #0
90020d26:	dc03      	bgt.n	90020d30 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46>
90020d28:	9b19      	ldr	r3, [sp, #100]	; 0x64
90020d2a:	2b00      	cmp	r3, #0
90020d2c:	f340 8375 	ble.w	9002141a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x730>
90020d30:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
90020d32:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
90020d36:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
90020d3a:	1e48      	subs	r0, r1, #1
90020d3c:	1e57      	subs	r7, r2, #1
90020d3e:	9b07      	ldr	r3, [sp, #28]
90020d40:	2b00      	cmp	r3, #0
90020d42:	f340 818e 	ble.w	90021062 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x378>
90020d46:	ea5f 4c24 	movs.w	ip, r4, asr #16
90020d4a:	ea4f 4326 	mov.w	r3, r6, asr #16
90020d4e:	d406      	bmi.n	90020d5e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
90020d50:	4584      	cmp	ip, r0
90020d52:	da04      	bge.n	90020d5e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
90020d54:	2b00      	cmp	r3, #0
90020d56:	db02      	blt.n	90020d5e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
90020d58:	42bb      	cmp	r3, r7
90020d5a:	f2c0 8183 	blt.w	90021064 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37a>
90020d5e:	f11c 0c01 	adds.w	ip, ip, #1
90020d62:	f100 8173 	bmi.w	9002104c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
90020d66:	4561      	cmp	r1, ip
90020d68:	f2c0 8170 	blt.w	9002104c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
90020d6c:	3301      	adds	r3, #1
90020d6e:	f100 816d 	bmi.w	9002104c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
90020d72:	429a      	cmp	r2, r3
90020d74:	f2c0 816a 	blt.w	9002104c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
90020d78:	9b07      	ldr	r3, [sp, #28]
90020d7a:	9f0a      	ldr	r7, [sp, #40]	; 0x28
90020d7c:	9318      	str	r3, [sp, #96]	; 0x60
90020d7e:	9b18      	ldr	r3, [sp, #96]	; 0x60
90020d80:	2b00      	cmp	r3, #0
90020d82:	f340 818c 	ble.w	9002109e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b4>
90020d86:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
90020d88:	ea4f 4c26 	mov.w	ip, r6, asr #16
90020d8c:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
90020d8e:	f3c4 3003 	ubfx	r0, r4, #12, #4
90020d92:	f8d2 e00c 	ldr.w	lr, [r2, #12]
90020d96:	1422      	asrs	r2, r4, #16
90020d98:	f3c6 3103 	ubfx	r1, r6, #12, #4
90020d9c:	689b      	ldr	r3, [r3, #8]
90020d9e:	f100 81cd 	bmi.w	9002113c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
90020da2:	f103 38ff 	add.w	r8, r3, #4294967295
90020da6:	4542      	cmp	r2, r8
90020da8:	f280 81c8 	bge.w	9002113c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
90020dac:	f1bc 0f00 	cmp.w	ip, #0
90020db0:	f2c0 81c4 	blt.w	9002113c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
90020db4:	f10e 38ff 	add.w	r8, lr, #4294967295
90020db8:	45c4      	cmp	ip, r8
90020dba:	f280 81bf 	bge.w	9002113c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
90020dbe:	b21b      	sxth	r3, r3
90020dc0:	9d10      	ldr	r5, [sp, #64]	; 0x40
90020dc2:	fb0c 2203 	mla	r2, ip, r3, r2
90020dc6:	eb05 0882 	add.w	r8, r5, r2, lsl #2
90020dca:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
90020dce:	ea4f 6e12 	mov.w	lr, r2, lsr #24
90020dd2:	2800      	cmp	r0, #0
90020dd4:	f000 81a9 	beq.w	9002112a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x440>
90020dd8:	f8d8 5004 	ldr.w	r5, [r8, #4]
90020ddc:	950c      	str	r5, [sp, #48]	; 0x30
90020dde:	0e2d      	lsrs	r5, r5, #24
90020de0:	9513      	str	r5, [sp, #76]	; 0x4c
90020de2:	b181      	cbz	r1, 90020e06 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
90020de4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
90020de8:	3b01      	subs	r3, #1
90020dea:	009b      	lsls	r3, r3, #2
90020dec:	3304      	adds	r3, #4
90020dee:	eb08 0c03 	add.w	ip, r8, r3
90020df2:	f858 3003 	ldr.w	r3, [r8, r3]
90020df6:	9308      	str	r3, [sp, #32]
90020df8:	0e1b      	lsrs	r3, r3, #24
90020dfa:	9311      	str	r3, [sp, #68]	; 0x44
90020dfc:	f8dc 3004 	ldr.w	r3, [ip, #4]
90020e00:	930d      	str	r3, [sp, #52]	; 0x34
90020e02:	0e1b      	lsrs	r3, r3, #24
90020e04:	9314      	str	r3, [sp, #80]	; 0x50
90020e06:	b280      	uxth	r0, r0
90020e08:	9d11      	ldr	r5, [sp, #68]	; 0x44
90020e0a:	b289      	uxth	r1, r1
90020e0c:	fb00 f901 	mul.w	r9, r0, r1
90020e10:	0100      	lsls	r0, r0, #4
90020e12:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
90020e16:	eba0 0809 	sub.w	r8, r0, r9
90020e1a:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
90020e1e:	9813      	ldr	r0, [sp, #76]	; 0x4c
90020e20:	b289      	uxth	r1, r1
90020e22:	fa1f f888 	uxth.w	r8, r8
90020e26:	1a5b      	subs	r3, r3, r1
90020e28:	fb08 f000 	mul.w	r0, r8, r0
90020e2c:	b29b      	uxth	r3, r3
90020e2e:	fb03 000e 	mla	r0, r3, lr, r0
90020e32:	fb01 0005 	mla	r0, r1, r5, r0
90020e36:	9d14      	ldr	r5, [sp, #80]	; 0x50
90020e38:	fb09 0005 	mla	r0, r9, r5, r0
90020e3c:	f3c0 2007 	ubfx	r0, r0, #8, #8
90020e40:	2800      	cmp	r0, #0
90020e42:	f000 80fa 	beq.w	9002103a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
90020e46:	f1be 0fff 	cmp.w	lr, #255	; 0xff
90020e4a:	d01b      	beq.n	90020e84 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
90020e4c:	f002 1aff 	and.w	sl, r2, #16711935	; 0xff00ff
90020e50:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
90020e54:	fb0e fa0a 	mul.w	sl, lr, sl
90020e58:	fb0e fe02 	mul.w	lr, lr, r2
90020e5c:	ea4f 221a 	mov.w	r2, sl, lsr #8
90020e60:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
90020e64:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
90020e68:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
90020e6c:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
90020e70:	4452      	add	r2, sl
90020e72:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
90020e76:	0a12      	lsrs	r2, r2, #8
90020e78:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
90020e7c:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
90020e80:	ea42 020c 	orr.w	r2, r2, ip
90020e84:	9d13      	ldr	r5, [sp, #76]	; 0x4c
90020e86:	2dff      	cmp	r5, #255	; 0xff
90020e88:	d021      	beq.n	90020ece <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e4>
90020e8a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
90020e8c:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
90020e90:	9d13      	ldr	r5, [sp, #76]	; 0x4c
90020e92:	fb05 fb0b 	mul.w	fp, r5, fp
90020e96:	9d0c      	ldr	r5, [sp, #48]	; 0x30
90020e98:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
90020e9c:	9d13      	ldr	r5, [sp, #76]	; 0x4c
90020e9e:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
90020ea2:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
90020ea6:	fb05 fa0a 	mul.w	sl, r5, sl
90020eaa:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
90020eae:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
90020eb2:	44de      	add	lr, fp
90020eb4:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
90020eb8:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
90020ebc:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
90020ec0:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
90020ec4:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
90020ec8:	ea4e 050a 	orr.w	r5, lr, sl
90020ecc:	950c      	str	r5, [sp, #48]	; 0x30
90020ece:	9d11      	ldr	r5, [sp, #68]	; 0x44
90020ed0:	2dff      	cmp	r5, #255	; 0xff
90020ed2:	d021      	beq.n	90020f18 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22e>
90020ed4:	9d08      	ldr	r5, [sp, #32]
90020ed6:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
90020eda:	9d11      	ldr	r5, [sp, #68]	; 0x44
90020edc:	fb05 fb0b 	mul.w	fp, r5, fp
90020ee0:	9d08      	ldr	r5, [sp, #32]
90020ee2:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
90020ee6:	9d11      	ldr	r5, [sp, #68]	; 0x44
90020ee8:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
90020eec:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
90020ef0:	fb05 fa0a 	mul.w	sl, r5, sl
90020ef4:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
90020ef8:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
90020efc:	44de      	add	lr, fp
90020efe:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
90020f02:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
90020f06:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
90020f0a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
90020f0e:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
90020f12:	ea4e 050a 	orr.w	r5, lr, sl
90020f16:	9508      	str	r5, [sp, #32]
90020f18:	9d14      	ldr	r5, [sp, #80]	; 0x50
90020f1a:	2dff      	cmp	r5, #255	; 0xff
90020f1c:	d021      	beq.n	90020f62 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
90020f1e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
90020f20:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
90020f24:	9d14      	ldr	r5, [sp, #80]	; 0x50
90020f26:	fb05 fb0b 	mul.w	fp, r5, fp
90020f2a:	9d0d      	ldr	r5, [sp, #52]	; 0x34
90020f2c:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
90020f30:	9d14      	ldr	r5, [sp, #80]	; 0x50
90020f32:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
90020f36:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
90020f3a:	fb05 fa0a 	mul.w	sl, r5, sl
90020f3e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
90020f42:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
90020f46:	44de      	add	lr, fp
90020f48:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
90020f4c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
90020f50:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
90020f54:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
90020f58:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
90020f5c:	ea4e 050a 	orr.w	r5, lr, sl
90020f60:	950d      	str	r5, [sp, #52]	; 0x34
90020f62:	9d0c      	ldr	r5, [sp, #48]	; 0x30
90020f64:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
90020f68:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
90020f6c:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
90020f70:	9d08      	ldr	r5, [sp, #32]
90020f72:	fb08 fc0c 	mul.w	ip, r8, ip
90020f76:	fb03 cc0e 	mla	ip, r3, lr, ip
90020f7a:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
90020f7e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
90020f80:	fb01 cc0e 	mla	ip, r1, lr, ip
90020f84:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
90020f88:	9d0c      	ldr	r5, [sp, #48]	; 0x30
90020f8a:	fb09 cc0e 	mla	ip, r9, lr, ip
90020f8e:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
90020f92:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
90020f94:	fb08 f80e 	mul.w	r8, r8, lr
90020f98:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
90020f9c:	fb03 8202 	mla	r2, r3, r2, r8
90020fa0:	9b08      	ldr	r3, [sp, #32]
90020fa2:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
90020fa6:	f403 4a7f 	and.w	sl, r3, #65280	; 0xff00
90020faa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
90020fac:	fb01 220a 	mla	r2, r1, sl, r2
90020fb0:	f403 417f 	and.w	r1, r3, #65280	; 0xff00
90020fb4:	883b      	ldrh	r3, [r7, #0]
90020fb6:	fb09 2901 	mla	r9, r9, r1, r2
90020fba:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
90020fbc:	1219      	asrs	r1, r3, #8
90020fbe:	4342      	muls	r2, r0
90020fc0:	ea4f 2919 	mov.w	r9, r9, lsr #8
90020fc4:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
90020fc8:	1c50      	adds	r0, r2, #1
90020fca:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
90020fce:	eb00 2012 	add.w	r0, r0, r2, lsr #8
90020fd2:	ea4c 0c09 	orr.w	ip, ip, r9
90020fd6:	ea6f 2010 	mvn.w	r0, r0, lsr #8
90020fda:	ea4f 421c 	mov.w	r2, ip, lsr #16
90020fde:	f3cc 2e07 	ubfx	lr, ip, #8, #8
90020fe2:	fa5f fc8c 	uxtb.w	ip, ip
90020fe6:	fb12 f205 	smulbb	r2, r2, r5
90020fea:	b2c0      	uxtb	r0, r0
90020fec:	fb1c fc05 	smulbb	ip, ip, r5
90020ff0:	fb01 2100 	mla	r1, r1, r0, r2
90020ff4:	10da      	asrs	r2, r3, #3
90020ff6:	fb1e fe05 	smulbb	lr, lr, r5
90020ffa:	00db      	lsls	r3, r3, #3
90020ffc:	b289      	uxth	r1, r1
90020ffe:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
90021002:	b2db      	uxtb	r3, r3
90021004:	fb02 e200 	mla	r2, r2, r0, lr
90021008:	fb03 c300 	mla	r3, r3, r0, ip
9002100c:	b292      	uxth	r2, r2
9002100e:	fa1f fc83 	uxth.w	ip, r3
90021012:	1c4b      	adds	r3, r1, #1
90021014:	eb03 2111 	add.w	r1, r3, r1, lsr #8
90021018:	f10c 0301 	add.w	r3, ip, #1
9002101c:	eb03 231c 	add.w	r3, r3, ip, lsr #8
90021020:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
90021024:	f3c3 23c4 	ubfx	r3, r3, #11, #5
90021028:	430b      	orrs	r3, r1
9002102a:	1c51      	adds	r1, r2, #1
9002102c:	eb01 2212 	add.w	r2, r1, r2, lsr #8
90021030:	0952      	lsrs	r2, r2, #5
90021032:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
90021036:	4313      	orrs	r3, r2
90021038:	803b      	strh	r3, [r7, #0]
9002103a:	9b29      	ldr	r3, [sp, #164]	; 0xa4
9002103c:	3702      	adds	r7, #2
9002103e:	441c      	add	r4, r3
90021040:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
90021042:	441e      	add	r6, r3
90021044:	9b18      	ldr	r3, [sp, #96]	; 0x60
90021046:	3b01      	subs	r3, #1
90021048:	9318      	str	r3, [sp, #96]	; 0x60
9002104a:	e698      	b.n	90020d7e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
9002104c:	9b29      	ldr	r3, [sp, #164]	; 0xa4
9002104e:	441c      	add	r4, r3
90021050:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
90021052:	441e      	add	r6, r3
90021054:	9b07      	ldr	r3, [sp, #28]
90021056:	3b01      	subs	r3, #1
90021058:	9307      	str	r3, [sp, #28]
9002105a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
9002105c:	3302      	adds	r3, #2
9002105e:	930a      	str	r3, [sp, #40]	; 0x28
90021060:	e66d      	b.n	90020d3e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
90021062:	d023      	beq.n	900210ac <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c2>
90021064:	9b07      	ldr	r3, [sp, #28]
90021066:	9829      	ldr	r0, [sp, #164]	; 0xa4
90021068:	3b01      	subs	r3, #1
9002106a:	fb00 4003 	mla	r0, r0, r3, r4
9002106e:	1400      	asrs	r0, r0, #16
90021070:	f53f ae82 	bmi.w	90020d78 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
90021074:	3901      	subs	r1, #1
90021076:	4288      	cmp	r0, r1
90021078:	f6bf ae7e 	bge.w	90020d78 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
9002107c:	992a      	ldr	r1, [sp, #168]	; 0xa8
9002107e:	fb01 6303 	mla	r3, r1, r3, r6
90021082:	141b      	asrs	r3, r3, #16
90021084:	f53f ae78 	bmi.w	90020d78 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
90021088:	3a01      	subs	r2, #1
9002108a:	4293      	cmp	r3, r2
9002108c:	f6bf ae74 	bge.w	90020d78 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
90021090:	f8dd b01c 	ldr.w	fp, [sp, #28]
90021094:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
90021098:	f1bb 0f00 	cmp.w	fp, #0
9002109c:	dc6c      	bgt.n	90021178 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48e>
9002109e:	9b07      	ldr	r3, [sp, #28]
900210a0:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
900210a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
900210a6:	eb03 0345 	add.w	r3, r3, r5, lsl #1
900210aa:	930a      	str	r3, [sp, #40]	; 0x28
900210ac:	9b17      	ldr	r3, [sp, #92]	; 0x5c
900210ae:	2b00      	cmp	r3, #0
900210b0:	f340 81b3 	ble.w	9002141a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x730>
900210b4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
900210b8:	9b26      	ldr	r3, [sp, #152]	; 0x98
900210ba:	ee30 0a04 	vadd.f32	s0, s0, s8
900210be:	ee70 0aa4 	vadd.f32	s1, s1, s9
900210c2:	eef0 6a62 	vmov.f32	s13, s5
900210c6:	eec7 7a00 	vdiv.f32	s15, s14, s0
900210ca:	ee31 1a05 	vadd.f32	s2, s2, s10
900210ce:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
900210d2:	ee16 4a90 	vmov	r4, s13
900210d6:	eef0 6a43 	vmov.f32	s13, s6
900210da:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
900210de:	ee16 6a90 	vmov	r6, s13
900210e2:	ee20 7aa7 	vmul.f32	s14, s1, s15
900210e6:	ee61 7a27 	vmul.f32	s15, s2, s15
900210ea:	ee77 2a62 	vsub.f32	s5, s14, s5
900210ee:	ee37 3ac3 	vsub.f32	s6, s15, s6
900210f2:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
900210f6:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
900210fa:	ee12 2a90 	vmov	r2, s5
900210fe:	eef0 2a47 	vmov.f32	s5, s14
90021102:	fb92 f3f3 	sdiv	r3, r2, r3
90021106:	ee13 2a10 	vmov	r2, s6
9002110a:	9329      	str	r3, [sp, #164]	; 0xa4
9002110c:	9b26      	ldr	r3, [sp, #152]	; 0x98
9002110e:	eeb0 3a67 	vmov.f32	s6, s15
90021112:	fb92 f3f3 	sdiv	r3, r2, r3
90021116:	932a      	str	r3, [sp, #168]	; 0xa8
90021118:	9b17      	ldr	r3, [sp, #92]	; 0x5c
9002111a:	9a19      	ldr	r2, [sp, #100]	; 0x64
9002111c:	3b01      	subs	r3, #1
9002111e:	9317      	str	r3, [sp, #92]	; 0x5c
90021120:	9b26      	ldr	r3, [sp, #152]	; 0x98
90021122:	bf08      	it	eq
90021124:	4613      	moveq	r3, r2
90021126:	9307      	str	r3, [sp, #28]
90021128:	e5fb      	b.n	90020d22 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
9002112a:	2900      	cmp	r1, #0
9002112c:	f43f ae6b 	beq.w	90020e06 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
90021130:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
90021134:	9308      	str	r3, [sp, #32]
90021136:	0e1b      	lsrs	r3, r3, #24
90021138:	9311      	str	r3, [sp, #68]	; 0x44
9002113a:	e664      	b.n	90020e06 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
9002113c:	f112 0801 	adds.w	r8, r2, #1
90021140:	f53f af7b 	bmi.w	9002103a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
90021144:	4543      	cmp	r3, r8
90021146:	f6ff af78 	blt.w	9002103a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
9002114a:	f11c 0801 	adds.w	r8, ip, #1
9002114e:	f53f af74 	bmi.w	9002103a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
90021152:	45c6      	cmp	lr, r8
90021154:	f6ff af71 	blt.w	9002103a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
90021158:	9d1a      	ldr	r5, [sp, #104]	; 0x68
9002115a:	b21b      	sxth	r3, r3
9002115c:	9201      	str	r2, [sp, #4]
9002115e:	fa0f f28e 	sxth.w	r2, lr
90021162:	e9cd 1504 	strd	r1, r5, [sp, #16]
90021166:	e9cd c002 	strd	ip, r0, [sp, #8]
9002116a:	9200      	str	r2, [sp, #0]
9002116c:	4639      	mov	r1, r7
9002116e:	9a10      	ldr	r2, [sp, #64]	; 0x40
90021170:	981b      	ldr	r0, [sp, #108]	; 0x6c
90021172:	f7ff fc79 	bl	90020a68 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh>
90021176:	e760      	b.n	9002103a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
90021178:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
9002117a:	1427      	asrs	r7, r4, #16
9002117c:	9d10      	ldr	r5, [sp, #64]	; 0x40
9002117e:	f3c4 3203 	ubfx	r2, r4, #12, #4
90021182:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
90021186:	1433      	asrs	r3, r6, #16
90021188:	f3c6 3003 	ubfx	r0, r6, #12, #4
9002118c:	fb01 7303 	mla	r3, r1, r3, r7
90021190:	eb05 0783 	add.w	r7, r5, r3, lsl #2
90021194:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
90021198:	ea4f 6c13 	mov.w	ip, r3, lsr #24
9002119c:	2a00      	cmp	r2, #0
9002119e:	f000 8133 	beq.w	90021408 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x71e>
900211a2:	687d      	ldr	r5, [r7, #4]
900211a4:	950e      	str	r5, [sp, #56]	; 0x38
900211a6:	0e2d      	lsrs	r5, r5, #24
900211a8:	9515      	str	r5, [sp, #84]	; 0x54
900211aa:	b178      	cbz	r0, 900211cc <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e2>
900211ac:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
900211b0:	3901      	subs	r1, #1
900211b2:	0089      	lsls	r1, r1, #2
900211b4:	3104      	adds	r1, #4
900211b6:	eb07 0e01 	add.w	lr, r7, r1
900211ba:	5879      	ldr	r1, [r7, r1]
900211bc:	9109      	str	r1, [sp, #36]	; 0x24
900211be:	0e09      	lsrs	r1, r1, #24
900211c0:	9112      	str	r1, [sp, #72]	; 0x48
900211c2:	f8de 1004 	ldr.w	r1, [lr, #4]
900211c6:	910f      	str	r1, [sp, #60]	; 0x3c
900211c8:	0e09      	lsrs	r1, r1, #24
900211ca:	9116      	str	r1, [sp, #88]	; 0x58
900211cc:	b292      	uxth	r2, r2
900211ce:	9915      	ldr	r1, [sp, #84]	; 0x54
900211d0:	b280      	uxth	r0, r0
900211d2:	9d12      	ldr	r5, [sp, #72]	; 0x48
900211d4:	fb02 f800 	mul.w	r8, r2, r0
900211d8:	0112      	lsls	r2, r2, #4
900211da:	ebc8 1000 	rsb	r0, r8, r0, lsl #4
900211de:	eba2 0e08 	sub.w	lr, r2, r8
900211e2:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
900211e6:	b280      	uxth	r0, r0
900211e8:	fa1f fe8e 	uxth.w	lr, lr
900211ec:	1a12      	subs	r2, r2, r0
900211ee:	fb0e f101 	mul.w	r1, lr, r1
900211f2:	b292      	uxth	r2, r2
900211f4:	fb02 110c 	mla	r1, r2, ip, r1
900211f8:	fb00 1105 	mla	r1, r0, r5, r1
900211fc:	9d16      	ldr	r5, [sp, #88]	; 0x58
900211fe:	fb08 1105 	mla	r1, r8, r5, r1
90021202:	f3c1 2107 	ubfx	r1, r1, #8, #8
90021206:	2900      	cmp	r1, #0
90021208:	f000 80f5 	beq.w	900213f6 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70c>
9002120c:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
90021210:	d019      	beq.n	90021246 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x55c>
90021212:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
90021216:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
9002121a:	fb0c fa0a 	mul.w	sl, ip, sl
9002121e:	fb0c fc03 	mul.w	ip, ip, r3
90021222:	ea4f 231a 	mov.w	r3, sl, lsr #8
90021226:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
9002122a:	f50c 7780 	add.w	r7, ip, #256	; 0x100
9002122e:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
90021232:	eb07 271c 	add.w	r7, r7, ip, lsr #8
90021236:	4453      	add	r3, sl
90021238:	0a3f      	lsrs	r7, r7, #8
9002123a:	0a1b      	lsrs	r3, r3, #8
9002123c:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
90021240:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
90021244:	433b      	orrs	r3, r7
90021246:	9d15      	ldr	r5, [sp, #84]	; 0x54
90021248:	2dff      	cmp	r5, #255	; 0xff
9002124a:	d020      	beq.n	9002128e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a4>
9002124c:	9d0e      	ldr	r5, [sp, #56]	; 0x38
9002124e:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
90021252:	9d15      	ldr	r5, [sp, #84]	; 0x54
90021254:	436f      	muls	r7, r5
90021256:	9d0e      	ldr	r5, [sp, #56]	; 0x38
90021258:	ea4f 2c17 	mov.w	ip, r7, lsr #8
9002125c:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
90021260:	9d15      	ldr	r5, [sp, #84]	; 0x54
90021262:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
90021266:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
9002126a:	fb05 fa0a 	mul.w	sl, r5, sl
9002126e:	44bc      	add	ip, r7
90021270:	f50a 7780 	add.w	r7, sl, #256	; 0x100
90021274:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
90021278:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
9002127c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
90021280:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
90021284:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
90021288:	ea4c 050a 	orr.w	r5, ip, sl
9002128c:	950e      	str	r5, [sp, #56]	; 0x38
9002128e:	9d12      	ldr	r5, [sp, #72]	; 0x48
90021290:	2dff      	cmp	r5, #255	; 0xff
90021292:	d020      	beq.n	900212d6 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5ec>
90021294:	9d09      	ldr	r5, [sp, #36]	; 0x24
90021296:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
9002129a:	9d12      	ldr	r5, [sp, #72]	; 0x48
9002129c:	436f      	muls	r7, r5
9002129e:	9d09      	ldr	r5, [sp, #36]	; 0x24
900212a0:	ea4f 2c17 	mov.w	ip, r7, lsr #8
900212a4:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
900212a8:	9d12      	ldr	r5, [sp, #72]	; 0x48
900212aa:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
900212ae:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
900212b2:	fb05 fa0a 	mul.w	sl, r5, sl
900212b6:	44bc      	add	ip, r7
900212b8:	f50a 7780 	add.w	r7, sl, #256	; 0x100
900212bc:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
900212c0:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
900212c4:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
900212c8:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
900212cc:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
900212d0:	ea4c 050a 	orr.w	r5, ip, sl
900212d4:	9509      	str	r5, [sp, #36]	; 0x24
900212d6:	9d16      	ldr	r5, [sp, #88]	; 0x58
900212d8:	2dff      	cmp	r5, #255	; 0xff
900212da:	d020      	beq.n	9002131e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x634>
900212dc:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
900212de:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
900212e2:	9d16      	ldr	r5, [sp, #88]	; 0x58
900212e4:	436f      	muls	r7, r5
900212e6:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
900212e8:	ea4f 2c17 	mov.w	ip, r7, lsr #8
900212ec:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
900212f0:	9d16      	ldr	r5, [sp, #88]	; 0x58
900212f2:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
900212f6:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
900212fa:	fb05 fa0a 	mul.w	sl, r5, sl
900212fe:	44bc      	add	ip, r7
90021300:	f50a 7780 	add.w	r7, sl, #256	; 0x100
90021304:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
90021308:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
9002130c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
90021310:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
90021314:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
90021318:	ea4c 050a 	orr.w	r5, ip, sl
9002131c:	950f      	str	r5, [sp, #60]	; 0x3c
9002131e:	9d0e      	ldr	r5, [sp, #56]	; 0x38
90021320:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
90021324:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
90021328:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
9002132c:	9d09      	ldr	r5, [sp, #36]	; 0x24
9002132e:	fb0e f707 	mul.w	r7, lr, r7
90021332:	fb02 770c 	mla	r7, r2, ip, r7
90021336:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
9002133a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
9002133c:	fb00 770c 	mla	r7, r0, ip, r7
90021340:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
90021344:	9d0e      	ldr	r5, [sp, #56]	; 0x38
90021346:	fb08 770c 	mla	r7, r8, ip, r7
9002134a:	f405 4c7f 	and.w	ip, r5, #65280	; 0xff00
9002134e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
90021350:	fb0e fe0c 	mul.w	lr, lr, ip
90021354:	0a3f      	lsrs	r7, r7, #8
90021356:	fb02 e303 	mla	r3, r2, r3, lr
9002135a:	9a09      	ldr	r2, [sp, #36]	; 0x24
9002135c:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
90021360:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
90021364:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
90021366:	fb00 330a 	mla	r3, r0, sl, r3
9002136a:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
9002136e:	f8b9 0000 	ldrh.w	r0, [r9]
90021372:	fb08 3c0c 	mla	ip, r8, ip, r3
90021376:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
90021378:	1202      	asrs	r2, r0, #8
9002137a:	4359      	muls	r1, r3
9002137c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
90021380:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
90021384:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
90021388:	1c4b      	adds	r3, r1, #1
9002138a:	ea47 070c 	orr.w	r7, r7, ip
9002138e:	eb03 2111 	add.w	r1, r3, r1, lsr #8
90021392:	0c3b      	lsrs	r3, r7, #16
90021394:	ea6f 2111 	mvn.w	r1, r1, lsr #8
90021398:	f3c7 2c07 	ubfx	ip, r7, #8, #8
9002139c:	b2ff      	uxtb	r7, r7
9002139e:	fb13 f305 	smulbb	r3, r3, r5
900213a2:	b2c9      	uxtb	r1, r1
900213a4:	fb17 f705 	smulbb	r7, r7, r5
900213a8:	fb02 3201 	mla	r2, r2, r1, r3
900213ac:	10c3      	asrs	r3, r0, #3
900213ae:	fb1c fc05 	smulbb	ip, ip, r5
900213b2:	00c0      	lsls	r0, r0, #3
900213b4:	b292      	uxth	r2, r2
900213b6:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
900213ba:	b2c0      	uxtb	r0, r0
900213bc:	fb03 c301 	mla	r3, r3, r1, ip
900213c0:	fb00 7001 	mla	r0, r0, r1, r7
900213c4:	1c51      	adds	r1, r2, #1
900213c6:	b29b      	uxth	r3, r3
900213c8:	b280      	uxth	r0, r0
900213ca:	eb01 2212 	add.w	r2, r1, r2, lsr #8
900213ce:	f100 0c01 	add.w	ip, r0, #1
900213d2:	f402 4278 	and.w	r2, r2, #63488	; 0xf800
900213d6:	eb0c 2c10 	add.w	ip, ip, r0, lsr #8
900213da:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
900213de:	ea4c 0202 	orr.w	r2, ip, r2
900213e2:	f103 0c01 	add.w	ip, r3, #1
900213e6:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
900213ea:	095b      	lsrs	r3, r3, #5
900213ec:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
900213f0:	431a      	orrs	r2, r3
900213f2:	f8a9 2000 	strh.w	r2, [r9]
900213f6:	9b29      	ldr	r3, [sp, #164]	; 0xa4
900213f8:	f109 0902 	add.w	r9, r9, #2
900213fc:	f10b 3bff 	add.w	fp, fp, #4294967295
90021400:	441c      	add	r4, r3
90021402:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
90021404:	441e      	add	r6, r3
90021406:	e647      	b.n	90021098 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ae>
90021408:	2800      	cmp	r0, #0
9002140a:	f43f aedf 	beq.w	900211cc <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e2>
9002140e:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
90021412:	9109      	str	r1, [sp, #36]	; 0x24
90021414:	0e09      	lsrs	r1, r1, #24
90021416:	9112      	str	r1, [sp, #72]	; 0x48
90021418:	e6d8      	b.n	900211cc <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e2>
9002141a:	b01d      	add	sp, #116	; 0x74
9002141c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

90021420 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh>:
90021420:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90021424:	b085      	sub	sp, #20
90021426:	e9dd 740f 	ldrd	r7, r4, [sp, #60]	; 0x3c
9002142a:	9102      	str	r1, [sp, #8]
9002142c:	2c00      	cmp	r4, #0
9002142e:	fb04 7103 	mla	r1, r4, r3, r7
90021432:	f9bd e038 	ldrsh.w	lr, [sp, #56]	; 0x38
90021436:	f89d 6044 	ldrb.w	r6, [sp, #68]	; 0x44
9002143a:	eb02 0c81 	add.w	ip, r2, r1, lsl #2
9002143e:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
90021442:	f2c0 810c 	blt.w	9002165e <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x23e>
90021446:	45a6      	cmp	lr, r4
90021448:	f340 8109 	ble.w	9002165e <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x23e>
9002144c:	2f00      	cmp	r7, #0
9002144e:	f2c0 8104 	blt.w	9002165a <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x23a>
90021452:	42bb      	cmp	r3, r7
90021454:	f340 8101 	ble.w	9002165a <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x23a>
90021458:	f852 5021 	ldr.w	r5, [r2, r1, lsl #2]
9002145c:	1c7a      	adds	r2, r7, #1
9002145e:	f100 8101 	bmi.w	90021664 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x244>
90021462:	4293      	cmp	r3, r2
90021464:	f340 80fe 	ble.w	90021664 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x244>
90021468:	2e00      	cmp	r6, #0
9002146a:	f000 80fd 	beq.w	90021668 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x248>
9002146e:	f8dc 1004 	ldr.w	r1, [ip, #4]
90021472:	3401      	adds	r4, #1
90021474:	f100 80fc 	bmi.w	90021670 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x250>
90021478:	45a6      	cmp	lr, r4
9002147a:	f340 80f9 	ble.w	90021670 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x250>
9002147e:	2800      	cmp	r0, #0
90021480:	f000 80f9 	beq.w	90021676 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x256>
90021484:	2f00      	cmp	r7, #0
90021486:	eb0c 0283 	add.w	r2, ip, r3, lsl #2
9002148a:	f2c0 80ef 	blt.w	9002166c <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x24c>
9002148e:	42bb      	cmp	r3, r7
90021490:	f340 80ec 	ble.w	9002166c <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x24c>
90021494:	f85c 4023 	ldr.w	r4, [ip, r3, lsl #2]
90021498:	3701      	adds	r7, #1
9002149a:	f100 80ef 	bmi.w	9002167c <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x25c>
9002149e:	42bb      	cmp	r3, r7
900214a0:	f340 80ec 	ble.w	9002167c <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x25c>
900214a4:	2e00      	cmp	r6, #0
900214a6:	f000 80eb 	beq.w	90021680 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x260>
900214aa:	6852      	ldr	r2, [r2, #4]
900214ac:	b2b6      	uxth	r6, r6
900214ae:	b280      	uxth	r0, r0
900214b0:	ea4f 6a11 	mov.w	sl, r1, lsr #24
900214b4:	fb00 fe06 	mul.w	lr, r0, r6
900214b8:	0136      	lsls	r6, r6, #4
900214ba:	ea4f 6b15 	mov.w	fp, r5, lsr #24
900214be:	ebce 1000 	rsb	r0, lr, r0, lsl #4
900214c2:	eba6 070e 	sub.w	r7, r6, lr
900214c6:	f5c6 7380 	rsb	r3, r6, #256	; 0x100
900214ca:	ea4f 6914 	mov.w	r9, r4, lsr #24
900214ce:	b280      	uxth	r0, r0
900214d0:	b2bf      	uxth	r7, r7
900214d2:	1a1b      	subs	r3, r3, r0
900214d4:	ea4f 6812 	mov.w	r8, r2, lsr #24
900214d8:	fb07 f60a 	mul.w	r6, r7, sl
900214dc:	b29b      	uxth	r3, r3
900214de:	fb0b 6603 	mla	r6, fp, r3, r6
900214e2:	fb00 6609 	mla	r6, r0, r9, r6
900214e6:	fb0e 6608 	mla	r6, lr, r8, r6
900214ea:	f3c6 2607 	ubfx	r6, r6, #8, #8
900214ee:	9600      	str	r6, [sp, #0]
900214f0:	2e00      	cmp	r6, #0
900214f2:	f000 80af 	beq.w	90021654 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x234>
900214f6:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
900214fa:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
900214fe:	9e02      	ldr	r6, [sp, #8]
90021500:	fb0b fc0c 	mul.w	ip, fp, ip
90021504:	fb0b f505 	mul.w	r5, fp, r5
90021508:	8836      	ldrh	r6, [r6, #0]
9002150a:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
9002150e:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
90021512:	9501      	str	r5, [sp, #4]
90021514:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
90021518:	44dc      	add	ip, fp
9002151a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
9002151e:	f00c 15ff 	and.w	r5, ip, #16711935	; 0xff00ff
90021522:	9503      	str	r5, [sp, #12]
90021524:	9d01      	ldr	r5, [sp, #4]
90021526:	f505 7c80 	add.w	ip, r5, #256	; 0x100
9002152a:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
9002152e:	f001 1cff 	and.w	ip, r1, #16711935	; 0xff00ff
90021532:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
90021536:	fb0a fc0c 	mul.w	ip, sl, ip
9002153a:	ea4f 2b15 	mov.w	fp, r5, lsr #8
9002153e:	fb0a fa01 	mul.w	sl, sl, r1
90021542:	ea4f 251c 	mov.w	r5, ip, lsr #8
90021546:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
9002154a:	f50a 7180 	add.w	r1, sl, #256	; 0x100
9002154e:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
90021552:	eb01 2a1a 	add.w	sl, r1, sl, lsr #8
90021556:	4465      	add	r5, ip
90021558:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
9002155c:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
90021560:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
90021564:	fb09 fc0c 	mul.w	ip, r9, ip
90021568:	0a2d      	lsrs	r5, r5, #8
9002156a:	fb09 f904 	mul.w	r9, r9, r4
9002156e:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
90021572:	ea4f 211c 	mov.w	r1, ip, lsr #8
90021576:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
9002157a:	f509 7480 	add.w	r4, r9, #256	; 0x100
9002157e:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
90021582:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
90021586:	437d      	muls	r5, r7
90021588:	eb04 2919 	add.w	r9, r4, r9, lsr #8
9002158c:	f002 14ff 	and.w	r4, r2, #16711935	; 0xff00ff
90021590:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
90021594:	4461      	add	r1, ip
90021596:	fb08 f404 	mul.w	r4, r8, r4
9002159a:	ea4f 2919 	mov.w	r9, r9, lsr #8
9002159e:	fb08 f802 	mul.w	r8, r8, r2
900215a2:	0a09      	lsrs	r1, r1, #8
900215a4:	0a22      	lsrs	r2, r4, #8
900215a6:	f104 1401 	add.w	r4, r4, #65537	; 0x10001
900215aa:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
900215ae:	fb07 f70a 	mul.w	r7, r7, sl
900215b2:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
900215b6:	4414      	add	r4, r2
900215b8:	f508 7280 	add.w	r2, r8, #256	; 0x100
900215bc:	0a24      	lsrs	r4, r4, #8
900215be:	eb02 2818 	add.w	r8, r2, r8, lsr #8
900215c2:	9a03      	ldr	r2, [sp, #12]
900215c4:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
900215c8:	fb02 5503 	mla	r5, r2, r3, r5
900215cc:	ea4f 2818 	mov.w	r8, r8, lsr #8
900215d0:	fb04 540e 	mla	r4, r4, lr, r5
900215d4:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
900215d8:	fb01 4100 	mla	r1, r1, r0, r4
900215dc:	0a09      	lsrs	r1, r1, #8
900215de:	f001 14ff 	and.w	r4, r1, #16711935	; 0xff00ff
900215e2:	f40b 417f 	and.w	r1, fp, #65280	; 0xff00
900215e6:	fb03 7101 	mla	r1, r3, r1, r7
900215ea:	9b00      	ldr	r3, [sp, #0]
900215ec:	fb0e 1e08 	mla	lr, lr, r8, r1
900215f0:	f409 417f 	and.w	r1, r9, #65280	; 0xff00
900215f4:	43da      	mvns	r2, r3
900215f6:	1233      	asrs	r3, r6, #8
900215f8:	fb00 e101 	mla	r1, r0, r1, lr
900215fc:	10f0      	asrs	r0, r6, #3
900215fe:	b2d2      	uxtb	r2, r2
90021600:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
90021604:	0a09      	lsrs	r1, r1, #8
90021606:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
9002160a:	00f6      	lsls	r6, r6, #3
9002160c:	4353      	muls	r3, r2
9002160e:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
90021612:	4350      	muls	r0, r2
90021614:	b2f6      	uxtb	r6, r6
90021616:	4321      	orrs	r1, r4
90021618:	4356      	muls	r6, r2
9002161a:	1c5a      	adds	r2, r3, #1
9002161c:	eb02 2213 	add.w	r2, r2, r3, lsr #8
90021620:	0c0b      	lsrs	r3, r1, #16
90021622:	eb03 2312 	add.w	r3, r3, r2, lsr #8
90021626:	1c42      	adds	r2, r0, #1
90021628:	eb02 2010 	add.w	r0, r2, r0, lsr #8
9002162c:	0a0a      	lsrs	r2, r1, #8
9002162e:	021b      	lsls	r3, r3, #8
90021630:	eb02 2210 	add.w	r2, r2, r0, lsr #8
90021634:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
90021638:	00d2      	lsls	r2, r2, #3
9002163a:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
9002163e:	4313      	orrs	r3, r2
90021640:	1c72      	adds	r2, r6, #1
90021642:	eb02 2616 	add.w	r6, r2, r6, lsr #8
90021646:	eb01 2116 	add.w	r1, r1, r6, lsr #8
9002164a:	f3c1 01c4 	ubfx	r1, r1, #3, #5
9002164e:	4319      	orrs	r1, r3
90021650:	9b02      	ldr	r3, [sp, #8]
90021652:	8019      	strh	r1, [r3, #0]
90021654:	b005      	add	sp, #20
90021656:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9002165a:	2500      	movs	r5, #0
9002165c:	e6fe      	b.n	9002145c <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x3c>
9002165e:	2100      	movs	r1, #0
90021660:	460d      	mov	r5, r1
90021662:	e706      	b.n	90021472 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x52>
90021664:	2100      	movs	r1, #0
90021666:	e704      	b.n	90021472 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x52>
90021668:	4631      	mov	r1, r6
9002166a:	e702      	b.n	90021472 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x52>
9002166c:	2400      	movs	r4, #0
9002166e:	e713      	b.n	90021498 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x78>
90021670:	2200      	movs	r2, #0
90021672:	4614      	mov	r4, r2
90021674:	e71a      	b.n	900214ac <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x8c>
90021676:	4602      	mov	r2, r0
90021678:	4604      	mov	r4, r0
9002167a:	e717      	b.n	900214ac <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x8c>
9002167c:	2200      	movs	r2, #0
9002167e:	e715      	b.n	900214ac <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x8c>
90021680:	4632      	mov	r2, r6
90021682:	e713      	b.n	900214ac <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x8c>

90021684 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
90021684:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90021688:	b09b      	sub	sp, #108	; 0x6c
9002168a:	9218      	str	r2, [sp, #96]	; 0x60
9002168c:	9a29      	ldr	r2, [sp, #164]	; 0xa4
9002168e:	9019      	str	r0, [sp, #100]	; 0x64
90021690:	9116      	str	r1, [sp, #88]	; 0x58
90021692:	6850      	ldr	r0, [r2, #4]
90021694:	9307      	str	r3, [sp, #28]
90021696:	6812      	ldr	r2, [r2, #0]
90021698:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	; 0xa8
9002169c:	e9dd 4625 	ldrd	r4, r6, [sp, #148]	; 0x94
900216a0:	fb00 1303 	mla	r3, r0, r3, r1
900216a4:	eb02 0343 	add.w	r3, r2, r3, lsl #1
900216a8:	930a      	str	r3, [sp, #40]	; 0x28
900216aa:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
900216ac:	681b      	ldr	r3, [r3, #0]
900216ae:	930f      	str	r3, [sp, #60]	; 0x3c
900216b0:	9b16      	ldr	r3, [sp, #88]	; 0x58
900216b2:	2b00      	cmp	r3, #0
900216b4:	dc03      	bgt.n	900216be <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
900216b6:	9b18      	ldr	r3, [sp, #96]	; 0x60
900216b8:	2b00      	cmp	r3, #0
900216ba:	f340 8387 	ble.w	90021dcc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x748>
900216be:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
900216c0:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
900216c4:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
900216c8:	1e48      	subs	r0, r1, #1
900216ca:	1e57      	subs	r7, r2, #1
900216cc:	9b07      	ldr	r3, [sp, #28]
900216ce:	2b00      	cmp	r3, #0
900216d0:	f340 8166 	ble.w	900219a0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31c>
900216d4:	ea5f 4c24 	movs.w	ip, r4, asr #16
900216d8:	ea4f 4326 	mov.w	r3, r6, asr #16
900216dc:	d406      	bmi.n	900216ec <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
900216de:	4584      	cmp	ip, r0
900216e0:	da04      	bge.n	900216ec <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
900216e2:	2b00      	cmp	r3, #0
900216e4:	db02      	blt.n	900216ec <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
900216e6:	42bb      	cmp	r3, r7
900216e8:	f2c0 815b 	blt.w	900219a2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
900216ec:	f11c 0c01 	adds.w	ip, ip, #1
900216f0:	f100 814b 	bmi.w	9002198a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
900216f4:	4561      	cmp	r1, ip
900216f6:	f2c0 8148 	blt.w	9002198a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
900216fa:	3301      	adds	r3, #1
900216fc:	f100 8145 	bmi.w	9002198a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
90021700:	429a      	cmp	r2, r3
90021702:	f2c0 8142 	blt.w	9002198a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
90021706:	9b07      	ldr	r3, [sp, #28]
90021708:	9f0a      	ldr	r7, [sp, #40]	; 0x28
9002170a:	9317      	str	r3, [sp, #92]	; 0x5c
9002170c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
9002170e:	2b00      	cmp	r3, #0
90021710:	f340 8165 	ble.w	900219de <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35a>
90021714:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
90021716:	ea4f 4c26 	mov.w	ip, r6, asr #16
9002171a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
9002171c:	f3c4 3103 	ubfx	r1, r4, #12, #4
90021720:	f8d2 e00c 	ldr.w	lr, [r2, #12]
90021724:	1422      	asrs	r2, r4, #16
90021726:	f3c6 3003 	ubfx	r0, r6, #12, #4
9002172a:	689b      	ldr	r3, [r3, #8]
9002172c:	f100 81d5 	bmi.w	90021ada <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x456>
90021730:	f103 38ff 	add.w	r8, r3, #4294967295
90021734:	4542      	cmp	r2, r8
90021736:	f280 81d0 	bge.w	90021ada <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x456>
9002173a:	f1bc 0f00 	cmp.w	ip, #0
9002173e:	f2c0 81cc 	blt.w	90021ada <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x456>
90021742:	f10e 38ff 	add.w	r8, lr, #4294967295
90021746:	45c4      	cmp	ip, r8
90021748:	f280 81c7 	bge.w	90021ada <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x456>
9002174c:	b21b      	sxth	r3, r3
9002174e:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
90021750:	fb0c 2203 	mla	r2, ip, r3, r2
90021754:	eb05 0882 	add.w	r8, r5, r2, lsl #2
90021758:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
9002175c:	ea4f 6e12 	mov.w	lr, r2, lsr #24
90021760:	2900      	cmp	r1, #0
90021762:	f000 8182 	beq.w	90021a6a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e6>
90021766:	f8d8 5004 	ldr.w	r5, [r8, #4]
9002176a:	950b      	str	r5, [sp, #44]	; 0x2c
9002176c:	0e2d      	lsrs	r5, r5, #24
9002176e:	9512      	str	r5, [sp, #72]	; 0x48
90021770:	b180      	cbz	r0, 90021794 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x110>
90021772:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
90021776:	3b01      	subs	r3, #1
90021778:	009b      	lsls	r3, r3, #2
9002177a:	3304      	adds	r3, #4
9002177c:	eb08 0c03 	add.w	ip, r8, r3
90021780:	f858 3003 	ldr.w	r3, [r8, r3]
90021784:	9308      	str	r3, [sp, #32]
90021786:	0e1b      	lsrs	r3, r3, #24
90021788:	9310      	str	r3, [sp, #64]	; 0x40
9002178a:	f8dc 3004 	ldr.w	r3, [ip, #4]
9002178e:	930c      	str	r3, [sp, #48]	; 0x30
90021790:	0e1b      	lsrs	r3, r3, #24
90021792:	9313      	str	r3, [sp, #76]	; 0x4c
90021794:	b289      	uxth	r1, r1
90021796:	9b12      	ldr	r3, [sp, #72]	; 0x48
90021798:	b280      	uxth	r0, r0
9002179a:	9d10      	ldr	r5, [sp, #64]	; 0x40
9002179c:	fb01 f900 	mul.w	r9, r1, r0
900217a0:	0109      	lsls	r1, r1, #4
900217a2:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
900217a6:	eba1 0809 	sub.w	r8, r1, r9
900217aa:	f5c1 7180 	rsb	r1, r1, #256	; 0x100
900217ae:	b280      	uxth	r0, r0
900217b0:	fa1f f888 	uxth.w	r8, r8
900217b4:	1a09      	subs	r1, r1, r0
900217b6:	fb08 f303 	mul.w	r3, r8, r3
900217ba:	b289      	uxth	r1, r1
900217bc:	fb01 330e 	mla	r3, r1, lr, r3
900217c0:	fb00 3305 	mla	r3, r0, r5, r3
900217c4:	9d13      	ldr	r5, [sp, #76]	; 0x4c
900217c6:	fb09 3305 	mla	r3, r9, r5, r3
900217ca:	f3c3 2307 	ubfx	r3, r3, #8, #8
900217ce:	2b00      	cmp	r3, #0
900217d0:	f000 80d2 	beq.w	90021978 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
900217d4:	f1be 0fff 	cmp.w	lr, #255	; 0xff
900217d8:	d01b      	beq.n	90021812 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18e>
900217da:	f002 1aff 	and.w	sl, r2, #16711935	; 0xff00ff
900217de:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
900217e2:	fb0e fa0a 	mul.w	sl, lr, sl
900217e6:	fb0e fe02 	mul.w	lr, lr, r2
900217ea:	ea4f 221a 	mov.w	r2, sl, lsr #8
900217ee:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
900217f2:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
900217f6:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
900217fa:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
900217fe:	4452      	add	r2, sl
90021800:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
90021804:	0a12      	lsrs	r2, r2, #8
90021806:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
9002180a:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
9002180e:	ea42 020c 	orr.w	r2, r2, ip
90021812:	9d12      	ldr	r5, [sp, #72]	; 0x48
90021814:	2dff      	cmp	r5, #255	; 0xff
90021816:	d021      	beq.n	9002185c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d8>
90021818:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
9002181a:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
9002181e:	9d12      	ldr	r5, [sp, #72]	; 0x48
90021820:	fb05 fb0b 	mul.w	fp, r5, fp
90021824:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
90021826:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
9002182a:	9d12      	ldr	r5, [sp, #72]	; 0x48
9002182c:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
90021830:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
90021834:	fb05 fa0a 	mul.w	sl, r5, sl
90021838:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
9002183c:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
90021840:	44de      	add	lr, fp
90021842:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
90021846:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
9002184a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
9002184e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
90021852:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
90021856:	ea4e 050a 	orr.w	r5, lr, sl
9002185a:	950b      	str	r5, [sp, #44]	; 0x2c
9002185c:	9d10      	ldr	r5, [sp, #64]	; 0x40
9002185e:	2dff      	cmp	r5, #255	; 0xff
90021860:	d021      	beq.n	900218a6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x222>
90021862:	9d08      	ldr	r5, [sp, #32]
90021864:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
90021868:	9d10      	ldr	r5, [sp, #64]	; 0x40
9002186a:	fb05 fb0b 	mul.w	fp, r5, fp
9002186e:	9d08      	ldr	r5, [sp, #32]
90021870:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
90021874:	9d10      	ldr	r5, [sp, #64]	; 0x40
90021876:	fb05 fa0e 	mul.w	sl, r5, lr
9002187a:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
9002187e:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
90021882:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
90021886:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
9002188a:	44de      	add	lr, fp
9002188c:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
90021890:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
90021894:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
90021898:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
9002189c:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
900218a0:	ea4e 050a 	orr.w	r5, lr, sl
900218a4:	9508      	str	r5, [sp, #32]
900218a6:	9d13      	ldr	r5, [sp, #76]	; 0x4c
900218a8:	2dff      	cmp	r5, #255	; 0xff
900218aa:	d021      	beq.n	900218f0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26c>
900218ac:	9d0c      	ldr	r5, [sp, #48]	; 0x30
900218ae:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
900218b2:	9d13      	ldr	r5, [sp, #76]	; 0x4c
900218b4:	fb05 fb0b 	mul.w	fp, r5, fp
900218b8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
900218ba:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
900218be:	9d13      	ldr	r5, [sp, #76]	; 0x4c
900218c0:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
900218c4:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
900218c8:	fb05 fa0a 	mul.w	sl, r5, sl
900218cc:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
900218d0:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
900218d4:	44de      	add	lr, fp
900218d6:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
900218da:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
900218de:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
900218e2:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
900218e6:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
900218ea:	ea4e 050a 	orr.w	r5, lr, sl
900218ee:	950c      	str	r5, [sp, #48]	; 0x30
900218f0:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
900218f2:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
900218f6:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
900218fa:	2bff      	cmp	r3, #255	; 0xff
900218fc:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
90021900:	9d08      	ldr	r5, [sp, #32]
90021902:	fb08 fc0c 	mul.w	ip, r8, ip
90021906:	fb01 cc0e 	mla	ip, r1, lr, ip
9002190a:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
9002190e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
90021910:	fb00 cc0e 	mla	ip, r0, lr, ip
90021914:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
90021918:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
9002191a:	fb09 cc0e 	mla	ip, r9, lr, ip
9002191e:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
90021922:	fb08 f80e 	mul.w	r8, r8, lr
90021926:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
9002192a:	fb01 8202 	mla	r2, r1, r2, r8
9002192e:	9908      	ldr	r1, [sp, #32]
90021930:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
90021934:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
90021938:	990c      	ldr	r1, [sp, #48]	; 0x30
9002193a:	fb00 220a 	mla	r2, r0, sl, r2
9002193e:	f401 407f 	and.w	r0, r1, #65280	; 0xff00
90021942:	fb09 2900 	mla	r9, r9, r0, r2
90021946:	ea4f 2919 	mov.w	r9, r9, lsr #8
9002194a:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
9002194e:	ea4c 0c09 	orr.w	ip, ip, r9
90021952:	ea4f 221c 	mov.w	r2, ip, lsr #8
90021956:	f040 8091 	bne.w	90021a7c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f8>
9002195a:	ea4f 135c 	mov.w	r3, ip, lsr #5
9002195e:	f422 62ff 	bic.w	r2, r2, #2040	; 0x7f8
90021962:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
90021966:	f022 0207 	bic.w	r2, r2, #7
9002196a:	431a      	orrs	r2, r3
9002196c:	f3cc 0cc4 	ubfx	ip, ip, #3, #5
90021970:	ea4c 0c02 	orr.w	ip, ip, r2
90021974:	f8a7 c000 	strh.w	ip, [r7]
90021978:	9b27      	ldr	r3, [sp, #156]	; 0x9c
9002197a:	3702      	adds	r7, #2
9002197c:	441c      	add	r4, r3
9002197e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
90021980:	441e      	add	r6, r3
90021982:	9b17      	ldr	r3, [sp, #92]	; 0x5c
90021984:	3b01      	subs	r3, #1
90021986:	9317      	str	r3, [sp, #92]	; 0x5c
90021988:	e6c0      	b.n	9002170c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x88>
9002198a:	9b27      	ldr	r3, [sp, #156]	; 0x9c
9002198c:	441c      	add	r4, r3
9002198e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
90021990:	441e      	add	r6, r3
90021992:	9b07      	ldr	r3, [sp, #28]
90021994:	3b01      	subs	r3, #1
90021996:	9307      	str	r3, [sp, #28]
90021998:	9b0a      	ldr	r3, [sp, #40]	; 0x28
9002199a:	3302      	adds	r3, #2
9002199c:	930a      	str	r3, [sp, #40]	; 0x28
9002199e:	e695      	b.n	900216cc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
900219a0:	d024      	beq.n	900219ec <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x368>
900219a2:	9b07      	ldr	r3, [sp, #28]
900219a4:	9827      	ldr	r0, [sp, #156]	; 0x9c
900219a6:	3b01      	subs	r3, #1
900219a8:	fb00 4003 	mla	r0, r0, r3, r4
900219ac:	1400      	asrs	r0, r0, #16
900219ae:	f53f aeaa 	bmi.w	90021706 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
900219b2:	3901      	subs	r1, #1
900219b4:	4288      	cmp	r0, r1
900219b6:	f6bf aea6 	bge.w	90021706 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
900219ba:	9928      	ldr	r1, [sp, #160]	; 0xa0
900219bc:	fb01 6303 	mla	r3, r1, r3, r6
900219c0:	141b      	asrs	r3, r3, #16
900219c2:	f53f aea0 	bmi.w	90021706 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
900219c6:	3a01      	subs	r2, #1
900219c8:	4293      	cmp	r3, r2
900219ca:	f6bf ae9c 	bge.w	90021706 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
900219ce:	f8dd b01c 	ldr.w	fp, [sp, #28]
900219d2:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
900219d6:	f1bb 0f00 	cmp.w	fp, #0
900219da:	f300 809a 	bgt.w	90021b12 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48e>
900219de:	9b07      	ldr	r3, [sp, #28]
900219e0:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
900219e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
900219e6:	eb03 0345 	add.w	r3, r3, r5, lsl #1
900219ea:	930a      	str	r3, [sp, #40]	; 0x28
900219ec:	9b16      	ldr	r3, [sp, #88]	; 0x58
900219ee:	2b00      	cmp	r3, #0
900219f0:	f340 81ec 	ble.w	90021dcc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x748>
900219f4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
900219f8:	9b24      	ldr	r3, [sp, #144]	; 0x90
900219fa:	ee30 0a04 	vadd.f32	s0, s0, s8
900219fe:	ee70 0aa4 	vadd.f32	s1, s1, s9
90021a02:	eef0 6a62 	vmov.f32	s13, s5
90021a06:	eec7 7a00 	vdiv.f32	s15, s14, s0
90021a0a:	ee31 1a05 	vadd.f32	s2, s2, s10
90021a0e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
90021a12:	ee16 4a90 	vmov	r4, s13
90021a16:	eef0 6a43 	vmov.f32	s13, s6
90021a1a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
90021a1e:	ee16 6a90 	vmov	r6, s13
90021a22:	ee20 7aa7 	vmul.f32	s14, s1, s15
90021a26:	ee61 7a27 	vmul.f32	s15, s2, s15
90021a2a:	ee77 2a62 	vsub.f32	s5, s14, s5
90021a2e:	ee37 3ac3 	vsub.f32	s6, s15, s6
90021a32:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
90021a36:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
90021a3a:	ee12 2a90 	vmov	r2, s5
90021a3e:	eef0 2a47 	vmov.f32	s5, s14
90021a42:	fb92 f3f3 	sdiv	r3, r2, r3
90021a46:	ee13 2a10 	vmov	r2, s6
90021a4a:	9327      	str	r3, [sp, #156]	; 0x9c
90021a4c:	9b24      	ldr	r3, [sp, #144]	; 0x90
90021a4e:	eeb0 3a67 	vmov.f32	s6, s15
90021a52:	fb92 f3f3 	sdiv	r3, r2, r3
90021a56:	9328      	str	r3, [sp, #160]	; 0xa0
90021a58:	9b16      	ldr	r3, [sp, #88]	; 0x58
90021a5a:	9a18      	ldr	r2, [sp, #96]	; 0x60
90021a5c:	3b01      	subs	r3, #1
90021a5e:	9316      	str	r3, [sp, #88]	; 0x58
90021a60:	9b24      	ldr	r3, [sp, #144]	; 0x90
90021a62:	bf08      	it	eq
90021a64:	4613      	moveq	r3, r2
90021a66:	9307      	str	r3, [sp, #28]
90021a68:	e622      	b.n	900216b0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c>
90021a6a:	2800      	cmp	r0, #0
90021a6c:	f43f ae92 	beq.w	90021794 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x110>
90021a70:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
90021a74:	9308      	str	r3, [sp, #32]
90021a76:	0e1b      	lsrs	r3, r3, #24
90021a78:	9310      	str	r3, [sp, #64]	; 0x40
90021a7a:	e68b      	b.n	90021794 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x110>
90021a7c:	8839      	ldrh	r1, [r7, #0]
90021a7e:	43db      	mvns	r3, r3
90021a80:	4dd4      	ldr	r5, [pc, #848]	; (90021dd4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x750>)
90021a82:	ea4f 2e21 	mov.w	lr, r1, asr #8
90021a86:	fa5f f883 	uxtb.w	r8, r3
90021a8a:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
90021a8e:	10c8      	asrs	r0, r1, #3
90021a90:	00cb      	lsls	r3, r1, #3
90021a92:	fb0e fe08 	mul.w	lr, lr, r8
90021a96:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
90021a9a:	b2db      	uxtb	r3, r3
90021a9c:	f10e 0101 	add.w	r1, lr, #1
90021aa0:	fb00 f008 	mul.w	r0, r0, r8
90021aa4:	fb03 f308 	mul.w	r3, r3, r8
90021aa8:	eb01 2e1e 	add.w	lr, r1, lr, lsr #8
90021aac:	ea4f 411c 	mov.w	r1, ip, lsr #16
90021ab0:	eb01 211e 	add.w	r1, r1, lr, lsr #8
90021ab4:	f100 0e01 	add.w	lr, r0, #1
90021ab8:	eb0e 2010 	add.w	r0, lr, r0, lsr #8
90021abc:	b2c9      	uxtb	r1, r1
90021abe:	eb02 2210 	add.w	r2, r2, r0, lsr #8
90021ac2:	ea05 2101 	and.w	r1, r5, r1, lsl #8
90021ac6:	00d2      	lsls	r2, r2, #3
90021ac8:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
90021acc:	430a      	orrs	r2, r1
90021ace:	1c59      	adds	r1, r3, #1
90021ad0:	eb01 2313 	add.w	r3, r1, r3, lsr #8
90021ad4:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
90021ad8:	e748      	b.n	9002196c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e8>
90021ada:	f112 0801 	adds.w	r8, r2, #1
90021ade:	f53f af4b 	bmi.w	90021978 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
90021ae2:	4543      	cmp	r3, r8
90021ae4:	f6ff af48 	blt.w	90021978 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
90021ae8:	f11c 0801 	adds.w	r8, ip, #1
90021aec:	f53f af44 	bmi.w	90021978 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
90021af0:	45c6      	cmp	lr, r8
90021af2:	f6ff af41 	blt.w	90021978 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
90021af6:	b21b      	sxth	r3, r3
90021af8:	e9cd 2c01 	strd	r2, ip, [sp, #4]
90021afc:	fa0f f28e 	sxth.w	r2, lr
90021b00:	e9cd 1003 	strd	r1, r0, [sp, #12]
90021b04:	9200      	str	r2, [sp, #0]
90021b06:	4639      	mov	r1, r7
90021b08:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
90021b0a:	9819      	ldr	r0, [sp, #100]	; 0x64
90021b0c:	f7ff fc88 	bl	90021420 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh>
90021b10:	e732      	b.n	90021978 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
90021b12:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
90021b14:	1421      	asrs	r1, r4, #16
90021b16:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
90021b18:	f3c4 3203 	ubfx	r2, r4, #12, #4
90021b1c:	f9b3 7008 	ldrsh.w	r7, [r3, #8]
90021b20:	1433      	asrs	r3, r6, #16
90021b22:	f3c6 3003 	ubfx	r0, r6, #12, #4
90021b26:	fb07 1303 	mla	r3, r7, r3, r1
90021b2a:	990f      	ldr	r1, [sp, #60]	; 0x3c
90021b2c:	eb01 0183 	add.w	r1, r1, r3, lsl #2
90021b30:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
90021b34:	ea4f 6c13 	mov.w	ip, r3, lsr #24
90021b38:	2a00      	cmp	r2, #0
90021b3a:	f000 8108 	beq.w	90021d4e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ca>
90021b3e:	684d      	ldr	r5, [r1, #4]
90021b40:	950d      	str	r5, [sp, #52]	; 0x34
90021b42:	0e2d      	lsrs	r5, r5, #24
90021b44:	9514      	str	r5, [sp, #80]	; 0x50
90021b46:	b178      	cbz	r0, 90021b68 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
90021b48:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
90021b4c:	3f01      	subs	r7, #1
90021b4e:	00bf      	lsls	r7, r7, #2
90021b50:	3704      	adds	r7, #4
90021b52:	eb01 0e07 	add.w	lr, r1, r7
90021b56:	59c9      	ldr	r1, [r1, r7]
90021b58:	9109      	str	r1, [sp, #36]	; 0x24
90021b5a:	0e09      	lsrs	r1, r1, #24
90021b5c:	9111      	str	r1, [sp, #68]	; 0x44
90021b5e:	f8de 1004 	ldr.w	r1, [lr, #4]
90021b62:	910e      	str	r1, [sp, #56]	; 0x38
90021b64:	0e09      	lsrs	r1, r1, #24
90021b66:	9115      	str	r1, [sp, #84]	; 0x54
90021b68:	b292      	uxth	r2, r2
90021b6a:	9d11      	ldr	r5, [sp, #68]	; 0x44
90021b6c:	b280      	uxth	r0, r0
90021b6e:	fb02 f900 	mul.w	r9, r2, r0
90021b72:	0112      	lsls	r2, r2, #4
90021b74:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
90021b78:	eba2 0e09 	sub.w	lr, r2, r9
90021b7c:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
90021b80:	9a14      	ldr	r2, [sp, #80]	; 0x50
90021b82:	b280      	uxth	r0, r0
90021b84:	fa1f fe8e 	uxth.w	lr, lr
90021b88:	1a09      	subs	r1, r1, r0
90021b8a:	fb0e f202 	mul.w	r2, lr, r2
90021b8e:	b289      	uxth	r1, r1
90021b90:	fb01 220c 	mla	r2, r1, ip, r2
90021b94:	fb00 2205 	mla	r2, r0, r5, r2
90021b98:	9d15      	ldr	r5, [sp, #84]	; 0x54
90021b9a:	fb09 2205 	mla	r2, r9, r5, r2
90021b9e:	f3c2 2207 	ubfx	r2, r2, #8, #8
90021ba2:	2a00      	cmp	r2, #0
90021ba4:	f000 80ca 	beq.w	90021d3c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6b8>
90021ba8:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
90021bac:	d019      	beq.n	90021be2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x55e>
90021bae:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
90021bb2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
90021bb6:	fb0c fa0a 	mul.w	sl, ip, sl
90021bba:	fb0c fc03 	mul.w	ip, ip, r3
90021bbe:	ea4f 231a 	mov.w	r3, sl, lsr #8
90021bc2:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
90021bc6:	f50c 7780 	add.w	r7, ip, #256	; 0x100
90021bca:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
90021bce:	eb07 271c 	add.w	r7, r7, ip, lsr #8
90021bd2:	4453      	add	r3, sl
90021bd4:	0a3f      	lsrs	r7, r7, #8
90021bd6:	0a1b      	lsrs	r3, r3, #8
90021bd8:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
90021bdc:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
90021be0:	433b      	orrs	r3, r7
90021be2:	9d14      	ldr	r5, [sp, #80]	; 0x50
90021be4:	2dff      	cmp	r5, #255	; 0xff
90021be6:	d020      	beq.n	90021c2a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a6>
90021be8:	9d0d      	ldr	r5, [sp, #52]	; 0x34
90021bea:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
90021bee:	9d14      	ldr	r5, [sp, #80]	; 0x50
90021bf0:	436f      	muls	r7, r5
90021bf2:	9d0d      	ldr	r5, [sp, #52]	; 0x34
90021bf4:	ea4f 2c17 	mov.w	ip, r7, lsr #8
90021bf8:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
90021bfc:	9d14      	ldr	r5, [sp, #80]	; 0x50
90021bfe:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
90021c02:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
90021c06:	fb05 fa0a 	mul.w	sl, r5, sl
90021c0a:	44bc      	add	ip, r7
90021c0c:	f50a 7780 	add.w	r7, sl, #256	; 0x100
90021c10:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
90021c14:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
90021c18:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
90021c1c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
90021c20:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
90021c24:	ea4c 050a 	orr.w	r5, ip, sl
90021c28:	950d      	str	r5, [sp, #52]	; 0x34
90021c2a:	9d11      	ldr	r5, [sp, #68]	; 0x44
90021c2c:	2dff      	cmp	r5, #255	; 0xff
90021c2e:	d020      	beq.n	90021c72 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5ee>
90021c30:	9d09      	ldr	r5, [sp, #36]	; 0x24
90021c32:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
90021c36:	9d11      	ldr	r5, [sp, #68]	; 0x44
90021c38:	436f      	muls	r7, r5
90021c3a:	9d09      	ldr	r5, [sp, #36]	; 0x24
90021c3c:	f405 4c7f 	and.w	ip, r5, #65280	; 0xff00
90021c40:	9d11      	ldr	r5, [sp, #68]	; 0x44
90021c42:	fb05 fa0c 	mul.w	sl, r5, ip
90021c46:	ea4f 2c17 	mov.w	ip, r7, lsr #8
90021c4a:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
90021c4e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
90021c52:	44bc      	add	ip, r7
90021c54:	f50a 7780 	add.w	r7, sl, #256	; 0x100
90021c58:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
90021c5c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
90021c60:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
90021c64:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
90021c68:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
90021c6c:	ea4c 050a 	orr.w	r5, ip, sl
90021c70:	9509      	str	r5, [sp, #36]	; 0x24
90021c72:	9d15      	ldr	r5, [sp, #84]	; 0x54
90021c74:	2dff      	cmp	r5, #255	; 0xff
90021c76:	d020      	beq.n	90021cba <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x636>
90021c78:	9d0e      	ldr	r5, [sp, #56]	; 0x38
90021c7a:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
90021c7e:	9d15      	ldr	r5, [sp, #84]	; 0x54
90021c80:	436f      	muls	r7, r5
90021c82:	9d0e      	ldr	r5, [sp, #56]	; 0x38
90021c84:	ea4f 2c17 	mov.w	ip, r7, lsr #8
90021c88:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
90021c8c:	9d15      	ldr	r5, [sp, #84]	; 0x54
90021c8e:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
90021c92:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
90021c96:	fb05 fa0a 	mul.w	sl, r5, sl
90021c9a:	44bc      	add	ip, r7
90021c9c:	f50a 7780 	add.w	r7, sl, #256	; 0x100
90021ca0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
90021ca4:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
90021ca8:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
90021cac:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
90021cb0:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
90021cb4:	ea4c 050a 	orr.w	r5, ip, sl
90021cb8:	950e      	str	r5, [sp, #56]	; 0x38
90021cba:	9d0d      	ldr	r5, [sp, #52]	; 0x34
90021cbc:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
90021cc0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
90021cc4:	2aff      	cmp	r2, #255	; 0xff
90021cc6:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
90021cca:	9d09      	ldr	r5, [sp, #36]	; 0x24
90021ccc:	fb0e f707 	mul.w	r7, lr, r7
90021cd0:	fb01 770c 	mla	r7, r1, ip, r7
90021cd4:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
90021cd8:	9d0e      	ldr	r5, [sp, #56]	; 0x38
90021cda:	fb00 770c 	mla	r7, r0, ip, r7
90021cde:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
90021ce2:	9d0d      	ldr	r5, [sp, #52]	; 0x34
90021ce4:	fb09 770c 	mla	r7, r9, ip, r7
90021ce8:	f405 4c7f 	and.w	ip, r5, #65280	; 0xff00
90021cec:	fb0e fe0c 	mul.w	lr, lr, ip
90021cf0:	ea4f 2717 	mov.w	r7, r7, lsr #8
90021cf4:	fb01 e303 	mla	r3, r1, r3, lr
90021cf8:	9909      	ldr	r1, [sp, #36]	; 0x24
90021cfa:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
90021cfe:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
90021d02:	990e      	ldr	r1, [sp, #56]	; 0x38
90021d04:	fb00 330a 	mla	r3, r0, sl, r3
90021d08:	f401 4c7f 	and.w	ip, r1, #65280	; 0xff00
90021d0c:	fb09 3c0c 	mla	ip, r9, ip, r3
90021d10:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
90021d14:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
90021d18:	ea47 070c 	orr.w	r7, r7, ip
90021d1c:	ea4f 2317 	mov.w	r3, r7, lsr #8
90021d20:	d11e      	bne.n	90021d60 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6dc>
90021d22:	097a      	lsrs	r2, r7, #5
90021d24:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
90021d28:	f3c7 07c4 	ubfx	r7, r7, #3, #5
90021d2c:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
90021d30:	f023 0307 	bic.w	r3, r3, #7
90021d34:	4313      	orrs	r3, r2
90021d36:	431f      	orrs	r7, r3
90021d38:	f8a8 7000 	strh.w	r7, [r8]
90021d3c:	9b27      	ldr	r3, [sp, #156]	; 0x9c
90021d3e:	f108 0802 	add.w	r8, r8, #2
90021d42:	f10b 3bff 	add.w	fp, fp, #4294967295
90021d46:	441c      	add	r4, r3
90021d48:	9b28      	ldr	r3, [sp, #160]	; 0xa0
90021d4a:	441e      	add	r6, r3
90021d4c:	e643      	b.n	900219d6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x352>
90021d4e:	2800      	cmp	r0, #0
90021d50:	f43f af0a 	beq.w	90021b68 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
90021d54:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
90021d58:	9109      	str	r1, [sp, #36]	; 0x24
90021d5a:	0e09      	lsrs	r1, r1, #24
90021d5c:	9111      	str	r1, [sp, #68]	; 0x44
90021d5e:	e703      	b.n	90021b68 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
90021d60:	f8b8 1000 	ldrh.w	r1, [r8]
90021d64:	43d2      	mvns	r2, r2
90021d66:	ea4f 2c21 	mov.w	ip, r1, asr #8
90021d6a:	fa5f fe82 	uxtb.w	lr, r2
90021d6e:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
90021d72:	10c8      	asrs	r0, r1, #3
90021d74:	00ca      	lsls	r2, r1, #3
90021d76:	fb0c fc0e 	mul.w	ip, ip, lr
90021d7a:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
90021d7e:	b2d2      	uxtb	r2, r2
90021d80:	f10c 0101 	add.w	r1, ip, #1
90021d84:	fb00 f00e 	mul.w	r0, r0, lr
90021d88:	fb02 f20e 	mul.w	r2, r2, lr
90021d8c:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
90021d90:	0c39      	lsrs	r1, r7, #16
90021d92:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
90021d96:	490f      	ldr	r1, [pc, #60]	; (90021dd4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x750>)
90021d98:	fa5f fc8c 	uxtb.w	ip, ip
90021d9c:	ea01 2c0c 	and.w	ip, r1, ip, lsl #8
90021da0:	1c41      	adds	r1, r0, #1
90021da2:	eb01 2010 	add.w	r0, r1, r0, lsr #8
90021da6:	1c51      	adds	r1, r2, #1
90021da8:	eb03 2010 	add.w	r0, r3, r0, lsr #8
90021dac:	eb01 2212 	add.w	r2, r1, r2, lsr #8
90021db0:	00c0      	lsls	r0, r0, #3
90021db2:	eb07 2712 	add.w	r7, r7, r2, lsr #8
90021db6:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
90021dba:	f3c7 07c4 	ubfx	r7, r7, #3, #5
90021dbe:	ea4c 0c00 	orr.w	ip, ip, r0
90021dc2:	ea47 0c0c 	orr.w	ip, r7, ip
90021dc6:	f8a8 c000 	strh.w	ip, [r8]
90021dca:	e7b7      	b.n	90021d3c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6b8>
90021dcc:	b01b      	add	sp, #108	; 0x6c
90021dce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90021dd2:	bf00      	nop
90021dd4:	fffff800 	.word	0xfffff800

90021dd8 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh>:
90021dd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
90021ddc:	e9dd 050a 	ldrd	r0, r5, [sp, #40]	; 0x28
90021de0:	f9bd 8020 	ldrsh.w	r8, [sp, #32]
90021de4:	2d00      	cmp	r5, #0
90021de6:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
90021dea:	f89d 7030 	ldrb.w	r7, [sp, #48]	; 0x30
90021dee:	fb05 0e03 	mla	lr, r5, r3, r0
90021df2:	f89d c034 	ldrb.w	ip, [sp, #52]	; 0x34
90021df6:	f2c0 808c 	blt.w	90021f12 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x13a>
90021dfa:	45a9      	cmp	r9, r5
90021dfc:	f340 8089 	ble.w	90021f12 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x13a>
90021e00:	2800      	cmp	r0, #0
90021e02:	f2c0 8084 	blt.w	90021f0e <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x136>
90021e06:	4580      	cmp	r8, r0
90021e08:	f340 8081 	ble.w	90021f0e <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x136>
90021e0c:	ea4f 045e 	mov.w	r4, lr, lsr #1
90021e10:	f01e 0f01 	tst.w	lr, #1
90021e14:	5d16      	ldrb	r6, [r2, r4]
90021e16:	bf0c      	ite	eq
90021e18:	f006 060f 	andeq.w	r6, r6, #15
90021e1c:	1136      	asrne	r6, r6, #4
90021e1e:	eb06 1606 	add.w	r6, r6, r6, lsl #4
90021e22:	b2f6      	uxtb	r6, r6
90021e24:	1c44      	adds	r4, r0, #1
90021e26:	d477      	bmi.n	90021f18 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x140>
90021e28:	45a0      	cmp	r8, r4
90021e2a:	dd75      	ble.n	90021f18 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x140>
90021e2c:	2f00      	cmp	r7, #0
90021e2e:	d075      	beq.n	90021f1c <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x144>
90021e30:	f10e 0a01 	add.w	sl, lr, #1
90021e34:	ea4f 045a 	mov.w	r4, sl, lsr #1
90021e38:	f01a 0f01 	tst.w	sl, #1
90021e3c:	5d14      	ldrb	r4, [r2, r4]
90021e3e:	bf0c      	ite	eq
90021e40:	f004 040f 	andeq.w	r4, r4, #15
90021e44:	1124      	asrne	r4, r4, #4
90021e46:	eb04 1404 	add.w	r4, r4, r4, lsl #4
90021e4a:	b2e4      	uxtb	r4, r4
90021e4c:	3501      	adds	r5, #1
90021e4e:	d469      	bmi.n	90021f24 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x14c>
90021e50:	45a9      	cmp	r9, r5
90021e52:	dd67      	ble.n	90021f24 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x14c>
90021e54:	f1bc 0f00 	cmp.w	ip, #0
90021e58:	d067      	beq.n	90021f2a <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x152>
90021e5a:	2800      	cmp	r0, #0
90021e5c:	db60      	blt.n	90021f20 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x148>
90021e5e:	4580      	cmp	r8, r0
90021e60:	dd5e      	ble.n	90021f20 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x148>
90021e62:	eb03 090e 	add.w	r9, r3, lr
90021e66:	ea4f 0559 	mov.w	r5, r9, lsr #1
90021e6a:	f019 0f01 	tst.w	r9, #1
90021e6e:	5d55      	ldrb	r5, [r2, r5]
90021e70:	bf0c      	ite	eq
90021e72:	f005 050f 	andeq.w	r5, r5, #15
90021e76:	112d      	asrne	r5, r5, #4
90021e78:	eb05 1505 	add.w	r5, r5, r5, lsl #4
90021e7c:	b2ed      	uxtb	r5, r5
90021e7e:	3001      	adds	r0, #1
90021e80:	d456      	bmi.n	90021f30 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x158>
90021e82:	4580      	cmp	r8, r0
90021e84:	dd54      	ble.n	90021f30 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x158>
90021e86:	2f00      	cmp	r7, #0
90021e88:	d054      	beq.n	90021f34 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x15c>
90021e8a:	3301      	adds	r3, #1
90021e8c:	449e      	add	lr, r3
90021e8e:	ea4f 035e 	mov.w	r3, lr, lsr #1
90021e92:	f01e 0f01 	tst.w	lr, #1
90021e96:	5cd0      	ldrb	r0, [r2, r3]
90021e98:	bf0c      	ite	eq
90021e9a:	f000 000f 	andeq.w	r0, r0, #15
90021e9e:	1100      	asrne	r0, r0, #4
90021ea0:	eb00 1000 	add.w	r0, r0, r0, lsl #4
90021ea4:	b2c3      	uxtb	r3, r0
90021ea6:	b2ba      	uxth	r2, r7
90021ea8:	fa1f fc8c 	uxth.w	ip, ip
90021eac:	fb02 f00c 	mul.w	r0, r2, ip
90021eb0:	0112      	lsls	r2, r2, #4
90021eb2:	ebc0 1c0c 	rsb	ip, r0, ip, lsl #4
90021eb6:	f5c2 7780 	rsb	r7, r2, #256	; 0x100
90021eba:	1a12      	subs	r2, r2, r0
90021ebc:	fa1f fc8c 	uxth.w	ip, ip
90021ec0:	b292      	uxth	r2, r2
90021ec2:	eba7 070c 	sub.w	r7, r7, ip
90021ec6:	4362      	muls	r2, r4
90021ec8:	b2bf      	uxth	r7, r7
90021eca:	fb06 2207 	mla	r2, r6, r7, r2
90021ece:	fb0c 2505 	mla	r5, ip, r5, r2
90021ed2:	fb00 5303 	mla	r3, r0, r3, r5
90021ed6:	f3c3 2307 	ubfx	r3, r3, #8, #8
90021eda:	b1b3      	cbz	r3, 90021f0a <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x132>
90021edc:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
90021ee0:	435a      	muls	r2, r3
90021ee2:	1c53      	adds	r3, r2, #1
90021ee4:	eb03 2312 	add.w	r3, r3, r2, lsr #8
90021ee8:	4a2d      	ldr	r2, [pc, #180]	; (90021fa0 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1c8>)
90021eea:	121b      	asrs	r3, r3, #8
90021eec:	6812      	ldr	r2, [r2, #0]
90021eee:	2bff      	cmp	r3, #255	; 0xff
90021ef0:	ea4f 2612 	mov.w	r6, r2, lsr #8
90021ef4:	d120      	bne.n	90021f38 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x160>
90021ef6:	0950      	lsrs	r0, r2, #5
90021ef8:	4b2a      	ldr	r3, [pc, #168]	; (90021fa4 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1cc>)
90021efa:	f3c2 02c4 	ubfx	r2, r2, #3, #5
90021efe:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
90021f02:	4033      	ands	r3, r6
90021f04:	4318      	orrs	r0, r3
90021f06:	4302      	orrs	r2, r0
90021f08:	800a      	strh	r2, [r1, #0]
90021f0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
90021f0e:	2600      	movs	r6, #0
90021f10:	e788      	b.n	90021e24 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x4c>
90021f12:	2400      	movs	r4, #0
90021f14:	4626      	mov	r6, r4
90021f16:	e799      	b.n	90021e4c <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x74>
90021f18:	2400      	movs	r4, #0
90021f1a:	e797      	b.n	90021e4c <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x74>
90021f1c:	463c      	mov	r4, r7
90021f1e:	e795      	b.n	90021e4c <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x74>
90021f20:	2500      	movs	r5, #0
90021f22:	e7ac      	b.n	90021e7e <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xa6>
90021f24:	2300      	movs	r3, #0
90021f26:	461d      	mov	r5, r3
90021f28:	e7bd      	b.n	90021ea6 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xce>
90021f2a:	4663      	mov	r3, ip
90021f2c:	4665      	mov	r5, ip
90021f2e:	e7ba      	b.n	90021ea6 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xce>
90021f30:	2300      	movs	r3, #0
90021f32:	e7b8      	b.n	90021ea6 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xce>
90021f34:	463b      	mov	r3, r7
90021f36:	e7b6      	b.n	90021ea6 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xce>
90021f38:	880d      	ldrh	r5, [r1, #0]
90021f3a:	b29f      	uxth	r7, r3
90021f3c:	f3c2 4007 	ubfx	r0, r2, #16, #8
90021f40:	43db      	mvns	r3, r3
90021f42:	122c      	asrs	r4, r5, #8
90021f44:	fb10 f007 	smulbb	r0, r0, r7
90021f48:	b2db      	uxtb	r3, r3
90021f4a:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
90021f4e:	b2f6      	uxtb	r6, r6
90021f50:	b2d2      	uxtb	r2, r2
90021f52:	fb04 0403 	mla	r4, r4, r3, r0
90021f56:	10e8      	asrs	r0, r5, #3
90021f58:	fb12 f207 	smulbb	r2, r2, r7
90021f5c:	00ed      	lsls	r5, r5, #3
90021f5e:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
90021f62:	b2a4      	uxth	r4, r4
90021f64:	fb16 f607 	smulbb	r6, r6, r7
90021f68:	b2ed      	uxtb	r5, r5
90021f6a:	fb00 6603 	mla	r6, r0, r3, r6
90021f6e:	fb05 2303 	mla	r3, r5, r3, r2
90021f72:	b2b0      	uxth	r0, r6
90021f74:	b29a      	uxth	r2, r3
90021f76:	1c63      	adds	r3, r4, #1
90021f78:	eb03 2414 	add.w	r4, r3, r4, lsr #8
90021f7c:	1c53      	adds	r3, r2, #1
90021f7e:	eb03 2312 	add.w	r3, r3, r2, lsr #8
90021f82:	1c42      	adds	r2, r0, #1
90021f84:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
90021f88:	eb02 2010 	add.w	r0, r2, r0, lsr #8
90021f8c:	f3c3 23c4 	ubfx	r3, r3, #11, #5
90021f90:	0940      	lsrs	r0, r0, #5
90021f92:	4323      	orrs	r3, r4
90021f94:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
90021f98:	4303      	orrs	r3, r0
90021f9a:	800b      	strh	r3, [r1, #0]
90021f9c:	e7b5      	b.n	90021f0a <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x132>
90021f9e:	bf00      	nop
90021fa0:	2402626c 	.word	0x2402626c
90021fa4:	00fff800 	.word	0x00fff800

90021fa8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
90021fa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90021fac:	b097      	sub	sp, #92	; 0x5c
90021fae:	9214      	str	r2, [sp, #80]	; 0x50
90021fb0:	9309      	str	r3, [sp, #36]	; 0x24
90021fb2:	9a25      	ldr	r2, [sp, #148]	; 0x94
90021fb4:	f89d 30a4 	ldrb.w	r3, [sp, #164]	; 0xa4
90021fb8:	9015      	str	r0, [sp, #84]	; 0x54
90021fba:	910d      	str	r1, [sp, #52]	; 0x34
90021fbc:	6850      	ldr	r0, [r2, #4]
90021fbe:	930f      	str	r3, [sp, #60]	; 0x3c
90021fc0:	6812      	ldr	r2, [r2, #0]
90021fc2:	e9dd 1326 	ldrd	r1, r3, [sp, #152]	; 0x98
90021fc6:	e9dd 4621 	ldrd	r4, r6, [sp, #132]	; 0x84
90021fca:	fb00 1303 	mla	r3, r0, r3, r1
90021fce:	eb02 0943 	add.w	r9, r2, r3, lsl #1
90021fd2:	9b28      	ldr	r3, [sp, #160]	; 0xa0
90021fd4:	689b      	ldr	r3, [r3, #8]
90021fd6:	3301      	adds	r3, #1
90021fd8:	f023 0301 	bic.w	r3, r3, #1
90021fdc:	930a      	str	r3, [sp, #40]	; 0x28
90021fde:	9b28      	ldr	r3, [sp, #160]	; 0xa0
90021fe0:	681f      	ldr	r7, [r3, #0]
90021fe2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
90021fe4:	2b00      	cmp	r3, #0
90021fe6:	dc03      	bgt.n	90021ff0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
90021fe8:	9b14      	ldr	r3, [sp, #80]	; 0x50
90021fea:	2b00      	cmp	r3, #0
90021fec:	f340 8289 	ble.w	90022502 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x55a>
90021ff0:	9b28      	ldr	r3, [sp, #160]	; 0xa0
90021ff2:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
90021ff6:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
90021ffa:	1e48      	subs	r0, r1, #1
90021ffc:	f102 3cff 	add.w	ip, r2, #4294967295
90022000:	9b09      	ldr	r3, [sp, #36]	; 0x24
90022002:	2b00      	cmp	r3, #0
90022004:	f340 80c5 	ble.w	90022192 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
90022008:	ea5f 4e24 	movs.w	lr, r4, asr #16
9002200c:	ea4f 4326 	mov.w	r3, r6, asr #16
90022010:	d406      	bmi.n	90022020 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
90022012:	4586      	cmp	lr, r0
90022014:	da04      	bge.n	90022020 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
90022016:	2b00      	cmp	r3, #0
90022018:	db02      	blt.n	90022020 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
9002201a:	4563      	cmp	r3, ip
9002201c:	f2c0 80ba 	blt.w	90022194 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ec>
90022020:	f11e 0e01 	adds.w	lr, lr, #1
90022024:	f100 80ab 	bmi.w	9002217e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d6>
90022028:	4571      	cmp	r1, lr
9002202a:	f2c0 80a8 	blt.w	9002217e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d6>
9002202e:	3301      	adds	r3, #1
90022030:	f100 80a5 	bmi.w	9002217e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d6>
90022034:	429a      	cmp	r2, r3
90022036:	f2c0 80a2 	blt.w	9002217e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d6>
9002203a:	9b09      	ldr	r3, [sp, #36]	; 0x24
9002203c:	46c8      	mov	r8, r9
9002203e:	f9bd a028 	ldrsh.w	sl, [sp, #40]	; 0x28
90022042:	930e      	str	r3, [sp, #56]	; 0x38
90022044:	9b0e      	ldr	r3, [sp, #56]	; 0x38
90022046:	2b00      	cmp	r3, #0
90022048:	f340 80c4 	ble.w	900221d4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22c>
9002204c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
9002204e:	1430      	asrs	r0, r6, #16
90022050:	f3c4 3203 	ubfx	r2, r4, #12, #4
90022054:	f3c6 3103 	ubfx	r1, r6, #12, #4
90022058:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
9002205c:	1423      	asrs	r3, r4, #16
9002205e:	f100 814f 	bmi.w	90022300 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
90022062:	f10c 3bff 	add.w	fp, ip, #4294967295
90022066:	455b      	cmp	r3, fp
90022068:	f280 814a 	bge.w	90022300 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
9002206c:	2800      	cmp	r0, #0
9002206e:	f2c0 8147 	blt.w	90022300 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
90022072:	f10e 3bff 	add.w	fp, lr, #4294967295
90022076:	4558      	cmp	r0, fp
90022078:	f280 8142 	bge.w	90022300 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
9002207c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
9002207e:	fb00 3305 	mla	r3, r0, r5, r3
90022082:	0858      	lsrs	r0, r3, #1
90022084:	07dd      	lsls	r5, r3, #31
90022086:	f817 c000 	ldrb.w	ip, [r7, r0]
9002208a:	bf54      	ite	pl
9002208c:	f00c 0c0f 	andpl.w	ip, ip, #15
90022090:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
90022094:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
90022098:	fa5f fc8c 	uxtb.w	ip, ip
9002209c:	2a00      	cmp	r2, #0
9002209e:	f000 80dd 	beq.w	9002225c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b4>
900220a2:	1c58      	adds	r0, r3, #1
900220a4:	ea4f 0e50 	mov.w	lr, r0, lsr #1
900220a8:	07c0      	lsls	r0, r0, #31
900220aa:	f817 e00e 	ldrb.w	lr, [r7, lr]
900220ae:	bf54      	ite	pl
900220b0:	f00e 0e0f 	andpl.w	lr, lr, #15
900220b4:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
900220b8:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
900220bc:	fa5f f08e 	uxtb.w	r0, lr
900220c0:	9010      	str	r0, [sp, #64]	; 0x40
900220c2:	b1d9      	cbz	r1, 900220fc <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
900220c4:	4453      	add	r3, sl
900220c6:	0858      	lsrs	r0, r3, #1
900220c8:	07dd      	lsls	r5, r3, #31
900220ca:	f103 0301 	add.w	r3, r3, #1
900220ce:	5c38      	ldrb	r0, [r7, r0]
900220d0:	bf54      	ite	pl
900220d2:	f000 000f 	andpl.w	r0, r0, #15
900220d6:	1100      	asrmi	r0, r0, #4
900220d8:	07dd      	lsls	r5, r3, #31
900220da:	eb00 1000 	add.w	r0, r0, r0, lsl #4
900220de:	b2c0      	uxtb	r0, r0
900220e0:	900b      	str	r0, [sp, #44]	; 0x2c
900220e2:	ea4f 0053 	mov.w	r0, r3, lsr #1
900220e6:	f817 e000 	ldrb.w	lr, [r7, r0]
900220ea:	bf54      	ite	pl
900220ec:	f00e 030f 	andpl.w	r3, lr, #15
900220f0:	ea4f 132e 	movmi.w	r3, lr, asr #4
900220f4:	eb03 1303 	add.w	r3, r3, r3, lsl #4
900220f8:	b2db      	uxtb	r3, r3
900220fa:	9311      	str	r3, [sp, #68]	; 0x44
900220fc:	b292      	uxth	r2, r2
900220fe:	9d10      	ldr	r5, [sp, #64]	; 0x40
90022100:	b289      	uxth	r1, r1
90022102:	fb02 f301 	mul.w	r3, r2, r1
90022106:	0112      	lsls	r2, r2, #4
90022108:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
9002210c:	f5c2 7080 	rsb	r0, r2, #256	; 0x100
90022110:	1ad2      	subs	r2, r2, r3
90022112:	b289      	uxth	r1, r1
90022114:	b292      	uxth	r2, r2
90022116:	1a40      	subs	r0, r0, r1
90022118:	436a      	muls	r2, r5
9002211a:	b280      	uxth	r0, r0
9002211c:	fb0c 2c00 	mla	ip, ip, r0, r2
90022120:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
90022122:	fb01 c102 	mla	r1, r1, r2, ip
90022126:	9a11      	ldr	r2, [sp, #68]	; 0x44
90022128:	fb03 1302 	mla	r3, r3, r2, r1
9002212c:	f3c3 2307 	ubfx	r3, r3, #8, #8
90022130:	b1db      	cbz	r3, 9002216a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
90022132:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
90022134:	4353      	muls	r3, r2
90022136:	1c5a      	adds	r2, r3, #1
90022138:	eb02 2313 	add.w	r3, r2, r3, lsr #8
9002213c:	4ac6      	ldr	r2, [pc, #792]	; (90022458 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>)
9002213e:	121b      	asrs	r3, r3, #8
90022140:	6812      	ldr	r2, [r2, #0]
90022142:	2bff      	cmp	r3, #255	; 0xff
90022144:	ea4f 2c12 	mov.w	ip, r2, lsr #8
90022148:	f040 8099 	bne.w	9002227e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d6>
9002214c:	0953      	lsrs	r3, r2, #5
9002214e:	f42c 6cff 	bic.w	ip, ip, #2040	; 0x7f8
90022152:	f3c2 02c4 	ubfx	r2, r2, #3, #5
90022156:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
9002215a:	f02c 0c07 	bic.w	ip, ip, #7
9002215e:	ea43 0c0c 	orr.w	ip, r3, ip
90022162:	ea4c 0202 	orr.w	r2, ip, r2
90022166:	f8a8 2000 	strh.w	r2, [r8]
9002216a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
9002216c:	f108 0802 	add.w	r8, r8, #2
90022170:	441c      	add	r4, r3
90022172:	9b24      	ldr	r3, [sp, #144]	; 0x90
90022174:	441e      	add	r6, r3
90022176:	9b0e      	ldr	r3, [sp, #56]	; 0x38
90022178:	3b01      	subs	r3, #1
9002217a:	930e      	str	r3, [sp, #56]	; 0x38
9002217c:	e762      	b.n	90022044 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
9002217e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
90022180:	f109 0902 	add.w	r9, r9, #2
90022184:	441c      	add	r4, r3
90022186:	9b24      	ldr	r3, [sp, #144]	; 0x90
90022188:	441e      	add	r6, r3
9002218a:	9b09      	ldr	r3, [sp, #36]	; 0x24
9002218c:	3b01      	subs	r3, #1
9002218e:	9309      	str	r3, [sp, #36]	; 0x24
90022190:	e736      	b.n	90022000 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
90022192:	d024      	beq.n	900221de <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
90022194:	9b09      	ldr	r3, [sp, #36]	; 0x24
90022196:	9823      	ldr	r0, [sp, #140]	; 0x8c
90022198:	3b01      	subs	r3, #1
9002219a:	fb00 4003 	mla	r0, r0, r3, r4
9002219e:	1400      	asrs	r0, r0, #16
900221a0:	f53f af4b 	bmi.w	9002203a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
900221a4:	3901      	subs	r1, #1
900221a6:	4288      	cmp	r0, r1
900221a8:	f6bf af47 	bge.w	9002203a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
900221ac:	9924      	ldr	r1, [sp, #144]	; 0x90
900221ae:	fb01 6303 	mla	r3, r1, r3, r6
900221b2:	141b      	asrs	r3, r3, #16
900221b4:	f53f af41 	bmi.w	9002203a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
900221b8:	3a01      	subs	r2, #1
900221ba:	4293      	cmp	r3, r2
900221bc:	f6bf af3d 	bge.w	9002203a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
900221c0:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
900221c4:	46c8      	mov	r8, r9
900221c6:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
900221ca:	930e      	str	r3, [sp, #56]	; 0x38
900221cc:	f1bb 0f00 	cmp.w	fp, #0
900221d0:	f300 80b7 	bgt.w	90022342 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39a>
900221d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
900221d6:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
900221da:	eb09 0945 	add.w	r9, r9, r5, lsl #1
900221de:	9b0d      	ldr	r3, [sp, #52]	; 0x34
900221e0:	2b00      	cmp	r3, #0
900221e2:	f340 818e 	ble.w	90022502 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x55a>
900221e6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
900221ea:	9b20      	ldr	r3, [sp, #128]	; 0x80
900221ec:	ee30 0a04 	vadd.f32	s0, s0, s8
900221f0:	ee70 0aa4 	vadd.f32	s1, s1, s9
900221f4:	eef0 6a62 	vmov.f32	s13, s5
900221f8:	eec7 7a00 	vdiv.f32	s15, s14, s0
900221fc:	ee31 1a05 	vadd.f32	s2, s2, s10
90022200:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
90022204:	ee16 4a90 	vmov	r4, s13
90022208:	eef0 6a43 	vmov.f32	s13, s6
9002220c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
90022210:	ee16 6a90 	vmov	r6, s13
90022214:	ee20 7aa7 	vmul.f32	s14, s1, s15
90022218:	ee61 7a27 	vmul.f32	s15, s2, s15
9002221c:	ee77 2a62 	vsub.f32	s5, s14, s5
90022220:	ee37 3ac3 	vsub.f32	s6, s15, s6
90022224:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
90022228:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
9002222c:	ee12 2a90 	vmov	r2, s5
90022230:	eef0 2a47 	vmov.f32	s5, s14
90022234:	fb92 f3f3 	sdiv	r3, r2, r3
90022238:	ee13 2a10 	vmov	r2, s6
9002223c:	9323      	str	r3, [sp, #140]	; 0x8c
9002223e:	9b20      	ldr	r3, [sp, #128]	; 0x80
90022240:	eeb0 3a67 	vmov.f32	s6, s15
90022244:	fb92 f3f3 	sdiv	r3, r2, r3
90022248:	9324      	str	r3, [sp, #144]	; 0x90
9002224a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
9002224c:	9a14      	ldr	r2, [sp, #80]	; 0x50
9002224e:	3b01      	subs	r3, #1
90022250:	930d      	str	r3, [sp, #52]	; 0x34
90022252:	9b20      	ldr	r3, [sp, #128]	; 0x80
90022254:	bf08      	it	eq
90022256:	4613      	moveq	r3, r2
90022258:	9309      	str	r3, [sp, #36]	; 0x24
9002225a:	e6c2      	b.n	90021fe2 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
9002225c:	2900      	cmp	r1, #0
9002225e:	f43f af4d 	beq.w	900220fc <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
90022262:	eb0a 0003 	add.w	r0, sl, r3
90022266:	0843      	lsrs	r3, r0, #1
90022268:	07c0      	lsls	r0, r0, #31
9002226a:	5cfb      	ldrb	r3, [r7, r3]
9002226c:	bf54      	ite	pl
9002226e:	f003 030f 	andpl.w	r3, r3, #15
90022272:	111b      	asrmi	r3, r3, #4
90022274:	eb03 1303 	add.w	r3, r3, r3, lsl #4
90022278:	b2db      	uxtb	r3, r3
9002227a:	930b      	str	r3, [sp, #44]	; 0x2c
9002227c:	e73e      	b.n	900220fc <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
9002227e:	f8b8 e000 	ldrh.w	lr, [r8]
90022282:	fa1f fb83 	uxth.w	fp, r3
90022286:	f3c2 4107 	ubfx	r1, r2, #16, #8
9002228a:	43db      	mvns	r3, r3
9002228c:	ea4f 202e 	mov.w	r0, lr, asr #8
90022290:	fb11 f10b 	smulbb	r1, r1, fp
90022294:	b2db      	uxtb	r3, r3
90022296:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
9002229a:	fa5f fc8c 	uxtb.w	ip, ip
9002229e:	b2d2      	uxtb	r2, r2
900222a0:	fb00 1003 	mla	r0, r0, r3, r1
900222a4:	ea4f 01ee 	mov.w	r1, lr, asr #3
900222a8:	fb1c fc0b 	smulbb	ip, ip, fp
900222ac:	ea4f 0ece 	mov.w	lr, lr, lsl #3
900222b0:	b280      	uxth	r0, r0
900222b2:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
900222b6:	fb12 fb0b 	smulbb	fp, r2, fp
900222ba:	fa5f fe8e 	uxtb.w	lr, lr
900222be:	fb01 cc03 	mla	ip, r1, r3, ip
900222c2:	fb0e bb03 	mla	fp, lr, r3, fp
900222c6:	1c43      	adds	r3, r0, #1
900222c8:	fa1f fc8c 	uxth.w	ip, ip
900222cc:	fa1f fb8b 	uxth.w	fp, fp
900222d0:	eb03 2010 	add.w	r0, r3, r0, lsr #8
900222d4:	f10c 0101 	add.w	r1, ip, #1
900222d8:	f400 4378 	and.w	r3, r0, #63488	; 0xf800
900222dc:	f10b 0001 	add.w	r0, fp, #1
900222e0:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
900222e4:	eb00 201b 	add.w	r0, r0, fp, lsr #8
900222e8:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
900222ec:	f3c0 20c4 	ubfx	r0, r0, #11, #5
900222f0:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
900222f4:	4318      	orrs	r0, r3
900222f6:	ea40 000c 	orr.w	r0, r0, ip
900222fa:	f8a8 0000 	strh.w	r0, [r8]
900222fe:	e734      	b.n	9002216a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
90022300:	f113 0b01 	adds.w	fp, r3, #1
90022304:	f53f af31 	bmi.w	9002216a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
90022308:	45dc      	cmp	ip, fp
9002230a:	f6ff af2e 	blt.w	9002216a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
9002230e:	f110 0b01 	adds.w	fp, r0, #1
90022312:	f53f af2a 	bmi.w	9002216a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
90022316:	45de      	cmp	lr, fp
90022318:	f6ff af27 	blt.w	9002216a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
9002231c:	9302      	str	r3, [sp, #8]
9002231e:	fa0f f38e 	sxth.w	r3, lr
90022322:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
90022324:	9301      	str	r3, [sp, #4]
90022326:	fa0f f38c 	sxth.w	r3, ip
9002232a:	e9cd 0203 	strd	r0, r2, [sp, #12]
9002232e:	e9cd 1505 	strd	r1, r5, [sp, #20]
90022332:	9300      	str	r3, [sp, #0]
90022334:	463a      	mov	r2, r7
90022336:	4653      	mov	r3, sl
90022338:	4641      	mov	r1, r8
9002233a:	9815      	ldr	r0, [sp, #84]	; 0x54
9002233c:	f7ff fd4c 	bl	90021dd8 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh>
90022340:	e713      	b.n	9002216a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
90022342:	1422      	asrs	r2, r4, #16
90022344:	9d0a      	ldr	r5, [sp, #40]	; 0x28
90022346:	1433      	asrs	r3, r6, #16
90022348:	f3c4 3103 	ubfx	r1, r4, #12, #4
9002234c:	f3c6 3003 	ubfx	r0, r6, #12, #4
90022350:	fb05 2303 	mla	r3, r5, r3, r2
90022354:	085a      	lsrs	r2, r3, #1
90022356:	07dd      	lsls	r5, r3, #31
90022358:	5cba      	ldrb	r2, [r7, r2]
9002235a:	bf54      	ite	pl
9002235c:	f002 020f 	andpl.w	r2, r2, #15
90022360:	1112      	asrmi	r2, r2, #4
90022362:	eb02 1202 	add.w	r2, r2, r2, lsl #4
90022366:	b2d2      	uxtb	r2, r2
90022368:	2900      	cmp	r1, #0
9002236a:	d077      	beq.n	9002245c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
9002236c:	f103 0e01 	add.w	lr, r3, #1
90022370:	ea4f 0c5e 	mov.w	ip, lr, lsr #1
90022374:	f01e 0f01 	tst.w	lr, #1
90022378:	f817 c00c 	ldrb.w	ip, [r7, ip]
9002237c:	bf0c      	ite	eq
9002237e:	f00c 0c0f 	andeq.w	ip, ip, #15
90022382:	ea4f 1c2c 	movne.w	ip, ip, asr #4
90022386:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
9002238a:	fa5f f58c 	uxtb.w	r5, ip
9002238e:	9512      	str	r5, [sp, #72]	; 0x48
90022390:	b308      	cbz	r0, 900223d6 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42e>
90022392:	9d0e      	ldr	r5, [sp, #56]	; 0x38
90022394:	442b      	add	r3, r5
90022396:	ea4f 0c53 	mov.w	ip, r3, lsr #1
9002239a:	07dd      	lsls	r5, r3, #31
9002239c:	f103 0301 	add.w	r3, r3, #1
900223a0:	f817 c00c 	ldrb.w	ip, [r7, ip]
900223a4:	bf54      	ite	pl
900223a6:	f00c 0c0f 	andpl.w	ip, ip, #15
900223aa:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
900223ae:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
900223b2:	fa5f f58c 	uxtb.w	r5, ip
900223b6:	ea4f 0c53 	mov.w	ip, r3, lsr #1
900223ba:	950c      	str	r5, [sp, #48]	; 0x30
900223bc:	07dd      	lsls	r5, r3, #31
900223be:	f817 c00c 	ldrb.w	ip, [r7, ip]
900223c2:	bf54      	ite	pl
900223c4:	f00c 0c0f 	andpl.w	ip, ip, #15
900223c8:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
900223cc:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
900223d0:	fa5f f38c 	uxtb.w	r3, ip
900223d4:	9313      	str	r3, [sp, #76]	; 0x4c
900223d6:	b289      	uxth	r1, r1
900223d8:	9d12      	ldr	r5, [sp, #72]	; 0x48
900223da:	b280      	uxth	r0, r0
900223dc:	fb01 f300 	mul.w	r3, r1, r0
900223e0:	0109      	lsls	r1, r1, #4
900223e2:	ebc3 1000 	rsb	r0, r3, r0, lsl #4
900223e6:	f5c1 7c80 	rsb	ip, r1, #256	; 0x100
900223ea:	1ac9      	subs	r1, r1, r3
900223ec:	b280      	uxth	r0, r0
900223ee:	b289      	uxth	r1, r1
900223f0:	ebac 0c00 	sub.w	ip, ip, r0
900223f4:	4369      	muls	r1, r5
900223f6:	fa1f fc8c 	uxth.w	ip, ip
900223fa:	fb02 120c 	mla	r2, r2, ip, r1
900223fe:	990c      	ldr	r1, [sp, #48]	; 0x30
90022400:	fb00 2001 	mla	r0, r0, r1, r2
90022404:	9a13      	ldr	r2, [sp, #76]	; 0x4c
90022406:	fb03 0302 	mla	r3, r3, r2, r0
9002240a:	f3c3 2307 	ubfx	r3, r3, #8, #8
9002240e:	b1d3      	cbz	r3, 90022446 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
90022410:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
90022412:	4353      	muls	r3, r2
90022414:	1c5a      	adds	r2, r3, #1
90022416:	eb02 2313 	add.w	r3, r2, r3, lsr #8
9002241a:	4a0f      	ldr	r2, [pc, #60]	; (90022458 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>)
9002241c:	121b      	asrs	r3, r3, #8
9002241e:	6812      	ldr	r2, [r2, #0]
90022420:	2bff      	cmp	r3, #255	; 0xff
90022422:	ea4f 2c12 	mov.w	ip, r2, lsr #8
90022426:	d12d      	bne.n	90022484 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4dc>
90022428:	0953      	lsrs	r3, r2, #5
9002242a:	f42c 6cff 	bic.w	ip, ip, #2040	; 0x7f8
9002242e:	f3c2 02c4 	ubfx	r2, r2, #3, #5
90022432:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
90022436:	f02c 0c07 	bic.w	ip, ip, #7
9002243a:	ea43 0c0c 	orr.w	ip, r3, ip
9002243e:	ea4c 0202 	orr.w	r2, ip, r2
90022442:	f8a8 2000 	strh.w	r2, [r8]
90022446:	9b23      	ldr	r3, [sp, #140]	; 0x8c
90022448:	f108 0802 	add.w	r8, r8, #2
9002244c:	f10b 3bff 	add.w	fp, fp, #4294967295
90022450:	441c      	add	r4, r3
90022452:	9b24      	ldr	r3, [sp, #144]	; 0x90
90022454:	441e      	add	r6, r3
90022456:	e6b9      	b.n	900221cc <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
90022458:	2402626c 	.word	0x2402626c
9002245c:	2800      	cmp	r0, #0
9002245e:	d0ba      	beq.n	900223d6 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42e>
90022460:	9d0e      	ldr	r5, [sp, #56]	; 0x38
90022462:	442b      	add	r3, r5
90022464:	ea4f 0c53 	mov.w	ip, r3, lsr #1
90022468:	07db      	lsls	r3, r3, #31
9002246a:	f817 c00c 	ldrb.w	ip, [r7, ip]
9002246e:	bf54      	ite	pl
90022470:	f00c 0c0f 	andpl.w	ip, ip, #15
90022474:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
90022478:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
9002247c:	fa5f f38c 	uxtb.w	r3, ip
90022480:	930c      	str	r3, [sp, #48]	; 0x30
90022482:	e7a8      	b.n	900223d6 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42e>
90022484:	f8b8 e000 	ldrh.w	lr, [r8]
90022488:	fa1f fa83 	uxth.w	sl, r3
9002248c:	f3c2 4107 	ubfx	r1, r2, #16, #8
90022490:	43db      	mvns	r3, r3
90022492:	ea4f 202e 	mov.w	r0, lr, asr #8
90022496:	fb11 f10a 	smulbb	r1, r1, sl
9002249a:	b2db      	uxtb	r3, r3
9002249c:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
900224a0:	b2d2      	uxtb	r2, r2
900224a2:	fa5f fc8c 	uxtb.w	ip, ip
900224a6:	fb00 1003 	mla	r0, r0, r3, r1
900224aa:	ea4f 01ee 	mov.w	r1, lr, asr #3
900224ae:	fb12 f20a 	smulbb	r2, r2, sl
900224b2:	ea4f 0ece 	mov.w	lr, lr, lsl #3
900224b6:	b280      	uxth	r0, r0
900224b8:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
900224bc:	fb1c fc0a 	smulbb	ip, ip, sl
900224c0:	fa5f fe8e 	uxtb.w	lr, lr
900224c4:	fb0e 2203 	mla	r2, lr, r3, r2
900224c8:	fb01 cc03 	mla	ip, r1, r3, ip
900224cc:	1c43      	adds	r3, r0, #1
900224ce:	b292      	uxth	r2, r2
900224d0:	eb03 2010 	add.w	r0, r3, r0, lsr #8
900224d4:	1c51      	adds	r1, r2, #1
900224d6:	fa1f fc8c 	uxth.w	ip, ip
900224da:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
900224de:	eb01 2112 	add.w	r1, r1, r2, lsr #8
900224e2:	f3c1 21c4 	ubfx	r1, r1, #11, #5
900224e6:	4308      	orrs	r0, r1
900224e8:	f10c 0101 	add.w	r1, ip, #1
900224ec:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
900224f0:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
900224f4:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
900224f8:	ea40 000c 	orr.w	r0, r0, ip
900224fc:	f8a8 0000 	strh.w	r0, [r8]
90022500:	e7a1      	b.n	90022446 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
90022502:	b017      	add	sp, #92	; 0x5c
90022504:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

90022508 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh>:
90022508:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
9002250c:	e9dd 050a 	ldrd	r0, r5, [sp, #40]	; 0x28
90022510:	f9bd 8020 	ldrsh.w	r8, [sp, #32]
90022514:	2d00      	cmp	r5, #0
90022516:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
9002251a:	f89d 7030 	ldrb.w	r7, [sp, #48]	; 0x30
9002251e:	fb05 0e03 	mla	lr, r5, r3, r0
90022522:	f89d c034 	ldrb.w	ip, [sp, #52]	; 0x34
90022526:	f2c0 80b0 	blt.w	9002268a <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x182>
9002252a:	45a9      	cmp	r9, r5
9002252c:	f340 80ad 	ble.w	9002268a <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x182>
90022530:	2800      	cmp	r0, #0
90022532:	f2c0 80a8 	blt.w	90022686 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x17e>
90022536:	4580      	cmp	r8, r0
90022538:	f340 80a5 	ble.w	90022686 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x17e>
9002253c:	ea4f 045e 	mov.w	r4, lr, lsr #1
90022540:	f01e 0f01 	tst.w	lr, #1
90022544:	5d16      	ldrb	r6, [r2, r4]
90022546:	bf0c      	ite	eq
90022548:	f006 060f 	andeq.w	r6, r6, #15
9002254c:	1136      	asrne	r6, r6, #4
9002254e:	eb06 1606 	add.w	r6, r6, r6, lsl #4
90022552:	b2f6      	uxtb	r6, r6
90022554:	1c44      	adds	r4, r0, #1
90022556:	f100 809b 	bmi.w	90022690 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x188>
9002255a:	45a0      	cmp	r8, r4
9002255c:	f340 8098 	ble.w	90022690 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x188>
90022560:	2f00      	cmp	r7, #0
90022562:	f000 8097 	beq.w	90022694 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x18c>
90022566:	f10e 0a01 	add.w	sl, lr, #1
9002256a:	ea4f 045a 	mov.w	r4, sl, lsr #1
9002256e:	f01a 0f01 	tst.w	sl, #1
90022572:	5d14      	ldrb	r4, [r2, r4]
90022574:	bf0c      	ite	eq
90022576:	f004 040f 	andeq.w	r4, r4, #15
9002257a:	1124      	asrne	r4, r4, #4
9002257c:	eb04 1404 	add.w	r4, r4, r4, lsl #4
90022580:	b2e4      	uxtb	r4, r4
90022582:	3501      	adds	r5, #1
90022584:	f100 808a 	bmi.w	9002269c <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x194>
90022588:	45a9      	cmp	r9, r5
9002258a:	f340 8087 	ble.w	9002269c <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x194>
9002258e:	f1bc 0f00 	cmp.w	ip, #0
90022592:	f000 8086 	beq.w	900226a2 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x19a>
90022596:	2800      	cmp	r0, #0
90022598:	db7e      	blt.n	90022698 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x190>
9002259a:	4580      	cmp	r8, r0
9002259c:	dd7c      	ble.n	90022698 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x190>
9002259e:	eb03 090e 	add.w	r9, r3, lr
900225a2:	ea4f 0559 	mov.w	r5, r9, lsr #1
900225a6:	f019 0f01 	tst.w	r9, #1
900225aa:	5d55      	ldrb	r5, [r2, r5]
900225ac:	bf0c      	ite	eq
900225ae:	f005 050f 	andeq.w	r5, r5, #15
900225b2:	112d      	asrne	r5, r5, #4
900225b4:	eb05 1505 	add.w	r5, r5, r5, lsl #4
900225b8:	b2ed      	uxtb	r5, r5
900225ba:	3001      	adds	r0, #1
900225bc:	d474      	bmi.n	900226a8 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a0>
900225be:	4580      	cmp	r8, r0
900225c0:	dd72      	ble.n	900226a8 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a0>
900225c2:	2f00      	cmp	r7, #0
900225c4:	d072      	beq.n	900226ac <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a4>
900225c6:	3301      	adds	r3, #1
900225c8:	449e      	add	lr, r3
900225ca:	ea4f 035e 	mov.w	r3, lr, lsr #1
900225ce:	f01e 0f01 	tst.w	lr, #1
900225d2:	5cd0      	ldrb	r0, [r2, r3]
900225d4:	bf0c      	ite	eq
900225d6:	f000 000f 	andeq.w	r0, r0, #15
900225da:	1100      	asrne	r0, r0, #4
900225dc:	eb00 1000 	add.w	r0, r0, r0, lsl #4
900225e0:	b2c3      	uxtb	r3, r0
900225e2:	b2ba      	uxth	r2, r7
900225e4:	fa1f fc8c 	uxth.w	ip, ip
900225e8:	fb02 f00c 	mul.w	r0, r2, ip
900225ec:	0112      	lsls	r2, r2, #4
900225ee:	ebc0 1c0c 	rsb	ip, r0, ip, lsl #4
900225f2:	f5c2 7780 	rsb	r7, r2, #256	; 0x100
900225f6:	1a12      	subs	r2, r2, r0
900225f8:	fa1f fc8c 	uxth.w	ip, ip
900225fc:	b292      	uxth	r2, r2
900225fe:	eba7 070c 	sub.w	r7, r7, ip
90022602:	4362      	muls	r2, r4
90022604:	b2bf      	uxth	r7, r7
90022606:	fb06 2207 	mla	r2, r6, r7, r2
9002260a:	fb0c 2505 	mla	r5, ip, r5, r2
9002260e:	fb00 5303 	mla	r3, r0, r3, r5
90022612:	f3c3 2307 	ubfx	r3, r3, #8, #8
90022616:	b3a3      	cbz	r3, 90022682 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x17a>
90022618:	4a25      	ldr	r2, [pc, #148]	; (900226b0 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a8>)
9002261a:	880e      	ldrh	r6, [r1, #0]
9002261c:	6815      	ldr	r5, [r2, #0]
9002261e:	b29a      	uxth	r2, r3
90022620:	1234      	asrs	r4, r6, #8
90022622:	43db      	mvns	r3, r3
90022624:	f3c5 4007 	ubfx	r0, r5, #16, #8
90022628:	f3c5 2707 	ubfx	r7, r5, #8, #8
9002262c:	b2db      	uxtb	r3, r3
9002262e:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
90022632:	fb10 f002 	smulbb	r0, r0, r2
90022636:	b2ed      	uxtb	r5, r5
90022638:	fb17 f702 	smulbb	r7, r7, r2
9002263c:	fb04 0403 	mla	r4, r4, r3, r0
90022640:	10f0      	asrs	r0, r6, #3
90022642:	fb15 f202 	smulbb	r2, r5, r2
90022646:	00f6      	lsls	r6, r6, #3
90022648:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
9002264c:	b2a4      	uxth	r4, r4
9002264e:	b2f6      	uxtb	r6, r6
90022650:	fb00 7003 	mla	r0, r0, r3, r7
90022654:	fb06 2303 	mla	r3, r6, r3, r2
90022658:	b280      	uxth	r0, r0
9002265a:	b29a      	uxth	r2, r3
9002265c:	1c63      	adds	r3, r4, #1
9002265e:	eb03 2414 	add.w	r4, r3, r4, lsr #8
90022662:	1c53      	adds	r3, r2, #1
90022664:	eb03 2312 	add.w	r3, r3, r2, lsr #8
90022668:	1c42      	adds	r2, r0, #1
9002266a:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
9002266e:	eb02 2010 	add.w	r0, r2, r0, lsr #8
90022672:	f3c3 23c4 	ubfx	r3, r3, #11, #5
90022676:	0940      	lsrs	r0, r0, #5
90022678:	4323      	orrs	r3, r4
9002267a:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
9002267e:	4303      	orrs	r3, r0
90022680:	800b      	strh	r3, [r1, #0]
90022682:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
90022686:	2600      	movs	r6, #0
90022688:	e764      	b.n	90022554 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x4c>
9002268a:	2400      	movs	r4, #0
9002268c:	4626      	mov	r6, r4
9002268e:	e778      	b.n	90022582 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x7a>
90022690:	2400      	movs	r4, #0
90022692:	e776      	b.n	90022582 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x7a>
90022694:	463c      	mov	r4, r7
90022696:	e774      	b.n	90022582 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x7a>
90022698:	2500      	movs	r5, #0
9002269a:	e78e      	b.n	900225ba <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xb2>
9002269c:	2300      	movs	r3, #0
9002269e:	461d      	mov	r5, r3
900226a0:	e79f      	b.n	900225e2 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xda>
900226a2:	4663      	mov	r3, ip
900226a4:	4665      	mov	r5, ip
900226a6:	e79c      	b.n	900225e2 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xda>
900226a8:	2300      	movs	r3, #0
900226aa:	e79a      	b.n	900225e2 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xda>
900226ac:	463b      	mov	r3, r7
900226ae:	e798      	b.n	900225e2 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xda>
900226b0:	2402626c 	.word	0x2402626c

900226b4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
900226b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
900226b8:	b093      	sub	sp, #76	; 0x4c
900226ba:	461d      	mov	r5, r3
900226bc:	920c      	str	r2, [sp, #48]	; 0x30
900226be:	9a21      	ldr	r2, [sp, #132]	; 0x84
900226c0:	9011      	str	r0, [sp, #68]	; 0x44
900226c2:	9107      	str	r1, [sp, #28]
900226c4:	6850      	ldr	r0, [r2, #4]
900226c6:	6812      	ldr	r2, [r2, #0]
900226c8:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	; 0x88
900226cc:	e9dd 461d 	ldrd	r4, r6, [sp, #116]	; 0x74
900226d0:	fb00 1303 	mla	r3, r0, r3, r1
900226d4:	eb02 0943 	add.w	r9, r2, r3, lsl #1
900226d8:	9b24      	ldr	r3, [sp, #144]	; 0x90
900226da:	689b      	ldr	r3, [r3, #8]
900226dc:	3301      	adds	r3, #1
900226de:	f023 0301 	bic.w	r3, r3, #1
900226e2:	9306      	str	r3, [sp, #24]
900226e4:	9b24      	ldr	r3, [sp, #144]	; 0x90
900226e6:	681f      	ldr	r7, [r3, #0]
900226e8:	9b07      	ldr	r3, [sp, #28]
900226ea:	2b00      	cmp	r3, #0
900226ec:	dc03      	bgt.n	900226f6 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
900226ee:	9b0c      	ldr	r3, [sp, #48]	; 0x30
900226f0:	2b00      	cmp	r3, #0
900226f2:	f340 8267 	ble.w	90022bc4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x510>
900226f6:	9b24      	ldr	r3, [sp, #144]	; 0x90
900226f8:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
900226fc:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
90022700:	1e48      	subs	r0, r1, #1
90022702:	f102 3cff 	add.w	ip, r2, #4294967295
90022706:	2d00      	cmp	r5, #0
90022708:	f340 80b7 	ble.w	9002287a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
9002270c:	ea5f 4e24 	movs.w	lr, r4, asr #16
90022710:	ea4f 4326 	mov.w	r3, r6, asr #16
90022714:	d406      	bmi.n	90022724 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
90022716:	4586      	cmp	lr, r0
90022718:	da04      	bge.n	90022724 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
9002271a:	2b00      	cmp	r3, #0
9002271c:	db02      	blt.n	90022724 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
9002271e:	4563      	cmp	r3, ip
90022720:	f2c0 80ac 	blt.w	9002287c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
90022724:	f11e 0e01 	adds.w	lr, lr, #1
90022728:	f100 809f 	bmi.w	9002286a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
9002272c:	4571      	cmp	r1, lr
9002272e:	f2c0 809c 	blt.w	9002286a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
90022732:	3301      	adds	r3, #1
90022734:	f100 8099 	bmi.w	9002286a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
90022738:	429a      	cmp	r2, r3
9002273a:	f2c0 8096 	blt.w	9002286a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
9002273e:	46c8      	mov	r8, r9
90022740:	f9bd a018 	ldrsh.w	sl, [sp, #24]
90022744:	9509      	str	r5, [sp, #36]	; 0x24
90022746:	9b09      	ldr	r3, [sp, #36]	; 0x24
90022748:	2b00      	cmp	r3, #0
9002274a:	f340 80b5 	ble.w	900228b8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
9002274e:	f3c4 3303 	ubfx	r3, r4, #12, #4
90022752:	1430      	asrs	r0, r6, #16
90022754:	f3c6 3103 	ubfx	r1, r6, #12, #4
90022758:	9308      	str	r3, [sp, #32]
9002275a:	9b24      	ldr	r3, [sp, #144]	; 0x90
9002275c:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
90022760:	1423      	asrs	r3, r4, #16
90022762:	f100 813f 	bmi.w	900229e4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
90022766:	f10c 3bff 	add.w	fp, ip, #4294967295
9002276a:	455b      	cmp	r3, fp
9002276c:	f280 813a 	bge.w	900229e4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
90022770:	2800      	cmp	r0, #0
90022772:	f2c0 8137 	blt.w	900229e4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
90022776:	f10e 3bff 	add.w	fp, lr, #4294967295
9002277a:	4558      	cmp	r0, fp
9002277c:	f280 8132 	bge.w	900229e4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
90022780:	9a06      	ldr	r2, [sp, #24]
90022782:	fb00 3302 	mla	r3, r0, r2, r3
90022786:	0858      	lsrs	r0, r3, #1
90022788:	07da      	lsls	r2, r3, #31
9002278a:	9a08      	ldr	r2, [sp, #32]
9002278c:	f817 c000 	ldrb.w	ip, [r7, r0]
90022790:	bf54      	ite	pl
90022792:	f00c 0c0f 	andpl.w	ip, ip, #15
90022796:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
9002279a:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
9002279e:	fa5f fc8c 	uxtb.w	ip, ip
900227a2:	2a00      	cmp	r2, #0
900227a4:	f000 80cc 	beq.w	90022940 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
900227a8:	1c58      	adds	r0, r3, #1
900227aa:	ea4f 0e50 	mov.w	lr, r0, lsr #1
900227ae:	07c0      	lsls	r0, r0, #31
900227b0:	f817 e00e 	ldrb.w	lr, [r7, lr]
900227b4:	bf54      	ite	pl
900227b6:	f00e 0e0f 	andpl.w	lr, lr, #15
900227ba:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
900227be:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
900227c2:	fa5f fe8e 	uxtb.w	lr, lr
900227c6:	f8cd e034 	str.w	lr, [sp, #52]	; 0x34
900227ca:	b1b9      	cbz	r1, 900227fc <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
900227cc:	4453      	add	r3, sl
900227ce:	0858      	lsrs	r0, r3, #1
900227d0:	07da      	lsls	r2, r3, #31
900227d2:	5c38      	ldrb	r0, [r7, r0]
900227d4:	bf54      	ite	pl
900227d6:	f000 000f 	andpl.w	r0, r0, #15
900227da:	1100      	asrmi	r0, r0, #4
900227dc:	eb00 1000 	add.w	r0, r0, r0, lsl #4
900227e0:	b2c0      	uxtb	r0, r0
900227e2:	900a      	str	r0, [sp, #40]	; 0x28
900227e4:	1c58      	adds	r0, r3, #1
900227e6:	0843      	lsrs	r3, r0, #1
900227e8:	07c2      	lsls	r2, r0, #31
900227ea:	5cfb      	ldrb	r3, [r7, r3]
900227ec:	bf54      	ite	pl
900227ee:	f003 030f 	andpl.w	r3, r3, #15
900227f2:	111b      	asrmi	r3, r3, #4
900227f4:	eb03 1303 	add.w	r3, r3, r3, lsl #4
900227f8:	b2db      	uxtb	r3, r3
900227fa:	930e      	str	r3, [sp, #56]	; 0x38
900227fc:	f8bd 2020 	ldrh.w	r2, [sp, #32]
90022800:	b289      	uxth	r1, r1
90022802:	fb02 f301 	mul.w	r3, r2, r1
90022806:	0112      	lsls	r2, r2, #4
90022808:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
9002280c:	f5c2 7080 	rsb	r0, r2, #256	; 0x100
90022810:	1ad2      	subs	r2, r2, r3
90022812:	b289      	uxth	r1, r1
90022814:	b292      	uxth	r2, r2
90022816:	1a40      	subs	r0, r0, r1
90022818:	fa1f fe80 	uxth.w	lr, r0
9002281c:	980d      	ldr	r0, [sp, #52]	; 0x34
9002281e:	4342      	muls	r2, r0
90022820:	fb0c 2c0e 	mla	ip, ip, lr, r2
90022824:	9a0a      	ldr	r2, [sp, #40]	; 0x28
90022826:	fb01 c102 	mla	r1, r1, r2, ip
9002282a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
9002282c:	fb03 1302 	mla	r3, r3, r2, r1
90022830:	f3c3 2307 	ubfx	r3, r3, #8, #8
90022834:	2bff      	cmp	r3, #255	; 0xff
90022836:	f040 8094 	bne.w	90022962 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ae>
9002283a:	4bbf      	ldr	r3, [pc, #764]	; (90022b38 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x484>)
9002283c:	681a      	ldr	r2, [r3, #0]
9002283e:	4bbf      	ldr	r3, [pc, #764]	; (90022b3c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x488>)
90022840:	0951      	lsrs	r1, r2, #5
90022842:	ea03 2312 	and.w	r3, r3, r2, lsr #8
90022846:	f3c2 02c4 	ubfx	r2, r2, #3, #5
9002284a:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
9002284e:	430b      	orrs	r3, r1
90022850:	4313      	orrs	r3, r2
90022852:	f8a8 3000 	strh.w	r3, [r8]
90022856:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
90022858:	f108 0802 	add.w	r8, r8, #2
9002285c:	441c      	add	r4, r3
9002285e:	9b20      	ldr	r3, [sp, #128]	; 0x80
90022860:	441e      	add	r6, r3
90022862:	9b09      	ldr	r3, [sp, #36]	; 0x24
90022864:	3b01      	subs	r3, #1
90022866:	9309      	str	r3, [sp, #36]	; 0x24
90022868:	e76d      	b.n	90022746 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
9002286a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
9002286c:	3d01      	subs	r5, #1
9002286e:	f109 0902 	add.w	r9, r9, #2
90022872:	441c      	add	r4, r3
90022874:	9b20      	ldr	r3, [sp, #128]	; 0x80
90022876:	441e      	add	r6, r3
90022878:	e745      	b.n	90022706 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
9002287a:	d021      	beq.n	900228c0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20c>
9002287c:	1e6b      	subs	r3, r5, #1
9002287e:	981f      	ldr	r0, [sp, #124]	; 0x7c
90022880:	fb00 4003 	mla	r0, r0, r3, r4
90022884:	1400      	asrs	r0, r0, #16
90022886:	f53f af5a 	bmi.w	9002273e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
9002288a:	3901      	subs	r1, #1
9002288c:	4288      	cmp	r0, r1
9002288e:	f6bf af56 	bge.w	9002273e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
90022892:	9920      	ldr	r1, [sp, #128]	; 0x80
90022894:	fb01 6303 	mla	r3, r1, r3, r6
90022898:	141b      	asrs	r3, r3, #16
9002289a:	f53f af50 	bmi.w	9002273e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
9002289e:	3a01      	subs	r2, #1
900228a0:	4293      	cmp	r3, r2
900228a2:	f6bf af4c 	bge.w	9002273e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
900228a6:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
900228aa:	46a8      	mov	r8, r5
900228ac:	46ce      	mov	lr, r9
900228ae:	9308      	str	r3, [sp, #32]
900228b0:	f1b8 0f00 	cmp.w	r8, #0
900228b4:	f300 80b6 	bgt.w	90022a24 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
900228b8:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
900228bc:	eb09 0945 	add.w	r9, r9, r5, lsl #1
900228c0:	9b07      	ldr	r3, [sp, #28]
900228c2:	2b00      	cmp	r3, #0
900228c4:	f340 817e 	ble.w	90022bc4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x510>
900228c8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
900228cc:	9b1c      	ldr	r3, [sp, #112]	; 0x70
900228ce:	ee30 0a04 	vadd.f32	s0, s0, s8
900228d2:	ee70 0aa4 	vadd.f32	s1, s1, s9
900228d6:	eef0 6a62 	vmov.f32	s13, s5
900228da:	eec7 7a00 	vdiv.f32	s15, s14, s0
900228de:	ee31 1a05 	vadd.f32	s2, s2, s10
900228e2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
900228e6:	ee16 4a90 	vmov	r4, s13
900228ea:	eef0 6a43 	vmov.f32	s13, s6
900228ee:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
900228f2:	ee16 6a90 	vmov	r6, s13
900228f6:	ee20 7aa7 	vmul.f32	s14, s1, s15
900228fa:	ee61 7a27 	vmul.f32	s15, s2, s15
900228fe:	ee77 2a62 	vsub.f32	s5, s14, s5
90022902:	ee37 3ac3 	vsub.f32	s6, s15, s6
90022906:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
9002290a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
9002290e:	ee12 2a90 	vmov	r2, s5
90022912:	eef0 2a47 	vmov.f32	s5, s14
90022916:	fb92 f3f3 	sdiv	r3, r2, r3
9002291a:	ee13 2a10 	vmov	r2, s6
9002291e:	931f      	str	r3, [sp, #124]	; 0x7c
90022920:	9b1c      	ldr	r3, [sp, #112]	; 0x70
90022922:	eeb0 3a67 	vmov.f32	s6, s15
90022926:	fb92 f3f3 	sdiv	r3, r2, r3
9002292a:	9320      	str	r3, [sp, #128]	; 0x80
9002292c:	9b07      	ldr	r3, [sp, #28]
9002292e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
90022930:	3b01      	subs	r3, #1
90022932:	9307      	str	r3, [sp, #28]
90022934:	bf08      	it	eq
90022936:	4615      	moveq	r5, r2
90022938:	9b1c      	ldr	r3, [sp, #112]	; 0x70
9002293a:	bf18      	it	ne
9002293c:	461d      	movne	r5, r3
9002293e:	e6d3      	b.n	900226e8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
90022940:	2900      	cmp	r1, #0
90022942:	f43f af5b 	beq.w	900227fc <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
90022946:	eb0a 0003 	add.w	r0, sl, r3
9002294a:	0843      	lsrs	r3, r0, #1
9002294c:	07c0      	lsls	r0, r0, #31
9002294e:	5cfb      	ldrb	r3, [r7, r3]
90022950:	bf54      	ite	pl
90022952:	f003 030f 	andpl.w	r3, r3, #15
90022956:	111b      	asrmi	r3, r3, #4
90022958:	eb03 1303 	add.w	r3, r3, r3, lsl #4
9002295c:	b2db      	uxtb	r3, r3
9002295e:	930a      	str	r3, [sp, #40]	; 0x28
90022960:	e74c      	b.n	900227fc <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
90022962:	2b00      	cmp	r3, #0
90022964:	f43f af77 	beq.w	90022856 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
90022968:	4a73      	ldr	r2, [pc, #460]	; (90022b38 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x484>)
9002296a:	fa1f fe83 	uxth.w	lr, r3
9002296e:	f8b8 c000 	ldrh.w	ip, [r8]
90022972:	43db      	mvns	r3, r3
90022974:	6810      	ldr	r0, [r2, #0]
90022976:	ea4f 212c 	mov.w	r1, ip, asr #8
9002297a:	f3c0 4207 	ubfx	r2, r0, #16, #8
9002297e:	b2db      	uxtb	r3, r3
90022980:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
90022984:	f3c0 2b07 	ubfx	fp, r0, #8, #8
90022988:	fb12 f20e 	smulbb	r2, r2, lr
9002298c:	b2c0      	uxtb	r0, r0
9002298e:	fb1b fb0e 	smulbb	fp, fp, lr
90022992:	fb01 2103 	mla	r1, r1, r3, r2
90022996:	ea4f 02ec 	mov.w	r2, ip, asr #3
9002299a:	fb10 fe0e 	smulbb	lr, r0, lr
9002299e:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
900229a2:	b289      	uxth	r1, r1
900229a4:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
900229a8:	fa5f fc8c 	uxtb.w	ip, ip
900229ac:	fb02 b203 	mla	r2, r2, r3, fp
900229b0:	1c48      	adds	r0, r1, #1
900229b2:	fb0c e303 	mla	r3, ip, r3, lr
900229b6:	b292      	uxth	r2, r2
900229b8:	b29b      	uxth	r3, r3
900229ba:	eb00 2111 	add.w	r1, r0, r1, lsr #8
900229be:	f102 0b01 	add.w	fp, r2, #1
900229c2:	f401 4078 	and.w	r0, r1, #63488	; 0xf800
900229c6:	1c59      	adds	r1, r3, #1
900229c8:	eb0b 2212 	add.w	r2, fp, r2, lsr #8
900229cc:	eb01 2113 	add.w	r1, r1, r3, lsr #8
900229d0:	0952      	lsrs	r2, r2, #5
900229d2:	f3c1 21c4 	ubfx	r1, r1, #11, #5
900229d6:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
900229da:	4301      	orrs	r1, r0
900229dc:	4311      	orrs	r1, r2
900229de:	f8a8 1000 	strh.w	r1, [r8]
900229e2:	e738      	b.n	90022856 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
900229e4:	f113 0b01 	adds.w	fp, r3, #1
900229e8:	f53f af35 	bmi.w	90022856 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
900229ec:	45dc      	cmp	ip, fp
900229ee:	f6ff af32 	blt.w	90022856 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
900229f2:	f110 0b01 	adds.w	fp, r0, #1
900229f6:	f53f af2e 	bmi.w	90022856 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
900229fa:	45de      	cmp	lr, fp
900229fc:	f6ff af2b 	blt.w	90022856 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
90022a00:	9302      	str	r3, [sp, #8]
90022a02:	fa0f f38e 	sxth.w	r3, lr
90022a06:	9a08      	ldr	r2, [sp, #32]
90022a08:	9301      	str	r3, [sp, #4]
90022a0a:	fa0f f38c 	sxth.w	r3, ip
90022a0e:	9105      	str	r1, [sp, #20]
90022a10:	4641      	mov	r1, r8
90022a12:	9300      	str	r3, [sp, #0]
90022a14:	4653      	mov	r3, sl
90022a16:	e9cd 0203 	strd	r0, r2, [sp, #12]
90022a1a:	463a      	mov	r2, r7
90022a1c:	9811      	ldr	r0, [sp, #68]	; 0x44
90022a1e:	f7ff fd73 	bl	90022508 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh>
90022a22:	e718      	b.n	90022856 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
90022a24:	1422      	asrs	r2, r4, #16
90022a26:	9906      	ldr	r1, [sp, #24]
90022a28:	1433      	asrs	r3, r6, #16
90022a2a:	f3c4 3003 	ubfx	r0, r4, #12, #4
90022a2e:	f3c6 3c03 	ubfx	ip, r6, #12, #4
90022a32:	fb01 2303 	mla	r3, r1, r3, r2
90022a36:	085a      	lsrs	r2, r3, #1
90022a38:	07d9      	lsls	r1, r3, #31
90022a3a:	5cba      	ldrb	r2, [r7, r2]
90022a3c:	bf54      	ite	pl
90022a3e:	f002 020f 	andpl.w	r2, r2, #15
90022a42:	1112      	asrmi	r2, r2, #4
90022a44:	eb02 1202 	add.w	r2, r2, r2, lsl #4
90022a48:	b2d2      	uxtb	r2, r2
90022a4a:	2800      	cmp	r0, #0
90022a4c:	d063      	beq.n	90022b16 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x462>
90022a4e:	f103 0a01 	add.w	sl, r3, #1
90022a52:	ea4f 015a 	mov.w	r1, sl, lsr #1
90022a56:	f01a 0f01 	tst.w	sl, #1
90022a5a:	5c79      	ldrb	r1, [r7, r1]
90022a5c:	bf0c      	ite	eq
90022a5e:	f001 010f 	andeq.w	r1, r1, #15
90022a62:	1109      	asrne	r1, r1, #4
90022a64:	eb01 1101 	add.w	r1, r1, r1, lsl #4
90022a68:	b2c9      	uxtb	r1, r1
90022a6a:	910f      	str	r1, [sp, #60]	; 0x3c
90022a6c:	f1bc 0f00 	cmp.w	ip, #0
90022a70:	d01a      	beq.n	90022aa8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f4>
90022a72:	9908      	ldr	r1, [sp, #32]
90022a74:	440b      	add	r3, r1
90022a76:	0859      	lsrs	r1, r3, #1
90022a78:	f013 0f01 	tst.w	r3, #1
90022a7c:	f103 0301 	add.w	r3, r3, #1
90022a80:	5c79      	ldrb	r1, [r7, r1]
90022a82:	bf0c      	ite	eq
90022a84:	f001 010f 	andeq.w	r1, r1, #15
90022a88:	1109      	asrne	r1, r1, #4
90022a8a:	eb01 1101 	add.w	r1, r1, r1, lsl #4
90022a8e:	b2c9      	uxtb	r1, r1
90022a90:	910b      	str	r1, [sp, #44]	; 0x2c
90022a92:	0859      	lsrs	r1, r3, #1
90022a94:	07db      	lsls	r3, r3, #31
90022a96:	5c79      	ldrb	r1, [r7, r1]
90022a98:	bf54      	ite	pl
90022a9a:	f001 010f 	andpl.w	r1, r1, #15
90022a9e:	1109      	asrmi	r1, r1, #4
90022aa0:	eb01 1101 	add.w	r1, r1, r1, lsl #4
90022aa4:	b2c9      	uxtb	r1, r1
90022aa6:	9110      	str	r1, [sp, #64]	; 0x40
90022aa8:	b280      	uxth	r0, r0
90022aaa:	fa1f fc8c 	uxth.w	ip, ip
90022aae:	fb00 f30c 	mul.w	r3, r0, ip
90022ab2:	0100      	lsls	r0, r0, #4
90022ab4:	ebc3 1c0c 	rsb	ip, r3, ip, lsl #4
90022ab8:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
90022abc:	1ac0      	subs	r0, r0, r3
90022abe:	fa1f fc8c 	uxth.w	ip, ip
90022ac2:	b280      	uxth	r0, r0
90022ac4:	eba1 010c 	sub.w	r1, r1, ip
90022ac8:	fa1f fa81 	uxth.w	sl, r1
90022acc:	990f      	ldr	r1, [sp, #60]	; 0x3c
90022ace:	4348      	muls	r0, r1
90022ad0:	990b      	ldr	r1, [sp, #44]	; 0x2c
90022ad2:	fb02 020a 	mla	r2, r2, sl, r0
90022ad6:	fb0c 2c01 	mla	ip, ip, r1, r2
90022ada:	9a10      	ldr	r2, [sp, #64]	; 0x40
90022adc:	fb03 c302 	mla	r3, r3, r2, ip
90022ae0:	f3c3 2307 	ubfx	r3, r3, #8, #8
90022ae4:	2bff      	cmp	r3, #255	; 0xff
90022ae6:	d12b      	bne.n	90022b40 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48c>
90022ae8:	4b13      	ldr	r3, [pc, #76]	; (90022b38 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x484>)
90022aea:	681a      	ldr	r2, [r3, #0]
90022aec:	4b13      	ldr	r3, [pc, #76]	; (90022b3c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x488>)
90022aee:	0951      	lsrs	r1, r2, #5
90022af0:	ea03 2312 	and.w	r3, r3, r2, lsr #8
90022af4:	f3c2 02c4 	ubfx	r2, r2, #3, #5
90022af8:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
90022afc:	430b      	orrs	r3, r1
90022afe:	4313      	orrs	r3, r2
90022b00:	f8ae 3000 	strh.w	r3, [lr]
90022b04:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
90022b06:	f10e 0e02 	add.w	lr, lr, #2
90022b0a:	f108 38ff 	add.w	r8, r8, #4294967295
90022b0e:	441c      	add	r4, r3
90022b10:	9b20      	ldr	r3, [sp, #128]	; 0x80
90022b12:	441e      	add	r6, r3
90022b14:	e6cc      	b.n	900228b0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fc>
90022b16:	f1bc 0f00 	cmp.w	ip, #0
90022b1a:	d0c5      	beq.n	90022aa8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f4>
90022b1c:	9908      	ldr	r1, [sp, #32]
90022b1e:	440b      	add	r3, r1
90022b20:	0859      	lsrs	r1, r3, #1
90022b22:	07db      	lsls	r3, r3, #31
90022b24:	5c79      	ldrb	r1, [r7, r1]
90022b26:	bf54      	ite	pl
90022b28:	f001 010f 	andpl.w	r1, r1, #15
90022b2c:	1109      	asrmi	r1, r1, #4
90022b2e:	eb01 1101 	add.w	r1, r1, r1, lsl #4
90022b32:	b2c9      	uxtb	r1, r1
90022b34:	910b      	str	r1, [sp, #44]	; 0x2c
90022b36:	e7b7      	b.n	90022aa8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f4>
90022b38:	2402626c 	.word	0x2402626c
90022b3c:	fffff800 	.word	0xfffff800
90022b40:	2b00      	cmp	r3, #0
90022b42:	d0df      	beq.n	90022b04 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x450>
90022b44:	4a21      	ldr	r2, [pc, #132]	; (90022bcc <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x518>)
90022b46:	fa1f fa83 	uxth.w	sl, r3
90022b4a:	f8be c000 	ldrh.w	ip, [lr]
90022b4e:	43db      	mvns	r3, r3
90022b50:	6810      	ldr	r0, [r2, #0]
90022b52:	ea4f 212c 	mov.w	r1, ip, asr #8
90022b56:	f3c0 4207 	ubfx	r2, r0, #16, #8
90022b5a:	b2db      	uxtb	r3, r3
90022b5c:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
90022b60:	f3c0 2b07 	ubfx	fp, r0, #8, #8
90022b64:	fb12 f20a 	smulbb	r2, r2, sl
90022b68:	b2c0      	uxtb	r0, r0
90022b6a:	fb1b fb0a 	smulbb	fp, fp, sl
90022b6e:	fb01 2103 	mla	r1, r1, r3, r2
90022b72:	ea4f 02ec 	mov.w	r2, ip, asr #3
90022b76:	fb10 f00a 	smulbb	r0, r0, sl
90022b7a:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
90022b7e:	b289      	uxth	r1, r1
90022b80:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
90022b84:	fa5f fc8c 	uxtb.w	ip, ip
90022b88:	fb02 b203 	mla	r2, r2, r3, fp
90022b8c:	fb0c 0003 	mla	r0, ip, r3, r0
90022b90:	1c4b      	adds	r3, r1, #1
90022b92:	b292      	uxth	r2, r2
90022b94:	b280      	uxth	r0, r0
90022b96:	eb03 2111 	add.w	r1, r3, r1, lsr #8
90022b9a:	f100 0b01 	add.w	fp, r0, #1
90022b9e:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
90022ba2:	eb0b 2b10 	add.w	fp, fp, r0, lsr #8
90022ba6:	f3cb 2bc4 	ubfx	fp, fp, #11, #5
90022baa:	ea4b 0101 	orr.w	r1, fp, r1
90022bae:	f102 0b01 	add.w	fp, r2, #1
90022bb2:	eb0b 2212 	add.w	r2, fp, r2, lsr #8
90022bb6:	0952      	lsrs	r2, r2, #5
90022bb8:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
90022bbc:	4311      	orrs	r1, r2
90022bbe:	f8ae 1000 	strh.w	r1, [lr]
90022bc2:	e79f      	b.n	90022b04 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x450>
90022bc4:	b013      	add	sp, #76	; 0x4c
90022bc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90022bca:	bf00      	nop
90022bcc:	2402626c 	.word	0x2402626c

90022bd0 <CRC_Lock>:
90022bd0:	4a20      	ldr	r2, [pc, #128]	; (90022c54 <CRC_Lock+0x84>)
90022bd2:	b530      	push	{r4, r5, lr}
90022bd4:	6813      	ldr	r3, [r2, #0]
90022bd6:	f64f 74f0 	movw	r4, #65520	; 0xfff0
90022bda:	f24c 2540 	movw	r5, #49728	; 0xc240
90022bde:	f023 0301 	bic.w	r3, r3, #1
90022be2:	6013      	str	r3, [r2, #0]
90022be4:	4b1c      	ldr	r3, [pc, #112]	; (90022c58 <CRC_Lock+0x88>)
90022be6:	681a      	ldr	r2, [r3, #0]
90022be8:	4022      	ands	r2, r4
90022bea:	42aa      	cmp	r2, r5
90022bec:	d005      	beq.n	90022bfa <CRC_Lock+0x2a>
90022bee:	681b      	ldr	r3, [r3, #0]
90022bf0:	f24c 2270 	movw	r2, #49776	; 0xc270
90022bf4:	4023      	ands	r3, r4
90022bf6:	4293      	cmp	r3, r2
90022bf8:	d124      	bne.n	90022c44 <CRC_Lock+0x74>
90022bfa:	4b18      	ldr	r3, [pc, #96]	; (90022c5c <CRC_Lock+0x8c>)
90022bfc:	681b      	ldr	r3, [r3, #0]
90022bfe:	bb0b      	cbnz	r3, 90022c44 <CRC_Lock+0x74>
90022c00:	4b17      	ldr	r3, [pc, #92]	; (90022c60 <CRC_Lock+0x90>)
90022c02:	681a      	ldr	r2, [r3, #0]
90022c04:	f3c2 020b 	ubfx	r2, r2, #0, #12
90022c08:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
90022c0c:	d00d      	beq.n	90022c2a <CRC_Lock+0x5a>
90022c0e:	681a      	ldr	r2, [r3, #0]
90022c10:	f240 4483 	movw	r4, #1155	; 0x483
90022c14:	f3c2 020b 	ubfx	r2, r2, #0, #12
90022c18:	42a2      	cmp	r2, r4
90022c1a:	d006      	beq.n	90022c2a <CRC_Lock+0x5a>
90022c1c:	681b      	ldr	r3, [r3, #0]
90022c1e:	f240 4285 	movw	r2, #1157	; 0x485
90022c22:	f3c3 030b 	ubfx	r3, r3, #0, #12
90022c26:	4293      	cmp	r3, r2
90022c28:	d10c      	bne.n	90022c44 <CRC_Lock+0x74>
90022c2a:	4b0e      	ldr	r3, [pc, #56]	; (90022c64 <CRC_Lock+0x94>)
90022c2c:	2201      	movs	r2, #1
90022c2e:	601a      	str	r2, [r3, #0]
90022c30:	681a      	ldr	r2, [r3, #0]
90022c32:	2a00      	cmp	r2, #0
90022c34:	d1fc      	bne.n	90022c30 <CRC_Lock+0x60>
90022c36:	4b0c      	ldr	r3, [pc, #48]	; (90022c68 <CRC_Lock+0x98>)
90022c38:	6018      	str	r0, [r3, #0]
90022c3a:	6818      	ldr	r0, [r3, #0]
90022c3c:	1a43      	subs	r3, r0, r1
90022c3e:	4258      	negs	r0, r3
90022c40:	4158      	adcs	r0, r3
90022c42:	bd30      	pop	{r4, r5, pc}
90022c44:	4b09      	ldr	r3, [pc, #36]	; (90022c6c <CRC_Lock+0x9c>)
90022c46:	2201      	movs	r2, #1
90022c48:	601a      	str	r2, [r3, #0]
90022c4a:	681a      	ldr	r2, [r3, #0]
90022c4c:	2a00      	cmp	r2, #0
90022c4e:	d1fc      	bne.n	90022c4a <CRC_Lock+0x7a>
90022c50:	4b07      	ldr	r3, [pc, #28]	; (90022c70 <CRC_Lock+0xa0>)
90022c52:	e7f1      	b.n	90022c38 <CRC_Lock+0x68>
90022c54:	e0002000 	.word	0xe0002000
90022c58:	e000ed00 	.word	0xe000ed00
90022c5c:	e0042000 	.word	0xe0042000
90022c60:	5c001000 	.word	0x5c001000
90022c64:	58024c08 	.word	0x58024c08
90022c68:	58024c00 	.word	0x58024c00
90022c6c:	40023008 	.word	0x40023008
90022c70:	40023000 	.word	0x40023000

90022c74 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>:
90022c74:	6101      	str	r1, [r0, #16]
90022c76:	4770      	bx	lr

90022c78 <_ZN8touchgfx8Gestures4tickEv>:
90022c78:	7b83      	ldrb	r3, [r0, #14]
90022c7a:	b14b      	cbz	r3, 90022c90 <_ZN8touchgfx8Gestures4tickEv+0x18>
90022c7c:	8903      	ldrh	r3, [r0, #8]
90022c7e:	3301      	adds	r3, #1
90022c80:	b29b      	uxth	r3, r3
90022c82:	2b07      	cmp	r3, #7
90022c84:	8103      	strh	r3, [r0, #8]
90022c86:	bf81      	itttt	hi
90022c88:	2300      	movhi	r3, #0
90022c8a:	8143      	strhhi	r3, [r0, #10]
90022c8c:	8183      	strhhi	r3, [r0, #12]
90022c8e:	7383      	strbhi	r3, [r0, #14]
90022c90:	4770      	bx	lr
	...

90022c94 <_ZN8touchgfx8Gestures17registerDragEventEtttt>:
90022c94:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
90022c98:	4698      	mov	r8, r3
90022c9a:	8883      	ldrh	r3, [r0, #4]
90022c9c:	4604      	mov	r4, r0
90022c9e:	4617      	mov	r7, r2
90022ca0:	f8ad 3006 	strh.w	r3, [sp, #6]
90022ca4:	eba8 0303 	sub.w	r3, r8, r3
90022ca8:	4a19      	ldr	r2, [pc, #100]	; (90022d10 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x7c>)
90022caa:	460e      	mov	r6, r1
90022cac:	b21b      	sxth	r3, r3
90022cae:	88c1      	ldrh	r1, [r0, #6]
90022cb0:	9200      	str	r2, [sp, #0]
90022cb2:	2000      	movs	r0, #0
90022cb4:	2b00      	cmp	r3, #0
90022cb6:	8aa2      	ldrh	r2, [r4, #20]
90022cb8:	f8bd 5028 	ldrh.w	r5, [sp, #40]	; 0x28
90022cbc:	bfb8      	it	lt
90022cbe:	425b      	neglt	r3, r3
90022cc0:	f88d 0004 	strb.w	r0, [sp, #4]
90022cc4:	f8ad 1008 	strh.w	r1, [sp, #8]
90022cc8:	b21b      	sxth	r3, r3
90022cca:	f8ad 800a 	strh.w	r8, [sp, #10]
90022cce:	f8ad 500c 	strh.w	r5, [sp, #12]
90022cd2:	4293      	cmp	r3, r2
90022cd4:	dc07      	bgt.n	90022ce6 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x52>
90022cd6:	1a69      	subs	r1, r5, r1
90022cd8:	b209      	sxth	r1, r1
90022cda:	2900      	cmp	r1, #0
90022cdc:	bfb8      	it	lt
90022cde:	4249      	neglt	r1, r1
90022ce0:	b209      	sxth	r1, r1
90022ce2:	428a      	cmp	r2, r1
90022ce4:	da10      	bge.n	90022d08 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x74>
90022ce6:	6920      	ldr	r0, [r4, #16]
90022ce8:	4669      	mov	r1, sp
90022cea:	eba8 0606 	sub.w	r6, r8, r6
90022cee:	1bef      	subs	r7, r5, r7
90022cf0:	6803      	ldr	r3, [r0, #0]
90022cf2:	685b      	ldr	r3, [r3, #4]
90022cf4:	4798      	blx	r3
90022cf6:	2300      	movs	r3, #0
90022cf8:	2001      	movs	r0, #1
90022cfa:	8166      	strh	r6, [r4, #10]
90022cfc:	8123      	strh	r3, [r4, #8]
90022cfe:	81a7      	strh	r7, [r4, #12]
90022d00:	f8a4 8004 	strh.w	r8, [r4, #4]
90022d04:	80e5      	strh	r5, [r4, #6]
90022d06:	73a0      	strb	r0, [r4, #14]
90022d08:	b004      	add	sp, #16
90022d0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
90022d0e:	bf00      	nop
90022d10:	90026d30 	.word	0x90026d30

90022d14 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>:
90022d14:	b5f0      	push	{r4, r5, r6, r7, lr}
90022d16:	461e      	mov	r6, r3
90022d18:	1e4b      	subs	r3, r1, #1
90022d1a:	b085      	sub	sp, #20
90022d1c:	4604      	mov	r4, r0
90022d1e:	2b01      	cmp	r3, #1
90022d20:	460d      	mov	r5, r1
90022d22:	4617      	mov	r7, r2
90022d24:	d84b      	bhi.n	90022dbe <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xaa>
90022d26:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
90022d2a:	1cd3      	adds	r3, r2, #3
90022d2c:	b29b      	uxth	r3, r3
90022d2e:	2b06      	cmp	r3, #6
90022d30:	d916      	bls.n	90022d60 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x4c>
90022d32:	f8df c0a0 	ldr.w	ip, [pc, #160]	; 90022dd4 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
90022d36:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
90022d3a:	f8cd c004 	str.w	ip, [sp, #4]
90022d3e:	f04f 0c00 	mov.w	ip, #0
90022d42:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
90022d46:	6900      	ldr	r0, [r0, #16]
90022d48:	f8ad 100c 	strh.w	r1, [sp, #12]
90022d4c:	a901      	add	r1, sp, #4
90022d4e:	f88d c008 	strb.w	ip, [sp, #8]
90022d52:	f8ad 200a 	strh.w	r2, [sp, #10]
90022d56:	f8ad 300e 	strh.w	r3, [sp, #14]
90022d5a:	6803      	ldr	r3, [r0, #0]
90022d5c:	689b      	ldr	r3, [r3, #8]
90022d5e:	4798      	blx	r3
90022d60:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
90022d64:	1cd3      	adds	r3, r2, #3
90022d66:	b29b      	uxth	r3, r3
90022d68:	2b06      	cmp	r3, #6
90022d6a:	d916      	bls.n	90022d9a <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
90022d6c:	f8df c064 	ldr.w	ip, [pc, #100]	; 90022dd4 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
90022d70:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
90022d74:	f8cd c004 	str.w	ip, [sp, #4]
90022d78:	f04f 0c01 	mov.w	ip, #1
90022d7c:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
90022d80:	6920      	ldr	r0, [r4, #16]
90022d82:	f8ad 100c 	strh.w	r1, [sp, #12]
90022d86:	a901      	add	r1, sp, #4
90022d88:	f88d c008 	strb.w	ip, [sp, #8]
90022d8c:	f8ad 200a 	strh.w	r2, [sp, #10]
90022d90:	f8ad 300e 	strh.w	r3, [sp, #14]
90022d94:	6803      	ldr	r3, [r0, #0]
90022d96:	689b      	ldr	r3, [r3, #8]
90022d98:	4798      	blx	r3
90022d9a:	4b0d      	ldr	r3, [pc, #52]	; (90022dd0 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xbc>)
90022d9c:	a901      	add	r1, sp, #4
90022d9e:	6920      	ldr	r0, [r4, #16]
90022da0:	9301      	str	r3, [sp, #4]
90022da2:	2300      	movs	r3, #0
90022da4:	f88d 5008 	strb.w	r5, [sp, #8]
90022da8:	f8ad 700a 	strh.w	r7, [sp, #10]
90022dac:	f8ad 600c 	strh.w	r6, [sp, #12]
90022db0:	f8ad 300e 	strh.w	r3, [sp, #14]
90022db4:	6803      	ldr	r3, [r0, #0]
90022db6:	681b      	ldr	r3, [r3, #0]
90022db8:	4798      	blx	r3
90022dba:	b005      	add	sp, #20
90022dbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
90022dbe:	2900      	cmp	r1, #0
90022dc0:	d1eb      	bne.n	90022d9a <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
90022dc2:	80a2      	strh	r2, [r4, #4]
90022dc4:	80c6      	strh	r6, [r0, #6]
90022dc6:	60a1      	str	r1, [r4, #8]
90022dc8:	81a1      	strh	r1, [r4, #12]
90022dca:	73a1      	strb	r1, [r4, #14]
90022dcc:	e7e5      	b.n	90022d9a <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
90022dce:	bf00      	nop
90022dd0:	90026d1c 	.word	0x90026d1c
90022dd4:	90026d44 	.word	0x90026d44

90022dd8 <__aeabi_atexit>:
90022dd8:	460b      	mov	r3, r1
90022dda:	4601      	mov	r1, r0
90022ddc:	4618      	mov	r0, r3
90022dde:	f000 b90f 	b.w	90023000 <__cxa_atexit>

90022de2 <_ZdlPvj>:
90022de2:	f000 b812 	b.w	90022e0a <_ZdlPv>

90022de6 <__cxa_guard_acquire>:
90022de6:	6803      	ldr	r3, [r0, #0]
90022de8:	07db      	lsls	r3, r3, #31
90022dea:	d406      	bmi.n	90022dfa <__cxa_guard_acquire+0x14>
90022dec:	7843      	ldrb	r3, [r0, #1]
90022dee:	b103      	cbz	r3, 90022df2 <__cxa_guard_acquire+0xc>
90022df0:	deff      	udf	#255	; 0xff
90022df2:	2301      	movs	r3, #1
90022df4:	7043      	strb	r3, [r0, #1]
90022df6:	4618      	mov	r0, r3
90022df8:	4770      	bx	lr
90022dfa:	2000      	movs	r0, #0
90022dfc:	4770      	bx	lr

90022dfe <__cxa_guard_release>:
90022dfe:	2301      	movs	r3, #1
90022e00:	6003      	str	r3, [r0, #0]
90022e02:	4770      	bx	lr

90022e04 <__cxa_pure_virtual>:
90022e04:	b508      	push	{r3, lr}
90022e06:	f000 f80f 	bl	90022e28 <_ZSt9terminatev>

90022e0a <_ZdlPv>:
90022e0a:	f000 b845 	b.w	90022e98 <free>

90022e0e <_ZN10__cxxabiv111__terminateEPFvvE>:
90022e0e:	b508      	push	{r3, lr}
90022e10:	4780      	blx	r0
90022e12:	f000 f80e 	bl	90022e32 <abort>
	...

90022e18 <_ZSt13get_terminatev>:
90022e18:	4b02      	ldr	r3, [pc, #8]	; (90022e24 <_ZSt13get_terminatev+0xc>)
90022e1a:	6818      	ldr	r0, [r3, #0]
90022e1c:	f3bf 8f5b 	dmb	ish
90022e20:	4770      	bx	lr
90022e22:	bf00      	nop
90022e24:	240000dc 	.word	0x240000dc

90022e28 <_ZSt9terminatev>:
90022e28:	b508      	push	{r3, lr}
90022e2a:	f7ff fff5 	bl	90022e18 <_ZSt13get_terminatev>
90022e2e:	f7ff ffee 	bl	90022e0e <_ZN10__cxxabiv111__terminateEPFvvE>

90022e32 <abort>:
90022e32:	b508      	push	{r3, lr}
90022e34:	2006      	movs	r0, #6
90022e36:	f000 fadf 	bl	900233f8 <raise>
90022e3a:	2001      	movs	r0, #1
90022e3c:	f7e1 ff06 	bl	90004c4c <_exit>

90022e40 <__assert_func>:
90022e40:	b51f      	push	{r0, r1, r2, r3, r4, lr}
90022e42:	4614      	mov	r4, r2
90022e44:	461a      	mov	r2, r3
90022e46:	4b09      	ldr	r3, [pc, #36]	; (90022e6c <__assert_func+0x2c>)
90022e48:	681b      	ldr	r3, [r3, #0]
90022e4a:	4605      	mov	r5, r0
90022e4c:	68d8      	ldr	r0, [r3, #12]
90022e4e:	b14c      	cbz	r4, 90022e64 <__assert_func+0x24>
90022e50:	4b07      	ldr	r3, [pc, #28]	; (90022e70 <__assert_func+0x30>)
90022e52:	9100      	str	r1, [sp, #0]
90022e54:	e9cd 3401 	strd	r3, r4, [sp, #4]
90022e58:	4906      	ldr	r1, [pc, #24]	; (90022e74 <__assert_func+0x34>)
90022e5a:	462b      	mov	r3, r5
90022e5c:	f000 f982 	bl	90023164 <fiprintf>
90022e60:	f7ff ffe7 	bl	90022e32 <abort>
90022e64:	4b04      	ldr	r3, [pc, #16]	; (90022e78 <__assert_func+0x38>)
90022e66:	461c      	mov	r4, r3
90022e68:	e7f3      	b.n	90022e52 <__assert_func+0x12>
90022e6a:	bf00      	nop
90022e6c:	24000138 	.word	0x24000138
90022e70:	9002700c 	.word	0x9002700c
90022e74:	90027019 	.word	0x90027019
90022e78:	90027047 	.word	0x90027047

90022e7c <atexit>:
90022e7c:	2300      	movs	r3, #0
90022e7e:	4601      	mov	r1, r0
90022e80:	461a      	mov	r2, r3
90022e82:	4618      	mov	r0, r3
90022e84:	f000 bb66 	b.w	90023554 <__register_exitproc>

90022e88 <malloc>:
90022e88:	4b02      	ldr	r3, [pc, #8]	; (90022e94 <malloc+0xc>)
90022e8a:	4601      	mov	r1, r0
90022e8c:	6818      	ldr	r0, [r3, #0]
90022e8e:	f000 b82b 	b.w	90022ee8 <_malloc_r>
90022e92:	bf00      	nop
90022e94:	24000138 	.word	0x24000138

90022e98 <free>:
90022e98:	4b02      	ldr	r3, [pc, #8]	; (90022ea4 <free+0xc>)
90022e9a:	4601      	mov	r1, r0
90022e9c:	6818      	ldr	r0, [r3, #0]
90022e9e:	f000 bbb7 	b.w	90023610 <_free_r>
90022ea2:	bf00      	nop
90022ea4:	24000138 	.word	0x24000138

90022ea8 <sbrk_aligned>:
90022ea8:	b570      	push	{r4, r5, r6, lr}
90022eaa:	4e0e      	ldr	r6, [pc, #56]	; (90022ee4 <sbrk_aligned+0x3c>)
90022eac:	460c      	mov	r4, r1
90022eae:	6831      	ldr	r1, [r6, #0]
90022eb0:	4605      	mov	r5, r0
90022eb2:	b911      	cbnz	r1, 90022eba <sbrk_aligned+0x12>
90022eb4:	f000 faf0 	bl	90023498 <_sbrk_r>
90022eb8:	6030      	str	r0, [r6, #0]
90022eba:	4621      	mov	r1, r4
90022ebc:	4628      	mov	r0, r5
90022ebe:	f000 faeb 	bl	90023498 <_sbrk_r>
90022ec2:	1c43      	adds	r3, r0, #1
90022ec4:	d00a      	beq.n	90022edc <sbrk_aligned+0x34>
90022ec6:	1cc4      	adds	r4, r0, #3
90022ec8:	f024 0403 	bic.w	r4, r4, #3
90022ecc:	42a0      	cmp	r0, r4
90022ece:	d007      	beq.n	90022ee0 <sbrk_aligned+0x38>
90022ed0:	1a21      	subs	r1, r4, r0
90022ed2:	4628      	mov	r0, r5
90022ed4:	f000 fae0 	bl	90023498 <_sbrk_r>
90022ed8:	3001      	adds	r0, #1
90022eda:	d101      	bne.n	90022ee0 <sbrk_aligned+0x38>
90022edc:	f04f 34ff 	mov.w	r4, #4294967295
90022ee0:	4620      	mov	r0, r4
90022ee2:	bd70      	pop	{r4, r5, r6, pc}
90022ee4:	24026364 	.word	0x24026364

90022ee8 <_malloc_r>:
90022ee8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
90022eec:	1ccd      	adds	r5, r1, #3
90022eee:	f025 0503 	bic.w	r5, r5, #3
90022ef2:	3508      	adds	r5, #8
90022ef4:	2d0c      	cmp	r5, #12
90022ef6:	bf38      	it	cc
90022ef8:	250c      	movcc	r5, #12
90022efa:	2d00      	cmp	r5, #0
90022efc:	4607      	mov	r7, r0
90022efe:	db01      	blt.n	90022f04 <_malloc_r+0x1c>
90022f00:	42a9      	cmp	r1, r5
90022f02:	d905      	bls.n	90022f10 <_malloc_r+0x28>
90022f04:	230c      	movs	r3, #12
90022f06:	603b      	str	r3, [r7, #0]
90022f08:	2600      	movs	r6, #0
90022f0a:	4630      	mov	r0, r6
90022f0c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
90022f10:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 90022fe4 <_malloc_r+0xfc>
90022f14:	f000 f868 	bl	90022fe8 <__malloc_lock>
90022f18:	f8d8 3000 	ldr.w	r3, [r8]
90022f1c:	461c      	mov	r4, r3
90022f1e:	bb5c      	cbnz	r4, 90022f78 <_malloc_r+0x90>
90022f20:	4629      	mov	r1, r5
90022f22:	4638      	mov	r0, r7
90022f24:	f7ff ffc0 	bl	90022ea8 <sbrk_aligned>
90022f28:	1c43      	adds	r3, r0, #1
90022f2a:	4604      	mov	r4, r0
90022f2c:	d155      	bne.n	90022fda <_malloc_r+0xf2>
90022f2e:	f8d8 4000 	ldr.w	r4, [r8]
90022f32:	4626      	mov	r6, r4
90022f34:	2e00      	cmp	r6, #0
90022f36:	d145      	bne.n	90022fc4 <_malloc_r+0xdc>
90022f38:	2c00      	cmp	r4, #0
90022f3a:	d048      	beq.n	90022fce <_malloc_r+0xe6>
90022f3c:	6823      	ldr	r3, [r4, #0]
90022f3e:	4631      	mov	r1, r6
90022f40:	4638      	mov	r0, r7
90022f42:	eb04 0903 	add.w	r9, r4, r3
90022f46:	f000 faa7 	bl	90023498 <_sbrk_r>
90022f4a:	4581      	cmp	r9, r0
90022f4c:	d13f      	bne.n	90022fce <_malloc_r+0xe6>
90022f4e:	6821      	ldr	r1, [r4, #0]
90022f50:	1a6d      	subs	r5, r5, r1
90022f52:	4629      	mov	r1, r5
90022f54:	4638      	mov	r0, r7
90022f56:	f7ff ffa7 	bl	90022ea8 <sbrk_aligned>
90022f5a:	3001      	adds	r0, #1
90022f5c:	d037      	beq.n	90022fce <_malloc_r+0xe6>
90022f5e:	6823      	ldr	r3, [r4, #0]
90022f60:	442b      	add	r3, r5
90022f62:	6023      	str	r3, [r4, #0]
90022f64:	f8d8 3000 	ldr.w	r3, [r8]
90022f68:	2b00      	cmp	r3, #0
90022f6a:	d038      	beq.n	90022fde <_malloc_r+0xf6>
90022f6c:	685a      	ldr	r2, [r3, #4]
90022f6e:	42a2      	cmp	r2, r4
90022f70:	d12b      	bne.n	90022fca <_malloc_r+0xe2>
90022f72:	2200      	movs	r2, #0
90022f74:	605a      	str	r2, [r3, #4]
90022f76:	e00f      	b.n	90022f98 <_malloc_r+0xb0>
90022f78:	6822      	ldr	r2, [r4, #0]
90022f7a:	1b52      	subs	r2, r2, r5
90022f7c:	d41f      	bmi.n	90022fbe <_malloc_r+0xd6>
90022f7e:	2a0b      	cmp	r2, #11
90022f80:	d917      	bls.n	90022fb2 <_malloc_r+0xca>
90022f82:	1961      	adds	r1, r4, r5
90022f84:	42a3      	cmp	r3, r4
90022f86:	6025      	str	r5, [r4, #0]
90022f88:	bf18      	it	ne
90022f8a:	6059      	strne	r1, [r3, #4]
90022f8c:	6863      	ldr	r3, [r4, #4]
90022f8e:	bf08      	it	eq
90022f90:	f8c8 1000 	streq.w	r1, [r8]
90022f94:	5162      	str	r2, [r4, r5]
90022f96:	604b      	str	r3, [r1, #4]
90022f98:	4638      	mov	r0, r7
90022f9a:	f104 060b 	add.w	r6, r4, #11
90022f9e:	f000 f829 	bl	90022ff4 <__malloc_unlock>
90022fa2:	f026 0607 	bic.w	r6, r6, #7
90022fa6:	1d23      	adds	r3, r4, #4
90022fa8:	1af2      	subs	r2, r6, r3
90022faa:	d0ae      	beq.n	90022f0a <_malloc_r+0x22>
90022fac:	1b9b      	subs	r3, r3, r6
90022fae:	50a3      	str	r3, [r4, r2]
90022fb0:	e7ab      	b.n	90022f0a <_malloc_r+0x22>
90022fb2:	42a3      	cmp	r3, r4
90022fb4:	6862      	ldr	r2, [r4, #4]
90022fb6:	d1dd      	bne.n	90022f74 <_malloc_r+0x8c>
90022fb8:	f8c8 2000 	str.w	r2, [r8]
90022fbc:	e7ec      	b.n	90022f98 <_malloc_r+0xb0>
90022fbe:	4623      	mov	r3, r4
90022fc0:	6864      	ldr	r4, [r4, #4]
90022fc2:	e7ac      	b.n	90022f1e <_malloc_r+0x36>
90022fc4:	4634      	mov	r4, r6
90022fc6:	6876      	ldr	r6, [r6, #4]
90022fc8:	e7b4      	b.n	90022f34 <_malloc_r+0x4c>
90022fca:	4613      	mov	r3, r2
90022fcc:	e7cc      	b.n	90022f68 <_malloc_r+0x80>
90022fce:	230c      	movs	r3, #12
90022fd0:	603b      	str	r3, [r7, #0]
90022fd2:	4638      	mov	r0, r7
90022fd4:	f000 f80e 	bl	90022ff4 <__malloc_unlock>
90022fd8:	e797      	b.n	90022f0a <_malloc_r+0x22>
90022fda:	6025      	str	r5, [r4, #0]
90022fdc:	e7dc      	b.n	90022f98 <_malloc_r+0xb0>
90022fde:	605b      	str	r3, [r3, #4]
90022fe0:	deff      	udf	#255	; 0xff
90022fe2:	bf00      	nop
90022fe4:	24026360 	.word	0x24026360

90022fe8 <__malloc_lock>:
90022fe8:	4801      	ldr	r0, [pc, #4]	; (90022ff0 <__malloc_lock+0x8>)
90022fea:	f000 baa2 	b.w	90023532 <__retarget_lock_acquire_recursive>
90022fee:	bf00      	nop
90022ff0:	240264a9 	.word	0x240264a9

90022ff4 <__malloc_unlock>:
90022ff4:	4801      	ldr	r0, [pc, #4]	; (90022ffc <__malloc_unlock+0x8>)
90022ff6:	f000 ba9d 	b.w	90023534 <__retarget_lock_release_recursive>
90022ffa:	bf00      	nop
90022ffc:	240264a9 	.word	0x240264a9

90023000 <__cxa_atexit>:
90023000:	b510      	push	{r4, lr}
90023002:	4c05      	ldr	r4, [pc, #20]	; (90023018 <__cxa_atexit+0x18>)
90023004:	4613      	mov	r3, r2
90023006:	b12c      	cbz	r4, 90023014 <__cxa_atexit+0x14>
90023008:	460a      	mov	r2, r1
9002300a:	4601      	mov	r1, r0
9002300c:	2002      	movs	r0, #2
9002300e:	f000 faa1 	bl	90023554 <__register_exitproc>
90023012:	bd10      	pop	{r4, pc}
90023014:	4620      	mov	r0, r4
90023016:	e7fc      	b.n	90023012 <__cxa_atexit+0x12>
90023018:	90023555 	.word	0x90023555

9002301c <std>:
9002301c:	2300      	movs	r3, #0
9002301e:	b510      	push	{r4, lr}
90023020:	4604      	mov	r4, r0
90023022:	e9c0 3300 	strd	r3, r3, [r0]
90023026:	e9c0 3304 	strd	r3, r3, [r0, #16]
9002302a:	6083      	str	r3, [r0, #8]
9002302c:	8181      	strh	r1, [r0, #12]
9002302e:	6643      	str	r3, [r0, #100]	; 0x64
90023030:	81c2      	strh	r2, [r0, #14]
90023032:	6183      	str	r3, [r0, #24]
90023034:	4619      	mov	r1, r3
90023036:	2208      	movs	r2, #8
90023038:	305c      	adds	r0, #92	; 0x5c
9002303a:	f000 f99b 	bl	90023374 <memset>
9002303e:	4b0d      	ldr	r3, [pc, #52]	; (90023074 <std+0x58>)
90023040:	6263      	str	r3, [r4, #36]	; 0x24
90023042:	4b0d      	ldr	r3, [pc, #52]	; (90023078 <std+0x5c>)
90023044:	62a3      	str	r3, [r4, #40]	; 0x28
90023046:	4b0d      	ldr	r3, [pc, #52]	; (9002307c <std+0x60>)
90023048:	62e3      	str	r3, [r4, #44]	; 0x2c
9002304a:	4b0d      	ldr	r3, [pc, #52]	; (90023080 <std+0x64>)
9002304c:	6323      	str	r3, [r4, #48]	; 0x30
9002304e:	4b0d      	ldr	r3, [pc, #52]	; (90023084 <std+0x68>)
90023050:	6224      	str	r4, [r4, #32]
90023052:	429c      	cmp	r4, r3
90023054:	d006      	beq.n	90023064 <std+0x48>
90023056:	f103 0268 	add.w	r2, r3, #104	; 0x68
9002305a:	4294      	cmp	r4, r2
9002305c:	d002      	beq.n	90023064 <std+0x48>
9002305e:	33d0      	adds	r3, #208	; 0xd0
90023060:	429c      	cmp	r4, r3
90023062:	d105      	bne.n	90023070 <std+0x54>
90023064:	f104 0058 	add.w	r0, r4, #88	; 0x58
90023068:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
9002306c:	f000 ba60 	b.w	90023530 <__retarget_lock_init_recursive>
90023070:	bd10      	pop	{r4, pc}
90023072:	bf00      	nop
90023074:	900231c5 	.word	0x900231c5
90023078:	900231e7 	.word	0x900231e7
9002307c:	9002321f 	.word	0x9002321f
90023080:	90023243 	.word	0x90023243
90023084:	24026368 	.word	0x24026368

90023088 <stdio_exit_handler>:
90023088:	4a02      	ldr	r2, [pc, #8]	; (90023094 <stdio_exit_handler+0xc>)
9002308a:	4903      	ldr	r1, [pc, #12]	; (90023098 <stdio_exit_handler+0x10>)
9002308c:	4803      	ldr	r0, [pc, #12]	; (9002309c <stdio_exit_handler+0x14>)
9002308e:	f000 b87b 	b.w	90023188 <_fwalk_sglue>
90023092:	bf00      	nop
90023094:	240000e0 	.word	0x240000e0
90023098:	90023d5d 	.word	0x90023d5d
9002309c:	240000ec 	.word	0x240000ec

900230a0 <cleanup_stdio>:
900230a0:	6841      	ldr	r1, [r0, #4]
900230a2:	4b0c      	ldr	r3, [pc, #48]	; (900230d4 <cleanup_stdio+0x34>)
900230a4:	4299      	cmp	r1, r3
900230a6:	b510      	push	{r4, lr}
900230a8:	4604      	mov	r4, r0
900230aa:	d001      	beq.n	900230b0 <cleanup_stdio+0x10>
900230ac:	f000 fe56 	bl	90023d5c <_fflush_r>
900230b0:	68a1      	ldr	r1, [r4, #8]
900230b2:	4b09      	ldr	r3, [pc, #36]	; (900230d8 <cleanup_stdio+0x38>)
900230b4:	4299      	cmp	r1, r3
900230b6:	d002      	beq.n	900230be <cleanup_stdio+0x1e>
900230b8:	4620      	mov	r0, r4
900230ba:	f000 fe4f 	bl	90023d5c <_fflush_r>
900230be:	68e1      	ldr	r1, [r4, #12]
900230c0:	4b06      	ldr	r3, [pc, #24]	; (900230dc <cleanup_stdio+0x3c>)
900230c2:	4299      	cmp	r1, r3
900230c4:	d004      	beq.n	900230d0 <cleanup_stdio+0x30>
900230c6:	4620      	mov	r0, r4
900230c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
900230cc:	f000 be46 	b.w	90023d5c <_fflush_r>
900230d0:	bd10      	pop	{r4, pc}
900230d2:	bf00      	nop
900230d4:	24026368 	.word	0x24026368
900230d8:	240263d0 	.word	0x240263d0
900230dc:	24026438 	.word	0x24026438

900230e0 <global_stdio_init.part.0>:
900230e0:	b510      	push	{r4, lr}
900230e2:	4b0b      	ldr	r3, [pc, #44]	; (90023110 <global_stdio_init.part.0+0x30>)
900230e4:	4c0b      	ldr	r4, [pc, #44]	; (90023114 <global_stdio_init.part.0+0x34>)
900230e6:	4a0c      	ldr	r2, [pc, #48]	; (90023118 <global_stdio_init.part.0+0x38>)
900230e8:	601a      	str	r2, [r3, #0]
900230ea:	4620      	mov	r0, r4
900230ec:	2200      	movs	r2, #0
900230ee:	2104      	movs	r1, #4
900230f0:	f7ff ff94 	bl	9002301c <std>
900230f4:	f104 0068 	add.w	r0, r4, #104	; 0x68
900230f8:	2201      	movs	r2, #1
900230fa:	2109      	movs	r1, #9
900230fc:	f7ff ff8e 	bl	9002301c <std>
90023100:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
90023104:	2202      	movs	r2, #2
90023106:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
9002310a:	2112      	movs	r1, #18
9002310c:	f7ff bf86 	b.w	9002301c <std>
90023110:	240264a0 	.word	0x240264a0
90023114:	24026368 	.word	0x24026368
90023118:	90023089 	.word	0x90023089

9002311c <__sfp_lock_acquire>:
9002311c:	4801      	ldr	r0, [pc, #4]	; (90023124 <__sfp_lock_acquire+0x8>)
9002311e:	f000 ba08 	b.w	90023532 <__retarget_lock_acquire_recursive>
90023122:	bf00      	nop
90023124:	240264aa 	.word	0x240264aa

90023128 <__sfp_lock_release>:
90023128:	4801      	ldr	r0, [pc, #4]	; (90023130 <__sfp_lock_release+0x8>)
9002312a:	f000 ba03 	b.w	90023534 <__retarget_lock_release_recursive>
9002312e:	bf00      	nop
90023130:	240264aa 	.word	0x240264aa

90023134 <__sinit>:
90023134:	b510      	push	{r4, lr}
90023136:	4604      	mov	r4, r0
90023138:	f7ff fff0 	bl	9002311c <__sfp_lock_acquire>
9002313c:	6a23      	ldr	r3, [r4, #32]
9002313e:	b11b      	cbz	r3, 90023148 <__sinit+0x14>
90023140:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
90023144:	f7ff bff0 	b.w	90023128 <__sfp_lock_release>
90023148:	4b04      	ldr	r3, [pc, #16]	; (9002315c <__sinit+0x28>)
9002314a:	6223      	str	r3, [r4, #32]
9002314c:	4b04      	ldr	r3, [pc, #16]	; (90023160 <__sinit+0x2c>)
9002314e:	681b      	ldr	r3, [r3, #0]
90023150:	2b00      	cmp	r3, #0
90023152:	d1f5      	bne.n	90023140 <__sinit+0xc>
90023154:	f7ff ffc4 	bl	900230e0 <global_stdio_init.part.0>
90023158:	e7f2      	b.n	90023140 <__sinit+0xc>
9002315a:	bf00      	nop
9002315c:	900230a1 	.word	0x900230a1
90023160:	240264a0 	.word	0x240264a0

90023164 <fiprintf>:
90023164:	b40e      	push	{r1, r2, r3}
90023166:	b503      	push	{r0, r1, lr}
90023168:	4601      	mov	r1, r0
9002316a:	ab03      	add	r3, sp, #12
9002316c:	4805      	ldr	r0, [pc, #20]	; (90023184 <fiprintf+0x20>)
9002316e:	f853 2b04 	ldr.w	r2, [r3], #4
90023172:	6800      	ldr	r0, [r0, #0]
90023174:	9301      	str	r3, [sp, #4]
90023176:	f000 fac1 	bl	900236fc <_vfiprintf_r>
9002317a:	b002      	add	sp, #8
9002317c:	f85d eb04 	ldr.w	lr, [sp], #4
90023180:	b003      	add	sp, #12
90023182:	4770      	bx	lr
90023184:	24000138 	.word	0x24000138

90023188 <_fwalk_sglue>:
90023188:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
9002318c:	4607      	mov	r7, r0
9002318e:	4688      	mov	r8, r1
90023190:	4614      	mov	r4, r2
90023192:	2600      	movs	r6, #0
90023194:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
90023198:	f1b9 0901 	subs.w	r9, r9, #1
9002319c:	d505      	bpl.n	900231aa <_fwalk_sglue+0x22>
9002319e:	6824      	ldr	r4, [r4, #0]
900231a0:	2c00      	cmp	r4, #0
900231a2:	d1f7      	bne.n	90023194 <_fwalk_sglue+0xc>
900231a4:	4630      	mov	r0, r6
900231a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
900231aa:	89ab      	ldrh	r3, [r5, #12]
900231ac:	2b01      	cmp	r3, #1
900231ae:	d907      	bls.n	900231c0 <_fwalk_sglue+0x38>
900231b0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
900231b4:	3301      	adds	r3, #1
900231b6:	d003      	beq.n	900231c0 <_fwalk_sglue+0x38>
900231b8:	4629      	mov	r1, r5
900231ba:	4638      	mov	r0, r7
900231bc:	47c0      	blx	r8
900231be:	4306      	orrs	r6, r0
900231c0:	3568      	adds	r5, #104	; 0x68
900231c2:	e7e9      	b.n	90023198 <_fwalk_sglue+0x10>

900231c4 <__sread>:
900231c4:	b510      	push	{r4, lr}
900231c6:	460c      	mov	r4, r1
900231c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
900231cc:	f000 f93e 	bl	9002344c <_read_r>
900231d0:	2800      	cmp	r0, #0
900231d2:	bfab      	itete	ge
900231d4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
900231d6:	89a3      	ldrhlt	r3, [r4, #12]
900231d8:	181b      	addge	r3, r3, r0
900231da:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
900231de:	bfac      	ite	ge
900231e0:	6563      	strge	r3, [r4, #84]	; 0x54
900231e2:	81a3      	strhlt	r3, [r4, #12]
900231e4:	bd10      	pop	{r4, pc}

900231e6 <__swrite>:
900231e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
900231ea:	461f      	mov	r7, r3
900231ec:	898b      	ldrh	r3, [r1, #12]
900231ee:	05db      	lsls	r3, r3, #23
900231f0:	4605      	mov	r5, r0
900231f2:	460c      	mov	r4, r1
900231f4:	4616      	mov	r6, r2
900231f6:	d505      	bpl.n	90023204 <__swrite+0x1e>
900231f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
900231fc:	2302      	movs	r3, #2
900231fe:	2200      	movs	r2, #0
90023200:	f000 f912 	bl	90023428 <_lseek_r>
90023204:	89a3      	ldrh	r3, [r4, #12]
90023206:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
9002320a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
9002320e:	81a3      	strh	r3, [r4, #12]
90023210:	4632      	mov	r2, r6
90023212:	463b      	mov	r3, r7
90023214:	4628      	mov	r0, r5
90023216:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
9002321a:	f000 b94d 	b.w	900234b8 <_write_r>

9002321e <__sseek>:
9002321e:	b510      	push	{r4, lr}
90023220:	460c      	mov	r4, r1
90023222:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
90023226:	f000 f8ff 	bl	90023428 <_lseek_r>
9002322a:	1c43      	adds	r3, r0, #1
9002322c:	89a3      	ldrh	r3, [r4, #12]
9002322e:	bf15      	itete	ne
90023230:	6560      	strne	r0, [r4, #84]	; 0x54
90023232:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
90023236:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
9002323a:	81a3      	strheq	r3, [r4, #12]
9002323c:	bf18      	it	ne
9002323e:	81a3      	strhne	r3, [r4, #12]
90023240:	bd10      	pop	{r4, pc}

90023242 <__sclose>:
90023242:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
90023246:	f000 b8df 	b.w	90023408 <_close_r>

9002324a <__swbuf_r>:
9002324a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
9002324c:	460e      	mov	r6, r1
9002324e:	4614      	mov	r4, r2
90023250:	4605      	mov	r5, r0
90023252:	b118      	cbz	r0, 9002325c <__swbuf_r+0x12>
90023254:	6a03      	ldr	r3, [r0, #32]
90023256:	b90b      	cbnz	r3, 9002325c <__swbuf_r+0x12>
90023258:	f7ff ff6c 	bl	90023134 <__sinit>
9002325c:	69a3      	ldr	r3, [r4, #24]
9002325e:	60a3      	str	r3, [r4, #8]
90023260:	89a3      	ldrh	r3, [r4, #12]
90023262:	071a      	lsls	r2, r3, #28
90023264:	d525      	bpl.n	900232b2 <__swbuf_r+0x68>
90023266:	6923      	ldr	r3, [r4, #16]
90023268:	b31b      	cbz	r3, 900232b2 <__swbuf_r+0x68>
9002326a:	6823      	ldr	r3, [r4, #0]
9002326c:	6922      	ldr	r2, [r4, #16]
9002326e:	1a98      	subs	r0, r3, r2
90023270:	6963      	ldr	r3, [r4, #20]
90023272:	b2f6      	uxtb	r6, r6
90023274:	4283      	cmp	r3, r0
90023276:	4637      	mov	r7, r6
90023278:	dc04      	bgt.n	90023284 <__swbuf_r+0x3a>
9002327a:	4621      	mov	r1, r4
9002327c:	4628      	mov	r0, r5
9002327e:	f000 fd6d 	bl	90023d5c <_fflush_r>
90023282:	b9e0      	cbnz	r0, 900232be <__swbuf_r+0x74>
90023284:	68a3      	ldr	r3, [r4, #8]
90023286:	3b01      	subs	r3, #1
90023288:	60a3      	str	r3, [r4, #8]
9002328a:	6823      	ldr	r3, [r4, #0]
9002328c:	1c5a      	adds	r2, r3, #1
9002328e:	6022      	str	r2, [r4, #0]
90023290:	701e      	strb	r6, [r3, #0]
90023292:	6962      	ldr	r2, [r4, #20]
90023294:	1c43      	adds	r3, r0, #1
90023296:	429a      	cmp	r2, r3
90023298:	d004      	beq.n	900232a4 <__swbuf_r+0x5a>
9002329a:	89a3      	ldrh	r3, [r4, #12]
9002329c:	07db      	lsls	r3, r3, #31
9002329e:	d506      	bpl.n	900232ae <__swbuf_r+0x64>
900232a0:	2e0a      	cmp	r6, #10
900232a2:	d104      	bne.n	900232ae <__swbuf_r+0x64>
900232a4:	4621      	mov	r1, r4
900232a6:	4628      	mov	r0, r5
900232a8:	f000 fd58 	bl	90023d5c <_fflush_r>
900232ac:	b938      	cbnz	r0, 900232be <__swbuf_r+0x74>
900232ae:	4638      	mov	r0, r7
900232b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
900232b2:	4621      	mov	r1, r4
900232b4:	4628      	mov	r0, r5
900232b6:	f000 f805 	bl	900232c4 <__swsetup_r>
900232ba:	2800      	cmp	r0, #0
900232bc:	d0d5      	beq.n	9002326a <__swbuf_r+0x20>
900232be:	f04f 37ff 	mov.w	r7, #4294967295
900232c2:	e7f4      	b.n	900232ae <__swbuf_r+0x64>

900232c4 <__swsetup_r>:
900232c4:	b538      	push	{r3, r4, r5, lr}
900232c6:	4b2a      	ldr	r3, [pc, #168]	; (90023370 <__swsetup_r+0xac>)
900232c8:	4605      	mov	r5, r0
900232ca:	6818      	ldr	r0, [r3, #0]
900232cc:	460c      	mov	r4, r1
900232ce:	b118      	cbz	r0, 900232d8 <__swsetup_r+0x14>
900232d0:	6a03      	ldr	r3, [r0, #32]
900232d2:	b90b      	cbnz	r3, 900232d8 <__swsetup_r+0x14>
900232d4:	f7ff ff2e 	bl	90023134 <__sinit>
900232d8:	89a3      	ldrh	r3, [r4, #12]
900232da:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
900232de:	0718      	lsls	r0, r3, #28
900232e0:	d422      	bmi.n	90023328 <__swsetup_r+0x64>
900232e2:	06d9      	lsls	r1, r3, #27
900232e4:	d407      	bmi.n	900232f6 <__swsetup_r+0x32>
900232e6:	2309      	movs	r3, #9
900232e8:	602b      	str	r3, [r5, #0]
900232ea:	f042 0340 	orr.w	r3, r2, #64	; 0x40
900232ee:	81a3      	strh	r3, [r4, #12]
900232f0:	f04f 30ff 	mov.w	r0, #4294967295
900232f4:	e034      	b.n	90023360 <__swsetup_r+0x9c>
900232f6:	0758      	lsls	r0, r3, #29
900232f8:	d512      	bpl.n	90023320 <__swsetup_r+0x5c>
900232fa:	6b61      	ldr	r1, [r4, #52]	; 0x34
900232fc:	b141      	cbz	r1, 90023310 <__swsetup_r+0x4c>
900232fe:	f104 0344 	add.w	r3, r4, #68	; 0x44
90023302:	4299      	cmp	r1, r3
90023304:	d002      	beq.n	9002330c <__swsetup_r+0x48>
90023306:	4628      	mov	r0, r5
90023308:	f000 f982 	bl	90023610 <_free_r>
9002330c:	2300      	movs	r3, #0
9002330e:	6363      	str	r3, [r4, #52]	; 0x34
90023310:	89a3      	ldrh	r3, [r4, #12]
90023312:	f023 0324 	bic.w	r3, r3, #36	; 0x24
90023316:	81a3      	strh	r3, [r4, #12]
90023318:	2300      	movs	r3, #0
9002331a:	6063      	str	r3, [r4, #4]
9002331c:	6923      	ldr	r3, [r4, #16]
9002331e:	6023      	str	r3, [r4, #0]
90023320:	89a3      	ldrh	r3, [r4, #12]
90023322:	f043 0308 	orr.w	r3, r3, #8
90023326:	81a3      	strh	r3, [r4, #12]
90023328:	6923      	ldr	r3, [r4, #16]
9002332a:	b94b      	cbnz	r3, 90023340 <__swsetup_r+0x7c>
9002332c:	89a3      	ldrh	r3, [r4, #12]
9002332e:	f403 7320 	and.w	r3, r3, #640	; 0x280
90023332:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
90023336:	d003      	beq.n	90023340 <__swsetup_r+0x7c>
90023338:	4621      	mov	r1, r4
9002333a:	4628      	mov	r0, r5
9002333c:	f000 fd5c 	bl	90023df8 <__smakebuf_r>
90023340:	89a0      	ldrh	r0, [r4, #12]
90023342:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
90023346:	f010 0301 	ands.w	r3, r0, #1
9002334a:	d00a      	beq.n	90023362 <__swsetup_r+0x9e>
9002334c:	2300      	movs	r3, #0
9002334e:	60a3      	str	r3, [r4, #8]
90023350:	6963      	ldr	r3, [r4, #20]
90023352:	425b      	negs	r3, r3
90023354:	61a3      	str	r3, [r4, #24]
90023356:	6923      	ldr	r3, [r4, #16]
90023358:	b943      	cbnz	r3, 9002336c <__swsetup_r+0xa8>
9002335a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
9002335e:	d1c4      	bne.n	900232ea <__swsetup_r+0x26>
90023360:	bd38      	pop	{r3, r4, r5, pc}
90023362:	0781      	lsls	r1, r0, #30
90023364:	bf58      	it	pl
90023366:	6963      	ldrpl	r3, [r4, #20]
90023368:	60a3      	str	r3, [r4, #8]
9002336a:	e7f4      	b.n	90023356 <__swsetup_r+0x92>
9002336c:	2000      	movs	r0, #0
9002336e:	e7f7      	b.n	90023360 <__swsetup_r+0x9c>
90023370:	24000138 	.word	0x24000138

90023374 <memset>:
90023374:	4402      	add	r2, r0
90023376:	4603      	mov	r3, r0
90023378:	4293      	cmp	r3, r2
9002337a:	d100      	bne.n	9002337e <memset+0xa>
9002337c:	4770      	bx	lr
9002337e:	f803 1b01 	strb.w	r1, [r3], #1
90023382:	e7f9      	b.n	90023378 <memset+0x4>

90023384 <strncmp>:
90023384:	b510      	push	{r4, lr}
90023386:	b16a      	cbz	r2, 900233a4 <strncmp+0x20>
90023388:	3901      	subs	r1, #1
9002338a:	1884      	adds	r4, r0, r2
9002338c:	f810 2b01 	ldrb.w	r2, [r0], #1
90023390:	f811 3f01 	ldrb.w	r3, [r1, #1]!
90023394:	429a      	cmp	r2, r3
90023396:	d103      	bne.n	900233a0 <strncmp+0x1c>
90023398:	42a0      	cmp	r0, r4
9002339a:	d001      	beq.n	900233a0 <strncmp+0x1c>
9002339c:	2a00      	cmp	r2, #0
9002339e:	d1f5      	bne.n	9002338c <strncmp+0x8>
900233a0:	1ad0      	subs	r0, r2, r3
900233a2:	bd10      	pop	{r4, pc}
900233a4:	4610      	mov	r0, r2
900233a6:	e7fc      	b.n	900233a2 <strncmp+0x1e>

900233a8 <_raise_r>:
900233a8:	291f      	cmp	r1, #31
900233aa:	b538      	push	{r3, r4, r5, lr}
900233ac:	4604      	mov	r4, r0
900233ae:	460d      	mov	r5, r1
900233b0:	d904      	bls.n	900233bc <_raise_r+0x14>
900233b2:	2316      	movs	r3, #22
900233b4:	6003      	str	r3, [r0, #0]
900233b6:	f04f 30ff 	mov.w	r0, #4294967295
900233ba:	bd38      	pop	{r3, r4, r5, pc}
900233bc:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
900233be:	b112      	cbz	r2, 900233c6 <_raise_r+0x1e>
900233c0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
900233c4:	b94b      	cbnz	r3, 900233da <_raise_r+0x32>
900233c6:	4620      	mov	r0, r4
900233c8:	f000 f864 	bl	90023494 <_getpid_r>
900233cc:	462a      	mov	r2, r5
900233ce:	4601      	mov	r1, r0
900233d0:	4620      	mov	r0, r4
900233d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
900233d6:	f000 b84b 	b.w	90023470 <_kill_r>
900233da:	2b01      	cmp	r3, #1
900233dc:	d00a      	beq.n	900233f4 <_raise_r+0x4c>
900233de:	1c59      	adds	r1, r3, #1
900233e0:	d103      	bne.n	900233ea <_raise_r+0x42>
900233e2:	2316      	movs	r3, #22
900233e4:	6003      	str	r3, [r0, #0]
900233e6:	2001      	movs	r0, #1
900233e8:	e7e7      	b.n	900233ba <_raise_r+0x12>
900233ea:	2400      	movs	r4, #0
900233ec:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
900233f0:	4628      	mov	r0, r5
900233f2:	4798      	blx	r3
900233f4:	2000      	movs	r0, #0
900233f6:	e7e0      	b.n	900233ba <_raise_r+0x12>

900233f8 <raise>:
900233f8:	4b02      	ldr	r3, [pc, #8]	; (90023404 <raise+0xc>)
900233fa:	4601      	mov	r1, r0
900233fc:	6818      	ldr	r0, [r3, #0]
900233fe:	f7ff bfd3 	b.w	900233a8 <_raise_r>
90023402:	bf00      	nop
90023404:	24000138 	.word	0x24000138

90023408 <_close_r>:
90023408:	b538      	push	{r3, r4, r5, lr}
9002340a:	4d06      	ldr	r5, [pc, #24]	; (90023424 <_close_r+0x1c>)
9002340c:	2300      	movs	r3, #0
9002340e:	4604      	mov	r4, r0
90023410:	4608      	mov	r0, r1
90023412:	602b      	str	r3, [r5, #0]
90023414:	f7e1 fc3c 	bl	90004c90 <_close>
90023418:	1c43      	adds	r3, r0, #1
9002341a:	d102      	bne.n	90023422 <_close_r+0x1a>
9002341c:	682b      	ldr	r3, [r5, #0]
9002341e:	b103      	cbz	r3, 90023422 <_close_r+0x1a>
90023420:	6023      	str	r3, [r4, #0]
90023422:	bd38      	pop	{r3, r4, r5, pc}
90023424:	240264a4 	.word	0x240264a4

90023428 <_lseek_r>:
90023428:	b538      	push	{r3, r4, r5, lr}
9002342a:	4d07      	ldr	r5, [pc, #28]	; (90023448 <_lseek_r+0x20>)
9002342c:	4604      	mov	r4, r0
9002342e:	4608      	mov	r0, r1
90023430:	4611      	mov	r1, r2
90023432:	2200      	movs	r2, #0
90023434:	602a      	str	r2, [r5, #0]
90023436:	461a      	mov	r2, r3
90023438:	f7e1 fc36 	bl	90004ca8 <_lseek>
9002343c:	1c43      	adds	r3, r0, #1
9002343e:	d102      	bne.n	90023446 <_lseek_r+0x1e>
90023440:	682b      	ldr	r3, [r5, #0]
90023442:	b103      	cbz	r3, 90023446 <_lseek_r+0x1e>
90023444:	6023      	str	r3, [r4, #0]
90023446:	bd38      	pop	{r3, r4, r5, pc}
90023448:	240264a4 	.word	0x240264a4

9002344c <_read_r>:
9002344c:	b538      	push	{r3, r4, r5, lr}
9002344e:	4d07      	ldr	r5, [pc, #28]	; (9002346c <_read_r+0x20>)
90023450:	4604      	mov	r4, r0
90023452:	4608      	mov	r0, r1
90023454:	4611      	mov	r1, r2
90023456:	2200      	movs	r2, #0
90023458:	602a      	str	r2, [r5, #0]
9002345a:	461a      	mov	r2, r3
9002345c:	f7e1 fbfc 	bl	90004c58 <_read>
90023460:	1c43      	adds	r3, r0, #1
90023462:	d102      	bne.n	9002346a <_read_r+0x1e>
90023464:	682b      	ldr	r3, [r5, #0]
90023466:	b103      	cbz	r3, 9002346a <_read_r+0x1e>
90023468:	6023      	str	r3, [r4, #0]
9002346a:	bd38      	pop	{r3, r4, r5, pc}
9002346c:	240264a4 	.word	0x240264a4

90023470 <_kill_r>:
90023470:	b538      	push	{r3, r4, r5, lr}
90023472:	4d07      	ldr	r5, [pc, #28]	; (90023490 <_kill_r+0x20>)
90023474:	2300      	movs	r3, #0
90023476:	4604      	mov	r4, r0
90023478:	4608      	mov	r0, r1
9002347a:	4611      	mov	r1, r2
9002347c:	602b      	str	r3, [r5, #0]
9002347e:	f7e1 fbdb 	bl	90004c38 <_kill>
90023482:	1c43      	adds	r3, r0, #1
90023484:	d102      	bne.n	9002348c <_kill_r+0x1c>
90023486:	682b      	ldr	r3, [r5, #0]
90023488:	b103      	cbz	r3, 9002348c <_kill_r+0x1c>
9002348a:	6023      	str	r3, [r4, #0]
9002348c:	bd38      	pop	{r3, r4, r5, pc}
9002348e:	bf00      	nop
90023490:	240264a4 	.word	0x240264a4

90023494 <_getpid_r>:
90023494:	f7e1 bbce 	b.w	90004c34 <_getpid>

90023498 <_sbrk_r>:
90023498:	b538      	push	{r3, r4, r5, lr}
9002349a:	4d06      	ldr	r5, [pc, #24]	; (900234b4 <_sbrk_r+0x1c>)
9002349c:	2300      	movs	r3, #0
9002349e:	4604      	mov	r4, r0
900234a0:	4608      	mov	r0, r1
900234a2:	602b      	str	r3, [r5, #0]
900234a4:	f7e1 fc02 	bl	90004cac <_sbrk>
900234a8:	1c43      	adds	r3, r0, #1
900234aa:	d102      	bne.n	900234b2 <_sbrk_r+0x1a>
900234ac:	682b      	ldr	r3, [r5, #0]
900234ae:	b103      	cbz	r3, 900234b2 <_sbrk_r+0x1a>
900234b0:	6023      	str	r3, [r4, #0]
900234b2:	bd38      	pop	{r3, r4, r5, pc}
900234b4:	240264a4 	.word	0x240264a4

900234b8 <_write_r>:
900234b8:	b538      	push	{r3, r4, r5, lr}
900234ba:	4d07      	ldr	r5, [pc, #28]	; (900234d8 <_write_r+0x20>)
900234bc:	4604      	mov	r4, r0
900234be:	4608      	mov	r0, r1
900234c0:	4611      	mov	r1, r2
900234c2:	2200      	movs	r2, #0
900234c4:	602a      	str	r2, [r5, #0]
900234c6:	461a      	mov	r2, r3
900234c8:	f7e1 fbd4 	bl	90004c74 <_write>
900234cc:	1c43      	adds	r3, r0, #1
900234ce:	d102      	bne.n	900234d6 <_write_r+0x1e>
900234d0:	682b      	ldr	r3, [r5, #0]
900234d2:	b103      	cbz	r3, 900234d6 <_write_r+0x1e>
900234d4:	6023      	str	r3, [r4, #0]
900234d6:	bd38      	pop	{r3, r4, r5, pc}
900234d8:	240264a4 	.word	0x240264a4

900234dc <__errno>:
900234dc:	4b01      	ldr	r3, [pc, #4]	; (900234e4 <__errno+0x8>)
900234de:	6818      	ldr	r0, [r3, #0]
900234e0:	4770      	bx	lr
900234e2:	bf00      	nop
900234e4:	24000138 	.word	0x24000138

900234e8 <__libc_init_array>:
900234e8:	b570      	push	{r4, r5, r6, lr}
900234ea:	4d0d      	ldr	r5, [pc, #52]	; (90023520 <__libc_init_array+0x38>)
900234ec:	4c0d      	ldr	r4, [pc, #52]	; (90023524 <__libc_init_array+0x3c>)
900234ee:	1b64      	subs	r4, r4, r5
900234f0:	10a4      	asrs	r4, r4, #2
900234f2:	2600      	movs	r6, #0
900234f4:	42a6      	cmp	r6, r4
900234f6:	d109      	bne.n	9002350c <__libc_init_array+0x24>
900234f8:	4d0b      	ldr	r5, [pc, #44]	; (90023528 <__libc_init_array+0x40>)
900234fa:	4c0c      	ldr	r4, [pc, #48]	; (9002352c <__libc_init_array+0x44>)
900234fc:	f000 fcda 	bl	90023eb4 <_init>
90023500:	1b64      	subs	r4, r4, r5
90023502:	10a4      	asrs	r4, r4, #2
90023504:	2600      	movs	r6, #0
90023506:	42a6      	cmp	r6, r4
90023508:	d105      	bne.n	90023516 <__libc_init_array+0x2e>
9002350a:	bd70      	pop	{r4, r5, r6, pc}
9002350c:	f855 3b04 	ldr.w	r3, [r5], #4
90023510:	4798      	blx	r3
90023512:	3601      	adds	r6, #1
90023514:	e7ee      	b.n	900234f4 <__libc_init_array+0xc>
90023516:	f855 3b04 	ldr.w	r3, [r5], #4
9002351a:	4798      	blx	r3
9002351c:	3601      	adds	r6, #1
9002351e:	e7f2      	b.n	90023506 <__libc_init_array+0x1e>
90023520:	90027238 	.word	0x90027238
90023524:	90027238 	.word	0x90027238
90023528:	90027238 	.word	0x90027238
9002352c:	90027254 	.word	0x90027254

90023530 <__retarget_lock_init_recursive>:
90023530:	4770      	bx	lr

90023532 <__retarget_lock_acquire_recursive>:
90023532:	4770      	bx	lr

90023534 <__retarget_lock_release_recursive>:
90023534:	4770      	bx	lr

90023536 <memcpy>:
90023536:	440a      	add	r2, r1
90023538:	4291      	cmp	r1, r2
9002353a:	f100 33ff 	add.w	r3, r0, #4294967295
9002353e:	d100      	bne.n	90023542 <memcpy+0xc>
90023540:	4770      	bx	lr
90023542:	b510      	push	{r4, lr}
90023544:	f811 4b01 	ldrb.w	r4, [r1], #1
90023548:	f803 4f01 	strb.w	r4, [r3, #1]!
9002354c:	4291      	cmp	r1, r2
9002354e:	d1f9      	bne.n	90023544 <memcpy+0xe>
90023550:	bd10      	pop	{r4, pc}
	...

90023554 <__register_exitproc>:
90023554:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
90023558:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 9002360c <__register_exitproc+0xb8>
9002355c:	4606      	mov	r6, r0
9002355e:	f8d8 0000 	ldr.w	r0, [r8]
90023562:	461f      	mov	r7, r3
90023564:	460d      	mov	r5, r1
90023566:	4691      	mov	r9, r2
90023568:	f7ff ffe3 	bl	90023532 <__retarget_lock_acquire_recursive>
9002356c:	4b23      	ldr	r3, [pc, #140]	; (900235fc <__register_exitproc+0xa8>)
9002356e:	681c      	ldr	r4, [r3, #0]
90023570:	b934      	cbnz	r4, 90023580 <__register_exitproc+0x2c>
90023572:	4c23      	ldr	r4, [pc, #140]	; (90023600 <__register_exitproc+0xac>)
90023574:	601c      	str	r4, [r3, #0]
90023576:	4b23      	ldr	r3, [pc, #140]	; (90023604 <__register_exitproc+0xb0>)
90023578:	b113      	cbz	r3, 90023580 <__register_exitproc+0x2c>
9002357a:	681b      	ldr	r3, [r3, #0]
9002357c:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
90023580:	6863      	ldr	r3, [r4, #4]
90023582:	2b1f      	cmp	r3, #31
90023584:	dd07      	ble.n	90023596 <__register_exitproc+0x42>
90023586:	f8d8 0000 	ldr.w	r0, [r8]
9002358a:	f7ff ffd3 	bl	90023534 <__retarget_lock_release_recursive>
9002358e:	f04f 30ff 	mov.w	r0, #4294967295
90023592:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
90023596:	b32e      	cbz	r6, 900235e4 <__register_exitproc+0x90>
90023598:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
9002359c:	b968      	cbnz	r0, 900235ba <__register_exitproc+0x66>
9002359e:	4b1a      	ldr	r3, [pc, #104]	; (90023608 <__register_exitproc+0xb4>)
900235a0:	2b00      	cmp	r3, #0
900235a2:	d0f0      	beq.n	90023586 <__register_exitproc+0x32>
900235a4:	f44f 7084 	mov.w	r0, #264	; 0x108
900235a8:	f7ff fc6e 	bl	90022e88 <malloc>
900235ac:	2800      	cmp	r0, #0
900235ae:	d0ea      	beq.n	90023586 <__register_exitproc+0x32>
900235b0:	2300      	movs	r3, #0
900235b2:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
900235b6:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
900235ba:	6863      	ldr	r3, [r4, #4]
900235bc:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
900235c0:	2201      	movs	r2, #1
900235c2:	409a      	lsls	r2, r3
900235c4:	eb00 0183 	add.w	r1, r0, r3, lsl #2
900235c8:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
900235cc:	4313      	orrs	r3, r2
900235ce:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
900235d2:	2e02      	cmp	r6, #2
900235d4:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
900235d8:	bf02      	ittt	eq
900235da:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
900235de:	4313      	orreq	r3, r2
900235e0:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
900235e4:	6863      	ldr	r3, [r4, #4]
900235e6:	f8d8 0000 	ldr.w	r0, [r8]
900235ea:	1c5a      	adds	r2, r3, #1
900235ec:	3302      	adds	r3, #2
900235ee:	6062      	str	r2, [r4, #4]
900235f0:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
900235f4:	f7ff ff9e 	bl	90023534 <__retarget_lock_release_recursive>
900235f8:	2000      	movs	r0, #0
900235fa:	e7ca      	b.n	90023592 <__register_exitproc+0x3e>
900235fc:	24026538 	.word	0x24026538
90023600:	240264ac 	.word	0x240264ac
90023604:	90027048 	.word	0x90027048
90023608:	90022e89 	.word	0x90022e89
9002360c:	2400013c 	.word	0x2400013c

90023610 <_free_r>:
90023610:	b537      	push	{r0, r1, r2, r4, r5, lr}
90023612:	2900      	cmp	r1, #0
90023614:	d044      	beq.n	900236a0 <_free_r+0x90>
90023616:	f851 3c04 	ldr.w	r3, [r1, #-4]
9002361a:	9001      	str	r0, [sp, #4]
9002361c:	2b00      	cmp	r3, #0
9002361e:	f1a1 0404 	sub.w	r4, r1, #4
90023622:	bfb8      	it	lt
90023624:	18e4      	addlt	r4, r4, r3
90023626:	f7ff fcdf 	bl	90022fe8 <__malloc_lock>
9002362a:	4a1e      	ldr	r2, [pc, #120]	; (900236a4 <_free_r+0x94>)
9002362c:	9801      	ldr	r0, [sp, #4]
9002362e:	6813      	ldr	r3, [r2, #0]
90023630:	b933      	cbnz	r3, 90023640 <_free_r+0x30>
90023632:	6063      	str	r3, [r4, #4]
90023634:	6014      	str	r4, [r2, #0]
90023636:	b003      	add	sp, #12
90023638:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
9002363c:	f7ff bcda 	b.w	90022ff4 <__malloc_unlock>
90023640:	42a3      	cmp	r3, r4
90023642:	d908      	bls.n	90023656 <_free_r+0x46>
90023644:	6825      	ldr	r5, [r4, #0]
90023646:	1961      	adds	r1, r4, r5
90023648:	428b      	cmp	r3, r1
9002364a:	bf01      	itttt	eq
9002364c:	6819      	ldreq	r1, [r3, #0]
9002364e:	685b      	ldreq	r3, [r3, #4]
90023650:	1949      	addeq	r1, r1, r5
90023652:	6021      	streq	r1, [r4, #0]
90023654:	e7ed      	b.n	90023632 <_free_r+0x22>
90023656:	461a      	mov	r2, r3
90023658:	685b      	ldr	r3, [r3, #4]
9002365a:	b10b      	cbz	r3, 90023660 <_free_r+0x50>
9002365c:	42a3      	cmp	r3, r4
9002365e:	d9fa      	bls.n	90023656 <_free_r+0x46>
90023660:	6811      	ldr	r1, [r2, #0]
90023662:	1855      	adds	r5, r2, r1
90023664:	42a5      	cmp	r5, r4
90023666:	d10b      	bne.n	90023680 <_free_r+0x70>
90023668:	6824      	ldr	r4, [r4, #0]
9002366a:	4421      	add	r1, r4
9002366c:	1854      	adds	r4, r2, r1
9002366e:	42a3      	cmp	r3, r4
90023670:	6011      	str	r1, [r2, #0]
90023672:	d1e0      	bne.n	90023636 <_free_r+0x26>
90023674:	681c      	ldr	r4, [r3, #0]
90023676:	685b      	ldr	r3, [r3, #4]
90023678:	6053      	str	r3, [r2, #4]
9002367a:	440c      	add	r4, r1
9002367c:	6014      	str	r4, [r2, #0]
9002367e:	e7da      	b.n	90023636 <_free_r+0x26>
90023680:	d902      	bls.n	90023688 <_free_r+0x78>
90023682:	230c      	movs	r3, #12
90023684:	6003      	str	r3, [r0, #0]
90023686:	e7d6      	b.n	90023636 <_free_r+0x26>
90023688:	6825      	ldr	r5, [r4, #0]
9002368a:	1961      	adds	r1, r4, r5
9002368c:	428b      	cmp	r3, r1
9002368e:	bf04      	itt	eq
90023690:	6819      	ldreq	r1, [r3, #0]
90023692:	685b      	ldreq	r3, [r3, #4]
90023694:	6063      	str	r3, [r4, #4]
90023696:	bf04      	itt	eq
90023698:	1949      	addeq	r1, r1, r5
9002369a:	6021      	streq	r1, [r4, #0]
9002369c:	6054      	str	r4, [r2, #4]
9002369e:	e7ca      	b.n	90023636 <_free_r+0x26>
900236a0:	b003      	add	sp, #12
900236a2:	bd30      	pop	{r4, r5, pc}
900236a4:	24026360 	.word	0x24026360

900236a8 <__sfputc_r>:
900236a8:	6893      	ldr	r3, [r2, #8]
900236aa:	3b01      	subs	r3, #1
900236ac:	2b00      	cmp	r3, #0
900236ae:	b410      	push	{r4}
900236b0:	6093      	str	r3, [r2, #8]
900236b2:	da08      	bge.n	900236c6 <__sfputc_r+0x1e>
900236b4:	6994      	ldr	r4, [r2, #24]
900236b6:	42a3      	cmp	r3, r4
900236b8:	db01      	blt.n	900236be <__sfputc_r+0x16>
900236ba:	290a      	cmp	r1, #10
900236bc:	d103      	bne.n	900236c6 <__sfputc_r+0x1e>
900236be:	f85d 4b04 	ldr.w	r4, [sp], #4
900236c2:	f7ff bdc2 	b.w	9002324a <__swbuf_r>
900236c6:	6813      	ldr	r3, [r2, #0]
900236c8:	1c58      	adds	r0, r3, #1
900236ca:	6010      	str	r0, [r2, #0]
900236cc:	7019      	strb	r1, [r3, #0]
900236ce:	4608      	mov	r0, r1
900236d0:	f85d 4b04 	ldr.w	r4, [sp], #4
900236d4:	4770      	bx	lr

900236d6 <__sfputs_r>:
900236d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
900236d8:	4606      	mov	r6, r0
900236da:	460f      	mov	r7, r1
900236dc:	4614      	mov	r4, r2
900236de:	18d5      	adds	r5, r2, r3
900236e0:	42ac      	cmp	r4, r5
900236e2:	d101      	bne.n	900236e8 <__sfputs_r+0x12>
900236e4:	2000      	movs	r0, #0
900236e6:	e007      	b.n	900236f8 <__sfputs_r+0x22>
900236e8:	f814 1b01 	ldrb.w	r1, [r4], #1
900236ec:	463a      	mov	r2, r7
900236ee:	4630      	mov	r0, r6
900236f0:	f7ff ffda 	bl	900236a8 <__sfputc_r>
900236f4:	1c43      	adds	r3, r0, #1
900236f6:	d1f3      	bne.n	900236e0 <__sfputs_r+0xa>
900236f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

900236fc <_vfiprintf_r>:
900236fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90023700:	460d      	mov	r5, r1
90023702:	b09d      	sub	sp, #116	; 0x74
90023704:	4614      	mov	r4, r2
90023706:	4698      	mov	r8, r3
90023708:	4606      	mov	r6, r0
9002370a:	b118      	cbz	r0, 90023714 <_vfiprintf_r+0x18>
9002370c:	6a03      	ldr	r3, [r0, #32]
9002370e:	b90b      	cbnz	r3, 90023714 <_vfiprintf_r+0x18>
90023710:	f7ff fd10 	bl	90023134 <__sinit>
90023714:	6e6b      	ldr	r3, [r5, #100]	; 0x64
90023716:	07d9      	lsls	r1, r3, #31
90023718:	d405      	bmi.n	90023726 <_vfiprintf_r+0x2a>
9002371a:	89ab      	ldrh	r3, [r5, #12]
9002371c:	059a      	lsls	r2, r3, #22
9002371e:	d402      	bmi.n	90023726 <_vfiprintf_r+0x2a>
90023720:	6da8      	ldr	r0, [r5, #88]	; 0x58
90023722:	f7ff ff06 	bl	90023532 <__retarget_lock_acquire_recursive>
90023726:	89ab      	ldrh	r3, [r5, #12]
90023728:	071b      	lsls	r3, r3, #28
9002372a:	d501      	bpl.n	90023730 <_vfiprintf_r+0x34>
9002372c:	692b      	ldr	r3, [r5, #16]
9002372e:	b99b      	cbnz	r3, 90023758 <_vfiprintf_r+0x5c>
90023730:	4629      	mov	r1, r5
90023732:	4630      	mov	r0, r6
90023734:	f7ff fdc6 	bl	900232c4 <__swsetup_r>
90023738:	b170      	cbz	r0, 90023758 <_vfiprintf_r+0x5c>
9002373a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
9002373c:	07dc      	lsls	r4, r3, #31
9002373e:	d504      	bpl.n	9002374a <_vfiprintf_r+0x4e>
90023740:	f04f 30ff 	mov.w	r0, #4294967295
90023744:	b01d      	add	sp, #116	; 0x74
90023746:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9002374a:	89ab      	ldrh	r3, [r5, #12]
9002374c:	0598      	lsls	r0, r3, #22
9002374e:	d4f7      	bmi.n	90023740 <_vfiprintf_r+0x44>
90023750:	6da8      	ldr	r0, [r5, #88]	; 0x58
90023752:	f7ff feef 	bl	90023534 <__retarget_lock_release_recursive>
90023756:	e7f3      	b.n	90023740 <_vfiprintf_r+0x44>
90023758:	2300      	movs	r3, #0
9002375a:	9309      	str	r3, [sp, #36]	; 0x24
9002375c:	2320      	movs	r3, #32
9002375e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
90023762:	f8cd 800c 	str.w	r8, [sp, #12]
90023766:	2330      	movs	r3, #48	; 0x30
90023768:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 9002391c <_vfiprintf_r+0x220>
9002376c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
90023770:	f04f 0901 	mov.w	r9, #1
90023774:	4623      	mov	r3, r4
90023776:	469a      	mov	sl, r3
90023778:	f813 2b01 	ldrb.w	r2, [r3], #1
9002377c:	b10a      	cbz	r2, 90023782 <_vfiprintf_r+0x86>
9002377e:	2a25      	cmp	r2, #37	; 0x25
90023780:	d1f9      	bne.n	90023776 <_vfiprintf_r+0x7a>
90023782:	ebba 0b04 	subs.w	fp, sl, r4
90023786:	d00b      	beq.n	900237a0 <_vfiprintf_r+0xa4>
90023788:	465b      	mov	r3, fp
9002378a:	4622      	mov	r2, r4
9002378c:	4629      	mov	r1, r5
9002378e:	4630      	mov	r0, r6
90023790:	f7ff ffa1 	bl	900236d6 <__sfputs_r>
90023794:	3001      	adds	r0, #1
90023796:	f000 80a9 	beq.w	900238ec <_vfiprintf_r+0x1f0>
9002379a:	9a09      	ldr	r2, [sp, #36]	; 0x24
9002379c:	445a      	add	r2, fp
9002379e:	9209      	str	r2, [sp, #36]	; 0x24
900237a0:	f89a 3000 	ldrb.w	r3, [sl]
900237a4:	2b00      	cmp	r3, #0
900237a6:	f000 80a1 	beq.w	900238ec <_vfiprintf_r+0x1f0>
900237aa:	2300      	movs	r3, #0
900237ac:	f04f 32ff 	mov.w	r2, #4294967295
900237b0:	e9cd 2305 	strd	r2, r3, [sp, #20]
900237b4:	f10a 0a01 	add.w	sl, sl, #1
900237b8:	9304      	str	r3, [sp, #16]
900237ba:	9307      	str	r3, [sp, #28]
900237bc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
900237c0:	931a      	str	r3, [sp, #104]	; 0x68
900237c2:	4654      	mov	r4, sl
900237c4:	2205      	movs	r2, #5
900237c6:	f814 1b01 	ldrb.w	r1, [r4], #1
900237ca:	4854      	ldr	r0, [pc, #336]	; (9002391c <_vfiprintf_r+0x220>)
900237cc:	f7dc fd88 	bl	900002e0 <memchr>
900237d0:	9a04      	ldr	r2, [sp, #16]
900237d2:	b9d8      	cbnz	r0, 9002380c <_vfiprintf_r+0x110>
900237d4:	06d1      	lsls	r1, r2, #27
900237d6:	bf44      	itt	mi
900237d8:	2320      	movmi	r3, #32
900237da:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
900237de:	0713      	lsls	r3, r2, #28
900237e0:	bf44      	itt	mi
900237e2:	232b      	movmi	r3, #43	; 0x2b
900237e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
900237e8:	f89a 3000 	ldrb.w	r3, [sl]
900237ec:	2b2a      	cmp	r3, #42	; 0x2a
900237ee:	d015      	beq.n	9002381c <_vfiprintf_r+0x120>
900237f0:	9a07      	ldr	r2, [sp, #28]
900237f2:	4654      	mov	r4, sl
900237f4:	2000      	movs	r0, #0
900237f6:	f04f 0c0a 	mov.w	ip, #10
900237fa:	4621      	mov	r1, r4
900237fc:	f811 3b01 	ldrb.w	r3, [r1], #1
90023800:	3b30      	subs	r3, #48	; 0x30
90023802:	2b09      	cmp	r3, #9
90023804:	d94d      	bls.n	900238a2 <_vfiprintf_r+0x1a6>
90023806:	b1b0      	cbz	r0, 90023836 <_vfiprintf_r+0x13a>
90023808:	9207      	str	r2, [sp, #28]
9002380a:	e014      	b.n	90023836 <_vfiprintf_r+0x13a>
9002380c:	eba0 0308 	sub.w	r3, r0, r8
90023810:	fa09 f303 	lsl.w	r3, r9, r3
90023814:	4313      	orrs	r3, r2
90023816:	9304      	str	r3, [sp, #16]
90023818:	46a2      	mov	sl, r4
9002381a:	e7d2      	b.n	900237c2 <_vfiprintf_r+0xc6>
9002381c:	9b03      	ldr	r3, [sp, #12]
9002381e:	1d19      	adds	r1, r3, #4
90023820:	681b      	ldr	r3, [r3, #0]
90023822:	9103      	str	r1, [sp, #12]
90023824:	2b00      	cmp	r3, #0
90023826:	bfbb      	ittet	lt
90023828:	425b      	neglt	r3, r3
9002382a:	f042 0202 	orrlt.w	r2, r2, #2
9002382e:	9307      	strge	r3, [sp, #28]
90023830:	9307      	strlt	r3, [sp, #28]
90023832:	bfb8      	it	lt
90023834:	9204      	strlt	r2, [sp, #16]
90023836:	7823      	ldrb	r3, [r4, #0]
90023838:	2b2e      	cmp	r3, #46	; 0x2e
9002383a:	d10c      	bne.n	90023856 <_vfiprintf_r+0x15a>
9002383c:	7863      	ldrb	r3, [r4, #1]
9002383e:	2b2a      	cmp	r3, #42	; 0x2a
90023840:	d134      	bne.n	900238ac <_vfiprintf_r+0x1b0>
90023842:	9b03      	ldr	r3, [sp, #12]
90023844:	1d1a      	adds	r2, r3, #4
90023846:	681b      	ldr	r3, [r3, #0]
90023848:	9203      	str	r2, [sp, #12]
9002384a:	2b00      	cmp	r3, #0
9002384c:	bfb8      	it	lt
9002384e:	f04f 33ff 	movlt.w	r3, #4294967295
90023852:	3402      	adds	r4, #2
90023854:	9305      	str	r3, [sp, #20]
90023856:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 9002392c <_vfiprintf_r+0x230>
9002385a:	7821      	ldrb	r1, [r4, #0]
9002385c:	2203      	movs	r2, #3
9002385e:	4650      	mov	r0, sl
90023860:	f7dc fd3e 	bl	900002e0 <memchr>
90023864:	b138      	cbz	r0, 90023876 <_vfiprintf_r+0x17a>
90023866:	9b04      	ldr	r3, [sp, #16]
90023868:	eba0 000a 	sub.w	r0, r0, sl
9002386c:	2240      	movs	r2, #64	; 0x40
9002386e:	4082      	lsls	r2, r0
90023870:	4313      	orrs	r3, r2
90023872:	3401      	adds	r4, #1
90023874:	9304      	str	r3, [sp, #16]
90023876:	f814 1b01 	ldrb.w	r1, [r4], #1
9002387a:	4829      	ldr	r0, [pc, #164]	; (90023920 <_vfiprintf_r+0x224>)
9002387c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
90023880:	2206      	movs	r2, #6
90023882:	f7dc fd2d 	bl	900002e0 <memchr>
90023886:	2800      	cmp	r0, #0
90023888:	d03f      	beq.n	9002390a <_vfiprintf_r+0x20e>
9002388a:	4b26      	ldr	r3, [pc, #152]	; (90023924 <_vfiprintf_r+0x228>)
9002388c:	bb1b      	cbnz	r3, 900238d6 <_vfiprintf_r+0x1da>
9002388e:	9b03      	ldr	r3, [sp, #12]
90023890:	3307      	adds	r3, #7
90023892:	f023 0307 	bic.w	r3, r3, #7
90023896:	3308      	adds	r3, #8
90023898:	9303      	str	r3, [sp, #12]
9002389a:	9b09      	ldr	r3, [sp, #36]	; 0x24
9002389c:	443b      	add	r3, r7
9002389e:	9309      	str	r3, [sp, #36]	; 0x24
900238a0:	e768      	b.n	90023774 <_vfiprintf_r+0x78>
900238a2:	fb0c 3202 	mla	r2, ip, r2, r3
900238a6:	460c      	mov	r4, r1
900238a8:	2001      	movs	r0, #1
900238aa:	e7a6      	b.n	900237fa <_vfiprintf_r+0xfe>
900238ac:	2300      	movs	r3, #0
900238ae:	3401      	adds	r4, #1
900238b0:	9305      	str	r3, [sp, #20]
900238b2:	4619      	mov	r1, r3
900238b4:	f04f 0c0a 	mov.w	ip, #10
900238b8:	4620      	mov	r0, r4
900238ba:	f810 2b01 	ldrb.w	r2, [r0], #1
900238be:	3a30      	subs	r2, #48	; 0x30
900238c0:	2a09      	cmp	r2, #9
900238c2:	d903      	bls.n	900238cc <_vfiprintf_r+0x1d0>
900238c4:	2b00      	cmp	r3, #0
900238c6:	d0c6      	beq.n	90023856 <_vfiprintf_r+0x15a>
900238c8:	9105      	str	r1, [sp, #20]
900238ca:	e7c4      	b.n	90023856 <_vfiprintf_r+0x15a>
900238cc:	fb0c 2101 	mla	r1, ip, r1, r2
900238d0:	4604      	mov	r4, r0
900238d2:	2301      	movs	r3, #1
900238d4:	e7f0      	b.n	900238b8 <_vfiprintf_r+0x1bc>
900238d6:	ab03      	add	r3, sp, #12
900238d8:	9300      	str	r3, [sp, #0]
900238da:	462a      	mov	r2, r5
900238dc:	4b12      	ldr	r3, [pc, #72]	; (90023928 <_vfiprintf_r+0x22c>)
900238de:	a904      	add	r1, sp, #16
900238e0:	4630      	mov	r0, r6
900238e2:	f3af 8000 	nop.w
900238e6:	4607      	mov	r7, r0
900238e8:	1c78      	adds	r0, r7, #1
900238ea:	d1d6      	bne.n	9002389a <_vfiprintf_r+0x19e>
900238ec:	6e6b      	ldr	r3, [r5, #100]	; 0x64
900238ee:	07d9      	lsls	r1, r3, #31
900238f0:	d405      	bmi.n	900238fe <_vfiprintf_r+0x202>
900238f2:	89ab      	ldrh	r3, [r5, #12]
900238f4:	059a      	lsls	r2, r3, #22
900238f6:	d402      	bmi.n	900238fe <_vfiprintf_r+0x202>
900238f8:	6da8      	ldr	r0, [r5, #88]	; 0x58
900238fa:	f7ff fe1b 	bl	90023534 <__retarget_lock_release_recursive>
900238fe:	89ab      	ldrh	r3, [r5, #12]
90023900:	065b      	lsls	r3, r3, #25
90023902:	f53f af1d 	bmi.w	90023740 <_vfiprintf_r+0x44>
90023906:	9809      	ldr	r0, [sp, #36]	; 0x24
90023908:	e71c      	b.n	90023744 <_vfiprintf_r+0x48>
9002390a:	ab03      	add	r3, sp, #12
9002390c:	9300      	str	r3, [sp, #0]
9002390e:	462a      	mov	r2, r5
90023910:	4b05      	ldr	r3, [pc, #20]	; (90023928 <_vfiprintf_r+0x22c>)
90023912:	a904      	add	r1, sp, #16
90023914:	4630      	mov	r0, r6
90023916:	f000 f879 	bl	90023a0c <_printf_i>
9002391a:	e7e4      	b.n	900238e6 <_vfiprintf_r+0x1ea>
9002391c:	9002704c 	.word	0x9002704c
90023920:	90027056 	.word	0x90027056
90023924:	00000000 	.word	0x00000000
90023928:	900236d7 	.word	0x900236d7
9002392c:	90027052 	.word	0x90027052

90023930 <_printf_common>:
90023930:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
90023934:	4616      	mov	r6, r2
90023936:	4699      	mov	r9, r3
90023938:	688a      	ldr	r2, [r1, #8]
9002393a:	690b      	ldr	r3, [r1, #16]
9002393c:	f8dd 8020 	ldr.w	r8, [sp, #32]
90023940:	4293      	cmp	r3, r2
90023942:	bfb8      	it	lt
90023944:	4613      	movlt	r3, r2
90023946:	6033      	str	r3, [r6, #0]
90023948:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
9002394c:	4607      	mov	r7, r0
9002394e:	460c      	mov	r4, r1
90023950:	b10a      	cbz	r2, 90023956 <_printf_common+0x26>
90023952:	3301      	adds	r3, #1
90023954:	6033      	str	r3, [r6, #0]
90023956:	6823      	ldr	r3, [r4, #0]
90023958:	0699      	lsls	r1, r3, #26
9002395a:	bf42      	ittt	mi
9002395c:	6833      	ldrmi	r3, [r6, #0]
9002395e:	3302      	addmi	r3, #2
90023960:	6033      	strmi	r3, [r6, #0]
90023962:	6825      	ldr	r5, [r4, #0]
90023964:	f015 0506 	ands.w	r5, r5, #6
90023968:	d106      	bne.n	90023978 <_printf_common+0x48>
9002396a:	f104 0a19 	add.w	sl, r4, #25
9002396e:	68e3      	ldr	r3, [r4, #12]
90023970:	6832      	ldr	r2, [r6, #0]
90023972:	1a9b      	subs	r3, r3, r2
90023974:	42ab      	cmp	r3, r5
90023976:	dc26      	bgt.n	900239c6 <_printf_common+0x96>
90023978:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
9002397c:	1e13      	subs	r3, r2, #0
9002397e:	6822      	ldr	r2, [r4, #0]
90023980:	bf18      	it	ne
90023982:	2301      	movne	r3, #1
90023984:	0692      	lsls	r2, r2, #26
90023986:	d42b      	bmi.n	900239e0 <_printf_common+0xb0>
90023988:	f104 0243 	add.w	r2, r4, #67	; 0x43
9002398c:	4649      	mov	r1, r9
9002398e:	4638      	mov	r0, r7
90023990:	47c0      	blx	r8
90023992:	3001      	adds	r0, #1
90023994:	d01e      	beq.n	900239d4 <_printf_common+0xa4>
90023996:	6823      	ldr	r3, [r4, #0]
90023998:	6922      	ldr	r2, [r4, #16]
9002399a:	f003 0306 	and.w	r3, r3, #6
9002399e:	2b04      	cmp	r3, #4
900239a0:	bf02      	ittt	eq
900239a2:	68e5      	ldreq	r5, [r4, #12]
900239a4:	6833      	ldreq	r3, [r6, #0]
900239a6:	1aed      	subeq	r5, r5, r3
900239a8:	68a3      	ldr	r3, [r4, #8]
900239aa:	bf0c      	ite	eq
900239ac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
900239b0:	2500      	movne	r5, #0
900239b2:	4293      	cmp	r3, r2
900239b4:	bfc4      	itt	gt
900239b6:	1a9b      	subgt	r3, r3, r2
900239b8:	18ed      	addgt	r5, r5, r3
900239ba:	2600      	movs	r6, #0
900239bc:	341a      	adds	r4, #26
900239be:	42b5      	cmp	r5, r6
900239c0:	d11a      	bne.n	900239f8 <_printf_common+0xc8>
900239c2:	2000      	movs	r0, #0
900239c4:	e008      	b.n	900239d8 <_printf_common+0xa8>
900239c6:	2301      	movs	r3, #1
900239c8:	4652      	mov	r2, sl
900239ca:	4649      	mov	r1, r9
900239cc:	4638      	mov	r0, r7
900239ce:	47c0      	blx	r8
900239d0:	3001      	adds	r0, #1
900239d2:	d103      	bne.n	900239dc <_printf_common+0xac>
900239d4:	f04f 30ff 	mov.w	r0, #4294967295
900239d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
900239dc:	3501      	adds	r5, #1
900239de:	e7c6      	b.n	9002396e <_printf_common+0x3e>
900239e0:	18e1      	adds	r1, r4, r3
900239e2:	1c5a      	adds	r2, r3, #1
900239e4:	2030      	movs	r0, #48	; 0x30
900239e6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
900239ea:	4422      	add	r2, r4
900239ec:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
900239f0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
900239f4:	3302      	adds	r3, #2
900239f6:	e7c7      	b.n	90023988 <_printf_common+0x58>
900239f8:	2301      	movs	r3, #1
900239fa:	4622      	mov	r2, r4
900239fc:	4649      	mov	r1, r9
900239fe:	4638      	mov	r0, r7
90023a00:	47c0      	blx	r8
90023a02:	3001      	adds	r0, #1
90023a04:	d0e6      	beq.n	900239d4 <_printf_common+0xa4>
90023a06:	3601      	adds	r6, #1
90023a08:	e7d9      	b.n	900239be <_printf_common+0x8e>
	...

90023a0c <_printf_i>:
90023a0c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
90023a10:	7e0f      	ldrb	r7, [r1, #24]
90023a12:	9d0c      	ldr	r5, [sp, #48]	; 0x30
90023a14:	2f78      	cmp	r7, #120	; 0x78
90023a16:	4691      	mov	r9, r2
90023a18:	4680      	mov	r8, r0
90023a1a:	460c      	mov	r4, r1
90023a1c:	469a      	mov	sl, r3
90023a1e:	f101 0243 	add.w	r2, r1, #67	; 0x43
90023a22:	d807      	bhi.n	90023a34 <_printf_i+0x28>
90023a24:	2f62      	cmp	r7, #98	; 0x62
90023a26:	d80a      	bhi.n	90023a3e <_printf_i+0x32>
90023a28:	2f00      	cmp	r7, #0
90023a2a:	f000 80d4 	beq.w	90023bd6 <_printf_i+0x1ca>
90023a2e:	2f58      	cmp	r7, #88	; 0x58
90023a30:	f000 80c0 	beq.w	90023bb4 <_printf_i+0x1a8>
90023a34:	f104 0542 	add.w	r5, r4, #66	; 0x42
90023a38:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
90023a3c:	e03a      	b.n	90023ab4 <_printf_i+0xa8>
90023a3e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
90023a42:	2b15      	cmp	r3, #21
90023a44:	d8f6      	bhi.n	90023a34 <_printf_i+0x28>
90023a46:	a101      	add	r1, pc, #4	; (adr r1, 90023a4c <_printf_i+0x40>)
90023a48:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
90023a4c:	90023aa5 	.word	0x90023aa5
90023a50:	90023ab9 	.word	0x90023ab9
90023a54:	90023a35 	.word	0x90023a35
90023a58:	90023a35 	.word	0x90023a35
90023a5c:	90023a35 	.word	0x90023a35
90023a60:	90023a35 	.word	0x90023a35
90023a64:	90023ab9 	.word	0x90023ab9
90023a68:	90023a35 	.word	0x90023a35
90023a6c:	90023a35 	.word	0x90023a35
90023a70:	90023a35 	.word	0x90023a35
90023a74:	90023a35 	.word	0x90023a35
90023a78:	90023bbd 	.word	0x90023bbd
90023a7c:	90023ae5 	.word	0x90023ae5
90023a80:	90023b77 	.word	0x90023b77
90023a84:	90023a35 	.word	0x90023a35
90023a88:	90023a35 	.word	0x90023a35
90023a8c:	90023bdf 	.word	0x90023bdf
90023a90:	90023a35 	.word	0x90023a35
90023a94:	90023ae5 	.word	0x90023ae5
90023a98:	90023a35 	.word	0x90023a35
90023a9c:	90023a35 	.word	0x90023a35
90023aa0:	90023b7f 	.word	0x90023b7f
90023aa4:	682b      	ldr	r3, [r5, #0]
90023aa6:	1d1a      	adds	r2, r3, #4
90023aa8:	681b      	ldr	r3, [r3, #0]
90023aaa:	602a      	str	r2, [r5, #0]
90023aac:	f104 0542 	add.w	r5, r4, #66	; 0x42
90023ab0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
90023ab4:	2301      	movs	r3, #1
90023ab6:	e09f      	b.n	90023bf8 <_printf_i+0x1ec>
90023ab8:	6820      	ldr	r0, [r4, #0]
90023aba:	682b      	ldr	r3, [r5, #0]
90023abc:	0607      	lsls	r7, r0, #24
90023abe:	f103 0104 	add.w	r1, r3, #4
90023ac2:	6029      	str	r1, [r5, #0]
90023ac4:	d501      	bpl.n	90023aca <_printf_i+0xbe>
90023ac6:	681e      	ldr	r6, [r3, #0]
90023ac8:	e003      	b.n	90023ad2 <_printf_i+0xc6>
90023aca:	0646      	lsls	r6, r0, #25
90023acc:	d5fb      	bpl.n	90023ac6 <_printf_i+0xba>
90023ace:	f9b3 6000 	ldrsh.w	r6, [r3]
90023ad2:	2e00      	cmp	r6, #0
90023ad4:	da03      	bge.n	90023ade <_printf_i+0xd2>
90023ad6:	232d      	movs	r3, #45	; 0x2d
90023ad8:	4276      	negs	r6, r6
90023ada:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
90023ade:	485a      	ldr	r0, [pc, #360]	; (90023c48 <_printf_i+0x23c>)
90023ae0:	230a      	movs	r3, #10
90023ae2:	e012      	b.n	90023b0a <_printf_i+0xfe>
90023ae4:	682b      	ldr	r3, [r5, #0]
90023ae6:	6820      	ldr	r0, [r4, #0]
90023ae8:	1d19      	adds	r1, r3, #4
90023aea:	6029      	str	r1, [r5, #0]
90023aec:	0605      	lsls	r5, r0, #24
90023aee:	d501      	bpl.n	90023af4 <_printf_i+0xe8>
90023af0:	681e      	ldr	r6, [r3, #0]
90023af2:	e002      	b.n	90023afa <_printf_i+0xee>
90023af4:	0641      	lsls	r1, r0, #25
90023af6:	d5fb      	bpl.n	90023af0 <_printf_i+0xe4>
90023af8:	881e      	ldrh	r6, [r3, #0]
90023afa:	4853      	ldr	r0, [pc, #332]	; (90023c48 <_printf_i+0x23c>)
90023afc:	2f6f      	cmp	r7, #111	; 0x6f
90023afe:	bf0c      	ite	eq
90023b00:	2308      	moveq	r3, #8
90023b02:	230a      	movne	r3, #10
90023b04:	2100      	movs	r1, #0
90023b06:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
90023b0a:	6865      	ldr	r5, [r4, #4]
90023b0c:	60a5      	str	r5, [r4, #8]
90023b0e:	2d00      	cmp	r5, #0
90023b10:	bfa2      	ittt	ge
90023b12:	6821      	ldrge	r1, [r4, #0]
90023b14:	f021 0104 	bicge.w	r1, r1, #4
90023b18:	6021      	strge	r1, [r4, #0]
90023b1a:	b90e      	cbnz	r6, 90023b20 <_printf_i+0x114>
90023b1c:	2d00      	cmp	r5, #0
90023b1e:	d04b      	beq.n	90023bb8 <_printf_i+0x1ac>
90023b20:	4615      	mov	r5, r2
90023b22:	fbb6 f1f3 	udiv	r1, r6, r3
90023b26:	fb03 6711 	mls	r7, r3, r1, r6
90023b2a:	5dc7      	ldrb	r7, [r0, r7]
90023b2c:	f805 7d01 	strb.w	r7, [r5, #-1]!
90023b30:	4637      	mov	r7, r6
90023b32:	42bb      	cmp	r3, r7
90023b34:	460e      	mov	r6, r1
90023b36:	d9f4      	bls.n	90023b22 <_printf_i+0x116>
90023b38:	2b08      	cmp	r3, #8
90023b3a:	d10b      	bne.n	90023b54 <_printf_i+0x148>
90023b3c:	6823      	ldr	r3, [r4, #0]
90023b3e:	07de      	lsls	r6, r3, #31
90023b40:	d508      	bpl.n	90023b54 <_printf_i+0x148>
90023b42:	6923      	ldr	r3, [r4, #16]
90023b44:	6861      	ldr	r1, [r4, #4]
90023b46:	4299      	cmp	r1, r3
90023b48:	bfde      	ittt	le
90023b4a:	2330      	movle	r3, #48	; 0x30
90023b4c:	f805 3c01 	strble.w	r3, [r5, #-1]
90023b50:	f105 35ff 	addle.w	r5, r5, #4294967295
90023b54:	1b52      	subs	r2, r2, r5
90023b56:	6122      	str	r2, [r4, #16]
90023b58:	f8cd a000 	str.w	sl, [sp]
90023b5c:	464b      	mov	r3, r9
90023b5e:	aa03      	add	r2, sp, #12
90023b60:	4621      	mov	r1, r4
90023b62:	4640      	mov	r0, r8
90023b64:	f7ff fee4 	bl	90023930 <_printf_common>
90023b68:	3001      	adds	r0, #1
90023b6a:	d14a      	bne.n	90023c02 <_printf_i+0x1f6>
90023b6c:	f04f 30ff 	mov.w	r0, #4294967295
90023b70:	b004      	add	sp, #16
90023b72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
90023b76:	6823      	ldr	r3, [r4, #0]
90023b78:	f043 0320 	orr.w	r3, r3, #32
90023b7c:	6023      	str	r3, [r4, #0]
90023b7e:	4833      	ldr	r0, [pc, #204]	; (90023c4c <_printf_i+0x240>)
90023b80:	2778      	movs	r7, #120	; 0x78
90023b82:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
90023b86:	6823      	ldr	r3, [r4, #0]
90023b88:	6829      	ldr	r1, [r5, #0]
90023b8a:	061f      	lsls	r7, r3, #24
90023b8c:	f851 6b04 	ldr.w	r6, [r1], #4
90023b90:	d402      	bmi.n	90023b98 <_printf_i+0x18c>
90023b92:	065f      	lsls	r7, r3, #25
90023b94:	bf48      	it	mi
90023b96:	b2b6      	uxthmi	r6, r6
90023b98:	07df      	lsls	r7, r3, #31
90023b9a:	bf48      	it	mi
90023b9c:	f043 0320 	orrmi.w	r3, r3, #32
90023ba0:	6029      	str	r1, [r5, #0]
90023ba2:	bf48      	it	mi
90023ba4:	6023      	strmi	r3, [r4, #0]
90023ba6:	b91e      	cbnz	r6, 90023bb0 <_printf_i+0x1a4>
90023ba8:	6823      	ldr	r3, [r4, #0]
90023baa:	f023 0320 	bic.w	r3, r3, #32
90023bae:	6023      	str	r3, [r4, #0]
90023bb0:	2310      	movs	r3, #16
90023bb2:	e7a7      	b.n	90023b04 <_printf_i+0xf8>
90023bb4:	4824      	ldr	r0, [pc, #144]	; (90023c48 <_printf_i+0x23c>)
90023bb6:	e7e4      	b.n	90023b82 <_printf_i+0x176>
90023bb8:	4615      	mov	r5, r2
90023bba:	e7bd      	b.n	90023b38 <_printf_i+0x12c>
90023bbc:	682b      	ldr	r3, [r5, #0]
90023bbe:	6826      	ldr	r6, [r4, #0]
90023bc0:	6961      	ldr	r1, [r4, #20]
90023bc2:	1d18      	adds	r0, r3, #4
90023bc4:	6028      	str	r0, [r5, #0]
90023bc6:	0635      	lsls	r5, r6, #24
90023bc8:	681b      	ldr	r3, [r3, #0]
90023bca:	d501      	bpl.n	90023bd0 <_printf_i+0x1c4>
90023bcc:	6019      	str	r1, [r3, #0]
90023bce:	e002      	b.n	90023bd6 <_printf_i+0x1ca>
90023bd0:	0670      	lsls	r0, r6, #25
90023bd2:	d5fb      	bpl.n	90023bcc <_printf_i+0x1c0>
90023bd4:	8019      	strh	r1, [r3, #0]
90023bd6:	2300      	movs	r3, #0
90023bd8:	6123      	str	r3, [r4, #16]
90023bda:	4615      	mov	r5, r2
90023bdc:	e7bc      	b.n	90023b58 <_printf_i+0x14c>
90023bde:	682b      	ldr	r3, [r5, #0]
90023be0:	1d1a      	adds	r2, r3, #4
90023be2:	602a      	str	r2, [r5, #0]
90023be4:	681d      	ldr	r5, [r3, #0]
90023be6:	6862      	ldr	r2, [r4, #4]
90023be8:	2100      	movs	r1, #0
90023bea:	4628      	mov	r0, r5
90023bec:	f7dc fb78 	bl	900002e0 <memchr>
90023bf0:	b108      	cbz	r0, 90023bf6 <_printf_i+0x1ea>
90023bf2:	1b40      	subs	r0, r0, r5
90023bf4:	6060      	str	r0, [r4, #4]
90023bf6:	6863      	ldr	r3, [r4, #4]
90023bf8:	6123      	str	r3, [r4, #16]
90023bfa:	2300      	movs	r3, #0
90023bfc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
90023c00:	e7aa      	b.n	90023b58 <_printf_i+0x14c>
90023c02:	6923      	ldr	r3, [r4, #16]
90023c04:	462a      	mov	r2, r5
90023c06:	4649      	mov	r1, r9
90023c08:	4640      	mov	r0, r8
90023c0a:	47d0      	blx	sl
90023c0c:	3001      	adds	r0, #1
90023c0e:	d0ad      	beq.n	90023b6c <_printf_i+0x160>
90023c10:	6823      	ldr	r3, [r4, #0]
90023c12:	079b      	lsls	r3, r3, #30
90023c14:	d413      	bmi.n	90023c3e <_printf_i+0x232>
90023c16:	68e0      	ldr	r0, [r4, #12]
90023c18:	9b03      	ldr	r3, [sp, #12]
90023c1a:	4298      	cmp	r0, r3
90023c1c:	bfb8      	it	lt
90023c1e:	4618      	movlt	r0, r3
90023c20:	e7a6      	b.n	90023b70 <_printf_i+0x164>
90023c22:	2301      	movs	r3, #1
90023c24:	4632      	mov	r2, r6
90023c26:	4649      	mov	r1, r9
90023c28:	4640      	mov	r0, r8
90023c2a:	47d0      	blx	sl
90023c2c:	3001      	adds	r0, #1
90023c2e:	d09d      	beq.n	90023b6c <_printf_i+0x160>
90023c30:	3501      	adds	r5, #1
90023c32:	68e3      	ldr	r3, [r4, #12]
90023c34:	9903      	ldr	r1, [sp, #12]
90023c36:	1a5b      	subs	r3, r3, r1
90023c38:	42ab      	cmp	r3, r5
90023c3a:	dcf2      	bgt.n	90023c22 <_printf_i+0x216>
90023c3c:	e7eb      	b.n	90023c16 <_printf_i+0x20a>
90023c3e:	2500      	movs	r5, #0
90023c40:	f104 0619 	add.w	r6, r4, #25
90023c44:	e7f5      	b.n	90023c32 <_printf_i+0x226>
90023c46:	bf00      	nop
90023c48:	9002705d 	.word	0x9002705d
90023c4c:	9002706e 	.word	0x9002706e

90023c50 <__sflush_r>:
90023c50:	898a      	ldrh	r2, [r1, #12]
90023c52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
90023c56:	4605      	mov	r5, r0
90023c58:	0710      	lsls	r0, r2, #28
90023c5a:	460c      	mov	r4, r1
90023c5c:	d458      	bmi.n	90023d10 <__sflush_r+0xc0>
90023c5e:	684b      	ldr	r3, [r1, #4]
90023c60:	2b00      	cmp	r3, #0
90023c62:	dc05      	bgt.n	90023c70 <__sflush_r+0x20>
90023c64:	6c0b      	ldr	r3, [r1, #64]	; 0x40
90023c66:	2b00      	cmp	r3, #0
90023c68:	dc02      	bgt.n	90023c70 <__sflush_r+0x20>
90023c6a:	2000      	movs	r0, #0
90023c6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
90023c70:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
90023c72:	2e00      	cmp	r6, #0
90023c74:	d0f9      	beq.n	90023c6a <__sflush_r+0x1a>
90023c76:	2300      	movs	r3, #0
90023c78:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
90023c7c:	682f      	ldr	r7, [r5, #0]
90023c7e:	6a21      	ldr	r1, [r4, #32]
90023c80:	602b      	str	r3, [r5, #0]
90023c82:	d032      	beq.n	90023cea <__sflush_r+0x9a>
90023c84:	6d60      	ldr	r0, [r4, #84]	; 0x54
90023c86:	89a3      	ldrh	r3, [r4, #12]
90023c88:	075a      	lsls	r2, r3, #29
90023c8a:	d505      	bpl.n	90023c98 <__sflush_r+0x48>
90023c8c:	6863      	ldr	r3, [r4, #4]
90023c8e:	1ac0      	subs	r0, r0, r3
90023c90:	6b63      	ldr	r3, [r4, #52]	; 0x34
90023c92:	b10b      	cbz	r3, 90023c98 <__sflush_r+0x48>
90023c94:	6c23      	ldr	r3, [r4, #64]	; 0x40
90023c96:	1ac0      	subs	r0, r0, r3
90023c98:	2300      	movs	r3, #0
90023c9a:	4602      	mov	r2, r0
90023c9c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
90023c9e:	6a21      	ldr	r1, [r4, #32]
90023ca0:	4628      	mov	r0, r5
90023ca2:	47b0      	blx	r6
90023ca4:	1c43      	adds	r3, r0, #1
90023ca6:	89a3      	ldrh	r3, [r4, #12]
90023ca8:	d106      	bne.n	90023cb8 <__sflush_r+0x68>
90023caa:	6829      	ldr	r1, [r5, #0]
90023cac:	291d      	cmp	r1, #29
90023cae:	d82b      	bhi.n	90023d08 <__sflush_r+0xb8>
90023cb0:	4a29      	ldr	r2, [pc, #164]	; (90023d58 <__sflush_r+0x108>)
90023cb2:	410a      	asrs	r2, r1
90023cb4:	07d6      	lsls	r6, r2, #31
90023cb6:	d427      	bmi.n	90023d08 <__sflush_r+0xb8>
90023cb8:	2200      	movs	r2, #0
90023cba:	6062      	str	r2, [r4, #4]
90023cbc:	04d9      	lsls	r1, r3, #19
90023cbe:	6922      	ldr	r2, [r4, #16]
90023cc0:	6022      	str	r2, [r4, #0]
90023cc2:	d504      	bpl.n	90023cce <__sflush_r+0x7e>
90023cc4:	1c42      	adds	r2, r0, #1
90023cc6:	d101      	bne.n	90023ccc <__sflush_r+0x7c>
90023cc8:	682b      	ldr	r3, [r5, #0]
90023cca:	b903      	cbnz	r3, 90023cce <__sflush_r+0x7e>
90023ccc:	6560      	str	r0, [r4, #84]	; 0x54
90023cce:	6b61      	ldr	r1, [r4, #52]	; 0x34
90023cd0:	602f      	str	r7, [r5, #0]
90023cd2:	2900      	cmp	r1, #0
90023cd4:	d0c9      	beq.n	90023c6a <__sflush_r+0x1a>
90023cd6:	f104 0344 	add.w	r3, r4, #68	; 0x44
90023cda:	4299      	cmp	r1, r3
90023cdc:	d002      	beq.n	90023ce4 <__sflush_r+0x94>
90023cde:	4628      	mov	r0, r5
90023ce0:	f7ff fc96 	bl	90023610 <_free_r>
90023ce4:	2000      	movs	r0, #0
90023ce6:	6360      	str	r0, [r4, #52]	; 0x34
90023ce8:	e7c0      	b.n	90023c6c <__sflush_r+0x1c>
90023cea:	2301      	movs	r3, #1
90023cec:	4628      	mov	r0, r5
90023cee:	47b0      	blx	r6
90023cf0:	1c41      	adds	r1, r0, #1
90023cf2:	d1c8      	bne.n	90023c86 <__sflush_r+0x36>
90023cf4:	682b      	ldr	r3, [r5, #0]
90023cf6:	2b00      	cmp	r3, #0
90023cf8:	d0c5      	beq.n	90023c86 <__sflush_r+0x36>
90023cfa:	2b1d      	cmp	r3, #29
90023cfc:	d001      	beq.n	90023d02 <__sflush_r+0xb2>
90023cfe:	2b16      	cmp	r3, #22
90023d00:	d101      	bne.n	90023d06 <__sflush_r+0xb6>
90023d02:	602f      	str	r7, [r5, #0]
90023d04:	e7b1      	b.n	90023c6a <__sflush_r+0x1a>
90023d06:	89a3      	ldrh	r3, [r4, #12]
90023d08:	f043 0340 	orr.w	r3, r3, #64	; 0x40
90023d0c:	81a3      	strh	r3, [r4, #12]
90023d0e:	e7ad      	b.n	90023c6c <__sflush_r+0x1c>
90023d10:	690f      	ldr	r7, [r1, #16]
90023d12:	2f00      	cmp	r7, #0
90023d14:	d0a9      	beq.n	90023c6a <__sflush_r+0x1a>
90023d16:	0793      	lsls	r3, r2, #30
90023d18:	680e      	ldr	r6, [r1, #0]
90023d1a:	bf08      	it	eq
90023d1c:	694b      	ldreq	r3, [r1, #20]
90023d1e:	600f      	str	r7, [r1, #0]
90023d20:	bf18      	it	ne
90023d22:	2300      	movne	r3, #0
90023d24:	eba6 0807 	sub.w	r8, r6, r7
90023d28:	608b      	str	r3, [r1, #8]
90023d2a:	f1b8 0f00 	cmp.w	r8, #0
90023d2e:	dd9c      	ble.n	90023c6a <__sflush_r+0x1a>
90023d30:	6a21      	ldr	r1, [r4, #32]
90023d32:	6aa6      	ldr	r6, [r4, #40]	; 0x28
90023d34:	4643      	mov	r3, r8
90023d36:	463a      	mov	r2, r7
90023d38:	4628      	mov	r0, r5
90023d3a:	47b0      	blx	r6
90023d3c:	2800      	cmp	r0, #0
90023d3e:	dc06      	bgt.n	90023d4e <__sflush_r+0xfe>
90023d40:	89a3      	ldrh	r3, [r4, #12]
90023d42:	f043 0340 	orr.w	r3, r3, #64	; 0x40
90023d46:	81a3      	strh	r3, [r4, #12]
90023d48:	f04f 30ff 	mov.w	r0, #4294967295
90023d4c:	e78e      	b.n	90023c6c <__sflush_r+0x1c>
90023d4e:	4407      	add	r7, r0
90023d50:	eba8 0800 	sub.w	r8, r8, r0
90023d54:	e7e9      	b.n	90023d2a <__sflush_r+0xda>
90023d56:	bf00      	nop
90023d58:	dfbffffe 	.word	0xdfbffffe

90023d5c <_fflush_r>:
90023d5c:	b538      	push	{r3, r4, r5, lr}
90023d5e:	690b      	ldr	r3, [r1, #16]
90023d60:	4605      	mov	r5, r0
90023d62:	460c      	mov	r4, r1
90023d64:	b913      	cbnz	r3, 90023d6c <_fflush_r+0x10>
90023d66:	2500      	movs	r5, #0
90023d68:	4628      	mov	r0, r5
90023d6a:	bd38      	pop	{r3, r4, r5, pc}
90023d6c:	b118      	cbz	r0, 90023d76 <_fflush_r+0x1a>
90023d6e:	6a03      	ldr	r3, [r0, #32]
90023d70:	b90b      	cbnz	r3, 90023d76 <_fflush_r+0x1a>
90023d72:	f7ff f9df 	bl	90023134 <__sinit>
90023d76:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
90023d7a:	2b00      	cmp	r3, #0
90023d7c:	d0f3      	beq.n	90023d66 <_fflush_r+0xa>
90023d7e:	6e62      	ldr	r2, [r4, #100]	; 0x64
90023d80:	07d0      	lsls	r0, r2, #31
90023d82:	d404      	bmi.n	90023d8e <_fflush_r+0x32>
90023d84:	0599      	lsls	r1, r3, #22
90023d86:	d402      	bmi.n	90023d8e <_fflush_r+0x32>
90023d88:	6da0      	ldr	r0, [r4, #88]	; 0x58
90023d8a:	f7ff fbd2 	bl	90023532 <__retarget_lock_acquire_recursive>
90023d8e:	4628      	mov	r0, r5
90023d90:	4621      	mov	r1, r4
90023d92:	f7ff ff5d 	bl	90023c50 <__sflush_r>
90023d96:	6e63      	ldr	r3, [r4, #100]	; 0x64
90023d98:	07da      	lsls	r2, r3, #31
90023d9a:	4605      	mov	r5, r0
90023d9c:	d4e4      	bmi.n	90023d68 <_fflush_r+0xc>
90023d9e:	89a3      	ldrh	r3, [r4, #12]
90023da0:	059b      	lsls	r3, r3, #22
90023da2:	d4e1      	bmi.n	90023d68 <_fflush_r+0xc>
90023da4:	6da0      	ldr	r0, [r4, #88]	; 0x58
90023da6:	f7ff fbc5 	bl	90023534 <__retarget_lock_release_recursive>
90023daa:	e7dd      	b.n	90023d68 <_fflush_r+0xc>

90023dac <__swhatbuf_r>:
90023dac:	b570      	push	{r4, r5, r6, lr}
90023dae:	460c      	mov	r4, r1
90023db0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
90023db4:	2900      	cmp	r1, #0
90023db6:	b096      	sub	sp, #88	; 0x58
90023db8:	4615      	mov	r5, r2
90023dba:	461e      	mov	r6, r3
90023dbc:	da0d      	bge.n	90023dda <__swhatbuf_r+0x2e>
90023dbe:	89a3      	ldrh	r3, [r4, #12]
90023dc0:	f013 0f80 	tst.w	r3, #128	; 0x80
90023dc4:	f04f 0100 	mov.w	r1, #0
90023dc8:	bf0c      	ite	eq
90023dca:	f44f 6380 	moveq.w	r3, #1024	; 0x400
90023dce:	2340      	movne	r3, #64	; 0x40
90023dd0:	2000      	movs	r0, #0
90023dd2:	6031      	str	r1, [r6, #0]
90023dd4:	602b      	str	r3, [r5, #0]
90023dd6:	b016      	add	sp, #88	; 0x58
90023dd8:	bd70      	pop	{r4, r5, r6, pc}
90023dda:	466a      	mov	r2, sp
90023ddc:	f000 f848 	bl	90023e70 <_fstat_r>
90023de0:	2800      	cmp	r0, #0
90023de2:	dbec      	blt.n	90023dbe <__swhatbuf_r+0x12>
90023de4:	9901      	ldr	r1, [sp, #4]
90023de6:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
90023dea:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
90023dee:	4259      	negs	r1, r3
90023df0:	4159      	adcs	r1, r3
90023df2:	f44f 6380 	mov.w	r3, #1024	; 0x400
90023df6:	e7eb      	b.n	90023dd0 <__swhatbuf_r+0x24>

90023df8 <__smakebuf_r>:
90023df8:	898b      	ldrh	r3, [r1, #12]
90023dfa:	b573      	push	{r0, r1, r4, r5, r6, lr}
90023dfc:	079d      	lsls	r5, r3, #30
90023dfe:	4606      	mov	r6, r0
90023e00:	460c      	mov	r4, r1
90023e02:	d507      	bpl.n	90023e14 <__smakebuf_r+0x1c>
90023e04:	f104 0347 	add.w	r3, r4, #71	; 0x47
90023e08:	6023      	str	r3, [r4, #0]
90023e0a:	6123      	str	r3, [r4, #16]
90023e0c:	2301      	movs	r3, #1
90023e0e:	6163      	str	r3, [r4, #20]
90023e10:	b002      	add	sp, #8
90023e12:	bd70      	pop	{r4, r5, r6, pc}
90023e14:	ab01      	add	r3, sp, #4
90023e16:	466a      	mov	r2, sp
90023e18:	f7ff ffc8 	bl	90023dac <__swhatbuf_r>
90023e1c:	9900      	ldr	r1, [sp, #0]
90023e1e:	4605      	mov	r5, r0
90023e20:	4630      	mov	r0, r6
90023e22:	f7ff f861 	bl	90022ee8 <_malloc_r>
90023e26:	b948      	cbnz	r0, 90023e3c <__smakebuf_r+0x44>
90023e28:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
90023e2c:	059a      	lsls	r2, r3, #22
90023e2e:	d4ef      	bmi.n	90023e10 <__smakebuf_r+0x18>
90023e30:	f023 0303 	bic.w	r3, r3, #3
90023e34:	f043 0302 	orr.w	r3, r3, #2
90023e38:	81a3      	strh	r3, [r4, #12]
90023e3a:	e7e3      	b.n	90023e04 <__smakebuf_r+0xc>
90023e3c:	89a3      	ldrh	r3, [r4, #12]
90023e3e:	6020      	str	r0, [r4, #0]
90023e40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
90023e44:	81a3      	strh	r3, [r4, #12]
90023e46:	9b00      	ldr	r3, [sp, #0]
90023e48:	6163      	str	r3, [r4, #20]
90023e4a:	9b01      	ldr	r3, [sp, #4]
90023e4c:	6120      	str	r0, [r4, #16]
90023e4e:	b15b      	cbz	r3, 90023e68 <__smakebuf_r+0x70>
90023e50:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
90023e54:	4630      	mov	r0, r6
90023e56:	f000 f81d 	bl	90023e94 <_isatty_r>
90023e5a:	b128      	cbz	r0, 90023e68 <__smakebuf_r+0x70>
90023e5c:	89a3      	ldrh	r3, [r4, #12]
90023e5e:	f023 0303 	bic.w	r3, r3, #3
90023e62:	f043 0301 	orr.w	r3, r3, #1
90023e66:	81a3      	strh	r3, [r4, #12]
90023e68:	89a3      	ldrh	r3, [r4, #12]
90023e6a:	431d      	orrs	r5, r3
90023e6c:	81a5      	strh	r5, [r4, #12]
90023e6e:	e7cf      	b.n	90023e10 <__smakebuf_r+0x18>

90023e70 <_fstat_r>:
90023e70:	b538      	push	{r3, r4, r5, lr}
90023e72:	4d07      	ldr	r5, [pc, #28]	; (90023e90 <_fstat_r+0x20>)
90023e74:	2300      	movs	r3, #0
90023e76:	4604      	mov	r4, r0
90023e78:	4608      	mov	r0, r1
90023e7a:	4611      	mov	r1, r2
90023e7c:	602b      	str	r3, [r5, #0]
90023e7e:	f7e0 ff0b 	bl	90004c98 <_fstat>
90023e82:	1c43      	adds	r3, r0, #1
90023e84:	d102      	bne.n	90023e8c <_fstat_r+0x1c>
90023e86:	682b      	ldr	r3, [r5, #0]
90023e88:	b103      	cbz	r3, 90023e8c <_fstat_r+0x1c>
90023e8a:	6023      	str	r3, [r4, #0]
90023e8c:	bd38      	pop	{r3, r4, r5, pc}
90023e8e:	bf00      	nop
90023e90:	240264a4 	.word	0x240264a4

90023e94 <_isatty_r>:
90023e94:	b538      	push	{r3, r4, r5, lr}
90023e96:	4d06      	ldr	r5, [pc, #24]	; (90023eb0 <_isatty_r+0x1c>)
90023e98:	2300      	movs	r3, #0
90023e9a:	4604      	mov	r4, r0
90023e9c:	4608      	mov	r0, r1
90023e9e:	602b      	str	r3, [r5, #0]
90023ea0:	f7e0 ff00 	bl	90004ca4 <_isatty>
90023ea4:	1c43      	adds	r3, r0, #1
90023ea6:	d102      	bne.n	90023eae <_isatty_r+0x1a>
90023ea8:	682b      	ldr	r3, [r5, #0]
90023eaa:	b103      	cbz	r3, 90023eae <_isatty_r+0x1a>
90023eac:	6023      	str	r3, [r4, #0]
90023eae:	bd38      	pop	{r3, r4, r5, pc}
90023eb0:	240264a4 	.word	0x240264a4

90023eb4 <_init>:
90023eb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
90023eb6:	bf00      	nop
90023eb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
90023eba:	bc08      	pop	{r3}
90023ebc:	469e      	mov	lr, r3
90023ebe:	4770      	bx	lr

90023ec0 <_fini>:
90023ec0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
90023ec2:	bf00      	nop
90023ec4:	bcf8      	pop	{r3, r4, r5, r6, r7}
90023ec6:	bc08      	pop	{r3}
90023ec8:	469e      	mov	lr, r3
90023eca:	4770      	bx	lr
