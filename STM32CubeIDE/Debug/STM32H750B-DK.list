
STM32H750B-DK.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .bootloader   0000227c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .isr_vector   00000298  90000000  90000000  00020000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00028474  900002a0  900002a0  000202a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000408c  90028714  90028714  00048714  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 FontSearchFlashSection 000001b8  9002c7a0  9002c7a0  0004c7a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .ARM.extab    00000000  9002c958  9002c958  003e1264  2**0
                  CONTENTS
  6 .ARM          00000000  9002c958  9002c958  003e1264  2**0
                  CONTENTS
  7 .preinit_array 00000000  9002c958  9002c958  003e1264  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  8 .init_array   0000001c  9002c958  9002c958  0004c958  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .fini_array   00000008  9002c974  9002c974  0004c974  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .data         00000140  24000000  9002c97c  00050000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 CCMRAM        00005a00  24000140  9002cabc  00050140  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .bss          00022a94  24005b40  900324bc  00055b40  2**3
                  ALLOC
 13 ._user_heap_stack 00002004  240285d4  900324bc  000585d4  2**0
                  ALLOC
 14 .ARM.attributes 0000002e  00000000  00000000  003e1264  2**0
                  CONTENTS, READONLY
 15 FontFlashSection 00002198  90200000  90200000  00060000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 16 TextFlashSection 000000cc  90202198  90202198  00062198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 17 ExtFlashSection 0037f000  90202264  90202264  00062264  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 18 TouchGFX_Framebuffer 000bf400  d0000000  d0000000  003f0000  2**2
                  ALLOC
 19 Video_RGB_Buffer 00043800  d00bf400  d00bf400  003f0000  2**2
                  ALLOC
 20 .comment      000000c2  00000000  00000000  003e1292  2**0
                  CONTENTS, READONLY
 21 .debug_line   0007c9d4  00000000  00000000  003e1354  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006b  00000000  00000000  0045dd28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_info   000fdfdd  00000000  00000000  0045dd93  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_abbrev 00018445  00000000  00000000  0055bd70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 25 .debug_aranges 00003638  00000000  00000000  005741b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 26 .debug_str    001a2d50  00000000  00000000  005777f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 27 .debug_rnglists 00007dcc  00000000  00000000  0071a540  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 28 .debug_macro  0004a075  00000000  00000000  0072230c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 29 .debug_frame  0000b25c  00000000  00000000  0076c384  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 30 .debug_loclists 0003daf4  00000000  00000000  007775e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

900002a0 <__do_global_dtors_aux>:
900002a0:	b510      	push	{r4, lr}
900002a2:	4c05      	ldr	r4, [pc, #20]	; (900002b8 <__do_global_dtors_aux+0x18>)
900002a4:	7823      	ldrb	r3, [r4, #0]
900002a6:	b933      	cbnz	r3, 900002b6 <__do_global_dtors_aux+0x16>
900002a8:	4b04      	ldr	r3, [pc, #16]	; (900002bc <__do_global_dtors_aux+0x1c>)
900002aa:	b113      	cbz	r3, 900002b2 <__do_global_dtors_aux+0x12>
900002ac:	4804      	ldr	r0, [pc, #16]	; (900002c0 <__do_global_dtors_aux+0x20>)
900002ae:	f3af 8000 	nop.w
900002b2:	2301      	movs	r3, #1
900002b4:	7023      	strb	r3, [r4, #0]
900002b6:	bd10      	pop	{r4, pc}
900002b8:	24005b40 	.word	0x24005b40
900002bc:	00000000 	.word	0x00000000
900002c0:	900286fc 	.word	0x900286fc

900002c4 <frame_dummy>:
900002c4:	b508      	push	{r3, lr}
900002c6:	4b03      	ldr	r3, [pc, #12]	; (900002d4 <frame_dummy+0x10>)
900002c8:	b11b      	cbz	r3, 900002d2 <frame_dummy+0xe>
900002ca:	4903      	ldr	r1, [pc, #12]	; (900002d8 <frame_dummy+0x14>)
900002cc:	4803      	ldr	r0, [pc, #12]	; (900002dc <frame_dummy+0x18>)
900002ce:	f3af 8000 	nop.w
900002d2:	bd08      	pop	{r3, pc}
900002d4:	00000000 	.word	0x00000000
900002d8:	24005b44 	.word	0x24005b44
900002dc:	900286fc 	.word	0x900286fc

900002e0 <strcmp>:
900002e0:	f810 2b01 	ldrb.w	r2, [r0], #1
900002e4:	f811 3b01 	ldrb.w	r3, [r1], #1
900002e8:	2a01      	cmp	r2, #1
900002ea:	bf28      	it	cs
900002ec:	429a      	cmpcs	r2, r3
900002ee:	d0f7      	beq.n	900002e0 <strcmp>
900002f0:	1ad0      	subs	r0, r2, r3
900002f2:	4770      	bx	lr
	...

90000300 <memchr>:
90000300:	f001 01ff 	and.w	r1, r1, #255	; 0xff
90000304:	2a10      	cmp	r2, #16
90000306:	db2b      	blt.n	90000360 <memchr+0x60>
90000308:	f010 0f07 	tst.w	r0, #7
9000030c:	d008      	beq.n	90000320 <memchr+0x20>
9000030e:	f810 3b01 	ldrb.w	r3, [r0], #1
90000312:	3a01      	subs	r2, #1
90000314:	428b      	cmp	r3, r1
90000316:	d02d      	beq.n	90000374 <memchr+0x74>
90000318:	f010 0f07 	tst.w	r0, #7
9000031c:	b342      	cbz	r2, 90000370 <memchr+0x70>
9000031e:	d1f6      	bne.n	9000030e <memchr+0xe>
90000320:	b4f0      	push	{r4, r5, r6, r7}
90000322:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
90000326:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
9000032a:	f022 0407 	bic.w	r4, r2, #7
9000032e:	f07f 0700 	mvns.w	r7, #0
90000332:	2300      	movs	r3, #0
90000334:	e8f0 5602 	ldrd	r5, r6, [r0], #8
90000338:	3c08      	subs	r4, #8
9000033a:	ea85 0501 	eor.w	r5, r5, r1
9000033e:	ea86 0601 	eor.w	r6, r6, r1
90000342:	fa85 f547 	uadd8	r5, r5, r7
90000346:	faa3 f587 	sel	r5, r3, r7
9000034a:	fa86 f647 	uadd8	r6, r6, r7
9000034e:	faa5 f687 	sel	r6, r5, r7
90000352:	b98e      	cbnz	r6, 90000378 <memchr+0x78>
90000354:	d1ee      	bne.n	90000334 <memchr+0x34>
90000356:	bcf0      	pop	{r4, r5, r6, r7}
90000358:	f001 01ff 	and.w	r1, r1, #255	; 0xff
9000035c:	f002 0207 	and.w	r2, r2, #7
90000360:	b132      	cbz	r2, 90000370 <memchr+0x70>
90000362:	f810 3b01 	ldrb.w	r3, [r0], #1
90000366:	3a01      	subs	r2, #1
90000368:	ea83 0301 	eor.w	r3, r3, r1
9000036c:	b113      	cbz	r3, 90000374 <memchr+0x74>
9000036e:	d1f8      	bne.n	90000362 <memchr+0x62>
90000370:	2000      	movs	r0, #0
90000372:	4770      	bx	lr
90000374:	3801      	subs	r0, #1
90000376:	4770      	bx	lr
90000378:	2d00      	cmp	r5, #0
9000037a:	bf06      	itte	eq
9000037c:	4635      	moveq	r5, r6
9000037e:	3803      	subeq	r0, #3
90000380:	3807      	subne	r0, #7
90000382:	f015 0f01 	tst.w	r5, #1
90000386:	d107      	bne.n	90000398 <memchr+0x98>
90000388:	3001      	adds	r0, #1
9000038a:	f415 7f80 	tst.w	r5, #256	; 0x100
9000038e:	bf02      	ittt	eq
90000390:	3001      	addeq	r0, #1
90000392:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
90000396:	3001      	addeq	r0, #1
90000398:	bcf0      	pop	{r4, r5, r6, r7}
9000039a:	3801      	subs	r0, #1
9000039c:	4770      	bx	lr
9000039e:	bf00      	nop

900003a0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
900003a0:	f8df d034 	ldr.w	sp, [pc, #52]	; 900003d8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
900003a4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
900003a6:	e003      	b.n	900003b0 <LoopCopyDataInit>

900003a8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
900003a8:	4b0c      	ldr	r3, [pc, #48]	; (900003dc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
900003aa:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
900003ac:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
900003ae:	3104      	adds	r1, #4

900003b0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
900003b0:	480b      	ldr	r0, [pc, #44]	; (900003e0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
900003b2:	4b0c      	ldr	r3, [pc, #48]	; (900003e4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
900003b4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
900003b6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
900003b8:	d3f6      	bcc.n	900003a8 <CopyDataInit>
  ldr  r2, =_sbss
900003ba:	4a0b      	ldr	r2, [pc, #44]	; (900003e8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
900003bc:	e002      	b.n	900003c4 <LoopFillZerobss>

900003be <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
900003be:	2300      	movs	r3, #0
  str  r3, [r2], #4
900003c0:	f842 3b04 	str.w	r3, [r2], #4

900003c4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
900003c4:	4b09      	ldr	r3, [pc, #36]	; (900003ec <LoopFillZerobss+0x28>)
  cmp  r2, r3
900003c6:	429a      	cmp	r2, r3
  bcc  FillZerobss
900003c8:	d3f9      	bcc.n	900003be <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
900003ca:	f009 fa3b 	bl	90009844 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
900003ce:	f027 fcaf 	bl	90027d30 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
900003d2:	f003 ff5f 	bl	90004294 <main>
  bx  lr    
900003d6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
900003d8:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
900003dc:	9002c97c 	.word	0x9002c97c
  ldr  r0, =_sdata
900003e0:	24000000 	.word	0x24000000
  ldr  r3, =_edata
900003e4:	24000140 	.word	0x24000140
  ldr  r2, =_sbss
900003e8:	24005b40 	.word	0x24005b40
  ldr  r3, = _ebss
900003ec:	240285d4 	.word	0x240285d4

900003f0 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
900003f0:	e7fe      	b.n	900003f0 <ADC3_IRQHandler>
	...

900003f4 <MX_LIBJPEG_Init>:
  */

  /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */

}
900003f4:	4770      	bx	lr
900003f6:	bf00      	nop

900003f8 <MX_TouchGFX_PreOSInit>:
/**
 * PreOS Initialization function
 */
void MX_TouchGFX_PreOSInit(void)
{
}
900003f8:	4770      	bx	lr
900003fa:	bf00      	nop

900003fc <MX_TouchGFX_Init>:

/**
 * Initialize TouchGFX application
 */
void MX_TouchGFX_Init(void)
{
900003fc:	b508      	push	{r3, lr}
  // Calling forward to touchgfx_init in C++ domain
  touchgfx_components_init();
900003fe:	f001 ff25 	bl	9000224c <touchgfx_components_init>
  touchgfx_init();
}
90000402:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  touchgfx_init();
90000406:	f001 bea7 	b.w	90002158 <touchgfx_init>
9000040a:	bf00      	nop

9000040c <TouchGFX_Task>:
 * TouchGFX application thread
 */
void TouchGFX_Task(void *argument)
{
  // Calling forward to touchgfx_taskEntry in C++ domain
  touchgfx_taskEntry();
9000040c:	f001 bf20 	b.w	90002250 <touchgfx_taskEntry>

90000410 <_ZN8touchgfx18MCUInstrumentation13getCCConsumedEv>:
     *
     * @return clock cycles.
     */
    virtual uint32_t getCCConsumed()
    {
        return cc_consumed;
90000410:	6840      	ldr	r0, [r0, #4]
    }
90000412:	4770      	bx	lr

90000414 <_ZN8touchgfx18MCUInstrumentation13setCCConsumedEm>:
     *
     * @param  val number of clock cycles.
     */
    virtual void setCCConsumed(uint32_t val)
    {
        cc_consumed = val;
90000414:	6041      	str	r1, [r0, #4]
    }
90000416:	4770      	bx	lr

90000418 <_ZN8touchgfx25CortexMMCUInstrumentation4initEv>:
    //                                    Embedded Trace Macrocell (ETM)
    //                                    Trace Port Interface Unit (TPIU).
    //                                    This enables control of power usage unless tracing is required. The application can enable this, for ITM use, or use by a debugger.

    // Enable Debug Exception and Monitor Control Register
    *((volatile unsigned int*)0xE000EDFC) |= 0x01000000;
90000418:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    // Enable Lock Access Register
    *((volatile unsigned int*)0xE0001FB0) |= 0xC5ACCE55;
9000041c:	4b08      	ldr	r3, [pc, #32]	; (90000440 <_ZN8touchgfx25CortexMMCUInstrumentation4initEv+0x28>)
9000041e:	4a09      	ldr	r2, [pc, #36]	; (90000444 <_ZN8touchgfx25CortexMMCUInstrumentation4initEv+0x2c>)
    *((volatile unsigned int*)0xE000EDFC) |= 0x01000000;
90000420:	f8d0 1dfc 	ldr.w	r1, [r0, #3580]	; 0xdfc
90000424:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
90000428:	f8c0 1dfc 	str.w	r1, [r0, #3580]	; 0xdfc
    *((volatile unsigned int*)0xE0001FB0) |= 0xC5ACCE55;
9000042c:	f8d3 1fb0 	ldr.w	r1, [r3, #4016]	; 0xfb0
90000430:	430a      	orrs	r2, r1
90000432:	f8c3 2fb0 	str.w	r2, [r3, #4016]	; 0xfb0
    // Enable Data Watchpoint and Trace Control Register
    *((volatile unsigned int*)0xE0001000) |= 1;
90000436:	681a      	ldr	r2, [r3, #0]
90000438:	f042 0201 	orr.w	r2, r2, #1
9000043c:	601a      	str	r2, [r3, #0]
}
9000043e:	4770      	bx	lr
90000440:	e0001000 	.word	0xe0001000
90000444:	c5acce55 	.word	0xc5acce55

90000448 <_ZN8touchgfx25CortexMMCUInstrumentation12getElapsedUSEjjj>:

//Board specific clockfrequency
unsigned int CortexMMCUInstrumentation::getElapsedUS(unsigned int start, unsigned int now, unsigned int clockfrequency)
{
    return ((now - start) + (clockfrequency / 2)) / clockfrequency;
90000448:	1a51      	subs	r1, r2, r1
9000044a:	eb01 0153 	add.w	r1, r1, r3, lsr #1
}
9000044e:	fbb1 f0f3 	udiv	r0, r1, r3
90000452:	4770      	bx	lr

90000454 <_ZN8touchgfx25CortexMMCUInstrumentation12getCPUCyclesEv>:

unsigned int CortexMMCUInstrumentation::getCPUCycles()
{
    return *((volatile unsigned int*)0xE0001004);
90000454:	4b01      	ldr	r3, [pc, #4]	; (9000045c <_ZN8touchgfx25CortexMMCUInstrumentation12getCPUCyclesEv+0x8>)
90000456:	6858      	ldr	r0, [r3, #4]
}
90000458:	4770      	bx	lr
9000045a:	bf00      	nop
9000045c:	e0001000 	.word	0xe0001000

90000460 <_ZN8touchgfx25CortexMMCUInstrumentationD1Ev>:
 *        Interface for instrumenting Cortex-M processors to measure MCU load via measured CPU
 *        cycles.
 *
 * @sa MCUInstrumentation
 */
class CortexMMCUInstrumentation : public MCUInstrumentation
90000460:	4770      	bx	lr
90000462:	bf00      	nop

90000464 <_ZN8touchgfx25CortexMMCUInstrumentationD0Ev>:
90000464:	b510      	push	{r4, lr}
90000466:	4604      	mov	r4, r0
90000468:	210c      	movs	r1, #12
9000046a:	f027 f8c4 	bl	900275f6 <_ZdlPvj>
9000046e:	4620      	mov	r0, r4
90000470:	bd10      	pop	{r4, pc}
90000472:	bf00      	nop

90000474 <_ZN8touchgfx25CortexMMCUInstrumentation12setMCUActiveEb>:

void CortexMMCUInstrumentation::setMCUActive(bool active)
{
    if (active) //idle task sched out
    {
        uint32_t cc_temp = getCPUCycles() - cc_in;
90000474:	6803      	ldr	r3, [r0, #0]
90000476:	4a0c      	ldr	r2, [pc, #48]	; (900004a8 <_ZN8touchgfx25CortexMMCUInstrumentation12setMCUActiveEb+0x34>)
90000478:	691b      	ldr	r3, [r3, #16]
{
9000047a:	b510      	push	{r4, lr}
9000047c:	4604      	mov	r4, r0
    if (active) //idle task sched out
9000047e:	b149      	cbz	r1, 90000494 <_ZN8touchgfx25CortexMMCUInstrumentation12setMCUActiveEb+0x20>
        uint32_t cc_temp = getCPUCycles() - cc_in;
90000480:	4293      	cmp	r3, r2
90000482:	d10d      	bne.n	900004a0 <_ZN8touchgfx25CortexMMCUInstrumentation12setMCUActiveEb+0x2c>
    return *((volatile unsigned int*)0xE0001004);
90000484:	4b09      	ldr	r3, [pc, #36]	; (900004ac <_ZN8touchgfx25CortexMMCUInstrumentation12setMCUActiveEb+0x38>)
90000486:	6858      	ldr	r0, [r3, #4]
        uint32_t cc_temp = getCPUCycles() - cc_in;
90000488:	68a2      	ldr	r2, [r4, #8]
        cc_consumed += cc_temp;
9000048a:	6863      	ldr	r3, [r4, #4]
9000048c:	1a9b      	subs	r3, r3, r2
9000048e:	4403      	add	r3, r0
90000490:	6063      	str	r3, [r4, #4]
    }
    else //idle task sched in
    {
        cc_in = getCPUCycles();
    }
}
90000492:	bd10      	pop	{r4, pc}
        cc_in = getCPUCycles();
90000494:	4293      	cmp	r3, r2
90000496:	d105      	bne.n	900004a4 <_ZN8touchgfx25CortexMMCUInstrumentation12setMCUActiveEb+0x30>
    return *((volatile unsigned int*)0xE0001004);
90000498:	4b04      	ldr	r3, [pc, #16]	; (900004ac <_ZN8touchgfx25CortexMMCUInstrumentation12setMCUActiveEb+0x38>)
9000049a:	6858      	ldr	r0, [r3, #4]
        cc_in = getCPUCycles();
9000049c:	60a0      	str	r0, [r4, #8]
}
9000049e:	bd10      	pop	{r4, pc}
        uint32_t cc_temp = getCPUCycles() - cc_in;
900004a0:	4798      	blx	r3
900004a2:	e7f1      	b.n	90000488 <_ZN8touchgfx25CortexMMCUInstrumentation12setMCUActiveEb+0x14>
        cc_in = getCPUCycles();
900004a4:	4798      	blx	r3
900004a6:	e7f9      	b.n	9000049c <_ZN8touchgfx25CortexMMCUInstrumentation12setMCUActiveEb+0x28>
900004a8:	90000455 	.word	0x90000455
900004ac:	e0001000 	.word	0xe0001000

900004b0 <_ZN20STM32TouchControllerD1Ev>:
 * @brief This class specializes TouchController Interface.
 *
 * @sa touchgfx::TouchController
 */

class STM32TouchController : public touchgfx::TouchController
900004b0:	4770      	bx	lr
900004b2:	bf00      	nop
900004b4:	0000      	movs	r0, r0
	...

900004b8 <_ZN20STM32TouchController4initEv>:

#include <STM32TouchController.hpp>
#include "stm32h750b_discovery_ts.h"

void STM32TouchController::init()
{
900004b8:	b500      	push	{lr}
900004ba:	b085      	sub	sp, #20
     *
     */
    TS_Init_t hTS;
    hTS.Orientation = TS_SWAP_XY;
    hTS.Accuracy = 0;
    hTS.Width = 480;
900004bc:	2208      	movs	r2, #8
900004be:	2300      	movs	r3, #0
    hTS.Height = 272;
    BSP_TS_Init(0, &hTS);
900004c0:	2000      	movs	r0, #0
900004c2:	4669      	mov	r1, sp
    hTS.Width = 480;
900004c4:	ed9f 7b06 	vldr	d7, [pc, #24]	; 900004e0 <_ZN20STM32TouchController4initEv+0x28>
900004c8:	e9cd 2302 	strd	r2, r3, [sp, #8]
900004cc:	ed8d 7b00 	vstr	d7, [sp]
    BSP_TS_Init(0, &hTS);
900004d0:	f009 f8c6 	bl	90009660 <BSP_TS_Init>
}
900004d4:	b005      	add	sp, #20
900004d6:	f85d fb04 	ldr.w	pc, [sp], #4
900004da:	bf00      	nop
900004dc:	f3af 8000 	nop.w
900004e0:	000001e0 	.word	0x000001e0
900004e4:	00000110 	.word	0x00000110

900004e8 <_ZN20STM32TouchController11sampleTouchERlS0_>:

bool STM32TouchController::sampleTouch(int32_t& x, int32_t& y)
{
900004e8:	b530      	push	{r4, r5, lr}
900004ea:	b085      	sub	sp, #20
     *
     * This function is called by the TouchGFX framework.
     * By default sampleTouch is called every tick, this can be adjusted by HAL::setTouchSampleRate(int8_t);
     *
     */
    TS_State_t  TS_State = { 0 };
900004ec:	2000      	movs	r0, #0
{
900004ee:	460d      	mov	r5, r1
900004f0:	4614      	mov	r4, r2
    BSP_TS_GetState(0, &TS_State);
900004f2:	a901      	add	r1, sp, #4
    TS_State_t  TS_State = { 0 };
900004f4:	9001      	str	r0, [sp, #4]
900004f6:	e9cd 0002 	strd	r0, r0, [sp, #8]
    BSP_TS_GetState(0, &TS_State);
900004fa:	f009 f93f 	bl	9000977c <BSP_TS_GetState>
    if (TS_State.TouchDetected)
900004fe:	9801      	ldr	r0, [sp, #4]
90000500:	b120      	cbz	r0, 9000050c <_ZN20STM32TouchController11sampleTouchERlS0_+0x24>
    {
        x = TS_State.TouchX;
        y = TS_State.TouchY;
        return true;
90000502:	2001      	movs	r0, #1
        y = TS_State.TouchY;
90000504:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
        x = TS_State.TouchX;
90000508:	602a      	str	r2, [r5, #0]
        y = TS_State.TouchY;
9000050a:	6023      	str	r3, [r4, #0]
    }

    return false;
}
9000050c:	b005      	add	sp, #20
9000050e:	bd30      	pop	{r4, r5, pc}

90000510 <_ZN20STM32TouchControllerD0Ev>:
90000510:	b510      	push	{r4, lr}
90000512:	4604      	mov	r4, r0
90000514:	2104      	movs	r1, #4
90000516:	f027 f86e 	bl	900275f6 <_ZdlPvj>
9000051a:	4620      	mov	r0, r4
9000051c:	bd10      	pop	{r4, pc}
9000051e:	bf00      	nop

90000520 <_ZN8touchgfx4GPIO4initEv>:
    GPIO_PinState bitstatus = GPIO_PIN_RESET;
    switch (id)
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        bitstatus = HAL_GPIO_ReadPin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin);
90000520:	2108      	movs	r1, #8
90000522:	4810      	ldr	r0, [pc, #64]	; (90000564 <_ZN8touchgfx4GPIO4initEv+0x44>)
{
90000524:	b508      	push	{r3, lr}
        bitstatus = HAL_GPIO_ReadPin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin);
90000526:	f009 fe8f 	bl	9000a248 <HAL_GPIO_ReadPin>
        if (GPIO::get(static_cast<GPIO_ID>(id)))
9000052a:	2801      	cmp	r0, #1
9000052c:	d101      	bne.n	90000532 <_ZN8touchgfx4GPIO4initEv+0x12>
            GPIO_InvertedLevels[id] = 1;
9000052e:	4b0e      	ldr	r3, [pc, #56]	; (90000568 <_ZN8touchgfx4GPIO4initEv+0x48>)
90000530:	6018      	str	r0, [r3, #0]
#endif
        break;
    case GPIO::RENDER_TIME:
#if defined(RENDER_TIME_GPIO_Port) && defined(RENDER_TIME_Pin)
        bitstatus = HAL_GPIO_ReadPin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin);
90000532:	2180      	movs	r1, #128	; 0x80
90000534:	480d      	ldr	r0, [pc, #52]	; (9000056c <_ZN8touchgfx4GPIO4initEv+0x4c>)
90000536:	f009 fe87 	bl	9000a248 <HAL_GPIO_ReadPin>
        if (GPIO::get(static_cast<GPIO_ID>(id)))
9000053a:	2801      	cmp	r0, #1
9000053c:	d101      	bne.n	90000542 <_ZN8touchgfx4GPIO4initEv+0x22>
            GPIO_InvertedLevels[id] = 1;
9000053e:	4b0a      	ldr	r3, [pc, #40]	; (90000568 <_ZN8touchgfx4GPIO4initEv+0x48>)
90000540:	6058      	str	r0, [r3, #4]
#endif
        break;
    case GPIO::FRAME_RATE:
#if defined(FRAME_RATE_GPIO_Port) && defined(FRAME_RATE_Pin)
        bitstatus = HAL_GPIO_ReadPin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
90000542:	2140      	movs	r1, #64	; 0x40
90000544:	4809      	ldr	r0, [pc, #36]	; (9000056c <_ZN8touchgfx4GPIO4initEv+0x4c>)
90000546:	f009 fe7f 	bl	9000a248 <HAL_GPIO_ReadPin>
        if (GPIO::get(static_cast<GPIO_ID>(id)))
9000054a:	2801      	cmp	r0, #1
9000054c:	d101      	bne.n	90000552 <_ZN8touchgfx4GPIO4initEv+0x32>
            GPIO_InvertedLevels[id] = 1;
9000054e:	4b06      	ldr	r3, [pc, #24]	; (90000568 <_ZN8touchgfx4GPIO4initEv+0x48>)
90000550:	6098      	str	r0, [r3, #8]
#endif
        break;
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        bitstatus = HAL_GPIO_ReadPin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
90000552:	2140      	movs	r1, #64	; 0x40
90000554:	4806      	ldr	r0, [pc, #24]	; (90000570 <_ZN8touchgfx4GPIO4initEv+0x50>)
90000556:	f009 fe77 	bl	9000a248 <HAL_GPIO_ReadPin>
        if (GPIO::get(static_cast<GPIO_ID>(id)))
9000055a:	2801      	cmp	r0, #1
9000055c:	d101      	bne.n	90000562 <_ZN8touchgfx4GPIO4initEv+0x42>
            GPIO_InvertedLevels[id] = 1;
9000055e:	4b02      	ldr	r3, [pc, #8]	; (90000568 <_ZN8touchgfx4GPIO4initEv+0x48>)
90000560:	60d8      	str	r0, [r3, #12]
}
90000562:	bd08      	pop	{r3, pc}
90000564:	58021800 	.word	0x58021800
90000568:	24005b5c 	.word	0x24005b5c
9000056c:	58020400 	.word	0x58020400
90000570:	58020000 	.word	0x58020000

90000574 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>:
    switch (id)
90000574:	2803      	cmp	r0, #3
90000576:	d827      	bhi.n	900005c8 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x54>
90000578:	e8df f000 	tbb	[pc, r0]
9000057c:	020b141d 	.word	0x020b141d
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_SET(id));
90000580:	4b12      	ldr	r3, [pc, #72]	; (900005cc <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x58>)
90000582:	2140      	movs	r1, #64	; 0x40
90000584:	4812      	ldr	r0, [pc, #72]	; (900005d0 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x5c>)
90000586:	68da      	ldr	r2, [r3, #12]
90000588:	fab2 f282 	clz	r2, r2
9000058c:	0952      	lsrs	r2, r2, #5
9000058e:	f009 be61 	b.w	9000a254 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_SET(id));
90000592:	4b0e      	ldr	r3, [pc, #56]	; (900005cc <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x58>)
90000594:	2140      	movs	r1, #64	; 0x40
90000596:	480f      	ldr	r0, [pc, #60]	; (900005d4 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x60>)
90000598:	689a      	ldr	r2, [r3, #8]
9000059a:	fab2 f282 	clz	r2, r2
9000059e:	0952      	lsrs	r2, r2, #5
900005a0:	f009 be58 	b.w	9000a254 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, M_GPIO_PIN_SET(id));
900005a4:	4b09      	ldr	r3, [pc, #36]	; (900005cc <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x58>)
900005a6:	2180      	movs	r1, #128	; 0x80
900005a8:	480a      	ldr	r0, [pc, #40]	; (900005d4 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x60>)
900005aa:	685a      	ldr	r2, [r3, #4]
900005ac:	fab2 f282 	clz	r2, r2
900005b0:	0952      	lsrs	r2, r2, #5
900005b2:	f009 be4f 	b.w	9000a254 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, M_GPIO_PIN_SET(id));
900005b6:	4b05      	ldr	r3, [pc, #20]	; (900005cc <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x58>)
900005b8:	2108      	movs	r1, #8
900005ba:	4807      	ldr	r0, [pc, #28]	; (900005d8 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x64>)
900005bc:	681a      	ldr	r2, [r3, #0]
900005be:	fab2 f282 	clz	r2, r2
900005c2:	0952      	lsrs	r2, r2, #5
900005c4:	f009 be46 	b.w	9000a254 <HAL_GPIO_WritePin>
}
900005c8:	4770      	bx	lr
900005ca:	bf00      	nop
900005cc:	24005b5c 	.word	0x24005b5c
900005d0:	58020000 	.word	0x58020000
900005d4:	58020400 	.word	0x58020400
900005d8:	58021800 	.word	0x58021800

900005dc <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>:
    switch (id)
900005dc:	2803      	cmp	r0, #3
900005de:	d827      	bhi.n	90000630 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x54>
900005e0:	e8df f000 	tbb	[pc, r0]
900005e4:	020b141d 	.word	0x020b141d
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_RESET(id));
900005e8:	4b12      	ldr	r3, [pc, #72]	; (90000634 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x58>)
900005ea:	2140      	movs	r1, #64	; 0x40
900005ec:	4812      	ldr	r0, [pc, #72]	; (90000638 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x5c>)
900005ee:	68da      	ldr	r2, [r3, #12]
900005f0:	3a00      	subs	r2, #0
900005f2:	bf18      	it	ne
900005f4:	2201      	movne	r2, #1
900005f6:	f009 be2d 	b.w	9000a254 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_RESET(id));
900005fa:	4b0e      	ldr	r3, [pc, #56]	; (90000634 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x58>)
900005fc:	2140      	movs	r1, #64	; 0x40
900005fe:	480f      	ldr	r0, [pc, #60]	; (9000063c <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x60>)
90000600:	689a      	ldr	r2, [r3, #8]
90000602:	3a00      	subs	r2, #0
90000604:	bf18      	it	ne
90000606:	2201      	movne	r2, #1
90000608:	f009 be24 	b.w	9000a254 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, M_GPIO_PIN_RESET(id));
9000060c:	4b09      	ldr	r3, [pc, #36]	; (90000634 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x58>)
9000060e:	2180      	movs	r1, #128	; 0x80
90000610:	480a      	ldr	r0, [pc, #40]	; (9000063c <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x60>)
90000612:	685a      	ldr	r2, [r3, #4]
90000614:	3a00      	subs	r2, #0
90000616:	bf18      	it	ne
90000618:	2201      	movne	r2, #1
9000061a:	f009 be1b 	b.w	9000a254 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, M_GPIO_PIN_RESET(id));
9000061e:	4b05      	ldr	r3, [pc, #20]	; (90000634 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x58>)
90000620:	2108      	movs	r1, #8
90000622:	4807      	ldr	r0, [pc, #28]	; (90000640 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x64>)
90000624:	681a      	ldr	r2, [r3, #0]
90000626:	3a00      	subs	r2, #0
90000628:	bf18      	it	ne
9000062a:	2201      	movne	r2, #1
9000062c:	f009 be12 	b.w	9000a254 <HAL_GPIO_WritePin>
}
90000630:	4770      	bx	lr
90000632:	bf00      	nop
90000634:	24005b5c 	.word	0x24005b5c
90000638:	58020000 	.word	0x58020000
9000063c:	58020400 	.word	0x58020400
90000640:	58021800 	.word	0x58021800

90000644 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>:
    switch (id)
90000644:	2803      	cmp	r0, #3
90000646:	d813      	bhi.n	90000670 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x2c>
90000648:	e8df f000 	tbb	[pc, r0]
9000064c:	02060a0e 	.word	0x02060a0e
        HAL_GPIO_TogglePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
90000650:	2140      	movs	r1, #64	; 0x40
90000652:	4808      	ldr	r0, [pc, #32]	; (90000674 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x30>)
90000654:	f009 be02 	b.w	9000a25c <HAL_GPIO_TogglePin>
        HAL_GPIO_TogglePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
90000658:	2140      	movs	r1, #64	; 0x40
9000065a:	4807      	ldr	r0, [pc, #28]	; (90000678 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x34>)
9000065c:	f009 bdfe 	b.w	9000a25c <HAL_GPIO_TogglePin>
        HAL_GPIO_TogglePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin);
90000660:	2180      	movs	r1, #128	; 0x80
90000662:	4805      	ldr	r0, [pc, #20]	; (90000678 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x34>)
90000664:	f009 bdfa 	b.w	9000a25c <HAL_GPIO_TogglePin>
        HAL_GPIO_TogglePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin);
90000668:	2108      	movs	r1, #8
9000066a:	4804      	ldr	r0, [pc, #16]	; (9000067c <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x38>)
9000066c:	f009 bdf6 	b.w	9000a25c <HAL_GPIO_TogglePin>
}
90000670:	4770      	bx	lr
90000672:	bf00      	nop
90000674:	58020000 	.word	0x58020000
90000678:	58020400 	.word	0x58020400
9000067c:	58021800 	.word	0x58021800

90000680 <_ZN8touchgfx13DMA_Interface10getDMATypeEv>:
     * @return a DMAType value of the concrete DMA_Interface implementation.
     */
    virtual DMAType getDMAType()
    {
        return DMA_TYPE_GENERIC;
    }
90000680:	2000      	movs	r0, #0
90000682:	4770      	bx	lr

90000684 <_ZN8touchgfx3HAL21setDisplayOrientationENS_18DisplayOrientationE>:
     * @note A screen transition must occur before this takes effect!
     */
    virtual void setDisplayOrientation(DisplayOrientation orientation)
    {
        requestedOrientation = orientation;
        displayOrientationChangeRequested = true;
90000684:	2301      	movs	r3, #1
        requestedOrientation = orientation;
90000686:	f880 1074 	strb.w	r1, [r0, #116]	; 0x74
        displayOrientationChangeRequested = true;
9000068a:	f880 3075 	strb.w	r3, [r0, #117]	; 0x75
    }
9000068e:	4770      	bx	lr

90000690 <_ZN8touchgfx3HAL9sampleKeyERh>:
     */
    virtual bool sampleKey(uint8_t& key)
    {
        (void)key; // Unused variable
        return false;
    }
90000690:	2000      	movs	r0, #0
90000692:	4770      	bx	lr

90000694 <_ZN8touchgfx3HAL19setAnimationStorageEPv>:
     * @see setFrameBufferStartAddresses
     */
    virtual void setAnimationStorage(void* animationStorage)
    {
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
        USE_ANIMATION_STORAGE = animationStorage != 0;
90000694:	1e0a      	subs	r2, r1, #0
90000696:	4b03      	ldr	r3, [pc, #12]	; (900006a4 <_ZN8touchgfx3HAL19setAnimationStorageEPv+0x10>)
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
90000698:	6441      	str	r1, [r0, #68]	; 0x44
        USE_ANIMATION_STORAGE = animationStorage != 0;
9000069a:	bf18      	it	ne
9000069c:	2201      	movne	r2, #1
9000069e:	701a      	strb	r2, [r3, #0]
    }
900006a0:	4770      	bx	lr
900006a2:	bf00      	nop
900006a4:	240281eb 	.word	0x240281eb

900006a8 <_ZNK8touchgfx3HAL18getFlashDataReaderEv>:
     * @return the FlashDataReader.
     */
    virtual FlashDataReader* getFlashDataReader() const
    {
        return 0;
    }
900006a8:	2000      	movs	r0, #0
900006aa:	4770      	bx	lr

900006ac <_ZN8touchgfx3HAL9taskDelayEt>:
     *
     * @see registerTaskDelayFunction
     */
    virtual void taskDelay(uint16_t ms)
    {
        if (taskDelayFunc)
900006ac:	6b83      	ldr	r3, [r0, #56]	; 0x38
    virtual void taskDelay(uint16_t ms)
900006ae:	4608      	mov	r0, r1
        if (taskDelayFunc)
900006b0:	b103      	cbz	r3, 900006b4 <_ZN8touchgfx3HAL9taskDelayEt+0x8>
        {
            taskDelayFunc(ms);
900006b2:	4718      	bx	r3
        }
    }
900006b4:	4770      	bx	lr
900006b6:	bf00      	nop

900006b8 <_ZN8touchgfx3HAL17getTFTCurrentLineEv>:
     *         implemented".
     */
    virtual uint16_t getTFTCurrentLine()
    {
        return 0xFFFFu;
    }
900006b8:	f64f 70ff 	movw	r0, #65535	; 0xffff
900006bc:	4770      	bx	lr
900006be:	bf00      	nop

900006c0 <_ZN11TouchGFXHALD1Ev>:
 *
 * @brief HAL implementation for TouchGFX.
 *
 * @sa HAL
 */
class TouchGFXHAL : public TouchGFXGeneratedHAL
900006c0:	4770      	bx	lr
900006c2:	bf00      	nop

900006c4 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt>:
    virtual void setFrameBufferSize(uint16_t width, uint16_t height)
900006c4:	b508      	push	{r3, lr}
        assert(width >= DISPLAY_WIDTH && height >= DISPLAY_HEIGHT && "Framebuffer cannot be smaller than display");
900006c6:	4b09      	ldr	r3, [pc, #36]	; (900006ec <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x28>)
900006c8:	881b      	ldrh	r3, [r3, #0]
900006ca:	428b      	cmp	r3, r1
900006cc:	d808      	bhi.n	900006e0 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x1c>
900006ce:	4b08      	ldr	r3, [pc, #32]	; (900006f0 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x2c>)
900006d0:	881b      	ldrh	r3, [r3, #0]
900006d2:	4293      	cmp	r3, r2
900006d4:	d804      	bhi.n	900006e0 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x1c>
        FRAME_BUFFER_WIDTH = width;
900006d6:	4807      	ldr	r0, [pc, #28]	; (900006f4 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x30>)
        FRAME_BUFFER_HEIGHT = height;
900006d8:	4b07      	ldr	r3, [pc, #28]	; (900006f8 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x34>)
        FRAME_BUFFER_WIDTH = width;
900006da:	8001      	strh	r1, [r0, #0]
        FRAME_BUFFER_HEIGHT = height;
900006dc:	801a      	strh	r2, [r3, #0]
    }
900006de:	bd08      	pop	{r3, pc}
        assert(width >= DISPLAY_WIDTH && height >= DISPLAY_HEIGHT && "Framebuffer cannot be smaller than display");
900006e0:	4b06      	ldr	r3, [pc, #24]	; (900006fc <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x38>)
900006e2:	219e      	movs	r1, #158	; 0x9e
900006e4:	4a06      	ldr	r2, [pc, #24]	; (90000700 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x3c>)
900006e6:	4807      	ldr	r0, [pc, #28]	; (90000704 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x40>)
900006e8:	f026 ffb4 	bl	90027654 <__assert_func>
900006ec:	240281e0 	.word	0x240281e0
900006f0:	240281e2 	.word	0x240281e2
900006f4:	240281e6 	.word	0x240281e6
900006f8:	240281e8 	.word	0x240281e8
900006fc:	90028794 	.word	0x90028794
90000700:	900287f8 	.word	0x900287f8
90000704:	9002883c 	.word	0x9002883c

90000708 <_ZN8touchgfx3HAL15backPorchExitedEv>:
    virtual void backPorchExited()
90000708:	b510      	push	{r4, lr}
9000070a:	4604      	mov	r4, r0
        swapFrameBuffers();
9000070c:	f013 fa0a 	bl	90013b24 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        tick();
90000710:	6823      	ldr	r3, [r4, #0]
90000712:	4620      	mov	r0, r4
90000714:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
    }
90000718:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        tick();
9000071c:	4718      	bx	r3
9000071e:	bf00      	nop

90000720 <_ZNK11TouchGFXHAL17getTFTFrameBufferEv>:
    // Calling parent implementation of getTFTFrameBuffer().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    return TouchGFXGeneratedHAL::getTFTFrameBuffer();
90000720:	f001 be8e 	b.w	90002440 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>

90000724 <_ZN11TouchGFXHAL17setTFTFrameBufferEPt>:
    // Calling parent implementation of setTFTFrameBuffer(uint16_t* address).
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::setTFTFrameBuffer(address);
90000724:	f001 be92 	b.w	9000244c <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>

90000728 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE>:
 * @param rect The area of the screen that has been drawn, expressed in absolute coordinates.
 *
 * @see flushFrameBuffer().
 */
void TouchGFXHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
90000728:	b510      	push	{r4, lr}
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::flushFrameBuffer(const touchgfx::Rect& rect) must
    // be called to notify the touchgfx framework that flush has been performed.

    TouchGFXGeneratedHAL::flushFrameBuffer(rect);
9000072a:	f001 ff51 	bl	900025d0 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
9000072e:	4812      	ldr	r0, [pc, #72]	; (90000778 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x50>)
90000730:	2300      	movs	r3, #0
90000732:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
90000736:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
9000073a:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
                                            /* clean & invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
      do {
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
9000073e:	f643 74e0 	movw	r4, #16352	; 0x3fe0
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
90000742:	f3c3 3c4e 	ubfx	ip, r3, #13, #15
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
90000746:	f3c3 0ec9 	ubfx	lr, r3, #3, #10
9000074a:	ea4f 1c4c 	mov.w	ip, ip, lsl #5
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
9000074e:	ea0c 0104 	and.w	r1, ip, r4
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
90000752:	4673      	mov	r3, lr
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
90000754:	ea41 7283 	orr.w	r2, r1, r3, lsl #30
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
90000758:	3b01      	subs	r3, #1
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
9000075a:	f8c0 2274 	str.w	r2, [r0, #628]	; 0x274
      } while (ways-- != 0U);
9000075e:	1c5a      	adds	r2, r3, #1
90000760:	d1f8      	bne.n	90000754 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x2c>
    } while(sets-- != 0U);
90000762:	f1ac 0c20 	sub.w	ip, ip, #32
90000766:	f11c 0f20 	cmn.w	ip, #32
9000076a:	d1f0      	bne.n	9000074e <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x26>
9000076c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
90000770:	f3bf 8f6f 	isb	sy
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then we need
    // to flush the Dcache to make sure framebuffer is correct in RAM. That's done
    // using SCB_CleanInvalidateDCache().

    SCB_CleanInvalidateDCache();
}
90000774:	bd10      	pop	{r4, pc}
90000776:	bf00      	nop
90000778:	e000ed00 	.word	0xe000ed00

9000077c <_ZN11TouchGFXHAL19configureInterruptsEv>:
    // Calling parent implementation of configureInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::configureInterrupts();
9000077c:	f001 be3c 	b.w	900023f8 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>

90000780 <_ZN11TouchGFXHAL16enableInterruptsEv>:
    // Calling parent implementation of enableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableInterrupts();
90000780:	f002 b84c 	b.w	9000281c <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>

90000784 <_ZN11TouchGFXHAL17disableInterruptsEv>:
    // Calling parent implementation of disableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::disableInterrupts();
90000784:	f002 b836 	b.w	900027f4 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>

90000788 <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv>:
    // Calling parent implementation of enableLCDControllerInterrupt().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableLCDControllerInterrupt();
90000788:	f001 be40 	b.w	9000240c <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>

9000078c <_ZN11TouchGFXHAL16flushFrameBufferEv>:
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
    {
        HAL::flushFrameBuffer();
9000078c:	f012 bc22 	b.w	90012fd4 <_ZN8touchgfx3HAL16flushFrameBufferEv>

90000790 <_ZN11TouchGFXHALD0Ev>:
90000790:	b510      	push	{r4, lr}
90000792:	4604      	mov	r4, r0
90000794:	2188      	movs	r1, #136	; 0x88
90000796:	f026 ff2e 	bl	900275f6 <_ZdlPvj>
9000079a:	4620      	mov	r0, r4
9000079c:	bd10      	pop	{r4, pc}
9000079e:	bf00      	nop

900007a0 <_ZN8touchgfx3HAL11getBlitCapsEv>:
        if (useDMAAcceleration)
900007a0:	f890 3077 	ldrb.w	r3, [r0, #119]	; 0x77
900007a4:	b11b      	cbz	r3, 900007ae <_ZN8touchgfx3HAL11getBlitCapsEv+0xe>
            return dma.getBlitCaps();
900007a6:	6840      	ldr	r0, [r0, #4]
900007a8:	6803      	ldr	r3, [r0, #0]
900007aa:	681b      	ldr	r3, [r3, #0]
900007ac:	4718      	bx	r3
    }
900007ae:	4618      	mov	r0, r3
900007b0:	4770      	bx	lr
900007b2:	bf00      	nop

900007b4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv>:
    virtual void noTouch();

    /** Perform the actual display orientation change. */
    virtual void performDisplayOrientationChange()
    {
        if (requestedOrientation != nativeDisplayOrientation)
900007b4:	f890 2074 	ldrb.w	r2, [r0, #116]	; 0x74
900007b8:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
900007bc:	429a      	cmp	r2, r3
        {
            if (DISPLAY_ROTATION == rotate0)
900007be:	4b0b      	ldr	r3, [pc, #44]	; (900007ec <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x38>)
900007c0:	781a      	ldrb	r2, [r3, #0]
        if (requestedOrientation != nativeDisplayOrientation)
900007c2:	d00b      	beq.n	900007dc <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x28>
            if (DISPLAY_ROTATION == rotate0)
900007c4:	b94a      	cbnz	r2, 900007da <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x26>
            {
                const uint16_t tmp = DISPLAY_HEIGHT;
900007c6:	4a0a      	ldr	r2, [pc, #40]	; (900007f0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x3c>)
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
                DISPLAY_WIDTH = tmp;
                DISPLAY_ROTATION = rotate90;
900007c8:	f04f 0c01 	mov.w	ip, #1
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
900007cc:	4909      	ldr	r1, [pc, #36]	; (900007f4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x40>)
            }
        }
        else if (DISPLAY_ROTATION != rotate0)
        {
            const uint16_t tmp = DISPLAY_HEIGHT;
900007ce:	8810      	ldrh	r0, [r2, #0]
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
            DISPLAY_WIDTH = tmp;
            DISPLAY_ROTATION = rotate0;
900007d0:	f883 c000 	strb.w	ip, [r3]
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
900007d4:	880b      	ldrh	r3, [r1, #0]
            DISPLAY_WIDTH = tmp;
900007d6:	8008      	strh	r0, [r1, #0]
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
900007d8:	8013      	strh	r3, [r2, #0]
        }
    }
900007da:	4770      	bx	lr
        else if (DISPLAY_ROTATION != rotate0)
900007dc:	2a00      	cmp	r2, #0
900007de:	d0fc      	beq.n	900007da <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x26>
            const uint16_t tmp = DISPLAY_HEIGHT;
900007e0:	4a03      	ldr	r2, [pc, #12]	; (900007f0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x3c>)
            DISPLAY_ROTATION = rotate0;
900007e2:	f04f 0c00 	mov.w	ip, #0
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
900007e6:	4903      	ldr	r1, [pc, #12]	; (900007f4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x40>)
900007e8:	e7f1      	b.n	900007ce <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x1a>
900007ea:	bf00      	nop
900007ec:	240281e4 	.word	0x240281e4
900007f0:	240281e2 	.word	0x240281e2
900007f4:	240281e0 	.word	0x240281e0

900007f8 <_ZN8touchgfx3HAL10getDMATypeEv>:
        return dma.getDMAType();
900007f8:	6840      	ldr	r0, [r0, #4]
900007fa:	4a04      	ldr	r2, [pc, #16]	; (9000080c <_ZN8touchgfx3HAL10getDMATypeEv+0x14>)
900007fc:	6803      	ldr	r3, [r0, #0]
900007fe:	699b      	ldr	r3, [r3, #24]
90000800:	4293      	cmp	r3, r2
90000802:	d101      	bne.n	90000808 <_ZN8touchgfx3HAL10getDMATypeEv+0x10>
    }
90000804:	2000      	movs	r0, #0
90000806:	4770      	bx	lr
        return dma.getDMAType();
90000808:	4718      	bx	r3
9000080a:	bf00      	nop
9000080c:	90000681 	.word	0x90000681

90000810 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_>:
        assert(frameBuffer != 0 && "A framebuffer address must be set");
90000810:	b1a9      	cbz	r1, 9000083e <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x2e>
        frameBuffer1 = reinterpret_cast<uint16_t*>(doubleBuffer);
90000812:	6402      	str	r2, [r0, #64]	; 0x40
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
90000814:	3a00      	subs	r2, #0
        frameBuffer0 = reinterpret_cast<uint16_t*>(frameBuffer);
90000816:	63c1      	str	r1, [r0, #60]	; 0x3c
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
90000818:	bf18      	it	ne
9000081a:	2201      	movne	r2, #1
9000081c:	490c      	ldr	r1, [pc, #48]	; (90000850 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x40>)
9000081e:	700a      	strb	r2, [r1, #0]
        setAnimationStorage(animationStorage);
90000820:	6802      	ldr	r2, [r0, #0]
90000822:	490c      	ldr	r1, [pc, #48]	; (90000854 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x44>)
90000824:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
90000828:	428a      	cmp	r2, r1
9000082a:	d106      	bne.n	9000083a <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x2a>
        USE_ANIMATION_STORAGE = animationStorage != 0;
9000082c:	1e19      	subs	r1, r3, #0
9000082e:	4a0a      	ldr	r2, [pc, #40]	; (90000858 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x48>)
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
90000830:	6443      	str	r3, [r0, #68]	; 0x44
        USE_ANIMATION_STORAGE = animationStorage != 0;
90000832:	bf18      	it	ne
90000834:	2101      	movne	r1, #1
90000836:	7011      	strb	r1, [r2, #0]
90000838:	4770      	bx	lr
        setAnimationStorage(animationStorage);
9000083a:	4619      	mov	r1, r3
9000083c:	4710      	bx	r2
        assert(frameBuffer != 0 && "A framebuffer address must be set");
9000083e:	4b07      	ldr	r3, [pc, #28]	; (9000085c <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x4c>)
90000840:	f240 21d2 	movw	r1, #722	; 0x2d2
90000844:	4a06      	ldr	r2, [pc, #24]	; (90000860 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x50>)
90000846:	4807      	ldr	r0, [pc, #28]	; (90000864 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x54>)
    virtual void setFrameBufferStartAddresses(void* frameBuffer, void* doubleBuffer, void* animationStorage)
90000848:	b510      	push	{r4, lr}
        assert(frameBuffer != 0 && "A framebuffer address must be set");
9000084a:	f026 ff03 	bl	90027654 <__assert_func>
9000084e:	bf00      	nop
90000850:	240281ea 	.word	0x240281ea
90000854:	90000695 	.word	0x90000695
90000858:	240281eb 	.word	0x240281eb
9000085c:	90028884 	.word	0x90028884
90000860:	900288bc 	.word	0x900288bc
90000864:	9002883c 	.word	0x9002883c

90000868 <_ZN11TouchGFXHAL9taskEntryEv>:
{
90000868:	b508      	push	{r3, lr}
    enableLCDControllerInterrupt();
9000086a:	6803      	ldr	r3, [r0, #0]
{
9000086c:	4604      	mov	r4, r0
9000086e:	4d17      	ldr	r5, [pc, #92]	; (900008cc <_ZN11TouchGFXHAL9taskEntryEv+0x64>)
    enableLCDControllerInterrupt();
90000870:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
90000874:	4798      	blx	r3
    enableInterrupts();
90000876:	6823      	ldr	r3, [r4, #0]
90000878:	4620      	mov	r0, r4
9000087a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
9000087c:	4798      	blx	r3
    OSWrappers::waitForVSync();
9000087e:	f001 f8bb 	bl	900019f8 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
    backPorchExited();
90000882:	6823      	ldr	r3, [r4, #0]
90000884:	4620      	mov	r0, r4
90000886:	6f1b      	ldr	r3, [r3, #112]	; 0x70
90000888:	4798      	blx	r3
    HAL_GPIO_WritePin(LCD_RESET_GPIO_Port, LCD_RESET_Pin, GPIO_PIN_SET);
9000088a:	2201      	movs	r2, #1
9000088c:	2104      	movs	r1, #4
9000088e:	4810      	ldr	r0, [pc, #64]	; (900008d0 <_ZN11TouchGFXHAL9taskEntryEv+0x68>)
90000890:	f009 fce0 	bl	9000a254 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_DE_GPIO_Port, LCD_DE_Pin, GPIO_PIN_SET);
90000894:	2201      	movs	r2, #1
90000896:	2180      	movs	r1, #128	; 0x80
90000898:	480e      	ldr	r0, [pc, #56]	; (900008d4 <_ZN11TouchGFXHAL9taskEntryEv+0x6c>)
9000089a:	f009 fcdb 	bl	9000a254 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
9000089e:	2201      	movs	r2, #1
900008a0:	480d      	ldr	r0, [pc, #52]	; (900008d8 <_ZN11TouchGFXHAL9taskEntryEv+0x70>)
900008a2:	4611      	mov	r1, r2
900008a4:	f009 fcd6 	bl	9000a254 <HAL_GPIO_WritePin>
        OSWrappers::waitForVSync();
900008a8:	f001 f8a6 	bl	900019f8 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
        backPorchExited();
900008ac:	6823      	ldr	r3, [r4, #0]
        swapFrameBuffers();
900008ae:	4620      	mov	r0, r4
900008b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
900008b2:	42ab      	cmp	r3, r5
900008b4:	d107      	bne.n	900008c6 <_ZN11TouchGFXHAL9taskEntryEv+0x5e>
900008b6:	f013 f935 	bl	90013b24 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        tick();
900008ba:	6823      	ldr	r3, [r4, #0]
900008bc:	4620      	mov	r0, r4
900008be:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
900008c2:	4798      	blx	r3
    }
900008c4:	e7f0      	b.n	900008a8 <_ZN11TouchGFXHAL9taskEntryEv+0x40>
900008c6:	4798      	blx	r3
900008c8:	e7ee      	b.n	900008a8 <_ZN11TouchGFXHAL9taskEntryEv+0x40>
900008ca:	bf00      	nop
900008cc:	90000709 	.word	0x90000709
900008d0:	58020000 	.word	0x58020000
900008d4:	58020c00 	.word	0x58020c00
900008d8:	58022800 	.word	0x58022800

900008dc <_ZN11TouchGFXHAL10initializeEv>:
{
900008dc:	b538      	push	{r3, r4, r5, lr}
900008de:	4604      	mov	r4, r0
    TouchGFXGeneratedHAL::initialize();
900008e0:	f001 ffa6 	bl	90002830 <_ZN20TouchGFXGeneratedHAL10initializeEv>
    setFrameBufferStartAddresses((void*)frameBuffer0, (void*)frameBuffer1, (void*)animationBuffer);
900008e4:	4817      	ldr	r0, [pc, #92]	; (90000944 <_ZN11TouchGFXHAL10initializeEv+0x68>)
900008e6:	6823      	ldr	r3, [r4, #0]
900008e8:	6be1      	ldr	r1, [r4, #60]	; 0x3c
900008ea:	f8d3 5088 	ldr.w	r5, [r3, #136]	; 0x88
900008ee:	6c22      	ldr	r2, [r4, #64]	; 0x40
900008f0:	4285      	cmp	r5, r0
900008f2:	d119      	bne.n	90000928 <_ZN11TouchGFXHAL10initializeEv+0x4c>
        assert(frameBuffer != 0 && "A framebuffer address must be set");
900008f4:	b1f9      	cbz	r1, 90000936 <_ZN11TouchGFXHAL10initializeEv+0x5a>
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
900008f6:	3a00      	subs	r2, #0
900008f8:	4913      	ldr	r1, [pc, #76]	; (90000948 <_ZN11TouchGFXHAL10initializeEv+0x6c>)
        setAnimationStorage(animationStorage);
900008fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
900008fe:	bf18      	it	ne
90000900:	2201      	movne	r2, #1
90000902:	4812      	ldr	r0, [pc, #72]	; (9000094c <_ZN11TouchGFXHAL10initializeEv+0x70>)
90000904:	428b      	cmp	r3, r1
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
90000906:	4912      	ldr	r1, [pc, #72]	; (90000950 <_ZN11TouchGFXHAL10initializeEv+0x74>)
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
90000908:	7002      	strb	r2, [r0, #0]
        setAnimationStorage(animationStorage);
9000090a:	d111      	bne.n	90000930 <_ZN11TouchGFXHAL10initializeEv+0x54>
        USE_ANIMATION_STORAGE = animationStorage != 0;
9000090c:	4b11      	ldr	r3, [pc, #68]	; (90000954 <_ZN11TouchGFXHAL10initializeEv+0x78>)
9000090e:	2201      	movs	r2, #1
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
90000910:	6461      	str	r1, [r4, #68]	; 0x44
        USE_ANIMATION_STORAGE = animationStorage != 0;
90000912:	701a      	strb	r2, [r3, #0]
    instrumentation.init();
90000914:	f104 057c 	add.w	r5, r4, #124	; 0x7c
90000918:	4628      	mov	r0, r5
9000091a:	f7ff fd7d 	bl	90000418 <_ZN8touchgfx25CortexMMCUInstrumentation4initEv>
        updateMCULoad = enabled;
9000091e:	2301      	movs	r3, #1
        mcuInstrumentation = mcuInstr;
90000920:	6125      	str	r5, [r4, #16]
        updateMCULoad = enabled;
90000922:	f884 306c 	strb.w	r3, [r4, #108]	; 0x6c
}
90000926:	bd38      	pop	{r3, r4, r5, pc}
    setFrameBufferStartAddresses((void*)frameBuffer0, (void*)frameBuffer1, (void*)animationBuffer);
90000928:	4b09      	ldr	r3, [pc, #36]	; (90000950 <_ZN11TouchGFXHAL10initializeEv+0x74>)
9000092a:	4620      	mov	r0, r4
9000092c:	47a8      	blx	r5
9000092e:	e7f1      	b.n	90000914 <_ZN11TouchGFXHAL10initializeEv+0x38>
        setAnimationStorage(animationStorage);
90000930:	4620      	mov	r0, r4
90000932:	4798      	blx	r3
90000934:	e7ee      	b.n	90000914 <_ZN11TouchGFXHAL10initializeEv+0x38>
        assert(frameBuffer != 0 && "A framebuffer address must be set");
90000936:	4b08      	ldr	r3, [pc, #32]	; (90000958 <_ZN11TouchGFXHAL10initializeEv+0x7c>)
90000938:	f240 21d2 	movw	r1, #722	; 0x2d2
9000093c:	4a07      	ldr	r2, [pc, #28]	; (9000095c <_ZN11TouchGFXHAL10initializeEv+0x80>)
9000093e:	4808      	ldr	r0, [pc, #32]	; (90000960 <_ZN11TouchGFXHAL10initializeEv+0x84>)
90000940:	f026 fe88 	bl	90027654 <__assert_func>
90000944:	90000811 	.word	0x90000811
90000948:	90000695 	.word	0x90000695
9000094c:	240281ea 	.word	0x240281ea
90000950:	d0000000 	.word	0xd0000000
90000954:	240281eb 	.word	0x240281eb
90000958:	90028884 	.word	0x90028884
9000095c:	900288bc 	.word	0x900288bc
90000960:	9002883c 	.word	0x9002883c

90000964 <IdleTaskHook>:
}

extern "C"
{
    portBASE_TYPE IdleTaskHook(void* p)
    {
90000964:	b508      	push	{r3, lr}
        return instance;
90000966:	4b07      	ldr	r3, [pc, #28]	; (90000984 <IdleTaskHook+0x20>)
        if ((int)p) //idle task sched out
90000968:	b128      	cbz	r0, 90000976 <IdleTaskHook+0x12>
        {
            touchgfx::HAL::getInstance()->setMCUActive(true);
9000096a:	6818      	ldr	r0, [r3, #0]
9000096c:	2101      	movs	r1, #1
9000096e:	f013 f8f3 	bl	90013b58 <_ZN8touchgfx3HAL12setMCUActiveEb>
        else //idle task sched in
        {
            touchgfx::HAL::getInstance()->setMCUActive(false);
        }
        return pdTRUE;
    }
90000972:	2001      	movs	r0, #1
90000974:	bd08      	pop	{r3, pc}
            touchgfx::HAL::getInstance()->setMCUActive(false);
90000976:	4601      	mov	r1, r0
90000978:	6818      	ldr	r0, [r3, #0]
9000097a:	f013 f8ed 	bl	90013b58 <_ZN8touchgfx3HAL12setMCUActiveEb>
    }
9000097e:	2001      	movs	r0, #1
90000980:	bd08      	pop	{r3, pc}
90000982:	bf00      	nop
90000984:	240281ec 	.word	0x240281ec

90000988 <_ZNK20HardwareMJPEGDecoder21getCurrentFrameNumberEv>:
    virtual bool gotoNextFrame();
    //Decode part of the current frame
    virtual bool decodeFrame(const touchgfx::Rect& area, uint8_t* frameBuffer, uint32_t framebuffer_width);
    virtual bool decodeThumbnail(uint32_t frameno, uint8_t* buffer, uint16_t width, uint16_t height);
    virtual void gotoFrame(uint32_t frameno);
    virtual uint32_t getCurrentFrameNumber() const { return frameNumber; }
90000988:	6940      	ldr	r0, [r0, #20]
9000098a:	4770      	bx	lr

9000098c <_ZN20HardwareMJPEGDecoder12getLastErrorEv>:
    virtual void setRepeatVideo(bool repeat);
    virtual void getVideoInfo(touchgfx::VideoInformation* data);

    void setAVIFileBuffer(uint8_t* buffer, uint32_t size) { aviBuffer = buffer, aviBufferLength = size; }

    virtual AVIErrors getLastError() { return lastError; }
9000098c:	f890 0040 	ldrb.w	r0, [r0, #64]	; 0x40
90000990:	4770      	bx	lr
90000992:	bf00      	nop

90000994 <_ZN20HardwareMJPEGDecoder8hasVideoEv>:
    readVideoHeader();
}

bool HardwareMJPEGDecoder::hasVideo()
{
    return (reader != 0) || (movieData != 0);
90000994:	6b03      	ldr	r3, [r0, #48]	; 0x30
90000996:	b10b      	cbz	r3, 9000099c <_ZN20HardwareMJPEGDecoder8hasVideoEv+0x8>
90000998:	2001      	movs	r0, #1
}
9000099a:	4770      	bx	lr
    return (reader != 0) || (movieData != 0);
9000099c:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
9000099e:	3800      	subs	r0, #0
900009a0:	bf18      	it	ne
900009a2:	2001      	movne	r0, #1
900009a4:	4770      	bx	lr
900009a6:	bf00      	nop

900009a8 <_ZN20HardwareMJPEGDecoder17getNumberOfFramesEv>:
}

uint32_t HardwareMJPEGDecoder::getNumberOfFrames()
{
    return videoInfo.number_of_frames;
}
900009a8:	6880      	ldr	r0, [r0, #8]
900009aa:	4770      	bx	lr

900009ac <_ZN20HardwareMJPEGDecoder14setRepeatVideoEb>:

void HardwareMJPEGDecoder::setRepeatVideo(bool repeat)
{

}
900009ac:	4770      	bx	lr
900009ae:	bf00      	nop

900009b0 <_ZN20HardwareMJPEGDecoder12getVideoInfoEPN8touchgfx16VideoInformationE>:

void HardwareMJPEGDecoder::getVideoInfo(touchgfx::VideoInformation* data)
{
    *data = videoInfo;
900009b0:	3004      	adds	r0, #4
{
900009b2:	468c      	mov	ip, r1
    *data = videoInfo;
900009b4:	c80f      	ldmia	r0, {r0, r1, r2, r3}
900009b6:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
}
900009ba:	4770      	bx	lr

900009bc <_ZN20HardwareMJPEGDecoderD1Ev>:
class HardwareMJPEGDecoder : public MJPEGDecoder
900009bc:	4770      	bx	lr
900009be:	bf00      	nop

900009c0 <_ZN20HardwareMJPEGDecoder15decodeThumbnailEmPhtt>:
{
900009c0:	b508      	push	{r3, lr}
    assert(0);
900009c2:	4a03      	ldr	r2, [pc, #12]	; (900009d0 <_ZN20HardwareMJPEGDecoder15decodeThumbnailEmPhtt+0x10>)
900009c4:	f240 11cf 	movw	r1, #463	; 0x1cf
900009c8:	4b02      	ldr	r3, [pc, #8]	; (900009d4 <_ZN20HardwareMJPEGDecoder15decodeThumbnailEmPhtt+0x14>)
900009ca:	4803      	ldr	r0, [pc, #12]	; (900009d8 <_ZN20HardwareMJPEGDecoder15decodeThumbnailEmPhtt+0x18>)
900009cc:	f026 fe42 	bl	90027654 <__assert_func>
900009d0:	900289e8 	.word	0x900289e8
900009d4:	900289e4 	.word	0x900289e4
900009d8:	90028a44 	.word	0x90028a44

900009dc <_ZN20HardwareMJPEGDecoderD0Ev>:
900009dc:	b510      	push	{r4, lr}
900009de:	4604      	mov	r4, r0
900009e0:	2148      	movs	r1, #72	; 0x48
900009e2:	f026 fe08 	bl	900275f6 <_ZdlPvj>
900009e6:	4620      	mov	r0, r4
900009e8:	bd10      	pop	{r4, pc}
900009ea:	bf00      	nop

900009ec <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0>:
void HardwareMJPEGDecoder::decodeMJPEGFrame(const uint8_t* const mjpgdata, const uint32_t length, uint8_t* outputBuffer, uint16_t bufferWidth, uint16_t bufferHeight, uint32_t bufferStride)
900009ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
900009f0:	b085      	sub	sp, #20
900009f2:	4605      	mov	r5, r0
      JPEG_ConvertorParams.bytes_pr_pixel = 2;
900009f4:	4c65      	ldr	r4, [pc, #404]	; (90000b8c <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x1a0>)
void HardwareMJPEGDecoder::decodeMJPEGFrame(const uint8_t* const mjpgdata, const uint32_t length, uint8_t* outputBuffer, uint16_t bufferWidth, uint16_t bufferHeight, uint32_t bufferStride)
900009f6:	9003      	str	r0, [sp, #12]
      JPEG_ConvertorParams.bytes_pr_pixel = 2;
900009f8:	2002      	movs	r0, #2
900009fa:	6120      	str	r0, [r4, #16]
      JPEG_ConvertorParams.WidthExtend = videoInfo.frame_width;
900009fc:	68e8      	ldr	r0, [r5, #12]
      if((JPEG_ConvertorParams.WidthExtend % 16) != 0)
900009fe:	0705      	lsls	r5, r0, #28
90000a00:	d003      	beq.n	90000a0a <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x1e>
          JPEG_ConvertorParams.WidthExtend += 16 - (JPEG_ConvertorParams.WidthExtend % 16);
90000a02:	f020 000f 	bic.w	r0, r0, #15
90000a06:	4c61      	ldr	r4, [pc, #388]	; (90000b8c <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x1a0>)
90000a08:	3010      	adds	r0, #16
90000a0a:	6020      	str	r0, [r4, #0]
      JPEG_ConvertorParams.MCU_pr_line = JPEG_ConvertorParams.WidthExtend / MCU_WIDTH_PIXELS;
90000a0c:	0900      	lsrs	r0, r0, #4
90000a0e:	4c5f      	ldr	r4, [pc, #380]	; (90000b8c <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x1a0>)
  * @retval None
  */
uint32_t JPEG_Decode_DMA(JPEG_HandleTypeDef *hjpeg, uint8_t* input, uint32_t chunkSizeIn /* length */, uint8_t* output)
{
    FrameBufferAddress = output;
    Output_Is_Paused = 0;
90000a10:	2700      	movs	r7, #0
90000a12:	4e5f      	ldr	r6, [pc, #380]	; (90000b90 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x1a4>)
      JPEG_ConvertorParams.MCU_pr_line = JPEG_ConvertorParams.WidthExtend / MCU_WIDTH_PIXELS;
90000a14:	60e0      	str	r0, [r4, #12]
      Jpeg_OUT_BufferTab[i].State = JPEG_BUFFER_EMPTY;
      Jpeg_OUT_BufferTab[i].DataBufferSize = 0;
    }

    //Do not return from this function until done with decoding all chunks.
    HAL_JPEG_Decode_DMA(hjpeg, input, CHUNK_SIZE_IN, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
90000a16:	eb00 0040 	add.w	r0, r0, r0, lsl #1
      Jpeg_OUT_BufferTab[i].State = JPEG_BUFFER_EMPTY;
90000a1a:	4d5e      	ldr	r5, [pc, #376]	; (90000b94 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x1a8>)
    HAL_JPEG_Decode_DMA(hjpeg, input, CHUNK_SIZE_IN, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
90000a1c:	01c0      	lsls	r0, r0, #7
    Output_Is_Paused = 0;
90000a1e:	6037      	str	r7, [r6, #0]
    DMA2D_output_Is_Paused = 1;
90000a20:	f8df b19c 	ldr.w	fp, [pc, #412]	; 90000bc0 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x1d4>
    HAL_JPEG_Decode_DMA(hjpeg, input, CHUNK_SIZE_IN, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
90000a24:	9000      	str	r0, [sp, #0]
      JPEG_ConvertorParams.LastLineHeight = 16 - (videoInfo.frame_height % MCU_HEIGHT_PIXELS);
90000a26:	9803      	ldr	r0, [sp, #12]
    JPEG_OUT_Read_BufferIndex = 0;
90000a28:	f8df 8198 	ldr.w	r8, [pc, #408]	; 90000bc4 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x1d8>
      JPEG_ConvertorParams.LastLineHeight = 16 - (videoInfo.frame_height % MCU_HEIGHT_PIXELS);
90000a2c:	6900      	ldr	r0, [r0, #16]
      Jpeg_OUT_BufferTab[i].State = JPEG_BUFFER_EMPTY;
90000a2e:	702f      	strb	r7, [r5, #0]
      JPEG_ConvertorParams.LastLineHeight = 16 - (videoInfo.frame_height % MCU_HEIGHT_PIXELS);
90000a30:	f000 000f 	and.w	r0, r0, #15
      Jpeg_OUT_BufferTab[i].DataBufferSize = 0;
90000a34:	60af      	str	r7, [r5, #8]
      Jpeg_OUT_BufferTab[i].State = JPEG_BUFFER_EMPTY;
90000a36:	732f      	strb	r7, [r5, #12]
      JPEG_ConvertorParams.LastLineHeight = 16 - (videoInfo.frame_height % MCU_HEIGHT_PIXELS);
90000a38:	f1c0 0010 	rsb	r0, r0, #16
      Jpeg_OUT_BufferTab[i].DataBufferSize = 0;
90000a3c:	616f      	str	r7, [r5, #20]
90000a3e:	f8df 9188 	ldr.w	r9, [pc, #392]	; 90000bc8 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x1dc>
      JPEG_ConvertorParams.LastLineHeight = 16 - (videoInfo.frame_height % MCU_HEIGHT_PIXELS);
90000a42:	60a0      	str	r0, [r4, #8]
      JPEG_ConvertorParams.ScaledWidth = 480 * JPEG_ConvertorParams.bytes_pr_pixel;
90000a44:	f44f 7070 	mov.w	r0, #960	; 0x3c0
90000a48:	f8df a180 	ldr.w	sl, [pc, #384]	; 90000bcc <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x1e0>
90000a4c:	6060      	str	r0, [r4, #4]
    FrameBufferAddress = output;
90000a4e:	4852      	ldr	r0, [pc, #328]	; (90000b98 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x1ac>)
90000a50:	4c52      	ldr	r4, [pc, #328]	; (90000b9c <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x1b0>)
90000a52:	6003      	str	r3, [r0, #0]
    JPEG_OUT_Write_BufferIndex = 0;
90000a54:	4b52      	ldr	r3, [pc, #328]	; (90000ba0 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x1b4>)
    HAL_JPEG_Decode_DMA(hjpeg, input, CHUNK_SIZE_IN, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
90000a56:	4853      	ldr	r0, [pc, #332]	; (90000ba4 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x1b8>)
    JPEG_OUT_Write_BufferIndex = 0;
90000a58:	601f      	str	r7, [r3, #0]
    JPEG_InputImageIndex = 0;
90000a5a:	4b53      	ldr	r3, [pc, #332]	; (90000ba8 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x1bc>)
    JPEG_OUT_Read_BufferIndex = 0;
90000a5c:	f8c8 7000 	str.w	r7, [r8]
    JPEG_InputImageIndex = 0;
90000a60:	601f      	str	r7, [r3, #0]
    JPEG_InputImageAddress = (uint32_t)input;
90000a62:	4b52      	ldr	r3, [pc, #328]	; (90000bac <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x1c0>)
90000a64:	6019      	str	r1, [r3, #0]
    JPEG_InputImageSize_Bytes = chunkSizeIn;
90000a66:	4b52      	ldr	r3, [pc, #328]	; (90000bb0 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x1c4>)
90000a68:	601a      	str	r2, [r3, #0]
    HAL_JPEG_Decode_DMA(hjpeg, input, CHUNK_SIZE_IN, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
90000a6a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    MCU_BlockIndex = 0;
90000a6e:	4b51      	ldr	r3, [pc, #324]	; (90000bb4 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x1c8>)
90000a70:	601f      	str	r7, [r3, #0]
    DMA2D_output_Is_Paused = 1;
90000a72:	2301      	movs	r3, #1
90000a74:	f8cb 3000 	str.w	r3, [fp]
    HAL_JPEG_Decode_DMA(hjpeg, input, CHUNK_SIZE_IN, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
90000a78:	686b      	ldr	r3, [r5, #4]
90000a7a:	f00a fd1b 	bl	9000b4b4 <HAL_JPEG_Decode_DMA>
  * @param dma: DMA2D reference
  * @retval 1 : if JPEG processing has finished, 0 : if JPEG processing still ongoing
  */
uint32_t JPEG_OutputHandler(JPEG_HandleTypeDef *hjpeg, touchgfx::DMA_Interface& dma)
{
  if(Jpeg_HWDecodingEnd && DMA2D_CopyBufferEnd) // decode completed
90000a7e:	f8d9 3000 	ldr.w	r3, [r9]
90000a82:	b11b      	cbz	r3, 90000a8c <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0xa0>
90000a84:	4b4c      	ldr	r3, [pc, #304]	; (90000bb8 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x1cc>)
90000a86:	681b      	ldr	r3, [r3, #0]
90000a88:	2b00      	cmp	r3, #0
90000a8a:	d17d      	bne.n	90000b88 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x19c>
  {
      return 1;
  }

  // Add job to DMA2D if ready and JPEG buffer is full
  if((Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].State == JPEG_BUFFER_FULL) && (DMA2D_output_Is_Paused == 1))
90000a8c:	f8d8 3000 	ldr.w	r3, [r8]
90000a90:	eb03 0243 	add.w	r2, r3, r3, lsl #1
90000a94:	f815 1022 	ldrb.w	r1, [r5, r2, lsl #2]
90000a98:	eb05 0282 	add.w	r2, r5, r2, lsl #2
90000a9c:	2901      	cmp	r1, #1
90000a9e:	d042      	beq.n	90000b26 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x13a>
      // Try to start DMA2D
      dma.start();
  }

  // Start JPEG IP if paused and next buffer is empty
  if((Output_Is_Paused == 1) && \
90000aa0:	6833      	ldr	r3, [r6, #0]
          (Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State == JPEG_BUFFER_EMPTY) &&\
90000aa2:	2b01      	cmp	r3, #1
90000aa4:	d029      	beq.n	90000afa <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x10e>
  {
      Output_Is_Paused = 0;
      HAL_JPEG_Resume(hjpeg, JPEG_PAUSE_RESUME_OUTPUT);
  }

  if ((Output_Is_Paused == 0) && (DMA2D_output_Is_Paused == 0))
90000aa6:	6833      	ldr	r3, [r6, #0]
90000aa8:	b9c3      	cbnz	r3, 90000adc <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0xf0>
90000aaa:	f8db 3000 	ldr.w	r3, [fp]
90000aae:	fab3 f383 	clz	r3, r3
90000ab2:	095b      	lsrs	r3, r3, #5
90000ab4:	005b      	lsls	r3, r3, #1
        JpegProcessing_End = JPEG_OutputHandler(&hjpeg, *pDma);
90000ab6:	6023      	str	r3, [r4, #0]
        if (JpegProcessing_End == 2)
90000ab8:	6823      	ldr	r3, [r4, #0]
90000aba:	2b02      	cmp	r3, #2
90000abc:	d013      	beq.n	90000ae6 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0xfa>
      while(JpegProcessing_End != 1);
90000abe:	6823      	ldr	r3, [r4, #0]
90000ac0:	2b01      	cmp	r3, #1
90000ac2:	d1dc      	bne.n	90000a7e <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x92>
  {
      return count_ == max_size_;
  }
  void reset()
  {
      head_ = tail_ = count_ = 0;
90000ac4:	2300      	movs	r3, #0
      DMA2D_CopyBufferEnd = 0;
90000ac6:	4a3c      	ldr	r2, [pc, #240]	; (90000bb8 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x1cc>)
90000ac8:	e9ca 3302 	strd	r3, r3, [sl, #8]
90000acc:	f8ca 3004 	str.w	r3, [sl, #4]
      Jpeg_HWDecodingEnd = 0;
90000ad0:	f8c9 3000 	str.w	r3, [r9]
      DMA2D_CopyBufferEnd = 0;
90000ad4:	6013      	str	r3, [r2, #0]
}
90000ad6:	b005      	add	sp, #20
90000ad8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  {
      return 2;
  }

  return 0;
90000adc:	2300      	movs	r3, #0
        JpegProcessing_End = JPEG_OutputHandler(&hjpeg, *pDma);
90000ade:	6023      	str	r3, [r4, #0]
        if (JpegProcessing_End == 2)
90000ae0:	6823      	ldr	r3, [r4, #0]
90000ae2:	2b02      	cmp	r3, #2
90000ae4:	d1eb      	bne.n	90000abe <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0xd2>
          SEM_WAIT(semDecodingDone);
90000ae6:	4b35      	ldr	r3, [pc, #212]	; (90000bbc <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x1d0>)
90000ae8:	f04f 31ff 	mov.w	r1, #4294967295
90000aec:	6818      	ldr	r0, [r3, #0]
90000aee:	f00e f9ab 	bl	9000ee48 <osSemaphoreAcquire>
      while(JpegProcessing_End != 1);
90000af2:	6823      	ldr	r3, [r4, #0]
90000af4:	2b01      	cmp	r3, #1
90000af6:	d1c2      	bne.n	90000a7e <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x92>
90000af8:	e7e4      	b.n	90000ac4 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0xd8>
          (Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State == JPEG_BUFFER_EMPTY) &&\
90000afa:	4b29      	ldr	r3, [pc, #164]	; (90000ba0 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x1b4>)
90000afc:	681b      	ldr	r3, [r3, #0]
90000afe:	eb03 0343 	add.w	r3, r3, r3, lsl #1
  if((Output_Is_Paused == 1) && \
90000b02:	f815 3023 	ldrb.w	r3, [r5, r3, lsl #2]
90000b06:	2b00      	cmp	r3, #0
90000b08:	d1cd      	bne.n	90000aa6 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0xba>
          (Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].State == JPEG_BUFFER_EMPTY))
90000b0a:	f8d8 3000 	ldr.w	r3, [r8]
90000b0e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
          (Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State == JPEG_BUFFER_EMPTY) &&\
90000b12:	f815 3023 	ldrb.w	r3, [r5, r3, lsl #2]
90000b16:	2b00      	cmp	r3, #0
90000b18:	d1c5      	bne.n	90000aa6 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0xba>
      HAL_JPEG_Resume(hjpeg, JPEG_PAUSE_RESUME_OUTPUT);
90000b1a:	2102      	movs	r1, #2
90000b1c:	4821      	ldr	r0, [pc, #132]	; (90000ba4 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x1b8>)
      Output_Is_Paused = 0;
90000b1e:	6033      	str	r3, [r6, #0]
      HAL_JPEG_Resume(hjpeg, JPEG_PAUSE_RESUME_OUTPUT);
90000b20:	f00a fe10 	bl	9000b744 <HAL_JPEG_Resume>
90000b24:	e7bf      	b.n	90000aa6 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0xba>
  if((Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].State == JPEG_BUFFER_FULL) && (DMA2D_output_Is_Paused == 1))
90000b26:	f8db 1000 	ldr.w	r1, [fp]
90000b2a:	2901      	cmp	r1, #1
90000b2c:	d1b8      	bne.n	90000aa0 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0xb4>
      JPEG_OUT_Read_BufferIndex++;
90000b2e:	3301      	adds	r3, #1
      };
90000b30:	4920      	ldr	r1, [pc, #128]	; (90000bb4 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x1c8>)
      tail_ = (tail_ + 1) % max_size_;
90000b32:	f8da 0000 	ldr.w	r0, [sl]
      JPEG_OUT_Read_BufferIndex++;
90000b36:	2b01      	cmp	r3, #1
      };
90000b38:	f8d1 c000 	ldr.w	ip, [r1]
      JPEG_OUT_Read_BufferIndex++;
90000b3c:	bf88      	it	hi
90000b3e:	463b      	movhi	r3, r7
90000b40:	f8c8 3000 	str.w	r3, [r8]
      buffer_[tail_] = job;
90000b44:	f8da 3008 	ldr.w	r3, [sl, #8]
      tail_ = (tail_ + 1) % max_size_;
90000b48:	1c59      	adds	r1, r3, #1
      buffer_[tail_] = job;
90000b4a:	3302      	adds	r3, #2
90000b4c:	f84a c033 	str.w	ip, [sl, r3, lsl #3]
90000b50:	eb0a 03c3 	add.w	r3, sl, r3, lsl #3
90000b54:	605a      	str	r2, [r3, #4]
        JpegProcessing_End = JPEG_OutputHandler(&hjpeg, *pDma);
90000b56:	9a03      	ldr	r2, [sp, #12]
      tail_ = (tail_ + 1) % max_size_;
90000b58:	fbb1 f3f0 	udiv	r3, r1, r0
90000b5c:	fb00 1113 	mls	r1, r0, r3, r1
90000b60:	6c50      	ldr	r0, [r2, #68]	; 0x44
      count_++;
90000b62:	f8da 200c 	ldr.w	r2, [sl, #12]
      tail_ = (tail_ + 1) % max_size_;
90000b66:	f8ca 1008 	str.w	r1, [sl, #8]
      count_++;
90000b6a:	3201      	adds	r2, #1
      MCU_BlockIndex += JPEG_ConvertorParams.MCU_pr_line;
90000b6c:	4911      	ldr	r1, [pc, #68]	; (90000bb4 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x1c8>)
90000b6e:	f8ca 200c 	str.w	r2, [sl, #12]
90000b72:	4a06      	ldr	r2, [pc, #24]	; (90000b8c <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x1a0>)
90000b74:	680b      	ldr	r3, [r1, #0]
90000b76:	68d2      	ldr	r2, [r2, #12]
90000b78:	4413      	add	r3, r2
90000b7a:	600b      	str	r3, [r1, #0]
      dma.start();
90000b7c:	6803      	ldr	r3, [r0, #0]
      DMA2D_output_Is_Paused = 0;
90000b7e:	f8cb 7000 	str.w	r7, [fp]
      dma.start();
90000b82:	691b      	ldr	r3, [r3, #16]
90000b84:	4798      	blx	r3
90000b86:	e78b      	b.n	90000aa0 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0xb4>
      return 1;
90000b88:	2301      	movs	r3, #1
90000b8a:	e794      	b.n	90000ab6 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0xca>
90000b8c:	24005ba0 	.word	0x24005ba0
90000b90:	24005b9c 	.word	0x24005b9c
90000b94:	24000004 	.word	0x24000004
90000b98:	24005b74 	.word	0x24005b74
90000b9c:	24005b8c 	.word	0x24005b8c
90000ba0:	24005b88 	.word	0x24005b88
90000ba4:	2400ce84 	.word	0x2400ce84
90000ba8:	24005b7c 	.word	0x24005b7c
90000bac:	24005b78 	.word	0x24005b78
90000bb0:	24005b80 	.word	0x24005b80
90000bb4:	24005b94 	.word	0x24005b94
90000bb8:	24005b6c 	.word	0x24005b6c
90000bbc:	24005bd8 	.word	0x24005bd8
90000bc0:	24005b70 	.word	0x24005b70
90000bc4:	24005b84 	.word	0x24005b84
90000bc8:	24005b90 	.word	0x24005b90
90000bcc:	24005bb4 	.word	0x24005bb4

90000bd0 <_ZN20HardwareMJPEGDecoder9gotoFrameEm>:
{
90000bd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (frameNumber > getNumberOfFrames())
90000bd2:	6803      	ldr	r3, [r0, #0]
90000bd4:	2901      	cmp	r1, #1
90000bd6:	4e2a      	ldr	r6, [pc, #168]	; (90000c80 <_ZN20HardwareMJPEGDecoder9gotoFrameEm+0xb0>)
{
90000bd8:	4604      	mov	r4, r0
    if (frameNumber > getNumberOfFrames())
90000bda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90000bdc:	bf38      	it	cc
90000bde:	2101      	movcc	r1, #1
90000be0:	42b3      	cmp	r3, r6
90000be2:	460d      	mov	r5, r1
90000be4:	d138      	bne.n	90000c58 <_ZN20HardwareMJPEGDecoder9gotoFrameEm+0x88>
    return videoInfo.number_of_frames;
90000be6:	6883      	ldr	r3, [r0, #8]
    if (frameNumber > getNumberOfFrames())
90000be8:	4299      	cmp	r1, r3
90000bea:	d82a      	bhi.n	90000c42 <_ZN20HardwareMJPEGDecoder9gotoFrameEm+0x72>
    uint32_t offset = indexOffset + 8 + (frameNumber-1)*16;
90000bec:	1e6b      	subs	r3, r5, #1
90000bee:	69e2      	ldr	r2, [r4, #28]
    if (reader != 0)
90000bf0:	6b20      	ldr	r0, [r4, #48]	; 0x30
    uint32_t offset = indexOffset + 8 + (frameNumber-1)*16;
90000bf2:	eb02 1703 	add.w	r7, r2, r3, lsl #4
    if (reader != 0)
90000bf6:	b350      	cbz	r0, 90000c4e <_ZN20HardwareMJPEGDecoder9gotoFrameEm+0x7e>
        if (length > aviBufferLength)
90000bf8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
90000bfa:	2b0f      	cmp	r3, #15
90000bfc:	d937      	bls.n	90000c6e <_ZN20HardwareMJPEGDecoder9gotoFrameEm+0x9e>
        reader->seek(offset);
90000bfe:	6803      	ldr	r3, [r0, #0]
    uint32_t offset = indexOffset + 8 + (frameNumber-1)*16;
90000c00:	f107 0608 	add.w	r6, r7, #8
        reader->seek(offset);
90000c04:	68db      	ldr	r3, [r3, #12]
90000c06:	4631      	mov	r1, r6
90000c08:	4798      	blx	r3
        if (!reader->readData(aviBuffer, length))
90000c0a:	6b20      	ldr	r0, [r4, #48]	; 0x30
90000c0c:	2210      	movs	r2, #16
90000c0e:	6b61      	ldr	r1, [r4, #52]	; 0x34
90000c10:	6803      	ldr	r3, [r0, #0]
90000c12:	691b      	ldr	r3, [r3, #16]
90000c14:	4798      	blx	r3
90000c16:	b1b0      	cbz	r0, 90000c46 <_ZN20HardwareMJPEGDecoder9gotoFrameEm+0x76>
    if (reader != 0)
90000c18:	6b23      	ldr	r3, [r4, #48]	; 0x30
        aviBufferStartOffset = offset;
90000c1a:	63e6      	str	r6, [r4, #60]	; 0x3c
    if (reader != 0)
90000c1c:	b1bb      	cbz	r3, 90000c4e <_ZN20HardwareMJPEGDecoder9gotoFrameEm+0x7e>
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8) | (aviBuffer[index+2]<<16) | (aviBuffer[index+3]<<24);
90000c1e:	6b62      	ldr	r2, [r4, #52]	; 0x34
90000c20:	7a93      	ldrb	r3, [r2, #10]
90000c22:	7a51      	ldrb	r1, [r2, #9]
90000c24:	041b      	lsls	r3, r3, #16
90000c26:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
90000c2a:	7a11      	ldrb	r1, [r2, #8]
90000c2c:	7ad2      	ldrb	r2, [r2, #11]
90000c2e:	430b      	orrs	r3, r1
90000c30:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
    currentMovieOffset = getU32(offset + 8) + firstFrameOffset - 4;
90000c34:	6a22      	ldr	r2, [r4, #32]
    this->frameNumber = frameNumber;
90000c36:	6165      	str	r5, [r4, #20]
    currentMovieOffset = getU32(offset + 8) + firstFrameOffset - 4;
90000c38:	3a04      	subs	r2, #4
90000c3a:	441a      	add	r2, r3
90000c3c:	61a2      	str	r2, [r4, #24]
}
90000c3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return videoInfo.number_of_frames;
90000c40:	68a3      	ldr	r3, [r4, #8]
{
90000c42:	461d      	mov	r5, r3
90000c44:	e7d2      	b.n	90000bec <_ZN20HardwareMJPEGDecoder9gotoFrameEm+0x1c>
            lastError = AVI_ERROR_EOF_REACHED;
90000c46:	230d      	movs	r3, #13
90000c48:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
90000c4c:	e7e4      	b.n	90000c18 <_ZN20HardwareMJPEGDecoder9gotoFrameEm+0x48>
    currentMovieOffset = getU32(offset + 8) + firstFrameOffset - 4;
90000c4e:	f107 0310 	add.w	r3, r7, #16
        return d[0] | (d[1] << 8) | (d[2] << 16) | (d[3] << 24);
90000c52:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
90000c54:	58d3      	ldr	r3, [r2, r3]
90000c56:	e7ed      	b.n	90000c34 <_ZN20HardwareMJPEGDecoder9gotoFrameEm+0x64>
    if (frameNumber > getNumberOfFrames())
90000c58:	4798      	blx	r3
90000c5a:	4285      	cmp	r5, r0
90000c5c:	d9c6      	bls.n	90000bec <_ZN20HardwareMJPEGDecoder9gotoFrameEm+0x1c>
        frameNumber = getNumberOfFrames();
90000c5e:	6823      	ldr	r3, [r4, #0]
90000c60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90000c62:	42b3      	cmp	r3, r6
90000c64:	d0ec      	beq.n	90000c40 <_ZN20HardwareMJPEGDecoder9gotoFrameEm+0x70>
90000c66:	4620      	mov	r0, r4
90000c68:	4798      	blx	r3
90000c6a:	4605      	mov	r5, r0
90000c6c:	e7be      	b.n	90000bec <_ZN20HardwareMJPEGDecoder9gotoFrameEm+0x1c>
            lastError = AVI_ERROR_FILE_BUFFER_TO_SMALL;
90000c6e:	2009      	movs	r0, #9
            assert(!"Buffer to small");
90000c70:	4b04      	ldr	r3, [pc, #16]	; (90000c84 <_ZN20HardwareMJPEGDecoder9gotoFrameEm+0xb4>)
90000c72:	4a05      	ldr	r2, [pc, #20]	; (90000c88 <_ZN20HardwareMJPEGDecoder9gotoFrameEm+0xb8>)
90000c74:	21a6      	movs	r1, #166	; 0xa6
            lastError = AVI_ERROR_FILE_BUFFER_TO_SMALL;
90000c76:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
            assert(!"Buffer to small");
90000c7a:	4804      	ldr	r0, [pc, #16]	; (90000c8c <_ZN20HardwareMJPEGDecoder9gotoFrameEm+0xbc>)
90000c7c:	f026 fcea 	bl	90027654 <__assert_func>
90000c80:	900009a9 	.word	0x900009a9
90000c84:	90028aa0 	.word	0x90028aa0
90000c88:	90028ab4 	.word	0x90028ab4
90000c8c:	90028a44 	.word	0x90028a44

90000c90 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm>:
{
90000c90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90000c94:	4604      	mov	r4, r0
    if (reader != 0)
90000c96:	6b00      	ldr	r0, [r0, #48]	; 0x30
{
90000c98:	b083      	sub	sp, #12
90000c9a:	4615      	mov	r5, r2
    readData(currentMovieOffset, 8);
90000c9c:	69a6      	ldr	r6, [r4, #24]
    if (reader != 0)
90000c9e:	2800      	cmp	r0, #0
90000ca0:	f000 80e4 	beq.w	90000e6c <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x1dc>
        if (length > aviBufferLength)
90000ca4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
90000ca6:	2b07      	cmp	r3, #7
90000ca8:	f240 80e7 	bls.w	90000e7a <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x1ea>
        reader->seek(offset);
90000cac:	6803      	ldr	r3, [r0, #0]
90000cae:	4631      	mov	r1, r6
90000cb0:	68db      	ldr	r3, [r3, #12]
90000cb2:	4798      	blx	r3
        if (!reader->readData(aviBuffer, length))
90000cb4:	6b20      	ldr	r0, [r4, #48]	; 0x30
90000cb6:	2208      	movs	r2, #8
90000cb8:	6b61      	ldr	r1, [r4, #52]	; 0x34
90000cba:	6803      	ldr	r3, [r0, #0]
90000cbc:	691b      	ldr	r3, [r3, #16]
90000cbe:	4798      	blx	r3
90000cc0:	2800      	cmp	r0, #0
90000cc2:	f000 80cf 	beq.w	90000e64 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x1d4>
    const uint32_t length = getU32(currentMovieOffset + 4);
90000cc6:	69a7      	ldr	r7, [r4, #24]
    if (reader != 0)
90000cc8:	6b20      	ldr	r0, [r4, #48]	; 0x30
    const uint32_t length = getU32(currentMovieOffset + 4);
90000cca:	1d3a      	adds	r2, r7, #4
        aviBufferStartOffset = offset;
90000ccc:	63e6      	str	r6, [r4, #60]	; 0x3c
    if (reader != 0)
90000cce:	2800      	cmp	r0, #0
90000cd0:	f000 80dc 	beq.w	90000e8c <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x1fc>
        const uint32_t index = offset - aviBufferStartOffset;
90000cd4:	1b92      	subs	r2, r2, r6
    const uint8_t* mjpgdata = readData(currentMovieOffset + 8, length);
90000cd6:	3708      	adds	r7, #8
        if (length > aviBufferLength)
90000cd8:	e9d4 630d 	ldrd	r6, r3, [r4, #52]	; 0x34
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8) | (aviBuffer[index+2]<<16) | (aviBuffer[index+3]<<24);
90000cdc:	18b1      	adds	r1, r6, r2
90000cde:	5cb2      	ldrb	r2, [r6, r2]
90000ce0:	788e      	ldrb	r6, [r1, #2]
90000ce2:	f891 c001 	ldrb.w	ip, [r1, #1]
90000ce6:	0436      	lsls	r6, r6, #16
90000ce8:	ea46 260c 	orr.w	r6, r6, ip, lsl #8
90000cec:	4316      	orrs	r6, r2
90000cee:	78ca      	ldrb	r2, [r1, #3]
90000cf0:	ea46 6602 	orr.w	r6, r6, r2, lsl #24
        if (length > aviBufferLength)
90000cf4:	42b3      	cmp	r3, r6
90000cf6:	f0c0 80c0 	bcc.w	90000e7a <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x1ea>
        reader->seek(offset);
90000cfa:	6803      	ldr	r3, [r0, #0]
90000cfc:	4639      	mov	r1, r7
90000cfe:	68db      	ldr	r3, [r3, #12]
90000d00:	4798      	blx	r3
        if (!reader->readData(aviBuffer, length))
90000d02:	6b20      	ldr	r0, [r4, #48]	; 0x30
90000d04:	4632      	mov	r2, r6
90000d06:	6b61      	ldr	r1, [r4, #52]	; 0x34
90000d08:	6803      	ldr	r3, [r0, #0]
90000d0a:	691b      	ldr	r3, [r3, #16]
90000d0c:	4798      	blx	r3
90000d0e:	b910      	cbnz	r0, 90000d16 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x86>
            lastError = AVI_ERROR_EOF_REACHED;
90000d10:	230d      	movs	r3, #13
90000d12:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        return aviBuffer;
90000d16:	6b61      	ldr	r1, [r4, #52]	; 0x34
        aviBufferStartOffset = offset;
90000d18:	63e7      	str	r7, [r4, #60]	; 0x3c
    if (frameBuffer) //only decode if buffers are assigned.
90000d1a:	2d00      	cmp	r5, #0
90000d1c:	d053      	beq.n	90000dc6 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x136>
    HAL_JPEG_Decode_DMA(hjpeg, input, CHUNK_SIZE_IN, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
90000d1e:	4a5c      	ldr	r2, [pc, #368]	; (90000e90 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x200>)
    FrameBufferAddress = output;
90000d20:	4b5c      	ldr	r3, [pc, #368]	; (90000e94 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x204>)
    HAL_JPEG_Decode_DMA(hjpeg, input, CHUNK_SIZE_IN, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
90000d22:	68d2      	ldr	r2, [r2, #12]
    FrameBufferAddress = output;
90000d24:	601d      	str	r5, [r3, #0]
    Output_Is_Paused = 0;
90000d26:	2300      	movs	r3, #0
    HAL_JPEG_Decode_DMA(hjpeg, input, CHUNK_SIZE_IN, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
90000d28:	eb02 0242 	add.w	r2, r2, r2, lsl #1
      Jpeg_OUT_BufferTab[i].State = JPEG_BUFFER_EMPTY;
90000d2c:	4d5a      	ldr	r5, [pc, #360]	; (90000e98 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x208>)
    Output_Is_Paused = 0;
90000d2e:	4f5b      	ldr	r7, [pc, #364]	; (90000e9c <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x20c>)
    HAL_JPEG_Decode_DMA(hjpeg, input, CHUNK_SIZE_IN, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
90000d30:	01d2      	lsls	r2, r2, #7
      Jpeg_OUT_BufferTab[i].State = JPEG_BUFFER_EMPTY;
90000d32:	702b      	strb	r3, [r5, #0]
    Output_Is_Paused = 0;
90000d34:	603b      	str	r3, [r7, #0]
      Jpeg_OUT_BufferTab[i].DataBufferSize = 0;
90000d36:	60ab      	str	r3, [r5, #8]
      Jpeg_OUT_BufferTab[i].State = JPEG_BUFFER_EMPTY;
90000d38:	732b      	strb	r3, [r5, #12]
      Jpeg_OUT_BufferTab[i].DataBufferSize = 0;
90000d3a:	616b      	str	r3, [r5, #20]
    HAL_JPEG_Decode_DMA(hjpeg, input, CHUNK_SIZE_IN, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
90000d3c:	9200      	str	r2, [sp, #0]
    JPEG_OUT_Write_BufferIndex = 0;
90000d3e:	4a58      	ldr	r2, [pc, #352]	; (90000ea0 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x210>)
    JPEG_OUT_Read_BufferIndex = 0;
90000d40:	f8df 8188 	ldr.w	r8, [pc, #392]	; 90000ecc <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x23c>
    JPEG_OUT_Write_BufferIndex = 0;
90000d44:	6013      	str	r3, [r2, #0]
    JPEG_InputImageIndex = 0;
90000d46:	4a57      	ldr	r2, [pc, #348]	; (90000ea4 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x214>)
    DMA2D_output_Is_Paused = 1;
90000d48:	f8df a184 	ldr.w	sl, [pc, #388]	; 90000ed0 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x240>
    JPEG_InputImageIndex = 0;
90000d4c:	6013      	str	r3, [r2, #0]
    JPEG_InputImageAddress = (uint32_t)input;
90000d4e:	4a56      	ldr	r2, [pc, #344]	; (90000ea8 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x218>)
    JPEG_OUT_Read_BufferIndex = 0;
90000d50:	f8c8 3000 	str.w	r3, [r8]
    JPEG_InputImageAddress = (uint32_t)input;
90000d54:	6011      	str	r1, [r2, #0]
    JPEG_InputImageSize_Bytes = chunkSizeIn;
90000d56:	4a55      	ldr	r2, [pc, #340]	; (90000eac <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x21c>)
    HAL_JPEG_Decode_DMA(hjpeg, input, CHUNK_SIZE_IN, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
90000d58:	4855      	ldr	r0, [pc, #340]	; (90000eb0 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x220>)
    JPEG_InputImageSize_Bytes = chunkSizeIn;
90000d5a:	6016      	str	r6, [r2, #0]
    MCU_BlockIndex = 0;
90000d5c:	4a55      	ldr	r2, [pc, #340]	; (90000eb4 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x224>)
90000d5e:	f8df 9174 	ldr.w	r9, [pc, #372]	; 90000ed4 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x244>
90000d62:	6013      	str	r3, [r2, #0]
    DMA2D_output_Is_Paused = 1;
90000d64:	2301      	movs	r3, #1
    HAL_JPEG_Decode_DMA(hjpeg, input, CHUNK_SIZE_IN, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
90000d66:	f44f 3280 	mov.w	r2, #65536	; 0x10000
90000d6a:	4e53      	ldr	r6, [pc, #332]	; (90000eb8 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x228>)
    DMA2D_output_Is_Paused = 1;
90000d6c:	f8ca 3000 	str.w	r3, [sl]
    HAL_JPEG_Decode_DMA(hjpeg, input, CHUNK_SIZE_IN, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
90000d70:	686b      	ldr	r3, [r5, #4]
      buffer_[tail_] = job;
90000d72:	f8df b164 	ldr.w	fp, [pc, #356]	; 90000ed8 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x248>
90000d76:	f00a fb9d 	bl	9000b4b4 <HAL_JPEG_Decode_DMA>
    return 0;
90000d7a:	e008      	b.n	90000d8e <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0xfe>
  if ((Output_Is_Paused == 0) && (DMA2D_output_Is_Paused == 0))
90000d7c:	f8da 3000 	ldr.w	r3, [sl]
90000d80:	fab3 f383 	clz	r3, r3
90000d84:	095b      	lsrs	r3, r3, #5
90000d86:	005b      	lsls	r3, r3, #1
        JpegProcessing_End = JPEG_OutputHandler(&hjpeg, *pDma);
90000d88:	6033      	str	r3, [r6, #0]
      while(JpegProcessing_End == 0);
90000d8a:	6833      	ldr	r3, [r6, #0]
90000d8c:	b9db      	cbnz	r3, 90000dc6 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x136>
  if(Jpeg_HWDecodingEnd && DMA2D_CopyBufferEnd) // decode completed
90000d8e:	f8d9 3000 	ldr.w	r3, [r9]
90000d92:	b11b      	cbz	r3, 90000d9c <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x10c>
90000d94:	4b49      	ldr	r3, [pc, #292]	; (90000ebc <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x22c>)
90000d96:	681b      	ldr	r3, [r3, #0]
90000d98:	2b00      	cmp	r3, #0
90000d9a:	d161      	bne.n	90000e60 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x1d0>
  if((Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].State == JPEG_BUFFER_FULL) && (DMA2D_output_Is_Paused == 1))
90000d9c:	f8d8 3000 	ldr.w	r3, [r8]
90000da0:	eb03 0243 	add.w	r2, r3, r3, lsl #1
90000da4:	f815 1022 	ldrb.w	r1, [r5, r2, lsl #2]
90000da8:	eb05 0282 	add.w	r2, r5, r2, lsl #2
90000dac:	2901      	cmp	r1, #1
90000dae:	d024      	beq.n	90000dfa <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x16a>
  if((Output_Is_Paused == 1) && \
90000db0:	683b      	ldr	r3, [r7, #0]
          (Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State == JPEG_BUFFER_EMPTY) &&\
90000db2:	2b01      	cmp	r3, #1
90000db4:	d00b      	beq.n	90000dce <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x13e>
  if ((Output_Is_Paused == 0) && (DMA2D_output_Is_Paused == 0))
90000db6:	683b      	ldr	r3, [r7, #0]
90000db8:	2b00      	cmp	r3, #0
90000dba:	d0df      	beq.n	90000d7c <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0xec>
  return 0;
90000dbc:	2300      	movs	r3, #0
        JpegProcessing_End = JPEG_OutputHandler(&hjpeg, *pDma);
90000dbe:	6033      	str	r3, [r6, #0]
      while(JpegProcessing_End == 0);
90000dc0:	6833      	ldr	r3, [r6, #0]
90000dc2:	2b00      	cmp	r3, #0
90000dc4:	d0e3      	beq.n	90000d8e <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0xfe>
}
90000dc6:	2001      	movs	r0, #1
90000dc8:	b003      	add	sp, #12
90000dca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          (Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State == JPEG_BUFFER_EMPTY) &&\
90000dce:	4b34      	ldr	r3, [pc, #208]	; (90000ea0 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x210>)
90000dd0:	681b      	ldr	r3, [r3, #0]
90000dd2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
  if((Output_Is_Paused == 1) && \
90000dd6:	f815 3023 	ldrb.w	r3, [r5, r3, lsl #2]
90000dda:	2b00      	cmp	r3, #0
90000ddc:	d1eb      	bne.n	90000db6 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x126>
          (Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].State == JPEG_BUFFER_EMPTY))
90000dde:	f8d8 3000 	ldr.w	r3, [r8]
90000de2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
          (Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State == JPEG_BUFFER_EMPTY) &&\
90000de6:	f815 3023 	ldrb.w	r3, [r5, r3, lsl #2]
90000dea:	2b00      	cmp	r3, #0
90000dec:	d1e3      	bne.n	90000db6 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x126>
      HAL_JPEG_Resume(hjpeg, JPEG_PAUSE_RESUME_OUTPUT);
90000dee:	2102      	movs	r1, #2
90000df0:	482f      	ldr	r0, [pc, #188]	; (90000eb0 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x220>)
      Output_Is_Paused = 0;
90000df2:	603b      	str	r3, [r7, #0]
      HAL_JPEG_Resume(hjpeg, JPEG_PAUSE_RESUME_OUTPUT);
90000df4:	f00a fca6 	bl	9000b744 <HAL_JPEG_Resume>
90000df8:	e7dd      	b.n	90000db6 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x126>
  if((Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].State == JPEG_BUFFER_FULL) && (DMA2D_output_Is_Paused == 1))
90000dfa:	f8da 1000 	ldr.w	r1, [sl]
90000dfe:	2901      	cmp	r1, #1
90000e00:	d1d6      	bne.n	90000db0 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x120>
90000e02:	f8db 1008 	ldr.w	r1, [fp, #8]
      JPEG_OUT_Read_BufferIndex++;
90000e06:	3301      	adds	r3, #1
      };
90000e08:	482a      	ldr	r0, [pc, #168]	; (90000eb4 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x224>)
      tail_ = (tail_ + 1) % max_size_;
90000e0a:	f8db c000 	ldr.w	ip, [fp]
      if(JPEG_OUT_Read_BufferIndex >= NB_OUTPUT_DATA_BUFFERS)
90000e0e:	2b01      	cmp	r3, #1
      };
90000e10:	f8d0 e000 	ldr.w	lr, [r0]
90000e14:	f101 0001 	add.w	r0, r1, #1
      buffer_[tail_] = job;
90000e18:	f101 0102 	add.w	r1, r1, #2
        JPEG_OUT_Read_BufferIndex = 0;
90000e1c:	bf88      	it	hi
90000e1e:	2300      	movhi	r3, #0
90000e20:	f84b e031 	str.w	lr, [fp, r1, lsl #3]
90000e24:	eb0b 01c1 	add.w	r1, fp, r1, lsl #3
90000e28:	f8c8 3000 	str.w	r3, [r8]
      DMA2D_output_Is_Paused = 0;
90000e2c:	2300      	movs	r3, #0
90000e2e:	604a      	str	r2, [r1, #4]
      count_++;
90000e30:	f8db 100c 	ldr.w	r1, [fp, #12]
      tail_ = (tail_ + 1) % max_size_;
90000e34:	fbb0 f2fc 	udiv	r2, r0, ip
      count_++;
90000e38:	3101      	adds	r1, #1
      tail_ = (tail_ + 1) % max_size_;
90000e3a:	fb0c 0012 	mls	r0, ip, r2, r0
      count_++;
90000e3e:	f8cb 100c 	str.w	r1, [fp, #12]
      tail_ = (tail_ + 1) % max_size_;
90000e42:	f8cb 0008 	str.w	r0, [fp, #8]
      MCU_BlockIndex += JPEG_ConvertorParams.MCU_pr_line;
90000e46:	4912      	ldr	r1, [pc, #72]	; (90000e90 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x200>)
90000e48:	481a      	ldr	r0, [pc, #104]	; (90000eb4 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x224>)
90000e4a:	68c9      	ldr	r1, [r1, #12]
90000e4c:	6802      	ldr	r2, [r0, #0]
90000e4e:	440a      	add	r2, r1
90000e50:	6002      	str	r2, [r0, #0]
        JpegProcessing_End = JPEG_OutputHandler(&hjpeg, *pDma);
90000e52:	6c60      	ldr	r0, [r4, #68]	; 0x44
      DMA2D_output_Is_Paused = 0;
90000e54:	f8ca 3000 	str.w	r3, [sl]
      dma.start();
90000e58:	6803      	ldr	r3, [r0, #0]
90000e5a:	691b      	ldr	r3, [r3, #16]
90000e5c:	4798      	blx	r3
90000e5e:	e7a7      	b.n	90000db0 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x120>
      return 1;
90000e60:	2301      	movs	r3, #1
90000e62:	e791      	b.n	90000d88 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0xf8>
            lastError = AVI_ERROR_EOF_REACHED;
90000e64:	230d      	movs	r3, #13
90000e66:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
90000e6a:	e72c      	b.n	90000cc6 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x36>
    const uint32_t length = getU32(currentMovieOffset + 4);
90000e6c:	1d32      	adds	r2, r6, #4
    if (reader != 0)
90000e6e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    const uint8_t* mjpgdata = readData(currentMovieOffset + 8, length);
90000e70:	f106 0308 	add.w	r3, r6, #8
90000e74:	588e      	ldr	r6, [r1, r2]
    return movieData + offset;
90000e76:	4419      	add	r1, r3
90000e78:	e74f      	b.n	90000d1a <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x8a>
            lastError = AVI_ERROR_FILE_BUFFER_TO_SMALL;
90000e7a:	2009      	movs	r0, #9
            assert(!"Buffer to small");
90000e7c:	4b10      	ldr	r3, [pc, #64]	; (90000ec0 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x230>)
90000e7e:	4a11      	ldr	r2, [pc, #68]	; (90000ec4 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x234>)
90000e80:	21a6      	movs	r1, #166	; 0xa6
            lastError = AVI_ERROR_FILE_BUFFER_TO_SMALL;
90000e82:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
            assert(!"Buffer to small");
90000e86:	4810      	ldr	r0, [pc, #64]	; (90000ec8 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x238>)
90000e88:	f026 fbe4 	bl	90027654 <__assert_func>
    const uint32_t length = getU32(currentMovieOffset + 4);
90000e8c:	463e      	mov	r6, r7
90000e8e:	e7ee      	b.n	90000e6e <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x1de>
90000e90:	24005ba0 	.word	0x24005ba0
90000e94:	24005b74 	.word	0x24005b74
90000e98:	24000004 	.word	0x24000004
90000e9c:	24005b9c 	.word	0x24005b9c
90000ea0:	24005b88 	.word	0x24005b88
90000ea4:	24005b7c 	.word	0x24005b7c
90000ea8:	24005b78 	.word	0x24005b78
90000eac:	24005b80 	.word	0x24005b80
90000eb0:	2400ce84 	.word	0x2400ce84
90000eb4:	24005b94 	.word	0x24005b94
90000eb8:	24005b8c 	.word	0x24005b8c
90000ebc:	24005b6c 	.word	0x24005b6c
90000ec0:	90028aa0 	.word	0x90028aa0
90000ec4:	90028ab4 	.word	0x90028ab4
90000ec8:	90028a44 	.word	0x90028a44
90000ecc:	24005b84 	.word	0x24005b84
90000ed0:	24005b70 	.word	0x24005b70
90000ed4:	24005b90 	.word	0x24005b90
90000ed8:	24005bb4 	.word	0x24005bb4

90000edc <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv>:
    assert((frameNumber > 0) && "HardwareMJPEGDecoder decoding without frame data!");
90000edc:	6943      	ldr	r3, [r0, #20]
{
90000ede:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    assert((frameNumber > 0) && "HardwareMJPEGDecoder decoding without frame data!");
90000ee2:	2b00      	cmp	r3, #0
90000ee4:	f000 8098 	beq.w	90001018 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x13c>
    readData(currentMovieOffset, 8);
90000ee8:	4605      	mov	r5, r0
    if (reader != 0)
90000eea:	6b00      	ldr	r0, [r0, #48]	; 0x30
    readData(currentMovieOffset, 8);
90000eec:	69ac      	ldr	r4, [r5, #24]
    if (reader != 0)
90000eee:	2800      	cmp	r0, #0
90000ef0:	f000 8082 	beq.w	90000ff8 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x11c>
        if (length > aviBufferLength)
90000ef4:	6bab      	ldr	r3, [r5, #56]	; 0x38
90000ef6:	2b07      	cmp	r3, #7
90000ef8:	f240 8083 	bls.w	90001002 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x126>
        reader->seek(offset);
90000efc:	6803      	ldr	r3, [r0, #0]
90000efe:	4621      	mov	r1, r4
90000f00:	68db      	ldr	r3, [r3, #12]
90000f02:	4798      	blx	r3
        if (!reader->readData(aviBuffer, length))
90000f04:	6b28      	ldr	r0, [r5, #48]	; 0x30
90000f06:	2208      	movs	r2, #8
90000f08:	6b69      	ldr	r1, [r5, #52]	; 0x34
90000f0a:	6803      	ldr	r3, [r0, #0]
90000f0c:	691b      	ldr	r3, [r3, #16]
90000f0e:	4798      	blx	r3
90000f10:	2800      	cmp	r0, #0
90000f12:	d06d      	beq.n	90000ff0 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x114>
    uint32_t chunkSize = getU32(currentMovieOffset + 4);
90000f14:	69ab      	ldr	r3, [r5, #24]
    if (reader != 0)
90000f16:	6b28      	ldr	r0, [r5, #48]	; 0x30
    uint32_t chunkSize = getU32(currentMovieOffset + 4);
90000f18:	1d1a      	adds	r2, r3, #4
        aviBufferStartOffset = offset;
90000f1a:	63ec      	str	r4, [r5, #60]	; 0x3c
    if (reader != 0)
90000f1c:	2800      	cmp	r0, #0
90000f1e:	d06d      	beq.n	90000ffc <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x120>
        const uint32_t index = offset - aviBufferStartOffset;
90000f20:	1b12      	subs	r2, r2, r4
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8) | (aviBuffer[index+2]<<16) | (aviBuffer[index+3]<<24);
90000f22:	6b6c      	ldr	r4, [r5, #52]	; 0x34
90000f24:	18a1      	adds	r1, r4, r2
90000f26:	5ca2      	ldrb	r2, [r4, r2]
90000f28:	788c      	ldrb	r4, [r1, #2]
90000f2a:	784e      	ldrb	r6, [r1, #1]
90000f2c:	0424      	lsls	r4, r4, #16
90000f2e:	ea44 2406 	orr.w	r4, r4, r6, lsl #8
90000f32:	4314      	orrs	r4, r2
90000f34:	78ca      	ldrb	r2, [r1, #3]
90000f36:	ea44 6402 	orr.w	r4, r4, r2, lsl #24
            lastError = AVI_ERROR_EOF_REACHED;
90000f3a:	270d      	movs	r7, #13
        if (streamNo == STREAM0 && chunkType == TYPEDC)
90000f3c:	f243 0630 	movw	r6, #12336	; 0x3030
90000f40:	e039      	b.n	90000fb6 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0xda>
        if (length > aviBufferLength)
90000f42:	6bab      	ldr	r3, [r5, #56]	; 0x38
90000f44:	2b07      	cmp	r3, #7
90000f46:	d95c      	bls.n	90001002 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x126>
        reader->seek(offset);
90000f48:	6803      	ldr	r3, [r0, #0]
90000f4a:	4621      	mov	r1, r4
90000f4c:	68db      	ldr	r3, [r3, #12]
90000f4e:	4798      	blx	r3
        if (!reader->readData(aviBuffer, length))
90000f50:	6b28      	ldr	r0, [r5, #48]	; 0x30
90000f52:	2208      	movs	r2, #8
90000f54:	6b69      	ldr	r1, [r5, #52]	; 0x34
90000f56:	6803      	ldr	r3, [r0, #0]
90000f58:	691b      	ldr	r3, [r3, #16]
90000f5a:	4798      	blx	r3
90000f5c:	b908      	cbnz	r0, 90000f62 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x86>
            lastError = AVI_ERROR_EOF_REACHED;
90000f5e:	f885 7040 	strb.w	r7, [r5, #64]	; 0x40
    if (reader != 0)
90000f62:	6b28      	ldr	r0, [r5, #48]	; 0x30
        uint32_t streamNo  = getU16(currentMovieOffset);
90000f64:	69aa      	ldr	r2, [r5, #24]
        aviBufferStartOffset = offset;
90000f66:	63ec      	str	r4, [r5, #60]	; 0x3c
    if (reader != 0)
90000f68:	2800      	cmp	r0, #0
90000f6a:	d053      	beq.n	90001014 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x138>
        const uint32_t index = offset - aviBufferStartOffset;
90000f6c:	1b12      	subs	r2, r2, r4
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8);
90000f6e:	6b69      	ldr	r1, [r5, #52]	; 0x34
90000f70:	188b      	adds	r3, r1, r2
90000f72:	5c89      	ldrb	r1, [r1, r2]
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8) | (aviBuffer[index+2]<<16) | (aviBuffer[index+3]<<24);
90000f74:	799c      	ldrb	r4, [r3, #6]
90000f76:	f893 a005 	ldrb.w	sl, [r3, #5]
90000f7a:	0424      	lsls	r4, r4, #16
90000f7c:	f893 e004 	ldrb.w	lr, [r3, #4]
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8);
90000f80:	f893 9001 	ldrb.w	r9, [r3, #1]
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8) | (aviBuffer[index+2]<<16) | (aviBuffer[index+3]<<24);
90000f84:	ea44 240a 	orr.w	r4, r4, sl, lsl #8
90000f88:	f893 c007 	ldrb.w	ip, [r3, #7]
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8);
90000f8c:	f893 8003 	ldrb.w	r8, [r3, #3]
90000f90:	ea41 2109 	orr.w	r1, r1, r9, lsl #8
90000f94:	789a      	ldrb	r2, [r3, #2]
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8) | (aviBuffer[index+2]<<16) | (aviBuffer[index+3]<<24);
90000f96:	ea44 040e 	orr.w	r4, r4, lr
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8);
90000f9a:	ea42 2308 	orr.w	r3, r2, r8, lsl #8
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8) | (aviBuffer[index+2]<<16) | (aviBuffer[index+3]<<24);
90000f9e:	ea44 640c 	orr.w	r4, r4, ip, lsl #24
        if (streamNo == STREAM0 && chunkType == TYPEDC)
90000fa2:	f246 3264 	movw	r2, #25444	; 0x6364
90000fa6:	42b1      	cmp	r1, r6
90000fa8:	bf08      	it	eq
90000faa:	4293      	cmpeq	r3, r2
90000fac:	bf0c      	ite	eq
90000fae:	2101      	moveq	r1, #1
90000fb0:	2100      	movne	r1, #0
90000fb2:	d01a      	beq.n	90000fea <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x10e>
    while (currentMovieOffset + 8 + chunkSize < movieLength)
90000fb4:	69ab      	ldr	r3, [r5, #24]
90000fb6:	441c      	add	r4, r3
90000fb8:	6aab      	ldr	r3, [r5, #40]	; 0x28
90000fba:	f104 0208 	add.w	r2, r4, #8
90000fbe:	429a      	cmp	r2, r3
90000fc0:	d20e      	bcs.n	90000fe0 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x104>
        frameNumber++;
90000fc2:	696b      	ldr	r3, [r5, #20]
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; //pad to next word
90000fc4:	3409      	adds	r4, #9
        frameNumber++;
90000fc6:	3301      	adds	r3, #1
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; //pad to next word
90000fc8:	f024 0401 	bic.w	r4, r4, #1
90000fcc:	e9c5 3405 	strd	r3, r4, [r5, #20]
    if (reader != 0)
90000fd0:	2800      	cmp	r0, #0
90000fd2:	d1b6      	bne.n	90000f42 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x66>
        const uint8_t* const d = movieData + offset;
90000fd4:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
        return d[0] | (d[1] << 8);
90000fd6:	191a      	adds	r2, r3, r4
90000fd8:	5b19      	ldrh	r1, [r3, r4]
90000fda:	8853      	ldrh	r3, [r2, #2]
        return d[0] | (d[1] << 8) | (d[2] << 16) | (d[3] << 24);
90000fdc:	6854      	ldr	r4, [r2, #4]
90000fde:	e7e0      	b.n	90000fa2 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0xc6>
    frameNumber = 1;
90000fe0:	2201      	movs	r2, #1
    currentMovieOffset = firstFrameOffset; //start over
90000fe2:	6a2b      	ldr	r3, [r5, #32]
    return false;
90000fe4:	2100      	movs	r1, #0
    currentMovieOffset = firstFrameOffset; //start over
90000fe6:	e9c5 2305 	strd	r2, r3, [r5, #20]
}
90000fea:	4608      	mov	r0, r1
90000fec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            lastError = AVI_ERROR_EOF_REACHED;
90000ff0:	230d      	movs	r3, #13
90000ff2:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
90000ff6:	e78d      	b.n	90000f14 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x38>
    uint32_t chunkSize = getU32(currentMovieOffset + 4);
90000ff8:	1d22      	adds	r2, r4, #4
90000ffa:	4623      	mov	r3, r4
        return d[0] | (d[1] << 8) | (d[2] << 16) | (d[3] << 24);
90000ffc:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
90000ffe:	588c      	ldr	r4, [r1, r2]
90001000:	e79b      	b.n	90000f3a <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x5e>
            lastError = AVI_ERROR_FILE_BUFFER_TO_SMALL;
90001002:	2009      	movs	r0, #9
            assert(!"Buffer to small");
90001004:	4b07      	ldr	r3, [pc, #28]	; (90001024 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x148>)
90001006:	4a08      	ldr	r2, [pc, #32]	; (90001028 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x14c>)
90001008:	21a6      	movs	r1, #166	; 0xa6
            lastError = AVI_ERROR_FILE_BUFFER_TO_SMALL;
9000100a:	f885 0040 	strb.w	r0, [r5, #64]	; 0x40
            assert(!"Buffer to small");
9000100e:	4807      	ldr	r0, [pc, #28]	; (9000102c <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x150>)
90001010:	f026 fb20 	bl	90027654 <__assert_func>
        uint32_t streamNo  = getU16(currentMovieOffset);
90001014:	4614      	mov	r4, r2
90001016:	e7dd      	b.n	90000fd4 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0xf8>
    assert((frameNumber > 0) && "HardwareMJPEGDecoder decoding without frame data!");
90001018:	4b05      	ldr	r3, [pc, #20]	; (90001030 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x154>)
9000101a:	21ec      	movs	r1, #236	; 0xec
9000101c:	4a05      	ldr	r2, [pc, #20]	; (90001034 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x158>)
9000101e:	4803      	ldr	r0, [pc, #12]	; (9000102c <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x150>)
90001020:	f026 fb18 	bl	90027654 <__assert_func>
90001024:	90028aa0 	.word	0x90028aa0
90001028:	90028ab4 	.word	0x90028ab4
9000102c:	90028a44 	.word	0x90028a44
90001030:	90028af8 	.word	0x90028af8
90001034:	90028b44 	.word	0x90028b44

90001038 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm>:
    assert((frameNumber > 0) && "HardwareMJPEGDecoder decoding without frame data!");
90001038:	6943      	ldr	r3, [r0, #20]
{
9000103a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    assert((frameNumber > 0) && "HardwareMJPEGDecoder decoding without frame data!");
9000103e:	2b00      	cmp	r3, #0
90001040:	f000 809b 	beq.w	9000117a <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x142>
    readData(currentMovieOffset, 8);
90001044:	4604      	mov	r4, r0
    if (reader != 0)
90001046:	6b00      	ldr	r0, [r0, #48]	; 0x30
90001048:	460e      	mov	r6, r1
    readData(currentMovieOffset, 8);
9000104a:	69a5      	ldr	r5, [r4, #24]
    if (reader != 0)
9000104c:	2800      	cmp	r0, #0
9000104e:	d061      	beq.n	90001114 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xdc>
        if (length > aviBufferLength)
90001050:	6ba3      	ldr	r3, [r4, #56]	; 0x38
90001052:	2b07      	cmp	r3, #7
90001054:	f240 8097 	bls.w	90001186 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x14e>
        reader->seek(offset);
90001058:	6803      	ldr	r3, [r0, #0]
9000105a:	4629      	mov	r1, r5
9000105c:	68db      	ldr	r3, [r3, #12]
9000105e:	4798      	blx	r3
        if (!reader->readData(aviBuffer, length))
90001060:	6b20      	ldr	r0, [r4, #48]	; 0x30
90001062:	2208      	movs	r2, #8
90001064:	6b61      	ldr	r1, [r4, #52]	; 0x34
90001066:	6803      	ldr	r3, [r0, #0]
90001068:	691b      	ldr	r3, [r3, #16]
9000106a:	4798      	blx	r3
9000106c:	2800      	cmp	r0, #0
9000106e:	d04c      	beq.n	9000110a <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xd2>
    if (reader != 0)
90001070:	6b20      	ldr	r0, [r4, #48]	; 0x30
    uint32_t streamNo  = getU16(currentMovieOffset);
90001072:	69a1      	ldr	r1, [r4, #24]
        aviBufferStartOffset = offset;
90001074:	63e5      	str	r5, [r4, #60]	; 0x3c
    if (reader != 0)
90001076:	2800      	cmp	r0, #0
90001078:	d04b      	beq.n	90001112 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xda>
    uint32_t chunkSize = getU32(currentMovieOffset + 4);
9000107a:	f101 0c04 	add.w	ip, r1, #4
    uint32_t chunkType = getU16(currentMovieOffset + 2);
9000107e:	1c8a      	adds	r2, r1, #2
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8);
90001080:	6b63      	ldr	r3, [r4, #52]	; 0x34
        const uint32_t index = offset - aviBufferStartOffset;
90001082:	ebac 0c05 	sub.w	ip, ip, r5
        const uint32_t index = offset - aviBufferStartOffset;
90001086:	1b52      	subs	r2, r2, r5
90001088:	1b4d      	subs	r5, r1, r5
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8) | (aviBuffer[index+2]<<16) | (aviBuffer[index+3]<<24);
9000108a:	eb03 0e0c 	add.w	lr, r3, ip
9000108e:	f813 700c 	ldrb.w	r7, [r3, ip]
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8);
90001092:	eb03 0805 	add.w	r8, r3, r5
90001096:	f813 c005 	ldrb.w	ip, [r3, r5]
9000109a:	f898 5001 	ldrb.w	r5, [r8, #1]
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8) | (aviBuffer[index+2]<<16) | (aviBuffer[index+3]<<24);
9000109e:	f89e 8001 	ldrb.w	r8, [lr, #1]
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8);
900010a2:	ea4c 2c05 	orr.w	ip, ip, r5, lsl #8
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8) | (aviBuffer[index+2]<<16) | (aviBuffer[index+3]<<24);
900010a6:	f89e 5002 	ldrb.w	r5, [lr, #2]
900010aa:	f89e e003 	ldrb.w	lr, [lr, #3]
900010ae:	042d      	lsls	r5, r5, #16
900010b0:	ea45 2508 	orr.w	r5, r5, r8, lsl #8
900010b4:	433d      	orrs	r5, r7
900010b6:	ea45 650e 	orr.w	r5, r5, lr, lsl #24
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8);
900010ba:	eb03 0e02 	add.w	lr, r3, r2
900010be:	5c9b      	ldrb	r3, [r3, r2]
900010c0:	f89e 2001 	ldrb.w	r2, [lr, #1]
900010c4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    if (currentMovieOffset + 8 + chunkSize < movieLength)
900010c8:	194a      	adds	r2, r1, r5
900010ca:	6aa7      	ldr	r7, [r4, #40]	; 0x28
900010cc:	f102 0e08 	add.w	lr, r2, #8
900010d0:	45be      	cmp	lr, r7
900010d2:	d213      	bcs.n	900010fc <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xc4>
        if (streamNo == STREAM0 && chunkType == TYPEDC && chunkSize > 0)
900010d4:	f243 0730 	movw	r7, #12336	; 0x3030
900010d8:	45bc      	cmp	ip, r7
900010da:	d124      	bne.n	90001126 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xee>
900010dc:	f246 3764 	movw	r7, #25444	; 0x6364
900010e0:	42bb      	cmp	r3, r7
900010e2:	d120      	bne.n	90001126 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xee>
900010e4:	bb1d      	cbnz	r5, 9000112e <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xf6>
          currentMovieOffset += 8;
900010e6:	4672      	mov	r2, lr
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; //pad to next word
900010e8:	3201      	adds	r2, #1
        if (currentMovieOffset == lastFrameEnd)
900010ea:	6a63      	ldr	r3, [r4, #36]	; 0x24
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; //pad to next word
900010ec:	f022 0201 	bic.w	r2, r2, #1
        if (currentMovieOffset == lastFrameEnd)
900010f0:	429a      	cmp	r2, r3
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; //pad to next word
900010f2:	61a2      	str	r2, [r4, #24]
        if (currentMovieOffset == lastFrameEnd)
900010f4:	d002      	beq.n	900010fc <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xc4>
900010f6:	2001      	movs	r0, #1
}
900010f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        frameNumber = 1;
900010fc:	2201      	movs	r2, #1
        currentMovieOffset = firstFrameOffset; //start over
900010fe:	6a23      	ldr	r3, [r4, #32]
90001100:	2000      	movs	r0, #0
90001102:	e9c4 2305 	strd	r2, r3, [r4, #20]
}
90001106:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            lastError = AVI_ERROR_EOF_REACHED;
9000110a:	230d      	movs	r3, #13
9000110c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
90001110:	e7ae      	b.n	90001070 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x38>
    uint32_t streamNo  = getU16(currentMovieOffset);
90001112:	460d      	mov	r5, r1
        const uint8_t* const d = movieData + offset;
90001114:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
        const uint8_t* const d = movieData + offset;
90001116:	4629      	mov	r1, r5
90001118:	2000      	movs	r0, #0
        return d[0] | (d[1] << 8);
9000111a:	f832 c005 	ldrh.w	ip, [r2, r5]
9000111e:	442a      	add	r2, r5
90001120:	8853      	ldrh	r3, [r2, #2]
        return d[0] | (d[1] << 8) | (d[2] << 16) | (d[3] << 24);
90001122:	6855      	ldr	r5, [r2, #4]
90001124:	e7d0      	b.n	900010c8 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x90>
        currentMovieOffset += chunkSize;
90001126:	61a2      	str	r2, [r4, #24]
        if (chunkSize == 0) // Empty frame - Skip
90001128:	2d00      	cmp	r5, #0
9000112a:	d1dd      	bne.n	900010e8 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xb0>
9000112c:	e7db      	b.n	900010e6 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xae>
            currentMovieOffset += 8;
9000112e:	f101 0708 	add.w	r7, r1, #8
90001132:	61a7      	str	r7, [r4, #24]
    if (reader != 0)
90001134:	b1f0      	cbz	r0, 90001174 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x13c>
        if (length > aviBufferLength)
90001136:	6ba3      	ldr	r3, [r4, #56]	; 0x38
90001138:	429d      	cmp	r5, r3
9000113a:	d824      	bhi.n	90001186 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x14e>
        reader->seek(offset);
9000113c:	6803      	ldr	r3, [r0, #0]
9000113e:	4639      	mov	r1, r7
90001140:	68db      	ldr	r3, [r3, #12]
90001142:	4798      	blx	r3
        if (!reader->readData(aviBuffer, length))
90001144:	6b20      	ldr	r0, [r4, #48]	; 0x30
90001146:	462a      	mov	r2, r5
90001148:	6b61      	ldr	r1, [r4, #52]	; 0x34
9000114a:	6803      	ldr	r3, [r0, #0]
9000114c:	691b      	ldr	r3, [r3, #16]
9000114e:	4798      	blx	r3
90001150:	b910      	cbnz	r0, 90001158 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x120>
            lastError = AVI_ERROR_EOF_REACHED;
90001152:	230d      	movs	r3, #13
90001154:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        return aviBuffer;
90001158:	6b61      	ldr	r1, [r4, #52]	; 0x34
        aviBufferStartOffset = offset;
9000115a:	63e7      	str	r7, [r4, #60]	; 0x3c
    if (outputBuffer) //only decode if buffers are assigned.
9000115c:	b126      	cbz	r6, 90001168 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x130>
9000115e:	4633      	mov	r3, r6
90001160:	462a      	mov	r2, r5
90001162:	4620      	mov	r0, r4
90001164:	f7ff fc42 	bl	900009ec <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0>
        currentMovieOffset += chunkSize;
90001168:	e9d4 3205 	ldrd	r3, r2, [r4, #20]
            frameNumber++;
9000116c:	3301      	adds	r3, #1
        currentMovieOffset += chunkSize;
9000116e:	442a      	add	r2, r5
            frameNumber++;
90001170:	6163      	str	r3, [r4, #20]
        if (chunkSize == 0) // Empty frame - Skip
90001172:	e7b9      	b.n	900010e8 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xb0>
    return movieData + offset;
90001174:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
90001176:	4439      	add	r1, r7
90001178:	e7f0      	b.n	9000115c <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x124>
    assert((frameNumber > 0) && "HardwareMJPEGDecoder decoding without frame data!");
9000117a:	4b07      	ldr	r3, [pc, #28]	; (90001198 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x160>)
9000117c:	21b8      	movs	r1, #184	; 0xb8
9000117e:	4a07      	ldr	r2, [pc, #28]	; (9000119c <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x164>)
90001180:	4807      	ldr	r0, [pc, #28]	; (900011a0 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x168>)
90001182:	f026 fa67 	bl	90027654 <__assert_func>
            lastError = AVI_ERROR_FILE_BUFFER_TO_SMALL;
90001186:	2009      	movs	r0, #9
            assert(!"Buffer to small");
90001188:	4b06      	ldr	r3, [pc, #24]	; (900011a4 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x16c>)
9000118a:	4a07      	ldr	r2, [pc, #28]	; (900011a8 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x170>)
9000118c:	21a6      	movs	r1, #166	; 0xa6
            lastError = AVI_ERROR_FILE_BUFFER_TO_SMALL;
9000118e:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
            assert(!"Buffer to small");
90001192:	4803      	ldr	r0, [pc, #12]	; (900011a0 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x168>)
90001194:	f026 fa5e 	bl	90027654 <__assert_func>
90001198:	90028af8 	.word	0x90028af8
9000119c:	90028b78 	.word	0x90028b78
900011a0:	90028a44 	.word	0x90028a44
900011a4:	90028aa0 	.word	0x90028aa0
900011a8:	90028ab4 	.word	0x90028ab4

900011ac <_ZN20HardwareMJPEGDecoderC1Ev>:
HardwareMJPEGDecoder::HardwareMJPEGDecoder()
900011ac:	b538      	push	{r3, r4, r5, lr}
    : frameNumber(0), currentMovieOffset(0), indexOffset(0), firstFrameOffset(0), lastFrameEnd(0), movieLength(0), movieData(0),
900011ae:	2500      	movs	r5, #0
      reader(0), aviBuffer(0), aviBufferLength(0), aviBufferStartOffset(0), lastError(AVI_NO_ERROR)
900011b0:	4b0f      	ldr	r3, [pc, #60]	; (900011f0 <_ZN20HardwareMJPEGDecoderC1Ev+0x44>)
HardwareMJPEGDecoder::HardwareMJPEGDecoder()
900011b2:	4604      	mov	r4, r0
      reader(0), aviBuffer(0), aviBufferLength(0), aviBufferStartOffset(0), lastError(AVI_NO_ERROR)
900011b4:	6003      	str	r3, [r0, #0]
900011b6:	63c5      	str	r5, [r0, #60]	; 0x3c
900011b8:	f880 5040 	strb.w	r5, [r0, #64]	; 0x40
    : frameNumber(0), currentMovieOffset(0), indexOffset(0), firstFrameOffset(0), lastFrameEnd(0), movieLength(0), movieData(0),
900011bc:	e9c0 5505 	strd	r5, r5, [r0, #20]
900011c0:	e9c0 5507 	strd	r5, r5, [r0, #28]
900011c4:	e9c0 5509 	strd	r5, r5, [r0, #36]	; 0x24
      reader(0), aviBuffer(0), aviBufferLength(0), aviBufferStartOffset(0), lastError(AVI_NO_ERROR)
900011c8:	e9c0 550b 	strd	r5, r5, [r0, #44]	; 0x2c
900011cc:	e9c0 550d 	strd	r5, r5, [r0, #52]	; 0x34
    videoInfo.frame_width = 0;
900011d0:	e9c0 5503 	strd	r5, r5, [r0, #12]
    videoInfo.number_of_frames = 0;
900011d4:	e9c0 5501 	strd	r5, r5, [r0, #4]
    TGFX_JPEG_InitColorTables();
900011d8:	f002 fa9a 	bl	90003710 <TGFX_JPEG_InitColorTables>
    semDecodingDone = SEM_CREATE();
900011dc:	462a      	mov	r2, r5
900011de:	4629      	mov	r1, r5
900011e0:	2001      	movs	r0, #1
900011e2:	f00d fde1 	bl	9000eda8 <osSemaphoreNew>
900011e6:	4b03      	ldr	r3, [pc, #12]	; (900011f4 <_ZN20HardwareMJPEGDecoderC1Ev+0x48>)
900011e8:	4602      	mov	r2, r0
}
900011ea:	4620      	mov	r0, r4
    semDecodingDone = SEM_CREATE();
900011ec:	601a      	str	r2, [r3, #0]
}
900011ee:	bd38      	pop	{r3, r4, r5, pc}
900011f0:	90028cf8 	.word	0x90028cf8
900011f4:	24005bd8 	.word	0x24005bd8

900011f8 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv>:
{
900011f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    currentMovieOffset = 0;
900011fc:	2100      	movs	r1, #0
    if (reader != 0)
900011fe:	6b06      	ldr	r6, [r0, #48]	; 0x30
{
90001200:	b083      	sub	sp, #12
90001202:	4605      	mov	r5, r0
    currentMovieOffset = 0;
90001204:	6181      	str	r1, [r0, #24]
    lastError = AVI_NO_ERROR;
90001206:	f880 1040 	strb.w	r1, [r0, #64]	; 0x40
    if (reader != 0)
9000120a:	2e00      	cmp	r6, #0
9000120c:	f000 81aa 	beq.w	90001564 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x36c>
        if (length > aviBufferLength)
90001210:	6b83      	ldr	r3, [r0, #56]	; 0x38
90001212:	2b47      	cmp	r3, #71	; 0x47
90001214:	f240 8202 	bls.w	9000161c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x424>
        reader->seek(offset);
90001218:	6833      	ldr	r3, [r6, #0]
9000121a:	4630      	mov	r0, r6
9000121c:	68db      	ldr	r3, [r3, #12]
9000121e:	4798      	blx	r3
        if (!reader->readData(aviBuffer, length))
90001220:	6b28      	ldr	r0, [r5, #48]	; 0x30
90001222:	2248      	movs	r2, #72	; 0x48
90001224:	6b69      	ldr	r1, [r5, #52]	; 0x34
90001226:	6803      	ldr	r3, [r0, #0]
90001228:	691b      	ldr	r3, [r3, #16]
9000122a:	4798      	blx	r3
9000122c:	2800      	cmp	r0, #0
9000122e:	f000 80ce 	beq.w	900013ce <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1d6>
        aviBufferStartOffset = offset;
90001232:	2300      	movs	r3, #0
    if (reader != 0)
90001234:	6b2e      	ldr	r6, [r5, #48]	; 0x30
    if (compare(currentMovieOffset, "RIFF", 4))
90001236:	69af      	ldr	r7, [r5, #24]
    if (reader != 0)
90001238:	46b1      	mov	r9, r6
        aviBufferStartOffset = offset;
9000123a:	63eb      	str	r3, [r5, #60]	; 0x3c
    if (reader != 0)
9000123c:	2e00      	cmp	r6, #0
9000123e:	f000 8192 	beq.w	90001566 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x36e>
        src = reinterpret_cast<const char*>(aviBuffer + (offset - aviBufferStartOffset));
90001242:	f8d5 8034 	ldr.w	r8, [r5, #52]	; 0x34
    return strncmp(src, str, num);
90001246:	2204      	movs	r2, #4
90001248:	49be      	ldr	r1, [pc, #760]	; (90001544 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x34c>)
        src = reinterpret_cast<const char*>(aviBuffer + (offset - aviBufferStartOffset));
9000124a:	eb08 0b07 	add.w	fp, r8, r7
    return strncmp(src, str, num);
9000124e:	4658      	mov	r0, fp
90001250:	f026 fcbc 	bl	90027bcc <strncmp>
    if (compare(currentMovieOffset, "RIFF", 4))
90001254:	2800      	cmp	r0, #0
90001256:	f040 81ea 	bne.w	9000162e <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x436>
    currentMovieOffset += 8;
9000125a:	f107 0008 	add.w	r0, r7, #8
    return strncmp(src, str, num);
9000125e:	2204      	movs	r2, #4
90001260:	49b9      	ldr	r1, [pc, #740]	; (90001548 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x350>)
    currentMovieOffset += 8;
90001262:	61a8      	str	r0, [r5, #24]
    return strncmp(src, str, num);
90001264:	4440      	add	r0, r8
90001266:	f026 fcb1 	bl	90027bcc <strncmp>
    if (compare(currentMovieOffset, "AVI ", 4))
9000126a:	2800      	cmp	r0, #0
9000126c:	f040 81fa 	bne.w	90001664 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x46c>
    currentMovieOffset += 4;
90001270:	f107 0a0c 	add.w	sl, r7, #12
    return strncmp(src, str, num);
90001274:	2204      	movs	r2, #4
90001276:	49b5      	ldr	r1, [pc, #724]	; (9000154c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x354>)
90001278:	eb08 000a 	add.w	r0, r8, sl
    currentMovieOffset += 4;
9000127c:	f8c5 a018 	str.w	sl, [r5, #24]
    return strncmp(src, str, num);
90001280:	f026 fca4 	bl	90027bcc <strncmp>
    if (compare(currentMovieOffset, "LIST", 4))
90001284:	9001      	str	r0, [sp, #4]
90001286:	2800      	cmp	r0, #0
90001288:	f040 81e2 	bne.w	90001650 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x458>
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8) | (aviBuffer[index+2]<<16) | (aviBuffer[index+3]<<24);
9000128c:	f89b 4012 	ldrb.w	r4, [fp, #18]
90001290:	f89b 2011 	ldrb.w	r2, [fp, #17]
90001294:	0424      	lsls	r4, r4, #16
90001296:	f89b 3013 	ldrb.w	r3, [fp, #19]
9000129a:	ea44 2402 	orr.w	r4, r4, r2, lsl #8
9000129e:	f89b 2010 	ldrb.w	r2, [fp, #16]
900012a2:	4314      	orrs	r4, r2
    assert(aviListSize);
900012a4:	ea54 6403 	orrs.w	r4, r4, r3, lsl #24
900012a8:	f000 81cb 	beq.w	90001642 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x44a>
    uint32_t offset =  currentMovieOffset + 8;
900012ac:	f107 0014 	add.w	r0, r7, #20
    return strncmp(src, str, num);
900012b0:	2204      	movs	r2, #4
900012b2:	49a7      	ldr	r1, [pc, #668]	; (90001550 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x358>)
900012b4:	4440      	add	r0, r8
900012b6:	f026 fc89 	bl	90027bcc <strncmp>
    if (compare(offset, "hdrl", 4))
900012ba:	2800      	cmp	r0, #0
900012bc:	f000 808b 	beq.w	900013d6 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1de>
        lastError = AVI_ERROR_AVI_HDRL_NOT_FOUND;
900012c0:	2306      	movs	r3, #6
        foundFrame = false;
900012c2:	f8dd b004 	ldr.w	fp, [sp, #4]
    offset += 4;
900012c6:	f107 0018 	add.w	r0, r7, #24
        lastError = AVI_ERROR_AVI_HDRL_NOT_FOUND;
900012ca:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
        src = reinterpret_cast<const char*>(aviBuffer + (offset - aviBufferStartOffset));
900012ce:	4440      	add	r0, r8
    return strncmp(src, str, num);
900012d0:	2204      	movs	r2, #4
900012d2:	49a0      	ldr	r1, [pc, #640]	; (90001554 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x35c>)
900012d4:	f026 fc7a 	bl	90027bcc <strncmp>
    if (compare(offset, "avih", 4))
900012d8:	2800      	cmp	r0, #0
900012da:	f000 8085 	beq.w	900013e8 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1f0>
        lastError = AVI_ERROR_AVI_AVIH_NOT_FOUND;
900012de:	2307      	movs	r3, #7
900012e0:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
    uint32_t listOffset = aviListOffset + aviListSize + 8;
900012e4:	4454      	add	r4, sl
900012e6:	3408      	adds	r4, #8
    if (reader != 0)
900012e8:	f1b9 0f00 	cmp.w	r9, #0
900012ec:	d015      	beq.n	9000131a <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x122>
        if (length > aviBufferLength)
900012ee:	6bab      	ldr	r3, [r5, #56]	; 0x38
900012f0:	2b0b      	cmp	r3, #11
900012f2:	f240 8193 	bls.w	9000161c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x424>
        reader->seek(offset);
900012f6:	f8d9 3000 	ldr.w	r3, [r9]
900012fa:	4621      	mov	r1, r4
900012fc:	4648      	mov	r0, r9
900012fe:	68db      	ldr	r3, [r3, #12]
90001300:	4798      	blx	r3
        if (!reader->readData(aviBuffer, length))
90001302:	6b28      	ldr	r0, [r5, #48]	; 0x30
90001304:	220c      	movs	r2, #12
90001306:	6b69      	ldr	r1, [r5, #52]	; 0x34
90001308:	6803      	ldr	r3, [r0, #0]
9000130a:	691b      	ldr	r3, [r3, #16]
9000130c:	4798      	blx	r3
9000130e:	b910      	cbnz	r0, 90001316 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x11e>
            lastError = AVI_ERROR_EOF_REACHED;
90001310:	230d      	movs	r3, #13
90001312:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
        aviBufferStartOffset = offset;
90001316:	6b2e      	ldr	r6, [r5, #48]	; 0x30
90001318:	63ec      	str	r4, [r5, #60]	; 0x3c
        return aviBuffer;
9000131a:	f895 9040 	ldrb.w	r9, [r5, #64]	; 0x40
    return strncmp(src, str, num);
9000131e:	4f8e      	ldr	r7, [pc, #568]	; (90001558 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x360>)
    while (compare(listOffset + 8, "movi", 4) && (lastError == AVI_NO_ERROR) && listOffset < movieLength)
90001320:	f104 0808 	add.w	r8, r4, #8
    if (reader != 0)
90001324:	2e00      	cmp	r6, #0
90001326:	d041      	beq.n	900013ac <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1b4>
        src = reinterpret_cast<const char*>(aviBuffer + (offset - aviBufferStartOffset));
90001328:	6beb      	ldr	r3, [r5, #60]	; 0x3c
    return strncmp(src, str, num);
9000132a:	2204      	movs	r2, #4
        src = reinterpret_cast<const char*>(aviBuffer + (offset - aviBufferStartOffset));
9000132c:	6b68      	ldr	r0, [r5, #52]	; 0x34
    return strncmp(src, str, num);
9000132e:	4639      	mov	r1, r7
        src = reinterpret_cast<const char*>(aviBuffer + (offset - aviBufferStartOffset));
90001330:	eba8 0303 	sub.w	r3, r8, r3
90001334:	4418      	add	r0, r3
    return strncmp(src, str, num);
90001336:	f026 fc49 	bl	90027bcc <strncmp>
    while (compare(listOffset + 8, "movi", 4) && (lastError == AVI_NO_ERROR) && listOffset < movieLength)
9000133a:	2800      	cmp	r0, #0
9000133c:	d03e      	beq.n	900013bc <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1c4>
9000133e:	f1b9 0f00 	cmp.w	r9, #0
90001342:	d13e      	bne.n	900013c2 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1ca>
90001344:	6aab      	ldr	r3, [r5, #40]	; 0x28
90001346:	42a3      	cmp	r3, r4
90001348:	f240 80a7 	bls.w	9000149a <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2a2>
        const uint32_t listSize = getU32(listOffset + 4) + 8;
9000134c:	3404      	adds	r4, #4
    if (reader != 0)
9000134e:	2e00      	cmp	r6, #0
90001350:	d046      	beq.n	900013e0 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1e8>
        const uint32_t index = offset - aviBufferStartOffset;
90001352:	6bea      	ldr	r2, [r5, #60]	; 0x3c
        if (length > aviBufferLength)
90001354:	e9d5 130d 	ldrd	r1, r3, [r5, #52]	; 0x34
        const uint32_t index = offset - aviBufferStartOffset;
90001358:	1aa4      	subs	r4, r4, r2
        if (length > aviBufferLength)
9000135a:	2b0b      	cmp	r3, #11
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8) | (aviBuffer[index+2]<<16) | (aviBuffer[index+3]<<24);
9000135c:	eb01 0204 	add.w	r2, r1, r4
90001360:	5d09      	ldrb	r1, [r1, r4]
90001362:	7894      	ldrb	r4, [r2, #2]
90001364:	7850      	ldrb	r0, [r2, #1]
90001366:	ea4f 4404 	mov.w	r4, r4, lsl #16
9000136a:	78d2      	ldrb	r2, [r2, #3]
9000136c:	ea44 2400 	orr.w	r4, r4, r0, lsl #8
90001370:	ea44 0401 	orr.w	r4, r4, r1
90001374:	ea44 6402 	orr.w	r4, r4, r2, lsl #24
        listOffset += listSize;
90001378:	4444      	add	r4, r8
        if (length > aviBufferLength)
9000137a:	f240 814f 	bls.w	9000161c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x424>
        reader->seek(offset);
9000137e:	6833      	ldr	r3, [r6, #0]
90001380:	4621      	mov	r1, r4
90001382:	4630      	mov	r0, r6
90001384:	68db      	ldr	r3, [r3, #12]
90001386:	4798      	blx	r3
        if (!reader->readData(aviBuffer, length))
90001388:	6b28      	ldr	r0, [r5, #48]	; 0x30
9000138a:	220c      	movs	r2, #12
9000138c:	6b69      	ldr	r1, [r5, #52]	; 0x34
9000138e:	6803      	ldr	r3, [r0, #0]
90001390:	691b      	ldr	r3, [r3, #16]
90001392:	4798      	blx	r3
90001394:	b910      	cbnz	r0, 9000139c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1a4>
            lastError = AVI_ERROR_EOF_REACHED;
90001396:	230d      	movs	r3, #13
90001398:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
        aviBufferStartOffset = offset;
9000139c:	6b2e      	ldr	r6, [r5, #48]	; 0x30
    while (compare(listOffset + 8, "movi", 4) && (lastError == AVI_NO_ERROR) && listOffset < movieLength)
9000139e:	f104 0808 	add.w	r8, r4, #8
900013a2:	f895 9040 	ldrb.w	r9, [r5, #64]	; 0x40
        aviBufferStartOffset = offset;
900013a6:	63ec      	str	r4, [r5, #60]	; 0x3c
    if (reader != 0)
900013a8:	2e00      	cmp	r6, #0
900013aa:	d1bd      	bne.n	90001328 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x130>
        src = (const char*)movieData + offset;
900013ac:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
    return strncmp(src, str, num);
900013ae:	2204      	movs	r2, #4
900013b0:	4639      	mov	r1, r7
        src = (const char*)movieData + offset;
900013b2:	4440      	add	r0, r8
    return strncmp(src, str, num);
900013b4:	f026 fc0a 	bl	90027bcc <strncmp>
    while (compare(listOffset + 8, "movi", 4) && (lastError == AVI_NO_ERROR) && listOffset < movieLength)
900013b8:	2800      	cmp	r0, #0
900013ba:	d1c0      	bne.n	9000133e <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x146>
    if (lastError != AVI_NO_ERROR)
900013bc:	f1b9 0f00 	cmp.w	r9, #0
900013c0:	d06b      	beq.n	9000149a <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2a2>
        lastError = AVI_ERROR_MOVI_NOT_FOUND;
900013c2:	230a      	movs	r3, #10
900013c4:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
}
900013c8:	b003      	add	sp, #12
900013ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            lastError = AVI_ERROR_EOF_REACHED;
900013ce:	230d      	movs	r3, #13
900013d0:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
900013d4:	e72d      	b.n	90001232 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x3a>
    offset += 4;
900013d6:	f107 0018 	add.w	r0, r7, #24
    bool foundFrame = true;
900013da:	f04f 0b01 	mov.w	fp, #1
900013de:	e776      	b.n	900012ce <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0xd6>
        listOffset += listSize;
900013e0:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
900013e2:	591c      	ldr	r4, [r3, r4]
900013e4:	4444      	add	r4, r8
    return movieData + offset;
900013e6:	e79b      	b.n	90001320 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x128>
    if (foundFrame)
900013e8:	f1bb 0f00 	cmp.w	fp, #0
900013ec:	f43f af7a 	beq.w	900012e4 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0xec>
        offset += 8; //skip fourcc and cb in AVIMAINHEADER
900013f0:	f107 0120 	add.w	r1, r7, #32
    if (reader != 0)
900013f4:	f1b9 0f00 	cmp.w	r9, #0
900013f8:	f000 80f4 	beq.w	900015e4 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x3ec>
        const uint32_t index = offset - aviBufferStartOffset;
900013fc:	6beb      	ldr	r3, [r5, #60]	; 0x3c
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8) | (aviBuffer[index+2]<<16) | (aviBuffer[index+3]<<24);
900013fe:	6b6a      	ldr	r2, [r5, #52]	; 0x34
        const uint32_t index = offset - aviBufferStartOffset;
90001400:	1ac9      	subs	r1, r1, r3
90001402:	f1c3 0030 	rsb	r0, r3, #48	; 0x30
        videoInfo.ms_between_frames = getU32(offset)/1000;
90001406:	f8df c158 	ldr.w	ip, [pc, #344]	; 90001560 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x368>
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8) | (aviBuffer[index+2]<<16) | (aviBuffer[index+3]<<24);
9000140a:	f812 8001 	ldrb.w	r8, [r2, r1]
9000140e:	eb02 0e01 	add.w	lr, r2, r1
        const uint32_t index = offset - aviBufferStartOffset;
90001412:	f1c3 0140 	rsb	r1, r3, #64	; 0x40
90001416:	f1c3 0344 	rsb	r3, r3, #68	; 0x44
9000141a:	4438      	add	r0, r7
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8) | (aviBuffer[index+2]<<16) | (aviBuffer[index+3]<<24);
9000141c:	f89e b001 	ldrb.w	fp, [lr, #1]
        const uint32_t index = offset - aviBufferStartOffset;
90001420:	4439      	add	r1, r7
90001422:	441f      	add	r7, r3
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8) | (aviBuffer[index+2]<<16) | (aviBuffer[index+3]<<24);
90001424:	f89e 3002 	ldrb.w	r3, [lr, #2]
90001428:	f89e e003 	ldrb.w	lr, [lr, #3]
9000142c:	041b      	lsls	r3, r3, #16
9000142e:	ea43 230b 	orr.w	r3, r3, fp, lsl #8
90001432:	ea43 0308 	orr.w	r3, r3, r8
90001436:	ea43 630e 	orr.w	r3, r3, lr, lsl #24
        videoInfo.ms_between_frames = getU32(offset)/1000;
9000143a:	fbac c303 	umull	ip, r3, ip, r3
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8) | (aviBuffer[index+2]<<16) | (aviBuffer[index+3]<<24);
9000143e:	eb02 0c00 	add.w	ip, r2, r0
        videoInfo.ms_between_frames = getU32(offset)/1000;
90001442:	099b      	lsrs	r3, r3, #6
90001444:	606b      	str	r3, [r5, #4]
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8) | (aviBuffer[index+2]<<16) | (aviBuffer[index+3]<<24);
90001446:	f89c 3002 	ldrb.w	r3, [ip, #2]
9000144a:	f89c 8001 	ldrb.w	r8, [ip, #1]
9000144e:	041b      	lsls	r3, r3, #16
90001450:	f812 e000 	ldrb.w	lr, [r2, r0]
90001454:	f89c c003 	ldrb.w	ip, [ip, #3]
90001458:	1850      	adds	r0, r2, r1
9000145a:	ea43 2308 	orr.w	r3, r3, r8, lsl #8
9000145e:	ea43 030e 	orr.w	r3, r3, lr
90001462:	ea43 630c 	orr.w	r3, r3, ip, lsl #24
        videoInfo.number_of_frames = getU32(offset + 16);
90001466:	60ab      	str	r3, [r5, #8]
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8) | (aviBuffer[index+2]<<16) | (aviBuffer[index+3]<<24);
90001468:	7883      	ldrb	r3, [r0, #2]
9000146a:	f890 c001 	ldrb.w	ip, [r0, #1]
9000146e:	041b      	lsls	r3, r3, #16
90001470:	5c51      	ldrb	r1, [r2, r1]
90001472:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
90001476:	430b      	orrs	r3, r1
90001478:	78c1      	ldrb	r1, [r0, #3]
9000147a:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
9000147e:	19d1      	adds	r1, r2, r7
        videoInfo.frame_width = getU32(offset + 32);
90001480:	60eb      	str	r3, [r5, #12]
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8) | (aviBuffer[index+2]<<16) | (aviBuffer[index+3]<<24);
90001482:	788b      	ldrb	r3, [r1, #2]
90001484:	7848      	ldrb	r0, [r1, #1]
90001486:	041b      	lsls	r3, r3, #16
90001488:	5dd2      	ldrb	r2, [r2, r7]
9000148a:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
9000148e:	4313      	orrs	r3, r2
90001490:	78ca      	ldrb	r2, [r1, #3]
90001492:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
        videoInfo.frame_height = getU32(offset + 36);
90001496:	612b      	str	r3, [r5, #16]
90001498:	e724      	b.n	900012e4 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0xec>
    currentMovieOffset = listOffset + 8 + 4; //skip LIST and 'movi'
9000149a:	f104 030c 	add.w	r3, r4, #12
    lastFrameEnd = listOffset + 8 + getU32(listOffset + 4);
9000149e:	3404      	adds	r4, #4
    currentMovieOffset = listOffset + 8 + 4; //skip LIST and 'movi'
900014a0:	61ab      	str	r3, [r5, #24]
    if (reader != 0)
900014a2:	2e00      	cmp	r6, #0
900014a4:	f000 80b2 	beq.w	9000160c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x414>
        const uint32_t index = offset - aviBufferStartOffset;
900014a8:	6beb      	ldr	r3, [r5, #60]	; 0x3c
900014aa:	1ae4      	subs	r4, r4, r3
        if (length > aviBufferLength)
900014ac:	e9d5 120d 	ldrd	r1, r2, [r5, #52]	; 0x34
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8) | (aviBuffer[index+2]<<16) | (aviBuffer[index+3]<<24);
900014b0:	f104 0c02 	add.w	ip, r4, #2
900014b4:	1c67      	adds	r7, r4, #1
900014b6:	f811 e004 	ldrb.w	lr, [r1, r4]
900014ba:	1ce0      	adds	r0, r4, #3
900014bc:	f811 300c 	ldrb.w	r3, [r1, ip]
        if (length > aviBufferLength)
900014c0:	2a03      	cmp	r2, #3
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8) | (aviBuffer[index+2]<<16) | (aviBuffer[index+3]<<24);
900014c2:	f811 9007 	ldrb.w	r9, [r1, r7]
900014c6:	ea4f 4303 	mov.w	r3, r3, lsl #16
900014ca:	ea43 2309 	orr.w	r3, r3, r9, lsl #8
900014ce:	ea43 030e 	orr.w	r3, r3, lr
900014d2:	f811 e000 	ldrb.w	lr, [r1, r0]
900014d6:	ea43 630e 	orr.w	r3, r3, lr, lsl #24
    lastFrameEnd = listOffset + 8 + getU32(listOffset + 4);
900014da:	4443      	add	r3, r8
900014dc:	626b      	str	r3, [r5, #36]	; 0x24
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8) | (aviBuffer[index+2]<<16) | (aviBuffer[index+3]<<24);
900014de:	f811 300c 	ldrb.w	r3, [r1, ip]
900014e2:	f811 c007 	ldrb.w	ip, [r1, r7]
900014e6:	5d0f      	ldrb	r7, [r1, r4]
900014e8:	ea4f 4403 	mov.w	r4, r3, lsl #16
900014ec:	5c09      	ldrb	r1, [r1, r0]
900014ee:	ea44 240c 	orr.w	r4, r4, ip, lsl #8
900014f2:	ea44 0407 	orr.w	r4, r4, r7
900014f6:	ea44 6401 	orr.w	r4, r4, r1, lsl #24
    listOffset += listSize;
900014fa:	4444      	add	r4, r8
        if (length > aviBufferLength)
900014fc:	f240 808e 	bls.w	9000161c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x424>
        reader->seek(offset);
90001500:	6833      	ldr	r3, [r6, #0]
90001502:	4621      	mov	r1, r4
90001504:	4630      	mov	r0, r6
90001506:	68db      	ldr	r3, [r3, #12]
90001508:	4798      	blx	r3
        if (!reader->readData(aviBuffer, length))
9000150a:	6b28      	ldr	r0, [r5, #48]	; 0x30
9000150c:	2204      	movs	r2, #4
9000150e:	6b69      	ldr	r1, [r5, #52]	; 0x34
90001510:	6803      	ldr	r3, [r0, #0]
90001512:	691b      	ldr	r3, [r3, #16]
90001514:	4798      	blx	r3
90001516:	2800      	cmp	r0, #0
90001518:	d05a      	beq.n	900015d0 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x3d8>
    if (reader != 0)
9000151a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
        aviBufferStartOffset = offset;
9000151c:	63ec      	str	r4, [r5, #60]	; 0x3c
    if (reader != 0)
9000151e:	2b00      	cmp	r3, #0
90001520:	f000 80aa 	beq.w	90001678 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x480>
        src = reinterpret_cast<const char*>(aviBuffer + (offset - aviBufferStartOffset));
90001524:	6b68      	ldr	r0, [r5, #52]	; 0x34
    return strncmp(src, str, num);
90001526:	2204      	movs	r2, #4
90001528:	490c      	ldr	r1, [pc, #48]	; (9000155c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x364>)
9000152a:	f026 fb4f 	bl	90027bcc <strncmp>
    if (!compare(listOffset, "idx1", 4))
9000152e:	2800      	cmp	r0, #0
90001530:	d166      	bne.n	90001600 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x408>
    frameNumber = 1; //next frame number is 1
90001532:	2201      	movs	r2, #1
    firstFrameOffset = currentMovieOffset;
90001534:	69ab      	ldr	r3, [r5, #24]
        indexOffset = listOffset;
90001536:	61ec      	str	r4, [r5, #28]
    frameNumber = 1; //next frame number is 1
90001538:	616a      	str	r2, [r5, #20]
    firstFrameOffset = currentMovieOffset;
9000153a:	622b      	str	r3, [r5, #32]
}
9000153c:	b003      	add	sp, #12
9000153e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90001542:	bf00      	nop
90001544:	90028bd4 	.word	0x90028bd4
90001548:	90028c8c 	.word	0x90028c8c
9000154c:	90028c84 	.word	0x90028c84
90001550:	90028c7c 	.word	0x90028c7c
90001554:	90028c64 	.word	0x90028c64
90001558:	90028c6c 	.word	0x90028c6c
9000155c:	90028c74 	.word	0x90028c74
90001560:	10624dd3 	.word	0x10624dd3
    if (compare(currentMovieOffset, "RIFF", 4))
90001564:	4637      	mov	r7, r6
        src = (const char*)movieData + offset;
90001566:	f8d5 802c 	ldr.w	r8, [r5, #44]	; 0x2c
    return strncmp(src, str, num);
9000156a:	2204      	movs	r2, #4
9000156c:	4944      	ldr	r1, [pc, #272]	; (90001680 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x488>)
        src = (const char*)movieData + offset;
9000156e:	eb08 0407 	add.w	r4, r8, r7
    return strncmp(src, str, num);
90001572:	4620      	mov	r0, r4
90001574:	f026 fb2a 	bl	90027bcc <strncmp>
    if (compare(currentMovieOffset, "RIFF", 4))
90001578:	2800      	cmp	r0, #0
9000157a:	d158      	bne.n	9000162e <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x436>
    currentMovieOffset += 8;
9000157c:	f107 0008 	add.w	r0, r7, #8
    return strncmp(src, str, num);
90001580:	2204      	movs	r2, #4
90001582:	4940      	ldr	r1, [pc, #256]	; (90001684 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x48c>)
    currentMovieOffset += 8;
90001584:	61a8      	str	r0, [r5, #24]
    return strncmp(src, str, num);
90001586:	4440      	add	r0, r8
90001588:	f026 fb20 	bl	90027bcc <strncmp>
    if (compare(currentMovieOffset, "AVI ", 4))
9000158c:	2800      	cmp	r0, #0
9000158e:	d169      	bne.n	90001664 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x46c>
    currentMovieOffset += 4;
90001590:	f107 0a0c 	add.w	sl, r7, #12
    return strncmp(src, str, num);
90001594:	2204      	movs	r2, #4
90001596:	493c      	ldr	r1, [pc, #240]	; (90001688 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x490>)
90001598:	eb08 000a 	add.w	r0, r8, sl
    currentMovieOffset += 4;
9000159c:	f8c5 a018 	str.w	sl, [r5, #24]
    return strncmp(src, str, num);
900015a0:	f026 fb14 	bl	90027bcc <strncmp>
    if (compare(currentMovieOffset, "LIST", 4))
900015a4:	4683      	mov	fp, r0
900015a6:	2800      	cmp	r0, #0
900015a8:	d152      	bne.n	90001650 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x458>
        return d[0] | (d[1] << 8) | (d[2] << 16) | (d[3] << 24);
900015aa:	6924      	ldr	r4, [r4, #16]
    assert(aviListSize);
900015ac:	2c00      	cmp	r4, #0
900015ae:	d048      	beq.n	90001642 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x44a>
    uint32_t offset =  currentMovieOffset + 8;
900015b0:	f107 0014 	add.w	r0, r7, #20
    return strncmp(src, str, num);
900015b4:	2204      	movs	r2, #4
900015b6:	4935      	ldr	r1, [pc, #212]	; (9000168c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x494>)
900015b8:	4440      	add	r0, r8
900015ba:	f026 fb07 	bl	90027bcc <strncmp>
    if (compare(offset, "hdrl", 4))
900015be:	b958      	cbnz	r0, 900015d8 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x3e0>
    offset += 4;
900015c0:	f107 0018 	add.w	r0, r7, #24
    bool foundFrame = true;
900015c4:	f04f 0b01 	mov.w	fp, #1
        src = (const char*)movieData + offset;
900015c8:	4440      	add	r0, r8
900015ca:	f04f 0900 	mov.w	r9, #0
900015ce:	e67f      	b.n	900012d0 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0xd8>
            lastError = AVI_ERROR_EOF_REACHED;
900015d0:	230d      	movs	r3, #13
900015d2:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
900015d6:	e7a0      	b.n	9000151a <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x322>
        lastError = AVI_ERROR_AVI_HDRL_NOT_FOUND;
900015d8:	2306      	movs	r3, #6
    offset += 4;
900015da:	f107 0018 	add.w	r0, r7, #24
        lastError = AVI_ERROR_AVI_HDRL_NOT_FOUND;
900015de:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
    if (reader != 0)
900015e2:	e7f1      	b.n	900015c8 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x3d0>
900015e4:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
        videoInfo.ms_between_frames = getU32(offset)/1000;
900015e6:	585a      	ldr	r2, [r3, r1]
900015e8:	443b      	add	r3, r7
900015ea:	4929      	ldr	r1, [pc, #164]	; (90001690 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x498>)
900015ec:	fba1 1202 	umull	r1, r2, r1, r2
900015f0:	0992      	lsrs	r2, r2, #6
900015f2:	606a      	str	r2, [r5, #4]
        return d[0] | (d[1] << 8) | (d[2] << 16) | (d[3] << 24);
900015f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
        videoInfo.number_of_frames = getU32(offset + 16);
900015f6:	60aa      	str	r2, [r5, #8]
        return d[0] | (d[1] << 8) | (d[2] << 16) | (d[3] << 24);
900015f8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
        videoInfo.frame_width = getU32(offset + 32);
900015fa:	60ea      	str	r2, [r5, #12]
        return d[0] | (d[1] << 8) | (d[2] << 16) | (d[3] << 24);
900015fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
900015fe:	e74a      	b.n	90001496 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x29e>
        lastError = AVI_ERROR_IDX1_NOT_FOUND;
90001600:	230b      	movs	r3, #11
90001602:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
}
90001606:	b003      	add	sp, #12
90001608:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9000160c:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
    lastFrameEnd = listOffset + 8 + getU32(listOffset + 4);
9000160e:	5903      	ldr	r3, [r0, r4]
90001610:	4443      	add	r3, r8
90001612:	626b      	str	r3, [r5, #36]	; 0x24
    listOffset += listSize;
90001614:	5904      	ldr	r4, [r0, r4]
90001616:	4444      	add	r4, r8
        src = (const char*)movieData + offset;
90001618:	4420      	add	r0, r4
9000161a:	e784      	b.n	90001526 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x32e>
            lastError = AVI_ERROR_FILE_BUFFER_TO_SMALL;
9000161c:	2009      	movs	r0, #9
            assert(!"Buffer to small");
9000161e:	4b1d      	ldr	r3, [pc, #116]	; (90001694 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x49c>)
90001620:	4a1d      	ldr	r2, [pc, #116]	; (90001698 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x4a0>)
90001622:	21a6      	movs	r1, #166	; 0xa6
            lastError = AVI_ERROR_FILE_BUFFER_TO_SMALL;
90001624:	f885 0040 	strb.w	r0, [r5, #64]	; 0x40
            assert(!"Buffer to small");
90001628:	481c      	ldr	r0, [pc, #112]	; (9000169c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x4a4>)
9000162a:	f026 f813 	bl	90027654 <__assert_func>
        lastError = AVI_ERROR_NOT_RIFF;
9000162e:	2003      	movs	r0, #3
        assert(!"RIFF header not found");
90001630:	4b1b      	ldr	r3, [pc, #108]	; (900016a0 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x4a8>)
90001632:	4a1c      	ldr	r2, [pc, #112]	; (900016a4 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x4ac>)
90001634:	f44f 719a 	mov.w	r1, #308	; 0x134
        lastError = AVI_ERROR_NOT_RIFF;
90001638:	f885 0040 	strb.w	r0, [r5, #64]	; 0x40
        assert(!"RIFF header not found");
9000163c:	4817      	ldr	r0, [pc, #92]	; (9000169c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x4a4>)
9000163e:	f026 f809 	bl	90027654 <__assert_func>
    assert(aviListSize);
90001642:	4b19      	ldr	r3, [pc, #100]	; (900016a8 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x4b0>)
90001644:	f240 1149 	movw	r1, #329	; 0x149
90001648:	4a16      	ldr	r2, [pc, #88]	; (900016a4 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x4ac>)
9000164a:	4814      	ldr	r0, [pc, #80]	; (9000169c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x4a4>)
9000164c:	f026 f802 	bl	90027654 <__assert_func>
        lastError = AVI_ERROR_AVI_LIST_NOT_FOUND;
90001650:	2005      	movs	r0, #5
        assert(!"AVI LIST not found");
90001652:	4b16      	ldr	r3, [pc, #88]	; (900016ac <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x4b4>)
90001654:	4a13      	ldr	r2, [pc, #76]	; (900016a4 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x4ac>)
90001656:	f240 1143 	movw	r1, #323	; 0x143
        lastError = AVI_ERROR_AVI_LIST_NOT_FOUND;
9000165a:	f885 0040 	strb.w	r0, [r5, #64]	; 0x40
        assert(!"AVI LIST not found");
9000165e:	480f      	ldr	r0, [pc, #60]	; (9000169c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x4a4>)
90001660:	f025 fff8 	bl	90027654 <__assert_func>
        lastError = AVI_ERROR_AVI_HEADER_NOT_FOUND;
90001664:	2004      	movs	r0, #4
        assert(!"AVI header not found");
90001666:	4b12      	ldr	r3, [pc, #72]	; (900016b0 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x4b8>)
90001668:	4a0e      	ldr	r2, [pc, #56]	; (900016a4 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x4ac>)
9000166a:	f44f 719e 	mov.w	r1, #316	; 0x13c
        lastError = AVI_ERROR_AVI_HEADER_NOT_FOUND;
9000166e:	f885 0040 	strb.w	r0, [r5, #64]	; 0x40
        assert(!"AVI header not found");
90001672:	480a      	ldr	r0, [pc, #40]	; (9000169c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x4a4>)
90001674:	f025 ffee 	bl	90027654 <__assert_func>
        src = (const char*)movieData + offset;
90001678:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
9000167a:	4420      	add	r0, r4
9000167c:	e753      	b.n	90001526 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x32e>
9000167e:	bf00      	nop
90001680:	90028bd4 	.word	0x90028bd4
90001684:	90028c8c 	.word	0x90028c8c
90001688:	90028c84 	.word	0x90028c84
9000168c:	90028c7c 	.word	0x90028c7c
90001690:	10624dd3 	.word	0x10624dd3
90001694:	90028aa0 	.word	0x90028aa0
90001698:	90028ab4 	.word	0x90028ab4
9000169c:	90028a44 	.word	0x90028a44
900016a0:	90028bdc 	.word	0x90028bdc
900016a4:	90028bf8 	.word	0x90028bf8
900016a8:	90028c58 	.word	0x90028c58
900016ac:	90028c40 	.word	0x90028c40
900016b0:	90028c28 	.word	0x90028c28

900016b4 <_ZN20HardwareMJPEGDecoder12setVideoDataEPKhm>:
{
900016b4:	b410      	push	{r4}
    reader = 0; //not using reader
900016b6:	2400      	movs	r4, #0
    movieLength = length;
900016b8:	e9c0 210a 	strd	r2, r1, [r0, #40]	; 0x28
    reader = 0; //not using reader
900016bc:	6304      	str	r4, [r0, #48]	; 0x30
}
900016be:	f85d 4b04 	ldr.w	r4, [sp], #4
    readVideoHeader();
900016c2:	f7ff bd99 	b.w	900011f8 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv>
900016c6:	bf00      	nop

900016c8 <_ZN20HardwareMJPEGDecoder12setVideoDataERN8touchgfx15VideoDataReaderE>:
{
900016c8:	b510      	push	{r4, lr}
    movieLength = reader.getDataLength();
900016ca:	680b      	ldr	r3, [r1, #0]
{
900016cc:	4604      	mov	r4, r0
    movieData = 0;
900016ce:	2200      	movs	r2, #0
    movieLength = reader.getDataLength();
900016d0:	4608      	mov	r0, r1
900016d2:	689b      	ldr	r3, [r3, #8]
    movieData = 0;
900016d4:	e9c4 210b 	strd	r2, r1, [r4, #44]	; 0x2c
    movieLength = reader.getDataLength();
900016d8:	4798      	blx	r3
900016da:	4603      	mov	r3, r0
    readVideoHeader();
900016dc:	4620      	mov	r0, r4
    movieLength = reader.getDataLength();
900016de:	62a3      	str	r3, [r4, #40]	; 0x28
}
900016e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    readVideoHeader();
900016e4:	f7ff bd88 	b.w	900011f8 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv>

900016e8 <HAL_JPEG_InfoReadyCallback>:
{
900016e8:	b508      	push	{r3, lr}
  if(pInfo->ChromaSubsampling == JPEG_420_SUBSAMPLING)
900016ea:	684b      	ldr	r3, [r1, #4]
{
900016ec:	4608      	mov	r0, r1
  if(pInfo->ChromaSubsampling == JPEG_420_SUBSAMPLING)
900016ee:	2b01      	cmp	r3, #1
900016f0:	d01a      	beq.n	90001728 <HAL_JPEG_InfoReadyCallback+0x40>
    if(pInfo->ChromaSubsampling == JPEG_422_SUBSAMPLING)
900016f2:	2b02      	cmp	r3, #2
900016f4:	d010      	beq.n	90001718 <HAL_JPEG_InfoReadyCallback+0x30>
    if(pInfo->ChromaSubsampling == JPEG_444_SUBSAMPLING)
900016f6:	b94b      	cbnz	r3, 9000170c <HAL_JPEG_InfoReadyCallback+0x24>
      if((pInfo->ImageWidth % 8) != 0)
900016f8:	68cb      	ldr	r3, [r1, #12]
900016fa:	0759      	lsls	r1, r3, #29
900016fc:	d12f      	bne.n	9000175e <HAL_JPEG_InfoReadyCallback+0x76>
      if((pInfo->ImageHeight % 8) != 0)
900016fe:	6883      	ldr	r3, [r0, #8]
90001700:	075a      	lsls	r2, r3, #29
90001702:	d003      	beq.n	9000170c <HAL_JPEG_InfoReadyCallback+0x24>
        pInfo->ImageHeight += (8 - (pInfo->ImageHeight % 8));
90001704:	f023 0307 	bic.w	r3, r3, #7
90001708:	3308      	adds	r3, #8
9000170a:	6083      	str	r3, [r0, #8]
    HAL_StatusTypeDef status = JPEG_GetDecodeColorConvertFunc(pInfo, &pConvert_Function, &MCU_TotalNb);
9000170c:	4a1a      	ldr	r2, [pc, #104]	; (90001778 <HAL_JPEG_InfoReadyCallback+0x90>)
9000170e:	491b      	ldr	r1, [pc, #108]	; (9000177c <HAL_JPEG_InfoReadyCallback+0x94>)
90001710:	f011 f90a 	bl	90012928 <JPEG_GetDecodeColorConvertFunc>
    if(status != HAL_OK)
90001714:	bb40      	cbnz	r0, 90001768 <HAL_JPEG_InfoReadyCallback+0x80>
}
90001716:	bd08      	pop	{r3, pc}
      if((pInfo->ImageWidth % 16) != 0)
90001718:	68cb      	ldr	r3, [r1, #12]
9000171a:	071a      	lsls	r2, r3, #28
9000171c:	d0ef      	beq.n	900016fe <HAL_JPEG_InfoReadyCallback+0x16>
        pInfo->ImageWidth += (16 - (pInfo->ImageWidth % 16));
9000171e:	f023 030f 	bic.w	r3, r3, #15
90001722:	3310      	adds	r3, #16
90001724:	60cb      	str	r3, [r1, #12]
90001726:	e7ea      	b.n	900016fe <HAL_JPEG_InfoReadyCallback+0x16>
    if((pInfo->ImageWidth % 16) != 0)
90001728:	68cb      	ldr	r3, [r1, #12]
9000172a:	071a      	lsls	r2, r3, #28
9000172c:	d003      	beq.n	90001736 <HAL_JPEG_InfoReadyCallback+0x4e>
      pInfo->ImageWidth += (16 - (pInfo->ImageWidth % 16));
9000172e:	f023 030f 	bic.w	r3, r3, #15
90001732:	3310      	adds	r3, #16
90001734:	60cb      	str	r3, [r1, #12]
    if((pInfo->ImageHeight % 16) != 0)
90001736:	6883      	ldr	r3, [r0, #8]
90001738:	0719      	lsls	r1, r3, #28
9000173a:	d003      	beq.n	90001744 <HAL_JPEG_InfoReadyCallback+0x5c>
      pInfo->ImageHeight += (16 - (pInfo->ImageHeight % 16));
9000173c:	f023 030f 	bic.w	r3, r3, #15
90001740:	3310      	adds	r3, #16
90001742:	6083      	str	r3, [r0, #8]
    HAL_StatusTypeDef status = TGFX_JPEG_GetDecodeColorConvertFunc(pInfo, &pConvert_Function, &MCU_TotalNb);
90001744:	4a0c      	ldr	r2, [pc, #48]	; (90001778 <HAL_JPEG_InfoReadyCallback+0x90>)
90001746:	490d      	ldr	r1, [pc, #52]	; (9000177c <HAL_JPEG_InfoReadyCallback+0x94>)
90001748:	f001 ff56 	bl	900035f8 <TGFX_JPEG_GetDecodeColorConvertFunc>
    if(status != HAL_OK)
9000174c:	2800      	cmp	r0, #0
9000174e:	d0e2      	beq.n	90001716 <HAL_JPEG_InfoReadyCallback+0x2e>
      assert(status == HAL_OK);
90001750:	4b0b      	ldr	r3, [pc, #44]	; (90001780 <HAL_JPEG_InfoReadyCallback+0x98>)
90001752:	f240 212e 	movw	r1, #558	; 0x22e
90001756:	4a0b      	ldr	r2, [pc, #44]	; (90001784 <HAL_JPEG_InfoReadyCallback+0x9c>)
90001758:	480b      	ldr	r0, [pc, #44]	; (90001788 <HAL_JPEG_InfoReadyCallback+0xa0>)
9000175a:	f025 ff7b 	bl	90027654 <__assert_func>
        pInfo->ImageWidth += (8 - (pInfo->ImageWidth % 8));
9000175e:	f023 0307 	bic.w	r3, r3, #7
90001762:	3308      	adds	r3, #8
90001764:	60c3      	str	r3, [r0, #12]
90001766:	e7ca      	b.n	900016fe <HAL_JPEG_InfoReadyCallback+0x16>
      assert(status == HAL_OK);
90001768:	4b05      	ldr	r3, [pc, #20]	; (90001780 <HAL_JPEG_InfoReadyCallback+0x98>)
9000176a:	f44f 7112 	mov.w	r1, #584	; 0x248
9000176e:	4a05      	ldr	r2, [pc, #20]	; (90001784 <HAL_JPEG_InfoReadyCallback+0x9c>)
90001770:	4805      	ldr	r0, [pc, #20]	; (90001788 <HAL_JPEG_InfoReadyCallback+0xa0>)
90001772:	f025 ff6f 	bl	90027654 <__assert_func>
90001776:	bf00      	nop
90001778:	24005b98 	.word	0x24005b98
9000177c:	24005bd4 	.word	0x24005bd4
90001780:	90028c94 	.word	0x90028c94
90001784:	90028ca8 	.word	0x90028ca8
90001788:	90028a44 	.word	0x90028a44

9000178c <HAL_JPEG_GetDataCallback>:
{
9000178c:	b410      	push	{r4}
  JPEG_InputImageIndex += NbDecodedData;
9000178e:	4c0c      	ldr	r4, [pc, #48]	; (900017c0 <HAL_JPEG_GetDataCallback+0x34>)
  if(JPEG_InputImageIndex < JPEG_InputImageSize_Bytes)
90001790:	4a0c      	ldr	r2, [pc, #48]	; (900017c4 <HAL_JPEG_GetDataCallback+0x38>)
  JPEG_InputImageIndex += NbDecodedData;
90001792:	6823      	ldr	r3, [r4, #0]
  if(JPEG_InputImageIndex < JPEG_InputImageSize_Bytes)
90001794:	6812      	ldr	r2, [r2, #0]
  JPEG_InputImageIndex += NbDecodedData;
90001796:	440b      	add	r3, r1
  if(JPEG_InputImageIndex < JPEG_InputImageSize_Bytes)
90001798:	4293      	cmp	r3, r2
  JPEG_InputImageIndex += NbDecodedData;
9000179a:	6023      	str	r3, [r4, #0]
  if(JPEG_InputImageIndex < JPEG_InputImageSize_Bytes)
9000179c:	d302      	bcc.n	900017a4 <HAL_JPEG_GetDataCallback+0x18>
}
9000179e:	f85d 4b04 	ldr.w	r4, [sp], #4
900017a2:	4770      	bx	lr
    uint32_t inDataLength = JPEG_InputImageSize_Bytes - JPEG_InputImageIndex;
900017a4:	1ad2      	subs	r2, r2, r3
    JPEG_InputImageAddress = JPEG_InputImageAddress + NbDecodedData;
900017a6:	4b08      	ldr	r3, [pc, #32]	; (900017c8 <HAL_JPEG_GetDataCallback+0x3c>)
900017a8:	681c      	ldr	r4, [r3, #0]
    HAL_JPEG_ConfigInputBuffer(hjpeg,(uint8_t *)JPEG_InputImageAddress, inDataLength >= CHUNK_SIZE_IN ? CHUNK_SIZE_IN : inDataLength);
900017aa:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
    JPEG_InputImageAddress = JPEG_InputImageAddress + NbDecodedData;
900017ae:	4421      	add	r1, r4
    HAL_JPEG_ConfigInputBuffer(hjpeg,(uint8_t *)JPEG_InputImageAddress, inDataLength >= CHUNK_SIZE_IN ? CHUNK_SIZE_IN : inDataLength);
900017b0:	bf28      	it	cs
900017b2:	f44f 3280 	movcs.w	r2, #65536	; 0x10000
}
900017b6:	f85d 4b04 	ldr.w	r4, [sp], #4
    JPEG_InputImageAddress = JPEG_InputImageAddress + NbDecodedData;
900017ba:	6019      	str	r1, [r3, #0]
    HAL_JPEG_ConfigInputBuffer(hjpeg,(uint8_t *)JPEG_InputImageAddress, inDataLength >= CHUNK_SIZE_IN ? CHUNK_SIZE_IN : inDataLength);
900017bc:	f009 bef4 	b.w	9000b5a8 <HAL_JPEG_ConfigInputBuffer>
900017c0:	24005b7c 	.word	0x24005b7c
900017c4:	24005b80 	.word	0x24005b80
900017c8:	24005b78 	.word	0x24005b78

900017cc <HAL_JPEG_DataReadyCallback>:
{
900017cc:	b570      	push	{r4, r5, r6, lr}
    Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State = JPEG_BUFFER_FULL;
900017ce:	4e1e      	ldr	r6, [pc, #120]	; (90001848 <HAL_JPEG_DataReadyCallback+0x7c>)
{
900017d0:	4605      	mov	r5, r0
    Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State = JPEG_BUFFER_FULL;
900017d2:	2001      	movs	r0, #1
900017d4:	4c1d      	ldr	r4, [pc, #116]	; (9000184c <HAL_JPEG_DataReadyCallback+0x80>)
900017d6:	6833      	ldr	r3, [r6, #0]
900017d8:	eb03 0143 	add.w	r1, r3, r3, lsl #1
    JPEG_OUT_Write_BufferIndex++;
900017dc:	4403      	add	r3, r0
    Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State = JPEG_BUFFER_FULL;
900017de:	f804 0021 	strb.w	r0, [r4, r1, lsl #2]
    if(JPEG_OUT_Write_BufferIndex >= NB_OUTPUT_DATA_BUFFERS)
900017e2:	4283      	cmp	r3, r0
    Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State = JPEG_BUFFER_FULL;
900017e4:	eb04 0181 	add.w	r1, r4, r1, lsl #2
    Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBufferSize = OutDataLength;
900017e8:	608a      	str	r2, [r1, #8]
    if(JPEG_OUT_Write_BufferIndex >= NB_OUTPUT_DATA_BUFFERS)
900017ea:	d91a      	bls.n	90001822 <HAL_JPEG_DataReadyCallback+0x56>
      JPEG_OUT_Write_BufferIndex = 0;
900017ec:	2200      	movs	r2, #0
900017ee:	4613      	mov	r3, r2
900017f0:	6032      	str	r2, [r6, #0]
    if(Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State != JPEG_BUFFER_EMPTY)
900017f2:	eb03 0143 	add.w	r1, r3, r3, lsl #1
900017f6:	005a      	lsls	r2, r3, #1
900017f8:	f814 1021 	ldrb.w	r1, [r4, r1, lsl #2]
900017fc:	b9c9      	cbnz	r1, 90001832 <HAL_JPEG_DataReadyCallback+0x66>
    HAL_JPEG_ConfigOutputBuffer(hjpeg, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
900017fe:	4914      	ldr	r1, [pc, #80]	; (90001850 <HAL_JPEG_DataReadyCallback+0x84>)
90001800:	4413      	add	r3, r2
90001802:	4628      	mov	r0, r5
90001804:	68ca      	ldr	r2, [r1, #12]
90001806:	eb04 0483 	add.w	r4, r4, r3, lsl #2
9000180a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
9000180e:	6861      	ldr	r1, [r4, #4]
90001810:	01d2      	lsls	r2, r2, #7
90001812:	f009 fecd 	bl	9000b5b0 <HAL_JPEG_ConfigOutputBuffer>
    SEM_POST(semDecodingDone);
90001816:	4b0f      	ldr	r3, [pc, #60]	; (90001854 <HAL_JPEG_DataReadyCallback+0x88>)
}
90001818:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    SEM_POST(semDecodingDone);
9000181c:	6818      	ldr	r0, [r3, #0]
9000181e:	f00d bb47 	b.w	9000eeb0 <osSemaphoreRelease>
    if(Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State != JPEG_BUFFER_EMPTY)
90001822:	eb03 0143 	add.w	r1, r3, r3, lsl #1
    JPEG_OUT_Write_BufferIndex++;
90001826:	6033      	str	r3, [r6, #0]
    if(Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State != JPEG_BUFFER_EMPTY)
90001828:	005a      	lsls	r2, r3, #1
9000182a:	f814 1021 	ldrb.w	r1, [r4, r1, lsl #2]
9000182e:	2900      	cmp	r1, #0
90001830:	d0e5      	beq.n	900017fe <HAL_JPEG_DataReadyCallback+0x32>
      HAL_JPEG_Pause(hjpeg, JPEG_PAUSE_RESUME_OUTPUT);
90001832:	2102      	movs	r1, #2
90001834:	4628      	mov	r0, r5
90001836:	f009 fe7f 	bl	9000b538 <HAL_JPEG_Pause>
      Output_Is_Paused = 1;
9000183a:	4a07      	ldr	r2, [pc, #28]	; (90001858 <HAL_JPEG_DataReadyCallback+0x8c>)
9000183c:	2101      	movs	r1, #1
    HAL_JPEG_ConfigOutputBuffer(hjpeg, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
9000183e:	6833      	ldr	r3, [r6, #0]
      Output_Is_Paused = 1;
90001840:	6011      	str	r1, [r2, #0]
90001842:	fa03 f201 	lsl.w	r2, r3, r1
90001846:	e7da      	b.n	900017fe <HAL_JPEG_DataReadyCallback+0x32>
90001848:	24005b88 	.word	0x24005b88
9000184c:	24000004 	.word	0x24000004
90001850:	24005ba0 	.word	0x24005ba0
90001854:	24005bd8 	.word	0x24005bd8
90001858:	24005b9c 	.word	0x24005b9c

9000185c <HAL_JPEG_ErrorCallback>:
  __ASM volatile ("cpsid i" : : : "memory");
9000185c:	b672      	cpsid	i
  while (1)
9000185e:	e7fe      	b.n	9000185e <HAL_JPEG_ErrorCallback+0x2>

90001860 <HAL_JPEG_DecodeCpltCallback>:
  Jpeg_HWDecodingEnd = 1;
90001860:	4b01      	ldr	r3, [pc, #4]	; (90001868 <HAL_JPEG_DecodeCpltCallback+0x8>)
90001862:	2201      	movs	r2, #1
90001864:	601a      	str	r2, [r3, #0]
}
90001866:	4770      	bx	lr
90001868:	24005b90 	.word	0x24005b90

9000186c <DMA2D_CopyBuffer>:
  * @brief  Configures external DMA2D job to copy YCbCr data to RGB buffer(s)
  * @param job: External job reference
  * @retval None
  */
void DMA2D_CopyBuffer(External_DMA2D_JobTypeDef& job)
{
9000186c:	b570      	push	{r4, r5, r6, lr}
  uint32_t xRef, yRef, refline;

  xRef = ((job.MCU_index * MCU_WIDTH_PIXELS) / JPEG_ConvertorParams.WidthExtend) * MCU_WIDTH_PIXELS;
9000186e:	491b      	ldr	r1, [pc, #108]	; (900018dc <DMA2D_CopyBuffer+0x70>)
  yRef = ((job.MCU_index * MCU_WIDTH_PIXELS) % JPEG_ConvertorParams.WidthExtend);

  refline = (JPEG_ConvertorParams.ScaledWidth) * xRef + (JPEG_ConvertorParams.bytes_pr_pixel * yRef);

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB565);
90001870:	2302      	movs	r3, #2
  xRef = ((job.MCU_index * MCU_WIDTH_PIXELS) / JPEG_ConvertorParams.WidthExtend) * MCU_WIDTH_PIXELS;
90001872:	6805      	ldr	r5, [r0, #0]
  WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB565);
90001874:	4c1a      	ldr	r4, [pc, #104]	; (900018e0 <DMA2D_CopyBuffer+0x74>)
  xRef = ((job.MCU_index * MCU_WIDTH_PIXELS) / JPEG_ConvertorParams.WidthExtend) * MCU_WIDTH_PIXELS;
90001876:	680a      	ldr	r2, [r1, #0]
  WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB565);
90001878:	6363      	str	r3, [r4, #52]	; 0x34
  xRef = ((job.MCU_index * MCU_WIDTH_PIXELS) / JPEG_ConvertorParams.WidthExtend) * MCU_WIDTH_PIXELS;
9000187a:	012b      	lsls	r3, r5, #4

  /* Configure DMA2D data size */
  if(job.MCU_index >= (MCU_TotalNb - JPEG_ConvertorParams.MCU_pr_line))  // Last line of frame
9000187c:	4e19      	ldr	r6, [pc, #100]	; (900018e4 <DMA2D_CopyBuffer+0x78>)
  xRef = ((job.MCU_index * MCU_WIDTH_PIXELS) / JPEG_ConvertorParams.WidthExtend) * MCU_WIDTH_PIXELS;
9000187e:	fbb3 fcf2 	udiv	ip, r3, r2
  yRef = ((job.MCU_index * MCU_WIDTH_PIXELS) % JPEG_ConvertorParams.WidthExtend);
90001882:	fb02 321c 	mls	r2, r2, ip, r3
  refline = (JPEG_ConvertorParams.ScaledWidth) * xRef + (JPEG_ConvertorParams.bytes_pr_pixel * yRef);
90001886:	684b      	ldr	r3, [r1, #4]
  if(job.MCU_index >= (MCU_TotalNb - JPEG_ConvertorParams.MCU_pr_line))  // Last line of frame
90001888:	6836      	ldr	r6, [r6, #0]
  refline = (JPEG_ConvertorParams.ScaledWidth) * xRef + (JPEG_ConvertorParams.bytes_pr_pixel * yRef);
9000188a:	fb03 fc0c 	mul.w	ip, r3, ip
  if(job.MCU_index >= (MCU_TotalNb - JPEG_ConvertorParams.MCU_pr_line))  // Last line of frame
9000188e:	68cb      	ldr	r3, [r1, #12]
90001890:	eba6 0e03 	sub.w	lr, r6, r3
  refline = (JPEG_ConvertorParams.ScaledWidth) * xRef + (JPEG_ConvertorParams.bytes_pr_pixel * yRef);
90001894:	690e      	ldr	r6, [r1, #16]
90001896:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
  if(job.MCU_index >= (MCU_TotalNb - JPEG_ConvertorParams.MCU_pr_line))  // Last line of frame
9000189a:	4575      	cmp	r5, lr
  refline = (JPEG_ConvertorParams.ScaledWidth) * xRef + (JPEG_ConvertorParams.bytes_pr_pixel * yRef);
9000189c:	fb06 f202 	mul.w	r2, r6, r2
  if(job.MCU_index >= (MCU_TotalNb - JPEG_ConvertorParams.MCU_pr_line))  // Last line of frame
900018a0:	d317      	bcc.n	900018d2 <DMA2D_CopyBuffer+0x66>
  {
      WRITE_REG(DMA2D->NLR, (JPEG_ConvertorParams.LastLineHeight | ((MCU_WIDTH_PIXELS * JPEG_ConvertorParams.MCU_pr_line) << DMA2D_NLR_PL_Pos)));
900018a2:	6889      	ldr	r1, [r1, #8]
900018a4:	ea41 5103 	orr.w	r1, r1, r3, lsl #20
900018a8:	6461      	str	r1, [r4, #68]	; 0x44
  {
      WRITE_REG(DMA2D->NLR, (MCU_HEIGHT_PIXELS | ((MCU_WIDTH_PIXELS * JPEG_ConvertorParams.MCU_pr_line) << DMA2D_NLR_PL_Pos)));
  }

  /* Configure DMA2D destination address */
  WRITE_REG(DMA2D->OMAR, (reinterpret_cast<uint32_t>(FrameBufferAddress) + refline));
900018aa:	490f      	ldr	r1, [pc, #60]	; (900018e8 <DMA2D_CopyBuffer+0x7c>)

  /* DMA2D OOR register configuration ------------------------------------------*/
  WRITE_REG(DMA2D->OOR, 480 - (MCU_WIDTH_PIXELS * JPEG_ConvertorParams.MCU_pr_line));
900018ac:	f1c3 031e 	rsb	r3, r3, #30

  /* DMA2D FGPFCCR register configuration -------------------------------------*/
  WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_YCBCR | (DMA2D_CSS_420 << DMA2D_FGPFCCR_CSS_Pos) | (DMA2D_REPLACE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (0xFFU << DMA2D_FGPFCCR_ALPHA_Pos));

  /* Configure DMA2D source address */
  WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(job.jpeg_buffer->DataBuffer));
900018b0:	6840      	ldr	r0, [r0, #4]
  WRITE_REG(DMA2D->FGOR, 0);
900018b2:	2400      	movs	r4, #0
  WRITE_REG(DMA2D->OMAR, (reinterpret_cast<uint32_t>(FrameBufferAddress) + refline));
900018b4:	6809      	ldr	r1, [r1, #0]
  WRITE_REG(DMA2D->OOR, 480 - (MCU_WIDTH_PIXELS * JPEG_ConvertorParams.MCU_pr_line));
900018b6:	011b      	lsls	r3, r3, #4
  WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(job.jpeg_buffer->DataBuffer));
900018b8:	6840      	ldr	r0, [r0, #4]
  WRITE_REG(DMA2D->OMAR, (reinterpret_cast<uint32_t>(FrameBufferAddress) + refline));
900018ba:	4411      	add	r1, r2
900018bc:	4a08      	ldr	r2, [pc, #32]	; (900018e0 <DMA2D_CopyBuffer+0x74>)
900018be:	4461      	add	r1, ip
900018c0:	63d1      	str	r1, [r2, #60]	; 0x3c
  WRITE_REG(DMA2D->OOR, 480 - (MCU_WIDTH_PIXELS * JPEG_ConvertorParams.MCU_pr_line));
900018c2:	6413      	str	r3, [r2, #64]	; 0x40
  WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_YCBCR | (DMA2D_CSS_420 << DMA2D_FGPFCCR_CSS_Pos) | (DMA2D_REPLACE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (0xFFU << DMA2D_FGPFCCR_ALPHA_Pos));
900018c4:	4909      	ldr	r1, [pc, #36]	; (900018ec <DMA2D_CopyBuffer+0x80>)

  /* Configure DMA2D contol register */
  WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
900018c6:	4b0a      	ldr	r3, [pc, #40]	; (900018f0 <DMA2D_CopyBuffer+0x84>)
  WRITE_REG(DMA2D->FGOR, 0);
900018c8:	6114      	str	r4, [r2, #16]
  WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_YCBCR | (DMA2D_CSS_420 << DMA2D_FGPFCCR_CSS_Pos) | (DMA2D_REPLACE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (0xFFU << DMA2D_FGPFCCR_ALPHA_Pos));
900018ca:	61d1      	str	r1, [r2, #28]
  WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(job.jpeg_buffer->DataBuffer));
900018cc:	60d0      	str	r0, [r2, #12]
  WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
900018ce:	6013      	str	r3, [r2, #0]
}
900018d0:	bd70      	pop	{r4, r5, r6, pc}
      WRITE_REG(DMA2D->NLR, (MCU_HEIGHT_PIXELS | ((MCU_WIDTH_PIXELS * JPEG_ConvertorParams.MCU_pr_line) << DMA2D_NLR_PL_Pos)));
900018d2:	0519      	lsls	r1, r3, #20
900018d4:	f041 0110 	orr.w	r1, r1, #16
900018d8:	6461      	str	r1, [r4, #68]	; 0x44
900018da:	e7e6      	b.n	900018aa <DMA2D_CopyBuffer+0x3e>
900018dc:	24005ba0 	.word	0x24005ba0
900018e0:	52001000 	.word	0x52001000
900018e4:	24005b98 	.word	0x24005b98
900018e8:	24005b74 	.word	0x24005b74
900018ec:	ff09000b 	.word	0xff09000b
900018f0:	00010201 	.word	0x00010201

900018f4 <DMA2D_ExternalJobCompleted>:
  * @retval None
  */
void DMA2D_ExternalJobCompleted(External_DMA2D_JobTypeDef& job)
{
  // Mark ycbcr empty
  job.jpeg_buffer->State = JPEG_BUFFER_EMPTY;
900018f4:	2200      	movs	r2, #0
900018f6:	6843      	ldr	r3, [r0, #4]
      return count_ == 0;
900018f8:	490b      	ldr	r1, [pc, #44]	; (90001928 <DMA2D_ExternalJobCompleted+0x34>)
900018fa:	701a      	strb	r2, [r3, #0]
  job.jpeg_buffer->DataBufferSize = 0;

  // Mark dma paused if queue is empty
  if(external_queue.is_empty())
900018fc:	68c9      	ldr	r1, [r1, #12]
  job.jpeg_buffer->DataBufferSize = 0;
900018fe:	609a      	str	r2, [r3, #8]
  if(external_queue.is_empty())
90001900:	b911      	cbnz	r1, 90001908 <DMA2D_ExternalJobCompleted+0x14>
  {
      DMA2D_output_Is_Paused = 1;
90001902:	4b0a      	ldr	r3, [pc, #40]	; (9000192c <DMA2D_ExternalJobCompleted+0x38>)
90001904:	2201      	movs	r2, #1
90001906:	601a      	str	r2, [r3, #0]
  }

  // Check if last line
  if(job.MCU_index >= (MCU_TotalNb - JPEG_ConvertorParams.MCU_pr_line))
90001908:	4b09      	ldr	r3, [pc, #36]	; (90001930 <DMA2D_ExternalJobCompleted+0x3c>)
9000190a:	490a      	ldr	r1, [pc, #40]	; (90001934 <DMA2D_ExternalJobCompleted+0x40>)
9000190c:	681b      	ldr	r3, [r3, #0]
9000190e:	68c9      	ldr	r1, [r1, #12]
90001910:	6802      	ldr	r2, [r0, #0]
90001912:	1a5b      	subs	r3, r3, r1
90001914:	429a      	cmp	r2, r3
90001916:	d302      	bcc.n	9000191e <DMA2D_ExternalJobCompleted+0x2a>
  {
      DMA2D_CopyBufferEnd = 1;
90001918:	4b07      	ldr	r3, [pc, #28]	; (90001938 <DMA2D_ExternalJobCompleted+0x44>)
9000191a:	2201      	movs	r2, #1
9000191c:	601a      	str	r2, [r3, #0]
  }

  // Signal Hardware Decoding to wake up
  SEM_POST(semDecodingDone);
9000191e:	4b07      	ldr	r3, [pc, #28]	; (9000193c <DMA2D_ExternalJobCompleted+0x48>)
90001920:	6818      	ldr	r0, [r3, #0]
90001922:	f00d bac5 	b.w	9000eeb0 <osSemaphoreRelease>
90001926:	bf00      	nop
90001928:	24005bb4 	.word	0x24005bb4
9000192c:	24005b70 	.word	0x24005b70
90001930:	24005b98 	.word	0x24005b98
90001934:	24005ba0 	.word	0x24005ba0
90001938:	24005b6c 	.word	0x24005b6c
9000193c:	24005bd8 	.word	0x24005bd8

90001940 <_GLOBAL__sub_I_FrameBufferAddress>:
      : max_size_(Size), head_(0), tail_(0), count_(0)
90001940:	4b03      	ldr	r3, [pc, #12]	; (90001950 <_GLOBAL__sub_I_FrameBufferAddress+0x10>)
90001942:	2200      	movs	r2, #0
90001944:	2102      	movs	r1, #2
90001946:	60da      	str	r2, [r3, #12]
90001948:	6019      	str	r1, [r3, #0]
9000194a:	e9c3 2201 	strd	r2, r2, [r3, #4]
}
9000194e:	4770      	bx	lr
90001950:	24005bb4 	.word	0x24005bb4

90001954 <_ZN8touchgfx10OSWrappers10initializeEv>:
 * Initialize frame buffer semaphore and queue/mutex for VSYNC signal.
 */
void OSWrappers::initialize()
{
    // Create a queue of length 1
    frame_buffer_sem = osSemaphoreNew(1, 1, NULL); // Binary semaphore
90001954:	2101      	movs	r1, #1
90001956:	2200      	movs	r2, #0
{
90001958:	b508      	push	{r3, lr}
    frame_buffer_sem = osSemaphoreNew(1, 1, NULL); // Binary semaphore
9000195a:	4608      	mov	r0, r1
9000195c:	f00d fa24 	bl	9000eda8 <osSemaphoreNew>
90001960:	4b0b      	ldr	r3, [pc, #44]	; (90001990 <_ZN8touchgfx10OSWrappers10initializeEv+0x3c>)
90001962:	6018      	str	r0, [r3, #0]
    assert((frame_buffer_sem != NULL) && "Creation of framebuffer semaphore failed");
90001964:	b140      	cbz	r0, 90001978 <_ZN8touchgfx10OSWrappers10initializeEv+0x24>

    // Create a queue of length 1
    vsync_queue = osMessageQueueNew(1, 4, NULL);
90001966:	2200      	movs	r2, #0
90001968:	2104      	movs	r1, #4
9000196a:	2001      	movs	r0, #1
9000196c:	f00d facc 	bl	9000ef08 <osMessageQueueNew>
90001970:	4b08      	ldr	r3, [pc, #32]	; (90001994 <_ZN8touchgfx10OSWrappers10initializeEv+0x40>)
90001972:	6018      	str	r0, [r3, #0]
    assert((vsync_queue != NULL) && "Creation of vsync message queue failed");
90001974:	b130      	cbz	r0, 90001984 <_ZN8touchgfx10OSWrappers10initializeEv+0x30>
}
90001976:	bd08      	pop	{r3, pc}
    assert((frame_buffer_sem != NULL) && "Creation of framebuffer semaphore failed");
90001978:	4b07      	ldr	r3, [pc, #28]	; (90001998 <_ZN8touchgfx10OSWrappers10initializeEv+0x44>)
9000197a:	2128      	movs	r1, #40	; 0x28
9000197c:	4a07      	ldr	r2, [pc, #28]	; (9000199c <_ZN8touchgfx10OSWrappers10initializeEv+0x48>)
9000197e:	4808      	ldr	r0, [pc, #32]	; (900019a0 <_ZN8touchgfx10OSWrappers10initializeEv+0x4c>)
90001980:	f025 fe68 	bl	90027654 <__assert_func>
    assert((vsync_queue != NULL) && "Creation of vsync message queue failed");
90001984:	4b07      	ldr	r3, [pc, #28]	; (900019a4 <_ZN8touchgfx10OSWrappers10initializeEv+0x50>)
90001986:	212c      	movs	r1, #44	; 0x2c
90001988:	4a04      	ldr	r2, [pc, #16]	; (9000199c <_ZN8touchgfx10OSWrappers10initializeEv+0x48>)
9000198a:	4805      	ldr	r0, [pc, #20]	; (900019a0 <_ZN8touchgfx10OSWrappers10initializeEv+0x4c>)
9000198c:	f025 fe62 	bl	90027654 <__assert_func>
90001990:	24005be0 	.word	0x24005be0
90001994:	24005bdc 	.word	0x24005bdc
90001998:	90028d34 	.word	0x90028d34
9000199c:	90028d80 	.word	0x90028d80
900019a0:	90028db0 	.word	0x90028db0
900019a4:	90028e04 	.word	0x90028e04

900019a8 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>:
/*
 * Take the frame buffer semaphore. Blocks until semaphore is available.
 */
void OSWrappers::takeFrameBufferSemaphore()
{
    osSemaphoreAcquire(frame_buffer_sem, osWaitForever);
900019a8:	4b02      	ldr	r3, [pc, #8]	; (900019b4 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0xc>)
900019aa:	f04f 31ff 	mov.w	r1, #4294967295
900019ae:	6818      	ldr	r0, [r3, #0]
900019b0:	f00d ba4a 	b.w	9000ee48 <osSemaphoreAcquire>
900019b4:	24005be0 	.word	0x24005be0

900019b8 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>:
/*
 * Release the frame buffer semaphore.
 */
void OSWrappers::giveFrameBufferSemaphore()
{
    osSemaphoreRelease(frame_buffer_sem);
900019b8:	4b01      	ldr	r3, [pc, #4]	; (900019c0 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x8>)
900019ba:	6818      	ldr	r0, [r3, #0]
900019bc:	f00d ba78 	b.w	9000eeb0 <osSemaphoreRelease>
900019c0:	24005be0 	.word	0x24005be0

900019c4 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>:
 * Note must return immediately! This function does not care who has the taken the semaphore,
 * it only serves to make sure that the semaphore is taken by someone.
 */
void OSWrappers::tryTakeFrameBufferSemaphore()
{
    osSemaphoreAcquire(frame_buffer_sem, 0);
900019c4:	4b02      	ldr	r3, [pc, #8]	; (900019d0 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0xc>)
900019c6:	2100      	movs	r1, #0
900019c8:	6818      	ldr	r0, [r3, #0]
900019ca:	f00d ba3d 	b.w	9000ee48 <osSemaphoreAcquire>
900019ce:	bf00      	nop
900019d0:	24005be0 	.word	0x24005be0

900019d4 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>:
900019d4:	4b01      	ldr	r3, [pc, #4]	; (900019dc <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x8>)
900019d6:	6818      	ldr	r0, [r3, #0]
900019d8:	f00d ba6a 	b.w	9000eeb0 <osSemaphoreRelease>
900019dc:	24005be0 	.word	0x24005be0

900019e0 <_ZN8touchgfx10OSWrappers11signalVSyncEv>:
 * Note This function is called from an ISR, and should (depending on OS) trigger a
 * scheduling.
 */
void OSWrappers::signalVSync()
{
    osMessageQueuePut(vsync_queue, &dummy, 0, 0);
900019e0:	4803      	ldr	r0, [pc, #12]	; (900019f0 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x10>)
900019e2:	2300      	movs	r3, #0
900019e4:	4903      	ldr	r1, [pc, #12]	; (900019f4 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x14>)
900019e6:	461a      	mov	r2, r3
900019e8:	6800      	ldr	r0, [r0, #0]
900019ea:	f00d bacb 	b.w	9000ef84 <osMessageQueuePut>
900019ee:	bf00      	nop
900019f0:	24005bdc 	.word	0x24005bdc
900019f4:	2400001c 	.word	0x2400001c

900019f8 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>:
 *
 * Note This function must first clear the mutex/queue and then wait for the next one to
 * occur.
 */
void OSWrappers::waitForVSync()
{
900019f8:	b510      	push	{r4, lr}
    uint32_t dummyGet;
    // First make sure the queue is empty, by trying to remove an element with 0 timeout.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, 0);
900019fa:	2300      	movs	r3, #0
{
900019fc:	b082      	sub	sp, #8
    osMessageQueueGet(vsync_queue, &dummyGet, 0, 0);
900019fe:	4c07      	ldr	r4, [pc, #28]	; (90001a1c <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x24>)
90001a00:	461a      	mov	r2, r3
90001a02:	a901      	add	r1, sp, #4
90001a04:	6820      	ldr	r0, [r4, #0]
90001a06:	f00d faff 	bl	9000f008 <osMessageQueueGet>

    // Then, wait for next VSYNC to occur.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, osWaitForever);
90001a0a:	f04f 33ff 	mov.w	r3, #4294967295
90001a0e:	2200      	movs	r2, #0
90001a10:	a901      	add	r1, sp, #4
90001a12:	6820      	ldr	r0, [r4, #0]
90001a14:	f00d faf8 	bl	9000f008 <osMessageQueueGet>
}
90001a18:	b002      	add	sp, #8
90001a1a:	bd10      	pop	{r4, pc}
90001a1c:	24005bdc 	.word	0x24005bdc

90001a20 <_ZN8touchgfx13DMA_Interface5flushEv>:
        waitForFrameBufferSemaphore();
90001a20:	6803      	ldr	r3, [r0, #0]
90001a22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
90001a24:	4718      	bx	r3
90001a26:	bf00      	nop

90001a28 <_ZN8STM32DMA10getDMATypeEv>:
     * @return a DMAType value of the concrete DMA_Interface implementation.
     */
    virtual touchgfx::DMAType getDMAType(void)
    {
        return touchgfx::DMA_TYPE_CHROMART;
    }
90001a28:	2001      	movs	r0, #1
90001a2a:	4770      	bx	lr

90001a2c <_ZN8STM32DMAD1Ev>:
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0])), started_by_external_job(false), mutexIsRunning(0)
{
    mutexIsRunning = MUTEX_CREATE();
}

STM32DMA::~STM32DMA()
90001a2c:	4905      	ldr	r1, [pc, #20]	; (90001a44 <_ZN8STM32DMAD1Ev+0x18>)
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
90001a2e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
90001a32:	4b05      	ldr	r3, [pc, #20]	; (90001a48 <_ZN8STM32DMAD1Ev+0x1c>)
90001a34:	6001      	str	r1, [r0, #0]
90001a36:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
90001a3a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
90001a3e:	f3bf 8f6f 	isb	sy
{
    /* Disable DMA2D global Interrupt */
    NVIC_DisableIRQ(DMA2D_IRQn);
}
90001a42:	4770      	bx	lr
90001a44:	90028fb0 	.word	0x90028fb0
90001a48:	e000e100 	.word	0xe000e100

90001a4c <_ZN8STM32DMA10initializeEv>:

void STM32DMA::initialize()
{
    /* Ensure DMA2D Clock is enabled */
    __HAL_RCC_DMA2D_CLK_ENABLE();
90001a4c:	4b0f      	ldr	r3, [pc, #60]	; (90001a8c <_ZN8STM32DMA10initializeEv+0x40>)
{
90001a4e:	b082      	sub	sp, #8
    __HAL_RCC_DMA2D_FORCE_RESET();
    __HAL_RCC_DMA2D_RELEASE_RESET();

    /* Add transfer complete callback function */
    hdma2d.XferCpltCallback = DMA2D_XferCpltCallback;
90001a50:	490f      	ldr	r1, [pc, #60]	; (90001a90 <_ZN8STM32DMA10initializeEv+0x44>)
    __HAL_RCC_DMA2D_CLK_ENABLE();
90001a52:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
    hdma2d.XferCpltCallback = DMA2D_XferCpltCallback;
90001a56:	480f      	ldr	r0, [pc, #60]	; (90001a94 <_ZN8STM32DMA10initializeEv+0x48>)
    __HAL_RCC_DMA2D_CLK_ENABLE();
90001a58:	f042 0210 	orr.w	r2, r2, #16
    hdma2d.XferCpltCallback = DMA2D_XferCpltCallback;
90001a5c:	6208      	str	r0, [r1, #32]
    __HAL_RCC_DMA2D_CLK_ENABLE();
90001a5e:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
90001a62:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
90001a66:	f002 0210 	and.w	r2, r2, #16
90001a6a:	9201      	str	r2, [sp, #4]
90001a6c:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_DMA2D_FORCE_RESET();
90001a6e:	6fda      	ldr	r2, [r3, #124]	; 0x7c
90001a70:	f042 0210 	orr.w	r2, r2, #16
90001a74:	67da      	str	r2, [r3, #124]	; 0x7c
    __HAL_RCC_DMA2D_RELEASE_RESET();
90001a76:	6fda      	ldr	r2, [r3, #124]	; 0x7c
90001a78:	f022 0210 	bic.w	r2, r2, #16
90001a7c:	67da      	str	r2, [r3, #124]	; 0x7c
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
90001a7e:	4b06      	ldr	r3, [pc, #24]	; (90001a98 <_ZN8STM32DMA10initializeEv+0x4c>)
90001a80:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
90001a84:	609a      	str	r2, [r3, #8]

    /* Enable DMA2D global Interrupt */
    NVIC_EnableIRQ(DMA2D_IRQn);
}
90001a86:	b002      	add	sp, #8
90001a88:	4770      	bx	lr
90001a8a:	bf00      	nop
90001a8c:	58024400 	.word	0x58024400
90001a90:	2400ce1c 	.word	0x2400ce1c
90001a94:	90001e45 	.word	0x90001e45
90001a98:	e000e100 	.word	0xe000e100

90001a9c <_ZN8STM32DMA11getBlitCapsEv>:
                                       | BLIT_OP_COPY_WITH_ALPHA
                                       | BLIT_OP_COPY_ARGB8888
                                       | BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                                       | BLIT_OP_COPY_A4
                                       | BLIT_OP_COPY_A8);
}
90001a9c:	f240 30ef 	movw	r0, #1007	; 0x3ef
90001aa0:	4770      	bx	lr
90001aa2:	bf00      	nop

90001aa4 <_ZN8STM32DMAD0Ev>:
STM32DMA::~STM32DMA()
90001aa4:	4909      	ldr	r1, [pc, #36]	; (90001acc <_ZN8STM32DMAD0Ev+0x28>)
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
90001aa6:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
90001aaa:	4b09      	ldr	r3, [pc, #36]	; (90001ad0 <_ZN8STM32DMAD0Ev+0x2c>)
90001aac:	b510      	push	{r4, lr}
90001aae:	6001      	str	r1, [r0, #0]
90001ab0:	4604      	mov	r4, r0
90001ab2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
90001ab6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
90001aba:	f3bf 8f6f 	isb	sy
}
90001abe:	f640 51a8 	movw	r1, #3496	; 0xda8
90001ac2:	f025 fd98 	bl	900275f6 <_ZdlPvj>
90001ac6:	4620      	mov	r0, r4
90001ac8:	bd10      	pop	{r4, pc}
90001aca:	bf00      	nop
90001acc:	90028fb0 	.word	0x90028fb0
90001ad0:	e000e100 	.word	0xe000e100

90001ad4 <_ZN8STM32DMA5startEv>:
                externalJobExecute();
            }
        }
    }

    virtual void start()
90001ad4:	b510      	push	{r4, lr}
90001ad6:	4604      	mov	r4, r0
    {
        MUTEX_LOCK(mutexIsRunning);
90001ad8:	f04f 31ff 	mov.w	r1, #4294967295
90001adc:	f8d0 0da4 	ldr.w	r0, [r0, #3492]	; 0xda4
90001ae0:	f00d f91c 	bl	9000ed1c <osMutexAcquire>
        if (!queue.isEmpty() && isAllowed && !isRunning)
90001ae4:	6860      	ldr	r0, [r4, #4]
90001ae6:	6803      	ldr	r3, [r0, #0]
90001ae8:	681b      	ldr	r3, [r3, #0]
90001aea:	4798      	blx	r3
90001aec:	b978      	cbnz	r0, 90001b0e <_ZN8STM32DMA5startEv+0x3a>
90001aee:	7a63      	ldrb	r3, [r4, #9]
90001af0:	b16b      	cbz	r3, 90001b0e <_ZN8STM32DMA5startEv+0x3a>
90001af2:	7a23      	ldrb	r3, [r4, #8]
90001af4:	b92b      	cbnz	r3, 90001b02 <_ZN8STM32DMA5startEv+0x2e>
        {
            started_by_external_job = false;
            execute();
90001af6:	6822      	ldr	r2, [r4, #0]
90001af8:	4620      	mov	r0, r4
            started_by_external_job = false;
90001afa:	f884 3da0 	strb.w	r3, [r4, #3488]	; 0xda0
            execute();
90001afe:	6a53      	ldr	r3, [r2, #36]	; 0x24
90001b00:	4798      	blx	r3
        else if(!external_queue.is_empty() && !isRunning)
        {
            started_by_external_job = true;
            externalJobExecute();
        }
        MUTEX_UNLOCK(mutexIsRunning);
90001b02:	f8d4 0da4 	ldr.w	r0, [r4, #3492]	; 0xda4
    }
90001b06:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        MUTEX_UNLOCK(mutexIsRunning);
90001b0a:	f00d b92b 	b.w	9000ed64 <osMutexRelease>
      return count_ == 0;
90001b0e:	4b0b      	ldr	r3, [pc, #44]	; (90001b3c <_ZN8STM32DMA5startEv+0x68>)
        else if(!external_queue.is_empty() && !isRunning)
90001b10:	68da      	ldr	r2, [r3, #12]
90001b12:	2a00      	cmp	r2, #0
90001b14:	d0f5      	beq.n	90001b02 <_ZN8STM32DMA5startEv+0x2e>
90001b16:	7a22      	ldrb	r2, [r4, #8]
90001b18:	2a00      	cmp	r2, #0
90001b1a:	d1f2      	bne.n	90001b02 <_ZN8STM32DMA5startEv+0x2e>
      return buffer_[head_];
90001b1c:	6858      	ldr	r0, [r3, #4]
            started_by_external_job = true;
90001b1e:	2201      	movs	r2, #1
      return buffer_[head_];
90001b20:	3002      	adds	r0, #2
            started_by_external_job = true;
90001b22:	f884 2da0 	strb.w	r2, [r4, #3488]	; 0xda0
     *
     * @param None
     */
    void externalJobExecute()
    {
        isRunning = true;
90001b26:	7222      	strb	r2, [r4, #8]
        External_DMA2D_JobTypeDef& job = external_queue.front();
        DMA2D_CopyBuffer(job);
90001b28:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
90001b2c:	f7ff fe9e 	bl	9000186c <DMA2D_CopyBuffer>
        MUTEX_UNLOCK(mutexIsRunning);
90001b30:	f8d4 0da4 	ldr.w	r0, [r4, #3492]	; 0xda4
    }
90001b34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        MUTEX_UNLOCK(mutexIsRunning);
90001b38:	f00d b914 	b.w	9000ed64 <osMutexRelease>
90001b3c:	24005bb4 	.word	0x24005bb4

90001b40 <_ZN8STM32DMA18signalDMAInterruptEv>:
    virtual void signalDMAInterrupt()
90001b40:	b538      	push	{r3, r4, r5, lr}
        if(started_by_external_job)
90001b42:	f890 3da0 	ldrb.w	r3, [r0, #3488]	; 0xda0
    virtual void signalDMAInterrupt()
90001b46:	4604      	mov	r4, r0
        if(started_by_external_job)
90001b48:	b943      	cbnz	r3, 90001b5c <_ZN8STM32DMA18signalDMAInterruptEv+0x1c>
            executeCompleted();
90001b4a:	6803      	ldr	r3, [r0, #0]
90001b4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
90001b4e:	4798      	blx	r3
      return count_ == 0;
90001b50:	4b15      	ldr	r3, [pc, #84]	; (90001ba8 <_ZN8STM32DMA18signalDMAInterruptEv+0x68>)
            if(!external_queue.is_empty() && !isRunning)
90001b52:	68da      	ldr	r2, [r3, #12]
90001b54:	b10a      	cbz	r2, 90001b5a <_ZN8STM32DMA18signalDMAInterruptEv+0x1a>
90001b56:	7a22      	ldrb	r2, [r4, #8]
90001b58:	b1d2      	cbz	r2, 90001b90 <_ZN8STM32DMA18signalDMAInterruptEv+0x50>
    }
90001b5a:	bd38      	pop	{r3, r4, r5, pc}
      return count_ == 0;
90001b5c:	4b12      	ldr	r3, [pc, #72]	; (90001ba8 <_ZN8STM32DMA18signalDMAInterruptEv+0x68>)
90001b5e:	68da      	ldr	r2, [r3, #12]
        if(!external_queue.is_empty() && isRunning)
90001b60:	2a00      	cmp	r2, #0
90001b62:	d0fa      	beq.n	90001b5a <_ZN8STM32DMA18signalDMAInterruptEv+0x1a>
90001b64:	7a01      	ldrb	r1, [r0, #8]
90001b66:	2900      	cmp	r1, #0
90001b68:	d0f7      	beq.n	90001b5a <_ZN8STM32DMA18signalDMAInterruptEv+0x1a>
            isRunning = false;
90001b6a:	2100      	movs	r1, #0
      count_--;
90001b6c:	3a01      	subs	r2, #1
      head_ = (head_ + 1) % max_size_;
90001b6e:	e9d3 5000 	ldrd	r5, r0, [r3]
            isRunning = false;
90001b72:	7221      	strb	r1, [r4, #8]
      head_ = (head_ + 1) % max_size_;
90001b74:	1c41      	adds	r1, r0, #1
      count_--;
90001b76:	60da      	str	r2, [r3, #12]
      return buffer_[head_];
90001b78:	3002      	adds	r0, #2
      head_ = (head_ + 1) % max_size_;
90001b7a:	fbb1 f2f5 	udiv	r2, r1, r5
90001b7e:	fb05 1112 	mls	r1, r5, r2, r1
            DMA2D_ExternalJobCompleted(completed_job);
90001b82:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
      head_ = (head_ + 1) % max_size_;
90001b86:	6059      	str	r1, [r3, #4]
    }
90001b88:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
            DMA2D_ExternalJobCompleted(completed_job);
90001b8c:	f7ff beb2 	b.w	900018f4 <DMA2D_ExternalJobCompleted>
      return buffer_[head_];
90001b90:	6858      	ldr	r0, [r3, #4]
                started_by_external_job = true;
90001b92:	2201      	movs	r2, #1
      return buffer_[head_];
90001b94:	3002      	adds	r0, #2
                started_by_external_job = true;
90001b96:	f884 2da0 	strb.w	r2, [r4, #3488]	; 0xda0
        isRunning = true;
90001b9a:	7222      	strb	r2, [r4, #8]
        DMA2D_CopyBuffer(job);
90001b9c:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    }
90001ba0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        DMA2D_CopyBuffer(job);
90001ba4:	f7ff be62 	b.w	9000186c <DMA2D_CopyBuffer>
90001ba8:	24005bb4 	.word	0x24005bb4

90001bac <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE>:
 * void STM32DMA::setupDataFill(const BlitOp& blitOp) handles blit operation of
 * BLIT_OP_FILL
 * BLIT_OP_FILL_WITH_ALPHA
 */
void STM32DMA::setupDataFill(const BlitOp& blitOp)
{
90001bac:	b538      	push	{r3, r4, r5, lr}
    switch (format)
90001bae:	7f8b      	ldrb	r3, [r1, #30]
90001bb0:	2b0a      	cmp	r3, #10
90001bb2:	d83e      	bhi.n	90001c32 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x86>
90001bb4:	e8df f003 	tbb	[pc, r3]
90001bb8:	3d2a063b 	.word	0x3d2a063b
90001bbc:	063d3d3d 	.word	0x063d3d3d
90001bc0:	0606      	.short	0x0606
90001bc2:	06          	.byte	0x06
90001bc3:	00          	.byte	0x00
90001bc4:	2401      	movs	r4, #1

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
90001bc6:	f8b1 c014 	ldrh.w	ip, [r1, #20]
90001bca:	8ac8      	ldrh	r0, [r1, #22]

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));

    /* DMA2D OOR register configuration */
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
90001bcc:	8b4a      	ldrh	r2, [r1, #26]
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
90001bce:	4b1c      	ldr	r3, [pc, #112]	; (90001c40 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x94>)
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
90001bd0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
90001bd4:	eba2 020c 	sub.w	r2, r2, ip
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
90001bd8:	635c      	str	r4, [r3, #52]	; 0x34
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
90001bda:	6458      	str	r0, [r3, #68]	; 0x44
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
90001bdc:	6908      	ldr	r0, [r1, #16]
90001bde:	63d8      	str	r0, [r3, #60]	; 0x3c
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
90001be0:	641a      	str	r2, [r3, #64]	; 0x40

    if (blitOp.operation == BLIT_OP_FILL_WITH_ALPHA)
90001be2:	680d      	ldr	r5, [r1, #0]
90001be4:	2d08      	cmp	r5, #8
90001be6:	d013      	beq.n	90001c10 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x64>
    {
        /* Write DMA2D FGPFCCR register */
        WRITE_REG(DMA2D->FGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_FGPFCCR_AM_Pos));

        /* DMA2D FGOR register configuration */
        WRITE_REG(DMA2D->FGOR, 0);
90001be8:	2200      	movs	r2, #0
        WRITE_REG(DMA2D->FGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_FGPFCCR_AM_Pos));
90001bea:	61dc      	str	r4, [r3, #28]

        /* Set color */
        WRITE_REG(DMA2D->OCOLR, ((blitOp.color >> 8) & 0xF800) | ((blitOp.color >> 5) & 0x07E0) | ((blitOp.color >> 3) & 0x001F));

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
90001bec:	4c15      	ldr	r4, [pc, #84]	; (90001c44 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x98>)
        WRITE_REG(DMA2D->FGOR, 0);
90001bee:	611a      	str	r2, [r3, #16]
     *
     * @return The result of the operation.
     */
    operator uint32_t() const
    {
        return color;
90001bf0:	68c9      	ldr	r1, [r1, #12]
        WRITE_REG(DMA2D->OCOLR, ((blitOp.color >> 8) & 0xF800) | ((blitOp.color >> 5) & 0x07E0) | ((blitOp.color >> 3) & 0x001F));
90001bf2:	0a0a      	lsrs	r2, r1, #8
90001bf4:	0948      	lsrs	r0, r1, #5
90001bf6:	f3c1 01c4 	ubfx	r1, r1, #3, #5
90001bfa:	f402 4278 	and.w	r2, r2, #63488	; 0xf800
90001bfe:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
90001c02:	4302      	orrs	r2, r0
90001c04:	430a      	orrs	r2, r1
90001c06:	639a      	str	r2, [r3, #56]	; 0x38
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
90001c08:	601c      	str	r4, [r3, #0]
    }
}
90001c0a:	bd38      	pop	{r3, r4, r5, pc}
        dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
90001c0c:	2400      	movs	r4, #0
90001c0e:	e7da      	b.n	90001bc6 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1a>
        WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
90001c10:	619a      	str	r2, [r3, #24]
        WRITE_REG(DMA2D->FGOR, blitOp.dstLoopStride - blitOp.nSteps);
90001c12:	611a      	str	r2, [r3, #16]
        WRITE_REG(DMA2D->BGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
90001c14:	625c      	str	r4, [r3, #36]	; 0x24
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | ((blitOp.alpha << 24) & DMA2D_FGPFCCR_ALPHA));
90001c16:	4a0c      	ldr	r2, [pc, #48]	; (90001c48 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x9c>)
90001c18:	7f0c      	ldrb	r4, [r1, #28]
90001c1a:	ea42 6204 	orr.w	r2, r2, r4, lsl #24
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_M2M_BLEND));
90001c1e:	4c0b      	ldr	r4, [pc, #44]	; (90001c4c <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xa0>)
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | ((blitOp.alpha << 24) & DMA2D_FGPFCCR_ALPHA));
90001c20:	61da      	str	r2, [r3, #28]
90001c22:	68ca      	ldr	r2, [r1, #12]
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
90001c24:	621a      	str	r2, [r3, #32]
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
90001c26:	6158      	str	r0, [r3, #20]
        WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
90001c28:	60d8      	str	r0, [r3, #12]
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_M2M_BLEND));
90001c2a:	601c      	str	r4, [r3, #0]
}
90001c2c:	bd38      	pop	{r3, r4, r5, pc}
        dma2dColorMode = DMA2D_OUTPUT_RGB565;
90001c2e:	2402      	movs	r4, #2
90001c30:	e7c9      	b.n	90001bc6 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1a>
        assert(0 && "Unsupported Format!");
90001c32:	4b07      	ldr	r3, [pc, #28]	; (90001c50 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xa4>)
90001c34:	2188      	movs	r1, #136	; 0x88
90001c36:	4a07      	ldr	r2, [pc, #28]	; (90001c54 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xa8>)
90001c38:	4807      	ldr	r0, [pc, #28]	; (90001c58 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xac>)
90001c3a:	f025 fd0b 	bl	90027654 <__assert_func>
90001c3e:	bf00      	nop
90001c40:	52001000 	.word	0x52001000
90001c44:	00030201 	.word	0x00030201
90001c48:	00010009 	.word	0x00010009
90001c4c:	00020201 	.word	0x00020201
90001c50:	90028e48 	.word	0x90028e48
90001c54:	90028e64 	.word	0x90028e64
90001c58:	90028eb0 	.word	0x90028eb0

90001c5c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE>:
{
90001c5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
90001c5e:	f891 e01d 	ldrb.w	lr, [r1, #29]
    switch (format)
90001c62:	f1be 0f0b 	cmp.w	lr, #11
90001c66:	f200 80c1 	bhi.w	90001dec <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x190>
90001c6a:	e8df f01e 	tbh	[pc, lr, lsl #1]
90001c6e:	0063      	.short	0x0063
90001c70:	004c0065 	.word	0x004c0065
90001c74:	00bf00bf 	.word	0x00bf00bf
90001c78:	00bf00bf 	.word	0x00bf00bf
90001c7c:	000c000c 	.word	0x000c000c
90001c80:	000c000c 	.word	0x000c000c
90001c84:	000c      	.short	0x000c
        dma2dColorMode = DMA2D_INPUT_L8;
90001c86:	2505      	movs	r5, #5
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
90001c88:	f891 c01e 	ldrb.w	ip, [r1, #30]
    switch (format)
90001c8c:	f1bc 0f0b 	cmp.w	ip, #11
90001c90:	f200 80ac 	bhi.w	90001dec <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x190>
90001c94:	e8df f00c 	tbb	[pc, ip]
90001c98:	aa0e4b52 	.word	0xaa0e4b52
90001c9c:	06aaaaaa 	.word	0x06aaaaaa
90001ca0:	06060606 	.word	0x06060606
    switch (format)
90001ca4:	f1ac 0307 	sub.w	r3, ip, #7
90001ca8:	2b03      	cmp	r3, #3
90001caa:	f200 80a5 	bhi.w	90001df8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x19c>
90001cae:	2605      	movs	r6, #5
90001cb0:	2701      	movs	r7, #1
90001cb2:	e001      	b.n	90001cb8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x5c>
        dma2dColorMode = DMA2D_INPUT_ARGB8888;
90001cb4:	2600      	movs	r6, #0
        dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
90001cb6:	4637      	mov	r7, r6
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
90001cb8:	8a8b      	ldrh	r3, [r1, #20]
90001cba:	8b4a      	ldrh	r2, [r1, #26]
    WRITE_REG(DMA2D->FGOR, blitOp.srcLoopStride - blitOp.nSteps);
90001cbc:	8b0c      	ldrh	r4, [r1, #24]
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
90001cbe:	8ac8      	ldrh	r0, [r1, #22]
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
90001cc0:	1ad2      	subs	r2, r2, r3
    WRITE_REG(DMA2D->FGOR, blitOp.srcLoopStride - blitOp.nSteps);
90001cc2:	1ae4      	subs	r4, r4, r3
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
90001cc4:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
90001cc8:	4b52      	ldr	r3, [pc, #328]	; (90001e14 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1b8>)
90001cca:	641a      	str	r2, [r3, #64]	; 0x40
    WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
90001ccc:	619a      	str	r2, [r3, #24]
    WRITE_REG(DMA2D->FGOR, blitOp.srcLoopStride - blitOp.nSteps);
90001cce:	611c      	str	r4, [r3, #16]
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pSrc));
90001cd0:	684a      	ldr	r2, [r1, #4]
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
90001cd2:	635f      	str	r7, [r3, #52]	; 0x34
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
90001cd4:	6458      	str	r0, [r3, #68]	; 0x44
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
90001cd6:	6908      	ldr	r0, [r1, #16]
90001cd8:	63d8      	str	r0, [r3, #60]	; 0x3c
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pSrc));
90001cda:	60da      	str	r2, [r3, #12]
    switch (blitOp.operation)
90001cdc:	680a      	ldr	r2, [r1, #0]
90001cde:	2a80      	cmp	r2, #128	; 0x80
90001ce0:	d03b      	beq.n	90001d5a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xfe>
90001ce2:	d812      	bhi.n	90001d0a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xae>
90001ce4:	2a20      	cmp	r2, #32
90001ce6:	d02c      	beq.n	90001d42 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xe6>
90001ce8:	2a40      	cmp	r2, #64	; 0x40
90001cea:	d02a      	beq.n	90001d42 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xe6>
90001cec:	2a04      	cmp	r2, #4
90001cee:	d169      	bne.n	90001dc4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x168>
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
90001cf0:	7f0a      	ldrb	r2, [r1, #28]
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
90001cf2:	4949      	ldr	r1, [pc, #292]	; (90001e18 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1bc>)
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
90001cf4:	ea45 6202 	orr.w	r2, r5, r2, lsl #24
90001cf8:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
90001cfc:	61da      	str	r2, [r3, #28]
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
90001cfe:	625e      	str	r6, [r3, #36]	; 0x24
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
90001d00:	6158      	str	r0, [r3, #20]
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
90001d02:	6019      	str	r1, [r3, #0]
}
90001d04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        dma2dColorMode = DMA2D_INPUT_ARGB8888;
90001d06:	2500      	movs	r5, #0
90001d08:	e7be      	b.n	90001c88 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2c>
    switch (blitOp.operation)
90001d0a:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
90001d0e:	d067      	beq.n	90001de0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x184>
90001d10:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
90001d14:	d156      	bne.n	90001dc4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x168>
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
90001d16:	7f0c      	ldrb	r4, [r1, #28]
90001d18:	4a40      	ldr	r2, [pc, #256]	; (90001e1c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1c0>)
90001d1a:	ea42 6204 	orr.w	r2, r2, r4, lsl #24
90001d1e:	61da      	str	r2, [r3, #28]
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
90001d20:	4a3d      	ldr	r2, [pc, #244]	; (90001e18 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1bc>)
90001d22:	68c9      	ldr	r1, [r1, #12]
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
90001d24:	6219      	str	r1, [r3, #32]
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
90001d26:	625e      	str	r6, [r3, #36]	; 0x24
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
90001d28:	6158      	str	r0, [r3, #20]
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
90001d2a:	601a      	str	r2, [r3, #0]
}
90001d2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    switch (format)
90001d2e:	2601      	movs	r6, #1
90001d30:	4637      	mov	r7, r6
90001d32:	e7c1      	b.n	90001cb8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x5c>
90001d34:	2502      	movs	r5, #2
90001d36:	e7a7      	b.n	90001c88 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2c>
        dma2dColorMode = DMA2D_INPUT_RGB888;
90001d38:	2501      	movs	r5, #1
90001d3a:	e7a5      	b.n	90001c88 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2c>
        dma2dColorMode = DMA2D_INPUT_RGB565;
90001d3c:	2602      	movs	r6, #2
        dma2dColorMode = DMA2D_OUTPUT_RGB565;
90001d3e:	4637      	mov	r7, r6
90001d40:	e7ba      	b.n	90001cb8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x5c>
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
90001d42:	7f0b      	ldrb	r3, [r1, #28]
90001d44:	4a33      	ldr	r2, [pc, #204]	; (90001e14 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1b8>)
90001d46:	ea45 6303 	orr.w	r3, r5, r3, lsl #24
90001d4a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
90001d4e:	61d3      	str	r3, [r2, #28]
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
90001d50:	4b31      	ldr	r3, [pc, #196]	; (90001e18 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1bc>)
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
90001d52:	6256      	str	r6, [r2, #36]	; 0x24
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
90001d54:	6150      	str	r0, [r2, #20]
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
90001d56:	6013      	str	r3, [r2, #0]
}
90001d58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            const clutData_t* const palette = reinterpret_cast<const clutData_t*>(blitOp.pClut);
90001d5a:	688a      	ldr	r2, [r1, #8]
            WRITE_REG(DMA2D->FGCMAR, reinterpret_cast<uint32_t>(&palette->data));
90001d5c:	1d14      	adds	r4, r2, #4
90001d5e:	62dc      	str	r4, [r3, #44]	; 0x2c
            WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
90001d60:	7f0c      	ldrb	r4, [r1, #28]
            switch ((Bitmap::ClutFormat)palette->format)
90001d62:	7811      	ldrb	r1, [r2, #0]
            WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
90001d64:	ea45 6504 	orr.w	r5, r5, r4, lsl #24
90001d68:	f445 3500 	orr.w	r5, r5, #131072	; 0x20000
90001d6c:	61dd      	str	r5, [r3, #28]
            WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
90001d6e:	625e      	str	r6, [r3, #36]	; 0x24
            WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
90001d70:	6158      	str	r0, [r3, #20]
            switch ((Bitmap::ClutFormat)palette->format)
90001d72:	b9b1      	cbnz	r1, 90001da2 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x146>
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_ARGB8888 << DMA2D_FGPFCCR_CCM_Pos)));
90001d74:	8851      	ldrh	r1, [r2, #2]
            bool blend = true;
90001d76:	2401      	movs	r4, #1
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_ARGB8888 << DMA2D_FGPFCCR_CCM_Pos)));
90001d78:	69d8      	ldr	r0, [r3, #28]
90001d7a:	4a29      	ldr	r2, [pc, #164]	; (90001e20 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1c4>)
90001d7c:	3901      	subs	r1, #1
90001d7e:	4002      	ands	r2, r0
90001d80:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
90001d84:	61da      	str	r2, [r3, #28]
            SET_BIT(DMA2D->FGPFCCR, DMA2D_FGPFCCR_START);
90001d86:	4a23      	ldr	r2, [pc, #140]	; (90001e14 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1b8>)
90001d88:	69d3      	ldr	r3, [r2, #28]
90001d8a:	f043 0320 	orr.w	r3, r3, #32
90001d8e:	61d3      	str	r3, [r2, #28]
            while ((READ_REG(DMA2D->FGPFCCR) & DMA2D_FGPFCCR_START) != 0U)
90001d90:	69d3      	ldr	r3, [r2, #28]
90001d92:	069b      	lsls	r3, r3, #26
90001d94:	d4fc      	bmi.n	90001d90 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x134>
            DMA2D->IFCR = (DMA2D_FLAG_CTC);
90001d96:	2310      	movs	r3, #16
90001d98:	6093      	str	r3, [r2, #8]
            if(blend)
90001d9a:	b324      	cbz	r4, 90001de6 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x18a>
                WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
90001d9c:	4b1e      	ldr	r3, [pc, #120]	; (90001e18 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1bc>)
90001d9e:	6013      	str	r3, [r2, #0]
}
90001da0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
90001da2:	2901      	cmp	r1, #1
90001da4:	d12e      	bne.n	90001e04 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1a8>
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
90001da6:	8851      	ldrh	r1, [r2, #2]
                if(blitOp.alpha == 255)
90001da8:	3cff      	subs	r4, #255	; 0xff
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
90001daa:	69d8      	ldr	r0, [r3, #28]
90001dac:	4a1c      	ldr	r2, [pc, #112]	; (90001e20 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1c4>)
90001dae:	f101 31ff 	add.w	r1, r1, #4294967295
                if(blitOp.alpha == 255)
90001db2:	bf18      	it	ne
90001db4:	2401      	movne	r4, #1
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
90001db6:	4002      	ands	r2, r0
90001db8:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
90001dbc:	f042 0210 	orr.w	r2, r2, #16
90001dc0:	61da      	str	r2, [r3, #28]
                break;
90001dc2:	e7e0      	b.n	90001d86 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x12a>
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
90001dc4:	7f0a      	ldrb	r2, [r1, #28]
        if (blitOp.srcFormat != blitOp.dstFormat)
90001dc6:	45e6      	cmp	lr, ip
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
90001dc8:	4b12      	ldr	r3, [pc, #72]	; (90001e14 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1b8>)
90001dca:	ea45 6502 	orr.w	r5, r5, r2, lsl #24
            WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
90001dce:	bf14      	ite	ne
90001dd0:	4a14      	ldrne	r2, [pc, #80]	; (90001e24 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1c8>)
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
90001dd2:	f240 2201 	movweq	r2, #513	; 0x201
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
90001dd6:	f445 3500 	orr.w	r5, r5, #131072	; 0x20000
90001dda:	61dd      	str	r5, [r3, #28]
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
90001ddc:	601a      	str	r2, [r3, #0]
}
90001dde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A4 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
90001de0:	7f0c      	ldrb	r4, [r1, #28]
90001de2:	4a11      	ldr	r2, [pc, #68]	; (90001e28 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1cc>)
90001de4:	e799      	b.n	90001d1a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xbe>
                WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
90001de6:	4b0f      	ldr	r3, [pc, #60]	; (90001e24 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1c8>)
90001de8:	6013      	str	r3, [r2, #0]
}
90001dea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        assert(0 && "Unsupported Format!");
90001dec:	4b0f      	ldr	r3, [pc, #60]	; (90001e2c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1d0>)
90001dee:	2167      	movs	r1, #103	; 0x67
90001df0:	4a0f      	ldr	r2, [pc, #60]	; (90001e30 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1d4>)
90001df2:	4810      	ldr	r0, [pc, #64]	; (90001e34 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1d8>)
90001df4:	f025 fc2e 	bl	90027654 <__assert_func>
        assert(0 && "Unsupported Format!");
90001df8:	4b0c      	ldr	r3, [pc, #48]	; (90001e2c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1d0>)
90001dfa:	2188      	movs	r1, #136	; 0x88
90001dfc:	4a0e      	ldr	r2, [pc, #56]	; (90001e38 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1dc>)
90001dfe:	480d      	ldr	r0, [pc, #52]	; (90001e34 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1d8>)
90001e00:	f025 fc28 	bl	90027654 <__assert_func>
                assert(0 && "Unsupported format");
90001e04:	4b0d      	ldr	r3, [pc, #52]	; (90001e3c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1e0>)
90001e06:	f44f 7189 	mov.w	r1, #274	; 0x112
90001e0a:	4a0d      	ldr	r2, [pc, #52]	; (90001e40 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1e4>)
90001e0c:	4809      	ldr	r0, [pc, #36]	; (90001e34 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1d8>)
90001e0e:	f025 fc21 	bl	90027654 <__assert_func>
90001e12:	bf00      	nop
90001e14:	52001000 	.word	0x52001000
90001e18:	00020201 	.word	0x00020201
90001e1c:	00020009 	.word	0x00020009
90001e20:	ffff00ef 	.word	0xffff00ef
90001e24:	00010201 	.word	0x00010201
90001e28:	0002000a 	.word	0x0002000a
90001e2c:	90028e48 	.word	0x90028e48
90001e30:	90028f00 	.word	0x90028f00
90001e34:	90028eb0 	.word	0x90028eb0
90001e38:	90028e64 	.word	0x90028e64
90001e3c:	90028f4c 	.word	0x90028f4c
90001e40:	90028f68 	.word	0x90028f68

90001e44 <DMA2D_XferCpltCallback>:
        dma.signalDMAInterrupt();
90001e44:	4b1f      	ldr	r3, [pc, #124]	; (90001ec4 <DMA2D_XferCpltCallback+0x80>)
90001e46:	4920      	ldr	r1, [pc, #128]	; (90001ec8 <DMA2D_XferCpltCallback+0x84>)
90001e48:	681b      	ldr	r3, [r3, #0]
    {
90001e4a:	b570      	push	{r4, r5, r6, lr}
90001e4c:	685c      	ldr	r4, [r3, #4]
90001e4e:	6823      	ldr	r3, [r4, #0]
90001e50:	695a      	ldr	r2, [r3, #20]
90001e52:	428a      	cmp	r2, r1
90001e54:	d125      	bne.n	90001ea2 <DMA2D_XferCpltCallback+0x5e>
        if(started_by_external_job)
90001e56:	f894 2da0 	ldrb.w	r2, [r4, #3488]	; 0xda0
90001e5a:	b942      	cbnz	r2, 90001e6e <DMA2D_XferCpltCallback+0x2a>
            executeCompleted();
90001e5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
90001e5e:	4620      	mov	r0, r4
90001e60:	4798      	blx	r3
      return count_ == 0;
90001e62:	4b1a      	ldr	r3, [pc, #104]	; (90001ecc <DMA2D_XferCpltCallback+0x88>)
            if(!external_queue.is_empty() && !isRunning)
90001e64:	68da      	ldr	r2, [r3, #12]
90001e66:	b10a      	cbz	r2, 90001e6c <DMA2D_XferCpltCallback+0x28>
90001e68:	7a22      	ldrb	r2, [r4, #8]
90001e6a:	b1f2      	cbz	r2, 90001eaa <DMA2D_XferCpltCallback+0x66>
    }
90001e6c:	bd70      	pop	{r4, r5, r6, pc}
      return count_ == 0;
90001e6e:	4b17      	ldr	r3, [pc, #92]	; (90001ecc <DMA2D_XferCpltCallback+0x88>)
90001e70:	68da      	ldr	r2, [r3, #12]
        if(!external_queue.is_empty() && isRunning)
90001e72:	2a00      	cmp	r2, #0
90001e74:	d0fa      	beq.n	90001e6c <DMA2D_XferCpltCallback+0x28>
90001e76:	7a21      	ldrb	r1, [r4, #8]
90001e78:	2900      	cmp	r1, #0
90001e7a:	d0f7      	beq.n	90001e6c <DMA2D_XferCpltCallback+0x28>
            isRunning = false;
90001e7c:	2100      	movs	r1, #0
      count_--;
90001e7e:	3a01      	subs	r2, #1
      head_ = (head_ + 1) % max_size_;
90001e80:	e9d3 5000 	ldrd	r5, r0, [r3]
            isRunning = false;
90001e84:	7221      	strb	r1, [r4, #8]
      head_ = (head_ + 1) % max_size_;
90001e86:	1c41      	adds	r1, r0, #1
      count_--;
90001e88:	60da      	str	r2, [r3, #12]
      return buffer_[head_];
90001e8a:	3002      	adds	r0, #2
      head_ = (head_ + 1) % max_size_;
90001e8c:	fbb1 f2f5 	udiv	r2, r1, r5
90001e90:	fb05 1112 	mls	r1, r5, r2, r1
            DMA2D_ExternalJobCompleted(completed_job);
90001e94:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
90001e98:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      head_ = (head_ + 1) % max_size_;
90001e9c:	6059      	str	r1, [r3, #4]
            DMA2D_ExternalJobCompleted(completed_job);
90001e9e:	f7ff bd29 	b.w	900018f4 <DMA2D_ExternalJobCompleted>
90001ea2:	4620      	mov	r0, r4
90001ea4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
90001ea8:	4710      	bx	r2
      return buffer_[head_];
90001eaa:	6858      	ldr	r0, [r3, #4]
                started_by_external_job = true;
90001eac:	2201      	movs	r2, #1
      return buffer_[head_];
90001eae:	3002      	adds	r0, #2
                started_by_external_job = true;
90001eb0:	f884 2da0 	strb.w	r2, [r4, #3488]	; 0xda0
        isRunning = true;
90001eb4:	7222      	strb	r2, [r4, #8]
        DMA2D_CopyBuffer(job);
90001eb6:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
90001eba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
90001ebe:	f7ff bcd5 	b.w	9000186c <DMA2D_CopyBuffer>
90001ec2:	bf00      	nop
90001ec4:	240281ec 	.word	0x240281ec
90001ec8:	90001b41 	.word	0x90001b41
90001ecc:	24005bb4 	.word	0x24005bb4

90001ed0 <_ZN8STM32DMAC1Ev>:
STM32DMA::STM32DMA()
90001ed0:	b570      	push	{r4, r5, r6, lr}
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0])), started_by_external_job(false), mutexIsRunning(0)
90001ed2:	4b10      	ldr	r3, [pc, #64]	; (90001f14 <_ZN8STM32DMAC1Ev+0x44>)
STM32DMA::STM32DMA()
90001ed4:	4606      	mov	r6, r0
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0])), started_by_external_job(false), mutexIsRunning(0)
90001ed6:	4604      	mov	r4, r0
     * Constructs a DMA Interface object.
     *
     * @param [in] dmaQueue Reference to the queue of DMA operations.
     */
    DMA_Interface(DMA_Queue& dmaQueue)
        : queue(dmaQueue), isRunning(false), isAllowed(false)
90001ed8:	2500      	movs	r5, #0
90001eda:	300c      	adds	r0, #12
90001edc:	2260      	movs	r2, #96	; 0x60
90001ede:	7235      	strb	r5, [r6, #8]
90001ee0:	7275      	strb	r5, [r6, #9]
90001ee2:	6070      	str	r0, [r6, #4]
90001ee4:	f844 3b20 	str.w	r3, [r4], #32
90001ee8:	4621      	mov	r1, r4
90001eea:	f011 ff77 	bl	90013ddc <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>
90001eee:	4621      	mov	r1, r4
90001ef0:	f506 635a 	add.w	r3, r6, #3488	; 0xda0
        : color(0)
90001ef4:	60cd      	str	r5, [r1, #12]
90001ef6:	3124      	adds	r1, #36	; 0x24
90001ef8:	428b      	cmp	r3, r1
90001efa:	d1fb      	bne.n	90001ef4 <_ZN8STM32DMAC1Ev+0x24>
90001efc:	f886 5da0 	strb.w	r5, [r6, #3488]	; 0xda0
    mutexIsRunning = MUTEX_CREATE();
90001f00:	2000      	movs	r0, #0
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0])), started_by_external_job(false), mutexIsRunning(0)
90001f02:	f8c6 5da4 	str.w	r5, [r6, #3492]	; 0xda4
    mutexIsRunning = MUTEX_CREATE();
90001f06:	f00c fec9 	bl	9000ec9c <osMutexNew>
90001f0a:	4603      	mov	r3, r0
}
90001f0c:	4630      	mov	r0, r6
    mutexIsRunning = MUTEX_CREATE();
90001f0e:	f8c6 3da4 	str.w	r3, [r6, #3492]	; 0xda4
}
90001f12:	bd70      	pop	{r4, r5, r6, pc}
90001f14:	90028fb0 	.word	0x90028fb0

90001f18 <_ZN8touchgfx5paint8tearDownEv>:
* @brief Waits until previous DMA drawing operation has finished
*/
void tearDown()
{
    /* Wait for DMA2D to finish last run */
    while ((READ_REG(DMA2D->CR) & DMA2D_CR_START) != 0U);
90001f18:	4a03      	ldr	r2, [pc, #12]	; (90001f28 <_ZN8touchgfx5paint8tearDownEv+0x10>)
90001f1a:	6813      	ldr	r3, [r2, #0]
90001f1c:	07db      	lsls	r3, r3, #31
90001f1e:	d4fc      	bmi.n	90001f1a <_ZN8touchgfx5paint8tearDownEv+0x2>

    /* Clear transfer flags */
    WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
90001f20:	2323      	movs	r3, #35	; 0x23
90001f22:	6093      	str	r3, [r2, #8]
}
90001f24:	4770      	bx	lr
90001f26:	bf00      	nop
90001f28:	52001000 	.word	0x52001000

90001f2c <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm>:
*
* @brief Renders Canvas Widget chunks using DMA.
* This functions will not generate an interrupt, and will not affect the DMA queue.
*/
void lineFromColor(uint16_t* const ptr, const unsigned count, const uint32_t color, const uint8_t alpha, const uint32_t color565)
{
90001f2c:	b430      	push	{r4, r5}
    /* Wait for DMA2D to finish last run */
    while ((READ_REG(DMA2D->CR) & DMA2D_CR_START) != 0U);
90001f2e:	4c11      	ldr	r4, [pc, #68]	; (90001f74 <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x48>)
90001f30:	6825      	ldr	r5, [r4, #0]
90001f32:	07ed      	lsls	r5, r5, #31
90001f34:	d4fc      	bmi.n	90001f30 <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x4>

    /* Clear transfer flags */
    WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
90001f36:	2523      	movs	r5, #35	; 0x23

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB565);

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
90001f38:	0409      	lsls	r1, r1, #16

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(ptr));

    if (alpha < 0xFF)
90001f3a:	2bff      	cmp	r3, #255	; 0xff
    WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
90001f3c:	60a5      	str	r5, [r4, #8]
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
90001f3e:	f041 0101 	orr.w	r1, r1, #1
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB565);
90001f42:	f04f 0502 	mov.w	r5, #2
90001f46:	6365      	str	r5, [r4, #52]	; 0x34
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
90001f48:	6461      	str	r1, [r4, #68]	; 0x44
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(ptr));
90001f4a:	63e0      	str	r0, [r4, #60]	; 0x3c
    if (alpha < 0xFF)
90001f4c:	d00b      	beq.n	90001f66 <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x3a>
    {
        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, DMA2D_OUTPUT_RGB565 | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));

        /* Write DMA2D FGPFCCR register */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | ((alpha << 24) & DMA2D_FGPFCCR_ALPHA));
90001f4e:	490a      	ldr	r1, [pc, #40]	; (90001f78 <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x4c>)
        WRITE_REG(DMA2D->BGPFCCR, DMA2D_OUTPUT_RGB565 | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
90001f50:	6265      	str	r5, [r4, #36]	; 0x24
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | ((alpha << 24) & DMA2D_FGPFCCR_ALPHA));
90001f52:	ea41 6303 	orr.w	r3, r1, r3, lsl #24

        /* Configure DMA2D source address */
        WRITE_REG(DMA2D->FGMAR, (uint32_t)ptr);

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_CR_START | DMA2D_M2M_BLEND));
90001f56:	4909      	ldr	r1, [pc, #36]	; (90001f7c <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x50>)
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | ((alpha << 24) & DMA2D_FGPFCCR_ALPHA));
90001f58:	61e3      	str	r3, [r4, #28]
        WRITE_REG(DMA2D->FGCOLR, color);
90001f5a:	6222      	str	r2, [r4, #32]
        WRITE_REG(DMA2D->BGMAR, (uint32_t)ptr);
90001f5c:	6160      	str	r0, [r4, #20]
        WRITE_REG(DMA2D->FGMAR, (uint32_t)ptr);
90001f5e:	60e0      	str	r0, [r4, #12]
        WRITE_REG(DMA2D->CR, (DMA2D_CR_START | DMA2D_M2M_BLEND));
90001f60:	6021      	str	r1, [r4, #0]
        WRITE_REG(DMA2D->OCOLR, color565);

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_CR_START | DMA2D_R2M));
    }
}
90001f62:	bc30      	pop	{r4, r5}
90001f64:	4770      	bx	lr
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_OUTPUT_RGB565 | (DMA2D_NO_MODIF_ALPHA << DMA2D_FGPFCCR_AM_Pos));
90001f66:	61e5      	str	r5, [r4, #28]
        WRITE_REG(DMA2D->OCOLR, color565);
90001f68:	9a02      	ldr	r2, [sp, #8]
        WRITE_REG(DMA2D->CR, (DMA2D_CR_START | DMA2D_R2M));
90001f6a:	4b05      	ldr	r3, [pc, #20]	; (90001f80 <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x54>)
        WRITE_REG(DMA2D->OCOLR, color565);
90001f6c:	63a2      	str	r2, [r4, #56]	; 0x38
        WRITE_REG(DMA2D->CR, (DMA2D_CR_START | DMA2D_R2M));
90001f6e:	6023      	str	r3, [r4, #0]
}
90001f70:	bc30      	pop	{r4, r5}
90001f72:	4770      	bx	lr
90001f74:	52001000 	.word	0x52001000
90001f78:	00010009 	.word	0x00010009
90001f7c:	00020001 	.word	0x00020001
90001f80:	00030001 	.word	0x00030001

90001f84 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE3EEENS2_INS1_3NilES6_EEEELt1EE8capacityEv>:
    };

    virtual uint16_t capacity() const
    {
        return NUMBER_OF_ELEMENTS;
    }
90001f84:	2001      	movs	r0, #1
90001f86:	4770      	bx	lr

90001f88 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE3EEENS2_INS1_3NilES6_EEEELt1EE12element_sizeEv>:

    virtual uint32_t element_size()
    {
        return sizeof(stBlocks[0]);
    }
90001f88:	2040      	movs	r0, #64	; 0x40
90001f8a:	4770      	bx	lr

90001f8c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE3EEENS2_INS1_3NilES6_EEEELt1EE7elementEt>:

protected:
    virtual void* element(uint16_t index)
    {
        return &stBlocks[index];
90001f8c:	eb00 1081 	add.w	r0, r0, r1, lsl #6
    }
90001f90:	3008      	adds	r0, #8
90001f92:	4770      	bx	lr

90001f94 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE3EEENS2_INS1_3NilES6_EEEELt1EE7elementEt>:

    virtual const void* element(uint16_t index) const
    {
        return &stBlocks[index];
90001f94:	eb00 1081 	add.w	r0, r0, r1, lsl #6
    }
90001f98:	3008      	adds	r0, #8
90001f9a:	4770      	bx	lr

90001f9c <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen2ViewNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    }
90001f9c:	2001      	movs	r0, #1
90001f9e:	4770      	bx	lr

90001fa0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen2ViewNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    }
90001fa0:	f242 004c 	movw	r0, #8268	; 0x204c
90001fa4:	4770      	bx	lr
90001fa6:	bf00      	nop

90001fa8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen2ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
90001fa8:	f242 034c 	movw	r3, #8268	; 0x204c
90001fac:	fb03 0001 	mla	r0, r3, r1, r0
    }
90001fb0:	3008      	adds	r0, #8
90001fb2:	4770      	bx	lr

90001fb4 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen2ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
90001fb4:	f242 034c 	movw	r3, #8268	; 0x204c
90001fb8:	fb03 0001 	mla	r0, r3, r1, r0
    }
90001fbc:	3008      	adds	r0, #8
90001fbe:	4770      	bx	lr

90001fc0 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    }
90001fc0:	2001      	movs	r0, #1
90001fc2:	4770      	bx	lr

90001fc4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    }
90001fc4:	2010      	movs	r0, #16
90001fc6:	4770      	bx	lr

90001fc8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
90001fc8:	eb00 1001 	add.w	r0, r0, r1, lsl #4
    }
90001fcc:	3008      	adds	r0, #8
90001fce:	4770      	bx	lr

90001fd0 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
90001fd0:	eb00 1001 	add.w	r0, r0, r1, lsl #4
    }
90001fd4:	3008      	adds	r0, #8
90001fd6:	4770      	bx	lr

90001fd8 <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>:
     */
    typedef touchgfx::meta::select_type_maxsize< GeneratedTransitionTypes >::type MaxGeneratedTransitionType;

    virtual void gotoStartScreen(FrontendApplication& app)
    {
        app.gotoScreen1ScreenNoTransition();
90001fd8:	4608      	mov	r0, r1
90001fda:	f003 bcad 	b.w	90005938 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>
90001fde:	bf00      	nop

90001fe0 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE3EEENS2_INS1_3NilES6_EEEELt1EED1Ev>:
class Partition : public AbstractPartition
90001fe0:	4b03      	ldr	r3, [pc, #12]	; (90001ff0 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE3EEENS2_INS1_3NilES6_EEEELt1EED1Ev+0x10>)
90001fe2:	b510      	push	{r4, lr}
90001fe4:	4604      	mov	r4, r0
90001fe6:	6003      	str	r3, [r0, #0]
90001fe8:	f010 fd4d 	bl	90012a86 <_ZN8touchgfx17AbstractPartitionD1Ev>
90001fec:	4620      	mov	r0, r4
90001fee:	bd10      	pop	{r4, pc}
90001ff0:	90029068 	.word	0x90029068

90001ff4 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE3EEENS2_INS1_3NilES6_EEEELt1EED0Ev>:
90001ff4:	4b05      	ldr	r3, [pc, #20]	; (9000200c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE3EEENS2_INS1_3NilES6_EEEELt1EED0Ev+0x18>)
90001ff6:	b510      	push	{r4, lr}
90001ff8:	4604      	mov	r4, r0
90001ffa:	6003      	str	r3, [r0, #0]
90001ffc:	f010 fd43 	bl	90012a86 <_ZN8touchgfx17AbstractPartitionD1Ev>
90002000:	2148      	movs	r1, #72	; 0x48
90002002:	4620      	mov	r0, r4
90002004:	f025 faf7 	bl	900275f6 <_ZdlPvj>
90002008:	4620      	mov	r0, r4
9000200a:	bd10      	pop	{r4, pc}
9000200c:	90029068 	.word	0x90029068

90002010 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen2ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>:
90002010:	4b03      	ldr	r3, [pc, #12]	; (90002020 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen2ViewNS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
90002012:	b510      	push	{r4, lr}
90002014:	4604      	mov	r4, r0
90002016:	6003      	str	r3, [r0, #0]
90002018:	f010 fd35 	bl	90012a86 <_ZN8touchgfx17AbstractPartitionD1Ev>
9000201c:	4620      	mov	r0, r4
9000201e:	bd10      	pop	{r4, pc}
90002020:	90029034 	.word	0x90029034

90002024 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen2ViewNS2_INS1_3NilES4_EEEELt1EED0Ev>:
90002024:	4b06      	ldr	r3, [pc, #24]	; (90002040 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen2ViewNS2_INS1_3NilES4_EEEELt1EED0Ev+0x1c>)
90002026:	b510      	push	{r4, lr}
90002028:	4604      	mov	r4, r0
9000202a:	6003      	str	r3, [r0, #0]
9000202c:	f010 fd2b 	bl	90012a86 <_ZN8touchgfx17AbstractPartitionD1Ev>
90002030:	f242 0154 	movw	r1, #8276	; 0x2054
90002034:	4620      	mov	r0, r4
90002036:	f025 fade 	bl	900275f6 <_ZdlPvj>
9000203a:	4620      	mov	r0, r4
9000203c:	bd10      	pop	{r4, pc}
9000203e:	bf00      	nop
90002040:	90029034 	.word	0x90029034

90002044 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>:
90002044:	4b03      	ldr	r3, [pc, #12]	; (90002054 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
90002046:	b510      	push	{r4, lr}
90002048:	4604      	mov	r4, r0
9000204a:	6003      	str	r3, [r0, #0]
9000204c:	f010 fd1b 	bl	90012a86 <_ZN8touchgfx17AbstractPartitionD1Ev>
90002050:	4620      	mov	r0, r4
90002052:	bd10      	pop	{r4, pc}
90002054:	90029000 	.word	0x90029000

90002058 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EED0Ev>:
90002058:	4b05      	ldr	r3, [pc, #20]	; (90002070 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EED0Ev+0x18>)
9000205a:	b510      	push	{r4, lr}
9000205c:	4604      	mov	r4, r0
9000205e:	6003      	str	r3, [r0, #0]
90002060:	f010 fd11 	bl	90012a86 <_ZN8touchgfx17AbstractPartitionD1Ev>
90002064:	2118      	movs	r1, #24
90002066:	4620      	mov	r0, r4
90002068:	f025 fac5 	bl	900275f6 <_ZdlPvj>
9000206c:	4620      	mov	r0, r4
9000206e:	bd10      	pop	{r4, pc}
90002070:	90029000 	.word	0x90029000

90002074 <_ZN12FrontendHeapD1Ev>:
#ifndef FRONTENDHEAP_HPP
#define FRONTENDHEAP_HPP

#include <gui_generated/common/FrontendHeapBase.hpp>

class FrontendHeap : public FrontendHeapBase
90002074:	490d      	ldr	r1, [pc, #52]	; (900020ac <_ZN12FrontendHeapD1Ev+0x38>)
90002076:	f500 5300 	add.w	r3, r0, #8192	; 0x2000
9000207a:	4a0d      	ldr	r2, [pc, #52]	; (900020b0 <_ZN12FrontendHeapD1Ev+0x3c>)
9000207c:	b510      	push	{r4, lr}
9000207e:	4604      	mov	r4, r0
90002080:	6001      	str	r1, [r0, #0]
90002082:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
90002086:	f500 5002 	add.w	r0, r0, #8320	; 0x2080
9000208a:	f010 fcfc 	bl	90012a86 <_ZN8touchgfx17AbstractPartitionD1Ev>
9000208e:	4620      	mov	r0, r4
90002090:	4b08      	ldr	r3, [pc, #32]	; (900020b4 <_ZN12FrontendHeapD1Ev+0x40>)
90002092:	f840 3f2c 	str.w	r3, [r0, #44]!
90002096:	f010 fcf6 	bl	90012a86 <_ZN8touchgfx17AbstractPartitionD1Ev>
9000209a:	4620      	mov	r0, r4
9000209c:	4b06      	ldr	r3, [pc, #24]	; (900020b8 <_ZN12FrontendHeapD1Ev+0x44>)
9000209e:	f840 3f14 	str.w	r3, [r0, #20]!
900020a2:	f010 fcf0 	bl	90012a86 <_ZN8touchgfx17AbstractPartitionD1Ev>
900020a6:	4620      	mov	r0, r4
900020a8:	bd10      	pop	{r4, pc}
900020aa:	bf00      	nop
900020ac:	9002909c 	.word	0x9002909c
900020b0:	90029068 	.word	0x90029068
900020b4:	90029034 	.word	0x90029034
900020b8:	90029000 	.word	0x90029000

900020bc <__tcf_0>:
                            > > CombinedTransitionTypes;
    typedef touchgfx::meta::select_type_maxsize< CombinedTransitionTypes >::type MaxTransitionType;

    static FrontendHeap& getInstance()
    {
        static FrontendHeap instance;
900020bc:	b510      	push	{r4, lr}
class FrontendHeap : public FrontendHeapBase
900020be:	4c0d      	ldr	r4, [pc, #52]	; (900020f4 <__tcf_0+0x38>)
900020c0:	4a0d      	ldr	r2, [pc, #52]	; (900020f8 <__tcf_0+0x3c>)
900020c2:	f504 5300 	add.w	r3, r4, #8192	; 0x2000
900020c6:	490d      	ldr	r1, [pc, #52]	; (900020fc <__tcf_0+0x40>)
900020c8:	f504 5002 	add.w	r0, r4, #8320	; 0x2080
900020cc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
900020d0:	6021      	str	r1, [r4, #0]
900020d2:	f010 fcd8 	bl	90012a86 <_ZN8touchgfx17AbstractPartitionD1Ev>
900020d6:	4620      	mov	r0, r4
900020d8:	4b09      	ldr	r3, [pc, #36]	; (90002100 <__tcf_0+0x44>)
900020da:	f840 3f2c 	str.w	r3, [r0, #44]!
900020de:	f010 fcd2 	bl	90012a86 <_ZN8touchgfx17AbstractPartitionD1Ev>
900020e2:	4620      	mov	r0, r4
900020e4:	4b07      	ldr	r3, [pc, #28]	; (90002104 <__tcf_0+0x48>)
        static FrontendHeap instance;
900020e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
900020ea:	f840 3f14 	str.w	r3, [r0, #20]!
900020ee:	f010 bcca 	b.w	90012a86 <_ZN8touchgfx17AbstractPartitionD1Ev>
900020f2:	bf00      	nop
900020f4:	24005be8 	.word	0x24005be8
900020f8:	90029068 	.word	0x90029068
900020fc:	9002909c 	.word	0x9002909c
90002100:	90029034 	.word	0x90029034
90002104:	90029000 	.word	0x90029000

90002108 <_ZN12FrontendHeapD0Ev>:
90002108:	4a0f      	ldr	r2, [pc, #60]	; (90002148 <_ZN12FrontendHeapD0Ev+0x40>)
9000210a:	f500 5300 	add.w	r3, r0, #8192	; 0x2000
class FrontendHeap : public FrontendHeapBase
9000210e:	490f      	ldr	r1, [pc, #60]	; (9000214c <_ZN12FrontendHeapD0Ev+0x44>)
90002110:	b510      	push	{r4, lr}
90002112:	4604      	mov	r4, r0
90002114:	6001      	str	r1, [r0, #0]
90002116:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
9000211a:	f500 5002 	add.w	r0, r0, #8320	; 0x2080
9000211e:	f010 fcb2 	bl	90012a86 <_ZN8touchgfx17AbstractPartitionD1Ev>
90002122:	4620      	mov	r0, r4
90002124:	4b0a      	ldr	r3, [pc, #40]	; (90002150 <_ZN12FrontendHeapD0Ev+0x48>)
90002126:	f840 3f2c 	str.w	r3, [r0, #44]!
9000212a:	f010 fcac 	bl	90012a86 <_ZN8touchgfx17AbstractPartitionD1Ev>
9000212e:	4b09      	ldr	r3, [pc, #36]	; (90002154 <_ZN12FrontendHeapD0Ev+0x4c>)
90002130:	4620      	mov	r0, r4
90002132:	f840 3f14 	str.w	r3, [r0, #20]!
90002136:	f010 fca6 	bl	90012a86 <_ZN8touchgfx17AbstractPartitionD1Ev>
9000213a:	4620      	mov	r0, r4
9000213c:	f242 213c 	movw	r1, #8764	; 0x223c
90002140:	f025 fa59 	bl	900275f6 <_ZdlPvj>
90002144:	4620      	mov	r0, r4
90002146:	bd10      	pop	{r4, pc}
90002148:	90029068 	.word	0x90029068
9000214c:	9002909c 	.word	0x9002909c
90002150:	90029034 	.word	0x90029034
90002154:	90029000 	.word	0x90029000

90002158 <touchgfx_init>:
static ApplicationFontProvider fontProvider;
static Texts texts;
static TouchGFXHAL hal(dma, display, tc, 480, 272);

void touchgfx_init()
{
90002158:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
9000215c:	b082      	sub	sp, #8
    Bitmap::registerBitmapDatabase(BitmapDatabase::getInstance(), BitmapDatabase::getInstanceSize());
9000215e:	2400      	movs	r4, #0
90002160:	f002 fea0 	bl	90004ea4 <_ZN14BitmapDatabase11getInstanceEv>
90002164:	4605      	mov	r5, r0
90002166:	f002 fea1 	bl	90004eac <_ZN14BitmapDatabase15getInstanceSizeEv>
9000216a:	4623      	mov	r3, r4
9000216c:	4601      	mov	r1, r0
9000216e:	4622      	mov	r2, r4
90002170:	4628      	mov	r0, r5
90002172:	9400      	str	r4, [sp, #0]
90002174:	f019 f928 	bl	9001b3c8 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>
     *
     * @param  t The array of texts.
     */
    static void registerTexts(const Texts* t)
    {
        texts = t;
90002178:	4b29      	ldr	r3, [pc, #164]	; (90002220 <touchgfx_init+0xc8>)
9000217a:	4a2a      	ldr	r2, [pc, #168]	; (90002224 <touchgfx_init+0xcc>)
    TypedText::registerTexts(&texts);
    Texts::setLanguage(0);
9000217c:	4620      	mov	r0, r4
        static FrontendHeap instance;
9000217e:	4c2a      	ldr	r4, [pc, #168]	; (90002228 <touchgfx_init+0xd0>)
90002180:	601a      	str	r2, [r3, #0]
90002182:	f006 f829 	bl	900081d8 <_ZN8touchgfx5Texts11setLanguageEt>

    FontManager::setFontProvider(&fontProvider);
90002186:	4829      	ldr	r0, [pc, #164]	; (9000222c <touchgfx_init+0xd4>)
90002188:	f019 f886 	bl	9001b298 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>
9000218c:	6823      	ldr	r3, [r4, #0]
9000218e:	f3bf 8f5b 	dmb	ish
90002192:	07db      	lsls	r3, r3, #31
90002194:	d505      	bpl.n	900021a2 <touchgfx_init+0x4a>
    (void)heap;

    /*
     * Initialize TouchGFX
     */
    hal.initialize();
90002196:	4826      	ldr	r0, [pc, #152]	; (90002230 <touchgfx_init+0xd8>)
}
90002198:	b002      	add	sp, #8
9000219a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    hal.initialize();
9000219e:	f7fe bb9d 	b.w	900008dc <_ZN11TouchGFXHAL10initializeEv>
900021a2:	4620      	mov	r0, r4
900021a4:	f025 fa29 	bl	900275fa <__cxa_guard_acquire>
900021a8:	2800      	cmp	r0, #0
900021aa:	d0f4      	beq.n	90002196 <touchgfx_init+0x3e>
     */
    MVPHeap(AbstractPartition& pres,
            AbstractPartition& scr,
            AbstractPartition& tra,
            MVPApplication& app)
        : presenterStorage(pres),
900021ac:	4d21      	ldr	r5, [pc, #132]	; (90002234 <touchgfx_init+0xdc>)
    Model model;
    FrontendApplication app;

private:
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
                     app(model, *this)
900021ae:	4b22      	ldr	r3, [pc, #136]	; (90002238 <touchgfx_init+0xe0>)
          screenStorage(scr),
          transitionStorage(tra),
900021b0:	f505 5702 	add.w	r7, r5, #8320	; 0x2080
        : presenterStorage(pres),
900021b4:	f105 0014 	add.w	r0, r5, #20
          screenStorage(scr),
900021b8:	f105 082c 	add.w	r8, r5, #44	; 0x2c
900021bc:	602b      	str	r3, [r5, #0]
          frontendApplication(app)
900021be:	f107 0660 	add.w	r6, r7, #96	; 0x60
          transitionStorage(tra),
900021c2:	60ef      	str	r7, [r5, #12]
          screenStorage(scr),
900021c4:	e9c5 0801 	strd	r0, r8, [r5, #4]
          frontendApplication(app)
900021c8:	612e      	str	r6, [r5, #16]
900021ca:	f010 fc5d 	bl	90012a88 <_ZN8touchgfx17AbstractPartitionC1Ev>
900021ce:	4b1b      	ldr	r3, [pc, #108]	; (9000223c <touchgfx_init+0xe4>)
900021d0:	4640      	mov	r0, r8
900021d2:	616b      	str	r3, [r5, #20]
900021d4:	f010 fc58 	bl	90012a88 <_ZN8touchgfx17AbstractPartitionC1Ev>
900021d8:	4b19      	ldr	r3, [pc, #100]	; (90002240 <touchgfx_init+0xe8>)
900021da:	4638      	mov	r0, r7
900021dc:	62eb      	str	r3, [r5, #44]	; 0x2c
900021de:	f010 fc53 	bl	90012a88 <_ZN8touchgfx17AbstractPartitionC1Ev>
900021e2:	f505 5300 	add.w	r3, r5, #8192	; 0x2000
900021e6:	4a17      	ldr	r2, [pc, #92]	; (90002244 <touchgfx_init+0xec>)
900021e8:	f103 00c8 	add.w	r0, r3, #200	; 0xc8
900021ec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
900021f0:	f006 f87c 	bl	900082ec <_ZN5ModelC1Ev>
900021f4:	462a      	mov	r2, r5
900021f6:	f107 0148 	add.w	r1, r7, #72	; 0x48
900021fa:	4630      	mov	r0, r6
900021fc:	f006 f862 	bl	900082c4 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>
90002200:	4630      	mov	r0, r6
90002202:	f003 fb99 	bl	90005938 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>
        static FrontendHeap instance;
90002206:	4810      	ldr	r0, [pc, #64]	; (90002248 <touchgfx_init+0xf0>)
90002208:	f025 fa42 	bl	90027690 <atexit>
9000220c:	4620      	mov	r0, r4
9000220e:	f025 fa00 	bl	90027612 <__cxa_guard_release>
90002212:	4807      	ldr	r0, [pc, #28]	; (90002230 <touchgfx_init+0xd8>)
}
90002214:	b002      	add	sp, #8
90002216:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    hal.initialize();
9000221a:	f7fe bb5f 	b.w	900008dc <_ZN11TouchGFXHAL10initializeEv>
9000221e:	bf00      	nop
90002220:	24028250 	.word	0x24028250
90002224:	24008c58 	.word	0x24008c58
90002228:	24005be4 	.word	0x24005be4
9000222c:	24000020 	.word	0x24000020
90002230:	24008bd0 	.word	0x24008bd0
90002234:	24005be8 	.word	0x24005be8
90002238:	9002909c 	.word	0x9002909c
9000223c:	90029000 	.word	0x90029000
90002240:	90029034 	.word	0x90029034
90002244:	90029068 	.word	0x90029068
90002248:	900020bd 	.word	0x900020bd

9000224c <touchgfx_components_init>:

void touchgfx_components_init()
{
}
9000224c:	4770      	bx	lr
9000224e:	bf00      	nop

90002250 <touchgfx_taskEntry>:
     * Main event loop. Will wait for VSYNC signal, and then process next frame. Call
     * this function from your GUI task.
     *
     * Note This function never returns
     */
    hal.taskEntry();
90002250:	4801      	ldr	r0, [pc, #4]	; (90002258 <touchgfx_taskEntry+0x8>)
90002252:	f7fe bb09 	b.w	90000868 <_ZN11TouchGFXHAL9taskEntryEv>
90002256:	bf00      	nop
90002258:	24008bd0 	.word	0x24008bd0

9000225c <_GLOBAL__sub_I_touchgfx_init>:
}
9000225c:	b570      	push	{r4, r5, r6, lr}
{
public:

    STM32TouchController() {}
9000225e:	4b26      	ldr	r3, [pc, #152]	; (900022f8 <_GLOBAL__sub_I_touchgfx_init+0x9c>)
90002260:	4c26      	ldr	r4, [pc, #152]	; (900022fc <_GLOBAL__sub_I_touchgfx_init+0xa0>)
static STM32DMA dma;
90002262:	4e27      	ldr	r6, [pc, #156]	; (90002300 <_GLOBAL__sub_I_touchgfx_init+0xa4>)
static LCD16bpp display;
90002264:	4d27      	ldr	r5, [pc, #156]	; (90002304 <_GLOBAL__sub_I_touchgfx_init+0xa8>)
90002266:	6023      	str	r3, [r4, #0]
static STM32DMA dma;
90002268:	4630      	mov	r0, r6
9000226a:	f7ff fe31 	bl	90001ed0 <_ZN8STM32DMAC1Ev>
static LCD16bpp display;
9000226e:	4628      	mov	r0, r5
90002270:	f01c f9b4 	bl	9001e5dc <_ZN8touchgfx8LCD16bppC1Ev>
        : dma(dmaInterface),
90002274:	4b24      	ldr	r3, [pc, #144]	; (90002308 <_GLOBAL__sub_I_touchgfx_init+0xac>)
          mcuInstrumentation(0),
90002276:	2200      	movs	r2, #0
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH = width;
90002278:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
9000227c:	f44f 7188 	mov.w	r1, #272	; 0x110
    };

public:
    /** Default constructor. Does nothing. */
    Gestures()
        : drag(), listener(0), dragThresholdValue(0)
90002280:	62da      	str	r2, [r3, #44]	; 0x2c
90002282:	861a      	strh	r2, [r3, #48]	; 0x30
          vSyncCompensationEnabled(false),
90002284:	669a      	str	r2, [r3, #104]	; 0x68
          updateMCULoad(0),
90002286:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
          cc_begin(0),
9000228a:	671a      	str	r2, [r3, #112]	; 0x70
          mcuInstrumentation(0),
9000228c:	e9c3 4203 	strd	r4, r2, [r3, #12]
          touchSampleRate(1),
90002290:	4c1e      	ldr	r4, [pc, #120]	; (9000230c <_GLOBAL__sub_I_touchgfx_init+0xb0>)
90002292:	665c      	str	r4, [r3, #100]	; 0x64
          requestedOrientation(ORIENTATION_LANDSCAPE),
90002294:	f04f 7480 	mov.w	r4, #16777216	; 0x1000000
90002298:	675c      	str	r4, [r3, #116]	; 0x74
          lastRenderMethod(HARDWARE)
9000229a:	2401      	movs	r4, #1
9000229c:	f883 4078 	strb.w	r4, [r3, #120]	; 0x78
        instance = this;
900022a0:	4c1b      	ldr	r4, [pc, #108]	; (90002310 <_GLOBAL__sub_I_touchgfx_init+0xb4>)
900022a2:	6023      	str	r3, [r4, #0]
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH = width;
900022a4:	4c1b      	ldr	r4, [pc, #108]	; (90002314 <_GLOBAL__sub_I_touchgfx_init+0xb8>)
900022a6:	8020      	strh	r0, [r4, #0]
900022a8:	4c1b      	ldr	r4, [pc, #108]	; (90002318 <_GLOBAL__sub_I_touchgfx_init+0xbc>)
          lcdRef(display),
900022aa:	e9c3 6501 	strd	r6, r5, [r3, #4]
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH = width;
900022ae:	8020      	strh	r0, [r4, #0]
          refreshStrategy(REFRESH_STRATEGY_DEFAULT),
900022b0:	f44f 7580 	mov.w	r5, #256	; 0x100
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
900022b4:	4c19      	ldr	r4, [pc, #100]	; (9000231c <_GLOBAL__sub_I_touchgfx_init+0xc0>)
900022b6:	481a      	ldr	r0, [pc, #104]	; (90002320 <_GLOBAL__sub_I_touchgfx_init+0xc4>)
          refreshStrategy(REFRESH_STRATEGY_DEFAULT),
900022b8:	649d      	str	r5, [r3, #72]	; 0x48
          frameBufferAllocator(0),
900022ba:	e9c3 2205 	strd	r2, r2, [r3, #20]
            : startX(0),
900022be:	e9c3 2207 	strd	r2, r2, [r3, #28]
        : drag(), listener(0), dragThresholdValue(0)
900022c2:	e9c3 2209 	strd	r2, r2, [r3, #36]	; 0x24
          frameBuffer0(0),
900022c6:	e9c3 220e 	strd	r2, r2, [r3, #56]	; 0x38
          frameBuffer2(0),
900022ca:	e9c3 2210 	strd	r2, r2, [r3, #64]	; 0x40
class Rect
{
public:
    /** Default constructor. Resulting in an empty Rect with coordinates 0,0. */
    Rect()
        : x(0), y(0), width(0), height(0)
900022ce:	e9c3 2213 	strd	r2, r2, [r3, #76]	; 0x4c
          listener(0),
900022d2:	e9c3 2215 	strd	r2, r2, [r3, #84]	; 0x54
          lastY(0),
900022d6:	e9c3 2217 	strd	r2, r2, [r3, #92]	; 0x5c
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
900022da:	8021      	strh	r1, [r4, #0]
900022dc:	8001      	strh	r1, [r0, #0]
        DISPLAY_ROTATION = rotate0;
900022de:	4c11      	ldr	r4, [pc, #68]	; (90002324 <_GLOBAL__sub_I_touchgfx_init+0xc8>)
     * @param [in,out] display Reference to LCD interface.
     * @param [in,out] tc      Reference to Touch Controller driver.
     * @param width            Width of the display.
     * @param height           Height of the display.
     */
    TouchGFXHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) : TouchGFXGeneratedHAL(dma, display, tc, width, height)
900022e0:	4811      	ldr	r0, [pc, #68]	; (90002328 <_GLOBAL__sub_I_touchgfx_init+0xcc>)
900022e2:	4912      	ldr	r1, [pc, #72]	; (9000232c <_GLOBAL__sub_I_touchgfx_init+0xd0>)
        : cc_consumed(0),
900022e4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
900022e8:	7022      	strb	r2, [r4, #0]
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
900022ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
900022ee:	6018      	str	r0, [r3, #0]
          cc_in(0)
900022f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
900022f4:	67d9      	str	r1, [r3, #124]	; 0x7c
}
900022f6:	bd70      	pop	{r4, r5, r6, pc}
900022f8:	90028784 	.word	0x90028784
900022fc:	24007e24 	.word	0x24007e24
90002300:	24007e28 	.word	0x24007e28
90002304:	24008c5c 	.word	0x24008c5c
90002308:	24008bd0 	.word	0x24008bd0
9000230c:	01000001 	.word	0x01000001
90002310:	240281ec 	.word	0x240281ec
90002314:	240281e0 	.word	0x240281e0
90002318:	240281e6 	.word	0x240281e6
9000231c:	240281e2 	.word	0x240281e2
90002320:	240281e8 	.word	0x240281e8
90002324:	240281e4 	.word	0x240281e4
90002328:	90028914 	.word	0x90028914
9000232c:	9002875c 	.word	0x9002875c

90002330 <_GLOBAL__sub_D_touchgfx_init>:
static STM32DMA dma;
90002330:	4801      	ldr	r0, [pc, #4]	; (90002338 <_GLOBAL__sub_D_touchgfx_init+0x8>)
90002332:	f7ff bb7b 	b.w	90001a2c <_ZN8STM32DMAD1Ev>
90002336:	bf00      	nop
90002338:	24007e28 	.word	0x24007e28

9000233c <_ZNK8touchgfx8Drawable17invalidateContentEv>:
     * drawn by the widget.
     */
    virtual void invalidateContent() const
    {
        // Consider checking if *this is in the draw chain
        if (visible)
9000233c:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
90002340:	b112      	cbz	r2, 90002348 <_ZNK8touchgfx8Drawable17invalidateContentEv+0xc>
        {
            invalidate();
90002342:	6803      	ldr	r3, [r0, #0]
90002344:	695b      	ldr	r3, [r3, #20]
90002346:	4718      	bx	r3
        }
    }
90002348:	4770      	bx	lr
9000234a:	bf00      	nop

9000234c <_ZN8touchgfx8Drawable13getFirstChildEv>:
     * @see Container::getFirstChild
     */
    virtual Drawable* getFirstChild()
    {
        return 0;
    }
9000234c:	2000      	movs	r0, #0
9000234e:	4770      	bx	lr

90002350 <_ZN8touchgfx8Drawable4setXEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setX(int16_t x)
    {
        rect.x = x;
90002350:	8081      	strh	r1, [r0, #4]
    }
90002352:	4770      	bx	lr

90002354 <_ZN8touchgfx8Drawable4setYEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setY(int16_t y)
    {
        rect.y = y;
90002354:	80c1      	strh	r1, [r0, #6]
    }
90002356:	4770      	bx	lr

90002358 <_ZN8touchgfx8Drawable8setWidthEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setWidth(int16_t width)
    {
        rect.width = width;
90002358:	8101      	strh	r1, [r0, #8]
    }
9000235a:	4770      	bx	lr

9000235c <_ZN8touchgfx8Drawable9setHeightEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setHeight(int16_t height)
    {
        rect.height = height;
9000235c:	8141      	strh	r1, [r0, #10]
    }
9000235e:	4770      	bx	lr

90002360 <_ZN8touchgfx8Drawable20childGeometryChangedEv>:
     * one or more of its children has changed. Currently only used in ScrollableContainer
     * to redraw scrollbars when the size of the scrolling contents changes.
     */
    virtual void childGeometryChanged()
    {
    }
90002360:	4770      	bx	lr
90002362:	bf00      	nop

90002364 <_ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE>:
     * @param  event The ClickEvent received from the HAL.
     */
    virtual void handleClickEvent(const ClickEvent& event)
    {
        (void)event; // Unused variable
    }
90002364:	4770      	bx	lr
90002366:	bf00      	nop

90002368 <_ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE>:
     * @param  event The GestureEvent received from the HAL.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
    {
        (void)event; // Unused variable
    }
90002368:	4770      	bx	lr
9000236a:	bf00      	nop

9000236c <_ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE>:
     * @param  event The DragEvent received from the HAL.
     */
    virtual void handleDragEvent(const DragEvent& event)
    {
        (void)event; // Unused variable
    }
9000236c:	4770      	bx	lr
9000236e:	bf00      	nop

90002370 <_ZN8touchgfx8Drawable15handleTickEventEv>:
     *
     * @see Application::registerTimerWidget
     */
    virtual void handleTickEvent()
    {
    }
90002370:	4770      	bx	lr
90002372:	bf00      	nop

90002374 <_ZN8touchgfx8Drawable6moveToEss>:
     *
     * @note Will redraw the appropriate areas of the screen.
     */
    virtual void moveTo(int16_t x, int16_t y)
    {
        moveRelative(x - rect.x, y - rect.y);
90002374:	f8b0 c006 	ldrh.w	ip, [r0, #6]
90002378:	6803      	ldr	r3, [r0, #0]
9000237a:	eba2 020c 	sub.w	r2, r2, ip
9000237e:	f8b0 c004 	ldrh.w	ip, [r0, #4]
90002382:	6d5b      	ldr	r3, [r3, #84]	; 0x54
90002384:	eba1 010c 	sub.w	r1, r1, ip
90002388:	b212      	sxth	r2, r2
9000238a:	b209      	sxth	r1, r1
9000238c:	4718      	bx	r3
9000238e:	bf00      	nop

90002390 <_ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_>:
     */
    virtual void setupDrawChain(const Rect& invalidatedArea, Drawable** nextPreviousElement)
    {
        (void)invalidatedArea; // Unused variable
        resetDrawChainCache();
        nextDrawChainElement = *nextPreviousElement;
90002390:	6813      	ldr	r3, [r2, #0]
        cachedVisibleRect.x = UNCACHED_INDICATOR;
90002392:	f64f 7cff 	movw	ip, #65535	; 0xffff
        cachedAbsX = UNCACHED_INDICATOR;
90002396:	f04f 31ff 	mov.w	r1, #4294967295
        cachedVisibleRect.x = UNCACHED_INDICATOR;
9000239a:	f8a0 c00c 	strh.w	ip, [r0, #12]
        nextDrawChainElement = *nextPreviousElement;
9000239e:	e9c0 3107 	strd	r3, r1, [r0, #28]
        *nextPreviousElement = this;
900023a2:	6010      	str	r0, [r2, #0]
    }
900023a4:	4770      	bx	lr
900023a6:	bf00      	nop

900023a8 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE>:
     *
     * @param [out] last Result, the address of the actual instance of the Widget.
     */
    virtual void getLastChild(int16_t /*x*/, int16_t /*y*/, Drawable** last)
    {
        if (isVisible() && isTouchable())
900023a8:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
900023ac:	b11a      	cbz	r2, 900023b6 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0xe>
900023ae:	f890 2024 	ldrb.w	r2, [r0, #36]	; 0x24
900023b2:	b102      	cbz	r2, 900023b6 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0xe>
        {
            *last = this;
900023b4:	6018      	str	r0, [r3, #0]
        }
    }
900023b6:	4770      	bx	lr

900023b8 <_ZNK8touchgfx15AbstractPainter18getRenderingMethodEv>:
     * @return HARDWARE if painter uses hardware based drawing, SOFTWARE otherwise.
     */
    virtual HAL::RenderingMethod getRenderingMethod() const
    {
        return HAL::SOFTWARE;
    }
900023b8:	2000      	movs	r0, #0
900023ba:	4770      	bx	lr

900023bc <_ZNK8touchgfx15AbstractPainter5setupERKNS_4RectE>:
     *
     * @return True if the painter is ready to paint, false otherwise.
     *
     * @see AbstractPainter::paint, AbstractPainter::tearDown
     */
    virtual bool setup(const Rect& widgetRect) const
900023bc:	4603      	mov	r3, r0
    {
        widgetWidth = widgetRect.width;
900023be:	888a      	ldrh	r2, [r1, #4]
        return true;
    }
900023c0:	2001      	movs	r0, #1
        widgetWidth = widgetRect.width;
900023c2:	809a      	strh	r2, [r3, #4]
    }
900023c4:	4770      	bx	lr
900023c6:	bf00      	nop

900023c8 <_ZNK8touchgfx15AbstractPainter8tearDownEv>:
     * @see AbstractPainter::paint, AbstractPainter::setup
     */
    virtual void tearDown() const
    {
        return;
    }
900023c8:	4770      	bx	lr
900023ca:	bf00      	nop

900023cc <_ZN8touchgfx12CanvasWidget8setAlphaEh>:
    }

    /** @copydoc Image::setAlpha */
    virtual void setAlpha(uint8_t newAlpha)
    {
        alpha = newAlpha;
900023cc:	f880 1026 	strb.w	r1, [r0, #38]	; 0x26
    }
900023d0:	4770      	bx	lr
900023d2:	bf00      	nop

900023d4 <_ZNK8touchgfx12CanvasWidget8getAlphaEv>:

    /** @copydoc Image::getAlpha() */
    virtual uint8_t getAlpha() const
    {
        return alpha;
    }
900023d4:	f890 0026 	ldrb.w	r0, [r0, #38]	; 0x26
900023d8:	4770      	bx	lr
900023da:	bf00      	nop

900023dc <_ZNK8touchgfx12CanvasWidget14getMinimalRectEv>:
     * @param  rectY      The y coordinate.
     * @param  rectWidth  The width.
     * @param  rectHeight The height.
     */
    Rect(int16_t rectX, int16_t rectY, int16_t rectWidth, int16_t rectHeight)
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
900023dc:	f04f 0c00 	mov.w	ip, #0
        return rect.width;
900023e0:	688a      	ldr	r2, [r1, #8]
900023e2:	f8c0 c000 	str.w	ip, [r0]
900023e6:	6042      	str	r2, [r0, #4]
     * @return The minimal rectangle containing the shape drawn.
     */
    virtual Rect getMinimalRect() const
    {
        return Rect(0, 0, getWidth(), getHeight());
    }
900023e8:	4770      	bx	lr
900023ea:	bf00      	nop

900023ec <_ZNK8touchgfx12CanvasWidget12getSolidRectEv>:
        : x(0), y(0), width(0), height(0)
900023ec:	2200      	movs	r2, #0
900023ee:	6002      	str	r2, [r0, #0]
900023f0:	6042      	str	r2, [r0, #4]
     *       lines will not be drawn and may cause strange display artifacts.
     */
    virtual Rect getSolidRect() const
    {
        return Rect();
    }
900023f2:	4770      	bx	lr

900023f4 <_ZNK8touchgfx8LCD16bpp17framebufferFormatEv>:
    }

    virtual Bitmap::BitmapFormat framebufferFormat() const
    {
        return Bitmap::RGB565;
    }
900023f4:	2000      	movs	r0, #0
900023f6:	4770      	bx	lr

900023f8 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>:
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
900023f8:	4b03      	ldr	r3, [pc, #12]	; (90002408 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv+0x10>)
900023fa:	2290      	movs	r2, #144	; 0x90
900023fc:	f883 235a 	strb.w	r2, [r3, #858]	; 0x35a
90002400:	f883 2358 	strb.w	r2, [r3, #856]	; 0x358

void TouchGFXGeneratedHAL::configureInterrupts()
{
    NVIC_SetPriority(DMA2D_IRQn, 9);
    NVIC_SetPriority(LTDC_IRQn, 9);
}
90002404:	4770      	bx	lr
90002406:	bf00      	nop
90002408:	e000e100 	.word	0xe000e100

9000240c <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>:
    NVIC_DisableIRQ(LTDC_IRQn);
}

void TouchGFXGeneratedHAL::enableLCDControllerInterrupt()
{
    lcd_int_active_line = (LTDC->BPCR & 0x7FF) - 1;
9000240c:	4a09      	ldr	r2, [pc, #36]	; (90002434 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x28>)
9000240e:	490a      	ldr	r1, [pc, #40]	; (90002438 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x2c>)
90002410:	68d3      	ldr	r3, [r2, #12]
    lcd_int_porch_line = (LTDC->AWCR & 0x7FF) - 1;
90002412:	480a      	ldr	r0, [pc, #40]	; (9000243c <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x30>)
    lcd_int_active_line = (LTDC->BPCR & 0x7FF) - 1;
90002414:	f3c3 030a 	ubfx	r3, r3, #0, #11
90002418:	3b01      	subs	r3, #1
9000241a:	b29b      	uxth	r3, r3
9000241c:	800b      	strh	r3, [r1, #0]
    lcd_int_porch_line = (LTDC->AWCR & 0x7FF) - 1;
9000241e:	6911      	ldr	r1, [r2, #16]
90002420:	f3c1 010a 	ubfx	r1, r1, #0, #11
90002424:	3901      	subs	r1, #1
90002426:	8001      	strh	r1, [r0, #0]

    /* Sets the Line Interrupt position */
    LTDC->LIPCR = lcd_int_active_line;
90002428:	6413      	str	r3, [r2, #64]	; 0x40
    /* Line Interrupt Enable            */
    LTDC->IER |= LTDC_IER_LIE;
9000242a:	6b53      	ldr	r3, [r2, #52]	; 0x34
9000242c:	f043 0301 	orr.w	r3, r3, #1
90002430:	6353      	str	r3, [r2, #52]	; 0x34
}
90002432:	4770      	bx	lr
90002434:	50001000 	.word	0x50001000
90002438:	24008cd8 	.word	0x24008cd8
9000243c:	24008cd6 	.word	0x24008cd6

90002440 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>:
    videoController.endFrame();
}

uint16_t* TouchGFXGeneratedHAL::getTFTFrameBuffer() const
{
    return (uint16_t*)LTDC_Layer1->CFBAR;
90002440:	4b01      	ldr	r3, [pc, #4]	; (90002448 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv+0x8>)
90002442:	f8d3 00ac 	ldr.w	r0, [r3, #172]	; 0xac
}
90002446:	4770      	bx	lr
90002448:	50001000 	.word	0x50001000

9000244c <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>:

void TouchGFXGeneratedHAL::setTFTFrameBuffer(uint16_t* adr)
{
    LTDC_Layer1->CFBAR = (uint32_t)adr;
9000244c:	4b02      	ldr	r3, [pc, #8]	; (90002458 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0xc>)

    /* Reload immediate */
    LTDC->SRCR = (uint32_t)LTDC_SRCR_IMR;
9000244e:	2201      	movs	r2, #1
    LTDC_Layer1->CFBAR = (uint32_t)adr;
90002450:	f8c3 10ac 	str.w	r1, [r3, #172]	; 0xac
    LTDC->SRCR = (uint32_t)LTDC_SRCR_IMR;
90002454:	625a      	str	r2, [r3, #36]	; 0x24
}
90002456:	4770      	bx	lr
90002458:	50001000 	.word	0x50001000

9000245c <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12setRGBBufferEPhj>:

    virtual void setRGBBuffer(uint8_t* buffer, size_t sizeOfBuffer)
    {
        // Running in UI thread / main

        bufferRGB = buffer;
9000245c:	e9c0 120c 	strd	r1, r2, [r0, #48]	; 0x30
        topBufferRGB = bufferRGB;
90002460:	6381      	str	r1, [r0, #56]	; 0x38
        sizeBufferRGB = sizeOfBuffer;
    }
90002462:	4770      	bx	lr

90002464 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EED1Ev>:
class DedicatedBufferController : public touchgfx::VideoController
90002464:	4770      	bx	lr
90002466:	bf00      	nop

90002468 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12setVideoDataEmRNS0_15VideoDataReaderE>:
        mjpegDecoders[handle]->setVideoData(reader);
90002468:	eb00 0081 	add.w	r0, r0, r1, lsl #2
9000246c:	4611      	mov	r1, r2
9000246e:	6840      	ldr	r0, [r0, #4]
90002470:	6803      	ldr	r3, [r0, #0]
90002472:	68db      	ldr	r3, [r3, #12]
90002474:	4718      	bx	r3
90002476:	bf00      	nop

90002478 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EED0Ev>:
class DedicatedBufferController : public touchgfx::VideoController
90002478:	b510      	push	{r4, lr}
9000247a:	4604      	mov	r4, r0
9000247c:	2148      	movs	r1, #72	; 0x48
9000247e:	f025 f8ba 	bl	900275f6 <_ZdlPvj>
90002482:	4620      	mov	r0, r4
90002484:	bd10      	pop	{r4, pc}
90002486:	bf00      	nop

90002488 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12getIsPlayingEm>:
        mjpegDecoders[handle]->getVideoInfo(data);
    }

    virtual bool getIsPlaying(const Handle handle)
    {
        assert(handle < no_streams);
90002488:	b911      	cbnz	r1, 90002490 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12getIsPlayingEm+0x8>
        Stream& stream = streams[handle];
        return stream.isPlaying;
    }
9000248a:	f890 0029 	ldrb.w	r0, [r0, #41]	; 0x29
9000248e:	4770      	bx	lr
    virtual bool getIsPlaying(const Handle handle)
90002490:	b508      	push	{r3, lr}
        assert(handle < no_streams);
90002492:	4a03      	ldr	r2, [pc, #12]	; (900024a0 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12getIsPlayingEm+0x18>)
90002494:	f44f 71b8 	mov.w	r1, #368	; 0x170
90002498:	4b02      	ldr	r3, [pc, #8]	; (900024a4 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12getIsPlayingEm+0x1c>)
9000249a:	4803      	ldr	r0, [pc, #12]	; (900024a8 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12getIsPlayingEm+0x20>)
9000249c:	f025 f8da 	bl	90027654 <__assert_func>
900024a0:	900290bc 	.word	0x900290bc
900024a4:	900290a8 	.word	0x900290a8
900024a8:	90029248 	.word	0x90029248

900024ac <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19getVideoInformationEmPNS0_16VideoInformationE>:
        assert(handle < no_streams);
900024ac:	b921      	cbnz	r1, 900024b8 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19getVideoInformationEmPNS0_16VideoInformationE+0xc>
        mjpegDecoders[handle]->getVideoInfo(data);
900024ae:	6840      	ldr	r0, [r0, #4]
900024b0:	4611      	mov	r1, r2
900024b2:	6803      	ldr	r3, [r0, #0]
900024b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
900024b6:	4718      	bx	r3
        assert(handle < no_streams);
900024b8:	4b03      	ldr	r3, [pc, #12]	; (900024c8 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19getVideoInformationEmPNS0_16VideoInformationE+0x1c>)
900024ba:	f44f 71b5 	mov.w	r1, #362	; 0x16a
900024be:	4a03      	ldr	r2, [pc, #12]	; (900024cc <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19getVideoInformationEmPNS0_16VideoInformationE+0x20>)
900024c0:	4803      	ldr	r0, [pc, #12]	; (900024d0 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19getVideoInformationEmPNS0_16VideoInformationE+0x24>)
    virtual void getVideoInformation(const Handle handle, touchgfx::VideoInformation* data)
900024c2:	b510      	push	{r4, lr}
        assert(handle < no_streams);
900024c4:	f025 f8c6 	bl	90027654 <__assert_func>
900024c8:	900290a8 	.word	0x900290a8
900024cc:	9002928c 	.word	0x9002928c
900024d0:	90029248 	.word	0x90029248

900024d4 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE21getCurrentFrameNumberEm>:
        assert(handle < no_streams);
900024d4:	b909      	cbnz	r1, 900024da <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE21getCurrentFrameNumberEm+0x6>
    }
900024d6:	68c0      	ldr	r0, [r0, #12]
900024d8:	4770      	bx	lr
    virtual uint32_t getCurrentFrameNumber(const Handle handle)
900024da:	b508      	push	{r3, lr}
        assert(handle < no_streams);
900024dc:	4a02      	ldr	r2, [pc, #8]	; (900024e8 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE21getCurrentFrameNumberEm+0x14>)
900024de:	2179      	movs	r1, #121	; 0x79
900024e0:	4b02      	ldr	r3, [pc, #8]	; (900024ec <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE21getCurrentFrameNumberEm+0x18>)
900024e2:	4803      	ldr	r0, [pc, #12]	; (900024f0 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE21getCurrentFrameNumberEm+0x1c>)
900024e4:	f025 f8b6 	bl	90027654 <__assert_func>
900024e8:	9002943c 	.word	0x9002943c
900024ec:	900290a8 	.word	0x900290a8
900024f0:	90029248 	.word	0x90029248

900024f4 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12setVideoDataEmPKhm>:
    virtual void setVideoData(const Handle handle, const uint8_t* movie, const uint32_t length)
900024f4:	b510      	push	{r4, lr}
        assert(handle < no_streams);
900024f6:	460c      	mov	r4, r1
900024f8:	b949      	cbnz	r1, 9000250e <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12setVideoDataEmPKhm+0x1a>
900024fa:	4611      	mov	r1, r2
900024fc:	461a      	mov	r2, r3
        mjpegDecoders[handle]->setVideoData(movie, length);
900024fe:	6843      	ldr	r3, [r0, #4]
        stream.frameNumber = 0;
90002500:	60c4      	str	r4, [r0, #12]
        mjpegDecoders[handle]->setVideoData(movie, length);
90002502:	681c      	ldr	r4, [r3, #0]
90002504:	4618      	mov	r0, r3
90002506:	68a3      	ldr	r3, [r4, #8]
    }
90002508:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        mjpegDecoders[handle]->setVideoData(movie, length);
9000250c:	4718      	bx	r3
        assert(handle < no_streams);
9000250e:	4b03      	ldr	r3, [pc, #12]	; (9000251c <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12setVideoDataEmPKhm+0x28>)
90002510:	2190      	movs	r1, #144	; 0x90
90002512:	4a03      	ldr	r2, [pc, #12]	; (90002520 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12setVideoDataEmPKhm+0x2c>)
90002514:	4803      	ldr	r0, [pc, #12]	; (90002524 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12setVideoDataEmPKhm+0x30>)
90002516:	f025 f89d 	bl	90027654 <__assert_func>
9000251a:	bf00      	nop
9000251c:	900290a8 	.word	0x900290a8
90002520:	900295f0 	.word	0x900295f0
90002524:	90029248 	.word	0x90029248

90002528 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12setFrameRateEmmm>:
        assert(handle < no_streams);
90002528:	b921      	cbnz	r1, 90002534 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12setFrameRateEmmm+0xc>
        stream.tickCount = 0;
9000252a:	e9c0 1104 	strd	r1, r1, [r0, #16]
        stream.frame_rate_video = video_frames;
9000252e:	e9c0 3206 	strd	r3, r2, [r0, #24]
90002532:	4770      	bx	lr
    virtual void setFrameRate(const Handle handle, uint32_t ui_frames, uint32_t video_frames)
90002534:	b508      	push	{r3, lr}
        assert(handle < no_streams);
90002536:	4a03      	ldr	r2, [pc, #12]	; (90002544 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12setFrameRateEmmm+0x1c>)
90002538:	2182      	movs	r1, #130	; 0x82
9000253a:	4b03      	ldr	r3, [pc, #12]	; (90002548 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12setFrameRateEmmm+0x20>)
9000253c:	4803      	ldr	r0, [pc, #12]	; (9000254c <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12setFrameRateEmmm+0x24>)
9000253e:	f025 f889 	bl	90027654 <__assert_func>
90002542:	bf00      	nop
90002544:	900297cc 	.word	0x900297cc
90002548:	900290a8 	.word	0x900290a8
9000254c:	90029248 	.word	0x90029248

90002550 <_ZN20TouchGFXGeneratedHAL10beginFrameEv>:
    return HAL::beginFrame();
90002550:	f010 bd7c 	b.w	9001304c <_ZN8touchgfx3HAL10beginFrameEv>

90002554 <_ZN20TouchGFXGeneratedHAL8endFrameEv>:
    if (frameBufferUpdatedThisFrame)
90002554:	f890 304b 	ldrb.w	r3, [r0, #75]	; 0x4b
{
90002558:	b510      	push	{r4, lr}
    if (frameBufferUpdatedThisFrame)
9000255a:	b113      	cbz	r3, 90002562 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0xe>
        refreshRequested = true;
9000255c:	4b1a      	ldr	r3, [pc, #104]	; (900025c8 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x74>)
9000255e:	2201      	movs	r2, #1
90002560:	701a      	strb	r2, [r3, #0]
            if (stream.isPlaying || stream.isShowingOneFrame)
90002562:	4c1a      	ldr	r4, [pc, #104]	; (900025cc <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x78>)
    HAL::endFrame();
90002564:	f010 fd7e 	bl	90013064 <_ZN8touchgfx3HAL8endFrameEv>
90002568:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
9000256c:	b963      	cbnz	r3, 90002588 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x34>
9000256e:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
90002572:	b94b      	cbnz	r3, 90002588 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x34>
        firstDrawThisFrame = true;
90002574:	2301      	movs	r3, #1
        SEM_POST(semDecode);
90002576:	6c20      	ldr	r0, [r4, #64]	; 0x40
        firstDrawThisFrame = true;
90002578:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        SEM_POST(semDecode);
9000257c:	f00c fc98 	bl	9000eeb0 <osSemaphoreRelease>
        if (uiHasMutex)
90002580:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
90002584:	b9cb      	cbnz	r3, 900025ba <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x66>
}
90002586:	bd10      	pop	{r4, pc}
    bool decodeForNextTick(Stream& stream)
    {
        // Running in UI thread

        // Compare tickCount/frameCount to frame_rate_ticks/frame_rate_video
        if ((stream.tickCount * stream.frame_rate_video) >= (stream.frame_rate_ticks * stream.frameCount))
90002588:	e9d4 3005 	ldrd	r3, r0, [r4, #20]
9000258c:	69e1      	ldr	r1, [r4, #28]
9000258e:	6922      	ldr	r2, [r4, #16]
90002590:	fb00 f303 	mul.w	r3, r0, r3
90002594:	fb01 f202 	mul.w	r2, r1, r2
90002598:	4293      	cmp	r3, r2
9000259a:	d3eb      	bcc.n	90002574 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x20>
        {
            if (allowSkipFrames)
9000259c:	f894 003c 	ldrb.w	r0, [r4, #60]	; 0x3c
900025a0:	b138      	cbz	r0, 900025b2 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x5e>
            {
                stream.skip_frames = (stream.tickCount * stream.frame_rate_video - stream.frame_rate_ticks * stream.frameCount) / stream.frame_rate_ticks;
900025a2:	1a9b      	subs	r3, r3, r2
900025a4:	fbb3 f2f1 	udiv	r2, r3, r1
                if (stream.skip_frames > 0)
900025a8:	4299      	cmp	r1, r3
                {
                    stream.skip_frames--;
900025aa:	bf98      	it	ls
900025ac:	f102 32ff 	addls.w	r2, r2, #4294967295
900025b0:	6262      	str	r2, [r4, #36]	; 0x24
                    stream.doDecode = true;
900025b2:	2301      	movs	r3, #1
900025b4:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
        for (uint32_t i = 0; i < no_streams; i++)
900025b8:	e7dc      	b.n	90002574 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x20>
            MUTEX_UNLOCK(mutexBuffers);
900025ba:	6c60      	ldr	r0, [r4, #68]	; 0x44
900025bc:	f00c fbd2 	bl	9000ed64 <osMutexRelease>
            uiHasMutex = false;
900025c0:	2300      	movs	r3, #0
900025c2:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
900025c6:	bd10      	pop	{r4, pc}
900025c8:	24008cd4 	.word	0x24008cd4
900025cc:	24008d24 	.word	0x24008d24

900025d0 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>:

void TouchGFXGeneratedHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
    HAL::flushFrameBuffer(rect);
900025d0:	f010 bd06 	b.w	90012fe0 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>

900025d4 <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>:
}

bool TouchGFXGeneratedHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
    return HAL::blockCopy(dest, src, numBytes);
900025d4:	f010 be61 	b.w	9001329a <_ZN8touchgfx3HAL9blockCopyEPvPKvm>

900025d8 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE4drawEmRKNS0_4RectERKNS0_11VideoWidgetE>:
        if (firstDrawThisFrame)
900025d8:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
900025dc:	b903      	cbnz	r3, 900025e0 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE4drawEmRKNS0_4RectERKNS0_11VideoWidgetE+0x8>
900025de:	4770      	bx	lr
    virtual void draw(const Handle handle, const touchgfx::Rect& invalidatedArea, const touchgfx::VideoWidget& widget)
900025e0:	b510      	push	{r4, lr}
            MUTEX_LOCK(mutexBuffers);
900025e2:	f04f 31ff 	mov.w	r1, #4294967295
900025e6:	4604      	mov	r4, r0
900025e8:	6c40      	ldr	r0, [r0, #68]	; 0x44
900025ea:	f00c fb97 	bl	9000ed1c <osMutexAcquire>
            firstDrawThisFrame = false;
900025ee:	f44f 7380 	mov.w	r3, #256	; 0x100
900025f2:	f8a4 303d 	strh.w	r3, [r4, #61]	; 0x3d
    }
900025f6:	bd10      	pop	{r4, pc}

900025f8 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE21unregisterVideoWidgetEm>:
    virtual void unregisterVideoWidget(const Handle handle)
900025f8:	b538      	push	{r3, r4, r5, lr}
900025fa:	460c      	mov	r4, r1
900025fc:	4605      	mov	r5, r0
        MUTEX_LOCK(mutexBuffers);
900025fe:	f04f 31ff 	mov.w	r1, #4294967295
90002602:	6c40      	ldr	r0, [r0, #68]	; 0x44
        streams[handle].isActive = false;
90002604:	eb04 04c4 	add.w	r4, r4, r4, lsl #3
        MUTEX_LOCK(mutexBuffers);
90002608:	f00c fb88 	bl	9000ed1c <osMutexAcquire>
        MUTEX_UNLOCK(mutexBuffers);
9000260c:	6c68      	ldr	r0, [r5, #68]	; 0x44
9000260e:	f00c fba9 	bl	9000ed64 <osMutexRelease>
        streams[handle].isActive = false;
90002612:	2300      	movs	r3, #0
90002614:	eb05 0484 	add.w	r4, r5, r4, lsl #2
90002618:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
        if (oneIsActive == false)
9000261c:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
90002620:	b90b      	cbnz	r3, 90002626 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE21unregisterVideoWidgetEm+0x2e>
            topBufferRGB = bufferRGB;
90002622:	6b2b      	ldr	r3, [r5, #48]	; 0x30
90002624:	63ab      	str	r3, [r5, #56]	; 0x38
    }
90002626:	bd38      	pop	{r3, r4, r5, pc}

90002628 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv>:
{
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then
    // the DCache must be flushed prior to DMA2D accessing it. That's done
    // using the function SCB_CleanInvalidateDCache(). Remember to enable "CPU Cache" in the
    // "System Core" settings for "Cortex M7" in CubeMX in order for this function call to work.
    if (SCB->CCR & SCB_CCR_DC_Msk)
90002628:	4814      	ldr	r0, [pc, #80]	; (9000267c <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x54>)
9000262a:	6943      	ldr	r3, [r0, #20]
9000262c:	03d9      	lsls	r1, r3, #15
9000262e:	d523      	bpl.n	90002678 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x50>
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
90002630:	2300      	movs	r3, #0
{
90002632:	b510      	push	{r4, lr}
90002634:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
90002638:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
9000263c:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
90002640:	f643 74e0 	movw	r4, #16352	; 0x3fe0
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
90002644:	f3c3 3c4e 	ubfx	ip, r3, #13, #15
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
90002648:	f3c3 0ec9 	ubfx	lr, r3, #3, #10
9000264c:	ea4f 1c4c 	mov.w	ip, ip, lsl #5
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
90002650:	ea0c 0104 	and.w	r1, ip, r4
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
90002654:	4673      	mov	r3, lr
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
90002656:	ea41 7283 	orr.w	r2, r1, r3, lsl #30
      } while (ways-- != 0U);
9000265a:	3b01      	subs	r3, #1
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
9000265c:	f8c0 2274 	str.w	r2, [r0, #628]	; 0x274
      } while (ways-- != 0U);
90002660:	1c5a      	adds	r2, r3, #1
90002662:	d1f8      	bne.n	90002656 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x2e>
    } while(sets-- != 0U);
90002664:	f1ac 0c20 	sub.w	ip, ip, #32
90002668:	f11c 0f20 	cmn.w	ip, #32
9000266c:	d1f0      	bne.n	90002650 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x28>
9000266e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
90002672:	f3bf 8f6f 	isb	sy
    {
        SCB_CleanInvalidateDCache();
    }
}
90002676:	bd10      	pop	{r4, pc}
90002678:	4770      	bx	lr
9000267a:	bf00      	nop
9000267c:	e000ed00 	.word	0xe000ed00

90002680 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm>:
    virtual void setCommand(const Handle handle, Command cmd, uint32_t param)
90002680:	b510      	push	{r4, lr}
        assert(handle < no_streams);
90002682:	2900      	cmp	r1, #0
90002684:	d133      	bne.n	900026ee <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0x6e>
90002686:	4604      	mov	r4, r0
        switch (cmd)
90002688:	2a05      	cmp	r2, #5
9000268a:	d809      	bhi.n	900026a0 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0x20>
9000268c:	e8df f002 	tbb	[pc, r2]
90002690:	27221e0f 	.word	0x27221e0f
90002694:	0903      	.short	0x0903
            stream.isPlaying = false;
90002696:	2200      	movs	r2, #0
            stream.seek_to_frame = 1;
90002698:	2301      	movs	r3, #1
            stream.isPlaying = false;
9000269a:	f880 2029 	strb.w	r2, [r0, #41]	; 0x29
            stream.seek_to_frame = 1;
9000269e:	6203      	str	r3, [r0, #32]
    }
900026a0:	bd10      	pop	{r4, pc}
            stream.repeat = (param > 0);
900026a2:	3b00      	subs	r3, #0
900026a4:	bf18      	it	ne
900026a6:	2301      	movne	r3, #1
900026a8:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d
    }
900026ac:	bd10      	pop	{r4, pc}
            if (mjpegDecoders[handle]->hasVideo())
900026ae:	6840      	ldr	r0, [r0, #4]
900026b0:	6803      	ldr	r3, [r0, #0]
900026b2:	691b      	ldr	r3, [r3, #16]
900026b4:	4798      	blx	r3
900026b6:	2800      	cmp	r0, #0
900026b8:	d0f2      	beq.n	900026a0 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0x20>
                stream.isPlaying = true;
900026ba:	2201      	movs	r2, #1
                stream.frameCount = 0;
900026bc:	2300      	movs	r3, #0
                stream.isPlaying = true;
900026be:	f884 2029 	strb.w	r2, [r4, #41]	; 0x29
                stream.hasMoreFrames = true; // Assume more frames, lowered on end
900026c2:	f884 202c 	strb.w	r2, [r4, #44]	; 0x2c
                stream.tickCount = 0;
900026c6:	e9c4 3304 	strd	r3, r3, [r4, #16]
    }
900026ca:	bd10      	pop	{r4, pc}
            stream.isPlaying = false;
900026cc:	2300      	movs	r3, #0
900026ce:	f880 3029 	strb.w	r3, [r0, #41]	; 0x29
    }
900026d2:	bd10      	pop	{r4, pc}
            stream.frameCount = 0;
900026d4:	2200      	movs	r2, #0
            stream.seek_to_frame = param;
900026d6:	6203      	str	r3, [r0, #32]
            stream.tickCount = 0;
900026d8:	e9c0 2204 	strd	r2, r2, [r0, #16]
    }
900026dc:	bd10      	pop	{r4, pc}
            stream.frameCount = 0;
900026de:	2200      	movs	r2, #0
            stream.isShowingOneFrame = true;
900026e0:	2101      	movs	r1, #1
            stream.seek_to_frame = param;
900026e2:	6203      	str	r3, [r0, #32]
            stream.isShowingOneFrame = true;
900026e4:	f880 102a 	strb.w	r1, [r0, #42]	; 0x2a
            stream.tickCount = 0;
900026e8:	e9c0 2204 	strd	r2, r2, [r0, #16]
    }
900026ec:	bd10      	pop	{r4, pc}
        assert(handle < no_streams);
900026ee:	4b03      	ldr	r3, [pc, #12]	; (900026fc <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0x7c>)
900026f0:	21a2      	movs	r1, #162	; 0xa2
900026f2:	4a03      	ldr	r2, [pc, #12]	; (90002700 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0x80>)
900026f4:	4803      	ldr	r0, [pc, #12]	; (90002704 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0x84>)
900026f6:	f024 ffad 	bl	90027654 <__assert_func>
900026fa:	bf00      	nop
900026fc:	900290a8 	.word	0x900290a8
90002700:	90029988 	.word	0x90029988
90002704:	90029248 	.word	0x90029248

90002708 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE>:
    virtual bool updateFrame(const Handle handle, touchgfx::VideoWidget& widget)
90002708:	b510      	push	{r4, lr}
        assert(handle < no_streams);
9000270a:	bb39      	cbnz	r1, 9000275c <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x54>
        if (stream.isPlaying)
9000270c:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
90002710:	4604      	mov	r4, r0
90002712:	b923      	cbnz	r3, 9000271e <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x16>
        if (stream.doInvalidateOnNextTick)
90002714:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
90002718:	b963      	cbnz	r3, 90002734 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x2c>
        return true;
9000271a:	2001      	movs	r0, #1
    }
9000271c:	bd10      	pop	{r4, pc}
        return vSyncForFrame;
9000271e:	4912      	ldr	r1, [pc, #72]	; (90002768 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x60>)
            stream.tickCount+=HAL::getInstance()->getLCDRefreshCount();
90002720:	6943      	ldr	r3, [r0, #20]
90002722:	6809      	ldr	r1, [r1, #0]
90002724:	f891 1067 	ldrb.w	r1, [r1, #103]	; 0x67
90002728:	440b      	add	r3, r1
9000272a:	6143      	str	r3, [r0, #20]
        if (stream.doInvalidateOnNextTick)
9000272c:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
90002730:	2b00      	cmp	r3, #0
90002732:	d0f2      	beq.n	9000271a <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x12>
     *
     * @param [in] videoBuffer Video buffer.
     */
    void setVideoBuffer(uint8_t* const videoBuffer)
    {
        buffer = videoBuffer;
90002734:	68a1      	ldr	r1, [r4, #8]
            widget.invalidate();
90002736:	4610      	mov	r0, r2
90002738:	6813      	ldr	r3, [r2, #0]
9000273a:	695b      	ldr	r3, [r3, #20]
9000273c:	6311      	str	r1, [r2, #48]	; 0x30
9000273e:	4798      	blx	r3
            stream.doInvalidateOnNextTick = false;
90002740:	2300      	movs	r3, #0
            if (!stream.hasMoreFrames && !stream.repeat)
90002742:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
            stream.doInvalidateOnNextTick = false;
90002746:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
            if (!stream.hasMoreFrames && !stream.repeat)
9000274a:	2800      	cmp	r0, #0
9000274c:	d1e5      	bne.n	9000271a <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x12>
9000274e:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
90002752:	2b00      	cmp	r3, #0
90002754:	d1e2      	bne.n	9000271c <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x14>
                stream.isPlaying = false;
90002756:	f884 0029 	strb.w	r0, [r4, #41]	; 0x29
    }
9000275a:	bd10      	pop	{r4, pc}
        assert(handle < no_streams);
9000275c:	4b03      	ldr	r3, [pc, #12]	; (9000276c <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x64>)
9000275e:	21d0      	movs	r1, #208	; 0xd0
90002760:	4a03      	ldr	r2, [pc, #12]	; (90002770 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x68>)
90002762:	4804      	ldr	r0, [pc, #16]	; (90002774 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x6c>)
90002764:	f024 ff76 	bl	90027654 <__assert_func>
90002768:	240281ec 	.word	0x240281ec
9000276c:	900290a8 	.word	0x900290a8
90002770:	90029b5c 	.word	0x90029b5c
90002774:	90029248 	.word	0x90029248

90002778 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE>:
    {
        // Running in UI thread

        for (uint32_t i = 0; i < no_streams; i++)
        {
            if (streams[i].isActive == false)
90002778:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
    virtual Handle registerVideoWidget(touchgfx::VideoWidget& widget)
9000277c:	b570      	push	{r4, r5, r6, lr}
            if (streams[i].isActive == false)
9000277e:	b9fb      	cbnz	r3, 900027c0 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE+0x48>
            {
                // Reset stream parameters
                streams[i] = Stream();
90002780:	2201      	movs	r2, #1
        if (topBufferRGB + sizeOfOneDecodeBuffer > (bufferRGB + sizeBufferRGB))
90002782:	6b85      	ldr	r5, [r0, #56]	; 0x38
                streams[i] = Stream();
90002784:	60c3      	str	r3, [r0, #12]
90002786:	f8a0 202d 	strh.w	r2, [r0, #45]	; 0x2d
        if (topBufferRGB + sizeOfOneDecodeBuffer > (bufferRGB + sizeBufferRGB))
9000278a:	f505 2487 	add.w	r4, r5, #276480	; 0x43800
        streams[handle].isActive = true;
9000278e:	f880 2028 	strb.w	r2, [r0, #40]	; 0x28
                streams[i] = Stream();
90002792:	6103      	str	r3, [r0, #16]
90002794:	6143      	str	r3, [r0, #20]
90002796:	6183      	str	r3, [r0, #24]
90002798:	61c3      	str	r3, [r0, #28]
9000279a:	6203      	str	r3, [r0, #32]
9000279c:	6243      	str	r3, [r0, #36]	; 0x24
9000279e:	f8c0 3029 	str.w	r3, [r0, #41]	; 0x29
        if (topBufferRGB + sizeOfOneDecodeBuffer > (bufferRGB + sizeBufferRGB))
900027a2:	e9d0 260c 	ldrd	r2, r6, [r0, #48]	; 0x30
900027a6:	4432      	add	r2, r6
900027a8:	4294      	cmp	r4, r2
900027aa:	d810      	bhi.n	900027ce <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE+0x56>
     * @param height Height of the videoBuffer in pixels
     */
    void setVideoBufferFormat(Bitmap::BitmapFormat bufferFormat, int16_t width, int16_t height)
    {
        format = bufferFormat;
        bufferWidth = width;
900027ac:	4a0b      	ldr	r2, [pc, #44]	; (900027dc <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE+0x64>)
        decodeBuffers[handle] = (uint32_t*)topBufferRGB;
900027ae:	6085      	str	r5, [r0, #8]
        topBufferRGB += sizeOfOneDecodeBuffer;
900027b0:	6384      	str	r4, [r0, #56]	; 0x38
    }
900027b2:	4618      	mov	r0, r3
        format = bufferFormat;
900027b4:	f881 3034 	strb.w	r3, [r1, #52]	; 0x34
        bufferWidth = width;
900027b8:	f8c1 2036 	str.w	r2, [r1, #54]	; 0x36
        buffer = videoBuffer;
900027bc:	630b      	str	r3, [r1, #48]	; 0x30
900027be:	bd70      	pop	{r4, r5, r6, pc}

                return static_cast<VideoController::Handle>(i);
            }
        }

        assert(0 && "Unable to find free video stream handle!");
900027c0:	4b07      	ldr	r3, [pc, #28]	; (900027e0 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE+0x68>)
900027c2:	f240 11c5 	movw	r1, #453	; 0x1c5
900027c6:	4a07      	ldr	r2, [pc, #28]	; (900027e4 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE+0x6c>)
900027c8:	4807      	ldr	r0, [pc, #28]	; (900027e8 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE+0x70>)
900027ca:	f024 ff43 	bl	90027654 <__assert_func>
            assert(0 && "registerVideoWidget: Unable to allocate RGB buffer!");
900027ce:	4b07      	ldr	r3, [pc, #28]	; (900027ec <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE+0x74>)
900027d0:	2152      	movs	r1, #82	; 0x52
900027d2:	4a07      	ldr	r2, [pc, #28]	; (900027f0 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE+0x78>)
900027d4:	4804      	ldr	r0, [pc, #16]	; (900027e8 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE+0x70>)
900027d6:	f024 ff3d 	bl	90027654 <__assert_func>
900027da:	bf00      	nop
900027dc:	012001e0 	.word	0x012001e0
900027e0:	90029cfc 	.word	0x90029cfc
900027e4:	90029d2c 	.word	0x90029d2c
900027e8:	90029248 	.word	0x90029248
900027ec:	90029eb4 	.word	0x90029eb4
900027f0:	90029ef0 	.word	0x90029ef0

900027f4 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>:
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
900027f4:	4b08      	ldr	r3, [pc, #32]	; (90002818 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv+0x24>)
900027f6:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
900027fa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
900027fe:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
90002802:	f3bf 8f6f 	isb	sy
90002806:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
9000280a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
9000280e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
90002812:	f3bf 8f6f 	isb	sy
}
90002816:	4770      	bx	lr
90002818:	e000e100 	.word	0xe000e100

9000281c <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>:
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
9000281c:	4b03      	ldr	r3, [pc, #12]	; (9000282c <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv+0x10>)
9000281e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
90002822:	609a      	str	r2, [r3, #8]
90002824:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
90002828:	609a      	str	r2, [r3, #8]
}
9000282a:	4770      	bx	lr
9000282c:	e000e100 	.word	0xe000e100

90002830 <_ZN20TouchGFXGeneratedHAL10initializeEv>:
{
90002830:	b538      	push	{r3, r4, r5, lr}
90002832:	4604      	mov	r4, r0
    HAL::initialize();
90002834:	f010 fc23 	bl	9001307e <_ZN8touchgfx3HAL10initializeEv>
    registerEventListener(*(Application::getInstance()));
90002838:	6823      	ldr	r3, [r4, #0]
9000283a:	6e5d      	ldr	r5, [r3, #100]	; 0x64
9000283c:	f015 fc5e 	bl	900180fc <_ZN8touchgfx11Application11getInstanceEv>
90002840:	4601      	mov	r1, r0
90002842:	4620      	mov	r0, r4
90002844:	47a8      	blx	r5
    setFrameBufferStartAddresses((void*)frameBuf, (void*)(frameBuf + sizeof(frameBuf) / (sizeof(uint32_t) * 2)), (void*)0);
90002846:	6823      	ldr	r3, [r4, #0]
90002848:	4a16      	ldr	r2, [pc, #88]	; (900028a4 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x74>)
9000284a:	f8d3 5088 	ldr.w	r5, [r3, #136]	; 0x88
9000284e:	4295      	cmp	r5, r2
90002850:	d11c      	bne.n	9000288c <_ZN20TouchGFXGeneratedHAL10initializeEv+0x5c>
        frameBuffer0 = reinterpret_cast<uint16_t*>(frameBuffer);
90002852:	4a15      	ldr	r2, [pc, #84]	; (900028a8 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x78>)
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
90002854:	2501      	movs	r5, #1
        setAnimationStorage(animationStorage);
90002856:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
        frameBuffer1 = reinterpret_cast<uint16_t*>(doubleBuffer);
9000285a:	f502 317f 	add.w	r1, r2, #261120	; 0x3fc00
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
9000285e:	4813      	ldr	r0, [pc, #76]	; (900028ac <_ZN20TouchGFXGeneratedHAL10initializeEv+0x7c>)
        frameBuffer0 = reinterpret_cast<uint16_t*>(frameBuffer);
90002860:	e9c4 210f 	strd	r2, r1, [r4, #60]	; 0x3c
        setAnimationStorage(animationStorage);
90002864:	4a12      	ldr	r2, [pc, #72]	; (900028b0 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x80>)
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
90002866:	7005      	strb	r5, [r0, #0]
90002868:	4293      	cmp	r3, r2
9000286a:	d116      	bne.n	9000289a <_ZN20TouchGFXGeneratedHAL10initializeEv+0x6a>
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
9000286c:	2300      	movs	r3, #0
        USE_ANIMATION_STORAGE = animationStorage != 0;
9000286e:	4a11      	ldr	r2, [pc, #68]	; (900028b4 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x84>)
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
90002870:	6463      	str	r3, [r4, #68]	; 0x44
        USE_ANIMATION_STORAGE = animationStorage != 0;
90002872:	7013      	strb	r3, [r2, #0]
    void addDMA(touchgfx::DMA_Interface& dma) { pDma = &dma; }
90002874:	6864      	ldr	r4, [r4, #4]
        sizeBufferRGB = sizeOfBuffer;
90002876:	f44f 2087 	mov.w	r0, #276480	; 0x43800
        mjpegDecoders[index] = &decoder;
9000287a:	4b0f      	ldr	r3, [pc, #60]	; (900028b8 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x88>)
9000287c:	490f      	ldr	r1, [pc, #60]	; (900028bc <_ZN20TouchGFXGeneratedHAL10initializeEv+0x8c>)
        bufferRGB = buffer;
9000287e:	4a10      	ldr	r2, [pc, #64]	; (900028c0 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x90>)
90002880:	644c      	str	r4, [r1, #68]	; 0x44
        mjpegDecoders[index] = &decoder;
90002882:	6059      	str	r1, [r3, #4]
        bufferRGB = buffer;
90002884:	631a      	str	r2, [r3, #48]	; 0x30
        sizeBufferRGB = sizeOfBuffer;
90002886:	e9c3 020d 	strd	r0, r2, [r3, #52]	; 0x34
}
9000288a:	bd38      	pop	{r3, r4, r5, pc}
    setFrameBufferStartAddresses((void*)frameBuf, (void*)(frameBuf + sizeof(frameBuf) / (sizeof(uint32_t) * 2)), (void*)0);
9000288c:	4a0d      	ldr	r2, [pc, #52]	; (900028c4 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x94>)
9000288e:	2300      	movs	r3, #0
90002890:	4620      	mov	r0, r4
90002892:	f5a2 317f 	sub.w	r1, r2, #261120	; 0x3fc00
90002896:	47a8      	blx	r5
90002898:	e7ec      	b.n	90002874 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x44>
        setAnimationStorage(animationStorage);
9000289a:	2100      	movs	r1, #0
9000289c:	4620      	mov	r0, r4
9000289e:	4798      	blx	r3
900028a0:	e7e8      	b.n	90002874 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x44>
900028a2:	bf00      	nop
900028a4:	90000811 	.word	0x90000811
900028a8:	d003fc00 	.word	0xd003fc00
900028ac:	240281ea 	.word	0x240281ea
900028b0:	90000695 	.word	0x90000695
900028b4:	240281eb 	.word	0x240281eb
900028b8:	24008d24 	.word	0x24008d24
900028bc:	24008cdc 	.word	0x24008cdc
900028c0:	d00bf400 	.word	0xd00bf400
900028c4:	d007f800 	.word	0xd007f800

900028c8 <HAL_LTDC_LineEventCallback>:
}

extern "C"
{
    void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef* hltdc)
    {
900028c8:	b510      	push	{r4, lr}
        return instance;
900028ca:	4c14      	ldr	r4, [pc, #80]	; (9000291c <HAL_LTDC_LineEventCallback+0x54>)
        if (!HAL::getInstance())
900028cc:	6823      	ldr	r3, [r4, #0]
900028ce:	b323      	cbz	r3, 9000291a <HAL_LTDC_LineEventCallback+0x52>
        {
            return;
        }

        if (LTDC->LIPCR == lcd_int_active_line)
900028d0:	4b13      	ldr	r3, [pc, #76]	; (90002920 <HAL_LTDC_LineEventCallback+0x58>)
900028d2:	4a14      	ldr	r2, [pc, #80]	; (90002924 <HAL_LTDC_LineEventCallback+0x5c>)
900028d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
900028d6:	8811      	ldrh	r1, [r2, #0]
900028d8:	428b      	cmp	r3, r1
900028da:	d00a      	beq.n	900028f2 <HAL_LTDC_LineEventCallback+0x2a>
            GPIO::set(GPIO::VSYNC_FREQ);
        }
        else
        {
            //exiting active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
900028dc:	f009 fe86 	bl	9000c5ec <HAL_LTDC_ProgramLineEvent>
900028e0:	6820      	ldr	r0, [r4, #0]
        allowDMATransfers();
900028e2:	6803      	ldr	r3, [r0, #0]
900028e4:	6a1b      	ldr	r3, [r3, #32]
900028e6:	4798      	blx	r3

            // Signal to the framework that display update has finished.
            HAL::getInstance()->frontPorchEntered();
            GPIO::clear(GPIO::VSYNC_FREQ);
900028e8:	2000      	movs	r0, #0
        }
    }
900028ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            GPIO::clear(GPIO::VSYNC_FREQ);
900028ee:	f7fd be75 	b.w	900005dc <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_porch_line);
900028f2:	4b0d      	ldr	r3, [pc, #52]	; (90002928 <HAL_LTDC_LineEventCallback+0x60>)
900028f4:	8819      	ldrh	r1, [r3, #0]
900028f6:	f009 fe79 	bl	9000c5ec <HAL_LTDC_ProgramLineEvent>
        return instance;
900028fa:	6822      	ldr	r2, [r4, #0]
        vSyncCnt++;
900028fc:	f892 3066 	ldrb.w	r3, [r2, #102]	; 0x66
90002900:	3301      	adds	r3, #1
90002902:	f882 3066 	strb.w	r3, [r2, #102]	; 0x66
            OSWrappers::signalVSync();
90002906:	f7ff f86b 	bl	900019e0 <_ZN8touchgfx10OSWrappers11signalVSyncEv>
            HAL::getInstance()->swapFrameBuffers();
9000290a:	6820      	ldr	r0, [r4, #0]
9000290c:	f011 f90a 	bl	90013b24 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
            GPIO::set(GPIO::VSYNC_FREQ);
90002910:	2000      	movs	r0, #0
    }
90002912:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            GPIO::set(GPIO::VSYNC_FREQ);
90002916:	f7fd be2d 	b.w	90000574 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
    }
9000291a:	bd10      	pop	{r4, pc}
9000291c:	240281ec 	.word	0x240281ec
90002920:	50001000 	.word	0x50001000
90002924:	24008cd8 	.word	0x24008cd8
90002928:	24008cd6 	.word	0x24008cd6

9000292c <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv>:
    void decoderTaskEntry()
9000292c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
90002930:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 900029ec <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0xc0>
90002934:	b083      	sub	sp, #12
                    stream.doInvalidateOnNextTick = true;
90002936:	2601      	movs	r6, #1
                    stream.hasMoreFrames = decoder->decodeNextFrame((uint8_t*)decodeBuffers[i], width, height, stride);
90002938:	f44f 7770 	mov.w	r7, #960	; 0x3c0
    void decoderTaskEntry()
9000293c:	4604      	mov	r4, r0
9000293e:	e024      	b.n	9000298a <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0x5e>
                        decoder->gotoFrame(stream.seek_to_frame);
90002940:	682b      	ldr	r3, [r5, #0]
90002942:	4628      	mov	r0, r5
90002944:	6a5b      	ldr	r3, [r3, #36]	; 0x24
90002946:	4798      	blx	r3
                        stream.seek_to_frame = 0;
90002948:	2300      	movs	r3, #0
9000294a:	6223      	str	r3, [r4, #32]
                    stream.hasMoreFrames = decoder->decodeNextFrame((uint8_t*)decodeBuffers[i], width, height, stride);
9000294c:	6829      	ldr	r1, [r5, #0]
9000294e:	f44f 7390 	mov.w	r3, #288	; 0x120
90002952:	9700      	str	r7, [sp, #0]
90002954:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
90002958:	f8d1 9014 	ldr.w	r9, [r1, #20]
9000295c:	4628      	mov	r0, r5
9000295e:	68a1      	ldr	r1, [r4, #8]
90002960:	47c8      	blx	r9
                    stream.frameCount++;
90002962:	6923      	ldr	r3, [r4, #16]
                    stream.hasMoreFrames = decoder->decodeNextFrame((uint8_t*)decodeBuffers[i], width, height, stride);
90002964:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
                    stream.frameCount++;
90002968:	3301      	adds	r3, #1
9000296a:	6123      	str	r3, [r4, #16]
                    if (stream.hasMoreFrames)
9000296c:	2800      	cmp	r0, #0
9000296e:	d033      	beq.n	900029d8 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0xac>
                        stream.frameNumber = decoder->getCurrentFrameNumber() - 1; // Points to frame after this
90002970:	682b      	ldr	r3, [r5, #0]
90002972:	6a9b      	ldr	r3, [r3, #40]	; 0x28
90002974:	4543      	cmp	r3, r8
90002976:	d131      	bne.n	900029dc <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0xb0>
    virtual uint32_t getCurrentFrameNumber() const { return frameNumber; }
90002978:	6968      	ldr	r0, [r5, #20]
9000297a:	3801      	subs	r0, #1
                    stream.doDecode = false;
9000297c:	2200      	movs	r2, #0
                        stream.frameNumber = decoder->getCurrentFrameNumber() - 1; // Points to frame after this
9000297e:	60e0      	str	r0, [r4, #12]
                    stream.doDecode = false;
90002980:	f884 202e 	strb.w	r2, [r4, #46]	; 0x2e
            MUTEX_UNLOCK(mutexBuffers);
90002984:	6c60      	ldr	r0, [r4, #68]	; 0x44
90002986:	f00c f9ed 	bl	9000ed64 <osMutexRelease>
            SEM_WAIT(semDecode);
9000298a:	f04f 31ff 	mov.w	r1, #4294967295
9000298e:	6c20      	ldr	r0, [r4, #64]	; 0x40
90002990:	f00c fa5a 	bl	9000ee48 <osSemaphoreAcquire>
            MUTEX_LOCK(mutexBuffers);
90002994:	f04f 31ff 	mov.w	r1, #4294967295
90002998:	6c60      	ldr	r0, [r4, #68]	; 0x44
9000299a:	f00c f9bf 	bl	9000ed1c <osMutexAcquire>
                if (stream.doDecode)
9000299e:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
900029a2:	2b00      	cmp	r3, #0
900029a4:	d0ee      	beq.n	90002984 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0x58>
                    if (stream.seek_to_frame > 0)
900029a6:	6a21      	ldr	r1, [r4, #32]
                    MJPEGDecoder* const decoder = mjpegDecoders[i];
900029a8:	6865      	ldr	r5, [r4, #4]
                    stream.doInvalidateOnNextTick = true;
900029aa:	f884 602b 	strb.w	r6, [r4, #43]	; 0x2b
                    if (stream.seek_to_frame > 0)
900029ae:	2900      	cmp	r1, #0
900029b0:	d1c6      	bne.n	90002940 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0x14>
                        if (stream.skip_frames > 0)
900029b2:	6a63      	ldr	r3, [r4, #36]	; 0x24
900029b4:	2b00      	cmp	r3, #0
900029b6:	d0c9      	beq.n	9000294c <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0x20>
                            decoder->gotoFrame(decoder->getCurrentFrameNumber() + stream.skip_frames);
900029b8:	682a      	ldr	r2, [r5, #0]
900029ba:	e9d2 9109 	ldrd	r9, r1, [r2, #36]	; 0x24
900029be:	4541      	cmp	r1, r8
900029c0:	d10f      	bne.n	900029e2 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0xb6>
900029c2:	6968      	ldr	r0, [r5, #20]
900029c4:	18c1      	adds	r1, r0, r3
900029c6:	4628      	mov	r0, r5
900029c8:	47c8      	blx	r9
                            stream.frameCount += stream.skip_frames;
900029ca:	6923      	ldr	r3, [r4, #16]
900029cc:	6a61      	ldr	r1, [r4, #36]	; 0x24
                            stream.skip_frames = 0;
900029ce:	2200      	movs	r2, #0
                            stream.frameCount += stream.skip_frames;
900029d0:	440b      	add	r3, r1
                            stream.skip_frames = 0;
900029d2:	6262      	str	r2, [r4, #36]	; 0x24
                            stream.frameCount += stream.skip_frames;
900029d4:	6123      	str	r3, [r4, #16]
900029d6:	e7b9      	b.n	9000294c <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0x20>
900029d8:	2001      	movs	r0, #1
900029da:	e7cf      	b.n	9000297c <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0x50>
                        stream.frameNumber = decoder->getCurrentFrameNumber() - 1; // Points to frame after this
900029dc:	4628      	mov	r0, r5
900029de:	4798      	blx	r3
900029e0:	e7cb      	b.n	9000297a <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0x4e>
                            decoder->gotoFrame(decoder->getCurrentFrameNumber() + stream.skip_frames);
900029e2:	4628      	mov	r0, r5
900029e4:	4788      	blx	r1
900029e6:	6a63      	ldr	r3, [r4, #36]	; 0x24
900029e8:	e7ec      	b.n	900029c4 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0x98>
900029ea:	bf00      	nop
900029ec:	90000989 	.word	0x90000989

900029f0 <videoTaskFunc>:
    videoController.decoderTaskEntry();
900029f0:	4801      	ldr	r0, [pc, #4]	; (900029f8 <videoTaskFunc+0x8>)
{
900029f2:	b508      	push	{r3, lr}
    videoController.decoderTaskEntry();
900029f4:	f7ff ff9a 	bl	9000292c <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv>
900029f8:	24008d24 	.word	0x24008d24

900029fc <_GLOBAL__sub_I_mjpegdecoder1>:
}
900029fc:	b538      	push	{r3, r4, r5, lr}
HardwareMJPEGDecoder mjpegdecoder1;
900029fe:	4815      	ldr	r0, [pc, #84]	; (90002a54 <_GLOBAL__sub_I_mjpegdecoder1+0x58>)
        Stream() : frameNumber(0), frameCount(0), tickCount(0), frame_rate_video(0), frame_rate_ticks(0),
90002a00:	2500      	movs	r5, #0
90002a02:	f7fe fbd3 	bl	900011ac <_ZN20HardwareMJPEGDecoderC1Ev>
          allowSkipFrames(false), firstDrawThisFrame(true), uiHasMutex(false), semDecode(0), mutexBuffers(0)
90002a06:	4c14      	ldr	r4, [pc, #80]	; (90002a58 <_GLOBAL__sub_I_mjpegdecoder1+0x5c>)
90002a08:	4914      	ldr	r1, [pc, #80]	; (90002a5c <_GLOBAL__sub_I_mjpegdecoder1+0x60>)
                   doInvalidateOnNextTick(false), hasMoreFrames(false), repeat(true), doDecode(false) {}
90002a0a:	f44f 7380 	mov.w	r3, #256	; 0x100
        semDecode = SEM_CREATE(); // Binary semaphore
90002a0e:	462a      	mov	r2, r5
90002a10:	2001      	movs	r0, #1
          allowSkipFrames(false), firstDrawThisFrame(true), uiHasMutex(false), semDecode(0), mutexBuffers(0)
90002a12:	6021      	str	r1, [r4, #0]
        semDecode = SEM_CREATE(); // Binary semaphore
90002a14:	4629      	mov	r1, r5
                   doInvalidateOnNextTick(false), hasMoreFrames(false), repeat(true), doDecode(false) {}
90002a16:	85a3      	strh	r3, [r4, #44]	; 0x2c
          allowSkipFrames(false), firstDrawThisFrame(true), uiHasMutex(false), semDecode(0), mutexBuffers(0)
90002a18:	87a3      	strh	r3, [r4, #60]	; 0x3c
        Stream() : frameNumber(0), frameCount(0), tickCount(0), frame_rate_video(0), frame_rate_ticks(0),
90002a1a:	60e5      	str	r5, [r4, #12]
                   isActive(false), isPlaying(false), isShowingOneFrame(false),
90002a1c:	62a5      	str	r5, [r4, #40]	; 0x28
                   doInvalidateOnNextTick(false), hasMoreFrames(false), repeat(true), doDecode(false) {}
90002a1e:	f884 502e 	strb.w	r5, [r4, #46]	; 0x2e
        : VideoController(), bufferRGB(0), sizeBufferRGB(0), topBufferRGB(0),
90002a22:	63a5      	str	r5, [r4, #56]	; 0x38
          allowSkipFrames(false), firstDrawThisFrame(true), uiHasMutex(false), semDecode(0), mutexBuffers(0)
90002a24:	f884 503e 	strb.w	r5, [r4, #62]	; 0x3e
        Stream() : frameNumber(0), frameCount(0), tickCount(0), frame_rate_video(0), frame_rate_ticks(0),
90002a28:	e9c4 5504 	strd	r5, r5, [r4, #16]
90002a2c:	e9c4 5506 	strd	r5, r5, [r4, #24]
                   seek_to_frame(0), skip_frames(0),
90002a30:	e9c4 5508 	strd	r5, r5, [r4, #32]
        : VideoController(), bufferRGB(0), sizeBufferRGB(0), topBufferRGB(0),
90002a34:	e9c4 550c 	strd	r5, r5, [r4, #48]	; 0x30
          allowSkipFrames(false), firstDrawThisFrame(true), uiHasMutex(false), semDecode(0), mutexBuffers(0)
90002a38:	e9c4 5510 	strd	r5, r5, [r4, #64]	; 0x40
90002a3c:	e9c4 5501 	strd	r5, r5, [r4, #4]
        semDecode = SEM_CREATE(); // Binary semaphore
90002a40:	f00c f9b2 	bl	9000eda8 <osSemaphoreNew>
90002a44:	4603      	mov	r3, r0
        mutexBuffers = MUTEX_CREATE();
90002a46:	4628      	mov	r0, r5
        semDecode = SEM_CREATE(); // Binary semaphore
90002a48:	6423      	str	r3, [r4, #64]	; 0x40
        mutexBuffers = MUTEX_CREATE();
90002a4a:	f00c f927 	bl	9000ec9c <osMutexNew>
90002a4e:	6460      	str	r0, [r4, #68]	; 0x44
}
90002a50:	bd38      	pop	{r3, r4, r5, pc}
90002a52:	bf00      	nop
90002a54:	24008cdc 	.word	0x24008cdc
90002a58:	24008d24 	.word	0x24008d24
90002a5c:	9002a0bc 	.word	0x9002a0bc

90002a60 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks>:
static uint32_t TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks(uint8_t *pInBuffer,
                                      uint8_t *pOutBuffer,
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{
90002a60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  int32_t c_red, c_blue, c_green;

  uint8_t *pOutAddr, *pOutAddr2;
  uint8_t *pChrom, *pLum;

  numberMCU = DataCount / YCBCR_420_BLOCK_SIZE;
90002a64:	4c7e      	ldr	r4, [pc, #504]	; (90002c60 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x200>)
{
90002a66:	b08d      	sub	sp, #52	; 0x34
  numberMCU = DataCount / YCBCR_420_BLOCK_SIZE;
90002a68:	fba4 4303 	umull	r4, r3, r4, r3
{
90002a6c:	9109      	str	r1, [sp, #36]	; 0x24
  numberMCU = DataCount / YCBCR_420_BLOCK_SIZE;
90002a6e:	0a19      	lsrs	r1, r3, #8
{
90002a70:	9208      	str	r2, [sp, #32]
  currentMCU = BlockIndex;

  while(currentMCU < (numberMCU + BlockIndex))
90002a72:	eb02 2313 	add.w	r3, r2, r3, lsr #8
{
90002a76:	9006      	str	r0, [sp, #24]
  numberMCU = DataCount / YCBCR_420_BLOCK_SIZE;
90002a78:	ee07 1a90 	vmov	s15, r1
  while(currentMCU < (numberMCU + BlockIndex))
90002a7c:	4293      	cmp	r3, r2
90002a7e:	930b      	str	r3, [sp, #44]	; 0x2c
90002a80:	f240 80e9 	bls.w	90002c56 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x1f6>
  {
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*16;
90002a84:	4b77      	ldr	r3, [pc, #476]	; (90002c64 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x204>)
90002a86:	f8df 81ec 	ldr.w	r8, [pc, #492]	; 90002c74 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x214>
90002a8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
90002a8c:	f8df 91e8 	ldr.w	r9, [pc, #488]	; 90002c78 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x218>
90002a90:	930a      	str	r3, [sp, #40]	; 0x28
90002a92:	9a06      	ldr	r2, [sp, #24]
    //tgfx: Set stride to the full width of the RGB Buffer, and not the video itself.
    JPEG_ConvertorParams.ScaledWidth = 480 * 2;

    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);

    currentMCU++;
90002a94:	f04f 0e02 	mov.w	lr, #2
90002a98:	9908      	ldr	r1, [sp, #32]
90002a9a:	f502 7080 	add.w	r0, r2, #256	; 0x100
90002a9e:	010b      	lsls	r3, r1, #4
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*16;
90002aa0:	3101      	adds	r1, #1
    currentMCU++;
90002aa2:	e9cd 2003 	strd	r2, r0, [sp, #12]
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*16;
90002aa6:	980a      	ldr	r0, [sp, #40]	; 0x28
90002aa8:	9108      	str	r1, [sp, #32]
90002aaa:	fbb3 f2f0 	udiv	r2, r3, r0
    yRef = ((currentMCU *16) % JPEG_ConvertorParams.WidthExtend);
90002aae:	fb00 3312 	mls	r3, r0, r2, r3
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
90002ab2:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
90002ab6:	005b      	lsls	r3, r3, #1
90002ab8:	eb03 2382 	add.w	r3, r3, r2, lsl #10
90002abc:	9301      	str	r3, [sp, #4]

    pChrom = pInBuffer + 256; /* pChroma = pInBuffer + 4*64 */

    pLum = pInBuffer;

    for(i= 0; i <  16; i+=2)
90002abe:	e009      	b.n	90002ad4 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x74>
      if(i == 8)
      {
        pLum = pInBuffer + 128;
      }

      if(refline < JPEG_ConvertorParams.ScaledWidth * 288)
90002ac0:	9b01      	ldr	r3, [sp, #4]
90002ac2:	f5b3 2f87 	cmp.w	r3, #276480	; 0x43800
90002ac6:	d30f      	bcc.n	90002ae8 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x88>
    for(i= 0; i <  16; i+=2)
90002ac8:	f1be 0f10 	cmp.w	lr, #16
90002acc:	f000 80b6 	beq.w	90002c3c <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x1dc>
90002ad0:	f10e 0e02 	add.w	lr, lr, #2
      if(i == 8)
90002ad4:	f1be 0f0a 	cmp.w	lr, #10
90002ad8:	d1f2      	bne.n	90002ac0 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x60>
        pLum = pInBuffer + 128;
90002ada:	9b06      	ldr	r3, [sp, #24]
90002adc:	3380      	adds	r3, #128	; 0x80
90002ade:	9303      	str	r3, [sp, #12]
      if(refline < JPEG_ConvertorParams.ScaledWidth * 288)
90002ae0:	9b01      	ldr	r3, [sp, #4]
90002ae2:	f5b3 2f87 	cmp.w	r3, #276480	; 0x43800
90002ae6:	d2f3      	bcs.n	90002ad0 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x70>
      {
        pOutAddr = pOutBuffer + refline;
90002ae8:	9a01      	ldr	r2, [sp, #4]
90002aea:	9b09      	ldr	r3, [sp, #36]	; 0x24
90002aec:	f8cd e01c 	str.w	lr, [sp, #28]
90002af0:	4413      	add	r3, r2
90002af2:	e9dd 2103 	ldrd	r2, r1, [sp, #12]
90002af6:	f103 0c10 	add.w	ip, r3, #16
90002afa:	3330      	adds	r3, #48	; 0x30
90002afc:	4696      	mov	lr, r2
90002afe:	9102      	str	r1, [sp, #8]
90002b00:	9305      	str	r3, [sp, #20]
90002b02:	9b02      	ldr	r3, [sp, #8]
90002b04:	f50c 766c 	add.w	r6, ip, #944	; 0x3b0
90002b08:	f1ac 0510 	sub.w	r5, ip, #16
        pOutAddr2 = pOutAddr + JPEG_ConvertorParams.ScaledWidth;

        for(k= 0; k<2; k++)
        {
          for(j=0; j < 8; j+=2)
90002b0c:	4674      	mov	r4, lr
90002b0e:	1e5f      	subs	r7, r3, #1
          {
            cbcomp = (int32_t)(*(pChrom));
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
90002b10:	f817 3f01 	ldrb.w	r3, [r7, #1]!
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
#endif /* JPEG_RGB_FORMAT */

            pOutAddr += JPEG_BYTES_PER_PIXEL * 2;
90002b14:	3504      	adds	r5, #4
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
90002b16:	4954      	ldr	r1, [pc, #336]	; (90002c68 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x208>)
          for(j=0; j < 8; j+=2)
90002b18:	3402      	adds	r4, #2
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));
90002b1a:	f897 0040 	ldrb.w	r0, [r7, #64]	; 0x40
            pOutAddr2 += JPEG_BYTES_PER_PIXEL * 2;
90002b1e:	3604      	adds	r6, #4
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
90002b20:	f851 a023 	ldr.w	sl, [r1, r3, lsl #2]
          for(j=0; j < 8; j+=2)
90002b24:	4565      	cmp	r5, ip
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
90002b26:	4951      	ldr	r1, [pc, #324]	; (90002c6c <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x20c>)
            ycomp = (int32_t)(*(pLum +j));
90002b28:	f814 2c02 	ldrb.w	r2, [r4, #-2]
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
90002b2c:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
90002b30:	f858 3020 	ldr.w	r3, [r8, r0, lsl #2]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90002b34:	4449      	add	r1, r9
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
90002b36:	449a      	add	sl, r3
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));
90002b38:	4b4d      	ldr	r3, [pc, #308]	; (90002c70 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x210>)
90002b3a:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002b3e:	eb09 432a 	add.w	r3, r9, sl, asr #16
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90002b42:	eb01 0a02 	add.w	sl, r1, r2
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002b46:	4448      	add	r0, r9
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002b48:	eb03 0b02 	add.w	fp, r3, r2
90002b4c:	f89a a100 	ldrb.w	sl, [sl, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002b50:	4402      	add	r2, r0
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002b52:	f89b b100 	ldrb.w	fp, [fp, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002b56:	f892 2100 	ldrb.w	r2, [r2, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002b5a:	ea4f 0b9b 	mov.w	fp, fp, lsr #2
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002b5e:	ea4f 02d2 	mov.w	r2, r2, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002b62:	ea4f 1b4b 	mov.w	fp, fp, lsl #5
90002b66:	ea4b 22c2 	orr.w	r2, fp, r2, lsl #11
90002b6a:	ea42 02da 	orr.w	r2, r2, sl, lsr #3
            *(__IO uint16_t *)pOutAddr =
90002b6e:	f825 2c04 	strh.w	r2, [r5, #-4]
            ycomp = (int32_t)(*(pLum +j +1));
90002b72:	f814 ac01 	ldrb.w	sl, [r4, #-1]
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002b76:	eb03 020a 	add.w	r2, r3, sl
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002b7a:	eb00 0b0a 	add.w	fp, r0, sl
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90002b7e:	448a      	add	sl, r1
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002b80:	f892 2100 	ldrb.w	r2, [r2, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002b84:	f89b b100 	ldrb.w	fp, [fp, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002b88:	ea4f 0292 	mov.w	r2, r2, lsr #2
90002b8c:	f89a a100 	ldrb.w	sl, [sl, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002b90:	ea4f 0bdb 	mov.w	fp, fp, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002b94:	ea4f 1242 	mov.w	r2, r2, lsl #5
90002b98:	ea42 22cb 	orr.w	r2, r2, fp, lsl #11
90002b9c:	ea42 02da 	orr.w	r2, r2, sl, lsr #3
            *((__IO uint16_t *)(pOutAddr + 2)) =
90002ba0:	f825 2c02 	strh.w	r2, [r5, #-2]
            ycomp = (int32_t)(*(pLum +j +8));
90002ba4:	f894 a006 	ldrb.w	sl, [r4, #6]
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002ba8:	eb03 020a 	add.w	r2, r3, sl
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002bac:	eb00 0b0a 	add.w	fp, r0, sl
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90002bb0:	448a      	add	sl, r1
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002bb2:	f892 2100 	ldrb.w	r2, [r2, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002bb6:	f89b b100 	ldrb.w	fp, [fp, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002bba:	ea4f 0292 	mov.w	r2, r2, lsr #2
90002bbe:	f89a a100 	ldrb.w	sl, [sl, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002bc2:	ea4f 0bdb 	mov.w	fp, fp, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002bc6:	ea4f 1242 	mov.w	r2, r2, lsl #5
90002bca:	ea42 22cb 	orr.w	r2, r2, fp, lsl #11
90002bce:	ea42 02da 	orr.w	r2, r2, sl, lsr #3
            *(__IO uint16_t *)pOutAddr2 =
90002bd2:	f826 2c04 	strh.w	r2, [r6, #-4]
            ycomp = (int32_t)(*(pLum +j +8 +1));
90002bd6:	79e2      	ldrb	r2, [r4, #7]
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002bd8:	4413      	add	r3, r2
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002bda:	4410      	add	r0, r2
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90002bdc:	4411      	add	r1, r2
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002bde:	f893 3100 	ldrb.w	r3, [r3, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002be2:	f890 2100 	ldrb.w	r2, [r0, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002be6:	ea4f 0393 	mov.w	r3, r3, lsr #2
90002bea:	f891 1100 	ldrb.w	r1, [r1, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002bee:	ea4f 02d2 	mov.w	r2, r2, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002bf2:	ea4f 1343 	mov.w	r3, r3, lsl #5
90002bf6:	ea43 23c2 	orr.w	r3, r3, r2, lsl #11
90002bfa:	ea43 03d1 	orr.w	r3, r3, r1, lsr #3
            *((__IO uint16_t *)(pOutAddr2 +2)) =
90002bfe:	f826 3c02 	strh.w	r3, [r6, #-2]
          for(j=0; j < 8; j+=2)
90002c02:	d185      	bne.n	90002b10 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0xb0>

            pChrom++;
90002c04:	9b02      	ldr	r3, [sp, #8]
        for(k= 0; k<2; k++)
90002c06:	f105 0c10 	add.w	ip, r5, #16
          }
          pLum += 64;
90002c0a:	f10e 0e40 	add.w	lr, lr, #64	; 0x40
            pChrom++;
90002c0e:	3304      	adds	r3, #4
90002c10:	9302      	str	r3, [sp, #8]
        for(k= 0; k<2; k++)
90002c12:	9b05      	ldr	r3, [sp, #20]
90002c14:	4563      	cmp	r3, ip
90002c16:	f47f af74 	bne.w	90002b02 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0xa2>
            pChrom++;
90002c1a:	9b04      	ldr	r3, [sp, #16]
90002c1c:	f8dd e01c 	ldr.w	lr, [sp, #28]
90002c20:	3308      	adds	r3, #8
    for(i= 0; i <  16; i+=2)
90002c22:	f1be 0f10 	cmp.w	lr, #16
            pChrom++;
90002c26:	9304      	str	r3, [sp, #16]
        }

        pLum = pLum - 128 + 16;
90002c28:	9b03      	ldr	r3, [sp, #12]
90002c2a:	f103 0310 	add.w	r3, r3, #16
90002c2e:	9303      	str	r3, [sp, #12]

        refline += 2*JPEG_ConvertorParams.ScaledWidth;
90002c30:	9b01      	ldr	r3, [sp, #4]
90002c32:	f503 63f0 	add.w	r3, r3, #1920	; 0x780
90002c36:	9301      	str	r3, [sp, #4]
    for(i= 0; i <  16; i+=2)
90002c38:	f47f af4a 	bne.w	90002ad0 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x70>
      }
    }

    pInBuffer +=  YCBCR_420_BLOCK_SIZE;
90002c3c:	9b06      	ldr	r3, [sp, #24]
  while(currentMCU < (numberMCU + BlockIndex))
90002c3e:	9a08      	ldr	r2, [sp, #32]
    pInBuffer +=  YCBCR_420_BLOCK_SIZE;
90002c40:	f503 73c0 	add.w	r3, r3, #384	; 0x180
90002c44:	9306      	str	r3, [sp, #24]
  while(currentMCU < (numberMCU + BlockIndex))
90002c46:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
90002c48:	4293      	cmp	r3, r2
90002c4a:	f47f af22 	bne.w	90002a92 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x32>
90002c4e:	f44f 7370 	mov.w	r3, #960	; 0x3c0
90002c52:	4a04      	ldr	r2, [pc, #16]	; (90002c64 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x204>)
90002c54:	6293      	str	r3, [r2, #40]	; 0x28
  }
  return numberMCU;
}
90002c56:	ee17 0a90 	vmov	r0, s15
90002c5a:	b00d      	add	sp, #52	; 0x34
90002c5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90002c60:	aaaaaaab 	.word	0xaaaaaaab
90002c64:	2400b9ec 	.word	0x2400b9ec
90002c68:	24009d6c 	.word	0x24009d6c
90002c6c:	2400996c 	.word	0x2400996c
90002c70:	2400a56c 	.word	0x2400a56c
90002c74:	2400a16c 	.word	0x2400a16c
90002c78:	9002a0f4 	.word	0x9002a0f4

90002c7c <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks>:
static uint32_t JPEG_MCU_YCbCr422_ARGB_ConvertBlocks(uint8_t *pInBuffer,
                                      uint8_t *pOutBuffer,
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{
90002c7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  int32_t c_red, c_blue, c_green;

  uint8_t *pOutAddr;
  uint8_t *pChrom, *pLum;

  numberMCU = DataCount / YCBCR_422_BLOCK_SIZE;
90002c80:	0a1c      	lsrs	r4, r3, #8
{
90002c82:	b08d      	sub	sp, #52	; 0x34
  currentMCU = BlockIndex;

  while(currentMCU < (numberMCU + BlockIndex))
90002c84:	eb02 2313 	add.w	r3, r2, r3, lsr #8
  numberMCU = DataCount / YCBCR_422_BLOCK_SIZE;
90002c88:	ee07 4a90 	vmov	s15, r4
{
90002c8c:	9208      	str	r2, [sp, #32]
  while(currentMCU < (numberMCU + BlockIndex))
90002c8e:	429a      	cmp	r2, r3
{
90002c90:	9007      	str	r0, [sp, #28]
90002c92:	9109      	str	r1, [sp, #36]	; 0x24
  while(currentMCU < (numberMCU + BlockIndex))
90002c94:	930b      	str	r3, [sp, #44]	; 0x2c
90002c96:	f080 814a 	bcs.w	90002f2e <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x2b2>
  {
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*8;
90002c9a:	4ba7      	ldr	r3, [pc, #668]	; (90002f38 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x2bc>)
90002c9c:	4da7      	ldr	r5, [pc, #668]	; (90002f3c <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x2c0>)
90002c9e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
90002ca0:	f8df 929c 	ldr.w	r9, [pc, #668]	; 90002f40 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x2c4>
90002ca4:	920a      	str	r2, [sp, #40]	; 0x28

    yRef = ((currentMCU *16) % JPEG_ConvertorParams.WidthExtend);

    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
90002ca6:	6a9a      	ldr	r2, [r3, #40]	; 0x28

    pLum = pInBuffer;

    for(i= 0; i <  8; i++)
    {
       if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
90002ca8:	691b      	ldr	r3, [r3, #16]
90002caa:	f8df a298 	ldr.w	sl, [pc, #664]	; 90002f44 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x2c8>
90002cae:	f8df b298 	ldr.w	fp, [pc, #664]	; 90002f48 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x2cc>
90002cb2:	f8df 8298 	ldr.w	r8, [pc, #664]	; 90002f4c <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x2d0>
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
90002cb6:	9206      	str	r2, [sp, #24]
       if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
90002cb8:	9301      	str	r3, [sp, #4]
90002cba:	e008      	b.n	90002cce <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x52>

        refline += JPEG_ConvertorParams.ScaledWidth;
      }
    }

    pInBuffer +=  YCBCR_422_BLOCK_SIZE;
90002cbc:	9b07      	ldr	r3, [sp, #28]
  while(currentMCU < (numberMCU + BlockIndex))
90002cbe:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    pInBuffer +=  YCBCR_422_BLOCK_SIZE;
90002cc0:	f503 7380 	add.w	r3, r3, #256	; 0x100
90002cc4:	9307      	str	r3, [sp, #28]
  while(currentMCU < (numberMCU + BlockIndex))
90002cc6:	9b08      	ldr	r3, [sp, #32]
90002cc8:	4293      	cmp	r3, r2
90002cca:	f000 8130 	beq.w	90002f2e <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x2b2>
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*8;
90002cce:	9a07      	ldr	r2, [sp, #28]
90002cd0:	9908      	ldr	r1, [sp, #32]
90002cd2:	f102 0080 	add.w	r0, r2, #128	; 0x80
90002cd6:	010b      	lsls	r3, r1, #4
90002cd8:	3101      	adds	r1, #1
    currentMCU++;
90002cda:	e9cd 0202 	strd	r0, r2, [sp, #8]
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*8;
90002cde:	980a      	ldr	r0, [sp, #40]	; 0x28
90002ce0:	9108      	str	r1, [sp, #32]
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
90002ce2:	9906      	ldr	r1, [sp, #24]
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*8;
90002ce4:	fbb3 f2f0 	udiv	r2, r3, r0
    yRef = ((currentMCU *16) % JPEG_ConvertorParams.WidthExtend);
90002ce8:	fb00 3312 	mls	r3, r0, r2, r3
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
90002cec:	fb01 f202 	mul.w	r2, r1, r2
90002cf0:	005b      	lsls	r3, r3, #1
90002cf2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
90002cf6:	9300      	str	r3, [sp, #0]
    currentMCU++;
90002cf8:	2308      	movs	r3, #8
90002cfa:	9305      	str	r3, [sp, #20]
       if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
90002cfc:	e9dd 2300 	ldrd	r2, r3, [sp]
90002d00:	4293      	cmp	r3, r2
90002d02:	d9db      	bls.n	90002cbc <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x40>
        pOutAddr = pOutBuffer + refline;
90002d04:	9b09      	ldr	r3, [sp, #36]	; 0x24
90002d06:	4413      	add	r3, r2
        for(k= 0; k<2; k++)
90002d08:	9a03      	ldr	r2, [sp, #12]
90002d0a:	f102 0140 	add.w	r1, r2, #64	; 0x40
90002d0e:	9a02      	ldr	r2, [sp, #8]
90002d10:	f103 0020 	add.w	r0, r3, #32
90002d14:	3204      	adds	r2, #4
90002d16:	9004      	str	r0, [sp, #16]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));
90002d18:	f892 003c 	ldrb.w	r0, [r2, #60]	; 0x3c
90002d1c:	3310      	adds	r3, #16
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
90002d1e:	f812 4c04 	ldrb.w	r4, [r2, #-4]
        for(k= 0; k<2; k++)
90002d22:	3140      	adds	r1, #64	; 0x40
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));
90002d24:	f859 7020 	ldr.w	r7, [r9, r0, lsl #2]
        for(k= 0; k<2; k++)
90002d28:	3204      	adds	r2, #4
            ycomp = (int32_t)(*(pLum +j));
90002d2a:	f811 cc80 	ldrb.w	ip, [r1, #-128]
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
90002d2e:	f855 6024 	ldr.w	r6, [r5, r4, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002d32:	4447      	add	r7, r8
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
90002d34:	f85b 4024 	ldr.w	r4, [fp, r4, lsl #2]
90002d38:	f85a 0020 	ldr.w	r0, [sl, r0, lsl #2]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90002d3c:	4446      	add	r6, r8
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
90002d3e:	4420      	add	r0, r4
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002d40:	eb07 040c 	add.w	r4, r7, ip
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002d44:	eb08 4020 	add.w	r0, r8, r0, asr #16
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002d48:	f894 e100 	ldrb.w	lr, [r4, #256]	; 0x100
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90002d4c:	eb06 040c 	add.w	r4, r6, ip
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002d50:	4484      	add	ip, r0
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002d52:	ea4f 0ede 	mov.w	lr, lr, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002d56:	f894 4100 	ldrb.w	r4, [r4, #256]	; 0x100
90002d5a:	f89c c100 	ldrb.w	ip, [ip, #256]	; 0x100
90002d5e:	08e4      	lsrs	r4, r4, #3
90002d60:	ea4f 0c9c 	mov.w	ip, ip, lsr #2
90002d64:	ea44 24ce 	orr.w	r4, r4, lr, lsl #11
90002d68:	ea44 144c 	orr.w	r4, r4, ip, lsl #5
            *(__IO uint16_t *)pOutAddr =
90002d6c:	f823 4c10 	strh.w	r4, [r3, #-16]
            ycomp = (int32_t)(*(pLum +j +1));
90002d70:	f811 4c7f 	ldrb.w	r4, [r1, #-127]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90002d74:	4426      	add	r6, r4
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002d76:	4427      	add	r7, r4
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002d78:	4404      	add	r4, r0
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002d7a:	f897 7100 	ldrb.w	r7, [r7, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002d7e:	f896 0100 	ldrb.w	r0, [r6, #256]	; 0x100
90002d82:	f894 4100 	ldrb.w	r4, [r4, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002d86:	08fe      	lsrs	r6, r7, #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002d88:	08c0      	lsrs	r0, r0, #3
90002d8a:	08a4      	lsrs	r4, r4, #2
90002d8c:	ea40 20c6 	orr.w	r0, r0, r6, lsl #11
90002d90:	ea40 1044 	orr.w	r0, r0, r4, lsl #5
            *((__IO uint16_t *)(pOutAddr + 2)) =
90002d94:	f823 0c0e 	strh.w	r0, [r3, #-14]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));
90002d98:	f892 0039 	ldrb.w	r0, [r2, #57]	; 0x39
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
90002d9c:	f812 4c07 	ldrb.w	r4, [r2, #-7]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));
90002da0:	f859 7020 	ldr.w	r7, [r9, r0, lsl #2]
            ycomp = (int32_t)(*(pLum +j));
90002da4:	f811 cc7e 	ldrb.w	ip, [r1, #-126]
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
90002da8:	f855 6024 	ldr.w	r6, [r5, r4, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002dac:	4447      	add	r7, r8
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
90002dae:	f85b 4024 	ldr.w	r4, [fp, r4, lsl #2]
90002db2:	f85a 0020 	ldr.w	r0, [sl, r0, lsl #2]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90002db6:	4446      	add	r6, r8
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
90002db8:	4420      	add	r0, r4
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002dba:	eb07 040c 	add.w	r4, r7, ip
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002dbe:	eb08 4020 	add.w	r0, r8, r0, asr #16
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002dc2:	f894 e100 	ldrb.w	lr, [r4, #256]	; 0x100
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90002dc6:	eb06 040c 	add.w	r4, r6, ip
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002dca:	4484      	add	ip, r0
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002dcc:	ea4f 0ede 	mov.w	lr, lr, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002dd0:	f894 4100 	ldrb.w	r4, [r4, #256]	; 0x100
90002dd4:	f89c c100 	ldrb.w	ip, [ip, #256]	; 0x100
90002dd8:	08e4      	lsrs	r4, r4, #3
90002dda:	ea4f 0c9c 	mov.w	ip, ip, lsr #2
90002dde:	ea44 24ce 	orr.w	r4, r4, lr, lsl #11
90002de2:	ea44 144c 	orr.w	r4, r4, ip, lsl #5
            *(__IO uint16_t *)pOutAddr =
90002de6:	f823 4c0c 	strh.w	r4, [r3, #-12]
            ycomp = (int32_t)(*(pLum +j +1));
90002dea:	f811 4c7d 	ldrb.w	r4, [r1, #-125]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90002dee:	4426      	add	r6, r4
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002df0:	4427      	add	r7, r4
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002df2:	4404      	add	r4, r0
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002df4:	f897 7100 	ldrb.w	r7, [r7, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002df8:	f896 0100 	ldrb.w	r0, [r6, #256]	; 0x100
90002dfc:	f894 4100 	ldrb.w	r4, [r4, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002e00:	08fe      	lsrs	r6, r7, #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002e02:	08c0      	lsrs	r0, r0, #3
90002e04:	08a4      	lsrs	r4, r4, #2
90002e06:	ea40 20c6 	orr.w	r0, r0, r6, lsl #11
90002e0a:	ea40 1044 	orr.w	r0, r0, r4, lsl #5
            *((__IO uint16_t *)(pOutAddr + 2)) =
90002e0e:	f823 0c0a 	strh.w	r0, [r3, #-10]
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
90002e12:	f812 4c06 	ldrb.w	r4, [r2, #-6]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));
90002e16:	f892 003a 	ldrb.w	r0, [r2, #58]	; 0x3a
            ycomp = (int32_t)(*(pLum +j));
90002e1a:	f811 cc7c 	ldrb.w	ip, [r1, #-124]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));
90002e1e:	f859 7020 	ldr.w	r7, [r9, r0, lsl #2]
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
90002e22:	f855 6024 	ldr.w	r6, [r5, r4, lsl #2]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
90002e26:	f85a 0020 	ldr.w	r0, [sl, r0, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002e2a:	4447      	add	r7, r8
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
90002e2c:	f85b 4024 	ldr.w	r4, [fp, r4, lsl #2]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90002e30:	4446      	add	r6, r8
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
90002e32:	4420      	add	r0, r4
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002e34:	eb07 040c 	add.w	r4, r7, ip
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002e38:	eb08 4020 	add.w	r0, r8, r0, asr #16
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002e3c:	f894 e100 	ldrb.w	lr, [r4, #256]	; 0x100
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90002e40:	eb06 040c 	add.w	r4, r6, ip
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002e44:	4484      	add	ip, r0
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002e46:	ea4f 0ede 	mov.w	lr, lr, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002e4a:	f894 4100 	ldrb.w	r4, [r4, #256]	; 0x100
90002e4e:	f89c c100 	ldrb.w	ip, [ip, #256]	; 0x100
90002e52:	08e4      	lsrs	r4, r4, #3
90002e54:	ea4f 0c9c 	mov.w	ip, ip, lsr #2
90002e58:	ea44 24ce 	orr.w	r4, r4, lr, lsl #11
90002e5c:	ea44 144c 	orr.w	r4, r4, ip, lsl #5
            *(__IO uint16_t *)pOutAddr =
90002e60:	f823 4c08 	strh.w	r4, [r3, #-8]
            ycomp = (int32_t)(*(pLum +j +1));
90002e64:	f811 4c7b 	ldrb.w	r4, [r1, #-123]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90002e68:	4426      	add	r6, r4
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002e6a:	4427      	add	r7, r4
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002e6c:	4404      	add	r4, r0
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002e6e:	f897 7100 	ldrb.w	r7, [r7, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002e72:	f896 0100 	ldrb.w	r0, [r6, #256]	; 0x100
90002e76:	f894 4100 	ldrb.w	r4, [r4, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002e7a:	08fe      	lsrs	r6, r7, #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002e7c:	08c0      	lsrs	r0, r0, #3
90002e7e:	08a4      	lsrs	r4, r4, #2
90002e80:	ea40 20c6 	orr.w	r0, r0, r6, lsl #11
90002e84:	ea40 1044 	orr.w	r0, r0, r4, lsl #5
            *((__IO uint16_t *)(pOutAddr + 2)) =
90002e88:	f823 0c06 	strh.w	r0, [r3, #-6]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));
90002e8c:	f892 003b 	ldrb.w	r0, [r2, #59]	; 0x3b
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
90002e90:	f812 4c05 	ldrb.w	r4, [r2, #-5]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));
90002e94:	f859 7020 	ldr.w	r7, [r9, r0, lsl #2]
            ycomp = (int32_t)(*(pLum +j));
90002e98:	f811 cc7a 	ldrb.w	ip, [r1, #-122]
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
90002e9c:	f855 6024 	ldr.w	r6, [r5, r4, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002ea0:	4447      	add	r7, r8
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
90002ea2:	f85b 4024 	ldr.w	r4, [fp, r4, lsl #2]
90002ea6:	f85a 0020 	ldr.w	r0, [sl, r0, lsl #2]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90002eaa:	4446      	add	r6, r8
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
90002eac:	4420      	add	r0, r4
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002eae:	eb07 040c 	add.w	r4, r7, ip
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002eb2:	eb08 4020 	add.w	r0, r8, r0, asr #16
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002eb6:	f894 e100 	ldrb.w	lr, [r4, #256]	; 0x100
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90002eba:	eb06 040c 	add.w	r4, r6, ip
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002ebe:	4484      	add	ip, r0
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002ec0:	ea4f 0ede 	mov.w	lr, lr, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002ec4:	f894 4100 	ldrb.w	r4, [r4, #256]	; 0x100
90002ec8:	f89c c100 	ldrb.w	ip, [ip, #256]	; 0x100
90002ecc:	08e4      	lsrs	r4, r4, #3
90002ece:	ea4f 0c9c 	mov.w	ip, ip, lsr #2
90002ed2:	ea44 24ce 	orr.w	r4, r4, lr, lsl #11
90002ed6:	ea44 144c 	orr.w	r4, r4, ip, lsl #5
            *(__IO uint16_t *)pOutAddr =
90002eda:	f823 4c04 	strh.w	r4, [r3, #-4]
            ycomp = (int32_t)(*(pLum +j +1));
90002ede:	f811 4c79 	ldrb.w	r4, [r1, #-121]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90002ee2:	4426      	add	r6, r4
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002ee4:	4427      	add	r7, r4
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002ee6:	4404      	add	r4, r0
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002ee8:	f897 7100 	ldrb.w	r7, [r7, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002eec:	f896 0100 	ldrb.w	r0, [r6, #256]	; 0x100
90002ef0:	f894 4100 	ldrb.w	r4, [r4, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002ef4:	08fe      	lsrs	r6, r7, #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002ef6:	08c0      	lsrs	r0, r0, #3
90002ef8:	08a4      	lsrs	r4, r4, #2
90002efa:	ea40 20c6 	orr.w	r0, r0, r6, lsl #11
90002efe:	ea40 1044 	orr.w	r0, r0, r4, lsl #5
            *((__IO uint16_t *)(pOutAddr + 2)) =
90002f02:	f823 0c02 	strh.w	r0, [r3, #-2]
        for(k= 0; k<2; k++)
90002f06:	9804      	ldr	r0, [sp, #16]
90002f08:	4283      	cmp	r3, r0
90002f0a:	f47f af05 	bne.w	90002d18 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x9c>
            pChrom++;
90002f0e:	9b02      	ldr	r3, [sp, #8]
        refline += JPEG_ConvertorParams.ScaledWidth;
90002f10:	9a06      	ldr	r2, [sp, #24]
            pChrom++;
90002f12:	3308      	adds	r3, #8
90002f14:	9302      	str	r3, [sp, #8]
        pLum = pLum - 128 + 8;
90002f16:	9b03      	ldr	r3, [sp, #12]
90002f18:	3308      	adds	r3, #8
90002f1a:	9303      	str	r3, [sp, #12]
        refline += JPEG_ConvertorParams.ScaledWidth;
90002f1c:	9b00      	ldr	r3, [sp, #0]
90002f1e:	4413      	add	r3, r2
90002f20:	9300      	str	r3, [sp, #0]
    for(i= 0; i <  8; i++)
90002f22:	9b05      	ldr	r3, [sp, #20]
90002f24:	3b01      	subs	r3, #1
90002f26:	9305      	str	r3, [sp, #20]
90002f28:	f47f aee8 	bne.w	90002cfc <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x80>
90002f2c:	e6c6      	b.n	90002cbc <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x40>
  }
  return numberMCU;
}
90002f2e:	ee17 0a90 	vmov	r0, s15
90002f32:	b00d      	add	sp, #52	; 0x34
90002f34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90002f38:	2400b9ec 	.word	0x2400b9ec
90002f3c:	2400996c 	.word	0x2400996c
90002f40:	2400a56c 	.word	0x2400a56c
90002f44:	2400a16c 	.word	0x2400a16c
90002f48:	24009d6c 	.word	0x24009d6c
90002f4c:	9002a0f4 	.word	0x9002a0f4

90002f50 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks>:
static uint32_t JPEG_MCU_YCbCr444_ARGB_ConvertBlocks(uint8_t *pInBuffer,
                                      uint8_t *pOutBuffer,
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{
90002f50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  int32_t c_red, c_blue, c_green;

  uint8_t *pOutAddr;
  uint8_t *pChrom, *pLum;

  numberMCU = DataCount / YCBCR_444_BLOCK_SIZE;
90002f54:	4cb6      	ldr	r4, [pc, #728]	; (90003230 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x2e0>)
{
90002f56:	b089      	sub	sp, #36	; 0x24
  numberMCU = DataCount / YCBCR_444_BLOCK_SIZE;
90002f58:	fba4 4303 	umull	r4, r3, r4, r3
{
90002f5c:	9102      	str	r1, [sp, #8]
  numberMCU = DataCount / YCBCR_444_BLOCK_SIZE;
90002f5e:	09d9      	lsrs	r1, r3, #7
  currentMCU = BlockIndex;

  while(currentMCU < (numberMCU + BlockIndex))
90002f60:	eb02 13d3 	add.w	r3, r2, r3, lsr #7
  numberMCU = DataCount / YCBCR_444_BLOCK_SIZE;
90002f64:	ee07 1a90 	vmov	s15, r1
  while(currentMCU < (numberMCU + BlockIndex))
90002f68:	429a      	cmp	r2, r3
90002f6a:	9306      	str	r3, [sp, #24]
{
90002f6c:	e9cd 0204 	strd	r0, r2, [sp, #16]
  while(currentMCU < (numberMCU + BlockIndex))
90002f70:	f080 8158 	bcs.w	90003224 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x2d4>
  {

    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
90002f74:	4baf      	ldr	r3, [pc, #700]	; (90003234 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x2e4>)
#elif (JPEG_RGB_FORMAT == JPEG_RGB565)

            ycomp = (int32_t)(*(pLum +j));

            *(__IO uint16_t *)pOutAddr =
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002f76:	4cb0      	ldr	r4, [pc, #704]	; (90003238 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x2e8>)
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
90002f78:	6a5a      	ldr	r2, [r3, #36]	; 0x24
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));
90002f7a:	f8df e2c4 	ldr.w	lr, [pc, #708]	; 90003240 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x2f0>
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
90002f7e:	9207      	str	r2, [sp, #28]
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
90002f80:	6a9a      	ldr	r2, [r3, #40]	; 0x28
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
90002f82:	691b      	ldr	r3, [r3, #16]
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
90002f84:	f8df c2bc 	ldr.w	ip, [pc, #700]	; 90003244 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x2f4>
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
90002f88:	48ac      	ldr	r0, [pc, #688]	; (9000323c <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x2ec>)
90002f8a:	f8df 82bc 	ldr.w	r8, [pc, #700]	; 90003248 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x2f8>
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
90002f8e:	9203      	str	r2, [sp, #12]
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
90002f90:	9300      	str	r3, [sp, #0]
90002f92:	e007      	b.n	90002fa4 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x54>

        refline += JPEG_ConvertorParams.ScaledWidth;
      }
    }

    pInBuffer +=  YCBCR_444_BLOCK_SIZE;
90002f94:	9b04      	ldr	r3, [sp, #16]
90002f96:	33c0      	adds	r3, #192	; 0xc0
90002f98:	9304      	str	r3, [sp, #16]
  while(currentMCU < (numberMCU + BlockIndex))
90002f9a:	e9dd 3205 	ldrd	r3, r2, [sp, #20]
90002f9e:	4293      	cmp	r3, r2
90002fa0:	f000 8140 	beq.w	90003224 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x2d4>
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
90002fa4:	9e05      	ldr	r6, [sp, #20]
90002fa6:	9f07      	ldr	r7, [sp, #28]
90002fa8:	00f2      	lsls	r2, r6, #3
90002faa:	3601      	adds	r6, #1
90002fac:	9904      	ldr	r1, [sp, #16]
90002fae:	9605      	str	r6, [sp, #20]
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
90002fb0:	9e03      	ldr	r6, [sp, #12]
90002fb2:	f101 0340 	add.w	r3, r1, #64	; 0x40
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
90002fb6:	fbb2 f5f7 	udiv	r5, r2, r7
    yRef = ((currentMCU *8) % JPEG_ConvertorParams.WidthExtend);
90002fba:	fb07 2215 	mls	r2, r7, r5, r2
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
90002fbe:	fb06 f505 	mul.w	r5, r6, r5
90002fc2:	0052      	lsls	r2, r2, #1
90002fc4:	eb02 02c5 	add.w	r2, r2, r5, lsl #3
    currentMCU++;
90002fc8:	2508      	movs	r5, #8
90002fca:	9501      	str	r5, [sp, #4]
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
90002fcc:	9d00      	ldr	r5, [sp, #0]
90002fce:	4295      	cmp	r5, r2
90002fd0:	d9e0      	bls.n	90002f94 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x44>
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));
90002fd2:	f893 7040 	ldrb.w	r7, [r3, #64]	; 0x40
          pLum += 8;
90002fd6:	3108      	adds	r1, #8
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
90002fd8:	f893 9000 	ldrb.w	r9, [r3]
            pChrom++;
90002fdc:	3308      	adds	r3, #8
            ycomp = (int32_t)(*(pLum +j));
90002fde:	f811 5c08 	ldrb.w	r5, [r1, #-8]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
90002fe2:	f850 a027 	ldr.w	sl, [r0, r7, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002fe6:	f85e 6027 	ldr.w	r6, [lr, r7, lsl #2]
90002fea:	4425      	add	r5, r4
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90002fec:	f85c 7029 	ldr.w	r7, [ip, r9, lsl #2]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
90002ff0:	f858 9029 	ldr.w	r9, [r8, r9, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002ff4:	442e      	add	r6, r5
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90002ff6:	442f      	add	r7, r5
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
90002ff8:	44d1      	add	r9, sl
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002ffa:	f896 6100 	ldrb.w	r6, [r6, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002ffe:	eb05 4929 	add.w	r9, r5, r9, asr #16
90003002:	f897 5100 	ldrb.w	r5, [r7, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90003006:	08f6      	lsrs	r6, r6, #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90003008:	f899 7100 	ldrb.w	r7, [r9, #256]	; 0x100
9000300c:	08ed      	lsrs	r5, r5, #3
9000300e:	08bf      	lsrs	r7, r7, #2
90003010:	ea45 25c6 	orr.w	r5, r5, r6, lsl #11
            *(__IO uint16_t *)pOutAddr =
90003014:	9e02      	ldr	r6, [sp, #8]
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90003016:	ea45 1547 	orr.w	r5, r5, r7, lsl #5
            *(__IO uint16_t *)pOutAddr =
9000301a:	52b5      	strh	r5, [r6, r2]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));
9000301c:	f893 7039 	ldrb.w	r7, [r3, #57]	; 0x39
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
90003020:	f813 9c07 	ldrb.w	r9, [r3, #-7]
            ycomp = (int32_t)(*(pLum +j));
90003024:	f811 5c07 	ldrb.w	r5, [r1, #-7]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
90003028:	f850 a027 	ldr.w	sl, [r0, r7, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000302c:	4425      	add	r5, r4
9000302e:	f85e 6027 	ldr.w	r6, [lr, r7, lsl #2]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90003032:	f85c 7029 	ldr.w	r7, [ip, r9, lsl #2]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
90003036:	f858 9029 	ldr.w	r9, [r8, r9, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000303a:	442e      	add	r6, r5
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
9000303c:	442f      	add	r7, r5
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
9000303e:	44d1      	add	r9, sl
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90003040:	f896 6100 	ldrb.w	r6, [r6, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90003044:	eb05 4929 	add.w	r9, r5, r9, asr #16
90003048:	f897 5100 	ldrb.w	r5, [r7, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000304c:	08f6      	lsrs	r6, r6, #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
9000304e:	f899 7100 	ldrb.w	r7, [r9, #256]	; 0x100
90003052:	08ed      	lsrs	r5, r5, #3
90003054:	08bf      	lsrs	r7, r7, #2
90003056:	ea45 26c6 	orr.w	r6, r5, r6, lsl #11
        pOutAddr = pOutBuffer+ refline;
9000305a:	9d02      	ldr	r5, [sp, #8]
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
9000305c:	ea46 1647 	orr.w	r6, r6, r7, lsl #5
        pOutAddr = pOutBuffer+ refline;
90003060:	4415      	add	r5, r2
            *(__IO uint16_t *)pOutAddr =
90003062:	806e      	strh	r6, [r5, #2]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));
90003064:	f893 a03a 	ldrb.w	sl, [r3, #58]	; 0x3a
            ycomp = (int32_t)(*(pLum +j));
90003068:	f811 7c06 	ldrb.w	r7, [r1, #-6]
        refline += JPEG_ConvertorParams.ScaledWidth;
9000306c:	9e03      	ldr	r6, [sp, #12]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000306e:	4427      	add	r7, r4
90003070:	f85e 902a 	ldr.w	r9, [lr, sl, lsl #2]
        refline += JPEG_ConvertorParams.ScaledWidth;
90003074:	4432      	add	r2, r6
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
90003076:	f813 6c06 	ldrb.w	r6, [r3, #-6]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000307a:	44b9      	add	r9, r7
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
9000307c:	f850 b02a 	ldr.w	fp, [r0, sl, lsl #2]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90003080:	f85c a026 	ldr.w	sl, [ip, r6, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90003084:	f899 9100 	ldrb.w	r9, [r9, #256]	; 0x100
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
90003088:	f858 6026 	ldr.w	r6, [r8, r6, lsl #2]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
9000308c:	44ba      	add	sl, r7
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000308e:	ea4f 09d9 	mov.w	r9, r9, lsr #3
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
90003092:	445e      	add	r6, fp
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90003094:	eb07 4626 	add.w	r6, r7, r6, asr #16
90003098:	f89a 7100 	ldrb.w	r7, [sl, #256]	; 0x100
9000309c:	f896 a100 	ldrb.w	sl, [r6, #256]	; 0x100
900030a0:	08fe      	lsrs	r6, r7, #3
900030a2:	ea4f 0a9a 	mov.w	sl, sl, lsr #2
900030a6:	ea46 26c9 	orr.w	r6, r6, r9, lsl #11
900030aa:	ea46 164a 	orr.w	r6, r6, sl, lsl #5
            *(__IO uint16_t *)pOutAddr =
900030ae:	80ae      	strh	r6, [r5, #4]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));
900030b0:	f893 a03b 	ldrb.w	sl, [r3, #59]	; 0x3b
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
900030b4:	f813 6c05 	ldrb.w	r6, [r3, #-5]
            ycomp = (int32_t)(*(pLum +j));
900030b8:	f811 7c05 	ldrb.w	r7, [r1, #-5]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
900030bc:	f850 b02a 	ldr.w	fp, [r0, sl, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
900030c0:	f85e 902a 	ldr.w	r9, [lr, sl, lsl #2]
900030c4:	4427      	add	r7, r4
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
900030c6:	f85c a026 	ldr.w	sl, [ip, r6, lsl #2]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
900030ca:	f858 6026 	ldr.w	r6, [r8, r6, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
900030ce:	44b9      	add	r9, r7
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
900030d0:	44ba      	add	sl, r7
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
900030d2:	445e      	add	r6, fp
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
900030d4:	f899 9100 	ldrb.w	r9, [r9, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
900030d8:	eb07 4626 	add.w	r6, r7, r6, asr #16
900030dc:	f89a 7100 	ldrb.w	r7, [sl, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
900030e0:	ea4f 09d9 	mov.w	r9, r9, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
900030e4:	f896 a100 	ldrb.w	sl, [r6, #256]	; 0x100
900030e8:	08fe      	lsrs	r6, r7, #3
900030ea:	ea4f 0a9a 	mov.w	sl, sl, lsr #2
900030ee:	ea46 26c9 	orr.w	r6, r6, r9, lsl #11
900030f2:	ea46 164a 	orr.w	r6, r6, sl, lsl #5
            *(__IO uint16_t *)pOutAddr =
900030f6:	80ee      	strh	r6, [r5, #6]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));
900030f8:	f893 a03c 	ldrb.w	sl, [r3, #60]	; 0x3c
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
900030fc:	f813 6c04 	ldrb.w	r6, [r3, #-4]
            ycomp = (int32_t)(*(pLum +j));
90003100:	f811 7c04 	ldrb.w	r7, [r1, #-4]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
90003104:	f850 b02a 	ldr.w	fp, [r0, sl, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90003108:	4427      	add	r7, r4
9000310a:	f85e 902a 	ldr.w	r9, [lr, sl, lsl #2]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
9000310e:	f85c a026 	ldr.w	sl, [ip, r6, lsl #2]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
90003112:	f858 6026 	ldr.w	r6, [r8, r6, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90003116:	44b9      	add	r9, r7
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90003118:	44ba      	add	sl, r7
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
9000311a:	445e      	add	r6, fp
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000311c:	f899 9100 	ldrb.w	r9, [r9, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90003120:	eb07 4626 	add.w	r6, r7, r6, asr #16
90003124:	f89a 7100 	ldrb.w	r7, [sl, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90003128:	ea4f 09d9 	mov.w	r9, r9, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
9000312c:	f896 a100 	ldrb.w	sl, [r6, #256]	; 0x100
90003130:	08fe      	lsrs	r6, r7, #3
90003132:	ea4f 0a9a 	mov.w	sl, sl, lsr #2
90003136:	ea46 26c9 	orr.w	r6, r6, r9, lsl #11
9000313a:	ea46 164a 	orr.w	r6, r6, sl, lsl #5
            *(__IO uint16_t *)pOutAddr =
9000313e:	812e      	strh	r6, [r5, #8]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));
90003140:	f893 a03d 	ldrb.w	sl, [r3, #61]	; 0x3d
            ycomp = (int32_t)(*(pLum +j));
90003144:	f811 7c03 	ldrb.w	r7, [r1, #-3]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90003148:	f85e 902a 	ldr.w	r9, [lr, sl, lsl #2]
9000314c:	4427      	add	r7, r4
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
9000314e:	f813 6c03 	ldrb.w	r6, [r3, #-3]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
90003152:	f850 b02a 	ldr.w	fp, [r0, sl, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90003156:	44b9      	add	r9, r7
90003158:	f899 9100 	ldrb.w	r9, [r9, #256]	; 0x100
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
9000315c:	f85c a026 	ldr.w	sl, [ip, r6, lsl #2]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
90003160:	f858 6026 	ldr.w	r6, [r8, r6, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90003164:	ea4f 09d9 	mov.w	r9, r9, lsr #3
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90003168:	44ba      	add	sl, r7
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
9000316a:	445e      	add	r6, fp
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
9000316c:	eb07 4626 	add.w	r6, r7, r6, asr #16
90003170:	f89a 7100 	ldrb.w	r7, [sl, #256]	; 0x100
90003174:	f896 a100 	ldrb.w	sl, [r6, #256]	; 0x100
90003178:	08fe      	lsrs	r6, r7, #3
9000317a:	ea4f 0a9a 	mov.w	sl, sl, lsr #2
9000317e:	ea46 26c9 	orr.w	r6, r6, r9, lsl #11
90003182:	ea46 164a 	orr.w	r6, r6, sl, lsl #5
            *(__IO uint16_t *)pOutAddr =
90003186:	816e      	strh	r6, [r5, #10]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));
90003188:	f893 a03e 	ldrb.w	sl, [r3, #62]	; 0x3e
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
9000318c:	f813 6c02 	ldrb.w	r6, [r3, #-2]
            ycomp = (int32_t)(*(pLum +j));
90003190:	f811 7c02 	ldrb.w	r7, [r1, #-2]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
90003194:	f850 b02a 	ldr.w	fp, [r0, sl, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90003198:	4427      	add	r7, r4
9000319a:	f85e 902a 	ldr.w	r9, [lr, sl, lsl #2]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
9000319e:	f85c a026 	ldr.w	sl, [ip, r6, lsl #2]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
900031a2:	f858 6026 	ldr.w	r6, [r8, r6, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
900031a6:	44b9      	add	r9, r7
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
900031a8:	44ba      	add	sl, r7
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
900031aa:	445e      	add	r6, fp
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
900031ac:	f899 9100 	ldrb.w	r9, [r9, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
900031b0:	eb07 4626 	add.w	r6, r7, r6, asr #16
900031b4:	f89a 7100 	ldrb.w	r7, [sl, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
900031b8:	ea4f 09d9 	mov.w	r9, r9, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
900031bc:	f896 a100 	ldrb.w	sl, [r6, #256]	; 0x100
900031c0:	08fe      	lsrs	r6, r7, #3
900031c2:	ea4f 0a9a 	mov.w	sl, sl, lsr #2
900031c6:	ea46 26c9 	orr.w	r6, r6, r9, lsl #11
900031ca:	ea46 164a 	orr.w	r6, r6, sl, lsl #5
            *(__IO uint16_t *)pOutAddr =
900031ce:	81ae      	strh	r6, [r5, #12]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));
900031d0:	f893 a03f 	ldrb.w	sl, [r3, #63]	; 0x3f
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
900031d4:	f813 6c01 	ldrb.w	r6, [r3, #-1]
            ycomp = (int32_t)(*(pLum +j));
900031d8:	f811 7c01 	ldrb.w	r7, [r1, #-1]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
900031dc:	f85e 902a 	ldr.w	r9, [lr, sl, lsl #2]
900031e0:	4427      	add	r7, r4
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
900031e2:	f850 b02a 	ldr.w	fp, [r0, sl, lsl #2]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
900031e6:	f85c a026 	ldr.w	sl, [ip, r6, lsl #2]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
900031ea:	f858 6026 	ldr.w	r6, [r8, r6, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
900031ee:	44b9      	add	r9, r7
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
900031f0:	44ba      	add	sl, r7
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
900031f2:	445e      	add	r6, fp
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
900031f4:	f899 9100 	ldrb.w	r9, [r9, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
900031f8:	eb07 4626 	add.w	r6, r7, r6, asr #16
900031fc:	f89a 7100 	ldrb.w	r7, [sl, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90003200:	ea4f 09d9 	mov.w	r9, r9, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90003204:	f896 a100 	ldrb.w	sl, [r6, #256]	; 0x100
90003208:	08fe      	lsrs	r6, r7, #3
9000320a:	ea4f 0a9a 	mov.w	sl, sl, lsr #2
9000320e:	ea46 26c9 	orr.w	r6, r6, r9, lsl #11
90003212:	ea46 164a 	orr.w	r6, r6, sl, lsl #5
            *(__IO uint16_t *)pOutAddr =
90003216:	81ee      	strh	r6, [r5, #14]
    for(i= 0; i <  8; i++)
90003218:	9d01      	ldr	r5, [sp, #4]
9000321a:	3d01      	subs	r5, #1
9000321c:	9501      	str	r5, [sp, #4]
9000321e:	f47f aed5 	bne.w	90002fcc <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x7c>
90003222:	e6b7      	b.n	90002f94 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x44>
  }
  return numberMCU;
}
90003224:	ee17 0a90 	vmov	r0, s15
90003228:	b009      	add	sp, #36	; 0x24
9000322a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9000322e:	bf00      	nop
90003230:	aaaaaaab 	.word	0xaaaaaaab
90003234:	2400b9ec 	.word	0x2400b9ec
90003238:	9002a0f4 	.word	0x9002a0f4
9000323c:	2400a16c 	.word	0x2400a16c
90003240:	2400a56c 	.word	0x2400a56c
90003244:	2400996c 	.word	0x2400996c
90003248:	24009d6c 	.word	0x24009d6c

9000324c <JPEG_MCU_Gray_ARGB_ConvertBlocks>:
static uint32_t JPEG_MCU_Gray_ARGB_ConvertBlocks(uint8_t *pInBuffer,
                                      uint8_t *pOutBuffer,
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{
9000324c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint8_t *pOutAddr,  *pLum;

  numberMCU = DataCount / GRAY_444_BLOCK_SIZE;
  currentMCU = BlockIndex;

  while(currentMCU < (numberMCU + BlockIndex))
90003250:	eb02 1a93 	add.w	sl, r2, r3, lsr #6
  numberMCU = DataCount / GRAY_444_BLOCK_SIZE;
90003254:	099c      	lsrs	r4, r3, #6
  while(currentMCU < (numberMCU + BlockIndex))
90003256:	4552      	cmp	r2, sl
  numberMCU = DataCount / GRAY_444_BLOCK_SIZE;
90003258:	ee07 4a90 	vmov	s15, r4
  while(currentMCU < (numberMCU + BlockIndex))
9000325c:	f080 8088 	bcs.w	90003370 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x124>
  {
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
90003260:	4b45      	ldr	r3, [pc, #276]	; (90003378 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x12c>)

    yRef = ((currentMCU *8) % JPEG_ConvertorParams.WidthExtend);

    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
90003262:	e9d3 9809 	ldrd	r9, r8, [r3, #36]	; 0x24
    pLum = pInBuffer;

    for(i= 0; i <  8; i++)
    {
      pOutAddr = pOutBuffer + refline;
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
90003266:	691e      	ldr	r6, [r3, #16]
90003268:	e003      	b.n	90003272 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x26>
  while(currentMCU < (numberMCU + BlockIndex))
9000326a:	4552      	cmp	r2, sl

        refline += JPEG_ConvertorParams.ScaledWidth;
      }
    }

    pInBuffer +=  GRAY_444_BLOCK_SIZE;
9000326c:	f100 0040 	add.w	r0, r0, #64	; 0x40
  while(currentMCU < (numberMCU + BlockIndex))
90003270:	d07e      	beq.n	90003370 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x124>
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
90003272:	00d3      	lsls	r3, r2, #3
    currentMCU++;
90003274:	4604      	mov	r4, r0
90003276:	f04f 0e08 	mov.w	lr, #8
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
9000327a:	3201      	adds	r2, #1
9000327c:	fbb3 f5f9 	udiv	r5, r3, r9
    yRef = ((currentMCU *8) % JPEG_ConvertorParams.WidthExtend);
90003280:	fb09 3315 	mls	r3, r9, r5, r3
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
90003284:	fb08 f505 	mul.w	r5, r8, r5
90003288:	005b      	lsls	r3, r3, #1
9000328a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
9000328e:	429e      	cmp	r6, r3
90003290:	d9eb      	bls.n	9000326a <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x1e>
          ySample =   (uint32_t)(*pLum);
90003292:	f894 c000 	ldrb.w	ip, [r4]
      pOutAddr = pOutBuffer + refline;
90003296:	18cd      	adds	r5, r1, r3
          pLum++;
90003298:	3408      	adds	r4, #8
    for(i= 0; i <  8; i++)
9000329a:	f1be 0e01 	subs.w	lr, lr, #1
          *(__IO uint16_t *)pOutAddr = ((ySample >> 3) << 11) |  ((ySample >> 2) << 5) | (ySample >> 3);
9000329e:	ea4f 07dc 	mov.w	r7, ip, lsr #3
900032a2:	ea4f 0c9c 	mov.w	ip, ip, lsr #2
900032a6:	ea4f 2bc7 	mov.w	fp, r7, lsl #11
900032aa:	ea4b 1c4c 	orr.w	ip, fp, ip, lsl #5
900032ae:	ea47 070c 	orr.w	r7, r7, ip
900032b2:	52cf      	strh	r7, [r1, r3]
        refline += JPEG_ConvertorParams.ScaledWidth;
900032b4:	4443      	add	r3, r8
          ySample =   (uint32_t)(*pLum);
900032b6:	f814 cc07 	ldrb.w	ip, [r4, #-7]
          *(__IO uint16_t *)pOutAddr = ((ySample >> 3) << 11) |  ((ySample >> 2) << 5) | (ySample >> 3);
900032ba:	ea4f 07dc 	mov.w	r7, ip, lsr #3
900032be:	ea4f 0c9c 	mov.w	ip, ip, lsr #2
900032c2:	ea4f 2bc7 	mov.w	fp, r7, lsl #11
900032c6:	ea4b 1c4c 	orr.w	ip, fp, ip, lsl #5
900032ca:	ea47 070c 	orr.w	r7, r7, ip
900032ce:	806f      	strh	r7, [r5, #2]
          ySample =   (uint32_t)(*pLum);
900032d0:	f814 cc06 	ldrb.w	ip, [r4, #-6]
          *(__IO uint16_t *)pOutAddr = ((ySample >> 3) << 11) |  ((ySample >> 2) << 5) | (ySample >> 3);
900032d4:	ea4f 07dc 	mov.w	r7, ip, lsr #3
900032d8:	ea4f 0c9c 	mov.w	ip, ip, lsr #2
900032dc:	ea4f 2bc7 	mov.w	fp, r7, lsl #11
900032e0:	ea4b 1c4c 	orr.w	ip, fp, ip, lsl #5
900032e4:	ea47 070c 	orr.w	r7, r7, ip
900032e8:	80af      	strh	r7, [r5, #4]
          ySample =   (uint32_t)(*pLum);
900032ea:	f814 cc05 	ldrb.w	ip, [r4, #-5]
          *(__IO uint16_t *)pOutAddr = ((ySample >> 3) << 11) |  ((ySample >> 2) << 5) | (ySample >> 3);
900032ee:	ea4f 07dc 	mov.w	r7, ip, lsr #3
900032f2:	ea4f 0c9c 	mov.w	ip, ip, lsr #2
900032f6:	ea4f 2bc7 	mov.w	fp, r7, lsl #11
900032fa:	ea4b 1c4c 	orr.w	ip, fp, ip, lsl #5
900032fe:	ea47 070c 	orr.w	r7, r7, ip
90003302:	80ef      	strh	r7, [r5, #6]
          ySample =   (uint32_t)(*pLum);
90003304:	f814 cc04 	ldrb.w	ip, [r4, #-4]
          *(__IO uint16_t *)pOutAddr = ((ySample >> 3) << 11) |  ((ySample >> 2) << 5) | (ySample >> 3);
90003308:	ea4f 07dc 	mov.w	r7, ip, lsr #3
9000330c:	ea4f 0c9c 	mov.w	ip, ip, lsr #2
90003310:	ea4f 2bc7 	mov.w	fp, r7, lsl #11
90003314:	ea4b 1c4c 	orr.w	ip, fp, ip, lsl #5
90003318:	ea47 070c 	orr.w	r7, r7, ip
9000331c:	812f      	strh	r7, [r5, #8]
          ySample =   (uint32_t)(*pLum);
9000331e:	f814 cc03 	ldrb.w	ip, [r4, #-3]
          *(__IO uint16_t *)pOutAddr = ((ySample >> 3) << 11) |  ((ySample >> 2) << 5) | (ySample >> 3);
90003322:	ea4f 07dc 	mov.w	r7, ip, lsr #3
90003326:	ea4f 0c9c 	mov.w	ip, ip, lsr #2
9000332a:	ea4f 2bc7 	mov.w	fp, r7, lsl #11
9000332e:	ea4b 1c4c 	orr.w	ip, fp, ip, lsl #5
90003332:	ea47 070c 	orr.w	r7, r7, ip
90003336:	816f      	strh	r7, [r5, #10]
          ySample =   (uint32_t)(*pLum);
90003338:	f814 cc02 	ldrb.w	ip, [r4, #-2]
          *(__IO uint16_t *)pOutAddr = ((ySample >> 3) << 11) |  ((ySample >> 2) << 5) | (ySample >> 3);
9000333c:	ea4f 07dc 	mov.w	r7, ip, lsr #3
90003340:	ea4f 0c9c 	mov.w	ip, ip, lsr #2
90003344:	ea4f 2bc7 	mov.w	fp, r7, lsl #11
90003348:	ea4b 1c4c 	orr.w	ip, fp, ip, lsl #5
9000334c:	ea47 070c 	orr.w	r7, r7, ip
90003350:	81af      	strh	r7, [r5, #12]
          ySample =   (uint32_t)(*pLum);
90003352:	f814 cc01 	ldrb.w	ip, [r4, #-1]
          *(__IO uint16_t *)pOutAddr = ((ySample >> 3) << 11) |  ((ySample >> 2) << 5) | (ySample >> 3);
90003356:	ea4f 07dc 	mov.w	r7, ip, lsr #3
9000335a:	ea4f 0c9c 	mov.w	ip, ip, lsr #2
9000335e:	ea4f 2bc7 	mov.w	fp, r7, lsl #11
90003362:	ea4b 1c4c 	orr.w	ip, fp, ip, lsl #5
90003366:	ea47 070c 	orr.w	r7, r7, ip
9000336a:	81ef      	strh	r7, [r5, #14]
    for(i= 0; i <  8; i++)
9000336c:	d18f      	bne.n	9000328e <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x42>
9000336e:	e77c      	b.n	9000326a <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x1e>
  }
  return numberMCU;
}
90003370:	ee17 0a90 	vmov	r0, s15
90003374:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90003378:	2400b9ec 	.word	0x2400b9ec

9000337c <JPEG_MCU_YCCK_ARGB_ConvertBlocks>:
static uint32_t JPEG_MCU_YCCK_ARGB_ConvertBlocks(uint8_t *pInBuffer,
                                      uint8_t *pOutBuffer,
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{
9000337c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

  int32_t c_red, c_blue, c_green;

  uint8_t *pOutAddr, *pChrom;

  numberMCU = DataCount / CMYK_444_BLOCK_SIZE;
90003380:	0a1c      	lsrs	r4, r3, #8
{
90003382:	b083      	sub	sp, #12
  currentMCU = BlockIndex;

  while(currentMCU < (numberMCU + BlockIndex))
90003384:	eb02 2313 	add.w	r3, r2, r3, lsr #8
  numberMCU = DataCount / CMYK_444_BLOCK_SIZE;
90003388:	ee07 4a90 	vmov	s15, r4
  while(currentMCU < (numberMCU + BlockIndex))
9000338c:	429a      	cmp	r2, r3
9000338e:	9300      	str	r3, [sp, #0]
90003390:	f080 8129 	bcs.w	900035e6 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x26a>
  {

    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
90003394:	4b96      	ldr	r3, [pc, #600]	; (900035f0 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x274>)
        pOutAddr = pOutBuffer+ refline;

          for(j=0; j < 8; j++)
          {
            color_k = (int32_t)(*(pChrom + 192));
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
90003396:	f8df c25c 	ldr.w	ip, [pc, #604]	; 900035f4 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x278>
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
9000339a:	6a5c      	ldr	r4, [r3, #36]	; 0x24
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
9000339c:	f8d3 8028 	ldr.w	r8, [r3, #40]	; 0x28
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
900033a0:	691e      	ldr	r6, [r3, #16]
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
900033a2:	9401      	str	r4, [sp, #4]
900033a4:	e005      	b.n	900033b2 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x36>
  while(currentMCU < (numberMCU + BlockIndex))
900033a6:	9b00      	ldr	r3, [sp, #0]

        refline += JPEG_ConvertorParams.ScaledWidth;
      }
    }

    pInBuffer +=  CMYK_444_BLOCK_SIZE;
900033a8:	f500 7080 	add.w	r0, r0, #256	; 0x100
  while(currentMCU < (numberMCU + BlockIndex))
900033ac:	429a      	cmp	r2, r3
900033ae:	f000 811a 	beq.w	900035e6 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x26a>
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
900033b2:	00d3      	lsls	r3, r2, #3
900033b4:	9c01      	ldr	r4, [sp, #4]
900033b6:	3201      	adds	r2, #1
    currentMCU++;
900033b8:	f04f 0e08 	mov.w	lr, #8
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
900033bc:	fbb3 f5f4 	udiv	r5, r3, r4
    yRef = ((currentMCU *8) % JPEG_ConvertorParams.WidthExtend);
900033c0:	fb04 3415 	mls	r4, r4, r5, r3
    currentMCU++;
900033c4:	4603      	mov	r3, r0
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
900033c6:	fb08 f505 	mul.w	r5, r8, r5
900033ca:	0064      	lsls	r4, r4, #1
900033cc:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
900033d0:	42a6      	cmp	r6, r4
900033d2:	d9e8      	bls.n	900033a6 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x2a>
            color_k = (int32_t)(*(pChrom + 192));
900033d4:	f893 a0c0 	ldrb.w	sl, [r3, #192]	; 0xc0
        pOutAddr = pOutBuffer+ refline;
900033d8:	190f      	adds	r7, r1, r4
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
900033da:	f893 9040 	ldrb.w	r9, [r3, #64]	; 0x40
    for(i= 0; i <  8; i++)
900033de:	f1be 0e01 	subs.w	lr, lr, #1
            pChrom++;
900033e2:	f103 0308 	add.w	r3, r3, #8
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
900033e6:	fb19 f90a 	smulbb	r9, r9, sl
900033ea:	fbac 5909 	umull	r5, r9, ip, r9
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
900033ee:	f813 5c08 	ldrb.w	r5, [r3, #-8]
900033f2:	fb15 f50a 	smulbb	r5, r5, sl
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
900033f6:	ea4f 2959 	mov.w	r9, r9, lsr #9
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
900033fa:	fbac b505 	umull	fp, r5, ip, r5
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
900033fe:	ea4f 1949 	mov.w	r9, r9, lsl #5
            ((c_red >> 3) << JPEG_RED_OFFSET)     | \
90003402:	ea4f 2595 	mov.w	r5, r5, lsr #10
90003406:	ea49 25c5 	orr.w	r5, r9, r5, lsl #11
            c_blue = (color_k * (int32_t)(*(pChrom + 128)))/255;
9000340a:	f893 9078 	ldrb.w	r9, [r3, #120]	; 0x78
9000340e:	fb19 f90a 	smulbb	r9, r9, sl
90003412:	fbac a909 	umull	sl, r9, ip, r9
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
90003416:	ea45 2599 	orr.w	r5, r5, r9, lsr #10
9000341a:	b2ad      	uxth	r5, r5
          *(__IO uint16_t *)pOutAddr =
9000341c:	530d      	strh	r5, [r1, r4]
        refline += JPEG_ConvertorParams.ScaledWidth;
9000341e:	4444      	add	r4, r8
            color_k = (int32_t)(*(pChrom + 192));
90003420:	f893 a0b9 	ldrb.w	sl, [r3, #185]	; 0xb9
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
90003424:	f893 9039 	ldrb.w	r9, [r3, #57]	; 0x39
90003428:	fb19 f90a 	smulbb	r9, r9, sl
9000342c:	fbac 5909 	umull	r5, r9, ip, r9
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
90003430:	f813 5c07 	ldrb.w	r5, [r3, #-7]
90003434:	fb15 f50a 	smulbb	r5, r5, sl
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
90003438:	ea4f 2959 	mov.w	r9, r9, lsr #9
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
9000343c:	fbac b505 	umull	fp, r5, ip, r5
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
90003440:	ea4f 1949 	mov.w	r9, r9, lsl #5
            ((c_red >> 3) << JPEG_RED_OFFSET)     | \
90003444:	ea4f 2595 	mov.w	r5, r5, lsr #10
90003448:	ea49 25c5 	orr.w	r5, r9, r5, lsl #11
            c_blue = (color_k * (int32_t)(*(pChrom + 128)))/255;
9000344c:	f893 9079 	ldrb.w	r9, [r3, #121]	; 0x79
90003450:	fb19 f90a 	smulbb	r9, r9, sl
90003454:	fbac a909 	umull	sl, r9, ip, r9
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
90003458:	ea45 2599 	orr.w	r5, r5, r9, lsr #10
9000345c:	b2ad      	uxth	r5, r5
          *(__IO uint16_t *)pOutAddr =
9000345e:	807d      	strh	r5, [r7, #2]
            color_k = (int32_t)(*(pChrom + 192));
90003460:	f893 a0ba 	ldrb.w	sl, [r3, #186]	; 0xba
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
90003464:	f893 903a 	ldrb.w	r9, [r3, #58]	; 0x3a
90003468:	fb19 f90a 	smulbb	r9, r9, sl
9000346c:	fbac 5909 	umull	r5, r9, ip, r9
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
90003470:	f813 5c06 	ldrb.w	r5, [r3, #-6]
90003474:	fb15 f50a 	smulbb	r5, r5, sl
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
90003478:	ea4f 2959 	mov.w	r9, r9, lsr #9
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
9000347c:	fbac b505 	umull	fp, r5, ip, r5
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
90003480:	ea4f 1949 	mov.w	r9, r9, lsl #5
            ((c_red >> 3) << JPEG_RED_OFFSET)     | \
90003484:	ea4f 2595 	mov.w	r5, r5, lsr #10
90003488:	ea49 25c5 	orr.w	r5, r9, r5, lsl #11
            c_blue = (color_k * (int32_t)(*(pChrom + 128)))/255;
9000348c:	f893 907a 	ldrb.w	r9, [r3, #122]	; 0x7a
90003490:	fb19 f90a 	smulbb	r9, r9, sl
90003494:	fbac a909 	umull	sl, r9, ip, r9
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
90003498:	ea45 2599 	orr.w	r5, r5, r9, lsr #10
9000349c:	b2ad      	uxth	r5, r5
          *(__IO uint16_t *)pOutAddr =
9000349e:	80bd      	strh	r5, [r7, #4]
            color_k = (int32_t)(*(pChrom + 192));
900034a0:	f893 a0bb 	ldrb.w	sl, [r3, #187]	; 0xbb
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
900034a4:	f893 903b 	ldrb.w	r9, [r3, #59]	; 0x3b
900034a8:	fb19 f90a 	smulbb	r9, r9, sl
900034ac:	fbac 5909 	umull	r5, r9, ip, r9
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
900034b0:	f813 5c05 	ldrb.w	r5, [r3, #-5]
900034b4:	fb15 f50a 	smulbb	r5, r5, sl
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
900034b8:	ea4f 2959 	mov.w	r9, r9, lsr #9
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
900034bc:	fbac b505 	umull	fp, r5, ip, r5
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
900034c0:	ea4f 1949 	mov.w	r9, r9, lsl #5
            ((c_red >> 3) << JPEG_RED_OFFSET)     | \
900034c4:	ea4f 2595 	mov.w	r5, r5, lsr #10
900034c8:	ea49 25c5 	orr.w	r5, r9, r5, lsl #11
            c_blue = (color_k * (int32_t)(*(pChrom + 128)))/255;
900034cc:	f893 907b 	ldrb.w	r9, [r3, #123]	; 0x7b
900034d0:	fb19 f90a 	smulbb	r9, r9, sl
900034d4:	fbac a909 	umull	sl, r9, ip, r9
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
900034d8:	ea45 2599 	orr.w	r5, r5, r9, lsr #10
900034dc:	b2ad      	uxth	r5, r5
          *(__IO uint16_t *)pOutAddr =
900034de:	80fd      	strh	r5, [r7, #6]
            color_k = (int32_t)(*(pChrom + 192));
900034e0:	f893 a0bc 	ldrb.w	sl, [r3, #188]	; 0xbc
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
900034e4:	f893 903c 	ldrb.w	r9, [r3, #60]	; 0x3c
900034e8:	fb19 f90a 	smulbb	r9, r9, sl
900034ec:	fbac 5909 	umull	r5, r9, ip, r9
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
900034f0:	f813 5c04 	ldrb.w	r5, [r3, #-4]
900034f4:	fb15 f50a 	smulbb	r5, r5, sl
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
900034f8:	ea4f 2959 	mov.w	r9, r9, lsr #9
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
900034fc:	fbac b505 	umull	fp, r5, ip, r5
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
90003500:	ea4f 1949 	mov.w	r9, r9, lsl #5
            ((c_red >> 3) << JPEG_RED_OFFSET)     | \
90003504:	ea4f 2595 	mov.w	r5, r5, lsr #10
90003508:	ea49 25c5 	orr.w	r5, r9, r5, lsl #11
            c_blue = (color_k * (int32_t)(*(pChrom + 128)))/255;
9000350c:	f893 907c 	ldrb.w	r9, [r3, #124]	; 0x7c
90003510:	fb19 f90a 	smulbb	r9, r9, sl
90003514:	fbac a909 	umull	sl, r9, ip, r9
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
90003518:	ea45 2599 	orr.w	r5, r5, r9, lsr #10
9000351c:	b2ad      	uxth	r5, r5
          *(__IO uint16_t *)pOutAddr =
9000351e:	813d      	strh	r5, [r7, #8]
            color_k = (int32_t)(*(pChrom + 192));
90003520:	f893 a0bd 	ldrb.w	sl, [r3, #189]	; 0xbd
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
90003524:	f893 903d 	ldrb.w	r9, [r3, #61]	; 0x3d
90003528:	fb19 f90a 	smulbb	r9, r9, sl
9000352c:	fbac 5909 	umull	r5, r9, ip, r9
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
90003530:	f813 5c03 	ldrb.w	r5, [r3, #-3]
90003534:	fb15 f50a 	smulbb	r5, r5, sl
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
90003538:	ea4f 2959 	mov.w	r9, r9, lsr #9
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
9000353c:	fbac b505 	umull	fp, r5, ip, r5
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
90003540:	ea4f 1949 	mov.w	r9, r9, lsl #5
            ((c_red >> 3) << JPEG_RED_OFFSET)     | \
90003544:	ea4f 2595 	mov.w	r5, r5, lsr #10
90003548:	ea49 25c5 	orr.w	r5, r9, r5, lsl #11
            c_blue = (color_k * (int32_t)(*(pChrom + 128)))/255;
9000354c:	f893 907d 	ldrb.w	r9, [r3, #125]	; 0x7d
90003550:	fb19 f90a 	smulbb	r9, r9, sl
90003554:	fbac a909 	umull	sl, r9, ip, r9
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
90003558:	ea45 2599 	orr.w	r5, r5, r9, lsr #10
9000355c:	b2ad      	uxth	r5, r5
          *(__IO uint16_t *)pOutAddr =
9000355e:	817d      	strh	r5, [r7, #10]
            color_k = (int32_t)(*(pChrom + 192));
90003560:	f893 a0be 	ldrb.w	sl, [r3, #190]	; 0xbe
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
90003564:	f813 9c02 	ldrb.w	r9, [r3, #-2]
90003568:	fb19 f90a 	smulbb	r9, r9, sl
9000356c:	fbac 5909 	umull	r5, r9, ip, r9
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
90003570:	f893 503e 	ldrb.w	r5, [r3, #62]	; 0x3e
90003574:	fb15 f50a 	smulbb	r5, r5, sl
            ((c_red >> 3) << JPEG_RED_OFFSET)     | \
90003578:	ea4f 2999 	mov.w	r9, r9, lsr #10
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
9000357c:	fbac b505 	umull	fp, r5, ip, r5
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
90003580:	ea4f 2555 	mov.w	r5, r5, lsr #9
90003584:	ea4f 1545 	mov.w	r5, r5, lsl #5
            ((c_red >> 3) << JPEG_RED_OFFSET)     | \
90003588:	ea45 25c9 	orr.w	r5, r5, r9, lsl #11
            c_blue = (color_k * (int32_t)(*(pChrom + 128)))/255;
9000358c:	f893 907e 	ldrb.w	r9, [r3, #126]	; 0x7e
90003590:	fb19 f90a 	smulbb	r9, r9, sl
90003594:	fbac a909 	umull	sl, r9, ip, r9
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
90003598:	ea45 2599 	orr.w	r5, r5, r9, lsr #10
9000359c:	b2ad      	uxth	r5, r5
          *(__IO uint16_t *)pOutAddr =
9000359e:	81bd      	strh	r5, [r7, #12]
            color_k = (int32_t)(*(pChrom + 192));
900035a0:	f893 a0bf 	ldrb.w	sl, [r3, #191]	; 0xbf
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
900035a4:	f893 903f 	ldrb.w	r9, [r3, #63]	; 0x3f
900035a8:	fb19 f90a 	smulbb	r9, r9, sl
900035ac:	fbac 5909 	umull	r5, r9, ip, r9
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
900035b0:	f813 5c01 	ldrb.w	r5, [r3, #-1]
900035b4:	fb15 f50a 	smulbb	r5, r5, sl
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
900035b8:	ea4f 2959 	mov.w	r9, r9, lsr #9
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
900035bc:	fbac b505 	umull	fp, r5, ip, r5
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
900035c0:	ea4f 1949 	mov.w	r9, r9, lsl #5
            ((c_red >> 3) << JPEG_RED_OFFSET)     | \
900035c4:	ea4f 2595 	mov.w	r5, r5, lsr #10
900035c8:	ea49 25c5 	orr.w	r5, r9, r5, lsl #11
            c_blue = (color_k * (int32_t)(*(pChrom + 128)))/255;
900035cc:	f893 907f 	ldrb.w	r9, [r3, #127]	; 0x7f
900035d0:	fb19 f90a 	smulbb	r9, r9, sl
900035d4:	fbac a909 	umull	sl, r9, ip, r9
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
900035d8:	ea45 2599 	orr.w	r5, r5, r9, lsr #10
900035dc:	b2ad      	uxth	r5, r5
          *(__IO uint16_t *)pOutAddr =
900035de:	81fd      	strh	r5, [r7, #14]
    for(i= 0; i <  8; i++)
900035e0:	f47f aef6 	bne.w	900033d0 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x54>
900035e4:	e6df      	b.n	900033a6 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x2a>
  }
  return numberMCU;
}
900035e6:	ee17 0a90 	vmov	r0, s15
900035ea:	b003      	add	sp, #12
900035ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
900035f0:	2400b9ec 	.word	0x2400b9ec
900035f4:	80808081 	.word	0x80808081

900035f8 <TGFX_JPEG_GetDecodeColorConvertFunc>:
  *                      depending of the jpeg image color space and chroma sampling info.
  * @param ImageNbMCUs : pointer to uint32_t, used to retrive the total number of MCU blocks in the jpeg image.
  * @retval HAL status : HAL_OK or HAL_ERROR.
  */
HAL_StatusTypeDef TGFX_JPEG_GetDecodeColorConvertFunc(JPEG_ConfTypeDef *pJpegInfo, JPEG_YCbCrToRGB_Convert_Function *pFunction, uint32_t *ImageNbMCUs)
{
900035f8:	b4f0      	push	{r4, r5, r6, r7}
  uint32_t hMCU, vMCU;

  JPEG_ConvertorParams.ColorSpace = pJpegInfo->ColorSpace;
  JPEG_ConvertorParams.ImageWidth = pJpegInfo->ImageWidth;
900035fa:	68c3      	ldr	r3, [r0, #12]
  JPEG_ConvertorParams.ColorSpace = pJpegInfo->ColorSpace;
900035fc:	6805      	ldr	r5, [r0, #0]
900035fe:	4c3e      	ldr	r4, [pc, #248]	; (900036f8 <TGFX_JPEG_GetDecodeColorConvertFunc+0x100>)
  JPEG_ConvertorParams.ImageHeight = pJpegInfo->ImageHeight;
  JPEG_ConvertorParams.ImageSize_Bytes = pJpegInfo->ImageWidth * pJpegInfo->ImageHeight * JPEG_BYTES_PER_PIXEL;

  JPEG_ConvertorParams.ChromaSubsampling = pJpegInfo->ChromaSubsampling;
  if(JPEG_ConvertorParams.ColorSpace == JPEG_YCBCR_COLORSPACE)
90003600:	2d10      	cmp	r5, #16
  JPEG_ConvertorParams.ImageWidth = pJpegInfo->ImageWidth;
90003602:	60a3      	str	r3, [r4, #8]
  JPEG_ConvertorParams.ColorSpace = pJpegInfo->ColorSpace;
90003604:	6025      	str	r5, [r4, #0]
  JPEG_ConvertorParams.ChromaSubsampling = pJpegInfo->ChromaSubsampling;
90003606:	e9d0 7601 	ldrd	r7, r6, [r0, #4]
  JPEG_ConvertorParams.ImageSize_Bytes = pJpegInfo->ImageWidth * pJpegInfo->ImageHeight * JPEG_BYTES_PER_PIXEL;
9000360a:	fb06 f003 	mul.w	r0, r6, r3
  JPEG_ConvertorParams.ImageHeight = pJpegInfo->ImageHeight;
9000360e:	60e6      	str	r6, [r4, #12]
  JPEG_ConvertorParams.ImageSize_Bytes = pJpegInfo->ImageWidth * pJpegInfo->ImageHeight * JPEG_BYTES_PER_PIXEL;
90003610:	ea4f 0040 	mov.w	r0, r0, lsl #1
  JPEG_ConvertorParams.ChromaSubsampling = pJpegInfo->ChromaSubsampling;
90003614:	6067      	str	r7, [r4, #4]
  JPEG_ConvertorParams.ImageSize_Bytes = pJpegInfo->ImageWidth * pJpegInfo->ImageHeight * JPEG_BYTES_PER_PIXEL;
90003616:	6120      	str	r0, [r4, #16]
  if(JPEG_ConvertorParams.ColorSpace == JPEG_YCBCR_COLORSPACE)
90003618:	d027      	beq.n	9000366a <TGFX_JPEG_GetDecodeColorConvertFunc+0x72>
      }
      JPEG_ConvertorParams.H_factor = 8;
      JPEG_ConvertorParams.V_factor  = 8;
    }
  }
  else if(JPEG_ConvertorParams.ColorSpace == JPEG_GRAYSCALE_COLORSPACE)
9000361a:	b9ed      	cbnz	r5, 90003658 <TGFX_JPEG_GetDecodeColorConvertFunc+0x60>
  {
    *pFunction =  JPEG_MCU_Gray_ARGB_ConvertBlocks;
9000361c:	4837      	ldr	r0, [pc, #220]	; (900036fc <TGFX_JPEG_GetDecodeColorConvertFunc+0x104>)
9000361e:	6008      	str	r0, [r1, #0]

    JPEG_ConvertorParams.LineOffset = JPEG_ConvertorParams.ImageWidth % 8;

    if(JPEG_ConvertorParams.LineOffset != 0)
90003620:	f013 0107 	ands.w	r1, r3, #7
90003624:	d02b      	beq.n	9000367e <TGFX_JPEG_GetDecodeColorConvertFunc+0x86>

    JPEG_ConvertorParams.LineOffset = JPEG_ConvertorParams.ImageWidth % 8;

    if(JPEG_ConvertorParams.LineOffset != 0)
    {
      JPEG_ConvertorParams.LineOffset = 8 - JPEG_ConvertorParams.LineOffset;
90003626:	f1c1 0108 	rsb	r1, r1, #8
      JPEG_ConvertorParams.H_factor = 16;
9000362a:	2508      	movs	r5, #8
      JPEG_ConvertorParams.LineOffset = 8 - JPEG_ConvertorParams.LineOffset;
9000362c:	6161      	str	r1, [r4, #20]
  else
  {
    return HAL_ERROR; /* Color space Not supported*/
  }

  JPEG_ConvertorParams.WidthExtend = JPEG_ConvertorParams.ImageWidth + JPEG_ConvertorParams.LineOffset;
9000362e:	4419      	add	r1, r3
90003630:	6261      	str	r1, [r4, #36]	; 0x24
  JPEG_ConvertorParams.ScaledWidth = JPEG_BYTES_PER_PIXEL * JPEG_ConvertorParams.ImageWidth;
90003632:	0059      	lsls	r1, r3, #1

  hMCU = (JPEG_ConvertorParams.ImageWidth / JPEG_ConvertorParams.H_factor);
90003634:	08db      	lsrs	r3, r3, #3
  JPEG_ConvertorParams.ScaledWidth = JPEG_BYTES_PER_PIXEL * JPEG_ConvertorParams.ImageWidth;
90003636:	62a1      	str	r1, [r4, #40]	; 0x28
      JPEG_ConvertorParams.V_factor  = 8;
90003638:	e9c4 5507 	strd	r5, r5, [r4, #28]
  if((JPEG_ConvertorParams.ImageWidth % JPEG_ConvertorParams.H_factor) != 0)
  {
    hMCU++; /*+1 for horizenatl incomplete MCU */
9000363c:	3301      	adds	r3, #1
  }

  vMCU = (JPEG_ConvertorParams.ImageHeight / JPEG_ConvertorParams.V_factor);
9000363e:	fbb6 f1f5 	udiv	r1, r6, r5
  if((JPEG_ConvertorParams.ImageHeight % JPEG_ConvertorParams.V_factor) != 0)
90003642:	fb05 6611 	mls	r6, r5, r1, r6
90003646:	b106      	cbz	r6, 9000364a <TGFX_JPEG_GetDecodeColorConvertFunc+0x52>
  {
    vMCU++; /*+1 for vertical incomplete MCU */
90003648:	3101      	adds	r1, #1
  }
  JPEG_ConvertorParams.MCU_Total_Nb = (hMCU * vMCU);
9000364a:	fb01 f303 	mul.w	r3, r1, r3
  *ImageNbMCUs = JPEG_ConvertorParams.MCU_Total_Nb;

  return HAL_OK;
9000364e:	2000      	movs	r0, #0
  JPEG_ConvertorParams.MCU_Total_Nb = (hMCU * vMCU);
90003650:	62e3      	str	r3, [r4, #44]	; 0x2c
  *ImageNbMCUs = JPEG_ConvertorParams.MCU_Total_Nb;
90003652:	6013      	str	r3, [r2, #0]
}
90003654:	bcf0      	pop	{r4, r5, r6, r7}
90003656:	4770      	bx	lr
  else if(JPEG_ConvertorParams.ColorSpace == JPEG_CMYK_COLORSPACE)
90003658:	2d30      	cmp	r5, #48	; 0x30
9000365a:	d119      	bne.n	90003690 <TGFX_JPEG_GetDecodeColorConvertFunc+0x98>
    *pFunction =  JPEG_MCU_YCCK_ARGB_ConvertBlocks;
9000365c:	4828      	ldr	r0, [pc, #160]	; (90003700 <TGFX_JPEG_GetDecodeColorConvertFunc+0x108>)
9000365e:	6008      	str	r0, [r1, #0]
    if(JPEG_ConvertorParams.LineOffset != 0)
90003660:	f013 0107 	ands.w	r1, r3, #7
90003664:	d1df      	bne.n	90003626 <TGFX_JPEG_GetDecodeColorConvertFunc+0x2e>
    JPEG_ConvertorParams.LineOffset = JPEG_ConvertorParams.ImageWidth % 8;
90003666:	6161      	str	r1, [r4, #20]
90003668:	e00a      	b.n	90003680 <TGFX_JPEG_GetDecodeColorConvertFunc+0x88>
    if(JPEG_ConvertorParams.ChromaSubsampling == JPEG_420_SUBSAMPLING)
9000366a:	2f01      	cmp	r7, #1
9000366c:	d024      	beq.n	900036b8 <TGFX_JPEG_GetDecodeColorConvertFunc+0xc0>
    else if(JPEG_ConvertorParams.ChromaSubsampling == JPEG_422_SUBSAMPLING)
9000366e:	2f02      	cmp	r7, #2
90003670:	d011      	beq.n	90003696 <TGFX_JPEG_GetDecodeColorConvertFunc+0x9e>
      *pFunction =  JPEG_MCU_YCbCr444_ARGB_ConvertBlocks;
90003672:	4824      	ldr	r0, [pc, #144]	; (90003704 <TGFX_JPEG_GetDecodeColorConvertFunc+0x10c>)
90003674:	6008      	str	r0, [r1, #0]
      if(JPEG_ConvertorParams.LineOffset != 0)
90003676:	f013 0107 	ands.w	r1, r3, #7
9000367a:	d1d4      	bne.n	90003626 <TGFX_JPEG_GetDecodeColorConvertFunc+0x2e>
9000367c:	e7f3      	b.n	90003666 <TGFX_JPEG_GetDecodeColorConvertFunc+0x6e>
    JPEG_ConvertorParams.LineOffset = JPEG_ConvertorParams.ImageWidth % 8;
9000367e:	6165      	str	r5, [r4, #20]
  JPEG_ConvertorParams.ScaledWidth = JPEG_BYTES_PER_PIXEL * JPEG_ConvertorParams.ImageWidth;
90003680:	0059      	lsls	r1, r3, #1
      JPEG_ConvertorParams.H_factor = 16;
90003682:	2508      	movs	r5, #8
  JPEG_ConvertorParams.WidthExtend = JPEG_ConvertorParams.ImageWidth + JPEG_ConvertorParams.LineOffset;
90003684:	6263      	str	r3, [r4, #36]	; 0x24
  hMCU = (JPEG_ConvertorParams.ImageWidth / JPEG_ConvertorParams.H_factor);
90003686:	08db      	lsrs	r3, r3, #3
  JPEG_ConvertorParams.ScaledWidth = JPEG_BYTES_PER_PIXEL * JPEG_ConvertorParams.ImageWidth;
90003688:	62a1      	str	r1, [r4, #40]	; 0x28
      JPEG_ConvertorParams.V_factor  = 8;
9000368a:	e9c4 5507 	strd	r5, r5, [r4, #28]
  if((JPEG_ConvertorParams.ImageWidth % JPEG_ConvertorParams.H_factor) != 0)
9000368e:	e7d6      	b.n	9000363e <TGFX_JPEG_GetDecodeColorConvertFunc+0x46>
    return HAL_ERROR; /* Color space Not supported*/
90003690:	2001      	movs	r0, #1
}
90003692:	bcf0      	pop	{r4, r5, r6, r7}
90003694:	4770      	bx	lr
      *pFunction =  JPEG_MCU_YCbCr422_ARGB_ConvertBlocks;
90003696:	481c      	ldr	r0, [pc, #112]	; (90003708 <TGFX_JPEG_GetDecodeColorConvertFunc+0x110>)
      JPEG_ConvertorParams.H_factor = 16;
90003698:	61e5      	str	r5, [r4, #28]
      *pFunction =  JPEG_MCU_YCbCr422_ARGB_ConvertBlocks;
9000369a:	6008      	str	r0, [r1, #0]
      if(JPEG_ConvertorParams.LineOffset != 0)
9000369c:	f013 010f 	ands.w	r1, r3, #15
900036a0:	d022      	beq.n	900036e8 <TGFX_JPEG_GetDecodeColorConvertFunc+0xf0>
        JPEG_ConvertorParams.LineOffset = 16 - JPEG_ConvertorParams.LineOffset;
900036a2:	f1c1 0110 	rsb	r1, r1, #16
      JPEG_ConvertorParams.V_factor  = 8;
900036a6:	2508      	movs	r5, #8
        JPEG_ConvertorParams.LineOffset = 16 - JPEG_ConvertorParams.LineOffset;
900036a8:	6161      	str	r1, [r4, #20]
  JPEG_ConvertorParams.WidthExtend = JPEG_ConvertorParams.ImageWidth + JPEG_ConvertorParams.LineOffset;
900036aa:	4419      	add	r1, r3
      JPEG_ConvertorParams.V_factor  = 8;
900036ac:	6225      	str	r5, [r4, #32]
  JPEG_ConvertorParams.WidthExtend = JPEG_ConvertorParams.ImageWidth + JPEG_ConvertorParams.LineOffset;
900036ae:	6261      	str	r1, [r4, #36]	; 0x24
  JPEG_ConvertorParams.ScaledWidth = JPEG_BYTES_PER_PIXEL * JPEG_ConvertorParams.ImageWidth;
900036b0:	0059      	lsls	r1, r3, #1
  hMCU = (JPEG_ConvertorParams.ImageWidth / JPEG_ConvertorParams.H_factor);
900036b2:	091b      	lsrs	r3, r3, #4
  JPEG_ConvertorParams.ScaledWidth = JPEG_BYTES_PER_PIXEL * JPEG_ConvertorParams.ImageWidth;
900036b4:	62a1      	str	r1, [r4, #40]	; 0x28
900036b6:	e7c1      	b.n	9000363c <TGFX_JPEG_GetDecodeColorConvertFunc+0x44>
      *pFunction = TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks;
900036b8:	4814      	ldr	r0, [pc, #80]	; (9000370c <TGFX_JPEG_GetDecodeColorConvertFunc+0x114>)
900036ba:	6008      	str	r0, [r1, #0]
      if(JPEG_ConvertorParams.LineOffset != 0)
900036bc:	f013 010f 	ands.w	r1, r3, #15
900036c0:	d107      	bne.n	900036d2 <TGFX_JPEG_GetDecodeColorConvertFunc+0xda>
      JPEG_ConvertorParams.LineOffset = JPEG_ConvertorParams.ImageWidth % 16;
900036c2:	6161      	str	r1, [r4, #20]
  JPEG_ConvertorParams.ScaledWidth = JPEG_BYTES_PER_PIXEL * JPEG_ConvertorParams.ImageWidth;
900036c4:	0059      	lsls	r1, r3, #1
  JPEG_ConvertorParams.WidthExtend = JPEG_ConvertorParams.ImageWidth + JPEG_ConvertorParams.LineOffset;
900036c6:	6263      	str	r3, [r4, #36]	; 0x24
  hMCU = (JPEG_ConvertorParams.ImageWidth / JPEG_ConvertorParams.H_factor);
900036c8:	091b      	lsrs	r3, r3, #4
  JPEG_ConvertorParams.ScaledWidth = JPEG_BYTES_PER_PIXEL * JPEG_ConvertorParams.ImageWidth;
900036ca:	62a1      	str	r1, [r4, #40]	; 0x28
      JPEG_ConvertorParams.V_factor  = 8;
900036cc:	e9c4 5507 	strd	r5, r5, [r4, #28]
  if((JPEG_ConvertorParams.ImageWidth % JPEG_ConvertorParams.H_factor) != 0)
900036d0:	e7b5      	b.n	9000363e <TGFX_JPEG_GetDecodeColorConvertFunc+0x46>
        JPEG_ConvertorParams.LineOffset = 16 - JPEG_ConvertorParams.LineOffset;
900036d2:	f1c1 0110 	rsb	r1, r1, #16
900036d6:	6161      	str	r1, [r4, #20]
  JPEG_ConvertorParams.WidthExtend = JPEG_ConvertorParams.ImageWidth + JPEG_ConvertorParams.LineOffset;
900036d8:	4419      	add	r1, r3
900036da:	6261      	str	r1, [r4, #36]	; 0x24
  JPEG_ConvertorParams.ScaledWidth = JPEG_BYTES_PER_PIXEL * JPEG_ConvertorParams.ImageWidth;
900036dc:	0059      	lsls	r1, r3, #1
  hMCU = (JPEG_ConvertorParams.ImageWidth / JPEG_ConvertorParams.H_factor);
900036de:	091b      	lsrs	r3, r3, #4
  JPEG_ConvertorParams.ScaledWidth = JPEG_BYTES_PER_PIXEL * JPEG_ConvertorParams.ImageWidth;
900036e0:	62a1      	str	r1, [r4, #40]	; 0x28
      JPEG_ConvertorParams.V_factor  = 8;
900036e2:	e9c4 5507 	strd	r5, r5, [r4, #28]
900036e6:	e7a9      	b.n	9000363c <TGFX_JPEG_GetDecodeColorConvertFunc+0x44>
900036e8:	2508      	movs	r5, #8
      JPEG_ConvertorParams.LineOffset = JPEG_ConvertorParams.ImageWidth % 16;
900036ea:	6161      	str	r1, [r4, #20]
  JPEG_ConvertorParams.ScaledWidth = JPEG_BYTES_PER_PIXEL * JPEG_ConvertorParams.ImageWidth;
900036ec:	0059      	lsls	r1, r3, #1
      JPEG_ConvertorParams.V_factor  = 8;
900036ee:	e9c4 5308 	strd	r5, r3, [r4, #32]
  JPEG_ConvertorParams.ScaledWidth = JPEG_BYTES_PER_PIXEL * JPEG_ConvertorParams.ImageWidth;
900036f2:	62a1      	str	r1, [r4, #40]	; 0x28
  hMCU = (JPEG_ConvertorParams.ImageWidth / JPEG_ConvertorParams.H_factor);
900036f4:	091b      	lsrs	r3, r3, #4
  if((JPEG_ConvertorParams.ImageWidth % JPEG_ConvertorParams.H_factor) != 0)
900036f6:	e7a2      	b.n	9000363e <TGFX_JPEG_GetDecodeColorConvertFunc+0x46>
900036f8:	2400b9ec 	.word	0x2400b9ec
900036fc:	9000324d 	.word	0x9000324d
90003700:	9000337d 	.word	0x9000337d
90003704:	90002f51 	.word	0x90002f51
90003708:	90002c7d 	.word	0x90002c7d
9000370c:	90002a61 	.word	0x90002a61

90003710 <TGFX_JPEG_InitColorTables>:
  * @brief  Initializes the colors conversion Look Up Tables
  * @param  None
  * @retval None
  */
void TGFX_JPEG_InitColorTables(void)
{
90003710:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90003714:	f8df c12c 	ldr.w	ip, [pc, #300]	; 90003844 <TGFX_JPEG_InitColorTables+0x134>
90003718:	b0a5      	sub	sp, #148	; 0x94
9000371a:	f8df 812c 	ldr.w	r8, [pc, #300]	; 90003848 <TGFX_JPEG_InitColorTables+0x138>
9000371e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
90003722:	f8df e128 	ldr.w	lr, [pc, #296]	; 9000384c <TGFX_JPEG_InitColorTables+0x13c>
  */
void TGFX_JPEG_InitPreProcColorTables(void)
{
  int32_t i;

  for (i = 0; i <= 255; i++)
90003726:	2300      	movs	r3, #0
90003728:	4f3d      	ldr	r7, [pc, #244]	; (90003820 <TGFX_JPEG_InitColorTables+0x110>)
    GREEN_CB_LUT[i]        = (((-((int32_t) ((0.3313 ) * (1L << 16)))) * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;

    /* BLUE_CB_LUT and RED_CR_LUT are identical */
    BLUE_CB_RED_CR_LUT[i]  = ((  ((int32_t) ((0.5 )    * (1L << 16)))  * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;

    GREEN_CR_LUT[i]        = (((-((int32_t) ((0.4187 ) * (1L << 16)))) * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
9000372a:	f64e 3b2f 	movw	fp, #60207	; 0xeb2f
9000372e:	4e3d      	ldr	r6, [pc, #244]	; (90003824 <TGFX_JPEG_InitColorTables+0x114>)
    BLUE_CR_LUT[i]         = (((-((int32_t) ((0.0813 ) * (1L << 16)))) * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
90003730:	f249 4ad0 	movw	sl, #38096	; 0x94d0
90003734:	4d3c      	ldr	r5, [pc, #240]	; (90003828 <TGFX_JPEG_InitColorTables+0x118>)
  for (i = 0; i <= 255; i++)
90003736:	f644 498b 	movw	r9, #19595	; 0x4c8b
9000373a:	4c3c      	ldr	r4, [pc, #240]	; (9000382c <TGFX_JPEG_InitColorTables+0x11c>)
9000373c:	483c      	ldr	r0, [pc, #240]	; (90003830 <TGFX_JPEG_InitColorTables+0x120>)
    GREEN_Y_LUT[i]         = ((  ((int32_t) ((0.587 )  * (1L << 16)))  * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
9000373e:	f249 6245 	movw	r2, #38469	; 0x9645
90003742:	fb02 f203 	mul.w	r2, r2, r3
90003746:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
9000374a:	1412      	asrs	r2, r2, #16
9000374c:	f84e 2f04 	str.w	r2, [lr, #4]!
    BLUE_Y_LUT[i]          = ((  ((int32_t) ((0.114 )  * (1L << 16)))  * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
90003750:	f641 522f 	movw	r2, #7471	; 0x1d2f
90003754:	fb02 f203 	mul.w	r2, r2, r3
90003758:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
9000375c:	1412      	asrs	r2, r2, #16
9000375e:	f84c 2f04 	str.w	r2, [ip, #4]!
    RED_CB_LUT[i]          = (((-((int32_t) ((0.1687 ) * (1L << 16)))) * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
90003762:	4a34      	ldr	r2, [pc, #208]	; (90003834 <TGFX_JPEG_InitColorTables+0x124>)
90003764:	fb02 f203 	mul.w	r2, r2, r3
90003768:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
9000376c:	1412      	asrs	r2, r2, #16
9000376e:	f847 2f04 	str.w	r2, [r7, #4]!
    GREEN_CB_LUT[i]        = (((-((int32_t) ((0.3313 ) * (1L << 16)))) * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
90003772:	4a31      	ldr	r2, [pc, #196]	; (90003838 <TGFX_JPEG_InitColorTables+0x128>)
90003774:	fb02 f203 	mul.w	r2, r2, r3
    BLUE_CB_RED_CR_LUT[i]  = ((  ((int32_t) ((0.5 )    * (1L << 16)))  * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
90003778:	3301      	adds	r3, #1
    GREEN_CB_LUT[i]        = (((-((int32_t) ((0.3313 ) * (1L << 16)))) * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
9000377a:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
  for (i = 0; i <= 255; i++)
9000377e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    GREEN_CB_LUT[i]        = (((-((int32_t) ((0.3313 ) * (1L << 16)))) * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
90003782:	ea4f 4222 	mov.w	r2, r2, asr #16
90003786:	f846 2f04 	str.w	r2, [r6, #4]!
    GREEN_CR_LUT[i]        = (((-((int32_t) ((0.4187 ) * (1L << 16)))) * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
9000378a:	4a2c      	ldr	r2, [pc, #176]	; (9000383c <TGFX_JPEG_InitColorTables+0x12c>)
9000378c:	fb02 b203 	mla	r2, r2, r3, fp
90003790:	ea4f 4222 	mov.w	r2, r2, asr #16
90003794:	f844 2f04 	str.w	r2, [r4, #4]!
    BLUE_CR_LUT[i]         = (((-((int32_t) ((0.0813 ) * (1L << 16)))) * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
90003798:	4a29      	ldr	r2, [pc, #164]	; (90003840 <TGFX_JPEG_InitColorTables+0x130>)
9000379a:	fb02 a203 	mla	r2, r2, r3, sl
9000379e:	ea4f 4222 	mov.w	r2, r2, asr #16
900037a2:	f840 2f04 	str.w	r2, [r0, #4]!
    RED_Y_LUT[i]           = ((  ((int32_t) ((0.299 )  * (1L << 16)))  * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
900037a6:	ea4f 4221 	mov.w	r2, r1, asr #16
  for (i = 0; i <= 255; i++)
900037aa:	4449      	add	r1, r9
    RED_Y_LUT[i]           = ((  ((int32_t) ((0.299 )  * (1L << 16)))  * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
900037ac:	f848 2f04 	str.w	r2, [r8, #4]!
    BLUE_CB_RED_CR_LUT[i]  = ((  ((int32_t) ((0.5 )    * (1L << 16)))  * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
900037b0:	f343 024f 	sbfx	r2, r3, #1, #16
900037b4:	f845 2f04 	str.w	r2, [r5, #4]!
  for (i = 0; i <= 255; i++)
900037b8:	d1c1      	bne.n	9000373e <TGFX_JPEG_InitColorTables+0x2e>
900037ba:	f8df e094 	ldr.w	lr, [pc, #148]	; 90003850 <TGFX_JPEG_InitColorTables+0x140>
900037be:	2138      	movs	r1, #56	; 0x38
void TGFX_JPEG_Init_MCU_LUT(void)
{
  uint32_t i, j, offset;

  /*Y LUT */
  for(i = 0; i < 16; i++)
900037c0:	f04f 0c00 	mov.w	ip, #0
900037c4:	e007      	b.n	900037d6 <TGFX_JPEG_InitColorTables+0xc6>
900037c6:	f10c 0c01 	add.w	ip, ip, #1
900037ca:	4641      	mov	r1, r8
900037cc:	f10e 0e20 	add.w	lr, lr, #32
900037d0:	f1bc 0f10 	cmp.w	ip, #16
900037d4:	d03e      	beq.n	90003854 <TGFX_JPEG_InitColorTables+0x144>
  {
    for(j = 0; j < 16; j++)
    {
      offset =  j + (i*8);
      if((j>=8) && (i>=8)) offset+= 120;
900037d6:	f1bc 0f07 	cmp.w	ip, #7
900037da:	f101 0808 	add.w	r8, r1, #8
900037de:	4672      	mov	r2, lr
900037e0:	f04f 0001 	mov.w	r0, #1
900037e4:	bf94      	ite	ls
900037e6:	2600      	movls	r6, #0
900037e8:	2601      	movhi	r6, #1
900037ea:	fa1f f388 	uxth.w	r3, r8
900037ee:	2400      	movs	r4, #0
900037f0:	2c07      	cmp	r4, #7
900037f2:	f1a1 0538 	sub.w	r5, r1, #56	; 0x38
900037f6:	bf94      	ite	ls
900037f8:	2700      	movls	r7, #0
900037fa:	2701      	movhi	r7, #1
900037fc:	2f00      	cmp	r7, #0
900037fe:	f000 8407 	beq.w	90004010 <TGFX_JPEG_InitColorTables+0x900>
90003802:	2e00      	cmp	r6, #0
90003804:	f000 8404 	beq.w	90004010 <TGFX_JPEG_InitColorTables+0x900>
90003808:	f101 0540 	add.w	r5, r1, #64	; 0x40
    for(j = 0; j < 16; j++)
9000380c:	2810      	cmp	r0, #16
      else  if((j>=8) && (i<8)) offset+= 56;
      else  if((j<8) && (i>=8)) offset+= 64;

      JPEG_Y_MCU_LUT[i*16 + j] = offset;
9000380e:	8015      	strh	r5, [r2, #0]
    for(j = 0; j < 16; j++)
90003810:	d0d9      	beq.n	900037c6 <TGFX_JPEG_InitColorTables+0xb6>
90003812:	3301      	adds	r3, #1
90003814:	3401      	adds	r4, #1
90003816:	3001      	adds	r0, #1
90003818:	3101      	adds	r1, #1
9000381a:	3202      	adds	r2, #2
9000381c:	b29b      	uxth	r3, r3
9000381e:	e7e7      	b.n	900037f0 <TGFX_JPEG_InitColorTables+0xe0>
90003820:	2400c5a8 	.word	0x2400c5a8
90003824:	2400a968 	.word	0x2400a968
90003828:	24008d68 	.word	0x24008d68
9000382c:	2400ad68 	.word	0x2400ad68
90003830:	24009168 	.word	0x24009168
90003834:	ffffd4d1 	.word	0xffffd4d1
90003838:	ffffab30 	.word	0xffffab30
9000383c:	ffff94d1 	.word	0xffff94d1
90003840:	ffffeb30 	.word	0xffffeb30
90003844:	24009568 	.word	0x24009568
90003848:	2400c9a8 	.word	0x2400c9a8
9000384c:	2400b168 	.word	0x2400b168
90003850:	2400c3ac 	.word	0x2400c3ac
90003854:	4b07      	ldr	r3, [pc, #28]	; (90003874 <TGFX_JPEG_InitColorTables+0x164>)
    }
  }

  /*Cb Cr K LUT*/
  for(i = 0; i < 16; i++)
90003856:	2000      	movs	r0, #0
90003858:	4907      	ldr	r1, [pc, #28]	; (90003878 <TGFX_JPEG_InitColorTables+0x168>)
  for(i = 0; i < 16; i++)
9000385a:	f04f 0c80 	mov.w	ip, #128	; 0x80
9000385e:	9304      	str	r3, [sp, #16]
90003860:	4b06      	ldr	r3, [pc, #24]	; (9000387c <TGFX_JPEG_InitColorTables+0x16c>)
90003862:	4a07      	ldr	r2, [pc, #28]	; (90003880 <TGFX_JPEG_InitColorTables+0x170>)
90003864:	9303      	str	r3, [sp, #12]
90003866:	4b07      	ldr	r3, [pc, #28]	; (90003884 <TGFX_JPEG_InitColorTables+0x174>)
90003868:	f8df e01c 	ldr.w	lr, [pc, #28]	; 90003888 <TGFX_JPEG_InitColorTables+0x178>
  for(i = 0; i < 16; i++)
9000386c:	469b      	mov	fp, r3
9000386e:	9002      	str	r0, [sp, #8]
90003870:	e00c      	b.n	9000388c <TGFX_JPEG_InitColorTables+0x17c>
90003872:	bf00      	nop
90003874:	2400b56c 	.word	0x2400b56c
90003878:	2400bc2c 	.word	0x2400bc2c
9000387c:	2400b76c 	.word	0x2400b76c
90003880:	2400beac 	.word	0x2400beac
90003884:	2400ba2c 	.word	0x2400ba2c
90003888:	2400c0ac 	.word	0x2400c0ac
  {
    for(j = 0; j < 16; j++)
    {
      offset = i*16 + j;

      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
9000388c:	9802      	ldr	r0, [sp, #8]
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
9000388e:	f10c 0501 	add.w	r5, ip, #1

      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
90003892:	f10c 0640 	add.w	r6, ip, #64	; 0x40
90003896:	2400      	movs	r4, #0
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
90003898:	0843      	lsrs	r3, r0, #1
  for(i = 0; i < 16; i++)
9000389a:	1c47      	adds	r7, r0, #1
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
9000389c:	b2ad      	uxth	r5, r5
9000389e:	2000      	movs	r0, #0
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
900038a0:	00db      	lsls	r3, r3, #3
  for(i = 0; i < 16; i++)
900038a2:	9702      	str	r7, [sp, #8]
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
900038a4:	b2b6      	uxth	r6, r6
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
900038a6:	9508      	str	r5, [sp, #32]
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
900038a8:	b29b      	uxth	r3, r3
  for(i = 0; i < 16; i++)
900038aa:	3220      	adds	r2, #32
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
900038ac:	9606      	str	r6, [sp, #24]
900038ae:	4626      	mov	r6, r4
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
900038b0:	f503 7580 	add.w	r5, r3, #256	; 0x100
900038b4:	f503 7a81 	add.w	sl, r3, #258	; 0x102
900038b8:	f203 1903 	addw	r9, r3, #259	; 0x103
  for(i = 0; i < 16; i++)
900038bc:	f10b 0b20 	add.w	fp, fp, #32
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
900038c0:	b2ad      	uxth	r5, r5
  for(i = 0; i < 16; i++)
900038c2:	3120      	adds	r1, #32
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
900038c4:	fa1f fa8a 	uxth.w	sl, sl
900038c8:	f365 060f 	bfi	r6, r5, #0, #16
900038cc:	fa1f f989 	uxth.w	r9, r9
900038d0:	f365 461f 	bfi	r6, r5, #16, #16
900038d4:	4635      	mov	r5, r6
900038d6:	9e04      	ldr	r6, [sp, #16]
900038d8:	9500      	str	r5, [sp, #0]
900038da:	4634      	mov	r4, r6
900038dc:	6035      	str	r5, [r6, #0]
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
900038de:	f10c 0541 	add.w	r5, ip, #65	; 0x41
900038e2:	b2ad      	uxth	r5, r5
900038e4:	950a      	str	r5, [sp, #40]	; 0x28
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
900038e6:	f10c 0502 	add.w	r5, ip, #2
900038ea:	fa1f f885 	uxth.w	r8, r5
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
900038ee:	f10c 0542 	add.w	r5, ip, #66	; 0x42
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
900038f2:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
900038f6:	fa1f f885 	uxth.w	r8, r5
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
900038fa:	f10c 0503 	add.w	r5, ip, #3
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
900038fe:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
90003902:	fa1f f885 	uxth.w	r8, r5
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
90003906:	f10c 0543 	add.w	r5, ip, #67	; 0x43
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
9000390a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
9000390e:	fa1f f885 	uxth.w	r8, r5
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
90003912:	f10c 0504 	add.w	r5, ip, #4
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
90003916:	f8cd 8048 	str.w	r8, [sp, #72]	; 0x48
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
9000391a:	fa1f f885 	uxth.w	r8, r5
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
9000391e:	f10c 0544 	add.w	r5, ip, #68	; 0x44
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
90003922:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
90003926:	fa1f f885 	uxth.w	r8, r5
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
9000392a:	f10c 0505 	add.w	r5, ip, #5
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
9000392e:	f8cd 8058 	str.w	r8, [sp, #88]	; 0x58
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
90003932:	fa1f f885 	uxth.w	r8, r5
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
90003936:	f10c 0545 	add.w	r5, ip, #69	; 0x45
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
9000393a:	f8cd 8060 	str.w	r8, [sp, #96]	; 0x60
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
9000393e:	fa1f f885 	uxth.w	r8, r5
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
90003942:	f10c 0506 	add.w	r5, ip, #6
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
90003946:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
9000394a:	fa1f f885 	uxth.w	r8, r5
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
9000394e:	f10c 0546 	add.w	r5, ip, #70	; 0x46
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
90003952:	f8cd 8070 	str.w	r8, [sp, #112]	; 0x70
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
90003956:	fa1f f885 	uxth.w	r8, r5
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
9000395a:	f10c 0507 	add.w	r5, ip, #7
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
9000395e:	f8cd 8078 	str.w	r8, [sp, #120]	; 0x78
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
90003962:	fa1f f885 	uxth.w	r8, r5
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
90003966:	f10c 0547 	add.w	r5, ip, #71	; 0x47
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
9000396a:	f8cd 8080 	str.w	r8, [sp, #128]	; 0x80
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
9000396e:	fa1f f885 	uxth.w	r8, r5
      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
90003972:	f503 75a0 	add.w	r5, r3, #320	; 0x140
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
90003976:	f8cd 8088 	str.w	r8, [sp, #136]	; 0x88
      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
9000397a:	fa1f f885 	uxth.w	r8, r5

      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
9000397e:	f503 75c0 	add.w	r5, r3, #384	; 0x180
      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
90003982:	f8cd 8014 	str.w	r8, [sp, #20]
      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
90003986:	fa1f f885 	uxth.w	r8, r5
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
9000398a:	f203 1501 	addw	r5, r3, #257	; 0x101
      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
9000398e:	f8cd 801c 	str.w	r8, [sp, #28]
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
90003992:	b2ad      	uxth	r5, r5
90003994:	f365 000f 	bfi	r0, r5, #0, #16
90003998:	f365 401f 	bfi	r0, r5, #16, #16
      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
9000399c:	f203 1541 	addw	r5, r3, #321	; 0x141
900039a0:	fa1f f885 	uxth.w	r8, r5
      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
900039a4:	f203 1581 	addw	r5, r3, #385	; 0x181
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
900039a8:	6070      	str	r0, [r6, #4]
      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
900039aa:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
900039ae:	fa1f f885 	uxth.w	r8, r5
      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
900039b2:	f503 75a1 	add.w	r5, r3, #322	; 0x142
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
900039b6:	9001      	str	r0, [sp, #4]
      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
900039b8:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
900039bc:	f203 1047 	addw	r0, r3, #327	; 0x147
900039c0:	fa1f f885 	uxth.w	r8, r5
      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
900039c4:	f503 75c1 	add.w	r5, r3, #386	; 0x182
      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
900039c8:	b280      	uxth	r0, r0
900039ca:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
900039ce:	fa1f f885 	uxth.w	r8, r5
      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
900039d2:	f203 1543 	addw	r5, r3, #323	; 0x143
      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
900039d6:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
900039da:	fa1f f885 	uxth.w	r8, r5
      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
900039de:	f203 1583 	addw	r5, r3, #387	; 0x183
      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
900039e2:	f8cd 8044 	str.w	r8, [sp, #68]	; 0x44
      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
900039e6:	fa1f f885 	uxth.w	r8, r5
      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
900039ea:	f503 75a2 	add.w	r5, r3, #324	; 0x144
      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
900039ee:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
900039f2:	f503 7882 	add.w	r8, r3, #260	; 0x104
      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
900039f6:	b2af      	uxth	r7, r5
      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
900039f8:	f503 75c2 	add.w	r5, r3, #388	; 0x184
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
900039fc:	fa1f f888 	uxth.w	r8, r8
      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
90003a00:	9715      	str	r7, [sp, #84]	; 0x54
      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
90003a02:	b2af      	uxth	r7, r5
      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
90003a04:	f203 1545 	addw	r5, r3, #325	; 0x145
      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
90003a08:	9717      	str	r7, [sp, #92]	; 0x5c
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
90003a0a:	f203 1705 	addw	r7, r3, #261	; 0x105
      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
90003a0e:	b2ae      	uxth	r6, r5
      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
90003a10:	f203 1585 	addw	r5, r3, #389	; 0x185
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
90003a14:	b2bf      	uxth	r7, r7
      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
90003a16:	b2ad      	uxth	r5, r5
      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
90003a18:	9619      	str	r6, [sp, #100]	; 0x64
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
90003a1a:	f503 7683 	add.w	r6, r3, #262	; 0x106
      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
90003a1e:	9021      	str	r0, [sp, #132]	; 0x84
      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
90003a20:	951b      	str	r5, [sp, #108]	; 0x6c
      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
90003a22:	f503 75a3 	add.w	r5, r3, #326	; 0x146
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
90003a26:	b2b6      	uxth	r6, r6
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
90003a28:	9803      	ldr	r0, [sp, #12]
      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
90003a2a:	b2ad      	uxth	r5, r5
90003a2c:	951d      	str	r5, [sp, #116]	; 0x74
      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
90003a2e:	f503 75c3 	add.w	r5, r3, #390	; 0x186
90003a32:	b2ad      	uxth	r5, r5
90003a34:	951f      	str	r5, [sp, #124]	; 0x7c
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
90003a36:	f203 1507 	addw	r5, r3, #263	; 0x107
      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
90003a3a:	f203 1387 	addw	r3, r3, #391	; 0x187
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
90003a3e:	b2ad      	uxth	r5, r5
      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
90003a40:	b29b      	uxth	r3, r3
90003a42:	9323      	str	r3, [sp, #140]	; 0x8c
90003a44:	2300      	movs	r3, #0
90003a46:	f36a 030f 	bfi	r3, sl, #0, #16
90003a4a:	f36a 431f 	bfi	r3, sl, #16, #16
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
90003a4e:	f04f 0a00 	mov.w	sl, #0
90003a52:	f369 0a0f 	bfi	sl, r9, #0, #16
90003a56:	60a3      	str	r3, [r4, #8]
90003a58:	f369 4a1f 	bfi	sl, r9, #16, #16
90003a5c:	f04f 0900 	mov.w	r9, #0
90003a60:	f368 090f 	bfi	r9, r8, #0, #16
90003a64:	f8c4 a00c 	str.w	sl, [r4, #12]
90003a68:	f368 491f 	bfi	r9, r8, #16, #16
90003a6c:	f04f 0800 	mov.w	r8, #0
90003a70:	f367 080f 	bfi	r8, r7, #0, #16
90003a74:	f8c4 9010 	str.w	r9, [r4, #16]
90003a78:	f367 481f 	bfi	r8, r7, #16, #16
90003a7c:	2700      	movs	r7, #0
90003a7e:	f366 070f 	bfi	r7, r6, #0, #16
90003a82:	f8c4 8014 	str.w	r8, [r4, #20]
90003a86:	f366 471f 	bfi	r7, r6, #16, #16
90003a8a:	2600      	movs	r6, #0
90003a8c:	f365 060f 	bfi	r6, r5, #0, #16
90003a90:	61a7      	str	r7, [r4, #24]
90003a92:	f365 461f 	bfi	r6, r5, #16, #16
  for(i = 0; i < 16; i++)
90003a96:	f104 0520 	add.w	r5, r4, #32
90003a9a:	9504      	str	r5, [sp, #16]
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
90003a9c:	2500      	movs	r5, #0
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
90003a9e:	61e6      	str	r6, [r4, #28]
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
90003aa0:	f36c 050f 	bfi	r5, ip, #0, #16
90003aa4:	9c08      	ldr	r4, [sp, #32]
90003aa6:	f36c 451f 	bfi	r5, ip, #16, #16
  for(i = 0; i < 16; i++)
90003aaa:	f10c 0c08 	add.w	ip, ip, #8
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
90003aae:	6005      	str	r5, [r0, #0]
90003ab0:	2500      	movs	r5, #0
  for(i = 0; i < 16; i++)
90003ab2:	fa1f fc8c 	uxth.w	ip, ip
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
90003ab6:	f364 050f 	bfi	r5, r4, #0, #16
90003aba:	f364 451f 	bfi	r5, r4, #16, #16
90003abe:	9c0c      	ldr	r4, [sp, #48]	; 0x30
90003ac0:	6045      	str	r5, [r0, #4]
90003ac2:	2500      	movs	r5, #0
90003ac4:	f364 050f 	bfi	r5, r4, #0, #16
90003ac8:	f364 451f 	bfi	r5, r4, #16, #16
90003acc:	9c10      	ldr	r4, [sp, #64]	; 0x40
90003ace:	6085      	str	r5, [r0, #8]
90003ad0:	2500      	movs	r5, #0
90003ad2:	f364 050f 	bfi	r5, r4, #0, #16
90003ad6:	f364 451f 	bfi	r5, r4, #16, #16
90003ada:	9c14      	ldr	r4, [sp, #80]	; 0x50
90003adc:	60c5      	str	r5, [r0, #12]
90003ade:	2500      	movs	r5, #0
90003ae0:	f364 050f 	bfi	r5, r4, #0, #16
90003ae4:	f364 451f 	bfi	r5, r4, #16, #16
90003ae8:	9c18      	ldr	r4, [sp, #96]	; 0x60
90003aea:	6105      	str	r5, [r0, #16]
90003aec:	2500      	movs	r5, #0
90003aee:	f364 050f 	bfi	r5, r4, #0, #16
90003af2:	f364 451f 	bfi	r5, r4, #16, #16
90003af6:	9c1c      	ldr	r4, [sp, #112]	; 0x70
90003af8:	6145      	str	r5, [r0, #20]
90003afa:	2500      	movs	r5, #0
90003afc:	f364 050f 	bfi	r5, r4, #0, #16
90003b00:	f364 451f 	bfi	r5, r4, #16, #16
90003b04:	9c20      	ldr	r4, [sp, #128]	; 0x80
90003b06:	6185      	str	r5, [r0, #24]
90003b08:	2500      	movs	r5, #0
90003b0a:	f364 050f 	bfi	r5, r4, #0, #16
90003b0e:	f364 451f 	bfi	r5, r4, #16, #16
  for(i = 0; i < 16; i++)
90003b12:	f100 0420 	add.w	r4, r0, #32
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
90003b16:	61c5      	str	r5, [r0, #28]
      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
90003b18:	2500      	movs	r5, #0
  for(i = 0; i < 16; i++)
90003b1a:	9403      	str	r4, [sp, #12]
      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
90003b1c:	9c05      	ldr	r4, [sp, #20]
90003b1e:	f364 050f 	bfi	r5, r4, #0, #16
90003b22:	f364 451f 	bfi	r5, r4, #16, #16
90003b26:	9c09      	ldr	r4, [sp, #36]	; 0x24
90003b28:	f84b 5c20 	str.w	r5, [fp, #-32]
90003b2c:	2500      	movs	r5, #0
90003b2e:	f364 050f 	bfi	r5, r4, #0, #16
90003b32:	f364 451f 	bfi	r5, r4, #16, #16
90003b36:	f84b 5c1c 	str.w	r5, [fp, #-28]
90003b3a:	2500      	movs	r5, #0
90003b3c:	9c0d      	ldr	r4, [sp, #52]	; 0x34
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
90003b3e:	9806      	ldr	r0, [sp, #24]
      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
90003b40:	f364 050f 	bfi	r5, r4, #0, #16
90003b44:	f364 451f 	bfi	r5, r4, #16, #16
90003b48:	9c11      	ldr	r4, [sp, #68]	; 0x44
90003b4a:	f84b 5c18 	str.w	r5, [fp, #-24]
90003b4e:	2500      	movs	r5, #0
90003b50:	f364 050f 	bfi	r5, r4, #0, #16
90003b54:	f364 451f 	bfi	r5, r4, #16, #16
90003b58:	9c15      	ldr	r4, [sp, #84]	; 0x54
90003b5a:	f84b 5c14 	str.w	r5, [fp, #-20]
90003b5e:	2500      	movs	r5, #0
90003b60:	f364 050f 	bfi	r5, r4, #0, #16
90003b64:	f364 451f 	bfi	r5, r4, #16, #16
90003b68:	9c19      	ldr	r4, [sp, #100]	; 0x64
90003b6a:	f84b 5c10 	str.w	r5, [fp, #-16]
90003b6e:	2500      	movs	r5, #0
90003b70:	f364 050f 	bfi	r5, r4, #0, #16
90003b74:	f364 451f 	bfi	r5, r4, #16, #16
90003b78:	9c1d      	ldr	r4, [sp, #116]	; 0x74
90003b7a:	f84b 5c0c 	str.w	r5, [fp, #-12]
90003b7e:	2500      	movs	r5, #0
90003b80:	f364 050f 	bfi	r5, r4, #0, #16
90003b84:	f364 451f 	bfi	r5, r4, #16, #16
90003b88:	9c21      	ldr	r4, [sp, #132]	; 0x84
90003b8a:	f84b 5c08 	str.w	r5, [fp, #-8]
90003b8e:	2500      	movs	r5, #0
90003b90:	f364 050f 	bfi	r5, r4, #0, #16
90003b94:	f364 451f 	bfi	r5, r4, #16, #16
      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
90003b98:	2400      	movs	r4, #0
      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
90003b9a:	f84b 5c04 	str.w	r5, [fp, #-4]
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
90003b9e:	2500      	movs	r5, #0
90003ba0:	f360 050f 	bfi	r5, r0, #0, #16
90003ba4:	f360 451f 	bfi	r5, r0, #16, #16
90003ba8:	980a      	ldr	r0, [sp, #40]	; 0x28
90003baa:	f841 5c20 	str.w	r5, [r1, #-32]
90003bae:	2500      	movs	r5, #0
90003bb0:	f360 050f 	bfi	r5, r0, #0, #16
90003bb4:	f360 451f 	bfi	r5, r0, #16, #16
90003bb8:	980e      	ldr	r0, [sp, #56]	; 0x38
90003bba:	f841 5c1c 	str.w	r5, [r1, #-28]
90003bbe:	2500      	movs	r5, #0
90003bc0:	f360 050f 	bfi	r5, r0, #0, #16
90003bc4:	f360 451f 	bfi	r5, r0, #16, #16
90003bc8:	9812      	ldr	r0, [sp, #72]	; 0x48
90003bca:	f841 5c18 	str.w	r5, [r1, #-24]
90003bce:	2500      	movs	r5, #0
90003bd0:	f360 050f 	bfi	r5, r0, #0, #16
90003bd4:	f360 451f 	bfi	r5, r0, #16, #16
90003bd8:	9816      	ldr	r0, [sp, #88]	; 0x58
90003bda:	f841 5c14 	str.w	r5, [r1, #-20]
90003bde:	2500      	movs	r5, #0
90003be0:	f360 050f 	bfi	r5, r0, #0, #16
90003be4:	f360 451f 	bfi	r5, r0, #16, #16
90003be8:	981a      	ldr	r0, [sp, #104]	; 0x68
90003bea:	f841 5c10 	str.w	r5, [r1, #-16]
90003bee:	2500      	movs	r5, #0
90003bf0:	f360 050f 	bfi	r5, r0, #0, #16
90003bf4:	f360 451f 	bfi	r5, r0, #16, #16
90003bf8:	981e      	ldr	r0, [sp, #120]	; 0x78
90003bfa:	f841 5c0c 	str.w	r5, [r1, #-12]
90003bfe:	2500      	movs	r5, #0
90003c00:	f360 050f 	bfi	r5, r0, #0, #16
90003c04:	f360 451f 	bfi	r5, r0, #16, #16
90003c08:	9822      	ldr	r0, [sp, #136]	; 0x88
90003c0a:	f841 5c08 	str.w	r5, [r1, #-8]
90003c0e:	2500      	movs	r5, #0
90003c10:	f360 050f 	bfi	r5, r0, #0, #16
90003c14:	f360 451f 	bfi	r5, r0, #16, #16
      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
90003c18:	9807      	ldr	r0, [sp, #28]
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
90003c1a:	f841 5c04 	str.w	r5, [r1, #-4]
      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
90003c1e:	2500      	movs	r5, #0
90003c20:	f360 050f 	bfi	r5, r0, #0, #16
90003c24:	f360 451f 	bfi	r5, r0, #16, #16
90003c28:	f842 5c20 	str.w	r5, [r2, #-32]
      JPEG_K_MCU_422_LUT[offset] = (j/2) + ((i/2)*8) + 256;
90003c2c:	9d00      	ldr	r5, [sp, #0]
90003c2e:	f8ce 5000 	str.w	r5, [lr]
90003c32:	9801      	ldr	r0, [sp, #4]
90003c34:	f8ce 601c 	str.w	r6, [lr, #28]
      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
90003c38:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
90003c3a:	9d13      	ldr	r5, [sp, #76]	; 0x4c
      JPEG_K_MCU_422_LUT[offset] = (j/2) + ((i/2)*8) + 256;
90003c3c:	e9ce 0301 	strd	r0, r3, [lr, #4]
      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
90003c40:	2300      	movs	r3, #0
90003c42:	9817      	ldr	r0, [sp, #92]	; 0x5c
90003c44:	f366 030f 	bfi	r3, r6, #0, #16
90003c48:	f366 431f 	bfi	r3, r6, #16, #16
90003c4c:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
      JPEG_K_MCU_422_LUT[offset] = (j/2) + ((i/2)*8) + 256;
90003c4e:	e9ce 8705 	strd	r8, r7, [lr, #20]
90003c52:	e9ce a903 	strd	sl, r9, [lr, #12]
      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
90003c56:	f842 3c1c 	str.w	r3, [r2, #-28]
90003c5a:	2300      	movs	r3, #0
  for(i = 0; i < 16; i++)
90003c5c:	9f02      	ldr	r7, [sp, #8]
90003c5e:	f10e 0e20 	add.w	lr, lr, #32
      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
90003c62:	f366 030f 	bfi	r3, r6, #0, #16
  for(i = 0; i < 16; i++)
90003c66:	2f10      	cmp	r7, #16
      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
90003c68:	f366 431f 	bfi	r3, r6, #16, #16
90003c6c:	f842 3c18 	str.w	r3, [r2, #-24]
90003c70:	f04f 0300 	mov.w	r3, #0
90003c74:	f365 030f 	bfi	r3, r5, #0, #16
90003c78:	f365 431f 	bfi	r3, r5, #16, #16
90003c7c:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
90003c7e:	f842 3c14 	str.w	r3, [r2, #-20]
90003c82:	f04f 0300 	mov.w	r3, #0
90003c86:	f365 040f 	bfi	r4, r5, #0, #16
90003c8a:	f360 030f 	bfi	r3, r0, #0, #16
90003c8e:	f365 441f 	bfi	r4, r5, #16, #16
90003c92:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
90003c94:	f360 431f 	bfi	r3, r0, #16, #16
90003c98:	f04f 0000 	mov.w	r0, #0
90003c9c:	f842 4c0c 	str.w	r4, [r2, #-12]
90003ca0:	f842 3c10 	str.w	r3, [r2, #-16]
90003ca4:	4603      	mov	r3, r0
90003ca6:	9c23      	ldr	r4, [sp, #140]	; 0x8c
90003ca8:	f365 000f 	bfi	r0, r5, #0, #16
90003cac:	f364 030f 	bfi	r3, r4, #0, #16
90003cb0:	f365 401f 	bfi	r0, r5, #16, #16
90003cb4:	f364 431f 	bfi	r3, r4, #16, #16
90003cb8:	e942 0302 	strd	r0, r3, [r2, #-8]
  for(i = 0; i < 16; i++)
90003cbc:	f47f ade6 	bne.w	9000388c <TGFX_JPEG_InitColorTables+0x17c>
  {
    for(j = 0; j < 8; j++)
    {
      offset = i*8 + j;

      JPEG_Y_MCU_444_LUT[offset]  = offset;
90003cc0:	48db      	ldr	r0, [pc, #876]	; (90004030 <TGFX_JPEG_InitColorTables+0x920>)
90003cc2:	f44f 3480 	mov.w	r4, #65536	; 0x10000
      JPEG_Cb_MCU_444_LUT[offset] = offset + 64 ;
90003cc6:	49db      	ldr	r1, [pc, #876]	; (90004034 <TGFX_JPEG_InitColorTables+0x924>)
      JPEG_Y_MCU_444_LUT[offset]  = offset;
90003cc8:	6004      	str	r4, [r0, #0]
90003cca:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
      JPEG_Cr_MCU_444_LUT[offset] = offset + 128 ;
90003cce:	4ada      	ldr	r2, [pc, #872]	; (90004038 <TGFX_JPEG_InitColorTables+0x928>)
      JPEG_Y_MCU_444_LUT[offset]  = offset;
90003cd0:	6044      	str	r4, [r0, #4]
90003cd2:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
      JPEG_K_MCU_444_LUT[offset]  = offset + 192 ;
90003cd6:	4bd9      	ldr	r3, [pc, #868]	; (9000403c <TGFX_JPEG_InitColorTables+0x92c>)
      JPEG_Y_MCU_444_LUT[offset]  = offset;
90003cd8:	6084      	str	r4, [r0, #8]
90003cda:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
90003cde:	4fd8      	ldr	r7, [pc, #864]	; (90004040 <TGFX_JPEG_InitColorTables+0x930>)
90003ce0:	60c4      	str	r4, [r0, #12]
90003ce2:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
90003ce6:	4ed7      	ldr	r6, [pc, #860]	; (90004044 <TGFX_JPEG_InitColorTables+0x934>)
90003ce8:	6104      	str	r4, [r0, #16]
90003cea:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
90003cee:	4dd6      	ldr	r5, [pc, #856]	; (90004048 <TGFX_JPEG_InitColorTables+0x938>)
90003cf0:	6144      	str	r4, [r0, #20]
90003cf2:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
  for (i = 0; i <= 255; i++)
90003cf6:	f8df b374 	ldr.w	fp, [pc, #884]	; 9000406c <TGFX_JPEG_InitColorTables+0x95c>
      JPEG_Y_MCU_444_LUT[offset]  = offset;
90003cfa:	6184      	str	r4, [r0, #24]
90003cfc:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
  for (i = 0; i <= 255; i++)
90003d00:	f8df a36c 	ldr.w	sl, [pc, #876]	; 90004070 <TGFX_JPEG_InitColorTables+0x960>
      JPEG_Y_MCU_444_LUT[offset]  = offset;
90003d04:	61c4      	str	r4, [r0, #28]
90003d06:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
  for (i = 0; i <= 255; i++)
90003d0a:	f8df 9368 	ldr.w	r9, [pc, #872]	; 90004074 <TGFX_JPEG_InitColorTables+0x964>
      JPEG_Y_MCU_444_LUT[offset]  = offset;
90003d0e:	6204      	str	r4, [r0, #32]
90003d10:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
  for (i = 0; i <= 255; i++)
90003d14:	f8df 8360 	ldr.w	r8, [pc, #864]	; 90004078 <TGFX_JPEG_InitColorTables+0x968>
      JPEG_Y_MCU_444_LUT[offset]  = offset;
90003d18:	6244      	str	r4, [r0, #36]	; 0x24
90003d1a:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
  for (i = 0; i <= 255; i++)
90003d1e:	f8df e35c 	ldr.w	lr, [pc, #860]	; 9000407c <TGFX_JPEG_InitColorTables+0x96c>
      JPEG_Y_MCU_444_LUT[offset]  = offset;
90003d22:	6284      	str	r4, [r0, #40]	; 0x28
90003d24:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
90003d28:	62c4      	str	r4, [r0, #44]	; 0x2c
90003d2a:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
90003d2e:	6304      	str	r4, [r0, #48]	; 0x30
90003d30:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
90003d34:	6344      	str	r4, [r0, #52]	; 0x34
90003d36:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
90003d3a:	6384      	str	r4, [r0, #56]	; 0x38
90003d3c:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
90003d40:	63c4      	str	r4, [r0, #60]	; 0x3c
90003d42:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
90003d46:	6404      	str	r4, [r0, #64]	; 0x40
90003d48:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
90003d4c:	6444      	str	r4, [r0, #68]	; 0x44
90003d4e:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
90003d52:	6484      	str	r4, [r0, #72]	; 0x48
90003d54:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
90003d58:	64c4      	str	r4, [r0, #76]	; 0x4c
90003d5a:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
90003d5e:	6504      	str	r4, [r0, #80]	; 0x50
90003d60:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
90003d64:	6544      	str	r4, [r0, #84]	; 0x54
90003d66:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
90003d6a:	6584      	str	r4, [r0, #88]	; 0x58
90003d6c:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
90003d70:	65c4      	str	r4, [r0, #92]	; 0x5c
90003d72:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
90003d76:	6604      	str	r4, [r0, #96]	; 0x60
90003d78:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
90003d7c:	6644      	str	r4, [r0, #100]	; 0x64
90003d7e:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
90003d82:	6684      	str	r4, [r0, #104]	; 0x68
90003d84:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
90003d88:	66c4      	str	r4, [r0, #108]	; 0x6c
90003d8a:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
90003d8e:	6704      	str	r4, [r0, #112]	; 0x70
90003d90:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
90003d94:	6744      	str	r4, [r0, #116]	; 0x74
90003d96:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
90003d9a:	6784      	str	r4, [r0, #120]	; 0x78
90003d9c:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
90003da0:	67c4      	str	r4, [r0, #124]	; 0x7c
      JPEG_Cb_MCU_444_LUT[offset] = offset + 64 ;
90003da2:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
90003da6:	48a9      	ldr	r0, [pc, #676]	; (9000404c <TGFX_JPEG_InitColorTables+0x93c>)
90003da8:	e9c1 4000 	strd	r4, r0, [r1]
90003dac:	f104 1404 	add.w	r4, r4, #262148	; 0x40004
90003db0:	f100 1004 	add.w	r0, r0, #262148	; 0x40004
90003db4:	e9c1 4002 	strd	r4, r0, [r1, #8]
90003db8:	f104 1404 	add.w	r4, r4, #262148	; 0x40004
90003dbc:	f100 1004 	add.w	r0, r0, #262148	; 0x40004
90003dc0:	e9c1 4004 	strd	r4, r0, [r1, #16]
90003dc4:	f104 1404 	add.w	r4, r4, #262148	; 0x40004
90003dc8:	f100 1004 	add.w	r0, r0, #262148	; 0x40004
90003dcc:	e9c1 4006 	strd	r4, r0, [r1, #24]
90003dd0:	f104 1404 	add.w	r4, r4, #262148	; 0x40004
90003dd4:	f100 1004 	add.w	r0, r0, #262148	; 0x40004
90003dd8:	e9c1 4008 	strd	r4, r0, [r1, #32]
90003ddc:	f104 1404 	add.w	r4, r4, #262148	; 0x40004
90003de0:	f100 1004 	add.w	r0, r0, #262148	; 0x40004
90003de4:	e9c1 400a 	strd	r4, r0, [r1, #40]	; 0x28
90003de8:	f104 1404 	add.w	r4, r4, #262148	; 0x40004
90003dec:	f100 1004 	add.w	r0, r0, #262148	; 0x40004
90003df0:	e9c1 400c 	strd	r4, r0, [r1, #48]	; 0x30
90003df4:	f104 1404 	add.w	r4, r4, #262148	; 0x40004
90003df8:	f100 1004 	add.w	r0, r0, #262148	; 0x40004
90003dfc:	e9c1 400e 	strd	r4, r0, [r1, #56]	; 0x38
90003e00:	f104 1404 	add.w	r4, r4, #262148	; 0x40004
90003e04:	f100 1004 	add.w	r0, r0, #262148	; 0x40004
90003e08:	e9c1 4010 	strd	r4, r0, [r1, #64]	; 0x40
90003e0c:	f104 1404 	add.w	r4, r4, #262148	; 0x40004
90003e10:	f100 1004 	add.w	r0, r0, #262148	; 0x40004
90003e14:	e9c1 4012 	strd	r4, r0, [r1, #72]	; 0x48
90003e18:	f104 1404 	add.w	r4, r4, #262148	; 0x40004
90003e1c:	f100 1004 	add.w	r0, r0, #262148	; 0x40004
90003e20:	e9c1 4014 	strd	r4, r0, [r1, #80]	; 0x50
90003e24:	f104 1404 	add.w	r4, r4, #262148	; 0x40004
90003e28:	f100 1004 	add.w	r0, r0, #262148	; 0x40004
90003e2c:	e9c1 4016 	strd	r4, r0, [r1, #88]	; 0x58
90003e30:	f104 1404 	add.w	r4, r4, #262148	; 0x40004
90003e34:	f100 1004 	add.w	r0, r0, #262148	; 0x40004
90003e38:	e9c1 4018 	strd	r4, r0, [r1, #96]	; 0x60
90003e3c:	f104 1404 	add.w	r4, r4, #262148	; 0x40004
90003e40:	f100 1004 	add.w	r0, r0, #262148	; 0x40004
90003e44:	e9c1 401a 	strd	r4, r0, [r1, #104]	; 0x68
90003e48:	f104 1404 	add.w	r4, r4, #262148	; 0x40004
90003e4c:	f100 1004 	add.w	r0, r0, #262148	; 0x40004
90003e50:	e9c1 401c 	strd	r4, r0, [r1, #112]	; 0x70
90003e54:	f104 1404 	add.w	r4, r4, #262148	; 0x40004
90003e58:	f100 1004 	add.w	r0, r0, #262148	; 0x40004
90003e5c:	e9c1 401e 	strd	r4, r0, [r1, #120]	; 0x78
      JPEG_Cr_MCU_444_LUT[offset] = offset + 128 ;
90003e60:	f104 1404 	add.w	r4, r4, #262148	; 0x40004
90003e64:	497a      	ldr	r1, [pc, #488]	; (90004050 <TGFX_JPEG_InitColorTables+0x940>)
90003e66:	f100 1006 	add.w	r0, r0, #393222	; 0x60006
90003e6a:	e9c2 4100 	strd	r4, r1, [r2]
90003e6e:	f101 1104 	add.w	r1, r1, #262148	; 0x40004
90003e72:	f104 1408 	add.w	r4, r4, #524296	; 0x80008
90003e76:	e9c2 0102 	strd	r0, r1, [r2, #8]
90003e7a:	f101 1104 	add.w	r1, r1, #262148	; 0x40004
90003e7e:	f100 1008 	add.w	r0, r0, #524296	; 0x80008
90003e82:	e9c2 4104 	strd	r4, r1, [r2, #16]
90003e86:	f101 1104 	add.w	r1, r1, #262148	; 0x40004
90003e8a:	f104 1408 	add.w	r4, r4, #524296	; 0x80008
90003e8e:	e9c2 0106 	strd	r0, r1, [r2, #24]
90003e92:	f101 1104 	add.w	r1, r1, #262148	; 0x40004
90003e96:	f100 1008 	add.w	r0, r0, #524296	; 0x80008
90003e9a:	e9c2 4108 	strd	r4, r1, [r2, #32]
90003e9e:	f101 1104 	add.w	r1, r1, #262148	; 0x40004
90003ea2:	f104 1408 	add.w	r4, r4, #524296	; 0x80008
90003ea6:	e9c2 010a 	strd	r0, r1, [r2, #40]	; 0x28
90003eaa:	f101 1104 	add.w	r1, r1, #262148	; 0x40004
90003eae:	f100 1008 	add.w	r0, r0, #524296	; 0x80008
90003eb2:	e9c2 410c 	strd	r4, r1, [r2, #48]	; 0x30
90003eb6:	f101 1104 	add.w	r1, r1, #262148	; 0x40004
90003eba:	f104 1408 	add.w	r4, r4, #524296	; 0x80008
90003ebe:	e9c2 010e 	strd	r0, r1, [r2, #56]	; 0x38
90003ec2:	f101 1104 	add.w	r1, r1, #262148	; 0x40004
90003ec6:	f100 1008 	add.w	r0, r0, #524296	; 0x80008
90003eca:	e9c2 4110 	strd	r4, r1, [r2, #64]	; 0x40
90003ece:	f101 1104 	add.w	r1, r1, #262148	; 0x40004
90003ed2:	f104 1408 	add.w	r4, r4, #524296	; 0x80008
90003ed6:	e9c2 0112 	strd	r0, r1, [r2, #72]	; 0x48
90003eda:	f101 1104 	add.w	r1, r1, #262148	; 0x40004
90003ede:	f100 1008 	add.w	r0, r0, #524296	; 0x80008
90003ee2:	e9c2 4114 	strd	r4, r1, [r2, #80]	; 0x50
90003ee6:	f101 1104 	add.w	r1, r1, #262148	; 0x40004
90003eea:	f104 1408 	add.w	r4, r4, #524296	; 0x80008
90003eee:	e9c2 0116 	strd	r0, r1, [r2, #88]	; 0x58
90003ef2:	f101 1104 	add.w	r1, r1, #262148	; 0x40004
90003ef6:	f100 1008 	add.w	r0, r0, #524296	; 0x80008
90003efa:	e9c2 4118 	strd	r4, r1, [r2, #96]	; 0x60
90003efe:	f101 1104 	add.w	r1, r1, #262148	; 0x40004
90003f02:	f104 1408 	add.w	r4, r4, #524296	; 0x80008
90003f06:	e9c2 011a 	strd	r0, r1, [r2, #104]	; 0x68
90003f0a:	f101 1104 	add.w	r1, r1, #262148	; 0x40004
90003f0e:	f100 1008 	add.w	r0, r0, #524296	; 0x80008
90003f12:	e9c2 411c 	strd	r4, r1, [r2, #112]	; 0x70
90003f16:	f101 1104 	add.w	r1, r1, #262148	; 0x40004
      JPEG_K_MCU_444_LUT[offset]  = offset + 192 ;
90003f1a:	f104 1408 	add.w	r4, r4, #524296	; 0x80008
      JPEG_Cr_MCU_444_LUT[offset] = offset + 128 ;
90003f1e:	e9c2 011e 	strd	r0, r1, [r2, #120]	; 0x78
      JPEG_K_MCU_444_LUT[offset]  = offset + 192 ;
90003f22:	f100 1006 	add.w	r0, r0, #393222	; 0x60006
90003f26:	f101 1106 	add.w	r1, r1, #393222	; 0x60006
90003f2a:	4a4a      	ldr	r2, [pc, #296]	; (90004054 <TGFX_JPEG_InitColorTables+0x944>)
90003f2c:	e9c3 4000 	strd	r4, r0, [r3]
90003f30:	e9c3 1202 	strd	r1, r2, [r3, #8]
90003f34:	f104 1408 	add.w	r4, r4, #524296	; 0x80008
90003f38:	f100 1008 	add.w	r0, r0, #524296	; 0x80008
90003f3c:	f101 1108 	add.w	r1, r1, #524296	; 0x80008
90003f40:	f102 1208 	add.w	r2, r2, #524296	; 0x80008
90003f44:	e9c3 4004 	strd	r4, r0, [r3, #16]
90003f48:	e9c3 1206 	strd	r1, r2, [r3, #24]
90003f4c:	f104 1408 	add.w	r4, r4, #524296	; 0x80008
90003f50:	f100 1008 	add.w	r0, r0, #524296	; 0x80008
90003f54:	f101 1108 	add.w	r1, r1, #524296	; 0x80008
90003f58:	f102 1208 	add.w	r2, r2, #524296	; 0x80008
90003f5c:	e9c3 4008 	strd	r4, r0, [r3, #32]
90003f60:	e9c3 120a 	strd	r1, r2, [r3, #40]	; 0x28
90003f64:	f104 1408 	add.w	r4, r4, #524296	; 0x80008
90003f68:	f100 1008 	add.w	r0, r0, #524296	; 0x80008
90003f6c:	f101 1108 	add.w	r1, r1, #524296	; 0x80008
90003f70:	f102 1208 	add.w	r2, r2, #524296	; 0x80008
90003f74:	e9c3 400c 	strd	r4, r0, [r3, #48]	; 0x30
90003f78:	e9c3 120e 	strd	r1, r2, [r3, #56]	; 0x38
90003f7c:	f104 1408 	add.w	r4, r4, #524296	; 0x80008
90003f80:	f100 1008 	add.w	r0, r0, #524296	; 0x80008
90003f84:	f101 1108 	add.w	r1, r1, #524296	; 0x80008
90003f88:	f102 1208 	add.w	r2, r2, #524296	; 0x80008
90003f8c:	e9c3 4010 	strd	r4, r0, [r3, #64]	; 0x40
90003f90:	e9c3 1212 	strd	r1, r2, [r3, #72]	; 0x48
90003f94:	f104 1408 	add.w	r4, r4, #524296	; 0x80008
90003f98:	f100 1008 	add.w	r0, r0, #524296	; 0x80008
90003f9c:	f101 1108 	add.w	r1, r1, #524296	; 0x80008
90003fa0:	f102 1208 	add.w	r2, r2, #524296	; 0x80008
90003fa4:	e9c3 4014 	strd	r4, r0, [r3, #80]	; 0x50
90003fa8:	e9c3 1216 	strd	r1, r2, [r3, #88]	; 0x58
90003fac:	f104 1408 	add.w	r4, r4, #524296	; 0x80008
90003fb0:	f100 1008 	add.w	r0, r0, #524296	; 0x80008
90003fb4:	f101 1108 	add.w	r1, r1, #524296	; 0x80008
90003fb8:	f102 1208 	add.w	r2, r2, #524296	; 0x80008
90003fbc:	e9c3 4018 	strd	r4, r0, [r3, #96]	; 0x60
90003fc0:	e9c3 121a 	strd	r1, r2, [r3, #104]	; 0x68
90003fc4:	f104 1408 	add.w	r4, r4, #524296	; 0x80008
90003fc8:	f100 1008 	add.w	r0, r0, #524296	; 0x80008
90003fcc:	f101 1108 	add.w	r1, r1, #524296	; 0x80008
90003fd0:	f102 1208 	add.w	r2, r2, #524296	; 0x80008
90003fd4:	e9c3 401c 	strd	r4, r0, [r3, #112]	; 0x70
90003fd8:	e9c3 121e 	strd	r1, r2, [r3, #120]	; 0x78
  for(i = 0; i < 8; i++)
90003fdc:	4c1e      	ldr	r4, [pc, #120]	; (90004058 <TGFX_JPEG_InitColorTables+0x948>)
      JPEG_K_MCU_444_LUT[offset]  = offset + 192 ;
90003fde:	481f      	ldr	r0, [pc, #124]	; (9000405c <TGFX_JPEG_InitColorTables+0x94c>)
90003fe0:	491f      	ldr	r1, [pc, #124]	; (90004060 <TGFX_JPEG_InitColorTables+0x950>)
90003fe2:	4a20      	ldr	r2, [pc, #128]	; (90004064 <TGFX_JPEG_InitColorTables+0x954>)
90003fe4:	4b20      	ldr	r3, [pc, #128]	; (90004068 <TGFX_JPEG_InitColorTables+0x958>)
    CR_RED_LUT[i] = ( (((int32_t) ((1.40200 / 2) * (1L << 16)))  * index) + ((int32_t) 1 << (16 - 1))) >> 16;
90003fe6:	ea4f 4c23 	mov.w	ip, r3, asr #16
  for (i = 0; i <= 255; i++)
90003fea:	445b      	add	r3, fp
    CR_GREEN_LUT[i] = (-((int32_t) ((0.71414 / 2) * (1L << 16)))) * index;
90003fec:	f845 1f04 	str.w	r1, [r5, #4]!
  for (i = 0; i <= 255; i++)
90003ff0:	4449      	add	r1, r9
    CR_RED_LUT[i] = ( (((int32_t) ((1.40200 / 2) * (1L << 16)))  * index) + ((int32_t) 1 << (16 - 1))) >> 16;
90003ff2:	f847 cf04 	str.w	ip, [r7, #4]!
  for (i = 0; i <= 255; i++)
90003ff6:	4573      	cmp	r3, lr
    CB_BLUE_LUT[i] = ( (((int32_t) ((1.77200 / 2) * (1L << 16)))  * index) + ((int32_t) 1 << (16 - 1))) >> 16;
90003ff8:	ea4f 4c22 	mov.w	ip, r2, asr #16
    CB_GREEN_LUT[i] = (-((int32_t) ((0.34414 / 2) * (1L << 16)))) * index;
90003ffc:	f844 0f04 	str.w	r0, [r4, #4]!
  for (i = 0; i <= 255; i++)
90004000:	4452      	add	r2, sl
90004002:	4440      	add	r0, r8
    CB_BLUE_LUT[i] = ( (((int32_t) ((1.77200 / 2) * (1L << 16)))  * index) + ((int32_t) 1 << (16 - 1))) >> 16;
90004004:	f846 cf04 	str.w	ip, [r6, #4]!
  for (i = 0; i <= 255; i++)
90004008:	d1ed      	bne.n	90003fe6 <TGFX_JPEG_InitColorTables+0x8d6>
}
9000400a:	b025      	add	sp, #148	; 0x94
9000400c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      else  if((j>=8) && (i<8)) offset+= 56;
90004010:	f1bc 0f07 	cmp.w	ip, #7
90004014:	d803      	bhi.n	9000401e <TGFX_JPEG_InitColorTables+0x90e>
90004016:	b117      	cbz	r7, 9000401e <TGFX_JPEG_InitColorTables+0x90e>
90004018:	460d      	mov	r5, r1
9000401a:	f7ff bbf7 	b.w	9000380c <TGFX_JPEG_InitColorTables+0xfc>
      else  if((j<8) && (i>=8)) offset+= 64;
9000401e:	2c07      	cmp	r4, #7
90004020:	f63f abf4 	bhi.w	9000380c <TGFX_JPEG_InitColorTables+0xfc>
90004024:	2e00      	cmp	r6, #0
90004026:	f43f abf1 	beq.w	9000380c <TGFX_JPEG_InitColorTables+0xfc>
      JPEG_Y_MCU_LUT[i*16 + j] = offset;
9000402a:	8013      	strh	r3, [r2, #0]
    for(j = 0; j < 16; j++)
9000402c:	f7ff bbf1 	b.w	90003812 <TGFX_JPEG_InitColorTables+0x102>
90004030:	2400c32c 	.word	0x2400c32c
90004034:	2400b96c 	.word	0x2400b96c
90004038:	2400be2c 	.word	0x2400be2c
9000403c:	2400c2ac 	.word	0x2400c2ac
90004040:	2400a568 	.word	0x2400a568
90004044:	24009968 	.word	0x24009968
90004048:	2400a168 	.word	0x2400a168
9000404c:	00430042 	.word	0x00430042
90004050:	00830082 	.word	0x00830082
90004054:	00c700c6 	.word	0x00c700c6
90004058:	24009d68 	.word	0x24009d68
9000405c:	002c0c00 	.word	0x002c0c00
90004060:	005b6800 	.word	0x005b6800
90004064:	ff1db000 	.word	0xff1db000
90004068:	ff4d0c00 	.word	0xff4d0c00
9000406c:	000166e8 	.word	0x000166e8
90004070:	0001c5a0 	.word	0x0001c5a0
90004074:	ffff4930 	.word	0xffff4930
90004078:	ffffa7e8 	.word	0xffffa7e8
9000407c:	00b3f400 	.word	0x00b3f400

90004080 <vApplicationIdleHook>:
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
  
  vTaskSetApplicationTaskTag(NULL, IdleTaskHook);
90004080:	4901      	ldr	r1, [pc, #4]	; (90004088 <vApplicationIdleHook+0x8>)
90004082:	2000      	movs	r0, #0
90004084:	f00d b8b0 	b.w	900111e8 <vTaskSetApplicationTaskTag>
90004088:	90000965 	.word	0x90000965

9000408c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
9000408c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(100);
9000408e:	2064      	movs	r0, #100	; 0x64
90004090:	f00a fd9c 	bl	9000ebcc <osDelay>
  for(;;)
90004094:	e7fb      	b.n	9000408e <StartDefaultTask+0x2>
90004096:	bf00      	nop

90004098 <consumerTask_handler>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_consumerTask_handler */
void consumerTask_handler(void *argument)
{
90004098:	b570      	push	{r4, r5, r6, lr}
9000409a:	4e11      	ldr	r6, [pc, #68]	; (900040e0 <consumerTask_handler+0x48>)
9000409c:	b082      	sub	sp, #8
9000409e:	4c11      	ldr	r4, [pc, #68]	; (900040e4 <consumerTask_handler+0x4c>)
    if(messageQueueGetStatus != osOK) {
    	osDelay(1);
    	continue;
    }

    if(!strcmp(control.type, "DHT11")) {
900040a0:	4d11      	ldr	r5, [pc, #68]	; (900040e8 <consumerTask_handler+0x50>)
    osStatus_t messageQueueGetStatus = osMessageQueueGet(controlQueueHandle, (void*) &control, NULL, 0);
900040a2:	2300      	movs	r3, #0
900040a4:	4669      	mov	r1, sp
900040a6:	6830      	ldr	r0, [r6, #0]
900040a8:	461a      	mov	r2, r3
900040aa:	f00a ffad 	bl	9000f008 <osMessageQueueGet>
    if(!strcmp(control.type, "DHT11")) {
900040ae:	4629      	mov	r1, r5
    if(messageQueueGetStatus != osOK) {
900040b0:	b990      	cbnz	r0, 900040d8 <consumerTask_handler+0x40>
    if(!strcmp(control.type, "DHT11")) {
900040b2:	9800      	ldr	r0, [sp, #0]
900040b4:	f7fc f914 	bl	900002e0 <strcmp>
900040b8:	b970      	cbnz	r0, 900040d8 <consumerTask_handler+0x40>
      DHT11_HandleTypeDef* dht11 = (DHT11_HandleTypeDef*) control.obj;
900040ba:	9a01      	ldr	r2, [sp, #4]

      if(applicationContext.maxTemperature < dht11->temperature) {
900040bc:	f9b4 1000 	ldrsh.w	r1, [r4]
900040c0:	7853      	ldrb	r3, [r2, #1]
900040c2:	4299      	cmp	r1, r3
    	applicationContext.maxTemperature = dht11->temperature;
      }

      if(applicationContext.minTemperature > dht11->temperature) {
900040c4:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
      	applicationContext.minTemperature = dht11->temperature;
	  }

      applicationContext.temperature = dht11->temperature;
900040c8:	7123      	strb	r3, [r4, #4]
    	applicationContext.maxTemperature = dht11->temperature;
900040ca:	bfb8      	it	lt
900040cc:	8023      	strhlt	r3, [r4, #0]
      if(applicationContext.minTemperature > dht11->temperature) {
900040ce:	428b      	cmp	r3, r1
      	applicationContext.minTemperature = dht11->temperature;
900040d0:	bfb8      	it	lt
900040d2:	8063      	strhlt	r3, [r4, #2]
      applicationContext.humidity = dht11->humidity;
900040d4:	7813      	ldrb	r3, [r2, #0]
900040d6:	7163      	strb	r3, [r4, #5]
    	osDelay(1);
900040d8:	2001      	movs	r0, #1
900040da:	f00a fd77 	bl	9000ebcc <osDelay>
    	continue;
900040de:	e7e0      	b.n	900040a2 <consumerTask_handler+0xa>
900040e0:	2400cdec 	.word	0x2400cdec
900040e4:	2400cdb0 	.word	0x2400cdb0
900040e8:	9002a3f4 	.word	0x9002a3f4

900040ec <temperatureHourlyReadCb>:
{
  /* USER CODE BEGIN temperatureHourlyReadCb */
	int i = 0;
	int size = TEMPERATURE_DATA_SIZE;

	for(i = 0; i < size; ++i) {
900040ec:	4a0e      	ldr	r2, [pc, #56]	; (90004128 <temperatureHourlyReadCb+0x3c>)
900040ee:	2300      	movs	r3, #0
900040f0:	e002      	b.n	900040f8 <temperatureHourlyReadCb+0xc>
900040f2:	3301      	adds	r3, #1
900040f4:	2b18      	cmp	r3, #24
900040f6:	d00b      	beq.n	90004110 <temperatureHourlyReadCb+0x24>
		if(applicationContext.temperatureData[i] == MIN_ALLOWED_TEMPERATURE) {
900040f8:	f932 1f02 	ldrsh.w	r1, [r2, #2]!
900040fc:	3164      	adds	r1, #100	; 0x64
900040fe:	d1f8      	bne.n	900040f2 <temperatureHourlyReadCb+0x6>
			break;
		}
	}

	if(i < size - 1) {
90004100:	2b17      	cmp	r3, #23
90004102:	d005      	beq.n	90004110 <temperatureHourlyReadCb+0x24>
		applicationContext.temperatureData[i] = applicationContext.temperature;
90004104:	4a09      	ldr	r2, [pc, #36]	; (9000412c <temperatureHourlyReadCb+0x40>)
90004106:	3304      	adds	r3, #4
90004108:	7911      	ldrb	r1, [r2, #4]
9000410a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
9000410e:	4770      	bx	lr
{
90004110:	b510      	push	{r4, lr}
	} else {
		// Shift array by one and add the newest value in front
		for(i = 0; i < size - 1; ++i) {
			applicationContext.temperatureData[i] = applicationContext.temperatureData[i + 1];
90004112:	4c06      	ldr	r4, [pc, #24]	; (9000412c <temperatureHourlyReadCb+0x40>)
90004114:	222e      	movs	r2, #46	; 0x2e
90004116:	f104 010a 	add.w	r1, r4, #10
9000411a:	f104 0008 	add.w	r0, r4, #8
9000411e:	f023 fd33 	bl	90027b88 <memmove>
		}

		applicationContext.temperatureData[size - 1] = applicationContext.temperature;
90004122:	7923      	ldrb	r3, [r4, #4]
90004124:	86e3      	strh	r3, [r4, #54]	; 0x36
	}

  /* USER CODE END temperatureHourlyReadCb */
}
90004126:	bd10      	pop	{r4, pc}
90004128:	2400cdb6 	.word	0x2400cdb6
9000412c:	2400cdb0 	.word	0x2400cdb0

90004130 <dht11Task_handler>:
{
90004130:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90004134:	b085      	sub	sp, #20
90004136:	f04f 0900 	mov.w	r9, #0
9000413a:	4f26      	ldr	r7, [pc, #152]	; (900041d4 <dht11Task_handler+0xa4>)
9000413c:	f10d 0804 	add.w	r8, sp, #4
90004140:	4e25      	ldr	r6, [pc, #148]	; (900041d8 <dht11Task_handler+0xa8>)
{
	DHT11_HandleTypeDef dht11;

	uint32_t ticks = HAL_GetTick();

	uint32_t n = ticks / 5000;
90004142:	4d26      	ldr	r5, [pc, #152]	; (900041dc <dht11Task_handler+0xac>)

	int8_t x = n % 24 + 1;
90004144:	4c26      	ldr	r4, [pc, #152]	; (900041e0 <dht11Task_handler+0xb0>)
	uint32_t ticks = HAL_GetTick();
90004146:	f005 fbfb 	bl	90009940 <HAL_GetTick>
9000414a:	4684      	mov	ip, r0
	  osStatus_t messageQueuePutStatus = osMessageQueuePut(controlQueueHandle, ( void * ) &control, 0, 0);
9000414c:	2300      	movs	r3, #0
9000414e:	a902      	add	r1, sp, #8
	uint32_t n = ticks / 5000;
90004150:	fba5 ec0c 	umull	lr, ip, r5, ip
90004154:	6830      	ldr	r0, [r6, #0]
90004156:	461a      	mov	r2, r3
90004158:	ea4f 3c1c 	mov.w	ip, ip, lsr #12
	int8_t x = n % 24 + 1;
9000415c:	fba4 ea0c 	umull	lr, sl, r4, ip
	int8_t y = n % 12 + 1;
90004160:	ea4f 0eda 	mov.w	lr, sl, lsr #3
	int8_t x = n % 24 + 1;
90004164:	ea4f 1a1a 	mov.w	sl, sl, lsr #4
	int8_t y = n % 12 + 1;
90004168:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
	int8_t x = n % 24 + 1;
9000416c:	eb0a 0a4a 	add.w	sl, sl, sl, lsl #1
	int8_t y = n % 12 + 1;
90004170:	ebac 0e8e 	sub.w	lr, ip, lr, lsl #2
	int8_t x = n % 24 + 1;
90004174:	ebac 0cca 	sub.w	ip, ip, sl, lsl #3
	int8_t y = n % 12 + 1;
90004178:	f10e 0e01 	add.w	lr, lr, #1
	int8_t x = n % 24 + 1;
9000417c:	fa5f fc8c 	uxtb.w	ip, ip

    dht11.humidity = 34 + x;
    dht11.temperature = 24 + x;

    if(x > 12) {
    	dht11.humidity -= 2*y;
90004180:	ea4f 0e4e 	mov.w	lr, lr, lsl #1
	int8_t x = n % 24 + 1;
90004184:	f10c 0b01 	add.w	fp, ip, #1
    dht11.humidity = 34 + x;
90004188:	f10c 0a23 	add.w	sl, ip, #35	; 0x23
    dht11.temperature = 24 + x;
9000418c:	f10c 0c19 	add.w	ip, ip, #25
    	dht11.humidity -= 2*y;
90004190:	fa5f fe8e 	uxtb.w	lr, lr
    if(x > 12) {
90004194:	fa5f fb8b 	uxtb.w	fp, fp
    dht11.humidity = 34 + x;
90004198:	fa5f fa8a 	uxtb.w	sl, sl
    dht11.temperature = 24 + x;
9000419c:	fa5f fc8c 	uxtb.w	ip, ip
    if(x > 12) {
900041a0:	f1bb 0f0c 	cmp.w	fp, #12
    	dht11.humidity -= 2*y;
900041a4:	ebaa 0b0e 	sub.w	fp, sl, lr
		dht11.temperature -= 2*y;
900041a8:	ebac 0e0e 	sub.w	lr, ip, lr
    if(x > 12) {
900041ac:	d903      	bls.n	900041b6 <dht11Task_handler+0x86>
    	dht11.humidity -= 2*y;
900041ae:	fa5f fa8b 	uxtb.w	sl, fp
		dht11.temperature -= 2*y;
900041b2:	fa5f fc8e 	uxtb.w	ip, lr
	  DHT11_HandleTypeDef dht11 = read_DHT11(GPIOE, GPIO_PIN_3);
900041b6:	f88d a004 	strb.w	sl, [sp, #4]
900041ba:	f88d 9006 	strb.w	r9, [sp, #6]
900041be:	f88d c005 	strb.w	ip, [sp, #5]
	  control.type = "DHT11";
900041c2:	e9cd 7802 	strd	r7, r8, [sp, #8]
	  osStatus_t messageQueuePutStatus = osMessageQueuePut(controlQueueHandle, ( void * ) &control, 0, 0);
900041c6:	f00a fedd 	bl	9000ef84 <osMessageQueuePut>
	  osDelay(1);
900041ca:	2001      	movs	r0, #1
900041cc:	f00a fcfe 	bl	9000ebcc <osDelay>
  for(;;)
900041d0:	e7b9      	b.n	90004146 <dht11Task_handler+0x16>
900041d2:	bf00      	nop
900041d4:	9002a3f4 	.word	0x9002a3f4
900041d8:	2400cdec 	.word	0x2400cdec
900041dc:	d1b71759 	.word	0xd1b71759
900041e0:	aaaaaaab 	.word	0xaaaaaaab

900041e4 <SystemClock_Config>:
{
900041e4:	b570      	push	{r4, r5, r6, lr}
900041e6:	b09e      	sub	sp, #120	; 0x78
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
900041e8:	224c      	movs	r2, #76	; 0x4c
900041ea:	2100      	movs	r1, #0
900041ec:	a80a      	add	r0, sp, #40	; 0x28
900041ee:	f023 fce5 	bl	90027bbc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
900041f2:	2220      	movs	r2, #32
900041f4:	2100      	movs	r1, #0
900041f6:	a802      	add	r0, sp, #8
900041f8:	f023 fce0 	bl	90027bbc <memset>
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
900041fc:	2002      	movs	r0, #2
900041fe:	f008 fc33 	bl	9000ca68 <HAL_PWREx_ConfigSupply>
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
90004202:	4b22      	ldr	r3, [pc, #136]	; (9000428c <SystemClock_Config+0xa8>)
90004204:	2100      	movs	r1, #0
90004206:	4a22      	ldr	r2, [pc, #136]	; (90004290 <SystemClock_Config+0xac>)
90004208:	9101      	str	r1, [sp, #4]
9000420a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
9000420c:	f021 0101 	bic.w	r1, r1, #1
90004210:	62d9      	str	r1, [r3, #44]	; 0x2c
90004212:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90004214:	f003 0301 	and.w	r3, r3, #1
90004218:	9301      	str	r3, [sp, #4]
9000421a:	6993      	ldr	r3, [r2, #24]
9000421c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
90004220:	6193      	str	r3, [r2, #24]
90004222:	6993      	ldr	r3, [r2, #24]
90004224:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
90004228:	9301      	str	r3, [sp, #4]
9000422a:	9b01      	ldr	r3, [sp, #4]
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
9000422c:	6993      	ldr	r3, [r2, #24]
9000422e:	0499      	lsls	r1, r3, #18
90004230:	d5fc      	bpl.n	9000422c <SystemClock_Config+0x48>
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
90004232:	2201      	movs	r2, #1
90004234:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
90004238:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
9000423a:	2608      	movs	r6, #8
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
9000423c:	2500      	movs	r5, #0
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
9000423e:	a80a      	add	r0, sp, #40	; 0x28
  RCC_OscInitStruct.PLL.PLLP = 2;
90004240:	9417      	str	r4, [sp, #92]	; 0x5c
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
90004242:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLN = 160;
90004246:	2205      	movs	r2, #5
90004248:	23a0      	movs	r3, #160	; 0xa0
9000424a:	e9cd 2315 	strd	r2, r3, [sp, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLQ = 4;
9000424e:	2304      	movs	r3, #4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
90004250:	e9cd 4413 	strd	r4, r4, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = 4;
90004254:	9318      	str	r3, [sp, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
90004256:	e9cd 4619 	strd	r4, r6, [sp, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
9000425a:	e9cd 551b 	strd	r5, r5, [sp, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
9000425e:	f008 fcab 	bl	9000cbb8 <HAL_RCC_OscConfig>
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
90004262:	2340      	movs	r3, #64	; 0x40
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
90004264:	223f      	movs	r2, #63	; 0x3f
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
90004266:	4621      	mov	r1, r4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
90004268:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
9000426a:	eb0d 0006 	add.w	r0, sp, r6
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
9000426e:	9202      	str	r2, [sp, #8]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
90004270:	2203      	movs	r2, #3
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
90004272:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
90004274:	9504      	str	r5, [sp, #16]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
90004276:	9203      	str	r2, [sp, #12]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
90004278:	e9cd 6305 	strd	r6, r3, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
9000427c:	f44f 6380 	mov.w	r3, #1024	; 0x400
90004280:	9308      	str	r3, [sp, #32]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
90004282:	f009 f82d 	bl	9000d2e0 <HAL_RCC_ClockConfig>
}
90004286:	b01e      	add	sp, #120	; 0x78
90004288:	bd70      	pop	{r4, r5, r6, pc}
9000428a:	bf00      	nop
9000428c:	58000400 	.word	0x58000400
90004290:	58024800 	.word	0x58024800

90004294 <main>:
{
90004294:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

/* MPU Configuration */

void MPU_Config(void)
{
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
90004298:	2400      	movs	r4, #0
{
9000429a:	b099      	sub	sp, #100	; 0x64
  /* Disables the MPU */
  HAL_MPU_Disable();

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
9000429c:	2501      	movs	r5, #1

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
  MPU_InitStruct.BaseAddress = 0x90000000;
  MPU_InitStruct.Size = MPU_REGION_SIZE_256MB;
9000429e:	271b      	movs	r7, #27

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
  MPU_InitStruct.Size = MPU_REGION_SIZE_128MB;
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
900042a0:	2603      	movs	r6, #3
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
900042a2:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
900042a6:	e9cd 440d 	strd	r4, r4, [sp, #52]	; 0x34
  HAL_MPU_Disable();
900042aa:	f005 fbc5 	bl	90009a38 <HAL_MPU_Disable>
  MPU_InitStruct.BaseAddress = 0x24000000;
900042ae:	f04f 5310 	mov.w	r3, #603979776	; 0x24000000
  MPU_InitStruct.Size = MPU_REGION_SIZE_512KB;
900042b2:	49d4      	ldr	r1, [pc, #848]	; (90004604 <main+0x370>)
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
900042b4:	a80b      	add	r0, sp, #44	; 0x2c
  MPU_InitStruct.BaseAddress = 0x24000000;
900042b6:	930c      	str	r3, [sp, #48]	; 0x30
  MPU_InitStruct.Size = MPU_REGION_SIZE_512KB;
900042b8:	4bd3      	ldr	r3, [pc, #844]	; (90004608 <main+0x374>)
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
900042ba:	f8ad 502c 	strh.w	r5, [sp, #44]	; 0x2c
  MPU_InitStruct.Size = MPU_REGION_SIZE_512KB;
900042be:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
900042c2:	f005 fbd7 	bl	90009a74 <HAL_MPU_ConfigRegion>
  MPU_InitStruct.BaseAddress = 0x90000000;
900042c6:	f04f 4310 	mov.w	r3, #2415919104	; 0x90000000
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
900042ca:	a80b      	add	r0, sp, #44	; 0x2c
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
900042cc:	f88d 4037 	strb.w	r4, [sp, #55]	; 0x37
  MPU_InitStruct.BaseAddress = 0x90000000;
900042d0:	930c      	str	r3, [sp, #48]	; 0x30
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
900042d2:	f8ad 403a 	strh.w	r4, [sp, #58]	; 0x3a
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
900042d6:	f88d 502d 	strb.w	r5, [sp, #45]	; 0x2d
  MPU_InitStruct.Size = MPU_REGION_SIZE_256MB;
900042da:	f88d 7034 	strb.w	r7, [sp, #52]	; 0x34
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
900042de:	f005 fbc9 	bl	90009a74 <HAL_MPU_ConfigRegion>
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
900042e2:	2302      	movs	r3, #2
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
900042e4:	a80b      	add	r0, sp, #44	; 0x2c
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
900042e6:	f8ad 6037 	strh.w	r6, [sp, #55]	; 0x37
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
900042ea:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
  MPU_InitStruct.Size = MPU_REGION_SIZE_128MB;
900042ee:	231a      	movs	r3, #26
900042f0:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
900042f4:	f240 1301 	movw	r3, #257	; 0x101
900042f8:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
900042fc:	f005 fbba 	bl	90009a74 <HAL_MPU_ConfigRegion>
  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER3;
  MPU_InitStruct.BaseAddress = 0xD0000000;
  MPU_InitStruct.Size = MPU_REGION_SIZE_256MB;
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
90004300:	f44f 7380 	mov.w	r3, #256	; 0x100
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
90004304:	a80b      	add	r0, sp, #44	; 0x2c
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
90004306:	f8ad 403a 	strh.w	r4, [sp, #58]	; 0x3a

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER4;
9000430a:	2404      	movs	r4, #4
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
9000430c:	f8ad 3037 	strh.w	r3, [sp, #55]	; 0x37
  MPU_InitStruct.BaseAddress = 0xD0000000;
90004310:	f04f 4350 	mov.w	r3, #3489660928	; 0xd0000000
  MPU_InitStruct.Size = MPU_REGION_SIZE_256MB;
90004314:	f88d 7034 	strb.w	r7, [sp, #52]	; 0x34
  MPU_InitStruct.BaseAddress = 0xD0000000;
90004318:	930c      	str	r3, [sp, #48]	; 0x30
  MPU_InitStruct.Number = MPU_REGION_NUMBER3;
9000431a:	f88d 602d 	strb.w	r6, [sp, #45]	; 0x2d
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
9000431e:	f005 fba9 	bl	90009a74 <HAL_MPU_ConfigRegion>
  MPU_InitStruct.Size = MPU_REGION_SIZE_32MB;
90004322:	2318      	movs	r3, #24
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
90004324:	a80b      	add	r0, sp, #44	; 0x2c
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
90004326:	f88d 6037 	strb.w	r6, [sp, #55]	; 0x37
  MPU_InitStruct.Size = MPU_REGION_SIZE_32MB;
9000432a:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
  MPU_InitStruct.Number = MPU_REGION_NUMBER4;
9000432e:	f88d 402d 	strb.w	r4, [sp, #45]	; 0x2d
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
90004332:	f88d 503a 	strb.w	r5, [sp, #58]	; 0x3a
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
90004336:	f005 fb9d 	bl	90009a74 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
9000433a:	4620      	mov	r0, r4
9000433c:	f005 fb8a 	bl	90009a54 <HAL_MPU_Enable>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
90004340:	4ab2      	ldr	r2, [pc, #712]	; (9000460c <main+0x378>)
90004342:	6953      	ldr	r3, [r2, #20]
90004344:	f413 3300 	ands.w	r3, r3, #131072	; 0x20000
90004348:	d111      	bne.n	9000436e <main+0xda>
  __ASM volatile ("dsb 0xF":::"memory");
9000434a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
9000434e:	f3bf 8f6f 	isb	sy
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
90004352:	f8c2 3250 	str.w	r3, [r2, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
90004356:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
9000435a:	f3bf 8f6f 	isb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
9000435e:	6953      	ldr	r3, [r2, #20]
90004360:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
90004364:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
90004366:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
9000436a:	f3bf 8f6f 	isb	sy
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
9000436e:	48a7      	ldr	r0, [pc, #668]	; (9000460c <main+0x378>)
90004370:	6943      	ldr	r3, [r0, #20]
90004372:	f413 3380 	ands.w	r3, r3, #65536	; 0x10000
90004376:	d124      	bne.n	900043c2 <main+0x12e>
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
90004378:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
9000437c:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
90004380:	f8d0 5080 	ldr.w	r5, [r0, #128]	; 0x80
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
90004384:	f643 76e0 	movw	r6, #16352	; 0x3fe0
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
90004388:	f3c5 344e 	ubfx	r4, r5, #13, #15
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
9000438c:	f3c5 05c9 	ubfx	r5, r5, #3, #10
90004390:	0164      	lsls	r4, r4, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
90004392:	ea04 0106 	and.w	r1, r4, r6
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
90004396:	462b      	mov	r3, r5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
90004398:	ea41 7283 	orr.w	r2, r1, r3, lsl #30
      } while (ways-- != 0U);
9000439c:	3b01      	subs	r3, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
9000439e:	f8c0 2260 	str.w	r2, [r0, #608]	; 0x260
      } while (ways-- != 0U);
900043a2:	1c5a      	adds	r2, r3, #1
900043a4:	d1f8      	bne.n	90004398 <main+0x104>
    } while(sets-- != 0U);
900043a6:	3c20      	subs	r4, #32
900043a8:	f114 0f20 	cmn.w	r4, #32
900043ac:	d1f1      	bne.n	90004392 <main+0xfe>
900043ae:	f3bf 8f4f 	dsb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
900043b2:	6943      	ldr	r3, [r0, #20]
900043b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
900043b8:	6143      	str	r3, [r0, #20]
900043ba:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
900043be:	f3bf 8f6f 	isb	sy
  HAL_Init();
900043c2:	f005 fa81 	bl	900098c8 <HAL_Init>
	applicationContext.temperatureData[i] = MIN_ALLOWED_TEMPERATURE;
900043c6:	4b92      	ldr	r3, [pc, #584]	; (90004610 <main+0x37c>)
900043c8:	f06f 1263 	mvn.w	r2, #6488163	; 0x630063
  applicationContext.maxTemperature = MIN_ALLOWED_TEMPERATURE;
900043cc:	4991      	ldr	r1, [pc, #580]	; (90004614 <main+0x380>)
  applicationContext.temperature = 0;
900043ce:	2400      	movs	r4, #0
  applicationContext.maxTemperature = MIN_ALLOWED_TEMPERATURE;
900043d0:	6019      	str	r1, [r3, #0]
  applicationContext.temperature = 0;
900043d2:	711c      	strb	r4, [r3, #4]
	applicationContext.temperatureData[i] = MIN_ALLOWED_TEMPERATURE;
900043d4:	e9c3 2202 	strd	r2, r2, [r3, #8]
900043d8:	e9c3 2204 	strd	r2, r2, [r3, #16]
900043dc:	e9c3 2206 	strd	r2, r2, [r3, #24]
900043e0:	e9c3 2208 	strd	r2, r2, [r3, #32]
900043e4:	e9c3 220a 	strd	r2, r2, [r3, #40]	; 0x28
900043e8:	e9c3 220c 	strd	r2, r2, [r3, #48]	; 0x30
  SystemClock_Config();
900043ec:	f7ff fefa 	bl	900041e4 <SystemClock_Config>
  __ASM volatile ("cpsie i" : : : "memory");
900043f0:	b662      	cpsie	i
  __HAL_RCC_GPIOK_CLK_ENABLE();
900043f2:	4d89      	ldr	r5, [pc, #548]	; (90004618 <main+0x384>)
  HAL_GPIO_WritePin(GPIOB, FRAME_RATE_Pin|RENDER_TIME_Pin, GPIO_PIN_RESET);
900043f4:	21c0      	movs	r1, #192	; 0xc0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
900043f6:	940f      	str	r4, [sp, #60]	; 0x3c
  HAL_GPIO_WritePin(GPIOB, FRAME_RATE_Pin|RENDER_TIME_Pin, GPIO_PIN_RESET);
900043f8:	4622      	mov	r2, r4
900043fa:	4888      	ldr	r0, [pc, #544]	; (9000461c <main+0x388>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
900043fc:	2601      	movs	r6, #1
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
900043fe:	f04f 0903 	mov.w	r9, #3
  GPIO_InitStruct.Pin = GPIO_PIN_3;
90004402:	2708      	movs	r7, #8
  GPIO_InitStruct.Pin = LCD_RESET_Pin;
90004404:	f04f 0804 	mov.w	r8, #4
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
90004408:	f04f 0a02 	mov.w	sl, #2
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
9000440c:	f04f 0b05 	mov.w	fp, #5
  GPIO_InitTypeDef GPIO_InitStruct = {0};
90004410:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
90004414:	e9cd 440d 	strd	r4, r4, [sp, #52]	; 0x34
  __HAL_RCC_GPIOK_CLK_ENABLE();
90004418:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
9000441c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
90004420:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
90004424:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
90004428:	f403 6380 	and.w	r3, r3, #1024	; 0x400
9000442c:	9301      	str	r3, [sp, #4]
9000442e:	9b01      	ldr	r3, [sp, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
90004430:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
90004434:	f043 0340 	orr.w	r3, r3, #64	; 0x40
90004438:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
9000443c:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
90004440:	f003 0340 	and.w	r3, r3, #64	; 0x40
90004444:	9302      	str	r3, [sp, #8]
90004446:	9b02      	ldr	r3, [sp, #8]
  __HAL_RCC_GPIOI_CLK_ENABLE();
90004448:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
9000444c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
90004450:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
90004454:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
90004458:	f403 7380 	and.w	r3, r3, #256	; 0x100
9000445c:	9303      	str	r3, [sp, #12]
9000445e:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
90004460:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
90004464:	f043 0310 	orr.w	r3, r3, #16
90004468:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
9000446c:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
90004470:	f003 0310 	and.w	r3, r3, #16
90004474:	9304      	str	r3, [sp, #16]
90004476:	9b04      	ldr	r3, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
90004478:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
9000447c:	f043 0302 	orr.w	r3, r3, #2
90004480:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
90004484:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
90004488:	f003 0302 	and.w	r3, r3, #2
9000448c:	9305      	str	r3, [sp, #20]
9000448e:	9b05      	ldr	r3, [sp, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
90004490:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
90004494:	f443 7300 	orr.w	r3, r3, #512	; 0x200
90004498:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
9000449c:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
900044a0:	f403 7300 	and.w	r3, r3, #512	; 0x200
900044a4:	9306      	str	r3, [sp, #24]
900044a6:	9b06      	ldr	r3, [sp, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
900044a8:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
900044ac:	f043 0308 	orr.w	r3, r3, #8
900044b0:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
900044b4:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
900044b8:	f003 0308 	and.w	r3, r3, #8
900044bc:	9307      	str	r3, [sp, #28]
900044be:	9b07      	ldr	r3, [sp, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
900044c0:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
900044c4:	f043 0320 	orr.w	r3, r3, #32
900044c8:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
900044cc:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
900044d0:	f003 0320 	and.w	r3, r3, #32
900044d4:	9308      	str	r3, [sp, #32]
900044d6:	9b08      	ldr	r3, [sp, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
900044d8:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
900044dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
900044e0:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
900044e4:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
900044e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
900044ec:	9309      	str	r3, [sp, #36]	; 0x24
900044ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
  __HAL_RCC_GPIOA_CLK_ENABLE();
900044f0:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
900044f4:	f043 0301 	orr.w	r3, r3, #1
900044f8:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
900044fc:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
90004500:	f003 0301 	and.w	r3, r3, #1
90004504:	930a      	str	r3, [sp, #40]	; 0x28
90004506:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  HAL_GPIO_WritePin(GPIOB, FRAME_RATE_Pin|RENDER_TIME_Pin, GPIO_PIN_RESET);
90004508:	f005 fea4 	bl	9000a254 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_DE_GPIO_Port, LCD_DE_Pin, GPIO_PIN_RESET);
9000450c:	4622      	mov	r2, r4
9000450e:	2180      	movs	r1, #128	; 0x80
90004510:	4843      	ldr	r0, [pc, #268]	; (90004620 <main+0x38c>)
90004512:	f005 fe9f 	bl	9000a254 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, GPIO_PIN_RESET);
90004516:	4622      	mov	r2, r4
90004518:	2108      	movs	r1, #8
9000451a:	4842      	ldr	r0, [pc, #264]	; (90004624 <main+0x390>)
9000451c:	f005 fe9a 	bl	9000a254 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
90004520:	2201      	movs	r2, #1
90004522:	4841      	ldr	r0, [pc, #260]	; (90004628 <main+0x394>)
90004524:	4611      	mov	r1, r2
90004526:	f005 fe95 	bl	9000a254 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, LCD_RESET_Pin|MCU_ACTIVE_Pin, GPIO_PIN_RESET);
9000452a:	4622      	mov	r2, r4
9000452c:	2144      	movs	r1, #68	; 0x44
9000452e:	483f      	ldr	r0, [pc, #252]	; (9000462c <main+0x398>)
90004530:	f005 fe90 	bl	9000a254 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = FRAME_RATE_Pin|RENDER_TIME_Pin;
90004534:	23c0      	movs	r3, #192	; 0xc0
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
90004536:	a90b      	add	r1, sp, #44	; 0x2c
90004538:	4838      	ldr	r0, [pc, #224]	; (9000461c <main+0x388>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
9000453a:	e9cd 360b 	strd	r3, r6, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
9000453e:	e9cd 490d 	strd	r4, r9, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
90004542:	f005 fc87 	bl	90009e54 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LCD_DE_Pin;
90004546:	2380      	movs	r3, #128	; 0x80
  HAL_GPIO_Init(LCD_DE_GPIO_Port, &GPIO_InitStruct);
90004548:	a90b      	add	r1, sp, #44	; 0x2c
9000454a:	4835      	ldr	r0, [pc, #212]	; (90004620 <main+0x38c>)
  GPIO_InitStruct.Pin = LCD_DE_Pin;
9000454c:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
9000454e:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Pull = GPIO_NOPULL;
90004550:	e9cd 640c 	strd	r6, r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(LCD_DE_GPIO_Port, &GPIO_InitStruct);
90004554:	f005 fc7e 	bl	90009e54 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
90004558:	a90b      	add	r1, sp, #44	; 0x2c
9000455a:	4835      	ldr	r0, [pc, #212]	; (90004630 <main+0x39c>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
9000455c:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
9000455e:	e9cd 740b 	strd	r7, r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
90004562:	f005 fc77 	bl	90009e54 <HAL_GPIO_Init>
  HAL_GPIO_Init(VSYNC_FREQ_GPIO_Port, &GPIO_InitStruct);
90004566:	a90b      	add	r1, sp, #44	; 0x2c
90004568:	482e      	ldr	r0, [pc, #184]	; (90004624 <main+0x390>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
9000456a:	e9cd 490d 	strd	r4, r9, [sp, #52]	; 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
9000456e:	e9cd 760b 	strd	r7, r6, [sp, #44]	; 0x2c
  HAL_GPIO_Init(VSYNC_FREQ_GPIO_Port, &GPIO_InitStruct);
90004572:	f005 fc6f 	bl	90009e54 <HAL_GPIO_Init>
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
90004576:	a90b      	add	r1, sp, #44	; 0x2c
90004578:	482b      	ldr	r0, [pc, #172]	; (90004628 <main+0x394>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
9000457a:	e9cd 660b 	strd	r6, r6, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
9000457e:	e9cd 440d 	strd	r4, r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
90004582:	f005 fc67 	bl	90009e54 <HAL_GPIO_Init>
  HAL_GPIO_Init(LCD_RESET_GPIO_Port, &GPIO_InitStruct);
90004586:	a90b      	add	r1, sp, #44	; 0x2c
90004588:	4828      	ldr	r0, [pc, #160]	; (9000462c <main+0x398>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
9000458a:	e9cd 860b 	strd	r8, r6, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
9000458e:	e9cd 440d 	strd	r4, r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(LCD_RESET_GPIO_Port, &GPIO_InitStruct);
90004592:	f005 fc5f 	bl	90009e54 <HAL_GPIO_Init>
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
90004596:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
  GPIO_InitStruct.Pin = MCU_ACTIVE_Pin;
9000459a:	f04f 0940 	mov.w	r9, #64	; 0x40
  HAL_GPIO_Init(MCU_ACTIVE_GPIO_Port, &GPIO_InitStruct);
9000459e:	a90b      	add	r1, sp, #44	; 0x2c
900045a0:	4822      	ldr	r0, [pc, #136]	; (9000462c <main+0x398>)
  GPIO_InitStruct.Pin = MCU_ACTIVE_Pin;
900045a2:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
900045a6:	e9cd 640c 	strd	r6, r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(MCU_ACTIVE_GPIO_Port, &GPIO_InitStruct);
900045aa:	f005 fc53 	bl	90009e54 <HAL_GPIO_Init>
  __HAL_RCC_MDMA_CLK_ENABLE();
900045ae:	f8d5 30d4 	ldr.w	r3, [r5, #212]	; 0xd4
  HAL_NVIC_SetPriority(MDMA_IRQn, 5, 0);
900045b2:	4622      	mov	r2, r4
900045b4:	2105      	movs	r1, #5
  __HAL_RCC_MDMA_CLK_ENABLE();
900045b6:	4333      	orrs	r3, r6
  HAL_NVIC_SetPriority(MDMA_IRQn, 5, 0);
900045b8:	207a      	movs	r0, #122	; 0x7a
  __HAL_RCC_MDMA_CLK_ENABLE();
900045ba:	f8c5 30d4 	str.w	r3, [r5, #212]	; 0xd4
900045be:	f8d5 30d4 	ldr.w	r3, [r5, #212]	; 0xd4
  hltdc.Instance = LTDC;
900045c2:	4d1c      	ldr	r5, [pc, #112]	; (90004634 <main+0x3a0>)
  __HAL_RCC_MDMA_CLK_ENABLE();
900045c4:	4033      	ands	r3, r6
900045c6:	9300      	str	r3, [sp, #0]
900045c8:	9b00      	ldr	r3, [sp, #0]
  HAL_NVIC_SetPriority(MDMA_IRQn, 5, 0);
900045ca:	f005 f9d7 	bl	9000997c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(MDMA_IRQn);
900045ce:	207a      	movs	r0, #122	; 0x7a
900045d0:	f005 fa12 	bl	900099f8 <HAL_NVIC_EnableIRQ>
  LTDC_LayerCfgTypeDef pLayerCfg = {0};
900045d4:	2234      	movs	r2, #52	; 0x34
900045d6:	4621      	mov	r1, r4
900045d8:	a80b      	add	r0, sp, #44	; 0x2c
900045da:	f023 faef 	bl	90027bbc <memset>
  hltdc.Instance = LTDC;
900045de:	4b16      	ldr	r3, [pc, #88]	; (90004638 <main+0x3a4>)
  hltdc.Init.AccumulatedVBP = 11;
900045e0:	202a      	movs	r0, #42	; 0x2a
  hltdc.Init.AccumulatedActiveH = 283;
900045e2:	f240 2c0a 	movw	ip, #522	; 0x20a
  hltdc.Instance = LTDC;
900045e6:	602b      	str	r3, [r5, #0]
  hltdc.Init.HorizontalSync = 39;
900045e8:	2327      	movs	r3, #39	; 0x27
  hltdc.Init.TotalHeigh = 285;
900045ea:	f44f 7e04 	mov.w	lr, #528	; 0x210
  hltdc.Init.Backcolor.Blue = 0;
900045ee:	86ac      	strh	r4, [r5, #52]	; 0x34
  hltdc.Init.HorizontalSync = 39;
900045f0:	616b      	str	r3, [r5, #20]
  hltdc.Init.AccumulatedVBP = 11;
900045f2:	230b      	movs	r3, #11
  hltdc.Init.VerticalSync = 8;
900045f4:	61af      	str	r7, [r5, #24]
  hltdc.Init.Backcolor.Red = 0;
900045f6:	f885 4036 	strb.w	r4, [r5, #54]	; 0x36
  hltdc.Init.AccumulatedVBP = 11;
900045fa:	e9c5 0307 	strd	r0, r3, [r5, #28]
  hltdc.Init.AccumulatedActiveH = 283;
900045fe:	f240 131b 	movw	r3, #283	; 0x11b
90004602:	e01b      	b.n	9000463c <main+0x3a8>
90004604:	03000012 	.word	0x03000012
90004608:	01010001 	.word	0x01010001
9000460c:	e000ed00 	.word	0xe000ed00
90004610:	2400cdb0 	.word	0x2400cdb0
90004614:	0064ff9c 	.word	0x0064ff9c
90004618:	58024400 	.word	0x58024400
9000461c:	58020400 	.word	0x58020400
90004620:	58020c00 	.word	0x58020c00
90004624:	58021800 	.word	0x58021800
90004628:	58022800 	.word	0x58022800
9000462c:	58020000 	.word	0x58020000
90004630:	58021000 	.word	0x58021000
90004634:	2400cedc 	.word	0x2400cedc
90004638:	50001000 	.word	0x50001000
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
9000463c:	4628      	mov	r0, r5
  hltdc.Init.AccumulatedActiveH = 283;
9000463e:	e9c5 c309 	strd	ip, r3, [r5, #36]	; 0x24
  hltdc.Init.TotalHeigh = 285;
90004642:	f240 131d 	movw	r3, #285	; 0x11d
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
90004646:	e9c5 4401 	strd	r4, r4, [r5, #4]
  hltdc.Init.TotalHeigh = 285;
9000464a:	e9c5 e30b 	strd	lr, r3, [r5, #44]	; 0x2c
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
9000464e:	e9c5 4403 	strd	r4, r4, [r5, #12]
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
90004652:	f007 fe25 	bl	9000c2a0 <HAL_LTDC_Init>
  pLayerCfg.WindowX1 = 480;
90004656:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
9000465a:	4622      	mov	r2, r4
9000465c:	a90b      	add	r1, sp, #44	; 0x2c
  pLayerCfg.WindowX1 = 480;
9000465e:	930c      	str	r3, [sp, #48]	; 0x30
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
90004660:	4628      	mov	r0, r5
  pLayerCfg.ImageWidth = 480;
90004662:	9315      	str	r3, [sp, #84]	; 0x54
  pLayerCfg.WindowY1 = 272;
90004664:	f44f 7388 	mov.w	r3, #272	; 0x110
  hdma2d.Instance = DMA2D;
90004668:	4d51      	ldr	r5, [pc, #324]	; (900047b0 <main+0x51c>)
  pLayerCfg.WindowY1 = 272;
9000466a:	930e      	str	r3, [sp, #56]	; 0x38
  pLayerCfg.ImageHeight = 272;
9000466c:	9316      	str	r3, [sp, #88]	; 0x58
  pLayerCfg.Alpha = 255;
9000466e:	23ff      	movs	r3, #255	; 0xff
  pLayerCfg.WindowX0 = 0;
90004670:	940b      	str	r4, [sp, #44]	; 0x2c
  pLayerCfg.Alpha = 255;
90004672:	9310      	str	r3, [sp, #64]	; 0x40
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
90004674:	f44f 6380 	mov.w	r3, #1024	; 0x400
  pLayerCfg.WindowY0 = 0;
90004678:	940d      	str	r4, [sp, #52]	; 0x34
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
9000467a:	9312      	str	r3, [sp, #72]	; 0x48
  pLayerCfg.Alpha0 = 0;
9000467c:	9411      	str	r4, [sp, #68]	; 0x44
  pLayerCfg.FBStartAdress = 0;
9000467e:	9414      	str	r4, [sp, #80]	; 0x50
  pLayerCfg.Backcolor.Blue = 0;
90004680:	f8ad 405c 	strh.w	r4, [sp, #92]	; 0x5c
  pLayerCfg.Backcolor.Red = 0;
90004684:	f88d 405e 	strb.w	r4, [sp, #94]	; 0x5e
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
90004688:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
9000468c:	f8cd b04c 	str.w	fp, [sp, #76]	; 0x4c
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
90004690:	f007 feda 	bl	9000c448 <HAL_LTDC_ConfigLayer>
  hdma2d.Instance = DMA2D;
90004694:	4b47      	ldr	r3, [pc, #284]	; (900047b4 <main+0x520>)
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
90004696:	4628      	mov	r0, r5
  hdma2d.LayerCfg[1].ChromaSubSampling = DMA2D_NO_CSS;
90004698:	65ec      	str	r4, [r5, #92]	; 0x5c
  hdma2d.Instance = DMA2D;
9000469a:	602b      	str	r3, [r5, #0]
  hdma2d.Init.OutputOffset = 0;
9000469c:	60ec      	str	r4, [r5, #12]
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_RGB565;
9000469e:	e9c5 4a11 	strd	r4, sl, [r5, #68]	; 0x44
  hdma2d.LayerCfg[1].InputAlpha = 0;
900046a2:	e9c5 4413 	strd	r4, r4, [r5, #76]	; 0x4c
  hdma2d.LayerCfg[1].RedBlueSwap = DMA2D_RB_REGULAR;
900046a6:	e9c5 4415 	strd	r4, r4, [r5, #84]	; 0x54
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB565;
900046aa:	e9c5 4a01 	strd	r4, sl, [r5, #4]
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
900046ae:	f005 fa89 	bl	90009bc4 <HAL_DMA2D_Init>
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
900046b2:	4631      	mov	r1, r6
900046b4:	4628      	mov	r0, r5
  hsdram2.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
900046b6:	2510      	movs	r5, #16
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
900046b8:	f005 fb5c 	bl	90009d74 <HAL_DMA2D_ConfigLayer>
  SdramTiming.ExitSelfRefreshDelay = 7;
900046bc:	2307      	movs	r3, #7
  hsdram2.Instance = FMC_SDRAM_DEVICE;
900046be:	483e      	ldr	r0, [pc, #248]	; (900047b8 <main+0x524>)
  if (HAL_SDRAM_Init(&hsdram2, &SdramTiming) != HAL_OK)
900046c0:	a90b      	add	r1, sp, #44	; 0x2c
  SdramTiming.ExitSelfRefreshDelay = 7;
900046c2:	930c      	str	r3, [sp, #48]	; 0x30
  SdramTiming.RowCycleDelay = 7;
900046c4:	930e      	str	r3, [sp, #56]	; 0x38
  hsdram2.Instance = FMC_SDRAM_DEVICE;
900046c6:	4b3d      	ldr	r3, [pc, #244]	; (900047bc <main+0x528>)
  SdramTiming.SelfRefreshTime = 4;
900046c8:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
  hsdram2.Instance = FMC_SDRAM_DEVICE;
900046cc:	6003      	str	r3, [r0, #0]
  hsdram2.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
900046ce:	f44f 73c0 	mov.w	r3, #384	; 0x180
  hsdram2.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
900046d2:	f8c0 800c 	str.w	r8, [r0, #12]
  hsdram2.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
900046d6:	f44f 6800 	mov.w	r8, #2048	; 0x800
  hsdram2.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
900046da:	6183      	str	r3, [r0, #24]
  hsdram2.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
900046dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  hsdram2.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
900046e0:	6105      	str	r5, [r0, #16]
  SdramTiming.WriteRecoveryTime = 5;
900046e2:	f8cd b03c 	str.w	fp, [sp, #60]	; 0x3c
  SdramTiming.LoadToActiveDelay = 2;
900046e6:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
  hsdram2.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
900046ea:	f8c0 9014 	str.w	r9, [r0, #20]
  hsdram2.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
900046ee:	61c4      	str	r4, [r0, #28]
  hsdram2.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
900046f0:	6284      	str	r4, [r0, #40]	; 0x28
  hsdram2.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
900046f2:	e9c0 8308 	strd	r8, r3, [r0, #32]
  SdramTiming.RCDDelay = 2;
900046f6:	e9cd aa10 	strd	sl, sl, [sp, #64]	; 0x40
  hsdram2.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
900046fa:	e9c0 6401 	strd	r6, r4, [r0, #4]
  if (HAL_SDRAM_Init(&hsdram2, &SdramTiming) != HAL_OK)
900046fe:	f009 fec7 	bl	9000e490 <HAL_SDRAM_Init>
  BSP_SDRAM_DeInit(0);
90004702:	4620      	mov	r0, r4
90004704:	f004 fe72 	bl	900093ec <BSP_SDRAM_DeInit>
  if(BSP_SDRAM_Init(0) != BSP_ERROR_NONE)
90004708:	4620      	mov	r0, r4
9000470a:	f004 feb9 	bl	90009480 <BSP_SDRAM_Init>
  MX_LIBJPEG_Init();
9000470e:	f7fb fe71 	bl	900003f4 <MX_LIBJPEG_Init>
  hjpeg.Instance = JPEG;
90004712:	4b2b      	ldr	r3, [pc, #172]	; (900047c0 <main+0x52c>)
90004714:	482b      	ldr	r0, [pc, #172]	; (900047c4 <main+0x530>)
90004716:	6003      	str	r3, [r0, #0]
  if (HAL_JPEG_Init(&hjpeg) != HAL_OK)
90004718:	f006 fd96 	bl	9000b248 <HAL_JPEG_Init>
  hcrc.Instance = CRC;
9000471c:	482a      	ldr	r0, [pc, #168]	; (900047c8 <main+0x534>)
9000471e:	4b2b      	ldr	r3, [pc, #172]	; (900047cc <main+0x538>)
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
90004720:	8084      	strh	r4, [r0, #4]
  hcrc.Instance = CRC;
90004722:	6003      	str	r3, [r0, #0]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
90004724:	6206      	str	r6, [r0, #32]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
90004726:	e9c0 4405 	strd	r4, r4, [r0, #20]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
9000472a:	f005 f9d5 	bl	90009ad8 <HAL_CRC_Init>
  MX_TouchGFX_Init();
9000472e:	f7fb fe65 	bl	900003fc <MX_TouchGFX_Init>
  MX_TouchGFX_PreOSInit();
90004732:	f7fb fe61 	bl	900003f8 <MX_TouchGFX_PreOSInit>
  osKernelInitialize();
90004736:	f00a f9d3 	bl	9000eae0 <osKernelInitialize>
  temperatureHourlyReadHandle = osTimerNew(temperatureHourlyReadCb, osTimerPeriodic, NULL, &temperatureHourlyRead_attributes);
9000473a:	4622      	mov	r2, r4
9000473c:	4b24      	ldr	r3, [pc, #144]	; (900047d0 <main+0x53c>)
9000473e:	4631      	mov	r1, r6
90004740:	4824      	ldr	r0, [pc, #144]	; (900047d4 <main+0x540>)
90004742:	f00a fa51 	bl	9000ebe8 <osTimerNew>
90004746:	4b24      	ldr	r3, [pc, #144]	; (900047d8 <main+0x544>)
  osStatus_t temperatureHourlyReadStartStatus = osTimerStart(temperatureHourlyReadHandle, 5000);
90004748:	f241 3188 	movw	r1, #5000	; 0x1388
  temperatureHourlyReadHandle = osTimerNew(temperatureHourlyReadCb, osTimerPeriodic, NULL, &temperatureHourlyRead_attributes);
9000474c:	6018      	str	r0, [r3, #0]
  osStatus_t temperatureHourlyReadStartStatus = osTimerStart(temperatureHourlyReadHandle, 5000);
9000474e:	f00a fa8d 	bl	9000ec6c <osTimerStart>
  controlQueueHandle = osMessageQueueNew (16, sizeof(Control_TypeDef), &controlQueue_attributes);
90004752:	4a22      	ldr	r2, [pc, #136]	; (900047dc <main+0x548>)
90004754:	4639      	mov	r1, r7
90004756:	4628      	mov	r0, r5
90004758:	f00a fbd6 	bl	9000ef08 <osMessageQueueNew>
9000475c:	4b20      	ldr	r3, [pc, #128]	; (900047e0 <main+0x54c>)
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
9000475e:	4a21      	ldr	r2, [pc, #132]	; (900047e4 <main+0x550>)
90004760:	4621      	mov	r1, r4
  controlQueueHandle = osMessageQueueNew (16, sizeof(Control_TypeDef), &controlQueue_attributes);
90004762:	6018      	str	r0, [r3, #0]
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
90004764:	4820      	ldr	r0, [pc, #128]	; (900047e8 <main+0x554>)
90004766:	f00a f9e7 	bl	9000eb38 <osThreadNew>
9000476a:	4b20      	ldr	r3, [pc, #128]	; (900047ec <main+0x558>)
  GUITaskHandle = osThreadNew(TouchGFX_Task, NULL, &GUITask_attributes);
9000476c:	4a20      	ldr	r2, [pc, #128]	; (900047f0 <main+0x55c>)
9000476e:	4621      	mov	r1, r4
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
90004770:	6018      	str	r0, [r3, #0]
  GUITaskHandle = osThreadNew(TouchGFX_Task, NULL, &GUITask_attributes);
90004772:	4820      	ldr	r0, [pc, #128]	; (900047f4 <main+0x560>)
90004774:	f00a f9e0 	bl	9000eb38 <osThreadNew>
90004778:	4b1f      	ldr	r3, [pc, #124]	; (900047f8 <main+0x564>)
  videoTaskHandle = osThreadNew(videoTaskFunc, NULL, &videoTask_attributes);
9000477a:	4a20      	ldr	r2, [pc, #128]	; (900047fc <main+0x568>)
9000477c:	4621      	mov	r1, r4
  GUITaskHandle = osThreadNew(TouchGFX_Task, NULL, &GUITask_attributes);
9000477e:	6018      	str	r0, [r3, #0]
  videoTaskHandle = osThreadNew(videoTaskFunc, NULL, &videoTask_attributes);
90004780:	481f      	ldr	r0, [pc, #124]	; (90004800 <main+0x56c>)
90004782:	f00a f9d9 	bl	9000eb38 <osThreadNew>
90004786:	4b1f      	ldr	r3, [pc, #124]	; (90004804 <main+0x570>)
  dht11TaskHandle = osThreadNew(dht11Task_handler, NULL, &dht11Task_attributes);
90004788:	4a1f      	ldr	r2, [pc, #124]	; (90004808 <main+0x574>)
9000478a:	4621      	mov	r1, r4
  videoTaskHandle = osThreadNew(videoTaskFunc, NULL, &videoTask_attributes);
9000478c:	6018      	str	r0, [r3, #0]
  dht11TaskHandle = osThreadNew(dht11Task_handler, NULL, &dht11Task_attributes);
9000478e:	481f      	ldr	r0, [pc, #124]	; (9000480c <main+0x578>)
90004790:	f00a f9d2 	bl	9000eb38 <osThreadNew>
90004794:	4b1e      	ldr	r3, [pc, #120]	; (90004810 <main+0x57c>)
90004796:	4605      	mov	r5, r0
  consumerTaskHandle = osThreadNew(consumerTask_handler, NULL, &consumerTask_attributes);
90004798:	4a1e      	ldr	r2, [pc, #120]	; (90004814 <main+0x580>)
9000479a:	4621      	mov	r1, r4
9000479c:	481e      	ldr	r0, [pc, #120]	; (90004818 <main+0x584>)
  dht11TaskHandle = osThreadNew(dht11Task_handler, NULL, &dht11Task_attributes);
9000479e:	601d      	str	r5, [r3, #0]
  consumerTaskHandle = osThreadNew(consumerTask_handler, NULL, &consumerTask_attributes);
900047a0:	f00a f9ca 	bl	9000eb38 <osThreadNew>
900047a4:	4b1d      	ldr	r3, [pc, #116]	; (9000481c <main+0x588>)
900047a6:	6018      	str	r0, [r3, #0]
  osKernelStart();
900047a8:	f00a f9ac 	bl	9000eb04 <osKernelStart>
  while (1)
900047ac:	e7fe      	b.n	900047ac <main+0x518>
900047ae:	bf00      	nop
900047b0:	2400ce1c 	.word	0x2400ce1c
900047b4:	52001000 	.word	0x52001000
900047b8:	2400d05c 	.word	0x2400d05c
900047bc:	52004140 	.word	0x52004140
900047c0:	52003000 	.word	0x52003000
900047c4:	2400ce84 	.word	0x2400ce84
900047c8:	2400cdf8 	.word	0x2400cdf8
900047cc:	58024c00 	.word	0x58024c00
900047d0:	9002a508 	.word	0x9002a508
900047d4:	900040ed 	.word	0x900040ed
900047d8:	2400d090 	.word	0x2400d090
900047dc:	9002a4a8 	.word	0x9002a4a8
900047e0:	2400cdec 	.word	0x2400cdec
900047e4:	9002a4c0 	.word	0x9002a4c0
900047e8:	9000408d 	.word	0x9000408d
900047ec:	2400cdf0 	.word	0x2400cdf0
900047f0:	9002a460 	.word	0x9002a460
900047f4:	9000040d 	.word	0x9000040d
900047f8:	2400cdac 	.word	0x2400cdac
900047fc:	9002a518 	.word	0x9002a518
90004800:	900029f1 	.word	0x900029f1
90004804:	2400d094 	.word	0x2400d094
90004808:	9002a4e4 	.word	0x9002a4e4
9000480c:	90004131 	.word	0x90004131
90004810:	2400cdf4 	.word	0x2400cdf4
90004814:	9002a484 	.word	0x9002a484
90004818:	90004099 	.word	0x90004099
9000481c:	2400cde8 	.word	0x2400cde8

90004820 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
90004820:	4b03      	ldr	r3, [pc, #12]	; (90004830 <HAL_TIM_PeriodElapsedCallback+0x10>)
90004822:	6802      	ldr	r2, [r0, #0]
90004824:	429a      	cmp	r2, r3
90004826:	d000      	beq.n	9000482a <HAL_TIM_PeriodElapsedCallback+0xa>
    HAL_IncTick();
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
90004828:	4770      	bx	lr
    HAL_IncTick();
9000482a:	f005 b87d 	b.w	90009928 <HAL_IncTick>
9000482e:	bf00      	nop
90004830:	40001000 	.word	0x40001000

90004834 <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
90004834:	4770      	bx	lr
90004836:	bf00      	nop

90004838 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
90004838:	4b0b      	ldr	r3, [pc, #44]	; (90004868 <HAL_MspInit+0x30>)

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
9000483a:	2200      	movs	r2, #0
9000483c:	210f      	movs	r1, #15
9000483e:	f06f 0001 	mvn.w	r0, #1
{
90004842:	b410      	push	{r4}
  __HAL_RCC_SYSCFG_CLK_ENABLE();
90004844:	f8d3 40f4 	ldr.w	r4, [r3, #244]	; 0xf4
{
90004848:	b083      	sub	sp, #12
  __HAL_RCC_SYSCFG_CLK_ENABLE();
9000484a:	f044 0402 	orr.w	r4, r4, #2
9000484e:	f8c3 40f4 	str.w	r4, [r3, #244]	; 0xf4
90004852:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
90004856:	f003 0302 	and.w	r3, r3, #2
9000485a:	9301      	str	r3, [sp, #4]
9000485c:	9b01      	ldr	r3, [sp, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
9000485e:	b003      	add	sp, #12
90004860:	f85d 4b04 	ldr.w	r4, [sp], #4
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
90004864:	f005 b88a 	b.w	9000997c <HAL_NVIC_SetPriority>
90004868:	58024400 	.word	0x58024400

9000486c <HAL_CRC_MspInit>:
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
  if(hcrc->Instance==CRC)
9000486c:	4b0a      	ldr	r3, [pc, #40]	; (90004898 <HAL_CRC_MspInit+0x2c>)
9000486e:	6802      	ldr	r2, [r0, #0]
90004870:	429a      	cmp	r2, r3
90004872:	d000      	beq.n	90004876 <HAL_CRC_MspInit+0xa>
90004874:	4770      	bx	lr
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
90004876:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
{
9000487a:	b082      	sub	sp, #8
    __HAL_RCC_CRC_CLK_ENABLE();
9000487c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
90004880:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
90004884:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
90004888:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
9000488c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
90004890:	9301      	str	r3, [sp, #4]
90004892:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
90004894:	b002      	add	sp, #8
90004896:	4770      	bx	lr
90004898:	58024c00 	.word	0x58024c00

9000489c <HAL_DMA2D_MspInit>:
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
  if(hdma2d->Instance==DMA2D)
9000489c:	4b0f      	ldr	r3, [pc, #60]	; (900048dc <HAL_DMA2D_MspInit+0x40>)
9000489e:	6802      	ldr	r2, [r0, #0]
900048a0:	429a      	cmp	r2, r3
900048a2:	d000      	beq.n	900048a6 <HAL_DMA2D_MspInit+0xa>
900048a4:	4770      	bx	lr
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
900048a6:	4b0e      	ldr	r3, [pc, #56]	; (900048e0 <HAL_DMA2D_MspInit+0x44>)
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
900048a8:	205a      	movs	r0, #90	; 0x5a
900048aa:	2200      	movs	r2, #0
900048ac:	2105      	movs	r1, #5
{
900048ae:	b510      	push	{r4, lr}
    __HAL_RCC_DMA2D_CLK_ENABLE();
900048b0:	f8d3 40d4 	ldr.w	r4, [r3, #212]	; 0xd4
{
900048b4:	b082      	sub	sp, #8
    __HAL_RCC_DMA2D_CLK_ENABLE();
900048b6:	f044 0410 	orr.w	r4, r4, #16
900048ba:	f8c3 40d4 	str.w	r4, [r3, #212]	; 0xd4
900048be:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
900048c2:	f003 0310 	and.w	r3, r3, #16
900048c6:	9301      	str	r3, [sp, #4]
900048c8:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
900048ca:	f005 f857 	bl	9000997c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
900048ce:	205a      	movs	r0, #90	; 0x5a
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
900048d0:	b002      	add	sp, #8
900048d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
900048d6:	f005 b88f 	b.w	900099f8 <HAL_NVIC_EnableIRQ>
900048da:	bf00      	nop
900048dc:	52001000 	.word	0x52001000
900048e0:	58024400 	.word	0x58024400

900048e4 <HAL_JPEG_MspInit>:
* @param hjpeg: JPEG handle pointer
* @retval None
*/
void HAL_JPEG_MspInit(JPEG_HandleTypeDef* hjpeg)
{
  if(hjpeg->Instance==JPEG)
900048e4:	4b3f      	ldr	r3, [pc, #252]	; (900049e4 <HAL_JPEG_MspInit+0x100>)
900048e6:	6802      	ldr	r2, [r0, #0]
900048e8:	429a      	cmp	r2, r3
900048ea:	d000      	beq.n	900048ee <HAL_JPEG_MspInit+0xa>
900048ec:	4770      	bx	lr
{
900048ee:	b570      	push	{r4, r5, r6, lr}
  /* USER CODE BEGIN JPEG_MspInit 0 */
	 hmdma_jpeg_infifo_th.Init.Request = MDMA_REQUEST_JPEG_INFIFO_TH;
	 hmdma_jpeg_outfifo_th.Init.Request = MDMA_REQUEST_JPEG_OUTFIFO_TH;
  /* USER CODE END JPEG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_JPEG_CLK_ENABLE();
900048f0:	4b3d      	ldr	r3, [pc, #244]	; (900049e8 <HAL_JPEG_MspInit+0x104>)
	 hmdma_jpeg_infifo_th.Init.Request = MDMA_REQUEST_JPEG_INFIFO_TH;
900048f2:	2211      	movs	r2, #17
900048f4:	4e3d      	ldr	r6, [pc, #244]	; (900049ec <HAL_JPEG_MspInit+0x108>)
{
900048f6:	b082      	sub	sp, #8
	 hmdma_jpeg_outfifo_th.Init.Request = MDMA_REQUEST_JPEG_OUTFIFO_TH;
900048f8:	4d3d      	ldr	r5, [pc, #244]	; (900049f0 <HAL_JPEG_MspInit+0x10c>)
900048fa:	4604      	mov	r4, r0
	 hmdma_jpeg_infifo_th.Init.Request = MDMA_REQUEST_JPEG_INFIFO_TH;
900048fc:	6072      	str	r2, [r6, #4]
    hmdma_jpeg_infifo_th.Init.BufferTransferLength = 32;
    hmdma_jpeg_infifo_th.Init.SourceBurst = MDMA_SOURCE_BURST_32BEATS;
    hmdma_jpeg_infifo_th.Init.DestBurst = MDMA_DEST_BURST_16BEATS;
    hmdma_jpeg_infifo_th.Init.SourceBlockAddressOffset = 0;
    hmdma_jpeg_infifo_th.Init.DestBlockAddressOffset = 0;
    if (HAL_MDMA_Init(&hmdma_jpeg_infifo_th) != HAL_OK)
900048fe:	4630      	mov	r0, r6
    __HAL_RCC_JPEG_CLK_ENABLE();
90004900:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
    hmdma_jpeg_infifo_th.Instance = MDMA_Channel7;
90004904:	493b      	ldr	r1, [pc, #236]	; (900049f4 <HAL_JPEG_MspInit+0x110>)
    __HAL_RCC_JPEG_CLK_ENABLE();
90004906:	f042 0220 	orr.w	r2, r2, #32
9000490a:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
    hmdma_jpeg_infifo_th.Init.Priority = MDMA_PRIORITY_HIGH;
9000490e:	2280      	movs	r2, #128	; 0x80
    __HAL_RCC_JPEG_CLK_ENABLE();
90004910:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
    hmdma_jpeg_infifo_th.Init.DestDataSize = MDMA_DEST_DATASIZE_WORD;
90004914:	6232      	str	r2, [r6, #32]
    __HAL_RCC_JPEG_CLK_ENABLE();
90004916:	f003 0320 	and.w	r3, r3, #32
    hmdma_jpeg_infifo_th.Instance = MDMA_Channel7;
9000491a:	6031      	str	r1, [r6, #0]
    __HAL_RCC_JPEG_CLK_ENABLE();
9000491c:	9301      	str	r3, [sp, #4]
    hmdma_jpeg_infifo_th.Init.TransferTriggerMode = MDMA_BUFFER_TRANSFER;
9000491e:	2300      	movs	r3, #0
    __HAL_RCC_JPEG_CLK_ENABLE();
90004920:	9901      	ldr	r1, [sp, #4]
    hmdma_jpeg_infifo_th.Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
90004922:	6133      	str	r3, [r6, #16]
    hmdma_jpeg_infifo_th.Init.Priority = MDMA_PRIORITY_HIGH;
90004924:	e9c6 3202 	strd	r3, r2, [r6, #8]
    hmdma_jpeg_infifo_th.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
90004928:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
9000492c:	6272      	str	r2, [r6, #36]	; 0x24
    hmdma_jpeg_infifo_th.Init.BufferTransferLength = 32;
9000492e:	2220      	movs	r2, #32
    hmdma_jpeg_infifo_th.Init.SourceDataSize = MDMA_SRC_DATASIZE_BYTE;
90004930:	e9c6 3306 	strd	r3, r3, [r6, #24]
    hmdma_jpeg_infifo_th.Init.DestBlockAddressOffset = 0;
90004934:	e9c6 330d 	strd	r3, r3, [r6, #52]	; 0x34
    hmdma_jpeg_infifo_th.Init.BufferTransferLength = 32;
90004938:	62b2      	str	r2, [r6, #40]	; 0x28
    hmdma_jpeg_infifo_th.Init.DestBurst = MDMA_DEST_BURST_16BEATS;
9000493a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
9000493e:	f44f 42a0 	mov.w	r2, #20480	; 0x5000
90004942:	e9c6 230b 	strd	r2, r3, [r6, #44]	; 0x2c
	 hmdma_jpeg_outfifo_th.Init.Request = MDMA_REQUEST_JPEG_OUTFIFO_TH;
90004946:	2313      	movs	r3, #19
90004948:	606b      	str	r3, [r5, #4]
    hmdma_jpeg_infifo_th.Init.SourceInc = MDMA_SRC_INC_BYTE;
9000494a:	2302      	movs	r3, #2
9000494c:	6173      	str	r3, [r6, #20]
    if (HAL_MDMA_Init(&hmdma_jpeg_infifo_th) != HAL_OK)
9000494e:	f007 fe6f 	bl	9000c630 <HAL_MDMA_Init>
90004952:	2800      	cmp	r0, #0
90004954:	d13a      	bne.n	900049cc <HAL_JPEG_MspInit+0xe8>
    {
      Error_Handler();
    }

    if (HAL_MDMA_ConfigPostRequestMask(&hmdma_jpeg_infifo_th, 0, 0) != HAL_OK)
90004956:	2200      	movs	r2, #0
90004958:	4824      	ldr	r0, [pc, #144]	; (900049ec <HAL_JPEG_MspInit+0x108>)
9000495a:	4611      	mov	r1, r2
9000495c:	f007 ff06 	bl	9000c76c <HAL_MDMA_ConfigPostRequestMask>
90004960:	2800      	cmp	r0, #0
90004962:	d13c      	bne.n	900049de <HAL_JPEG_MspInit+0xfa>
    hmdma_jpeg_outfifo_th.Init.TransferTriggerMode = MDMA_BUFFER_TRANSFER;
    hmdma_jpeg_outfifo_th.Init.Priority = MDMA_PRIORITY_VERY_HIGH;
    hmdma_jpeg_outfifo_th.Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
    hmdma_jpeg_outfifo_th.Init.SourceInc = MDMA_SRC_INC_DISABLE;
    hmdma_jpeg_outfifo_th.Init.DestinationInc = MDMA_DEST_INC_BYTE;
    hmdma_jpeg_outfifo_th.Init.SourceDataSize = MDMA_SRC_DATASIZE_WORD;
90004964:	2220      	movs	r2, #32
    hmdma_jpeg_outfifo_th.Init.TransferTriggerMode = MDMA_BUFFER_TRANSFER;
90004966:	2300      	movs	r3, #0
    __HAL_LINKDMA(hjpeg,hdmain,hmdma_jpeg_infifo_th);
90004968:	6326      	str	r6, [r4, #48]	; 0x30
    hmdma_jpeg_outfifo_th.Init.Request = MDMA_REQUEST_JPEG_OUTFIFO_TH;
9000496a:	2013      	movs	r0, #19
    hmdma_jpeg_outfifo_th.Init.SourceDataSize = MDMA_SRC_DATASIZE_WORD;
9000496c:	61ea      	str	r2, [r5, #28]
    hmdma_jpeg_outfifo_th.Init.DestDataSize = MDMA_DEST_DATASIZE_BYTE;
    hmdma_jpeg_outfifo_th.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
    hmdma_jpeg_outfifo_th.Init.BufferTransferLength = 32;
9000496e:	62aa      	str	r2, [r5, #40]	; 0x28
    hmdma_jpeg_outfifo_th.Init.SourceBurst = MDMA_SOURCE_BURST_32BEATS;
    hmdma_jpeg_outfifo_th.Init.DestBurst = MDMA_DEST_BURST_32BEATS;
90004970:	f44f 3220 	mov.w	r2, #163840	; 0x28000
    hmdma_jpeg_outfifo_th.Instance = MDMA_Channel6;
90004974:	4920      	ldr	r1, [pc, #128]	; (900049f8 <HAL_JPEG_MspInit+0x114>)
    hmdma_jpeg_outfifo_th.Init.TransferTriggerMode = MDMA_BUFFER_TRANSFER;
90004976:	60ab      	str	r3, [r5, #8]
    hmdma_jpeg_outfifo_th.Init.DestDataSize = MDMA_DEST_DATASIZE_BYTE;
90004978:	622b      	str	r3, [r5, #32]
    hmdma_jpeg_outfifo_th.Init.SourceBlockAddressOffset = 0;
    hmdma_jpeg_outfifo_th.Init.DestBlockAddressOffset = 0;
9000497a:	63ab      	str	r3, [r5, #56]	; 0x38
    __HAL_LINKDMA(hjpeg,hdmain,hmdma_jpeg_infifo_th);
9000497c:	6434      	str	r4, [r6, #64]	; 0x40
    hmdma_jpeg_outfifo_th.Init.DestBurst = MDMA_DEST_BURST_32BEATS;
9000497e:	e9c5 230c 	strd	r2, r3, [r5, #48]	; 0x30
    hmdma_jpeg_outfifo_th.Init.SourceInc = MDMA_SRC_INC_DISABLE;
90004982:	e9c5 3304 	strd	r3, r3, [r5, #16]
    hmdma_jpeg_outfifo_th.Init.DestinationInc = MDMA_DEST_INC_BYTE;
90004986:	2308      	movs	r3, #8
    hmdma_jpeg_outfifo_th.Init.Priority = MDMA_PRIORITY_VERY_HIGH;
90004988:	22c0      	movs	r2, #192	; 0xc0
    hmdma_jpeg_outfifo_th.Instance = MDMA_Channel6;
9000498a:	e9c5 1000 	strd	r1, r0, [r5]
    hmdma_jpeg_outfifo_th.Init.DestinationInc = MDMA_DEST_INC_BYTE;
9000498e:	61ab      	str	r3, [r5, #24]
    hmdma_jpeg_outfifo_th.Init.SourceBurst = MDMA_SOURCE_BURST_32BEATS;
90004990:	f44f 41a0 	mov.w	r1, #20480	; 0x5000
    hmdma_jpeg_outfifo_th.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
90004994:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
    if (HAL_MDMA_Init(&hmdma_jpeg_outfifo_th) != HAL_OK)
90004998:	4815      	ldr	r0, [pc, #84]	; (900049f0 <HAL_JPEG_MspInit+0x10c>)
    hmdma_jpeg_outfifo_th.Init.SourceBurst = MDMA_SOURCE_BURST_32BEATS;
9000499a:	62e9      	str	r1, [r5, #44]	; 0x2c
    hmdma_jpeg_outfifo_th.Init.Priority = MDMA_PRIORITY_VERY_HIGH;
9000499c:	60ea      	str	r2, [r5, #12]
    hmdma_jpeg_outfifo_th.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
9000499e:	626b      	str	r3, [r5, #36]	; 0x24
    if (HAL_MDMA_Init(&hmdma_jpeg_outfifo_th) != HAL_OK)
900049a0:	f007 fe46 	bl	9000c630 <HAL_MDMA_Init>
900049a4:	b9c0      	cbnz	r0, 900049d8 <HAL_JPEG_MspInit+0xf4>
    {
      Error_Handler();
    }

    if (HAL_MDMA_ConfigPostRequestMask(&hmdma_jpeg_outfifo_th, 0, 0) != HAL_OK)
900049a6:	2200      	movs	r2, #0
900049a8:	4811      	ldr	r0, [pc, #68]	; (900049f0 <HAL_JPEG_MspInit+0x10c>)
900049aa:	4611      	mov	r1, r2
900049ac:	f007 fede 	bl	9000c76c <HAL_MDMA_ConfigPostRequestMask>
900049b0:	b978      	cbnz	r0, 900049d2 <HAL_JPEG_MspInit+0xee>
    {
      Error_Handler();
    }

    __HAL_LINKDMA(hjpeg,hdmaout,hmdma_jpeg_outfifo_th);
900049b2:	6365      	str	r5, [r4, #52]	; 0x34

    /* JPEG interrupt Init */
    HAL_NVIC_SetPriority(JPEG_IRQn, 5, 0);
900049b4:	2079      	movs	r0, #121	; 0x79
900049b6:	2200      	movs	r2, #0
900049b8:	2105      	movs	r1, #5
    __HAL_LINKDMA(hjpeg,hdmaout,hmdma_jpeg_outfifo_th);
900049ba:	642c      	str	r4, [r5, #64]	; 0x40
    HAL_NVIC_SetPriority(JPEG_IRQn, 5, 0);
900049bc:	f004 ffde 	bl	9000997c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(JPEG_IRQn);
900049c0:	2079      	movs	r0, #121	; 0x79
  /* USER CODE BEGIN JPEG_MspInit 1 */

  /* USER CODE END JPEG_MspInit 1 */
  }

}
900049c2:	b002      	add	sp, #8
900049c4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_NVIC_EnableIRQ(JPEG_IRQn);
900049c8:	f005 b816 	b.w	900099f8 <HAL_NVIC_EnableIRQ>
      Error_Handler();
900049cc:	f7ff ff32 	bl	90004834 <Error_Handler>
900049d0:	e7c1      	b.n	90004956 <HAL_JPEG_MspInit+0x72>
      Error_Handler();
900049d2:	f7ff ff2f 	bl	90004834 <Error_Handler>
900049d6:	e7ec      	b.n	900049b2 <HAL_JPEG_MspInit+0xce>
      Error_Handler();
900049d8:	f7ff ff2c 	bl	90004834 <Error_Handler>
900049dc:	e7e3      	b.n	900049a6 <HAL_JPEG_MspInit+0xc2>
      Error_Handler();
900049de:	f7ff ff29 	bl	90004834 <Error_Handler>
900049e2:	e7bf      	b.n	90004964 <HAL_JPEG_MspInit+0x80>
900049e4:	52003000 	.word	0x52003000
900049e8:	58024400 	.word	0x58024400
900049ec:	2400cf84 	.word	0x2400cf84
900049f0:	2400cff0 	.word	0x2400cff0
900049f4:	52000200 	.word	0x52000200
900049f8:	520001c0 	.word	0x520001c0

900049fc <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
900049fc:	b570      	push	{r4, r5, r6, lr}
900049fe:	b0ba      	sub	sp, #232	; 0xe8
  GPIO_InitTypeDef GPIO_InitStruct = {0};
90004a00:	2100      	movs	r1, #0
{
90004a02:	4604      	mov	r4, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
90004a04:	22c0      	movs	r2, #192	; 0xc0
90004a06:	a80a      	add	r0, sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
90004a08:	9109      	str	r1, [sp, #36]	; 0x24
90004a0a:	e9cd 1105 	strd	r1, r1, [sp, #20]
90004a0e:	e9cd 1107 	strd	r1, r1, [sp, #28]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
90004a12:	f023 f8d3 	bl	90027bbc <memset>
  if(hltdc->Instance==LTDC)
90004a16:	4b4a      	ldr	r3, [pc, #296]	; (90004b40 <HAL_LTDC_MspInit+0x144>)
90004a18:	6822      	ldr	r2, [r4, #0]
90004a1a:	429a      	cmp	r2, r3
90004a1c:	d001      	beq.n	90004a22 <HAL_LTDC_MspInit+0x26>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
90004a1e:	b03a      	add	sp, #232	; 0xe8
90004a20:	bd70      	pop	{r4, r5, r6, pc}
    PeriphClkInitStruct.PLL3.PLL3P = 2;
90004a22:	2302      	movs	r3, #2
    PeriphClkInitStruct.PLL3.PLL3M = 5;
90004a24:	2205      	movs	r2, #5
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
90004a26:	f04f 5400 	mov.w	r4, #536870912	; 0x20000000
90004a2a:	2500      	movs	r5, #0
    PeriphClkInitStruct.PLL3.PLL3N = 160;
90004a2c:	21a0      	movs	r1, #160	; 0xa0
    PeriphClkInitStruct.PLL3.PLL3P = 2;
90004a2e:	9316      	str	r3, [sp, #88]	; 0x58
    PeriphClkInitStruct.PLL3.PLL3M = 5;
90004a30:	9214      	str	r2, [sp, #80]	; 0x50
    PeriphClkInitStruct.PLL3.PLL3R = 83;
90004a32:	2253      	movs	r2, #83	; 0x53
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
90004a34:	9317      	str	r3, [sp, #92]	; 0x5c
    PeriphClkInitStruct.PLL3.PLL3R = 83;
90004a36:	f44f 6300 	mov.w	r3, #2048	; 0x800
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
90004a3a:	a80a      	add	r0, sp, #40	; 0x28
    PeriphClkInitStruct.PLL3.PLL3N = 160;
90004a3c:	9115      	str	r1, [sp, #84]	; 0x54
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
90004a3e:	e9cd 450a 	strd	r4, r5, [sp, #40]	; 0x28
    PeriphClkInitStruct.PLL3.PLL3R = 83;
90004a42:	e9cd 2318 	strd	r2, r3, [sp, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
90004a46:	f008 ff23 	bl	9000d890 <HAL_RCCEx_PeriphCLKConfig>
90004a4a:	2800      	cmp	r0, #0
90004a4c:	d174      	bne.n	90004b38 <HAL_LTDC_MspInit+0x13c>
    __HAL_RCC_LTDC_CLK_ENABLE();
90004a4e:	4b3d      	ldr	r3, [pc, #244]	; (90004b44 <HAL_LTDC_MspInit+0x148>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
90004a50:	2402      	movs	r4, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
90004a52:	2500      	movs	r5, #0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
90004a54:	260e      	movs	r6, #14
    __HAL_RCC_LTDC_CLK_ENABLE();
90004a56:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
90004a5a:	a905      	add	r1, sp, #20
90004a5c:	483a      	ldr	r0, [pc, #232]	; (90004b48 <HAL_LTDC_MspInit+0x14c>)
    __HAL_RCC_LTDC_CLK_ENABLE();
90004a5e:	f042 0208 	orr.w	r2, r2, #8
90004a62:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
90004a66:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
90004a6a:	f002 0208 	and.w	r2, r2, #8
90004a6e:	9200      	str	r2, [sp, #0]
90004a70:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOK_CLK_ENABLE();
90004a72:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
90004a76:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
90004a7a:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
90004a7e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
90004a82:	f402 6280 	and.w	r2, r2, #1024	; 0x400
90004a86:	9201      	str	r2, [sp, #4]
90004a88:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOI_CLK_ENABLE();
90004a8a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
90004a8e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
90004a92:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
90004a96:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
90004a9a:	f402 7280 	and.w	r2, r2, #256	; 0x100
90004a9e:	9202      	str	r2, [sp, #8]
90004aa0:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
90004aa2:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
90004aa6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
90004aaa:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
90004aae:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
90004ab2:	f402 7200 	and.w	r2, r2, #512	; 0x200
90004ab6:	9203      	str	r2, [sp, #12]
90004ab8:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOH_CLK_ENABLE();
90004aba:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
90004abe:	f042 0280 	orr.w	r2, r2, #128	; 0x80
90004ac2:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
90004ac6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
90004aca:	9408      	str	r4, [sp, #32]
    __HAL_RCC_GPIOH_CLK_ENABLE();
90004acc:	f003 0380 	and.w	r3, r3, #128	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
90004ad0:	9609      	str	r6, [sp, #36]	; 0x24
    __HAL_RCC_GPIOH_CLK_ENABLE();
90004ad2:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_3
90004ad4:	23fc      	movs	r3, #252	; 0xfc
    __HAL_RCC_GPIOH_CLK_ENABLE();
90004ad6:	9a04      	ldr	r2, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_3
90004ad8:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
90004ada:	e9cd 4506 	strd	r4, r5, [sp, #24]
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
90004ade:	f005 f9b9 	bl	90009e54 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_9|GPIO_PIN_12
90004ae2:	f24d 2303 	movw	r3, #53763	; 0xd203
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
90004ae6:	a905      	add	r1, sp, #20
90004ae8:	4818      	ldr	r0, [pc, #96]	; (90004b4c <HAL_LTDC_MspInit+0x150>)
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_9|GPIO_PIN_12
90004aea:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
90004aec:	e9cd 4506 	strd	r4, r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
90004af0:	e9cd 4608 	strd	r4, r6, [sp, #32]
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
90004af4:	f005 f9ae 	bl	90009e54 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_14|GPIO_PIN_12|GPIO_PIN_13
90004af8:	f64f 73fb 	movw	r3, #65531	; 0xfffb
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
90004afc:	a905      	add	r1, sp, #20
90004afe:	4814      	ldr	r0, [pc, #80]	; (90004b50 <HAL_LTDC_MspInit+0x154>)
    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_14|GPIO_PIN_12|GPIO_PIN_13
90004b00:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
90004b02:	e9cd 4506 	strd	r4, r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
90004b06:	e9cd 4608 	strd	r4, r6, [sp, #32]
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
90004b0a:	f005 f9a3 	bl	90009e54 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_9;
90004b0e:	f44f 7300 	mov.w	r3, #512	; 0x200
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
90004b12:	a905      	add	r1, sp, #20
90004b14:	480f      	ldr	r0, [pc, #60]	; (90004b54 <HAL_LTDC_MspInit+0x158>)
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
90004b16:	9609      	str	r6, [sp, #36]	; 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_9;
90004b18:	e9cd 3405 	strd	r3, r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
90004b1c:	e9cd 5407 	strd	r5, r4, [sp, #28]
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
90004b20:	f005 f998 	bl	90009e54 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
90004b24:	462a      	mov	r2, r5
90004b26:	2105      	movs	r1, #5
90004b28:	2058      	movs	r0, #88	; 0x58
90004b2a:	f004 ff27 	bl	9000997c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
90004b2e:	2058      	movs	r0, #88	; 0x58
90004b30:	f004 ff62 	bl	900099f8 <HAL_NVIC_EnableIRQ>
}
90004b34:	b03a      	add	sp, #232	; 0xe8
90004b36:	bd70      	pop	{r4, r5, r6, pc}
      Error_Handler();
90004b38:	f7ff fe7c 	bl	90004834 <Error_Handler>
90004b3c:	e787      	b.n	90004a4e <HAL_LTDC_MspInit+0x52>
90004b3e:	bf00      	nop
90004b40:	50001000 	.word	0x50001000
90004b44:	58024400 	.word	0x58024400
90004b48:	58022800 	.word	0x58022800
90004b4c:	58022000 	.word	0x58022000
90004b50:	58022400 	.word	0x58022400
90004b54:	58021c00 	.word	0x58021c00

90004b58 <HAL_SDRAM_MspInit>:
static void HAL_FMC_MspInit(void){
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
  if (FMC_Initialized) {
90004b58:	4836      	ldr	r0, [pc, #216]	; (90004c34 <HAL_SDRAM_MspInit+0xdc>)
  GPIO_InitTypeDef GPIO_InitStruct ={0};
90004b5a:	2300      	movs	r3, #0
  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
90004b5c:	b5d0      	push	{r4, r6, r7, lr}
  if (FMC_Initialized) {
90004b5e:	6801      	ldr	r1, [r0, #0]
void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
90004b60:	b0b8      	sub	sp, #224	; 0xe0
  GPIO_InitTypeDef GPIO_InitStruct ={0};
90004b62:	e9cd 3302 	strd	r3, r3, [sp, #8]
90004b66:	e9cd 3304 	strd	r3, r3, [sp, #16]
90004b6a:	9306      	str	r3, [sp, #24]
  if (FMC_Initialized) {
90004b6c:	b109      	cbz	r1, 90004b72 <HAL_SDRAM_MspInit+0x1a>
  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
90004b6e:	b038      	add	sp, #224	; 0xe0
90004b70:	bdd0      	pop	{r4, r6, r7, pc}
  FMC_Initialized = 1;
90004b72:	2301      	movs	r3, #1
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
90004b74:	22b8      	movs	r2, #184	; 0xb8
  FMC_Initialized = 1;
90004b76:	6003      	str	r3, [r0, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
90004b78:	a80a      	add	r0, sp, #40	; 0x28
90004b7a:	f023 f81f 	bl	90027bbc <memset>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC;
90004b7e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
90004b82:	2300      	movs	r3, #0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
90004b84:	a808      	add	r0, sp, #32
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC;
90004b86:	e9cd 2308 	strd	r2, r3, [sp, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
90004b8a:	f008 fe81 	bl	9000d890 <HAL_RCCEx_PeriphCLKConfig>
90004b8e:	2800      	cmp	r0, #0
90004b90:	d14c      	bne.n	90004c2c <HAL_SDRAM_MspInit+0xd4>
  __HAL_RCC_FMC_CLK_ENABLE();
90004b92:	4b29      	ldr	r3, [pc, #164]	; (90004c38 <HAL_SDRAM_MspInit+0xe0>)
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_9
90004b94:	f64f 7083 	movw	r0, #65411	; 0xff83
90004b98:	2102      	movs	r1, #2
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
90004b9a:	240c      	movs	r4, #12
  __HAL_RCC_FMC_CLK_ENABLE();
90004b9c:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_9
90004ba0:	2600      	movs	r6, #0
90004ba2:	2703      	movs	r7, #3
  __HAL_RCC_FMC_CLK_ENABLE();
90004ba4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
90004ba8:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
90004bac:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
90004bb0:	9406      	str	r4, [sp, #24]
  __HAL_RCC_FMC_CLK_ENABLE();
90004bb2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_9
90004bb6:	e9cd 0102 	strd	r0, r1, [sp, #8]
  __HAL_RCC_FMC_CLK_ENABLE();
90004bba:	9301      	str	r3, [sp, #4]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
90004bbc:	a902      	add	r1, sp, #8
90004bbe:	481f      	ldr	r0, [pc, #124]	; (90004c3c <HAL_SDRAM_MspInit+0xe4>)
  __HAL_RCC_FMC_CLK_ENABLE();
90004bc0:	9b01      	ldr	r3, [sp, #4]
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_9
90004bc2:	e9cd 6704 	strd	r6, r7, [sp, #16]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
90004bc6:	f005 f945 	bl	90009e54 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_5|GPIO_PIN_4
90004bca:	f248 1233 	movw	r2, #33075	; 0x8133
90004bce:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
90004bd0:	a902      	add	r1, sp, #8
90004bd2:	481b      	ldr	r0, [pc, #108]	; (90004c40 <HAL_SDRAM_MspInit+0xe8>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
90004bd4:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_5|GPIO_PIN_4
90004bd6:	e9cd 2302 	strd	r2, r3, [sp, #8]
90004bda:	e9cd 6704 	strd	r6, r7, [sp, #16]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
90004bde:	f005 f939 	bl	90009e54 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_14
90004be2:	f24c 7203 	movw	r2, #50947	; 0xc703
90004be6:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
90004be8:	a902      	add	r1, sp, #8
90004bea:	4816      	ldr	r0, [pc, #88]	; (90004c44 <HAL_SDRAM_MspInit+0xec>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
90004bec:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_14
90004bee:	e9cd 2302 	strd	r2, r3, [sp, #8]
90004bf2:	e9cd 6704 	strd	r6, r7, [sp, #16]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
90004bf6:	f005 f92d 	bl	90009e54 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_3
90004bfa:	f64f 023f 	movw	r2, #63551	; 0xf83f
90004bfe:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
90004c00:	a902      	add	r1, sp, #8
90004c02:	4811      	ldr	r0, [pc, #68]	; (90004c48 <HAL_SDRAM_MspInit+0xf0>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
90004c04:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_3
90004c06:	e9cd 2302 	strd	r2, r3, [sp, #8]
90004c0a:	e9cd 6704 	strd	r6, r7, [sp, #16]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
90004c0e:	f005 f921 	bl	90009e54 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
90004c12:	22e0      	movs	r2, #224	; 0xe0
90004c14:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
90004c16:	a902      	add	r1, sp, #8
90004c18:	480c      	ldr	r0, [pc, #48]	; (90004c4c <HAL_SDRAM_MspInit+0xf4>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
90004c1a:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
90004c1c:	e9cd 6704 	strd	r6, r7, [sp, #16]
90004c20:	e9cd 2302 	strd	r2, r3, [sp, #8]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
90004c24:	f005 f916 	bl	90009e54 <HAL_GPIO_Init>
}
90004c28:	b038      	add	sp, #224	; 0xe0
90004c2a:	bdd0      	pop	{r4, r6, r7, pc}
      Error_Handler();
90004c2c:	f7ff fe02 	bl	90004834 <Error_Handler>
90004c30:	e7af      	b.n	90004b92 <HAL_SDRAM_MspInit+0x3a>
90004c32:	bf00      	nop
90004c34:	2400d09c 	.word	0x2400d09c
90004c38:	58024400 	.word	0x58024400
90004c3c:	58021000 	.word	0x58021000
90004c40:	58021800 	.word	0x58021800
90004c44:	58020c00 	.word	0x58020c00
90004c48:	58021400 	.word	0x58021400
90004c4c:	58021c00 	.word	0x58021c00

90004c50 <HAL_SDRAM_MspDeInit>:

static void HAL_FMC_MspDeInit(void){
  /* USER CODE BEGIN FMC_MspDeInit 0 */

  /* USER CODE END FMC_MspDeInit 0 */
  if (FMC_DeInitialized) {
90004c50:	4b13      	ldr	r3, [pc, #76]	; (90004ca0 <HAL_SDRAM_MspDeInit+0x50>)
90004c52:	681a      	ldr	r2, [r3, #0]
90004c54:	b102      	cbz	r2, 90004c58 <HAL_SDRAM_MspDeInit+0x8>
90004c56:	4770      	bx	lr
  /* USER CODE BEGIN FMC_MspDeInit 1 */

  /* USER CODE END FMC_MspDeInit 1 */
}

void HAL_SDRAM_MspDeInit(SDRAM_HandleTypeDef* hsdram){
90004c58:	b510      	push	{r4, lr}
  __HAL_RCC_FMC_CLK_DISABLE();
90004c5a:	4a12      	ldr	r2, [pc, #72]	; (90004ca4 <HAL_SDRAM_MspDeInit+0x54>)
  FMC_DeInitialized = 1;
90004c5c:	2401      	movs	r4, #1
  HAL_GPIO_DeInit(GPIOE, GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_9
90004c5e:	f64f 7183 	movw	r1, #65411	; 0xff83
90004c62:	4811      	ldr	r0, [pc, #68]	; (90004ca8 <HAL_SDRAM_MspDeInit+0x58>)
  FMC_DeInitialized = 1;
90004c64:	601c      	str	r4, [r3, #0]
  __HAL_RCC_FMC_CLK_DISABLE();
90004c66:	f8d2 30d4 	ldr.w	r3, [r2, #212]	; 0xd4
90004c6a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
90004c6e:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
  HAL_GPIO_DeInit(GPIOE, GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_9
90004c72:	f005 fa21 	bl	9000a0b8 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOG, GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_5|GPIO_PIN_4
90004c76:	f248 1133 	movw	r1, #33075	; 0x8133
90004c7a:	480c      	ldr	r0, [pc, #48]	; (90004cac <HAL_SDRAM_MspDeInit+0x5c>)
90004c7c:	f005 fa1c 	bl	9000a0b8 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOD, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_14
90004c80:	f24c 7103 	movw	r1, #50947	; 0xc703
90004c84:	480a      	ldr	r0, [pc, #40]	; (90004cb0 <HAL_SDRAM_MspDeInit+0x60>)
90004c86:	f005 fa17 	bl	9000a0b8 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOF, GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_3
90004c8a:	f64f 013f 	movw	r1, #63551	; 0xf83f
90004c8e:	4809      	ldr	r0, [pc, #36]	; (90004cb4 <HAL_SDRAM_MspDeInit+0x64>)
90004c90:	f005 fa12 	bl	9000a0b8 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOH, GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7);
90004c94:	21e0      	movs	r1, #224	; 0xe0
90004c96:	4808      	ldr	r0, [pc, #32]	; (90004cb8 <HAL_SDRAM_MspDeInit+0x68>)
  /* USER CODE END SDRAM_MspDeInit 0 */
  HAL_FMC_MspDeInit();
  /* USER CODE BEGIN SDRAM_MspDeInit 1 */

  /* USER CODE END SDRAM_MspDeInit 1 */
}
90004c98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_GPIO_DeInit(GPIOH, GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7);
90004c9c:	f005 ba0c 	b.w	9000a0b8 <HAL_GPIO_DeInit>
90004ca0:	2400d098 	.word	0x2400d098
90004ca4:	58024400 	.word	0x58024400
90004ca8:	58021000 	.word	0x58021000
90004cac:	58021800 	.word	0x58021800
90004cb0:	58020c00 	.word	0x58020c00
90004cb4:	58021400 	.word	0x58021400
90004cb8:	58021c00 	.word	0x58021c00

90004cbc <HAL_InitTick>:
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
90004cbc:	280f      	cmp	r0, #15
90004cbe:	d901      	bls.n	90004cc4 <HAL_InitTick+0x8>
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
    uwTickPrio = TickPriority;
    }
  else
  {
    return HAL_ERROR;
90004cc0:	2001      	movs	r0, #1
    return HAL_TIM_Base_Start_IT(&htim6);
  }

  /* Return function status */
  return HAL_ERROR;
}
90004cc2:	4770      	bx	lr
{
90004cc4:	b530      	push	{r4, r5, lr}
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
90004cc6:	4601      	mov	r1, r0
{
90004cc8:	b08b      	sub	sp, #44	; 0x2c
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
90004cca:	2200      	movs	r2, #0
90004ccc:	4604      	mov	r4, r0
90004cce:	2036      	movs	r0, #54	; 0x36
90004cd0:	f004 fe54 	bl	9000997c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
90004cd4:	2036      	movs	r0, #54	; 0x36
90004cd6:	f004 fe8f 	bl	900099f8 <HAL_NVIC_EnableIRQ>
  __HAL_RCC_TIM6_CLK_ENABLE();
90004cda:	4b1a      	ldr	r3, [pc, #104]	; (90004d44 <HAL_InitTick+0x88>)
    uwTickPrio = TickPriority;
90004cdc:	4a1a      	ldr	r2, [pc, #104]	; (90004d48 <HAL_InitTick+0x8c>)
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
90004cde:	4669      	mov	r1, sp
90004ce0:	a802      	add	r0, sp, #8
    uwTickPrio = TickPriority;
90004ce2:	6014      	str	r4, [r2, #0]
  __HAL_RCC_TIM6_CLK_ENABLE();
90004ce4:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
90004ce8:	f042 0210 	orr.w	r2, r2, #16
90004cec:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
90004cf0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
90004cf4:	f003 0310 	and.w	r3, r3, #16
90004cf8:	9301      	str	r3, [sp, #4]
90004cfa:	9b01      	ldr	r3, [sp, #4]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
90004cfc:	f008 fca8 	bl	9000d650 <HAL_RCC_GetClockConfig>
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
90004d00:	9b07      	ldr	r3, [sp, #28]
90004d02:	b9bb      	cbnz	r3, 90004d34 <HAL_InitTick+0x78>
    uwTimclock = HAL_RCC_GetPCLK1Freq();
90004d04:	f008 fc14 	bl	9000d530 <HAL_RCC_GetPCLK1Freq>
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
90004d08:	4b10      	ldr	r3, [pc, #64]	; (90004d4c <HAL_InitTick+0x90>)
  htim6.Init.ClockDivision = 0;
90004d0a:	2200      	movs	r2, #0
  htim6.Instance = TIM6;
90004d0c:	4c10      	ldr	r4, [pc, #64]	; (90004d50 <HAL_InitTick+0x94>)
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
90004d0e:	fba3 1300 	umull	r1, r3, r3, r0
  htim6.Instance = TIM6;
90004d12:	4d10      	ldr	r5, [pc, #64]	; (90004d54 <HAL_InitTick+0x98>)
  htim6.Init.Period = (1000000U / 1000U) - 1U;
90004d14:	f240 31e7 	movw	r1, #999	; 0x3e7
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
90004d18:	4620      	mov	r0, r4
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
90004d1a:	0c9b      	lsrs	r3, r3, #18
  htim6.Instance = TIM6;
90004d1c:	6025      	str	r5, [r4, #0]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
90004d1e:	60a2      	str	r2, [r4, #8]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
90004d20:	3b01      	subs	r3, #1
  htim6.Init.Period = (1000000U / 1000U) - 1U;
90004d22:	e9c4 1203 	strd	r1, r2, [r4, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
90004d26:	6063      	str	r3, [r4, #4]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
90004d28:	f009 fc24 	bl	9000e574 <HAL_TIM_Base_Init>
90004d2c:	b130      	cbz	r0, 90004d3c <HAL_InitTick+0x80>
    return HAL_ERROR;
90004d2e:	2001      	movs	r0, #1
}
90004d30:	b00b      	add	sp, #44	; 0x2c
90004d32:	bd30      	pop	{r4, r5, pc}
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
90004d34:	f008 fbfc 	bl	9000d530 <HAL_RCC_GetPCLK1Freq>
90004d38:	0040      	lsls	r0, r0, #1
90004d3a:	e7e5      	b.n	90004d08 <HAL_InitTick+0x4c>
    return HAL_TIM_Base_Start_IT(&htim6);
90004d3c:	4620      	mov	r0, r4
90004d3e:	f009 fccf 	bl	9000e6e0 <HAL_TIM_Base_Start_IT>
90004d42:	e7f5      	b.n	90004d30 <HAL_InitTick+0x74>
90004d44:	58024400 	.word	0x58024400
90004d48:	24000060 	.word	0x24000060
90004d4c:	431bde83 	.word	0x431bde83
90004d50:	2400d0a0 	.word	0x2400d0a0
90004d54:	40001000 	.word	0x40001000

90004d58 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
90004d58:	4770      	bx	lr
90004d5a:	bf00      	nop

90004d5c <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
90004d5c:	e7fe      	b.n	90004d5c <HardFault_Handler>
90004d5e:	bf00      	nop

90004d60 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
90004d60:	e7fe      	b.n	90004d60 <MemManage_Handler>
90004d62:	bf00      	nop

90004d64 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
90004d64:	e7fe      	b.n	90004d64 <BusFault_Handler>
90004d66:	bf00      	nop

90004d68 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
90004d68:	e7fe      	b.n	90004d68 <UsageFault_Handler>
90004d6a:	bf00      	nop

90004d6c <DebugMon_Handler>:
90004d6c:	4770      	bx	lr
90004d6e:	bf00      	nop

90004d70 <TIM6_DAC_IRQHandler>:
void TIM6_DAC_IRQHandler(void)
{
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
90004d70:	4801      	ldr	r0, [pc, #4]	; (90004d78 <TIM6_DAC_IRQHandler+0x8>)
90004d72:	f009 bd19 	b.w	9000e7a8 <HAL_TIM_IRQHandler>
90004d76:	bf00      	nop
90004d78:	2400d0a0 	.word	0x2400d0a0

90004d7c <LTDC_IRQHandler>:
void LTDC_IRQHandler(void)
{
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
90004d7c:	4801      	ldr	r0, [pc, #4]	; (90004d84 <LTDC_IRQHandler+0x8>)
90004d7e:	f007 bb01 	b.w	9000c384 <HAL_LTDC_IRQHandler>
90004d82:	bf00      	nop
90004d84:	2400cedc 	.word	0x2400cedc

90004d88 <DMA2D_IRQHandler>:
void DMA2D_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
90004d88:	4801      	ldr	r0, [pc, #4]	; (90004d90 <DMA2D_IRQHandler+0x8>)
90004d8a:	f004 bf5f 	b.w	90009c4c <HAL_DMA2D_IRQHandler>
90004d8e:	bf00      	nop
90004d90:	2400ce1c 	.word	0x2400ce1c

90004d94 <JPEG_IRQHandler>:
void JPEG_IRQHandler(void)
{
  /* USER CODE BEGIN JPEG_IRQn 0 */

  /* USER CODE END JPEG_IRQn 0 */
  HAL_JPEG_IRQHandler(&hjpeg);
90004d94:	4801      	ldr	r0, [pc, #4]	; (90004d9c <JPEG_IRQHandler+0x8>)
90004d96:	f007 b9e1 	b.w	9000c15c <HAL_JPEG_IRQHandler>
90004d9a:	bf00      	nop
90004d9c:	2400ce84 	.word	0x2400ce84

90004da0 <MDMA_IRQHandler>:
void MDMA_IRQHandler(void)
{
  /* USER CODE BEGIN MDMA_IRQn 0 */

  /* USER CODE END MDMA_IRQn 0 */
  HAL_MDMA_IRQHandler(&hmdma_jpeg_outfifo_th);
90004da0:	4804      	ldr	r0, [pc, #16]	; (90004db4 <MDMA_IRQHandler+0x14>)
{
90004da2:	b508      	push	{r3, lr}
  HAL_MDMA_IRQHandler(&hmdma_jpeg_outfifo_th);
90004da4:	f007 fda2 	bl	9000c8ec <HAL_MDMA_IRQHandler>
  HAL_MDMA_IRQHandler(&hmdma_jpeg_infifo_th);
90004da8:	4803      	ldr	r0, [pc, #12]	; (90004db8 <MDMA_IRQHandler+0x18>)
  /* USER CODE BEGIN MDMA_IRQn 1 */

  /* USER CODE END MDMA_IRQn 1 */
}
90004daa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_MDMA_IRQHandler(&hmdma_jpeg_infifo_th);
90004dae:	f007 bd9d 	b.w	9000c8ec <HAL_MDMA_IRQHandler>
90004db2:	bf00      	nop
90004db4:	2400cff0 	.word	0x2400cff0
90004db8:	2400cf84 	.word	0x2400cf84

90004dbc <_getpid>:
}

int _getpid(void)
{
	return 1;
}
90004dbc:	2001      	movs	r0, #1
90004dbe:	4770      	bx	lr

90004dc0 <_kill>:

int _kill(int pid, int sig)
{
90004dc0:	b508      	push	{r3, lr}
	errno = EINVAL;
90004dc2:	f022 ffaf 	bl	90027d24 <__errno>
90004dc6:	2216      	movs	r2, #22
90004dc8:	4603      	mov	r3, r0
	return -1;
}
90004dca:	f04f 30ff 	mov.w	r0, #4294967295
	errno = EINVAL;
90004dce:	601a      	str	r2, [r3, #0]
}
90004dd0:	bd08      	pop	{r3, pc}
90004dd2:	bf00      	nop

90004dd4 <_exit>:

void _exit (int status)
{
90004dd4:	b508      	push	{r3, lr}
	errno = EINVAL;
90004dd6:	f022 ffa5 	bl	90027d24 <__errno>
90004dda:	2316      	movs	r3, #22
90004ddc:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
90004dde:	e7fe      	b.n	90004dde <_exit+0xa>

90004de0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
90004de0:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
90004de2:	1e16      	subs	r6, r2, #0
90004de4:	dd07      	ble.n	90004df6 <_read+0x16>
90004de6:	460c      	mov	r4, r1
90004de8:	198d      	adds	r5, r1, r6
	{
		*ptr++ = __io_getchar();
90004dea:	f3af 8000 	nop.w
90004dee:	f804 0b01 	strb.w	r0, [r4], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
90004df2:	42a5      	cmp	r5, r4
90004df4:	d1f9      	bne.n	90004dea <_read+0xa>
	}

return len;
}
90004df6:	4630      	mov	r0, r6
90004df8:	bd70      	pop	{r4, r5, r6, pc}
90004dfa:	bf00      	nop

90004dfc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
90004dfc:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
90004dfe:	1e16      	subs	r6, r2, #0
90004e00:	dd07      	ble.n	90004e12 <_write+0x16>
90004e02:	460c      	mov	r4, r1
90004e04:	198d      	adds	r5, r1, r6
	{
		__io_putchar(*ptr++);
90004e06:	f814 0b01 	ldrb.w	r0, [r4], #1
90004e0a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
90004e0e:	42ac      	cmp	r4, r5
90004e10:	d1f9      	bne.n	90004e06 <_write+0xa>
	}
	return len;
}
90004e12:	4630      	mov	r0, r6
90004e14:	bd70      	pop	{r4, r5, r6, pc}
90004e16:	bf00      	nop

90004e18 <_close>:

int _close(int file)
{
	return -1;
}
90004e18:	f04f 30ff 	mov.w	r0, #4294967295
90004e1c:	4770      	bx	lr
90004e1e:	bf00      	nop

90004e20 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
90004e20:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
90004e24:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
90004e26:	604b      	str	r3, [r1, #4]
}
90004e28:	4770      	bx	lr
90004e2a:	bf00      	nop

90004e2c <_isatty>:

int _isatty(int file)
{
	return 1;
}
90004e2c:	2001      	movs	r0, #1
90004e2e:	4770      	bx	lr

90004e30 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
90004e30:	2000      	movs	r0, #0
90004e32:	4770      	bx	lr

90004e34 <_sbrk>:
{
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
90004e34:	4a0a      	ldr	r2, [pc, #40]	; (90004e60 <_sbrk+0x2c>)
{
90004e36:	b508      	push	{r3, lr}
90004e38:	4603      	mov	r3, r0
	if (heap_end == 0)
90004e3a:	6810      	ldr	r0, [r2, #0]
90004e3c:	b128      	cbz	r0, 90004e4a <_sbrk+0x16>
		heap_end = &end;

	prev_heap_end = heap_end;
	if (heap_end + incr > stack_ptr)
90004e3e:	4403      	add	r3, r0
90004e40:	4669      	mov	r1, sp
90004e42:	428b      	cmp	r3, r1
90004e44:	d805      	bhi.n	90004e52 <_sbrk+0x1e>
	{
		errno = ENOMEM;
		return NULL;
	}

	heap_end += incr;
90004e46:	6013      	str	r3, [r2, #0]

	return prev_heap_end;
}
90004e48:	bd08      	pop	{r3, pc}
		heap_end = &end;
90004e4a:	4906      	ldr	r1, [pc, #24]	; (90004e64 <_sbrk+0x30>)
90004e4c:	4608      	mov	r0, r1
90004e4e:	6011      	str	r1, [r2, #0]
90004e50:	e7f5      	b.n	90004e3e <_sbrk+0xa>
		errno = ENOMEM;
90004e52:	f022 ff67 	bl	90027d24 <__errno>
90004e56:	220c      	movs	r2, #12
90004e58:	4603      	mov	r3, r0
		return NULL;
90004e5a:	2000      	movs	r0, #0
		errno = ENOMEM;
90004e5c:	601a      	str	r2, [r3, #0]
}
90004e5e:	bd08      	pop	{r3, pc}
90004e60:	2400d0ec 	.word	0x2400d0ec
90004e64:	240285d8 	.word	0x240285d8

90004e68 <_ZN23ApplicationFontProviderD1Ev>:
    static const touchgfx::FontId LARGE = 1;   // verdana_40_4bpp
    static const touchgfx::FontId SMALL = 2;   // verdana_10_4bpp
    static const uint16_t NUMBER_OF_FONTS = 3;
};

class ApplicationFontProvider : public touchgfx::FontProvider
90004e68:	4770      	bx	lr
90004e6a:	bf00      	nop

90004e6c <_ZN23ApplicationFontProviderD0Ev>:
90004e6c:	b510      	push	{r4, lr}
90004e6e:	4604      	mov	r4, r0
90004e70:	2104      	movs	r1, #4
90004e72:	f022 fbc0 	bl	900275f6 <_ZdlPvj>
90004e76:	4620      	mov	r0, r4
90004e78:	bd10      	pop	{r4, pc}
90004e7a:	bf00      	nop

90004e7c <_ZN23ApplicationFontProvider7getFontEt>:
#include <fonts/GeneratedFont.hpp>
#include <texts/TypedTextDatabase.hpp>

touchgfx::Font* ApplicationFontProvider::getFont(touchgfx::FontId typography)
{
    switch (typography)
90004e7c:	2901      	cmp	r1, #1
{
90004e7e:	b508      	push	{r3, lr}
    switch (typography)
90004e80:	d004      	beq.n	90004e8c <_ZN23ApplicationFontProvider7getFontEt+0x10>
90004e82:	2902      	cmp	r1, #2
90004e84:	d00a      	beq.n	90004e9c <_ZN23ApplicationFontProvider7getFontEt+0x20>
90004e86:	b129      	cbz	r1, 90004e94 <_ZN23ApplicationFontProvider7getFontEt+0x18>
90004e88:	2000      	movs	r0, #0
        // verdana_10_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
    default:
        return 0;
    }
}
90004e8a:	bd08      	pop	{r3, pc}
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[1]);
90004e8c:	f003 f9f2 	bl	90008274 <_ZN17TypedTextDatabase8getFontsEv>
90004e90:	6840      	ldr	r0, [r0, #4]
}
90004e92:	bd08      	pop	{r3, pc}
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
90004e94:	f003 f9ee 	bl	90008274 <_ZN17TypedTextDatabase8getFontsEv>
90004e98:	6800      	ldr	r0, [r0, #0]
}
90004e9a:	bd08      	pop	{r3, pc}
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
90004e9c:	f003 f9ea 	bl	90008274 <_ZN17TypedTextDatabase8getFontsEv>
90004ea0:	6880      	ldr	r0, [r0, #8]
}
90004ea2:	bd08      	pop	{r3, pc}

90004ea4 <_ZN14BitmapDatabase11getInstanceEv>:
namespace BitmapDatabase
{
const touchgfx::Bitmap::BitmapData* getInstance()
{
    return bitmap_database;
}
90004ea4:	4800      	ldr	r0, [pc, #0]	; (90004ea8 <_ZN14BitmapDatabase11getInstanceEv+0x4>)
90004ea6:	4770      	bx	lr
90004ea8:	9002a550 	.word	0x9002a550

90004eac <_ZN14BitmapDatabase15getInstanceSizeEv>:

uint16_t getInstanceSize()
{
    return (uint16_t)(sizeof(bitmap_database) / sizeof(touchgfx::Bitmap::BitmapData));
}
90004eac:	2008      	movs	r0, #8
90004eae:	4770      	bx	lr

90004eb0 <_ZNK8touchgfx4Font8getGlyphEt>:
     *
     * @see TextProvider::getNextLigature
     */
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
    {
        if (unicode == 0)
90004eb0:	b169      	cbz	r1, 90004ece <_ZNK8touchgfx4Font8getGlyphEt+0x1e>
        {
            return 0;
        }
        const uint8_t* dummyPixelDataPointer = 0;
        uint8_t bitsPerPixelDummy = 0;
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
90004eb2:	6802      	ldr	r2, [r0, #0]
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
90004eb4:	b530      	push	{r4, r5, lr}
90004eb6:	b083      	sub	sp, #12
        const uint8_t* dummyPixelDataPointer = 0;
90004eb8:	2400      	movs	r4, #0
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
90004eba:	6895      	ldr	r5, [r2, #8]
90004ebc:	f10d 0303 	add.w	r3, sp, #3
90004ec0:	aa01      	add	r2, sp, #4
        const uint8_t* dummyPixelDataPointer = 0;
90004ec2:	9401      	str	r4, [sp, #4]
        uint8_t bitsPerPixelDummy = 0;
90004ec4:	f88d 4003 	strb.w	r4, [sp, #3]
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
90004ec8:	47a8      	blx	r5
        return glyph;
    }
90004eca:	b003      	add	sp, #12
90004ecc:	bd30      	pop	{r4, r5, pc}
            return 0;
90004ece:	4608      	mov	r0, r1
    }
90004ed0:	4770      	bx	lr
90004ed2:	bf00      	nop

90004ed4 <_ZNK8touchgfx4Font15getFallbackCharEv>:
     * @return The default character for the typography in case no glyph is available.
     */
    virtual Unicode::UnicodeChar getFallbackChar() const
    {
        return fallbackCharacter;
    }
90004ed4:	89c0      	ldrh	r0, [r0, #14]
90004ed6:	4770      	bx	lr

90004ed8 <_ZNK8touchgfx4Font15getEllipsisCharEv>:
     * @see TextArea::setWideTextAction
     */
    virtual Unicode::UnicodeChar getEllipsisChar() const
    {
        return ellipsisCharacter;
    }
90004ed8:	8a00      	ldrh	r0, [r0, #16]
90004eda:	4770      	bx	lr

90004edc <_ZNK8touchgfx4Font11getBaselineEv>:
     *       getMinimumTextHeight for this.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getBaseline() const
    {
        return baselineHeight;
    }
90004edc:	88c0      	ldrh	r0, [r0, #6]
90004ede:	4770      	bx	lr

90004ee0 <_ZNK8touchgfx4Font9getHeightEv>:
     * @return The font height.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getHeight() const
    {
        return fontHeight;
    }
90004ee0:	8880      	ldrh	r0, [r0, #4]
90004ee2:	4770      	bx	lr

90004ee4 <_ZNK8touchgfx4Font15getBitsPerPixelEv>:
     *
     * @return The number of bits used per pixel in this font.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getBitsPerPixel() const
    {
        return bPerPixel;
90004ee4:	7a80      	ldrb	r0, [r0, #10]
    }
90004ee6:	f000 007f 	and.w	r0, r0, #127	; 0x7f
90004eea:	4770      	bx	lr

90004eec <_ZNK8touchgfx4Font15getByteAlignRowEv>:
     *
     * @return True if each glyph row is stored byte aligned, false otherwise.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getByteAlignRow() const
    {
        return bAlignRow;
90004eec:	7a80      	ldrb	r0, [r0, #10]
    }
90004eee:	09c0      	lsrs	r0, r0, #7
90004ef0:	4770      	bx	lr
90004ef2:	bf00      	nop

90004ef4 <_ZN8touchgfx9TypedTextD1Ev>:
    }
90004ef4:	4770      	bx	lr
90004ef6:	bf00      	nop

90004ef8 <_ZN8touchgfx9TypedTextD0Ev>:
    virtual ~TypedText()
90004ef8:	b510      	push	{r4, lr}
90004efa:	4604      	mov	r4, r0
    }
90004efc:	2108      	movs	r1, #8
90004efe:	f022 fb7a 	bl	900275f6 <_ZdlPvj>
90004f02:	4620      	mov	r0, r4
90004f04:	bd10      	pop	{r4, pc}
90004f06:	bf00      	nop

90004f08 <_ZN8touchgfx11Application15appSwitchScreenEh>:
     * @param screenId An id that maps to the desired screen.
     */
    virtual void appSwitchScreen(uint8_t screenId)
    {
        (void)screenId; // Unused variable
    }
90004f08:	4770      	bx	lr
90004f0a:	bf00      	nop

90004f0c <_ZN8touchgfx11Application13requestRedrawERNS_4RectE>:
     *
     * @param [in,out] rect The Rect that must be redrawn.
     */
    virtual void requestRedraw(Rect& rect)
    {
        redraw = rect;
90004f0c:	f500 7398 	add.w	r3, r0, #304	; 0x130
90004f10:	6808      	ldr	r0, [r1, #0]
90004f12:	6849      	ldr	r1, [r1, #4]
90004f14:	c303      	stmia	r3!, {r0, r1}
    }
90004f16:	4770      	bx	lr

90004f18 <_ZN8touchgfx9Container13getFirstChildEv>:
     * @see getNextSibling
     */
    virtual Drawable* getFirstChild()
    {
        return firstChild;
    }
90004f18:	6a80      	ldr	r0, [r0, #40]	; 0x28
90004f1a:	4770      	bx	lr

90004f1c <_ZN8touchgfx10Transition8tearDownEv>:
     * Tears down the Animation. Called before the destructor is called, when the
     * application changes the transition.
     */
    virtual void tearDown()
    {
    }
90004f1c:	4770      	bx	lr
90004f1e:	bf00      	nop

90004f20 <_ZN8touchgfx10Transition4initEv>:
     * Initializes the transition. Called after the constructor is called, when the
     * application changes the transition.
     */
    virtual void init()
    {
    }
90004f20:	4770      	bx	lr
90004f22:	bf00      	nop

90004f24 <_ZN8touchgfx10Transition18setScreenContainerERNS_9ContainerE>:
     *
     * @param [in] cont The Container the transition should have access to.
     */
    virtual void setScreenContainer(Container& cont)
    {
        screenContainer = &cont;
90004f24:	6041      	str	r1, [r0, #4]
    }
90004f26:	4770      	bx	lr

90004f28 <_ZN23FrontendApplicationBaseD1Ev>:

class FrontendApplicationBase : public touchgfx::MVPApplication
{
public:
    FrontendApplicationBase(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplicationBase() { }
90004f28:	4770      	bx	lr
90004f2a:	bf00      	nop

90004f2c <_ZN23FrontendApplicationBase19changeToStartScreenEv>:
 *
 * @note The member function to call must return void. The function can have zero, one, two or
 *       three arguments of any type.
 */
template <class dest_type>
struct Callback<dest_type, void, void, void> : public GenericCallback<>
90004f2c:	4905      	ldr	r1, [pc, #20]	; (90004f44 <_ZN23FrontendApplicationBase19changeToStartScreenEv+0x18>)
90004f2e:	2200      	movs	r2, #0
// Screen1

void FrontendApplicationBase::gotoScreen1ScreenNoTransition()
{
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoScreen1ScreenNoTransitionImpl);
    pendingScreenTransitionCallback = &transitionCallback;
90004f30:	f500 73a2 	add.w	r3, r0, #324	; 0x144
90004f34:	f8c0 2150 	str.w	r2, [r0, #336]	; 0x150
90004f38:	f8c0 3140 	str.w	r3, [r0, #320]	; 0x140
90004f3c:	e9c0 0152 	strd	r0, r1, [r0, #328]	; 0x148

    virtual void changeToStartScreen()
    {
        gotoScreen1ScreenNoTransition();
    }
90004f40:	4770      	bx	lr
90004f42:	bf00      	nop
90004f44:	90005229 	.word	0x90005229

90004f48 <_ZN8touchgfx12NoTransition15handleTickEventEv>:
{
public:
    /** Indicates that the transition is done after the first tick. */
    virtual void handleTickEvent()
    {
        done = true;
90004f48:	2301      	movs	r3, #1
90004f4a:	7203      	strb	r3, [r0, #8]
    }
90004f4c:	4770      	bx	lr
90004f4e:	bf00      	nop

90004f50 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EED1Ev>:
 * Screen transitioning to.
 *
 * @see Transition
 */
template <Direction templateDirection>
class SlideTransition : public Transition
90004f50:	4770      	bx	lr
90004f52:	bf00      	nop

90004f54 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EED1Ev>:
90004f54:	4770      	bx	lr
90004f56:	bf00      	nop

90004f58 <_ZN8touchgfx12NoTransitionD1Ev>:
class NoTransition : public Transition
90004f58:	4770      	bx	lr
90004f5a:	bf00      	nop

90004f5c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>:
90004f5c:	4770      	bx	lr
90004f5e:	bf00      	nop

90004f60 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv>:
     * Calls the member function. Do not call execute unless isValid() returns true (ie. a
     * pointer to the object and the function has been set).
     */
    virtual void execute()
    {
        (pobject->*pmemfun)();
90004f60:	68c2      	ldr	r2, [r0, #12]
    virtual void execute()
90004f62:	4603      	mov	r3, r0
        (pobject->*pmemfun)();
90004f64:	6841      	ldr	r1, [r0, #4]
90004f66:	ea4f 0c62 	mov.w	ip, r2, asr #1
90004f6a:	eb01 0062 	add.w	r0, r1, r2, asr #1
90004f6e:	07d2      	lsls	r2, r2, #31
90004f70:	d401      	bmi.n	90004f76 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x16>
90004f72:	689b      	ldr	r3, [r3, #8]
90004f74:	4718      	bx	r3
90004f76:	f851 200c 	ldr.w	r2, [r1, ip]
90004f7a:	689b      	ldr	r3, [r3, #8]
90004f7c:	58d3      	ldr	r3, [r2, r3]
90004f7e:	4718      	bx	r3

90004f80 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv>:
     *
     * @return true If the callback is valid (i.e. safe to call execute).
     */
    virtual bool isValid() const
    {
        return (pobject != 0) && (pmemfun != 0);
90004f80:	6843      	ldr	r3, [r0, #4]
90004f82:	b13b      	cbz	r3, 90004f94 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x14>
90004f84:	6883      	ldr	r3, [r0, #8]
90004f86:	b10b      	cbz	r3, 90004f8c <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0xc>
90004f88:	2001      	movs	r0, #1
    }
90004f8a:	4770      	bx	lr
        return (pobject != 0) && (pmemfun != 0);
90004f8c:	68c0      	ldr	r0, [r0, #12]
90004f8e:	f000 0001 	and.w	r0, r0, #1
90004f92:	4770      	bx	lr
90004f94:	4618      	mov	r0, r3
90004f96:	4770      	bx	lr

90004f98 <_ZN8touchgfx12NoTransitionD0Ev>:
90004f98:	b510      	push	{r4, lr}
90004f9a:	4604      	mov	r4, r0
90004f9c:	210c      	movs	r1, #12
90004f9e:	f022 fb2a 	bl	900275f6 <_ZdlPvj>
90004fa2:	4620      	mov	r0, r4
90004fa4:	bd10      	pop	{r4, pc}
90004fa6:	bf00      	nop

90004fa8 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED0Ev>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
90004fa8:	b510      	push	{r4, lr}
90004faa:	4604      	mov	r4, r0
90004fac:	2110      	movs	r1, #16
90004fae:	f022 fb22 	bl	900275f6 <_ZdlPvj>
90004fb2:	4620      	mov	r0, r4
90004fb4:	bd10      	pop	{r4, pc}
90004fb6:	bf00      	nop

90004fb8 <_ZN23FrontendApplicationBaseD0Ev>:
    virtual ~FrontendApplicationBase() { }
90004fb8:	b510      	push	{r4, lr}
90004fba:	4604      	mov	r4, r0
90004fbc:	f44f 71ae 	mov.w	r1, #348	; 0x15c
90004fc0:	f022 fb19 	bl	900275f6 <_ZdlPvj>
90004fc4:	4620      	mov	r0, r4
90004fc6:	bd10      	pop	{r4, pc}

90004fc8 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EED0Ev>:
90004fc8:	b510      	push	{r4, lr}
90004fca:	4604      	mov	r4, r0
90004fcc:	2140      	movs	r1, #64	; 0x40
90004fce:	f022 fb12 	bl	900275f6 <_ZdlPvj>
90004fd2:	4620      	mov	r0, r4
90004fd4:	bd10      	pop	{r4, pc}
90004fd6:	bf00      	nop

90004fd8 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EED0Ev>:
90004fd8:	b510      	push	{r4, lr}
90004fda:	4604      	mov	r4, r0
90004fdc:	2140      	movs	r1, #64	; 0x40
90004fde:	f022 fb0a 	bl	900275f6 <_ZdlPvj>
90004fe2:	4620      	mov	r0, r4
90004fe4:	bd10      	pop	{r4, pc}
90004fe6:	bf00      	nop

90004fe8 <_ZN8touchgfx10Transition10invalidateEv>:
    virtual void invalidate()
90004fe8:	b508      	push	{r3, lr}
        Application::getInstance()->invalidate();
90004fea:	f013 f887 	bl	900180fc <_ZN8touchgfx11Application11getInstanceEv>
    }
90004fee:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        Application::getInstance()->invalidate();
90004ff2:	f013 bd17 	b.w	90018a24 <_ZN8touchgfx11Application10invalidateEv>
90004ff6:	bf00      	nop

90004ff8 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE8tearDownEv>:
        screenContainer->invalidate();
    }

    virtual void tearDown()
    {
        if (HAL::USE_ANIMATION_STORAGE && screenContainer)
90004ff8:	4b05      	ldr	r3, [pc, #20]	; (90005010 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE8tearDownEv+0x18>)
90004ffa:	781b      	ldrb	r3, [r3, #0]
90004ffc:	b13b      	cbz	r3, 9000500e <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE8tearDownEv+0x16>
90004ffe:	6843      	ldr	r3, [r0, #4]
90005000:	b12b      	cbz	r3, 9000500e <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE8tearDownEv+0x16>
        {
            screenContainer->remove(snapshot);
90005002:	681a      	ldr	r2, [r3, #0]
90005004:	f100 010c 	add.w	r1, r0, #12
90005008:	4618      	mov	r0, r3
9000500a:	6e53      	ldr	r3, [r2, #100]	; 0x64
9000500c:	4718      	bx	r3
        }
    }
9000500e:	4770      	bx	lr
90005010:	240281eb 	.word	0x240281eb

90005014 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE8tearDownEv>:
        if (HAL::USE_ANIMATION_STORAGE && screenContainer)
90005014:	4b05      	ldr	r3, [pc, #20]	; (9000502c <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE8tearDownEv+0x18>)
90005016:	781b      	ldrb	r3, [r3, #0]
90005018:	b13b      	cbz	r3, 9000502a <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE8tearDownEv+0x16>
9000501a:	6843      	ldr	r3, [r0, #4]
9000501c:	b12b      	cbz	r3, 9000502a <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE8tearDownEv+0x16>
            screenContainer->remove(snapshot);
9000501e:	681a      	ldr	r2, [r3, #0]
90005020:	f100 010c 	add.w	r1, r0, #12
90005024:	4618      	mov	r0, r3
90005026:	6e53      	ldr	r3, [r2, #100]	; 0x64
90005028:	4718      	bx	r3
    }
9000502a:	4770      	bx	lr
9000502c:	240281eb 	.word	0x240281eb

90005030 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE15handleTickEventEv>:
    virtual void handleTickEvent()
90005030:	b570      	push	{r4, r5, r6, lr}
90005032:	4605      	mov	r5, r0
        animationCounter++;
90005034:	f890 0039 	ldrb.w	r0, [r0, #57]	; 0x39
90005038:	3001      	adds	r0, #1
        if (animationCounter > animationSteps)
9000503a:	f895 3038 	ldrb.w	r3, [r5, #56]	; 0x38
        animationCounter++;
9000503e:	b2c0      	uxtb	r0, r0
        if (animationCounter > animationSteps)
90005040:	4298      	cmp	r0, r3
        animationCounter++;
90005042:	f885 0039 	strb.w	r0, [r5, #57]	; 0x39
        if (animationCounter > animationSteps)
90005046:	d905      	bls.n	90005054 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE15handleTickEventEv+0x24>
            done = true;
90005048:	2201      	movs	r2, #1
            animationCounter = 0;
9000504a:	2300      	movs	r3, #0
            done = true;
9000504c:	722a      	strb	r2, [r5, #8]
            animationCounter = 0;
9000504e:	f885 3039 	strb.w	r3, [r5, #57]	; 0x39
    }
90005052:	bd70      	pop	{r4, r5, r6, pc}
        int16_t calculatedValue = EasingEquations::cubicEaseOut(animationCounter, 0, targetValue, animationSteps);
90005054:	f9b5 203a 	ldrsh.w	r2, [r5, #58]	; 0x3a
90005058:	2100      	movs	r1, #0
9000505a:	f014 fe03 	bl	90019c64 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst>
        if ((calculatedValue % 2) != 0)
9000505e:	f010 0201 	ands.w	r2, r0, #1
90005062:	b283      	uxth	r3, r0
90005064:	d006      	beq.n	90005074 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE15handleTickEventEv+0x44>
            calculatedValue += (calculatedValue > 0 ? 1 : -1);
90005066:	f64f 71ff 	movw	r1, #65535	; 0xffff
9000506a:	2800      	cmp	r0, #0
9000506c:	bfd8      	it	le
9000506e:	460a      	movle	r2, r1
90005070:	4413      	add	r3, r2
90005072:	b29b      	uxth	r3, r3
        Drawable* d = screenContainer->getFirstChild();
90005074:	6868      	ldr	r0, [r5, #4]
            relativeValue = calculatedValue - snapshot.getX();
90005076:	8a2c      	ldrh	r4, [r5, #16]
        Drawable* d = screenContainer->getFirstChild();
90005078:	6802      	ldr	r2, [r0, #0]
9000507a:	4912      	ldr	r1, [pc, #72]	; (900050c4 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE15handleTickEventEv+0x94>)
            relativeValue = calculatedValue - snapshot.getX();
9000507c:	1b1b      	subs	r3, r3, r4
        Drawable* d = screenContainer->getFirstChild();
9000507e:	69d2      	ldr	r2, [r2, #28]
            relativeValue = calculatedValue - snapshot.getX();
90005080:	87ab      	strh	r3, [r5, #60]	; 0x3c
90005082:	428a      	cmp	r2, r1
90005084:	d11b      	bne.n	900050be <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE15handleTickEventEv+0x8e>
        return firstChild;
90005086:	6a84      	ldr	r4, [r0, #40]	; 0x28
        while (d)
90005088:	b164      	cbz	r4, 900050a4 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE15handleTickEventEv+0x74>
9000508a:	8faa      	ldrh	r2, [r5, #60]	; 0x3c
9000508c:	4e0e      	ldr	r6, [pc, #56]	; (900050c8 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE15handleTickEventEv+0x98>)
                d->setX(d->getX() + relativeValue);
9000508e:	6823      	ldr	r3, [r4, #0]
90005090:	88a1      	ldrh	r1, [r4, #4]
90005092:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90005094:	4411      	add	r1, r2
90005096:	42b3      	cmp	r3, r6
90005098:	b209      	sxth	r1, r1
        rect.x = x;
9000509a:	d109      	bne.n	900050b0 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE15handleTickEventEv+0x80>
9000509c:	80a1      	strh	r1, [r4, #4]
        return nextSibling;
9000509e:	69a4      	ldr	r4, [r4, #24]
        while (d)
900050a0:	2c00      	cmp	r4, #0
900050a2:	d1f4      	bne.n	9000508e <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE15handleTickEventEv+0x5e>
        screenContainer->invalidate();
900050a4:	6868      	ldr	r0, [r5, #4]
900050a6:	6803      	ldr	r3, [r0, #0]
    }
900050a8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        screenContainer->invalidate();
900050ac:	695b      	ldr	r3, [r3, #20]
900050ae:	4718      	bx	r3
                d->setX(d->getX() + relativeValue);
900050b0:	4620      	mov	r0, r4
900050b2:	4798      	blx	r3
900050b4:	69a4      	ldr	r4, [r4, #24]
        while (d)
900050b6:	2c00      	cmp	r4, #0
900050b8:	d0f4      	beq.n	900050a4 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE15handleTickEventEv+0x74>
900050ba:	8faa      	ldrh	r2, [r5, #60]	; 0x3c
900050bc:	e7e7      	b.n	9000508e <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE15handleTickEventEv+0x5e>
        Drawable* d = screenContainer->getFirstChild();
900050be:	4790      	blx	r2
900050c0:	4604      	mov	r4, r0
900050c2:	e7e1      	b.n	90005088 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE15handleTickEventEv+0x58>
900050c4:	90004f19 	.word	0x90004f19
900050c8:	90002351 	.word	0x90002351

900050cc <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv>:
    virtual void handleTickEvent()
900050cc:	b570      	push	{r4, r5, r6, lr}
900050ce:	4605      	mov	r5, r0
        animationCounter++;
900050d0:	f890 0039 	ldrb.w	r0, [r0, #57]	; 0x39
900050d4:	3001      	adds	r0, #1
        if (animationCounter > animationSteps)
900050d6:	f895 3038 	ldrb.w	r3, [r5, #56]	; 0x38
        animationCounter++;
900050da:	b2c0      	uxtb	r0, r0
        if (animationCounter > animationSteps)
900050dc:	4298      	cmp	r0, r3
        animationCounter++;
900050de:	f885 0039 	strb.w	r0, [r5, #57]	; 0x39
        if (animationCounter > animationSteps)
900050e2:	d905      	bls.n	900050f0 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0x24>
            done = true;
900050e4:	2201      	movs	r2, #1
            animationCounter = 0;
900050e6:	2300      	movs	r3, #0
            done = true;
900050e8:	722a      	strb	r2, [r5, #8]
            animationCounter = 0;
900050ea:	f885 3039 	strb.w	r3, [r5, #57]	; 0x39
    }
900050ee:	bd70      	pop	{r4, r5, r6, pc}
        int16_t calculatedValue = EasingEquations::cubicEaseOut(animationCounter, 0, targetValue, animationSteps);
900050f0:	f9b5 203a 	ldrsh.w	r2, [r5, #58]	; 0x3a
900050f4:	2100      	movs	r1, #0
900050f6:	f014 fdb5 	bl	90019c64 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst>
        if ((calculatedValue % 2) != 0)
900050fa:	f010 0201 	ands.w	r2, r0, #1
900050fe:	b283      	uxth	r3, r0
90005100:	d006      	beq.n	90005110 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0x44>
            calculatedValue += (calculatedValue > 0 ? 1 : -1);
90005102:	f64f 71ff 	movw	r1, #65535	; 0xffff
90005106:	2800      	cmp	r0, #0
90005108:	bfd8      	it	le
9000510a:	460a      	movle	r2, r1
9000510c:	4413      	add	r3, r2
9000510e:	b29b      	uxth	r3, r3
        Drawable* d = screenContainer->getFirstChild();
90005110:	6868      	ldr	r0, [r5, #4]
            relativeValue = calculatedValue - snapshot.getX();
90005112:	8a2c      	ldrh	r4, [r5, #16]
        Drawable* d = screenContainer->getFirstChild();
90005114:	6802      	ldr	r2, [r0, #0]
90005116:	4912      	ldr	r1, [pc, #72]	; (90005160 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0x94>)
            relativeValue = calculatedValue - snapshot.getX();
90005118:	1b1b      	subs	r3, r3, r4
        Drawable* d = screenContainer->getFirstChild();
9000511a:	69d2      	ldr	r2, [r2, #28]
            relativeValue = calculatedValue - snapshot.getX();
9000511c:	87ab      	strh	r3, [r5, #60]	; 0x3c
9000511e:	428a      	cmp	r2, r1
90005120:	d11b      	bne.n	9000515a <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0x8e>
90005122:	6a84      	ldr	r4, [r0, #40]	; 0x28
        while (d)
90005124:	b164      	cbz	r4, 90005140 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0x74>
90005126:	8faa      	ldrh	r2, [r5, #60]	; 0x3c
90005128:	4e0e      	ldr	r6, [pc, #56]	; (90005164 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0x98>)
                d->setX(d->getX() + relativeValue);
9000512a:	6823      	ldr	r3, [r4, #0]
9000512c:	88a1      	ldrh	r1, [r4, #4]
9000512e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90005130:	4411      	add	r1, r2
90005132:	42b3      	cmp	r3, r6
90005134:	b209      	sxth	r1, r1
        rect.x = x;
90005136:	d109      	bne.n	9000514c <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0x80>
90005138:	80a1      	strh	r1, [r4, #4]
        return nextSibling;
9000513a:	69a4      	ldr	r4, [r4, #24]
        while (d)
9000513c:	2c00      	cmp	r4, #0
9000513e:	d1f4      	bne.n	9000512a <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0x5e>
        screenContainer->invalidate();
90005140:	6868      	ldr	r0, [r5, #4]
90005142:	6803      	ldr	r3, [r0, #0]
    }
90005144:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        screenContainer->invalidate();
90005148:	695b      	ldr	r3, [r3, #20]
9000514a:	4718      	bx	r3
                d->setX(d->getX() + relativeValue);
9000514c:	4620      	mov	r0, r4
9000514e:	4798      	blx	r3
90005150:	69a4      	ldr	r4, [r4, #24]
        while (d)
90005152:	2c00      	cmp	r4, #0
90005154:	d0f4      	beq.n	90005140 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0x74>
90005156:	8faa      	ldrh	r2, [r5, #60]	; 0x3c
90005158:	e7e7      	b.n	9000512a <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0x5e>
        Drawable* d = screenContainer->getFirstChild();
9000515a:	4790      	blx	r2
9000515c:	4604      	mov	r4, r0
9000515e:	e7e1      	b.n	90005124 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0x58>
90005160:	90004f19 	.word	0x90004f19
90005164:	90002351 	.word	0x90002351

90005168 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE4initEv>:

    virtual void init()
    {
        Transition::init();

        if (done)
90005168:	7a03      	ldrb	r3, [r0, #8]
9000516a:	bb2b      	cbnz	r3, 900051b8 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE4initEv+0x50>
9000516c:	4a14      	ldr	r2, [pc, #80]	; (900051c0 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE4initEv+0x58>)
    virtual void init()
9000516e:	b570      	push	{r4, r5, r6, lr}
90005170:	4605      	mov	r5, r0
        {
            return;
        }

        // Move snapshot and its children with delta value for X or Y
        Drawable* d = screenContainer->getFirstChild();
90005172:	6840      	ldr	r0, [r0, #4]
90005174:	6803      	ldr	r3, [r0, #0]
90005176:	69db      	ldr	r3, [r3, #28]
90005178:	4293      	cmp	r3, r2
9000517a:	d11e      	bne.n	900051ba <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE4initEv+0x52>
9000517c:	6a84      	ldr	r4, [r0, #40]	; 0x28
        while (d)
9000517e:	b164      	cbz	r4, 9000519a <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE4initEv+0x32>
90005180:	8f6a      	ldrh	r2, [r5, #58]	; 0x3a
90005182:	4e10      	ldr	r6, [pc, #64]	; (900051c4 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE4initEv+0x5c>)
        {
            switch (templateDirection)
            {
            case EAST:
            case WEST:
                d->setX(d->getX() - targetValue);
90005184:	6823      	ldr	r3, [r4, #0]
90005186:	88a1      	ldrh	r1, [r4, #4]
90005188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
9000518a:	1a89      	subs	r1, r1, r2
9000518c:	42b3      	cmp	r3, r6
9000518e:	b209      	sxth	r1, r1
        rect.x = x;
90005190:	d10b      	bne.n	900051aa <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE4initEv+0x42>
90005192:	80a1      	strh	r1, [r4, #4]
        return nextSibling;
90005194:	69a4      	ldr	r4, [r4, #24]
        while (d)
90005196:	2c00      	cmp	r4, #0
90005198:	d1f4      	bne.n	90005184 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE4initEv+0x1c>
            }

            d = d->getNextSibling();
        }

        screenContainer->add(snapshot);
9000519a:	6868      	ldr	r0, [r5, #4]
9000519c:	f105 010c 	add.w	r1, r5, #12
900051a0:	6803      	ldr	r3, [r0, #0]
    }
900051a2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        screenContainer->add(snapshot);
900051a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
900051a8:	4718      	bx	r3
                d->setX(d->getX() - targetValue);
900051aa:	4620      	mov	r0, r4
900051ac:	4798      	blx	r3
900051ae:	69a4      	ldr	r4, [r4, #24]
        while (d)
900051b0:	2c00      	cmp	r4, #0
900051b2:	d0f2      	beq.n	9000519a <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE4initEv+0x32>
900051b4:	8f6a      	ldrh	r2, [r5, #58]	; 0x3a
900051b6:	e7e5      	b.n	90005184 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE4initEv+0x1c>
900051b8:	4770      	bx	lr
        Drawable* d = screenContainer->getFirstChild();
900051ba:	4798      	blx	r3
900051bc:	4604      	mov	r4, r0
900051be:	e7de      	b.n	9000517e <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE4initEv+0x16>
900051c0:	90004f19 	.word	0x90004f19
900051c4:	90002351 	.word	0x90002351

900051c8 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE4initEv>:
        if (done)
900051c8:	7a03      	ldrb	r3, [r0, #8]
900051ca:	bb2b      	cbnz	r3, 90005218 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE4initEv+0x50>
900051cc:	4a14      	ldr	r2, [pc, #80]	; (90005220 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE4initEv+0x58>)
    virtual void init()
900051ce:	b570      	push	{r4, r5, r6, lr}
900051d0:	4605      	mov	r5, r0
        Drawable* d = screenContainer->getFirstChild();
900051d2:	6840      	ldr	r0, [r0, #4]
900051d4:	6803      	ldr	r3, [r0, #0]
900051d6:	69db      	ldr	r3, [r3, #28]
900051d8:	4293      	cmp	r3, r2
900051da:	d11e      	bne.n	9000521a <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE4initEv+0x52>
900051dc:	6a84      	ldr	r4, [r0, #40]	; 0x28
        while (d)
900051de:	b164      	cbz	r4, 900051fa <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE4initEv+0x32>
900051e0:	8f6a      	ldrh	r2, [r5, #58]	; 0x3a
900051e2:	4e10      	ldr	r6, [pc, #64]	; (90005224 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE4initEv+0x5c>)
                d->setX(d->getX() - targetValue);
900051e4:	6823      	ldr	r3, [r4, #0]
900051e6:	88a1      	ldrh	r1, [r4, #4]
900051e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
900051ea:	1a89      	subs	r1, r1, r2
900051ec:	42b3      	cmp	r3, r6
900051ee:	b209      	sxth	r1, r1
        rect.x = x;
900051f0:	d10b      	bne.n	9000520a <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE4initEv+0x42>
900051f2:	80a1      	strh	r1, [r4, #4]
        return nextSibling;
900051f4:	69a4      	ldr	r4, [r4, #24]
        while (d)
900051f6:	2c00      	cmp	r4, #0
900051f8:	d1f4      	bne.n	900051e4 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE4initEv+0x1c>
        screenContainer->add(snapshot);
900051fa:	6868      	ldr	r0, [r5, #4]
900051fc:	f105 010c 	add.w	r1, r5, #12
90005200:	6803      	ldr	r3, [r0, #0]
    }
90005202:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        screenContainer->add(snapshot);
90005206:	6e1b      	ldr	r3, [r3, #96]	; 0x60
90005208:	4718      	bx	r3
                d->setX(d->getX() - targetValue);
9000520a:	4620      	mov	r0, r4
9000520c:	4798      	blx	r3
9000520e:	69a4      	ldr	r4, [r4, #24]
        while (d)
90005210:	2c00      	cmp	r4, #0
90005212:	d0f2      	beq.n	900051fa <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE4initEv+0x32>
90005214:	8f6a      	ldrh	r2, [r5, #58]	; 0x3a
90005216:	e7e5      	b.n	900051e4 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE4initEv+0x1c>
90005218:	4770      	bx	lr
        Drawable* d = screenContainer->getFirstChild();
9000521a:	4798      	blx	r3
9000521c:	4604      	mov	r4, r0
9000521e:	e7de      	b.n	900051de <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE4initEv+0x16>
90005220:	90004f19 	.word	0x90004f19
90005224:	90002351 	.word	0x90002351

90005228 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv>:
}

void FrontendApplicationBase::gotoScreen1ScreenNoTransitionImpl()
{
90005228:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    touchgfx::makeTransition<Screen1View, Screen1Presenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
9000522c:	e9d0 4a55 	ldrd	r4, sl, [r0, #340]	; 0x154
{
90005230:	4607      	mov	r7, r0
90005232:	b081      	sub	sp, #4
 *         value as the old presenter due to memory reuse.
 */
template <class ScreenType, class PresenterType, class TransType, class ModelType>
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
{
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
90005234:	68a0      	ldr	r0, [r4, #8]
90005236:	6803      	ldr	r3, [r0, #0]
90005238:	6a1b      	ldr	r3, [r3, #32]
9000523a:	4798      	blx	r3
9000523c:	f5b0 7ff2 	cmp.w	r0, #484	; 0x1e4
90005240:	f0c0 809c 	bcc.w	9000537c <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x154>
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
90005244:	6860      	ldr	r0, [r4, #4]
90005246:	6803      	ldr	r3, [r0, #0]
90005248:	6a1b      	ldr	r3, [r3, #32]
9000524a:	4798      	blx	r3
9000524c:	280f      	cmp	r0, #15
9000524e:	f240 80a1 	bls.w	90005394 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x16c>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
90005252:	68e0      	ldr	r0, [r4, #12]
90005254:	6803      	ldr	r3, [r0, #0]
90005256:	6a1b      	ldr	r3, [r3, #32]
90005258:	4798      	blx	r3
9000525a:	280b      	cmp	r0, #11
9000525c:	f240 8094 	bls.w	90005388 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x160>
    if (*currentTrans)
90005260:	f8df 915c 	ldr.w	r9, [pc, #348]	; 900053c0 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x198>
    Application::getInstance()->clearAllTimerWidgets();
90005264:	f012 ff4a 	bl	900180fc <_ZN8touchgfx11Application11getInstanceEv>

    /** Clears all currently registered timer widgets. */

    void clearAllTimerWidgets()
    {
        timerWidgets.clear();
90005268:	3004      	adds	r0, #4
9000526a:	f012 ff85 	bl	90018178 <_ZN8touchgfx11Application12TimerWidgets5clearEv>
    if (*currentTrans)
9000526e:	f8d9 0000 	ldr.w	r0, [r9]
90005272:	b140      	cbz	r0, 90005286 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x5e>
        (*currentTrans)->tearDown();
90005274:	6803      	ldr	r3, [r0, #0]
90005276:	68db      	ldr	r3, [r3, #12]
90005278:	4798      	blx	r3
    if (*currentTrans)
9000527a:	f8d9 0000 	ldr.w	r0, [r9]
9000527e:	b110      	cbz	r0, 90005286 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x5e>
        (*currentTrans)->~Transition();
90005280:	6803      	ldr	r3, [r0, #0]
90005282:	681b      	ldr	r3, [r3, #0]
90005284:	4798      	blx	r3
    if (*currentScreen)
90005286:	f8df 813c 	ldr.w	r8, [pc, #316]	; 900053c4 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x19c>
9000528a:	f8d8 0000 	ldr.w	r0, [r8]
9000528e:	2800      	cmp	r0, #0
90005290:	d061      	beq.n	90005356 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x12e>
        (*currentScreen)->tearDownScreen();
90005292:	6803      	ldr	r3, [r0, #0]
90005294:	695b      	ldr	r3, [r3, #20]
90005296:	4798      	blx	r3
    if (*currentPresenter)
90005298:	f8d7 013c 	ldr.w	r0, [r7, #316]	; 0x13c
9000529c:	2800      	cmp	r0, #0
9000529e:	d055      	beq.n	9000534c <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x124>
        (*currentPresenter)->deactivate();
900052a0:	6803      	ldr	r3, [r0, #0]
900052a2:	685b      	ldr	r3, [r3, #4]
900052a4:	4798      	blx	r3
    if (*currentScreen)
900052a6:	f8d8 0000 	ldr.w	r0, [r8]
900052aa:	b110      	cbz	r0, 900052b2 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x8a>
        (*currentScreen)->~Screen();
900052ac:	6803      	ldr	r3, [r0, #0]
900052ae:	681b      	ldr	r3, [r3, #0]
900052b0:	4798      	blx	r3
    if (*currentPresenter)
900052b2:	f8d7 013c 	ldr.w	r0, [r7, #316]	; 0x13c
900052b6:	b110      	cbz	r0, 900052be <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x96>
        (*currentPresenter)->~Presenter();
900052b8:	6803      	ldr	r3, [r0, #0]
900052ba:	689b      	ldr	r3, [r3, #8]
900052bc:	4798      	blx	r3

    prepareTransition(currentScreen, currentPresenter, currentTrans);

    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
900052be:	68e0      	ldr	r0, [r4, #12]
     * @return A typed reference to the object at the specified index.
     */
    template <typename T>
    T& at(const uint16_t index)
    {
        return *static_cast<T*>(element(index));
900052c0:	2100      	movs	r1, #0
900052c2:	6803      	ldr	r3, [r0, #0]
        : screenContainer(0), done(false)
900052c4:	468b      	mov	fp, r1
900052c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
900052c8:	4798      	blx	r3
900052ca:	4b35      	ldr	r3, [pc, #212]	; (900053a0 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x178>)
900052cc:	4605      	mov	r5, r0
900052ce:	f8c0 b004 	str.w	fp, [r0, #4]
900052d2:	f880 b008 	strb.w	fp, [r0, #8]
900052d6:	4659      	mov	r1, fp
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
900052d8:	68a0      	ldr	r0, [r4, #8]
900052da:	602b      	str	r3, [r5, #0]
900052dc:	6803      	ldr	r3, [r0, #0]
900052de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
900052e0:	4798      	blx	r3
900052e2:	4606      	mov	r6, r0
900052e4:	f003 f8b8 	bl	90008458 <_ZN11Screen1ViewC1Ev>
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
900052e8:	6860      	ldr	r0, [r4, #4]
900052ea:	4659      	mov	r1, fp
900052ec:	6803      	ldr	r3, [r0, #0]
900052ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
900052f0:	4798      	blx	r3
900052f2:	4604      	mov	r4, r0
900052f4:	4631      	mov	r1, r6
900052f6:	f003 f883 	bl	90008400 <_ZN16Screen1PresenterC1ER11Screen1View>
    *currentTrans = newTransition;
900052fa:	f8c9 5000 	str.w	r5, [r9]
    *currentPresenter = newPresenter;
900052fe:	f8c7 413c 	str.w	r4, [r7, #316]	; 0x13c
    *currentScreen = newScreen;
90005302:	f8c8 6000 	str.w	r6, [r8]
    model->bind(newPresenter);
90005306:	b35c      	cbz	r4, 90005360 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x138>
90005308:	1d23      	adds	r3, r4, #4
public:
    Model();

    void bind(ModelListener* listener)
    {
        modelListener = listener;
9000530a:	f8ca 3000 	str.w	r3, [sl]
    newScreen->setupScreen();
9000530e:	4630      	mov	r0, r6
90005310:	6833      	ldr	r3, [r6, #0]
    
    virtual ~ModelListener() {}

    void bind(Model* m)
    {
        model = m;
90005312:	f8c4 a008 	str.w	sl, [r4, #8]
90005316:	68db      	ldr	r3, [r3, #12]
     *
     * @param [in] newPresenter The specific Presenter to be associated with the View.
     */
    void bind(T& newPresenter)
    {
        presenter = &newPresenter;
90005318:	63f4      	str	r4, [r6, #60]	; 0x3c
9000531a:	4798      	blx	r3
    newPresenter->activate();
9000531c:	6823      	ldr	r3, [r4, #0]
9000531e:	4620      	mov	r0, r4
90005320:	681b      	ldr	r3, [r3, #0]
90005322:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
90005324:	4629      	mov	r1, r5
90005326:	4630      	mov	r0, r6
90005328:	f014 fc96 	bl	90019c58 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
9000532c:	682b      	ldr	r3, [r5, #0]
9000532e:	491d      	ldr	r1, [pc, #116]	; (900053a4 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x17c>)
90005330:	691a      	ldr	r2, [r3, #16]
90005332:	428a      	cmp	r2, r1
90005334:	d116      	bne.n	90005364 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x13c>
    newTransition->invalidate();
90005336:	695b      	ldr	r3, [r3, #20]
90005338:	4a1b      	ldr	r2, [pc, #108]	; (900053a8 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x180>)
9000533a:	4293      	cmp	r3, r2
9000533c:	d119      	bne.n	90005372 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x14a>
        Application::getInstance()->invalidate();
9000533e:	f012 fedd 	bl	900180fc <_ZN8touchgfx11Application11getInstanceEv>
}
90005342:	b001      	add	sp, #4
90005344:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90005348:	f013 bb6c 	b.w	90018a24 <_ZN8touchgfx11Application10invalidateEv>
    if (*currentScreen)
9000534c:	f8d8 0000 	ldr.w	r0, [r8]
90005350:	2800      	cmp	r0, #0
90005352:	d1ab      	bne.n	900052ac <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x84>
90005354:	e7b3      	b.n	900052be <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x96>
    if (*currentPresenter)
90005356:	f8d7 013c 	ldr.w	r0, [r7, #316]	; 0x13c
9000535a:	2800      	cmp	r0, #0
9000535c:	d1a0      	bne.n	900052a0 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x78>
9000535e:	e7ae      	b.n	900052be <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x96>
    model->bind(newPresenter);
90005360:	4623      	mov	r3, r4
90005362:	e7d2      	b.n	9000530a <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0xe2>
    newTransition->init();
90005364:	4628      	mov	r0, r5
90005366:	4790      	blx	r2
    newTransition->invalidate();
90005368:	682b      	ldr	r3, [r5, #0]
9000536a:	4a0f      	ldr	r2, [pc, #60]	; (900053a8 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x180>)
9000536c:	695b      	ldr	r3, [r3, #20]
9000536e:	4293      	cmp	r3, r2
90005370:	d0e5      	beq.n	9000533e <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x116>
90005372:	4628      	mov	r0, r5
90005374:	b001      	add	sp, #4
90005376:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9000537a:	4718      	bx	r3
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
9000537c:	4b0b      	ldr	r3, [pc, #44]	; (900053ac <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x184>)
9000537e:	21a3      	movs	r1, #163	; 0xa3
90005380:	4a0b      	ldr	r2, [pc, #44]	; (900053b0 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x188>)
90005382:	480c      	ldr	r0, [pc, #48]	; (900053b4 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x18c>)
90005384:	f022 f966 	bl	90027654 <__assert_func>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
90005388:	4b0b      	ldr	r3, [pc, #44]	; (900053b8 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x190>)
9000538a:	21a5      	movs	r1, #165	; 0xa5
9000538c:	4a08      	ldr	r2, [pc, #32]	; (900053b0 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x188>)
9000538e:	4809      	ldr	r0, [pc, #36]	; (900053b4 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x18c>)
90005390:	f022 f960 	bl	90027654 <__assert_func>
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
90005394:	4b09      	ldr	r3, [pc, #36]	; (900053bc <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x194>)
90005396:	21a4      	movs	r1, #164	; 0xa4
90005398:	4a05      	ldr	r2, [pc, #20]	; (900053b0 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x188>)
9000539a:	4806      	ldr	r0, [pc, #24]	; (900053b4 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x18c>)
9000539c:	f022 f95a 	bl	90027654 <__assert_func>
900053a0:	9002abc0 	.word	0x9002abc0
900053a4:	90004f21 	.word	0x90004f21
900053a8:	90004fe9 	.word	0x90004fe9
900053ac:	9002a600 	.word	0x9002a600
900053b0:	9002a690 	.word	0x9002a690
900053b4:	9002a794 	.word	0x9002a794
900053b8:	9002a880 	.word	0x9002a880
900053bc:	9002a7dc 	.word	0x9002a7dc
900053c0:	24028234 	.word	0x24028234
900053c4:	24028230 	.word	0x24028230

900053c8 <_ZN23FrontendApplicationBase40gotoScreen1ScreenSlideTransitionWestImplEv>:
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoScreen1ScreenSlideTransitionWestImpl);
    pendingScreenTransitionCallback = &transitionCallback;
}

void FrontendApplicationBase::gotoScreen1ScreenSlideTransitionWestImpl()
{
900053c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    touchgfx::makeTransition<Screen1View, Screen1Presenter, touchgfx::SlideTransition<WEST>, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
900053cc:	e9d0 4b55 	ldrd	r4, fp, [r0, #340]	; 0x154
{
900053d0:	4680      	mov	r8, r0
900053d2:	b081      	sub	sp, #4
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
900053d4:	68a0      	ldr	r0, [r4, #8]
900053d6:	6803      	ldr	r3, [r0, #0]
900053d8:	6a1b      	ldr	r3, [r3, #32]
900053da:	4798      	blx	r3
900053dc:	f5b0 7ff2 	cmp.w	r0, #484	; 0x1e4
900053e0:	f0c0 80de 	bcc.w	900055a0 <_ZN23FrontendApplicationBase40gotoScreen1ScreenSlideTransitionWestImplEv+0x1d8>
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
900053e4:	6860      	ldr	r0, [r4, #4]
900053e6:	6803      	ldr	r3, [r0, #0]
900053e8:	6a1b      	ldr	r3, [r3, #32]
900053ea:	4798      	blx	r3
900053ec:	280f      	cmp	r0, #15
900053ee:	f240 80e3 	bls.w	900055b8 <_ZN23FrontendApplicationBase40gotoScreen1ScreenSlideTransitionWestImplEv+0x1f0>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
900053f2:	68e0      	ldr	r0, [r4, #12]
900053f4:	6803      	ldr	r3, [r0, #0]
900053f6:	6a1b      	ldr	r3, [r3, #32]
900053f8:	4798      	blx	r3
900053fa:	283f      	cmp	r0, #63	; 0x3f
900053fc:	f240 80d6 	bls.w	900055ac <_ZN23FrontendApplicationBase40gotoScreen1ScreenSlideTransitionWestImplEv+0x1e4>
    if (*currentTrans)
90005400:	f8df a1f4 	ldr.w	sl, [pc, #500]	; 900055f8 <_ZN23FrontendApplicationBase40gotoScreen1ScreenSlideTransitionWestImplEv+0x230>
    Application::getInstance()->clearAllTimerWidgets();
90005404:	f012 fe7a 	bl	900180fc <_ZN8touchgfx11Application11getInstanceEv>
90005408:	3004      	adds	r0, #4
9000540a:	f012 feb5 	bl	90018178 <_ZN8touchgfx11Application12TimerWidgets5clearEv>
    if (*currentTrans)
9000540e:	f8da 0000 	ldr.w	r0, [sl]
90005412:	b140      	cbz	r0, 90005426 <_ZN23FrontendApplicationBase40gotoScreen1ScreenSlideTransitionWestImplEv+0x5e>
        (*currentTrans)->tearDown();
90005414:	6803      	ldr	r3, [r0, #0]
90005416:	68db      	ldr	r3, [r3, #12]
90005418:	4798      	blx	r3
    if (*currentTrans)
9000541a:	f8da 0000 	ldr.w	r0, [sl]
9000541e:	b110      	cbz	r0, 90005426 <_ZN23FrontendApplicationBase40gotoScreen1ScreenSlideTransitionWestImplEv+0x5e>
        (*currentTrans)->~Transition();
90005420:	6803      	ldr	r3, [r0, #0]
90005422:	681b      	ldr	r3, [r3, #0]
90005424:	4798      	blx	r3
    if (*currentScreen)
90005426:	f8df 91d4 	ldr.w	r9, [pc, #468]	; 900055fc <_ZN23FrontendApplicationBase40gotoScreen1ScreenSlideTransitionWestImplEv+0x234>
9000542a:	f8d9 0000 	ldr.w	r0, [r9]
9000542e:	2800      	cmp	r0, #0
90005430:	f000 80a2 	beq.w	90005578 <_ZN23FrontendApplicationBase40gotoScreen1ScreenSlideTransitionWestImplEv+0x1b0>
        (*currentScreen)->tearDownScreen();
90005434:	6803      	ldr	r3, [r0, #0]
90005436:	695b      	ldr	r3, [r3, #20]
90005438:	4798      	blx	r3
    if (*currentPresenter)
9000543a:	f8d8 013c 	ldr.w	r0, [r8, #316]	; 0x13c
9000543e:	2800      	cmp	r0, #0
90005440:	d07f      	beq.n	90005542 <_ZN23FrontendApplicationBase40gotoScreen1ScreenSlideTransitionWestImplEv+0x17a>
        (*currentPresenter)->deactivate();
90005442:	6803      	ldr	r3, [r0, #0]
90005444:	685b      	ldr	r3, [r3, #4]
90005446:	4798      	blx	r3
    if (*currentScreen)
90005448:	f8d9 0000 	ldr.w	r0, [r9]
9000544c:	b110      	cbz	r0, 90005454 <_ZN23FrontendApplicationBase40gotoScreen1ScreenSlideTransitionWestImplEv+0x8c>
        (*currentScreen)->~Screen();
9000544e:	6803      	ldr	r3, [r0, #0]
90005450:	681b      	ldr	r3, [r3, #0]
90005452:	4798      	blx	r3
    if (*currentPresenter)
90005454:	f8d8 013c 	ldr.w	r0, [r8, #316]	; 0x13c
90005458:	b110      	cbz	r0, 90005460 <_ZN23FrontendApplicationBase40gotoScreen1ScreenSlideTransitionWestImplEv+0x98>
        (*currentPresenter)->~Presenter();
9000545a:	6803      	ldr	r3, [r0, #0]
9000545c:	689b      	ldr	r3, [r3, #8]
9000545e:	4798      	blx	r3
    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
90005460:	68e0      	ldr	r0, [r4, #12]
90005462:	2100      	movs	r1, #0
90005464:	6803      	ldr	r3, [r0, #0]
        : screenContainer(0), done(false)
90005466:	460f      	mov	r7, r1
90005468:	6a5b      	ldr	r3, [r3, #36]	; 0x24
9000546a:	4798      	blx	r3
          relativeValue(0)
9000546c:	4b55      	ldr	r3, [pc, #340]	; (900055c4 <_ZN23FrontendApplicationBase40gotoScreen1ScreenSlideTransitionWestImplEv+0x1fc>)
9000546e:	4606      	mov	r6, r0
90005470:	4605      	mov	r5, r0
90005472:	6047      	str	r7, [r0, #4]
90005474:	7207      	strb	r7, [r0, #8]
90005476:	f846 3b0c 	str.w	r3, [r6], #12
          snapshot(),
9000547a:	4630      	mov	r0, r6
9000547c:	f00f fd6a 	bl	90014f54 <_ZN8touchgfx14SnapshotWidgetC1Ev>
        if (!HAL::USE_ANIMATION_STORAGE)
90005480:	4b51      	ldr	r3, [pc, #324]	; (900055c8 <_ZN23FrontendApplicationBase40gotoScreen1ScreenSlideTransitionWestImplEv+0x200>)
          animationSteps(transitionSteps),
90005482:	2214      	movs	r2, #20
          relativeValue(0)
90005484:	87af      	strh	r7, [r5, #60]	; 0x3c
        if (!HAL::USE_ANIMATION_STORAGE)
90005486:	781b      	ldrb	r3, [r3, #0]
          animationSteps(transitionSteps),
90005488:	872a      	strh	r2, [r5, #56]	; 0x38
        if (!HAL::USE_ANIMATION_STORAGE)
9000548a:	2b00      	cmp	r3, #0
9000548c:	d165      	bne.n	9000555a <_ZN23FrontendApplicationBase40gotoScreen1ScreenSlideTransitionWestImplEv+0x192>
            done = true;
9000548e:	2301      	movs	r3, #1
90005490:	722b      	strb	r3, [r5, #8]
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
90005492:	68a0      	ldr	r0, [r4, #8]
90005494:	2100      	movs	r1, #0
90005496:	6803      	ldr	r3, [r0, #0]
90005498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
9000549a:	4798      	blx	r3
9000549c:	4607      	mov	r7, r0
9000549e:	f002 ffdb 	bl	90008458 <_ZN11Screen1ViewC1Ev>
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
900054a2:	6860      	ldr	r0, [r4, #4]
900054a4:	2100      	movs	r1, #0
900054a6:	6803      	ldr	r3, [r0, #0]
900054a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
900054aa:	4798      	blx	r3
900054ac:	4604      	mov	r4, r0
900054ae:	4639      	mov	r1, r7
900054b0:	f002 ffa6 	bl	90008400 <_ZN16Screen1PresenterC1ER11Screen1View>
    *currentTrans = newTransition;
900054b4:	f8ca 5000 	str.w	r5, [sl]
    *currentPresenter = newPresenter;
900054b8:	f8c8 413c 	str.w	r4, [r8, #316]	; 0x13c
    *currentScreen = newScreen;
900054bc:	f8c9 7000 	str.w	r7, [r9]
    model->bind(newPresenter);
900054c0:	2c00      	cmp	r4, #0
900054c2:	d05f      	beq.n	90005584 <_ZN23FrontendApplicationBase40gotoScreen1ScreenSlideTransitionWestImplEv+0x1bc>
900054c4:	1d23      	adds	r3, r4, #4
900054c6:	f8cb 3000 	str.w	r3, [fp]
    newScreen->setupScreen();
900054ca:	4638      	mov	r0, r7
900054cc:	683b      	ldr	r3, [r7, #0]
900054ce:	f8c4 b008 	str.w	fp, [r4, #8]
900054d2:	68db      	ldr	r3, [r3, #12]
900054d4:	63fc      	str	r4, [r7, #60]	; 0x3c
900054d6:	4798      	blx	r3
    newPresenter->activate();
900054d8:	6823      	ldr	r3, [r4, #0]
900054da:	4620      	mov	r0, r4
900054dc:	681b      	ldr	r3, [r3, #0]
900054de:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
900054e0:	4629      	mov	r1, r5
900054e2:	4638      	mov	r0, r7
900054e4:	f014 fbb8 	bl	90019c58 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
900054e8:	682b      	ldr	r3, [r5, #0]
900054ea:	4938      	ldr	r1, [pc, #224]	; (900055cc <_ZN23FrontendApplicationBase40gotoScreen1ScreenSlideTransitionWestImplEv+0x204>)
900054ec:	691a      	ldr	r2, [r3, #16]
900054ee:	428a      	cmp	r2, r1
900054f0:	d152      	bne.n	90005598 <_ZN23FrontendApplicationBase40gotoScreen1ScreenSlideTransitionWestImplEv+0x1d0>
        if (done)
900054f2:	7a2a      	ldrb	r2, [r5, #8]
900054f4:	b9d2      	cbnz	r2, 9000552c <_ZN23FrontendApplicationBase40gotoScreen1ScreenSlideTransitionWestImplEv+0x164>
        Drawable* d = screenContainer->getFirstChild();
900054f6:	6868      	ldr	r0, [r5, #4]
900054f8:	4a35      	ldr	r2, [pc, #212]	; (900055d0 <_ZN23FrontendApplicationBase40gotoScreen1ScreenSlideTransitionWestImplEv+0x208>)
900054fa:	6803      	ldr	r3, [r0, #0]
900054fc:	69db      	ldr	r3, [r3, #28]
900054fe:	4293      	cmp	r3, r2
90005500:	d142      	bne.n	90005588 <_ZN23FrontendApplicationBase40gotoScreen1ScreenSlideTransitionWestImplEv+0x1c0>
90005502:	6a84      	ldr	r4, [r0, #40]	; 0x28
        while (d)
90005504:	b164      	cbz	r4, 90005520 <_ZN23FrontendApplicationBase40gotoScreen1ScreenSlideTransitionWestImplEv+0x158>
90005506:	8f6a      	ldrh	r2, [r5, #58]	; 0x3a
90005508:	4f32      	ldr	r7, [pc, #200]	; (900055d4 <_ZN23FrontendApplicationBase40gotoScreen1ScreenSlideTransitionWestImplEv+0x20c>)
                d->setX(d->getX() - targetValue);
9000550a:	6823      	ldr	r3, [r4, #0]
9000550c:	88a1      	ldrh	r1, [r4, #4]
9000550e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90005510:	1a89      	subs	r1, r1, r2
90005512:	42bb      	cmp	r3, r7
90005514:	b209      	sxth	r1, r1
90005516:	d119      	bne.n	9000554c <_ZN23FrontendApplicationBase40gotoScreen1ScreenSlideTransitionWestImplEv+0x184>
        rect.x = x;
90005518:	80a1      	strh	r1, [r4, #4]
        return nextSibling;
9000551a:	69a4      	ldr	r4, [r4, #24]
        while (d)
9000551c:	2c00      	cmp	r4, #0
9000551e:	d1f4      	bne.n	9000550a <_ZN23FrontendApplicationBase40gotoScreen1ScreenSlideTransitionWestImplEv+0x142>
        screenContainer->add(snapshot);
90005520:	6868      	ldr	r0, [r5, #4]
90005522:	4631      	mov	r1, r6
90005524:	6803      	ldr	r3, [r0, #0]
90005526:	6e1b      	ldr	r3, [r3, #96]	; 0x60
90005528:	4798      	blx	r3
    newTransition->invalidate();
9000552a:	682b      	ldr	r3, [r5, #0]
9000552c:	695b      	ldr	r3, [r3, #20]
9000552e:	4a2a      	ldr	r2, [pc, #168]	; (900055d8 <_ZN23FrontendApplicationBase40gotoScreen1ScreenSlideTransitionWestImplEv+0x210>)
90005530:	4293      	cmp	r3, r2
90005532:	d12c      	bne.n	9000558e <_ZN23FrontendApplicationBase40gotoScreen1ScreenSlideTransitionWestImplEv+0x1c6>
        Application::getInstance()->invalidate();
90005534:	f012 fde2 	bl	900180fc <_ZN8touchgfx11Application11getInstanceEv>
}
90005538:	b001      	add	sp, #4
9000553a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9000553e:	f013 ba71 	b.w	90018a24 <_ZN8touchgfx11Application10invalidateEv>
    if (*currentScreen)
90005542:	f8d9 0000 	ldr.w	r0, [r9]
90005546:	2800      	cmp	r0, #0
90005548:	d181      	bne.n	9000544e <_ZN23FrontendApplicationBase40gotoScreen1ScreenSlideTransitionWestImplEv+0x86>
9000554a:	e789      	b.n	90005460 <_ZN23FrontendApplicationBase40gotoScreen1ScreenSlideTransitionWestImplEv+0x98>
                d->setX(d->getX() - targetValue);
9000554c:	4620      	mov	r0, r4
9000554e:	4798      	blx	r3
90005550:	69a4      	ldr	r4, [r4, #24]
        while (d)
90005552:	2c00      	cmp	r4, #0
90005554:	d0e4      	beq.n	90005520 <_ZN23FrontendApplicationBase40gotoScreen1ScreenSlideTransitionWestImplEv+0x158>
90005556:	8f6a      	ldrh	r2, [r5, #58]	; 0x3a
90005558:	e7d7      	b.n	9000550a <_ZN23FrontendApplicationBase40gotoScreen1ScreenSlideTransitionWestImplEv+0x142>
        snapshot.setPosition(0, 0, HAL::DISPLAY_WIDTH, HAL::DISPLAY_HEIGHT);
9000555a:	4b20      	ldr	r3, [pc, #128]	; (900055dc <_ZN23FrontendApplicationBase40gotoScreen1ScreenSlideTransitionWestImplEv+0x214>)
        snapshot.makeSnapshot();
9000555c:	4630      	mov	r0, r6
        rect.x = x;
9000555e:	612f      	str	r7, [r5, #16]
        snapshot.setPosition(0, 0, HAL::DISPLAY_WIDTH, HAL::DISPLAY_HEIGHT);
90005560:	f9b3 3000 	ldrsh.w	r3, [r3]
90005564:	4f1e      	ldr	r7, [pc, #120]	; (900055e0 <_ZN23FrontendApplicationBase40gotoScreen1ScreenSlideTransitionWestImplEv+0x218>)
        rect.height = height;
90005566:	82eb      	strh	r3, [r5, #22]
90005568:	f9b7 3000 	ldrsh.w	r3, [r7]
        rect.width = width;
9000556c:	82ab      	strh	r3, [r5, #20]
        snapshot.makeSnapshot();
9000556e:	f00f fc6d 	bl	90014e4c <_ZN8touchgfx14SnapshotWidget12makeSnapshotEv>
            targetValue = HAL::DISPLAY_WIDTH;
90005572:	883b      	ldrh	r3, [r7, #0]
90005574:	876b      	strh	r3, [r5, #58]	; 0x3a
            break;
90005576:	e78c      	b.n	90005492 <_ZN23FrontendApplicationBase40gotoScreen1ScreenSlideTransitionWestImplEv+0xca>
    if (*currentPresenter)
90005578:	f8d8 013c 	ldr.w	r0, [r8, #316]	; 0x13c
9000557c:	2800      	cmp	r0, #0
9000557e:	f47f af60 	bne.w	90005442 <_ZN23FrontendApplicationBase40gotoScreen1ScreenSlideTransitionWestImplEv+0x7a>
90005582:	e76d      	b.n	90005460 <_ZN23FrontendApplicationBase40gotoScreen1ScreenSlideTransitionWestImplEv+0x98>
    model->bind(newPresenter);
90005584:	4623      	mov	r3, r4
90005586:	e79e      	b.n	900054c6 <_ZN23FrontendApplicationBase40gotoScreen1ScreenSlideTransitionWestImplEv+0xfe>
        Drawable* d = screenContainer->getFirstChild();
90005588:	4798      	blx	r3
9000558a:	4604      	mov	r4, r0
9000558c:	e7ba      	b.n	90005504 <_ZN23FrontendApplicationBase40gotoScreen1ScreenSlideTransitionWestImplEv+0x13c>
    newTransition->invalidate();
9000558e:	4628      	mov	r0, r5
90005590:	b001      	add	sp, #4
90005592:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90005596:	4718      	bx	r3
    newTransition->init();
90005598:	4628      	mov	r0, r5
9000559a:	4790      	blx	r2
    newTransition->invalidate();
9000559c:	682b      	ldr	r3, [r5, #0]
9000559e:	e7c5      	b.n	9000552c <_ZN23FrontendApplicationBase40gotoScreen1ScreenSlideTransitionWestImplEv+0x164>
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
900055a0:	4b10      	ldr	r3, [pc, #64]	; (900055e4 <_ZN23FrontendApplicationBase40gotoScreen1ScreenSlideTransitionWestImplEv+0x21c>)
900055a2:	21a3      	movs	r1, #163	; 0xa3
900055a4:	4a10      	ldr	r2, [pc, #64]	; (900055e8 <_ZN23FrontendApplicationBase40gotoScreen1ScreenSlideTransitionWestImplEv+0x220>)
900055a6:	4811      	ldr	r0, [pc, #68]	; (900055ec <_ZN23FrontendApplicationBase40gotoScreen1ScreenSlideTransitionWestImplEv+0x224>)
900055a8:	f022 f854 	bl	90027654 <__assert_func>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
900055ac:	4b10      	ldr	r3, [pc, #64]	; (900055f0 <_ZN23FrontendApplicationBase40gotoScreen1ScreenSlideTransitionWestImplEv+0x228>)
900055ae:	21a5      	movs	r1, #165	; 0xa5
900055b0:	4a0d      	ldr	r2, [pc, #52]	; (900055e8 <_ZN23FrontendApplicationBase40gotoScreen1ScreenSlideTransitionWestImplEv+0x220>)
900055b2:	480e      	ldr	r0, [pc, #56]	; (900055ec <_ZN23FrontendApplicationBase40gotoScreen1ScreenSlideTransitionWestImplEv+0x224>)
900055b4:	f022 f84e 	bl	90027654 <__assert_func>
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
900055b8:	4b0e      	ldr	r3, [pc, #56]	; (900055f4 <_ZN23FrontendApplicationBase40gotoScreen1ScreenSlideTransitionWestImplEv+0x22c>)
900055ba:	21a4      	movs	r1, #164	; 0xa4
900055bc:	4a0a      	ldr	r2, [pc, #40]	; (900055e8 <_ZN23FrontendApplicationBase40gotoScreen1ScreenSlideTransitionWestImplEv+0x220>)
900055be:	480b      	ldr	r0, [pc, #44]	; (900055ec <_ZN23FrontendApplicationBase40gotoScreen1ScreenSlideTransitionWestImplEv+0x224>)
900055c0:	f022 f848 	bl	90027654 <__assert_func>
900055c4:	9002ac08 	.word	0x9002ac08
900055c8:	240281eb 	.word	0x240281eb
900055cc:	90005169 	.word	0x90005169
900055d0:	90004f19 	.word	0x90004f19
900055d4:	90002351 	.word	0x90002351
900055d8:	90004fe9 	.word	0x90004fe9
900055dc:	240281e2 	.word	0x240281e2
900055e0:	240281e0 	.word	0x240281e0
900055e4:	9002a600 	.word	0x9002a600
900055e8:	9002a924 	.word	0x9002a924
900055ec:	9002a794 	.word	0x9002a794
900055f0:	9002a880 	.word	0x9002a880
900055f4:	9002a7dc 	.word	0x9002a7dc
900055f8:	24028234 	.word	0x24028234
900055fc:	24028230 	.word	0x24028230

90005600 <_ZN23FrontendApplicationBase40gotoScreen2ScreenSlideTransitionEastImplEv>:
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoScreen2ScreenSlideTransitionEastImpl);
    pendingScreenTransitionCallback = &transitionCallback;
}

void FrontendApplicationBase::gotoScreen2ScreenSlideTransitionEastImpl()
{
90005600:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    touchgfx::makeTransition<Screen2View, Screen2Presenter, touchgfx::SlideTransition<EAST>, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
90005604:	e9d0 4b55 	ldrd	r4, fp, [r0, #340]	; 0x154
{
90005608:	4680      	mov	r8, r0
9000560a:	b081      	sub	sp, #4
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
9000560c:	68a0      	ldr	r0, [r4, #8]
9000560e:	6803      	ldr	r3, [r0, #0]
90005610:	6a1b      	ldr	r3, [r3, #32]
90005612:	4798      	blx	r3
90005614:	f242 034b 	movw	r3, #8267	; 0x204b
90005618:	4298      	cmp	r0, r3
9000561a:	f240 80df 	bls.w	900057dc <_ZN23FrontendApplicationBase40gotoScreen2ScreenSlideTransitionEastImplEv+0x1dc>
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
9000561e:	6860      	ldr	r0, [r4, #4]
90005620:	6803      	ldr	r3, [r0, #0]
90005622:	6a1b      	ldr	r3, [r3, #32]
90005624:	4798      	blx	r3
90005626:	280f      	cmp	r0, #15
90005628:	f240 80e4 	bls.w	900057f4 <_ZN23FrontendApplicationBase40gotoScreen2ScreenSlideTransitionEastImplEv+0x1f4>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
9000562c:	68e0      	ldr	r0, [r4, #12]
9000562e:	6803      	ldr	r3, [r0, #0]
90005630:	6a1b      	ldr	r3, [r3, #32]
90005632:	4798      	blx	r3
90005634:	283f      	cmp	r0, #63	; 0x3f
90005636:	f240 80d7 	bls.w	900057e8 <_ZN23FrontendApplicationBase40gotoScreen2ScreenSlideTransitionEastImplEv+0x1e8>
    if (*currentTrans)
9000563a:	f8df a1f8 	ldr.w	sl, [pc, #504]	; 90005834 <_ZN23FrontendApplicationBase40gotoScreen2ScreenSlideTransitionEastImplEv+0x234>
    Application::getInstance()->clearAllTimerWidgets();
9000563e:	f012 fd5d 	bl	900180fc <_ZN8touchgfx11Application11getInstanceEv>
90005642:	3004      	adds	r0, #4
90005644:	f012 fd98 	bl	90018178 <_ZN8touchgfx11Application12TimerWidgets5clearEv>
    if (*currentTrans)
90005648:	f8da 0000 	ldr.w	r0, [sl]
9000564c:	b140      	cbz	r0, 90005660 <_ZN23FrontendApplicationBase40gotoScreen2ScreenSlideTransitionEastImplEv+0x60>
        (*currentTrans)->tearDown();
9000564e:	6803      	ldr	r3, [r0, #0]
90005650:	68db      	ldr	r3, [r3, #12]
90005652:	4798      	blx	r3
    if (*currentTrans)
90005654:	f8da 0000 	ldr.w	r0, [sl]
90005658:	b110      	cbz	r0, 90005660 <_ZN23FrontendApplicationBase40gotoScreen2ScreenSlideTransitionEastImplEv+0x60>
        (*currentTrans)->~Transition();
9000565a:	6803      	ldr	r3, [r0, #0]
9000565c:	681b      	ldr	r3, [r3, #0]
9000565e:	4798      	blx	r3
    if (*currentScreen)
90005660:	f8df 91d4 	ldr.w	r9, [pc, #468]	; 90005838 <_ZN23FrontendApplicationBase40gotoScreen2ScreenSlideTransitionEastImplEv+0x238>
90005664:	f8d9 0000 	ldr.w	r0, [r9]
90005668:	2800      	cmp	r0, #0
9000566a:	f000 80a3 	beq.w	900057b4 <_ZN23FrontendApplicationBase40gotoScreen2ScreenSlideTransitionEastImplEv+0x1b4>
        (*currentScreen)->tearDownScreen();
9000566e:	6803      	ldr	r3, [r0, #0]
90005670:	695b      	ldr	r3, [r3, #20]
90005672:	4798      	blx	r3
    if (*currentPresenter)
90005674:	f8d8 013c 	ldr.w	r0, [r8, #316]	; 0x13c
90005678:	2800      	cmp	r0, #0
9000567a:	d07f      	beq.n	9000577c <_ZN23FrontendApplicationBase40gotoScreen2ScreenSlideTransitionEastImplEv+0x17c>
        (*currentPresenter)->deactivate();
9000567c:	6803      	ldr	r3, [r0, #0]
9000567e:	685b      	ldr	r3, [r3, #4]
90005680:	4798      	blx	r3
    if (*currentScreen)
90005682:	f8d9 0000 	ldr.w	r0, [r9]
90005686:	b110      	cbz	r0, 9000568e <_ZN23FrontendApplicationBase40gotoScreen2ScreenSlideTransitionEastImplEv+0x8e>
        (*currentScreen)->~Screen();
90005688:	6803      	ldr	r3, [r0, #0]
9000568a:	681b      	ldr	r3, [r3, #0]
9000568c:	4798      	blx	r3
    if (*currentPresenter)
9000568e:	f8d8 013c 	ldr.w	r0, [r8, #316]	; 0x13c
90005692:	b110      	cbz	r0, 9000569a <_ZN23FrontendApplicationBase40gotoScreen2ScreenSlideTransitionEastImplEv+0x9a>
        (*currentPresenter)->~Presenter();
90005694:	6803      	ldr	r3, [r0, #0]
90005696:	689b      	ldr	r3, [r3, #8]
90005698:	4798      	blx	r3
    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
9000569a:	68e0      	ldr	r0, [r4, #12]
9000569c:	2100      	movs	r1, #0
9000569e:	6803      	ldr	r3, [r0, #0]
        : screenContainer(0), done(false)
900056a0:	460f      	mov	r7, r1
900056a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
900056a4:	4798      	blx	r3
          relativeValue(0)
900056a6:	4b56      	ldr	r3, [pc, #344]	; (90005800 <_ZN23FrontendApplicationBase40gotoScreen2ScreenSlideTransitionEastImplEv+0x200>)
900056a8:	4606      	mov	r6, r0
900056aa:	4605      	mov	r5, r0
900056ac:	6047      	str	r7, [r0, #4]
900056ae:	7207      	strb	r7, [r0, #8]
900056b0:	f846 3b0c 	str.w	r3, [r6], #12
          snapshot(),
900056b4:	4630      	mov	r0, r6
900056b6:	f00f fc4d 	bl	90014f54 <_ZN8touchgfx14SnapshotWidgetC1Ev>
        if (!HAL::USE_ANIMATION_STORAGE)
900056ba:	4b52      	ldr	r3, [pc, #328]	; (90005804 <_ZN23FrontendApplicationBase40gotoScreen2ScreenSlideTransitionEastImplEv+0x204>)
          animationSteps(transitionSteps),
900056bc:	2214      	movs	r2, #20
          relativeValue(0)
900056be:	87af      	strh	r7, [r5, #60]	; 0x3c
        if (!HAL::USE_ANIMATION_STORAGE)
900056c0:	781b      	ldrb	r3, [r3, #0]
          animationSteps(transitionSteps),
900056c2:	872a      	strh	r2, [r5, #56]	; 0x38
        if (!HAL::USE_ANIMATION_STORAGE)
900056c4:	2b00      	cmp	r3, #0
900056c6:	d165      	bne.n	90005794 <_ZN23FrontendApplicationBase40gotoScreen2ScreenSlideTransitionEastImplEv+0x194>
            done = true;
900056c8:	2301      	movs	r3, #1
900056ca:	722b      	strb	r3, [r5, #8]
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
900056cc:	68a0      	ldr	r0, [r4, #8]
900056ce:	2100      	movs	r1, #0
900056d0:	6803      	ldr	r3, [r0, #0]
900056d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
900056d4:	4798      	blx	r3
900056d6:	4607      	mov	r7, r0
900056d8:	f002 ff5c 	bl	90008594 <_ZN11Screen2ViewC1Ev>
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
900056dc:	6860      	ldr	r0, [r4, #4]
900056de:	2100      	movs	r1, #0
900056e0:	6803      	ldr	r3, [r0, #0]
900056e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
900056e4:	4798      	blx	r3
900056e6:	4604      	mov	r4, r0
900056e8:	4639      	mov	r1, r7
900056ea:	f002 ff27 	bl	9000853c <_ZN16Screen2PresenterC1ER11Screen2View>
    *currentTrans = newTransition;
900056ee:	f8ca 5000 	str.w	r5, [sl]
    *currentPresenter = newPresenter;
900056f2:	f8c8 413c 	str.w	r4, [r8, #316]	; 0x13c
    *currentScreen = newScreen;
900056f6:	f8c9 7000 	str.w	r7, [r9]
    model->bind(newPresenter);
900056fa:	2c00      	cmp	r4, #0
900056fc:	d060      	beq.n	900057c0 <_ZN23FrontendApplicationBase40gotoScreen2ScreenSlideTransitionEastImplEv+0x1c0>
900056fe:	1d23      	adds	r3, r4, #4
90005700:	f8cb 3000 	str.w	r3, [fp]
    newScreen->setupScreen();
90005704:	4638      	mov	r0, r7
90005706:	683b      	ldr	r3, [r7, #0]
90005708:	f8c4 b008 	str.w	fp, [r4, #8]
9000570c:	68db      	ldr	r3, [r3, #12]
9000570e:	63fc      	str	r4, [r7, #60]	; 0x3c
90005710:	4798      	blx	r3
    newPresenter->activate();
90005712:	6823      	ldr	r3, [r4, #0]
90005714:	4620      	mov	r0, r4
90005716:	681b      	ldr	r3, [r3, #0]
90005718:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
9000571a:	4629      	mov	r1, r5
9000571c:	4638      	mov	r0, r7
9000571e:	f014 fa9b 	bl	90019c58 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
90005722:	682b      	ldr	r3, [r5, #0]
90005724:	4938      	ldr	r1, [pc, #224]	; (90005808 <_ZN23FrontendApplicationBase40gotoScreen2ScreenSlideTransitionEastImplEv+0x208>)
90005726:	691a      	ldr	r2, [r3, #16]
90005728:	428a      	cmp	r2, r1
9000572a:	d153      	bne.n	900057d4 <_ZN23FrontendApplicationBase40gotoScreen2ScreenSlideTransitionEastImplEv+0x1d4>
        if (done)
9000572c:	7a2a      	ldrb	r2, [r5, #8]
9000572e:	b9d2      	cbnz	r2, 90005766 <_ZN23FrontendApplicationBase40gotoScreen2ScreenSlideTransitionEastImplEv+0x166>
        Drawable* d = screenContainer->getFirstChild();
90005730:	6868      	ldr	r0, [r5, #4]
90005732:	4a36      	ldr	r2, [pc, #216]	; (9000580c <_ZN23FrontendApplicationBase40gotoScreen2ScreenSlideTransitionEastImplEv+0x20c>)
90005734:	6803      	ldr	r3, [r0, #0]
90005736:	69db      	ldr	r3, [r3, #28]
90005738:	4293      	cmp	r3, r2
9000573a:	d143      	bne.n	900057c4 <_ZN23FrontendApplicationBase40gotoScreen2ScreenSlideTransitionEastImplEv+0x1c4>
9000573c:	6a84      	ldr	r4, [r0, #40]	; 0x28
        while (d)
9000573e:	b164      	cbz	r4, 9000575a <_ZN23FrontendApplicationBase40gotoScreen2ScreenSlideTransitionEastImplEv+0x15a>
90005740:	8f6a      	ldrh	r2, [r5, #58]	; 0x3a
90005742:	4f33      	ldr	r7, [pc, #204]	; (90005810 <_ZN23FrontendApplicationBase40gotoScreen2ScreenSlideTransitionEastImplEv+0x210>)
                d->setX(d->getX() - targetValue);
90005744:	6823      	ldr	r3, [r4, #0]
90005746:	88a1      	ldrh	r1, [r4, #4]
90005748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
9000574a:	1a89      	subs	r1, r1, r2
9000574c:	42bb      	cmp	r3, r7
9000574e:	b209      	sxth	r1, r1
90005750:	d119      	bne.n	90005786 <_ZN23FrontendApplicationBase40gotoScreen2ScreenSlideTransitionEastImplEv+0x186>
        rect.x = x;
90005752:	80a1      	strh	r1, [r4, #4]
        return nextSibling;
90005754:	69a4      	ldr	r4, [r4, #24]
        while (d)
90005756:	2c00      	cmp	r4, #0
90005758:	d1f4      	bne.n	90005744 <_ZN23FrontendApplicationBase40gotoScreen2ScreenSlideTransitionEastImplEv+0x144>
        screenContainer->add(snapshot);
9000575a:	6868      	ldr	r0, [r5, #4]
9000575c:	4631      	mov	r1, r6
9000575e:	6803      	ldr	r3, [r0, #0]
90005760:	6e1b      	ldr	r3, [r3, #96]	; 0x60
90005762:	4798      	blx	r3
    newTransition->invalidate();
90005764:	682b      	ldr	r3, [r5, #0]
90005766:	695b      	ldr	r3, [r3, #20]
90005768:	4a2a      	ldr	r2, [pc, #168]	; (90005814 <_ZN23FrontendApplicationBase40gotoScreen2ScreenSlideTransitionEastImplEv+0x214>)
9000576a:	4293      	cmp	r3, r2
9000576c:	d12d      	bne.n	900057ca <_ZN23FrontendApplicationBase40gotoScreen2ScreenSlideTransitionEastImplEv+0x1ca>
        Application::getInstance()->invalidate();
9000576e:	f012 fcc5 	bl	900180fc <_ZN8touchgfx11Application11getInstanceEv>
}
90005772:	b001      	add	sp, #4
90005774:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90005778:	f013 b954 	b.w	90018a24 <_ZN8touchgfx11Application10invalidateEv>
    if (*currentScreen)
9000577c:	f8d9 0000 	ldr.w	r0, [r9]
90005780:	2800      	cmp	r0, #0
90005782:	d181      	bne.n	90005688 <_ZN23FrontendApplicationBase40gotoScreen2ScreenSlideTransitionEastImplEv+0x88>
90005784:	e789      	b.n	9000569a <_ZN23FrontendApplicationBase40gotoScreen2ScreenSlideTransitionEastImplEv+0x9a>
                d->setX(d->getX() - targetValue);
90005786:	4620      	mov	r0, r4
90005788:	4798      	blx	r3
9000578a:	69a4      	ldr	r4, [r4, #24]
        while (d)
9000578c:	2c00      	cmp	r4, #0
9000578e:	d0e4      	beq.n	9000575a <_ZN23FrontendApplicationBase40gotoScreen2ScreenSlideTransitionEastImplEv+0x15a>
90005790:	8f6a      	ldrh	r2, [r5, #58]	; 0x3a
90005792:	e7d7      	b.n	90005744 <_ZN23FrontendApplicationBase40gotoScreen2ScreenSlideTransitionEastImplEv+0x144>
        snapshot.setPosition(0, 0, HAL::DISPLAY_WIDTH, HAL::DISPLAY_HEIGHT);
90005794:	4b20      	ldr	r3, [pc, #128]	; (90005818 <_ZN23FrontendApplicationBase40gotoScreen2ScreenSlideTransitionEastImplEv+0x218>)
        snapshot.makeSnapshot();
90005796:	4630      	mov	r0, r6
        rect.x = x;
90005798:	612f      	str	r7, [r5, #16]
        snapshot.setPosition(0, 0, HAL::DISPLAY_WIDTH, HAL::DISPLAY_HEIGHT);
9000579a:	f9b3 3000 	ldrsh.w	r3, [r3]
9000579e:	4f1f      	ldr	r7, [pc, #124]	; (9000581c <_ZN23FrontendApplicationBase40gotoScreen2ScreenSlideTransitionEastImplEv+0x21c>)
        rect.height = height;
900057a0:	82eb      	strh	r3, [r5, #22]
900057a2:	f9b7 3000 	ldrsh.w	r3, [r7]
        rect.width = width;
900057a6:	82ab      	strh	r3, [r5, #20]
        snapshot.makeSnapshot();
900057a8:	f00f fb50 	bl	90014e4c <_ZN8touchgfx14SnapshotWidget12makeSnapshotEv>
            targetValue = -HAL::DISPLAY_WIDTH;
900057ac:	883b      	ldrh	r3, [r7, #0]
900057ae:	425b      	negs	r3, r3
900057b0:	876b      	strh	r3, [r5, #58]	; 0x3a
            break;
900057b2:	e78b      	b.n	900056cc <_ZN23FrontendApplicationBase40gotoScreen2ScreenSlideTransitionEastImplEv+0xcc>
    if (*currentPresenter)
900057b4:	f8d8 013c 	ldr.w	r0, [r8, #316]	; 0x13c
900057b8:	2800      	cmp	r0, #0
900057ba:	f47f af5f 	bne.w	9000567c <_ZN23FrontendApplicationBase40gotoScreen2ScreenSlideTransitionEastImplEv+0x7c>
900057be:	e76c      	b.n	9000569a <_ZN23FrontendApplicationBase40gotoScreen2ScreenSlideTransitionEastImplEv+0x9a>
    model->bind(newPresenter);
900057c0:	4623      	mov	r3, r4
900057c2:	e79d      	b.n	90005700 <_ZN23FrontendApplicationBase40gotoScreen2ScreenSlideTransitionEastImplEv+0x100>
        Drawable* d = screenContainer->getFirstChild();
900057c4:	4798      	blx	r3
900057c6:	4604      	mov	r4, r0
900057c8:	e7b9      	b.n	9000573e <_ZN23FrontendApplicationBase40gotoScreen2ScreenSlideTransitionEastImplEv+0x13e>
    newTransition->invalidate();
900057ca:	4628      	mov	r0, r5
900057cc:	b001      	add	sp, #4
900057ce:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
900057d2:	4718      	bx	r3
    newTransition->init();
900057d4:	4628      	mov	r0, r5
900057d6:	4790      	blx	r2
    newTransition->invalidate();
900057d8:	682b      	ldr	r3, [r5, #0]
900057da:	e7c4      	b.n	90005766 <_ZN23FrontendApplicationBase40gotoScreen2ScreenSlideTransitionEastImplEv+0x166>
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
900057dc:	4b10      	ldr	r3, [pc, #64]	; (90005820 <_ZN23FrontendApplicationBase40gotoScreen2ScreenSlideTransitionEastImplEv+0x220>)
900057de:	21a3      	movs	r1, #163	; 0xa3
900057e0:	4a10      	ldr	r2, [pc, #64]	; (90005824 <_ZN23FrontendApplicationBase40gotoScreen2ScreenSlideTransitionEastImplEv+0x224>)
900057e2:	4811      	ldr	r0, [pc, #68]	; (90005828 <_ZN23FrontendApplicationBase40gotoScreen2ScreenSlideTransitionEastImplEv+0x228>)
900057e4:	f021 ff36 	bl	90027654 <__assert_func>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
900057e8:	4b10      	ldr	r3, [pc, #64]	; (9000582c <_ZN23FrontendApplicationBase40gotoScreen2ScreenSlideTransitionEastImplEv+0x22c>)
900057ea:	21a5      	movs	r1, #165	; 0xa5
900057ec:	4a0d      	ldr	r2, [pc, #52]	; (90005824 <_ZN23FrontendApplicationBase40gotoScreen2ScreenSlideTransitionEastImplEv+0x224>)
900057ee:	480e      	ldr	r0, [pc, #56]	; (90005828 <_ZN23FrontendApplicationBase40gotoScreen2ScreenSlideTransitionEastImplEv+0x228>)
900057f0:	f021 ff30 	bl	90027654 <__assert_func>
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
900057f4:	4b0e      	ldr	r3, [pc, #56]	; (90005830 <_ZN23FrontendApplicationBase40gotoScreen2ScreenSlideTransitionEastImplEv+0x230>)
900057f6:	21a4      	movs	r1, #164	; 0xa4
900057f8:	4a0a      	ldr	r2, [pc, #40]	; (90005824 <_ZN23FrontendApplicationBase40gotoScreen2ScreenSlideTransitionEastImplEv+0x224>)
900057fa:	480b      	ldr	r0, [pc, #44]	; (90005828 <_ZN23FrontendApplicationBase40gotoScreen2ScreenSlideTransitionEastImplEv+0x228>)
900057fc:	f021 ff2a 	bl	90027654 <__assert_func>
90005800:	9002abe4 	.word	0x9002abe4
90005804:	240281eb 	.word	0x240281eb
90005808:	900051c9 	.word	0x900051c9
9000580c:	90004f19 	.word	0x90004f19
90005810:	90002351 	.word	0x90002351
90005814:	90004fe9 	.word	0x90004fe9
90005818:	240281e2 	.word	0x240281e2
9000581c:	240281e0 	.word	0x240281e0
90005820:	9002a600 	.word	0x9002a600
90005824:	9002aa3c 	.word	0x9002aa3c
90005828:	9002a794 	.word	0x9002a794
9000582c:	9002a880 	.word	0x9002a880
90005830:	9002a7dc 	.word	0x9002a7dc
90005834:	24028234 	.word	0x24028234
90005838:	24028230 	.word	0x24028230

9000583c <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv>:
        if (pendingScreenTransitionCallback && pendingScreenTransitionCallback->isValid())
9000583c:	f8d0 3140 	ldr.w	r3, [r0, #320]	; 0x140
90005840:	b1d3      	cbz	r3, 90005878 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x3c>
90005842:	681a      	ldr	r2, [r3, #0]
    virtual void handlePendingScreenTransition()
90005844:	b570      	push	{r4, r5, r6, lr}
        if (pendingScreenTransitionCallback && pendingScreenTransitionCallback->isValid())
90005846:	68d1      	ldr	r1, [r2, #12]
90005848:	4604      	mov	r4, r0
9000584a:	4818      	ldr	r0, [pc, #96]	; (900058ac <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x70>)
9000584c:	4281      	cmp	r1, r0
9000584e:	d118      	bne.n	90005882 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x46>
        return (pobject != 0) && (pmemfun != 0);
90005850:	6858      	ldr	r0, [r3, #4]
90005852:	b180      	cbz	r0, 90005876 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x3a>
90005854:	6899      	ldr	r1, [r3, #8]
90005856:	b1e1      	cbz	r1, 90005892 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x56>
            pendingScreenTransitionCallback->execute();
90005858:	6892      	ldr	r2, [r2, #8]
9000585a:	4915      	ldr	r1, [pc, #84]	; (900058b0 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x74>)
9000585c:	428a      	cmp	r2, r1
9000585e:	d122      	bne.n	900058a6 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x6a>
        (pobject->*pmemfun)();
90005860:	68da      	ldr	r2, [r3, #12]
90005862:	6858      	ldr	r0, [r3, #4]
90005864:	eb00 0062 	add.w	r0, r0, r2, asr #1
90005868:	07d2      	lsls	r2, r2, #31
9000586a:	d406      	bmi.n	9000587a <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x3e>
9000586c:	689b      	ldr	r3, [r3, #8]
9000586e:	4798      	blx	r3
            pendingScreenTransitionCallback = 0;
90005870:	2300      	movs	r3, #0
90005872:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
    }
90005876:	bd70      	pop	{r4, r5, r6, pc}
90005878:	4770      	bx	lr
9000587a:	6899      	ldr	r1, [r3, #8]
9000587c:	6803      	ldr	r3, [r0, #0]
9000587e:	585b      	ldr	r3, [r3, r1]
90005880:	e7f5      	b.n	9000586e <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x32>
        if (pendingScreenTransitionCallback && pendingScreenTransitionCallback->isValid())
90005882:	4618      	mov	r0, r3
90005884:	4788      	blx	r1
90005886:	2800      	cmp	r0, #0
90005888:	d0f5      	beq.n	90005876 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x3a>
            pendingScreenTransitionCallback->execute();
9000588a:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
9000588e:	681a      	ldr	r2, [r3, #0]
90005890:	e7e2      	b.n	90005858 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x1c>
        return (pobject != 0) && (pmemfun != 0);
90005892:	68dd      	ldr	r5, [r3, #12]
90005894:	07ee      	lsls	r6, r5, #31
90005896:	d5ee      	bpl.n	90005876 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x3a>
90005898:	6892      	ldr	r2, [r2, #8]
9000589a:	4e05      	ldr	r6, [pc, #20]	; (900058b0 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x74>)
9000589c:	42b2      	cmp	r2, r6
9000589e:	d102      	bne.n	900058a6 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x6a>
        (pobject->*pmemfun)();
900058a0:	eb00 0065 	add.w	r0, r0, r5, asr #1
900058a4:	e7ea      	b.n	9000587c <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x40>
900058a6:	4618      	mov	r0, r3
900058a8:	4790      	blx	r2
900058aa:	e7e1      	b.n	90005870 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x34>
900058ac:	90004f81 	.word	0x90004f81
900058b0:	90004f61 	.word	0x90004f61

900058b4 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>:
FrontendApplicationBase::FrontendApplicationBase(Model& m, FrontendHeap& heap)
900058b4:	b570      	push	{r4, r5, r6, lr}
900058b6:	4604      	mov	r4, r0
900058b8:	4616      	mov	r6, r2
900058ba:	460d      	mov	r5, r1
          pendingScreenTransitionCallback(0)
900058bc:	f012 fd2e 	bl	9001831c <_ZN8touchgfx11ApplicationC1Ev>
        instance = this;
900058c0:	4a18      	ldr	r2, [pc, #96]	; (90005924 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x70>)
        : currentPresenter(0),
900058c2:	2300      	movs	r3, #0
      frontendHeap(heap),
900058c4:	f8c4 6154 	str.w	r6, [r4, #340]	; 0x154
        instance = this;
900058c8:	6014      	str	r4, [r2, #0]
        return instance;
900058ca:	4e17      	ldr	r6, [pc, #92]	; (90005928 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x74>)
      model(m)
900058cc:	4a17      	ldr	r2, [pc, #92]	; (9000592c <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x78>)
900058ce:	6830      	ldr	r0, [r6, #0]
900058d0:	6022      	str	r2, [r4, #0]
        : pobject(0), pmemfun(0)
900058d2:	4a17      	ldr	r2, [pc, #92]	; (90005930 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x7c>)
900058d4:	4917      	ldr	r1, [pc, #92]	; (90005934 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x80>)
900058d6:	f8c4 2144 	str.w	r2, [r4, #324]	; 0x144
900058da:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
900058de:	f8c4 5158 	str.w	r5, [r4, #344]	; 0x158
900058e2:	e9c4 3353 	strd	r3, r3, [r4, #332]	; 0x14c
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
900058e6:	6802      	ldr	r2, [r0, #0]
900058e8:	6892      	ldr	r2, [r2, #8]
900058ea:	428a      	cmp	r2, r1
          pendingScreenTransitionCallback(0)
900058ec:	e9c4 334f 	strd	r3, r3, [r4, #316]	; 0x13c
900058f0:	d115      	bne.n	9000591e <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x6a>
        requestedOrientation = orientation;
900058f2:	f44f 7380 	mov.w	r3, #256	; 0x100
900058f6:	f8a0 3074 	strh.w	r3, [r0, #116]	; 0x74
    touchgfx::Texts::setLanguage(GB);
900058fa:	2000      	movs	r0, #0
900058fc:	f002 fc6c 	bl	900081d8 <_ZN8touchgfx5Texts11setLanguageEt>
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
90005900:	6833      	ldr	r3, [r6, #0]
90005902:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
90005906:	b12a      	cbz	r2, 90005914 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x60>
90005908:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
9000590a:	b118      	cbz	r0, 90005914 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x60>
    reinterpret_cast<touchgfx::LCD16bpp&>(touchgfx::HAL::lcd()).enableTextureMapperAll();
9000590c:	f01a fc4d 	bl	900201aa <_ZN8touchgfx8LCD16bpp22enableTextureMapperAllEv>
}
90005910:	4620      	mov	r0, r4
90005912:	bd70      	pop	{r4, r5, r6, pc}
        return instance->lcdRef;
90005914:	6898      	ldr	r0, [r3, #8]
    reinterpret_cast<touchgfx::LCD16bpp&>(touchgfx::HAL::lcd()).enableTextureMapperAll();
90005916:	f01a fc48 	bl	900201aa <_ZN8touchgfx8LCD16bpp22enableTextureMapperAllEv>
}
9000591a:	4620      	mov	r0, r4
9000591c:	bd70      	pop	{r4, r5, r6, pc}
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
9000591e:	4619      	mov	r1, r3
90005920:	4790      	blx	r2
90005922:	e7ea      	b.n	900058fa <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x46>
90005924:	24028240 	.word	0x24028240
90005928:	240281ec 	.word	0x240281ec
9000592c:	9002ab74 	.word	0x9002ab74
90005930:	9002ab5c 	.word	0x9002ab5c
90005934:	90000685 	.word	0x90000685

90005938 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
90005938:	4905      	ldr	r1, [pc, #20]	; (90005950 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv+0x18>)
9000593a:	2200      	movs	r2, #0
    pendingScreenTransitionCallback = &transitionCallback;
9000593c:	f500 73a2 	add.w	r3, r0, #324	; 0x144
90005940:	f8c0 2150 	str.w	r2, [r0, #336]	; 0x150
90005944:	f8c0 3140 	str.w	r3, [r0, #320]	; 0x140
90005948:	e9c0 0152 	strd	r0, r1, [r0, #328]	; 0x148
}
9000594c:	4770      	bx	lr
9000594e:	bf00      	nop
90005950:	90005229 	.word	0x90005229

90005954 <_ZN23FrontendApplicationBase36gotoScreen1ScreenSlideTransitionWestEv>:
90005954:	4905      	ldr	r1, [pc, #20]	; (9000596c <_ZN23FrontendApplicationBase36gotoScreen1ScreenSlideTransitionWestEv+0x18>)
90005956:	2200      	movs	r2, #0
    pendingScreenTransitionCallback = &transitionCallback;
90005958:	f500 73a2 	add.w	r3, r0, #324	; 0x144
9000595c:	f8c0 2150 	str.w	r2, [r0, #336]	; 0x150
90005960:	f8c0 3140 	str.w	r3, [r0, #320]	; 0x140
90005964:	e9c0 0152 	strd	r0, r1, [r0, #328]	; 0x148
}
90005968:	4770      	bx	lr
9000596a:	bf00      	nop
9000596c:	900053c9 	.word	0x900053c9

90005970 <_ZN23FrontendApplicationBase36gotoScreen2ScreenSlideTransitionEastEv>:
90005970:	4905      	ldr	r1, [pc, #20]	; (90005988 <_ZN23FrontendApplicationBase36gotoScreen2ScreenSlideTransitionEastEv+0x18>)
90005972:	2200      	movs	r2, #0
    pendingScreenTransitionCallback = &transitionCallback;
90005974:	f500 73a2 	add.w	r3, r0, #324	; 0x144
90005978:	f8c0 2150 	str.w	r2, [r0, #336]	; 0x150
9000597c:	f8c0 3140 	str.w	r3, [r0, #320]	; 0x140
90005980:	e9c0 0152 	strd	r0, r1, [r0, #328]	; 0x148
}
90005984:	4770      	bx	lr
90005986:	bf00      	nop
90005988:	90005601 	.word	0x90005601

9000598c <_ZNK8touchgfx13GeneratedFont12getGSUBTableEv>:
    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const;

    virtual const uint16_t* getGSUBTable() const
    {
        return gsubTable;
    }
9000598c:	6a40      	ldr	r0, [r0, #36]	; 0x24
9000598e:	4770      	bx	lr

90005990 <_ZNK8touchgfx13GeneratedFont23getContextualFormsTableEv>:

    virtual const FontContextualFormsTable* getContextualFormsTable() const
    {
        return arabicTable;
    }
90005990:	6a80      	ldr	r0, [r0, #40]	; 0x28
90005992:	4770      	bx	lr

90005994 <_ZN8touchgfx13GeneratedFontD1Ev>:
class GeneratedFont : public ConstFont
90005994:	4770      	bx	lr
90005996:	bf00      	nop

90005998 <_ZNK8touchgfx13GeneratedFont12getPixelDataEPKNS_9GlyphNodeE>:
}

const uint8_t* GeneratedFont::getPixelData(const GlyphNode* glyph) const
{
    const uint8_t* const* table = (const uint8_t* const*)glyphData;
    return &(table[glyph->unicode / 2048][glyph->dataOffset]);
90005998:	888b      	ldrh	r3, [r1, #4]
9000599a:	69c0      	ldr	r0, [r0, #28]
9000599c:	0adb      	lsrs	r3, r3, #11
9000599e:	680a      	ldr	r2, [r1, #0]
900059a0:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
}
900059a4:	4410      	add	r0, r2
900059a6:	4770      	bx	lr

900059a8 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE>:

int8_t GeneratedFont::getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
{
    if (!glyph || glyph->kerningTableSize == 0)
900059a8:	b1da      	cbz	r2, 900059e2 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x3a>
{
900059aa:	b510      	push	{r4, lr}
    if (!glyph || glyph->kerningTableSize == 0)
900059ac:	7b14      	ldrb	r4, [r2, #12]
900059ae:	b1b4      	cbz	r4, 900059de <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x36>
        return ((flags & GLYPH_DATA_KERNINGTABLEPOS_BIT8_10) << 8) | _kerningTablePos;
900059b0:	f892 c00d 	ldrb.w	ip, [r2, #13]
900059b4:	f892 e00b 	ldrb.w	lr, [r2, #11]
900059b8:	ea4f 220c 	mov.w	r2, ip, lsl #8
    {
        return 0;
    }

    const KerningNode* kerndata = kerningData + glyph->kerningTablePos();
900059bc:	6a03      	ldr	r3, [r0, #32]
900059be:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
900059c2:	ea4e 0202 	orr.w	r2, lr, r2
900059c6:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
900059ca:	eb03 0084 	add.w	r0, r3, r4, lsl #2
    {
        if (prevChar == kerndata->unicodePrevChar)
900059ce:	881a      	ldrh	r2, [r3, #0]
900059d0:	428a      	cmp	r2, r1
900059d2:	d008      	beq.n	900059e6 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x3e>
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
900059d4:	f103 0304 	add.w	r3, r3, #4
        {
            return kerndata->distance;
        }
        if (prevChar < kerndata->unicodePrevChar)
900059d8:	d801      	bhi.n	900059de <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x36>
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
900059da:	4283      	cmp	r3, r0
900059dc:	d1f7      	bne.n	900059ce <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x26>
        return 0;
900059de:	2000      	movs	r0, #0
        {
            break;
        }
    }
    return 0;
}
900059e0:	bd10      	pop	{r4, pc}
        return 0;
900059e2:	4610      	mov	r0, r2
}
900059e4:	4770      	bx	lr
            return kerndata->distance;
900059e6:	f993 0002 	ldrsb.w	r0, [r3, #2]
}
900059ea:	bd10      	pop	{r4, pc}

900059ec <_ZN8touchgfx13GeneratedFontD0Ev>:
900059ec:	b510      	push	{r4, lr}
900059ee:	4604      	mov	r4, r0
900059f0:	212c      	movs	r1, #44	; 0x2c
900059f2:	f021 fe00 	bl	900275f6 <_ZdlPvj>
900059f6:	4620      	mov	r0, r4
900059f8:	bd10      	pop	{r4, pc}
900059fa:	bf00      	nop

900059fc <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>:
GeneratedFont::GeneratedFont(const GlyphNode* glyphs, uint16_t numGlyphs, uint16_t height, uint16_t baseline, uint8_t pixAboveTop, uint8_t pixBelowBottom, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
900059fc:	b530      	push	{r4, r5, lr}
900059fe:	b08b      	sub	sp, #44	; 0x2c
90005a00:	4604      	mov	r4, r0
90005a02:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
      arabicTable(formsTable)
90005a06:	9500      	str	r5, [sp, #0]
GeneratedFont::GeneratedFont(const GlyphNode* glyphs, uint16_t numGlyphs, uint16_t height, uint16_t baseline, uint8_t pixAboveTop, uint8_t pixBelowBottom, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
90005a08:	f89d 503c 	ldrb.w	r5, [sp, #60]	; 0x3c
      arabicTable(formsTable)
90005a0c:	9501      	str	r5, [sp, #4]
GeneratedFont::GeneratedFont(const GlyphNode* glyphs, uint16_t numGlyphs, uint16_t height, uint16_t baseline, uint8_t pixAboveTop, uint8_t pixBelowBottom, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
90005a0e:	f89d 5040 	ldrb.w	r5, [sp, #64]	; 0x40
      arabicTable(formsTable)
90005a12:	9502      	str	r5, [sp, #8]
GeneratedFont::GeneratedFont(const GlyphNode* glyphs, uint16_t numGlyphs, uint16_t height, uint16_t baseline, uint8_t pixAboveTop, uint8_t pixBelowBottom, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
90005a14:	f89d 5044 	ldrb.w	r5, [sp, #68]	; 0x44
      arabicTable(formsTable)
90005a18:	9503      	str	r5, [sp, #12]
GeneratedFont::GeneratedFont(const GlyphNode* glyphs, uint16_t numGlyphs, uint16_t height, uint16_t baseline, uint8_t pixAboveTop, uint8_t pixBelowBottom, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
90005a1a:	f89d 5048 	ldrb.w	r5, [sp, #72]	; 0x48
      arabicTable(formsTable)
90005a1e:	9504      	str	r5, [sp, #16]
GeneratedFont::GeneratedFont(const GlyphNode* glyphs, uint16_t numGlyphs, uint16_t height, uint16_t baseline, uint8_t pixAboveTop, uint8_t pixBelowBottom, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
90005a20:	f89d 504c 	ldrb.w	r5, [sp, #76]	; 0x4c
      arabicTable(formsTable)
90005a24:	9505      	str	r5, [sp, #20]
GeneratedFont::GeneratedFont(const GlyphNode* glyphs, uint16_t numGlyphs, uint16_t height, uint16_t baseline, uint8_t pixAboveTop, uint8_t pixBelowBottom, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
90005a26:	f89d 5050 	ldrb.w	r5, [sp, #80]	; 0x50
      arabicTable(formsTable)
90005a2a:	9506      	str	r5, [sp, #24]
GeneratedFont::GeneratedFont(const GlyphNode* glyphs, uint16_t numGlyphs, uint16_t height, uint16_t baseline, uint8_t pixAboveTop, uint8_t pixBelowBottom, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
90005a2c:	f8bd 505c 	ldrh.w	r5, [sp, #92]	; 0x5c
      arabicTable(formsTable)
90005a30:	9507      	str	r5, [sp, #28]
GeneratedFont::GeneratedFont(const GlyphNode* glyphs, uint16_t numGlyphs, uint16_t height, uint16_t baseline, uint8_t pixAboveTop, uint8_t pixBelowBottom, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
90005a32:	f8bd 5060 	ldrh.w	r5, [sp, #96]	; 0x60
      arabicTable(formsTable)
90005a36:	9508      	str	r5, [sp, #32]
90005a38:	f013 fc9c 	bl	90019374 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt>
      glyphData(glyphDataInternalFlash),
90005a3c:	9b15      	ldr	r3, [sp, #84]	; 0x54
}
90005a3e:	4620      	mov	r0, r4
      glyphData(glyphDataInternalFlash),
90005a40:	61e3      	str	r3, [r4, #28]
      kerningData(kerningList),
90005a42:	9b16      	ldr	r3, [sp, #88]	; 0x58
90005a44:	6223      	str	r3, [r4, #32]
      gsubTable(gsubData),
90005a46:	9b19      	ldr	r3, [sp, #100]	; 0x64
90005a48:	6263      	str	r3, [r4, #36]	; 0x24
      arabicTable(formsTable)
90005a4a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
90005a4c:	62a3      	str	r3, [r4, #40]	; 0x28
90005a4e:	4b02      	ldr	r3, [pc, #8]	; (90005a58 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE+0x5c>)
90005a50:	6023      	str	r3, [r4, #0]
}
90005a52:	b00b      	add	sp, #44	; 0x2c
90005a54:	bd30      	pop	{r4, r5, pc}
90005a56:	bf00      	nop
90005a58:	9002ac2c 	.word	0x9002ac2c

90005a5c <_ZN8touchgfx6Screen15afterTransitionEv>:
     *
     * @see Application::handleTickEvent
     */
    virtual void afterTransition()
    {
    }
90005a5c:	4770      	bx	lr
90005a5e:	bf00      	nop

90005a60 <_ZN8touchgfx6Screen14tearDownScreenEv>:
     *
     * @see Application::switchScreen
     */
    virtual void tearDownScreen()
    {
    }
90005a60:	4770      	bx	lr
90005a62:	bf00      	nop

90005a64 <_ZN8touchgfx6Screen15handleTickEventEv>:
     * Called by the Application on the current screen with a frequency of
     * Application::TICK_INTERVAL_MS.
     */
    virtual void handleTickEvent()
    {
    }
90005a64:	4770      	bx	lr
90005a66:	bf00      	nop

90005a68 <_ZN8touchgfx6Screen14handleKeyEventEh>:
     * @param  key The key to handle.
     */
    virtual void handleKeyEvent(uint8_t key)
    {
        (void)key; // Unused variable
    }
90005a68:	4770      	bx	lr
90005a6a:	bf00      	nop

90005a6c <_ZN8touchgfx8TextArea8setWidthEs>:
    TextArea()
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE), boundingArea()
    {
    }

    virtual void setWidth(int16_t width)
90005a6c:	b530      	push	{r4, r5, lr}
90005a6e:	b085      	sub	sp, #20
90005a70:	460a      	mov	r2, r1
    {
        Widget::setWidth(width);
        boundingArea = calculateBoundingArea();
90005a72:	6803      	ldr	r3, [r0, #0]
    virtual void setWidth(int16_t width)
90005a74:	4604      	mov	r4, r0
        boundingArea = calculateBoundingArea();
90005a76:	466d      	mov	r5, sp
90005a78:	4601      	mov	r1, r0
90005a7a:	8102      	strh	r2, [r0, #8]
90005a7c:	343c      	adds	r4, #60	; 0x3c
90005a7e:	4628      	mov	r0, r5
90005a80:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
90005a84:	4798      	blx	r3
90005a86:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
90005a8a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    }
90005a8e:	b005      	add	sp, #20
90005a90:	bd30      	pop	{r4, r5, pc}
90005a92:	bf00      	nop

90005a94 <_ZN8touchgfx8TextArea9setHeightEs>:

    virtual void setHeight(int16_t height)
90005a94:	b530      	push	{r4, r5, lr}
90005a96:	b085      	sub	sp, #20
90005a98:	460a      	mov	r2, r1
    {
        Widget::setHeight(height);
        boundingArea = calculateBoundingArea();
90005a9a:	6803      	ldr	r3, [r0, #0]
    virtual void setHeight(int16_t height)
90005a9c:	4604      	mov	r4, r0
        boundingArea = calculateBoundingArea();
90005a9e:	466d      	mov	r5, sp
90005aa0:	4601      	mov	r1, r0
        rect.height = height;
90005aa2:	8142      	strh	r2, [r0, #10]
90005aa4:	343c      	adds	r4, #60	; 0x3c
90005aa6:	4628      	mov	r0, r5
90005aa8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
90005aac:	4798      	blx	r3
90005aae:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
90005ab2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    }
90005ab6:	b005      	add	sp, #20
90005ab8:	bd30      	pop	{r4, r5, pc}
90005aba:	bf00      	nop

90005abc <_ZNK8touchgfx8TextArea12getSolidRectEv>:
90005abc:	2200      	movs	r2, #0
90005abe:	6002      	str	r2, [r0, #0]
90005ac0:	6042      	str	r2, [r0, #4]

    virtual Rect getSolidRect() const
    {
        return Rect();
    }
90005ac2:	4770      	bx	lr

90005ac4 <_ZN8touchgfx8TextArea8setAlphaEh>:
    /**
     * @copydoc Image::setAlpha
     */
    virtual void setAlpha(uint8_t newAlpha)
    {
        alpha = newAlpha;
90005ac4:	f880 1036 	strb.w	r1, [r0, #54]	; 0x36
    }
90005ac8:	4770      	bx	lr
90005aca:	bf00      	nop

90005acc <_ZNK8touchgfx8TextArea12getWildcard2Ev>:
     * @see TextAreaWithOneWildcard, TextAreaWithTwoWildcards
     */
    virtual const Unicode::UnicodeChar* getWildcard2() const
    {
        return 0;
    }
90005acc:	2000      	movs	r0, #0
90005ace:	4770      	bx	lr

90005ad0 <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv>:
        if (visible)
90005ad0:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
90005ad4:	b112      	cbz	r2, 90005adc <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv+0xc>
            invalidate();
90005ad6:	6803      	ldr	r3, [r0, #0]
90005ad8:	695b      	ldr	r3, [r3, #20]
90005ada:	4718      	bx	r3
    virtual void draw(const Rect& area) const;

    virtual void invalidateContent() const
    {
        Widget::invalidateContent();
    }
90005adc:	4770      	bx	lr
90005ade:	bf00      	nop

90005ae0 <_ZNK8touchgfx24TextAreaWithWildcardBase21calculateBoundingAreaEv>:
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
90005ae0:	2200      	movs	r2, #0
90005ae2:	f04f 31ff 	mov.w	r1, #4294967295
        /**
         * Initializes a new instance of the BoundingArea class which is invalid by default.
         */
        BoundingArea()
            : rect(Rect(0, 0, -1, -1)), // Negative width and height means invalid rectangle
              text(0)
90005ae6:	6082      	str	r2, [r0, #8]
90005ae8:	e9c0 2100 	strd	r2, r1, [r0]

protected:
    virtual TextArea::BoundingArea calculateBoundingArea() const
    {
        return TextArea::BoundingArea();
    }
90005aec:	4770      	bx	lr
90005aee:	bf00      	nop

90005af0 <_ZNK8touchgfx23TextAreaWithOneWildcard12getWildcard1Ev>:
    }

    virtual const Unicode::UnicodeChar* getWildcard1() const
    {
        return wc1;
    }
90005af0:	6c80      	ldr	r0, [r0, #72]	; 0x48
90005af2:	4770      	bx	lr

90005af4 <_ZN15Screen1ViewBaseD1Ev>:
}

Screen1ViewBase::~Screen1ViewBase()
{

}
90005af4:	4770      	bx	lr
90005af6:	bf00      	nop

90005af8 <_ZN15Screen1ViewBase11setupScreenEv>:

void Screen1ViewBase::setupScreen()
{

}
90005af8:	4770      	bx	lr
90005afa:	bf00      	nop

90005afc <_ZN8touchgfx15TextButtonStyleINS_18ClickButtonTriggerEE20handlePressedUpdatedEv>:
    colortype colorPressed;  ///< The color pressed

    /** @copydoc AbstractButtonContainer::handlePressedUpdated() */
    virtual void handlePressedUpdated()
    {
        text.setColor(T::getPressed() ? colorPressed : colorReleased);
90005afc:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
90005b00:	b123      	cbz	r3, 90005b0c <_ZN8touchgfx15TextButtonStyleINS_18ClickButtonTriggerEE20handlePressedUpdatedEv+0x10>
90005b02:	f100 0380 	add.w	r3, r0, #128	; 0x80
90005b06:	681b      	ldr	r3, [r3, #0]
        color = newColor;
90005b08:	6643      	str	r3, [r0, #100]	; 0x64
        T::handlePressedUpdated();
    }
90005b0a:	4770      	bx	lr
        text.setColor(T::getPressed() ? colorPressed : colorReleased);
90005b0c:	f100 037c 	add.w	r3, r0, #124	; 0x7c
90005b10:	681b      	ldr	r3, [r3, #0]
90005b12:	6643      	str	r3, [r0, #100]	; 0x64
    }
90005b14:	4770      	bx	lr
90005b16:	bf00      	nop

90005b18 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_23AbstractButtonContainerEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
90005b18:	4770      	bx	lr
90005b1a:	bf00      	nop

90005b1c <_ZN8touchgfx15TextButtonStyleINS_18ClickButtonTriggerEED1Ev>:
class TextButtonStyle : public T
90005b1c:	4770      	bx	lr
90005b1e:	bf00      	nop

90005b20 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>:
class TextAreaWithOneWildcard : public TextAreaWithWildcardBase
90005b20:	4770      	bx	lr
90005b22:	bf00      	nop

90005b24 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_23AbstractButtonContainerEvvE7executeES4_>:
    virtual void execute(T1 t1)
90005b24:	b410      	push	{r4}
        (pobject->*pmemfun)(t1);
90005b26:	68c2      	ldr	r2, [r0, #12]
    virtual void execute(T1 t1)
90005b28:	4603      	mov	r3, r0
        (pobject->*pmemfun)(t1);
90005b2a:	6844      	ldr	r4, [r0, #4]
90005b2c:	f012 0f01 	tst.w	r2, #1
90005b30:	eb04 0062 	add.w	r0, r4, r2, asr #1
90005b34:	d103      	bne.n	90005b3e <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_23AbstractButtonContainerEvvE7executeES4_+0x1a>
90005b36:	689b      	ldr	r3, [r3, #8]
    }
90005b38:	f85d 4b04 	ldr.w	r4, [sp], #4
        (pobject->*pmemfun)(t1);
90005b3c:	4718      	bx	r3
90005b3e:	ea4f 0c62 	mov.w	ip, r2, asr #1
90005b42:	689b      	ldr	r3, [r3, #8]
90005b44:	f854 200c 	ldr.w	r2, [r4, ip]
    }
90005b48:	f85d 4b04 	ldr.w	r4, [sp], #4
        (pobject->*pmemfun)(t1);
90005b4c:	58d3      	ldr	r3, [r2, r3]
90005b4e:	4718      	bx	r3

90005b50 <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_23AbstractButtonContainerEvvE7isValidEv>:
        return (pobject != 0) && (pmemfun != 0);
90005b50:	6843      	ldr	r3, [r0, #4]
90005b52:	b13b      	cbz	r3, 90005b64 <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_23AbstractButtonContainerEvvE7isValidEv+0x14>
90005b54:	6883      	ldr	r3, [r0, #8]
90005b56:	b10b      	cbz	r3, 90005b5c <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_23AbstractButtonContainerEvvE7isValidEv+0xc>
90005b58:	2001      	movs	r0, #1
    }
90005b5a:	4770      	bx	lr
        return (pobject != 0) && (pmemfun != 0);
90005b5c:	68c0      	ldr	r0, [r0, #12]
90005b5e:	f000 0001 	and.w	r0, r0, #1
90005b62:	4770      	bx	lr
90005b64:	4618      	mov	r0, r3
90005b66:	4770      	bx	lr

90005b68 <_ZN8touchgfx15TextButtonStyleINS_18ClickButtonTriggerEE18handleAlphaUpdatedEv>:
        alpha = newAlpha;
90005b68:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
90005b6c:	f880 306a 	strb.w	r3, [r0, #106]	; 0x6a
    /** @copydoc AbstractButtonContainer::handleAlphaUpdated() */
    virtual void handleAlphaUpdated()
    {
        text.setAlpha(T::getAlpha());
        T::handleAlphaUpdated();
    }
90005b70:	4770      	bx	lr
90005b72:	bf00      	nop

90005b74 <_ZN8touchgfx23TextAreaWithOneWildcardD0Ev>:
90005b74:	b510      	push	{r4, lr}
90005b76:	4604      	mov	r4, r0
90005b78:	214c      	movs	r1, #76	; 0x4c
90005b7a:	f021 fd3c 	bl	900275f6 <_ZdlPvj>
90005b7e:	4620      	mov	r0, r4
90005b80:	bd10      	pop	{r4, pc}
90005b82:	bf00      	nop

90005b84 <_ZN8touchgfx15TextButtonStyleINS_18ClickButtonTriggerEED0Ev>:
class TextButtonStyle : public T
90005b84:	b510      	push	{r4, lr}
90005b86:	4604      	mov	r4, r0
90005b88:	2184      	movs	r1, #132	; 0x84
90005b8a:	f021 fd34 	bl	900275f6 <_ZdlPvj>
90005b8e:	4620      	mov	r0, r4
90005b90:	bd10      	pop	{r4, pc}
90005b92:	bf00      	nop

90005b94 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_23AbstractButtonContainerEvvED0Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
90005b94:	b510      	push	{r4, lr}
90005b96:	4604      	mov	r4, r0
90005b98:	2110      	movs	r1, #16
90005b9a:	f021 fd2c 	bl	900275f6 <_ZdlPvj>
90005b9e:	4620      	mov	r0, r4
90005ba0:	bd10      	pop	{r4, pc}
90005ba2:	bf00      	nop

90005ba4 <_ZN15Screen1ViewBaseD0Ev>:
Screen1ViewBase::~Screen1ViewBase()
90005ba4:	b510      	push	{r4, lr}
90005ba6:	4604      	mov	r4, r0
}
90005ba8:	f44f 71f2 	mov.w	r1, #484	; 0x1e4
90005bac:	f021 fd23 	bl	900275f6 <_ZdlPvj>
90005bb0:	4620      	mov	r0, r4
90005bb2:	bd10      	pop	{r4, pc}

90005bb4 <_ZN15Screen1ViewBase25flexButtonCallbackHandlerERKN8touchgfx23AbstractButtonContainerE>:

void Screen1ViewBase::flexButtonCallbackHandler(const touchgfx::AbstractButtonContainer& src)
{
    if (&src == &temperatureButton)
90005bb4:	f500 70a0 	add.w	r0, r0, #320	; 0x140
90005bb8:	4288      	cmp	r0, r1
90005bba:	d000      	beq.n	90005bbe <_ZN15Screen1ViewBase25flexButtonCallbackHandlerERKN8touchgfx23AbstractButtonContainerE+0xa>
90005bbc:	4770      	bx	lr
{
90005bbe:	b508      	push	{r3, lr}
    virtual ~Screen1ViewBase();
    virtual void setupScreen();

protected:
    FrontendApplication& application() {
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
90005bc0:	f012 fa9c 	bl	900180fc <_ZN8touchgfx11Application11getInstanceEv>
        //temperatureButtonInteraction
        //When temperatureButton clicked change screen to Screen2
        //Go to Screen2 with screen transition towards East
        application().gotoScreen2ScreenSlideTransitionEast();
    }
}
90005bc4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        application().gotoScreen2ScreenSlideTransitionEast();
90005bc8:	f7ff bed2 	b.w	90005970 <_ZN23FrontendApplicationBase36gotoScreen2ScreenSlideTransitionEastEv>

90005bcc <_ZN8touchgfx8TextArea12setBaselineYEs>:
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
90005bcc:	4b1b      	ldr	r3, [pc, #108]	; (90005c3c <_ZN8touchgfx8TextArea12setBaselineYEs+0x70>)
        setY(baselineY - getTypedText().getFont()->getBaseline());
90005bce:	6802      	ldr	r2, [r0, #0]
90005bd0:	681b      	ldr	r3, [r3, #0]
    virtual void setBaselineY(int16_t baselineY)
90005bd2:	b570      	push	{r4, r5, r6, lr}
        setY(baselineY - getTypedText().getFont()->getBaseline());
90005bd4:	6b55      	ldr	r5, [r2, #52]	; 0x34
90005bd6:	b323      	cbz	r3, 90005c22 <_ZN8touchgfx8TextArea12setBaselineYEs+0x56>
90005bd8:	b28e      	uxth	r6, r1
        return typedTextId < numberOfTypedTexts;
90005bda:	4919      	ldr	r1, [pc, #100]	; (90005c40 <_ZN8touchgfx8TextArea12setBaselineYEs+0x74>)
90005bdc:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
90005bde:	4604      	mov	r4, r0
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
90005be0:	8809      	ldrh	r1, [r1, #0]
90005be2:	4291      	cmp	r1, r2
90005be4:	d923      	bls.n	90005c2e <_ZN8touchgfx8TextArea12setBaselineYEs+0x62>
        return fonts[typedTexts[typedTextId].fontIdx];
90005be6:	f813 2012 	ldrb.w	r2, [r3, r2, lsl #1]
90005bea:	4b16      	ldr	r3, [pc, #88]	; (90005c44 <_ZN8touchgfx8TextArea12setBaselineYEs+0x78>)
90005bec:	681b      	ldr	r3, [r3, #0]
90005bee:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
90005bf2:	4a15      	ldr	r2, [pc, #84]	; (90005c48 <_ZN8touchgfx8TextArea12setBaselineYEs+0x7c>)
90005bf4:	6803      	ldr	r3, [r0, #0]
90005bf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90005bf8:	4293      	cmp	r3, r2
90005bfa:	d107      	bne.n	90005c0c <_ZN8touchgfx8TextArea12setBaselineYEs+0x40>
        return baselineHeight;
90005bfc:	88c0      	ldrh	r0, [r0, #6]
90005bfe:	4b13      	ldr	r3, [pc, #76]	; (90005c4c <_ZN8touchgfx8TextArea12setBaselineYEs+0x80>)
90005c00:	1a31      	subs	r1, r6, r0
90005c02:	429d      	cmp	r5, r3
90005c04:	b209      	sxth	r1, r1
90005c06:	d107      	bne.n	90005c18 <_ZN8touchgfx8TextArea12setBaselineYEs+0x4c>
        rect.y = y;
90005c08:	80e1      	strh	r1, [r4, #6]
    }
90005c0a:	bd70      	pop	{r4, r5, r6, pc}
        setY(baselineY - getTypedText().getFont()->getBaseline());
90005c0c:	4798      	blx	r3
90005c0e:	4b0f      	ldr	r3, [pc, #60]	; (90005c4c <_ZN8touchgfx8TextArea12setBaselineYEs+0x80>)
90005c10:	1a31      	subs	r1, r6, r0
90005c12:	429d      	cmp	r5, r3
90005c14:	b209      	sxth	r1, r1
90005c16:	d0f7      	beq.n	90005c08 <_ZN8touchgfx8TextArea12setBaselineYEs+0x3c>
90005c18:	4620      	mov	r0, r4
90005c1a:	462b      	mov	r3, r5
    }
90005c1c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        setY(baselineY - getTypedText().getFont()->getBaseline());
90005c20:	4718      	bx	r3
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
90005c22:	4b0b      	ldr	r3, [pc, #44]	; (90005c50 <_ZN8touchgfx8TextArea12setBaselineYEs+0x84>)
90005c24:	216c      	movs	r1, #108	; 0x6c
90005c26:	4a0b      	ldr	r2, [pc, #44]	; (90005c54 <_ZN8touchgfx8TextArea12setBaselineYEs+0x88>)
90005c28:	480b      	ldr	r0, [pc, #44]	; (90005c58 <_ZN8touchgfx8TextArea12setBaselineYEs+0x8c>)
90005c2a:	f021 fd13 	bl	90027654 <__assert_func>
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
90005c2e:	4b0b      	ldr	r3, [pc, #44]	; (90005c5c <_ZN8touchgfx8TextArea12setBaselineYEs+0x90>)
90005c30:	216d      	movs	r1, #109	; 0x6d
90005c32:	4a08      	ldr	r2, [pc, #32]	; (90005c54 <_ZN8touchgfx8TextArea12setBaselineYEs+0x88>)
90005c34:	4808      	ldr	r0, [pc, #32]	; (90005c58 <_ZN8touchgfx8TextArea12setBaselineYEs+0x8c>)
90005c36:	f021 fd0d 	bl	90027654 <__assert_func>
90005c3a:	bf00      	nop
90005c3c:	24028244 	.word	0x24028244
90005c40:	24028248 	.word	0x24028248
90005c44:	2402824c 	.word	0x2402824c
90005c48:	90004edd 	.word	0x90004edd
90005c4c:	90002355 	.word	0x90002355
90005c50:	9002ac84 	.word	0x9002ac84
90005c54:	9002acc8 	.word	0x9002acc8
90005c58:	9002ad04 	.word	0x9002ad04
90005c5c:	9002ad4c 	.word	0x9002ad4c

90005c60 <_ZN8touchgfx23AbstractButtonContainer13executeActionEv>:
     *
     * @see setAction
     */
    virtual void executeAction()
    {
        if (action && action->isValid())
90005c60:	6b03      	ldr	r3, [r0, #48]	; 0x30
90005c62:	b30b      	cbz	r3, 90005ca8 <_ZN8touchgfx23AbstractButtonContainer13executeActionEv+0x48>
90005c64:	681a      	ldr	r2, [r3, #0]
    virtual void executeAction()
90005c66:	b570      	push	{r4, r5, r6, lr}
        if (action && action->isValid())
90005c68:	68d1      	ldr	r1, [r2, #12]
90005c6a:	4604      	mov	r4, r0
90005c6c:	481a      	ldr	r0, [pc, #104]	; (90005cd8 <_ZN8touchgfx23AbstractButtonContainer13executeActionEv+0x78>)
90005c6e:	4281      	cmp	r1, r0
90005c70:	d11b      	bne.n	90005caa <_ZN8touchgfx23AbstractButtonContainer13executeActionEv+0x4a>
        return (pobject != 0) && (pmemfun != 0);
90005c72:	6858      	ldr	r0, [r3, #4]
90005c74:	b180      	cbz	r0, 90005c98 <_ZN8touchgfx23AbstractButtonContainer13executeActionEv+0x38>
90005c76:	6899      	ldr	r1, [r3, #8]
90005c78:	b1f1      	cbz	r1, 90005cb8 <_ZN8touchgfx23AbstractButtonContainer13executeActionEv+0x58>
        {
            action->execute(*this);
90005c7a:	6892      	ldr	r2, [r2, #8]
90005c7c:	4917      	ldr	r1, [pc, #92]	; (90005cdc <_ZN8touchgfx23AbstractButtonContainer13executeActionEv+0x7c>)
90005c7e:	428a      	cmp	r2, r1
90005c80:	d124      	bne.n	90005ccc <_ZN8touchgfx23AbstractButtonContainer13executeActionEv+0x6c>
        (pobject->*pmemfun)(t1);
90005c82:	68da      	ldr	r2, [r3, #12]
90005c84:	6858      	ldr	r0, [r3, #4]
90005c86:	eb00 0062 	add.w	r0, r0, r2, asr #1
90005c8a:	07d2      	lsls	r2, r2, #31
90005c8c:	d405      	bmi.n	90005c9a <_ZN8touchgfx23AbstractButtonContainer13executeActionEv+0x3a>
90005c8e:	4621      	mov	r1, r4
90005c90:	689b      	ldr	r3, [r3, #8]
        }
    }
90005c92:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
90005c96:	4718      	bx	r3
90005c98:	bd70      	pop	{r4, r5, r6, pc}
90005c9a:	6899      	ldr	r1, [r3, #8]
90005c9c:	6803      	ldr	r3, [r0, #0]
90005c9e:	585b      	ldr	r3, [r3, r1]
90005ca0:	4621      	mov	r1, r4
90005ca2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
90005ca6:	4718      	bx	r3
90005ca8:	4770      	bx	lr
        if (action && action->isValid())
90005caa:	4618      	mov	r0, r3
90005cac:	4788      	blx	r1
90005cae:	2800      	cmp	r0, #0
90005cb0:	d0f2      	beq.n	90005c98 <_ZN8touchgfx23AbstractButtonContainer13executeActionEv+0x38>
            action->execute(*this);
90005cb2:	6b23      	ldr	r3, [r4, #48]	; 0x30
90005cb4:	681a      	ldr	r2, [r3, #0]
90005cb6:	e7e0      	b.n	90005c7a <_ZN8touchgfx23AbstractButtonContainer13executeActionEv+0x1a>
        return (pobject != 0) && (pmemfun != 0);
90005cb8:	68dd      	ldr	r5, [r3, #12]
90005cba:	07ee      	lsls	r6, r5, #31
90005cbc:	d5ec      	bpl.n	90005c98 <_ZN8touchgfx23AbstractButtonContainer13executeActionEv+0x38>
90005cbe:	6892      	ldr	r2, [r2, #8]
90005cc0:	4e06      	ldr	r6, [pc, #24]	; (90005cdc <_ZN8touchgfx23AbstractButtonContainer13executeActionEv+0x7c>)
90005cc2:	42b2      	cmp	r2, r6
90005cc4:	d102      	bne.n	90005ccc <_ZN8touchgfx23AbstractButtonContainer13executeActionEv+0x6c>
        (pobject->*pmemfun)(t1);
90005cc6:	eb00 0065 	add.w	r0, r0, r5, asr #1
90005cca:	e7e7      	b.n	90005c9c <_ZN8touchgfx23AbstractButtonContainer13executeActionEv+0x3c>
90005ccc:	4621      	mov	r1, r4
90005cce:	4618      	mov	r0, r3
    }
90005cd0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            action->execute(*this);
90005cd4:	4710      	bx	r2
90005cd6:	bf00      	nop
90005cd8:	90005b51 	.word	0x90005b51
90005cdc:	90005b25 	.word	0x90005b25

90005ce0 <_ZN8touchgfx8TextArea13setXBaselineYEss>:
        setX(x);
90005ce0:	6803      	ldr	r3, [r0, #0]
    virtual void setXBaselineY(int16_t x, int16_t baselineY)
90005ce2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
90005ce6:	4f25      	ldr	r7, [pc, #148]	; (90005d7c <_ZN8touchgfx8TextArea13setXBaselineYEss+0x9c>)
90005ce8:	4605      	mov	r5, r0
        setX(x);
90005cea:	6b1e      	ldr	r6, [r3, #48]	; 0x30
    virtual void setXBaselineY(int16_t x, int16_t baselineY)
90005cec:	4690      	mov	r8, r2
90005cee:	42be      	cmp	r6, r7
90005cf0:	d125      	bne.n	90005d3e <_ZN8touchgfx8TextArea13setXBaselineYEss+0x5e>
        setBaselineY(baselineY);
90005cf2:	6e5c      	ldr	r4, [r3, #100]	; 0x64
        rect.x = x;
90005cf4:	80a9      	strh	r1, [r5, #4]
90005cf6:	4922      	ldr	r1, [pc, #136]	; (90005d80 <_ZN8touchgfx8TextArea13setXBaselineYEss+0xa0>)
90005cf8:	428c      	cmp	r4, r1
90005cfa:	d126      	bne.n	90005d4a <_ZN8touchgfx8TextArea13setXBaselineYEss+0x6a>
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
90005cfc:	4921      	ldr	r1, [pc, #132]	; (90005d84 <_ZN8touchgfx8TextArea13setXBaselineYEss+0xa4>)
        setY(baselineY - getTypedText().getFont()->getBaseline());
90005cfe:	fa1f f888 	uxth.w	r8, r8
90005d02:	6b5e      	ldr	r6, [r3, #52]	; 0x34
90005d04:	680b      	ldr	r3, [r1, #0]
90005d06:	2b00      	cmp	r3, #0
90005d08:	d032      	beq.n	90005d70 <_ZN8touchgfx8TextArea13setXBaselineYEss+0x90>
        return typedTextId < numberOfTypedTexts;
90005d0a:	491f      	ldr	r1, [pc, #124]	; (90005d88 <_ZN8touchgfx8TextArea13setXBaselineYEss+0xa8>)
90005d0c:	8daa      	ldrh	r2, [r5, #44]	; 0x2c
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
90005d0e:	8809      	ldrh	r1, [r1, #0]
90005d10:	4291      	cmp	r1, r2
90005d12:	d927      	bls.n	90005d64 <_ZN8touchgfx8TextArea13setXBaselineYEss+0x84>
        return fonts[typedTexts[typedTextId].fontIdx];
90005d14:	f813 2012 	ldrb.w	r2, [r3, r2, lsl #1]
90005d18:	4b1c      	ldr	r3, [pc, #112]	; (90005d8c <_ZN8touchgfx8TextArea13setXBaselineYEss+0xac>)
90005d1a:	681b      	ldr	r3, [r3, #0]
90005d1c:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
90005d20:	4a1b      	ldr	r2, [pc, #108]	; (90005d90 <_ZN8touchgfx8TextArea13setXBaselineYEss+0xb0>)
90005d22:	6803      	ldr	r3, [r0, #0]
90005d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90005d26:	4293      	cmp	r3, r2
90005d28:	d11a      	bne.n	90005d60 <_ZN8touchgfx8TextArea13setXBaselineYEss+0x80>
90005d2a:	88c0      	ldrh	r0, [r0, #6]
90005d2c:	4b19      	ldr	r3, [pc, #100]	; (90005d94 <_ZN8touchgfx8TextArea13setXBaselineYEss+0xb4>)
90005d2e:	eba8 0200 	sub.w	r2, r8, r0
90005d32:	429e      	cmp	r6, r3
90005d34:	b211      	sxth	r1, r2
90005d36:	d10e      	bne.n	90005d56 <_ZN8touchgfx8TextArea13setXBaselineYEss+0x76>
        rect.y = y;
90005d38:	80e9      	strh	r1, [r5, #6]
    }
90005d3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        setX(x);
90005d3e:	47b0      	blx	r6
        setBaselineY(baselineY);
90005d40:	682b      	ldr	r3, [r5, #0]
90005d42:	490f      	ldr	r1, [pc, #60]	; (90005d80 <_ZN8touchgfx8TextArea13setXBaselineYEss+0xa0>)
90005d44:	6e5c      	ldr	r4, [r3, #100]	; 0x64
90005d46:	428c      	cmp	r4, r1
90005d48:	d0d8      	beq.n	90005cfc <_ZN8touchgfx8TextArea13setXBaselineYEss+0x1c>
90005d4a:	4641      	mov	r1, r8
90005d4c:	4628      	mov	r0, r5
90005d4e:	4623      	mov	r3, r4
    }
90005d50:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        setBaselineY(baselineY);
90005d54:	4718      	bx	r3
        setY(baselineY - getTypedText().getFont()->getBaseline());
90005d56:	4628      	mov	r0, r5
90005d58:	4633      	mov	r3, r6
    }
90005d5a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        setY(baselineY - getTypedText().getFont()->getBaseline());
90005d5e:	4718      	bx	r3
90005d60:	4798      	blx	r3
90005d62:	e7e3      	b.n	90005d2c <_ZN8touchgfx8TextArea13setXBaselineYEss+0x4c>
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
90005d64:	4b0c      	ldr	r3, [pc, #48]	; (90005d98 <_ZN8touchgfx8TextArea13setXBaselineYEss+0xb8>)
90005d66:	216d      	movs	r1, #109	; 0x6d
90005d68:	4a0c      	ldr	r2, [pc, #48]	; (90005d9c <_ZN8touchgfx8TextArea13setXBaselineYEss+0xbc>)
90005d6a:	480d      	ldr	r0, [pc, #52]	; (90005da0 <_ZN8touchgfx8TextArea13setXBaselineYEss+0xc0>)
90005d6c:	f021 fc72 	bl	90027654 <__assert_func>
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
90005d70:	4b0c      	ldr	r3, [pc, #48]	; (90005da4 <_ZN8touchgfx8TextArea13setXBaselineYEss+0xc4>)
90005d72:	216c      	movs	r1, #108	; 0x6c
90005d74:	4a09      	ldr	r2, [pc, #36]	; (90005d9c <_ZN8touchgfx8TextArea13setXBaselineYEss+0xbc>)
90005d76:	480a      	ldr	r0, [pc, #40]	; (90005da0 <_ZN8touchgfx8TextArea13setXBaselineYEss+0xc0>)
90005d78:	f021 fc6c 	bl	90027654 <__assert_func>
90005d7c:	90002351 	.word	0x90002351
90005d80:	90005bcd 	.word	0x90005bcd
90005d84:	24028244 	.word	0x24028244
90005d88:	24028248 	.word	0x24028248
90005d8c:	2402824c 	.word	0x2402824c
90005d90:	90004edd 	.word	0x90004edd
90005d94:	90002355 	.word	0x90002355
90005d98:	9002ad4c 	.word	0x9002ad4c
90005d9c:	9002acc8 	.word	0x9002acc8
90005da0:	9002ad04 	.word	0x9002ad04
90005da4:	9002ac84 	.word	0x9002ac84

90005da8 <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE>:
     *
     * @return The click type of this event.
     */
    ClickEventType getType() const
    {
        return clickEventType;
90005da8:	790b      	ldrb	r3, [r1, #4]
     */
    virtual void handleClickEvent(const ClickEvent& event)
    {
        bool wasPressed = getPressed();
        bool newPressedValue = (event.getType() == ClickEvent::PRESSED);
        if ((newPressedValue && !wasPressed) || (!newPressedValue && wasPressed))
90005daa:	1e1a      	subs	r2, r3, #0
    virtual void handleClickEvent(const ClickEvent& event)
90005dac:	b570      	push	{r4, r5, r6, lr}
        if ((newPressedValue && !wasPressed) || (!newPressedValue && wasPressed))
90005dae:	bf18      	it	ne
90005db0:	2201      	movne	r2, #1
        return pressed;
90005db2:	f890 602c 	ldrb.w	r6, [r0, #44]	; 0x2c
    virtual void handleClickEvent(const ClickEvent& event)
90005db6:	460d      	mov	r5, r1
90005db8:	4604      	mov	r4, r0
        if ((newPressedValue && !wasPressed) || (!newPressedValue && wasPressed))
90005dba:	42b2      	cmp	r2, r6
90005dbc:	d004      	beq.n	90005dc8 <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x20>
        {
            setPressed(newPressedValue);
            invalidate();
        }
        if (wasPressed && (event.getType() == ClickEvent::RELEASED))
90005dbe:	b116      	cbz	r6, 90005dc6 <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x1e>
90005dc0:	792b      	ldrb	r3, [r5, #4]
90005dc2:	2b01      	cmp	r3, #1
90005dc4:	d00e      	beq.n	90005de4 <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x3c>
        {
            executeAction();
        }
    }
90005dc6:	bd70      	pop	{r4, r5, r6, pc}
        bool newPressedValue = (event.getType() == ClickEvent::PRESSED);
90005dc8:	fab3 f383 	clz	r3, r3
90005dcc:	095b      	lsrs	r3, r3, #5
90005dce:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
        handlePressedUpdated();
90005dd2:	6803      	ldr	r3, [r0, #0]
90005dd4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
90005dd8:	4798      	blx	r3
            invalidate();
90005dda:	6823      	ldr	r3, [r4, #0]
90005ddc:	4620      	mov	r0, r4
90005dde:	695b      	ldr	r3, [r3, #20]
90005de0:	4798      	blx	r3
90005de2:	e7ec      	b.n	90005dbe <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x16>
            executeAction();
90005de4:	6823      	ldr	r3, [r4, #0]
90005de6:	4a20      	ldr	r2, [pc, #128]	; (90005e68 <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0xc0>)
90005de8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
90005dec:	4293      	cmp	r3, r2
90005dee:	d127      	bne.n	90005e40 <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x98>
        if (action && action->isValid())
90005df0:	6b23      	ldr	r3, [r4, #48]	; 0x30
90005df2:	2b00      	cmp	r3, #0
90005df4:	d0e7      	beq.n	90005dc6 <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x1e>
90005df6:	6819      	ldr	r1, [r3, #0]
90005df8:	481c      	ldr	r0, [pc, #112]	; (90005e6c <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0xc4>)
90005dfa:	68ca      	ldr	r2, [r1, #12]
90005dfc:	4282      	cmp	r2, r0
90005dfe:	d123      	bne.n	90005e48 <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0xa0>
        return (pobject != 0) && (pmemfun != 0);
90005e00:	685a      	ldr	r2, [r3, #4]
90005e02:	2a00      	cmp	r2, #0
90005e04:	d0df      	beq.n	90005dc6 <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x1e>
90005e06:	689d      	ldr	r5, [r3, #8]
90005e08:	b175      	cbz	r5, 90005e28 <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x80>
            action->execute(*this);
90005e0a:	688e      	ldr	r6, [r1, #8]
90005e0c:	4a18      	ldr	r2, [pc, #96]	; (90005e70 <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0xc8>)
90005e0e:	4296      	cmp	r6, r2
90005e10:	d123      	bne.n	90005e5a <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0xb2>
        (pobject->*pmemfun)(t1);
90005e12:	68d9      	ldr	r1, [r3, #12]
90005e14:	685a      	ldr	r2, [r3, #4]
90005e16:	eb02 0061 	add.w	r0, r2, r1, asr #1
90005e1a:	07ca      	lsls	r2, r1, #31
90005e1c:	d41b      	bmi.n	90005e56 <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0xae>
90005e1e:	689b      	ldr	r3, [r3, #8]
90005e20:	4621      	mov	r1, r4
    }
90005e22:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
90005e26:	4718      	bx	r3
        return (pobject != 0) && (pmemfun != 0);
90005e28:	68d8      	ldr	r0, [r3, #12]
90005e2a:	07c6      	lsls	r6, r0, #31
90005e2c:	d5cb      	bpl.n	90005dc6 <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x1e>
90005e2e:	688e      	ldr	r6, [r1, #8]
90005e30:	490f      	ldr	r1, [pc, #60]	; (90005e70 <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0xc8>)
90005e32:	428e      	cmp	r6, r1
90005e34:	d111      	bne.n	90005e5a <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0xb2>
        (pobject->*pmemfun)(t1);
90005e36:	eb02 0060 	add.w	r0, r2, r0, asr #1
90005e3a:	6803      	ldr	r3, [r0, #0]
90005e3c:	595b      	ldr	r3, [r3, r5]
90005e3e:	e7ef      	b.n	90005e20 <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x78>
            executeAction();
90005e40:	4620      	mov	r0, r4
    }
90005e42:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            executeAction();
90005e46:	4718      	bx	r3
        if (action && action->isValid())
90005e48:	4618      	mov	r0, r3
90005e4a:	4790      	blx	r2
90005e4c:	2800      	cmp	r0, #0
90005e4e:	d0ba      	beq.n	90005dc6 <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x1e>
            action->execute(*this);
90005e50:	6b23      	ldr	r3, [r4, #48]	; 0x30
90005e52:	6819      	ldr	r1, [r3, #0]
90005e54:	e7d9      	b.n	90005e0a <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x62>
90005e56:	689d      	ldr	r5, [r3, #8]
90005e58:	e7ef      	b.n	90005e3a <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x92>
90005e5a:	4621      	mov	r1, r4
90005e5c:	4618      	mov	r0, r3
90005e5e:	4633      	mov	r3, r6
    }
90005e60:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
90005e64:	4718      	bx	r3
90005e66:	bf00      	nop
90005e68:	90005c61 	.word	0x90005c61
90005e6c:	90005b51 	.word	0x90005b51
90005e70:	90005b25 	.word	0x90005b25

90005e74 <_ZN15Screen1ViewBaseC1Ev>:
Screen1ViewBase::Screen1ViewBase() :
90005e74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90005e78:	b087      	sub	sp, #28
90005e7a:	4604      	mov	r4, r0
        : presenter(0)
90005e7c:	f013 fd40 	bl	90019900 <_ZN8touchgfx6ScreenC1Ev>
    flexButtonCallback(this, &Screen1ViewBase::flexButtonCallbackHandler)
90005e80:	4adf      	ldr	r2, [pc, #892]	; (90006200 <_ZN15Screen1ViewBaseC1Ev+0x38c>)
class Box : public Widget
{
public:
    /** Construct a new Box with a default alpha value of 255 (solid) */
    Box()
        : Widget(), alpha(255), color(0)
90005e82:	4be0      	ldr	r3, [pc, #896]	; (90006204 <_ZN15Screen1ViewBaseC1Ev+0x390>)
90005e84:	2600      	movs	r6, #0
          touchable(false),
90005e86:	f44f 7780 	mov.w	r7, #256	; 0x100
90005e8a:	f104 086c 	add.w	r8, r4, #108	; 0x6c
     * array.
     *
     * @param  id (Optional) The unique bitmap identifier.
     */
    Bitmap(const BitmapId id = BITMAP_INVALID)
        : bitmapId(id)
90005e8e:	f64f 75ff 	movw	r5, #65535	; 0xffff
90005e92:	6022      	str	r2, [r4, #0]
90005e94:	6423      	str	r3, [r4, #64]	; 0x40
90005e96:	22ff      	movs	r2, #255	; 0xff
     * @param   bmp (Optional) The bitmap to display.
     *
     * @see setBitmap
     */
    Image(const Bitmap& bmp = Bitmap())
        : Widget(), bitmap(bmp), alpha(255)
90005e98:	4bdb      	ldr	r3, [pc, #876]	; (90006208 <_ZN15Screen1ViewBaseC1Ev+0x394>)
    {
        Image::setBitmap(bmp);
90005e9a:	4640      	mov	r0, r8
90005e9c:	a904      	add	r1, sp, #16
90005e9e:	f8a4 7064 	strh.w	r7, [r4, #100]	; 0x64
90005ea2:	f884 2066 	strb.w	r2, [r4, #102]	; 0x66
     * @note The bitmaps to display must be configured through set setBitmaps function before this
     *       widget displays anything.
     */
    AnimatedImage(const uint8_t& updateInterval = 1)
        : animationDoneAction(0),
          startId(BITMAP_INVALID),
90005ea6:	f04f 3bff 	mov.w	fp, #4294967295
90005eaa:	f8a4 7090 	strh.w	r7, [r4, #144]	; 0x90
          endId(BITMAP_INVALID),
          updateTicksInterval(updateInterval),
90005eae:	f04f 0901 	mov.w	r9, #1
        : Widget(), bitmap(bmp), alpha(255)
90005eb2:	f8a4 5092 	strh.w	r5, [r4, #146]	; 0x92
90005eb6:	f504 7aa0 	add.w	sl, r4, #320	; 0x140
90005eba:	f884 5094 	strb.w	r5, [r4, #148]	; 0x94
90005ebe:	66e3      	str	r3, [r4, #108]	; 0x6c
90005ec0:	63e6      	str	r6, [r4, #60]	; 0x3c
        : x(0), y(0), width(0), height(0)
90005ec2:	6466      	str	r6, [r4, #68]	; 0x44
          cachedAbsX(0),
90005ec4:	6626      	str	r6, [r4, #96]	; 0x60
        : color(col)
90005ec6:	66a6      	str	r6, [r4, #104]	; 0x68
90005ec8:	f8ad 5010 	strh.w	r5, [sp, #16]
        : x(0), y(0), width(0), height(0)
90005ecc:	e9c4 6612 	strd	r6, r6, [r4, #72]	; 0x48
          parent(0),
90005ed0:	e9c4 6614 	strd	r6, r6, [r4, #80]	; 0x50
          nextDrawChainElement(0),
90005ed4:	e9c4 6616 	strd	r6, r6, [r4, #88]	; 0x58
90005ed8:	e9c4 661c 	strd	r6, r6, [r4, #112]	; 0x70
90005edc:	e9c4 661e 	strd	r6, r6, [r4, #120]	; 0x78
          nextSibling(0),
90005ee0:	e9c4 6620 	strd	r6, r6, [r4, #128]	; 0x80
          cachedAbsX(0),
90005ee4:	e9c4 6622 	strd	r6, r6, [r4, #136]	; 0x88
        Image::setBitmap(bmp);
90005ee8:	f00f fd8d 	bl	90015a06 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
        : typedTextId(id)
90005eec:	4bc7      	ldr	r3, [pc, #796]	; (9000620c <_ZN15Screen1ViewBaseC1Ev+0x398>)
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE), boundingArea()
90005eee:	22ff      	movs	r2, #255	; 0xff
        : TextAreaWithWildcardBase(), wc1(0)
90005ef0:	49c7      	ldr	r1, [pc, #796]	; (90006210 <_ZN15Screen1ViewBaseC1Ev+0x39c>)
          ticksSinceUpdate(0),
          reverse(false),
          loopAnimation(false),
          running(false)
90005ef2:	48c8      	ldr	r0, [pc, #800]	; (90006214 <_ZN15Screen1ViewBaseC1Ev+0x3a0>)
90005ef4:	f8c4 30d0 	str.w	r3, [r4, #208]	; 0xd0
90005ef8:	f8c4 20de 	str.w	r2, [r4, #222]	; 0xde
          touchable(false),
90005efc:	f8a4 70cc 	strh.w	r7, [r4, #204]	; 0xcc
90005f00:	f8c4 10a8 	str.w	r1, [r4, #168]	; 0xa8
90005f04:	66e0      	str	r0, [r4, #108]	; 0x6c
        T::add(text);
90005f06:	4650      	mov	r0, sl
90005f08:	f884 60a4 	strb.w	r6, [r4, #164]	; 0xa4
90005f0c:	f8a4 b0d4 	strh.w	fp, [r4, #212]	; 0xd4
        : color(col)
90005f10:	f8c4 60d8 	str.w	r6, [r4, #216]	; 0xd8
90005f14:	f8a4 60dc 	strh.w	r6, [r4, #220]	; 0xdc
          updateTicksInterval(updateInterval),
90005f18:	f8c4 90a0 	str.w	r9, [r4, #160]	; 0xa0
          startId(BITMAP_INVALID),
90005f1c:	e9c4 6b26 	strd	r6, fp, [r4, #152]	; 0x98
        : x(0), y(0), width(0), height(0)
90005f20:	e9c4 662b 	strd	r6, r6, [r4, #172]	; 0xac
90005f24:	e9c4 662d 	strd	r6, r6, [r4, #180]	; 0xb4
          nextSibling(0),
90005f28:	e9c4 662f 	strd	r6, r6, [r4, #188]	; 0xbc
          cachedAbsX(0),
90005f2c:	e9c4 6631 	strd	r6, r6, [r4, #196]	; 0xc4
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
90005f30:	e9c4 6b39 	strd	r6, fp, [r4, #228]	; 0xe4
90005f34:	e9c4 663b 	strd	r6, r6, [r4, #236]	; 0xec
        : x(0), y(0), width(0), height(0)
90005f38:	e9c4 663e 	strd	r6, r6, [r4, #248]	; 0xf8
90005f3c:	e9c4 6640 	strd	r6, r6, [r4, #256]	; 0x100
          nextSibling(0),
90005f40:	e9c4 6642 	strd	r6, r6, [r4, #264]	; 0x108
          cachedAbsX(0),
90005f44:	e9c4 6644 	strd	r6, r6, [r4, #272]	; 0x110
          touchable(false),
90005f48:	f8a4 7118 	strh.w	r7, [r4, #280]	; 0x118
90005f4c:	f8c4 10f4 	str.w	r1, [r4, #244]	; 0xf4
        : pressed(false), alpha(255), action(0)
90005f50:	f44f 417f 	mov.w	r1, #65280	; 0xff00
90005f54:	f8c4 311c 	str.w	r3, [r4, #284]	; 0x11c
90005f58:	f8a4 116c 	strh.w	r1, [r4, #364]	; 0x16c
        touchable = touch;
90005f5c:	f240 1101 	movw	r1, #257	; 0x101
90005f60:	f8c4 212a 	str.w	r2, [r4, #298]	; 0x12a
90005f64:	f8a4 1164 	strh.w	r1, [r4, #356]	; 0x164
        : T()
90005f68:	49ab      	ldr	r1, [pc, #684]	; (90006218 <_ZN15Screen1ViewBaseC1Ev+0x3a4>)
          touchable(false),
90005f6a:	f8a4 7198 	strh.w	r7, [r4, #408]	; 0x198
     * @note Must not be called with a Drawable that was already added to the screen. If in doubt,
     *       call remove() first.
     */
    void add(Drawable& d)
    {
        container.add(d);
90005f6e:	1d27      	adds	r7, r4, #4
90005f70:	f8c4 1140 	str.w	r1, [r4, #320]	; 0x140
90005f74:	49a9      	ldr	r1, [pc, #676]	; (9000621c <_ZN15Screen1ViewBaseC1Ev+0x3a8>)
90005f76:	f8a4 5120 	strh.w	r5, [r4, #288]	; 0x120
        : color(col)
90005f7a:	f8c4 6124 	str.w	r6, [r4, #292]	; 0x124
90005f7e:	f8a4 6128 	strh.w	r6, [r4, #296]	; 0x128
          firstChild(0)
90005f82:	f8c4 6168 	str.w	r6, [r4, #360]	; 0x168
90005f86:	f8c4 6170 	str.w	r6, [r4, #368]	; 0x170
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
90005f8a:	e9c4 6b4c 	strd	r6, fp, [r4, #304]	; 0x130
90005f8e:	e9c4 664e 	strd	r6, r6, [r4, #312]	; 0x138
        : x(0), y(0), width(0), height(0)
90005f92:	e9c4 6651 	strd	r6, r6, [r4, #324]	; 0x144
90005f96:	e9c4 6653 	strd	r6, r6, [r4, #332]	; 0x14c
          nextSibling(0),
90005f9a:	e9c4 6655 	strd	r6, r6, [r4, #340]	; 0x154
          cachedAbsX(0),
90005f9e:	e9c4 6657 	strd	r6, r6, [r4, #348]	; 0x15c
90005fa2:	e9c4 665e 	strd	r6, r6, [r4, #376]	; 0x178
90005fa6:	e9c4 6660 	strd	r6, r6, [r4, #384]	; 0x180
          nextSibling(0),
90005faa:	e9c4 6662 	strd	r6, r6, [r4, #392]	; 0x188
          cachedAbsX(0),
90005fae:	e9c4 6664 	strd	r6, r6, [r4, #400]	; 0x190
90005fb2:	f8c4 1174 	str.w	r1, [r4, #372]	; 0x174
90005fb6:	f8a4 51a0 	strh.w	r5, [r4, #416]	; 0x1a0
        T::add(text);
90005fba:	f504 75ba 	add.w	r5, r4, #372	; 0x174
90005fbe:	f8c4 319c 	str.w	r3, [r4, #412]	; 0x19c
90005fc2:	4629      	mov	r1, r5
90005fc4:	f8c4 21aa 	str.w	r2, [r4, #426]	; 0x1aa
        : color(col)
90005fc8:	f8c4 61a4 	str.w	r6, [r4, #420]	; 0x1a4
90005fcc:	f8a4 61a8 	strh.w	r6, [r4, #424]	; 0x1a8
        : color(0)
90005fd0:	f8c4 61c0 	str.w	r6, [r4, #448]	; 0x1c0
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
90005fd4:	e9c4 6b6c 	strd	r6, fp, [r4, #432]	; 0x1b0
        : color(0)
90005fd8:	e9c4 666e 	strd	r6, r6, [r4, #440]	; 0x1b8
90005fdc:	f00c fd66 	bl	90012aac <_ZN8touchgfx9Container3addERNS_8DrawableE>
        : pobject(pObject), pmemfun(pmemfun_1)
90005fe0:	4a8f      	ldr	r2, [pc, #572]	; (90006220 <_ZN15Screen1ViewBaseC1Ev+0x3ac>)
90005fe2:	f104 0140 	add.w	r1, r4, #64	; 0x40
90005fe6:	4638      	mov	r0, r7
90005fe8:	f8c4 21d4 	str.w	r2, [r4, #468]	; 0x1d4
90005fec:	4a8d      	ldr	r2, [pc, #564]	; (90006224 <_ZN15Screen1ViewBaseC1Ev+0x3b0>)
90005fee:	f8c4 41d8 	str.w	r4, [r4, #472]	; 0x1d8
90005ff2:	f8c4 21dc 	str.w	r2, [r4, #476]	; 0x1dc
        rect.x = x;
90005ff6:	4a8c      	ldr	r2, [pc, #560]	; (90006228 <_ZN15Screen1ViewBaseC1Ev+0x3b4>)
90005ff8:	f8c4 61e0 	str.w	r6, [r4, #480]	; 0x1e0
90005ffc:	64a2      	str	r2, [r4, #72]	; 0x48
     *
     * @see getColor, Color::getColorFromRGB
     */
    void setColor(colortype newColor)
    {
        color = newColor;
90005ffe:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
90006002:	6466      	str	r6, [r4, #68]	; 0x44
90006004:	66a2      	str	r2, [r4, #104]	; 0x68
90006006:	f00c fd51 	bl	90012aac <_ZN8touchgfx9Container3addERNS_8DrawableE>
9000600a:	4a88      	ldr	r2, [pc, #544]	; (9000622c <_ZN15Screen1ViewBaseC1Ev+0x3b8>)
    animatedImage1.setBitmaps(BITMAP_FRAME_00_DELAY_0_05S_ID, BITMAP_FRAME_07_DELAY_0_05S_ID);
9000600c:	4640      	mov	r0, r8
9000600e:	4631      	mov	r1, r6
90006010:	6722      	str	r2, [r4, #112]	; 0x70
90006012:	2207      	movs	r2, #7
90006014:	f00f f88c 	bl	90015130 <_ZN8touchgfx13AnimatedImage10setBitmapsEtt>
    animatedImage1.setUpdateTicksInterval(6);
90006018:	4640      	mov	r0, r8
9000601a:	2106      	movs	r1, #6
9000601c:	f00f f89b 	bl	90015156 <_ZN8touchgfx13AnimatedImage22setUpdateTicksIntervalEh>
    animatedImage1.startAnimation(false, true, true);
90006020:	464b      	mov	r3, r9
90006022:	464a      	mov	r2, r9
90006024:	4640      	mov	r0, r8
90006026:	4631      	mov	r1, r6
90006028:	f00e ffda 	bl	90014fe0 <_ZN8touchgfx13AnimatedImage14startAnimationEbbb>
9000602c:	4641      	mov	r1, r8
9000602e:	4638      	mov	r0, r7
    humidityTextArea.setXY(20, 48);
90006030:	f104 08a8 	add.w	r8, r4, #168	; 0xa8
90006034:	f00c fd3a 	bl	90012aac <_ZN8touchgfx9Container3addERNS_8DrawableE>
90006038:	4a7d      	ldr	r2, [pc, #500]	; (90006230 <_ZN15Screen1ViewBaseC1Ev+0x3bc>)
        setX(x);
9000603a:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
        color = newColor;
9000603e:	f8c4 b0d8 	str.w	fp, [r4, #216]	; 0xd8
        boundingArea = calculateBoundingArea();
90006042:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
        rect.x = x;
90006046:	f8c4 20ac 	str.w	r2, [r4, #172]	; 0xac
9000604a:	4a7a      	ldr	r2, [pc, #488]	; (90006234 <_ZN15Screen1ViewBaseC1Ev+0x3c0>)
        linespace = space;
9000604c:	f8a4 60dc 	strh.w	r6, [r4, #220]	; 0xdc
90006050:	4293      	cmp	r3, r2
90006052:	f040 810c 	bne.w	9000626e <_ZN15Screen1ViewBaseC1Ev+0x3fa>
        boundingArea = calculateBoundingArea();
90006056:	f8c4 60ec 	str.w	r6, [r4, #236]	; 0xec
9000605a:	e9c4 6b39 	strd	r6, fp, [r4, #228]	; 0xe4
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
9000605e:	f8df b1f4 	ldr.w	fp, [pc, #500]	; 90006254 <_ZN15Screen1ViewBaseC1Ev+0x3e0>
    Unicode::snprintf(humidityTextAreaBuffer, HUMIDITYTEXTAREA_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_YZZO).getText());
90006062:	f504 76e2 	add.w	r6, r4, #452	; 0x1c4
90006066:	f8db 3000 	ldr.w	r3, [fp]
9000606a:	2b00      	cmp	r3, #0
9000606c:	f000 8122 	beq.w	900062b4 <_ZN15Screen1ViewBaseC1Ev+0x440>
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
90006070:	4b71      	ldr	r3, [pc, #452]	; (90006238 <_ZN15Screen1ViewBaseC1Ev+0x3c4>)
90006072:	881b      	ldrh	r3, [r3, #0]
90006074:	2b08      	cmp	r3, #8
90006076:	f240 8123 	bls.w	900062c0 <_ZN15Screen1ViewBaseC1Ev+0x44c>
        return texts->getText(typedTextId);
9000607a:	4b70      	ldr	r3, [pc, #448]	; (9000623c <_ZN15Screen1ViewBaseC1Ev+0x3c8>)
9000607c:	2108      	movs	r1, #8
    temperatureTextArea.setXY(20, 15);
9000607e:	f104 09f4 	add.w	r9, r4, #244	; 0xf4
90006082:	6818      	ldr	r0, [r3, #0]
90006084:	f002 f8e6 	bl	90008254 <_ZNK8touchgfx5Texts7getTextEt>
    Unicode::snprintf(humidityTextAreaBuffer, HUMIDITYTEXTAREA_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_YZZO).getText());
90006088:	4a6d      	ldr	r2, [pc, #436]	; (90006240 <_ZN15Screen1ViewBaseC1Ev+0x3cc>)
9000608a:	4603      	mov	r3, r0
9000608c:	2104      	movs	r1, #4
9000608e:	4630      	mov	r0, r6
90006090:	f015 f8f4 	bl	9001b27c <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    humidityTextArea.resizeToCurrentText();
90006094:	4640      	mov	r0, r8
        wc1 = value;
90006096:	f8c4 60f0 	str.w	r6, [r4, #240]	; 0xf0
9000609a:	f00f fbcd 	bl	90015838 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
        : typedTextId(id)
9000609e:	4b5b      	ldr	r3, [pc, #364]	; (9000620c <_ZN15Screen1ViewBaseC1Ev+0x398>)
    humidityTextArea.setTypedText(touchgfx::TypedText(T___SINGLEUSE_Y9RM));
900060a0:	a904      	add	r1, sp, #16
900060a2:	4640      	mov	r0, r8
900060a4:	9304      	str	r3, [sp, #16]
900060a6:	2309      	movs	r3, #9
900060a8:	f8ad 3014 	strh.w	r3, [sp, #20]
900060ac:	f00f fbe4 	bl	90015878 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
900060b0:	4641      	mov	r1, r8
900060b2:	4638      	mov	r0, r7
900060b4:	f00c fcfa 	bl	90012aac <_ZN8touchgfx9Container3addERNS_8DrawableE>
        setX(x);
900060b8:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
        setY(y);
900060bc:	485d      	ldr	r0, [pc, #372]	; (90006234 <_ZN15Screen1ViewBaseC1Ev+0x3c0>)
        color = newColor;
900060be:	f04f 31ff 	mov.w	r1, #4294967295
        boundingArea = calculateBoundingArea();
900060c2:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
        rect.x = x;
900060c6:	4b5f      	ldr	r3, [pc, #380]	; (90006244 <_ZN15Screen1ViewBaseC1Ev+0x3d0>)
900060c8:	4282      	cmp	r2, r0
        color = newColor;
900060ca:	f8c4 1124 	str.w	r1, [r4, #292]	; 0x124
900060ce:	f8c4 30f8 	str.w	r3, [r4, #248]	; 0xf8
        linespace = space;
900060d2:	f04f 0300 	mov.w	r3, #0
900060d6:	f8a4 3128 	strh.w	r3, [r4, #296]	; 0x128
        boundingArea = calculateBoundingArea();
900060da:	f040 80d3 	bne.w	90006284 <_ZN15Screen1ViewBaseC1Ev+0x410>
900060de:	f8c4 3138 	str.w	r3, [r4, #312]	; 0x138
900060e2:	e9c4 314c 	strd	r3, r1, [r4, #304]	; 0x130
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
900060e6:	f8db 3000 	ldr.w	r3, [fp]
    Unicode::snprintf(temperatureTextAreaBuffer, TEMPERATURETEXTAREA_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_1MEA).getText());
900060ea:	f504 78e6 	add.w	r8, r4, #460	; 0x1cc
900060ee:	2b00      	cmp	r3, #0
900060f0:	f000 80e0 	beq.w	900062b4 <_ZN15Screen1ViewBaseC1Ev+0x440>
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
900060f4:	4b50      	ldr	r3, [pc, #320]	; (90006238 <_ZN15Screen1ViewBaseC1Ev+0x3c4>)
900060f6:	881b      	ldrh	r3, [r3, #0]
900060f8:	2b0a      	cmp	r3, #10
900060fa:	f240 80e1 	bls.w	900062c0 <_ZN15Screen1ViewBaseC1Ev+0x44c>
        return texts->getText(typedTextId);
900060fe:	4b4f      	ldr	r3, [pc, #316]	; (9000623c <_ZN15Screen1ViewBaseC1Ev+0x3c8>)
90006100:	210a      	movs	r1, #10
        : typedTextId(id)
90006102:	4e42      	ldr	r6, [pc, #264]	; (9000620c <_ZN15Screen1ViewBaseC1Ev+0x398>)
        return texts->getText(typedTextId);
90006104:	6818      	ldr	r0, [r3, #0]
90006106:	f002 f8a5 	bl	90008254 <_ZNK8touchgfx5Texts7getTextEt>
9000610a:	4a4d      	ldr	r2, [pc, #308]	; (90006240 <_ZN15Screen1ViewBaseC1Ev+0x3cc>)
9000610c:	4603      	mov	r3, r0
9000610e:	2104      	movs	r1, #4
90006110:	4640      	mov	r0, r8
90006112:	f015 f8b3 	bl	9001b27c <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    temperatureTextArea.resizeToCurrentText();
90006116:	4648      	mov	r0, r9
90006118:	f8c4 813c 	str.w	r8, [r4, #316]	; 0x13c
        boundingArea = calculateBoundingArea();
9000611c:	f105 083c 	add.w	r8, r5, #60	; 0x3c
90006120:	f00f fb8a 	bl	90015838 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
        : typedTextId(id)
90006124:	230b      	movs	r3, #11
    temperatureTextArea.setTypedText(touchgfx::TypedText(T___SINGLEUSE_9J1Y));
90006126:	4648      	mov	r0, r9
90006128:	a904      	add	r1, sp, #16
9000612a:	f8ad 3014 	strh.w	r3, [sp, #20]
9000612e:	9604      	str	r6, [sp, #16]
90006130:	f00f fba2 	bl	90015878 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
90006134:	4649      	mov	r1, r9
90006136:	4638      	mov	r0, r7
90006138:	f00c fcb8 	bl	90012aac <_ZN8touchgfx9Container3addERNS_8DrawableE>
9000613c:	2301      	movs	r3, #1
        text.setTypedText(t);
9000613e:	a904      	add	r1, sp, #16
90006140:	4628      	mov	r0, r5
90006142:	9604      	str	r6, [sp, #16]
90006144:	466e      	mov	r6, sp
90006146:	f8ad 3014 	strh.w	r3, [sp, #20]
9000614a:	f00f fb95 	bl	90015878 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
        rect.width = width;
9000614e:	f8b4 3148 	ldrh.w	r3, [r4, #328]	; 0x148
90006152:	4629      	mov	r1, r5
90006154:	4630      	mov	r0, r6
        return rect.height;
90006156:	f9b4 914a 	ldrsh.w	r9, [r4, #330]	; 0x14a
        rect.width = width;
9000615a:	f8a4 317c 	strh.w	r3, [r4, #380]	; 0x17c
9000615e:	f00f f8e3 	bl	90015328 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
90006162:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
90006166:	e888 0007 	stmia.w	r8, {r0, r1, r2}
        boundingArea = calculateBoundingArea();
9000616a:	4629      	mov	r1, r5
9000616c:	4630      	mov	r0, r6
        rect.height = height;
9000616e:	f8a4 917e 	strh.w	r9, [r4, #382]	; 0x17e
90006172:	f00f f8d9 	bl	90015328 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
        setX(x);
90006176:	f8d4 3174 	ldr.w	r3, [r4, #372]	; 0x174
9000617a:	f8df c0dc 	ldr.w	ip, [pc, #220]	; 90006258 <_ZN15Screen1ViewBaseC1Ev+0x3e4>
        rect.x = x;
9000617e:	f04f 0e00 	mov.w	lr, #0
        setWidth(width);
90006182:	6b9b      	ldr	r3, [r3, #56]	; 0x38
90006184:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
90006188:	4563      	cmp	r3, ip
9000618a:	e888 0007 	stmia.w	r8, {r0, r1, r2}
        rect.x = x;
9000618e:	f8c4 e178 	str.w	lr, [r4, #376]	; 0x178
        setWidth(width);
90006192:	f040 8082 	bne.w	9000629a <_ZN15Screen1ViewBaseC1Ev+0x426>
        rect.width = width;
90006196:	23a6      	movs	r3, #166	; 0xa6
        boundingArea = calculateBoundingArea();
90006198:	4629      	mov	r1, r5
9000619a:	4630      	mov	r0, r6
9000619c:	f8a4 317c 	strh.w	r3, [r4, #380]	; 0x17c
900061a0:	f00f f8c2 	bl	90015328 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
        setHeight(height);
900061a4:	f8d4 3174 	ldr.w	r3, [r4, #372]	; 0x174
900061a8:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
900061ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
900061ae:	e888 0007 	stmia.w	r8, {r0, r1, r2}
900061b2:	4a25      	ldr	r2, [pc, #148]	; (90006248 <_ZN15Screen1ViewBaseC1Ev+0x3d4>)
900061b4:	4293      	cmp	r3, r2
900061b6:	d179      	bne.n	900062ac <_ZN15Screen1ViewBaseC1Ev+0x438>
        rect.height = height;
900061b8:	231d      	movs	r3, #29
        boundingArea = calculateBoundingArea();
900061ba:	4629      	mov	r1, r5
900061bc:	4630      	mov	r0, r6
900061be:	f8a4 317e 	strh.w	r3, [r4, #382]	; 0x17e
900061c2:	f00f f8b1 	bl	90015328 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
900061c6:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
900061ca:	e888 0007 	stmia.w	r8, {r0, r1, r2}
        text.setColor(T::getPressed() ? colorPressed : colorReleased);
900061ce:	f894 116c 	ldrb.w	r1, [r4, #364]	; 0x16c
        colorReleased = newColorReleased;
900061d2:	f04f 32ff 	mov.w	r2, #4294967295
        colorPressed = newColorPressed;
900061d6:	4b1d      	ldr	r3, [pc, #116]	; (9000624c <_ZN15Screen1ViewBaseC1Ev+0x3d8>)
900061d8:	4638      	mov	r0, r7
        text.setColor(T::getPressed() ? colorPressed : colorReleased);
900061da:	2900      	cmp	r1, #0
        colorReleased = newColorReleased;
900061dc:	f8c4 21bc 	str.w	r2, [r4, #444]	; 0x1bc
        colorPressed = newColorPressed;
900061e0:	f8c4 31c0 	str.w	r3, [r4, #448]	; 0x1c0
900061e4:	4651      	mov	r1, sl
        text.setColor(T::getPressed() ? colorPressed : colorReleased);
900061e6:	bf08      	it	eq
900061e8:	4613      	moveq	r3, r2
    temperatureButton.setAction(flexButtonCallback);
900061ea:	f504 72ea 	add.w	r2, r4, #468	; 0x1d4
        color = newColor;
900061ee:	f8c4 31a4 	str.w	r3, [r4, #420]	; 0x1a4
        rect.x = x;
900061f2:	4b17      	ldr	r3, [pc, #92]	; (90006250 <_ZN15Screen1ViewBaseC1Ev+0x3dc>)
        action = &callback;
900061f4:	f8c4 2170 	str.w	r2, [r4, #368]	; 0x170
900061f8:	f8c4 3144 	str.w	r3, [r4, #324]	; 0x144
900061fc:	e02e      	b.n	9000625c <_ZN15Screen1ViewBaseC1Ev+0x3e8>
900061fe:	bf00      	nop
90006200:	9002af14 	.word	0x9002af14
90006204:	9002c298 	.word	0x9002c298
90006208:	9002c300 	.word	0x9002c300
9000620c:	9002a5f8 	.word	0x9002a5f8
90006210:	9002add0 	.word	0x9002add0
90006214:	9002c18c 	.word	0x9002c18c
90006218:	9002ae60 	.word	0x9002ae60
9000621c:	9002c208 	.word	0x9002c208
90006220:	9002aefc 	.word	0x9002aefc
90006224:	90005bb5 	.word	0x90005bb5
90006228:	011001e0 	.word	0x011001e0
9000622c:	ffb6ffa8 	.word	0xffb6ffa8
90006230:	00300014 	.word	0x00300014
90006234:	90005ae1 	.word	0x90005ae1
90006238:	24028248 	.word	0x24028248
9000623c:	24028250 	.word	0x24028250
90006240:	9002adc4 	.word	0x9002adc4
90006244:	000f0014 	.word	0x000f0014
90006248:	90005a95 	.word	0x90005a95
9000624c:	ff9e9d9d 	.word	0xff9e9d9d
90006250:	00e50014 	.word	0x00e50014
90006254:	24028244 	.word	0x24028244
90006258:	90005a6d 	.word	0x90005a6d
9000625c:	4b1b      	ldr	r3, [pc, #108]	; (900062cc <_ZN15Screen1ViewBaseC1Ev+0x458>)
9000625e:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
90006262:	f00c fc23 	bl	90012aac <_ZN8touchgfx9Container3addERNS_8DrawableE>
}
90006266:	4620      	mov	r0, r4
90006268:	b007      	add	sp, #28
9000626a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        boundingArea = calculateBoundingArea();
9000626e:	46e9      	mov	r9, sp
90006270:	4641      	mov	r1, r8
90006272:	4648      	mov	r0, r9
90006274:	4798      	blx	r3
90006276:	f104 03e4 	add.w	r3, r4, #228	; 0xe4
9000627a:	e899 0007 	ldmia.w	r9, {r0, r1, r2}
9000627e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
90006282:	e6ec      	b.n	9000605e <_ZN15Screen1ViewBaseC1Ev+0x1ea>
90006284:	46e8      	mov	r8, sp
90006286:	4649      	mov	r1, r9
90006288:	4640      	mov	r0, r8
9000628a:	4790      	blx	r2
9000628c:	f504 7398 	add.w	r3, r4, #304	; 0x130
90006290:	e898 0007 	ldmia.w	r8, {r0, r1, r2}
90006294:	e883 0007 	stmia.w	r3, {r0, r1, r2}
90006298:	e725      	b.n	900060e6 <_ZN15Screen1ViewBaseC1Ev+0x272>
        setWidth(width);
9000629a:	21a6      	movs	r1, #166	; 0xa6
9000629c:	4628      	mov	r0, r5
9000629e:	4798      	blx	r3
        setHeight(height);
900062a0:	f8d4 3174 	ldr.w	r3, [r4, #372]	; 0x174
900062a4:	4a0a      	ldr	r2, [pc, #40]	; (900062d0 <_ZN15Screen1ViewBaseC1Ev+0x45c>)
900062a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
900062a8:	4293      	cmp	r3, r2
900062aa:	d085      	beq.n	900061b8 <_ZN15Screen1ViewBaseC1Ev+0x344>
900062ac:	4628      	mov	r0, r5
900062ae:	211d      	movs	r1, #29
900062b0:	4798      	blx	r3
900062b2:	e78c      	b.n	900061ce <_ZN15Screen1ViewBaseC1Ev+0x35a>
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
900062b4:	4b07      	ldr	r3, [pc, #28]	; (900062d4 <_ZN15Screen1ViewBaseC1Ev+0x460>)
900062b6:	2160      	movs	r1, #96	; 0x60
900062b8:	4a07      	ldr	r2, [pc, #28]	; (900062d8 <_ZN15Screen1ViewBaseC1Ev+0x464>)
900062ba:	4808      	ldr	r0, [pc, #32]	; (900062dc <_ZN15Screen1ViewBaseC1Ev+0x468>)
900062bc:	f021 f9ca 	bl	90027654 <__assert_func>
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
900062c0:	4b07      	ldr	r3, [pc, #28]	; (900062e0 <_ZN15Screen1ViewBaseC1Ev+0x46c>)
900062c2:	2161      	movs	r1, #97	; 0x61
900062c4:	4a04      	ldr	r2, [pc, #16]	; (900062d8 <_ZN15Screen1ViewBaseC1Ev+0x464>)
900062c6:	4805      	ldr	r0, [pc, #20]	; (900062dc <_ZN15Screen1ViewBaseC1Ev+0x468>)
900062c8:	f021 f9c4 	bl	90027654 <__assert_func>
900062cc:	001d00a6 	.word	0x001d00a6
900062d0:	90005a95 	.word	0x90005a95
900062d4:	9002ac84 	.word	0x9002ac84
900062d8:	9002ad8c 	.word	0x9002ad8c
900062dc:	9002ad04 	.word	0x9002ad04
900062e0:	9002ad4c 	.word	0x9002ad4c

900062e4 <_ZN8touchgfx17AbstractDataGraph8setAlphaEh>:
     *
     * @note All graph elements have to take this alpha into consideration.
     */
    virtual void setAlpha(uint8_t newAlpha)
    {
        alpha = newAlpha;
900062e4:	f880 102c 	strb.w	r1, [r0, #44]	; 0x2c
    }
900062e8:	4770      	bx	lr
900062ea:	bf00      	nop

900062ec <_ZN8touchgfx17AbstractDataGraph14setGraphRangeXEii>:
     * @param  min The minimum x value.
     * @param  max The maximum x value.
     *
     * @note The graph as well as the area above and below are automatically redrawn (invalidated).
     */
    virtual void setGraphRangeX(int min, int max)
900062ec:	b410      	push	{r4}
    {
        setGraphRangeXScaled(int2scaledX(min), int2scaledX(max));
900062ee:	6803      	ldr	r3, [r0, #0]
     *
     * @note For internal use.
     */
    FORCE_INLINE_FUNCTION int int2scaledX(int i) const
    {
        return int2scaled(i, xScale);
900062f0:	6b04      	ldr	r4, [r0, #48]	; 0x30
        setGraphRangeXScaled(int2scaledX(min), int2scaledX(max));
900062f2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
900062f6:	fb04 f202 	mul.w	r2, r4, r2
900062fa:	fb04 f101 	mul.w	r1, r4, r1
    }
900062fe:	f85d 4b04 	ldr.w	r4, [sp], #4
        setGraphRangeXScaled(int2scaledX(min), int2scaledX(max));
90006302:	4718      	bx	r3

90006304 <_ZN8touchgfx17AbstractDataGraph14setGraphRangeXEff>:
     *
     * @return The product of the two numbers, rounded to nearest integer value.
     */
    FORCE_INLINE_FUNCTION static int float2scaled(float f, int scale)
    {
        const float fs = f * (float)scale;
90006304:	edd0 7a0c 	vldr	s15, [r0, #48]	; 0x30
        setGraphRangeXScaled(float2scaledX(min), float2scaledX(max));
90006308:	6803      	ldr	r3, [r0, #0]
        const float fs = f * (float)scale;
9000630a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    virtual void setGraphRangeX(float min, float max)
9000630e:	b410      	push	{r4}
        const float fs = f * (float)scale;
90006310:	ee20 0a27 	vmul.f32	s0, s0, s15
        setGraphRangeXScaled(float2scaledX(min), float2scaledX(max));
90006314:	f8d3 40a4 	ldr.w	r4, [r3, #164]	; 0xa4
        if (fs >= 0)
90006318:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
9000631c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
90006320:	da2e      	bge.n	90006380 <_ZN8touchgfx17AbstractDataGraph14setGraphRangeXEff+0x7c>
        {
            return (int)(fs + 0.5f);
        }
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
90006322:	eebd 7ac0 	vcvt.s32.f32	s14, s0
90006326:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
        const float fs = f * (float)scale;
9000632a:	ee60 0aa7 	vmul.f32	s1, s1, s15
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
9000632e:	eeb8 6ac7 	vcvt.f32.s32	s12, s14
90006332:	ee17 3a10 	vmov	r3, s14
        if (fs >= 0)
90006336:	eef5 0ac0 	vcmpe.f32	s1, #0.0
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
9000633a:	3b01      	subs	r3, #1
9000633c:	ee30 0a46 	vsub.f32	s0, s0, s12
        if (fs >= 0)
90006340:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
90006344:	ee30 0a26 	vadd.f32	s0, s0, s13
90006348:	eebd 0ac0 	vcvt.s32.f32	s0, s0
9000634c:	ee10 1a10 	vmov	r1, s0
90006350:	4419      	add	r1, r3
        if (fs >= 0)
90006352:	da24      	bge.n	9000639e <_ZN8touchgfx17AbstractDataGraph14setGraphRangeXEff+0x9a>
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
90006354:	eefd 7ae0 	vcvt.s32.f32	s15, s1
90006358:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
9000635c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
90006360:	ee17 3a90 	vmov	r3, s15
90006364:	3b01      	subs	r3, #1
90006366:	ee70 0ae6 	vsub.f32	s1, s1, s13
9000636a:	ee70 0a87 	vadd.f32	s1, s1, s14
9000636e:	eefd 0ae0 	vcvt.s32.f32	s1, s1
90006372:	ee10 2a90 	vmov	r2, s1
90006376:	441a      	add	r2, r3
        setGraphRangeXScaled(float2scaledX(min), float2scaledX(max));
90006378:	4623      	mov	r3, r4
    }
9000637a:	f85d 4b04 	ldr.w	r4, [sp], #4
        setGraphRangeXScaled(float2scaledX(min), float2scaledX(max));
9000637e:	4718      	bx	r3
            return (int)(fs + 0.5f);
90006380:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
        const float fs = f * (float)scale;
90006384:	ee60 0aa7 	vmul.f32	s1, s1, s15
            return (int)(fs + 0.5f);
90006388:	ee30 0a07 	vadd.f32	s0, s0, s14
        if (fs >= 0)
9000638c:	eef5 0ac0 	vcmpe.f32	s1, #0.0
            return (int)(fs + 0.5f);
90006390:	eebd 7ac0 	vcvt.s32.f32	s14, s0
        if (fs >= 0)
90006394:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
            return (int)(fs + 0.5f);
90006398:	ee17 1a10 	vmov	r1, s14
        if (fs >= 0)
9000639c:	dbda      	blt.n	90006354 <_ZN8touchgfx17AbstractDataGraph14setGraphRangeXEff+0x50>
            return (int)(fs + 0.5f);
9000639e:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
        setGraphRangeXScaled(float2scaledX(min), float2scaledX(max));
900063a2:	4623      	mov	r3, r4
    }
900063a4:	f85d 4b04 	ldr.w	r4, [sp], #4
            return (int)(fs + 0.5f);
900063a8:	ee70 0aa7 	vadd.f32	s1, s1, s15
900063ac:	eefd 7ae0 	vcvt.s32.f32	s15, s1
900063b0:	ee17 2a90 	vmov	r2, s15
        setGraphRangeXScaled(float2scaledX(min), float2scaledX(max));
900063b4:	4718      	bx	r3
900063b6:	bf00      	nop

900063b8 <_ZN8touchgfx17AbstractDataGraph14setGraphRangeYEii>:
    virtual void setGraphRangeY(int min, int max)
900063b8:	b410      	push	{r4}
        setGraphRangeYScaled(int2scaledY(min), int2scaledY(max));
900063ba:	6803      	ldr	r3, [r0, #0]
        return int2scaled(i, yScale);
900063bc:	6b44      	ldr	r4, [r0, #52]	; 0x34
        setGraphRangeYScaled(int2scaledY(min), int2scaledY(max));
900063be:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
900063c2:	fb04 f202 	mul.w	r2, r4, r2
900063c6:	fb04 f101 	mul.w	r1, r4, r1
    }
900063ca:	f85d 4b04 	ldr.w	r4, [sp], #4
        setGraphRangeYScaled(int2scaledY(min), int2scaledY(max));
900063ce:	4718      	bx	r3

900063d0 <_ZN8touchgfx17AbstractDataGraph14setGraphRangeYEff>:
        const float fs = f * (float)scale;
900063d0:	edd0 7a0d 	vldr	s15, [r0, #52]	; 0x34
        setGraphRangeYScaled(float2scaledY(min), float2scaledY(max));
900063d4:	6803      	ldr	r3, [r0, #0]
        const float fs = f * (float)scale;
900063d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    virtual void setGraphRangeY(float min, float max)
900063da:	b410      	push	{r4}
        const float fs = f * (float)scale;
900063dc:	ee20 0a27 	vmul.f32	s0, s0, s15
        setGraphRangeYScaled(float2scaledY(min), float2scaledY(max));
900063e0:	f8d3 40bc 	ldr.w	r4, [r3, #188]	; 0xbc
        if (fs >= 0)
900063e4:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
900063e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
900063ec:	da2e      	bge.n	9000644c <_ZN8touchgfx17AbstractDataGraph14setGraphRangeYEff+0x7c>
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
900063ee:	eebd 7ac0 	vcvt.s32.f32	s14, s0
900063f2:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
        const float fs = f * (float)scale;
900063f6:	ee60 0aa7 	vmul.f32	s1, s1, s15
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
900063fa:	eeb8 6ac7 	vcvt.f32.s32	s12, s14
900063fe:	ee17 3a10 	vmov	r3, s14
        if (fs >= 0)
90006402:	eef5 0ac0 	vcmpe.f32	s1, #0.0
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
90006406:	3b01      	subs	r3, #1
90006408:	ee30 0a46 	vsub.f32	s0, s0, s12
        if (fs >= 0)
9000640c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
90006410:	ee30 0a26 	vadd.f32	s0, s0, s13
90006414:	eebd 0ac0 	vcvt.s32.f32	s0, s0
90006418:	ee10 1a10 	vmov	r1, s0
9000641c:	4419      	add	r1, r3
        if (fs >= 0)
9000641e:	da24      	bge.n	9000646a <_ZN8touchgfx17AbstractDataGraph14setGraphRangeYEff+0x9a>
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
90006420:	eefd 7ae0 	vcvt.s32.f32	s15, s1
90006424:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
90006428:	eef8 6ae7 	vcvt.f32.s32	s13, s15
9000642c:	ee17 3a90 	vmov	r3, s15
90006430:	3b01      	subs	r3, #1
90006432:	ee70 0ae6 	vsub.f32	s1, s1, s13
90006436:	ee70 0a87 	vadd.f32	s1, s1, s14
9000643a:	eefd 0ae0 	vcvt.s32.f32	s1, s1
9000643e:	ee10 2a90 	vmov	r2, s1
90006442:	441a      	add	r2, r3
        setGraphRangeYScaled(float2scaledY(min), float2scaledY(max));
90006444:	4623      	mov	r3, r4
    }
90006446:	f85d 4b04 	ldr.w	r4, [sp], #4
        setGraphRangeYScaled(float2scaledY(min), float2scaledY(max));
9000644a:	4718      	bx	r3
            return (int)(fs + 0.5f);
9000644c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
        const float fs = f * (float)scale;
90006450:	ee60 0aa7 	vmul.f32	s1, s1, s15
            return (int)(fs + 0.5f);
90006454:	ee30 0a07 	vadd.f32	s0, s0, s14
        if (fs >= 0)
90006458:	eef5 0ac0 	vcmpe.f32	s1, #0.0
            return (int)(fs + 0.5f);
9000645c:	eebd 7ac0 	vcvt.s32.f32	s14, s0
        if (fs >= 0)
90006460:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
            return (int)(fs + 0.5f);
90006464:	ee17 1a10 	vmov	r1, s14
        if (fs >= 0)
90006468:	dbda      	blt.n	90006420 <_ZN8touchgfx17AbstractDataGraph14setGraphRangeYEff+0x50>
            return (int)(fs + 0.5f);
9000646a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
        setGraphRangeYScaled(float2scaledY(min), float2scaledY(max));
9000646e:	4623      	mov	r3, r4
    }
90006470:	f85d 4b04 	ldr.w	r4, [sp], #4
            return (int)(fs + 0.5f);
90006474:	ee70 0aa7 	vadd.f32	s1, s1, s15
90006478:	eefd 7ae0 	vcvt.s32.f32	s15, s1
9000647c:	ee17 2a90 	vmov	r2, s15
        setGraphRangeYScaled(float2scaledY(min), float2scaledY(max));
90006480:	4718      	bx	r3
90006482:	bf00      	nop

90006484 <_ZN8touchgfx17AbstractDataGraph18setGraphRangeYAutoEbi>:
    virtual void setGraphRangeYAuto(bool showXaxis = true, int margin = 0)
90006484:	b410      	push	{r4}
        setGraphRangeYAutoScaled(showXaxis, int2scaledY(margin));
90006486:	6803      	ldr	r3, [r0, #0]
90006488:	6b44      	ldr	r4, [r0, #52]	; 0x34
9000648a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
9000648e:	fb04 f202 	mul.w	r2, r4, r2
    }
90006492:	f85d 4b04 	ldr.w	r4, [sp], #4
        setGraphRangeYAutoScaled(showXaxis, int2scaledY(margin));
90006496:	4718      	bx	r3

90006498 <_ZN8touchgfx17AbstractDataGraph18setGraphRangeYAutoEbf>:
        const float fs = f * (float)scale;
90006498:	edd0 7a0d 	vldr	s15, [r0, #52]	; 0x34
        setGraphRangeYAutoScaled(showXaxis, float2scaledY(margin));
9000649c:	6803      	ldr	r3, [r0, #0]
        const float fs = f * (float)scale;
9000649e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    virtual void setGraphRangeYAuto(bool showXaxis, float margin)
900064a2:	b410      	push	{r4}
        const float fs = f * (float)scale;
900064a4:	ee27 0a80 	vmul.f32	s0, s15, s0
        setGraphRangeYAutoScaled(showXaxis, float2scaledY(margin));
900064a8:	f8d3 40c0 	ldr.w	r4, [r3, #192]	; 0xc0
        if (fs >= 0)
900064ac:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
900064b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
900064b4:	da15      	bge.n	900064e2 <_ZN8touchgfx17AbstractDataGraph18setGraphRangeYAutoEbf+0x4a>
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
900064b6:	eefd 7ac0 	vcvt.s32.f32	s15, s0
900064ba:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
900064be:	eef8 6ae7 	vcvt.f32.s32	s13, s15
900064c2:	ee17 3a90 	vmov	r3, s15
900064c6:	3b01      	subs	r3, #1
900064c8:	ee30 0a66 	vsub.f32	s0, s0, s13
900064cc:	ee30 0a07 	vadd.f32	s0, s0, s14
900064d0:	eebd 0ac0 	vcvt.s32.f32	s0, s0
900064d4:	ee10 2a10 	vmov	r2, s0
900064d8:	441a      	add	r2, r3
        setGraphRangeYAutoScaled(showXaxis, float2scaledY(margin));
900064da:	4623      	mov	r3, r4
    }
900064dc:	f85d 4b04 	ldr.w	r4, [sp], #4
        setGraphRangeYAutoScaled(showXaxis, float2scaledY(margin));
900064e0:	4718      	bx	r3
            return (int)(fs + 0.5f);
900064e2:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
        setGraphRangeYAutoScaled(showXaxis, float2scaledY(margin));
900064e6:	4623      	mov	r3, r4
    }
900064e8:	f85d 4b04 	ldr.w	r4, [sp], #4
            return (int)(fs + 0.5f);
900064ec:	ee30 0a27 	vadd.f32	s0, s0, s15
900064f0:	eefd 7ac0 	vcvt.s32.f32	s15, s0
900064f4:	ee17 2a90 	vmov	r2, s15
        setGraphRangeYAutoScaled(showXaxis, float2scaledY(margin));
900064f8:	4718      	bx	r3
900064fa:	bf00      	nop

900064fc <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeXMinAsIntEv>:
        return scaled2intX(graphRangeMinX);
900064fc:	f8d0 312c 	ldr.w	r3, [r0, #300]	; 0x12c
     *
     * @note For internal use.
     */
    FORCE_INLINE_FUNCTION int scaled2intX(int i) const
    {
        return scaled2int(i, xScale);
90006500:	6b02      	ldr	r2, [r0, #48]	; 0x30
        if (i >= 0)
90006502:	2b00      	cmp	r3, #0
90006504:	da0c      	bge.n	90006520 <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeXMinAsIntEv+0x24>
        return -(((-i * 2 + scale - 1) / scale) / 2);
90006506:	ebc3 70c3 	rsb	r0, r3, r3, lsl #31
9000650a:	eb02 0040 	add.w	r0, r2, r0, lsl #1
9000650e:	3801      	subs	r0, #1
90006510:	fb90 f0f2 	sdiv	r0, r0, r2
90006514:	2800      	cmp	r0, #0
90006516:	bfb8      	it	lt
90006518:	3001      	addlt	r0, #1
9000651a:	1040      	asrs	r0, r0, #1
9000651c:	4240      	negs	r0, r0
    }
9000651e:	4770      	bx	lr
            return ((i * 2 + scale) / scale) / 2;
90006520:	eb02 0043 	add.w	r0, r2, r3, lsl #1
90006524:	fb90 f0f2 	sdiv	r0, r0, r2
90006528:	2800      	cmp	r0, #0
9000652a:	bfb8      	it	lt
9000652c:	3001      	addlt	r0, #1
9000652e:	1040      	asrs	r0, r0, #1
90006530:	4770      	bx	lr
90006532:	bf00      	nop

90006534 <_ZNK8touchgfx17AbstractDataGraph24getGraphRangeXMinAsFloatEv>:
     *
     * @return The number divided by the scale.
     */
    FORCE_INLINE_FUNCTION static float scaled2float(int i, int scale)
    {
        return (float)i / (float)scale;
90006534:	ed90 0a4b 	vldr	s0, [r0, #300]	; 0x12c
90006538:	edd0 7a0c 	vldr	s15, [r0, #48]	; 0x30
9000653c:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
90006540:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    }
90006544:	ee80 0a27 	vdiv.f32	s0, s0, s15
90006548:	4770      	bx	lr
9000654a:	bf00      	nop

9000654c <_ZNK8touchgfx17AbstractDataGraph23getGraphRangeXMinScaledEv>:
    }
9000654c:	f8d0 012c 	ldr.w	r0, [r0, #300]	; 0x12c
90006550:	4770      	bx	lr
90006552:	bf00      	nop

90006554 <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeXMaxAsIntEv>:
        return scaled2intX(graphRangeMaxX);
90006554:	f8d0 3130 	ldr.w	r3, [r0, #304]	; 0x130
        return scaled2int(i, xScale);
90006558:	6b02      	ldr	r2, [r0, #48]	; 0x30
        if (i >= 0)
9000655a:	2b00      	cmp	r3, #0
9000655c:	da0c      	bge.n	90006578 <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeXMaxAsIntEv+0x24>
        return -(((-i * 2 + scale - 1) / scale) / 2);
9000655e:	ebc3 70c3 	rsb	r0, r3, r3, lsl #31
90006562:	eb02 0040 	add.w	r0, r2, r0, lsl #1
90006566:	3801      	subs	r0, #1
90006568:	fb90 f0f2 	sdiv	r0, r0, r2
9000656c:	2800      	cmp	r0, #0
9000656e:	bfb8      	it	lt
90006570:	3001      	addlt	r0, #1
90006572:	1040      	asrs	r0, r0, #1
90006574:	4240      	negs	r0, r0
    }
90006576:	4770      	bx	lr
            return ((i * 2 + scale) / scale) / 2;
90006578:	eb02 0043 	add.w	r0, r2, r3, lsl #1
9000657c:	fb90 f0f2 	sdiv	r0, r0, r2
90006580:	2800      	cmp	r0, #0
90006582:	bfb8      	it	lt
90006584:	3001      	addlt	r0, #1
90006586:	1040      	asrs	r0, r0, #1
90006588:	4770      	bx	lr
9000658a:	bf00      	nop

9000658c <_ZNK8touchgfx17AbstractDataGraph24getGraphRangeXMaxAsFloatEv>:
        return (float)i / (float)scale;
9000658c:	ed90 0a4c 	vldr	s0, [r0, #304]	; 0x130
90006590:	edd0 7a0c 	vldr	s15, [r0, #48]	; 0x30
90006594:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
90006598:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    }
9000659c:	ee80 0a27 	vdiv.f32	s0, s0, s15
900065a0:	4770      	bx	lr
900065a2:	bf00      	nop

900065a4 <_ZNK8touchgfx17AbstractDataGraph23getGraphRangeXMaxScaledEv>:
    }
900065a4:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
900065a8:	4770      	bx	lr
900065aa:	bf00      	nop

900065ac <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeYMinAsIntEv>:
        return scaled2intY(graphRangeMinY);
900065ac:	f8d0 3134 	ldr.w	r3, [r0, #308]	; 0x134
        return scaled2int(i, yScale);
900065b0:	6b42      	ldr	r2, [r0, #52]	; 0x34
        if (i >= 0)
900065b2:	2b00      	cmp	r3, #0
900065b4:	da0c      	bge.n	900065d0 <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeYMinAsIntEv+0x24>
        return -(((-i * 2 + scale - 1) / scale) / 2);
900065b6:	ebc3 70c3 	rsb	r0, r3, r3, lsl #31
900065ba:	eb02 0040 	add.w	r0, r2, r0, lsl #1
900065be:	3801      	subs	r0, #1
900065c0:	fb90 f0f2 	sdiv	r0, r0, r2
900065c4:	2800      	cmp	r0, #0
900065c6:	bfb8      	it	lt
900065c8:	3001      	addlt	r0, #1
900065ca:	1040      	asrs	r0, r0, #1
900065cc:	4240      	negs	r0, r0
    }
900065ce:	4770      	bx	lr
            return ((i * 2 + scale) / scale) / 2;
900065d0:	eb02 0043 	add.w	r0, r2, r3, lsl #1
900065d4:	fb90 f0f2 	sdiv	r0, r0, r2
900065d8:	2800      	cmp	r0, #0
900065da:	bfb8      	it	lt
900065dc:	3001      	addlt	r0, #1
900065de:	1040      	asrs	r0, r0, #1
900065e0:	4770      	bx	lr
900065e2:	bf00      	nop

900065e4 <_ZNK8touchgfx17AbstractDataGraph24getGraphRangeYMinAsFloatEv>:
        return (float)i / (float)scale;
900065e4:	ed90 0a4d 	vldr	s0, [r0, #308]	; 0x134
900065e8:	edd0 7a0d 	vldr	s15, [r0, #52]	; 0x34
900065ec:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
900065f0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    }
900065f4:	ee80 0a27 	vdiv.f32	s0, s0, s15
900065f8:	4770      	bx	lr
900065fa:	bf00      	nop

900065fc <_ZNK8touchgfx17AbstractDataGraph23getGraphRangeYMinScaledEv>:
    }
900065fc:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
90006600:	4770      	bx	lr
90006602:	bf00      	nop

90006604 <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeYMaxAsIntEv>:
        return scaled2intY(graphRangeMaxY);
90006604:	f8d0 3138 	ldr.w	r3, [r0, #312]	; 0x138
        return scaled2int(i, yScale);
90006608:	6b42      	ldr	r2, [r0, #52]	; 0x34
        if (i >= 0)
9000660a:	2b00      	cmp	r3, #0
9000660c:	da0c      	bge.n	90006628 <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeYMaxAsIntEv+0x24>
        return -(((-i * 2 + scale - 1) / scale) / 2);
9000660e:	ebc3 70c3 	rsb	r0, r3, r3, lsl #31
90006612:	eb02 0040 	add.w	r0, r2, r0, lsl #1
90006616:	3801      	subs	r0, #1
90006618:	fb90 f0f2 	sdiv	r0, r0, r2
9000661c:	2800      	cmp	r0, #0
9000661e:	bfb8      	it	lt
90006620:	3001      	addlt	r0, #1
90006622:	1040      	asrs	r0, r0, #1
90006624:	4240      	negs	r0, r0
    }
90006626:	4770      	bx	lr
            return ((i * 2 + scale) / scale) / 2;
90006628:	eb02 0043 	add.w	r0, r2, r3, lsl #1
9000662c:	fb90 f0f2 	sdiv	r0, r0, r2
90006630:	2800      	cmp	r0, #0
90006632:	bfb8      	it	lt
90006634:	3001      	addlt	r0, #1
90006636:	1040      	asrs	r0, r0, #1
90006638:	4770      	bx	lr
9000663a:	bf00      	nop

9000663c <_ZNK8touchgfx17AbstractDataGraph24getGraphRangeYMaxAsFloatEv>:
        return (float)i / (float)scale;
9000663c:	ed90 0a4e 	vldr	s0, [r0, #312]	; 0x138
90006640:	edd0 7a0d 	vldr	s15, [r0, #52]	; 0x34
90006644:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
90006648:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    }
9000664c:	ee80 0a27 	vdiv.f32	s0, s0, s15
90006650:	4770      	bx	lr
90006652:	bf00      	nop

90006654 <_ZNK8touchgfx17AbstractDataGraph23getGraphRangeYMaxScaledEv>:
    }
90006654:	f8d0 0138 	ldr.w	r0, [r0, #312]	; 0x138
90006658:	4770      	bx	lr
9000665a:	bf00      	nop

9000665c <_ZN8touchgfx16DynamicDataGraph8setScaleEib>:
     * @note The current xAxisFactor, xAxisOffet and xGraphRange values are updated to reflect the
     *       new scale being set.
     */
    virtual void setScale(int scale, bool updateData = false)
    {
        setScaleX(scale, updateData);
9000665c:	6803      	ldr	r3, [r0, #0]
    virtual void setScale(int scale, bool updateData = false)
9000665e:	b570      	push	{r4, r5, r6, lr}
90006660:	4604      	mov	r4, r0
        setScaleX(scale, updateData);
90006662:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
    virtual void setScale(int scale, bool updateData = false)
90006666:	460d      	mov	r5, r1
90006668:	4616      	mov	r6, r2
        setScaleX(scale, updateData);
9000666a:	4798      	blx	r3
        setScaleY(scale, updateData);
9000666c:	6823      	ldr	r3, [r4, #0]
9000666e:	4632      	mov	r2, r6
90006670:	4629      	mov	r1, r5
90006672:	4620      	mov	r0, r4
90006674:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    }
90006678:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        setScaleY(scale, updateData);
9000667c:	4718      	bx	r3
9000667e:	bf00      	nop

90006680 <_ZN8touchgfx16DynamicDataGraph24setGraphRangeXAutoScaledEbi>:

    virtual void setGraphRangeYAutoScaled(bool showXaxis, int margin);

    virtual void setGraphRangeXAutoScaled(bool /*showYaxis*/, int margin)
    {
        setGraphRangeXScaled(-scaled2intX(margin), (usedCapacity - 1) + scaled2intX(margin));
90006680:	6803      	ldr	r3, [r0, #0]
        if (i >= 0)
90006682:	2a00      	cmp	r2, #0
        return scaled2int(i, xScale);
90006684:	6b01      	ldr	r1, [r0, #48]	; 0x30
    virtual void setGraphRangeXAutoScaled(bool /*showYaxis*/, int margin)
90006686:	b410      	push	{r4}
        setGraphRangeXScaled(-scaled2intX(margin), (usedCapacity - 1) + scaled2intX(margin));
90006688:	f8d3 40a4 	ldr.w	r4, [r3, #164]	; 0xa4
        if (i >= 0)
9000668c:	da14      	bge.n	900066b8 <_ZN8touchgfx16DynamicDataGraph24setGraphRangeXAutoScaledEbi+0x38>
        return -(((-i * 2 + scale - 1) / scale) / 2);
9000668e:	ebc2 72c2 	rsb	r2, r2, r2, lsl #31
90006692:	eb01 0342 	add.w	r3, r1, r2, lsl #1
90006696:	3b01      	subs	r3, #1
90006698:	fb93 f3f1 	sdiv	r3, r3, r1
9000669c:	2b00      	cmp	r3, #0
9000669e:	bfb8      	it	lt
900066a0:	3301      	addlt	r3, #1
900066a2:	105b      	asrs	r3, r3, #1
900066a4:	425b      	negs	r3, r3
        setGraphRangeXScaled(-scaled2intX(margin), (usedCapacity - 1) + scaled2intX(margin));
900066a6:	f9b0 211e 	ldrsh.w	r2, [r0, #286]	; 0x11e
900066aa:	4259      	negs	r1, r3
900066ac:	3a01      	subs	r2, #1
900066ae:	441a      	add	r2, r3
900066b0:	4623      	mov	r3, r4
    }
900066b2:	f85d 4b04 	ldr.w	r4, [sp], #4
        setGraphRangeXScaled(-scaled2intX(margin), (usedCapacity - 1) + scaled2intX(margin));
900066b6:	4718      	bx	r3
            return ((i * 2 + scale) / scale) / 2;
900066b8:	eb01 0242 	add.w	r2, r1, r2, lsl #1
900066bc:	fb92 f3f1 	sdiv	r3, r2, r1
900066c0:	2b00      	cmp	r3, #0
900066c2:	bfb8      	it	lt
900066c4:	3301      	addlt	r3, #1
900066c6:	105b      	asrs	r3, r3, #1
900066c8:	e7ed      	b.n	900066a6 <_ZN8touchgfx16DynamicDataGraph24setGraphRangeXAutoScaledEbi+0x26>
900066ca:	bf00      	nop

900066cc <_ZN8touchgfx16DynamicDataGraph20setXAxisFactorScaledEi>:
     *
     * @see setXAxisFactorScaled,setXAxisFactor
     */
    virtual void setXAxisFactorScaled(int factor)
    {
        xAxisFactor = factor;
900066cc:	f8c0 113c 	str.w	r1, [r0, #316]	; 0x13c
    }
900066d0:	4770      	bx	lr
900066d2:	bf00      	nop

900066d4 <_ZNK8touchgfx16DynamicDataGraph20getXAxisFactorScaledEv>:
     * @see getXAxisFactorAsInt, getXAxisFactorAsFloat, setXAxisFactor
     */
    virtual int getXAxisFactorScaled() const
    {
        return xAxisFactor;
    }
900066d4:	f8d0 013c 	ldr.w	r0, [r0, #316]	; 0x13c
900066d8:	4770      	bx	lr
900066da:	bf00      	nop

900066dc <_ZN8touchgfx16DynamicDataGraph20setXAxisOffsetScaledEi>:
     *
     * @see setXAxisOffset, getXAxisOffsetScaled
     */
    virtual void setXAxisOffsetScaled(int offset)
    {
        xAxisOffset = offset;
900066dc:	f8c0 1140 	str.w	r1, [r0, #320]	; 0x140
    }
900066e0:	4770      	bx	lr
900066e2:	bf00      	nop

900066e4 <_ZNK8touchgfx16DynamicDataGraph20getXAxisOffsetScaledEv>:
     * @see getXAxisOffsetAsInt, getXAxisOffsetAsFloat, setXAxisOffsetScaled, setXAxisOffset
     */
    virtual int getXAxisOffsetScaled() const
    {
        return xAxisOffset;
    }
900066e4:	f8d0 0140 	ldr.w	r0, [r0, #320]	; 0x140
900066e8:	4770      	bx	lr
900066ea:	bf00      	nop

900066ec <_ZNK8touchgfx16DynamicDataGraph9dataIndexEs>:
     * @return The index in the yValues array.
     */
    virtual int16_t dataIndex(int16_t screenIndex) const
    {
        return screenIndex;
    }
900066ec:	4608      	mov	r0, r1
900066ee:	4770      	bx	lr

900066f0 <_ZNK8touchgfx16DynamicDataGraph12indexToXAxisEii>:
    }

    virtual int indexToXAxis(const int valueScaled, const int /*labelScaled*/) const
    {
        // Value is also index for these types of graphs.
        return (indexToGlobalIndex(scaled2intX(valueScaled)) * xAxisFactor) + xAxisOffset;
900066f0:	6803      	ldr	r3, [r0, #0]
        if (i >= 0)
900066f2:	2900      	cmp	r1, #0
        return scaled2int(i, xScale);
900066f4:	6b02      	ldr	r2, [r0, #48]	; 0x30
        return (indexToGlobalIndex(scaled2intX(valueScaled)) * xAxisFactor) + xAxisOffset;
900066f6:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
    virtual int indexToXAxis(const int valueScaled, const int /*labelScaled*/) const
900066fa:	b510      	push	{r4, lr}
900066fc:	4604      	mov	r4, r0
        if (i >= 0)
900066fe:	da13      	bge.n	90006728 <_ZNK8touchgfx16DynamicDataGraph12indexToXAxisEii+0x38>
        return -(((-i * 2 + scale - 1) / scale) / 2);
90006700:	ebc1 71c1 	rsb	r1, r1, r1, lsl #31
90006704:	eb02 0141 	add.w	r1, r2, r1, lsl #1
90006708:	3901      	subs	r1, #1
9000670a:	fb91 f1f2 	sdiv	r1, r1, r2
9000670e:	2900      	cmp	r1, #0
90006710:	bfb8      	it	lt
90006712:	3101      	addlt	r1, #1
90006714:	1049      	asrs	r1, r1, #1
90006716:	4249      	negs	r1, r1
        return (indexToGlobalIndex(scaled2intX(valueScaled)) * xAxisFactor) + xAxisOffset;
90006718:	b209      	sxth	r1, r1
9000671a:	4620      	mov	r0, r4
9000671c:	4798      	blx	r3
9000671e:	e9d4 234f 	ldrd	r2, r3, [r4, #316]	; 0x13c
    }
90006722:	fb02 3000 	mla	r0, r2, r0, r3
90006726:	bd10      	pop	{r4, pc}
            return ((i * 2 + scale) / scale) / 2;
90006728:	eb02 0141 	add.w	r1, r2, r1, lsl #1
9000672c:	fb91 f1f2 	sdiv	r1, r1, r2
90006730:	2900      	cmp	r1, #0
90006732:	bfb8      	it	lt
90006734:	3101      	addlt	r1, #1
90006736:	1049      	asrs	r1, r1, #1
90006738:	e7ee      	b.n	90006718 <_ZNK8touchgfx16DynamicDataGraph12indexToXAxisEii+0x28>
9000673a:	bf00      	nop

9000673c <_ZNK8touchgfx16DynamicDataGraph9getScaleXEv>:
    virtual void setScaleX(int scale, bool updateData = false);

    virtual int getScaleX() const
    {
        return AbstractDataGraph::getScaleX();
    }
9000673c:	6b00      	ldr	r0, [r0, #48]	; 0x30
9000673e:	4770      	bx	lr

90006740 <_ZNK8touchgfx16DynamicDataGraph9getScaleYEv>:
    virtual void setScaleY(int scale, bool updateData = false);

    virtual int getScaleY() const
    {
        return AbstractDataGraph::getScaleY();
    }
90006740:	6b40      	ldr	r0, [r0, #52]	; 0x34
90006742:	4770      	bx	lr

90006744 <_ZN15Screen2ViewBase11setupScreenEv>:
}

void Screen2ViewBase::setupScreen()
{

}
90006744:	4770      	bx	lr
90006746:	bf00      	nop

90006748 <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_23AbstractButtonContainerEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
90006748:	4770      	bx	lr
9000674a:	bf00      	nop

9000674c <_ZN8touchgfx21GraphWrapAndOverwriteILs24EED1Ev>:
 * A Continuous graph. A quick way to create a GraphWrapAndOverwriteData.
 *
 * @tparam CAPACITY The maximum number of data points on the graph.
 */
template <int16_t CAPACITY>
class GraphWrapAndOverwrite : public GraphWrapAndOverwriteData
9000674c:	4770      	bx	lr
9000674e:	bf00      	nop

90006750 <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_23AbstractButtonContainerEvvE7executeES4_>:
    virtual void execute(T1 t1)
90006750:	b410      	push	{r4}
        (pobject->*pmemfun)(t1);
90006752:	68c2      	ldr	r2, [r0, #12]
    virtual void execute(T1 t1)
90006754:	4603      	mov	r3, r0
        (pobject->*pmemfun)(t1);
90006756:	6844      	ldr	r4, [r0, #4]
90006758:	f012 0f01 	tst.w	r2, #1
9000675c:	eb04 0062 	add.w	r0, r4, r2, asr #1
90006760:	d103      	bne.n	9000676a <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_23AbstractButtonContainerEvvE7executeES4_+0x1a>
90006762:	689b      	ldr	r3, [r3, #8]
    }
90006764:	f85d 4b04 	ldr.w	r4, [sp], #4
        (pobject->*pmemfun)(t1);
90006768:	4718      	bx	r3
9000676a:	ea4f 0c62 	mov.w	ip, r2, asr #1
9000676e:	689b      	ldr	r3, [r3, #8]
90006770:	f854 200c 	ldr.w	r2, [r4, ip]
    }
90006774:	f85d 4b04 	ldr.w	r4, [sp], #4
        (pobject->*pmemfun)(t1);
90006778:	58d3      	ldr	r3, [r2, r3]
9000677a:	4718      	bx	r3

9000677c <_ZNK8touchgfx8CallbackI15Screen2ViewBaseRKNS_23AbstractButtonContainerEvvE7isValidEv>:
        return (pobject != 0) && (pmemfun != 0);
9000677c:	6843      	ldr	r3, [r0, #4]
9000677e:	b13b      	cbz	r3, 90006790 <_ZNK8touchgfx8CallbackI15Screen2ViewBaseRKNS_23AbstractButtonContainerEvvE7isValidEv+0x14>
90006780:	6883      	ldr	r3, [r0, #8]
90006782:	b10b      	cbz	r3, 90006788 <_ZNK8touchgfx8CallbackI15Screen2ViewBaseRKNS_23AbstractButtonContainerEvvE7isValidEv+0xc>
90006784:	2001      	movs	r0, #1
    }
90006786:	4770      	bx	lr
        return (pobject != 0) && (pmemfun != 0);
90006788:	68c0      	ldr	r0, [r0, #12]
9000678a:	f000 0001 	and.w	r0, r0, #1
9000678e:	4770      	bx	lr
90006790:	4618      	mov	r0, r3
90006792:	4770      	bx	lr

90006794 <_ZN8touchgfx21GraphWrapAndOverwriteILs24EED0Ev>:
90006794:	b510      	push	{r4, lr}
90006796:	4604      	mov	r4, r0
90006798:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
9000679c:	f020 ff2b 	bl	900275f6 <_ZdlPvj>
900067a0:	4620      	mov	r0, r4
900067a2:	bd10      	pop	{r4, pc}

900067a4 <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_23AbstractButtonContainerEvvED0Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
900067a4:	b510      	push	{r4, lr}
900067a6:	4604      	mov	r4, r0
900067a8:	2110      	movs	r1, #16
900067aa:	f020 ff24 	bl	900275f6 <_ZdlPvj>
900067ae:	4620      	mov	r0, r4
900067b0:	bd10      	pop	{r4, pc}
900067b2:	bf00      	nop

900067b4 <_ZNK8touchgfx16DynamicDataGraph23indexToDataPointXScaledEs>:
        assert(index >= 0 && index < usedCapacity);
900067b4:	1e0b      	subs	r3, r1, #0
    virtual int indexToDataPointXScaled(int16_t index) const
900067b6:	b510      	push	{r4, lr}
        assert(index >= 0 && index < usedCapacity);
900067b8:	db0d      	blt.n	900067d6 <_ZNK8touchgfx16DynamicDataGraph23indexToDataPointXScaledEs+0x22>
900067ba:	f9b0 211e 	ldrsh.w	r2, [r0, #286]	; 0x11e
900067be:	4604      	mov	r4, r0
900067c0:	429a      	cmp	r2, r3
900067c2:	dd08      	ble.n	900067d6 <_ZNK8touchgfx16DynamicDataGraph23indexToDataPointXScaledEs+0x22>
        return (indexToGlobalIndex(index) * xAxisFactor) + xAxisOffset;
900067c4:	6803      	ldr	r3, [r0, #0]
900067c6:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
900067ca:	4798      	blx	r3
900067cc:	e9d4 234f 	ldrd	r2, r3, [r4, #316]	; 0x13c
    }
900067d0:	fb02 3000 	mla	r0, r2, r0, r3
900067d4:	bd10      	pop	{r4, pc}
        assert(index >= 0 && index < usedCapacity);
900067d6:	4b03      	ldr	r3, [pc, #12]	; (900067e4 <_ZNK8touchgfx16DynamicDataGraph23indexToDataPointXScaledEs+0x30>)
900067d8:	f240 6133 	movw	r1, #1587	; 0x633
900067dc:	4a02      	ldr	r2, [pc, #8]	; (900067e8 <_ZNK8touchgfx16DynamicDataGraph23indexToDataPointXScaledEs+0x34>)
900067de:	4803      	ldr	r0, [pc, #12]	; (900067ec <_ZNK8touchgfx16DynamicDataGraph23indexToDataPointXScaledEs+0x38>)
900067e0:	f020 ff38 	bl	90027654 <__assert_func>
900067e4:	9002af40 	.word	0x9002af40
900067e8:	9002af64 	.word	0x9002af64
900067ec:	9002afb4 	.word	0x9002afb4

900067f0 <_ZN15Screen2ViewBaseD1Ev>:
Screen2ViewBase::~Screen2ViewBase()
900067f0:	4b03      	ldr	r3, [pc, #12]	; (90006800 <_ZN15Screen2ViewBaseD1Ev+0x10>)
900067f2:	b510      	push	{r4, lr}
900067f4:	4604      	mov	r4, r0
900067f6:	6003      	str	r3, [r0, #0]
    touchgfx::CanvasWidgetRenderer::resetBuffer();
900067f8:	f010 f800 	bl	900167fc <_ZN8touchgfx20CanvasWidgetRenderer11resetBufferEv>
}
900067fc:	4620      	mov	r0, r4
900067fe:	bd10      	pop	{r4, pc}
90006800:	9002b31c 	.word	0x9002b31c

90006804 <_ZN15Screen2ViewBaseD0Ev>:
Screen2ViewBase::~Screen2ViewBase()
90006804:	4b07      	ldr	r3, [pc, #28]	; (90006824 <_ZN15Screen2ViewBaseD0Ev+0x20>)
90006806:	b500      	push	{lr}
90006808:	b083      	sub	sp, #12
9000680a:	6003      	str	r3, [r0, #0]
9000680c:	9001      	str	r0, [sp, #4]
    touchgfx::CanvasWidgetRenderer::resetBuffer();
9000680e:	f00f fff5 	bl	900167fc <_ZN8touchgfx20CanvasWidgetRenderer11resetBufferEv>
}
90006812:	9801      	ldr	r0, [sp, #4]
90006814:	f242 014c 	movw	r1, #8268	; 0x204c
90006818:	f020 feed 	bl	900275f6 <_ZdlPvj>
9000681c:	9801      	ldr	r0, [sp, #4]
9000681e:	b003      	add	sp, #12
90006820:	f85d fb04 	ldr.w	pc, [sp], #4
90006824:	9002b31c 	.word	0x9002b31c

90006828 <_ZNK8touchgfx17AbstractDataGraph17invalidateContentEv>:
        if (alpha > 0)
90006828:	f890 202c 	ldrb.w	r2, [r0, #44]	; 0x2c
9000682c:	b12a      	cbz	r2, 9000683a <_ZNK8touchgfx17AbstractDataGraph17invalidateContentEv+0x12>
        if (visible)
9000682e:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
90006832:	b112      	cbz	r2, 9000683a <_ZNK8touchgfx17AbstractDataGraph17invalidateContentEv+0x12>
            invalidate();
90006834:	6803      	ldr	r3, [r0, #0]
90006836:	695b      	ldr	r3, [r3, #20]
90006838:	4718      	bx	r3
    }
9000683a:	4770      	bx	lr

9000683c <_ZN15Screen2ViewBase25flexButtonCallbackHandlerERKN8touchgfx23AbstractButtonContainerE>:

void Screen2ViewBase::flexButtonCallbackHandler(const touchgfx::AbstractButtonContainer& src)
{
    if (&src == &backButton)
9000683c:	f500 7060 	add.w	r0, r0, #896	; 0x380
90006840:	4288      	cmp	r0, r1
90006842:	d000      	beq.n	90006846 <_ZN15Screen2ViewBase25flexButtonCallbackHandlerERKN8touchgfx23AbstractButtonContainerE+0xa>
90006844:	4770      	bx	lr
{
90006846:	b508      	push	{r3, lr}
    virtual ~Screen2ViewBase();
    virtual void setupScreen();

protected:
    FrontendApplication& application() {
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
90006848:	f011 fc58 	bl	900180fc <_ZN8touchgfx11Application11getInstanceEv>
        //backButtonInteraction
        //When backButton clicked change screen to Screen1
        //Go to Screen1 with screen transition towards West
        application().gotoScreen1ScreenSlideTransitionWest();
    }
}
9000684c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        application().gotoScreen1ScreenSlideTransitionWest();
90006850:	f7ff b880 	b.w	90005954 <_ZN23FrontendApplicationBase36gotoScreen1ScreenSlideTransitionWestEv>

90006854 <_ZNK8touchgfx16DynamicDataGraph23indexToDataPointYScaledEs>:
    virtual int indexToDataPointYScaled(int16_t index) const
90006854:	b538      	push	{r3, r4, r5, lr}
        assert(index >= 0 && index < usedCapacity);
90006856:	1e0b      	subs	r3, r1, #0
90006858:	db13      	blt.n	90006882 <_ZNK8touchgfx16DynamicDataGraph23indexToDataPointYScaledEs+0x2e>
9000685a:	f9b0 411e 	ldrsh.w	r4, [r0, #286]	; 0x11e
9000685e:	429c      	cmp	r4, r3
90006860:	dd0f      	ble.n	90006882 <_ZNK8touchgfx16DynamicDataGraph23indexToDataPointYScaledEs+0x2e>
        return yValues[dataIndex(index)];
90006862:	6802      	ldr	r2, [r0, #0]
90006864:	4d0a      	ldr	r5, [pc, #40]	; (90006890 <_ZNK8touchgfx16DynamicDataGraph23indexToDataPointYScaledEs+0x3c>)
90006866:	f8d2 2180 	ldr.w	r2, [r2, #384]	; 0x180
9000686a:	f8d0 4144 	ldr.w	r4, [r0, #324]	; 0x144
9000686e:	42aa      	cmp	r2, r5
90006870:	d102      	bne.n	90006878 <_ZNK8touchgfx16DynamicDataGraph23indexToDataPointYScaledEs+0x24>
    }
90006872:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
90006876:	bd38      	pop	{r3, r4, r5, pc}
        return yValues[dataIndex(index)];
90006878:	4790      	blx	r2
9000687a:	4603      	mov	r3, r0
    }
9000687c:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
90006880:	bd38      	pop	{r3, r4, r5, pc}
        assert(index >= 0 && index < usedCapacity);
90006882:	4b04      	ldr	r3, [pc, #16]	; (90006894 <_ZNK8touchgfx16DynamicDataGraph23indexToDataPointYScaledEs+0x40>)
90006884:	f240 6139 	movw	r1, #1593	; 0x639
90006888:	4a03      	ldr	r2, [pc, #12]	; (90006898 <_ZNK8touchgfx16DynamicDataGraph23indexToDataPointYScaledEs+0x44>)
9000688a:	4804      	ldr	r0, [pc, #16]	; (9000689c <_ZNK8touchgfx16DynamicDataGraph23indexToDataPointYScaledEs+0x48>)
9000688c:	f020 fee2 	bl	90027654 <__assert_func>
90006890:	900066ed 	.word	0x900066ed
90006894:	9002af40 	.word	0x9002af40
90006898:	9002b014 	.word	0x9002b014
9000689c:	9002afb4 	.word	0x9002afb4

900068a0 <_ZN8touchgfx16DynamicDataGraph19setXAxisScaleScaledEi>:

    /// @cond
    TOUCHGFX_DEPRECATED("Please use setXAxisFactorScaled()", virtual void setXAxisScaleScaled(int scale))
900068a0:	b430      	push	{r4, r5}
    {
        setXAxisFactorScaled(scale);
900068a2:	6804      	ldr	r4, [r0, #0]
900068a4:	4d05      	ldr	r5, [pc, #20]	; (900068bc <_ZN8touchgfx16DynamicDataGraph19setXAxisScaleScaledEi+0x1c>)
900068a6:	f8d4 4148 	ldr.w	r4, [r4, #328]	; 0x148
900068aa:	42ac      	cmp	r4, r5
900068ac:	d103      	bne.n	900068b6 <_ZN8touchgfx16DynamicDataGraph19setXAxisScaleScaledEi+0x16>
        xAxisFactor = factor;
900068ae:	f8c0 113c 	str.w	r1, [r0, #316]	; 0x13c
    }
900068b2:	bc30      	pop	{r4, r5}
900068b4:	4770      	bx	lr
        setXAxisFactorScaled(scale);
900068b6:	4623      	mov	r3, r4
    }
900068b8:	bc30      	pop	{r4, r5}
        setXAxisFactorScaled(scale);
900068ba:	4718      	bx	r3
900068bc:	900066cd 	.word	0x900066cd

900068c0 <_ZNK8touchgfx16DynamicDataGraph8getScaleEv>:
        return getScaleY();
900068c0:	6802      	ldr	r2, [r0, #0]
900068c2:	4904      	ldr	r1, [pc, #16]	; (900068d4 <_ZNK8touchgfx16DynamicDataGraph8getScaleEv+0x14>)
900068c4:	f8d2 2094 	ldr.w	r2, [r2, #148]	; 0x94
900068c8:	428a      	cmp	r2, r1
900068ca:	d101      	bne.n	900068d0 <_ZNK8touchgfx16DynamicDataGraph8getScaleEv+0x10>
        return yScale;
900068cc:	6b40      	ldr	r0, [r0, #52]	; 0x34
    }
900068ce:	4770      	bx	lr
        return getScaleY();
900068d0:	4710      	bx	r2
900068d2:	bf00      	nop
900068d4:	90006741 	.word	0x90006741

900068d8 <_ZNK8touchgfx16DynamicDataGraph17getGraphRangeXMinEv>:
        return getGraphRangeXMinScaled();
900068d8:	6802      	ldr	r2, [r0, #0]
900068da:	4904      	ldr	r1, [pc, #16]	; (900068ec <_ZNK8touchgfx16DynamicDataGraph17getGraphRangeXMinEv+0x14>)
900068dc:	f8d2 20d4 	ldr.w	r2, [r2, #212]	; 0xd4
900068e0:	428a      	cmp	r2, r1
900068e2:	d102      	bne.n	900068ea <_ZNK8touchgfx16DynamicDataGraph17getGraphRangeXMinEv+0x12>
        return graphRangeMinX;
900068e4:	f8d0 012c 	ldr.w	r0, [r0, #300]	; 0x12c
    }
900068e8:	4770      	bx	lr
        return getGraphRangeXMinScaled();
900068ea:	4710      	bx	r2
900068ec:	9000654d 	.word	0x9000654d

900068f0 <_ZNK8touchgfx16DynamicDataGraph17getGraphRangeXMaxEv>:
        return getGraphRangeXMaxScaled();
900068f0:	6802      	ldr	r2, [r0, #0]
900068f2:	4904      	ldr	r1, [pc, #16]	; (90006904 <_ZNK8touchgfx16DynamicDataGraph17getGraphRangeXMaxEv+0x14>)
900068f4:	f8d2 20e0 	ldr.w	r2, [r2, #224]	; 0xe0
900068f8:	428a      	cmp	r2, r1
900068fa:	d102      	bne.n	90006902 <_ZNK8touchgfx16DynamicDataGraph17getGraphRangeXMaxEv+0x12>
        return graphRangeMaxX;
900068fc:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    }
90006900:	4770      	bx	lr
        return getGraphRangeXMaxScaled();
90006902:	4710      	bx	r2
90006904:	900065a5 	.word	0x900065a5

90006908 <_ZNK8touchgfx16DynamicDataGraph19getXAxisScaleScaledEv>:
    /// @endcond

    /// @cond
    TOUCHGFX_DEPRECATED("Please use getXAxisFactorScaled()", virtual int getXAxisScaleScaled() const)
    {
        return getXAxisFactorScaled();
90006908:	6802      	ldr	r2, [r0, #0]
9000690a:	4904      	ldr	r1, [pc, #16]	; (9000691c <_ZNK8touchgfx16DynamicDataGraph19getXAxisScaleScaledEv+0x14>)
9000690c:	f8d2 215c 	ldr.w	r2, [r2, #348]	; 0x15c
90006910:	428a      	cmp	r2, r1
90006912:	d102      	bne.n	9000691a <_ZNK8touchgfx16DynamicDataGraph19getXAxisScaleScaledEv+0x12>
        return xAxisFactor;
90006914:	f8d0 013c 	ldr.w	r0, [r0, #316]	; 0x13c
    }
90006918:	4770      	bx	lr
        return getXAxisFactorScaled();
9000691a:	4710      	bx	r2
9000691c:	900066d5 	.word	0x900066d5

90006920 <_ZN8touchgfx16DynamicDataGraph14setXAxisOffsetEi>:
        setXAxisOffsetScaled(int2scaledX(offset));
90006920:	6802      	ldr	r2, [r0, #0]
    virtual void setXAxisOffset(int offset)
90006922:	b410      	push	{r4}
        return i * scale;
90006924:	6b04      	ldr	r4, [r0, #48]	; 0x30
        setXAxisOffsetScaled(int2scaledX(offset));
90006926:	f8d2 2168 	ldr.w	r2, [r2, #360]	; 0x168
        return i * scale;
9000692a:	fb04 f101 	mul.w	r1, r4, r1
9000692e:	4c05      	ldr	r4, [pc, #20]	; (90006944 <_ZN8touchgfx16DynamicDataGraph14setXAxisOffsetEi+0x24>)
90006930:	42a2      	cmp	r2, r4
90006932:	d104      	bne.n	9000693e <_ZN8touchgfx16DynamicDataGraph14setXAxisOffsetEi+0x1e>
    }
90006934:	f85d 4b04 	ldr.w	r4, [sp], #4
        xAxisOffset = offset;
90006938:	f8c0 1140 	str.w	r1, [r0, #320]	; 0x140
    }
9000693c:	4770      	bx	lr
9000693e:	f85d 4b04 	ldr.w	r4, [sp], #4
        setXAxisOffsetScaled(int2scaledX(offset));
90006942:	4710      	bx	r2
90006944:	900066dd 	.word	0x900066dd

90006948 <_ZN8touchgfx16DynamicDataGraph14setXAxisOffsetEf>:
        const float fs = f * (float)scale;
90006948:	edd0 7a0c 	vldr	s15, [r0, #48]	; 0x30
        setXAxisOffsetScaled(float2scaledX(offset));
9000694c:	6803      	ldr	r3, [r0, #0]
        const float fs = f * (float)scale;
9000694e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
        setXAxisOffsetScaled(float2scaledX(offset));
90006952:	f8d3 2168 	ldr.w	r2, [r3, #360]	; 0x168
        const float fs = f * (float)scale;
90006956:	ee27 0a80 	vmul.f32	s0, s15, s0
        if (fs >= 0)
9000695a:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
9000695e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
90006962:	da17      	bge.n	90006994 <_ZN8touchgfx16DynamicDataGraph14setXAxisOffsetEf+0x4c>
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
90006964:	eefd 7ac0 	vcvt.s32.f32	s15, s0
90006968:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
9000696c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
90006970:	ee17 3a90 	vmov	r3, s15
90006974:	3b01      	subs	r3, #1
90006976:	ee30 0a66 	vsub.f32	s0, s0, s13
9000697a:	ee30 0a07 	vadd.f32	s0, s0, s14
9000697e:	eebd 0ac0 	vcvt.s32.f32	s0, s0
90006982:	ee10 1a10 	vmov	r1, s0
90006986:	4419      	add	r1, r3
90006988:	4b08      	ldr	r3, [pc, #32]	; (900069ac <_ZN8touchgfx16DynamicDataGraph14setXAxisOffsetEf+0x64>)
9000698a:	429a      	cmp	r2, r3
9000698c:	d10d      	bne.n	900069aa <_ZN8touchgfx16DynamicDataGraph14setXAxisOffsetEf+0x62>
        xAxisOffset = offset;
9000698e:	f8c0 1140 	str.w	r1, [r0, #320]	; 0x140
    }
90006992:	4770      	bx	lr
            return (int)(fs + 0.5f);
90006994:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
90006998:	4b04      	ldr	r3, [pc, #16]	; (900069ac <_ZN8touchgfx16DynamicDataGraph14setXAxisOffsetEf+0x64>)
9000699a:	429a      	cmp	r2, r3
9000699c:	ee30 0a27 	vadd.f32	s0, s0, s15
900069a0:	eefd 7ac0 	vcvt.s32.f32	s15, s0
900069a4:	ee17 1a90 	vmov	r1, s15
900069a8:	d0f1      	beq.n	9000698e <_ZN8touchgfx16DynamicDataGraph14setXAxisOffsetEf+0x46>
        setXAxisOffsetScaled(float2scaledX(offset));
900069aa:	4710      	bx	r2
900069ac:	900066dd 	.word	0x900066dd

900069b0 <_ZNK8touchgfx16DynamicDataGraph19getXAxisOffsetAsIntEv>:
        return scaled2intX(getXAxisOffsetScaled());
900069b0:	6803      	ldr	r3, [r0, #0]
900069b2:	4a12      	ldr	r2, [pc, #72]	; (900069fc <_ZNK8touchgfx16DynamicDataGraph19getXAxisOffsetAsIntEv+0x4c>)
900069b4:	f8d3 3174 	ldr.w	r3, [r3, #372]	; 0x174
900069b8:	4293      	cmp	r3, r2
    virtual int getXAxisOffsetAsInt() const
900069ba:	b510      	push	{r4, lr}
900069bc:	4604      	mov	r4, r0
900069be:	d11a      	bne.n	900069f6 <_ZNK8touchgfx16DynamicDataGraph19getXAxisOffsetAsIntEv+0x46>
        return xAxisOffset;
900069c0:	f8d0 0140 	ldr.w	r0, [r0, #320]	; 0x140
        if (i >= 0)
900069c4:	2800      	cmp	r0, #0
        return scaled2int(i, xScale);
900069c6:	6b22      	ldr	r2, [r4, #48]	; 0x30
        if (i >= 0)
900069c8:	da0c      	bge.n	900069e4 <_ZNK8touchgfx16DynamicDataGraph19getXAxisOffsetAsIntEv+0x34>
        return -(((-i * 2 + scale - 1) / scale) / 2);
900069ca:	ebc0 70c0 	rsb	r0, r0, r0, lsl #31
900069ce:	eb02 0040 	add.w	r0, r2, r0, lsl #1
900069d2:	3801      	subs	r0, #1
900069d4:	fb90 f0f2 	sdiv	r0, r0, r2
900069d8:	2800      	cmp	r0, #0
900069da:	bfb8      	it	lt
900069dc:	3001      	addlt	r0, #1
900069de:	1040      	asrs	r0, r0, #1
900069e0:	4240      	negs	r0, r0
    }
900069e2:	bd10      	pop	{r4, pc}
            return ((i * 2 + scale) / scale) / 2;
900069e4:	eb02 0040 	add.w	r0, r2, r0, lsl #1
900069e8:	fb90 f0f2 	sdiv	r0, r0, r2
900069ec:	2800      	cmp	r0, #0
900069ee:	bfb8      	it	lt
900069f0:	3001      	addlt	r0, #1
900069f2:	1040      	asrs	r0, r0, #1
    }
900069f4:	bd10      	pop	{r4, pc}
        return scaled2intX(getXAxisOffsetScaled());
900069f6:	4798      	blx	r3
900069f8:	e7e4      	b.n	900069c4 <_ZNK8touchgfx16DynamicDataGraph19getXAxisOffsetAsIntEv+0x14>
900069fa:	bf00      	nop
900069fc:	900066e5 	.word	0x900066e5

90006a00 <_ZNK8touchgfx16DynamicDataGraph21getXAxisOffsetAsFloatEv>:
        return scaled2floatX(getXAxisOffsetScaled());
90006a00:	6803      	ldr	r3, [r0, #0]
90006a02:	4a0b      	ldr	r2, [pc, #44]	; (90006a30 <_ZNK8touchgfx16DynamicDataGraph21getXAxisOffsetAsFloatEv+0x30>)
90006a04:	f8d3 3174 	ldr.w	r3, [r3, #372]	; 0x174
90006a08:	4293      	cmp	r3, r2
    virtual float getXAxisOffsetAsFloat() const
90006a0a:	b510      	push	{r4, lr}
90006a0c:	4604      	mov	r4, r0
90006a0e:	d10a      	bne.n	90006a26 <_ZNK8touchgfx16DynamicDataGraph21getXAxisOffsetAsFloatEv+0x26>
        return xAxisOffset;
90006a10:	edd0 7a50 	vldr	s15, [r0, #320]	; 0x140
        return (float)i / (float)scale;
90006a14:	ed94 0a0c 	vldr	s0, [r4, #48]	; 0x30
90006a18:	eef8 7ae7 	vcvt.f32.s32	s15, s15
90006a1c:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
    }
90006a20:	ee87 0a80 	vdiv.f32	s0, s15, s0
90006a24:	bd10      	pop	{r4, pc}
        return scaled2floatX(getXAxisOffsetScaled());
90006a26:	4798      	blx	r3
90006a28:	ee07 0a90 	vmov	s15, r0
90006a2c:	e7f2      	b.n	90006a14 <_ZNK8touchgfx16DynamicDataGraph21getXAxisOffsetAsFloatEv+0x14>
90006a2e:	bf00      	nop
90006a30:	900066e5 	.word	0x900066e5

90006a34 <_ZN8touchgfx16DynamicDataGraph14setXAxisFactorEi>:
        setXAxisFactorScaled(int2scaledX(factor));
90006a34:	6802      	ldr	r2, [r0, #0]
    virtual void setXAxisFactor(int factor)
90006a36:	b410      	push	{r4}
        return i * scale;
90006a38:	6b04      	ldr	r4, [r0, #48]	; 0x30
        setXAxisFactorScaled(int2scaledX(factor));
90006a3a:	f8d2 2148 	ldr.w	r2, [r2, #328]	; 0x148
        return i * scale;
90006a3e:	fb04 f101 	mul.w	r1, r4, r1
90006a42:	4c05      	ldr	r4, [pc, #20]	; (90006a58 <_ZN8touchgfx16DynamicDataGraph14setXAxisFactorEi+0x24>)
90006a44:	42a2      	cmp	r2, r4
90006a46:	d104      	bne.n	90006a52 <_ZN8touchgfx16DynamicDataGraph14setXAxisFactorEi+0x1e>
    }
90006a48:	f85d 4b04 	ldr.w	r4, [sp], #4
        xAxisFactor = factor;
90006a4c:	f8c0 113c 	str.w	r1, [r0, #316]	; 0x13c
    }
90006a50:	4770      	bx	lr
90006a52:	f85d 4b04 	ldr.w	r4, [sp], #4
        setXAxisFactorScaled(int2scaledX(factor));
90006a56:	4710      	bx	r2
90006a58:	900066cd 	.word	0x900066cd

90006a5c <_ZN8touchgfx16DynamicDataGraph14setXAxisFactorEf>:
        const float fs = f * (float)scale;
90006a5c:	edd0 7a0c 	vldr	s15, [r0, #48]	; 0x30
        setXAxisFactorScaled(float2scaledX(factor));
90006a60:	6803      	ldr	r3, [r0, #0]
        const float fs = f * (float)scale;
90006a62:	eef8 7ae7 	vcvt.f32.s32	s15, s15
        setXAxisFactorScaled(float2scaledX(factor));
90006a66:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
        const float fs = f * (float)scale;
90006a6a:	ee27 0a80 	vmul.f32	s0, s15, s0
        if (fs >= 0)
90006a6e:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
90006a72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
90006a76:	da17      	bge.n	90006aa8 <_ZN8touchgfx16DynamicDataGraph14setXAxisFactorEf+0x4c>
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
90006a78:	eefd 7ac0 	vcvt.s32.f32	s15, s0
90006a7c:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
90006a80:	eef8 6ae7 	vcvt.f32.s32	s13, s15
90006a84:	ee17 3a90 	vmov	r3, s15
90006a88:	3b01      	subs	r3, #1
90006a8a:	ee30 0a66 	vsub.f32	s0, s0, s13
90006a8e:	ee30 0a07 	vadd.f32	s0, s0, s14
90006a92:	eebd 0ac0 	vcvt.s32.f32	s0, s0
90006a96:	ee10 1a10 	vmov	r1, s0
90006a9a:	4419      	add	r1, r3
90006a9c:	4b08      	ldr	r3, [pc, #32]	; (90006ac0 <_ZN8touchgfx16DynamicDataGraph14setXAxisFactorEf+0x64>)
90006a9e:	429a      	cmp	r2, r3
90006aa0:	d10d      	bne.n	90006abe <_ZN8touchgfx16DynamicDataGraph14setXAxisFactorEf+0x62>
        xAxisFactor = factor;
90006aa2:	f8c0 113c 	str.w	r1, [r0, #316]	; 0x13c
    }
90006aa6:	4770      	bx	lr
            return (int)(fs + 0.5f);
90006aa8:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
90006aac:	4b04      	ldr	r3, [pc, #16]	; (90006ac0 <_ZN8touchgfx16DynamicDataGraph14setXAxisFactorEf+0x64>)
90006aae:	429a      	cmp	r2, r3
90006ab0:	ee30 0a27 	vadd.f32	s0, s0, s15
90006ab4:	eefd 7ac0 	vcvt.s32.f32	s15, s0
90006ab8:	ee17 1a90 	vmov	r1, s15
90006abc:	d0f1      	beq.n	90006aa2 <_ZN8touchgfx16DynamicDataGraph14setXAxisFactorEf+0x46>
        setXAxisFactorScaled(float2scaledX(factor));
90006abe:	4710      	bx	r2
90006ac0:	900066cd 	.word	0x900066cd

90006ac4 <_ZNK8touchgfx16DynamicDataGraph19getXAxisFactorAsIntEv>:
        return scaled2intX(getXAxisFactorScaled());
90006ac4:	6803      	ldr	r3, [r0, #0]
90006ac6:	4a12      	ldr	r2, [pc, #72]	; (90006b10 <_ZNK8touchgfx16DynamicDataGraph19getXAxisFactorAsIntEv+0x4c>)
90006ac8:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
90006acc:	4293      	cmp	r3, r2
    virtual int getXAxisFactorAsInt() const
90006ace:	b510      	push	{r4, lr}
90006ad0:	4604      	mov	r4, r0
90006ad2:	d11a      	bne.n	90006b0a <_ZNK8touchgfx16DynamicDataGraph19getXAxisFactorAsIntEv+0x46>
        return xAxisFactor;
90006ad4:	f8d0 013c 	ldr.w	r0, [r0, #316]	; 0x13c
        if (i >= 0)
90006ad8:	2800      	cmp	r0, #0
        return scaled2int(i, xScale);
90006ada:	6b22      	ldr	r2, [r4, #48]	; 0x30
        if (i >= 0)
90006adc:	da0c      	bge.n	90006af8 <_ZNK8touchgfx16DynamicDataGraph19getXAxisFactorAsIntEv+0x34>
        return -(((-i * 2 + scale - 1) / scale) / 2);
90006ade:	ebc0 70c0 	rsb	r0, r0, r0, lsl #31
90006ae2:	eb02 0040 	add.w	r0, r2, r0, lsl #1
90006ae6:	3801      	subs	r0, #1
90006ae8:	fb90 f0f2 	sdiv	r0, r0, r2
90006aec:	2800      	cmp	r0, #0
90006aee:	bfb8      	it	lt
90006af0:	3001      	addlt	r0, #1
90006af2:	1040      	asrs	r0, r0, #1
90006af4:	4240      	negs	r0, r0
    }
90006af6:	bd10      	pop	{r4, pc}
            return ((i * 2 + scale) / scale) / 2;
90006af8:	eb02 0040 	add.w	r0, r2, r0, lsl #1
90006afc:	fb90 f0f2 	sdiv	r0, r0, r2
90006b00:	2800      	cmp	r0, #0
90006b02:	bfb8      	it	lt
90006b04:	3001      	addlt	r0, #1
90006b06:	1040      	asrs	r0, r0, #1
    }
90006b08:	bd10      	pop	{r4, pc}
        return scaled2intX(getXAxisFactorScaled());
90006b0a:	4798      	blx	r3
90006b0c:	e7e4      	b.n	90006ad8 <_ZNK8touchgfx16DynamicDataGraph19getXAxisFactorAsIntEv+0x14>
90006b0e:	bf00      	nop
90006b10:	900066d5 	.word	0x900066d5

90006b14 <_ZNK8touchgfx16DynamicDataGraph21getXAxisFactorAsFloatEv>:
        return scaled2floatX(getXAxisFactorScaled());
90006b14:	6803      	ldr	r3, [r0, #0]
90006b16:	4a0b      	ldr	r2, [pc, #44]	; (90006b44 <_ZNK8touchgfx16DynamicDataGraph21getXAxisFactorAsFloatEv+0x30>)
90006b18:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
90006b1c:	4293      	cmp	r3, r2
    virtual float getXAxisFactorAsFloat() const
90006b1e:	b510      	push	{r4, lr}
90006b20:	4604      	mov	r4, r0
90006b22:	d10a      	bne.n	90006b3a <_ZNK8touchgfx16DynamicDataGraph21getXAxisFactorAsFloatEv+0x26>
        return xAxisFactor;
90006b24:	edd0 7a4f 	vldr	s15, [r0, #316]	; 0x13c
        return (float)i / (float)scale;
90006b28:	ed94 0a0c 	vldr	s0, [r4, #48]	; 0x30
90006b2c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
90006b30:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
    }
90006b34:	ee87 0a80 	vdiv.f32	s0, s15, s0
90006b38:	bd10      	pop	{r4, pc}
        return scaled2floatX(getXAxisFactorScaled());
90006b3a:	4798      	blx	r3
90006b3c:	ee07 0a90 	vmov	s15, r0
90006b40:	e7f2      	b.n	90006b28 <_ZNK8touchgfx16DynamicDataGraph21getXAxisFactorAsFloatEv+0x14>
90006b42:	bf00      	nop
90006b44:	900066d5 	.word	0x900066d5

90006b48 <_ZN8touchgfx16DynamicDataGraph13setXAxisScaleEi>:
    TOUCHGFX_DEPRECATED("Please use setXAxisFactor()", virtual void setXAxisScale(int scale))
90006b48:	b470      	push	{r4, r5, r6}
        setXAxisFactor(scale);
90006b4a:	6804      	ldr	r4, [r0, #0]
90006b4c:	4e0b      	ldr	r6, [pc, #44]	; (90006b7c <_ZN8touchgfx16DynamicDataGraph13setXAxisScaleEi+0x34>)
90006b4e:	f8d4 513c 	ldr.w	r5, [r4, #316]	; 0x13c
90006b52:	42b5      	cmp	r5, r6
90006b54:	d10c      	bne.n	90006b70 <_ZN8touchgfx16DynamicDataGraph13setXAxisScaleEi+0x28>
90006b56:	460a      	mov	r2, r1
        return i * scale;
90006b58:	6b01      	ldr	r1, [r0, #48]	; 0x30
        setXAxisFactorScaled(int2scaledX(factor));
90006b5a:	f8d4 4148 	ldr.w	r4, [r4, #328]	; 0x148
        return i * scale;
90006b5e:	fb02 f101 	mul.w	r1, r2, r1
90006b62:	4a07      	ldr	r2, [pc, #28]	; (90006b80 <_ZN8touchgfx16DynamicDataGraph13setXAxisScaleEi+0x38>)
90006b64:	4294      	cmp	r4, r2
90006b66:	d106      	bne.n	90006b76 <_ZN8touchgfx16DynamicDataGraph13setXAxisScaleEi+0x2e>
        xAxisFactor = factor;
90006b68:	f8c0 113c 	str.w	r1, [r0, #316]	; 0x13c
    }
90006b6c:	bc70      	pop	{r4, r5, r6}
90006b6e:	4770      	bx	lr
        setXAxisFactor(scale);
90006b70:	462b      	mov	r3, r5
    }
90006b72:	bc70      	pop	{r4, r5, r6}
        setXAxisFactor(scale);
90006b74:	4718      	bx	r3
        setXAxisFactorScaled(int2scaledX(factor));
90006b76:	4623      	mov	r3, r4
    }
90006b78:	bc70      	pop	{r4, r5, r6}
        setXAxisFactorScaled(int2scaledX(factor));
90006b7a:	4718      	bx	r3
90006b7c:	90006a35 	.word	0x90006a35
90006b80:	900066cd 	.word	0x900066cd

90006b84 <_ZNK8touchgfx16DynamicDataGraph20getXAxisScaleAsFloatEv>:
        return getXAxisFactorAsFloat();
90006b84:	6803      	ldr	r3, [r0, #0]
90006b86:	490e      	ldr	r1, [pc, #56]	; (90006bc0 <_ZNK8touchgfx16DynamicDataGraph20getXAxisScaleAsFloatEv+0x3c>)
90006b88:	f8d3 2158 	ldr.w	r2, [r3, #344]	; 0x158
90006b8c:	428a      	cmp	r2, r1
90006b8e:	d111      	bne.n	90006bb4 <_ZNK8touchgfx16DynamicDataGraph20getXAxisScaleAsFloatEv+0x30>
        return scaled2floatX(getXAxisFactorScaled());
90006b90:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
90006b94:	4a0b      	ldr	r2, [pc, #44]	; (90006bc4 <_ZNK8touchgfx16DynamicDataGraph20getXAxisScaleAsFloatEv+0x40>)
90006b96:	4293      	cmp	r3, r2
    TOUCHGFX_DEPRECATED("Please use getXAxisFactorAsFloat()", virtual float getXAxisScaleAsFloat() const)
90006b98:	b510      	push	{r4, lr}
90006b9a:	4604      	mov	r4, r0
        return scaled2floatX(getXAxisFactorScaled());
90006b9c:	d10b      	bne.n	90006bb6 <_ZNK8touchgfx16DynamicDataGraph20getXAxisScaleAsFloatEv+0x32>
        return xAxisFactor;
90006b9e:	edd0 7a4f 	vldr	s15, [r0, #316]	; 0x13c
        return (float)i / (float)scale;
90006ba2:	ed94 7a0c 	vldr	s14, [r4, #48]	; 0x30
90006ba6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
90006baa:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
90006bae:	ee87 0a87 	vdiv.f32	s0, s15, s14
    }
90006bb2:	bd10      	pop	{r4, pc}
        return getXAxisFactorAsFloat();
90006bb4:	4710      	bx	r2
        return scaled2floatX(getXAxisFactorScaled());
90006bb6:	4798      	blx	r3
90006bb8:	ee07 0a90 	vmov	s15, r0
90006bbc:	e7f1      	b.n	90006ba2 <_ZNK8touchgfx16DynamicDataGraph20getXAxisScaleAsFloatEv+0x1e>
90006bbe:	bf00      	nop
90006bc0:	90006b15 	.word	0x90006b15
90006bc4:	900066d5 	.word	0x900066d5

90006bc8 <_ZNK8touchgfx16DynamicDataGraph16indexToScreenYQ5Es>:
        return valueToScreenXQ5(int2scaledX(index));
    }

    virtual CWRUtil::Q5 indexToScreenYQ5(int16_t index) const
    {
        return valueToScreenYQ5(yValues[dataIndex(index)]);
90006bc8:	6802      	ldr	r2, [r0, #0]
90006bca:	f8df c090 	ldr.w	ip, [pc, #144]	; 90006c5c <_ZNK8touchgfx16DynamicDataGraph16indexToScreenYQ5Es+0x94>
    virtual CWRUtil::Q5 indexToScreenYQ5(int16_t index) const
90006bce:	b5f0      	push	{r4, r5, r6, r7, lr}
        return valueToScreenYQ5(yValues[dataIndex(index)]);
90006bd0:	f8d2 6180 	ldr.w	r6, [r2, #384]	; 0x180
    virtual CWRUtil::Q5 indexToScreenYQ5(int16_t index) const
90006bd4:	b085      	sub	sp, #20
90006bd6:	4604      	mov	r4, r0
        return valueToScreenYQ5(yValues[dataIndex(index)]);
90006bd8:	f8d0 7144 	ldr.w	r7, [r0, #324]	; 0x144
90006bdc:	4566      	cmp	r6, ip
90006bde:	f8d2 5118 	ldr.w	r5, [r2, #280]	; 0x118
90006be2:	d136      	bne.n	90006c52 <_ZNK8touchgfx16DynamicDataGraph16indexToScreenYQ5Es+0x8a>
90006be4:	460b      	mov	r3, r1
90006be6:	4a1c      	ldr	r2, [pc, #112]	; (90006c58 <_ZNK8touchgfx16DynamicDataGraph16indexToScreenYQ5Es+0x90>)
90006be8:	f857 1023 	ldr.w	r1, [r7, r3, lsl #2]
90006bec:	4295      	cmp	r5, r2
90006bee:	d12a      	bne.n	90006c46 <_ZNK8touchgfx16DynamicDataGraph16indexToScreenYQ5Es+0x7e>
        return graphArea.getHeight() - (topPadding + bottomPadding);
90006bf0:	f9b4 c114 	ldrsh.w	ip, [r4, #276]	; 0x114
90006bf4:	f8b4 211a 	ldrh.w	r2, [r4, #282]	; 0x11a
90006bf8:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
90006bfc:	4462      	add	r2, ip
90006bfe:	1a9b      	subs	r3, r3, r2
        return CWRUtil::toQ5(graphAreaHeight + topPadding - 1) - CWRUtil::muldiv_toQ5(y - graphRangeMinY, graphAreaHeight - 1, graphRangeMaxY - graphRangeMinY);
90006c00:	e9d4 524d 	ldrd	r5, r2, [r4, #308]	; 0x134
90006c04:	b21c      	sxth	r4, r3
     * @return factor1 * factor2 / divisor as a Q5
     */
    static Q5 muldiv_toQ5(int32_t factor1, int32_t factor2, int32_t divisor)
    {
        int32_t remainder;
        int32_t result = muldiv(factor1, factor2, divisor, remainder);
90006c06:	ab03      	add	r3, sp, #12
90006c08:	1b52      	subs	r2, r2, r5
90006c0a:	1b48      	subs	r0, r1, r5
90006c0c:	44a4      	add	ip, r4
90006c0e:	1e61      	subs	r1, r4, #1
90006c10:	9201      	str	r2, [sp, #4]
90006c12:	f10c 3cff 	add.w	ip, ip, #4294967295
        return Q5((int)(value * Rasterizer::POLY_BASE_SIZE));
90006c16:	ea4f 144c 	mov.w	r4, ip, lsl #5
        int32_t result = muldiv(factor1, factor2, divisor, remainder);
90006c1a:	f012 fca6 	bl	9001956a <_ZN8touchgfx6muldivElllRl>
        if (result >= 0)
90006c1e:	1e05      	subs	r5, r0, #0
        return Q5(muldiv((int)factor1, (int)factor2, (int)divisor));
90006c20:	9903      	ldr	r1, [sp, #12]
90006c22:	f04f 0020 	mov.w	r0, #32
        if (result >= 0)
90006c26:	9a01      	ldr	r2, [sp, #4]
90006c28:	db06      	blt.n	90006c38 <_ZNK8touchgfx16DynamicDataGraph16indexToScreenYQ5Es+0x70>
        return Q5(muldiv((int)factor1, (int)factor2, (int)divisor));
90006c2a:	f012 fcbd 	bl	900195a8 <_ZN8touchgfx6muldivElll>
            return Q5(v + q5.v);
90006c2e:	eb00 1045 	add.w	r0, r0, r5, lsl #5
            return Q5(v - q5.v);
90006c32:	1a20      	subs	r0, r4, r0
    }
90006c34:	b005      	add	sp, #20
90006c36:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return Q5(muldiv((int)factor1, (int)factor2, (int)divisor));
90006c38:	f012 fcb6 	bl	900195a8 <_ZN8touchgfx6muldivElll>
            return Q5(v - q5.v);
90006c3c:	ebc0 1045 	rsb	r0, r0, r5, lsl #5
90006c40:	1a20      	subs	r0, r4, r0
90006c42:	b005      	add	sp, #20
90006c44:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return valueToScreenYQ5(yValues[dataIndex(index)]);
90006c46:	4620      	mov	r0, r4
90006c48:	462b      	mov	r3, r5
    }
90006c4a:	b005      	add	sp, #20
90006c4c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
        return valueToScreenYQ5(yValues[dataIndex(index)]);
90006c50:	4718      	bx	r3
90006c52:	47b0      	blx	r6
90006c54:	4603      	mov	r3, r0
90006c56:	e7c6      	b.n	90006be6 <_ZNK8touchgfx16DynamicDataGraph16indexToScreenYQ5Es+0x1e>
90006c58:	90006db1 	.word	0x90006db1
90006c5c:	900066ed 	.word	0x900066ed

90006c60 <_ZNK8touchgfx16DynamicDataGraph18getXAxisScaleAsIntEv>:
        return getXAxisFactorAsInt();
90006c60:	6803      	ldr	r3, [r0, #0]
90006c62:	4915      	ldr	r1, [pc, #84]	; (90006cb8 <_ZNK8touchgfx16DynamicDataGraph18getXAxisScaleAsIntEv+0x58>)
90006c64:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
90006c68:	428a      	cmp	r2, r1
90006c6a:	d121      	bne.n	90006cb0 <_ZNK8touchgfx16DynamicDataGraph18getXAxisScaleAsIntEv+0x50>
        return scaled2intX(getXAxisFactorScaled());
90006c6c:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
90006c70:	4a12      	ldr	r2, [pc, #72]	; (90006cbc <_ZNK8touchgfx16DynamicDataGraph18getXAxisScaleAsIntEv+0x5c>)
90006c72:	4293      	cmp	r3, r2
    TOUCHGFX_DEPRECATED("Please use getXAxisFactorAsInt()", virtual int getXAxisScaleAsInt() const)
90006c74:	b510      	push	{r4, lr}
90006c76:	4604      	mov	r4, r0
        return scaled2intX(getXAxisFactorScaled());
90006c78:	d11b      	bne.n	90006cb2 <_ZNK8touchgfx16DynamicDataGraph18getXAxisScaleAsIntEv+0x52>
        return xAxisFactor;
90006c7a:	f8d0 013c 	ldr.w	r0, [r0, #316]	; 0x13c
        if (i >= 0)
90006c7e:	2800      	cmp	r0, #0
        return scaled2int(i, xScale);
90006c80:	6b22      	ldr	r2, [r4, #48]	; 0x30
        if (i >= 0)
90006c82:	da0c      	bge.n	90006c9e <_ZNK8touchgfx16DynamicDataGraph18getXAxisScaleAsIntEv+0x3e>
        return -(((-i * 2 + scale - 1) / scale) / 2);
90006c84:	ebc0 70c0 	rsb	r0, r0, r0, lsl #31
90006c88:	eb02 0040 	add.w	r0, r2, r0, lsl #1
90006c8c:	3801      	subs	r0, #1
90006c8e:	fb90 f0f2 	sdiv	r0, r0, r2
90006c92:	2800      	cmp	r0, #0
90006c94:	bfb8      	it	lt
90006c96:	3001      	addlt	r0, #1
90006c98:	1040      	asrs	r0, r0, #1
90006c9a:	4240      	negs	r0, r0
    }
90006c9c:	bd10      	pop	{r4, pc}
            return ((i * 2 + scale) / scale) / 2;
90006c9e:	eb02 0040 	add.w	r0, r2, r0, lsl #1
90006ca2:	fb90 f0f2 	sdiv	r0, r0, r2
90006ca6:	2800      	cmp	r0, #0
90006ca8:	bfb8      	it	lt
90006caa:	3001      	addlt	r0, #1
90006cac:	1040      	asrs	r0, r0, #1
    }
90006cae:	bd10      	pop	{r4, pc}
        return getXAxisFactorAsInt();
90006cb0:	4710      	bx	r2
        return scaled2intX(getXAxisFactorScaled());
90006cb2:	4798      	blx	r3
90006cb4:	e7e3      	b.n	90006c7e <_ZNK8touchgfx16DynamicDataGraph18getXAxisScaleAsIntEv+0x1e>
90006cb6:	bf00      	nop
90006cb8:	90006ac5 	.word	0x90006ac5
90006cbc:	900066d5 	.word	0x900066d5

90006cc0 <_ZN8touchgfx16DynamicDataGraph13setXAxisScaleEf>:
        setXAxisFactor(scale);
90006cc0:	6802      	ldr	r2, [r0, #0]
    TOUCHGFX_DEPRECATED("Please use setXAxisFactor()", virtual void setXAxisScale(float scale))
90006cc2:	b410      	push	{r4}
        setXAxisFactor(scale);
90006cc4:	f8d2 1144 	ldr.w	r1, [r2, #324]	; 0x144
90006cc8:	4c1e      	ldr	r4, [pc, #120]	; (90006d44 <_ZN8touchgfx16DynamicDataGraph13setXAxisScaleEf+0x84>)
90006cca:	42a1      	cmp	r1, r4
90006ccc:	d137      	bne.n	90006d3e <_ZN8touchgfx16DynamicDataGraph13setXAxisScaleEf+0x7e>
        const float fs = f * (float)scale;
90006cce:	edd0 7a0c 	vldr	s15, [r0, #48]	; 0x30
90006cd2:	4603      	mov	r3, r0
        setXAxisFactorScaled(float2scaledX(factor));
90006cd4:	f8d2 4148 	ldr.w	r4, [r2, #328]	; 0x148
        const float fs = f * (float)scale;
90006cd8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
90006cdc:	ee27 0a80 	vmul.f32	s0, s15, s0
        if (fs >= 0)
90006ce0:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
90006ce4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
90006ce8:	da19      	bge.n	90006d1e <_ZN8touchgfx16DynamicDataGraph13setXAxisScaleEf+0x5e>
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
90006cea:	eefd 7ac0 	vcvt.s32.f32	s15, s0
90006cee:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
90006cf2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
90006cf6:	ee17 2a90 	vmov	r2, s15
90006cfa:	3a01      	subs	r2, #1
90006cfc:	ee30 0a66 	vsub.f32	s0, s0, s13
90006d00:	ee30 0a07 	vadd.f32	s0, s0, s14
90006d04:	eebd 0ac0 	vcvt.s32.f32	s0, s0
90006d08:	ee10 1a10 	vmov	r1, s0
90006d0c:	4411      	add	r1, r2
90006d0e:	4a0e      	ldr	r2, [pc, #56]	; (90006d48 <_ZN8touchgfx16DynamicDataGraph13setXAxisScaleEf+0x88>)
90006d10:	4294      	cmp	r4, r2
90006d12:	d10f      	bne.n	90006d34 <_ZN8touchgfx16DynamicDataGraph13setXAxisScaleEf+0x74>
    }
90006d14:	f85d 4b04 	ldr.w	r4, [sp], #4
        xAxisFactor = factor;
90006d18:	f8c3 113c 	str.w	r1, [r3, #316]	; 0x13c
    }
90006d1c:	4770      	bx	lr
            return (int)(fs + 0.5f);
90006d1e:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
90006d22:	4a09      	ldr	r2, [pc, #36]	; (90006d48 <_ZN8touchgfx16DynamicDataGraph13setXAxisScaleEf+0x88>)
90006d24:	4294      	cmp	r4, r2
90006d26:	ee30 0a27 	vadd.f32	s0, s0, s15
90006d2a:	eefd 7ac0 	vcvt.s32.f32	s15, s0
90006d2e:	ee17 1a90 	vmov	r1, s15
90006d32:	d0ef      	beq.n	90006d14 <_ZN8touchgfx16DynamicDataGraph13setXAxisScaleEf+0x54>
        setXAxisFactorScaled(float2scaledX(factor));
90006d34:	4618      	mov	r0, r3
90006d36:	4623      	mov	r3, r4
    }
90006d38:	f85d 4b04 	ldr.w	r4, [sp], #4
        setXAxisFactorScaled(float2scaledX(factor));
90006d3c:	4718      	bx	r3
    }
90006d3e:	f85d 4b04 	ldr.w	r4, [sp], #4
        setXAxisFactor(scale);
90006d42:	4708      	bx	r1
90006d44:	90006a5d 	.word	0x90006a5d
90006d48:	900066cd 	.word	0x900066cd

90006d4c <_ZNK8touchgfx17AbstractDataGraph16valueToScreenXQ5Ei>:
    virtual CWRUtil::Q5 valueToScreenXQ5(int x) const
90006d4c:	b530      	push	{r4, r5, lr}
        return graphArea.getWidth() - (leftPadding + rightPadding);
90006d4e:	f8b0 2116 	ldrh.w	r2, [r0, #278]	; 0x116
    virtual CWRUtil::Q5 valueToScreenXQ5(int x) const
90006d52:	4604      	mov	r4, r0
        return graphArea.getWidth() - (leftPadding + rightPadding);
90006d54:	f8b0 0118 	ldrh.w	r0, [r0, #280]	; 0x118
    virtual CWRUtil::Q5 valueToScreenXQ5(int x) const
90006d58:	b085      	sub	sp, #20
        return CWRUtil::muldiv_toQ5(x - graphRangeMinX, getGraphAreaWidth() - 1, graphRangeMaxX - graphRangeMinX) + CWRUtil::toQ5(leftPadding);
90006d5a:	f8d4 512c 	ldr.w	r5, [r4, #300]	; 0x12c
        return graphArea.getWidth() - (leftPadding + rightPadding);
90006d5e:	f8b4 3040 	ldrh.w	r3, [r4, #64]	; 0x40
90006d62:	4402      	add	r2, r0
        int32_t result = muldiv(factor1, factor2, divisor, remainder);
90006d64:	1b48      	subs	r0, r1, r5
90006d66:	1a99      	subs	r1, r3, r2
        return CWRUtil::muldiv_toQ5(x - graphRangeMinX, getGraphAreaWidth() - 1, graphRangeMaxX - graphRangeMinX) + CWRUtil::toQ5(leftPadding);
90006d68:	f8d4 2130 	ldr.w	r2, [r4, #304]	; 0x130
90006d6c:	ab03      	add	r3, sp, #12
90006d6e:	b209      	sxth	r1, r1
90006d70:	1b52      	subs	r2, r2, r5
90006d72:	3901      	subs	r1, #1
90006d74:	9201      	str	r2, [sp, #4]
90006d76:	f012 fbf8 	bl	9001956a <_ZN8touchgfx6muldivElllRl>
        if (result >= 0)
90006d7a:	1e05      	subs	r5, r0, #0
        return Q5(muldiv((int)factor1, (int)factor2, (int)divisor));
90006d7c:	9903      	ldr	r1, [sp, #12]
90006d7e:	f04f 0020 	mov.w	r0, #32
        if (result >= 0)
90006d82:	9a01      	ldr	r2, [sp, #4]
90006d84:	db09      	blt.n	90006d9a <_ZNK8touchgfx17AbstractDataGraph16valueToScreenXQ5Ei+0x4e>
        return Q5(muldiv((int)factor1, (int)factor2, (int)divisor));
90006d86:	f012 fc0f 	bl	900195a8 <_ZN8touchgfx6muldivElll>
            return Q5(v + q5.v);
90006d8a:	f9b4 3116 	ldrsh.w	r3, [r4, #278]	; 0x116
90006d8e:	eb00 1045 	add.w	r0, r0, r5, lsl #5
    }
90006d92:	eb00 1043 	add.w	r0, r0, r3, lsl #5
90006d96:	b005      	add	sp, #20
90006d98:	bd30      	pop	{r4, r5, pc}
        return Q5(muldiv((int)factor1, (int)factor2, (int)divisor));
90006d9a:	f012 fc05 	bl	900195a8 <_ZN8touchgfx6muldivElll>
            return Q5(v + q5.v);
90006d9e:	f9b4 3116 	ldrsh.w	r3, [r4, #278]	; 0x116
            return Q5(v - q5.v);
90006da2:	ebc0 1045 	rsb	r0, r0, r5, lsl #5
90006da6:	eb00 1043 	add.w	r0, r0, r3, lsl #5
90006daa:	b005      	add	sp, #20
90006dac:	bd30      	pop	{r4, r5, pc}
90006dae:	bf00      	nop

90006db0 <_ZNK8touchgfx17AbstractDataGraph16valueToScreenYQ5Ei>:
        return graphArea.getHeight() - (topPadding + bottomPadding);
90006db0:	f9b0 c114 	ldrsh.w	ip, [r0, #276]	; 0x114
90006db4:	f8b0 311a 	ldrh.w	r3, [r0, #282]	; 0x11a
    virtual CWRUtil::Q5 valueToScreenYQ5(int y) const
90006db8:	b530      	push	{r4, r5, lr}
        return graphArea.getHeight() - (topPadding + bottomPadding);
90006dba:	4463      	add	r3, ip
90006dbc:	f8b0 4042 	ldrh.w	r4, [r0, #66]	; 0x42
    virtual CWRUtil::Q5 valueToScreenYQ5(int y) const
90006dc0:	b085      	sub	sp, #20
        return graphArea.getHeight() - (topPadding + bottomPadding);
90006dc2:	1ae4      	subs	r4, r4, r3
        return CWRUtil::toQ5(graphAreaHeight + topPadding - 1) - CWRUtil::muldiv_toQ5(y - graphRangeMinY, graphAreaHeight - 1, graphRangeMaxY - graphRangeMinY);
90006dc4:	b224      	sxth	r4, r4
90006dc6:	e9d0 324d 	ldrd	r3, r2, [r0, #308]	; 0x134
90006dca:	44a4      	add	ip, r4
90006dcc:	1ad2      	subs	r2, r2, r3
        int32_t result = muldiv(factor1, factor2, divisor, remainder);
90006dce:	1ac8      	subs	r0, r1, r3
90006dd0:	f10c 3cff 	add.w	ip, ip, #4294967295
90006dd4:	1e61      	subs	r1, r4, #1
90006dd6:	ab03      	add	r3, sp, #12
90006dd8:	9201      	str	r2, [sp, #4]
        return Q5((int)(value * Rasterizer::POLY_BASE_SIZE));
90006dda:	ea4f 144c 	mov.w	r4, ip, lsl #5
        int32_t result = muldiv(factor1, factor2, divisor, remainder);
90006dde:	f012 fbc4 	bl	9001956a <_ZN8touchgfx6muldivElllRl>
        if (result >= 0)
90006de2:	1e05      	subs	r5, r0, #0
        return Q5(muldiv((int)factor1, (int)factor2, (int)divisor));
90006de4:	9903      	ldr	r1, [sp, #12]
90006de6:	f04f 0020 	mov.w	r0, #32
        if (result >= 0)
90006dea:	9a01      	ldr	r2, [sp, #4]
90006dec:	db06      	blt.n	90006dfc <_ZNK8touchgfx17AbstractDataGraph16valueToScreenYQ5Ei+0x4c>
        return Q5(muldiv((int)factor1, (int)factor2, (int)divisor));
90006dee:	f012 fbdb 	bl	900195a8 <_ZN8touchgfx6muldivElll>
            return Q5(v + q5.v);
90006df2:	eb00 1045 	add.w	r0, r0, r5, lsl #5
    }
90006df6:	1a20      	subs	r0, r4, r0
90006df8:	b005      	add	sp, #20
90006dfa:	bd30      	pop	{r4, r5, pc}
        return Q5(muldiv((int)factor1, (int)factor2, (int)divisor));
90006dfc:	f012 fbd4 	bl	900195a8 <_ZN8touchgfx6muldivElll>
            return Q5(v - q5.v);
90006e00:	ebc0 1045 	rsb	r0, r0, r5, lsl #5
90006e04:	1a20      	subs	r0, r4, r0
90006e06:	b005      	add	sp, #20
90006e08:	bd30      	pop	{r4, r5, pc}
90006e0a:	bf00      	nop

90006e0c <_ZNK8touchgfx16DynamicDataGraph16indexToScreenXQ5Es>:
        return i * scale;
90006e0c:	6b02      	ldr	r2, [r0, #48]	; 0x30
        return valueToScreenXQ5(int2scaledX(index));
90006e0e:	6803      	ldr	r3, [r0, #0]
        return i * scale;
90006e10:	fb02 f101 	mul.w	r1, r2, r1
90006e14:	4a1b      	ldr	r2, [pc, #108]	; (90006e84 <_ZNK8touchgfx16DynamicDataGraph16indexToScreenXQ5Es+0x78>)
        return valueToScreenXQ5(int2scaledX(index));
90006e16:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
        return i * scale;
90006e1a:	4293      	cmp	r3, r2
90006e1c:	d130      	bne.n	90006e80 <_ZNK8touchgfx16DynamicDataGraph16indexToScreenXQ5Es+0x74>
        return graphArea.getWidth() - (leftPadding + rightPadding);
90006e1e:	f8b0 2116 	ldrh.w	r2, [r0, #278]	; 0x116
    virtual CWRUtil::Q5 indexToScreenXQ5(int16_t index) const
90006e22:	b530      	push	{r4, r5, lr}
90006e24:	4604      	mov	r4, r0
        return graphArea.getWidth() - (leftPadding + rightPadding);
90006e26:	f8b0 0118 	ldrh.w	r0, [r0, #280]	; 0x118
    virtual CWRUtil::Q5 indexToScreenXQ5(int16_t index) const
90006e2a:	b085      	sub	sp, #20
        return CWRUtil::muldiv_toQ5(x - graphRangeMinX, getGraphAreaWidth() - 1, graphRangeMaxX - graphRangeMinX) + CWRUtil::toQ5(leftPadding);
90006e2c:	f8d4 512c 	ldr.w	r5, [r4, #300]	; 0x12c
        return graphArea.getWidth() - (leftPadding + rightPadding);
90006e30:	4402      	add	r2, r0
90006e32:	f8b4 3040 	ldrh.w	r3, [r4, #64]	; 0x40
        int32_t result = muldiv(factor1, factor2, divisor, remainder);
90006e36:	1b48      	subs	r0, r1, r5
90006e38:	1a99      	subs	r1, r3, r2
        return CWRUtil::muldiv_toQ5(x - graphRangeMinX, getGraphAreaWidth() - 1, graphRangeMaxX - graphRangeMinX) + CWRUtil::toQ5(leftPadding);
90006e3a:	f8d4 2130 	ldr.w	r2, [r4, #304]	; 0x130
90006e3e:	ab03      	add	r3, sp, #12
90006e40:	b209      	sxth	r1, r1
90006e42:	1b52      	subs	r2, r2, r5
90006e44:	3901      	subs	r1, #1
90006e46:	9201      	str	r2, [sp, #4]
90006e48:	f012 fb8f 	bl	9001956a <_ZN8touchgfx6muldivElllRl>
        if (result >= 0)
90006e4c:	1e05      	subs	r5, r0, #0
        return Q5(muldiv((int)factor1, (int)factor2, (int)divisor));
90006e4e:	9903      	ldr	r1, [sp, #12]
90006e50:	f04f 0020 	mov.w	r0, #32
        if (result >= 0)
90006e54:	9a01      	ldr	r2, [sp, #4]
90006e56:	db09      	blt.n	90006e6c <_ZNK8touchgfx16DynamicDataGraph16indexToScreenXQ5Es+0x60>
        return Q5(muldiv((int)factor1, (int)factor2, (int)divisor));
90006e58:	f012 fba6 	bl	900195a8 <_ZN8touchgfx6muldivElll>
            return Q5(v + q5.v);
90006e5c:	f9b4 3116 	ldrsh.w	r3, [r4, #278]	; 0x116
90006e60:	eb00 1045 	add.w	r0, r0, r5, lsl #5
90006e64:	eb00 1043 	add.w	r0, r0, r3, lsl #5
    }
90006e68:	b005      	add	sp, #20
90006e6a:	bd30      	pop	{r4, r5, pc}
        return Q5(muldiv((int)factor1, (int)factor2, (int)divisor));
90006e6c:	f012 fb9c 	bl	900195a8 <_ZN8touchgfx6muldivElll>
            return Q5(v + q5.v);
90006e70:	f9b4 3116 	ldrsh.w	r3, [r4, #278]	; 0x116
            return Q5(v - q5.v);
90006e74:	ebc0 1045 	rsb	r0, r0, r5, lsl #5
            return Q5(v + q5.v);
90006e78:	eb00 1043 	add.w	r0, r0, r3, lsl #5
90006e7c:	b005      	add	sp, #20
90006e7e:	bd30      	pop	{r4, r5, pc}
        return valueToScreenXQ5(int2scaledX(index));
90006e80:	4718      	bx	r3
90006e82:	bf00      	nop
90006e84:	90006d4d 	.word	0x90006d4d

90006e88 <_ZN8touchgfx17AbstractDataGraph18setGraphRangeXAutoEbi>:
        setGraphRangeXAutoScaled(showYaxis, int2scaledX(margin));
90006e88:	6803      	ldr	r3, [r0, #0]
    virtual void setGraphRangeXAuto(bool showYaxis = true, int margin = 0)
90006e8a:	b470      	push	{r4, r5, r6}
        setGraphRangeXAutoScaled(showYaxis, int2scaledX(margin));
90006e8c:	f8d3 40b0 	ldr.w	r4, [r3, #176]	; 0xb0
90006e90:	4e15      	ldr	r6, [pc, #84]	; (90006ee8 <_ZN8touchgfx17AbstractDataGraph18setGraphRangeXAutoEbi+0x60>)
        return int2scaled(i, xScale);
90006e92:	6b05      	ldr	r5, [r0, #48]	; 0x30
        return i * scale;
90006e94:	42b4      	cmp	r4, r6
90006e96:	fb05 f202 	mul.w	r2, r5, r2
90006e9a:	d122      	bne.n	90006ee2 <_ZN8touchgfx17AbstractDataGraph18setGraphRangeXAutoEbi+0x5a>
        if (i >= 0)
90006e9c:	2a00      	cmp	r2, #0
90006e9e:	4684      	mov	ip, r0
        setGraphRangeXScaled(-scaled2intX(margin), (usedCapacity - 1) + scaled2intX(margin));
90006ea0:	f8d3 40a4 	ldr.w	r4, [r3, #164]	; 0xa4
        if (i >= 0)
90006ea4:	da14      	bge.n	90006ed0 <_ZN8touchgfx17AbstractDataGraph18setGraphRangeXAutoEbi+0x48>
        return -(((-i * 2 + scale - 1) / scale) / 2);
90006ea6:	ebc2 72c2 	rsb	r2, r2, r2, lsl #31
90006eaa:	eb05 0342 	add.w	r3, r5, r2, lsl #1
90006eae:	3b01      	subs	r3, #1
90006eb0:	fb93 f3f5 	sdiv	r3, r3, r5
90006eb4:	2b00      	cmp	r3, #0
90006eb6:	bfb8      	it	lt
90006eb8:	3301      	addlt	r3, #1
90006eba:	105b      	asrs	r3, r3, #1
90006ebc:	425b      	negs	r3, r3
        setGraphRangeXScaled(-scaled2intX(margin), (usedCapacity - 1) + scaled2intX(margin));
90006ebe:	f9bc 211e 	ldrsh.w	r2, [ip, #286]	; 0x11e
90006ec2:	4259      	negs	r1, r3
90006ec4:	4660      	mov	r0, ip
90006ec6:	3a01      	subs	r2, #1
90006ec8:	441a      	add	r2, r3
90006eca:	4623      	mov	r3, r4
    }
90006ecc:	bc70      	pop	{r4, r5, r6}
        setGraphRangeXScaled(-scaled2intX(margin), (usedCapacity - 1) + scaled2intX(margin));
90006ece:	4718      	bx	r3
            return ((i * 2 + scale) / scale) / 2;
90006ed0:	eb05 0342 	add.w	r3, r5, r2, lsl #1
90006ed4:	fb93 f3f5 	sdiv	r3, r3, r5
90006ed8:	2b00      	cmp	r3, #0
90006eda:	bfb8      	it	lt
90006edc:	3301      	addlt	r3, #1
90006ede:	105b      	asrs	r3, r3, #1
90006ee0:	e7ed      	b.n	90006ebe <_ZN8touchgfx17AbstractDataGraph18setGraphRangeXAutoEbi+0x36>
        setGraphRangeXAutoScaled(showYaxis, int2scaledX(margin));
90006ee2:	4623      	mov	r3, r4
    }
90006ee4:	bc70      	pop	{r4, r5, r6}
        setGraphRangeXAutoScaled(showYaxis, int2scaledX(margin));
90006ee6:	4718      	bx	r3
90006ee8:	90006681 	.word	0x90006681

90006eec <_ZN8touchgfx17AbstractDataGraph18setGraphRangeXAutoEbf>:
    virtual void setGraphRangeXAuto(bool showYaxis, float margin)
90006eec:	b470      	push	{r4, r5, r6}
        return float2scaled(f, xScale);
90006eee:	6b05      	ldr	r5, [r0, #48]	; 0x30
        setGraphRangeXAutoScaled(showYaxis, float2scaledX(margin));
90006ef0:	6804      	ldr	r4, [r0, #0]
        const float fs = f * (float)scale;
90006ef2:	ee07 5a90 	vmov	s15, r5
        setGraphRangeXAutoScaled(showYaxis, float2scaledX(margin));
90006ef6:	f8d4 60b0 	ldr.w	r6, [r4, #176]	; 0xb0
        const float fs = f * (float)scale;
90006efa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
90006efe:	ee27 0a80 	vmul.f32	s0, s15, s0
        if (fs >= 0)
90006f02:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
90006f06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
90006f0a:	da35      	bge.n	90006f78 <_ZN8touchgfx17AbstractDataGraph18setGraphRangeXAutoEbf+0x8c>
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
90006f0c:	eefd 7ac0 	vcvt.s32.f32	s15, s0
90006f10:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
90006f14:	eef8 6ae7 	vcvt.f32.s32	s13, s15
90006f18:	ee17 3a90 	vmov	r3, s15
90006f1c:	3b01      	subs	r3, #1
90006f1e:	ee30 0a66 	vsub.f32	s0, s0, s13
90006f22:	ee30 0a07 	vadd.f32	s0, s0, s14
90006f26:	eebd 0ac0 	vcvt.s32.f32	s0, s0
90006f2a:	ee10 2a10 	vmov	r2, s0
90006f2e:	441a      	add	r2, r3
90006f30:	4b18      	ldr	r3, [pc, #96]	; (90006f94 <_ZN8touchgfx17AbstractDataGraph18setGraphRangeXAutoEbf+0xa8>)
90006f32:	429e      	cmp	r6, r3
90006f34:	d12b      	bne.n	90006f8e <_ZN8touchgfx17AbstractDataGraph18setGraphRangeXAutoEbf+0xa2>
        if (i >= 0)
90006f36:	2a00      	cmp	r2, #0
        setGraphRangeXScaled(-scaled2intX(margin), (usedCapacity - 1) + scaled2intX(margin));
90006f38:	f8d4 40a4 	ldr.w	r4, [r4, #164]	; 0xa4
        if (i >= 0)
90006f3c:	da13      	bge.n	90006f66 <_ZN8touchgfx17AbstractDataGraph18setGraphRangeXAutoEbf+0x7a>
        return -(((-i * 2 + scale - 1) / scale) / 2);
90006f3e:	ebc2 72c2 	rsb	r2, r2, r2, lsl #31
90006f42:	eb05 0342 	add.w	r3, r5, r2, lsl #1
90006f46:	3b01      	subs	r3, #1
90006f48:	fb93 f3f5 	sdiv	r3, r3, r5
90006f4c:	2b00      	cmp	r3, #0
90006f4e:	bfb8      	it	lt
90006f50:	3301      	addlt	r3, #1
90006f52:	105b      	asrs	r3, r3, #1
90006f54:	425b      	negs	r3, r3
        setGraphRangeXScaled(-scaled2intX(margin), (usedCapacity - 1) + scaled2intX(margin));
90006f56:	f9b0 211e 	ldrsh.w	r2, [r0, #286]	; 0x11e
90006f5a:	4259      	negs	r1, r3
90006f5c:	3a01      	subs	r2, #1
90006f5e:	441a      	add	r2, r3
90006f60:	4623      	mov	r3, r4
    }
90006f62:	bc70      	pop	{r4, r5, r6}
        setGraphRangeXScaled(-scaled2intX(margin), (usedCapacity - 1) + scaled2intX(margin));
90006f64:	4718      	bx	r3
            return ((i * 2 + scale) / scale) / 2;
90006f66:	eb05 0342 	add.w	r3, r5, r2, lsl #1
90006f6a:	fb93 f3f5 	sdiv	r3, r3, r5
90006f6e:	2b00      	cmp	r3, #0
90006f70:	bfb8      	it	lt
90006f72:	3301      	addlt	r3, #1
90006f74:	105b      	asrs	r3, r3, #1
90006f76:	e7ee      	b.n	90006f56 <_ZN8touchgfx17AbstractDataGraph18setGraphRangeXAutoEbf+0x6a>
            return (int)(fs + 0.5f);
90006f78:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
90006f7c:	4b05      	ldr	r3, [pc, #20]	; (90006f94 <_ZN8touchgfx17AbstractDataGraph18setGraphRangeXAutoEbf+0xa8>)
90006f7e:	429e      	cmp	r6, r3
90006f80:	ee30 0a27 	vadd.f32	s0, s0, s15
90006f84:	eefd 7ac0 	vcvt.s32.f32	s15, s0
90006f88:	ee17 2a90 	vmov	r2, s15
90006f8c:	d0d3      	beq.n	90006f36 <_ZN8touchgfx17AbstractDataGraph18setGraphRangeXAutoEbf+0x4a>
        setGraphRangeXAutoScaled(showYaxis, float2scaledX(margin));
90006f8e:	4633      	mov	r3, r6
    }
90006f90:	bc70      	pop	{r4, r5, r6}
        setGraphRangeXAutoScaled(showYaxis, float2scaledX(margin));
90006f92:	4718      	bx	r3
90006f94:	90006681 	.word	0x90006681

90006f98 <_ZN15Screen2ViewBaseC1Ev>:
Screen2ViewBase::Screen2ViewBase() :
90006f98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90006f9c:	ed2d 8b02 	vpush	{d8}
90006fa0:	b08b      	sub	sp, #44	; 0x2c
90006fa2:	4604      	mov	r4, r0
90006fa4:	f012 fcac 	bl	90019900 <_ZN8touchgfx6ScreenC1Ev>
        : Widget(), alpha(255), color(0)
90006fa8:	4a78      	ldr	r2, [pc, #480]	; (9000718c <_ZN15Screen2ViewBaseC1Ev+0x1f4>)
90006faa:	2600      	movs	r6, #0
90006fac:	f64f 78ff 	movw	r8, #65535	; 0xffff
          touchable(false),
90006fb0:	f44f 7980 	mov.w	r9, #256	; 0x100
90006fb4:	f04f 0bff 	mov.w	fp, #255	; 0xff
    flexButtonCallback(this, &Screen2ViewBase::flexButtonCallbackHandler)
90006fb8:	4975      	ldr	r1, [pc, #468]	; (90007190 <_ZN15Screen2ViewBaseC1Ev+0x1f8>)
90006fba:	f104 0a6c 	add.w	sl, r4, #108	; 0x6c
90006fbe:	6422      	str	r2, [r4, #64]	; 0x40
        : DynamicDataGraph(capacity, values), current(0)
90006fc0:	f504 75c6 	add.w	r5, r4, #396	; 0x18c
        : Widget(), bitmap(bmp), alpha(255)
90006fc4:	4a73      	ldr	r2, [pc, #460]	; (90007194 <_ZN15Screen2ViewBaseC1Ev+0x1fc>)
        Image::setBitmap(bmp);
90006fc6:	4650      	mov	r0, sl
90006fc8:	6021      	str	r1, [r4, #0]
90006fca:	a908      	add	r1, sp, #32
        : Widget(), bitmap(bmp), alpha(255)
90006fcc:	f8a4 8092 	strh.w	r8, [r4, #146]	; 0x92
90006fd0:	f884 8094 	strb.w	r8, [r4, #148]	; 0x94
90006fd4:	66e2      	str	r2, [r4, #108]	; 0x6c
90006fd6:	63e6      	str	r6, [r4, #60]	; 0x3c
        : x(0), y(0), width(0), height(0)
90006fd8:	6466      	str	r6, [r4, #68]	; 0x44
          cachedAbsX(0),
90006fda:	6626      	str	r6, [r4, #96]	; 0x60
          touchable(false),
90006fdc:	f8a4 9064 	strh.w	r9, [r4, #100]	; 0x64
        : color(col)
90006fe0:	66a6      	str	r6, [r4, #104]	; 0x68
        : x(0), y(0), width(0), height(0)
90006fe2:	6726      	str	r6, [r4, #112]	; 0x70
90006fe4:	f884 b066 	strb.w	fp, [r4, #102]	; 0x66
          cachedAbsX(0),
90006fe8:	f8c4 608c 	str.w	r6, [r4, #140]	; 0x8c
          touchable(false),
90006fec:	f8a4 9090 	strh.w	r9, [r4, #144]	; 0x90
        : typedTextId(id)
90006ff0:	4f69      	ldr	r7, [pc, #420]	; (90007198 <_ZN15Screen2ViewBaseC1Ev+0x200>)
90006ff2:	f8ad 8020 	strh.w	r8, [sp, #32]
90006ff6:	e9c4 6612 	strd	r6, r6, [r4, #72]	; 0x48
          parent(0),
90006ffa:	e9c4 6614 	strd	r6, r6, [r4, #80]	; 0x50
          nextDrawChainElement(0),
90006ffe:	e9c4 6616 	strd	r6, r6, [r4, #88]	; 0x58
90007002:	e9c4 661d 	strd	r6, r6, [r4, #116]	; 0x74
          parent(0),
90007006:	e9c4 661f 	strd	r6, r6, [r4, #124]	; 0x7c
          nextDrawChainElement(0),
9000700a:	e9c4 6621 	strd	r6, r6, [r4, #132]	; 0x84
        Image::setBitmap(bmp);
9000700e:	f00e fcfa 	bl	90015a06 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
90007012:	f04f 32ff 	mov.w	r2, #4294967295
        : TextAreaWithWildcardBase(), wc1(0)
90007016:	4961      	ldr	r1, [pc, #388]	; (9000719c <_ZN15Screen2ViewBaseC1Ev+0x204>)
          updateTicksInterval(updateInterval),
90007018:	2301      	movs	r3, #1
          running(false)
9000701a:	4861      	ldr	r0, [pc, #388]	; (900071a0 <_ZN15Screen2ViewBaseC1Ev+0x208>)
          startId(BITMAP_INVALID),
9000701c:	f8c4 209c 	str.w	r2, [r4, #156]	; 0x9c
90007020:	f8a4 20d4 	strh.w	r2, [r4, #212]	; 0xd4
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
90007024:	f8c4 20e8 	str.w	r2, [r4, #232]	; 0xe8
          updateTicksInterval(updateInterval),
90007028:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
9000702c:	f8c4 10a8 	str.w	r1, [r4, #168]	; 0xa8
          running(false)
90007030:	66e0      	str	r0, [r4, #108]	; 0x6c
        : AbstractDataGraph(capacity), xAxisFactor(1), xAxisOffset(0), yValues(values), dataCounter(0)
90007032:	4628      	mov	r0, r5
        : animationDoneAction(0),
90007034:	f8c4 6098 	str.w	r6, [r4, #152]	; 0x98
          running(false)
90007038:	f884 60a4 	strb.w	r6, [r4, #164]	; 0xa4
          touchable(false),
9000703c:	f8a4 90cc 	strh.w	r9, [r4, #204]	; 0xcc
90007040:	f8c4 70d0 	str.w	r7, [r4, #208]	; 0xd0
        : color(col)
90007044:	f8c4 60d8 	str.w	r6, [r4, #216]	; 0xd8
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE), boundingArea()
90007048:	f8a4 60dc 	strh.w	r6, [r4, #220]	; 0xdc
9000704c:	f8c4 b0de 	str.w	fp, [r4, #222]	; 0xde
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
90007050:	f8c4 60e4 	str.w	r6, [r4, #228]	; 0xe4
        : x(0), y(0), width(0), height(0)
90007054:	e9c4 662b 	strd	r6, r6, [r4, #172]	; 0xac
90007058:	e9c4 662d 	strd	r6, r6, [r4, #180]	; 0xb4
          nextSibling(0),
9000705c:	e9c4 662f 	strd	r6, r6, [r4, #188]	; 0xbc
          cachedAbsX(0),
90007060:	e9c4 6631 	strd	r6, r6, [r4, #196]	; 0xc4
90007064:	e9c4 663b 	strd	r6, r6, [r4, #236]	; 0xec
90007068:	e9c4 663e 	strd	r6, r6, [r4, #248]	; 0xf8
9000706c:	e9c4 6640 	strd	r6, r6, [r4, #256]	; 0x100
          nextSibling(0),
90007070:	e9c4 6642 	strd	r6, r6, [r4, #264]	; 0x108
          cachedAbsX(0),
90007074:	e9c4 6644 	strd	r6, r6, [r4, #272]	; 0x110
          touchable(false),
90007078:	f8a4 9118 	strh.w	r9, [r4, #280]	; 0x118
9000707c:	f8a4 8120 	strh.w	r8, [r4, #288]	; 0x120
90007080:	f8a4 816c 	strh.w	r8, [r4, #364]	; 0x16c
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
90007084:	f8c4 2180 	str.w	r2, [r4, #384]	; 0x180
90007088:	f8c4 10f4 	str.w	r1, [r4, #244]	; 0xf4
9000708c:	f8a4 9164 	strh.w	r9, [r4, #356]	; 0x164
90007090:	f8c4 711c 	str.w	r7, [r4, #284]	; 0x11c
        : color(col)
90007094:	f8c4 6124 	str.w	r6, [r4, #292]	; 0x124
90007098:	f8a4 6128 	strh.w	r6, [r4, #296]	; 0x128
9000709c:	f8c4 b12a 	str.w	fp, [r4, #298]	; 0x12a
900070a0:	f8c4 b176 	str.w	fp, [r4, #374]	; 0x176
              text(0)
900070a4:	f8c4 6138 	str.w	r6, [r4, #312]	; 0x138
900070a8:	f8c4 7168 	str.w	r7, [r4, #360]	; 0x168
900070ac:	f8c4 6170 	str.w	r6, [r4, #368]	; 0x170
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE), boundingArea()
900070b0:	f8a4 6174 	strh.w	r6, [r4, #372]	; 0x174
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
900070b4:	f8c4 617c 	str.w	r6, [r4, #380]	; 0x17c
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
900070b8:	f8df 8104 	ldr.w	r8, [pc, #260]	; 900071c0 <_ZN15Screen2ViewBaseC1Ev+0x228>
900070bc:	e9c4 624c 	strd	r6, r2, [r4, #304]	; 0x130
900070c0:	e9c4 614f 	strd	r6, r1, [r4, #316]	; 0x13c
        : x(0), y(0), width(0), height(0)
900070c4:	e9c4 6651 	strd	r6, r6, [r4, #324]	; 0x144
900070c8:	2118      	movs	r1, #24
900070ca:	e9c4 6653 	strd	r6, r6, [r4, #332]	; 0x14c
          nextSibling(0),
900070ce:	e9c4 6655 	strd	r6, r6, [r4, #340]	; 0x154
          cachedAbsX(0),
900070d2:	e9c4 6657 	strd	r6, r6, [r4, #348]	; 0x15c
900070d6:	e9c4 6661 	strd	r6, r6, [r4, #388]	; 0x184
900070da:	f00d faf9 	bl	900146d0 <_ZN8touchgfx17AbstractDataGraphC1Es>
        return i * scale;
900070de:	f8d4 21bc 	ldr.w	r2, [r4, #444]	; 0x1bc
        : AbstractDataGraph(capacity), xAxisFactor(1), xAxisOffset(0), yValues(values), dataCounter(0)
900070e2:	4930      	ldr	r1, [pc, #192]	; (900071a4 <_ZN15Screen2ViewBaseC1Ev+0x20c>)
900070e4:	2301      	movs	r3, #1
        setGraphRangeXScaled(int2scaledX(min), int2scaledX(max));
900070e6:	4628      	mov	r0, r5
        : AbstractDataGraph(capacity), xAxisFactor(1), xAxisOffset(0), yValues(values), dataCounter(0)
900070e8:	f8c4 62d4 	str.w	r6, [r4, #724]	; 0x2d4
900070ec:	f8c4 118c 	str.w	r1, [r4, #396]	; 0x18c
        return i * scale;
900070f0:	eb02 0142 	add.w	r1, r2, r2, lsl #1
        setGraphRangeXScaled(int2scaledX(min), int2scaledX(max));
900070f4:	ebc2 02c1 	rsb	r2, r2, r1, lsl #3
{
public:
    GraphWrapAndOverwrite()
        : GraphWrapAndOverwriteData(CAPACITY, y)
900070f8:	f504 7137 	add.w	r1, r4, #732	; 0x2dc
        : AbstractDataGraph(capacity), xAxisFactor(1), xAxisOffset(0), yValues(values), dataCounter(0)
900070fc:	e9c4 36b2 	strd	r3, r6, [r4, #712]	; 0x2c8
90007100:	f8c4 12d0 	str.w	r1, [r4, #720]	; 0x2d0
        setGraphRangeXScaled(int2scaledX(min), int2scaledX(max));
90007104:	4631      	mov	r1, r6
90007106:	f00c ff9e 	bl	90014046 <_ZN8touchgfx17AbstractDataGraph20setGraphRangeXScaledEii>
9000710a:	4a27      	ldr	r2, [pc, #156]	; (900071a8 <_ZN15Screen2ViewBaseC1Ev+0x210>)
     * Initializes a new instance of the PainterRGB565 class.
     *
     * @param  color (Optional) the color, default is black.
     */
    PainterRGB565(colortype color = 0)
        : AbstractPainterRGB565(), AbstractPainterColor(color)
9000710c:	f504 735b 	add.w	r3, r4, #876	; 0x36c
class AbstractGraphElement : public CanvasWidget
{
public:
    /** Default constructor. */
    AbstractGraphElement()
        : CanvasWidget()
90007110:	f504 704f 	add.w	r0, r4, #828	; 0x33c
90007114:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
        : DynamicDataGraph(capacity, values), current(0)
90007118:	f8a4 62d8 	strh.w	r6, [r4, #728]	; 0x2d8
9000711c:	ee08 0a10 	vmov	s16, r0
90007120:	9303      	str	r3, [sp, #12]
90007122:	f00c ff43 	bl	90013fac <_ZN8touchgfx12CanvasWidgetC1Ev>
 */
class GraphElementLine : public AbstractGraphElement
{
public:
    GraphElementLine()
        : lineWidth(2)
90007126:	2302      	movs	r3, #2
90007128:	4a20      	ldr	r2, [pc, #128]	; (900071ac <_ZN15Screen2ViewBaseC1Ev+0x214>)
        : widgetWidth(0)
9000712a:	f8a4 6370 	strh.w	r6, [r4, #880]	; 0x370
9000712e:	f884 3368 	strb.w	r3, [r4, #872]	; 0x368
90007132:	f8c4 233c 	str.w	r2, [r4, #828]	; 0x33c
90007136:	f8d8 3000 	ldr.w	r3, [r8]
    static const uint16_t RMASK = 0xF800; ///< Mask for red   (1111100000000000)
    static const uint16_t GMASK = 0x07E0; ///< Mask for green (0000011111100000)
    static const uint16_t BMASK = 0x001F; ///< Mask for blue  (0000000000011111)

    AbstractPainterRGB565()
        : AbstractPainter()
9000713a:	4a1d      	ldr	r2, [pc, #116]	; (900071b0 <_ZN15Screen2ViewBaseC1Ev+0x218>)
9000713c:	f8c4 236c 	str.w	r2, [r4, #876]	; 0x36c
90007140:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
90007144:	2a00      	cmp	r2, #0
90007146:	d03f      	beq.n	900071c8 <_ZN15Screen2ViewBaseC1Ev+0x230>
90007148:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
9000714a:	2800      	cmp	r0, #0
9000714c:	f000 85c3 	beq.w	90007cd6 <_ZN15Screen2ViewBaseC1Ev+0xd3e>
     *
     * @return True if the format matches the framebuffer format, false otherwise.
     */
    FORCE_INLINE_FUNCTION static bool compatibleFramebuffer(Bitmap::BitmapFormat format)
    {
        bool compat = HAL::lcd().framebufferFormat() == format;
90007150:	6803      	ldr	r3, [r0, #0]
90007152:	f8df 9070 	ldr.w	r9, [pc, #112]	; 900071c4 <_ZN15Screen2ViewBaseC1Ev+0x22c>
90007156:	6ada      	ldr	r2, [r3, #44]	; 0x2c
90007158:	454a      	cmp	r2, r9
9000715a:	d043      	beq.n	900071e4 <_ZN15Screen2ViewBaseC1Ev+0x24c>
9000715c:	4790      	blx	r2
        return auxiliaryLCD;
9000715e:	f8d8 3000 	ldr.w	r3, [r8]
90007162:	fab0 f680 	clz	r6, r0
90007166:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
90007168:	0976      	lsrs	r6, r6, #5
        if (HAL::getInstance()->getAuxiliaryLCD())
9000716a:	b140      	cbz	r0, 9000717e <_ZN15Screen2ViewBaseC1Ev+0x1e6>
        {
            compat |= HAL::getInstance()->getAuxiliaryLCD()->framebufferFormat() == format;
9000716c:	6803      	ldr	r3, [r0, #0]
9000716e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90007170:	454b      	cmp	r3, r9
90007172:	d037      	beq.n	900071e4 <_ZN15Screen2ViewBaseC1Ev+0x24c>
90007174:	4798      	blx	r3
90007176:	2800      	cmp	r0, #0
90007178:	bf08      	it	eq
9000717a:	f046 0601 	orreq.w	r6, r6, #1
    {
        assert(compatibleFramebuffer(Bitmap::RGB565) && "The chosen painter only works with RGB565 displays");
9000717e:	bb8e      	cbnz	r6, 900071e4 <_ZN15Screen2ViewBaseC1Ev+0x24c>
90007180:	4b0c      	ldr	r3, [pc, #48]	; (900071b4 <_ZN15Screen2ViewBaseC1Ev+0x21c>)
90007182:	212c      	movs	r1, #44	; 0x2c
90007184:	4a0c      	ldr	r2, [pc, #48]	; (900071b8 <_ZN15Screen2ViewBaseC1Ev+0x220>)
90007186:	480d      	ldr	r0, [pc, #52]	; (900071bc <_ZN15Screen2ViewBaseC1Ev+0x224>)
90007188:	f020 fa64 	bl	90027654 <__assert_func>
9000718c:	9002c298 	.word	0x9002c298
90007190:	9002b31c 	.word	0x9002b31c
90007194:	9002c300 	.word	0x9002c300
90007198:	9002a5f8 	.word	0x9002a5f8
9000719c:	9002add0 	.word	0x9002add0
900071a0:	9002c18c 	.word	0x9002c18c
900071a4:	9002bdd8 	.word	0x9002bdd8
900071a8:	9002b16c 	.word	0x9002b16c
900071ac:	9002c0a0 	.word	0x9002c0a0
900071b0:	9002a09c 	.word	0x9002a09c
900071b4:	9002b064 	.word	0x9002b064
900071b8:	9002b0c4 	.word	0x9002b0c4
900071bc:	9002b100 	.word	0x9002b100
900071c0:	240281ec 	.word	0x240281ec
900071c4:	900023f5 	.word	0x900023f5
        return instance->lcdRef;
900071c8:	6898      	ldr	r0, [r3, #8]
900071ca:	f8df 93d4 	ldr.w	r9, [pc, #980]	; 900075a0 <_ZN15Screen2ViewBaseC1Ev+0x608>
        bool compat = HAL::lcd().framebufferFormat() == format;
900071ce:	6802      	ldr	r2, [r0, #0]
900071d0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
900071d2:	454a      	cmp	r2, r9
900071d4:	d1c2      	bne.n	9000715c <_ZN15Screen2ViewBaseC1Ev+0x1c4>
        return auxiliaryLCD;
900071d6:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
        if (HAL::getInstance()->getAuxiliaryLCD())
900071d8:	b120      	cbz	r0, 900071e4 <_ZN15Screen2ViewBaseC1Ev+0x24c>
        bool compat = HAL::lcd().framebufferFormat() == format;
900071da:	6803      	ldr	r3, [r0, #0]
900071dc:	2601      	movs	r6, #1
900071de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            compat |= HAL::getInstance()->getAuxiliaryLCD()->framebufferFormat() == format;
900071e0:	454b      	cmp	r3, r9
900071e2:	d1c7      	bne.n	90007174 <_ZN15Screen2ViewBaseC1Ev+0x1dc>
900071e4:	4bdc      	ldr	r3, [pc, #880]	; (90007558 <_ZN15Screen2ViewBaseC1Ev+0x5c0>)
     *
     * @param  color The color.
     */
    virtual void setColor(colortype color)
    {
        painterColor = color;
900071e6:	2600      	movs	r6, #0
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
900071e8:	f04f 3bff 	mov.w	fp, #4294967295
        T::add(text);
900071ec:	f504 796d 	add.w	r9, r4, #948	; 0x3b4
900071f0:	f8c4 336c 	str.w	r3, [r4, #876]	; 0x36c
900071f4:	3324      	adds	r3, #36	; 0x24
900071f6:	f504 7060 	add.w	r0, r4, #896	; 0x380
900071fa:	4649      	mov	r1, r9
900071fc:	f8c4 3374 	str.w	r3, [r4, #884]	; 0x374
        : pressed(false), alpha(255), action(0)
90007200:	f44f 437f 	mov.w	r3, #65280	; 0xff00
90007204:	f8c4 73dc 	str.w	r7, [r4, #988]	; 0x3dc
90007208:	ee08 0a90 	vmov	s17, r0
9000720c:	f8a4 33ac 	strh.w	r3, [r4, #940]	; 0x3ac
        touchable = touch;
90007210:	f240 1301 	movw	r3, #257	; 0x101
90007214:	f8c4 6378 	str.w	r6, [r4, #888]	; 0x378
90007218:	f104 0804 	add.w	r8, r4, #4
9000721c:	f8a4 33a4 	strh.w	r3, [r4, #932]	; 0x3a4
        : T()
90007220:	4bce      	ldr	r3, [pc, #824]	; (9000755c <_ZN15Screen2ViewBaseC1Ev+0x5c4>)
90007222:	f8c4 63a8 	str.w	r6, [r4, #936]	; 0x3a8
90007226:	f8c4 3380 	str.w	r3, [r4, #896]	; 0x380
          touchable(false),
9000722a:	f44f 7380 	mov.w	r3, #256	; 0x100
9000722e:	f8c4 63b0 	str.w	r6, [r4, #944]	; 0x3b0
90007232:	f8a4 33d8 	strh.w	r3, [r4, #984]	; 0x3d8
90007236:	4bca      	ldr	r3, [pc, #808]	; (90007560 <_ZN15Screen2ViewBaseC1Ev+0x5c8>)
        : color(col)
90007238:	f8c4 63e4 	str.w	r6, [r4, #996]	; 0x3e4
9000723c:	f8c4 33b4 	str.w	r3, [r4, #948]	; 0x3b4
90007240:	f64f 73ff 	movw	r3, #65535	; 0xffff
90007244:	f8a4 63e8 	strh.w	r6, [r4, #1000]	; 0x3e8
90007248:	f8a4 33e0 	strh.w	r3, [r4, #992]	; 0x3e0
9000724c:	23ff      	movs	r3, #255	; 0xff
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
9000724e:	f8c4 63f0 	str.w	r6, [r4, #1008]	; 0x3f0
90007252:	f8c4 33ea 	str.w	r3, [r4, #1002]	; 0x3ea
        : x(0), y(0), width(0), height(0)
90007256:	e9c4 66e1 	strd	r6, r6, [r4, #900]	; 0x384
9000725a:	e9c4 66e3 	strd	r6, r6, [r4, #908]	; 0x38c
          nextSibling(0),
9000725e:	e9c4 66e5 	strd	r6, r6, [r4, #916]	; 0x394
          cachedAbsX(0),
90007262:	e9c4 66e7 	strd	r6, r6, [r4, #924]	; 0x39c
90007266:	e9c4 66ee 	strd	r6, r6, [r4, #952]	; 0x3b8
9000726a:	e9c4 66f0 	strd	r6, r6, [r4, #960]	; 0x3c0
          nextSibling(0),
9000726e:	e9c4 66f2 	strd	r6, r6, [r4, #968]	; 0x3c8
          cachedAbsX(0),
90007272:	e9c4 66f4 	strd	r6, r6, [r4, #976]	; 0x3d0
              text(0)
90007276:	e9c4 b6fd 	strd	fp, r6, [r4, #1012]	; 0x3f4
        : color(0)
9000727a:	f8c4 63fc 	str.w	r6, [r4, #1020]	; 0x3fc
9000727e:	f8c4 6400 	str.w	r6, [r4, #1024]	; 0x400
        T::add(text);
90007282:	f00b fc13 	bl	90012aac <_ZN8touchgfx9Container3addERNS_8DrawableE>
        : pobject(pObject), pmemfun(pmemfun_1)
90007286:	f504 5300 	add.w	r3, r4, #8192	; 0x2000
9000728a:	4ab6      	ldr	r2, [pc, #728]	; (90007564 <_ZN15Screen2ViewBaseC1Ev+0x5cc>)
    touchgfx::CanvasWidgetRenderer::setupBuffer(canvasBuffer, CANVAS_BUFFER_SIZE);
9000728c:	f44f 51e1 	mov.w	r1, #7200	; 0x1c20
90007290:	f204 401c 	addw	r0, r4, #1052	; 0x41c
90007294:	641c      	str	r4, [r3, #64]	; 0x40
90007296:	63da      	str	r2, [r3, #60]	; 0x3c
90007298:	4ab3      	ldr	r2, [pc, #716]	; (90007568 <_ZN15Screen2ViewBaseC1Ev+0x5d0>)
9000729a:	649e      	str	r6, [r3, #72]	; 0x48
9000729c:	645a      	str	r2, [r3, #68]	; 0x44
9000729e:	f00f faa3 	bl	900167e8 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj>
        rect.x = x;
900072a2:	4bb2      	ldr	r3, [pc, #712]	; (9000756c <_ZN15Screen2ViewBaseC1Ev+0x5d4>)
900072a4:	f104 0140 	add.w	r1, r4, #64	; 0x40
900072a8:	4640      	mov	r0, r8
900072aa:	64a3      	str	r3, [r4, #72]	; 0x48
        color = newColor;
900072ac:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
900072b0:	6466      	str	r6, [r4, #68]	; 0x44
900072b2:	66a3      	str	r3, [r4, #104]	; 0x68
900072b4:	f00b fbfa 	bl	90012aac <_ZN8touchgfx9Container3addERNS_8DrawableE>
900072b8:	4bad      	ldr	r3, [pc, #692]	; (90007570 <_ZN15Screen2ViewBaseC1Ev+0x5d8>)
    animatedImage1.setBitmaps(BITMAP_FRAME_00_DELAY_0_05S_ID, BITMAP_FRAME_07_DELAY_0_05S_ID);
900072ba:	2207      	movs	r2, #7
900072bc:	4650      	mov	r0, sl
900072be:	6723      	str	r3, [r4, #112]	; 0x70
900072c0:	4631      	mov	r1, r6
900072c2:	f00d ff35 	bl	90015130 <_ZN8touchgfx13AnimatedImage10setBitmapsEtt>
    animatedImage1.setUpdateTicksInterval(6);
900072c6:	4650      	mov	r0, sl
900072c8:	2106      	movs	r1, #6
900072ca:	f00d ff44 	bl	90015156 <_ZN8touchgfx13AnimatedImage22setUpdateTicksIntervalEh>
    animatedImage1.startAnimation(false, true, true);
900072ce:	2301      	movs	r3, #1
900072d0:	4650      	mov	r0, sl
900072d2:	4631      	mov	r1, r6
900072d4:	461a      	mov	r2, r3
900072d6:	f00d fe83 	bl	90014fe0 <_ZN8touchgfx13AnimatedImage14startAnimationEbbb>
900072da:	4651      	mov	r1, sl
900072dc:	4640      	mov	r0, r8
    minTemperatureTextArea.setXY(16, 128);
900072de:	f104 0aa8 	add.w	sl, r4, #168	; 0xa8
900072e2:	f00b fbe3 	bl	90012aac <_ZN8touchgfx9Container3addERNS_8DrawableE>
900072e6:	4aa3      	ldr	r2, [pc, #652]	; (90007574 <_ZN15Screen2ViewBaseC1Ev+0x5dc>)
        setX(x);
900072e8:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
        color = newColor;
900072ec:	f8c4 b0d8 	str.w	fp, [r4, #216]	; 0xd8
        boundingArea = calculateBoundingArea();
900072f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
        rect.x = x;
900072f4:	f8c4 20ac 	str.w	r2, [r4, #172]	; 0xac
900072f8:	4a9f      	ldr	r2, [pc, #636]	; (90007578 <_ZN15Screen2ViewBaseC1Ev+0x5e0>)
        linespace = space;
900072fa:	f8a4 60dc 	strh.w	r6, [r4, #220]	; 0xdc
900072fe:	4293      	cmp	r3, r2
90007300:	f040 85e8 	bne.w	90007ed4 <_ZN15Screen2ViewBaseC1Ev+0xf3c>
        boundingArea = calculateBoundingArea();
90007304:	f8c4 60ec 	str.w	r6, [r4, #236]	; 0xec
90007308:	e9c4 6b39 	strd	r6, fp, [r4, #228]	; 0xe4
    Unicode::snprintf(minTemperatureTextAreaBuffer, MINTEMPERATURETEXTAREA_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_4SII).getText());
9000730c:	f204 4304 	addw	r3, r4, #1028	; 0x404
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
90007310:	f8df b290 	ldr.w	fp, [pc, #656]	; 900075a4 <_ZN15Screen2ViewBaseC1Ev+0x60c>
90007314:	9302      	str	r3, [sp, #8]
90007316:	f8db 3000 	ldr.w	r3, [fp]
9000731a:	2b00      	cmp	r3, #0
9000731c:	f000 8606 	beq.w	90007f2c <_ZN15Screen2ViewBaseC1Ev+0xf94>
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
90007320:	4b96      	ldr	r3, [pc, #600]	; (9000757c <_ZN15Screen2ViewBaseC1Ev+0x5e4>)
90007322:	881b      	ldrh	r3, [r3, #0]
90007324:	2b02      	cmp	r3, #2
90007326:	f240 85fb 	bls.w	90007f20 <_ZN15Screen2ViewBaseC1Ev+0xf88>
        return texts->getText(typedTextId);
9000732a:	4b95      	ldr	r3, [pc, #596]	; (90007580 <_ZN15Screen2ViewBaseC1Ev+0x5e8>)
9000732c:	2102      	movs	r1, #2
    temperatureTextArea.setXY(16, 61);
9000732e:	f104 06f4 	add.w	r6, r4, #244	; 0xf4
90007332:	6818      	ldr	r0, [r3, #0]
90007334:	f000 ff8e 	bl	90008254 <_ZNK8touchgfx5Texts7getTextEt>
    Unicode::snprintf(minTemperatureTextAreaBuffer, MINTEMPERATURETEXTAREA_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_4SII).getText());
90007338:	4a92      	ldr	r2, [pc, #584]	; (90007584 <_ZN15Screen2ViewBaseC1Ev+0x5ec>)
9000733a:	4603      	mov	r3, r0
9000733c:	2104      	movs	r1, #4
9000733e:	9802      	ldr	r0, [sp, #8]
90007340:	f013 ff9c 	bl	9001b27c <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
        wc1 = value;
90007344:	9b02      	ldr	r3, [sp, #8]
    minTemperatureTextArea.resizeToCurrentText();
90007346:	4650      	mov	r0, sl
90007348:	f8c4 30f0 	str.w	r3, [r4, #240]	; 0xf0
9000734c:	f00e fa74 	bl	90015838 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
        : typedTextId(id)
90007350:	2303      	movs	r3, #3
    minTemperatureTextArea.setTypedText(touchgfx::TypedText(T___SINGLEUSE_JNB3));
90007352:	a908      	add	r1, sp, #32
90007354:	4650      	mov	r0, sl
90007356:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
9000735a:	9708      	str	r7, [sp, #32]
9000735c:	f00e fa8c 	bl	90015878 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
90007360:	4651      	mov	r1, sl
90007362:	4640      	mov	r0, r8
90007364:	f00b fba2 	bl	90012aac <_ZN8touchgfx9Container3addERNS_8DrawableE>
        setX(x);
90007368:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
        setY(y);
9000736c:	4882      	ldr	r0, [pc, #520]	; (90007578 <_ZN15Screen2ViewBaseC1Ev+0x5e0>)
        color = newColor;
9000736e:	f04f 31ff 	mov.w	r1, #4294967295
        boundingArea = calculateBoundingArea();
90007372:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
        rect.x = x;
90007376:	4b84      	ldr	r3, [pc, #528]	; (90007588 <_ZN15Screen2ViewBaseC1Ev+0x5f0>)
90007378:	4282      	cmp	r2, r0
        color = newColor;
9000737a:	f8c4 1124 	str.w	r1, [r4, #292]	; 0x124
9000737e:	f8c4 30f8 	str.w	r3, [r4, #248]	; 0xf8
        linespace = space;
90007382:	f04f 0300 	mov.w	r3, #0
90007386:	f8a4 3128 	strh.w	r3, [r4, #296]	; 0x128
        boundingArea = calculateBoundingArea();
9000738a:	f040 85af 	bne.w	90007eec <_ZN15Screen2ViewBaseC1Ev+0xf54>
9000738e:	f8c4 3138 	str.w	r3, [r4, #312]	; 0x138
90007392:	e9c4 314c 	strd	r3, r1, [r4, #304]	; 0x130
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
90007396:	f8db 3000 	ldr.w	r3, [fp]
    Unicode::snprintf(temperatureTextAreaBuffer, TEMPERATURETEXTAREA_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_DG5G).getText());
9000739a:	f204 4a0c 	addw	sl, r4, #1036	; 0x40c
9000739e:	2b00      	cmp	r3, #0
900073a0:	f000 85c4 	beq.w	90007f2c <_ZN15Screen2ViewBaseC1Ev+0xf94>
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
900073a4:	4b75      	ldr	r3, [pc, #468]	; (9000757c <_ZN15Screen2ViewBaseC1Ev+0x5e4>)
900073a6:	881b      	ldrh	r3, [r3, #0]
900073a8:	2b06      	cmp	r3, #6
900073aa:	f240 85b9 	bls.w	90007f20 <_ZN15Screen2ViewBaseC1Ev+0xf88>
        return texts->getText(typedTextId);
900073ae:	4b74      	ldr	r3, [pc, #464]	; (90007580 <_ZN15Screen2ViewBaseC1Ev+0x5e8>)
900073b0:	2106      	movs	r1, #6
900073b2:	6818      	ldr	r0, [r3, #0]
900073b4:	f000 ff4e 	bl	90008254 <_ZNK8touchgfx5Texts7getTextEt>
900073b8:	4a72      	ldr	r2, [pc, #456]	; (90007584 <_ZN15Screen2ViewBaseC1Ev+0x5ec>)
900073ba:	4603      	mov	r3, r0
900073bc:	2104      	movs	r1, #4
900073be:	4650      	mov	r0, sl
900073c0:	f013 ff5c 	bl	9001b27c <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    temperatureTextArea.resizeToCurrentText();
900073c4:	4630      	mov	r0, r6
900073c6:	f8c4 a13c 	str.w	sl, [r4, #316]	; 0x13c
900073ca:	f00e fa35 	bl	90015838 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
        : typedTextId(id)
900073ce:	2307      	movs	r3, #7
    temperatureTextArea.setTypedText(touchgfx::TypedText(T___SINGLEUSE_DSQV));
900073d0:	4630      	mov	r0, r6
900073d2:	a908      	add	r1, sp, #32
900073d4:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
900073d8:	9708      	str	r7, [sp, #32]
900073da:	f00e fa4d 	bl	90015878 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
900073de:	4631      	mov	r1, r6
900073e0:	4640      	mov	r0, r8
900073e2:	f00b fb63 	bl	90012aac <_ZN8touchgfx9Container3addERNS_8DrawableE>
        setX(x);
900073e6:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
900073ea:	4863      	ldr	r0, [pc, #396]	; (90007578 <_ZN15Screen2ViewBaseC1Ev+0x5e0>)
        color = newColor;
900073ec:	f04f 31ff 	mov.w	r1, #4294967295
        boundingArea = calculateBoundingArea();
900073f0:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
    maxTemperatureTextArea.setXY(16, 93);
900073f4:	f504 76a0 	add.w	r6, r4, #320	; 0x140
        rect.x = x;
900073f8:	4b64      	ldr	r3, [pc, #400]	; (9000758c <_ZN15Screen2ViewBaseC1Ev+0x5f4>)
900073fa:	4282      	cmp	r2, r0
        color = newColor;
900073fc:	f8c4 1170 	str.w	r1, [r4, #368]	; 0x170
90007400:	f8c4 3144 	str.w	r3, [r4, #324]	; 0x144
        linespace = space;
90007404:	f04f 0300 	mov.w	r3, #0
90007408:	f8a4 3174 	strh.w	r3, [r4, #372]	; 0x174
9000740c:	f040 857b 	bne.w	90007f06 <_ZN15Screen2ViewBaseC1Ev+0xf6e>
        boundingArea = calculateBoundingArea();
90007410:	f8c4 3184 	str.w	r3, [r4, #388]	; 0x184
90007414:	e9c4 315f 	strd	r3, r1, [r4, #380]	; 0x17c
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
90007418:	f8db 3000 	ldr.w	r3, [fp]
    Unicode::snprintf(maxTemperatureTextAreaBuffer, MAXTEMPERATURETEXTAREA_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_HQVR).getText());
9000741c:	f204 4a14 	addw	sl, r4, #1044	; 0x414
90007420:	2b00      	cmp	r3, #0
90007422:	f000 8583 	beq.w	90007f2c <_ZN15Screen2ViewBaseC1Ev+0xf94>
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
90007426:	4b55      	ldr	r3, [pc, #340]	; (9000757c <_ZN15Screen2ViewBaseC1Ev+0x5e4>)
90007428:	881b      	ldrh	r3, [r3, #0]
9000742a:	2b04      	cmp	r3, #4
9000742c:	f240 8578 	bls.w	90007f20 <_ZN15Screen2ViewBaseC1Ev+0xf88>
        return texts->getText(typedTextId);
90007430:	4b53      	ldr	r3, [pc, #332]	; (90007580 <_ZN15Screen2ViewBaseC1Ev+0x5e8>)
90007432:	2104      	movs	r1, #4
90007434:	6818      	ldr	r0, [r3, #0]
90007436:	f000 ff0d 	bl	90008254 <_ZNK8touchgfx5Texts7getTextEt>
9000743a:	4a52      	ldr	r2, [pc, #328]	; (90007584 <_ZN15Screen2ViewBaseC1Ev+0x5ec>)
9000743c:	4603      	mov	r3, r0
9000743e:	2104      	movs	r1, #4
90007440:	4650      	mov	r0, sl
90007442:	f013 ff1b 	bl	9001b27c <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    maxTemperatureTextArea.resizeToCurrentText();
90007446:	4630      	mov	r0, r6
90007448:	f8c4 a188 	str.w	sl, [r4, #392]	; 0x188
        : typedTextId(id)
9000744c:	f04f 0a05 	mov.w	sl, #5
90007450:	f00e f9f2 	bl	90015838 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
    maxTemperatureTextArea.setTypedText(touchgfx::TypedText(T___SINGLEUSE_XZKY));
90007454:	a908      	add	r1, sp, #32
90007456:	4630      	mov	r0, r6
90007458:	9708      	str	r7, [sp, #32]
9000745a:	f8ad a024 	strh.w	sl, [sp, #36]	; 0x24
9000745e:	f00e fa0b 	bl	90015878 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
90007462:	4631      	mov	r1, r6
90007464:	4640      	mov	r0, r8
90007466:	f00b fb21 	bl	90012aac <_ZN8touchgfx9Container3addERNS_8DrawableE>
9000746a:	4a49      	ldr	r2, [pc, #292]	; (90007590 <_ZN15Screen2ViewBaseC1Ev+0x5f8>)
        setX(x);
9000746c:	f8d4 318c 	ldr.w	r3, [r4, #396]	; 0x18c
        setWidth(width);
90007470:	f240 11c7 	movw	r1, #455	; 0x1c7
90007474:	4628      	mov	r0, r5
90007476:	6b9b      	ldr	r3, [r3, #56]	; 0x38
        rect.x = x;
90007478:	f8c4 2190 	str.w	r2, [r4, #400]	; 0x190
        setWidth(width);
9000747c:	4798      	blx	r3
        setHeight(height);
9000747e:	f8d4 318c 	ldr.w	r3, [r4, #396]	; 0x18c
90007482:	2161      	movs	r1, #97	; 0x61
90007484:	4628      	mov	r0, r5
90007486:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
90007488:	4798      	blx	r3
        setScaleX(scale, updateData);
9000748a:	2200      	movs	r2, #0
9000748c:	2101      	movs	r1, #1
9000748e:	4628      	mov	r0, r5
90007490:	f00d f98a 	bl	900147a8 <_ZN8touchgfx16DynamicDataGraph9setScaleXEib>
        setScaleY(scale, updateData);
90007494:	2200      	movs	r2, #0
90007496:	2101      	movs	r1, #1
90007498:	4628      	mov	r0, r5
9000749a:	f00d f9b7 	bl	9001480c <_ZN8touchgfx16DynamicDataGraph9setScaleYEib>
    temperatureGraph.setGraphAreaMargin(0, 0, 0, 0);
9000749e:	2300      	movs	r3, #0
900074a0:	4628      	mov	r0, r5
900074a2:	461a      	mov	r2, r3
900074a4:	4619      	mov	r1, r3
900074a6:	9300      	str	r3, [sp, #0]
900074a8:	f00d f8c3 	bl	90014632 <_ZN8touchgfx17AbstractDataGraph18setGraphAreaMarginEssss>
    temperatureGraph.setGraphAreaPadding(0, 0, 0, 0);
900074ac:	2300      	movs	r3, #0
900074ae:	4628      	mov	r0, r5
900074b0:	461a      	mov	r2, r3
900074b2:	4619      	mov	r1, r3
900074b4:	9300      	str	r3, [sp, #0]
900074b6:	f00c fffa 	bl	900144ae <_ZN8touchgfx17AbstractDataGraph19setGraphAreaPaddingEssss>
        return int2scaled(i, yScale);
900074ba:	f8d4 11c0 	ldr.w	r1, [r4, #448]	; 0x1c0
        setGraphRangeYScaled(int2scaledY(min), int2scaledY(max));
900074be:	4628      	mov	r0, r5
        return i * scale;
900074c0:	eb01 02c1 	add.w	r2, r1, r1, lsl #3
900074c4:	eb01 0181 	add.w	r1, r1, r1, lsl #2
        setGraphRangeYScaled(int2scaledY(min), int2scaledY(max));
900074c8:	0092      	lsls	r2, r2, #2
900074ca:	0049      	lsls	r1, r1, #1
900074cc:	f00c fdde 	bl	9001408c <_ZN8touchgfx17AbstractDataGraph20setGraphRangeYScaledEii>
        canvasPainter = &painter;
900074d0:	9b03      	ldr	r3, [sp, #12]
    temperatureGraph.addGraphElement(temperatureGraphLine1);
900074d2:	ee18 1a10 	vmov	r1, s16
900074d6:	4628      	mov	r0, r5
900074d8:	f8c4 3364 	str.w	r3, [r4, #868]	; 0x364
900074dc:	4b2d      	ldr	r3, [pc, #180]	; (90007594 <_ZN15Screen2ViewBaseC1Ev+0x5fc>)
     *
     * @see getLineWidth
     */
    FORCE_INLINE_FUNCTION void setLineWidth(uint8_t width)
    {
        lineWidth = width;
900074de:	f884 a368 	strb.w	sl, [r4, #872]	; 0x368
900074e2:	f8c4 3378 	str.w	r3, [r4, #888]	; 0x378
    }

    virtual void setColor(colortype color)
    {
        AbstractPainterColor::setColor(color);
        color565 = LCD16bpp::getNativeColor(painterColor);
900074e6:	f24e 73c0 	movw	r3, #59328	; 0xe7c0
900074ea:	f8a4 337c 	strh.w	r3, [r4, #892]	; 0x37c
900074ee:	f00c ffe9 	bl	900144c4 <_ZN8touchgfx17AbstractDataGraph15addGraphElementERNS_20AbstractGraphElementE>
        const float fs = f * (float)scale;
900074f2:	edd4 7a70 	vldr	s15, [r4, #448]	; 0x1c0
900074f6:	ed9f 7a28 	vldr	s14, [pc, #160]	; 90007598 <_ZN15Screen2ViewBaseC1Ev+0x600>
900074fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
900074fe:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
90007502:	eef5 7ac0 	vcmpe.f32	s15, #0.0
90007506:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
9000750a:	f280 84d9 	bge.w	90007ec0 <_ZN15Screen2ViewBaseC1Ev+0xf28>
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
9000750e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
90007512:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
90007516:	eeb8 6ac7 	vcvt.f32.s32	s12, s14
9000751a:	ee17 3a10 	vmov	r3, s14
9000751e:	3b01      	subs	r3, #1
90007520:	ee77 7ac6 	vsub.f32	s15, s15, s12
90007524:	ee77 7aa6 	vadd.f32	s15, s15, s13
90007528:	eefd 7ae7 	vcvt.s32.f32	s15, s15
9000752c:	ee17 1a90 	vmov	r1, s15
90007530:	4419      	add	r1, r3
        return addDataPointScaled(float2scaledY(y));
90007532:	4628      	mov	r0, r5
90007534:	f00d f989 	bl	9001484a <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
90007538:	edd4 7a70 	vldr	s15, [r4, #448]	; 0x1c0
9000753c:	ed9f 7a17 	vldr	s14, [pc, #92]	; 9000759c <_ZN15Screen2ViewBaseC1Ev+0x604>
90007540:	eef8 7ae7 	vcvt.f32.s32	s15, s15
90007544:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
90007548:	eef5 7ac0 	vcmpe.f32	s15, #0.0
9000754c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
90007550:	f280 84ac 	bge.w	90007eac <_ZN15Screen2ViewBaseC1Ev+0xf14>
90007554:	e044      	b.n	900075e0 <_ZN15Screen2ViewBaseC1Ev+0x648>
90007556:	bf00      	nop
90007558:	9002bd28 	.word	0x9002bd28
9000755c:	9002ae60 	.word	0x9002ae60
90007560:	9002c208 	.word	0x9002c208
90007564:	9002b304 	.word	0x9002b304
90007568:	9000683d 	.word	0x9000683d
9000756c:	011001e0 	.word	0x011001e0
90007570:	ffb6ffa8 	.word	0xffb6ffa8
90007574:	00800010 	.word	0x00800010
90007578:	90005ae1 	.word	0x90005ae1
9000757c:	24028248 	.word	0x24028248
90007580:	24028250 	.word	0x24028250
90007584:	9002adc4 	.word	0x9002adc4
90007588:	003d0010 	.word	0x003d0010
9000758c:	005d0010 	.word	0x005d0010
90007590:	00a10010 	.word	0x00a10010
90007594:	ffe5fa00 	.word	0xffe5fa00
90007598:	41c2385c 	.word	0x41c2385c
9000759c:	4204d825 	.word	0x4204d825
900075a0:	900023f5 	.word	0x900023f5
900075a4:	24028244 	.word	0x24028244
900075a8:	41bb9afe 	.word	0x41bb9afe
900075ac:	41da4f2d 	.word	0x41da4f2d
900075b0:	41d58d8a 	.word	0x41d58d8a
900075b4:	413608c4 	.word	0x413608c4
900075b8:	418ae892 	.word	0x418ae892
900075bc:	41cf5b86 	.word	0x41cf5b86
900075c0:	419fcf08 	.word	0x419fcf08
900075c4:	41ebda95 	.word	0x41ebda95
900075c8:	4208792b 	.word	0x4208792b
900075cc:	4194e713 	.word	0x4194e713
900075d0:	4199b776 	.word	0x4199b776
900075d4:	41b16782 	.word	0x41b16782
900075d8:	4148ff6d 	.word	0x4148ff6d
900075dc:	41b62aa4 	.word	0x41b62aa4
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
900075e0:	eebd 7ae7 	vcvt.s32.f32	s14, s15
900075e4:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
900075e8:	eeb8 6ac7 	vcvt.f32.s32	s12, s14
900075ec:	ee17 3a10 	vmov	r3, s14
900075f0:	3b01      	subs	r3, #1
900075f2:	ee77 7ac6 	vsub.f32	s15, s15, s12
900075f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
900075fa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
900075fe:	ee17 1a90 	vmov	r1, s15
90007602:	4419      	add	r1, r3
        return addDataPointScaled(float2scaledY(y));
90007604:	4628      	mov	r0, r5
90007606:	f00d f920 	bl	9001484a <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
9000760a:	edd4 7a70 	vldr	s15, [r4, #448]	; 0x1c0
9000760e:	ed1f 7a1a 	vldr	s14, [pc, #-104]	; 900075a8 <_ZN15Screen2ViewBaseC1Ev+0x610>
90007612:	eef8 7ae7 	vcvt.f32.s32	s15, s15
90007616:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
9000761a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
9000761e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
90007622:	f280 8439 	bge.w	90007e98 <_ZN15Screen2ViewBaseC1Ev+0xf00>
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
90007626:	eebd 7ae7 	vcvt.s32.f32	s14, s15
9000762a:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
9000762e:	eeb8 6ac7 	vcvt.f32.s32	s12, s14
90007632:	ee17 3a10 	vmov	r3, s14
90007636:	3b01      	subs	r3, #1
90007638:	ee77 7ac6 	vsub.f32	s15, s15, s12
9000763c:	ee77 7aa6 	vadd.f32	s15, s15, s13
90007640:	eefd 7ae7 	vcvt.s32.f32	s15, s15
90007644:	ee17 1a90 	vmov	r1, s15
90007648:	4419      	add	r1, r3
        return addDataPointScaled(float2scaledY(y));
9000764a:	4628      	mov	r0, r5
9000764c:	f00d f8fd 	bl	9001484a <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
90007650:	edd4 7a70 	vldr	s15, [r4, #448]	; 0x1c0
90007654:	ed1f 7a2b 	vldr	s14, [pc, #-172]	; 900075ac <_ZN15Screen2ViewBaseC1Ev+0x614>
90007658:	eef8 7ae7 	vcvt.f32.s32	s15, s15
9000765c:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
90007660:	eef5 7ac0 	vcmpe.f32	s15, #0.0
90007664:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
90007668:	f280 840c 	bge.w	90007e84 <_ZN15Screen2ViewBaseC1Ev+0xeec>
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
9000766c:	eebd 7ae7 	vcvt.s32.f32	s14, s15
90007670:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
90007674:	eeb8 6ac7 	vcvt.f32.s32	s12, s14
90007678:	ee17 3a10 	vmov	r3, s14
9000767c:	3b01      	subs	r3, #1
9000767e:	ee77 7ac6 	vsub.f32	s15, s15, s12
90007682:	ee77 7aa6 	vadd.f32	s15, s15, s13
90007686:	eefd 7ae7 	vcvt.s32.f32	s15, s15
9000768a:	ee17 1a90 	vmov	r1, s15
9000768e:	4419      	add	r1, r3
        return addDataPointScaled(float2scaledY(y));
90007690:	4628      	mov	r0, r5
90007692:	f00d f8da 	bl	9001484a <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
90007696:	edd4 7a70 	vldr	s15, [r4, #448]	; 0x1c0
9000769a:	ed1f 7a3b 	vldr	s14, [pc, #-236]	; 900075b0 <_ZN15Screen2ViewBaseC1Ev+0x618>
9000769e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
900076a2:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
900076a6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
900076aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
900076ae:	f280 83e0 	bge.w	90007e72 <_ZN15Screen2ViewBaseC1Ev+0xeda>
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
900076b2:	eebd 7ae7 	vcvt.s32.f32	s14, s15
900076b6:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
900076ba:	eeb8 6ac7 	vcvt.f32.s32	s12, s14
900076be:	ee17 3a10 	vmov	r3, s14
900076c2:	3b01      	subs	r3, #1
900076c4:	ee77 7ac6 	vsub.f32	s15, s15, s12
900076c8:	ee77 7aa6 	vadd.f32	s15, s15, s13
900076cc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
900076d0:	ee17 1a90 	vmov	r1, s15
900076d4:	4419      	add	r1, r3
        return addDataPointScaled(float2scaledY(y));
900076d6:	4628      	mov	r0, r5
900076d8:	f00d f8b7 	bl	9001484a <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
900076dc:	edd4 7a70 	vldr	s15, [r4, #448]	; 0x1c0
900076e0:	ed1f 7a4c 	vldr	s14, [pc, #-304]	; 900075b4 <_ZN15Screen2ViewBaseC1Ev+0x61c>
900076e4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
900076e8:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
900076ec:	eef5 7ac0 	vcmpe.f32	s15, #0.0
900076f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
900076f4:	f280 83b4 	bge.w	90007e60 <_ZN15Screen2ViewBaseC1Ev+0xec8>
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
900076f8:	eebd 7ae7 	vcvt.s32.f32	s14, s15
900076fc:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
90007700:	eeb8 6ac7 	vcvt.f32.s32	s12, s14
90007704:	ee17 3a10 	vmov	r3, s14
90007708:	3b01      	subs	r3, #1
9000770a:	ee77 7ac6 	vsub.f32	s15, s15, s12
9000770e:	ee77 7aa6 	vadd.f32	s15, s15, s13
90007712:	eefd 7ae7 	vcvt.s32.f32	s15, s15
90007716:	ee17 1a90 	vmov	r1, s15
9000771a:	4419      	add	r1, r3
        return addDataPointScaled(float2scaledY(y));
9000771c:	4628      	mov	r0, r5
9000771e:	f00d f894 	bl	9001484a <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
90007722:	edd4 7a70 	vldr	s15, [r4, #448]	; 0x1c0
90007726:	ed1f 7a5c 	vldr	s14, [pc, #-368]	; 900075b8 <_ZN15Screen2ViewBaseC1Ev+0x620>
9000772a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
9000772e:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
90007732:	eef5 7ac0 	vcmpe.f32	s15, #0.0
90007736:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
9000773a:	f280 8388 	bge.w	90007e4e <_ZN15Screen2ViewBaseC1Ev+0xeb6>
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
9000773e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
90007742:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
90007746:	eeb8 6ac7 	vcvt.f32.s32	s12, s14
9000774a:	ee17 3a10 	vmov	r3, s14
9000774e:	3b01      	subs	r3, #1
90007750:	ee77 7ac6 	vsub.f32	s15, s15, s12
90007754:	ee77 7aa6 	vadd.f32	s15, s15, s13
90007758:	eefd 7ae7 	vcvt.s32.f32	s15, s15
9000775c:	ee17 1a90 	vmov	r1, s15
90007760:	4419      	add	r1, r3
        return addDataPointScaled(float2scaledY(y));
90007762:	4628      	mov	r0, r5
90007764:	f00d f871 	bl	9001484a <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
90007768:	edd4 7a70 	vldr	s15, [r4, #448]	; 0x1c0
9000776c:	ed1f 7a6d 	vldr	s14, [pc, #-436]	; 900075bc <_ZN15Screen2ViewBaseC1Ev+0x624>
90007770:	eef8 7ae7 	vcvt.f32.s32	s15, s15
90007774:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
90007778:	eef5 7ac0 	vcmpe.f32	s15, #0.0
9000777c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
90007780:	f280 835c 	bge.w	90007e3c <_ZN15Screen2ViewBaseC1Ev+0xea4>
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
90007784:	eebd 7ae7 	vcvt.s32.f32	s14, s15
90007788:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
9000778c:	eeb8 6ac7 	vcvt.f32.s32	s12, s14
90007790:	ee17 3a10 	vmov	r3, s14
90007794:	3b01      	subs	r3, #1
90007796:	ee77 7ac6 	vsub.f32	s15, s15, s12
9000779a:	ee77 7aa6 	vadd.f32	s15, s15, s13
9000779e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
900077a2:	ee17 1a90 	vmov	r1, s15
900077a6:	4419      	add	r1, r3
        return addDataPointScaled(float2scaledY(y));
900077a8:	4628      	mov	r0, r5
900077aa:	f00d f84e 	bl	9001484a <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
900077ae:	edd4 7a70 	vldr	s15, [r4, #448]	; 0x1c0
900077b2:	ed1f 7a7d 	vldr	s14, [pc, #-500]	; 900075c0 <_ZN15Screen2ViewBaseC1Ev+0x628>
900077b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
900077ba:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
900077be:	eef5 7ac0 	vcmpe.f32	s15, #0.0
900077c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
900077c6:	f280 8330 	bge.w	90007e2a <_ZN15Screen2ViewBaseC1Ev+0xe92>
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
900077ca:	eebd 7ae7 	vcvt.s32.f32	s14, s15
900077ce:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
900077d2:	eeb8 6ac7 	vcvt.f32.s32	s12, s14
900077d6:	ee17 3a10 	vmov	r3, s14
900077da:	3b01      	subs	r3, #1
900077dc:	ee77 7ac6 	vsub.f32	s15, s15, s12
900077e0:	ee77 7aa6 	vadd.f32	s15, s15, s13
900077e4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
900077e8:	ee17 1a90 	vmov	r1, s15
900077ec:	4419      	add	r1, r3
        return addDataPointScaled(float2scaledY(y));
900077ee:	4628      	mov	r0, r5
900077f0:	f00d f82b 	bl	9001484a <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
900077f4:	edd4 7a70 	vldr	s15, [r4, #448]	; 0x1c0
900077f8:	ed1f 7a8e 	vldr	s14, [pc, #-568]	; 900075c4 <_ZN15Screen2ViewBaseC1Ev+0x62c>
900077fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
90007800:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
90007804:	eef5 7ac0 	vcmpe.f32	s15, #0.0
90007808:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
9000780c:	f280 8304 	bge.w	90007e18 <_ZN15Screen2ViewBaseC1Ev+0xe80>
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
90007810:	eebd 7ae7 	vcvt.s32.f32	s14, s15
90007814:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
90007818:	eeb8 6ac7 	vcvt.f32.s32	s12, s14
9000781c:	ee17 3a10 	vmov	r3, s14
90007820:	3b01      	subs	r3, #1
90007822:	ee77 7ac6 	vsub.f32	s15, s15, s12
90007826:	ee77 7aa6 	vadd.f32	s15, s15, s13
9000782a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
9000782e:	ee17 1a90 	vmov	r1, s15
90007832:	4419      	add	r1, r3
        return addDataPointScaled(float2scaledY(y));
90007834:	4628      	mov	r0, r5
90007836:	f00d f808 	bl	9001484a <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
9000783a:	edd4 7a70 	vldr	s15, [r4, #448]	; 0x1c0
9000783e:	ed1f 7a9e 	vldr	s14, [pc, #-632]	; 900075c8 <_ZN15Screen2ViewBaseC1Ev+0x630>
90007842:	eef8 7ae7 	vcvt.f32.s32	s15, s15
90007846:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
9000784a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
9000784e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
90007852:	f280 82d8 	bge.w	90007e06 <_ZN15Screen2ViewBaseC1Ev+0xe6e>
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
90007856:	eebd 7ae7 	vcvt.s32.f32	s14, s15
9000785a:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
9000785e:	eeb8 6ac7 	vcvt.f32.s32	s12, s14
90007862:	ee17 3a10 	vmov	r3, s14
90007866:	3b01      	subs	r3, #1
90007868:	ee77 7ac6 	vsub.f32	s15, s15, s12
9000786c:	ee77 7aa6 	vadd.f32	s15, s15, s13
90007870:	eefd 7ae7 	vcvt.s32.f32	s15, s15
90007874:	ee17 1a90 	vmov	r1, s15
90007878:	4419      	add	r1, r3
        return addDataPointScaled(float2scaledY(y));
9000787a:	4628      	mov	r0, r5
9000787c:	f00c ffe5 	bl	9001484a <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
90007880:	edd4 7a70 	vldr	s15, [r4, #448]	; 0x1c0
90007884:	ed1f 7aaf 	vldr	s14, [pc, #-700]	; 900075cc <_ZN15Screen2ViewBaseC1Ev+0x634>
90007888:	eef8 7ae7 	vcvt.f32.s32	s15, s15
9000788c:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
90007890:	eef5 7ac0 	vcmpe.f32	s15, #0.0
90007894:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
90007898:	f280 82ac 	bge.w	90007df4 <_ZN15Screen2ViewBaseC1Ev+0xe5c>
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
9000789c:	eebd 7ae7 	vcvt.s32.f32	s14, s15
900078a0:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
900078a4:	eeb8 6ac7 	vcvt.f32.s32	s12, s14
900078a8:	ee17 3a10 	vmov	r3, s14
900078ac:	3b01      	subs	r3, #1
900078ae:	ee77 7ac6 	vsub.f32	s15, s15, s12
900078b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
900078b6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
900078ba:	ee17 1a90 	vmov	r1, s15
900078be:	4419      	add	r1, r3
        return addDataPointScaled(float2scaledY(y));
900078c0:	4628      	mov	r0, r5
900078c2:	f00c ffc2 	bl	9001484a <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
900078c6:	edd4 7a70 	vldr	s15, [r4, #448]	; 0x1c0
900078ca:	ed1f 7abf 	vldr	s14, [pc, #-764]	; 900075d0 <_ZN15Screen2ViewBaseC1Ev+0x638>
900078ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
900078d2:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
900078d6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
900078da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
900078de:	f280 8280 	bge.w	90007de2 <_ZN15Screen2ViewBaseC1Ev+0xe4a>
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
900078e2:	eebd 7ae7 	vcvt.s32.f32	s14, s15
900078e6:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
900078ea:	eeb8 6ac7 	vcvt.f32.s32	s12, s14
900078ee:	ee17 3a10 	vmov	r3, s14
900078f2:	3b01      	subs	r3, #1
900078f4:	ee77 7ac6 	vsub.f32	s15, s15, s12
900078f8:	ee77 7aa6 	vadd.f32	s15, s15, s13
900078fc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
90007900:	ee17 1a90 	vmov	r1, s15
90007904:	4419      	add	r1, r3
        return addDataPointScaled(float2scaledY(y));
90007906:	4628      	mov	r0, r5
90007908:	f00c ff9f 	bl	9001484a <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
9000790c:	edd4 7a70 	vldr	s15, [r4, #448]	; 0x1c0
90007910:	ed1f 7ad0 	vldr	s14, [pc, #-832]	; 900075d4 <_ZN15Screen2ViewBaseC1Ev+0x63c>
90007914:	eef8 7ae7 	vcvt.f32.s32	s15, s15
90007918:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
9000791c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
90007920:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
90007924:	f280 8254 	bge.w	90007dd0 <_ZN15Screen2ViewBaseC1Ev+0xe38>
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
90007928:	eebd 7ae7 	vcvt.s32.f32	s14, s15
9000792c:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
90007930:	eeb8 6ac7 	vcvt.f32.s32	s12, s14
90007934:	ee17 3a10 	vmov	r3, s14
90007938:	3b01      	subs	r3, #1
9000793a:	ee77 7ac6 	vsub.f32	s15, s15, s12
9000793e:	ee77 7aa6 	vadd.f32	s15, s15, s13
90007942:	eefd 7ae7 	vcvt.s32.f32	s15, s15
90007946:	ee17 1a90 	vmov	r1, s15
9000794a:	4419      	add	r1, r3
        return addDataPointScaled(float2scaledY(y));
9000794c:	4628      	mov	r0, r5
9000794e:	f00c ff7c 	bl	9001484a <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
90007952:	edd4 7a70 	vldr	s15, [r4, #448]	; 0x1c0
90007956:	ed1f 7ae0 	vldr	s14, [pc, #-896]	; 900075d8 <_ZN15Screen2ViewBaseC1Ev+0x640>
9000795a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
9000795e:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
90007962:	eef5 7ac0 	vcmpe.f32	s15, #0.0
90007966:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
9000796a:	f280 820f 	bge.w	90007d8c <_ZN15Screen2ViewBaseC1Ev+0xdf4>
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
9000796e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
90007972:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
90007976:	eeb8 6ac7 	vcvt.f32.s32	s12, s14
9000797a:	ee17 3a10 	vmov	r3, s14
9000797e:	3b01      	subs	r3, #1
90007980:	ee77 7ac6 	vsub.f32	s15, s15, s12
90007984:	ee77 7aa6 	vadd.f32	s15, s15, s13
90007988:	eefd 7ae7 	vcvt.s32.f32	s15, s15
9000798c:	ee17 1a90 	vmov	r1, s15
90007990:	4419      	add	r1, r3
        return addDataPointScaled(float2scaledY(y));
90007992:	4628      	mov	r0, r5
90007994:	f00c ff59 	bl	9001484a <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
90007998:	edd4 7a70 	vldr	s15, [r4, #448]	; 0x1c0
9000799c:	ed1f 7af1 	vldr	s14, [pc, #-964]	; 900075dc <_ZN15Screen2ViewBaseC1Ev+0x644>
900079a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
900079a4:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
900079a8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
900079ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
900079b0:	f280 81e3 	bge.w	90007d7a <_ZN15Screen2ViewBaseC1Ev+0xde2>
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
900079b4:	eebd 7ae7 	vcvt.s32.f32	s14, s15
900079b8:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
900079bc:	eeb8 6ac7 	vcvt.f32.s32	s12, s14
900079c0:	ee17 3a10 	vmov	r3, s14
900079c4:	3b01      	subs	r3, #1
900079c6:	ee77 7ac6 	vsub.f32	s15, s15, s12
900079ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
900079ce:	eefd 7ae7 	vcvt.s32.f32	s15, s15
900079d2:	ee17 1a90 	vmov	r1, s15
900079d6:	4419      	add	r1, r3
        return addDataPointScaled(float2scaledY(y));
900079d8:	4628      	mov	r0, r5
900079da:	f00c ff36 	bl	9001484a <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
900079de:	edd4 7a70 	vldr	s15, [r4, #448]	; 0x1c0
900079e2:	ed9f 7aef 	vldr	s14, [pc, #956]	; 90007da0 <_ZN15Screen2ViewBaseC1Ev+0xe08>
900079e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
900079ea:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
900079ee:	eef5 7ac0 	vcmpe.f32	s15, #0.0
900079f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
900079f6:	f280 81b7 	bge.w	90007d68 <_ZN15Screen2ViewBaseC1Ev+0xdd0>
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
900079fa:	eebd 7ae7 	vcvt.s32.f32	s14, s15
900079fe:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
90007a02:	eeb8 6ac7 	vcvt.f32.s32	s12, s14
90007a06:	ee17 3a10 	vmov	r3, s14
90007a0a:	3b01      	subs	r3, #1
90007a0c:	ee77 7ac6 	vsub.f32	s15, s15, s12
90007a10:	ee77 7aa6 	vadd.f32	s15, s15, s13
90007a14:	eefd 7ae7 	vcvt.s32.f32	s15, s15
90007a18:	ee17 1a90 	vmov	r1, s15
90007a1c:	4419      	add	r1, r3
        return addDataPointScaled(float2scaledY(y));
90007a1e:	4628      	mov	r0, r5
90007a20:	f00c ff13 	bl	9001484a <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
90007a24:	edd4 7a70 	vldr	s15, [r4, #448]	; 0x1c0
90007a28:	ed9f 7ade 	vldr	s14, [pc, #888]	; 90007da4 <_ZN15Screen2ViewBaseC1Ev+0xe0c>
90007a2c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
90007a30:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
90007a34:	eef5 7ac0 	vcmpe.f32	s15, #0.0
90007a38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
90007a3c:	f280 818b 	bge.w	90007d56 <_ZN15Screen2ViewBaseC1Ev+0xdbe>
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
90007a40:	eebd 7ae7 	vcvt.s32.f32	s14, s15
90007a44:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
90007a48:	eeb8 6ac7 	vcvt.f32.s32	s12, s14
90007a4c:	ee17 3a10 	vmov	r3, s14
90007a50:	3b01      	subs	r3, #1
90007a52:	ee77 7ac6 	vsub.f32	s15, s15, s12
90007a56:	ee77 7aa6 	vadd.f32	s15, s15, s13
90007a5a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
90007a5e:	ee17 1a90 	vmov	r1, s15
90007a62:	4419      	add	r1, r3
        return addDataPointScaled(float2scaledY(y));
90007a64:	4628      	mov	r0, r5
90007a66:	f00c fef0 	bl	9001484a <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
90007a6a:	edd4 7a70 	vldr	s15, [r4, #448]	; 0x1c0
90007a6e:	ed9f 7ace 	vldr	s14, [pc, #824]	; 90007da8 <_ZN15Screen2ViewBaseC1Ev+0xe10>
90007a72:	eef8 7ae7 	vcvt.f32.s32	s15, s15
90007a76:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
90007a7a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
90007a7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
90007a82:	f280 815f 	bge.w	90007d44 <_ZN15Screen2ViewBaseC1Ev+0xdac>
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
90007a86:	eebd 7ae7 	vcvt.s32.f32	s14, s15
90007a8a:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
90007a8e:	eeb8 6ac7 	vcvt.f32.s32	s12, s14
90007a92:	ee17 3a10 	vmov	r3, s14
90007a96:	3b01      	subs	r3, #1
90007a98:	ee77 7ac6 	vsub.f32	s15, s15, s12
90007a9c:	ee77 7aa6 	vadd.f32	s15, s15, s13
90007aa0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
90007aa4:	ee17 1a90 	vmov	r1, s15
90007aa8:	4419      	add	r1, r3
        return addDataPointScaled(float2scaledY(y));
90007aaa:	4628      	mov	r0, r5
90007aac:	f00c fecd 	bl	9001484a <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
90007ab0:	edd4 7a70 	vldr	s15, [r4, #448]	; 0x1c0
90007ab4:	ed9f 7abd 	vldr	s14, [pc, #756]	; 90007dac <_ZN15Screen2ViewBaseC1Ev+0xe14>
90007ab8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
90007abc:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
90007ac0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
90007ac4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
90007ac8:	f280 8133 	bge.w	90007d32 <_ZN15Screen2ViewBaseC1Ev+0xd9a>
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
90007acc:	eebd 7ae7 	vcvt.s32.f32	s14, s15
90007ad0:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
90007ad4:	eeb8 6ac7 	vcvt.f32.s32	s12, s14
90007ad8:	ee17 3a10 	vmov	r3, s14
90007adc:	3b01      	subs	r3, #1
90007ade:	ee77 7ac6 	vsub.f32	s15, s15, s12
90007ae2:	ee77 7aa6 	vadd.f32	s15, s15, s13
90007ae6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
90007aea:	ee17 1a90 	vmov	r1, s15
90007aee:	4419      	add	r1, r3
        return addDataPointScaled(float2scaledY(y));
90007af0:	4628      	mov	r0, r5
90007af2:	f00c feaa 	bl	9001484a <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
90007af6:	edd4 7a70 	vldr	s15, [r4, #448]	; 0x1c0
90007afa:	ed9f 7aad 	vldr	s14, [pc, #692]	; 90007db0 <_ZN15Screen2ViewBaseC1Ev+0xe18>
90007afe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
90007b02:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
90007b06:	eef5 7ac0 	vcmpe.f32	s15, #0.0
90007b0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
90007b0e:	f280 8107 	bge.w	90007d20 <_ZN15Screen2ViewBaseC1Ev+0xd88>
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
90007b12:	eebd 7ae7 	vcvt.s32.f32	s14, s15
90007b16:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
90007b1a:	eeb8 6ac7 	vcvt.f32.s32	s12, s14
90007b1e:	ee17 3a10 	vmov	r3, s14
90007b22:	3b01      	subs	r3, #1
90007b24:	ee77 7ac6 	vsub.f32	s15, s15, s12
90007b28:	ee77 7aa6 	vadd.f32	s15, s15, s13
90007b2c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
90007b30:	ee17 1a90 	vmov	r1, s15
90007b34:	4419      	add	r1, r3
        return addDataPointScaled(float2scaledY(y));
90007b36:	4628      	mov	r0, r5
90007b38:	f00c fe87 	bl	9001484a <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
90007b3c:	edd4 7a70 	vldr	s15, [r4, #448]	; 0x1c0
90007b40:	ed9f 7a9c 	vldr	s14, [pc, #624]	; 90007db4 <_ZN15Screen2ViewBaseC1Ev+0xe1c>
90007b44:	eef8 7ae7 	vcvt.f32.s32	s15, s15
90007b48:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
90007b4c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
90007b50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
90007b54:	f280 80db 	bge.w	90007d0e <_ZN15Screen2ViewBaseC1Ev+0xd76>
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
90007b58:	eebd 7ae7 	vcvt.s32.f32	s14, s15
90007b5c:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
90007b60:	eeb8 6ac7 	vcvt.f32.s32	s12, s14
90007b64:	ee17 3a10 	vmov	r3, s14
90007b68:	3b01      	subs	r3, #1
90007b6a:	ee77 7ac6 	vsub.f32	s15, s15, s12
90007b6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
90007b72:	eefd 7ae7 	vcvt.s32.f32	s15, s15
90007b76:	ee17 1a90 	vmov	r1, s15
90007b7a:	4419      	add	r1, r3
        return addDataPointScaled(float2scaledY(y));
90007b7c:	4628      	mov	r0, r5
90007b7e:	f00c fe64 	bl	9001484a <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
90007b82:	edd4 7a70 	vldr	s15, [r4, #448]	; 0x1c0
90007b86:	ed9f 7a8c 	vldr	s14, [pc, #560]	; 90007db8 <_ZN15Screen2ViewBaseC1Ev+0xe20>
90007b8a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
90007b8e:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
90007b92:	eef5 7ac0 	vcmpe.f32	s15, #0.0
90007b96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
90007b9a:	f280 80af 	bge.w	90007cfc <_ZN15Screen2ViewBaseC1Ev+0xd64>
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
90007b9e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
90007ba2:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
90007ba6:	eeb8 6ac7 	vcvt.f32.s32	s12, s14
90007baa:	ee17 3a10 	vmov	r3, s14
90007bae:	3b01      	subs	r3, #1
90007bb0:	ee77 7ac6 	vsub.f32	s15, s15, s12
90007bb4:	ee77 7aa6 	vadd.f32	s15, s15, s13
90007bb8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
90007bbc:	ee17 1a90 	vmov	r1, s15
90007bc0:	4419      	add	r1, r3
        return addDataPointScaled(float2scaledY(y));
90007bc2:	4628      	mov	r0, r5
90007bc4:	f00c fe41 	bl	9001484a <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
90007bc8:	edd4 7a70 	vldr	s15, [r4, #448]	; 0x1c0
90007bcc:	ed9f 7a7b 	vldr	s14, [pc, #492]	; 90007dbc <_ZN15Screen2ViewBaseC1Ev+0xe24>
90007bd0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
90007bd4:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
90007bd8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
90007bdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
90007be0:	f280 8083 	bge.w	90007cea <_ZN15Screen2ViewBaseC1Ev+0xd52>
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
90007be4:	eebd 7ae7 	vcvt.s32.f32	s14, s15
90007be8:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
90007bec:	eeb8 6ac7 	vcvt.f32.s32	s12, s14
90007bf0:	ee17 3a10 	vmov	r3, s14
90007bf4:	3b01      	subs	r3, #1
90007bf6:	ee77 7ac6 	vsub.f32	s15, s15, s12
90007bfa:	ee77 7aa6 	vadd.f32	s15, s15, s13
90007bfe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
90007c02:	ee17 1a90 	vmov	r1, s15
90007c06:	4419      	add	r1, r3
        return addDataPointScaled(float2scaledY(y));
90007c08:	4628      	mov	r0, r5
        boundingArea = calculateBoundingArea();
90007c0a:	f109 063c 	add.w	r6, r9, #60	; 0x3c
90007c0e:	f00c fe1c 	bl	9001484a <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
90007c12:	4629      	mov	r1, r5
90007c14:	4640      	mov	r0, r8
90007c16:	ad04      	add	r5, sp, #16
90007c18:	f00a ff48 	bl	90012aac <_ZN8touchgfx9Container3addERNS_8DrawableE>
90007c1c:	9708      	str	r7, [sp, #32]
90007c1e:	2700      	movs	r7, #0
        text.setTypedText(t);
90007c20:	4648      	mov	r0, r9
90007c22:	a908      	add	r1, sp, #32
90007c24:	f8ad 7024 	strh.w	r7, [sp, #36]	; 0x24
90007c28:	f00d fe26 	bl	90015878 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
        rect.width = width;
90007c2c:	f8b4 3388 	ldrh.w	r3, [r4, #904]	; 0x388
90007c30:	4649      	mov	r1, r9
90007c32:	4628      	mov	r0, r5
        return rect.height;
90007c34:	f9b4 a38a 	ldrsh.w	sl, [r4, #906]	; 0x38a
        rect.width = width;
90007c38:	f8a4 33bc 	strh.w	r3, [r4, #956]	; 0x3bc
90007c3c:	f00d fb74 	bl	90015328 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
90007c40:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
90007c44:	e886 0007 	stmia.w	r6, {r0, r1, r2}
        boundingArea = calculateBoundingArea();
90007c48:	4649      	mov	r1, r9
90007c4a:	4628      	mov	r0, r5
        rect.height = height;
90007c4c:	f8a4 a3be 	strh.w	sl, [r4, #958]	; 0x3be
        colorReleased = newColorReleased;
90007c50:	f04f 3aff 	mov.w	sl, #4294967295
90007c54:	f00d fb68 	bl	90015328 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
        rect.width = width;
90007c58:	234e      	movs	r3, #78	; 0x4e
90007c5a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
90007c5e:	e886 0007 	stmia.w	r6, {r0, r1, r2}
        boundingArea = calculateBoundingArea();
90007c62:	4649      	mov	r1, r9
90007c64:	4628      	mov	r0, r5
        rect.x = x;
90007c66:	f8c4 73b8 	str.w	r7, [r4, #952]	; 0x3b8
        rect.width = width;
90007c6a:	f8a4 33bc 	strh.w	r3, [r4, #956]	; 0x3bc
90007c6e:	f00d fb5b 	bl	90015328 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
        rect.height = height;
90007c72:	231c      	movs	r3, #28
90007c74:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
90007c78:	e886 0007 	stmia.w	r6, {r0, r1, r2}
        boundingArea = calculateBoundingArea();
90007c7c:	4649      	mov	r1, r9
90007c7e:	4628      	mov	r0, r5
90007c80:	f8a4 33be 	strh.w	r3, [r4, #958]	; 0x3be
90007c84:	f00d fb50 	bl	90015328 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
        text.setColor(T::getPressed() ? colorPressed : colorReleased);
90007c88:	f894 33ac 	ldrb.w	r3, [r4, #940]	; 0x3ac
        rect.x = x;
90007c8c:	f8df e134 	ldr.w	lr, [pc, #308]	; 90007dc4 <_ZN15Screen2ViewBaseC1Ev+0xe2c>
90007c90:	42bb      	cmp	r3, r7
        colorPressed = newColorPressed;
90007c92:	4f4b      	ldr	r7, [pc, #300]	; (90007dc0 <_ZN15Screen2ViewBaseC1Ev+0xe28>)
    backButton.setAction(flexButtonCallback);
90007c94:	f242 033c 	movw	r3, #8252	; 0x203c
90007c98:	f8df c12c 	ldr.w	ip, [pc, #300]	; 90007dc8 <_ZN15Screen2ViewBaseC1Ev+0xe30>
        text.setColor(T::getPressed() ? colorPressed : colorReleased);
90007c9c:	bf0c      	ite	eq
90007c9e:	46d1      	moveq	r9, sl
90007ca0:	46b9      	movne	r9, r7
90007ca2:	4423      	add	r3, r4
90007ca4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
90007ca8:	e886 0007 	stmia.w	r6, {r0, r1, r2}
90007cac:	4640      	mov	r0, r8
90007cae:	ee18 1a90 	vmov	r1, s17
        colorReleased = newColorReleased;
90007cb2:	f8c4 a3fc 	str.w	sl, [r4, #1020]	; 0x3fc
        colorPressed = newColorPressed;
90007cb6:	f8c4 7400 	str.w	r7, [r4, #1024]	; 0x400
        color = newColor;
90007cba:	f8c4 93e4 	str.w	r9, [r4, #996]	; 0x3e4
        action = &callback;
90007cbe:	f8c4 33b0 	str.w	r3, [r4, #944]	; 0x3b0
90007cc2:	e9c4 ece1 	strd	lr, ip, [r4, #900]	; 0x384
90007cc6:	f00a fef1 	bl	90012aac <_ZN8touchgfx9Container3addERNS_8DrawableE>
}
90007cca:	4620      	mov	r0, r4
90007ccc:	b00b      	add	sp, #44	; 0x2c
90007cce:	ecbd 8b02 	vpop	{d8}
90007cd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return instance->lcdRef;
90007cd6:	6898      	ldr	r0, [r3, #8]
90007cd8:	f8df 90f0 	ldr.w	r9, [pc, #240]	; 90007dcc <_ZN15Screen2ViewBaseC1Ev+0xe34>
        bool compat = HAL::lcd().framebufferFormat() == format;
90007cdc:	6803      	ldr	r3, [r0, #0]
90007cde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
90007ce0:	454a      	cmp	r2, r9
90007ce2:	f43f aa7f 	beq.w	900071e4 <_ZN15Screen2ViewBaseC1Ev+0x24c>
90007ce6:	f7ff ba39 	b.w	9000715c <_ZN15Screen2ViewBaseC1Ev+0x1c4>
            return (int)(fs + 0.5f);
90007cea:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
90007cee:	ee77 7a87 	vadd.f32	s15, s15, s14
90007cf2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
90007cf6:	ee17 1a90 	vmov	r1, s15
90007cfa:	e785      	b.n	90007c08 <_ZN15Screen2ViewBaseC1Ev+0xc70>
90007cfc:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
90007d00:	ee77 7a87 	vadd.f32	s15, s15, s14
90007d04:	eefd 7ae7 	vcvt.s32.f32	s15, s15
90007d08:	ee17 1a90 	vmov	r1, s15
90007d0c:	e759      	b.n	90007bc2 <_ZN15Screen2ViewBaseC1Ev+0xc2a>
90007d0e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
90007d12:	ee77 7a87 	vadd.f32	s15, s15, s14
90007d16:	eefd 7ae7 	vcvt.s32.f32	s15, s15
90007d1a:	ee17 1a90 	vmov	r1, s15
90007d1e:	e72d      	b.n	90007b7c <_ZN15Screen2ViewBaseC1Ev+0xbe4>
90007d20:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
90007d24:	ee77 7a87 	vadd.f32	s15, s15, s14
90007d28:	eefd 7ae7 	vcvt.s32.f32	s15, s15
90007d2c:	ee17 1a90 	vmov	r1, s15
90007d30:	e701      	b.n	90007b36 <_ZN15Screen2ViewBaseC1Ev+0xb9e>
90007d32:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
90007d36:	ee77 7a87 	vadd.f32	s15, s15, s14
90007d3a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
90007d3e:	ee17 1a90 	vmov	r1, s15
90007d42:	e6d5      	b.n	90007af0 <_ZN15Screen2ViewBaseC1Ev+0xb58>
90007d44:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
90007d48:	ee77 7a87 	vadd.f32	s15, s15, s14
90007d4c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
90007d50:	ee17 1a90 	vmov	r1, s15
90007d54:	e6a9      	b.n	90007aaa <_ZN15Screen2ViewBaseC1Ev+0xb12>
90007d56:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
90007d5a:	ee77 7a87 	vadd.f32	s15, s15, s14
90007d5e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
90007d62:	ee17 1a90 	vmov	r1, s15
90007d66:	e67d      	b.n	90007a64 <_ZN15Screen2ViewBaseC1Ev+0xacc>
90007d68:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
90007d6c:	ee77 7a87 	vadd.f32	s15, s15, s14
90007d70:	eefd 7ae7 	vcvt.s32.f32	s15, s15
90007d74:	ee17 1a90 	vmov	r1, s15
90007d78:	e651      	b.n	90007a1e <_ZN15Screen2ViewBaseC1Ev+0xa86>
90007d7a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
90007d7e:	ee77 7a87 	vadd.f32	s15, s15, s14
90007d82:	eefd 7ae7 	vcvt.s32.f32	s15, s15
90007d86:	ee17 1a90 	vmov	r1, s15
90007d8a:	e625      	b.n	900079d8 <_ZN15Screen2ViewBaseC1Ev+0xa40>
90007d8c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
90007d90:	ee77 7a87 	vadd.f32	s15, s15, s14
90007d94:	eefd 7ae7 	vcvt.s32.f32	s15, s15
90007d98:	ee17 1a90 	vmov	r1, s15
90007d9c:	e5f9      	b.n	90007992 <_ZN15Screen2ViewBaseC1Ev+0x9fa>
90007d9e:	bf00      	nop
90007da0:	42060a5d 	.word	0x42060a5d
90007da4:	41c00e31 	.word	0x41c00e31
90007da8:	41d4814a 	.word	0x41d4814a
90007dac:	41dd557c 	.word	0x41dd557c
90007db0:	41420f71 	.word	0x41420f71
90007db4:	41813c4b 	.word	0x41813c4b
90007db8:	41d060bf 	.word	0x41d060bf
90007dbc:	41a12cff 	.word	0x41a12cff
90007dc0:	ff9e9d9d 	.word	0xff9e9d9d
90007dc4:	0017000d 	.word	0x0017000d
90007dc8:	001c004e 	.word	0x001c004e
90007dcc:	900023f5 	.word	0x900023f5
90007dd0:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
90007dd4:	ee77 7a87 	vadd.f32	s15, s15, s14
90007dd8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
90007ddc:	ee17 1a90 	vmov	r1, s15
90007de0:	e5b4      	b.n	9000794c <_ZN15Screen2ViewBaseC1Ev+0x9b4>
90007de2:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
90007de6:	ee77 7a87 	vadd.f32	s15, s15, s14
90007dea:	eefd 7ae7 	vcvt.s32.f32	s15, s15
90007dee:	ee17 1a90 	vmov	r1, s15
90007df2:	e588      	b.n	90007906 <_ZN15Screen2ViewBaseC1Ev+0x96e>
90007df4:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
90007df8:	ee77 7a87 	vadd.f32	s15, s15, s14
90007dfc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
90007e00:	ee17 1a90 	vmov	r1, s15
90007e04:	e55c      	b.n	900078c0 <_ZN15Screen2ViewBaseC1Ev+0x928>
90007e06:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
90007e0a:	ee77 7a87 	vadd.f32	s15, s15, s14
90007e0e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
90007e12:	ee17 1a90 	vmov	r1, s15
90007e16:	e530      	b.n	9000787a <_ZN15Screen2ViewBaseC1Ev+0x8e2>
90007e18:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
90007e1c:	ee77 7a87 	vadd.f32	s15, s15, s14
90007e20:	eefd 7ae7 	vcvt.s32.f32	s15, s15
90007e24:	ee17 1a90 	vmov	r1, s15
90007e28:	e504      	b.n	90007834 <_ZN15Screen2ViewBaseC1Ev+0x89c>
90007e2a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
90007e2e:	ee77 7a87 	vadd.f32	s15, s15, s14
90007e32:	eefd 7ae7 	vcvt.s32.f32	s15, s15
90007e36:	ee17 1a90 	vmov	r1, s15
90007e3a:	e4d8      	b.n	900077ee <_ZN15Screen2ViewBaseC1Ev+0x856>
90007e3c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
90007e40:	ee77 7a87 	vadd.f32	s15, s15, s14
90007e44:	eefd 7ae7 	vcvt.s32.f32	s15, s15
90007e48:	ee17 1a90 	vmov	r1, s15
90007e4c:	e4ac      	b.n	900077a8 <_ZN15Screen2ViewBaseC1Ev+0x810>
90007e4e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
90007e52:	ee77 7a87 	vadd.f32	s15, s15, s14
90007e56:	eefd 7ae7 	vcvt.s32.f32	s15, s15
90007e5a:	ee17 1a90 	vmov	r1, s15
90007e5e:	e480      	b.n	90007762 <_ZN15Screen2ViewBaseC1Ev+0x7ca>
90007e60:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
90007e64:	ee77 7a87 	vadd.f32	s15, s15, s14
90007e68:	eefd 7ae7 	vcvt.s32.f32	s15, s15
90007e6c:	ee17 1a90 	vmov	r1, s15
90007e70:	e454      	b.n	9000771c <_ZN15Screen2ViewBaseC1Ev+0x784>
90007e72:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
90007e76:	ee77 7a87 	vadd.f32	s15, s15, s14
90007e7a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
90007e7e:	ee17 1a90 	vmov	r1, s15
90007e82:	e428      	b.n	900076d6 <_ZN15Screen2ViewBaseC1Ev+0x73e>
90007e84:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
90007e88:	ee77 7a87 	vadd.f32	s15, s15, s14
90007e8c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
90007e90:	ee17 1a90 	vmov	r1, s15
90007e94:	f7ff bbfc 	b.w	90007690 <_ZN15Screen2ViewBaseC1Ev+0x6f8>
90007e98:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
90007e9c:	ee77 7a87 	vadd.f32	s15, s15, s14
90007ea0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
90007ea4:	ee17 1a90 	vmov	r1, s15
90007ea8:	f7ff bbcf 	b.w	9000764a <_ZN15Screen2ViewBaseC1Ev+0x6b2>
90007eac:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
90007eb0:	ee77 7a87 	vadd.f32	s15, s15, s14
90007eb4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
90007eb8:	ee17 1a90 	vmov	r1, s15
90007ebc:	f7ff bba2 	b.w	90007604 <_ZN15Screen2ViewBaseC1Ev+0x66c>
90007ec0:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
90007ec4:	ee77 7a87 	vadd.f32	s15, s15, s14
90007ec8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
90007ecc:	ee17 1a90 	vmov	r1, s15
90007ed0:	f7ff bb2f 	b.w	90007532 <_ZN15Screen2ViewBaseC1Ev+0x59a>
        boundingArea = calculateBoundingArea();
90007ed4:	ae04      	add	r6, sp, #16
90007ed6:	4651      	mov	r1, sl
90007ed8:	4630      	mov	r0, r6
90007eda:	4798      	blx	r3
90007edc:	f104 03e4 	add.w	r3, r4, #228	; 0xe4
90007ee0:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
90007ee4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
90007ee8:	f7ff ba10 	b.w	9000730c <_ZN15Screen2ViewBaseC1Ev+0x374>
90007eec:	f10d 0a10 	add.w	sl, sp, #16
90007ef0:	4631      	mov	r1, r6
90007ef2:	4650      	mov	r0, sl
90007ef4:	4790      	blx	r2
90007ef6:	f504 7398 	add.w	r3, r4, #304	; 0x130
90007efa:	e89a 0007 	ldmia.w	sl, {r0, r1, r2}
90007efe:	e883 0007 	stmia.w	r3, {r0, r1, r2}
90007f02:	f7ff ba48 	b.w	90007396 <_ZN15Screen2ViewBaseC1Ev+0x3fe>
90007f06:	f10d 0a10 	add.w	sl, sp, #16
90007f0a:	4631      	mov	r1, r6
90007f0c:	4650      	mov	r0, sl
90007f0e:	4790      	blx	r2
90007f10:	f504 73be 	add.w	r3, r4, #380	; 0x17c
90007f14:	e89a 0007 	ldmia.w	sl, {r0, r1, r2}
90007f18:	e883 0007 	stmia.w	r3, {r0, r1, r2}
90007f1c:	f7ff ba7c 	b.w	90007418 <_ZN15Screen2ViewBaseC1Ev+0x480>
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
90007f20:	4b05      	ldr	r3, [pc, #20]	; (90007f38 <_ZN15Screen2ViewBaseC1Ev+0xfa0>)
90007f22:	2161      	movs	r1, #97	; 0x61
90007f24:	4a05      	ldr	r2, [pc, #20]	; (90007f3c <_ZN15Screen2ViewBaseC1Ev+0xfa4>)
90007f26:	4806      	ldr	r0, [pc, #24]	; (90007f40 <_ZN15Screen2ViewBaseC1Ev+0xfa8>)
90007f28:	f01f fb94 	bl	90027654 <__assert_func>
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
90007f2c:	4b05      	ldr	r3, [pc, #20]	; (90007f44 <_ZN15Screen2ViewBaseC1Ev+0xfac>)
90007f2e:	2160      	movs	r1, #96	; 0x60
90007f30:	4a02      	ldr	r2, [pc, #8]	; (90007f3c <_ZN15Screen2ViewBaseC1Ev+0xfa4>)
90007f32:	4803      	ldr	r0, [pc, #12]	; (90007f40 <_ZN15Screen2ViewBaseC1Ev+0xfa8>)
90007f34:	f01f fb8e 	bl	90027654 <__assert_func>
90007f38:	9002ad4c 	.word	0x9002ad4c
90007f3c:	9002ad8c 	.word	0x9002ad8c
90007f40:	9002ad04 	.word	0x9002ad04
90007f44:	9002ac84 	.word	0x9002ac84

90007f48 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_10_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_10_4bpp();

touchgfx::GeneratedFont& getFont_verdana_10_4bpp()
{
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 10, 0, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
90007f48:	4770      	bx	lr
90007f4a:	bf00      	nop

90007f4c <_Z23getFont_verdana_10_4bppv>:
{
90007f4c:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 10, 0, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
90007f4e:	4d18      	ldr	r5, [pc, #96]	; (90007fb0 <_Z23getFont_verdana_10_4bppv+0x64>)
{
90007f50:	b08f      	sub	sp, #60	; 0x3c
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 10, 0, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
90007f52:	682c      	ldr	r4, [r5, #0]
90007f54:	f3bf 8f5b 	dmb	ish
90007f58:	f014 0401 	ands.w	r4, r4, #1
90007f5c:	d002      	beq.n	90007f64 <_Z23getFont_verdana_10_4bppv+0x18>
    return verdana_10_4bpp;
}
90007f5e:	4815      	ldr	r0, [pc, #84]	; (90007fb4 <_Z23getFont_verdana_10_4bppv+0x68>)
90007f60:	b00f      	add	sp, #60	; 0x3c
90007f62:	bd30      	pop	{r4, r5, pc}
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 10, 0, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
90007f64:	4628      	mov	r0, r5
90007f66:	f01f fb48 	bl	900275fa <__cxa_guard_acquire>
90007f6a:	2800      	cmp	r0, #0
90007f6c:	d0f7      	beq.n	90007f5e <_Z23getFont_verdana_10_4bppv+0x12>
90007f6e:	213f      	movs	r1, #63	; 0x3f
90007f70:	2201      	movs	r2, #1
90007f72:	230a      	movs	r3, #10
90007f74:	2004      	movs	r0, #4
90007f76:	9204      	str	r2, [sp, #16]
90007f78:	9300      	str	r3, [sp, #0]
90007f7a:	9003      	str	r0, [sp, #12]
90007f7c:	480d      	ldr	r0, [pc, #52]	; (90007fb4 <_Z23getFont_verdana_10_4bppv+0x68>)
90007f7e:	e9cd 1409 	strd	r1, r4, [sp, #36]	; 0x24
90007f82:	490d      	ldr	r1, [pc, #52]	; (90007fb8 <_Z23getFont_verdana_10_4bppv+0x6c>)
90007f84:	9108      	str	r1, [sp, #32]
90007f86:	490d      	ldr	r1, [pc, #52]	; (90007fbc <_Z23getFont_verdana_10_4bppv+0x70>)
90007f88:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
90007f8c:	9107      	str	r1, [sp, #28]
90007f8e:	490c      	ldr	r1, [pc, #48]	; (90007fc0 <_Z23getFont_verdana_10_4bppv+0x74>)
90007f90:	e9cd 4405 	strd	r4, r4, [sp, #20]
90007f94:	e9cd 4401 	strd	r4, r4, [sp, #4]
90007f98:	f7fd fd30 	bl	900059fc <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
90007f9c:	4809      	ldr	r0, [pc, #36]	; (90007fc4 <_Z23getFont_verdana_10_4bppv+0x78>)
90007f9e:	f01f fb77 	bl	90027690 <atexit>
90007fa2:	4628      	mov	r0, r5
90007fa4:	f01f fb35 	bl	90027612 <__cxa_guard_release>
}
90007fa8:	4802      	ldr	r0, [pc, #8]	; (90007fb4 <_Z23getFont_verdana_10_4bppv+0x68>)
90007faa:	b00f      	add	sp, #60	; 0x3c
90007fac:	bd30      	pop	{r4, r5, pc}
90007fae:	bf00      	nop
90007fb0:	2400d0f0 	.word	0x2400d0f0
90007fb4:	2400d0f4 	.word	0x2400d0f4
90007fb8:	9002c7a0 	.word	0x9002c7a0
90007fbc:	9002c94c 	.word	0x9002c94c
90007fc0:	90201c38 	.word	0x90201c38
90007fc4:	90007f49 	.word	0x90007f49

90007fc8 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_20_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_20_4bpp();

touchgfx::GeneratedFont& getFont_verdana_20_4bpp()
{
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 96, 24, 20, 0, 0, 4, 1, 1, 1, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
90007fc8:	4770      	bx	lr
90007fca:	bf00      	nop

90007fcc <_Z23getFont_verdana_20_4bppv>:
{
90007fcc:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 96, 24, 20, 0, 0, 4, 1, 1, 1, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
90007fce:	4d19      	ldr	r5, [pc, #100]	; (90008034 <_Z23getFont_verdana_20_4bppv+0x68>)
{
90007fd0:	b08f      	sub	sp, #60	; 0x3c
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 96, 24, 20, 0, 0, 4, 1, 1, 1, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
90007fd2:	682c      	ldr	r4, [r5, #0]
90007fd4:	f3bf 8f5b 	dmb	ish
90007fd8:	f014 0401 	ands.w	r4, r4, #1
90007fdc:	d002      	beq.n	90007fe4 <_Z23getFont_verdana_20_4bppv+0x18>
    return verdana_20_4bpp;
}
90007fde:	4816      	ldr	r0, [pc, #88]	; (90008038 <_Z23getFont_verdana_20_4bppv+0x6c>)
90007fe0:	b00f      	add	sp, #60	; 0x3c
90007fe2:	bd30      	pop	{r4, r5, pc}
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 96, 24, 20, 0, 0, 4, 1, 1, 1, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
90007fe4:	4628      	mov	r0, r5
90007fe6:	f01f fb08 	bl	900275fa <__cxa_guard_acquire>
90007fea:	2800      	cmp	r0, #0
90007fec:	d0f7      	beq.n	90007fde <_Z23getFont_verdana_20_4bppv+0x12>
90007fee:	213f      	movs	r1, #63	; 0x3f
90007ff0:	4a12      	ldr	r2, [pc, #72]	; (9000803c <_Z23getFont_verdana_20_4bppv+0x70>)
90007ff2:	2301      	movs	r3, #1
90007ff4:	2014      	movs	r0, #20
90007ff6:	9208      	str	r2, [sp, #32]
90007ff8:	2204      	movs	r2, #4
90007ffa:	9304      	str	r3, [sp, #16]
90007ffc:	9000      	str	r0, [sp, #0]
90007ffe:	9401      	str	r4, [sp, #4]
90008000:	480d      	ldr	r0, [pc, #52]	; (90008038 <_Z23getFont_verdana_20_4bppv+0x6c>)
90008002:	e9cd 1409 	strd	r1, r4, [sp, #36]	; 0x24
90008006:	490e      	ldr	r1, [pc, #56]	; (90008040 <_Z23getFont_verdana_20_4bppv+0x74>)
90008008:	e9cd 3305 	strd	r3, r3, [sp, #20]
9000800c:	9107      	str	r1, [sp, #28]
9000800e:	2318      	movs	r3, #24
90008010:	490c      	ldr	r1, [pc, #48]	; (90008044 <_Z23getFont_verdana_20_4bppv+0x78>)
90008012:	e9cd 4202 	strd	r4, r2, [sp, #8]
90008016:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
9000801a:	2260      	movs	r2, #96	; 0x60
9000801c:	f7fd fcee 	bl	900059fc <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
90008020:	4809      	ldr	r0, [pc, #36]	; (90008048 <_Z23getFont_verdana_20_4bppv+0x7c>)
90008022:	f01f fb35 	bl	90027690 <atexit>
90008026:	4628      	mov	r0, r5
90008028:	f01f faf3 	bl	90027612 <__cxa_guard_release>
}
9000802c:	4802      	ldr	r0, [pc, #8]	; (90008038 <_Z23getFont_verdana_20_4bppv+0x6c>)
9000802e:	b00f      	add	sp, #60	; 0x3c
90008030:	bd30      	pop	{r4, r5, pc}
90008032:	bf00      	nop
90008034:	2400d120 	.word	0x2400d120
90008038:	2400d124 	.word	0x2400d124
9000803c:	9002c7a4 	.word	0x9002c7a4
90008040:	9002c950 	.word	0x9002c950
90008044:	90201c48 	.word	0x90201c48
90008048:	90007fc9 	.word	0x90007fc9

9000804c <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_40_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_40_4bpp();

touchgfx::GeneratedFont& getFont_verdana_40_4bpp()
{
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 40, 0, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
9000804c:	4770      	bx	lr
9000804e:	bf00      	nop

90008050 <_Z23getFont_verdana_40_4bppv>:
{
90008050:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 40, 0, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
90008052:	4d18      	ldr	r5, [pc, #96]	; (900080b4 <_Z23getFont_verdana_40_4bppv+0x64>)
{
90008054:	b08f      	sub	sp, #60	; 0x3c
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 40, 0, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
90008056:	682c      	ldr	r4, [r5, #0]
90008058:	f3bf 8f5b 	dmb	ish
9000805c:	f014 0401 	ands.w	r4, r4, #1
90008060:	d002      	beq.n	90008068 <_Z23getFont_verdana_40_4bppv+0x18>
    return verdana_40_4bpp;
}
90008062:	4815      	ldr	r0, [pc, #84]	; (900080b8 <_Z23getFont_verdana_40_4bppv+0x68>)
90008064:	b00f      	add	sp, #60	; 0x3c
90008066:	bd30      	pop	{r4, r5, pc}
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 40, 0, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
90008068:	4628      	mov	r0, r5
9000806a:	f01f fac6 	bl	900275fa <__cxa_guard_acquire>
9000806e:	2800      	cmp	r0, #0
90008070:	d0f7      	beq.n	90008062 <_Z23getFont_verdana_40_4bppv+0x12>
90008072:	213f      	movs	r1, #63	; 0x3f
90008074:	2201      	movs	r2, #1
90008076:	2328      	movs	r3, #40	; 0x28
90008078:	2004      	movs	r0, #4
9000807a:	9204      	str	r2, [sp, #16]
9000807c:	9300      	str	r3, [sp, #0]
9000807e:	9003      	str	r0, [sp, #12]
90008080:	480d      	ldr	r0, [pc, #52]	; (900080b8 <_Z23getFont_verdana_40_4bppv+0x68>)
90008082:	e9cd 1409 	strd	r1, r4, [sp, #36]	; 0x24
90008086:	490d      	ldr	r1, [pc, #52]	; (900080bc <_Z23getFont_verdana_40_4bppv+0x6c>)
90008088:	9108      	str	r1, [sp, #32]
9000808a:	490d      	ldr	r1, [pc, #52]	; (900080c0 <_Z23getFont_verdana_40_4bppv+0x70>)
9000808c:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
90008090:	9107      	str	r1, [sp, #28]
90008092:	490c      	ldr	r1, [pc, #48]	; (900080c4 <_Z23getFont_verdana_40_4bppv+0x74>)
90008094:	e9cd 4405 	strd	r4, r4, [sp, #20]
90008098:	e9cd 4401 	strd	r4, r4, [sp, #4]
9000809c:	f7fd fcae 	bl	900059fc <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
900080a0:	4809      	ldr	r0, [pc, #36]	; (900080c8 <_Z23getFont_verdana_40_4bppv+0x78>)
900080a2:	f01f faf5 	bl	90027690 <atexit>
900080a6:	4628      	mov	r0, r5
900080a8:	f01f fab3 	bl	90027612 <__cxa_guard_release>
}
900080ac:	4802      	ldr	r0, [pc, #8]	; (900080b8 <_Z23getFont_verdana_40_4bppv+0x68>)
900080ae:	b00f      	add	sp, #60	; 0x3c
900080b0:	bd30      	pop	{r4, r5, pc}
900080b2:	bf00      	nop
900080b4:	2400d150 	.word	0x2400d150
900080b8:	2400d154 	.word	0x2400d154
900080bc:	9002c948 	.word	0x9002c948
900080c0:	9002c954 	.word	0x9002c954
900080c4:	90202188 	.word	0x90202188
900080c8:	9000804d 	.word	0x9000804d

900080cc <_ZNK8touchgfx4Font12getGSUBTableEv>:
     * @return The GSUB table or null if font has GSUB no table.
     */
    virtual const uint16_t* getGSUBTable() const
    {
        return 0;
    }
900080cc:	2000      	movs	r0, #0
900080ce:	4770      	bx	lr

900080d0 <_ZNK8touchgfx4Font23getContextualFormsTableEv>:
     * @return The FontContextualFormsTable or null if the font has no table.
     */
    virtual const FontContextualFormsTable* getContextualFormsTable() const
    {
        return 0;
    }
900080d0:	2000      	movs	r0, #0
900080d2:	4770      	bx	lr

900080d4 <_ZNK8touchgfx4Font14getStringWidthEPKtz>:
#include <touchgfx/hal/HAL.hpp>
#include <touchgfx/lcd/LCD.hpp>
#include <texts/TypedTextDatabase.hpp>

uint16_t touchgfx::Font::getStringWidth(const touchgfx::Unicode::UnicodeChar* text, ...) const
{
900080d4:	b40e      	push	{r1, r2, r3}
900080d6:	b500      	push	{lr}
900080d8:	b082      	sub	sp, #8
    va_list pArg;
    va_start(pArg, text);
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
900080da:	2100      	movs	r1, #0
{
900080dc:	ab03      	add	r3, sp, #12
900080de:	f853 2b04 	ldr.w	r2, [r3], #4
    va_start(pArg, text);
900080e2:	9301      	str	r3, [sp, #4]
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
900080e4:	f010 ff6e 	bl	90018fc4 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
    va_end(pArg);
    return width;
}
900080e8:	b002      	add	sp, #8
900080ea:	f85d eb04 	ldr.w	lr, [sp], #4
900080ee:	b003      	add	sp, #12
900080f0:	4770      	bx	lr
900080f2:	bf00      	nop

900080f4 <_ZNK8touchgfx4Font14getStringWidthEhPKtz>:

uint16_t touchgfx::Font::getStringWidth(touchgfx::TextDirection textDirection, const touchgfx::Unicode::UnicodeChar* text, ...) const
{
900080f4:	b40c      	push	{r2, r3}
900080f6:	b500      	push	{lr}
900080f8:	b083      	sub	sp, #12
900080fa:	ab04      	add	r3, sp, #16
900080fc:	f853 2b04 	ldr.w	r2, [r3], #4
    va_list pArg;
    va_start(pArg, text);
90008100:	9301      	str	r3, [sp, #4]
    uint16_t width = getStringWidthLTR(textDirection, text, pArg);
90008102:	f010 ff5f 	bl	90018fc4 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
    va_end(pArg);
    return width;
}
90008106:	b003      	add	sp, #12
90008108:	f85d eb04 	ldr.w	lr, [sp], #4
9000810c:	b002      	add	sp, #8
9000810e:	4770      	bx	lr

90008110 <_ZN8touchgfx12TextProvider15getNextLigatureEh>:

touchgfx::Unicode::UnicodeChar touchgfx::TextProvider::getNextLigature(TextDirection direction)
{
    if (fontGsubTable && nextCharacters.peekChar())
90008110:	6c43      	ldr	r3, [r0, #68]	; 0x44
{
90008112:	b510      	push	{r4, lr}
90008114:	4604      	mov	r4, r0
    if (fontGsubTable && nextCharacters.peekChar())
90008116:	b133      	cbz	r3, 90008126 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x16>
            return used == size;
        }

        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
        {
            assert(used > 0);
90008118:	8f03      	ldrh	r3, [r0, #56]	; 0x38
9000811a:	b39b      	cbz	r3, 90008184 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x74>
            return buffer[pos];
9000811c:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
9000811e:	eb00 0343 	add.w	r3, r0, r3, lsl #1
90008122:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
90008124:	b923      	cbnz	r3, 90008130 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x20>
        {
            nextCharacters.replaceAt1(nextCharacters.peekChar());
            nextCharacters.replaceAt0(0x093F);
        }
    }
    return getNextChar();
90008126:	4620      	mov	r0, r4
}
90008128:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return getNextChar();
9000812c:	f012 b9fa 	b.w	9001a524 <_ZN8touchgfx12TextProvider11getNextCharEv>
        substituteGlyphs();
90008130:	f012 faf6 	bl	9001a720 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>
        }

        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar(uint16_t offset)
        {
            assert(offset < used);
90008134:	8f23      	ldrh	r3, [r4, #56]	; 0x38
90008136:	2b01      	cmp	r3, #1
90008138:	d92a      	bls.n	90008190 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x80>
            const uint16_t index = pos + offset;
9000813a:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
9000813c:	1c53      	adds	r3, r2, #1
9000813e:	b29b      	uxth	r3, r3
            return buffer[index < size ? index : index - size];
90008140:	2b09      	cmp	r3, #9
90008142:	d812      	bhi.n	9000816a <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x5a>
90008144:	eb04 0143 	add.w	r1, r4, r3, lsl #1
        if (nextCharacters.peekChar(1) == 0x093F) // Hindi I-matra
90008148:	f640 103f 	movw	r0, #2367	; 0x93f
9000814c:	8c49      	ldrh	r1, [r1, #34]	; 0x22
9000814e:	4281      	cmp	r1, r0
90008150:	d1e9      	bne.n	90008126 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x16>
            return buffer[pos];
90008152:	eb04 0142 	add.w	r1, r4, r2, lsl #1
90008156:	0052      	lsls	r2, r2, #1
90008158:	8c49      	ldrh	r1, [r1, #34]	; 0x22

        FORCE_INLINE_FUNCTION void replaceAt1(Unicode::UnicodeChar newChar)
        {
            assert(used > 1);
            const uint16_t index = pos + 1;
            buffer[index < size ? index : 0] = newChar;
9000815a:	eb04 0343 	add.w	r3, r4, r3, lsl #1
            buffer[pos] = newChar;
9000815e:	4422      	add	r2, r4
90008160:	f640 103f 	movw	r0, #2367	; 0x93f
            buffer[index < size ? index : 0] = newChar;
90008164:	8459      	strh	r1, [r3, #34]	; 0x22
            buffer[pos] = newChar;
90008166:	8450      	strh	r0, [r2, #34]	; 0x22
        }
90008168:	e7dd      	b.n	90008126 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x16>
            return buffer[index < size ? index : index - size];
9000816a:	eb04 0343 	add.w	r3, r4, r3, lsl #1
9000816e:	f640 113f 	movw	r1, #2367	; 0x93f
90008172:	89db      	ldrh	r3, [r3, #14]
90008174:	428b      	cmp	r3, r1
90008176:	d1d6      	bne.n	90008126 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x16>
            return buffer[pos];
90008178:	eb04 0142 	add.w	r1, r4, r2, lsl #1
9000817c:	2300      	movs	r3, #0
9000817e:	0052      	lsls	r2, r2, #1
90008180:	8c49      	ldrh	r1, [r1, #34]	; 0x22
        FORCE_INLINE_FUNCTION void replaceAt1(Unicode::UnicodeChar newChar)
90008182:	e7ea      	b.n	9000815a <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x4a>
            assert(used > 0);
90008184:	4b05      	ldr	r3, [pc, #20]	; (9000819c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x8c>)
90008186:	21c5      	movs	r1, #197	; 0xc5
90008188:	4a05      	ldr	r2, [pc, #20]	; (900081a0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x90>)
9000818a:	4806      	ldr	r0, [pc, #24]	; (900081a4 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x94>)
9000818c:	f01f fa62 	bl	90027654 <__assert_func>
            assert(offset < used);
90008190:	4b05      	ldr	r3, [pc, #20]	; (900081a8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x98>)
90008192:	21cb      	movs	r1, #203	; 0xcb
90008194:	4a05      	ldr	r2, [pc, #20]	; (900081ac <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x9c>)
90008196:	4803      	ldr	r0, [pc, #12]	; (900081a4 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x94>)
90008198:	f01f fa5c 	bl	90027654 <__assert_func>
9000819c:	9002b348 	.word	0x9002b348
900081a0:	9002b354 	.word	0x9002b354
900081a4:	9002b400 	.word	0x9002b400
900081a8:	9002b44c 	.word	0x9002b44c
900081ac:	9002b45c 	.word	0x9002b45c

900081b0 <_ZN8touchgfx12TextProvider18initializeInternalEv>:

void touchgfx::TextProvider::initializeInternal()
{
    fillInputBuffer();
900081b0:	f012 b981 	b.w	9001a4b6 <_ZN8touchgfx12TextProvider15fillInputBufferEv>

900081b4 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>:
}

void touchgfx::LCD::drawString(touchgfx::Rect widgetArea, const touchgfx::Rect& invalidatedArea, const touchgfx::LCD::StringVisuals& stringVisuals, const touchgfx::Unicode::UnicodeChar* format, ...)
{
900081b4:	b510      	push	{r4, lr}
900081b6:	b086      	sub	sp, #24
900081b8:	f10d 0c08 	add.w	ip, sp, #8
    va_list pArg;
    va_start(pArg, format);
900081bc:	ac0a      	add	r4, sp, #40	; 0x28
{
900081be:	e88c 0006 	stmia.w	ip, {r1, r2}
    drawStringLTR(widgetArea, invalidatedArea, stringVisuals, format, pArg);
900081c2:	461a      	mov	r2, r3
900081c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
900081c6:	4661      	mov	r1, ip
900081c8:	9401      	str	r4, [sp, #4]
900081ca:	9300      	str	r3, [sp, #0]
900081cc:	9b08      	ldr	r3, [sp, #32]
    va_start(pArg, format);
900081ce:	9405      	str	r4, [sp, #20]
    drawStringLTR(widgetArea, invalidatedArea, stringVisuals, format, pArg);
900081d0:	f00f fb96 	bl	90017900 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>
    va_end(pArg);
}
900081d4:	b006      	add	sp, #24
900081d6:	bd10      	pop	{r4, pc}

900081d8 <_ZN8touchgfx5Texts11setLanguageEt>:
static const uint32_t* currentLanguageIndices = 0;

void touchgfx::Texts::setLanguage(touchgfx::LanguageId id)
{
    const touchgfx::TypedText::TypedTextData* currentLanguageTypedText = 0;
    if (id < 1)
900081d8:	b9e0      	cbnz	r0, 90008214 <_ZN8touchgfx5Texts11setLanguageEt+0x3c>
{
900081da:	b538      	push	{r3, r4, r5, lr}
    {
        if (languagesArray[id] != 0)
900081dc:	4b13      	ldr	r3, [pc, #76]	; (9000822c <_ZN8touchgfx5Texts11setLanguageEt+0x54>)
900081de:	681b      	ldr	r3, [r3, #0]
900081e0:	b1cb      	cbz	r3, 90008216 <_ZN8touchgfx5Texts11setLanguageEt+0x3e>
        {
            // Dynamic translation is added
            const TranslationHeader* translation = languagesArray[id];
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
900081e2:	4c13      	ldr	r4, [pc, #76]	; (90008230 <_ZN8touchgfx5Texts11setLanguageEt+0x58>)
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
900081e4:	4813      	ldr	r0, [pc, #76]	; (90008234 <_ZN8touchgfx5Texts11setLanguageEt+0x5c>)
900081e6:	e9d3 1200 	ldrd	r1, r2, [r3]
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
900081ea:	4419      	add	r1, r3
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
900081ec:	441a      	add	r2, r3
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
900081ee:	6021      	str	r1, [r4, #0]
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
900081f0:	6899      	ldr	r1, [r3, #8]
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
900081f2:	6002      	str	r2, [r0, #0]
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
900081f4:	185c      	adds	r4, r3, r1
        }
    }

    if (currentLanguageTypedText)
    {
        currentLanguage = id;
900081f6:	4b10      	ldr	r3, [pc, #64]	; (90008238 <_ZN8touchgfx5Texts11setLanguageEt+0x60>)
900081f8:	2200      	movs	r2, #0
900081fa:	801a      	strh	r2, [r3, #0]
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
                                                       TypedTextDatabase::getFonts(), TypedTextDatabase::getInstanceSize());
900081fc:	f000 f83a 	bl	90008274 <_ZN17TypedTextDatabase8getFontsEv>
90008200:	4605      	mov	r5, r0
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
90008202:	f000 f835 	bl	90008270 <_ZN17TypedTextDatabase15getInstanceSizeEv>
        typedTexts = data;
90008206:	4b0d      	ldr	r3, [pc, #52]	; (9000823c <_ZN8touchgfx5Texts11setLanguageEt+0x64>)
        fonts = f;
90008208:	4a0d      	ldr	r2, [pc, #52]	; (90008240 <_ZN8touchgfx5Texts11setLanguageEt+0x68>)
        typedTexts = data;
9000820a:	601c      	str	r4, [r3, #0]
        numberOfTypedTexts = n;
9000820c:	4b0d      	ldr	r3, [pc, #52]	; (90008244 <_ZN8touchgfx5Texts11setLanguageEt+0x6c>)
        fonts = f;
9000820e:	6015      	str	r5, [r2, #0]
        numberOfTypedTexts = n;
90008210:	8018      	strh	r0, [r3, #0]
    }
}
90008212:	bd38      	pop	{r3, r4, r5, pc}
90008214:	4770      	bx	lr
            currentLanguageTypedText = typedTextDatabaseArray[id];
90008216:	4c0c      	ldr	r4, [pc, #48]	; (90008248 <_ZN8touchgfx5Texts11setLanguageEt+0x70>)
            currentLanguagePtr = texts_all_languages;
90008218:	4905      	ldr	r1, [pc, #20]	; (90008230 <_ZN8touchgfx5Texts11setLanguageEt+0x58>)
            currentLanguageTypedText = typedTextDatabaseArray[id];
9000821a:	6824      	ldr	r4, [r4, #0]
            currentLanguagePtr = texts_all_languages;
9000821c:	480b      	ldr	r0, [pc, #44]	; (9000824c <_ZN8touchgfx5Texts11setLanguageEt+0x74>)
            currentLanguageIndices = staticLanguageIndices[id];
9000821e:	4b05      	ldr	r3, [pc, #20]	; (90008234 <_ZN8touchgfx5Texts11setLanguageEt+0x5c>)
90008220:	4a0b      	ldr	r2, [pc, #44]	; (90008250 <_ZN8touchgfx5Texts11setLanguageEt+0x78>)
            currentLanguagePtr = texts_all_languages;
90008222:	6008      	str	r0, [r1, #0]
            currentLanguageIndices = staticLanguageIndices[id];
90008224:	601a      	str	r2, [r3, #0]
    if (currentLanguageTypedText)
90008226:	2c00      	cmp	r4, #0
90008228:	d1e5      	bne.n	900081f6 <_ZN8touchgfx5Texts11setLanguageEt+0x1e>
}
9000822a:	bd38      	pop	{r3, r4, r5, pc}
9000822c:	2400d180 	.word	0x2400d180
90008230:	2400d184 	.word	0x2400d184
90008234:	2400d188 	.word	0x2400d188
90008238:	2400d18c 	.word	0x2400d18c
9000823c:	24028244 	.word	0x24028244
90008240:	2402824c 	.word	0x2402824c
90008244:	24028248 	.word	0x24028248
90008248:	90202260 	.word	0x90202260
9000824c:	902021c8 	.word	0x902021c8
90008250:	90202198 	.word	0x90202198

90008254 <_ZNK8touchgfx5Texts7getTextEt>:
    languagesArray[id] = (const TranslationHeader*)translation;
}

const touchgfx::Unicode::UnicodeChar* touchgfx::Texts::getText(TypedTextId id) const
{
    return &currentLanguagePtr[currentLanguageIndices[id]];
90008254:	4a04      	ldr	r2, [pc, #16]	; (90008268 <_ZNK8touchgfx5Texts7getTextEt+0x14>)
90008256:	4b05      	ldr	r3, [pc, #20]	; (9000826c <_ZNK8touchgfx5Texts7getTextEt+0x18>)
90008258:	6812      	ldr	r2, [r2, #0]
9000825a:	681b      	ldr	r3, [r3, #0]
9000825c:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
}
90008260:	eb03 0040 	add.w	r0, r3, r0, lsl #1
90008264:	4770      	bx	lr
90008266:	bf00      	nop
90008268:	2400d188 	.word	0x2400d188
9000826c:	2400d184 	.word	0x2400d184

90008270 <_ZN17TypedTextDatabase15getInstanceSizeEv>:
}

uint16_t getInstanceSize()
{
    return sizeof(typedText_database_DEFAULT) / sizeof(touchgfx::TypedText::TypedTextData);
}
90008270:	200c      	movs	r0, #12
90008272:	4770      	bx	lr

90008274 <_ZN17TypedTextDatabase8getFontsEv>:

const touchgfx::Font** getFonts()
{
    return touchgfx_fonts;
}
90008274:	4800      	ldr	r0, [pc, #0]	; (90008278 <_ZN17TypedTextDatabase8getFontsEv+0x4>)
90008276:	4770      	bx	lr
90008278:	2400d190 	.word	0x2400d190

9000827c <_GLOBAL__sub_I_touchgfx_fonts>:
    case 2:
        touchgfx_fonts[2] = &(getFont_verdana_10_4bpp());
        break;
    }
}
} // namespace TypedTextDatabase
9000827c:	b510      	push	{r4, lr}
};
9000827e:	4c05      	ldr	r4, [pc, #20]	; (90008294 <_GLOBAL__sub_I_touchgfx_fonts+0x18>)
    &(getFont_verdana_20_4bpp()),
90008280:	f7ff fea4 	bl	90007fcc <_Z23getFont_verdana_20_4bppv>
};
90008284:	6020      	str	r0, [r4, #0]
    &(getFont_verdana_40_4bpp()),
90008286:	f7ff fee3 	bl	90008050 <_Z23getFont_verdana_40_4bppv>
};
9000828a:	6060      	str	r0, [r4, #4]
    &(getFont_verdana_10_4bpp())
9000828c:	f7ff fe5e 	bl	90007f4c <_Z23getFont_verdana_10_4bppv>
};
90008290:	60a0      	str	r0, [r4, #8]
} // namespace TypedTextDatabase
90008292:	bd10      	pop	{r4, pc}
90008294:	2400d190 	.word	0x2400d190

90008298 <_ZN19FrontendApplicationD1Ev>:

class FrontendApplication : public FrontendApplicationBase
{
public:
    FrontendApplication(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplication() { }
90008298:	4770      	bx	lr
9000829a:	bf00      	nop

9000829c <_ZN19FrontendApplicationD0Ev>:
9000829c:	b510      	push	{r4, lr}
9000829e:	4604      	mov	r4, r0
900082a0:	f44f 71ae 	mov.w	r1, #348	; 0x15c
900082a4:	f01f f9a7 	bl	900275f6 <_ZdlPvj>
900082a8:	4620      	mov	r0, r4
900082aa:	bd10      	pop	{r4, pc}

900082ac <_ZN19FrontendApplication15handleTickEventEv>:

    virtual void handleTickEvent()
900082ac:	b510      	push	{r4, lr}
900082ae:	4604      	mov	r4, r0
    {
        model.tick();
900082b0:	f8d0 0158 	ldr.w	r0, [r0, #344]	; 0x158
900082b4:	f000 f822 	bl	900082fc <_ZN5Model4tickEv>
        FrontendApplicationBase::handleTickEvent();
900082b8:	4620      	mov	r0, r4
    }
900082ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        FrontendApplicationBase::handleTickEvent();
900082be:	f00f bfb9 	b.w	90018234 <_ZN8touchgfx11Application15handleTickEventEv>
900082c2:	bf00      	nop

900082c4 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>:
#include <gui/common/FrontendApplication.hpp>

FrontendApplication::FrontendApplication(Model& m, FrontendHeap& heap)
900082c4:	b510      	push	{r4, lr}
900082c6:	4604      	mov	r4, r0
    : FrontendApplicationBase(m, heap)
900082c8:	f7fd faf4 	bl	900058b4 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>
900082cc:	4b01      	ldr	r3, [pc, #4]	; (900082d4 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap+0x10>)
{

}
900082ce:	4620      	mov	r0, r4
    : FrontendApplicationBase(m, heap)
900082d0:	6023      	str	r3, [r4, #0]
}
900082d2:	bd10      	pop	{r4, pc}
900082d4:	9002b538 	.word	0x9002b538

900082d8 <_ZN13ModelListener14setTemperatureEi>:
    }
    virtual void setTemperature(int temperature) {};
900082d8:	4770      	bx	lr
900082da:	bf00      	nop

900082dc <_ZN13ModelListener11setHumidityEi>:
    virtual void setHumidity(int humidity) {};
900082dc:	4770      	bx	lr
900082de:	bf00      	nop

900082e0 <_ZN13ModelListener17setMaxTemperatureEi>:
    virtual void setMaxTemperature(int temperature) {};
900082e0:	4770      	bx	lr
900082e2:	bf00      	nop

900082e4 <_ZN13ModelListener17setMinTemperatureEi>:
    virtual void setMinTemperature(int temperature) {};
900082e4:	4770      	bx	lr
900082e6:	bf00      	nop

900082e8 <_ZN13ModelListener23setTemperatureGraphDataEPsii>:
    virtual void setTemperatureGraphData(short int* data, int minYRange, int maxYRange) {};
900082e8:	4770      	bx	lr
900082ea:	bf00      	nop

900082ec <_ZN5ModelC1Ev>:
extern "C"
{
	extern ApplicationContext_TypeDef applicationContext;
}
#endif
Model::Model() : modelListener(0),
900082ec:	2200      	movs	r2, #0
		temperature(0),
900082ee:	e9c0 2200 	strd	r2, r2, [r0]
		maxTemperature(0),
		minTemperature(0),
900082f2:	e9c0 2202 	strd	r2, r2, [r0, #8]
		temperatureGraphData(NULL),
900082f6:	e9c0 2204 	strd	r2, r2, [r0, #16]
		humidity(0)
{

}
900082fa:	4770      	bx	lr

900082fc <_ZN5Model4tickEv>:

void Model::tick()
{
900082fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
90008300:	4604      	mov	r4, r0
#ifndef SIMULATOR
	modelListener->setHumidity(applicationContext.humidity);
90008302:	6800      	ldr	r0, [r0, #0]
90008304:	4922      	ldr	r1, [pc, #136]	; (90008390 <_ZN5Model4tickEv+0x94>)
90008306:	6803      	ldr	r3, [r0, #0]
90008308:	4d22      	ldr	r5, [pc, #136]	; (90008394 <_ZN5Model4tickEv+0x98>)
9000830a:	68da      	ldr	r2, [r3, #12]
9000830c:	428a      	cmp	r2, r1
9000830e:	d113      	bne.n	90008338 <_ZN5Model4tickEv+0x3c>

	modelListener->setTemperature(applicationContext.temperature);
90008310:	689a      	ldr	r2, [r3, #8]
90008312:	4921      	ldr	r1, [pc, #132]	; (90008398 <_ZN5Model4tickEv+0x9c>)
90008314:	428a      	cmp	r2, r1
90008316:	d117      	bne.n	90008348 <_ZN5Model4tickEv+0x4c>
	modelListener->setMaxTemperature(applicationContext.maxTemperature);
90008318:	691a      	ldr	r2, [r3, #16]
9000831a:	4920      	ldr	r1, [pc, #128]	; (9000839c <_ZN5Model4tickEv+0xa0>)
9000831c:	428a      	cmp	r2, r1
9000831e:	d11b      	bne.n	90008358 <_ZN5Model4tickEv+0x5c>
	modelListener->setMinTemperature(applicationContext.minTemperature);
90008320:	695e      	ldr	r6, [r3, #20]
90008322:	4f1f      	ldr	r7, [pc, #124]	; (900083a0 <_ZN5Model4tickEv+0xa4>)
90008324:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
90008328:	42be      	cmp	r6, r7
9000832a:	d120      	bne.n	9000836e <_ZN5Model4tickEv+0x72>

	modelListener->setTemperatureGraphData(&applicationContext.temperatureData[0], applicationContext.minTemperature, applicationContext.maxTemperature);
9000832c:	699c      	ldr	r4, [r3, #24]
9000832e:	4b1d      	ldr	r3, [pc, #116]	; (900083a4 <_ZN5Model4tickEv+0xa8>)
90008330:	429c      	cmp	r4, r3
90008332:	d126      	bne.n	90008382 <_ZN5Model4tickEv+0x86>

	#endif
}
90008334:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	modelListener->setHumidity(applicationContext.humidity);
90008338:	7969      	ldrb	r1, [r5, #5]
9000833a:	4790      	blx	r2
	modelListener->setTemperature(applicationContext.temperature);
9000833c:	6820      	ldr	r0, [r4, #0]
9000833e:	4916      	ldr	r1, [pc, #88]	; (90008398 <_ZN5Model4tickEv+0x9c>)
90008340:	6803      	ldr	r3, [r0, #0]
90008342:	689a      	ldr	r2, [r3, #8]
90008344:	428a      	cmp	r2, r1
90008346:	d0e7      	beq.n	90008318 <_ZN5Model4tickEv+0x1c>
90008348:	7929      	ldrb	r1, [r5, #4]
9000834a:	4790      	blx	r2
	modelListener->setMaxTemperature(applicationContext.maxTemperature);
9000834c:	6820      	ldr	r0, [r4, #0]
9000834e:	4913      	ldr	r1, [pc, #76]	; (9000839c <_ZN5Model4tickEv+0xa0>)
90008350:	6803      	ldr	r3, [r0, #0]
90008352:	691a      	ldr	r2, [r3, #16]
90008354:	428a      	cmp	r2, r1
90008356:	d0e3      	beq.n	90008320 <_ZN5Model4tickEv+0x24>
90008358:	f9b5 1000 	ldrsh.w	r1, [r5]
9000835c:	4790      	blx	r2
	modelListener->setMinTemperature(applicationContext.minTemperature);
9000835e:	6820      	ldr	r0, [r4, #0]
90008360:	4f0f      	ldr	r7, [pc, #60]	; (900083a0 <_ZN5Model4tickEv+0xa4>)
90008362:	6803      	ldr	r3, [r0, #0]
90008364:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
90008368:	695e      	ldr	r6, [r3, #20]
9000836a:	42be      	cmp	r6, r7
9000836c:	d0de      	beq.n	9000832c <_ZN5Model4tickEv+0x30>
9000836e:	4611      	mov	r1, r2
90008370:	47b0      	blx	r6
	modelListener->setTemperatureGraphData(&applicationContext.temperatureData[0], applicationContext.minTemperature, applicationContext.maxTemperature);
90008372:	6820      	ldr	r0, [r4, #0]
90008374:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
90008378:	6803      	ldr	r3, [r0, #0]
9000837a:	699c      	ldr	r4, [r3, #24]
9000837c:	4b09      	ldr	r3, [pc, #36]	; (900083a4 <_ZN5Model4tickEv+0xa8>)
9000837e:	429c      	cmp	r4, r3
90008380:	d0d8      	beq.n	90008334 <_ZN5Model4tickEv+0x38>
90008382:	f9b5 3000 	ldrsh.w	r3, [r5]
90008386:	46a4      	mov	ip, r4
90008388:	4907      	ldr	r1, [pc, #28]	; (900083a8 <_ZN5Model4tickEv+0xac>)
}
9000838a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	modelListener->setTemperatureGraphData(&applicationContext.temperatureData[0], applicationContext.minTemperature, applicationContext.maxTemperature);
9000838e:	4760      	bx	ip
90008390:	900082dd 	.word	0x900082dd
90008394:	2400cdb0 	.word	0x2400cdb0
90008398:	900082d9 	.word	0x900082d9
9000839c:	900082e1 	.word	0x900082e1
900083a0:	900082e5 	.word	0x900082e5
900083a4:	900082e9 	.word	0x900082e9
900083a8:	2400cdb8 	.word	0x2400cdb8

900083ac <_ZN16Screen1PresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~Screen1Presenter() {};
900083ac:	4770      	bx	lr
900083ae:	bf00      	nop

900083b0 <_ZThn4_N16Screen1PresenterD1Ev>:
900083b0:	3804      	subs	r0, #4
900083b2:	4770      	bx	lr

900083b4 <_ZN16Screen1Presenter10deactivateEv>:
}

void Screen1Presenter::activate()
{

}
900083b4:	4770      	bx	lr
900083b6:	bf00      	nop

900083b8 <_ZN16Screen1Presenter14setTemperatureEi>:
{

}

void Screen1Presenter::setTemperature(int value) {
	view.setTemperature(value);
900083b8:	68c0      	ldr	r0, [r0, #12]
900083ba:	6803      	ldr	r3, [r0, #0]
900083bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
900083be:	4718      	bx	r3

900083c0 <_ZN16Screen1Presenter11setHumidityEi>:
}
void Screen1Presenter::setHumidity(int value) {
	view.setHumidity(value);
900083c0:	68c0      	ldr	r0, [r0, #12]
900083c2:	6803      	ldr	r3, [r0, #0]
900083c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
900083c6:	4718      	bx	r3

900083c8 <_ZN16Screen1PresenterD0Ev>:
900083c8:	b510      	push	{r4, lr}
900083ca:	4604      	mov	r4, r0
900083cc:	2110      	movs	r1, #16
900083ce:	f01f f912 	bl	900275f6 <_ZdlPvj>
900083d2:	4620      	mov	r0, r4
900083d4:	bd10      	pop	{r4, pc}
900083d6:	bf00      	nop

900083d8 <_ZThn4_N16Screen1PresenterD0Ev>:
900083d8:	b500      	push	{lr}
900083da:	3804      	subs	r0, #4
900083dc:	b083      	sub	sp, #12
900083de:	2110      	movs	r1, #16
900083e0:	9001      	str	r0, [sp, #4]
900083e2:	f01f f908 	bl	900275f6 <_ZdlPvj>
900083e6:	9801      	ldr	r0, [sp, #4]
900083e8:	b003      	add	sp, #12
900083ea:	f85d fb04 	ldr.w	pc, [sp], #4
900083ee:	bf00      	nop

900083f0 <_ZThn4_N16Screen1Presenter14setTemperatureEi>:
900083f0:	6880      	ldr	r0, [r0, #8]
900083f2:	6803      	ldr	r3, [r0, #0]
900083f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
900083f6:	4718      	bx	r3

900083f8 <_ZThn4_N16Screen1Presenter11setHumidityEi>:
900083f8:	6880      	ldr	r0, [r0, #8]
900083fa:	6803      	ldr	r3, [r0, #0]
900083fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
900083fe:	4718      	bx	r3

90008400 <_ZN16Screen1PresenterC1ER11Screen1View>:
    : view(v)
90008400:	4a06      	ldr	r2, [pc, #24]	; (9000841c <_ZN16Screen1PresenterC1ER11Screen1View+0x1c>)
90008402:	60c1      	str	r1, [r0, #12]
Screen1Presenter::Screen1Presenter(Screen1View& v)
90008404:	b410      	push	{r4}
    ModelListener() : model(0) {}
90008406:	2400      	movs	r4, #0
90008408:	6084      	str	r4, [r0, #8]
    : view(v)
9000840a:	f102 0408 	add.w	r4, r2, #8
9000840e:	3228      	adds	r2, #40	; 0x28
90008410:	e9c0 4200 	strd	r4, r2, [r0]
}
90008414:	f85d 4b04 	ldr.w	r4, [sp], #4
90008418:	4770      	bx	lr
9000841a:	bf00      	nop
9000841c:	9002b57c 	.word	0x9002b57c

90008420 <_ZN11Screen1View14tearDownScreenEv>:
}

void Screen1View::tearDownScreen()
{
    Screen1ViewBase::tearDownScreen();
}
90008420:	4770      	bx	lr
90008422:	bf00      	nop

90008424 <_ZN11Screen1ViewD1Ev>:

class Screen1View : public Screen1ViewBase
{
public:
    Screen1View();
    virtual ~Screen1View() {}
90008424:	4b03      	ldr	r3, [pc, #12]	; (90008434 <_ZN11Screen1ViewD1Ev+0x10>)
90008426:	b510      	push	{r4, lr}
90008428:	4604      	mov	r4, r0
9000842a:	6003      	str	r3, [r0, #0]
9000842c:	f7fd fb62 	bl	90005af4 <_ZN15Screen1ViewBaseD1Ev>
90008430:	4620      	mov	r0, r4
90008432:	bd10      	pop	{r4, pc}
90008434:	9002b5cc 	.word	0x9002b5cc

90008438 <_ZN11Screen1ViewD0Ev>:
90008438:	4b06      	ldr	r3, [pc, #24]	; (90008454 <_ZN11Screen1ViewD0Ev+0x1c>)
9000843a:	b510      	push	{r4, lr}
9000843c:	4604      	mov	r4, r0
9000843e:	6003      	str	r3, [r0, #0]
90008440:	f7fd fb58 	bl	90005af4 <_ZN15Screen1ViewBaseD1Ev>
90008444:	f44f 71f2 	mov.w	r1, #484	; 0x1e4
90008448:	4620      	mov	r0, r4
9000844a:	f01f f8d4 	bl	900275f6 <_ZdlPvj>
9000844e:	4620      	mov	r0, r4
90008450:	bd10      	pop	{r4, pc}
90008452:	bf00      	nop
90008454:	9002b5cc 	.word	0x9002b5cc

90008458 <_ZN11Screen1ViewC1Ev>:
Screen1View::Screen1View()
90008458:	b510      	push	{r4, lr}
9000845a:	4604      	mov	r4, r0
9000845c:	f7fd fd0a 	bl	90005e74 <_ZN15Screen1ViewBaseC1Ev>
90008460:	4b01      	ldr	r3, [pc, #4]	; (90008468 <_ZN11Screen1ViewC1Ev+0x10>)
}
90008462:	4620      	mov	r0, r4
Screen1View::Screen1View()
90008464:	6023      	str	r3, [r4, #0]
}
90008466:	bd10      	pop	{r4, pc}
90008468:	9002b5cc 	.word	0x9002b5cc

9000846c <_ZN11Screen1View11setupScreenEv>:
    Screen1ViewBase::setupScreen();
9000846c:	f7fd bb44 	b.w	90005af8 <_ZN15Screen1ViewBase11setupScreenEv>

90008470 <_ZN11Screen1View14setTemperatureEi>:

void Screen1View::setTemperature(int value) {
90008470:	b510      	push	{r4, lr}
90008472:	4604      	mov	r4, r0
90008474:	460b      	mov	r3, r1
	Unicode::snprintf(temperatureTextAreaBuffer, TEMPERATURETEXTAREA_SIZE, "%d", value);
90008476:	4a06      	ldr	r2, [pc, #24]	; (90008490 <_ZN11Screen1View14setTemperatureEi+0x20>)
90008478:	2104      	movs	r1, #4
9000847a:	f500 70e6 	add.w	r0, r0, #460	; 0x1cc
9000847e:	f012 fefd 	bl	9001b27c <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	temperatureTextArea.invalidate();
90008482:	f104 00f4 	add.w	r0, r4, #244	; 0xf4
};
90008486:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	temperatureTextArea.invalidate();
9000848a:	f010 bec6 	b.w	9001921a <_ZNK8touchgfx8Drawable10invalidateEv>
9000848e:	bf00      	nop
90008490:	9002b5c0 	.word	0x9002b5c0

90008494 <_ZN11Screen1View11setHumidityEi>:

void Screen1View::setHumidity(int value) {
90008494:	b510      	push	{r4, lr}
90008496:	4604      	mov	r4, r0
90008498:	460b      	mov	r3, r1
	Unicode::snprintf(humidityTextAreaBuffer, HUMIDITYTEXTAREA_SIZE, "%d", value);
9000849a:	4a06      	ldr	r2, [pc, #24]	; (900084b4 <_ZN11Screen1View11setHumidityEi+0x20>)
9000849c:	2104      	movs	r1, #4
9000849e:	f500 70e2 	add.w	r0, r0, #452	; 0x1c4
900084a2:	f012 feeb 	bl	9001b27c <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	humidityTextArea.invalidate();
900084a6:	f104 00a8 	add.w	r0, r4, #168	; 0xa8
};
900084aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	humidityTextArea.invalidate();
900084ae:	f010 beb4 	b.w	9001921a <_ZNK8touchgfx8Drawable10invalidateEv>
900084b2:	bf00      	nop
900084b4:	9002b5c0 	.word	0x9002b5c0

900084b8 <_ZN16Screen2PresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~Screen2Presenter() {};
900084b8:	4770      	bx	lr
900084ba:	bf00      	nop

900084bc <_ZThn4_N16Screen2PresenterD1Ev>:
900084bc:	3804      	subs	r0, #4
900084be:	4770      	bx	lr

900084c0 <_ZN16Screen2Presenter10deactivateEv>:
}

void Screen2Presenter::activate()
{

}
900084c0:	4770      	bx	lr
900084c2:	bf00      	nop

900084c4 <_ZN16Screen2Presenter14setTemperatureEi>:
{

}

void Screen2Presenter::setTemperature(int value) {
	view.setTemperature(value);
900084c4:	68c0      	ldr	r0, [r0, #12]
900084c6:	6803      	ldr	r3, [r0, #0]
900084c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
900084ca:	4718      	bx	r3

900084cc <_ZN16Screen2Presenter17setMaxTemperatureEi>:
};

void Screen2Presenter::setMaxTemperature(int value) {
	view.setMaxTemperature(value);
900084cc:	68c0      	ldr	r0, [r0, #12]
900084ce:	6803      	ldr	r3, [r0, #0]
900084d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
900084d2:	4718      	bx	r3

900084d4 <_ZN16Screen2Presenter17setMinTemperatureEi>:
};

void Screen2Presenter::setMinTemperature(int value) {
	view.setMinTemperature(value);
900084d4:	68c0      	ldr	r0, [r0, #12]
900084d6:	6803      	ldr	r3, [r0, #0]
900084d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
900084da:	4718      	bx	r3

900084dc <_ZN16Screen2Presenter23setTemperatureGraphDataEPsii>:
};

void Screen2Presenter::setTemperatureGraphData(short int* data, int minYRange, int maxYRange) {
	view.setTemperatureGraphData(data, minYRange, maxYRange);
900084dc:	68c0      	ldr	r0, [r0, #12]
void Screen2Presenter::setTemperatureGraphData(short int* data, int minYRange, int maxYRange) {
900084de:	b410      	push	{r4}
	view.setTemperatureGraphData(data, minYRange, maxYRange);
900084e0:	6804      	ldr	r4, [r0, #0]
900084e2:	6ba4      	ldr	r4, [r4, #56]	; 0x38
900084e4:	46a4      	mov	ip, r4
};
900084e6:	f85d 4b04 	ldr.w	r4, [sp], #4
	view.setTemperatureGraphData(data, minYRange, maxYRange);
900084ea:	4760      	bx	ip

900084ec <_ZN16Screen2PresenterD0Ev>:
900084ec:	b510      	push	{r4, lr}
900084ee:	4604      	mov	r4, r0
900084f0:	2110      	movs	r1, #16
900084f2:	f01f f880 	bl	900275f6 <_ZdlPvj>
900084f6:	4620      	mov	r0, r4
900084f8:	bd10      	pop	{r4, pc}
900084fa:	bf00      	nop

900084fc <_ZThn4_N16Screen2PresenterD0Ev>:
900084fc:	b500      	push	{lr}
900084fe:	3804      	subs	r0, #4
90008500:	b083      	sub	sp, #12
90008502:	2110      	movs	r1, #16
90008504:	9001      	str	r0, [sp, #4]
90008506:	f01f f876 	bl	900275f6 <_ZdlPvj>
9000850a:	9801      	ldr	r0, [sp, #4]
9000850c:	b003      	add	sp, #12
9000850e:	f85d fb04 	ldr.w	pc, [sp], #4
90008512:	bf00      	nop

90008514 <_ZThn4_N16Screen2Presenter14setTemperatureEi>:
90008514:	6880      	ldr	r0, [r0, #8]
90008516:	6803      	ldr	r3, [r0, #0]
90008518:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9000851a:	4718      	bx	r3

9000851c <_ZThn4_N16Screen2Presenter17setMaxTemperatureEi>:
9000851c:	6880      	ldr	r0, [r0, #8]
9000851e:	6803      	ldr	r3, [r0, #0]
90008520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90008522:	4718      	bx	r3

90008524 <_ZThn4_N16Screen2Presenter17setMinTemperatureEi>:
90008524:	6880      	ldr	r0, [r0, #8]
90008526:	6803      	ldr	r3, [r0, #0]
90008528:	6b5b      	ldr	r3, [r3, #52]	; 0x34
9000852a:	4718      	bx	r3

9000852c <_ZThn4_N16Screen2Presenter23setTemperatureGraphDataEPsii>:
9000852c:	6880      	ldr	r0, [r0, #8]
9000852e:	b410      	push	{r4}
90008530:	6804      	ldr	r4, [r0, #0]
90008532:	6ba4      	ldr	r4, [r4, #56]	; 0x38
90008534:	46a4      	mov	ip, r4
90008536:	f85d 4b04 	ldr.w	r4, [sp], #4
9000853a:	4760      	bx	ip

9000853c <_ZN16Screen2PresenterC1ER11Screen2View>:
    : view(v)
9000853c:	4a06      	ldr	r2, [pc, #24]	; (90008558 <_ZN16Screen2PresenterC1ER11Screen2View+0x1c>)
9000853e:	60c1      	str	r1, [r0, #12]
Screen2Presenter::Screen2Presenter(Screen2View& v)
90008540:	b410      	push	{r4}
90008542:	2400      	movs	r4, #0
90008544:	6084      	str	r4, [r0, #8]
    : view(v)
90008546:	f102 0408 	add.w	r4, r2, #8
9000854a:	3230      	adds	r2, #48	; 0x30
9000854c:	e9c0 4200 	strd	r4, r2, [r0]
}
90008550:	f85d 4b04 	ldr.w	r4, [sp], #4
90008554:	4770      	bx	lr
90008556:	bf00      	nop
90008558:	9002b600 	.word	0x9002b600

9000855c <_ZN11Screen2View14tearDownScreenEv>:
}

void Screen2View::tearDownScreen()
{
    Screen2ViewBase::tearDownScreen();
}
9000855c:	4770      	bx	lr
9000855e:	bf00      	nop

90008560 <_ZN11Screen2ViewD1Ev>:

class Screen2View : public Screen2ViewBase
{
public:
    Screen2View();
    virtual ~Screen2View() {}
90008560:	4b03      	ldr	r3, [pc, #12]	; (90008570 <_ZN11Screen2ViewD1Ev+0x10>)
90008562:	b510      	push	{r4, lr}
90008564:	4604      	mov	r4, r0
90008566:	6003      	str	r3, [r0, #0]
90008568:	f7fe f942 	bl	900067f0 <_ZN15Screen2ViewBaseD1Ev>
9000856c:	4620      	mov	r0, r4
9000856e:	bd10      	pop	{r4, pc}
90008570:	9002b654 	.word	0x9002b654

90008574 <_ZN11Screen2ViewD0Ev>:
90008574:	4b06      	ldr	r3, [pc, #24]	; (90008590 <_ZN11Screen2ViewD0Ev+0x1c>)
90008576:	b510      	push	{r4, lr}
90008578:	4604      	mov	r4, r0
9000857a:	6003      	str	r3, [r0, #0]
9000857c:	f7fe f938 	bl	900067f0 <_ZN15Screen2ViewBaseD1Ev>
90008580:	f242 014c 	movw	r1, #8268	; 0x204c
90008584:	4620      	mov	r0, r4
90008586:	f01f f836 	bl	900275f6 <_ZdlPvj>
9000858a:	4620      	mov	r0, r4
9000858c:	bd10      	pop	{r4, pc}
9000858e:	bf00      	nop
90008590:	9002b654 	.word	0x9002b654

90008594 <_ZN11Screen2ViewC1Ev>:
Screen2View::Screen2View()
90008594:	b510      	push	{r4, lr}
90008596:	4604      	mov	r4, r0
90008598:	f7fe fcfe 	bl	90006f98 <_ZN15Screen2ViewBaseC1Ev>
9000859c:	4b01      	ldr	r3, [pc, #4]	; (900085a4 <_ZN11Screen2ViewC1Ev+0x10>)
}
9000859e:	4620      	mov	r0, r4
Screen2View::Screen2View()
900085a0:	6023      	str	r3, [r4, #0]
}
900085a2:	bd10      	pop	{r4, pc}
900085a4:	9002b654 	.word	0x9002b654

900085a8 <_ZN11Screen2View11setupScreenEv>:
    Screen2ViewBase::setupScreen();
900085a8:	f7fe b8cc 	b.w	90006744 <_ZN15Screen2ViewBase11setupScreenEv>

900085ac <_ZN11Screen2View14setTemperatureEi>:

void Screen2View::setTemperature(int value) {
900085ac:	b510      	push	{r4, lr}
900085ae:	4604      	mov	r4, r0
900085b0:	460b      	mov	r3, r1
	Unicode::snprintf(temperatureTextAreaBuffer, TEMPERATURETEXTAREA_SIZE, "%d", value);
900085b2:	4a06      	ldr	r2, [pc, #24]	; (900085cc <_ZN11Screen2View14setTemperatureEi+0x20>)
900085b4:	2104      	movs	r1, #4
900085b6:	f200 400c 	addw	r0, r0, #1036	; 0x40c
900085ba:	f012 fe5f 	bl	9001b27c <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	temperatureTextArea.invalidate();
900085be:	f104 00f4 	add.w	r0, r4, #244	; 0xf4
};
900085c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	temperatureTextArea.invalidate();
900085c6:	f010 be28 	b.w	9001921a <_ZNK8touchgfx8Drawable10invalidateEv>
900085ca:	bf00      	nop
900085cc:	9002b5c0 	.word	0x9002b5c0

900085d0 <_ZN11Screen2View17setMaxTemperatureEi>:

void Screen2View::setMaxTemperature(int value) {
900085d0:	b510      	push	{r4, lr}
900085d2:	4604      	mov	r4, r0
900085d4:	460b      	mov	r3, r1
	Unicode::snprintf(maxTemperatureTextAreaBuffer, MAXTEMPERATURETEXTAREA_SIZE, "%d", value);
900085d6:	4a06      	ldr	r2, [pc, #24]	; (900085f0 <_ZN11Screen2View17setMaxTemperatureEi+0x20>)
900085d8:	2104      	movs	r1, #4
900085da:	f200 4014 	addw	r0, r0, #1044	; 0x414
900085de:	f012 fe4d 	bl	9001b27c <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	maxTemperatureTextArea.invalidate();
900085e2:	f504 70a0 	add.w	r0, r4, #320	; 0x140
};
900085e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	maxTemperatureTextArea.invalidate();
900085ea:	f010 be16 	b.w	9001921a <_ZNK8touchgfx8Drawable10invalidateEv>
900085ee:	bf00      	nop
900085f0:	9002b5c0 	.word	0x9002b5c0

900085f4 <_ZN11Screen2View17setMinTemperatureEi>:

void Screen2View::setMinTemperature(int value) {
900085f4:	b510      	push	{r4, lr}
900085f6:	4604      	mov	r4, r0
900085f8:	460b      	mov	r3, r1
	Unicode::snprintf(minTemperatureTextAreaBuffer, MINTEMPERATURETEXTAREA_SIZE, "%d", value);
900085fa:	4a06      	ldr	r2, [pc, #24]	; (90008614 <_ZN11Screen2View17setMinTemperatureEi+0x20>)
900085fc:	2104      	movs	r1, #4
900085fe:	f200 4004 	addw	r0, r0, #1028	; 0x404
90008602:	f012 fe3b 	bl	9001b27c <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	minTemperatureTextArea.invalidate();
90008606:	f104 00a8 	add.w	r0, r4, #168	; 0xa8
};
9000860a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	minTemperatureTextArea.invalidate();
9000860e:	f010 be04 	b.w	9001921a <_ZNK8touchgfx8Drawable10invalidateEv>
90008612:	bf00      	nop
90008614:	9002b5c0 	.word	0x9002b5c0

90008618 <_ZN11Screen2View23setTemperatureGraphDataEPsii>:

void Screen2View::setTemperatureGraphData(short int* data, int minYRange, int maxYRange) {
	if(!data) {
90008618:	b361      	cbz	r1, 90008674 <_ZN11Screen2View23setTemperatureGraphDataEPsii+0x5c>
void Screen2View::setTemperatureGraphData(short int* data, int minYRange, int maxYRange) {
9000861a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		return;
	}

	temperatureGraph.clear();
9000861e:	f500 77c6 	add.w	r7, r0, #396	; 0x18c
90008622:	4614      	mov	r4, r2
90008624:	4606      	mov	r6, r0
90008626:	4698      	mov	r8, r3
90008628:	4638      	mov	r0, r7
9000862a:	460d      	mov	r5, r1
	temperatureGraph.setGraphRangeY(minYRange - 1, maxYRange + 1);
9000862c:	3c01      	subs	r4, #1
	temperatureGraph.clear();
9000862e:	f00c fb6c 	bl	90014d0a <_ZN8touchgfx25GraphWrapAndOverwriteData5clearEv>
        return int2scaled(i, yScale);
90008632:	f8d6 11c0 	ldr.w	r1, [r6, #448]	; 0x1c0
        setGraphRangeYScaled(int2scaledY(min), int2scaledY(max));
90008636:	4638      	mov	r0, r7
90008638:	fb08 1201 	mla	r2, r8, r1, r1
9000863c:	fb04 f101 	mul.w	r1, r4, r1
90008640:	f00b fd24 	bl	9001408c <_ZN8touchgfx17AbstractDataGraph20setGraphRangeYScaledEii>

	const int size = 24;
	const int minAllowedTemperature = -100;
	for(int i = 0; data[i] != minAllowedTemperature && i < size; ++i) {
90008644:	f9b5 3000 	ldrsh.w	r3, [r5]
90008648:	f113 0f64 	cmn.w	r3, #100	; 0x64
9000864c:	d010      	beq.n	90008670 <_ZN11Screen2View23setTemperatureGraphDataEPsii+0x58>
9000864e:	2400      	movs	r4, #0
90008650:	e002      	b.n	90008658 <_ZN11Screen2View23setTemperatureGraphDataEPsii+0x40>
90008652:	f113 0f64 	cmn.w	r3, #100	; 0x64
90008656:	d00b      	beq.n	90008670 <_ZN11Screen2View23setTemperatureGraphDataEPsii+0x58>
        return i * scale;
90008658:	f8d6 11c0 	ldr.w	r1, [r6, #448]	; 0x1c0
9000865c:	3401      	adds	r4, #1
        return addDataPointScaled(int2scaledY(y));
9000865e:	4638      	mov	r0, r7
90008660:	fb03 f101 	mul.w	r1, r3, r1
90008664:	f00c f8f1 	bl	9001484a <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
90008668:	2c18      	cmp	r4, #24
9000866a:	f935 3f02 	ldrsh.w	r3, [r5, #2]!
9000866e:	d1f0      	bne.n	90008652 <_ZN11Screen2View23setTemperatureGraphDataEPsii+0x3a>
	  temperatureGraph.addDataPoint(data[i]);
	}
};
90008670:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
90008674:	4770      	bx	lr
90008676:	bf00      	nop

90008678 <FT5336_GetCapabilities>:
{
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  /* Store component's capabilities */
  Capabilities->MultiTouch = 1;
90008678:	f240 1c01 	movw	ip, #257	; 0x101
  Capabilities->Gesture    = 1;
  Capabilities->MaxTouch   = FT5336_MAX_NB_TOUCH;
9000867c:	2005      	movs	r0, #5
  Capabilities->MaxXl      = FT5336_MAX_X_LENGTH;
9000867e:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
  Capabilities->MaxYl      = FT5336_MAX_Y_LENGTH;
90008682:	f44f 7388 	mov.w	r3, #272	; 0x110
  Capabilities->MaxTouch   = FT5336_MAX_NB_TOUCH;
90008686:	7088      	strb	r0, [r1, #2]

  return FT5336_OK;
}
90008688:	2000      	movs	r0, #0
  Capabilities->MultiTouch = 1;
9000868a:	f8a1 c000 	strh.w	ip, [r1]
  Capabilities->MaxYl      = FT5336_MAX_Y_LENGTH;
9000868e:	e9c1 2301 	strd	r2, r3, [r1, #4]
}
90008692:	4770      	bx	lr

90008694 <FT5336_DeInit>:
  */
int32_t FT5336_DeInit(FT5336_Object_t *pObj)
{
  int32_t ret = FT5336_OK;

  if(pObj->IsInitialized == 1U)
90008694:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
90008698:	2b01      	cmp	r3, #1
9000869a:	d102      	bne.n	900086a2 <FT5336_DeInit+0xe>
  {
    pObj->IsInitialized = 0;
9000869c:	2300      	movs	r3, #0
9000869e:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  }

  return ret;
}
900086a2:	2000      	movs	r0, #0
900086a4:	4770      	bx	lr
900086a6:	bf00      	nop

900086a8 <FT5336_ITStatus>:
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  /* Always return FT5336_OK as feature not applicable to FT5336 */
  return FT5336_OK;
}
900086a8:	2000      	movs	r0, #0
900086aa:	4770      	bx	lr

900086ac <ReadRegWrap>:
  * @param  pData: The target register value to be written
  * @param  Length: buffer size to be written
  * @retval error status
  */
static int32_t ReadRegWrap(void *handle, uint8_t Reg, uint8_t* pData, uint16_t Length)
{
900086ac:	b410      	push	{r4}
  FT5336_Object_t *pObj = (FT5336_Object_t *)handle;

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
900086ae:	6904      	ldr	r4, [r0, #16]
900086b0:	8900      	ldrh	r0, [r0, #8]
900086b2:	46a4      	mov	ip, r4
}
900086b4:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
900086b8:	4760      	bx	ip
900086ba:	bf00      	nop

900086bc <WriteRegWrap>:
  * @param  pData: The target register value to be written
  * @param  Length: buffer size to be written
  * @retval error status
  */
static int32_t WriteRegWrap(void *handle, uint8_t Reg, uint8_t* pData, uint16_t Length)
{
900086bc:	b410      	push	{r4}
  FT5336_Object_t *pObj = (FT5336_Object_t *)handle;

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
900086be:	68c4      	ldr	r4, [r0, #12]
900086c0:	8900      	ldrh	r0, [r0, #8]
900086c2:	46a4      	mov	ip, r4
}
900086c4:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
900086c8:	4760      	bx	ip
900086ca:	bf00      	nop

900086cc <FT5336_GestureConfig>:
{
900086cc:	b570      	push	{r4, r5, r6, lr}
  ret = ft5336_radian_value(&pObj->Ctx, (uint8_t)GestureInit->Radian);
900086ce:	f100 0518 	add.w	r5, r0, #24
{
900086d2:	460e      	mov	r6, r1
  ret = ft5336_radian_value(&pObj->Ctx, (uint8_t)GestureInit->Radian);
900086d4:	7809      	ldrb	r1, [r1, #0]
900086d6:	4628      	mov	r0, r5
900086d8:	f000 f96c 	bl	900089b4 <ft5336_radian_value>
900086dc:	4604      	mov	r4, r0
  ret += ft5336_offset_left_right(&pObj->Ctx, (uint8_t)GestureInit->OffsetLeftRight);
900086de:	7931      	ldrb	r1, [r6, #4]
900086e0:	4628      	mov	r0, r5
900086e2:	f000 f975 	bl	900089d0 <ft5336_offset_left_right>
900086e6:	4404      	add	r4, r0
  ret += ft5336_offset_up_down(&pObj->Ctx, (uint8_t)GestureInit->OffsetUpDown);
900086e8:	7a31      	ldrb	r1, [r6, #8]
900086ea:	4628      	mov	r0, r5
900086ec:	f000 f97e 	bl	900089ec <ft5336_offset_up_down>
900086f0:	4404      	add	r4, r0
  ret += ft5336_disatnce_left_right(&pObj->Ctx, (uint8_t)GestureInit->DistanceLeftRight);
900086f2:	7b31      	ldrb	r1, [r6, #12]
900086f4:	4628      	mov	r0, r5
900086f6:	f000 f987 	bl	90008a08 <ft5336_disatnce_left_right>
  ret += ft5336_distance_up_down(&pObj->Ctx, (uint8_t)GestureInit->DistanceUpDown);
900086fa:	7c31      	ldrb	r1, [r6, #16]
  ret += ft5336_disatnce_left_right(&pObj->Ctx, (uint8_t)GestureInit->DistanceLeftRight);
900086fc:	4404      	add	r4, r0
  ret += ft5336_distance_up_down(&pObj->Ctx, (uint8_t)GestureInit->DistanceUpDown);
900086fe:	4628      	mov	r0, r5
90008700:	f000 f990 	bl	90008a24 <ft5336_distance_up_down>
90008704:	4603      	mov	r3, r0
  ret += ft5336_distance_zoom(&pObj->Ctx, (uint8_t)GestureInit->DistanceZoom);
90008706:	7d31      	ldrb	r1, [r6, #20]
90008708:	4628      	mov	r0, r5
  ret += ft5336_distance_up_down(&pObj->Ctx, (uint8_t)GestureInit->DistanceUpDown);
9000870a:	441c      	add	r4, r3
  ret += ft5336_distance_zoom(&pObj->Ctx, (uint8_t)GestureInit->DistanceZoom);
9000870c:	f000 f998 	bl	90008a40 <ft5336_distance_zoom>
  if(ret != FT5336_OK)
90008710:	42c4      	cmn	r4, r0
}
90008712:	bf14      	ite	ne
90008714:	f04f 30ff 	movne.w	r0, #4294967295
90008718:	2000      	moveq	r0, #0
9000871a:	bd70      	pop	{r4, r5, r6, pc}

9000871c <FT5336_ReadID>:
  return ft5336_chip_id(&pObj->Ctx, (uint8_t *)Id);
9000871c:	3018      	adds	r0, #24
9000871e:	f000 b9ab 	b.w	90008a78 <ft5336_chip_id>
90008722:	bf00      	nop

90008724 <FT5336_GetState>:
{
90008724:	b530      	push	{r4, r5, lr}
  if(ft5336_td_status(&pObj->Ctx, &nb_touch) != FT5336_OK)
90008726:	f100 0518 	add.w	r5, r0, #24
{
9000872a:	b083      	sub	sp, #12
9000872c:	460c      	mov	r4, r1
  if(ft5336_td_status(&pObj->Ctx, &nb_touch) != FT5336_OK)
9000872e:	4628      	mov	r0, r5
90008730:	a901      	add	r1, sp, #4
90008732:	f000 f931 	bl	90008998 <ft5336_td_status>
90008736:	bb10      	cbnz	r0, 9000877e <FT5336_GetState+0x5a>
    if(nb_touch > FT5336_MAX_NB_TOUCH)
90008738:	f89d 3004 	ldrb.w	r3, [sp, #4]
  State->TouchDetected = (uint32_t)FT5336_DetectTouch(pObj);
9000873c:	2b05      	cmp	r3, #5
9000873e:	bf94      	ite	ls
90008740:	4619      	movls	r1, r3
90008742:	2100      	movhi	r1, #0
  if(ft5336_read_reg(&pObj->Ctx, FT5336_P1_XH_REG, data, (uint16_t)sizeof(data)) != FT5336_OK)
90008744:	2304      	movs	r3, #4
  State->TouchDetected = (uint32_t)FT5336_DetectTouch(pObj);
90008746:	6021      	str	r1, [r4, #0]
  if(ft5336_read_reg(&pObj->Ctx, FT5336_P1_XH_REG, data, (uint16_t)sizeof(data)) != FT5336_OK)
90008748:	4628      	mov	r0, r5
9000874a:	2103      	movs	r1, #3
9000874c:	eb0d 0203 	add.w	r2, sp, r3
90008750:	f000 f910 	bl	90008974 <ft5336_read_reg>
90008754:	b9b0      	cbnz	r0, 90008784 <FT5336_GetState+0x60>
    State->TouchX = (((uint32_t)data[0] & FT5336_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT5336_P1_XL_TP_BIT_MASK);
90008756:	f89d 2004 	ldrb.w	r2, [sp, #4]
    State->TouchY = (((uint32_t)data[2] & FT5336_P1_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[3] & FT5336_P1_YL_TP_BIT_MASK);
9000875a:	f89d 3006 	ldrb.w	r3, [sp, #6]
    State->TouchX = (((uint32_t)data[0] & FT5336_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT5336_P1_XL_TP_BIT_MASK);
9000875e:	0212      	lsls	r2, r2, #8
90008760:	f89d 1005 	ldrb.w	r1, [sp, #5]
    State->TouchY = (((uint32_t)data[2] & FT5336_P1_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[3] & FT5336_P1_YL_TP_BIT_MASK);
90008764:	021b      	lsls	r3, r3, #8
    State->TouchX = (((uint32_t)data[0] & FT5336_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT5336_P1_XL_TP_BIT_MASK);
90008766:	f402 6270 	and.w	r2, r2, #3840	; 0xf00
    State->TouchY = (((uint32_t)data[2] & FT5336_P1_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[3] & FT5336_P1_YL_TP_BIT_MASK);
9000876a:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
    State->TouchX = (((uint32_t)data[0] & FT5336_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT5336_P1_XL_TP_BIT_MASK);
9000876e:	430a      	orrs	r2, r1
    State->TouchY = (((uint32_t)data[2] & FT5336_P1_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[3] & FT5336_P1_YL_TP_BIT_MASK);
90008770:	f89d 1007 	ldrb.w	r1, [sp, #7]
90008774:	430b      	orrs	r3, r1
90008776:	e9c4 2301 	strd	r2, r3, [r4, #4]
}
9000877a:	b003      	add	sp, #12
9000877c:	bd30      	pop	{r4, r5, pc}
9000877e:	f04f 31ff 	mov.w	r1, #4294967295
90008782:	e7df      	b.n	90008744 <FT5336_GetState+0x20>
    ret = FT5336_ERROR;
90008784:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
90008788:	e7f7      	b.n	9000877a <FT5336_GetState+0x56>
9000878a:	bf00      	nop

9000878c <FT5336_GetMultiTouchState>:
{
9000878c:	b570      	push	{r4, r5, r6, lr}
  if(ft5336_td_status(&pObj->Ctx, &nb_touch) != FT5336_OK)
9000878e:	f100 0518 	add.w	r5, r0, #24
{
90008792:	b088      	sub	sp, #32
90008794:	460c      	mov	r4, r1
  if(ft5336_td_status(&pObj->Ctx, &nb_touch) != FT5336_OK)
90008796:	4628      	mov	r0, r5
90008798:	4669      	mov	r1, sp
9000879a:	f000 f8fd 	bl	90008998 <ft5336_td_status>
9000879e:	2800      	cmp	r0, #0
900087a0:	f040 809a 	bne.w	900088d8 <FT5336_GetMultiTouchState+0x14c>
    if(nb_touch > FT5336_MAX_NB_TOUCH)
900087a4:	f89d 3000 	ldrb.w	r3, [sp]
  State->TouchDetected = (uint32_t)FT5336_DetectTouch(pObj);
900087a8:	2b05      	cmp	r3, #5
900087aa:	bf94      	ite	ls
900087ac:	4619      	movls	r1, r3
900087ae:	2100      	movhi	r1, #0
900087b0:	6021      	str	r1, [r4, #0]
  if(ft5336_read_reg(&pObj->Ctx, FT5336_P1_XH_REG, data, (uint16_t)sizeof(data)) != FT5336_OK)
900087b2:	231e      	movs	r3, #30
900087b4:	466a      	mov	r2, sp
900087b6:	4628      	mov	r0, r5
900087b8:	2103      	movs	r1, #3
900087ba:	f000 f8db 	bl	90008974 <ft5336_read_reg>
900087be:	2800      	cmp	r0, #0
900087c0:	f040 808d 	bne.w	900088de <FT5336_GetMultiTouchState+0x152>
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
900087c4:	f89d 1000 	ldrb.w	r1, [sp]
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
900087c8:	f89d 3002 	ldrb.w	r3, [sp, #2]
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
900087cc:	020a      	lsls	r2, r1, #8
900087ce:	f89d 5001 	ldrb.w	r5, [sp, #1]
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
900087d2:	021b      	lsls	r3, r3, #8
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
900087d4:	f89d c007 	ldrb.w	ip, [sp, #7]
900087d8:	f402 6270 	and.w	r2, r2, #3840	; 0xf00
    State->TouchEvent[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_EF_BIT_MASK) >> FT5336_P1_XH_EF_BIT_POSITION);
900087dc:	0989      	lsrs	r1, r1, #6
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
900087de:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
    State->TouchArea[i] = ((uint32_t)data[(i*6U) + 5U] & FT5336_P1_MISC_BIT_MASK) >> FT5336_P1_MISC_BIT_POSITION;
900087e2:	f89d 6011 	ldrb.w	r6, [sp, #17]
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
900087e6:	432a      	orrs	r2, r5
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
900087e8:	f89d 5003 	ldrb.w	r5, [sp, #3]
    State->TouchEvent[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_EF_BIT_MASK) >> FT5336_P1_XH_EF_BIT_POSITION);
900087ec:	6421      	str	r1, [r4, #64]	; 0x40
    State->TouchArea[i] = ((uint32_t)data[(i*6U) + 5U] & FT5336_P1_MISC_BIT_MASK) >> FT5336_P1_MISC_BIT_POSITION;
900087ee:	0936      	lsrs	r6, r6, #4
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
900087f0:	432b      	orrs	r3, r5
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
900087f2:	6062      	str	r2, [r4, #4]
    State->TouchWeight[i] = ((uint32_t)data[(i*6U) + 4U] & FT5336_P1_WEIGHT_BIT_MASK);
900087f4:	f89d 2004 	ldrb.w	r2, [sp, #4]
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
900087f8:	61a3      	str	r3, [r4, #24]
    State->TouchArea[i] = ((uint32_t)data[(i*6U) + 5U] & FT5336_P1_MISC_BIT_MASK) >> FT5336_P1_MISC_BIT_POSITION;
900087fa:	f89d 3005 	ldrb.w	r3, [sp, #5]
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
900087fe:	f89d 1006 	ldrb.w	r1, [sp, #6]
    State->TouchArea[i] = ((uint32_t)data[(i*6U) + 5U] & FT5336_P1_MISC_BIT_MASK) >> FT5336_P1_MISC_BIT_POSITION;
90008802:	091b      	lsrs	r3, r3, #4
    State->TouchWeight[i] = ((uint32_t)data[(i*6U) + 4U] & FT5336_P1_WEIGHT_BIT_MASK);
90008804:	62e2      	str	r2, [r4, #44]	; 0x2c
    State->TouchArea[i] = ((uint32_t)data[(i*6U) + 5U] & FT5336_P1_MISC_BIT_MASK) >> FT5336_P1_MISC_BIT_POSITION;
90008806:	f89d 200b 	ldrb.w	r2, [sp, #11]
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
9000880a:	020d      	lsls	r5, r1, #8
    State->TouchArea[i] = ((uint32_t)data[(i*6U) + 5U] & FT5336_P1_MISC_BIT_MASK) >> FT5336_P1_MISC_BIT_POSITION;
9000880c:	6563      	str	r3, [r4, #84]	; 0x54
    State->TouchEvent[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_EF_BIT_MASK) >> FT5336_P1_XH_EF_BIT_POSITION);
9000880e:	0989      	lsrs	r1, r1, #6
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
90008810:	f89d 300c 	ldrb.w	r3, [sp, #12]
    State->TouchArea[i] = ((uint32_t)data[(i*6U) + 5U] & FT5336_P1_MISC_BIT_MASK) >> FT5336_P1_MISC_BIT_POSITION;
90008814:	0912      	lsrs	r2, r2, #4
    State->TouchEvent[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_EF_BIT_MASK) >> FT5336_P1_XH_EF_BIT_POSITION);
90008816:	6461      	str	r1, [r4, #68]	; 0x44
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
90008818:	f405 6570 	and.w	r5, r5, #3840	; 0xf00
    State->TouchWeight[i] = ((uint32_t)data[(i*6U) + 4U] & FT5336_P1_WEIGHT_BIT_MASK);
9000881c:	f89d 100a 	ldrb.w	r1, [sp, #10]
    State->TouchArea[i] = ((uint32_t)data[(i*6U) + 5U] & FT5336_P1_MISC_BIT_MASK) >> FT5336_P1_MISC_BIT_POSITION;
90008820:	65a2      	str	r2, [r4, #88]	; 0x58
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
90008822:	021a      	lsls	r2, r3, #8
    State->TouchWeight[i] = ((uint32_t)data[(i*6U) + 4U] & FT5336_P1_WEIGHT_BIT_MASK);
90008824:	6321      	str	r1, [r4, #48]	; 0x30
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
90008826:	ea45 050c 	orr.w	r5, r5, ip
9000882a:	f402 6170 	and.w	r1, r2, #3840	; 0xf00
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
9000882e:	f89d 2008 	ldrb.w	r2, [sp, #8]
    State->TouchEvent[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_EF_BIT_MASK) >> FT5336_P1_XH_EF_BIT_POSITION);
90008832:	099b      	lsrs	r3, r3, #6
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
90008834:	60a5      	str	r5, [r4, #8]
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
90008836:	0212      	lsls	r2, r2, #8
90008838:	f89d 5009 	ldrb.w	r5, [sp, #9]
    State->TouchEvent[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_EF_BIT_MASK) >> FT5336_P1_XH_EF_BIT_POSITION);
9000883c:	64a3      	str	r3, [r4, #72]	; 0x48
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
9000883e:	f402 6270 	and.w	r2, r2, #3840	; 0xf00
    State->TouchWeight[i] = ((uint32_t)data[(i*6U) + 4U] & FT5336_P1_WEIGHT_BIT_MASK);
90008842:	f89d 3010 	ldrb.w	r3, [sp, #16]
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
90008846:	432a      	orrs	r2, r5
    State->TouchWeight[i] = ((uint32_t)data[(i*6U) + 4U] & FT5336_P1_WEIGHT_BIT_MASK);
90008848:	6363      	str	r3, [r4, #52]	; 0x34
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
9000884a:	f89d 300e 	ldrb.w	r3, [sp, #14]
9000884e:	61e2      	str	r2, [r4, #28]
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
90008850:	f89d 200d 	ldrb.w	r2, [sp, #13]
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
90008854:	021b      	lsls	r3, r3, #8
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
90008856:	430a      	orrs	r2, r1
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
90008858:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
9000885c:	60e2      	str	r2, [r4, #12]
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
9000885e:	f89d 200f 	ldrb.w	r2, [sp, #15]
90008862:	4313      	orrs	r3, r2
90008864:	6223      	str	r3, [r4, #32]
    State->TouchArea[i] = ((uint32_t)data[(i*6U) + 5U] & FT5336_P1_MISC_BIT_MASK) >> FT5336_P1_MISC_BIT_POSITION;
90008866:	65e6      	str	r6, [r4, #92]	; 0x5c
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
90008868:	f89d 1012 	ldrb.w	r1, [sp, #18]
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
9000886c:	f89d 3014 	ldrb.w	r3, [sp, #20]
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
90008870:	020a      	lsls	r2, r1, #8
90008872:	f89d 5013 	ldrb.w	r5, [sp, #19]
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
90008876:	021b      	lsls	r3, r3, #8
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
90008878:	f402 6270 	and.w	r2, r2, #3840	; 0xf00
    State->TouchEvent[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_EF_BIT_MASK) >> FT5336_P1_XH_EF_BIT_POSITION);
9000887c:	0989      	lsrs	r1, r1, #6
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
9000887e:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
90008882:	432a      	orrs	r2, r5
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
90008884:	f89d 5015 	ldrb.w	r5, [sp, #21]
    State->TouchEvent[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_EF_BIT_MASK) >> FT5336_P1_XH_EF_BIT_POSITION);
90008888:	64e1      	str	r1, [r4, #76]	; 0x4c
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
9000888a:	432b      	orrs	r3, r5
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
9000888c:	f89d 1018 	ldrb.w	r1, [sp, #24]
90008890:	6122      	str	r2, [r4, #16]
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
90008892:	6263      	str	r3, [r4, #36]	; 0x24
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
90008894:	020b      	lsls	r3, r1, #8
    State->TouchWeight[i] = ((uint32_t)data[(i*6U) + 4U] & FT5336_P1_WEIGHT_BIT_MASK);
90008896:	f89d 2016 	ldrb.w	r2, [sp, #22]
    State->TouchEvent[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_EF_BIT_MASK) >> FT5336_P1_XH_EF_BIT_POSITION);
9000889a:	0989      	lsrs	r1, r1, #6
    State->TouchArea[i] = ((uint32_t)data[(i*6U) + 5U] & FT5336_P1_MISC_BIT_MASK) >> FT5336_P1_MISC_BIT_POSITION;
9000889c:	f89d 5017 	ldrb.w	r5, [sp, #23]
    State->TouchWeight[i] = ((uint32_t)data[(i*6U) + 4U] & FT5336_P1_WEIGHT_BIT_MASK);
900088a0:	63a2      	str	r2, [r4, #56]	; 0x38
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
900088a2:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
    State->TouchArea[i] = ((uint32_t)data[(i*6U) + 5U] & FT5336_P1_MISC_BIT_MASK) >> FT5336_P1_MISC_BIT_POSITION;
900088a6:	f89d 301d 	ldrb.w	r3, [sp, #29]
900088aa:	092d      	lsrs	r5, r5, #4
    State->TouchEvent[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_EF_BIT_MASK) >> FT5336_P1_XH_EF_BIT_POSITION);
900088ac:	6521      	str	r1, [r4, #80]	; 0x50
    State->TouchArea[i] = ((uint32_t)data[(i*6U) + 5U] & FT5336_P1_MISC_BIT_MASK) >> FT5336_P1_MISC_BIT_POSITION;
900088ae:	091b      	lsrs	r3, r3, #4
    State->TouchWeight[i] = ((uint32_t)data[(i*6U) + 4U] & FT5336_P1_WEIGHT_BIT_MASK);
900088b0:	f89d 101c 	ldrb.w	r1, [sp, #28]
    State->TouchArea[i] = ((uint32_t)data[(i*6U) + 5U] & FT5336_P1_MISC_BIT_MASK) >> FT5336_P1_MISC_BIT_POSITION;
900088b4:	6625      	str	r5, [r4, #96]	; 0x60
900088b6:	6663      	str	r3, [r4, #100]	; 0x64
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
900088b8:	f89d 301a 	ldrb.w	r3, [sp, #26]
    State->TouchWeight[i] = ((uint32_t)data[(i*6U) + 4U] & FT5336_P1_WEIGHT_BIT_MASK);
900088bc:	63e1      	str	r1, [r4, #60]	; 0x3c
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
900088be:	021b      	lsls	r3, r3, #8
900088c0:	f89d 101b 	ldrb.w	r1, [sp, #27]
900088c4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
900088c8:	430b      	orrs	r3, r1
900088ca:	62a3      	str	r3, [r4, #40]	; 0x28
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
900088cc:	f89d 3019 	ldrb.w	r3, [sp, #25]
900088d0:	4313      	orrs	r3, r2
900088d2:	6163      	str	r3, [r4, #20]
}
900088d4:	b008      	add	sp, #32
900088d6:	bd70      	pop	{r4, r5, r6, pc}
900088d8:	f04f 31ff 	mov.w	r1, #4294967295
900088dc:	e768      	b.n	900087b0 <FT5336_GetMultiTouchState+0x24>
    ret = FT5336_ERROR;
900088de:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
900088e2:	e7f7      	b.n	900088d4 <FT5336_GetMultiTouchState+0x148>

900088e4 <FT5336_GetGesture>:
  return ft5336_gest_id(&pObj->Ctx, GestureId);
900088e4:	3018      	adds	r0, #24
900088e6:	f000 b84d 	b.w	90008984 <ft5336_gest_id>
900088ea:	bf00      	nop

900088ec <FT5336_EnableIT>:
  return ft5336_g_mode(&pObj->Ctx, FT5336_G_MODE_INTERRUPT_TRIGGER);
900088ec:	2101      	movs	r1, #1
900088ee:	3018      	adds	r0, #24
900088f0:	f000 b8b4 	b.w	90008a5c <ft5336_g_mode>

900088f4 <FT5336_DisableIT>:
  return ft5336_g_mode(&pObj->Ctx, FT5336_G_MODE_INTERRUPT_POLLING);
900088f4:	2100      	movs	r1, #0
900088f6:	3018      	adds	r0, #24
900088f8:	f000 b8b0 	b.w	90008a5c <ft5336_g_mode>

900088fc <FT5336_Init>:
{
900088fc:	b570      	push	{r4, r5, r6, lr}
  if(pObj->IsInitialized == 0U)
900088fe:	f890 5024 	ldrb.w	r5, [r0, #36]	; 0x24
90008902:	b98d      	cbnz	r5, 90008928 <FT5336_Init+0x2c>
    pObj->IO.Init();
90008904:	4606      	mov	r6, r0
90008906:	4604      	mov	r4, r0
90008908:	f856 3b18 	ldr.w	r3, [r6], #24
9000890c:	4798      	blx	r3
  return ft5336_g_mode(&pObj->Ctx, FT5336_G_MODE_INTERRUPT_POLLING);
9000890e:	4629      	mov	r1, r5
90008910:	4630      	mov	r0, r6
90008912:	f000 f8a3 	bl	90008a5c <ft5336_g_mode>
  if(ret != FT5336_OK)
90008916:	3800      	subs	r0, #0
    pObj->IsInitialized = 1;
90008918:	f04f 0301 	mov.w	r3, #1
  if(ret != FT5336_OK)
9000891c:	bf18      	it	ne
9000891e:	2001      	movne	r0, #1
    pObj->IsInitialized = 1;
90008920:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
  if(ret != FT5336_OK)
90008924:	4240      	negs	r0, r0
}
90008926:	bd70      	pop	{r4, r5, r6, pc}
  int32_t ret = FT5336_OK;
90008928:	2000      	movs	r0, #0
}
9000892a:	bd70      	pop	{r4, r5, r6, pc}

9000892c <FT5336_ClearIT>:
9000892c:	2000      	movs	r0, #0
9000892e:	4770      	bx	lr

90008930 <FT5336_RegisterBusIO>:
  if (pObj == NULL)
90008930:	b1c0      	cbz	r0, 90008964 <FT5336_RegisterBusIO+0x34>
    pObj->IO.Address   = pIO->Address;
90008932:	890a      	ldrh	r2, [r1, #8]
{
90008934:	b430      	push	{r4, r5}
    pObj->IO.DeInit    = pIO->DeInit;
90008936:	e9d1 3400 	ldrd	r3, r4, [r1]
    pObj->IO.Address   = pIO->Address;
9000893a:	8102      	strh	r2, [r0, #8]
    pObj->IO.DeInit    = pIO->DeInit;
9000893c:	e9c0 3400 	strd	r3, r4, [r0]
    pObj->IO.WriteReg  = pIO->WriteReg;
90008940:	694a      	ldr	r2, [r1, #20]
90008942:	e9d1 5403 	ldrd	r5, r4, [r1, #12]
    pObj->Ctx.ReadReg  = ReadRegWrap;
90008946:	4909      	ldr	r1, [pc, #36]	; (9000896c <FT5336_RegisterBusIO+0x3c>)
    pObj->IO.WriteReg  = pIO->WriteReg;
90008948:	60c5      	str	r5, [r0, #12]
9000894a:	e9c0 4204 	strd	r4, r2, [r0, #16]
    pObj->Ctx.WriteReg = WriteRegWrap;
9000894e:	4a08      	ldr	r2, [pc, #32]	; (90008970 <FT5336_RegisterBusIO+0x40>)
    pObj->Ctx.handle   = pObj;
90008950:	e9c0 1007 	strd	r1, r0, [r0, #28]
    pObj->Ctx.WriteReg = WriteRegWrap;
90008954:	6182      	str	r2, [r0, #24]
    if(pObj->IO.Init != NULL)
90008956:	b10b      	cbz	r3, 9000895c <FT5336_RegisterBusIO+0x2c>
}
90008958:	bc30      	pop	{r4, r5}
      ret = pObj->IO.Init();
9000895a:	4718      	bx	r3
}
9000895c:	f04f 30ff 	mov.w	r0, #4294967295
90008960:	bc30      	pop	{r4, r5}
90008962:	4770      	bx	lr
90008964:	f04f 30ff 	mov.w	r0, #4294967295
90008968:	4770      	bx	lr
9000896a:	bf00      	nop
9000896c:	900086ad 	.word	0x900086ad
90008970:	900086bd 	.word	0x900086bd

90008974 <ft5336_read_reg>:
  * @param  pdata pointer to data to be read
  * @param  length Length of data to read   
  * @retval Component status
  */
int32_t ft5336_read_reg(ft5336_ctx_t *ctx, uint8_t reg, uint8_t* pdata, uint16_t length)
{
90008974:	b410      	push	{r4}
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
90008976:	e9d0 4001 	ldrd	r4, r0, [r0, #4]
9000897a:	46a4      	mov	ip, r4
}
9000897c:	f85d 4b04 	ldr.w	r4, [sp], #4
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
90008980:	4760      	bx	ip
90008982:	bf00      	nop

90008984 <ft5336_gest_id>:
  * @param  ctx Component context 
  * @param  value pointer to the value of FT5336_GEST_ID_REG register
  * @retval Component status
  */
int32_t  ft5336_gest_id(ft5336_ctx_t *ctx, uint8_t *value)
{
90008984:	b410      	push	{r4}
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
90008986:	2301      	movs	r3, #1
{
90008988:	460a      	mov	r2, r1
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
9000898a:	e9d0 4001 	ldrd	r4, r0, [r0, #4]
9000898e:	4619      	mov	r1, r3
90008990:	46a4      	mov	ip, r4
  return ft5336_read_reg(ctx, FT5336_GEST_ID_REG, (uint8_t *)value, 1);
}
90008992:	f85d 4b04 	ldr.w	r4, [sp], #4
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
90008996:	4760      	bx	ip

90008998 <ft5336_td_status>:
  * @param  ctx Component context 
  * @param  value pointer to the value of Touch Data Status register
  * @retval Component status
  */
int32_t  ft5336_td_status(ft5336_ctx_t *ctx, uint8_t *value)
{
90008998:	b538      	push	{r3, r4, r5, lr}
9000899a:	460c      	mov	r4, r1
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
9000899c:	2301      	movs	r3, #1
9000899e:	2102      	movs	r1, #2
900089a0:	4622      	mov	r2, r4
900089a2:	e9d0 5001 	ldrd	r5, r0, [r0, #4]
900089a6:	47a8      	blx	r5
  int32_t ret;
  
  ret = ft5336_read_reg(ctx, FT5336_TD_STAT_REG, (uint8_t *)value, 1);
  
  if(ret == 0)
900089a8:	b918      	cbnz	r0, 900089b2 <ft5336_td_status+0x1a>
  {
    *value &= FT5336_TD_STATUS_BIT_MASK; 
900089aa:	7823      	ldrb	r3, [r4, #0]
900089ac:	f003 030f 	and.w	r3, r3, #15
900089b0:	7023      	strb	r3, [r4, #0]
    *value = *value >> FT5336_TD_STATUS_BIT_POSITION; 
  }
  
  return ret;
}
900089b2:	bd38      	pop	{r3, r4, r5, pc}

900089b4 <ft5336_radian_value>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_RADIAN_VALUE_REG register
  * @retval Component status
  */
int32_t  ft5336_radian_value(ft5336_ctx_t *ctx, uint8_t value)
{
900089b4:	b510      	push	{r4, lr}
900089b6:	460c      	mov	r4, r1
900089b8:	b082      	sub	sp, #8
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
900089ba:	2301      	movs	r3, #1
900089bc:	2191      	movs	r1, #145	; 0x91
{
900089be:	f88d 4007 	strb.w	r4, [sp, #7]
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
900089c2:	f10d 0207 	add.w	r2, sp, #7
900089c6:	6804      	ldr	r4, [r0, #0]
900089c8:	6880      	ldr	r0, [r0, #8]
900089ca:	47a0      	blx	r4
  return ft5336_write_reg(ctx, FT5336_RADIAN_VALUE_REG, &value, 1);
}
900089cc:	b002      	add	sp, #8
900089ce:	bd10      	pop	{r4, pc}

900089d0 <ft5336_offset_left_right>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_OFFSET_LR_REG register
  * @retval Component status
  */
int32_t  ft5336_offset_left_right(ft5336_ctx_t *ctx, uint8_t value)
{
900089d0:	b510      	push	{r4, lr}
900089d2:	460c      	mov	r4, r1
900089d4:	b082      	sub	sp, #8
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
900089d6:	2301      	movs	r3, #1
900089d8:	2192      	movs	r1, #146	; 0x92
{
900089da:	f88d 4007 	strb.w	r4, [sp, #7]
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
900089de:	f10d 0207 	add.w	r2, sp, #7
900089e2:	6804      	ldr	r4, [r0, #0]
900089e4:	6880      	ldr	r0, [r0, #8]
900089e6:	47a0      	blx	r4
  return ft5336_write_reg(ctx, FT5336_OFFSET_LR_REG, &value, 1);
}
900089e8:	b002      	add	sp, #8
900089ea:	bd10      	pop	{r4, pc}

900089ec <ft5336_offset_up_down>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_OFFSET_UD_REG register
  * @retval Component status
  */
int32_t  ft5336_offset_up_down(ft5336_ctx_t *ctx, uint8_t value)
{
900089ec:	b510      	push	{r4, lr}
900089ee:	460c      	mov	r4, r1
900089f0:	b082      	sub	sp, #8
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
900089f2:	2301      	movs	r3, #1
900089f4:	2193      	movs	r1, #147	; 0x93
{
900089f6:	f88d 4007 	strb.w	r4, [sp, #7]
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
900089fa:	f10d 0207 	add.w	r2, sp, #7
900089fe:	6804      	ldr	r4, [r0, #0]
90008a00:	6880      	ldr	r0, [r0, #8]
90008a02:	47a0      	blx	r4
  return ft5336_write_reg(ctx, FT5336_OFFSET_UD_REG, &value, 1);
}
90008a04:	b002      	add	sp, #8
90008a06:	bd10      	pop	{r4, pc}

90008a08 <ft5336_disatnce_left_right>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_DISTANCE_LR_REG register
  * @retval Component status
  */
int32_t  ft5336_disatnce_left_right(ft5336_ctx_t *ctx, uint8_t value)
{
90008a08:	b510      	push	{r4, lr}
90008a0a:	460c      	mov	r4, r1
90008a0c:	b082      	sub	sp, #8
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
90008a0e:	2301      	movs	r3, #1
90008a10:	2194      	movs	r1, #148	; 0x94
{
90008a12:	f88d 4007 	strb.w	r4, [sp, #7]
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
90008a16:	f10d 0207 	add.w	r2, sp, #7
90008a1a:	6804      	ldr	r4, [r0, #0]
90008a1c:	6880      	ldr	r0, [r0, #8]
90008a1e:	47a0      	blx	r4
  return ft5336_write_reg(ctx, FT5336_DISTANCE_LR_REG, &value, 1);
}
90008a20:	b002      	add	sp, #8
90008a22:	bd10      	pop	{r4, pc}

90008a24 <ft5336_distance_up_down>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_DISTANCE_UD_REG register
  * @retval Component status
  */
int32_t  ft5336_distance_up_down(ft5336_ctx_t *ctx, uint8_t value)
{
90008a24:	b510      	push	{r4, lr}
90008a26:	460c      	mov	r4, r1
90008a28:	b082      	sub	sp, #8
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
90008a2a:	2301      	movs	r3, #1
90008a2c:	2195      	movs	r1, #149	; 0x95
{
90008a2e:	f88d 4007 	strb.w	r4, [sp, #7]
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
90008a32:	f10d 0207 	add.w	r2, sp, #7
90008a36:	6804      	ldr	r4, [r0, #0]
90008a38:	6880      	ldr	r0, [r0, #8]
90008a3a:	47a0      	blx	r4
  return ft5336_write_reg(ctx, FT5336_DISTANCE_UD_REG, &value, 1);
}
90008a3c:	b002      	add	sp, #8
90008a3e:	bd10      	pop	{r4, pc}

90008a40 <ft5336_distance_zoom>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_DISTANCE_ZOOM_REG register
  * @retval Component status
  */
int32_t  ft5336_distance_zoom(ft5336_ctx_t *ctx, uint8_t value)
{
90008a40:	b510      	push	{r4, lr}
90008a42:	460c      	mov	r4, r1
90008a44:	b082      	sub	sp, #8
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
90008a46:	2301      	movs	r3, #1
90008a48:	2196      	movs	r1, #150	; 0x96
{
90008a4a:	f88d 4007 	strb.w	r4, [sp, #7]
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
90008a4e:	f10d 0207 	add.w	r2, sp, #7
90008a52:	6804      	ldr	r4, [r0, #0]
90008a54:	6880      	ldr	r0, [r0, #8]
90008a56:	47a0      	blx	r4
  return ft5336_write_reg(ctx, FT5336_DISTANCE_ZOOM_REG, &value, 1);
}
90008a58:	b002      	add	sp, #8
90008a5a:	bd10      	pop	{r4, pc}

90008a5c <ft5336_g_mode>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_GMODE_REG register
  * @retval Component status
  */
int32_t  ft5336_g_mode(ft5336_ctx_t *ctx, uint8_t value)
{
90008a5c:	b510      	push	{r4, lr}
90008a5e:	460c      	mov	r4, r1
90008a60:	b082      	sub	sp, #8
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
90008a62:	2301      	movs	r3, #1
90008a64:	21a4      	movs	r1, #164	; 0xa4
{
90008a66:	f88d 4007 	strb.w	r4, [sp, #7]
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
90008a6a:	f10d 0207 	add.w	r2, sp, #7
90008a6e:	6804      	ldr	r4, [r0, #0]
90008a70:	6880      	ldr	r0, [r0, #8]
90008a72:	47a0      	blx	r4
  return ft5336_write_reg(ctx, FT5336_GMODE_REG, &value, 1);
}
90008a74:	b002      	add	sp, #8
90008a76:	bd10      	pop	{r4, pc}

90008a78 <ft5336_chip_id>:
  * @param  ctx Component context 
  * @param  value Pointer to FT5336_CHIP_ID_REG register value
  * @retval Component status
  */
int32_t  ft5336_chip_id(ft5336_ctx_t *ctx, uint8_t *value)
{
90008a78:	b410      	push	{r4}
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
90008a7a:	e9d0 4001 	ldrd	r4, r0, [r0, #4]
{
90008a7e:	460a      	mov	r2, r1
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
90008a80:	2301      	movs	r3, #1
90008a82:	46a4      	mov	ip, r4
90008a84:	21a8      	movs	r1, #168	; 0xa8
    *value &= FT5336_CHIP_ID_BIT_MASK; 
    *value = *value >> FT5336_CHIP_ID_BIT_POSITION; 
  }
  
  return ret;
}
90008a86:	f85d 4b04 	ldr.w	r4, [sp], #4
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
90008a8a:	4760      	bx	ip

90008a8c <MT48LC4M32B2_Init>:
  * @param  Ctx : Component object pointer
  * @param  pRegMode : Pointer to Register Mode stucture
  * @retval error status
  */
int32_t MT48LC4M32B2_Init(SDRAM_HandleTypeDef *Ctx, MT48LC4M32B2_Context_t *pRegMode) 
{
90008a8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  int32_t ret = MT48LC4M32B2_ERROR;
  
  /* Step 1: Configure a clock configuration enable command */
  if(MT48LC4M32B2_ClockEnable(Ctx, pRegMode->TargetBank) == MT48LC4M32B2_OK)
90008a8e:	680b      	ldr	r3, [r1, #0]
{
90008a90:	460d      	mov	r5, r1
  * @param  Interface : Could be FMC_SDRAM_CMD_TARGET_BANK1 or FMC_SDRAM_CMD_TARGET_BANK2
  * @retval error status
  */
int32_t MT48LC4M32B2_ClockEnable(SDRAM_HandleTypeDef *Ctx, uint32_t Interface) 
{
  Command.CommandMode            = MT48LC4M32B2_CLK_ENABLE_CMD;
90008a92:	4c2a      	ldr	r4, [pc, #168]	; (90008b3c <MT48LC4M32B2_Init+0xb0>)
  Command.CommandTarget          = Interface;
  Command.AutoRefreshNumber      = 1;
  Command.ModeRegisterDefinition = 0;

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
90008a94:	f64f 72ff 	movw	r2, #65535	; 0xffff
{
90008a98:	4607      	mov	r7, r0
  Command.CommandTarget          = Interface;
90008a9a:	6063      	str	r3, [r4, #4]
  Command.ModeRegisterDefinition = 0;
90008a9c:	2300      	movs	r3, #0
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
90008a9e:	4621      	mov	r1, r4
  Command.ModeRegisterDefinition = 0;
90008aa0:	60e3      	str	r3, [r4, #12]
  Command.CommandMode            = MT48LC4M32B2_CLK_ENABLE_CMD;
90008aa2:	2301      	movs	r3, #1
90008aa4:	6023      	str	r3, [r4, #0]
  Command.AutoRefreshNumber      = 1;
90008aa6:	60a3      	str	r3, [r4, #8]
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
90008aa8:	f005 fd2a 	bl	9000e500 <HAL_SDRAM_SendCommand>
90008aac:	2800      	cmp	r0, #0
90008aae:	d142      	bne.n	90008b36 <MT48LC4M32B2_Init+0xaa>
  * @retval MT48LC4M32B2_OK
  */
static int32_t MT48LC4M32B2_Delay(uint32_t Delay)
{  
  uint32_t tickstart;
  tickstart = HAL_GetTick();
90008ab0:	f000 ff46 	bl	90009940 <HAL_GetTick>
90008ab4:	4606      	mov	r6, r0
  while((HAL_GetTick() - tickstart) < Delay)
90008ab6:	f000 ff43 	bl	90009940 <HAL_GetTick>
90008aba:	4286      	cmp	r6, r0
90008abc:	d0fb      	beq.n	90008ab6 <MT48LC4M32B2_Init+0x2a>
  Command.CommandMode            = MT48LC4M32B2_PALL_CMD;
90008abe:	2302      	movs	r3, #2
    if(MT48LC4M32B2_Precharge(Ctx, pRegMode->TargetBank) == MT48LC4M32B2_OK)
90008ac0:	682a      	ldr	r2, [r5, #0]
  Command.AutoRefreshNumber      = 1;
90008ac2:	2601      	movs	r6, #1
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
90008ac4:	491d      	ldr	r1, [pc, #116]	; (90008b3c <MT48LC4M32B2_Init+0xb0>)
  Command.CommandMode            = MT48LC4M32B2_PALL_CMD;
90008ac6:	6023      	str	r3, [r4, #0]
  Command.ModeRegisterDefinition = 0;
90008ac8:	2300      	movs	r3, #0
  Command.CommandTarget          = Interface;
90008aca:	6062      	str	r2, [r4, #4]
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
90008acc:	4638      	mov	r0, r7
90008ace:	f64f 72ff 	movw	r2, #65535	; 0xffff
  Command.AutoRefreshNumber      = 1;
90008ad2:	60a6      	str	r6, [r4, #8]
  Command.ModeRegisterDefinition = 0;
90008ad4:	60e3      	str	r3, [r4, #12]
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
90008ad6:	f005 fd13 	bl	9000e500 <HAL_SDRAM_SendCommand>
90008ada:	bb60      	cbnz	r0, 90008b36 <MT48LC4M32B2_Init+0xaa>
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
90008adc:	4917      	ldr	r1, [pc, #92]	; (90008b3c <MT48LC4M32B2_Init+0xb0>)
  Command.CommandMode            = RefreshMode;
90008ade:	e9d5 3200 	ldrd	r3, r2, [r5]
  Command.ModeRegisterDefinition = 0;
90008ae2:	60e0      	str	r0, [r4, #12]
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
90008ae4:	4638      	mov	r0, r7
  Command.CommandMode            = RefreshMode;
90008ae6:	e9c4 2300 	strd	r2, r3, [r4]
  Command.AutoRefreshNumber      = 8;
90008aea:	2308      	movs	r3, #8
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
90008aec:	f64f 72ff 	movw	r2, #65535	; 0xffff
  Command.AutoRefreshNumber      = 8;
90008af0:	60a3      	str	r3, [r4, #8]
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
90008af2:	f005 fd05 	bl	9000e500 <HAL_SDRAM_SendCommand>
90008af6:	b9f0      	cbnz	r0, 90008b36 <MT48LC4M32B2_Init+0xaa>
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
90008af8:	4910      	ldr	r1, [pc, #64]	; (90008b3c <MT48LC4M32B2_Init+0xb0>)
90008afa:	4638      	mov	r0, r7
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
90008afc:	e9d5 3203 	ldrd	r3, r2, [r5, #12]
90008b00:	4313      	orrs	r3, r2
                     pRegMode->BurstType     |\
90008b02:	696a      	ldr	r2, [r5, #20]
90008b04:	4313      	orrs	r3, r2
                     pRegMode->CASLatency    |\
90008b06:	69aa      	ldr	r2, [r5, #24]
90008b08:	4313      	orrs	r3, r2
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
90008b0a:	69ea      	ldr	r2, [r5, #28]
90008b0c:	4313      	orrs	r3, r2
  Command.CommandTarget          = pRegMode->TargetBank;
90008b0e:	682a      	ldr	r2, [r5, #0]
  Command.ModeRegisterDefinition = tmpmrd;
90008b10:	60e3      	str	r3, [r4, #12]
  Command.CommandMode            = MT48LC4M32B2_LOAD_MODE_CMD;
90008b12:	2304      	movs	r3, #4
  Command.CommandTarget          = pRegMode->TargetBank;
90008b14:	e9c4 2601 	strd	r2, r6, [r4, #4]
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
90008b18:	f64f 72ff 	movw	r2, #65535	; 0xffff
  Command.CommandMode            = MT48LC4M32B2_LOAD_MODE_CMD;
90008b1c:	6023      	str	r3, [r4, #0]
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
90008b1e:	f005 fcef 	bl	9000e500 <HAL_SDRAM_SendCommand>
90008b22:	b940      	cbnz	r0, 90008b36 <MT48LC4M32B2_Init+0xaa>
  if(HAL_SDRAM_ProgramRefreshRate(Ctx, RefreshCount) != HAL_OK)
90008b24:	68a9      	ldr	r1, [r5, #8]
90008b26:	4638      	mov	r0, r7
90008b28:	f005 fd0a 	bl	9000e540 <HAL_SDRAM_ProgramRefreshRate>
90008b2c:	3800      	subs	r0, #0
90008b2e:	bf18      	it	ne
90008b30:	2001      	movne	r0, #1
90008b32:	4240      	negs	r0, r0
}
90008b34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  int32_t ret = MT48LC4M32B2_ERROR;
90008b36:	f04f 30ff 	mov.w	r0, #4294967295
}
90008b3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
90008b3c:	2400d19c 	.word	0x2400d19c

90008b40 <BSP_I2C4_DeInit>:
  */
int32_t BSP_I2C4_DeInit(void)
{
  int32_t ret  = BSP_ERROR_NONE;

  I2c4InitCounter--;
90008b40:	4a10      	ldr	r2, [pc, #64]	; (90008b84 <BSP_I2C4_DeInit+0x44>)
{
90008b42:	b508      	push	{r3, lr}
  I2c4InitCounter--;
90008b44:	6813      	ldr	r3, [r2, #0]
90008b46:	3b01      	subs	r3, #1
90008b48:	6013      	str	r3, [r2, #0]

  if (I2c4InitCounter == 0U)
90008b4a:	b10b      	cbz	r3, 90008b50 <BSP_I2C4_DeInit+0x10>
  int32_t ret  = BSP_ERROR_NONE;
90008b4c:	2000      	movs	r0, #0
      ret = BSP_ERROR_BUS_FAILURE;
    }
  }

  return ret;
}
90008b4e:	bd08      	pop	{r3, pc}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phi2c);

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = BUS_I2C4_SCL_PIN;
  HAL_GPIO_DeInit(BUS_I2C4_SCL_GPIO_PORT, gpio_init_structure.Pin );
90008b50:	f44f 5180 	mov.w	r1, #4096	; 0x1000
90008b54:	480c      	ldr	r0, [pc, #48]	; (90008b88 <BSP_I2C4_DeInit+0x48>)
90008b56:	f001 faaf 	bl	9000a0b8 <HAL_GPIO_DeInit>
  gpio_init_structure.Pin = BUS_I2C4_SDA_PIN;
  HAL_GPIO_DeInit(BUS_I2C4_SDA_GPIO_PORT, gpio_init_structure.Pin);
90008b5a:	480b      	ldr	r0, [pc, #44]	; (90008b88 <BSP_I2C4_DeInit+0x48>)
90008b5c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
90008b60:	f001 faaa 	bl	9000a0b8 <HAL_GPIO_DeInit>

  /* Disable I2C clock */
  BUS_I2C4_CLK_DISABLE();
90008b64:	4a09      	ldr	r2, [pc, #36]	; (90008b8c <BSP_I2C4_DeInit+0x4c>)
    if (HAL_I2C_DeInit(&hbus_i2c4) != HAL_OK)
90008b66:	480a      	ldr	r0, [pc, #40]	; (90008b90 <BSP_I2C4_DeInit+0x50>)
  BUS_I2C4_CLK_DISABLE();
90008b68:	f8d2 30f4 	ldr.w	r3, [r2, #244]	; 0xf4
90008b6c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
90008b70:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
    if (HAL_I2C_DeInit(&hbus_i2c4) != HAL_OK)
90008b74:	f001 fd48 	bl	9000a608 <HAL_I2C_DeInit>
90008b78:	2800      	cmp	r0, #0
90008b7a:	d0e7      	beq.n	90008b4c <BSP_I2C4_DeInit+0xc>
      ret = BSP_ERROR_BUS_FAILURE;
90008b7c:	f06f 0007 	mvn.w	r0, #7
}
90008b80:	bd08      	pop	{r3, pc}
90008b82:	bf00      	nop
90008b84:	2400d1ac 	.word	0x2400d1ac
90008b88:	58020c00 	.word	0x58020c00
90008b8c:	58024400 	.word	0x58024400
90008b90:	2400dbb4 	.word	0x2400dbb4

90008b94 <MX_I2C4_Init>:
  hI2c->Init.OwnAddress1      = 0;
90008b94:	2300      	movs	r3, #0
  hI2c->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
90008b96:	2201      	movs	r2, #1
{
90008b98:	b510      	push	{r4, lr}
  hI2c->Init.OwnAddress1      = 0;
90008b9a:	e9c0 1301 	strd	r1, r3, [r0, #4]
  hI2c->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
90008b9e:	e9c0 2303 	strd	r2, r3, [r0, #12]
  hI2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
90008ba2:	e9c0 3305 	strd	r3, r3, [r0, #20]
  hI2c->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
90008ba6:	e9c0 3307 	strd	r3, r3, [r0, #28]
{
90008baa:	4604      	mov	r4, r0
  if (HAL_I2C_Init(hI2c) != HAL_OK)
90008bac:	f001 fcd4 	bl	9000a558 <HAL_I2C_Init>
90008bb0:	b108      	cbz	r0, 90008bb6 <MX_I2C4_Init+0x22>
    status = HAL_ERROR;
90008bb2:	2001      	movs	r0, #1
}
90008bb4:	bd10      	pop	{r4, pc}
    if (HAL_I2CEx_ConfigAnalogFilter(hI2c, analog_filter) != HAL_OK)
90008bb6:	4601      	mov	r1, r0
90008bb8:	4620      	mov	r0, r4
90008bba:	f001 ffe3 	bl	9000ab84 <HAL_I2CEx_ConfigAnalogFilter>
90008bbe:	2800      	cmp	r0, #0
90008bc0:	d1f7      	bne.n	90008bb2 <MX_I2C4_Init+0x1e>
      if (HAL_I2CEx_ConfigDigitalFilter(hI2c, I2C_DIGITAL_FILTER_COEF) != HAL_OK)
90008bc2:	4601      	mov	r1, r0
90008bc4:	4620      	mov	r0, r4
90008bc6:	f002 f807 	bl	9000abd8 <HAL_I2CEx_ConfigDigitalFilter>
    status = HAL_ERROR;
90008bca:	3800      	subs	r0, #0
90008bcc:	bf18      	it	ne
90008bce:	2001      	movne	r0, #1
}
90008bd0:	bd10      	pop	{r4, pc}
90008bd2:	bf00      	nop

90008bd4 <BSP_I2C4_Init>:
  if (I2c4InitCounter == 0U)
90008bd4:	4b99      	ldr	r3, [pc, #612]	; (90008e3c <BSP_I2C4_Init+0x268>)
  hbus_i2c4.Instance = BUS_I2C4;
90008bd6:	489a      	ldr	r0, [pc, #616]	; (90008e40 <BSP_I2C4_Init+0x26c>)
90008bd8:	4a9a      	ldr	r2, [pc, #616]	; (90008e44 <BSP_I2C4_Init+0x270>)
  if (I2c4InitCounter == 0U)
90008bda:	6819      	ldr	r1, [r3, #0]
{
90008bdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90008be0:	b09f      	sub	sp, #124	; 0x7c
  hbus_i2c4.Instance = BUS_I2C4;
90008be2:	6002      	str	r2, [r0, #0]
  if (I2c4InitCounter == 0U)
90008be4:	9103      	str	r1, [sp, #12]
90008be6:	b119      	cbz	r1, 90008bf0 <BSP_I2C4_Init+0x1c>
  int32_t ret = BSP_ERROR_NONE;
90008be8:	2000      	movs	r0, #0
}
90008bea:	b01f      	add	sp, #124	; 0x7c
90008bec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    I2c4InitCounter++;
90008bf0:	2201      	movs	r2, #1
90008bf2:	601a      	str	r2, [r3, #0]
    if (HAL_I2C_GetState(&hbus_i2c4) == HAL_I2C_STATE_RESET)
90008bf4:	f001 ffc0 	bl	9000ab78 <HAL_I2C_GetState>
90008bf8:	2800      	cmp	r0, #0
90008bfa:	d1f5      	bne.n	90008be8 <BSP_I2C4_Init+0x14>
  BUS_I2C4_SCL_GPIO_CLK_ENABLE();
90008bfc:	4c92      	ldr	r4, [pc, #584]	; (90008e48 <BSP_I2C4_Init+0x274>)
  gpio_init_structure.Pin       = BUS_I2C4_SCL_PIN;
90008bfe:	f44f 5080 	mov.w	r0, #4096	; 0x1000
90008c02:	2112      	movs	r1, #18
  gpio_init_structure.Alternate = BUS_I2C4_SCL_AF;
90008c04:	2504      	movs	r5, #4
  BUS_I2C4_SCL_GPIO_CLK_ENABLE();
90008c06:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
  gpio_init_structure.Pin       = BUS_I2C4_SCL_PIN;
90008c0a:	2600      	movs	r6, #0
90008c0c:	2702      	movs	r7, #2
  BUS_I2C4_SCL_GPIO_CLK_ENABLE();
90008c0e:	f043 0308 	orr.w	r3, r3, #8
90008c12:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
90008c16:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
90008c1a:	f003 0308 	and.w	r3, r3, #8
90008c1e:	9315      	str	r3, [sp, #84]	; 0x54
90008c20:	9b15      	ldr	r3, [sp, #84]	; 0x54
  BUS_I2C4_SDA_GPIO_CLK_ENABLE();
90008c22:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
90008c26:	f043 0308 	orr.w	r3, r3, #8
90008c2a:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
90008c2e:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
  gpio_init_structure.Alternate = BUS_I2C4_SCL_AF;
90008c32:	951c      	str	r5, [sp, #112]	; 0x70
  BUS_I2C4_SDA_GPIO_CLK_ENABLE();
90008c34:	f003 0308 	and.w	r3, r3, #8
  gpio_init_structure.Pin       = BUS_I2C4_SCL_PIN;
90008c38:	e9cd 0118 	strd	r0, r1, [sp, #96]	; 0x60
  BUS_I2C4_SDA_GPIO_CLK_ENABLE();
90008c3c:	9316      	str	r3, [sp, #88]	; 0x58
  HAL_GPIO_Init(BUS_I2C4_SCL_GPIO_PORT, &gpio_init_structure);
90008c3e:	a918      	add	r1, sp, #96	; 0x60
90008c40:	4882      	ldr	r0, [pc, #520]	; (90008e4c <BSP_I2C4_Init+0x278>)
  BUS_I2C4_SDA_GPIO_CLK_ENABLE();
90008c42:	9b16      	ldr	r3, [sp, #88]	; 0x58
  gpio_init_structure.Pin       = BUS_I2C4_SCL_PIN;
90008c44:	e9cd 671a 	strd	r6, r7, [sp, #104]	; 0x68
  HAL_GPIO_Init(BUS_I2C4_SCL_GPIO_PORT, &gpio_init_structure);
90008c48:	f001 f904 	bl	90009e54 <HAL_GPIO_Init>
  gpio_init_structure.Pin       = BUS_I2C4_SDA_PIN;
90008c4c:	2312      	movs	r3, #18
90008c4e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  HAL_GPIO_Init(BUS_I2C4_SDA_GPIO_PORT, &gpio_init_structure);
90008c52:	a918      	add	r1, sp, #96	; 0x60
90008c54:	487d      	ldr	r0, [pc, #500]	; (90008e4c <BSP_I2C4_Init+0x278>)
  gpio_init_structure.Alternate = BUS_I2C4_SDA_AF;
90008c56:	951c      	str	r5, [sp, #112]	; 0x70
  gpio_init_structure.Pin       = BUS_I2C4_SDA_PIN;
90008c58:	e9cd 2318 	strd	r2, r3, [sp, #96]	; 0x60
90008c5c:	e9cd 671a 	strd	r6, r7, [sp, #104]	; 0x68
  HAL_GPIO_Init(BUS_I2C4_SDA_GPIO_PORT, &gpio_init_structure);
90008c60:	f001 f8f8 	bl	90009e54 <HAL_GPIO_Init>
  BUS_I2C4_CLK_ENABLE();
90008c64:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
90008c68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
90008c6c:	f8c4 30f4 	str.w	r3, [r4, #244]	; 0xf4
90008c70:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
90008c74:	f003 0380 	and.w	r3, r3, #128	; 0x80
90008c78:	9317      	str	r3, [sp, #92]	; 0x5c
90008c7a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  BUS_I2C4_FORCE_RESET();
90008c7c:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
90008c80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
90008c84:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
  BUS_I2C4_RELEASE_RESET();
90008c88:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
90008c8c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
90008c90:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
        if (MX_I2C4_Init(&hbus_i2c4, I2C_GetTiming(HAL_RCC_GetPCLK2Freq(), BUS_I2C4_FREQUENCY)) != HAL_OK)
90008c94:	f004 fc94 	bl	9000d5c0 <HAL_RCC_GetPCLK2Freq>
  if((clock_src_freq != 0U) && (i2c_freq != 0U))
90008c98:	2800      	cmp	r0, #0
90008c9a:	f000 81f6 	beq.w	9000908a <BSP_I2C4_Init+0x4b6>
  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
90008c9e:	4b6c      	ldr	r3, [pc, #432]	; (90008e50 <BSP_I2C4_Init+0x27c>)
  uint32_t prev_presc = I2C_PRESC_MAX;
90008ca0:	f04f 0b10 	mov.w	fp, #16
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
90008ca4:	9e03      	ldr	r6, [sp, #12]
  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
90008ca6:	eb03 0350 	add.w	r3, r3, r0, lsr #1
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90008caa:	f8df a1ac 	ldr.w	sl, [pc, #428]	; 90008e58 <BSP_I2C4_Init+0x284>
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
90008cae:	4635      	mov	r5, r6
  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
90008cb0:	fbb3 f7f0 	udiv	r7, r3, r0
    (int32_t)tafdel_max - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 4) * (int32_t)ti2cclk);
90008cb4:	00bb      	lsls	r3, r7, #2
  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
90008cb6:	9702      	str	r7, [sp, #8]
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
90008cb8:	eb07 0247 	add.w	r2, r7, r7, lsl #1
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
90008cbc:	f5c3 7cc3 	rsb	ip, r3, #390	; 0x186
90008cc0:	4b64      	ldr	r3, [pc, #400]	; (90008e54 <BSP_I2C4_Init+0x280>)
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
90008cc2:	f1c2 0432 	rsb	r4, r2, #50	; 0x32
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
90008cc6:	0079      	lsls	r1, r7, #1
90008cc8:	681b      	ldr	r3, [r3, #0]
90008cca:	ea2c 7cec 	bic.w	ip, ip, ip, asr #31
90008cce:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
90008cd2:	9113      	str	r1, [sp, #76]	; 0x4c
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
90008cd4:	4699      	mov	r9, r3
90008cd6:	930a      	str	r3, [sp, #40]	; 0x28
          if ((tsdadel >= (uint32_t)tsdadel_min) && (tsdadel <= (uint32_t)tsdadel_max))
90008cd8:	ebb4 0f47 	cmp.w	r4, r7, lsl #1
90008cdc:	46b8      	mov	r8, r7
90008cde:	eb07 0347 	add.w	r3, r7, r7, lsl #1
90008ce2:	bf94      	ite	ls
90008ce4:	2101      	movls	r1, #1
90008ce6:	2100      	movhi	r1, #0
90008ce8:	ebbc 0f47 	cmp.w	ip, r7, lsl #1
90008cec:	f001 0101 	and.w	r1, r1, #1
90008cf0:	eb07 0287 	add.w	r2, r7, r7, lsl #2
90008cf4:	bf38      	it	cc
90008cf6:	2100      	movcc	r1, #0
90008cf8:	429c      	cmp	r4, r3
90008cfa:	ebc7 00c7 	rsb	r0, r7, r7, lsl #3
90008cfe:	9105      	str	r1, [sp, #20]
90008d00:	bf8c      	ite	hi
90008d02:	2100      	movhi	r1, #0
90008d04:	2101      	movls	r1, #1
90008d06:	459c      	cmp	ip, r3
90008d08:	bf38      	it	cc
90008d0a:	2100      	movcc	r1, #0
90008d0c:	ebb4 0f87 	cmp.w	r4, r7, lsl #2
90008d10:	9106      	str	r1, [sp, #24]
90008d12:	eb07 0142 	add.w	r1, r7, r2, lsl #1
90008d16:	9104      	str	r1, [sp, #16]
90008d18:	eb07 0183 	add.w	r1, r7, r3, lsl #2
90008d1c:	9111      	str	r1, [sp, #68]	; 0x44
90008d1e:	bf94      	ite	ls
90008d20:	2101      	movls	r1, #1
90008d22:	2100      	movhi	r1, #0
90008d24:	ebbc 0f87 	cmp.w	ip, r7, lsl #2
90008d28:	f001 0e01 	and.w	lr, r1, #1
90008d2c:	bf38      	it	cc
90008d2e:	f04f 0e00 	movcc.w	lr, #0
90008d32:	4294      	cmp	r4, r2
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
90008d34:	f04f 0100 	mov.w	r1, #0
          if ((tsdadel >= (uint32_t)tsdadel_min) && (tsdadel <= (uint32_t)tsdadel_max))
90008d38:	f8cd e01c 	str.w	lr, [sp, #28]
90008d3c:	bf8c      	ite	hi
90008d3e:	f04f 0e00 	movhi.w	lr, #0
90008d42:	f04f 0e01 	movls.w	lr, #1
90008d46:	4594      	cmp	ip, r2
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
90008d48:	9101      	str	r1, [sp, #4]
          if ((tsdadel >= (uint32_t)tsdadel_min) && (tsdadel <= (uint32_t)tsdadel_max))
90008d4a:	bf38      	it	cc
90008d4c:	f04f 0e00 	movcc.w	lr, #0
90008d50:	ebb4 0f43 	cmp.w	r4, r3, lsl #1
90008d54:	bf98      	it	ls
90008d56:	2101      	movls	r1, #1
90008d58:	ebbc 0f43 	cmp.w	ip, r3, lsl #1
90008d5c:	f8cd e020 	str.w	lr, [sp, #32]
90008d60:	f001 0101 	and.w	r1, r1, #1
90008d64:	bf38      	it	cc
90008d66:	2100      	movcc	r1, #0
90008d68:	4284      	cmp	r4, r0
90008d6a:	9109      	str	r1, [sp, #36]	; 0x24
90008d6c:	4601      	mov	r1, r0
90008d6e:	bf8c      	ite	hi
90008d70:	2000      	movhi	r0, #0
90008d72:	2001      	movls	r0, #1
90008d74:	458c      	cmp	ip, r1
90008d76:	bf38      	it	cc
90008d78:	2000      	movcc	r0, #0
90008d7a:	ebb4 0fc7 	cmp.w	r4, r7, lsl #3
90008d7e:	900b      	str	r0, [sp, #44]	; 0x2c
90008d80:	bf94      	ite	ls
90008d82:	2001      	movls	r0, #1
90008d84:	2000      	movhi	r0, #0
90008d86:	ebbc 0fc7 	cmp.w	ip, r7, lsl #3
90008d8a:	f000 0001 	and.w	r0, r0, #1
90008d8e:	bf38      	it	cc
90008d90:	2000      	movcc	r0, #0
90008d92:	900c      	str	r0, [sp, #48]	; 0x30
90008d94:	eb07 00c7 	add.w	r0, r7, r7, lsl #3
90008d98:	4284      	cmp	r4, r0
90008d9a:	bf8c      	ite	hi
90008d9c:	f04f 0e00 	movhi.w	lr, #0
90008da0:	f04f 0e01 	movls.w	lr, #1
90008da4:	4584      	cmp	ip, r0
90008da6:	bf38      	it	cc
90008da8:	f04f 0e00 	movcc.w	lr, #0
90008dac:	ebb4 0f42 	cmp.w	r4, r2, lsl #1
90008db0:	4670      	mov	r0, lr
90008db2:	bf94      	ite	ls
90008db4:	2001      	movls	r0, #1
90008db6:	2000      	movhi	r0, #0
90008db8:	ebbc 0f42 	cmp.w	ip, r2, lsl #1
90008dbc:	f8cd e034 	str.w	lr, [sp, #52]	; 0x34
90008dc0:	f04f 0e00 	mov.w	lr, #0
90008dc4:	f000 0001 	and.w	r0, r0, #1
90008dc8:	bf38      	it	cc
90008dca:	2000      	movcc	r0, #0
90008dcc:	900e      	str	r0, [sp, #56]	; 0x38
90008dce:	9804      	ldr	r0, [sp, #16]
90008dd0:	4284      	cmp	r4, r0
90008dd2:	4602      	mov	r2, r0
90008dd4:	bf8c      	ite	hi
90008dd6:	2200      	movhi	r2, #0
90008dd8:	2201      	movls	r2, #1
90008dda:	4584      	cmp	ip, r0
90008ddc:	bf38      	it	cc
90008dde:	2200      	movcc	r2, #0
90008de0:	ebb4 0f83 	cmp.w	r4, r3, lsl #2
90008de4:	920f      	str	r2, [sp, #60]	; 0x3c
90008de6:	bf94      	ite	ls
90008de8:	2201      	movls	r2, #1
90008dea:	2200      	movhi	r2, #0
90008dec:	ebbc 0f83 	cmp.w	ip, r3, lsl #2
90008df0:	f002 0201 	and.w	r2, r2, #1
90008df4:	bf38      	it	cc
90008df6:	2200      	movcc	r2, #0
90008df8:	9210      	str	r2, [sp, #64]	; 0x40
90008dfa:	9a11      	ldr	r2, [sp, #68]	; 0x44
90008dfc:	4294      	cmp	r4, r2
90008dfe:	4613      	mov	r3, r2
90008e00:	bf8c      	ite	hi
90008e02:	2300      	movhi	r3, #0
90008e04:	2301      	movls	r3, #1
90008e06:	4594      	cmp	ip, r2
90008e08:	bf38      	it	cc
90008e0a:	2300      	movcc	r3, #0
90008e0c:	ebb4 0f41 	cmp.w	r4, r1, lsl #1
90008e10:	9311      	str	r3, [sp, #68]	; 0x44
90008e12:	bf94      	ite	ls
90008e14:	2301      	movls	r3, #1
90008e16:	2300      	movhi	r3, #0
90008e18:	ebbc 0f41 	cmp.w	ip, r1, lsl #1
90008e1c:	f003 0301 	and.w	r3, r3, #1
90008e20:	bf38      	it	cc
90008e22:	2300      	movcc	r3, #0
90008e24:	9312      	str	r3, [sp, #72]	; 0x48
90008e26:	ebc7 1307 	rsb	r3, r7, r7, lsl #4
90008e2a:	429c      	cmp	r4, r3
90008e2c:	bf8c      	ite	hi
90008e2e:	2200      	movhi	r2, #0
90008e30:	2201      	movls	r2, #1
90008e32:	459c      	cmp	ip, r3
90008e34:	bf38      	it	cc
90008e36:	2200      	movcc	r2, #0
90008e38:	9204      	str	r2, [sp, #16]
90008e3a:	e014      	b.n	90008e66 <BSP_I2C4_Init+0x292>
90008e3c:	2400d1ac 	.word	0x2400d1ac
90008e40:	2400dbb4 	.word	0x2400dbb4
90008e44:	58001c00 	.word	0x58001c00
90008e48:	58024400 	.word	0x58024400
90008e4c:	58020c00 	.word	0x58020c00
90008e50:	3b9aca00 	.word	0x3b9aca00
90008e54:	2400dbb0 	.word	0x2400dbb0
90008e58:	2400d1b0 	.word	0x2400d1b0
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
90008e5c:	f1be 0f10 	cmp.w	lr, #16
90008e60:	44b8      	add	r8, r7
90008e62:	f000 826c 	beq.w	9000933e <BSP_I2C4_Init+0x76a>
      if (tscldel >= (uint32_t)tscldel_min)
90008e66:	f5b8 7faf 	cmp.w	r8, #350	; 0x15e
90008e6a:	4673      	mov	r3, lr
      uint32_t tscldel = (scldel + 1U) * (presc + 1U) * ti2cclk;
90008e6c:	f10e 0e01 	add.w	lr, lr, #1
      if (tscldel >= (uint32_t)tscldel_min)
90008e70:	d3f4      	bcc.n	90008e5c <BSP_I2C4_Init+0x288>
            if(presc != prev_presc)
90008e72:	ebbb 0205 	subs.w	r2, fp, r5
90008e76:	bf18      	it	ne
90008e78:	2201      	movne	r2, #1
90008e7a:	2c00      	cmp	r4, #0
90008e7c:	bf18      	it	ne
90008e7e:	2200      	movne	r2, #0
90008e80:	2a00      	cmp	r2, #0
90008e82:	f040 824a 	bne.w	9000931a <BSP_I2C4_Init+0x746>
          if ((tsdadel >= (uint32_t)tsdadel_min) && (tsdadel <= (uint32_t)tsdadel_max))
90008e86:	45bc      	cmp	ip, r7
90008e88:	bf34      	ite	cc
90008e8a:	2200      	movcc	r2, #0
90008e8c:	2201      	movcs	r2, #1
90008e8e:	42bc      	cmp	r4, r7
90008e90:	bf88      	it	hi
90008e92:	2200      	movhi	r2, #0
            if(presc != prev_presc)
90008e94:	45ab      	cmp	fp, r5
90008e96:	bf0c      	ite	eq
90008e98:	2200      	moveq	r2, #0
90008e9a:	f002 0201 	andne.w	r2, r2, #1
90008e9e:	2a00      	cmp	r2, #0
90008ea0:	f000 80fd 	beq.w	9000909e <BSP_I2C4_Init+0x4ca>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90008ea4:	eb09 0189 	add.w	r1, r9, r9, lsl #2
              I2c_valid_timing_nbr ++;
90008ea8:	f109 0901 	add.w	r9, r9, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
90008eac:	2001      	movs	r0, #1
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90008eae:	f84a 5021 	str.w	r5, [sl, r1, lsl #2]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
90008eb2:	f1b9 0f7f 	cmp.w	r9, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90008eb6:	eb0a 0181 	add.w	r1, sl, r1, lsl #2
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
90008eba:	6088      	str	r0, [r1, #8]
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90008ebc:	4650      	mov	r0, sl
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
90008ebe:	604b      	str	r3, [r1, #4]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
90008ec0:	f200 81a5 	bhi.w	9000920e <BSP_I2C4_Init+0x63a>
90008ec4:	46ab      	mov	fp, r5
            if(presc != prev_presc)
90008ec6:	9906      	ldr	r1, [sp, #24]
90008ec8:	45ab      	cmp	fp, r5
90008eca:	bf0c      	ite	eq
90008ecc:	2100      	moveq	r1, #0
90008ece:	f001 0101 	andne.w	r1, r1, #1
90008ed2:	2900      	cmp	r1, #0
90008ed4:	f000 80ff 	beq.w	900090d6 <BSP_I2C4_Init+0x502>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90008ed8:	eb09 0289 	add.w	r2, r9, r9, lsl #2
              I2c_valid_timing_nbr ++;
90008edc:	f109 0901 	add.w	r9, r9, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
90008ee0:	2003      	movs	r0, #3
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90008ee2:	f84a 5022 	str.w	r5, [sl, r2, lsl #2]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
90008ee6:	f1b9 0f7f 	cmp.w	r9, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90008eea:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
90008eee:	6090      	str	r0, [r2, #8]
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90008ef0:	4650      	mov	r0, sl
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
90008ef2:	6053      	str	r3, [r2, #4]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
90008ef4:	f200 818b 	bhi.w	9000920e <BSP_I2C4_Init+0x63a>
90008ef8:	460a      	mov	r2, r1
90008efa:	46ab      	mov	fp, r5
            if(presc != prev_presc)
90008efc:	9908      	ldr	r1, [sp, #32]
90008efe:	45ab      	cmp	fp, r5
90008f00:	bf0c      	ite	eq
90008f02:	2100      	moveq	r1, #0
90008f04:	f001 0101 	andne.w	r1, r1, #1
90008f08:	2900      	cmp	r1, #0
90008f0a:	f000 80ff 	beq.w	9000910c <BSP_I2C4_Init+0x538>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90008f0e:	eb09 0289 	add.w	r2, r9, r9, lsl #2
              I2c_valid_timing_nbr ++;
90008f12:	f109 0901 	add.w	r9, r9, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
90008f16:	2005      	movs	r0, #5
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90008f18:	f84a 5022 	str.w	r5, [sl, r2, lsl #2]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
90008f1c:	f1b9 0f7f 	cmp.w	r9, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90008f20:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
90008f24:	6090      	str	r0, [r2, #8]
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90008f26:	4650      	mov	r0, sl
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
90008f28:	6053      	str	r3, [r2, #4]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
90008f2a:	f200 8170 	bhi.w	9000920e <BSP_I2C4_Init+0x63a>
90008f2e:	460a      	mov	r2, r1
90008f30:	46ab      	mov	fp, r5
            if(presc != prev_presc)
90008f32:	990b      	ldr	r1, [sp, #44]	; 0x2c
90008f34:	45ab      	cmp	fp, r5
90008f36:	bf0c      	ite	eq
90008f38:	2100      	moveq	r1, #0
90008f3a:	f001 0101 	andne.w	r1, r1, #1
90008f3e:	2900      	cmp	r1, #0
90008f40:	f000 80fe 	beq.w	90009140 <BSP_I2C4_Init+0x56c>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90008f44:	eb09 0289 	add.w	r2, r9, r9, lsl #2
              I2c_valid_timing_nbr ++;
90008f48:	f109 0901 	add.w	r9, r9, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
90008f4c:	2007      	movs	r0, #7
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90008f4e:	f84a 5022 	str.w	r5, [sl, r2, lsl #2]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
90008f52:	f1b9 0f7f 	cmp.w	r9, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90008f56:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
90008f5a:	6090      	str	r0, [r2, #8]
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90008f5c:	4650      	mov	r0, sl
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
90008f5e:	6053      	str	r3, [r2, #4]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
90008f60:	f200 8155 	bhi.w	9000920e <BSP_I2C4_Init+0x63a>
90008f64:	460a      	mov	r2, r1
90008f66:	46ab      	mov	fp, r5
            if(presc != prev_presc)
90008f68:	990d      	ldr	r1, [sp, #52]	; 0x34
90008f6a:	45ab      	cmp	fp, r5
90008f6c:	bf0c      	ite	eq
90008f6e:	2100      	moveq	r1, #0
90008f70:	f001 0101 	andne.w	r1, r1, #1
90008f74:	2900      	cmp	r1, #0
90008f76:	f000 80fd 	beq.w	90009174 <BSP_I2C4_Init+0x5a0>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90008f7a:	eb09 0289 	add.w	r2, r9, r9, lsl #2
              I2c_valid_timing_nbr ++;
90008f7e:	f109 0901 	add.w	r9, r9, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
90008f82:	2009      	movs	r0, #9
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90008f84:	f84a 5022 	str.w	r5, [sl, r2, lsl #2]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
90008f88:	f1b9 0f7f 	cmp.w	r9, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90008f8c:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
90008f90:	6090      	str	r0, [r2, #8]
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90008f92:	4650      	mov	r0, sl
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
90008f94:	6053      	str	r3, [r2, #4]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
90008f96:	f200 813a 	bhi.w	9000920e <BSP_I2C4_Init+0x63a>
90008f9a:	460a      	mov	r2, r1
90008f9c:	46ab      	mov	fp, r5
            if(presc != prev_presc)
90008f9e:	990f      	ldr	r1, [sp, #60]	; 0x3c
90008fa0:	45ab      	cmp	fp, r5
90008fa2:	bf0c      	ite	eq
90008fa4:	2100      	moveq	r1, #0
90008fa6:	f001 0101 	andne.w	r1, r1, #1
90008faa:	2900      	cmp	r1, #0
90008fac:	f000 80fc 	beq.w	900091a8 <BSP_I2C4_Init+0x5d4>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90008fb0:	eb09 0289 	add.w	r2, r9, r9, lsl #2
              I2c_valid_timing_nbr ++;
90008fb4:	f109 0901 	add.w	r9, r9, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
90008fb8:	200b      	movs	r0, #11
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90008fba:	f84a 5022 	str.w	r5, [sl, r2, lsl #2]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
90008fbe:	f1b9 0f7f 	cmp.w	r9, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90008fc2:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
90008fc6:	6090      	str	r0, [r2, #8]
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90008fc8:	4650      	mov	r0, sl
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
90008fca:	6053      	str	r3, [r2, #4]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
90008fcc:	f200 811f 	bhi.w	9000920e <BSP_I2C4_Init+0x63a>
90008fd0:	46ab      	mov	fp, r5
            if(presc != prev_presc)
90008fd2:	9e11      	ldr	r6, [sp, #68]	; 0x44
90008fd4:	455d      	cmp	r5, fp
90008fd6:	bf0c      	ite	eq
90008fd8:	2600      	moveq	r6, #0
90008fda:	f006 0601 	andne.w	r6, r6, #1
90008fde:	2e00      	cmp	r6, #0
90008fe0:	f000 80fb 	beq.w	900091da <BSP_I2C4_Init+0x606>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90008fe4:	eb09 0289 	add.w	r2, r9, r9, lsl #2
              I2c_valid_timing_nbr ++;
90008fe8:	f109 0901 	add.w	r9, r9, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
90008fec:	210d      	movs	r1, #13
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90008fee:	4650      	mov	r0, sl
90008ff0:	f84a 5022 	str.w	r5, [sl, r2, lsl #2]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
90008ff4:	f1b9 0f7f 	cmp.w	r9, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90008ff8:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
90008ffc:	6053      	str	r3, [r2, #4]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
90008ffe:	6091      	str	r1, [r2, #8]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
90009000:	f200 8105 	bhi.w	9000920e <BSP_I2C4_Init+0x63a>
90009004:	4631      	mov	r1, r6
90009006:	46ab      	mov	fp, r5
            if(presc != prev_presc)
90009008:	9e04      	ldr	r6, [sp, #16]
9000900a:	455d      	cmp	r5, fp
9000900c:	bf0c      	ite	eq
9000900e:	2600      	moveq	r6, #0
90009010:	f006 0601 	andne.w	r6, r6, #1
90009014:	2e00      	cmp	r6, #0
90009016:	f000 817c 	beq.w	90009312 <BSP_I2C4_Init+0x73e>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
9000901a:	eb09 0289 	add.w	r2, r9, r9, lsl #2
              I2c_valid_timing_nbr ++;
9000901e:	f109 0901 	add.w	r9, r9, #1
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90009022:	4650      	mov	r0, sl
90009024:	f84a 5022 	str.w	r5, [sl, r2, lsl #2]
90009028:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
9000902c:	f1b9 0f7f 	cmp.w	r9, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
90009030:	6053      	str	r3, [r2, #4]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
90009032:	f04f 030f 	mov.w	r3, #15
90009036:	6093      	str	r3, [r2, #8]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
90009038:	f200 80e9 	bhi.w	9000920e <BSP_I2C4_Init+0x63a>
9000903c:	46ab      	mov	fp, r5
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
9000903e:	e70d      	b.n	90008e5c <BSP_I2C4_Init+0x288>
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
90009040:	9a07      	ldr	r2, [sp, #28]
90009042:	9b08      	ldr	r3, [sp, #32]
90009044:	3214      	adds	r2, #20
90009046:	3301      	adds	r3, #1
90009048:	9207      	str	r2, [sp, #28]
9000904a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
9000904c:	9308      	str	r3, [sp, #32]
9000904e:	4293      	cmp	r3, r2
90009050:	f040 80ff 	bne.w	90009252 <BSP_I2C4_Init+0x67e>
        if (idx < I2C_VALID_TIMING_NBR)
90009054:	297f      	cmp	r1, #127	; 0x7f
90009056:	d818      	bhi.n	9000908a <BSP_I2C4_Init+0x4b6>
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
90009058:	eb01 0381 	add.w	r3, r1, r1, lsl #2
9000905c:	990b      	ldr	r1, [sp, #44]	; 0x2c
9000905e:	eb01 0283 	add.w	r2, r1, r3, lsl #2
90009062:	f851 4023 	ldr.w	r4, [r1, r3, lsl #2]
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
90009066:	6850      	ldr	r0, [r2, #4]
                ((I2c_valid_timing[idx].scll & 0xFFU) << 0);
90009068:	7c13      	ldrb	r3, [r2, #16]
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
9000906a:	0500      	lsls	r0, r0, #20
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
9000906c:	ea43 7304 	orr.w	r3, r3, r4, lsl #28
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
90009070:	f400 0070 	and.w	r0, r0, #15728640	; 0xf00000
                ((I2c_valid_timing[idx].sclh & 0xFFU) << 8) |\
90009074:	e9d2 1202 	ldrd	r1, r2, [r2, #8]
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
90009078:	4303      	orrs	r3, r0
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
9000907a:	0409      	lsls	r1, r1, #16
                ((I2c_valid_timing[idx].sclh & 0xFFU) << 8) |\
9000907c:	0212      	lsls	r2, r2, #8
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
9000907e:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
                ((I2c_valid_timing[idx].sclh & 0xFFU) << 8) |\
90009082:	b292      	uxth	r2, r2
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
90009084:	430b      	orrs	r3, r1
90009086:	4313      	orrs	r3, r2
90009088:	9303      	str	r3, [sp, #12]
        if (MX_I2C4_Init(&hbus_i2c4, I2C_GetTiming(HAL_RCC_GetPCLK2Freq(), BUS_I2C4_FREQUENCY)) != HAL_OK)
9000908a:	9903      	ldr	r1, [sp, #12]
9000908c:	48b5      	ldr	r0, [pc, #724]	; (90009364 <BSP_I2C4_Init+0x790>)
9000908e:	f7ff fd81 	bl	90008b94 <MX_I2C4_Init>
90009092:	2800      	cmp	r0, #0
90009094:	f43f ada8 	beq.w	90008be8 <BSP_I2C4_Init+0x14>
          ret = BSP_ERROR_BUS_FAILURE;
90009098:	f06f 0007 	mvn.w	r0, #7
  return ret;
9000909c:	e5a5      	b.n	90008bea <BSP_I2C4_Init+0x16>
            if(presc != prev_presc)
9000909e:	4632      	mov	r2, r6
900090a0:	9905      	ldr	r1, [sp, #20]
900090a2:	45ab      	cmp	fp, r5
900090a4:	bf0c      	ite	eq
900090a6:	2100      	moveq	r1, #0
900090a8:	f001 0101 	andne.w	r1, r1, #1
900090ac:	2900      	cmp	r1, #0
900090ae:	f43f af0a 	beq.w	90008ec6 <BSP_I2C4_Init+0x2f2>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
900090b2:	eb09 0289 	add.w	r2, r9, r9, lsl #2
              I2c_valid_timing_nbr ++;
900090b6:	f109 0901 	add.w	r9, r9, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
900090ba:	2002      	movs	r0, #2
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
900090bc:	f84a 5022 	str.w	r5, [sl, r2, lsl #2]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
900090c0:	f1b9 0f7f 	cmp.w	r9, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
900090c4:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
900090c8:	6090      	str	r0, [r2, #8]
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
900090ca:	4650      	mov	r0, sl
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
900090cc:	6053      	str	r3, [r2, #4]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
900090ce:	f200 809e 	bhi.w	9000920e <BSP_I2C4_Init+0x63a>
900090d2:	460a      	mov	r2, r1
900090d4:	46ab      	mov	fp, r5
            if(presc != prev_presc)
900090d6:	9907      	ldr	r1, [sp, #28]
900090d8:	45ab      	cmp	fp, r5
900090da:	bf0c      	ite	eq
900090dc:	2100      	moveq	r1, #0
900090de:	f001 0101 	andne.w	r1, r1, #1
900090e2:	2900      	cmp	r1, #0
900090e4:	f43f af0a 	beq.w	90008efc <BSP_I2C4_Init+0x328>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
900090e8:	eb09 0289 	add.w	r2, r9, r9, lsl #2
              I2c_valid_timing_nbr ++;
900090ec:	f109 0901 	add.w	r9, r9, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
900090f0:	2004      	movs	r0, #4
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
900090f2:	f84a 5022 	str.w	r5, [sl, r2, lsl #2]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
900090f6:	f1b9 0f7f 	cmp.w	r9, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
900090fa:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
900090fe:	6090      	str	r0, [r2, #8]
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90009100:	4650      	mov	r0, sl
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
90009102:	6053      	str	r3, [r2, #4]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
90009104:	f200 8083 	bhi.w	9000920e <BSP_I2C4_Init+0x63a>
90009108:	460a      	mov	r2, r1
9000910a:	46ab      	mov	fp, r5
            if(presc != prev_presc)
9000910c:	9909      	ldr	r1, [sp, #36]	; 0x24
9000910e:	45ab      	cmp	fp, r5
90009110:	bf0c      	ite	eq
90009112:	2100      	moveq	r1, #0
90009114:	f001 0101 	andne.w	r1, r1, #1
90009118:	2900      	cmp	r1, #0
9000911a:	f43f af0a 	beq.w	90008f32 <BSP_I2C4_Init+0x35e>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
9000911e:	eb09 0289 	add.w	r2, r9, r9, lsl #2
              I2c_valid_timing_nbr ++;
90009122:	f109 0901 	add.w	r9, r9, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
90009126:	2006      	movs	r0, #6
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90009128:	f84a 5022 	str.w	r5, [sl, r2, lsl #2]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
9000912c:	f1b9 0f7f 	cmp.w	r9, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90009130:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
90009134:	6090      	str	r0, [r2, #8]
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90009136:	4650      	mov	r0, sl
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
90009138:	6053      	str	r3, [r2, #4]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
9000913a:	d868      	bhi.n	9000920e <BSP_I2C4_Init+0x63a>
9000913c:	460a      	mov	r2, r1
9000913e:	46ab      	mov	fp, r5
            if(presc != prev_presc)
90009140:	990c      	ldr	r1, [sp, #48]	; 0x30
90009142:	45ab      	cmp	fp, r5
90009144:	bf0c      	ite	eq
90009146:	2100      	moveq	r1, #0
90009148:	f001 0101 	andne.w	r1, r1, #1
9000914c:	2900      	cmp	r1, #0
9000914e:	f43f af0b 	beq.w	90008f68 <BSP_I2C4_Init+0x394>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90009152:	eb09 0289 	add.w	r2, r9, r9, lsl #2
              I2c_valid_timing_nbr ++;
90009156:	f109 0901 	add.w	r9, r9, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
9000915a:	2008      	movs	r0, #8
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
9000915c:	f84a 5022 	str.w	r5, [sl, r2, lsl #2]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
90009160:	f1b9 0f7f 	cmp.w	r9, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90009164:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
90009168:	6090      	str	r0, [r2, #8]
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
9000916a:	4650      	mov	r0, sl
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
9000916c:	6053      	str	r3, [r2, #4]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
9000916e:	d84e      	bhi.n	9000920e <BSP_I2C4_Init+0x63a>
90009170:	460a      	mov	r2, r1
90009172:	46ab      	mov	fp, r5
            if(presc != prev_presc)
90009174:	990e      	ldr	r1, [sp, #56]	; 0x38
90009176:	45ab      	cmp	fp, r5
90009178:	bf0c      	ite	eq
9000917a:	2100      	moveq	r1, #0
9000917c:	f001 0101 	andne.w	r1, r1, #1
90009180:	2900      	cmp	r1, #0
90009182:	f43f af0c 	beq.w	90008f9e <BSP_I2C4_Init+0x3ca>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90009186:	eb09 0289 	add.w	r2, r9, r9, lsl #2
              I2c_valid_timing_nbr ++;
9000918a:	f109 0901 	add.w	r9, r9, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
9000918e:	200a      	movs	r0, #10
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90009190:	f84a 5022 	str.w	r5, [sl, r2, lsl #2]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
90009194:	f1b9 0f7f 	cmp.w	r9, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90009198:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
9000919c:	6090      	str	r0, [r2, #8]
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
9000919e:	4650      	mov	r0, sl
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
900091a0:	6053      	str	r3, [r2, #4]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
900091a2:	d834      	bhi.n	9000920e <BSP_I2C4_Init+0x63a>
900091a4:	460a      	mov	r2, r1
900091a6:	46ab      	mov	fp, r5
            if(presc != prev_presc)
900091a8:	9910      	ldr	r1, [sp, #64]	; 0x40
900091aa:	45ab      	cmp	fp, r5
900091ac:	bf0c      	ite	eq
900091ae:	2100      	moveq	r1, #0
900091b0:	f001 0101 	andne.w	r1, r1, #1
900091b4:	2900      	cmp	r1, #0
900091b6:	f000 80ae 	beq.w	90009316 <BSP_I2C4_Init+0x742>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
900091ba:	eb09 0289 	add.w	r2, r9, r9, lsl #2
              I2c_valid_timing_nbr ++;
900091be:	f109 0901 	add.w	r9, r9, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
900091c2:	200c      	movs	r0, #12
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
900091c4:	f84a 5022 	str.w	r5, [sl, r2, lsl #2]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
900091c8:	f1b9 0f7f 	cmp.w	r9, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
900091cc:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
900091d0:	6090      	str	r0, [r2, #8]
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
900091d2:	4650      	mov	r0, sl
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
900091d4:	6053      	str	r3, [r2, #4]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
900091d6:	d81a      	bhi.n	9000920e <BSP_I2C4_Init+0x63a>
900091d8:	46ab      	mov	fp, r5
            if(presc != prev_presc)
900091da:	9e12      	ldr	r6, [sp, #72]	; 0x48
900091dc:	455d      	cmp	r5, fp
900091de:	bf0c      	ite	eq
900091e0:	2600      	moveq	r6, #0
900091e2:	f006 0601 	andne.w	r6, r6, #1
900091e6:	2e00      	cmp	r6, #0
900091e8:	f43f af0e 	beq.w	90009008 <BSP_I2C4_Init+0x434>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
900091ec:	eb09 0289 	add.w	r2, r9, r9, lsl #2
              I2c_valid_timing_nbr ++;
900091f0:	f109 0901 	add.w	r9, r9, #1
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
900091f4:	4650      	mov	r0, sl
900091f6:	f84a 5022 	str.w	r5, [sl, r2, lsl #2]
900091fa:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
900091fe:	f1b9 0f7f 	cmp.w	r9, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
90009202:	6053      	str	r3, [r2, #4]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
90009204:	f04f 030e 	mov.w	r3, #14
90009208:	6093      	str	r3, [r2, #8]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
9000920a:	f67f af17 	bls.w	9000903c <BSP_I2C4_Init+0x468>
9000920e:	4b56      	ldr	r3, [pc, #344]	; (90009368 <BSP_I2C4_Init+0x794>)
90009210:	900b      	str	r0, [sp, #44]	; 0x2c
90009212:	f8c3 9000 	str.w	r9, [r3]
              I2c_valid_timing_nbr ++;
90009216:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
9000921a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
9000921c:	f240 4201 	movw	r2, #1025	; 0x401
90009220:	f240 2657 	movw	r6, #599	; 0x257
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
90009224:	f640 1ac4 	movw	sl, #2500	; 0x9c4
90009228:	1ad2      	subs	r2, r2, r3
          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= I2C_Charac[I2C_speed].hscl_min) && (ti2cclk < tscl_h))
9000922a:	f240 4b12 	movw	fp, #1042	; 0x412
9000922e:	920d      	str	r2, [sp, #52]	; 0x34
90009230:	9a02      	ldr	r2, [sp, #8]
90009232:	4296      	cmp	r6, r2
90009234:	bf38      	it	cc
90009236:	4616      	movcc	r6, r2
90009238:	4a4c      	ldr	r2, [pc, #304]	; (9000936c <BSP_I2C4_Init+0x798>)
9000923a:	9207      	str	r2, [sp, #28]
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
9000923c:	2200      	movs	r2, #0
9000923e:	9208      	str	r2, [sp, #32]
90009240:	f04f 32ff 	mov.w	r2, #4294967295
90009244:	4611      	mov	r1, r2
90009246:	f103 0232 	add.w	r2, r3, #50	; 0x32
9000924a:	f6a3 0334 	subw	r3, r3, #2100	; 0x834
9000924e:	920c      	str	r2, [sp, #48]	; 0x30
90009250:	930e      	str	r3, [sp, #56]	; 0x38
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
90009252:	9b07      	ldr	r3, [sp, #28]
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
90009254:	f04f 0800 	mov.w	r8, #0
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
90009258:	6818      	ldr	r0, [r3, #0]
9000925a:	9b02      	ldr	r3, [sp, #8]
9000925c:	fb00 3003 	mla	r0, r0, r3, r3
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
90009260:	9b0d      	ldr	r3, [sp, #52]	; 0x34
90009262:	1a1b      	subs	r3, r3, r0
90009264:	ea4f 0943 	mov.w	r9, r3, lsl #1
90009268:	9b0c      	ldr	r3, [sp, #48]	; 0x30
9000926a:	eb03 0e00 	add.w	lr, r3, r0
9000926e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
90009270:	4403      	add	r3, r0
90009272:	9309      	str	r3, [sp, #36]	; 0x24
90009274:	e006      	b.n	90009284 <BSP_I2C4_Init+0x6b0>
90009276:	f5b8 7f80 	cmp.w	r8, #256	; 0x100
9000927a:	4486      	add	lr, r0
9000927c:	eba9 0900 	sub.w	r9, r9, r0
90009280:	f43f aede 	beq.w	90009040 <BSP_I2C4_Init+0x46c>
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
90009284:	f240 5214 	movw	r2, #1300	; 0x514
90009288:	f8cd 8004 	str.w	r8, [sp, #4]
9000928c:	f1ae 0332 	sub.w	r3, lr, #50	; 0x32
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
90009290:	f108 0801 	add.w	r8, r8, #1
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
90009294:	4596      	cmp	lr, r2
90009296:	d9ee      	bls.n	90009276 <BSP_I2C4_Init+0x6a2>
90009298:	9a02      	ldr	r2, [sp, #8]
9000929a:	ebb2 0f93 	cmp.w	r2, r3, lsr #2
9000929e:	d2ea      	bcs.n	90009276 <BSP_I2C4_Init+0x6a2>
900092a0:	f640 0c34 	movw	ip, #2100	; 0x834
900092a4:	464c      	mov	r4, r9
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
900092a6:	f8cd 9018 	str.w	r9, [sp, #24]
900092aa:	2200      	movs	r2, #0
900092ac:	ebac 0c03 	sub.w	ip, ip, r3
900092b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
900092b2:	4689      	mov	r9, r1
900092b4:	4473      	add	r3, lr
900092b6:	e9cd e804 	strd	lr, r8, [sp, #16]
900092ba:	f8dd 8020 	ldr.w	r8, [sp, #32]
900092be:	f8dd e01c 	ldr.w	lr, [sp, #28]
900092c2:	e005      	b.n	900092d0 <BSP_I2C4_Init+0x6fc>
900092c4:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
900092c8:	4403      	add	r3, r0
900092ca:	eba4 0400 	sub.w	r4, r4, r0
900092ce:	d01a      	beq.n	90009306 <BSP_I2C4_Init+0x732>
          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= I2C_Charac[I2C_speed].hscl_min) && (ti2cclk < tscl_h))
900092d0:	eb0c 0103 	add.w	r1, ip, r3
900092d4:	4617      	mov	r7, r2
900092d6:	f203 15a1 	addw	r5, r3, #417	; 0x1a1
          uint32_t tscl_h = tafdel_min + dnf_delay + (2U * ti2cclk) + ((sclh + 1U) * tpresc);
900092da:	3201      	adds	r2, #1
          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= I2C_Charac[I2C_speed].hscl_min) && (ti2cclk < tscl_h))
900092dc:	42b1      	cmp	r1, r6
900092de:	d9f1      	bls.n	900092c4 <BSP_I2C4_Init+0x6f0>
900092e0:	455d      	cmp	r5, fp
900092e2:	d8ef      	bhi.n	900092c4 <BSP_I2C4_Init+0x6f0>
            if (error < 0)
900092e4:	ea33 0123 	bics.w	r1, r3, r3, asr #32
900092e8:	bf28      	it	cs
900092ea:	4621      	movcs	r1, r4
            if ((uint32_t)error < prev_error)
900092ec:	458a      	cmp	sl, r1
900092ee:	d9e9      	bls.n	900092c4 <BSP_I2C4_Init+0x6f0>
              I2c_valid_timing[count].sclh = sclh;
900092f0:	468a      	mov	sl, r1
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
900092f2:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
              I2c_valid_timing[count].scll = scll;
900092f6:	9901      	ldr	r1, [sp, #4]
              I2c_valid_timing[count].sclh = sclh;
900092f8:	46c1      	mov	r9, r8
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
900092fa:	4403      	add	r3, r0
900092fc:	eba4 0400 	sub.w	r4, r4, r0
              I2c_valid_timing[count].sclh = sclh;
90009300:	e9ce 7103 	strd	r7, r1, [lr, #12]
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
90009304:	d1e4      	bne.n	900092d0 <BSP_I2C4_Init+0x6fc>
90009306:	4649      	mov	r1, r9
90009308:	f8dd 9018 	ldr.w	r9, [sp, #24]
9000930c:	e9dd e804 	ldrd	lr, r8, [sp, #16]
90009310:	e7b1      	b.n	90009276 <BSP_I2C4_Init+0x6a2>
90009312:	460e      	mov	r6, r1
90009314:	e5a2      	b.n	90008e5c <BSP_I2C4_Init+0x288>
            if(presc != prev_presc)
90009316:	4611      	mov	r1, r2
90009318:	e65b      	b.n	90008fd2 <BSP_I2C4_Init+0x3fe>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
9000931a:	eb09 0189 	add.w	r1, r9, r9, lsl #2
              I2c_valid_timing_nbr ++;
9000931e:	f109 0901 	add.w	r9, r9, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
90009322:	2000      	movs	r0, #0
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90009324:	f84a 5021 	str.w	r5, [sl, r1, lsl #2]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
90009328:	f1b9 0f7f 	cmp.w	r9, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
9000932c:	eb0a 0181 	add.w	r1, sl, r1, lsl #2
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
90009330:	6088      	str	r0, [r1, #8]
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90009332:	4650      	mov	r0, sl
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
90009334:	604b      	str	r3, [r1, #4]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
90009336:	f63f af6a 	bhi.w	9000920e <BSP_I2C4_Init+0x63a>
9000933a:	46ab      	mov	fp, r5
9000933c:	e6b0      	b.n	900090a0 <BSP_I2C4_Init+0x4cc>
  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
9000933e:	3501      	adds	r5, #1
90009340:	9b02      	ldr	r3, [sp, #8]
90009342:	2d10      	cmp	r5, #16
90009344:	441f      	add	r7, r3
90009346:	f47f acc7 	bne.w	90008cd8 <BSP_I2C4_Init+0x104>
9000934a:	b126      	cbz	r6, 90009356 <BSP_I2C4_Init+0x782>
9000934c:	4b06      	ldr	r3, [pc, #24]	; (90009368 <BSP_I2C4_Init+0x794>)
9000934e:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
90009352:	f8c3 9000 	str.w	r9, [r3]
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
90009356:	9b0a      	ldr	r3, [sp, #40]	; 0x28
90009358:	2b00      	cmp	r3, #0
9000935a:	f43f ae96 	beq.w	9000908a <BSP_I2C4_Init+0x4b6>
9000935e:	4b03      	ldr	r3, [pc, #12]	; (9000936c <BSP_I2C4_Init+0x798>)
90009360:	930b      	str	r3, [sp, #44]	; 0x2c
90009362:	e75a      	b.n	9000921a <BSP_I2C4_Init+0x646>
90009364:	2400dbb4 	.word	0x2400dbb4
90009368:	2400dbb0 	.word	0x2400dbb0
9000936c:	2400d1b0 	.word	0x2400d1b0

90009370 <BSP_I2C4_WriteReg>:
{
90009370:	b530      	push	{r4, r5, lr}
90009372:	4614      	mov	r4, r2
90009374:	b085      	sub	sp, #20
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C4_WriteReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
  if(HAL_I2C_Mem_Write(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
90009376:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
9000937a:	460a      	mov	r2, r1
9000937c:	9301      	str	r3, [sp, #4]
9000937e:	4601      	mov	r1, r0
90009380:	2301      	movs	r3, #1
90009382:	4809      	ldr	r0, [pc, #36]	; (900093a8 <BSP_I2C4_WriteReg+0x38>)
90009384:	9502      	str	r5, [sp, #8]
90009386:	9400      	str	r4, [sp, #0]
90009388:	f001 f958 	bl	9000a63c <HAL_I2C_Mem_Write>
9000938c:	b908      	cbnz	r0, 90009392 <BSP_I2C4_WriteReg+0x22>
}
9000938e:	b005      	add	sp, #20
90009390:	bd30      	pop	{r4, r5, pc}
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
90009392:	4805      	ldr	r0, [pc, #20]	; (900093a8 <BSP_I2C4_WriteReg+0x38>)
90009394:	f001 fbf4 	bl	9000ab80 <HAL_I2C_GetError>
      ret =  BSP_ERROR_PERIPH_FAILURE;
90009398:	2804      	cmp	r0, #4
9000939a:	bf0c      	ite	eq
9000939c:	f06f 0065 	mvneq.w	r0, #101	; 0x65
900093a0:	f06f 0003 	mvnne.w	r0, #3
900093a4:	e7f3      	b.n	9000938e <BSP_I2C4_WriteReg+0x1e>
900093a6:	bf00      	nop
900093a8:	2400dbb4 	.word	0x2400dbb4

900093ac <BSP_I2C4_ReadReg>:
{
900093ac:	b530      	push	{r4, r5, lr}
900093ae:	4614      	mov	r4, r2
900093b0:	b085      	sub	sp, #20
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C4_ReadReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
  if (HAL_I2C_Mem_Read(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
900093b2:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
900093b6:	460a      	mov	r2, r1
900093b8:	9301      	str	r3, [sp, #4]
900093ba:	4601      	mov	r1, r0
900093bc:	2301      	movs	r3, #1
900093be:	4809      	ldr	r0, [pc, #36]	; (900093e4 <BSP_I2C4_ReadReg+0x38>)
900093c0:	9502      	str	r5, [sp, #8]
900093c2:	9400      	str	r4, [sp, #0]
900093c4:	f001 fa6e 	bl	9000a8a4 <HAL_I2C_Mem_Read>
900093c8:	b908      	cbnz	r0, 900093ce <BSP_I2C4_ReadReg+0x22>
}
900093ca:	b005      	add	sp, #20
900093cc:	bd30      	pop	{r4, r5, pc}
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
900093ce:	4805      	ldr	r0, [pc, #20]	; (900093e4 <BSP_I2C4_ReadReg+0x38>)
900093d0:	f001 fbd6 	bl	9000ab80 <HAL_I2C_GetError>
      ret =  BSP_ERROR_PERIPH_FAILURE;
900093d4:	2804      	cmp	r0, #4
900093d6:	bf0c      	ite	eq
900093d8:	f06f 0065 	mvneq.w	r0, #101	; 0x65
900093dc:	f06f 0003 	mvnne.w	r0, #3
900093e0:	e7f3      	b.n	900093ca <BSP_I2C4_ReadReg+0x1e>
900093e2:	bf00      	nop
900093e4:	2400dbb4 	.word	0x2400dbb4

900093e8 <BSP_GetTick>:
  return (int32_t)HAL_GetTick();
900093e8:	f000 baaa 	b.w	90009940 <HAL_GetTick>

900093ec <BSP_SDRAM_DeInit>:
  */
int32_t BSP_SDRAM_DeInit(uint32_t Instance)
{
  int32_t ret = BSP_ERROR_NONE;

  if(Instance >= SDRAM_INSTANCES_NBR)
900093ec:	b970      	cbnz	r0, 9000940c <BSP_SDRAM_DeInit+0x20>
{
900093ee:	b510      	push	{r4, lr}
900093f0:	4604      	mov	r4, r0
  {
    ret =  BSP_ERROR_WRONG_PARAM;
  }
  else
  {
    (void)HAL_SDRAM_DeInit(&hsdram[Instance]);
900093f2:	4808      	ldr	r0, [pc, #32]	; (90009414 <BSP_SDRAM_DeInit+0x28>)
900093f4:	f005 f876 	bl	9000e4e4 <HAL_SDRAM_DeInit>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(hSdram);

  /* Disable NVIC configuration for DMA interrupt */
  HAL_NVIC_DisableIRQ(SDRAM_MDMAx_IRQn);
900093f8:	207a      	movs	r0, #122	; 0x7a
900093fa:	f000 fb0b 	bl	90009a14 <HAL_NVIC_DisableIRQ>

  /* Deinitialize the stream for new transfer */
  mdma_handle.Instance = SDRAM_MDMAx_CHANNEL;
900093fe:	4b06      	ldr	r3, [pc, #24]	; (90009418 <BSP_SDRAM_DeInit+0x2c>)
90009400:	4806      	ldr	r0, [pc, #24]	; (9000941c <BSP_SDRAM_DeInit+0x30>)
90009402:	6003      	str	r3, [r0, #0]
  (void)HAL_MDMA_DeInit(&mdma_handle);
90009404:	f003 f98e 	bl	9000c724 <HAL_MDMA_DeInit>
  int32_t ret = BSP_ERROR_NONE;
90009408:	4620      	mov	r0, r4
}
9000940a:	bd10      	pop	{r4, pc}
    ret =  BSP_ERROR_WRONG_PARAM;
9000940c:	f06f 0001 	mvn.w	r0, #1
}
90009410:	4770      	bx	lr
90009412:	bf00      	nop
90009414:	2400dc08 	.word	0x2400dc08
90009418:	52000040 	.word	0x52000040
9000941c:	2400dc3c 	.word	0x2400dc3c

90009420 <MX_SDRAM_BANK2_Init>:
{
90009420:	b530      	push	{r4, r5, lr}
  hSdram->Init.MemoryDataWidth    = MemoryDataWidth;
90009422:	6102      	str	r2, [r0, #16]
  hSdram->Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
90009424:	2200      	movs	r2, #0
{
90009426:	b089      	sub	sp, #36	; 0x24
  hsdram->Instance = FMC_SDRAM_DEVICE;
90009428:	4c13      	ldr	r4, [pc, #76]	; (90009478 <MX_SDRAM_BANK2_Init+0x58>)
  hSdram->Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
9000942a:	6082      	str	r2, [r0, #8]
  hsdram->Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
9000942c:	2540      	movs	r5, #64	; 0x40
  hSdram->Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
9000942e:	61c2      	str	r2, [r0, #28]
  sdram_timing.ExitSelfRefreshDelay = 7;
90009430:	2307      	movs	r3, #7
  hSdram->Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
90009432:	6282      	str	r2, [r0, #40]	; 0x28
  sdram_timing.LoadToActiveDelay    = 2;
90009434:	2202      	movs	r2, #2
  hSdram->Init.RowBitsNumber      = RowBitsNumber;
90009436:	60c1      	str	r1, [r0, #12]
  hSdram->Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_3;
90009438:	f44f 71c0 	mov.w	r1, #384	; 0x180
  sdram_timing.LoadToActiveDelay    = 2;
9000943c:	9200      	str	r2, [sp, #0]
  sdram_timing.RCDDelay             = 2;
9000943e:	9206      	str	r2, [sp, #24]
  hSdram->Init.SDBank             = FMC_SDRAM_BANK2;
90009440:	2201      	movs	r2, #1
  sdram_timing.ExitSelfRefreshDelay = 7;
90009442:	9301      	str	r3, [sp, #4]
  hSdram->Init.SDBank             = FMC_SDRAM_BANK2;
90009444:	6042      	str	r2, [r0, #4]
  hSdram->Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
90009446:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  hsdram->Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
9000944a:	6165      	str	r5, [r4, #20]
  hSdram->Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
9000944c:	f44f 6500 	mov.w	r5, #2048	; 0x800
  hSdram->Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_3;
90009450:	6181      	str	r1, [r0, #24]
  if(HAL_SDRAM_Init(hSdram, &sdram_timing) != HAL_OK)
90009452:	4669      	mov	r1, sp
  hSdram->Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
90009454:	e9c0 5208 	strd	r5, r2, [r0, #32]
  sdram_timing.SelfRefreshTime      = 4;
90009458:	2204      	movs	r2, #4
9000945a:	e9cd 2302 	strd	r2, r3, [sp, #8]
  sdram_timing.WriteRecoveryTime    = 2;
9000945e:	2202      	movs	r2, #2
90009460:	2302      	movs	r3, #2
90009462:	e9cd 2304 	strd	r2, r3, [sp, #16]
  hsdram->Instance = FMC_SDRAM_DEVICE;
90009466:	4b05      	ldr	r3, [pc, #20]	; (9000947c <MX_SDRAM_BANK2_Init+0x5c>)
90009468:	6023      	str	r3, [r4, #0]
  if(HAL_SDRAM_Init(hSdram, &sdram_timing) != HAL_OK)
9000946a:	f005 f811 	bl	9000e490 <HAL_SDRAM_Init>
}
9000946e:	3800      	subs	r0, #0
90009470:	bf18      	it	ne
90009472:	2001      	movne	r0, #1
90009474:	b009      	add	sp, #36	; 0x24
90009476:	bd30      	pop	{r4, r5, pc}
90009478:	2400dc08 	.word	0x2400dc08
9000947c:	52004140 	.word	0x52004140

90009480 <BSP_SDRAM_Init>:
  if(Instance >=SDRAM_INSTANCES_NBR)
90009480:	2800      	cmp	r0, #0
90009482:	f040 80d2 	bne.w	9000962a <BSP_SDRAM_Init+0x1aa>
  __HAL_RCC_FMC_CLK_ENABLE();
90009486:	4b6c      	ldr	r3, [pc, #432]	; (90009638 <BSP_SDRAM_Init+0x1b8>)
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
90009488:	210c      	movs	r1, #12
  __HAL_RCC_FMC_CLK_ENABLE();
9000948a:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
9000948e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
{
90009492:	b570      	push	{r4, r5, r6, lr}
  __HAL_RCC_FMC_CLK_ENABLE();
90009494:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
{
90009498:	b08e      	sub	sp, #56	; 0x38
  __HAL_RCC_FMC_CLK_ENABLE();
9000949a:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
9000949e:	4605      	mov	r5, r0
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8| GPIO_PIN_9 | GPIO_PIN_10 |\
900094a0:	f24c 7003 	movw	r0, #50947	; 0xc703
  mdma_handle.Init.Request = MDMA_REQUEST_SW;
900094a4:	4c65      	ldr	r4, [pc, #404]	; (9000963c <BSP_SDRAM_Init+0x1bc>)
  __HAL_RCC_FMC_CLK_ENABLE();
900094a6:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
  __HAL_LINKDMA(hsdram, hmdma, mdma_handle);
900094aa:	4e65      	ldr	r6, [pc, #404]	; (90009640 <BSP_SDRAM_Init+0x1c0>)
  __HAL_RCC_FMC_CLK_ENABLE();
900094ac:	9201      	str	r2, [sp, #4]
900094ae:	9a01      	ldr	r2, [sp, #4]
  SDRAM_MDMAx_CLK_ENABLE();
900094b0:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
900094b4:	f042 0201 	orr.w	r2, r2, #1
900094b8:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
900094bc:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
900094c0:	f002 0201 	and.w	r2, r2, #1
900094c4:	9202      	str	r2, [sp, #8]
900094c6:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
900094c8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
900094cc:	f042 0208 	orr.w	r2, r2, #8
900094d0:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
900094d4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
900094d8:	f002 0208 	and.w	r2, r2, #8
900094dc:	9203      	str	r2, [sp, #12]
900094de:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
900094e0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
900094e4:	f042 0210 	orr.w	r2, r2, #16
900094e8:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
900094ec:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
900094f0:	f002 0210 	and.w	r2, r2, #16
900094f4:	9204      	str	r2, [sp, #16]
900094f6:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
900094f8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
900094fc:	f042 0220 	orr.w	r2, r2, #32
90009500:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
90009504:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
90009508:	f002 0220 	and.w	r2, r2, #32
9000950c:	9205      	str	r2, [sp, #20]
9000950e:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
90009510:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
90009514:	f042 0240 	orr.w	r2, r2, #64	; 0x40
90009518:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
9000951c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
90009520:	f002 0240 	and.w	r2, r2, #64	; 0x40
90009524:	9206      	str	r2, [sp, #24]
90009526:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
90009528:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
9000952c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
90009530:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
90009534:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
90009538:	910c      	str	r1, [sp, #48]	; 0x30
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8| GPIO_PIN_9 | GPIO_PIN_10 |\
9000953a:	2102      	movs	r1, #2
  __HAL_RCC_GPIOH_CLK_ENABLE();
9000953c:	f003 0380 	and.w	r3, r3, #128	; 0x80
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8| GPIO_PIN_9 | GPIO_PIN_10 |\
90009540:	e9cd 0108 	strd	r0, r1, [sp, #32]
90009544:	2001      	movs	r0, #1
90009546:	2103      	movs	r1, #3
  __HAL_RCC_GPIOH_CLK_ENABLE();
90009548:	9307      	str	r3, [sp, #28]
9000954a:	9b07      	ldr	r3, [sp, #28]
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8| GPIO_PIN_9 | GPIO_PIN_10 |\
9000954c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
90009550:	a908      	add	r1, sp, #32
90009552:	483c      	ldr	r0, [pc, #240]	; (90009644 <BSP_SDRAM_Init+0x1c4>)
90009554:	f000 fc7e 	bl	90009e54 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
90009558:	f64f 7383 	movw	r3, #65411	; 0xff83
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
9000955c:	a908      	add	r1, sp, #32
9000955e:	483a      	ldr	r0, [pc, #232]	; (90009648 <BSP_SDRAM_Init+0x1c8>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
90009560:	9308      	str	r3, [sp, #32]
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
90009562:	f000 fc77 	bl	90009e54 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
90009566:	f64f 033f 	movw	r3, #63551	; 0xf83f
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
9000956a:	a908      	add	r1, sp, #32
9000956c:	4837      	ldr	r0, [pc, #220]	; (9000964c <BSP_SDRAM_Init+0x1cc>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
9000956e:	9308      	str	r3, [sp, #32]
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
90009570:	f000 fc70 	bl	90009e54 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
90009574:	f248 1333 	movw	r3, #33075	; 0x8133
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
90009578:	a908      	add	r1, sp, #32
9000957a:	4835      	ldr	r0, [pc, #212]	; (90009650 <BSP_SDRAM_Init+0x1d0>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
9000957c:	9308      	str	r3, [sp, #32]
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
9000957e:	f000 fc69 	bl	90009e54 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 ;
90009582:	23e0      	movs	r3, #224	; 0xe0
  HAL_GPIO_Init(GPIOH, &gpio_init_structure);
90009584:	a908      	add	r1, sp, #32
90009586:	4833      	ldr	r0, [pc, #204]	; (90009654 <BSP_SDRAM_Init+0x1d4>)
  gpio_init_structure.Pin   = GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 ;
90009588:	9308      	str	r3, [sp, #32]
  HAL_GPIO_Init(GPIOH, &gpio_init_structure);
9000958a:	f000 fc63 	bl	90009e54 <HAL_GPIO_Init>
  mdma_handle.Init.Priority = MDMA_PRIORITY_HIGH;
9000958e:	2380      	movs	r3, #128	; 0x80
  mdma_handle.Init.Request = MDMA_REQUEST_SW;
90009590:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  mdma_handle.Init.SourceInc = MDMA_SRC_INC_WORD;
90009594:	f240 2102 	movw	r1, #514	; 0x202
  HAL_MDMA_DeInit(&mdma_handle);
90009598:	4620      	mov	r0, r4
  mdma_handle.Init.DestDataSize = MDMA_DEST_DATASIZE_WORD;
9000959a:	6223      	str	r3, [r4, #32]
  mdma_handle.Init.BufferTransferLength = 128;
9000959c:	62a3      	str	r3, [r4, #40]	; 0x28
  mdma_handle.Init.Request = MDMA_REQUEST_SW;
9000959e:	6062      	str	r2, [r4, #4]
  mdma_handle.Init.TransferTriggerMode = MDMA_BLOCK_TRANSFER;
900095a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  mdma_handle.Init.SourceInc = MDMA_SRC_INC_WORD;
900095a4:	6161      	str	r1, [r4, #20]
  mdma_handle.Init.TransferTriggerMode = MDMA_BLOCK_TRANSFER;
900095a6:	60a2      	str	r2, [r4, #8]
  mdma_handle.Instance = SDRAM_MDMAx_CHANNEL;
900095a8:	4a2b      	ldr	r2, [pc, #172]	; (90009658 <BSP_SDRAM_Init+0x1d8>)
  __HAL_LINKDMA(hsdram, hmdma, mdma_handle);
900095aa:	6334      	str	r4, [r6, #48]	; 0x30
  mdma_handle.Instance = SDRAM_MDMAx_CHANNEL;
900095ac:	6022      	str	r2, [r4, #0]
  __HAL_LINKDMA(hsdram, hmdma, mdma_handle);
900095ae:	6426      	str	r6, [r4, #64]	; 0x40
  mdma_handle.Init.Priority = MDMA_PRIORITY_HIGH;
900095b0:	e9c4 3503 	strd	r3, r5, [r4, #12]
  mdma_handle.Init.DestinationInc = MDMA_DEST_INC_WORD;
900095b4:	f640 0308 	movw	r3, #2056	; 0x808
900095b8:	61a3      	str	r3, [r4, #24]
  mdma_handle.Init.SourceDataSize = MDMA_SRC_DATASIZE_WORD;
900095ba:	2320      	movs	r3, #32
900095bc:	61e3      	str	r3, [r4, #28]
  mdma_handle.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
900095be:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
  mdma_handle.Init.DestBurst = MDMA_DEST_BURST_SINGLE;
900095c2:	e9c4 550b 	strd	r5, r5, [r4, #44]	; 0x2c
  mdma_handle.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
900095c6:	6263      	str	r3, [r4, #36]	; 0x24
  mdma_handle.Init.DestBlockAddressOffset = 0;
900095c8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
  HAL_MDMA_DeInit(&mdma_handle);
900095cc:	f003 f8aa 	bl	9000c724 <HAL_MDMA_DeInit>
  HAL_MDMA_Init(&mdma_handle);
900095d0:	4620      	mov	r0, r4
900095d2:	f003 f82d 	bl	9000c630 <HAL_MDMA_Init>
  HAL_NVIC_SetPriority(SDRAM_MDMAx_IRQn, 0x0F, 0);
900095d6:	462a      	mov	r2, r5
900095d8:	210f      	movs	r1, #15
900095da:	207a      	movs	r0, #122	; 0x7a
900095dc:	f000 f9ce 	bl	9000997c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_MDMAx_IRQn);
900095e0:	207a      	movs	r0, #122	; 0x7a
900095e2:	f000 fa09 	bl	900099f8 <HAL_NVIC_EnableIRQ>
    if(MX_SDRAM_BANK2_Init(&hsdram[Instance],FMC_SDRAM_ROW_BITS_NUM_12, FMC_SDRAM_MEM_BUS_WIDTH_16) != HAL_OK)
900095e6:	2210      	movs	r2, #16
900095e8:	2104      	movs	r1, #4
900095ea:	4630      	mov	r0, r6
900095ec:	f7ff ff18 	bl	90009420 <MX_SDRAM_BANK2_Init>
900095f0:	b9f0      	cbnz	r0, 90009630 <BSP_SDRAM_Init+0x1b0>
      pRegMode.TargetBank      = FMC_SDRAM_CMD_TARGET_BANK2;
900095f2:	491a      	ldr	r1, [pc, #104]	; (9000965c <BSP_SDRAM_Init+0x1dc>)
900095f4:	2208      	movs	r2, #8
900095f6:	2303      	movs	r3, #3
      if(MT48LC4M32B2_Init(&hsdram[Instance], &pRegMode) != MT48LC4M32B2_OK)
900095f8:	4630      	mov	r0, r6
      pRegMode.TargetBank      = FMC_SDRAM_CMD_TARGET_BANK2;
900095fa:	e9c1 2300 	strd	r2, r3, [r1]
900095fe:	f240 6203 	movw	r2, #1539	; 0x603
90009602:	2300      	movs	r3, #0
90009604:	e9c1 2302 	strd	r2, r3, [r1, #8]
90009608:	2200      	movs	r2, #0
9000960a:	2330      	movs	r3, #48	; 0x30
9000960c:	e9c1 2304 	strd	r2, r3, [r1, #16]
90009610:	2200      	movs	r2, #0
90009612:	f44f 7300 	mov.w	r3, #512	; 0x200
90009616:	e9c1 2306 	strd	r2, r3, [r1, #24]
      if(MT48LC4M32B2_Init(&hsdram[Instance], &pRegMode) != MT48LC4M32B2_OK)
9000961a:	f7ff fa37 	bl	90008a8c <MT48LC4M32B2_Init>
        ret =  BSP_ERROR_COMPONENT_FAILURE;
9000961e:	2800      	cmp	r0, #0
90009620:	bf18      	it	ne
90009622:	f06f 0004 	mvnne.w	r0, #4
}
90009626:	b00e      	add	sp, #56	; 0x38
90009628:	bd70      	pop	{r4, r5, r6, pc}
    ret =  BSP_ERROR_WRONG_PARAM;
9000962a:	f06f 0001 	mvn.w	r0, #1
}
9000962e:	4770      	bx	lr
      ret = BSP_ERROR_NO_INIT;
90009630:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
90009634:	e7f7      	b.n	90009626 <BSP_SDRAM_Init+0x1a6>
90009636:	bf00      	nop
90009638:	58024400 	.word	0x58024400
9000963c:	2400dca8 	.word	0x2400dca8
90009640:	2400dc08 	.word	0x2400dc08
90009644:	58020c00 	.word	0x58020c00
90009648:	58021000 	.word	0x58021000
9000964c:	58021400 	.word	0x58021400
90009650:	58021800 	.word	0x58021800
90009654:	58021c00 	.word	0x58021c00
90009658:	52000040 	.word	0x52000040
9000965c:	2400dd18 	.word	0x2400dd18

90009660 <BSP_TS_Init>:
  * @param  Instance TS instance. Could be only 0.
  * @param  TS_Init  TS Init structure
  * @retval BSP status
  */
int32_t BSP_TS_Init(uint32_t Instance, TS_Init_t *TS_Init)
{
90009660:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
90009664:	b088      	sub	sp, #32
  int32_t ret = BSP_ERROR_NONE;

  if((Instance >=TS_INSTANCES_NBR) || (TS_Init->Width == 0U) ||( TS_Init->Width > TS_MAX_WIDTH) ||\
90009666:	2800      	cmp	r0, #0
90009668:	d16b      	bne.n	90009742 <BSP_TS_Init+0xe2>
9000966a:	680b      	ldr	r3, [r1, #0]
9000966c:	460c      	mov	r4, r1
9000966e:	1e5a      	subs	r2, r3, #1
90009670:	f5b2 7ff0 	cmp.w	r2, #480	; 0x1e0
90009674:	d265      	bcs.n	90009742 <BSP_TS_Init+0xe2>
                         (TS_Init->Height == 0U) ||( TS_Init->Height > TS_MAX_HEIGHT) ||\
90009676:	684a      	ldr	r2, [r1, #4]
90009678:	1e51      	subs	r1, r2, #1
9000967a:	f5b1 7f88 	cmp.w	r1, #272	; 0x110
9000967e:	d260      	bcs.n	90009742 <BSP_TS_Init+0xe2>
                         (TS_Init->Accuracy > TS_MIN((TS_Init->Width), (TS_Init->Height))))
90009680:	4293      	cmp	r3, r2
90009682:	bf28      	it	cs
90009684:	4613      	movcs	r3, r2
                         (TS_Init->Height == 0U) ||( TS_Init->Height > TS_MAX_HEIGHT) ||\
90009686:	68e2      	ldr	r2, [r4, #12]
90009688:	429a      	cmp	r2, r3
9000968a:	d85a      	bhi.n	90009742 <BSP_TS_Init+0xe2>
  FT5336_IO_t              IOCtx;
  static FT5336_Object_t   FT5336Obj;
  uint32_t ft5336_id       = 0;

  /* Configure the touch screen driver */
  IOCtx.Address     = TS_I2C_ADDRESS;
9000968c:	2270      	movs	r2, #112	; 0x70
  IOCtx.Init        = BSP_I2C4_Init;
9000968e:	4b31      	ldr	r3, [pc, #196]	; (90009754 <BSP_TS_Init+0xf4>)
  IOCtx.DeInit      = BSP_I2C4_DeInit;
  IOCtx.ReadReg     = BSP_I2C4_ReadReg;
  IOCtx.WriteReg    = BSP_I2C4_WriteReg;
  IOCtx.GetTick     = BSP_GetTick;

  if(FT5336_RegisterBusIO (&FT5336Obj, &IOCtx) != FT5336_OK)
90009690:	4d31      	ldr	r5, [pc, #196]	; (90009758 <BSP_TS_Init+0xf8>)
90009692:	a902      	add	r1, sp, #8
  IOCtx.Address     = TS_I2C_ADDRESS;
90009694:	f8ad 2010 	strh.w	r2, [sp, #16]
  IOCtx.Init        = BSP_I2C4_Init;
90009698:	9302      	str	r3, [sp, #8]
  IOCtx.DeInit      = BSP_I2C4_DeInit;
9000969a:	4a30      	ldr	r2, [pc, #192]	; (9000975c <BSP_TS_Init+0xfc>)
  IOCtx.ReadReg     = BSP_I2C4_ReadReg;
9000969c:	4b30      	ldr	r3, [pc, #192]	; (90009760 <BSP_TS_Init+0x100>)
  IOCtx.DeInit      = BSP_I2C4_DeInit;
9000969e:	9203      	str	r2, [sp, #12]
  IOCtx.ReadReg     = BSP_I2C4_ReadReg;
900096a0:	9306      	str	r3, [sp, #24]
  IOCtx.WriteReg    = BSP_I2C4_WriteReg;
900096a2:	4a30      	ldr	r2, [pc, #192]	; (90009764 <BSP_TS_Init+0x104>)
  IOCtx.GetTick     = BSP_GetTick;
900096a4:	4b30      	ldr	r3, [pc, #192]	; (90009768 <BSP_TS_Init+0x108>)
  uint32_t ft5336_id       = 0;
900096a6:	9001      	str	r0, [sp, #4]
  if(FT5336_RegisterBusIO (&FT5336Obj, &IOCtx) != FT5336_OK)
900096a8:	4628      	mov	r0, r5
  IOCtx.WriteReg    = BSP_I2C4_WriteReg;
900096aa:	9205      	str	r2, [sp, #20]
  IOCtx.GetTick     = BSP_GetTick;
900096ac:	9307      	str	r3, [sp, #28]
  if(FT5336_RegisterBusIO (&FT5336Obj, &IOCtx) != FT5336_OK)
900096ae:	f7ff f93f 	bl	90008930 <FT5336_RegisterBusIO>
900096b2:	2800      	cmp	r0, #0
900096b4:	d14b      	bne.n	9000974e <BSP_TS_Init+0xee>
  {
    ret = BSP_ERROR_BUS_FAILURE;
  }
  else if(FT5336_ReadID(&FT5336Obj, &ft5336_id) != FT5336_OK)
900096b6:	a901      	add	r1, sp, #4
900096b8:	4628      	mov	r0, r5
900096ba:	f7ff f82f 	bl	9000871c <FT5336_ReadID>
900096be:	2800      	cmp	r0, #0
900096c0:	d145      	bne.n	9000974e <BSP_TS_Init+0xee>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }
  else if(ft5336_id != FT5336_ID)
900096c2:	9b01      	ldr	r3, [sp, #4]
900096c4:	2b51      	cmp	r3, #81	; 0x51
900096c6:	d142      	bne.n	9000974e <BSP_TS_Init+0xee>
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
  }
  else
  {
    Ts_CompObj[Instance] = &FT5336Obj;
    Ts_Drv = (TS_Drv_t *) &FT5336_TS_Driver;
900096c8:	4b28      	ldr	r3, [pc, #160]	; (9000976c <BSP_TS_Init+0x10c>)

    if(Ts_Drv->Init(Ts_CompObj[Instance]) != FT5336_OK)
900096ca:	4628      	mov	r0, r5
    Ts_CompObj[Instance] = &FT5336Obj;
900096cc:	4f28      	ldr	r7, [pc, #160]	; (90009770 <BSP_TS_Init+0x110>)
    Ts_Drv = (TS_Drv_t *) &FT5336_TS_Driver;
900096ce:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 90009778 <BSP_TS_Init+0x118>
    Ts_CompObj[Instance] = &FT5336Obj;
900096d2:	603d      	str	r5, [r7, #0]
    Ts_Drv = (TS_Drv_t *) &FT5336_TS_Driver;
900096d4:	f8c8 3000 	str.w	r3, [r8]
    if(Ts_Drv->Init(Ts_CompObj[Instance]) != FT5336_OK)
900096d8:	681b      	ldr	r3, [r3, #0]
900096da:	4798      	blx	r3
900096dc:	4606      	mov	r6, r0
900096de:	2800      	cmp	r0, #0
900096e0:	d135      	bne.n	9000974e <BSP_TS_Init+0xee>
      Ts_Ctx[Instance].Width             = TS_Init->Width;
900096e2:	4d24      	ldr	r5, [pc, #144]	; (90009774 <BSP_TS_Init+0x114>)
        if (Ts_Drv->GetCapabilities(Ts_CompObj[Instance], &Capabilities) < 0)
900096e4:	a902      	add	r1, sp, #8
900096e6:	6838      	ldr	r0, [r7, #0]
900096e8:	f8d8 3000 	ldr.w	r3, [r8]
      Ts_Ctx[Instance].Width             = TS_Init->Width;
900096ec:	e9d4 7200 	ldrd	r7, r2, [r4]
        if (Ts_Drv->GetCapabilities(Ts_CompObj[Instance], &Capabilities) < 0)
900096f0:	69db      	ldr	r3, [r3, #28]
      Ts_Ctx[Instance].Width             = TS_Init->Width;
900096f2:	e9c5 7200 	strd	r7, r2, [r5]
900096f6:	68a2      	ldr	r2, [r4, #8]
900096f8:	60aa      	str	r2, [r5, #8]
900096fa:	68e2      	ldr	r2, [r4, #12]
900096fc:	60ea      	str	r2, [r5, #12]
        if (Ts_Drv->GetCapabilities(Ts_CompObj[Instance], &Capabilities) < 0)
900096fe:	4798      	blx	r3
90009700:	2800      	cmp	r0, #0
90009702:	db18      	blt.n	90009736 <BSP_TS_Init+0xd6>
        Ts_Ctx[Instance].MaxX = Capabilities.MaxXl;
90009704:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
90009708:	e9c5 3204 	strd	r3, r2, [r5, #16]
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
9000970c:	68e3      	ldr	r3, [r4, #12]
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
9000970e:	e9d4 2100 	ldrd	r2, r1, [r4]
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
90009712:	441a      	add	r2, r3
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
90009714:	440b      	add	r3, r1
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
90009716:	3201      	adds	r2, #1
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
90009718:	3301      	adds	r3, #1
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
9000971a:	e9c5 2206 	strd	r2, r2, [r5, #24]
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
9000971e:	e9c5 330b 	strd	r3, r3, [r5, #44]	; 0x2c
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
90009722:	622a      	str	r2, [r5, #32]
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
90009724:	636b      	str	r3, [r5, #52]	; 0x34
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
90009726:	626a      	str	r2, [r5, #36]	; 0x24
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
90009728:	63ab      	str	r3, [r5, #56]	; 0x38
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
9000972a:	62aa      	str	r2, [r5, #40]	; 0x28
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
9000972c:	63eb      	str	r3, [r5, #60]	; 0x3c
}
9000972e:	4630      	mov	r0, r6
90009730:	b008      	add	sp, #32
90009732:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        ret = BSP_ERROR_COMPONENT_FAILURE;
90009736:	f06f 0604 	mvn.w	r6, #4
}
9000973a:	4630      	mov	r0, r6
9000973c:	b008      	add	sp, #32
9000973e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret = BSP_ERROR_WRONG_PARAM;
90009742:	f06f 0601 	mvn.w	r6, #1
}
90009746:	4630      	mov	r0, r6
90009748:	b008      	add	sp, #32
9000974a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      ret = BSP_ERROR_NO_INIT;
9000974e:	f04f 36ff 	mov.w	r6, #4294967295
90009752:	e7ec      	b.n	9000972e <BSP_TS_Init+0xce>
90009754:	90008bd5 	.word	0x90008bd5
90009758:	2400dd38 	.word	0x2400dd38
9000975c:	90008b41 	.word	0x90008b41
90009760:	900093ad 	.word	0x900093ad
90009764:	90009371 	.word	0x90009371
90009768:	900093e9 	.word	0x900093e9
9000976c:	24000024 	.word	0x24000024
90009770:	2400dd60 	.word	0x2400dd60
90009774:	2400dd64 	.word	0x2400dd64
90009778:	2400dda4 	.word	0x2400dda4

9000977c <BSP_TS_GetState>:
  if(Instance >= TS_INSTANCES_NBR)
9000977c:	2800      	cmp	r0, #0
9000977e:	d157      	bne.n	90009830 <BSP_TS_GetState+0xb4>
    if(Ts_Drv->GetState(Ts_CompObj[Instance], &state) < 0)
90009780:	4b2d      	ldr	r3, [pc, #180]	; (90009838 <BSP_TS_GetState+0xbc>)
90009782:	4a2e      	ldr	r2, [pc, #184]	; (9000983c <BSP_TS_GetState+0xc0>)
90009784:	681b      	ldr	r3, [r3, #0]
90009786:	6810      	ldr	r0, [r2, #0]
90009788:	691b      	ldr	r3, [r3, #16]
{
9000978a:	b5f0      	push	{r4, r5, r6, r7, lr}
9000978c:	b085      	sub	sp, #20
9000978e:	460c      	mov	r4, r1
    if(Ts_Drv->GetState(Ts_CompObj[Instance], &state) < 0)
90009790:	a901      	add	r1, sp, #4
90009792:	4798      	blx	r3
90009794:	2800      	cmp	r0, #0
90009796:	db41      	blt.n	9000981c <BSP_TS_GetState+0xa0>
    else if(state.TouchDetected != 0U)
90009798:	9d01      	ldr	r5, [sp, #4]
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_XY) == TS_SWAP_XY)
9000979a:	4b29      	ldr	r3, [pc, #164]	; (90009840 <BSP_TS_GetState+0xc4>)
    else if(state.TouchDetected != 0U)
9000979c:	b93d      	cbnz	r5, 900097ae <BSP_TS_GetState+0x32>
      TS_State->TouchX = Ts_Ctx[Instance].PreviousX[0];
9000979e:	699a      	ldr	r2, [r3, #24]
  int32_t ret = BSP_ERROR_NONE;
900097a0:	4628      	mov	r0, r5
      TS_State->TouchY = Ts_Ctx[Instance].PreviousY[0];
900097a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      TS_State->TouchDetected = 0U;
900097a4:	6025      	str	r5, [r4, #0]
      TS_State->TouchY = Ts_Ctx[Instance].PreviousY[0];
900097a6:	e9c4 2301 	strd	r2, r3, [r4, #4]
}
900097aa:	b005      	add	sp, #20
900097ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_XY) == TS_SWAP_XY)
900097ae:	6898      	ldr	r0, [r3, #8]
900097b0:	0702      	lsls	r2, r0, #28
      y_oriented = state.TouchY;
900097b2:	e9dd c702 	ldrd	ip, r7, [sp, #8]
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_XY) == TS_SWAP_XY)
900097b6:	d435      	bmi.n	90009824 <BSP_TS_GetState+0xa8>
      y_oriented = state.TouchY;
900097b8:	4639      	mov	r1, r7
      x_oriented = state.TouchX;
900097ba:	4662      	mov	r2, ip
        x_oriented = Ts_Ctx[Instance].MaxX - state.TouchX - 1UL;
900097bc:	691e      	ldr	r6, [r3, #16]
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_X) == TS_SWAP_X)
900097be:	f010 0f02 	tst.w	r0, #2
        x_oriented = Ts_Ctx[Instance].MaxX - state.TouchX - 1UL;
900097c2:	bf1c      	itt	ne
900097c4:	f106 32ff 	addne.w	r2, r6, #4294967295
900097c8:	eba2 020c 	subne.w	r2, r2, ip
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_Y) == TS_SWAP_Y)
900097cc:	f010 0f04 	tst.w	r0, #4
        y_oriented = Ts_Ctx[Instance].MaxY - state.TouchY;
900097d0:	6958      	ldr	r0, [r3, #20]
900097d2:	bf18      	it	ne
900097d4:	1bc1      	subne	r1, r0, r7
      TS_State->TouchX = (x_oriented * Ts_Ctx[Instance].Width) / Ts_Ctx[Instance].MaxX;
900097d6:	681f      	ldr	r7, [r3, #0]
900097d8:	fb07 f202 	mul.w	r2, r7, r2
900097dc:	fbb2 f2f6 	udiv	r2, r2, r6
      TS_State->TouchY = (y_oriented * Ts_Ctx[Instance].Height) / Ts_Ctx[Instance].MaxY;
900097e0:	685e      	ldr	r6, [r3, #4]
      TS_State->TouchDetected = state.TouchDetected;
900097e2:	6025      	str	r5, [r4, #0]
      TS_State->TouchY = (y_oriented * Ts_Ctx[Instance].Height) / Ts_Ctx[Instance].MaxY;
900097e4:	fb06 f101 	mul.w	r1, r6, r1
      x_diff = (TS_State->TouchX > Ts_Ctx[Instance].PreviousX[0])?
900097e8:	699e      	ldr	r6, [r3, #24]
        y_diff = (TS_State->TouchY > Ts_Ctx[Instance].PreviousY[0])?
900097ea:	6add      	ldr	r5, [r3, #44]	; 0x2c
        (TS_State->TouchX - Ts_Ctx[Instance].PreviousX[0]):
900097ec:	42b2      	cmp	r2, r6
      TS_State->TouchX = (x_oriented * Ts_Ctx[Instance].Width) / Ts_Ctx[Instance].MaxX;
900097ee:	6062      	str	r2, [r4, #4]
      TS_State->TouchY = (y_oriented * Ts_Ctx[Instance].Height) / Ts_Ctx[Instance].MaxY;
900097f0:	fbb1 f1f0 	udiv	r1, r1, r0
        (TS_State->TouchX - Ts_Ctx[Instance].PreviousX[0]):
900097f4:	bf8c      	ite	hi
900097f6:	1b90      	subhi	r0, r2, r6
900097f8:	1ab0      	subls	r0, r6, r2
          (TS_State->TouchY - Ts_Ctx[Instance].PreviousY[0]):
900097fa:	42a9      	cmp	r1, r5
      TS_State->TouchY = (y_oriented * Ts_Ctx[Instance].Height) / Ts_Ctx[Instance].MaxY;
900097fc:	60a1      	str	r1, [r4, #8]
          (TS_State->TouchY - Ts_Ctx[Instance].PreviousY[0]):
900097fe:	bf8c      	ite	hi
90009800:	1b4f      	subhi	r7, r1, r5
90009802:	1a6f      	subls	r7, r5, r1
          if ((x_diff > Ts_Ctx[Instance].Accuracy) || (y_diff > Ts_Ctx[Instance].Accuracy))
90009804:	42b8      	cmp	r0, r7
90009806:	bf38      	it	cc
90009808:	4638      	movcc	r0, r7
9000980a:	68df      	ldr	r7, [r3, #12]
9000980c:	4287      	cmp	r7, r0
  int32_t ret = BSP_ERROR_NONE;
9000980e:	f04f 0000 	mov.w	r0, #0
          if ((x_diff > Ts_Ctx[Instance].Accuracy) || (y_diff > Ts_Ctx[Instance].Accuracy))
90009812:	d20a      	bcs.n	9000982a <BSP_TS_GetState+0xae>
            Ts_Ctx[Instance].PreviousX[0] = TS_State->TouchX;
90009814:	619a      	str	r2, [r3, #24]
            Ts_Ctx[Instance].PreviousY[0] = TS_State->TouchY;
90009816:	62d9      	str	r1, [r3, #44]	; 0x2c
}
90009818:	b005      	add	sp, #20
9000981a:	bdf0      	pop	{r4, r5, r6, r7, pc}
      ret = BSP_ERROR_COMPONENT_FAILURE;
9000981c:	f06f 0004 	mvn.w	r0, #4
}
90009820:	b005      	add	sp, #20
90009822:	bdf0      	pop	{r4, r5, r6, r7, pc}
        y_oriented = state.TouchX;
90009824:	4661      	mov	r1, ip
        x_oriented = state.TouchY;
90009826:	463a      	mov	r2, r7
90009828:	e7c8      	b.n	900097bc <BSP_TS_GetState+0x40>
            TS_State->TouchY = Ts_Ctx[Instance].PreviousY[0];
9000982a:	e9c4 6501 	strd	r6, r5, [r4, #4]
9000982e:	e7bc      	b.n	900097aa <BSP_TS_GetState+0x2e>
    ret = BSP_ERROR_WRONG_PARAM;
90009830:	f06f 0001 	mvn.w	r0, #1
}
90009834:	4770      	bx	lr
90009836:	bf00      	nop
90009838:	2400dda4 	.word	0x2400dda4
9000983c:	2400dd60 	.word	0x2400dd60
90009840:	2400dd64 	.word	0x2400dd64

90009844 <SystemInit>:
#endif

extern unsigned int VECTOR_TABLE_LOCATION;

void SystemInit (void)
{
90009844:	b410      	push	{r4}
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
90009846:	4c19      	ldr	r4, [pc, #100]	; (900098ac <SystemInit+0x68>)
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
90009848:	2200      	movs	r2, #0
  RCC->CR |= RCC_CR_HSION;
9000984a:	4b19      	ldr	r3, [pc, #100]	; (900098b0 <SystemInit+0x6c>)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
9000984c:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
90009850:	4818      	ldr	r0, [pc, #96]	; (900098b4 <SystemInit+0x70>)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
90009852:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
90009856:	f8c4 1088 	str.w	r1, [r4, #136]	; 0x88
  RCC->CR |= RCC_CR_HSION;
9000985a:	6819      	ldr	r1, [r3, #0]
  SCB->VTOR = FLASH_BANK2_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
#endif /* VECT_TAB_SRAM */

#else
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
9000985c:	4c16      	ldr	r4, [pc, #88]	; (900098b8 <SystemInit+0x74>)
  RCC->CR |= RCC_CR_HSION;
9000985e:	f041 0101 	orr.w	r1, r1, #1
90009862:	6019      	str	r1, [r3, #0]
  RCC->CFGR = 0x00000000;
90009864:	611a      	str	r2, [r3, #16]
  RCC->CR &= 0xEAF6ED7FU;
90009866:	6819      	ldr	r1, [r3, #0]
90009868:	4008      	ands	r0, r1
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
9000986a:	4914      	ldr	r1, [pc, #80]	; (900098bc <SystemInit+0x78>)
  RCC->CR &= 0xEAF6ED7FU;
9000986c:	6018      	str	r0, [r3, #0]
  RCC->D1CFGR = 0x00000000;
9000986e:	619a      	str	r2, [r3, #24]
  RCC->D2CFGR = 0x00000000;
90009870:	61da      	str	r2, [r3, #28]
  RCC->D3CFGR = 0x00000000;
90009872:	621a      	str	r2, [r3, #32]
  RCC->PLLCKSELR = 0x00000000;
90009874:	629a      	str	r2, [r3, #40]	; 0x28
  RCC->PLLCFGR = 0x00000000;
90009876:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC->PLL1DIVR = 0x00000000;
90009878:	631a      	str	r2, [r3, #48]	; 0x30
  RCC->PLL1FRACR = 0x00000000;
9000987a:	635a      	str	r2, [r3, #52]	; 0x34
  RCC->PLL2DIVR = 0x00000000;
9000987c:	639a      	str	r2, [r3, #56]	; 0x38
  RCC->PLL2FRACR = 0x00000000;
9000987e:	63da      	str	r2, [r3, #60]	; 0x3c
  RCC->PLL3DIVR = 0x00000000;
90009880:	641a      	str	r2, [r3, #64]	; 0x40
  RCC->PLL3FRACR = 0x00000000;
90009882:	645a      	str	r2, [r3, #68]	; 0x44
  RCC->CR &= 0xFFFBFFFFU;
90009884:	6818      	ldr	r0, [r3, #0]
90009886:	f420 2080 	bic.w	r0, r0, #262144	; 0x40000
9000988a:	6018      	str	r0, [r3, #0]
  RCC->CIER = 0x00000000;
9000988c:	661a      	str	r2, [r3, #96]	; 0x60
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
9000988e:	6823      	ldr	r3, [r4, #0]
90009890:	4019      	ands	r1, r3
90009892:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
90009896:	d203      	bcs.n	900098a0 <SystemInit+0x5c>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
90009898:	4b09      	ldr	r3, [pc, #36]	; (900098c0 <SystemInit+0x7c>)
9000989a:	2201      	movs	r2, #1
9000989c:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#elif defined(VECT_TAB_QSPI)
  SCB->VTOR = (unsigned int)&VECTOR_TABLE_LOCATION; /* Vector Table Relocation in External FLASH */
900098a0:	4a08      	ldr	r2, [pc, #32]	; (900098c4 <SystemInit+0x80>)
900098a2:	4b02      	ldr	r3, [pc, #8]	; (900098ac <SystemInit+0x68>)
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
900098a4:	f85d 4b04 	ldr.w	r4, [sp], #4
  SCB->VTOR = (unsigned int)&VECTOR_TABLE_LOCATION; /* Vector Table Relocation in External FLASH */
900098a8:	609a      	str	r2, [r3, #8]
}
900098aa:	4770      	bx	lr
900098ac:	e000ed00 	.word	0xe000ed00
900098b0:	58024400 	.word	0x58024400
900098b4:	eaf6ed7f 	.word	0xeaf6ed7f
900098b8:	5c001000 	.word	0x5c001000
900098bc:	ffff0000 	.word	0xffff0000
900098c0:	51008000 	.word	0x51008000
900098c4:	90000000 	.word	0x90000000

900098c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
900098c8:	b510      	push	{r4, lr}
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
900098ca:	2003      	movs	r0, #3
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
900098cc:	4c12      	ldr	r4, [pc, #72]	; (90009918 <HAL_Init+0x50>)
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
900098ce:	f000 f843 	bl	90009958 <HAL_NVIC_SetPriorityGrouping>
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
900098d2:	f003 fc65 	bl	9000d1a0 <HAL_RCC_GetSysClockFreq>
900098d6:	4b11      	ldr	r3, [pc, #68]	; (9000991c <HAL_Init+0x54>)
900098d8:	4911      	ldr	r1, [pc, #68]	; (90009920 <HAL_Init+0x58>)
900098da:	699a      	ldr	r2, [r3, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
900098dc:	699b      	ldr	r3, [r3, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
900098de:	f3c2 2203 	ubfx	r2, r2, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
900098e2:	f003 030f 	and.w	r3, r3, #15
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
900098e6:	5c8a      	ldrb	r2, [r1, r2]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
900098e8:	5ccb      	ldrb	r3, [r1, r3]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
900098ea:	f002 021f 	and.w	r2, r2, #31
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
900098ee:	490d      	ldr	r1, [pc, #52]	; (90009924 <HAL_Init+0x5c>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
900098f0:	f003 031f 	and.w	r3, r3, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
900098f4:	40d0      	lsrs	r0, r2
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
900098f6:	fa20 f303 	lsr.w	r3, r0, r3
  SystemCoreClock = common_system_clock;
900098fa:	6008      	str	r0, [r1, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
900098fc:	2000      	movs	r0, #0
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
900098fe:	6023      	str	r3, [r4, #0]
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
90009900:	f7fb f9dc 	bl	90004cbc <HAL_InitTick>
90009904:	b110      	cbz	r0, 9000990c <HAL_Init+0x44>
  {
    return HAL_ERROR;
90009906:	2401      	movs	r4, #1
  /* Init the low level hardware */
  HAL_MspInit();

  /* Return function status */
  return HAL_OK;
}
90009908:	4620      	mov	r0, r4
9000990a:	bd10      	pop	{r4, pc}
9000990c:	4604      	mov	r4, r0
  HAL_MspInit();
9000990e:	f7fa ff93 	bl	90004838 <HAL_MspInit>
}
90009912:	4620      	mov	r0, r4
90009914:	bd10      	pop	{r4, pc}
90009916:	bf00      	nop
90009918:	24000058 	.word	0x24000058
9000991c:	58024400 	.word	0x58024400
90009920:	9002b690 	.word	0x9002b690
90009924:	24000054 	.word	0x24000054

90009928 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
90009928:	4a03      	ldr	r2, [pc, #12]	; (90009938 <HAL_IncTick+0x10>)
9000992a:	4b04      	ldr	r3, [pc, #16]	; (9000993c <HAL_IncTick+0x14>)
9000992c:	6811      	ldr	r1, [r2, #0]
9000992e:	781b      	ldrb	r3, [r3, #0]
90009930:	440b      	add	r3, r1
90009932:	6013      	str	r3, [r2, #0]
}
90009934:	4770      	bx	lr
90009936:	bf00      	nop
90009938:	2400dda8 	.word	0x2400dda8
9000993c:	2400005c 	.word	0x2400005c

90009940 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
90009940:	4b01      	ldr	r3, [pc, #4]	; (90009948 <HAL_GetTick+0x8>)
90009942:	6818      	ldr	r0, [r3, #0]
}
90009944:	4770      	bx	lr
90009946:	bf00      	nop
90009948:	2400dda8 	.word	0x2400dda8

9000994c <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16);
9000994c:	4b01      	ldr	r3, [pc, #4]	; (90009954 <HAL_GetREVID+0x8>)
9000994e:	6818      	ldr	r0, [r3, #0]
}
90009950:	0c00      	lsrs	r0, r0, #16
90009952:	4770      	bx	lr
90009954:	5c001000 	.word	0x5c001000

90009958 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
90009958:	4906      	ldr	r1, [pc, #24]	; (90009974 <HAL_NVIC_SetPriorityGrouping+0x1c>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
9000995a:	f64f 0cff 	movw	ip, #63743	; 0xf8ff
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
9000995e:	0200      	lsls	r0, r0, #8
  reg_value  =  (reg_value                                   |
90009960:	4b05      	ldr	r3, [pc, #20]	; (90009978 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
90009962:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
90009964:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
90009968:	ea02 020c 	and.w	r2, r2, ip
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
9000996c:	4310      	orrs	r0, r2
  reg_value  =  (reg_value                                   |
9000996e:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
90009970:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
90009972:	4770      	bx	lr
90009974:	e000ed00 	.word	0xe000ed00
90009978:	05fa0000 	.word	0x05fa0000

9000997c <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
9000997c:	4b1b      	ldr	r3, [pc, #108]	; (900099ec <HAL_NVIC_SetPriority+0x70>)
9000997e:	68db      	ldr	r3, [r3, #12]
90009980:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
90009984:	b500      	push	{lr}
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
90009986:	f1c3 0e07 	rsb	lr, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
9000998a:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
9000998e:	f1be 0f04 	cmp.w	lr, #4
90009992:	bf28      	it	cs
90009994:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
90009998:	f1bc 0f06 	cmp.w	ip, #6
9000999c:	d91a      	bls.n	900099d4 <HAL_NVIC_SetPriority+0x58>
9000999e:	3b03      	subs	r3, #3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
900099a0:	f04f 3cff 	mov.w	ip, #4294967295
900099a4:	fa0c fc03 	lsl.w	ip, ip, r3
900099a8:	ea22 020c 	bic.w	r2, r2, ip
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
900099ac:	f04f 3cff 	mov.w	ip, #4294967295
  if ((int32_t)(IRQn) >= 0)
900099b0:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
900099b2:	fa0c fc0e 	lsl.w	ip, ip, lr
900099b6:	ea21 010c 	bic.w	r1, r1, ip
900099ba:	fa01 f103 	lsl.w	r1, r1, r3
900099be:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
900099c2:	db0a      	blt.n	900099da <HAL_NVIC_SetPriority+0x5e>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
900099c4:	0109      	lsls	r1, r1, #4
900099c6:	4b0a      	ldr	r3, [pc, #40]	; (900099f0 <HAL_NVIC_SetPriority+0x74>)
900099c8:	b2c9      	uxtb	r1, r1
900099ca:	4403      	add	r3, r0
900099cc:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
900099d0:	f85d fb04 	ldr.w	pc, [sp], #4
900099d4:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
900099d6:	4613      	mov	r3, r2
900099d8:	e7e8      	b.n	900099ac <HAL_NVIC_SetPriority+0x30>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
900099da:	f000 000f 	and.w	r0, r0, #15
900099de:	0109      	lsls	r1, r1, #4
900099e0:	4b04      	ldr	r3, [pc, #16]	; (900099f4 <HAL_NVIC_SetPriority+0x78>)
900099e2:	b2c9      	uxtb	r1, r1
900099e4:	4403      	add	r3, r0
900099e6:	7619      	strb	r1, [r3, #24]
900099e8:	f85d fb04 	ldr.w	pc, [sp], #4
900099ec:	e000ed00 	.word	0xe000ed00
900099f0:	e000e100 	.word	0xe000e100
900099f4:	e000ecfc 	.word	0xe000ecfc

900099f8 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
900099f8:	2800      	cmp	r0, #0
900099fa:	db07      	blt.n	90009a0c <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
900099fc:	2301      	movs	r3, #1
900099fe:	f000 011f 	and.w	r1, r0, #31
90009a02:	4a03      	ldr	r2, [pc, #12]	; (90009a10 <HAL_NVIC_EnableIRQ+0x18>)
90009a04:	0940      	lsrs	r0, r0, #5
90009a06:	408b      	lsls	r3, r1
90009a08:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
90009a0c:	4770      	bx	lr
90009a0e:	bf00      	nop
90009a10:	e000e100 	.word	0xe000e100

90009a14 <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
90009a14:	2800      	cmp	r0, #0
90009a16:	db0c      	blt.n	90009a32 <HAL_NVIC_DisableIRQ+0x1e>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
90009a18:	0943      	lsrs	r3, r0, #5
90009a1a:	2201      	movs	r2, #1
90009a1c:	f000 001f 	and.w	r0, r0, #31
90009a20:	4904      	ldr	r1, [pc, #16]	; (90009a34 <HAL_NVIC_DisableIRQ+0x20>)
90009a22:	3320      	adds	r3, #32
90009a24:	4082      	lsls	r2, r0
90009a26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
90009a2a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
90009a2e:	f3bf 8f6f 	isb	sy
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
90009a32:	4770      	bx	lr
90009a34:	e000e100 	.word	0xe000e100

90009a38 <HAL_MPU_Disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
90009a38:	f3bf 8f5f 	dmb	sy
{
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
90009a3c:	4b04      	ldr	r3, [pc, #16]	; (90009a50 <HAL_MPU_Disable+0x18>)

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
90009a3e:	2100      	movs	r1, #0
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
90009a40:	6a5a      	ldr	r2, [r3, #36]	; 0x24
90009a42:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
90009a46:	625a      	str	r2, [r3, #36]	; 0x24
  MPU->CTRL = 0;
90009a48:	f8c3 1094 	str.w	r1, [r3, #148]	; 0x94
}
90009a4c:	4770      	bx	lr
90009a4e:	bf00      	nop
90009a50:	e000ed00 	.word	0xe000ed00

90009a54 <HAL_MPU_Enable>:
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
90009a54:	4b06      	ldr	r3, [pc, #24]	; (90009a70 <HAL_MPU_Enable+0x1c>)
90009a56:	f040 0001 	orr.w	r0, r0, #1
90009a5a:	f8c3 0094 	str.w	r0, [r3, #148]	; 0x94

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
90009a5e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
90009a60:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
90009a64:	625a      	str	r2, [r3, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
90009a66:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
90009a6a:	f3bf 8f6f 	isb	sy

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
90009a6e:	4770      	bx	lr
90009a70:	e000ed00 	.word	0xe000ed00

90009a74 <HAL_MPU_ConfigRegion>:
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
90009a74:	4a17      	ldr	r2, [pc, #92]	; (90009ad4 <HAL_MPU_ConfigRegion+0x60>)
90009a76:	7843      	ldrb	r3, [r0, #1]
90009a78:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  if ((MPU_Init->Enable) != 0UL)
90009a7c:	7801      	ldrb	r1, [r0, #0]
90009a7e:	b321      	cbz	r1, 90009aca <HAL_MPU_ConfigRegion+0x56>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
90009a80:	6843      	ldr	r3, [r0, #4]
{
90009a82:	b500      	push	{lr}
    MPU->RBAR = MPU_Init->BaseAddress;
90009a84:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
90009a88:	7ac3      	ldrb	r3, [r0, #11]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
90009a8a:	f890 c00c 	ldrb.w	ip, [r0, #12]
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
90009a8e:	061b      	lsls	r3, r3, #24
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
90009a90:	f890 e00f 	ldrb.w	lr, [r0, #15]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
90009a94:	ea43 730c 	orr.w	r3, r3, ip, lsl #28
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
90009a98:	f890 c00a 	ldrb.w	ip, [r0, #10]
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
90009a9c:	430b      	orrs	r3, r1
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
90009a9e:	7b81      	ldrb	r1, [r0, #14]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
90009aa0:	ea43 43cc 	orr.w	r3, r3, ip, lsl #19
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
90009aa4:	f890 c00d 	ldrb.w	ip, [r0, #13]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
90009aa8:	ea43 438c 	orr.w	r3, r3, ip, lsl #18
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
90009aac:	f890 c009 	ldrb.w	ip, [r0, #9]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
90009ab0:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
90009ab4:	7a01      	ldrb	r1, [r0, #8]
90009ab6:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
90009aba:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
90009abe:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
90009ac2:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
90009ac6:	f85d fb04 	ldr.w	pc, [sp], #4
    MPU->RBAR = 0x00;
90009aca:	f8c2 109c 	str.w	r1, [r2, #156]	; 0x9c
    MPU->RASR = 0x00;
90009ace:	f8c2 10a0 	str.w	r1, [r2, #160]	; 0xa0
90009ad2:	4770      	bx	lr
90009ad4:	e000ed00 	.word	0xe000ed00

90009ad8 <HAL_CRC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
90009ad8:	2800      	cmp	r0, #0
90009ada:	d036      	beq.n	90009b4a <HAL_CRC_Init+0x72>
{
90009adc:	b510      	push	{r4, lr}
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
90009ade:	7f43      	ldrb	r3, [r0, #29]
90009ae0:	4604      	mov	r4, r0
90009ae2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
90009ae6:	b363      	cbz	r3, 90009b42 <HAL_CRC_Init+0x6a>
    hcrc->Lock = HAL_UNLOCKED;
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
90009ae8:	2202      	movs	r2, #2

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
90009aea:	7923      	ldrb	r3, [r4, #4]
  hcrc->State = HAL_CRC_STATE_BUSY;
90009aec:	7762      	strb	r2, [r4, #29]
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
90009aee:	b9f3      	cbnz	r3, 90009b2e <HAL_CRC_Init+0x56>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
90009af0:	6823      	ldr	r3, [r4, #0]
90009af2:	4a17      	ldr	r2, [pc, #92]	; (90009b50 <HAL_CRC_Init+0x78>)
90009af4:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
90009af6:	689a      	ldr	r2, [r3, #8]
90009af8:	f022 0218 	bic.w	r2, r2, #24
90009afc:	609a      	str	r2, [r3, #8]
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
90009afe:	7962      	ldrb	r2, [r4, #5]
90009b00:	b18a      	cbz	r2, 90009b26 <HAL_CRC_Init+0x4e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
90009b02:	6922      	ldr	r2, [r4, #16]
90009b04:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
90009b06:	689a      	ldr	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
90009b08:	e9d4 0105 	ldrd	r0, r1, [r4, #20]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
90009b0c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
90009b10:	4302      	orrs	r2, r0

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;

  /* Return function status */
  return HAL_OK;
90009b12:	2000      	movs	r0, #0
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
90009b14:	609a      	str	r2, [r3, #8]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
90009b16:	689a      	ldr	r2, [r3, #8]
90009b18:	f022 0280 	bic.w	r2, r2, #128	; 0x80
90009b1c:	430a      	orrs	r2, r1
  hcrc->State = HAL_CRC_STATE_READY;
90009b1e:	2101      	movs	r1, #1
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
90009b20:	609a      	str	r2, [r3, #8]
  hcrc->State = HAL_CRC_STATE_READY;
90009b22:	7761      	strb	r1, [r4, #29]
}
90009b24:	bd10      	pop	{r4, pc}
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
90009b26:	f04f 32ff 	mov.w	r2, #4294967295
90009b2a:	611a      	str	r2, [r3, #16]
90009b2c:	e7eb      	b.n	90009b06 <HAL_CRC_Init+0x2e>
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
90009b2e:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
90009b32:	4620      	mov	r0, r4
90009b34:	f000 f80e 	bl	90009b54 <HAL_CRCEx_Polynomial_Set>
90009b38:	b908      	cbnz	r0, 90009b3e <HAL_CRC_Init+0x66>
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
90009b3a:	6823      	ldr	r3, [r4, #0]
90009b3c:	e7df      	b.n	90009afe <HAL_CRC_Init+0x26>
    return HAL_ERROR;
90009b3e:	2001      	movs	r0, #1
}
90009b40:	bd10      	pop	{r4, pc}
    hcrc->Lock = HAL_UNLOCKED;
90009b42:	7702      	strb	r2, [r0, #28]
    HAL_CRC_MspInit(hcrc);
90009b44:	f7fa fe92 	bl	9000486c <HAL_CRC_MspInit>
90009b48:	e7ce      	b.n	90009ae8 <HAL_CRC_Init+0x10>
    return HAL_ERROR;
90009b4a:	2001      	movs	r0, #1
}
90009b4c:	4770      	bx	lr
90009b4e:	bf00      	nop
90009b50:	04c11db7 	.word	0x04c11db7

90009b54 <HAL_CRCEx_Polynomial_Set>:

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */ 
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
90009b54:	07cb      	lsls	r3, r1, #31
90009b56:	d51a      	bpl.n	90009b8e <HAL_CRCEx_Polynomial_Set+0x3a>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
90009b58:	231e      	movs	r3, #30
{
90009b5a:	b410      	push	{r4}
90009b5c:	e001      	b.n	90009b62 <HAL_CRCEx_Polynomial_Set+0xe>
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
90009b5e:	3b01      	subs	r3, #1
90009b60:	d317      	bcc.n	90009b92 <HAL_CRCEx_Polynomial_Set+0x3e>
90009b62:	fa21 fc03 	lsr.w	ip, r1, r3
90009b66:	f01c 0f01 	tst.w	ip, #1
90009b6a:	d0f8      	beq.n	90009b5e <HAL_CRCEx_Polynomial_Set+0xa>
    {
    }

    switch (PolyLength)
90009b6c:	2a18      	cmp	r2, #24
90009b6e:	d811      	bhi.n	90009b94 <HAL_CRCEx_Polynomial_Set+0x40>
90009b70:	e8df f002 	tbb	[pc, r2]
90009b74:	10101016 	.word	0x10101016
90009b78:	10101010 	.word	0x10101010
90009b7c:	10101024 	.word	0x10101024
90009b80:	10101010 	.word	0x10101010
90009b84:	10101021 	.word	0x10101021
90009b88:	10101010 	.word	0x10101010
90009b8c:	14          	.byte	0x14
90009b8d:	00          	.byte	0x00
    status =  HAL_ERROR;
90009b8e:	2001      	movs	r0, #1
    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
  }
  /* Return function status */
  return status;
}
90009b90:	4770      	bx	lr
    switch (PolyLength)
90009b92:	b12a      	cbz	r2, 90009ba0 <HAL_CRCEx_Polynomial_Set+0x4c>
        status =  HAL_ERROR;
90009b94:	2001      	movs	r0, #1
}
90009b96:	f85d 4b04 	ldr.w	r4, [sp], #4
90009b9a:	4770      	bx	lr
        if (msb >= HAL_CRC_LENGTH_7B)
90009b9c:	2b06      	cmp	r3, #6
90009b9e:	d8f9      	bhi.n	90009b94 <HAL_CRCEx_Polynomial_Set+0x40>
    WRITE_REG(hcrc->Instance->POL, Pol);
90009ba0:	6804      	ldr	r4, [r0, #0]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
90009ba2:	2000      	movs	r0, #0
    WRITE_REG(hcrc->Instance->POL, Pol);
90009ba4:	6161      	str	r1, [r4, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
90009ba6:	68a3      	ldr	r3, [r4, #8]
90009ba8:	f023 0318 	bic.w	r3, r3, #24
90009bac:	4313      	orrs	r3, r2
90009bae:	60a3      	str	r3, [r4, #8]
}
90009bb0:	f85d 4b04 	ldr.w	r4, [sp], #4
90009bb4:	4770      	bx	lr
        if (msb >= HAL_CRC_LENGTH_8B)
90009bb6:	2b07      	cmp	r3, #7
90009bb8:	d9f2      	bls.n	90009ba0 <HAL_CRCEx_Polynomial_Set+0x4c>
90009bba:	e7eb      	b.n	90009b94 <HAL_CRCEx_Polynomial_Set+0x40>
        if (msb >= HAL_CRC_LENGTH_16B)
90009bbc:	2b0f      	cmp	r3, #15
90009bbe:	d9ef      	bls.n	90009ba0 <HAL_CRCEx_Polynomial_Set+0x4c>
90009bc0:	e7e8      	b.n	90009b94 <HAL_CRCEx_Polynomial_Set+0x40>
90009bc2:	bf00      	nop

90009bc4 <HAL_DMA2D_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
90009bc4:	2800      	cmp	r0, #0
90009bc6:	d035      	beq.n	90009c34 <HAL_DMA2D_Init+0x70>
{
90009bc8:	b538      	push	{r3, r4, r5, lr}

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
90009bca:	f890 3061 	ldrb.w	r3, [r0, #97]	; 0x61
90009bce:	4604      	mov	r4, r0
90009bd0:	f003 02ff 	and.w	r2, r3, #255	; 0xff
90009bd4:	b34b      	cbz	r3, 90009c2a <HAL_DMA2D_Init+0x66>

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
90009bd6:	6823      	ldr	r3, [r4, #0]
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
90009bd8:	2002      	movs	r0, #2
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
90009bda:	6862      	ldr	r2, [r4, #4]
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
90009bdc:	f884 0061 	strb.w	r0, [r4, #97]	; 0x61
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
90009be0:	69e1      	ldr	r1, [r4, #28]
90009be2:	681d      	ldr	r5, [r3, #0]
90009be4:	4814      	ldr	r0, [pc, #80]	; (90009c38 <HAL_DMA2D_Init+0x74>)
90009be6:	4311      	orrs	r1, r2

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
90009be8:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
90009bea:	4028      	ands	r0, r5
             hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
90009bec:	68e5      	ldr	r5, [r4, #12]
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
90009bee:	4301      	orrs	r1, r0
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
90009bf0:	69a0      	ldr	r0, [r4, #24]
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
90009bf2:	6019      	str	r1, [r3, #0]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
90009bf4:	4302      	orrs	r2, r0
90009bf6:	6b59      	ldr	r1, [r3, #52]	; 0x34
90009bf8:	4810      	ldr	r0, [pc, #64]	; (90009c3c <HAL_DMA2D_Init+0x78>)
90009bfa:	4008      	ands	r0, r1
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
90009bfc:	4910      	ldr	r1, [pc, #64]	; (90009c40 <HAL_DMA2D_Init+0x7c>)
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
90009bfe:	4302      	orrs	r2, r0
90009c00:	635a      	str	r2, [r3, #52]	; 0x34
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
90009c02:	6c1a      	ldr	r2, [r3, #64]	; 0x40
90009c04:	4011      	ands	r1, r2
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
90009c06:	e9d4 0204 	ldrd	r0, r2, [r4, #16]
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
90009c0a:	4329      	orrs	r1, r5
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
90009c0c:	0552      	lsls	r2, r2, #21
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
90009c0e:	6419      	str	r1, [r3, #64]	; 0x40
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
90009c10:	6b59      	ldr	r1, [r3, #52]	; 0x34
90009c12:	ea42 5200 	orr.w	r2, r2, r0, lsl #20
             ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | \
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
90009c16:	2000      	movs	r0, #0
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
90009c18:	f421 1140 	bic.w	r1, r1, #3145728	; 0x300000
90009c1c:	430a      	orrs	r2, r1
90009c1e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
90009c20:	2301      	movs	r3, #1
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
90009c22:	6660      	str	r0, [r4, #100]	; 0x64
  hdma2d->State  = HAL_DMA2D_STATE_READY;
90009c24:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61

  return HAL_OK;
}
90009c28:	bd38      	pop	{r3, r4, r5, pc}
    hdma2d->Lock = HAL_UNLOCKED;
90009c2a:	f880 2060 	strb.w	r2, [r0, #96]	; 0x60
    HAL_DMA2D_MspInit(hdma2d);
90009c2e:	f7fa fe35 	bl	9000489c <HAL_DMA2D_MspInit>
90009c32:	e7d0      	b.n	90009bd6 <HAL_DMA2D_Init+0x12>
    return HAL_ERROR;
90009c34:	2001      	movs	r0, #1
}
90009c36:	4770      	bx	lr
90009c38:	fff8ffbf 	.word	0xfff8ffbf
90009c3c:	fffffef8 	.word	0xfffffef8
90009c40:	ffff0000 	.word	0xffff0000

90009c44 <HAL_DMA2D_LineEventCallback>:
90009c44:	4770      	bx	lr
90009c46:	bf00      	nop

90009c48 <HAL_DMA2D_CLUTLoadingCpltCallback>:
90009c48:	4770      	bx	lr
90009c4a:	bf00      	nop

90009c4c <HAL_DMA2D_IRQHandler>:
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
90009c4c:	6803      	ldr	r3, [r0, #0]
{
90009c4e:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
90009c50:	685d      	ldr	r5, [r3, #4]
{
90009c52:	4604      	mov	r4, r0
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
90009c54:	681e      	ldr	r6, [r3, #0]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
90009c56:	07ea      	lsls	r2, r5, #31
90009c58:	d501      	bpl.n	90009c5e <HAL_DMA2D_IRQHandler+0x12>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
90009c5a:	05f1      	lsls	r1, r6, #23
90009c5c:	d456      	bmi.n	90009d0c <HAL_DMA2D_IRQHandler+0xc0>
        hdma2d->XferErrorCallback(hdma2d);
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
90009c5e:	06aa      	lsls	r2, r5, #26
90009c60:	d501      	bpl.n	90009c66 <HAL_DMA2D_IRQHandler+0x1a>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
90009c62:	04b3      	lsls	r3, r6, #18
90009c64:	d43b      	bmi.n	90009cde <HAL_DMA2D_IRQHandler+0x92>
        hdma2d->XferErrorCallback(hdma2d);
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
90009c66:	0728      	lsls	r0, r5, #28
90009c68:	d501      	bpl.n	90009c6e <HAL_DMA2D_IRQHandler+0x22>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
90009c6a:	0531      	lsls	r1, r6, #20
90009c6c:	d421      	bmi.n	90009cb2 <HAL_DMA2D_IRQHandler+0x66>
        hdma2d->XferErrorCallback(hdma2d);
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
90009c6e:	076a      	lsls	r2, r5, #29
90009c70:	d501      	bpl.n	90009c76 <HAL_DMA2D_IRQHandler+0x2a>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
90009c72:	0573      	lsls	r3, r6, #21
90009c74:	d472      	bmi.n	90009d5c <HAL_DMA2D_IRQHandler+0x110>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
90009c76:	07a8      	lsls	r0, r5, #30
90009c78:	d501      	bpl.n	90009c7e <HAL_DMA2D_IRQHandler+0x32>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
90009c7a:	05b1      	lsls	r1, r6, #22
90009c7c:	d404      	bmi.n	90009c88 <HAL_DMA2D_IRQHandler+0x3c>
        hdma2d->XferCpltCallback(hdma2d);
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
90009c7e:	06ea      	lsls	r2, r5, #27
90009c80:	d501      	bpl.n	90009c86 <HAL_DMA2D_IRQHandler+0x3a>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
90009c82:	04f3      	lsls	r3, r6, #19
90009c84:	d457      	bmi.n	90009d36 <HAL_DMA2D_IRQHandler+0xea>
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
90009c86:	bd70      	pop	{r4, r5, r6, pc}
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
90009c88:	6823      	ldr	r3, [r4, #0]
90009c8a:	681a      	ldr	r2, [r3, #0]
90009c8c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
90009c90:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
90009c92:	2202      	movs	r2, #2
90009c94:	609a      	str	r2, [r3, #8]
      hdma2d->State = HAL_DMA2D_STATE_READY;
90009c96:	2201      	movs	r2, #1
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
90009c98:	6e63      	ldr	r3, [r4, #100]	; 0x64
90009c9a:	6663      	str	r3, [r4, #100]	; 0x64
      __HAL_UNLOCK(hdma2d);
90009c9c:	2300      	movs	r3, #0
      hdma2d->State = HAL_DMA2D_STATE_READY;
90009c9e:	f884 2061 	strb.w	r2, [r4, #97]	; 0x61
      __HAL_UNLOCK(hdma2d);
90009ca2:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
      if (hdma2d->XferCpltCallback != NULL)
90009ca6:	6a23      	ldr	r3, [r4, #32]
90009ca8:	2b00      	cmp	r3, #0
90009caa:	d0e8      	beq.n	90009c7e <HAL_DMA2D_IRQHandler+0x32>
        hdma2d->XferCpltCallback(hdma2d);
90009cac:	4620      	mov	r0, r4
90009cae:	4798      	blx	r3
90009cb0:	e7e5      	b.n	90009c7e <HAL_DMA2D_IRQHandler+0x32>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
90009cb2:	6823      	ldr	r3, [r4, #0]
90009cb4:	681a      	ldr	r2, [r3, #0]
90009cb6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
90009cba:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
90009cbc:	2208      	movs	r2, #8
90009cbe:	609a      	str	r2, [r3, #8]
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
90009cc0:	2204      	movs	r2, #4
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
90009cc2:	6e63      	ldr	r3, [r4, #100]	; 0x64
90009cc4:	4313      	orrs	r3, r2
90009cc6:	6663      	str	r3, [r4, #100]	; 0x64
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
90009cc8:	f884 2061 	strb.w	r2, [r4, #97]	; 0x61
      __HAL_UNLOCK(hdma2d);
90009ccc:	2200      	movs	r2, #0
      if (hdma2d->XferErrorCallback != NULL)
90009cce:	6a63      	ldr	r3, [r4, #36]	; 0x24
      __HAL_UNLOCK(hdma2d);
90009cd0:	f884 2060 	strb.w	r2, [r4, #96]	; 0x60
      if (hdma2d->XferErrorCallback != NULL)
90009cd4:	2b00      	cmp	r3, #0
90009cd6:	d0ca      	beq.n	90009c6e <HAL_DMA2D_IRQHandler+0x22>
        hdma2d->XferErrorCallback(hdma2d);
90009cd8:	4620      	mov	r0, r4
90009cda:	4798      	blx	r3
90009cdc:	e7c7      	b.n	90009c6e <HAL_DMA2D_IRQHandler+0x22>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
90009cde:	6823      	ldr	r3, [r4, #0]
90009ce0:	681a      	ldr	r2, [r3, #0]
90009ce2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
90009ce6:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
90009ce8:	2220      	movs	r2, #32
90009cea:	609a      	str	r2, [r3, #8]
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
90009cec:	2204      	movs	r2, #4
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
90009cee:	6e63      	ldr	r3, [r4, #100]	; 0x64
90009cf0:	f043 0302 	orr.w	r3, r3, #2
90009cf4:	6663      	str	r3, [r4, #100]	; 0x64
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
90009cf6:	f884 2061 	strb.w	r2, [r4, #97]	; 0x61
      __HAL_UNLOCK(hdma2d);
90009cfa:	2200      	movs	r2, #0
      if (hdma2d->XferErrorCallback != NULL)
90009cfc:	6a63      	ldr	r3, [r4, #36]	; 0x24
      __HAL_UNLOCK(hdma2d);
90009cfe:	f884 2060 	strb.w	r2, [r4, #96]	; 0x60
      if (hdma2d->XferErrorCallback != NULL)
90009d02:	2b00      	cmp	r3, #0
90009d04:	d0af      	beq.n	90009c66 <HAL_DMA2D_IRQHandler+0x1a>
        hdma2d->XferErrorCallback(hdma2d);
90009d06:	4620      	mov	r0, r4
90009d08:	4798      	blx	r3
90009d0a:	e7ac      	b.n	90009c66 <HAL_DMA2D_IRQHandler+0x1a>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
90009d0c:	681a      	ldr	r2, [r3, #0]
90009d0e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
90009d12:	601a      	str	r2, [r3, #0]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
90009d14:	6e42      	ldr	r2, [r0, #100]	; 0x64
90009d16:	f042 0201 	orr.w	r2, r2, #1
90009d1a:	6642      	str	r2, [r0, #100]	; 0x64
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
90009d1c:	2201      	movs	r2, #1
90009d1e:	609a      	str	r2, [r3, #8]
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
90009d20:	2304      	movs	r3, #4
90009d22:	f880 3061 	strb.w	r3, [r0, #97]	; 0x61
      __HAL_UNLOCK(hdma2d);
90009d26:	2300      	movs	r3, #0
90009d28:	f880 3060 	strb.w	r3, [r0, #96]	; 0x60
      if (hdma2d->XferErrorCallback != NULL)
90009d2c:	6a43      	ldr	r3, [r0, #36]	; 0x24
90009d2e:	2b00      	cmp	r3, #0
90009d30:	d095      	beq.n	90009c5e <HAL_DMA2D_IRQHandler+0x12>
        hdma2d->XferErrorCallback(hdma2d);
90009d32:	4798      	blx	r3
90009d34:	e793      	b.n	90009c5e <HAL_DMA2D_IRQHandler+0x12>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
90009d36:	6823      	ldr	r3, [r4, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
90009d38:	2010      	movs	r0, #16
      hdma2d->State = HAL_DMA2D_STATE_READY;
90009d3a:	2101      	movs	r1, #1
      __HAL_UNLOCK(hdma2d);
90009d3c:	2500      	movs	r5, #0
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
90009d3e:	681a      	ldr	r2, [r3, #0]
90009d40:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
90009d44:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
90009d46:	6098      	str	r0, [r3, #8]
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
90009d48:	4620      	mov	r0, r4
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
90009d4a:	6e63      	ldr	r3, [r4, #100]	; 0x64
      __HAL_UNLOCK(hdma2d);
90009d4c:	f884 5060 	strb.w	r5, [r4, #96]	; 0x60
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
90009d50:	6663      	str	r3, [r4, #100]	; 0x64
      hdma2d->State = HAL_DMA2D_STATE_READY;
90009d52:	f884 1061 	strb.w	r1, [r4, #97]	; 0x61
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
90009d56:	f7ff ff77 	bl	90009c48 <HAL_DMA2D_CLUTLoadingCpltCallback>
}
90009d5a:	bd70      	pop	{r4, r5, r6, pc}
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
90009d5c:	6823      	ldr	r3, [r4, #0]
      HAL_DMA2D_LineEventCallback(hdma2d);
90009d5e:	4620      	mov	r0, r4
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
90009d60:	681a      	ldr	r2, [r3, #0]
90009d62:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
90009d66:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
90009d68:	2204      	movs	r2, #4
90009d6a:	609a      	str	r2, [r3, #8]
      HAL_DMA2D_LineEventCallback(hdma2d);
90009d6c:	f7ff ff6a 	bl	90009c44 <HAL_DMA2D_LineEventCallback>
90009d70:	e781      	b.n	90009c76 <HAL_DMA2D_IRQHandler+0x2a>
90009d72:	bf00      	nop

90009d74 <HAL_DMA2D_ConfigLayer>:
  {
    assert_param(IS_DMA2D_CHROMA_SUB_SAMPLING(hdma2d->LayerCfg[LayerIdx].ChromaSubSampling));
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
90009d74:	f890 2060 	ldrb.w	r2, [r0, #96]	; 0x60
90009d78:	2a01      	cmp	r2, #1
90009d7a:	d065      	beq.n	90009e48 <HAL_DMA2D_ConfigLayer+0xd4>
90009d7c:	4603      	mov	r3, r0
  hdma2d->State = HAL_DMA2D_STATE_BUSY;

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
90009d7e:	ebc1 00c1 	rsb	r0, r1, r1, lsl #3
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
90009d82:	2202      	movs	r2, #2
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
90009d84:	eb03 0080 	add.w	r0, r3, r0, lsl #2
{
90009d88:	b470      	push	{r4, r5, r6}
  __HAL_LOCK(hdma2d);
90009d8a:	2401      	movs	r4, #1
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
90009d8c:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
  __HAL_LOCK(hdma2d);
90009d90:	f883 4060 	strb.w	r4, [r3, #96]	; 0x60
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
90009d94:	6b82      	ldr	r2, [r0, #56]	; 0x38
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
90009d96:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
90009d98:	6b05      	ldr	r5, [r0, #48]	; 0x30
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
90009d9a:	0512      	lsls	r2, r2, #20
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
90009d9c:	f1a4 0c09 	sub.w	ip, r4, #9
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
90009da0:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
90009da4:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
90009da6:	f1bc 0f01 	cmp.w	ip, #1
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
90009daa:	ea42 0204 	orr.w	r2, r2, r4
90009dae:	ea42 5245 	orr.w	r2, r2, r5, lsl #21
  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
90009db2:	d922      	bls.n	90009dfa <HAL_DMA2D_ConfigLayer+0x86>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
90009db4:	6b45      	ldr	r5, [r0, #52]	; 0x34
90009db6:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
90009dba:	b981      	cbnz	r1, 90009dde <HAL_DMA2D_ConfigLayer+0x6a>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
90009dbc:	6818      	ldr	r0, [r3, #0]
90009dbe:	4923      	ldr	r1, [pc, #140]	; (90009e4c <HAL_DMA2D_ConfigLayer+0xd8>)
90009dc0:	6a45      	ldr	r5, [r0, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
90009dc2:	6a9c      	ldr	r4, [r3, #40]	; 0x28
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
90009dc4:	4029      	ands	r1, r5
90009dc6:	4311      	orrs	r1, r2
90009dc8:	6241      	str	r1, [r0, #36]	; 0x24
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
90009dca:	6184      	str	r4, [r0, #24]
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
90009dcc:	2200      	movs	r2, #0
  hdma2d->State = HAL_DMA2D_STATE_READY;
90009dce:	2101      	movs	r1, #1

  return HAL_OK;
90009dd0:	4610      	mov	r0, r2
  hdma2d->State = HAL_DMA2D_STATE_READY;
90009dd2:	f883 1061 	strb.w	r1, [r3, #97]	; 0x61
  __HAL_UNLOCK(hdma2d);
90009dd6:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
}
90009dda:	bc70      	pop	{r4, r5, r6}
90009ddc:	4770      	bx	lr
    if (pLayerCfg->InputColorMode == DMA2D_INPUT_YCBCR)
90009dde:	2c0b      	cmp	r4, #11
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
90009de0:	681c      	ldr	r4, [r3, #0]
    if (pLayerCfg->InputColorMode == DMA2D_INPUT_YCBCR)
90009de2:	d129      	bne.n	90009e38 <HAL_DMA2D_ConfigLayer+0xc4>
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
90009de4:	69e5      	ldr	r5, [r4, #28]
90009de6:	491a      	ldr	r1, [pc, #104]	; (90009e50 <HAL_DMA2D_ConfigLayer+0xdc>)
90009de8:	4029      	ands	r1, r5
      regValue |= (pLayerCfg->ChromaSubSampling << DMA2D_FGPFCCR_CSS_Pos);
90009dea:	6c05      	ldr	r5, [r0, #64]	; 0x40
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
90009dec:	6a80      	ldr	r0, [r0, #40]	; 0x28
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
90009dee:	ea41 4185 	orr.w	r1, r1, r5, lsl #18
90009df2:	4311      	orrs	r1, r2
90009df4:	61e1      	str	r1, [r4, #28]
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
90009df6:	6120      	str	r0, [r4, #16]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
90009df8:	e7e8      	b.n	90009dcc <HAL_DMA2D_ConfigLayer+0x58>
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
90009dfa:	6b44      	ldr	r4, [r0, #52]	; 0x34
90009dfc:	f004 447f 	and.w	r4, r4, #4278190080	; 0xff000000
90009e00:	4314      	orrs	r4, r2
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
90009e02:	b961      	cbnz	r1, 90009e1e <HAL_DMA2D_ConfigLayer+0xaa>
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
90009e04:	6819      	ldr	r1, [r3, #0]
90009e06:	4a11      	ldr	r2, [pc, #68]	; (90009e4c <HAL_DMA2D_ConfigLayer+0xd8>)
90009e08:	6a4e      	ldr	r6, [r1, #36]	; 0x24
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
90009e0a:	6b58      	ldr	r0, [r3, #52]	; 0x34
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
90009e0c:	4032      	ands	r2, r6
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
90009e0e:	6a9d      	ldr	r5, [r3, #40]	; 0x28
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
90009e10:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
90009e14:	4322      	orrs	r2, r4
90009e16:	624a      	str	r2, [r1, #36]	; 0x24
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
90009e18:	618d      	str	r5, [r1, #24]
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
90009e1a:	6288      	str	r0, [r1, #40]	; 0x28
90009e1c:	e7d6      	b.n	90009dcc <HAL_DMA2D_ConfigLayer+0x58>
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
90009e1e:	6819      	ldr	r1, [r3, #0]
90009e20:	4a0a      	ldr	r2, [pc, #40]	; (90009e4c <HAL_DMA2D_ConfigLayer+0xd8>)
90009e22:	69cd      	ldr	r5, [r1, #28]
90009e24:	402a      	ands	r2, r5
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
90009e26:	6a85      	ldr	r5, [r0, #40]	; 0x28
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
90009e28:	4322      	orrs	r2, r4
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
90009e2a:	6b44      	ldr	r4, [r0, #52]	; 0x34
90009e2c:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
90009e30:	61ca      	str	r2, [r1, #28]
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
90009e32:	610d      	str	r5, [r1, #16]
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
90009e34:	620c      	str	r4, [r1, #32]
90009e36:	e7c9      	b.n	90009dcc <HAL_DMA2D_ConfigLayer+0x58>
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
90009e38:	69e5      	ldr	r5, [r4, #28]
90009e3a:	4904      	ldr	r1, [pc, #16]	; (90009e4c <HAL_DMA2D_ConfigLayer+0xd8>)
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
90009e3c:	6a80      	ldr	r0, [r0, #40]	; 0x28
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
90009e3e:	4029      	ands	r1, r5
90009e40:	4311      	orrs	r1, r2
90009e42:	61e1      	str	r1, [r4, #28]
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
90009e44:	6120      	str	r0, [r4, #16]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
90009e46:	e7c1      	b.n	90009dcc <HAL_DMA2D_ConfigLayer+0x58>
  __HAL_LOCK(hdma2d);
90009e48:	2002      	movs	r0, #2
}
90009e4a:	4770      	bx	lr
90009e4c:	00ccfff0 	.word	0x00ccfff0
90009e50:	00c0fff0 	.word	0x00c0fff0

90009e54 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
90009e54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
90009e58:	680c      	ldr	r4, [r1, #0]
{
90009e5a:	b083      	sub	sp, #12
  while (((GPIO_Init->Pin) >> position) != 0x00U)
90009e5c:	2c00      	cmp	r4, #0
90009e5e:	f000 80a7 	beq.w	90009fb0 <HAL_GPIO_Init+0x15c>
90009e62:	f04f 0c00 	mov.w	ip, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
90009e66:	4f8a      	ldr	r7, [pc, #552]	; (9000a090 <HAL_GPIO_Init+0x23c>)
  uint32_t position = 0x00U;
90009e68:	4663      	mov	r3, ip
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
90009e6a:	2201      	movs	r2, #1
90009e6c:	409a      	lsls	r2, r3
    if (iocurrent != 0x00U)
90009e6e:	ea12 0e04 	ands.w	lr, r2, r4
90009e72:	f000 8096 	beq.w	90009fa2 <HAL_GPIO_Init+0x14e>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
90009e76:	684d      	ldr	r5, [r1, #4]
90009e78:	f005 0903 	and.w	r9, r5, #3
90009e7c:	f109 36ff 	add.w	r6, r9, #4294967295
90009e80:	2e01      	cmp	r6, #1
90009e82:	f240 8098 	bls.w	90009fb6 <HAL_GPIO_Init+0x162>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
90009e86:	f1b9 0f03 	cmp.w	r9, #3
90009e8a:	f040 80d2 	bne.w	9000a032 <HAL_GPIO_Init+0x1de>
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
90009e8e:	fa09 f20c 	lsl.w	r2, r9, ip
90009e92:	ea6f 0802 	mvn.w	r8, r2
      temp = GPIOx->MODER;
90009e96:	6806      	ldr	r6, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
90009e98:	f415 3f40 	tst.w	r5, #196608	; 0x30000
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
90009e9c:	ea06 0608 	and.w	r6, r6, r8
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
90009ea0:	ea42 0206 	orr.w	r2, r2, r6
      GPIOx->MODER = temp;
90009ea4:	6002      	str	r2, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
90009ea6:	d07c      	beq.n	90009fa2 <HAL_GPIO_Init+0x14e>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
90009ea8:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
90009eac:	f023 0803 	bic.w	r8, r3, #3

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
90009eb0:	f003 0903 	and.w	r9, r3, #3
90009eb4:	260f      	movs	r6, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
90009eb6:	f042 0202 	orr.w	r2, r2, #2
90009eba:	f108 48b0 	add.w	r8, r8, #1476395008	; 0x58000000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
90009ebe:	ea4f 0989 	mov.w	r9, r9, lsl #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
90009ec2:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
90009ec6:	f508 6880 	add.w	r8, r8, #1024	; 0x400
90009eca:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
90009ece:	fa06 f609 	lsl.w	r6, r6, r9
        __HAL_RCC_SYSCFG_CLK_ENABLE();
90009ed2:	f002 0202 	and.w	r2, r2, #2
90009ed6:	9201      	str	r2, [sp, #4]
90009ed8:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
90009eda:	f8d8 2008 	ldr.w	r2, [r8, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
90009ede:	ea22 0206 	bic.w	r2, r2, r6
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
90009ee2:	4e6c      	ldr	r6, [pc, #432]	; (9000a094 <HAL_GPIO_Init+0x240>)
90009ee4:	42b0      	cmp	r0, r6
90009ee6:	d028      	beq.n	90009f3a <HAL_GPIO_Init+0xe6>
90009ee8:	f506 6680 	add.w	r6, r6, #1024	; 0x400
90009eec:	42b0      	cmp	r0, r6
90009eee:	f000 80ac 	beq.w	9000a04a <HAL_GPIO_Init+0x1f6>
90009ef2:	4e69      	ldr	r6, [pc, #420]	; (9000a098 <HAL_GPIO_Init+0x244>)
90009ef4:	42b0      	cmp	r0, r6
90009ef6:	f000 80ad 	beq.w	9000a054 <HAL_GPIO_Init+0x200>
90009efa:	4e68      	ldr	r6, [pc, #416]	; (9000a09c <HAL_GPIO_Init+0x248>)
90009efc:	42b0      	cmp	r0, r6
90009efe:	f000 809f 	beq.w	9000a040 <HAL_GPIO_Init+0x1ec>
90009f02:	4e67      	ldr	r6, [pc, #412]	; (9000a0a0 <HAL_GPIO_Init+0x24c>)
90009f04:	42b0      	cmp	r0, r6
90009f06:	f000 80af 	beq.w	9000a068 <HAL_GPIO_Init+0x214>
90009f0a:	4e66      	ldr	r6, [pc, #408]	; (9000a0a4 <HAL_GPIO_Init+0x250>)
90009f0c:	42b0      	cmp	r0, r6
90009f0e:	f000 80b0 	beq.w	9000a072 <HAL_GPIO_Init+0x21e>
90009f12:	4e65      	ldr	r6, [pc, #404]	; (9000a0a8 <HAL_GPIO_Init+0x254>)
90009f14:	42b0      	cmp	r0, r6
90009f16:	f000 80a2 	beq.w	9000a05e <HAL_GPIO_Init+0x20a>
90009f1a:	4e64      	ldr	r6, [pc, #400]	; (9000a0ac <HAL_GPIO_Init+0x258>)
90009f1c:	42b0      	cmp	r0, r6
90009f1e:	f000 80ad 	beq.w	9000a07c <HAL_GPIO_Init+0x228>
90009f22:	4e63      	ldr	r6, [pc, #396]	; (9000a0b0 <HAL_GPIO_Init+0x25c>)
90009f24:	42b0      	cmp	r0, r6
90009f26:	f000 80ae 	beq.w	9000a086 <HAL_GPIO_Init+0x232>
90009f2a:	4e62      	ldr	r6, [pc, #392]	; (9000a0b4 <HAL_GPIO_Init+0x260>)
90009f2c:	42b0      	cmp	r0, r6
90009f2e:	bf0c      	ite	eq
90009f30:	2609      	moveq	r6, #9
90009f32:	260a      	movne	r6, #10
90009f34:	fa06 f609 	lsl.w	r6, r6, r9
90009f38:	4332      	orrs	r2, r6
        SYSCFG->EXTICR[position >> 2U] = temp;
90009f3a:	f8c8 2008 	str.w	r2, [r8, #8]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
90009f3e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
90009f42:	f415 1f80 	tst.w	r5, #1048576	; 0x100000
        temp &= ~(iocurrent);
90009f46:	ea6f 060e 	mvn.w	r6, lr
        temp = EXTI->RTSR1;
90009f4a:	6812      	ldr	r2, [r2, #0]
        {
          temp |= iocurrent;
        }
        EXTI->RTSR1 = temp;
90009f4c:	f04f 48b0 	mov.w	r8, #1476395008	; 0x58000000
        temp &= ~(iocurrent);
90009f50:	bf0c      	ite	eq
90009f52:	4032      	andeq	r2, r6
          temp |= iocurrent;
90009f54:	ea4e 0202 	orrne.w	r2, lr, r2

        temp = EXTI->FTSR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
90009f58:	f415 1f00 	tst.w	r5, #2097152	; 0x200000
        EXTI->RTSR1 = temp;
90009f5c:	f8c8 2000 	str.w	r2, [r8]
        temp = EXTI->FTSR1;
90009f60:	f8d8 2004 	ldr.w	r2, [r8, #4]
        {
          temp |= iocurrent;
        }
        EXTI->FTSR1 = temp;
90009f64:	f04f 48b0 	mov.w	r8, #1476395008	; 0x58000000
        temp &= ~(iocurrent);
90009f68:	bf0c      	ite	eq
90009f6a:	4032      	andeq	r2, r6
          temp |= iocurrent;
90009f6c:	ea4e 0202 	orrne.w	r2, lr, r2

        temp = EXTI_CurrentCPU->EMR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
90009f70:	f415 3f00 	tst.w	r5, #131072	; 0x20000
        EXTI->FTSR1 = temp;
90009f74:	f8c8 2004 	str.w	r2, [r8, #4]
        temp = EXTI_CurrentCPU->EMR1;
90009f78:	f8d8 2084 	ldr.w	r2, [r8, #132]	; 0x84
        {
          temp |= iocurrent;
        }
        EXTI_CurrentCPU->EMR1 = temp;
90009f7c:	f04f 48b0 	mov.w	r8, #1476395008	; 0x58000000
        temp &= ~(iocurrent);
90009f80:	bf0c      	ite	eq
90009f82:	4032      	andeq	r2, r6
          temp |= iocurrent;
90009f84:	ea4e 0202 	orrne.w	r2, lr, r2

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
90009f88:	03ed      	lsls	r5, r5, #15
        {
          temp |= iocurrent;
        }
        EXTI_CurrentCPU->IMR1 = temp;
90009f8a:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
        EXTI_CurrentCPU->EMR1 = temp;
90009f8e:	f8c8 2084 	str.w	r2, [r8, #132]	; 0x84
        temp = EXTI_CurrentCPU->IMR1;
90009f92:	f8d8 2080 	ldr.w	r2, [r8, #128]	; 0x80
        temp &= ~(iocurrent);
90009f96:	bf54      	ite	pl
90009f98:	4032      	andpl	r2, r6
          temp |= iocurrent;
90009f9a:	ea4e 0202 	orrmi.w	r2, lr, r2
        EXTI_CurrentCPU->IMR1 = temp;
90009f9e:	f8c5 2080 	str.w	r2, [r5, #128]	; 0x80
      }
    }

    position++;
90009fa2:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00U)
90009fa4:	f10c 0c02 	add.w	ip, ip, #2
90009fa8:	fa34 f203 	lsrs.w	r2, r4, r3
90009fac:	f47f af5d 	bne.w	90009e6a <HAL_GPIO_Init+0x16>
  }
}
90009fb0:	b003      	add	sp, #12
90009fb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
90009fb6:	f04f 0803 	mov.w	r8, #3
        temp = GPIOx->OSPEEDR;
90009fba:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
90009fbc:	fa08 f80c 	lsl.w	r8, r8, ip
90009fc0:	ea26 0a08 	bic.w	sl, r6, r8
        temp |= (GPIO_Init->Speed << (position * 2U));
90009fc4:	68ce      	ldr	r6, [r1, #12]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
90009fc6:	ea6f 0808 	mvn.w	r8, r8
        temp |= (GPIO_Init->Speed << (position * 2U));
90009fca:	fa06 f60c 	lsl.w	r6, r6, ip
90009fce:	ea46 060a 	orr.w	r6, r6, sl
        GPIOx->OSPEEDR = temp;
90009fd2:	6086      	str	r6, [r0, #8]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
90009fd4:	f3c5 1600 	ubfx	r6, r5, #4, #1
        temp = GPIOx->OTYPER;
90009fd8:	f8d0 a004 	ldr.w	sl, [r0, #4]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
90009fdc:	409e      	lsls	r6, r3
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
90009fde:	ea2a 0202 	bic.w	r2, sl, r2
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
90009fe2:	4332      	orrs	r2, r6
        GPIOx->OTYPER = temp;
90009fe4:	6042      	str	r2, [r0, #4]
      temp = GPIOx->PUPDR;
90009fe6:	68c2      	ldr	r2, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
90009fe8:	f1b9 0f02 	cmp.w	r9, #2
      temp |= ((GPIO_Init->Pull) << (position * 2U));
90009fec:	688e      	ldr	r6, [r1, #8]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
90009fee:	ea02 0208 	and.w	r2, r2, r8
      temp |= ((GPIO_Init->Pull) << (position * 2U));
90009ff2:	fa06 f60c 	lsl.w	r6, r6, ip
90009ff6:	ea46 0602 	orr.w	r6, r6, r2
      GPIOx->PUPDR = temp;
90009ffa:	fa09 f20c 	lsl.w	r2, r9, ip
90009ffe:	60c6      	str	r6, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
9000a000:	f47f af49 	bne.w	90009e96 <HAL_GPIO_Init+0x42>
        temp = GPIOx->AFR[position >> 3U];
9000a004:	ea4f 09d3 	mov.w	r9, r3, lsr #3
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
9000a008:	f003 0b07 	and.w	fp, r3, #7
9000a00c:	260f      	movs	r6, #15
9000a00e:	eb00 0989 	add.w	r9, r0, r9, lsl #2
9000a012:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = GPIOx->AFR[position >> 3U];
9000a016:	f8d9 a020 	ldr.w	sl, [r9, #32]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
9000a01a:	fa06 f60b 	lsl.w	r6, r6, fp
9000a01e:	ea2a 0a06 	bic.w	sl, sl, r6
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
9000a022:	690e      	ldr	r6, [r1, #16]
9000a024:	fa06 f60b 	lsl.w	r6, r6, fp
9000a028:	ea46 060a 	orr.w	r6, r6, sl
        GPIOx->AFR[position >> 3U] = temp;
9000a02c:	f8c9 6020 	str.w	r6, [r9, #32]
9000a030:	e731      	b.n	90009e96 <HAL_GPIO_Init+0x42>
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
9000a032:	f04f 0803 	mov.w	r8, #3
9000a036:	fa08 f80c 	lsl.w	r8, r8, ip
9000a03a:	ea6f 0808 	mvn.w	r8, r8
9000a03e:	e7d2      	b.n	90009fe6 <HAL_GPIO_Init+0x192>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
9000a040:	2603      	movs	r6, #3
9000a042:	fa06 f609 	lsl.w	r6, r6, r9
9000a046:	4332      	orrs	r2, r6
9000a048:	e777      	b.n	90009f3a <HAL_GPIO_Init+0xe6>
9000a04a:	2601      	movs	r6, #1
9000a04c:	fa06 f609 	lsl.w	r6, r6, r9
9000a050:	4332      	orrs	r2, r6
9000a052:	e772      	b.n	90009f3a <HAL_GPIO_Init+0xe6>
9000a054:	2602      	movs	r6, #2
9000a056:	fa06 f609 	lsl.w	r6, r6, r9
9000a05a:	4332      	orrs	r2, r6
9000a05c:	e76d      	b.n	90009f3a <HAL_GPIO_Init+0xe6>
9000a05e:	2606      	movs	r6, #6
9000a060:	fa06 f609 	lsl.w	r6, r6, r9
9000a064:	4332      	orrs	r2, r6
9000a066:	e768      	b.n	90009f3a <HAL_GPIO_Init+0xe6>
9000a068:	2604      	movs	r6, #4
9000a06a:	fa06 f609 	lsl.w	r6, r6, r9
9000a06e:	4332      	orrs	r2, r6
9000a070:	e763      	b.n	90009f3a <HAL_GPIO_Init+0xe6>
9000a072:	2605      	movs	r6, #5
9000a074:	fa06 f609 	lsl.w	r6, r6, r9
9000a078:	4332      	orrs	r2, r6
9000a07a:	e75e      	b.n	90009f3a <HAL_GPIO_Init+0xe6>
9000a07c:	2607      	movs	r6, #7
9000a07e:	fa06 f609 	lsl.w	r6, r6, r9
9000a082:	4332      	orrs	r2, r6
9000a084:	e759      	b.n	90009f3a <HAL_GPIO_Init+0xe6>
9000a086:	2608      	movs	r6, #8
9000a088:	fa06 f609 	lsl.w	r6, r6, r9
9000a08c:	4332      	orrs	r2, r6
9000a08e:	e754      	b.n	90009f3a <HAL_GPIO_Init+0xe6>
9000a090:	58024400 	.word	0x58024400
9000a094:	58020000 	.word	0x58020000
9000a098:	58020800 	.word	0x58020800
9000a09c:	58020c00 	.word	0x58020c00
9000a0a0:	58021000 	.word	0x58021000
9000a0a4:	58021400 	.word	0x58021400
9000a0a8:	58021800 	.word	0x58021800
9000a0ac:	58021c00 	.word	0x58021c00
9000a0b0:	58022000 	.word	0x58022000
9000a0b4:	58022400 	.word	0x58022400

9000a0b8 <HAL_GPIO_DeInit>:
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00U)
9000a0b8:	2900      	cmp	r1, #0
9000a0ba:	f000 80a4 	beq.w	9000a206 <HAL_GPIO_DeInit+0x14e>
  uint32_t position = 0x00U;
9000a0be:	2300      	movs	r3, #0
{
9000a0c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9000a0c4:	f8df 9168 	ldr.w	r9, [pc, #360]	; 9000a230 <HAL_GPIO_DeInit+0x178>
9000a0c8:	b083      	sub	sp, #12
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
9000a0ca:	f8df 8168 	ldr.w	r8, [pc, #360]	; 9000a234 <HAL_GPIO_DeInit+0x17c>
9000a0ce:	f8df a168 	ldr.w	sl, [pc, #360]	; 9000a238 <HAL_GPIO_DeInit+0x180>
9000a0d2:	f8df b168 	ldr.w	fp, [pc, #360]	; 9000a23c <HAL_GPIO_DeInit+0x184>
    iocurrent = GPIO_Pin & (1UL << position) ;
9000a0d6:	f04f 0e01 	mov.w	lr, #1
9000a0da:	fa0e f203 	lsl.w	r2, lr, r3
    if (iocurrent != 0x00U)
9000a0de:	ea12 0c01 	ands.w	ip, r2, r1
9000a0e2:	d06b      	beq.n	9000a1bc <HAL_GPIO_DeInit+0x104>
      tmp = SYSCFG->EXTICR[position >> 2U];
9000a0e4:	f023 0503 	bic.w	r5, r3, #3
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
9000a0e8:	f003 0403 	and.w	r4, r3, #3
9000a0ec:	260f      	movs	r6, #15
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
9000a0ee:	4540      	cmp	r0, r8
9000a0f0:	444d      	add	r5, r9
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
9000a0f2:	ea4f 0484 	mov.w	r4, r4, lsl #2
      tmp = SYSCFG->EXTICR[position >> 2U];
9000a0f6:	68af      	ldr	r7, [r5, #8]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
9000a0f8:	fa06 f604 	lsl.w	r6, r6, r4
9000a0fc:	ea07 0706 	and.w	r7, r7, r6
9000a100:	9701      	str	r7, [sp, #4]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
9000a102:	d01f      	beq.n	9000a144 <HAL_GPIO_DeInit+0x8c>
9000a104:	4550      	cmp	r0, sl
9000a106:	d01a      	beq.n	9000a13e <HAL_GPIO_DeInit+0x86>
9000a108:	4558      	cmp	r0, fp
9000a10a:	d05e      	beq.n	9000a1ca <HAL_GPIO_DeInit+0x112>
9000a10c:	4f43      	ldr	r7, [pc, #268]	; (9000a21c <HAL_GPIO_DeInit+0x164>)
9000a10e:	42b8      	cmp	r0, r7
9000a110:	d065      	beq.n	9000a1de <HAL_GPIO_DeInit+0x126>
9000a112:	4f43      	ldr	r7, [pc, #268]	; (9000a220 <HAL_GPIO_DeInit+0x168>)
9000a114:	42b8      	cmp	r0, r7
9000a116:	d067      	beq.n	9000a1e8 <HAL_GPIO_DeInit+0x130>
9000a118:	4f42      	ldr	r7, [pc, #264]	; (9000a224 <HAL_GPIO_DeInit+0x16c>)
9000a11a:	42b8      	cmp	r0, r7
9000a11c:	d05a      	beq.n	9000a1d4 <HAL_GPIO_DeInit+0x11c>
9000a11e:	4f42      	ldr	r7, [pc, #264]	; (9000a228 <HAL_GPIO_DeInit+0x170>)
9000a120:	42b8      	cmp	r0, r7
9000a122:	d06b      	beq.n	9000a1fc <HAL_GPIO_DeInit+0x144>
9000a124:	4f41      	ldr	r7, [pc, #260]	; (9000a22c <HAL_GPIO_DeInit+0x174>)
9000a126:	42b8      	cmp	r0, r7
9000a128:	d06e      	beq.n	9000a208 <HAL_GPIO_DeInit+0x150>
9000a12a:	f8df e114 	ldr.w	lr, [pc, #276]	; 9000a240 <HAL_GPIO_DeInit+0x188>
9000a12e:	4570      	cmp	r0, lr
9000a130:	d05f      	beq.n	9000a1f2 <HAL_GPIO_DeInit+0x13a>
9000a132:	f8df e110 	ldr.w	lr, [pc, #272]	; 9000a244 <HAL_GPIO_DeInit+0x18c>
9000a136:	4570      	cmp	r0, lr
9000a138:	d06b      	beq.n	9000a212 <HAL_GPIO_DeInit+0x15a>
9000a13a:	f04f 0e0a 	mov.w	lr, #10
9000a13e:	fa0e f404 	lsl.w	r4, lr, r4
9000a142:	e000      	b.n	9000a146 <HAL_GPIO_DeInit+0x8e>
9000a144:	2400      	movs	r4, #0
9000a146:	9f01      	ldr	r7, [sp, #4]
9000a148:	42a7      	cmp	r7, r4
9000a14a:	d119      	bne.n	9000a180 <HAL_GPIO_DeInit+0xc8>
      {
        /* Clear EXTI line configuration for Current CPU */
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
9000a14c:	f04f 44b0 	mov.w	r4, #1476395008	; 0x58000000
9000a150:	f8d4 7080 	ldr.w	r7, [r4, #128]	; 0x80
9000a154:	ea27 070c 	bic.w	r7, r7, ip
9000a158:	f8c4 7080 	str.w	r7, [r4, #128]	; 0x80
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
9000a15c:	f8d4 7084 	ldr.w	r7, [r4, #132]	; 0x84
9000a160:	ea27 070c 	bic.w	r7, r7, ip
9000a164:	f8c4 7084 	str.w	r7, [r4, #132]	; 0x84

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
9000a168:	6867      	ldr	r7, [r4, #4]
9000a16a:	ea27 070c 	bic.w	r7, r7, ip
9000a16e:	6067      	str	r7, [r4, #4]
        EXTI->RTSR1 &= ~(iocurrent);
9000a170:	6827      	ldr	r7, [r4, #0]
9000a172:	ea27 070c 	bic.w	r7, r7, ip
9000a176:	6027      	str	r7, [r4, #0]

        tmp = 0x0FUL << (4U * (position & 0x03U));
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
9000a178:	68ac      	ldr	r4, [r5, #8]
9000a17a:	ea24 0406 	bic.w	r4, r4, r6
9000a17e:	60ac      	str	r4, [r5, #8]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
9000a180:	005d      	lsls	r5, r3, #1
9000a182:	2403      	movs	r4, #3

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
9000a184:	f003 0607 	and.w	r6, r3, #7
9000a188:	270f      	movs	r7, #15
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
9000a18a:	40ac      	lsls	r4, r5
9000a18c:	6805      	ldr	r5, [r0, #0]
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
9000a18e:	00b6      	lsls	r6, r6, #2
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
9000a190:	4325      	orrs	r5, r4
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
9000a192:	40b7      	lsls	r7, r6
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
9000a194:	6005      	str	r5, [r0, #0]
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
9000a196:	08dd      	lsrs	r5, r3, #3
9000a198:	eb00 0585 	add.w	r5, r0, r5, lsl #2
9000a19c:	6a2e      	ldr	r6, [r5, #32]
9000a19e:	ea26 0607 	bic.w	r6, r6, r7
9000a1a2:	622e      	str	r6, [r5, #32]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
9000a1a4:	68c5      	ldr	r5, [r0, #12]
9000a1a6:	ea25 0504 	bic.w	r5, r5, r4
9000a1aa:	60c5      	str	r5, [r0, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
9000a1ac:	6845      	ldr	r5, [r0, #4]
9000a1ae:	ea25 0202 	bic.w	r2, r5, r2
9000a1b2:	6042      	str	r2, [r0, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
9000a1b4:	6882      	ldr	r2, [r0, #8]
9000a1b6:	ea22 0204 	bic.w	r2, r2, r4
9000a1ba:	6082      	str	r2, [r0, #8]
    }

    position++;
9000a1bc:	3301      	adds	r3, #1
  while ((GPIO_Pin >> position) != 0x00U)
9000a1be:	fa31 f203 	lsrs.w	r2, r1, r3
9000a1c2:	d188      	bne.n	9000a0d6 <HAL_GPIO_DeInit+0x1e>
  }
}
9000a1c4:	b003      	add	sp, #12
9000a1c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
9000a1ca:	f04f 0e02 	mov.w	lr, #2
9000a1ce:	fa0e f404 	lsl.w	r4, lr, r4
9000a1d2:	e7b8      	b.n	9000a146 <HAL_GPIO_DeInit+0x8e>
9000a1d4:	f04f 0e05 	mov.w	lr, #5
9000a1d8:	fa0e f404 	lsl.w	r4, lr, r4
9000a1dc:	e7b3      	b.n	9000a146 <HAL_GPIO_DeInit+0x8e>
9000a1de:	f04f 0e03 	mov.w	lr, #3
9000a1e2:	fa0e f404 	lsl.w	r4, lr, r4
9000a1e6:	e7ae      	b.n	9000a146 <HAL_GPIO_DeInit+0x8e>
9000a1e8:	f04f 0e04 	mov.w	lr, #4
9000a1ec:	fa0e f404 	lsl.w	r4, lr, r4
9000a1f0:	e7a9      	b.n	9000a146 <HAL_GPIO_DeInit+0x8e>
9000a1f2:	f04f 0e08 	mov.w	lr, #8
9000a1f6:	fa0e f404 	lsl.w	r4, lr, r4
9000a1fa:	e7a4      	b.n	9000a146 <HAL_GPIO_DeInit+0x8e>
9000a1fc:	f04f 0e06 	mov.w	lr, #6
9000a200:	fa0e f404 	lsl.w	r4, lr, r4
9000a204:	e79f      	b.n	9000a146 <HAL_GPIO_DeInit+0x8e>
9000a206:	4770      	bx	lr
9000a208:	f04f 0e07 	mov.w	lr, #7
9000a20c:	fa0e f404 	lsl.w	r4, lr, r4
9000a210:	e799      	b.n	9000a146 <HAL_GPIO_DeInit+0x8e>
9000a212:	f04f 0e09 	mov.w	lr, #9
9000a216:	fa0e f404 	lsl.w	r4, lr, r4
9000a21a:	e794      	b.n	9000a146 <HAL_GPIO_DeInit+0x8e>
9000a21c:	58020c00 	.word	0x58020c00
9000a220:	58021000 	.word	0x58021000
9000a224:	58021400 	.word	0x58021400
9000a228:	58021800 	.word	0x58021800
9000a22c:	58021c00 	.word	0x58021c00
9000a230:	58000400 	.word	0x58000400
9000a234:	58020000 	.word	0x58020000
9000a238:	58020400 	.word	0x58020400
9000a23c:	58020800 	.word	0x58020800
9000a240:	58022000 	.word	0x58022000
9000a244:	58022400 	.word	0x58022400

9000a248 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
9000a248:	6903      	ldr	r3, [r0, #16]
9000a24a:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
9000a24c:	bf14      	ite	ne
9000a24e:	2001      	movne	r0, #1
9000a250:	2000      	moveq	r0, #0
9000a252:	4770      	bx	lr

9000a254 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
9000a254:	b902      	cbnz	r2, 9000a258 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
9000a256:	0409      	lsls	r1, r1, #16
9000a258:	6181      	str	r1, [r0, #24]
  }
}
9000a25a:	4770      	bx	lr

9000a25c <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
9000a25c:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
9000a25e:	ea01 0203 	and.w	r2, r1, r3
9000a262:	ea21 0103 	bic.w	r1, r1, r3
9000a266:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
9000a26a:	6181      	str	r1, [r0, #24]
}
9000a26c:	4770      	bx	lr
9000a26e:	bf00      	nop

9000a270 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
9000a270:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
9000a274:	6803      	ldr	r3, [r0, #0]
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
9000a276:	f04f 0820 	mov.w	r8, #32
{
9000a27a:	4605      	mov	r5, r0
9000a27c:	460e      	mov	r6, r1
9000a27e:	4617      	mov	r7, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
9000a280:	6998      	ldr	r0, [r3, #24]
9000a282:	f010 0902 	ands.w	r9, r0, #2
9000a286:	f040 809e 	bne.w	9000a3c6 <I2C_WaitOnTXISFlagUntilTimeout+0x156>
  uint32_t itflag   = hi2c->Instance->ISR;
9000a28a:	699c      	ldr	r4, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
9000a28c:	f014 0410 	ands.w	r4, r4, #16
9000a290:	d068      	beq.n	9000a364 <I2C_WaitOnTXISFlagUntilTimeout+0xf4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
9000a292:	2210      	movs	r2, #16
  uint32_t tickstart = Tickstart;
9000a294:	463c      	mov	r4, r7
  HAL_StatusTypeDef status = HAL_OK;
9000a296:	46ca      	mov	sl, r9
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
9000a298:	61da      	str	r2, [r3, #28]
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
9000a29a:	1c71      	adds	r1, r6, #1
9000a29c:	699a      	ldr	r2, [r3, #24]
9000a29e:	d163      	bne.n	9000a368 <I2C_WaitOnTXISFlagUntilTimeout+0xf8>
9000a2a0:	0690      	lsls	r0, r2, #26
9000a2a2:	f100 8093 	bmi.w	9000a3cc <I2C_WaitOnTXISFlagUntilTimeout+0x15c>
9000a2a6:	f1ba 0f00 	cmp.w	sl, #0
9000a2aa:	d104      	bne.n	9000a2b6 <I2C_WaitOnTXISFlagUntilTimeout+0x46>
9000a2ac:	699c      	ldr	r4, [r3, #24]
9000a2ae:	06a1      	lsls	r1, r4, #26
9000a2b0:	d5fc      	bpl.n	9000a2ac <I2C_WaitOnTXISFlagUntilTimeout+0x3c>

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
9000a2b2:	f8c3 801c 	str.w	r8, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
9000a2b6:	f049 0404 	orr.w	r4, r9, #4

    status = HAL_ERROR;
9000a2ba:	2101      	movs	r1, #1
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
9000a2bc:	699a      	ldr	r2, [r3, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
9000a2be:	05d0      	lsls	r0, r2, #23
9000a2c0:	d530      	bpl.n	9000a324 <I2C_WaitOnTXISFlagUntilTimeout+0xb4>
  {
    error_code |= HAL_I2C_ERROR_BERR;

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
9000a2c2:	f44f 7180 	mov.w	r1, #256	; 0x100

    status = HAL_ERROR;
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
9000a2c6:	0556      	lsls	r6, r2, #21
    error_code |= HAL_I2C_ERROR_BERR;
9000a2c8:	f044 0401 	orr.w	r4, r4, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
9000a2cc:	61d9      	str	r1, [r3, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
9000a2ce:	d504      	bpl.n	9000a2da <I2C_WaitOnTXISFlagUntilTimeout+0x6a>
  {
    error_code |= HAL_I2C_ERROR_OVR;

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
9000a2d0:	f44f 6180 	mov.w	r1, #1024	; 0x400
    error_code |= HAL_I2C_ERROR_OVR;
9000a2d4:	f044 0408 	orr.w	r4, r4, #8
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
9000a2d8:	61d9      	str	r1, [r3, #28]

    status = HAL_ERROR;
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
9000a2da:	0591      	lsls	r1, r2, #22
9000a2dc:	d504      	bpl.n	9000a2e8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  {
    error_code |= HAL_I2C_ERROR_ARLO;

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
9000a2de:	f44f 7200 	mov.w	r2, #512	; 0x200
    error_code |= HAL_I2C_ERROR_ARLO;
9000a2e2:	f044 0402 	orr.w	r4, r4, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
9000a2e6:	61da      	str	r2, [r3, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
9000a2e8:	699a      	ldr	r2, [r3, #24]
9000a2ea:	0790      	lsls	r0, r2, #30
9000a2ec:	d501      	bpl.n	9000a2f2 <I2C_WaitOnTXISFlagUntilTimeout+0x82>
    hi2c->Instance->TXDR = 0x00U;
9000a2ee:	2200      	movs	r2, #0
9000a2f0:	629a      	str	r2, [r3, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
9000a2f2:	699a      	ldr	r2, [r3, #24]
9000a2f4:	07d1      	lsls	r1, r2, #31
9000a2f6:	d403      	bmi.n	9000a300 <I2C_WaitOnTXISFlagUntilTimeout+0x90>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
9000a2f8:	699a      	ldr	r2, [r3, #24]
9000a2fa:	f042 0201 	orr.w	r2, r2, #1
9000a2fe:	619a      	str	r2, [r3, #24]
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
9000a300:	685a      	ldr	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
    hi2c->State = HAL_I2C_STATE_READY;
    hi2c->Mode = HAL_I2C_MODE_NONE;
9000a302:	2100      	movs	r1, #0
    I2C_RESET_CR2(hi2c);
9000a304:	4834      	ldr	r0, [pc, #208]	; (9000a3d8 <I2C_WaitOnTXISFlagUntilTimeout+0x168>)
    hi2c->State = HAL_I2C_STATE_READY;
9000a306:	2620      	movs	r6, #32
    I2C_RESET_CR2(hi2c);
9000a308:	4002      	ands	r2, r0
      return HAL_ERROR;
9000a30a:	2001      	movs	r0, #1
    I2C_RESET_CR2(hi2c);
9000a30c:	605a      	str	r2, [r3, #4]
    hi2c->ErrorCode |= error_code;
9000a30e:	6c6b      	ldr	r3, [r5, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
9000a310:	f885 1040 	strb.w	r1, [r5, #64]	; 0x40
    hi2c->ErrorCode |= error_code;
9000a314:	4323      	orrs	r3, r4
9000a316:	646b      	str	r3, [r5, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
9000a318:	f885 6041 	strb.w	r6, [r5, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
9000a31c:	f885 1042 	strb.w	r1, [r5, #66]	; 0x42
}
9000a320:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
9000a324:	0550      	lsls	r0, r2, #21
9000a326:	d4d3      	bmi.n	9000a2d0 <I2C_WaitOnTXISFlagUntilTimeout+0x60>
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
9000a328:	0592      	lsls	r2, r2, #22
9000a32a:	d4d8      	bmi.n	9000a2de <I2C_WaitOnTXISFlagUntilTimeout+0x6e>
  if (status != HAL_OK)
9000a32c:	2900      	cmp	r1, #0
9000a32e:	d1db      	bne.n	9000a2e8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    if (Timeout != HAL_MAX_DELAY)
9000a330:	1c72      	adds	r2, r6, #1
9000a332:	d0a5      	beq.n	9000a280 <I2C_WaitOnTXISFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
9000a334:	f7ff fb04 	bl	90009940 <HAL_GetTick>
9000a338:	1bc0      	subs	r0, r0, r7
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
9000a33a:	682b      	ldr	r3, [r5, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
9000a33c:	42b0      	cmp	r0, r6
9000a33e:	d801      	bhi.n	9000a344 <I2C_WaitOnTXISFlagUntilTimeout+0xd4>
9000a340:	2e00      	cmp	r6, #0
9000a342:	d19d      	bne.n	9000a280 <I2C_WaitOnTXISFlagUntilTimeout+0x10>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
9000a344:	699a      	ldr	r2, [r3, #24]
9000a346:	f012 0202 	ands.w	r2, r2, #2
9000a34a:	d199      	bne.n	9000a280 <I2C_WaitOnTXISFlagUntilTimeout+0x10>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
9000a34c:	6c6b      	ldr	r3, [r5, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
9000a34e:	2120      	movs	r1, #32
          __HAL_UNLOCK(hi2c);
9000a350:	2001      	movs	r0, #1
9000a352:	f885 2040 	strb.w	r2, [r5, #64]	; 0x40
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
9000a356:	430b      	orrs	r3, r1
9000a358:	646b      	str	r3, [r5, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
9000a35a:	f885 1041 	strb.w	r1, [r5, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
9000a35e:	f885 2042 	strb.w	r2, [r5, #66]	; 0x42
          return HAL_ERROR;
9000a362:	e7dd      	b.n	9000a320 <I2C_WaitOnTXISFlagUntilTimeout+0xb0>
  HAL_StatusTypeDef status = HAL_OK;
9000a364:	4621      	mov	r1, r4
9000a366:	e7a9      	b.n	9000a2bc <I2C_WaitOnTXISFlagUntilTimeout+0x4c>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
9000a368:	0692      	lsls	r2, r2, #26
9000a36a:	d42f      	bmi.n	9000a3cc <I2C_WaitOnTXISFlagUntilTimeout+0x15c>
9000a36c:	f1ba 0f00 	cmp.w	sl, #0
9000a370:	d1a1      	bne.n	9000a2b6 <I2C_WaitOnTXISFlagUntilTimeout+0x46>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
9000a372:	f7ff fae5 	bl	90009940 <HAL_GetTick>
9000a376:	1b00      	subs	r0, r0, r4
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
9000a378:	682b      	ldr	r3, [r5, #0]
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
9000a37a:	4286      	cmp	r6, r0
9000a37c:	d301      	bcc.n	9000a382 <I2C_WaitOnTXISFlagUntilTimeout+0x112>
9000a37e:	2e00      	cmp	r6, #0
9000a380:	d18b      	bne.n	9000a29a <I2C_WaitOnTXISFlagUntilTimeout+0x2a>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
9000a382:	6858      	ldr	r0, [r3, #4]
          tmp2 = hi2c->Mode;
9000a384:	f895 2042 	ldrb.w	r2, [r5, #66]	; 0x42
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
9000a388:	6999      	ldr	r1, [r3, #24]
          tmp2 = hi2c->Mode;
9000a38a:	b2d2      	uxtb	r2, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
9000a38c:	0409      	lsls	r1, r1, #16
9000a38e:	d50b      	bpl.n	9000a3a8 <I2C_WaitOnTXISFlagUntilTimeout+0x138>
              (tmp1 != I2C_CR2_STOP) && \
9000a390:	0441      	lsls	r1, r0, #17
9000a392:	d409      	bmi.n	9000a3a8 <I2C_WaitOnTXISFlagUntilTimeout+0x138>
9000a394:	2a20      	cmp	r2, #32
9000a396:	d007      	beq.n	9000a3a8 <I2C_WaitOnTXISFlagUntilTimeout+0x138>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
9000a398:	685a      	ldr	r2, [r3, #4]
9000a39a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
9000a39e:	605a      	str	r2, [r3, #4]
            tickstart = HAL_GetTick();
9000a3a0:	f7ff face 	bl	90009940 <HAL_GetTick>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
9000a3a4:	682b      	ldr	r3, [r5, #0]
            tickstart = HAL_GetTick();
9000a3a6:	4604      	mov	r4, r0
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
9000a3a8:	699a      	ldr	r2, [r3, #24]
9000a3aa:	0690      	lsls	r0, r2, #26
9000a3ac:	f53f af75 	bmi.w	9000a29a <I2C_WaitOnTXISFlagUntilTimeout+0x2a>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
9000a3b0:	f7ff fac6 	bl	90009940 <HAL_GetTick>
9000a3b4:	1b00      	subs	r0, r0, r4
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
9000a3b6:	682b      	ldr	r3, [r5, #0]
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
9000a3b8:	2819      	cmp	r0, #25
9000a3ba:	d9f5      	bls.n	9000a3a8 <I2C_WaitOnTXISFlagUntilTimeout+0x138>
              error_code |= HAL_I2C_ERROR_TIMEOUT;
9000a3bc:	f04f 0920 	mov.w	r9, #32
              status = HAL_ERROR;
9000a3c0:	f04f 0a01 	mov.w	sl, #1
9000a3c4:	e769      	b.n	9000a29a <I2C_WaitOnTXISFlagUntilTimeout+0x2a>
  return HAL_OK;
9000a3c6:	2000      	movs	r0, #0
}
9000a3c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (status == HAL_OK)
9000a3cc:	f1ba 0f00 	cmp.w	sl, #0
9000a3d0:	f43f af6f 	beq.w	9000a2b2 <I2C_WaitOnTXISFlagUntilTimeout+0x42>
9000a3d4:	e76f      	b.n	9000a2b6 <I2C_WaitOnTXISFlagUntilTimeout+0x46>
9000a3d6:	bf00      	nop
9000a3d8:	fe00e800 	.word	0xfe00e800

9000a3dc <I2C_WaitOnSTOPFlagUntilTimeout>:
{
9000a3dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
9000a3e0:	4690      	mov	r8, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
9000a3e2:	6802      	ldr	r2, [r0, #0]
{
9000a3e4:	460f      	mov	r7, r1
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
9000a3e6:	6991      	ldr	r1, [r2, #24]
9000a3e8:	068c      	lsls	r4, r1, #26
9000a3ea:	d469      	bmi.n	9000a4c0 <I2C_WaitOnSTOPFlagUntilTimeout+0xe4>
9000a3ec:	4606      	mov	r6, r0
9000a3ee:	4613      	mov	r3, r2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
9000a3f0:	f04f 0910 	mov.w	r9, #16
  uint32_t itflag   = hi2c->Instance->ISR;
9000a3f4:	6994      	ldr	r4, [r2, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
9000a3f6:	f014 0410 	ands.w	r4, r4, #16
9000a3fa:	d064      	beq.n	9000a4c6 <I2C_WaitOnSTOPFlagUntilTimeout+0xea>
  uint32_t error_code = 0;
9000a3fc:	2500      	movs	r5, #0
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
9000a3fe:	4613      	mov	r3, r2
  uint32_t tickstart = Tickstart;
9000a400:	4644      	mov	r4, r8
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
9000a402:	f8c2 901c 	str.w	r9, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
9000a406:	46aa      	mov	sl, r5
9000a408:	1c79      	adds	r1, r7, #1
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
9000a40a:	699a      	ldr	r2, [r3, #24]
9000a40c:	d15d      	bne.n	9000a4ca <I2C_WaitOnSTOPFlagUntilTimeout+0xee>
9000a40e:	0690      	lsls	r0, r2, #26
9000a410:	f100 8083 	bmi.w	9000a51a <I2C_WaitOnSTOPFlagUntilTimeout+0x13e>
9000a414:	f1ba 0f00 	cmp.w	sl, #0
9000a418:	d104      	bne.n	9000a424 <I2C_WaitOnSTOPFlagUntilTimeout+0x48>
9000a41a:	699c      	ldr	r4, [r3, #24]
9000a41c:	06a1      	lsls	r1, r4, #26
9000a41e:	d5fc      	bpl.n	9000a41a <I2C_WaitOnSTOPFlagUntilTimeout+0x3e>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
9000a420:	2220      	movs	r2, #32
9000a422:	61da      	str	r2, [r3, #28]
    error_code |= HAL_I2C_ERROR_AF;
9000a424:	f045 0404 	orr.w	r4, r5, #4
    status = HAL_ERROR;
9000a428:	2101      	movs	r1, #1
  itflag = hi2c->Instance->ISR;
9000a42a:	699a      	ldr	r2, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
9000a42c:	05d0      	lsls	r0, r2, #23
9000a42e:	d530      	bpl.n	9000a492 <I2C_WaitOnSTOPFlagUntilTimeout+0xb6>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
9000a430:	f44f 7180 	mov.w	r1, #256	; 0x100
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
9000a434:	0555      	lsls	r5, r2, #21
    error_code |= HAL_I2C_ERROR_BERR;
9000a436:	f044 0401 	orr.w	r4, r4, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
9000a43a:	61d9      	str	r1, [r3, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
9000a43c:	d504      	bpl.n	9000a448 <I2C_WaitOnSTOPFlagUntilTimeout+0x6c>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
9000a43e:	f44f 6180 	mov.w	r1, #1024	; 0x400
    error_code |= HAL_I2C_ERROR_OVR;
9000a442:	f044 0408 	orr.w	r4, r4, #8
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
9000a446:	61d9      	str	r1, [r3, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
9000a448:	0591      	lsls	r1, r2, #22
9000a44a:	d504      	bpl.n	9000a456 <I2C_WaitOnSTOPFlagUntilTimeout+0x7a>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
9000a44c:	f44f 7200 	mov.w	r2, #512	; 0x200
    error_code |= HAL_I2C_ERROR_ARLO;
9000a450:	f044 0402 	orr.w	r4, r4, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
9000a454:	61da      	str	r2, [r3, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
9000a456:	699a      	ldr	r2, [r3, #24]
9000a458:	0795      	lsls	r5, r2, #30
9000a45a:	d501      	bpl.n	9000a460 <I2C_WaitOnSTOPFlagUntilTimeout+0x84>
    hi2c->Instance->TXDR = 0x00U;
9000a45c:	2200      	movs	r2, #0
9000a45e:	629a      	str	r2, [r3, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
9000a460:	699a      	ldr	r2, [r3, #24]
9000a462:	07d0      	lsls	r0, r2, #31
9000a464:	d403      	bmi.n	9000a46e <I2C_WaitOnSTOPFlagUntilTimeout+0x92>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
9000a466:	699a      	ldr	r2, [r3, #24]
9000a468:	f042 0201 	orr.w	r2, r2, #1
9000a46c:	619a      	str	r2, [r3, #24]
    I2C_RESET_CR2(hi2c);
9000a46e:	685a      	ldr	r2, [r3, #4]
    hi2c->Mode = HAL_I2C_MODE_NONE;
9000a470:	2100      	movs	r1, #0
    I2C_RESET_CR2(hi2c);
9000a472:	4837      	ldr	r0, [pc, #220]	; (9000a550 <I2C_WaitOnSTOPFlagUntilTimeout+0x174>)
    hi2c->State = HAL_I2C_STATE_READY;
9000a474:	2520      	movs	r5, #32
    I2C_RESET_CR2(hi2c);
9000a476:	4002      	ands	r2, r0
      return HAL_ERROR;
9000a478:	2001      	movs	r0, #1
    I2C_RESET_CR2(hi2c);
9000a47a:	605a      	str	r2, [r3, #4]
    hi2c->ErrorCode |= error_code;
9000a47c:	6c73      	ldr	r3, [r6, #68]	; 0x44
    __HAL_UNLOCK(hi2c);
9000a47e:	f886 1040 	strb.w	r1, [r6, #64]	; 0x40
    hi2c->ErrorCode |= error_code;
9000a482:	4323      	orrs	r3, r4
9000a484:	6473      	str	r3, [r6, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
9000a486:	f886 5041 	strb.w	r5, [r6, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
9000a48a:	f886 1042 	strb.w	r1, [r6, #66]	; 0x42
}
9000a48e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
9000a492:	0550      	lsls	r0, r2, #21
9000a494:	d4d3      	bmi.n	9000a43e <I2C_WaitOnSTOPFlagUntilTimeout+0x62>
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
9000a496:	0592      	lsls	r2, r2, #22
9000a498:	d4d8      	bmi.n	9000a44c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  if (status != HAL_OK)
9000a49a:	2900      	cmp	r1, #0
9000a49c:	d1db      	bne.n	9000a456 <I2C_WaitOnSTOPFlagUntilTimeout+0x7a>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
9000a49e:	f7ff fa4f 	bl	90009940 <HAL_GetTick>
9000a4a2:	eba0 0008 	sub.w	r0, r0, r8
9000a4a6:	42b8      	cmp	r0, r7
9000a4a8:	d801      	bhi.n	9000a4ae <I2C_WaitOnSTOPFlagUntilTimeout+0xd2>
9000a4aa:	2f00      	cmp	r7, #0
9000a4ac:	d132      	bne.n	9000a514 <I2C_WaitOnSTOPFlagUntilTimeout+0x138>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
9000a4ae:	6832      	ldr	r2, [r6, #0]
9000a4b0:	6991      	ldr	r1, [r2, #24]
9000a4b2:	4613      	mov	r3, r2
9000a4b4:	f011 0120 	ands.w	r1, r1, #32
9000a4b8:	d034      	beq.n	9000a524 <I2C_WaitOnSTOPFlagUntilTimeout+0x148>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
9000a4ba:	6991      	ldr	r1, [r2, #24]
9000a4bc:	0689      	lsls	r1, r1, #26
9000a4be:	d599      	bpl.n	9000a3f4 <I2C_WaitOnSTOPFlagUntilTimeout+0x18>
  return HAL_OK;
9000a4c0:	2000      	movs	r0, #0
}
9000a4c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  HAL_StatusTypeDef status = HAL_OK;
9000a4c6:	4621      	mov	r1, r4
9000a4c8:	e7af      	b.n	9000a42a <I2C_WaitOnSTOPFlagUntilTimeout+0x4e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
9000a4ca:	0692      	lsls	r2, r2, #26
9000a4cc:	d425      	bmi.n	9000a51a <I2C_WaitOnSTOPFlagUntilTimeout+0x13e>
9000a4ce:	f1ba 0f00 	cmp.w	sl, #0
9000a4d2:	d1a7      	bne.n	9000a424 <I2C_WaitOnSTOPFlagUntilTimeout+0x48>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
9000a4d4:	f7ff fa34 	bl	90009940 <HAL_GetTick>
9000a4d8:	1b00      	subs	r0, r0, r4
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
9000a4da:	6833      	ldr	r3, [r6, #0]
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
9000a4dc:	4287      	cmp	r7, r0
9000a4de:	d301      	bcc.n	9000a4e4 <I2C_WaitOnSTOPFlagUntilTimeout+0x108>
9000a4e0:	2f00      	cmp	r7, #0
9000a4e2:	d191      	bne.n	9000a408 <I2C_WaitOnSTOPFlagUntilTimeout+0x2c>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
9000a4e4:	6858      	ldr	r0, [r3, #4]
          tmp2 = hi2c->Mode;
9000a4e6:	f896 2042 	ldrb.w	r2, [r6, #66]	; 0x42
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
9000a4ea:	6999      	ldr	r1, [r3, #24]
          tmp2 = hi2c->Mode;
9000a4ec:	b2d2      	uxtb	r2, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
9000a4ee:	0409      	lsls	r1, r1, #16
9000a4f0:	d503      	bpl.n	9000a4fa <I2C_WaitOnSTOPFlagUntilTimeout+0x11e>
              (tmp1 != I2C_CR2_STOP) && \
9000a4f2:	0441      	lsls	r1, r0, #17
9000a4f4:	d401      	bmi.n	9000a4fa <I2C_WaitOnSTOPFlagUntilTimeout+0x11e>
9000a4f6:	2a20      	cmp	r2, #32
9000a4f8:	d121      	bne.n	9000a53e <I2C_WaitOnSTOPFlagUntilTimeout+0x162>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
9000a4fa:	699a      	ldr	r2, [r3, #24]
9000a4fc:	0690      	lsls	r0, r2, #26
9000a4fe:	d483      	bmi.n	9000a408 <I2C_WaitOnSTOPFlagUntilTimeout+0x2c>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
9000a500:	f7ff fa1e 	bl	90009940 <HAL_GetTick>
9000a504:	1b00      	subs	r0, r0, r4
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
9000a506:	6833      	ldr	r3, [r6, #0]
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
9000a508:	2819      	cmp	r0, #25
9000a50a:	d9f6      	bls.n	9000a4fa <I2C_WaitOnSTOPFlagUntilTimeout+0x11e>
              error_code |= HAL_I2C_ERROR_TIMEOUT;
9000a50c:	2520      	movs	r5, #32
              status = HAL_ERROR;
9000a50e:	f04f 0a01 	mov.w	sl, #1
9000a512:	e779      	b.n	9000a408 <I2C_WaitOnSTOPFlagUntilTimeout+0x2c>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
9000a514:	6833      	ldr	r3, [r6, #0]
9000a516:	461a      	mov	r2, r3
9000a518:	e7cf      	b.n	9000a4ba <I2C_WaitOnSTOPFlagUntilTimeout+0xde>
    if (status == HAL_OK)
9000a51a:	f1ba 0f00 	cmp.w	sl, #0
9000a51e:	f43f af7f 	beq.w	9000a420 <I2C_WaitOnSTOPFlagUntilTimeout+0x44>
9000a522:	e77f      	b.n	9000a424 <I2C_WaitOnSTOPFlagUntilTimeout+0x48>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
9000a524:	6c73      	ldr	r3, [r6, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
9000a526:	2220      	movs	r2, #32
          __HAL_UNLOCK(hi2c);
9000a528:	2001      	movs	r0, #1
9000a52a:	f886 1040 	strb.w	r1, [r6, #64]	; 0x40
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
9000a52e:	4313      	orrs	r3, r2
9000a530:	6473      	str	r3, [r6, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
9000a532:	f886 2041 	strb.w	r2, [r6, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
9000a536:	f886 1042 	strb.w	r1, [r6, #66]	; 0x42
}
9000a53a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
9000a53e:	685a      	ldr	r2, [r3, #4]
9000a540:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
9000a544:	605a      	str	r2, [r3, #4]
            tickstart = HAL_GetTick();
9000a546:	f7ff f9fb 	bl	90009940 <HAL_GetTick>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
9000a54a:	6833      	ldr	r3, [r6, #0]
            tickstart = HAL_GetTick();
9000a54c:	4604      	mov	r4, r0
9000a54e:	e7d4      	b.n	9000a4fa <I2C_WaitOnSTOPFlagUntilTimeout+0x11e>
9000a550:	fe00e800 	.word	0xfe00e800

9000a554 <HAL_I2C_MspInit>:
}
9000a554:	4770      	bx	lr
9000a556:	bf00      	nop

9000a558 <HAL_I2C_Init>:
  if (hi2c == NULL)
9000a558:	2800      	cmp	r0, #0
9000a55a:	d04e      	beq.n	9000a5fa <HAL_I2C_Init+0xa2>
{
9000a55c:	b510      	push	{r4, lr}
  if (hi2c->State == HAL_I2C_STATE_RESET)
9000a55e:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
9000a562:	4604      	mov	r4, r0
9000a564:	f003 02ff 	and.w	r2, r3, #255	; 0xff
9000a568:	2b00      	cmp	r3, #0
9000a56a:	d041      	beq.n	9000a5f0 <HAL_I2C_Init+0x98>
  __HAL_I2C_DISABLE(hi2c);
9000a56c:	6823      	ldr	r3, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
9000a56e:	2124      	movs	r1, #36	; 0x24
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
9000a570:	6862      	ldr	r2, [r4, #4]
  hi2c->State = HAL_I2C_STATE_BUSY;
9000a572:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
9000a576:	6819      	ldr	r1, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
9000a578:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
9000a57c:	68e0      	ldr	r0, [r4, #12]
  __HAL_I2C_DISABLE(hi2c);
9000a57e:	f021 0101 	bic.w	r1, r1, #1
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
9000a582:	2801      	cmp	r0, #1
  __HAL_I2C_DISABLE(hi2c);
9000a584:	6019      	str	r1, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
9000a586:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
9000a588:	689a      	ldr	r2, [r3, #8]
9000a58a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
9000a58e:	609a      	str	r2, [r3, #8]
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
9000a590:	68a2      	ldr	r2, [r4, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
9000a592:	d029      	beq.n	9000a5e8 <HAL_I2C_Init+0x90>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
9000a594:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
9000a598:	2802      	cmp	r0, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
9000a59a:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
9000a59c:	d102      	bne.n	9000a5a4 <HAL_I2C_Init+0x4c>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
9000a59e:	f44f 6200 	mov.w	r2, #2048	; 0x800
9000a5a2:	605a      	str	r2, [r3, #4]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
9000a5a4:	6858      	ldr	r0, [r3, #4]
  hi2c->State = HAL_I2C_STATE_READY;
9000a5a6:	f04f 0c20 	mov.w	ip, #32
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
9000a5aa:	4915      	ldr	r1, [pc, #84]	; (9000a600 <HAL_I2C_Init+0xa8>)
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
9000a5ac:	6922      	ldr	r2, [r4, #16]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
9000a5ae:	4301      	orrs	r1, r0
9000a5b0:	6059      	str	r1, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
9000a5b2:	68d9      	ldr	r1, [r3, #12]
9000a5b4:	f421 4100 	bic.w	r1, r1, #32768	; 0x8000
9000a5b8:	60d9      	str	r1, [r3, #12]
                          (hi2c->Init.OwnAddress2Masks << 8));
9000a5ba:	e9d4 0105 	ldrd	r0, r1, [r4, #20]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
9000a5be:	4302      	orrs	r2, r0
9000a5c0:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
9000a5c4:	e9d4 1007 	ldrd	r1, r0, [r4, #28]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
9000a5c8:	60da      	str	r2, [r3, #12]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
9000a5ca:	2200      	movs	r2, #0
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
9000a5cc:	4301      	orrs	r1, r0
  return HAL_OK;
9000a5ce:	4610      	mov	r0, r2
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
9000a5d0:	6019      	str	r1, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
9000a5d2:	6819      	ldr	r1, [r3, #0]
9000a5d4:	f041 0101 	orr.w	r1, r1, #1
9000a5d8:	6019      	str	r1, [r3, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
9000a5da:	6462      	str	r2, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
9000a5dc:	f884 c041 	strb.w	ip, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
9000a5e0:	6322      	str	r2, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
9000a5e2:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
}
9000a5e6:	bd10      	pop	{r4, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
9000a5e8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
9000a5ec:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
9000a5ee:	e7d9      	b.n	9000a5a4 <HAL_I2C_Init+0x4c>
    hi2c->Lock = HAL_UNLOCKED;
9000a5f0:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
9000a5f4:	f7ff ffae 	bl	9000a554 <HAL_I2C_MspInit>
9000a5f8:	e7b8      	b.n	9000a56c <HAL_I2C_Init+0x14>
    return HAL_ERROR;
9000a5fa:	2001      	movs	r0, #1
}
9000a5fc:	4770      	bx	lr
9000a5fe:	bf00      	nop
9000a600:	02008000 	.word	0x02008000

9000a604 <HAL_I2C_MspDeInit>:
9000a604:	4770      	bx	lr
9000a606:	bf00      	nop

9000a608 <HAL_I2C_DeInit>:
  if (hi2c == NULL)
9000a608:	b1b0      	cbz	r0, 9000a638 <HAL_I2C_DeInit+0x30>
  __HAL_I2C_DISABLE(hi2c);
9000a60a:	6802      	ldr	r2, [r0, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
9000a60c:	2324      	movs	r3, #36	; 0x24
{
9000a60e:	b510      	push	{r4, lr}
  hi2c->State = HAL_I2C_STATE_BUSY;
9000a610:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
9000a614:	4604      	mov	r4, r0
  __HAL_I2C_DISABLE(hi2c);
9000a616:	6813      	ldr	r3, [r2, #0]
9000a618:	f023 0301 	bic.w	r3, r3, #1
9000a61c:	6013      	str	r3, [r2, #0]
  HAL_I2C_MspDeInit(hi2c);
9000a61e:	f7ff fff1 	bl	9000a604 <HAL_I2C_MspDeInit>
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
9000a622:	2300      	movs	r3, #0
9000a624:	6463      	str	r3, [r4, #68]	; 0x44
  return HAL_OK;
9000a626:	4618      	mov	r0, r3
  hi2c->State = HAL_I2C_STATE_RESET;
9000a628:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_UNLOCK(hi2c);
9000a62c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
  hi2c->PreviousState = I2C_STATE_NONE;
9000a630:	6323      	str	r3, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
9000a632:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
}
9000a636:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
9000a638:	2001      	movs	r0, #1
}
9000a63a:	4770      	bx	lr

9000a63c <HAL_I2C_Mem_Write>:
{
9000a63c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
9000a640:	4698      	mov	r8, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
9000a642:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
9000a646:	f8bd a024 	ldrh.w	sl, [sp, #36]	; 0x24
  if (hi2c->State == HAL_I2C_STATE_READY)
9000a64a:	2b20      	cmp	r3, #32
{
9000a64c:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  if (hi2c->State == HAL_I2C_STATE_READY)
9000a64e:	d132      	bne.n	9000a6b6 <HAL_I2C_Mem_Write+0x7a>
    if ((pData == NULL) || (Size == 0U))
9000a650:	9b08      	ldr	r3, [sp, #32]
9000a652:	4604      	mov	r4, r0
9000a654:	b34b      	cbz	r3, 9000a6aa <HAL_I2C_Mem_Write+0x6e>
9000a656:	f1ba 0f00 	cmp.w	sl, #0
9000a65a:	d026      	beq.n	9000a6aa <HAL_I2C_Mem_Write+0x6e>
    __HAL_LOCK(hi2c);
9000a65c:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
9000a660:	2b01      	cmp	r3, #1
9000a662:	d028      	beq.n	9000a6b6 <HAL_I2C_Mem_Write+0x7a>
9000a664:	2301      	movs	r3, #1
9000a666:	460e      	mov	r6, r1
9000a668:	4691      	mov	r9, r2
9000a66a:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
9000a66e:	f7ff f967 	bl	90009940 <HAL_GetTick>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
9000a672:	6823      	ldr	r3, [r4, #0]
    tickstart = HAL_GetTick();
9000a674:	4605      	mov	r5, r0
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
9000a676:	699a      	ldr	r2, [r3, #24]
9000a678:	0411      	lsls	r1, r2, #16
9000a67a:	d51f      	bpl.n	9000a6bc <HAL_I2C_Mem_Write+0x80>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
9000a67c:	f7ff f960 	bl	90009940 <HAL_GetTick>
9000a680:	1b40      	subs	r0, r0, r5
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
9000a682:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
9000a684:	2819      	cmp	r0, #25
9000a686:	d9f6      	bls.n	9000a676 <HAL_I2C_Mem_Write+0x3a>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
9000a688:	699a      	ldr	r2, [r3, #24]
9000a68a:	0412      	lsls	r2, r2, #16
9000a68c:	d5f3      	bpl.n	9000a676 <HAL_I2C_Mem_Write+0x3a>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
9000a68e:	6c63      	ldr	r3, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
9000a690:	2120      	movs	r1, #32
          hi2c->Mode = HAL_I2C_MODE_NONE;
9000a692:	2200      	movs	r2, #0
      return HAL_ERROR;
9000a694:	2001      	movs	r0, #1
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
9000a696:	430b      	orrs	r3, r1
          __HAL_UNLOCK(hi2c);
9000a698:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
9000a69c:	6463      	str	r3, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
9000a69e:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
9000a6a2:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
}
9000a6a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
9000a6aa:	f44f 7300 	mov.w	r3, #512	; 0x200
      return  HAL_ERROR;
9000a6ae:	2001      	movs	r0, #1
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
9000a6b0:	6463      	str	r3, [r4, #68]	; 0x44
}
9000a6b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return HAL_BUSY;
9000a6b6:	2002      	movs	r0, #2
}
9000a6b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    hi2c->pBuffPtr  = pData;
9000a6bc:	9a08      	ldr	r2, [sp, #32]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
9000a6be:	2121      	movs	r1, #33	; 0x21
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
9000a6c0:	f3c6 0609 	ubfx	r6, r6, #0, #10
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
9000a6c4:	4620      	mov	r0, r4
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
9000a6c6:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
9000a6ca:	2140      	movs	r1, #64	; 0x40
    hi2c->pBuffPtr  = pData;
9000a6cc:	6262      	str	r2, [r4, #36]	; 0x24
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
9000a6ce:	2200      	movs	r2, #0
    hi2c->Mode      = HAL_I2C_MODE_MEM;
9000a6d0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
    hi2c->XferISR   = NULL;
9000a6d4:	6362      	str	r2, [r4, #52]	; 0x34
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
9000a6d6:	6462      	str	r2, [r4, #68]	; 0x44
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
9000a6d8:	496d      	ldr	r1, [pc, #436]	; (9000a890 <HAL_I2C_Mem_Write+0x254>)
    hi2c->XferCount = Size;
9000a6da:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
  MODIFY_REG(hi2c->Instance->CR2, \
9000a6de:	685a      	ldr	r2, [r3, #4]
9000a6e0:	400a      	ands	r2, r1
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
9000a6e2:	fa5f f188 	uxtb.w	r1, r8
  MODIFY_REG(hi2c->Instance->CR2, \
9000a6e6:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
9000a6ea:	496a      	ldr	r1, [pc, #424]	; (9000a894 <HAL_I2C_Mem_Write+0x258>)
9000a6ec:	4332      	orrs	r2, r6
9000a6ee:	4311      	orrs	r1, r2
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
9000a6f0:	462a      	mov	r2, r5
  MODIFY_REG(hi2c->Instance->CR2, \
9000a6f2:	6059      	str	r1, [r3, #4]
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
9000a6f4:	4639      	mov	r1, r7
9000a6f6:	f7ff fdbb 	bl	9000a270 <I2C_WaitOnTXISFlagUntilTimeout>
9000a6fa:	2800      	cmp	r0, #0
9000a6fc:	d175      	bne.n	9000a7ea <HAL_I2C_Mem_Write+0x1ae>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
9000a6fe:	f1b8 0f01 	cmp.w	r8, #1
9000a702:	d00a      	beq.n	9000a71a <HAL_I2C_Mem_Write+0xde>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
9000a704:	ea4f 2219 	mov.w	r2, r9, lsr #8
9000a708:	6823      	ldr	r3, [r4, #0]
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
9000a70a:	4639      	mov	r1, r7
9000a70c:	4620      	mov	r0, r4
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
9000a70e:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
9000a710:	462a      	mov	r2, r5
9000a712:	f7ff fdad 	bl	9000a270 <I2C_WaitOnTXISFlagUntilTimeout>
9000a716:	2800      	cmp	r0, #0
9000a718:	d167      	bne.n	9000a7ea <HAL_I2C_Mem_Write+0x1ae>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
9000a71a:	fa5f f389 	uxtb.w	r3, r9
9000a71e:	6822      	ldr	r2, [r4, #0]
9000a720:	6293      	str	r3, [r2, #40]	; 0x28
9000a722:	1c78      	adds	r0, r7, #1
9000a724:	d14a      	bne.n	9000a7bc <HAL_I2C_Mem_Write+0x180>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
9000a726:	6993      	ldr	r3, [r2, #24]
9000a728:	0619      	lsls	r1, r3, #24
9000a72a:	d5fc      	bpl.n	9000a726 <HAL_I2C_Mem_Write+0xea>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
9000a72c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
9000a72e:	b29b      	uxth	r3, r3
9000a730:	2bff      	cmp	r3, #255	; 0xff
9000a732:	f240 808a 	bls.w	9000a84a <HAL_I2C_Mem_Write+0x20e>
  MODIFY_REG(hi2c->Instance->CR2, \
9000a736:	6853      	ldr	r3, [r2, #4]
9000a738:	4957      	ldr	r1, [pc, #348]	; (9000a898 <HAL_I2C_Mem_Write+0x25c>)
9000a73a:	400b      	ands	r3, r1
9000a73c:	4957      	ldr	r1, [pc, #348]	; (9000a89c <HAL_I2C_Mem_Write+0x260>)
9000a73e:	4333      	orrs	r3, r6
9000a740:	4319      	orrs	r1, r3
      hi2c->XferSize = MAX_NBYTE_SIZE;
9000a742:	23ff      	movs	r3, #255	; 0xff
9000a744:	8523      	strh	r3, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
9000a746:	6051      	str	r1, [r2, #4]
9000a748:	f8df 814c 	ldr.w	r8, [pc, #332]	; 9000a898 <HAL_I2C_Mem_Write+0x25c>
          hi2c->XferSize = MAX_NBYTE_SIZE;
9000a74c:	f04f 0aff 	mov.w	sl, #255	; 0xff
  MODIFY_REG(hi2c->Instance->CR2, \
9000a750:	f8df 9148 	ldr.w	r9, [pc, #328]	; 9000a89c <HAL_I2C_Mem_Write+0x260>
9000a754:	e004      	b.n	9000a760 <HAL_I2C_Mem_Write+0x124>
    } while (hi2c->XferCount > 0U);
9000a756:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
9000a758:	b29b      	uxth	r3, r3
9000a75a:	2b00      	cmp	r3, #0
9000a75c:	f000 8083 	beq.w	9000a866 <HAL_I2C_Mem_Write+0x22a>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
9000a760:	462a      	mov	r2, r5
9000a762:	4639      	mov	r1, r7
9000a764:	4620      	mov	r0, r4
9000a766:	f7ff fd83 	bl	9000a270 <I2C_WaitOnTXISFlagUntilTimeout>
9000a76a:	2800      	cmp	r0, #0
9000a76c:	d16b      	bne.n	9000a846 <HAL_I2C_Mem_Write+0x20a>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
9000a76e:	6a62      	ldr	r2, [r4, #36]	; 0x24
9000a770:	6821      	ldr	r1, [r4, #0]
9000a772:	f812 0b01 	ldrb.w	r0, [r2], #1
      hi2c->XferSize--;
9000a776:	8d23      	ldrh	r3, [r4, #40]	; 0x28
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
9000a778:	6288      	str	r0, [r1, #40]	; 0x28
      hi2c->pBuffPtr++;
9000a77a:	6262      	str	r2, [r4, #36]	; 0x24
      hi2c->XferSize--;
9000a77c:	3b01      	subs	r3, #1
      hi2c->XferCount--;
9000a77e:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      hi2c->XferSize--;
9000a780:	b29b      	uxth	r3, r3
      hi2c->XferCount--;
9000a782:	3a01      	subs	r2, #1
      hi2c->XferSize--;
9000a784:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
9000a786:	b292      	uxth	r2, r2
9000a788:	8562      	strh	r2, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
9000a78a:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
9000a78c:	b292      	uxth	r2, r2
9000a78e:	2a00      	cmp	r2, #0
9000a790:	d0e1      	beq.n	9000a756 <HAL_I2C_Mem_Write+0x11a>
9000a792:	2b00      	cmp	r3, #0
9000a794:	d1df      	bne.n	9000a756 <HAL_I2C_Mem_Write+0x11a>
9000a796:	1c78      	adds	r0, r7, #1
9000a798:	d12c      	bne.n	9000a7f4 <HAL_I2C_Mem_Write+0x1b8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
9000a79a:	698b      	ldr	r3, [r1, #24]
9000a79c:	061a      	lsls	r2, r3, #24
9000a79e:	d5fc      	bpl.n	9000a79a <HAL_I2C_Mem_Write+0x15e>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
9000a7a0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
9000a7a2:	b29b      	uxth	r3, r3
9000a7a4:	2bff      	cmp	r3, #255	; 0xff
9000a7a6:	d940      	bls.n	9000a82a <HAL_I2C_Mem_Write+0x1ee>
  MODIFY_REG(hi2c->Instance->CR2, \
9000a7a8:	684b      	ldr	r3, [r1, #4]
          hi2c->XferSize = MAX_NBYTE_SIZE;
9000a7aa:	f8a4 a028 	strh.w	sl, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
9000a7ae:	ea03 0308 	and.w	r3, r3, r8
9000a7b2:	4333      	orrs	r3, r6
9000a7b4:	ea43 0309 	orr.w	r3, r3, r9
9000a7b8:	604b      	str	r3, [r1, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
9000a7ba:	e7cc      	b.n	9000a756 <HAL_I2C_Mem_Write+0x11a>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
9000a7bc:	6993      	ldr	r3, [r2, #24]
9000a7be:	061b      	lsls	r3, r3, #24
9000a7c0:	d4b4      	bmi.n	9000a72c <HAL_I2C_Mem_Write+0xf0>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
9000a7c2:	f7ff f8bd 	bl	90009940 <HAL_GetTick>
9000a7c6:	1b40      	subs	r0, r0, r5
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
9000a7c8:	6822      	ldr	r2, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
9000a7ca:	4287      	cmp	r7, r0
9000a7cc:	d301      	bcc.n	9000a7d2 <HAL_I2C_Mem_Write+0x196>
9000a7ce:	2f00      	cmp	r7, #0
9000a7d0:	d1a7      	bne.n	9000a722 <HAL_I2C_Mem_Write+0xe6>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
9000a7d2:	6993      	ldr	r3, [r2, #24]
9000a7d4:	f013 0380 	ands.w	r3, r3, #128	; 0x80
9000a7d8:	d1a3      	bne.n	9000a722 <HAL_I2C_Mem_Write+0xe6>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
9000a7da:	6c62      	ldr	r2, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
9000a7dc:	2120      	movs	r1, #32
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
9000a7de:	430a      	orrs	r2, r1
9000a7e0:	6462      	str	r2, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
9000a7e2:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
9000a7e6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
9000a7ea:	2300      	movs	r3, #0
      return HAL_ERROR;
9000a7ec:	2001      	movs	r0, #1
      __HAL_UNLOCK(hi2c);
9000a7ee:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
9000a7f2:	e75e      	b.n	9000a6b2 <HAL_I2C_Mem_Write+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
9000a7f4:	698b      	ldr	r3, [r1, #24]
9000a7f6:	061b      	lsls	r3, r3, #24
9000a7f8:	d4d2      	bmi.n	9000a7a0 <HAL_I2C_Mem_Write+0x164>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
9000a7fa:	f7ff f8a1 	bl	90009940 <HAL_GetTick>
9000a7fe:	1b40      	subs	r0, r0, r5
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
9000a800:	6821      	ldr	r1, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
9000a802:	4287      	cmp	r7, r0
9000a804:	d301      	bcc.n	9000a80a <HAL_I2C_Mem_Write+0x1ce>
9000a806:	2f00      	cmp	r7, #0
9000a808:	d1c5      	bne.n	9000a796 <HAL_I2C_Mem_Write+0x15a>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
9000a80a:	698b      	ldr	r3, [r1, #24]
9000a80c:	f013 0380 	ands.w	r3, r3, #128	; 0x80
9000a810:	d1c1      	bne.n	9000a796 <HAL_I2C_Mem_Write+0x15a>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
9000a812:	6c62      	ldr	r2, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
9000a814:	2120      	movs	r1, #32
          return HAL_ERROR;
9000a816:	2001      	movs	r0, #1
          __HAL_UNLOCK(hi2c);
9000a818:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
9000a81c:	430a      	orrs	r2, r1
9000a81e:	6462      	str	r2, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
9000a820:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
9000a824:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
          return HAL_ERROR;
9000a828:	e743      	b.n	9000a6b2 <HAL_I2C_Mem_Write+0x76>
          hi2c->XferSize = hi2c->XferCount;
9000a82a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
9000a82c:	b29b      	uxth	r3, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
9000a82e:	b2da      	uxtb	r2, r3
          hi2c->XferSize = hi2c->XferCount;
9000a830:	8523      	strh	r3, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
9000a832:	684b      	ldr	r3, [r1, #4]
9000a834:	ea03 0308 	and.w	r3, r3, r8
9000a838:	4333      	orrs	r3, r6
9000a83a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
9000a83e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
9000a842:	604b      	str	r3, [r1, #4]
}
9000a844:	e787      	b.n	9000a756 <HAL_I2C_Mem_Write+0x11a>
        return HAL_ERROR;
9000a846:	2001      	movs	r0, #1
9000a848:	e733      	b.n	9000a6b2 <HAL_I2C_Mem_Write+0x76>
      hi2c->XferSize = hi2c->XferCount;
9000a84a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
  MODIFY_REG(hi2c->Instance->CR2, \
9000a84c:	4812      	ldr	r0, [pc, #72]	; (9000a898 <HAL_I2C_Mem_Write+0x25c>)
      hi2c->XferSize = hi2c->XferCount;
9000a84e:	b29b      	uxth	r3, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
9000a850:	b2d9      	uxtb	r1, r3
      hi2c->XferSize = hi2c->XferCount;
9000a852:	8523      	strh	r3, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
9000a854:	6853      	ldr	r3, [r2, #4]
9000a856:	4003      	ands	r3, r0
9000a858:	4333      	orrs	r3, r6
9000a85a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
9000a85e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
9000a862:	6053      	str	r3, [r2, #4]
}
9000a864:	e770      	b.n	9000a748 <HAL_I2C_Mem_Write+0x10c>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
9000a866:	462a      	mov	r2, r5
9000a868:	4639      	mov	r1, r7
9000a86a:	4620      	mov	r0, r4
9000a86c:	f7ff fdb6 	bl	9000a3dc <I2C_WaitOnSTOPFlagUntilTimeout>
9000a870:	2800      	cmp	r0, #0
9000a872:	d1e8      	bne.n	9000a846 <HAL_I2C_Mem_Write+0x20a>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
9000a874:	6823      	ldr	r3, [r4, #0]
9000a876:	2120      	movs	r1, #32
    I2C_RESET_CR2(hi2c);
9000a878:	4d09      	ldr	r5, [pc, #36]	; (9000a8a0 <HAL_I2C_Mem_Write+0x264>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
9000a87a:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
9000a87c:	685a      	ldr	r2, [r3, #4]
9000a87e:	402a      	ands	r2, r5
9000a880:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
9000a882:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
9000a886:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
9000a88a:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
9000a88e:	e710      	b.n	9000a6b2 <HAL_I2C_Mem_Write+0x76>
9000a890:	fc009800 	.word	0xfc009800
9000a894:	01002000 	.word	0x01002000
9000a898:	fc009c00 	.word	0xfc009c00
9000a89c:	01ff0000 	.word	0x01ff0000
9000a8a0:	fe00e800 	.word	0xfe00e800

9000a8a4 <HAL_I2C_Mem_Read>:
{
9000a8a4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
9000a8a8:	461c      	mov	r4, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
9000a8aa:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
9000a8ae:	f8bd 902c 	ldrh.w	r9, [sp, #44]	; 0x2c
  if (hi2c->State == HAL_I2C_STATE_READY)
9000a8b2:	2b20      	cmp	r3, #32
{
9000a8b4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
  if (hi2c->State == HAL_I2C_STATE_READY)
9000a8b6:	d137      	bne.n	9000a928 <HAL_I2C_Mem_Read+0x84>
    if ((pData == NULL) || (Size == 0U))
9000a8b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
9000a8ba:	4683      	mov	fp, r0
9000a8bc:	b36b      	cbz	r3, 9000a91a <HAL_I2C_Mem_Read+0x76>
9000a8be:	f1b9 0f00 	cmp.w	r9, #0
9000a8c2:	d02a      	beq.n	9000a91a <HAL_I2C_Mem_Read+0x76>
    __HAL_LOCK(hi2c);
9000a8c4:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
9000a8c8:	2b01      	cmp	r3, #1
9000a8ca:	d02d      	beq.n	9000a928 <HAL_I2C_Mem_Read+0x84>
9000a8cc:	2301      	movs	r3, #1
9000a8ce:	460f      	mov	r7, r1
9000a8d0:	4690      	mov	r8, r2
9000a8d2:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
9000a8d6:	f7ff f833 	bl	90009940 <HAL_GetTick>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
9000a8da:	f8db 3000 	ldr.w	r3, [fp]
    tickstart = HAL_GetTick();
9000a8de:	4606      	mov	r6, r0
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
9000a8e0:	699a      	ldr	r2, [r3, #24]
9000a8e2:	0410      	lsls	r0, r2, #16
9000a8e4:	d523      	bpl.n	9000a92e <HAL_I2C_Mem_Read+0x8a>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
9000a8e6:	f7ff f82b 	bl	90009940 <HAL_GetTick>
9000a8ea:	1b80      	subs	r0, r0, r6
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
9000a8ec:	f8db 3000 	ldr.w	r3, [fp]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
9000a8f0:	2819      	cmp	r0, #25
9000a8f2:	d9f5      	bls.n	9000a8e0 <HAL_I2C_Mem_Read+0x3c>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
9000a8f4:	699a      	ldr	r2, [r3, #24]
9000a8f6:	0411      	lsls	r1, r2, #16
9000a8f8:	d5f2      	bpl.n	9000a8e0 <HAL_I2C_Mem_Read+0x3c>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
9000a8fa:	f8db 3044 	ldr.w	r3, [fp, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
9000a8fe:	2120      	movs	r1, #32
          hi2c->Mode = HAL_I2C_MODE_NONE;
9000a900:	2200      	movs	r2, #0
      return HAL_ERROR;
9000a902:	2001      	movs	r0, #1
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
9000a904:	430b      	orrs	r3, r1
          __HAL_UNLOCK(hi2c);
9000a906:	f88b 2040 	strb.w	r2, [fp, #64]	; 0x40
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
9000a90a:	f8cb 3044 	str.w	r3, [fp, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
9000a90e:	f88b 1041 	strb.w	r1, [fp, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
9000a912:	f88b 2042 	strb.w	r2, [fp, #66]	; 0x42
}
9000a916:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
9000a91a:	f44f 7300 	mov.w	r3, #512	; 0x200
      return  HAL_ERROR;
9000a91e:	2001      	movs	r0, #1
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
9000a920:	f8cb 3044 	str.w	r3, [fp, #68]	; 0x44
}
9000a924:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return HAL_BUSY;
9000a928:	2002      	movs	r0, #2
}
9000a92a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    hi2c->pBuffPtr  = pData;
9000a92e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
9000a930:	2122      	movs	r1, #34	; 0x22
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
9000a932:	f3c7 0709 	ubfx	r7, r7, #0, #10
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
9000a936:	4658      	mov	r0, fp
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
9000a938:	f88b 1041 	strb.w	r1, [fp, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
9000a93c:	2140      	movs	r1, #64	; 0x40
    hi2c->pBuffPtr  = pData;
9000a93e:	f8cb 2024 	str.w	r2, [fp, #36]	; 0x24
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
9000a942:	2200      	movs	r2, #0
    hi2c->Mode      = HAL_I2C_MODE_MEM;
9000a944:	f88b 1042 	strb.w	r1, [fp, #66]	; 0x42
    hi2c->XferISR   = NULL;
9000a948:	f8cb 2034 	str.w	r2, [fp, #52]	; 0x34
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
9000a94c:	f8cb 2044 	str.w	r2, [fp, #68]	; 0x44
  MODIFY_REG(hi2c->Instance->CR2, \
9000a950:	4983      	ldr	r1, [pc, #524]	; (9000ab60 <HAL_I2C_Mem_Read+0x2bc>)
    hi2c->XferCount = Size;
9000a952:	f8ab 902a 	strh.w	r9, [fp, #42]	; 0x2a
  MODIFY_REG(hi2c->Instance->CR2, \
9000a956:	685a      	ldr	r2, [r3, #4]
9000a958:	400a      	ands	r2, r1
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
9000a95a:	b2e1      	uxtb	r1, r4
  MODIFY_REG(hi2c->Instance->CR2, \
9000a95c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
9000a960:	4629      	mov	r1, r5
  MODIFY_REG(hi2c->Instance->CR2, \
9000a962:	433a      	orrs	r2, r7
9000a964:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
9000a968:	605a      	str	r2, [r3, #4]
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
9000a96a:	4632      	mov	r2, r6
9000a96c:	f7ff fc80 	bl	9000a270 <I2C_WaitOnTXISFlagUntilTimeout>
9000a970:	2800      	cmp	r0, #0
9000a972:	f040 8091 	bne.w	9000aa98 <HAL_I2C_Mem_Read+0x1f4>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
9000a976:	2c01      	cmp	r4, #1
9000a978:	d00c      	beq.n	9000a994 <HAL_I2C_Mem_Read+0xf0>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
9000a97a:	ea4f 2218 	mov.w	r2, r8, lsr #8
9000a97e:	f8db 3000 	ldr.w	r3, [fp]
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
9000a982:	4629      	mov	r1, r5
9000a984:	4658      	mov	r0, fp
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
9000a986:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
9000a988:	4632      	mov	r2, r6
9000a98a:	f7ff fc71 	bl	9000a270 <I2C_WaitOnTXISFlagUntilTimeout>
9000a98e:	2800      	cmp	r0, #0
9000a990:	f040 8082 	bne.w	9000aa98 <HAL_I2C_Mem_Read+0x1f4>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
9000a994:	fa5f f388 	uxtb.w	r3, r8
9000a998:	f8db 4000 	ldr.w	r4, [fp]
9000a99c:	62a3      	str	r3, [r4, #40]	; 0x28
9000a99e:	1c6a      	adds	r2, r5, #1
9000a9a0:	d160      	bne.n	9000aa64 <HAL_I2C_Mem_Read+0x1c0>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
9000a9a2:	69a3      	ldr	r3, [r4, #24]
9000a9a4:	065b      	lsls	r3, r3, #25
9000a9a6:	d5fc      	bpl.n	9000a9a2 <HAL_I2C_Mem_Read+0xfe>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
9000a9a8:	f8bb 302a 	ldrh.w	r3, [fp, #42]	; 0x2a
9000a9ac:	b29b      	uxth	r3, r3
9000a9ae:	2bff      	cmp	r3, #255	; 0xff
9000a9b0:	f240 80ae 	bls.w	9000ab10 <HAL_I2C_Mem_Read+0x26c>
  MODIFY_REG(hi2c->Instance->CR2, \
9000a9b4:	6863      	ldr	r3, [r4, #4]
9000a9b6:	4a6a      	ldr	r2, [pc, #424]	; (9000ab60 <HAL_I2C_Mem_Read+0x2bc>)
9000a9b8:	4013      	ands	r3, r2
9000a9ba:	4a6a      	ldr	r2, [pc, #424]	; (9000ab64 <HAL_I2C_Mem_Read+0x2c0>)
9000a9bc:	433b      	orrs	r3, r7
9000a9be:	431a      	orrs	r2, r3
      hi2c->XferSize = MAX_NBYTE_SIZE;
9000a9c0:	23ff      	movs	r3, #255	; 0xff
9000a9c2:	f8ab 3028 	strh.w	r3, [fp, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
9000a9c6:	6062      	str	r2, [r4, #4]
9000a9c8:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 9000ab70 <HAL_I2C_Mem_Read+0x2cc>
          hi2c->XferSize = MAX_NBYTE_SIZE;
9000a9cc:	f04f 0aff 	mov.w	sl, #255	; 0xff
  MODIFY_REG(hi2c->Instance->CR2, \
9000a9d0:	f8df 91a0 	ldr.w	r9, [pc, #416]	; 9000ab74 <HAL_I2C_Mem_Read+0x2d0>
9000a9d4:	1c69      	adds	r1, r5, #1
9000a9d6:	d127      	bne.n	9000aa28 <HAL_I2C_Mem_Read+0x184>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
9000a9d8:	69a3      	ldr	r3, [r4, #24]
9000a9da:	075a      	lsls	r2, r3, #29
9000a9dc:	d5fc      	bpl.n	9000a9d8 <HAL_I2C_Mem_Read+0x134>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
9000a9de:	6a62      	ldr	r2, [r4, #36]	; 0x24
9000a9e0:	f8db 3024 	ldr.w	r3, [fp, #36]	; 0x24
9000a9e4:	701a      	strb	r2, [r3, #0]
      hi2c->XferCount--;
9000a9e6:	f8bb 202a 	ldrh.w	r2, [fp, #42]	; 0x2a
      hi2c->pBuffPtr++;
9000a9ea:	f8db 3024 	ldr.w	r3, [fp, #36]	; 0x24
      hi2c->XferCount--;
9000a9ee:	3a01      	subs	r2, #1
      hi2c->pBuffPtr++;
9000a9f0:	3301      	adds	r3, #1
      hi2c->XferCount--;
9000a9f2:	b292      	uxth	r2, r2
      hi2c->pBuffPtr++;
9000a9f4:	f8cb 3024 	str.w	r3, [fp, #36]	; 0x24
      hi2c->XferSize--;
9000a9f8:	f8bb 3028 	ldrh.w	r3, [fp, #40]	; 0x28
      hi2c->XferCount--;
9000a9fc:	f8ab 202a 	strh.w	r2, [fp, #42]	; 0x2a
      hi2c->XferSize--;
9000aa00:	3b01      	subs	r3, #1
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
9000aa02:	f8bb 202a 	ldrh.w	r2, [fp, #42]	; 0x2a
      hi2c->XferSize--;
9000aa06:	b29b      	uxth	r3, r3
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
9000aa08:	b292      	uxth	r2, r2
      hi2c->XferSize--;
9000aa0a:	f8ab 3028 	strh.w	r3, [fp, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
9000aa0e:	b10a      	cbz	r2, 9000aa14 <HAL_I2C_Mem_Read+0x170>
9000aa10:	2b00      	cmp	r3, #0
9000aa12:	d046      	beq.n	9000aaa2 <HAL_I2C_Mem_Read+0x1fe>
    } while (hi2c->XferCount > 0U);
9000aa14:	f8bb 302a 	ldrh.w	r3, [fp, #42]	; 0x2a
9000aa18:	b29b      	uxth	r3, r3
9000aa1a:	2b00      	cmp	r3, #0
9000aa1c:	f000 8088 	beq.w	9000ab30 <HAL_I2C_Mem_Read+0x28c>
9000aa20:	1c69      	adds	r1, r5, #1
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
9000aa22:	f8db 4000 	ldr.w	r4, [fp]
9000aa26:	d0d7      	beq.n	9000a9d8 <HAL_I2C_Mem_Read+0x134>
9000aa28:	69a3      	ldr	r3, [r4, #24]
9000aa2a:	075b      	lsls	r3, r3, #29
9000aa2c:	d4d7      	bmi.n	9000a9de <HAL_I2C_Mem_Read+0x13a>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
9000aa2e:	f7fe ff87 	bl	90009940 <HAL_GetTick>
9000aa32:	1b80      	subs	r0, r0, r6
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
9000aa34:	f8db 4000 	ldr.w	r4, [fp]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
9000aa38:	4285      	cmp	r5, r0
9000aa3a:	d301      	bcc.n	9000aa40 <HAL_I2C_Mem_Read+0x19c>
9000aa3c:	2d00      	cmp	r5, #0
9000aa3e:	d1c9      	bne.n	9000a9d4 <HAL_I2C_Mem_Read+0x130>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
9000aa40:	69a3      	ldr	r3, [r4, #24]
9000aa42:	f013 0304 	ands.w	r3, r3, #4
9000aa46:	d1c5      	bne.n	9000a9d4 <HAL_I2C_Mem_Read+0x130>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
9000aa48:	f8db 2044 	ldr.w	r2, [fp, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
9000aa4c:	2120      	movs	r1, #32
          return HAL_ERROR;
9000aa4e:	2001      	movs	r0, #1
          __HAL_UNLOCK(hi2c);
9000aa50:	f88b 3040 	strb.w	r3, [fp, #64]	; 0x40
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
9000aa54:	430a      	orrs	r2, r1
9000aa56:	f8cb 2044 	str.w	r2, [fp, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
9000aa5a:	f88b 1041 	strb.w	r1, [fp, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
9000aa5e:	f88b 3042 	strb.w	r3, [fp, #66]	; 0x42
          return HAL_ERROR;
9000aa62:	e75f      	b.n	9000a924 <HAL_I2C_Mem_Read+0x80>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
9000aa64:	69a3      	ldr	r3, [r4, #24]
9000aa66:	0658      	lsls	r0, r3, #25
9000aa68:	d49e      	bmi.n	9000a9a8 <HAL_I2C_Mem_Read+0x104>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
9000aa6a:	f7fe ff69 	bl	90009940 <HAL_GetTick>
9000aa6e:	1b80      	subs	r0, r0, r6
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
9000aa70:	f8db 4000 	ldr.w	r4, [fp]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
9000aa74:	4285      	cmp	r5, r0
9000aa76:	d301      	bcc.n	9000aa7c <HAL_I2C_Mem_Read+0x1d8>
9000aa78:	2d00      	cmp	r5, #0
9000aa7a:	d190      	bne.n	9000a99e <HAL_I2C_Mem_Read+0xfa>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
9000aa7c:	69a3      	ldr	r3, [r4, #24]
9000aa7e:	f013 0340 	ands.w	r3, r3, #64	; 0x40
9000aa82:	d18c      	bne.n	9000a99e <HAL_I2C_Mem_Read+0xfa>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
9000aa84:	f8db 2044 	ldr.w	r2, [fp, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
9000aa88:	2120      	movs	r1, #32
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
9000aa8a:	430a      	orrs	r2, r1
9000aa8c:	f8cb 2044 	str.w	r2, [fp, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
9000aa90:	f88b 1041 	strb.w	r1, [fp, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
9000aa94:	f88b 3042 	strb.w	r3, [fp, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
9000aa98:	2300      	movs	r3, #0
      return HAL_ERROR;
9000aa9a:	2001      	movs	r0, #1
      __HAL_UNLOCK(hi2c);
9000aa9c:	f88b 3040 	strb.w	r3, [fp, #64]	; 0x40
      return HAL_ERROR;
9000aaa0:	e740      	b.n	9000a924 <HAL_I2C_Mem_Read+0x80>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
9000aaa2:	f8db 2000 	ldr.w	r2, [fp]
9000aaa6:	1c68      	adds	r0, r5, #1
9000aaa8:	d111      	bne.n	9000aace <HAL_I2C_Mem_Read+0x22a>
9000aaaa:	6993      	ldr	r3, [r2, #24]
9000aaac:	0619      	lsls	r1, r3, #24
9000aaae:	d5fc      	bpl.n	9000aaaa <HAL_I2C_Mem_Read+0x206>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
9000aab0:	f8bb 302a 	ldrh.w	r3, [fp, #42]	; 0x2a
9000aab4:	b29b      	uxth	r3, r3
9000aab6:	2bff      	cmp	r3, #255	; 0xff
9000aab8:	d91a      	bls.n	9000aaf0 <HAL_I2C_Mem_Read+0x24c>
  MODIFY_REG(hi2c->Instance->CR2, \
9000aaba:	6853      	ldr	r3, [r2, #4]
          hi2c->XferSize = MAX_NBYTE_SIZE;
9000aabc:	f8ab a028 	strh.w	sl, [fp, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
9000aac0:	ea03 0308 	and.w	r3, r3, r8
9000aac4:	433b      	orrs	r3, r7
9000aac6:	ea43 0309 	orr.w	r3, r3, r9
9000aaca:	6053      	str	r3, [r2, #4]
}
9000aacc:	e7a2      	b.n	9000aa14 <HAL_I2C_Mem_Read+0x170>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
9000aace:	6993      	ldr	r3, [r2, #24]
9000aad0:	061b      	lsls	r3, r3, #24
9000aad2:	d4ed      	bmi.n	9000aab0 <HAL_I2C_Mem_Read+0x20c>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
9000aad4:	f7fe ff34 	bl	90009940 <HAL_GetTick>
9000aad8:	1b80      	subs	r0, r0, r6
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
9000aada:	f8db 2000 	ldr.w	r2, [fp]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
9000aade:	4285      	cmp	r5, r0
9000aae0:	d301      	bcc.n	9000aae6 <HAL_I2C_Mem_Read+0x242>
9000aae2:	2d00      	cmp	r5, #0
9000aae4:	d1df      	bne.n	9000aaa6 <HAL_I2C_Mem_Read+0x202>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
9000aae6:	6993      	ldr	r3, [r2, #24]
9000aae8:	f013 0380 	ands.w	r3, r3, #128	; 0x80
9000aaec:	d1db      	bne.n	9000aaa6 <HAL_I2C_Mem_Read+0x202>
9000aaee:	e7ab      	b.n	9000aa48 <HAL_I2C_Mem_Read+0x1a4>
          hi2c->XferSize = hi2c->XferCount;
9000aaf0:	f8bb 302a 	ldrh.w	r3, [fp, #42]	; 0x2a
9000aaf4:	b29b      	uxth	r3, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
9000aaf6:	b2d9      	uxtb	r1, r3
          hi2c->XferSize = hi2c->XferCount;
9000aaf8:	f8ab 3028 	strh.w	r3, [fp, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
9000aafc:	6853      	ldr	r3, [r2, #4]
9000aafe:	ea03 0308 	and.w	r3, r3, r8
9000ab02:	433b      	orrs	r3, r7
9000ab04:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
9000ab08:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
9000ab0c:	6053      	str	r3, [r2, #4]
}
9000ab0e:	e781      	b.n	9000aa14 <HAL_I2C_Mem_Read+0x170>
      hi2c->XferSize = hi2c->XferCount;
9000ab10:	f8bb 302a 	ldrh.w	r3, [fp, #42]	; 0x2a
  MODIFY_REG(hi2c->Instance->CR2, \
9000ab14:	4912      	ldr	r1, [pc, #72]	; (9000ab60 <HAL_I2C_Mem_Read+0x2bc>)
      hi2c->XferSize = hi2c->XferCount;
9000ab16:	b29b      	uxth	r3, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
9000ab18:	b2da      	uxtb	r2, r3
      hi2c->XferSize = hi2c->XferCount;
9000ab1a:	f8ab 3028 	strh.w	r3, [fp, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
9000ab1e:	6863      	ldr	r3, [r4, #4]
9000ab20:	400b      	ands	r3, r1
9000ab22:	433b      	orrs	r3, r7
9000ab24:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
9000ab28:	4a0f      	ldr	r2, [pc, #60]	; (9000ab68 <HAL_I2C_Mem_Read+0x2c4>)
9000ab2a:	431a      	orrs	r2, r3
9000ab2c:	6062      	str	r2, [r4, #4]
}
9000ab2e:	e74b      	b.n	9000a9c8 <HAL_I2C_Mem_Read+0x124>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
9000ab30:	4632      	mov	r2, r6
9000ab32:	4629      	mov	r1, r5
9000ab34:	4658      	mov	r0, fp
9000ab36:	f7ff fc51 	bl	9000a3dc <I2C_WaitOnSTOPFlagUntilTimeout>
9000ab3a:	b970      	cbnz	r0, 9000ab5a <HAL_I2C_Mem_Read+0x2b6>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
9000ab3c:	f8db 3000 	ldr.w	r3, [fp]
9000ab40:	2120      	movs	r1, #32
    I2C_RESET_CR2(hi2c);
9000ab42:	4c0a      	ldr	r4, [pc, #40]	; (9000ab6c <HAL_I2C_Mem_Read+0x2c8>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
9000ab44:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
9000ab46:	685a      	ldr	r2, [r3, #4]
9000ab48:	4022      	ands	r2, r4
9000ab4a:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
9000ab4c:	f88b 1041 	strb.w	r1, [fp, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
9000ab50:	f88b 0040 	strb.w	r0, [fp, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
9000ab54:	f88b 0042 	strb.w	r0, [fp, #66]	; 0x42
    return HAL_OK;
9000ab58:	e6e4      	b.n	9000a924 <HAL_I2C_Mem_Read+0x80>
      return HAL_ERROR;
9000ab5a:	2001      	movs	r0, #1
9000ab5c:	e6e2      	b.n	9000a924 <HAL_I2C_Mem_Read+0x80>
9000ab5e:	bf00      	nop
9000ab60:	fc009800 	.word	0xfc009800
9000ab64:	01ff2400 	.word	0x01ff2400
9000ab68:	02002400 	.word	0x02002400
9000ab6c:	fe00e800 	.word	0xfe00e800
9000ab70:	fc009c00 	.word	0xfc009c00
9000ab74:	01ff0000 	.word	0x01ff0000

9000ab78 <HAL_I2C_GetState>:
  return hi2c->State;
9000ab78:	f890 0041 	ldrb.w	r0, [r0, #65]	; 0x41
}
9000ab7c:	4770      	bx	lr
9000ab7e:	bf00      	nop

9000ab80 <HAL_I2C_GetError>:
  return hi2c->ErrorCode;
9000ab80:	6c40      	ldr	r0, [r0, #68]	; 0x44
}
9000ab82:	4770      	bx	lr

9000ab84 <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
9000ab84:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
9000ab88:	2a20      	cmp	r2, #32
9000ab8a:	d123      	bne.n	9000abd4 <HAL_I2CEx_ConfigAnalogFilter+0x50>
9000ab8c:	fa5f fc82 	uxtb.w	ip, r2
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
9000ab90:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
9000ab94:	4603      	mov	r3, r0
9000ab96:	2a01      	cmp	r2, #1
9000ab98:	d01c      	beq.n	9000abd4 <HAL_I2CEx_ConfigAnalogFilter+0x50>

    hi2c->State = HAL_I2C_STATE_BUSY;

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
9000ab9a:	6802      	ldr	r2, [r0, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
9000ab9c:	2024      	movs	r0, #36	; 0x24
{
9000ab9e:	b500      	push	{lr}
    hi2c->State = HAL_I2C_STATE_BUSY;
9000aba0:	f883 0041 	strb.w	r0, [r3, #65]	; 0x41
    __HAL_I2C_ENABLE(hi2c);

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
9000aba4:	f04f 0e00 	mov.w	lr, #0
    __HAL_I2C_DISABLE(hi2c);
9000aba8:	6810      	ldr	r0, [r2, #0]
9000abaa:	f020 0001 	bic.w	r0, r0, #1
9000abae:	6010      	str	r0, [r2, #0]
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
9000abb0:	6810      	ldr	r0, [r2, #0]
9000abb2:	f420 5080 	bic.w	r0, r0, #4096	; 0x1000
9000abb6:	6010      	str	r0, [r2, #0]
    hi2c->Instance->CR1 |= AnalogFilter;
9000abb8:	6810      	ldr	r0, [r2, #0]
9000abba:	4301      	orrs	r1, r0

    return HAL_OK;
9000abbc:	4670      	mov	r0, lr
    hi2c->Instance->CR1 |= AnalogFilter;
9000abbe:	6011      	str	r1, [r2, #0]
    __HAL_I2C_ENABLE(hi2c);
9000abc0:	6811      	ldr	r1, [r2, #0]
9000abc2:	f041 0101 	orr.w	r1, r1, #1
9000abc6:	6011      	str	r1, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
9000abc8:	f883 c041 	strb.w	ip, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
9000abcc:	f883 e040 	strb.w	lr, [r3, #64]	; 0x40
  }
  else
  {
    return HAL_BUSY;
  }
}
9000abd0:	f85d fb04 	ldr.w	pc, [sp], #4
    return HAL_BUSY;
9000abd4:	2002      	movs	r0, #2
}
9000abd6:	4770      	bx	lr

9000abd8 <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
9000abd8:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
9000abdc:	2a20      	cmp	r2, #32
9000abde:	d122      	bne.n	9000ac26 <HAL_I2CEx_ConfigDigitalFilter+0x4e>
9000abe0:	4603      	mov	r3, r0
{
9000abe2:	b500      	push	{lr}
9000abe4:	fa5f fe82 	uxtb.w	lr, r2
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
9000abe8:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
9000abec:	2a01      	cmp	r2, #1
9000abee:	d01c      	beq.n	9000ac2a <HAL_I2CEx_ConfigDigitalFilter+0x52>

    hi2c->State = HAL_I2C_STATE_BUSY;

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
9000abf0:	6802      	ldr	r2, [r0, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
9000abf2:	2024      	movs	r0, #36	; 0x24
    __HAL_I2C_ENABLE(hi2c);

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
9000abf4:	f04f 0c00 	mov.w	ip, #0
    hi2c->State = HAL_I2C_STATE_BUSY;
9000abf8:	f883 0041 	strb.w	r0, [r3, #65]	; 0x41
    __HAL_I2C_DISABLE(hi2c);
9000abfc:	6810      	ldr	r0, [r2, #0]
9000abfe:	f020 0001 	bic.w	r0, r0, #1
9000ac02:	6010      	str	r0, [r2, #0]
    tmpreg = hi2c->Instance->CR1;
9000ac04:	6810      	ldr	r0, [r2, #0]
    tmpreg &= ~(I2C_CR1_DNF);
9000ac06:	f420 6070 	bic.w	r0, r0, #3840	; 0xf00
    tmpreg |= DigitalFilter << 8U;
9000ac0a:	ea40 2101 	orr.w	r1, r0, r1, lsl #8

    return HAL_OK;
9000ac0e:	4660      	mov	r0, ip
    hi2c->Instance->CR1 = tmpreg;
9000ac10:	6011      	str	r1, [r2, #0]
    __HAL_I2C_ENABLE(hi2c);
9000ac12:	6811      	ldr	r1, [r2, #0]
9000ac14:	f041 0101 	orr.w	r1, r1, #1
9000ac18:	6011      	str	r1, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
9000ac1a:	f883 e041 	strb.w	lr, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
9000ac1e:	f883 c040 	strb.w	ip, [r3, #64]	; 0x40
  }
  else
  {
    return HAL_BUSY;
  }
}
9000ac22:	f85d fb04 	ldr.w	pc, [sp], #4
    return HAL_BUSY;
9000ac26:	2002      	movs	r0, #2
}
9000ac28:	4770      	bx	lr
    return HAL_BUSY;
9000ac2a:	2002      	movs	r0, #2
}
9000ac2c:	f85d fb04 	ldr.w	pc, [sp], #4

9000ac30 <JPEG_Bits_To_SizeCodes>:
  * @param  Huffcode pointer to codes table
  * @param  LastK pointer to last Coeff (table dimension)
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Bits_To_SizeCodes(uint8_t *Bits, uint8_t *Huffsize, uint32_t *Huffcode, uint32_t *LastK)
{
9000ac30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
9000ac34:	460d      	mov	r5, r1
9000ac36:	4614      	mov	r4, r2
9000ac38:	469a      	mov	sl, r3

  /* Figure C.1: Generation of table of Huffman code sizes */
  p = 0;
  for (l = 0; l < 16UL; l++)
  {
    i = (uint32_t)Bits[l];
9000ac3a:	7806      	ldrb	r6, [r0, #0]
    if ((p + i) > 256UL)
9000ac3c:	4681      	mov	r9, r0
    i = (uint32_t)Bits[l];
9000ac3e:	2701      	movs	r7, #1
  p = 0;
9000ac40:	f04f 0800 	mov.w	r8, #0
9000ac44:	e006      	b.n	9000ac54 <JPEG_Bits_To_SizeCodes+0x24>
    i = (uint32_t)Bits[l];
9000ac46:	f819 6f01 	ldrb.w	r6, [r9, #1]!
    if ((p + i) > 256UL)
9000ac4a:	eb06 0308 	add.w	r3, r6, r8
9000ac4e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
9000ac52:	d837      	bhi.n	9000acc4 <JPEG_Bits_To_SizeCodes+0x94>
      /* check for table overflow */
      return HAL_ERROR;
    }
    while (i != 0UL)
    {
      Huffsize[p] = (uint8_t) l + 1U;
9000ac54:	eb05 0008 	add.w	r0, r5, r8
9000ac58:	4632      	mov	r2, r6
9000ac5a:	4639      	mov	r1, r7
    while (i != 0UL)
9000ac5c:	b116      	cbz	r6, 9000ac64 <JPEG_Bits_To_SizeCodes+0x34>
      p++;
9000ac5e:	44b0      	add	r8, r6
      Huffsize[p] = (uint8_t) l + 1U;
9000ac60:	f01c ffac 	bl	90027bbc <memset>
  for (l = 0; l < 16UL; l++)
9000ac64:	2f10      	cmp	r7, #16
    if ((p + i) > 256UL)
9000ac66:	f107 0701 	add.w	r7, r7, #1
  for (l = 0; l < 16UL; l++)
9000ac6a:	d1ec      	bne.n	9000ac46 <JPEG_Bits_To_SizeCodes+0x16>
      i--;
    }
  }
  Huffsize[p] = 0;
9000ac6c:	2300      	movs	r3, #0
9000ac6e:	f805 3008 	strb.w	r3, [r5, r8]
  *LastK = p;
9000ac72:	f8ca 8000 	str.w	r8, [sl]

  /* Figure C.2: Generation of table of Huffman codes */
  code = 0;
  si = Huffsize[0];
9000ac76:	7828      	ldrb	r0, [r5, #0]
9000ac78:	4601      	mov	r1, r0
  p = 0;
  while (Huffsize[p] != 0U)
9000ac7a:	b300      	cbz	r0, 9000acbe <JPEG_Bits_To_SizeCodes+0x8e>
9000ac7c:	f06f 4840 	mvn.w	r8, #3221225472	; 0xc0000000
    /* code must fit in "size" bits (si), no code is allowed to be all ones*/
    if(si > 31UL)
    {
      return HAL_ERROR;
    }
    if (((uint32_t) code) >= (((uint32_t) 1) << si))
9000ac80:	2701      	movs	r7, #1
  p = 0;
9000ac82:	461a      	mov	r2, r3
    while (((uint32_t) Huffsize[p]) == si)
9000ac84:	4288      	cmp	r0, r1
9000ac86:	d10f      	bne.n	9000aca8 <JPEG_Bits_To_SizeCodes+0x78>
9000ac88:	eb02 0008 	add.w	r0, r2, r8
9000ac8c:	1c56      	adds	r6, r2, #1
9000ac8e:	eb05 0c02 	add.w	ip, r5, r2
9000ac92:	eb04 0080 	add.w	r0, r4, r0, lsl #2
9000ac96:	1af6      	subs	r6, r6, r3
      Huffcode[p] = code;
9000ac98:	f840 3f04 	str.w	r3, [r0, #4]!
      p++;
9000ac9c:	18f2      	adds	r2, r6, r3
    while (((uint32_t) Huffsize[p]) == si)
9000ac9e:	f81c ef01 	ldrb.w	lr, [ip, #1]!
      code++;
9000aca2:	3301      	adds	r3, #1
    while (((uint32_t) Huffsize[p]) == si)
9000aca4:	458e      	cmp	lr, r1
9000aca6:	d0f7      	beq.n	9000ac98 <JPEG_Bits_To_SizeCodes+0x68>
    if(si > 31UL)
9000aca8:	291f      	cmp	r1, #31
9000acaa:	d80b      	bhi.n	9000acc4 <JPEG_Bits_To_SizeCodes+0x94>
    if (((uint32_t) code) >= (((uint32_t) 1) << si))
9000acac:	fa07 f001 	lsl.w	r0, r7, r1
9000acb0:	4298      	cmp	r0, r3
9000acb2:	d907      	bls.n	9000acc4 <JPEG_Bits_To_SizeCodes+0x94>
  while (Huffsize[p] != 0U)
9000acb4:	5ca8      	ldrb	r0, [r5, r2]
    {
      return HAL_ERROR;
    }
    code <<= 1;
9000acb6:	005b      	lsls	r3, r3, #1
    si++;
9000acb8:	3101      	adds	r1, #1
  while (Huffsize[p] != 0U)
9000acba:	2800      	cmp	r0, #0
9000acbc:	d1e2      	bne.n	9000ac84 <JPEG_Bits_To_SizeCodes+0x54>
  }
  /* Return function status */
  return HAL_OK;
9000acbe:	2000      	movs	r0, #0
}
9000acc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      return HAL_ERROR;
9000acc4:	2001      	movs	r0, #1
}
9000acc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
9000acca:	bf00      	nop

9000accc <JPEG_DCHuff_BitsVals_To_SizeCodes>:
  * @param  DC_SizeCodesTable pointer to DC huffman Sizes/Codes table
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_DCHuff_BitsVals_To_SizeCodes(JPEG_DCHuffTableTypeDef *DC_BitsValsTable,
                                                           JPEG_DC_HuffCodeTableTypeDef *DC_SizeCodesTable)
{
9000accc:	b5f0      	push	{r4, r5, r6, r7, lr}
9000acce:	f2ad 5d14 	subw	sp, sp, #1300	; 0x514
9000acd2:	460d      	mov	r5, r1
9000acd4:	4604      	mov	r4, r0
  uint32_t k;
  uint32_t l;
  uint32_t lastK;
  uint8_t huffsize[257];
  uint32_t huffcode[257];
  error = JPEG_Bits_To_SizeCodes(DC_BitsValsTable->Bits, huffsize, huffcode, &lastK);
9000acd6:	ab01      	add	r3, sp, #4
9000acd8:	aa43      	add	r2, sp, #268	; 0x10c
9000acda:	a902      	add	r1, sp, #8
9000acdc:	f7ff ffa8 	bl	9000ac30 <JPEG_Bits_To_SizeCodes>
  if (error != HAL_OK)
9000ace0:	b9d0      	cbnz	r0, 9000ad18 <JPEG_DCHuff_BitsVals_To_SizeCodes+0x4c>
    return  error;
  }
  /* Figure C.3: ordering procedure for encoding procedure code tables */
  k = 0;

  while (k < lastK)
9000ace2:	9f01      	ldr	r7, [sp, #4]
9000ace4:	b1c7      	cbz	r7, 9000ad18 <JPEG_DCHuff_BitsVals_To_SizeCodes+0x4c>
9000ace6:	370f      	adds	r7, #15
9000ace8:	f50d 7e86 	add.w	lr, sp, #268	; 0x10c
9000acec:	a902      	add	r1, sp, #8
9000acee:	f104 0c0f 	add.w	ip, r4, #15
9000acf2:	4427      	add	r7, r4
9000acf4:	e009      	b.n	9000ad0a <JPEG_DCHuff_BitsVals_To_SizeCodes+0x3e>
      return HAL_ERROR; /* Huffman Table overflow error*/
    }
    else
    {
      DC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
      DC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
9000acf6:	f811 2b01 	ldrb.w	r2, [r1], #1
  while (k < lastK)
9000acfa:	45bc      	cmp	ip, r7
      DC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
9000acfc:	f85e 6b04 	ldr.w	r6, [lr], #4
      DC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
9000ad00:	f102 32ff 	add.w	r2, r2, #4294967295
      DC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
9000ad04:	60e6      	str	r6, [r4, #12]
      DC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
9000ad06:	54ea      	strb	r2, [r5, r3]
  while (k < lastK)
9000ad08:	d006      	beq.n	9000ad18 <JPEG_DCHuff_BitsVals_To_SizeCodes+0x4c>
    l = DC_BitsValsTable->HuffVal[k];
9000ad0a:	f81c 3f01 	ldrb.w	r3, [ip, #1]!
    if (l >= JPEG_DC_HUFF_TABLE_SIZE)
9000ad0e:	2b0b      	cmp	r3, #11
      DC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
9000ad10:	eb05 0483 	add.w	r4, r5, r3, lsl #2
    if (l >= JPEG_DC_HUFF_TABLE_SIZE)
9000ad14:	d9ef      	bls.n	9000acf6 <JPEG_DCHuff_BitsVals_To_SizeCodes+0x2a>
      return HAL_ERROR; /* Huffman Table overflow error*/
9000ad16:	2001      	movs	r0, #1
    }
  }

  /* Return function status */
  return HAL_OK;
}
9000ad18:	f20d 5d14 	addw	sp, sp, #1300	; 0x514
9000ad1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
9000ad1e:	bf00      	nop

9000ad20 <JPEG_Set_HuffDC_Mem>:
  * @param  DCTableAddress Encoder DC huffman table address it could be HUFFENC_DC0 or HUFFENC_DC1.
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Set_HuffDC_Mem(JPEG_HandleTypeDef *hjpeg, JPEG_DCHuffTableTypeDef *HuffTableDC,
                                             const __IO uint32_t *DCTableAddress)
{
9000ad20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t i;
  uint32_t lsb;
  uint32_t msb;
  __IO uint32_t *address, *addressDef;

  if (DCTableAddress == (hjpeg->Instance->HUFFENC_DC0))
9000ad24:	6804      	ldr	r4, [r0, #0]
{
9000ad26:	b093      	sub	sp, #76	; 0x4c
9000ad28:	4608      	mov	r0, r1
  if (DCTableAddress == (hjpeg->Instance->HUFFENC_DC0))
9000ad2a:	f504 63f8 	add.w	r3, r4, #1984	; 0x7c0
9000ad2e:	429a      	cmp	r2, r3
9000ad30:	f000 809d 	beq.w	9000ae6e <JPEG_Set_HuffDC_Mem+0x14e>
  {
    address = (hjpeg->Instance->HUFFENC_DC0 + (JPEG_DC_HUFF_TABLE_SIZE / 2UL));
  }
  else if (DCTableAddress == (hjpeg->Instance->HUFFENC_DC1))
9000ad34:	f504 63fc 	add.w	r3, r4, #2016	; 0x7e0
9000ad38:	429a      	cmp	r2, r3
9000ad3a:	d003      	beq.n	9000ad44 <JPEG_Set_HuffDC_Mem+0x24>
  {
    address = (hjpeg->Instance->HUFFENC_DC1 + (JPEG_DC_HUFF_TABLE_SIZE / 2UL));
  }
  else
  {
    return HAL_ERROR;
9000ad3c:	2001      	movs	r0, #1
    }
  }

  /* Return function status */
  return HAL_OK;
}
9000ad3e:	b013      	add	sp, #76	; 0x4c
9000ad40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    address = (hjpeg->Instance->HUFFENC_DC1 + (JPEG_DC_HUFF_TABLE_SIZE / 2UL));
9000ad44:	f504 64ff 	add.w	r4, r4, #2040	; 0x7f8
    error = JPEG_DCHuff_BitsVals_To_SizeCodes(HuffTableDC, &dcSizeCodesTable);
9000ad48:	a903      	add	r1, sp, #12
9000ad4a:	f7ff ffbf 	bl	9000accc <JPEG_DCHuff_BitsVals_To_SizeCodes>
    if (error != HAL_OK)
9000ad4e:	2800      	cmp	r0, #0
9000ad50:	d1f5      	bne.n	9000ad3e <JPEG_Set_HuffDC_Mem+0x1e>
    *addressDef = 0x0FFF0FFF;
9000ad52:	f06f 23f0 	mvn.w	r3, #4026593280	; 0xf000f000
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
9000ad56:	f89d a017 	ldrb.w	sl, [sp, #23]
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
9000ad5a:	f89d e016 	ldrb.w	lr, [sp, #22]
    *addressDef = 0x0FFF0FFF;
9000ad5e:	6023      	str	r3, [r4, #0]
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
9000ad60:	ea4f 2a0a 	mov.w	sl, sl, lsl #8
    *addressDef = 0x0FFF0FFF;
9000ad64:	6063      	str	r3, [r4, #4]
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
9000ad66:	ea4f 2e0e 	mov.w	lr, lr, lsl #8
9000ad6a:	f89d 300e 	ldrb.w	r3, [sp, #14]
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
9000ad6e:	f40a 6a70 	and.w	sl, sl, #3840	; 0xf00
9000ad72:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
9000ad76:	f40e 6e70 	and.w	lr, lr, #3840	; 0xf00
9000ad7a:	021b      	lsls	r3, r3, #8
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
9000ad7c:	f89d 9015 	ldrb.w	r9, [sp, #21]
9000ad80:	ea4a 0a02 	orr.w	sl, sl, r2
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
9000ad84:	f89d c014 	ldrb.w	ip, [sp, #20]
9000ad88:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
9000ad8c:	ea4f 2909 	mov.w	r9, r9, lsl #8
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
9000ad90:	ea4f 2c0c 	mov.w	ip, ip, lsl #8
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
9000ad94:	f89d 8013 	ldrb.w	r8, [sp, #19]
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
9000ad98:	9301      	str	r3, [sp, #4]
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
9000ad9a:	f409 6970 	and.w	r9, r9, #3840	; 0xf00
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
9000ad9e:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
9000ada2:	f40c 6c70 	and.w	ip, ip, #3840	; 0xf00
9000ada6:	f89d 1012 	ldrb.w	r1, [sp, #18]
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
9000adaa:	ea4f 2808 	mov.w	r8, r8, lsl #8
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
9000adae:	ea4e 0e03 	orr.w	lr, lr, r3
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
9000adb2:	f89d 7011 	ldrb.w	r7, [sp, #17]
9000adb6:	f408 6870 	and.w	r8, r8, #3840	; 0xf00
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
9000adba:	0209      	lsls	r1, r1, #8
      *address = lsb | (msb << 16);
9000adbc:	ea4e 4e0a 	orr.w	lr, lr, sl, lsl #16
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
9000adc0:	f89d 2010 	ldrb.w	r2, [sp, #16]
9000adc4:	f401 6170 	and.w	r1, r1, #3840	; 0xf00
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
9000adc8:	023f      	lsls	r7, r7, #8
      *address = lsb | (msb << 16);
9000adca:	f844 ec04 	str.w	lr, [r4, #-4]
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
9000adce:	0212      	lsls	r2, r2, #8
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
9000add0:	f89d e03c 	ldrb.w	lr, [sp, #60]	; 0x3c
9000add4:	f407 6770 	and.w	r7, r7, #3840	; 0xf00
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
9000add8:	f402 6270 	and.w	r2, r2, #3840	; 0xf00
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
9000addc:	f89d 600f 	ldrb.w	r6, [sp, #15]
9000ade0:	ea49 090e 	orr.w	r9, r9, lr
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
9000ade4:	f89d e038 	ldrb.w	lr, [sp, #56]	; 0x38
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
9000ade8:	0236      	lsls	r6, r6, #8
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
9000adea:	9b01      	ldr	r3, [sp, #4]
9000adec:	ea4c 0c0e 	orr.w	ip, ip, lr
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
9000adf0:	f89d 500d 	ldrb.w	r5, [sp, #13]
9000adf4:	f406 6670 	and.w	r6, r6, #3840	; 0xf00
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
9000adf8:	f89d b00c 	ldrb.w	fp, [sp, #12]
      *address = lsb | (msb << 16);
9000adfc:	ea4c 4c09 	orr.w	ip, ip, r9, lsl #16
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
9000ae00:	022d      	lsls	r5, r5, #8
      *address = lsb | (msb << 16);
9000ae02:	f844 cc08 	str.w	ip, [r4, #-8]
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
9000ae06:	ea4f 2b0b 	mov.w	fp, fp, lsl #8
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
9000ae0a:	f89d c034 	ldrb.w	ip, [sp, #52]	; 0x34
9000ae0e:	f405 6570 	and.w	r5, r5, #3840	; 0xf00
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
9000ae12:	f40b 6b70 	and.w	fp, fp, #3840	; 0xf00
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
9000ae16:	ea48 080c 	orr.w	r8, r8, ip
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
9000ae1a:	f89d c030 	ldrb.w	ip, [sp, #48]	; 0x30
9000ae1e:	ea41 010c 	orr.w	r1, r1, ip
      *address = lsb | (msb << 16);
9000ae22:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
9000ae26:	f844 1c0c 	str.w	r1, [r4, #-12]
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
9000ae2a:	f89d 102c 	ldrb.w	r1, [sp, #44]	; 0x2c
9000ae2e:	430f      	orrs	r7, r1
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
9000ae30:	f89d 1028 	ldrb.w	r1, [sp, #40]	; 0x28
9000ae34:	430a      	orrs	r2, r1
      *address = lsb | (msb << 16);
9000ae36:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
9000ae3a:	f844 2c10 	str.w	r2, [r4, #-16]
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
9000ae3e:	f89d 2024 	ldrb.w	r2, [sp, #36]	; 0x24
9000ae42:	4316      	orrs	r6, r2
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
9000ae44:	f89d 2020 	ldrb.w	r2, [sp, #32]
9000ae48:	4313      	orrs	r3, r2
      *address = lsb | (msb << 16);
9000ae4a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
9000ae4e:	f844 3c14 	str.w	r3, [r4, #-20]
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
9000ae52:	f89d 301c 	ldrb.w	r3, [sp, #28]
9000ae56:	431d      	orrs	r5, r3
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
9000ae58:	f89d 3018 	ldrb.w	r3, [sp, #24]
9000ae5c:	ea4b 0303 	orr.w	r3, fp, r3
      *address = lsb | (msb << 16);
9000ae60:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
9000ae64:	f844 3c18 	str.w	r3, [r4, #-24]
}
9000ae68:	b013      	add	sp, #76	; 0x4c
9000ae6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    address = (hjpeg->Instance->HUFFENC_DC0 + (JPEG_DC_HUFF_TABLE_SIZE / 2UL));
9000ae6e:	f504 64fb 	add.w	r4, r4, #2008	; 0x7d8
9000ae72:	e769      	b.n	9000ad48 <JPEG_Set_HuffDC_Mem+0x28>

9000ae74 <JPEG_Set_HuffAC_Mem>:
  * @param  ACTableAddress Encoder AC huffman table address it could be HUFFENC_AC0 or HUFFENC_AC1.
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Set_HuffAC_Mem(JPEG_HandleTypeDef *hjpeg, JPEG_ACHuffTableTypeDef *HuffTableAC,
                                             const __IO uint32_t *ACTableAddress)
{
9000ae74:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  HAL_StatusTypeDef error;
  JPEG_AC_HuffCodeTableTypeDef acSizeCodesTable;
  uint32_t i, lsb, msb;
  __IO uint32_t *address, *addressDef;

  if (ACTableAddress == (hjpeg->Instance->HUFFENC_AC0))
9000ae78:	6804      	ldr	r4, [r0, #0]
{
9000ae7a:	f6ad 0d3c 	subw	sp, sp, #2108	; 0x83c
9000ae7e:	460d      	mov	r5, r1
  if (ACTableAddress == (hjpeg->Instance->HUFFENC_AC0))
9000ae80:	f504 63a0 	add.w	r3, r4, #1280	; 0x500
9000ae84:	429a      	cmp	r2, r3
9000ae86:	d042      	beq.n	9000af0e <JPEG_Set_HuffAC_Mem+0x9a>
  {
    address = (hjpeg->Instance->HUFFENC_AC0 + (JPEG_AC_HUFF_TABLE_SIZE / 2UL));
  }
  else if (ACTableAddress == (hjpeg->Instance->HUFFENC_AC1))
9000ae88:	f504 63cc 	add.w	r3, r4, #1632	; 0x660
9000ae8c:	429a      	cmp	r2, r3
9000ae8e:	d004      	beq.n	9000ae9a <JPEG_Set_HuffAC_Mem+0x26>
      return HAL_ERROR; /* Huffman Table overflow error*/
9000ae90:	2001      	movs	r0, #1
    }
  }

  /* Return function status */
  return HAL_OK;
}
9000ae92:	f60d 0d3c 	addw	sp, sp, #2108	; 0x83c
9000ae96:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    address = (hjpeg->Instance->HUFFENC_AC1 + (JPEG_AC_HUFF_TABLE_SIZE / 2UL));
9000ae9a:	f204 74a4 	addw	r4, r4, #1956	; 0x7a4
  error = JPEG_Bits_To_SizeCodes(AC_BitsValsTable->Bits, huffsize, huffcode, &lastK);
9000ae9e:	4628      	mov	r0, r5
9000aea0:	466b      	mov	r3, sp
9000aea2:	f20d 4234 	addw	r2, sp, #1076	; 0x434
9000aea6:	a901      	add	r1, sp, #4
9000aea8:	f7ff fec2 	bl	9000ac30 <JPEG_Bits_To_SizeCodes>
  if (error != HAL_OK)
9000aeac:	2800      	cmp	r0, #0
9000aeae:	d1f0      	bne.n	9000ae92 <JPEG_Set_HuffAC_Mem+0x1e>
  while (k < lastK)
9000aeb0:	9b00      	ldr	r3, [sp, #0]
9000aeb2:	b37b      	cbz	r3, 9000af14 <JPEG_Set_HuffAC_Mem+0xa0>
9000aeb4:	330f      	adds	r3, #15
9000aeb6:	f20d 4734 	addw	r7, sp, #1076	; 0x434
9000aeba:	f10d 0c04 	add.w	ip, sp, #4
9000aebe:	f105 020f 	add.w	r2, r5, #15
9000aec2:	eb05 0e03 	add.w	lr, r5, r3
      AC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
9000aec6:	ae42      	add	r6, sp, #264	; 0x108
9000aec8:	e011      	b.n	9000aeee <JPEG_Set_HuffAC_Mem+0x7a>
      l = (msb * 10UL) + lsb - 1UL;
9000aeca:	eb03 0345 	add.w	r3, r3, r5, lsl #1
    if (l >= JPEG_AC_HUFF_TABLE_SIZE)
9000aece:	2ba1      	cmp	r3, #161	; 0xa1
9000aed0:	d8de      	bhi.n	9000ae90 <JPEG_Set_HuffAC_Mem+0x1c>
      AC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
9000aed2:	f81c 5b01 	ldrb.w	r5, [ip], #1
      AC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
9000aed6:	eb06 0883 	add.w	r8, r6, r3, lsl #2
9000aeda:	f857 9b04 	ldr.w	r9, [r7], #4
  while (k < lastK)
9000aede:	4596      	cmp	lr, r2
      AC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
9000aee0:	f105 35ff 	add.w	r5, r5, #4294967295
      AC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
9000aee4:	4631      	mov	r1, r6
9000aee6:	f8c8 90a4 	str.w	r9, [r8, #164]	; 0xa4
      AC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
9000aeea:	54f5      	strb	r5, [r6, r3]
  while (k < lastK)
9000aeec:	d013      	beq.n	9000af16 <JPEG_Set_HuffAC_Mem+0xa2>
    l = AC_BitsValsTable->HuffVal[k];
9000aeee:	f812 1f01 	ldrb.w	r1, [r2, #1]!
      l = 160; /*l = 0x00 EOB code*/
9000aef2:	23a0      	movs	r3, #160	; 0xa0
    if (l == 0UL)
9000aef4:	2900      	cmp	r1, #0
9000aef6:	d0ec      	beq.n	9000aed2 <JPEG_Set_HuffAC_Mem+0x5e>
      msb = (l & 0xF0UL) >> 4;
9000aef8:	090d      	lsrs	r5, r1, #4
      lsb = (l & 0x0FUL);
9000aefa:	f001 030f 	and.w	r3, r1, #15
    else if (l == 0xF0UL) /* l = 0xF0 ZRL code*/
9000aefe:	29f0      	cmp	r1, #240	; 0xf0
      l = (msb * 10UL) + lsb - 1UL;
9000af00:	eb05 0585 	add.w	r5, r5, r5, lsl #2
9000af04:	f103 33ff 	add.w	r3, r3, #4294967295
    else if (l == 0xF0UL) /* l = 0xF0 ZRL code*/
9000af08:	d1df      	bne.n	9000aeca <JPEG_Set_HuffAC_Mem+0x56>
      l = 161;
9000af0a:	23a1      	movs	r3, #161	; 0xa1
9000af0c:	e7e1      	b.n	9000aed2 <JPEG_Set_HuffAC_Mem+0x5e>
    address = (hjpeg->Instance->HUFFENC_AC0 + (JPEG_AC_HUFF_TABLE_SIZE / 2UL));
9000af0e:	f204 6444 	addw	r4, r4, #1604	; 0x644
9000af12:	e7c4      	b.n	9000ae9e <JPEG_Set_HuffAC_Mem+0x2a>
9000af14:	a942      	add	r1, sp, #264	; 0x108
      *addressDef = 0x0FFF0FFF;
9000af16:	f06f 23f0 	mvn.w	r3, #4026593280	; 0xf000f000
    *addressDef = 0x0FD10FD0;
9000af1a:	4a1a      	ldr	r2, [pc, #104]	; (9000af84 <JPEG_Set_HuffAC_Mem+0x110>)
9000af1c:	eba1 0c81 	sub.w	ip, r1, r1, lsl #2
9000af20:	f10d 0566 	add.w	r5, sp, #102	; 0x66
      *addressDef = 0x0FFF0FFF;
9000af24:	6023      	str	r3, [r4, #0]
9000af26:	6063      	str	r3, [r4, #4]
9000af28:	f50c 7e4a 	add.w	lr, ip, #808	; 0x328
9000af2c:	60a3      	str	r3, [r4, #8]
    *addressDef = 0x0FD30FD2;
9000af2e:	f103 33d3 	add.w	r3, r3, #3553874899	; 0xd3d3d3d3
    *addressDef = 0x0FD10FD0;
9000af32:	60e2      	str	r2, [r4, #12]
    *addressDef = 0x0FD30FD2;
9000af34:	f50c 7c49 	add.w	ip, ip, #804	; 0x324
9000af38:	f103 232c 	add.w	r3, r3, #738208768	; 0x2c002c00
9000af3c:	6123      	str	r3, [r4, #16]
    *addressDef = 0x0FD50FD4;
9000af3e:	f103 1302 	add.w	r3, r3, #131074	; 0x20002
9000af42:	6163      	str	r3, [r4, #20]
    *addressDef = 0x0FD70FD6;
9000af44:	f103 1302 	add.w	r3, r3, #131074	; 0x20002
9000af48:	61a3      	str	r3, [r4, #24]
      msb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
9000af4a:	f891 20a1 	ldrb.w	r2, [r1, #161]	; 0xa1
      lsb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
9000af4e:	f891 30a0 	ldrb.w	r3, [r1, #160]	; 0xa0
      msb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
9000af52:	0212      	lsls	r2, r2, #8
9000af54:	f81e 7021 	ldrb.w	r7, [lr, r1, lsl #2]
      lsb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
9000af58:	021b      	lsls	r3, r3, #8
9000af5a:	f81c 6021 	ldrb.w	r6, [ip, r1, lsl #2]
      msb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
9000af5e:	f402 6270 	and.w	r2, r2, #3840	; 0xf00
    while (i > 1UL)
9000af62:	3902      	subs	r1, #2
      lsb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
9000af64:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
      msb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
9000af68:	433a      	orrs	r2, r7
    while (i > 1UL)
9000af6a:	428d      	cmp	r5, r1
      lsb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
9000af6c:	ea43 0306 	orr.w	r3, r3, r6
      *address = lsb | (msb << 16);
9000af70:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
9000af74:	f844 3d04 	str.w	r3, [r4, #-4]!
    while (i > 1UL)
9000af78:	d1e7      	bne.n	9000af4a <JPEG_Set_HuffAC_Mem+0xd6>
}
9000af7a:	f60d 0d3c 	addw	sp, sp, #2108	; 0x83c
9000af7e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
9000af82:	bf00      	nop
9000af84:	0fd10fd0 	.word	0x0fd10fd0

9000af88 <JPEG_Init_Process>:
  * @retval None
  */
static void JPEG_Init_Process(JPEG_HandleTypeDef *hjpeg)
{
  /*Reset pause*/
  hjpeg->Context &= (~(JPEG_CONTEXT_PAUSE_INPUT | JPEG_CONTEXT_PAUSE_OUTPUT));
9000af88:	6d43      	ldr	r3, [r0, #84]	; 0x54
9000af8a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
9000af8e:	6543      	str	r3, [r0, #84]	; 0x54

  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
9000af90:	6d43      	ldr	r3, [r0, #84]	; 0x54
9000af92:	f003 0303 	and.w	r3, r3, #3
9000af96:	2b02      	cmp	r3, #2
  {
    /*Set JPEG Codec to Decoding mode */
    hjpeg->Instance->CONFR1 |= JPEG_CONFR1_DE;
9000af98:	6803      	ldr	r3, [r0, #0]
9000af9a:	685a      	ldr	r2, [r3, #4]
9000af9c:	bf0c      	ite	eq
9000af9e:	f042 0208 	orreq.w	r2, r2, #8
  }
  else /* JPEG_CONTEXT_ENCODE */
  {
    /*Set JPEG Codec to Encoding mode */
    hjpeg->Instance->CONFR1 &= ~JPEG_CONFR1_DE;
9000afa2:	f022 0208 	bicne.w	r2, r2, #8
9000afa6:	605a      	str	r2, [r3, #4]
  }

  /*Stop JPEG processing */
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
9000afa8:	681a      	ldr	r2, [r3, #0]
9000afaa:	f022 0201 	bic.w	r2, r2, #1
9000afae:	601a      	str	r2, [r3, #0]

  /* Disable All Interrupts */
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
9000afb0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
9000afb2:	f022 027e 	bic.w	r2, r2, #126	; 0x7e
9000afb6:	631a      	str	r2, [r3, #48]	; 0x30

  /* Flush input and output FIFOs*/
  hjpeg->Instance->CR |= JPEG_CR_IFF;
9000afb8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
9000afba:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
9000afbe:	631a      	str	r2, [r3, #48]	; 0x30
  hjpeg->Instance->CR |= JPEG_CR_OFF;
9000afc0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
9000afc2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
9000afc6:	631a      	str	r2, [r3, #48]	; 0x30

  /* Clear all flags */
  __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
9000afc8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
9000afca:	f042 0260 	orr.w	r2, r2, #96	; 0x60
9000afce:	639a      	str	r2, [r3, #56]	; 0x38

  /*Start Encoding/Decoding*/
  hjpeg->Instance->CONFR0 |=  JPEG_CONFR0_START;
9000afd0:	681a      	ldr	r2, [r3, #0]
9000afd2:	f042 0201 	orr.w	r2, r2, #1
9000afd6:	601a      	str	r2, [r3, #0]

  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
9000afd8:	6d42      	ldr	r2, [r0, #84]	; 0x54
9000afda:	f002 020c 	and.w	r2, r2, #12
9000afde:	2a08      	cmp	r2, #8
9000afe0:	d00a      	beq.n	9000aff8 <JPEG_Init_Process+0x70>
  {
    /*Enable IN/OUT, end of Conversation, and end of header parsing interruptions*/
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_IFT | JPEG_IT_IFNF | JPEG_IT_OFT | JPEG_IT_OFNE | JPEG_IT_EOC | JPEG_IT_HPD);
  }
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
9000afe2:	6d42      	ldr	r2, [r0, #84]	; 0x54
9000afe4:	f002 020c 	and.w	r2, r2, #12
9000afe8:	2a0c      	cmp	r2, #12
9000afea:	d000      	beq.n	9000afee <JPEG_Init_Process+0x66>
  }
  else
  {
    /* Nothing to do */
  }
}
9000afec:	4770      	bx	lr
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
9000afee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
9000aff0:	f042 0260 	orr.w	r2, r2, #96	; 0x60
9000aff4:	631a      	str	r2, [r3, #48]	; 0x30
}
9000aff6:	4770      	bx	lr
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_IFT | JPEG_IT_IFNF | JPEG_IT_OFT | JPEG_IT_OFNE | JPEG_IT_EOC | JPEG_IT_HPD);
9000aff8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
9000affa:	f042 026e 	orr.w	r2, r2, #110	; 0x6e
9000affe:	631a      	str	r2, [r3, #48]	; 0x30
9000b000:	4770      	bx	lr
9000b002:	bf00      	nop

9000b004 <JPEG_DMA_StartProcess>:
  /*if the MDMA In is triggred with JPEG In FIFO Threshold flag
      then MDMA In buffer size is 32 bytes
    else (MDMA In is triggred with JPEG In FIFO not full flag)
      then MDMA In buffer size is 4 bytes
    */
  inXfrSize = hjpeg->hdmain->Init.BufferTransferLength;
9000b004:	6b01      	ldr	r1, [r0, #48]	; 0x30
    else (MDMA Out is triggred with JPEG Out FIFO not empty flag)
      then MDMA buffer size is 4 bytes
    */
  outXfrSize = hjpeg->hdmaout->Init.BufferTransferLength;

  if ((hjpeg->InDataLength < inXfrSize) || (hjpeg->OutDataLength < outXfrSize))
9000b006:	6a82      	ldr	r2, [r0, #40]	; 0x28
{
9000b008:	b5f0      	push	{r4, r5, r6, r7, lr}
  inXfrSize = hjpeg->hdmain->Init.BufferTransferLength;
9000b00a:	6a8d      	ldr	r5, [r1, #40]	; 0x28
{
9000b00c:	b083      	sub	sp, #12
  if ((hjpeg->InDataLength < inXfrSize) || (hjpeg->OutDataLength < outXfrSize))
9000b00e:	42aa      	cmp	r2, r5
9000b010:	d32d      	bcc.n	9000b06e <JPEG_DMA_StartProcess+0x6a>
9000b012:	4604      	mov	r4, r0
  outXfrSize = hjpeg->hdmaout->Init.BufferTransferLength;
9000b014:	6b40      	ldr	r0, [r0, #52]	; 0x34
  if ((hjpeg->InDataLength < inXfrSize) || (hjpeg->OutDataLength < outXfrSize))
9000b016:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  outXfrSize = hjpeg->hdmaout->Init.BufferTransferLength;
9000b018:	6a86      	ldr	r6, [r0, #40]	; 0x28
  if ((hjpeg->InDataLength < inXfrSize) || (hjpeg->OutDataLength < outXfrSize))
9000b01a:	42b3      	cmp	r3, r6
9000b01c:	d327      	bcc.n	9000b06e <JPEG_DMA_StartProcess+0x6a>
    return HAL_ERROR;
  }
  /* Set the JPEG MDMA In transfer complete callback */
  hjpeg->hdmain->XferCpltCallback = JPEG_MDMAInCpltCallback;
  /* Set the MDMA In error callback */
  hjpeg->hdmain->XferErrorCallback = JPEG_MDMAErrorCallback;
9000b01e:	4f1b      	ldr	r7, [pc, #108]	; (9000b08c <JPEG_DMA_StartProcess+0x88>)
  hjpeg->hdmain->XferCpltCallback = JPEG_MDMAInCpltCallback;
9000b020:	f8df c074 	ldr.w	ip, [pc, #116]	; 9000b098 <JPEG_DMA_StartProcess+0x94>
  hjpeg->hdmain->XferErrorCallback = JPEG_MDMAErrorCallback;
9000b024:	654f      	str	r7, [r1, #84]	; 0x54
  hjpeg->hdmain->XferCpltCallback = JPEG_MDMAInCpltCallback;
9000b026:	f8c1 c044 	str.w	ip, [r1, #68]	; 0x44

  /* Set the JPEG MDMA Out transfer complete callback */
  hjpeg->hdmaout->XferCpltCallback = JPEG_MDMAOutCpltCallback;
9000b02a:	4919      	ldr	r1, [pc, #100]	; (9000b090 <JPEG_DMA_StartProcess+0x8c>)
  /* Set the MDMA In error callback */
  hjpeg->hdmaout->XferErrorCallback = JPEG_MDMAErrorCallback;
9000b02c:	6547      	str	r7, [r0, #84]	; 0x54
  hjpeg->hdmaout->XferCpltCallback = JPEG_MDMAOutCpltCallback;
9000b02e:	6441      	str	r1, [r0, #68]	; 0x44
  /* Set the MDMA Out Abort callback */
  hjpeg->hdmaout->XferAbortCallback = JPEG_MDMAOutAbortCallback;
9000b030:	4918      	ldr	r1, [pc, #96]	; (9000b094 <JPEG_DMA_StartProcess+0x90>)
9000b032:	6581      	str	r1, [r0, #88]	; 0x58

  if ((inXfrSize == 0UL) || (outXfrSize == 0UL))
9000b034:	b1a5      	cbz	r5, 9000b060 <JPEG_DMA_StartProcess+0x5c>
9000b036:	b19e      	cbz	r6, 9000b060 <JPEG_DMA_StartProcess+0x5c>
  {
    hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
    return HAL_ERROR;
  }
  /*MDMA transfer size (BNDTR) must be a multiple of MDMA buffer size (TLEN)*/
  hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % inXfrSize);
9000b038:	fbb2 f1f5 	udiv	r1, r2, r5
9000b03c:	fb05 2111 	mls	r1, r5, r1, r2
  /*MDMA transfer size (BNDTR) must be a multiple of MDMA buffer size (TLEN)*/
  hjpeg->OutDataLength = hjpeg->OutDataLength - (hjpeg->OutDataLength % outXfrSize);


  /* Start MDMA FIFO Out transfer */
  if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
9000b040:	2501      	movs	r5, #1
  hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % inXfrSize);
9000b042:	1a52      	subs	r2, r2, r1
  if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
9000b044:	6821      	ldr	r1, [r4, #0]
  hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % inXfrSize);
9000b046:	62a2      	str	r2, [r4, #40]	; 0x28
  if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
9000b048:	3144      	adds	r1, #68	; 0x44
  hjpeg->OutDataLength = hjpeg->OutDataLength - (hjpeg->OutDataLength % outXfrSize);
9000b04a:	fbb3 f2f6 	udiv	r2, r3, r6
9000b04e:	fb06 3212 	mls	r2, r6, r2, r3
9000b052:	1a9b      	subs	r3, r3, r2
9000b054:	62e3      	str	r3, [r4, #44]	; 0x2c
  if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
9000b056:	9500      	str	r5, [sp, #0]
9000b058:	69e2      	ldr	r2, [r4, #28]
9000b05a:	f001 fbb5 	bl	9000c7c8 <HAL_MDMA_Start_IT>
9000b05e:	b148      	cbz	r0, 9000b074 <JPEG_DMA_StartProcess+0x70>
    hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
9000b060:	6d23      	ldr	r3, [r4, #80]	; 0x50
    return HAL_ERROR;
9000b062:	2001      	movs	r0, #1
    hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
9000b064:	f043 0304 	orr.w	r3, r3, #4
9000b068:	6523      	str	r3, [r4, #80]	; 0x50
    hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
    return HAL_ERROR;
  }

  return HAL_OK;
}
9000b06a:	b003      	add	sp, #12
9000b06c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return HAL_ERROR;
9000b06e:	2001      	movs	r0, #1
}
9000b070:	b003      	add	sp, #12
9000b072:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (HAL_MDMA_Start_IT(hjpeg->hdmain, (uint32_t)hjpeg->pJpegInBuffPtr, (uint32_t)&hjpeg->Instance->DIR,
9000b074:	6822      	ldr	r2, [r4, #0]
9000b076:	6aa3      	ldr	r3, [r4, #40]	; 0x28
9000b078:	69a1      	ldr	r1, [r4, #24]
9000b07a:	3240      	adds	r2, #64	; 0x40
9000b07c:	9500      	str	r5, [sp, #0]
9000b07e:	6b20      	ldr	r0, [r4, #48]	; 0x30
9000b080:	f001 fba2 	bl	9000c7c8 <HAL_MDMA_Start_IT>
9000b084:	2800      	cmp	r0, #0
9000b086:	d0f3      	beq.n	9000b070 <JPEG_DMA_StartProcess+0x6c>
9000b088:	e7ea      	b.n	9000b060 <JPEG_DMA_StartProcess+0x5c>
9000b08a:	bf00      	nop
9000b08c:	9000b5bd 	.word	0x9000b5bd
9000b090:	9000b835 	.word	0x9000b835
9000b094:	9000b8b5 	.word	0x9000b8b5
9000b098:	9000b5e9 	.word	0x9000b5e9

9000b09c <HAL_JPEG_GetInfo.part.0>:
  if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == JPEG_CONFR1_NF_1)
9000b09c:	6803      	ldr	r3, [r0, #0]
9000b09e:	685a      	ldr	r2, [r3, #4]
9000b0a0:	f002 0203 	and.w	r2, r2, #3
9000b0a4:	2a02      	cmp	r2, #2
HAL_StatusTypeDef HAL_JPEG_GetInfo(JPEG_HandleTypeDef *hjpeg, JPEG_ConfTypeDef *pInfo)
9000b0a6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
9000b0aa:	4689      	mov	r9, r1
  if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == JPEG_CONFR1_NF_1)
9000b0ac:	f000 8094 	beq.w	9000b1d8 <HAL_JPEG_GetInfo.part.0+0x13c>
  else if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == 0UL)
9000b0b0:	685c      	ldr	r4, [r3, #4]
  pInfo->ImageHeight = (hjpeg->Instance->CONFR1 & 0xFFFF0000UL) >> 16;
9000b0b2:	685a      	ldr	r2, [r3, #4]
  else if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == 0UL)
9000b0b4:	f014 0403 	ands.w	r4, r4, #3
9000b0b8:	d172      	bne.n	9000b1a0 <HAL_JPEG_GetInfo.part.0+0x104>
  pInfo->ImageHeight = (hjpeg->Instance->CONFR1 & 0xFFFF0000UL) >> 16;
9000b0ba:	0c12      	lsrs	r2, r2, #16
    pInfo->ColorSpace = JPEG_YCBCR_COLORSPACE;
9000b0bc:	600c      	str	r4, [r1, #0]
  pInfo->ImageHeight = (hjpeg->Instance->CONFR1 & 0xFFFF0000UL) >> 16;
9000b0be:	608a      	str	r2, [r1, #8]
  pInfo->ImageWidth  = (hjpeg->Instance->CONFR3 & 0xFFFF0000UL) >> 16;
9000b0c0:	68da      	ldr	r2, [r3, #12]
9000b0c2:	0c12      	lsrs	r2, r2, #16
9000b0c4:	60ca      	str	r2, [r1, #12]
  if ((pInfo->ColorSpace == JPEG_YCBCR_COLORSPACE) || (pInfo->ColorSpace == JPEG_CMYK_COLORSPACE))
9000b0c6:	4a5f      	ldr	r2, [pc, #380]	; (9000b244 <HAL_JPEG_GetInfo.part.0+0x1a8>)
  */
static uint32_t JPEG_GetQuality(JPEG_HandleTypeDef *hjpeg)
{
  uint32_t quality = 0;
  uint32_t quantRow, quantVal, scale, i, j;
  __IO uint32_t *tableAddress = hjpeg->Instance->QMEM0;
9000b0c8:	f103 0c50 	add.w	ip, r3, #80	; 0x50
      pInfo->ChromaSubsampling = JPEG_422_SUBSAMPLING; /*16x8 block*/
9000b0cc:	f8c9 4004 	str.w	r4, [r9, #4]
  uint32_t quality = 0;
9000b0d0:	2600      	movs	r6, #0
9000b0d2:	f102 0540 	add.w	r5, r2, #64	; 0x40
        quality += 100UL;
      }
      else
      {
        /* Note that the quantization coefficients must be specified in the table in zigzag order */
        scale = (quantVal * 100UL) / ((uint32_t) hjpeg->QuantTable0[JPEG_ZIGZAG_ORDER[i + j]]);
9000b0d6:	f04f 0e64 	mov.w	lr, #100	; 0x64
        {
          quality += (200UL - scale) / 2UL;
        }
        else
        {
          quality += 5000UL / scale;
9000b0da:	f241 3488 	movw	r4, #5000	; 0x1388
9000b0de:	e033      	b.n	9000b148 <HAL_JPEG_GetInfo.part.0+0xac>
        scale = (quantVal * 100UL) / ((uint32_t) hjpeg->QuantTable0[JPEG_ZIGZAG_ORDER[i + j]]);
9000b0e0:	f892 8001 	ldrb.w	r8, [r2, #1]
9000b0e4:	fb0e f707 	mul.w	r7, lr, r7
9000b0e8:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
9000b0ea:	f811 8008 	ldrb.w	r8, [r1, r8]
9000b0ee:	fbb7 f7f8 	udiv	r7, r7, r8
        if (scale <= 100UL)
9000b0f2:	2f64      	cmp	r7, #100	; 0x64
9000b0f4:	d961      	bls.n	9000b1ba <HAL_JPEG_GetInfo.part.0+0x11e>
          quality += 5000UL / scale;
9000b0f6:	fbb4 f7f7 	udiv	r7, r4, r7
9000b0fa:	443e      	add	r6, r7
      quantVal = (quantRow >> (8UL * j)) & 0xFFUL;
9000b0fc:	f3c3 4707 	ubfx	r7, r3, #16, #8
      if (quantVal == 1UL)
9000b100:	2f01      	cmp	r7, #1
9000b102:	d03d      	beq.n	9000b180 <HAL_JPEG_GetInfo.part.0+0xe4>
        scale = (quantVal * 100UL) / ((uint32_t) hjpeg->QuantTable0[JPEG_ZIGZAG_ORDER[i + j]]);
9000b104:	f892 8002 	ldrb.w	r8, [r2, #2]
9000b108:	fb0e f707 	mul.w	r7, lr, r7
9000b10c:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
9000b10e:	f811 8008 	ldrb.w	r8, [r1, r8]
9000b112:	fbb7 f7f8 	udiv	r7, r7, r8
        if (scale <= 100UL)
9000b116:	2f64      	cmp	r7, #100	; 0x64
9000b118:	d94a      	bls.n	9000b1b0 <HAL_JPEG_GetInfo.part.0+0x114>
          quality += 5000UL / scale;
9000b11a:	fbb4 f7f7 	udiv	r7, r4, r7
9000b11e:	443e      	add	r6, r7
      quantVal = (quantRow >> (8UL * j)) & 0xFFUL;
9000b120:	0e1b      	lsrs	r3, r3, #24
      if (quantVal == 1UL)
9000b122:	2b01      	cmp	r3, #1
9000b124:	d030      	beq.n	9000b188 <HAL_JPEG_GetInfo.part.0+0xec>
        scale = (quantVal * 100UL) / ((uint32_t) hjpeg->QuantTable0[JPEG_ZIGZAG_ORDER[i + j]]);
9000b126:	78d7      	ldrb	r7, [r2, #3]
9000b128:	fb0e f303 	mul.w	r3, lr, r3
9000b12c:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
9000b12e:	5dcf      	ldrb	r7, [r1, r7]
9000b130:	fbb3 f3f7 	udiv	r3, r3, r7
        if (scale <= 100UL)
9000b134:	2b64      	cmp	r3, #100	; 0x64
9000b136:	d94a      	bls.n	9000b1ce <HAL_JPEG_GetInfo.part.0+0x132>
          quality += 5000UL / scale;
9000b138:	fbb4 f3f3 	udiv	r3, r4, r3
9000b13c:	441e      	add	r6, r3
  while (i < (JPEG_QUANT_TABLE_SIZE - 3UL))
9000b13e:	3204      	adds	r2, #4
        }
      }
    }

    i += 4UL;
    tableAddress ++;
9000b140:	f10c 0c04 	add.w	ip, ip, #4
  while (i < (JPEG_QUANT_TABLE_SIZE - 3UL))
9000b144:	4295      	cmp	r5, r2
9000b146:	d025      	beq.n	9000b194 <HAL_JPEG_GetInfo.part.0+0xf8>
    quantRow = *tableAddress;
9000b148:	f8dc 3000 	ldr.w	r3, [ip]
      quantVal = (quantRow >> (8UL * j)) & 0xFFUL;
9000b14c:	b2df      	uxtb	r7, r3
      if (quantVal == 1UL)
9000b14e:	2f01      	cmp	r7, #1
9000b150:	d02c      	beq.n	9000b1ac <HAL_JPEG_GetInfo.part.0+0x110>
        scale = (quantVal * 100UL) / ((uint32_t) hjpeg->QuantTable0[JPEG_ZIGZAG_ORDER[i + j]]);
9000b152:	f892 8000 	ldrb.w	r8, [r2]
9000b156:	fb0e f707 	mul.w	r7, lr, r7
9000b15a:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
9000b15c:	f811 8008 	ldrb.w	r8, [r1, r8]
9000b160:	fbb7 f7f8 	udiv	r7, r7, r8
        if (scale <= 100UL)
9000b164:	2f64      	cmp	r7, #100	; 0x64
9000b166:	d92d      	bls.n	9000b1c4 <HAL_JPEG_GetInfo.part.0+0x128>
          quality += 5000UL / scale;
9000b168:	fbb4 f7f7 	udiv	r7, r4, r7
9000b16c:	443e      	add	r6, r7
      quantVal = (quantRow >> (8UL * j)) & 0xFFUL;
9000b16e:	f3c3 2707 	ubfx	r7, r3, #8, #8
      if (quantVal == 1UL)
9000b172:	2f01      	cmp	r7, #1
9000b174:	d1b4      	bne.n	9000b0e0 <HAL_JPEG_GetInfo.part.0+0x44>
      quantVal = (quantRow >> (8UL * j)) & 0xFFUL;
9000b176:	f3c3 4707 	ubfx	r7, r3, #16, #8
        quality += 100UL;
9000b17a:	3664      	adds	r6, #100	; 0x64
      if (quantVal == 1UL)
9000b17c:	2f01      	cmp	r7, #1
9000b17e:	d1c1      	bne.n	9000b104 <HAL_JPEG_GetInfo.part.0+0x68>
      quantVal = (quantRow >> (8UL * j)) & 0xFFUL;
9000b180:	0e1b      	lsrs	r3, r3, #24
        quality += 100UL;
9000b182:	3664      	adds	r6, #100	; 0x64
      if (quantVal == 1UL)
9000b184:	2b01      	cmp	r3, #1
9000b186:	d1ce      	bne.n	9000b126 <HAL_JPEG_GetInfo.part.0+0x8a>
  while (i < (JPEG_QUANT_TABLE_SIZE - 3UL))
9000b188:	3204      	adds	r2, #4
        quality += 100UL;
9000b18a:	3664      	adds	r6, #100	; 0x64
    tableAddress ++;
9000b18c:	f10c 0c04 	add.w	ip, ip, #4
  while (i < (JPEG_QUANT_TABLE_SIZE - 3UL))
9000b190:	4295      	cmp	r5, r2
9000b192:	d1d9      	bne.n	9000b148 <HAL_JPEG_GetInfo.part.0+0xac>
  }

  return (quality / 64UL);
9000b194:	09b6      	lsrs	r6, r6, #6
  return HAL_OK;
9000b196:	2000      	movs	r0, #0
  pInfo->ImageQuality = JPEG_GetQuality(hjpeg);
9000b198:	f8c9 6010 	str.w	r6, [r9, #16]
}
9000b19c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  else if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == JPEG_CONFR1_NF)
9000b1a0:	f002 0203 	and.w	r2, r2, #3
9000b1a4:	2a03      	cmp	r2, #3
9000b1a6:	d14a      	bne.n	9000b23e <HAL_JPEG_GetInfo.part.0+0x1a2>
9000b1a8:	2430      	movs	r4, #48	; 0x30
9000b1aa:	e016      	b.n	9000b1da <HAL_JPEG_GetInfo.part.0+0x13e>
        quality += 100UL;
9000b1ac:	3664      	adds	r6, #100	; 0x64
9000b1ae:	e7de      	b.n	9000b16e <HAL_JPEG_GetInfo.part.0+0xd2>
          quality += (200UL - scale) / 2UL;
9000b1b0:	f1c7 07c8 	rsb	r7, r7, #200	; 0xc8
9000b1b4:	eb06 0657 	add.w	r6, r6, r7, lsr #1
9000b1b8:	e7b2      	b.n	9000b120 <HAL_JPEG_GetInfo.part.0+0x84>
9000b1ba:	f1c7 07c8 	rsb	r7, r7, #200	; 0xc8
9000b1be:	eb06 0657 	add.w	r6, r6, r7, lsr #1
9000b1c2:	e79b      	b.n	9000b0fc <HAL_JPEG_GetInfo.part.0+0x60>
9000b1c4:	f1c7 07c8 	rsb	r7, r7, #200	; 0xc8
9000b1c8:	eb06 0657 	add.w	r6, r6, r7, lsr #1
9000b1cc:	e7cf      	b.n	9000b16e <HAL_JPEG_GetInfo.part.0+0xd2>
9000b1ce:	f1c3 03c8 	rsb	r3, r3, #200	; 0xc8
9000b1d2:	eb06 0653 	add.w	r6, r6, r3, lsr #1
9000b1d6:	e7b2      	b.n	9000b13e <HAL_JPEG_GetInfo.part.0+0xa2>
9000b1d8:	2410      	movs	r4, #16
  pInfo->ImageHeight = (hjpeg->Instance->CONFR1 & 0xFFFF0000UL) >> 16;
9000b1da:	685a      	ldr	r2, [r3, #4]
    pInfo->ColorSpace = JPEG_YCBCR_COLORSPACE;
9000b1dc:	f8c9 4000 	str.w	r4, [r9]
  pInfo->ImageHeight = (hjpeg->Instance->CONFR1 & 0xFFFF0000UL) >> 16;
9000b1e0:	0c12      	lsrs	r2, r2, #16
9000b1e2:	f8c9 2008 	str.w	r2, [r9, #8]
  pInfo->ImageWidth  = (hjpeg->Instance->CONFR3 & 0xFFFF0000UL) >> 16;
9000b1e6:	68da      	ldr	r2, [r3, #12]
    yblockNb  = (hjpeg->Instance->CONFR4 & JPEG_CONFR4_NB) >> 4;
9000b1e8:	691d      	ldr	r5, [r3, #16]
    cBblockNb = (hjpeg->Instance->CONFR5 & JPEG_CONFR5_NB) >> 4;
9000b1ea:	695f      	ldr	r7, [r3, #20]
  pInfo->ImageWidth  = (hjpeg->Instance->CONFR3 & 0xFFFF0000UL) >> 16;
9000b1ec:	0c12      	lsrs	r2, r2, #16
    cRblockNb = (hjpeg->Instance->CONFR6 & JPEG_CONFR6_NB) >> 4;
9000b1ee:	699e      	ldr	r6, [r3, #24]
    if ((yblockNb == 1UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
9000b1f0:	f017 0ff0 	tst.w	r7, #240	; 0xf0
  pInfo->ImageWidth  = (hjpeg->Instance->CONFR3 & 0xFFFF0000UL) >> 16;
9000b1f4:	f8c9 200c 	str.w	r2, [r9, #12]
    cRblockNb = (hjpeg->Instance->CONFR6 & JPEG_CONFR6_NB) >> 4;
9000b1f8:	ea4f 1616 	mov.w	r6, r6, lsr #4
    yblockNb  = (hjpeg->Instance->CONFR4 & JPEG_CONFR4_NB) >> 4;
9000b1fc:	ea4f 1215 	mov.w	r2, r5, lsr #4
9000b200:	f3c5 1503 	ubfx	r5, r5, #4, #4
    cBblockNb = (hjpeg->Instance->CONFR5 & JPEG_CONFR5_NB) >> 4;
9000b204:	ea4f 1c17 	mov.w	ip, r7, lsr #4
    if ((yblockNb == 1UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
9000b208:	d108      	bne.n	9000b21c <HAL_JPEG_GetInfo.part.0+0x180>
9000b20a:	2d01      	cmp	r5, #1
9000b20c:	d106      	bne.n	9000b21c <HAL_JPEG_GetInfo.part.0+0x180>
9000b20e:	f016 0f0f 	tst.w	r6, #15
9000b212:	bf0c      	ite	eq
9000b214:	2401      	moveq	r4, #1
9000b216:	2400      	movne	r4, #0
9000b218:	0064      	lsls	r4, r4, #1
9000b21a:	e754      	b.n	9000b0c6 <HAL_JPEG_GetInfo.part.0+0x2a>
    else if ((yblockNb == 0UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
9000b21c:	ea42 020c 	orr.w	r2, r2, ip
9000b220:	f012 040f 	ands.w	r4, r2, #15
9000b224:	f43f af4f 	beq.w	9000b0c6 <HAL_JPEG_GetInfo.part.0+0x2a>
    else if ((yblockNb == 3UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
9000b228:	ea4c 0206 	orr.w	r2, ip, r6
9000b22c:	f3c2 0203 	ubfx	r2, r2, #0, #4
9000b230:	2d03      	cmp	r5, #3
9000b232:	bf08      	it	eq
9000b234:	2a00      	cmpeq	r2, #0
9000b236:	bf0c      	ite	eq
9000b238:	2401      	moveq	r4, #1
9000b23a:	2400      	movne	r4, #0
9000b23c:	e743      	b.n	9000b0c6 <HAL_JPEG_GetInfo.part.0+0x2a>
    return HAL_ERROR;
9000b23e:	2001      	movs	r0, #1
}
9000b240:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
9000b244:	9002b8c0 	.word	0x9002b8c0

9000b248 <HAL_JPEG_Init>:
  if (hjpeg == NULL)
9000b248:	2800      	cmp	r0, #0
9000b24a:	f000 810b 	beq.w	9000b464 <HAL_JPEG_Init+0x21c>
{
9000b24e:	b570      	push	{r4, r5, r6, lr}
  if (hjpeg->State == HAL_JPEG_STATE_RESET)
9000b250:	f890 304d 	ldrb.w	r3, [r0, #77]	; 0x4d
9000b254:	4604      	mov	r4, r0
9000b256:	f003 02ff 	and.w	r2, r3, #255	; 0xff
9000b25a:	2b00      	cmp	r3, #0
9000b25c:	f000 80fd 	beq.w	9000b45a <HAL_JPEG_Init+0x212>
  __HAL_JPEG_ENABLE(hjpeg);
9000b260:	6822      	ldr	r2, [r4, #0]
  hjpeg->State = HAL_JPEG_STATE_BUSY;
9000b262:	2102      	movs	r1, #2
  hjpeg->QuantTable2 = NULL;
9000b264:	2300      	movs	r3, #0
  hjpeg->QuantTable0 = (uint8_t *)((uint32_t)JPEG_LUM_QuantTable);
9000b266:	4880      	ldr	r0, [pc, #512]	; (9000b468 <HAL_JPEG_Init+0x220>)
  hjpeg->State = HAL_JPEG_STATE_BUSY;
9000b268:	f884 104d 	strb.w	r1, [r4, #77]	; 0x4d
  __HAL_JPEG_ENABLE(hjpeg);
9000b26c:	6b11      	ldr	r1, [r2, #48]	; 0x30
9000b26e:	f041 0101 	orr.w	r1, r1, #1
9000b272:	6311      	str	r1, [r2, #48]	; 0x30
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
9000b274:	6811      	ldr	r1, [r2, #0]
9000b276:	f021 0101 	bic.w	r1, r1, #1
9000b27a:	6011      	str	r1, [r2, #0]
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
9000b27c:	6b11      	ldr	r1, [r2, #48]	; 0x30
9000b27e:	f021 017e 	bic.w	r1, r1, #126	; 0x7e
9000b282:	6311      	str	r1, [r2, #48]	; 0x30
  hjpeg->Instance->CR |= JPEG_CR_IFF;
9000b284:	6b11      	ldr	r1, [r2, #48]	; 0x30
9000b286:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
9000b28a:	6311      	str	r1, [r2, #48]	; 0x30
  hjpeg->Instance->CR |= JPEG_CR_OFF;
9000b28c:	6b11      	ldr	r1, [r2, #48]	; 0x30
9000b28e:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
9000b292:	6311      	str	r1, [r2, #48]	; 0x30
  __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
9000b294:	6b91      	ldr	r1, [r2, #56]	; 0x38
9000b296:	f041 0160 	orr.w	r1, r1, #96	; 0x60
9000b29a:	6391      	str	r1, [r2, #56]	; 0x38
  hjpeg->QuantTable1 = (uint8_t *)((uint32_t)JPEG_CHROM_QuantTable);
9000b29c:	4973      	ldr	r1, [pc, #460]	; (9000b46c <HAL_JPEG_Init+0x224>)
  hjpeg->QuantTable0 = (uint8_t *)((uint32_t)JPEG_LUM_QuantTable);
9000b29e:	63e0      	str	r0, [r4, #60]	; 0x3c
    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
9000b2a0:	2001      	movs	r0, #1
  hjpeg->QuantTable3 = NULL;
9000b2a2:	64a3      	str	r3, [r4, #72]	; 0x48
  hjpeg->QuantTable1 = (uint8_t *)((uint32_t)JPEG_CHROM_QuantTable);
9000b2a4:	e9c4 1310 	strd	r1, r3, [r4, #64]	; 0x40
    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
9000b2a8:	f8c2 336c 	str.w	r3, [r2, #876]	; 0x36c
9000b2ac:	f04f 3101 	mov.w	r1, #16843009	; 0x1010101
9000b2b0:	4b6f      	ldr	r3, [pc, #444]	; (9000b470 <HAL_JPEG_Init+0x228>)
9000b2b2:	f8c2 0368 	str.w	r0, [r2, #872]	; 0x368
9000b2b6:	f8c2 1364 	str.w	r1, [r2, #868]	; 0x364
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
9000b2ba:	486e      	ldr	r0, [pc, #440]	; (9000b474 <HAL_JPEG_Init+0x22c>)
    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
9000b2bc:	f8c2 3360 	str.w	r3, [r2, #864]	; 0x360
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
9000b2c0:	4b6d      	ldr	r3, [pc, #436]	; (9000b478 <HAL_JPEG_Init+0x230>)
9000b2c2:	f8c2 0378 	str.w	r0, [r2, #888]	; 0x378
9000b2c6:	496d      	ldr	r1, [pc, #436]	; (9000b47c <HAL_JPEG_Init+0x234>)
9000b2c8:	f8c2 3374 	str.w	r3, [r2, #884]	; 0x374
    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
9000b2cc:	4b6c      	ldr	r3, [pc, #432]	; (9000b480 <HAL_JPEG_Init+0x238>)
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
9000b2ce:	f8c2 1370 	str.w	r1, [r2, #880]	; 0x370
    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
9000b2d2:	486c      	ldr	r0, [pc, #432]	; (9000b484 <HAL_JPEG_Init+0x23c>)
9000b2d4:	f8c2 3388 	str.w	r3, [r2, #904]	; 0x388
9000b2d8:	496b      	ldr	r1, [pc, #428]	; (9000b488 <HAL_JPEG_Init+0x240>)
9000b2da:	4b6c      	ldr	r3, [pc, #432]	; (9000b48c <HAL_JPEG_Init+0x244>)
9000b2dc:	f8c2 0384 	str.w	r0, [r2, #900]	; 0x384
9000b2e0:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
9000b2e4:	f8c2 337c 	str.w	r3, [r2, #892]	; 0x37c
  value = value | (((uint32_t)HuffTableAC0->HuffVal[161] & 0xFFUL) << 8) | ((uint32_t)HuffTableAC0->HuffVal[160] & 0xFFUL);
9000b2e8:	f64f 23f9 	movw	r3, #64249	; 0xfaf9
  value = *address & 0xFFFF0000U;
9000b2ec:	f8d2 042c 	ldr.w	r0, [r2, #1068]	; 0x42c
9000b2f0:	4967      	ldr	r1, [pc, #412]	; (9000b490 <HAL_JPEG_Init+0x248>)
9000b2f2:	4001      	ands	r1, r0
  address--; /* address = hjpeg->Instance->DHTMEM + 50*/
9000b2f4:	f502 6085 	add.w	r0, r2, #1064	; 0x428
  value = value | (((uint32_t)HuffTableAC0->HuffVal[161] & 0xFFUL) << 8) | ((uint32_t)HuffTableAC0->HuffVal[160] & 0xFFUL);
9000b2f8:	430b      	orrs	r3, r1
  *address = value;
9000b2fa:	4966      	ldr	r1, [pc, #408]	; (9000b494 <HAL_JPEG_Init+0x24c>)
9000b2fc:	f1a1 06a0 	sub.w	r6, r1, #160	; 0xa0
9000b300:	f8c2 342c 	str.w	r3, [r2, #1068]	; 0x42c
               (((uint32_t)HuffTableAC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
9000b304:	f891 30ae 	ldrb.w	r3, [r1, #174]	; 0xae
  while (index > 3UL)
9000b308:	3904      	subs	r1, #4
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
9000b30a:	f891 e0b3 	ldrb.w	lr, [r1, #179]	; 0xb3
               (((uint32_t)HuffTableAC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
9000b30e:	041b      	lsls	r3, r3, #16
               ((uint32_t)HuffTableAC0->HuffVal[index - 4UL] & 0xFFUL);
9000b310:	f891 c0b0 	ldrb.w	ip, [r1, #176]	; 0xb0
               (((uint32_t)HuffTableAC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
9000b314:	f891 50b1 	ldrb.w	r5, [r1, #177]	; 0xb1
  while (index > 3UL)
9000b318:	42b1      	cmp	r1, r6
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
9000b31a:	ea43 630e 	orr.w	r3, r3, lr, lsl #24
               (((uint32_t)HuffTableAC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
9000b31e:	ea43 030c 	orr.w	r3, r3, ip
9000b322:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
9000b326:	f840 3904 	str.w	r3, [r0], #-4
  while (index > 3UL)
9000b32a:	d1eb      	bne.n	9000b304 <HAL_JPEG_Init+0xbc>
  value = *address & 0x0000FFFFU;
9000b32c:	f8d2 342c 	ldr.w	r3, [r2, #1068]	; 0x42c
    *address = (((uint32_t)HuffTableDC1->Bits[index + 1UL] & 0xFFUL) << 24) |
9000b330:	f04f 3101 	mov.w	r1, #16843009	; 0x1010101
  value = *address & 0xFFFF0000U;
9000b334:	4856      	ldr	r0, [pc, #344]	; (9000b490 <HAL_JPEG_Init+0x248>)
    *address = (((uint32_t)HuffTableDC1->Bits[index + 1UL] & 0xFFUL) << 24) |
9000b336:	2501      	movs	r5, #1
  value = *address & 0x0000FFFFU;
9000b338:	b29b      	uxth	r3, r3
  value = value | (((uint32_t)HuffTableDC1->Bits[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableDC1->Bits[0] & 0xFFUL) << 16);
9000b33a:	f043 7340 	orr.w	r3, r3, #50331648	; 0x3000000
  *address = value;
9000b33e:	f8c2 342c 	str.w	r3, [r2, #1068]	; 0x42c
  value = *address & 0xFFFF0000U;
9000b342:	f8d2 343c 	ldr.w	r3, [r2, #1084]	; 0x43c
9000b346:	4003      	ands	r3, r0
  *address = value;
9000b348:	f8c2 343c 	str.w	r3, [r2, #1084]	; 0x43c
    *address = (((uint32_t)HuffTableDC1->Bits[index + 1UL] & 0xFFUL) << 24) |
9000b34c:	f8c2 5438 	str.w	r5, [r2, #1080]	; 0x438
9000b350:	f8c2 1434 	str.w	r1, [r2, #1076]	; 0x434
9000b354:	f8c2 1430 	str.w	r1, [r2, #1072]	; 0x430
  value = value | (((uint32_t)HuffTableDC1->HuffVal[11] & 0xFFUL) << 8) | ((uint32_t)HuffTableDC1->HuffVal[10] & 0xFFUL);
9000b358:	f640 310a 	movw	r1, #2826	; 0xb0a
  value = *address & 0x0000FFFFUL;
9000b35c:	f8d2 343c 	ldr.w	r3, [r2, #1084]	; 0x43c
9000b360:	b29b      	uxth	r3, r3
  value = value | (((uint32_t)HuffTableDC1->HuffVal[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableDC1->HuffVal[0] & 0xFFUL) <<
9000b362:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
  *address = value;
9000b366:	f8c2 343c 	str.w	r3, [r2, #1084]	; 0x43c
  value = *address & 0xFFFF0000UL;
9000b36a:	f8d2 3448 	ldr.w	r3, [r2, #1096]	; 0x448
9000b36e:	4003      	ands	r3, r0
  value = value | (((uint32_t)HuffTableDC1->HuffVal[11] & 0xFFUL) << 8) | ((uint32_t)HuffTableDC1->HuffVal[10] & 0xFFUL);
9000b370:	4319      	orrs	r1, r3
    *address = (((uint32_t)HuffTableDC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
9000b372:	4b49      	ldr	r3, [pc, #292]	; (9000b498 <HAL_JPEG_Init+0x250>)
  *address = value;
9000b374:	f8c2 1448 	str.w	r1, [r2, #1096]	; 0x448
  value = value | (((uint32_t)HuffTableAC1->Bits[15] & 0xFFUL) << 8) | ((uint32_t)HuffTableAC1->Bits[14] & 0xFFUL);
9000b378:	f247 7102 	movw	r1, #30466	; 0x7702
    *address = (((uint32_t)HuffTableDC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
9000b37c:	f8c2 3444 	str.w	r3, [r2, #1092]	; 0x444
9000b380:	f1a3 3304 	sub.w	r3, r3, #67372036	; 0x4040404
9000b384:	f8c2 3440 	str.w	r3, [r2, #1088]	; 0x440
  value = *address & 0x0000FFFFU;
9000b388:	f8d2 3448 	ldr.w	r3, [r2, #1096]	; 0x448
9000b38c:	b29b      	uxth	r3, r3
  value = value | (((uint32_t)HuffTableAC1->Bits[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableAC1->Bits[0] & 0xFFUL) << 16);
9000b38e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
  *address = value;
9000b392:	f8c2 3448 	str.w	r3, [r2, #1096]	; 0x448
  value = *address & 0xFFFF0000U;
9000b396:	f8d2 3458 	ldr.w	r3, [r2, #1112]	; 0x458
9000b39a:	4003      	ands	r3, r0
    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
9000b39c:	483f      	ldr	r0, [pc, #252]	; (9000b49c <HAL_JPEG_Init+0x254>)
  value = value | (((uint32_t)HuffTableAC1->Bits[15] & 0xFFUL) << 8) | ((uint32_t)HuffTableAC1->Bits[14] & 0xFFUL);
9000b39e:	4319      	orrs	r1, r3
    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
9000b3a0:	4b3f      	ldr	r3, [pc, #252]	; (9000b4a0 <HAL_JPEG_Init+0x258>)
  *address = value;
9000b3a2:	f8c2 1458 	str.w	r1, [r2, #1112]	; 0x458
    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
9000b3a6:	493f      	ldr	r1, [pc, #252]	; (9000b4a4 <HAL_JPEG_Init+0x25c>)
9000b3a8:	f8c2 0454 	str.w	r0, [r2, #1108]	; 0x454
  address = (hjpeg->Instance->DHTMEM + 102);
9000b3ac:	f502 609f 	add.w	r0, r2, #1272	; 0x4f8
    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
9000b3b0:	f8c2 1450 	str.w	r1, [r2, #1104]	; 0x450
9000b3b4:	f8c2 344c 	str.w	r3, [r2, #1100]	; 0x44c
  value = *address & 0x0000FFFFUL;
9000b3b8:	f8d2 3458 	ldr.w	r3, [r2, #1112]	; 0x458
  value = value | (((uint32_t)HuffTableAC1->HuffVal[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableAC1->HuffVal[0] & 0xFFUL) <<
9000b3bc:	493a      	ldr	r1, [pc, #232]	; (9000b4a8 <HAL_JPEG_Init+0x260>)
  value = *address & 0x0000FFFFUL;
9000b3be:	b29b      	uxth	r3, r3
9000b3c0:	f1a1 06a0 	sub.w	r6, r1, #160	; 0xa0
  value = value | (((uint32_t)HuffTableAC1->HuffVal[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableAC1->HuffVal[0] & 0xFFUL) <<
9000b3c4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
  *address = value;
9000b3c8:	f8c2 3458 	str.w	r3, [r2, #1112]	; 0x458
               (((uint32_t)HuffTableAC1->HuffVal[index] & 0xFFUL) << 16) |
9000b3cc:	f891 30b0 	ldrb.w	r3, [r1, #176]	; 0xb0
  while (index > 3UL)
9000b3d0:	3904      	subs	r1, #4
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
9000b3d2:	f891 50b5 	ldrb.w	r5, [r1, #181]	; 0xb5
               (((uint32_t)HuffTableAC1->HuffVal[index] & 0xFFUL) << 16) |
9000b3d6:	041b      	lsls	r3, r3, #16
               ((uint32_t)HuffTableAC1->HuffVal[index - 2UL] & 0xFFUL);
9000b3d8:	f891 e0b2 	ldrb.w	lr, [r1, #178]	; 0xb2
               (((uint32_t)HuffTableAC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
9000b3dc:	f891 c0b3 	ldrb.w	ip, [r1, #179]	; 0xb3
  while (index > 3UL)
9000b3e0:	42b1      	cmp	r1, r6
               (((uint32_t)HuffTableAC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
9000b3e2:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
9000b3e6:	ea43 030e 	orr.w	r3, r3, lr
9000b3ea:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
9000b3ee:	f840 3904 	str.w	r3, [r0], #-4
  while (index > 3UL)
9000b3f2:	d1eb      	bne.n	9000b3cc <HAL_JPEG_Init+0x184>
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACLUM_HuffTable,
9000b3f4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
9000b3f8:	4926      	ldr	r1, [pc, #152]	; (9000b494 <HAL_JPEG_Init+0x24c>)
9000b3fa:	4620      	mov	r0, r4
9000b3fc:	f7ff fd3a 	bl	9000ae74 <JPEG_Set_HuffAC_Mem>
  if (error != HAL_OK)
9000b400:	b118      	cbz	r0, 9000b40a <HAL_JPEG_Init+0x1c2>
    hjpeg->ErrorCode = HAL_JPEG_ERROR_HUFF_TABLE;
9000b402:	2301      	movs	r3, #1
    return HAL_ERROR;
9000b404:	4618      	mov	r0, r3
    hjpeg->ErrorCode = HAL_JPEG_ERROR_HUFF_TABLE;
9000b406:	6523      	str	r3, [r4, #80]	; 0x50
}
9000b408:	bd70      	pop	{r4, r5, r6, pc}
                              (hjpeg->Instance->HUFFENC_AC1));
9000b40a:	6822      	ldr	r2, [r4, #0]
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACCHROM_HuffTable,
9000b40c:	4620      	mov	r0, r4
9000b40e:	4926      	ldr	r1, [pc, #152]	; (9000b4a8 <HAL_JPEG_Init+0x260>)
9000b410:	f502 62cc 	add.w	r2, r2, #1632	; 0x660
9000b414:	f7ff fd2e 	bl	9000ae74 <JPEG_Set_HuffAC_Mem>
  if (error != HAL_OK)
9000b418:	2800      	cmp	r0, #0
9000b41a:	d1f2      	bne.n	9000b402 <HAL_JPEG_Init+0x1ba>
                              hjpeg->Instance->HUFFENC_DC0);
9000b41c:	6822      	ldr	r2, [r4, #0]
  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCLUM_HuffTable,
9000b41e:	4620      	mov	r0, r4
9000b420:	4922      	ldr	r1, [pc, #136]	; (9000b4ac <HAL_JPEG_Init+0x264>)
9000b422:	f502 62f8 	add.w	r2, r2, #1984	; 0x7c0
9000b426:	f7ff fc7b 	bl	9000ad20 <JPEG_Set_HuffDC_Mem>
  if (error != HAL_OK)
9000b42a:	2800      	cmp	r0, #0
9000b42c:	d1e9      	bne.n	9000b402 <HAL_JPEG_Init+0x1ba>
                              hjpeg->Instance->HUFFENC_DC1);
9000b42e:	6822      	ldr	r2, [r4, #0]
  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCCHROM_HuffTable,
9000b430:	4620      	mov	r0, r4
9000b432:	491f      	ldr	r1, [pc, #124]	; (9000b4b0 <HAL_JPEG_Init+0x268>)
9000b434:	f502 62fc 	add.w	r2, r2, #2016	; 0x7e0
9000b438:	f7ff fc72 	bl	9000ad20 <JPEG_Set_HuffDC_Mem>
  if (JPEG_Set_HuffEnc_Mem(hjpeg) != HAL_OK)
9000b43c:	2800      	cmp	r0, #0
9000b43e:	d1e0      	bne.n	9000b402 <HAL_JPEG_Init+0x1ba>
  hjpeg->Instance->CONFR1 |= JPEG_CONFR1_HDR;
9000b440:	6822      	ldr	r2, [r4, #0]
  hjpeg->State = HAL_JPEG_STATE_READY;
9000b442:	2101      	movs	r1, #1
  hjpeg->Instance->CONFR1 |= JPEG_CONFR1_HDR;
9000b444:	6853      	ldr	r3, [r2, #4]
9000b446:	f443 7380 	orr.w	r3, r3, #256	; 0x100
9000b44a:	6053      	str	r3, [r2, #4]
  hjpeg->JpegInCount = 0;
9000b44c:	6220      	str	r0, [r4, #32]
  hjpeg->JpegOutCount = 0;
9000b44e:	6260      	str	r0, [r4, #36]	; 0x24
  hjpeg->State = HAL_JPEG_STATE_READY;
9000b450:	f884 104d 	strb.w	r1, [r4, #77]	; 0x4d
  hjpeg->ErrorCode = HAL_JPEG_ERROR_NONE;
9000b454:	6520      	str	r0, [r4, #80]	; 0x50
  hjpeg->Context = 0;
9000b456:	6560      	str	r0, [r4, #84]	; 0x54
}
9000b458:	bd70      	pop	{r4, r5, r6, pc}
    hjpeg->Lock = HAL_UNLOCKED;
9000b45a:	f880 204c 	strb.w	r2, [r0, #76]	; 0x4c
    HAL_JPEG_MspInit(hjpeg);
9000b45e:	f7f9 fa41 	bl	900048e4 <HAL_JPEG_MspInit>
9000b462:	e6fd      	b.n	9000b260 <HAL_JPEG_Init+0x18>
    return HAL_ERROR;
9000b464:	2001      	movs	r0, #1
}
9000b466:	4770      	bx	lr
9000b468:	9002b880 	.word	0x9002b880
9000b46c:	9002b808 	.word	0x9002b808
9000b470:	01050100 	.word	0x01050100
9000b474:	0b0a0908 	.word	0x0b0a0908
9000b478:	07060504 	.word	0x07060504
9000b47c:	03020100 	.word	0x03020100
9000b480:	7d010000 	.word	0x7d010000
9000b484:	04040505 	.word	0x04040505
9000b488:	03040203 	.word	0x03040203
9000b48c:	03010200 	.word	0x03010200
9000b490:	ffff0000 	.word	0xffff0000
9000b494:	9002b754 	.word	0x9002b754
9000b498:	09080706 	.word	0x09080706
9000b49c:	01000404 	.word	0x01000404
9000b4a0:	04040201 	.word	0x04040201
9000b4a4:	05070403 	.word	0x05070403
9000b4a8:	9002b6a0 	.word	0x9002b6a0
9000b4ac:	9002b864 	.word	0x9002b864
9000b4b0:	9002b848 	.word	0x9002b848

9000b4b4 <HAL_JPEG_Decode_DMA>:
  if ((hjpeg == NULL) || (pDataIn == NULL) || (pDataOutMCU == NULL))
9000b4b4:	2b00      	cmp	r3, #0
9000b4b6:	bf18      	it	ne
9000b4b8:	2900      	cmpne	r1, #0
9000b4ba:	d03b      	beq.n	9000b534 <HAL_JPEG_Decode_DMA+0x80>
{
9000b4bc:	b570      	push	{r4, r5, r6, lr}
  if ((hjpeg == NULL) || (pDataIn == NULL) || (pDataOutMCU == NULL))
9000b4be:	fab0 f580 	clz	r5, r0
9000b4c2:	4604      	mov	r4, r0
9000b4c4:	096d      	lsrs	r5, r5, #5
9000b4c6:	b330      	cbz	r0, 9000b516 <HAL_JPEG_Decode_DMA+0x62>
  __HAL_LOCK(hjpeg);
9000b4c8:	f890 c04c 	ldrb.w	ip, [r0, #76]	; 0x4c
9000b4cc:	f1bc 0f01 	cmp.w	ip, #1
9000b4d0:	d02e      	beq.n	9000b530 <HAL_JPEG_Decode_DMA+0x7c>
  if (hjpeg->State == HAL_JPEG_STATE_READY)
9000b4d2:	f890 c04d 	ldrb.w	ip, [r0, #77]	; 0x4d
  __HAL_LOCK(hjpeg);
9000b4d6:	f04f 0e01 	mov.w	lr, #1
  if (hjpeg->State == HAL_JPEG_STATE_READY)
9000b4da:	45f4      	cmp	ip, lr
9000b4dc:	fa5f f68c 	uxtb.w	r6, ip
  __HAL_LOCK(hjpeg);
9000b4e0:	f880 e04c 	strb.w	lr, [r0, #76]	; 0x4c
  if (hjpeg->State == HAL_JPEG_STATE_READY)
9000b4e4:	d119      	bne.n	9000b51a <HAL_JPEG_Decode_DMA+0x66>
    hjpeg->InDataLength = InDataLength;
9000b4e6:	6282      	str	r2, [r0, #40]	; 0x28
    hjpeg->pJpegOutBuffPtr = pDataOutMCU;
9000b4e8:	e9c0 1306 	strd	r1, r3, [r0, #24]
    hjpeg->OutDataLength = OutDataLength;
9000b4ec:	9b04      	ldr	r3, [sp, #16]
9000b4ee:	62c3      	str	r3, [r0, #44]	; 0x2c
    hjpeg->State = HAL_JPEG_STATE_BUSY_DECODING;
9000b4f0:	2304      	movs	r3, #4
9000b4f2:	f880 304d 	strb.w	r3, [r0, #77]	; 0x4d
    hjpeg->Context &= ~(JPEG_CONTEXT_OPERATION_MASK | JPEG_CONTEXT_METHOD_MASK);
9000b4f6:	6d43      	ldr	r3, [r0, #84]	; 0x54
9000b4f8:	f023 030f 	bic.w	r3, r3, #15
9000b4fc:	6543      	str	r3, [r0, #84]	; 0x54
    hjpeg->Context |= (JPEG_CONTEXT_DECODE | JPEG_CONTEXT_DMA);
9000b4fe:	6d43      	ldr	r3, [r0, #84]	; 0x54
9000b500:	f043 030e 	orr.w	r3, r3, #14
9000b504:	6543      	str	r3, [r0, #84]	; 0x54
    hjpeg->JpegInCount = 0;
9000b506:	6205      	str	r5, [r0, #32]
    hjpeg->JpegOutCount = 0;
9000b508:	6245      	str	r5, [r0, #36]	; 0x24
    JPEG_Init_Process(hjpeg);
9000b50a:	f7ff fd3d 	bl	9000af88 <JPEG_Init_Process>
    if (JPEG_DMA_StartProcess(hjpeg) != HAL_OK)
9000b50e:	f7ff fd79 	bl	9000b004 <JPEG_DMA_StartProcess>
9000b512:	b930      	cbnz	r0, 9000b522 <HAL_JPEG_Decode_DMA+0x6e>
}
9000b514:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
9000b516:	2001      	movs	r0, #1
}
9000b518:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_BUSY;
9000b51a:	2002      	movs	r0, #2
    __HAL_UNLOCK(hjpeg);
9000b51c:	f884 504c 	strb.w	r5, [r4, #76]	; 0x4c
}
9000b520:	bd70      	pop	{r4, r5, r6, pc}
      hjpeg->State = HAL_JPEG_STATE_ERROR;
9000b522:	2306      	movs	r3, #6
      return HAL_ERROR;
9000b524:	4630      	mov	r0, r6
      __HAL_UNLOCK(hjpeg);
9000b526:	f884 504c 	strb.w	r5, [r4, #76]	; 0x4c
      hjpeg->State = HAL_JPEG_STATE_ERROR;
9000b52a:	f884 304d 	strb.w	r3, [r4, #77]	; 0x4d
}
9000b52e:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hjpeg);
9000b530:	2002      	movs	r0, #2
}
9000b532:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
9000b534:	2001      	movs	r0, #1
}
9000b536:	4770      	bx	lr

9000b538 <HAL_JPEG_Pause>:
  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
9000b538:	6d43      	ldr	r3, [r0, #84]	; 0x54
9000b53a:	f003 030c 	and.w	r3, r3, #12
9000b53e:	2b0c      	cmp	r3, #12
9000b540:	d01a      	beq.n	9000b578 <HAL_JPEG_Pause+0x40>
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
9000b542:	6d43      	ldr	r3, [r0, #84]	; 0x54
9000b544:	f003 030c 	and.w	r3, r3, #12
9000b548:	2b08      	cmp	r3, #8
9000b54a:	d001      	beq.n	9000b550 <HAL_JPEG_Pause+0x18>
}
9000b54c:	2000      	movs	r0, #0
9000b54e:	4770      	bx	lr
    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
9000b550:	07ca      	lsls	r2, r1, #31
9000b552:	d41f      	bmi.n	9000b594 <HAL_JPEG_Pause+0x5c>
9000b554:	f04f 3cff 	mov.w	ip, #4294967295
9000b558:	f06f 0228 	mvn.w	r2, #40	; 0x28
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
9000b55c:	078b      	lsls	r3, r1, #30
9000b55e:	d504      	bpl.n	9000b56a <HAL_JPEG_Pause+0x32>
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_OUTPUT;
9000b560:	6d43      	ldr	r3, [r0, #84]	; 0x54
9000b562:	4694      	mov	ip, r2
9000b564:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
9000b568:	6543      	str	r3, [r0, #84]	; 0x54
    __HAL_JPEG_DISABLE_IT(hjpeg, mask);
9000b56a:	6802      	ldr	r2, [r0, #0]
}
9000b56c:	2000      	movs	r0, #0
    __HAL_JPEG_DISABLE_IT(hjpeg, mask);
9000b56e:	6b13      	ldr	r3, [r2, #48]	; 0x30
9000b570:	ea03 030c 	and.w	r3, r3, ip
9000b574:	6313      	str	r3, [r2, #48]	; 0x30
}
9000b576:	4770      	bx	lr
    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
9000b578:	07cb      	lsls	r3, r1, #31
9000b57a:	d503      	bpl.n	9000b584 <HAL_JPEG_Pause+0x4c>
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_INPUT;
9000b57c:	6d43      	ldr	r3, [r0, #84]	; 0x54
9000b57e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
9000b582:	6543      	str	r3, [r0, #84]	; 0x54
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
9000b584:	0789      	lsls	r1, r1, #30
9000b586:	d5e1      	bpl.n	9000b54c <HAL_JPEG_Pause+0x14>
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_OUTPUT;
9000b588:	6d43      	ldr	r3, [r0, #84]	; 0x54
9000b58a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
9000b58e:	6543      	str	r3, [r0, #84]	; 0x54
}
9000b590:	2000      	movs	r0, #0
9000b592:	4770      	bx	lr
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_INPUT;
9000b594:	6d43      	ldr	r3, [r0, #84]	; 0x54
9000b596:	f06f 0c06 	mvn.w	ip, #6
9000b59a:	f06f 022e 	mvn.w	r2, #46	; 0x2e
9000b59e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
9000b5a2:	6543      	str	r3, [r0, #84]	; 0x54
      mask |= (JPEG_IT_IFT | JPEG_IT_IFNF);
9000b5a4:	e7da      	b.n	9000b55c <HAL_JPEG_Pause+0x24>
9000b5a6:	bf00      	nop

9000b5a8 <HAL_JPEG_ConfigInputBuffer>:
  hjpeg->pJpegInBuffPtr =  pNewInputBuffer;
9000b5a8:	6181      	str	r1, [r0, #24]
  hjpeg->InDataLength = InDataLength;
9000b5aa:	6282      	str	r2, [r0, #40]	; 0x28
}
9000b5ac:	4770      	bx	lr
9000b5ae:	bf00      	nop

9000b5b0 <HAL_JPEG_ConfigOutputBuffer>:
  hjpeg->pJpegOutBuffPtr = pNewOutputBuffer;
9000b5b0:	61c1      	str	r1, [r0, #28]
  hjpeg->OutDataLength = OutDataLength;
9000b5b2:	62c2      	str	r2, [r0, #44]	; 0x2c
}
9000b5b4:	4770      	bx	lr
9000b5b6:	bf00      	nop

9000b5b8 <HAL_JPEG_EncodeCpltCallback>:
9000b5b8:	4770      	bx	lr
9000b5ba:	bf00      	nop

9000b5bc <JPEG_MDMAErrorCallback>:
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((MDMA_HandleTypeDef *)hmdma)->Parent;
9000b5bc:	6c00      	ldr	r0, [r0, #64]	; 0x40
  hjpeg->State = HAL_JPEG_STATE_READY;
9000b5be:	2101      	movs	r1, #1
{
9000b5c0:	b508      	push	{r3, lr}
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
9000b5c2:	6803      	ldr	r3, [r0, #0]
9000b5c4:	681a      	ldr	r2, [r3, #0]
9000b5c6:	f022 0201 	bic.w	r2, r2, #1
9000b5ca:	601a      	str	r2, [r3, #0]
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
9000b5cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
9000b5ce:	f022 027e 	bic.w	r2, r2, #126	; 0x7e
9000b5d2:	631a      	str	r2, [r3, #48]	; 0x30
  hjpeg->State = HAL_JPEG_STATE_READY;
9000b5d4:	f880 104d 	strb.w	r1, [r0, #77]	; 0x4d
  hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
9000b5d8:	6d03      	ldr	r3, [r0, #80]	; 0x50
9000b5da:	f043 0304 	orr.w	r3, r3, #4
9000b5de:	6503      	str	r3, [r0, #80]	; 0x50
  HAL_JPEG_ErrorCallback(hjpeg);
9000b5e0:	f7f6 f93c 	bl	9000185c <HAL_JPEG_ErrorCallback>
}
9000b5e4:	bd08      	pop	{r3, pc}
9000b5e6:	bf00      	nop

9000b5e8 <JPEG_MDMAInCpltCallback>:
{
9000b5e8:	b530      	push	{r4, r5, lr}
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((MDMA_HandleTypeDef *)hmdma)->Parent;
9000b5ea:	6c04      	ldr	r4, [r0, #64]	; 0x40
  if ((hjpeg->Context & (JPEG_CONTEXT_METHOD_MASK | JPEG_CONTEXT_ENDING_DMA)) == JPEG_CONTEXT_DMA)
9000b5ec:	f248 010c 	movw	r1, #32780	; 0x800c
{
9000b5f0:	b083      	sub	sp, #12
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
9000b5f2:	6822      	ldr	r2, [r4, #0]
9000b5f4:	6b13      	ldr	r3, [r2, #48]	; 0x30
9000b5f6:	f023 037e 	bic.w	r3, r3, #126	; 0x7e
9000b5fa:	6313      	str	r3, [r2, #48]	; 0x30
  if ((hjpeg->Context & (JPEG_CONTEXT_METHOD_MASK | JPEG_CONTEXT_ENDING_DMA)) == JPEG_CONTEXT_DMA)
9000b5fc:	6d63      	ldr	r3, [r4, #84]	; 0x54
9000b5fe:	400b      	ands	r3, r1
9000b600:	2b0c      	cmp	r3, #12
9000b602:	d001      	beq.n	9000b608 <JPEG_MDMAInCpltCallback+0x20>
}
9000b604:	b003      	add	sp, #12
9000b606:	bd30      	pop	{r4, r5, pc}
    hjpeg->JpegInCount = hjpeg->InDataLength - (hmdma->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
9000b608:	6802      	ldr	r2, [r0, #0]
    HAL_JPEG_GetDataCallback(hjpeg, hjpeg->JpegInCount);
9000b60a:	4620      	mov	r0, r4
    hjpeg->JpegInCount = hjpeg->InDataLength - (hmdma->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
9000b60c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
9000b60e:	6952      	ldr	r2, [r2, #20]
    inXfrSize = hjpeg->hdmain->Init.BufferTransferLength;
9000b610:	6b21      	ldr	r1, [r4, #48]	; 0x30
    hjpeg->JpegInCount = hjpeg->InDataLength - (hmdma->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
9000b612:	f3c2 0210 	ubfx	r2, r2, #0, #17
    inXfrSize = hjpeg->hdmain->Init.BufferTransferLength;
9000b616:	6a8d      	ldr	r5, [r1, #40]	; 0x28
    hjpeg->JpegInCount = hjpeg->InDataLength - (hmdma->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
9000b618:	1a9b      	subs	r3, r3, r2
9000b61a:	6223      	str	r3, [r4, #32]
    HAL_JPEG_GetDataCallback(hjpeg, hjpeg->JpegInCount);
9000b61c:	6a21      	ldr	r1, [r4, #32]
9000b61e:	f7f6 f8b5 	bl	9000178c <HAL_JPEG_GetDataCallback>
    if (hjpeg->InDataLength >= inXfrSize)
9000b622:	6aa3      	ldr	r3, [r4, #40]	; 0x28
9000b624:	42ab      	cmp	r3, r5
9000b626:	d311      	bcc.n	9000b64c <JPEG_MDMAInCpltCallback+0x64>
      if (inXfrSize == 0UL)
9000b628:	b305      	cbz	r5, 9000b66c <JPEG_MDMAInCpltCallback+0x84>
      hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % inXfrSize);
9000b62a:	fbb3 f2f5 	udiv	r2, r3, r5
9000b62e:	fb05 3212 	mls	r2, r5, r2, r3
9000b632:	1a9b      	subs	r3, r3, r2
    if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (hjpeg->InDataLength > 0UL))
9000b634:	6d62      	ldr	r2, [r4, #84]	; 0x54
      hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % inXfrSize);
9000b636:	62a3      	str	r3, [r4, #40]	; 0x28
    if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (hjpeg->InDataLength > 0UL))
9000b638:	04d1      	lsls	r1, r2, #19
9000b63a:	d400      	bmi.n	9000b63e <JPEG_MDMAInCpltCallback+0x56>
9000b63c:	b963      	cbnz	r3, 9000b658 <JPEG_MDMAInCpltCallback+0x70>
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
9000b63e:	6822      	ldr	r2, [r4, #0]
9000b640:	6b13      	ldr	r3, [r2, #48]	; 0x30
9000b642:	f043 0360 	orr.w	r3, r3, #96	; 0x60
9000b646:	6313      	str	r3, [r2, #48]	; 0x30
}
9000b648:	b003      	add	sp, #12
9000b64a:	bd30      	pop	{r4, r5, pc}
    else if (hjpeg->InDataLength > 0UL)
9000b64c:	b1cb      	cbz	r3, 9000b682 <JPEG_MDMAInCpltCallback+0x9a>
      if ((hjpeg->InDataLength % 4UL) != 0UL)
9000b64e:	0798      	lsls	r0, r3, #30
9000b650:	d119      	bne.n	9000b686 <JPEG_MDMAInCpltCallback+0x9e>
    if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (hjpeg->InDataLength > 0UL))
9000b652:	6d62      	ldr	r2, [r4, #84]	; 0x54
9000b654:	04d2      	lsls	r2, r2, #19
9000b656:	d4f2      	bmi.n	9000b63e <JPEG_MDMAInCpltCallback+0x56>
      if (HAL_MDMA_Start_IT(hjpeg->hdmain, (uint32_t)hjpeg->pJpegInBuffPtr, (uint32_t)&hjpeg->Instance->DIR,
9000b658:	6822      	ldr	r2, [r4, #0]
9000b65a:	2501      	movs	r5, #1
9000b65c:	69a1      	ldr	r1, [r4, #24]
9000b65e:	6b20      	ldr	r0, [r4, #48]	; 0x30
9000b660:	3240      	adds	r2, #64	; 0x40
9000b662:	9500      	str	r5, [sp, #0]
9000b664:	f001 f8b0 	bl	9000c7c8 <HAL_MDMA_Start_IT>
9000b668:	2800      	cmp	r0, #0
9000b66a:	d0e8      	beq.n	9000b63e <JPEG_MDMAInCpltCallback+0x56>
        hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
9000b66c:	6d23      	ldr	r3, [r4, #80]	; 0x50
        hjpeg->State = HAL_JPEG_STATE_ERROR;
9000b66e:	2206      	movs	r2, #6
        HAL_JPEG_ErrorCallback(hjpeg);
9000b670:	4620      	mov	r0, r4
        hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
9000b672:	f043 0304 	orr.w	r3, r3, #4
9000b676:	6523      	str	r3, [r4, #80]	; 0x50
        hjpeg->State = HAL_JPEG_STATE_ERROR;
9000b678:	f884 204d 	strb.w	r2, [r4, #77]	; 0x4d
        HAL_JPEG_ErrorCallback(hjpeg);
9000b67c:	f7f6 f8ee 	bl	9000185c <HAL_JPEG_ErrorCallback>
        return;
9000b680:	e7c0      	b.n	9000b604 <JPEG_MDMAInCpltCallback+0x1c>
    if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (hjpeg->InDataLength > 0UL))
9000b682:	6d63      	ldr	r3, [r4, #84]	; 0x54
9000b684:	e7db      	b.n	9000b63e <JPEG_MDMAInCpltCallback+0x56>
        hjpeg->InDataLength = ((hjpeg->InDataLength / 4UL) + 1UL) * 4UL;
9000b686:	f023 0303 	bic.w	r3, r3, #3
9000b68a:	3304      	adds	r3, #4
9000b68c:	e7d2      	b.n	9000b634 <JPEG_MDMAInCpltCallback+0x4c>
9000b68e:	bf00      	nop

9000b690 <JPEG_DMA_PollResidualData>:
{
9000b690:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
      if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) != 0UL)
9000b692:	6802      	ldr	r2, [r0, #0]
9000b694:	2610      	movs	r6, #16
{
9000b696:	4604      	mov	r4, r0
    if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
9000b698:	6d65      	ldr	r5, [r4, #84]	; 0x54
9000b69a:	f415 5500 	ands.w	r5, r5, #8192	; 0x2000
9000b69e:	d11d      	bne.n	9000b6dc <JPEG_DMA_PollResidualData+0x4c>
      if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) != 0UL)
9000b6a0:	6b53      	ldr	r3, [r2, #52]	; 0x34
9000b6a2:	06df      	lsls	r7, r3, #27
9000b6a4:	d51a      	bpl.n	9000b6dc <JPEG_DMA_PollResidualData+0x4c>
        dataOut = hjpeg->Instance->DOR;
9000b6a6:	6c53      	ldr	r3, [r2, #68]	; 0x44
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataOut & 0x000000FFUL);
9000b6a8:	69e7      	ldr	r7, [r4, #28]
9000b6aa:	6a62      	ldr	r2, [r4, #36]	; 0x24
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataOut & 0x0000FF00UL) >> 8);
9000b6ac:	0a18      	lsrs	r0, r3, #8
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataOut & 0x00FF0000UL) >> 16);
9000b6ae:	0c19      	lsrs	r1, r3, #16
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataOut & 0x000000FFUL);
9000b6b0:	54bb      	strb	r3, [r7, r2]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataOut & 0xFF000000UL) >> 24);
9000b6b2:	0e1b      	lsrs	r3, r3, #24
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataOut & 0x0000FF00UL) >> 8);
9000b6b4:	6a67      	ldr	r7, [r4, #36]	; 0x24
9000b6b6:	69e2      	ldr	r2, [r4, #28]
9000b6b8:	443a      	add	r2, r7
9000b6ba:	7050      	strb	r0, [r2, #1]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataOut & 0x00FF0000UL) >> 16);
9000b6bc:	6a60      	ldr	r0, [r4, #36]	; 0x24
9000b6be:	69e2      	ldr	r2, [r4, #28]
9000b6c0:	4402      	add	r2, r0
9000b6c2:	7091      	strb	r1, [r2, #2]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataOut & 0xFF000000UL) >> 24);
9000b6c4:	6a61      	ldr	r1, [r4, #36]	; 0x24
9000b6c6:	69e2      	ldr	r2, [r4, #28]
9000b6c8:	440a      	add	r2, r1
9000b6ca:	70d3      	strb	r3, [r2, #3]
        hjpeg->JpegOutCount += 4UL;
9000b6cc:	6a63      	ldr	r3, [r4, #36]	; 0x24
        if (hjpeg->JpegOutCount == hjpeg->OutDataLength)
9000b6ce:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
        hjpeg->JpegOutCount += 4UL;
9000b6d0:	3304      	adds	r3, #4
9000b6d2:	6263      	str	r3, [r4, #36]	; 0x24
        if (hjpeg->JpegOutCount == hjpeg->OutDataLength)
9000b6d4:	6a63      	ldr	r3, [r4, #36]	; 0x24
9000b6d6:	4293      	cmp	r3, r2
9000b6d8:	d021      	beq.n	9000b71e <JPEG_DMA_PollResidualData+0x8e>
  if ((__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) == 0UL) || ((tmpContext & JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL))
9000b6da:	6822      	ldr	r2, [r4, #0]
  for (count = JPEG_FIFO_SIZE; count > 0UL; count--)
9000b6dc:	3e01      	subs	r6, #1
9000b6de:	d1db      	bne.n	9000b698 <JPEG_DMA_PollResidualData+0x8>
  tmpContext = hjpeg->Context;
9000b6e0:	6d61      	ldr	r1, [r4, #84]	; 0x54
  if ((__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) == 0UL) || ((tmpContext & JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL))
9000b6e2:	6b53      	ldr	r3, [r2, #52]	; 0x34
9000b6e4:	06d8      	lsls	r0, r3, #27
9000b6e6:	d501      	bpl.n	9000b6ec <JPEG_DMA_PollResidualData+0x5c>
9000b6e8:	048b      	lsls	r3, r1, #18
9000b6ea:	d417      	bmi.n	9000b71c <JPEG_DMA_PollResidualData+0x8c>
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
9000b6ec:	6813      	ldr	r3, [r2, #0]
9000b6ee:	f023 0301 	bic.w	r3, r3, #1
9000b6f2:	6013      	str	r3, [r2, #0]
    if (hjpeg->JpegOutCount > 0UL)
9000b6f4:	6a63      	ldr	r3, [r4, #36]	; 0x24
9000b6f6:	b9eb      	cbnz	r3, 9000b734 <JPEG_DMA_PollResidualData+0xa4>
    tmpContext = hjpeg->Context;
9000b6f8:	6d63      	ldr	r3, [r4, #84]	; 0x54
    __HAL_UNLOCK(hjpeg);
9000b6fa:	2000      	movs	r0, #0
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
9000b6fc:	6d62      	ldr	r2, [r4, #84]	; 0x54
    hjpeg->State = HAL_JPEG_STATE_READY;
9000b6fe:	2101      	movs	r1, #1
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
9000b700:	f003 0303 	and.w	r3, r3, #3
    __HAL_UNLOCK(hjpeg);
9000b704:	f884 004c 	strb.w	r0, [r4, #76]	; 0x4c
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
9000b708:	f402 4282 	and.w	r2, r2, #16640	; 0x4100
      HAL_JPEG_DecodeCpltCallback(hjpeg);
9000b70c:	4620      	mov	r0, r4
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
9000b70e:	2b02      	cmp	r3, #2
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
9000b710:	6562      	str	r2, [r4, #84]	; 0x54
    hjpeg->State = HAL_JPEG_STATE_READY;
9000b712:	f884 104d 	strb.w	r1, [r4, #77]	; 0x4d
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
9000b716:	d00a      	beq.n	9000b72e <JPEG_DMA_PollResidualData+0x9e>
      HAL_JPEG_EncodeCpltCallback(hjpeg);
9000b718:	f7ff ff4e 	bl	9000b5b8 <HAL_JPEG_EncodeCpltCallback>
}
9000b71c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
          HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
9000b71e:	6a62      	ldr	r2, [r4, #36]	; 0x24
9000b720:	4620      	mov	r0, r4
9000b722:	69e1      	ldr	r1, [r4, #28]
9000b724:	f7f6 f852 	bl	900017cc <HAL_JPEG_DataReadyCallback>
  if ((__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) == 0UL) || ((tmpContext & JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL))
9000b728:	6822      	ldr	r2, [r4, #0]
          hjpeg->JpegOutCount = 0;
9000b72a:	6265      	str	r5, [r4, #36]	; 0x24
9000b72c:	e7d6      	b.n	9000b6dc <JPEG_DMA_PollResidualData+0x4c>
      HAL_JPEG_DecodeCpltCallback(hjpeg);
9000b72e:	f7f6 f897 	bl	90001860 <HAL_JPEG_DecodeCpltCallback>
}
9000b732:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
9000b734:	6a62      	ldr	r2, [r4, #36]	; 0x24
9000b736:	4620      	mov	r0, r4
9000b738:	69e1      	ldr	r1, [r4, #28]
9000b73a:	f7f6 f847 	bl	900017cc <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
9000b73e:	2300      	movs	r3, #0
9000b740:	6263      	str	r3, [r4, #36]	; 0x24
9000b742:	e7d9      	b.n	9000b6f8 <JPEG_DMA_PollResidualData+0x68>

9000b744 <HAL_JPEG_Resume>:
  if ((hjpeg->Context & (JPEG_CONTEXT_PAUSE_INPUT | JPEG_CONTEXT_PAUSE_OUTPUT)) == 0UL)
9000b744:	6d43      	ldr	r3, [r0, #84]	; 0x54
9000b746:	f413 5f40 	tst.w	r3, #12288	; 0x3000
9000b74a:	d028      	beq.n	9000b79e <HAL_JPEG_Resume+0x5a>
  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
9000b74c:	6d43      	ldr	r3, [r0, #84]	; 0x54
9000b74e:	f003 030c 	and.w	r3, r3, #12
9000b752:	2b0c      	cmp	r3, #12
{
9000b754:	b570      	push	{r4, r5, r6, lr}
9000b756:	4604      	mov	r4, r0
9000b758:	b082      	sub	sp, #8
9000b75a:	460d      	mov	r5, r1
  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
9000b75c:	d007      	beq.n	9000b76e <HAL_JPEG_Resume+0x2a>
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
9000b75e:	6d43      	ldr	r3, [r0, #84]	; 0x54
9000b760:	f003 030c 	and.w	r3, r3, #12
9000b764:	2b08      	cmp	r3, #8
9000b766:	d037      	beq.n	9000b7d8 <HAL_JPEG_Resume+0x94>
  return HAL_OK;
9000b768:	2000      	movs	r0, #0
}
9000b76a:	b002      	add	sp, #8
9000b76c:	bd70      	pop	{r4, r5, r6, pc}
    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
9000b76e:	07c8      	lsls	r0, r1, #31
9000b770:	d417      	bmi.n	9000b7a2 <HAL_JPEG_Resume+0x5e>
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
9000b772:	07a9      	lsls	r1, r5, #30
9000b774:	d5f8      	bpl.n	9000b768 <HAL_JPEG_Resume+0x24>
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_OUTPUT);
9000b776:	6d63      	ldr	r3, [r4, #84]	; 0x54
9000b778:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
9000b77c:	6563      	str	r3, [r4, #84]	; 0x54
      if ((hjpeg->Context & JPEG_CONTEXT_ENDING_DMA) != 0UL)
9000b77e:	6d63      	ldr	r3, [r4, #84]	; 0x54
9000b780:	041a      	lsls	r2, r3, #16
9000b782:	d453      	bmi.n	9000b82c <HAL_JPEG_Resume+0xe8>
        xfrSize = hjpeg->hdmaout->Init.BufferTransferLength;
9000b784:	6b60      	ldr	r0, [r4, #52]	; 0x34
9000b786:	6a82      	ldr	r2, [r0, #40]	; 0x28
        if (xfrSize == 0UL)
9000b788:	2a00      	cmp	r2, #0
9000b78a:	d13e      	bne.n	9000b80a <HAL_JPEG_Resume+0xc6>
          hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
9000b78c:	6d23      	ldr	r3, [r4, #80]	; 0x50
          hjpeg->State = HAL_JPEG_STATE_ERROR;
9000b78e:	2206      	movs	r2, #6
          return HAL_ERROR;
9000b790:	2001      	movs	r0, #1
          hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
9000b792:	f043 0304 	orr.w	r3, r3, #4
9000b796:	6523      	str	r3, [r4, #80]	; 0x50
          hjpeg->State = HAL_JPEG_STATE_ERROR;
9000b798:	f884 204d 	strb.w	r2, [r4, #77]	; 0x4d
          return HAL_ERROR;
9000b79c:	e7e5      	b.n	9000b76a <HAL_JPEG_Resume+0x26>
    return HAL_ERROR;
9000b79e:	2001      	movs	r0, #1
}
9000b7a0:	4770      	bx	lr
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_INPUT);
9000b7a2:	6d63      	ldr	r3, [r4, #84]	; 0x54
      xfrSize = hjpeg->hdmain->Init.BufferTransferLength;
9000b7a4:	6b20      	ldr	r0, [r4, #48]	; 0x30
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_INPUT);
9000b7a6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
      xfrSize = hjpeg->hdmain->Init.BufferTransferLength;
9000b7aa:	6a82      	ldr	r2, [r0, #40]	; 0x28
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_INPUT);
9000b7ac:	6563      	str	r3, [r4, #84]	; 0x54
      if (xfrSize == 0UL)
9000b7ae:	2a00      	cmp	r2, #0
9000b7b0:	d0ec      	beq.n	9000b78c <HAL_JPEG_Resume+0x48>
      hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % xfrSize);
9000b7b2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
9000b7b4:	fbb3 f1f2 	udiv	r1, r3, r2
9000b7b8:	fb02 3211 	mls	r2, r2, r1, r3
9000b7bc:	1a9b      	subs	r3, r3, r2
9000b7be:	62a3      	str	r3, [r4, #40]	; 0x28
      if (hjpeg->InDataLength > 0UL)
9000b7c0:	2b00      	cmp	r3, #0
9000b7c2:	d0d6      	beq.n	9000b772 <HAL_JPEG_Resume+0x2e>
        if (HAL_MDMA_Start_IT(hjpeg->hdmain, (uint32_t)hjpeg->pJpegInBuffPtr, (uint32_t)&hjpeg->Instance->DIR,
9000b7c4:	6822      	ldr	r2, [r4, #0]
9000b7c6:	2601      	movs	r6, #1
9000b7c8:	3240      	adds	r2, #64	; 0x40
9000b7ca:	9600      	str	r6, [sp, #0]
9000b7cc:	69a1      	ldr	r1, [r4, #24]
9000b7ce:	f000 fffb 	bl	9000c7c8 <HAL_MDMA_Start_IT>
9000b7d2:	2800      	cmp	r0, #0
9000b7d4:	d0cd      	beq.n	9000b772 <HAL_JPEG_Resume+0x2e>
9000b7d6:	e7d9      	b.n	9000b78c <HAL_JPEG_Resume+0x48>
    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
9000b7d8:	f011 0101 	ands.w	r1, r1, #1
9000b7dc:	d013      	beq.n	9000b806 <HAL_JPEG_Resume+0xc2>
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_INPUT);
9000b7de:	6d43      	ldr	r3, [r0, #84]	; 0x54
9000b7e0:	222e      	movs	r2, #46	; 0x2e
      mask |= (JPEG_IT_IFT | JPEG_IT_IFNF);
9000b7e2:	2106      	movs	r1, #6
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_INPUT);
9000b7e4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
9000b7e8:	6543      	str	r3, [r0, #84]	; 0x54
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
9000b7ea:	07ab      	lsls	r3, r5, #30
9000b7ec:	d504      	bpl.n	9000b7f8 <HAL_JPEG_Resume+0xb4>
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_OUTPUT);
9000b7ee:	6d63      	ldr	r3, [r4, #84]	; 0x54
      mask |= (JPEG_IT_OFT | JPEG_IT_OFNE | JPEG_IT_EOC);
9000b7f0:	4611      	mov	r1, r2
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_OUTPUT);
9000b7f2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
9000b7f6:	6563      	str	r3, [r4, #84]	; 0x54
    __HAL_JPEG_ENABLE_IT(hjpeg, mask);
9000b7f8:	6822      	ldr	r2, [r4, #0]
  return HAL_OK;
9000b7fa:	2000      	movs	r0, #0
    __HAL_JPEG_ENABLE_IT(hjpeg, mask);
9000b7fc:	6b13      	ldr	r3, [r2, #48]	; 0x30
9000b7fe:	430b      	orrs	r3, r1
9000b800:	6313      	str	r3, [r2, #48]	; 0x30
}
9000b802:	b002      	add	sp, #8
9000b804:	bd70      	pop	{r4, r5, r6, pc}
9000b806:	2228      	movs	r2, #40	; 0x28
9000b808:	e7ef      	b.n	9000b7ea <HAL_JPEG_Resume+0xa6>
        hjpeg->OutDataLength = hjpeg->OutDataLength - (hjpeg->OutDataLength % xfrSize);
9000b80a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
        if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
9000b80c:	2501      	movs	r5, #1
        hjpeg->OutDataLength = hjpeg->OutDataLength - (hjpeg->OutDataLength % xfrSize);
9000b80e:	fbb3 f1f2 	udiv	r1, r3, r2
9000b812:	fb02 3211 	mls	r2, r2, r1, r3
        if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
9000b816:	6821      	ldr	r1, [r4, #0]
        hjpeg->OutDataLength = hjpeg->OutDataLength - (hjpeg->OutDataLength % xfrSize);
9000b818:	1a9b      	subs	r3, r3, r2
        if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
9000b81a:	3144      	adds	r1, #68	; 0x44
        hjpeg->OutDataLength = hjpeg->OutDataLength - (hjpeg->OutDataLength % xfrSize);
9000b81c:	62e3      	str	r3, [r4, #44]	; 0x2c
        if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
9000b81e:	9500      	str	r5, [sp, #0]
9000b820:	69e2      	ldr	r2, [r4, #28]
9000b822:	f000 ffd1 	bl	9000c7c8 <HAL_MDMA_Start_IT>
9000b826:	2800      	cmp	r0, #0
9000b828:	d09e      	beq.n	9000b768 <HAL_JPEG_Resume+0x24>
9000b82a:	e7af      	b.n	9000b78c <HAL_JPEG_Resume+0x48>
        JPEG_DMA_PollResidualData(hjpeg);
9000b82c:	4620      	mov	r0, r4
9000b82e:	f7ff ff2f 	bl	9000b690 <JPEG_DMA_PollResidualData>
9000b832:	e799      	b.n	9000b768 <HAL_JPEG_Resume+0x24>

9000b834 <JPEG_MDMAOutCpltCallback>:
{
9000b834:	b530      	push	{r4, r5, lr}
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((MDMA_HandleTypeDef *)hmdma)->Parent;
9000b836:	6c04      	ldr	r4, [r0, #64]	; 0x40
  if ((hjpeg->Context & (JPEG_CONTEXT_METHOD_MASK | JPEG_CONTEXT_ENDING_DMA)) ==
9000b838:	f248 010c 	movw	r1, #32780	; 0x800c
{
9000b83c:	b083      	sub	sp, #12
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
9000b83e:	6823      	ldr	r3, [r4, #0]
9000b840:	6b1a      	ldr	r2, [r3, #48]	; 0x30
9000b842:	f022 027e 	bic.w	r2, r2, #126	; 0x7e
9000b846:	631a      	str	r2, [r3, #48]	; 0x30
  if ((hjpeg->Context & (JPEG_CONTEXT_METHOD_MASK | JPEG_CONTEXT_ENDING_DMA)) ==
9000b848:	6d62      	ldr	r2, [r4, #84]	; 0x54
9000b84a:	400a      	ands	r2, r1
9000b84c:	2a0c      	cmp	r2, #12
9000b84e:	d001      	beq.n	9000b854 <JPEG_MDMAOutCpltCallback+0x20>
}
9000b850:	b003      	add	sp, #12
9000b852:	bd30      	pop	{r4, r5, pc}
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF) == 0UL)
9000b854:	6b5a      	ldr	r2, [r3, #52]	; 0x34
9000b856:	0692      	lsls	r2, r2, #26
9000b858:	d505      	bpl.n	9000b866 <JPEG_MDMAOutCpltCallback+0x32>
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
9000b85a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
9000b85c:	f042 0260 	orr.w	r2, r2, #96	; 0x60
9000b860:	631a      	str	r2, [r3, #48]	; 0x30
}
9000b862:	b003      	add	sp, #12
9000b864:	bd30      	pop	{r4, r5, pc}
      hjpeg->JpegOutCount = hjpeg->OutDataLength - (hmdma->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
9000b866:	6802      	ldr	r2, [r0, #0]
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
9000b868:	4620      	mov	r0, r4
      hjpeg->JpegOutCount = hjpeg->OutDataLength - (hmdma->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
9000b86a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
9000b86c:	6952      	ldr	r2, [r2, #20]
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
9000b86e:	69e1      	ldr	r1, [r4, #28]
      hjpeg->JpegOutCount = hjpeg->OutDataLength - (hmdma->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
9000b870:	f3c2 0210 	ubfx	r2, r2, #0, #17
9000b874:	1a9b      	subs	r3, r3, r2
9000b876:	6263      	str	r3, [r4, #36]	; 0x24
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
9000b878:	6a62      	ldr	r2, [r4, #36]	; 0x24
9000b87a:	f7f5 ffa7 	bl	900017cc <HAL_JPEG_DataReadyCallback>
      if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
9000b87e:	6d63      	ldr	r3, [r4, #84]	; 0x54
9000b880:	049b      	lsls	r3, r3, #18
9000b882:	d501      	bpl.n	9000b888 <JPEG_MDMAOutCpltCallback+0x54>
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
9000b884:	6823      	ldr	r3, [r4, #0]
9000b886:	e7e8      	b.n	9000b85a <JPEG_MDMAOutCpltCallback+0x26>
        if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
9000b888:	6821      	ldr	r1, [r4, #0]
9000b88a:	2501      	movs	r5, #1
9000b88c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
9000b88e:	69e2      	ldr	r2, [r4, #28]
9000b890:	3144      	adds	r1, #68	; 0x44
9000b892:	6b60      	ldr	r0, [r4, #52]	; 0x34
9000b894:	9500      	str	r5, [sp, #0]
9000b896:	f000 ff97 	bl	9000c7c8 <HAL_MDMA_Start_IT>
9000b89a:	2800      	cmp	r0, #0
9000b89c:	d0f2      	beq.n	9000b884 <JPEG_MDMAOutCpltCallback+0x50>
          hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
9000b89e:	6d23      	ldr	r3, [r4, #80]	; 0x50
          hjpeg->State = HAL_JPEG_STATE_ERROR;
9000b8a0:	2206      	movs	r2, #6
          HAL_JPEG_ErrorCallback(hjpeg);
9000b8a2:	4620      	mov	r0, r4
          hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
9000b8a4:	f043 0304 	orr.w	r3, r3, #4
9000b8a8:	6523      	str	r3, [r4, #80]	; 0x50
          hjpeg->State = HAL_JPEG_STATE_ERROR;
9000b8aa:	f884 204d 	strb.w	r2, [r4, #77]	; 0x4d
          HAL_JPEG_ErrorCallback(hjpeg);
9000b8ae:	f7f5 ffd5 	bl	9000185c <HAL_JPEG_ErrorCallback>
          return;
9000b8b2:	e7cd      	b.n	9000b850 <JPEG_MDMAOutCpltCallback+0x1c>

9000b8b4 <JPEG_MDMAOutAbortCallback>:
{
9000b8b4:	b538      	push	{r3, r4, r5, lr}
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((MDMA_HandleTypeDef *)hmdma)->Parent;
9000b8b6:	6c04      	ldr	r4, [r0, #64]	; 0x40
  if ((hjpeg->Context & JPEG_CONTEXT_ENDING_DMA) != 0UL)
9000b8b8:	6d63      	ldr	r3, [r4, #84]	; 0x54
9000b8ba:	041a      	lsls	r2, r3, #16
9000b8bc:	d400      	bmi.n	9000b8c0 <JPEG_MDMAOutAbortCallback+0xc>
}
9000b8be:	bd38      	pop	{r3, r4, r5, pc}
  hjpeg->JpegOutCount = hjpeg->OutDataLength - (hjpeg->hdmaout->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
9000b8c0:	6b63      	ldr	r3, [r4, #52]	; 0x34
9000b8c2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
9000b8c4:	681b      	ldr	r3, [r3, #0]
9000b8c6:	695b      	ldr	r3, [r3, #20]
9000b8c8:	f3c3 0310 	ubfx	r3, r3, #0, #17
9000b8cc:	1ad3      	subs	r3, r2, r3
9000b8ce:	6263      	str	r3, [r4, #36]	; 0x24
  if (hjpeg->JpegOutCount == hjpeg->OutDataLength)
9000b8d0:	6a63      	ldr	r3, [r4, #36]	; 0x24
9000b8d2:	429a      	cmp	r2, r3
9000b8d4:	d025      	beq.n	9000b922 <JPEG_MDMAOutAbortCallback+0x6e>
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) == 0UL)
9000b8d6:	6822      	ldr	r2, [r4, #0]
9000b8d8:	6b55      	ldr	r5, [r2, #52]	; 0x34
9000b8da:	f015 0510 	ands.w	r5, r5, #16
9000b8de:	d118      	bne.n	9000b912 <JPEG_MDMAOutAbortCallback+0x5e>
    if (hjpeg->JpegOutCount > 0UL)
9000b8e0:	6a63      	ldr	r3, [r4, #36]	; 0x24
9000b8e2:	bb4b      	cbnz	r3, 9000b938 <JPEG_MDMAOutAbortCallback+0x84>
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
9000b8e4:	6813      	ldr	r3, [r2, #0]
    __HAL_UNLOCK(hjpeg);
9000b8e6:	2000      	movs	r0, #0
    hjpeg->State = HAL_JPEG_STATE_READY;
9000b8e8:	2101      	movs	r1, #1
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
9000b8ea:	f023 0301 	bic.w	r3, r3, #1
9000b8ee:	6013      	str	r3, [r2, #0]
    tmpContext = hjpeg->Context;
9000b8f0:	6d63      	ldr	r3, [r4, #84]	; 0x54
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
9000b8f2:	6d62      	ldr	r2, [r4, #84]	; 0x54
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
9000b8f4:	f003 0303 	and.w	r3, r3, #3
    __HAL_UNLOCK(hjpeg);
9000b8f8:	f884 004c 	strb.w	r0, [r4, #76]	; 0x4c
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
9000b8fc:	f402 4282 	and.w	r2, r2, #16640	; 0x4100
      HAL_JPEG_DecodeCpltCallback(hjpeg);
9000b900:	4620      	mov	r0, r4
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
9000b902:	2b02      	cmp	r3, #2
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
9000b904:	6562      	str	r2, [r4, #84]	; 0x54
    hjpeg->State = HAL_JPEG_STATE_READY;
9000b906:	f884 104d 	strb.w	r1, [r4, #77]	; 0x4d
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
9000b90a:	d012      	beq.n	9000b932 <JPEG_MDMAOutAbortCallback+0x7e>
      HAL_JPEG_EncodeCpltCallback(hjpeg);
9000b90c:	f7ff fe54 	bl	9000b5b8 <HAL_JPEG_EncodeCpltCallback>
}
9000b910:	bd38      	pop	{r3, r4, r5, pc}
  else if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
9000b912:	6d63      	ldr	r3, [r4, #84]	; 0x54
9000b914:	049b      	lsls	r3, r3, #18
9000b916:	d4d2      	bmi.n	9000b8be <JPEG_MDMAOutAbortCallback+0xa>
    JPEG_DMA_PollResidualData(hjpeg);
9000b918:	4620      	mov	r0, r4
}
9000b91a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    JPEG_DMA_PollResidualData(hjpeg);
9000b91e:	f7ff beb7 	b.w	9000b690 <JPEG_DMA_PollResidualData>
    HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
9000b922:	6a62      	ldr	r2, [r4, #36]	; 0x24
9000b924:	4620      	mov	r0, r4
9000b926:	69e1      	ldr	r1, [r4, #28]
9000b928:	f7f5 ff50 	bl	900017cc <HAL_JPEG_DataReadyCallback>
    hjpeg->JpegOutCount = 0;
9000b92c:	2300      	movs	r3, #0
9000b92e:	6263      	str	r3, [r4, #36]	; 0x24
9000b930:	e7d1      	b.n	9000b8d6 <JPEG_MDMAOutAbortCallback+0x22>
      HAL_JPEG_DecodeCpltCallback(hjpeg);
9000b932:	f7f5 ff95 	bl	90001860 <HAL_JPEG_DecodeCpltCallback>
}
9000b936:	bd38      	pop	{r3, r4, r5, pc}
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
9000b938:	6a62      	ldr	r2, [r4, #36]	; 0x24
9000b93a:	4620      	mov	r0, r4
9000b93c:	69e1      	ldr	r1, [r4, #28]
9000b93e:	f7f5 ff45 	bl	900017cc <HAL_JPEG_DataReadyCallback>
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
9000b942:	6822      	ldr	r2, [r4, #0]
      hjpeg->JpegOutCount = 0;
9000b944:	6265      	str	r5, [r4, #36]	; 0x24
9000b946:	e7cd      	b.n	9000b8e4 <JPEG_MDMAOutAbortCallback+0x30>

9000b948 <JPEG_Process>:
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
9000b948:	6d43      	ldr	r3, [r0, #84]	; 0x54
9000b94a:	f003 0303 	and.w	r3, r3, #3
9000b94e:	2b02      	cmp	r3, #2
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_HPDF) != 0UL)
9000b950:	6803      	ldr	r3, [r0, #0]
{
9000b952:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
9000b956:	4604      	mov	r4, r0
9000b958:	b082      	sub	sp, #8
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
9000b95a:	d01f      	beq.n	9000b99c <JPEG_Process+0x54>
  if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL)
9000b95c:	6d62      	ldr	r2, [r4, #84]	; 0x54
9000b95e:	04d7      	lsls	r7, r2, #19
9000b960:	d407      	bmi.n	9000b972 <JPEG_Process+0x2a>
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_IFTF) != 0UL)
9000b962:	6b5a      	ldr	r2, [r3, #52]	; 0x34
9000b964:	0796      	lsls	r6, r2, #30
9000b966:	f100 811d 	bmi.w	9000bba4 <JPEG_Process+0x25c>
    else if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_IFNFF) != 0UL)
9000b96a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
9000b96c:	0750      	lsls	r0, r2, #29
9000b96e:	f100 81b1 	bmi.w	9000bcd4 <JPEG_Process+0x38c>
  if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
9000b972:	6d65      	ldr	r5, [r4, #84]	; 0x54
9000b974:	f415 5500 	ands.w	r5, r5, #8192	; 0x2000
9000b978:	d107      	bne.n	9000b98a <JPEG_Process+0x42>
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFTF) != 0UL)
9000b97a:	6b5e      	ldr	r6, [r3, #52]	; 0x34
9000b97c:	f016 0608 	ands.w	r6, r6, #8
9000b980:	d14c      	bne.n	9000ba1c <JPEG_Process+0xd4>
    else if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) != 0UL)
9000b982:	6b5a      	ldr	r2, [r3, #52]	; 0x34
9000b984:	06d2      	lsls	r2, r2, #27
9000b986:	f100 81e3 	bmi.w	9000bd50 <JPEG_Process+0x408>
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF | JPEG_FLAG_OFTF | JPEG_FLAG_OFNEF) == JPEG_FLAG_EOCF)
9000b98a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
9000b98c:	f002 0238 	and.w	r2, r2, #56	; 0x38
9000b990:	2a20      	cmp	r2, #32
9000b992:	d01a      	beq.n	9000b9ca <JPEG_Process+0x82>
  return JPEG_PROCESS_ONGOING;
9000b994:	2000      	movs	r0, #0
}
9000b996:	b002      	add	sp, #8
9000b998:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_HPDF) != 0UL)
9000b99c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
9000b99e:	0652      	lsls	r2, r2, #25
9000b9a0:	d5dc      	bpl.n	9000b95c <JPEG_Process+0x14>
      (void) HAL_JPEG_GetInfo(hjpeg, &hjpeg->Conf);
9000b9a2:	1d01      	adds	r1, r0, #4
  if ((hjpeg == NULL) || (pInfo == NULL))
9000b9a4:	9101      	str	r1, [sp, #4]
9000b9a6:	f7ff fb79 	bl	9000b09c <HAL_JPEG_GetInfo.part.0>
      hjpeg->Conf.ImageQuality = 0;
9000b9aa:	2300      	movs	r3, #0
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
9000b9ac:	9901      	ldr	r1, [sp, #4]
9000b9ae:	4620      	mov	r0, r4
      hjpeg->Conf.ImageQuality = 0;
9000b9b0:	6163      	str	r3, [r4, #20]
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
9000b9b2:	f7f5 fe99 	bl	900016e8 <HAL_JPEG_InfoReadyCallback>
      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_IT_HPD);
9000b9b6:	6823      	ldr	r3, [r4, #0]
9000b9b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
9000b9ba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
9000b9be:	631a      	str	r2, [r3, #48]	; 0x30
      __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_HPDF);
9000b9c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
9000b9c2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
9000b9c6:	639a      	str	r2, [r3, #56]	; 0x38
9000b9c8:	e7c8      	b.n	9000b95c <JPEG_Process+0x14>
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
9000b9ca:	681a      	ldr	r2, [r3, #0]
9000b9cc:	f022 0201 	bic.w	r2, r2, #1
9000b9d0:	601a      	str	r2, [r3, #0]
    if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
9000b9d2:	6d62      	ldr	r2, [r4, #84]	; 0x54
9000b9d4:	f002 020c 	and.w	r2, r2, #12
9000b9d8:	2a08      	cmp	r2, #8
9000b9da:	f000 81e6 	beq.w	9000bdaa <JPEG_Process+0x462>
    __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
9000b9de:	6b9a      	ldr	r2, [r3, #56]	; 0x38
9000b9e0:	f042 0260 	orr.w	r2, r2, #96	; 0x60
9000b9e4:	639a      	str	r2, [r3, #56]	; 0x38
    if (hjpeg->JpegOutCount > 0UL)
9000b9e6:	6a63      	ldr	r3, [r4, #36]	; 0x24
9000b9e8:	2b00      	cmp	r3, #0
9000b9ea:	f040 81e3 	bne.w	9000bdb4 <JPEG_Process+0x46c>
    tmpContext = hjpeg->Context;
9000b9ee:	6d63      	ldr	r3, [r4, #84]	; 0x54
    __HAL_UNLOCK(hjpeg);
9000b9f0:	2100      	movs	r1, #0
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
9000b9f2:	6d62      	ldr	r2, [r4, #84]	; 0x54
    hjpeg->State = HAL_JPEG_STATE_READY;
9000b9f4:	2501      	movs	r5, #1
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
9000b9f6:	f003 0303 	and.w	r3, r3, #3
      HAL_JPEG_DecodeCpltCallback(hjpeg);
9000b9fa:	4620      	mov	r0, r4
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
9000b9fc:	f402 4282 	and.w	r2, r2, #16640	; 0x4100
    __HAL_UNLOCK(hjpeg);
9000ba00:	f884 104c 	strb.w	r1, [r4, #76]	; 0x4c
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
9000ba04:	2b02      	cmp	r3, #2
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
9000ba06:	6562      	str	r2, [r4, #84]	; 0x54
    hjpeg->State = HAL_JPEG_STATE_READY;
9000ba08:	f884 504d 	strb.w	r5, [r4, #77]	; 0x4d
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
9000ba0c:	f000 81c9 	beq.w	9000bda2 <JPEG_Process+0x45a>
      HAL_JPEG_EncodeCpltCallback(hjpeg);
9000ba10:	f7ff fdd2 	bl	9000b5b8 <HAL_JPEG_EncodeCpltCallback>
    return JPEG_PROCESS_DONE;
9000ba14:	4628      	mov	r0, r5
}
9000ba16:	b002      	add	sp, #8
9000ba18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (hjpeg->OutDataLength >= (hjpeg->JpegOutCount + (nbOutputWords * 4UL)))
9000ba1c:	6a62      	ldr	r2, [r4, #36]	; 0x24
9000ba1e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
9000ba20:	3220      	adds	r2, #32
9000ba22:	4296      	cmp	r6, r2
9000ba24:	f0c0 81e4 	bcc.w	9000bdf0 <JPEG_Process+0x4a8>
      dataword = hjpeg->Instance->DOR;
9000ba28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
9000ba2a:	69e1      	ldr	r1, [r4, #28]
9000ba2c:	6a62      	ldr	r2, [r4, #36]	; 0x24
9000ba2e:	548b      	strb	r3, [r1, r2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
9000ba30:	6a61      	ldr	r1, [r4, #36]	; 0x24
9000ba32:	69e2      	ldr	r2, [r4, #28]
9000ba34:	440a      	add	r2, r1
9000ba36:	0a19      	lsrs	r1, r3, #8
9000ba38:	7051      	strb	r1, [r2, #1]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
9000ba3a:	6a61      	ldr	r1, [r4, #36]	; 0x24
9000ba3c:	69e2      	ldr	r2, [r4, #28]
9000ba3e:	440a      	add	r2, r1
9000ba40:	0c19      	lsrs	r1, r3, #16
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
9000ba42:	0e1b      	lsrs	r3, r3, #24
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
9000ba44:	7091      	strb	r1, [r2, #2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
9000ba46:	6a61      	ldr	r1, [r4, #36]	; 0x24
9000ba48:	69e2      	ldr	r2, [r4, #28]
9000ba4a:	440a      	add	r2, r1
9000ba4c:	70d3      	strb	r3, [r2, #3]
      hjpeg->JpegOutCount += 4UL;
9000ba4e:	6a63      	ldr	r3, [r4, #36]	; 0x24
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF | JPEG_FLAG_OFTF | JPEG_FLAG_OFNEF) == JPEG_FLAG_EOCF)
9000ba50:	6822      	ldr	r2, [r4, #0]
      hjpeg->JpegOutCount += 4UL;
9000ba52:	3304      	adds	r3, #4
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
9000ba54:	69e1      	ldr	r1, [r4, #28]
      hjpeg->JpegOutCount += 4UL;
9000ba56:	6263      	str	r3, [r4, #36]	; 0x24
      dataword = hjpeg->Instance->DOR;
9000ba58:	6c53      	ldr	r3, [r2, #68]	; 0x44
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
9000ba5a:	6a62      	ldr	r2, [r4, #36]	; 0x24
9000ba5c:	548b      	strb	r3, [r1, r2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
9000ba5e:	6a61      	ldr	r1, [r4, #36]	; 0x24
9000ba60:	69e2      	ldr	r2, [r4, #28]
9000ba62:	440a      	add	r2, r1
9000ba64:	0a19      	lsrs	r1, r3, #8
9000ba66:	7051      	strb	r1, [r2, #1]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
9000ba68:	6a61      	ldr	r1, [r4, #36]	; 0x24
9000ba6a:	69e2      	ldr	r2, [r4, #28]
9000ba6c:	440a      	add	r2, r1
9000ba6e:	0c19      	lsrs	r1, r3, #16
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
9000ba70:	0e1b      	lsrs	r3, r3, #24
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
9000ba72:	7091      	strb	r1, [r2, #2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
9000ba74:	6a61      	ldr	r1, [r4, #36]	; 0x24
9000ba76:	69e2      	ldr	r2, [r4, #28]
9000ba78:	440a      	add	r2, r1
9000ba7a:	70d3      	strb	r3, [r2, #3]
      hjpeg->JpegOutCount += 4UL;
9000ba7c:	6a63      	ldr	r3, [r4, #36]	; 0x24
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF | JPEG_FLAG_OFTF | JPEG_FLAG_OFNEF) == JPEG_FLAG_EOCF)
9000ba7e:	6822      	ldr	r2, [r4, #0]
      hjpeg->JpegOutCount += 4UL;
9000ba80:	3304      	adds	r3, #4
9000ba82:	6263      	str	r3, [r4, #36]	; 0x24
      dataword = hjpeg->Instance->DOR;
9000ba84:	6c53      	ldr	r3, [r2, #68]	; 0x44
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
9000ba86:	6a62      	ldr	r2, [r4, #36]	; 0x24
9000ba88:	69e1      	ldr	r1, [r4, #28]
9000ba8a:	548b      	strb	r3, [r1, r2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
9000ba8c:	6a61      	ldr	r1, [r4, #36]	; 0x24
9000ba8e:	69e2      	ldr	r2, [r4, #28]
9000ba90:	440a      	add	r2, r1
9000ba92:	0a19      	lsrs	r1, r3, #8
9000ba94:	7051      	strb	r1, [r2, #1]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
9000ba96:	6a61      	ldr	r1, [r4, #36]	; 0x24
9000ba98:	69e2      	ldr	r2, [r4, #28]
9000ba9a:	440a      	add	r2, r1
9000ba9c:	0c19      	lsrs	r1, r3, #16
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
9000ba9e:	0e1b      	lsrs	r3, r3, #24
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
9000baa0:	7091      	strb	r1, [r2, #2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
9000baa2:	6a61      	ldr	r1, [r4, #36]	; 0x24
9000baa4:	69e2      	ldr	r2, [r4, #28]
9000baa6:	440a      	add	r2, r1
9000baa8:	70d3      	strb	r3, [r2, #3]
      hjpeg->JpegOutCount += 4UL;
9000baaa:	6a63      	ldr	r3, [r4, #36]	; 0x24
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF | JPEG_FLAG_OFTF | JPEG_FLAG_OFNEF) == JPEG_FLAG_EOCF)
9000baac:	6822      	ldr	r2, [r4, #0]
      hjpeg->JpegOutCount += 4UL;
9000baae:	3304      	adds	r3, #4
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
9000bab0:	69e1      	ldr	r1, [r4, #28]
      hjpeg->JpegOutCount += 4UL;
9000bab2:	6263      	str	r3, [r4, #36]	; 0x24
      dataword = hjpeg->Instance->DOR;
9000bab4:	6c53      	ldr	r3, [r2, #68]	; 0x44
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
9000bab6:	6a62      	ldr	r2, [r4, #36]	; 0x24
9000bab8:	548b      	strb	r3, [r1, r2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
9000baba:	6a61      	ldr	r1, [r4, #36]	; 0x24
9000babc:	69e2      	ldr	r2, [r4, #28]
9000babe:	440a      	add	r2, r1
9000bac0:	0a19      	lsrs	r1, r3, #8
9000bac2:	7051      	strb	r1, [r2, #1]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
9000bac4:	6a61      	ldr	r1, [r4, #36]	; 0x24
9000bac6:	69e2      	ldr	r2, [r4, #28]
9000bac8:	440a      	add	r2, r1
9000baca:	0c19      	lsrs	r1, r3, #16
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
9000bacc:	0e1b      	lsrs	r3, r3, #24
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
9000bace:	7091      	strb	r1, [r2, #2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
9000bad0:	6a61      	ldr	r1, [r4, #36]	; 0x24
9000bad2:	69e2      	ldr	r2, [r4, #28]
9000bad4:	440a      	add	r2, r1
9000bad6:	70d3      	strb	r3, [r2, #3]
      hjpeg->JpegOutCount += 4UL;
9000bad8:	6a63      	ldr	r3, [r4, #36]	; 0x24
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF | JPEG_FLAG_OFTF | JPEG_FLAG_OFNEF) == JPEG_FLAG_EOCF)
9000bada:	6822      	ldr	r2, [r4, #0]
      hjpeg->JpegOutCount += 4UL;
9000badc:	3304      	adds	r3, #4
9000bade:	6263      	str	r3, [r4, #36]	; 0x24
      dataword = hjpeg->Instance->DOR;
9000bae0:	6c53      	ldr	r3, [r2, #68]	; 0x44
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
9000bae2:	6a62      	ldr	r2, [r4, #36]	; 0x24
9000bae4:	69e1      	ldr	r1, [r4, #28]
9000bae6:	548b      	strb	r3, [r1, r2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
9000bae8:	6a61      	ldr	r1, [r4, #36]	; 0x24
9000baea:	69e2      	ldr	r2, [r4, #28]
9000baec:	440a      	add	r2, r1
9000baee:	0a19      	lsrs	r1, r3, #8
9000baf0:	7051      	strb	r1, [r2, #1]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
9000baf2:	6a61      	ldr	r1, [r4, #36]	; 0x24
9000baf4:	69e2      	ldr	r2, [r4, #28]
9000baf6:	440a      	add	r2, r1
9000baf8:	0c19      	lsrs	r1, r3, #16
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
9000bafa:	0e1b      	lsrs	r3, r3, #24
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
9000bafc:	7091      	strb	r1, [r2, #2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
9000bafe:	6a61      	ldr	r1, [r4, #36]	; 0x24
9000bb00:	69e2      	ldr	r2, [r4, #28]
9000bb02:	440a      	add	r2, r1
9000bb04:	70d3      	strb	r3, [r2, #3]
      hjpeg->JpegOutCount += 4UL;
9000bb06:	6a63      	ldr	r3, [r4, #36]	; 0x24
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF | JPEG_FLAG_OFTF | JPEG_FLAG_OFNEF) == JPEG_FLAG_EOCF)
9000bb08:	6822      	ldr	r2, [r4, #0]
      hjpeg->JpegOutCount += 4UL;
9000bb0a:	3304      	adds	r3, #4
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
9000bb0c:	69e1      	ldr	r1, [r4, #28]
      hjpeg->JpegOutCount += 4UL;
9000bb0e:	6263      	str	r3, [r4, #36]	; 0x24
      dataword = hjpeg->Instance->DOR;
9000bb10:	6c53      	ldr	r3, [r2, #68]	; 0x44
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
9000bb12:	6a62      	ldr	r2, [r4, #36]	; 0x24
9000bb14:	548b      	strb	r3, [r1, r2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
9000bb16:	6a61      	ldr	r1, [r4, #36]	; 0x24
9000bb18:	69e2      	ldr	r2, [r4, #28]
9000bb1a:	440a      	add	r2, r1
9000bb1c:	0a19      	lsrs	r1, r3, #8
9000bb1e:	7051      	strb	r1, [r2, #1]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
9000bb20:	6a61      	ldr	r1, [r4, #36]	; 0x24
9000bb22:	69e2      	ldr	r2, [r4, #28]
9000bb24:	440a      	add	r2, r1
9000bb26:	0c19      	lsrs	r1, r3, #16
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
9000bb28:	0e1b      	lsrs	r3, r3, #24
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
9000bb2a:	7091      	strb	r1, [r2, #2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
9000bb2c:	6a61      	ldr	r1, [r4, #36]	; 0x24
9000bb2e:	69e2      	ldr	r2, [r4, #28]
9000bb30:	440a      	add	r2, r1
9000bb32:	70d3      	strb	r3, [r2, #3]
      hjpeg->JpegOutCount += 4UL;
9000bb34:	6a63      	ldr	r3, [r4, #36]	; 0x24
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF | JPEG_FLAG_OFTF | JPEG_FLAG_OFNEF) == JPEG_FLAG_EOCF)
9000bb36:	6822      	ldr	r2, [r4, #0]
      hjpeg->JpegOutCount += 4UL;
9000bb38:	3304      	adds	r3, #4
9000bb3a:	6263      	str	r3, [r4, #36]	; 0x24
      dataword = hjpeg->Instance->DOR;
9000bb3c:	6c53      	ldr	r3, [r2, #68]	; 0x44
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
9000bb3e:	6a62      	ldr	r2, [r4, #36]	; 0x24
9000bb40:	69e1      	ldr	r1, [r4, #28]
9000bb42:	548b      	strb	r3, [r1, r2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
9000bb44:	6a61      	ldr	r1, [r4, #36]	; 0x24
9000bb46:	69e2      	ldr	r2, [r4, #28]
9000bb48:	440a      	add	r2, r1
9000bb4a:	0a19      	lsrs	r1, r3, #8
9000bb4c:	7051      	strb	r1, [r2, #1]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
9000bb4e:	6a61      	ldr	r1, [r4, #36]	; 0x24
9000bb50:	69e2      	ldr	r2, [r4, #28]
9000bb52:	440a      	add	r2, r1
9000bb54:	0c19      	lsrs	r1, r3, #16
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
9000bb56:	0e1b      	lsrs	r3, r3, #24
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
9000bb58:	7091      	strb	r1, [r2, #2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
9000bb5a:	6a61      	ldr	r1, [r4, #36]	; 0x24
9000bb5c:	69e2      	ldr	r2, [r4, #28]
9000bb5e:	440a      	add	r2, r1
9000bb60:	70d3      	strb	r3, [r2, #3]
      hjpeg->JpegOutCount += 4UL;
9000bb62:	6a63      	ldr	r3, [r4, #36]	; 0x24
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF | JPEG_FLAG_OFTF | JPEG_FLAG_OFNEF) == JPEG_FLAG_EOCF)
9000bb64:	6822      	ldr	r2, [r4, #0]
      hjpeg->JpegOutCount += 4UL;
9000bb66:	3304      	adds	r3, #4
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
9000bb68:	69e1      	ldr	r1, [r4, #28]
      hjpeg->JpegOutCount += 4UL;
9000bb6a:	6263      	str	r3, [r4, #36]	; 0x24
      dataword = hjpeg->Instance->DOR;
9000bb6c:	6c53      	ldr	r3, [r2, #68]	; 0x44
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
9000bb6e:	6a62      	ldr	r2, [r4, #36]	; 0x24
9000bb70:	548b      	strb	r3, [r1, r2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
9000bb72:	6a61      	ldr	r1, [r4, #36]	; 0x24
9000bb74:	69e2      	ldr	r2, [r4, #28]
9000bb76:	440a      	add	r2, r1
9000bb78:	0a19      	lsrs	r1, r3, #8
9000bb7a:	7051      	strb	r1, [r2, #1]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
9000bb7c:	6a61      	ldr	r1, [r4, #36]	; 0x24
9000bb7e:	69e2      	ldr	r2, [r4, #28]
9000bb80:	440a      	add	r2, r1
9000bb82:	0c19      	lsrs	r1, r3, #16
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
9000bb84:	0e1b      	lsrs	r3, r3, #24
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
9000bb86:	7091      	strb	r1, [r2, #2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
9000bb88:	6a61      	ldr	r1, [r4, #36]	; 0x24
9000bb8a:	69e2      	ldr	r2, [r4, #28]
9000bb8c:	440a      	add	r2, r1
9000bb8e:	70d3      	strb	r3, [r2, #3]
      hjpeg->JpegOutCount += 4UL;
9000bb90:	6a63      	ldr	r3, [r4, #36]	; 0x24
9000bb92:	3304      	adds	r3, #4
9000bb94:	6263      	str	r3, [r4, #36]	; 0x24
    if (hjpeg->OutDataLength == hjpeg->JpegOutCount)
9000bb96:	6a63      	ldr	r3, [r4, #36]	; 0x24
9000bb98:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
9000bb9a:	429a      	cmp	r2, r3
9000bb9c:	f000 82ae 	beq.w	9000c0fc <JPEG_Process+0x7b4>
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF | JPEG_FLAG_OFTF | JPEG_FLAG_OFNEF) == JPEG_FLAG_EOCF)
9000bba0:	6823      	ldr	r3, [r4, #0]
9000bba2:	e6f2      	b.n	9000b98a <JPEG_Process+0x42>
  if ((hjpeg->InDataLength == 0UL) || (nbRequestWords == 0UL))
9000bba4:	6aa2      	ldr	r2, [r4, #40]	; 0x28
9000bba6:	2a00      	cmp	r2, #0
9000bba8:	f000 810c 	beq.w	9000bdc4 <JPEG_Process+0x47c>
  else if (hjpeg->InDataLength > hjpeg->JpegInCount)
9000bbac:	6a21      	ldr	r1, [r4, #32]
9000bbae:	428a      	cmp	r2, r1
    nb_bytes = hjpeg->InDataLength - hjpeg->JpegInCount;
9000bbb0:	6a21      	ldr	r1, [r4, #32]
  else if (hjpeg->InDataLength > hjpeg->JpegInCount)
9000bbb2:	f240 81a4 	bls.w	9000befe <JPEG_Process+0x5b6>
    nb_bytes = hjpeg->InDataLength - hjpeg->JpegInCount;
9000bbb6:	1a52      	subs	r2, r2, r1
  if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (nb_bytes > 0UL))
9000bbb8:	6d61      	ldr	r1, [r4, #84]	; 0x54
9000bbba:	04cd      	lsls	r5, r1, #19
9000bbbc:	f53f aed9 	bmi.w	9000b972 <JPEG_Process+0x2a>
9000bbc0:	2a00      	cmp	r2, #0
9000bbc2:	f43f aed6 	beq.w	9000b972 <JPEG_Process+0x2a>
    if (nb_words >= nbRequestWords)
9000bbc6:	2a1f      	cmp	r2, #31
    nb_words = nb_bytes / 4UL;
9000bbc8:	ea4f 0192 	mov.w	r1, r2, lsr #2
    if (nb_words >= nbRequestWords)
9000bbcc:	f240 8203 	bls.w	9000bfd6 <JPEG_Process+0x68e>
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
9000bbd0:	69a2      	ldr	r2, [r4, #24]
        input_count = hjpeg->JpegInCount;
9000bbd2:	6a21      	ldr	r1, [r4, #32]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
9000bbd4:	1850      	adds	r0, r2, r1
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
9000bbd6:	5c55      	ldrb	r5, [r2, r1]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
9000bbd8:	7881      	ldrb	r1, [r0, #2]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
9000bbda:	7846      	ldrb	r6, [r0, #1]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
9000bbdc:	0409      	lsls	r1, r1, #16
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
9000bbde:	78c0      	ldrb	r0, [r0, #3]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
9000bbe0:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
9000bbe4:	4329      	orrs	r1, r5
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
9000bbe6:	ea41 6100 	orr.w	r1, r1, r0, lsl #24
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
9000bbea:	6419      	str	r1, [r3, #64]	; 0x40
        hjpeg->JpegInCount += 4UL;
9000bbec:	6a21      	ldr	r1, [r4, #32]
9000bbee:	3104      	adds	r1, #4
9000bbf0:	6221      	str	r1, [r4, #32]
        input_count = hjpeg->JpegInCount;
9000bbf2:	6a21      	ldr	r1, [r4, #32]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
9000bbf4:	1850      	adds	r0, r2, r1
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
9000bbf6:	5c55      	ldrb	r5, [r2, r1]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
9000bbf8:	7881      	ldrb	r1, [r0, #2]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
9000bbfa:	7846      	ldrb	r6, [r0, #1]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
9000bbfc:	0409      	lsls	r1, r1, #16
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
9000bbfe:	78c0      	ldrb	r0, [r0, #3]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
9000bc00:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
9000bc04:	4329      	orrs	r1, r5
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
9000bc06:	ea41 6100 	orr.w	r1, r1, r0, lsl #24
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
9000bc0a:	6419      	str	r1, [r3, #64]	; 0x40
        hjpeg->JpegInCount += 4UL;
9000bc0c:	6a21      	ldr	r1, [r4, #32]
9000bc0e:	3104      	adds	r1, #4
9000bc10:	6221      	str	r1, [r4, #32]
        input_count = hjpeg->JpegInCount;
9000bc12:	6a21      	ldr	r1, [r4, #32]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
9000bc14:	1850      	adds	r0, r2, r1
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
9000bc16:	5c55      	ldrb	r5, [r2, r1]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
9000bc18:	7881      	ldrb	r1, [r0, #2]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
9000bc1a:	7846      	ldrb	r6, [r0, #1]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
9000bc1c:	0409      	lsls	r1, r1, #16
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
9000bc1e:	78c0      	ldrb	r0, [r0, #3]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
9000bc20:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
9000bc24:	4329      	orrs	r1, r5
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
9000bc26:	ea41 6100 	orr.w	r1, r1, r0, lsl #24
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
9000bc2a:	6419      	str	r1, [r3, #64]	; 0x40
        hjpeg->JpegInCount += 4UL;
9000bc2c:	6a21      	ldr	r1, [r4, #32]
9000bc2e:	3104      	adds	r1, #4
9000bc30:	6221      	str	r1, [r4, #32]
        input_count = hjpeg->JpegInCount;
9000bc32:	6a21      	ldr	r1, [r4, #32]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
9000bc34:	1850      	adds	r0, r2, r1
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
9000bc36:	5c55      	ldrb	r5, [r2, r1]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
9000bc38:	7881      	ldrb	r1, [r0, #2]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
9000bc3a:	7846      	ldrb	r6, [r0, #1]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
9000bc3c:	0409      	lsls	r1, r1, #16
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
9000bc3e:	78c0      	ldrb	r0, [r0, #3]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
9000bc40:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
9000bc44:	4329      	orrs	r1, r5
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
9000bc46:	ea41 6100 	orr.w	r1, r1, r0, lsl #24
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
9000bc4a:	6419      	str	r1, [r3, #64]	; 0x40
        hjpeg->JpegInCount += 4UL;
9000bc4c:	6a21      	ldr	r1, [r4, #32]
9000bc4e:	3104      	adds	r1, #4
9000bc50:	6221      	str	r1, [r4, #32]
        input_count = hjpeg->JpegInCount;
9000bc52:	6a21      	ldr	r1, [r4, #32]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
9000bc54:	1850      	adds	r0, r2, r1
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
9000bc56:	5c55      	ldrb	r5, [r2, r1]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
9000bc58:	7881      	ldrb	r1, [r0, #2]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
9000bc5a:	7846      	ldrb	r6, [r0, #1]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
9000bc5c:	0409      	lsls	r1, r1, #16
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
9000bc5e:	78c0      	ldrb	r0, [r0, #3]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
9000bc60:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
9000bc64:	4329      	orrs	r1, r5
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
9000bc66:	ea41 6100 	orr.w	r1, r1, r0, lsl #24
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
9000bc6a:	6419      	str	r1, [r3, #64]	; 0x40
        hjpeg->JpegInCount += 4UL;
9000bc6c:	6a21      	ldr	r1, [r4, #32]
9000bc6e:	3104      	adds	r1, #4
9000bc70:	6221      	str	r1, [r4, #32]
        input_count = hjpeg->JpegInCount;
9000bc72:	6a21      	ldr	r1, [r4, #32]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
9000bc74:	1850      	adds	r0, r2, r1
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
9000bc76:	5c55      	ldrb	r5, [r2, r1]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
9000bc78:	7881      	ldrb	r1, [r0, #2]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
9000bc7a:	7846      	ldrb	r6, [r0, #1]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
9000bc7c:	0409      	lsls	r1, r1, #16
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
9000bc7e:	78c0      	ldrb	r0, [r0, #3]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
9000bc80:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
9000bc84:	4329      	orrs	r1, r5
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
9000bc86:	ea41 6100 	orr.w	r1, r1, r0, lsl #24
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
9000bc8a:	6419      	str	r1, [r3, #64]	; 0x40
        hjpeg->JpegInCount += 4UL;
9000bc8c:	6a21      	ldr	r1, [r4, #32]
9000bc8e:	3104      	adds	r1, #4
9000bc90:	6221      	str	r1, [r4, #32]
        input_count = hjpeg->JpegInCount;
9000bc92:	6a21      	ldr	r1, [r4, #32]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
9000bc94:	1850      	adds	r0, r2, r1
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
9000bc96:	5c55      	ldrb	r5, [r2, r1]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
9000bc98:	7881      	ldrb	r1, [r0, #2]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
9000bc9a:	7846      	ldrb	r6, [r0, #1]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
9000bc9c:	0409      	lsls	r1, r1, #16
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
9000bc9e:	78c0      	ldrb	r0, [r0, #3]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
9000bca0:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
9000bca4:	4329      	orrs	r1, r5
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
9000bca6:	ea41 6100 	orr.w	r1, r1, r0, lsl #24
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
9000bcaa:	6419      	str	r1, [r3, #64]	; 0x40
        hjpeg->JpegInCount += 4UL;
9000bcac:	6a21      	ldr	r1, [r4, #32]
9000bcae:	3104      	adds	r1, #4
9000bcb0:	6221      	str	r1, [r4, #32]
        input_count = hjpeg->JpegInCount;
9000bcb2:	6a20      	ldr	r0, [r4, #32]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
9000bcb4:	1881      	adds	r1, r0, r2
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
9000bcb6:	5c85      	ldrb	r5, [r0, r2]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
9000bcb8:	788a      	ldrb	r2, [r1, #2]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
9000bcba:	78c8      	ldrb	r0, [r1, #3]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
9000bcbc:	0412      	lsls	r2, r2, #16
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
9000bcbe:	7849      	ldrb	r1, [r1, #1]
9000bcc0:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
9000bcc4:	432a      	orrs	r2, r5
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
9000bcc6:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
9000bcca:	641a      	str	r2, [r3, #64]	; 0x40
        hjpeg->JpegInCount += 4UL;
9000bccc:	6a22      	ldr	r2, [r4, #32]
9000bcce:	3204      	adds	r2, #4
9000bcd0:	6222      	str	r2, [r4, #32]
      for (index = 0; index < nbRequestWords; index++)
9000bcd2:	e64e      	b.n	9000b972 <JPEG_Process+0x2a>
  if ((hjpeg->InDataLength == 0UL) || (nbRequestWords == 0UL))
9000bcd4:	6aa2      	ldr	r2, [r4, #40]	; 0x28
9000bcd6:	2a00      	cmp	r2, #0
9000bcd8:	d074      	beq.n	9000bdc4 <JPEG_Process+0x47c>
  else if (hjpeg->InDataLength > hjpeg->JpegInCount)
9000bcda:	6a21      	ldr	r1, [r4, #32]
9000bcdc:	428a      	cmp	r2, r1
    nb_bytes = hjpeg->InDataLength - hjpeg->JpegInCount;
9000bcde:	6a21      	ldr	r1, [r4, #32]
  else if (hjpeg->InDataLength > hjpeg->JpegInCount)
9000bce0:	f200 8164 	bhi.w	9000bfac <JPEG_Process+0x664>
  else if (hjpeg->InDataLength == hjpeg->JpegInCount)
9000bce4:	428a      	cmp	r2, r1
9000bce6:	f040 810c 	bne.w	9000bf02 <JPEG_Process+0x5ba>
    HAL_JPEG_GetDataCallback(hjpeg, hjpeg->JpegInCount);
9000bcea:	6a21      	ldr	r1, [r4, #32]
9000bcec:	4620      	mov	r0, r4
9000bcee:	f7f5 fd4d 	bl	9000178c <HAL_JPEG_GetDataCallback>
    if (hjpeg->InDataLength > 4UL)
9000bcf2:	6aa2      	ldr	r2, [r4, #40]	; 0x28
9000bcf4:	2a04      	cmp	r2, #4
9000bcf6:	d902      	bls.n	9000bcfe <JPEG_Process+0x3b6>
      hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % 4UL);
9000bcf8:	f022 0203 	bic.w	r2, r2, #3
9000bcfc:	62a2      	str	r2, [r4, #40]	; 0x28
    hjpeg->JpegInCount = 0;
9000bcfe:	2100      	movs	r1, #0
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
9000bd00:	6823      	ldr	r3, [r4, #0]
    hjpeg->JpegInCount = 0;
9000bd02:	6221      	str	r1, [r4, #32]
  if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (nb_bytes > 0UL))
9000bd04:	6d61      	ldr	r1, [r4, #84]	; 0x54
9000bd06:	04c9      	lsls	r1, r1, #19
9000bd08:	f53f ae33 	bmi.w	9000b972 <JPEG_Process+0x2a>
9000bd0c:	2a00      	cmp	r2, #0
9000bd0e:	f43f ae30 	beq.w	9000b972 <JPEG_Process+0x2a>
    if (nb_words >= nbRequestWords)
9000bd12:	0891      	lsrs	r1, r2, #2
9000bd14:	f040 8203 	bne.w	9000c11e <JPEG_Process+0x7d6>
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
9000bd18:	6a20      	ldr	r0, [r4, #32]
        for (index = 0; index < nb_bytes; index++)
9000bd1a:	2a01      	cmp	r2, #1
          hjpeg->JpegInCount++;
9000bd1c:	6a21      	ldr	r1, [r4, #32]
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
9000bd1e:	69a5      	ldr	r5, [r4, #24]
          hjpeg->JpegInCount++;
9000bd20:	f101 0101 	add.w	r1, r1, #1
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
9000bd24:	5c28      	ldrb	r0, [r5, r0]
          hjpeg->JpegInCount++;
9000bd26:	6221      	str	r1, [r4, #32]
        for (index = 0; index < nb_bytes; index++)
9000bd28:	d010      	beq.n	9000bd4c <JPEG_Process+0x404>
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
9000bd2a:	6a21      	ldr	r1, [r4, #32]
        for (index = 0; index < nb_bytes; index++)
9000bd2c:	2a03      	cmp	r2, #3
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
9000bd2e:	5c69      	ldrb	r1, [r5, r1]
9000bd30:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
          hjpeg->JpegInCount++;
9000bd34:	6a21      	ldr	r1, [r4, #32]
9000bd36:	f101 0101 	add.w	r1, r1, #1
9000bd3a:	6221      	str	r1, [r4, #32]
        for (index = 0; index < nb_bytes; index++)
9000bd3c:	d106      	bne.n	9000bd4c <JPEG_Process+0x404>
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
9000bd3e:	6a22      	ldr	r2, [r4, #32]
9000bd40:	5ca9      	ldrb	r1, [r5, r2]
          hjpeg->JpegInCount++;
9000bd42:	6a22      	ldr	r2, [r4, #32]
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
9000bd44:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
          hjpeg->JpegInCount++;
9000bd48:	3201      	adds	r2, #1
9000bd4a:	6222      	str	r2, [r4, #32]
        hjpeg->Instance->DIR = dataword;
9000bd4c:	6418      	str	r0, [r3, #64]	; 0x40
9000bd4e:	e610      	b.n	9000b972 <JPEG_Process+0x2a>
  if (hjpeg->OutDataLength >= (hjpeg->JpegOutCount + (nbOutputWords * 4UL)))
9000bd50:	6a62      	ldr	r2, [r4, #36]	; 0x24
9000bd52:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
9000bd54:	3204      	adds	r2, #4
9000bd56:	4295      	cmp	r5, r2
9000bd58:	f0c0 80d5 	bcc.w	9000bf06 <JPEG_Process+0x5be>
      dataword = hjpeg->Instance->DOR;
9000bd5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
9000bd5e:	69e1      	ldr	r1, [r4, #28]
9000bd60:	6a62      	ldr	r2, [r4, #36]	; 0x24
9000bd62:	548b      	strb	r3, [r1, r2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
9000bd64:	6a61      	ldr	r1, [r4, #36]	; 0x24
9000bd66:	69e2      	ldr	r2, [r4, #28]
9000bd68:	440a      	add	r2, r1
9000bd6a:	0a19      	lsrs	r1, r3, #8
9000bd6c:	7051      	strb	r1, [r2, #1]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
9000bd6e:	6a61      	ldr	r1, [r4, #36]	; 0x24
9000bd70:	69e2      	ldr	r2, [r4, #28]
9000bd72:	440a      	add	r2, r1
9000bd74:	0c19      	lsrs	r1, r3, #16
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
9000bd76:	0e1b      	lsrs	r3, r3, #24
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
9000bd78:	7091      	strb	r1, [r2, #2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
9000bd7a:	6a61      	ldr	r1, [r4, #36]	; 0x24
9000bd7c:	69e2      	ldr	r2, [r4, #28]
9000bd7e:	440a      	add	r2, r1
9000bd80:	70d3      	strb	r3, [r2, #3]
      hjpeg->JpegOutCount += 4UL;
9000bd82:	6a63      	ldr	r3, [r4, #36]	; 0x24
    if (hjpeg->OutDataLength == hjpeg->JpegOutCount)
9000bd84:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
      hjpeg->JpegOutCount += 4UL;
9000bd86:	3304      	adds	r3, #4
9000bd88:	6263      	str	r3, [r4, #36]	; 0x24
    if (hjpeg->OutDataLength == hjpeg->JpegOutCount)
9000bd8a:	6a63      	ldr	r3, [r4, #36]	; 0x24
9000bd8c:	429a      	cmp	r2, r3
9000bd8e:	f47f af07 	bne.w	9000bba0 <JPEG_Process+0x258>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
9000bd92:	6a62      	ldr	r2, [r4, #36]	; 0x24
9000bd94:	4620      	mov	r0, r4
9000bd96:	69e1      	ldr	r1, [r4, #28]
9000bd98:	f7f5 fd18 	bl	900017cc <HAL_JPEG_DataReadyCallback>
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF | JPEG_FLAG_OFTF | JPEG_FLAG_OFNEF) == JPEG_FLAG_EOCF)
9000bd9c:	6823      	ldr	r3, [r4, #0]
      hjpeg->JpegOutCount = 0;
9000bd9e:	6266      	str	r6, [r4, #36]	; 0x24
9000bda0:	e5f3      	b.n	9000b98a <JPEG_Process+0x42>
      HAL_JPEG_DecodeCpltCallback(hjpeg);
9000bda2:	f7f5 fd5d 	bl	90001860 <HAL_JPEG_DecodeCpltCallback>
    return JPEG_PROCESS_DONE;
9000bda6:	4628      	mov	r0, r5
9000bda8:	e5f5      	b.n	9000b996 <JPEG_Process+0x4e>
      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
9000bdaa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
9000bdac:	f022 027e 	bic.w	r2, r2, #126	; 0x7e
9000bdb0:	631a      	str	r2, [r3, #48]	; 0x30
9000bdb2:	e614      	b.n	9000b9de <JPEG_Process+0x96>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
9000bdb4:	6a62      	ldr	r2, [r4, #36]	; 0x24
9000bdb6:	4620      	mov	r0, r4
9000bdb8:	69e1      	ldr	r1, [r4, #28]
9000bdba:	f7f5 fd07 	bl	900017cc <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
9000bdbe:	2300      	movs	r3, #0
9000bdc0:	6263      	str	r3, [r4, #36]	; 0x24
9000bdc2:	e614      	b.n	9000b9ee <JPEG_Process+0xa6>
  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
9000bdc4:	6d62      	ldr	r2, [r4, #84]	; 0x54
9000bdc6:	f002 020c 	and.w	r2, r2, #12
9000bdca:	2a0c      	cmp	r2, #12
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_INPUT;
9000bdcc:	6d62      	ldr	r2, [r4, #84]	; 0x54
  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
9000bdce:	f000 80fd 	beq.w	9000bfcc <JPEG_Process+0x684>
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
9000bdd2:	f002 020c 	and.w	r2, r2, #12
9000bdd6:	2a08      	cmp	r2, #8
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_INPUT;
9000bdd8:	6d62      	ldr	r2, [r4, #84]	; 0x54
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
9000bdda:	f47f adca 	bne.w	9000b972 <JPEG_Process+0x2a>
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_INPUT;
9000bdde:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
9000bde2:	6562      	str	r2, [r4, #84]	; 0x54
    __HAL_JPEG_DISABLE_IT(hjpeg, mask);
9000bde4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
9000bde6:	f022 0206 	bic.w	r2, r2, #6
9000bdea:	631a      	str	r2, [r3, #48]	; 0x30
  if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (nb_bytes > 0UL))
9000bdec:	6d62      	ldr	r2, [r4, #84]	; 0x54
9000bdee:	e5c0      	b.n	9000b972 <JPEG_Process+0x2a>
  else if (hjpeg->OutDataLength > hjpeg->JpegOutCount)
9000bdf0:	6a62      	ldr	r2, [r4, #36]	; 0x24
9000bdf2:	4296      	cmp	r6, r2
9000bdf4:	f67f adc9 	bls.w	9000b98a <JPEG_Process+0x42>
    nb_words = (hjpeg->OutDataLength - hjpeg->JpegOutCount) / 4UL;
9000bdf8:	6a60      	ldr	r0, [r4, #36]	; 0x24
9000bdfa:	1a30      	subs	r0, r6, r0
    for (index = 0; index < nb_words; index++)
9000bdfc:	0880      	lsrs	r0, r0, #2
9000bdfe:	d020      	beq.n	9000be42 <JPEG_Process+0x4fa>
9000be00:	4629      	mov	r1, r5
9000be02:	e000      	b.n	9000be06 <JPEG_Process+0x4be>
      dataword = hjpeg->Instance->DOR;
9000be04:	6823      	ldr	r3, [r4, #0]
9000be06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    for (index = 0; index < nb_words; index++)
9000be08:	3101      	adds	r1, #1
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
9000be0a:	6a62      	ldr	r2, [r4, #36]	; 0x24
9000be0c:	69e6      	ldr	r6, [r4, #28]
    for (index = 0; index < nb_words; index++)
9000be0e:	4288      	cmp	r0, r1
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
9000be10:	54b3      	strb	r3, [r6, r2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
9000be12:	6a66      	ldr	r6, [r4, #36]	; 0x24
9000be14:	69e2      	ldr	r2, [r4, #28]
9000be16:	4432      	add	r2, r6
9000be18:	ea4f 2613 	mov.w	r6, r3, lsr #8
9000be1c:	7056      	strb	r6, [r2, #1]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
9000be1e:	6a66      	ldr	r6, [r4, #36]	; 0x24
9000be20:	69e2      	ldr	r2, [r4, #28]
9000be22:	4432      	add	r2, r6
9000be24:	ea4f 4613 	mov.w	r6, r3, lsr #16
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
9000be28:	ea4f 6313 	mov.w	r3, r3, lsr #24
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
9000be2c:	7096      	strb	r6, [r2, #2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
9000be2e:	6a66      	ldr	r6, [r4, #36]	; 0x24
9000be30:	69e2      	ldr	r2, [r4, #28]
9000be32:	4432      	add	r2, r6
9000be34:	70d3      	strb	r3, [r2, #3]
      hjpeg->JpegOutCount += 4UL;
9000be36:	6a63      	ldr	r3, [r4, #36]	; 0x24
9000be38:	f103 0304 	add.w	r3, r3, #4
9000be3c:	6263      	str	r3, [r4, #36]	; 0x24
    for (index = 0; index < nb_words; index++)
9000be3e:	d1e1      	bne.n	9000be04 <JPEG_Process+0x4bc>
    if (hjpeg->OutDataLength == hjpeg->JpegOutCount)
9000be40:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
9000be42:	6a63      	ldr	r3, [r4, #36]	; 0x24
9000be44:	42b3      	cmp	r3, r6
9000be46:	f000 8161 	beq.w	9000c10c <JPEG_Process+0x7c4>
      nb_bytes = hjpeg->OutDataLength - hjpeg->JpegOutCount;
9000be4a:	f8d4 8024 	ldr.w	r8, [r4, #36]	; 0x24
      dataword = hjpeg->Instance->DOR;
9000be4e:	6823      	ldr	r3, [r4, #0]
      for (index = 0; index < nb_bytes; index++)
9000be50:	ebb6 0008 	subs.w	r0, r6, r8
      dataword = hjpeg->Instance->DOR;
9000be54:	6c5f      	ldr	r7, [r3, #68]	; 0x44
      for (index = 0; index < nb_bytes; index++)
9000be56:	d00e      	beq.n	9000be76 <JPEG_Process+0x52e>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * (index & 0x3UL))) & 0xFFUL);
9000be58:	f005 0303 	and.w	r3, r5, #3
9000be5c:	6a62      	ldr	r2, [r4, #36]	; 0x24
9000be5e:	69e1      	ldr	r1, [r4, #28]
      for (index = 0; index < nb_bytes; index++)
9000be60:	3501      	adds	r5, #1
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * (index & 0x3UL))) & 0xFFUL);
9000be62:	00db      	lsls	r3, r3, #3
      for (index = 0; index < nb_bytes; index++)
9000be64:	42a8      	cmp	r0, r5
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * (index & 0x3UL))) & 0xFFUL);
9000be66:	fa27 f303 	lsr.w	r3, r7, r3
9000be6a:	548b      	strb	r3, [r1, r2]
        hjpeg->JpegOutCount++;
9000be6c:	6a63      	ldr	r3, [r4, #36]	; 0x24
9000be6e:	f103 0301 	add.w	r3, r3, #1
9000be72:	6263      	str	r3, [r4, #36]	; 0x24
      for (index = 0; index < nb_bytes; index++)
9000be74:	d1f0      	bne.n	9000be58 <JPEG_Process+0x510>
      nb_bytes = 4UL - nb_bytes;
9000be76:	f108 0804 	add.w	r8, r8, #4
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
9000be7a:	6a62      	ldr	r2, [r4, #36]	; 0x24
9000be7c:	69e1      	ldr	r1, [r4, #28]
9000be7e:	4620      	mov	r0, r4
      nb_bytes = 4UL - nb_bytes;
9000be80:	eba8 0806 	sub.w	r8, r8, r6
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
9000be84:	f7f5 fca2 	bl	900017cc <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
9000be88:	2300      	movs	r3, #0
      for (index = nb_bytes; index < 4UL; index++)
9000be8a:	f1b8 0f03 	cmp.w	r8, #3
      hjpeg->JpegOutCount = 0;
9000be8e:	6263      	str	r3, [r4, #36]	; 0x24
      for (index = nb_bytes; index < 4UL; index++)
9000be90:	f63f ae86 	bhi.w	9000bba0 <JPEG_Process+0x258>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * index)) & 0xFFUL);
9000be94:	ea4f 03c8 	mov.w	r3, r8, lsl #3
9000be98:	6a62      	ldr	r2, [r4, #36]	; 0x24
9000be9a:	69e1      	ldr	r1, [r4, #28]
      for (index = nb_bytes; index < 4UL; index++)
9000be9c:	f1b8 0f03 	cmp.w	r8, #3
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * index)) & 0xFFUL);
9000bea0:	fa27 f003 	lsr.w	r0, r7, r3
9000bea4:	5488      	strb	r0, [r1, r2]
        hjpeg->JpegOutCount++;
9000bea6:	6a62      	ldr	r2, [r4, #36]	; 0x24
9000bea8:	f102 0201 	add.w	r2, r2, #1
9000beac:	6262      	str	r2, [r4, #36]	; 0x24
      for (index = nb_bytes; index < 4UL; index++)
9000beae:	f43f ae77 	beq.w	9000bba0 <JPEG_Process+0x258>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * index)) & 0xFFUL);
9000beb2:	f103 0208 	add.w	r2, r3, #8
9000beb6:	6a61      	ldr	r1, [r4, #36]	; 0x24
9000beb8:	69e0      	ldr	r0, [r4, #28]
      for (index = nb_bytes; index < 4UL; index++)
9000beba:	f1b8 0f02 	cmp.w	r8, #2
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * index)) & 0xFFUL);
9000bebe:	fa27 f202 	lsr.w	r2, r7, r2
9000bec2:	5442      	strb	r2, [r0, r1]
        hjpeg->JpegOutCount++;
9000bec4:	6a62      	ldr	r2, [r4, #36]	; 0x24
9000bec6:	f102 0201 	add.w	r2, r2, #1
9000beca:	6262      	str	r2, [r4, #36]	; 0x24
      for (index = nb_bytes; index < 4UL; index++)
9000becc:	f108 0202 	add.w	r2, r8, #2
9000bed0:	f43f ae66 	beq.w	9000bba0 <JPEG_Process+0x258>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * index)) & 0xFFUL);
9000bed4:	3310      	adds	r3, #16
9000bed6:	6a61      	ldr	r1, [r4, #36]	; 0x24
9000bed8:	69e0      	ldr	r0, [r4, #28]
      for (index = nb_bytes; index < 4UL; index++)
9000beda:	2a02      	cmp	r2, #2
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * index)) & 0xFFUL);
9000bedc:	fa27 f303 	lsr.w	r3, r7, r3
9000bee0:	5443      	strb	r3, [r0, r1]
        hjpeg->JpegOutCount++;
9000bee2:	6a63      	ldr	r3, [r4, #36]	; 0x24
9000bee4:	f103 0301 	add.w	r3, r3, #1
9000bee8:	6263      	str	r3, [r4, #36]	; 0x24
      for (index = nb_bytes; index < 4UL; index++)
9000beea:	f47f ae59 	bne.w	9000bba0 <JPEG_Process+0x258>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * index)) & 0xFFUL);
9000beee:	6a63      	ldr	r3, [r4, #36]	; 0x24
9000bef0:	0e3f      	lsrs	r7, r7, #24
9000bef2:	69e2      	ldr	r2, [r4, #28]
9000bef4:	54d7      	strb	r7, [r2, r3]
        hjpeg->JpegOutCount++;
9000bef6:	6a63      	ldr	r3, [r4, #36]	; 0x24
9000bef8:	3301      	adds	r3, #1
9000befa:	6263      	str	r3, [r4, #36]	; 0x24
      for (index = nb_bytes; index < 4UL; index++)
9000befc:	e650      	b.n	9000bba0 <JPEG_Process+0x258>
  else if (hjpeg->InDataLength == hjpeg->JpegInCount)
9000befe:	428a      	cmp	r2, r1
9000bf00:	d056      	beq.n	9000bfb0 <JPEG_Process+0x668>
  if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (nb_bytes > 0UL))
9000bf02:	6d62      	ldr	r2, [r4, #84]	; 0x54
9000bf04:	e535      	b.n	9000b972 <JPEG_Process+0x2a>
  else if (hjpeg->OutDataLength > hjpeg->JpegOutCount)
9000bf06:	6a62      	ldr	r2, [r4, #36]	; 0x24
9000bf08:	4295      	cmp	r5, r2
9000bf0a:	f67f ad3e 	bls.w	9000b98a <JPEG_Process+0x42>
    nb_words = (hjpeg->OutDataLength - hjpeg->JpegOutCount) / 4UL;
9000bf0e:	6a60      	ldr	r0, [r4, #36]	; 0x24
9000bf10:	1a28      	subs	r0, r5, r0
    for (index = 0; index < nb_words; index++)
9000bf12:	0880      	lsrs	r0, r0, #2
9000bf14:	d020      	beq.n	9000bf58 <JPEG_Process+0x610>
9000bf16:	4631      	mov	r1, r6
9000bf18:	e000      	b.n	9000bf1c <JPEG_Process+0x5d4>
      dataword = hjpeg->Instance->DOR;
9000bf1a:	6823      	ldr	r3, [r4, #0]
9000bf1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    for (index = 0; index < nb_words; index++)
9000bf1e:	3101      	adds	r1, #1
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
9000bf20:	6a62      	ldr	r2, [r4, #36]	; 0x24
9000bf22:	69e5      	ldr	r5, [r4, #28]
    for (index = 0; index < nb_words; index++)
9000bf24:	4288      	cmp	r0, r1
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
9000bf26:	54ab      	strb	r3, [r5, r2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
9000bf28:	6a65      	ldr	r5, [r4, #36]	; 0x24
9000bf2a:	69e2      	ldr	r2, [r4, #28]
9000bf2c:	442a      	add	r2, r5
9000bf2e:	ea4f 2513 	mov.w	r5, r3, lsr #8
9000bf32:	7055      	strb	r5, [r2, #1]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
9000bf34:	6a65      	ldr	r5, [r4, #36]	; 0x24
9000bf36:	69e2      	ldr	r2, [r4, #28]
9000bf38:	442a      	add	r2, r5
9000bf3a:	ea4f 4513 	mov.w	r5, r3, lsr #16
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
9000bf3e:	ea4f 6313 	mov.w	r3, r3, lsr #24
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
9000bf42:	7095      	strb	r5, [r2, #2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
9000bf44:	6a65      	ldr	r5, [r4, #36]	; 0x24
9000bf46:	69e2      	ldr	r2, [r4, #28]
9000bf48:	442a      	add	r2, r5
9000bf4a:	70d3      	strb	r3, [r2, #3]
      hjpeg->JpegOutCount += 4UL;
9000bf4c:	6a63      	ldr	r3, [r4, #36]	; 0x24
9000bf4e:	f103 0304 	add.w	r3, r3, #4
9000bf52:	6263      	str	r3, [r4, #36]	; 0x24
    for (index = 0; index < nb_words; index++)
9000bf54:	d1e1      	bne.n	9000bf1a <JPEG_Process+0x5d2>
    if (hjpeg->OutDataLength == hjpeg->JpegOutCount)
9000bf56:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
9000bf58:	6a63      	ldr	r3, [r4, #36]	; 0x24
9000bf5a:	429d      	cmp	r5, r3
9000bf5c:	f000 80d6 	beq.w	9000c10c <JPEG_Process+0x7c4>
      nb_bytes = hjpeg->OutDataLength - hjpeg->JpegOutCount;
9000bf60:	f8d4 8024 	ldr.w	r8, [r4, #36]	; 0x24
      dataword = hjpeg->Instance->DOR;
9000bf64:	6823      	ldr	r3, [r4, #0]
      for (index = 0; index < nb_bytes; index++)
9000bf66:	ebb5 0008 	subs.w	r0, r5, r8
      dataword = hjpeg->Instance->DOR;
9000bf6a:	6c5f      	ldr	r7, [r3, #68]	; 0x44
      for (index = 0; index < nb_bytes; index++)
9000bf6c:	d00e      	beq.n	9000bf8c <JPEG_Process+0x644>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * (index & 0x3UL))) & 0xFFUL);
9000bf6e:	f006 0303 	and.w	r3, r6, #3
9000bf72:	6a62      	ldr	r2, [r4, #36]	; 0x24
9000bf74:	69e1      	ldr	r1, [r4, #28]
      for (index = 0; index < nb_bytes; index++)
9000bf76:	3601      	adds	r6, #1
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * (index & 0x3UL))) & 0xFFUL);
9000bf78:	00db      	lsls	r3, r3, #3
      for (index = 0; index < nb_bytes; index++)
9000bf7a:	42b0      	cmp	r0, r6
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * (index & 0x3UL))) & 0xFFUL);
9000bf7c:	fa27 f303 	lsr.w	r3, r7, r3
9000bf80:	548b      	strb	r3, [r1, r2]
        hjpeg->JpegOutCount++;
9000bf82:	6a63      	ldr	r3, [r4, #36]	; 0x24
9000bf84:	f103 0301 	add.w	r3, r3, #1
9000bf88:	6263      	str	r3, [r4, #36]	; 0x24
      for (index = 0; index < nb_bytes; index++)
9000bf8a:	d1f0      	bne.n	9000bf6e <JPEG_Process+0x626>
      nb_bytes = 4UL - nb_bytes;
9000bf8c:	f108 0804 	add.w	r8, r8, #4
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
9000bf90:	6a62      	ldr	r2, [r4, #36]	; 0x24
9000bf92:	69e1      	ldr	r1, [r4, #28]
9000bf94:	4620      	mov	r0, r4
      nb_bytes = 4UL - nb_bytes;
9000bf96:	eba8 0805 	sub.w	r8, r8, r5
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
9000bf9a:	f7f5 fc17 	bl	900017cc <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
9000bf9e:	2300      	movs	r3, #0
      for (index = nb_bytes; index < 4UL; index++)
9000bfa0:	f1b8 0f03 	cmp.w	r8, #3
      hjpeg->JpegOutCount = 0;
9000bfa4:	6263      	str	r3, [r4, #36]	; 0x24
      for (index = nb_bytes; index < 4UL; index++)
9000bfa6:	f67f af75 	bls.w	9000be94 <JPEG_Process+0x54c>
9000bfaa:	e5f9      	b.n	9000bba0 <JPEG_Process+0x258>
    nb_bytes = hjpeg->InDataLength - hjpeg->JpegInCount;
9000bfac:	1a52      	subs	r2, r2, r1
9000bfae:	e6a9      	b.n	9000bd04 <JPEG_Process+0x3bc>
    HAL_JPEG_GetDataCallback(hjpeg, hjpeg->JpegInCount);
9000bfb0:	6a21      	ldr	r1, [r4, #32]
9000bfb2:	4620      	mov	r0, r4
9000bfb4:	f7f5 fbea 	bl	9000178c <HAL_JPEG_GetDataCallback>
    if (hjpeg->InDataLength > 4UL)
9000bfb8:	6aa2      	ldr	r2, [r4, #40]	; 0x28
9000bfba:	2a04      	cmp	r2, #4
9000bfbc:	d902      	bls.n	9000bfc4 <JPEG_Process+0x67c>
      hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % 4UL);
9000bfbe:	f022 0203 	bic.w	r2, r2, #3
9000bfc2:	62a2      	str	r2, [r4, #40]	; 0x28
    hjpeg->JpegInCount = 0;
9000bfc4:	2100      	movs	r1, #0
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
9000bfc6:	6823      	ldr	r3, [r4, #0]
    hjpeg->JpegInCount = 0;
9000bfc8:	6221      	str	r1, [r4, #32]
    nb_bytes = hjpeg->InDataLength;
9000bfca:	e5f5      	b.n	9000bbb8 <JPEG_Process+0x270>
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_INPUT;
9000bfcc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
9000bfd0:	6562      	str	r2, [r4, #84]	; 0x54
  if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (nb_bytes > 0UL))
9000bfd2:	6d62      	ldr	r2, [r4, #84]	; 0x54
9000bfd4:	e4cd      	b.n	9000b972 <JPEG_Process+0x2a>
      if (nb_words > 0UL)
9000bfd6:	2a03      	cmp	r2, #3
9000bfd8:	f240 80a4 	bls.w	9000c124 <JPEG_Process+0x7dc>
        for (index = 0; index < nb_words; index++)
9000bfdc:	2900      	cmp	r1, #0
9000bfde:	f43f acc8 	beq.w	9000b972 <JPEG_Process+0x2a>
          input_count = hjpeg->JpegInCount;
9000bfe2:	6a20      	ldr	r0, [r4, #32]
        for (index = 0; index < nb_words; index++)
9000bfe4:	2901      	cmp	r1, #1
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
9000bfe6:	69a2      	ldr	r2, [r4, #24]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
9000bfe8:	eb02 0500 	add.w	r5, r2, r0
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
9000bfec:	5c16      	ldrb	r6, [r2, r0]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
9000bfee:	78a8      	ldrb	r0, [r5, #2]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
9000bff0:	786f      	ldrb	r7, [r5, #1]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
9000bff2:	ea4f 4000 	mov.w	r0, r0, lsl #16
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
9000bff6:	78ed      	ldrb	r5, [r5, #3]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
9000bff8:	ea40 2007 	orr.w	r0, r0, r7, lsl #8
9000bffc:	ea40 0006 	orr.w	r0, r0, r6
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
9000c000:	ea40 6005 	orr.w	r0, r0, r5, lsl #24
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
9000c004:	6418      	str	r0, [r3, #64]	; 0x40
          hjpeg->JpegInCount += 4UL;
9000c006:	6a20      	ldr	r0, [r4, #32]
9000c008:	f100 0004 	add.w	r0, r0, #4
9000c00c:	6220      	str	r0, [r4, #32]
        for (index = 0; index < nb_words; index++)
9000c00e:	f43f acb0 	beq.w	9000b972 <JPEG_Process+0x2a>
          input_count = hjpeg->JpegInCount;
9000c012:	6a20      	ldr	r0, [r4, #32]
        for (index = 0; index < nb_words; index++)
9000c014:	2902      	cmp	r1, #2
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
9000c016:	eb02 0500 	add.w	r5, r2, r0
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
9000c01a:	5c16      	ldrb	r6, [r2, r0]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
9000c01c:	78a8      	ldrb	r0, [r5, #2]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
9000c01e:	786f      	ldrb	r7, [r5, #1]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
9000c020:	ea4f 4000 	mov.w	r0, r0, lsl #16
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
9000c024:	78ed      	ldrb	r5, [r5, #3]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
9000c026:	ea40 2007 	orr.w	r0, r0, r7, lsl #8
9000c02a:	ea40 0006 	orr.w	r0, r0, r6
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
9000c02e:	ea40 6005 	orr.w	r0, r0, r5, lsl #24
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
9000c032:	6418      	str	r0, [r3, #64]	; 0x40
          hjpeg->JpegInCount += 4UL;
9000c034:	6a20      	ldr	r0, [r4, #32]
9000c036:	f100 0004 	add.w	r0, r0, #4
9000c03a:	6220      	str	r0, [r4, #32]
        for (index = 0; index < nb_words; index++)
9000c03c:	f43f ac99 	beq.w	9000b972 <JPEG_Process+0x2a>
          input_count = hjpeg->JpegInCount;
9000c040:	6a20      	ldr	r0, [r4, #32]
        for (index = 0; index < nb_words; index++)
9000c042:	2903      	cmp	r1, #3
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
9000c044:	eb02 0500 	add.w	r5, r2, r0
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
9000c048:	5c16      	ldrb	r6, [r2, r0]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
9000c04a:	78a8      	ldrb	r0, [r5, #2]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
9000c04c:	786f      	ldrb	r7, [r5, #1]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
9000c04e:	ea4f 4000 	mov.w	r0, r0, lsl #16
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
9000c052:	78ed      	ldrb	r5, [r5, #3]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
9000c054:	ea40 2007 	orr.w	r0, r0, r7, lsl #8
9000c058:	ea40 0006 	orr.w	r0, r0, r6
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
9000c05c:	ea40 6005 	orr.w	r0, r0, r5, lsl #24
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
9000c060:	6418      	str	r0, [r3, #64]	; 0x40
          hjpeg->JpegInCount += 4UL;
9000c062:	6a20      	ldr	r0, [r4, #32]
9000c064:	f100 0004 	add.w	r0, r0, #4
9000c068:	6220      	str	r0, [r4, #32]
        for (index = 0; index < nb_words; index++)
9000c06a:	f43f ac82 	beq.w	9000b972 <JPEG_Process+0x2a>
          input_count = hjpeg->JpegInCount;
9000c06e:	6a20      	ldr	r0, [r4, #32]
        for (index = 0; index < nb_words; index++)
9000c070:	2904      	cmp	r1, #4
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
9000c072:	eb02 0500 	add.w	r5, r2, r0
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
9000c076:	5c16      	ldrb	r6, [r2, r0]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
9000c078:	78a8      	ldrb	r0, [r5, #2]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
9000c07a:	786f      	ldrb	r7, [r5, #1]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
9000c07c:	ea4f 4000 	mov.w	r0, r0, lsl #16
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
9000c080:	78ed      	ldrb	r5, [r5, #3]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
9000c082:	ea40 2007 	orr.w	r0, r0, r7, lsl #8
9000c086:	ea40 0006 	orr.w	r0, r0, r6
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
9000c08a:	ea40 6005 	orr.w	r0, r0, r5, lsl #24
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
9000c08e:	6418      	str	r0, [r3, #64]	; 0x40
          hjpeg->JpegInCount += 4UL;
9000c090:	6a20      	ldr	r0, [r4, #32]
9000c092:	f100 0004 	add.w	r0, r0, #4
9000c096:	6220      	str	r0, [r4, #32]
        for (index = 0; index < nb_words; index++)
9000c098:	f43f ac6b 	beq.w	9000b972 <JPEG_Process+0x2a>
          input_count = hjpeg->JpegInCount;
9000c09c:	6a20      	ldr	r0, [r4, #32]
        for (index = 0; index < nb_words; index++)
9000c09e:	2905      	cmp	r1, #5
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
9000c0a0:	eb02 0500 	add.w	r5, r2, r0
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
9000c0a4:	5c16      	ldrb	r6, [r2, r0]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
9000c0a6:	78a8      	ldrb	r0, [r5, #2]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
9000c0a8:	786f      	ldrb	r7, [r5, #1]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
9000c0aa:	ea4f 4000 	mov.w	r0, r0, lsl #16
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
9000c0ae:	78ed      	ldrb	r5, [r5, #3]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
9000c0b0:	ea40 2007 	orr.w	r0, r0, r7, lsl #8
9000c0b4:	ea40 0006 	orr.w	r0, r0, r6
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
9000c0b8:	ea40 6005 	orr.w	r0, r0, r5, lsl #24
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
9000c0bc:	6418      	str	r0, [r3, #64]	; 0x40
          hjpeg->JpegInCount += 4UL;
9000c0be:	6a20      	ldr	r0, [r4, #32]
9000c0c0:	f100 0004 	add.w	r0, r0, #4
9000c0c4:	6220      	str	r0, [r4, #32]
        for (index = 0; index < nb_words; index++)
9000c0c6:	f43f ac54 	beq.w	9000b972 <JPEG_Process+0x2a>
          input_count = hjpeg->JpegInCount;
9000c0ca:	6a20      	ldr	r0, [r4, #32]
        for (index = 0; index < nb_words; index++)
9000c0cc:	2907      	cmp	r1, #7
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
9000c0ce:	eb02 0500 	add.w	r5, r2, r0
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
9000c0d2:	5c16      	ldrb	r6, [r2, r0]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
9000c0d4:	78a8      	ldrb	r0, [r5, #2]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
9000c0d6:	786f      	ldrb	r7, [r5, #1]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
9000c0d8:	ea4f 4000 	mov.w	r0, r0, lsl #16
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
9000c0dc:	78ed      	ldrb	r5, [r5, #3]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
9000c0de:	ea40 2007 	orr.w	r0, r0, r7, lsl #8
9000c0e2:	ea40 0006 	orr.w	r0, r0, r6
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
9000c0e6:	ea40 6005 	orr.w	r0, r0, r5, lsl #24
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
9000c0ea:	6418      	str	r0, [r3, #64]	; 0x40
          hjpeg->JpegInCount += 4UL;
9000c0ec:	6a20      	ldr	r0, [r4, #32]
9000c0ee:	f100 0004 	add.w	r0, r0, #4
9000c0f2:	6220      	str	r0, [r4, #32]
        for (index = 0; index < nb_words; index++)
9000c0f4:	f47f ac3d 	bne.w	9000b972 <JPEG_Process+0x2a>
          input_count = hjpeg->JpegInCount;
9000c0f8:	6a20      	ldr	r0, [r4, #32]
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
9000c0fa:	e5db      	b.n	9000bcb4 <JPEG_Process+0x36c>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
9000c0fc:	6a62      	ldr	r2, [r4, #36]	; 0x24
9000c0fe:	4620      	mov	r0, r4
9000c100:	69e1      	ldr	r1, [r4, #28]
9000c102:	f7f5 fb63 	bl	900017cc <HAL_JPEG_DataReadyCallback>
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF | JPEG_FLAG_OFTF | JPEG_FLAG_OFNEF) == JPEG_FLAG_EOCF)
9000c106:	6823      	ldr	r3, [r4, #0]
      hjpeg->JpegOutCount = 0;
9000c108:	6265      	str	r5, [r4, #36]	; 0x24
9000c10a:	e43e      	b.n	9000b98a <JPEG_Process+0x42>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
9000c10c:	6a62      	ldr	r2, [r4, #36]	; 0x24
9000c10e:	4620      	mov	r0, r4
9000c110:	69e1      	ldr	r1, [r4, #28]
9000c112:	f7f5 fb5b 	bl	900017cc <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
9000c116:	2200      	movs	r2, #0
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF | JPEG_FLAG_OFTF | JPEG_FLAG_OFNEF) == JPEG_FLAG_EOCF)
9000c118:	6823      	ldr	r3, [r4, #0]
      hjpeg->JpegOutCount = 0;
9000c11a:	6262      	str	r2, [r4, #36]	; 0x24
9000c11c:	e435      	b.n	9000b98a <JPEG_Process+0x42>
        input_count = hjpeg->JpegInCount;
9000c11e:	6a22      	ldr	r2, [r4, #32]
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
9000c120:	69a0      	ldr	r0, [r4, #24]
9000c122:	e5c7      	b.n	9000bcb4 <JPEG_Process+0x36c>
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
9000c124:	6a21      	ldr	r1, [r4, #32]
        for (index = 0; index < nb_bytes; index++)
9000c126:	2a01      	cmp	r2, #1
          hjpeg->JpegInCount++;
9000c128:	6a20      	ldr	r0, [r4, #32]
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
9000c12a:	69a5      	ldr	r5, [r4, #24]
          hjpeg->JpegInCount++;
9000c12c:	f100 0001 	add.w	r0, r0, #1
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
9000c130:	5c69      	ldrb	r1, [r5, r1]
          hjpeg->JpegInCount++;
9000c132:	6220      	str	r0, [r4, #32]
        for (index = 0; index < nb_bytes; index++)
9000c134:	d010      	beq.n	9000c158 <JPEG_Process+0x810>
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
9000c136:	6a20      	ldr	r0, [r4, #32]
        for (index = 0; index < nb_bytes; index++)
9000c138:	2a03      	cmp	r2, #3
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
9000c13a:	5c28      	ldrb	r0, [r5, r0]
9000c13c:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
          hjpeg->JpegInCount++;
9000c140:	6a20      	ldr	r0, [r4, #32]
9000c142:	f100 0001 	add.w	r0, r0, #1
9000c146:	6220      	str	r0, [r4, #32]
        for (index = 0; index < nb_bytes; index++)
9000c148:	d106      	bne.n	9000c158 <JPEG_Process+0x810>
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
9000c14a:	6a22      	ldr	r2, [r4, #32]
9000c14c:	5ca8      	ldrb	r0, [r5, r2]
          hjpeg->JpegInCount++;
9000c14e:	6a22      	ldr	r2, [r4, #32]
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
9000c150:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
          hjpeg->JpegInCount++;
9000c154:	3201      	adds	r2, #1
9000c156:	6222      	str	r2, [r4, #32]
        hjpeg->Instance->DIR = dataword;
9000c158:	6419      	str	r1, [r3, #64]	; 0x40
9000c15a:	e40a      	b.n	9000b972 <JPEG_Process+0x2a>

9000c15c <HAL_JPEG_IRQHandler>:
  switch (hjpeg->State)
9000c15c:	f890 304d 	ldrb.w	r3, [r0, #77]	; 0x4d
9000c160:	3b03      	subs	r3, #3
9000c162:	2b01      	cmp	r3, #1
9000c164:	d900      	bls.n	9000c168 <HAL_JPEG_IRQHandler+0xc>
9000c166:	4770      	bx	lr
      if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
9000c168:	6d43      	ldr	r3, [r0, #84]	; 0x54
9000c16a:	f003 030c 	and.w	r3, r3, #12
9000c16e:	2b08      	cmp	r3, #8
{
9000c170:	b530      	push	{r4, r5, lr}
9000c172:	4604      	mov	r4, r0
9000c174:	b083      	sub	sp, #12
      if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
9000c176:	d006      	beq.n	9000c186 <HAL_JPEG_IRQHandler+0x2a>
      else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
9000c178:	6d43      	ldr	r3, [r0, #84]	; 0x54
9000c17a:	f003 030c 	and.w	r3, r3, #12
9000c17e:	2b0c      	cmp	r3, #12
9000c180:	d006      	beq.n	9000c190 <HAL_JPEG_IRQHandler+0x34>
}
9000c182:	b003      	add	sp, #12
9000c184:	bd30      	pop	{r4, r5, pc}
9000c186:	b003      	add	sp, #12
9000c188:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        (void) JPEG_Process(hjpeg);
9000c18c:	f7ff bbdc 	b.w	9000b948 <JPEG_Process>
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
9000c190:	6d43      	ldr	r3, [r0, #84]	; 0x54
9000c192:	f003 0303 	and.w	r3, r3, #3
9000c196:	2b02      	cmp	r3, #2
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_HPDF) != 0UL)
9000c198:	6803      	ldr	r3, [r0, #0]
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
9000c19a:	d045      	beq.n	9000c228 <HAL_JPEG_IRQHandler+0xcc>
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF) != 0UL)
9000c19c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
9000c19e:	0692      	lsls	r2, r2, #26
9000c1a0:	d5ef      	bpl.n	9000c182 <HAL_JPEG_IRQHandler+0x26>
    hjpeg->Context |= JPEG_CONTEXT_ENDING_DMA;
9000c1a2:	6d62      	ldr	r2, [r4, #84]	; 0x54
    if (hjpeg->hdmain->State == HAL_MDMA_STATE_BUSY)
9000c1a4:	6b20      	ldr	r0, [r4, #48]	; 0x30
    hjpeg->Context |= JPEG_CONTEXT_ENDING_DMA;
9000c1a6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
9000c1aa:	6562      	str	r2, [r4, #84]	; 0x54
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
9000c1ac:	681a      	ldr	r2, [r3, #0]
9000c1ae:	f022 0201 	bic.w	r2, r2, #1
9000c1b2:	601a      	str	r2, [r3, #0]
    __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
9000c1b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
9000c1b6:	f022 027e 	bic.w	r2, r2, #126	; 0x7e
9000c1ba:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
9000c1bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
9000c1be:	f042 0260 	orr.w	r2, r2, #96	; 0x60
9000c1c2:	639a      	str	r2, [r3, #56]	; 0x38
    if (hjpeg->hdmain->State == HAL_MDMA_STATE_BUSY)
9000c1c4:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
9000c1c8:	2b02      	cmp	r3, #2
9000c1ca:	d052      	beq.n	9000c272 <HAL_JPEG_IRQHandler+0x116>
    if (hjpeg->hdmaout->State == HAL_MDMA_STATE_BUSY)
9000c1cc:	6b60      	ldr	r0, [r4, #52]	; 0x34
9000c1ce:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
9000c1d2:	2b02      	cmp	r3, #2
9000c1d4:	d03f      	beq.n	9000c256 <HAL_JPEG_IRQHandler+0xfa>
  hjpeg->JpegOutCount = hjpeg->OutDataLength - (hjpeg->hdmaout->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
9000c1d6:	6803      	ldr	r3, [r0, #0]
9000c1d8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
9000c1da:	695b      	ldr	r3, [r3, #20]
9000c1dc:	f3c3 0310 	ubfx	r3, r3, #0, #17
9000c1e0:	1ad3      	subs	r3, r2, r3
9000c1e2:	6263      	str	r3, [r4, #36]	; 0x24
  if (hjpeg->JpegOutCount == hjpeg->OutDataLength)
9000c1e4:	6a63      	ldr	r3, [r4, #36]	; 0x24
9000c1e6:	429a      	cmp	r2, r3
9000c1e8:	d046      	beq.n	9000c278 <HAL_JPEG_IRQHandler+0x11c>
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) == 0UL)
9000c1ea:	6822      	ldr	r2, [r4, #0]
9000c1ec:	6b55      	ldr	r5, [r2, #52]	; 0x34
9000c1ee:	f015 0510 	ands.w	r5, r5, #16
9000c1f2:	d135      	bne.n	9000c260 <HAL_JPEG_IRQHandler+0x104>
    if (hjpeg->JpegOutCount > 0UL)
9000c1f4:	6a63      	ldr	r3, [r4, #36]	; 0x24
9000c1f6:	2b00      	cmp	r3, #0
9000c1f8:	d149      	bne.n	9000c28e <HAL_JPEG_IRQHandler+0x132>
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
9000c1fa:	6813      	ldr	r3, [r2, #0]
    __HAL_UNLOCK(hjpeg);
9000c1fc:	2000      	movs	r0, #0
    hjpeg->State = HAL_JPEG_STATE_READY;
9000c1fe:	2101      	movs	r1, #1
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
9000c200:	f023 0301 	bic.w	r3, r3, #1
9000c204:	6013      	str	r3, [r2, #0]
    tmpContext = hjpeg->Context;
9000c206:	6d63      	ldr	r3, [r4, #84]	; 0x54
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
9000c208:	6d62      	ldr	r2, [r4, #84]	; 0x54
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
9000c20a:	f003 0303 	and.w	r3, r3, #3
    __HAL_UNLOCK(hjpeg);
9000c20e:	f884 004c 	strb.w	r0, [r4, #76]	; 0x4c
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
9000c212:	f402 4282 	and.w	r2, r2, #16640	; 0x4100
      HAL_JPEG_DecodeCpltCallback(hjpeg);
9000c216:	4620      	mov	r0, r4
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
9000c218:	2b02      	cmp	r3, #2
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
9000c21a:	6562      	str	r2, [r4, #84]	; 0x54
    hjpeg->State = HAL_JPEG_STATE_READY;
9000c21c:	f884 104d 	strb.w	r1, [r4, #77]	; 0x4d
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
9000c220:	d032      	beq.n	9000c288 <HAL_JPEG_IRQHandler+0x12c>
      HAL_JPEG_EncodeCpltCallback(hjpeg);
9000c222:	f7ff f9c9 	bl	9000b5b8 <HAL_JPEG_EncodeCpltCallback>
9000c226:	e7ac      	b.n	9000c182 <HAL_JPEG_IRQHandler+0x26>
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_HPDF) != 0UL)
9000c228:	6b5a      	ldr	r2, [r3, #52]	; 0x34
9000c22a:	0651      	lsls	r1, r2, #25
9000c22c:	d5b6      	bpl.n	9000c19c <HAL_JPEG_IRQHandler+0x40>
      (void) HAL_JPEG_GetInfo(hjpeg, &hjpeg->Conf);
9000c22e:	1d01      	adds	r1, r0, #4
  if ((hjpeg == NULL) || (pInfo == NULL))
9000c230:	9101      	str	r1, [sp, #4]
9000c232:	f7fe ff33 	bl	9000b09c <HAL_JPEG_GetInfo.part.0>
      hjpeg->Conf.ImageQuality = 0;
9000c236:	2300      	movs	r3, #0
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
9000c238:	9901      	ldr	r1, [sp, #4]
9000c23a:	4620      	mov	r0, r4
      hjpeg->Conf.ImageQuality = 0;
9000c23c:	6163      	str	r3, [r4, #20]
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
9000c23e:	f7f5 fa53 	bl	900016e8 <HAL_JPEG_InfoReadyCallback>
      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_IT_HPD);
9000c242:	6823      	ldr	r3, [r4, #0]
9000c244:	6b1a      	ldr	r2, [r3, #48]	; 0x30
9000c246:	f022 0240 	bic.w	r2, r2, #64	; 0x40
9000c24a:	631a      	str	r2, [r3, #48]	; 0x30
      __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_HPDF);
9000c24c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
9000c24e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
9000c252:	639a      	str	r2, [r3, #56]	; 0x38
9000c254:	e7a2      	b.n	9000c19c <HAL_JPEG_IRQHandler+0x40>
}
9000c256:	b003      	add	sp, #12
9000c258:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
      (void) HAL_MDMA_Abort_IT(hjpeg->hdmaout);
9000c25c:	f000 bb30 	b.w	9000c8c0 <HAL_MDMA_Abort_IT>
  else if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
9000c260:	6d63      	ldr	r3, [r4, #84]	; 0x54
9000c262:	049b      	lsls	r3, r3, #18
9000c264:	d48d      	bmi.n	9000c182 <HAL_JPEG_IRQHandler+0x26>
    JPEG_DMA_PollResidualData(hjpeg);
9000c266:	4620      	mov	r0, r4
}
9000c268:	b003      	add	sp, #12
9000c26a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    JPEG_DMA_PollResidualData(hjpeg);
9000c26e:	f7ff ba0f 	b.w	9000b690 <JPEG_DMA_PollResidualData>
      (void) HAL_MDMA_Abort_IT(hjpeg->hdmain);
9000c272:	f000 fb25 	bl	9000c8c0 <HAL_MDMA_Abort_IT>
9000c276:	e7a9      	b.n	9000c1cc <HAL_JPEG_IRQHandler+0x70>
    HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
9000c278:	6a62      	ldr	r2, [r4, #36]	; 0x24
9000c27a:	4620      	mov	r0, r4
9000c27c:	69e1      	ldr	r1, [r4, #28]
9000c27e:	f7f5 faa5 	bl	900017cc <HAL_JPEG_DataReadyCallback>
    hjpeg->JpegOutCount = 0;
9000c282:	2300      	movs	r3, #0
9000c284:	6263      	str	r3, [r4, #36]	; 0x24
9000c286:	e7b0      	b.n	9000c1ea <HAL_JPEG_IRQHandler+0x8e>
      HAL_JPEG_DecodeCpltCallback(hjpeg);
9000c288:	f7f5 faea 	bl	90001860 <HAL_JPEG_DecodeCpltCallback>
9000c28c:	e779      	b.n	9000c182 <HAL_JPEG_IRQHandler+0x26>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
9000c28e:	6a62      	ldr	r2, [r4, #36]	; 0x24
9000c290:	4620      	mov	r0, r4
9000c292:	69e1      	ldr	r1, [r4, #28]
9000c294:	f7f5 fa9a 	bl	900017cc <HAL_JPEG_DataReadyCallback>
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
9000c298:	6822      	ldr	r2, [r4, #0]
      hjpeg->JpegOutCount = 0;
9000c29a:	6265      	str	r5, [r4, #36]	; 0x24
9000c29c:	e7ad      	b.n	9000c1fa <HAL_JPEG_IRQHandler+0x9e>
9000c29e:	bf00      	nop

9000c2a0 <HAL_LTDC_Init>:
{
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
9000c2a0:	2800      	cmp	r0, #0
9000c2a2:	d067      	beq.n	9000c374 <HAL_LTDC_Init+0xd4>
{
9000c2a4:	b538      	push	{r3, r4, r5, lr}
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
9000c2a6:	f890 30a1 	ldrb.w	r3, [r0, #161]	; 0xa1
9000c2aa:	4604      	mov	r4, r0
9000c2ac:	f003 02ff 	and.w	r2, r3, #255	; 0xff
9000c2b0:	2b00      	cmp	r3, #0
9000c2b2:	d05a      	beq.n	9000c36a <HAL_LTDC_Init+0xca>
  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
9000c2b4:	68a0      	ldr	r0, [r4, #8]
  hltdc->State = HAL_LTDC_STATE_BUSY;
9000c2b6:	2102      	movs	r1, #2
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
9000c2b8:	e9d4 3200 	ldrd	r3, r2, [r4]
  hltdc->State = HAL_LTDC_STATE_BUSY;
9000c2bc:	f884 10a1 	strb.w	r1, [r4, #161]	; 0xa1
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
9000c2c0:	4302      	orrs	r2, r0
9000c2c2:	68e1      	ldr	r1, [r4, #12]
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
9000c2c4:	6998      	ldr	r0, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
9000c2c6:	430a      	orrs	r2, r1
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
9000c2c8:	6921      	ldr	r1, [r4, #16]
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
9000c2ca:	f020 4070 	bic.w	r0, r0, #4026531840	; 0xf0000000
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
9000c2ce:	430a      	orrs	r2, r1

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
9000c2d0:	4929      	ldr	r1, [pc, #164]	; (9000c378 <HAL_LTDC_Init+0xd8>)
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
9000c2d2:	6198      	str	r0, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
9000c2d4:	6998      	ldr	r0, [r3, #24]
9000c2d6:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.HorizontalSync << 16U);
9000c2d8:	6960      	ldr	r0, [r4, #20]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
9000c2da:	619a      	str	r2, [r3, #24]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
9000c2dc:	689a      	ldr	r2, [r3, #8]
9000c2de:	400a      	ands	r2, r1
9000c2e0:	609a      	str	r2, [r3, #8]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
9000c2e2:	689a      	ldr	r2, [r3, #8]
9000c2e4:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
9000c2e8:	69a0      	ldr	r0, [r4, #24]
9000c2ea:	4302      	orrs	r2, r0

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
9000c2ec:	69e0      	ldr	r0, [r4, #28]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
9000c2ee:	609a      	str	r2, [r3, #8]
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
9000c2f0:	68da      	ldr	r2, [r3, #12]
9000c2f2:	400a      	ands	r2, r1
9000c2f4:	60da      	str	r2, [r3, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
9000c2f6:	68da      	ldr	r2, [r3, #12]
9000c2f8:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
9000c2fc:	6a20      	ldr	r0, [r4, #32]
9000c2fe:	4302      	orrs	r2, r0

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
9000c300:	6a60      	ldr	r0, [r4, #36]	; 0x24
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
9000c302:	60da      	str	r2, [r3, #12]
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
9000c304:	691a      	ldr	r2, [r3, #16]
9000c306:	400a      	ands	r2, r1
9000c308:	611a      	str	r2, [r3, #16]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
9000c30a:	691a      	ldr	r2, [r3, #16]
9000c30c:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
9000c310:	6aa0      	ldr	r0, [r4, #40]	; 0x28
9000c312:	4302      	orrs	r2, r0

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
  tmp = (hltdc->Init.TotalWidth << 16U);
9000c314:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
9000c316:	611a      	str	r2, [r3, #16]
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
9000c318:	695a      	ldr	r2, [r3, #20]
9000c31a:	400a      	ands	r2, r1
9000c31c:	615a      	str	r2, [r3, #20]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
9000c31e:	695a      	ldr	r2, [r3, #20]
9000c320:	6b21      	ldr	r1, [r4, #48]	; 0x30
9000c322:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
9000c326:	430a      	orrs	r2, r1
9000c328:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
9000c32a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
9000c32c:	f894 0035 	ldrb.w	r0, [r4, #53]	; 0x35
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
9000c330:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
9000c334:	f894 1036 	ldrb.w	r1, [r4, #54]	; 0x36
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
9000c338:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
9000c33a:	6add      	ldr	r5, [r3, #44]	; 0x2c
9000c33c:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
9000c340:	432a      	orrs	r2, r5
9000c342:	ea42 2200 	orr.w	r2, r2, r0, lsl #8

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
9000c346:	2000      	movs	r0, #0
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
9000c348:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
9000c34c:	62da      	str	r2, [r3, #44]	; 0x2c
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
9000c34e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
9000c350:	f042 0206 	orr.w	r2, r2, #6
9000c354:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_LTDC_ENABLE(hltdc);
9000c356:	699a      	ldr	r2, [r3, #24]
9000c358:	f042 0201 	orr.w	r2, r2, #1
9000c35c:	619a      	str	r2, [r3, #24]

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
9000c35e:	2301      	movs	r3, #1
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
9000c360:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
  hltdc->State = HAL_LTDC_STATE_READY;
9000c364:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1

  return HAL_OK;
}
9000c368:	bd38      	pop	{r3, r4, r5, pc}
    hltdc->Lock = HAL_UNLOCKED;
9000c36a:	f880 20a0 	strb.w	r2, [r0, #160]	; 0xa0
    HAL_LTDC_MspInit(hltdc);
9000c36e:	f7f8 fb45 	bl	900049fc <HAL_LTDC_MspInit>
9000c372:	e79f      	b.n	9000c2b4 <HAL_LTDC_Init+0x14>
    return HAL_ERROR;
9000c374:	2001      	movs	r0, #1
}
9000c376:	4770      	bx	lr
9000c378:	f000f800 	.word	0xf000f800

9000c37c <HAL_LTDC_ErrorCallback>:
9000c37c:	4770      	bx	lr
9000c37e:	bf00      	nop

9000c380 <HAL_LTDC_ReloadEventCallback>:
9000c380:	4770      	bx	lr
9000c382:	bf00      	nop

9000c384 <HAL_LTDC_IRQHandler>:
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
9000c384:	6803      	ldr	r3, [r0, #0]
{
9000c386:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
9000c388:	6b9d      	ldr	r5, [r3, #56]	; 0x38
{
9000c38a:	4604      	mov	r4, r0
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
9000c38c:	6b5e      	ldr	r6, [r3, #52]	; 0x34

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
9000c38e:	076a      	lsls	r2, r5, #29
9000c390:	d501      	bpl.n	9000c396 <HAL_LTDC_IRQHandler+0x12>
9000c392:	0771      	lsls	r1, r6, #29
9000c394:	d41d      	bmi.n	9000c3d2 <HAL_LTDC_IRQHandler+0x4e>
    HAL_LTDC_ErrorCallback(hltdc);
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
9000c396:	07aa      	lsls	r2, r5, #30
9000c398:	d501      	bpl.n	9000c39e <HAL_LTDC_IRQHandler+0x1a>
9000c39a:	07b3      	lsls	r3, r6, #30
9000c39c:	d42d      	bmi.n	9000c3fa <HAL_LTDC_IRQHandler+0x76>
    HAL_LTDC_ErrorCallback(hltdc);
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
9000c39e:	07e8      	lsls	r0, r5, #31
9000c3a0:	d501      	bpl.n	9000c3a6 <HAL_LTDC_IRQHandler+0x22>
9000c3a2:	07f1      	lsls	r1, r6, #31
9000c3a4:	d440      	bmi.n	9000c428 <HAL_LTDC_IRQHandler+0xa4>
    HAL_LTDC_LineEventCallback(hltdc);
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
9000c3a6:	072a      	lsls	r2, r5, #28
9000c3a8:	d501      	bpl.n	9000c3ae <HAL_LTDC_IRQHandler+0x2a>
9000c3aa:	0733      	lsls	r3, r6, #28
9000c3ac:	d400      	bmi.n	9000c3b0 <HAL_LTDC_IRQHandler+0x2c>
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
9000c3ae:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
9000c3b0:	6823      	ldr	r3, [r4, #0]
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
9000c3b2:	2008      	movs	r0, #8
    hltdc->State = HAL_LTDC_STATE_READY;
9000c3b4:	2501      	movs	r5, #1
    __HAL_UNLOCK(hltdc);
9000c3b6:	2100      	movs	r1, #0
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
9000c3b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
9000c3ba:	f022 0208 	bic.w	r2, r2, #8
9000c3be:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
9000c3c0:	63d8      	str	r0, [r3, #60]	; 0x3c
    HAL_LTDC_ReloadEventCallback(hltdc);
9000c3c2:	4620      	mov	r0, r4
    hltdc->State = HAL_LTDC_STATE_READY;
9000c3c4:	f884 50a1 	strb.w	r5, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
9000c3c8:	f884 10a0 	strb.w	r1, [r4, #160]	; 0xa0
    HAL_LTDC_ReloadEventCallback(hltdc);
9000c3cc:	f7ff ffd8 	bl	9000c380 <HAL_LTDC_ReloadEventCallback>
}
9000c3d0:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
9000c3d2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
9000c3d4:	f022 0204 	bic.w	r2, r2, #4
9000c3d8:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
9000c3da:	2204      	movs	r2, #4
9000c3dc:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
9000c3de:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
9000c3e2:	f043 0301 	orr.w	r3, r3, #1
9000c3e6:	f8c0 30a4 	str.w	r3, [r0, #164]	; 0xa4
    __HAL_UNLOCK(hltdc);
9000c3ea:	2300      	movs	r3, #0
    hltdc->State = HAL_LTDC_STATE_ERROR;
9000c3ec:	f880 20a1 	strb.w	r2, [r0, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
9000c3f0:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
9000c3f4:	f7ff ffc2 	bl	9000c37c <HAL_LTDC_ErrorCallback>
9000c3f8:	e7cd      	b.n	9000c396 <HAL_LTDC_IRQHandler+0x12>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
9000c3fa:	6823      	ldr	r3, [r4, #0]
    HAL_LTDC_ErrorCallback(hltdc);
9000c3fc:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
9000c3fe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
9000c400:	f022 0202 	bic.w	r2, r2, #2
9000c404:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
9000c406:	2202      	movs	r2, #2
9000c408:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->State = HAL_LTDC_STATE_ERROR;
9000c40a:	2204      	movs	r2, #4
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
9000c40c:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
9000c410:	f043 0302 	orr.w	r3, r3, #2
9000c414:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
    __HAL_UNLOCK(hltdc);
9000c418:	2300      	movs	r3, #0
    hltdc->State = HAL_LTDC_STATE_ERROR;
9000c41a:	f884 20a1 	strb.w	r2, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
9000c41e:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
9000c422:	f7ff ffab 	bl	9000c37c <HAL_LTDC_ErrorCallback>
9000c426:	e7ba      	b.n	9000c39e <HAL_LTDC_IRQHandler+0x1a>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
9000c428:	6823      	ldr	r3, [r4, #0]
    HAL_LTDC_LineEventCallback(hltdc);
9000c42a:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
9000c42c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
9000c42e:	f022 0201 	bic.w	r2, r2, #1
9000c432:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
9000c434:	2201      	movs	r2, #1
9000c436:	63da      	str	r2, [r3, #60]	; 0x3c
    __HAL_UNLOCK(hltdc);
9000c438:	2300      	movs	r3, #0
    hltdc->State = HAL_LTDC_STATE_READY;
9000c43a:	f884 20a1 	strb.w	r2, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
9000c43e:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_LineEventCallback(hltdc);
9000c442:	f7f6 fa41 	bl	900028c8 <HAL_LTDC_LineEventCallback>
9000c446:	e7ae      	b.n	9000c3a6 <HAL_LTDC_IRQHandler+0x22>

9000c448 <HAL_LTDC_ConfigLayer>:
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
9000c448:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
9000c44c:	2b01      	cmp	r3, #1
9000c44e:	f000 80c0 	beq.w	9000c5d2 <HAL_LTDC_ConfigLayer+0x18a>

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
9000c452:	2302      	movs	r3, #2
{
9000c454:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
9000c458:	f04f 0e34 	mov.w	lr, #52	; 0x34
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
9000c45c:	f8d0 9000 	ldr.w	r9, [r0]
  hltdc->State = HAL_LTDC_STATE_BUSY;
9000c460:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
{
9000c464:	b083      	sub	sp, #12
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
9000c466:	fb0e 0e02 	mla	lr, lr, r2, r0
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
9000c46a:	01d2      	lsls	r2, r2, #7
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
9000c46c:	f8d9 300c 	ldr.w	r3, [r9, #12]
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
9000c470:	460c      	mov	r4, r1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
9000c472:	f102 0684 	add.w	r6, r2, #132	; 0x84
9000c476:	460d      	mov	r5, r1
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
9000c478:	f3c3 4b0b 	ubfx	fp, r3, #16, #12
9000c47c:	4680      	mov	r8, r0
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
9000c47e:	eb09 0c06 	add.w	ip, r9, r6
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
9000c482:	f10e 0e38 	add.w	lr, lr, #56	; 0x38
  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
9000c486:	f8df a160 	ldr.w	sl, [pc, #352]	; 9000c5e8 <HAL_LTDC_ConfigLayer+0x1a0>
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
9000c48a:	f8dc 3004 	ldr.w	r3, [ip, #4]
9000c48e:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
9000c492:	9301      	str	r3, [sp, #4]
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
9000c494:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
9000c496:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
9000c49a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
9000c49c:	686f      	ldr	r7, [r5, #4]
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
9000c49e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
9000c4a2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
9000c4a4:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
9000c4a8:	6823      	ldr	r3, [r4, #0]
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
9000c4aa:	44bb      	add	fp, r7
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
9000c4ac:	f8ce 3000 	str.w	r3, [lr]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
9000c4b0:	9b01      	ldr	r3, [sp, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
9000c4b2:	682a      	ldr	r2, [r5, #0]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
9000c4b4:	f8cc 3004 	str.w	r3, [ip, #4]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
9000c4b8:	f8d9 300c 	ldr.w	r3, [r9, #12]
9000c4bc:	1c51      	adds	r1, r2, #1
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
9000c4be:	68e8      	ldr	r0, [r5, #12]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
9000c4c0:	f3c3 430b 	ubfx	r3, r3, #16, #12
  tmp2 = (pLayerCfg->Alpha0 << 24U);
9000c4c4:	f8d5 e018 	ldr.w	lr, [r5, #24]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
9000c4c8:	440b      	add	r3, r1
9000c4ca:	ea43 430b 	orr.w	r3, r3, fp, lsl #16
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
9000c4ce:	f8cc 3004 	str.w	r3, [ip, #4]
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
9000c4d2:	f8d9 100c 	ldr.w	r1, [r9, #12]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
9000c4d6:	f8dc 3008 	ldr.w	r3, [ip, #8]
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
9000c4da:	f3c1 010a 	ubfx	r1, r1, #0, #11
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
9000c4de:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
9000c4e2:	4401      	add	r1, r0
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
9000c4e4:	f8cc 3008 	str.w	r3, [ip, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
9000c4e8:	68ab      	ldr	r3, [r5, #8]
9000c4ea:	f8d9 000c 	ldr.w	r0, [r9, #12]
9000c4ee:	3301      	adds	r3, #1
9000c4f0:	f3c0 000a 	ubfx	r0, r0, #0, #11
9000c4f4:	4403      	add	r3, r0
9000c4f6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
9000c4fa:	6929      	ldr	r1, [r5, #16]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
9000c4fc:	f8cc 3008 	str.w	r3, [ip, #8]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
9000c500:	f8dc 3010 	ldr.w	r3, [ip, #16]
9000c504:	f023 0307 	bic.w	r3, r3, #7
9000c508:	f8cc 3010 	str.w	r3, [ip, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
9000c50c:	f8cc 1010 	str.w	r1, [ip, #16]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
9000c510:	f8dc 3018 	ldr.w	r3, [ip, #24]
9000c514:	2300      	movs	r3, #0
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
9000c516:	f895 0032 	ldrb.w	r0, [r5, #50]	; 0x32
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
9000c51a:	f895 4031 	ldrb.w	r4, [r5, #49]	; 0x31
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
9000c51e:	f8cc 3018 	str.w	r3, [ip, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
9000c522:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
9000c526:	ea43 630e 	orr.w	r3, r3, lr, lsl #24
9000c52a:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
9000c52e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
9000c532:	f8cc 3018 	str.w	r3, [ip, #24]
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
9000c536:	f8dc 3014 	ldr.w	r3, [ip, #20]
9000c53a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
9000c53e:	f8cc 3014 	str.w	r3, [ip, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
9000c542:	696b      	ldr	r3, [r5, #20]
9000c544:	f8cc 3014 	str.w	r3, [ip, #20]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
9000c548:	f8dc 001c 	ldr.w	r0, [ip, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
9000c54c:	69eb      	ldr	r3, [r5, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
9000c54e:	ea00 0a0a 	and.w	sl, r0, sl
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
9000c552:	6a28      	ldr	r0, [r5, #32]
9000c554:	4303      	orrs	r3, r0
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
9000c556:	f8cc a01c 	str.w	sl, [ip, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
9000c55a:	f8cc 301c 	str.w	r3, [ip, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
9000c55e:	f8dc 3028 	ldr.w	r3, [ip, #40]	; 0x28
9000c562:	2300      	movs	r3, #0
9000c564:	f8cc 3028 	str.w	r3, [ip, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
9000c568:	6a6b      	ldr	r3, [r5, #36]	; 0x24
9000c56a:	f8cc 3028 	str.w	r3, [ip, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
9000c56e:	bb59      	cbnz	r1, 9000c5c8 <HAL_LTDC_ConfigLayer+0x180>
  {
    tmp = 4U;
9000c570:	2304      	movs	r3, #4
    tmp = 1U;
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
9000c572:	1abf      	subs	r7, r7, r2
9000c574:	6aaa      	ldr	r2, [r5, #40]	; 0x28
9000c576:	fb03 f707 	mul.w	r7, r3, r7
9000c57a:	fb02 f303 	mul.w	r3, r2, r3
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
9000c57e:	6aea      	ldr	r2, [r5, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
9000c580:	3707      	adds	r7, #7
9000c582:	ea47 4703 	orr.w	r7, r7, r3, lsl #16
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
9000c586:	f8dc 302c 	ldr.w	r3, [ip, #44]	; 0x2c
9000c58a:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
9000c58e:	f8cc 302c 	str.w	r3, [ip, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
9000c592:	f8cc 702c 	str.w	r7, [ip, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
9000c596:	4b12      	ldr	r3, [pc, #72]	; (9000c5e0 <HAL_LTDC_ConfigLayer+0x198>)
9000c598:	f8dc 1030 	ldr.w	r1, [ip, #48]	; 0x30
9000c59c:	400b      	ands	r3, r1
9000c59e:	f8cc 3030 	str.w	r3, [ip, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
9000c5a2:	f8cc 2030 	str.w	r2, [ip, #48]	; 0x30
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
9000c5a6:	2201      	movs	r2, #1

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
9000c5a8:	f859 3006 	ldr.w	r3, [r9, r6]
9000c5ac:	4313      	orrs	r3, r2
9000c5ae:	f849 3006 	str.w	r3, [r9, r6]
  __HAL_UNLOCK(hltdc);
9000c5b2:	2300      	movs	r3, #0
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
9000c5b4:	f8c9 2024 	str.w	r2, [r9, #36]	; 0x24
  return HAL_OK;
9000c5b8:	4618      	mov	r0, r3
  hltdc->State  = HAL_LTDC_STATE_READY;
9000c5ba:	f888 20a1 	strb.w	r2, [r8, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
9000c5be:	f888 30a0 	strb.w	r3, [r8, #160]	; 0xa0
}
9000c5c2:	b003      	add	sp, #12
9000c5c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
9000c5c8:	3901      	subs	r1, #1
9000c5ca:	2906      	cmp	r1, #6
9000c5cc:	d903      	bls.n	9000c5d6 <HAL_LTDC_ConfigLayer+0x18e>
  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
9000c5ce:	2301      	movs	r3, #1
9000c5d0:	e7cf      	b.n	9000c572 <HAL_LTDC_ConfigLayer+0x12a>
  __HAL_LOCK(hltdc);
9000c5d2:	2002      	movs	r0, #2
}
9000c5d4:	4770      	bx	lr
9000c5d6:	4b03      	ldr	r3, [pc, #12]	; (9000c5e4 <HAL_LTDC_ConfigLayer+0x19c>)
9000c5d8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
9000c5dc:	e7c9      	b.n	9000c572 <HAL_LTDC_ConfigLayer+0x12a>
9000c5de:	bf00      	nop
9000c5e0:	fffff800 	.word	0xfffff800
9000c5e4:	9002b900 	.word	0x9002b900
9000c5e8:	fffff8f8 	.word	0xfffff8f8

9000c5ec <HAL_LTDC_ProgramLineEvent>:
  __HAL_LOCK(hltdc);
9000c5ec:	f890 20a0 	ldrb.w	r2, [r0, #160]	; 0xa0
9000c5f0:	2a01      	cmp	r2, #1
9000c5f2:	d019      	beq.n	9000c628 <HAL_LTDC_ProgramLineEvent+0x3c>
  __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
9000c5f4:	6802      	ldr	r2, [r0, #0]
9000c5f6:	4603      	mov	r3, r0
  hltdc->State = HAL_LTDC_STATE_BUSY;
9000c5f8:	2002      	movs	r0, #2
  __HAL_UNLOCK(hltdc);
9000c5fa:	f04f 0c00 	mov.w	ip, #0
{
9000c5fe:	b410      	push	{r4}
  hltdc->State = HAL_LTDC_STATE_BUSY;
9000c600:	f883 00a1 	strb.w	r0, [r3, #161]	; 0xa1
  __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
9000c604:	6b50      	ldr	r0, [r2, #52]	; 0x34
  LTDC->LIPCR = (uint32_t)Line;
9000c606:	4c09      	ldr	r4, [pc, #36]	; (9000c62c <HAL_LTDC_ProgramLineEvent+0x40>)
  __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
9000c608:	f020 0001 	bic.w	r0, r0, #1
9000c60c:	6350      	str	r0, [r2, #52]	; 0x34
  hltdc->State = HAL_LTDC_STATE_READY;
9000c60e:	2001      	movs	r0, #1
  LTDC->LIPCR = (uint32_t)Line;
9000c610:	6421      	str	r1, [r4, #64]	; 0x40
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_LI);
9000c612:	6b51      	ldr	r1, [r2, #52]	; 0x34
9000c614:	4301      	orrs	r1, r0
9000c616:	6351      	str	r1, [r2, #52]	; 0x34
  hltdc->State = HAL_LTDC_STATE_READY;
9000c618:	f883 00a1 	strb.w	r0, [r3, #161]	; 0xa1
  return HAL_OK;
9000c61c:	4660      	mov	r0, ip
  __HAL_UNLOCK(hltdc);
9000c61e:	f883 c0a0 	strb.w	ip, [r3, #160]	; 0xa0
}
9000c622:	f85d 4b04 	ldr.w	r4, [sp], #4
9000c626:	4770      	bx	lr
  __HAL_LOCK(hltdc);
9000c628:	2002      	movs	r0, #2
}
9000c62a:	4770      	bx	lr
9000c62c:	50001000 	.word	0x50001000

9000c630 <HAL_MDMA_Init>:
  * @param  hmdma: Pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
9000c630:	b538      	push	{r3, r4, r5, lr}
9000c632:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
9000c634:	f7fd f984 	bl	90009940 <HAL_GetTick>

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
9000c638:	2c00      	cmp	r4, #0
9000c63a:	d05a      	beq.n	9000c6f2 <HAL_MDMA_Init+0xc2>

  /* Change MDMA peripheral state */
  hmdma->State = HAL_MDMA_STATE_BUSY;

  /* Disable the MDMA channel */
  __HAL_MDMA_DISABLE(hmdma);
9000c63c:	6823      	ldr	r3, [r4, #0]
  hmdma->State = HAL_MDMA_STATE_BUSY;
9000c63e:	2202      	movs	r2, #2
  __HAL_UNLOCK(hmdma);
9000c640:	2100      	movs	r1, #0
9000c642:	4605      	mov	r5, r0
  hmdma->State = HAL_MDMA_STATE_BUSY;
9000c644:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  __HAL_UNLOCK(hmdma);
9000c648:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c
  __HAL_MDMA_DISABLE(hmdma);
9000c64c:	68da      	ldr	r2, [r3, #12]
9000c64e:	f022 0201 	bic.w	r2, r2, #1
9000c652:	60da      	str	r2, [r3, #12]

  /* Check if the MDMA channel is effectively disabled */
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
9000c654:	e005      	b.n	9000c662 <HAL_MDMA_Init+0x32>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_MDMA_ABORT)
9000c656:	f7fd f973 	bl	90009940 <HAL_GetTick>
9000c65a:	1b43      	subs	r3, r0, r5
9000c65c:	2b05      	cmp	r3, #5
9000c65e:	d841      	bhi.n	9000c6e4 <HAL_MDMA_Init+0xb4>
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
9000c660:	6823      	ldr	r3, [r4, #0]
9000c662:	68da      	ldr	r2, [r3, #12]
9000c664:	07d2      	lsls	r2, r2, #31
9000c666:	d4f6      	bmi.n	9000c656 <HAL_MDMA_Init+0x26>
  /* Write new CTCR Register value */
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
                           hmdma->Init.DestBurst                                   | \
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
9000c668:	e9d4 2505 	ldrd	r2, r5, [r4, #20]
9000c66c:	69e0      	ldr	r0, [r4, #28]
9000c66e:	432a      	orrs	r2, r5
  hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
9000c670:	68e1      	ldr	r1, [r4, #12]
9000c672:	6925      	ldr	r5, [r4, #16]
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
9000c674:	4302      	orrs	r2, r0
9000c676:	6a20      	ldr	r0, [r4, #32]
  hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
9000c678:	4329      	orrs	r1, r5
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
9000c67a:	4302      	orrs	r2, r0
9000c67c:	6a60      	ldr	r0, [r4, #36]	; 0x24
9000c67e:	4302      	orrs	r2, r0
9000c680:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
9000c682:	4302      	orrs	r2, r0
9000c684:	6b20      	ldr	r0, [r4, #48]	; 0x30
9000c686:	4302      	orrs	r2, r0
9000c688:	68a0      	ldr	r0, [r4, #8]
9000c68a:	4302      	orrs	r2, r0
9000c68c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
9000c68e:	3801      	subs	r0, #1
9000c690:	ea42 4280 	orr.w	r2, r2, r0, lsl #18
                           hmdma->Init.TransferTriggerMode;

  /* If SW request set the CTCR register to SW Request Mode */
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
9000c694:	6860      	ldr	r0, [r4, #4]
  hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
9000c696:	60d9      	str	r1, [r3, #12]
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
9000c698:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
9000c69c:	611a      	str	r2, [r3, #16]
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
9000c69e:	d103      	bne.n	9000c6a8 <HAL_MDMA_Init+0x78>
    -If the request is done by SW : BWM could be set to 1 or 0.
    -If the request is done by a peripheral :
    If mask address not set (0) => BWM must be set to 0
    If mask address set (different than 0) => BWM could be set to 1 or 0
    */
    hmdma->Instance->CTCR |= (MDMA_CTCR_SWRM | MDMA_CTCR_BWM);
9000c6a0:	691a      	ldr	r2, [r3, #16]
9000c6a2:	f042 4240 	orr.w	r2, r2, #3221225472	; 0xc0000000
9000c6a6:	611a      	str	r2, [r3, #16]
  }

  /* Reset CBNDTR Register */
  hmdma->Instance->CBNDTR = 0;
9000c6a8:	2100      	movs	r1, #0

  /* if block source address offset is negative set the Block Repeat Source address Update Mode to decrement */
  if(hmdma->Init.SourceBlockAddressOffset < 0)
9000c6aa:	6b62      	ldr	r2, [r4, #52]	; 0x34
9000c6ac:	428a      	cmp	r2, r1
  hmdma->Instance->CBNDTR = 0;
9000c6ae:	6159      	str	r1, [r3, #20]
  if(hmdma->Init.SourceBlockAddressOffset < 0)
9000c6b0:	db30      	blt.n	9000c714 <HAL_MDMA_Init+0xe4>
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
  }
  else
  {
    /* Write new CBRUR Register value : source repeat block offset */
    hmdma->Instance->CBRUR = (((uint32_t)hmdma->Init.SourceBlockAddressOffset) & 0x0000FFFFU);
9000c6b2:	b292      	uxth	r2, r2
9000c6b4:	621a      	str	r2, [r3, #32]
  }

  /* If block destination address offset is negative set the Block Repeat destination address Update Mode to decrement */
  if(hmdma->Init.DestBlockAddressOffset < 0)
9000c6b6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
9000c6b8:	2a00      	cmp	r2, #0
9000c6ba:	db1c      	blt.n	9000c6f6 <HAL_MDMA_Init+0xc6>
    hmdma->Instance->CBRUR |= ((blockoffset & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
  }
  else
  {
    /*write new CBRUR Register value : destination repeat block offset */
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
9000c6bc:	6a19      	ldr	r1, [r3, #32]
  }

  /* if HW request set the HW request and the requet CleraMask and ClearData MaskData, */
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
9000c6be:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
9000c6c2:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
9000c6c6:	621a      	str	r2, [r3, #32]
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
9000c6c8:	d021      	beq.n	9000c70e <HAL_MDMA_Init+0xde>
  {
    /* Set the HW request in CTRB register  */
    hmdma->Instance->CTBR = hmdma->Init.Request & MDMA_CTBR_TSEL;
9000c6ca:	b2c0      	uxtb	r0, r0
9000c6cc:	6298      	str	r0, [r3, #40]	; 0x28
  {
    hmdma->Instance->CTBR = 0;
  }

  /* Write Link Address Register */
  hmdma->Instance->CLAR =  0;
9000c6ce:	2200      	movs	r2, #0
  hmdma->State = HAL_MDMA_STATE_READY;
9000c6d0:	2101      	movs	r1, #1
  hmdma->Instance->CLAR =  0;
9000c6d2:	625a      	str	r2, [r3, #36]	; 0x24
  return HAL_OK;
9000c6d4:	4610      	mov	r0, r2
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
9000c6d6:	66a2      	str	r2, [r4, #104]	; 0x68
  hmdma->LinkedListNodeCounter  = 0;
9000c6d8:	6662      	str	r2, [r4, #100]	; 0x64
  hmdma->State = HAL_MDMA_STATE_READY;
9000c6da:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
  hmdma->LastLinkedListNodeAddress   = 0;
9000c6de:	e9c4 2217 	strd	r2, r2, [r4, #92]	; 0x5c
}
9000c6e2:	bd38      	pop	{r3, r4, r5, pc}
      hmdma->ErrorCode = HAL_MDMA_ERROR_TIMEOUT;
9000c6e4:	2240      	movs	r2, #64	; 0x40
      hmdma->State = HAL_MDMA_STATE_ERROR;
9000c6e6:	2303      	movs	r3, #3
      return HAL_ERROR;
9000c6e8:	2001      	movs	r0, #1
      hmdma->ErrorCode = HAL_MDMA_ERROR_TIMEOUT;
9000c6ea:	66a2      	str	r2, [r4, #104]	; 0x68
      hmdma->State = HAL_MDMA_STATE_ERROR;
9000c6ec:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
9000c6f0:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
9000c6f2:	2001      	movs	r0, #1
}
9000c6f4:	bd38      	pop	{r3, r4, r5, pc}
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
9000c6f6:	6959      	ldr	r1, [r3, #20]
    blockoffset = (uint32_t)(- hmdma->Init.DestBlockAddressOffset);
9000c6f8:	4252      	negs	r2, r2
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
9000c6fa:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
9000c6fe:	f441 2100 	orr.w	r1, r1, #524288	; 0x80000
9000c702:	6159      	str	r1, [r3, #20]
    hmdma->Instance->CBRUR |= ((blockoffset & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
9000c704:	6a19      	ldr	r1, [r3, #32]
9000c706:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
9000c70a:	621a      	str	r2, [r3, #32]
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
9000c70c:	d1dd      	bne.n	9000c6ca <HAL_MDMA_Init+0x9a>
    hmdma->Instance->CTBR = 0;
9000c70e:	2200      	movs	r2, #0
9000c710:	629a      	str	r2, [r3, #40]	; 0x28
9000c712:	e7dc      	b.n	9000c6ce <HAL_MDMA_Init+0x9e>
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
9000c714:	6959      	ldr	r1, [r3, #20]
    blockoffset = (uint32_t)(- hmdma->Init.SourceBlockAddressOffset);
9000c716:	4252      	negs	r2, r2
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
9000c718:	f441 2180 	orr.w	r1, r1, #262144	; 0x40000
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
9000c71c:	b292      	uxth	r2, r2
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
9000c71e:	6159      	str	r1, [r3, #20]
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
9000c720:	621a      	str	r2, [r3, #32]
9000c722:	e7c8      	b.n	9000c6b6 <HAL_MDMA_Init+0x86>

9000c724 <HAL_MDMA_DeInit>:
  if(hmdma == NULL)
9000c724:	b1f8      	cbz	r0, 9000c766 <HAL_MDMA_DeInit+0x42>
  __HAL_MDMA_DISABLE(hmdma);
9000c726:	6802      	ldr	r2, [r0, #0]
9000c728:	4601      	mov	r1, r0
  hmdma->Instance->CCR  = 0;
9000c72a:	2300      	movs	r3, #0
  __HAL_MDMA_DISABLE(hmdma);
9000c72c:	68d0      	ldr	r0, [r2, #12]
{
9000c72e:	b410      	push	{r4}
  __HAL_MDMA_DISABLE(hmdma);
9000c730:	f020 0001 	bic.w	r0, r0, #1
  __HAL_MDMA_CLEAR_FLAG(hmdma,(MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_FLAG_BRT | MDMA_FLAG_BT | MDMA_FLAG_BFTC));
9000c734:	241f      	movs	r4, #31
  __HAL_MDMA_DISABLE(hmdma);
9000c736:	60d0      	str	r0, [r2, #12]
  return HAL_OK;
9000c738:	4618      	mov	r0, r3
  hmdma->Instance->CCR  = 0;
9000c73a:	60d3      	str	r3, [r2, #12]
  hmdma->Instance->CTCR = 0;
9000c73c:	6113      	str	r3, [r2, #16]
  hmdma->Instance->CBNDTR = 0;
9000c73e:	6153      	str	r3, [r2, #20]
  hmdma->Instance->CSAR = 0;
9000c740:	6193      	str	r3, [r2, #24]
  hmdma->Instance->CDAR = 0;
9000c742:	61d3      	str	r3, [r2, #28]
  hmdma->Instance->CBRUR = 0;
9000c744:	6213      	str	r3, [r2, #32]
  hmdma->Instance->CLAR = 0;
9000c746:	6253      	str	r3, [r2, #36]	; 0x24
  hmdma->Instance->CTBR = 0;
9000c748:	6293      	str	r3, [r2, #40]	; 0x28
  hmdma->Instance->CMAR = 0;
9000c74a:	6313      	str	r3, [r2, #48]	; 0x30
  hmdma->Instance->CMDR = 0;
9000c74c:	6353      	str	r3, [r2, #52]	; 0x34
  __HAL_MDMA_CLEAR_FLAG(hmdma,(MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_FLAG_BRT | MDMA_FLAG_BT | MDMA_FLAG_BFTC));
9000c74e:	6054      	str	r4, [r2, #4]
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
9000c750:	668b      	str	r3, [r1, #104]	; 0x68
  __HAL_UNLOCK(hmdma);
9000c752:	f881 303c 	strb.w	r3, [r1, #60]	; 0x3c
  hmdma->State = HAL_MDMA_STATE_RESET;
9000c756:	f881 303d 	strb.w	r3, [r1, #61]	; 0x3d
}
9000c75a:	f85d 4b04 	ldr.w	r4, [sp], #4
  hmdma->LinkedListNodeCounter  = 0;
9000c75e:	664b      	str	r3, [r1, #100]	; 0x64
  hmdma->LastLinkedListNodeAddress   = 0;
9000c760:	e9c1 3317 	strd	r3, r3, [r1, #92]	; 0x5c
}
9000c764:	4770      	bx	lr
    return HAL_ERROR;
9000c766:	2001      	movs	r0, #1
}
9000c768:	4770      	bx	lr
9000c76a:	bf00      	nop

9000c76c <HAL_MDMA_ConfigPostRequestMask>:
  if(hmdma == NULL)
9000c76c:	b310      	cbz	r0, 9000c7b4 <HAL_MDMA_ConfigPostRequestMask+0x48>
9000c76e:	4603      	mov	r3, r0
  __HAL_LOCK(hmdma);
9000c770:	f890 003c 	ldrb.w	r0, [r0, #60]	; 0x3c
9000c774:	2801      	cmp	r0, #1
9000c776:	d01f      	beq.n	9000c7b8 <HAL_MDMA_ConfigPostRequestMask+0x4c>
{
9000c778:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(hmdma);
9000c77a:	f04f 0e01 	mov.w	lr, #1
  if(HAL_MDMA_STATE_READY == hmdma->State)
9000c77e:	f893 c03d 	ldrb.w	ip, [r3, #61]	; 0x3d
9000c782:	45f4      	cmp	ip, lr
9000c784:	fa5f f08c 	uxtb.w	r0, ip
  __HAL_LOCK(hmdma);
9000c788:	f883 e03c 	strb.w	lr, [r3, #60]	; 0x3c
  if(HAL_MDMA_STATE_READY == hmdma->State)
9000c78c:	d004      	beq.n	9000c798 <HAL_MDMA_ConfigPostRequestMask+0x2c>
    status =  HAL_ERROR;
9000c78e:	4670      	mov	r0, lr
  __HAL_UNLOCK(hmdma);
9000c790:	2200      	movs	r2, #0
9000c792:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
9000c796:	bd30      	pop	{r4, r5, pc}
    if((hmdma->Instance->CTCR & MDMA_CTCR_SWRM) == 0U)
9000c798:	681d      	ldr	r5, [r3, #0]
9000c79a:	692c      	ldr	r4, [r5, #16]
9000c79c:	f014 4480 	ands.w	r4, r4, #1073741824	; 0x40000000
9000c7a0:	d1f6      	bne.n	9000c790 <HAL_MDMA_ConfigPostRequestMask+0x24>
      hmdma->Instance->CMAR = MaskAddress;
9000c7a2:	6329      	str	r1, [r5, #48]	; 0x30
      hmdma->Instance->CMDR = MaskData;
9000c7a4:	636a      	str	r2, [r5, #52]	; 0x34
        hmdma->Instance->CTCR &=  ~MDMA_CTCR_BWM;
9000c7a6:	692a      	ldr	r2, [r5, #16]
      if(MaskAddress == 0U)
9000c7a8:	b941      	cbnz	r1, 9000c7bc <HAL_MDMA_ConfigPostRequestMask+0x50>
        hmdma->Instance->CTCR &=  ~MDMA_CTCR_BWM;
9000c7aa:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
  HAL_StatusTypeDef  status = HAL_OK;
9000c7ae:	4608      	mov	r0, r1
        hmdma->Instance->CTCR &=  ~MDMA_CTCR_BWM;
9000c7b0:	612a      	str	r2, [r5, #16]
9000c7b2:	e7ed      	b.n	9000c790 <HAL_MDMA_ConfigPostRequestMask+0x24>
    return HAL_ERROR;
9000c7b4:	2001      	movs	r0, #1
9000c7b6:	4770      	bx	lr
  __HAL_LOCK(hmdma);
9000c7b8:	2002      	movs	r0, #2
}
9000c7ba:	4770      	bx	lr
        hmdma->Instance->CTCR |=  MDMA_CTCR_BWM;
9000c7bc:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
  HAL_StatusTypeDef  status = HAL_OK;
9000c7c0:	4620      	mov	r0, r4
        hmdma->Instance->CTCR |=  MDMA_CTCR_BWM;
9000c7c2:	612a      	str	r2, [r5, #16]
9000c7c4:	e7e4      	b.n	9000c790 <HAL_MDMA_ConfigPostRequestMask+0x24>
9000c7c6:	bf00      	nop

9000c7c8 <HAL_MDMA_Start_IT>:
  if(hmdma == NULL)
9000c7c8:	2800      	cmp	r0, #0
9000c7ca:	d06f      	beq.n	9000c8ac <HAL_MDMA_Start_IT+0xe4>
9000c7cc:	4684      	mov	ip, r0
  __HAL_LOCK(hmdma);
9000c7ce:	f890 003c 	ldrb.w	r0, [r0, #60]	; 0x3c
9000c7d2:	2801      	cmp	r0, #1
9000c7d4:	d072      	beq.n	9000c8bc <HAL_MDMA_Start_IT+0xf4>
9000c7d6:	2001      	movs	r0, #1
9000c7d8:	f88c 003c 	strb.w	r0, [ip, #60]	; 0x3c
  if(HAL_MDMA_STATE_READY == hmdma->State)
9000c7dc:	f89c 003d 	ldrb.w	r0, [ip, #61]	; 0x3d
9000c7e0:	2801      	cmp	r0, #1
9000c7e2:	d004      	beq.n	9000c7ee <HAL_MDMA_Start_IT+0x26>
    __HAL_UNLOCK(hmdma);
9000c7e4:	2300      	movs	r3, #0
    return HAL_BUSY;
9000c7e6:	2002      	movs	r0, #2
    __HAL_UNLOCK(hmdma);
9000c7e8:	f88c 303c 	strb.w	r3, [ip, #60]	; 0x3c
    return HAL_BUSY;
9000c7ec:	4770      	bx	lr
    hmdma->State = HAL_MDMA_STATE_BUSY;
9000c7ee:	2002      	movs	r0, #2
  MODIFY_REG(hmdma->Instance->CBNDTR ,MDMA_CBNDTR_BNDT, (BlockDataLength & MDMA_CBNDTR_BNDT));
9000c7f0:	f3c3 0310 	ubfx	r3, r3, #0, #17
  if((addressMask == 0x20000000U) || (addressMask == 0x00000000U))
9000c7f4:	f011 4f5f 	tst.w	r1, #3741319168	; 0xdf000000
{
9000c7f8:	b530      	push	{r4, r5, lr}
  MODIFY_REG(hmdma->Instance->CBNDTR , MDMA_CBNDTR_BRC , ((BlockCount - 1U) << MDMA_CBNDTR_BRC_Pos) & MDMA_CBNDTR_BRC);
9000c7fa:	9d03      	ldr	r5, [sp, #12]
    hmdma->State = HAL_MDMA_STATE_BUSY;
9000c7fc:	f88c 003d 	strb.w	r0, [ip, #61]	; 0x3d
    hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
9000c800:	f04f 0000 	mov.w	r0, #0
    __HAL_MDMA_DISABLE(hmdma);
9000c804:	f8dc 4000 	ldr.w	r4, [ip]
  MODIFY_REG(hmdma->Instance->CBNDTR , MDMA_CBNDTR_BRC , ((BlockCount - 1U) << MDMA_CBNDTR_BRC_Pos) & MDMA_CBNDTR_BRC);
9000c808:	f105 3eff 	add.w	lr, r5, #4294967295
    hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
9000c80c:	f8cc 0068 	str.w	r0, [ip, #104]	; 0x68
  MODIFY_REG(hmdma->Instance->CBNDTR ,MDMA_CBNDTR_BNDT, (BlockDataLength & MDMA_CBNDTR_BNDT));
9000c810:	f5a0 3000 	sub.w	r0, r0, #131072	; 0x20000
    __HAL_MDMA_DISABLE(hmdma);
9000c814:	68e5      	ldr	r5, [r4, #12]
9000c816:	f025 0501 	bic.w	r5, r5, #1
9000c81a:	60e5      	str	r5, [r4, #12]
  MODIFY_REG(hmdma->Instance->CBNDTR ,MDMA_CBNDTR_BNDT, (BlockDataLength & MDMA_CBNDTR_BNDT));
9000c81c:	6965      	ldr	r5, [r4, #20]
9000c81e:	ea00 0005 	and.w	r0, r0, r5
9000c822:	ea40 0003 	orr.w	r0, r0, r3
9000c826:	6160      	str	r0, [r4, #20]
  MODIFY_REG(hmdma->Instance->CBNDTR , MDMA_CBNDTR_BRC , ((BlockCount - 1U) << MDMA_CBNDTR_BRC_Pos) & MDMA_CBNDTR_BRC);
9000c828:	6963      	ldr	r3, [r4, #20]
9000c82a:	f3c3 0313 	ubfx	r3, r3, #0, #20
9000c82e:	ea43 530e 	orr.w	r3, r3, lr, lsl #20
9000c832:	6163      	str	r3, [r4, #20]
  __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_CISR_BRTIF | MDMA_CISR_BTIF | MDMA_CISR_TCIF);
9000c834:	f04f 031f 	mov.w	r3, #31
9000c838:	6063      	str	r3, [r4, #4]
  hmdma->Instance->CDAR = DstAddress;
9000c83a:	61e2      	str	r2, [r4, #28]
  hmdma->Instance->CSAR = SrcAddress;
9000c83c:	61a1      	str	r1, [r4, #24]
    hmdma->Instance->CTBR |= MDMA_CTBR_SBUS;
9000c83e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
9000c840:	bf0c      	ite	eq
9000c842:	f443 3380 	orreq.w	r3, r3, #65536	; 0x10000
    hmdma->Instance->CTBR &= (~MDMA_CTBR_SBUS);
9000c846:	f423 3380 	bicne.w	r3, r3, #65536	; 0x10000
  if((addressMask == 0x20000000U) || (addressMask == 0x00000000U))
9000c84a:	f012 4f5f 	tst.w	r2, #3741319168	; 0xdf000000
    if(hmdma->XferBlockCpltCallback != NULL)
9000c84e:	f8dc 204c 	ldr.w	r2, [ip, #76]	; 0x4c
    hmdma->Instance->CTBR &= (~MDMA_CTBR_SBUS);
9000c852:	62a3      	str	r3, [r4, #40]	; 0x28
    hmdma->Instance->CTBR |= MDMA_CTBR_DBUS;
9000c854:	6aa3      	ldr	r3, [r4, #40]	; 0x28
9000c856:	bf0c      	ite	eq
9000c858:	f443 3300 	orreq.w	r3, r3, #131072	; 0x20000
    hmdma->Instance->CTBR &= (~MDMA_CTBR_DBUS);
9000c85c:	f423 3300 	bicne.w	r3, r3, #131072	; 0x20000
9000c860:	62a3      	str	r3, [r4, #40]	; 0x28
  hmdma->Instance->CLAR = (uint32_t)hmdma->FirstLinkedListNodeAddress;
9000c862:	f8dc 305c 	ldr.w	r3, [ip, #92]	; 0x5c
9000c866:	6263      	str	r3, [r4, #36]	; 0x24
    __HAL_MDMA_ENABLE_IT(hmdma, (MDMA_IT_TE | MDMA_IT_CTC));
9000c868:	68e3      	ldr	r3, [r4, #12]
9000c86a:	f043 0306 	orr.w	r3, r3, #6
9000c86e:	60e3      	str	r3, [r4, #12]
    if(hmdma->XferBlockCpltCallback != NULL)
9000c870:	b11a      	cbz	r2, 9000c87a <HAL_MDMA_Start_IT+0xb2>
      __HAL_MDMA_ENABLE_IT(hmdma, MDMA_IT_BT);
9000c872:	68e3      	ldr	r3, [r4, #12]
9000c874:	f043 0310 	orr.w	r3, r3, #16
9000c878:	60e3      	str	r3, [r4, #12]
    if(hmdma->XferRepeatBlockCpltCallback != NULL)
9000c87a:	f8dc 3050 	ldr.w	r3, [ip, #80]	; 0x50
9000c87e:	b11b      	cbz	r3, 9000c888 <HAL_MDMA_Start_IT+0xc0>
      __HAL_MDMA_ENABLE_IT(hmdma, MDMA_IT_BRT);
9000c880:	68e3      	ldr	r3, [r4, #12]
9000c882:	f043 0308 	orr.w	r3, r3, #8
9000c886:	60e3      	str	r3, [r4, #12]
    if(hmdma->XferBufferCpltCallback != NULL)
9000c888:	f8dc 3048 	ldr.w	r3, [ip, #72]	; 0x48
9000c88c:	b11b      	cbz	r3, 9000c896 <HAL_MDMA_Start_IT+0xce>
      __HAL_MDMA_ENABLE_IT(hmdma, MDMA_IT_BFTC);
9000c88e:	68e3      	ldr	r3, [r4, #12]
9000c890:	f043 0320 	orr.w	r3, r3, #32
9000c894:	60e3      	str	r3, [r4, #12]
    __HAL_MDMA_ENABLE(hmdma);
9000c896:	68e3      	ldr	r3, [r4, #12]
    if(hmdma->Init.Request == MDMA_REQUEST_SW)
9000c898:	f8dc 2004 	ldr.w	r2, [ip, #4]
    __HAL_MDMA_ENABLE(hmdma);
9000c89c:	f043 0301 	orr.w	r3, r3, #1
    if(hmdma->Init.Request == MDMA_REQUEST_SW)
9000c8a0:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
    __HAL_MDMA_ENABLE(hmdma);
9000c8a4:	60e3      	str	r3, [r4, #12]
    if(hmdma->Init.Request == MDMA_REQUEST_SW)
9000c8a6:	d003      	beq.n	9000c8b0 <HAL_MDMA_Start_IT+0xe8>
  return HAL_OK;
9000c8a8:	2000      	movs	r0, #0
}
9000c8aa:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
9000c8ac:	2001      	movs	r0, #1
9000c8ae:	4770      	bx	lr
      hmdma->Instance->CCR |=  MDMA_CCR_SWRQ;
9000c8b0:	68e3      	ldr	r3, [r4, #12]
  return HAL_OK;
9000c8b2:	2000      	movs	r0, #0
      hmdma->Instance->CCR |=  MDMA_CCR_SWRQ;
9000c8b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
9000c8b8:	60e3      	str	r3, [r4, #12]
}
9000c8ba:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(hmdma);
9000c8bc:	2002      	movs	r0, #2
}
9000c8be:	4770      	bx	lr

9000c8c0 <HAL_MDMA_Abort_IT>:
  if(hmdma == NULL)
9000c8c0:	4603      	mov	r3, r0
9000c8c2:	b188      	cbz	r0, 9000c8e8 <HAL_MDMA_Abort_IT+0x28>
  if(HAL_MDMA_STATE_BUSY != hmdma->State)
9000c8c4:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
9000c8c8:	2a02      	cmp	r2, #2
9000c8ca:	d003      	beq.n	9000c8d4 <HAL_MDMA_Abort_IT+0x14>
    hmdma->ErrorCode = HAL_MDMA_ERROR_NO_XFER;
9000c8cc:	2280      	movs	r2, #128	; 0x80
    return HAL_ERROR;
9000c8ce:	2001      	movs	r0, #1
    hmdma->ErrorCode = HAL_MDMA_ERROR_NO_XFER;
9000c8d0:	669a      	str	r2, [r3, #104]	; 0x68
    return HAL_ERROR;
9000c8d2:	4770      	bx	lr
    __HAL_MDMA_DISABLE(hmdma);
9000c8d4:	6802      	ldr	r2, [r0, #0]
    hmdma->State = HAL_MDMA_STATE_ABORT;
9000c8d6:	2104      	movs	r1, #4
  return HAL_OK;
9000c8d8:	2000      	movs	r0, #0
    hmdma->State = HAL_MDMA_STATE_ABORT;
9000c8da:	f883 103d 	strb.w	r1, [r3, #61]	; 0x3d
    __HAL_MDMA_DISABLE(hmdma);
9000c8de:	68d3      	ldr	r3, [r2, #12]
9000c8e0:	f023 0301 	bic.w	r3, r3, #1
9000c8e4:	60d3      	str	r3, [r2, #12]
  return HAL_OK;
9000c8e6:	4770      	bx	lr
    return HAL_ERROR;
9000c8e8:	2001      	movs	r0, #1
}
9000c8ea:	4770      	bx	lr

9000c8ec <HAL_MDMA_IRQHandler>:
{
9000c8ec:	b530      	push	{r4, r5, lr}
  __IO uint32_t count = 0;
9000c8ee:	2300      	movs	r3, #0
{
9000c8f0:	b083      	sub	sp, #12
  if((MDMA->GISR0 & generalIntFlag) == 0U)
9000c8f2:	f04f 45a4 	mov.w	r5, #1375731712	; 0x52000000
{
9000c8f6:	4604      	mov	r4, r0
  __IO uint32_t count = 0;
9000c8f8:	9301      	str	r3, [sp, #4]
  generalIntFlag =  1UL << ((((uint32_t)hmdma->Instance - (uint32_t)(MDMA_Channel0))/HAL_MDMA_CHANNEL_SIZE) & 0x1FU);
9000c8fa:	2101      	movs	r1, #1
  uint32_t timeout = SystemCoreClock / 9600U;
9000c8fc:	4b57      	ldr	r3, [pc, #348]	; (9000ca5c <HAL_MDMA_IRQHandler+0x170>)
  if((MDMA->GISR0 & generalIntFlag) == 0U)
9000c8fe:	6828      	ldr	r0, [r5, #0]
  generalIntFlag =  1UL << ((((uint32_t)hmdma->Instance - (uint32_t)(MDMA_Channel0))/HAL_MDMA_CHANNEL_SIZE) & 0x1FU);
9000c900:	4a57      	ldr	r2, [pc, #348]	; (9000ca60 <HAL_MDMA_IRQHandler+0x174>)
  uint32_t timeout = SystemCoreClock / 9600U;
9000c902:	681d      	ldr	r5, [r3, #0]
  generalIntFlag =  1UL << ((((uint32_t)hmdma->Instance - (uint32_t)(MDMA_Channel0))/HAL_MDMA_CHANNEL_SIZE) & 0x1FU);
9000c904:	6823      	ldr	r3, [r4, #0]
9000c906:	441a      	add	r2, r3
9000c908:	f3c2 1284 	ubfx	r2, r2, #6, #5
9000c90c:	fa01 f202 	lsl.w	r2, r1, r2
  if((MDMA->GISR0 & generalIntFlag) == 0U)
9000c910:	4202      	tst	r2, r0
9000c912:	f000 80a0 	beq.w	9000ca56 <HAL_MDMA_IRQHandler+0x16a>
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_TE) != 0U))
9000c916:	681a      	ldr	r2, [r3, #0]
9000c918:	07d1      	lsls	r1, r2, #31
9000c91a:	d529      	bpl.n	9000c970 <HAL_MDMA_IRQHandler+0x84>
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_TE) != 0U)
9000c91c:	68da      	ldr	r2, [r3, #12]
9000c91e:	0792      	lsls	r2, r2, #30
9000c920:	d526      	bpl.n	9000c970 <HAL_MDMA_IRQHandler+0x84>
      __HAL_MDMA_DISABLE_IT(hmdma, MDMA_IT_TE);
9000c922:	68da      	ldr	r2, [r3, #12]
9000c924:	f022 0202 	bic.w	r2, r2, #2
9000c928:	60da      	str	r2, [r3, #12]
      errorFlag = hmdma->Instance->CESR;
9000c92a:	689a      	ldr	r2, [r3, #8]
        hmdma->ErrorCode |= HAL_MDMA_ERROR_READ_XFER;
9000c92c:	6ea1      	ldr	r1, [r4, #104]	; 0x68
      if((errorFlag & MDMA_CESR_TED) == 0U)
9000c92e:	0610      	lsls	r0, r2, #24
        hmdma->ErrorCode |= HAL_MDMA_ERROR_READ_XFER;
9000c930:	bf54      	ite	pl
9000c932:	f041 0101 	orrpl.w	r1, r1, #1
        hmdma->ErrorCode |= HAL_MDMA_ERROR_WRITE_XFER;
9000c936:	f041 0102 	orrmi.w	r1, r1, #2
9000c93a:	66a1      	str	r1, [r4, #104]	; 0x68
      if((errorFlag & MDMA_CESR_TEMD) != 0U)
9000c93c:	0591      	lsls	r1, r2, #22
9000c93e:	d503      	bpl.n	9000c948 <HAL_MDMA_IRQHandler+0x5c>
        hmdma->ErrorCode |= HAL_MDMA_ERROR_MASK_DATA;
9000c940:	6ea1      	ldr	r1, [r4, #104]	; 0x68
9000c942:	f041 0104 	orr.w	r1, r1, #4
9000c946:	66a1      	str	r1, [r4, #104]	; 0x68
      if((errorFlag & MDMA_CESR_TELD) != 0U)
9000c948:	05d0      	lsls	r0, r2, #23
9000c94a:	d503      	bpl.n	9000c954 <HAL_MDMA_IRQHandler+0x68>
        hmdma->ErrorCode |= HAL_MDMA_ERROR_LINKED_LIST;
9000c94c:	6ea1      	ldr	r1, [r4, #104]	; 0x68
9000c94e:	f041 0108 	orr.w	r1, r1, #8
9000c952:	66a1      	str	r1, [r4, #104]	; 0x68
      if((errorFlag & MDMA_CESR_ASE) != 0U)
9000c954:	0551      	lsls	r1, r2, #21
9000c956:	d503      	bpl.n	9000c960 <HAL_MDMA_IRQHandler+0x74>
        hmdma->ErrorCode |= HAL_MDMA_ERROR_ALIGNMENT;
9000c958:	6ea1      	ldr	r1, [r4, #104]	; 0x68
9000c95a:	f041 0110 	orr.w	r1, r1, #16
9000c95e:	66a1      	str	r1, [r4, #104]	; 0x68
      if((errorFlag & MDMA_CESR_BSE) != 0U)
9000c960:	0510      	lsls	r0, r2, #20
9000c962:	d503      	bpl.n	9000c96c <HAL_MDMA_IRQHandler+0x80>
        hmdma->ErrorCode |= HAL_MDMA_ERROR_BLOCK_SIZE;
9000c964:	6ea2      	ldr	r2, [r4, #104]	; 0x68
9000c966:	f042 0220 	orr.w	r2, r2, #32
9000c96a:	66a2      	str	r2, [r4, #104]	; 0x68
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_TE);
9000c96c:	2201      	movs	r2, #1
9000c96e:	605a      	str	r2, [r3, #4]
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BFTC) != 0U))
9000c970:	681a      	ldr	r2, [r3, #0]
9000c972:	06d1      	lsls	r1, r2, #27
9000c974:	d509      	bpl.n	9000c98a <HAL_MDMA_IRQHandler+0x9e>
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BFTC) != 0U)
9000c976:	68da      	ldr	r2, [r3, #12]
9000c978:	0692      	lsls	r2, r2, #26
9000c97a:	d506      	bpl.n	9000c98a <HAL_MDMA_IRQHandler+0x9e>
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BFTC);
9000c97c:	2110      	movs	r1, #16
      if(hmdma->XferBufferCpltCallback != NULL)
9000c97e:	6ca2      	ldr	r2, [r4, #72]	; 0x48
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BFTC);
9000c980:	6059      	str	r1, [r3, #4]
      if(hmdma->XferBufferCpltCallback != NULL)
9000c982:	b112      	cbz	r2, 9000c98a <HAL_MDMA_IRQHandler+0x9e>
        hmdma->XferBufferCpltCallback(hmdma);
9000c984:	4620      	mov	r0, r4
9000c986:	4790      	blx	r2
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BT) != 0U))
9000c988:	6823      	ldr	r3, [r4, #0]
9000c98a:	681a      	ldr	r2, [r3, #0]
9000c98c:	0710      	lsls	r0, r2, #28
9000c98e:	d509      	bpl.n	9000c9a4 <HAL_MDMA_IRQHandler+0xb8>
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BT) != 0U)
9000c990:	68da      	ldr	r2, [r3, #12]
9000c992:	06d1      	lsls	r1, r2, #27
9000c994:	d506      	bpl.n	9000c9a4 <HAL_MDMA_IRQHandler+0xb8>
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BT);
9000c996:	2108      	movs	r1, #8
      if(hmdma->XferBlockCpltCallback != NULL)
9000c998:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BT);
9000c99a:	6059      	str	r1, [r3, #4]
      if(hmdma->XferBlockCpltCallback != NULL)
9000c99c:	b112      	cbz	r2, 9000c9a4 <HAL_MDMA_IRQHandler+0xb8>
        hmdma->XferBlockCpltCallback(hmdma);
9000c99e:	4620      	mov	r0, r4
9000c9a0:	4790      	blx	r2
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BRT) != 0U))
9000c9a2:	6823      	ldr	r3, [r4, #0]
9000c9a4:	681a      	ldr	r2, [r3, #0]
9000c9a6:	0752      	lsls	r2, r2, #29
9000c9a8:	d509      	bpl.n	9000c9be <HAL_MDMA_IRQHandler+0xd2>
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BRT) != 0U)
9000c9aa:	68da      	ldr	r2, [r3, #12]
9000c9ac:	0710      	lsls	r0, r2, #28
9000c9ae:	d506      	bpl.n	9000c9be <HAL_MDMA_IRQHandler+0xd2>
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BRT);
9000c9b0:	2104      	movs	r1, #4
      if(hmdma->XferRepeatBlockCpltCallback != NULL)
9000c9b2:	6d22      	ldr	r2, [r4, #80]	; 0x50
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BRT);
9000c9b4:	6059      	str	r1, [r3, #4]
      if(hmdma->XferRepeatBlockCpltCallback != NULL)
9000c9b6:	b112      	cbz	r2, 9000c9be <HAL_MDMA_IRQHandler+0xd2>
        hmdma->XferRepeatBlockCpltCallback(hmdma);
9000c9b8:	4620      	mov	r0, r4
9000c9ba:	4790      	blx	r2
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_CTC) != 0U))
9000c9bc:	6823      	ldr	r3, [r4, #0]
9000c9be:	681a      	ldr	r2, [r3, #0]
9000c9c0:	0791      	lsls	r1, r2, #30
9000c9c2:	d516      	bpl.n	9000c9f2 <HAL_MDMA_IRQHandler+0x106>
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_CTC) != 0U)
9000c9c4:	68da      	ldr	r2, [r3, #12]
9000c9c6:	0752      	lsls	r2, r2, #29
9000c9c8:	d513      	bpl.n	9000c9f2 <HAL_MDMA_IRQHandler+0x106>
      __HAL_MDMA_DISABLE_IT(hmdma, (MDMA_IT_TE | MDMA_IT_CTC | MDMA_IT_BT | MDMA_IT_BRT | MDMA_IT_BFTC));
9000c9ca:	68da      	ldr	r2, [r3, #12]
9000c9cc:	f022 023e 	bic.w	r2, r2, #62	; 0x3e
9000c9d0:	60da      	str	r2, [r3, #12]
      if(HAL_MDMA_STATE_ABORT == hmdma->State)
9000c9d2:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
9000c9d6:	2a04      	cmp	r2, #4
9000c9d8:	d034      	beq.n	9000ca44 <HAL_MDMA_IRQHandler+0x158>
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_CTC);
9000c9da:	2202      	movs	r2, #2
      __HAL_UNLOCK(hmdma);
9000c9dc:	2100      	movs	r1, #0
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_CTC);
9000c9de:	605a      	str	r2, [r3, #4]
      hmdma->State = HAL_MDMA_STATE_READY;
9000c9e0:	2201      	movs	r2, #1
      if(hmdma->XferCpltCallback != NULL)
9000c9e2:	6c63      	ldr	r3, [r4, #68]	; 0x44
      __HAL_UNLOCK(hmdma);
9000c9e4:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c
      hmdma->State = HAL_MDMA_STATE_READY;
9000c9e8:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      if(hmdma->XferCpltCallback != NULL)
9000c9ec:	b10b      	cbz	r3, 9000c9f2 <HAL_MDMA_IRQHandler+0x106>
        hmdma->XferCpltCallback(hmdma);
9000c9ee:	4620      	mov	r0, r4
9000c9f0:	4798      	blx	r3
  if(hmdma->ErrorCode != HAL_MDMA_ERROR_NONE)
9000c9f2:	6ea3      	ldr	r3, [r4, #104]	; 0x68
9000c9f4:	2b00      	cmp	r3, #0
9000c9f6:	d02e      	beq.n	9000ca56 <HAL_MDMA_IRQHandler+0x16a>
    __HAL_MDMA_DISABLE(hmdma);
9000c9f8:	6821      	ldr	r1, [r4, #0]
    hmdma->State = HAL_MDMA_STATE_ABORT;
9000c9fa:	2004      	movs	r0, #4
  uint32_t timeout = SystemCoreClock / 9600U;
9000c9fc:	4b19      	ldr	r3, [pc, #100]	; (9000ca64 <HAL_MDMA_IRQHandler+0x178>)
    hmdma->State = HAL_MDMA_STATE_ABORT;
9000c9fe:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  uint32_t timeout = SystemCoreClock / 9600U;
9000ca02:	fba3 3205 	umull	r3, r2, r3, r5
    __HAL_MDMA_DISABLE(hmdma);
9000ca06:	68cb      	ldr	r3, [r1, #12]
9000ca08:	f023 0301 	bic.w	r3, r3, #1
  uint32_t timeout = SystemCoreClock / 9600U;
9000ca0c:	0a92      	lsrs	r2, r2, #10
    __HAL_MDMA_DISABLE(hmdma);
9000ca0e:	60cb      	str	r3, [r1, #12]
9000ca10:	e002      	b.n	9000ca18 <HAL_MDMA_IRQHandler+0x12c>
    while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U);
9000ca12:	68cb      	ldr	r3, [r1, #12]
9000ca14:	07d8      	lsls	r0, r3, #31
9000ca16:	d504      	bpl.n	9000ca22 <HAL_MDMA_IRQHandler+0x136>
      if (++count > timeout)
9000ca18:	9b01      	ldr	r3, [sp, #4]
9000ca1a:	3301      	adds	r3, #1
9000ca1c:	4293      	cmp	r3, r2
9000ca1e:	9301      	str	r3, [sp, #4]
9000ca20:	d9f7      	bls.n	9000ca12 <HAL_MDMA_IRQHandler+0x126>
    __HAL_UNLOCK(hmdma);
9000ca22:	2300      	movs	r3, #0
9000ca24:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
9000ca28:	68cb      	ldr	r3, [r1, #12]
9000ca2a:	07db      	lsls	r3, r3, #31
      hmdma->State = HAL_MDMA_STATE_ERROR;
9000ca2c:	bf4c      	ite	mi
9000ca2e:	2303      	movmi	r3, #3
      hmdma->State = HAL_MDMA_STATE_READY;
9000ca30:	2301      	movpl	r3, #1
9000ca32:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    if (hmdma->XferErrorCallback != NULL)
9000ca36:	6d63      	ldr	r3, [r4, #84]	; 0x54
9000ca38:	b16b      	cbz	r3, 9000ca56 <HAL_MDMA_IRQHandler+0x16a>
      hmdma->XferErrorCallback(hmdma);
9000ca3a:	4620      	mov	r0, r4
}
9000ca3c:	b003      	add	sp, #12
9000ca3e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
      hmdma->XferErrorCallback(hmdma);
9000ca42:	4718      	bx	r3
        __HAL_UNLOCK(hmdma);
9000ca44:	2100      	movs	r1, #0
        hmdma->State = HAL_MDMA_STATE_READY;
9000ca46:	2201      	movs	r2, #1
        if(hmdma->XferAbortCallback != NULL)
9000ca48:	6da3      	ldr	r3, [r4, #88]	; 0x58
        __HAL_UNLOCK(hmdma);
9000ca4a:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c
        hmdma->State = HAL_MDMA_STATE_READY;
9000ca4e:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        if(hmdma->XferAbortCallback != NULL)
9000ca52:	2b00      	cmp	r3, #0
9000ca54:	d1f1      	bne.n	9000ca3a <HAL_MDMA_IRQHandler+0x14e>
}
9000ca56:	b003      	add	sp, #12
9000ca58:	bd30      	pop	{r4, r5, pc}
9000ca5a:	bf00      	nop
9000ca5c:	24000054 	.word	0x24000054
9000ca60:	adffffc0 	.word	0xadffffc0
9000ca64:	1b4e81b5 	.word	0x1b4e81b5

9000ca68 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
9000ca68:	b538      	push	{r3, r4, r5, lr}
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
9000ca6a:	4c10      	ldr	r4, [pc, #64]	; (9000caac <HAL_PWREx_ConfigSupply+0x44>)
9000ca6c:	68e3      	ldr	r3, [r4, #12]
9000ca6e:	f013 0f04 	tst.w	r3, #4
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
9000ca72:	68e3      	ldr	r3, [r4, #12]
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
9000ca74:	d105      	bne.n	9000ca82 <HAL_PWREx_ConfigSupply+0x1a>
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
9000ca76:	f003 0307 	and.w	r3, r3, #7
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
9000ca7a:	1a18      	subs	r0, r3, r0
9000ca7c:	bf18      	it	ne
9000ca7e:	2001      	movne	r0, #1
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
}
9000ca80:	bd38      	pop	{r3, r4, r5, pc}
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
9000ca82:	f023 0307 	bic.w	r3, r3, #7
9000ca86:	4303      	orrs	r3, r0
9000ca88:	60e3      	str	r3, [r4, #12]
  tickstart = HAL_GetTick ();
9000ca8a:	f7fc ff59 	bl	90009940 <HAL_GetTick>
9000ca8e:	4605      	mov	r5, r0
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
9000ca90:	e005      	b.n	9000ca9e <HAL_PWREx_ConfigSupply+0x36>
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
9000ca92:	f7fc ff55 	bl	90009940 <HAL_GetTick>
9000ca96:	1b40      	subs	r0, r0, r5
9000ca98:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
9000ca9c:	d804      	bhi.n	9000caa8 <HAL_PWREx_ConfigSupply+0x40>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
9000ca9e:	6863      	ldr	r3, [r4, #4]
9000caa0:	049b      	lsls	r3, r3, #18
9000caa2:	d5f6      	bpl.n	9000ca92 <HAL_PWREx_ConfigSupply+0x2a>
  return HAL_OK;
9000caa4:	2000      	movs	r0, #0
}
9000caa6:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_ERROR;
9000caa8:	2001      	movs	r0, #1
}
9000caaa:	bd38      	pop	{r3, r4, r5, pc}
9000caac:	58024800 	.word	0x58024800

9000cab0 <HAL_RCC_GetSysClockFreq.part.0>:
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
9000cab0:	4b3b      	ldr	r3, [pc, #236]	; (9000cba0 <HAL_RCC_GetSysClockFreq.part.0+0xf0>)
uint32_t HAL_RCC_GetSysClockFreq(void)
9000cab2:	b430      	push	{r4, r5}
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
9000cab4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
9000cab6:	6a9c      	ldr	r4, [r3, #40]	; 0x28
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
9000cab8:	6add      	ldr	r5, [r3, #44]	; 0x2c
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));

      if (pllm != 0U)
9000caba:	f414 7f7c 	tst.w	r4, #1008	; 0x3f0
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
9000cabe:	6b59      	ldr	r1, [r3, #52]	; 0x34
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
9000cac0:	f3c4 1005 	ubfx	r0, r4, #4, #6
      if (pllm != 0U)
9000cac4:	d038      	beq.n	9000cb38 <HAL_RCC_GetSysClockFreq.part.0+0x88>
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
9000cac6:	f3c1 01cc 	ubfx	r1, r1, #3, #13
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
9000caca:	f005 0501 	and.w	r5, r5, #1
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
9000cace:	f002 0203 	and.w	r2, r2, #3
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
9000cad2:	fb05 f101 	mul.w	r1, r5, r1
9000cad6:	2a01      	cmp	r2, #1
9000cad8:	ee07 1a90 	vmov	s15, r1
9000cadc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
      {
        switch (pllsource)
9000cae0:	d002      	beq.n	9000cae8 <HAL_RCC_GetSysClockFreq.part.0+0x38>
9000cae2:	2a02      	cmp	r2, #2
9000cae4:	d04e      	beq.n	9000cb84 <HAL_RCC_GetSysClockFreq.part.0+0xd4>
9000cae6:	b34a      	cbz	r2, 9000cb3c <HAL_RCC_GetSysClockFreq.part.0+0x8c>
          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            break;

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
9000cae8:	ee07 0a90 	vmov	s15, r0
9000caec:	ed9f 5a2d 	vldr	s10, [pc, #180]	; 9000cba4 <HAL_RCC_GetSysClockFreq.part.0+0xf4>
9000caf0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
9000caf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
9000caf6:	eec5 6a27 	vdiv.f32	s13, s10, s15
9000cafa:	eddf 5a2b 	vldr	s11, [pc, #172]	; 9000cba8 <HAL_RCC_GetSysClockFreq.part.0+0xf8>
9000cafe:	f3c3 0308 	ubfx	r3, r3, #0, #9
9000cb02:	ee07 3a90 	vmov	s15, r3
9000cb06:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
9000cb0a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
9000cb0e:	eee7 7a25 	vfma.f32	s15, s14, s11
9000cb12:	ee77 7a86 	vadd.f32	s15, s15, s12
9000cb16:	ee66 6aa7 	vmul.f32	s13, s13, s15
            break;
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
9000cb1a:	4b21      	ldr	r3, [pc, #132]	; (9000cba0 <HAL_RCC_GetSysClockFreq.part.0+0xf0>)
9000cb1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
9000cb1e:	f3c3 2346 	ubfx	r3, r3, #9, #7
9000cb22:	3301      	adds	r3, #1
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
9000cb24:	ee07 3a90 	vmov	s15, r3
9000cb28:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
9000cb2c:	eec6 7a87 	vdiv.f32	s15, s13, s14
9000cb30:	eefc 7ae7 	vcvt.u32.f32	s15, s15
9000cb34:	ee17 0a90 	vmov	r0, s15
      sysclockfreq = CSI_VALUE;
      break;
  }

  return sysclockfreq;
}
9000cb38:	bc30      	pop	{r4, r5}
9000cb3a:	4770      	bx	lr
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
9000cb3c:	681a      	ldr	r2, [r3, #0]
9000cb3e:	0692      	lsls	r2, r2, #26
9000cb40:	d527      	bpl.n	9000cb92 <HAL_RCC_GetSysClockFreq.part.0+0xe2>
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
9000cb42:	6819      	ldr	r1, [r3, #0]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
9000cb44:	ee07 0a90 	vmov	s15, r0
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
9000cb48:	4a18      	ldr	r2, [pc, #96]	; (9000cbac <HAL_RCC_GetSysClockFreq.part.0+0xfc>)
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
9000cb4a:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
9000cb4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
9000cb50:	f3c1 01c1 	ubfx	r1, r1, #3, #2
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
9000cb54:	eef8 7ae7 	vcvt.f32.s32	s15, s15
9000cb58:	ed9f 5a13 	vldr	s10, [pc, #76]	; 9000cba8 <HAL_RCC_GetSysClockFreq.part.0+0xf8>
9000cb5c:	f3c3 0308 	ubfx	r3, r3, #0, #9
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
9000cb60:	40ca      	lsrs	r2, r1
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
9000cb62:	ee06 3a90 	vmov	s13, r3
9000cb66:	ee06 2a10 	vmov	s12, r2
9000cb6a:	eef8 6ae6 	vcvt.f32.s32	s13, s13
9000cb6e:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
9000cb72:	eee7 6a05 	vfma.f32	s13, s14, s10
9000cb76:	ee86 7a27 	vdiv.f32	s14, s12, s15
9000cb7a:	ee76 6aa5 	vadd.f32	s13, s13, s11
9000cb7e:	ee66 6a87 	vmul.f32	s13, s13, s14
9000cb82:	e7ca      	b.n	9000cb1a <HAL_RCC_GetSysClockFreq.part.0+0x6a>
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
9000cb84:	ee07 0a90 	vmov	s15, r0
9000cb88:	ed9f 5a09 	vldr	s10, [pc, #36]	; 9000cbb0 <HAL_RCC_GetSysClockFreq.part.0+0x100>
9000cb8c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
9000cb90:	e7b0      	b.n	9000caf4 <HAL_RCC_GetSysClockFreq.part.0+0x44>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
9000cb92:	ee07 0a90 	vmov	s15, r0
9000cb96:	ed9f 5a07 	vldr	s10, [pc, #28]	; 9000cbb4 <HAL_RCC_GetSysClockFreq.part.0+0x104>
9000cb9a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
9000cb9e:	e7a9      	b.n	9000caf4 <HAL_RCC_GetSysClockFreq.part.0+0x44>
9000cba0:	58024400 	.word	0x58024400
9000cba4:	4a742400 	.word	0x4a742400
9000cba8:	39000000 	.word	0x39000000
9000cbac:	03d09000 	.word	0x03d09000
9000cbb0:	4bbebc20 	.word	0x4bbebc20
9000cbb4:	4c742400 	.word	0x4c742400

9000cbb8 <HAL_RCC_OscConfig>:
  if (RCC_OscInitStruct == NULL)
9000cbb8:	2800      	cmp	r0, #0
9000cbba:	f000 81e8 	beq.w	9000cf8e <HAL_RCC_OscConfig+0x3d6>
{
9000cbbe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
9000cbc0:	6803      	ldr	r3, [r0, #0]
9000cbc2:	4604      	mov	r4, r0
9000cbc4:	07d9      	lsls	r1, r3, #31
9000cbc6:	d52e      	bpl.n	9000cc26 <HAL_RCC_OscConfig+0x6e>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
9000cbc8:	49a4      	ldr	r1, [pc, #656]	; (9000ce5c <HAL_RCC_OscConfig+0x2a4>)
9000cbca:	690a      	ldr	r2, [r1, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
9000cbcc:	6a89      	ldr	r1, [r1, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
9000cbce:	f002 0238 	and.w	r2, r2, #56	; 0x38
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
9000cbd2:	2a10      	cmp	r2, #16
9000cbd4:	f000 8107 	beq.w	9000cde6 <HAL_RCC_OscConfig+0x22e>
9000cbd8:	2a18      	cmp	r2, #24
9000cbda:	f000 80ff 	beq.w	9000cddc <HAL_RCC_OscConfig+0x224>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
9000cbde:	6863      	ldr	r3, [r4, #4]
9000cbe0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
9000cbe4:	f000 812a 	beq.w	9000ce3c <HAL_RCC_OscConfig+0x284>
9000cbe8:	2b00      	cmp	r3, #0
9000cbea:	f000 8168 	beq.w	9000cebe <HAL_RCC_OscConfig+0x306>
9000cbee:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
9000cbf2:	4b9a      	ldr	r3, [pc, #616]	; (9000ce5c <HAL_RCC_OscConfig+0x2a4>)
9000cbf4:	681a      	ldr	r2, [r3, #0]
9000cbf6:	f000 8289 	beq.w	9000d10c <HAL_RCC_OscConfig+0x554>
9000cbfa:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
9000cbfe:	601a      	str	r2, [r3, #0]
9000cc00:	681a      	ldr	r2, [r3, #0]
9000cc02:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
9000cc06:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
9000cc08:	f7fc fe9a 	bl	90009940 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
9000cc0c:	4e93      	ldr	r6, [pc, #588]	; (9000ce5c <HAL_RCC_OscConfig+0x2a4>)
        tickstart = HAL_GetTick();
9000cc0e:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
9000cc10:	e005      	b.n	9000cc1e <HAL_RCC_OscConfig+0x66>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
9000cc12:	f7fc fe95 	bl	90009940 <HAL_GetTick>
9000cc16:	1b40      	subs	r0, r0, r5
9000cc18:	2864      	cmp	r0, #100	; 0x64
9000cc1a:	f200 814e 	bhi.w	9000ceba <HAL_RCC_OscConfig+0x302>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
9000cc1e:	6833      	ldr	r3, [r6, #0]
9000cc20:	039b      	lsls	r3, r3, #14
9000cc22:	d5f6      	bpl.n	9000cc12 <HAL_RCC_OscConfig+0x5a>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
9000cc24:	6823      	ldr	r3, [r4, #0]
9000cc26:	079d      	lsls	r5, r3, #30
9000cc28:	f100 808a 	bmi.w	9000cd40 <HAL_RCC_OscConfig+0x188>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
9000cc2c:	06d9      	lsls	r1, r3, #27
9000cc2e:	d533      	bpl.n	9000cc98 <HAL_RCC_OscConfig+0xe0>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
9000cc30:	4a8a      	ldr	r2, [pc, #552]	; (9000ce5c <HAL_RCC_OscConfig+0x2a4>)
9000cc32:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
9000cc34:	6a92      	ldr	r2, [r2, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
9000cc36:	f003 0338 	and.w	r3, r3, #56	; 0x38
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
9000cc3a:	2b08      	cmp	r3, #8
9000cc3c:	f000 80e3 	beq.w	9000ce06 <HAL_RCC_OscConfig+0x24e>
9000cc40:	2b18      	cmp	r3, #24
9000cc42:	f000 80db 	beq.w	9000cdfc <HAL_RCC_OscConfig+0x244>
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
9000cc46:	69e3      	ldr	r3, [r4, #28]
        __HAL_RCC_CSI_ENABLE();
9000cc48:	4d84      	ldr	r5, [pc, #528]	; (9000ce5c <HAL_RCC_OscConfig+0x2a4>)
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
9000cc4a:	2b00      	cmp	r3, #0
9000cc4c:	f000 816f 	beq.w	9000cf2e <HAL_RCC_OscConfig+0x376>
        __HAL_RCC_CSI_ENABLE();
9000cc50:	682b      	ldr	r3, [r5, #0]
9000cc52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
9000cc56:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
9000cc58:	f7fc fe72 	bl	90009940 <HAL_GetTick>
9000cc5c:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
9000cc5e:	e005      	b.n	9000cc6c <HAL_RCC_OscConfig+0xb4>
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
9000cc60:	f7fc fe6e 	bl	90009940 <HAL_GetTick>
9000cc64:	1b80      	subs	r0, r0, r6
9000cc66:	2802      	cmp	r0, #2
9000cc68:	f200 8127 	bhi.w	9000ceba <HAL_RCC_OscConfig+0x302>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
9000cc6c:	682b      	ldr	r3, [r5, #0]
9000cc6e:	05db      	lsls	r3, r3, #23
9000cc70:	d5f6      	bpl.n	9000cc60 <HAL_RCC_OscConfig+0xa8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
9000cc72:	f7fc fe6b 	bl	9000994c <HAL_GetREVID>
9000cc76:	f241 0303 	movw	r3, #4099	; 0x1003
9000cc7a:	4298      	cmp	r0, r3
9000cc7c:	f200 826d 	bhi.w	9000d15a <HAL_RCC_OscConfig+0x5a2>
9000cc80:	6a22      	ldr	r2, [r4, #32]
9000cc82:	686b      	ldr	r3, [r5, #4]
9000cc84:	2a20      	cmp	r2, #32
9000cc86:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
9000cc8a:	bf0c      	ite	eq
9000cc8c:	f043 4380 	orreq.w	r3, r3, #1073741824	; 0x40000000
9000cc90:	ea43 6382 	orrne.w	r3, r3, r2, lsl #26
9000cc94:	606b      	str	r3, [r5, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
9000cc96:	6823      	ldr	r3, [r4, #0]
9000cc98:	071d      	lsls	r5, r3, #28
9000cc9a:	d516      	bpl.n	9000ccca <HAL_RCC_OscConfig+0x112>
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
9000cc9c:	6963      	ldr	r3, [r4, #20]
      __HAL_RCC_LSI_ENABLE();
9000cc9e:	4d6f      	ldr	r5, [pc, #444]	; (9000ce5c <HAL_RCC_OscConfig+0x2a4>)
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
9000cca0:	2b00      	cmp	r3, #0
9000cca2:	f000 8122 	beq.w	9000ceea <HAL_RCC_OscConfig+0x332>
      __HAL_RCC_LSI_ENABLE();
9000cca6:	6f6b      	ldr	r3, [r5, #116]	; 0x74
9000cca8:	f043 0301 	orr.w	r3, r3, #1
9000ccac:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
9000ccae:	f7fc fe47 	bl	90009940 <HAL_GetTick>
9000ccb2:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
9000ccb4:	e005      	b.n	9000ccc2 <HAL_RCC_OscConfig+0x10a>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
9000ccb6:	f7fc fe43 	bl	90009940 <HAL_GetTick>
9000ccba:	1b80      	subs	r0, r0, r6
9000ccbc:	2802      	cmp	r0, #2
9000ccbe:	f200 80fc 	bhi.w	9000ceba <HAL_RCC_OscConfig+0x302>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
9000ccc2:	6f6b      	ldr	r3, [r5, #116]	; 0x74
9000ccc4:	0798      	lsls	r0, r3, #30
9000ccc6:	d5f6      	bpl.n	9000ccb6 <HAL_RCC_OscConfig+0xfe>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
9000ccc8:	6823      	ldr	r3, [r4, #0]
9000ccca:	069a      	lsls	r2, r3, #26
9000cccc:	d516      	bpl.n	9000ccfc <HAL_RCC_OscConfig+0x144>
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
9000ccce:	69a3      	ldr	r3, [r4, #24]
      __HAL_RCC_HSI48_ENABLE();
9000ccd0:	4d62      	ldr	r5, [pc, #392]	; (9000ce5c <HAL_RCC_OscConfig+0x2a4>)
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
9000ccd2:	2b00      	cmp	r3, #0
9000ccd4:	f000 811a 	beq.w	9000cf0c <HAL_RCC_OscConfig+0x354>
      __HAL_RCC_HSI48_ENABLE();
9000ccd8:	682b      	ldr	r3, [r5, #0]
9000ccda:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
9000ccde:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
9000cce0:	f7fc fe2e 	bl	90009940 <HAL_GetTick>
9000cce4:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
9000cce6:	e005      	b.n	9000ccf4 <HAL_RCC_OscConfig+0x13c>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
9000cce8:	f7fc fe2a 	bl	90009940 <HAL_GetTick>
9000ccec:	1b80      	subs	r0, r0, r6
9000ccee:	2802      	cmp	r0, #2
9000ccf0:	f200 80e3 	bhi.w	9000ceba <HAL_RCC_OscConfig+0x302>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
9000ccf4:	682b      	ldr	r3, [r5, #0]
9000ccf6:	049f      	lsls	r7, r3, #18
9000ccf8:	d5f6      	bpl.n	9000cce8 <HAL_RCC_OscConfig+0x130>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
9000ccfa:	6823      	ldr	r3, [r4, #0]
9000ccfc:	0759      	lsls	r1, r3, #29
9000ccfe:	f100 80a3 	bmi.w	9000ce48 <HAL_RCC_OscConfig+0x290>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
9000cd02:	6a60      	ldr	r0, [r4, #36]	; 0x24
9000cd04:	b1d0      	cbz	r0, 9000cd3c <HAL_RCC_OscConfig+0x184>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
9000cd06:	4d55      	ldr	r5, [pc, #340]	; (9000ce5c <HAL_RCC_OscConfig+0x2a4>)
9000cd08:	692b      	ldr	r3, [r5, #16]
9000cd0a:	f003 0338 	and.w	r3, r3, #56	; 0x38
9000cd0e:	2b18      	cmp	r3, #24
9000cd10:	f000 81ae 	beq.w	9000d070 <HAL_RCC_OscConfig+0x4b8>
        __HAL_RCC_PLL_DISABLE();
9000cd14:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
9000cd16:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
9000cd18:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
9000cd1c:	602b      	str	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
9000cd1e:	f000 8142 	beq.w	9000cfa6 <HAL_RCC_OscConfig+0x3ee>
        tickstart = HAL_GetTick();
9000cd22:	f7fc fe0d 	bl	90009940 <HAL_GetTick>
9000cd26:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
9000cd28:	e005      	b.n	9000cd36 <HAL_RCC_OscConfig+0x17e>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
9000cd2a:	f7fc fe09 	bl	90009940 <HAL_GetTick>
9000cd2e:	1b00      	subs	r0, r0, r4
9000cd30:	2802      	cmp	r0, #2
9000cd32:	f200 80c2 	bhi.w	9000ceba <HAL_RCC_OscConfig+0x302>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
9000cd36:	682b      	ldr	r3, [r5, #0]
9000cd38:	019b      	lsls	r3, r3, #6
9000cd3a:	d4f6      	bmi.n	9000cd2a <HAL_RCC_OscConfig+0x172>
  return HAL_OK;
9000cd3c:	2000      	movs	r0, #0
}
9000cd3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
9000cd40:	4a46      	ldr	r2, [pc, #280]	; (9000ce5c <HAL_RCC_OscConfig+0x2a4>)
9000cd42:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
9000cd44:	6a92      	ldr	r2, [r2, #40]	; 0x28
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
9000cd46:	f013 0338 	ands.w	r3, r3, #56	; 0x38
9000cd4a:	d12d      	bne.n	9000cda8 <HAL_RCC_OscConfig+0x1f0>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
9000cd4c:	4b43      	ldr	r3, [pc, #268]	; (9000ce5c <HAL_RCC_OscConfig+0x2a4>)
9000cd4e:	68e2      	ldr	r2, [r4, #12]
9000cd50:	681b      	ldr	r3, [r3, #0]
9000cd52:	0759      	lsls	r1, r3, #29
9000cd54:	d501      	bpl.n	9000cd5a <HAL_RCC_OscConfig+0x1a2>
9000cd56:	2a00      	cmp	r2, #0
9000cd58:	d04e      	beq.n	9000cdf8 <HAL_RCC_OscConfig+0x240>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
9000cd5a:	4d40      	ldr	r5, [pc, #256]	; (9000ce5c <HAL_RCC_OscConfig+0x2a4>)
9000cd5c:	682b      	ldr	r3, [r5, #0]
9000cd5e:	f023 0319 	bic.w	r3, r3, #25
9000cd62:	4313      	orrs	r3, r2
9000cd64:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
9000cd66:	f7fc fdeb 	bl	90009940 <HAL_GetTick>
9000cd6a:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
9000cd6c:	e005      	b.n	9000cd7a <HAL_RCC_OscConfig+0x1c2>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
9000cd6e:	f7fc fde7 	bl	90009940 <HAL_GetTick>
9000cd72:	1b80      	subs	r0, r0, r6
9000cd74:	2802      	cmp	r0, #2
9000cd76:	f200 80a0 	bhi.w	9000ceba <HAL_RCC_OscConfig+0x302>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
9000cd7a:	682b      	ldr	r3, [r5, #0]
9000cd7c:	075b      	lsls	r3, r3, #29
9000cd7e:	d5f6      	bpl.n	9000cd6e <HAL_RCC_OscConfig+0x1b6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
9000cd80:	f7fc fde4 	bl	9000994c <HAL_GetREVID>
9000cd84:	f241 0303 	movw	r3, #4099	; 0x1003
9000cd88:	4298      	cmp	r0, r3
9000cd8a:	f200 80f7 	bhi.w	9000cf7c <HAL_RCC_OscConfig+0x3c4>
9000cd8e:	6922      	ldr	r2, [r4, #16]
9000cd90:	686b      	ldr	r3, [r5, #4]
9000cd92:	2a40      	cmp	r2, #64	; 0x40
9000cd94:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
9000cd98:	bf0c      	ite	eq
9000cd9a:	f443 3300 	orreq.w	r3, r3, #131072	; 0x20000
9000cd9e:	ea43 3302 	orrne.w	r3, r3, r2, lsl #12
9000cda2:	606b      	str	r3, [r5, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
9000cda4:	6823      	ldr	r3, [r4, #0]
9000cda6:	e741      	b.n	9000cc2c <HAL_RCC_OscConfig+0x74>
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
9000cda8:	2b18      	cmp	r3, #24
9000cdaa:	f000 80e3 	beq.w	9000cf74 <HAL_RCC_OscConfig+0x3bc>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
9000cdae:	4d2b      	ldr	r5, [pc, #172]	; (9000ce5c <HAL_RCC_OscConfig+0x2a4>)
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
9000cdb0:	68e2      	ldr	r2, [r4, #12]
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
9000cdb2:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
9000cdb4:	2a00      	cmp	r2, #0
9000cdb6:	f000 80cc 	beq.w	9000cf52 <HAL_RCC_OscConfig+0x39a>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
9000cdba:	f023 0319 	bic.w	r3, r3, #25
9000cdbe:	4313      	orrs	r3, r2
9000cdc0:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
9000cdc2:	f7fc fdbd 	bl	90009940 <HAL_GetTick>
9000cdc6:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
9000cdc8:	e004      	b.n	9000cdd4 <HAL_RCC_OscConfig+0x21c>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
9000cdca:	f7fc fdb9 	bl	90009940 <HAL_GetTick>
9000cdce:	1b80      	subs	r0, r0, r6
9000cdd0:	2802      	cmp	r0, #2
9000cdd2:	d872      	bhi.n	9000ceba <HAL_RCC_OscConfig+0x302>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
9000cdd4:	682b      	ldr	r3, [r5, #0]
9000cdd6:	075f      	lsls	r7, r3, #29
9000cdd8:	d5f7      	bpl.n	9000cdca <HAL_RCC_OscConfig+0x212>
9000cdda:	e7d1      	b.n	9000cd80 <HAL_RCC_OscConfig+0x1c8>
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
9000cddc:	f001 0103 	and.w	r1, r1, #3
9000cde0:	2902      	cmp	r1, #2
9000cde2:	f47f aefc 	bne.w	9000cbde <HAL_RCC_OscConfig+0x26>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
9000cde6:	4a1d      	ldr	r2, [pc, #116]	; (9000ce5c <HAL_RCC_OscConfig+0x2a4>)
9000cde8:	6812      	ldr	r2, [r2, #0]
9000cdea:	0392      	lsls	r2, r2, #14
9000cdec:	f57f af1b 	bpl.w	9000cc26 <HAL_RCC_OscConfig+0x6e>
9000cdf0:	6862      	ldr	r2, [r4, #4]
9000cdf2:	2a00      	cmp	r2, #0
9000cdf4:	f47f af17 	bne.w	9000cc26 <HAL_RCC_OscConfig+0x6e>
        return HAL_ERROR;
9000cdf8:	2001      	movs	r0, #1
}
9000cdfa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
9000cdfc:	f002 0203 	and.w	r2, r2, #3
9000ce00:	2a01      	cmp	r2, #1
9000ce02:	f47f af20 	bne.w	9000cc46 <HAL_RCC_OscConfig+0x8e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
9000ce06:	4b15      	ldr	r3, [pc, #84]	; (9000ce5c <HAL_RCC_OscConfig+0x2a4>)
9000ce08:	681b      	ldr	r3, [r3, #0]
9000ce0a:	05da      	lsls	r2, r3, #23
9000ce0c:	d502      	bpl.n	9000ce14 <HAL_RCC_OscConfig+0x25c>
9000ce0e:	69e3      	ldr	r3, [r4, #28]
9000ce10:	2b80      	cmp	r3, #128	; 0x80
9000ce12:	d1f1      	bne.n	9000cdf8 <HAL_RCC_OscConfig+0x240>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
9000ce14:	f7fc fd9a 	bl	9000994c <HAL_GetREVID>
9000ce18:	f241 0303 	movw	r3, #4099	; 0x1003
9000ce1c:	4298      	cmp	r0, r3
9000ce1e:	f200 80b8 	bhi.w	9000cf92 <HAL_RCC_OscConfig+0x3da>
9000ce22:	6a22      	ldr	r2, [r4, #32]
9000ce24:	2a20      	cmp	r2, #32
9000ce26:	f000 81a7 	beq.w	9000d178 <HAL_RCC_OscConfig+0x5c0>
9000ce2a:	490c      	ldr	r1, [pc, #48]	; (9000ce5c <HAL_RCC_OscConfig+0x2a4>)
9000ce2c:	684b      	ldr	r3, [r1, #4]
9000ce2e:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
9000ce32:	ea43 6382 	orr.w	r3, r3, r2, lsl #26
9000ce36:	604b      	str	r3, [r1, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
9000ce38:	6823      	ldr	r3, [r4, #0]
9000ce3a:	e72d      	b.n	9000cc98 <HAL_RCC_OscConfig+0xe0>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
9000ce3c:	4a07      	ldr	r2, [pc, #28]	; (9000ce5c <HAL_RCC_OscConfig+0x2a4>)
9000ce3e:	6813      	ldr	r3, [r2, #0]
9000ce40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
9000ce44:	6013      	str	r3, [r2, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
9000ce46:	e6df      	b.n	9000cc08 <HAL_RCC_OscConfig+0x50>
    PWR->CR1 |= PWR_CR1_DBP;
9000ce48:	4d05      	ldr	r5, [pc, #20]	; (9000ce60 <HAL_RCC_OscConfig+0x2a8>)
9000ce4a:	682b      	ldr	r3, [r5, #0]
9000ce4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
9000ce50:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
9000ce52:	f7fc fd75 	bl	90009940 <HAL_GetTick>
9000ce56:	4606      	mov	r6, r0
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
9000ce58:	e009      	b.n	9000ce6e <HAL_RCC_OscConfig+0x2b6>
9000ce5a:	bf00      	nop
9000ce5c:	58024400 	.word	0x58024400
9000ce60:	58024800 	.word	0x58024800
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
9000ce64:	f7fc fd6c 	bl	90009940 <HAL_GetTick>
9000ce68:	1b80      	subs	r0, r0, r6
9000ce6a:	2864      	cmp	r0, #100	; 0x64
9000ce6c:	d825      	bhi.n	9000ceba <HAL_RCC_OscConfig+0x302>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
9000ce6e:	682b      	ldr	r3, [r5, #0]
9000ce70:	05da      	lsls	r2, r3, #23
9000ce72:	d5f7      	bpl.n	9000ce64 <HAL_RCC_OscConfig+0x2ac>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
9000ce74:	68a3      	ldr	r3, [r4, #8]
9000ce76:	2b01      	cmp	r3, #1
9000ce78:	f000 8178 	beq.w	9000d16c <HAL_RCC_OscConfig+0x5b4>
9000ce7c:	2b00      	cmp	r3, #0
9000ce7e:	f000 8153 	beq.w	9000d128 <HAL_RCC_OscConfig+0x570>
9000ce82:	2b05      	cmp	r3, #5
9000ce84:	4ba5      	ldr	r3, [pc, #660]	; (9000d11c <HAL_RCC_OscConfig+0x564>)
9000ce86:	6f1a      	ldr	r2, [r3, #112]	; 0x70
9000ce88:	f000 817f 	beq.w	9000d18a <HAL_RCC_OscConfig+0x5d2>
9000ce8c:	f022 0201 	bic.w	r2, r2, #1
9000ce90:	671a      	str	r2, [r3, #112]	; 0x70
9000ce92:	6f1a      	ldr	r2, [r3, #112]	; 0x70
9000ce94:	f022 0204 	bic.w	r2, r2, #4
9000ce98:	671a      	str	r2, [r3, #112]	; 0x70
      tickstart = HAL_GetTick();
9000ce9a:	f7fc fd51 	bl	90009940 <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
9000ce9e:	4e9f      	ldr	r6, [pc, #636]	; (9000d11c <HAL_RCC_OscConfig+0x564>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
9000cea0:	f241 3788 	movw	r7, #5000	; 0x1388
      tickstart = HAL_GetTick();
9000cea4:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
9000cea6:	e004      	b.n	9000ceb2 <HAL_RCC_OscConfig+0x2fa>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
9000cea8:	f7fc fd4a 	bl	90009940 <HAL_GetTick>
9000ceac:	1b40      	subs	r0, r0, r5
9000ceae:	42b8      	cmp	r0, r7
9000ceb0:	d803      	bhi.n	9000ceba <HAL_RCC_OscConfig+0x302>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
9000ceb2:	6f33      	ldr	r3, [r6, #112]	; 0x70
9000ceb4:	079b      	lsls	r3, r3, #30
9000ceb6:	d5f7      	bpl.n	9000cea8 <HAL_RCC_OscConfig+0x2f0>
9000ceb8:	e723      	b.n	9000cd02 <HAL_RCC_OscConfig+0x14a>
            return HAL_TIMEOUT;
9000ceba:	2003      	movs	r0, #3
}
9000cebc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
9000cebe:	4d97      	ldr	r5, [pc, #604]	; (9000d11c <HAL_RCC_OscConfig+0x564>)
9000cec0:	682b      	ldr	r3, [r5, #0]
9000cec2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
9000cec6:	602b      	str	r3, [r5, #0]
9000cec8:	682b      	ldr	r3, [r5, #0]
9000ceca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
9000cece:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
9000ced0:	f7fc fd36 	bl	90009940 <HAL_GetTick>
9000ced4:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
9000ced6:	e004      	b.n	9000cee2 <HAL_RCC_OscConfig+0x32a>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
9000ced8:	f7fc fd32 	bl	90009940 <HAL_GetTick>
9000cedc:	1b80      	subs	r0, r0, r6
9000cede:	2864      	cmp	r0, #100	; 0x64
9000cee0:	d8eb      	bhi.n	9000ceba <HAL_RCC_OscConfig+0x302>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
9000cee2:	682b      	ldr	r3, [r5, #0]
9000cee4:	039f      	lsls	r7, r3, #14
9000cee6:	d4f7      	bmi.n	9000ced8 <HAL_RCC_OscConfig+0x320>
9000cee8:	e69c      	b.n	9000cc24 <HAL_RCC_OscConfig+0x6c>
      __HAL_RCC_LSI_DISABLE();
9000ceea:	6f6b      	ldr	r3, [r5, #116]	; 0x74
9000ceec:	f023 0301 	bic.w	r3, r3, #1
9000cef0:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
9000cef2:	f7fc fd25 	bl	90009940 <HAL_GetTick>
9000cef6:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
9000cef8:	e004      	b.n	9000cf04 <HAL_RCC_OscConfig+0x34c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
9000cefa:	f7fc fd21 	bl	90009940 <HAL_GetTick>
9000cefe:	1b80      	subs	r0, r0, r6
9000cf00:	2802      	cmp	r0, #2
9000cf02:	d8da      	bhi.n	9000ceba <HAL_RCC_OscConfig+0x302>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
9000cf04:	6f6b      	ldr	r3, [r5, #116]	; 0x74
9000cf06:	0799      	lsls	r1, r3, #30
9000cf08:	d4f7      	bmi.n	9000cefa <HAL_RCC_OscConfig+0x342>
9000cf0a:	e6dd      	b.n	9000ccc8 <HAL_RCC_OscConfig+0x110>
      __HAL_RCC_HSI48_DISABLE();
9000cf0c:	682b      	ldr	r3, [r5, #0]
9000cf0e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
9000cf12:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
9000cf14:	f7fc fd14 	bl	90009940 <HAL_GetTick>
9000cf18:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
9000cf1a:	e004      	b.n	9000cf26 <HAL_RCC_OscConfig+0x36e>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
9000cf1c:	f7fc fd10 	bl	90009940 <HAL_GetTick>
9000cf20:	1b80      	subs	r0, r0, r6
9000cf22:	2802      	cmp	r0, #2
9000cf24:	d8c9      	bhi.n	9000ceba <HAL_RCC_OscConfig+0x302>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
9000cf26:	682b      	ldr	r3, [r5, #0]
9000cf28:	0498      	lsls	r0, r3, #18
9000cf2a:	d4f7      	bmi.n	9000cf1c <HAL_RCC_OscConfig+0x364>
9000cf2c:	e6e5      	b.n	9000ccfa <HAL_RCC_OscConfig+0x142>
        __HAL_RCC_CSI_DISABLE();
9000cf2e:	682b      	ldr	r3, [r5, #0]
9000cf30:	f023 0380 	bic.w	r3, r3, #128	; 0x80
9000cf34:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
9000cf36:	f7fc fd03 	bl	90009940 <HAL_GetTick>
9000cf3a:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
9000cf3c:	e004      	b.n	9000cf48 <HAL_RCC_OscConfig+0x390>
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
9000cf3e:	f7fc fcff 	bl	90009940 <HAL_GetTick>
9000cf42:	1b80      	subs	r0, r0, r6
9000cf44:	2802      	cmp	r0, #2
9000cf46:	d8b8      	bhi.n	9000ceba <HAL_RCC_OscConfig+0x302>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
9000cf48:	682b      	ldr	r3, [r5, #0]
9000cf4a:	05df      	lsls	r7, r3, #23
9000cf4c:	d4f7      	bmi.n	9000cf3e <HAL_RCC_OscConfig+0x386>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
9000cf4e:	6823      	ldr	r3, [r4, #0]
9000cf50:	e6a2      	b.n	9000cc98 <HAL_RCC_OscConfig+0xe0>
        __HAL_RCC_HSI_DISABLE();
9000cf52:	f023 0301 	bic.w	r3, r3, #1
9000cf56:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
9000cf58:	f7fc fcf2 	bl	90009940 <HAL_GetTick>
9000cf5c:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
9000cf5e:	e004      	b.n	9000cf6a <HAL_RCC_OscConfig+0x3b2>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
9000cf60:	f7fc fcee 	bl	90009940 <HAL_GetTick>
9000cf64:	1b80      	subs	r0, r0, r6
9000cf66:	2802      	cmp	r0, #2
9000cf68:	d8a7      	bhi.n	9000ceba <HAL_RCC_OscConfig+0x302>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
9000cf6a:	682b      	ldr	r3, [r5, #0]
9000cf6c:	0758      	lsls	r0, r3, #29
9000cf6e:	d4f7      	bmi.n	9000cf60 <HAL_RCC_OscConfig+0x3a8>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
9000cf70:	6823      	ldr	r3, [r4, #0]
9000cf72:	e65b      	b.n	9000cc2c <HAL_RCC_OscConfig+0x74>
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
9000cf74:	0790      	lsls	r0, r2, #30
9000cf76:	f47f af1a 	bne.w	9000cdae <HAL_RCC_OscConfig+0x1f6>
9000cf7a:	e6e7      	b.n	9000cd4c <HAL_RCC_OscConfig+0x194>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
9000cf7c:	686b      	ldr	r3, [r5, #4]
9000cf7e:	6922      	ldr	r2, [r4, #16]
9000cf80:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
9000cf84:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
9000cf88:	606b      	str	r3, [r5, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
9000cf8a:	6823      	ldr	r3, [r4, #0]
9000cf8c:	e64e      	b.n	9000cc2c <HAL_RCC_OscConfig+0x74>
    return HAL_ERROR;
9000cf8e:	2001      	movs	r0, #1
}
9000cf90:	4770      	bx	lr
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
9000cf92:	4a62      	ldr	r2, [pc, #392]	; (9000d11c <HAL_RCC_OscConfig+0x564>)
9000cf94:	6a21      	ldr	r1, [r4, #32]
9000cf96:	68d3      	ldr	r3, [r2, #12]
9000cf98:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
9000cf9c:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
9000cfa0:	60d3      	str	r3, [r2, #12]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
9000cfa2:	6823      	ldr	r3, [r4, #0]
9000cfa4:	e678      	b.n	9000cc98 <HAL_RCC_OscConfig+0xe0>
        tickstart = HAL_GetTick();
9000cfa6:	f7fc fccb 	bl	90009940 <HAL_GetTick>
9000cfaa:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
9000cfac:	e004      	b.n	9000cfb8 <HAL_RCC_OscConfig+0x400>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
9000cfae:	f7fc fcc7 	bl	90009940 <HAL_GetTick>
9000cfb2:	1b80      	subs	r0, r0, r6
9000cfb4:	2802      	cmp	r0, #2
9000cfb6:	d880      	bhi.n	9000ceba <HAL_RCC_OscConfig+0x302>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
9000cfb8:	682b      	ldr	r3, [r5, #0]
9000cfba:	0199      	lsls	r1, r3, #6
9000cfbc:	d4f7      	bmi.n	9000cfae <HAL_RCC_OscConfig+0x3f6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
9000cfbe:	6aa9      	ldr	r1, [r5, #40]	; 0x28
9000cfc0:	4b57      	ldr	r3, [pc, #348]	; (9000d120 <HAL_RCC_OscConfig+0x568>)
9000cfc2:	6aa2      	ldr	r2, [r4, #40]	; 0x28
9000cfc4:	400b      	ands	r3, r1
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
9000cfc6:	4957      	ldr	r1, [pc, #348]	; (9000d124 <HAL_RCC_OscConfig+0x56c>)
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
9000cfc8:	4e54      	ldr	r6, [pc, #336]	; (9000d11c <HAL_RCC_OscConfig+0x564>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
9000cfca:	4313      	orrs	r3, r2
9000cfcc:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
9000cfce:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
9000cfd2:	62ab      	str	r3, [r5, #40]	; 0x28
9000cfd4:	e9d4 320d 	ldrd	r3, r2, [r4, #52]	; 0x34
9000cfd8:	3b01      	subs	r3, #1
9000cfda:	3a01      	subs	r2, #1
9000cfdc:	025b      	lsls	r3, r3, #9
9000cfde:	0412      	lsls	r2, r2, #16
9000cfe0:	b29b      	uxth	r3, r3
9000cfe2:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
9000cfe6:	4313      	orrs	r3, r2
9000cfe8:	6b22      	ldr	r2, [r4, #48]	; 0x30
9000cfea:	3a01      	subs	r2, #1
9000cfec:	f3c2 0208 	ubfx	r2, r2, #0, #9
9000cff0:	4313      	orrs	r3, r2
9000cff2:	6be2      	ldr	r2, [r4, #60]	; 0x3c
9000cff4:	3a01      	subs	r2, #1
9000cff6:	0612      	lsls	r2, r2, #24
9000cff8:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
9000cffc:	4313      	orrs	r3, r2
9000cffe:	632b      	str	r3, [r5, #48]	; 0x30
        __HAL_RCC_PLLFRACN_DISABLE();
9000d000:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
9000d002:	f023 0301 	bic.w	r3, r3, #1
9000d006:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
9000d008:	6b6a      	ldr	r2, [r5, #52]	; 0x34
9000d00a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
9000d00c:	4011      	ands	r1, r2
9000d00e:	ea41 01c3 	orr.w	r1, r1, r3, lsl #3
9000d012:	6369      	str	r1, [r5, #52]	; 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
9000d014:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
9000d016:	6c22      	ldr	r2, [r4, #64]	; 0x40
9000d018:	f023 030c 	bic.w	r3, r3, #12
9000d01c:	4313      	orrs	r3, r2
9000d01e:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
9000d020:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
9000d022:	6c62      	ldr	r2, [r4, #68]	; 0x44
9000d024:	f023 0302 	bic.w	r3, r3, #2
9000d028:	4313      	orrs	r3, r2
9000d02a:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
9000d02c:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
9000d02e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
9000d032:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
9000d034:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
9000d036:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
9000d03a:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
9000d03c:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
9000d03e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
9000d042:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLFRACN_ENABLE();
9000d044:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
9000d046:	f043 0301 	orr.w	r3, r3, #1
9000d04a:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_ENABLE();
9000d04c:	682b      	ldr	r3, [r5, #0]
9000d04e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
9000d052:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
9000d054:	f7fc fc74 	bl	90009940 <HAL_GetTick>
9000d058:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
9000d05a:	e005      	b.n	9000d068 <HAL_RCC_OscConfig+0x4b0>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
9000d05c:	f7fc fc70 	bl	90009940 <HAL_GetTick>
9000d060:	1b00      	subs	r0, r0, r4
9000d062:	2802      	cmp	r0, #2
9000d064:	f63f af29 	bhi.w	9000ceba <HAL_RCC_OscConfig+0x302>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
9000d068:	6833      	ldr	r3, [r6, #0]
9000d06a:	019a      	lsls	r2, r3, #6
9000d06c:	d5f6      	bpl.n	9000d05c <HAL_RCC_OscConfig+0x4a4>
9000d06e:	e665      	b.n	9000cd3c <HAL_RCC_OscConfig+0x184>
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
9000d070:	2801      	cmp	r0, #1
      temp1_pllckcfg = RCC->PLLCKSELR;
9000d072:	6aaa      	ldr	r2, [r5, #40]	; 0x28
      temp2_pllckcfg = RCC->PLL1DIVR;
9000d074:	6b2e      	ldr	r6, [r5, #48]	; 0x30
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
9000d076:	f43f ae62 	beq.w	9000cd3e <HAL_RCC_OscConfig+0x186>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
9000d07a:	f002 0303 	and.w	r3, r2, #3
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
9000d07e:	6aa1      	ldr	r1, [r4, #40]	; 0x28
9000d080:	428b      	cmp	r3, r1
9000d082:	f47f aeb9 	bne.w	9000cdf8 <HAL_RCC_OscConfig+0x240>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
9000d086:	f3c2 1205 	ubfx	r2, r2, #4, #6
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
9000d08a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
9000d08c:	429a      	cmp	r2, r3
9000d08e:	f47f aeb3 	bne.w	9000cdf8 <HAL_RCC_OscConfig+0x240>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
9000d092:	6b23      	ldr	r3, [r4, #48]	; 0x30
9000d094:	f3c6 0208 	ubfx	r2, r6, #0, #9
9000d098:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
9000d09a:	429a      	cmp	r2, r3
9000d09c:	f47f aeac 	bne.w	9000cdf8 <HAL_RCC_OscConfig+0x240>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
9000d0a0:	6b63      	ldr	r3, [r4, #52]	; 0x34
9000d0a2:	f3c6 2246 	ubfx	r2, r6, #9, #7
9000d0a6:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
9000d0a8:	429a      	cmp	r2, r3
9000d0aa:	f47f aea5 	bne.w	9000cdf8 <HAL_RCC_OscConfig+0x240>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
9000d0ae:	6ba3      	ldr	r3, [r4, #56]	; 0x38
9000d0b0:	f3c6 4206 	ubfx	r2, r6, #16, #7
9000d0b4:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
9000d0b6:	429a      	cmp	r2, r3
9000d0b8:	f47f ae9e 	bne.w	9000cdf8 <HAL_RCC_OscConfig+0x240>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
9000d0bc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
9000d0be:	f3c6 6606 	ubfx	r6, r6, #24, #7
9000d0c2:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
9000d0c4:	429e      	cmp	r6, r3
9000d0c6:	f47f ae97 	bne.w	9000cdf8 <HAL_RCC_OscConfig+0x240>
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
9000d0ca:	6b6b      	ldr	r3, [r5, #52]	; 0x34
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
9000d0cc:	6ca2      	ldr	r2, [r4, #72]	; 0x48
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
9000d0ce:	f3c3 03cc 	ubfx	r3, r3, #3, #13
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
9000d0d2:	429a      	cmp	r2, r3
9000d0d4:	f43f ae32 	beq.w	9000cd3c <HAL_RCC_OscConfig+0x184>
          __HAL_RCC_PLLFRACN_DISABLE();
9000d0d8:	4a10      	ldr	r2, [pc, #64]	; (9000d11c <HAL_RCC_OscConfig+0x564>)
9000d0da:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
9000d0dc:	f023 0301 	bic.w	r3, r3, #1
9000d0e0:	62d3      	str	r3, [r2, #44]	; 0x2c
          tickstart = HAL_GetTick();
9000d0e2:	f7fc fc2d 	bl	90009940 <HAL_GetTick>
9000d0e6:	4605      	mov	r5, r0
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
9000d0e8:	f7fc fc2a 	bl	90009940 <HAL_GetTick>
9000d0ec:	42a8      	cmp	r0, r5
9000d0ee:	d0fb      	beq.n	9000d0e8 <HAL_RCC_OscConfig+0x530>
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
9000d0f0:	4a0a      	ldr	r2, [pc, #40]	; (9000d11c <HAL_RCC_OscConfig+0x564>)
  return HAL_OK;
9000d0f2:	2000      	movs	r0, #0
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
9000d0f4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
9000d0f6:	4b0b      	ldr	r3, [pc, #44]	; (9000d124 <HAL_RCC_OscConfig+0x56c>)
9000d0f8:	6b54      	ldr	r4, [r2, #52]	; 0x34
9000d0fa:	4023      	ands	r3, r4
9000d0fc:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
9000d100:	6353      	str	r3, [r2, #52]	; 0x34
          __HAL_RCC_PLLFRACN_ENABLE();
9000d102:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
9000d104:	f043 0301 	orr.w	r3, r3, #1
9000d108:	62d3      	str	r3, [r2, #44]	; 0x2c
}
9000d10a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
9000d10c:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
9000d110:	601a      	str	r2, [r3, #0]
9000d112:	681a      	ldr	r2, [r3, #0]
9000d114:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
9000d118:	601a      	str	r2, [r3, #0]
9000d11a:	e575      	b.n	9000cc08 <HAL_RCC_OscConfig+0x50>
9000d11c:	58024400 	.word	0x58024400
9000d120:	fffffc0c 	.word	0xfffffc0c
9000d124:	ffff0007 	.word	0xffff0007
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
9000d128:	4d1c      	ldr	r5, [pc, #112]	; (9000d19c <HAL_RCC_OscConfig+0x5e4>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
9000d12a:	f241 3788 	movw	r7, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
9000d12e:	6f2b      	ldr	r3, [r5, #112]	; 0x70
9000d130:	f023 0301 	bic.w	r3, r3, #1
9000d134:	672b      	str	r3, [r5, #112]	; 0x70
9000d136:	6f2b      	ldr	r3, [r5, #112]	; 0x70
9000d138:	f023 0304 	bic.w	r3, r3, #4
9000d13c:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
9000d13e:	f7fc fbff 	bl	90009940 <HAL_GetTick>
9000d142:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
9000d144:	e005      	b.n	9000d152 <HAL_RCC_OscConfig+0x59a>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
9000d146:	f7fc fbfb 	bl	90009940 <HAL_GetTick>
9000d14a:	1b80      	subs	r0, r0, r6
9000d14c:	42b8      	cmp	r0, r7
9000d14e:	f63f aeb4 	bhi.w	9000ceba <HAL_RCC_OscConfig+0x302>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
9000d152:	6f2b      	ldr	r3, [r5, #112]	; 0x70
9000d154:	0798      	lsls	r0, r3, #30
9000d156:	d4f6      	bmi.n	9000d146 <HAL_RCC_OscConfig+0x58e>
9000d158:	e5d3      	b.n	9000cd02 <HAL_RCC_OscConfig+0x14a>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
9000d15a:	68eb      	ldr	r3, [r5, #12]
9000d15c:	6a22      	ldr	r2, [r4, #32]
9000d15e:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
9000d162:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
9000d166:	60eb      	str	r3, [r5, #12]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
9000d168:	6823      	ldr	r3, [r4, #0]
9000d16a:	e595      	b.n	9000cc98 <HAL_RCC_OscConfig+0xe0>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
9000d16c:	4a0b      	ldr	r2, [pc, #44]	; (9000d19c <HAL_RCC_OscConfig+0x5e4>)
9000d16e:	6f13      	ldr	r3, [r2, #112]	; 0x70
9000d170:	f043 0301 	orr.w	r3, r3, #1
9000d174:	6713      	str	r3, [r2, #112]	; 0x70
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
9000d176:	e690      	b.n	9000ce9a <HAL_RCC_OscConfig+0x2e2>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
9000d178:	4a08      	ldr	r2, [pc, #32]	; (9000d19c <HAL_RCC_OscConfig+0x5e4>)
9000d17a:	6853      	ldr	r3, [r2, #4]
9000d17c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
9000d180:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
9000d184:	6053      	str	r3, [r2, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
9000d186:	6823      	ldr	r3, [r4, #0]
9000d188:	e586      	b.n	9000cc98 <HAL_RCC_OscConfig+0xe0>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
9000d18a:	f042 0204 	orr.w	r2, r2, #4
9000d18e:	671a      	str	r2, [r3, #112]	; 0x70
9000d190:	6f1a      	ldr	r2, [r3, #112]	; 0x70
9000d192:	f042 0201 	orr.w	r2, r2, #1
9000d196:	671a      	str	r2, [r3, #112]	; 0x70
9000d198:	e67f      	b.n	9000ce9a <HAL_RCC_OscConfig+0x2e2>
9000d19a:	bf00      	nop
9000d19c:	58024400 	.word	0x58024400

9000d1a0 <HAL_RCC_GetSysClockFreq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
9000d1a0:	4a47      	ldr	r2, [pc, #284]	; (9000d2c0 <HAL_RCC_GetSysClockFreq+0x120>)
9000d1a2:	6913      	ldr	r3, [r2, #16]
9000d1a4:	f003 0338 	and.w	r3, r3, #56	; 0x38
9000d1a8:	2b10      	cmp	r3, #16
9000d1aa:	d004      	beq.n	9000d1b6 <HAL_RCC_GetSysClockFreq+0x16>
9000d1ac:	2b18      	cmp	r3, #24
9000d1ae:	d00d      	beq.n	9000d1cc <HAL_RCC_GetSysClockFreq+0x2c>
9000d1b0:	b11b      	cbz	r3, 9000d1ba <HAL_RCC_GetSysClockFreq+0x1a>
      sysclockfreq = CSI_VALUE;
9000d1b2:	4844      	ldr	r0, [pc, #272]	; (9000d2c4 <HAL_RCC_GetSysClockFreq+0x124>)
9000d1b4:	4770      	bx	lr
  switch (RCC->CFGR & RCC_CFGR_SWS)
9000d1b6:	4844      	ldr	r0, [pc, #272]	; (9000d2c8 <HAL_RCC_GetSysClockFreq+0x128>)
9000d1b8:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
9000d1ba:	6813      	ldr	r3, [r2, #0]
9000d1bc:	0699      	lsls	r1, r3, #26
9000d1be:	d54a      	bpl.n	9000d256 <HAL_RCC_GetSysClockFreq+0xb6>
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
9000d1c0:	6813      	ldr	r3, [r2, #0]
9000d1c2:	4842      	ldr	r0, [pc, #264]	; (9000d2cc <HAL_RCC_GetSysClockFreq+0x12c>)
9000d1c4:	f3c3 03c1 	ubfx	r3, r3, #3, #2
9000d1c8:	40d8      	lsrs	r0, r3
9000d1ca:	4770      	bx	lr
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
9000d1cc:	6a93      	ldr	r3, [r2, #40]	; 0x28
{
9000d1ce:	b430      	push	{r4, r5}
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
9000d1d0:	6a94      	ldr	r4, [r2, #40]	; 0x28
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
9000d1d2:	6ad5      	ldr	r5, [r2, #44]	; 0x2c
      if (pllm != 0U)
9000d1d4:	f414 7f7c 	tst.w	r4, #1008	; 0x3f0
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
9000d1d8:	6b51      	ldr	r1, [r2, #52]	; 0x34
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
9000d1da:	f3c4 1005 	ubfx	r0, r4, #4, #6
      if (pllm != 0U)
9000d1de:	d038      	beq.n	9000d252 <HAL_RCC_GetSysClockFreq+0xb2>
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
9000d1e0:	f3c1 01cc 	ubfx	r1, r1, #3, #13
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
9000d1e4:	f005 0501 	and.w	r5, r5, #1
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
9000d1e8:	f003 0303 	and.w	r3, r3, #3
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
9000d1ec:	fb05 f101 	mul.w	r1, r5, r1
9000d1f0:	2b01      	cmp	r3, #1
9000d1f2:	ee07 1a90 	vmov	s15, r1
9000d1f6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
        switch (pllsource)
9000d1fa:	d002      	beq.n	9000d202 <HAL_RCC_GetSysClockFreq+0x62>
9000d1fc:	2b02      	cmp	r3, #2
9000d1fe:	d02c      	beq.n	9000d25a <HAL_RCC_GetSysClockFreq+0xba>
9000d200:	b393      	cbz	r3, 9000d268 <HAL_RCC_GetSysClockFreq+0xc8>
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
9000d202:	ee07 0a90 	vmov	s15, r0
9000d206:	ed9f 5a32 	vldr	s10, [pc, #200]	; 9000d2d0 <HAL_RCC_GetSysClockFreq+0x130>
9000d20a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
9000d20e:	6b13      	ldr	r3, [r2, #48]	; 0x30
9000d210:	eec5 6a27 	vdiv.f32	s13, s10, s15
9000d214:	eddf 5a2f 	vldr	s11, [pc, #188]	; 9000d2d4 <HAL_RCC_GetSysClockFreq+0x134>
9000d218:	f3c3 0308 	ubfx	r3, r3, #0, #9
9000d21c:	ee07 3a90 	vmov	s15, r3
9000d220:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
9000d224:	eef8 7ae7 	vcvt.f32.s32	s15, s15
9000d228:	eee7 7a25 	vfma.f32	s15, s14, s11
9000d22c:	ee77 7a86 	vadd.f32	s15, s15, s12
9000d230:	ee66 6aa7 	vmul.f32	s13, s13, s15
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
9000d234:	4b22      	ldr	r3, [pc, #136]	; (9000d2c0 <HAL_RCC_GetSysClockFreq+0x120>)
9000d236:	6b1b      	ldr	r3, [r3, #48]	; 0x30
9000d238:	f3c3 2346 	ubfx	r3, r3, #9, #7
9000d23c:	3301      	adds	r3, #1
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
9000d23e:	ee07 3a90 	vmov	s15, r3
9000d242:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
9000d246:	eec6 7a87 	vdiv.f32	s15, s13, s14
9000d24a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
9000d24e:	ee17 0a90 	vmov	r0, s15
}
9000d252:	bc30      	pop	{r4, r5}
9000d254:	4770      	bx	lr
        sysclockfreq = (uint32_t) HSI_VALUE;
9000d256:	481d      	ldr	r0, [pc, #116]	; (9000d2cc <HAL_RCC_GetSysClockFreq+0x12c>)
}
9000d258:	4770      	bx	lr
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
9000d25a:	ee07 0a90 	vmov	s15, r0
9000d25e:	ed9f 5a1e 	vldr	s10, [pc, #120]	; 9000d2d8 <HAL_RCC_GetSysClockFreq+0x138>
9000d262:	eef8 7ae7 	vcvt.f32.s32	s15, s15
9000d266:	e7d2      	b.n	9000d20e <HAL_RCC_GetSysClockFreq+0x6e>
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
9000d268:	6813      	ldr	r3, [r2, #0]
9000d26a:	069b      	lsls	r3, r3, #26
9000d26c:	d520      	bpl.n	9000d2b0 <HAL_RCC_GetSysClockFreq+0x110>
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
9000d26e:	6814      	ldr	r4, [r2, #0]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
9000d270:	ee07 0a90 	vmov	s15, r0
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
9000d274:	4915      	ldr	r1, [pc, #84]	; (9000d2cc <HAL_RCC_GetSysClockFreq+0x12c>)
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
9000d276:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
9000d27a:	6b13      	ldr	r3, [r2, #48]	; 0x30
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
9000d27c:	f3c4 04c1 	ubfx	r4, r4, #3, #2
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
9000d280:	eef8 7ae7 	vcvt.f32.s32	s15, s15
9000d284:	ed9f 5a13 	vldr	s10, [pc, #76]	; 9000d2d4 <HAL_RCC_GetSysClockFreq+0x134>
9000d288:	f3c3 0308 	ubfx	r3, r3, #0, #9
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
9000d28c:	40e1      	lsrs	r1, r4
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
9000d28e:	ee06 3a90 	vmov	s13, r3
9000d292:	ee06 1a10 	vmov	s12, r1
9000d296:	eef8 6ae6 	vcvt.f32.s32	s13, s13
9000d29a:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
9000d29e:	eee7 6a05 	vfma.f32	s13, s14, s10
9000d2a2:	ee86 7a27 	vdiv.f32	s14, s12, s15
9000d2a6:	ee76 6aa5 	vadd.f32	s13, s13, s11
9000d2aa:	ee66 6a87 	vmul.f32	s13, s13, s14
9000d2ae:	e7c1      	b.n	9000d234 <HAL_RCC_GetSysClockFreq+0x94>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
9000d2b0:	ee07 0a90 	vmov	s15, r0
9000d2b4:	ed9f 5a09 	vldr	s10, [pc, #36]	; 9000d2dc <HAL_RCC_GetSysClockFreq+0x13c>
9000d2b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
9000d2bc:	e7a7      	b.n	9000d20e <HAL_RCC_GetSysClockFreq+0x6e>
9000d2be:	bf00      	nop
9000d2c0:	58024400 	.word	0x58024400
9000d2c4:	003d0900 	.word	0x003d0900
9000d2c8:	017d7840 	.word	0x017d7840
9000d2cc:	03d09000 	.word	0x03d09000
9000d2d0:	4a742400 	.word	0x4a742400
9000d2d4:	39000000 	.word	0x39000000
9000d2d8:	4bbebc20 	.word	0x4bbebc20
9000d2dc:	4c742400 	.word	0x4c742400

9000d2e0 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
9000d2e0:	2800      	cmp	r0, #0
9000d2e2:	f000 810c 	beq.w	9000d4fe <HAL_RCC_ClockConfig+0x21e>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
9000d2e6:	4a8c      	ldr	r2, [pc, #560]	; (9000d518 <HAL_RCC_ClockConfig+0x238>)
9000d2e8:	6813      	ldr	r3, [r2, #0]
9000d2ea:	f003 030f 	and.w	r3, r3, #15
9000d2ee:	428b      	cmp	r3, r1
{
9000d2f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
9000d2f4:	4604      	mov	r4, r0
9000d2f6:	460d      	mov	r5, r1
  if (FLatency > __HAL_FLASH_GET_LATENCY())
9000d2f8:	d20c      	bcs.n	9000d314 <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
9000d2fa:	6813      	ldr	r3, [r2, #0]
9000d2fc:	f023 030f 	bic.w	r3, r3, #15
9000d300:	430b      	orrs	r3, r1
9000d302:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
9000d304:	6813      	ldr	r3, [r2, #0]
9000d306:	f003 030f 	and.w	r3, r3, #15
9000d30a:	428b      	cmp	r3, r1
9000d30c:	d002      	beq.n	9000d314 <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
9000d30e:	2001      	movs	r0, #1
}
9000d310:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
9000d314:	6823      	ldr	r3, [r4, #0]
9000d316:	075f      	lsls	r7, r3, #29
9000d318:	d50b      	bpl.n	9000d332 <HAL_RCC_ClockConfig+0x52>
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
9000d31a:	4980      	ldr	r1, [pc, #512]	; (9000d51c <HAL_RCC_ClockConfig+0x23c>)
9000d31c:	6920      	ldr	r0, [r4, #16]
9000d31e:	698a      	ldr	r2, [r1, #24]
9000d320:	f002 0270 	and.w	r2, r2, #112	; 0x70
9000d324:	4290      	cmp	r0, r2
9000d326:	d904      	bls.n	9000d332 <HAL_RCC_ClockConfig+0x52>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
9000d328:	698a      	ldr	r2, [r1, #24]
9000d32a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
9000d32e:	4302      	orrs	r2, r0
9000d330:	618a      	str	r2, [r1, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
9000d332:	071e      	lsls	r6, r3, #28
9000d334:	d50b      	bpl.n	9000d34e <HAL_RCC_ClockConfig+0x6e>
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
9000d336:	4979      	ldr	r1, [pc, #484]	; (9000d51c <HAL_RCC_ClockConfig+0x23c>)
9000d338:	6960      	ldr	r0, [r4, #20]
9000d33a:	69ca      	ldr	r2, [r1, #28]
9000d33c:	f002 0270 	and.w	r2, r2, #112	; 0x70
9000d340:	4290      	cmp	r0, r2
9000d342:	d904      	bls.n	9000d34e <HAL_RCC_ClockConfig+0x6e>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
9000d344:	69ca      	ldr	r2, [r1, #28]
9000d346:	f022 0270 	bic.w	r2, r2, #112	; 0x70
9000d34a:	4302      	orrs	r2, r0
9000d34c:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
9000d34e:	06d8      	lsls	r0, r3, #27
9000d350:	d50b      	bpl.n	9000d36a <HAL_RCC_ClockConfig+0x8a>
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
9000d352:	4972      	ldr	r1, [pc, #456]	; (9000d51c <HAL_RCC_ClockConfig+0x23c>)
9000d354:	69a0      	ldr	r0, [r4, #24]
9000d356:	69ca      	ldr	r2, [r1, #28]
9000d358:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
9000d35c:	4290      	cmp	r0, r2
9000d35e:	d904      	bls.n	9000d36a <HAL_RCC_ClockConfig+0x8a>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
9000d360:	69ca      	ldr	r2, [r1, #28]
9000d362:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
9000d366:	4302      	orrs	r2, r0
9000d368:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
9000d36a:	0699      	lsls	r1, r3, #26
9000d36c:	d50b      	bpl.n	9000d386 <HAL_RCC_ClockConfig+0xa6>
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
9000d36e:	496b      	ldr	r1, [pc, #428]	; (9000d51c <HAL_RCC_ClockConfig+0x23c>)
9000d370:	69e0      	ldr	r0, [r4, #28]
9000d372:	6a0a      	ldr	r2, [r1, #32]
9000d374:	f002 0270 	and.w	r2, r2, #112	; 0x70
9000d378:	4290      	cmp	r0, r2
9000d37a:	d904      	bls.n	9000d386 <HAL_RCC_ClockConfig+0xa6>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
9000d37c:	6a0a      	ldr	r2, [r1, #32]
9000d37e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
9000d382:	4302      	orrs	r2, r0
9000d384:	620a      	str	r2, [r1, #32]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
9000d386:	079a      	lsls	r2, r3, #30
9000d388:	f140 80ab 	bpl.w	9000d4e2 <HAL_RCC_ClockConfig+0x202>
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
9000d38c:	4863      	ldr	r0, [pc, #396]	; (9000d51c <HAL_RCC_ClockConfig+0x23c>)
9000d38e:	68e1      	ldr	r1, [r4, #12]
9000d390:	6982      	ldr	r2, [r0, #24]
9000d392:	f002 020f 	and.w	r2, r2, #15
9000d396:	4291      	cmp	r1, r2
9000d398:	d904      	bls.n	9000d3a4 <HAL_RCC_ClockConfig+0xc4>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
9000d39a:	6982      	ldr	r2, [r0, #24]
9000d39c:	f022 020f 	bic.w	r2, r2, #15
9000d3a0:	430a      	orrs	r2, r1
9000d3a2:	6182      	str	r2, [r0, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
9000d3a4:	07d8      	lsls	r0, r3, #31
9000d3a6:	d530      	bpl.n	9000d40a <HAL_RCC_ClockConfig+0x12a>
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
9000d3a8:	4a5c      	ldr	r2, [pc, #368]	; (9000d51c <HAL_RCC_ClockConfig+0x23c>)
9000d3aa:	68a1      	ldr	r1, [r4, #8]
9000d3ac:	6993      	ldr	r3, [r2, #24]
9000d3ae:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
9000d3b2:	430b      	orrs	r3, r1
9000d3b4:	6193      	str	r3, [r2, #24]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
9000d3b6:	6861      	ldr	r1, [r4, #4]
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
9000d3b8:	6813      	ldr	r3, [r2, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
9000d3ba:	2902      	cmp	r1, #2
9000d3bc:	f000 80a1 	beq.w	9000d502 <HAL_RCC_ClockConfig+0x222>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
9000d3c0:	2903      	cmp	r1, #3
9000d3c2:	f000 8098 	beq.w	9000d4f6 <HAL_RCC_ClockConfig+0x216>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
9000d3c6:	2901      	cmp	r1, #1
9000d3c8:	f000 80a1 	beq.w	9000d50e <HAL_RCC_ClockConfig+0x22e>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
9000d3cc:	0758      	lsls	r0, r3, #29
9000d3ce:	d59e      	bpl.n	9000d30e <HAL_RCC_ClockConfig+0x2e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
9000d3d0:	4e52      	ldr	r6, [pc, #328]	; (9000d51c <HAL_RCC_ClockConfig+0x23c>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
9000d3d2:	f241 3888 	movw	r8, #5000	; 0x1388
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
9000d3d6:	6933      	ldr	r3, [r6, #16]
9000d3d8:	f023 0307 	bic.w	r3, r3, #7
9000d3dc:	430b      	orrs	r3, r1
9000d3de:	6133      	str	r3, [r6, #16]
    tickstart = HAL_GetTick();
9000d3e0:	f7fc faae 	bl	90009940 <HAL_GetTick>
9000d3e4:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
9000d3e6:	e005      	b.n	9000d3f4 <HAL_RCC_ClockConfig+0x114>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
9000d3e8:	f7fc faaa 	bl	90009940 <HAL_GetTick>
9000d3ec:	1bc0      	subs	r0, r0, r7
9000d3ee:	4540      	cmp	r0, r8
9000d3f0:	f200 808b 	bhi.w	9000d50a <HAL_RCC_ClockConfig+0x22a>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
9000d3f4:	6933      	ldr	r3, [r6, #16]
9000d3f6:	6862      	ldr	r2, [r4, #4]
9000d3f8:	f003 0338 	and.w	r3, r3, #56	; 0x38
9000d3fc:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
9000d400:	d1f2      	bne.n	9000d3e8 <HAL_RCC_ClockConfig+0x108>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
9000d402:	6823      	ldr	r3, [r4, #0]
9000d404:	0799      	lsls	r1, r3, #30
9000d406:	d506      	bpl.n	9000d416 <HAL_RCC_ClockConfig+0x136>
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
9000d408:	68e1      	ldr	r1, [r4, #12]
9000d40a:	4844      	ldr	r0, [pc, #272]	; (9000d51c <HAL_RCC_ClockConfig+0x23c>)
9000d40c:	6982      	ldr	r2, [r0, #24]
9000d40e:	f002 020f 	and.w	r2, r2, #15
9000d412:	428a      	cmp	r2, r1
9000d414:	d869      	bhi.n	9000d4ea <HAL_RCC_ClockConfig+0x20a>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
9000d416:	4940      	ldr	r1, [pc, #256]	; (9000d518 <HAL_RCC_ClockConfig+0x238>)
9000d418:	680a      	ldr	r2, [r1, #0]
9000d41a:	f002 020f 	and.w	r2, r2, #15
9000d41e:	42aa      	cmp	r2, r5
9000d420:	d90a      	bls.n	9000d438 <HAL_RCC_ClockConfig+0x158>
    __HAL_FLASH_SET_LATENCY(FLatency);
9000d422:	680a      	ldr	r2, [r1, #0]
9000d424:	f022 020f 	bic.w	r2, r2, #15
9000d428:	432a      	orrs	r2, r5
9000d42a:	600a      	str	r2, [r1, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
9000d42c:	680a      	ldr	r2, [r1, #0]
9000d42e:	f002 020f 	and.w	r2, r2, #15
9000d432:	42aa      	cmp	r2, r5
9000d434:	f47f af6b 	bne.w	9000d30e <HAL_RCC_ClockConfig+0x2e>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
9000d438:	075a      	lsls	r2, r3, #29
9000d43a:	d50b      	bpl.n	9000d454 <HAL_RCC_ClockConfig+0x174>
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
9000d43c:	4937      	ldr	r1, [pc, #220]	; (9000d51c <HAL_RCC_ClockConfig+0x23c>)
9000d43e:	6920      	ldr	r0, [r4, #16]
9000d440:	698a      	ldr	r2, [r1, #24]
9000d442:	f002 0270 	and.w	r2, r2, #112	; 0x70
9000d446:	4290      	cmp	r0, r2
9000d448:	d204      	bcs.n	9000d454 <HAL_RCC_ClockConfig+0x174>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
9000d44a:	698a      	ldr	r2, [r1, #24]
9000d44c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
9000d450:	4302      	orrs	r2, r0
9000d452:	618a      	str	r2, [r1, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
9000d454:	071f      	lsls	r7, r3, #28
9000d456:	d50b      	bpl.n	9000d470 <HAL_RCC_ClockConfig+0x190>
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
9000d458:	4930      	ldr	r1, [pc, #192]	; (9000d51c <HAL_RCC_ClockConfig+0x23c>)
9000d45a:	6960      	ldr	r0, [r4, #20]
9000d45c:	69ca      	ldr	r2, [r1, #28]
9000d45e:	f002 0270 	and.w	r2, r2, #112	; 0x70
9000d462:	4290      	cmp	r0, r2
9000d464:	d204      	bcs.n	9000d470 <HAL_RCC_ClockConfig+0x190>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
9000d466:	69ca      	ldr	r2, [r1, #28]
9000d468:	f022 0270 	bic.w	r2, r2, #112	; 0x70
9000d46c:	4302      	orrs	r2, r0
9000d46e:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
9000d470:	06de      	lsls	r6, r3, #27
9000d472:	d50b      	bpl.n	9000d48c <HAL_RCC_ClockConfig+0x1ac>
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
9000d474:	4929      	ldr	r1, [pc, #164]	; (9000d51c <HAL_RCC_ClockConfig+0x23c>)
9000d476:	69a0      	ldr	r0, [r4, #24]
9000d478:	69ca      	ldr	r2, [r1, #28]
9000d47a:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
9000d47e:	4290      	cmp	r0, r2
9000d480:	d204      	bcs.n	9000d48c <HAL_RCC_ClockConfig+0x1ac>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
9000d482:	69ca      	ldr	r2, [r1, #28]
9000d484:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
9000d488:	4302      	orrs	r2, r0
9000d48a:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
9000d48c:	069d      	lsls	r5, r3, #26
9000d48e:	d50b      	bpl.n	9000d4a8 <HAL_RCC_ClockConfig+0x1c8>
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
9000d490:	4a22      	ldr	r2, [pc, #136]	; (9000d51c <HAL_RCC_ClockConfig+0x23c>)
9000d492:	69e1      	ldr	r1, [r4, #28]
9000d494:	6a13      	ldr	r3, [r2, #32]
9000d496:	f003 0370 	and.w	r3, r3, #112	; 0x70
9000d49a:	4299      	cmp	r1, r3
9000d49c:	d204      	bcs.n	9000d4a8 <HAL_RCC_ClockConfig+0x1c8>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
9000d49e:	6a13      	ldr	r3, [r2, #32]
9000d4a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
9000d4a4:	430b      	orrs	r3, r1
9000d4a6:	6213      	str	r3, [r2, #32]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
9000d4a8:	f7ff fe7a 	bl	9000d1a0 <HAL_RCC_GetSysClockFreq>
9000d4ac:	4a1b      	ldr	r2, [pc, #108]	; (9000d51c <HAL_RCC_ClockConfig+0x23c>)
9000d4ae:	4603      	mov	r3, r0
9000d4b0:	481b      	ldr	r0, [pc, #108]	; (9000d520 <HAL_RCC_ClockConfig+0x240>)
9000d4b2:	6991      	ldr	r1, [r2, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
9000d4b4:	6992      	ldr	r2, [r2, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
9000d4b6:	f3c1 2103 	ubfx	r1, r1, #8, #4
  SystemCoreClock = common_system_clock;
9000d4ba:	4d1a      	ldr	r5, [pc, #104]	; (9000d524 <HAL_RCC_ClockConfig+0x244>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
9000d4bc:	f002 020f 	and.w	r2, r2, #15
9000d4c0:	4c19      	ldr	r4, [pc, #100]	; (9000d528 <HAL_RCC_ClockConfig+0x248>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
9000d4c2:	5c41      	ldrb	r1, [r0, r1]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
9000d4c4:	5c82      	ldrb	r2, [r0, r2]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
9000d4c6:	f001 011f 	and.w	r1, r1, #31
  halstatus = HAL_InitTick(uwTickPrio);
9000d4ca:	4818      	ldr	r0, [pc, #96]	; (9000d52c <HAL_RCC_ClockConfig+0x24c>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
9000d4cc:	f002 021f 	and.w	r2, r2, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
9000d4d0:	40cb      	lsrs	r3, r1
  halstatus = HAL_InitTick(uwTickPrio);
9000d4d2:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = common_system_clock;
9000d4d4:	602b      	str	r3, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
9000d4d6:	40d3      	lsrs	r3, r2
9000d4d8:	6023      	str	r3, [r4, #0]
}
9000d4da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  halstatus = HAL_InitTick(uwTickPrio);
9000d4de:	f7f7 bbed 	b.w	90004cbc <HAL_InitTick>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
9000d4e2:	07da      	lsls	r2, r3, #31
9000d4e4:	f53f af60 	bmi.w	9000d3a8 <HAL_RCC_ClockConfig+0xc8>
9000d4e8:	e795      	b.n	9000d416 <HAL_RCC_ClockConfig+0x136>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
9000d4ea:	6982      	ldr	r2, [r0, #24]
9000d4ec:	f022 020f 	bic.w	r2, r2, #15
9000d4f0:	430a      	orrs	r2, r1
9000d4f2:	6182      	str	r2, [r0, #24]
9000d4f4:	e78f      	b.n	9000d416 <HAL_RCC_ClockConfig+0x136>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
9000d4f6:	019f      	lsls	r7, r3, #6
9000d4f8:	f53f af6a 	bmi.w	9000d3d0 <HAL_RCC_ClockConfig+0xf0>
9000d4fc:	e707      	b.n	9000d30e <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
9000d4fe:	2001      	movs	r0, #1
}
9000d500:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
9000d502:	039b      	lsls	r3, r3, #14
9000d504:	f53f af64 	bmi.w	9000d3d0 <HAL_RCC_ClockConfig+0xf0>
9000d508:	e701      	b.n	9000d30e <HAL_RCC_ClockConfig+0x2e>
        return HAL_TIMEOUT;
9000d50a:	2003      	movs	r0, #3
9000d50c:	e700      	b.n	9000d310 <HAL_RCC_ClockConfig+0x30>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
9000d50e:	05de      	lsls	r6, r3, #23
9000d510:	f53f af5e 	bmi.w	9000d3d0 <HAL_RCC_ClockConfig+0xf0>
9000d514:	e6fb      	b.n	9000d30e <HAL_RCC_ClockConfig+0x2e>
9000d516:	bf00      	nop
9000d518:	52002000 	.word	0x52002000
9000d51c:	58024400 	.word	0x58024400
9000d520:	9002b690 	.word	0x9002b690
9000d524:	24000054 	.word	0x24000054
9000d528:	24000058 	.word	0x24000058
9000d52c:	24000060 	.word	0x24000060

9000d530 <HAL_RCC_GetPCLK1Freq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
9000d530:	4a1c      	ldr	r2, [pc, #112]	; (9000d5a4 <HAL_RCC_GetPCLK1Freq+0x74>)
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
9000d532:	b538      	push	{r3, r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
9000d534:	6913      	ldr	r3, [r2, #16]
9000d536:	f003 0338 	and.w	r3, r3, #56	; 0x38
9000d53a:	2b10      	cmp	r3, #16
9000d53c:	d021      	beq.n	9000d582 <HAL_RCC_GetPCLK1Freq+0x52>
9000d53e:	2b18      	cmp	r3, #24
9000d540:	d02a      	beq.n	9000d598 <HAL_RCC_GetPCLK1Freq+0x68>
9000d542:	b303      	cbz	r3, 9000d586 <HAL_RCC_GetPCLK1Freq+0x56>
      sysclockfreq = CSI_VALUE;
9000d544:	4818      	ldr	r0, [pc, #96]	; (9000d5a8 <HAL_RCC_GetPCLK1Freq+0x78>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
9000d546:	4a17      	ldr	r2, [pc, #92]	; (9000d5a4 <HAL_RCC_GetPCLK1Freq+0x74>)
9000d548:	4918      	ldr	r1, [pc, #96]	; (9000d5ac <HAL_RCC_GetPCLK1Freq+0x7c>)
9000d54a:	6993      	ldr	r3, [r2, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
9000d54c:	4c18      	ldr	r4, [pc, #96]	; (9000d5b0 <HAL_RCC_GetPCLK1Freq+0x80>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
9000d54e:	f3c3 2303 	ubfx	r3, r3, #8, #4
  SystemCoreClock = common_system_clock;
9000d552:	4d18      	ldr	r5, [pc, #96]	; (9000d5b4 <HAL_RCC_GetPCLK1Freq+0x84>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
9000d554:	5ccb      	ldrb	r3, [r1, r3]
9000d556:	f003 031f 	and.w	r3, r3, #31
9000d55a:	40d8      	lsrs	r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
9000d55c:	6993      	ldr	r3, [r2, #24]
9000d55e:	f003 030f 	and.w	r3, r3, #15
  SystemCoreClock = common_system_clock;
9000d562:	6028      	str	r0, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
9000d564:	5ccb      	ldrb	r3, [r1, r3]
9000d566:	f003 031f 	and.w	r3, r3, #31
9000d56a:	fa20 f303 	lsr.w	r3, r0, r3
9000d56e:	6023      	str	r3, [r4, #0]
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
9000d570:	69d2      	ldr	r2, [r2, #28]
9000d572:	f3c2 1202 	ubfx	r2, r2, #4, #3
9000d576:	5c88      	ldrb	r0, [r1, r2]
9000d578:	f000 001f 	and.w	r0, r0, #31
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
9000d57c:	fa23 f000 	lsr.w	r0, r3, r0
9000d580:	bd38      	pop	{r3, r4, r5, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
9000d582:	480d      	ldr	r0, [pc, #52]	; (9000d5b8 <HAL_RCC_GetPCLK1Freq+0x88>)
9000d584:	e7df      	b.n	9000d546 <HAL_RCC_GetPCLK1Freq+0x16>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
9000d586:	6813      	ldr	r3, [r2, #0]
9000d588:	069b      	lsls	r3, r3, #26
9000d58a:	d508      	bpl.n	9000d59e <HAL_RCC_GetPCLK1Freq+0x6e>
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
9000d58c:	6813      	ldr	r3, [r2, #0]
9000d58e:	480b      	ldr	r0, [pc, #44]	; (9000d5bc <HAL_RCC_GetPCLK1Freq+0x8c>)
9000d590:	f3c3 03c1 	ubfx	r3, r3, #3, #2
9000d594:	40d8      	lsrs	r0, r3
9000d596:	e7d6      	b.n	9000d546 <HAL_RCC_GetPCLK1Freq+0x16>
9000d598:	f7ff fa8a 	bl	9000cab0 <HAL_RCC_GetSysClockFreq.part.0>
9000d59c:	e7d3      	b.n	9000d546 <HAL_RCC_GetPCLK1Freq+0x16>
        sysclockfreq = (uint32_t) HSI_VALUE;
9000d59e:	4807      	ldr	r0, [pc, #28]	; (9000d5bc <HAL_RCC_GetPCLK1Freq+0x8c>)
9000d5a0:	e7d1      	b.n	9000d546 <HAL_RCC_GetPCLK1Freq+0x16>
9000d5a2:	bf00      	nop
9000d5a4:	58024400 	.word	0x58024400
9000d5a8:	003d0900 	.word	0x003d0900
9000d5ac:	9002b690 	.word	0x9002b690
9000d5b0:	24000058 	.word	0x24000058
9000d5b4:	24000054 	.word	0x24000054
9000d5b8:	017d7840 	.word	0x017d7840
9000d5bc:	03d09000 	.word	0x03d09000

9000d5c0 <HAL_RCC_GetPCLK2Freq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
9000d5c0:	4a1c      	ldr	r2, [pc, #112]	; (9000d634 <HAL_RCC_GetPCLK2Freq+0x74>)
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
9000d5c2:	b538      	push	{r3, r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
9000d5c4:	6913      	ldr	r3, [r2, #16]
9000d5c6:	f003 0338 	and.w	r3, r3, #56	; 0x38
9000d5ca:	2b10      	cmp	r3, #16
9000d5cc:	d021      	beq.n	9000d612 <HAL_RCC_GetPCLK2Freq+0x52>
9000d5ce:	2b18      	cmp	r3, #24
9000d5d0:	d02a      	beq.n	9000d628 <HAL_RCC_GetPCLK2Freq+0x68>
9000d5d2:	b303      	cbz	r3, 9000d616 <HAL_RCC_GetPCLK2Freq+0x56>
      sysclockfreq = CSI_VALUE;
9000d5d4:	4818      	ldr	r0, [pc, #96]	; (9000d638 <HAL_RCC_GetPCLK2Freq+0x78>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
9000d5d6:	4a17      	ldr	r2, [pc, #92]	; (9000d634 <HAL_RCC_GetPCLK2Freq+0x74>)
9000d5d8:	4918      	ldr	r1, [pc, #96]	; (9000d63c <HAL_RCC_GetPCLK2Freq+0x7c>)
9000d5da:	6993      	ldr	r3, [r2, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
9000d5dc:	4c18      	ldr	r4, [pc, #96]	; (9000d640 <HAL_RCC_GetPCLK2Freq+0x80>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
9000d5de:	f3c3 2303 	ubfx	r3, r3, #8, #4
  SystemCoreClock = common_system_clock;
9000d5e2:	4d18      	ldr	r5, [pc, #96]	; (9000d644 <HAL_RCC_GetPCLK2Freq+0x84>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
9000d5e4:	5ccb      	ldrb	r3, [r1, r3]
9000d5e6:	f003 031f 	and.w	r3, r3, #31
9000d5ea:	40d8      	lsrs	r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
9000d5ec:	6993      	ldr	r3, [r2, #24]
9000d5ee:	f003 030f 	and.w	r3, r3, #15
  SystemCoreClock = common_system_clock;
9000d5f2:	6028      	str	r0, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
9000d5f4:	5ccb      	ldrb	r3, [r1, r3]
9000d5f6:	f003 031f 	and.w	r3, r3, #31
9000d5fa:	fa20 f303 	lsr.w	r3, r0, r3
9000d5fe:	6023      	str	r3, [r4, #0]
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
9000d600:	69d2      	ldr	r2, [r2, #28]
9000d602:	f3c2 2202 	ubfx	r2, r2, #8, #3
9000d606:	5c88      	ldrb	r0, [r1, r2]
9000d608:	f000 001f 	and.w	r0, r0, #31
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
9000d60c:	fa23 f000 	lsr.w	r0, r3, r0
9000d610:	bd38      	pop	{r3, r4, r5, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
9000d612:	480d      	ldr	r0, [pc, #52]	; (9000d648 <HAL_RCC_GetPCLK2Freq+0x88>)
9000d614:	e7df      	b.n	9000d5d6 <HAL_RCC_GetPCLK2Freq+0x16>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
9000d616:	6813      	ldr	r3, [r2, #0]
9000d618:	069b      	lsls	r3, r3, #26
9000d61a:	d508      	bpl.n	9000d62e <HAL_RCC_GetPCLK2Freq+0x6e>
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
9000d61c:	6813      	ldr	r3, [r2, #0]
9000d61e:	480b      	ldr	r0, [pc, #44]	; (9000d64c <HAL_RCC_GetPCLK2Freq+0x8c>)
9000d620:	f3c3 03c1 	ubfx	r3, r3, #3, #2
9000d624:	40d8      	lsrs	r0, r3
9000d626:	e7d6      	b.n	9000d5d6 <HAL_RCC_GetPCLK2Freq+0x16>
9000d628:	f7ff fa42 	bl	9000cab0 <HAL_RCC_GetSysClockFreq.part.0>
9000d62c:	e7d3      	b.n	9000d5d6 <HAL_RCC_GetPCLK2Freq+0x16>
        sysclockfreq = (uint32_t) HSI_VALUE;
9000d62e:	4807      	ldr	r0, [pc, #28]	; (9000d64c <HAL_RCC_GetPCLK2Freq+0x8c>)
9000d630:	e7d1      	b.n	9000d5d6 <HAL_RCC_GetPCLK2Freq+0x16>
9000d632:	bf00      	nop
9000d634:	58024400 	.word	0x58024400
9000d638:	003d0900 	.word	0x003d0900
9000d63c:	9002b690 	.word	0x9002b690
9000d640:	24000058 	.word	0x24000058
9000d644:	24000054 	.word	0x24000054
9000d648:	017d7840 	.word	0x017d7840
9000d64c:	03d09000 	.word	0x03d09000

9000d650 <HAL_RCC_GetClockConfig>:
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
9000d650:	4b13      	ldr	r3, [pc, #76]	; (9000d6a0 <HAL_RCC_GetClockConfig+0x50>)
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
9000d652:	223f      	movs	r2, #63	; 0x3f
9000d654:	6002      	str	r2, [r0, #0]
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
9000d656:	691a      	ldr	r2, [r3, #16]
9000d658:	f002 0207 	and.w	r2, r2, #7
9000d65c:	6042      	str	r2, [r0, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
9000d65e:	699a      	ldr	r2, [r3, #24]
9000d660:	f402 6270 	and.w	r2, r2, #3840	; 0xf00
9000d664:	6082      	str	r2, [r0, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
9000d666:	699a      	ldr	r2, [r3, #24]
9000d668:	f002 020f 	and.w	r2, r2, #15
9000d66c:	60c2      	str	r2, [r0, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
9000d66e:	699a      	ldr	r2, [r3, #24]
9000d670:	f002 0270 	and.w	r2, r2, #112	; 0x70
9000d674:	6102      	str	r2, [r0, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
9000d676:	69da      	ldr	r2, [r3, #28]
9000d678:	f002 0270 	and.w	r2, r2, #112	; 0x70
9000d67c:	6142      	str	r2, [r0, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
9000d67e:	69da      	ldr	r2, [r3, #28]
9000d680:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
9000d684:	6182      	str	r2, [r0, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
9000d686:	6a1b      	ldr	r3, [r3, #32]
{
9000d688:	b410      	push	{r4}
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
9000d68a:	f003 0370 	and.w	r3, r3, #112	; 0x70
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
9000d68e:	4c05      	ldr	r4, [pc, #20]	; (9000d6a4 <HAL_RCC_GetClockConfig+0x54>)
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
9000d690:	61c3      	str	r3, [r0, #28]
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
9000d692:	6823      	ldr	r3, [r4, #0]
}
9000d694:	f85d 4b04 	ldr.w	r4, [sp], #4
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
9000d698:	f003 030f 	and.w	r3, r3, #15
9000d69c:	600b      	str	r3, [r1, #0]
}
9000d69e:	4770      	bx	lr
9000d6a0:	58024400 	.word	0x58024400
9000d6a4:	52002000 	.word	0x52002000

9000d6a8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
9000d6a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
9000d6aa:	4c3a      	ldr	r4, [pc, #232]	; (9000d794 <RCCEx_PLL2_Config+0xec>)
9000d6ac:	6aa3      	ldr	r3, [r4, #40]	; 0x28
9000d6ae:	f003 0303 	and.w	r3, r3, #3
9000d6b2:	2b03      	cmp	r3, #3
9000d6b4:	d067      	beq.n	9000d786 <RCCEx_PLL2_Config+0xde>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
9000d6b6:	6823      	ldr	r3, [r4, #0]
9000d6b8:	4606      	mov	r6, r0
9000d6ba:	460f      	mov	r7, r1
9000d6bc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
9000d6c0:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
9000d6c2:	f7fc f93d 	bl	90009940 <HAL_GetTick>
9000d6c6:	4605      	mov	r5, r0

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
9000d6c8:	e004      	b.n	9000d6d4 <RCCEx_PLL2_Config+0x2c>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
9000d6ca:	f7fc f939 	bl	90009940 <HAL_GetTick>
9000d6ce:	1b43      	subs	r3, r0, r5
9000d6d0:	2b02      	cmp	r3, #2
9000d6d2:	d856      	bhi.n	9000d782 <RCCEx_PLL2_Config+0xda>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
9000d6d4:	6823      	ldr	r3, [r4, #0]
9000d6d6:	011a      	lsls	r2, r3, #4
9000d6d8:	d4f7      	bmi.n	9000d6ca <RCCEx_PLL2_Config+0x22>
        return HAL_TIMEOUT;
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
9000d6da:	6aa3      	ldr	r3, [r4, #40]	; 0x28
9000d6dc:	6832      	ldr	r2, [r6, #0]
9000d6de:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
9000d6e2:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
9000d6e6:	62a3      	str	r3, [r4, #40]	; 0x28
9000d6e8:	e9d6 3202 	ldrd	r3, r2, [r6, #8]
9000d6ec:	3b01      	subs	r3, #1
9000d6ee:	3a01      	subs	r2, #1
9000d6f0:	025b      	lsls	r3, r3, #9
9000d6f2:	0412      	lsls	r2, r2, #16
9000d6f4:	b29b      	uxth	r3, r3
9000d6f6:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
9000d6fa:	4313      	orrs	r3, r2
9000d6fc:	6872      	ldr	r2, [r6, #4]
9000d6fe:	3a01      	subs	r2, #1
9000d700:	f3c2 0208 	ubfx	r2, r2, #0, #9
9000d704:	4313      	orrs	r3, r2
9000d706:	6932      	ldr	r2, [r6, #16]
9000d708:	3a01      	subs	r2, #1
9000d70a:	0612      	lsls	r2, r2, #24
9000d70c:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
9000d710:	4313      	orrs	r3, r2
9000d712:	63a3      	str	r3, [r4, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
9000d714:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
9000d716:	6972      	ldr	r2, [r6, #20]
9000d718:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
9000d71c:	4313      	orrs	r3, r2
9000d71e:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
9000d720:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
9000d722:	69b3      	ldr	r3, [r6, #24]
9000d724:	f022 0220 	bic.w	r2, r2, #32
9000d728:	431a      	orrs	r2, r3

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
9000d72a:	4b1b      	ldr	r3, [pc, #108]	; (9000d798 <RCCEx_PLL2_Config+0xf0>)
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
9000d72c:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_RCC_PLL2FRACN_DISABLE();
9000d72e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
9000d730:	f022 0210 	bic.w	r2, r2, #16
9000d734:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
9000d736:	6be1      	ldr	r1, [r4, #60]	; 0x3c
9000d738:	69f2      	ldr	r2, [r6, #28]
9000d73a:	400b      	ands	r3, r1
9000d73c:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
9000d740:	63e3      	str	r3, [r4, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
9000d742:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
9000d744:	f043 0310 	orr.w	r3, r3, #16
9000d748:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
9000d74a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if (Divider == DIVIDER_P_UPDATE)
9000d74c:	b1ef      	cbz	r7, 9000d78a <RCCEx_PLL2_Config+0xe2>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
9000d74e:	2f01      	cmp	r7, #1
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
9000d750:	bf0c      	ite	eq
9000d752:	f443 1380 	orreq.w	r3, r3, #1048576	; 0x100000
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
9000d756:	f443 1300 	orrne.w	r3, r3, #2097152	; 0x200000
9000d75a:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
9000d75c:	4c0d      	ldr	r4, [pc, #52]	; (9000d794 <RCCEx_PLL2_Config+0xec>)
9000d75e:	6823      	ldr	r3, [r4, #0]
9000d760:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
9000d764:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
9000d766:	f7fc f8eb 	bl	90009940 <HAL_GetTick>
9000d76a:	4605      	mov	r5, r0

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
9000d76c:	e004      	b.n	9000d778 <RCCEx_PLL2_Config+0xd0>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
9000d76e:	f7fc f8e7 	bl	90009940 <HAL_GetTick>
9000d772:	1b40      	subs	r0, r0, r5
9000d774:	2802      	cmp	r0, #2
9000d776:	d804      	bhi.n	9000d782 <RCCEx_PLL2_Config+0xda>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
9000d778:	6823      	ldr	r3, [r4, #0]
9000d77a:	011b      	lsls	r3, r3, #4
9000d77c:	d5f7      	bpl.n	9000d76e <RCCEx_PLL2_Config+0xc6>
    }

  }


  return status;
9000d77e:	2000      	movs	r0, #0
}
9000d780:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
9000d782:	2003      	movs	r0, #3
}
9000d784:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
9000d786:	2001      	movs	r0, #1
}
9000d788:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
9000d78a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
9000d78e:	62e3      	str	r3, [r4, #44]	; 0x2c
9000d790:	e7e4      	b.n	9000d75c <RCCEx_PLL2_Config+0xb4>
9000d792:	bf00      	nop
9000d794:	58024400 	.word	0x58024400
9000d798:	ffff0007 	.word	0xffff0007

9000d79c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
9000d79c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
9000d79e:	4c3a      	ldr	r4, [pc, #232]	; (9000d888 <RCCEx_PLL3_Config+0xec>)
9000d7a0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
9000d7a2:	f003 0303 	and.w	r3, r3, #3
9000d7a6:	2b03      	cmp	r3, #3
9000d7a8:	d067      	beq.n	9000d87a <RCCEx_PLL3_Config+0xde>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
9000d7aa:	6823      	ldr	r3, [r4, #0]
9000d7ac:	4606      	mov	r6, r0
9000d7ae:	460f      	mov	r7, r1
9000d7b0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
9000d7b4:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
9000d7b6:	f7fc f8c3 	bl	90009940 <HAL_GetTick>
9000d7ba:	4605      	mov	r5, r0
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
9000d7bc:	e004      	b.n	9000d7c8 <RCCEx_PLL3_Config+0x2c>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
9000d7be:	f7fc f8bf 	bl	90009940 <HAL_GetTick>
9000d7c2:	1b43      	subs	r3, r0, r5
9000d7c4:	2b02      	cmp	r3, #2
9000d7c6:	d856      	bhi.n	9000d876 <RCCEx_PLL3_Config+0xda>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
9000d7c8:	6823      	ldr	r3, [r4, #0]
9000d7ca:	009a      	lsls	r2, r3, #2
9000d7cc:	d4f7      	bmi.n	9000d7be <RCCEx_PLL3_Config+0x22>
        return HAL_TIMEOUT;
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
9000d7ce:	6aa3      	ldr	r3, [r4, #40]	; 0x28
9000d7d0:	6832      	ldr	r2, [r6, #0]
9000d7d2:	f023 737c 	bic.w	r3, r3, #66060288	; 0x3f00000
9000d7d6:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
9000d7da:	62a3      	str	r3, [r4, #40]	; 0x28
9000d7dc:	e9d6 3202 	ldrd	r3, r2, [r6, #8]
9000d7e0:	3b01      	subs	r3, #1
9000d7e2:	3a01      	subs	r2, #1
9000d7e4:	025b      	lsls	r3, r3, #9
9000d7e6:	0412      	lsls	r2, r2, #16
9000d7e8:	b29b      	uxth	r3, r3
9000d7ea:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
9000d7ee:	4313      	orrs	r3, r2
9000d7f0:	6872      	ldr	r2, [r6, #4]
9000d7f2:	3a01      	subs	r2, #1
9000d7f4:	f3c2 0208 	ubfx	r2, r2, #0, #9
9000d7f8:	4313      	orrs	r3, r2
9000d7fa:	6932      	ldr	r2, [r6, #16]
9000d7fc:	3a01      	subs	r2, #1
9000d7fe:	0612      	lsls	r2, r2, #24
9000d800:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
9000d804:	4313      	orrs	r3, r2
9000d806:	6423      	str	r3, [r4, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
9000d808:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
9000d80a:	6972      	ldr	r2, [r6, #20]
9000d80c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
9000d810:	4313      	orrs	r3, r2
9000d812:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
9000d814:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
9000d816:	69b3      	ldr	r3, [r6, #24]
9000d818:	f422 7200 	bic.w	r2, r2, #512	; 0x200
9000d81c:	431a      	orrs	r2, r3

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
9000d81e:	4b1b      	ldr	r3, [pc, #108]	; (9000d88c <RCCEx_PLL3_Config+0xf0>)
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
9000d820:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_RCC_PLL3FRACN_DISABLE();
9000d822:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
9000d824:	f422 7280 	bic.w	r2, r2, #256	; 0x100
9000d828:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
9000d82a:	6c61      	ldr	r1, [r4, #68]	; 0x44
9000d82c:	69f2      	ldr	r2, [r6, #28]
9000d82e:	400b      	ands	r3, r1
9000d830:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
9000d834:	6463      	str	r3, [r4, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
9000d836:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
9000d838:	f443 7380 	orr.w	r3, r3, #256	; 0x100
9000d83c:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
9000d83e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if (Divider == DIVIDER_P_UPDATE)
9000d840:	b1ef      	cbz	r7, 9000d87e <RCCEx_PLL3_Config+0xe2>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
9000d842:	2f01      	cmp	r7, #1
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
9000d844:	bf0c      	ite	eq
9000d846:	f443 0300 	orreq.w	r3, r3, #8388608	; 0x800000
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
9000d84a:	f043 7380 	orrne.w	r3, r3, #16777216	; 0x1000000
9000d84e:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
9000d850:	4c0d      	ldr	r4, [pc, #52]	; (9000d888 <RCCEx_PLL3_Config+0xec>)
9000d852:	6823      	ldr	r3, [r4, #0]
9000d854:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
9000d858:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
9000d85a:	f7fc f871 	bl	90009940 <HAL_GetTick>
9000d85e:	4605      	mov	r5, r0

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
9000d860:	e004      	b.n	9000d86c <RCCEx_PLL3_Config+0xd0>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
9000d862:	f7fc f86d 	bl	90009940 <HAL_GetTick>
9000d866:	1b40      	subs	r0, r0, r5
9000d868:	2802      	cmp	r0, #2
9000d86a:	d804      	bhi.n	9000d876 <RCCEx_PLL3_Config+0xda>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
9000d86c:	6823      	ldr	r3, [r4, #0]
9000d86e:	009b      	lsls	r3, r3, #2
9000d870:	d5f7      	bpl.n	9000d862 <RCCEx_PLL3_Config+0xc6>
    }

  }


  return status;
9000d872:	2000      	movs	r0, #0
}
9000d874:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
9000d876:	2003      	movs	r0, #3
}
9000d878:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
9000d87a:	2001      	movs	r0, #1
}
9000d87c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
9000d87e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
9000d882:	62e3      	str	r3, [r4, #44]	; 0x2c
9000d884:	e7e4      	b.n	9000d850 <RCCEx_PLL3_Config+0xb4>
9000d886:	bf00      	nop
9000d888:	58024400 	.word	0x58024400
9000d88c:	ffff0007 	.word	0xffff0007

9000d890 <HAL_RCCEx_PeriphCLKConfig>:
{
9000d890:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
9000d894:	e9d0 3200 	ldrd	r3, r2, [r0]
{
9000d898:	4604      	mov	r4, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
9000d89a:	011d      	lsls	r5, r3, #4
9000d89c:	f003 6600 	and.w	r6, r3, #134217728	; 0x8000000
9000d8a0:	d523      	bpl.n	9000d8ea <HAL_RCCEx_PeriphCLKConfig+0x5a>
    switch (PeriphClkInit->SpdifrxClockSelection)
9000d8a2:	6e81      	ldr	r1, [r0, #104]	; 0x68
9000d8a4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
9000d8a8:	f000 8553 	beq.w	9000e352 <HAL_RCCEx_PeriphCLKConfig+0xac2>
9000d8ac:	d812      	bhi.n	9000d8d4 <HAL_RCCEx_PeriphCLKConfig+0x44>
9000d8ae:	2900      	cmp	r1, #0
9000d8b0:	f000 85a9 	beq.w	9000e406 <HAL_RCCEx_PeriphCLKConfig+0xb76>
9000d8b4:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
9000d8b8:	f040 85a2 	bne.w	9000e400 <HAL_RCCEx_PeriphCLKConfig+0xb70>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
9000d8bc:	2102      	movs	r1, #2
9000d8be:	3008      	adds	r0, #8
9000d8c0:	f7ff fef2 	bl	9000d6a8 <RCCEx_PLL2_Config>
9000d8c4:	4606      	mov	r6, r0
    if (ret == HAL_OK)
9000d8c6:	2e00      	cmp	r6, #0
9000d8c8:	f040 8522 	bne.w	9000e310 <HAL_RCCEx_PeriphCLKConfig+0xa80>
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
9000d8cc:	6ea1      	ldr	r1, [r4, #104]	; 0x68
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
9000d8ce:	e9d4 3200 	ldrd	r3, r2, [r4]
9000d8d2:	e003      	b.n	9000d8dc <HAL_RCCEx_PeriphCLKConfig+0x4c>
    switch (PeriphClkInit->SpdifrxClockSelection)
9000d8d4:	f5b1 1f40 	cmp.w	r1, #3145728	; 0x300000
9000d8d8:	f040 8592 	bne.w	9000e400 <HAL_RCCEx_PeriphCLKConfig+0xb70>
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
9000d8dc:	4dae      	ldr	r5, [pc, #696]	; (9000db98 <HAL_RCCEx_PeriphCLKConfig+0x308>)
9000d8de:	2600      	movs	r6, #0
9000d8e0:	6d28      	ldr	r0, [r5, #80]	; 0x50
9000d8e2:	f420 1040 	bic.w	r0, r0, #3145728	; 0x300000
9000d8e6:	4301      	orrs	r1, r0
9000d8e8:	6529      	str	r1, [r5, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
9000d8ea:	05d8      	lsls	r0, r3, #23
9000d8ec:	d50a      	bpl.n	9000d904 <HAL_RCCEx_PeriphCLKConfig+0x74>
    switch (PeriphClkInit->Sai1ClockSelection)
9000d8ee:	6da1      	ldr	r1, [r4, #88]	; 0x58
9000d8f0:	2904      	cmp	r1, #4
9000d8f2:	d806      	bhi.n	9000d902 <HAL_RCCEx_PeriphCLKConfig+0x72>
9000d8f4:	e8df f011 	tbh	[pc, r1, lsl #1]
9000d8f8:	053d0536 	.word	0x053d0536
9000d8fc:	0323051a 	.word	0x0323051a
9000d900:	0323      	.short	0x0323
9000d902:	2601      	movs	r6, #1
9000d904:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
9000d906:	0599      	lsls	r1, r3, #22
9000d908:	d51d      	bpl.n	9000d946 <HAL_RCCEx_PeriphCLKConfig+0xb6>
    switch (PeriphClkInit->Sai23ClockSelection)
9000d90a:	6de1      	ldr	r1, [r4, #92]	; 0x5c
9000d90c:	2980      	cmp	r1, #128	; 0x80
9000d90e:	f000 8516 	beq.w	9000e33e <HAL_RCCEx_PeriphCLKConfig+0xaae>
9000d912:	f200 80f9 	bhi.w	9000db08 <HAL_RCCEx_PeriphCLKConfig+0x278>
9000d916:	2900      	cmp	r1, #0
9000d918:	f000 8433 	beq.w	9000e182 <HAL_RCCEx_PeriphCLKConfig+0x8f2>
9000d91c:	2940      	cmp	r1, #64	; 0x40
9000d91e:	f040 80fa 	bne.w	9000db16 <HAL_RCCEx_PeriphCLKConfig+0x286>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
9000d922:	2100      	movs	r1, #0
9000d924:	f104 0008 	add.w	r0, r4, #8
9000d928:	f7ff febe 	bl	9000d6a8 <RCCEx_PLL2_Config>
9000d92c:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
9000d92e:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000d932:	2d00      	cmp	r5, #0
9000d934:	f040 83fe 	bne.w	9000e134 <HAL_RCCEx_PeriphCLKConfig+0x8a4>
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
9000d938:	4f97      	ldr	r7, [pc, #604]	; (9000db98 <HAL_RCCEx_PeriphCLKConfig+0x308>)
9000d93a:	6de0      	ldr	r0, [r4, #92]	; 0x5c
9000d93c:	6d39      	ldr	r1, [r7, #80]	; 0x50
9000d93e:	f421 71e0 	bic.w	r1, r1, #448	; 0x1c0
9000d942:	4301      	orrs	r1, r0
9000d944:	6539      	str	r1, [r7, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
9000d946:	055f      	lsls	r7, r3, #21
9000d948:	d521      	bpl.n	9000d98e <HAL_RCCEx_PeriphCLKConfig+0xfe>
    switch (PeriphClkInit->Sai4AClockSelection)
9000d94a:	f8d4 10a8 	ldr.w	r1, [r4, #168]	; 0xa8
9000d94e:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
9000d952:	f000 8521 	beq.w	9000e398 <HAL_RCCEx_PeriphCLKConfig+0xb08>
9000d956:	f200 80e1 	bhi.w	9000db1c <HAL_RCCEx_PeriphCLKConfig+0x28c>
9000d95a:	2900      	cmp	r1, #0
9000d95c:	f000 8418 	beq.w	9000e190 <HAL_RCCEx_PeriphCLKConfig+0x900>
9000d960:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
9000d964:	f040 80e2 	bne.w	9000db2c <HAL_RCCEx_PeriphCLKConfig+0x29c>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
9000d968:	2100      	movs	r1, #0
9000d96a:	f104 0008 	add.w	r0, r4, #8
9000d96e:	f7ff fe9b 	bl	9000d6a8 <RCCEx_PLL2_Config>
9000d972:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
9000d974:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000d978:	2d00      	cmp	r5, #0
9000d97a:	f040 83e2 	bne.w	9000e142 <HAL_RCCEx_PeriphCLKConfig+0x8b2>
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
9000d97e:	4f86      	ldr	r7, [pc, #536]	; (9000db98 <HAL_RCCEx_PeriphCLKConfig+0x308>)
9000d980:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
9000d984:	6db9      	ldr	r1, [r7, #88]	; 0x58
9000d986:	f421 0160 	bic.w	r1, r1, #14680064	; 0xe00000
9000d98a:	4301      	orrs	r1, r0
9000d98c:	65b9      	str	r1, [r7, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
9000d98e:	0518      	lsls	r0, r3, #20
9000d990:	d521      	bpl.n	9000d9d6 <HAL_RCCEx_PeriphCLKConfig+0x146>
    switch (PeriphClkInit->Sai4BClockSelection)
9000d992:	f8d4 10ac 	ldr.w	r1, [r4, #172]	; 0xac
9000d996:	f1b1 7f00 	cmp.w	r1, #33554432	; 0x2000000
9000d99a:	f000 84bd 	beq.w	9000e318 <HAL_RCCEx_PeriphCLKConfig+0xa88>
9000d99e:	f200 80c8 	bhi.w	9000db32 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
9000d9a2:	2900      	cmp	r1, #0
9000d9a4:	f000 83e7 	beq.w	9000e176 <HAL_RCCEx_PeriphCLKConfig+0x8e6>
9000d9a8:	f1b1 7f80 	cmp.w	r1, #16777216	; 0x1000000
9000d9ac:	f040 80c9 	bne.w	9000db42 <HAL_RCCEx_PeriphCLKConfig+0x2b2>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
9000d9b0:	2100      	movs	r1, #0
9000d9b2:	f104 0008 	add.w	r0, r4, #8
9000d9b6:	f7ff fe77 	bl	9000d6a8 <RCCEx_PLL2_Config>
9000d9ba:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
9000d9bc:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000d9c0:	2d00      	cmp	r5, #0
9000d9c2:	f040 83b5 	bne.w	9000e130 <HAL_RCCEx_PeriphCLKConfig+0x8a0>
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
9000d9c6:	4f74      	ldr	r7, [pc, #464]	; (9000db98 <HAL_RCCEx_PeriphCLKConfig+0x308>)
9000d9c8:	f8d4 00ac 	ldr.w	r0, [r4, #172]	; 0xac
9000d9cc:	6db9      	ldr	r1, [r7, #88]	; 0x58
9000d9ce:	f021 61e0 	bic.w	r1, r1, #117440512	; 0x7000000
9000d9d2:	4301      	orrs	r1, r0
9000d9d4:	65b9      	str	r1, [r7, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
9000d9d6:	0199      	lsls	r1, r3, #6
9000d9d8:	d518      	bpl.n	9000da0c <HAL_RCCEx_PeriphCLKConfig+0x17c>
    switch (PeriphClkInit->QspiClockSelection)
9000d9da:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
9000d9dc:	2920      	cmp	r1, #32
9000d9de:	f000 841f 	beq.w	9000e220 <HAL_RCCEx_PeriphCLKConfig+0x990>
9000d9e2:	f200 80b1 	bhi.w	9000db48 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
9000d9e6:	b139      	cbz	r1, 9000d9f8 <HAL_RCCEx_PeriphCLKConfig+0x168>
9000d9e8:	2910      	cmp	r1, #16
9000d9ea:	f040 80b0 	bne.w	9000db4e <HAL_RCCEx_PeriphCLKConfig+0x2be>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
9000d9ee:	486a      	ldr	r0, [pc, #424]	; (9000db98 <HAL_RCCEx_PeriphCLKConfig+0x308>)
9000d9f0:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
9000d9f2:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
9000d9f6:	62c1      	str	r1, [r0, #44]	; 0x2c
    if (ret == HAL_OK)
9000d9f8:	2d00      	cmp	r5, #0
9000d9fa:	f040 83d8 	bne.w	9000e1ae <HAL_RCCEx_PeriphCLKConfig+0x91e>
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
9000d9fe:	4f66      	ldr	r7, [pc, #408]	; (9000db98 <HAL_RCCEx_PeriphCLKConfig+0x308>)
9000da00:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
9000da02:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
9000da04:	f021 0130 	bic.w	r1, r1, #48	; 0x30
9000da08:	4301      	orrs	r1, r0
9000da0a:	64f9      	str	r1, [r7, #76]	; 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
9000da0c:	04df      	lsls	r7, r3, #19
9000da0e:	d51f      	bpl.n	9000da50 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
    switch (PeriphClkInit->Spi123ClockSelection)
9000da10:	6e21      	ldr	r1, [r4, #96]	; 0x60
9000da12:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
9000da16:	f000 84b5 	beq.w	9000e384 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
9000da1a:	f200 809b 	bhi.w	9000db54 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
9000da1e:	2900      	cmp	r1, #0
9000da20:	f000 83a3 	beq.w	9000e16a <HAL_RCCEx_PeriphCLKConfig+0x8da>
9000da24:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
9000da28:	f040 809c 	bne.w	9000db64 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
9000da2c:	2100      	movs	r1, #0
9000da2e:	f104 0008 	add.w	r0, r4, #8
9000da32:	f7ff fe39 	bl	9000d6a8 <RCCEx_PLL2_Config>
9000da36:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
9000da38:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000da3c:	2d00      	cmp	r5, #0
9000da3e:	f040 837b 	bne.w	9000e138 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
9000da42:	4f55      	ldr	r7, [pc, #340]	; (9000db98 <HAL_RCCEx_PeriphCLKConfig+0x308>)
9000da44:	6e20      	ldr	r0, [r4, #96]	; 0x60
9000da46:	6d39      	ldr	r1, [r7, #80]	; 0x50
9000da48:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
9000da4c:	4301      	orrs	r1, r0
9000da4e:	6539      	str	r1, [r7, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
9000da50:	0498      	lsls	r0, r3, #18
9000da52:	d51d      	bpl.n	9000da90 <HAL_RCCEx_PeriphCLKConfig+0x200>
    switch (PeriphClkInit->Spi45ClockSelection)
9000da54:	6e61      	ldr	r1, [r4, #100]	; 0x64
9000da56:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
9000da5a:	f000 8410 	beq.w	9000e27e <HAL_RCCEx_PeriphCLKConfig+0x9ee>
9000da5e:	f200 8084 	bhi.w	9000db6a <HAL_RCCEx_PeriphCLKConfig+0x2da>
9000da62:	b159      	cbz	r1, 9000da7c <HAL_RCCEx_PeriphCLKConfig+0x1ec>
9000da64:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
9000da68:	f040 8087 	bne.w	9000db7a <HAL_RCCEx_PeriphCLKConfig+0x2ea>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
9000da6c:	2101      	movs	r1, #1
9000da6e:	f104 0008 	add.w	r0, r4, #8
9000da72:	f7ff fe19 	bl	9000d6a8 <RCCEx_PLL2_Config>
9000da76:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
9000da78:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000da7c:	2d00      	cmp	r5, #0
9000da7e:	f040 839a 	bne.w	9000e1b6 <HAL_RCCEx_PeriphCLKConfig+0x926>
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
9000da82:	4f45      	ldr	r7, [pc, #276]	; (9000db98 <HAL_RCCEx_PeriphCLKConfig+0x308>)
9000da84:	6e60      	ldr	r0, [r4, #100]	; 0x64
9000da86:	6d39      	ldr	r1, [r7, #80]	; 0x50
9000da88:	f421 21e0 	bic.w	r1, r1, #458752	; 0x70000
9000da8c:	4301      	orrs	r1, r0
9000da8e:	6539      	str	r1, [r7, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
9000da90:	0459      	lsls	r1, r3, #17
9000da92:	d51d      	bpl.n	9000dad0 <HAL_RCCEx_PeriphCLKConfig+0x240>
    switch (PeriphClkInit->Spi6ClockSelection)
9000da94:	f8d4 10b0 	ldr.w	r1, [r4, #176]	; 0xb0
9000da98:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
9000da9c:	f000 83fb 	beq.w	9000e296 <HAL_RCCEx_PeriphCLKConfig+0xa06>
9000daa0:	d86e      	bhi.n	9000db80 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
9000daa2:	b151      	cbz	r1, 9000daba <HAL_RCCEx_PeriphCLKConfig+0x22a>
9000daa4:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
9000daa8:	d172      	bne.n	9000db90 <HAL_RCCEx_PeriphCLKConfig+0x300>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
9000daaa:	2101      	movs	r1, #1
9000daac:	f104 0008 	add.w	r0, r4, #8
9000dab0:	f7ff fdfa 	bl	9000d6a8 <RCCEx_PLL2_Config>
9000dab4:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
9000dab6:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000daba:	2d00      	cmp	r5, #0
9000dabc:	f040 837f 	bne.w	9000e1be <HAL_RCCEx_PeriphCLKConfig+0x92e>
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
9000dac0:	4f35      	ldr	r7, [pc, #212]	; (9000db98 <HAL_RCCEx_PeriphCLKConfig+0x308>)
9000dac2:	f8d4 00b0 	ldr.w	r0, [r4, #176]	; 0xb0
9000dac6:	6db9      	ldr	r1, [r7, #88]	; 0x58
9000dac8:	f021 41e0 	bic.w	r1, r1, #1879048192	; 0x70000000
9000dacc:	4301      	orrs	r1, r0
9000dace:	65b9      	str	r1, [r7, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
9000dad0:	041f      	lsls	r7, r3, #16
9000dad2:	d50d      	bpl.n	9000daf0 <HAL_RCCEx_PeriphCLKConfig+0x260>
    switch (PeriphClkInit->FdcanClockSelection)
9000dad4:	6f21      	ldr	r1, [r4, #112]	; 0x70
9000dad6:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
9000dada:	f000 83c8 	beq.w	9000e26e <HAL_RCCEx_PeriphCLKConfig+0x9de>
9000dade:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
9000dae2:	f000 823b 	beq.w	9000df5c <HAL_RCCEx_PeriphCLKConfig+0x6cc>
9000dae6:	2900      	cmp	r1, #0
9000dae8:	f000 8240 	beq.w	9000df6c <HAL_RCCEx_PeriphCLKConfig+0x6dc>
9000daec:	2601      	movs	r6, #1
9000daee:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
9000daf0:	01d8      	lsls	r0, r3, #7
9000daf2:	d562      	bpl.n	9000dbba <HAL_RCCEx_PeriphCLKConfig+0x32a>
    switch (PeriphClkInit->FmcClockSelection)
9000daf4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
9000daf6:	2903      	cmp	r1, #3
9000daf8:	f200 84bf 	bhi.w	9000e47a <HAL_RCCEx_PeriphCLKConfig+0xbea>
9000dafc:	e8df f011 	tbh	[pc, r1, lsl #1]
9000db00:	004e0053 	.word	0x004e0053
9000db04:	005303e2 	.word	0x005303e2
    switch (PeriphClkInit->Sai23ClockSelection)
9000db08:	29c0      	cmp	r1, #192	; 0xc0
9000db0a:	f43f af12 	beq.w	9000d932 <HAL_RCCEx_PeriphCLKConfig+0xa2>
9000db0e:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
9000db12:	f43f af0e 	beq.w	9000d932 <HAL_RCCEx_PeriphCLKConfig+0xa2>
9000db16:	2601      	movs	r6, #1
9000db18:	4635      	mov	r5, r6
9000db1a:	e714      	b.n	9000d946 <HAL_RCCEx_PeriphCLKConfig+0xb6>
    switch (PeriphClkInit->Sai4AClockSelection)
9000db1c:	f5b1 0fc0 	cmp.w	r1, #6291456	; 0x600000
9000db20:	f43f af2a 	beq.w	9000d978 <HAL_RCCEx_PeriphCLKConfig+0xe8>
9000db24:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
9000db28:	f43f af26 	beq.w	9000d978 <HAL_RCCEx_PeriphCLKConfig+0xe8>
9000db2c:	2601      	movs	r6, #1
9000db2e:	4635      	mov	r5, r6
9000db30:	e72d      	b.n	9000d98e <HAL_RCCEx_PeriphCLKConfig+0xfe>
    switch (PeriphClkInit->Sai4BClockSelection)
9000db32:	f1b1 7f40 	cmp.w	r1, #50331648	; 0x3000000
9000db36:	f43f af43 	beq.w	9000d9c0 <HAL_RCCEx_PeriphCLKConfig+0x130>
9000db3a:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
9000db3e:	f43f af3f 	beq.w	9000d9c0 <HAL_RCCEx_PeriphCLKConfig+0x130>
9000db42:	2601      	movs	r6, #1
9000db44:	4635      	mov	r5, r6
9000db46:	e746      	b.n	9000d9d6 <HAL_RCCEx_PeriphCLKConfig+0x146>
    switch (PeriphClkInit->QspiClockSelection)
9000db48:	2930      	cmp	r1, #48	; 0x30
9000db4a:	f43f af55 	beq.w	9000d9f8 <HAL_RCCEx_PeriphCLKConfig+0x168>
9000db4e:	2601      	movs	r6, #1
9000db50:	4635      	mov	r5, r6
9000db52:	e75b      	b.n	9000da0c <HAL_RCCEx_PeriphCLKConfig+0x17c>
    switch (PeriphClkInit->Spi123ClockSelection)
9000db54:	f5b1 5f40 	cmp.w	r1, #12288	; 0x3000
9000db58:	f43f af70 	beq.w	9000da3c <HAL_RCCEx_PeriphCLKConfig+0x1ac>
9000db5c:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
9000db60:	f43f af6c 	beq.w	9000da3c <HAL_RCCEx_PeriphCLKConfig+0x1ac>
9000db64:	2601      	movs	r6, #1
9000db66:	4635      	mov	r5, r6
9000db68:	e772      	b.n	9000da50 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
    switch (PeriphClkInit->Spi45ClockSelection)
9000db6a:	f421 3080 	bic.w	r0, r1, #65536	; 0x10000
9000db6e:	f5b0 2f80 	cmp.w	r0, #262144	; 0x40000
9000db72:	d083      	beq.n	9000da7c <HAL_RCCEx_PeriphCLKConfig+0x1ec>
9000db74:	f5b1 3f40 	cmp.w	r1, #196608	; 0x30000
9000db78:	d080      	beq.n	9000da7c <HAL_RCCEx_PeriphCLKConfig+0x1ec>
9000db7a:	2601      	movs	r6, #1
9000db7c:	4635      	mov	r5, r6
9000db7e:	e787      	b.n	9000da90 <HAL_RCCEx_PeriphCLKConfig+0x200>
    switch (PeriphClkInit->Spi6ClockSelection)
9000db80:	f021 5080 	bic.w	r0, r1, #268435456	; 0x10000000
9000db84:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
9000db88:	d097      	beq.n	9000daba <HAL_RCCEx_PeriphCLKConfig+0x22a>
9000db8a:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
9000db8e:	d094      	beq.n	9000daba <HAL_RCCEx_PeriphCLKConfig+0x22a>
9000db90:	2601      	movs	r6, #1
9000db92:	4635      	mov	r5, r6
9000db94:	e79c      	b.n	9000dad0 <HAL_RCCEx_PeriphCLKConfig+0x240>
9000db96:	bf00      	nop
9000db98:	58024400 	.word	0x58024400
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
9000db9c:	4839      	ldr	r0, [pc, #228]	; (9000dc84 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
9000db9e:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
9000dba0:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
9000dba4:	62c1      	str	r1, [r0, #44]	; 0x2c
    if (ret == HAL_OK)
9000dba6:	2d00      	cmp	r5, #0
9000dba8:	f040 8303 	bne.w	9000e1b2 <HAL_RCCEx_PeriphCLKConfig+0x922>
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
9000dbac:	4f35      	ldr	r7, [pc, #212]	; (9000dc84 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
9000dbae:	6ca0      	ldr	r0, [r4, #72]	; 0x48
9000dbb0:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
9000dbb2:	f021 0103 	bic.w	r1, r1, #3
9000dbb6:	4301      	orrs	r1, r0
9000dbb8:	64f9      	str	r1, [r7, #76]	; 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
9000dbba:	0259      	lsls	r1, r3, #9
9000dbbc:	f100 826a 	bmi.w	9000e094 <HAL_RCCEx_PeriphCLKConfig+0x804>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
9000dbc0:	07d8      	lsls	r0, r3, #31
9000dbc2:	d52f      	bpl.n	9000dc24 <HAL_RCCEx_PeriphCLKConfig+0x394>
    switch (PeriphClkInit->Usart16ClockSelection)
9000dbc4:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
9000dbc6:	2928      	cmp	r1, #40	; 0x28
9000dbc8:	d82a      	bhi.n	9000dc20 <HAL_RCCEx_PeriphCLKConfig+0x390>
9000dbca:	e8df f011 	tbh	[pc, r1, lsl #1]
9000dbce:	020a      	.short	0x020a
9000dbd0:	00290029 	.word	0x00290029
9000dbd4:	00290029 	.word	0x00290029
9000dbd8:	00290029 	.word	0x00290029
9000dbdc:	02020029 	.word	0x02020029
9000dbe0:	00290029 	.word	0x00290029
9000dbe4:	00290029 	.word	0x00290029
9000dbe8:	00290029 	.word	0x00290029
9000dbec:	04070029 	.word	0x04070029
9000dbf0:	00290029 	.word	0x00290029
9000dbf4:	00290029 	.word	0x00290029
9000dbf8:	00290029 	.word	0x00290029
9000dbfc:	020a0029 	.word	0x020a0029
9000dc00:	00290029 	.word	0x00290029
9000dc04:	00290029 	.word	0x00290029
9000dc08:	00290029 	.word	0x00290029
9000dc0c:	020a0029 	.word	0x020a0029
9000dc10:	00290029 	.word	0x00290029
9000dc14:	00290029 	.word	0x00290029
9000dc18:	00290029 	.word	0x00290029
9000dc1c:	020a0029 	.word	0x020a0029
9000dc20:	2601      	movs	r6, #1
9000dc22:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
9000dc24:	0799      	lsls	r1, r3, #30
9000dc26:	d51d      	bpl.n	9000dc64 <HAL_RCCEx_PeriphCLKConfig+0x3d4>
    switch (PeriphClkInit->Usart234578ClockSelection)
9000dc28:	6fa1      	ldr	r1, [r4, #120]	; 0x78
9000dc2a:	2905      	cmp	r1, #5
9000dc2c:	f200 8421 	bhi.w	9000e472 <HAL_RCCEx_PeriphCLKConfig+0xbe2>
9000dc30:	e8df f011 	tbh	[pc, r1, lsl #1]
9000dc34:	0006000e 	.word	0x0006000e
9000dc38:	000e03c8 	.word	0x000e03c8
9000dc3c:	000e000e 	.word	0x000e000e
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
9000dc40:	2101      	movs	r1, #1
9000dc42:	f104 0008 	add.w	r0, r4, #8
9000dc46:	f7ff fd2f 	bl	9000d6a8 <RCCEx_PLL2_Config>
9000dc4a:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
9000dc4c:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000dc50:	2d00      	cmp	r5, #0
9000dc52:	f040 82b8 	bne.w	9000e1c6 <HAL_RCCEx_PeriphCLKConfig+0x936>
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
9000dc56:	4f0b      	ldr	r7, [pc, #44]	; (9000dc84 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
9000dc58:	6fa0      	ldr	r0, [r4, #120]	; 0x78
9000dc5a:	6d79      	ldr	r1, [r7, #84]	; 0x54
9000dc5c:	f021 0107 	bic.w	r1, r1, #7
9000dc60:	4301      	orrs	r1, r0
9000dc62:	6579      	str	r1, [r7, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
9000dc64:	075f      	lsls	r7, r3, #29
9000dc66:	d522      	bpl.n	9000dcae <HAL_RCCEx_PeriphCLKConfig+0x41e>
    switch (PeriphClkInit->Lpuart1ClockSelection)
9000dc68:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
9000dc6c:	2905      	cmp	r1, #5
9000dc6e:	f200 8408 	bhi.w	9000e482 <HAL_RCCEx_PeriphCLKConfig+0xbf2>
9000dc72:	e8df f011 	tbh	[pc, r1, lsl #1]
9000dc76:	0011      	.short	0x0011
9000dc78:	039b0009 	.word	0x039b0009
9000dc7c:	00110011 	.word	0x00110011
9000dc80:	0011      	.short	0x0011
9000dc82:	bf00      	nop
9000dc84:	58024400 	.word	0x58024400
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
9000dc88:	2101      	movs	r1, #1
9000dc8a:	f104 0008 	add.w	r0, r4, #8
9000dc8e:	f7ff fd0b 	bl	9000d6a8 <RCCEx_PLL2_Config>
9000dc92:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
9000dc94:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000dc98:	2d00      	cmp	r5, #0
9000dc9a:	f040 8286 	bne.w	9000e1aa <HAL_RCCEx_PeriphCLKConfig+0x91a>
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
9000dc9e:	4fae      	ldr	r7, [pc, #696]	; (9000df58 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
9000dca0:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
9000dca4:	6db9      	ldr	r1, [r7, #88]	; 0x58
9000dca6:	f021 0107 	bic.w	r1, r1, #7
9000dcaa:	4301      	orrs	r1, r0
9000dcac:	65b9      	str	r1, [r7, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
9000dcae:	0698      	lsls	r0, r3, #26
9000dcb0:	d51f      	bpl.n	9000dcf2 <HAL_RCCEx_PeriphCLKConfig+0x462>
    switch (PeriphClkInit->Lptim1ClockSelection)
9000dcb2:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
9000dcb6:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
9000dcba:	f000 82f7 	beq.w	9000e2ac <HAL_RCCEx_PeriphCLKConfig+0xa1c>
9000dcbe:	f200 810b 	bhi.w	9000ded8 <HAL_RCCEx_PeriphCLKConfig+0x648>
9000dcc2:	b159      	cbz	r1, 9000dcdc <HAL_RCCEx_PeriphCLKConfig+0x44c>
9000dcc4:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
9000dcc8:	f040 8110 	bne.w	9000deec <HAL_RCCEx_PeriphCLKConfig+0x65c>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
9000dccc:	2100      	movs	r1, #0
9000dcce:	f104 0008 	add.w	r0, r4, #8
9000dcd2:	f7ff fce9 	bl	9000d6a8 <RCCEx_PLL2_Config>
9000dcd6:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
9000dcd8:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000dcdc:	2d00      	cmp	r5, #0
9000dcde:	f040 8260 	bne.w	9000e1a2 <HAL_RCCEx_PeriphCLKConfig+0x912>
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
9000dce2:	4f9d      	ldr	r7, [pc, #628]	; (9000df58 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
9000dce4:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
9000dce8:	6d79      	ldr	r1, [r7, #84]	; 0x54
9000dcea:	f021 41e0 	bic.w	r1, r1, #1879048192	; 0x70000000
9000dcee:	4301      	orrs	r1, r0
9000dcf0:	6579      	str	r1, [r7, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
9000dcf2:	0659      	lsls	r1, r3, #25
9000dcf4:	d51f      	bpl.n	9000dd36 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    switch (PeriphClkInit->Lptim2ClockSelection)
9000dcf6:	f8d4 109c 	ldr.w	r1, [r4, #156]	; 0x9c
9000dcfa:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
9000dcfe:	f000 829b 	beq.w	9000e238 <HAL_RCCEx_PeriphCLKConfig+0x9a8>
9000dd02:	f200 80f6 	bhi.w	9000def2 <HAL_RCCEx_PeriphCLKConfig+0x662>
9000dd06:	b159      	cbz	r1, 9000dd20 <HAL_RCCEx_PeriphCLKConfig+0x490>
9000dd08:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
9000dd0c:	f040 80fb 	bne.w	9000df06 <HAL_RCCEx_PeriphCLKConfig+0x676>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
9000dd10:	2100      	movs	r1, #0
9000dd12:	f104 0008 	add.w	r0, r4, #8
9000dd16:	f7ff fcc7 	bl	9000d6a8 <RCCEx_PLL2_Config>
9000dd1a:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
9000dd1c:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000dd20:	2d00      	cmp	r5, #0
9000dd22:	f040 824e 	bne.w	9000e1c2 <HAL_RCCEx_PeriphCLKConfig+0x932>
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
9000dd26:	4f8c      	ldr	r7, [pc, #560]	; (9000df58 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
9000dd28:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
9000dd2c:	6db9      	ldr	r1, [r7, #88]	; 0x58
9000dd2e:	f421 51e0 	bic.w	r1, r1, #7168	; 0x1c00
9000dd32:	4301      	orrs	r1, r0
9000dd34:	65b9      	str	r1, [r7, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
9000dd36:	061f      	lsls	r7, r3, #24
9000dd38:	d51f      	bpl.n	9000dd7a <HAL_RCCEx_PeriphCLKConfig+0x4ea>
    switch (PeriphClkInit->Lptim345ClockSelection)
9000dd3a:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
9000dd3e:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
9000dd42:	f000 8289 	beq.w	9000e258 <HAL_RCCEx_PeriphCLKConfig+0x9c8>
9000dd46:	f200 80e1 	bhi.w	9000df0c <HAL_RCCEx_PeriphCLKConfig+0x67c>
9000dd4a:	b159      	cbz	r1, 9000dd64 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
9000dd4c:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
9000dd50:	f040 80e6 	bne.w	9000df20 <HAL_RCCEx_PeriphCLKConfig+0x690>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
9000dd54:	2100      	movs	r1, #0
9000dd56:	f104 0008 	add.w	r0, r4, #8
9000dd5a:	f7ff fca5 	bl	9000d6a8 <RCCEx_PLL2_Config>
9000dd5e:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
9000dd60:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000dd64:	2d00      	cmp	r5, #0
9000dd66:	f040 8228 	bne.w	9000e1ba <HAL_RCCEx_PeriphCLKConfig+0x92a>
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
9000dd6a:	4f7b      	ldr	r7, [pc, #492]	; (9000df58 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
9000dd6c:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
9000dd70:	6db9      	ldr	r1, [r7, #88]	; 0x58
9000dd72:	f421 4160 	bic.w	r1, r1, #57344	; 0xe000
9000dd76:	4301      	orrs	r1, r0
9000dd78:	65b9      	str	r1, [r7, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
9000dd7a:	0718      	lsls	r0, r3, #28
9000dd7c:	d50b      	bpl.n	9000dd96 <HAL_RCCEx_PeriphCLKConfig+0x506>
    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
9000dd7e:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
9000dd82:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
9000dd86:	f000 82a9 	beq.w	9000e2dc <HAL_RCCEx_PeriphCLKConfig+0xa4c>
    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
9000dd8a:	4f73      	ldr	r7, [pc, #460]	; (9000df58 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
9000dd8c:	6d79      	ldr	r1, [r7, #84]	; 0x54
9000dd8e:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
9000dd92:	4301      	orrs	r1, r0
9000dd94:	6579      	str	r1, [r7, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
9000dd96:	06d9      	lsls	r1, r3, #27
9000dd98:	d50b      	bpl.n	9000ddb2 <HAL_RCCEx_PeriphCLKConfig+0x522>
    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
9000dd9a:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
9000dd9e:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
9000dda2:	f000 82a8 	beq.w	9000e2f6 <HAL_RCCEx_PeriphCLKConfig+0xa66>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
9000dda6:	4f6c      	ldr	r7, [pc, #432]	; (9000df58 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
9000dda8:	6db9      	ldr	r1, [r7, #88]	; 0x58
9000ddaa:	f421 7140 	bic.w	r1, r1, #768	; 0x300
9000ddae:	4301      	orrs	r1, r0
9000ddb0:	65b9      	str	r1, [r7, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
9000ddb2:	031f      	lsls	r7, r3, #12
9000ddb4:	d50e      	bpl.n	9000ddd4 <HAL_RCCEx_PeriphCLKConfig+0x544>
    switch (PeriphClkInit->AdcClockSelection)
9000ddb6:	f8d4 10a4 	ldr.w	r1, [r4, #164]	; 0xa4
9000ddba:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
9000ddbe:	f000 80f4 	beq.w	9000dfaa <HAL_RCCEx_PeriphCLKConfig+0x71a>
9000ddc2:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
9000ddc6:	f000 80f8 	beq.w	9000dfba <HAL_RCCEx_PeriphCLKConfig+0x72a>
9000ddca:	2900      	cmp	r1, #0
9000ddcc:	f000 821c 	beq.w	9000e208 <HAL_RCCEx_PeriphCLKConfig+0x978>
9000ddd0:	2601      	movs	r6, #1
9000ddd2:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
9000ddd4:	0358      	lsls	r0, r3, #13
9000ddd6:	d50f      	bpl.n	9000ddf8 <HAL_RCCEx_PeriphCLKConfig+0x568>
    switch (PeriphClkInit->UsbClockSelection)
9000ddd8:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
9000dddc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
9000dde0:	f000 80cf 	beq.w	9000df82 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
9000dde4:	f5b1 1f40 	cmp.w	r1, #3145728	; 0x300000
9000dde8:	f000 80d3 	beq.w	9000df92 <HAL_RCCEx_PeriphCLKConfig+0x702>
9000ddec:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
9000ddf0:	f000 8202 	beq.w	9000e1f8 <HAL_RCCEx_PeriphCLKConfig+0x968>
9000ddf4:	2601      	movs	r6, #1
9000ddf6:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
9000ddf8:	03d9      	lsls	r1, r3, #15
9000ddfa:	d509      	bpl.n	9000de10 <HAL_RCCEx_PeriphCLKConfig+0x580>
    switch (PeriphClkInit->SdmmcClockSelection)
9000ddfc:	6d21      	ldr	r1, [r4, #80]	; 0x50
9000ddfe:	2900      	cmp	r1, #0
9000de00:	f000 81f1 	beq.w	9000e1e6 <HAL_RCCEx_PeriphCLKConfig+0x956>
9000de04:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
9000de08:	f000 819d 	beq.w	9000e146 <HAL_RCCEx_PeriphCLKConfig+0x8b6>
9000de0c:	2601      	movs	r6, #1
9000de0e:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
9000de10:	009f      	lsls	r7, r3, #2
9000de12:	f100 80f1 	bmi.w	9000dff8 <HAL_RCCEx_PeriphCLKConfig+0x768>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
9000de16:	0398      	lsls	r0, r3, #14
9000de18:	d50c      	bpl.n	9000de34 <HAL_RCCEx_PeriphCLKConfig+0x5a4>
    switch (PeriphClkInit->RngClockSelection)
9000de1a:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
9000de1e:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
9000de22:	f000 81d8 	beq.w	9000e1d6 <HAL_RCCEx_PeriphCLKConfig+0x946>
9000de26:	d97e      	bls.n	9000df26 <HAL_RCCEx_PeriphCLKConfig+0x696>
9000de28:	f421 7080 	bic.w	r0, r1, #256	; 0x100
9000de2c:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
9000de30:	d07b      	beq.n	9000df2a <HAL_RCCEx_PeriphCLKConfig+0x69a>
9000de32:	2601      	movs	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
9000de34:	02d9      	lsls	r1, r3, #11
9000de36:	d506      	bpl.n	9000de46 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
9000de38:	4847      	ldr	r0, [pc, #284]	; (9000df58 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
9000de3a:	6f65      	ldr	r5, [r4, #116]	; 0x74
9000de3c:	6d01      	ldr	r1, [r0, #80]	; 0x50
9000de3e:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
9000de42:	4329      	orrs	r1, r5
9000de44:	6501      	str	r1, [r0, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
9000de46:	00df      	lsls	r7, r3, #3
9000de48:	d507      	bpl.n	9000de5a <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
9000de4a:	4843      	ldr	r0, [pc, #268]	; (9000df58 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
9000de4c:	f8d4 50b8 	ldr.w	r5, [r4, #184]	; 0xb8
9000de50:	6901      	ldr	r1, [r0, #16]
9000de52:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
9000de56:	4329      	orrs	r1, r5
9000de58:	6101      	str	r1, [r0, #16]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
9000de5a:	029d      	lsls	r5, r3, #10
9000de5c:	d506      	bpl.n	9000de6c <HAL_RCCEx_PeriphCLKConfig+0x5dc>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
9000de5e:	483e      	ldr	r0, [pc, #248]	; (9000df58 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
9000de60:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
9000de62:	6d01      	ldr	r1, [r0, #80]	; 0x50
9000de64:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
9000de68:	4329      	orrs	r1, r5
9000de6a:	6501      	str	r1, [r0, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
9000de6c:	0058      	lsls	r0, r3, #1
9000de6e:	d509      	bpl.n	9000de84 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
9000de70:	4939      	ldr	r1, [pc, #228]	; (9000df58 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
9000de72:	6908      	ldr	r0, [r1, #16]
9000de74:	f420 4000 	bic.w	r0, r0, #32768	; 0x8000
9000de78:	6108      	str	r0, [r1, #16]
9000de7a:	6908      	ldr	r0, [r1, #16]
9000de7c:	f8d4 50bc 	ldr.w	r5, [r4, #188]	; 0xbc
9000de80:	4328      	orrs	r0, r5
9000de82:	6108      	str	r0, [r1, #16]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
9000de84:	2b00      	cmp	r3, #0
9000de86:	da06      	bge.n	9000de96 <HAL_RCCEx_PeriphCLKConfig+0x606>
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
9000de88:	4833      	ldr	r0, [pc, #204]	; (9000df58 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
9000de8a:	6d65      	ldr	r5, [r4, #84]	; 0x54
9000de8c:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
9000de8e:	f021 5140 	bic.w	r1, r1, #805306368	; 0x30000000
9000de92:	4329      	orrs	r1, r5
9000de94:	64c1      	str	r1, [r0, #76]	; 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
9000de96:	0219      	lsls	r1, r3, #8
9000de98:	d507      	bpl.n	9000deaa <HAL_RCCEx_PeriphCLKConfig+0x61a>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
9000de9a:	492f      	ldr	r1, [pc, #188]	; (9000df58 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
9000de9c:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
9000dea0:	6d4b      	ldr	r3, [r1, #84]	; 0x54
9000dea2:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
9000dea6:	4303      	orrs	r3, r0
9000dea8:	654b      	str	r3, [r1, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
9000deaa:	07d3      	lsls	r3, r2, #31
9000deac:	f100 80b0 	bmi.w	9000e010 <HAL_RCCEx_PeriphCLKConfig+0x780>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
9000deb0:	0797      	lsls	r7, r2, #30
9000deb2:	f100 80ba 	bmi.w	9000e02a <HAL_RCCEx_PeriphCLKConfig+0x79a>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
9000deb6:	0755      	lsls	r5, r2, #29
9000deb8:	f100 80c4 	bmi.w	9000e044 <HAL_RCCEx_PeriphCLKConfig+0x7b4>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
9000debc:	0710      	lsls	r0, r2, #28
9000debe:	f100 80ce 	bmi.w	9000e05e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
9000dec2:	06d1      	lsls	r1, r2, #27
9000dec4:	f100 80d8 	bmi.w	9000e078 <HAL_RCCEx_PeriphCLKConfig+0x7e8>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
9000dec8:	0692      	lsls	r2, r2, #26
9000deca:	f100 8125 	bmi.w	9000e118 <HAL_RCCEx_PeriphCLKConfig+0x888>
    return HAL_OK;
9000dece:	1e30      	subs	r0, r6, #0
9000ded0:	bf18      	it	ne
9000ded2:	2001      	movne	r0, #1
}
9000ded4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    switch (PeriphClkInit->Lptim1ClockSelection)
9000ded8:	f021 5080 	bic.w	r0, r1, #268435456	; 0x10000000
9000dedc:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
9000dee0:	f43f aefc 	beq.w	9000dcdc <HAL_RCCEx_PeriphCLKConfig+0x44c>
9000dee4:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
9000dee8:	f43f aef8 	beq.w	9000dcdc <HAL_RCCEx_PeriphCLKConfig+0x44c>
9000deec:	2601      	movs	r6, #1
9000deee:	4635      	mov	r5, r6
9000def0:	e6ff      	b.n	9000dcf2 <HAL_RCCEx_PeriphCLKConfig+0x462>
    switch (PeriphClkInit->Lptim2ClockSelection)
9000def2:	f421 6080 	bic.w	r0, r1, #1024	; 0x400
9000def6:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
9000defa:	f43f af11 	beq.w	9000dd20 <HAL_RCCEx_PeriphCLKConfig+0x490>
9000defe:	f5b1 6f40 	cmp.w	r1, #3072	; 0xc00
9000df02:	f43f af0d 	beq.w	9000dd20 <HAL_RCCEx_PeriphCLKConfig+0x490>
9000df06:	2601      	movs	r6, #1
9000df08:	4635      	mov	r5, r6
9000df0a:	e714      	b.n	9000dd36 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    switch (PeriphClkInit->Lptim345ClockSelection)
9000df0c:	f421 5000 	bic.w	r0, r1, #8192	; 0x2000
9000df10:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
9000df14:	f43f af26 	beq.w	9000dd64 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
9000df18:	f5b1 4fc0 	cmp.w	r1, #24576	; 0x6000
9000df1c:	f43f af22 	beq.w	9000dd64 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
9000df20:	2601      	movs	r6, #1
9000df22:	4635      	mov	r5, r6
9000df24:	e729      	b.n	9000dd7a <HAL_RCCEx_PeriphCLKConfig+0x4ea>
    switch (PeriphClkInit->RngClockSelection)
9000df26:	2900      	cmp	r1, #0
9000df28:	d183      	bne.n	9000de32 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
    if (ret == HAL_OK)
9000df2a:	2d00      	cmp	r5, #0
9000df2c:	f040 8151 	bne.w	9000e1d2 <HAL_RCCEx_PeriphCLKConfig+0x942>
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
9000df30:	4d09      	ldr	r5, [pc, #36]	; (9000df58 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
9000df32:	6d68      	ldr	r0, [r5, #84]	; 0x54
9000df34:	f420 7040 	bic.w	r0, r0, #768	; 0x300
9000df38:	4301      	orrs	r1, r0
9000df3a:	6569      	str	r1, [r5, #84]	; 0x54
9000df3c:	e77a      	b.n	9000de34 <HAL_RCCEx_PeriphCLKConfig+0x5a4>
    switch (PeriphClkInit->Sai1ClockSelection)
9000df3e:	4635      	mov	r5, r6
    if (ret == HAL_OK)
9000df40:	2d00      	cmp	r5, #0
9000df42:	f040 80fb 	bne.w	9000e13c <HAL_RCCEx_PeriphCLKConfig+0x8ac>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
9000df46:	4f04      	ldr	r7, [pc, #16]	; (9000df58 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
9000df48:	6da0      	ldr	r0, [r4, #88]	; 0x58
9000df4a:	6d39      	ldr	r1, [r7, #80]	; 0x50
9000df4c:	f021 0107 	bic.w	r1, r1, #7
9000df50:	4301      	orrs	r1, r0
9000df52:	6539      	str	r1, [r7, #80]	; 0x50
9000df54:	e4d7      	b.n	9000d906 <HAL_RCCEx_PeriphCLKConfig+0x76>
9000df56:	bf00      	nop
9000df58:	58024400 	.word	0x58024400
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
9000df5c:	2101      	movs	r1, #1
9000df5e:	f104 0008 	add.w	r0, r4, #8
9000df62:	f7ff fba1 	bl	9000d6a8 <RCCEx_PLL2_Config>
9000df66:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
9000df68:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000df6c:	2d00      	cmp	r5, #0
9000df6e:	f040 811a 	bne.w	9000e1a6 <HAL_RCCEx_PeriphCLKConfig+0x916>
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
9000df72:	4fb7      	ldr	r7, [pc, #732]	; (9000e250 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
9000df74:	6f20      	ldr	r0, [r4, #112]	; 0x70
9000df76:	6d39      	ldr	r1, [r7, #80]	; 0x50
9000df78:	f021 5140 	bic.w	r1, r1, #805306368	; 0x30000000
9000df7c:	4301      	orrs	r1, r0
9000df7e:	6539      	str	r1, [r7, #80]	; 0x50
9000df80:	e5b6      	b.n	9000daf0 <HAL_RCCEx_PeriphCLKConfig+0x260>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
9000df82:	2101      	movs	r1, #1
9000df84:	f104 0028 	add.w	r0, r4, #40	; 0x28
9000df88:	f7ff fc08 	bl	9000d79c <RCCEx_PLL3_Config>
9000df8c:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
9000df8e:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000df92:	2d00      	cmp	r5, #0
9000df94:	f040 811b 	bne.w	9000e1ce <HAL_RCCEx_PeriphCLKConfig+0x93e>
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
9000df98:	4fad      	ldr	r7, [pc, #692]	; (9000e250 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
9000df9a:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
9000df9e:	6d79      	ldr	r1, [r7, #84]	; 0x54
9000dfa0:	f421 1140 	bic.w	r1, r1, #3145728	; 0x300000
9000dfa4:	4301      	orrs	r1, r0
9000dfa6:	6579      	str	r1, [r7, #84]	; 0x54
9000dfa8:	e726      	b.n	9000ddf8 <HAL_RCCEx_PeriphCLKConfig+0x568>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
9000dfaa:	2102      	movs	r1, #2
9000dfac:	f104 0028 	add.w	r0, r4, #40	; 0x28
9000dfb0:	f7ff fbf4 	bl	9000d79c <RCCEx_PLL3_Config>
9000dfb4:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
9000dfb6:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000dfba:	2d00      	cmp	r5, #0
9000dfbc:	f040 8105 	bne.w	9000e1ca <HAL_RCCEx_PeriphCLKConfig+0x93a>
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
9000dfc0:	4fa3      	ldr	r7, [pc, #652]	; (9000e250 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
9000dfc2:	f8d4 00a4 	ldr.w	r0, [r4, #164]	; 0xa4
9000dfc6:	6db9      	ldr	r1, [r7, #88]	; 0x58
9000dfc8:	f421 3140 	bic.w	r1, r1, #196608	; 0x30000
9000dfcc:	4301      	orrs	r1, r0
9000dfce:	65b9      	str	r1, [r7, #88]	; 0x58
9000dfd0:	e700      	b.n	9000ddd4 <HAL_RCCEx_PeriphCLKConfig+0x544>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
9000dfd2:	2101      	movs	r1, #1
9000dfd4:	f104 0008 	add.w	r0, r4, #8
9000dfd8:	f7ff fb66 	bl	9000d6a8 <RCCEx_PLL2_Config>
9000dfdc:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
9000dfde:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000dfe2:	2d00      	cmp	r5, #0
9000dfe4:	f040 80db 	bne.w	9000e19e <HAL_RCCEx_PeriphCLKConfig+0x90e>
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
9000dfe8:	4f99      	ldr	r7, [pc, #612]	; (9000e250 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
9000dfea:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
9000dfec:	6d79      	ldr	r1, [r7, #84]	; 0x54
9000dfee:	f021 0138 	bic.w	r1, r1, #56	; 0x38
9000dff2:	4301      	orrs	r1, r0
9000dff4:	6579      	str	r1, [r7, #84]	; 0x54
9000dff6:	e615      	b.n	9000dc24 <HAL_RCCEx_PeriphCLKConfig+0x394>
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
9000dff8:	2102      	movs	r1, #2
9000dffa:	f104 0028 	add.w	r0, r4, #40	; 0x28
9000dffe:	f7ff fbcd 	bl	9000d79c <RCCEx_PLL3_Config>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
9000e002:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
9000e006:	2800      	cmp	r0, #0
9000e008:	f43f af05 	beq.w	9000de16 <HAL_RCCEx_PeriphCLKConfig+0x586>
      status = HAL_ERROR;
9000e00c:	2601      	movs	r6, #1
9000e00e:	e702      	b.n	9000de16 <HAL_RCCEx_PeriphCLKConfig+0x586>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
9000e010:	2100      	movs	r1, #0
9000e012:	f104 0008 	add.w	r0, r4, #8
9000e016:	f7ff fb47 	bl	9000d6a8 <RCCEx_PLL2_Config>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
9000e01a:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
9000e01c:	2800      	cmp	r0, #0
9000e01e:	f43f af47 	beq.w	9000deb0 <HAL_RCCEx_PeriphCLKConfig+0x620>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
9000e022:	0797      	lsls	r7, r2, #30
9000e024:	4606      	mov	r6, r0
9000e026:	f57f af46 	bpl.w	9000deb6 <HAL_RCCEx_PeriphCLKConfig+0x626>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
9000e02a:	2101      	movs	r1, #1
9000e02c:	f104 0008 	add.w	r0, r4, #8
9000e030:	f7ff fb3a 	bl	9000d6a8 <RCCEx_PLL2_Config>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
9000e034:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
9000e036:	2800      	cmp	r0, #0
9000e038:	f43f af3d 	beq.w	9000deb6 <HAL_RCCEx_PeriphCLKConfig+0x626>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
9000e03c:	0755      	lsls	r5, r2, #29
9000e03e:	4606      	mov	r6, r0
9000e040:	f57f af3c 	bpl.w	9000debc <HAL_RCCEx_PeriphCLKConfig+0x62c>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
9000e044:	2102      	movs	r1, #2
9000e046:	f104 0008 	add.w	r0, r4, #8
9000e04a:	f7ff fb2d 	bl	9000d6a8 <RCCEx_PLL2_Config>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
9000e04e:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
9000e050:	2800      	cmp	r0, #0
9000e052:	f43f af33 	beq.w	9000debc <HAL_RCCEx_PeriphCLKConfig+0x62c>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
9000e056:	4606      	mov	r6, r0
9000e058:	0710      	lsls	r0, r2, #28
9000e05a:	f57f af32 	bpl.w	9000dec2 <HAL_RCCEx_PeriphCLKConfig+0x632>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
9000e05e:	2100      	movs	r1, #0
9000e060:	f104 0028 	add.w	r0, r4, #40	; 0x28
9000e064:	f7ff fb9a 	bl	9000d79c <RCCEx_PLL3_Config>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
9000e068:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
9000e06a:	2800      	cmp	r0, #0
9000e06c:	f43f af29 	beq.w	9000dec2 <HAL_RCCEx_PeriphCLKConfig+0x632>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
9000e070:	06d1      	lsls	r1, r2, #27
9000e072:	4606      	mov	r6, r0
9000e074:	f57f af28 	bpl.w	9000dec8 <HAL_RCCEx_PeriphCLKConfig+0x638>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
9000e078:	f104 0528 	add.w	r5, r4, #40	; 0x28
9000e07c:	2101      	movs	r1, #1
9000e07e:	4628      	mov	r0, r5
9000e080:	f7ff fb8c 	bl	9000d79c <RCCEx_PLL3_Config>
    if (ret == HAL_OK)
9000e084:	2800      	cmp	r0, #0
9000e086:	f000 80c9 	beq.w	9000e21c <HAL_RCCEx_PeriphCLKConfig+0x98c>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
9000e08a:	6863      	ldr	r3, [r4, #4]
9000e08c:	069b      	lsls	r3, r3, #26
9000e08e:	d54c      	bpl.n	9000e12a <HAL_RCCEx_PeriphCLKConfig+0x89a>
9000e090:	4606      	mov	r6, r0
9000e092:	e043      	b.n	9000e11c <HAL_RCCEx_PeriphCLKConfig+0x88c>
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
9000e094:	4f6f      	ldr	r7, [pc, #444]	; (9000e254 <HAL_RCCEx_PeriphCLKConfig+0x9c4>)
9000e096:	683b      	ldr	r3, [r7, #0]
9000e098:	f443 7380 	orr.w	r3, r3, #256	; 0x100
9000e09c:	603b      	str	r3, [r7, #0]
    tickstart = HAL_GetTick();
9000e09e:	f7fb fc4f 	bl	90009940 <HAL_GetTick>
9000e0a2:	4680      	mov	r8, r0
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
9000e0a4:	e006      	b.n	9000e0b4 <HAL_RCCEx_PeriphCLKConfig+0x824>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
9000e0a6:	f7fb fc4b 	bl	90009940 <HAL_GetTick>
9000e0aa:	eba0 0008 	sub.w	r0, r0, r8
9000e0ae:	2864      	cmp	r0, #100	; 0x64
9000e0b0:	f200 81a0 	bhi.w	9000e3f4 <HAL_RCCEx_PeriphCLKConfig+0xb64>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
9000e0b4:	683b      	ldr	r3, [r7, #0]
9000e0b6:	05da      	lsls	r2, r3, #23
9000e0b8:	d5f5      	bpl.n	9000e0a6 <HAL_RCCEx_PeriphCLKConfig+0x816>
    if (ret == HAL_OK)
9000e0ba:	2d00      	cmp	r5, #0
9000e0bc:	f040 81d4 	bne.w	9000e468 <HAL_RCCEx_PeriphCLKConfig+0xbd8>
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
9000e0c0:	4a63      	ldr	r2, [pc, #396]	; (9000e250 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
9000e0c2:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
9000e0c6:	6f11      	ldr	r1, [r2, #112]	; 0x70
9000e0c8:	4059      	eors	r1, r3
9000e0ca:	f411 7f40 	tst.w	r1, #768	; 0x300
9000e0ce:	d00b      	beq.n	9000e0e8 <HAL_RCCEx_PeriphCLKConfig+0x858>
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
9000e0d0:	6f11      	ldr	r1, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_FORCE();
9000e0d2:	6f10      	ldr	r0, [r2, #112]	; 0x70
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
9000e0d4:	f421 7140 	bic.w	r1, r1, #768	; 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
9000e0d8:	f440 3080 	orr.w	r0, r0, #65536	; 0x10000
9000e0dc:	6710      	str	r0, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
9000e0de:	6f10      	ldr	r0, [r2, #112]	; 0x70
9000e0e0:	f420 3080 	bic.w	r0, r0, #65536	; 0x10000
9000e0e4:	6710      	str	r0, [r2, #112]	; 0x70
        RCC->BDCR = tmpreg;
9000e0e6:	6711      	str	r1, [r2, #112]	; 0x70
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
9000e0e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
9000e0ec:	f000 819e 	beq.w	9000e42c <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
9000e0f0:	f403 7240 	and.w	r2, r3, #768	; 0x300
9000e0f4:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
9000e0f8:	f000 81ac 	beq.w	9000e454 <HAL_RCCEx_PeriphCLKConfig+0xbc4>
9000e0fc:	4954      	ldr	r1, [pc, #336]	; (9000e250 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
9000e0fe:	690a      	ldr	r2, [r1, #16]
9000e100:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
9000e104:	610a      	str	r2, [r1, #16]
9000e106:	4852      	ldr	r0, [pc, #328]	; (9000e250 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
9000e108:	f3c3 010b 	ubfx	r1, r3, #0, #12
9000e10c:	6f07      	ldr	r7, [r0, #112]	; 0x70
9000e10e:	4339      	orrs	r1, r7
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
9000e110:	e9d4 3200 	ldrd	r3, r2, [r4]
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
9000e114:	6701      	str	r1, [r0, #112]	; 0x70
9000e116:	e553      	b.n	9000dbc0 <HAL_RCCEx_PeriphCLKConfig+0x330>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
9000e118:	f104 0528 	add.w	r5, r4, #40	; 0x28
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
9000e11c:	2102      	movs	r1, #2
9000e11e:	4628      	mov	r0, r5
9000e120:	f7ff fb3c 	bl	9000d79c <RCCEx_PLL3_Config>
    if (ret == HAL_OK)
9000e124:	2800      	cmp	r0, #0
9000e126:	f43f aed2 	beq.w	9000dece <HAL_RCCEx_PeriphCLKConfig+0x63e>
  return HAL_ERROR;
9000e12a:	2001      	movs	r0, #1
}
9000e12c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
9000e130:	462e      	mov	r6, r5
9000e132:	e450      	b.n	9000d9d6 <HAL_RCCEx_PeriphCLKConfig+0x146>
9000e134:	462e      	mov	r6, r5
9000e136:	e406      	b.n	9000d946 <HAL_RCCEx_PeriphCLKConfig+0xb6>
9000e138:	462e      	mov	r6, r5
9000e13a:	e489      	b.n	9000da50 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
9000e13c:	462e      	mov	r6, r5
9000e13e:	f7ff bbe2 	b.w	9000d906 <HAL_RCCEx_PeriphCLKConfig+0x76>
9000e142:	462e      	mov	r6, r5
9000e144:	e423      	b.n	9000d98e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
9000e146:	2102      	movs	r1, #2
9000e148:	f104 0008 	add.w	r0, r4, #8
9000e14c:	f7ff faac 	bl	9000d6a8 <RCCEx_PLL2_Config>
9000e150:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
9000e152:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000e156:	2d00      	cmp	r5, #0
9000e158:	d14c      	bne.n	9000e1f4 <HAL_RCCEx_PeriphCLKConfig+0x964>
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
9000e15a:	4f3d      	ldr	r7, [pc, #244]	; (9000e250 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
9000e15c:	6d20      	ldr	r0, [r4, #80]	; 0x50
9000e15e:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
9000e160:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
9000e164:	4301      	orrs	r1, r0
9000e166:	64f9      	str	r1, [r7, #76]	; 0x4c
9000e168:	e652      	b.n	9000de10 <HAL_RCCEx_PeriphCLKConfig+0x580>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
9000e16a:	4839      	ldr	r0, [pc, #228]	; (9000e250 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
9000e16c:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
9000e16e:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
9000e172:	62c1      	str	r1, [r0, #44]	; 0x2c
        break;
9000e174:	e462      	b.n	9000da3c <HAL_RCCEx_PeriphCLKConfig+0x1ac>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
9000e176:	4836      	ldr	r0, [pc, #216]	; (9000e250 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
9000e178:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
9000e17a:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
9000e17e:	62c1      	str	r1, [r0, #44]	; 0x2c
        break;
9000e180:	e41e      	b.n	9000d9c0 <HAL_RCCEx_PeriphCLKConfig+0x130>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
9000e182:	4833      	ldr	r0, [pc, #204]	; (9000e250 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
9000e184:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
9000e186:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
9000e18a:	62c1      	str	r1, [r0, #44]	; 0x2c
        break;
9000e18c:	f7ff bbd1 	b.w	9000d932 <HAL_RCCEx_PeriphCLKConfig+0xa2>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
9000e190:	482f      	ldr	r0, [pc, #188]	; (9000e250 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
9000e192:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
9000e194:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
9000e198:	62c1      	str	r1, [r0, #44]	; 0x2c
        break;
9000e19a:	f7ff bbed 	b.w	9000d978 <HAL_RCCEx_PeriphCLKConfig+0xe8>
9000e19e:	462e      	mov	r6, r5
9000e1a0:	e540      	b.n	9000dc24 <HAL_RCCEx_PeriphCLKConfig+0x394>
9000e1a2:	462e      	mov	r6, r5
9000e1a4:	e5a5      	b.n	9000dcf2 <HAL_RCCEx_PeriphCLKConfig+0x462>
9000e1a6:	462e      	mov	r6, r5
9000e1a8:	e4a2      	b.n	9000daf0 <HAL_RCCEx_PeriphCLKConfig+0x260>
9000e1aa:	462e      	mov	r6, r5
9000e1ac:	e57f      	b.n	9000dcae <HAL_RCCEx_PeriphCLKConfig+0x41e>
9000e1ae:	462e      	mov	r6, r5
9000e1b0:	e42c      	b.n	9000da0c <HAL_RCCEx_PeriphCLKConfig+0x17c>
9000e1b2:	462e      	mov	r6, r5
9000e1b4:	e501      	b.n	9000dbba <HAL_RCCEx_PeriphCLKConfig+0x32a>
9000e1b6:	462e      	mov	r6, r5
9000e1b8:	e46a      	b.n	9000da90 <HAL_RCCEx_PeriphCLKConfig+0x200>
9000e1ba:	462e      	mov	r6, r5
9000e1bc:	e5dd      	b.n	9000dd7a <HAL_RCCEx_PeriphCLKConfig+0x4ea>
9000e1be:	462e      	mov	r6, r5
9000e1c0:	e486      	b.n	9000dad0 <HAL_RCCEx_PeriphCLKConfig+0x240>
9000e1c2:	462e      	mov	r6, r5
9000e1c4:	e5b7      	b.n	9000dd36 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
9000e1c6:	462e      	mov	r6, r5
9000e1c8:	e54c      	b.n	9000dc64 <HAL_RCCEx_PeriphCLKConfig+0x3d4>
9000e1ca:	462e      	mov	r6, r5
9000e1cc:	e602      	b.n	9000ddd4 <HAL_RCCEx_PeriphCLKConfig+0x544>
9000e1ce:	462e      	mov	r6, r5
9000e1d0:	e612      	b.n	9000ddf8 <HAL_RCCEx_PeriphCLKConfig+0x568>
9000e1d2:	462e      	mov	r6, r5
9000e1d4:	e62e      	b.n	9000de34 <HAL_RCCEx_PeriphCLKConfig+0x5a4>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
9000e1d6:	4f1e      	ldr	r7, [pc, #120]	; (9000e250 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
9000e1d8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
9000e1da:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
9000e1de:	62f8      	str	r0, [r7, #44]	; 0x2c
    if (ret == HAL_OK)
9000e1e0:	2d00      	cmp	r5, #0
9000e1e2:	d1f6      	bne.n	9000e1d2 <HAL_RCCEx_PeriphCLKConfig+0x942>
9000e1e4:	e6a4      	b.n	9000df30 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
9000e1e6:	481a      	ldr	r0, [pc, #104]	; (9000e250 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
9000e1e8:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
9000e1ea:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
9000e1ee:	62c1      	str	r1, [r0, #44]	; 0x2c
    if (ret == HAL_OK)
9000e1f0:	2d00      	cmp	r5, #0
9000e1f2:	d0b2      	beq.n	9000e15a <HAL_RCCEx_PeriphCLKConfig+0x8ca>
9000e1f4:	462e      	mov	r6, r5
9000e1f6:	e60b      	b.n	9000de10 <HAL_RCCEx_PeriphCLKConfig+0x580>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
9000e1f8:	4815      	ldr	r0, [pc, #84]	; (9000e250 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
9000e1fa:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
9000e1fc:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
9000e200:	62c1      	str	r1, [r0, #44]	; 0x2c
    if (ret == HAL_OK)
9000e202:	2d00      	cmp	r5, #0
9000e204:	d1e3      	bne.n	9000e1ce <HAL_RCCEx_PeriphCLKConfig+0x93e>
9000e206:	e6c7      	b.n	9000df98 <HAL_RCCEx_PeriphCLKConfig+0x708>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
9000e208:	f104 0008 	add.w	r0, r4, #8
9000e20c:	f7ff fa4c 	bl	9000d6a8 <RCCEx_PLL2_Config>
9000e210:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
9000e212:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000e216:	2d00      	cmp	r5, #0
9000e218:	d1d7      	bne.n	9000e1ca <HAL_RCCEx_PeriphCLKConfig+0x93a>
9000e21a:	e6d1      	b.n	9000dfc0 <HAL_RCCEx_PeriphCLKConfig+0x730>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
9000e21c:	6862      	ldr	r2, [r4, #4]
9000e21e:	e653      	b.n	9000dec8 <HAL_RCCEx_PeriphCLKConfig+0x638>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
9000e220:	2102      	movs	r1, #2
9000e222:	f104 0008 	add.w	r0, r4, #8
9000e226:	f7ff fa3f 	bl	9000d6a8 <RCCEx_PLL2_Config>
9000e22a:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
9000e22c:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000e230:	2d00      	cmp	r5, #0
9000e232:	d1bc      	bne.n	9000e1ae <HAL_RCCEx_PeriphCLKConfig+0x91e>
9000e234:	f7ff bbe3 	b.w	9000d9fe <HAL_RCCEx_PeriphCLKConfig+0x16e>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
9000e238:	2102      	movs	r1, #2
9000e23a:	f104 0028 	add.w	r0, r4, #40	; 0x28
9000e23e:	f7ff faad 	bl	9000d79c <RCCEx_PLL3_Config>
9000e242:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
9000e244:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000e248:	2d00      	cmp	r5, #0
9000e24a:	d1ba      	bne.n	9000e1c2 <HAL_RCCEx_PeriphCLKConfig+0x932>
9000e24c:	e56b      	b.n	9000dd26 <HAL_RCCEx_PeriphCLKConfig+0x496>
9000e24e:	bf00      	nop
9000e250:	58024400 	.word	0x58024400
9000e254:	58024800 	.word	0x58024800
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
9000e258:	2102      	movs	r1, #2
9000e25a:	f104 0028 	add.w	r0, r4, #40	; 0x28
9000e25e:	f7ff fa9d 	bl	9000d79c <RCCEx_PLL3_Config>
9000e262:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
9000e264:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000e268:	2d00      	cmp	r5, #0
9000e26a:	d1a6      	bne.n	9000e1ba <HAL_RCCEx_PeriphCLKConfig+0x92a>
9000e26c:	e57d      	b.n	9000dd6a <HAL_RCCEx_PeriphCLKConfig+0x4da>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
9000e26e:	4886      	ldr	r0, [pc, #536]	; (9000e488 <HAL_RCCEx_PeriphCLKConfig+0xbf8>)
9000e270:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
9000e272:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
9000e276:	62c1      	str	r1, [r0, #44]	; 0x2c
    if (ret == HAL_OK)
9000e278:	2d00      	cmp	r5, #0
9000e27a:	d194      	bne.n	9000e1a6 <HAL_RCCEx_PeriphCLKConfig+0x916>
9000e27c:	e679      	b.n	9000df72 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
9000e27e:	2101      	movs	r1, #1
9000e280:	f104 0028 	add.w	r0, r4, #40	; 0x28
9000e284:	f7ff fa8a 	bl	9000d79c <RCCEx_PLL3_Config>
9000e288:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
9000e28a:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000e28e:	2d00      	cmp	r5, #0
9000e290:	d191      	bne.n	9000e1b6 <HAL_RCCEx_PeriphCLKConfig+0x926>
9000e292:	f7ff bbf6 	b.w	9000da82 <HAL_RCCEx_PeriphCLKConfig+0x1f2>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
9000e296:	2101      	movs	r1, #1
9000e298:	f104 0028 	add.w	r0, r4, #40	; 0x28
9000e29c:	f7ff fa7e 	bl	9000d79c <RCCEx_PLL3_Config>
9000e2a0:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
9000e2a2:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000e2a6:	2d00      	cmp	r5, #0
9000e2a8:	d189      	bne.n	9000e1be <HAL_RCCEx_PeriphCLKConfig+0x92e>
9000e2aa:	e409      	b.n	9000dac0 <HAL_RCCEx_PeriphCLKConfig+0x230>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
9000e2ac:	2102      	movs	r1, #2
9000e2ae:	f104 0028 	add.w	r0, r4, #40	; 0x28
9000e2b2:	f7ff fa73 	bl	9000d79c <RCCEx_PLL3_Config>
9000e2b6:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
9000e2b8:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000e2bc:	2d00      	cmp	r5, #0
9000e2be:	f47f af70 	bne.w	9000e1a2 <HAL_RCCEx_PeriphCLKConfig+0x912>
9000e2c2:	e50e      	b.n	9000dce2 <HAL_RCCEx_PeriphCLKConfig+0x452>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
9000e2c4:	2102      	movs	r1, #2
9000e2c6:	f104 0008 	add.w	r0, r4, #8
9000e2ca:	f7ff f9ed 	bl	9000d6a8 <RCCEx_PLL2_Config>
9000e2ce:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
9000e2d0:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000e2d4:	2d00      	cmp	r5, #0
9000e2d6:	f47f af6c 	bne.w	9000e1b2 <HAL_RCCEx_PeriphCLKConfig+0x922>
9000e2da:	e467      	b.n	9000dbac <HAL_RCCEx_PeriphCLKConfig+0x31c>
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
9000e2dc:	2102      	movs	r1, #2
9000e2de:	f104 0028 	add.w	r0, r4, #40	; 0x28
9000e2e2:	f7ff fa5b 	bl	9000d79c <RCCEx_PLL3_Config>
9000e2e6:	2800      	cmp	r0, #0
9000e2e8:	f040 8094 	bne.w	9000e414 <HAL_RCCEx_PeriphCLKConfig+0xb84>
    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
9000e2ec:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
9000e2f0:	e9d4 3200 	ldrd	r3, r2, [r4]
9000e2f4:	e549      	b.n	9000dd8a <HAL_RCCEx_PeriphCLKConfig+0x4fa>
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
9000e2f6:	2102      	movs	r1, #2
9000e2f8:	f104 0028 	add.w	r0, r4, #40	; 0x28
9000e2fc:	f7ff fa4e 	bl	9000d79c <RCCEx_PLL3_Config>
9000e300:	2800      	cmp	r0, #0
9000e302:	f040 808d 	bne.w	9000e420 <HAL_RCCEx_PeriphCLKConfig+0xb90>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
9000e306:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
9000e30a:	e9d4 3200 	ldrd	r3, r2, [r4]
9000e30e:	e54a      	b.n	9000dda6 <HAL_RCCEx_PeriphCLKConfig+0x516>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
9000e310:	e9d4 3200 	ldrd	r3, r2, [r4]
9000e314:	f7ff bae9 	b.w	9000d8ea <HAL_RCCEx_PeriphCLKConfig+0x5a>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
9000e318:	2100      	movs	r1, #0
9000e31a:	f104 0028 	add.w	r0, r4, #40	; 0x28
9000e31e:	f7ff fa3d 	bl	9000d79c <RCCEx_PLL3_Config>
9000e322:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
9000e324:	e9d4 3200 	ldrd	r3, r2, [r4]
        break;
9000e328:	f7ff bb4a 	b.w	9000d9c0 <HAL_RCCEx_PeriphCLKConfig+0x130>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
9000e32c:	2100      	movs	r1, #0
9000e32e:	f104 0028 	add.w	r0, r4, #40	; 0x28
9000e332:	f7ff fa33 	bl	9000d79c <RCCEx_PLL3_Config>
9000e336:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
9000e338:	e9d4 3200 	ldrd	r3, r2, [r4]
        break;
9000e33c:	e600      	b.n	9000df40 <HAL_RCCEx_PeriphCLKConfig+0x6b0>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
9000e33e:	2100      	movs	r1, #0
9000e340:	f104 0028 	add.w	r0, r4, #40	; 0x28
9000e344:	f7ff fa2a 	bl	9000d79c <RCCEx_PLL3_Config>
9000e348:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
9000e34a:	e9d4 3200 	ldrd	r3, r2, [r4]
        break;
9000e34e:	f7ff baf0 	b.w	9000d932 <HAL_RCCEx_PeriphCLKConfig+0xa2>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
9000e352:	2102      	movs	r1, #2
9000e354:	3028      	adds	r0, #40	; 0x28
9000e356:	f7ff fa21 	bl	9000d79c <RCCEx_PLL3_Config>
9000e35a:	4606      	mov	r6, r0
    if (ret == HAL_OK)
9000e35c:	2e00      	cmp	r6, #0
9000e35e:	f43f aab5 	beq.w	9000d8cc <HAL_RCCEx_PeriphCLKConfig+0x3c>
9000e362:	e7d5      	b.n	9000e310 <HAL_RCCEx_PeriphCLKConfig+0xa80>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
9000e364:	4848      	ldr	r0, [pc, #288]	; (9000e488 <HAL_RCCEx_PeriphCLKConfig+0xbf8>)
        break;
9000e366:	4635      	mov	r5, r6
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
9000e368:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
9000e36a:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
9000e36e:	62c1      	str	r1, [r0, #44]	; 0x2c
        break;
9000e370:	e5e6      	b.n	9000df40 <HAL_RCCEx_PeriphCLKConfig+0x6b0>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
9000e372:	2100      	movs	r1, #0
9000e374:	f104 0008 	add.w	r0, r4, #8
9000e378:	f7ff f996 	bl	9000d6a8 <RCCEx_PLL2_Config>
9000e37c:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
9000e37e:	e9d4 3200 	ldrd	r3, r2, [r4]
        break;
9000e382:	e5dd      	b.n	9000df40 <HAL_RCCEx_PeriphCLKConfig+0x6b0>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
9000e384:	2100      	movs	r1, #0
9000e386:	f104 0028 	add.w	r0, r4, #40	; 0x28
9000e38a:	f7ff fa07 	bl	9000d79c <RCCEx_PLL3_Config>
9000e38e:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
9000e390:	e9d4 3200 	ldrd	r3, r2, [r4]
        break;
9000e394:	f7ff bb52 	b.w	9000da3c <HAL_RCCEx_PeriphCLKConfig+0x1ac>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
9000e398:	2100      	movs	r1, #0
9000e39a:	f104 0028 	add.w	r0, r4, #40	; 0x28
9000e39e:	f7ff f9fd 	bl	9000d79c <RCCEx_PLL3_Config>
9000e3a2:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
9000e3a4:	e9d4 3200 	ldrd	r3, r2, [r4]
        break;
9000e3a8:	f7ff bae6 	b.w	9000d978 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
9000e3ac:	2101      	movs	r1, #1
9000e3ae:	f104 0028 	add.w	r0, r4, #40	; 0x28
9000e3b2:	f7ff f9f3 	bl	9000d79c <RCCEx_PLL3_Config>
9000e3b6:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
9000e3b8:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000e3bc:	2d00      	cmp	r5, #0
9000e3be:	f47f aef4 	bne.w	9000e1aa <HAL_RCCEx_PeriphCLKConfig+0x91a>
9000e3c2:	e46c      	b.n	9000dc9e <HAL_RCCEx_PeriphCLKConfig+0x40e>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
9000e3c4:	2101      	movs	r1, #1
9000e3c6:	f104 0028 	add.w	r0, r4, #40	; 0x28
9000e3ca:	f7ff f9e7 	bl	9000d79c <RCCEx_PLL3_Config>
9000e3ce:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
9000e3d0:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000e3d4:	2d00      	cmp	r5, #0
9000e3d6:	f47f aef6 	bne.w	9000e1c6 <HAL_RCCEx_PeriphCLKConfig+0x936>
9000e3da:	e43c      	b.n	9000dc56 <HAL_RCCEx_PeriphCLKConfig+0x3c6>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
9000e3dc:	2101      	movs	r1, #1
9000e3de:	f104 0028 	add.w	r0, r4, #40	; 0x28
9000e3e2:	f7ff f9db 	bl	9000d79c <RCCEx_PLL3_Config>
9000e3e6:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
9000e3e8:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000e3ec:	2d00      	cmp	r5, #0
9000e3ee:	f47f aed6 	bne.w	9000e19e <HAL_RCCEx_PeriphCLKConfig+0x90e>
9000e3f2:	e5f9      	b.n	9000dfe8 <HAL_RCCEx_PeriphCLKConfig+0x758>
        status = ret;
9000e3f4:	2603      	movs	r6, #3
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
9000e3f6:	e9d4 3200 	ldrd	r3, r2, [r4]
9000e3fa:	4635      	mov	r5, r6
9000e3fc:	f7ff bbe0 	b.w	9000dbc0 <HAL_RCCEx_PeriphCLKConfig+0x330>
    switch (PeriphClkInit->SpdifrxClockSelection)
9000e400:	2601      	movs	r6, #1
9000e402:	f7ff ba72 	b.w	9000d8ea <HAL_RCCEx_PeriphCLKConfig+0x5a>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
9000e406:	4d20      	ldr	r5, [pc, #128]	; (9000e488 <HAL_RCCEx_PeriphCLKConfig+0xbf8>)
9000e408:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
9000e40a:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
9000e40e:	62e8      	str	r0, [r5, #44]	; 0x2c
    if (ret == HAL_OK)
9000e410:	f7ff ba64 	b.w	9000d8dc <HAL_RCCEx_PeriphCLKConfig+0x4c>
    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
9000e414:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
        status = HAL_ERROR;
9000e418:	2601      	movs	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
9000e41a:	e9d4 3200 	ldrd	r3, r2, [r4]
9000e41e:	e4b4      	b.n	9000dd8a <HAL_RCCEx_PeriphCLKConfig+0x4fa>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
9000e420:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
        status = HAL_ERROR;
9000e424:	2601      	movs	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
9000e426:	e9d4 3200 	ldrd	r3, r2, [r4]
9000e42a:	e4bc      	b.n	9000dda6 <HAL_RCCEx_PeriphCLKConfig+0x516>
        tickstart = HAL_GetTick();
9000e42c:	f7fb fa88 	bl	90009940 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
9000e430:	f8df 8054 	ldr.w	r8, [pc, #84]	; 9000e488 <HAL_RCCEx_PeriphCLKConfig+0xbf8>
        tickstart = HAL_GetTick();
9000e434:	4607      	mov	r7, r0
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
9000e436:	f241 3988 	movw	r9, #5000	; 0x1388
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
9000e43a:	e004      	b.n	9000e446 <HAL_RCCEx_PeriphCLKConfig+0xbb6>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
9000e43c:	f7fb fa80 	bl	90009940 <HAL_GetTick>
9000e440:	1bc0      	subs	r0, r0, r7
9000e442:	4548      	cmp	r0, r9
9000e444:	d8d6      	bhi.n	9000e3f4 <HAL_RCCEx_PeriphCLKConfig+0xb64>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
9000e446:	f8d8 3070 	ldr.w	r3, [r8, #112]	; 0x70
9000e44a:	079b      	lsls	r3, r3, #30
9000e44c:	d5f6      	bpl.n	9000e43c <HAL_RCCEx_PeriphCLKConfig+0xbac>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
9000e44e:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
9000e452:	e64d      	b.n	9000e0f0 <HAL_RCCEx_PeriphCLKConfig+0x860>
9000e454:	480c      	ldr	r0, [pc, #48]	; (9000e488 <HAL_RCCEx_PeriphCLKConfig+0xbf8>)
9000e456:	4a0d      	ldr	r2, [pc, #52]	; (9000e48c <HAL_RCCEx_PeriphCLKConfig+0xbfc>)
9000e458:	6901      	ldr	r1, [r0, #16]
9000e45a:	ea02 1213 	and.w	r2, r2, r3, lsr #4
9000e45e:	f421 517c 	bic.w	r1, r1, #16128	; 0x3f00
9000e462:	430a      	orrs	r2, r1
9000e464:	6102      	str	r2, [r0, #16]
9000e466:	e64e      	b.n	9000e106 <HAL_RCCEx_PeriphCLKConfig+0x876>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
9000e468:	e9d4 3200 	ldrd	r3, r2, [r4]
9000e46c:	462e      	mov	r6, r5
9000e46e:	f7ff bba7 	b.w	9000dbc0 <HAL_RCCEx_PeriphCLKConfig+0x330>
    switch (PeriphClkInit->Usart234578ClockSelection)
9000e472:	2601      	movs	r6, #1
9000e474:	4635      	mov	r5, r6
9000e476:	f7ff bbf5 	b.w	9000dc64 <HAL_RCCEx_PeriphCLKConfig+0x3d4>
    switch (PeriphClkInit->FmcClockSelection)
9000e47a:	2601      	movs	r6, #1
9000e47c:	4635      	mov	r5, r6
9000e47e:	f7ff bb9c 	b.w	9000dbba <HAL_RCCEx_PeriphCLKConfig+0x32a>
    switch (PeriphClkInit->Lpuart1ClockSelection)
9000e482:	2601      	movs	r6, #1
9000e484:	4635      	mov	r5, r6
9000e486:	e412      	b.n	9000dcae <HAL_RCCEx_PeriphCLKConfig+0x41e>
9000e488:	58024400 	.word	0x58024400
9000e48c:	00ffffcf 	.word	0x00ffffcf

9000e490 <HAL_SDRAM_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
9000e490:	b318      	cbz	r0, 9000e4da <HAL_SDRAM_Init+0x4a>
{
9000e492:	b538      	push	{r3, r4, r5, lr}
  {
    return HAL_ERROR;
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
9000e494:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
9000e498:	4604      	mov	r4, r0
9000e49a:	460d      	mov	r5, r1
9000e49c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
9000e4a0:	b1b3      	cbz	r3, 9000e4d0 <HAL_SDRAM_Init+0x40>

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
9000e4a2:	4621      	mov	r1, r4
  hsdram->State = HAL_SDRAM_STATE_BUSY;
9000e4a4:	2302      	movs	r3, #2
9000e4a6:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
9000e4aa:	f851 0b04 	ldr.w	r0, [r1], #4
9000e4ae:	f000 fa39 	bl	9000e924 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
9000e4b2:	6862      	ldr	r2, [r4, #4]
9000e4b4:	4629      	mov	r1, r5
9000e4b6:	6820      	ldr	r0, [r4, #0]
9000e4b8:	f000 fa72 	bl	9000e9a0 <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
9000e4bc:	4a08      	ldr	r2, [pc, #32]	; (9000e4e0 <HAL_SDRAM_Init+0x50>)
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
9000e4be:	2101      	movs	r1, #1

  return HAL_OK;
9000e4c0:	2000      	movs	r0, #0
  __FMC_ENABLE();
9000e4c2:	6813      	ldr	r3, [r2, #0]
9000e4c4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
9000e4c8:	6013      	str	r3, [r2, #0]
  hsdram->State = HAL_SDRAM_STATE_READY;
9000e4ca:	f884 102c 	strb.w	r1, [r4, #44]	; 0x2c
}
9000e4ce:	bd38      	pop	{r3, r4, r5, pc}
    hsdram->Lock = HAL_UNLOCKED;
9000e4d0:	f880 202d 	strb.w	r2, [r0, #45]	; 0x2d
    HAL_SDRAM_MspInit(hsdram);
9000e4d4:	f7f6 fb40 	bl	90004b58 <HAL_SDRAM_MspInit>
9000e4d8:	e7e3      	b.n	9000e4a2 <HAL_SDRAM_Init+0x12>
    return HAL_ERROR;
9000e4da:	2001      	movs	r0, #1
}
9000e4dc:	4770      	bx	lr
9000e4de:	bf00      	nop
9000e4e0:	52004000 	.word	0x52004000

9000e4e4 <HAL_SDRAM_DeInit>:
  * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
  *                the configuration information for SDRAM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_DeInit(SDRAM_HandleTypeDef *hsdram)
{
9000e4e4:	b510      	push	{r4, lr}
9000e4e6:	4604      	mov	r4, r0

  /* DeInit the low level hardware */
  hsdram->MspDeInitCallback(hsdram);
#else
  /* Initialize the low level hardware (MSP) */
  HAL_SDRAM_MspDeInit(hsdram);
9000e4e8:	f7f6 fbb2 	bl	90004c50 <HAL_SDRAM_MspDeInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */

  /* Configure the SDRAM registers with their reset values */
  (void)FMC_SDRAM_DeInit(hsdram->Instance, hsdram->Init.SDBank);
9000e4ec:	e9d4 0100 	ldrd	r0, r1, [r4]
9000e4f0:	f000 faa4 	bl	9000ea3c <FMC_SDRAM_DeInit>

  /* Reset the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_RESET;
9000e4f4:	2000      	movs	r0, #0
9000e4f6:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c

  /* Release Lock */
  __HAL_UNLOCK(hsdram);
9000e4fa:	f884 002d 	strb.w	r0, [r4, #45]	; 0x2d

  return HAL_OK;
}
9000e4fe:	bd10      	pop	{r4, pc}

9000e500 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
9000e500:	b570      	push	{r4, r5, r6, lr}
  HAL_SDRAM_StateTypeDef state = hsdram->State;
9000e502:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
{
9000e506:	4604      	mov	r4, r0

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
9000e508:	2b02      	cmp	r3, #2
  HAL_SDRAM_StateTypeDef state = hsdram->State;
9000e50a:	b2d8      	uxtb	r0, r3
  if (state == HAL_SDRAM_STATE_BUSY)
9000e50c:	d004      	beq.n	9000e518 <HAL_SDRAM_SendCommand+0x18>
  {
    return HAL_BUSY;
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
9000e50e:	f000 06fb 	and.w	r6, r0, #251	; 0xfb
9000e512:	2e01      	cmp	r6, #1
9000e514:	d001      	beq.n	9000e51a <HAL_SDRAM_SendCommand+0x1a>
      hsdram->State = HAL_SDRAM_STATE_READY;
    }
  }
  else
  {
    return HAL_ERROR;
9000e516:	2001      	movs	r0, #1
  }

  return HAL_OK;
}
9000e518:	bd70      	pop	{r4, r5, r6, pc}
    hsdram->State = HAL_SDRAM_STATE_BUSY;
9000e51a:	2302      	movs	r3, #2
9000e51c:	460d      	mov	r5, r1
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
9000e51e:	6820      	ldr	r0, [r4, #0]
    hsdram->State = HAL_SDRAM_STATE_BUSY;
9000e520:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
9000e524:	f000 fa9e 	bl	9000ea64 <FMC_SDRAM_SendCommand>
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
9000e528:	682b      	ldr	r3, [r5, #0]
9000e52a:	2b02      	cmp	r3, #2
9000e52c:	d003      	beq.n	9000e536 <HAL_SDRAM_SendCommand+0x36>
  return HAL_OK;
9000e52e:	2000      	movs	r0, #0
      hsdram->State = HAL_SDRAM_STATE_READY;
9000e530:	f884 602c 	strb.w	r6, [r4, #44]	; 0x2c
}
9000e534:	bd70      	pop	{r4, r5, r6, pc}
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
9000e536:	2305      	movs	r3, #5
  return HAL_OK;
9000e538:	2000      	movs	r0, #0
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
9000e53a:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
}
9000e53e:	bd70      	pop	{r4, r5, r6, pc}

9000e540 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
9000e540:	b538      	push	{r3, r4, r5, lr}
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
9000e542:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
{
9000e546:	4604      	mov	r4, r0
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
9000e548:	2b02      	cmp	r3, #2
9000e54a:	b2d8      	uxtb	r0, r3
9000e54c:	d005      	beq.n	9000e55a <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
9000e54e:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
9000e552:	2b01      	cmp	r3, #1
9000e554:	b2dd      	uxtb	r5, r3
9000e556:	d001      	beq.n	9000e55c <HAL_SDRAM_ProgramRefreshRate+0x1c>
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
  }
  else
  {
    return HAL_ERROR;
9000e558:	2001      	movs	r0, #1
  }

  return HAL_OK;
}
9000e55a:	bd38      	pop	{r3, r4, r5, pc}
    hsdram->State = HAL_SDRAM_STATE_BUSY;
9000e55c:	2302      	movs	r3, #2
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
9000e55e:	6820      	ldr	r0, [r4, #0]
    hsdram->State = HAL_SDRAM_STATE_BUSY;
9000e560:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
9000e564:	f000 fa96 	bl	9000ea94 <FMC_SDRAM_ProgramRefreshRate>
  return HAL_OK;
9000e568:	2000      	movs	r0, #0
    hsdram->State = HAL_SDRAM_STATE_READY;
9000e56a:	f884 502c 	strb.w	r5, [r4, #44]	; 0x2c
}
9000e56e:	bd38      	pop	{r3, r4, r5, pc}

9000e570 <HAL_TIM_Base_MspInit>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
9000e570:	4770      	bx	lr
9000e572:	bf00      	nop

9000e574 <HAL_TIM_Base_Init>:
  if (htim == NULL)
9000e574:	2800      	cmp	r0, #0
9000e576:	f000 80a5 	beq.w	9000e6c4 <HAL_TIM_Base_Init+0x150>
{
9000e57a:	b538      	push	{r3, r4, r5, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
9000e57c:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
9000e580:	4604      	mov	r4, r0
9000e582:	f003 02ff 	and.w	r2, r3, #255	; 0xff
9000e586:	2b00      	cmp	r3, #0
9000e588:	d076      	beq.n	9000e678 <HAL_TIM_Base_Init+0x104>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
9000e58a:	6822      	ldr	r2, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
9000e58c:	2302      	movs	r3, #2
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
9000e58e:	494e      	ldr	r1, [pc, #312]	; (9000e6c8 <HAL_TIM_Base_Init+0x154>)
9000e590:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
  htim->State = HAL_TIM_STATE_BUSY;
9000e594:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
9000e598:	eba2 0101 	sub.w	r1, r2, r1
  tmpcr1 = TIMx->CR1;
9000e59c:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
9000e59e:	fab1 f181 	clz	r1, r1
9000e5a2:	ea4f 1151 	mov.w	r1, r1, lsr #5
9000e5a6:	d027      	beq.n	9000e5f8 <HAL_TIM_Base_Init+0x84>
9000e5a8:	bb31      	cbnz	r1, 9000e5f8 <HAL_TIM_Base_Init+0x84>
9000e5aa:	4848      	ldr	r0, [pc, #288]	; (9000e6cc <HAL_TIM_Base_Init+0x158>)
9000e5ac:	4d48      	ldr	r5, [pc, #288]	; (9000e6d0 <HAL_TIM_Base_Init+0x15c>)
9000e5ae:	4282      	cmp	r2, r0
9000e5b0:	d067      	beq.n	9000e682 <HAL_TIM_Base_Init+0x10e>
9000e5b2:	f500 6080 	add.w	r0, r0, #1024	; 0x400
9000e5b6:	4282      	cmp	r2, r0
9000e5b8:	d063      	beq.n	9000e682 <HAL_TIM_Base_Init+0x10e>
9000e5ba:	1b55      	subs	r5, r2, r5
9000e5bc:	f500 6080 	add.w	r0, r0, #1024	; 0x400
9000e5c0:	fab5 f585 	clz	r5, r5
9000e5c4:	4282      	cmp	r2, r0
9000e5c6:	ea4f 1555 	mov.w	r5, r5, lsr #5
9000e5ca:	d063      	beq.n	9000e694 <HAL_TIM_Base_Init+0x120>
9000e5cc:	2d00      	cmp	r5, #0
9000e5ce:	d161      	bne.n	9000e694 <HAL_TIM_Base_Init+0x120>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
9000e5d0:	4840      	ldr	r0, [pc, #256]	; (9000e6d4 <HAL_TIM_Base_Init+0x160>)
9000e5d2:	4941      	ldr	r1, [pc, #260]	; (9000e6d8 <HAL_TIM_Base_Init+0x164>)
9000e5d4:	428a      	cmp	r2, r1
9000e5d6:	bf18      	it	ne
9000e5d8:	4282      	cmpne	r2, r0
9000e5da:	d065      	beq.n	9000e6a8 <HAL_TIM_Base_Init+0x134>
9000e5dc:	f501 6180 	add.w	r1, r1, #1024	; 0x400
9000e5e0:	428a      	cmp	r2, r1
9000e5e2:	d061      	beq.n	9000e6a8 <HAL_TIM_Base_Init+0x134>
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
9000e5e4:	69a0      	ldr	r0, [r4, #24]
9000e5e6:	f023 0380 	bic.w	r3, r3, #128	; 0x80

  TIMx->CR1 = tmpcr1;

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
9000e5ea:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
9000e5ec:	4303      	orrs	r3, r0
  TIMx->CR1 = tmpcr1;
9000e5ee:	6013      	str	r3, [r2, #0]

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
9000e5f0:	6863      	ldr	r3, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
9000e5f2:	62d1      	str	r1, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
9000e5f4:	6293      	str	r3, [r2, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
9000e5f6:	e023      	b.n	9000e640 <HAL_TIM_Base_Init+0xcc>
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
9000e5f8:	4d35      	ldr	r5, [pc, #212]	; (9000e6d0 <HAL_TIM_Base_Init+0x15c>)
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
9000e5fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
9000e5fe:	68a0      	ldr	r0, [r4, #8]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
9000e600:	1b55      	subs	r5, r2, r5
    tmpcr1 |= Structure->CounterMode;
9000e602:	4303      	orrs	r3, r0
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
9000e604:	fab5 f585 	clz	r5, r5
9000e608:	096d      	lsrs	r5, r5, #5
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
9000e60a:	6920      	ldr	r0, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
9000e60c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
9000e610:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
9000e612:	69a0      	ldr	r0, [r4, #24]
9000e614:	f023 0380 	bic.w	r3, r3, #128	; 0x80
9000e618:	4303      	orrs	r3, r0
  TIMx->CR1 = tmpcr1;
9000e61a:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
9000e61c:	68e3      	ldr	r3, [r4, #12]
9000e61e:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
9000e620:	6863      	ldr	r3, [r4, #4]
9000e622:	6293      	str	r3, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
9000e624:	b951      	cbnz	r1, 9000e63c <HAL_TIM_Base_Init+0xc8>
9000e626:	b94d      	cbnz	r5, 9000e63c <HAL_TIM_Base_Init+0xc8>
9000e628:	492a      	ldr	r1, [pc, #168]	; (9000e6d4 <HAL_TIM_Base_Init+0x160>)
9000e62a:	4b2b      	ldr	r3, [pc, #172]	; (9000e6d8 <HAL_TIM_Base_Init+0x164>)
9000e62c:	429a      	cmp	r2, r3
9000e62e:	bf18      	it	ne
9000e630:	428a      	cmpne	r2, r1
9000e632:	d003      	beq.n	9000e63c <HAL_TIM_Base_Init+0xc8>
9000e634:	f503 6380 	add.w	r3, r3, #1024	; 0x400
9000e638:	429a      	cmp	r2, r3
9000e63a:	d101      	bne.n	9000e640 <HAL_TIM_Base_Init+0xcc>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
9000e63c:	6963      	ldr	r3, [r4, #20]
9000e63e:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
9000e640:	2301      	movs	r3, #1
  return HAL_OK;
9000e642:	2000      	movs	r0, #0
  TIMx->EGR = TIM_EGR_UG;
9000e644:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
9000e646:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
9000e64a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
9000e64e:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
9000e652:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
9000e656:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
9000e65a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
9000e65e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
9000e662:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
9000e666:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
9000e66a:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
9000e66e:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
9000e672:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
9000e676:	bd38      	pop	{r3, r4, r5, pc}
    htim->Lock = HAL_UNLOCKED;
9000e678:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
9000e67c:	f7ff ff78 	bl	9000e570 <HAL_TIM_Base_MspInit>
9000e680:	e783      	b.n	9000e58a <HAL_TIM_Base_Init+0x16>
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
9000e682:	1b55      	subs	r5, r2, r5
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
9000e684:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
9000e688:	68a0      	ldr	r0, [r4, #8]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
9000e68a:	fab5 f585 	clz	r5, r5
    tmpcr1 |= Structure->CounterMode;
9000e68e:	4303      	orrs	r3, r0
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
9000e690:	096d      	lsrs	r5, r5, #5
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
9000e692:	e7ba      	b.n	9000e60a <HAL_TIM_Base_Init+0x96>
    tmpcr1 |= Structure->CounterMode;
9000e694:	68a0      	ldr	r0, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
9000e696:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
9000e69a:	4303      	orrs	r3, r0
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
9000e69c:	480f      	ldr	r0, [pc, #60]	; (9000e6dc <HAL_TIM_Base_Init+0x168>)
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
9000e69e:	4282      	cmp	r2, r0
9000e6a0:	d0b3      	beq.n	9000e60a <HAL_TIM_Base_Init+0x96>
9000e6a2:	2d00      	cmp	r5, #0
9000e6a4:	d1b1      	bne.n	9000e60a <HAL_TIM_Base_Init+0x96>
9000e6a6:	e793      	b.n	9000e5d0 <HAL_TIM_Base_Init+0x5c>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
9000e6a8:	6920      	ldr	r0, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
9000e6aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
9000e6ae:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
9000e6b0:	4303      	orrs	r3, r0
  TIMx->ARR = (uint32_t)Structure->Period ;
9000e6b2:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
9000e6b4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
9000e6b8:	430b      	orrs	r3, r1
  TIMx->PSC = Structure->Prescaler;
9000e6ba:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
9000e6bc:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
9000e6be:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
9000e6c0:	6291      	str	r1, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
9000e6c2:	e7b1      	b.n	9000e628 <HAL_TIM_Base_Init+0xb4>
    return HAL_ERROR;
9000e6c4:	2001      	movs	r0, #1
}
9000e6c6:	4770      	bx	lr
9000e6c8:	40010000 	.word	0x40010000
9000e6cc:	40000400 	.word	0x40000400
9000e6d0:	40010400 	.word	0x40010400
9000e6d4:	40014000 	.word	0x40014000
9000e6d8:	40014400 	.word	0x40014400
9000e6dc:	40000c00 	.word	0x40000c00

9000e6e0 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
9000e6e0:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
9000e6e4:	2b01      	cmp	r3, #1
9000e6e6:	d141      	bne.n	9000e76c <HAL_TIM_Base_Start_IT+0x8c>
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
9000e6e8:	6802      	ldr	r2, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
9000e6ea:	2102      	movs	r1, #2
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
9000e6ec:	4b24      	ldr	r3, [pc, #144]	; (9000e780 <HAL_TIM_Base_Start_IT+0xa0>)
9000e6ee:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
9000e6f2:	bf18      	it	ne
9000e6f4:	429a      	cmpne	r2, r3
{
9000e6f6:	b430      	push	{r4, r5}
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
9000e6f8:	bf0c      	ite	eq
9000e6fa:	2301      	moveq	r3, #1
9000e6fc:	2300      	movne	r3, #0
9000e6fe:	4d21      	ldr	r5, [pc, #132]	; (9000e784 <HAL_TIM_Base_Start_IT+0xa4>)
9000e700:	4c21      	ldr	r4, [pc, #132]	; (9000e788 <HAL_TIM_Base_Start_IT+0xa8>)
9000e702:	42aa      	cmp	r2, r5
9000e704:	bf08      	it	eq
9000e706:	f043 0301 	orreq.w	r3, r3, #1
  htim->State = HAL_TIM_STATE_BUSY;
9000e70a:	f880 103d 	strb.w	r1, [r0, #61]	; 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
9000e70e:	68d1      	ldr	r1, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
9000e710:	42a2      	cmp	r2, r4
9000e712:	bf08      	it	eq
9000e714:	f043 0301 	orreq.w	r3, r3, #1
9000e718:	f504 6480 	add.w	r4, r4, #1024	; 0x400
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
9000e71c:	f041 0101 	orr.w	r1, r1, #1
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
9000e720:	481a      	ldr	r0, [pc, #104]	; (9000e78c <HAL_TIM_Base_Start_IT+0xac>)
9000e722:	42a2      	cmp	r2, r4
9000e724:	bf08      	it	eq
9000e726:	f043 0301 	orreq.w	r3, r3, #1
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
9000e72a:	60d1      	str	r1, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
9000e72c:	4282      	cmp	r2, r0
9000e72e:	bf08      	it	eq
9000e730:	f043 0301 	orreq.w	r3, r3, #1
9000e734:	4916      	ldr	r1, [pc, #88]	; (9000e790 <HAL_TIM_Base_Start_IT+0xb0>)
9000e736:	428a      	cmp	r2, r1
9000e738:	bf08      	it	eq
9000e73a:	f043 0301 	orreq.w	r3, r3, #1
9000e73e:	b933      	cbnz	r3, 9000e74e <HAL_TIM_Base_Start_IT+0x6e>
9000e740:	f500 5070 	add.w	r0, r0, #15360	; 0x3c00
9000e744:	1a10      	subs	r0, r2, r0
9000e746:	fab0 f080 	clz	r0, r0
9000e74a:	0940      	lsrs	r0, r0, #5
9000e74c:	b198      	cbz	r0, 9000e776 <HAL_TIM_Base_Start_IT+0x96>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
9000e74e:	6891      	ldr	r1, [r2, #8]
9000e750:	4b10      	ldr	r3, [pc, #64]	; (9000e794 <HAL_TIM_Base_Start_IT+0xb4>)
9000e752:	400b      	ands	r3, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
9000e754:	2b06      	cmp	r3, #6
9000e756:	d00b      	beq.n	9000e770 <HAL_TIM_Base_Start_IT+0x90>
9000e758:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
9000e75c:	d008      	beq.n	9000e770 <HAL_TIM_Base_Start_IT+0x90>
      __HAL_TIM_ENABLE(htim);
9000e75e:	6813      	ldr	r3, [r2, #0]
  return HAL_OK;
9000e760:	2000      	movs	r0, #0
      __HAL_TIM_ENABLE(htim);
9000e762:	f043 0301 	orr.w	r3, r3, #1
9000e766:	6013      	str	r3, [r2, #0]
}
9000e768:	bc30      	pop	{r4, r5}
9000e76a:	4770      	bx	lr
    return HAL_ERROR;
9000e76c:	2001      	movs	r0, #1
}
9000e76e:	4770      	bx	lr
  return HAL_OK;
9000e770:	2000      	movs	r0, #0
}
9000e772:	bc30      	pop	{r4, r5}
9000e774:	4770      	bx	lr
    __HAL_TIM_ENABLE(htim);
9000e776:	6813      	ldr	r3, [r2, #0]
9000e778:	f043 0301 	orr.w	r3, r3, #1
9000e77c:	6013      	str	r3, [r2, #0]
9000e77e:	e7f3      	b.n	9000e768 <HAL_TIM_Base_Start_IT+0x88>
9000e780:	40010000 	.word	0x40010000
9000e784:	40000400 	.word	0x40000400
9000e788:	40000800 	.word	0x40000800
9000e78c:	40010400 	.word	0x40010400
9000e790:	40001800 	.word	0x40001800
9000e794:	00010007 	.word	0x00010007

9000e798 <HAL_TIM_OC_DelayElapsedCallback>:
9000e798:	4770      	bx	lr
9000e79a:	bf00      	nop

9000e79c <HAL_TIM_IC_CaptureCallback>:
9000e79c:	4770      	bx	lr
9000e79e:	bf00      	nop

9000e7a0 <HAL_TIM_PWM_PulseFinishedCallback>:
9000e7a0:	4770      	bx	lr
9000e7a2:	bf00      	nop

9000e7a4 <HAL_TIM_TriggerCallback>:
9000e7a4:	4770      	bx	lr
9000e7a6:	bf00      	nop

9000e7a8 <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
9000e7a8:	6803      	ldr	r3, [r0, #0]
9000e7aa:	691a      	ldr	r2, [r3, #16]
9000e7ac:	0791      	lsls	r1, r2, #30
{
9000e7ae:	b510      	push	{r4, lr}
9000e7b0:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
9000e7b2:	d502      	bpl.n	9000e7ba <HAL_TIM_IRQHandler+0x12>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
9000e7b4:	68da      	ldr	r2, [r3, #12]
9000e7b6:	0792      	lsls	r2, r2, #30
9000e7b8:	d468      	bmi.n	9000e88c <HAL_TIM_IRQHandler+0xe4>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
9000e7ba:	691a      	ldr	r2, [r3, #16]
9000e7bc:	0752      	lsls	r2, r2, #29
9000e7be:	d502      	bpl.n	9000e7c6 <HAL_TIM_IRQHandler+0x1e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
9000e7c0:	68da      	ldr	r2, [r3, #12]
9000e7c2:	0750      	lsls	r0, r2, #29
9000e7c4:	d44f      	bmi.n	9000e866 <HAL_TIM_IRQHandler+0xbe>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
9000e7c6:	691a      	ldr	r2, [r3, #16]
9000e7c8:	0711      	lsls	r1, r2, #28
9000e7ca:	d502      	bpl.n	9000e7d2 <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
9000e7cc:	68da      	ldr	r2, [r3, #12]
9000e7ce:	0712      	lsls	r2, r2, #28
9000e7d0:	d437      	bmi.n	9000e842 <HAL_TIM_IRQHandler+0x9a>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
9000e7d2:	691a      	ldr	r2, [r3, #16]
9000e7d4:	06d0      	lsls	r0, r2, #27
9000e7d6:	d502      	bpl.n	9000e7de <HAL_TIM_IRQHandler+0x36>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
9000e7d8:	68da      	ldr	r2, [r3, #12]
9000e7da:	06d1      	lsls	r1, r2, #27
9000e7dc:	d41e      	bmi.n	9000e81c <HAL_TIM_IRQHandler+0x74>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
9000e7de:	691a      	ldr	r2, [r3, #16]
9000e7e0:	07d2      	lsls	r2, r2, #31
9000e7e2:	d502      	bpl.n	9000e7ea <HAL_TIM_IRQHandler+0x42>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
9000e7e4:	68da      	ldr	r2, [r3, #12]
9000e7e6:	07d0      	lsls	r0, r2, #31
9000e7e8:	d469      	bmi.n	9000e8be <HAL_TIM_IRQHandler+0x116>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
9000e7ea:	691a      	ldr	r2, [r3, #16]
9000e7ec:	0611      	lsls	r1, r2, #24
9000e7ee:	d502      	bpl.n	9000e7f6 <HAL_TIM_IRQHandler+0x4e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
9000e7f0:	68da      	ldr	r2, [r3, #12]
9000e7f2:	0612      	lsls	r2, r2, #24
9000e7f4:	d46b      	bmi.n	9000e8ce <HAL_TIM_IRQHandler+0x126>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
9000e7f6:	691a      	ldr	r2, [r3, #16]
9000e7f8:	05d0      	lsls	r0, r2, #23
9000e7fa:	d502      	bpl.n	9000e802 <HAL_TIM_IRQHandler+0x5a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
9000e7fc:	68da      	ldr	r2, [r3, #12]
9000e7fe:	0611      	lsls	r1, r2, #24
9000e800:	d46d      	bmi.n	9000e8de <HAL_TIM_IRQHandler+0x136>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
9000e802:	691a      	ldr	r2, [r3, #16]
9000e804:	0652      	lsls	r2, r2, #25
9000e806:	d502      	bpl.n	9000e80e <HAL_TIM_IRQHandler+0x66>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
9000e808:	68da      	ldr	r2, [r3, #12]
9000e80a:	0650      	lsls	r0, r2, #25
9000e80c:	d46f      	bmi.n	9000e8ee <HAL_TIM_IRQHandler+0x146>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
9000e80e:	691a      	ldr	r2, [r3, #16]
9000e810:	0691      	lsls	r1, r2, #26
9000e812:	d502      	bpl.n	9000e81a <HAL_TIM_IRQHandler+0x72>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
9000e814:	68da      	ldr	r2, [r3, #12]
9000e816:	0692      	lsls	r2, r2, #26
9000e818:	d449      	bmi.n	9000e8ae <HAL_TIM_IRQHandler+0x106>
}
9000e81a:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
9000e81c:	f06f 0110 	mvn.w	r1, #16
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
9000e820:	2208      	movs	r2, #8
        HAL_TIM_IC_CaptureCallback(htim);
9000e822:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
9000e824:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
9000e826:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
9000e828:	69db      	ldr	r3, [r3, #28]
9000e82a:	f413 7f40 	tst.w	r3, #768	; 0x300
9000e82e:	d16f      	bne.n	9000e910 <HAL_TIM_IRQHandler+0x168>
        HAL_TIM_OC_DelayElapsedCallback(htim);
9000e830:	f7ff ffb2 	bl	9000e798 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
9000e834:	4620      	mov	r0, r4
9000e836:	f7ff ffb3 	bl	9000e7a0 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
9000e83a:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
9000e83c:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
9000e83e:	7722      	strb	r2, [r4, #28]
9000e840:	e7cd      	b.n	9000e7de <HAL_TIM_IRQHandler+0x36>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
9000e842:	f06f 0108 	mvn.w	r1, #8
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
9000e846:	2204      	movs	r2, #4
        HAL_TIM_IC_CaptureCallback(htim);
9000e848:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
9000e84a:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
9000e84c:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
9000e84e:	69db      	ldr	r3, [r3, #28]
9000e850:	079b      	lsls	r3, r3, #30
9000e852:	d15a      	bne.n	9000e90a <HAL_TIM_IRQHandler+0x162>
        HAL_TIM_OC_DelayElapsedCallback(htim);
9000e854:	f7ff ffa0 	bl	9000e798 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
9000e858:	4620      	mov	r0, r4
9000e85a:	f7ff ffa1 	bl	9000e7a0 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
9000e85e:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
9000e860:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
9000e862:	7722      	strb	r2, [r4, #28]
9000e864:	e7b5      	b.n	9000e7d2 <HAL_TIM_IRQHandler+0x2a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
9000e866:	f06f 0104 	mvn.w	r1, #4
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
9000e86a:	2202      	movs	r2, #2
        HAL_TIM_IC_CaptureCallback(htim);
9000e86c:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
9000e86e:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
9000e870:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
9000e872:	699b      	ldr	r3, [r3, #24]
9000e874:	f413 7f40 	tst.w	r3, #768	; 0x300
9000e878:	d144      	bne.n	9000e904 <HAL_TIM_IRQHandler+0x15c>
        HAL_TIM_OC_DelayElapsedCallback(htim);
9000e87a:	f7ff ff8d 	bl	9000e798 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
9000e87e:	4620      	mov	r0, r4
9000e880:	f7ff ff8e 	bl	9000e7a0 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
9000e884:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
9000e886:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
9000e888:	7722      	strb	r2, [r4, #28]
9000e88a:	e79c      	b.n	9000e7c6 <HAL_TIM_IRQHandler+0x1e>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
9000e88c:	f06f 0102 	mvn.w	r1, #2
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
9000e890:	2201      	movs	r2, #1
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
9000e892:	6119      	str	r1, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
9000e894:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
9000e896:	699b      	ldr	r3, [r3, #24]
9000e898:	0799      	lsls	r1, r3, #30
9000e89a:	d130      	bne.n	9000e8fe <HAL_TIM_IRQHandler+0x156>
          HAL_TIM_OC_DelayElapsedCallback(htim);
9000e89c:	f7ff ff7c 	bl	9000e798 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
9000e8a0:	4620      	mov	r0, r4
9000e8a2:	f7ff ff7d 	bl	9000e7a0 <HAL_TIM_PWM_PulseFinishedCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
9000e8a6:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
9000e8a8:	6823      	ldr	r3, [r4, #0]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
9000e8aa:	7722      	strb	r2, [r4, #28]
9000e8ac:	e785      	b.n	9000e7ba <HAL_TIM_IRQHandler+0x12>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
9000e8ae:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
9000e8b2:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
9000e8b4:	611a      	str	r2, [r3, #16]
}
9000e8b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
9000e8ba:	f000 b82d 	b.w	9000e918 <HAL_TIMEx_CommutCallback>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
9000e8be:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
9000e8c2:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
9000e8c4:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
9000e8c6:	f7f5 ffab 	bl	90004820 <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
9000e8ca:	6823      	ldr	r3, [r4, #0]
9000e8cc:	e78d      	b.n	9000e7ea <HAL_TIM_IRQHandler+0x42>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
9000e8ce:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
9000e8d2:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
9000e8d4:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
9000e8d6:	f000 f821 	bl	9000e91c <HAL_TIMEx_BreakCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
9000e8da:	6823      	ldr	r3, [r4, #0]
9000e8dc:	e78b      	b.n	9000e7f6 <HAL_TIM_IRQHandler+0x4e>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
9000e8de:	f46f 7280 	mvn.w	r2, #256	; 0x100
      HAL_TIMEx_Break2Callback(htim);
9000e8e2:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
9000e8e4:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
9000e8e6:	f000 f81b 	bl	9000e920 <HAL_TIMEx_Break2Callback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
9000e8ea:	6823      	ldr	r3, [r4, #0]
9000e8ec:	e789      	b.n	9000e802 <HAL_TIM_IRQHandler+0x5a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
9000e8ee:	f06f 0240 	mvn.w	r2, #64	; 0x40
      HAL_TIM_TriggerCallback(htim);
9000e8f2:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
9000e8f4:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
9000e8f6:	f7ff ff55 	bl	9000e7a4 <HAL_TIM_TriggerCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
9000e8fa:	6823      	ldr	r3, [r4, #0]
9000e8fc:	e787      	b.n	9000e80e <HAL_TIM_IRQHandler+0x66>
          HAL_TIM_IC_CaptureCallback(htim);
9000e8fe:	f7ff ff4d 	bl	9000e79c <HAL_TIM_IC_CaptureCallback>
9000e902:	e7d0      	b.n	9000e8a6 <HAL_TIM_IRQHandler+0xfe>
        HAL_TIM_IC_CaptureCallback(htim);
9000e904:	f7ff ff4a 	bl	9000e79c <HAL_TIM_IC_CaptureCallback>
9000e908:	e7bc      	b.n	9000e884 <HAL_TIM_IRQHandler+0xdc>
        HAL_TIM_IC_CaptureCallback(htim);
9000e90a:	f7ff ff47 	bl	9000e79c <HAL_TIM_IC_CaptureCallback>
9000e90e:	e7a6      	b.n	9000e85e <HAL_TIM_IRQHandler+0xb6>
        HAL_TIM_IC_CaptureCallback(htim);
9000e910:	f7ff ff44 	bl	9000e79c <HAL_TIM_IC_CaptureCallback>
9000e914:	e791      	b.n	9000e83a <HAL_TIM_IRQHandler+0x92>
9000e916:	bf00      	nop

9000e918 <HAL_TIMEx_CommutCallback>:
9000e918:	4770      	bx	lr
9000e91a:	bf00      	nop

9000e91c <HAL_TIMEx_BreakCallback>:
9000e91c:	4770      	bx	lr
9000e91e:	bf00      	nop

9000e920 <HAL_TIMEx_Break2Callback>:
9000e920:	4770      	bx	lr
9000e922:	bf00      	nop

9000e924 <FMC_SDRAM_Init>:
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
9000e924:	680b      	ldr	r3, [r1, #0]
{
9000e926:	b410      	push	{r4}
  if (Init->SDBank == FMC_SDRAM_BANK1)
9000e928:	b9d3      	cbnz	r3, 9000e960 <FMC_SDRAM_Init+0x3c>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
9000e92a:	6804      	ldr	r4, [r0, #0]
9000e92c:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
9000e930:	684a      	ldr	r2, [r1, #4]
9000e932:	4023      	ands	r3, r4
9000e934:	4313      	orrs	r3, r2
9000e936:	e9d1 4202 	ldrd	r4, r2, [r1, #8]
9000e93a:	4323      	orrs	r3, r4
9000e93c:	4313      	orrs	r3, r2
9000e93e:	e9d1 4204 	ldrd	r4, r2, [r1, #16]
9000e942:	4323      	orrs	r3, r4
9000e944:	4313      	orrs	r3, r2
9000e946:	e9d1 4206 	ldrd	r4, r2, [r1, #24]
9000e94a:	4323      	orrs	r3, r4
9000e94c:	4313      	orrs	r3, r2
9000e94e:	e9d1 4208 	ldrd	r4, r2, [r1, #32]
9000e952:	4323      	orrs	r3, r4
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
}
9000e954:	f85d 4b04 	ldr.w	r4, [sp], #4
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
9000e958:	4313      	orrs	r3, r2
9000e95a:	6003      	str	r3, [r0, #0]
}
9000e95c:	2000      	movs	r0, #0
9000e95e:	4770      	bx	lr
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
9000e960:	6802      	ldr	r2, [r0, #0]
9000e962:	e9d1 4307 	ldrd	r4, r3, [r1, #28]
9000e966:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
9000e96a:	4322      	orrs	r2, r4
9000e96c:	6a4c      	ldr	r4, [r1, #36]	; 0x24
9000e96e:	431a      	orrs	r2, r3
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
9000e970:	4b0a      	ldr	r3, [pc, #40]	; (9000e99c <FMC_SDRAM_Init+0x78>)
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
9000e972:	4322      	orrs	r2, r4
9000e974:	6002      	str	r2, [r0, #0]
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
9000e976:	6842      	ldr	r2, [r0, #4]
9000e978:	4013      	ands	r3, r2
9000e97a:	e9d1 4201 	ldrd	r4, r2, [r1, #4]
9000e97e:	4323      	orrs	r3, r4
9000e980:	4313      	orrs	r3, r2
9000e982:	e9d1 4203 	ldrd	r4, r2, [r1, #12]
9000e986:	4323      	orrs	r3, r4
9000e988:	4313      	orrs	r3, r2
9000e98a:	e9d1 4205 	ldrd	r4, r2, [r1, #20]
9000e98e:	4323      	orrs	r3, r4
}
9000e990:	f85d 4b04 	ldr.w	r4, [sp], #4
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
9000e994:	4313      	orrs	r3, r2
9000e996:	6043      	str	r3, [r0, #4]
}
9000e998:	2000      	movs	r0, #0
9000e99a:	4770      	bx	lr
9000e99c:	ffff8000 	.word	0xffff8000

9000e9a0 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
9000e9a0:	b430      	push	{r4, r5}
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
9000e9a2:	bb0a      	cbnz	r2, 9000e9e8 <FMC_SDRAM_Timing_Init+0x48>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
9000e9a4:	6883      	ldr	r3, [r0, #8]
9000e9a6:	e9d1 2400 	ldrd	r2, r4, [r1]
9000e9aa:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
9000e9ae:	3c01      	subs	r4, #1
9000e9b0:	3a01      	subs	r2, #1
9000e9b2:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
9000e9b6:	4313      	orrs	r3, r2
9000e9b8:	e9d1 4202 	ldrd	r4, r2, [r1, #8]
9000e9bc:	3c01      	subs	r4, #1
9000e9be:	3a01      	subs	r2, #1
9000e9c0:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
9000e9c4:	e9d1 5404 	ldrd	r5, r4, [r1, #16]
9000e9c8:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
9000e9cc:	698a      	ldr	r2, [r1, #24]
9000e9ce:	3d01      	subs	r5, #1
9000e9d0:	1e61      	subs	r1, r4, #1
9000e9d2:	3a01      	subs	r2, #1
9000e9d4:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
9000e9d8:	ea43 5301 	orr.w	r3, r3, r1, lsl #20
9000e9dc:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
}
9000e9e0:	bc30      	pop	{r4, r5}
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
9000e9e2:	6083      	str	r3, [r0, #8]
}
9000e9e4:	2000      	movs	r0, #0
9000e9e6:	4770      	bx	lr
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
9000e9e8:	6885      	ldr	r5, [r0, #8]
9000e9ea:	68ca      	ldr	r2, [r1, #12]
9000e9ec:	4b12      	ldr	r3, [pc, #72]	; (9000ea38 <FMC_SDRAM_Timing_Init+0x98>)
9000e9ee:	1e54      	subs	r4, r2, #1
9000e9f0:	694a      	ldr	r2, [r1, #20]
9000e9f2:	402b      	ands	r3, r5
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
9000e9f4:	688d      	ldr	r5, [r1, #8]
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
9000e9f6:	3a01      	subs	r2, #1
9000e9f8:	ea43 3304 	orr.w	r3, r3, r4, lsl #12
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
9000e9fc:	f105 3cff 	add.w	ip, r5, #4294967295
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
9000ea00:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
9000ea04:	e9d1 2400 	ldrd	r2, r4, [r1]
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
9000ea08:	6083      	str	r3, [r0, #8]
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
9000ea0a:	68c3      	ldr	r3, [r0, #12]
9000ea0c:	3c01      	subs	r4, #1
9000ea0e:	3a01      	subs	r2, #1
9000ea10:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
9000ea14:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
9000ea18:	690c      	ldr	r4, [r1, #16]
9000ea1a:	4313      	orrs	r3, r2
9000ea1c:	698a      	ldr	r2, [r1, #24]
9000ea1e:	1e61      	subs	r1, r4, #1
9000ea20:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
9000ea24:	3a01      	subs	r2, #1
9000ea26:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
9000ea2a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
}
9000ea2e:	bc30      	pop	{r4, r5}
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
9000ea30:	60c3      	str	r3, [r0, #12]
}
9000ea32:	2000      	movs	r0, #0
9000ea34:	4770      	bx	lr
9000ea36:	bf00      	nop
9000ea38:	ff0f0fff 	.word	0xff0f0fff

9000ea3c <FMC_SDRAM_DeInit>:
  * @brief  DeInitializes the FMC_SDRAM peripheral
  * @param  Device Pointer to SDRAM device instance
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_DeInit(FMC_SDRAM_TypeDef *Device, uint32_t Bank)
{
9000ea3c:	b430      	push	{r4, r5}
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* De-initialize the SDRAM device */
  Device->SDCR[Bank] = 0x000002D0U;
  Device->SDTR[Bank] = 0x0FFFFFFFU;
  Device->SDCMR      = 0x00000000U;
9000ea3e:	2200      	movs	r2, #0
{
9000ea40:	4603      	mov	r3, r0
  Device->SDCR[Bank] = 0x000002D0U;
9000ea42:	f44f 7534 	mov.w	r5, #720	; 0x2d0
  Device->SDTR[Bank] = 0x0FFFFFFFU;
9000ea46:	f06f 4470 	mvn.w	r4, #4026531840	; 0xf0000000
9000ea4a:	eb00 0c81 	add.w	ip, r0, r1, lsl #2
  Device->SDCR[Bank] = 0x000002D0U;
9000ea4e:	f840 5021 	str.w	r5, [r0, r1, lsl #2]
  Device->SDRTR      = 0x00000000U;
  Device->SDSR       = 0x00000000U;

  return HAL_OK;
}
9000ea52:	4610      	mov	r0, r2
  Device->SDTR[Bank] = 0x0FFFFFFFU;
9000ea54:	f8cc 4008 	str.w	r4, [ip, #8]
  Device->SDCMR      = 0x00000000U;
9000ea58:	611a      	str	r2, [r3, #16]
  Device->SDRTR      = 0x00000000U;
9000ea5a:	615a      	str	r2, [r3, #20]
  Device->SDSR       = 0x00000000U;
9000ea5c:	619a      	str	r2, [r3, #24]
}
9000ea5e:	bc30      	pop	{r4, r5}
9000ea60:	4770      	bx	lr
9000ea62:	bf00      	nop

9000ea64 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
9000ea64:	b410      	push	{r4}
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
9000ea66:	e9d1 3400 	ldrd	r3, r4, [r1]
{
9000ea6a:	4602      	mov	r2, r0
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
9000ea6c:	6900      	ldr	r0, [r0, #16]
9000ea6e:	4323      	orrs	r3, r4
9000ea70:	e9d1 1402 	ldrd	r1, r4, [r1, #8]
9000ea74:	ea43 2344 	orr.w	r3, r3, r4, lsl #9
9000ea78:	4c05      	ldr	r4, [pc, #20]	; (9000ea90 <FMC_SDRAM_SendCommand+0x2c>)
9000ea7a:	3901      	subs	r1, #1
9000ea7c:	4004      	ands	r4, r0
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
}
9000ea7e:	2000      	movs	r0, #0
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
9000ea80:	4323      	orrs	r3, r4
}
9000ea82:	f85d 4b04 	ldr.w	r4, [sp], #4
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
9000ea86:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
9000ea8a:	6113      	str	r3, [r2, #16]
}
9000ea8c:	4770      	bx	lr
9000ea8e:	bf00      	nop
9000ea90:	ffc00000 	.word	0xffc00000

9000ea94 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
9000ea94:	4602      	mov	r2, r0
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
9000ea96:	4b05      	ldr	r3, [pc, #20]	; (9000eaac <FMC_SDRAM_ProgramRefreshRate+0x18>)

  return HAL_OK;
}
9000ea98:	2000      	movs	r0, #0
{
9000ea9a:	b410      	push	{r4}
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
9000ea9c:	6954      	ldr	r4, [r2, #20]
9000ea9e:	4023      	ands	r3, r4
}
9000eaa0:	f85d 4b04 	ldr.w	r4, [sp], #4
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
9000eaa4:	ea43 0141 	orr.w	r1, r3, r1, lsl #1
9000eaa8:	6151      	str	r1, [r2, #20]
}
9000eaaa:	4770      	bx	lr
9000eaac:	ffffc001 	.word	0xffffc001

9000eab0 <TimerCallback>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_TIMER == 1)

static void TimerCallback (TimerHandle_t hTimer) {
9000eab0:	b510      	push	{r4, lr}
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
9000eab2:	f003 f94f 	bl	90011d54 <pvTimerGetTimerID>

  if (callb != NULL) {
9000eab6:	b120      	cbz	r0, 9000eac2 <TimerCallback+0x12>
    callb->func (callb->arg);
9000eab8:	e9d0 3000 	ldrd	r3, r0, [r0]
  }
}
9000eabc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    callb->func (callb->arg);
9000eac0:	4718      	bx	r3
}
9000eac2:	bd10      	pop	{r4, pc}

9000eac4 <SysTick_Handler>:
void SysTick_Handler (void) {
9000eac4:	b508      	push	{r3, lr}
  SysTick->CTRL;
9000eac6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
9000eaca:	691b      	ldr	r3, [r3, #16]
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
9000eacc:	f002 fd34 	bl	90011538 <xTaskGetSchedulerState>
9000ead0:	2801      	cmp	r0, #1
9000ead2:	d100      	bne.n	9000ead6 <SysTick_Handler+0x12>
}
9000ead4:	bd08      	pop	{r3, pc}
9000ead6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    xPortSysTickHandler();
9000eada:	f000 bd33 	b.w	9000f544 <xPortSysTickHandler>
9000eade:	bf00      	nop

9000eae0 <osKernelInitialize>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
9000eae0:	f3ef 8305 	mrs	r3, IPSR
  if (IS_IRQ()) {
9000eae4:	b92b      	cbnz	r3, 9000eaf2 <osKernelInitialize+0x12>
    if (KernelState == osKernelInactive) {
9000eae6:	4b06      	ldr	r3, [pc, #24]	; (9000eb00 <osKernelInitialize+0x20>)
9000eae8:	6818      	ldr	r0, [r3, #0]
9000eaea:	b928      	cbnz	r0, 9000eaf8 <osKernelInitialize+0x18>
      KernelState = osKernelReady;
9000eaec:	2201      	movs	r2, #1
9000eaee:	601a      	str	r2, [r3, #0]
      stat = osOK;
9000eaf0:	4770      	bx	lr
    stat = osErrorISR;
9000eaf2:	f06f 0005 	mvn.w	r0, #5
9000eaf6:	4770      	bx	lr
      stat = osError;
9000eaf8:	f04f 30ff 	mov.w	r0, #4294967295
}
9000eafc:	4770      	bx	lr
9000eafe:	bf00      	nop
9000eb00:	2400e00c 	.word	0x2400e00c

9000eb04 <osKernelStart>:
osStatus_t osKernelStart (void) {
9000eb04:	b510      	push	{r4, lr}
9000eb06:	f3ef 8405 	mrs	r4, IPSR
  if (IS_IRQ()) {
9000eb0a:	b974      	cbnz	r4, 9000eb2a <osKernelStart+0x26>
    if (KernelState == osKernelReady) {
9000eb0c:	4b08      	ldr	r3, [pc, #32]	; (9000eb30 <osKernelStart+0x2c>)
9000eb0e:	681a      	ldr	r2, [r3, #0]
9000eb10:	2a01      	cmp	r2, #1
9000eb12:	d107      	bne.n	9000eb24 <osKernelStart+0x20>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
9000eb14:	4907      	ldr	r1, [pc, #28]	; (9000eb34 <osKernelStart+0x30>)
      KernelState = osKernelRunning;
9000eb16:	2202      	movs	r2, #2
9000eb18:	77cc      	strb	r4, [r1, #31]
9000eb1a:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
9000eb1c:	f002 fa9a 	bl	90011054 <vTaskStartScheduler>
      stat = osOK;
9000eb20:	4620      	mov	r0, r4
}
9000eb22:	bd10      	pop	{r4, pc}
      stat = osError;
9000eb24:	f04f 30ff 	mov.w	r0, #4294967295
}
9000eb28:	bd10      	pop	{r4, pc}
    stat = osErrorISR;
9000eb2a:	f06f 0005 	mvn.w	r0, #5
}
9000eb2e:	bd10      	pop	{r4, pc}
9000eb30:	2400e00c 	.word	0x2400e00c
9000eb34:	e000ed00 	.word	0xe000ed00

9000eb38 <osThreadNew>:
osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
9000eb38:	b5f0      	push	{r4, r5, r6, r7, lr}
  hTask = NULL;
9000eb3a:	2500      	movs	r5, #0
osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
9000eb3c:	b087      	sub	sp, #28
9000eb3e:	4614      	mov	r4, r2
  hTask = NULL;
9000eb40:	9505      	str	r5, [sp, #20]
9000eb42:	f3ef 8205 	mrs	r2, IPSR
  if (!IS_IRQ() && (func != NULL)) {
9000eb46:	bb5a      	cbnz	r2, 9000eba0 <osThreadNew+0x68>
9000eb48:	4606      	mov	r6, r0
9000eb4a:	b348      	cbz	r0, 9000eba0 <osThreadNew+0x68>
    if (attr != NULL) {
9000eb4c:	b1e4      	cbz	r4, 9000eb88 <osThreadNew+0x50>
      if (attr->priority != osPriorityNone) {
9000eb4e:	69a7      	ldr	r7, [r4, #24]
9000eb50:	bb4f      	cbnz	r7, 9000eba6 <osThreadNew+0x6e>
9000eb52:	2718      	movs	r7, #24
      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
9000eb54:	6863      	ldr	r3, [r4, #4]
9000eb56:	07db      	lsls	r3, r3, #31
9000eb58:	d422      	bmi.n	9000eba0 <osThreadNew+0x68>
      if (attr->stack_size > 0U) {
9000eb5a:	6963      	ldr	r3, [r4, #20]
9000eb5c:	b33b      	cbz	r3, 9000ebae <osThreadNew+0x76>
        stack = attr->stack_size / sizeof(StackType_t);
9000eb5e:	ea4f 0c93 	mov.w	ip, r3, lsr #2
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
9000eb62:	68a0      	ldr	r0, [r4, #8]
      if (attr->name != NULL) {
9000eb64:	6825      	ldr	r5, [r4, #0]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
9000eb66:	b338      	cbz	r0, 9000ebb8 <osThreadNew+0x80>
9000eb68:	68e2      	ldr	r2, [r4, #12]
9000eb6a:	2a5f      	cmp	r2, #95	; 0x5f
9000eb6c:	d918      	bls.n	9000eba0 <osThreadNew+0x68>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
9000eb6e:	6924      	ldr	r4, [r4, #16]
9000eb70:	b1b3      	cbz	r3, 9000eba0 <osThreadNew+0x68>
9000eb72:	b1ac      	cbz	r4, 9000eba0 <osThreadNew+0x68>
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
9000eb74:	460b      	mov	r3, r1
9000eb76:	4662      	mov	r2, ip
9000eb78:	4629      	mov	r1, r5
9000eb7a:	9700      	str	r7, [sp, #0]
9000eb7c:	e9cd 4001 	strd	r4, r0, [sp, #4]
9000eb80:	4630      	mov	r0, r6
9000eb82:	f002 f8cb 	bl	90010d1c <xTaskCreateStatic>
9000eb86:	e00c      	b.n	9000eba2 <osThreadNew+0x6a>
9000eb88:	2280      	movs	r2, #128	; 0x80
    prio  = (UBaseType_t)osPriorityNormal;
9000eb8a:	2718      	movs	r7, #24
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
9000eb8c:	460b      	mov	r3, r1
9000eb8e:	4621      	mov	r1, r4
9000eb90:	ac05      	add	r4, sp, #20
9000eb92:	4630      	mov	r0, r6
9000eb94:	9700      	str	r7, [sp, #0]
9000eb96:	9401      	str	r4, [sp, #4]
9000eb98:	f002 f96a 	bl	90010e70 <xTaskCreate>
9000eb9c:	2801      	cmp	r0, #1
9000eb9e:	d009      	beq.n	9000ebb4 <osThreadNew+0x7c>
        return (NULL);
9000eba0:	2000      	movs	r0, #0
}
9000eba2:	b007      	add	sp, #28
9000eba4:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
9000eba6:	1e7a      	subs	r2, r7, #1
9000eba8:	2a37      	cmp	r2, #55	; 0x37
9000ebaa:	d9d3      	bls.n	9000eb54 <osThreadNew+0x1c>
9000ebac:	e7f8      	b.n	9000eba0 <osThreadNew+0x68>
    stack = configMINIMAL_STACK_SIZE;
9000ebae:	f04f 0c80 	mov.w	ip, #128	; 0x80
9000ebb2:	e7d6      	b.n	9000eb62 <osThreadNew+0x2a>
  return ((osThreadId_t)hTask);
9000ebb4:	9805      	ldr	r0, [sp, #20]
9000ebb6:	e7f4      	b.n	9000eba2 <osThreadNew+0x6a>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
9000ebb8:	68e3      	ldr	r3, [r4, #12]
9000ebba:	2b00      	cmp	r3, #0
9000ebbc:	d1f1      	bne.n	9000eba2 <osThreadNew+0x6a>
9000ebbe:	6923      	ldr	r3, [r4, #16]
9000ebc0:	2b00      	cmp	r3, #0
9000ebc2:	d1ee      	bne.n	9000eba2 <osThreadNew+0x6a>
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
9000ebc4:	fa1f f28c 	uxth.w	r2, ip
9000ebc8:	462c      	mov	r4, r5
9000ebca:	e7df      	b.n	9000eb8c <osThreadNew+0x54>

9000ebcc <osDelay>:
osStatus_t osDelay (uint32_t ticks) {
9000ebcc:	b510      	push	{r4, lr}
9000ebce:	f3ef 8405 	mrs	r4, IPSR
  if (IS_IRQ()) {
9000ebd2:	b92c      	cbnz	r4, 9000ebe0 <osDelay+0x14>
    if (ticks != 0U) {
9000ebd4:	b900      	cbnz	r0, 9000ebd8 <osDelay+0xc>
}
9000ebd6:	bd10      	pop	{r4, pc}
      vTaskDelay(ticks);
9000ebd8:	f002 f9e6 	bl	90010fa8 <vTaskDelay>
    stat = osOK;
9000ebdc:	4620      	mov	r0, r4
}
9000ebde:	bd10      	pop	{r4, pc}
    stat = osErrorISR;
9000ebe0:	f06f 0005 	mvn.w	r0, #5
}
9000ebe4:	bd10      	pop	{r4, pc}
9000ebe6:	bf00      	nop

9000ebe8 <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
9000ebe8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
9000ebec:	461c      	mov	r4, r3
9000ebee:	b082      	sub	sp, #8
9000ebf0:	f3ef 8305 	mrs	r3, IPSR
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;

  if (!IS_IRQ() && (func != NULL)) {
9000ebf4:	b9bb      	cbnz	r3, 9000ec26 <osTimerNew+0x3e>
9000ebf6:	4605      	mov	r5, r0
9000ebf8:	b1a8      	cbz	r0, 9000ec26 <osTimerNew+0x3e>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
9000ebfa:	2008      	movs	r0, #8
9000ebfc:	460e      	mov	r6, r1
9000ebfe:	4617      	mov	r7, r2
9000ec00:	f000 fa5e 	bl	9000f0c0 <pvPortMalloc>

    if (callb != NULL) {
9000ec04:	4680      	mov	r8, r0
9000ec06:	b170      	cbz	r0, 9000ec26 <osTimerNew+0x3e>
      callb->func = func;
      callb->arg  = argument;

      if (type == osTimerOnce) {
9000ec08:	3e00      	subs	r6, #0
      callb->arg  = argument;
9000ec0a:	e9c0 5700 	strd	r5, r7, [r0]
      if (type == osTimerOnce) {
9000ec0e:	bf18      	it	ne
9000ec10:	2601      	movne	r6, #1
      }

      mem  = -1;
      name = NULL;

      if (attr != NULL) {
9000ec12:	b1ec      	cbz	r4, 9000ec50 <osTimerNew+0x68>
        if (attr->name != NULL) {
          name = attr->name;
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
9000ec14:	68a3      	ldr	r3, [r4, #8]
        if (attr->name != NULL) {
9000ec16:	6820      	ldr	r0, [r4, #0]
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
9000ec18:	b1b3      	cbz	r3, 9000ec48 <osTimerNew+0x60>
9000ec1a:	68e2      	ldr	r2, [r4, #12]
9000ec1c:	2a2b      	cmp	r2, #43	; 0x2b
9000ec1e:	d806      	bhi.n	9000ec2e <osTimerNew+0x46>
          #endif
        }
      }

      if ((hTimer == NULL) && (callb != NULL)) {
        vPortFree (callb);
9000ec20:	4640      	mov	r0, r8
9000ec22:	f000 fb0b 	bl	9000f23c <vPortFree>
9000ec26:	2000      	movs	r0, #0
      }
    }
  }

  return ((osTimerId_t)hTimer);
}
9000ec28:	b002      	add	sp, #8
9000ec2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
          hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
9000ec2e:	4c0e      	ldr	r4, [pc, #56]	; (9000ec68 <osTimerNew+0x80>)
9000ec30:	4632      	mov	r2, r6
9000ec32:	2101      	movs	r1, #1
9000ec34:	e9cd 4300 	strd	r4, r3, [sp]
9000ec38:	4643      	mov	r3, r8
9000ec3a:	f002 ffd7 	bl	90011bec <xTimerCreateStatic>
      if ((hTimer == NULL) && (callb != NULL)) {
9000ec3e:	2800      	cmp	r0, #0
9000ec40:	d0ee      	beq.n	9000ec20 <osTimerNew+0x38>
}
9000ec42:	b002      	add	sp, #8
9000ec44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
9000ec48:	68e3      	ldr	r3, [r4, #12]
9000ec4a:	2b00      	cmp	r3, #0
9000ec4c:	d1e8      	bne.n	9000ec20 <osTimerNew+0x38>
9000ec4e:	4604      	mov	r4, r0
            hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
9000ec50:	4d05      	ldr	r5, [pc, #20]	; (9000ec68 <osTimerNew+0x80>)
9000ec52:	4643      	mov	r3, r8
9000ec54:	4632      	mov	r2, r6
9000ec56:	4620      	mov	r0, r4
9000ec58:	2101      	movs	r1, #1
9000ec5a:	9500      	str	r5, [sp, #0]
9000ec5c:	f002 ff5e 	bl	90011b1c <xTimerCreate>
      if ((hTimer == NULL) && (callb != NULL)) {
9000ec60:	2800      	cmp	r0, #0
9000ec62:	d1ee      	bne.n	9000ec42 <osTimerNew+0x5a>
9000ec64:	e7dc      	b.n	9000ec20 <osTimerNew+0x38>
9000ec66:	bf00      	nop
9000ec68:	9000eab1 	.word	0x9000eab1

9000ec6c <osTimerStart>:
9000ec6c:	f3ef 8305 	mrs	r3, IPSR

osStatus_t osTimerStart (osTimerId_t timer_id, uint32_t ticks) {
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
  osStatus_t stat;

  if (IS_IRQ()) {
9000ec70:	b973      	cbnz	r3, 9000ec90 <osTimerStart+0x24>
osStatus_t osTimerStart (osTimerId_t timer_id, uint32_t ticks) {
9000ec72:	b510      	push	{r4, lr}
9000ec74:	b082      	sub	sp, #8
    stat = osErrorISR;
  }
  else if (hTimer == NULL) {
9000ec76:	b170      	cbz	r0, 9000ec96 <osTimerStart+0x2a>
    stat = osErrorParameter;
  }
  else {
    if (xTimerChangePeriod (hTimer, ticks, 0) == pdPASS) {
9000ec78:	460a      	mov	r2, r1
9000ec7a:	9300      	str	r3, [sp, #0]
9000ec7c:	2104      	movs	r1, #4
9000ec7e:	f003 f835 	bl	90011cec <xTimerGenericCommand>
      stat = osOK;
    } else {
      stat = osErrorResource;
9000ec82:	2801      	cmp	r0, #1
9000ec84:	bf0c      	ite	eq
9000ec86:	2000      	moveq	r0, #0
9000ec88:	f06f 0002 	mvnne.w	r0, #2
    }
  }

  return (stat);
}
9000ec8c:	b002      	add	sp, #8
9000ec8e:	bd10      	pop	{r4, pc}
    stat = osErrorISR;
9000ec90:	f06f 0005 	mvn.w	r0, #5
}
9000ec94:	4770      	bx	lr
    stat = osErrorParameter;
9000ec96:	f06f 0003 	mvn.w	r0, #3
9000ec9a:	e7f7      	b.n	9000ec8c <osTimerStart+0x20>

9000ec9c <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
9000ec9c:	b570      	push	{r4, r5, r6, lr}
9000ec9e:	f3ef 8305 	mrs	r3, IPSR
  const char *name;
  #endif

  hMutex = NULL;

  if (!IS_IRQ()) {
9000eca2:	b9db      	cbnz	r3, 9000ecdc <osMutexNew+0x40>
    if (attr != NULL) {
9000eca4:	4604      	mov	r4, r0
9000eca6:	b1e0      	cbz	r0, 9000ece2 <osMutexNew+0x46>
      type = attr->attr_bits;
9000eca8:	6846      	ldr	r6, [r0, #4]
      rmtx = 1U;
    } else {
      rmtx = 0U;
    }

    if ((type & osMutexRobust) != osMutexRobust) {
9000ecaa:	0733      	lsls	r3, r6, #28
9000ecac:	d416      	bmi.n	9000ecdc <osMutexNew+0x40>
      mem = -1;

      if (attr != NULL) {
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
9000ecae:	6881      	ldr	r1, [r0, #8]
    if ((type & osMutexRecursive) == osMutexRecursive) {
9000ecb0:	f006 0601 	and.w	r6, r6, #1
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
9000ecb4:	68c3      	ldr	r3, [r0, #12]
9000ecb6:	b181      	cbz	r1, 9000ecda <osMutexNew+0x3e>
9000ecb8:	2b4f      	cmp	r3, #79	; 0x4f
9000ecba:	d90f      	bls.n	9000ecdc <osMutexNew+0x40>
        mem = 0;
      }

      if (mem == 1) {
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
9000ecbc:	b31e      	cbz	r6, 9000ed06 <osMutexNew+0x6a>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
9000ecbe:	2004      	movs	r0, #4
9000ecc0:	f001 f852 	bl	9000fd68 <xQueueCreateMutexStatic>
9000ecc4:	4605      	mov	r5, r0
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
9000ecc6:	b14d      	cbz	r5, 9000ecdc <osMutexNew+0x40>
        if (attr != NULL) {
          name = attr->name;
        } else {
          name = NULL;
        }
        vQueueAddToRegistry (hMutex, name);
9000ecc8:	6821      	ldr	r1, [r4, #0]
9000ecca:	4628      	mov	r0, r5
9000eccc:	f001 fd82 	bl	900107d4 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
9000ecd0:	b12e      	cbz	r6, 9000ecde <osMutexNew+0x42>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
9000ecd2:	f045 0501 	orr.w	r5, r5, #1
      }
    }
  }

  return ((osMutexId_t)hMutex);
}
9000ecd6:	4628      	mov	r0, r5
9000ecd8:	bd70      	pop	{r4, r5, r6, pc}
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
9000ecda:	b163      	cbz	r3, 9000ecf6 <osMutexNew+0x5a>
  hMutex = NULL;
9000ecdc:	2500      	movs	r5, #0
}
9000ecde:	4628      	mov	r0, r5
9000ece0:	bd70      	pop	{r4, r5, r6, pc}
              hMutex = xSemaphoreCreateMutex ();
9000ece2:	2001      	movs	r0, #1
9000ece4:	f001 f8b0 	bl	9000fe48 <xQueueCreateMutex>
      if (hMutex != NULL) {
9000ece8:	4605      	mov	r5, r0
9000ecea:	2800      	cmp	r0, #0
9000ecec:	d0f6      	beq.n	9000ecdc <osMutexNew+0x40>
        vQueueAddToRegistry (hMutex, name);
9000ecee:	4621      	mov	r1, r4
9000ecf0:	f001 fd70 	bl	900107d4 <vQueueAddToRegistry>
      if ((hMutex != NULL) && (rmtx != 0U)) {
9000ecf4:	e7f3      	b.n	9000ecde <osMutexNew+0x42>
            if (rmtx != 0U) {
9000ecf6:	b15e      	cbz	r6, 9000ed10 <osMutexNew+0x74>
              hMutex = xSemaphoreCreateRecursiveMutex ();
9000ecf8:	2004      	movs	r0, #4
9000ecfa:	f001 f8a5 	bl	9000fe48 <xQueueCreateMutex>
      if (hMutex != NULL) {
9000ecfe:	4605      	mov	r5, r0
9000ed00:	2800      	cmp	r0, #0
9000ed02:	d1e1      	bne.n	9000ecc8 <osMutexNew+0x2c>
9000ed04:	e7ea      	b.n	9000ecdc <osMutexNew+0x40>
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
9000ed06:	2001      	movs	r0, #1
9000ed08:	f001 f82e 	bl	9000fd68 <xQueueCreateMutexStatic>
9000ed0c:	4605      	mov	r5, r0
9000ed0e:	e7da      	b.n	9000ecc6 <osMutexNew+0x2a>
              hMutex = xSemaphoreCreateMutex ();
9000ed10:	2001      	movs	r0, #1
9000ed12:	f001 f899 	bl	9000fe48 <xQueueCreateMutex>
      if (hMutex != NULL) {
9000ed16:	4605      	mov	r5, r0
9000ed18:	e7d5      	b.n	9000ecc6 <osMutexNew+0x2a>
9000ed1a:	bf00      	nop

9000ed1c <osMutexAcquire>:
osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
9000ed1c:	f020 0201 	bic.w	r2, r0, #1

  rmtx = (uint32_t)mutex_id & 1U;
9000ed20:	f000 0301 	and.w	r3, r0, #1
9000ed24:	f3ef 8005 	mrs	r0, IPSR

  stat = osOK;

  if (IS_IRQ()) {
9000ed28:	b9a8      	cbnz	r0, 9000ed56 <osMutexAcquire+0x3a>
    stat = osErrorISR;
  }
  else if (hMutex == NULL) {
9000ed2a:	b1ba      	cbz	r2, 9000ed5c <osMutexAcquire+0x40>
    stat = osErrorParameter;
  }
  else {
    if (rmtx != 0U) {
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
9000ed2c:	4610      	mov	r0, r2
osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
9000ed2e:	b510      	push	{r4, lr}
9000ed30:	460c      	mov	r4, r1
    if (rmtx != 0U) {
9000ed32:	b953      	cbnz	r3, 9000ed4a <osMutexAcquire+0x2e>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
9000ed34:	f001 fb00 	bl	90010338 <xQueueSemaphoreTake>
9000ed38:	2801      	cmp	r0, #1
9000ed3a:	d00a      	beq.n	9000ed52 <osMutexAcquire+0x36>
          stat = osErrorResource;
9000ed3c:	2c00      	cmp	r4, #0
9000ed3e:	bf14      	ite	ne
9000ed40:	f06f 0001 	mvnne.w	r0, #1
9000ed44:	f06f 0002 	mvneq.w	r0, #2
      }
    }
  }

  return (stat);
}
9000ed48:	bd10      	pop	{r4, pc}
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
9000ed4a:	f001 fc7d 	bl	90010648 <xQueueTakeMutexRecursive>
9000ed4e:	2801      	cmp	r0, #1
9000ed50:	d1f4      	bne.n	9000ed3c <osMutexAcquire+0x20>
  stat = osOK;
9000ed52:	2000      	movs	r0, #0
}
9000ed54:	bd10      	pop	{r4, pc}
    stat = osErrorISR;
9000ed56:	f06f 0005 	mvn.w	r0, #5
9000ed5a:	4770      	bx	lr
    stat = osErrorParameter;
9000ed5c:	f06f 0003 	mvn.w	r0, #3
}
9000ed60:	4770      	bx	lr
9000ed62:	bf00      	nop

9000ed64 <osMutexRelease>:
9000ed64:	f3ef 8205 	mrs	r2, IPSR

  rmtx = (uint32_t)mutex_id & 1U;

  stat = osOK;

  if (IS_IRQ()) {
9000ed68:	b9ba      	cbnz	r2, 9000ed9a <osMutexRelease+0x36>
osStatus_t osMutexRelease (osMutexId_t mutex_id) {
9000ed6a:	b510      	push	{r4, lr}
9000ed6c:	f020 0401 	bic.w	r4, r0, #1
    stat = osErrorISR;
  }
  else if (hMutex == NULL) {
9000ed70:	b1b4      	cbz	r4, 9000eda0 <osMutexRelease+0x3c>
    stat = osErrorParameter;
  }
  else {
    if (rmtx != 0U) {
9000ed72:	f000 0301 	and.w	r3, r0, #1
9000ed76:	b943      	cbnz	r3, 9000ed8a <osMutexRelease+0x26>
        stat = osErrorResource;
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
9000ed78:	461a      	mov	r2, r3
9000ed7a:	4619      	mov	r1, r3
9000ed7c:	4620      	mov	r0, r4
9000ed7e:	f000 fe71 	bl	9000fa64 <xQueueGenericSend>
9000ed82:	2801      	cmp	r0, #1
9000ed84:	d106      	bne.n	9000ed94 <osMutexRelease+0x30>
  stat = osOK;
9000ed86:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
9000ed88:	bd10      	pop	{r4, pc}
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
9000ed8a:	4620      	mov	r0, r4
9000ed8c:	f001 f83c 	bl	9000fe08 <xQueueGiveMutexRecursive>
9000ed90:	2801      	cmp	r0, #1
9000ed92:	d0f8      	beq.n	9000ed86 <osMutexRelease+0x22>
        stat = osErrorResource;
9000ed94:	f06f 0002 	mvn.w	r0, #2
}
9000ed98:	bd10      	pop	{r4, pc}
    stat = osErrorISR;
9000ed9a:	f06f 0005 	mvn.w	r0, #5
}
9000ed9e:	4770      	bx	lr
    stat = osErrorParameter;
9000eda0:	f06f 0003 	mvn.w	r0, #3
}
9000eda4:	bd10      	pop	{r4, pc}
9000eda6:	bf00      	nop

9000eda8 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
9000eda8:	b5f0      	push	{r4, r5, r6, r7, lr}
9000edaa:	b083      	sub	sp, #12
9000edac:	f3ef 8605 	mrs	r6, IPSR
  const char *name;
  #endif

  hSemaphore = NULL;

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
9000edb0:	b98e      	cbnz	r6, 9000edd6 <osSemaphoreNew+0x2e>
9000edb2:	4605      	mov	r5, r0
9000edb4:	b178      	cbz	r0, 9000edd6 <osSemaphoreNew+0x2e>
9000edb6:	4288      	cmp	r0, r1
9000edb8:	460f      	mov	r7, r1
9000edba:	d30c      	bcc.n	9000edd6 <osSemaphoreNew+0x2e>
    mem = -1;

    if (attr != NULL) {
9000edbc:	4614      	mov	r4, r2
9000edbe:	b182      	cbz	r2, 9000ede2 <osSemaphoreNew+0x3a>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
9000edc0:	e9d2 2302 	ldrd	r2, r3, [r2, #8]
9000edc4:	b15a      	cbz	r2, 9000edde <osSemaphoreNew+0x36>
9000edc6:	2b4f      	cmp	r3, #79	; 0x4f
9000edc8:	d905      	bls.n	9000edd6 <osSemaphoreNew+0x2e>
    else {
      mem = 0;
    }

    if (mem != -1) {
      if (max_count == 1U) {
9000edca:	2801      	cmp	r0, #1
9000edcc:	d032      	beq.n	9000ee34 <osSemaphoreNew+0x8c>
        }
      }
      else {
        if (mem == 1) {
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
9000edce:	f000 fda1 	bl	9000f914 <xQueueCreateCountingSemaphoreStatic>
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
9000edd2:	4605      	mov	r5, r0
9000edd4:	b978      	cbnz	r0, 9000edf6 <osSemaphoreNew+0x4e>
  hSemaphore = NULL;
9000edd6:	2500      	movs	r5, #0
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
}
9000edd8:	4628      	mov	r0, r5
9000edda:	b003      	add	sp, #12
9000eddc:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
9000edde:	2b00      	cmp	r3, #0
9000ede0:	d1f9      	bne.n	9000edd6 <osSemaphoreNew+0x2e>
      if (max_count == 1U) {
9000ede2:	2d01      	cmp	r5, #1
9000ede4:	d00f      	beq.n	9000ee06 <osSemaphoreNew+0x5e>
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
9000ede6:	4628      	mov	r0, r5
9000ede8:	4639      	mov	r1, r7
9000edea:	f000 fdf5 	bl	9000f9d8 <xQueueCreateCountingSemaphore>
9000edee:	4605      	mov	r5, r0
      if (hSemaphore != NULL) {
9000edf0:	2d00      	cmp	r5, #0
9000edf2:	d0f0      	beq.n	9000edd6 <osSemaphoreNew+0x2e>
        if (attr != NULL) {
9000edf4:	b104      	cbz	r4, 9000edf8 <osSemaphoreNew+0x50>
          name = attr->name;
9000edf6:	6824      	ldr	r4, [r4, #0]
        vQueueAddToRegistry (hSemaphore, name);
9000edf8:	4628      	mov	r0, r5
9000edfa:	4621      	mov	r1, r4
9000edfc:	f001 fcea 	bl	900107d4 <vQueueAddToRegistry>
}
9000ee00:	4628      	mov	r0, r5
9000ee02:	b003      	add	sp, #12
9000ee04:	bdf0      	pop	{r4, r5, r6, r7, pc}
            hSemaphore = xSemaphoreCreateBinary();
9000ee06:	4628      	mov	r0, r5
9000ee08:	2203      	movs	r2, #3
9000ee0a:	2100      	movs	r1, #0
9000ee0c:	f000 fd40 	bl	9000f890 <xQueueGenericCreate>
9000ee10:	4605      	mov	r5, r0
        if ((hSemaphore != NULL) && (initial_count != 0U)) {
9000ee12:	2d00      	cmp	r5, #0
9000ee14:	d0df      	beq.n	9000edd6 <osSemaphoreNew+0x2e>
9000ee16:	2f00      	cmp	r7, #0
9000ee18:	d0ea      	beq.n	9000edf0 <osSemaphoreNew+0x48>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
9000ee1a:	2300      	movs	r3, #0
9000ee1c:	4628      	mov	r0, r5
9000ee1e:	461a      	mov	r2, r3
9000ee20:	4619      	mov	r1, r3
9000ee22:	f000 fe1f 	bl	9000fa64 <xQueueGenericSend>
9000ee26:	2801      	cmp	r0, #1
9000ee28:	d0e4      	beq.n	9000edf4 <osSemaphoreNew+0x4c>
            vSemaphoreDelete (hSemaphore);
9000ee2a:	4628      	mov	r0, r5
            hSemaphore = NULL;
9000ee2c:	2500      	movs	r5, #0
            vSemaphoreDelete (hSemaphore);
9000ee2e:	f001 fc8b 	bl	90010748 <vQueueDelete>
      if (hSemaphore != NULL) {
9000ee32:	e7d1      	b.n	9000edd8 <osSemaphoreNew+0x30>
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
9000ee34:	4613      	mov	r3, r2
9000ee36:	2203      	movs	r2, #3
9000ee38:	4631      	mov	r1, r6
9000ee3a:	9200      	str	r2, [sp, #0]
9000ee3c:	4632      	mov	r2, r6
9000ee3e:	f000 fcbb 	bl	9000f7b8 <xQueueGenericCreateStatic>
9000ee42:	4605      	mov	r5, r0
9000ee44:	e7e5      	b.n	9000ee12 <osSemaphoreNew+0x6a>
9000ee46:	bf00      	nop

9000ee48 <osSemaphoreAcquire>:
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
9000ee48:	b370      	cbz	r0, 9000eea8 <osSemaphoreAcquire+0x60>
osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
9000ee4a:	b510      	push	{r4, lr}
9000ee4c:	460c      	mov	r4, r1
9000ee4e:	b082      	sub	sp, #8
9000ee50:	f3ef 8305 	mrs	r3, IPSR
    stat = osErrorParameter;
  }
  else if (IS_IRQ()) {
9000ee54:	b1c3      	cbz	r3, 9000ee88 <osSemaphoreAcquire+0x40>
    if (timeout != 0U) {
9000ee56:	bb21      	cbnz	r1, 9000eea2 <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
9000ee58:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
9000ee5a:	9101      	str	r1, [sp, #4]
      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
9000ee5c:	f001 fc14 	bl	90010688 <xQueueReceiveFromISR>
9000ee60:	2801      	cmp	r0, #1
9000ee62:	d11a      	bne.n	9000ee9a <osSemaphoreAcquire+0x52>
        stat = osErrorResource;
      } else {
        portYIELD_FROM_ISR (yield);
9000ee64:	9b01      	ldr	r3, [sp, #4]
9000ee66:	b913      	cbnz	r3, 9000ee6e <osSemaphoreAcquire+0x26>
  stat = osOK;
9000ee68:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
9000ee6a:	b002      	add	sp, #8
9000ee6c:	bd10      	pop	{r4, pc}
        portYIELD_FROM_ISR (yield);
9000ee6e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
9000ee72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
9000ee76:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
9000ee7a:	f3bf 8f4f 	dsb	sy
9000ee7e:	f3bf 8f6f 	isb	sy
  stat = osOK;
9000ee82:	4620      	mov	r0, r4
}
9000ee84:	b002      	add	sp, #8
9000ee86:	bd10      	pop	{r4, pc}
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
9000ee88:	f001 fa56 	bl	90010338 <xQueueSemaphoreTake>
9000ee8c:	2801      	cmp	r0, #1
9000ee8e:	d0eb      	beq.n	9000ee68 <osSemaphoreAcquire+0x20>
      if (timeout != 0U) {
9000ee90:	b11c      	cbz	r4, 9000ee9a <osSemaphoreAcquire+0x52>
        stat = osErrorTimeout;
9000ee92:	f06f 0001 	mvn.w	r0, #1
}
9000ee96:	b002      	add	sp, #8
9000ee98:	bd10      	pop	{r4, pc}
        stat = osErrorResource;
9000ee9a:	f06f 0002 	mvn.w	r0, #2
}
9000ee9e:	b002      	add	sp, #8
9000eea0:	bd10      	pop	{r4, pc}
    stat = osErrorParameter;
9000eea2:	f06f 0003 	mvn.w	r0, #3
9000eea6:	e7e0      	b.n	9000ee6a <osSemaphoreAcquire+0x22>
9000eea8:	f06f 0003 	mvn.w	r0, #3
}
9000eeac:	4770      	bx	lr
9000eeae:	bf00      	nop

9000eeb0 <osSemaphoreRelease>:
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
9000eeb0:	b330      	cbz	r0, 9000ef00 <osSemaphoreRelease+0x50>
osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
9000eeb2:	b510      	push	{r4, lr}
9000eeb4:	b082      	sub	sp, #8
9000eeb6:	f3ef 8305 	mrs	r3, IPSR
    stat = osErrorParameter;
  }
  else if (IS_IRQ()) {
9000eeba:	b1ab      	cbz	r3, 9000eee8 <osSemaphoreRelease+0x38>
    yield = pdFALSE;
9000eebc:	2400      	movs	r4, #0

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
9000eebe:	a901      	add	r1, sp, #4
    yield = pdFALSE;
9000eec0:	9401      	str	r4, [sp, #4]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
9000eec2:	f001 f863 	bl	9000ff8c <xQueueGiveFromISR>
9000eec6:	2801      	cmp	r0, #1
9000eec8:	d117      	bne.n	9000eefa <osSemaphoreRelease+0x4a>
      stat = osErrorResource;
    } else {
      portYIELD_FROM_ISR (yield);
9000eeca:	9b01      	ldr	r3, [sp, #4]
9000eecc:	b193      	cbz	r3, 9000eef4 <osSemaphoreRelease+0x44>
9000eece:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
9000eed2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
9000eed6:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
9000eeda:	f3bf 8f4f 	dsb	sy
9000eede:	f3bf 8f6f 	isb	sy
  stat = osOK;
9000eee2:	4620      	mov	r0, r4
      stat = osErrorResource;
    }
  }

  return (stat);
}
9000eee4:	b002      	add	sp, #8
9000eee6:	bd10      	pop	{r4, pc}
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
9000eee8:	461a      	mov	r2, r3
9000eeea:	4619      	mov	r1, r3
9000eeec:	f000 fdba 	bl	9000fa64 <xQueueGenericSend>
9000eef0:	2801      	cmp	r0, #1
9000eef2:	d102      	bne.n	9000eefa <osSemaphoreRelease+0x4a>
  stat = osOK;
9000eef4:	2000      	movs	r0, #0
}
9000eef6:	b002      	add	sp, #8
9000eef8:	bd10      	pop	{r4, pc}
      stat = osErrorResource;
9000eefa:	f06f 0002 	mvn.w	r0, #2
9000eefe:	e7fa      	b.n	9000eef6 <osSemaphoreRelease+0x46>
    stat = osErrorParameter;
9000ef00:	f06f 0003 	mvn.w	r0, #3
}
9000ef04:	4770      	bx	lr
9000ef06:	bf00      	nop

9000ef08 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
9000ef08:	b5f0      	push	{r4, r5, r6, r7, lr}
9000ef0a:	b083      	sub	sp, #12
9000ef0c:	f3ef 8705 	mrs	r7, IPSR
  const char *name;
  #endif

  hQueue = NULL;

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
9000ef10:	b987      	cbnz	r7, 9000ef34 <osMessageQueueNew+0x2c>
9000ef12:	4605      	mov	r5, r0
9000ef14:	b170      	cbz	r0, 9000ef34 <osMessageQueueNew+0x2c>
9000ef16:	b169      	cbz	r1, 9000ef34 <osMessageQueueNew+0x2c>
    mem = -1;

    if (attr != NULL) {
9000ef18:	4614      	mov	r4, r2
9000ef1a:	b17a      	cbz	r2, 9000ef3c <osMessageQueueNew+0x34>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
9000ef1c:	6893      	ldr	r3, [r2, #8]
9000ef1e:	b1cb      	cbz	r3, 9000ef54 <osMessageQueueNew+0x4c>
9000ef20:	68d2      	ldr	r2, [r2, #12]
9000ef22:	2a4f      	cmp	r2, #79	; 0x4f
9000ef24:	d906      	bls.n	9000ef34 <osMessageQueueNew+0x2c>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
9000ef26:	6922      	ldr	r2, [r4, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
9000ef28:	b122      	cbz	r2, 9000ef34 <osMessageQueueNew+0x2c>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
9000ef2a:	fb01 f505 	mul.w	r5, r1, r5
9000ef2e:	6966      	ldr	r6, [r4, #20]
9000ef30:	42ae      	cmp	r6, r5
9000ef32:	d21f      	bcs.n	9000ef74 <osMessageQueueNew+0x6c>
  hQueue = NULL;
9000ef34:	2500      	movs	r5, #0
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
}
9000ef36:	4628      	mov	r0, r5
9000ef38:	b003      	add	sp, #12
9000ef3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
          hQueue = xQueueCreate (msg_count, msg_size);
9000ef3c:	f000 fca8 	bl	9000f890 <xQueueGenericCreate>
    if (hQueue != NULL) {
9000ef40:	4605      	mov	r5, r0
9000ef42:	2800      	cmp	r0, #0
9000ef44:	d0f6      	beq.n	9000ef34 <osMessageQueueNew+0x2c>
      vQueueAddToRegistry (hQueue, name);
9000ef46:	4628      	mov	r0, r5
9000ef48:	4621      	mov	r1, r4
9000ef4a:	f001 fc43 	bl	900107d4 <vQueueAddToRegistry>
}
9000ef4e:	4628      	mov	r0, r5
9000ef50:	b003      	add	sp, #12
9000ef52:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
9000ef54:	68d3      	ldr	r3, [r2, #12]
9000ef56:	2b00      	cmp	r3, #0
9000ef58:	d1ec      	bne.n	9000ef34 <osMessageQueueNew+0x2c>
9000ef5a:	6913      	ldr	r3, [r2, #16]
9000ef5c:	2b00      	cmp	r3, #0
9000ef5e:	d1e9      	bne.n	9000ef34 <osMessageQueueNew+0x2c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
9000ef60:	6952      	ldr	r2, [r2, #20]
9000ef62:	2a00      	cmp	r2, #0
9000ef64:	d1e6      	bne.n	9000ef34 <osMessageQueueNew+0x2c>
          hQueue = xQueueCreate (msg_count, msg_size);
9000ef66:	f000 fc93 	bl	9000f890 <xQueueGenericCreate>
    if (hQueue != NULL) {
9000ef6a:	4605      	mov	r5, r0
9000ef6c:	2800      	cmp	r0, #0
9000ef6e:	d0e1      	beq.n	9000ef34 <osMessageQueueNew+0x2c>
        name = attr->name;
9000ef70:	6824      	ldr	r4, [r4, #0]
9000ef72:	e7e8      	b.n	9000ef46 <osMessageQueueNew+0x3e>
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
9000ef74:	9700      	str	r7, [sp, #0]
9000ef76:	f000 fc1f 	bl	9000f7b8 <xQueueGenericCreateStatic>
    if (hQueue != NULL) {
9000ef7a:	4605      	mov	r5, r0
9000ef7c:	2800      	cmp	r0, #0
9000ef7e:	d1f7      	bne.n	9000ef70 <osMessageQueueNew+0x68>
9000ef80:	e7d8      	b.n	9000ef34 <osMessageQueueNew+0x2c>
9000ef82:	bf00      	nop

9000ef84 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
9000ef84:	b530      	push	{r4, r5, lr}
9000ef86:	461c      	mov	r4, r3
9000ef88:	b083      	sub	sp, #12
9000ef8a:	f3ef 8305 	mrs	r3, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
9000ef8e:	b30b      	cbz	r3, 9000efd4 <osMessageQueuePut+0x50>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
9000ef90:	3c00      	subs	r4, #0
9000ef92:	bf18      	it	ne
9000ef94:	2401      	movne	r4, #1
9000ef96:	2900      	cmp	r1, #0
9000ef98:	bf08      	it	eq
9000ef9a:	f044 0401 	orreq.w	r4, r4, #1
9000ef9e:	bb7c      	cbnz	r4, 9000f000 <osMessageQueuePut+0x7c>
9000efa0:	fab0 f480 	clz	r4, r0
9000efa4:	0964      	lsrs	r4, r4, #5
9000efa6:	b358      	cbz	r0, 9000f000 <osMessageQueuePut+0x7c>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
9000efa8:	4623      	mov	r3, r4
9000efaa:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
9000efac:	9401      	str	r4, [sp, #4]
      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
9000efae:	f000 ff83 	bl	9000feb8 <xQueueGenericSendFromISR>
9000efb2:	2801      	cmp	r0, #1
9000efb4:	d120      	bne.n	9000eff8 <osMessageQueuePut+0x74>
        stat = osErrorResource;
      } else {
        portYIELD_FROM_ISR (yield);
9000efb6:	9b01      	ldr	r3, [sp, #4]
9000efb8:	b1db      	cbz	r3, 9000eff2 <osMessageQueuePut+0x6e>
9000efba:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
9000efbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
9000efc2:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
9000efc6:	f3bf 8f4f 	dsb	sy
9000efca:	f3bf 8f6f 	isb	sy
  stat = osOK;
9000efce:	4620      	mov	r0, r4
      }
    }
  }

  return (stat);
}
9000efd0:	b003      	add	sp, #12
9000efd2:	bd30      	pop	{r4, r5, pc}
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
9000efd4:	b1a0      	cbz	r0, 9000f000 <osMessageQueuePut+0x7c>
9000efd6:	fab1 f381 	clz	r3, r1
9000efda:	095b      	lsrs	r3, r3, #5
9000efdc:	b181      	cbz	r1, 9000f000 <osMessageQueuePut+0x7c>
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
9000efde:	4622      	mov	r2, r4
9000efe0:	f000 fd40 	bl	9000fa64 <xQueueGenericSend>
9000efe4:	2801      	cmp	r0, #1
9000efe6:	d004      	beq.n	9000eff2 <osMessageQueuePut+0x6e>
        if (timeout != 0U) {
9000efe8:	b134      	cbz	r4, 9000eff8 <osMessageQueuePut+0x74>
          stat = osErrorTimeout;
9000efea:	f06f 0001 	mvn.w	r0, #1
}
9000efee:	b003      	add	sp, #12
9000eff0:	bd30      	pop	{r4, r5, pc}
  stat = osOK;
9000eff2:	2000      	movs	r0, #0
}
9000eff4:	b003      	add	sp, #12
9000eff6:	bd30      	pop	{r4, r5, pc}
          stat = osErrorResource;
9000eff8:	f06f 0002 	mvn.w	r0, #2
}
9000effc:	b003      	add	sp, #12
9000effe:	bd30      	pop	{r4, r5, pc}
      stat = osErrorParameter;
9000f000:	f06f 0003 	mvn.w	r0, #3
9000f004:	e7e4      	b.n	9000efd0 <osMessageQueuePut+0x4c>
9000f006:	bf00      	nop

9000f008 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
9000f008:	b530      	push	{r4, r5, lr}
9000f00a:	461c      	mov	r4, r3
9000f00c:	b083      	sub	sp, #12
9000f00e:	f3ef 8305 	mrs	r3, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
9000f012:	b303      	cbz	r3, 9000f056 <osMessageQueueGet+0x4e>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
9000f014:	3c00      	subs	r4, #0
9000f016:	bf18      	it	ne
9000f018:	2401      	movne	r4, #1
9000f01a:	2900      	cmp	r1, #0
9000f01c:	bf08      	it	eq
9000f01e:	f044 0401 	orreq.w	r4, r4, #1
9000f022:	bb5c      	cbnz	r4, 9000f07c <osMessageQueueGet+0x74>
9000f024:	fab0 f480 	clz	r4, r0
9000f028:	0964      	lsrs	r4, r4, #5
9000f02a:	b338      	cbz	r0, 9000f07c <osMessageQueueGet+0x74>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
9000f02c:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
9000f02e:	9401      	str	r4, [sp, #4]
      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
9000f030:	f001 fb2a 	bl	90010688 <xQueueReceiveFromISR>
9000f034:	2801      	cmp	r0, #1
9000f036:	d11d      	bne.n	9000f074 <osMessageQueueGet+0x6c>
        stat = osErrorResource;
      } else {
        portYIELD_FROM_ISR (yield);
9000f038:	9b01      	ldr	r3, [sp, #4]
9000f03a:	b1c3      	cbz	r3, 9000f06e <osMessageQueueGet+0x66>
9000f03c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
9000f040:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
9000f044:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
9000f048:	f3bf 8f4f 	dsb	sy
9000f04c:	f3bf 8f6f 	isb	sy
  stat = osOK;
9000f050:	4620      	mov	r0, r4
      }
    }
  }

  return (stat);
}
9000f052:	b003      	add	sp, #12
9000f054:	bd30      	pop	{r4, r5, pc}
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
9000f056:	b188      	cbz	r0, 9000f07c <osMessageQueueGet+0x74>
9000f058:	b181      	cbz	r1, 9000f07c <osMessageQueueGet+0x74>
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
9000f05a:	4622      	mov	r2, r4
9000f05c:	f000 ffee 	bl	9001003c <xQueueReceive>
9000f060:	2801      	cmp	r0, #1
9000f062:	d004      	beq.n	9000f06e <osMessageQueueGet+0x66>
        if (timeout != 0U) {
9000f064:	b134      	cbz	r4, 9000f074 <osMessageQueueGet+0x6c>
          stat = osErrorTimeout;
9000f066:	f06f 0001 	mvn.w	r0, #1
}
9000f06a:	b003      	add	sp, #12
9000f06c:	bd30      	pop	{r4, r5, pc}
  stat = osOK;
9000f06e:	2000      	movs	r0, #0
}
9000f070:	b003      	add	sp, #12
9000f072:	bd30      	pop	{r4, r5, pc}
          stat = osErrorResource;
9000f074:	f06f 0002 	mvn.w	r0, #2
}
9000f078:	b003      	add	sp, #12
9000f07a:	bd30      	pop	{r4, r5, pc}
      stat = osErrorParameter;
9000f07c:	f06f 0003 	mvn.w	r0, #3
9000f080:	e7e7      	b.n	9000f052 <osMessageQueueGet+0x4a>
9000f082:	bf00      	nop

9000f084 <vApplicationGetIdleTaskMemory>:
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
9000f084:	4b04      	ldr	r3, [pc, #16]	; (9000f098 <vApplicationGetIdleTaskMemory+0x14>)
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
9000f086:	b410      	push	{r4}
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
9000f088:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
9000f08a:	2380      	movs	r3, #128	; 0x80
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
9000f08c:	4c03      	ldr	r4, [pc, #12]	; (9000f09c <vApplicationGetIdleTaskMemory+0x18>)
9000f08e:	600c      	str	r4, [r1, #0]
}
9000f090:	f85d 4b04 	ldr.w	r4, [sp], #4
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
9000f094:	6013      	str	r3, [r2, #0]
}
9000f096:	4770      	bx	lr
9000f098:	2400dfac 	.word	0x2400dfac
9000f09c:	2400ddac 	.word	0x2400ddac

9000f0a0 <vApplicationGetTimerTaskMemory>:
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
9000f0a0:	4b05      	ldr	r3, [pc, #20]	; (9000f0b8 <vApplicationGetTimerTaskMemory+0x18>)
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
9000f0a2:	b410      	push	{r4}
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
9000f0a4:	6003      	str	r3, [r0, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
9000f0a6:	f44f 7380 	mov.w	r3, #256	; 0x100
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
9000f0aa:	4c04      	ldr	r4, [pc, #16]	; (9000f0bc <vApplicationGetTimerTaskMemory+0x1c>)
9000f0ac:	600c      	str	r4, [r1, #0]
}
9000f0ae:	f85d 4b04 	ldr.w	r4, [sp], #4
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
9000f0b2:	6013      	str	r3, [r2, #0]
}
9000f0b4:	4770      	bx	lr
9000f0b6:	bf00      	nop
9000f0b8:	2400e410 	.word	0x2400e410
9000f0bc:	2400e010 	.word	0x2400e010

9000f0c0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
9000f0c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
9000f0c4:	4605      	mov	r5, r0
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;

	vTaskSuspendAll();
9000f0c6:	f002 f861 	bl	9001118c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
9000f0ca:	4a54      	ldr	r2, [pc, #336]	; (9000f21c <pvPortMalloc+0x15c>)
9000f0cc:	6816      	ldr	r6, [r2, #0]
9000f0ce:	2e00      	cmp	r6, #0
9000f0d0:	d06f      	beq.n	9000f1b2 <pvPortMalloc+0xf2>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
9000f0d2:	4b53      	ldr	r3, [pc, #332]	; (9000f220 <pvPortMalloc+0x160>)
9000f0d4:	681f      	ldr	r7, [r3, #0]
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
9000f0d6:	423d      	tst	r5, r7
9000f0d8:	d12e      	bne.n	9000f138 <pvPortMalloc+0x78>
9000f0da:	b36d      	cbz	r5, 9000f138 <pvPortMalloc+0x78>
			{
				xWantedSize += xHeapStructSize;
9000f0dc:	f105 0408 	add.w	r4, r5, #8

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
9000f0e0:	076d      	lsls	r5, r5, #29
9000f0e2:	d002      	beq.n	9000f0ea <pvPortMalloc+0x2a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
9000f0e4:	f024 0407 	bic.w	r4, r4, #7
9000f0e8:	3408      	adds	r4, #8
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
9000f0ea:	b32c      	cbz	r4, 9000f138 <pvPortMalloc+0x78>
9000f0ec:	f8df c148 	ldr.w	ip, [pc, #328]	; 9000f238 <pvPortMalloc+0x178>
9000f0f0:	f8dc 5000 	ldr.w	r5, [ip]
9000f0f4:	42a5      	cmp	r5, r4
9000f0f6:	d31f      	bcc.n	9000f138 <pvPortMalloc+0x78>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
				pxBlock = xStart.pxNextFreeBlock;
9000f0f8:	484a      	ldr	r0, [pc, #296]	; (9000f224 <pvPortMalloc+0x164>)
9000f0fa:	6803      	ldr	r3, [r0, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
9000f0fc:	e003      	b.n	9000f106 <pvPortMalloc+0x46>
9000f0fe:	681a      	ldr	r2, [r3, #0]
9000f100:	b122      	cbz	r2, 9000f10c <pvPortMalloc+0x4c>
9000f102:	4618      	mov	r0, r3
9000f104:	4613      	mov	r3, r2
9000f106:	6859      	ldr	r1, [r3, #4]
9000f108:	42a1      	cmp	r1, r4
9000f10a:	d3f8      	bcc.n	9000f0fe <pvPortMalloc+0x3e>
					pxBlock = pxBlock->pxNextFreeBlock;
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
9000f10c:	42b3      	cmp	r3, r6
9000f10e:	d013      	beq.n	9000f138 <pvPortMalloc+0x78>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
9000f110:	4698      	mov	r8, r3
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
9000f112:	1b0a      	subs	r2, r1, r4
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
9000f114:	f858 eb08 	ldr.w	lr, [r8], #8
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
9000f118:	2a10      	cmp	r2, #16
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
9000f11a:	f8c0 e000 	str.w	lr, [r0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
9000f11e:	d929      	bls.n	9000f174 <pvPortMalloc+0xb4>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
9000f120:	1919      	adds	r1, r3, r4
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
9000f122:	0748      	lsls	r0, r1, #29
9000f124:	d00f      	beq.n	9000f146 <pvPortMalloc+0x86>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
9000f126:	f04f 0350 	mov.w	r3, #80	; 0x50
9000f12a:	f383 8811 	msr	BASEPRI, r3
9000f12e:	f3bf 8f6f 	isb	sy
9000f132:	f3bf 8f4f 	dsb	sy
9000f136:	e7fe      	b.n	9000f136 <pvPortMalloc+0x76>
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
9000f138:	f04f 0800 	mov.w	r8, #0
9000f13c:	f002 f82e 	bl	9001119c <xTaskResumeAll>
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
	return pvReturn;
}
9000f140:	4640      	mov	r0, r8
9000f142:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
9000f146:	604a      	str	r2, [r1, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
9000f148:	4a36      	ldr	r2, [pc, #216]	; (9000f224 <pvPortMalloc+0x164>)
						pxBlock->xBlockSize = xWantedSize;
9000f14a:	605c      	str	r4, [r3, #4]
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
9000f14c:	4614      	mov	r4, r2
9000f14e:	6812      	ldr	r2, [r2, #0]
9000f150:	4291      	cmp	r1, r2
9000f152:	d8fb      	bhi.n	9000f14c <pvPortMalloc+0x8c>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
9000f154:	6860      	ldr	r0, [r4, #4]
9000f156:	eb04 0e00 	add.w	lr, r4, r0
9000f15a:	4571      	cmp	r1, lr
9000f15c:	d04a      	beq.n	9000f1f4 <pvPortMalloc+0x134>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
9000f15e:	f8d1 e004 	ldr.w	lr, [r1, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
9000f162:	eb01 000e 	add.w	r0, r1, lr
9000f166:	4282      	cmp	r2, r0
9000f168:	d050      	beq.n	9000f20c <pvPortMalloc+0x14c>

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
9000f16a:	428c      	cmp	r4, r1
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
9000f16c:	600a      	str	r2, [r1, #0]
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
9000f16e:	bf18      	it	ne
9000f170:	6021      	strne	r1, [r4, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
9000f172:	6859      	ldr	r1, [r3, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
9000f174:	4a2c      	ldr	r2, [pc, #176]	; (9000f228 <pvPortMalloc+0x168>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
9000f176:	1a6d      	subs	r5, r5, r1
					pxBlock->xBlockSize |= xBlockAllocatedBit;
9000f178:	4339      	orrs	r1, r7
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
9000f17a:	6810      	ldr	r0, [r2, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
9000f17c:	f8cc 5000 	str.w	r5, [ip]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
9000f180:	4285      	cmp	r5, r0
					pxBlock->pxNextFreeBlock = NULL;
9000f182:	f04f 0000 	mov.w	r0, #0
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
9000f186:	bf38      	it	cc
9000f188:	6015      	strcc	r5, [r2, #0]
					xNumberOfSuccessfulAllocations++;
9000f18a:	4a28      	ldr	r2, [pc, #160]	; (9000f22c <pvPortMalloc+0x16c>)
					pxBlock->pxNextFreeBlock = NULL;
9000f18c:	e9c3 0100 	strd	r0, r1, [r3]
					xNumberOfSuccessfulAllocations++;
9000f190:	6813      	ldr	r3, [r2, #0]
9000f192:	3301      	adds	r3, #1
9000f194:	6013      	str	r3, [r2, #0]
	( void ) xTaskResumeAll();
9000f196:	f002 f801 	bl	9001119c <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
9000f19a:	f018 0f07 	tst.w	r8, #7
9000f19e:	d0cf      	beq.n	9000f140 <pvPortMalloc+0x80>
9000f1a0:	f04f 0350 	mov.w	r3, #80	; 0x50
9000f1a4:	f383 8811 	msr	BASEPRI, r3
9000f1a8:	f3bf 8f6f 	isb	sy
9000f1ac:	f3bf 8f4f 	dsb	sy
9000f1b0:	e7fe      	b.n	9000f1b0 <pvPortMalloc+0xf0>
	uxAddress = ( size_t ) ucHeap;
9000f1b2:	4b1f      	ldr	r3, [pc, #124]	; (9000f230 <pvPortMalloc+0x170>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
9000f1b4:	075e      	lsls	r6, r3, #29
9000f1b6:	d117      	bne.n	9000f1e8 <pvPortMalloc+0x128>
9000f1b8:	4e1e      	ldr	r6, [pc, #120]	; (9000f234 <pvPortMalloc+0x174>)
9000f1ba:	4619      	mov	r1, r3
	uxAddress -= xHeapStructSize;
9000f1bc:	3e08      	subs	r6, #8
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
9000f1be:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
9000f1c2:	4818      	ldr	r0, [pc, #96]	; (9000f224 <pvPortMalloc+0x164>)
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
9000f1c4:	f026 0607 	bic.w	r6, r6, #7
	pxEnd = ( void * ) uxAddress;
9000f1c8:	6016      	str	r6, [r2, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
9000f1ca:	1af3      	subs	r3, r6, r3
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
9000f1cc:	4a16      	ldr	r2, [pc, #88]	; (9000f228 <pvPortMalloc+0x168>)
9000f1ce:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
9000f1d0:	4a19      	ldr	r2, [pc, #100]	; (9000f238 <pvPortMalloc+0x178>)
9000f1d2:	6013      	str	r3, [r2, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
9000f1d4:	4a12      	ldr	r2, [pc, #72]	; (9000f220 <pvPortMalloc+0x160>)
9000f1d6:	6017      	str	r7, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
9000f1d8:	2200      	movs	r2, #0
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
9000f1da:	e9c0 1200 	strd	r1, r2, [r0]
	pxEnd->pxNextFreeBlock = NULL;
9000f1de:	e9c6 2200 	strd	r2, r2, [r6]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
9000f1e2:	e9c1 6300 	strd	r6, r3, [r1]
}
9000f1e6:	e776      	b.n	9000f0d6 <pvPortMalloc+0x16>
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
9000f1e8:	3307      	adds	r3, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
9000f1ea:	4e12      	ldr	r6, [pc, #72]	; (9000f234 <pvPortMalloc+0x174>)
	pucAlignedHeap = ( uint8_t * ) uxAddress;
9000f1ec:	f023 0107 	bic.w	r1, r3, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
9000f1f0:	460b      	mov	r3, r1
9000f1f2:	e7e3      	b.n	9000f1bc <pvPortMalloc+0xfc>
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
9000f1f4:	6849      	ldr	r1, [r1, #4]
9000f1f6:	eb00 0e01 	add.w	lr, r0, r1
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
9000f1fa:	eb04 010e 	add.w	r1, r4, lr
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
9000f1fe:	f8c4 e004 	str.w	lr, [r4, #4]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
9000f202:	428a      	cmp	r2, r1
9000f204:	d001      	beq.n	9000f20a <pvPortMalloc+0x14a>
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
9000f206:	6022      	str	r2, [r4, #0]
	if( pxIterator != pxBlockToInsert )
9000f208:	e7b3      	b.n	9000f172 <pvPortMalloc+0xb2>
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
9000f20a:	4621      	mov	r1, r4
		if( pxIterator->pxNextFreeBlock != pxEnd )
9000f20c:	42b2      	cmp	r2, r6
9000f20e:	d0ac      	beq.n	9000f16a <pvPortMalloc+0xaa>
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
9000f210:	6850      	ldr	r0, [r2, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
9000f212:	6812      	ldr	r2, [r2, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
9000f214:	4470      	add	r0, lr
9000f216:	6048      	str	r0, [r1, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
9000f218:	e7a7      	b.n	9000f16a <pvPortMalloc+0xaa>
9000f21a:	bf00      	nop
9000f21c:	2400e470 	.word	0x2400e470
9000f220:	24026b14 	.word	0x24026b14
9000f224:	24026b28 	.word	0x24026b28
9000f228:	24026b1c 	.word	0x24026b1c
9000f22c:	24026b20 	.word	0x24026b20
9000f230:	2400e474 	.word	0x2400e474
9000f234:	24026b14 	.word	0x24026b14
9000f238:	24026b18 	.word	0x24026b18

9000f23c <vPortFree>:
	if( pv != NULL )
9000f23c:	b1d0      	cbz	r0, 9000f274 <vPortFree+0x38>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
9000f23e:	4a2c      	ldr	r2, [pc, #176]	; (9000f2f0 <vPortFree+0xb4>)
9000f240:	f850 3c04 	ldr.w	r3, [r0, #-4]
9000f244:	6812      	ldr	r2, [r2, #0]
9000f246:	4213      	tst	r3, r2
9000f248:	d00b      	beq.n	9000f262 <vPortFree+0x26>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
9000f24a:	f850 1c08 	ldr.w	r1, [r0, #-8]
9000f24e:	b191      	cbz	r1, 9000f276 <vPortFree+0x3a>
9000f250:	f04f 0350 	mov.w	r3, #80	; 0x50
9000f254:	f383 8811 	msr	BASEPRI, r3
9000f258:	f3bf 8f6f 	isb	sy
9000f25c:	f3bf 8f4f 	dsb	sy
9000f260:	e7fe      	b.n	9000f260 <vPortFree+0x24>
9000f262:	f04f 0350 	mov.w	r3, #80	; 0x50
9000f266:	f383 8811 	msr	BASEPRI, r3
9000f26a:	f3bf 8f6f 	isb	sy
9000f26e:	f3bf 8f4f 	dsb	sy
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
9000f272:	e7fe      	b.n	9000f272 <vPortFree+0x36>
9000f274:	4770      	bx	lr
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
9000f276:	ea23 0302 	bic.w	r3, r3, r2
{
9000f27a:	b530      	push	{r4, r5, lr}
9000f27c:	b083      	sub	sp, #12
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
9000f27e:	f840 3c04 	str.w	r3, [r0, #-4]
		puc -= xHeapStructSize;
9000f282:	f1a0 0408 	sub.w	r4, r0, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
9000f286:	4d1b      	ldr	r5, [pc, #108]	; (9000f2f4 <vPortFree+0xb8>)
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
9000f288:	9001      	str	r0, [sp, #4]
				vTaskSuspendAll();
9000f28a:	f001 ff7f 	bl	9001118c <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
9000f28e:	9801      	ldr	r0, [sp, #4]
9000f290:	682a      	ldr	r2, [r5, #0]
9000f292:	f850 1c04 	ldr.w	r1, [r0, #-4]
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
9000f296:	4b18      	ldr	r3, [pc, #96]	; (9000f2f8 <vPortFree+0xbc>)
					xFreeBytesRemaining += pxLink->xBlockSize;
9000f298:	440a      	add	r2, r1
9000f29a:	602a      	str	r2, [r5, #0]
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
9000f29c:	461a      	mov	r2, r3
9000f29e:	681b      	ldr	r3, [r3, #0]
9000f2a0:	429c      	cmp	r4, r3
9000f2a2:	d8fb      	bhi.n	9000f29c <vPortFree+0x60>
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
9000f2a4:	6850      	ldr	r0, [r2, #4]
9000f2a6:	eb02 0c00 	add.w	ip, r2, r0
9000f2aa:	4564      	cmp	r4, ip
9000f2ac:	d00f      	beq.n	9000f2ce <vPortFree+0x92>
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
9000f2ae:	1860      	adds	r0, r4, r1
9000f2b0:	4283      	cmp	r3, r0
9000f2b2:	d014      	beq.n	9000f2de <vPortFree+0xa2>
	if( pxIterator != pxBlockToInsert )
9000f2b4:	42a2      	cmp	r2, r4
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
9000f2b6:	6023      	str	r3, [r4, #0]
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
9000f2b8:	bf18      	it	ne
9000f2ba:	6014      	strne	r4, [r2, #0]
					xNumberOfSuccessfulFrees++;
9000f2bc:	4a0f      	ldr	r2, [pc, #60]	; (9000f2fc <vPortFree+0xc0>)
9000f2be:	6813      	ldr	r3, [r2, #0]
9000f2c0:	3301      	adds	r3, #1
9000f2c2:	6013      	str	r3, [r2, #0]
}
9000f2c4:	b003      	add	sp, #12
9000f2c6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
				( void ) xTaskResumeAll();
9000f2ca:	f001 bf67 	b.w	9001119c <xTaskResumeAll>
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
9000f2ce:	4401      	add	r1, r0
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
9000f2d0:	1850      	adds	r0, r2, r1
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
9000f2d2:	6051      	str	r1, [r2, #4]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
9000f2d4:	4283      	cmp	r3, r0
9000f2d6:	d001      	beq.n	9000f2dc <vPortFree+0xa0>
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
9000f2d8:	6013      	str	r3, [r2, #0]
	if( pxIterator != pxBlockToInsert )
9000f2da:	e7ef      	b.n	9000f2bc <vPortFree+0x80>
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
9000f2dc:	4614      	mov	r4, r2
		if( pxIterator->pxNextFreeBlock != pxEnd )
9000f2de:	4808      	ldr	r0, [pc, #32]	; (9000f300 <vPortFree+0xc4>)
9000f2e0:	6800      	ldr	r0, [r0, #0]
9000f2e2:	4283      	cmp	r3, r0
9000f2e4:	d0e6      	beq.n	9000f2b4 <vPortFree+0x78>
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
9000f2e6:	e9d3 3000 	ldrd	r3, r0, [r3]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
9000f2ea:	4401      	add	r1, r0
9000f2ec:	6061      	str	r1, [r4, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
9000f2ee:	e7e1      	b.n	9000f2b4 <vPortFree+0x78>
9000f2f0:	24026b14 	.word	0x24026b14
9000f2f4:	24026b18 	.word	0x24026b18
9000f2f8:	24026b28 	.word	0x24026b28
9000f2fc:	24026b24 	.word	0x24026b24
9000f300:	2400e470 	.word	0x2400e470

9000f304 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
9000f304:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
9000f308:	f04f 31ff 	mov.w	r1, #4294967295
	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
9000f30c:	2200      	movs	r2, #0
	pxList->xListEnd.xItemValue = portMAX_DELAY;
9000f30e:	6081      	str	r1, [r0, #8]
	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
9000f310:	6002      	str	r2, [r0, #0]
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
9000f312:	6043      	str	r3, [r0, #4]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
9000f314:	e9c0 3303 	strd	r3, r3, [r0, #12]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
9000f318:	4770      	bx	lr
9000f31a:	bf00      	nop

9000f31c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
9000f31c:	2300      	movs	r3, #0
9000f31e:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
9000f320:	4770      	bx	lr
9000f322:	bf00      	nop

9000f324 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
9000f324:	6843      	ldr	r3, [r0, #4]
	pxIndex->pxPrevious = pxNewListItem;

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
9000f326:	6802      	ldr	r2, [r0, #0]
{
9000f328:	b410      	push	{r4}
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
9000f32a:	689c      	ldr	r4, [r3, #8]
	( pxList->uxNumberOfItems )++;
9000f32c:	3201      	adds	r2, #1
	pxNewListItem->pxNext = pxIndex;
9000f32e:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
9000f330:	608c      	str	r4, [r1, #8]
	pxIndex->pxPrevious->pxNext = pxNewListItem;
9000f332:	689c      	ldr	r4, [r3, #8]
9000f334:	6061      	str	r1, [r4, #4]
	pxIndex->pxPrevious = pxNewListItem;
9000f336:	6099      	str	r1, [r3, #8]
}
9000f338:	f85d 4b04 	ldr.w	r4, [sp], #4
	pxNewListItem->pxContainer = pxList;
9000f33c:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
9000f33e:	6002      	str	r2, [r0, #0]
}
9000f340:	4770      	bx	lr
9000f342:	bf00      	nop

9000f344 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
9000f344:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
9000f346:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
9000f348:	1c6b      	adds	r3, r5, #1
9000f34a:	d010      	beq.n	9000f36e <vListInsert+0x2a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
9000f34c:	f100 0308 	add.w	r3, r0, #8
9000f350:	461c      	mov	r4, r3
9000f352:	685b      	ldr	r3, [r3, #4]
9000f354:	681a      	ldr	r2, [r3, #0]
9000f356:	42aa      	cmp	r2, r5
9000f358:	d9fa      	bls.n	9000f350 <vListInsert+0xc>

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
9000f35a:	6802      	ldr	r2, [r0, #0]
	pxNewListItem->pxNext = pxIterator->pxNext;
9000f35c:	604b      	str	r3, [r1, #4]
	( pxList->uxNumberOfItems )++;
9000f35e:	3201      	adds	r2, #1
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
9000f360:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
9000f362:	608c      	str	r4, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
9000f364:	6061      	str	r1, [r4, #4]
	pxNewListItem->pxContainer = pxList;
9000f366:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
9000f368:	6002      	str	r2, [r0, #0]
}
9000f36a:	bc30      	pop	{r4, r5}
9000f36c:	4770      	bx	lr
		pxIterator = pxList->xListEnd.pxPrevious;
9000f36e:	6904      	ldr	r4, [r0, #16]
	pxNewListItem->pxNext = pxIterator->pxNext;
9000f370:	6863      	ldr	r3, [r4, #4]
9000f372:	e7f2      	b.n	9000f35a <vListInsert+0x16>

9000f374 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
9000f374:	6903      	ldr	r3, [r0, #16]
{
9000f376:	b410      	push	{r4}

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
9000f378:	685c      	ldr	r4, [r3, #4]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
9000f37a:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
	if( pxList->pxIndex == pxItemToRemove )
9000f37e:	4284      	cmp	r4, r0

	pxItemToRemove->pxContainer = NULL;
	( pxList->uxNumberOfItems )--;

	return pxList->uxNumberOfItems;
}
9000f380:	f85d 4b04 	ldr.w	r4, [sp], #4
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
9000f384:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
9000f386:	6051      	str	r1, [r2, #4]
	pxItemToRemove->pxContainer = NULL;
9000f388:	f04f 0100 	mov.w	r1, #0
		pxList->pxIndex = pxItemToRemove->pxPrevious;
9000f38c:	bf08      	it	eq
9000f38e:	605a      	streq	r2, [r3, #4]
	( pxList->uxNumberOfItems )--;
9000f390:	681a      	ldr	r2, [r3, #0]
	pxItemToRemove->pxContainer = NULL;
9000f392:	6101      	str	r1, [r0, #16]
	( pxList->uxNumberOfItems )--;
9000f394:	3a01      	subs	r2, #1
9000f396:	601a      	str	r2, [r3, #0]
	return pxList->uxNumberOfItems;
9000f398:	6818      	ldr	r0, [r3, #0]
}
9000f39a:	4770      	bx	lr

9000f39c <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
9000f39c:	4808      	ldr	r0, [pc, #32]	; (9000f3c0 <prvPortStartFirstTask+0x24>)
9000f39e:	6800      	ldr	r0, [r0, #0]
9000f3a0:	6800      	ldr	r0, [r0, #0]
9000f3a2:	f380 8808 	msr	MSP, r0
9000f3a6:	f04f 0000 	mov.w	r0, #0
9000f3aa:	f380 8814 	msr	CONTROL, r0
9000f3ae:	b662      	cpsie	i
9000f3b0:	b661      	cpsie	f
9000f3b2:	f3bf 8f4f 	dsb	sy
9000f3b6:	f3bf 8f6f 	isb	sy
9000f3ba:	df00      	svc	0
9000f3bc:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
9000f3be:	0000      	.short	0x0000
9000f3c0:	e000ed08 	.word	0xe000ed08

9000f3c4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
9000f3c4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 9000f3d4 <vPortEnableVFP+0x10>
9000f3c8:	6801      	ldr	r1, [r0, #0]
9000f3ca:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
9000f3ce:	6001      	str	r1, [r0, #0]
9000f3d0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
9000f3d2:	0000      	.short	0x0000
9000f3d4:	e000ed88 	.word	0xe000ed88

9000f3d8 <prvTaskExitError>:
	configASSERT( uxCriticalNesting == ~0UL );
9000f3d8:	4b0e      	ldr	r3, [pc, #56]	; (9000f414 <prvTaskExitError+0x3c>)
{
9000f3da:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
9000f3dc:	2200      	movs	r2, #0
	configASSERT( uxCriticalNesting == ~0UL );
9000f3de:	681b      	ldr	r3, [r3, #0]
volatile uint32_t ulDummy = 0;
9000f3e0:	9201      	str	r2, [sp, #4]
	configASSERT( uxCriticalNesting == ~0UL );
9000f3e2:	3301      	adds	r3, #1
9000f3e4:	d008      	beq.n	9000f3f8 <prvTaskExitError+0x20>
9000f3e6:	f04f 0350 	mov.w	r3, #80	; 0x50
9000f3ea:	f383 8811 	msr	BASEPRI, r3
9000f3ee:	f3bf 8f6f 	isb	sy
9000f3f2:	f3bf 8f4f 	dsb	sy
9000f3f6:	e7fe      	b.n	9000f3f6 <prvTaskExitError+0x1e>
9000f3f8:	f04f 0350 	mov.w	r3, #80	; 0x50
9000f3fc:	f383 8811 	msr	BASEPRI, r3
9000f400:	f3bf 8f6f 	isb	sy
9000f404:	f3bf 8f4f 	dsb	sy
	while( ulDummy == 0 )
9000f408:	9b01      	ldr	r3, [sp, #4]
9000f40a:	2b00      	cmp	r3, #0
9000f40c:	d0fc      	beq.n	9000f408 <prvTaskExitError+0x30>
}
9000f40e:	b002      	add	sp, #8
9000f410:	4770      	bx	lr
9000f412:	bf00      	nop
9000f414:	24000064 	.word	0x24000064

9000f418 <pxPortInitialiseStack>:
{
9000f418:	4603      	mov	r3, r0
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
9000f41a:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
9000f41e:	4809      	ldr	r0, [pc, #36]	; (9000f444 <pxPortInitialiseStack+0x2c>)
{
9000f420:	b410      	push	{r4}
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
9000f422:	f04f 7480 	mov.w	r4, #16777216	; 0x1000000
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
9000f426:	f843 0c0c 	str.w	r0, [r3, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
9000f42a:	f843 2c20 	str.w	r2, [r3, #-32]
}
9000f42e:	f1a3 0044 	sub.w	r0, r3, #68	; 0x44
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
9000f432:	e943 1402 	strd	r1, r4, [r3, #-8]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
9000f436:	f06f 0102 	mvn.w	r1, #2
}
9000f43a:	f85d 4b04 	ldr.w	r4, [sp], #4
	*pxTopOfStack = portINITIAL_EXC_RETURN;
9000f43e:	f843 1c24 	str.w	r1, [r3, #-36]
}
9000f442:	4770      	bx	lr
9000f444:	9000f3d9 	.word	0x9000f3d9
	...

9000f450 <SVC_Handler>:
	__asm volatile (
9000f450:	4b07      	ldr	r3, [pc, #28]	; (9000f470 <pxCurrentTCBConst2>)
9000f452:	6819      	ldr	r1, [r3, #0]
9000f454:	6808      	ldr	r0, [r1, #0]
9000f456:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9000f45a:	f380 8809 	msr	PSP, r0
9000f45e:	f3bf 8f6f 	isb	sy
9000f462:	f04f 0000 	mov.w	r0, #0
9000f466:	f380 8811 	msr	BASEPRI, r0
9000f46a:	4770      	bx	lr
9000f46c:	f3af 8000 	nop.w

9000f470 <pxCurrentTCBConst2>:
9000f470:	24026b78 	.word	0x24026b78

9000f474 <vPortEnterCritical>:
9000f474:	f04f 0350 	mov.w	r3, #80	; 0x50
9000f478:	f383 8811 	msr	BASEPRI, r3
9000f47c:	f3bf 8f6f 	isb	sy
9000f480:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
9000f484:	4a0b      	ldr	r2, [pc, #44]	; (9000f4b4 <vPortEnterCritical+0x40>)
9000f486:	6813      	ldr	r3, [r2, #0]
9000f488:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
9000f48a:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
9000f48c:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
9000f48e:	d000      	beq.n	9000f492 <vPortEnterCritical+0x1e>
}
9000f490:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
9000f492:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
9000f496:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	; 0xd04
9000f49a:	b2db      	uxtb	r3, r3
9000f49c:	2b00      	cmp	r3, #0
9000f49e:	d0f7      	beq.n	9000f490 <vPortEnterCritical+0x1c>
9000f4a0:	f04f 0350 	mov.w	r3, #80	; 0x50
9000f4a4:	f383 8811 	msr	BASEPRI, r3
9000f4a8:	f3bf 8f6f 	isb	sy
9000f4ac:	f3bf 8f4f 	dsb	sy
9000f4b0:	e7fe      	b.n	9000f4b0 <vPortEnterCritical+0x3c>
9000f4b2:	bf00      	nop
9000f4b4:	24000064 	.word	0x24000064

9000f4b8 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
9000f4b8:	4a08      	ldr	r2, [pc, #32]	; (9000f4dc <vPortExitCritical+0x24>)
9000f4ba:	6813      	ldr	r3, [r2, #0]
9000f4bc:	b943      	cbnz	r3, 9000f4d0 <vPortExitCritical+0x18>
9000f4be:	f04f 0350 	mov.w	r3, #80	; 0x50
9000f4c2:	f383 8811 	msr	BASEPRI, r3
9000f4c6:	f3bf 8f6f 	isb	sy
9000f4ca:	f3bf 8f4f 	dsb	sy
9000f4ce:	e7fe      	b.n	9000f4ce <vPortExitCritical+0x16>
	uxCriticalNesting--;
9000f4d0:	3b01      	subs	r3, #1
9000f4d2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
9000f4d4:	b90b      	cbnz	r3, 9000f4da <vPortExitCritical+0x22>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
9000f4d6:	f383 8811 	msr	BASEPRI, r3
}
9000f4da:	4770      	bx	lr
9000f4dc:	24000064 	.word	0x24000064

9000f4e0 <PendSV_Handler>:
	__asm volatile
9000f4e0:	f3ef 8009 	mrs	r0, PSP
9000f4e4:	f3bf 8f6f 	isb	sy
9000f4e8:	4b15      	ldr	r3, [pc, #84]	; (9000f540 <pxCurrentTCBConst>)
9000f4ea:	681a      	ldr	r2, [r3, #0]
9000f4ec:	f01e 0f10 	tst.w	lr, #16
9000f4f0:	bf08      	it	eq
9000f4f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
9000f4f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9000f4fa:	6010      	str	r0, [r2, #0]
9000f4fc:	e92d 0009 	stmdb	sp!, {r0, r3}
9000f500:	f04f 0050 	mov.w	r0, #80	; 0x50
9000f504:	f380 8811 	msr	BASEPRI, r0
9000f508:	f3bf 8f4f 	dsb	sy
9000f50c:	f3bf 8f6f 	isb	sy
9000f510:	f001 fe80 	bl	90011214 <vTaskSwitchContext>
9000f514:	f04f 0000 	mov.w	r0, #0
9000f518:	f380 8811 	msr	BASEPRI, r0
9000f51c:	bc09      	pop	{r0, r3}
9000f51e:	6819      	ldr	r1, [r3, #0]
9000f520:	6808      	ldr	r0, [r1, #0]
9000f522:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9000f526:	f01e 0f10 	tst.w	lr, #16
9000f52a:	bf08      	it	eq
9000f52c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
9000f530:	f380 8809 	msr	PSP, r0
9000f534:	f3bf 8f6f 	isb	sy
9000f538:	4770      	bx	lr
9000f53a:	bf00      	nop
9000f53c:	f3af 8000 	nop.w

9000f540 <pxCurrentTCBConst>:
9000f540:	24026b78 	.word	0x24026b78

9000f544 <xPortSysTickHandler>:
{
9000f544:	b508      	push	{r3, lr}
	__asm volatile
9000f546:	f04f 0350 	mov.w	r3, #80	; 0x50
9000f54a:	f383 8811 	msr	BASEPRI, r3
9000f54e:	f3bf 8f6f 	isb	sy
9000f552:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
9000f556:	f001 fe37 	bl	900111c8 <xTaskIncrementTick>
9000f55a:	b128      	cbz	r0, 9000f568 <xPortSysTickHandler+0x24>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
9000f55c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
9000f560:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
9000f564:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
	__asm volatile
9000f568:	2300      	movs	r3, #0
9000f56a:	f383 8811 	msr	BASEPRI, r3
}
9000f56e:	bd08      	pop	{r3, pc}

9000f570 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
9000f570:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
9000f574:	2300      	movs	r3, #0
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
9000f576:	4806      	ldr	r0, [pc, #24]	; (9000f590 <vPortSetupTimerInterrupt+0x20>)
	portNVIC_SYSTICK_CTRL_REG = 0UL;
9000f578:	6113      	str	r3, [r2, #16]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
9000f57a:	4906      	ldr	r1, [pc, #24]	; (9000f594 <vPortSetupTimerInterrupt+0x24>)
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
9000f57c:	6193      	str	r3, [r2, #24]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
9000f57e:	6803      	ldr	r3, [r0, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
9000f580:	2007      	movs	r0, #7
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
9000f582:	fba1 1303 	umull	r1, r3, r1, r3
9000f586:	099b      	lsrs	r3, r3, #6
9000f588:	3b01      	subs	r3, #1
9000f58a:	6153      	str	r3, [r2, #20]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
9000f58c:	6110      	str	r0, [r2, #16]
}
9000f58e:	4770      	bx	lr
9000f590:	24000054 	.word	0x24000054
9000f594:	10624dd3 	.word	0x10624dd3

9000f598 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
9000f598:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
9000f59c:	4a48      	ldr	r2, [pc, #288]	; (9000f6c0 <xPortStartScheduler+0x128>)
9000f59e:	f8d3 1d00 	ldr.w	r1, [r3, #3328]	; 0xd00
9000f5a2:	4291      	cmp	r1, r2
9000f5a4:	d041      	beq.n	9000f62a <xPortStartScheduler+0x92>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
9000f5a6:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
9000f5aa:	4b46      	ldr	r3, [pc, #280]	; (9000f6c4 <xPortStartScheduler+0x12c>)
9000f5ac:	429a      	cmp	r2, r3
9000f5ae:	d033      	beq.n	9000f618 <xPortStartScheduler+0x80>
		ulOriginalPriority = *pucFirstUserPriorityRegister;
9000f5b0:	4b45      	ldr	r3, [pc, #276]	; (9000f6c8 <xPortStartScheduler+0x130>)
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
9000f5b2:	20ff      	movs	r0, #255	; 0xff
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
9000f5b4:	4945      	ldr	r1, [pc, #276]	; (9000f6cc <xPortStartScheduler+0x134>)
{
9000f5b6:	b570      	push	{r4, r5, r6, lr}
		ulOriginalPriority = *pucFirstUserPriorityRegister;
9000f5b8:	781a      	ldrb	r2, [r3, #0]
{
9000f5ba:	b084      	sub	sp, #16
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
9000f5bc:	4c44      	ldr	r4, [pc, #272]	; (9000f6d0 <xPortStartScheduler+0x138>)
		ulOriginalPriority = *pucFirstUserPriorityRegister;
9000f5be:	b2d2      	uxtb	r2, r2
9000f5c0:	9202      	str	r2, [sp, #8]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
9000f5c2:	2207      	movs	r2, #7
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
9000f5c4:	7018      	strb	r0, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
9000f5c6:	781b      	ldrb	r3, [r3, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
9000f5c8:	6022      	str	r2, [r4, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
9000f5ca:	b2db      	uxtb	r3, r3
9000f5cc:	f88d 3007 	strb.w	r3, [sp, #7]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
9000f5d0:	f89d 3007 	ldrb.w	r3, [sp, #7]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
9000f5d4:	f89d 2007 	ldrb.w	r2, [sp, #7]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
9000f5d8:	f003 0350 	and.w	r3, r3, #80	; 0x50
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
9000f5dc:	0610      	lsls	r0, r2, #24
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
9000f5de:	700b      	strb	r3, [r1, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
9000f5e0:	d511      	bpl.n	9000f606 <xPortStartScheduler+0x6e>
9000f5e2:	2206      	movs	r2, #6
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
9000f5e4:	f89d 3007 	ldrb.w	r3, [sp, #7]
9000f5e8:	4610      	mov	r0, r2
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
9000f5ea:	3a01      	subs	r2, #1
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
9000f5ec:	005b      	lsls	r3, r3, #1
9000f5ee:	b2db      	uxtb	r3, r3
9000f5f0:	f88d 3007 	strb.w	r3, [sp, #7]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
9000f5f4:	f89d 1007 	ldrb.w	r1, [sp, #7]
9000f5f8:	0609      	lsls	r1, r1, #24
9000f5fa:	d4f3      	bmi.n	9000f5e4 <xPortStartScheduler+0x4c>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
9000f5fc:	2803      	cmp	r0, #3
9000f5fe:	6020      	str	r0, [r4, #0]
9000f600:	f88d 3007 	strb.w	r3, [sp, #7]
9000f604:	d01a      	beq.n	9000f63c <xPortStartScheduler+0xa4>
	__asm volatile
9000f606:	f04f 0350 	mov.w	r3, #80	; 0x50
9000f60a:	f383 8811 	msr	BASEPRI, r3
9000f60e:	f3bf 8f6f 	isb	sy
9000f612:	f3bf 8f4f 	dsb	sy
9000f616:	e7fe      	b.n	9000f616 <xPortStartScheduler+0x7e>
9000f618:	f04f 0350 	mov.w	r3, #80	; 0x50
9000f61c:	f383 8811 	msr	BASEPRI, r3
9000f620:	f3bf 8f6f 	isb	sy
9000f624:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
9000f628:	e7fe      	b.n	9000f628 <xPortStartScheduler+0x90>
9000f62a:	f04f 0350 	mov.w	r3, #80	; 0x50
9000f62e:	f383 8811 	msr	BASEPRI, r3
9000f632:	f3bf 8f6f 	isb	sy
9000f636:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
9000f63a:	e7fe      	b.n	9000f63a <xPortStartScheduler+0xa2>
		*pucFirstUserPriorityRegister = ulOriginalPriority;
9000f63c:	9b02      	ldr	r3, [sp, #8]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
9000f63e:	f04f 25e0 	mov.w	r5, #3758153728	; 0xe000e000
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
9000f642:	f44f 7140 	mov.w	r1, #768	; 0x300
		*pucFirstUserPriorityRegister = ulOriginalPriority;
9000f646:	4a20      	ldr	r2, [pc, #128]	; (9000f6c8 <xPortStartScheduler+0x130>)
9000f648:	b2db      	uxtb	r3, r3
	uxCriticalNesting = 0;
9000f64a:	4e22      	ldr	r6, [pc, #136]	; (9000f6d4 <xPortStartScheduler+0x13c>)
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
9000f64c:	6021      	str	r1, [r4, #0]
	uxCriticalNesting = 0;
9000f64e:	2400      	movs	r4, #0
		*pucFirstUserPriorityRegister = ulOriginalPriority;
9000f650:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
9000f652:	f8d5 3d20 	ldr.w	r3, [r5, #3360]	; 0xd20
9000f656:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
9000f65a:	f8c5 3d20 	str.w	r3, [r5, #3360]	; 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
9000f65e:	f8d5 3d20 	ldr.w	r3, [r5, #3360]	; 0xd20
9000f662:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
9000f666:	f8c5 3d20 	str.w	r3, [r5, #3360]	; 0xd20
	vPortSetupTimerInterrupt();
9000f66a:	f7ff ff81 	bl	9000f570 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
9000f66e:	6034      	str	r4, [r6, #0]
	vPortEnableVFP();
9000f670:	f7ff fea8 	bl	9000f3c4 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
9000f674:	f8d5 3f34 	ldr.w	r3, [r5, #3892]	; 0xf34
9000f678:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
9000f67c:	f8c5 3f34 	str.w	r3, [r5, #3892]	; 0xf34
	prvPortStartFirstTask();
9000f680:	f7ff fe8c 	bl	9000f39c <prvPortStartFirstTask>
	vTaskSwitchContext();
9000f684:	f001 fdc6 	bl	90011214 <vTaskSwitchContext>
	configASSERT( uxCriticalNesting == ~0UL );
9000f688:	6833      	ldr	r3, [r6, #0]
volatile uint32_t ulDummy = 0;
9000f68a:	9403      	str	r4, [sp, #12]
	configASSERT( uxCriticalNesting == ~0UL );
9000f68c:	3301      	adds	r3, #1
9000f68e:	d008      	beq.n	9000f6a2 <xPortStartScheduler+0x10a>
9000f690:	f04f 0350 	mov.w	r3, #80	; 0x50
9000f694:	f383 8811 	msr	BASEPRI, r3
9000f698:	f3bf 8f6f 	isb	sy
9000f69c:	f3bf 8f4f 	dsb	sy
9000f6a0:	e7fe      	b.n	9000f6a0 <xPortStartScheduler+0x108>
9000f6a2:	f04f 0350 	mov.w	r3, #80	; 0x50
9000f6a6:	f383 8811 	msr	BASEPRI, r3
9000f6aa:	f3bf 8f6f 	isb	sy
9000f6ae:	f3bf 8f4f 	dsb	sy
	while( ulDummy == 0 )
9000f6b2:	9b03      	ldr	r3, [sp, #12]
9000f6b4:	2b00      	cmp	r3, #0
9000f6b6:	d0fc      	beq.n	9000f6b2 <xPortStartScheduler+0x11a>
}
9000f6b8:	2000      	movs	r0, #0
9000f6ba:	b004      	add	sp, #16
9000f6bc:	bd70      	pop	{r4, r5, r6, pc}
9000f6be:	bf00      	nop
9000f6c0:	410fc271 	.word	0x410fc271
9000f6c4:	410fc270 	.word	0x410fc270
9000f6c8:	e000e400 	.word	0xe000e400
9000f6cc:	24026b30 	.word	0x24026b30
9000f6d0:	24026b34 	.word	0x24026b34
9000f6d4:	24000064 	.word	0x24000064

9000f6d8 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
9000f6d8:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
9000f6dc:	2b0f      	cmp	r3, #15
9000f6de:	d90e      	bls.n	9000f6fe <vPortValidateInterruptPriority+0x26>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
9000f6e0:	4911      	ldr	r1, [pc, #68]	; (9000f728 <vPortValidateInterruptPriority+0x50>)
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
9000f6e2:	4a12      	ldr	r2, [pc, #72]	; (9000f72c <vPortValidateInterruptPriority+0x54>)
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
9000f6e4:	5c5b      	ldrb	r3, [r3, r1]
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
9000f6e6:	7812      	ldrb	r2, [r2, #0]
9000f6e8:	429a      	cmp	r2, r3
9000f6ea:	d908      	bls.n	9000f6fe <vPortValidateInterruptPriority+0x26>
9000f6ec:	f04f 0350 	mov.w	r3, #80	; 0x50
9000f6f0:	f383 8811 	msr	BASEPRI, r3
9000f6f4:	f3bf 8f6f 	isb	sy
9000f6f8:	f3bf 8f4f 	dsb	sy
9000f6fc:	e7fe      	b.n	9000f6fc <vPortValidateInterruptPriority+0x24>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
9000f6fe:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
9000f702:	4a0b      	ldr	r2, [pc, #44]	; (9000f730 <vPortValidateInterruptPriority+0x58>)
9000f704:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	; 0xd0c
9000f708:	6812      	ldr	r2, [r2, #0]
9000f70a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
9000f70e:	4293      	cmp	r3, r2
9000f710:	d908      	bls.n	9000f724 <vPortValidateInterruptPriority+0x4c>
9000f712:	f04f 0350 	mov.w	r3, #80	; 0x50
9000f716:	f383 8811 	msr	BASEPRI, r3
9000f71a:	f3bf 8f6f 	isb	sy
9000f71e:	f3bf 8f4f 	dsb	sy
9000f722:	e7fe      	b.n	9000f722 <vPortValidateInterruptPriority+0x4a>
	}
9000f724:	4770      	bx	lr
9000f726:	bf00      	nop
9000f728:	e000e3f0 	.word	0xe000e3f0
9000f72c:	24026b30 	.word	0x24026b30
9000f730:	24026b34 	.word	0x24026b34

9000f734 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
9000f734:	b570      	push	{r4, r5, r6, lr}
9000f736:	4615      	mov	r5, r2

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
9000f738:	6c02      	ldr	r2, [r0, #64]	; 0x40
{
9000f73a:	4604      	mov	r4, r0
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
9000f73c:	6b86      	ldr	r6, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
9000f73e:	b92a      	cbnz	r2, 9000f74c <prvCopyDataToQueue+0x18>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
9000f740:	6805      	ldr	r5, [r0, #0]
9000f742:	b365      	cbz	r5, 9000f79e <prvCopyDataToQueue+0x6a>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
9000f744:	3601      	adds	r6, #1
BaseType_t xReturn = pdFALSE;
9000f746:	4610      	mov	r0, r2
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
9000f748:	63a6      	str	r6, [r4, #56]	; 0x38

	return xReturn;
}
9000f74a:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
9000f74c:	b97d      	cbnz	r5, 9000f76e <prvCopyDataToQueue+0x3a>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
9000f74e:	6840      	ldr	r0, [r0, #4]
9000f750:	f018 fb15 	bl	90027d7e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
9000f754:	6863      	ldr	r3, [r4, #4]
9000f756:	6c22      	ldr	r2, [r4, #64]	; 0x40
9000f758:	4413      	add	r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
9000f75a:	68a2      	ldr	r2, [r4, #8]
9000f75c:	4293      	cmp	r3, r2
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
9000f75e:	6063      	str	r3, [r4, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
9000f760:	d319      	bcc.n	9000f796 <prvCopyDataToQueue+0x62>
			pxQueue->pcWriteTo = pxQueue->pcHead;
9000f762:	6822      	ldr	r2, [r4, #0]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
9000f764:	3601      	adds	r6, #1
BaseType_t xReturn = pdFALSE;
9000f766:	4628      	mov	r0, r5
			pxQueue->pcWriteTo = pxQueue->pcHead;
9000f768:	6062      	str	r2, [r4, #4]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
9000f76a:	63a6      	str	r6, [r4, #56]	; 0x38
}
9000f76c:	bd70      	pop	{r4, r5, r6, pc}
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
9000f76e:	68c0      	ldr	r0, [r0, #12]
9000f770:	f018 fb05 	bl	90027d7e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
9000f774:	6c22      	ldr	r2, [r4, #64]	; 0x40
9000f776:	68e3      	ldr	r3, [r4, #12]
9000f778:	4251      	negs	r1, r2
9000f77a:	1a9b      	subs	r3, r3, r2
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
9000f77c:	6822      	ldr	r2, [r4, #0]
9000f77e:	4293      	cmp	r3, r2
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
9000f780:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
9000f782:	d202      	bcs.n	9000f78a <prvCopyDataToQueue+0x56>
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
9000f784:	68a3      	ldr	r3, [r4, #8]
9000f786:	440b      	add	r3, r1
9000f788:	60e3      	str	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
9000f78a:	2d02      	cmp	r5, #2
9000f78c:	d00d      	beq.n	9000f7aa <prvCopyDataToQueue+0x76>
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
9000f78e:	3601      	adds	r6, #1
BaseType_t xReturn = pdFALSE;
9000f790:	2000      	movs	r0, #0
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
9000f792:	63a6      	str	r6, [r4, #56]	; 0x38
}
9000f794:	bd70      	pop	{r4, r5, r6, pc}
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
9000f796:	3601      	adds	r6, #1
BaseType_t xReturn = pdFALSE;
9000f798:	4628      	mov	r0, r5
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
9000f79a:	63a6      	str	r6, [r4, #56]	; 0x38
}
9000f79c:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
9000f79e:	6880      	ldr	r0, [r0, #8]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
9000f7a0:	3601      	adds	r6, #1
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
9000f7a2:	f001 ff1f 	bl	900115e4 <xTaskPriorityDisinherit>
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
9000f7a6:	60a5      	str	r5, [r4, #8]
9000f7a8:	e7ce      	b.n	9000f748 <prvCopyDataToQueue+0x14>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
9000f7aa:	2e01      	cmp	r6, #1
BaseType_t xReturn = pdFALSE;
9000f7ac:	f04f 0000 	mov.w	r0, #0
9000f7b0:	bf38      	it	cc
9000f7b2:	2601      	movcc	r6, #1
9000f7b4:	e7c8      	b.n	9000f748 <prvCopyDataToQueue+0x14>
9000f7b6:	bf00      	nop

9000f7b8 <xQueueGenericCreateStatic>:
	{
9000f7b8:	b530      	push	{r4, r5, lr}
9000f7ba:	b083      	sub	sp, #12
9000f7bc:	f89d 4018 	ldrb.w	r4, [sp, #24]
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
9000f7c0:	b940      	cbnz	r0, 9000f7d4 <xQueueGenericCreateStatic+0x1c>
9000f7c2:	f04f 0350 	mov.w	r3, #80	; 0x50
9000f7c6:	f383 8811 	msr	BASEPRI, r3
9000f7ca:	f3bf 8f6f 	isb	sy
9000f7ce:	f3bf 8f4f 	dsb	sy
9000f7d2:	e7fe      	b.n	9000f7d2 <xQueueGenericCreateStatic+0x1a>
		configASSERT( pxStaticQueue != NULL );
9000f7d4:	461d      	mov	r5, r3
9000f7d6:	b153      	cbz	r3, 9000f7ee <xQueueGenericCreateStatic+0x36>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
9000f7d8:	b30a      	cbz	r2, 9000f81e <xQueueGenericCreateStatic+0x66>
9000f7da:	b989      	cbnz	r1, 9000f800 <xQueueGenericCreateStatic+0x48>
9000f7dc:	f04f 0350 	mov.w	r3, #80	; 0x50
9000f7e0:	f383 8811 	msr	BASEPRI, r3
9000f7e4:	f3bf 8f6f 	isb	sy
9000f7e8:	f3bf 8f4f 	dsb	sy
9000f7ec:	e7fe      	b.n	9000f7ec <xQueueGenericCreateStatic+0x34>
9000f7ee:	f04f 0350 	mov.w	r3, #80	; 0x50
9000f7f2:	f383 8811 	msr	BASEPRI, r3
9000f7f6:	f3bf 8f6f 	isb	sy
9000f7fa:	f3bf 8f4f 	dsb	sy
		configASSERT( pxStaticQueue != NULL );
9000f7fe:	e7fe      	b.n	9000f7fe <xQueueGenericCreateStatic+0x46>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
9000f800:	b16a      	cbz	r2, 9000f81e <xQueueGenericCreateStatic+0x66>
			volatile size_t xSize = sizeof( StaticQueue_t );
9000f802:	2350      	movs	r3, #80	; 0x50
9000f804:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
9000f806:	9b01      	ldr	r3, [sp, #4]
9000f808:	2b50      	cmp	r3, #80	; 0x50
9000f80a:	d013      	beq.n	9000f834 <xQueueGenericCreateStatic+0x7c>
9000f80c:	f04f 0350 	mov.w	r3, #80	; 0x50
9000f810:	f383 8811 	msr	BASEPRI, r3
9000f814:	f3bf 8f6f 	isb	sy
9000f818:	f3bf 8f4f 	dsb	sy
9000f81c:	e7fe      	b.n	9000f81c <xQueueGenericCreateStatic+0x64>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
9000f81e:	2900      	cmp	r1, #0
9000f820:	d0ef      	beq.n	9000f802 <xQueueGenericCreateStatic+0x4a>
9000f822:	f04f 0350 	mov.w	r3, #80	; 0x50
9000f826:	f383 8811 	msr	BASEPRI, r3
9000f82a:	f3bf 8f6f 	isb	sy
9000f82e:	f3bf 8f4f 	dsb	sy
9000f832:	e7fe      	b.n	9000f832 <xQueueGenericCreateStatic+0x7a>
	if( uxItemSize == ( UBaseType_t ) 0 )
9000f834:	2900      	cmp	r1, #0
9000f836:	bf08      	it	eq
9000f838:	462a      	moveq	r2, r5
	pxNewQueue->uxLength = uxQueueLength;
9000f83a:	63e8      	str	r0, [r5, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
9000f83c:	6429      	str	r1, [r5, #64]	; 0x40
9000f83e:	602a      	str	r2, [r5, #0]
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
9000f840:	9a01      	ldr	r2, [sp, #4]
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
9000f842:	2201      	movs	r2, #1
9000f844:	f885 2046 	strb.w	r2, [r5, #70]	; 0x46
	taskENTER_CRITICAL();
9000f848:	f7ff fe14 	bl	9000f474 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000f84c:	6829      	ldr	r1, [r5, #0]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
9000f84e:	2300      	movs	r3, #0
		pxQueue->pcWriteTo = pxQueue->pcHead;
9000f850:	6069      	str	r1, [r5, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
9000f852:	63ab      	str	r3, [r5, #56]	; 0x38
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000f854:	e9d5 200f 	ldrd	r2, r0, [r5, #60]	; 0x3c
9000f858:	fb00 f202 	mul.w	r2, r0, r2
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000f85c:	1a10      	subs	r0, r2, r0
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000f85e:	440a      	add	r2, r1
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000f860:	4401      	add	r1, r0
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000f862:	60aa      	str	r2, [r5, #8]
		pxQueue->cRxLock = queueUNLOCKED;
9000f864:	22ff      	movs	r2, #255	; 0xff
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
9000f866:	f105 0010 	add.w	r0, r5, #16
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000f86a:	60e9      	str	r1, [r5, #12]
		pxQueue->cRxLock = queueUNLOCKED;
9000f86c:	f885 2044 	strb.w	r2, [r5, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
9000f870:	f885 2045 	strb.w	r2, [r5, #69]	; 0x45
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
9000f874:	f7ff fd46 	bl	9000f304 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
9000f878:	f105 0024 	add.w	r0, r5, #36	; 0x24
9000f87c:	f7ff fd42 	bl	9000f304 <vListInitialise>
	taskEXIT_CRITICAL();
9000f880:	f7ff fe1a 	bl	9000f4b8 <vPortExitCritical>
	}
9000f884:	4628      	mov	r0, r5
		pxNewQueue->ucQueueType = ucQueueType;
9000f886:	f885 404c 	strb.w	r4, [r5, #76]	; 0x4c
	}
9000f88a:	b003      	add	sp, #12
9000f88c:	bd30      	pop	{r4, r5, pc}
9000f88e:	bf00      	nop

9000f890 <xQueueGenericCreate>:
	{
9000f890:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
9000f892:	b940      	cbnz	r0, 9000f8a6 <xQueueGenericCreate+0x16>
9000f894:	f04f 0350 	mov.w	r3, #80	; 0x50
9000f898:	f383 8811 	msr	BASEPRI, r3
9000f89c:	f3bf 8f6f 	isb	sy
9000f8a0:	f3bf 8f4f 	dsb	sy
9000f8a4:	e7fe      	b.n	9000f8a4 <xQueueGenericCreate+0x14>
9000f8a6:	4605      	mov	r5, r0
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
9000f8a8:	fb01 f000 	mul.w	r0, r1, r0
9000f8ac:	460e      	mov	r6, r1
9000f8ae:	4617      	mov	r7, r2
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
9000f8b0:	3050      	adds	r0, #80	; 0x50
9000f8b2:	f7ff fc05 	bl	9000f0c0 <pvPortMalloc>
		if( pxNewQueue != NULL )
9000f8b6:	4604      	mov	r4, r0
9000f8b8:	b340      	cbz	r0, 9000f90c <xQueueGenericCreate+0x7c>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
9000f8ba:	2300      	movs	r3, #0
9000f8bc:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
	if( uxItemSize == ( UBaseType_t ) 0 )
9000f8c0:	b336      	cbz	r6, 9000f910 <xQueueGenericCreate+0x80>
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000f8c2:	f100 0350 	add.w	r3, r0, #80	; 0x50
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
9000f8c6:	6023      	str	r3, [r4, #0]
	pxNewQueue->uxItemSize = uxItemSize;
9000f8c8:	e9c4 560f 	strd	r5, r6, [r4, #60]	; 0x3c
	taskENTER_CRITICAL();
9000f8cc:	f7ff fdd2 	bl	9000f474 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000f8d0:	6822      	ldr	r2, [r4, #0]
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
9000f8d2:	f104 0010 	add.w	r0, r4, #16
		pxQueue->pcWriteTo = pxQueue->pcHead;
9000f8d6:	6062      	str	r2, [r4, #4]
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000f8d8:	e9d4 310f 	ldrd	r3, r1, [r4, #60]	; 0x3c
9000f8dc:	fb01 f303 	mul.w	r3, r1, r3
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000f8e0:	1a59      	subs	r1, r3, r1
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000f8e2:	4413      	add	r3, r2
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000f8e4:	440a      	add	r2, r1
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000f8e6:	60a3      	str	r3, [r4, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
9000f8e8:	2100      	movs	r1, #0
		pxQueue->cRxLock = queueUNLOCKED;
9000f8ea:	23ff      	movs	r3, #255	; 0xff
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000f8ec:	60e2      	str	r2, [r4, #12]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
9000f8ee:	63a1      	str	r1, [r4, #56]	; 0x38
		pxQueue->cRxLock = queueUNLOCKED;
9000f8f0:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
9000f8f4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
9000f8f8:	f7ff fd04 	bl	9000f304 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
9000f8fc:	f104 0024 	add.w	r0, r4, #36	; 0x24
9000f900:	f7ff fd00 	bl	9000f304 <vListInitialise>
	taskEXIT_CRITICAL();
9000f904:	f7ff fdd8 	bl	9000f4b8 <vPortExitCritical>
		pxNewQueue->ucQueueType = ucQueueType;
9000f908:	f884 704c 	strb.w	r7, [r4, #76]	; 0x4c
	}
9000f90c:	4620      	mov	r0, r4
9000f90e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
9000f910:	4603      	mov	r3, r0
9000f912:	e7d8      	b.n	9000f8c6 <xQueueGenericCreate+0x36>

9000f914 <xQueueCreateCountingSemaphoreStatic>:
		configASSERT( uxMaxCount != 0 );
9000f914:	b940      	cbnz	r0, 9000f928 <xQueueCreateCountingSemaphoreStatic+0x14>
9000f916:	f04f 0350 	mov.w	r3, #80	; 0x50
9000f91a:	f383 8811 	msr	BASEPRI, r3
9000f91e:	f3bf 8f6f 	isb	sy
9000f922:	f3bf 8f4f 	dsb	sy
9000f926:	e7fe      	b.n	9000f926 <xQueueCreateCountingSemaphoreStatic+0x12>
		configASSERT( uxInitialCount <= uxMaxCount );
9000f928:	4288      	cmp	r0, r1
9000f92a:	d208      	bcs.n	9000f93e <xQueueCreateCountingSemaphoreStatic+0x2a>
9000f92c:	f04f 0350 	mov.w	r3, #80	; 0x50
9000f930:	f383 8811 	msr	BASEPRI, r3
9000f934:	f3bf 8f6f 	isb	sy
9000f938:	f3bf 8f4f 	dsb	sy
9000f93c:	e7fe      	b.n	9000f93c <xQueueCreateCountingSemaphoreStatic+0x28>
	{
9000f93e:	b530      	push	{r4, r5, lr}
9000f940:	4615      	mov	r5, r2
9000f942:	b085      	sub	sp, #20
		configASSERT( pxStaticQueue != NULL );
9000f944:	2a00      	cmp	r2, #0
9000f946:	d03d      	beq.n	9000f9c4 <xQueueCreateCountingSemaphoreStatic+0xb0>
			volatile size_t xSize = sizeof( StaticQueue_t );
9000f948:	2350      	movs	r3, #80	; 0x50
9000f94a:	9303      	str	r3, [sp, #12]
			configASSERT( xSize == sizeof( Queue_t ) );
9000f94c:	9b03      	ldr	r3, [sp, #12]
9000f94e:	2b50      	cmp	r3, #80	; 0x50
9000f950:	d008      	beq.n	9000f964 <xQueueCreateCountingSemaphoreStatic+0x50>
9000f952:	f04f 0350 	mov.w	r3, #80	; 0x50
9000f956:	f383 8811 	msr	BASEPRI, r3
9000f95a:	f3bf 8f6f 	isb	sy
9000f95e:	f3bf 8f4f 	dsb	sy
9000f962:	e7fe      	b.n	9000f962 <xQueueCreateCountingSemaphoreStatic+0x4e>
	pxNewQueue->uxItemSize = uxItemSize;
9000f964:	2400      	movs	r4, #0
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
9000f966:	2301      	movs	r3, #1
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
9000f968:	602a      	str	r2, [r5, #0]
	pxNewQueue->uxLength = uxQueueLength;
9000f96a:	63d0      	str	r0, [r2, #60]	; 0x3c
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
9000f96c:	f882 3046 	strb.w	r3, [r2, #70]	; 0x46
	pxNewQueue->uxItemSize = uxItemSize;
9000f970:	6414      	str	r4, [r2, #64]	; 0x40
9000f972:	9101      	str	r1, [sp, #4]
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
9000f974:	9b03      	ldr	r3, [sp, #12]
	taskENTER_CRITICAL();
9000f976:	f7ff fd7d 	bl	9000f474 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000f97a:	6828      	ldr	r0, [r5, #0]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
9000f97c:	63ac      	str	r4, [r5, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
9000f97e:	6068      	str	r0, [r5, #4]
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000f980:	e9d5 3c0f 	ldrd	r3, ip, [r5, #60]	; 0x3c
9000f984:	fb03 f30c 	mul.w	r3, r3, ip
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000f988:	eba3 0c0c 	sub.w	ip, r3, ip
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000f98c:	4403      	add	r3, r0
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000f98e:	4484      	add	ip, r0
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000f990:	60ab      	str	r3, [r5, #8]
		pxQueue->cRxLock = queueUNLOCKED;
9000f992:	23ff      	movs	r3, #255	; 0xff
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
9000f994:	f105 0010 	add.w	r0, r5, #16
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000f998:	f8c5 c00c 	str.w	ip, [r5, #12]
		pxQueue->cRxLock = queueUNLOCKED;
9000f99c:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
9000f9a0:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
9000f9a4:	f7ff fcae 	bl	9000f304 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
9000f9a8:	f105 0024 	add.w	r0, r5, #36	; 0x24
9000f9ac:	f7ff fcaa 	bl	9000f304 <vListInitialise>
	taskEXIT_CRITICAL();
9000f9b0:	f7ff fd82 	bl	9000f4b8 <vPortExitCritical>
		pxNewQueue->ucQueueType = ucQueueType;
9000f9b4:	2302      	movs	r3, #2
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
9000f9b6:	9901      	ldr	r1, [sp, #4]
	}
9000f9b8:	4628      	mov	r0, r5
		pxNewQueue->ucQueueType = ucQueueType;
9000f9ba:	f885 304c 	strb.w	r3, [r5, #76]	; 0x4c
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
9000f9be:	63a9      	str	r1, [r5, #56]	; 0x38
	}
9000f9c0:	b005      	add	sp, #20
9000f9c2:	bd30      	pop	{r4, r5, pc}
9000f9c4:	f04f 0350 	mov.w	r3, #80	; 0x50
9000f9c8:	f383 8811 	msr	BASEPRI, r3
9000f9cc:	f3bf 8f6f 	isb	sy
9000f9d0:	f3bf 8f4f 	dsb	sy
		configASSERT( pxStaticQueue != NULL );
9000f9d4:	e7fe      	b.n	9000f9d4 <xQueueCreateCountingSemaphoreStatic+0xc0>
9000f9d6:	bf00      	nop

9000f9d8 <xQueueCreateCountingSemaphore>:
	{
9000f9d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		configASSERT( uxMaxCount != 0 );
9000f9da:	b940      	cbnz	r0, 9000f9ee <xQueueCreateCountingSemaphore+0x16>
9000f9dc:	f04f 0350 	mov.w	r3, #80	; 0x50
9000f9e0:	f383 8811 	msr	BASEPRI, r3
9000f9e4:	f3bf 8f6f 	isb	sy
9000f9e8:	f3bf 8f4f 	dsb	sy
9000f9ec:	e7fe      	b.n	9000f9ec <xQueueCreateCountingSemaphore+0x14>
		configASSERT( uxInitialCount <= uxMaxCount );
9000f9ee:	4288      	cmp	r0, r1
9000f9f0:	4604      	mov	r4, r0
9000f9f2:	460e      	mov	r6, r1
9000f9f4:	d208      	bcs.n	9000fa08 <xQueueCreateCountingSemaphore+0x30>
9000f9f6:	f04f 0350 	mov.w	r3, #80	; 0x50
9000f9fa:	f383 8811 	msr	BASEPRI, r3
9000f9fe:	f3bf 8f6f 	isb	sy
9000fa02:	f3bf 8f4f 	dsb	sy
9000fa06:	e7fe      	b.n	9000fa06 <xQueueCreateCountingSemaphore+0x2e>
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
9000fa08:	2050      	movs	r0, #80	; 0x50
9000fa0a:	f7ff fb59 	bl	9000f0c0 <pvPortMalloc>
		if( pxNewQueue != NULL )
9000fa0e:	4605      	mov	r5, r0
9000fa10:	b330      	cbz	r0, 9000fa60 <xQueueCreateCountingSemaphore+0x88>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
9000fa12:	2700      	movs	r7, #0
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
9000fa14:	6000      	str	r0, [r0, #0]
	pxNewQueue->uxLength = uxQueueLength;
9000fa16:	63c4      	str	r4, [r0, #60]	; 0x3c
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
9000fa18:	f880 7046 	strb.w	r7, [r0, #70]	; 0x46
	pxNewQueue->uxItemSize = uxItemSize;
9000fa1c:	6407      	str	r7, [r0, #64]	; 0x40
	taskENTER_CRITICAL();
9000fa1e:	f7ff fd29 	bl	9000f474 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000fa22:	682a      	ldr	r2, [r5, #0]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
9000fa24:	63af      	str	r7, [r5, #56]	; 0x38
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
9000fa26:	f105 0010 	add.w	r0, r5, #16
		pxQueue->pcWriteTo = pxQueue->pcHead;
9000fa2a:	606a      	str	r2, [r5, #4]
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000fa2c:	e9d5 310f 	ldrd	r3, r1, [r5, #60]	; 0x3c
9000fa30:	fb01 f303 	mul.w	r3, r1, r3
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000fa34:	1a59      	subs	r1, r3, r1
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000fa36:	4413      	add	r3, r2
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000fa38:	440a      	add	r2, r1
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000fa3a:	60ab      	str	r3, [r5, #8]
		pxQueue->cRxLock = queueUNLOCKED;
9000fa3c:	23ff      	movs	r3, #255	; 0xff
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000fa3e:	60ea      	str	r2, [r5, #12]
		pxQueue->cRxLock = queueUNLOCKED;
9000fa40:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
9000fa44:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
9000fa48:	f7ff fc5c 	bl	9000f304 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
9000fa4c:	f105 0024 	add.w	r0, r5, #36	; 0x24
9000fa50:	f7ff fc58 	bl	9000f304 <vListInitialise>
	taskEXIT_CRITICAL();
9000fa54:	f7ff fd30 	bl	9000f4b8 <vPortExitCritical>
		pxNewQueue->ucQueueType = ucQueueType;
9000fa58:	2302      	movs	r3, #2
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
9000fa5a:	63ae      	str	r6, [r5, #56]	; 0x38
		pxNewQueue->ucQueueType = ucQueueType;
9000fa5c:	f885 304c 	strb.w	r3, [r5, #76]	; 0x4c
	}
9000fa60:	4628      	mov	r0, r5
9000fa62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

9000fa64 <xQueueGenericSend>:
{
9000fa64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
9000fa68:	b084      	sub	sp, #16
9000fa6a:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
9000fa6c:	2800      	cmp	r0, #0
9000fa6e:	f000 8103 	beq.w	9000fc78 <xQueueGenericSend+0x214>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
9000fa72:	4688      	mov	r8, r1
9000fa74:	4604      	mov	r4, r0
9000fa76:	461f      	mov	r7, r3
9000fa78:	2900      	cmp	r1, #0
9000fa7a:	f000 8097 	beq.w	9000fbac <xQueueGenericSend+0x148>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
9000fa7e:	2f02      	cmp	r7, #2
9000fa80:	d10b      	bne.n	9000fa9a <xQueueGenericSend+0x36>
9000fa82:	6be3      	ldr	r3, [r4, #60]	; 0x3c
9000fa84:	2b01      	cmp	r3, #1
9000fa86:	d008      	beq.n	9000fa9a <xQueueGenericSend+0x36>
9000fa88:	f04f 0350 	mov.w	r3, #80	; 0x50
9000fa8c:	f383 8811 	msr	BASEPRI, r3
9000fa90:	f3bf 8f6f 	isb	sy
9000fa94:	f3bf 8f4f 	dsb	sy
9000fa98:	e7fe      	b.n	9000fa98 <xQueueGenericSend+0x34>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
9000fa9a:	f001 fd4d 	bl	90011538 <xTaskGetSchedulerState>
9000fa9e:	2800      	cmp	r0, #0
9000faa0:	f000 80f3 	beq.w	9000fc8a <xQueueGenericSend+0x226>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
9000faa4:	f1a7 0902 	sub.w	r9, r7, #2
9000faa8:	2500      	movs	r5, #0
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
9000faaa:	f104 0624 	add.w	r6, r4, #36	; 0x24
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
9000faae:	fab9 f989 	clz	r9, r9
9000fab2:	ea4f 1959 	mov.w	r9, r9, lsr #5
		taskENTER_CRITICAL();
9000fab6:	f7ff fcdd 	bl	9000f474 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
9000faba:	6ba2      	ldr	r2, [r4, #56]	; 0x38
9000fabc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
9000fabe:	429a      	cmp	r2, r3
9000fac0:	f0c0 80f0 	bcc.w	9000fca4 <xQueueGenericSend+0x240>
9000fac4:	f1b9 0f00 	cmp.w	r9, #0
9000fac8:	f040 80ec 	bne.w	9000fca4 <xQueueGenericSend+0x240>
				if( xTicksToWait == ( TickType_t ) 0 )
9000facc:	9b01      	ldr	r3, [sp, #4]
9000face:	2b00      	cmp	r3, #0
9000fad0:	f000 8101 	beq.w	9000fcd6 <xQueueGenericSend+0x272>
				else if( xEntryTimeSet == pdFALSE )
9000fad4:	2d00      	cmp	r5, #0
9000fad6:	f000 80cb 	beq.w	9000fc70 <xQueueGenericSend+0x20c>
		taskEXIT_CRITICAL();
9000fada:	f7ff fced 	bl	9000f4b8 <vPortExitCritical>
		vTaskSuspendAll();
9000fade:	f001 fb55 	bl	9001118c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
9000fae2:	f7ff fcc7 	bl	9000f474 <vPortEnterCritical>
9000fae6:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
9000faea:	2bff      	cmp	r3, #255	; 0xff
9000faec:	d102      	bne.n	9000faf4 <xQueueGenericSend+0x90>
9000faee:	2300      	movs	r3, #0
9000faf0:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
9000faf4:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
9000faf8:	2bff      	cmp	r3, #255	; 0xff
9000fafa:	d102      	bne.n	9000fb02 <xQueueGenericSend+0x9e>
9000fafc:	2300      	movs	r3, #0
9000fafe:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
9000fb02:	f7ff fcd9 	bl	9000f4b8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
9000fb06:	a901      	add	r1, sp, #4
9000fb08:	a802      	add	r0, sp, #8
9000fb0a:	f001 fcc1 	bl	90011490 <xTaskCheckForTimeOut>
9000fb0e:	2800      	cmp	r0, #0
9000fb10:	f040 80e5 	bne.w	9000fcde <xQueueGenericSend+0x27a>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
9000fb14:	f7ff fcae 	bl	9000f474 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
9000fb18:	6ba2      	ldr	r2, [r4, #56]	; 0x38
9000fb1a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
9000fb1c:	429a      	cmp	r2, r3
9000fb1e:	d052      	beq.n	9000fbc6 <xQueueGenericSend+0x162>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
9000fb20:	f7ff fcca 	bl	9000f4b8 <vPortExitCritical>
	taskENTER_CRITICAL();
9000fb24:	f7ff fca6 	bl	9000f474 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
9000fb28:	f894 2045 	ldrb.w	r2, [r4, #69]	; 0x45
9000fb2c:	b255      	sxtb	r5, r2
		while( cTxLock > queueLOCKED_UNMODIFIED )
9000fb2e:	2d00      	cmp	r5, #0
9000fb30:	dc04      	bgt.n	9000fb3c <xQueueGenericSend+0xd8>
9000fb32:	e011      	b.n	9000fb58 <xQueueGenericSend+0xf4>
			--cTxLock;
9000fb34:	1e6a      	subs	r2, r5, #1
9000fb36:	b2d3      	uxtb	r3, r2
9000fb38:	b255      	sxtb	r5, r2
		while( cTxLock > queueLOCKED_UNMODIFIED )
9000fb3a:	b16b      	cbz	r3, 9000fb58 <xQueueGenericSend+0xf4>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
9000fb3c:	6a63      	ldr	r3, [r4, #36]	; 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
9000fb3e:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
9000fb40:	b153      	cbz	r3, 9000fb58 <xQueueGenericSend+0xf4>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
9000fb42:	f001 fc4f 	bl	900113e4 <xTaskRemoveFromEventList>
9000fb46:	2800      	cmp	r0, #0
9000fb48:	d0f4      	beq.n	9000fb34 <xQueueGenericSend+0xd0>
						vTaskMissedYield();
9000fb4a:	f001 fce9 	bl	90011520 <vTaskMissedYield>
			--cTxLock;
9000fb4e:	1e6a      	subs	r2, r5, #1
9000fb50:	b2d3      	uxtb	r3, r2
9000fb52:	b255      	sxtb	r5, r2
		while( cTxLock > queueLOCKED_UNMODIFIED )
9000fb54:	2b00      	cmp	r3, #0
9000fb56:	d1f1      	bne.n	9000fb3c <xQueueGenericSend+0xd8>
		pxQueue->cTxLock = queueUNLOCKED;
9000fb58:	23ff      	movs	r3, #255	; 0xff
9000fb5a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
9000fb5e:	f7ff fcab 	bl	9000f4b8 <vPortExitCritical>
	taskENTER_CRITICAL();
9000fb62:	f7ff fc87 	bl	9000f474 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
9000fb66:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
9000fb6a:	b255      	sxtb	r5, r2
		while( cRxLock > queueLOCKED_UNMODIFIED )
9000fb6c:	2d00      	cmp	r5, #0
9000fb6e:	dd14      	ble.n	9000fb9a <xQueueGenericSend+0x136>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9000fb70:	f104 0a10 	add.w	sl, r4, #16
9000fb74:	e003      	b.n	9000fb7e <xQueueGenericSend+0x11a>
				--cRxLock;
9000fb76:	1e6a      	subs	r2, r5, #1
9000fb78:	b2d3      	uxtb	r3, r2
9000fb7a:	b255      	sxtb	r5, r2
		while( cRxLock > queueLOCKED_UNMODIFIED )
9000fb7c:	b16b      	cbz	r3, 9000fb9a <xQueueGenericSend+0x136>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
9000fb7e:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9000fb80:	4650      	mov	r0, sl
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
9000fb82:	b153      	cbz	r3, 9000fb9a <xQueueGenericSend+0x136>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9000fb84:	f001 fc2e 	bl	900113e4 <xTaskRemoveFromEventList>
9000fb88:	2800      	cmp	r0, #0
9000fb8a:	d0f4      	beq.n	9000fb76 <xQueueGenericSend+0x112>
					vTaskMissedYield();
9000fb8c:	f001 fcc8 	bl	90011520 <vTaskMissedYield>
				--cRxLock;
9000fb90:	1e6a      	subs	r2, r5, #1
9000fb92:	b2d3      	uxtb	r3, r2
9000fb94:	b255      	sxtb	r5, r2
		while( cRxLock > queueLOCKED_UNMODIFIED )
9000fb96:	2b00      	cmp	r3, #0
9000fb98:	d1f1      	bne.n	9000fb7e <xQueueGenericSend+0x11a>
		pxQueue->cRxLock = queueUNLOCKED;
9000fb9a:	23ff      	movs	r3, #255	; 0xff
9000fb9c:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
9000fba0:	f7ff fc8a 	bl	9000f4b8 <vPortExitCritical>
				( void ) xTaskResumeAll();
9000fba4:	f001 fafa 	bl	9001119c <xTaskResumeAll>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
9000fba8:	2501      	movs	r5, #1
9000fbaa:	e784      	b.n	9000fab6 <xQueueGenericSend+0x52>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
9000fbac:	6c03      	ldr	r3, [r0, #64]	; 0x40
9000fbae:	2b00      	cmp	r3, #0
9000fbb0:	f43f af65 	beq.w	9000fa7e <xQueueGenericSend+0x1a>
9000fbb4:	f04f 0350 	mov.w	r3, #80	; 0x50
9000fbb8:	f383 8811 	msr	BASEPRI, r3
9000fbbc:	f3bf 8f6f 	isb	sy
9000fbc0:	f3bf 8f4f 	dsb	sy
9000fbc4:	e7fe      	b.n	9000fbc4 <xQueueGenericSend+0x160>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
9000fbc6:	f104 0a10 	add.w	sl, r4, #16
	taskEXIT_CRITICAL();
9000fbca:	f7ff fc75 	bl	9000f4b8 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
9000fbce:	9901      	ldr	r1, [sp, #4]
9000fbd0:	4650      	mov	r0, sl
9000fbd2:	f001 fb79 	bl	900112c8 <vTaskPlaceOnEventList>
	taskENTER_CRITICAL();
9000fbd6:	f7ff fc4d 	bl	9000f474 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
9000fbda:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
9000fbde:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
9000fbe0:	2d00      	cmp	r5, #0
9000fbe2:	dc04      	bgt.n	9000fbee <xQueueGenericSend+0x18a>
9000fbe4:	e011      	b.n	9000fc0a <xQueueGenericSend+0x1a6>
			--cTxLock;
9000fbe6:	1e6b      	subs	r3, r5, #1
9000fbe8:	b2da      	uxtb	r2, r3
9000fbea:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
9000fbec:	b16a      	cbz	r2, 9000fc0a <xQueueGenericSend+0x1a6>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
9000fbee:	6a63      	ldr	r3, [r4, #36]	; 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
9000fbf0:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
9000fbf2:	b153      	cbz	r3, 9000fc0a <xQueueGenericSend+0x1a6>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
9000fbf4:	f001 fbf6 	bl	900113e4 <xTaskRemoveFromEventList>
9000fbf8:	2800      	cmp	r0, #0
9000fbfa:	d0f4      	beq.n	9000fbe6 <xQueueGenericSend+0x182>
						vTaskMissedYield();
9000fbfc:	f001 fc90 	bl	90011520 <vTaskMissedYield>
			--cTxLock;
9000fc00:	1e6b      	subs	r3, r5, #1
9000fc02:	b2da      	uxtb	r2, r3
9000fc04:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
9000fc06:	2a00      	cmp	r2, #0
9000fc08:	d1f1      	bne.n	9000fbee <xQueueGenericSend+0x18a>
		pxQueue->cTxLock = queueUNLOCKED;
9000fc0a:	23ff      	movs	r3, #255	; 0xff
9000fc0c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
9000fc10:	f7ff fc52 	bl	9000f4b8 <vPortExitCritical>
	taskENTER_CRITICAL();
9000fc14:	f7ff fc2e 	bl	9000f474 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
9000fc18:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
9000fc1c:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
9000fc1e:	2d00      	cmp	r5, #0
9000fc20:	dc04      	bgt.n	9000fc2c <xQueueGenericSend+0x1c8>
9000fc22:	e011      	b.n	9000fc48 <xQueueGenericSend+0x1e4>
				--cRxLock;
9000fc24:	1e6b      	subs	r3, r5, #1
9000fc26:	b2da      	uxtb	r2, r3
9000fc28:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
9000fc2a:	b16a      	cbz	r2, 9000fc48 <xQueueGenericSend+0x1e4>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
9000fc2c:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9000fc2e:	4650      	mov	r0, sl
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
9000fc30:	b153      	cbz	r3, 9000fc48 <xQueueGenericSend+0x1e4>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9000fc32:	f001 fbd7 	bl	900113e4 <xTaskRemoveFromEventList>
9000fc36:	2800      	cmp	r0, #0
9000fc38:	d0f4      	beq.n	9000fc24 <xQueueGenericSend+0x1c0>
					vTaskMissedYield();
9000fc3a:	f001 fc71 	bl	90011520 <vTaskMissedYield>
				--cRxLock;
9000fc3e:	1e6b      	subs	r3, r5, #1
9000fc40:	b2da      	uxtb	r2, r3
9000fc42:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
9000fc44:	2a00      	cmp	r2, #0
9000fc46:	d1f1      	bne.n	9000fc2c <xQueueGenericSend+0x1c8>
		pxQueue->cRxLock = queueUNLOCKED;
9000fc48:	23ff      	movs	r3, #255	; 0xff
9000fc4a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
9000fc4e:	f7ff fc33 	bl	9000f4b8 <vPortExitCritical>
				if( xTaskResumeAll() == pdFALSE )
9000fc52:	f001 faa3 	bl	9001119c <xTaskResumeAll>
9000fc56:	2800      	cmp	r0, #0
9000fc58:	d1a6      	bne.n	9000fba8 <xQueueGenericSend+0x144>
					portYIELD_WITHIN_API();
9000fc5a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
9000fc5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
9000fc62:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
9000fc66:	f3bf 8f4f 	dsb	sy
9000fc6a:	f3bf 8f6f 	isb	sy
9000fc6e:	e79b      	b.n	9000fba8 <xQueueGenericSend+0x144>
					vTaskInternalSetTimeOutState( &xTimeOut );
9000fc70:	a802      	add	r0, sp, #8
9000fc72:	f001 fc01 	bl	90011478 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
9000fc76:	e730      	b.n	9000fada <xQueueGenericSend+0x76>
9000fc78:	f04f 0350 	mov.w	r3, #80	; 0x50
9000fc7c:	f383 8811 	msr	BASEPRI, r3
9000fc80:	f3bf 8f6f 	isb	sy
9000fc84:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
9000fc88:	e7fe      	b.n	9000fc88 <xQueueGenericSend+0x224>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
9000fc8a:	9b01      	ldr	r3, [sp, #4]
9000fc8c:	2b00      	cmp	r3, #0
9000fc8e:	f43f af09 	beq.w	9000faa4 <xQueueGenericSend+0x40>
9000fc92:	f04f 0350 	mov.w	r3, #80	; 0x50
9000fc96:	f383 8811 	msr	BASEPRI, r3
9000fc9a:	f3bf 8f6f 	isb	sy
9000fc9e:	f3bf 8f4f 	dsb	sy
9000fca2:	e7fe      	b.n	9000fca2 <xQueueGenericSend+0x23e>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
9000fca4:	463a      	mov	r2, r7
9000fca6:	4641      	mov	r1, r8
9000fca8:	4620      	mov	r0, r4
9000fcaa:	f7ff fd43 	bl	9000f734 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
9000fcae:	6a63      	ldr	r3, [r4, #36]	; 0x24
9000fcb0:	2b00      	cmp	r3, #0
9000fcb2:	d152      	bne.n	9000fd5a <xQueueGenericSend+0x2f6>
					else if( xYieldRequired != pdFALSE )
9000fcb4:	b148      	cbz	r0, 9000fcca <xQueueGenericSend+0x266>
						queueYIELD_IF_USING_PREEMPTION();
9000fcb6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
9000fcba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
9000fcbe:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
9000fcc2:	f3bf 8f4f 	dsb	sy
9000fcc6:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
9000fcca:	f7ff fbf5 	bl	9000f4b8 <vPortExitCritical>
				return pdPASS;
9000fcce:	2001      	movs	r0, #1
}
9000fcd0:	b004      	add	sp, #16
9000fcd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
					taskEXIT_CRITICAL();
9000fcd6:	f7ff fbef 	bl	9000f4b8 <vPortExitCritical>
					return errQUEUE_FULL;
9000fcda:	4648      	mov	r0, r9
9000fcdc:	e7f8      	b.n	9000fcd0 <xQueueGenericSend+0x26c>
	taskENTER_CRITICAL();
9000fcde:	f7ff fbc9 	bl	9000f474 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
9000fce2:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
9000fce6:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
9000fce8:	2d00      	cmp	r5, #0
9000fcea:	dd10      	ble.n	9000fd0e <xQueueGenericSend+0x2aa>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
9000fcec:	f104 0624 	add.w	r6, r4, #36	; 0x24
9000fcf0:	e003      	b.n	9000fcfa <xQueueGenericSend+0x296>
			--cTxLock;
9000fcf2:	1e6b      	subs	r3, r5, #1
9000fcf4:	b2da      	uxtb	r2, r3
9000fcf6:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
9000fcf8:	b14a      	cbz	r2, 9000fd0e <xQueueGenericSend+0x2aa>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
9000fcfa:	6a63      	ldr	r3, [r4, #36]	; 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
9000fcfc:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
9000fcfe:	b133      	cbz	r3, 9000fd0e <xQueueGenericSend+0x2aa>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
9000fd00:	f001 fb70 	bl	900113e4 <xTaskRemoveFromEventList>
9000fd04:	2800      	cmp	r0, #0
9000fd06:	d0f4      	beq.n	9000fcf2 <xQueueGenericSend+0x28e>
						vTaskMissedYield();
9000fd08:	f001 fc0a 	bl	90011520 <vTaskMissedYield>
9000fd0c:	e7f1      	b.n	9000fcf2 <xQueueGenericSend+0x28e>
		pxQueue->cTxLock = queueUNLOCKED;
9000fd0e:	23ff      	movs	r3, #255	; 0xff
9000fd10:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
9000fd14:	f7ff fbd0 	bl	9000f4b8 <vPortExitCritical>
	taskENTER_CRITICAL();
9000fd18:	f7ff fbac 	bl	9000f474 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
9000fd1c:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
9000fd20:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
9000fd22:	2d00      	cmp	r5, #0
9000fd24:	dd10      	ble.n	9000fd48 <xQueueGenericSend+0x2e4>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9000fd26:	f104 0610 	add.w	r6, r4, #16
9000fd2a:	e003      	b.n	9000fd34 <xQueueGenericSend+0x2d0>
				--cRxLock;
9000fd2c:	1e6b      	subs	r3, r5, #1
9000fd2e:	b2da      	uxtb	r2, r3
9000fd30:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
9000fd32:	b14a      	cbz	r2, 9000fd48 <xQueueGenericSend+0x2e4>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
9000fd34:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9000fd36:	4630      	mov	r0, r6
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
9000fd38:	b133      	cbz	r3, 9000fd48 <xQueueGenericSend+0x2e4>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9000fd3a:	f001 fb53 	bl	900113e4 <xTaskRemoveFromEventList>
9000fd3e:	2800      	cmp	r0, #0
9000fd40:	d0f4      	beq.n	9000fd2c <xQueueGenericSend+0x2c8>
					vTaskMissedYield();
9000fd42:	f001 fbed 	bl	90011520 <vTaskMissedYield>
9000fd46:	e7f1      	b.n	9000fd2c <xQueueGenericSend+0x2c8>
		pxQueue->cRxLock = queueUNLOCKED;
9000fd48:	23ff      	movs	r3, #255	; 0xff
9000fd4a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
9000fd4e:	f7ff fbb3 	bl	9000f4b8 <vPortExitCritical>
			( void ) xTaskResumeAll();
9000fd52:	f001 fa23 	bl	9001119c <xTaskResumeAll>
			return errQUEUE_FULL;
9000fd56:	2000      	movs	r0, #0
9000fd58:	e7ba      	b.n	9000fcd0 <xQueueGenericSend+0x26c>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
9000fd5a:	f104 0024 	add.w	r0, r4, #36	; 0x24
9000fd5e:	f001 fb41 	bl	900113e4 <xTaskRemoveFromEventList>
9000fd62:	2800      	cmp	r0, #0
9000fd64:	d0b1      	beq.n	9000fcca <xQueueGenericSend+0x266>
9000fd66:	e7a6      	b.n	9000fcb6 <xQueueGenericSend+0x252>

9000fd68 <xQueueCreateMutexStatic>:
		configASSERT( pxStaticQueue != NULL );
9000fd68:	b179      	cbz	r1, 9000fd8a <xQueueCreateMutexStatic+0x22>
			volatile size_t xSize = sizeof( StaticQueue_t );
9000fd6a:	2350      	movs	r3, #80	; 0x50
	{
9000fd6c:	b570      	push	{r4, r5, r6, lr}
9000fd6e:	b082      	sub	sp, #8
			volatile size_t xSize = sizeof( StaticQueue_t );
9000fd70:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
9000fd72:	9b01      	ldr	r3, [sp, #4]
9000fd74:	2b50      	cmp	r3, #80	; 0x50
9000fd76:	d011      	beq.n	9000fd9c <xQueueCreateMutexStatic+0x34>
9000fd78:	f04f 0350 	mov.w	r3, #80	; 0x50
9000fd7c:	f383 8811 	msr	BASEPRI, r3
9000fd80:	f3bf 8f6f 	isb	sy
9000fd84:	f3bf 8f4f 	dsb	sy
9000fd88:	e7fe      	b.n	9000fd88 <xQueueCreateMutexStatic+0x20>
9000fd8a:	f04f 0350 	mov.w	r3, #80	; 0x50
9000fd8e:	f383 8811 	msr	BASEPRI, r3
9000fd92:	f3bf 8f6f 	isb	sy
9000fd96:	f3bf 8f4f 	dsb	sy
		configASSERT( pxStaticQueue != NULL );
9000fd9a:	e7fe      	b.n	9000fd9a <xQueueCreateMutexStatic+0x32>
	pxNewQueue->uxItemSize = uxItemSize;
9000fd9c:	2600      	movs	r6, #0
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
9000fd9e:	2301      	movs	r3, #1
9000fda0:	460c      	mov	r4, r1
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
9000fda2:	6009      	str	r1, [r1, #0]
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
9000fda4:	f881 3046 	strb.w	r3, [r1, #70]	; 0x46
9000fda8:	4605      	mov	r5, r0
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
9000fdaa:	9a01      	ldr	r2, [sp, #4]
	pxNewQueue->uxItemSize = uxItemSize;
9000fdac:	e9c1 360f 	strd	r3, r6, [r1, #60]	; 0x3c
	taskENTER_CRITICAL();
9000fdb0:	f7ff fb60 	bl	9000f474 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000fdb4:	6821      	ldr	r1, [r4, #0]
		pxQueue->cRxLock = queueUNLOCKED;
9000fdb6:	23ff      	movs	r3, #255	; 0xff
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
9000fdb8:	63a6      	str	r6, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
9000fdba:	6061      	str	r1, [r4, #4]
		pxQueue->cRxLock = queueUNLOCKED;
9000fdbc:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
9000fdc0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000fdc4:	e9d4 200f 	ldrd	r2, r0, [r4, #60]	; 0x3c
9000fdc8:	fb00 f202 	mul.w	r2, r0, r2
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000fdcc:	1a10      	subs	r0, r2, r0
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000fdce:	440a      	add	r2, r1
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000fdd0:	4401      	add	r1, r0
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
9000fdd2:	f104 0010 	add.w	r0, r4, #16
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000fdd6:	e9c4 2102 	strd	r2, r1, [r4, #8]
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
9000fdda:	f7ff fa93 	bl	9000f304 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
9000fdde:	f104 0024 	add.w	r0, r4, #36	; 0x24
9000fde2:	f7ff fa8f 	bl	9000f304 <vListInitialise>
	taskEXIT_CRITICAL();
9000fde6:	f7ff fb67 	bl	9000f4b8 <vPortExitCritical>
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
9000fdea:	4633      	mov	r3, r6
9000fdec:	4632      	mov	r2, r6
9000fdee:	4631      	mov	r1, r6
9000fdf0:	4620      	mov	r0, r4
		pxNewQueue->ucQueueType = ucQueueType;
9000fdf2:	f884 504c 	strb.w	r5, [r4, #76]	; 0x4c
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
9000fdf6:	60a6      	str	r6, [r4, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
9000fdf8:	6026      	str	r6, [r4, #0]
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
9000fdfa:	60e6      	str	r6, [r4, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
9000fdfc:	f7ff fe32 	bl	9000fa64 <xQueueGenericSend>
	}
9000fe00:	4620      	mov	r0, r4
9000fe02:	b002      	add	sp, #8
9000fe04:	bd70      	pop	{r4, r5, r6, pc}
9000fe06:	bf00      	nop

9000fe08 <xQueueGiveMutexRecursive>:
	{
9000fe08:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxMutex );
9000fe0a:	b138      	cbz	r0, 9000fe1c <xQueueGiveMutexRecursive+0x14>
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
9000fe0c:	6885      	ldr	r5, [r0, #8]
9000fe0e:	4604      	mov	r4, r0
9000fe10:	f001 fb8c 	bl	9001152c <xTaskGetCurrentTaskHandle>
9000fe14:	4285      	cmp	r5, r0
9000fe16:	d00a      	beq.n	9000fe2e <xQueueGiveMutexRecursive+0x26>
			xReturn = pdFAIL;
9000fe18:	2000      	movs	r0, #0
	}
9000fe1a:	bd38      	pop	{r3, r4, r5, pc}
9000fe1c:	f04f 0350 	mov.w	r3, #80	; 0x50
9000fe20:	f383 8811 	msr	BASEPRI, r3
9000fe24:	f3bf 8f6f 	isb	sy
9000fe28:	f3bf 8f4f 	dsb	sy
		configASSERT( pxMutex );
9000fe2c:	e7fe      	b.n	9000fe2c <xQueueGiveMutexRecursive+0x24>
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
9000fe2e:	68e3      	ldr	r3, [r4, #12]
9000fe30:	3b01      	subs	r3, #1
9000fe32:	60e3      	str	r3, [r4, #12]
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
9000fe34:	b10b      	cbz	r3, 9000fe3a <xQueueGiveMutexRecursive+0x32>
			xReturn = pdPASS;
9000fe36:	2001      	movs	r0, #1
	}
9000fe38:	bd38      	pop	{r3, r4, r5, pc}
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
9000fe3a:	461a      	mov	r2, r3
9000fe3c:	4619      	mov	r1, r3
9000fe3e:	4620      	mov	r0, r4
9000fe40:	f7ff fe10 	bl	9000fa64 <xQueueGenericSend>
			xReturn = pdPASS;
9000fe44:	2001      	movs	r0, #1
	}
9000fe46:	bd38      	pop	{r3, r4, r5, pc}

9000fe48 <xQueueCreateMutex>:
	{
9000fe48:	b570      	push	{r4, r5, r6, lr}
9000fe4a:	4605      	mov	r5, r0
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
9000fe4c:	2050      	movs	r0, #80	; 0x50
9000fe4e:	f7ff f937 	bl	9000f0c0 <pvPortMalloc>
		if( pxNewQueue != NULL )
9000fe52:	4604      	mov	r4, r0
9000fe54:	b370      	cbz	r0, 9000feb4 <xQueueCreateMutex+0x6c>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
9000fe56:	2600      	movs	r6, #0
	pxNewQueue->uxLength = uxQueueLength;
9000fe58:	2301      	movs	r3, #1
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
9000fe5a:	6020      	str	r0, [r4, #0]
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
9000fe5c:	f880 6046 	strb.w	r6, [r0, #70]	; 0x46
	pxNewQueue->uxItemSize = uxItemSize;
9000fe60:	e9c0 360f 	strd	r3, r6, [r0, #60]	; 0x3c
	taskENTER_CRITICAL();
9000fe64:	f7ff fb06 	bl	9000f474 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000fe68:	6821      	ldr	r1, [r4, #0]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
9000fe6a:	63a6      	str	r6, [r4, #56]	; 0x38
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
9000fe6c:	f104 0010 	add.w	r0, r4, #16
		pxQueue->pcWriteTo = pxQueue->pcHead;
9000fe70:	6061      	str	r1, [r4, #4]
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000fe72:	e9d4 230f 	ldrd	r2, r3, [r4, #60]	; 0x3c
9000fe76:	fb03 f202 	mul.w	r2, r3, r2
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000fe7a:	1ad3      	subs	r3, r2, r3
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000fe7c:	440a      	add	r2, r1
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000fe7e:	4419      	add	r1, r3
		pxQueue->cRxLock = queueUNLOCKED;
9000fe80:	23ff      	movs	r3, #255	; 0xff
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000fe82:	e9c4 2102 	strd	r2, r1, [r4, #8]
		pxQueue->cRxLock = queueUNLOCKED;
9000fe86:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
9000fe8a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
9000fe8e:	f7ff fa39 	bl	9000f304 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
9000fe92:	f104 0024 	add.w	r0, r4, #36	; 0x24
9000fe96:	f7ff fa35 	bl	9000f304 <vListInitialise>
	taskEXIT_CRITICAL();
9000fe9a:	f7ff fb0d 	bl	9000f4b8 <vPortExitCritical>
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
9000fe9e:	4633      	mov	r3, r6
9000fea0:	4632      	mov	r2, r6
9000fea2:	4631      	mov	r1, r6
9000fea4:	4620      	mov	r0, r4
		pxNewQueue->ucQueueType = ucQueueType;
9000fea6:	f884 504c 	strb.w	r5, [r4, #76]	; 0x4c
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
9000feaa:	60a6      	str	r6, [r4, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
9000feac:	6026      	str	r6, [r4, #0]
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
9000feae:	60e6      	str	r6, [r4, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
9000feb0:	f7ff fdd8 	bl	9000fa64 <xQueueGenericSend>
	}
9000feb4:	4620      	mov	r0, r4
9000feb6:	bd70      	pop	{r4, r5, r6, pc}

9000feb8 <xQueueGenericSendFromISR>:
	configASSERT( pxQueue );
9000feb8:	2800      	cmp	r0, #0
9000feba:	d04e      	beq.n	9000ff5a <xQueueGenericSendFromISR+0xa2>
{
9000febc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
9000fec0:	460e      	mov	r6, r1
9000fec2:	4604      	mov	r4, r0
9000fec4:	4617      	mov	r7, r2
9000fec6:	461d      	mov	r5, r3
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
9000fec8:	b339      	cbz	r1, 9000ff1a <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
9000feca:	2d02      	cmp	r5, #2
9000fecc:	d10b      	bne.n	9000fee6 <xQueueGenericSendFromISR+0x2e>
9000fece:	6be3      	ldr	r3, [r4, #60]	; 0x3c
9000fed0:	2b01      	cmp	r3, #1
9000fed2:	d008      	beq.n	9000fee6 <xQueueGenericSendFromISR+0x2e>
9000fed4:	f04f 0350 	mov.w	r3, #80	; 0x50
9000fed8:	f383 8811 	msr	BASEPRI, r3
9000fedc:	f3bf 8f6f 	isb	sy
9000fee0:	f3bf 8f4f 	dsb	sy
9000fee4:	e7fe      	b.n	9000fee4 <xQueueGenericSendFromISR+0x2c>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
9000fee6:	f7ff fbf7 	bl	9000f6d8 <vPortValidateInterruptPriority>
	__asm volatile
9000feea:	f3ef 8811 	mrs	r8, BASEPRI
9000feee:	f04f 0350 	mov.w	r3, #80	; 0x50
9000fef2:	f383 8811 	msr	BASEPRI, r3
9000fef6:	f3bf 8f6f 	isb	sy
9000fefa:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
9000fefe:	6ba2      	ldr	r2, [r4, #56]	; 0x38
9000ff00:	6be3      	ldr	r3, [r4, #60]	; 0x3c
9000ff02:	429a      	cmp	r2, r3
9000ff04:	d315      	bcc.n	9000ff32 <xQueueGenericSendFromISR+0x7a>
9000ff06:	f1a5 0002 	sub.w	r0, r5, #2
9000ff0a:	fab0 f080 	clz	r0, r0
9000ff0e:	0940      	lsrs	r0, r0, #5
9000ff10:	b978      	cbnz	r0, 9000ff32 <xQueueGenericSendFromISR+0x7a>
	__asm volatile
9000ff12:	f388 8811 	msr	BASEPRI, r8
}
9000ff16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
9000ff1a:	6c03      	ldr	r3, [r0, #64]	; 0x40
9000ff1c:	2b00      	cmp	r3, #0
9000ff1e:	d0d4      	beq.n	9000feca <xQueueGenericSendFromISR+0x12>
	__asm volatile
9000ff20:	f04f 0350 	mov.w	r3, #80	; 0x50
9000ff24:	f383 8811 	msr	BASEPRI, r3
9000ff28:	f3bf 8f6f 	isb	sy
9000ff2c:	f3bf 8f4f 	dsb	sy
9000ff30:	e7fe      	b.n	9000ff30 <xQueueGenericSendFromISR+0x78>
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
9000ff32:	462a      	mov	r2, r5
			const int8_t cTxLock = pxQueue->cTxLock;
9000ff34:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
9000ff38:	4631      	mov	r1, r6
9000ff3a:	4620      	mov	r0, r4
			const int8_t cTxLock = pxQueue->cTxLock;
9000ff3c:	b26d      	sxtb	r5, r5
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
9000ff3e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
9000ff40:	f7ff fbf8 	bl	9000f734 <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
9000ff44:	1c6b      	adds	r3, r5, #1
9000ff46:	d011      	beq.n	9000ff6c <xQueueGenericSendFromISR+0xb4>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
9000ff48:	1c6b      	adds	r3, r5, #1
			xReturn = pdPASS;
9000ff4a:	2001      	movs	r0, #1
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
9000ff4c:	b25b      	sxtb	r3, r3
9000ff4e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	__asm volatile
9000ff52:	f388 8811 	msr	BASEPRI, r8
}
9000ff56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__asm volatile
9000ff5a:	f04f 0350 	mov.w	r3, #80	; 0x50
9000ff5e:	f383 8811 	msr	BASEPRI, r3
9000ff62:	f3bf 8f6f 	isb	sy
9000ff66:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
9000ff6a:	e7fe      	b.n	9000ff6a <xQueueGenericSendFromISR+0xb2>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
9000ff6c:	6a63      	ldr	r3, [r4, #36]	; 0x24
9000ff6e:	b90b      	cbnz	r3, 9000ff74 <xQueueGenericSendFromISR+0xbc>
			xReturn = pdPASS;
9000ff70:	2001      	movs	r0, #1
9000ff72:	e7ce      	b.n	9000ff12 <xQueueGenericSendFromISR+0x5a>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
9000ff74:	f104 0024 	add.w	r0, r4, #36	; 0x24
9000ff78:	f001 fa34 	bl	900113e4 <xTaskRemoveFromEventList>
							if( pxHigherPriorityTaskWoken != NULL )
9000ff7c:	2800      	cmp	r0, #0
9000ff7e:	d0f7      	beq.n	9000ff70 <xQueueGenericSendFromISR+0xb8>
9000ff80:	2f00      	cmp	r7, #0
9000ff82:	d0f5      	beq.n	9000ff70 <xQueueGenericSendFromISR+0xb8>
								*pxHigherPriorityTaskWoken = pdTRUE;
9000ff84:	2301      	movs	r3, #1
			xReturn = pdPASS;
9000ff86:	4618      	mov	r0, r3
								*pxHigherPriorityTaskWoken = pdTRUE;
9000ff88:	603b      	str	r3, [r7, #0]
9000ff8a:	e7c2      	b.n	9000ff12 <xQueueGenericSendFromISR+0x5a>

9000ff8c <xQueueGiveFromISR>:
	configASSERT( pxQueue );
9000ff8c:	b360      	cbz	r0, 9000ffe8 <xQueueGiveFromISR+0x5c>
	configASSERT( pxQueue->uxItemSize == 0 );
9000ff8e:	6c03      	ldr	r3, [r0, #64]	; 0x40
{
9000ff90:	b570      	push	{r4, r5, r6, lr}
9000ff92:	4604      	mov	r4, r0
	configASSERT( pxQueue->uxItemSize == 0 );
9000ff94:	b143      	cbz	r3, 9000ffa8 <xQueueGiveFromISR+0x1c>
9000ff96:	f04f 0350 	mov.w	r3, #80	; 0x50
9000ff9a:	f383 8811 	msr	BASEPRI, r3
9000ff9e:	f3bf 8f6f 	isb	sy
9000ffa2:	f3bf 8f4f 	dsb	sy
9000ffa6:	e7fe      	b.n	9000ffa6 <xQueueGiveFromISR+0x1a>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
9000ffa8:	6803      	ldr	r3, [r0, #0]
9000ffaa:	460d      	mov	r5, r1
9000ffac:	b32b      	cbz	r3, 9000fffa <xQueueGiveFromISR+0x6e>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
9000ffae:	f7ff fb93 	bl	9000f6d8 <vPortValidateInterruptPriority>
	__asm volatile
9000ffb2:	f3ef 8611 	mrs	r6, BASEPRI
9000ffb6:	f04f 0350 	mov.w	r3, #80	; 0x50
9000ffba:	f383 8811 	msr	BASEPRI, r3
9000ffbe:	f3bf 8f6f 	isb	sy
9000ffc2:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
9000ffc6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
		if( uxMessagesWaiting < pxQueue->uxLength )
9000ffc8:	6be2      	ldr	r2, [r4, #60]	; 0x3c
9000ffca:	429a      	cmp	r2, r3
9000ffcc:	d921      	bls.n	90010012 <xQueueGiveFromISR+0x86>
			const int8_t cTxLock = pxQueue->cTxLock;
9000ffce:	f894 2045 	ldrb.w	r2, [r4, #69]	; 0x45
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
9000ffd2:	3301      	adds	r3, #1
			if( cTxLock == queueUNLOCKED )
9000ffd4:	2aff      	cmp	r2, #255	; 0xff
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
9000ffd6:	63a3      	str	r3, [r4, #56]	; 0x38
			const int8_t cTxLock = pxQueue->cTxLock;
9000ffd8:	b253      	sxtb	r3, r2
			if( cTxLock == queueUNLOCKED )
9000ffda:	d01e      	beq.n	9001001a <xQueueGiveFromISR+0x8e>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
9000ffdc:	3301      	adds	r3, #1
			xReturn = pdPASS;
9000ffde:	2001      	movs	r0, #1
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
9000ffe0:	b25b      	sxtb	r3, r3
9000ffe2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
9000ffe6:	e015      	b.n	90010014 <xQueueGiveFromISR+0x88>
	__asm volatile
9000ffe8:	f04f 0350 	mov.w	r3, #80	; 0x50
9000ffec:	f383 8811 	msr	BASEPRI, r3
9000fff0:	f3bf 8f6f 	isb	sy
9000fff4:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
9000fff8:	e7fe      	b.n	9000fff8 <xQueueGiveFromISR+0x6c>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
9000fffa:	6883      	ldr	r3, [r0, #8]
9000fffc:	2b00      	cmp	r3, #0
9000fffe:	d0d6      	beq.n	9000ffae <xQueueGiveFromISR+0x22>
90010000:	f04f 0350 	mov.w	r3, #80	; 0x50
90010004:	f383 8811 	msr	BASEPRI, r3
90010008:	f3bf 8f6f 	isb	sy
9001000c:	f3bf 8f4f 	dsb	sy
90010010:	e7fe      	b.n	90010010 <xQueueGiveFromISR+0x84>
			xReturn = errQUEUE_FULL;
90010012:	2000      	movs	r0, #0
	__asm volatile
90010014:	f386 8811 	msr	BASEPRI, r6
}
90010018:	bd70      	pop	{r4, r5, r6, pc}
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
9001001a:	6a63      	ldr	r3, [r4, #36]	; 0x24
9001001c:	b90b      	cbnz	r3, 90010022 <xQueueGiveFromISR+0x96>
			xReturn = pdPASS;
9001001e:	2001      	movs	r0, #1
90010020:	e7f8      	b.n	90010014 <xQueueGiveFromISR+0x88>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
90010022:	f104 0024 	add.w	r0, r4, #36	; 0x24
90010026:	f001 f9dd 	bl	900113e4 <xTaskRemoveFromEventList>
							if( pxHigherPriorityTaskWoken != NULL )
9001002a:	2d00      	cmp	r5, #0
9001002c:	d0f7      	beq.n	9001001e <xQueueGiveFromISR+0x92>
9001002e:	2800      	cmp	r0, #0
90010030:	d0f5      	beq.n	9001001e <xQueueGiveFromISR+0x92>
								*pxHigherPriorityTaskWoken = pdTRUE;
90010032:	2301      	movs	r3, #1
			xReturn = pdPASS;
90010034:	4618      	mov	r0, r3
								*pxHigherPriorityTaskWoken = pdTRUE;
90010036:	602b      	str	r3, [r5, #0]
90010038:	e7ec      	b.n	90010014 <xQueueGiveFromISR+0x88>
9001003a:	bf00      	nop

9001003c <xQueueReceive>:
{
9001003c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
90010040:	b085      	sub	sp, #20
90010042:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
90010044:	2800      	cmp	r0, #0
90010046:	f000 815c 	beq.w	90010302 <xQueueReceive+0x2c6>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
9001004a:	460f      	mov	r7, r1
9001004c:	4604      	mov	r4, r0
9001004e:	2900      	cmp	r1, #0
90010050:	d079      	beq.n	90010146 <xQueueReceive+0x10a>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
90010052:	f001 fa71 	bl	90011538 <xTaskGetSchedulerState>
90010056:	2800      	cmp	r0, #0
90010058:	f000 8081 	beq.w	9001015e <xQueueReceive+0x122>
		taskENTER_CRITICAL();
9001005c:	f7ff fa0a 	bl	9000f474 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
90010060:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
90010062:	2d00      	cmp	r5, #0
90010064:	f040 8138 	bne.w	900102d8 <xQueueReceive+0x29c>
				if( xTicksToWait == ( TickType_t ) 0 )
90010068:	9b01      	ldr	r3, [sp, #4]
9001006a:	2b00      	cmp	r3, #0
9001006c:	f000 80d5 	beq.w	9001021a <xQueueReceive+0x1de>
		prvLockQueue( pxQueue );
90010070:	46a8      	mov	r8, r5
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
90010072:	f104 0624 	add.w	r6, r4, #36	; 0x24
					vTaskInternalSetTimeOutState( &xTimeOut );
90010076:	a802      	add	r0, sp, #8
90010078:	f001 f9fe 	bl	90011478 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
9001007c:	f7ff fa1c 	bl	9000f4b8 <vPortExitCritical>
		vTaskSuspendAll();
90010080:	f001 f884 	bl	9001118c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
90010084:	f7ff f9f6 	bl	9000f474 <vPortEnterCritical>
90010088:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
9001008c:	2bff      	cmp	r3, #255	; 0xff
9001008e:	d101      	bne.n	90010094 <xQueueReceive+0x58>
90010090:	f884 8044 	strb.w	r8, [r4, #68]	; 0x44
90010094:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
90010098:	2bff      	cmp	r3, #255	; 0xff
9001009a:	d101      	bne.n	900100a0 <xQueueReceive+0x64>
9001009c:	f884 8045 	strb.w	r8, [r4, #69]	; 0x45
900100a0:	f7ff fa0a 	bl	9000f4b8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
900100a4:	a901      	add	r1, sp, #4
900100a6:	a802      	add	r0, sp, #8
900100a8:	f001 f9f2 	bl	90011490 <xTaskCheckForTimeOut>
900100ac:	2800      	cmp	r0, #0
900100ae:	d163      	bne.n	90010178 <xQueueReceive+0x13c>
	taskENTER_CRITICAL();
900100b0:	f7ff f9e0 	bl	9000f474 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
900100b4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
900100b6:	2b00      	cmp	r3, #0
900100b8:	f000 80b5 	beq.w	90010226 <xQueueReceive+0x1ea>
	taskEXIT_CRITICAL();
900100bc:	f7ff f9fc 	bl	9000f4b8 <vPortExitCritical>
	taskENTER_CRITICAL();
900100c0:	f7ff f9d8 	bl	9000f474 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
900100c4:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
900100c8:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
900100ca:	2d00      	cmp	r5, #0
900100cc:	dc04      	bgt.n	900100d8 <xQueueReceive+0x9c>
900100ce:	e011      	b.n	900100f4 <xQueueReceive+0xb8>
			--cTxLock;
900100d0:	1e6b      	subs	r3, r5, #1
900100d2:	b2da      	uxtb	r2, r3
900100d4:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
900100d6:	b16a      	cbz	r2, 900100f4 <xQueueReceive+0xb8>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
900100d8:	6a63      	ldr	r3, [r4, #36]	; 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
900100da:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
900100dc:	b153      	cbz	r3, 900100f4 <xQueueReceive+0xb8>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
900100de:	f001 f981 	bl	900113e4 <xTaskRemoveFromEventList>
900100e2:	2800      	cmp	r0, #0
900100e4:	d0f4      	beq.n	900100d0 <xQueueReceive+0x94>
						vTaskMissedYield();
900100e6:	f001 fa1b 	bl	90011520 <vTaskMissedYield>
			--cTxLock;
900100ea:	1e6b      	subs	r3, r5, #1
900100ec:	b2da      	uxtb	r2, r3
900100ee:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
900100f0:	2a00      	cmp	r2, #0
900100f2:	d1f1      	bne.n	900100d8 <xQueueReceive+0x9c>
		pxQueue->cTxLock = queueUNLOCKED;
900100f4:	23ff      	movs	r3, #255	; 0xff
900100f6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
900100fa:	f7ff f9dd 	bl	9000f4b8 <vPortExitCritical>
	taskENTER_CRITICAL();
900100fe:	f7ff f9b9 	bl	9000f474 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
90010102:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
90010106:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
90010108:	2d00      	cmp	r5, #0
9001010a:	dd14      	ble.n	90010136 <xQueueReceive+0xfa>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9001010c:	f104 0910 	add.w	r9, r4, #16
90010110:	e003      	b.n	9001011a <xQueueReceive+0xde>
				--cRxLock;
90010112:	1e6b      	subs	r3, r5, #1
90010114:	b2da      	uxtb	r2, r3
90010116:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
90010118:	b16a      	cbz	r2, 90010136 <xQueueReceive+0xfa>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
9001011a:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9001011c:	4648      	mov	r0, r9
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
9001011e:	b153      	cbz	r3, 90010136 <xQueueReceive+0xfa>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
90010120:	f001 f960 	bl	900113e4 <xTaskRemoveFromEventList>
90010124:	2800      	cmp	r0, #0
90010126:	d0f4      	beq.n	90010112 <xQueueReceive+0xd6>
					vTaskMissedYield();
90010128:	f001 f9fa 	bl	90011520 <vTaskMissedYield>
				--cRxLock;
9001012c:	1e6b      	subs	r3, r5, #1
9001012e:	b2da      	uxtb	r2, r3
90010130:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
90010132:	2a00      	cmp	r2, #0
90010134:	d1f1      	bne.n	9001011a <xQueueReceive+0xde>
		pxQueue->cRxLock = queueUNLOCKED;
90010136:	23ff      	movs	r3, #255	; 0xff
90010138:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
9001013c:	f7ff f9bc 	bl	9000f4b8 <vPortExitCritical>
				( void ) xTaskResumeAll();
90010140:	f001 f82c 	bl	9001119c <xTaskResumeAll>
		taskENTER_CRITICAL();
90010144:	e060      	b.n	90010208 <xQueueReceive+0x1cc>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
90010146:	6c03      	ldr	r3, [r0, #64]	; 0x40
90010148:	2b00      	cmp	r3, #0
9001014a:	d082      	beq.n	90010052 <xQueueReceive+0x16>
	__asm volatile
9001014c:	f04f 0350 	mov.w	r3, #80	; 0x50
90010150:	f383 8811 	msr	BASEPRI, r3
90010154:	f3bf 8f6f 	isb	sy
90010158:	f3bf 8f4f 	dsb	sy
9001015c:	e7fe      	b.n	9001015c <xQueueReceive+0x120>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
9001015e:	9b01      	ldr	r3, [sp, #4]
90010160:	2b00      	cmp	r3, #0
90010162:	f43f af7b 	beq.w	9001005c <xQueueReceive+0x20>
90010166:	f04f 0350 	mov.w	r3, #80	; 0x50
9001016a:	f383 8811 	msr	BASEPRI, r3
9001016e:	f3bf 8f6f 	isb	sy
90010172:	f3bf 8f4f 	dsb	sy
90010176:	e7fe      	b.n	90010176 <xQueueReceive+0x13a>
	taskENTER_CRITICAL();
90010178:	f7ff f97c 	bl	9000f474 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
9001017c:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
90010180:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
90010182:	2d00      	cmp	r5, #0
90010184:	dc04      	bgt.n	90010190 <xQueueReceive+0x154>
90010186:	e011      	b.n	900101ac <xQueueReceive+0x170>
			--cTxLock;
90010188:	1e6b      	subs	r3, r5, #1
9001018a:	b2da      	uxtb	r2, r3
9001018c:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
9001018e:	b16a      	cbz	r2, 900101ac <xQueueReceive+0x170>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
90010190:	6a63      	ldr	r3, [r4, #36]	; 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
90010192:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
90010194:	b153      	cbz	r3, 900101ac <xQueueReceive+0x170>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
90010196:	f001 f925 	bl	900113e4 <xTaskRemoveFromEventList>
9001019a:	2800      	cmp	r0, #0
9001019c:	d0f4      	beq.n	90010188 <xQueueReceive+0x14c>
						vTaskMissedYield();
9001019e:	f001 f9bf 	bl	90011520 <vTaskMissedYield>
			--cTxLock;
900101a2:	1e6b      	subs	r3, r5, #1
900101a4:	b2da      	uxtb	r2, r3
900101a6:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
900101a8:	2a00      	cmp	r2, #0
900101aa:	d1f1      	bne.n	90010190 <xQueueReceive+0x154>
		pxQueue->cTxLock = queueUNLOCKED;
900101ac:	23ff      	movs	r3, #255	; 0xff
900101ae:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
900101b2:	f7ff f981 	bl	9000f4b8 <vPortExitCritical>
	taskENTER_CRITICAL();
900101b6:	f7ff f95d 	bl	9000f474 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
900101ba:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
900101be:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
900101c0:	2d00      	cmp	r5, #0
900101c2:	dd14      	ble.n	900101ee <xQueueReceive+0x1b2>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
900101c4:	f104 0910 	add.w	r9, r4, #16
900101c8:	e003      	b.n	900101d2 <xQueueReceive+0x196>
				--cRxLock;
900101ca:	1e6b      	subs	r3, r5, #1
900101cc:	b2da      	uxtb	r2, r3
900101ce:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
900101d0:	b16a      	cbz	r2, 900101ee <xQueueReceive+0x1b2>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
900101d2:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
900101d4:	4648      	mov	r0, r9
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
900101d6:	b153      	cbz	r3, 900101ee <xQueueReceive+0x1b2>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
900101d8:	f001 f904 	bl	900113e4 <xTaskRemoveFromEventList>
900101dc:	2800      	cmp	r0, #0
900101de:	d0f4      	beq.n	900101ca <xQueueReceive+0x18e>
					vTaskMissedYield();
900101e0:	f001 f99e 	bl	90011520 <vTaskMissedYield>
				--cRxLock;
900101e4:	1e6b      	subs	r3, r5, #1
900101e6:	b2da      	uxtb	r2, r3
900101e8:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
900101ea:	2a00      	cmp	r2, #0
900101ec:	d1f1      	bne.n	900101d2 <xQueueReceive+0x196>
		pxQueue->cRxLock = queueUNLOCKED;
900101ee:	23ff      	movs	r3, #255	; 0xff
900101f0:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
900101f4:	f7ff f960 	bl	9000f4b8 <vPortExitCritical>
			( void ) xTaskResumeAll();
900101f8:	f000 ffd0 	bl	9001119c <xTaskResumeAll>
	taskENTER_CRITICAL();
900101fc:	f7ff f93a 	bl	9000f474 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
90010200:	6ba3      	ldr	r3, [r4, #56]	; 0x38
90010202:	b153      	cbz	r3, 9001021a <xQueueReceive+0x1de>
	taskEXIT_CRITICAL();
90010204:	f7ff f958 	bl	9000f4b8 <vPortExitCritical>
		taskENTER_CRITICAL();
90010208:	f7ff f934 	bl	9000f474 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
9001020c:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
9001020e:	2d00      	cmp	r5, #0
90010210:	d162      	bne.n	900102d8 <xQueueReceive+0x29c>
				if( xTicksToWait == ( TickType_t ) 0 )
90010212:	9b01      	ldr	r3, [sp, #4]
90010214:	2b00      	cmp	r3, #0
90010216:	f47f af31 	bne.w	9001007c <xQueueReceive+0x40>
					taskEXIT_CRITICAL();
9001021a:	f7ff f94d 	bl	9000f4b8 <vPortExitCritical>
					return errQUEUE_EMPTY;
9001021e:	2000      	movs	r0, #0
}
90010220:	b005      	add	sp, #20
90010222:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	taskEXIT_CRITICAL();
90010226:	f7ff f947 	bl	9000f4b8 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
9001022a:	9901      	ldr	r1, [sp, #4]
9001022c:	4630      	mov	r0, r6
9001022e:	f001 f84b 	bl	900112c8 <vTaskPlaceOnEventList>
	taskENTER_CRITICAL();
90010232:	f7ff f91f 	bl	9000f474 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
90010236:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
9001023a:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
9001023c:	2d00      	cmp	r5, #0
9001023e:	dc04      	bgt.n	9001024a <xQueueReceive+0x20e>
90010240:	e011      	b.n	90010266 <xQueueReceive+0x22a>
			--cTxLock;
90010242:	1e6b      	subs	r3, r5, #1
90010244:	b2da      	uxtb	r2, r3
90010246:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
90010248:	b16a      	cbz	r2, 90010266 <xQueueReceive+0x22a>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
9001024a:	6a63      	ldr	r3, [r4, #36]	; 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
9001024c:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
9001024e:	b153      	cbz	r3, 90010266 <xQueueReceive+0x22a>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
90010250:	f001 f8c8 	bl	900113e4 <xTaskRemoveFromEventList>
90010254:	2800      	cmp	r0, #0
90010256:	d0f4      	beq.n	90010242 <xQueueReceive+0x206>
						vTaskMissedYield();
90010258:	f001 f962 	bl	90011520 <vTaskMissedYield>
			--cTxLock;
9001025c:	1e6b      	subs	r3, r5, #1
9001025e:	b2da      	uxtb	r2, r3
90010260:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
90010262:	2a00      	cmp	r2, #0
90010264:	d1f1      	bne.n	9001024a <xQueueReceive+0x20e>
		pxQueue->cTxLock = queueUNLOCKED;
90010266:	23ff      	movs	r3, #255	; 0xff
90010268:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
9001026c:	f7ff f924 	bl	9000f4b8 <vPortExitCritical>
	taskENTER_CRITICAL();
90010270:	f7ff f900 	bl	9000f474 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
90010274:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
90010278:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
9001027a:	2d00      	cmp	r5, #0
9001027c:	dd14      	ble.n	900102a8 <xQueueReceive+0x26c>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9001027e:	f104 0910 	add.w	r9, r4, #16
90010282:	e003      	b.n	9001028c <xQueueReceive+0x250>
				--cRxLock;
90010284:	1e6b      	subs	r3, r5, #1
90010286:	b2da      	uxtb	r2, r3
90010288:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
9001028a:	b16a      	cbz	r2, 900102a8 <xQueueReceive+0x26c>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
9001028c:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9001028e:	4648      	mov	r0, r9
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
90010290:	b153      	cbz	r3, 900102a8 <xQueueReceive+0x26c>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
90010292:	f001 f8a7 	bl	900113e4 <xTaskRemoveFromEventList>
90010296:	2800      	cmp	r0, #0
90010298:	d0f4      	beq.n	90010284 <xQueueReceive+0x248>
					vTaskMissedYield();
9001029a:	f001 f941 	bl	90011520 <vTaskMissedYield>
				--cRxLock;
9001029e:	1e6b      	subs	r3, r5, #1
900102a0:	b2da      	uxtb	r2, r3
900102a2:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
900102a4:	2a00      	cmp	r2, #0
900102a6:	d1f1      	bne.n	9001028c <xQueueReceive+0x250>
		pxQueue->cRxLock = queueUNLOCKED;
900102a8:	23ff      	movs	r3, #255	; 0xff
900102aa:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
900102ae:	f7ff f903 	bl	9000f4b8 <vPortExitCritical>
				if( xTaskResumeAll() == pdFALSE )
900102b2:	f000 ff73 	bl	9001119c <xTaskResumeAll>
900102b6:	2800      	cmp	r0, #0
900102b8:	d1a6      	bne.n	90010208 <xQueueReceive+0x1cc>
					portYIELD_WITHIN_API();
900102ba:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
900102be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
900102c2:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
900102c6:	f3bf 8f4f 	dsb	sy
900102ca:	f3bf 8f6f 	isb	sy
		taskENTER_CRITICAL();
900102ce:	f7ff f8d1 	bl	9000f474 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
900102d2:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
900102d4:	2d00      	cmp	r5, #0
900102d6:	d09c      	beq.n	90010212 <xQueueReceive+0x1d6>
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
900102d8:	6c22      	ldr	r2, [r4, #64]	; 0x40
900102da:	b152      	cbz	r2, 900102f2 <xQueueReceive+0x2b6>
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
900102dc:	68e1      	ldr	r1, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
900102de:	68a3      	ldr	r3, [r4, #8]
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
900102e0:	4411      	add	r1, r2
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
900102e2:	4299      	cmp	r1, r3
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
900102e4:	60e1      	str	r1, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
900102e6:	d301      	bcc.n	900102ec <xQueueReceive+0x2b0>
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
900102e8:	6821      	ldr	r1, [r4, #0]
900102ea:	60e1      	str	r1, [r4, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
900102ec:	4638      	mov	r0, r7
900102ee:	f017 fd46 	bl	90027d7e <memcpy>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
900102f2:	3d01      	subs	r5, #1
900102f4:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
900102f6:	6923      	ldr	r3, [r4, #16]
900102f8:	b963      	cbnz	r3, 90010314 <xQueueReceive+0x2d8>
				taskEXIT_CRITICAL();
900102fa:	f7ff f8dd 	bl	9000f4b8 <vPortExitCritical>
				return pdPASS;
900102fe:	2001      	movs	r0, #1
90010300:	e78e      	b.n	90010220 <xQueueReceive+0x1e4>
90010302:	f04f 0350 	mov.w	r3, #80	; 0x50
90010306:	f383 8811 	msr	BASEPRI, r3
9001030a:	f3bf 8f6f 	isb	sy
9001030e:	f3bf 8f4f 	dsb	sy
	configASSERT( ( pxQueue ) );
90010312:	e7fe      	b.n	90010312 <xQueueReceive+0x2d6>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
90010314:	f104 0010 	add.w	r0, r4, #16
90010318:	f001 f864 	bl	900113e4 <xTaskRemoveFromEventList>
9001031c:	2800      	cmp	r0, #0
9001031e:	d0ec      	beq.n	900102fa <xQueueReceive+0x2be>
						queueYIELD_IF_USING_PREEMPTION();
90010320:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
90010324:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
90010328:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
9001032c:	f3bf 8f4f 	dsb	sy
90010330:	f3bf 8f6f 	isb	sy
90010334:	e7e1      	b.n	900102fa <xQueueReceive+0x2be>
90010336:	bf00      	nop

90010338 <xQueueSemaphoreTake>:
{
90010338:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
9001033c:	b084      	sub	sp, #16
9001033e:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
90010340:	2800      	cmp	r0, #0
90010342:	d05c      	beq.n	900103fe <xQueueSemaphoreTake+0xc6>
	configASSERT( pxQueue->uxItemSize == 0 );
90010344:	6c07      	ldr	r7, [r0, #64]	; 0x40
90010346:	4604      	mov	r4, r0
90010348:	b147      	cbz	r7, 9001035c <xQueueSemaphoreTake+0x24>
9001034a:	f04f 0350 	mov.w	r3, #80	; 0x50
9001034e:	f383 8811 	msr	BASEPRI, r3
90010352:	f3bf 8f6f 	isb	sy
90010356:	f3bf 8f4f 	dsb	sy
9001035a:	e7fe      	b.n	9001035a <xQueueSemaphoreTake+0x22>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
9001035c:	f001 f8ec 	bl	90011538 <xTaskGetSchedulerState>
90010360:	4605      	mov	r5, r0
90010362:	2800      	cmp	r0, #0
90010364:	d054      	beq.n	90010410 <xQueueSemaphoreTake+0xd8>
90010366:	463d      	mov	r5, r7
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
90010368:	f104 0624 	add.w	r6, r4, #36	; 0x24
		taskENTER_CRITICAL();
9001036c:	f7ff f882 	bl	9000f474 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
90010370:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
90010372:	2b00      	cmp	r3, #0
90010374:	f040 8149 	bne.w	9001060a <xQueueSemaphoreTake+0x2d2>
				if( xTicksToWait == ( TickType_t ) 0 )
90010378:	9b01      	ldr	r3, [sp, #4]
9001037a:	2b00      	cmp	r3, #0
9001037c:	f000 813a 	beq.w	900105f4 <xQueueSemaphoreTake+0x2bc>
				else if( xEntryTimeSet == pdFALSE )
90010380:	2d00      	cmp	r5, #0
90010382:	f000 809d 	beq.w	900104c0 <xQueueSemaphoreTake+0x188>
		taskEXIT_CRITICAL();
90010386:	f7ff f897 	bl	9000f4b8 <vPortExitCritical>
		vTaskSuspendAll();
9001038a:	f000 feff 	bl	9001118c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
9001038e:	f7ff f871 	bl	9000f474 <vPortEnterCritical>
90010392:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
90010396:	2bff      	cmp	r3, #255	; 0xff
90010398:	d102      	bne.n	900103a0 <xQueueSemaphoreTake+0x68>
9001039a:	2300      	movs	r3, #0
9001039c:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
900103a0:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
900103a4:	2bff      	cmp	r3, #255	; 0xff
900103a6:	d102      	bne.n	900103ae <xQueueSemaphoreTake+0x76>
900103a8:	2300      	movs	r3, #0
900103aa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
900103ae:	f7ff f883 	bl	9000f4b8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
900103b2:	a901      	add	r1, sp, #4
900103b4:	a802      	add	r0, sp, #8
900103b6:	f001 f86b 	bl	90011490 <xTaskCheckForTimeOut>
900103ba:	2800      	cmp	r0, #0
900103bc:	d135      	bne.n	9001042a <xQueueSemaphoreTake+0xf2>
	taskENTER_CRITICAL();
900103be:	f7ff f859 	bl	9000f474 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
900103c2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
900103c4:	2b00      	cmp	r3, #0
900103c6:	f000 80a4 	beq.w	90010512 <xQueueSemaphoreTake+0x1da>
	taskEXIT_CRITICAL();
900103ca:	f7ff f875 	bl	9000f4b8 <vPortExitCritical>
	taskENTER_CRITICAL();
900103ce:	f7ff f851 	bl	9000f474 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
900103d2:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
900103d6:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
900103d8:	2d00      	cmp	r5, #0
900103da:	dc05      	bgt.n	900103e8 <xQueueSemaphoreTake+0xb0>
900103dc:	e074      	b.n	900104c8 <xQueueSemaphoreTake+0x190>
			--cTxLock;
900103de:	1e6b      	subs	r3, r5, #1
900103e0:	b2da      	uxtb	r2, r3
900103e2:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
900103e4:	2a00      	cmp	r2, #0
900103e6:	d06f      	beq.n	900104c8 <xQueueSemaphoreTake+0x190>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
900103e8:	6a63      	ldr	r3, [r4, #36]	; 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
900103ea:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
900103ec:	2b00      	cmp	r3, #0
900103ee:	d06b      	beq.n	900104c8 <xQueueSemaphoreTake+0x190>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
900103f0:	f000 fff8 	bl	900113e4 <xTaskRemoveFromEventList>
900103f4:	2800      	cmp	r0, #0
900103f6:	d0f2      	beq.n	900103de <xQueueSemaphoreTake+0xa6>
						vTaskMissedYield();
900103f8:	f001 f892 	bl	90011520 <vTaskMissedYield>
900103fc:	e7ef      	b.n	900103de <xQueueSemaphoreTake+0xa6>
900103fe:	f04f 0350 	mov.w	r3, #80	; 0x50
90010402:	f383 8811 	msr	BASEPRI, r3
90010406:	f3bf 8f6f 	isb	sy
9001040a:	f3bf 8f4f 	dsb	sy
	configASSERT( ( pxQueue ) );
9001040e:	e7fe      	b.n	9001040e <xQueueSemaphoreTake+0xd6>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
90010410:	9b01      	ldr	r3, [sp, #4]
90010412:	2b00      	cmp	r3, #0
90010414:	f000 80d4 	beq.w	900105c0 <xQueueSemaphoreTake+0x288>
90010418:	f04f 0350 	mov.w	r3, #80	; 0x50
9001041c:	f383 8811 	msr	BASEPRI, r3
90010420:	f3bf 8f6f 	isb	sy
90010424:	f3bf 8f4f 	dsb	sy
90010428:	e7fe      	b.n	90010428 <xQueueSemaphoreTake+0xf0>
	taskENTER_CRITICAL();
9001042a:	f7ff f823 	bl	9000f474 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
9001042e:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
90010432:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
90010434:	2d00      	cmp	r5, #0
90010436:	dc04      	bgt.n	90010442 <xQueueSemaphoreTake+0x10a>
90010438:	e011      	b.n	9001045e <xQueueSemaphoreTake+0x126>
			--cTxLock;
9001043a:	1e6b      	subs	r3, r5, #1
9001043c:	b2da      	uxtb	r2, r3
9001043e:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
90010440:	b16a      	cbz	r2, 9001045e <xQueueSemaphoreTake+0x126>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
90010442:	6a63      	ldr	r3, [r4, #36]	; 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
90010444:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
90010446:	b153      	cbz	r3, 9001045e <xQueueSemaphoreTake+0x126>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
90010448:	f000 ffcc 	bl	900113e4 <xTaskRemoveFromEventList>
9001044c:	2800      	cmp	r0, #0
9001044e:	d0f4      	beq.n	9001043a <xQueueSemaphoreTake+0x102>
						vTaskMissedYield();
90010450:	f001 f866 	bl	90011520 <vTaskMissedYield>
			--cTxLock;
90010454:	1e6b      	subs	r3, r5, #1
90010456:	b2da      	uxtb	r2, r3
90010458:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
9001045a:	2a00      	cmp	r2, #0
9001045c:	d1f1      	bne.n	90010442 <xQueueSemaphoreTake+0x10a>
		pxQueue->cTxLock = queueUNLOCKED;
9001045e:	23ff      	movs	r3, #255	; 0xff
90010460:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
90010464:	f7ff f828 	bl	9000f4b8 <vPortExitCritical>
	taskENTER_CRITICAL();
90010468:	f7ff f804 	bl	9000f474 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
9001046c:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
90010470:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
90010472:	2d00      	cmp	r5, #0
90010474:	dd14      	ble.n	900104a0 <xQueueSemaphoreTake+0x168>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
90010476:	f104 0810 	add.w	r8, r4, #16
9001047a:	e003      	b.n	90010484 <xQueueSemaphoreTake+0x14c>
				--cRxLock;
9001047c:	1e6b      	subs	r3, r5, #1
9001047e:	b2da      	uxtb	r2, r3
90010480:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
90010482:	b16a      	cbz	r2, 900104a0 <xQueueSemaphoreTake+0x168>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
90010484:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
90010486:	4640      	mov	r0, r8
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
90010488:	b153      	cbz	r3, 900104a0 <xQueueSemaphoreTake+0x168>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9001048a:	f000 ffab 	bl	900113e4 <xTaskRemoveFromEventList>
9001048e:	2800      	cmp	r0, #0
90010490:	d0f4      	beq.n	9001047c <xQueueSemaphoreTake+0x144>
					vTaskMissedYield();
90010492:	f001 f845 	bl	90011520 <vTaskMissedYield>
				--cRxLock;
90010496:	1e6b      	subs	r3, r5, #1
90010498:	b2da      	uxtb	r2, r3
9001049a:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
9001049c:	2a00      	cmp	r2, #0
9001049e:	d1f1      	bne.n	90010484 <xQueueSemaphoreTake+0x14c>
		pxQueue->cRxLock = queueUNLOCKED;
900104a0:	23ff      	movs	r3, #255	; 0xff
900104a2:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
900104a6:	f7ff f807 	bl	9000f4b8 <vPortExitCritical>
			( void ) xTaskResumeAll();
900104aa:	f000 fe77 	bl	9001119c <xTaskResumeAll>
	taskENTER_CRITICAL();
900104ae:	f7fe ffe1 	bl	9000f474 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
900104b2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
900104b4:	2b00      	cmp	r3, #0
900104b6:	d07c      	beq.n	900105b2 <xQueueSemaphoreTake+0x27a>
	taskEXIT_CRITICAL();
900104b8:	f7fe fffe 	bl	9000f4b8 <vPortExitCritical>
	return xReturn;
900104bc:	2501      	movs	r5, #1
900104be:	e755      	b.n	9001036c <xQueueSemaphoreTake+0x34>
					vTaskInternalSetTimeOutState( &xTimeOut );
900104c0:	a802      	add	r0, sp, #8
900104c2:	f000 ffd9 	bl	90011478 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
900104c6:	e75e      	b.n	90010386 <xQueueSemaphoreTake+0x4e>
		pxQueue->cTxLock = queueUNLOCKED;
900104c8:	23ff      	movs	r3, #255	; 0xff
900104ca:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
900104ce:	f7fe fff3 	bl	9000f4b8 <vPortExitCritical>
	taskENTER_CRITICAL();
900104d2:	f7fe ffcf 	bl	9000f474 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
900104d6:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
900104da:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
900104dc:	2d00      	cmp	r5, #0
900104de:	dd10      	ble.n	90010502 <xQueueSemaphoreTake+0x1ca>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
900104e0:	f104 0810 	add.w	r8, r4, #16
900104e4:	e003      	b.n	900104ee <xQueueSemaphoreTake+0x1b6>
				--cRxLock;
900104e6:	1e6b      	subs	r3, r5, #1
900104e8:	b2da      	uxtb	r2, r3
900104ea:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
900104ec:	b14a      	cbz	r2, 90010502 <xQueueSemaphoreTake+0x1ca>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
900104ee:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
900104f0:	4640      	mov	r0, r8
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
900104f2:	b133      	cbz	r3, 90010502 <xQueueSemaphoreTake+0x1ca>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
900104f4:	f000 ff76 	bl	900113e4 <xTaskRemoveFromEventList>
900104f8:	2800      	cmp	r0, #0
900104fa:	d0f4      	beq.n	900104e6 <xQueueSemaphoreTake+0x1ae>
					vTaskMissedYield();
900104fc:	f001 f810 	bl	90011520 <vTaskMissedYield>
90010500:	e7f1      	b.n	900104e6 <xQueueSemaphoreTake+0x1ae>
		pxQueue->cRxLock = queueUNLOCKED;
90010502:	23ff      	movs	r3, #255	; 0xff
90010504:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
90010508:	f7fe ffd6 	bl	9000f4b8 <vPortExitCritical>
				( void ) xTaskResumeAll();
9001050c:	f000 fe46 	bl	9001119c <xTaskResumeAll>
90010510:	e7d4      	b.n	900104bc <xQueueSemaphoreTake+0x184>
	taskEXIT_CRITICAL();
90010512:	f7fe ffd1 	bl	9000f4b8 <vPortExitCritical>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
90010516:	6823      	ldr	r3, [r4, #0]
90010518:	2b00      	cmp	r3, #0
9001051a:	d062      	beq.n	900105e2 <xQueueSemaphoreTake+0x2aa>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
9001051c:	9901      	ldr	r1, [sp, #4]
9001051e:	4630      	mov	r0, r6
90010520:	f000 fed2 	bl	900112c8 <vTaskPlaceOnEventList>
	taskENTER_CRITICAL();
90010524:	f7fe ffa6 	bl	9000f474 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
90010528:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
9001052c:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
9001052e:	2d00      	cmp	r5, #0
90010530:	dc04      	bgt.n	9001053c <xQueueSemaphoreTake+0x204>
90010532:	e00d      	b.n	90010550 <xQueueSemaphoreTake+0x218>
			--cTxLock;
90010534:	1e6b      	subs	r3, r5, #1
90010536:	b2da      	uxtb	r2, r3
90010538:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
9001053a:	b14a      	cbz	r2, 90010550 <xQueueSemaphoreTake+0x218>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
9001053c:	6a63      	ldr	r3, [r4, #36]	; 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
9001053e:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
90010540:	b133      	cbz	r3, 90010550 <xQueueSemaphoreTake+0x218>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
90010542:	f000 ff4f 	bl	900113e4 <xTaskRemoveFromEventList>
90010546:	2800      	cmp	r0, #0
90010548:	d0f4      	beq.n	90010534 <xQueueSemaphoreTake+0x1fc>
						vTaskMissedYield();
9001054a:	f000 ffe9 	bl	90011520 <vTaskMissedYield>
9001054e:	e7f1      	b.n	90010534 <xQueueSemaphoreTake+0x1fc>
		pxQueue->cTxLock = queueUNLOCKED;
90010550:	23ff      	movs	r3, #255	; 0xff
90010552:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
90010556:	f7fe ffaf 	bl	9000f4b8 <vPortExitCritical>
	taskENTER_CRITICAL();
9001055a:	f7fe ff8b 	bl	9000f474 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
9001055e:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
90010562:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
90010564:	2d00      	cmp	r5, #0
90010566:	dd10      	ble.n	9001058a <xQueueSemaphoreTake+0x252>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
90010568:	f104 0810 	add.w	r8, r4, #16
9001056c:	e003      	b.n	90010576 <xQueueSemaphoreTake+0x23e>
				--cRxLock;
9001056e:	1e6b      	subs	r3, r5, #1
90010570:	b2da      	uxtb	r2, r3
90010572:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
90010574:	b14a      	cbz	r2, 9001058a <xQueueSemaphoreTake+0x252>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
90010576:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
90010578:	4640      	mov	r0, r8
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
9001057a:	b133      	cbz	r3, 9001058a <xQueueSemaphoreTake+0x252>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9001057c:	f000 ff32 	bl	900113e4 <xTaskRemoveFromEventList>
90010580:	2800      	cmp	r0, #0
90010582:	d0f4      	beq.n	9001056e <xQueueSemaphoreTake+0x236>
					vTaskMissedYield();
90010584:	f000 ffcc 	bl	90011520 <vTaskMissedYield>
90010588:	e7f1      	b.n	9001056e <xQueueSemaphoreTake+0x236>
		pxQueue->cRxLock = queueUNLOCKED;
9001058a:	23ff      	movs	r3, #255	; 0xff
9001058c:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
90010590:	f7fe ff92 	bl	9000f4b8 <vPortExitCritical>
				if( xTaskResumeAll() == pdFALSE )
90010594:	f000 fe02 	bl	9001119c <xTaskResumeAll>
90010598:	2800      	cmp	r0, #0
9001059a:	d18f      	bne.n	900104bc <xQueueSemaphoreTake+0x184>
					portYIELD_WITHIN_API();
9001059c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
900105a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
900105a4:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
900105a8:	f3bf 8f4f 	dsb	sy
900105ac:	f3bf 8f6f 	isb	sy
900105b0:	e784      	b.n	900104bc <xQueueSemaphoreTake+0x184>
	taskEXIT_CRITICAL();
900105b2:	f7fe ff81 	bl	9000f4b8 <vPortExitCritical>
					if( xInheritanceOccurred != pdFALSE )
900105b6:	b92f      	cbnz	r7, 900105c4 <xQueueSemaphoreTake+0x28c>
}
900105b8:	4638      	mov	r0, r7
900105ba:	b004      	add	sp, #16
900105bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
900105c0:	4607      	mov	r7, r0
900105c2:	e6d1      	b.n	90010368 <xQueueSemaphoreTake+0x30>
						taskENTER_CRITICAL();
900105c4:	f7fe ff56 	bl	9000f474 <vPortEnterCritical>
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
900105c8:	6a61      	ldr	r1, [r4, #36]	; 0x24
900105ca:	b119      	cbz	r1, 900105d4 <xQueueSemaphoreTake+0x29c>
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
900105cc:	6b23      	ldr	r3, [r4, #48]	; 0x30
900105ce:	6819      	ldr	r1, [r3, #0]
900105d0:	f1c1 0138 	rsb	r1, r1, #56	; 0x38
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
900105d4:	68a0      	ldr	r0, [r4, #8]
				return errQUEUE_EMPTY;
900105d6:	2700      	movs	r7, #0
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
900105d8:	f001 f84a 	bl	90011670 <vTaskPriorityDisinheritAfterTimeout>
						taskEXIT_CRITICAL();
900105dc:	f7fe ff6c 	bl	9000f4b8 <vPortExitCritical>
900105e0:	e7ea      	b.n	900105b8 <xQueueSemaphoreTake+0x280>
						taskENTER_CRITICAL();
900105e2:	f7fe ff47 	bl	9000f474 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
900105e6:	68a0      	ldr	r0, [r4, #8]
900105e8:	f000 ffb6 	bl	90011558 <xTaskPriorityInherit>
900105ec:	4607      	mov	r7, r0
						taskEXIT_CRITICAL();
900105ee:	f7fe ff63 	bl	9000f4b8 <vPortExitCritical>
900105f2:	e793      	b.n	9001051c <xQueueSemaphoreTake+0x1e4>
						configASSERT( xInheritanceOccurred == pdFALSE );
900105f4:	2f00      	cmp	r7, #0
900105f6:	d0f1      	beq.n	900105dc <xQueueSemaphoreTake+0x2a4>
900105f8:	f04f 0350 	mov.w	r3, #80	; 0x50
900105fc:	f383 8811 	msr	BASEPRI, r3
90010600:	f3bf 8f6f 	isb	sy
90010604:	f3bf 8f4f 	dsb	sy
90010608:	e7fe      	b.n	90010608 <xQueueSemaphoreTake+0x2d0>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
9001060a:	3b01      	subs	r3, #1
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
9001060c:	6822      	ldr	r2, [r4, #0]
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
9001060e:	63a3      	str	r3, [r4, #56]	; 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
90010610:	b12a      	cbz	r2, 9001061e <xQueueSemaphoreTake+0x2e6>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
90010612:	6923      	ldr	r3, [r4, #16]
90010614:	b93b      	cbnz	r3, 90010626 <xQueueSemaphoreTake+0x2ee>
				return pdPASS;
90010616:	2701      	movs	r7, #1
				taskEXIT_CRITICAL();
90010618:	f7fe ff4e 	bl	9000f4b8 <vPortExitCritical>
				return pdPASS;
9001061c:	e7cc      	b.n	900105b8 <xQueueSemaphoreTake+0x280>
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
9001061e:	f001 f87b 	bl	90011718 <pvTaskIncrementMutexHeldCount>
90010622:	60a0      	str	r0, [r4, #8]
90010624:	e7f5      	b.n	90010612 <xQueueSemaphoreTake+0x2da>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
90010626:	f104 0010 	add.w	r0, r4, #16
9001062a:	f000 fedb 	bl	900113e4 <xTaskRemoveFromEventList>
9001062e:	2800      	cmp	r0, #0
90010630:	d0f1      	beq.n	90010616 <xQueueSemaphoreTake+0x2de>
						queueYIELD_IF_USING_PREEMPTION();
90010632:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
90010636:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
9001063a:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
9001063e:	f3bf 8f4f 	dsb	sy
90010642:	f3bf 8f6f 	isb	sy
90010646:	e7e6      	b.n	90010616 <xQueueSemaphoreTake+0x2de>

90010648 <xQueueTakeMutexRecursive>:
		configASSERT( pxMutex );
90010648:	b1a8      	cbz	r0, 90010676 <xQueueTakeMutexRecursive+0x2e>
	{
9001064a:	b570      	push	{r4, r5, r6, lr}
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
9001064c:	6886      	ldr	r6, [r0, #8]
9001064e:	4604      	mov	r4, r0
90010650:	460d      	mov	r5, r1
90010652:	f000 ff6b 	bl	9001152c <xTaskGetCurrentTaskHandle>
90010656:	4286      	cmp	r6, r0
90010658:	d008      	beq.n	9001066c <xQueueTakeMutexRecursive+0x24>
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
9001065a:	4629      	mov	r1, r5
9001065c:	4620      	mov	r0, r4
9001065e:	f7ff fe6b 	bl	90010338 <xQueueSemaphoreTake>
			if( xReturn != pdFAIL )
90010662:	b110      	cbz	r0, 9001066a <xQueueTakeMutexRecursive+0x22>
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
90010664:	68e3      	ldr	r3, [r4, #12]
90010666:	3301      	adds	r3, #1
90010668:	60e3      	str	r3, [r4, #12]
	}
9001066a:	bd70      	pop	{r4, r5, r6, pc}
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
9001066c:	68e3      	ldr	r3, [r4, #12]
			xReturn = pdPASS;
9001066e:	2001      	movs	r0, #1
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
90010670:	4403      	add	r3, r0
90010672:	60e3      	str	r3, [r4, #12]
	}
90010674:	bd70      	pop	{r4, r5, r6, pc}
90010676:	f04f 0350 	mov.w	r3, #80	; 0x50
9001067a:	f383 8811 	msr	BASEPRI, r3
9001067e:	f3bf 8f6f 	isb	sy
90010682:	f3bf 8f4f 	dsb	sy
		configASSERT( pxMutex );
90010686:	e7fe      	b.n	90010686 <xQueueTakeMutexRecursive+0x3e>

90010688 <xQueueReceiveFromISR>:
{
90010688:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
9001068c:	b310      	cbz	r0, 900106d4 <xQueueReceiveFromISR+0x4c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
9001068e:	460e      	mov	r6, r1
90010690:	4604      	mov	r4, r0
90010692:	4617      	mov	r7, r2
90010694:	b191      	cbz	r1, 900106bc <xQueueReceiveFromISR+0x34>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
90010696:	f7ff f81f 	bl	9000f6d8 <vPortValidateInterruptPriority>
	__asm volatile
9001069a:	f3ef 8911 	mrs	r9, BASEPRI
9001069e:	f04f 0350 	mov.w	r3, #80	; 0x50
900106a2:	f383 8811 	msr	BASEPRI, r3
900106a6:	f3bf 8f6f 	isb	sy
900106aa:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
900106ae:	6ba5      	ldr	r5, [r4, #56]	; 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
900106b0:	b9cd      	cbnz	r5, 900106e6 <xQueueReceiveFromISR+0x5e>
			xReturn = pdFAIL;
900106b2:	4628      	mov	r0, r5
	__asm volatile
900106b4:	f389 8811 	msr	BASEPRI, r9
}
900106b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
900106bc:	6c03      	ldr	r3, [r0, #64]	; 0x40
900106be:	2b00      	cmp	r3, #0
900106c0:	d0e9      	beq.n	90010696 <xQueueReceiveFromISR+0xe>
	__asm volatile
900106c2:	f04f 0350 	mov.w	r3, #80	; 0x50
900106c6:	f383 8811 	msr	BASEPRI, r3
900106ca:	f3bf 8f6f 	isb	sy
900106ce:	f3bf 8f4f 	dsb	sy
900106d2:	e7fe      	b.n	900106d2 <xQueueReceiveFromISR+0x4a>
900106d4:	f04f 0350 	mov.w	r3, #80	; 0x50
900106d8:	f383 8811 	msr	BASEPRI, r3
900106dc:	f3bf 8f6f 	isb	sy
900106e0:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
900106e4:	e7fe      	b.n	900106e4 <xQueueReceiveFromISR+0x5c>
			const int8_t cRxLock = pxQueue->cRxLock;
900106e6:	f894 8044 	ldrb.w	r8, [r4, #68]	; 0x44
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
900106ea:	6c22      	ldr	r2, [r4, #64]	; 0x40
			const int8_t cRxLock = pxQueue->cRxLock;
900106ec:	fa4f f888 	sxtb.w	r8, r8
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
900106f0:	b142      	cbz	r2, 90010704 <xQueueReceiveFromISR+0x7c>
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
900106f2:	68e1      	ldr	r1, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
900106f4:	68a3      	ldr	r3, [r4, #8]
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
900106f6:	4411      	add	r1, r2
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
900106f8:	4299      	cmp	r1, r3
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
900106fa:	60e1      	str	r1, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
900106fc:	d215      	bcs.n	9001072a <xQueueReceiveFromISR+0xa2>
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
900106fe:	4630      	mov	r0, r6
90010700:	f017 fb3d 	bl	90027d7e <memcpy>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
90010704:	3d01      	subs	r5, #1
			if( cRxLock == queueUNLOCKED )
90010706:	f1b8 3fff 	cmp.w	r8, #4294967295
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
9001070a:	63a5      	str	r5, [r4, #56]	; 0x38
			if( cRxLock == queueUNLOCKED )
9001070c:	d009      	beq.n	90010722 <xQueueReceiveFromISR+0x9a>
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
9001070e:	f108 0301 	add.w	r3, r8, #1
			xReturn = pdPASS;
90010712:	2001      	movs	r0, #1
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
90010714:	b25b      	sxtb	r3, r3
90010716:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	__asm volatile
9001071a:	f389 8811 	msr	BASEPRI, r9
}
9001071e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
90010722:	6923      	ldr	r3, [r4, #16]
90010724:	b923      	cbnz	r3, 90010730 <xQueueReceiveFromISR+0xa8>
			xReturn = pdPASS;
90010726:	2001      	movs	r0, #1
90010728:	e7c4      	b.n	900106b4 <xQueueReceiveFromISR+0x2c>
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
9001072a:	6821      	ldr	r1, [r4, #0]
9001072c:	60e1      	str	r1, [r4, #12]
9001072e:	e7e6      	b.n	900106fe <xQueueReceiveFromISR+0x76>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
90010730:	f104 0010 	add.w	r0, r4, #16
90010734:	f000 fe56 	bl	900113e4 <xTaskRemoveFromEventList>
						if( pxHigherPriorityTaskWoken != NULL )
90010738:	2f00      	cmp	r7, #0
9001073a:	d0f4      	beq.n	90010726 <xQueueReceiveFromISR+0x9e>
9001073c:	2800      	cmp	r0, #0
9001073e:	d0f2      	beq.n	90010726 <xQueueReceiveFromISR+0x9e>
							*pxHigherPriorityTaskWoken = pdTRUE;
90010740:	2301      	movs	r3, #1
			xReturn = pdPASS;
90010742:	4618      	mov	r0, r3
							*pxHigherPriorityTaskWoken = pdTRUE;
90010744:	603b      	str	r3, [r7, #0]
90010746:	e7b5      	b.n	900106b4 <xQueueReceiveFromISR+0x2c>

90010748 <vQueueDelete>:
	configASSERT( pxQueue );
90010748:	b1e0      	cbz	r0, 90010784 <vQueueDelete+0x3c>

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
9001074a:	4b21      	ldr	r3, [pc, #132]	; (900107d0 <vQueueDelete+0x88>)
9001074c:	685a      	ldr	r2, [r3, #4]
9001074e:	4290      	cmp	r0, r2
90010750:	d02b      	beq.n	900107aa <vQueueDelete+0x62>
90010752:	68da      	ldr	r2, [r3, #12]
90010754:	4290      	cmp	r0, r2
90010756:	d02a      	beq.n	900107ae <vQueueDelete+0x66>
90010758:	695a      	ldr	r2, [r3, #20]
9001075a:	4290      	cmp	r0, r2
9001075c:	d029      	beq.n	900107b2 <vQueueDelete+0x6a>
9001075e:	69da      	ldr	r2, [r3, #28]
90010760:	4290      	cmp	r0, r2
90010762:	d028      	beq.n	900107b6 <vQueueDelete+0x6e>
90010764:	6a5a      	ldr	r2, [r3, #36]	; 0x24
90010766:	4290      	cmp	r0, r2
90010768:	d027      	beq.n	900107ba <vQueueDelete+0x72>
9001076a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
9001076c:	4290      	cmp	r0, r2
9001076e:	d014      	beq.n	9001079a <vQueueDelete+0x52>
90010770:	6b5a      	ldr	r2, [r3, #52]	; 0x34
90010772:	4290      	cmp	r0, r2
90010774:	d023      	beq.n	900107be <vQueueDelete+0x76>
90010776:	6bda      	ldr	r2, [r3, #60]	; 0x3c
90010778:	4290      	cmp	r0, r2
9001077a:	d022      	beq.n	900107c2 <vQueueDelete+0x7a>
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
9001077c:	f890 3046 	ldrb.w	r3, [r0, #70]	; 0x46
90010780:	b14b      	cbz	r3, 90010796 <vQueueDelete+0x4e>
}
90010782:	4770      	bx	lr
	__asm volatile
90010784:	f04f 0350 	mov.w	r3, #80	; 0x50
90010788:	f383 8811 	msr	BASEPRI, r3
9001078c:	f3bf 8f6f 	isb	sy
90010790:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
90010794:	e7fe      	b.n	90010794 <vQueueDelete+0x4c>
			vPortFree( pxQueue );
90010796:	f7fe bd51 	b.w	9000f23c <vPortFree>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
9001079a:	2205      	movs	r2, #5
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
9001079c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
900107a0:	ed9f 7b09 	vldr	d7, [pc, #36]	; 900107c8 <vQueueDelete+0x80>
900107a4:	ed83 7b00 	vstr	d7, [r3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
				break;
900107a8:	e7e8      	b.n	9001077c <vQueueDelete+0x34>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
900107aa:	2200      	movs	r2, #0
900107ac:	e7f6      	b.n	9001079c <vQueueDelete+0x54>
900107ae:	2201      	movs	r2, #1
900107b0:	e7f4      	b.n	9001079c <vQueueDelete+0x54>
900107b2:	2202      	movs	r2, #2
900107b4:	e7f2      	b.n	9001079c <vQueueDelete+0x54>
900107b6:	2203      	movs	r2, #3
900107b8:	e7f0      	b.n	9001079c <vQueueDelete+0x54>
900107ba:	2204      	movs	r2, #4
900107bc:	e7ee      	b.n	9001079c <vQueueDelete+0x54>
900107be:	2206      	movs	r2, #6
900107c0:	e7ec      	b.n	9001079c <vQueueDelete+0x54>
900107c2:	2207      	movs	r2, #7
900107c4:	e7ea      	b.n	9001079c <vQueueDelete+0x54>
900107c6:	bf00      	nop
	...
900107d0:	24026b38 	.word	0x24026b38

900107d4 <vQueueAddToRegistry>:
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
900107d4:	4b12      	ldr	r3, [pc, #72]	; (90010820 <vQueueAddToRegistry+0x4c>)
900107d6:	681a      	ldr	r2, [r3, #0]
900107d8:	b17a      	cbz	r2, 900107fa <vQueueAddToRegistry+0x26>
900107da:	689a      	ldr	r2, [r3, #8]
900107dc:	b162      	cbz	r2, 900107f8 <vQueueAddToRegistry+0x24>
900107de:	691a      	ldr	r2, [r3, #16]
900107e0:	b192      	cbz	r2, 90010808 <vQueueAddToRegistry+0x34>
900107e2:	699a      	ldr	r2, [r3, #24]
900107e4:	b192      	cbz	r2, 9001080c <vQueueAddToRegistry+0x38>
900107e6:	6a1a      	ldr	r2, [r3, #32]
900107e8:	b192      	cbz	r2, 90010810 <vQueueAddToRegistry+0x3c>
900107ea:	6a9a      	ldr	r2, [r3, #40]	; 0x28
900107ec:	b192      	cbz	r2, 90010814 <vQueueAddToRegistry+0x40>
900107ee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
900107f0:	b192      	cbz	r2, 90010818 <vQueueAddToRegistry+0x44>
900107f2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
900107f4:	b192      	cbz	r2, 9001081c <vQueueAddToRegistry+0x48>
	}
900107f6:	4770      	bx	lr
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
900107f8:	2201      	movs	r2, #1
				xQueueRegistry[ ux ].xHandle = xQueue;
900107fa:	eb03 0cc2 	add.w	ip, r3, r2, lsl #3
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
900107fe:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
90010802:	f8cc 0004 	str.w	r0, [ip, #4]
	}
90010806:	4770      	bx	lr
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
90010808:	2202      	movs	r2, #2
9001080a:	e7f6      	b.n	900107fa <vQueueAddToRegistry+0x26>
9001080c:	2203      	movs	r2, #3
9001080e:	e7f4      	b.n	900107fa <vQueueAddToRegistry+0x26>
90010810:	2204      	movs	r2, #4
90010812:	e7f2      	b.n	900107fa <vQueueAddToRegistry+0x26>
90010814:	2205      	movs	r2, #5
90010816:	e7f0      	b.n	900107fa <vQueueAddToRegistry+0x26>
90010818:	2206      	movs	r2, #6
9001081a:	e7ee      	b.n	900107fa <vQueueAddToRegistry+0x26>
9001081c:	2207      	movs	r2, #7
9001081e:	e7ec      	b.n	900107fa <vQueueAddToRegistry+0x26>
90010820:	24026b38 	.word	0x24026b38

90010824 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
90010824:	b570      	push	{r4, r5, r6, lr}
90010826:	4605      	mov	r5, r0
90010828:	460e      	mov	r6, r1
9001082a:	4614      	mov	r4, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
9001082c:	f7fe fe22 	bl	9000f474 <vPortEnterCritical>
90010830:	f895 3044 	ldrb.w	r3, [r5, #68]	; 0x44
90010834:	2bff      	cmp	r3, #255	; 0xff
90010836:	d102      	bne.n	9001083e <vQueueWaitForMessageRestricted+0x1a>
90010838:	2300      	movs	r3, #0
9001083a:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
9001083e:	f895 3045 	ldrb.w	r3, [r5, #69]	; 0x45
90010842:	2bff      	cmp	r3, #255	; 0xff
90010844:	d102      	bne.n	9001084c <vQueueWaitForMessageRestricted+0x28>
90010846:	2300      	movs	r3, #0
90010848:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
9001084c:	f7fe fe34 	bl	9000f4b8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
90010850:	6bab      	ldr	r3, [r5, #56]	; 0x38
90010852:	2b00      	cmp	r3, #0
90010854:	d043      	beq.n	900108de <vQueueWaitForMessageRestricted+0xba>
	taskENTER_CRITICAL();
90010856:	f7fe fe0d 	bl	9000f474 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
9001085a:	f895 3045 	ldrb.w	r3, [r5, #69]	; 0x45
9001085e:	b25c      	sxtb	r4, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
90010860:	2c00      	cmp	r4, #0
90010862:	dd14      	ble.n	9001088e <vQueueWaitForMessageRestricted+0x6a>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
90010864:	f105 0624 	add.w	r6, r5, #36	; 0x24
90010868:	e003      	b.n	90010872 <vQueueWaitForMessageRestricted+0x4e>
			--cTxLock;
9001086a:	1e63      	subs	r3, r4, #1
9001086c:	b2da      	uxtb	r2, r3
9001086e:	b25c      	sxtb	r4, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
90010870:	b16a      	cbz	r2, 9001088e <vQueueWaitForMessageRestricted+0x6a>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
90010872:	6a6b      	ldr	r3, [r5, #36]	; 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
90010874:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
90010876:	b153      	cbz	r3, 9001088e <vQueueWaitForMessageRestricted+0x6a>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
90010878:	f000 fdb4 	bl	900113e4 <xTaskRemoveFromEventList>
9001087c:	2800      	cmp	r0, #0
9001087e:	d0f4      	beq.n	9001086a <vQueueWaitForMessageRestricted+0x46>
						vTaskMissedYield();
90010880:	f000 fe4e 	bl	90011520 <vTaskMissedYield>
			--cTxLock;
90010884:	1e63      	subs	r3, r4, #1
90010886:	b2da      	uxtb	r2, r3
90010888:	b25c      	sxtb	r4, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
9001088a:	2a00      	cmp	r2, #0
9001088c:	d1f1      	bne.n	90010872 <vQueueWaitForMessageRestricted+0x4e>
		pxQueue->cTxLock = queueUNLOCKED;
9001088e:	23ff      	movs	r3, #255	; 0xff
90010890:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
	taskEXIT_CRITICAL();
90010894:	f7fe fe10 	bl	9000f4b8 <vPortExitCritical>
	taskENTER_CRITICAL();
90010898:	f7fe fdec 	bl	9000f474 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
9001089c:	f895 3044 	ldrb.w	r3, [r5, #68]	; 0x44
900108a0:	b25c      	sxtb	r4, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
900108a2:	2c00      	cmp	r4, #0
900108a4:	dd14      	ble.n	900108d0 <vQueueWaitForMessageRestricted+0xac>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
900108a6:	f105 0610 	add.w	r6, r5, #16
900108aa:	e003      	b.n	900108b4 <vQueueWaitForMessageRestricted+0x90>
				--cRxLock;
900108ac:	1e63      	subs	r3, r4, #1
900108ae:	b2da      	uxtb	r2, r3
900108b0:	b25c      	sxtb	r4, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
900108b2:	b16a      	cbz	r2, 900108d0 <vQueueWaitForMessageRestricted+0xac>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
900108b4:	692b      	ldr	r3, [r5, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
900108b6:	4630      	mov	r0, r6
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
900108b8:	b153      	cbz	r3, 900108d0 <vQueueWaitForMessageRestricted+0xac>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
900108ba:	f000 fd93 	bl	900113e4 <xTaskRemoveFromEventList>
900108be:	2800      	cmp	r0, #0
900108c0:	d0f4      	beq.n	900108ac <vQueueWaitForMessageRestricted+0x88>
					vTaskMissedYield();
900108c2:	f000 fe2d 	bl	90011520 <vTaskMissedYield>
				--cRxLock;
900108c6:	1e63      	subs	r3, r4, #1
900108c8:	b2da      	uxtb	r2, r3
900108ca:	b25c      	sxtb	r4, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
900108cc:	2a00      	cmp	r2, #0
900108ce:	d1f1      	bne.n	900108b4 <vQueueWaitForMessageRestricted+0x90>
		pxQueue->cRxLock = queueUNLOCKED;
900108d0:	23ff      	movs	r3, #255	; 0xff
900108d2:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
	}
900108d6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
900108da:	f7fe bded 	b.w	9000f4b8 <vPortExitCritical>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
900108de:	4622      	mov	r2, r4
900108e0:	4631      	mov	r1, r6
900108e2:	f105 0024 	add.w	r0, r5, #36	; 0x24
900108e6:	f000 fd33 	bl	90011350 <vTaskPlaceOnEventListRestricted>
900108ea:	e7b4      	b.n	90010856 <vQueueWaitForMessageRestricted+0x32>

900108ec <prvAddNewTaskToReadyList>:
	}
}
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
900108ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
900108f0:	4605      	mov	r5, r0
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
900108f2:	f7fe fdbf 	bl	9000f474 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
900108f6:	4a34      	ldr	r2, [pc, #208]	; (900109c8 <prvAddNewTaskToReadyList+0xdc>)
		if( pxCurrentTCB == NULL )
900108f8:	4e34      	ldr	r6, [pc, #208]	; (900109cc <prvAddNewTaskToReadyList+0xe0>)
		uxCurrentNumberOfTasks++;
900108fa:	6813      	ldr	r3, [r2, #0]
900108fc:	3301      	adds	r3, #1
900108fe:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
90010900:	6833      	ldr	r3, [r6, #0]
90010902:	2b00      	cmp	r3, #0
90010904:	d032      	beq.n	9001096c <prvAddNewTaskToReadyList+0x80>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
90010906:	4c32      	ldr	r4, [pc, #200]	; (900109d0 <prvAddNewTaskToReadyList+0xe4>)
90010908:	6823      	ldr	r3, [r4, #0]
9001090a:	b33b      	cbz	r3, 9001095c <prvAddNewTaskToReadyList+0x70>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
9001090c:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
9001090e:	4f31      	ldr	r7, [pc, #196]	; (900109d4 <prvAddNewTaskToReadyList+0xe8>)
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
90010910:	4a31      	ldr	r2, [pc, #196]	; (900109d8 <prvAddNewTaskToReadyList+0xec>)
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
90010912:	4932      	ldr	r1, [pc, #200]	; (900109dc <prvAddNewTaskToReadyList+0xf0>)
		uxTaskNumber++;
90010914:	6813      	ldr	r3, [r2, #0]
90010916:	3301      	adds	r3, #1
90010918:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
9001091a:	646b      	str	r3, [r5, #68]	; 0x44
		prvAddTaskToReadyList( pxNewTCB );
9001091c:	680b      	ldr	r3, [r1, #0]
9001091e:	4283      	cmp	r3, r0
90010920:	d200      	bcs.n	90010924 <prvAddNewTaskToReadyList+0x38>
90010922:	6008      	str	r0, [r1, #0]
90010924:	eb00 0080 	add.w	r0, r0, r0, lsl #2
90010928:	1d29      	adds	r1, r5, #4
9001092a:	eb07 0080 	add.w	r0, r7, r0, lsl #2
9001092e:	f7fe fcf9 	bl	9000f324 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
90010932:	f7fe fdc1 	bl	9000f4b8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
90010936:	6823      	ldr	r3, [r4, #0]
90010938:	b173      	cbz	r3, 90010958 <prvAddNewTaskToReadyList+0x6c>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
9001093a:	6832      	ldr	r2, [r6, #0]
9001093c:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
9001093e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
90010940:	429a      	cmp	r2, r3
90010942:	d209      	bcs.n	90010958 <prvAddNewTaskToReadyList+0x6c>
		{
			taskYIELD_IF_USING_PREEMPTION();
90010944:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
90010948:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
9001094c:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
90010950:	f3bf 8f4f 	dsb	sy
90010954:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
90010958:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
9001095c:	6833      	ldr	r3, [r6, #0]
9001095e:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
90010960:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90010962:	4f1c      	ldr	r7, [pc, #112]	; (900109d4 <prvAddNewTaskToReadyList+0xe8>)
90010964:	4283      	cmp	r3, r0
90010966:	d8d3      	bhi.n	90010910 <prvAddNewTaskToReadyList+0x24>
					pxCurrentTCB = pxNewTCB;
90010968:	6035      	str	r5, [r6, #0]
9001096a:	e7d1      	b.n	90010910 <prvAddNewTaskToReadyList+0x24>
			pxCurrentTCB = pxNewTCB;
9001096c:	6035      	str	r5, [r6, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
9001096e:	6813      	ldr	r3, [r2, #0]
90010970:	2b01      	cmp	r3, #1
90010972:	d003      	beq.n	9001097c <prvAddNewTaskToReadyList+0x90>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
90010974:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
90010976:	4f17      	ldr	r7, [pc, #92]	; (900109d4 <prvAddNewTaskToReadyList+0xe8>)
90010978:	4c15      	ldr	r4, [pc, #84]	; (900109d0 <prvAddNewTaskToReadyList+0xe4>)
9001097a:	e7c9      	b.n	90010910 <prvAddNewTaskToReadyList+0x24>
9001097c:	4f15      	ldr	r7, [pc, #84]	; (900109d4 <prvAddNewTaskToReadyList+0xe8>)
9001097e:	463c      	mov	r4, r7
90010980:	f507 688c 	add.w	r8, r7, #1120	; 0x460
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
90010984:	4620      	mov	r0, r4
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
90010986:	3414      	adds	r4, #20
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
90010988:	f7fe fcbc 	bl	9000f304 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
9001098c:	45a0      	cmp	r8, r4
9001098e:	d1f9      	bne.n	90010984 <prvAddNewTaskToReadyList+0x98>
	}

	vListInitialise( &xDelayedTaskList1 );
90010990:	f8df 9060 	ldr.w	r9, [pc, #96]	; 900109f4 <prvAddNewTaskToReadyList+0x108>
	vListInitialise( &xDelayedTaskList2 );
90010994:	f8df 8060 	ldr.w	r8, [pc, #96]	; 900109f8 <prvAddNewTaskToReadyList+0x10c>
	vListInitialise( &xDelayedTaskList1 );
90010998:	4648      	mov	r0, r9
9001099a:	4c0d      	ldr	r4, [pc, #52]	; (900109d0 <prvAddNewTaskToReadyList+0xe4>)
9001099c:	f7fe fcb2 	bl	9000f304 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
900109a0:	4640      	mov	r0, r8
900109a2:	f7fe fcaf 	bl	9000f304 <vListInitialise>
	vListInitialise( &xPendingReadyList );
900109a6:	480e      	ldr	r0, [pc, #56]	; (900109e0 <prvAddNewTaskToReadyList+0xf4>)
900109a8:	f7fe fcac 	bl	9000f304 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
900109ac:	480d      	ldr	r0, [pc, #52]	; (900109e4 <prvAddNewTaskToReadyList+0xf8>)
900109ae:	f7fe fca9 	bl	9000f304 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
900109b2:	480d      	ldr	r0, [pc, #52]	; (900109e8 <prvAddNewTaskToReadyList+0xfc>)
900109b4:	f7fe fca6 	bl	9000f304 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
900109b8:	4b0c      	ldr	r3, [pc, #48]	; (900109ec <prvAddNewTaskToReadyList+0x100>)
		prvAddTaskToReadyList( pxNewTCB );
900109ba:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
	pxDelayedTaskList = &xDelayedTaskList1;
900109bc:	f8c3 9000 	str.w	r9, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
900109c0:	4b0b      	ldr	r3, [pc, #44]	; (900109f0 <prvAddNewTaskToReadyList+0x104>)
900109c2:	f8c3 8000 	str.w	r8, [r3]
}
900109c6:	e7a3      	b.n	90010910 <prvAddNewTaskToReadyList+0x24>
900109c8:	24026fe4 	.word	0x24026fe4
900109cc:	24026b78 	.word	0x24026b78
900109d0:	24027040 	.word	0x24027040
900109d4:	24026b84 	.word	0x24026b84
900109d8:	24026ff0 	.word	0x24026ff0
900109dc:	24026ff4 	.word	0x24026ff4
900109e0:	2402702c 	.word	0x2402702c
900109e4:	24027058 	.word	0x24027058
900109e8:	24027044 	.word	0x24027044
900109ec:	24026b7c 	.word	0x24026b7c
900109f0:	24026b80 	.word	0x24026b80
900109f4:	24026ff8 	.word	0x24026ff8
900109f8:	2402700c 	.word	0x2402700c

900109fc <prvIdleTask>:
{
900109fc:	b580      	push	{r7, lr}
900109fe:	4c22      	ldr	r4, [pc, #136]	; (90010a88 <prvIdleTask+0x8c>)
				taskYIELD();
90010a00:	f04f 29e0 	mov.w	r9, #3758153728	; 0xe000e000
90010a04:	4e21      	ldr	r6, [pc, #132]	; (90010a8c <prvIdleTask+0x90>)
90010a06:	f04f 5880 	mov.w	r8, #268435456	; 0x10000000
90010a0a:	4d21      	ldr	r5, [pc, #132]	; (90010a90 <prvIdleTask+0x94>)
90010a0c:	4f21      	ldr	r7, [pc, #132]	; (90010a94 <prvIdleTask+0x98>)
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
90010a0e:	6823      	ldr	r3, [r4, #0]
90010a10:	b353      	cbz	r3, 90010a68 <prvIdleTask+0x6c>
		{
			taskENTER_CRITICAL();
90010a12:	f7fe fd2f 	bl	9000f474 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
90010a16:	68f3      	ldr	r3, [r6, #12]
90010a18:	f8d3 a00c 	ldr.w	sl, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
90010a1c:	f10a 0004 	add.w	r0, sl, #4
90010a20:	f7fe fca8 	bl	9000f374 <uxListRemove>
				--uxCurrentNumberOfTasks;
90010a24:	682b      	ldr	r3, [r5, #0]
90010a26:	3b01      	subs	r3, #1
90010a28:	602b      	str	r3, [r5, #0]
				--uxDeletedTasksWaitingCleanUp;
90010a2a:	6823      	ldr	r3, [r4, #0]
90010a2c:	3b01      	subs	r3, #1
90010a2e:	6023      	str	r3, [r4, #0]
			}
			taskEXIT_CRITICAL();
90010a30:	f7fe fd42 	bl	9000f4b8 <vPortExitCritical>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
90010a34:	f89a 305d 	ldrb.w	r3, [sl, #93]	; 0x5d
90010a38:	b163      	cbz	r3, 90010a54 <prvIdleTask+0x58>
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
				vPortFree( pxTCB );
			}
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
90010a3a:	2b01      	cmp	r3, #1
90010a3c:	d020      	beq.n	90010a80 <prvIdleTask+0x84>
			}
			else
			{
				/* Neither the stack nor the TCB were allocated dynamically, so
				nothing needs to be freed. */
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
90010a3e:	2b02      	cmp	r3, #2
90010a40:	d0e5      	beq.n	90010a0e <prvIdleTask+0x12>
90010a42:	f04f 0350 	mov.w	r3, #80	; 0x50
90010a46:	f383 8811 	msr	BASEPRI, r3
90010a4a:	f3bf 8f6f 	isb	sy
90010a4e:	f3bf 8f4f 	dsb	sy
90010a52:	e7fe      	b.n	90010a52 <prvIdleTask+0x56>
				vPortFree( pxTCB->pxStack );
90010a54:	f8da 0030 	ldr.w	r0, [sl, #48]	; 0x30
90010a58:	f7fe fbf0 	bl	9000f23c <vPortFree>
				vPortFree( pxTCB );
90010a5c:	4650      	mov	r0, sl
90010a5e:	f7fe fbed 	bl	9000f23c <vPortFree>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
90010a62:	6823      	ldr	r3, [r4, #0]
90010a64:	2b00      	cmp	r3, #0
90010a66:	d1d4      	bne.n	90010a12 <prvIdleTask+0x16>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
90010a68:	683b      	ldr	r3, [r7, #0]
90010a6a:	2b01      	cmp	r3, #1
90010a6c:	d905      	bls.n	90010a7a <prvIdleTask+0x7e>
				taskYIELD();
90010a6e:	f8c9 8d04 	str.w	r8, [r9, #3332]	; 0xd04
90010a72:	f3bf 8f4f 	dsb	sy
90010a76:	f3bf 8f6f 	isb	sy
			vApplicationIdleHook();
90010a7a:	f7f3 fb01 	bl	90004080 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
90010a7e:	e7c6      	b.n	90010a0e <prvIdleTask+0x12>
				vPortFree( pxTCB );
90010a80:	4650      	mov	r0, sl
90010a82:	f7fe fbdb 	bl	9000f23c <vPortFree>
90010a86:	e7c2      	b.n	90010a0e <prvIdleTask+0x12>
90010a88:	24026fe8 	.word	0x24026fe8
90010a8c:	24027058 	.word	0x24027058
90010a90:	24026fe4 	.word	0x24026fe4
90010a94:	24026b84 	.word	0x24026b84

90010a98 <xTaskIncrementTick.part.0>:
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
90010a98:	4b4a      	ldr	r3, [pc, #296]	; (90010bc4 <xTaskIncrementTick.part.0+0x12c>)
BaseType_t xTaskIncrementTick( void )
90010a9a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
90010a9e:	681e      	ldr	r6, [r3, #0]
BaseType_t xTaskIncrementTick( void )
90010aa0:	b083      	sub	sp, #12
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
90010aa2:	3601      	adds	r6, #1
		xTickCount = xConstTickCount;
90010aa4:	601e      	str	r6, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
90010aa6:	2e00      	cmp	r6, #0
90010aa8:	d040      	beq.n	90010b2c <xTaskIncrementTick.part.0+0x94>
90010aaa:	f8df b12c 	ldr.w	fp, [pc, #300]	; 90010bd8 <xTaskIncrementTick.part.0+0x140>
		if( xConstTickCount >= xNextTaskUnblockTime )
90010aae:	f8db 3000 	ldr.w	r3, [fp]
90010ab2:	429e      	cmp	r6, r3
90010ab4:	d347      	bcc.n	90010b46 <xTaskIncrementTick.part.0+0xae>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
90010ab6:	4f44      	ldr	r7, [pc, #272]	; (90010bc8 <xTaskIncrementTick.part.0+0x130>)
90010ab8:	683b      	ldr	r3, [r7, #0]
90010aba:	681d      	ldr	r5, [r3, #0]
90010abc:	2d00      	cmp	r5, #0
90010abe:	d077      	beq.n	90010bb0 <xTaskIncrementTick.part.0+0x118>
BaseType_t xSwitchRequired = pdFALSE;
90010ac0:	2500      	movs	r5, #0
90010ac2:	f8df 9118 	ldr.w	r9, [pc, #280]	; 90010bdc <xTaskIncrementTick.part.0+0x144>
90010ac6:	f8df a118 	ldr.w	sl, [pc, #280]	; 90010be0 <xTaskIncrementTick.part.0+0x148>
					prvAddTaskToReadyList( pxTCB );
90010aca:	f8df 8118 	ldr.w	r8, [pc, #280]	; 90010be4 <xTaskIncrementTick.part.0+0x14c>
90010ace:	e022      	b.n	90010b16 <xTaskIncrementTick.part.0+0x7e>
90010ad0:	9101      	str	r1, [sp, #4]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
90010ad2:	f7fe fc4f 	bl	9000f374 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
90010ad6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
90010ad8:	f104 0018 	add.w	r0, r4, #24
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
90010adc:	9901      	ldr	r1, [sp, #4]
90010ade:	b113      	cbz	r3, 90010ae6 <xTaskIncrementTick.part.0+0x4e>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
90010ae0:	f7fe fc48 	bl	9000f374 <uxListRemove>
90010ae4:	9901      	ldr	r1, [sp, #4]
					prvAddTaskToReadyList( pxTCB );
90010ae6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
90010ae8:	f8d8 2000 	ldr.w	r2, [r8]
90010aec:	eb03 0083 	add.w	r0, r3, r3, lsl #2
90010af0:	4293      	cmp	r3, r2
90010af2:	eb09 0080 	add.w	r0, r9, r0, lsl #2
90010af6:	d901      	bls.n	90010afc <xTaskIncrementTick.part.0+0x64>
90010af8:	f8c8 3000 	str.w	r3, [r8]
90010afc:	f7fe fc12 	bl	9000f324 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
90010b00:	f8da 2000 	ldr.w	r2, [sl]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
90010b04:	683b      	ldr	r3, [r7, #0]
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
90010b06:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
90010b08:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
90010b0a:	681b      	ldr	r3, [r3, #0]
							xSwitchRequired = pdTRUE;
90010b0c:	4291      	cmp	r1, r2
90010b0e:	bf28      	it	cs
90010b10:	2501      	movcs	r5, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
90010b12:	2b00      	cmp	r3, #0
90010b14:	d050      	beq.n	90010bb8 <xTaskIncrementTick.part.0+0x120>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
90010b16:	683b      	ldr	r3, [r7, #0]
90010b18:	68db      	ldr	r3, [r3, #12]
90010b1a:	68dc      	ldr	r4, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
90010b1c:	6863      	ldr	r3, [r4, #4]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
90010b1e:	1d21      	adds	r1, r4, #4
					if( xConstTickCount < xItemValue )
90010b20:	429e      	cmp	r6, r3
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
90010b22:	4608      	mov	r0, r1
					if( xConstTickCount < xItemValue )
90010b24:	d2d4      	bcs.n	90010ad0 <xTaskIncrementTick.part.0+0x38>
						xNextTaskUnblockTime = xItemValue;
90010b26:	f8cb 3000 	str.w	r3, [fp]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
90010b2a:	e011      	b.n	90010b50 <xTaskIncrementTick.part.0+0xb8>
			taskSWITCH_DELAYED_LISTS();
90010b2c:	4b26      	ldr	r3, [pc, #152]	; (90010bc8 <xTaskIncrementTick.part.0+0x130>)
90010b2e:	681a      	ldr	r2, [r3, #0]
90010b30:	6812      	ldr	r2, [r2, #0]
90010b32:	b30a      	cbz	r2, 90010b78 <xTaskIncrementTick.part.0+0xe0>
90010b34:	f04f 0350 	mov.w	r3, #80	; 0x50
90010b38:	f383 8811 	msr	BASEPRI, r3
90010b3c:	f3bf 8f6f 	isb	sy
90010b40:	f3bf 8f4f 	dsb	sy
90010b44:	e7fe      	b.n	90010b44 <xTaskIncrementTick.part.0+0xac>
BaseType_t xSwitchRequired = pdFALSE;
90010b46:	2500      	movs	r5, #0
90010b48:	f8df 9090 	ldr.w	r9, [pc, #144]	; 90010bdc <xTaskIncrementTick.part.0+0x144>
90010b4c:	f8df a090 	ldr.w	sl, [pc, #144]	; 90010be0 <xTaskIncrementTick.part.0+0x148>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
90010b50:	f8da 3000 	ldr.w	r3, [sl]
			if( xYieldPending != pdFALSE )
90010b54:	491d      	ldr	r1, [pc, #116]	; (90010bcc <xTaskIncrementTick.part.0+0x134>)
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
90010b56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90010b58:	eb03 0383 	add.w	r3, r3, r3, lsl #2
90010b5c:	009b      	lsls	r3, r3, #2
90010b5e:	f859 2003 	ldr.w	r2, [r9, r3]
			if( xYieldPending != pdFALSE )
90010b62:	680b      	ldr	r3, [r1, #0]
				xSwitchRequired = pdTRUE;
90010b64:	2a02      	cmp	r2, #2
90010b66:	bf28      	it	cs
90010b68:	2501      	movcs	r5, #1
				xSwitchRequired = pdTRUE;
90010b6a:	2b00      	cmp	r3, #0
}
90010b6c:	bf0c      	ite	eq
90010b6e:	4628      	moveq	r0, r5
90010b70:	2001      	movne	r0, #1
90010b72:	b003      	add	sp, #12
90010b74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			taskSWITCH_DELAYED_LISTS();
90010b78:	4a15      	ldr	r2, [pc, #84]	; (90010bd0 <xTaskIncrementTick.part.0+0x138>)
90010b7a:	6818      	ldr	r0, [r3, #0]
90010b7c:	6811      	ldr	r1, [r2, #0]
90010b7e:	6019      	str	r1, [r3, #0]
90010b80:	4914      	ldr	r1, [pc, #80]	; (90010bd4 <xTaskIncrementTick.part.0+0x13c>)
90010b82:	6010      	str	r0, [r2, #0]
90010b84:	680a      	ldr	r2, [r1, #0]
90010b86:	3201      	adds	r2, #1
90010b88:	600a      	str	r2, [r1, #0]

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
90010b8a:	681a      	ldr	r2, [r3, #0]
90010b8c:	6812      	ldr	r2, [r2, #0]
90010b8e:	b932      	cbnz	r2, 90010b9e <xTaskIncrementTick.part.0+0x106>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
90010b90:	f8df b044 	ldr.w	fp, [pc, #68]	; 90010bd8 <xTaskIncrementTick.part.0+0x140>
90010b94:	f04f 33ff 	mov.w	r3, #4294967295
90010b98:	f8cb 3000 	str.w	r3, [fp]
90010b9c:	e787      	b.n	90010aae <xTaskIncrementTick.part.0+0x16>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
90010b9e:	681b      	ldr	r3, [r3, #0]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
90010ba0:	f8df b034 	ldr.w	fp, [pc, #52]	; 90010bd8 <xTaskIncrementTick.part.0+0x140>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
90010ba4:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
90010ba6:	68db      	ldr	r3, [r3, #12]
90010ba8:	685b      	ldr	r3, [r3, #4]
90010baa:	f8cb 3000 	str.w	r3, [fp]
	}
}
90010bae:	e77e      	b.n	90010aae <xTaskIncrementTick.part.0+0x16>
90010bb0:	f8df 9028 	ldr.w	r9, [pc, #40]	; 90010bdc <xTaskIncrementTick.part.0+0x144>
90010bb4:	f8df a028 	ldr.w	sl, [pc, #40]	; 90010be0 <xTaskIncrementTick.part.0+0x148>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
90010bb8:	f04f 33ff 	mov.w	r3, #4294967295
90010bbc:	f8cb 3000 	str.w	r3, [fp]
					break;
90010bc0:	e7c6      	b.n	90010b50 <xTaskIncrementTick.part.0+0xb8>
90010bc2:	bf00      	nop
90010bc4:	2402706c 	.word	0x2402706c
90010bc8:	24026b7c 	.word	0x24026b7c
90010bcc:	24027070 	.word	0x24027070
90010bd0:	24026b80 	.word	0x24026b80
90010bd4:	24027024 	.word	0x24027024
90010bd8:	24027020 	.word	0x24027020
90010bdc:	24026b84 	.word	0x24026b84
90010be0:	24026b78 	.word	0x24026b78
90010be4:	24026ff4 	.word	0x24026ff4

90010be8 <xTaskResumeAll.part.0>:
BaseType_t xTaskResumeAll( void )
90010be8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		--uxSchedulerSuspended;
90010bec:	4d41      	ldr	r5, [pc, #260]	; (90010cf4 <xTaskResumeAll.part.0+0x10c>)
BaseType_t xTaskResumeAll( void )
90010bee:	b083      	sub	sp, #12
	taskENTER_CRITICAL();
90010bf0:	f7fe fc40 	bl	9000f474 <vPortEnterCritical>
		--uxSchedulerSuspended;
90010bf4:	682b      	ldr	r3, [r5, #0]
90010bf6:	3b01      	subs	r3, #1
90010bf8:	602b      	str	r3, [r5, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
90010bfa:	682b      	ldr	r3, [r5, #0]
90010bfc:	2b00      	cmp	r3, #0
90010bfe:	d161      	bne.n	90010cc4 <xTaskResumeAll.part.0+0xdc>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
90010c00:	4b3d      	ldr	r3, [pc, #244]	; (90010cf8 <xTaskResumeAll.part.0+0x110>)
90010c02:	681b      	ldr	r3, [r3, #0]
90010c04:	2b00      	cmp	r3, #0
90010c06:	d05d      	beq.n	90010cc4 <xTaskResumeAll.part.0+0xdc>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
90010c08:	4e3c      	ldr	r6, [pc, #240]	; (90010cfc <xTaskResumeAll.part.0+0x114>)
90010c0a:	6833      	ldr	r3, [r6, #0]
90010c0c:	2b00      	cmp	r3, #0
90010c0e:	d06e      	beq.n	90010cee <xTaskResumeAll.part.0+0x106>
90010c10:	4f3b      	ldr	r7, [pc, #236]	; (90010d00 <xTaskResumeAll.part.0+0x118>)
90010c12:	f8df 90fc 	ldr.w	r9, [pc, #252]	; 90010d10 <xTaskResumeAll.part.0+0x128>
90010c16:	f8df 80fc 	ldr.w	r8, [pc, #252]	; 90010d14 <xTaskResumeAll.part.0+0x12c>
90010c1a:	f8df a0fc 	ldr.w	sl, [pc, #252]	; 90010d18 <xTaskResumeAll.part.0+0x130>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
90010c1e:	68f3      	ldr	r3, [r6, #12]
90010c20:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
90010c22:	f104 0b04 	add.w	fp, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
90010c26:	f104 0018 	add.w	r0, r4, #24
90010c2a:	f7fe fba3 	bl	9000f374 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
90010c2e:	4658      	mov	r0, fp
90010c30:	f7fe fba0 	bl	9000f374 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
90010c34:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
90010c36:	683a      	ldr	r2, [r7, #0]
90010c38:	4659      	mov	r1, fp
90010c3a:	eb03 0083 	add.w	r0, r3, r3, lsl #2
90010c3e:	4293      	cmp	r3, r2
90010c40:	eb09 0080 	add.w	r0, r9, r0, lsl #2
90010c44:	d900      	bls.n	90010c48 <xTaskResumeAll.part.0+0x60>
90010c46:	603b      	str	r3, [r7, #0]
90010c48:	f7fe fb6c 	bl	9000f324 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
90010c4c:	f8d8 3000 	ldr.w	r3, [r8]
90010c50:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
90010c52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90010c54:	429a      	cmp	r2, r3
90010c56:	d33d      	bcc.n	90010cd4 <xTaskResumeAll.part.0+0xec>
						xYieldPending = pdTRUE;
90010c58:	2301      	movs	r3, #1
90010c5a:	f8ca 3000 	str.w	r3, [sl]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
90010c5e:	6833      	ldr	r3, [r6, #0]
90010c60:	2b00      	cmp	r3, #0
90010c62:	d1dc      	bne.n	90010c1e <xTaskResumeAll.part.0+0x36>
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
90010c64:	4b27      	ldr	r3, [pc, #156]	; (90010d04 <xTaskResumeAll.part.0+0x11c>)
90010c66:	681a      	ldr	r2, [r3, #0]
90010c68:	6812      	ldr	r2, [r2, #0]
90010c6a:	2a00      	cmp	r2, #0
90010c6c:	d03a      	beq.n	90010ce4 <xTaskResumeAll.part.0+0xfc>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
90010c6e:	681a      	ldr	r2, [r3, #0]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
90010c70:	4b25      	ldr	r3, [pc, #148]	; (90010d08 <xTaskResumeAll.part.0+0x120>)
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
90010c72:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
90010c74:	68d2      	ldr	r2, [r2, #12]
90010c76:	6852      	ldr	r2, [r2, #4]
90010c78:	601a      	str	r2, [r3, #0]
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
90010c7a:	4e24      	ldr	r6, [pc, #144]	; (90010d0c <xTaskResumeAll.part.0+0x124>)
90010c7c:	6834      	ldr	r4, [r6, #0]
					if( xPendedCounts > ( TickType_t ) 0U )
90010c7e:	b194      	cbz	r4, 90010ca6 <xTaskResumeAll.part.0+0xbe>
								xYieldPending = pdTRUE;
90010c80:	2701      	movs	r7, #1
90010c82:	e006      	b.n	90010c92 <xTaskResumeAll.part.0+0xaa>
90010c84:	f7ff ff08 	bl	90010a98 <xTaskIncrementTick.part.0>
							if( xTaskIncrementTick() != pdFALSE )
90010c88:	b108      	cbz	r0, 90010c8e <xTaskResumeAll.part.0+0xa6>
								xYieldPending = pdTRUE;
90010c8a:	f8ca 7000 	str.w	r7, [sl]
						} while( xPendedCounts > ( TickType_t ) 0U );
90010c8e:	3c01      	subs	r4, #1
90010c90:	d008      	beq.n	90010ca4 <xTaskResumeAll.part.0+0xbc>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
90010c92:	682b      	ldr	r3, [r5, #0]
90010c94:	2b00      	cmp	r3, #0
90010c96:	d0f5      	beq.n	90010c84 <xTaskResumeAll.part.0+0x9c>
		++xPendedTicks;
90010c98:	6833      	ldr	r3, [r6, #0]
						} while( xPendedCounts > ( TickType_t ) 0U );
90010c9a:	3c01      	subs	r4, #1
		++xPendedTicks;
90010c9c:	f103 0301 	add.w	r3, r3, #1
90010ca0:	6033      	str	r3, [r6, #0]
						} while( xPendedCounts > ( TickType_t ) 0U );
90010ca2:	d1f6      	bne.n	90010c92 <xTaskResumeAll.part.0+0xaa>
						xPendedTicks = 0;
90010ca4:	6034      	str	r4, [r6, #0]
				if( xYieldPending != pdFALSE )
90010ca6:	f8da 3000 	ldr.w	r3, [sl]
90010caa:	b15b      	cbz	r3, 90010cc4 <xTaskResumeAll.part.0+0xdc>
					taskYIELD_IF_USING_PREEMPTION();
90010cac:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
90010cb0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
90010cb4:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
90010cb8:	f3bf 8f4f 	dsb	sy
90010cbc:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
90010cc0:	2001      	movs	r0, #1
90010cc2:	e000      	b.n	90010cc6 <xTaskResumeAll.part.0+0xde>
BaseType_t xAlreadyYielded = pdFALSE;
90010cc4:	2000      	movs	r0, #0
90010cc6:	9001      	str	r0, [sp, #4]
	taskEXIT_CRITICAL();
90010cc8:	f7fe fbf6 	bl	9000f4b8 <vPortExitCritical>
}
90010ccc:	9801      	ldr	r0, [sp, #4]
90010cce:	b003      	add	sp, #12
90010cd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
90010cd4:	6833      	ldr	r3, [r6, #0]
90010cd6:	2b00      	cmp	r3, #0
90010cd8:	d1a1      	bne.n	90010c1e <xTaskResumeAll.part.0+0x36>
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
90010cda:	4b0a      	ldr	r3, [pc, #40]	; (90010d04 <xTaskResumeAll.part.0+0x11c>)
90010cdc:	681a      	ldr	r2, [r3, #0]
90010cde:	6812      	ldr	r2, [r2, #0]
90010ce0:	2a00      	cmp	r2, #0
90010ce2:	d1c4      	bne.n	90010c6e <xTaskResumeAll.part.0+0x86>
		xNextTaskUnblockTime = portMAX_DELAY;
90010ce4:	4b08      	ldr	r3, [pc, #32]	; (90010d08 <xTaskResumeAll.part.0+0x120>)
90010ce6:	f04f 32ff 	mov.w	r2, #4294967295
90010cea:	601a      	str	r2, [r3, #0]
90010cec:	e7c5      	b.n	90010c7a <xTaskResumeAll.part.0+0x92>
90010cee:	f8df a028 	ldr.w	sl, [pc, #40]	; 90010d18 <xTaskResumeAll.part.0+0x130>
90010cf2:	e7c2      	b.n	90010c7a <xTaskResumeAll.part.0+0x92>
90010cf4:	24026fec 	.word	0x24026fec
90010cf8:	24026fe4 	.word	0x24026fe4
90010cfc:	2402702c 	.word	0x2402702c
90010d00:	24026ff4 	.word	0x24026ff4
90010d04:	24026b7c 	.word	0x24026b7c
90010d08:	24027020 	.word	0x24027020
90010d0c:	24027028 	.word	0x24027028
90010d10:	24026b84 	.word	0x24026b84
90010d14:	24026b78 	.word	0x24026b78
90010d18:	24027070 	.word	0x24027070

90010d1c <xTaskCreateStatic>:
	{
90010d1c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
90010d20:	b083      	sub	sp, #12
90010d22:	4698      	mov	r8, r3
		configASSERT( puxStackBuffer != NULL );
90010d24:	e9dd 340b 	ldrd	r3, r4, [sp, #44]	; 0x2c
90010d28:	b1bb      	cbz	r3, 90010d5a <xTaskCreateStatic+0x3e>
		configASSERT( pxTaskBuffer != NULL );
90010d2a:	b16c      	cbz	r4, 90010d48 <xTaskCreateStatic+0x2c>
			volatile size_t xSize = sizeof( StaticTask_t );
90010d2c:	2360      	movs	r3, #96	; 0x60
90010d2e:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( TCB_t ) );
90010d30:	9b01      	ldr	r3, [sp, #4]
90010d32:	2b60      	cmp	r3, #96	; 0x60
90010d34:	d01a      	beq.n	90010d6c <xTaskCreateStatic+0x50>
90010d36:	f04f 0350 	mov.w	r3, #80	; 0x50
90010d3a:	f383 8811 	msr	BASEPRI, r3
90010d3e:	f3bf 8f6f 	isb	sy
90010d42:	f3bf 8f4f 	dsb	sy
90010d46:	e7fe      	b.n	90010d46 <xTaskCreateStatic+0x2a>
90010d48:	f04f 0350 	mov.w	r3, #80	; 0x50
90010d4c:	f383 8811 	msr	BASEPRI, r3
90010d50:	f3bf 8f6f 	isb	sy
90010d54:	f3bf 8f4f 	dsb	sy
		configASSERT( pxTaskBuffer != NULL );
90010d58:	e7fe      	b.n	90010d58 <xTaskCreateStatic+0x3c>
90010d5a:	f04f 0350 	mov.w	r3, #80	; 0x50
90010d5e:	f383 8811 	msr	BASEPRI, r3
90010d62:	f3bf 8f6f 	isb	sy
90010d66:	f3bf 8f4f 	dsb	sy
		configASSERT( puxStackBuffer != NULL );
90010d6a:	e7fe      	b.n	90010d6a <xTaskCreateStatic+0x4e>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
90010d6c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
90010d6e:	0096      	lsls	r6, r2, #2
90010d70:	4607      	mov	r7, r0
90010d72:	460d      	mov	r5, r1
90010d74:	4618      	mov	r0, r3
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
90010d76:	6323      	str	r3, [r4, #48]	; 0x30
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
90010d78:	9b01      	ldr	r3, [sp, #4]
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
90010d7a:	2302      	movs	r3, #2
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
90010d7c:	4632      	mov	r2, r6
90010d7e:	21a5      	movs	r1, #165	; 0xa5
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
90010d80:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
90010d84:	f016 ff1a 	bl	90027bbc <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
90010d88:	1f32      	subs	r2, r6, #4
90010d8a:	6b23      	ldr	r3, [r4, #48]	; 0x30
90010d8c:	4413      	add	r3, r2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
90010d8e:	f023 0907 	bic.w	r9, r3, #7
	if( pcName != NULL )
90010d92:	2d00      	cmp	r5, #0
90010d94:	d069      	beq.n	90010e6a <xTaskCreateStatic+0x14e>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
90010d96:	782b      	ldrb	r3, [r5, #0]
90010d98:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
			if( pcName[ x ] == ( char ) 0x00 )
90010d9c:	2b00      	cmp	r3, #0
90010d9e:	d03b      	beq.n	90010e18 <xTaskCreateStatic+0xfc>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
90010da0:	786b      	ldrb	r3, [r5, #1]
90010da2:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
			if( pcName[ x ] == ( char ) 0x00 )
90010da6:	2b00      	cmp	r3, #0
90010da8:	d036      	beq.n	90010e18 <xTaskCreateStatic+0xfc>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
90010daa:	78ab      	ldrb	r3, [r5, #2]
90010dac:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
			if( pcName[ x ] == ( char ) 0x00 )
90010db0:	b393      	cbz	r3, 90010e18 <xTaskCreateStatic+0xfc>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
90010db2:	78eb      	ldrb	r3, [r5, #3]
90010db4:	f884 3037 	strb.w	r3, [r4, #55]	; 0x37
			if( pcName[ x ] == ( char ) 0x00 )
90010db8:	b373      	cbz	r3, 90010e18 <xTaskCreateStatic+0xfc>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
90010dba:	792b      	ldrb	r3, [r5, #4]
90010dbc:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
			if( pcName[ x ] == ( char ) 0x00 )
90010dc0:	b353      	cbz	r3, 90010e18 <xTaskCreateStatic+0xfc>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
90010dc2:	796b      	ldrb	r3, [r5, #5]
90010dc4:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
			if( pcName[ x ] == ( char ) 0x00 )
90010dc8:	b333      	cbz	r3, 90010e18 <xTaskCreateStatic+0xfc>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
90010dca:	79ab      	ldrb	r3, [r5, #6]
90010dcc:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
			if( pcName[ x ] == ( char ) 0x00 )
90010dd0:	b313      	cbz	r3, 90010e18 <xTaskCreateStatic+0xfc>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
90010dd2:	79eb      	ldrb	r3, [r5, #7]
90010dd4:	f884 303b 	strb.w	r3, [r4, #59]	; 0x3b
			if( pcName[ x ] == ( char ) 0x00 )
90010dd8:	b1f3      	cbz	r3, 90010e18 <xTaskCreateStatic+0xfc>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
90010dda:	7a2b      	ldrb	r3, [r5, #8]
90010ddc:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
			if( pcName[ x ] == ( char ) 0x00 )
90010de0:	b1d3      	cbz	r3, 90010e18 <xTaskCreateStatic+0xfc>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
90010de2:	7a6b      	ldrb	r3, [r5, #9]
90010de4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
			if( pcName[ x ] == ( char ) 0x00 )
90010de8:	b1b3      	cbz	r3, 90010e18 <xTaskCreateStatic+0xfc>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
90010dea:	7aab      	ldrb	r3, [r5, #10]
90010dec:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
			if( pcName[ x ] == ( char ) 0x00 )
90010df0:	b193      	cbz	r3, 90010e18 <xTaskCreateStatic+0xfc>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
90010df2:	7aeb      	ldrb	r3, [r5, #11]
90010df4:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
			if( pcName[ x ] == ( char ) 0x00 )
90010df8:	b173      	cbz	r3, 90010e18 <xTaskCreateStatic+0xfc>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
90010dfa:	7b2b      	ldrb	r3, [r5, #12]
90010dfc:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
			if( pcName[ x ] == ( char ) 0x00 )
90010e00:	b153      	cbz	r3, 90010e18 <xTaskCreateStatic+0xfc>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
90010e02:	7b6b      	ldrb	r3, [r5, #13]
90010e04:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
			if( pcName[ x ] == ( char ) 0x00 )
90010e08:	b133      	cbz	r3, 90010e18 <xTaskCreateStatic+0xfc>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
90010e0a:	7bab      	ldrb	r3, [r5, #14]
90010e0c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
			if( pcName[ x ] == ( char ) 0x00 )
90010e10:	b113      	cbz	r3, 90010e18 <xTaskCreateStatic+0xfc>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
90010e12:	7beb      	ldrb	r3, [r5, #15]
90010e14:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
90010e18:	2300      	movs	r3, #0
90010e1a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
90010e1e:	9d0a      	ldr	r5, [sp, #40]	; 0x28
		pxNewTCB->uxMutexesHeld = 0;
90010e20:	2600      	movs	r6, #0
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
90010e22:	1d20      	adds	r0, r4, #4
90010e24:	2d37      	cmp	r5, #55	; 0x37
		pxNewTCB->uxMutexesHeld = 0;
90010e26:	6526      	str	r6, [r4, #80]	; 0x50
90010e28:	bf28      	it	cs
90010e2a:	2537      	movcs	r5, #55	; 0x37
	pxNewTCB->uxPriority = uxPriority;
90010e2c:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
90010e2e:	64e5      	str	r5, [r4, #76]	; 0x4c
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
90010e30:	f1c5 0538 	rsb	r5, r5, #56	; 0x38
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
90010e34:	f7fe fa72 	bl	9000f31c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
90010e38:	f104 0018 	add.w	r0, r4, #24
90010e3c:	f7fe fa6e 	bl	9000f31c <vListInitialiseItem>
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
90010e40:	4642      	mov	r2, r8
90010e42:	4639      	mov	r1, r7
		pxNewTCB->ulNotifiedValue = 0;
90010e44:	65a6      	str	r6, [r4, #88]	; 0x58
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
90010e46:	4648      	mov	r0, r9
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
90010e48:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
90010e4a:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
90010e4c:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->pxTaskTag = NULL;
90010e4e:	6566      	str	r6, [r4, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
90010e50:	f884 605c 	strb.w	r6, [r4, #92]	; 0x5c
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
90010e54:	f7fe fae0 	bl	9000f418 <pxPortInitialiseStack>
90010e58:	4603      	mov	r3, r0
			prvAddNewTaskToReadyList( pxNewTCB );
90010e5a:	4620      	mov	r0, r4
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
90010e5c:	6023      	str	r3, [r4, #0]
			prvAddNewTaskToReadyList( pxNewTCB );
90010e5e:	f7ff fd45 	bl	900108ec <prvAddNewTaskToReadyList>
	}
90010e62:	4620      	mov	r0, r4
90010e64:	b003      	add	sp, #12
90010e66:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
90010e6a:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
90010e6e:	e7d6      	b.n	90010e1e <xTaskCreateStatic+0x102>

90010e70 <xTaskCreate>:
	{
90010e70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
90010e74:	0096      	lsls	r6, r2, #2
	{
90010e76:	4680      	mov	r8, r0
90010e78:	460d      	mov	r5, r1
90010e7a:	4699      	mov	r9, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
90010e7c:	4630      	mov	r0, r6
90010e7e:	f7fe f91f 	bl	9000f0c0 <pvPortMalloc>
			if( pxStack != NULL )
90010e82:	2800      	cmp	r0, #0
90010e84:	f000 8083 	beq.w	90010f8e <xTaskCreate+0x11e>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
90010e88:	4607      	mov	r7, r0
90010e8a:	2060      	movs	r0, #96	; 0x60
90010e8c:	f7fe f918 	bl	9000f0c0 <pvPortMalloc>
				if( pxNewTCB != NULL )
90010e90:	4604      	mov	r4, r0
90010e92:	2800      	cmp	r0, #0
90010e94:	d07f      	beq.n	90010f96 <xTaskCreate+0x126>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
90010e96:	2300      	movs	r3, #0
					pxNewTCB->pxStack = pxStack;
90010e98:	6307      	str	r7, [r0, #48]	; 0x30
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
90010e9a:	4632      	mov	r2, r6
90010e9c:	4638      	mov	r0, r7
90010e9e:	21a5      	movs	r1, #165	; 0xa5
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
90010ea0:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
90010ea4:	f016 fe8a 	bl	90027bbc <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
90010ea8:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
	if( pcName != NULL )
90010eac:	2d00      	cmp	r5, #0
90010eae:	d078      	beq.n	90010fa2 <xTaskCreate+0x132>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
90010eb0:	782b      	ldrb	r3, [r5, #0]
90010eb2:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
			if( pcName[ x ] == ( char ) 0x00 )
90010eb6:	2b00      	cmp	r3, #0
90010eb8:	d03b      	beq.n	90010f32 <xTaskCreate+0xc2>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
90010eba:	786b      	ldrb	r3, [r5, #1]
90010ebc:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
			if( pcName[ x ] == ( char ) 0x00 )
90010ec0:	2b00      	cmp	r3, #0
90010ec2:	d036      	beq.n	90010f32 <xTaskCreate+0xc2>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
90010ec4:	78ab      	ldrb	r3, [r5, #2]
90010ec6:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
			if( pcName[ x ] == ( char ) 0x00 )
90010eca:	b393      	cbz	r3, 90010f32 <xTaskCreate+0xc2>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
90010ecc:	78eb      	ldrb	r3, [r5, #3]
90010ece:	f884 3037 	strb.w	r3, [r4, #55]	; 0x37
			if( pcName[ x ] == ( char ) 0x00 )
90010ed2:	b373      	cbz	r3, 90010f32 <xTaskCreate+0xc2>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
90010ed4:	792b      	ldrb	r3, [r5, #4]
90010ed6:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
			if( pcName[ x ] == ( char ) 0x00 )
90010eda:	b353      	cbz	r3, 90010f32 <xTaskCreate+0xc2>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
90010edc:	796b      	ldrb	r3, [r5, #5]
90010ede:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
			if( pcName[ x ] == ( char ) 0x00 )
90010ee2:	b333      	cbz	r3, 90010f32 <xTaskCreate+0xc2>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
90010ee4:	79ab      	ldrb	r3, [r5, #6]
90010ee6:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
			if( pcName[ x ] == ( char ) 0x00 )
90010eea:	b313      	cbz	r3, 90010f32 <xTaskCreate+0xc2>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
90010eec:	79eb      	ldrb	r3, [r5, #7]
90010eee:	f884 303b 	strb.w	r3, [r4, #59]	; 0x3b
			if( pcName[ x ] == ( char ) 0x00 )
90010ef2:	b1f3      	cbz	r3, 90010f32 <xTaskCreate+0xc2>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
90010ef4:	7a2b      	ldrb	r3, [r5, #8]
90010ef6:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
			if( pcName[ x ] == ( char ) 0x00 )
90010efa:	b1d3      	cbz	r3, 90010f32 <xTaskCreate+0xc2>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
90010efc:	7a6b      	ldrb	r3, [r5, #9]
90010efe:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
			if( pcName[ x ] == ( char ) 0x00 )
90010f02:	b1b3      	cbz	r3, 90010f32 <xTaskCreate+0xc2>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
90010f04:	7aab      	ldrb	r3, [r5, #10]
90010f06:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
			if( pcName[ x ] == ( char ) 0x00 )
90010f0a:	b193      	cbz	r3, 90010f32 <xTaskCreate+0xc2>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
90010f0c:	7aeb      	ldrb	r3, [r5, #11]
90010f0e:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
			if( pcName[ x ] == ( char ) 0x00 )
90010f12:	b173      	cbz	r3, 90010f32 <xTaskCreate+0xc2>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
90010f14:	7b2b      	ldrb	r3, [r5, #12]
90010f16:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
			if( pcName[ x ] == ( char ) 0x00 )
90010f1a:	b153      	cbz	r3, 90010f32 <xTaskCreate+0xc2>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
90010f1c:	7b6b      	ldrb	r3, [r5, #13]
90010f1e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
			if( pcName[ x ] == ( char ) 0x00 )
90010f22:	b133      	cbz	r3, 90010f32 <xTaskCreate+0xc2>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
90010f24:	7bab      	ldrb	r3, [r5, #14]
90010f26:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
			if( pcName[ x ] == ( char ) 0x00 )
90010f2a:	b113      	cbz	r3, 90010f32 <xTaskCreate+0xc2>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
90010f2c:	7beb      	ldrb	r3, [r5, #15]
90010f2e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
90010f32:	2300      	movs	r3, #0
90010f34:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
90010f38:	9d08      	ldr	r5, [sp, #32]
		pxNewTCB->uxMutexesHeld = 0;
90010f3a:	2700      	movs	r7, #0
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
90010f3c:	1d20      	adds	r0, r4, #4
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
90010f3e:	3e04      	subs	r6, #4
90010f40:	2d37      	cmp	r5, #55	; 0x37
		pxNewTCB->uxMutexesHeld = 0;
90010f42:	6527      	str	r7, [r4, #80]	; 0x50
90010f44:	bf28      	it	cs
90010f46:	2537      	movcs	r5, #55	; 0x37
	pxNewTCB->uxPriority = uxPriority;
90010f48:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
90010f4a:	64e5      	str	r5, [r4, #76]	; 0x4c
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
90010f4c:	f1c5 0538 	rsb	r5, r5, #56	; 0x38
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
90010f50:	f7fe f9e4 	bl	9000f31c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
90010f54:	f104 0018 	add.w	r0, r4, #24
90010f58:	f7fe f9e0 	bl	9000f31c <vListInitialiseItem>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
90010f5c:	eb0a 0006 	add.w	r0, sl, r6
		pxNewTCB->ulNotifiedValue = 0;
90010f60:	65a7      	str	r7, [r4, #88]	; 0x58
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
90010f62:	464a      	mov	r2, r9
90010f64:	4641      	mov	r1, r8
90010f66:	f020 0007 	bic.w	r0, r0, #7
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
90010f6a:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
90010f6c:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
90010f6e:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->pxTaskTag = NULL;
90010f70:	6567      	str	r7, [r4, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
90010f72:	f884 705c 	strb.w	r7, [r4, #92]	; 0x5c
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
90010f76:	f7fe fa4f 	bl	9000f418 <pxPortInitialiseStack>
	if( pxCreatedTask != NULL )
90010f7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
90010f7c:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
90010f7e:	b103      	cbz	r3, 90010f82 <xTaskCreate+0x112>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
90010f80:	601c      	str	r4, [r3, #0]
			prvAddNewTaskToReadyList( pxNewTCB );
90010f82:	4620      	mov	r0, r4
90010f84:	f7ff fcb2 	bl	900108ec <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
90010f88:	2001      	movs	r0, #1
	}
90010f8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
90010f8e:	f04f 30ff 	mov.w	r0, #4294967295
	}
90010f92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
					vPortFree( pxStack );
90010f96:	4638      	mov	r0, r7
90010f98:	f7fe f950 	bl	9000f23c <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
90010f9c:	f04f 30ff 	mov.w	r0, #4294967295
90010fa0:	e7f3      	b.n	90010f8a <xTaskCreate+0x11a>
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
90010fa2:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
90010fa6:	e7c7      	b.n	90010f38 <xTaskCreate+0xc8>

90010fa8 <vTaskDelay>:
	{
90010fa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
90010faa:	b950      	cbnz	r0, 90010fc2 <vTaskDelay+0x1a>
			portYIELD_WITHIN_API();
90010fac:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
90010fb0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
90010fb4:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
90010fb8:	f3bf 8f4f 	dsb	sy
90010fbc:	f3bf 8f6f 	isb	sy
	}
90010fc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			configASSERT( uxSchedulerSuspended == 0 );
90010fc2:	4d1e      	ldr	r5, [pc, #120]	; (9001103c <vTaskDelay+0x94>)
90010fc4:	682b      	ldr	r3, [r5, #0]
90010fc6:	b143      	cbz	r3, 90010fda <vTaskDelay+0x32>
90010fc8:	f04f 0350 	mov.w	r3, #80	; 0x50
90010fcc:	f383 8811 	msr	BASEPRI, r3
90010fd0:	f3bf 8f6f 	isb	sy
90010fd4:	f3bf 8f4f 	dsb	sy
90010fd8:	e7fe      	b.n	90010fd8 <vTaskDelay+0x30>
	++uxSchedulerSuspended;
90010fda:	682b      	ldr	r3, [r5, #0]
90010fdc:	4604      	mov	r4, r0
90010fde:	3301      	adds	r3, #1
90010fe0:	602b      	str	r3, [r5, #0]
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
90010fe2:	4b17      	ldr	r3, [pc, #92]	; (90011040 <vTaskDelay+0x98>)
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
90010fe4:	4e17      	ldr	r6, [pc, #92]	; (90011044 <vTaskDelay+0x9c>)
const TickType_t xConstTickCount = xTickCount;
90010fe6:	681f      	ldr	r7, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
90010fe8:	6830      	ldr	r0, [r6, #0]
90010fea:	3004      	adds	r0, #4
90010fec:	f7fe f9c2 	bl	9000f374 <uxListRemove>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
90010ff0:	19e4      	adds	r4, r4, r7

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
90010ff2:	6833      	ldr	r3, [r6, #0]
90010ff4:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
90010ff6:	d315      	bcc.n	90011024 <vTaskDelay+0x7c>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
90010ff8:	4b13      	ldr	r3, [pc, #76]	; (90011048 <vTaskDelay+0xa0>)
90010ffa:	6818      	ldr	r0, [r3, #0]
90010ffc:	6831      	ldr	r1, [r6, #0]
90010ffe:	3104      	adds	r1, #4
90011000:	f7fe f9a0 	bl	9000f344 <vListInsert>
	configASSERT( uxSchedulerSuspended );
90011004:	682b      	ldr	r3, [r5, #0]
90011006:	b943      	cbnz	r3, 9001101a <vTaskDelay+0x72>
90011008:	f04f 0350 	mov.w	r3, #80	; 0x50
9001100c:	f383 8811 	msr	BASEPRI, r3
90011010:	f3bf 8f6f 	isb	sy
90011014:	f3bf 8f4f 	dsb	sy
90011018:	e7fe      	b.n	90011018 <vTaskDelay+0x70>
9001101a:	f7ff fde5 	bl	90010be8 <xTaskResumeAll.part.0>
		if( xAlreadyYielded == pdFALSE )
9001101e:	2800      	cmp	r0, #0
90011020:	d0c4      	beq.n	90010fac <vTaskDelay+0x4>
	}
90011022:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
90011024:	4b09      	ldr	r3, [pc, #36]	; (9001104c <vTaskDelay+0xa4>)
90011026:	6818      	ldr	r0, [r3, #0]
90011028:	6831      	ldr	r1, [r6, #0]
9001102a:	3104      	adds	r1, #4
9001102c:	f7fe f98a 	bl	9000f344 <vListInsert>

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
90011030:	4b07      	ldr	r3, [pc, #28]	; (90011050 <vTaskDelay+0xa8>)
90011032:	681a      	ldr	r2, [r3, #0]
90011034:	4294      	cmp	r4, r2
90011036:	d2e5      	bcs.n	90011004 <vTaskDelay+0x5c>
				{
					xNextTaskUnblockTime = xTimeToWake;
90011038:	601c      	str	r4, [r3, #0]
9001103a:	e7e3      	b.n	90011004 <vTaskDelay+0x5c>
9001103c:	24026fec 	.word	0x24026fec
90011040:	2402706c 	.word	0x2402706c
90011044:	24026b78 	.word	0x24026b78
90011048:	24026b80 	.word	0x24026b80
9001104c:	24026b7c 	.word	0x24026b7c
90011050:	24027020 	.word	0x24027020

90011054 <vTaskStartScheduler>:
{
90011054:	b570      	push	{r4, r5, r6, lr}
90011056:	b084      	sub	sp, #16
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
90011058:	2400      	movs	r4, #0
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
9001105a:	4668      	mov	r0, sp
9001105c:	aa02      	add	r2, sp, #8
9001105e:	a901      	add	r1, sp, #4
		StackType_t *pxIdleTaskStackBuffer = NULL;
90011060:	e9cd 4400 	strd	r4, r4, [sp]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
90011064:	f7fe f80e 	bl	9000f084 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
90011068:	9d00      	ldr	r5, [sp, #0]
9001106a:	e9dd 0601 	ldrd	r0, r6, [sp, #4]
		configASSERT( puxStackBuffer != NULL );
9001106e:	b1b8      	cbz	r0, 900110a0 <vTaskStartScheduler+0x4c>
		configASSERT( pxTaskBuffer != NULL );
90011070:	b16d      	cbz	r5, 9001108e <vTaskStartScheduler+0x3a>
			volatile size_t xSize = sizeof( StaticTask_t );
90011072:	2260      	movs	r2, #96	; 0x60
90011074:	9203      	str	r2, [sp, #12]
			configASSERT( xSize == sizeof( TCB_t ) );
90011076:	9a03      	ldr	r2, [sp, #12]
90011078:	2a60      	cmp	r2, #96	; 0x60
9001107a:	d01a      	beq.n	900110b2 <vTaskStartScheduler+0x5e>
9001107c:	f04f 0350 	mov.w	r3, #80	; 0x50
90011080:	f383 8811 	msr	BASEPRI, r3
90011084:	f3bf 8f6f 	isb	sy
90011088:	f3bf 8f4f 	dsb	sy
9001108c:	e7fe      	b.n	9001108c <vTaskStartScheduler+0x38>
9001108e:	f04f 0350 	mov.w	r3, #80	; 0x50
90011092:	f383 8811 	msr	BASEPRI, r3
90011096:	f3bf 8f6f 	isb	sy
9001109a:	f3bf 8f4f 	dsb	sy
		configASSERT( pxTaskBuffer != NULL );
9001109e:	e7fe      	b.n	9001109e <vTaskStartScheduler+0x4a>
900110a0:	f04f 0350 	mov.w	r3, #80	; 0x50
900110a4:	f383 8811 	msr	BASEPRI, r3
900110a8:	f3bf 8f6f 	isb	sy
900110ac:	f3bf 8f4f 	dsb	sy
		configASSERT( puxStackBuffer != NULL );
900110b0:	e7fe      	b.n	900110b0 <vTaskStartScheduler+0x5c>
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
900110b2:	00b6      	lsls	r6, r6, #2
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
900110b4:	2302      	movs	r3, #2
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
900110b6:	21a5      	movs	r1, #165	; 0xa5
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
900110b8:	6328      	str	r0, [r5, #48]	; 0x30
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
900110ba:	4632      	mov	r2, r6
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
900110bc:	f885 305d 	strb.w	r3, [r5, #93]	; 0x5d
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
900110c0:	9b03      	ldr	r3, [sp, #12]
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
900110c2:	f016 fd7b 	bl	90027bbc <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
900110c6:	1f33      	subs	r3, r6, #4
900110c8:	6b2a      	ldr	r2, [r5, #48]	; 0x30
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
900110ca:	492a      	ldr	r1, [pc, #168]	; (90011174 <vTaskStartScheduler+0x120>)
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
900110cc:	1d28      	adds	r0, r5, #4
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
900110ce:	441a      	add	r2, r3
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
900110d0:	f885 4038 	strb.w	r4, [r5, #56]	; 0x38
900110d4:	6369      	str	r1, [r5, #52]	; 0x34
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
900110d6:	f885 4043 	strb.w	r4, [r5, #67]	; 0x43
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
900110da:	f022 0607 	bic.w	r6, r2, #7
	pxNewTCB->uxPriority = uxPriority;
900110de:	62ec      	str	r4, [r5, #44]	; 0x2c
		pxNewTCB->uxMutexesHeld = 0;
900110e0:	e9c5 4413 	strd	r4, r4, [r5, #76]	; 0x4c
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
900110e4:	f7fe f91a 	bl	9000f31c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
900110e8:	f105 0018 	add.w	r0, r5, #24
900110ec:	f7fe f916 	bl	9000f31c <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
900110f0:	2338      	movs	r3, #56	; 0x38
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
900110f2:	4622      	mov	r2, r4
900110f4:	4920      	ldr	r1, [pc, #128]	; (90011178 <vTaskStartScheduler+0x124>)
		pxNewTCB->ulNotifiedValue = 0;
900110f6:	65ac      	str	r4, [r5, #88]	; 0x58
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
900110f8:	4630      	mov	r0, r6
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
900110fa:	61ab      	str	r3, [r5, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
900110fc:	612d      	str	r5, [r5, #16]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
900110fe:	626d      	str	r5, [r5, #36]	; 0x24
		pxNewTCB->pxTaskTag = NULL;
90011100:	656c      	str	r4, [r5, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
90011102:	f885 405c 	strb.w	r4, [r5, #92]	; 0x5c
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
90011106:	f7fe f987 	bl	9000f418 <pxPortInitialiseStack>
9001110a:	4603      	mov	r3, r0
			prvAddNewTaskToReadyList( pxNewTCB );
9001110c:	4628      	mov	r0, r5
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
9001110e:	602b      	str	r3, [r5, #0]
			prvAddNewTaskToReadyList( pxNewTCB );
90011110:	f7ff fbec 	bl	900108ec <prvAddNewTaskToReadyList>
			xReturn = xTimerCreateTimerTask();
90011114:	f000 fca4 	bl	90011a60 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
90011118:	2801      	cmp	r0, #1
9001111a:	d00c      	beq.n	90011136 <vTaskStartScheduler+0xe2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
9001111c:	3001      	adds	r0, #1
9001111e:	d001      	beq.n	90011124 <vTaskStartScheduler+0xd0>
}
90011120:	b004      	add	sp, #16
90011122:	bd70      	pop	{r4, r5, r6, pc}
90011124:	f04f 0350 	mov.w	r3, #80	; 0x50
90011128:	f383 8811 	msr	BASEPRI, r3
9001112c:	f3bf 8f6f 	isb	sy
90011130:	f3bf 8f4f 	dsb	sy
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
90011134:	e7fe      	b.n	90011134 <vTaskStartScheduler+0xe0>
90011136:	f04f 0350 	mov.w	r3, #80	; 0x50
9001113a:	f383 8811 	msr	BASEPRI, r3
9001113e:	f3bf 8f6f 	isb	sy
90011142:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
90011146:	4b0d      	ldr	r3, [pc, #52]	; (9001117c <vTaskStartScheduler+0x128>)
90011148:	f04f 32ff 	mov.w	r2, #4294967295
		xSchedulerRunning = pdTRUE;
9001114c:	490c      	ldr	r1, [pc, #48]	; (90011180 <vTaskStartScheduler+0x12c>)
		xNextTaskUnblockTime = portMAX_DELAY;
9001114e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
90011150:	4b0c      	ldr	r3, [pc, #48]	; (90011184 <vTaskStartScheduler+0x130>)
		traceTASK_SWITCHED_IN();
90011152:	4a0d      	ldr	r2, [pc, #52]	; (90011188 <vTaskStartScheduler+0x134>)
		xSchedulerRunning = pdTRUE;
90011154:	6008      	str	r0, [r1, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
90011156:	601c      	str	r4, [r3, #0]
		traceTASK_SWITCHED_IN();
90011158:	6813      	ldr	r3, [r2, #0]
		if( xTask == NULL )
9001115a:	b143      	cbz	r3, 9001116e <vTaskStartScheduler+0x11a>
		if( xTCB->pxTaskTag != NULL )
9001115c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
9001115e:	b10b      	cbz	r3, 90011164 <vTaskStartScheduler+0x110>
			xReturn = xTCB->pxTaskTag( pvParameter );
90011160:	2000      	movs	r0, #0
90011162:	4798      	blx	r3
}
90011164:	b004      	add	sp, #16
90011166:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		if( xPortStartScheduler() != pdFALSE )
9001116a:	f7fe ba15 	b.w	9000f598 <xPortStartScheduler>
			xTCB = pxCurrentTCB;
9001116e:	6813      	ldr	r3, [r2, #0]
90011170:	e7f4      	b.n	9001115c <vTaskStartScheduler+0x108>
90011172:	bf00      	nop
90011174:	454c4449 	.word	0x454c4449
90011178:	900109fd 	.word	0x900109fd
9001117c:	24027020 	.word	0x24027020
90011180:	24027040 	.word	0x24027040
90011184:	2402706c 	.word	0x2402706c
90011188:	24026b78 	.word	0x24026b78

9001118c <vTaskSuspendAll>:
	++uxSchedulerSuspended;
9001118c:	4a02      	ldr	r2, [pc, #8]	; (90011198 <vTaskSuspendAll+0xc>)
9001118e:	6813      	ldr	r3, [r2, #0]
90011190:	3301      	adds	r3, #1
90011192:	6013      	str	r3, [r2, #0]
}
90011194:	4770      	bx	lr
90011196:	bf00      	nop
90011198:	24026fec 	.word	0x24026fec

9001119c <xTaskResumeAll>:
	configASSERT( uxSchedulerSuspended );
9001119c:	4b06      	ldr	r3, [pc, #24]	; (900111b8 <xTaskResumeAll+0x1c>)
9001119e:	681b      	ldr	r3, [r3, #0]
900111a0:	b943      	cbnz	r3, 900111b4 <xTaskResumeAll+0x18>
900111a2:	f04f 0350 	mov.w	r3, #80	; 0x50
900111a6:	f383 8811 	msr	BASEPRI, r3
900111aa:	f3bf 8f6f 	isb	sy
900111ae:	f3bf 8f4f 	dsb	sy
900111b2:	e7fe      	b.n	900111b2 <xTaskResumeAll+0x16>
900111b4:	f7ff bd18 	b.w	90010be8 <xTaskResumeAll.part.0>
900111b8:	24026fec 	.word	0x24026fec

900111bc <xTaskGetTickCount>:
		xTicks = xTickCount;
900111bc:	4b01      	ldr	r3, [pc, #4]	; (900111c4 <xTaskGetTickCount+0x8>)
900111be:	6818      	ldr	r0, [r3, #0]
}
900111c0:	4770      	bx	lr
900111c2:	bf00      	nop
900111c4:	2402706c 	.word	0x2402706c

900111c8 <xTaskIncrementTick>:
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
900111c8:	4b05      	ldr	r3, [pc, #20]	; (900111e0 <xTaskIncrementTick+0x18>)
900111ca:	681b      	ldr	r3, [r3, #0]
900111cc:	b90b      	cbnz	r3, 900111d2 <xTaskIncrementTick+0xa>
900111ce:	f7ff bc63 	b.w	90010a98 <xTaskIncrementTick.part.0>
		++xPendedTicks;
900111d2:	4a04      	ldr	r2, [pc, #16]	; (900111e4 <xTaskIncrementTick+0x1c>)
}
900111d4:	2000      	movs	r0, #0
		++xPendedTicks;
900111d6:	6813      	ldr	r3, [r2, #0]
900111d8:	3301      	adds	r3, #1
900111da:	6013      	str	r3, [r2, #0]
}
900111dc:	4770      	bx	lr
900111de:	bf00      	nop
900111e0:	24026fec 	.word	0x24026fec
900111e4:	24027028 	.word	0x24027028

900111e8 <vTaskSetApplicationTaskTag>:
	{
900111e8:	b538      	push	{r3, r4, r5, lr}
900111ea:	460d      	mov	r5, r1
		if( xTask == NULL )
900111ec:	b138      	cbz	r0, 900111fe <vTaskSetApplicationTaskTag+0x16>
900111ee:	4604      	mov	r4, r0
		taskENTER_CRITICAL();
900111f0:	f7fe f940 	bl	9000f474 <vPortEnterCritical>
			xTCB->pxTaskTag = pxHookFunction;
900111f4:	6565      	str	r5, [r4, #84]	; 0x54
	}
900111f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		taskEXIT_CRITICAL();
900111fa:	f7fe b95d 	b.w	9000f4b8 <vPortExitCritical>
			xTCB = ( TCB_t * ) pxCurrentTCB;
900111fe:	4b04      	ldr	r3, [pc, #16]	; (90011210 <vTaskSetApplicationTaskTag+0x28>)
90011200:	681c      	ldr	r4, [r3, #0]
		taskENTER_CRITICAL();
90011202:	f7fe f937 	bl	9000f474 <vPortEnterCritical>
			xTCB->pxTaskTag = pxHookFunction;
90011206:	6565      	str	r5, [r4, #84]	; 0x54
	}
90011208:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		taskEXIT_CRITICAL();
9001120c:	f7fe b954 	b.w	9000f4b8 <vPortExitCritical>
90011210:	24026b78 	.word	0x24026b78

90011214 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
90011214:	4b27      	ldr	r3, [pc, #156]	; (900112b4 <vTaskSwitchContext+0xa0>)
90011216:	681b      	ldr	r3, [r3, #0]
90011218:	b11b      	cbz	r3, 90011222 <vTaskSwitchContext+0xe>
		xYieldPending = pdTRUE;
9001121a:	4b27      	ldr	r3, [pc, #156]	; (900112b8 <vTaskSwitchContext+0xa4>)
9001121c:	2201      	movs	r2, #1
9001121e:	601a      	str	r2, [r3, #0]
90011220:	4770      	bx	lr
{
90011222:	b570      	push	{r4, r5, r6, lr}
		xYieldPending = pdFALSE;
90011224:	4a24      	ldr	r2, [pc, #144]	; (900112b8 <vTaskSwitchContext+0xa4>)
		traceTASK_SWITCHED_OUT();
90011226:	4c25      	ldr	r4, [pc, #148]	; (900112bc <vTaskSwitchContext+0xa8>)
		xYieldPending = pdFALSE;
90011228:	6013      	str	r3, [r2, #0]
		traceTASK_SWITCHED_OUT();
9001122a:	6823      	ldr	r3, [r4, #0]
		if( xTask == NULL )
9001122c:	2b00      	cmp	r3, #0
9001122e:	d036      	beq.n	9001129e <vTaskSwitchContext+0x8a>
		if( xTCB->pxTaskTag != NULL )
90011230:	6d5b      	ldr	r3, [r3, #84]	; 0x54
90011232:	b10b      	cbz	r3, 90011238 <vTaskSwitchContext+0x24>
			xReturn = xTCB->pxTaskTag( pvParameter );
90011234:	2001      	movs	r0, #1
90011236:	4798      	blx	r3
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
90011238:	4d21      	ldr	r5, [pc, #132]	; (900112c0 <vTaskSwitchContext+0xac>)
9001123a:	4922      	ldr	r1, [pc, #136]	; (900112c4 <vTaskSwitchContext+0xb0>)
9001123c:	682b      	ldr	r3, [r5, #0]
9001123e:	eb03 0283 	add.w	r2, r3, r3, lsl #2
90011242:	0098      	lsls	r0, r3, #2
90011244:	0092      	lsls	r2, r2, #2
90011246:	588a      	ldr	r2, [r1, r2]
90011248:	b942      	cbnz	r2, 9001125c <vTaskSwitchContext+0x48>
9001124a:	b1fb      	cbz	r3, 9001128c <vTaskSwitchContext+0x78>
9001124c:	3b01      	subs	r3, #1
9001124e:	eb03 0283 	add.w	r2, r3, r3, lsl #2
90011252:	0098      	lsls	r0, r3, #2
90011254:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
90011258:	2a00      	cmp	r2, #0
9001125a:	d0f6      	beq.n	9001124a <vTaskSwitchContext+0x36>
9001125c:	4418      	add	r0, r3
9001125e:	eb01 0c80 	add.w	ip, r1, r0, lsl #2
90011262:	f8dc 1004 	ldr.w	r1, [ip, #4]
90011266:	4662      	mov	r2, ip
90011268:	6849      	ldr	r1, [r1, #4]
9001126a:	3208      	adds	r2, #8
9001126c:	4291      	cmp	r1, r2
9001126e:	f8cc 1004 	str.w	r1, [ip, #4]
90011272:	d01b      	beq.n	900112ac <vTaskSwitchContext+0x98>
90011274:	68ca      	ldr	r2, [r1, #12]
90011276:	6022      	str	r2, [r4, #0]
90011278:	602b      	str	r3, [r5, #0]
		traceTASK_SWITCHED_IN();
9001127a:	6823      	ldr	r3, [r4, #0]
		if( xTask == NULL )
9001127c:	b1a3      	cbz	r3, 900112a8 <vTaskSwitchContext+0x94>
		if( xTCB->pxTaskTag != NULL )
9001127e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
90011280:	b11b      	cbz	r3, 9001128a <vTaskSwitchContext+0x76>
			xReturn = xTCB->pxTaskTag( pvParameter );
90011282:	2000      	movs	r0, #0
}
90011284:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			xReturn = xTCB->pxTaskTag( pvParameter );
90011288:	4718      	bx	r3
}
9001128a:	bd70      	pop	{r4, r5, r6, pc}
9001128c:	f04f 0350 	mov.w	r3, #80	; 0x50
90011290:	f383 8811 	msr	BASEPRI, r3
90011294:	f3bf 8f6f 	isb	sy
90011298:	f3bf 8f4f 	dsb	sy
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
9001129c:	e7fe      	b.n	9001129c <vTaskSwitchContext+0x88>
			xTCB = pxCurrentTCB;
9001129e:	6823      	ldr	r3, [r4, #0]
		if( xTCB->pxTaskTag != NULL )
900112a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
900112a2:	2b00      	cmp	r3, #0
900112a4:	d1c6      	bne.n	90011234 <vTaskSwitchContext+0x20>
900112a6:	e7c7      	b.n	90011238 <vTaskSwitchContext+0x24>
			xTCB = pxCurrentTCB;
900112a8:	6823      	ldr	r3, [r4, #0]
900112aa:	e7e8      	b.n	9001127e <vTaskSwitchContext+0x6a>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
900112ac:	6849      	ldr	r1, [r1, #4]
900112ae:	f8cc 1004 	str.w	r1, [ip, #4]
900112b2:	e7df      	b.n	90011274 <vTaskSwitchContext+0x60>
900112b4:	24026fec 	.word	0x24026fec
900112b8:	24027070 	.word	0x24027070
900112bc:	24026b78 	.word	0x24026b78
900112c0:	24026ff4 	.word	0x24026ff4
900112c4:	24026b84 	.word	0x24026b84

900112c8 <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
900112c8:	b1f0      	cbz	r0, 90011308 <vTaskPlaceOnEventList+0x40>
{
900112ca:	b570      	push	{r4, r5, r6, lr}
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
900112cc:	4d1a      	ldr	r5, [pc, #104]	; (90011338 <vTaskPlaceOnEventList+0x70>)
900112ce:	460c      	mov	r4, r1
900112d0:	6829      	ldr	r1, [r5, #0]
900112d2:	3118      	adds	r1, #24
900112d4:	f7fe f836 	bl	9000f344 <vListInsert>
const TickType_t xConstTickCount = xTickCount;
900112d8:	4b18      	ldr	r3, [pc, #96]	; (9001133c <vTaskPlaceOnEventList+0x74>)
900112da:	681e      	ldr	r6, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
900112dc:	6828      	ldr	r0, [r5, #0]
900112de:	3004      	adds	r0, #4
900112e0:	f7fe f848 	bl	9000f374 <uxListRemove>
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
900112e4:	1c63      	adds	r3, r4, #1
900112e6:	d020      	beq.n	9001132a <vTaskPlaceOnEventList+0x62>
			xTimeToWake = xConstTickCount + xTicksToWait;
900112e8:	19a4      	adds	r4, r4, r6
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
900112ea:	682b      	ldr	r3, [r5, #0]
900112ec:	605c      	str	r4, [r3, #4]
			if( xTimeToWake < xConstTickCount )
900112ee:	d214      	bcs.n	9001131a <vTaskPlaceOnEventList+0x52>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
900112f0:	4b13      	ldr	r3, [pc, #76]	; (90011340 <vTaskPlaceOnEventList+0x78>)
900112f2:	6818      	ldr	r0, [r3, #0]
900112f4:	6829      	ldr	r1, [r5, #0]
900112f6:	3104      	adds	r1, #4
900112f8:	f7fe f824 	bl	9000f344 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
900112fc:	4b11      	ldr	r3, [pc, #68]	; (90011344 <vTaskPlaceOnEventList+0x7c>)
900112fe:	681a      	ldr	r2, [r3, #0]
90011300:	4294      	cmp	r4, r2
90011302:	d200      	bcs.n	90011306 <vTaskPlaceOnEventList+0x3e>
					xNextTaskUnblockTime = xTimeToWake;
90011304:	601c      	str	r4, [r3, #0]
}
90011306:	bd70      	pop	{r4, r5, r6, pc}
90011308:	f04f 0350 	mov.w	r3, #80	; 0x50
9001130c:	f383 8811 	msr	BASEPRI, r3
90011310:	f3bf 8f6f 	isb	sy
90011314:	f3bf 8f4f 	dsb	sy
	configASSERT( pxEventList );
90011318:	e7fe      	b.n	90011318 <vTaskPlaceOnEventList+0x50>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
9001131a:	4b0b      	ldr	r3, [pc, #44]	; (90011348 <vTaskPlaceOnEventList+0x80>)
9001131c:	6818      	ldr	r0, [r3, #0]
9001131e:	6829      	ldr	r1, [r5, #0]
}
90011320:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
90011324:	3104      	adds	r1, #4
90011326:	f7fe b80d 	b.w	9000f344 <vListInsert>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
9001132a:	6829      	ldr	r1, [r5, #0]
9001132c:	4807      	ldr	r0, [pc, #28]	; (9001134c <vTaskPlaceOnEventList+0x84>)
9001132e:	3104      	adds	r1, #4
}
90011330:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
90011334:	f7fd bff6 	b.w	9000f324 <vListInsertEnd>
90011338:	24026b78 	.word	0x24026b78
9001133c:	2402706c 	.word	0x2402706c
90011340:	24026b7c 	.word	0x24026b7c
90011344:	24027020 	.word	0x24027020
90011348:	24026b80 	.word	0x24026b80
9001134c:	24027044 	.word	0x24027044

90011350 <vTaskPlaceOnEventListRestricted>:
		configASSERT( pxEventList );
90011350:	b358      	cbz	r0, 900113aa <vTaskPlaceOnEventListRestricted+0x5a>
	{
90011352:	b570      	push	{r4, r5, r6, lr}
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
90011354:	4e1d      	ldr	r6, [pc, #116]	; (900113cc <vTaskPlaceOnEventListRestricted+0x7c>)
90011356:	460c      	mov	r4, r1
90011358:	4615      	mov	r5, r2
9001135a:	6831      	ldr	r1, [r6, #0]
9001135c:	3118      	adds	r1, #24
9001135e:	f7fd ffe1 	bl	9000f324 <vListInsertEnd>
		if( xWaitIndefinitely != pdFALSE )
90011362:	b165      	cbz	r5, 9001137e <vTaskPlaceOnEventListRestricted+0x2e>
const TickType_t xConstTickCount = xTickCount;
90011364:	4b1a      	ldr	r3, [pc, #104]	; (900113d0 <vTaskPlaceOnEventListRestricted+0x80>)
90011366:	681b      	ldr	r3, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
90011368:	6830      	ldr	r0, [r6, #0]
9001136a:	3004      	adds	r0, #4
9001136c:	f7fe f802 	bl	9000f374 <uxListRemove>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
90011370:	6831      	ldr	r1, [r6, #0]
90011372:	4818      	ldr	r0, [pc, #96]	; (900113d4 <vTaskPlaceOnEventListRestricted+0x84>)
90011374:	3104      	adds	r1, #4
	}
90011376:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
9001137a:	f7fd bfd3 	b.w	9000f324 <vListInsertEnd>
const TickType_t xConstTickCount = xTickCount;
9001137e:	4b14      	ldr	r3, [pc, #80]	; (900113d0 <vTaskPlaceOnEventListRestricted+0x80>)
90011380:	681d      	ldr	r5, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
90011382:	6830      	ldr	r0, [r6, #0]
90011384:	3004      	adds	r0, #4
90011386:	f7fd fff5 	bl	9000f374 <uxListRemove>
			xTimeToWake = xConstTickCount + xTicksToWait;
9001138a:	1964      	adds	r4, r4, r5
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
9001138c:	6833      	ldr	r3, [r6, #0]
9001138e:	605c      	str	r4, [r3, #4]
			if( xTimeToWake < xConstTickCount )
90011390:	d214      	bcs.n	900113bc <vTaskPlaceOnEventListRestricted+0x6c>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
90011392:	4b11      	ldr	r3, [pc, #68]	; (900113d8 <vTaskPlaceOnEventListRestricted+0x88>)
90011394:	6818      	ldr	r0, [r3, #0]
90011396:	6831      	ldr	r1, [r6, #0]
90011398:	3104      	adds	r1, #4
9001139a:	f7fd ffd3 	bl	9000f344 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
9001139e:	4b0f      	ldr	r3, [pc, #60]	; (900113dc <vTaskPlaceOnEventListRestricted+0x8c>)
900113a0:	681a      	ldr	r2, [r3, #0]
900113a2:	4294      	cmp	r4, r2
900113a4:	d200      	bcs.n	900113a8 <vTaskPlaceOnEventListRestricted+0x58>
					xNextTaskUnblockTime = xTimeToWake;
900113a6:	601c      	str	r4, [r3, #0]
	}
900113a8:	bd70      	pop	{r4, r5, r6, pc}
900113aa:	f04f 0350 	mov.w	r3, #80	; 0x50
900113ae:	f383 8811 	msr	BASEPRI, r3
900113b2:	f3bf 8f6f 	isb	sy
900113b6:	f3bf 8f4f 	dsb	sy
		configASSERT( pxEventList );
900113ba:	e7fe      	b.n	900113ba <vTaskPlaceOnEventListRestricted+0x6a>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
900113bc:	4b08      	ldr	r3, [pc, #32]	; (900113e0 <vTaskPlaceOnEventListRestricted+0x90>)
900113be:	6818      	ldr	r0, [r3, #0]
900113c0:	6831      	ldr	r1, [r6, #0]
	}
900113c2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
900113c6:	3104      	adds	r1, #4
900113c8:	f7fd bfbc 	b.w	9000f344 <vListInsert>
900113cc:	24026b78 	.word	0x24026b78
900113d0:	2402706c 	.word	0x2402706c
900113d4:	24027044 	.word	0x24027044
900113d8:	24026b7c 	.word	0x24026b7c
900113dc:	24027020 	.word	0x24027020
900113e0:	24026b80 	.word	0x24026b80

900113e4 <xTaskRemoveFromEventList>:
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
900113e4:	68c3      	ldr	r3, [r0, #12]
{
900113e6:	b530      	push	{r4, r5, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
900113e8:	68dc      	ldr	r4, [r3, #12]
{
900113ea:	b083      	sub	sp, #12
	configASSERT( pxUnblockedTCB );
900113ec:	b35c      	cbz	r4, 90011446 <xTaskRemoveFromEventList+0x62>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
900113ee:	f104 0518 	add.w	r5, r4, #24
900113f2:	4628      	mov	r0, r5
900113f4:	f7fd ffbe 	bl	9000f374 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
900113f8:	4b19      	ldr	r3, [pc, #100]	; (90011460 <xTaskRemoveFromEventList+0x7c>)
900113fa:	681b      	ldr	r3, [r3, #0]
900113fc:	b17b      	cbz	r3, 9001141e <xTaskRemoveFromEventList+0x3a>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
900113fe:	4629      	mov	r1, r5
90011400:	4818      	ldr	r0, [pc, #96]	; (90011464 <xTaskRemoveFromEventList+0x80>)
90011402:	f7fd ff8f 	bl	9000f324 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
90011406:	4b18      	ldr	r3, [pc, #96]	; (90011468 <xTaskRemoveFromEventList+0x84>)
90011408:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
9001140a:	681b      	ldr	r3, [r3, #0]
9001140c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9001140e:	429a      	cmp	r2, r3
90011410:	d922      	bls.n	90011458 <xTaskRemoveFromEventList+0x74>
		xYieldPending = pdTRUE;
90011412:	2301      	movs	r3, #1
90011414:	4a15      	ldr	r2, [pc, #84]	; (9001146c <xTaskRemoveFromEventList+0x88>)
		xReturn = pdTRUE;
90011416:	4618      	mov	r0, r3
		xYieldPending = pdTRUE;
90011418:	6013      	str	r3, [r2, #0]
}
9001141a:	b003      	add	sp, #12
9001141c:	bd30      	pop	{r4, r5, pc}
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
9001141e:	1d21      	adds	r1, r4, #4
90011420:	4608      	mov	r0, r1
90011422:	9101      	str	r1, [sp, #4]
90011424:	f7fd ffa6 	bl	9000f374 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
90011428:	4a11      	ldr	r2, [pc, #68]	; (90011470 <xTaskRemoveFromEventList+0x8c>)
9001142a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
9001142c:	6810      	ldr	r0, [r2, #0]
9001142e:	9901      	ldr	r1, [sp, #4]
90011430:	4283      	cmp	r3, r0
90011432:	d900      	bls.n	90011436 <xTaskRemoveFromEventList+0x52>
90011434:	6013      	str	r3, [r2, #0]
90011436:	eb03 0383 	add.w	r3, r3, r3, lsl #2
9001143a:	480e      	ldr	r0, [pc, #56]	; (90011474 <xTaskRemoveFromEventList+0x90>)
9001143c:	eb00 0083 	add.w	r0, r0, r3, lsl #2
90011440:	f7fd ff70 	bl	9000f324 <vListInsertEnd>
90011444:	e7df      	b.n	90011406 <xTaskRemoveFromEventList+0x22>
90011446:	f04f 0350 	mov.w	r3, #80	; 0x50
9001144a:	f383 8811 	msr	BASEPRI, r3
9001144e:	f3bf 8f6f 	isb	sy
90011452:	f3bf 8f4f 	dsb	sy
	configASSERT( pxUnblockedTCB );
90011456:	e7fe      	b.n	90011456 <xTaskRemoveFromEventList+0x72>
		xReturn = pdFALSE;
90011458:	2000      	movs	r0, #0
}
9001145a:	b003      	add	sp, #12
9001145c:	bd30      	pop	{r4, r5, pc}
9001145e:	bf00      	nop
90011460:	24026fec 	.word	0x24026fec
90011464:	2402702c 	.word	0x2402702c
90011468:	24026b78 	.word	0x24026b78
9001146c:	24027070 	.word	0x24027070
90011470:	24026ff4 	.word	0x24026ff4
90011474:	24026b84 	.word	0x24026b84

90011478 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
90011478:	4a03      	ldr	r2, [pc, #12]	; (90011488 <vTaskInternalSetTimeOutState+0x10>)
	pxTimeOut->xTimeOnEntering = xTickCount;
9001147a:	4b04      	ldr	r3, [pc, #16]	; (9001148c <vTaskInternalSetTimeOutState+0x14>)
	pxTimeOut->xOverflowCount = xNumOfOverflows;
9001147c:	6812      	ldr	r2, [r2, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
9001147e:	681b      	ldr	r3, [r3, #0]
90011480:	e9c0 2300 	strd	r2, r3, [r0]
}
90011484:	4770      	bx	lr
90011486:	bf00      	nop
90011488:	24027024 	.word	0x24027024
9001148c:	2402706c 	.word	0x2402706c

90011490 <xTaskCheckForTimeOut>:
	configASSERT( pxTimeOut );
90011490:	b328      	cbz	r0, 900114de <xTaskCheckForTimeOut+0x4e>
{
90011492:	b5f0      	push	{r4, r5, r6, r7, lr}
90011494:	460d      	mov	r5, r1
90011496:	b083      	sub	sp, #12
	configASSERT( pxTicksToWait );
90011498:	b1c1      	cbz	r1, 900114cc <xTaskCheckForTimeOut+0x3c>
9001149a:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
9001149c:	f7fd ffea 	bl	9000f474 <vPortEnterCritical>
			if( *pxTicksToWait == portMAX_DELAY )
900114a0:	682b      	ldr	r3, [r5, #0]
		const TickType_t xConstTickCount = xTickCount;
900114a2:	4a1d      	ldr	r2, [pc, #116]	; (90011518 <xTaskCheckForTimeOut+0x88>)
			if( *pxTicksToWait == portMAX_DELAY )
900114a4:	1c58      	adds	r0, r3, #1
		const TickType_t xConstTickCount = xTickCount;
900114a6:	6811      	ldr	r1, [r2, #0]
			if( *pxTicksToWait == portMAX_DELAY )
900114a8:	d030      	beq.n	9001150c <xTaskCheckForTimeOut+0x7c>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
900114aa:	f8df c070 	ldr.w	ip, [pc, #112]	; 9001151c <xTaskCheckForTimeOut+0x8c>
900114ae:	6826      	ldr	r6, [r4, #0]
900114b0:	f8dc 7000 	ldr.w	r7, [ip]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
900114b4:	6860      	ldr	r0, [r4, #4]
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
900114b6:	42be      	cmp	r6, r7
900114b8:	d01a      	beq.n	900114f0 <xTaskCheckForTimeOut+0x60>
900114ba:	4288      	cmp	r0, r1
900114bc:	d818      	bhi.n	900114f0 <xTaskCheckForTimeOut+0x60>
			xReturn = pdTRUE;
900114be:	2001      	movs	r0, #1
900114c0:	9001      	str	r0, [sp, #4]
	taskEXIT_CRITICAL();
900114c2:	f7fd fff9 	bl	9000f4b8 <vPortExitCritical>
}
900114c6:	9801      	ldr	r0, [sp, #4]
900114c8:	b003      	add	sp, #12
900114ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
900114cc:	f04f 0350 	mov.w	r3, #80	; 0x50
900114d0:	f383 8811 	msr	BASEPRI, r3
900114d4:	f3bf 8f6f 	isb	sy
900114d8:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTicksToWait );
900114dc:	e7fe      	b.n	900114dc <xTaskCheckForTimeOut+0x4c>
900114de:	f04f 0350 	mov.w	r3, #80	; 0x50
900114e2:	f383 8811 	msr	BASEPRI, r3
900114e6:	f3bf 8f6f 	isb	sy
900114ea:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTimeOut );
900114ee:	e7fe      	b.n	900114ee <xTaskCheckForTimeOut+0x5e>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
900114f0:	eba1 0e00 	sub.w	lr, r1, r0
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
900114f4:	4573      	cmp	r3, lr
900114f6:	d90b      	bls.n	90011510 <xTaskCheckForTimeOut+0x80>
			*pxTicksToWait -= xElapsedTime;
900114f8:	1a5b      	subs	r3, r3, r1
	pxTimeOut->xOverflowCount = xNumOfOverflows;
900114fa:	f8dc 1000 	ldr.w	r1, [ip]
	pxTimeOut->xTimeOnEntering = xTickCount;
900114fe:	6812      	ldr	r2, [r2, #0]
			*pxTicksToWait -= xElapsedTime;
90011500:	4403      	add	r3, r0
			xReturn = pdFALSE;
90011502:	2000      	movs	r0, #0
			*pxTicksToWait -= xElapsedTime;
90011504:	602b      	str	r3, [r5, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
90011506:	e9c4 1200 	strd	r1, r2, [r4]
			xReturn = pdFALSE;
9001150a:	e7d9      	b.n	900114c0 <xTaskCheckForTimeOut+0x30>
				xReturn = pdFALSE;
9001150c:	2000      	movs	r0, #0
9001150e:	e7d7      	b.n	900114c0 <xTaskCheckForTimeOut+0x30>
			*pxTicksToWait = 0;
90011510:	2300      	movs	r3, #0
			xReturn = pdTRUE;
90011512:	2001      	movs	r0, #1
			*pxTicksToWait = 0;
90011514:	602b      	str	r3, [r5, #0]
			xReturn = pdTRUE;
90011516:	e7d3      	b.n	900114c0 <xTaskCheckForTimeOut+0x30>
90011518:	2402706c 	.word	0x2402706c
9001151c:	24027024 	.word	0x24027024

90011520 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
90011520:	4b01      	ldr	r3, [pc, #4]	; (90011528 <vTaskMissedYield+0x8>)
90011522:	2201      	movs	r2, #1
90011524:	601a      	str	r2, [r3, #0]
}
90011526:	4770      	bx	lr
90011528:	24027070 	.word	0x24027070

9001152c <xTaskGetCurrentTaskHandle>:
		xReturn = pxCurrentTCB;
9001152c:	4b01      	ldr	r3, [pc, #4]	; (90011534 <xTaskGetCurrentTaskHandle+0x8>)
9001152e:	6818      	ldr	r0, [r3, #0]
	}
90011530:	4770      	bx	lr
90011532:	bf00      	nop
90011534:	24026b78 	.word	0x24026b78

90011538 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
90011538:	4b05      	ldr	r3, [pc, #20]	; (90011550 <xTaskGetSchedulerState+0x18>)
9001153a:	681b      	ldr	r3, [r3, #0]
9001153c:	b133      	cbz	r3, 9001154c <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
9001153e:	4b05      	ldr	r3, [pc, #20]	; (90011554 <xTaskGetSchedulerState+0x1c>)
90011540:	6818      	ldr	r0, [r3, #0]
90011542:	fab0 f080 	clz	r0, r0
90011546:	0940      	lsrs	r0, r0, #5
90011548:	0040      	lsls	r0, r0, #1
9001154a:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
9001154c:	2001      	movs	r0, #1
	}
9001154e:	4770      	bx	lr
90011550:	24027040 	.word	0x24027040
90011554:	24026fec 	.word	0x24026fec

90011558 <xTaskPriorityInherit>:
	{
90011558:	b570      	push	{r4, r5, r6, lr}
		if( pxMutexHolder != NULL )
9001155a:	4604      	mov	r4, r0
	{
9001155c:	b082      	sub	sp, #8
		if( pxMutexHolder != NULL )
9001155e:	b1c8      	cbz	r0, 90011594 <xTaskPriorityInherit+0x3c>
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
90011560:	4d1d      	ldr	r5, [pc, #116]	; (900115d8 <xTaskPriorityInherit+0x80>)
90011562:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
90011564:	682a      	ldr	r2, [r5, #0]
90011566:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
90011568:	4293      	cmp	r3, r2
9001156a:	d215      	bcs.n	90011598 <xTaskPriorityInherit+0x40>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
9001156c:	6982      	ldr	r2, [r0, #24]
9001156e:	2a00      	cmp	r2, #0
90011570:	db04      	blt.n	9001157c <xTaskPriorityInherit+0x24>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
90011572:	682a      	ldr	r2, [r5, #0]
90011574:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
90011576:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
9001157a:	6182      	str	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
9001157c:	4e17      	ldr	r6, [pc, #92]	; (900115dc <xTaskPriorityInherit+0x84>)
9001157e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
90011582:	6962      	ldr	r2, [r4, #20]
90011584:	eb06 0383 	add.w	r3, r6, r3, lsl #2
90011588:	429a      	cmp	r2, r3
9001158a:	d00e      	beq.n	900115aa <xTaskPriorityInherit+0x52>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
9001158c:	682b      	ldr	r3, [r5, #0]
				xReturn = pdTRUE;
9001158e:	2001      	movs	r0, #1
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
90011590:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90011592:	62e3      	str	r3, [r4, #44]	; 0x2c
	}
90011594:	b002      	add	sp, #8
90011596:	bd70      	pop	{r4, r5, r6, pc}
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
90011598:	682b      	ldr	r3, [r5, #0]
9001159a:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
9001159c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9001159e:	4298      	cmp	r0, r3
900115a0:	bf2c      	ite	cs
900115a2:	2000      	movcs	r0, #0
900115a4:	2001      	movcc	r0, #1
	}
900115a6:	b002      	add	sp, #8
900115a8:	bd70      	pop	{r4, r5, r6, pc}
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
900115aa:	1d21      	adds	r1, r4, #4
900115ac:	4608      	mov	r0, r1
900115ae:	9101      	str	r1, [sp, #4]
900115b0:	f7fd fee0 	bl	9000f374 <uxListRemove>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
900115b4:	682a      	ldr	r2, [r5, #0]
					prvAddTaskToReadyList( pxMutexHolderTCB );
900115b6:	4b0a      	ldr	r3, [pc, #40]	; (900115e0 <xTaskPriorityInherit+0x88>)
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
900115b8:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
900115ba:	681a      	ldr	r2, [r3, #0]
900115bc:	9901      	ldr	r1, [sp, #4]
900115be:	4290      	cmp	r0, r2
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
900115c0:	62e0      	str	r0, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
900115c2:	d900      	bls.n	900115c6 <xTaskPriorityInherit+0x6e>
900115c4:	6018      	str	r0, [r3, #0]
900115c6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
900115ca:	eb06 0080 	add.w	r0, r6, r0, lsl #2
900115ce:	f7fd fea9 	bl	9000f324 <vListInsertEnd>
				xReturn = pdTRUE;
900115d2:	2001      	movs	r0, #1
900115d4:	e7de      	b.n	90011594 <xTaskPriorityInherit+0x3c>
900115d6:	bf00      	nop
900115d8:	24026b78 	.word	0x24026b78
900115dc:	24026b84 	.word	0x24026b84
900115e0:	24026ff4 	.word	0x24026ff4

900115e4 <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
900115e4:	b318      	cbz	r0, 9001162e <xTaskPriorityDisinherit+0x4a>
			configASSERT( pxTCB == pxCurrentTCB );
900115e6:	4b1f      	ldr	r3, [pc, #124]	; (90011664 <xTaskPriorityDisinherit+0x80>)
	{
900115e8:	b510      	push	{r4, lr}
			configASSERT( pxTCB == pxCurrentTCB );
900115ea:	681c      	ldr	r4, [r3, #0]
	{
900115ec:	b082      	sub	sp, #8
			configASSERT( pxTCB == pxCurrentTCB );
900115ee:	4284      	cmp	r4, r0
900115f0:	d008      	beq.n	90011604 <xTaskPriorityDisinherit+0x20>
900115f2:	f04f 0350 	mov.w	r3, #80	; 0x50
900115f6:	f383 8811 	msr	BASEPRI, r3
900115fa:	f3bf 8f6f 	isb	sy
900115fe:	f3bf 8f4f 	dsb	sy
90011602:	e7fe      	b.n	90011602 <xTaskPriorityDisinherit+0x1e>
			configASSERT( pxTCB->uxMutexesHeld );
90011604:	6d23      	ldr	r3, [r4, #80]	; 0x50
90011606:	b14b      	cbz	r3, 9001161c <xTaskPriorityDisinherit+0x38>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
90011608:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
			( pxTCB->uxMutexesHeld )--;
9001160a:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
9001160c:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
			( pxTCB->uxMutexesHeld )--;
9001160e:	6523      	str	r3, [r4, #80]	; 0x50
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
90011610:	4291      	cmp	r1, r2
90011612:	d000      	beq.n	90011616 <xTaskPriorityDisinherit+0x32>
90011614:	b16b      	cbz	r3, 90011632 <xTaskPriorityDisinherit+0x4e>
	BaseType_t xReturn = pdFALSE;
90011616:	2000      	movs	r0, #0
	}
90011618:	b002      	add	sp, #8
9001161a:	bd10      	pop	{r4, pc}
9001161c:	f04f 0350 	mov.w	r3, #80	; 0x50
90011620:	f383 8811 	msr	BASEPRI, r3
90011624:	f3bf 8f6f 	isb	sy
90011628:	f3bf 8f4f 	dsb	sy
			configASSERT( pxTCB->uxMutexesHeld );
9001162c:	e7fe      	b.n	9001162c <xTaskPriorityDisinherit+0x48>
	BaseType_t xReturn = pdFALSE;
9001162e:	2000      	movs	r0, #0
	}
90011630:	4770      	bx	lr
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
90011632:	1d21      	adds	r1, r4, #4
90011634:	4608      	mov	r0, r1
90011636:	9101      	str	r1, [sp, #4]
90011638:	f7fd fe9c 	bl	9000f374 <uxListRemove>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
9001163c:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
					prvAddTaskToReadyList( pxTCB );
9001163e:	4b0a      	ldr	r3, [pc, #40]	; (90011668 <xTaskPriorityDisinherit+0x84>)
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
90011640:	f1c0 0238 	rsb	r2, r0, #56	; 0x38
					prvAddTaskToReadyList( pxTCB );
90011644:	9901      	ldr	r1, [sp, #4]
					pxTCB->uxPriority = pxTCB->uxBasePriority;
90011646:	62e0      	str	r0, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
90011648:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
9001164a:	681a      	ldr	r2, [r3, #0]
9001164c:	4290      	cmp	r0, r2
9001164e:	d900      	bls.n	90011652 <xTaskPriorityDisinherit+0x6e>
90011650:	6018      	str	r0, [r3, #0]
90011652:	4b06      	ldr	r3, [pc, #24]	; (9001166c <xTaskPriorityDisinherit+0x88>)
90011654:	eb00 0080 	add.w	r0, r0, r0, lsl #2
90011658:	eb03 0080 	add.w	r0, r3, r0, lsl #2
9001165c:	f7fd fe62 	bl	9000f324 <vListInsertEnd>
					xReturn = pdTRUE;
90011660:	2001      	movs	r0, #1
		return xReturn;
90011662:	e7d9      	b.n	90011618 <xTaskPriorityDisinherit+0x34>
90011664:	24026b78 	.word	0x24026b78
90011668:	24026ff4 	.word	0x24026ff4
9001166c:	24026b84 	.word	0x24026b84

90011670 <vTaskPriorityDisinheritAfterTimeout>:
		if( pxMutexHolder != NULL )
90011670:	2800      	cmp	r0, #0
90011672:	d040      	beq.n	900116f6 <vTaskPriorityDisinheritAfterTimeout+0x86>
			configASSERT( pxTCB->uxMutexesHeld );
90011674:	6d03      	ldr	r3, [r0, #80]	; 0x50
	{
90011676:	b530      	push	{r4, r5, lr}
90011678:	4604      	mov	r4, r0
9001167a:	b083      	sub	sp, #12
			configASSERT( pxTCB->uxMutexesHeld );
9001167c:	b153      	cbz	r3, 90011694 <vTaskPriorityDisinheritAfterTimeout+0x24>
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
9001167e:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
			if( pxTCB->uxPriority != uxPriorityToUse )
90011680:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
90011682:	4281      	cmp	r1, r0
90011684:	bf38      	it	cc
90011686:	4601      	movcc	r1, r0
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
90011688:	2b01      	cmp	r3, #1
9001168a:	d101      	bne.n	90011690 <vTaskPriorityDisinheritAfterTimeout+0x20>
9001168c:	428a      	cmp	r2, r1
9001168e:	d10a      	bne.n	900116a6 <vTaskPriorityDisinheritAfterTimeout+0x36>
	}
90011690:	b003      	add	sp, #12
90011692:	bd30      	pop	{r4, r5, pc}
90011694:	f04f 0350 	mov.w	r3, #80	; 0x50
90011698:	f383 8811 	msr	BASEPRI, r3
9001169c:	f3bf 8f6f 	isb	sy
900116a0:	f3bf 8f4f 	dsb	sy
			configASSERT( pxTCB->uxMutexesHeld );
900116a4:	e7fe      	b.n	900116a4 <vTaskPriorityDisinheritAfterTimeout+0x34>
					configASSERT( pxTCB != pxCurrentTCB );
900116a6:	4b19      	ldr	r3, [pc, #100]	; (9001170c <vTaskPriorityDisinheritAfterTimeout+0x9c>)
900116a8:	681b      	ldr	r3, [r3, #0]
900116aa:	42a3      	cmp	r3, r4
900116ac:	d024      	beq.n	900116f8 <vTaskPriorityDisinheritAfterTimeout+0x88>
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
900116ae:	69a3      	ldr	r3, [r4, #24]
					pxTCB->uxPriority = uxPriorityToUse;
900116b0:	62e1      	str	r1, [r4, #44]	; 0x2c
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
900116b2:	2b00      	cmp	r3, #0
900116b4:	db02      	blt.n	900116bc <vTaskPriorityDisinheritAfterTimeout+0x4c>
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
900116b6:	f1c1 0138 	rsb	r1, r1, #56	; 0x38
900116ba:	61a1      	str	r1, [r4, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
900116bc:	4d14      	ldr	r5, [pc, #80]	; (90011710 <vTaskPriorityDisinheritAfterTimeout+0xa0>)
900116be:	eb02 0282 	add.w	r2, r2, r2, lsl #2
900116c2:	6961      	ldr	r1, [r4, #20]
900116c4:	eb05 0382 	add.w	r3, r5, r2, lsl #2
900116c8:	4299      	cmp	r1, r3
900116ca:	d1e1      	bne.n	90011690 <vTaskPriorityDisinheritAfterTimeout+0x20>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
900116cc:	1d21      	adds	r1, r4, #4
900116ce:	4608      	mov	r0, r1
900116d0:	9101      	str	r1, [sp, #4]
900116d2:	f7fd fe4f 	bl	9000f374 <uxListRemove>
						prvAddTaskToReadyList( pxTCB );
900116d6:	4b0f      	ldr	r3, [pc, #60]	; (90011714 <vTaskPriorityDisinheritAfterTimeout+0xa4>)
900116d8:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
900116da:	681a      	ldr	r2, [r3, #0]
900116dc:	9901      	ldr	r1, [sp, #4]
900116de:	4290      	cmp	r0, r2
900116e0:	d900      	bls.n	900116e4 <vTaskPriorityDisinheritAfterTimeout+0x74>
900116e2:	6018      	str	r0, [r3, #0]
900116e4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
900116e8:	eb05 0080 	add.w	r0, r5, r0, lsl #2
	}
900116ec:	b003      	add	sp, #12
900116ee:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
						prvAddTaskToReadyList( pxTCB );
900116f2:	f7fd be17 	b.w	9000f324 <vListInsertEnd>
900116f6:	4770      	bx	lr
900116f8:	f04f 0350 	mov.w	r3, #80	; 0x50
900116fc:	f383 8811 	msr	BASEPRI, r3
90011700:	f3bf 8f6f 	isb	sy
90011704:	f3bf 8f4f 	dsb	sy
					configASSERT( pxTCB != pxCurrentTCB );
90011708:	e7fe      	b.n	90011708 <vTaskPriorityDisinheritAfterTimeout+0x98>
9001170a:	bf00      	nop
9001170c:	24026b78 	.word	0x24026b78
90011710:	24026b84 	.word	0x24026b84
90011714:	24026ff4 	.word	0x24026ff4

90011718 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
90011718:	4b04      	ldr	r3, [pc, #16]	; (9001172c <pvTaskIncrementMutexHeldCount+0x14>)
9001171a:	681a      	ldr	r2, [r3, #0]
9001171c:	b11a      	cbz	r2, 90011726 <pvTaskIncrementMutexHeldCount+0xe>
			( pxCurrentTCB->uxMutexesHeld )++;
9001171e:	6819      	ldr	r1, [r3, #0]
90011720:	6d0a      	ldr	r2, [r1, #80]	; 0x50
90011722:	3201      	adds	r2, #1
90011724:	650a      	str	r2, [r1, #80]	; 0x50
		return pxCurrentTCB;
90011726:	6818      	ldr	r0, [r3, #0]
	}
90011728:	4770      	bx	lr
9001172a:	bf00      	nop
9001172c:	24026b78 	.word	0x24026b78

90011730 <prvSwitchTimerLists>:
	}
}
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
90011730:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
90011734:	4e22      	ldr	r6, [pc, #136]	; (900117c0 <prvSwitchTimerLists+0x90>)
90011736:	b085      	sub	sp, #20
	if( xTimerQueue != NULL )
90011738:	f8df 908c 	ldr.w	r9, [pc, #140]	; 900117c8 <prvSwitchTimerLists+0x98>
		xMessage.xMessageID = xCommandID;
9001173c:	f04f 0800 	mov.w	r8, #0

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
90011740:	e00d      	b.n	9001175e <prvSwitchTimerLists+0x2e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
90011742:	68db      	ldr	r3, [r3, #12]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
90011744:	68dc      	ldr	r4, [r3, #12]
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
90011746:	681f      	ldr	r7, [r3, #0]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
90011748:	1d25      	adds	r5, r4, #4
9001174a:	4628      	mov	r0, r5
9001174c:	f7fd fe12 	bl	9000f374 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
90011750:	6a23      	ldr	r3, [r4, #32]
90011752:	4620      	mov	r0, r4
90011754:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
90011756:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
9001175a:	075b      	lsls	r3, r3, #29
9001175c:	d40a      	bmi.n	90011774 <prvSwitchTimerLists+0x44>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
9001175e:	6833      	ldr	r3, [r6, #0]
90011760:	681a      	ldr	r2, [r3, #0]
90011762:	2a00      	cmp	r2, #0
90011764:	d1ed      	bne.n	90011742 <prvSwitchTimerLists+0x12>
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
	pxCurrentTimerList = pxOverflowTimerList;
90011766:	4a17      	ldr	r2, [pc, #92]	; (900117c4 <prvSwitchTimerLists+0x94>)
90011768:	6811      	ldr	r1, [r2, #0]
	pxOverflowTimerList = pxTemp;
9001176a:	6013      	str	r3, [r2, #0]
	pxCurrentTimerList = pxOverflowTimerList;
9001176c:	6031      	str	r1, [r6, #0]
}
9001176e:	b005      	add	sp, #20
90011770:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
90011774:	69a3      	ldr	r3, [r4, #24]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
90011776:	4629      	mov	r1, r5
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
90011778:	443b      	add	r3, r7
			if( xReloadTime > xNextExpireTime )
9001177a:	429f      	cmp	r7, r3
9001177c:	d205      	bcs.n	9001178a <prvSwitchTimerLists+0x5a>
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
9001177e:	6830      	ldr	r0, [r6, #0]
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
90011780:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
90011782:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
90011784:	f7fd fdde 	bl	9000f344 <vListInsert>
90011788:	e7e9      	b.n	9001175e <prvSwitchTimerLists+0x2e>
	if( xTimerQueue != NULL )
9001178a:	f8d9 3000 	ldr.w	r3, [r9]
9001178e:	b16b      	cbz	r3, 900117ac <prvSwitchTimerLists+0x7c>
		xMessage.u.xTimerParameters.pxTimer = xTimer;
90011790:	9402      	str	r4, [sp, #8]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
90011792:	e9cd 8700 	strd	r8, r7, [sp]
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
90011796:	f7ff fecf 	bl	90011538 <xTaskGetSchedulerState>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
9001179a:	2300      	movs	r3, #0
9001179c:	4669      	mov	r1, sp
9001179e:	f8d9 0000 	ldr.w	r0, [r9]
900117a2:	461a      	mov	r2, r3
900117a4:	f7fe f95e 	bl	9000fa64 <xQueueGenericSend>
				configASSERT( xResult );
900117a8:	2800      	cmp	r0, #0
900117aa:	d1d8      	bne.n	9001175e <prvSwitchTimerLists+0x2e>
900117ac:	f04f 0350 	mov.w	r3, #80	; 0x50
900117b0:	f383 8811 	msr	BASEPRI, r3
900117b4:	f3bf 8f6f 	isb	sy
900117b8:	f3bf 8f4f 	dsb	sy
900117bc:	e7fe      	b.n	900117bc <prvSwitchTimerLists+0x8c>
900117be:	bf00      	nop
900117c0:	24027074 	.word	0x24027074
900117c4:	24027078 	.word	0x24027078
900117c8:	24027198 	.word	0x24027198

900117cc <prvTimerTask>:
{
900117cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
900117d0:	4e9f      	ldr	r6, [pc, #636]	; (90011a50 <prvTimerTask+0x284>)
900117d2:	b089      	sub	sp, #36	; 0x24
900117d4:	4d9f      	ldr	r5, [pc, #636]	; (90011a54 <prvTimerTask+0x288>)
					portYIELD_WITHIN_API();
900117d6:	f04f 29e0 	mov.w	r9, #3758153728	; 0xe000e000
900117da:	4c9f      	ldr	r4, [pc, #636]	; (90011a58 <prvTimerTask+0x28c>)
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
900117dc:	6833      	ldr	r3, [r6, #0]
900117de:	681f      	ldr	r7, [r3, #0]
900117e0:	2f00      	cmp	r7, #0
900117e2:	f000 80b2 	beq.w	9001194a <prvTimerTask+0x17e>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
900117e6:	68db      	ldr	r3, [r3, #12]
900117e8:	681f      	ldr	r7, [r3, #0]
	vTaskSuspendAll();
900117ea:	f7ff fccf 	bl	9001118c <vTaskSuspendAll>
	xTimeNow = xTaskGetTickCount();
900117ee:	f7ff fce5 	bl	900111bc <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
900117f2:	682a      	ldr	r2, [r5, #0]
	xTimeNow = xTaskGetTickCount();
900117f4:	4682      	mov	sl, r0
	if( xTimeNow < xLastTime )
900117f6:	4290      	cmp	r0, r2
900117f8:	f0c0 80af 	bcc.w	9001195a <prvTimerTask+0x18e>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
900117fc:	4287      	cmp	r7, r0
	xLastTime = xTimeNow;
900117fe:	6028      	str	r0, [r5, #0]
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
90011800:	f200 80d0 	bhi.w	900119a4 <prvTimerTask+0x1d8>
				( void ) xTaskResumeAll();
90011804:	f7ff fcca 	bl	9001119c <xTaskResumeAll>
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
90011808:	6832      	ldr	r2, [r6, #0]
9001180a:	68d2      	ldr	r2, [r2, #12]
9001180c:	f8d2 b00c 	ldr.w	fp, [r2, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
90011810:	f10b 0804 	add.w	r8, fp, #4
90011814:	4640      	mov	r0, r8
90011816:	f7fd fdad 	bl	9000f374 <uxListRemove>
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
9001181a:	f89b 0028 	ldrb.w	r0, [fp, #40]	; 0x28
9001181e:	0741      	lsls	r1, r0, #29
90011820:	f100 80d0 	bmi.w	900119c4 <prvTimerTask+0x1f8>
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
90011824:	f020 0001 	bic.w	r0, r0, #1
90011828:	f88b 0028 	strb.w	r0, [fp, #40]	; 0x28
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
9001182c:	f8db 3020 	ldr.w	r3, [fp, #32]
90011830:	4658      	mov	r0, fp
90011832:	4798      	blx	r3
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
90011834:	2200      	movs	r2, #0
90011836:	4669      	mov	r1, sp
90011838:	6820      	ldr	r0, [r4, #0]
9001183a:	f7fe fbff 	bl	9001003c <xQueueReceive>
9001183e:	2800      	cmp	r0, #0
90011840:	d0cc      	beq.n	900117dc <prvTimerTask+0x10>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
90011842:	9b00      	ldr	r3, [sp, #0]
90011844:	2b00      	cmp	r3, #0
90011846:	db77      	blt.n	90011938 <prvTimerTask+0x16c>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
90011848:	9f02      	ldr	r7, [sp, #8]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
9001184a:	697b      	ldr	r3, [r7, #20]
9001184c:	b113      	cbz	r3, 90011854 <prvTimerTask+0x88>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
9001184e:	1d38      	adds	r0, r7, #4
90011850:	f7fd fd90 	bl	9000f374 <uxListRemove>
	xTimeNow = xTaskGetTickCount();
90011854:	f7ff fcb2 	bl	900111bc <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
90011858:	682b      	ldr	r3, [r5, #0]
	xTimeNow = xTaskGetTickCount();
9001185a:	4680      	mov	r8, r0
	if( xTimeNow < xLastTime )
9001185c:	4298      	cmp	r0, r3
9001185e:	f0c0 8083 	bcc.w	90011968 <prvTimerTask+0x19c>
			switch( xMessage.xMessageID )
90011862:	9b00      	ldr	r3, [sp, #0]
	xLastTime = xTimeNow;
90011864:	f8c5 8000 	str.w	r8, [r5]
			switch( xMessage.xMessageID )
90011868:	2b09      	cmp	r3, #9
9001186a:	d8e3      	bhi.n	90011834 <prvTimerTask+0x68>
9001186c:	e8df f003 	tbb	[pc, r3]
90011870:	54050505 	.word	0x54050505
90011874:	05055b3e 	.word	0x05055b3e
90011878:	3e54      	.short	0x3e54
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
9001187a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
9001187e:	69ba      	ldr	r2, [r7, #24]
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
90011880:	f043 0301 	orr.w	r3, r3, #1
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
90011884:	613f      	str	r7, [r7, #16]
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
90011886:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
9001188a:	9b01      	ldr	r3, [sp, #4]
9001188c:	1899      	adds	r1, r3, r2
9001188e:	bf2c      	ite	cs
90011890:	2001      	movcs	r0, #1
90011892:	2000      	movcc	r0, #0
	if( xNextExpiryTime <= xTimeNow )
90011894:	4541      	cmp	r1, r8
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
90011896:	6079      	str	r1, [r7, #4]
	if( xNextExpiryTime <= xTimeNow )
90011898:	f200 8086 	bhi.w	900119a8 <prvTimerTask+0x1dc>
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
9001189c:	eba8 0303 	sub.w	r3, r8, r3
900118a0:	429a      	cmp	r2, r3
900118a2:	f200 80c0 	bhi.w	90011a26 <prvTimerTask+0x25a>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
900118a6:	6a3b      	ldr	r3, [r7, #32]
900118a8:	4638      	mov	r0, r7
900118aa:	4798      	blx	r3
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
900118ac:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
900118b0:	075b      	lsls	r3, r3, #29
900118b2:	d5bf      	bpl.n	90011834 <prvTimerTask+0x68>
	if( xTimerQueue != NULL )
900118b4:	6822      	ldr	r2, [r4, #0]
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
900118b6:	9901      	ldr	r1, [sp, #4]
900118b8:	69bb      	ldr	r3, [r7, #24]
	if( xTimerQueue != NULL )
900118ba:	b172      	cbz	r2, 900118da <prvTimerTask+0x10e>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
900118bc:	440b      	add	r3, r1
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
900118be:	e9cd 3705 	strd	r3, r7, [sp, #20]
		xMessage.xMessageID = xCommandID;
900118c2:	2300      	movs	r3, #0
900118c4:	9304      	str	r3, [sp, #16]
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
900118c6:	f7ff fe37 	bl	90011538 <xTaskGetSchedulerState>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
900118ca:	2300      	movs	r3, #0
900118cc:	a904      	add	r1, sp, #16
900118ce:	6820      	ldr	r0, [r4, #0]
900118d0:	461a      	mov	r2, r3
900118d2:	f7fe f8c7 	bl	9000fa64 <xQueueGenericSend>
							configASSERT( xResult );
900118d6:	2800      	cmp	r0, #0
900118d8:	d1ac      	bne.n	90011834 <prvTimerTask+0x68>
900118da:	f04f 0350 	mov.w	r3, #80	; 0x50
900118de:	f383 8811 	msr	BASEPRI, r3
900118e2:	f3bf 8f6f 	isb	sy
900118e6:	f3bf 8f4f 	dsb	sy
900118ea:	e7fe      	b.n	900118ea <prvTimerTask+0x11e>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
900118ec:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
900118f0:	f043 0301 	orr.w	r3, r3, #1
900118f4:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
900118f8:	9b01      	ldr	r3, [sp, #4]
900118fa:	61bb      	str	r3, [r7, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
900118fc:	2b00      	cmp	r3, #0
900118fe:	f000 809e 	beq.w	90011a3e <prvTimerTask+0x272>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
90011902:	4443      	add	r3, r8
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
90011904:	1d39      	adds	r1, r7, #4
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
90011906:	613f      	str	r7, [r7, #16]
	if( xNextExpiryTime <= xTimeNow )
90011908:	4543      	cmp	r3, r8
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
9001190a:	607b      	str	r3, [r7, #4]
	if( xNextExpiryTime <= xTimeNow )
9001190c:	d856      	bhi.n	900119bc <prvTimerTask+0x1f0>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
9001190e:	4b53      	ldr	r3, [pc, #332]	; (90011a5c <prvTimerTask+0x290>)
90011910:	6818      	ldr	r0, [r3, #0]
90011912:	f7fd fd17 	bl	9000f344 <vListInsert>
	return xProcessTimerNow;
90011916:	e78d      	b.n	90011834 <prvTimerTask+0x68>
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
90011918:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
9001191c:	f023 0301 	bic.w	r3, r3, #1
90011920:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
					break;
90011924:	e786      	b.n	90011834 <prvTimerTask+0x68>
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
90011926:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
9001192a:	079a      	lsls	r2, r3, #30
9001192c:	d572      	bpl.n	90011a14 <prvTimerTask+0x248>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
9001192e:	f023 0301 	bic.w	r3, r3, #1
90011932:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
90011936:	e77d      	b.n	90011834 <prvTimerTask+0x68>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
90011938:	9b01      	ldr	r3, [sp, #4]
9001193a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
9001193e:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
90011940:	9b00      	ldr	r3, [sp, #0]
90011942:	2b00      	cmp	r3, #0
90011944:	f6ff af76 	blt.w	90011834 <prvTimerTask+0x68>
90011948:	e77e      	b.n	90011848 <prvTimerTask+0x7c>
	vTaskSuspendAll();
9001194a:	f7ff fc1f 	bl	9001118c <vTaskSuspendAll>
	xTimeNow = xTaskGetTickCount();
9001194e:	f7ff fc35 	bl	900111bc <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
90011952:	682a      	ldr	r2, [r5, #0]
	xTimeNow = xTaskGetTickCount();
90011954:	4682      	mov	sl, r0
	if( xTimeNow < xLastTime )
90011956:	4282      	cmp	r2, r0
90011958:	d909      	bls.n	9001196e <prvTimerTask+0x1a2>
		prvSwitchTimerLists();
9001195a:	f7ff fee9 	bl	90011730 <prvSwitchTimerLists>
	xLastTime = xTimeNow;
9001195e:	f8c5 a000 	str.w	sl, [r5]
			( void ) xTaskResumeAll();
90011962:	f7ff fc1b 	bl	9001119c <xTaskResumeAll>
90011966:	e765      	b.n	90011834 <prvTimerTask+0x68>
		prvSwitchTimerLists();
90011968:	f7ff fee2 	bl	90011730 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
9001196c:	e779      	b.n	90011862 <prvTimerTask+0x96>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
9001196e:	4b3b      	ldr	r3, [pc, #236]	; (90011a5c <prvTimerTask+0x290>)
	xLastTime = xTimeNow;
90011970:	f8c5 a000 	str.w	sl, [r5]
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
90011974:	681a      	ldr	r2, [r3, #0]
90011976:	6812      	ldr	r2, [r2, #0]
90011978:	fab2 f282 	clz	r2, r2
9001197c:	0952      	lsrs	r2, r2, #5
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
9001197e:	eba7 010a 	sub.w	r1, r7, sl
90011982:	6820      	ldr	r0, [r4, #0]
90011984:	f7fe ff4e 	bl	90010824 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
90011988:	f7ff fc08 	bl	9001119c <xTaskResumeAll>
9001198c:	2800      	cmp	r0, #0
9001198e:	f47f af51 	bne.w	90011834 <prvTimerTask+0x68>
					portYIELD_WITHIN_API();
90011992:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
90011996:	f8c9 3d04 	str.w	r3, [r9, #3332]	; 0xd04
9001199a:	f3bf 8f4f 	dsb	sy
9001199e:	f3bf 8f6f 	isb	sy
900119a2:	e747      	b.n	90011834 <prvTimerTask+0x68>
900119a4:	2200      	movs	r2, #0
900119a6:	e7ea      	b.n	9001197e <prvTimerTask+0x1b2>
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
900119a8:	4543      	cmp	r3, r8
900119aa:	d902      	bls.n	900119b2 <prvTimerTask+0x1e6>
900119ac:	2800      	cmp	r0, #0
900119ae:	f43f af7a 	beq.w	900118a6 <prvTimerTask+0xda>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
900119b2:	1d39      	adds	r1, r7, #4
900119b4:	6830      	ldr	r0, [r6, #0]
900119b6:	f7fd fcc5 	bl	9000f344 <vListInsert>
	return xProcessTimerNow;
900119ba:	e73b      	b.n	90011834 <prvTimerTask+0x68>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
900119bc:	6830      	ldr	r0, [r6, #0]
900119be:	f7fd fcc1 	bl	9000f344 <vListInsert>
900119c2:	e737      	b.n	90011834 <prvTimerTask+0x68>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
900119c4:	f8db 2018 	ldr.w	r2, [fp, #24]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
900119c8:	f8cb b010 	str.w	fp, [fp, #16]
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
900119cc:	18b8      	adds	r0, r7, r2
	if( xNextExpiryTime <= xTimeNow )
900119ce:	4582      	cmp	sl, r0
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
900119d0:	f8cb 0004 	str.w	r0, [fp, #4]
	if( xNextExpiryTime <= xTimeNow )
900119d4:	d322      	bcc.n	90011a1c <prvTimerTask+0x250>
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
900119d6:	ebaa 0307 	sub.w	r3, sl, r7
900119da:	429a      	cmp	r2, r3
900119dc:	d829      	bhi.n	90011a32 <prvTimerTask+0x266>
	if( xTimerQueue != NULL )
900119de:	6823      	ldr	r3, [r4, #0]
900119e0:	b17b      	cbz	r3, 90011a02 <prvTimerTask+0x236>
		xMessage.xMessageID = xCommandID;
900119e2:	2300      	movs	r3, #0
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
900119e4:	9705      	str	r7, [sp, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
900119e6:	f8cd b018 	str.w	fp, [sp, #24]
		xMessage.xMessageID = xCommandID;
900119ea:	9304      	str	r3, [sp, #16]
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
900119ec:	f7ff fda4 	bl	90011538 <xTaskGetSchedulerState>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
900119f0:	2300      	movs	r3, #0
900119f2:	a904      	add	r1, sp, #16
900119f4:	6820      	ldr	r0, [r4, #0]
900119f6:	461a      	mov	r2, r3
900119f8:	f7fe f834 	bl	9000fa64 <xQueueGenericSend>
			configASSERT( xResult );
900119fc:	2800      	cmp	r0, #0
900119fe:	f47f af15 	bne.w	9001182c <prvTimerTask+0x60>
90011a02:	f04f 0350 	mov.w	r3, #80	; 0x50
90011a06:	f383 8811 	msr	BASEPRI, r3
90011a0a:	f3bf 8f6f 	isb	sy
90011a0e:	f3bf 8f4f 	dsb	sy
90011a12:	e7fe      	b.n	90011a12 <prvTimerTask+0x246>
							vPortFree( pxTimer );
90011a14:	4638      	mov	r0, r7
90011a16:	f7fd fc11 	bl	9000f23c <vPortFree>
90011a1a:	e70b      	b.n	90011834 <prvTimerTask+0x68>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
90011a1c:	4641      	mov	r1, r8
90011a1e:	6830      	ldr	r0, [r6, #0]
90011a20:	f7fd fc90 	bl	9000f344 <vListInsert>
	return xProcessTimerNow;
90011a24:	e702      	b.n	9001182c <prvTimerTask+0x60>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
90011a26:	4b0d      	ldr	r3, [pc, #52]	; (90011a5c <prvTimerTask+0x290>)
90011a28:	1d39      	adds	r1, r7, #4
90011a2a:	6818      	ldr	r0, [r3, #0]
90011a2c:	f7fd fc8a 	bl	9000f344 <vListInsert>
	return xProcessTimerNow;
90011a30:	e700      	b.n	90011834 <prvTimerTask+0x68>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
90011a32:	4b0a      	ldr	r3, [pc, #40]	; (90011a5c <prvTimerTask+0x290>)
90011a34:	4641      	mov	r1, r8
90011a36:	6818      	ldr	r0, [r3, #0]
90011a38:	f7fd fc84 	bl	9000f344 <vListInsert>
	return xProcessTimerNow;
90011a3c:	e6f6      	b.n	9001182c <prvTimerTask+0x60>
90011a3e:	f04f 0350 	mov.w	r3, #80	; 0x50
90011a42:	f383 8811 	msr	BASEPRI, r3
90011a46:	f3bf 8f6f 	isb	sy
90011a4a:	f3bf 8f4f 	dsb	sy
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
90011a4e:	e7fe      	b.n	90011a4e <prvTimerTask+0x282>
90011a50:	24027074 	.word	0x24027074
90011a54:	24027144 	.word	0x24027144
90011a58:	24027198 	.word	0x24027198
90011a5c:	24027078 	.word	0x24027078

90011a60 <xTimerCreateTimerTask>:
{
90011a60:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
	{
		if( xTimerQueue == NULL )
90011a62:	4c23      	ldr	r4, [pc, #140]	; (90011af0 <xTimerCreateTimerTask+0x90>)
{
90011a64:	b089      	sub	sp, #36	; 0x24
	taskENTER_CRITICAL();
90011a66:	f7fd fd05 	bl	9000f474 <vPortEnterCritical>
		if( xTimerQueue == NULL )
90011a6a:	6825      	ldr	r5, [r4, #0]
90011a6c:	b335      	cbz	r5, 90011abc <xTimerCreateTimerTask+0x5c>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
90011a6e:	f7fd fd23 	bl	9000f4b8 <vPortExitCritical>
	if( xTimerQueue != NULL )
90011a72:	6823      	ldr	r3, [r4, #0]
90011a74:	b1cb      	cbz	r3, 90011aaa <xTimerCreateTimerTask+0x4a>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
90011a76:	2400      	movs	r4, #0
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
90011a78:	aa07      	add	r2, sp, #28
90011a7a:	a906      	add	r1, sp, #24
90011a7c:	a805      	add	r0, sp, #20
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
90011a7e:	2502      	movs	r5, #2
			StackType_t *pxTimerTaskStackBuffer = NULL;
90011a80:	e9cd 4405 	strd	r4, r4, [sp, #20]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
90011a84:	f7fd fb0c 	bl	9000f0a0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
90011a88:	4623      	mov	r3, r4
90011a8a:	9a07      	ldr	r2, [sp, #28]
90011a8c:	9500      	str	r5, [sp, #0]
90011a8e:	e9dd 0105 	ldrd	r0, r1, [sp, #20]
90011a92:	e9cd 1001 	strd	r1, r0, [sp, #4]
90011a96:	4917      	ldr	r1, [pc, #92]	; (90011af4 <xTimerCreateTimerTask+0x94>)
90011a98:	4817      	ldr	r0, [pc, #92]	; (90011af8 <xTimerCreateTimerTask+0x98>)
90011a9a:	f7ff f93f 	bl	90010d1c <xTaskCreateStatic>
90011a9e:	4b17      	ldr	r3, [pc, #92]	; (90011afc <xTimerCreateTimerTask+0x9c>)
90011aa0:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
90011aa2:	b110      	cbz	r0, 90011aaa <xTimerCreateTimerTask+0x4a>
}
90011aa4:	2001      	movs	r0, #1
90011aa6:	b009      	add	sp, #36	; 0x24
90011aa8:	bdf0      	pop	{r4, r5, r6, r7, pc}
90011aaa:	f04f 0350 	mov.w	r3, #80	; 0x50
90011aae:	f383 8811 	msr	BASEPRI, r3
90011ab2:	f3bf 8f6f 	isb	sy
90011ab6:	f3bf 8f4f 	dsb	sy
	configASSERT( xReturn );
90011aba:	e7fe      	b.n	90011aba <xTimerCreateTimerTask+0x5a>
			vListInitialise( &xActiveTimerList1 );
90011abc:	4f10      	ldr	r7, [pc, #64]	; (90011b00 <xTimerCreateTimerTask+0xa0>)
			vListInitialise( &xActiveTimerList2 );
90011abe:	4e11      	ldr	r6, [pc, #68]	; (90011b04 <xTimerCreateTimerTask+0xa4>)
			vListInitialise( &xActiveTimerList1 );
90011ac0:	4638      	mov	r0, r7
90011ac2:	f7fd fc1f 	bl	9000f304 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
90011ac6:	4630      	mov	r0, r6
90011ac8:	f7fd fc1c 	bl	9000f304 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
90011acc:	4a0e      	ldr	r2, [pc, #56]	; (90011b08 <xTimerCreateTimerTask+0xa8>)
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
90011ace:	9500      	str	r5, [sp, #0]
90011ad0:	2110      	movs	r1, #16
			pxCurrentTimerList = &xActiveTimerList1;
90011ad2:	6017      	str	r7, [r2, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
90011ad4:	200a      	movs	r0, #10
			pxOverflowTimerList = &xActiveTimerList2;
90011ad6:	4a0d      	ldr	r2, [pc, #52]	; (90011b0c <xTimerCreateTimerTask+0xac>)
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
90011ad8:	4b0d      	ldr	r3, [pc, #52]	; (90011b10 <xTimerCreateTimerTask+0xb0>)
			pxOverflowTimerList = &xActiveTimerList2;
90011ada:	6016      	str	r6, [r2, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
90011adc:	4a0d      	ldr	r2, [pc, #52]	; (90011b14 <xTimerCreateTimerTask+0xb4>)
90011ade:	f7fd fe6b 	bl	9000f7b8 <xQueueGenericCreateStatic>
90011ae2:	6020      	str	r0, [r4, #0]
				if( xTimerQueue != NULL )
90011ae4:	2800      	cmp	r0, #0
90011ae6:	d0c2      	beq.n	90011a6e <xTimerCreateTimerTask+0xe>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
90011ae8:	490b      	ldr	r1, [pc, #44]	; (90011b18 <xTimerCreateTimerTask+0xb8>)
90011aea:	f7fe fe73 	bl	900107d4 <vQueueAddToRegistry>
90011aee:	e7be      	b.n	90011a6e <xTimerCreateTimerTask+0xe>
90011af0:	24027198 	.word	0x24027198
90011af4:	9002b924 	.word	0x9002b924
90011af8:	900117cd 	.word	0x900117cd
90011afc:	2402719c 	.word	0x2402719c
90011b00:	2402711c 	.word	0x2402711c
90011b04:	24027130 	.word	0x24027130
90011b08:	24027074 	.word	0x24027074
90011b0c:	24027078 	.word	0x24027078
90011b10:	24027148 	.word	0x24027148
90011b14:	2402707c 	.word	0x2402707c
90011b18:	9002b91c 	.word	0x9002b91c

90011b1c <xTimerCreate>:
	{
90011b1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90011b20:	4607      	mov	r7, r0
90011b22:	b085      	sub	sp, #20
		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
90011b24:	202c      	movs	r0, #44	; 0x2c
	{
90011b26:	4688      	mov	r8, r1
90011b28:	4616      	mov	r6, r2
90011b2a:	461d      	mov	r5, r3
		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
90011b2c:	f7fd fac8 	bl	9000f0c0 <pvPortMalloc>
		if( pxNewTimer != NULL )
90011b30:	4604      	mov	r4, r0
90011b32:	b1e8      	cbz	r0, 90011b70 <xTimerCreate+0x54>
			pxNewTimer->ucStatus = 0x00;
90011b34:	2300      	movs	r3, #0
90011b36:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
90011b3a:	f1b8 0f00 	cmp.w	r8, #0
90011b3e:	d01b      	beq.n	90011b78 <xTimerCreate+0x5c>
		if( xTimerQueue == NULL )
90011b40:	f8df 909c 	ldr.w	r9, [pc, #156]	; 90011be0 <xTimerCreate+0xc4>
	taskENTER_CRITICAL();
90011b44:	f7fd fc96 	bl	9000f474 <vPortEnterCritical>
		if( xTimerQueue == NULL )
90011b48:	f8d9 3000 	ldr.w	r3, [r9]
90011b4c:	b1eb      	cbz	r3, 90011b8a <xTimerCreate+0x6e>
	taskEXIT_CRITICAL();
90011b4e:	f7fd fcb3 	bl	9000f4b8 <vPortExitCritical>
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
90011b52:	9b0e      	ldr	r3, [sp, #56]	; 0x38
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
90011b54:	1d20      	adds	r0, r4, #4
		pxNewTimer->pcTimerName = pcTimerName;
90011b56:	6027      	str	r7, [r4, #0]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
90011b58:	6223      	str	r3, [r4, #32]
		pxNewTimer->pvTimerID = pvTimerID;
90011b5a:	e9c4 8506 	strd	r8, r5, [r4, #24]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
90011b5e:	f7fd fbdd 	bl	9000f31c <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
90011b62:	b12e      	cbz	r6, 90011b70 <xTimerCreate+0x54>
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
90011b64:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
90011b68:	f043 0304 	orr.w	r3, r3, #4
90011b6c:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
	}
90011b70:	4620      	mov	r0, r4
90011b72:	b005      	add	sp, #20
90011b74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90011b78:	f04f 0350 	mov.w	r3, #80	; 0x50
90011b7c:	f383 8811 	msr	BASEPRI, r3
90011b80:	f3bf 8f6f 	isb	sy
90011b84:	f3bf 8f4f 	dsb	sy
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
90011b88:	e7fe      	b.n	90011b88 <xTimerCreate+0x6c>
			vListInitialise( &xActiveTimerList1 );
90011b8a:	f8df b058 	ldr.w	fp, [pc, #88]	; 90011be4 <xTimerCreate+0xc8>
			vListInitialise( &xActiveTimerList2 );
90011b8e:	f8df a058 	ldr.w	sl, [pc, #88]	; 90011be8 <xTimerCreate+0xcc>
			vListInitialise( &xActiveTimerList1 );
90011b92:	4658      	mov	r0, fp
90011b94:	9303      	str	r3, [sp, #12]
90011b96:	f7fd fbb5 	bl	9000f304 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
90011b9a:	4650      	mov	r0, sl
90011b9c:	f7fd fbb2 	bl	9000f304 <vListInitialise>
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
90011ba0:	9b03      	ldr	r3, [sp, #12]
90011ba2:	4a0a      	ldr	r2, [pc, #40]	; (90011bcc <xTimerCreate+0xb0>)
90011ba4:	2110      	movs	r1, #16
90011ba6:	9300      	str	r3, [sp, #0]
90011ba8:	200a      	movs	r0, #10
			pxCurrentTimerList = &xActiveTimerList1;
90011baa:	4b09      	ldr	r3, [pc, #36]	; (90011bd0 <xTimerCreate+0xb4>)
90011bac:	f8c3 b000 	str.w	fp, [r3]
			pxOverflowTimerList = &xActiveTimerList2;
90011bb0:	4b08      	ldr	r3, [pc, #32]	; (90011bd4 <xTimerCreate+0xb8>)
90011bb2:	f8c3 a000 	str.w	sl, [r3]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
90011bb6:	4b08      	ldr	r3, [pc, #32]	; (90011bd8 <xTimerCreate+0xbc>)
90011bb8:	f7fd fdfe 	bl	9000f7b8 <xQueueGenericCreateStatic>
90011bbc:	f8c9 0000 	str.w	r0, [r9]
				if( xTimerQueue != NULL )
90011bc0:	2800      	cmp	r0, #0
90011bc2:	d0c4      	beq.n	90011b4e <xTimerCreate+0x32>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
90011bc4:	4905      	ldr	r1, [pc, #20]	; (90011bdc <xTimerCreate+0xc0>)
90011bc6:	f7fe fe05 	bl	900107d4 <vQueueAddToRegistry>
90011bca:	e7c0      	b.n	90011b4e <xTimerCreate+0x32>
90011bcc:	2402707c 	.word	0x2402707c
90011bd0:	24027074 	.word	0x24027074
90011bd4:	24027078 	.word	0x24027078
90011bd8:	24027148 	.word	0x24027148
90011bdc:	9002b91c 	.word	0x9002b91c
90011be0:	24027198 	.word	0x24027198
90011be4:	2402711c 	.word	0x2402711c
90011be8:	24027130 	.word	0x24027130

90011bec <xTimerCreateStatic>:
	{
90011bec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			volatile size_t xSize = sizeof( StaticTimer_t );
90011bf0:	242c      	movs	r4, #44	; 0x2c
	{
90011bf2:	b085      	sub	sp, #20
			volatile size_t xSize = sizeof( StaticTimer_t );
90011bf4:	9403      	str	r4, [sp, #12]
			configASSERT( xSize == sizeof( Timer_t ) );
90011bf6:	9c03      	ldr	r4, [sp, #12]
90011bf8:	2c2c      	cmp	r4, #44	; 0x2c
90011bfa:	d008      	beq.n	90011c0e <xTimerCreateStatic+0x22>
90011bfc:	f04f 0350 	mov.w	r3, #80	; 0x50
90011c00:	f383 8811 	msr	BASEPRI, r3
90011c04:	f3bf 8f6f 	isb	sy
90011c08:	f3bf 8f4f 	dsb	sy
90011c0c:	e7fe      	b.n	90011c0c <xTimerCreateStatic+0x20>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
90011c0e:	461d      	mov	r5, r3
90011c10:	9b03      	ldr	r3, [sp, #12]
		configASSERT( pxTimerBuffer );
90011c12:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
90011c14:	b343      	cbz	r3, 90011c68 <xTimerCreateStatic+0x7c>
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
90011c16:	4616      	mov	r6, r2
90011c18:	461a      	mov	r2, r3
90011c1a:	2302      	movs	r3, #2
90011c1c:	460f      	mov	r7, r1
90011c1e:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
90011c22:	b351      	cbz	r1, 90011c7a <xTimerCreateStatic+0x8e>
		if( xTimerQueue == NULL )
90011c24:	4c29      	ldr	r4, [pc, #164]	; (90011ccc <xTimerCreateStatic+0xe0>)
90011c26:	4680      	mov	r8, r0
	taskENTER_CRITICAL();
90011c28:	f7fd fc24 	bl	9000f474 <vPortEnterCritical>
		if( xTimerQueue == NULL )
90011c2c:	f8d4 b000 	ldr.w	fp, [r4]
90011c30:	f1bb 0f00 	cmp.w	fp, #0
90011c34:	d02a      	beq.n	90011c8c <xTimerCreateStatic+0xa0>
	taskEXIT_CRITICAL();
90011c36:	f7fd fc3f 	bl	9000f4b8 <vPortExitCritical>
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
90011c3a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
90011c3c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
90011c3e:	1d18      	adds	r0, r3, #4
		pxNewTimer->pcTimerName = pcTimerName;
90011c40:	f8c3 8000 	str.w	r8, [r3]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
90011c44:	621a      	str	r2, [r3, #32]
		pxNewTimer->pvTimerID = pvTimerID;
90011c46:	e9c3 7506 	strd	r7, r5, [r3, #24]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
90011c4a:	f7fd fb67 	bl	9000f31c <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
90011c4e:	b13e      	cbz	r6, 90011c60 <xTimerCreateStatic+0x74>
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
90011c50:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
90011c52:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
90011c54:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
90011c58:	f043 0304 	orr.w	r3, r3, #4
90011c5c:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
	}
90011c60:	980f      	ldr	r0, [sp, #60]	; 0x3c
90011c62:	b005      	add	sp, #20
90011c64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90011c68:	f04f 0350 	mov.w	r3, #80	; 0x50
90011c6c:	f383 8811 	msr	BASEPRI, r3
90011c70:	f3bf 8f6f 	isb	sy
90011c74:	f3bf 8f4f 	dsb	sy
		configASSERT( pxTimerBuffer );
90011c78:	e7fe      	b.n	90011c78 <xTimerCreateStatic+0x8c>
90011c7a:	f04f 0350 	mov.w	r3, #80	; 0x50
90011c7e:	f383 8811 	msr	BASEPRI, r3
90011c82:	f3bf 8f6f 	isb	sy
90011c86:	f3bf 8f4f 	dsb	sy
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
90011c8a:	e7fe      	b.n	90011c8a <xTimerCreateStatic+0x9e>
			vListInitialise( &xActiveTimerList1 );
90011c8c:	f8df a054 	ldr.w	sl, [pc, #84]	; 90011ce4 <xTimerCreateStatic+0xf8>
			vListInitialise( &xActiveTimerList2 );
90011c90:	f8df 9054 	ldr.w	r9, [pc, #84]	; 90011ce8 <xTimerCreateStatic+0xfc>
			vListInitialise( &xActiveTimerList1 );
90011c94:	4650      	mov	r0, sl
90011c96:	f7fd fb35 	bl	9000f304 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
90011c9a:	4648      	mov	r0, r9
90011c9c:	f7fd fb32 	bl	9000f304 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
90011ca0:	4a0b      	ldr	r2, [pc, #44]	; (90011cd0 <xTimerCreateStatic+0xe4>)
			pxOverflowTimerList = &xActiveTimerList2;
90011ca2:	4b0c      	ldr	r3, [pc, #48]	; (90011cd4 <xTimerCreateStatic+0xe8>)
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
90011ca4:	2110      	movs	r1, #16
90011ca6:	f8cd b000 	str.w	fp, [sp]
90011caa:	200a      	movs	r0, #10
			pxCurrentTimerList = &xActiveTimerList1;
90011cac:	f8c2 a000 	str.w	sl, [r2]
			pxOverflowTimerList = &xActiveTimerList2;
90011cb0:	f8c3 9000 	str.w	r9, [r3]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
90011cb4:	4a08      	ldr	r2, [pc, #32]	; (90011cd8 <xTimerCreateStatic+0xec>)
90011cb6:	4b09      	ldr	r3, [pc, #36]	; (90011cdc <xTimerCreateStatic+0xf0>)
90011cb8:	f7fd fd7e 	bl	9000f7b8 <xQueueGenericCreateStatic>
90011cbc:	6020      	str	r0, [r4, #0]
				if( xTimerQueue != NULL )
90011cbe:	2800      	cmp	r0, #0
90011cc0:	d0b9      	beq.n	90011c36 <xTimerCreateStatic+0x4a>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
90011cc2:	4907      	ldr	r1, [pc, #28]	; (90011ce0 <xTimerCreateStatic+0xf4>)
90011cc4:	f7fe fd86 	bl	900107d4 <vQueueAddToRegistry>
90011cc8:	e7b5      	b.n	90011c36 <xTimerCreateStatic+0x4a>
90011cca:	bf00      	nop
90011ccc:	24027198 	.word	0x24027198
90011cd0:	24027074 	.word	0x24027074
90011cd4:	24027078 	.word	0x24027078
90011cd8:	2402707c 	.word	0x2402707c
90011cdc:	24027148 	.word	0x24027148
90011ce0:	9002b91c 	.word	0x9002b91c
90011ce4:	2402711c 	.word	0x2402711c
90011ce8:	24027130 	.word	0x24027130

90011cec <xTimerGenericCommand>:
	configASSERT( xTimer );
90011cec:	b1c8      	cbz	r0, 90011d22 <xTimerGenericCommand+0x36>
{
90011cee:	b570      	push	{r4, r5, r6, lr}
	if( xTimerQueue != NULL )
90011cf0:	4e17      	ldr	r6, [pc, #92]	; (90011d50 <xTimerGenericCommand+0x64>)
{
90011cf2:	b084      	sub	sp, #16
	if( xTimerQueue != NULL )
90011cf4:	6834      	ldr	r4, [r6, #0]
90011cf6:	b18c      	cbz	r4, 90011d1c <xTimerGenericCommand+0x30>
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
90011cf8:	2905      	cmp	r1, #5
		xMessage.u.xTimerParameters.pxTimer = xTimer;
90011cfa:	9002      	str	r0, [sp, #8]
		xMessage.xMessageID = xCommandID;
90011cfc:	e9cd 1200 	strd	r1, r2, [sp]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
90011d00:	dc18      	bgt.n	90011d34 <xTimerGenericCommand+0x48>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
90011d02:	f7ff fc19 	bl	90011538 <xTaskGetSchedulerState>
90011d06:	2802      	cmp	r0, #2
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
90011d08:	f04f 0300 	mov.w	r3, #0
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
90011d0c:	d01a      	beq.n	90011d44 <xTimerGenericCommand+0x58>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
90011d0e:	4669      	mov	r1, sp
90011d10:	461a      	mov	r2, r3
90011d12:	6830      	ldr	r0, [r6, #0]
90011d14:	f7fd fea6 	bl	9000fa64 <xQueueGenericSend>
}
90011d18:	b004      	add	sp, #16
90011d1a:	bd70      	pop	{r4, r5, r6, pc}
BaseType_t xReturn = pdFAIL;
90011d1c:	4620      	mov	r0, r4
}
90011d1e:	b004      	add	sp, #16
90011d20:	bd70      	pop	{r4, r5, r6, pc}
90011d22:	f04f 0350 	mov.w	r3, #80	; 0x50
90011d26:	f383 8811 	msr	BASEPRI, r3
90011d2a:	f3bf 8f6f 	isb	sy
90011d2e:	f3bf 8f4f 	dsb	sy
	configASSERT( xTimer );
90011d32:	e7fe      	b.n	90011d32 <xTimerGenericCommand+0x46>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
90011d34:	461a      	mov	r2, r3
90011d36:	4669      	mov	r1, sp
90011d38:	2300      	movs	r3, #0
90011d3a:	4620      	mov	r0, r4
90011d3c:	f7fe f8bc 	bl	9000feb8 <xQueueGenericSendFromISR>
}
90011d40:	b004      	add	sp, #16
90011d42:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
90011d44:	9a08      	ldr	r2, [sp, #32]
90011d46:	4669      	mov	r1, sp
90011d48:	6830      	ldr	r0, [r6, #0]
90011d4a:	f7fd fe8b 	bl	9000fa64 <xQueueGenericSend>
90011d4e:	e7e6      	b.n	90011d1e <xTimerGenericCommand+0x32>
90011d50:	24027198 	.word	0x24027198

90011d54 <pvTimerGetTimerID>:
void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
Timer_t * const pxTimer = xTimer;
void *pvReturn;

	configASSERT( xTimer );
90011d54:	b158      	cbz	r0, 90011d6e <pvTimerGetTimerID+0x1a>
{
90011d56:	b510      	push	{r4, lr}
90011d58:	4604      	mov	r4, r0
90011d5a:	b082      	sub	sp, #8

	taskENTER_CRITICAL();
90011d5c:	f7fd fb8a 	bl	9000f474 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
90011d60:	69e0      	ldr	r0, [r4, #28]
90011d62:	9001      	str	r0, [sp, #4]
	}
	taskEXIT_CRITICAL();
90011d64:	f7fd fba8 	bl	9000f4b8 <vPortExitCritical>

	return pvReturn;
}
90011d68:	9801      	ldr	r0, [sp, #4]
90011d6a:	b002      	add	sp, #8
90011d6c:	bd10      	pop	{r4, pc}
90011d6e:	f04f 0350 	mov.w	r3, #80	; 0x50
90011d72:	f383 8811 	msr	BASEPRI, r3
90011d76:	f3bf 8f6f 	isb	sy
90011d7a:	f3bf 8f4f 	dsb	sy
	configASSERT( xTimer );
90011d7e:	e7fe      	b.n	90011d7e <pvTimerGetTimerID+0x2a>

90011d80 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks>:
static uint32_t JPEG_MCU_YCbCr420_ARGB_ConvertBlocks(uint8_t *pInBuffer, 
                                      uint8_t *pOutBuffer, 
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{  
90011d80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  int32_t c_red, c_blue, c_green;
  
  uint8_t *pOutAddr, *pOutAddr2;
  uint8_t *pChrom, *pLum;
  
  numberMCU = DataCount / YCBCR_420_BLOCK_SIZE;
90011d84:	4c82      	ldr	r4, [pc, #520]	; (90011f90 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x210>)
{  
90011d86:	b091      	sub	sp, #68	; 0x44
  numberMCU = DataCount / YCBCR_420_BLOCK_SIZE;
90011d88:	fba4 4303 	umull	r4, r3, r4, r3
{  
90011d8c:	910d      	str	r1, [sp, #52]	; 0x34
  numberMCU = DataCount / YCBCR_420_BLOCK_SIZE;
90011d8e:	0a19      	lsrs	r1, r3, #8
{  
90011d90:	920b      	str	r2, [sp, #44]	; 0x2c
  currentMCU = BlockIndex;
  

  while(currentMCU < (numberMCU + BlockIndex))
90011d92:	eb02 2313 	add.w	r3, r2, r3, lsr #8
{  
90011d96:	9008      	str	r0, [sp, #32]
  numberMCU = DataCount / YCBCR_420_BLOCK_SIZE;
90011d98:	ee07 1a90 	vmov	s15, r1
  while(currentMCU < (numberMCU + BlockIndex))
90011d9c:	4293      	cmp	r3, r2
90011d9e:	930f      	str	r3, [sp, #60]	; 0x3c
90011da0:	f240 80f1 	bls.w	90011f86 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x206>
  {
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*16;
90011da4:	4b7b      	ldr	r3, [pc, #492]	; (90011f94 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x214>)
90011da6:	f8df 81fc 	ldr.w	r8, [pc, #508]	; 90011fa4 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x224>
    
    yRef = ((currentMCU *16) % JPEG_ConvertorParams.WidthExtend);
    
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
90011daa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*16;
90011dac:	6a59      	ldr	r1, [r3, #36]	; 0x24
      if(i == 8)
      {
        pLum = pInBuffer + 128;
      }
      
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
90011dae:	691b      	ldr	r3, [r3, #16]
90011db0:	f8df 91f4 	ldr.w	r9, [pc, #500]	; 90011fa8 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x228>
90011db4:	9305      	str	r3, [sp, #20]
          pLum += 64;                      
        }

        pLum = pLum - 128 + 16;
        
        refline += 2*JPEG_ConvertorParams.ScaledWidth;          
90011db6:	0053      	lsls	r3, r2, #1
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
90011db8:	920a      	str	r2, [sp, #40]	; 0x28
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*16;
90011dba:	910e      	str	r1, [sp, #56]	; 0x38
        refline += 2*JPEG_ConvertorParams.ScaledWidth;          
90011dbc:	930c      	str	r3, [sp, #48]	; 0x30
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*16;
90011dbe:	9a08      	ldr	r2, [sp, #32]
    currentMCU++;
90011dc0:	f04f 0e02 	mov.w	lr, #2
90011dc4:	990b      	ldr	r1, [sp, #44]	; 0x2c
90011dc6:	f502 7080 	add.w	r0, r2, #256	; 0x100
90011dca:	9204      	str	r2, [sp, #16]
90011dcc:	010b      	lsls	r3, r1, #4
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*16;
90011dce:	3101      	adds	r1, #1
90011dd0:	9006      	str	r0, [sp, #24]
90011dd2:	980e      	ldr	r0, [sp, #56]	; 0x38
90011dd4:	910b      	str	r1, [sp, #44]	; 0x2c
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
90011dd6:	990a      	ldr	r1, [sp, #40]	; 0x28
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*16;
90011dd8:	fbb3 f2f0 	udiv	r2, r3, r0
    yRef = ((currentMCU *16) % JPEG_ConvertorParams.WidthExtend);
90011ddc:	fb00 3312 	mls	r3, r0, r2, r3
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
90011de0:	fb01 f202 	mul.w	r2, r1, r2
90011de4:	005b      	lsls	r3, r3, #1
90011de6:	eb03 1302 	add.w	r3, r3, r2, lsl #4
90011dea:	9301      	str	r3, [sp, #4]
    for(i= 0; i <  16; i+=2)
90011dec:	e009      	b.n	90011e02 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x82>
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
90011dee:	9b05      	ldr	r3, [sp, #20]
90011df0:	9a01      	ldr	r2, [sp, #4]
90011df2:	4293      	cmp	r3, r2
90011df4:	d80f      	bhi.n	90011e16 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x96>
    for(i= 0; i <  16; i+=2)
90011df6:	f1be 0f10 	cmp.w	lr, #16
90011dfa:	f000 80bb 	beq.w	90011f74 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x1f4>
90011dfe:	f10e 0e02 	add.w	lr, lr, #2
      if(i == 8)
90011e02:	f1be 0f0a 	cmp.w	lr, #10
90011e06:	d1f2      	bne.n	90011dee <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x6e>
        pLum = pInBuffer + 128;
90011e08:	9b08      	ldr	r3, [sp, #32]
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
90011e0a:	9a01      	ldr	r2, [sp, #4]
90011e0c:	3380      	adds	r3, #128	; 0x80
90011e0e:	9304      	str	r3, [sp, #16]
90011e10:	9b05      	ldr	r3, [sp, #20]
90011e12:	4293      	cmp	r3, r2
90011e14:	d9f3      	bls.n	90011dfe <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x7e>
        pOutAddr = pOutBuffer + refline;
90011e16:	9a01      	ldr	r2, [sp, #4]
        pOutAddr2 = pOutAddr + JPEG_ConvertorParams.ScaledWidth;
90011e18:	9906      	ldr	r1, [sp, #24]
        pOutAddr = pOutBuffer + refline;
90011e1a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
        pOutAddr2 = pOutAddr + JPEG_ConvertorParams.ScaledWidth;
90011e1c:	9103      	str	r1, [sp, #12]
        pOutAddr = pOutBuffer + refline;
90011e1e:	4413      	add	r3, r2
        pOutAddr2 = pOutAddr + JPEG_ConvertorParams.ScaledWidth;
90011e20:	990a      	ldr	r1, [sp, #40]	; 0x28
90011e22:	9a04      	ldr	r2, [sp, #16]
90011e24:	1859      	adds	r1, r3, r1
90011e26:	f103 0c10 	add.w	ip, r3, #16
90011e2a:	f8cd e024 	str.w	lr, [sp, #36]	; 0x24
90011e2e:	3330      	adds	r3, #48	; 0x30
90011e30:	4696      	mov	lr, r2
90011e32:	9102      	str	r1, [sp, #8]
        for(k= 0; k<2; k++)
90011e34:	9307      	str	r3, [sp, #28]
90011e36:	9b03      	ldr	r3, [sp, #12]
90011e38:	f1ac 0510 	sub.w	r5, ip, #16
          for(j=0; j < 8; j+=2)
90011e3c:	4674      	mov	r4, lr
    currentMCU++;
90011e3e:	9e02      	ldr	r6, [sp, #8]
90011e40:	1e5f      	subs	r7, r3, #1
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
90011e42:	f817 3f01 	ldrb.w	r3, [r7, #1]!
            pOutAddr += JPEG_BYTES_PER_PIXEL * 2;
90011e46:	3504      	adds	r5, #4
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
90011e48:	4953      	ldr	r1, [pc, #332]	; (90011f98 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x218>)
          for(j=0; j < 8; j+=2)
90011e4a:	3402      	adds	r4, #2
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));          
90011e4c:	f897 0040 	ldrb.w	r0, [r7, #64]	; 0x40
            pOutAddr2 += JPEG_BYTES_PER_PIXEL * 2;
90011e50:	3604      	adds	r6, #4
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
90011e52:	f851 a023 	ldr.w	sl, [r1, r3, lsl #2]
          for(j=0; j < 8; j+=2)
90011e56:	4565      	cmp	r5, ip
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
90011e58:	4950      	ldr	r1, [pc, #320]	; (90011f9c <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x21c>)
            ycomp = (int32_t)(*(pLum +j));
90011e5a:	f814 2c02 	ldrb.w	r2, [r4, #-2]
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
90011e5e:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
90011e62:	f858 3020 	ldr.w	r3, [r8, r0, lsl #2]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90011e66:	4449      	add	r1, r9
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
90011e68:	449a      	add	sl, r3
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));          
90011e6a:	4b4d      	ldr	r3, [pc, #308]	; (90011fa0 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x220>)
90011e6c:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90011e70:	eb09 432a 	add.w	r3, r9, sl, asr #16
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90011e74:	eb01 0a02 	add.w	sl, r1, r2
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90011e78:	4448      	add	r0, r9
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90011e7a:	eb03 0b02 	add.w	fp, r3, r2
90011e7e:	f89a a100 	ldrb.w	sl, [sl, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90011e82:	4402      	add	r2, r0
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90011e84:	f89b b100 	ldrb.w	fp, [fp, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90011e88:	f892 2100 	ldrb.w	r2, [r2, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90011e8c:	ea4f 0b9b 	mov.w	fp, fp, lsr #2
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90011e90:	ea4f 02d2 	mov.w	r2, r2, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90011e94:	ea4f 1b4b 	mov.w	fp, fp, lsl #5
90011e98:	ea4b 22c2 	orr.w	r2, fp, r2, lsl #11
90011e9c:	ea42 02da 	orr.w	r2, r2, sl, lsr #3
            *(__IO uint16_t *)pOutAddr = 
90011ea0:	f825 2c04 	strh.w	r2, [r5, #-4]
            ycomp = (int32_t)(*(pLum +j +1));
90011ea4:	f814 ac01 	ldrb.w	sl, [r4, #-1]
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90011ea8:	eb03 020a 	add.w	r2, r3, sl
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90011eac:	eb00 0b0a 	add.w	fp, r0, sl
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90011eb0:	448a      	add	sl, r1
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90011eb2:	f892 2100 	ldrb.w	r2, [r2, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90011eb6:	f89b b100 	ldrb.w	fp, [fp, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90011eba:	ea4f 0292 	mov.w	r2, r2, lsr #2
90011ebe:	f89a a100 	ldrb.w	sl, [sl, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90011ec2:	ea4f 0bdb 	mov.w	fp, fp, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90011ec6:	ea4f 1242 	mov.w	r2, r2, lsl #5
90011eca:	ea42 22cb 	orr.w	r2, r2, fp, lsl #11
90011ece:	ea42 02da 	orr.w	r2, r2, sl, lsr #3
            *((__IO uint16_t *)(pOutAddr + 2)) = 
90011ed2:	f825 2c02 	strh.w	r2, [r5, #-2]
            ycomp = (int32_t)(*(pLum +j +8));
90011ed6:	f894 a006 	ldrb.w	sl, [r4, #6]
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90011eda:	eb03 020a 	add.w	r2, r3, sl
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90011ede:	eb00 0b0a 	add.w	fp, r0, sl
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90011ee2:	448a      	add	sl, r1
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90011ee4:	f892 2100 	ldrb.w	r2, [r2, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90011ee8:	f89b b100 	ldrb.w	fp, [fp, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90011eec:	ea4f 0292 	mov.w	r2, r2, lsr #2
90011ef0:	f89a a100 	ldrb.w	sl, [sl, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90011ef4:	ea4f 0bdb 	mov.w	fp, fp, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90011ef8:	ea4f 1242 	mov.w	r2, r2, lsl #5
90011efc:	ea42 22cb 	orr.w	r2, r2, fp, lsl #11
90011f00:	ea42 02da 	orr.w	r2, r2, sl, lsr #3
            *(__IO uint16_t *)pOutAddr2 = 
90011f04:	f826 2c04 	strh.w	r2, [r6, #-4]
            ycomp = (int32_t)(*(pLum +j +8 +1));
90011f08:	79e2      	ldrb	r2, [r4, #7]
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90011f0a:	4413      	add	r3, r2
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90011f0c:	4410      	add	r0, r2
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);         
90011f0e:	4411      	add	r1, r2
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90011f10:	f893 3100 	ldrb.w	r3, [r3, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90011f14:	f890 2100 	ldrb.w	r2, [r0, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90011f18:	ea4f 0393 	mov.w	r3, r3, lsr #2
90011f1c:	f891 1100 	ldrb.w	r1, [r1, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90011f20:	ea4f 02d2 	mov.w	r2, r2, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90011f24:	ea4f 1343 	mov.w	r3, r3, lsl #5
90011f28:	ea43 23c2 	orr.w	r3, r3, r2, lsl #11
90011f2c:	ea43 03d1 	orr.w	r3, r3, r1, lsr #3
            *((__IO uint16_t *)(pOutAddr2 +2)) = 
90011f30:	f826 3c02 	strh.w	r3, [r6, #-2]
          for(j=0; j < 8; j+=2)
90011f34:	d185      	bne.n	90011e42 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0xc2>
            pOutAddr2 += JPEG_BYTES_PER_PIXEL * 2;
90011f36:	9b02      	ldr	r3, [sp, #8]
        for(k= 0; k<2; k++)
90011f38:	f105 0c10 	add.w	ip, r5, #16
          pLum += 64;                      
90011f3c:	f10e 0e40 	add.w	lr, lr, #64	; 0x40
            pOutAddr2 += JPEG_BYTES_PER_PIXEL * 2;
90011f40:	3310      	adds	r3, #16
90011f42:	9302      	str	r3, [sp, #8]
            pChrom++;
90011f44:	9b03      	ldr	r3, [sp, #12]
90011f46:	3304      	adds	r3, #4
90011f48:	9303      	str	r3, [sp, #12]
        for(k= 0; k<2; k++)
90011f4a:	9b07      	ldr	r3, [sp, #28]
90011f4c:	4563      	cmp	r3, ip
90011f4e:	f47f af72 	bne.w	90011e36 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0xb6>
            pChrom++;
90011f52:	9b06      	ldr	r3, [sp, #24]
90011f54:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
90011f58:	3308      	adds	r3, #8
        refline += 2*JPEG_ConvertorParams.ScaledWidth;          
90011f5a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    for(i= 0; i <  16; i+=2)
90011f5c:	f1be 0f10 	cmp.w	lr, #16
            pChrom++;
90011f60:	9306      	str	r3, [sp, #24]
        pLum = pLum - 128 + 16;
90011f62:	9b04      	ldr	r3, [sp, #16]
90011f64:	f103 0310 	add.w	r3, r3, #16
90011f68:	9304      	str	r3, [sp, #16]
        refline += 2*JPEG_ConvertorParams.ScaledWidth;          
90011f6a:	9b01      	ldr	r3, [sp, #4]
90011f6c:	4413      	add	r3, r2
90011f6e:	9301      	str	r3, [sp, #4]
    for(i= 0; i <  16; i+=2)
90011f70:	f47f af45 	bne.w	90011dfe <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x7e>
      }
    }   
    
    pInBuffer +=  YCBCR_420_BLOCK_SIZE;
90011f74:	9b08      	ldr	r3, [sp, #32]
  while(currentMCU < (numberMCU + BlockIndex))
90011f76:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    pInBuffer +=  YCBCR_420_BLOCK_SIZE;
90011f78:	f503 73c0 	add.w	r3, r3, #384	; 0x180
90011f7c:	9308      	str	r3, [sp, #32]
  while(currentMCU < (numberMCU + BlockIndex))
90011f7e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
90011f80:	4293      	cmp	r3, r2
90011f82:	f47f af1c 	bne.w	90011dbe <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x3e>
  }
  return numberMCU;
}
90011f86:	ee17 0a90 	vmov	r0, s15
90011f8a:	b011      	add	sp, #68	; 0x44
90011f8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90011f90:	aaaaaaab 	.word	0xaaaaaaab
90011f94:	240281a0 	.word	0x240281a0
90011f98:	240275a0 	.word	0x240275a0
90011f9c:	240271a0 	.word	0x240271a0
90011fa0:	24027da0 	.word	0x24027da0
90011fa4:	240279a0 	.word	0x240279a0
90011fa8:	9002b92c 	.word	0x9002b92c

90011fac <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks>:
static uint32_t JPEG_MCU_YCbCr422_ARGB_ConvertBlocks(uint8_t *pInBuffer, 
                                      uint8_t *pOutBuffer,
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{  
90011fac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  int32_t c_red, c_blue, c_green;
  
  uint8_t *pOutAddr;
  uint8_t *pChrom, *pLum;
  
  numberMCU = DataCount / YCBCR_422_BLOCK_SIZE;
90011fb0:	0a1c      	lsrs	r4, r3, #8
{  
90011fb2:	b08d      	sub	sp, #52	; 0x34
  currentMCU = BlockIndex;
  

  while(currentMCU < (numberMCU + BlockIndex))
90011fb4:	eb02 2313 	add.w	r3, r2, r3, lsr #8
  numberMCU = DataCount / YCBCR_422_BLOCK_SIZE;
90011fb8:	ee07 4a90 	vmov	s15, r4
{  
90011fbc:	9208      	str	r2, [sp, #32]
  while(currentMCU < (numberMCU + BlockIndex))
90011fbe:	429a      	cmp	r2, r3
{  
90011fc0:	9007      	str	r0, [sp, #28]
90011fc2:	9109      	str	r1, [sp, #36]	; 0x24
  while(currentMCU < (numberMCU + BlockIndex))
90011fc4:	930b      	str	r3, [sp, #44]	; 0x2c
90011fc6:	f080 814a 	bcs.w	9001225e <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x2b2>
  {
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*8;
90011fca:	4ba7      	ldr	r3, [pc, #668]	; (90012268 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x2bc>)
90011fcc:	4da7      	ldr	r5, [pc, #668]	; (9001226c <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x2c0>)
90011fce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
90011fd0:	f8df 929c 	ldr.w	r9, [pc, #668]	; 90012270 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x2c4>
90011fd4:	920a      	str	r2, [sp, #40]	; 0x28
    
    yRef = ((currentMCU *16) % JPEG_ConvertorParams.WidthExtend);
    
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
90011fd6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    
    pLum = pInBuffer;
    
    for(i= 0; i <  8; i++)
    {
       if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
90011fd8:	691b      	ldr	r3, [r3, #16]
90011fda:	f8df a298 	ldr.w	sl, [pc, #664]	; 90012274 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x2c8>
90011fde:	f8df b298 	ldr.w	fp, [pc, #664]	; 90012278 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x2cc>
90011fe2:	f8df 8298 	ldr.w	r8, [pc, #664]	; 9001227c <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x2d0>
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
90011fe6:	9206      	str	r2, [sp, #24]
       if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
90011fe8:	9301      	str	r3, [sp, #4]
90011fea:	e008      	b.n	90011ffe <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x52>
        
        refline += JPEG_ConvertorParams.ScaledWidth;          
      }
    }   
    
    pInBuffer +=  YCBCR_422_BLOCK_SIZE;
90011fec:	9b07      	ldr	r3, [sp, #28]
  while(currentMCU < (numberMCU + BlockIndex))
90011fee:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    pInBuffer +=  YCBCR_422_BLOCK_SIZE;
90011ff0:	f503 7380 	add.w	r3, r3, #256	; 0x100
90011ff4:	9307      	str	r3, [sp, #28]
  while(currentMCU < (numberMCU + BlockIndex))
90011ff6:	9b08      	ldr	r3, [sp, #32]
90011ff8:	4293      	cmp	r3, r2
90011ffa:	f000 8130 	beq.w	9001225e <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x2b2>
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*8;
90011ffe:	9a07      	ldr	r2, [sp, #28]
90012000:	9908      	ldr	r1, [sp, #32]
90012002:	f102 0080 	add.w	r0, r2, #128	; 0x80
90012006:	010b      	lsls	r3, r1, #4
90012008:	3101      	adds	r1, #1
    currentMCU++;
9001200a:	e9cd 0202 	strd	r0, r2, [sp, #8]
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*8;
9001200e:	980a      	ldr	r0, [sp, #40]	; 0x28
90012010:	9108      	str	r1, [sp, #32]
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
90012012:	9906      	ldr	r1, [sp, #24]
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*8;
90012014:	fbb3 f2f0 	udiv	r2, r3, r0
    yRef = ((currentMCU *16) % JPEG_ConvertorParams.WidthExtend);
90012018:	fb00 3312 	mls	r3, r0, r2, r3
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
9001201c:	fb01 f202 	mul.w	r2, r1, r2
90012020:	005b      	lsls	r3, r3, #1
90012022:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
90012026:	9300      	str	r3, [sp, #0]
    currentMCU++;
90012028:	2308      	movs	r3, #8
9001202a:	9305      	str	r3, [sp, #20]
       if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
9001202c:	e9dd 2300 	ldrd	r2, r3, [sp]
90012030:	4293      	cmp	r3, r2
90012032:	d9db      	bls.n	90011fec <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x40>
        pOutAddr = pOutBuffer + refline;
90012034:	9b09      	ldr	r3, [sp, #36]	; 0x24
90012036:	4413      	add	r3, r2
        for(k= 0; k<2; k++)
90012038:	9a03      	ldr	r2, [sp, #12]
9001203a:	f102 0140 	add.w	r1, r2, #64	; 0x40
9001203e:	9a02      	ldr	r2, [sp, #8]
90012040:	f103 0020 	add.w	r0, r3, #32
90012044:	3204      	adds	r2, #4
90012046:	9004      	str	r0, [sp, #16]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));          
90012048:	f892 003c 	ldrb.w	r0, [r2, #60]	; 0x3c
9001204c:	3310      	adds	r3, #16
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
9001204e:	f812 4c04 	ldrb.w	r4, [r2, #-4]
        for(k= 0; k<2; k++)
90012052:	3140      	adds	r1, #64	; 0x40
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));          
90012054:	f859 7020 	ldr.w	r7, [r9, r0, lsl #2]
        for(k= 0; k<2; k++)
90012058:	3204      	adds	r2, #4
            ycomp = (int32_t)(*(pLum +j));
9001205a:	f811 cc80 	ldrb.w	ip, [r1, #-128]
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
9001205e:	f855 6024 	ldr.w	r6, [r5, r4, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90012062:	4447      	add	r7, r8
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
90012064:	f85b 4024 	ldr.w	r4, [fp, r4, lsl #2]
90012068:	f85a 0020 	ldr.w	r0, [sl, r0, lsl #2]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
9001206c:	4446      	add	r6, r8
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
9001206e:	4420      	add	r0, r4
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90012070:	eb07 040c 	add.w	r4, r7, ip
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90012074:	eb08 4020 	add.w	r0, r8, r0, asr #16
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90012078:	f894 e100 	ldrb.w	lr, [r4, #256]	; 0x100
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
9001207c:	eb06 040c 	add.w	r4, r6, ip
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90012080:	4484      	add	ip, r0
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90012082:	ea4f 0ede 	mov.w	lr, lr, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90012086:	f894 4100 	ldrb.w	r4, [r4, #256]	; 0x100
9001208a:	f89c c100 	ldrb.w	ip, [ip, #256]	; 0x100
9001208e:	08e4      	lsrs	r4, r4, #3
90012090:	ea4f 0c9c 	mov.w	ip, ip, lsr #2
90012094:	ea44 24ce 	orr.w	r4, r4, lr, lsl #11
90012098:	ea44 144c 	orr.w	r4, r4, ip, lsl #5
            *(__IO uint16_t *)pOutAddr = 
9001209c:	f823 4c10 	strh.w	r4, [r3, #-16]
            ycomp = (int32_t)(*(pLum +j +1));
900120a0:	f811 4c7f 	ldrb.w	r4, [r1, #-127]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);         
900120a4:	4426      	add	r6, r4
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
900120a6:	4427      	add	r7, r4
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
900120a8:	4404      	add	r4, r0
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
900120aa:	f897 7100 	ldrb.w	r7, [r7, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
900120ae:	f896 0100 	ldrb.w	r0, [r6, #256]	; 0x100
900120b2:	f894 4100 	ldrb.w	r4, [r4, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
900120b6:	08fe      	lsrs	r6, r7, #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
900120b8:	08c0      	lsrs	r0, r0, #3
900120ba:	08a4      	lsrs	r4, r4, #2
900120bc:	ea40 20c6 	orr.w	r0, r0, r6, lsl #11
900120c0:	ea40 1044 	orr.w	r0, r0, r4, lsl #5
            *((__IO uint16_t *)(pOutAddr + 2)) = 
900120c4:	f823 0c0e 	strh.w	r0, [r3, #-14]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));          
900120c8:	f892 0039 	ldrb.w	r0, [r2, #57]	; 0x39
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
900120cc:	f812 4c07 	ldrb.w	r4, [r2, #-7]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));          
900120d0:	f859 7020 	ldr.w	r7, [r9, r0, lsl #2]
            ycomp = (int32_t)(*(pLum +j));
900120d4:	f811 cc7e 	ldrb.w	ip, [r1, #-126]
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
900120d8:	f855 6024 	ldr.w	r6, [r5, r4, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
900120dc:	4447      	add	r7, r8
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
900120de:	f85b 4024 	ldr.w	r4, [fp, r4, lsl #2]
900120e2:	f85a 0020 	ldr.w	r0, [sl, r0, lsl #2]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
900120e6:	4446      	add	r6, r8
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
900120e8:	4420      	add	r0, r4
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
900120ea:	eb07 040c 	add.w	r4, r7, ip
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
900120ee:	eb08 4020 	add.w	r0, r8, r0, asr #16
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
900120f2:	f894 e100 	ldrb.w	lr, [r4, #256]	; 0x100
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
900120f6:	eb06 040c 	add.w	r4, r6, ip
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
900120fa:	4484      	add	ip, r0
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
900120fc:	ea4f 0ede 	mov.w	lr, lr, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90012100:	f894 4100 	ldrb.w	r4, [r4, #256]	; 0x100
90012104:	f89c c100 	ldrb.w	ip, [ip, #256]	; 0x100
90012108:	08e4      	lsrs	r4, r4, #3
9001210a:	ea4f 0c9c 	mov.w	ip, ip, lsr #2
9001210e:	ea44 24ce 	orr.w	r4, r4, lr, lsl #11
90012112:	ea44 144c 	orr.w	r4, r4, ip, lsl #5
            *(__IO uint16_t *)pOutAddr = 
90012116:	f823 4c0c 	strh.w	r4, [r3, #-12]
            ycomp = (int32_t)(*(pLum +j +1));
9001211a:	f811 4c7d 	ldrb.w	r4, [r1, #-125]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);         
9001211e:	4426      	add	r6, r4
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90012120:	4427      	add	r7, r4
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90012122:	4404      	add	r4, r0
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90012124:	f897 7100 	ldrb.w	r7, [r7, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90012128:	f896 0100 	ldrb.w	r0, [r6, #256]	; 0x100
9001212c:	f894 4100 	ldrb.w	r4, [r4, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90012130:	08fe      	lsrs	r6, r7, #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90012132:	08c0      	lsrs	r0, r0, #3
90012134:	08a4      	lsrs	r4, r4, #2
90012136:	ea40 20c6 	orr.w	r0, r0, r6, lsl #11
9001213a:	ea40 1044 	orr.w	r0, r0, r4, lsl #5
            *((__IO uint16_t *)(pOutAddr + 2)) = 
9001213e:	f823 0c0a 	strh.w	r0, [r3, #-10]
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
90012142:	f812 4c06 	ldrb.w	r4, [r2, #-6]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));          
90012146:	f892 003a 	ldrb.w	r0, [r2, #58]	; 0x3a
            ycomp = (int32_t)(*(pLum +j));
9001214a:	f811 cc7c 	ldrb.w	ip, [r1, #-124]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));          
9001214e:	f859 7020 	ldr.w	r7, [r9, r0, lsl #2]
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
90012152:	f855 6024 	ldr.w	r6, [r5, r4, lsl #2]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
90012156:	f85a 0020 	ldr.w	r0, [sl, r0, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9001215a:	4447      	add	r7, r8
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
9001215c:	f85b 4024 	ldr.w	r4, [fp, r4, lsl #2]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90012160:	4446      	add	r6, r8
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
90012162:	4420      	add	r0, r4
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90012164:	eb07 040c 	add.w	r4, r7, ip
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90012168:	eb08 4020 	add.w	r0, r8, r0, asr #16
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9001216c:	f894 e100 	ldrb.w	lr, [r4, #256]	; 0x100
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90012170:	eb06 040c 	add.w	r4, r6, ip
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90012174:	4484      	add	ip, r0
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90012176:	ea4f 0ede 	mov.w	lr, lr, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
9001217a:	f894 4100 	ldrb.w	r4, [r4, #256]	; 0x100
9001217e:	f89c c100 	ldrb.w	ip, [ip, #256]	; 0x100
90012182:	08e4      	lsrs	r4, r4, #3
90012184:	ea4f 0c9c 	mov.w	ip, ip, lsr #2
90012188:	ea44 24ce 	orr.w	r4, r4, lr, lsl #11
9001218c:	ea44 144c 	orr.w	r4, r4, ip, lsl #5
            *(__IO uint16_t *)pOutAddr = 
90012190:	f823 4c08 	strh.w	r4, [r3, #-8]
            ycomp = (int32_t)(*(pLum +j +1));
90012194:	f811 4c7b 	ldrb.w	r4, [r1, #-123]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);         
90012198:	4426      	add	r6, r4
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9001219a:	4427      	add	r7, r4
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
9001219c:	4404      	add	r4, r0
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9001219e:	f897 7100 	ldrb.w	r7, [r7, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
900121a2:	f896 0100 	ldrb.w	r0, [r6, #256]	; 0x100
900121a6:	f894 4100 	ldrb.w	r4, [r4, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
900121aa:	08fe      	lsrs	r6, r7, #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
900121ac:	08c0      	lsrs	r0, r0, #3
900121ae:	08a4      	lsrs	r4, r4, #2
900121b0:	ea40 20c6 	orr.w	r0, r0, r6, lsl #11
900121b4:	ea40 1044 	orr.w	r0, r0, r4, lsl #5
            *((__IO uint16_t *)(pOutAddr + 2)) = 
900121b8:	f823 0c06 	strh.w	r0, [r3, #-6]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));          
900121bc:	f892 003b 	ldrb.w	r0, [r2, #59]	; 0x3b
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
900121c0:	f812 4c05 	ldrb.w	r4, [r2, #-5]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));          
900121c4:	f859 7020 	ldr.w	r7, [r9, r0, lsl #2]
            ycomp = (int32_t)(*(pLum +j));
900121c8:	f811 cc7a 	ldrb.w	ip, [r1, #-122]
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
900121cc:	f855 6024 	ldr.w	r6, [r5, r4, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
900121d0:	4447      	add	r7, r8
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
900121d2:	f85b 4024 	ldr.w	r4, [fp, r4, lsl #2]
900121d6:	f85a 0020 	ldr.w	r0, [sl, r0, lsl #2]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
900121da:	4446      	add	r6, r8
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
900121dc:	4420      	add	r0, r4
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
900121de:	eb07 040c 	add.w	r4, r7, ip
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
900121e2:	eb08 4020 	add.w	r0, r8, r0, asr #16
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
900121e6:	f894 e100 	ldrb.w	lr, [r4, #256]	; 0x100
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
900121ea:	eb06 040c 	add.w	r4, r6, ip
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
900121ee:	4484      	add	ip, r0
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
900121f0:	ea4f 0ede 	mov.w	lr, lr, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
900121f4:	f894 4100 	ldrb.w	r4, [r4, #256]	; 0x100
900121f8:	f89c c100 	ldrb.w	ip, [ip, #256]	; 0x100
900121fc:	08e4      	lsrs	r4, r4, #3
900121fe:	ea4f 0c9c 	mov.w	ip, ip, lsr #2
90012202:	ea44 24ce 	orr.w	r4, r4, lr, lsl #11
90012206:	ea44 144c 	orr.w	r4, r4, ip, lsl #5
            *(__IO uint16_t *)pOutAddr = 
9001220a:	f823 4c04 	strh.w	r4, [r3, #-4]
            ycomp = (int32_t)(*(pLum +j +1));
9001220e:	f811 4c79 	ldrb.w	r4, [r1, #-121]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);         
90012212:	4426      	add	r6, r4
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90012214:	4427      	add	r7, r4
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90012216:	4404      	add	r4, r0
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90012218:	f897 7100 	ldrb.w	r7, [r7, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
9001221c:	f896 0100 	ldrb.w	r0, [r6, #256]	; 0x100
90012220:	f894 4100 	ldrb.w	r4, [r4, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90012224:	08fe      	lsrs	r6, r7, #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90012226:	08c0      	lsrs	r0, r0, #3
90012228:	08a4      	lsrs	r4, r4, #2
9001222a:	ea40 20c6 	orr.w	r0, r0, r6, lsl #11
9001222e:	ea40 1044 	orr.w	r0, r0, r4, lsl #5
            *((__IO uint16_t *)(pOutAddr + 2)) = 
90012232:	f823 0c02 	strh.w	r0, [r3, #-2]
        for(k= 0; k<2; k++)
90012236:	9804      	ldr	r0, [sp, #16]
90012238:	4283      	cmp	r3, r0
9001223a:	f47f af05 	bne.w	90012048 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x9c>
            pChrom++;
9001223e:	9b02      	ldr	r3, [sp, #8]
        refline += JPEG_ConvertorParams.ScaledWidth;          
90012240:	9a06      	ldr	r2, [sp, #24]
            pChrom++;
90012242:	3308      	adds	r3, #8
90012244:	9302      	str	r3, [sp, #8]
        pLum = pLum - 128 + 8;
90012246:	9b03      	ldr	r3, [sp, #12]
90012248:	3308      	adds	r3, #8
9001224a:	9303      	str	r3, [sp, #12]
        refline += JPEG_ConvertorParams.ScaledWidth;          
9001224c:	9b00      	ldr	r3, [sp, #0]
9001224e:	4413      	add	r3, r2
90012250:	9300      	str	r3, [sp, #0]
    for(i= 0; i <  8; i++)
90012252:	9b05      	ldr	r3, [sp, #20]
90012254:	3b01      	subs	r3, #1
90012256:	9305      	str	r3, [sp, #20]
90012258:	f47f aee8 	bne.w	9001202c <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x80>
9001225c:	e6c6      	b.n	90011fec <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x40>
  }
  return numberMCU;
}
9001225e:	ee17 0a90 	vmov	r0, s15
90012262:	b00d      	add	sp, #52	; 0x34
90012264:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90012268:	240281a0 	.word	0x240281a0
9001226c:	240271a0 	.word	0x240271a0
90012270:	24027da0 	.word	0x24027da0
90012274:	240279a0 	.word	0x240279a0
90012278:	240275a0 	.word	0x240275a0
9001227c:	9002b92c 	.word	0x9002b92c

90012280 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks>:
static uint32_t JPEG_MCU_YCbCr444_ARGB_ConvertBlocks(uint8_t *pInBuffer, 
                                      uint8_t *pOutBuffer,
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{  
90012280:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  int32_t c_red, c_blue, c_green;
  
  uint8_t *pOutAddr;
  uint8_t *pChrom, *pLum;
  
  numberMCU = DataCount / YCBCR_444_BLOCK_SIZE;
90012284:	4cb6      	ldr	r4, [pc, #728]	; (90012560 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x2e0>)
{  
90012286:	b089      	sub	sp, #36	; 0x24
  numberMCU = DataCount / YCBCR_444_BLOCK_SIZE;
90012288:	fba4 4303 	umull	r4, r3, r4, r3
{  
9001228c:	9102      	str	r1, [sp, #8]
  numberMCU = DataCount / YCBCR_444_BLOCK_SIZE;
9001228e:	09d9      	lsrs	r1, r3, #7
  currentMCU = BlockIndex;
  

  while(currentMCU < (numberMCU + BlockIndex))
90012290:	eb02 13d3 	add.w	r3, r2, r3, lsr #7
  numberMCU = DataCount / YCBCR_444_BLOCK_SIZE;
90012294:	ee07 1a90 	vmov	s15, r1
  while(currentMCU < (numberMCU + BlockIndex))
90012298:	429a      	cmp	r2, r3
9001229a:	9306      	str	r3, [sp, #24]
{  
9001229c:	e9cd 0204 	strd	r0, r2, [sp, #16]
  while(currentMCU < (numberMCU + BlockIndex))
900122a0:	f080 8158 	bcs.w	90012554 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x2d4>
  {

    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
900122a4:	4baf      	ldr	r3, [pc, #700]	; (90012564 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x2e4>)
#elif (JPEG_RGB_FORMAT == JPEG_RGB565)  
            
            ycomp = (int32_t)(*(pLum +j));
          
            *(__IO uint16_t *)pOutAddr = 
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
900122a6:	4cb0      	ldr	r4, [pc, #704]	; (90012568 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x2e8>)
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
900122a8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));          
900122aa:	f8df e2c4 	ldr.w	lr, [pc, #708]	; 90012570 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x2f0>
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
900122ae:	9207      	str	r2, [sp, #28]
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
900122b0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
900122b2:	691b      	ldr	r3, [r3, #16]
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
900122b4:	f8df c2bc 	ldr.w	ip, [pc, #700]	; 90012574 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x2f4>
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
900122b8:	48ac      	ldr	r0, [pc, #688]	; (9001256c <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x2ec>)
900122ba:	f8df 82bc 	ldr.w	r8, [pc, #700]	; 90012578 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x2f8>
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
900122be:	9203      	str	r2, [sp, #12]
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
900122c0:	9300      	str	r3, [sp, #0]
900122c2:	e007      	b.n	900122d4 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x54>

        refline += JPEG_ConvertorParams.ScaledWidth;          
      }
    }   
    
    pInBuffer +=  YCBCR_444_BLOCK_SIZE;
900122c4:	9b04      	ldr	r3, [sp, #16]
900122c6:	33c0      	adds	r3, #192	; 0xc0
900122c8:	9304      	str	r3, [sp, #16]
  while(currentMCU < (numberMCU + BlockIndex))
900122ca:	e9dd 3205 	ldrd	r3, r2, [sp, #20]
900122ce:	4293      	cmp	r3, r2
900122d0:	f000 8140 	beq.w	90012554 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x2d4>
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
900122d4:	9e05      	ldr	r6, [sp, #20]
900122d6:	9f07      	ldr	r7, [sp, #28]
900122d8:	00f2      	lsls	r2, r6, #3
900122da:	3601      	adds	r6, #1
900122dc:	9904      	ldr	r1, [sp, #16]
900122de:	9605      	str	r6, [sp, #20]
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
900122e0:	9e03      	ldr	r6, [sp, #12]
900122e2:	f101 0340 	add.w	r3, r1, #64	; 0x40
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
900122e6:	fbb2 f5f7 	udiv	r5, r2, r7
    yRef = ((currentMCU *8) % JPEG_ConvertorParams.WidthExtend);
900122ea:	fb07 2215 	mls	r2, r7, r5, r2
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
900122ee:	fb06 f505 	mul.w	r5, r6, r5
900122f2:	0052      	lsls	r2, r2, #1
900122f4:	eb02 02c5 	add.w	r2, r2, r5, lsl #3
    currentMCU++;   
900122f8:	2508      	movs	r5, #8
900122fa:	9501      	str	r5, [sp, #4]
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
900122fc:	9d00      	ldr	r5, [sp, #0]
900122fe:	4295      	cmp	r5, r2
90012300:	d9e0      	bls.n	900122c4 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x44>
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));          
90012302:	f893 7040 	ldrb.w	r7, [r3, #64]	; 0x40
          pLum += 8;
90012306:	3108      	adds	r1, #8
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
90012308:	f893 9000 	ldrb.w	r9, [r3]
            pChrom++;
9001230c:	3308      	adds	r3, #8
            ycomp = (int32_t)(*(pLum +j));
9001230e:	f811 5c08 	ldrb.w	r5, [r1, #-8]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
90012312:	f850 a027 	ldr.w	sl, [r0, r7, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90012316:	f85e 6027 	ldr.w	r6, [lr, r7, lsl #2]
9001231a:	4425      	add	r5, r4
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);      
9001231c:	f85c 7029 	ldr.w	r7, [ip, r9, lsl #2]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
90012320:	f858 9029 	ldr.w	r9, [r8, r9, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90012324:	442e      	add	r6, r5
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);      
90012326:	442f      	add	r7, r5
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
90012328:	44d1      	add	r9, sl
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9001232a:	f896 6100 	ldrb.w	r6, [r6, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
9001232e:	eb05 4929 	add.w	r9, r5, r9, asr #16
90012332:	f897 5100 	ldrb.w	r5, [r7, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90012336:	08f6      	lsrs	r6, r6, #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90012338:	f899 7100 	ldrb.w	r7, [r9, #256]	; 0x100
9001233c:	08ed      	lsrs	r5, r5, #3
9001233e:	08bf      	lsrs	r7, r7, #2
90012340:	ea45 25c6 	orr.w	r5, r5, r6, lsl #11
            *(__IO uint16_t *)pOutAddr = 
90012344:	9e02      	ldr	r6, [sp, #8]
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90012346:	ea45 1547 	orr.w	r5, r5, r7, lsl #5
            *(__IO uint16_t *)pOutAddr = 
9001234a:	52b5      	strh	r5, [r6, r2]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));          
9001234c:	f893 7039 	ldrb.w	r7, [r3, #57]	; 0x39
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
90012350:	f813 9c07 	ldrb.w	r9, [r3, #-7]
            ycomp = (int32_t)(*(pLum +j));
90012354:	f811 5c07 	ldrb.w	r5, [r1, #-7]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
90012358:	f850 a027 	ldr.w	sl, [r0, r7, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9001235c:	4425      	add	r5, r4
9001235e:	f85e 6027 	ldr.w	r6, [lr, r7, lsl #2]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);      
90012362:	f85c 7029 	ldr.w	r7, [ip, r9, lsl #2]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
90012366:	f858 9029 	ldr.w	r9, [r8, r9, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9001236a:	442e      	add	r6, r5
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);      
9001236c:	442f      	add	r7, r5
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
9001236e:	44d1      	add	r9, sl
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90012370:	f896 6100 	ldrb.w	r6, [r6, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90012374:	eb05 4929 	add.w	r9, r5, r9, asr #16
90012378:	f897 5100 	ldrb.w	r5, [r7, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9001237c:	08f6      	lsrs	r6, r6, #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
9001237e:	f899 7100 	ldrb.w	r7, [r9, #256]	; 0x100
90012382:	08ed      	lsrs	r5, r5, #3
90012384:	08bf      	lsrs	r7, r7, #2
90012386:	ea45 26c6 	orr.w	r6, r5, r6, lsl #11
        pOutAddr = pOutBuffer+ refline;
9001238a:	9d02      	ldr	r5, [sp, #8]
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
9001238c:	ea46 1647 	orr.w	r6, r6, r7, lsl #5
        pOutAddr = pOutBuffer+ refline;
90012390:	4415      	add	r5, r2
            *(__IO uint16_t *)pOutAddr = 
90012392:	806e      	strh	r6, [r5, #2]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));          
90012394:	f893 a03a 	ldrb.w	sl, [r3, #58]	; 0x3a
            ycomp = (int32_t)(*(pLum +j));
90012398:	f811 7c06 	ldrb.w	r7, [r1, #-6]
        refline += JPEG_ConvertorParams.ScaledWidth;          
9001239c:	9e03      	ldr	r6, [sp, #12]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9001239e:	4427      	add	r7, r4
900123a0:	f85e 902a 	ldr.w	r9, [lr, sl, lsl #2]
        refline += JPEG_ConvertorParams.ScaledWidth;          
900123a4:	4432      	add	r2, r6
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
900123a6:	f813 6c06 	ldrb.w	r6, [r3, #-6]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
900123aa:	44b9      	add	r9, r7
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
900123ac:	f850 b02a 	ldr.w	fp, [r0, sl, lsl #2]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);      
900123b0:	f85c a026 	ldr.w	sl, [ip, r6, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
900123b4:	f899 9100 	ldrb.w	r9, [r9, #256]	; 0x100
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
900123b8:	f858 6026 	ldr.w	r6, [r8, r6, lsl #2]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);      
900123bc:	44ba      	add	sl, r7
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
900123be:	ea4f 09d9 	mov.w	r9, r9, lsr #3
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
900123c2:	445e      	add	r6, fp
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
900123c4:	eb07 4626 	add.w	r6, r7, r6, asr #16
900123c8:	f89a 7100 	ldrb.w	r7, [sl, #256]	; 0x100
900123cc:	f896 a100 	ldrb.w	sl, [r6, #256]	; 0x100
900123d0:	08fe      	lsrs	r6, r7, #3
900123d2:	ea4f 0a9a 	mov.w	sl, sl, lsr #2
900123d6:	ea46 26c9 	orr.w	r6, r6, r9, lsl #11
900123da:	ea46 164a 	orr.w	r6, r6, sl, lsl #5
            *(__IO uint16_t *)pOutAddr = 
900123de:	80ae      	strh	r6, [r5, #4]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));          
900123e0:	f893 a03b 	ldrb.w	sl, [r3, #59]	; 0x3b
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
900123e4:	f813 6c05 	ldrb.w	r6, [r3, #-5]
            ycomp = (int32_t)(*(pLum +j));
900123e8:	f811 7c05 	ldrb.w	r7, [r1, #-5]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
900123ec:	f850 b02a 	ldr.w	fp, [r0, sl, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
900123f0:	f85e 902a 	ldr.w	r9, [lr, sl, lsl #2]
900123f4:	4427      	add	r7, r4
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);      
900123f6:	f85c a026 	ldr.w	sl, [ip, r6, lsl #2]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
900123fa:	f858 6026 	ldr.w	r6, [r8, r6, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
900123fe:	44b9      	add	r9, r7
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);      
90012400:	44ba      	add	sl, r7
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
90012402:	445e      	add	r6, fp
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90012404:	f899 9100 	ldrb.w	r9, [r9, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90012408:	eb07 4626 	add.w	r6, r7, r6, asr #16
9001240c:	f89a 7100 	ldrb.w	r7, [sl, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90012410:	ea4f 09d9 	mov.w	r9, r9, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90012414:	f896 a100 	ldrb.w	sl, [r6, #256]	; 0x100
90012418:	08fe      	lsrs	r6, r7, #3
9001241a:	ea4f 0a9a 	mov.w	sl, sl, lsr #2
9001241e:	ea46 26c9 	orr.w	r6, r6, r9, lsl #11
90012422:	ea46 164a 	orr.w	r6, r6, sl, lsl #5
            *(__IO uint16_t *)pOutAddr = 
90012426:	80ee      	strh	r6, [r5, #6]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));          
90012428:	f893 a03c 	ldrb.w	sl, [r3, #60]	; 0x3c
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
9001242c:	f813 6c04 	ldrb.w	r6, [r3, #-4]
            ycomp = (int32_t)(*(pLum +j));
90012430:	f811 7c04 	ldrb.w	r7, [r1, #-4]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
90012434:	f850 b02a 	ldr.w	fp, [r0, sl, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90012438:	4427      	add	r7, r4
9001243a:	f85e 902a 	ldr.w	r9, [lr, sl, lsl #2]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);      
9001243e:	f85c a026 	ldr.w	sl, [ip, r6, lsl #2]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
90012442:	f858 6026 	ldr.w	r6, [r8, r6, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90012446:	44b9      	add	r9, r7
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);      
90012448:	44ba      	add	sl, r7
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
9001244a:	445e      	add	r6, fp
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9001244c:	f899 9100 	ldrb.w	r9, [r9, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90012450:	eb07 4626 	add.w	r6, r7, r6, asr #16
90012454:	f89a 7100 	ldrb.w	r7, [sl, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90012458:	ea4f 09d9 	mov.w	r9, r9, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
9001245c:	f896 a100 	ldrb.w	sl, [r6, #256]	; 0x100
90012460:	08fe      	lsrs	r6, r7, #3
90012462:	ea4f 0a9a 	mov.w	sl, sl, lsr #2
90012466:	ea46 26c9 	orr.w	r6, r6, r9, lsl #11
9001246a:	ea46 164a 	orr.w	r6, r6, sl, lsl #5
            *(__IO uint16_t *)pOutAddr = 
9001246e:	812e      	strh	r6, [r5, #8]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));          
90012470:	f893 a03d 	ldrb.w	sl, [r3, #61]	; 0x3d
            ycomp = (int32_t)(*(pLum +j));
90012474:	f811 7c03 	ldrb.w	r7, [r1, #-3]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90012478:	f85e 902a 	ldr.w	r9, [lr, sl, lsl #2]
9001247c:	4427      	add	r7, r4
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
9001247e:	f813 6c03 	ldrb.w	r6, [r3, #-3]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
90012482:	f850 b02a 	ldr.w	fp, [r0, sl, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90012486:	44b9      	add	r9, r7
90012488:	f899 9100 	ldrb.w	r9, [r9, #256]	; 0x100
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);      
9001248c:	f85c a026 	ldr.w	sl, [ip, r6, lsl #2]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
90012490:	f858 6026 	ldr.w	r6, [r8, r6, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90012494:	ea4f 09d9 	mov.w	r9, r9, lsr #3
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);      
90012498:	44ba      	add	sl, r7
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
9001249a:	445e      	add	r6, fp
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
9001249c:	eb07 4626 	add.w	r6, r7, r6, asr #16
900124a0:	f89a 7100 	ldrb.w	r7, [sl, #256]	; 0x100
900124a4:	f896 a100 	ldrb.w	sl, [r6, #256]	; 0x100
900124a8:	08fe      	lsrs	r6, r7, #3
900124aa:	ea4f 0a9a 	mov.w	sl, sl, lsr #2
900124ae:	ea46 26c9 	orr.w	r6, r6, r9, lsl #11
900124b2:	ea46 164a 	orr.w	r6, r6, sl, lsl #5
            *(__IO uint16_t *)pOutAddr = 
900124b6:	816e      	strh	r6, [r5, #10]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));          
900124b8:	f893 a03e 	ldrb.w	sl, [r3, #62]	; 0x3e
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
900124bc:	f813 6c02 	ldrb.w	r6, [r3, #-2]
            ycomp = (int32_t)(*(pLum +j));
900124c0:	f811 7c02 	ldrb.w	r7, [r1, #-2]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
900124c4:	f850 b02a 	ldr.w	fp, [r0, sl, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
900124c8:	4427      	add	r7, r4
900124ca:	f85e 902a 	ldr.w	r9, [lr, sl, lsl #2]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);      
900124ce:	f85c a026 	ldr.w	sl, [ip, r6, lsl #2]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
900124d2:	f858 6026 	ldr.w	r6, [r8, r6, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
900124d6:	44b9      	add	r9, r7
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);      
900124d8:	44ba      	add	sl, r7
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
900124da:	445e      	add	r6, fp
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
900124dc:	f899 9100 	ldrb.w	r9, [r9, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
900124e0:	eb07 4626 	add.w	r6, r7, r6, asr #16
900124e4:	f89a 7100 	ldrb.w	r7, [sl, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
900124e8:	ea4f 09d9 	mov.w	r9, r9, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
900124ec:	f896 a100 	ldrb.w	sl, [r6, #256]	; 0x100
900124f0:	08fe      	lsrs	r6, r7, #3
900124f2:	ea4f 0a9a 	mov.w	sl, sl, lsr #2
900124f6:	ea46 26c9 	orr.w	r6, r6, r9, lsl #11
900124fa:	ea46 164a 	orr.w	r6, r6, sl, lsl #5
            *(__IO uint16_t *)pOutAddr = 
900124fe:	81ae      	strh	r6, [r5, #12]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));          
90012500:	f893 a03f 	ldrb.w	sl, [r3, #63]	; 0x3f
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
90012504:	f813 6c01 	ldrb.w	r6, [r3, #-1]
            ycomp = (int32_t)(*(pLum +j));
90012508:	f811 7c01 	ldrb.w	r7, [r1, #-1]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9001250c:	f85e 902a 	ldr.w	r9, [lr, sl, lsl #2]
90012510:	4427      	add	r7, r4
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
90012512:	f850 b02a 	ldr.w	fp, [r0, sl, lsl #2]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);      
90012516:	f85c a026 	ldr.w	sl, [ip, r6, lsl #2]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
9001251a:	f858 6026 	ldr.w	r6, [r8, r6, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9001251e:	44b9      	add	r9, r7
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);      
90012520:	44ba      	add	sl, r7
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
90012522:	445e      	add	r6, fp
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90012524:	f899 9100 	ldrb.w	r9, [r9, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90012528:	eb07 4626 	add.w	r6, r7, r6, asr #16
9001252c:	f89a 7100 	ldrb.w	r7, [sl, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90012530:	ea4f 09d9 	mov.w	r9, r9, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90012534:	f896 a100 	ldrb.w	sl, [r6, #256]	; 0x100
90012538:	08fe      	lsrs	r6, r7, #3
9001253a:	ea4f 0a9a 	mov.w	sl, sl, lsr #2
9001253e:	ea46 26c9 	orr.w	r6, r6, r9, lsl #11
90012542:	ea46 164a 	orr.w	r6, r6, sl, lsl #5
            *(__IO uint16_t *)pOutAddr = 
90012546:	81ee      	strh	r6, [r5, #14]
    for(i= 0; i <  8; i++)
90012548:	9d01      	ldr	r5, [sp, #4]
9001254a:	3d01      	subs	r5, #1
9001254c:	9501      	str	r5, [sp, #4]
9001254e:	f47f aed5 	bne.w	900122fc <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x7c>
90012552:	e6b7      	b.n	900122c4 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x44>
  }
  return numberMCU;
}
90012554:	ee17 0a90 	vmov	r0, s15
90012558:	b009      	add	sp, #36	; 0x24
9001255a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9001255e:	bf00      	nop
90012560:	aaaaaaab 	.word	0xaaaaaaab
90012564:	240281a0 	.word	0x240281a0
90012568:	9002b92c 	.word	0x9002b92c
9001256c:	240279a0 	.word	0x240279a0
90012570:	24027da0 	.word	0x24027da0
90012574:	240271a0 	.word	0x240271a0
90012578:	240275a0 	.word	0x240275a0

9001257c <JPEG_MCU_Gray_ARGB_ConvertBlocks>:
static uint32_t JPEG_MCU_Gray_ARGB_ConvertBlocks(uint8_t *pInBuffer, 
                                      uint8_t *pOutBuffer,
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{
9001257c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

  
  numberMCU = DataCount / GRAY_444_BLOCK_SIZE;
  currentMCU = BlockIndex;
  
  while(currentMCU < (numberMCU + BlockIndex))
90012580:	eb02 1a93 	add.w	sl, r2, r3, lsr #6
  numberMCU = DataCount / GRAY_444_BLOCK_SIZE;
90012584:	099c      	lsrs	r4, r3, #6
  while(currentMCU < (numberMCU + BlockIndex))
90012586:	4552      	cmp	r2, sl
  numberMCU = DataCount / GRAY_444_BLOCK_SIZE;
90012588:	ee07 4a90 	vmov	s15, r4
  while(currentMCU < (numberMCU + BlockIndex))
9001258c:	f080 8088 	bcs.w	900126a0 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x124>
  {
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
90012590:	4b45      	ldr	r3, [pc, #276]	; (900126a8 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x12c>)
    
    yRef = ((currentMCU *8) % JPEG_ConvertorParams.WidthExtend);
    
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
90012592:	e9d3 9809 	ldrd	r9, r8, [r3, #36]	; 0x24
    pLum = pInBuffer;
    
    for(i= 0; i <  8; i++)
    { 
      pOutAddr = pOutBuffer + refline;
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
90012596:	691e      	ldr	r6, [r3, #16]
90012598:	e003      	b.n	900125a2 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x26>
  while(currentMCU < (numberMCU + BlockIndex))
9001259a:	4552      	cmp	r2, sl

        refline += JPEG_ConvertorParams.ScaledWidth;        
      }
    }
    
    pInBuffer +=  GRAY_444_BLOCK_SIZE;    
9001259c:	f100 0040 	add.w	r0, r0, #64	; 0x40
  while(currentMCU < (numberMCU + BlockIndex))
900125a0:	d07e      	beq.n	900126a0 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x124>
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
900125a2:	00d3      	lsls	r3, r2, #3
    currentMCU++;
900125a4:	4604      	mov	r4, r0
900125a6:	f04f 0e08 	mov.w	lr, #8
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
900125aa:	3201      	adds	r2, #1
900125ac:	fbb3 f5f9 	udiv	r5, r3, r9
    yRef = ((currentMCU *8) % JPEG_ConvertorParams.WidthExtend);
900125b0:	fb09 3315 	mls	r3, r9, r5, r3
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
900125b4:	fb08 f505 	mul.w	r5, r8, r5
900125b8:	005b      	lsls	r3, r3, #1
900125ba:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
900125be:	429e      	cmp	r6, r3
900125c0:	d9eb      	bls.n	9001259a <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x1e>
          ySample =   (uint32_t)(*pLum);
900125c2:	f894 c000 	ldrb.w	ip, [r4]
      pOutAddr = pOutBuffer + refline;
900125c6:	18cd      	adds	r5, r1, r3
          pLum++;
900125c8:	3408      	adds	r4, #8
    for(i= 0; i <  8; i++)
900125ca:	f1be 0e01 	subs.w	lr, lr, #1
          *(__IO uint16_t *)pOutAddr = ((ySample >> 3) << 11) |  ((ySample >> 2) << 5) | (ySample >> 3);     
900125ce:	ea4f 07dc 	mov.w	r7, ip, lsr #3
900125d2:	ea4f 0c9c 	mov.w	ip, ip, lsr #2
900125d6:	ea4f 2bc7 	mov.w	fp, r7, lsl #11
900125da:	ea4b 1c4c 	orr.w	ip, fp, ip, lsl #5
900125de:	ea47 070c 	orr.w	r7, r7, ip
900125e2:	52cf      	strh	r7, [r1, r3]
        refline += JPEG_ConvertorParams.ScaledWidth;        
900125e4:	4443      	add	r3, r8
          ySample =   (uint32_t)(*pLum);
900125e6:	f814 cc07 	ldrb.w	ip, [r4, #-7]
          *(__IO uint16_t *)pOutAddr = ((ySample >> 3) << 11) |  ((ySample >> 2) << 5) | (ySample >> 3);     
900125ea:	ea4f 07dc 	mov.w	r7, ip, lsr #3
900125ee:	ea4f 0c9c 	mov.w	ip, ip, lsr #2
900125f2:	ea4f 2bc7 	mov.w	fp, r7, lsl #11
900125f6:	ea4b 1c4c 	orr.w	ip, fp, ip, lsl #5
900125fa:	ea47 070c 	orr.w	r7, r7, ip
900125fe:	806f      	strh	r7, [r5, #2]
          ySample =   (uint32_t)(*pLum);
90012600:	f814 cc06 	ldrb.w	ip, [r4, #-6]
          *(__IO uint16_t *)pOutAddr = ((ySample >> 3) << 11) |  ((ySample >> 2) << 5) | (ySample >> 3);     
90012604:	ea4f 07dc 	mov.w	r7, ip, lsr #3
90012608:	ea4f 0c9c 	mov.w	ip, ip, lsr #2
9001260c:	ea4f 2bc7 	mov.w	fp, r7, lsl #11
90012610:	ea4b 1c4c 	orr.w	ip, fp, ip, lsl #5
90012614:	ea47 070c 	orr.w	r7, r7, ip
90012618:	80af      	strh	r7, [r5, #4]
          ySample =   (uint32_t)(*pLum);
9001261a:	f814 cc05 	ldrb.w	ip, [r4, #-5]
          *(__IO uint16_t *)pOutAddr = ((ySample >> 3) << 11) |  ((ySample >> 2) << 5) | (ySample >> 3);     
9001261e:	ea4f 07dc 	mov.w	r7, ip, lsr #3
90012622:	ea4f 0c9c 	mov.w	ip, ip, lsr #2
90012626:	ea4f 2bc7 	mov.w	fp, r7, lsl #11
9001262a:	ea4b 1c4c 	orr.w	ip, fp, ip, lsl #5
9001262e:	ea47 070c 	orr.w	r7, r7, ip
90012632:	80ef      	strh	r7, [r5, #6]
          ySample =   (uint32_t)(*pLum);
90012634:	f814 cc04 	ldrb.w	ip, [r4, #-4]
          *(__IO uint16_t *)pOutAddr = ((ySample >> 3) << 11) |  ((ySample >> 2) << 5) | (ySample >> 3);     
90012638:	ea4f 07dc 	mov.w	r7, ip, lsr #3
9001263c:	ea4f 0c9c 	mov.w	ip, ip, lsr #2
90012640:	ea4f 2bc7 	mov.w	fp, r7, lsl #11
90012644:	ea4b 1c4c 	orr.w	ip, fp, ip, lsl #5
90012648:	ea47 070c 	orr.w	r7, r7, ip
9001264c:	812f      	strh	r7, [r5, #8]
          ySample =   (uint32_t)(*pLum);
9001264e:	f814 cc03 	ldrb.w	ip, [r4, #-3]
          *(__IO uint16_t *)pOutAddr = ((ySample >> 3) << 11) |  ((ySample >> 2) << 5) | (ySample >> 3);     
90012652:	ea4f 07dc 	mov.w	r7, ip, lsr #3
90012656:	ea4f 0c9c 	mov.w	ip, ip, lsr #2
9001265a:	ea4f 2bc7 	mov.w	fp, r7, lsl #11
9001265e:	ea4b 1c4c 	orr.w	ip, fp, ip, lsl #5
90012662:	ea47 070c 	orr.w	r7, r7, ip
90012666:	816f      	strh	r7, [r5, #10]
          ySample =   (uint32_t)(*pLum);
90012668:	f814 cc02 	ldrb.w	ip, [r4, #-2]
          *(__IO uint16_t *)pOutAddr = ((ySample >> 3) << 11) |  ((ySample >> 2) << 5) | (ySample >> 3);     
9001266c:	ea4f 07dc 	mov.w	r7, ip, lsr #3
90012670:	ea4f 0c9c 	mov.w	ip, ip, lsr #2
90012674:	ea4f 2bc7 	mov.w	fp, r7, lsl #11
90012678:	ea4b 1c4c 	orr.w	ip, fp, ip, lsl #5
9001267c:	ea47 070c 	orr.w	r7, r7, ip
90012680:	81af      	strh	r7, [r5, #12]
          ySample =   (uint32_t)(*pLum);
90012682:	f814 cc01 	ldrb.w	ip, [r4, #-1]
          *(__IO uint16_t *)pOutAddr = ((ySample >> 3) << 11) |  ((ySample >> 2) << 5) | (ySample >> 3);     
90012686:	ea4f 07dc 	mov.w	r7, ip, lsr #3
9001268a:	ea4f 0c9c 	mov.w	ip, ip, lsr #2
9001268e:	ea4f 2bc7 	mov.w	fp, r7, lsl #11
90012692:	ea4b 1c4c 	orr.w	ip, fp, ip, lsl #5
90012696:	ea47 070c 	orr.w	r7, r7, ip
9001269a:	81ef      	strh	r7, [r5, #14]
    for(i= 0; i <  8; i++)
9001269c:	d18f      	bne.n	900125be <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x42>
9001269e:	e77c      	b.n	9001259a <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x1e>
  }
  return numberMCU;
}
900126a0:	ee17 0a90 	vmov	r0, s15
900126a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
900126a8:	240281a0 	.word	0x240281a0

900126ac <JPEG_MCU_YCCK_ARGB_ConvertBlocks>:
static uint32_t JPEG_MCU_YCCK_ARGB_ConvertBlocks(uint8_t *pInBuffer, 
                                      uint8_t *pOutBuffer, 
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{  
900126ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  
  int32_t c_red, c_blue, c_green;
  
  uint8_t *pOutAddr, *pChrom;
  
  numberMCU = DataCount / CMYK_444_BLOCK_SIZE;
900126b0:	0a1c      	lsrs	r4, r3, #8
{  
900126b2:	b083      	sub	sp, #12
  currentMCU = BlockIndex;
  

  while(currentMCU < (numberMCU + BlockIndex))
900126b4:	eb02 2313 	add.w	r3, r2, r3, lsr #8
  numberMCU = DataCount / CMYK_444_BLOCK_SIZE;
900126b8:	ee07 4a90 	vmov	s15, r4
  while(currentMCU < (numberMCU + BlockIndex))
900126bc:	429a      	cmp	r2, r3
900126be:	9300      	str	r3, [sp, #0]
900126c0:	f080 8129 	bcs.w	90012916 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x26a>
  {

    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
900126c4:	4b96      	ldr	r3, [pc, #600]	; (90012920 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x274>)
        pOutAddr = pOutBuffer+ refline;        

          for(j=0; j < 8; j++)
          {           
            color_k = (int32_t)(*(pChrom + 192));
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
900126c6:	f8df c25c 	ldr.w	ip, [pc, #604]	; 90012924 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x278>
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
900126ca:	6a5c      	ldr	r4, [r3, #36]	; 0x24
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
900126cc:	f8d3 8028 	ldr.w	r8, [r3, #40]	; 0x28
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
900126d0:	691e      	ldr	r6, [r3, #16]
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
900126d2:	9401      	str	r4, [sp, #4]
900126d4:	e005      	b.n	900126e2 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x36>
  while(currentMCU < (numberMCU + BlockIndex))
900126d6:	9b00      	ldr	r3, [sp, #0]

        refline += JPEG_ConvertorParams.ScaledWidth;          
      }
    }   
    
    pInBuffer +=  CMYK_444_BLOCK_SIZE;
900126d8:	f500 7080 	add.w	r0, r0, #256	; 0x100
  while(currentMCU < (numberMCU + BlockIndex))
900126dc:	429a      	cmp	r2, r3
900126de:	f000 811a 	beq.w	90012916 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x26a>
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
900126e2:	00d3      	lsls	r3, r2, #3
900126e4:	9c01      	ldr	r4, [sp, #4]
900126e6:	3201      	adds	r2, #1
    currentMCU++;
900126e8:	f04f 0e08 	mov.w	lr, #8
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
900126ec:	fbb3 f5f4 	udiv	r5, r3, r4
    yRef = ((currentMCU *8) % JPEG_ConvertorParams.WidthExtend);
900126f0:	fb04 3415 	mls	r4, r4, r5, r3
    currentMCU++;
900126f4:	4603      	mov	r3, r0
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
900126f6:	fb08 f505 	mul.w	r5, r8, r5
900126fa:	0064      	lsls	r4, r4, #1
900126fc:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
90012700:	42a6      	cmp	r6, r4
90012702:	d9e8      	bls.n	900126d6 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x2a>
            color_k = (int32_t)(*(pChrom + 192));
90012704:	f893 a0c0 	ldrb.w	sl, [r3, #192]	; 0xc0
        pOutAddr = pOutBuffer+ refline;        
90012708:	190f      	adds	r7, r1, r4
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
9001270a:	f893 9040 	ldrb.w	r9, [r3, #64]	; 0x40
    for(i= 0; i <  8; i++)
9001270e:	f1be 0e01 	subs.w	lr, lr, #1
            pChrom++;
90012712:	f103 0308 	add.w	r3, r3, #8
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
90012716:	fb19 f90a 	smulbb	r9, r9, sl
9001271a:	fbac 5909 	umull	r5, r9, ip, r9
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
9001271e:	f813 5c08 	ldrb.w	r5, [r3, #-8]
90012722:	fb15 f50a 	smulbb	r5, r5, sl
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
90012726:	ea4f 2959 	mov.w	r9, r9, lsr #9
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
9001272a:	fbac b505 	umull	fp, r5, ip, r5
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
9001272e:	ea4f 1949 	mov.w	r9, r9, lsl #5
            ((c_red >> 3) << JPEG_RED_OFFSET)     | \
90012732:	ea4f 2595 	mov.w	r5, r5, lsr #10
90012736:	ea49 25c5 	orr.w	r5, r9, r5, lsl #11
            c_blue = (color_k * (int32_t)(*(pChrom + 128)))/255;
9001273a:	f893 9078 	ldrb.w	r9, [r3, #120]	; 0x78
9001273e:	fb19 f90a 	smulbb	r9, r9, sl
90012742:	fbac a909 	umull	sl, r9, ip, r9
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
90012746:	ea45 2599 	orr.w	r5, r5, r9, lsr #10
9001274a:	b2ad      	uxth	r5, r5
          *(__IO uint16_t *)pOutAddr = 
9001274c:	530d      	strh	r5, [r1, r4]
        refline += JPEG_ConvertorParams.ScaledWidth;          
9001274e:	4444      	add	r4, r8
            color_k = (int32_t)(*(pChrom + 192));
90012750:	f893 a0b9 	ldrb.w	sl, [r3, #185]	; 0xb9
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
90012754:	f893 9039 	ldrb.w	r9, [r3, #57]	; 0x39
90012758:	fb19 f90a 	smulbb	r9, r9, sl
9001275c:	fbac 5909 	umull	r5, r9, ip, r9
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
90012760:	f813 5c07 	ldrb.w	r5, [r3, #-7]
90012764:	fb15 f50a 	smulbb	r5, r5, sl
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
90012768:	ea4f 2959 	mov.w	r9, r9, lsr #9
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
9001276c:	fbac b505 	umull	fp, r5, ip, r5
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
90012770:	ea4f 1949 	mov.w	r9, r9, lsl #5
            ((c_red >> 3) << JPEG_RED_OFFSET)     | \
90012774:	ea4f 2595 	mov.w	r5, r5, lsr #10
90012778:	ea49 25c5 	orr.w	r5, r9, r5, lsl #11
            c_blue = (color_k * (int32_t)(*(pChrom + 128)))/255;
9001277c:	f893 9079 	ldrb.w	r9, [r3, #121]	; 0x79
90012780:	fb19 f90a 	smulbb	r9, r9, sl
90012784:	fbac a909 	umull	sl, r9, ip, r9
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
90012788:	ea45 2599 	orr.w	r5, r5, r9, lsr #10
9001278c:	b2ad      	uxth	r5, r5
          *(__IO uint16_t *)pOutAddr = 
9001278e:	807d      	strh	r5, [r7, #2]
            color_k = (int32_t)(*(pChrom + 192));
90012790:	f893 a0ba 	ldrb.w	sl, [r3, #186]	; 0xba
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
90012794:	f893 903a 	ldrb.w	r9, [r3, #58]	; 0x3a
90012798:	fb19 f90a 	smulbb	r9, r9, sl
9001279c:	fbac 5909 	umull	r5, r9, ip, r9
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
900127a0:	f813 5c06 	ldrb.w	r5, [r3, #-6]
900127a4:	fb15 f50a 	smulbb	r5, r5, sl
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
900127a8:	ea4f 2959 	mov.w	r9, r9, lsr #9
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
900127ac:	fbac b505 	umull	fp, r5, ip, r5
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
900127b0:	ea4f 1949 	mov.w	r9, r9, lsl #5
            ((c_red >> 3) << JPEG_RED_OFFSET)     | \
900127b4:	ea4f 2595 	mov.w	r5, r5, lsr #10
900127b8:	ea49 25c5 	orr.w	r5, r9, r5, lsl #11
            c_blue = (color_k * (int32_t)(*(pChrom + 128)))/255;
900127bc:	f893 907a 	ldrb.w	r9, [r3, #122]	; 0x7a
900127c0:	fb19 f90a 	smulbb	r9, r9, sl
900127c4:	fbac a909 	umull	sl, r9, ip, r9
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
900127c8:	ea45 2599 	orr.w	r5, r5, r9, lsr #10
900127cc:	b2ad      	uxth	r5, r5
          *(__IO uint16_t *)pOutAddr = 
900127ce:	80bd      	strh	r5, [r7, #4]
            color_k = (int32_t)(*(pChrom + 192));
900127d0:	f893 a0bb 	ldrb.w	sl, [r3, #187]	; 0xbb
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
900127d4:	f893 903b 	ldrb.w	r9, [r3, #59]	; 0x3b
900127d8:	fb19 f90a 	smulbb	r9, r9, sl
900127dc:	fbac 5909 	umull	r5, r9, ip, r9
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
900127e0:	f813 5c05 	ldrb.w	r5, [r3, #-5]
900127e4:	fb15 f50a 	smulbb	r5, r5, sl
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
900127e8:	ea4f 2959 	mov.w	r9, r9, lsr #9
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
900127ec:	fbac b505 	umull	fp, r5, ip, r5
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
900127f0:	ea4f 1949 	mov.w	r9, r9, lsl #5
            ((c_red >> 3) << JPEG_RED_OFFSET)     | \
900127f4:	ea4f 2595 	mov.w	r5, r5, lsr #10
900127f8:	ea49 25c5 	orr.w	r5, r9, r5, lsl #11
            c_blue = (color_k * (int32_t)(*(pChrom + 128)))/255;
900127fc:	f893 907b 	ldrb.w	r9, [r3, #123]	; 0x7b
90012800:	fb19 f90a 	smulbb	r9, r9, sl
90012804:	fbac a909 	umull	sl, r9, ip, r9
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
90012808:	ea45 2599 	orr.w	r5, r5, r9, lsr #10
9001280c:	b2ad      	uxth	r5, r5
          *(__IO uint16_t *)pOutAddr = 
9001280e:	80fd      	strh	r5, [r7, #6]
            color_k = (int32_t)(*(pChrom + 192));
90012810:	f893 a0bc 	ldrb.w	sl, [r3, #188]	; 0xbc
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
90012814:	f893 903c 	ldrb.w	r9, [r3, #60]	; 0x3c
90012818:	fb19 f90a 	smulbb	r9, r9, sl
9001281c:	fbac 5909 	umull	r5, r9, ip, r9
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
90012820:	f813 5c04 	ldrb.w	r5, [r3, #-4]
90012824:	fb15 f50a 	smulbb	r5, r5, sl
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
90012828:	ea4f 2959 	mov.w	r9, r9, lsr #9
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
9001282c:	fbac b505 	umull	fp, r5, ip, r5
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
90012830:	ea4f 1949 	mov.w	r9, r9, lsl #5
            ((c_red >> 3) << JPEG_RED_OFFSET)     | \
90012834:	ea4f 2595 	mov.w	r5, r5, lsr #10
90012838:	ea49 25c5 	orr.w	r5, r9, r5, lsl #11
            c_blue = (color_k * (int32_t)(*(pChrom + 128)))/255;
9001283c:	f893 907c 	ldrb.w	r9, [r3, #124]	; 0x7c
90012840:	fb19 f90a 	smulbb	r9, r9, sl
90012844:	fbac a909 	umull	sl, r9, ip, r9
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
90012848:	ea45 2599 	orr.w	r5, r5, r9, lsr #10
9001284c:	b2ad      	uxth	r5, r5
          *(__IO uint16_t *)pOutAddr = 
9001284e:	813d      	strh	r5, [r7, #8]
            color_k = (int32_t)(*(pChrom + 192));
90012850:	f893 a0bd 	ldrb.w	sl, [r3, #189]	; 0xbd
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
90012854:	f893 903d 	ldrb.w	r9, [r3, #61]	; 0x3d
90012858:	fb19 f90a 	smulbb	r9, r9, sl
9001285c:	fbac 5909 	umull	r5, r9, ip, r9
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
90012860:	f813 5c03 	ldrb.w	r5, [r3, #-3]
90012864:	fb15 f50a 	smulbb	r5, r5, sl
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
90012868:	ea4f 2959 	mov.w	r9, r9, lsr #9
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
9001286c:	fbac b505 	umull	fp, r5, ip, r5
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
90012870:	ea4f 1949 	mov.w	r9, r9, lsl #5
            ((c_red >> 3) << JPEG_RED_OFFSET)     | \
90012874:	ea4f 2595 	mov.w	r5, r5, lsr #10
90012878:	ea49 25c5 	orr.w	r5, r9, r5, lsl #11
            c_blue = (color_k * (int32_t)(*(pChrom + 128)))/255;
9001287c:	f893 907d 	ldrb.w	r9, [r3, #125]	; 0x7d
90012880:	fb19 f90a 	smulbb	r9, r9, sl
90012884:	fbac a909 	umull	sl, r9, ip, r9
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
90012888:	ea45 2599 	orr.w	r5, r5, r9, lsr #10
9001288c:	b2ad      	uxth	r5, r5
          *(__IO uint16_t *)pOutAddr = 
9001288e:	817d      	strh	r5, [r7, #10]
            color_k = (int32_t)(*(pChrom + 192));
90012890:	f893 a0be 	ldrb.w	sl, [r3, #190]	; 0xbe
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
90012894:	f813 9c02 	ldrb.w	r9, [r3, #-2]
90012898:	fb19 f90a 	smulbb	r9, r9, sl
9001289c:	fbac 5909 	umull	r5, r9, ip, r9
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
900128a0:	f893 503e 	ldrb.w	r5, [r3, #62]	; 0x3e
900128a4:	fb15 f50a 	smulbb	r5, r5, sl
            ((c_red >> 3) << JPEG_RED_OFFSET)     | \
900128a8:	ea4f 2999 	mov.w	r9, r9, lsr #10
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
900128ac:	fbac b505 	umull	fp, r5, ip, r5
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
900128b0:	ea4f 2555 	mov.w	r5, r5, lsr #9
900128b4:	ea4f 1545 	mov.w	r5, r5, lsl #5
            ((c_red >> 3) << JPEG_RED_OFFSET)     | \
900128b8:	ea45 25c9 	orr.w	r5, r5, r9, lsl #11
            c_blue = (color_k * (int32_t)(*(pChrom + 128)))/255;
900128bc:	f893 907e 	ldrb.w	r9, [r3, #126]	; 0x7e
900128c0:	fb19 f90a 	smulbb	r9, r9, sl
900128c4:	fbac a909 	umull	sl, r9, ip, r9
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
900128c8:	ea45 2599 	orr.w	r5, r5, r9, lsr #10
900128cc:	b2ad      	uxth	r5, r5
          *(__IO uint16_t *)pOutAddr = 
900128ce:	81bd      	strh	r5, [r7, #12]
            color_k = (int32_t)(*(pChrom + 192));
900128d0:	f893 a0bf 	ldrb.w	sl, [r3, #191]	; 0xbf
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
900128d4:	f893 903f 	ldrb.w	r9, [r3, #63]	; 0x3f
900128d8:	fb19 f90a 	smulbb	r9, r9, sl
900128dc:	fbac 5909 	umull	r5, r9, ip, r9
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
900128e0:	f813 5c01 	ldrb.w	r5, [r3, #-1]
900128e4:	fb15 f50a 	smulbb	r5, r5, sl
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
900128e8:	ea4f 2959 	mov.w	r9, r9, lsr #9
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
900128ec:	fbac b505 	umull	fp, r5, ip, r5
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
900128f0:	ea4f 1949 	mov.w	r9, r9, lsl #5
            ((c_red >> 3) << JPEG_RED_OFFSET)     | \
900128f4:	ea4f 2595 	mov.w	r5, r5, lsr #10
900128f8:	ea49 25c5 	orr.w	r5, r9, r5, lsl #11
            c_blue = (color_k * (int32_t)(*(pChrom + 128)))/255;
900128fc:	f893 907f 	ldrb.w	r9, [r3, #127]	; 0x7f
90012900:	fb19 f90a 	smulbb	r9, r9, sl
90012904:	fbac a909 	umull	sl, r9, ip, r9
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
90012908:	ea45 2599 	orr.w	r5, r5, r9, lsr #10
9001290c:	b2ad      	uxth	r5, r5
          *(__IO uint16_t *)pOutAddr = 
9001290e:	81fd      	strh	r5, [r7, #14]
    for(i= 0; i <  8; i++)
90012910:	f47f aef6 	bne.w	90012700 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x54>
90012914:	e6df      	b.n	900126d6 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x2a>
  }
  return numberMCU;
}
90012916:	ee17 0a90 	vmov	r0, s15
9001291a:	b003      	add	sp, #12
9001291c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90012920:	240281a0 	.word	0x240281a0
90012924:	80808081 	.word	0x80808081

90012928 <JPEG_GetDecodeColorConvertFunc>:
  *                      depending of the jpeg image color space and chroma sampling info. 
  * @param ImageNbMCUs : pointer to uint32_t, used to retrive the total number of MCU blocks in the jpeg image.  
  * @retval HAL status : HAL_OK or HAL_ERROR.
  */
HAL_StatusTypeDef JPEG_GetDecodeColorConvertFunc(JPEG_ConfTypeDef *pJpegInfo, JPEG_YCbCrToRGB_Convert_Function *pFunction, uint32_t *ImageNbMCUs)
{
90012928:	b4f0      	push	{r4, r5, r6, r7}
  uint32_t hMCU, vMCU;

  JPEG_ConvertorParams.ColorSpace = pJpegInfo->ColorSpace;
  JPEG_ConvertorParams.ImageWidth = pJpegInfo->ImageWidth;
9001292a:	68c3      	ldr	r3, [r0, #12]
  JPEG_ConvertorParams.ColorSpace = pJpegInfo->ColorSpace;
9001292c:	6805      	ldr	r5, [r0, #0]
9001292e:	4c3e      	ldr	r4, [pc, #248]	; (90012a28 <JPEG_GetDecodeColorConvertFunc+0x100>)
  JPEG_ConvertorParams.ImageHeight = pJpegInfo->ImageHeight;
  JPEG_ConvertorParams.ImageSize_Bytes = pJpegInfo->ImageWidth * pJpegInfo->ImageHeight * JPEG_BYTES_PER_PIXEL;
  
  JPEG_ConvertorParams.ChromaSubsampling = pJpegInfo->ChromaSubsampling;  
  if(JPEG_ConvertorParams.ColorSpace == JPEG_YCBCR_COLORSPACE)
90012930:	2d10      	cmp	r5, #16
  JPEG_ConvertorParams.ImageWidth = pJpegInfo->ImageWidth;
90012932:	60a3      	str	r3, [r4, #8]
  JPEG_ConvertorParams.ColorSpace = pJpegInfo->ColorSpace;
90012934:	6025      	str	r5, [r4, #0]
  JPEG_ConvertorParams.ChromaSubsampling = pJpegInfo->ChromaSubsampling;  
90012936:	e9d0 7601 	ldrd	r7, r6, [r0, #4]
  JPEG_ConvertorParams.ImageSize_Bytes = pJpegInfo->ImageWidth * pJpegInfo->ImageHeight * JPEG_BYTES_PER_PIXEL;
9001293a:	fb06 f003 	mul.w	r0, r6, r3
  JPEG_ConvertorParams.ImageHeight = pJpegInfo->ImageHeight;
9001293e:	60e6      	str	r6, [r4, #12]
  JPEG_ConvertorParams.ImageSize_Bytes = pJpegInfo->ImageWidth * pJpegInfo->ImageHeight * JPEG_BYTES_PER_PIXEL;
90012940:	ea4f 0040 	mov.w	r0, r0, lsl #1
  JPEG_ConvertorParams.ChromaSubsampling = pJpegInfo->ChromaSubsampling;  
90012944:	6067      	str	r7, [r4, #4]
  JPEG_ConvertorParams.ImageSize_Bytes = pJpegInfo->ImageWidth * pJpegInfo->ImageHeight * JPEG_BYTES_PER_PIXEL;
90012946:	6120      	str	r0, [r4, #16]
  if(JPEG_ConvertorParams.ColorSpace == JPEG_YCBCR_COLORSPACE)
90012948:	d027      	beq.n	9001299a <JPEG_GetDecodeColorConvertFunc+0x72>
      }
      JPEG_ConvertorParams.H_factor = 8;
      JPEG_ConvertorParams.V_factor  = 8;
    }   
  }
  else if(JPEG_ConvertorParams.ColorSpace == JPEG_GRAYSCALE_COLORSPACE)
9001294a:	b9ed      	cbnz	r5, 90012988 <JPEG_GetDecodeColorConvertFunc+0x60>
  {
    *pFunction =  JPEG_MCU_Gray_ARGB_ConvertBlocks;
9001294c:	4837      	ldr	r0, [pc, #220]	; (90012a2c <JPEG_GetDecodeColorConvertFunc+0x104>)
9001294e:	6008      	str	r0, [r1, #0]

    JPEG_ConvertorParams.LineOffset = JPEG_ConvertorParams.ImageWidth % 8;
      
    if(JPEG_ConvertorParams.LineOffset != 0)
90012950:	f013 0107 	ands.w	r1, r3, #7
90012954:	d02b      	beq.n	900129ae <JPEG_GetDecodeColorConvertFunc+0x86>

    JPEG_ConvertorParams.LineOffset = JPEG_ConvertorParams.ImageWidth % 8;
      
    if(JPEG_ConvertorParams.LineOffset != 0)
    {
      JPEG_ConvertorParams.LineOffset = 8 - JPEG_ConvertorParams.LineOffset;  
90012956:	f1c1 0108 	rsb	r1, r1, #8
      JPEG_ConvertorParams.H_factor = 16;
9001295a:	2508      	movs	r5, #8
      JPEG_ConvertorParams.LineOffset = 8 - JPEG_ConvertorParams.LineOffset;  
9001295c:	6161      	str	r1, [r4, #20]
  else
  {  
    return HAL_ERROR; /* Color space Not supported*/
  }
 
  JPEG_ConvertorParams.WidthExtend = JPEG_ConvertorParams.ImageWidth + JPEG_ConvertorParams.LineOffset;
9001295e:	4419      	add	r1, r3
90012960:	6261      	str	r1, [r4, #36]	; 0x24
  JPEG_ConvertorParams.ScaledWidth = JPEG_BYTES_PER_PIXEL * JPEG_ConvertorParams.ImageWidth; 
90012962:	0059      	lsls	r1, r3, #1
  
  hMCU = (JPEG_ConvertorParams.ImageWidth / JPEG_ConvertorParams.H_factor);
90012964:	08db      	lsrs	r3, r3, #3
  JPEG_ConvertorParams.ScaledWidth = JPEG_BYTES_PER_PIXEL * JPEG_ConvertorParams.ImageWidth; 
90012966:	62a1      	str	r1, [r4, #40]	; 0x28
      JPEG_ConvertorParams.V_factor  = 8;
90012968:	e9c4 5507 	strd	r5, r5, [r4, #28]
  if((JPEG_ConvertorParams.ImageWidth % JPEG_ConvertorParams.H_factor) != 0)
  {
    hMCU++; /*+1 for horizenatl incomplete MCU */                
9001296c:	3301      	adds	r3, #1
  }

  vMCU = (JPEG_ConvertorParams.ImageHeight / JPEG_ConvertorParams.V_factor);
9001296e:	fbb6 f1f5 	udiv	r1, r6, r5
  if((JPEG_ConvertorParams.ImageHeight % JPEG_ConvertorParams.V_factor) != 0)
90012972:	fb05 6611 	mls	r6, r5, r1, r6
90012976:	b106      	cbz	r6, 9001297a <JPEG_GetDecodeColorConvertFunc+0x52>
  {
    vMCU++; /*+1 for vertical incomplete MCU */                
90012978:	3101      	adds	r1, #1
  }
  JPEG_ConvertorParams.MCU_Total_Nb = (hMCU * vMCU);
9001297a:	fb01 f303 	mul.w	r3, r1, r3
  *ImageNbMCUs = JPEG_ConvertorParams.MCU_Total_Nb;

  return HAL_OK;
9001297e:	2000      	movs	r0, #0
  JPEG_ConvertorParams.MCU_Total_Nb = (hMCU * vMCU);
90012980:	62e3      	str	r3, [r4, #44]	; 0x2c
  *ImageNbMCUs = JPEG_ConvertorParams.MCU_Total_Nb;
90012982:	6013      	str	r3, [r2, #0]
}
90012984:	bcf0      	pop	{r4, r5, r6, r7}
90012986:	4770      	bx	lr
  else if(JPEG_ConvertorParams.ColorSpace == JPEG_CMYK_COLORSPACE)
90012988:	2d30      	cmp	r5, #48	; 0x30
9001298a:	d119      	bne.n	900129c0 <JPEG_GetDecodeColorConvertFunc+0x98>
    *pFunction =  JPEG_MCU_YCCK_ARGB_ConvertBlocks;
9001298c:	4828      	ldr	r0, [pc, #160]	; (90012a30 <JPEG_GetDecodeColorConvertFunc+0x108>)
9001298e:	6008      	str	r0, [r1, #0]
    if(JPEG_ConvertorParams.LineOffset != 0)
90012990:	f013 0107 	ands.w	r1, r3, #7
90012994:	d1df      	bne.n	90012956 <JPEG_GetDecodeColorConvertFunc+0x2e>
    JPEG_ConvertorParams.LineOffset = JPEG_ConvertorParams.ImageWidth % 8;
90012996:	6161      	str	r1, [r4, #20]
90012998:	e00a      	b.n	900129b0 <JPEG_GetDecodeColorConvertFunc+0x88>
    if(JPEG_ConvertorParams.ChromaSubsampling == JPEG_420_SUBSAMPLING)
9001299a:	2f01      	cmp	r7, #1
9001299c:	d024      	beq.n	900129e8 <JPEG_GetDecodeColorConvertFunc+0xc0>
    else if(JPEG_ConvertorParams.ChromaSubsampling == JPEG_422_SUBSAMPLING)
9001299e:	2f02      	cmp	r7, #2
900129a0:	d011      	beq.n	900129c6 <JPEG_GetDecodeColorConvertFunc+0x9e>
      *pFunction =  JPEG_MCU_YCbCr444_ARGB_ConvertBlocks;
900129a2:	4824      	ldr	r0, [pc, #144]	; (90012a34 <JPEG_GetDecodeColorConvertFunc+0x10c>)
900129a4:	6008      	str	r0, [r1, #0]
      if(JPEG_ConvertorParams.LineOffset != 0)
900129a6:	f013 0107 	ands.w	r1, r3, #7
900129aa:	d1d4      	bne.n	90012956 <JPEG_GetDecodeColorConvertFunc+0x2e>
900129ac:	e7f3      	b.n	90012996 <JPEG_GetDecodeColorConvertFunc+0x6e>
    JPEG_ConvertorParams.LineOffset = JPEG_ConvertorParams.ImageWidth % 8;
900129ae:	6165      	str	r5, [r4, #20]
  JPEG_ConvertorParams.ScaledWidth = JPEG_BYTES_PER_PIXEL * JPEG_ConvertorParams.ImageWidth; 
900129b0:	0059      	lsls	r1, r3, #1
      JPEG_ConvertorParams.H_factor = 16;
900129b2:	2508      	movs	r5, #8
  JPEG_ConvertorParams.WidthExtend = JPEG_ConvertorParams.ImageWidth + JPEG_ConvertorParams.LineOffset;
900129b4:	6263      	str	r3, [r4, #36]	; 0x24
  hMCU = (JPEG_ConvertorParams.ImageWidth / JPEG_ConvertorParams.H_factor);
900129b6:	08db      	lsrs	r3, r3, #3
  JPEG_ConvertorParams.ScaledWidth = JPEG_BYTES_PER_PIXEL * JPEG_ConvertorParams.ImageWidth; 
900129b8:	62a1      	str	r1, [r4, #40]	; 0x28
      JPEG_ConvertorParams.V_factor  = 8;
900129ba:	e9c4 5507 	strd	r5, r5, [r4, #28]
  if((JPEG_ConvertorParams.ImageWidth % JPEG_ConvertorParams.H_factor) != 0)
900129be:	e7d6      	b.n	9001296e <JPEG_GetDecodeColorConvertFunc+0x46>
    return HAL_ERROR; /* Color space Not supported*/
900129c0:	2001      	movs	r0, #1
}
900129c2:	bcf0      	pop	{r4, r5, r6, r7}
900129c4:	4770      	bx	lr
      *pFunction =  JPEG_MCU_YCbCr422_ARGB_ConvertBlocks;
900129c6:	481c      	ldr	r0, [pc, #112]	; (90012a38 <JPEG_GetDecodeColorConvertFunc+0x110>)
      JPEG_ConvertorParams.H_factor = 16;
900129c8:	61e5      	str	r5, [r4, #28]
      *pFunction =  JPEG_MCU_YCbCr422_ARGB_ConvertBlocks;
900129ca:	6008      	str	r0, [r1, #0]
      if(JPEG_ConvertorParams.LineOffset != 0)
900129cc:	f013 010f 	ands.w	r1, r3, #15
900129d0:	d022      	beq.n	90012a18 <JPEG_GetDecodeColorConvertFunc+0xf0>
        JPEG_ConvertorParams.LineOffset = 16 - JPEG_ConvertorParams.LineOffset;  
900129d2:	f1c1 0110 	rsb	r1, r1, #16
      JPEG_ConvertorParams.V_factor  = 8;
900129d6:	2508      	movs	r5, #8
        JPEG_ConvertorParams.LineOffset = 16 - JPEG_ConvertorParams.LineOffset;  
900129d8:	6161      	str	r1, [r4, #20]
  JPEG_ConvertorParams.WidthExtend = JPEG_ConvertorParams.ImageWidth + JPEG_ConvertorParams.LineOffset;
900129da:	4419      	add	r1, r3
      JPEG_ConvertorParams.V_factor  = 8;
900129dc:	6225      	str	r5, [r4, #32]
  JPEG_ConvertorParams.WidthExtend = JPEG_ConvertorParams.ImageWidth + JPEG_ConvertorParams.LineOffset;
900129de:	6261      	str	r1, [r4, #36]	; 0x24
  JPEG_ConvertorParams.ScaledWidth = JPEG_BYTES_PER_PIXEL * JPEG_ConvertorParams.ImageWidth; 
900129e0:	0059      	lsls	r1, r3, #1
  hMCU = (JPEG_ConvertorParams.ImageWidth / JPEG_ConvertorParams.H_factor);
900129e2:	091b      	lsrs	r3, r3, #4
  JPEG_ConvertorParams.ScaledWidth = JPEG_BYTES_PER_PIXEL * JPEG_ConvertorParams.ImageWidth; 
900129e4:	62a1      	str	r1, [r4, #40]	; 0x28
900129e6:	e7c1      	b.n	9001296c <JPEG_GetDecodeColorConvertFunc+0x44>
      *pFunction = JPEG_MCU_YCbCr420_ARGB_ConvertBlocks;
900129e8:	4814      	ldr	r0, [pc, #80]	; (90012a3c <JPEG_GetDecodeColorConvertFunc+0x114>)
900129ea:	6008      	str	r0, [r1, #0]
      if(JPEG_ConvertorParams.LineOffset != 0)
900129ec:	f013 010f 	ands.w	r1, r3, #15
900129f0:	d107      	bne.n	90012a02 <JPEG_GetDecodeColorConvertFunc+0xda>
      JPEG_ConvertorParams.LineOffset = JPEG_ConvertorParams.ImageWidth % 16;
900129f2:	6161      	str	r1, [r4, #20]
  JPEG_ConvertorParams.ScaledWidth = JPEG_BYTES_PER_PIXEL * JPEG_ConvertorParams.ImageWidth; 
900129f4:	0059      	lsls	r1, r3, #1
  JPEG_ConvertorParams.WidthExtend = JPEG_ConvertorParams.ImageWidth + JPEG_ConvertorParams.LineOffset;
900129f6:	6263      	str	r3, [r4, #36]	; 0x24
  hMCU = (JPEG_ConvertorParams.ImageWidth / JPEG_ConvertorParams.H_factor);
900129f8:	091b      	lsrs	r3, r3, #4
  JPEG_ConvertorParams.ScaledWidth = JPEG_BYTES_PER_PIXEL * JPEG_ConvertorParams.ImageWidth; 
900129fa:	62a1      	str	r1, [r4, #40]	; 0x28
      JPEG_ConvertorParams.V_factor  = 8;
900129fc:	e9c4 5507 	strd	r5, r5, [r4, #28]
  if((JPEG_ConvertorParams.ImageWidth % JPEG_ConvertorParams.H_factor) != 0)
90012a00:	e7b5      	b.n	9001296e <JPEG_GetDecodeColorConvertFunc+0x46>
        JPEG_ConvertorParams.LineOffset = 16 - JPEG_ConvertorParams.LineOffset;  
90012a02:	f1c1 0110 	rsb	r1, r1, #16
90012a06:	6161      	str	r1, [r4, #20]
  JPEG_ConvertorParams.WidthExtend = JPEG_ConvertorParams.ImageWidth + JPEG_ConvertorParams.LineOffset;
90012a08:	4419      	add	r1, r3
90012a0a:	6261      	str	r1, [r4, #36]	; 0x24
  JPEG_ConvertorParams.ScaledWidth = JPEG_BYTES_PER_PIXEL * JPEG_ConvertorParams.ImageWidth; 
90012a0c:	0059      	lsls	r1, r3, #1
  hMCU = (JPEG_ConvertorParams.ImageWidth / JPEG_ConvertorParams.H_factor);
90012a0e:	091b      	lsrs	r3, r3, #4
  JPEG_ConvertorParams.ScaledWidth = JPEG_BYTES_PER_PIXEL * JPEG_ConvertorParams.ImageWidth; 
90012a10:	62a1      	str	r1, [r4, #40]	; 0x28
      JPEG_ConvertorParams.V_factor  = 8;
90012a12:	e9c4 5507 	strd	r5, r5, [r4, #28]
90012a16:	e7a9      	b.n	9001296c <JPEG_GetDecodeColorConvertFunc+0x44>
90012a18:	2508      	movs	r5, #8
      JPEG_ConvertorParams.LineOffset = JPEG_ConvertorParams.ImageWidth % 16;
90012a1a:	6161      	str	r1, [r4, #20]
  JPEG_ConvertorParams.ScaledWidth = JPEG_BYTES_PER_PIXEL * JPEG_ConvertorParams.ImageWidth; 
90012a1c:	0059      	lsls	r1, r3, #1
      JPEG_ConvertorParams.V_factor  = 8;
90012a1e:	e9c4 5308 	strd	r5, r3, [r4, #32]
  JPEG_ConvertorParams.ScaledWidth = JPEG_BYTES_PER_PIXEL * JPEG_ConvertorParams.ImageWidth; 
90012a22:	62a1      	str	r1, [r4, #40]	; 0x28
  hMCU = (JPEG_ConvertorParams.ImageWidth / JPEG_ConvertorParams.H_factor);
90012a24:	091b      	lsrs	r3, r3, #4
  if((JPEG_ConvertorParams.ImageWidth % JPEG_ConvertorParams.H_factor) != 0)
90012a26:	e7a2      	b.n	9001296e <JPEG_GetDecodeColorConvertFunc+0x46>
90012a28:	240281a0 	.word	0x240281a0
90012a2c:	9001257d 	.word	0x9001257d
90012a30:	900126ad 	.word	0x900126ad
90012a34:	90012281 	.word	0x90012281
90012a38:	90011fad 	.word	0x90011fad
90012a3c:	90011d81 	.word	0x90011d81

90012a40 <_ZNK8touchgfx17AbstractPartition18getAllocationCountEv>:
90012a40:	8880      	ldrh	r0, [r0, #4]
90012a42:	4770      	bx	lr

90012a44 <_ZN8touchgfx17AbstractPartition7indexOfEPKv>:
90012a44:	b570      	push	{r4, r5, r6, lr}
90012a46:	6803      	ldr	r3, [r0, #0]
90012a48:	460c      	mov	r4, r1
90012a4a:	2100      	movs	r1, #0
90012a4c:	4605      	mov	r5, r0
90012a4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
90012a50:	4798      	blx	r3
90012a52:	4606      	mov	r6, r0
90012a54:	682b      	ldr	r3, [r5, #0]
90012a56:	4628      	mov	r0, r5
90012a58:	1ba4      	subs	r4, r4, r6
90012a5a:	6a1b      	ldr	r3, [r3, #32]
90012a5c:	b2a4      	uxth	r4, r4
90012a5e:	4798      	blx	r3
90012a60:	fbb4 f0f0 	udiv	r0, r4, r0
90012a64:	bd70      	pop	{r4, r5, r6, pc}

90012a66 <_ZN8touchgfx17AbstractPartition5clearEv>:
90012a66:	2300      	movs	r3, #0
90012a68:	8083      	strh	r3, [r0, #4]
90012a6a:	4770      	bx	lr

90012a6c <_ZN8touchgfx17AbstractPartition8allocateEt>:
90012a6c:	b510      	push	{r4, lr}
90012a6e:	6803      	ldr	r3, [r0, #0]
90012a70:	4604      	mov	r4, r0
90012a72:	8881      	ldrh	r1, [r0, #4]
90012a74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
90012a76:	4798      	blx	r3
90012a78:	88a3      	ldrh	r3, [r4, #4]
90012a7a:	3301      	adds	r3, #1
90012a7c:	80a3      	strh	r3, [r4, #4]
90012a7e:	bd10      	pop	{r4, pc}

90012a80 <_ZN8touchgfx17AbstractPartition10allocateAtEtt>:
90012a80:	6803      	ldr	r3, [r0, #0]
90012a82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
90012a84:	4718      	bx	r3

90012a86 <_ZN8touchgfx17AbstractPartitionD1Ev>:
90012a86:	4770      	bx	lr

90012a88 <_ZN8touchgfx17AbstractPartitionC1Ev>:
90012a88:	4a02      	ldr	r2, [pc, #8]	; (90012a94 <_ZN8touchgfx17AbstractPartitionC1Ev+0xc>)
90012a8a:	6002      	str	r2, [r0, #0]
90012a8c:	2200      	movs	r2, #0
90012a8e:	8082      	strh	r2, [r0, #4]
90012a90:	4770      	bx	lr
90012a92:	bf00      	nop
90012a94:	9002bc34 	.word	0x9002bc34

90012a98 <_ZN8touchgfx9Container8containsERKNS_8DrawableE>:
90012a98:	6a83      	ldr	r3, [r0, #40]	; 0x28
90012a9a:	2000      	movs	r0, #0
90012a9c:	b12b      	cbz	r3, 90012aaa <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
90012a9e:	b920      	cbnz	r0, 90012aaa <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
90012aa0:	1a5a      	subs	r2, r3, r1
90012aa2:	699b      	ldr	r3, [r3, #24]
90012aa4:	4250      	negs	r0, r2
90012aa6:	4150      	adcs	r0, r2
90012aa8:	e7f8      	b.n	90012a9c <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x4>
90012aaa:	4770      	bx	lr

90012aac <_ZN8touchgfx9Container3addERNS_8DrawableE>:
90012aac:	2300      	movs	r3, #0
90012aae:	6148      	str	r0, [r1, #20]
90012ab0:	618b      	str	r3, [r1, #24]
90012ab2:	6a83      	ldr	r3, [r0, #40]	; 0x28
90012ab4:	b913      	cbnz	r3, 90012abc <_ZN8touchgfx9Container3addERNS_8DrawableE+0x10>
90012ab6:	6281      	str	r1, [r0, #40]	; 0x28
90012ab8:	4770      	bx	lr
90012aba:	4613      	mov	r3, r2
90012abc:	699a      	ldr	r2, [r3, #24]
90012abe:	2a00      	cmp	r2, #0
90012ac0:	d1fb      	bne.n	90012aba <_ZN8touchgfx9Container3addERNS_8DrawableE+0xe>
90012ac2:	6199      	str	r1, [r3, #24]
90012ac4:	4770      	bx	lr

90012ac6 <_ZN8touchgfx9Container9removeAllEv>:
90012ac6:	2200      	movs	r2, #0
90012ac8:	6a83      	ldr	r3, [r0, #40]	; 0x28
90012aca:	b123      	cbz	r3, 90012ad6 <_ZN8touchgfx9Container9removeAllEv+0x10>
90012acc:	6999      	ldr	r1, [r3, #24]
90012ace:	6281      	str	r1, [r0, #40]	; 0x28
90012ad0:	e9c3 2205 	strd	r2, r2, [r3, #20]
90012ad4:	e7f8      	b.n	90012ac8 <_ZN8touchgfx9Container9removeAllEv+0x2>
90012ad6:	4770      	bx	lr

90012ad8 <_ZN8touchgfx9Container6unlinkEv>:
90012ad8:	2300      	movs	r3, #0
90012ada:	6283      	str	r3, [r0, #40]	; 0x28
90012adc:	4770      	bx	lr

90012ade <_ZNK8touchgfx9Container12getSolidRectEv>:
90012ade:	2200      	movs	r2, #0
90012ae0:	8002      	strh	r2, [r0, #0]
90012ae2:	8042      	strh	r2, [r0, #2]
90012ae4:	8082      	strh	r2, [r0, #4]
90012ae6:	80c2      	strh	r2, [r0, #6]
90012ae8:	4770      	bx	lr

90012aea <_ZN8touchgfx9Container20moveChildrenRelativeEss>:
90012aea:	b570      	push	{r4, r5, r6, lr}
90012aec:	460d      	mov	r5, r1
90012aee:	4616      	mov	r6, r2
90012af0:	6a84      	ldr	r4, [r0, #40]	; 0x28
90012af2:	b13c      	cbz	r4, 90012b04 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x1a>
90012af4:	6823      	ldr	r3, [r4, #0]
90012af6:	4620      	mov	r0, r4
90012af8:	4632      	mov	r2, r6
90012afa:	4629      	mov	r1, r5
90012afc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
90012afe:	4798      	blx	r3
90012b00:	69a4      	ldr	r4, [r4, #24]
90012b02:	e7f6      	b.n	90012af2 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x8>
90012b04:	bd70      	pop	{r4, r5, r6, pc}

90012b06 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE>:
90012b06:	b538      	push	{r3, r4, r5, lr}
90012b08:	460d      	mov	r5, r1
90012b0a:	6a84      	ldr	r4, [r0, #40]	; 0x28
90012b0c:	b134      	cbz	r4, 90012b1c <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x16>
90012b0e:	682b      	ldr	r3, [r5, #0]
90012b10:	4621      	mov	r1, r4
90012b12:	4628      	mov	r0, r5
90012b14:	689b      	ldr	r3, [r3, #8]
90012b16:	4798      	blx	r3
90012b18:	69a4      	ldr	r4, [r4, #24]
90012b1a:	e7f7      	b.n	90012b0c <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x6>
90012b1c:	bd38      	pop	{r3, r4, r5, pc}

90012b1e <_ZN8touchgfx9ContainerD1Ev>:
90012b1e:	4770      	bx	lr

90012b20 <_ZN8touchgfx9ContainerD0Ev>:
90012b20:	b510      	push	{r4, lr}
90012b22:	4604      	mov	r4, r0
90012b24:	212c      	movs	r1, #44	; 0x2c
90012b26:	f014 fd66 	bl	900275f6 <_ZdlPvj>
90012b2a:	4620      	mov	r0, r4
90012b2c:	bd10      	pop	{r4, pc}

90012b2e <_ZN8touchgfx9Container6removeERNS_8DrawableE>:
90012b2e:	6a83      	ldr	r3, [r0, #40]	; 0x28
90012b30:	b19b      	cbz	r3, 90012b5a <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
90012b32:	428b      	cmp	r3, r1
90012b34:	d109      	bne.n	90012b4a <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x1c>
90012b36:	699a      	ldr	r2, [r3, #24]
90012b38:	2100      	movs	r1, #0
90012b3a:	6159      	str	r1, [r3, #20]
90012b3c:	6282      	str	r2, [r0, #40]	; 0x28
90012b3e:	b902      	cbnz	r2, 90012b42 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x14>
90012b40:	4770      	bx	lr
90012b42:	6199      	str	r1, [r3, #24]
90012b44:	4770      	bx	lr
90012b46:	4613      	mov	r3, r2
90012b48:	b13a      	cbz	r2, 90012b5a <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
90012b4a:	699a      	ldr	r2, [r3, #24]
90012b4c:	428a      	cmp	r2, r1
90012b4e:	d1fa      	bne.n	90012b46 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x18>
90012b50:	698a      	ldr	r2, [r1, #24]
90012b52:	619a      	str	r2, [r3, #24]
90012b54:	2300      	movs	r3, #0
90012b56:	e9c1 3305 	strd	r3, r3, [r1, #20]
90012b5a:	4770      	bx	lr

90012b5c <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_>:
90012b5c:	b410      	push	{r4}
90012b5e:	6a83      	ldr	r3, [r0, #40]	; 0x28
90012b60:	4604      	mov	r4, r0
90012b62:	b92b      	cbnz	r3, 90012b70 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x14>
90012b64:	6803      	ldr	r3, [r0, #0]
90012b66:	4611      	mov	r1, r2
90012b68:	f85d 4b04 	ldr.w	r4, [sp], #4
90012b6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
90012b6e:	4718      	bx	r3
90012b70:	b941      	cbnz	r1, 90012b84 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x28>
90012b72:	6193      	str	r3, [r2, #24]
90012b74:	6282      	str	r2, [r0, #40]	; 0x28
90012b76:	6154      	str	r4, [r2, #20]
90012b78:	f85d 4b04 	ldr.w	r4, [sp], #4
90012b7c:	4770      	bx	lr
90012b7e:	4603      	mov	r3, r0
90012b80:	2800      	cmp	r0, #0
90012b82:	d0f9      	beq.n	90012b78 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1c>
90012b84:	4299      	cmp	r1, r3
90012b86:	6998      	ldr	r0, [r3, #24]
90012b88:	d1f9      	bne.n	90012b7e <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x22>
90012b8a:	6190      	str	r0, [r2, #24]
90012b8c:	618a      	str	r2, [r1, #24]
90012b8e:	e7f2      	b.n	90012b76 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1a>

90012b90 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>:
90012b90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
90012b94:	461f      	mov	r7, r3
90012b96:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
90012b9a:	460d      	mov	r5, r1
90012b9c:	4616      	mov	r6, r2
90012b9e:	b103      	cbz	r3, 90012ba2 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x12>
90012ba0:	6038      	str	r0, [r7, #0]
90012ba2:	6a84      	ldr	r4, [r0, #40]	; 0x28
90012ba4:	b314      	cbz	r4, 90012bec <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x5c>
90012ba6:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
90012baa:	b1eb      	cbz	r3, 90012be8 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
90012bac:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
90012bb0:	428d      	cmp	r5, r1
90012bb2:	db19      	blt.n	90012be8 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
90012bb4:	b289      	uxth	r1, r1
90012bb6:	8923      	ldrh	r3, [r4, #8]
90012bb8:	440b      	add	r3, r1
90012bba:	b21b      	sxth	r3, r3
90012bbc:	429d      	cmp	r5, r3
90012bbe:	da13      	bge.n	90012be8 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
90012bc0:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
90012bc4:	4296      	cmp	r6, r2
90012bc6:	db0f      	blt.n	90012be8 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
90012bc8:	b292      	uxth	r2, r2
90012bca:	8963      	ldrh	r3, [r4, #10]
90012bcc:	4413      	add	r3, r2
90012bce:	b21b      	sxth	r3, r3
90012bd0:	429e      	cmp	r6, r3
90012bd2:	da09      	bge.n	90012be8 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
90012bd4:	6823      	ldr	r3, [r4, #0]
90012bd6:	1ab2      	subs	r2, r6, r2
90012bd8:	1a69      	subs	r1, r5, r1
90012bda:	4620      	mov	r0, r4
90012bdc:	f8d3 8024 	ldr.w	r8, [r3, #36]	; 0x24
90012be0:	b212      	sxth	r2, r2
90012be2:	463b      	mov	r3, r7
90012be4:	b209      	sxth	r1, r1
90012be6:	47c0      	blx	r8
90012be8:	69a4      	ldr	r4, [r4, #24]
90012bea:	e7db      	b.n	90012ba4 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x14>
90012bec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

90012bf0 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>:
90012bf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90012bf4:	4c6d      	ldr	r4, [pc, #436]	; (90012dac <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1bc>)
90012bf6:	b0a1      	sub	sp, #132	; 0x84
90012bf8:	4606      	mov	r6, r0
90012bfa:	6824      	ldr	r4, [r4, #0]
90012bfc:	9d2a      	ldr	r5, [sp, #168]	; 0xa8
90012bfe:	f894 9049 	ldrb.w	r9, [r4, #73]	; 0x49
90012c02:	2400      	movs	r4, #0
90012c04:	9303      	str	r3, [sp, #12]
90012c06:	802c      	strh	r4, [r5, #0]
90012c08:	9d2b      	ldr	r5, [sp, #172]	; 0xac
90012c0a:	802c      	strh	r4, [r5, #0]
90012c0c:	601c      	str	r4, [r3, #0]
90012c0e:	e9cd 1201 	strd	r1, r2, [sp, #4]
90012c12:	f7ff ffbd 	bl	90012b90 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
90012c16:	f1b9 0f03 	cmp.w	r9, #3
90012c1a:	f340 80c1 	ble.w	90012da0 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b0>
90012c1e:	4631      	mov	r1, r6
90012c20:	a80c      	add	r0, sp, #48	; 0x30
90012c22:	f006 fb95 	bl	90019350 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
90012c26:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
90012c2a:	9306      	str	r3, [sp, #24]
90012c2c:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
90012c30:	9307      	str	r3, [sp, #28]
90012c32:	9b03      	ldr	r3, [sp, #12]
90012c34:	f8d3 a000 	ldr.w	sl, [r3]
90012c38:	f1ba 0f00 	cmp.w	sl, #0
90012c3c:	f000 80b3 	beq.w	90012da6 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b6>
90012c40:	4651      	mov	r1, sl
90012c42:	a810      	add	r0, sp, #64	; 0x40
90012c44:	f006 fb84 	bl	90019350 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
90012c48:	2002      	movs	r0, #2
90012c4a:	f9bd 1044 	ldrsh.w	r1, [sp, #68]	; 0x44
90012c4e:	9b01      	ldr	r3, [sp, #4]
90012c50:	9a06      	ldr	r2, [sp, #24]
90012c52:	fb91 f1f0 	sdiv	r1, r1, r0
90012c56:	189d      	adds	r5, r3, r2
90012c58:	f9bd 3040 	ldrsh.w	r3, [sp, #64]	; 0x40
90012c5c:	9a07      	ldr	r2, [sp, #28]
90012c5e:	4419      	add	r1, r3
90012c60:	9b02      	ldr	r3, [sp, #8]
90012c62:	4413      	add	r3, r2
90012c64:	f9bd 2046 	ldrsh.w	r2, [sp, #70]	; 0x46
90012c68:	1a6d      	subs	r5, r5, r1
90012c6a:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
90012c6e:	fb92 f2f0 	sdiv	r2, r2, r0
90012c72:	440a      	add	r2, r1
90012c74:	1a9b      	subs	r3, r3, r2
90012c76:	435b      	muls	r3, r3
90012c78:	fb05 3505 	mla	r5, r5, r5, r3
90012c7c:	4f4c      	ldr	r7, [pc, #304]	; (90012db0 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1c0>)
90012c7e:	ac10      	add	r4, sp, #64	; 0x40
90012c80:	f1b9 0f0c 	cmp.w	r9, #12
90012c84:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
90012c86:	c40f      	stmia	r4!, {r0, r1, r2, r3}
90012c88:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
90012c8a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
90012c8c:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
90012c8e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
90012c90:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
90012c94:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
90012c98:	f04f 0303 	mov.w	r3, #3
90012c9c:	bfd8      	it	le
90012c9e:	f109 32ff 	addle.w	r2, r9, #4294967295
90012ca2:	f04f 0400 	mov.w	r4, #0
90012ca6:	f8cd 9000 	str.w	r9, [sp]
90012caa:	bfcc      	ite	gt
90012cac:	4698      	movgt	r8, r3
90012cae:	fb92 f8f3 	sdivle	r8, r2, r3
90012cb2:	1c63      	adds	r3, r4, #1
90012cb4:	aa10      	add	r2, sp, #64	; 0x40
90012cb6:	f004 0401 	and.w	r4, r4, #1
90012cba:	f04f 0b00 	mov.w	fp, #0
90012cbe:	9308      	str	r3, [sp, #32]
90012cc0:	9b00      	ldr	r3, [sp, #0]
90012cc2:	eb02 1444 	add.w	r4, r2, r4, lsl #5
90012cc6:	fb93 f3f8 	sdiv	r3, r3, r8
90012cca:	3404      	adds	r4, #4
90012ccc:	b29b      	uxth	r3, r3
90012cce:	9304      	str	r3, [sp, #16]
90012cd0:	9a04      	ldr	r2, [sp, #16]
90012cd2:	f854 3c04 	ldr.w	r3, [r4, #-4]
90012cd6:	fb13 f302 	smulbb	r3, r3, r2
90012cda:	9a01      	ldr	r2, [sp, #4]
90012cdc:	b29b      	uxth	r3, r3
90012cde:	1899      	adds	r1, r3, r2
90012ce0:	9305      	str	r3, [sp, #20]
90012ce2:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
90012ce6:	b209      	sxth	r1, r1
90012ce8:	4299      	cmp	r1, r3
90012cea:	db4d      	blt.n	90012d88 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
90012cec:	8932      	ldrh	r2, [r6, #8]
90012cee:	4413      	add	r3, r2
90012cf0:	b21b      	sxth	r3, r3
90012cf2:	4299      	cmp	r1, r3
90012cf4:	da48      	bge.n	90012d88 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
90012cf6:	9b04      	ldr	r3, [sp, #16]
90012cf8:	6827      	ldr	r7, [r4, #0]
90012cfa:	fb17 f703 	smulbb	r7, r7, r3
90012cfe:	9b02      	ldr	r3, [sp, #8]
90012d00:	b2bf      	uxth	r7, r7
90012d02:	18fa      	adds	r2, r7, r3
90012d04:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
90012d08:	b212      	sxth	r2, r2
90012d0a:	429a      	cmp	r2, r3
90012d0c:	db3c      	blt.n	90012d88 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
90012d0e:	8970      	ldrh	r0, [r6, #10]
90012d10:	4403      	add	r3, r0
90012d12:	b21b      	sxth	r3, r3
90012d14:	429a      	cmp	r2, r3
90012d16:	da37      	bge.n	90012d88 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
90012d18:	2300      	movs	r3, #0
90012d1a:	4630      	mov	r0, r6
90012d1c:	930b      	str	r3, [sp, #44]	; 0x2c
90012d1e:	ab0b      	add	r3, sp, #44	; 0x2c
90012d20:	f7ff ff36 	bl	90012b90 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
90012d24:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
90012d26:	b37a      	cbz	r2, 90012d88 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
90012d28:	4552      	cmp	r2, sl
90012d2a:	d02d      	beq.n	90012d88 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
90012d2c:	4611      	mov	r1, r2
90012d2e:	a80e      	add	r0, sp, #56	; 0x38
90012d30:	9209      	str	r2, [sp, #36]	; 0x24
90012d32:	f006 fb0d 	bl	90019350 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
90012d36:	f04f 0e02 	mov.w	lr, #2
90012d3a:	f9bd 103c 	ldrsh.w	r1, [sp, #60]	; 0x3c
90012d3e:	9a06      	ldr	r2, [sp, #24]
90012d40:	f9bd 0038 	ldrsh.w	r0, [sp, #56]	; 0x38
90012d44:	9b01      	ldr	r3, [sp, #4]
90012d46:	f9bd c03e 	ldrsh.w	ip, [sp, #62]	; 0x3e
90012d4a:	4413      	add	r3, r2
90012d4c:	9a07      	ldr	r2, [sp, #28]
90012d4e:	fb91 f1fe 	sdiv	r1, r1, lr
90012d52:	fb9c fcfe 	sdiv	ip, ip, lr
90012d56:	4401      	add	r1, r0
90012d58:	1a58      	subs	r0, r3, r1
90012d5a:	9b02      	ldr	r3, [sp, #8]
90012d5c:	f9bd 103a 	ldrsh.w	r1, [sp, #58]	; 0x3a
90012d60:	4413      	add	r3, r2
90012d62:	9a09      	ldr	r2, [sp, #36]	; 0x24
90012d64:	448c      	add	ip, r1
90012d66:	eba3 030c 	sub.w	r3, r3, ip
90012d6a:	435b      	muls	r3, r3
90012d6c:	fb00 3300 	mla	r3, r0, r0, r3
90012d70:	42ab      	cmp	r3, r5
90012d72:	d208      	bcs.n	90012d86 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x196>
90012d74:	990b      	ldr	r1, [sp, #44]	; 0x2c
90012d76:	461d      	mov	r5, r3
90012d78:	9803      	ldr	r0, [sp, #12]
90012d7a:	6001      	str	r1, [r0, #0]
90012d7c:	992a      	ldr	r1, [sp, #168]	; 0xa8
90012d7e:	9805      	ldr	r0, [sp, #20]
90012d80:	8008      	strh	r0, [r1, #0]
90012d82:	992b      	ldr	r1, [sp, #172]	; 0xac
90012d84:	800f      	strh	r7, [r1, #0]
90012d86:	4692      	mov	sl, r2
90012d88:	f10b 0b01 	add.w	fp, fp, #1
90012d8c:	3408      	adds	r4, #8
90012d8e:	f1bb 0f04 	cmp.w	fp, #4
90012d92:	d19d      	bne.n	90012cd0 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xe0>
90012d94:	9b00      	ldr	r3, [sp, #0]
90012d96:	9c08      	ldr	r4, [sp, #32]
90012d98:	444b      	add	r3, r9
90012d9a:	4544      	cmp	r4, r8
90012d9c:	9300      	str	r3, [sp, #0]
90012d9e:	d188      	bne.n	90012cb2 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xc2>
90012da0:	b021      	add	sp, #132	; 0x84
90012da2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90012da6:	f04f 35ff 	mov.w	r5, #4294967295
90012daa:	e767      	b.n	90012c7c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x8c>
90012dac:	240281ec 	.word	0x240281ec
90012db0:	90028714 	.word	0x90028714

90012db4 <_ZN8touchgfx4RectaNERKS0_>:
90012db4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
90012db8:	f9b1 7000 	ldrsh.w	r7, [r1]
90012dbc:	888c      	ldrh	r4, [r1, #4]
90012dbe:	f9b0 9000 	ldrsh.w	r9, [r0]
90012dc2:	443c      	add	r4, r7
90012dc4:	b2a4      	uxth	r4, r4
90012dc6:	fa0f f884 	sxth.w	r8, r4
90012dca:	45c1      	cmp	r9, r8
90012dcc:	da2f      	bge.n	90012e2e <_ZN8touchgfx4RectaNERKS0_+0x7a>
90012dce:	8882      	ldrh	r2, [r0, #4]
90012dd0:	444a      	add	r2, r9
90012dd2:	b292      	uxth	r2, r2
90012dd4:	fa0f fe82 	sxth.w	lr, r2
90012dd8:	4577      	cmp	r7, lr
90012dda:	da28      	bge.n	90012e2e <_ZN8touchgfx4RectaNERKS0_+0x7a>
90012ddc:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
90012de0:	88cb      	ldrh	r3, [r1, #6]
90012de2:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
90012de6:	442b      	add	r3, r5
90012de8:	b21b      	sxth	r3, r3
90012dea:	429e      	cmp	r6, r3
90012dec:	da1f      	bge.n	90012e2e <_ZN8touchgfx4RectaNERKS0_+0x7a>
90012dee:	88c3      	ldrh	r3, [r0, #6]
90012df0:	4433      	add	r3, r6
90012df2:	b29b      	uxth	r3, r3
90012df4:	fa0f fc83 	sxth.w	ip, r3
90012df8:	4565      	cmp	r5, ip
90012dfa:	da18      	bge.n	90012e2e <_ZN8touchgfx4RectaNERKS0_+0x7a>
90012dfc:	454f      	cmp	r7, r9
90012dfe:	bfb8      	it	lt
90012e00:	464f      	movlt	r7, r9
90012e02:	42b5      	cmp	r5, r6
90012e04:	bfb8      	it	lt
90012e06:	4635      	movlt	r5, r6
90012e08:	45f0      	cmp	r8, lr
90012e0a:	bfd8      	it	le
90012e0c:	4622      	movle	r2, r4
90012e0e:	1bd2      	subs	r2, r2, r7
90012e10:	8082      	strh	r2, [r0, #4]
90012e12:	884a      	ldrh	r2, [r1, #2]
90012e14:	88c9      	ldrh	r1, [r1, #6]
90012e16:	8007      	strh	r7, [r0, #0]
90012e18:	440a      	add	r2, r1
90012e1a:	8045      	strh	r5, [r0, #2]
90012e1c:	b292      	uxth	r2, r2
90012e1e:	b211      	sxth	r1, r2
90012e20:	458c      	cmp	ip, r1
90012e22:	bfa8      	it	ge
90012e24:	4613      	movge	r3, r2
90012e26:	1b5b      	subs	r3, r3, r5
90012e28:	80c3      	strh	r3, [r0, #6]
90012e2a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
90012e2e:	2300      	movs	r3, #0
90012e30:	8003      	strh	r3, [r0, #0]
90012e32:	8043      	strh	r3, [r0, #2]
90012e34:	8083      	strh	r3, [r0, #4]
90012e36:	80c3      	strh	r3, [r0, #6]
90012e38:	e7f7      	b.n	90012e2a <_ZN8touchgfx4RectaNERKS0_+0x76>

90012e3a <_ZNK8touchgfx4Rect7isEmptyEv>:
90012e3a:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
90012e3e:	2b00      	cmp	r3, #0
90012e40:	dd06      	ble.n	90012e50 <_ZNK8touchgfx4Rect7isEmptyEv+0x16>
90012e42:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
90012e46:	2800      	cmp	r0, #0
90012e48:	bfcc      	ite	gt
90012e4a:	2000      	movgt	r0, #0
90012e4c:	2001      	movle	r0, #1
90012e4e:	4770      	bx	lr
90012e50:	2001      	movs	r0, #1
90012e52:	4770      	bx	lr

90012e54 <_ZNK8touchgfx9Container16getContainedAreaEv>:
90012e54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
90012e58:	2300      	movs	r3, #0
90012e5a:	4604      	mov	r4, r0
90012e5c:	6a8d      	ldr	r5, [r1, #40]	; 0x28
90012e5e:	8003      	strh	r3, [r0, #0]
90012e60:	8043      	strh	r3, [r0, #2]
90012e62:	8083      	strh	r3, [r0, #4]
90012e64:	80c3      	strh	r3, [r0, #6]
90012e66:	2d00      	cmp	r5, #0
90012e68:	d040      	beq.n	90012eec <_ZNK8touchgfx9Container16getContainedAreaEv+0x98>
90012e6a:	1d28      	adds	r0, r5, #4
90012e6c:	f7ff ffe5 	bl	90012e3a <_ZNK8touchgfx4Rect7isEmptyEv>
90012e70:	b988      	cbnz	r0, 90012e96 <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
90012e72:	4620      	mov	r0, r4
90012e74:	f7ff ffe1 	bl	90012e3a <_ZNK8touchgfx4Rect7isEmptyEv>
90012e78:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
90012e7c:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
90012e80:	f9b5 e008 	ldrsh.w	lr, [r5, #8]
90012e84:	f9b5 c00a 	ldrsh.w	ip, [r5, #10]
90012e88:	b138      	cbz	r0, 90012e9a <_ZNK8touchgfx9Container16getContainedAreaEv+0x46>
90012e8a:	8022      	strh	r2, [r4, #0]
90012e8c:	8063      	strh	r3, [r4, #2]
90012e8e:	f8a4 e004 	strh.w	lr, [r4, #4]
90012e92:	f8a4 c006 	strh.w	ip, [r4, #6]
90012e96:	69ad      	ldr	r5, [r5, #24]
90012e98:	e7e5      	b.n	90012e66 <_ZNK8touchgfx9Container16getContainedAreaEv+0x12>
90012e9a:	f9b4 0000 	ldrsh.w	r0, [r4]
90012e9e:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
90012ea2:	4290      	cmp	r0, r2
90012ea4:	4607      	mov	r7, r0
90012ea6:	f8b4 8004 	ldrh.w	r8, [r4, #4]
90012eaa:	460e      	mov	r6, r1
90012eac:	bfa8      	it	ge
90012eae:	4617      	movge	r7, r2
90012eb0:	4299      	cmp	r1, r3
90012eb2:	4472      	add	r2, lr
90012eb4:	f8b4 e006 	ldrh.w	lr, [r4, #6]
90012eb8:	bfa8      	it	ge
90012eba:	461e      	movge	r6, r3
90012ebc:	4440      	add	r0, r8
90012ebe:	4471      	add	r1, lr
90012ec0:	4463      	add	r3, ip
90012ec2:	b200      	sxth	r0, r0
90012ec4:	8027      	strh	r7, [r4, #0]
90012ec6:	b212      	sxth	r2, r2
90012ec8:	8066      	strh	r6, [r4, #2]
90012eca:	b209      	sxth	r1, r1
90012ecc:	b21b      	sxth	r3, r3
90012ece:	4290      	cmp	r0, r2
90012ed0:	bfac      	ite	ge
90012ed2:	ebc7 0200 	rsbge	r2, r7, r0
90012ed6:	ebc7 0202 	rsblt	r2, r7, r2
90012eda:	4299      	cmp	r1, r3
90012edc:	bfac      	ite	ge
90012ede:	ebc6 0301 	rsbge	r3, r6, r1
90012ee2:	ebc6 0303 	rsblt	r3, r6, r3
90012ee6:	80a2      	strh	r2, [r4, #4]
90012ee8:	80e3      	strh	r3, [r4, #6]
90012eea:	e7d4      	b.n	90012e96 <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
90012eec:	4620      	mov	r0, r4
90012eee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

90012ef2 <_ZNK8touchgfx9Container4drawERKNS_4RectE>:
90012ef2:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
90012ef6:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
90012efa:	b383      	cbz	r3, 90012f5e <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
90012efc:	6a84      	ldr	r4, [r0, #40]	; 0x28
90012efe:	b374      	cbz	r4, 90012f5e <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
90012f00:	f9b1 5000 	ldrsh.w	r5, [r1]
90012f04:	f9b1 6002 	ldrsh.w	r6, [r1, #2]
90012f08:	f9b1 7004 	ldrsh.w	r7, [r1, #4]
90012f0c:	f9b1 8006 	ldrsh.w	r8, [r1, #6]
90012f10:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
90012f14:	b303      	cbz	r3, 90012f58 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
90012f16:	4668      	mov	r0, sp
90012f18:	1d21      	adds	r1, r4, #4
90012f1a:	f8ad 5000 	strh.w	r5, [sp]
90012f1e:	f8ad 6002 	strh.w	r6, [sp, #2]
90012f22:	f8ad 7004 	strh.w	r7, [sp, #4]
90012f26:	f8ad 8006 	strh.w	r8, [sp, #6]
90012f2a:	f7ff ff43 	bl	90012db4 <_ZN8touchgfx4RectaNERKS0_>
90012f2e:	4668      	mov	r0, sp
90012f30:	f7ff ff83 	bl	90012e3a <_ZNK8touchgfx4Rect7isEmptyEv>
90012f34:	b980      	cbnz	r0, 90012f58 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
90012f36:	f8bd 3000 	ldrh.w	r3, [sp]
90012f3a:	4669      	mov	r1, sp
90012f3c:	88a2      	ldrh	r2, [r4, #4]
90012f3e:	4620      	mov	r0, r4
90012f40:	1a9b      	subs	r3, r3, r2
90012f42:	88e2      	ldrh	r2, [r4, #6]
90012f44:	f8ad 3000 	strh.w	r3, [sp]
90012f48:	f8bd 3002 	ldrh.w	r3, [sp, #2]
90012f4c:	1a9b      	subs	r3, r3, r2
90012f4e:	f8ad 3002 	strh.w	r3, [sp, #2]
90012f52:	6823      	ldr	r3, [r4, #0]
90012f54:	689b      	ldr	r3, [r3, #8]
90012f56:	4798      	blx	r3
90012f58:	69a4      	ldr	r4, [r4, #24]
90012f5a:	2c00      	cmp	r4, #0
90012f5c:	d1d8      	bne.n	90012f10 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x1e>
90012f5e:	b002      	add	sp, #8
90012f60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

90012f64 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>:
90012f64:	b573      	push	{r0, r1, r4, r5, r6, lr}
90012f66:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
90012f6a:	460d      	mov	r5, r1
90012f6c:	4616      	mov	r6, r2
90012f6e:	b323      	cbz	r3, 90012fba <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
90012f70:	6a84      	ldr	r4, [r0, #40]	; 0x28
90012f72:	b314      	cbz	r4, 90012fba <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
90012f74:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
90012f78:	b1eb      	cbz	r3, 90012fb6 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
90012f7a:	6828      	ldr	r0, [r5, #0]
90012f7c:	466b      	mov	r3, sp
90012f7e:	6869      	ldr	r1, [r5, #4]
90012f80:	c303      	stmia	r3!, {r0, r1}
90012f82:	4668      	mov	r0, sp
90012f84:	1d21      	adds	r1, r4, #4
90012f86:	f7ff ff15 	bl	90012db4 <_ZN8touchgfx4RectaNERKS0_>
90012f8a:	4668      	mov	r0, sp
90012f8c:	f7ff ff55 	bl	90012e3a <_ZNK8touchgfx4Rect7isEmptyEv>
90012f90:	b988      	cbnz	r0, 90012fb6 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
90012f92:	f8bd 3000 	ldrh.w	r3, [sp]
90012f96:	4669      	mov	r1, sp
90012f98:	88a2      	ldrh	r2, [r4, #4]
90012f9a:	4620      	mov	r0, r4
90012f9c:	1a9b      	subs	r3, r3, r2
90012f9e:	88e2      	ldrh	r2, [r4, #6]
90012fa0:	f8ad 3000 	strh.w	r3, [sp]
90012fa4:	f8bd 3002 	ldrh.w	r3, [sp, #2]
90012fa8:	1a9b      	subs	r3, r3, r2
90012faa:	4632      	mov	r2, r6
90012fac:	f8ad 3002 	strh.w	r3, [sp, #2]
90012fb0:	6823      	ldr	r3, [r4, #0]
90012fb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
90012fb4:	4798      	blx	r3
90012fb6:	69a4      	ldr	r4, [r4, #24]
90012fb8:	e7db      	b.n	90012f72 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xe>
90012fba:	b002      	add	sp, #8
90012fbc:	bd70      	pop	{r4, r5, r6, pc}

90012fbe <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEt>:
90012fbe:	6803      	ldr	r3, [r0, #0]
90012fc0:	b513      	push	{r0, r1, r4, lr}
90012fc2:	f8d3 40a8 	ldr.w	r4, [r3, #168]	; 0xa8
90012fc6:	2300      	movs	r3, #0
90012fc8:	e9cd 3300 	strd	r3, r3, [sp]
90012fcc:	466b      	mov	r3, sp
90012fce:	47a0      	blx	r4
90012fd0:	b002      	add	sp, #8
90012fd2:	bd10      	pop	{r4, pc}

90012fd4 <_ZN8touchgfx3HAL16flushFrameBufferEv>:
90012fd4:	2301      	movs	r3, #1
90012fd6:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
90012fda:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
90012fde:	4770      	bx	lr

90012fe0 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>:
90012fe0:	2301      	movs	r3, #1
90012fe2:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
90012fe6:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
90012fea:	4770      	bx	lr

90012fec <_ZN8touchgfx3HAL17allowDMATransfersEv>:
90012fec:	6843      	ldr	r3, [r0, #4]
90012fee:	2201      	movs	r2, #1
90012ff0:	725a      	strb	r2, [r3, #9]
90012ff2:	6840      	ldr	r0, [r0, #4]
90012ff4:	6803      	ldr	r3, [r0, #0]
90012ff6:	691b      	ldr	r3, [r3, #16]
90012ff8:	4718      	bx	r3

90012ffa <_ZN8touchgfx3HAL8flushDMAEv>:
90012ffa:	6840      	ldr	r0, [r0, #4]
90012ffc:	6803      	ldr	r3, [r0, #0]
90012ffe:	689b      	ldr	r3, [r3, #8]
90013000:	4718      	bx	r3

90013002 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbtNS_6Bitmap12BitmapFormatES4_b>:
90013002:	b530      	push	{r4, r5, lr}
90013004:	b08b      	sub	sp, #44	; 0x2c
90013006:	6804      	ldr	r4, [r0, #0]
90013008:	f89d 5058 	ldrb.w	r5, [sp, #88]	; 0x58
9001300c:	9509      	str	r5, [sp, #36]	; 0x24
9001300e:	f89d 5054 	ldrb.w	r5, [sp, #84]	; 0x54
90013012:	9508      	str	r5, [sp, #32]
90013014:	f89d 5050 	ldrb.w	r5, [sp, #80]	; 0x50
90013018:	9507      	str	r5, [sp, #28]
9001301a:	f8bd 504c 	ldrh.w	r5, [sp, #76]	; 0x4c
9001301e:	9506      	str	r5, [sp, #24]
90013020:	f89d 5048 	ldrb.w	r5, [sp, #72]	; 0x48
90013024:	9505      	str	r5, [sp, #20]
90013026:	f89d 5044 	ldrb.w	r5, [sp, #68]	; 0x44
9001302a:	9504      	str	r5, [sp, #16]
9001302c:	f8bd 5040 	ldrh.w	r5, [sp, #64]	; 0x40
90013030:	9503      	str	r5, [sp, #12]
90013032:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
90013036:	9502      	str	r5, [sp, #8]
90013038:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
9001303c:	e9cd 3500 	strd	r3, r5, [sp]
90013040:	4613      	mov	r3, r2
90013042:	6be4      	ldr	r4, [r4, #60]	; 0x3c
90013044:	2200      	movs	r2, #0
90013046:	47a0      	blx	r4
90013048:	b00b      	add	sp, #44	; 0x2c
9001304a:	bd30      	pop	{r4, r5, pc}

9001304c <_ZN8touchgfx3HAL10beginFrameEv>:
9001304c:	4b04      	ldr	r3, [pc, #16]	; (90013060 <_ZN8touchgfx3HAL10beginFrameEv+0x14>)
9001304e:	781b      	ldrb	r3, [r3, #0]
90013050:	b123      	cbz	r3, 9001305c <_ZN8touchgfx3HAL10beginFrameEv+0x10>
90013052:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
90013056:	f080 0001 	eor.w	r0, r0, #1
9001305a:	4770      	bx	lr
9001305c:	2001      	movs	r0, #1
9001305e:	4770      	bx	lr
90013060:	240281ea 	.word	0x240281ea

90013064 <_ZN8touchgfx3HAL8endFrameEv>:
90013064:	b510      	push	{r4, lr}
90013066:	4604      	mov	r4, r0
90013068:	6840      	ldr	r0, [r0, #4]
9001306a:	6803      	ldr	r3, [r0, #0]
9001306c:	689b      	ldr	r3, [r3, #8]
9001306e:	4798      	blx	r3
90013070:	f894 3069 	ldrb.w	r3, [r4, #105]	; 0x69
90013074:	b113      	cbz	r3, 9001307c <_ZN8touchgfx3HAL8endFrameEv+0x18>
90013076:	2301      	movs	r3, #1
90013078:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
9001307c:	bd10      	pop	{r4, pc}

9001307e <_ZN8touchgfx3HAL10initializeEv>:
9001307e:	b510      	push	{r4, lr}
90013080:	4604      	mov	r4, r0
90013082:	f7ee fc67 	bl	90001954 <_ZN8touchgfx10OSWrappers10initializeEv>
90013086:	f7ed fa4b 	bl	90000520 <_ZN8touchgfx4GPIO4initEv>
9001308a:	6860      	ldr	r0, [r4, #4]
9001308c:	6803      	ldr	r3, [r0, #0]
9001308e:	68db      	ldr	r3, [r3, #12]
90013090:	4798      	blx	r3
90013092:	68e0      	ldr	r0, [r4, #12]
90013094:	6803      	ldr	r3, [r0, #0]
90013096:	689b      	ldr	r3, [r3, #8]
90013098:	4798      	blx	r3
9001309a:	6823      	ldr	r3, [r4, #0]
9001309c:	4620      	mov	r0, r4
9001309e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
900130a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
900130a4:	4718      	bx	r3
	...

900130a8 <_ZN8touchgfx3HAL4tickEv>:
900130a8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
900130aa:	6803      	ldr	r3, [r0, #0]
900130ac:	4604      	mov	r4, r0
900130ae:	4d5b      	ldr	r5, [pc, #364]	; (9001321c <_ZN8touchgfx3HAL4tickEv+0x174>)
900130b0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
900130b4:	4798      	blx	r3
900130b6:	2800      	cmp	r0, #0
900130b8:	f000 8095 	beq.w	900131e6 <_ZN8touchgfx3HAL4tickEv+0x13e>
900130bc:	2001      	movs	r0, #1
900130be:	2600      	movs	r6, #0
900130c0:	f7ed fa58 	bl	90000574 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
900130c4:	f894 3066 	ldrb.w	r3, [r4, #102]	; 0x66
900130c8:	f884 604b 	strb.w	r6, [r4, #75]	; 0x4b
900130cc:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
900130d0:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
900130d4:	f884 6066 	strb.w	r6, [r4, #102]	; 0x66
900130d8:	b133      	cbz	r3, 900130e8 <_ZN8touchgfx3HAL4tickEv+0x40>
900130da:	6823      	ldr	r3, [r4, #0]
900130dc:	4620      	mov	r0, r4
900130de:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
900130e2:	4798      	blx	r3
900130e4:	f884 6075 	strb.w	r6, [r4, #117]	; 0x75
900130e8:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
900130ec:	2601      	movs	r6, #1
900130ee:	6862      	ldr	r2, [r4, #4]
900130f0:	f083 0301 	eor.w	r3, r3, #1
900130f4:	702e      	strb	r6, [r5, #0]
900130f6:	7253      	strb	r3, [r2, #9]
900130f8:	f005 f800 	bl	900180fc <_ZN8touchgfx11Application11getInstanceEv>
900130fc:	6803      	ldr	r3, [r0, #0]
900130fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
90013100:	4798      	blx	r3
90013102:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
90013106:	b90b      	cbnz	r3, 9001310c <_ZN8touchgfx3HAL4tickEv+0x64>
90013108:	f884 6067 	strb.w	r6, [r4, #103]	; 0x67
9001310c:	f004 fff6 	bl	900180fc <_ZN8touchgfx11Application11getInstanceEv>
90013110:	6803      	ldr	r3, [r0, #0]
90013112:	695b      	ldr	r3, [r3, #20]
90013114:	4798      	blx	r3
90013116:	6da0      	ldr	r0, [r4, #88]	; 0x58
90013118:	6803      	ldr	r3, [r0, #0]
9001311a:	691b      	ldr	r3, [r3, #16]
9001311c:	4798      	blx	r3
9001311e:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
90013122:	f894 2068 	ldrb.w	r2, [r4, #104]	; 0x68
90013126:	3b01      	subs	r3, #1
90013128:	b2db      	uxtb	r3, r3
9001312a:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
9001312e:	b10a      	cbz	r2, 90013134 <_ZN8touchgfx3HAL4tickEv+0x8c>
90013130:	2b00      	cmp	r3, #0
90013132:	d1eb      	bne.n	9001310c <_ZN8touchgfx3HAL4tickEv+0x64>
90013134:	4a3a      	ldr	r2, [pc, #232]	; (90013220 <_ZN8touchgfx3HAL4tickEv+0x178>)
90013136:	f994 1064 	ldrsb.w	r1, [r4, #100]	; 0x64
9001313a:	7813      	ldrb	r3, [r2, #0]
9001313c:	3301      	adds	r3, #1
9001313e:	b25b      	sxtb	r3, r3
90013140:	4299      	cmp	r1, r3
90013142:	7013      	strb	r3, [r2, #0]
90013144:	dc10      	bgt.n	90013168 <_ZN8touchgfx3HAL4tickEv+0xc0>
90013146:	2300      	movs	r3, #0
90013148:	68e0      	ldr	r0, [r4, #12]
9001314a:	a902      	add	r1, sp, #8
9001314c:	7013      	strb	r3, [r2, #0]
9001314e:	aa03      	add	r2, sp, #12
90013150:	6803      	ldr	r3, [r0, #0]
90013152:	68db      	ldr	r3, [r3, #12]
90013154:	4798      	blx	r3
90013156:	6823      	ldr	r3, [r4, #0]
90013158:	2800      	cmp	r0, #0
9001315a:	d050      	beq.n	900131fe <_ZN8touchgfx3HAL4tickEv+0x156>
9001315c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
90013160:	4620      	mov	r0, r4
90013162:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
90013166:	4798      	blx	r3
90013168:	2300      	movs	r3, #0
9001316a:	6960      	ldr	r0, [r4, #20]
9001316c:	f88d 3007 	strb.w	r3, [sp, #7]
90013170:	b158      	cbz	r0, 9001318a <_ZN8touchgfx3HAL4tickEv+0xe2>
90013172:	6803      	ldr	r3, [r0, #0]
90013174:	f10d 0107 	add.w	r1, sp, #7
90013178:	68db      	ldr	r3, [r3, #12]
9001317a:	4798      	blx	r3
9001317c:	b128      	cbz	r0, 9001318a <_ZN8touchgfx3HAL4tickEv+0xe2>
9001317e:	6da0      	ldr	r0, [r4, #88]	; 0x58
90013180:	f89d 1007 	ldrb.w	r1, [sp, #7]
90013184:	6803      	ldr	r3, [r0, #0]
90013186:	68db      	ldr	r3, [r3, #12]
90013188:	4798      	blx	r3
9001318a:	f104 001c 	add.w	r0, r4, #28
9001318e:	f013 fe5b 	bl	90026e48 <_ZN8touchgfx8Gestures4tickEv>
90013192:	f894 306c 	ldrb.w	r3, [r4, #108]	; 0x6c
90013196:	b30b      	cbz	r3, 900131dc <_ZN8touchgfx3HAL4tickEv+0x134>
90013198:	6920      	ldr	r0, [r4, #16]
9001319a:	6803      	ldr	r3, [r0, #0]
9001319c:	691b      	ldr	r3, [r3, #16]
9001319e:	4798      	blx	r3
900131a0:	6f23      	ldr	r3, [r4, #112]	; 0x70
900131a2:	4606      	mov	r6, r0
900131a4:	b903      	cbnz	r3, 900131a8 <_ZN8touchgfx3HAL4tickEv+0x100>
900131a6:	6720      	str	r0, [r4, #112]	; 0x70
900131a8:	6f23      	ldr	r3, [r4, #112]	; 0x70
900131aa:	4a1e      	ldr	r2, [pc, #120]	; (90013224 <_ZN8touchgfx3HAL4tickEv+0x17c>)
900131ac:	1af3      	subs	r3, r6, r3
900131ae:	4293      	cmp	r3, r2
900131b0:	d914      	bls.n	900131dc <_ZN8touchgfx3HAL4tickEv+0x134>
900131b2:	6920      	ldr	r0, [r4, #16]
900131b4:	6803      	ldr	r3, [r0, #0]
900131b6:	699b      	ldr	r3, [r3, #24]
900131b8:	4798      	blx	r3
900131ba:	6f23      	ldr	r3, [r4, #112]	; 0x70
900131bc:	2264      	movs	r2, #100	; 0x64
900131be:	1af3      	subs	r3, r6, r3
900131c0:	fbb3 f3f2 	udiv	r3, r3, r2
900131c4:	fbb0 f0f3 	udiv	r0, r0, r3
900131c8:	2800      	cmp	r0, #0
900131ca:	dc1d      	bgt.n	90013208 <_ZN8touchgfx3HAL4tickEv+0x160>
900131cc:	f884 2065 	strb.w	r2, [r4, #101]	; 0x65
900131d0:	6920      	ldr	r0, [r4, #16]
900131d2:	2100      	movs	r1, #0
900131d4:	6803      	ldr	r3, [r0, #0]
900131d6:	69db      	ldr	r3, [r3, #28]
900131d8:	4798      	blx	r3
900131da:	6726      	str	r6, [r4, #112]	; 0x70
900131dc:	f004 ff8e 	bl	900180fc <_ZN8touchgfx11Application11getInstanceEv>
900131e0:	6803      	ldr	r3, [r0, #0]
900131e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
900131e4:	4798      	blx	r3
900131e6:	6823      	ldr	r3, [r4, #0]
900131e8:	4620      	mov	r0, r4
900131ea:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
900131ee:	4798      	blx	r3
900131f0:	2001      	movs	r0, #1
900131f2:	f7ed f9f3 	bl	900005dc <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
900131f6:	2300      	movs	r3, #0
900131f8:	702b      	strb	r3, [r5, #0]
900131fa:	b004      	add	sp, #16
900131fc:	bd70      	pop	{r4, r5, r6, pc}
900131fe:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
90013202:	4620      	mov	r0, r4
90013204:	4798      	blx	r3
90013206:	e7af      	b.n	90013168 <_ZN8touchgfx3HAL4tickEv+0xc0>
90013208:	2863      	cmp	r0, #99	; 0x63
9001320a:	bfcb      	itete	gt
9001320c:	2300      	movgt	r3, #0
9001320e:	f1c0 0064 	rsble	r0, r0, #100	; 0x64
90013212:	f884 3065 	strbgt.w	r3, [r4, #101]	; 0x65
90013216:	f884 0065 	strble.w	r0, [r4, #101]	; 0x65
9001321a:	e7d9      	b.n	900131d0 <_ZN8touchgfx3HAL4tickEv+0x128>
9001321c:	240281f0 	.word	0x240281f0
90013220:	240281f1 	.word	0x240281f1
90013224:	05f5e100 	.word	0x05f5e100

90013228 <_ZN8touchgfx3HAL17unlockFrameBufferEv>:
90013228:	f7ee bbc6 	b.w	900019b8 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

9001322c <_ZN8touchgfx3HAL21registerEventListenerERNS_15UIEventListenerE>:
9001322c:	6581      	str	r1, [r0, #88]	; 0x58
9001322e:	301c      	adds	r0, #28
90013230:	f013 be08 	b.w	90026e44 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>

90013234 <_ZN8touchgfx3HAL5touchEll>:
90013234:	b530      	push	{r4, r5, lr}
90013236:	b087      	sub	sp, #28
90013238:	4604      	mov	r4, r0
9001323a:	a804      	add	r0, sp, #16
9001323c:	e9cd 1204 	strd	r1, r2, [sp, #16]
90013240:	f004 fda0 	bl	90017d84 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>
90013244:	9b04      	ldr	r3, [sp, #16]
90013246:	a906      	add	r1, sp, #24
90013248:	a803      	add	r0, sp, #12
9001324a:	f8ad 300c 	strh.w	r3, [sp, #12]
9001324e:	9b05      	ldr	r3, [sp, #20]
90013250:	f821 3d0a 	strh.w	r3, [r1, #-10]!
90013254:	f004 fde8 	bl	90017e28 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>
90013258:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
9001325c:	f104 001c 	add.w	r0, r4, #28
90013260:	f8bd 200c 	ldrh.w	r2, [sp, #12]
90013264:	f8bd 300e 	ldrh.w	r3, [sp, #14]
90013268:	b189      	cbz	r1, 9001328e <_ZN8touchgfx3HAL5touchEll+0x5a>
9001326a:	f8b4 5060 	ldrh.w	r5, [r4, #96]	; 0x60
9001326e:	9300      	str	r3, [sp, #0]
90013270:	4613      	mov	r3, r2
90013272:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
90013276:	462a      	mov	r2, r5
90013278:	f013 fdf4 	bl	90026e64 <_ZN8touchgfx8Gestures17registerDragEventEtttt>
9001327c:	b128      	cbz	r0, 9001328a <_ZN8touchgfx3HAL5touchEll+0x56>
9001327e:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
90013282:	65e3      	str	r3, [r4, #92]	; 0x5c
90013284:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
90013288:	6623      	str	r3, [r4, #96]	; 0x60
9001328a:	b007      	add	sp, #28
9001328c:	bd30      	pop	{r4, r5, pc}
9001328e:	f013 fe29 	bl	90026ee4 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
90013292:	2301      	movs	r3, #1
90013294:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
90013298:	e7f1      	b.n	9001327e <_ZN8touchgfx3HAL5touchEll+0x4a>

9001329a <_ZN8touchgfx3HAL9blockCopyEPvPKvm>:
9001329a:	b510      	push	{r4, lr}
9001329c:	2b00      	cmp	r3, #0
9001329e:	d046      	beq.n	9001332e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
900132a0:	ea81 0002 	eor.w	r0, r1, r2
900132a4:	07c4      	lsls	r4, r0, #31
900132a6:	d508      	bpl.n	900132ba <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x20>
900132a8:	440b      	add	r3, r1
900132aa:	3a01      	subs	r2, #1
900132ac:	428b      	cmp	r3, r1
900132ae:	d93e      	bls.n	9001332e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
900132b0:	f812 0f01 	ldrb.w	r0, [r2, #1]!
900132b4:	f801 0b01 	strb.w	r0, [r1], #1
900132b8:	e7f8      	b.n	900132ac <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x12>
900132ba:	07d0      	lsls	r0, r2, #31
900132bc:	bf42      	ittt	mi
900132be:	f812 0b01 	ldrbmi.w	r0, [r2], #1
900132c2:	f103 33ff 	addmi.w	r3, r3, #4294967295
900132c6:	f801 0b01 	strbmi.w	r0, [r1], #1
900132ca:	2b01      	cmp	r3, #1
900132cc:	d911      	bls.n	900132f2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
900132ce:	ea81 0402 	eor.w	r4, r1, r2
900132d2:	4610      	mov	r0, r2
900132d4:	07a4      	lsls	r4, r4, #30
900132d6:	d022      	beq.n	9001331e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x84>
900132d8:	f023 0401 	bic.w	r4, r3, #1
900132dc:	440c      	add	r4, r1
900132de:	428c      	cmp	r4, r1
900132e0:	4602      	mov	r2, r0
900132e2:	d904      	bls.n	900132ee <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x54>
900132e4:	8812      	ldrh	r2, [r2, #0]
900132e6:	3002      	adds	r0, #2
900132e8:	f821 2b02 	strh.w	r2, [r1], #2
900132ec:	e7f7      	b.n	900132de <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x44>
900132ee:	f003 0301 	and.w	r3, r3, #1
900132f2:	f023 0003 	bic.w	r0, r3, #3
900132f6:	4408      	add	r0, r1
900132f8:	4288      	cmp	r0, r1
900132fa:	4614      	mov	r4, r2
900132fc:	d904      	bls.n	90013308 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x6e>
900132fe:	6824      	ldr	r4, [r4, #0]
90013300:	3204      	adds	r2, #4
90013302:	f841 4b04 	str.w	r4, [r1], #4
90013306:	e7f7      	b.n	900132f8 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x5e>
90013308:	f003 0303 	and.w	r3, r3, #3
9001330c:	3a01      	subs	r2, #1
9001330e:	440b      	add	r3, r1
90013310:	428b      	cmp	r3, r1
90013312:	d90c      	bls.n	9001332e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
90013314:	f812 0f01 	ldrb.w	r0, [r2, #1]!
90013318:	f801 0b01 	strb.w	r0, [r1], #1
9001331c:	e7f8      	b.n	90013310 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x76>
9001331e:	0790      	lsls	r0, r2, #30
90013320:	d0e7      	beq.n	900132f2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
90013322:	f832 0b02 	ldrh.w	r0, [r2], #2
90013326:	3b02      	subs	r3, #2
90013328:	f821 0b02 	strh.w	r0, [r1], #2
9001332c:	e7e1      	b.n	900132f2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
9001332e:	2001      	movs	r0, #1
90013330:	bd10      	pop	{r4, pc}

90013332 <_ZN8touchgfx3HAL7noTouchEv>:
90013332:	b510      	push	{r4, lr}
90013334:	f890 306b 	ldrb.w	r3, [r0, #107]	; 0x6b
90013338:	4604      	mov	r4, r0
9001333a:	b153      	cbz	r3, 90013352 <_ZN8touchgfx3HAL7noTouchEv+0x20>
9001333c:	f8b0 3060 	ldrh.w	r3, [r0, #96]	; 0x60
90013340:	2101      	movs	r1, #1
90013342:	f8b0 205c 	ldrh.w	r2, [r0, #92]	; 0x5c
90013346:	301c      	adds	r0, #28
90013348:	f013 fdcc 	bl	90026ee4 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
9001334c:	2300      	movs	r3, #0
9001334e:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
90013352:	bd10      	pop	{r4, pc}

90013354 <_ZN8touchgfx8Drawable5setXYEss>:
90013354:	b570      	push	{r4, r5, r6, lr}
90013356:	6803      	ldr	r3, [r0, #0]
90013358:	4604      	mov	r4, r0
9001335a:	4615      	mov	r5, r2
9001335c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
9001335e:	4798      	blx	r3
90013360:	6823      	ldr	r3, [r4, #0]
90013362:	4629      	mov	r1, r5
90013364:	4620      	mov	r0, r4
90013366:	6b5b      	ldr	r3, [r3, #52]	; 0x34
90013368:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
9001336c:	4718      	bx	r3
	...

90013370 <_ZN8touchgfx3HAL3lcdEv>:
90013370:	4b04      	ldr	r3, [pc, #16]	; (90013384 <_ZN8touchgfx3HAL3lcdEv+0x14>)
90013372:	681b      	ldr	r3, [r3, #0]
90013374:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
90013378:	b10a      	cbz	r2, 9001337e <_ZN8touchgfx3HAL3lcdEv+0xe>
9001337a:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
9001337c:	b900      	cbnz	r0, 90013380 <_ZN8touchgfx3HAL3lcdEv+0x10>
9001337e:	6898      	ldr	r0, [r3, #8]
90013380:	4770      	bx	lr
90013382:	bf00      	nop
90013384:	240281ec 	.word	0x240281ec

90013388 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt>:
90013388:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
9001338c:	b085      	sub	sp, #20
9001338e:	4604      	mov	r4, r0
90013390:	2000      	movs	r0, #0
90013392:	4699      	mov	r9, r3
90013394:	ad04      	add	r5, sp, #16
90013396:	460f      	mov	r7, r1
90013398:	4690      	mov	r8, r2
9001339a:	f845 0d04 	str.w	r0, [r5, #-4]!
9001339e:	69a0      	ldr	r0, [r4, #24]
900133a0:	6806      	ldr	r6, [r0, #0]
900133a2:	9501      	str	r5, [sp, #4]
900133a4:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
900133a8:	9500      	str	r5, [sp, #0]
900133aa:	6835      	ldr	r5, [r6, #0]
900133ac:	47a8      	blx	r5
900133ae:	4d10      	ldr	r5, [pc, #64]	; (900133f0 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x68>)
900133b0:	4606      	mov	r6, r0
900133b2:	f8a5 9000 	strh.w	r9, [r5]
900133b6:	f7ff ffdb 	bl	90013370 <_ZN8touchgfx3HAL3lcdEv>
900133ba:	6803      	ldr	r3, [r0, #0]
900133bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
900133be:	4798      	blx	r3
900133c0:	b128      	cbz	r0, 900133ce <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x46>
900133c2:	2801      	cmp	r0, #1
900133c4:	d00b      	beq.n	900133de <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x56>
900133c6:	4630      	mov	r0, r6
900133c8:	b005      	add	sp, #20
900133ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
900133ce:	882b      	ldrh	r3, [r5, #0]
900133d0:	fb08 7203 	mla	r2, r8, r3, r7
900133d4:	9b03      	ldr	r3, [sp, #12]
900133d6:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
900133da:	63e3      	str	r3, [r4, #60]	; 0x3c
900133dc:	e7f3      	b.n	900133c6 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
900133de:	882a      	ldrh	r2, [r5, #0]
900133e0:	9b03      	ldr	r3, [sp, #12]
900133e2:	fb08 7202 	mla	r2, r8, r2, r7
900133e6:	eb02 0242 	add.w	r2, r2, r2, lsl #1
900133ea:	1a9a      	subs	r2, r3, r2
900133ec:	63e2      	str	r2, [r4, #60]	; 0x3c
900133ee:	e7ea      	b.n	900133c6 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
900133f0:	240281e6 	.word	0x240281e6

900133f4 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb>:
900133f4:	b5f0      	push	{r4, r5, r6, r7, lr}
900133f6:	b08b      	sub	sp, #44	; 0x2c
900133f8:	4617      	mov	r7, r2
900133fa:	4604      	mov	r4, r0
900133fc:	460e      	mov	r6, r1
900133fe:	461d      	mov	r5, r3
90013400:	f7ff ffb6 	bl	90013370 <_ZN8touchgfx3HAL3lcdEv>
90013404:	6803      	ldr	r3, [r0, #0]
90013406:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90013408:	4798      	blx	r3
9001340a:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
9001340e:	9007      	str	r0, [sp, #28]
90013410:	4631      	mov	r1, r6
90013412:	6822      	ldr	r2, [r4, #0]
90013414:	e9cd 0308 	strd	r0, r3, [sp, #32]
90013418:	4b0c      	ldr	r3, [pc, #48]	; (9001344c <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb+0x58>)
9001341a:	4620      	mov	r0, r4
9001341c:	881b      	ldrh	r3, [r3, #0]
9001341e:	9306      	str	r3, [sp, #24]
90013420:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
90013424:	9305      	str	r3, [sp, #20]
90013426:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
9001342a:	9304      	str	r3, [sp, #16]
9001342c:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
90013430:	9303      	str	r3, [sp, #12]
90013432:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
90013436:	9302      	str	r3, [sp, #8]
90013438:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
9001343c:	e9cd 5300 	strd	r5, r3, [sp]
90013440:	463b      	mov	r3, r7
90013442:	6bd5      	ldr	r5, [r2, #60]	; 0x3c
90013444:	2200      	movs	r2, #0
90013446:	47a8      	blx	r5
90013448:	b00b      	add	sp, #44	; 0x2c
9001344a:	bdf0      	pop	{r4, r5, r6, r7, pc}
9001344c:	240281e6 	.word	0x240281e6

90013450 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb>:
90013450:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
90013454:	4698      	mov	r8, r3
90013456:	6803      	ldr	r3, [r0, #0]
90013458:	b08b      	sub	sp, #44	; 0x2c
9001345a:	4617      	mov	r7, r2
9001345c:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
9001345e:	460e      	mov	r6, r1
90013460:	4b13      	ldr	r3, [pc, #76]	; (900134b0 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb+0x60>)
90013462:	4604      	mov	r4, r0
90013464:	f8b3 9000 	ldrh.w	r9, [r3]
90013468:	f7ff ff82 	bl	90013370 <_ZN8touchgfx3HAL3lcdEv>
9001346c:	6803      	ldr	r3, [r0, #0]
9001346e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90013470:	4798      	blx	r3
90013472:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
90013476:	2200      	movs	r2, #0
90013478:	4631      	mov	r1, r6
9001347a:	e9cd 0308 	strd	r0, r3, [sp, #32]
9001347e:	2302      	movs	r3, #2
90013480:	4620      	mov	r0, r4
90013482:	e9cd 9306 	strd	r9, r3, [sp, #24]
90013486:	2301      	movs	r3, #1
90013488:	9305      	str	r3, [sp, #20]
9001348a:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
9001348e:	9304      	str	r3, [sp, #16]
90013490:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
90013494:	9303      	str	r3, [sp, #12]
90013496:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
9001349a:	9302      	str	r3, [sp, #8]
9001349c:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
900134a0:	e9cd 8300 	strd	r8, r3, [sp]
900134a4:	463b      	mov	r3, r7
900134a6:	47a8      	blx	r5
900134a8:	b00b      	add	sp, #44	; 0x2c
900134aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
900134ae:	bf00      	nop
900134b0:	240281e6 	.word	0x240281e6

900134b4 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb>:
900134b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
900134b8:	4698      	mov	r8, r3
900134ba:	6803      	ldr	r3, [r0, #0]
900134bc:	b087      	sub	sp, #28
900134be:	460e      	mov	r6, r1
900134c0:	6d9d      	ldr	r5, [r3, #88]	; 0x58
900134c2:	4617      	mov	r7, r2
900134c4:	4b0f      	ldr	r3, [pc, #60]	; (90013504 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb+0x50>)
900134c6:	4604      	mov	r4, r0
900134c8:	f8b3 9000 	ldrh.w	r9, [r3]
900134cc:	f7ff ff50 	bl	90013370 <_ZN8touchgfx3HAL3lcdEv>
900134d0:	6803      	ldr	r3, [r0, #0]
900134d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
900134d4:	4798      	blx	r3
900134d6:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
900134da:	463a      	mov	r2, r7
900134dc:	4631      	mov	r1, r6
900134de:	f8cd 900c 	str.w	r9, [sp, #12]
900134e2:	e9cd 0304 	strd	r0, r3, [sp, #16]
900134e6:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
900134ea:	4620      	mov	r0, r4
900134ec:	9302      	str	r3, [sp, #8]
900134ee:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
900134f2:	9301      	str	r3, [sp, #4]
900134f4:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
900134f8:	9300      	str	r3, [sp, #0]
900134fa:	4643      	mov	r3, r8
900134fc:	47a8      	blx	r5
900134fe:	b007      	add	sp, #28
90013500:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
90013504:	240281e6 	.word	0x240281e6

90013508 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE>:
90013508:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001350c:	4604      	mov	r4, r0
9001350e:	b08f      	sub	sp, #60	; 0x3c
90013510:	4610      	mov	r0, r2
90013512:	460d      	mov	r5, r1
90013514:	4691      	mov	r9, r2
90013516:	461e      	mov	r6, r3
90013518:	f007 fed6 	bl	9001b2c8 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
9001351c:	2800      	cmp	r0, #0
9001351e:	f000 809d 	beq.w	9001365c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x154>
90013522:	6823      	ldr	r3, [r4, #0]
90013524:	4620      	mov	r0, r4
90013526:	f8df b198 	ldr.w	fp, [pc, #408]	; 900136c0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>
9001352a:	f10d 0838 	add.w	r8, sp, #56	; 0x38
9001352e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
90013530:	4798      	blx	r3
90013532:	6823      	ldr	r3, [r4, #0]
90013534:	4620      	mov	r0, r4
90013536:	f8df a18c 	ldr.w	sl, [pc, #396]	; 900136c4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>
9001353a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9001353c:	4798      	blx	r3
9001353e:	f8bb 3000 	ldrh.w	r3, [fp]
90013542:	4f5c      	ldr	r7, [pc, #368]	; (900136b4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
90013544:	9301      	str	r3, [sp, #4]
90013546:	f8ba 3000 	ldrh.w	r3, [sl]
9001354a:	f828 9d1c 	strh.w	r9, [r8, #-28]!
9001354e:	4640      	mov	r0, r8
90013550:	9302      	str	r3, [sp, #8]
90013552:	883b      	ldrh	r3, [r7, #0]
90013554:	9303      	str	r3, [sp, #12]
90013556:	4b58      	ldr	r3, [pc, #352]	; (900136b8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
90013558:	881a      	ldrh	r2, [r3, #0]
9001355a:	9305      	str	r3, [sp, #20]
9001355c:	9204      	str	r2, [sp, #16]
9001355e:	f007 ff47 	bl	9001b3f0 <_ZNK8touchgfx6Bitmap8getWidthEv>
90013562:	8038      	strh	r0, [r7, #0]
90013564:	4640      	mov	r0, r8
90013566:	f007 ff77 	bl	9001b458 <_ZNK8touchgfx6Bitmap9getHeightEv>
9001356a:	9b05      	ldr	r3, [sp, #20]
9001356c:	b280      	uxth	r0, r0
9001356e:	8018      	strh	r0, [r3, #0]
90013570:	4b52      	ldr	r3, [pc, #328]	; (900136bc <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b4>)
90013572:	781b      	ldrb	r3, [r3, #0]
90013574:	2b00      	cmp	r3, #0
90013576:	d174      	bne.n	90013662 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x15a>
90013578:	883b      	ldrh	r3, [r7, #0]
9001357a:	f8aa 0000 	strh.w	r0, [sl]
9001357e:	f8ab 3000 	strh.w	r3, [fp]
90013582:	4648      	mov	r0, r9
90013584:	e9d4 870f 	ldrd	r8, r7, [r4, #60]	; 0x3c
90013588:	f007 fe9e 	bl	9001b2c8 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
9001358c:	2200      	movs	r2, #0
9001358e:	e9c4 000f 	strd	r0, r0, [r4, #60]	; 0x3c
90013592:	4611      	mov	r1, r2
90013594:	4628      	mov	r0, r5
90013596:	f9b5 9004 	ldrsh.w	r9, [r5, #4]
9001359a:	f9b5 a006 	ldrsh.w	sl, [r5, #6]
9001359e:	f7ff fed9 	bl	90013354 <_ZN8touchgfx8Drawable5setXYEss>
900135a2:	2301      	movs	r3, #1
900135a4:	f895 b025 	ldrb.w	fp, [r5, #37]	; 0x25
900135a8:	f885 3025 	strb.w	r3, [r5, #37]	; 0x25
900135ac:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
900135b0:	2b00      	cmp	r3, #0
900135b2:	dd5c      	ble.n	9001366e <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
900135b4:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
900135b8:	2b00      	cmp	r3, #0
900135ba:	dd58      	ble.n	9001366e <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
900135bc:	462a      	mov	r2, r5
900135be:	ab0a      	add	r3, sp, #40	; 0x28
900135c0:	f852 0f04 	ldr.w	r0, [r2, #4]!
900135c4:	6851      	ldr	r1, [r2, #4]
900135c6:	c303      	stmia	r3!, {r0, r1}
900135c8:	4631      	mov	r1, r6
900135ca:	a80a      	add	r0, sp, #40	; 0x28
900135cc:	f7ff fbf2 	bl	90012db4 <_ZN8touchgfx4RectaNERKS0_>
900135d0:	4b38      	ldr	r3, [pc, #224]	; (900136b4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
900135d2:	2100      	movs	r1, #0
900135d4:	f9b3 2000 	ldrsh.w	r2, [r3]
900135d8:	4b37      	ldr	r3, [pc, #220]	; (900136b8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
900135da:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
900135de:	aa0a      	add	r2, sp, #40	; 0x28
900135e0:	f9b3 3000 	ldrsh.w	r3, [r3]
900135e4:	910c      	str	r1, [sp, #48]	; 0x30
900135e6:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
900135ea:	ab08      	add	r3, sp, #32
900135ec:	e892 0003 	ldmia.w	r2, {r0, r1}
900135f0:	e883 0003 	stmia.w	r3, {r0, r1}
900135f4:	4618      	mov	r0, r3
900135f6:	a90c      	add	r1, sp, #48	; 0x30
900135f8:	f7ff fbdc 	bl	90012db4 <_ZN8touchgfx4RectaNERKS0_>
900135fc:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
900135fe:	2b00      	cmp	r3, #0
90013600:	d13c      	bne.n	9001367c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x174>
90013602:	2000      	movs	r0, #0
90013604:	f884 0076 	strb.w	r0, [r4, #118]	; 0x76
90013608:	2600      	movs	r6, #0
9001360a:	696b      	ldr	r3, [r5, #20]
9001360c:	a908      	add	r1, sp, #32
9001360e:	682a      	ldr	r2, [r5, #0]
90013610:	4628      	mov	r0, r5
90013612:	9305      	str	r3, [sp, #20]
90013614:	616e      	str	r6, [r5, #20]
90013616:	6892      	ldr	r2, [r2, #8]
90013618:	4790      	blx	r2
9001361a:	9b05      	ldr	r3, [sp, #20]
9001361c:	4652      	mov	r2, sl
9001361e:	4649      	mov	r1, r9
90013620:	616b      	str	r3, [r5, #20]
90013622:	4628      	mov	r0, r5
90013624:	f884 6076 	strb.w	r6, [r4, #118]	; 0x76
90013628:	f885 b025 	strb.w	fp, [r5, #37]	; 0x25
9001362c:	f7ff fe92 	bl	90013354 <_ZN8touchgfx8Drawable5setXYEss>
90013630:	9a01      	ldr	r2, [sp, #4]
90013632:	4b23      	ldr	r3, [pc, #140]	; (900136c0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>)
90013634:	4620      	mov	r0, r4
90013636:	801a      	strh	r2, [r3, #0]
90013638:	9a02      	ldr	r2, [sp, #8]
9001363a:	4b22      	ldr	r3, [pc, #136]	; (900136c4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>)
9001363c:	801a      	strh	r2, [r3, #0]
9001363e:	9a03      	ldr	r2, [sp, #12]
90013640:	4b1c      	ldr	r3, [pc, #112]	; (900136b4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
90013642:	801a      	strh	r2, [r3, #0]
90013644:	4b1c      	ldr	r3, [pc, #112]	; (900136b8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
90013646:	9a04      	ldr	r2, [sp, #16]
90013648:	801a      	strh	r2, [r3, #0]
9001364a:	6823      	ldr	r3, [r4, #0]
9001364c:	e9c4 870f 	strd	r8, r7, [r4, #60]	; 0x3c
90013650:	6a9b      	ldr	r3, [r3, #40]	; 0x28
90013652:	4798      	blx	r3
90013654:	6823      	ldr	r3, [r4, #0]
90013656:	4620      	mov	r0, r4
90013658:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9001365a:	4798      	blx	r3
9001365c:	b00f      	add	sp, #60	; 0x3c
9001365e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90013662:	883b      	ldrh	r3, [r7, #0]
90013664:	f8ab 0000 	strh.w	r0, [fp]
90013668:	f8aa 3000 	strh.w	r3, [sl]
9001366c:	e789      	b.n	90013582 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x7a>
9001366e:	462a      	mov	r2, r5
90013670:	ab0a      	add	r3, sp, #40	; 0x28
90013672:	f852 0f04 	ldr.w	r0, [r2, #4]!
90013676:	6851      	ldr	r1, [r2, #4]
90013678:	c303      	stmia	r3!, {r0, r1}
9001367a:	e7a9      	b.n	900135d0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xc8>
9001367c:	a807      	add	r0, sp, #28
9001367e:	f008 f827 	bl	9001b6d0 <_ZNK8touchgfx6Bitmap9getFormatEv>
90013682:	4606      	mov	r6, r0
90013684:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
90013686:	6803      	ldr	r3, [r0, #0]
90013688:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9001368a:	4798      	blx	r3
9001368c:	4286      	cmp	r6, r0
9001368e:	d1b8      	bne.n	90013602 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfa>
90013690:	f7ff fe6e 	bl	90013370 <_ZN8touchgfx3HAL3lcdEv>
90013694:	6803      	ldr	r3, [r0, #0]
90013696:	4606      	mov	r6, r0
90013698:	a807      	add	r0, sp, #28
9001369a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
9001369c:	9305      	str	r3, [sp, #20]
9001369e:	f008 f817 	bl	9001b6d0 <_ZNK8touchgfx6Bitmap9getFormatEv>
900136a2:	9b05      	ldr	r3, [sp, #20]
900136a4:	4601      	mov	r1, r0
900136a6:	4630      	mov	r0, r6
900136a8:	4798      	blx	r3
900136aa:	f080 0001 	eor.w	r0, r0, #1
900136ae:	b2c0      	uxtb	r0, r0
900136b0:	e7a8      	b.n	90013604 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfc>
900136b2:	bf00      	nop
900136b4:	240281e0 	.word	0x240281e0
900136b8:	240281e2 	.word	0x240281e2
900136bc:	240281e4 	.word	0x240281e4
900136c0:	240281e6 	.word	0x240281e6
900136c4:	240281e8 	.word	0x240281e8

900136c8 <_ZN8touchgfx3HAL20getClientFrameBufferEv>:
900136c8:	4b07      	ldr	r3, [pc, #28]	; (900136e8 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x20>)
900136ca:	b510      	push	{r4, lr}
900136cc:	781b      	ldrb	r3, [r3, #0]
900136ce:	4604      	mov	r4, r0
900136d0:	b13b      	cbz	r3, 900136e2 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
900136d2:	6803      	ldr	r3, [r0, #0]
900136d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
900136d6:	4798      	blx	r3
900136d8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
900136da:	4283      	cmp	r3, r0
900136dc:	d101      	bne.n	900136e2 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
900136de:	6c20      	ldr	r0, [r4, #64]	; 0x40
900136e0:	bd10      	pop	{r4, pc}
900136e2:	6be0      	ldr	r0, [r4, #60]	; 0x3c
900136e4:	e7fc      	b.n	900136e0 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x18>
900136e6:	bf00      	nop
900136e8:	240281ea 	.word	0x240281ea

900136ec <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt>:
900136ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
900136f0:	461d      	mov	r5, r3
900136f2:	b08a      	sub	sp, #40	; 0x28
900136f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
900136f8:	4690      	mov	r8, r2
900136fa:	f8bd 604c 	ldrh.w	r6, [sp, #76]	; 0x4c
900136fe:	2400      	movs	r4, #0
90013700:	4607      	mov	r7, r0
90013702:	fb06 8505 	mla	r5, r6, r5, r8
90013706:	9404      	str	r4, [sp, #16]
90013708:	f88d 4020 	strb.w	r4, [sp, #32]
9001370c:	e9cd 3101 	strd	r3, r1, [sp, #4]
90013710:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
90013714:	f8ad 3018 	strh.w	r3, [sp, #24]
90013718:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
9001371c:	f8ad 301a 	strh.w	r3, [sp, #26]
90013720:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
90013724:	f8ad 301c 	strh.w	r3, [sp, #28]
90013728:	f7ff ffce 	bl	900136c8 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
9001372c:	eb00 0545 	add.w	r5, r0, r5, lsl #1
90013730:	6878      	ldr	r0, [r7, #4]
90013732:	f8ad 601e 	strh.w	r6, [sp, #30]
90013736:	a901      	add	r1, sp, #4
90013738:	9505      	str	r5, [sp, #20]
9001373a:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
9001373e:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
90013742:	f88d 4023 	strb.w	r4, [sp, #35]	; 0x23
90013746:	f88d 4024 	strb.w	r4, [sp, #36]	; 0x24
9001374a:	6803      	ldr	r3, [r0, #0]
9001374c:	685b      	ldr	r3, [r3, #4]
9001374e:	4798      	blx	r3
90013750:	b00a      	add	sp, #40	; 0x28
90013752:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

90013756 <_ZN8touchgfx3HAL12blitFillWordEtttttt>:
90013756:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
9001375a:	b08b      	sub	sp, #44	; 0x2c
9001375c:	2400      	movs	r4, #0
9001375e:	4691      	mov	r9, r2
90013760:	461d      	mov	r5, r3
90013762:	f8bd 6050 	ldrh.w	r6, [sp, #80]	; 0x50
90013766:	f44f 6300 	mov.w	r3, #2048	; 0x800
9001376a:	4688      	mov	r8, r1
9001376c:	4607      	mov	r7, r0
9001376e:	9404      	str	r4, [sp, #16]
90013770:	fb06 9505 	mla	r5, r6, r5, r9
90013774:	e9cd 3401 	strd	r3, r4, [sp, #4]
90013778:	f7ff ffa6 	bl	900136c8 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
9001377c:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
90013780:	eb00 0545 	add.w	r5, r0, r5, lsl #1
90013784:	6878      	ldr	r0, [r7, #4]
90013786:	f8ad 3018 	strh.w	r3, [sp, #24]
9001378a:	a901      	add	r1, sp, #4
9001378c:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
90013790:	9505      	str	r5, [sp, #20]
90013792:	f8ad 301a 	strh.w	r3, [sp, #26]
90013796:	f8ad 401c 	strh.w	r4, [sp, #28]
9001379a:	f8ad 601e 	strh.w	r6, [sp, #30]
9001379e:	f8cd 8010 	str.w	r8, [sp, #16]
900137a2:	f8ad 4020 	strh.w	r4, [sp, #32]
900137a6:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
900137aa:	f88d 4023 	strb.w	r4, [sp, #35]	; 0x23
900137ae:	f88d 4024 	strb.w	r4, [sp, #36]	; 0x24
900137b2:	6803      	ldr	r3, [r0, #0]
900137b4:	685b      	ldr	r3, [r3, #4]
900137b6:	4798      	blx	r3
900137b8:	b00b      	add	sp, #44	; 0x2c
900137ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

900137c0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b>:
900137c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
900137c4:	b08a      	sub	sp, #40	; 0x28
900137c6:	4698      	mov	r8, r3
900137c8:	2300      	movs	r3, #0
900137ca:	4606      	mov	r6, r0
900137cc:	f89d 505c 	ldrb.w	r5, [sp, #92]	; 0x5c
900137d0:	f89d 0050 	ldrb.w	r0, [sp, #80]	; 0x50
900137d4:	2d0b      	cmp	r5, #11
900137d6:	f89d c054 	ldrb.w	ip, [sp, #84]	; 0x54
900137da:	f8bd 7058 	ldrh.w	r7, [sp, #88]	; 0x58
900137de:	f89d 4060 	ldrb.w	r4, [sp, #96]	; 0x60
900137e2:	9304      	str	r3, [sp, #16]
900137e4:	d137      	bne.n	90013856 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x96>
900137e6:	2380      	movs	r3, #128	; 0x80
900137e8:	f88d 0020 	strb.w	r0, [sp, #32]
900137ec:	4630      	mov	r0, r6
900137ee:	9203      	str	r2, [sp, #12]
900137f0:	e9cd 3101 	strd	r3, r1, [sp, #4]
900137f4:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
900137f8:	f8ad 3018 	strh.w	r3, [sp, #24]
900137fc:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
90013800:	f8ad 301a 	strh.w	r3, [sp, #26]
90013804:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
90013808:	f8ad 301c 	strh.w	r3, [sp, #28]
9001380c:	f7ff ff5c 	bl	900136c8 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
90013810:	2c0b      	cmp	r4, #11
90013812:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
90013816:	f8ad 701e 	strh.w	r7, [sp, #30]
9001381a:	bf94      	ite	ls
9001381c:	4b19      	ldrls	r3, [pc, #100]	; (90013884 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xc4>)
9001381e:	2100      	movhi	r1, #0
90013820:	f88d 5021 	strb.w	r5, [sp, #33]	; 0x21
90013824:	bf98      	it	ls
90013826:	5d19      	ldrbls	r1, [r3, r4]
90013828:	fb02 8307 	mla	r3, r2, r7, r8
9001382c:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
90013830:	10c9      	asrs	r1, r1, #3
90013832:	fb01 0003 	mla	r0, r1, r3, r0
90013836:	f89d 3064 	ldrb.w	r3, [sp, #100]	; 0x64
9001383a:	a901      	add	r1, sp, #4
9001383c:	9005      	str	r0, [sp, #20]
9001383e:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
90013842:	2300      	movs	r3, #0
90013844:	6870      	ldr	r0, [r6, #4]
90013846:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
9001384a:	6803      	ldr	r3, [r0, #0]
9001384c:	685b      	ldr	r3, [r3, #4]
9001384e:	4798      	blx	r3
90013850:	b00a      	add	sp, #40	; 0x28
90013852:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
90013856:	2d02      	cmp	r5, #2
90013858:	d109      	bne.n	9001386e <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xae>
9001385a:	28ff      	cmp	r0, #255	; 0xff
9001385c:	d105      	bne.n	9001386a <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xaa>
9001385e:	f1bc 0f00 	cmp.w	ip, #0
90013862:	bf14      	ite	ne
90013864:	2340      	movne	r3, #64	; 0x40
90013866:	2320      	moveq	r3, #32
90013868:	e7be      	b.n	900137e8 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
9001386a:	2340      	movs	r3, #64	; 0x40
9001386c:	e7bc      	b.n	900137e8 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
9001386e:	28ff      	cmp	r0, #255	; 0xff
90013870:	d105      	bne.n	9001387e <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xbe>
90013872:	f1bc 0f00 	cmp.w	ip, #0
90013876:	bf14      	ite	ne
90013878:	2304      	movne	r3, #4
9001387a:	2301      	moveq	r3, #1
9001387c:	e7b4      	b.n	900137e8 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
9001387e:	2304      	movs	r3, #4
90013880:	e7b2      	b.n	900137e8 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
90013882:	bf00      	nop
90013884:	9002bcf0 	.word	0x9002bcf0

90013888 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb>:
90013888:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001388c:	b08b      	sub	sp, #44	; 0x2c
9001388e:	461d      	mov	r5, r3
90013890:	2400      	movs	r4, #0
90013892:	4688      	mov	r8, r1
90013894:	f89d 9058 	ldrb.w	r9, [sp, #88]	; 0x58
90013898:	4693      	mov	fp, r2
9001389a:	f89d 6060 	ldrb.w	r6, [sp, #96]	; 0x60
9001389e:	4607      	mov	r7, r0
900138a0:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
900138a4:	f8bd a05c 	ldrh.w	sl, [sp, #92]	; 0x5c
900138a8:	9404      	str	r4, [sp, #16]
900138aa:	bf14      	ite	ne
900138ac:	2308      	movne	r3, #8
900138ae:	2302      	moveq	r3, #2
900138b0:	fb05 b50a 	mla	r5, r5, sl, fp
900138b4:	e9cd 3401 	strd	r3, r4, [sp, #4]
900138b8:	f7ff ff06 	bl	900136c8 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
900138bc:	2e0b      	cmp	r6, #11
900138be:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
900138c2:	a901      	add	r1, sp, #4
900138c4:	bf98      	it	ls
900138c6:	4b13      	ldrls	r3, [pc, #76]	; (90013914 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0x8c>)
900138c8:	f8ad a01e 	strh.w	sl, [sp, #30]
900138cc:	bf98      	it	ls
900138ce:	5d9c      	ldrbls	r4, [r3, r6]
900138d0:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
900138d4:	10e4      	asrs	r4, r4, #3
900138d6:	f8cd 8010 	str.w	r8, [sp, #16]
900138da:	f8ad 3018 	strh.w	r3, [sp, #24]
900138de:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
900138e2:	fb04 0405 	mla	r4, r4, r5, r0
900138e6:	6878      	ldr	r0, [r7, #4]
900138e8:	f8ad 301a 	strh.w	r3, [sp, #26]
900138ec:	2300      	movs	r3, #0
900138ee:	9405      	str	r4, [sp, #20]
900138f0:	f8ad 301c 	strh.w	r3, [sp, #28]
900138f4:	f88d 9020 	strb.w	r9, [sp, #32]
900138f8:	f88d 2023 	strb.w	r2, [sp, #35]	; 0x23
900138fc:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
90013900:	f88d 6021 	strb.w	r6, [sp, #33]	; 0x21
90013904:	f88d 6022 	strb.w	r6, [sp, #34]	; 0x22
90013908:	6803      	ldr	r3, [r0, #0]
9001390a:	685b      	ldr	r3, [r3, #4]
9001390c:	4798      	blx	r3
9001390e:	b00b      	add	sp, #44	; 0x2c
90013910:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90013914:	9002bcf0 	.word	0x9002bcf0

90013918 <_ZNK8touchgfx3HAL13getDstAddressEttPt>:
90013918:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
9001391c:	461e      	mov	r6, r3
9001391e:	4b0a      	ldr	r3, [pc, #40]	; (90013948 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x30>)
90013920:	460f      	mov	r7, r1
90013922:	4690      	mov	r8, r2
90013924:	881d      	ldrh	r5, [r3, #0]
90013926:	f7ff fd23 	bl	90013370 <_ZN8touchgfx3HAL3lcdEv>
9001392a:	6803      	ldr	r3, [r0, #0]
9001392c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9001392e:	4798      	blx	r3
90013930:	280b      	cmp	r0, #11
90013932:	bf96      	itet	ls
90013934:	4b05      	ldrls	r3, [pc, #20]	; (9001394c <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x34>)
90013936:	2400      	movhi	r4, #0
90013938:	5c1c      	ldrbls	r4, [r3, r0]
9001393a:	fb08 7005 	mla	r0, r8, r5, r7
9001393e:	10e4      	asrs	r4, r4, #3
90013940:	fb04 6000 	mla	r0, r4, r0, r6
90013944:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
90013948:	240281e6 	.word	0x240281e6
9001394c:	9002bcf0 	.word	0x9002bcf0

90013950 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb>:
90013950:	b5f0      	push	{r4, r5, r6, r7, lr}
90013952:	b08b      	sub	sp, #44	; 0x2c
90013954:	461f      	mov	r7, r3
90013956:	4604      	mov	r4, r0
90013958:	4616      	mov	r6, r2
9001395a:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
9001395e:	2500      	movs	r5, #0
90013960:	e9cd 3101 	strd	r3, r1, [sp, #4]
90013964:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
90013968:	9504      	str	r5, [sp, #16]
9001396a:	f8ad 3018 	strh.w	r3, [sp, #24]
9001396e:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
90013972:	f8ad 301a 	strh.w	r3, [sp, #26]
90013976:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
9001397a:	f8ad 301c 	strh.w	r3, [sp, #28]
9001397e:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
90013982:	f88d 3020 	strb.w	r3, [sp, #32]
90013986:	f7ff fe9f 	bl	900136c8 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
9001398a:	463a      	mov	r2, r7
9001398c:	4631      	mov	r1, r6
9001398e:	4603      	mov	r3, r0
90013990:	4620      	mov	r0, r4
90013992:	f7ff ffc1 	bl	90013918 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
90013996:	4b0e      	ldr	r3, [pc, #56]	; (900139d0 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x80>)
90013998:	9005      	str	r0, [sp, #20]
9001399a:	881b      	ldrh	r3, [r3, #0]
9001399c:	f8ad 301e 	strh.w	r3, [sp, #30]
900139a0:	f7ff fce6 	bl	90013370 <_ZN8touchgfx3HAL3lcdEv>
900139a4:	6803      	ldr	r3, [r0, #0]
900139a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
900139a8:	4798      	blx	r3
900139aa:	9b13      	ldr	r3, [sp, #76]	; 0x4c
900139ac:	f88d 0022 	strb.w	r0, [sp, #34]	; 0x22
900139b0:	a901      	add	r1, sp, #4
900139b2:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
900139b6:	9304      	str	r3, [sp, #16]
900139b8:	6860      	ldr	r0, [r4, #4]
900139ba:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
900139be:	f88d 5024 	strb.w	r5, [sp, #36]	; 0x24
900139c2:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
900139c6:	6803      	ldr	r3, [r0, #0]
900139c8:	685b      	ldr	r3, [r3, #4]
900139ca:	4798      	blx	r3
900139cc:	b00b      	add	sp, #44	; 0x2c
900139ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
900139d0:	240281e6 	.word	0x240281e6

900139d4 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE>:
900139d4:	b5f0      	push	{r4, r5, r6, r7, lr}
900139d6:	b08d      	sub	sp, #52	; 0x34
900139d8:	2501      	movs	r5, #1
900139da:	4604      	mov	r4, r0
900139dc:	466b      	mov	r3, sp
900139de:	9503      	str	r5, [sp, #12]
900139e0:	e883 0006 	stmia.w	r3, {r1, r2}
900139e4:	2300      	movs	r3, #0
900139e6:	f8bd 6000 	ldrh.w	r6, [sp]
900139ea:	f8bd 7002 	ldrh.w	r7, [sp, #2]
900139ee:	9306      	str	r3, [sp, #24]
900139f0:	6803      	ldr	r3, [r0, #0]
900139f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
900139f4:	4798      	blx	r3
900139f6:	463a      	mov	r2, r7
900139f8:	4631      	mov	r1, r6
900139fa:	4603      	mov	r3, r0
900139fc:	4620      	mov	r0, r4
900139fe:	f7ff ff8b 	bl	90013918 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
90013a02:	6c63      	ldr	r3, [r4, #68]	; 0x44
90013a04:	9004      	str	r0, [sp, #16]
90013a06:	9307      	str	r3, [sp, #28]
90013a08:	f8bd 3004 	ldrh.w	r3, [sp, #4]
90013a0c:	f8ad 3020 	strh.w	r3, [sp, #32]
90013a10:	f8bd 3006 	ldrh.w	r3, [sp, #6]
90013a14:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
90013a18:	4b0e      	ldr	r3, [pc, #56]	; (90013a54 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x80>)
90013a1a:	881b      	ldrh	r3, [r3, #0]
90013a1c:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
90013a20:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
90013a24:	f7ff fca4 	bl	90013370 <_ZN8touchgfx3HAL3lcdEv>
90013a28:	6803      	ldr	r3, [r0, #0]
90013a2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90013a2c:	4798      	blx	r3
90013a2e:	23ff      	movs	r3, #255	; 0xff
90013a30:	f88d 0029 	strb.w	r0, [sp, #41]	; 0x29
90013a34:	a903      	add	r1, sp, #12
90013a36:	f88d 002a 	strb.w	r0, [sp, #42]	; 0x2a
90013a3a:	6860      	ldr	r0, [r4, #4]
90013a3c:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
90013a40:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
90013a44:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
90013a48:	6803      	ldr	r3, [r0, #0]
90013a4a:	685b      	ldr	r3, [r3, #4]
90013a4c:	4798      	blx	r3
90013a4e:	6c60      	ldr	r0, [r4, #68]	; 0x44
90013a50:	b00d      	add	sp, #52	; 0x34
90013a52:	bdf0      	pop	{r4, r5, r6, r7, pc}
90013a54:	240281e6 	.word	0x240281e6

90013a58 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm>:
90013a58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
90013a5c:	b08c      	sub	sp, #48	; 0x30
90013a5e:	461e      	mov	r6, r3
90013a60:	2300      	movs	r3, #0
90013a62:	4604      	mov	r4, r0
90013a64:	466d      	mov	r5, sp
90013a66:	9306      	str	r3, [sp, #24]
90013a68:	6803      	ldr	r3, [r0, #0]
90013a6a:	e885 0006 	stmia.w	r5, {r1, r2}
90013a6e:	2501      	movs	r5, #1
90013a70:	f8bd 7000 	ldrh.w	r7, [sp]
90013a74:	f8bd 8002 	ldrh.w	r8, [sp, #2]
90013a78:	9503      	str	r5, [sp, #12]
90013a7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90013a7c:	4798      	blx	r3
90013a7e:	4642      	mov	r2, r8
90013a80:	4639      	mov	r1, r7
90013a82:	4603      	mov	r3, r0
90013a84:	4620      	mov	r0, r4
90013a86:	f7ff ff47 	bl	90013918 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
90013a8a:	f8bd 3004 	ldrh.w	r3, [sp, #4]
90013a8e:	9004      	str	r0, [sp, #16]
90013a90:	f8ad 3020 	strh.w	r3, [sp, #32]
90013a94:	f8bd 3006 	ldrh.w	r3, [sp, #6]
90013a98:	9607      	str	r6, [sp, #28]
90013a9a:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
90013a9e:	4b10      	ldr	r3, [pc, #64]	; (90013ae0 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm+0x88>)
90013aa0:	881b      	ldrh	r3, [r3, #0]
90013aa2:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
90013aa6:	9b12      	ldr	r3, [sp, #72]	; 0x48
90013aa8:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
90013aac:	f7ff fc60 	bl	90013370 <_ZN8touchgfx3HAL3lcdEv>
90013ab0:	6803      	ldr	r3, [r0, #0]
90013ab2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90013ab4:	4798      	blx	r3
90013ab6:	23ff      	movs	r3, #255	; 0xff
90013ab8:	f88d 0029 	strb.w	r0, [sp, #41]	; 0x29
90013abc:	a903      	add	r1, sp, #12
90013abe:	f88d 002a 	strb.w	r0, [sp, #42]	; 0x2a
90013ac2:	6860      	ldr	r0, [r4, #4]
90013ac4:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
90013ac8:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
90013acc:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
90013ad0:	6803      	ldr	r3, [r0, #0]
90013ad2:	685b      	ldr	r3, [r3, #4]
90013ad4:	4798      	blx	r3
90013ad6:	4630      	mov	r0, r6
90013ad8:	b00c      	add	sp, #48	; 0x30
90013ada:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
90013ade:	bf00      	nop
90013ae0:	240281e6 	.word	0x240281e6

90013ae4 <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE>:
90013ae4:	b5f0      	push	{r4, r5, r6, r7, lr}
90013ae6:	b085      	sub	sp, #20
90013ae8:	4605      	mov	r5, r0
90013aea:	ac02      	add	r4, sp, #8
90013aec:	e884 0006 	stmia.w	r4, {r1, r2}
90013af0:	f8bd 6008 	ldrh.w	r6, [sp, #8]
90013af4:	f8bd 700a 	ldrh.w	r7, [sp, #10]
90013af8:	f7ff fde6 	bl	900136c8 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
90013afc:	4631      	mov	r1, r6
90013afe:	4603      	mov	r3, r0
90013b00:	463a      	mov	r2, r7
90013b02:	4628      	mov	r0, r5
90013b04:	f7ff ff08 	bl	90013918 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
90013b08:	4a05      	ldr	r2, [pc, #20]	; (90013b20 <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE+0x3c>)
90013b0a:	682b      	ldr	r3, [r5, #0]
90013b0c:	8812      	ldrh	r2, [r2, #0]
90013b0e:	9200      	str	r2, [sp, #0]
90013b10:	6ede      	ldr	r6, [r3, #108]	; 0x6c
90013b12:	4603      	mov	r3, r0
90013b14:	4628      	mov	r0, r5
90013b16:	e894 0006 	ldmia.w	r4, {r1, r2}
90013b1a:	47b0      	blx	r6
90013b1c:	b005      	add	sp, #20
90013b1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
90013b20:	240281e6 	.word	0x240281e6

90013b24 <_ZN8touchgfx3HAL16swapFrameBuffersEv>:
90013b24:	b570      	push	{r4, r5, r6, lr}
90013b26:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
90013b2a:	4604      	mov	r4, r0
90013b2c:	b19b      	cbz	r3, 90013b56 <_ZN8touchgfx3HAL16swapFrameBuffersEv+0x32>
90013b2e:	2002      	movs	r0, #2
90013b30:	f7ec fd88 	bl	90000644 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>
90013b34:	2300      	movs	r3, #0
90013b36:	4620      	mov	r0, r4
90013b38:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
90013b3c:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
90013b40:	6823      	ldr	r3, [r4, #0]
90013b42:	f8d3 50b8 	ldr.w	r5, [r3, #184]	; 0xb8
90013b46:	f7ff fdbf 	bl	900136c8 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
90013b4a:	4601      	mov	r1, r0
90013b4c:	4620      	mov	r0, r4
90013b4e:	462b      	mov	r3, r5
90013b50:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
90013b54:	4718      	bx	r3
90013b56:	bd70      	pop	{r4, r5, r6, pc}

90013b58 <_ZN8touchgfx3HAL12setMCUActiveEb>:
90013b58:	b570      	push	{r4, r5, r6, lr}
90013b5a:	4605      	mov	r5, r0
90013b5c:	460c      	mov	r4, r1
90013b5e:	2003      	movs	r0, #3
90013b60:	b149      	cbz	r1, 90013b76 <_ZN8touchgfx3HAL12setMCUActiveEb+0x1e>
90013b62:	f7ec fd07 	bl	90000574 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
90013b66:	6928      	ldr	r0, [r5, #16]
90013b68:	b168      	cbz	r0, 90013b86 <_ZN8touchgfx3HAL12setMCUActiveEb+0x2e>
90013b6a:	6803      	ldr	r3, [r0, #0]
90013b6c:	2101      	movs	r1, #1
90013b6e:	695b      	ldr	r3, [r3, #20]
90013b70:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
90013b74:	4718      	bx	r3
90013b76:	f7ec fd31 	bl	900005dc <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
90013b7a:	6928      	ldr	r0, [r5, #16]
90013b7c:	b118      	cbz	r0, 90013b86 <_ZN8touchgfx3HAL12setMCUActiveEb+0x2e>
90013b7e:	6803      	ldr	r3, [r0, #0]
90013b80:	4621      	mov	r1, r4
90013b82:	695b      	ldr	r3, [r3, #20]
90013b84:	e7f4      	b.n	90013b70 <_ZN8touchgfx3HAL12setMCUActiveEb+0x18>
90013b86:	bd70      	pop	{r4, r5, r6, pc}

90013b88 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>:
90013b88:	b538      	push	{r3, r4, r5, lr}
90013b8a:	f890 3078 	ldrb.w	r3, [r0, #120]	; 0x78
90013b8e:	4604      	mov	r4, r0
90013b90:	460d      	mov	r5, r1
90013b92:	428b      	cmp	r3, r1
90013b94:	d006      	beq.n	90013ba4 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1c>
90013b96:	6803      	ldr	r3, [r0, #0]
90013b98:	b929      	cbnz	r1, 90013ba6 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1e>
90013b9a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
90013b9e:	4798      	blx	r3
90013ba0:	f884 5078 	strb.w	r5, [r4, #120]	; 0x78
90013ba4:	bd38      	pop	{r3, r4, r5, pc}
90013ba6:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
90013baa:	e7f8      	b.n	90013b9e <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x16>

90013bac <_ZN8touchgfx3HAL15lockFrameBufferEv>:
90013bac:	4b0d      	ldr	r3, [pc, #52]	; (90013be4 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x38>)
90013bae:	b510      	push	{r4, lr}
90013bb0:	781b      	ldrb	r3, [r3, #0]
90013bb2:	4604      	mov	r4, r0
90013bb4:	b95b      	cbnz	r3, 90013bce <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
90013bb6:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
90013bba:	2b02      	cmp	r3, #2
90013bbc:	d007      	beq.n	90013bce <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
90013bbe:	6840      	ldr	r0, [r0, #4]
90013bc0:	f000 f918 	bl	90013df4 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>
90013bc4:	b118      	cbz	r0, 90013bce <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
90013bc6:	6862      	ldr	r2, [r4, #4]
90013bc8:	7a53      	ldrb	r3, [r2, #9]
90013bca:	2b00      	cmp	r3, #0
90013bcc:	d0fc      	beq.n	90013bc8 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x1c>
90013bce:	f7ed feeb 	bl	900019a8 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
90013bd2:	4620      	mov	r0, r4
90013bd4:	2100      	movs	r1, #0
90013bd6:	f7ff ffd7 	bl	90013b88 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
90013bda:	4620      	mov	r0, r4
90013bdc:	f7ff fd74 	bl	900136c8 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
90013be0:	bd10      	pop	{r4, pc}
90013be2:	bf00      	nop
90013be4:	240281ea 	.word	0x240281ea

90013be8 <_ZN8touchgfx3HAL33lockFrameBufferForRenderingMethodENS0_15RenderingMethodE>:
90013be8:	b570      	push	{r4, r5, r6, lr}
90013bea:	4604      	mov	r4, r0
90013bec:	6803      	ldr	r3, [r0, #0]
90013bee:	b919      	cbnz	r1, 90013bf8 <_ZN8touchgfx3HAL33lockFrameBufferForRenderingMethodENS0_15RenderingMethodE+0x10>
90013bf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
90013bf2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
90013bf6:	4718      	bx	r3
90013bf8:	2200      	movs	r2, #0
90013bfa:	f890 6078 	ldrb.w	r6, [r0, #120]	; 0x78
90013bfe:	f880 2078 	strb.w	r2, [r0, #120]	; 0x78
90013c02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
90013c04:	4798      	blx	r3
90013c06:	4605      	mov	r5, r0
90013c08:	f884 6078 	strb.w	r6, [r4, #120]	; 0x78
90013c0c:	4620      	mov	r0, r4
90013c0e:	2101      	movs	r1, #1
90013c10:	f7ff ffba 	bl	90013b88 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
90013c14:	4628      	mov	r0, r5
90013c16:	bd70      	pop	{r4, r5, r6, pc}

90013c18 <_ZN8touchgfx17LockFreeDMA_Queue7isEmptyEv>:
90013c18:	e9d0 2003 	ldrd	r2, r0, [r0, #12]
90013c1c:	1a13      	subs	r3, r2, r0
90013c1e:	4258      	negs	r0, r3
90013c20:	4158      	adcs	r0, r3
90013c22:	4770      	bx	lr

90013c24 <_ZN8touchgfx17LockFreeDMA_Queue6isFullEv>:
90013c24:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
90013c28:	1a9b      	subs	r3, r3, r2
90013c2a:	2b00      	cmp	r3, #0
90013c2c:	bfdc      	itt	le
90013c2e:	6882      	ldrle	r2, [r0, #8]
90013c30:	189b      	addle	r3, r3, r2
90013c32:	2b01      	cmp	r3, #1
90013c34:	bfcc      	ite	gt
90013c36:	2000      	movgt	r0, #0
90013c38:	2001      	movle	r0, #1
90013c3a:	4770      	bx	lr

90013c3c <_ZN8touchgfx17LockFreeDMA_Queue5firstEv>:
90013c3c:	6902      	ldr	r2, [r0, #16]
90013c3e:	6843      	ldr	r3, [r0, #4]
90013c40:	2024      	movs	r0, #36	; 0x24
90013c42:	fb00 3002 	mla	r0, r0, r2, r3
90013c46:	4770      	bx	lr

90013c48 <_ZN8touchgfx13DMA_Interface13seedExecutionEv>:
90013c48:	6803      	ldr	r3, [r0, #0]
90013c4a:	691b      	ldr	r3, [r3, #16]
90013c4c:	4718      	bx	r3

90013c4e <_ZN8touchgfx13DMA_Interface7executeEv>:
90013c4e:	2301      	movs	r3, #1
90013c50:	b570      	push	{r4, r5, r6, lr}
90013c52:	7203      	strb	r3, [r0, #8]
90013c54:	4604      	mov	r4, r0
90013c56:	6840      	ldr	r0, [r0, #4]
90013c58:	6803      	ldr	r3, [r0, #0]
90013c5a:	699b      	ldr	r3, [r3, #24]
90013c5c:	4798      	blx	r3
90013c5e:	6803      	ldr	r3, [r0, #0]
90013c60:	4605      	mov	r5, r0
90013c62:	2b40      	cmp	r3, #64	; 0x40
90013c64:	d00c      	beq.n	90013c80 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
90013c66:	d810      	bhi.n	90013c8a <_ZN8touchgfx13DMA_Interface7executeEv+0x3c>
90013c68:	2b04      	cmp	r3, #4
90013c6a:	d01d      	beq.n	90013ca8 <_ZN8touchgfx13DMA_Interface7executeEv+0x5a>
90013c6c:	d804      	bhi.n	90013c78 <_ZN8touchgfx13DMA_Interface7executeEv+0x2a>
90013c6e:	2b01      	cmp	r3, #1
90013c70:	d006      	beq.n	90013c80 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
90013c72:	2b02      	cmp	r3, #2
90013c74:	d02c      	beq.n	90013cd0 <_ZN8touchgfx13DMA_Interface7executeEv+0x82>
90013c76:	bd70      	pop	{r4, r5, r6, pc}
90013c78:	2b08      	cmp	r3, #8
90013c7a:	d01d      	beq.n	90013cb8 <_ZN8touchgfx13DMA_Interface7executeEv+0x6a>
90013c7c:	2b20      	cmp	r3, #32
90013c7e:	d1fa      	bne.n	90013c76 <_ZN8touchgfx13DMA_Interface7executeEv+0x28>
90013c80:	6823      	ldr	r3, [r4, #0]
90013c82:	4620      	mov	r0, r4
90013c84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
90013c86:	4798      	blx	r3
90013c88:	e013      	b.n	90013cb2 <_ZN8touchgfx13DMA_Interface7executeEv+0x64>
90013c8a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
90013c8e:	d0f7      	beq.n	90013c80 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
90013c90:	d804      	bhi.n	90013c9c <_ZN8touchgfx13DMA_Interface7executeEv+0x4e>
90013c92:	2b80      	cmp	r3, #128	; 0x80
90013c94:	d0f4      	beq.n	90013c80 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
90013c96:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
90013c9a:	e7f0      	b.n	90013c7e <_ZN8touchgfx13DMA_Interface7executeEv+0x30>
90013c9c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
90013ca0:	d0ee      	beq.n	90013c80 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
90013ca2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
90013ca6:	e7e5      	b.n	90013c74 <_ZN8touchgfx13DMA_Interface7executeEv+0x26>
90013ca8:	6823      	ldr	r3, [r4, #0]
90013caa:	7f01      	ldrb	r1, [r0, #28]
90013cac:	4620      	mov	r0, r4
90013cae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
90013cb0:	4798      	blx	r3
90013cb2:	6823      	ldr	r3, [r4, #0]
90013cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90013cb6:	e006      	b.n	90013cc6 <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
90013cb8:	6823      	ldr	r3, [r4, #0]
90013cba:	7f01      	ldrb	r1, [r0, #28]
90013cbc:	4620      	mov	r0, r4
90013cbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
90013cc0:	4798      	blx	r3
90013cc2:	6823      	ldr	r3, [r4, #0]
90013cc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
90013cc6:	4629      	mov	r1, r5
90013cc8:	4620      	mov	r0, r4
90013cca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
90013cce:	4718      	bx	r3
90013cd0:	6823      	ldr	r3, [r4, #0]
90013cd2:	4620      	mov	r0, r4
90013cd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
90013cd6:	4798      	blx	r3
90013cd8:	e7f3      	b.n	90013cc2 <_ZN8touchgfx13DMA_Interface7executeEv+0x74>

90013cda <_ZN8touchgfx13DMA_Interface11enableAlphaEh>:
90013cda:	4770      	bx	lr

90013cdc <_ZN8touchgfx13DMA_Interface12disableAlphaEv>:
90013cdc:	4770      	bx	lr

90013cde <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>:
90013cde:	4770      	bx	lr

90013ce0 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE>:
90013ce0:	e9d0 3203 	ldrd	r3, r2, [r0, #12]
90013ce4:	b510      	push	{r4, lr}
90013ce6:	1ad2      	subs	r2, r2, r3
90013ce8:	2a00      	cmp	r2, #0
90013cea:	bfdc      	itt	le
90013cec:	6884      	ldrle	r4, [r0, #8]
90013cee:	1912      	addle	r2, r2, r4
90013cf0:	2a01      	cmp	r2, #1
90013cf2:	dd16      	ble.n	90013d22 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x42>
90013cf4:	6842      	ldr	r2, [r0, #4]
90013cf6:	2424      	movs	r4, #36	; 0x24
90013cf8:	fb04 2303 	mla	r3, r4, r3, r2
90013cfc:	f101 0220 	add.w	r2, r1, #32
90013d00:	f851 4b04 	ldr.w	r4, [r1], #4
90013d04:	4291      	cmp	r1, r2
90013d06:	f843 4b04 	str.w	r4, [r3], #4
90013d0a:	d1f9      	bne.n	90013d00 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x20>
90013d0c:	780a      	ldrb	r2, [r1, #0]
90013d0e:	701a      	strb	r2, [r3, #0]
90013d10:	68c3      	ldr	r3, [r0, #12]
90013d12:	6882      	ldr	r2, [r0, #8]
90013d14:	f3bf 8f5b 	dmb	ish
90013d18:	3301      	adds	r3, #1
90013d1a:	429a      	cmp	r2, r3
90013d1c:	bfd8      	it	le
90013d1e:	1a9b      	suble	r3, r3, r2
90013d20:	60c3      	str	r3, [r0, #12]
90013d22:	bd10      	pop	{r4, pc}

90013d24 <_ZN8touchgfx17LockFreeDMA_Queue3popEv>:
90013d24:	6903      	ldr	r3, [r0, #16]
90013d26:	6882      	ldr	r2, [r0, #8]
90013d28:	f3bf 8f5b 	dmb	ish
90013d2c:	3301      	adds	r3, #1
90013d2e:	429a      	cmp	r2, r3
90013d30:	bfd8      	it	le
90013d32:	1a9b      	suble	r3, r3, r2
90013d34:	6103      	str	r3, [r0, #16]
90013d36:	4770      	bx	lr

90013d38 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE>:
90013d38:	b570      	push	{r4, r5, r6, lr}
90013d3a:	4604      	mov	r4, r0
90013d3c:	460e      	mov	r6, r1
90013d3e:	6860      	ldr	r0, [r4, #4]
90013d40:	6803      	ldr	r3, [r0, #0]
90013d42:	685b      	ldr	r3, [r3, #4]
90013d44:	4798      	blx	r3
90013d46:	2800      	cmp	r0, #0
90013d48:	d1f9      	bne.n	90013d3e <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x6>
90013d4a:	4d0d      	ldr	r5, [pc, #52]	; (90013d80 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x48>)
90013d4c:	6828      	ldr	r0, [r5, #0]
90013d4e:	6803      	ldr	r3, [r0, #0]
90013d50:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
90013d52:	4798      	blx	r3
90013d54:	f7ed fe36 	bl	900019c4 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>
90013d58:	6828      	ldr	r0, [r5, #0]
90013d5a:	2101      	movs	r1, #1
90013d5c:	f7ff ff14 	bl	90013b88 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
90013d60:	6860      	ldr	r0, [r4, #4]
90013d62:	4631      	mov	r1, r6
90013d64:	6803      	ldr	r3, [r0, #0]
90013d66:	689b      	ldr	r3, [r3, #8]
90013d68:	4798      	blx	r3
90013d6a:	6823      	ldr	r3, [r4, #0]
90013d6c:	4620      	mov	r0, r4
90013d6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90013d70:	4798      	blx	r3
90013d72:	6828      	ldr	r0, [r5, #0]
90013d74:	6803      	ldr	r3, [r0, #0]
90013d76:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
90013d7a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
90013d7c:	4718      	bx	r3
90013d7e:	bf00      	nop
90013d80:	240281ec 	.word	0x240281ec

90013d84 <_ZN8touchgfx13DMA_Interface27waitForFrameBufferSemaphoreEv>:
90013d84:	b508      	push	{r3, lr}
90013d86:	f7ed fe0f 	bl	900019a8 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
90013d8a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
90013d8e:	f7ed be13 	b.w	900019b8 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

90013d92 <_ZN8touchgfx17LockFreeDMA_QueueD0Ev>:
90013d92:	b510      	push	{r4, lr}
90013d94:	4604      	mov	r4, r0
90013d96:	2114      	movs	r1, #20
90013d98:	f013 fc2d 	bl	900275f6 <_ZdlPvj>
90013d9c:	4620      	mov	r0, r4
90013d9e:	bd10      	pop	{r4, pc}

90013da0 <_ZN8touchgfx13DMA_Interface16executeCompletedEv>:
90013da0:	b570      	push	{r4, r5, r6, lr}
90013da2:	4604      	mov	r4, r0
90013da4:	6840      	ldr	r0, [r0, #4]
90013da6:	6803      	ldr	r3, [r0, #0]
90013da8:	681b      	ldr	r3, [r3, #0]
90013daa:	4798      	blx	r3
90013dac:	4605      	mov	r5, r0
90013dae:	b930      	cbnz	r0, 90013dbe <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
90013db0:	7a23      	ldrb	r3, [r4, #8]
90013db2:	b123      	cbz	r3, 90013dbe <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
90013db4:	6860      	ldr	r0, [r4, #4]
90013db6:	6803      	ldr	r3, [r0, #0]
90013db8:	695b      	ldr	r3, [r3, #20]
90013dba:	4798      	blx	r3
90013dbc:	7225      	strb	r5, [r4, #8]
90013dbe:	6860      	ldr	r0, [r4, #4]
90013dc0:	6803      	ldr	r3, [r0, #0]
90013dc2:	681b      	ldr	r3, [r3, #0]
90013dc4:	4798      	blx	r3
90013dc6:	b928      	cbnz	r0, 90013dd4 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x34>
90013dc8:	6823      	ldr	r3, [r4, #0]
90013dca:	4620      	mov	r0, r4
90013dcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
90013dce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
90013dd2:	4718      	bx	r3
90013dd4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
90013dd8:	f7ed bdfc 	b.w	900019d4 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>

90013ddc <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>:
90013ddc:	b510      	push	{r4, lr}
90013dde:	6082      	str	r2, [r0, #8]
90013de0:	2200      	movs	r2, #0
90013de2:	4c03      	ldr	r4, [pc, #12]	; (90013df0 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi+0x14>)
90013de4:	e9c0 2203 	strd	r2, r2, [r0, #12]
90013de8:	e9c0 4100 	strd	r4, r1, [r0]
90013dec:	bd10      	pop	{r4, pc}
90013dee:	bf00      	nop
90013df0:	9002bd04 	.word	0x9002bd04

90013df4 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>:
90013df4:	6840      	ldr	r0, [r0, #4]
90013df6:	6803      	ldr	r3, [r0, #0]
90013df8:	681b      	ldr	r3, [r3, #0]
90013dfa:	4718      	bx	r3

90013dfc <_ZN8touchgfx13PainterRGB5658setColorENS_9colortypeE>:
90013dfc:	094a      	lsrs	r2, r1, #5
90013dfe:	4b06      	ldr	r3, [pc, #24]	; (90013e18 <_ZN8touchgfx13PainterRGB5658setColorENS_9colortypeE+0x1c>)
90013e00:	60c1      	str	r1, [r0, #12]
90013e02:	ea03 2311 	and.w	r3, r3, r1, lsr #8
90013e06:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
90013e0a:	f3c1 01c4 	ubfx	r1, r1, #3, #5
90013e0e:	4313      	orrs	r3, r2
90013e10:	4319      	orrs	r1, r3
90013e12:	8201      	strh	r1, [r0, #16]
90013e14:	4770      	bx	lr
90013e16:	bf00      	nop
90013e18:	fffff800 	.word	0xfffff800

90013e1c <_ZThn8_N8touchgfx13PainterRGB5658setColorENS_9colortypeE>:
90013e1c:	f1a0 0008 	sub.w	r0, r0, #8
90013e20:	e7ec      	b.n	90013dfc <_ZN8touchgfx13PainterRGB5658setColorENS_9colortypeE>
90013e22:	bf00      	nop

90013e24 <_ZNK8touchgfx13PainterRGB56518getRenderingMethodEv>:
90013e24:	b508      	push	{r3, lr}
90013e26:	4b05      	ldr	r3, [pc, #20]	; (90013e3c <_ZNK8touchgfx13PainterRGB56518getRenderingMethodEv+0x18>)
90013e28:	6818      	ldr	r0, [r3, #0]
90013e2a:	6803      	ldr	r3, [r0, #0]
90013e2c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
90013e30:	4798      	blx	r3
90013e32:	1e43      	subs	r3, r0, #1
90013e34:	4258      	negs	r0, r3
90013e36:	4158      	adcs	r0, r3
90013e38:	bd08      	pop	{r3, pc}
90013e3a:	bf00      	nop
90013e3c:	240281ec 	.word	0x240281ec

90013e40 <_ZN8touchgfx13PainterRGB565D1Ev>:
90013e40:	4770      	bx	lr

90013e42 <_ZThn8_N8touchgfx13PainterRGB565D1Ev>:
90013e42:	3808      	subs	r0, #8
90013e44:	4770      	bx	lr

90013e46 <_ZNK8touchgfx13PainterRGB5655paintEPhssssh>:
90013e46:	b430      	push	{r4, r5}
90013e48:	eb01 0442 	add.w	r4, r1, r2, lsl #1
90013e4c:	f9bd 500c 	ldrsh.w	r5, [sp, #12]
90013e50:	8a02      	ldrh	r2, [r0, #16]
90013e52:	f89d 3010 	ldrb.w	r3, [sp, #16]
90013e56:	4629      	mov	r1, r5
90013e58:	9202      	str	r2, [sp, #8]
90013e5a:	68c2      	ldr	r2, [r0, #12]
90013e5c:	4620      	mov	r0, r4
90013e5e:	bc30      	pop	{r4, r5}
90013e60:	f7ee b864 	b.w	90001f2c <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm>

90013e64 <_ZNK8touchgfx13PainterRGB5658tearDownEv>:
90013e64:	f7ee b858 	b.w	90001f18 <_ZN8touchgfx5paint8tearDownEv>

90013e68 <_ZN8touchgfx13PainterRGB565D0Ev>:
90013e68:	b510      	push	{r4, lr}
90013e6a:	4604      	mov	r4, r0
90013e6c:	2114      	movs	r1, #20
90013e6e:	f013 fbc2 	bl	900275f6 <_ZdlPvj>
90013e72:	4620      	mov	r0, r4
90013e74:	bd10      	pop	{r4, pc}

90013e76 <_ZThn8_N8touchgfx13PainterRGB565D0Ev>:
90013e76:	f1a0 0008 	sub.w	r0, r0, #8
90013e7a:	e7f5      	b.n	90013e68 <_ZN8touchgfx13PainterRGB565D0Ev>

90013e7c <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE>:
90013e7c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
90013e7e:	6803      	ldr	r3, [r0, #0]
90013e80:	460d      	mov	r5, r1
90013e82:	4604      	mov	r4, r0
90013e84:	4601      	mov	r1, r0
90013e86:	6e9b      	ldr	r3, [r3, #104]	; 0x68
90013e88:	a802      	add	r0, sp, #8
90013e8a:	4798      	blx	r3
90013e8c:	6828      	ldr	r0, [r5, #0]
90013e8e:	6869      	ldr	r1, [r5, #4]
90013e90:	466b      	mov	r3, sp
90013e92:	c303      	stmia	r3!, {r0, r1}
90013e94:	4668      	mov	r0, sp
90013e96:	4619      	mov	r1, r3
90013e98:	f7fe ff8c 	bl	90012db4 <_ZN8touchgfx4RectaNERKS0_>
90013e9c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
90013e9e:	b1a8      	cbz	r0, 90013ecc <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x50>
90013ea0:	6803      	ldr	r3, [r0, #0]
90013ea2:	1d21      	adds	r1, r4, #4
90013ea4:	68db      	ldr	r3, [r3, #12]
90013ea6:	4798      	blx	r3
90013ea8:	b180      	cbz	r0, 90013ecc <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x50>
90013eaa:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
90013eae:	2b00      	cmp	r3, #0
90013eb0:	dd0c      	ble.n	90013ecc <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x50>
90013eb2:	f9bd 5006 	ldrsh.w	r5, [sp, #6]
90013eb6:	2d00      	cmp	r5, #0
90013eb8:	dd08      	ble.n	90013ecc <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x50>
90013eba:	4a2d      	ldr	r2, [pc, #180]	; (90013f70 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xf4>)
90013ebc:	7812      	ldrb	r2, [r2, #0]
90013ebe:	b13a      	cbz	r2, 90013ed0 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x54>
90013ec0:	2a01      	cmp	r2, #1
90013ec2:	d02d      	beq.n	90013f20 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xa4>
90013ec4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
90013ec6:	6803      	ldr	r3, [r0, #0]
90013ec8:	691b      	ldr	r3, [r3, #16]
90013eca:	4798      	blx	r3
90013ecc:	b004      	add	sp, #16
90013ece:	bd70      	pop	{r4, r5, r6, pc}
90013ed0:	f8bd 3002 	ldrh.w	r3, [sp, #2]
90013ed4:	441d      	add	r5, r3
90013ed6:	b2ad      	uxth	r5, r5
90013ed8:	b22e      	sxth	r6, r5
90013eda:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
90013ede:	42b3      	cmp	r3, r6
90013ee0:	daf0      	bge.n	90013ec4 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
90013ee2:	6823      	ldr	r3, [r4, #0]
90013ee4:	4669      	mov	r1, sp
90013ee6:	4620      	mov	r0, r4
90013ee8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
90013eea:	4798      	blx	r3
90013eec:	b940      	cbnz	r0, 90013f00 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x84>
90013eee:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
90013ef2:	2b01      	cmp	r3, #1
90013ef4:	d004      	beq.n	90013f00 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x84>
90013ef6:	3301      	adds	r3, #1
90013ef8:	105b      	asrs	r3, r3, #1
90013efa:	f8ad 3006 	strh.w	r3, [sp, #6]
90013efe:	e7f0      	b.n	90013ee2 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x66>
90013f00:	f8bd 2006 	ldrh.w	r2, [sp, #6]
90013f04:	f8bd 3002 	ldrh.w	r3, [sp, #2]
90013f08:	4413      	add	r3, r2
90013f0a:	b29b      	uxth	r3, r3
90013f0c:	441a      	add	r2, r3
90013f0e:	f8ad 3002 	strh.w	r3, [sp, #2]
90013f12:	b212      	sxth	r2, r2
90013f14:	4296      	cmp	r6, r2
90013f16:	dae0      	bge.n	90013eda <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x5e>
90013f18:	1aeb      	subs	r3, r5, r3
90013f1a:	f8ad 3006 	strh.w	r3, [sp, #6]
90013f1e:	e7dc      	b.n	90013eda <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x5e>
90013f20:	f8bd 5000 	ldrh.w	r5, [sp]
90013f24:	441d      	add	r5, r3
90013f26:	b2ad      	uxth	r5, r5
90013f28:	b22e      	sxth	r6, r5
90013f2a:	f9bd 3000 	ldrsh.w	r3, [sp]
90013f2e:	42b3      	cmp	r3, r6
90013f30:	dac8      	bge.n	90013ec4 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
90013f32:	6823      	ldr	r3, [r4, #0]
90013f34:	4669      	mov	r1, sp
90013f36:	4620      	mov	r0, r4
90013f38:	6edb      	ldr	r3, [r3, #108]	; 0x6c
90013f3a:	4798      	blx	r3
90013f3c:	b940      	cbnz	r0, 90013f50 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xd4>
90013f3e:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
90013f42:	2b01      	cmp	r3, #1
90013f44:	d004      	beq.n	90013f50 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xd4>
90013f46:	3301      	adds	r3, #1
90013f48:	105b      	asrs	r3, r3, #1
90013f4a:	f8ad 3004 	strh.w	r3, [sp, #4]
90013f4e:	e7f0      	b.n	90013f32 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xb6>
90013f50:	f8bd 2004 	ldrh.w	r2, [sp, #4]
90013f54:	f8bd 3000 	ldrh.w	r3, [sp]
90013f58:	4413      	add	r3, r2
90013f5a:	b29b      	uxth	r3, r3
90013f5c:	441a      	add	r2, r3
90013f5e:	f8ad 3000 	strh.w	r3, [sp]
90013f62:	b212      	sxth	r2, r2
90013f64:	4296      	cmp	r6, r2
90013f66:	dae0      	bge.n	90013f2a <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xae>
90013f68:	1aeb      	subs	r3, r5, r3
90013f6a:	f8ad 3004 	strh.w	r3, [sp, #4]
90013f6e:	e7dc      	b.n	90013f2a <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xae>
90013f70:	240281e4 	.word	0x240281e4

90013f74 <_ZNK8touchgfx12CanvasWidget10invalidateEv>:
90013f74:	b51f      	push	{r0, r1, r2, r3, r4, lr}
90013f76:	6803      	ldr	r3, [r0, #0]
90013f78:	4604      	mov	r4, r0
90013f7a:	4601      	mov	r1, r0
90013f7c:	4668      	mov	r0, sp
90013f7e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
90013f80:	4798      	blx	r3
90013f82:	2100      	movs	r1, #0
90013f84:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
90013f88:	4668      	mov	r0, sp
90013f8a:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
90013f8e:	9102      	str	r1, [sp, #8]
90013f90:	a902      	add	r1, sp, #8
90013f92:	f8ad 200c 	strh.w	r2, [sp, #12]
90013f96:	f8ad 300e 	strh.w	r3, [sp, #14]
90013f9a:	f7fe ff0b 	bl	90012db4 <_ZN8touchgfx4RectaNERKS0_>
90013f9e:	6823      	ldr	r3, [r4, #0]
90013fa0:	4669      	mov	r1, sp
90013fa2:	4620      	mov	r0, r4
90013fa4:	691b      	ldr	r3, [r3, #16]
90013fa6:	4798      	blx	r3
90013fa8:	b004      	add	sp, #16
90013faa:	bd10      	pop	{r4, pc}

90013fac <_ZN8touchgfx12CanvasWidgetC1Ev>:
90013fac:	2101      	movs	r1, #1
90013fae:	2200      	movs	r2, #0
90013fb0:	f880 1025 	strb.w	r1, [r0, #37]	; 0x25
90013fb4:	490a      	ldr	r1, [pc, #40]	; (90013fe0 <_ZN8touchgfx12CanvasWidgetC1Ev+0x34>)
90013fb6:	8082      	strh	r2, [r0, #4]
90013fb8:	6001      	str	r1, [r0, #0]
90013fba:	21ff      	movs	r1, #255	; 0xff
90013fbc:	80c2      	strh	r2, [r0, #6]
90013fbe:	8102      	strh	r2, [r0, #8]
90013fc0:	8142      	strh	r2, [r0, #10]
90013fc2:	8182      	strh	r2, [r0, #12]
90013fc4:	81c2      	strh	r2, [r0, #14]
90013fc6:	8202      	strh	r2, [r0, #16]
90013fc8:	8242      	strh	r2, [r0, #18]
90013fca:	61c2      	str	r2, [r0, #28]
90013fcc:	8402      	strh	r2, [r0, #32]
90013fce:	8442      	strh	r2, [r0, #34]	; 0x22
90013fd0:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
90013fd4:	f880 1026 	strb.w	r1, [r0, #38]	; 0x26
90013fd8:	6282      	str	r2, [r0, #40]	; 0x28
90013fda:	e9c0 2205 	strd	r2, r2, [r0, #20]
90013fde:	4770      	bx	lr
90013fe0:	9002bd60 	.word	0x9002bd60

90013fe4 <_ZN8touchgfx17AbstractDataGraph9setScaleXEib>:
90013fe4:	6301      	str	r1, [r0, #48]	; 0x30
90013fe6:	4770      	bx	lr

90013fe8 <_ZNK8touchgfx17AbstractDataGraph9getScaleXEv>:
90013fe8:	6b00      	ldr	r0, [r0, #48]	; 0x30
90013fea:	4770      	bx	lr

90013fec <_ZN8touchgfx17AbstractDataGraph9setScaleYEib>:
90013fec:	6341      	str	r1, [r0, #52]	; 0x34
90013fee:	4770      	bx	lr

90013ff0 <_ZNK8touchgfx17AbstractDataGraph9getScaleYEv>:
90013ff0:	6b40      	ldr	r0, [r0, #52]	; 0x34
90013ff2:	4770      	bx	lr

90013ff4 <_ZN8touchgfx16DynamicDataGraph14beforeAddValueEv>:
90013ff4:	4770      	bx	lr

90013ff6 <_ZNK8touchgfx16DynamicDataGraph18indexToGlobalIndexEs>:
90013ff6:	4608      	mov	r0, r1
90013ff8:	4770      	bx	lr

90013ffa <_ZN8touchgfx17AbstractDataGraph15handleDragEventERKNS_9DragEventE>:
90013ffa:	b530      	push	{r4, r5, lr}
90013ffc:	460d      	mov	r5, r1
90013ffe:	8f83      	ldrh	r3, [r0, #60]	; 0x3c
90014000:	8949      	ldrh	r1, [r1, #10]
90014002:	b085      	sub	sp, #20
90014004:	4604      	mov	r4, r0
90014006:	1ac9      	subs	r1, r1, r3
90014008:	6803      	ldr	r3, [r0, #0]
9001400a:	f10d 0206 	add.w	r2, sp, #6
9001400e:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
90014012:	b209      	sxth	r1, r1
90014014:	4798      	blx	r3
90014016:	b1a0      	cbz	r0, 90014042 <_ZN8touchgfx17AbstractDataGraph15handleDragEventERKNS_9DragEventE+0x48>
90014018:	792b      	ldrb	r3, [r5, #4]
9001401a:	b993      	cbnz	r3, 90014042 <_ZN8touchgfx17AbstractDataGraph15handleDragEventERKNS_9DragEventE+0x48>
9001401c:	f8d4 0128 	ldr.w	r0, [r4, #296]	; 0x128
90014020:	b178      	cbz	r0, 90014042 <_ZN8touchgfx17AbstractDataGraph15handleDragEventERKNS_9DragEventE+0x48>
90014022:	6803      	ldr	r3, [r0, #0]
90014024:	68db      	ldr	r3, [r3, #12]
90014026:	4798      	blx	r3
90014028:	b158      	cbz	r0, 90014042 <_ZN8touchgfx17AbstractDataGraph15handleDragEventERKNS_9DragEventE+0x48>
9001402a:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
9001402e:	aa02      	add	r2, sp, #8
90014030:	f8d4 0128 	ldr.w	r0, [r4, #296]	; 0x128
90014034:	4621      	mov	r1, r4
90014036:	f8ad 3008 	strh.w	r3, [sp, #8]
9001403a:	9503      	str	r5, [sp, #12]
9001403c:	6803      	ldr	r3, [r0, #0]
9001403e:	689b      	ldr	r3, [r3, #8]
90014040:	4798      	blx	r3
90014042:	b005      	add	sp, #20
90014044:	bd30      	pop	{r4, r5, pc}

90014046 <_ZN8touchgfx17AbstractDataGraph20setGraphRangeXScaledEii>:
90014046:	428a      	cmp	r2, r1
90014048:	bfbc      	itt	lt
9001404a:	460b      	movlt	r3, r1
9001404c:	4611      	movlt	r1, r2
9001404e:	b510      	push	{r4, lr}
90014050:	bfb8      	it	lt
90014052:	461a      	movlt	r2, r3
90014054:	f8d0 312c 	ldr.w	r3, [r0, #300]	; 0x12c
90014058:	4604      	mov	r4, r0
9001405a:	428b      	cmp	r3, r1
9001405c:	d103      	bne.n	90014066 <_ZN8touchgfx17AbstractDataGraph20setGraphRangeXScaledEii+0x20>
9001405e:	f8d0 3130 	ldr.w	r3, [r0, #304]	; 0x130
90014062:	4293      	cmp	r3, r2
90014064:	d011      	beq.n	9001408a <_ZN8touchgfx17AbstractDataGraph20setGraphRangeXScaledEii+0x44>
90014066:	f8c4 112c 	str.w	r1, [r4, #300]	; 0x12c
9001406a:	f104 00bc 	add.w	r0, r4, #188	; 0xbc
9001406e:	f8c4 2130 	str.w	r2, [r4, #304]	; 0x130
90014072:	f005 f8d2 	bl	9001921a <_ZNK8touchgfx8Drawable10invalidateEv>
90014076:	f104 0038 	add.w	r0, r4, #56	; 0x38
9001407a:	f005 f8ce 	bl	9001921a <_ZNK8touchgfx8Drawable10invalidateEv>
9001407e:	f104 00e8 	add.w	r0, r4, #232	; 0xe8
90014082:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
90014086:	f005 b8c8 	b.w	9001921a <_ZNK8touchgfx8Drawable10invalidateEv>
9001408a:	bd10      	pop	{r4, pc}

9001408c <_ZN8touchgfx17AbstractDataGraph20setGraphRangeYScaledEii>:
9001408c:	428a      	cmp	r2, r1
9001408e:	bfbc      	itt	lt
90014090:	460b      	movlt	r3, r1
90014092:	4611      	movlt	r1, r2
90014094:	b510      	push	{r4, lr}
90014096:	bfb8      	it	lt
90014098:	461a      	movlt	r2, r3
9001409a:	f8d0 3134 	ldr.w	r3, [r0, #308]	; 0x134
9001409e:	4604      	mov	r4, r0
900140a0:	428b      	cmp	r3, r1
900140a2:	d103      	bne.n	900140ac <_ZN8touchgfx17AbstractDataGraph20setGraphRangeYScaledEii+0x20>
900140a4:	f8d0 3138 	ldr.w	r3, [r0, #312]	; 0x138
900140a8:	4293      	cmp	r3, r2
900140aa:	d011      	beq.n	900140d0 <_ZN8touchgfx17AbstractDataGraph20setGraphRangeYScaledEii+0x44>
900140ac:	f8c4 1134 	str.w	r1, [r4, #308]	; 0x134
900140b0:	f104 0064 	add.w	r0, r4, #100	; 0x64
900140b4:	f8c4 2138 	str.w	r2, [r4, #312]	; 0x138
900140b8:	f005 f8af 	bl	9001921a <_ZNK8touchgfx8Drawable10invalidateEv>
900140bc:	f104 0038 	add.w	r0, r4, #56	; 0x38
900140c0:	f005 f8ab 	bl	9001921a <_ZNK8touchgfx8Drawable10invalidateEv>
900140c4:	f104 0090 	add.w	r0, r4, #144	; 0x90
900140c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
900140cc:	f005 b8a5 	b.w	9001921a <_ZNK8touchgfx8Drawable10invalidateEv>
900140d0:	bd10      	pop	{r4, pc}

900140d2 <_ZN8touchgfx17AbstractDataGraph5clearEv>:
900140d2:	2300      	movs	r3, #0
900140d4:	3038      	adds	r0, #56	; 0x38
900140d6:	f8a0 30e6 	strh.w	r3, [r0, #230]	; 0xe6
900140da:	f005 b89e 	b.w	9001921a <_ZNK8touchgfx8Drawable10invalidateEv>

900140de <_ZN8touchgfx16DynamicDataGraph24setGraphRangeYAutoScaledEbi>:
900140de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
900140e2:	f9b0 311e 	ldrsh.w	r3, [r0, #286]	; 0x11e
900140e6:	4605      	mov	r5, r0
900140e8:	4688      	mov	r8, r1
900140ea:	4617      	mov	r7, r2
900140ec:	2b00      	cmp	r3, #0
900140ee:	d03e      	beq.n	9001416e <_ZN8touchgfx16DynamicDataGraph24setGraphRangeYAutoScaledEbi+0x90>
900140f0:	6803      	ldr	r3, [r0, #0]
900140f2:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
900140f6:	4798      	blx	r3
900140f8:	682b      	ldr	r3, [r5, #0]
900140fa:	4604      	mov	r4, r0
900140fc:	4628      	mov	r0, r5
900140fe:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
90014102:	4798      	blx	r3
90014104:	4284      	cmp	r4, r0
90014106:	f9b5 611e 	ldrsh.w	r6, [r5, #286]	; 0x11e
9001410a:	bfc2      	ittt	gt
9001410c:	4623      	movgt	r3, r4
9001410e:	4604      	movgt	r4, r0
90014110:	4618      	movgt	r0, r3
90014112:	ea24 73e4 	bic.w	r3, r4, r4, asr #31
90014116:	42b3      	cmp	r3, r6
90014118:	da29      	bge.n	9001416e <_ZN8touchgfx16DynamicDataGraph24setGraphRangeYAutoScaledEbi+0x90>
9001411a:	42b0      	cmp	r0, r6
9001411c:	bfa8      	it	ge
9001411e:	4630      	movge	r0, r6
90014120:	2800      	cmp	r0, #0
90014122:	db24      	blt.n	9001416e <_ZN8touchgfx16DynamicDataGraph24setGraphRangeYAutoScaledEbi+0x90>
90014124:	f1b8 0f00 	cmp.w	r8, #0
90014128:	d11e      	bne.n	90014168 <_ZN8touchgfx16DynamicDataGraph24setGraphRangeYAutoScaledEbi+0x8a>
9001412a:	f8d5 2144 	ldr.w	r2, [r5, #324]	; 0x144
9001412e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
90014132:	460c      	mov	r4, r1
90014134:	009a      	lsls	r2, r3, #2
90014136:	4298      	cmp	r0, r3
90014138:	dd0b      	ble.n	90014152 <_ZN8touchgfx16DynamicDataGraph24setGraphRangeYAutoScaledEbi+0x74>
9001413a:	f8d5 6144 	ldr.w	r6, [r5, #324]	; 0x144
9001413e:	3301      	adds	r3, #1
90014140:	58b6      	ldr	r6, [r6, r2]
90014142:	3204      	adds	r2, #4
90014144:	42b1      	cmp	r1, r6
90014146:	bfa8      	it	ge
90014148:	4631      	movge	r1, r6
9001414a:	42b4      	cmp	r4, r6
9001414c:	bfb8      	it	lt
9001414e:	4634      	movlt	r4, r6
90014150:	e7f1      	b.n	90014136 <_ZN8touchgfx16DynamicDataGraph24setGraphRangeYAutoScaledEbi+0x58>
90014152:	1bc9      	subs	r1, r1, r7
90014154:	193a      	adds	r2, r7, r4
90014156:	4291      	cmp	r1, r2
90014158:	d009      	beq.n	9001416e <_ZN8touchgfx16DynamicDataGraph24setGraphRangeYAutoScaledEbi+0x90>
9001415a:	682b      	ldr	r3, [r5, #0]
9001415c:	4628      	mov	r0, r5
9001415e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
90014162:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
90014166:	4718      	bx	r3
90014168:	427c      	negs	r4, r7
9001416a:	4639      	mov	r1, r7
9001416c:	e7e2      	b.n	90014134 <_ZN8touchgfx16DynamicDataGraph24setGraphRangeYAutoScaledEbi+0x56>
9001416e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

90014172 <_ZN8touchgfx17AbstractDataGraph16handleClickEventERKNS_10ClickEventE>:
90014172:	b530      	push	{r4, r5, lr}
90014174:	790b      	ldrb	r3, [r1, #4]
90014176:	b085      	sub	sp, #20
90014178:	4604      	mov	r4, r0
9001417a:	460d      	mov	r5, r1
9001417c:	2b02      	cmp	r3, #2
9001417e:	d020      	beq.n	900141c2 <_ZN8touchgfx17AbstractDataGraph16handleClickEventERKNS_10ClickEventE+0x50>
90014180:	8f83      	ldrh	r3, [r0, #60]	; 0x3c
90014182:	f10d 0206 	add.w	r2, sp, #6
90014186:	88c9      	ldrh	r1, [r1, #6]
90014188:	1ac9      	subs	r1, r1, r3
9001418a:	6803      	ldr	r3, [r0, #0]
9001418c:	b209      	sxth	r1, r1
9001418e:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
90014192:	4798      	blx	r3
90014194:	b1a8      	cbz	r0, 900141c2 <_ZN8touchgfx17AbstractDataGraph16handleClickEventERKNS_10ClickEventE+0x50>
90014196:	792b      	ldrb	r3, [r5, #4]
90014198:	2b01      	cmp	r3, #1
9001419a:	d812      	bhi.n	900141c2 <_ZN8touchgfx17AbstractDataGraph16handleClickEventERKNS_10ClickEventE+0x50>
9001419c:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
900141a0:	b178      	cbz	r0, 900141c2 <_ZN8touchgfx17AbstractDataGraph16handleClickEventERKNS_10ClickEventE+0x50>
900141a2:	6803      	ldr	r3, [r0, #0]
900141a4:	68db      	ldr	r3, [r3, #12]
900141a6:	4798      	blx	r3
900141a8:	b158      	cbz	r0, 900141c2 <_ZN8touchgfx17AbstractDataGraph16handleClickEventERKNS_10ClickEventE+0x50>
900141aa:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
900141ae:	aa02      	add	r2, sp, #8
900141b0:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
900141b4:	4621      	mov	r1, r4
900141b6:	f8ad 3008 	strh.w	r3, [sp, #8]
900141ba:	9503      	str	r5, [sp, #12]
900141bc:	6803      	ldr	r3, [r0, #0]
900141be:	689b      	ldr	r3, [r3, #8]
900141c0:	4798      	blx	r3
900141c2:	b005      	add	sp, #20
900141c4:	bd30      	pop	{r4, r5, pc}

900141c6 <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_>:
900141c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
900141ca:	4604      	mov	r4, r0
900141cc:	f9b0 011e 	ldrsh.w	r0, [r0, #286]	; 0x11e
900141d0:	4690      	mov	r8, r2
900141d2:	461f      	mov	r7, r3
900141d4:	9e06      	ldr	r6, [sp, #24]
900141d6:	b928      	cbnz	r0, 900141e4 <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x1e>
900141d8:	f64f 73ff 	movw	r3, #65535	; 0xffff
900141dc:	8033      	strh	r3, [r6, #0]
900141de:	803b      	strh	r3, [r7, #0]
900141e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
900141e4:	f8b4 2118 	ldrh.w	r2, [r4, #280]	; 0x118
900141e8:	f9b4 0116 	ldrsh.w	r0, [r4, #278]	; 0x116
900141ec:	1883      	adds	r3, r0, r2
900141ee:	f8b4 2040 	ldrh.w	r2, [r4, #64]	; 0x40
900141f2:	1ad2      	subs	r2, r2, r3
900141f4:	b212      	sxth	r2, r2
900141f6:	2a01      	cmp	r2, #1
900141f8:	dc07      	bgt.n	9001420a <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x44>
900141fa:	2300      	movs	r3, #0
900141fc:	803b      	strh	r3, [r7, #0]
900141fe:	f8b4 311e 	ldrh.w	r3, [r4, #286]	; 0x11e
90014202:	3b01      	subs	r3, #1
90014204:	8033      	strh	r3, [r6, #0]
90014206:	2001      	movs	r0, #1
90014208:	e7ea      	b.n	900141e0 <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x1a>
9001420a:	1a08      	subs	r0, r1, r0
9001420c:	f8d4 3130 	ldr.w	r3, [r4, #304]	; 0x130
90014210:	f8d4 112c 	ldr.w	r1, [r4, #300]	; 0x12c
90014214:	0140      	lsls	r0, r0, #5
90014216:	6b25      	ldr	r5, [r4, #48]	; 0x30
90014218:	1a5b      	subs	r3, r3, r1
9001421a:	d459      	bmi.n	900142d0 <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x10a>
9001421c:	eb05 0343 	add.w	r3, r5, r3, lsl #1
90014220:	fb93 f1f5 	sdiv	r1, r3, r5
90014224:	2302      	movs	r3, #2
90014226:	fb91 f1f3 	sdiv	r1, r1, r3
9001422a:	3a01      	subs	r2, #1
9001422c:	f005 f9bc 	bl	900195a8 <_ZN8touchgfx6muldivElll>
90014230:	f8d4 112c 	ldr.w	r1, [r4, #300]	; 0x12c
90014234:	f8d4 c030 	ldr.w	ip, [r4, #48]	; 0x30
90014238:	2900      	cmp	r1, #0
9001423a:	db55      	blt.n	900142e8 <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x122>
9001423c:	eb0c 0341 	add.w	r3, ip, r1, lsl #1
90014240:	2502      	movs	r5, #2
90014242:	fb93 f3fc 	sdiv	r3, r3, ip
90014246:	fb93 f3f5 	sdiv	r3, r3, r5
9001424a:	eb00 1543 	add.w	r5, r0, r3, lsl #5
9001424e:	f8d4 2130 	ldr.w	r2, [r4, #304]	; 0x130
90014252:	f9b4 3116 	ldrsh.w	r3, [r4, #278]	; 0x116
90014256:	1a52      	subs	r2, r2, r1
90014258:	eba8 0003 	sub.w	r0, r8, r3
9001425c:	ea4f 1040 	mov.w	r0, r0, lsl #5
90014260:	d44e      	bmi.n	90014300 <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x13a>
90014262:	eb0c 0242 	add.w	r2, ip, r2, lsl #1
90014266:	fb92 f1fc 	sdiv	r1, r2, ip
9001426a:	2202      	movs	r2, #2
9001426c:	fb91 f1f2 	sdiv	r1, r1, r2
90014270:	f8b4 2118 	ldrh.w	r2, [r4, #280]	; 0x118
90014274:	4413      	add	r3, r2
90014276:	f8b4 2040 	ldrh.w	r2, [r4, #64]	; 0x40
9001427a:	1ad2      	subs	r2, r2, r3
9001427c:	b212      	sxth	r2, r2
9001427e:	3a01      	subs	r2, #1
90014280:	f005 f992 	bl	900195a8 <_ZN8touchgfx6muldivElll>
90014284:	f8d4 312c 	ldr.w	r3, [r4, #300]	; 0x12c
90014288:	6b22      	ldr	r2, [r4, #48]	; 0x30
9001428a:	2b00      	cmp	r3, #0
9001428c:	db44      	blt.n	90014318 <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x152>
9001428e:	eb02 0343 	add.w	r3, r2, r3, lsl #1
90014292:	fb93 f3f2 	sdiv	r3, r3, r2
90014296:	2202      	movs	r2, #2
90014298:	fb93 f3f2 	sdiv	r3, r3, r2
9001429c:	eb00 1343 	add.w	r3, r0, r3, lsl #5
900142a0:	2020      	movs	r0, #32
900142a2:	429d      	cmp	r5, r3
900142a4:	bfde      	ittt	le
900142a6:	461a      	movle	r2, r3
900142a8:	462b      	movle	r3, r5
900142aa:	4615      	movle	r5, r2
900142ac:	b21b      	sxth	r3, r3
900142ae:	2d00      	cmp	r5, #0
900142b0:	bfaa      	itet	ge
900142b2:	351f      	addge	r5, #31
900142b4:	fb95 f5f0 	sdivlt	r5, r5, r0
900142b8:	116d      	asrge	r5, r5, #5
900142ba:	fb93 f3f0 	sdiv	r3, r3, r0
900142be:	b22d      	sxth	r5, r5
900142c0:	803b      	strh	r3, [r7, #0]
900142c2:	2d00      	cmp	r5, #0
900142c4:	8035      	strh	r5, [r6, #0]
900142c6:	da33      	bge.n	90014330 <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x16a>
900142c8:	2000      	movs	r0, #0
900142ca:	8030      	strh	r0, [r6, #0]
900142cc:	8038      	strh	r0, [r7, #0]
900142ce:	e787      	b.n	900141e0 <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x1a>
900142d0:	f06f 0101 	mvn.w	r1, #1
900142d4:	fb01 5303 	mla	r3, r1, r3, r5
900142d8:	1e59      	subs	r1, r3, #1
900142da:	2302      	movs	r3, #2
900142dc:	fb91 f1f5 	sdiv	r1, r1, r5
900142e0:	fb91 f1f3 	sdiv	r1, r1, r3
900142e4:	4249      	negs	r1, r1
900142e6:	e7a0      	b.n	9001422a <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x64>
900142e8:	f06f 0301 	mvn.w	r3, #1
900142ec:	2502      	movs	r5, #2
900142ee:	fb03 c301 	mla	r3, r3, r1, ip
900142f2:	3b01      	subs	r3, #1
900142f4:	fb93 f3fc 	sdiv	r3, r3, ip
900142f8:	fb93 f3f5 	sdiv	r3, r3, r5
900142fc:	425b      	negs	r3, r3
900142fe:	e7a4      	b.n	9001424a <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x84>
90014300:	f06f 0101 	mvn.w	r1, #1
90014304:	fb01 c202 	mla	r2, r1, r2, ip
90014308:	1e51      	subs	r1, r2, #1
9001430a:	2202      	movs	r2, #2
9001430c:	fb91 f1fc 	sdiv	r1, r1, ip
90014310:	fb91 f1f2 	sdiv	r1, r1, r2
90014314:	4249      	negs	r1, r1
90014316:	e7ab      	b.n	90014270 <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0xaa>
90014318:	f06f 0101 	mvn.w	r1, #1
9001431c:	fb01 2303 	mla	r3, r1, r3, r2
90014320:	3b01      	subs	r3, #1
90014322:	fb93 f3f2 	sdiv	r3, r3, r2
90014326:	2202      	movs	r2, #2
90014328:	fb93 f3f2 	sdiv	r3, r3, r2
9001432c:	425b      	negs	r3, r3
9001432e:	e7b5      	b.n	9001429c <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0xd6>
90014330:	f9b4 311e 	ldrsh.w	r3, [r4, #286]	; 0x11e
90014334:	f9b7 2000 	ldrsh.w	r2, [r7]
90014338:	4293      	cmp	r3, r2
9001433a:	dc05      	bgt.n	90014348 <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x182>
9001433c:	3b01      	subs	r3, #1
9001433e:	2000      	movs	r0, #0
90014340:	b21b      	sxth	r3, r3
90014342:	8033      	strh	r3, [r6, #0]
90014344:	803b      	strh	r3, [r7, #0]
90014346:	e74b      	b.n	900141e0 <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x1a>
90014348:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
9001434c:	803a      	strh	r2, [r7, #0]
9001434e:	f9b4 311e 	ldrsh.w	r3, [r4, #286]	; 0x11e
90014352:	f9b6 2000 	ldrsh.w	r2, [r6]
90014356:	4293      	cmp	r3, r2
90014358:	bfdc      	itt	le
9001435a:	f103 33ff 	addle.w	r3, r3, #4294967295
9001435e:	b21a      	sxthle	r2, r3
90014360:	8032      	strh	r2, [r6, #0]
90014362:	e750      	b.n	90014206 <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x40>

90014364 <_ZN8touchgfx8Drawable11setPositionEssss>:
90014364:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
90014368:	461e      	mov	r6, r3
9001436a:	6803      	ldr	r3, [r0, #0]
9001436c:	4604      	mov	r4, r0
9001436e:	4617      	mov	r7, r2
90014370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90014372:	f9bd 5018 	ldrsh.w	r5, [sp, #24]
90014376:	4798      	blx	r3
90014378:	6823      	ldr	r3, [r4, #0]
9001437a:	4639      	mov	r1, r7
9001437c:	4620      	mov	r0, r4
9001437e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
90014380:	4798      	blx	r3
90014382:	6823      	ldr	r3, [r4, #0]
90014384:	4631      	mov	r1, r6
90014386:	4620      	mov	r0, r4
90014388:	6b9a      	ldr	r2, [r3, #56]	; 0x38
9001438a:	4790      	blx	r2
9001438c:	6823      	ldr	r3, [r4, #0]
9001438e:	4629      	mov	r1, r5
90014390:	4620      	mov	r0, r4
90014392:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
90014394:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
90014398:	4718      	bx	r3
	...

9001439c <_ZN8touchgfx9ContainerC1Ev>:
9001439c:	2101      	movs	r1, #1
9001439e:	2200      	movs	r2, #0
900143a0:	f880 1025 	strb.w	r1, [r0, #37]	; 0x25
900143a4:	4909      	ldr	r1, [pc, #36]	; (900143cc <_ZN8touchgfx9ContainerC1Ev+0x30>)
900143a6:	8082      	strh	r2, [r0, #4]
900143a8:	80c2      	strh	r2, [r0, #6]
900143aa:	8102      	strh	r2, [r0, #8]
900143ac:	8142      	strh	r2, [r0, #10]
900143ae:	8182      	strh	r2, [r0, #12]
900143b0:	81c2      	strh	r2, [r0, #14]
900143b2:	8202      	strh	r2, [r0, #16]
900143b4:	8242      	strh	r2, [r0, #18]
900143b6:	61c2      	str	r2, [r0, #28]
900143b8:	8402      	strh	r2, [r0, #32]
900143ba:	8442      	strh	r2, [r0, #34]	; 0x22
900143bc:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
900143c0:	6001      	str	r1, [r0, #0]
900143c2:	6282      	str	r2, [r0, #40]	; 0x28
900143c4:	e9c0 2205 	strd	r2, r2, [r0, #20]
900143c8:	4770      	bx	lr
900143ca:	bf00      	nop
900143cc:	9002bc68 	.word	0x9002bc68

900143d0 <_ZNK8touchgfx7CWRUtil2Q55roundEv>:
900143d0:	6800      	ldr	r0, [r0, #0]
900143d2:	2800      	cmp	r0, #0
900143d4:	bfbd      	ittte	lt
900143d6:	380f      	sublt	r0, #15
900143d8:	2320      	movlt	r3, #32
900143da:	fb90 f0f3 	sdivlt	r0, r0, r3
900143de:	3010      	addge	r0, #16
900143e0:	bfa8      	it	ge
900143e2:	1140      	asrge	r0, r0, #5
900143e4:	4770      	bx	lr

900143e6 <_ZN8touchgfx17AbstractDataGraph26getNearestIndexForScreenXYEssRs>:
900143e6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
900143ea:	4605      	mov	r5, r0
900143ec:	f9b0 011e 	ldrsh.w	r0, [r0, #286]	; 0x11e
900143f0:	4688      	mov	r8, r1
900143f2:	4691      	mov	r9, r2
900143f4:	469a      	mov	sl, r3
900143f6:	b360      	cbz	r0, 90014452 <_ZN8touchgfx17AbstractDataGraph26getNearestIndexForScreenXYEssRs+0x6c>
900143f8:	2700      	movs	r7, #0
900143fa:	f04f 3bff 	mov.w	fp, #4294967295
900143fe:	b23e      	sxth	r6, r7
90014400:	f9b5 311e 	ldrsh.w	r3, [r5, #286]	; 0x11e
90014404:	42b3      	cmp	r3, r6
90014406:	dd23      	ble.n	90014450 <_ZN8touchgfx17AbstractDataGraph26getNearestIndexForScreenXYEssRs+0x6a>
90014408:	682b      	ldr	r3, [r5, #0]
9001440a:	4631      	mov	r1, r6
9001440c:	4628      	mov	r0, r5
9001440e:	3701      	adds	r7, #1
90014410:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
90014414:	4798      	blx	r3
90014416:	9001      	str	r0, [sp, #4]
90014418:	a801      	add	r0, sp, #4
9001441a:	f7ff ffd9 	bl	900143d0 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
9001441e:	682b      	ldr	r3, [r5, #0]
90014420:	eba0 0008 	sub.w	r0, r0, r8
90014424:	4631      	mov	r1, r6
90014426:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
9001442a:	b204      	sxth	r4, r0
9001442c:	4628      	mov	r0, r5
9001442e:	4798      	blx	r3
90014430:	9001      	str	r0, [sp, #4]
90014432:	a801      	add	r0, sp, #4
90014434:	f7ff ffcc 	bl	900143d0 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
90014438:	eba0 0009 	sub.w	r0, r0, r9
9001443c:	fb10 f000 	smulbb	r0, r0, r0
90014440:	fb04 0404 	mla	r4, r4, r4, r0
90014444:	455c      	cmp	r4, fp
90014446:	bf3c      	itt	cc
90014448:	f8aa 6000 	strhcc.w	r6, [sl]
9001444c:	46a3      	movcc	fp, r4
9001444e:	e7d6      	b.n	900143fe <_ZN8touchgfx17AbstractDataGraph26getNearestIndexForScreenXYEssRs+0x18>
90014450:	2001      	movs	r0, #1
90014452:	b003      	add	sp, #12
90014454:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

90014458 <_ZNK8touchgfx17AbstractDataGraph25getNearestIndexForScreenXEsRs>:
90014458:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
9001445c:	4604      	mov	r4, r0
9001445e:	f9b0 011e 	ldrsh.w	r0, [r0, #286]	; 0x11e
90014462:	4688      	mov	r8, r1
90014464:	4691      	mov	r9, r2
90014466:	b1f8      	cbz	r0, 900144a8 <_ZNK8touchgfx17AbstractDataGraph25getNearestIndexForScreenXEsRs+0x50>
90014468:	2500      	movs	r5, #0
9001446a:	f04f 37ff 	mov.w	r7, #4294967295
9001446e:	b22e      	sxth	r6, r5
90014470:	f9b4 311e 	ldrsh.w	r3, [r4, #286]	; 0x11e
90014474:	42b3      	cmp	r3, r6
90014476:	dd16      	ble.n	900144a6 <_ZNK8touchgfx17AbstractDataGraph25getNearestIndexForScreenXEsRs+0x4e>
90014478:	6823      	ldr	r3, [r4, #0]
9001447a:	4631      	mov	r1, r6
9001447c:	4620      	mov	r0, r4
9001447e:	3501      	adds	r5, #1
90014480:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
90014484:	4798      	blx	r3
90014486:	9001      	str	r0, [sp, #4]
90014488:	a801      	add	r0, sp, #4
9001448a:	f7ff ffa1 	bl	900143d0 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
9001448e:	b200      	sxth	r0, r0
90014490:	eba0 0008 	sub.w	r0, r0, r8
90014494:	2800      	cmp	r0, #0
90014496:	bfb8      	it	lt
90014498:	4240      	neglt	r0, r0
9001449a:	42b8      	cmp	r0, r7
9001449c:	bf3c      	itt	cc
9001449e:	f8a9 6000 	strhcc.w	r6, [r9]
900144a2:	4607      	movcc	r7, r0
900144a4:	e7e3      	b.n	9001446e <_ZNK8touchgfx17AbstractDataGraph25getNearestIndexForScreenXEsRs+0x16>
900144a6:	2001      	movs	r0, #1
900144a8:	b003      	add	sp, #12
900144aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

900144ae <_ZN8touchgfx17AbstractDataGraph19setGraphAreaPaddingEssss>:
900144ae:	f8a0 3118 	strh.w	r3, [r0, #280]	; 0x118
900144b2:	f9bd 3000 	ldrsh.w	r3, [sp]
900144b6:	f8a0 1114 	strh.w	r1, [r0, #276]	; 0x114
900144ba:	f8a0 2116 	strh.w	r2, [r0, #278]	; 0x116
900144be:	f8a0 311a 	strh.w	r3, [r0, #282]	; 0x11a
900144c2:	4770      	bx	lr

900144c4 <_ZN8touchgfx17AbstractDataGraph15addGraphElementERNS_20AbstractGraphElementE>:
900144c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
900144c6:	4604      	mov	r4, r0
900144c8:	3038      	adds	r0, #56	; 0x38
900144ca:	460d      	mov	r5, r1
900144cc:	f7fe faee 	bl	90012aac <_ZN8touchgfx9Container3addERNS_8DrawableE>
900144d0:	f9b4 2042 	ldrsh.w	r2, [r4, #66]	; 0x42
900144d4:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	; 0x40
900144d8:	4628      	mov	r0, r5
900144da:	9200      	str	r2, [sp, #0]
900144dc:	2200      	movs	r2, #0
900144de:	4611      	mov	r1, r2
900144e0:	f7ff ff40 	bl	90014364 <_ZN8touchgfx8Drawable11setPositionEssss>
900144e4:	b003      	add	sp, #12
900144e6:	bd30      	pop	{r4, r5, pc}

900144e8 <_ZN8touchgfx17AbstractDataGraph22invalidateGraphPointAtEs>:
900144e8:	b538      	push	{r3, r4, r5, lr}
900144ea:	f9b0 311e 	ldrsh.w	r3, [r0, #286]	; 0x11e
900144ee:	460d      	mov	r5, r1
900144f0:	428b      	cmp	r3, r1
900144f2:	dd08      	ble.n	90014506 <_ZN8touchgfx17AbstractDataGraph22invalidateGraphPointAtEs+0x1e>
900144f4:	6e04      	ldr	r4, [r0, #96]	; 0x60
900144f6:	b134      	cbz	r4, 90014506 <_ZN8touchgfx17AbstractDataGraph22invalidateGraphPointAtEs+0x1e>
900144f8:	6823      	ldr	r3, [r4, #0]
900144fa:	4620      	mov	r0, r4
900144fc:	4629      	mov	r1, r5
900144fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
90014500:	4798      	blx	r3
90014502:	69a4      	ldr	r4, [r4, #24]
90014504:	e7f7      	b.n	900144f6 <_ZN8touchgfx17AbstractDataGraph22invalidateGraphPointAtEs+0xe>
90014506:	bd38      	pop	{r3, r4, r5, pc}

90014508 <_ZN8touchgfx17AbstractDataGraph22invalidateXAxisPointAtEs>:
90014508:	b570      	push	{r4, r5, r6, lr}
9001450a:	4606      	mov	r6, r0
9001450c:	460d      	mov	r5, r1
9001450e:	f8d0 40e4 	ldr.w	r4, [r0, #228]	; 0xe4
90014512:	b134      	cbz	r4, 90014522 <_ZN8touchgfx17AbstractDataGraph22invalidateXAxisPointAtEs+0x1a>
90014514:	6823      	ldr	r3, [r4, #0]
90014516:	4620      	mov	r0, r4
90014518:	4629      	mov	r1, r5
9001451a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
9001451c:	4798      	blx	r3
9001451e:	69a4      	ldr	r4, [r4, #24]
90014520:	e7f7      	b.n	90014512 <_ZN8touchgfx17AbstractDataGraph22invalidateXAxisPointAtEs+0xa>
90014522:	f8d6 4110 	ldr.w	r4, [r6, #272]	; 0x110
90014526:	b134      	cbz	r4, 90014536 <_ZN8touchgfx17AbstractDataGraph22invalidateXAxisPointAtEs+0x2e>
90014528:	6823      	ldr	r3, [r4, #0]
9001452a:	4620      	mov	r0, r4
9001452c:	4629      	mov	r1, r5
9001452e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
90014530:	4798      	blx	r3
90014532:	69a4      	ldr	r4, [r4, #24]
90014534:	e7f7      	b.n	90014526 <_ZN8touchgfx17AbstractDataGraph22invalidateXAxisPointAtEs+0x1e>
90014536:	bd70      	pop	{r4, r5, r6, pc}

90014538 <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv>:
90014538:	b537      	push	{r0, r1, r2, r4, r5, lr}
9001453a:	4604      	mov	r4, r0
9001453c:	6e05      	ldr	r5, [r0, #96]	; 0x60
9001453e:	b15d      	cbz	r5, 90014558 <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x20>
90014540:	f9b4 2042 	ldrsh.w	r2, [r4, #66]	; 0x42
90014544:	4628      	mov	r0, r5
90014546:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	; 0x40
9001454a:	9200      	str	r2, [sp, #0]
9001454c:	2200      	movs	r2, #0
9001454e:	4611      	mov	r1, r2
90014550:	f7ff ff08 	bl	90014364 <_ZN8touchgfx8Drawable11setPositionEssss>
90014554:	69ad      	ldr	r5, [r5, #24]
90014556:	e7f2      	b.n	9001453e <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x6>
90014558:	f8d4 50e4 	ldr.w	r5, [r4, #228]	; 0xe4
9001455c:	b15d      	cbz	r5, 90014576 <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x3e>
9001455e:	f9b4 20c6 	ldrsh.w	r2, [r4, #198]	; 0xc6
90014562:	4628      	mov	r0, r5
90014564:	f9b4 30c4 	ldrsh.w	r3, [r4, #196]	; 0xc4
90014568:	9200      	str	r2, [sp, #0]
9001456a:	2200      	movs	r2, #0
9001456c:	4611      	mov	r1, r2
9001456e:	f7ff fef9 	bl	90014364 <_ZN8touchgfx8Drawable11setPositionEssss>
90014572:	69ad      	ldr	r5, [r5, #24]
90014574:	e7f2      	b.n	9001455c <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x24>
90014576:	f8d4 508c 	ldr.w	r5, [r4, #140]	; 0x8c
9001457a:	b15d      	cbz	r5, 90014594 <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x5c>
9001457c:	f9b4 206e 	ldrsh.w	r2, [r4, #110]	; 0x6e
90014580:	4628      	mov	r0, r5
90014582:	f9b4 306c 	ldrsh.w	r3, [r4, #108]	; 0x6c
90014586:	9200      	str	r2, [sp, #0]
90014588:	2200      	movs	r2, #0
9001458a:	4611      	mov	r1, r2
9001458c:	f7ff feea 	bl	90014364 <_ZN8touchgfx8Drawable11setPositionEssss>
90014590:	69ad      	ldr	r5, [r5, #24]
90014592:	e7f2      	b.n	9001457a <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x42>
90014594:	f8d4 50b8 	ldr.w	r5, [r4, #184]	; 0xb8
90014598:	b15d      	cbz	r5, 900145b2 <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x7a>
9001459a:	f9b4 209a 	ldrsh.w	r2, [r4, #154]	; 0x9a
9001459e:	4628      	mov	r0, r5
900145a0:	f9b4 3098 	ldrsh.w	r3, [r4, #152]	; 0x98
900145a4:	9200      	str	r2, [sp, #0]
900145a6:	2200      	movs	r2, #0
900145a8:	4611      	mov	r1, r2
900145aa:	f7ff fedb 	bl	90014364 <_ZN8touchgfx8Drawable11setPositionEssss>
900145ae:	69ad      	ldr	r5, [r5, #24]
900145b0:	e7f2      	b.n	90014598 <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x60>
900145b2:	f8d4 5110 	ldr.w	r5, [r4, #272]	; 0x110
900145b6:	b15d      	cbz	r5, 900145d0 <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x98>
900145b8:	f9b4 20f2 	ldrsh.w	r2, [r4, #242]	; 0xf2
900145bc:	4628      	mov	r0, r5
900145be:	f9b4 30f0 	ldrsh.w	r3, [r4, #240]	; 0xf0
900145c2:	9200      	str	r2, [sp, #0]
900145c4:	2200      	movs	r2, #0
900145c6:	4611      	mov	r1, r2
900145c8:	f7ff fecc 	bl	90014364 <_ZN8touchgfx8Drawable11setPositionEssss>
900145cc:	69ad      	ldr	r5, [r5, #24]
900145ce:	e7f2      	b.n	900145b6 <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x7e>
900145d0:	6823      	ldr	r3, [r4, #0]
900145d2:	4620      	mov	r0, r4
900145d4:	695b      	ldr	r3, [r3, #20]
900145d6:	b003      	add	sp, #12
900145d8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
900145dc:	4718      	bx	r3

900145de <_ZN8touchgfx17AbstractDataGraph8setWidthEs>:
900145de:	b430      	push	{r4, r5}
900145e0:	b28a      	uxth	r2, r1
900145e2:	f8b0 4098 	ldrh.w	r4, [r0, #152]	; 0x98
900145e6:	f8a0 10c4 	strh.w	r1, [r0, #196]	; 0xc4
900145ea:	1b15      	subs	r5, r2, r4
900145ec:	f8a0 10f0 	strh.w	r1, [r0, #240]	; 0xf0
900145f0:	8101      	strh	r1, [r0, #8]
900145f2:	f8a0 5094 	strh.w	r5, [r0, #148]	; 0x94
900145f6:	f8b0 506c 	ldrh.w	r5, [r0, #108]	; 0x6c
900145fa:	442c      	add	r4, r5
900145fc:	1b12      	subs	r2, r2, r4
900145fe:	bc30      	pop	{r4, r5}
90014600:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
90014604:	f7ff bf98 	b.w	90014538 <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv>

90014608 <_ZN8touchgfx17AbstractDataGraph9setHeightEs>:
90014608:	b430      	push	{r4, r5}
9001460a:	b28a      	uxth	r2, r1
9001460c:	f8b0 40f2 	ldrh.w	r4, [r0, #242]	; 0xf2
90014610:	f8a0 106e 	strh.w	r1, [r0, #110]	; 0x6e
90014614:	1b15      	subs	r5, r2, r4
90014616:	f8a0 109a 	strh.w	r1, [r0, #154]	; 0x9a
9001461a:	8141      	strh	r1, [r0, #10]
9001461c:	f8a0 50ee 	strh.w	r5, [r0, #238]	; 0xee
90014620:	f8b0 50c6 	ldrh.w	r5, [r0, #198]	; 0xc6
90014624:	442c      	add	r4, r5
90014626:	1b12      	subs	r2, r2, r4
90014628:	bc30      	pop	{r4, r5}
9001462a:	f8a0 2042 	strh.w	r2, [r0, #66]	; 0x42
9001462e:	f7ff bf83 	b.w	90014538 <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv>

90014632 <_ZN8touchgfx17AbstractDataGraph18setGraphAreaMarginEssss>:
90014632:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
90014636:	fa1f fa83 	uxth.w	sl, r3
9001463a:	f9bd 7028 	ldrsh.w	r7, [sp, #40]	; 0x28
9001463e:	4615      	mov	r5, r2
90014640:	4699      	mov	r9, r3
90014642:	fa1f f887 	uxth.w	r8, r7
90014646:	8903      	ldrh	r3, [r0, #8]
90014648:	4452      	add	r2, sl
9001464a:	4604      	mov	r4, r0
9001464c:	8940      	ldrh	r0, [r0, #10]
9001464e:	460e      	mov	r6, r1
90014650:	1a9b      	subs	r3, r3, r2
90014652:	eb08 0201 	add.w	r2, r8, r1
90014656:	1a80      	subs	r0, r0, r2
90014658:	b21b      	sxth	r3, r3
9001465a:	460a      	mov	r2, r1
9001465c:	4629      	mov	r1, r5
9001465e:	b200      	sxth	r0, r0
90014660:	9000      	str	r0, [sp, #0]
90014662:	f104 0038 	add.w	r0, r4, #56	; 0x38
90014666:	f7ff fe7d 	bl	90014364 <_ZN8touchgfx8Drawable11setPositionEssss>
9001466a:	2200      	movs	r2, #0
9001466c:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
90014670:	f104 00bc 	add.w	r0, r4, #188	; 0xbc
90014674:	4611      	mov	r1, r2
90014676:	9600      	str	r6, [sp, #0]
90014678:	f7ff fe74 	bl	90014364 <_ZN8touchgfx8Drawable11setPositionEssss>
9001467c:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
90014680:	2200      	movs	r2, #0
90014682:	f104 0064 	add.w	r0, r4, #100	; 0x64
90014686:	9300      	str	r3, [sp, #0]
90014688:	462b      	mov	r3, r5
9001468a:	4611      	mov	r1, r2
9001468c:	f7ff fe6a 	bl	90014364 <_ZN8touchgfx8Drawable11setPositionEssss>
90014690:	8921      	ldrh	r1, [r4, #8]
90014692:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
90014696:	f104 0090 	add.w	r0, r4, #144	; 0x90
9001469a:	eba1 010a 	sub.w	r1, r1, sl
9001469e:	2200      	movs	r2, #0
900146a0:	9300      	str	r3, [sp, #0]
900146a2:	464b      	mov	r3, r9
900146a4:	b209      	sxth	r1, r1
900146a6:	f7ff fe5d 	bl	90014364 <_ZN8touchgfx8Drawable11setPositionEssss>
900146aa:	8962      	ldrh	r2, [r4, #10]
900146ac:	f104 00e8 	add.w	r0, r4, #232	; 0xe8
900146b0:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
900146b4:	eba2 0208 	sub.w	r2, r2, r8
900146b8:	9700      	str	r7, [sp, #0]
900146ba:	2100      	movs	r1, #0
900146bc:	b212      	sxth	r2, r2
900146be:	f7ff fe51 	bl	90014364 <_ZN8touchgfx8Drawable11setPositionEssss>
900146c2:	4620      	mov	r0, r4
900146c4:	b002      	add	sp, #8
900146c6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
900146ca:	f7ff bf35 	b.w	90014538 <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv>
	...

900146d0 <_ZN8touchgfx17AbstractDataGraphC1Es>:
900146d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
900146d4:	b085      	sub	sp, #20
900146d6:	4604      	mov	r4, r0
900146d8:	2601      	movs	r6, #1
900146da:	2500      	movs	r5, #0
900146dc:	9103      	str	r1, [sp, #12]
900146de:	f7ff fe5d 	bl	9001439c <_ZN8touchgfx9ContainerC1Ev>
900146e2:	4b2c      	ldr	r3, [pc, #176]	; (90014794 <_ZN8touchgfx17AbstractDataGraphC1Es+0xc4>)
900146e4:	f104 0b38 	add.w	fp, r4, #56	; 0x38
900146e8:	f104 0964 	add.w	r9, r4, #100	; 0x64
900146ec:	f104 0890 	add.w	r8, r4, #144	; 0x90
900146f0:	6023      	str	r3, [r4, #0]
900146f2:	23ff      	movs	r3, #255	; 0xff
900146f4:	4658      	mov	r0, fp
900146f6:	f104 0abc 	add.w	sl, r4, #188	; 0xbc
900146fa:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
900146fe:	f104 07e8 	add.w	r7, r4, #232	; 0xe8
90014702:	e9c4 660c 	strd	r6, r6, [r4, #48]	; 0x30
90014706:	f7ff fe49 	bl	9001439c <_ZN8touchgfx9ContainerC1Ev>
9001470a:	4648      	mov	r0, r9
9001470c:	f7ff fe46 	bl	9001439c <_ZN8touchgfx9ContainerC1Ev>
90014710:	4640      	mov	r0, r8
90014712:	f7ff fe43 	bl	9001439c <_ZN8touchgfx9ContainerC1Ev>
90014716:	4650      	mov	r0, sl
90014718:	f7ff fe40 	bl	9001439c <_ZN8touchgfx9ContainerC1Ev>
9001471c:	4638      	mov	r0, r7
9001471e:	f7ff fe3d 	bl	9001439c <_ZN8touchgfx9ContainerC1Ev>
90014722:	9903      	ldr	r1, [sp, #12]
90014724:	4620      	mov	r0, r4
90014726:	f8c4 5114 	str.w	r5, [r4, #276]	; 0x114
9001472a:	f8a4 111c 	strh.w	r1, [r4, #284]	; 0x11c
9001472e:	4659      	mov	r1, fp
90014730:	f8c4 5118 	str.w	r5, [r4, #280]	; 0x118
90014734:	f8a4 511e 	strh.w	r5, [r4, #286]	; 0x11e
90014738:	f8a4 5120 	strh.w	r5, [r4, #288]	; 0x120
9001473c:	f8c4 5124 	str.w	r5, [r4, #292]	; 0x124
90014740:	f8c4 5128 	str.w	r5, [r4, #296]	; 0x128
90014744:	f8c4 512c 	str.w	r5, [r4, #300]	; 0x12c
90014748:	f8c4 5130 	str.w	r5, [r4, #304]	; 0x130
9001474c:	f8c4 5134 	str.w	r5, [r4, #308]	; 0x134
90014750:	f8c4 5138 	str.w	r5, [r4, #312]	; 0x138
90014754:	f7fe f9aa 	bl	90012aac <_ZN8touchgfx9Container3addERNS_8DrawableE>
90014758:	4651      	mov	r1, sl
9001475a:	4620      	mov	r0, r4
9001475c:	f7fe f9a6 	bl	90012aac <_ZN8touchgfx9Container3addERNS_8DrawableE>
90014760:	4649      	mov	r1, r9
90014762:	4620      	mov	r0, r4
90014764:	f7fe f9a2 	bl	90012aac <_ZN8touchgfx9Container3addERNS_8DrawableE>
90014768:	4641      	mov	r1, r8
9001476a:	4620      	mov	r0, r4
9001476c:	f7fe f99e 	bl	90012aac <_ZN8touchgfx9Container3addERNS_8DrawableE>
90014770:	4639      	mov	r1, r7
90014772:	4620      	mov	r0, r4
90014774:	f7fe f99a 	bl	90012aac <_ZN8touchgfx9Container3addERNS_8DrawableE>
90014778:	4620      	mov	r0, r4
9001477a:	9500      	str	r5, [sp, #0]
9001477c:	462b      	mov	r3, r5
9001477e:	462a      	mov	r2, r5
90014780:	4629      	mov	r1, r5
90014782:	f7ff ff56 	bl	90014632 <_ZN8touchgfx17AbstractDataGraph18setGraphAreaMarginEssss>
90014786:	4620      	mov	r0, r4
90014788:	f884 6024 	strb.w	r6, [r4, #36]	; 0x24
9001478c:	b005      	add	sp, #20
9001478e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90014792:	bf00      	nop
90014794:	9002bf70 	.word	0x9002bf70

90014798 <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii>:
90014798:	4291      	cmp	r1, r2
9001479a:	4613      	mov	r3, r2
9001479c:	d003      	beq.n	900147a6 <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii+0xe>
9001479e:	460a      	mov	r2, r1
900147a0:	4619      	mov	r1, r3
900147a2:	f004 bf01 	b.w	900195a8 <_ZN8touchgfx6muldivElll>
900147a6:	4770      	bx	lr

900147a8 <_ZN8touchgfx16DynamicDataGraph9setScaleXEib>:
900147a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
900147ac:	6803      	ldr	r3, [r0, #0]
900147ae:	460d      	mov	r5, r1
900147b0:	4604      	mov	r4, r0
900147b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
900147b6:	4798      	blx	r3
900147b8:	42a8      	cmp	r0, r5
900147ba:	4606      	mov	r6, r0
900147bc:	d024      	beq.n	90014808 <_ZN8touchgfx16DynamicDataGraph9setScaleXEib+0x60>
900147be:	6823      	ldr	r3, [r4, #0]
900147c0:	4601      	mov	r1, r0
900147c2:	462a      	mov	r2, r5
900147c4:	f8d4 012c 	ldr.w	r0, [r4, #300]	; 0x12c
900147c8:	f8d3 70a4 	ldr.w	r7, [r3, #164]	; 0xa4
900147cc:	f7ff ffe4 	bl	90014798 <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii>
900147d0:	4680      	mov	r8, r0
900147d2:	462a      	mov	r2, r5
900147d4:	4631      	mov	r1, r6
900147d6:	f8d4 0130 	ldr.w	r0, [r4, #304]	; 0x130
900147da:	f7ff ffdd 	bl	90014798 <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii>
900147de:	4641      	mov	r1, r8
900147e0:	4602      	mov	r2, r0
900147e2:	4620      	mov	r0, r4
900147e4:	47b8      	blx	r7
900147e6:	462a      	mov	r2, r5
900147e8:	4631      	mov	r1, r6
900147ea:	f8d4 013c 	ldr.w	r0, [r4, #316]	; 0x13c
900147ee:	f7ff ffd3 	bl	90014798 <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii>
900147f2:	462a      	mov	r2, r5
900147f4:	f8c4 013c 	str.w	r0, [r4, #316]	; 0x13c
900147f8:	4631      	mov	r1, r6
900147fa:	f8d4 0140 	ldr.w	r0, [r4, #320]	; 0x140
900147fe:	f7ff ffcb 	bl	90014798 <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii>
90014802:	6325      	str	r5, [r4, #48]	; 0x30
90014804:	f8c4 0140 	str.w	r0, [r4, #320]	; 0x140
90014808:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

9001480c <_ZN8touchgfx16DynamicDataGraph9setScaleYEib>:
9001480c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
90014810:	4604      	mov	r4, r0
90014812:	460f      	mov	r7, r1
90014814:	b1b2      	cbz	r2, 90014844 <_ZN8touchgfx16DynamicDataGraph9setScaleYEib+0x38>
90014816:	6803      	ldr	r3, [r0, #0]
90014818:	2600      	movs	r6, #0
9001481a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
9001481e:	4798      	blx	r3
90014820:	4681      	mov	r9, r0
90014822:	b235      	sxth	r5, r6
90014824:	f9b4 311e 	ldrsh.w	r3, [r4, #286]	; 0x11e
90014828:	3601      	adds	r6, #1
9001482a:	42ab      	cmp	r3, r5
9001482c:	dd0a      	ble.n	90014844 <_ZN8touchgfx16DynamicDataGraph9setScaleYEib+0x38>
9001482e:	f8d4 8144 	ldr.w	r8, [r4, #324]	; 0x144
90014832:	463a      	mov	r2, r7
90014834:	4649      	mov	r1, r9
90014836:	f858 0025 	ldr.w	r0, [r8, r5, lsl #2]
9001483a:	f7ff ffad 	bl	90014798 <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii>
9001483e:	f848 0025 	str.w	r0, [r8, r5, lsl #2]
90014842:	e7ee      	b.n	90014822 <_ZN8touchgfx16DynamicDataGraph9setScaleYEib+0x16>
90014844:	6367      	str	r7, [r4, #52]	; 0x34
90014846:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

9001484a <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>:
9001484a:	b570      	push	{r4, r5, r6, lr}
9001484c:	6803      	ldr	r3, [r0, #0]
9001484e:	4604      	mov	r4, r0
90014850:	460d      	mov	r5, r1
90014852:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
90014856:	4798      	blx	r3
90014858:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
9001485c:	4629      	mov	r1, r5
9001485e:	4620      	mov	r0, r4
90014860:	3301      	adds	r3, #1
90014862:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
90014866:	6823      	ldr	r3, [r4, #0]
90014868:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
9001486c:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
90014870:	4718      	bx	r3

90014872 <_ZN8touchgfx16GraphElementLineD1Ev>:
90014872:	4770      	bx	lr

90014874 <_ZN8touchgfx16GraphElementLineD0Ev>:
90014874:	b510      	push	{r4, lr}
90014876:	4604      	mov	r4, r0
90014878:	2130      	movs	r1, #48	; 0x30
9001487a:	f012 febc 	bl	900275f6 <_ZdlPvj>
9001487e:	4620      	mov	r0, r4
90014880:	bd10      	pop	{r4, pc}

90014882 <_ZN8touchgfx4Rect11expandToFitERKS0_>:
90014882:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
90014884:	4604      	mov	r4, r0
90014886:	4608      	mov	r0, r1
90014888:	460d      	mov	r5, r1
9001488a:	f7fe fad6 	bl	90012e3a <_ZNK8touchgfx4Rect7isEmptyEv>
9001488e:	b978      	cbnz	r0, 900148b0 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
90014890:	4620      	mov	r0, r4
90014892:	f7fe fad2 	bl	90012e3a <_ZNK8touchgfx4Rect7isEmptyEv>
90014896:	f9b5 6000 	ldrsh.w	r6, [r5]
9001489a:	b150      	cbz	r0, 900148b2 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x30>
9001489c:	8026      	strh	r6, [r4, #0]
9001489e:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
900148a2:	8063      	strh	r3, [r4, #2]
900148a4:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
900148a8:	80a3      	strh	r3, [r4, #4]
900148aa:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
900148ae:	80e3      	strh	r3, [r4, #6]
900148b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
900148b2:	f9b4 1000 	ldrsh.w	r1, [r4]
900148b6:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
900148ba:	42b1      	cmp	r1, r6
900148bc:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
900148c0:	f8b5 c004 	ldrh.w	ip, [r5, #4]
900148c4:	460f      	mov	r7, r1
900148c6:	88ed      	ldrh	r5, [r5, #6]
900148c8:	bfa8      	it	ge
900148ca:	4637      	movge	r7, r6
900148cc:	4293      	cmp	r3, r2
900148ce:	4618      	mov	r0, r3
900148d0:	4466      	add	r6, ip
900148d2:	f8b4 c004 	ldrh.w	ip, [r4, #4]
900148d6:	bfa8      	it	ge
900148d8:	4610      	movge	r0, r2
900148da:	442a      	add	r2, r5
900148dc:	88e5      	ldrh	r5, [r4, #6]
900148de:	4461      	add	r1, ip
900148e0:	b236      	sxth	r6, r6
900148e2:	8027      	strh	r7, [r4, #0]
900148e4:	442b      	add	r3, r5
900148e6:	b209      	sxth	r1, r1
900148e8:	b212      	sxth	r2, r2
900148ea:	8060      	strh	r0, [r4, #2]
900148ec:	b21b      	sxth	r3, r3
900148ee:	428e      	cmp	r6, r1
900148f0:	bfac      	ite	ge
900148f2:	ebc7 0106 	rsbge	r1, r7, r6
900148f6:	ebc7 0101 	rsblt	r1, r7, r1
900148fa:	429a      	cmp	r2, r3
900148fc:	bfac      	ite	ge
900148fe:	ebc0 0202 	rsbge	r2, r0, r2
90014902:	ebc0 0203 	rsblt	r2, r0, r3
90014906:	80a1      	strh	r1, [r4, #4]
90014908:	80e2      	strh	r2, [r4, #6]
9001490a:	e7d1      	b.n	900148b0 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>

9001490c <_ZNK8touchgfx7CWRUtil2Q54ceilEv>:
9001490c:	6800      	ldr	r0, [r0, #0]
9001490e:	2800      	cmp	r0, #0
90014910:	bfb9      	ittee	lt
90014912:	2320      	movlt	r3, #32
90014914:	fb90 f0f3 	sdivlt	r0, r0, r3
90014918:	301f      	addge	r0, #31
9001491a:	1140      	asrge	r0, r0, #5
9001491c:	4770      	bx	lr

9001491e <_ZN8touchgfx7CWRUtil6lengthENS0_2Q5ES1_>:
9001491e:	b510      	push	{r4, lr}
90014920:	ea80 73e0 	eor.w	r3, r0, r0, asr #31
90014924:	ea81 74e1 	eor.w	r4, r1, r1, asr #31
90014928:	eba3 73e0 	sub.w	r3, r3, r0, asr #31
9001492c:	eba4 74e1 	sub.w	r4, r4, r1, asr #31
90014930:	139b      	asrs	r3, r3, #14
90014932:	13a4      	asrs	r4, r4, #14
90014934:	429c      	cmp	r4, r3
90014936:	bfb8      	it	lt
90014938:	461c      	movlt	r4, r3
9001493a:	2c01      	cmp	r4, #1
9001493c:	dd07      	ble.n	9001494e <_ZN8touchgfx7CWRUtil6lengthENS0_2Q5ES1_+0x30>
9001493e:	fb91 f1f4 	sdiv	r1, r1, r4
90014942:	fb90 f0f4 	sdiv	r0, r0, r4
90014946:	f7ff ffea 	bl	9001491e <_ZN8touchgfx7CWRUtil6lengthENS0_2Q5ES1_>
9001494a:	4360      	muls	r0, r4
9001494c:	bd10      	pop	{r4, pc}
9001494e:	4340      	muls	r0, r0
90014950:	fb01 0101 	mla	r1, r1, r1, r0
90014954:	2000      	movs	r0, #0
90014956:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
9001495a:	bfb4      	ite	lt
9001495c:	f44f 4380 	movlt.w	r3, #16384	; 0x4000
90014960:	f04f 4380 	movge.w	r3, #1073741824	; 0x40000000
90014964:	18c2      	adds	r2, r0, r3
90014966:	428a      	cmp	r2, r1
90014968:	bf9c      	itt	ls
9001496a:	1898      	addls	r0, r3, r2
9001496c:	1a89      	subls	r1, r1, r2
9001496e:	089b      	lsrs	r3, r3, #2
90014970:	ea4f 0050 	mov.w	r0, r0, lsr #1
90014974:	d1f6      	bne.n	90014964 <_ZN8touchgfx7CWRUtil6lengthENS0_2Q5ES1_+0x46>
90014976:	e7e9      	b.n	9001494c <_ZN8touchgfx7CWRUtil6lengthENS0_2Q5ES1_+0x2e>

90014978 <_ZNK8touchgfx20AbstractGraphElement21rectFromQ5CoordinatesENS_7CWRUtil2Q5ES2_S2_S2_>:
90014978:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
9001497a:	9906      	ldr	r1, [sp, #24]
9001497c:	4606      	mov	r6, r0
9001497e:	461c      	mov	r4, r3
90014980:	2020      	movs	r0, #32
90014982:	4291      	cmp	r1, r2
90014984:	bfbc      	itt	lt
90014986:	9206      	strlt	r2, [sp, #24]
90014988:	460a      	movlt	r2, r1
9001498a:	9907      	ldr	r1, [sp, #28]
9001498c:	428b      	cmp	r3, r1
9001498e:	bfc4      	itt	gt
90014990:	460c      	movgt	r4, r1
90014992:	9307      	strgt	r3, [sp, #28]
90014994:	fb92 f5f0 	sdiv	r5, r2, r0
90014998:	fb94 f4f0 	sdiv	r4, r4, r0
9001499c:	a806      	add	r0, sp, #24
9001499e:	f7ff ffb5 	bl	9001490c <_ZNK8touchgfx7CWRUtil2Q54ceilEv>
900149a2:	4607      	mov	r7, r0
900149a4:	a807      	add	r0, sp, #28
900149a6:	f7ff ffb1 	bl	9001490c <_ZNK8touchgfx7CWRUtil2Q54ceilEv>
900149aa:	1b7a      	subs	r2, r7, r5
900149ac:	1b00      	subs	r0, r0, r4
900149ae:	8035      	strh	r5, [r6, #0]
900149b0:	8074      	strh	r4, [r6, #2]
900149b2:	80f0      	strh	r0, [r6, #6]
900149b4:	4630      	mov	r0, r6
900149b6:	80b2      	strh	r2, [r6, #4]
900149b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

900149ba <_ZNK8touchgfx20AbstractGraphElement10rectAroundENS_7CWRUtil2Q5ES2_S2_>:
900149ba:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
900149bc:	9c08      	ldr	r4, [sp, #32]
900149be:	2602      	movs	r6, #2
900149c0:	4605      	mov	r5, r0
900149c2:	3401      	adds	r4, #1
900149c4:	fb94 f4f6 	sdiv	r4, r4, r6
900149c8:	18a6      	adds	r6, r4, r2
900149ca:	191f      	adds	r7, r3, r4
900149cc:	1b12      	subs	r2, r2, r4
900149ce:	1b1b      	subs	r3, r3, r4
900149d0:	e9cd 6700 	strd	r6, r7, [sp]
900149d4:	f7ff ffd0 	bl	90014978 <_ZNK8touchgfx20AbstractGraphElement21rectFromQ5CoordinatesENS_7CWRUtil2Q5ES2_S2_S2_>
900149d8:	4628      	mov	r0, r5
900149da:	b003      	add	sp, #12
900149dc:	bdf0      	pop	{r4, r5, r6, r7, pc}

900149de <_ZN8touchgfx16GraphElementLine22invalidateGraphPointAtEs>:
900149de:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
900149e2:	6943      	ldr	r3, [r0, #20]
900149e4:	b087      	sub	sp, #28
900149e6:	4606      	mov	r6, r0
900149e8:	460d      	mov	r5, r1
900149ea:	2b00      	cmp	r3, #0
900149ec:	d072      	beq.n	90014ad4 <_ZN8touchgfx16GraphElementLine22invalidateGraphPointAtEs+0xf6>
900149ee:	695c      	ldr	r4, [r3, #20]
900149f0:	f890 702c 	ldrb.w	r7, [r0, #44]	; 0x2c
900149f4:	6823      	ldr	r3, [r4, #0]
900149f6:	4620      	mov	r0, r4
900149f8:	017f      	lsls	r7, r7, #5
900149fa:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
900149fe:	4798      	blx	r3
90014a00:	6823      	ldr	r3, [r4, #0]
90014a02:	4680      	mov	r8, r0
90014a04:	4629      	mov	r1, r5
90014a06:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
90014a0a:	4620      	mov	r0, r4
90014a0c:	4798      	blx	r3
90014a0e:	9700      	str	r7, [sp, #0]
90014a10:	4603      	mov	r3, r0
90014a12:	4642      	mov	r2, r8
90014a14:	4631      	mov	r1, r6
90014a16:	a802      	add	r0, sp, #8
90014a18:	f7ff ffcf 	bl	900149ba <_ZNK8touchgfx20AbstractGraphElement10rectAroundENS_7CWRUtil2Q5ES2_S2_>
90014a1c:	2d00      	cmp	r5, #0
90014a1e:	dd1b      	ble.n	90014a58 <_ZN8touchgfx16GraphElementLine22invalidateGraphPointAtEs+0x7a>
90014a20:	f105 38ff 	add.w	r8, r5, #4294967295
90014a24:	6823      	ldr	r3, [r4, #0]
90014a26:	4620      	mov	r0, r4
90014a28:	fa0f f888 	sxth.w	r8, r8
90014a2c:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
90014a30:	4641      	mov	r1, r8
90014a32:	4798      	blx	r3
90014a34:	6823      	ldr	r3, [r4, #0]
90014a36:	4681      	mov	r9, r0
90014a38:	4641      	mov	r1, r8
90014a3a:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
90014a3e:	4620      	mov	r0, r4
90014a40:	4798      	blx	r3
90014a42:	4631      	mov	r1, r6
90014a44:	4603      	mov	r3, r0
90014a46:	9700      	str	r7, [sp, #0]
90014a48:	a804      	add	r0, sp, #16
90014a4a:	464a      	mov	r2, r9
90014a4c:	f7ff ffb5 	bl	900149ba <_ZNK8touchgfx20AbstractGraphElement10rectAroundENS_7CWRUtil2Q5ES2_S2_>
90014a50:	a904      	add	r1, sp, #16
90014a52:	a802      	add	r0, sp, #8
90014a54:	f7ff ff15 	bl	90014882 <_ZN8touchgfx4Rect11expandToFitERKS0_>
90014a58:	f9b4 311e 	ldrsh.w	r3, [r4, #286]	; 0x11e
90014a5c:	3b01      	subs	r3, #1
90014a5e:	429d      	cmp	r5, r3
90014a60:	da19      	bge.n	90014a96 <_ZN8touchgfx16GraphElementLine22invalidateGraphPointAtEs+0xb8>
90014a62:	3501      	adds	r5, #1
90014a64:	6823      	ldr	r3, [r4, #0]
90014a66:	4620      	mov	r0, r4
90014a68:	b22d      	sxth	r5, r5
90014a6a:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
90014a6e:	4629      	mov	r1, r5
90014a70:	4798      	blx	r3
90014a72:	6823      	ldr	r3, [r4, #0]
90014a74:	4680      	mov	r8, r0
90014a76:	4629      	mov	r1, r5
90014a78:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
90014a7c:	4620      	mov	r0, r4
90014a7e:	4798      	blx	r3
90014a80:	4631      	mov	r1, r6
90014a82:	4603      	mov	r3, r0
90014a84:	9700      	str	r7, [sp, #0]
90014a86:	a804      	add	r0, sp, #16
90014a88:	4642      	mov	r2, r8
90014a8a:	f7ff ff96 	bl	900149ba <_ZNK8touchgfx20AbstractGraphElement10rectAroundENS_7CWRUtil2Q5ES2_S2_>
90014a8e:	a904      	add	r1, sp, #16
90014a90:	a802      	add	r0, sp, #8
90014a92:	f7ff fef6 	bl	90014882 <_ZN8touchgfx4Rect11expandToFitERKS0_>
90014a96:	f9b4 1114 	ldrsh.w	r1, [r4, #276]	; 0x114
90014a9a:	f8b4 311a 	ldrh.w	r3, [r4, #282]	; 0x11a
90014a9e:	f9b4 0040 	ldrsh.w	r0, [r4, #64]	; 0x40
90014aa2:	18ca      	adds	r2, r1, r3
90014aa4:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
90014aa8:	f8ad 1012 	strh.w	r1, [sp, #18]
90014aac:	a904      	add	r1, sp, #16
90014aae:	1a9b      	subs	r3, r3, r2
90014ab0:	2200      	movs	r2, #0
90014ab2:	f8ad 0014 	strh.w	r0, [sp, #20]
90014ab6:	a802      	add	r0, sp, #8
90014ab8:	f8ad 2010 	strh.w	r2, [sp, #16]
90014abc:	f8ad 3016 	strh.w	r3, [sp, #22]
90014ac0:	f7fe f978 	bl	90012db4 <_ZN8touchgfx4RectaNERKS0_>
90014ac4:	6833      	ldr	r3, [r6, #0]
90014ac6:	a902      	add	r1, sp, #8
90014ac8:	4630      	mov	r0, r6
90014aca:	691b      	ldr	r3, [r3, #16]
90014acc:	4798      	blx	r3
90014ace:	b007      	add	sp, #28
90014ad0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
90014ad4:	681b      	ldr	r3, [r3, #0]
90014ad6:	deff      	udf	#255	; 0xff

90014ad8 <_ZNK8touchgfx16GraphElementLine14drawIndexRangeERNS_6CanvasEPKNS_17AbstractDataGraphEss>:
90014ad8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90014adc:	b08b      	sub	sp, #44	; 0x2c
90014ade:	461e      	mov	r6, r3
90014ae0:	460f      	mov	r7, r1
90014ae2:	4615      	mov	r5, r2
90014ae4:	f9bd 3050 	ldrsh.w	r3, [sp, #80]	; 0x50
90014ae8:	429e      	cmp	r6, r3
90014aea:	9304      	str	r3, [sp, #16]
90014aec:	d074      	beq.n	90014bd8 <_ZNK8touchgfx16GraphElementLine14drawIndexRangeERNS_6CanvasEPKNS_17AbstractDataGraphEss+0x100>
90014aee:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
90014af2:	4631      	mov	r1, r6
90014af4:	4610      	mov	r0, r2
90014af6:	4634      	mov	r4, r6
90014af8:	015b      	lsls	r3, r3, #5
90014afa:	9303      	str	r3, [sp, #12]
90014afc:	6813      	ldr	r3, [r2, #0]
90014afe:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
90014b02:	4798      	blx	r3
90014b04:	ab0a      	add	r3, sp, #40	; 0x28
90014b06:	f843 0d10 	str.w	r0, [r3, #-16]!
90014b0a:	4618      	mov	r0, r3
90014b0c:	f7ff fc60 	bl	900143d0 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
90014b10:	682b      	ldr	r3, [r5, #0]
90014b12:	4631      	mov	r1, r6
90014b14:	ea4f 1840 	mov.w	r8, r0, lsl #5
90014b18:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
90014b1c:	4628      	mov	r0, r5
90014b1e:	4798      	blx	r3
90014b20:	ab0a      	add	r3, sp, #40	; 0x28
90014b22:	f843 0d0c 	str.w	r0, [r3, #-12]!
90014b26:	4618      	mov	r0, r3
90014b28:	f7ff fc52 	bl	900143d0 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
90014b2c:	4641      	mov	r1, r8
90014b2e:	ea4f 1940 	mov.w	r9, r0, lsl #5
90014b32:	4638      	mov	r0, r7
90014b34:	464a      	mov	r2, r9
90014b36:	f012 fc9d 	bl	90027474 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>
90014b3a:	2301      	movs	r3, #1
90014b3c:	9300      	str	r3, [sp, #0]
90014b3e:	4628      	mov	r0, r5
90014b40:	9b00      	ldr	r3, [sp, #0]
90014b42:	441c      	add	r4, r3
90014b44:	682b      	ldr	r3, [r5, #0]
90014b46:	b224      	sxth	r4, r4
90014b48:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
90014b4c:	4621      	mov	r1, r4
90014b4e:	4798      	blx	r3
90014b50:	9008      	str	r0, [sp, #32]
90014b52:	a808      	add	r0, sp, #32
90014b54:	f7ff fc3c 	bl	900143d0 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
90014b58:	4621      	mov	r1, r4
90014b5a:	0143      	lsls	r3, r0, #5
90014b5c:	4628      	mov	r0, r5
90014b5e:	9301      	str	r3, [sp, #4]
90014b60:	682b      	ldr	r3, [r5, #0]
90014b62:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
90014b66:	4798      	blx	r3
90014b68:	9009      	str	r0, [sp, #36]	; 0x24
90014b6a:	a809      	add	r0, sp, #36	; 0x24
90014b6c:	f7ff fc30 	bl	900143d0 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
90014b70:	0143      	lsls	r3, r0, #5
90014b72:	9302      	str	r3, [sp, #8]
90014b74:	9b01      	ldr	r3, [sp, #4]
90014b76:	eba3 0b08 	sub.w	fp, r3, r8
90014b7a:	9b02      	ldr	r3, [sp, #8]
90014b7c:	eba3 0a09 	sub.w	sl, r3, r9
90014b80:	4658      	mov	r0, fp
90014b82:	4651      	mov	r1, sl
90014b84:	f7ff fecb 	bl	9001491e <_ZN8touchgfx7CWRUtil6lengthENS0_2Q5ES1_>
90014b88:	b320      	cbz	r0, 90014bd4 <_ZNK8touchgfx16GraphElementLine14drawIndexRangeERNS_6CanvasEPKNS_17AbstractDataGraphEss+0xfc>
90014b8a:	4602      	mov	r2, r0
90014b8c:	4651      	mov	r1, sl
90014b8e:	9005      	str	r0, [sp, #20]
90014b90:	9803      	ldr	r0, [sp, #12]
90014b92:	f004 fd09 	bl	900195a8 <_ZN8touchgfx6muldivElll>
90014b96:	2302      	movs	r3, #2
90014b98:	4659      	mov	r1, fp
90014b9a:	fb90 faf3 	sdiv	sl, r0, r3
90014b9e:	9b05      	ldr	r3, [sp, #20]
90014ba0:	9803      	ldr	r0, [sp, #12]
90014ba2:	461a      	mov	r2, r3
90014ba4:	f004 fd00 	bl	900195a8 <_ZN8touchgfx6muldivElll>
90014ba8:	2302      	movs	r3, #2
90014baa:	eba8 010a 	sub.w	r1, r8, sl
90014bae:	fb90 fbf3 	sdiv	fp, r0, r3
90014bb2:	683b      	ldr	r3, [r7, #0]
90014bb4:	eb0b 0209 	add.w	r2, fp, r9
90014bb8:	4638      	mov	r0, r7
90014bba:	689b      	ldr	r3, [r3, #8]
90014bbc:	4798      	blx	r3
90014bbe:	683b      	ldr	r3, [r7, #0]
90014bc0:	9a02      	ldr	r2, [sp, #8]
90014bc2:	4638      	mov	r0, r7
90014bc4:	9901      	ldr	r1, [sp, #4]
90014bc6:	689b      	ldr	r3, [r3, #8]
90014bc8:	445a      	add	r2, fp
90014bca:	eba1 010a 	sub.w	r1, r1, sl
90014bce:	4798      	blx	r3
90014bd0:	e9dd 8901 	ldrd	r8, r9, [sp, #4]
90014bd4:	42a6      	cmp	r6, r4
90014bd6:	db02      	blt.n	90014bde <_ZNK8touchgfx16GraphElementLine14drawIndexRangeERNS_6CanvasEPKNS_17AbstractDataGraphEss+0x106>
90014bd8:	b00b      	add	sp, #44	; 0x2c
90014bda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90014bde:	9b00      	ldr	r3, [sp, #0]
90014be0:	9a04      	ldr	r2, [sp, #16]
90014be2:	42a2      	cmp	r2, r4
90014be4:	bf08      	it	eq
90014be6:	f04f 33ff 	moveq.w	r3, #4294967295
90014bea:	e7a7      	b.n	90014b3c <_ZNK8touchgfx16GraphElementLine14drawIndexRangeERNS_6CanvasEPKNS_17AbstractDataGraphEss+0x64>

90014bec <_ZNK8touchgfx16GraphElementLine16drawCanvasWidgetERKNS_4RectE>:
90014bec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
90014bf0:	6943      	ldr	r3, [r0, #20]
90014bf2:	b0a2      	sub	sp, #136	; 0x88
90014bf4:	4606      	mov	r6, r0
90014bf6:	460f      	mov	r7, r1
90014bf8:	2b00      	cmp	r3, #0
90014bfa:	d06c      	beq.n	90014cd6 <_ZNK8touchgfx16GraphElementLine16drawCanvasWidgetERKNS_4RectE+0xea>
90014bfc:	695c      	ldr	r4, [r3, #20]
90014bfe:	f9b4 311e 	ldrsh.w	r3, [r4, #286]	; 0x11e
90014c02:	2b01      	cmp	r3, #1
90014c04:	dc04      	bgt.n	90014c10 <_ZNK8touchgfx16GraphElementLine16drawCanvasWidgetERKNS_4RectE+0x24>
90014c06:	2401      	movs	r4, #1
90014c08:	4620      	mov	r0, r4
90014c0a:	b022      	add	sp, #136	; 0x88
90014c0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
90014c10:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
90014c14:	ad22      	add	r5, sp, #136	; 0x88
90014c16:	011b      	lsls	r3, r3, #4
90014c18:	f845 3d70 	str.w	r3, [r5, #-112]!
90014c1c:	4628      	mov	r0, r5
90014c1e:	f7ff fe75 	bl	9001490c <_ZNK8touchgfx7CWRUtil2Q54ceilEv>
90014c22:	8839      	ldrh	r1, [r7, #0]
90014c24:	88ba      	ldrh	r2, [r7, #4]
90014c26:	b280      	uxth	r0, r0
90014c28:	6823      	ldr	r3, [r4, #0]
90014c2a:	440a      	add	r2, r1
90014c2c:	1a09      	subs	r1, r1, r0
90014c2e:	4402      	add	r2, r0
90014c30:	f10d 000e 	add.w	r0, sp, #14
90014c34:	b209      	sxth	r1, r1
90014c36:	9000      	str	r0, [sp, #0]
90014c38:	b212      	sxth	r2, r2
90014c3a:	f8d3 8124 	ldr.w	r8, [r3, #292]	; 0x124
90014c3e:	4620      	mov	r0, r4
90014c40:	ab03      	add	r3, sp, #12
90014c42:	47c0      	blx	r8
90014c44:	2800      	cmp	r0, #0
90014c46:	d0de      	beq.n	90014c06 <_ZNK8touchgfx16GraphElementLine16drawCanvasWidgetERKNS_4RectE+0x1a>
90014c48:	f9b4 1114 	ldrsh.w	r1, [r4, #276]	; 0x114
90014c4c:	f8b4 311a 	ldrh.w	r3, [r4, #282]	; 0x11a
90014c50:	f9b4 0040 	ldrsh.w	r0, [r4, #64]	; 0x40
90014c54:	18ca      	adds	r2, r1, r3
90014c56:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
90014c5a:	f8ad 1012 	strh.w	r1, [sp, #18]
90014c5e:	4639      	mov	r1, r7
90014c60:	1a9b      	subs	r3, r3, r2
90014c62:	2200      	movs	r2, #0
90014c64:	f8ad 0014 	strh.w	r0, [sp, #20]
90014c68:	a804      	add	r0, sp, #16
90014c6a:	f8ad 3016 	strh.w	r3, [sp, #22]
90014c6e:	f8ad 2010 	strh.w	r2, [sp, #16]
90014c72:	f7fe f89f 	bl	90012db4 <_ZN8touchgfx4RectaNERKS0_>
90014c76:	aa04      	add	r2, sp, #16
90014c78:	4631      	mov	r1, r6
90014c7a:	4628      	mov	r0, r5
90014c7c:	f012 fa80 	bl	90027180 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE>
90014c80:	f9b4 7120 	ldrsh.w	r7, [r4, #288]	; 0x120
90014c84:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
90014c88:	2f00      	cmp	r7, #0
90014c8a:	f9bd 200e 	ldrsh.w	r2, [sp, #14]
90014c8e:	dd03      	ble.n	90014c98 <_ZNK8touchgfx16GraphElementLine16drawCanvasWidgetERKNS_4RectE+0xac>
90014c90:	42bb      	cmp	r3, r7
90014c92:	da01      	bge.n	90014c98 <_ZNK8touchgfx16GraphElementLine16drawCanvasWidgetERKNS_4RectE+0xac>
90014c94:	42ba      	cmp	r2, r7
90014c96:	da11      	bge.n	90014cbc <_ZNK8touchgfx16GraphElementLine16drawCanvasWidgetERKNS_4RectE+0xd0>
90014c98:	9200      	str	r2, [sp, #0]
90014c9a:	4622      	mov	r2, r4
90014c9c:	4629      	mov	r1, r5
90014c9e:	4630      	mov	r0, r6
90014ca0:	f7ff ff1a 	bl	90014ad8 <_ZNK8touchgfx16GraphElementLine14drawIndexRangeERNS_6CanvasEPKNS_17AbstractDataGraphEss>
90014ca4:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
90014ca8:	4628      	mov	r0, r5
90014caa:	f012 fb25 	bl	900272f8 <_ZN8touchgfx6Canvas6renderEh>
90014cae:	4b0b      	ldr	r3, [pc, #44]	; (90014cdc <_ZNK8touchgfx16GraphElementLine16drawCanvasWidgetERKNS_4RectE+0xf0>)
90014cb0:	4604      	mov	r4, r0
90014cb2:	a80e      	add	r0, sp, #56	; 0x38
90014cb4:	9306      	str	r3, [sp, #24]
90014cb6:	f000 ff19 	bl	90015aec <_ZN8touchgfx7OutlineD1Ev>
90014cba:	e7a5      	b.n	90014c08 <_ZNK8touchgfx16GraphElementLine16drawCanvasWidgetERKNS_4RectE+0x1c>
90014cbc:	1e7a      	subs	r2, r7, #1
90014cbe:	4629      	mov	r1, r5
90014cc0:	4630      	mov	r0, r6
90014cc2:	b212      	sxth	r2, r2
90014cc4:	9200      	str	r2, [sp, #0]
90014cc6:	4622      	mov	r2, r4
90014cc8:	f7ff ff06 	bl	90014ad8 <_ZNK8touchgfx16GraphElementLine14drawIndexRangeERNS_6CanvasEPKNS_17AbstractDataGraphEss>
90014ccc:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
90014cd0:	9300      	str	r3, [sp, #0]
90014cd2:	463b      	mov	r3, r7
90014cd4:	e7e1      	b.n	90014c9a <_ZNK8touchgfx16GraphElementLine16drawCanvasWidgetERKNS_4RectE+0xae>
90014cd6:	f8b3 311e 	ldrh.w	r3, [r3, #286]	; 0x11e
90014cda:	deff      	udf	#255	; 0xff
90014cdc:	9002c720 	.word	0x9002c720

90014ce0 <_ZNK8touchgfx25GraphWrapAndOverwriteData18indexToGlobalIndexEs>:
90014ce0:	f9b0 211c 	ldrsh.w	r2, [r0, #284]	; 0x11c
90014ce4:	f9b0 311e 	ldrsh.w	r3, [r0, #286]	; 0x11e
90014ce8:	4293      	cmp	r3, r2
90014cea:	da01      	bge.n	90014cf0 <_ZNK8touchgfx25GraphWrapAndOverwriteData18indexToGlobalIndexEs+0x10>
90014cec:	4608      	mov	r0, r1
90014cee:	4770      	bx	lr
90014cf0:	f9b0 3120 	ldrsh.w	r3, [r0, #288]	; 0x120
90014cf4:	f8d0 0148 	ldr.w	r0, [r0, #328]	; 0x148
90014cf8:	428b      	cmp	r3, r1
90014cfa:	bfc7      	ittee	gt
90014cfc:	1809      	addgt	r1, r1, r0
90014cfe:	1ac8      	subgt	r0, r1, r3
90014d00:	1ac0      	suble	r0, r0, r3
90014d02:	1a80      	suble	r0, r0, r2
90014d04:	bfd8      	it	le
90014d06:	1840      	addle	r0, r0, r1
90014d08:	4770      	bx	lr

90014d0a <_ZN8touchgfx25GraphWrapAndOverwriteData5clearEv>:
90014d0a:	b510      	push	{r4, lr}
90014d0c:	4604      	mov	r4, r0
90014d0e:	f7ff f9e0 	bl	900140d2 <_ZN8touchgfx17AbstractDataGraph5clearEv>
90014d12:	2300      	movs	r3, #0
90014d14:	f8a4 314c 	strh.w	r3, [r4, #332]	; 0x14c
90014d18:	bd10      	pop	{r4, pc}

90014d1a <_ZN8touchgfx25GraphWrapAndOverwriteData14beforeAddValueEv>:
90014d1a:	b570      	push	{r4, r5, r6, lr}
90014d1c:	f9b0 314c 	ldrsh.w	r3, [r0, #332]	; 0x14c
90014d20:	4604      	mov	r4, r0
90014d22:	bb13      	cbnz	r3, 90014d6a <_ZN8touchgfx25GraphWrapAndOverwriteData14beforeAddValueEv+0x50>
90014d24:	f9b0 211c 	ldrsh.w	r2, [r0, #284]	; 0x11c
90014d28:	f9b0 311e 	ldrsh.w	r3, [r0, #286]	; 0x11e
90014d2c:	429a      	cmp	r2, r3
90014d2e:	dc1c      	bgt.n	90014d6a <_ZN8touchgfx25GraphWrapAndOverwriteData14beforeAddValueEv+0x50>
90014d30:	6803      	ldr	r3, [r0, #0]
90014d32:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
90014d36:	4798      	blx	r3
90014d38:	6823      	ldr	r3, [r4, #0]
90014d3a:	4605      	mov	r5, r0
90014d3c:	4620      	mov	r0, r4
90014d3e:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
90014d42:	4798      	blx	r3
90014d44:	4606      	mov	r6, r0
90014d46:	2d00      	cmp	r5, #0
90014d48:	da05      	bge.n	90014d56 <_ZN8touchgfx25GraphWrapAndOverwriteData14beforeAddValueEv+0x3c>
90014d4a:	b229      	sxth	r1, r5
90014d4c:	4620      	mov	r0, r4
90014d4e:	f7ff fbdb 	bl	90014508 <_ZN8touchgfx17AbstractDataGraph22invalidateXAxisPointAtEs>
90014d52:	3501      	adds	r5, #1
90014d54:	e7f7      	b.n	90014d46 <_ZN8touchgfx25GraphWrapAndOverwriteData14beforeAddValueEv+0x2c>
90014d56:	f9b4 511c 	ldrsh.w	r5, [r4, #284]	; 0x11c
90014d5a:	42b5      	cmp	r5, r6
90014d5c:	dc05      	bgt.n	90014d6a <_ZN8touchgfx25GraphWrapAndOverwriteData14beforeAddValueEv+0x50>
90014d5e:	b229      	sxth	r1, r5
90014d60:	4620      	mov	r0, r4
90014d62:	f7ff fbd1 	bl	90014508 <_ZN8touchgfx17AbstractDataGraph22invalidateXAxisPointAtEs>
90014d66:	3501      	adds	r5, #1
90014d68:	e7f7      	b.n	90014d5a <_ZN8touchgfx25GraphWrapAndOverwriteData14beforeAddValueEv+0x40>
90014d6a:	f9b4 211e 	ldrsh.w	r2, [r4, #286]	; 0x11e
90014d6e:	f9b4 311c 	ldrsh.w	r3, [r4, #284]	; 0x11c
90014d72:	429a      	cmp	r2, r3
90014d74:	db0b      	blt.n	90014d8e <_ZN8touchgfx25GraphWrapAndOverwriteData14beforeAddValueEv+0x74>
90014d76:	f9b4 114c 	ldrsh.w	r1, [r4, #332]	; 0x14c
90014d7a:	4620      	mov	r0, r4
90014d7c:	f7ff fbb4 	bl	900144e8 <_ZN8touchgfx17AbstractDataGraph22invalidateGraphPointAtEs>
90014d80:	f9b4 114c 	ldrsh.w	r1, [r4, #332]	; 0x14c
90014d84:	4620      	mov	r0, r4
90014d86:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
90014d8a:	f7ff bbbd 	b.w	90014508 <_ZN8touchgfx17AbstractDataGraph22invalidateXAxisPointAtEs>
90014d8e:	bd70      	pop	{r4, r5, r6, pc}

90014d90 <_ZN8touchgfx25GraphWrapAndOverwriteData8addValueEi>:
90014d90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
90014d94:	f9b0 514c 	ldrsh.w	r5, [r0, #332]	; 0x14c
90014d98:	4604      	mov	r4, r0
90014d9a:	f9b0 211c 	ldrsh.w	r2, [r0, #284]	; 0x11c
90014d9e:	4688      	mov	r8, r1
90014da0:	1c6e      	adds	r6, r5, #1
90014da2:	f8d0 7144 	ldr.w	r7, [r0, #324]	; 0x144
90014da6:	4629      	mov	r1, r5
90014da8:	b236      	sxth	r6, r6
90014daa:	fb96 f3f2 	sdiv	r3, r6, r2
90014dae:	fb02 6313 	mls	r3, r2, r3, r6
90014db2:	f8a0 314c 	strh.w	r3, [r0, #332]	; 0x14c
90014db6:	f9b0 311e 	ldrsh.w	r3, [r0, #286]	; 0x11e
90014dba:	42ab      	cmp	r3, r5
90014dbc:	6803      	ldr	r3, [r0, #0]
90014dbe:	bf08      	it	eq
90014dc0:	f8a0 611e 	strheq.w	r6, [r0, #286]	; 0x11e
90014dc4:	f8d3 3180 	ldr.w	r3, [r3, #384]	; 0x180
90014dc8:	4798      	blx	r3
90014dca:	4629      	mov	r1, r5
90014dcc:	f847 8020 	str.w	r8, [r7, r0, lsl #2]
90014dd0:	4620      	mov	r0, r4
90014dd2:	f8a4 6120 	strh.w	r6, [r4, #288]	; 0x120
90014dd6:	f7ff fb87 	bl	900144e8 <_ZN8touchgfx17AbstractDataGraph22invalidateGraphPointAtEs>
90014dda:	f9b4 211e 	ldrsh.w	r2, [r4, #286]	; 0x11e
90014dde:	f9b4 311c 	ldrsh.w	r3, [r4, #284]	; 0x11c
90014de2:	429a      	cmp	r2, r3
90014de4:	db28      	blt.n	90014e38 <_ZN8touchgfx25GraphWrapAndOverwriteData8addValueEi+0xa8>
90014de6:	4629      	mov	r1, r5
90014de8:	4620      	mov	r0, r4
90014dea:	f7ff fb8d 	bl	90014508 <_ZN8touchgfx17AbstractDataGraph22invalidateXAxisPointAtEs>
90014dee:	bb1d      	cbnz	r5, 90014e38 <_ZN8touchgfx25GraphWrapAndOverwriteData8addValueEi+0xa8>
90014df0:	f9b4 211e 	ldrsh.w	r2, [r4, #286]	; 0x11e
90014df4:	f9b4 311c 	ldrsh.w	r3, [r4, #284]	; 0x11c
90014df8:	429a      	cmp	r2, r3
90014dfa:	db1d      	blt.n	90014e38 <_ZN8touchgfx25GraphWrapAndOverwriteData8addValueEi+0xa8>
90014dfc:	6823      	ldr	r3, [r4, #0]
90014dfe:	4620      	mov	r0, r4
90014e00:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
90014e04:	4798      	blx	r3
90014e06:	6823      	ldr	r3, [r4, #0]
90014e08:	4606      	mov	r6, r0
90014e0a:	4620      	mov	r0, r4
90014e0c:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
90014e10:	4798      	blx	r3
90014e12:	4607      	mov	r7, r0
90014e14:	2e00      	cmp	r6, #0
90014e16:	da05      	bge.n	90014e24 <_ZN8touchgfx25GraphWrapAndOverwriteData8addValueEi+0x94>
90014e18:	b231      	sxth	r1, r6
90014e1a:	4620      	mov	r0, r4
90014e1c:	f7ff fb74 	bl	90014508 <_ZN8touchgfx17AbstractDataGraph22invalidateXAxisPointAtEs>
90014e20:	3601      	adds	r6, #1
90014e22:	e7f7      	b.n	90014e14 <_ZN8touchgfx25GraphWrapAndOverwriteData8addValueEi+0x84>
90014e24:	f9b4 611c 	ldrsh.w	r6, [r4, #284]	; 0x11c
90014e28:	42be      	cmp	r6, r7
90014e2a:	dc05      	bgt.n	90014e38 <_ZN8touchgfx25GraphWrapAndOverwriteData8addValueEi+0xa8>
90014e2c:	b231      	sxth	r1, r6
90014e2e:	4620      	mov	r0, r4
90014e30:	f7ff fb6a 	bl	90014508 <_ZN8touchgfx17AbstractDataGraph22invalidateXAxisPointAtEs>
90014e34:	3601      	adds	r6, #1
90014e36:	e7f7      	b.n	90014e28 <_ZN8touchgfx25GraphWrapAndOverwriteData8addValueEi+0x98>
90014e38:	4628      	mov	r0, r5
90014e3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

90014e3e <_ZNK8touchgfx14SnapshotWidget17invalidateContentEv>:
90014e3e:	b508      	push	{r3, lr}
90014e40:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
90014e44:	b10b      	cbz	r3, 90014e4a <_ZNK8touchgfx14SnapshotWidget17invalidateContentEv+0xc>
90014e46:	f7ed fa79 	bl	9000233c <_ZNK8touchgfx8Drawable17invalidateContentEv>
90014e4a:	bd08      	pop	{r3, pc}

90014e4c <_ZN8touchgfx14SnapshotWidget12makeSnapshotEv>:
90014e4c:	6803      	ldr	r3, [r0, #0]
90014e4e:	f64f 71fe 	movw	r1, #65534	; 0xfffe
90014e52:	6e5b      	ldr	r3, [r3, #100]	; 0x64
90014e54:	4718      	bx	r3

90014e56 <_ZN8touchgfx14SnapshotWidgetD1Ev>:
90014e56:	4770      	bx	lr

90014e58 <_ZN8touchgfx14SnapshotWidgetD0Ev>:
90014e58:	b510      	push	{r4, lr}
90014e5a:	4604      	mov	r4, r0
90014e5c:	212c      	movs	r1, #44	; 0x2c
90014e5e:	f012 fbca 	bl	900275f6 <_ZdlPvj>
90014e62:	4620      	mov	r0, r4
90014e64:	bd10      	pop	{r4, pc}

90014e66 <_ZNK8touchgfx14SnapshotWidget12getSolidRectEv>:
90014e66:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
90014e6a:	2bff      	cmp	r3, #255	; 0xff
90014e6c:	b510      	push	{r4, lr}
90014e6e:	d104      	bne.n	90014e7a <_ZNK8touchgfx14SnapshotWidget12getSolidRectEv+0x14>
90014e70:	8cca      	ldrh	r2, [r1, #38]	; 0x26
90014e72:	f64f 73ff 	movw	r3, #65535	; 0xffff
90014e76:	429a      	cmp	r2, r3
90014e78:	d105      	bne.n	90014e86 <_ZNK8touchgfx14SnapshotWidget12getSolidRectEv+0x20>
90014e7a:	2300      	movs	r3, #0
90014e7c:	8003      	strh	r3, [r0, #0]
90014e7e:	8043      	strh	r3, [r0, #2]
90014e80:	8083      	strh	r3, [r0, #4]
90014e82:	80c3      	strh	r3, [r0, #6]
90014e84:	bd10      	pop	{r4, pc}
90014e86:	2300      	movs	r3, #0
90014e88:	f9b1 4008 	ldrsh.w	r4, [r1, #8]
90014e8c:	f9b1 200a 	ldrsh.w	r2, [r1, #10]
90014e90:	8003      	strh	r3, [r0, #0]
90014e92:	8043      	strh	r3, [r0, #2]
90014e94:	8084      	strh	r4, [r0, #4]
90014e96:	80c2      	strh	r2, [r0, #6]
90014e98:	e7f4      	b.n	90014e84 <_ZNK8touchgfx14SnapshotWidget12getSolidRectEv+0x1e>

90014e9a <_ZNK8touchgfx14SnapshotWidget4drawERKNS_4RectE>:
90014e9a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
90014e9e:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
90014ea2:	b087      	sub	sp, #28
90014ea4:	4604      	mov	r4, r0
90014ea6:	4689      	mov	r9, r1
90014ea8:	b363      	cbz	r3, 90014f04 <_ZNK8touchgfx14SnapshotWidget4drawERKNS_4RectE+0x6a>
90014eaa:	8cc2      	ldrh	r2, [r0, #38]	; 0x26
90014eac:	f64f 73ff 	movw	r3, #65535	; 0xffff
90014eb0:	429a      	cmp	r2, r3
90014eb2:	d027      	beq.n	90014f04 <_ZNK8touchgfx14SnapshotWidget4drawERKNS_4RectE+0x6a>
90014eb4:	ad06      	add	r5, sp, #24
90014eb6:	2700      	movs	r7, #0
90014eb8:	f825 2d0c 	strh.w	r2, [r5, #-12]!
90014ebc:	4628      	mov	r0, r5
90014ebe:	f006 fa97 	bl	9001b3f0 <_ZNK8touchgfx6Bitmap8getWidthEv>
90014ec2:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
90014ec6:	a904      	add	r1, sp, #16
90014ec8:	f8ad 0014 	strh.w	r0, [sp, #20]
90014ecc:	f8ad 3016 	strh.w	r3, [sp, #22]
90014ed0:	4620      	mov	r0, r4
90014ed2:	6823      	ldr	r3, [r4, #0]
90014ed4:	9704      	str	r7, [sp, #16]
90014ed6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90014ed8:	4798      	blx	r3
90014eda:	f7fe fa49 	bl	90013370 <_ZN8touchgfx3HAL3lcdEv>
90014ede:	6803      	ldr	r3, [r0, #0]
90014ee0:	4606      	mov	r6, r0
90014ee2:	4628      	mov	r0, r5
90014ee4:	f8d3 800c 	ldr.w	r8, [r3, #12]
90014ee8:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
90014eea:	f8ad 300c 	strh.w	r3, [sp, #12]
90014eee:	f006 fb6b 	bl	9001b5c8 <_ZNK8touchgfx6Bitmap7getDataEv>
90014ef2:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
90014ef6:	4601      	mov	r1, r0
90014ef8:	9701      	str	r7, [sp, #4]
90014efa:	aa04      	add	r2, sp, #16
90014efc:	9300      	str	r3, [sp, #0]
90014efe:	4630      	mov	r0, r6
90014f00:	464b      	mov	r3, r9
90014f02:	47c0      	blx	r8
90014f04:	b007      	add	sp, #28
90014f06:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

90014f0a <_ZN8touchgfx14SnapshotWidget12makeSnapshotEt>:
90014f0a:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
90014f0c:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
90014f10:	460d      	mov	r5, r1
90014f12:	f9b0 2008 	ldrsh.w	r2, [r0, #8]
90014f16:	2100      	movs	r1, #0
90014f18:	f8ad 3006 	strh.w	r3, [sp, #6]
90014f1c:	4604      	mov	r4, r0
90014f1e:	6803      	ldr	r3, [r0, #0]
90014f20:	f8ad 2004 	strh.w	r2, [sp, #4]
90014f24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
90014f26:	9100      	str	r1, [sp, #0]
90014f28:	4669      	mov	r1, sp
90014f2a:	4798      	blx	r3
90014f2c:	4621      	mov	r1, r4
90014f2e:	a802      	add	r0, sp, #8
90014f30:	f004 fa0e 	bl	90019350 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
90014f34:	f7fe fa1c 	bl	90013370 <_ZN8touchgfx3HAL3lcdEv>
90014f38:	6803      	ldr	r3, [r0, #0]
90014f3a:	aa02      	add	r2, sp, #8
90014f3c:	4669      	mov	r1, sp
90014f3e:	695e      	ldr	r6, [r3, #20]
90014f40:	462b      	mov	r3, r5
90014f42:	47b0      	blx	r6
90014f44:	f64f 73ff 	movw	r3, #65535	; 0xffff
90014f48:	2800      	cmp	r0, #0
90014f4a:	bf08      	it	eq
90014f4c:	461d      	moveq	r5, r3
90014f4e:	84e5      	strh	r5, [r4, #38]	; 0x26
90014f50:	b004      	add	sp, #16
90014f52:	bd70      	pop	{r4, r5, r6, pc}

90014f54 <_ZN8touchgfx14SnapshotWidgetC1Ev>:
90014f54:	2200      	movs	r2, #0
90014f56:	8082      	strh	r2, [r0, #4]
90014f58:	80c2      	strh	r2, [r0, #6]
90014f5a:	8102      	strh	r2, [r0, #8]
90014f5c:	8142      	strh	r2, [r0, #10]
90014f5e:	8182      	strh	r2, [r0, #12]
90014f60:	81c2      	strh	r2, [r0, #14]
90014f62:	8202      	strh	r2, [r0, #16]
90014f64:	8242      	strh	r2, [r0, #18]
90014f66:	61c2      	str	r2, [r0, #28]
90014f68:	8402      	strh	r2, [r0, #32]
90014f6a:	8442      	strh	r2, [r0, #34]	; 0x22
90014f6c:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
90014f70:	e9c0 2205 	strd	r2, r2, [r0, #20]
90014f74:	2201      	movs	r2, #1
90014f76:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
90014f7a:	4a04      	ldr	r2, [pc, #16]	; (90014f8c <_ZN8touchgfx14SnapshotWidgetC1Ev+0x38>)
90014f7c:	6002      	str	r2, [r0, #0]
90014f7e:	f64f 72ff 	movw	r2, #65535	; 0xffff
90014f82:	84c2      	strh	r2, [r0, #38]	; 0x26
90014f84:	f880 2028 	strb.w	r2, [r0, #40]	; 0x28
90014f88:	4770      	bx	lr
90014f8a:	bf00      	nop
90014f8c:	9002c11c 	.word	0x9002c11c

90014f90 <_ZN8touchgfx13AnimatedImage12setBitmapEndERKNS_6BitmapE>:
90014f90:	880b      	ldrh	r3, [r1, #0]
90014f92:	8643      	strh	r3, [r0, #50]	; 0x32
90014f94:	4770      	bx	lr

90014f96 <_ZN8touchgfx13AnimatedImageD1Ev>:
90014f96:	4770      	bx	lr

90014f98 <_ZN8touchgfx13AnimatedImage9setBitmapERKNS_6BitmapE>:
90014f98:	880b      	ldrh	r3, [r1, #0]
90014f9a:	8603      	strh	r3, [r0, #48]	; 0x30
90014f9c:	f000 bd33 	b.w	90015a06 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>

90014fa0 <_ZN8touchgfx13AnimatedImage13stopAnimationEv>:
90014fa0:	b513      	push	{r0, r1, r4, lr}
90014fa2:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
90014fa6:	4604      	mov	r4, r0
90014fa8:	b143      	cbz	r3, 90014fbc <_ZN8touchgfx13AnimatedImage13stopAnimationEv+0x1c>
90014faa:	f003 f8a7 	bl	900180fc <_ZN8touchgfx11Application11getInstanceEv>
90014fae:	4621      	mov	r1, r4
90014fb0:	3004      	adds	r0, #4
90014fb2:	f003 f8c8 	bl	90018146 <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE>
90014fb6:	2300      	movs	r3, #0
90014fb8:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
90014fbc:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
90014fc0:	b163      	cbz	r3, 90014fdc <_ZN8touchgfx13AnimatedImage13stopAnimationEv+0x3c>
90014fc2:	8e63      	ldrh	r3, [r4, #50]	; 0x32
90014fc4:	a901      	add	r1, sp, #4
90014fc6:	4620      	mov	r0, r4
90014fc8:	f8ad 3004 	strh.w	r3, [sp, #4]
90014fcc:	f000 fd1b 	bl	90015a06 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
90014fd0:	6823      	ldr	r3, [r4, #0]
90014fd2:	4620      	mov	r0, r4
90014fd4:	695b      	ldr	r3, [r3, #20]
90014fd6:	4798      	blx	r3
90014fd8:	b002      	add	sp, #8
90014fda:	bd10      	pop	{r4, pc}
90014fdc:	8e23      	ldrh	r3, [r4, #48]	; 0x30
90014fde:	e7f1      	b.n	90014fc4 <_ZN8touchgfx13AnimatedImage13stopAnimationEv+0x24>

90014fe0 <_ZN8touchgfx13AnimatedImage14startAnimationEbbb>:
90014fe0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
90014fe2:	f64f 77ff 	movw	r7, #65535	; 0xffff
90014fe6:	8e05      	ldrh	r5, [r0, #48]	; 0x30
90014fe8:	4604      	mov	r4, r0
90014fea:	42bd      	cmp	r5, r7
90014fec:	d01a      	beq.n	90015024 <_ZN8touchgfx13AnimatedImage14startAnimationEbbb+0x44>
90014fee:	8e46      	ldrh	r6, [r0, #50]	; 0x32
90014ff0:	42be      	cmp	r6, r7
90014ff2:	d017      	beq.n	90015024 <_ZN8touchgfx13AnimatedImage14startAnimationEbbb+0x44>
90014ff4:	f880 1036 	strb.w	r1, [r0, #54]	; 0x36
90014ff8:	f880 3037 	strb.w	r3, [r0, #55]	; 0x37
90014ffc:	b1a1      	cbz	r1, 90015028 <_ZN8touchgfx13AnimatedImage14startAnimationEbbb+0x48>
90014ffe:	b142      	cbz	r2, 90015012 <_ZN8touchgfx13AnimatedImage14startAnimationEbbb+0x32>
90015000:	a902      	add	r1, sp, #8
90015002:	f821 6d04 	strh.w	r6, [r1, #-4]!
90015006:	f000 fcfe 	bl	90015a06 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
9001500a:	6823      	ldr	r3, [r4, #0]
9001500c:	4620      	mov	r0, r4
9001500e:	695b      	ldr	r3, [r3, #20]
90015010:	4798      	blx	r3
90015012:	f003 f873 	bl	900180fc <_ZN8touchgfx11Application11getInstanceEv>
90015016:	4621      	mov	r1, r4
90015018:	3004      	adds	r0, #4
9001501a:	f003 f93d 	bl	90018298 <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE>
9001501e:	2301      	movs	r3, #1
90015020:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
90015024:	b003      	add	sp, #12
90015026:	bdf0      	pop	{r4, r5, r6, r7, pc}
90015028:	2a00      	cmp	r2, #0
9001502a:	d0f2      	beq.n	90015012 <_ZN8touchgfx13AnimatedImage14startAnimationEbbb+0x32>
9001502c:	a902      	add	r1, sp, #8
9001502e:	f821 5d04 	strh.w	r5, [r1, #-4]!
90015032:	e7e8      	b.n	90015006 <_ZN8touchgfx13AnimatedImage14startAnimationEbbb+0x26>

90015034 <_ZN8touchgfx13AnimatedImageD0Ev>:
90015034:	b510      	push	{r4, lr}
90015036:	4604      	mov	r4, r0
90015038:	213c      	movs	r1, #60	; 0x3c
9001503a:	f012 fadc 	bl	900275f6 <_ZdlPvj>
9001503e:	4620      	mov	r0, r4
90015040:	bd10      	pop	{r4, pc}

90015042 <_ZN8touchgfx13AnimatedImage14pauseAnimationEv>:
90015042:	b510      	push	{r4, lr}
90015044:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
90015048:	4604      	mov	r4, r0
9001504a:	b14b      	cbz	r3, 90015060 <_ZN8touchgfx13AnimatedImage14pauseAnimationEv+0x1e>
9001504c:	f003 f856 	bl	900180fc <_ZN8touchgfx11Application11getInstanceEv>
90015050:	4621      	mov	r1, r4
90015052:	3004      	adds	r0, #4
90015054:	f003 f877 	bl	90018146 <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE>
90015058:	2300      	movs	r3, #0
9001505a:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
9001505e:	bd10      	pop	{r4, pc}
90015060:	f003 f84c 	bl	900180fc <_ZN8touchgfx11Application11getInstanceEv>
90015064:	4621      	mov	r1, r4
90015066:	3004      	adds	r0, #4
90015068:	f003 f916 	bl	90018298 <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE>
9001506c:	2301      	movs	r3, #1
9001506e:	e7f4      	b.n	9001505a <_ZN8touchgfx13AnimatedImage14pauseAnimationEv+0x18>

90015070 <_ZN8touchgfx13AnimatedImage15handleTickEventEv>:
90015070:	b537      	push	{r0, r1, r2, r4, r5, lr}
90015072:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
90015076:	4604      	mov	r4, r0
90015078:	2b00      	cmp	r3, #0
9001507a:	d042      	beq.n	90015102 <_ZN8touchgfx13AnimatedImage15handleTickEventEv+0x92>
9001507c:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
90015080:	f890 2034 	ldrb.w	r2, [r0, #52]	; 0x34
90015084:	3301      	adds	r3, #1
90015086:	b2db      	uxtb	r3, r3
90015088:	429a      	cmp	r2, r3
9001508a:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
9001508e:	d138      	bne.n	90015102 <_ZN8touchgfx13AnimatedImage15handleTickEventEv+0x92>
90015090:	2300      	movs	r3, #0
90015092:	8e41      	ldrh	r1, [r0, #50]	; 0x32
90015094:	f890 2036 	ldrb.w	r2, [r0, #54]	; 0x36
90015098:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
9001509c:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
9001509e:	4299      	cmp	r1, r3
900150a0:	d100      	bne.n	900150a4 <_ZN8touchgfx13AnimatedImage15handleTickEventEv+0x34>
900150a2:	b122      	cbz	r2, 900150ae <_ZN8touchgfx13AnimatedImage15handleTickEventEv+0x3e>
900150a4:	8e21      	ldrh	r1, [r4, #48]	; 0x30
900150a6:	4299      	cmp	r1, r3
900150a8:	d12f      	bne.n	9001510a <_ZN8touchgfx13AnimatedImage15handleTickEventEv+0x9a>
900150aa:	2a00      	cmp	r2, #0
900150ac:	d034      	beq.n	90015118 <_ZN8touchgfx13AnimatedImage15handleTickEventEv+0xa8>
900150ae:	f894 5037 	ldrb.w	r5, [r4, #55]	; 0x37
900150b2:	b93d      	cbnz	r5, 900150c4 <_ZN8touchgfx13AnimatedImage15handleTickEventEv+0x54>
900150b4:	f003 f822 	bl	900180fc <_ZN8touchgfx11Application11getInstanceEv>
900150b8:	4621      	mov	r1, r4
900150ba:	3004      	adds	r0, #4
900150bc:	f003 f843 	bl	90018146 <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE>
900150c0:	f884 5038 	strb.w	r5, [r4, #56]	; 0x38
900150c4:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
900150c6:	b140      	cbz	r0, 900150da <_ZN8touchgfx13AnimatedImage15handleTickEventEv+0x6a>
900150c8:	6803      	ldr	r3, [r0, #0]
900150ca:	68db      	ldr	r3, [r3, #12]
900150cc:	4798      	blx	r3
900150ce:	b120      	cbz	r0, 900150da <_ZN8touchgfx13AnimatedImage15handleTickEventEv+0x6a>
900150d0:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
900150d2:	4621      	mov	r1, r4
900150d4:	6803      	ldr	r3, [r0, #0]
900150d6:	689b      	ldr	r3, [r3, #8]
900150d8:	4798      	blx	r3
900150da:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
900150de:	b183      	cbz	r3, 90015102 <_ZN8touchgfx13AnimatedImage15handleTickEventEv+0x92>
900150e0:	f894 3037 	ldrb.w	r3, [r4, #55]	; 0x37
900150e4:	b16b      	cbz	r3, 90015102 <_ZN8touchgfx13AnimatedImage15handleTickEventEv+0x92>
900150e6:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
900150ea:	b163      	cbz	r3, 90015106 <_ZN8touchgfx13AnimatedImage15handleTickEventEv+0x96>
900150ec:	8e63      	ldrh	r3, [r4, #50]	; 0x32
900150ee:	a901      	add	r1, sp, #4
900150f0:	f8ad 3004 	strh.w	r3, [sp, #4]
900150f4:	4620      	mov	r0, r4
900150f6:	f000 fc86 	bl	90015a06 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
900150fa:	6823      	ldr	r3, [r4, #0]
900150fc:	4620      	mov	r0, r4
900150fe:	695b      	ldr	r3, [r3, #20]
90015100:	4798      	blx	r3
90015102:	b003      	add	sp, #12
90015104:	bd30      	pop	{r4, r5, pc}
90015106:	8e23      	ldrh	r3, [r4, #48]	; 0x30
90015108:	e7f1      	b.n	900150ee <_ZN8touchgfx13AnimatedImage15handleTickEventEv+0x7e>
9001510a:	b12a      	cbz	r2, 90015118 <_ZN8touchgfx13AnimatedImage15handleTickEventEv+0xa8>
9001510c:	3b01      	subs	r3, #1
9001510e:	b29b      	uxth	r3, r3
90015110:	a902      	add	r1, sp, #8
90015112:	f821 3d04 	strh.w	r3, [r1, #-4]!
90015116:	e7ed      	b.n	900150f4 <_ZN8touchgfx13AnimatedImage15handleTickEventEv+0x84>
90015118:	3301      	adds	r3, #1
9001511a:	e7f8      	b.n	9001510e <_ZN8touchgfx13AnimatedImage15handleTickEventEv+0x9e>

9001511c <_ZNK8touchgfx5Image17invalidateContentEv>:
9001511c:	f890 2028 	ldrb.w	r2, [r0, #40]	; 0x28
90015120:	b12a      	cbz	r2, 9001512e <_ZNK8touchgfx5Image17invalidateContentEv+0x12>
90015122:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
90015126:	b112      	cbz	r2, 9001512e <_ZNK8touchgfx5Image17invalidateContentEv+0x12>
90015128:	6803      	ldr	r3, [r0, #0]
9001512a:	695b      	ldr	r3, [r3, #20]
9001512c:	4718      	bx	r3
9001512e:	4770      	bx	lr

90015130 <_ZN8touchgfx13AnimatedImage10setBitmapsEtt>:
90015130:	b573      	push	{r0, r1, r4, r5, r6, lr}
90015132:	ac02      	add	r4, sp, #8
90015134:	6803      	ldr	r3, [r0, #0]
90015136:	4605      	mov	r5, r0
90015138:	4616      	mov	r6, r2
9001513a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
9001513c:	f824 1d04 	strh.w	r1, [r4, #-4]!
90015140:	4621      	mov	r1, r4
90015142:	4798      	blx	r3
90015144:	682b      	ldr	r3, [r5, #0]
90015146:	4621      	mov	r1, r4
90015148:	4628      	mov	r0, r5
9001514a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
9001514c:	f8ad 6004 	strh.w	r6, [sp, #4]
90015150:	4798      	blx	r3
90015152:	b002      	add	sp, #8
90015154:	bd70      	pop	{r4, r5, r6, pc}

90015156 <_ZN8touchgfx13AnimatedImage22setUpdateTicksIntervalEh>:
90015156:	2300      	movs	r3, #0
90015158:	f880 1034 	strb.w	r1, [r0, #52]	; 0x34
9001515c:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
90015160:	4770      	bx	lr

90015162 <_ZNK8touchgfx8TextArea12getWildcard1Ev>:
90015162:	2000      	movs	r0, #0
90015164:	4770      	bx	lr
	...

90015168 <_ZNK8touchgfx8TextArea12getAlignmentEv>:
90015168:	4b07      	ldr	r3, [pc, #28]	; (90015188 <_ZNK8touchgfx8TextArea12getAlignmentEv+0x20>)
9001516a:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
9001516c:	881b      	ldrh	r3, [r3, #0]
9001516e:	4293      	cmp	r3, r2
90015170:	bf81      	itttt	hi
90015172:	4b06      	ldrhi	r3, [pc, #24]	; (9001518c <_ZNK8touchgfx8TextArea12getAlignmentEv+0x24>)
90015174:	681b      	ldrhi	r3, [r3, #0]
90015176:	eb03 0342 	addhi.w	r3, r3, r2, lsl #1
9001517a:	7858      	ldrbhi	r0, [r3, #1]
9001517c:	bf8c      	ite	hi
9001517e:	f000 0003 	andhi.w	r0, r0, #3
90015182:	2000      	movls	r0, #0
90015184:	4770      	bx	lr
90015186:	bf00      	nop
90015188:	24028248 	.word	0x24028248
9001518c:	24028244 	.word	0x24028244

90015190 <_ZN8touchgfx8TextAreaD1Ev>:
90015190:	4770      	bx	lr
	...

90015194 <_ZNK8touchgfx8TextArea13getTextHeightEv>:
90015194:	4b11      	ldr	r3, [pc, #68]	; (900151dc <_ZNK8touchgfx8TextArea13getTextHeightEv+0x48>)
90015196:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
9001519a:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
9001519c:	4604      	mov	r4, r0
9001519e:	881b      	ldrh	r3, [r3, #0]
900151a0:	428b      	cmp	r3, r1
900151a2:	d918      	bls.n	900151d6 <_ZNK8touchgfx8TextArea13getTextHeightEv+0x42>
900151a4:	6803      	ldr	r3, [r0, #0]
900151a6:	6f9d      	ldr	r5, [r3, #120]	; 0x78
900151a8:	4b0d      	ldr	r3, [pc, #52]	; (900151e0 <_ZNK8touchgfx8TextArea13getTextHeightEv+0x4c>)
900151aa:	6818      	ldr	r0, [r3, #0]
900151ac:	f7f3 f852 	bl	90008254 <_ZNK8touchgfx5Texts7getTextEt>
900151b0:	6823      	ldr	r3, [r4, #0]
900151b2:	4606      	mov	r6, r0
900151b4:	4620      	mov	r0, r4
900151b6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
900151b8:	4798      	blx	r3
900151ba:	6823      	ldr	r3, [r4, #0]
900151bc:	4607      	mov	r7, r0
900151be:	4620      	mov	r0, r4
900151c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
900151c4:	4798      	blx	r3
900151c6:	463a      	mov	r2, r7
900151c8:	4603      	mov	r3, r0
900151ca:	4631      	mov	r1, r6
900151cc:	4620      	mov	r0, r4
900151ce:	46ac      	mov	ip, r5
900151d0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
900151d4:	4760      	bx	ip
900151d6:	2000      	movs	r0, #0
900151d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
900151dc:	24028248 	.word	0x24028248
900151e0:	24028250 	.word	0x24028250

900151e4 <_ZNK8touchgfx8TextArea12getTextWidthEv>:
900151e4:	4b18      	ldr	r3, [pc, #96]	; (90015248 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x64>)
900151e6:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
900151ea:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
900151ec:	4604      	mov	r4, r0
900151ee:	881b      	ldrh	r3, [r3, #0]
900151f0:	428b      	cmp	r3, r1
900151f2:	d926      	bls.n	90015242 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x5e>
900151f4:	4b15      	ldr	r3, [pc, #84]	; (9001524c <_ZNK8touchgfx8TextArea12getTextWidthEv+0x68>)
900151f6:	681b      	ldr	r3, [r3, #0]
900151f8:	eb03 0241 	add.w	r2, r3, r1, lsl #1
900151fc:	f813 0011 	ldrb.w	r0, [r3, r1, lsl #1]
90015200:	4b13      	ldr	r3, [pc, #76]	; (90015250 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x6c>)
90015202:	7855      	ldrb	r5, [r2, #1]
90015204:	681b      	ldr	r3, [r3, #0]
90015206:	f3c5 0581 	ubfx	r5, r5, #2, #2
9001520a:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
9001520e:	6833      	ldr	r3, [r6, #0]
90015210:	69df      	ldr	r7, [r3, #28]
90015212:	4b10      	ldr	r3, [pc, #64]	; (90015254 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x70>)
90015214:	6818      	ldr	r0, [r3, #0]
90015216:	f7f3 f81d 	bl	90008254 <_ZNK8touchgfx5Texts7getTextEt>
9001521a:	6823      	ldr	r3, [r4, #0]
9001521c:	4680      	mov	r8, r0
9001521e:	4620      	mov	r0, r4
90015220:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
90015222:	4798      	blx	r3
90015224:	6823      	ldr	r3, [r4, #0]
90015226:	4681      	mov	r9, r0
90015228:	4620      	mov	r0, r4
9001522a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
9001522e:	4798      	blx	r3
90015230:	464b      	mov	r3, r9
90015232:	9000      	str	r0, [sp, #0]
90015234:	4642      	mov	r2, r8
90015236:	4629      	mov	r1, r5
90015238:	4630      	mov	r0, r6
9001523a:	47b8      	blx	r7
9001523c:	b003      	add	sp, #12
9001523e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
90015242:	2000      	movs	r0, #0
90015244:	e7fa      	b.n	9001523c <_ZNK8touchgfx8TextArea12getTextWidthEv+0x58>
90015246:	bf00      	nop
90015248:	24028248 	.word	0x24028248
9001524c:	24028244 	.word	0x24028244
90015250:	2402824c 	.word	0x2402824c
90015254:	24028250 	.word	0x24028250

90015258 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz>:
90015258:	b40e      	push	{r1, r2, r3}
9001525a:	4b30      	ldr	r3, [pc, #192]	; (9001531c <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xc4>)
9001525c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
90015260:	881a      	ldrh	r2, [r3, #0]
90015262:	b09d      	sub	sp, #116	; 0x74
90015264:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
90015266:	4604      	mov	r4, r0
90015268:	429a      	cmp	r2, r3
9001526a:	d954      	bls.n	90015316 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xbe>
9001526c:	aa26      	add	r2, sp, #152	; 0x98
9001526e:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 90015320 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xc8>
90015272:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 90015324 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xcc>
90015276:	9202      	str	r2, [sp, #8]
90015278:	f8d9 2000 	ldr.w	r2, [r9]
9001527c:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
90015280:	f8d8 3000 	ldr.w	r3, [r8]
90015284:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
90015288:	682b      	ldr	r3, [r5, #0]
9001528a:	4628      	mov	r0, r5
9001528c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
9001528e:	4798      	blx	r3
90015290:	4606      	mov	r6, r0
90015292:	b207      	sxth	r7, r0
90015294:	a803      	add	r0, sp, #12
90015296:	f004 fd18 	bl	90019cca <_ZN8touchgfx12TextProviderC1Ev>
9001529a:	682b      	ldr	r3, [r5, #0]
9001529c:	4628      	mov	r0, r5
9001529e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
900152a0:	4798      	blx	r3
900152a2:	682b      	ldr	r3, [r5, #0]
900152a4:	4682      	mov	sl, r0
900152a6:	4628      	mov	r0, r5
900152a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
900152aa:	4798      	blx	r3
900152ac:	4653      	mov	r3, sl
900152ae:	9000      	str	r0, [sp, #0]
900152b0:	a803      	add	r0, sp, #12
900152b2:	9a02      	ldr	r2, [sp, #8]
900152b4:	9925      	ldr	r1, [sp, #148]	; 0x94
900152b6:	f004 fd63 	bl	90019d80 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
900152ba:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
900152bc:	f8d9 3000 	ldr.w	r3, [r9]
900152c0:	f894 c037 	ldrb.w	ip, [r4, #55]	; 0x37
900152c4:	8925      	ldrh	r5, [r4, #8]
900152c6:	eb03 0142 	add.w	r1, r3, r2, lsl #1
900152ca:	f813 0012 	ldrb.w	r0, [r3, r2, lsl #1]
900152ce:	eba5 050c 	sub.w	r5, r5, ip
900152d2:	784a      	ldrb	r2, [r1, #1]
900152d4:	f8d8 3000 	ldr.w	r3, [r8]
900152d8:	b22d      	sxth	r5, r5
900152da:	f894 1039 	ldrb.w	r1, [r4, #57]	; 0x39
900152de:	f3c2 0281 	ubfx	r2, r2, #2, #2
900152e2:	9500      	str	r5, [sp, #0]
900152e4:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
900152e8:	a803      	add	r0, sp, #12
900152ea:	f002 fad9 	bl	900178a0 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>
900152ee:	f9b4 2034 	ldrsh.w	r2, [r4, #52]	; 0x34
900152f2:	b203      	sxth	r3, r0
900152f4:	18b9      	adds	r1, r7, r2
900152f6:	2900      	cmp	r1, #0
900152f8:	dd0b      	ble.n	90015312 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xba>
900152fa:	3b01      	subs	r3, #1
900152fc:	fb13 f302 	smulbb	r3, r3, r2
90015300:	fb16 3300 	smlabb	r3, r6, r0, r3
90015304:	b21f      	sxth	r7, r3
90015306:	4638      	mov	r0, r7
90015308:	b01d      	add	sp, #116	; 0x74
9001530a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
9001530e:	b003      	add	sp, #12
90015310:	4770      	bx	lr
90015312:	2b00      	cmp	r3, #0
90015314:	dcf7      	bgt.n	90015306 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xae>
90015316:	2700      	movs	r7, #0
90015318:	e7f5      	b.n	90015306 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xae>
9001531a:	bf00      	nop
9001531c:	24028248 	.word	0x24028248
90015320:	24028244 	.word	0x24028244
90015324:	2402824c 	.word	0x2402824c

90015328 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>:
90015328:	4bbd      	ldr	r3, [pc, #756]	; (90015620 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2f8>)
9001532a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001532e:	460c      	mov	r4, r1
90015330:	881b      	ldrh	r3, [r3, #0]
90015332:	8d89      	ldrh	r1, [r1, #44]	; 0x2c
90015334:	b0a9      	sub	sp, #164	; 0xa4
90015336:	4680      	mov	r8, r0
90015338:	428b      	cmp	r3, r1
9001533a:	d809      	bhi.n	90015350 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x28>
9001533c:	2300      	movs	r3, #0
9001533e:	f04f 32ff 	mov.w	r2, #4294967295
90015342:	6083      	str	r3, [r0, #8]
90015344:	e9c0 3200 	strd	r3, r2, [r0]
90015348:	4640      	mov	r0, r8
9001534a:	b029      	add	sp, #164	; 0xa4
9001534c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90015350:	4eb4      	ldr	r6, [pc, #720]	; (90015624 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2fc>)
90015352:	6833      	ldr	r3, [r6, #0]
90015354:	f813 2011 	ldrb.w	r2, [r3, r1, lsl #1]
90015358:	4bb3      	ldr	r3, [pc, #716]	; (90015628 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x300>)
9001535a:	681b      	ldr	r3, [r3, #0]
9001535c:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
90015360:	4bb2      	ldr	r3, [pc, #712]	; (9001562c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x304>)
90015362:	6818      	ldr	r0, [r3, #0]
90015364:	f7f2 ff76 	bl	90008254 <_ZNK8touchgfx5Texts7getTextEt>
90015368:	682b      	ldr	r3, [r5, #0]
9001536a:	4681      	mov	r9, r0
9001536c:	4628      	mov	r0, r5
9001536e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
90015370:	4798      	blx	r3
90015372:	8ea7      	ldrh	r7, [r4, #52]	; 0x34
90015374:	b203      	sxth	r3, r0
90015376:	4682      	mov	sl, r0
90015378:	4407      	add	r7, r0
9001537a:	a80f      	add	r0, sp, #60	; 0x3c
9001537c:	9304      	str	r3, [sp, #16]
9001537e:	b2bb      	uxth	r3, r7
90015380:	9303      	str	r3, [sp, #12]
90015382:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
90015386:	2b00      	cmp	r3, #0
90015388:	f040 80a5 	bne.w	900154d6 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x1ae>
9001538c:	f004 fc9d 	bl	90019cca <_ZN8touchgfx12TextProviderC1Ev>
90015390:	682b      	ldr	r3, [r5, #0]
90015392:	4628      	mov	r0, r5
90015394:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
90015396:	4798      	blx	r3
90015398:	682b      	ldr	r3, [r5, #0]
9001539a:	4606      	mov	r6, r0
9001539c:	4628      	mov	r0, r5
9001539e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
900153a0:	4798      	blx	r3
900153a2:	6823      	ldr	r3, [r4, #0]
900153a4:	4607      	mov	r7, r0
900153a6:	4620      	mov	r0, r4
900153a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
900153aa:	4798      	blx	r3
900153ac:	6823      	ldr	r3, [r4, #0]
900153ae:	4683      	mov	fp, r0
900153b0:	4620      	mov	r0, r4
900153b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
900153b6:	4798      	blx	r3
900153b8:	463b      	mov	r3, r7
900153ba:	4649      	mov	r1, r9
900153bc:	4632      	mov	r2, r6
900153be:	2600      	movs	r6, #0
900153c0:	e9cd b000 	strd	fp, r0, [sp]
900153c4:	a80f      	add	r0, sp, #60	; 0x3c
900153c6:	4637      	mov	r7, r6
900153c8:	f004 fcef 	bl	90019daa <_ZN8touchgfx12TextProvider10initializeEPKtS2_PKNS_24FontContextualFormsTableEz>
900153cc:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
900153d0:	f8df b250 	ldr.w	fp, [pc, #592]	; 90015624 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2fc>
900153d4:	f013 0ffd 	tst.w	r3, #253	; 0xfd
900153d8:	bf0c      	ite	eq
900153da:	f9b4 900a 	ldrsheq.w	r9, [r4, #10]
900153de:	f9b4 9008 	ldrshne.w	r9, [r4, #8]
900153e2:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
900153e4:	4629      	mov	r1, r5
900153e6:	f8db 3000 	ldr.w	r3, [fp]
900153ea:	a80f      	add	r0, sp, #60	; 0x3c
900153ec:	3701      	adds	r7, #1
900153ee:	eb03 0342 	add.w	r3, r3, r2, lsl #1
900153f2:	f647 72ff 	movw	r2, #32767	; 0x7fff
900153f6:	b2bf      	uxth	r7, r7
900153f8:	785b      	ldrb	r3, [r3, #1]
900153fa:	f3c3 0381 	ubfx	r3, r3, #2, #2
900153fe:	f001 ff6a 	bl	900172d6 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
90015402:	9b03      	ldr	r3, [sp, #12]
90015404:	4286      	cmp	r6, r0
90015406:	eba9 0903 	sub.w	r9, r9, r3
9001540a:	bfb8      	it	lt
9001540c:	4606      	movlt	r6, r0
9001540e:	a80f      	add	r0, sp, #60	; 0x3c
90015410:	fa0f f989 	sxth.w	r9, r9
90015414:	b236      	sxth	r6, r6
90015416:	f004 fc7f 	bl	90019d18 <_ZN8touchgfx12TextProvider11endOfStringEv>
9001541a:	b918      	cbnz	r0, 90015424 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xfc>
9001541c:	7a2b      	ldrb	r3, [r5, #8]
9001541e:	444b      	add	r3, r9
90015420:	2b00      	cmp	r3, #0
90015422:	dcde      	bgt.n	900153e2 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xba>
90015424:	9b03      	ldr	r3, [sp, #12]
90015426:	4620      	mov	r0, r4
90015428:	9a04      	ldr	r2, [sp, #16]
9001542a:	fb13 f707 	smulbb	r7, r3, r7
9001542e:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
90015430:	f895 9009 	ldrb.w	r9, [r5, #9]
90015434:	1aff      	subs	r7, r7, r3
90015436:	b2bf      	uxth	r7, r7
90015438:	b23b      	sxth	r3, r7
9001543a:	429a      	cmp	r2, r3
9001543c:	bfa8      	it	ge
9001543e:	4657      	movge	r7, sl
90015440:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
90015444:	f013 0ffd 	tst.w	r3, #253	; 0xfd
90015448:	6823      	ldr	r3, [r4, #0]
9001544a:	444f      	add	r7, r9
9001544c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
9001544e:	bf08      	it	eq
90015450:	f9b4 a008 	ldrsheq.w	sl, [r4, #8]
90015454:	fa1f f987 	uxth.w	r9, r7
90015458:	bf18      	it	ne
9001545a:	f9b4 a00a 	ldrshne.w	sl, [r4, #10]
9001545e:	4798      	blx	r3
90015460:	2801      	cmp	r0, #1
90015462:	fa0f f789 	sxth.w	r7, r9
90015466:	b2b3      	uxth	r3, r6
90015468:	f000 80e2 	beq.w	90015630 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x308>
9001546c:	2802      	cmp	r0, #2
9001546e:	f894 6037 	ldrb.w	r6, [r4, #55]	; 0x37
90015472:	f000 80e3 	beq.w	9001563c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x314>
90015476:	7aea      	ldrb	r2, [r5, #11]
90015478:	b236      	sxth	r6, r6
9001547a:	7b2d      	ldrb	r5, [r5, #12]
9001547c:	1ab6      	subs	r6, r6, r2
9001547e:	442a      	add	r2, r5
90015480:	fa1f fa86 	uxth.w	sl, r6
90015484:	4413      	add	r3, r2
90015486:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
9001548a:	fa0f fb8a 	sxth.w	fp, sl
9001548e:	b29b      	uxth	r3, r3
90015490:	2a02      	cmp	r2, #2
90015492:	b21e      	sxth	r6, r3
90015494:	f000 80d6 	beq.w	90015644 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x31c>
90015498:	2a03      	cmp	r2, #3
9001549a:	f000 80de 	beq.w	9001565a <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x332>
9001549e:	2a01      	cmp	r2, #1
900154a0:	f040 80e6 	bne.w	90015670 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x348>
900154a4:	8925      	ldrh	r5, [r4, #8]
900154a6:	4633      	mov	r3, r6
900154a8:	463e      	mov	r6, r7
900154aa:	eba5 0909 	sub.w	r9, r5, r9
900154ae:	461f      	mov	r7, r3
900154b0:	465d      	mov	r5, fp
900154b2:	fa0f fb89 	sxth.w	fp, r9
900154b6:	4b5d      	ldr	r3, [pc, #372]	; (9001562c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x304>)
900154b8:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
900154ba:	6818      	ldr	r0, [r3, #0]
900154bc:	f7f2 feca 	bl	90008254 <_ZNK8touchgfx5Texts7getTextEt>
900154c0:	f8a8 b000 	strh.w	fp, [r8]
900154c4:	f8a8 5002 	strh.w	r5, [r8, #2]
900154c8:	f8a8 6004 	strh.w	r6, [r8, #4]
900154cc:	f8a8 7006 	strh.w	r7, [r8, #6]
900154d0:	f8c8 0008 	str.w	r0, [r8, #8]
900154d4:	e738      	b.n	90015348 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x20>
900154d6:	f004 fbf8 	bl	90019cca <_ZN8touchgfx12TextProviderC1Ev>
900154da:	682b      	ldr	r3, [r5, #0]
900154dc:	4628      	mov	r0, r5
900154de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
900154e0:	4798      	blx	r3
900154e2:	682b      	ldr	r3, [r5, #0]
900154e4:	4607      	mov	r7, r0
900154e6:	4628      	mov	r0, r5
900154e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
900154ea:	4798      	blx	r3
900154ec:	6823      	ldr	r3, [r4, #0]
900154ee:	4683      	mov	fp, r0
900154f0:	4620      	mov	r0, r4
900154f2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
900154f4:	4798      	blx	r3
900154f6:	6822      	ldr	r2, [r4, #0]
900154f8:	9005      	str	r0, [sp, #20]
900154fa:	4620      	mov	r0, r4
900154fc:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
90015500:	4790      	blx	r2
90015502:	9b05      	ldr	r3, [sp, #20]
90015504:	463a      	mov	r2, r7
90015506:	4649      	mov	r1, r9
90015508:	9001      	str	r0, [sp, #4]
9001550a:	a80f      	add	r0, sp, #60	; 0x3c
9001550c:	9300      	str	r3, [sp, #0]
9001550e:	465b      	mov	r3, fp
90015510:	f004 fc4b 	bl	90019daa <_ZN8touchgfx12TextProvider10initializeEPKtS2_PKNS_24FontContextualFormsTableEz>
90015514:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
90015518:	f9b4 9008 	ldrsh.w	r9, [r4, #8]
9001551c:	af0f      	add	r7, sp, #60	; 0x3c
9001551e:	f013 0ffd 	tst.w	r3, #253	; 0xfd
90015522:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
90015526:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
90015528:	bf0a      	itet	eq
9001552a:	464a      	moveq	r2, r9
9001552c:	461a      	movne	r2, r3
9001552e:	4699      	moveq	r9, r3
90015530:	f894 3037 	ldrb.w	r3, [r4, #55]	; 0x37
90015534:	f894 0039 	ldrb.w	r0, [r4, #57]	; 0x39
90015538:	1ad2      	subs	r2, r2, r3
9001553a:	6833      	ldr	r3, [r6, #0]
9001553c:	f9b4 6034 	ldrsh.w	r6, [r4, #52]	; 0x34
90015540:	eb03 0341 	add.w	r3, r3, r1, lsl #1
90015544:	7859      	ldrb	r1, [r3, #1]
90015546:	2300      	movs	r3, #0
90015548:	9707      	str	r7, [sp, #28]
9001554a:	f3c1 0181 	ubfx	r1, r1, #2, #2
9001554e:	f8ad 3018 	strh.w	r3, [sp, #24]
90015552:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
90015556:	f88d 1020 	strb.w	r1, [sp, #32]
9001555a:	9509      	str	r5, [sp, #36]	; 0x24
9001555c:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
90015560:	f8ad 902a 	strh.w	r9, [sp, #42]	; 0x2a
90015564:	f8ad 602c 	strh.w	r6, [sp, #44]	; 0x2c
90015568:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
9001556c:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
90015570:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
90015574:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
90015578:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
9001557c:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
90015580:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
90015584:	b350      	cbz	r0, 900155dc <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2b4>
90015586:	682b      	ldr	r3, [r5, #0]
90015588:	4628      	mov	r0, r5
9001558a:	695b      	ldr	r3, [r3, #20]
9001558c:	4798      	blx	r3
9001558e:	4607      	mov	r7, r0
90015590:	b320      	cbz	r0, 900155dc <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2b4>
90015592:	9809      	ldr	r0, [sp, #36]	; 0x24
90015594:	4639      	mov	r1, r7
90015596:	6803      	ldr	r3, [r0, #0]
90015598:	68db      	ldr	r3, [r3, #12]
9001559a:	4798      	blx	r3
9001559c:	4606      	mov	r6, r0
9001559e:	b1e8      	cbz	r0, 900155dc <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2b4>
900155a0:	7b43      	ldrb	r3, [r0, #13]
900155a2:	7a82      	ldrb	r2, [r0, #10]
900155a4:	005b      	lsls	r3, r3, #1
900155a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
900155aa:	4313      	orrs	r3, r2
900155ac:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
900155b0:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
900155b4:	2b06      	cmp	r3, #6
900155b6:	d111      	bne.n	900155dc <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2b4>
900155b8:	9809      	ldr	r0, [sp, #36]	; 0x24
900155ba:	4632      	mov	r2, r6
900155bc:	4639      	mov	r1, r7
900155be:	6803      	ldr	r3, [r0, #0]
900155c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
900155c2:	4798      	blx	r3
900155c4:	7b73      	ldrb	r3, [r6, #13]
900155c6:	005b      	lsls	r3, r3, #1
900155c8:	f403 7280 	and.w	r2, r3, #256	; 0x100
900155cc:	7ab3      	ldrb	r3, [r6, #10]
900155ce:	4313      	orrs	r3, r2
900155d0:	4418      	add	r0, r3
900155d2:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
900155d6:	4418      	add	r0, r3
900155d8:	f8ad 0038 	strh.w	r0, [sp, #56]	; 0x38
900155dc:	2600      	movs	r6, #0
900155de:	4637      	mov	r7, r6
900155e0:	a806      	add	r0, sp, #24
900155e2:	3701      	adds	r7, #1
900155e4:	f002 f859 	bl	9001769a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
900155e8:	f8bd 0036 	ldrh.w	r0, [sp, #54]	; 0x36
900155ec:	9b03      	ldr	r3, [sp, #12]
900155ee:	b2bf      	uxth	r7, r7
900155f0:	4286      	cmp	r6, r0
900155f2:	eba9 0903 	sub.w	r9, r9, r3
900155f6:	f8bd 3018 	ldrh.w	r3, [sp, #24]
900155fa:	bfb8      	it	lt
900155fc:	4606      	movlt	r6, r0
900155fe:	fa0f f989 	sxth.w	r9, r9
90015602:	b236      	sxth	r6, r6
90015604:	2b00      	cmp	r3, #0
90015606:	f43f af0d 	beq.w	90015424 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xfc>
9001560a:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
9001560e:	2b00      	cmp	r3, #0
90015610:	f47f af08 	bne.w	90015424 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xfc>
90015614:	7a2b      	ldrb	r3, [r5, #8]
90015616:	444b      	add	r3, r9
90015618:	2b00      	cmp	r3, #0
9001561a:	dce1      	bgt.n	900155e0 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2b8>
9001561c:	e702      	b.n	90015424 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xfc>
9001561e:	bf00      	nop
90015620:	24028248 	.word	0x24028248
90015624:	24028244 	.word	0x24028244
90015628:	2402824c 	.word	0x2402824c
9001562c:	24028250 	.word	0x24028250
90015630:	ebaa 0606 	sub.w	r6, sl, r6
90015634:	2002      	movs	r0, #2
90015636:	fb96 f6f0 	sdiv	r6, r6, r0
9001563a:	e71c      	b.n	90015476 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x14e>
9001563c:	441e      	add	r6, r3
9001563e:	ebaa 0606 	sub.w	r6, sl, r6
90015642:	e718      	b.n	90015476 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x14e>
90015644:	8925      	ldrh	r5, [r4, #8]
90015646:	1aed      	subs	r5, r5, r3
90015648:	eba5 050a 	sub.w	r5, r5, sl
9001564c:	fa0f fb85 	sxth.w	fp, r5
90015650:	8965      	ldrh	r5, [r4, #10]
90015652:	eba5 0509 	sub.w	r5, r5, r9
90015656:	b22d      	sxth	r5, r5
90015658:	e72d      	b.n	900154b6 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x18e>
9001565a:	8965      	ldrh	r5, [r4, #10]
9001565c:	f04f 0b00 	mov.w	fp, #0
90015660:	1aed      	subs	r5, r5, r3
90015662:	4633      	mov	r3, r6
90015664:	463e      	mov	r6, r7
90015666:	eba5 050a 	sub.w	r5, r5, sl
9001566a:	461f      	mov	r7, r3
9001566c:	b22d      	sxth	r5, r5
9001566e:	e722      	b.n	900154b6 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x18e>
90015670:	2500      	movs	r5, #0
90015672:	e720      	b.n	900154b6 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x18e>

90015674 <_ZN8touchgfx8TextAreaD0Ev>:
90015674:	b510      	push	{r4, lr}
90015676:	4604      	mov	r4, r0
90015678:	2148      	movs	r1, #72	; 0x48
9001567a:	f011 ffbc 	bl	900275f6 <_ZdlPvj>
9001567e:	4620      	mov	r0, r4
90015680:	bd10      	pop	{r4, pc}
	...

90015684 <_ZNK8touchgfx8TextArea17invalidateContentEv>:
90015684:	b513      	push	{r0, r1, r4, lr}
90015686:	f890 3036 	ldrb.w	r3, [r0, #54]	; 0x36
9001568a:	4604      	mov	r4, r0
9001568c:	b1fb      	cbz	r3, 900156ce <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
9001568e:	4b16      	ldr	r3, [pc, #88]	; (900156e8 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x64>)
90015690:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
90015692:	881b      	ldrh	r3, [r3, #0]
90015694:	428b      	cmp	r3, r1
90015696:	d91a      	bls.n	900156ce <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
90015698:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
9001569c:	2b00      	cmp	r3, #0
9001569e:	dd16      	ble.n	900156ce <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
900156a0:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
900156a4:	2b00      	cmp	r3, #0
900156a6:	dd12      	ble.n	900156ce <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
900156a8:	4b10      	ldr	r3, [pc, #64]	; (900156ec <_ZNK8touchgfx8TextArea17invalidateContentEv+0x68>)
900156aa:	6818      	ldr	r0, [r3, #0]
900156ac:	f7f2 fdd2 	bl	90008254 <_ZNK8touchgfx5Texts7getTextEt>
900156b0:	f9b4 3042 	ldrsh.w	r3, [r4, #66]	; 0x42
900156b4:	6822      	ldr	r2, [r4, #0]
900156b6:	2b00      	cmp	r3, #0
900156b8:	db06      	blt.n	900156c8 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x44>
900156ba:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	; 0x40
900156be:	2b00      	cmp	r3, #0
900156c0:	db02      	blt.n	900156c8 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x44>
900156c2:	6c63      	ldr	r3, [r4, #68]	; 0x44
900156c4:	4298      	cmp	r0, r3
900156c6:	d004      	beq.n	900156d2 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4e>
900156c8:	6953      	ldr	r3, [r2, #20]
900156ca:	4620      	mov	r0, r4
900156cc:	4798      	blx	r3
900156ce:	b002      	add	sp, #8
900156d0:	bd10      	pop	{r4, pc}
900156d2:	f104 013c 	add.w	r1, r4, #60	; 0x3c
900156d6:	466b      	mov	r3, sp
900156d8:	6912      	ldr	r2, [r2, #16]
900156da:	c903      	ldmia	r1, {r0, r1}
900156dc:	e883 0003 	stmia.w	r3, {r0, r1}
900156e0:	4619      	mov	r1, r3
900156e2:	4620      	mov	r0, r4
900156e4:	4790      	blx	r2
900156e6:	e7f2      	b.n	900156ce <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
900156e8:	24028248 	.word	0x24028248
900156ec:	24028250 	.word	0x24028250

900156f0 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE>:
900156f0:	4b45      	ldr	r3, [pc, #276]	; (90015808 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x118>)
900156f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
900156f6:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
900156f8:	b08e      	sub	sp, #56	; 0x38
900156fa:	881b      	ldrh	r3, [r3, #0]
900156fc:	4604      	mov	r4, r0
900156fe:	4293      	cmp	r3, r2
90015700:	d97e      	bls.n	90015800 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
90015702:	6808      	ldr	r0, [r1, #0]
90015704:	ab05      	add	r3, sp, #20
90015706:	6849      	ldr	r1, [r1, #4]
90015708:	4d40      	ldr	r5, [pc, #256]	; (9001580c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x11c>)
9001570a:	c303      	stmia	r3!, {r0, r1}
9001570c:	4611      	mov	r1, r2
9001570e:	6828      	ldr	r0, [r5, #0]
90015710:	f7f2 fda0 	bl	90008254 <_ZNK8touchgfx5Texts7getTextEt>
90015714:	f9b4 3042 	ldrsh.w	r3, [r4, #66]	; 0x42
90015718:	2b00      	cmp	r3, #0
9001571a:	db11      	blt.n	90015740 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x50>
9001571c:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	; 0x40
90015720:	2b00      	cmp	r3, #0
90015722:	db0d      	blt.n	90015740 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x50>
90015724:	6c63      	ldr	r3, [r4, #68]	; 0x44
90015726:	4298      	cmp	r0, r3
90015728:	d10a      	bne.n	90015740 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x50>
9001572a:	f104 023c 	add.w	r2, r4, #60	; 0x3c
9001572e:	ab09      	add	r3, sp, #36	; 0x24
90015730:	e892 0003 	ldmia.w	r2, {r0, r1}
90015734:	e883 0003 	stmia.w	r3, {r0, r1}
90015738:	4619      	mov	r1, r3
9001573a:	a805      	add	r0, sp, #20
9001573c:	f7fd fb3a 	bl	90012db4 <_ZN8touchgfx4RectaNERKS0_>
90015740:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
90015744:	2b00      	cmp	r3, #0
90015746:	dd5b      	ble.n	90015800 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
90015748:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
9001574c:	2b00      	cmp	r3, #0
9001574e:	dd57      	ble.n	90015800 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
90015750:	4f2f      	ldr	r7, [pc, #188]	; (90015810 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x120>)
90015752:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
90015754:	683b      	ldr	r3, [r7, #0]
90015756:	f813 2012 	ldrb.w	r2, [r3, r2, lsl #1]
9001575a:	4b2e      	ldr	r3, [pc, #184]	; (90015814 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x124>)
9001575c:	681b      	ldr	r3, [r3, #0]
9001575e:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
90015762:	2e00      	cmp	r6, #0
90015764:	d04c      	beq.n	90015800 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
90015766:	6823      	ldr	r3, [r4, #0]
90015768:	4620      	mov	r0, r4
9001576a:	f894 8036 	ldrb.w	r8, [r4, #54]	; 0x36
9001576e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
90015770:	4798      	blx	r3
90015772:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
90015774:	683b      	ldr	r3, [r7, #0]
90015776:	f9b4 c034 	ldrsh.w	ip, [r4, #52]	; 0x34
9001577a:	eb03 0342 	add.w	r3, r3, r2, lsl #1
9001577e:	f894 e038 	ldrb.w	lr, [r4, #56]	; 0x38
90015782:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
90015786:	785b      	ldrb	r3, [r3, #1]
90015788:	f894 7037 	ldrb.w	r7, [r4, #55]	; 0x37
9001578c:	f3c3 0381 	ubfx	r3, r3, #2, #2
90015790:	6b21      	ldr	r1, [r4, #48]	; 0x30
90015792:	9609      	str	r6, [sp, #36]	; 0x24
90015794:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
90015798:	4b1f      	ldr	r3, [pc, #124]	; (90015818 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x128>)
9001579a:	f88d 0028 	strb.w	r0, [sp, #40]	; 0x28
9001579e:	681b      	ldr	r3, [r3, #0]
900157a0:	f88d e02a 	strb.w	lr, [sp, #42]	; 0x2a
900157a4:	910b      	str	r1, [sp, #44]	; 0x2c
900157a6:	f8ad c030 	strh.w	ip, [sp, #48]	; 0x30
900157aa:	f88d 8032 	strb.w	r8, [sp, #50]	; 0x32
900157ae:	f88d 7033 	strb.w	r7, [sp, #51]	; 0x33
900157b2:	f88d 2034 	strb.w	r2, [sp, #52]	; 0x34
900157b6:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
900157ba:	b10a      	cbz	r2, 900157c0 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xd0>
900157bc:	6cde      	ldr	r6, [r3, #76]	; 0x4c
900157be:	b906      	cbnz	r6, 900157c2 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xd2>
900157c0:	689e      	ldr	r6, [r3, #8]
900157c2:	af07      	add	r7, sp, #28
900157c4:	4621      	mov	r1, r4
900157c6:	4638      	mov	r0, r7
900157c8:	f003 fdc2 	bl	90019350 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
900157cc:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
900157ce:	6828      	ldr	r0, [r5, #0]
900157d0:	f7f2 fd40 	bl	90008254 <_ZNK8touchgfx5Texts7getTextEt>
900157d4:	6823      	ldr	r3, [r4, #0]
900157d6:	4605      	mov	r5, r0
900157d8:	4620      	mov	r0, r4
900157da:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
900157dc:	4798      	blx	r3
900157de:	6823      	ldr	r3, [r4, #0]
900157e0:	4680      	mov	r8, r0
900157e2:	4620      	mov	r0, r4
900157e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
900157e8:	4798      	blx	r3
900157ea:	ab09      	add	r3, sp, #36	; 0x24
900157ec:	9501      	str	r5, [sp, #4]
900157ee:	9300      	str	r3, [sp, #0]
900157f0:	ab05      	add	r3, sp, #20
900157f2:	e9cd 8002 	strd	r8, r0, [sp, #8]
900157f6:	4630      	mov	r0, r6
900157f8:	e897 0006 	ldmia.w	r7, {r1, r2}
900157fc:	f7f2 fcda 	bl	900081b4 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
90015800:	b00e      	add	sp, #56	; 0x38
90015802:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
90015806:	bf00      	nop
90015808:	24028248 	.word	0x24028248
9001580c:	24028250 	.word	0x24028250
90015810:	24028244 	.word	0x24028244
90015814:	2402824c 	.word	0x2402824c
90015818:	240281ec 	.word	0x240281ec

9001581c <_ZN8touchgfx8Drawable14setWidthHeightEss>:
9001581c:	b570      	push	{r4, r5, r6, lr}
9001581e:	6803      	ldr	r3, [r0, #0]
90015820:	4604      	mov	r4, r0
90015822:	4615      	mov	r5, r2
90015824:	6b9b      	ldr	r3, [r3, #56]	; 0x38
90015826:	4798      	blx	r3
90015828:	6823      	ldr	r3, [r4, #0]
9001582a:	4629      	mov	r1, r5
9001582c:	4620      	mov	r0, r4
9001582e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
90015830:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
90015834:	4718      	bx	r3
	...

90015838 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>:
90015838:	b538      	push	{r3, r4, r5, lr}
9001583a:	4b0e      	ldr	r3, [pc, #56]	; (90015874 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x3c>)
9001583c:	4604      	mov	r4, r0
9001583e:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
90015840:	881b      	ldrh	r3, [r3, #0]
90015842:	429a      	cmp	r2, r3
90015844:	d214      	bcs.n	90015870 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x38>
90015846:	6803      	ldr	r3, [r0, #0]
90015848:	6f5b      	ldr	r3, [r3, #116]	; 0x74
9001584a:	4798      	blx	r3
9001584c:	6823      	ldr	r3, [r4, #0]
9001584e:	4605      	mov	r5, r0
90015850:	4620      	mov	r0, r4
90015852:	6f1b      	ldr	r3, [r3, #112]	; 0x70
90015854:	4798      	blx	r3
90015856:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
9001585a:	b22d      	sxth	r5, r5
9001585c:	4601      	mov	r1, r0
9001585e:	f013 0ffd 	tst.w	r3, #253	; 0xfd
90015862:	bf06      	itte	eq
90015864:	4602      	moveq	r2, r0
90015866:	4629      	moveq	r1, r5
90015868:	462a      	movne	r2, r5
9001586a:	4620      	mov	r0, r4
9001586c:	f7ff ffd6 	bl	9001581c <_ZN8touchgfx8Drawable14setWidthHeightEss>
90015870:	bd38      	pop	{r3, r4, r5, pc}
90015872:	bf00      	nop
90015874:	24028248 	.word	0x24028248

90015878 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>:
90015878:	b530      	push	{r4, r5, lr}
9001587a:	888b      	ldrh	r3, [r1, #4]
9001587c:	b085      	sub	sp, #20
9001587e:	4604      	mov	r4, r0
90015880:	8583      	strh	r3, [r0, #44]	; 0x2c
90015882:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
90015886:	b923      	cbnz	r3, 90015892 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE+0x1a>
90015888:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
9001588c:	b90b      	cbnz	r3, 90015892 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE+0x1a>
9001588e:	f7ff ffd3 	bl	90015838 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
90015892:	6823      	ldr	r3, [r4, #0]
90015894:	466d      	mov	r5, sp
90015896:	4621      	mov	r1, r4
90015898:	343c      	adds	r4, #60	; 0x3c
9001589a:	4628      	mov	r0, r5
9001589c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
900158a0:	4798      	blx	r3
900158a2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
900158a6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
900158aa:	b005      	add	sp, #20
900158ac:	bd30      	pop	{r4, r5, pc}

900158ae <_ZNK8touchgfx3Box12getSolidRectEv>:
900158ae:	2300      	movs	r3, #0
900158b0:	8083      	strh	r3, [r0, #4]
900158b2:	80c3      	strh	r3, [r0, #6]
900158b4:	8003      	strh	r3, [r0, #0]
900158b6:	8043      	strh	r3, [r0, #2]
900158b8:	f891 3026 	ldrb.w	r3, [r1, #38]	; 0x26
900158bc:	2bff      	cmp	r3, #255	; 0xff
900158be:	bf01      	itttt	eq
900158c0:	890b      	ldrheq	r3, [r1, #8]
900158c2:	8083      	strheq	r3, [r0, #4]
900158c4:	894b      	ldrheq	r3, [r1, #10]
900158c6:	80c3      	strheq	r3, [r0, #6]
900158c8:	4770      	bx	lr
	...

900158cc <_ZNK8touchgfx3Box4drawERKNS_4RectE>:
900158cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
900158ce:	4604      	mov	r4, r0
900158d0:	466b      	mov	r3, sp
900158d2:	6808      	ldr	r0, [r1, #0]
900158d4:	6849      	ldr	r1, [r1, #4]
900158d6:	c303      	stmia	r3!, {r0, r1}
900158d8:	6823      	ldr	r3, [r4, #0]
900158da:	4669      	mov	r1, sp
900158dc:	4620      	mov	r0, r4
900158de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
900158e0:	4798      	blx	r3
900158e2:	4b08      	ldr	r3, [pc, #32]	; (90015904 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x38>)
900158e4:	681b      	ldr	r3, [r3, #0]
900158e6:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
900158ea:	b10a      	cbz	r2, 900158f0 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x24>
900158ec:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
900158ee:	b900      	cbnz	r0, 900158f2 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x26>
900158f0:	6898      	ldr	r0, [r3, #8]
900158f2:	6803      	ldr	r3, [r0, #0]
900158f4:	4669      	mov	r1, sp
900158f6:	6aa2      	ldr	r2, [r4, #40]	; 0x28
900158f8:	6a1d      	ldr	r5, [r3, #32]
900158fa:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
900158fe:	47a8      	blx	r5
90015900:	b003      	add	sp, #12
90015902:	bd30      	pop	{r4, r5, pc}
90015904:	240281ec 	.word	0x240281ec

90015908 <_ZN8touchgfx3BoxD1Ev>:
90015908:	4770      	bx	lr

9001590a <_ZN8touchgfx3BoxD0Ev>:
9001590a:	b510      	push	{r4, lr}
9001590c:	4604      	mov	r4, r0
9001590e:	212c      	movs	r1, #44	; 0x2c
90015910:	f011 fe71 	bl	900275f6 <_ZdlPvj>
90015914:	4620      	mov	r0, r4
90015916:	bd10      	pop	{r4, pc}

90015918 <_ZNK8touchgfx3Box17invalidateContentEv>:
90015918:	f890 2026 	ldrb.w	r2, [r0, #38]	; 0x26
9001591c:	b12a      	cbz	r2, 9001592a <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
9001591e:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
90015922:	b112      	cbz	r2, 9001592a <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
90015924:	6803      	ldr	r3, [r0, #0]
90015926:	695b      	ldr	r3, [r3, #20]
90015928:	4718      	bx	r3
9001592a:	4770      	bx	lr

9001592c <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE>:
9001592c:	4b30      	ldr	r3, [pc, #192]	; (900159f0 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xc4>)
9001592e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
90015932:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
90015934:	b08d      	sub	sp, #52	; 0x34
90015936:	881b      	ldrh	r3, [r3, #0]
90015938:	4604      	mov	r4, r0
9001593a:	460f      	mov	r7, r1
9001593c:	4293      	cmp	r3, r2
9001593e:	d954      	bls.n	900159ea <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xbe>
90015940:	4b2c      	ldr	r3, [pc, #176]	; (900159f4 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xc8>)
90015942:	6819      	ldr	r1, [r3, #0]
90015944:	eb01 0342 	add.w	r3, r1, r2, lsl #1
90015948:	f811 1012 	ldrb.w	r1, [r1, r2, lsl #1]
9001594c:	4a2a      	ldr	r2, [pc, #168]	; (900159f8 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xcc>)
9001594e:	6812      	ldr	r2, [r2, #0]
90015950:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
90015954:	2900      	cmp	r1, #0
90015956:	d048      	beq.n	900159ea <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xbe>
90015958:	785a      	ldrb	r2, [r3, #1]
9001595a:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
9001595e:	f3c2 0801 	ubfx	r8, r2, #0, #2
90015962:	f3c2 0281 	ubfx	r2, r2, #2, #2
90015966:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
9001596a:	4b24      	ldr	r3, [pc, #144]	; (900159fc <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xd0>)
9001596c:	f88d 2021 	strb.w	r2, [sp, #33]	; 0x21
90015970:	681a      	ldr	r2, [r3, #0]
90015972:	f890 5036 	ldrb.w	r5, [r0, #54]	; 0x36
90015976:	f9b0 c034 	ldrsh.w	ip, [r0, #52]	; 0x34
9001597a:	f890 e038 	ldrb.w	lr, [r0, #56]	; 0x38
9001597e:	6b26      	ldr	r6, [r4, #48]	; 0x30
90015980:	f890 0037 	ldrb.w	r0, [r0, #55]	; 0x37
90015984:	f892 3076 	ldrb.w	r3, [r2, #118]	; 0x76
90015988:	9107      	str	r1, [sp, #28]
9001598a:	f88d 8020 	strb.w	r8, [sp, #32]
9001598e:	f88d e022 	strb.w	lr, [sp, #34]	; 0x22
90015992:	9609      	str	r6, [sp, #36]	; 0x24
90015994:	f8ad c028 	strh.w	ip, [sp, #40]	; 0x28
90015998:	f88d 502a 	strb.w	r5, [sp, #42]	; 0x2a
9001599c:	f88d 002b 	strb.w	r0, [sp, #43]	; 0x2b
900159a0:	b10b      	cbz	r3, 900159a6 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0x7a>
900159a2:	6cd5      	ldr	r5, [r2, #76]	; 0x4c
900159a4:	b905      	cbnz	r5, 900159a8 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0x7c>
900159a6:	6895      	ldr	r5, [r2, #8]
900159a8:	ae05      	add	r6, sp, #20
900159aa:	4621      	mov	r1, r4
900159ac:	4630      	mov	r0, r6
900159ae:	f003 fccf 	bl	90019350 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
900159b2:	4b13      	ldr	r3, [pc, #76]	; (90015a00 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xd4>)
900159b4:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
900159b6:	6818      	ldr	r0, [r3, #0]
900159b8:	f7f2 fc4c 	bl	90008254 <_ZNK8touchgfx5Texts7getTextEt>
900159bc:	6823      	ldr	r3, [r4, #0]
900159be:	4680      	mov	r8, r0
900159c0:	4620      	mov	r0, r4
900159c2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
900159c4:	4798      	blx	r3
900159c6:	6823      	ldr	r3, [r4, #0]
900159c8:	4681      	mov	r9, r0
900159ca:	4620      	mov	r0, r4
900159cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
900159d0:	4798      	blx	r3
900159d2:	ab07      	add	r3, sp, #28
900159d4:	f8cd 8004 	str.w	r8, [sp, #4]
900159d8:	9300      	str	r3, [sp, #0]
900159da:	463b      	mov	r3, r7
900159dc:	e9cd 9002 	strd	r9, r0, [sp, #8]
900159e0:	4628      	mov	r0, r5
900159e2:	e896 0006 	ldmia.w	r6, {r1, r2}
900159e6:	f7f2 fbe5 	bl	900081b4 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
900159ea:	b00d      	add	sp, #52	; 0x34
900159ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
900159f0:	24028248 	.word	0x24028248
900159f4:	24028244 	.word	0x24028244
900159f8:	2402824c 	.word	0x2402824c
900159fc:	240281ec 	.word	0x240281ec
90015a00:	24028250 	.word	0x24028250

90015a04 <_ZN8touchgfx5ImageD1Ev>:
90015a04:	4770      	bx	lr

90015a06 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>:
90015a06:	b570      	push	{r4, r5, r6, lr}
90015a08:	880b      	ldrh	r3, [r1, #0]
90015a0a:	460d      	mov	r5, r1
90015a0c:	4604      	mov	r4, r0
90015a0e:	84c3      	strh	r3, [r0, #38]	; 0x26
90015a10:	4608      	mov	r0, r1
90015a12:	f005 fced 	bl	9001b3f0 <_ZNK8touchgfx6Bitmap8getWidthEv>
90015a16:	4606      	mov	r6, r0
90015a18:	4628      	mov	r0, r5
90015a1a:	f005 fd1d 	bl	9001b458 <_ZNK8touchgfx6Bitmap9getHeightEv>
90015a1e:	6823      	ldr	r3, [r4, #0]
90015a20:	4605      	mov	r5, r0
90015a22:	4631      	mov	r1, r6
90015a24:	4620      	mov	r0, r4
90015a26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
90015a28:	4798      	blx	r3
90015a2a:	6823      	ldr	r3, [r4, #0]
90015a2c:	4629      	mov	r1, r5
90015a2e:	4620      	mov	r0, r4
90015a30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
90015a32:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
90015a36:	4718      	bx	r3

90015a38 <_ZN8touchgfx5ImageD0Ev>:
90015a38:	b510      	push	{r4, lr}
90015a3a:	4604      	mov	r4, r0
90015a3c:	212c      	movs	r1, #44	; 0x2c
90015a3e:	f011 fdda 	bl	900275f6 <_ZdlPvj>
90015a42:	4620      	mov	r0, r4
90015a44:	bd10      	pop	{r4, pc}

90015a46 <_ZNK8touchgfx5Image12getSolidRectEv>:
90015a46:	b510      	push	{r4, lr}
90015a48:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
90015a4c:	4604      	mov	r4, r0
90015a4e:	2bff      	cmp	r3, #255	; 0xff
90015a50:	d006      	beq.n	90015a60 <_ZNK8touchgfx5Image12getSolidRectEv+0x1a>
90015a52:	2300      	movs	r3, #0
90015a54:	8003      	strh	r3, [r0, #0]
90015a56:	8043      	strh	r3, [r0, #2]
90015a58:	8083      	strh	r3, [r0, #4]
90015a5a:	80c3      	strh	r3, [r0, #6]
90015a5c:	4620      	mov	r0, r4
90015a5e:	bd10      	pop	{r4, pc}
90015a60:	3126      	adds	r1, #38	; 0x26
90015a62:	f005 fd2d 	bl	9001b4c0 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
90015a66:	e7f9      	b.n	90015a5c <_ZNK8touchgfx5Image12getSolidRectEv+0x16>

90015a68 <_ZNK8touchgfx5Image4drawERKNS_4RectE>:
90015a68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
90015a6c:	4604      	mov	r4, r0
90015a6e:	b088      	sub	sp, #32
90015a70:	2500      	movs	r5, #0
90015a72:	460f      	mov	r7, r1
90015a74:	f854 3b26 	ldr.w	r3, [r4], #38
90015a78:	a904      	add	r1, sp, #16
90015a7a:	4606      	mov	r6, r0
90015a7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90015a7e:	e9cd 5504 	strd	r5, r5, [sp, #16]
90015a82:	4798      	blx	r3
90015a84:	4620      	mov	r0, r4
90015a86:	f005 fcb3 	bl	9001b3f0 <_ZNK8touchgfx6Bitmap8getWidthEv>
90015a8a:	4680      	mov	r8, r0
90015a8c:	4620      	mov	r0, r4
90015a8e:	f005 fce3 	bl	9001b458 <_ZNK8touchgfx6Bitmap9getHeightEv>
90015a92:	9506      	str	r5, [sp, #24]
90015a94:	ad06      	add	r5, sp, #24
90015a96:	f8ad 001e 	strh.w	r0, [sp, #30]
90015a9a:	4639      	mov	r1, r7
90015a9c:	f8ad 801c 	strh.w	r8, [sp, #28]
90015aa0:	4628      	mov	r0, r5
90015aa2:	f7fd f987 	bl	90012db4 <_ZN8touchgfx4RectaNERKS0_>
90015aa6:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
90015aaa:	2b00      	cmp	r3, #0
90015aac:	dd19      	ble.n	90015ae2 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
90015aae:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
90015ab2:	2b00      	cmp	r3, #0
90015ab4:	dd15      	ble.n	90015ae2 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
90015ab6:	4b0c      	ldr	r3, [pc, #48]	; (90015ae8 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x80>)
90015ab8:	681b      	ldr	r3, [r3, #0]
90015aba:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
90015abe:	b10a      	cbz	r2, 90015ac4 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5c>
90015ac0:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
90015ac2:	b900      	cbnz	r0, 90015ac6 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5e>
90015ac4:	6898      	ldr	r0, [r3, #8]
90015ac6:	2701      	movs	r7, #1
90015ac8:	6801      	ldr	r1, [r0, #0]
90015aca:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
90015ace:	9702      	str	r7, [sp, #8]
90015ad0:	f896 6028 	ldrb.w	r6, [r6, #40]	; 0x28
90015ad4:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
90015ad8:	e9cd 5600 	strd	r5, r6, [sp]
90015adc:	688d      	ldr	r5, [r1, #8]
90015ade:	4621      	mov	r1, r4
90015ae0:	47a8      	blx	r5
90015ae2:	b008      	add	sp, #32
90015ae4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
90015ae8:	240281ec 	.word	0x240281ec

90015aec <_ZN8touchgfx7OutlineD1Ev>:
90015aec:	4770      	bx	lr

90015aee <_ZN8touchgfx7OutlineD0Ev>:
90015aee:	b510      	push	{r4, lr}
90015af0:	4604      	mov	r4, r0
90015af2:	2130      	movs	r1, #48	; 0x30
90015af4:	f011 fd7f 	bl	900275f6 <_ZdlPvj>
90015af8:	4620      	mov	r0, r4
90015afa:	bd10      	pop	{r4, pc}

90015afc <_ZN8touchgfx7Outline5resetEv>:
90015afc:	b510      	push	{r4, lr}
90015afe:	4604      	mov	r4, r0
90015b00:	f000 fe86 	bl	90016810 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv>
90015b04:	60e0      	str	r0, [r4, #12]
90015b06:	f000 fe89 	bl	9001681c <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv>
90015b0a:	68e3      	ldr	r3, [r4, #12]
90015b0c:	08c0      	lsrs	r0, r0, #3
90015b0e:	2200      	movs	r2, #0
90015b10:	f647 71ff 	movw	r1, #32767	; 0x7fff
90015b14:	6123      	str	r3, [r4, #16]
90015b16:	3801      	subs	r0, #1
90015b18:	60a2      	str	r2, [r4, #8]
90015b1a:	6060      	str	r0, [r4, #4]
90015b1c:	8019      	strh	r1, [r3, #0]
90015b1e:	8059      	strh	r1, [r3, #2]
90015b20:	809a      	strh	r2, [r3, #4]
90015b22:	80da      	strh	r2, [r3, #6]
90015b24:	6a63      	ldr	r3, [r4, #36]	; 0x24
90015b26:	f023 0301 	bic.w	r3, r3, #1
90015b2a:	f043 0302 	orr.w	r3, r3, #2
90015b2e:	6263      	str	r3, [r4, #36]	; 0x24
90015b30:	bd10      	pop	{r4, pc}
	...

90015b34 <_ZN8touchgfx7OutlineC1Ev>:
90015b34:	4b0a      	ldr	r3, [pc, #40]	; (90015b60 <_ZN8touchgfx7OutlineC1Ev+0x2c>)
90015b36:	b510      	push	{r4, lr}
90015b38:	6003      	str	r3, [r0, #0]
90015b3a:	2300      	movs	r3, #0
90015b3c:	4604      	mov	r4, r0
90015b3e:	6243      	str	r3, [r0, #36]	; 0x24
90015b40:	e9c0 3301 	strd	r3, r3, [r0, #4]
90015b44:	e9c0 3303 	strd	r3, r3, [r0, #12]
90015b48:	e9c0 3305 	strd	r3, r3, [r0, #20]
90015b4c:	e9c0 3307 	strd	r3, r3, [r0, #28]
90015b50:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
90015b54:	e9c0 330a 	strd	r3, r3, [r0, #40]	; 0x28
90015b58:	f7ff ffd0 	bl	90015afc <_ZN8touchgfx7Outline5resetEv>
90015b5c:	4620      	mov	r0, r4
90015b5e:	bd10      	pop	{r4, pc}
90015b60:	9002c36c 	.word	0x9002c36c

90015b64 <_ZN8touchgfx7Outline10renderLineEiiii>:
90015b64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90015b68:	b093      	sub	sp, #76	; 0x4c
90015b6a:	1156      	asrs	r6, r2, #5
90015b6c:	9c1c      	ldr	r4, [sp, #112]	; 0x70
90015b6e:	9305      	str	r3, [sp, #20]
90015b70:	1153      	asrs	r3, r2, #5
90015b72:	f004 051f 	and.w	r5, r4, #31
90015b76:	9303      	str	r3, [sp, #12]
90015b78:	1163      	asrs	r3, r4, #5
90015b7a:	9504      	str	r5, [sp, #16]
90015b7c:	1165      	asrs	r5, r4, #5
90015b7e:	9306      	str	r3, [sp, #24]
90015b80:	f002 031f 	and.w	r3, r2, #31
90015b84:	42ae      	cmp	r6, r5
90015b86:	f040 80f4 	bne.w	90015d72 <_ZN8touchgfx7Outline10renderLineEiiii+0x20e>
90015b8a:	9c04      	ldr	r4, [sp, #16]
90015b8c:	9a05      	ldr	r2, [sp, #20]
90015b8e:	42a3      	cmp	r3, r4
90015b90:	ea4f 1e62 	mov.w	lr, r2, asr #5
90015b94:	6902      	ldr	r2, [r0, #16]
90015b96:	d125      	bne.n	90015be4 <_ZN8touchgfx7Outline10renderLineEiiii+0x80>
90015b98:	f9b2 3000 	ldrsh.w	r3, [r2]
90015b9c:	459e      	cmp	lr, r3
90015b9e:	d103      	bne.n	90015ba8 <_ZN8touchgfx7Outline10renderLineEiiii+0x44>
90015ba0:	f9b2 3002 	ldrsh.w	r3, [r2, #2]
90015ba4:	429e      	cmp	r6, r3
90015ba6:	d035      	beq.n	90015c14 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
90015ba8:	88d1      	ldrh	r1, [r2, #6]
90015baa:	8893      	ldrh	r3, [r2, #4]
90015bac:	430b      	orrs	r3, r1
90015bae:	d010      	beq.n	90015bd2 <_ZN8touchgfx7Outline10renderLineEiiii+0x6e>
90015bb0:	f9b2 3002 	ldrsh.w	r3, [r2, #2]
90015bb4:	2b00      	cmp	r3, #0
90015bb6:	db0c      	blt.n	90015bd2 <_ZN8touchgfx7Outline10renderLineEiiii+0x6e>
90015bb8:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
90015bba:	428b      	cmp	r3, r1
90015bbc:	da09      	bge.n	90015bd2 <_ZN8touchgfx7Outline10renderLineEiiii+0x6e>
90015bbe:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
90015bc2:	428b      	cmp	r3, r1
90015bc4:	f103 0301 	add.w	r3, r3, #1
90015bc8:	bf38      	it	cc
90015bca:	3208      	addcc	r2, #8
90015bcc:	6083      	str	r3, [r0, #8]
90015bce:	bf38      	it	cc
90015bd0:	6102      	strcc	r2, [r0, #16]
90015bd2:	6903      	ldr	r3, [r0, #16]
90015bd4:	9a03      	ldr	r2, [sp, #12]
90015bd6:	f8a3 e000 	strh.w	lr, [r3]
90015bda:	805a      	strh	r2, [r3, #2]
90015bdc:	2200      	movs	r2, #0
90015bde:	809a      	strh	r2, [r3, #4]
90015be0:	80da      	strh	r2, [r3, #6]
90015be2:	e017      	b.n	90015c14 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
90015be4:	9c05      	ldr	r4, [sp, #20]
90015be6:	114e      	asrs	r6, r1, #5
90015be8:	f001 0c1f 	and.w	ip, r1, #31
90015bec:	f8b2 8004 	ldrh.w	r8, [r2, #4]
90015bf0:	f004 041f 	and.w	r4, r4, #31
90015bf4:	4576      	cmp	r6, lr
90015bf6:	f8b2 a006 	ldrh.w	sl, [r2, #6]
90015bfa:	9402      	str	r4, [sp, #8]
90015bfc:	9c04      	ldr	r4, [sp, #16]
90015bfe:	eba4 0403 	sub.w	r4, r4, r3
90015c02:	d10a      	bne.n	90015c1a <_ZN8touchgfx7Outline10renderLineEiiii+0xb6>
90015c04:	9b02      	ldr	r3, [sp, #8]
90015c06:	44a0      	add	r8, r4
90015c08:	449c      	add	ip, r3
90015c0a:	f8a2 8004 	strh.w	r8, [r2, #4]
90015c0e:	fb04 a40c 	mla	r4, r4, ip, sl
90015c12:	80d4      	strh	r4, [r2, #6]
90015c14:	b013      	add	sp, #76	; 0x4c
90015c16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90015c1a:	9d05      	ldr	r5, [sp, #20]
90015c1c:	1a69      	subs	r1, r5, r1
90015c1e:	bf51      	iteee	pl
90015c20:	f1cc 0520 	rsbpl	r5, ip, #32
90015c24:	fb04 f40c 	mulmi.w	r4, r4, ip
90015c28:	4249      	negmi	r1, r1
90015c2a:	2500      	movmi	r5, #0
90015c2c:	bf5d      	ittte	pl
90015c2e:	436c      	mulpl	r4, r5
90015c30:	2520      	movpl	r5, #32
90015c32:	f04f 0901 	movpl.w	r9, #1
90015c36:	f04f 39ff 	movmi.w	r9, #4294967295
90015c3a:	9501      	str	r5, [sp, #4]
90015c3c:	9f01      	ldr	r7, [sp, #4]
90015c3e:	444e      	add	r6, r9
90015c40:	fb94 f5f1 	sdiv	r5, r4, r1
90015c44:	fb01 4415 	mls	r4, r1, r5, r4
90015c48:	44bc      	add	ip, r7
90015c4a:	2c00      	cmp	r4, #0
90015c4c:	bfbc      	itt	lt
90015c4e:	f105 35ff 	addlt.w	r5, r5, #4294967295
90015c52:	1864      	addlt	r4, r4, r1
90015c54:	44a8      	add	r8, r5
90015c56:	fb05 ac0c 	mla	ip, r5, ip, sl
90015c5a:	f8a2 8004 	strh.w	r8, [r2, #4]
90015c5e:	f8a2 c006 	strh.w	ip, [r2, #6]
90015c62:	f8d0 c010 	ldr.w	ip, [r0, #16]
90015c66:	f8bc 8006 	ldrh.w	r8, [ip, #6]
90015c6a:	f8bc 2004 	ldrh.w	r2, [ip, #4]
90015c6e:	ea58 0202 	orrs.w	r2, r8, r2
90015c72:	d011      	beq.n	90015c98 <_ZN8touchgfx7Outline10renderLineEiiii+0x134>
90015c74:	f9bc 8002 	ldrsh.w	r8, [ip, #2]
90015c78:	f1b8 0f00 	cmp.w	r8, #0
90015c7c:	db0c      	blt.n	90015c98 <_ZN8touchgfx7Outline10renderLineEiiii+0x134>
90015c7e:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
90015c80:	4590      	cmp	r8, r2
90015c82:	da09      	bge.n	90015c98 <_ZN8touchgfx7Outline10renderLineEiiii+0x134>
90015c84:	e9d0 2801 	ldrd	r2, r8, [r0, #4]
90015c88:	4590      	cmp	r8, r2
90015c8a:	bf3c      	itt	cc
90015c8c:	f10c 0208 	addcc.w	r2, ip, #8
90015c90:	6102      	strcc	r2, [r0, #16]
90015c92:	f108 0201 	add.w	r2, r8, #1
90015c96:	6082      	str	r2, [r0, #8]
90015c98:	f8d0 c010 	ldr.w	ip, [r0, #16]
90015c9c:	2700      	movs	r7, #0
90015c9e:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
90015ca2:	45b6      	cmp	lr, r6
90015ca4:	f8ac 6000 	strh.w	r6, [ip]
90015ca8:	442b      	add	r3, r5
90015caa:	f8ac 2002 	strh.w	r2, [ip, #2]
90015cae:	f8ac 7004 	strh.w	r7, [ip, #4]
90015cb2:	f8ac 7006 	strh.w	r7, [ip, #6]
90015cb6:	d04b      	beq.n	90015d50 <_ZN8touchgfx7Outline10renderLineEiiii+0x1ec>
90015cb8:	9f04      	ldr	r7, [sp, #16]
90015cba:	1a64      	subs	r4, r4, r1
90015cbc:	f04f 0a00 	mov.w	sl, #0
90015cc0:	1aff      	subs	r7, r7, r3
90015cc2:	443d      	add	r5, r7
90015cc4:	016d      	lsls	r5, r5, #5
90015cc6:	fb95 f8f1 	sdiv	r8, r5, r1
90015cca:	fb01 5518 	mls	r5, r1, r8, r5
90015cce:	2d00      	cmp	r5, #0
90015cd0:	bfbc      	itt	lt
90015cd2:	f108 38ff 	addlt.w	r8, r8, #4294967295
90015cd6:	186d      	addlt	r5, r5, r1
90015cd8:	f108 0701 	add.w	r7, r8, #1
90015cdc:	9703      	str	r7, [sp, #12]
90015cde:	f8d0 c010 	ldr.w	ip, [r0, #16]
90015ce2:	1964      	adds	r4, r4, r5
90015ce4:	444e      	add	r6, r9
90015ce6:	bf54      	ite	pl
90015ce8:	9f03      	ldrpl	r7, [sp, #12]
90015cea:	4647      	movmi	r7, r8
90015cec:	f8bc b004 	ldrh.w	fp, [ip, #4]
90015cf0:	bf58      	it	pl
90015cf2:	1a64      	subpl	r4, r4, r1
90015cf4:	443b      	add	r3, r7
90015cf6:	44bb      	add	fp, r7
90015cf8:	f8ac b004 	strh.w	fp, [ip, #4]
90015cfc:	f8bc b006 	ldrh.w	fp, [ip, #6]
90015d00:	eb0b 1b47 	add.w	fp, fp, r7, lsl #5
90015d04:	f8ac b006 	strh.w	fp, [ip, #6]
90015d08:	f8d0 c010 	ldr.w	ip, [r0, #16]
90015d0c:	f8bc b006 	ldrh.w	fp, [ip, #6]
90015d10:	f8bc 7004 	ldrh.w	r7, [ip, #4]
90015d14:	ea5b 0707 	orrs.w	r7, fp, r7
90015d18:	d011      	beq.n	90015d3e <_ZN8touchgfx7Outline10renderLineEiiii+0x1da>
90015d1a:	f9bc b002 	ldrsh.w	fp, [ip, #2]
90015d1e:	f1bb 0f00 	cmp.w	fp, #0
90015d22:	db0c      	blt.n	90015d3e <_ZN8touchgfx7Outline10renderLineEiiii+0x1da>
90015d24:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
90015d26:	45bb      	cmp	fp, r7
90015d28:	da09      	bge.n	90015d3e <_ZN8touchgfx7Outline10renderLineEiiii+0x1da>
90015d2a:	e9d0 7b01 	ldrd	r7, fp, [r0, #4]
90015d2e:	45bb      	cmp	fp, r7
90015d30:	bf3c      	itt	cc
90015d32:	f10c 0708 	addcc.w	r7, ip, #8
90015d36:	6107      	strcc	r7, [r0, #16]
90015d38:	f10b 0701 	add.w	r7, fp, #1
90015d3c:	6087      	str	r7, [r0, #8]
90015d3e:	6907      	ldr	r7, [r0, #16]
90015d40:	45b6      	cmp	lr, r6
90015d42:	803e      	strh	r6, [r7, #0]
90015d44:	807a      	strh	r2, [r7, #2]
90015d46:	f8a7 a004 	strh.w	sl, [r7, #4]
90015d4a:	f8a7 a006 	strh.w	sl, [r7, #6]
90015d4e:	d1c6      	bne.n	90015cde <_ZN8touchgfx7Outline10renderLineEiiii+0x17a>
90015d50:	9a04      	ldr	r2, [sp, #16]
90015d52:	1ad3      	subs	r3, r2, r3
90015d54:	6902      	ldr	r2, [r0, #16]
90015d56:	8891      	ldrh	r1, [r2, #4]
90015d58:	88d6      	ldrh	r6, [r2, #6]
90015d5a:	4419      	add	r1, r3
90015d5c:	8091      	strh	r1, [r2, #4]
90015d5e:	9902      	ldr	r1, [sp, #8]
90015d60:	f101 0c20 	add.w	ip, r1, #32
90015d64:	9901      	ldr	r1, [sp, #4]
90015d66:	ebac 0c01 	sub.w	ip, ip, r1
90015d6a:	fb03 630c 	mla	r3, r3, ip, r6
90015d6e:	80d3      	strh	r3, [r2, #6]
90015d70:	e750      	b.n	90015c14 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
90015d72:	9d05      	ldr	r5, [sp, #20]
90015d74:	1aa2      	subs	r2, r4, r2
90015d76:	eba5 0501 	sub.w	r5, r5, r1
90015d7a:	9202      	str	r2, [sp, #8]
90015d7c:	9508      	str	r5, [sp, #32]
90015d7e:	f140 8128 	bpl.w	90015fd2 <_ZN8touchgfx7Outline10renderLineEiiii+0x46e>
90015d82:	9a03      	ldr	r2, [sp, #12]
90015d84:	2a00      	cmp	r2, #0
90015d86:	f6ff af45 	blt.w	90015c14 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
90015d8a:	9a02      	ldr	r2, [sp, #8]
90015d8c:	f04f 34ff 	mov.w	r4, #4294967295
90015d90:	4252      	negs	r2, r2
90015d92:	940b      	str	r4, [sp, #44]	; 0x2c
90015d94:	2400      	movs	r4, #0
90015d96:	9202      	str	r2, [sp, #8]
90015d98:	9a06      	ldr	r2, [sp, #24]
90015d9a:	ea42 72e2 	orr.w	r2, r2, r2, asr #31
90015d9e:	9206      	str	r2, [sp, #24]
90015da0:	462a      	mov	r2, r5
90015da2:	435a      	muls	r2, r3
90015da4:	9401      	str	r4, [sp, #4]
90015da6:	9c02      	ldr	r4, [sp, #8]
90015da8:	9d02      	ldr	r5, [sp, #8]
90015daa:	fb92 f4f4 	sdiv	r4, r2, r4
90015dae:	fb05 2214 	mls	r2, r5, r4, r2
90015db2:	2a00      	cmp	r2, #0
90015db4:	9207      	str	r2, [sp, #28]
90015db6:	bfbc      	itt	lt
90015db8:	1952      	addlt	r2, r2, r5
90015dba:	f104 34ff 	addlt.w	r4, r4, #4294967295
90015dbe:	6905      	ldr	r5, [r0, #16]
90015dc0:	bfb8      	it	lt
90015dc2:	9207      	strlt	r2, [sp, #28]
90015dc4:	eb04 0901 	add.w	r9, r4, r1
90015dc8:	9a01      	ldr	r2, [sp, #4]
90015dca:	ea4f 1669 	mov.w	r6, r9, asr #5
90015dce:	429a      	cmp	r2, r3
90015dd0:	f040 8111 	bne.w	90015ff6 <_ZN8touchgfx7Outline10renderLineEiiii+0x492>
90015dd4:	f9b5 3000 	ldrsh.w	r3, [r5]
90015dd8:	429e      	cmp	r6, r3
90015dda:	d104      	bne.n	90015de6 <_ZN8touchgfx7Outline10renderLineEiiii+0x282>
90015ddc:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
90015de0:	9a03      	ldr	r2, [sp, #12]
90015de2:	429a      	cmp	r2, r3
90015de4:	d01b      	beq.n	90015e1e <_ZN8touchgfx7Outline10renderLineEiiii+0x2ba>
90015de6:	88ea      	ldrh	r2, [r5, #6]
90015de8:	88ab      	ldrh	r3, [r5, #4]
90015dea:	4313      	orrs	r3, r2
90015dec:	d010      	beq.n	90015e10 <_ZN8touchgfx7Outline10renderLineEiiii+0x2ac>
90015dee:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
90015df2:	2a00      	cmp	r2, #0
90015df4:	db0c      	blt.n	90015e10 <_ZN8touchgfx7Outline10renderLineEiiii+0x2ac>
90015df6:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
90015df8:	429a      	cmp	r2, r3
90015dfa:	da09      	bge.n	90015e10 <_ZN8touchgfx7Outline10renderLineEiiii+0x2ac>
90015dfc:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
90015e00:	429a      	cmp	r2, r3
90015e02:	f102 0201 	add.w	r2, r2, #1
90015e06:	bf38      	it	cc
90015e08:	3508      	addcc	r5, #8
90015e0a:	6082      	str	r2, [r0, #8]
90015e0c:	bf38      	it	cc
90015e0e:	6105      	strcc	r5, [r0, #16]
90015e10:	6903      	ldr	r3, [r0, #16]
90015e12:	9a03      	ldr	r2, [sp, #12]
90015e14:	801e      	strh	r6, [r3, #0]
90015e16:	805a      	strh	r2, [r3, #2]
90015e18:	2200      	movs	r2, #0
90015e1a:	809a      	strh	r2, [r3, #4]
90015e1c:	80da      	strh	r2, [r3, #6]
90015e1e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
90015e20:	9a03      	ldr	r2, [sp, #12]
90015e22:	6901      	ldr	r1, [r0, #16]
90015e24:	441a      	add	r2, r3
90015e26:	f9b1 3000 	ldrsh.w	r3, [r1]
90015e2a:	42b3      	cmp	r3, r6
90015e2c:	d103      	bne.n	90015e36 <_ZN8touchgfx7Outline10renderLineEiiii+0x2d2>
90015e2e:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
90015e32:	429a      	cmp	r2, r3
90015e34:	d01a      	beq.n	90015e6c <_ZN8touchgfx7Outline10renderLineEiiii+0x308>
90015e36:	88cc      	ldrh	r4, [r1, #6]
90015e38:	888b      	ldrh	r3, [r1, #4]
90015e3a:	4323      	orrs	r3, r4
90015e3c:	d010      	beq.n	90015e60 <_ZN8touchgfx7Outline10renderLineEiiii+0x2fc>
90015e3e:	f9b1 4002 	ldrsh.w	r4, [r1, #2]
90015e42:	2c00      	cmp	r4, #0
90015e44:	db0c      	blt.n	90015e60 <_ZN8touchgfx7Outline10renderLineEiiii+0x2fc>
90015e46:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
90015e48:	429c      	cmp	r4, r3
90015e4a:	da09      	bge.n	90015e60 <_ZN8touchgfx7Outline10renderLineEiiii+0x2fc>
90015e4c:	e9d0 3401 	ldrd	r3, r4, [r0, #4]
90015e50:	429c      	cmp	r4, r3
90015e52:	f104 0401 	add.w	r4, r4, #1
90015e56:	bf38      	it	cc
90015e58:	3108      	addcc	r1, #8
90015e5a:	6084      	str	r4, [r0, #8]
90015e5c:	bf38      	it	cc
90015e5e:	6101      	strcc	r1, [r0, #16]
90015e60:	6903      	ldr	r3, [r0, #16]
90015e62:	2100      	movs	r1, #0
90015e64:	801e      	strh	r6, [r3, #0]
90015e66:	805a      	strh	r2, [r3, #2]
90015e68:	8099      	strh	r1, [r3, #4]
90015e6a:	80d9      	strh	r1, [r3, #6]
90015e6c:	9b06      	ldr	r3, [sp, #24]
90015e6e:	4293      	cmp	r3, r2
90015e70:	f000 8082 	beq.w	90015f78 <_ZN8touchgfx7Outline10renderLineEiiii+0x414>
90015e74:	9b08      	ldr	r3, [sp, #32]
90015e76:	9902      	ldr	r1, [sp, #8]
90015e78:	015b      	lsls	r3, r3, #5
90015e7a:	9c02      	ldr	r4, [sp, #8]
90015e7c:	fb93 f1f1 	sdiv	r1, r3, r1
90015e80:	fb04 3311 	mls	r3, r4, r1, r3
90015e84:	9103      	str	r1, [sp, #12]
90015e86:	2b00      	cmp	r3, #0
90015e88:	9308      	str	r3, [sp, #32]
90015e8a:	da04      	bge.n	90015e96 <_ZN8touchgfx7Outline10renderLineEiiii+0x332>
90015e8c:	1e4b      	subs	r3, r1, #1
90015e8e:	9303      	str	r3, [sp, #12]
90015e90:	9b08      	ldr	r3, [sp, #32]
90015e92:	4423      	add	r3, r4
90015e94:	9308      	str	r3, [sp, #32]
90015e96:	9b07      	ldr	r3, [sp, #28]
90015e98:	464f      	mov	r7, r9
90015e9a:	9902      	ldr	r1, [sp, #8]
90015e9c:	2600      	movs	r6, #0
90015e9e:	1a5b      	subs	r3, r3, r1
90015ea0:	9307      	str	r3, [sp, #28]
90015ea2:	9b01      	ldr	r3, [sp, #4]
90015ea4:	f1c3 0320 	rsb	r3, r3, #32
90015ea8:	930e      	str	r3, [sp, #56]	; 0x38
90015eaa:	990e      	ldr	r1, [sp, #56]	; 0x38
90015eac:	9b01      	ldr	r3, [sp, #4]
90015eae:	1a5b      	subs	r3, r3, r1
90015eb0:	930a      	str	r3, [sp, #40]	; 0x28
90015eb2:	e9dd 3107 	ldrd	r3, r1, [sp, #28]
90015eb6:	185b      	adds	r3, r3, r1
90015eb8:	bf58      	it	pl
90015eba:	9902      	ldrpl	r1, [sp, #8]
90015ebc:	9307      	str	r3, [sp, #28]
90015ebe:	bf57      	itett	pl
90015ec0:	1a5b      	subpl	r3, r3, r1
90015ec2:	9903      	ldrmi	r1, [sp, #12]
90015ec4:	9307      	strpl	r3, [sp, #28]
90015ec6:	9b03      	ldrpl	r3, [sp, #12]
90015ec8:	bf58      	it	pl
90015eca:	1c59      	addpl	r1, r3, #1
90015ecc:	2a00      	cmp	r2, #0
90015ece:	4489      	add	r9, r1
90015ed0:	ea4f 1a69 	mov.w	sl, r9, asr #5
90015ed4:	db2e      	blt.n	90015f34 <_ZN8touchgfx7Outline10renderLineEiiii+0x3d0>
90015ed6:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
90015ed8:	4293      	cmp	r3, r2
90015eda:	dd2b      	ble.n	90015f34 <_ZN8touchgfx7Outline10renderLineEiiii+0x3d0>
90015edc:	9c01      	ldr	r4, [sp, #4]
90015ede:	6905      	ldr	r5, [r0, #16]
90015ee0:	46a0      	mov	r8, r4
90015ee2:	9c0e      	ldr	r4, [sp, #56]	; 0x38
90015ee4:	f9b5 c004 	ldrsh.w	ip, [r5, #4]
90015ee8:	45a0      	cmp	r8, r4
90015eea:	f9b5 e006 	ldrsh.w	lr, [r5, #6]
90015eee:	f040 814c 	bne.w	9001618a <_ZN8touchgfx7Outline10renderLineEiiii+0x626>
90015ef2:	f9b5 1000 	ldrsh.w	r1, [r5]
90015ef6:	4551      	cmp	r1, sl
90015ef8:	d103      	bne.n	90015f02 <_ZN8touchgfx7Outline10renderLineEiiii+0x39e>
90015efa:	f9b5 1002 	ldrsh.w	r1, [r5, #2]
90015efe:	4291      	cmp	r1, r2
90015f00:	d018      	beq.n	90015f34 <_ZN8touchgfx7Outline10renderLineEiiii+0x3d0>
90015f02:	ea5c 010e 	orrs.w	r1, ip, lr
90015f06:	d00f      	beq.n	90015f28 <_ZN8touchgfx7Outline10renderLineEiiii+0x3c4>
90015f08:	f9b5 1002 	ldrsh.w	r1, [r5, #2]
90015f0c:	2900      	cmp	r1, #0
90015f0e:	db0b      	blt.n	90015f28 <_ZN8touchgfx7Outline10renderLineEiiii+0x3c4>
90015f10:	428b      	cmp	r3, r1
90015f12:	dd09      	ble.n	90015f28 <_ZN8touchgfx7Outline10renderLineEiiii+0x3c4>
90015f14:	e9d0 3101 	ldrd	r3, r1, [r0, #4]
90015f18:	4299      	cmp	r1, r3
90015f1a:	f101 0101 	add.w	r1, r1, #1
90015f1e:	bf38      	it	cc
90015f20:	3508      	addcc	r5, #8
90015f22:	6081      	str	r1, [r0, #8]
90015f24:	bf38      	it	cc
90015f26:	6105      	strcc	r5, [r0, #16]
90015f28:	6903      	ldr	r3, [r0, #16]
90015f2a:	f8a3 a000 	strh.w	sl, [r3]
90015f2e:	805a      	strh	r2, [r3, #2]
90015f30:	809e      	strh	r6, [r3, #4]
90015f32:	80de      	strh	r6, [r3, #6]
90015f34:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
90015f36:	6901      	ldr	r1, [r0, #16]
90015f38:	441a      	add	r2, r3
90015f3a:	88cc      	ldrh	r4, [r1, #6]
90015f3c:	888b      	ldrh	r3, [r1, #4]
90015f3e:	4323      	orrs	r3, r4
90015f40:	d010      	beq.n	90015f64 <_ZN8touchgfx7Outline10renderLineEiiii+0x400>
90015f42:	f9b1 4002 	ldrsh.w	r4, [r1, #2]
90015f46:	2c00      	cmp	r4, #0
90015f48:	db0c      	blt.n	90015f64 <_ZN8touchgfx7Outline10renderLineEiiii+0x400>
90015f4a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
90015f4c:	429c      	cmp	r4, r3
90015f4e:	da09      	bge.n	90015f64 <_ZN8touchgfx7Outline10renderLineEiiii+0x400>
90015f50:	e9d0 3401 	ldrd	r3, r4, [r0, #4]
90015f54:	429c      	cmp	r4, r3
90015f56:	f104 0401 	add.w	r4, r4, #1
90015f5a:	bf38      	it	cc
90015f5c:	3108      	addcc	r1, #8
90015f5e:	6084      	str	r4, [r0, #8]
90015f60:	bf38      	it	cc
90015f62:	6101      	strcc	r1, [r0, #16]
90015f64:	6903      	ldr	r3, [r0, #16]
90015f66:	464f      	mov	r7, r9
90015f68:	f8a3 a000 	strh.w	sl, [r3]
90015f6c:	805a      	strh	r2, [r3, #2]
90015f6e:	809e      	strh	r6, [r3, #4]
90015f70:	80de      	strh	r6, [r3, #6]
90015f72:	9b06      	ldr	r3, [sp, #24]
90015f74:	4293      	cmp	r3, r2
90015f76:	d19c      	bne.n	90015eb2 <_ZN8touchgfx7Outline10renderLineEiiii+0x34e>
90015f78:	9b01      	ldr	r3, [sp, #4]
90015f7a:	6907      	ldr	r7, [r0, #16]
90015f7c:	f1c3 0620 	rsb	r6, r3, #32
90015f80:	9b05      	ldr	r3, [sp, #20]
90015f82:	ea4f 1e63 	mov.w	lr, r3, asr #5
90015f86:	9b04      	ldr	r3, [sp, #16]
90015f88:	429e      	cmp	r6, r3
90015f8a:	f040 81c7 	bne.w	9001631c <_ZN8touchgfx7Outline10renderLineEiiii+0x7b8>
90015f8e:	f9b7 3000 	ldrsh.w	r3, [r7]
90015f92:	459e      	cmp	lr, r3
90015f94:	d104      	bne.n	90015fa0 <_ZN8touchgfx7Outline10renderLineEiiii+0x43c>
90015f96:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
90015f9a:	429a      	cmp	r2, r3
90015f9c:	f43f ae3a 	beq.w	90015c14 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
90015fa0:	88f9      	ldrh	r1, [r7, #6]
90015fa2:	88bb      	ldrh	r3, [r7, #4]
90015fa4:	430b      	orrs	r3, r1
90015fa6:	d010      	beq.n	90015fca <_ZN8touchgfx7Outline10renderLineEiiii+0x466>
90015fa8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
90015fac:	2b00      	cmp	r3, #0
90015fae:	db0c      	blt.n	90015fca <_ZN8touchgfx7Outline10renderLineEiiii+0x466>
90015fb0:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
90015fb2:	428b      	cmp	r3, r1
90015fb4:	da09      	bge.n	90015fca <_ZN8touchgfx7Outline10renderLineEiiii+0x466>
90015fb6:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
90015fba:	428b      	cmp	r3, r1
90015fbc:	f103 0301 	add.w	r3, r3, #1
90015fc0:	bf38      	it	cc
90015fc2:	3708      	addcc	r7, #8
90015fc4:	6083      	str	r3, [r0, #8]
90015fc6:	bf38      	it	cc
90015fc8:	6107      	strcc	r7, [r0, #16]
90015fca:	6903      	ldr	r3, [r0, #16]
90015fcc:	f8a3 e000 	strh.w	lr, [r3]
90015fd0:	e603      	b.n	90015bda <_ZN8touchgfx7Outline10renderLineEiiii+0x76>
90015fd2:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
90015fd4:	9c03      	ldr	r4, [sp, #12]
90015fd6:	42a2      	cmp	r2, r4
90015fd8:	f6ff ae1c 	blt.w	90015c14 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
90015fdc:	9c06      	ldr	r4, [sp, #24]
90015fde:	42a2      	cmp	r2, r4
90015fe0:	9c08      	ldr	r4, [sp, #32]
90015fe2:	bfbc      	itt	lt
90015fe4:	3201      	addlt	r2, #1
90015fe6:	9206      	strlt	r2, [sp, #24]
90015fe8:	f1c3 0220 	rsb	r2, r3, #32
90015fec:	4362      	muls	r2, r4
90015fee:	2401      	movs	r4, #1
90015ff0:	940b      	str	r4, [sp, #44]	; 0x2c
90015ff2:	2420      	movs	r4, #32
90015ff4:	e6d6      	b.n	90015da4 <_ZN8touchgfx7Outline10renderLineEiiii+0x240>
90015ff6:	ea4f 1861 	mov.w	r8, r1, asr #5
90015ffa:	f009 021f 	and.w	r2, r9, #31
90015ffe:	f001 011f 	and.w	r1, r1, #31
90016002:	f8b5 e004 	ldrh.w	lr, [r5, #4]
90016006:	920c      	str	r2, [sp, #48]	; 0x30
90016008:	45b0      	cmp	r8, r6
9001600a:	9a01      	ldr	r2, [sp, #4]
9001600c:	f8b5 a006 	ldrh.w	sl, [r5, #6]
90016010:	eba2 0203 	sub.w	r2, r2, r3
90016014:	d108      	bne.n	90016028 <_ZN8touchgfx7Outline10renderLineEiiii+0x4c4>
90016016:	9b0c      	ldr	r3, [sp, #48]	; 0x30
90016018:	4496      	add	lr, r2
9001601a:	4419      	add	r1, r3
9001601c:	f8a5 e004 	strh.w	lr, [r5, #4]
90016020:	fb02 a101 	mla	r1, r2, r1, sl
90016024:	80e9      	strh	r1, [r5, #6]
90016026:	e6fa      	b.n	90015e1e <_ZN8touchgfx7Outline10renderLineEiiii+0x2ba>
90016028:	2c00      	cmp	r4, #0
9001602a:	f2c0 80a7 	blt.w	9001617c <_ZN8touchgfx7Outline10renderLineEiiii+0x618>
9001602e:	2701      	movs	r7, #1
90016030:	f1c1 0c20 	rsb	ip, r1, #32
90016034:	970a      	str	r7, [sp, #40]	; 0x28
90016036:	2720      	movs	r7, #32
90016038:	fb02 f20c 	mul.w	r2, r2, ip
9001603c:	9709      	str	r7, [sp, #36]	; 0x24
9001603e:	9f09      	ldr	r7, [sp, #36]	; 0x24
90016040:	fb92 fcf4 	sdiv	ip, r2, r4
90016044:	fb04 221c 	mls	r2, r4, ip, r2
90016048:	4439      	add	r1, r7
9001604a:	2a00      	cmp	r2, #0
9001604c:	bfbc      	itt	lt
9001604e:	f10c 3cff 	addlt.w	ip, ip, #4294967295
90016052:	1912      	addlt	r2, r2, r4
90016054:	fb0c a101 	mla	r1, ip, r1, sl
90016058:	44e6      	add	lr, ip
9001605a:	80e9      	strh	r1, [r5, #6]
9001605c:	990a      	ldr	r1, [sp, #40]	; 0x28
9001605e:	f8a5 e004 	strh.w	lr, [r5, #4]
90016062:	eb08 0501 	add.w	r5, r8, r1
90016066:	6901      	ldr	r1, [r0, #16]
90016068:	f8b1 8006 	ldrh.w	r8, [r1, #6]
9001606c:	f8b1 e004 	ldrh.w	lr, [r1, #4]
90016070:	ea58 070e 	orrs.w	r7, r8, lr
90016074:	d010      	beq.n	90016098 <_ZN8touchgfx7Outline10renderLineEiiii+0x534>
90016076:	f9b1 e002 	ldrsh.w	lr, [r1, #2]
9001607a:	f1be 0f00 	cmp.w	lr, #0
9001607e:	db0b      	blt.n	90016098 <_ZN8touchgfx7Outline10renderLineEiiii+0x534>
90016080:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
90016082:	45be      	cmp	lr, r7
90016084:	da08      	bge.n	90016098 <_ZN8touchgfx7Outline10renderLineEiiii+0x534>
90016086:	e9d0 7e01 	ldrd	r7, lr, [r0, #4]
9001608a:	45be      	cmp	lr, r7
9001608c:	bf3c      	itt	cc
9001608e:	3108      	addcc	r1, #8
90016090:	6101      	strcc	r1, [r0, #16]
90016092:	f10e 0101 	add.w	r1, lr, #1
90016096:	6081      	str	r1, [r0, #8]
90016098:	6901      	ldr	r1, [r0, #16]
9001609a:	f04f 0e00 	mov.w	lr, #0
9001609e:	f9bd 800c 	ldrsh.w	r8, [sp, #12]
900160a2:	42ae      	cmp	r6, r5
900160a4:	800d      	strh	r5, [r1, #0]
900160a6:	4463      	add	r3, ip
900160a8:	f8a1 8002 	strh.w	r8, [r1, #2]
900160ac:	f8a1 e004 	strh.w	lr, [r1, #4]
900160b0:	f8a1 e006 	strh.w	lr, [r1, #6]
900160b4:	d053      	beq.n	9001615e <_ZN8touchgfx7Outline10renderLineEiiii+0x5fa>
900160b6:	9901      	ldr	r1, [sp, #4]
900160b8:	1b12      	subs	r2, r2, r4
900160ba:	1ac9      	subs	r1, r1, r3
900160bc:	4461      	add	r1, ip
900160be:	0149      	lsls	r1, r1, #5
900160c0:	fb91 fef4 	sdiv	lr, r1, r4
900160c4:	fb04 111e 	mls	r1, r4, lr, r1
900160c8:	2900      	cmp	r1, #0
900160ca:	bfbc      	itt	lt
900160cc:	f10e 3eff 	addlt.w	lr, lr, #4294967295
900160d0:	1909      	addlt	r1, r1, r4
900160d2:	f10e 0701 	add.w	r7, lr, #1
900160d6:	970d      	str	r7, [sp, #52]	; 0x34
900160d8:	f8d0 a010 	ldr.w	sl, [r0, #16]
900160dc:	1852      	adds	r2, r2, r1
900160de:	9f0a      	ldr	r7, [sp, #40]	; 0x28
900160e0:	bf54      	ite	pl
900160e2:	f8dd c034 	ldrpl.w	ip, [sp, #52]	; 0x34
900160e6:	46f4      	movmi	ip, lr
900160e8:	f8ba b004 	ldrh.w	fp, [sl, #4]
900160ec:	bf58      	it	pl
900160ee:	1b12      	subpl	r2, r2, r4
900160f0:	4463      	add	r3, ip
900160f2:	443d      	add	r5, r7
900160f4:	44e3      	add	fp, ip
900160f6:	f8aa b004 	strh.w	fp, [sl, #4]
900160fa:	f8ba b006 	ldrh.w	fp, [sl, #6]
900160fe:	eb0b 1b4c 	add.w	fp, fp, ip, lsl #5
90016102:	f8aa b006 	strh.w	fp, [sl, #6]
90016106:	f8d0 c010 	ldr.w	ip, [r0, #16]
9001610a:	f8bc b006 	ldrh.w	fp, [ip, #6]
9001610e:	f8bc a004 	ldrh.w	sl, [ip, #4]
90016112:	ea5b 070a 	orrs.w	r7, fp, sl
90016116:	d014      	beq.n	90016142 <_ZN8touchgfx7Outline10renderLineEiiii+0x5de>
90016118:	f9bc a002 	ldrsh.w	sl, [ip, #2]
9001611c:	f1ba 0f00 	cmp.w	sl, #0
90016120:	db0f      	blt.n	90016142 <_ZN8touchgfx7Outline10renderLineEiiii+0x5de>
90016122:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
90016124:	45ba      	cmp	sl, r7
90016126:	da0c      	bge.n	90016142 <_ZN8touchgfx7Outline10renderLineEiiii+0x5de>
90016128:	e9d0 7a01 	ldrd	r7, sl, [r0, #4]
9001612c:	45ba      	cmp	sl, r7
9001612e:	f10a 0a01 	add.w	sl, sl, #1
90016132:	bf38      	it	cc
90016134:	f10c 0c08 	addcc.w	ip, ip, #8
90016138:	f8c0 a008 	str.w	sl, [r0, #8]
9001613c:	bf38      	it	cc
9001613e:	f8c0 c010 	strcc.w	ip, [r0, #16]
90016142:	f8d0 c010 	ldr.w	ip, [r0, #16]
90016146:	f04f 0700 	mov.w	r7, #0
9001614a:	42ae      	cmp	r6, r5
9001614c:	f8ac 5000 	strh.w	r5, [ip]
90016150:	f8ac 8002 	strh.w	r8, [ip, #2]
90016154:	f8ac 7004 	strh.w	r7, [ip, #4]
90016158:	f8ac 7006 	strh.w	r7, [ip, #6]
9001615c:	d1bc      	bne.n	900160d8 <_ZN8touchgfx7Outline10renderLineEiiii+0x574>
9001615e:	6904      	ldr	r4, [r0, #16]
90016160:	9a01      	ldr	r2, [sp, #4]
90016162:	990c      	ldr	r1, [sp, #48]	; 0x30
90016164:	1ad3      	subs	r3, r2, r3
90016166:	88a2      	ldrh	r2, [r4, #4]
90016168:	3120      	adds	r1, #32
9001616a:	441a      	add	r2, r3
9001616c:	80a2      	strh	r2, [r4, #4]
9001616e:	9a09      	ldr	r2, [sp, #36]	; 0x24
90016170:	1a89      	subs	r1, r1, r2
90016172:	88e2      	ldrh	r2, [r4, #6]
90016174:	fb03 2301 	mla	r3, r3, r1, r2
90016178:	80e3      	strh	r3, [r4, #6]
9001617a:	e650      	b.n	90015e1e <_ZN8touchgfx7Outline10renderLineEiiii+0x2ba>
9001617c:	f04f 37ff 	mov.w	r7, #4294967295
90016180:	434a      	muls	r2, r1
90016182:	4264      	negs	r4, r4
90016184:	970a      	str	r7, [sp, #40]	; 0x28
90016186:	2700      	movs	r7, #0
90016188:	e758      	b.n	9001603c <_ZN8touchgfx7Outline10renderLineEiiii+0x4d8>
9001618a:	ea4f 1867 	mov.w	r8, r7, asr #5
9001618e:	f009 031f 	and.w	r3, r9, #31
90016192:	f007 071f 	and.w	r7, r7, #31
90016196:	fa1f fc8c 	uxth.w	ip, ip
9001619a:	45d0      	cmp	r8, sl
9001619c:	930f      	str	r3, [sp, #60]	; 0x3c
9001619e:	fa1f fe8e 	uxth.w	lr, lr
900161a2:	d10a      	bne.n	900161ba <_ZN8touchgfx7Outline10renderLineEiiii+0x656>
900161a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
900161a6:	449c      	add	ip, r3
900161a8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
900161aa:	441f      	add	r7, r3
900161ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
900161ae:	f8a5 c004 	strh.w	ip, [r5, #4]
900161b2:	fb03 e707 	mla	r7, r3, r7, lr
900161b6:	80ef      	strh	r7, [r5, #6]
900161b8:	e6bc      	b.n	90015f34 <_ZN8touchgfx7Outline10renderLineEiiii+0x3d0>
900161ba:	2900      	cmp	r1, #0
900161bc:	f2c0 80a6 	blt.w	9001630c <_ZN8touchgfx7Outline10renderLineEiiii+0x7a8>
900161c0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
900161c2:	f1c7 0320 	rsb	r3, r7, #32
900161c6:	4363      	muls	r3, r4
900161c8:	2401      	movs	r4, #1
900161ca:	940d      	str	r4, [sp, #52]	; 0x34
900161cc:	2420      	movs	r4, #32
900161ce:	940c      	str	r4, [sp, #48]	; 0x30
900161d0:	fb93 f4f1 	sdiv	r4, r3, r1
900161d4:	fb01 3b14 	mls	fp, r1, r4, r3
900161d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
900161da:	f1bb 0f00 	cmp.w	fp, #0
900161de:	441f      	add	r7, r3
900161e0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
900161e2:	bfbc      	itt	lt
900161e4:	f104 34ff 	addlt.w	r4, r4, #4294967295
900161e8:	448b      	addlt	fp, r1
900161ea:	fb04 e707 	mla	r7, r4, r7, lr
900161ee:	44a4      	add	ip, r4
900161f0:	80ef      	strh	r7, [r5, #6]
900161f2:	f8a5 c004 	strh.w	ip, [r5, #4]
900161f6:	eb08 0503 	add.w	r5, r8, r3
900161fa:	f8d0 c010 	ldr.w	ip, [r0, #16]
900161fe:	f8bc e006 	ldrh.w	lr, [ip, #6]
90016202:	f8bc 7004 	ldrh.w	r7, [ip, #4]
90016206:	ea5e 0307 	orrs.w	r3, lr, r7
9001620a:	d011      	beq.n	90016230 <_ZN8touchgfx7Outline10renderLineEiiii+0x6cc>
9001620c:	f9bc e002 	ldrsh.w	lr, [ip, #2]
90016210:	f1be 0f00 	cmp.w	lr, #0
90016214:	db0c      	blt.n	90016230 <_ZN8touchgfx7Outline10renderLineEiiii+0x6cc>
90016216:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
90016218:	45be      	cmp	lr, r7
9001621a:	da09      	bge.n	90016230 <_ZN8touchgfx7Outline10renderLineEiiii+0x6cc>
9001621c:	e9d0 7e01 	ldrd	r7, lr, [r0, #4]
90016220:	45be      	cmp	lr, r7
90016222:	bf3c      	itt	cc
90016224:	f10c 0708 	addcc.w	r7, ip, #8
90016228:	6107      	strcc	r7, [r0, #16]
9001622a:	f10e 0701 	add.w	r7, lr, #1
9001622e:	6087      	str	r7, [r0, #8]
90016230:	6907      	ldr	r7, [r0, #16]
90016232:	b213      	sxth	r3, r2
90016234:	4555      	cmp	r5, sl
90016236:	9310      	str	r3, [sp, #64]	; 0x40
90016238:	807b      	strh	r3, [r7, #2]
9001623a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
9001623c:	803d      	strh	r5, [r7, #0]
9001623e:	80be      	strh	r6, [r7, #4]
90016240:	eb04 0c03 	add.w	ip, r4, r3
90016244:	80fe      	strh	r6, [r7, #6]
90016246:	d050      	beq.n	900162ea <_ZN8touchgfx7Outline10renderLineEiiii+0x786>
90016248:	9b01      	ldr	r3, [sp, #4]
9001624a:	eba3 070c 	sub.w	r7, r3, ip
9001624e:	ebab 0301 	sub.w	r3, fp, r1
90016252:	443c      	add	r4, r7
90016254:	9309      	str	r3, [sp, #36]	; 0x24
90016256:	0164      	lsls	r4, r4, #5
90016258:	fb94 f8f1 	sdiv	r8, r4, r1
9001625c:	fb01 4418 	mls	r4, r1, r8, r4
90016260:	2c00      	cmp	r4, #0
90016262:	bfbc      	itt	lt
90016264:	f108 38ff 	addlt.w	r8, r8, #4294967295
90016268:	1864      	addlt	r4, r4, r1
9001626a:	f108 0701 	add.w	r7, r8, #1
9001626e:	9711      	str	r7, [sp, #68]	; 0x44
90016270:	9b09      	ldr	r3, [sp, #36]	; 0x24
90016272:	f8d0 e010 	ldr.w	lr, [r0, #16]
90016276:	191b      	adds	r3, r3, r4
90016278:	f8be b004 	ldrh.w	fp, [lr, #4]
9001627c:	bf54      	ite	pl
9001627e:	9f11      	ldrpl	r7, [sp, #68]	; 0x44
90016280:	4647      	movmi	r7, r8
90016282:	9309      	str	r3, [sp, #36]	; 0x24
90016284:	bf58      	it	pl
90016286:	1a5b      	subpl	r3, r3, r1
90016288:	44bb      	add	fp, r7
9001628a:	44bc      	add	ip, r7
9001628c:	bf58      	it	pl
9001628e:	9309      	strpl	r3, [sp, #36]	; 0x24
90016290:	f8ae b004 	strh.w	fp, [lr, #4]
90016294:	f8be b006 	ldrh.w	fp, [lr, #6]
90016298:	eb0b 1b47 	add.w	fp, fp, r7, lsl #5
9001629c:	9f0d      	ldr	r7, [sp, #52]	; 0x34
9001629e:	f8ae b006 	strh.w	fp, [lr, #6]
900162a2:	443d      	add	r5, r7
900162a4:	f8d0 e010 	ldr.w	lr, [r0, #16]
900162a8:	f8be b006 	ldrh.w	fp, [lr, #6]
900162ac:	f8be 7004 	ldrh.w	r7, [lr, #4]
900162b0:	ea5b 0307 	orrs.w	r3, fp, r7
900162b4:	d011      	beq.n	900162da <_ZN8touchgfx7Outline10renderLineEiiii+0x776>
900162b6:	f9be b002 	ldrsh.w	fp, [lr, #2]
900162ba:	f1bb 0f00 	cmp.w	fp, #0
900162be:	db0c      	blt.n	900162da <_ZN8touchgfx7Outline10renderLineEiiii+0x776>
900162c0:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
900162c2:	45bb      	cmp	fp, r7
900162c4:	da09      	bge.n	900162da <_ZN8touchgfx7Outline10renderLineEiiii+0x776>
900162c6:	e9d0 7b01 	ldrd	r7, fp, [r0, #4]
900162ca:	45bb      	cmp	fp, r7
900162cc:	bf3c      	itt	cc
900162ce:	f10e 0708 	addcc.w	r7, lr, #8
900162d2:	6107      	strcc	r7, [r0, #16]
900162d4:	f10b 0701 	add.w	r7, fp, #1
900162d8:	6087      	str	r7, [r0, #8]
900162da:	6907      	ldr	r7, [r0, #16]
900162dc:	4555      	cmp	r5, sl
900162de:	9b10      	ldr	r3, [sp, #64]	; 0x40
900162e0:	803d      	strh	r5, [r7, #0]
900162e2:	807b      	strh	r3, [r7, #2]
900162e4:	80be      	strh	r6, [r7, #4]
900162e6:	80fe      	strh	r6, [r7, #6]
900162e8:	d1c2      	bne.n	90016270 <_ZN8touchgfx7Outline10renderLineEiiii+0x70c>
900162ea:	9b01      	ldr	r3, [sp, #4]
900162ec:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
900162ee:	eba3 0c0c 	sub.w	ip, r3, ip
900162f2:	6903      	ldr	r3, [r0, #16]
900162f4:	3720      	adds	r7, #32
900162f6:	8899      	ldrh	r1, [r3, #4]
900162f8:	4461      	add	r1, ip
900162fa:	8099      	strh	r1, [r3, #4]
900162fc:	990c      	ldr	r1, [sp, #48]	; 0x30
900162fe:	1a7f      	subs	r7, r7, r1
90016300:	88d9      	ldrh	r1, [r3, #6]
90016302:	fb0c 1c07 	mla	ip, ip, r7, r1
90016306:	f8a3 c006 	strh.w	ip, [r3, #6]
9001630a:	e613      	b.n	90015f34 <_ZN8touchgfx7Outline10renderLineEiiii+0x3d0>
9001630c:	f04f 34ff 	mov.w	r4, #4294967295
90016310:	9b0a      	ldr	r3, [sp, #40]	; 0x28
90016312:	4249      	negs	r1, r1
90016314:	940d      	str	r4, [sp, #52]	; 0x34
90016316:	2400      	movs	r4, #0
90016318:	437b      	muls	r3, r7
9001631a:	e758      	b.n	900161ce <_ZN8touchgfx7Outline10renderLineEiiii+0x66a>
9001631c:	9905      	ldr	r1, [sp, #20]
9001631e:	ea4f 1b69 	mov.w	fp, r9, asr #5
90016322:	f009 0c1f 	and.w	ip, r9, #31
90016326:	f8b7 8004 	ldrh.w	r8, [r7, #4]
9001632a:	f001 011f 	and.w	r1, r1, #31
9001632e:	45f3      	cmp	fp, lr
90016330:	f8b7 a006 	ldrh.w	sl, [r7, #6]
90016334:	9102      	str	r1, [sp, #8]
90016336:	9904      	ldr	r1, [sp, #16]
90016338:	eba1 0406 	sub.w	r4, r1, r6
9001633c:	d108      	bne.n	90016350 <_ZN8touchgfx7Outline10renderLineEiiii+0x7ec>
9001633e:	9b02      	ldr	r3, [sp, #8]
90016340:	44a0      	add	r8, r4
90016342:	449c      	add	ip, r3
90016344:	f8a7 8004 	strh.w	r8, [r7, #4]
90016348:	fb04 a40c 	mla	r4, r4, ip, sl
9001634c:	80fc      	strh	r4, [r7, #6]
9001634e:	e461      	b.n	90015c14 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
90016350:	9905      	ldr	r1, [sp, #20]
90016352:	ebb1 0109 	subs.w	r1, r1, r9
90016356:	bf51      	iteee	pl
90016358:	f1cc 0520 	rsbpl	r5, ip, #32
9001635c:	fb04 f40c 	mulmi.w	r4, r4, ip
90016360:	4249      	negmi	r1, r1
90016362:	2500      	movmi	r5, #0
90016364:	bf5d      	ittte	pl
90016366:	436c      	mulpl	r4, r5
90016368:	2520      	movpl	r5, #32
9001636a:	f04f 0901 	movpl.w	r9, #1
9001636e:	f04f 39ff 	movmi.w	r9, #4294967295
90016372:	9501      	str	r5, [sp, #4]
90016374:	9b01      	ldr	r3, [sp, #4]
90016376:	fb94 f5f1 	sdiv	r5, r4, r1
9001637a:	fb01 4415 	mls	r4, r1, r5, r4
9001637e:	449c      	add	ip, r3
90016380:	eb0b 0309 	add.w	r3, fp, r9
90016384:	2c00      	cmp	r4, #0
90016386:	bfbc      	itt	lt
90016388:	f105 35ff 	addlt.w	r5, r5, #4294967295
9001638c:	1864      	addlt	r4, r4, r1
9001638e:	44a8      	add	r8, r5
90016390:	fb05 ac0c 	mla	ip, r5, ip, sl
90016394:	f8a7 8004 	strh.w	r8, [r7, #4]
90016398:	f8a7 c006 	strh.w	ip, [r7, #6]
9001639c:	f8d0 c010 	ldr.w	ip, [r0, #16]
900163a0:	f8bc 8006 	ldrh.w	r8, [ip, #6]
900163a4:	f8bc 7004 	ldrh.w	r7, [ip, #4]
900163a8:	ea58 0707 	orrs.w	r7, r8, r7
900163ac:	d011      	beq.n	900163d2 <_ZN8touchgfx7Outline10renderLineEiiii+0x86e>
900163ae:	f9bc 8002 	ldrsh.w	r8, [ip, #2]
900163b2:	f1b8 0f00 	cmp.w	r8, #0
900163b6:	db0c      	blt.n	900163d2 <_ZN8touchgfx7Outline10renderLineEiiii+0x86e>
900163b8:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
900163ba:	45b8      	cmp	r8, r7
900163bc:	da09      	bge.n	900163d2 <_ZN8touchgfx7Outline10renderLineEiiii+0x86e>
900163be:	e9d0 7801 	ldrd	r7, r8, [r0, #4]
900163c2:	45b8      	cmp	r8, r7
900163c4:	bf3c      	itt	cc
900163c6:	f10c 0708 	addcc.w	r7, ip, #8
900163ca:	6107      	strcc	r7, [r0, #16]
900163cc:	f108 0701 	add.w	r7, r8, #1
900163d0:	6087      	str	r7, [r0, #8]
900163d2:	6907      	ldr	r7, [r0, #16]
900163d4:	f04f 0c00 	mov.w	ip, #0
900163d8:	b212      	sxth	r2, r2
900163da:	459e      	cmp	lr, r3
900163dc:	803b      	strh	r3, [r7, #0]
900163de:	442e      	add	r6, r5
900163e0:	807a      	strh	r2, [r7, #2]
900163e2:	f8a7 c004 	strh.w	ip, [r7, #4]
900163e6:	f8a7 c006 	strh.w	ip, [r7, #6]
900163ea:	d04b      	beq.n	90016484 <_ZN8touchgfx7Outline10renderLineEiiii+0x920>
900163ec:	9f04      	ldr	r7, [sp, #16]
900163ee:	1a64      	subs	r4, r4, r1
900163f0:	f04f 0a00 	mov.w	sl, #0
900163f4:	1bbf      	subs	r7, r7, r6
900163f6:	443d      	add	r5, r7
900163f8:	016d      	lsls	r5, r5, #5
900163fa:	fb95 f8f1 	sdiv	r8, r5, r1
900163fe:	fb01 5518 	mls	r5, r1, r8, r5
90016402:	4565      	cmp	r5, ip
90016404:	bfbc      	itt	lt
90016406:	f108 38ff 	addlt.w	r8, r8, #4294967295
9001640a:	186d      	addlt	r5, r5, r1
9001640c:	f108 0701 	add.w	r7, r8, #1
90016410:	9703      	str	r7, [sp, #12]
90016412:	f8d0 c010 	ldr.w	ip, [r0, #16]
90016416:	1964      	adds	r4, r4, r5
90016418:	444b      	add	r3, r9
9001641a:	bf54      	ite	pl
9001641c:	9f03      	ldrpl	r7, [sp, #12]
9001641e:	4647      	movmi	r7, r8
90016420:	f8bc b004 	ldrh.w	fp, [ip, #4]
90016424:	bf58      	it	pl
90016426:	1a64      	subpl	r4, r4, r1
90016428:	443e      	add	r6, r7
9001642a:	44bb      	add	fp, r7
9001642c:	f8ac b004 	strh.w	fp, [ip, #4]
90016430:	f8bc b006 	ldrh.w	fp, [ip, #6]
90016434:	eb0b 1b47 	add.w	fp, fp, r7, lsl #5
90016438:	f8ac b006 	strh.w	fp, [ip, #6]
9001643c:	f8d0 c010 	ldr.w	ip, [r0, #16]
90016440:	f8bc b006 	ldrh.w	fp, [ip, #6]
90016444:	f8bc 7004 	ldrh.w	r7, [ip, #4]
90016448:	ea5b 0707 	orrs.w	r7, fp, r7
9001644c:	d011      	beq.n	90016472 <_ZN8touchgfx7Outline10renderLineEiiii+0x90e>
9001644e:	f9bc b002 	ldrsh.w	fp, [ip, #2]
90016452:	f1bb 0f00 	cmp.w	fp, #0
90016456:	db0c      	blt.n	90016472 <_ZN8touchgfx7Outline10renderLineEiiii+0x90e>
90016458:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
9001645a:	45bb      	cmp	fp, r7
9001645c:	da09      	bge.n	90016472 <_ZN8touchgfx7Outline10renderLineEiiii+0x90e>
9001645e:	e9d0 7b01 	ldrd	r7, fp, [r0, #4]
90016462:	45bb      	cmp	fp, r7
90016464:	bf3c      	itt	cc
90016466:	f10c 0708 	addcc.w	r7, ip, #8
9001646a:	6107      	strcc	r7, [r0, #16]
9001646c:	f10b 0701 	add.w	r7, fp, #1
90016470:	6087      	str	r7, [r0, #8]
90016472:	6907      	ldr	r7, [r0, #16]
90016474:	459e      	cmp	lr, r3
90016476:	803b      	strh	r3, [r7, #0]
90016478:	807a      	strh	r2, [r7, #2]
9001647a:	f8a7 a004 	strh.w	sl, [r7, #4]
9001647e:	f8a7 a006 	strh.w	sl, [r7, #6]
90016482:	d1c6      	bne.n	90016412 <_ZN8touchgfx7Outline10renderLineEiiii+0x8ae>
90016484:	9b04      	ldr	r3, [sp, #16]
90016486:	1b9e      	subs	r6, r3, r6
90016488:	6903      	ldr	r3, [r0, #16]
9001648a:	889a      	ldrh	r2, [r3, #4]
9001648c:	4432      	add	r2, r6
9001648e:	809a      	strh	r2, [r3, #4]
90016490:	9a02      	ldr	r2, [sp, #8]
90016492:	f102 0c20 	add.w	ip, r2, #32
90016496:	9a01      	ldr	r2, [sp, #4]
90016498:	ebac 0c02 	sub.w	ip, ip, r2
9001649c:	88da      	ldrh	r2, [r3, #6]
9001649e:	fb06 260c 	mla	r6, r6, ip, r2
900164a2:	80de      	strh	r6, [r3, #6]
900164a4:	f7ff bbb6 	b.w	90015c14 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>

900164a8 <_ZN8touchgfx7Outline6lineToEii>:
900164a8:	6a43      	ldr	r3, [r0, #36]	; 0x24
900164aa:	079b      	lsls	r3, r3, #30
900164ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
900164ae:	460e      	mov	r6, r1
900164b0:	4615      	mov	r5, r2
900164b2:	d511      	bpl.n	900164d8 <_ZN8touchgfx7Outline6lineToEii+0x30>
900164b4:	e9d0 1205 	ldrd	r1, r2, [r0, #20]
900164b8:	ea86 0701 	eor.w	r7, r6, r1
900164bc:	ea85 0302 	eor.w	r3, r5, r2
900164c0:	433b      	orrs	r3, r7
900164c2:	d009      	beq.n	900164d8 <_ZN8touchgfx7Outline6lineToEii+0x30>
900164c4:	4633      	mov	r3, r6
900164c6:	9500      	str	r5, [sp, #0]
900164c8:	f7ff fb4c 	bl	90015b64 <_ZN8touchgfx7Outline10renderLineEiiii>
900164cc:	6a43      	ldr	r3, [r0, #36]	; 0x24
900164ce:	f043 0301 	orr.w	r3, r3, #1
900164d2:	e9c0 6505 	strd	r6, r5, [r0, #20]
900164d6:	6243      	str	r3, [r0, #36]	; 0x24
900164d8:	b003      	add	sp, #12
900164da:	bdf0      	pop	{r4, r5, r6, r7, pc}

900164dc <_ZN8touchgfx7Outline6moveToEii>:
900164dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
900164de:	6a43      	ldr	r3, [r0, #36]	; 0x24
900164e0:	4615      	mov	r5, r2
900164e2:	4604      	mov	r4, r0
900164e4:	460e      	mov	r6, r1
900164e6:	079a      	lsls	r2, r3, #30
900164e8:	d401      	bmi.n	900164ee <_ZN8touchgfx7Outline6moveToEii+0x12>
900164ea:	f7ff fb07 	bl	90015afc <_ZN8touchgfx7Outline5resetEv>
900164ee:	6a63      	ldr	r3, [r4, #36]	; 0x24
900164f0:	07db      	lsls	r3, r3, #31
900164f2:	d504      	bpl.n	900164fe <_ZN8touchgfx7Outline6moveToEii+0x22>
900164f4:	4620      	mov	r0, r4
900164f6:	e9d4 1207 	ldrd	r1, r2, [r4, #28]
900164fa:	f7ff ffd5 	bl	900164a8 <_ZN8touchgfx7Outline6lineToEii>
900164fe:	6923      	ldr	r3, [r4, #16]
90016500:	1170      	asrs	r0, r6, #5
90016502:	1169      	asrs	r1, r5, #5
90016504:	f9b3 2000 	ldrsh.w	r2, [r3]
90016508:	4290      	cmp	r0, r2
9001650a:	d103      	bne.n	90016514 <_ZN8touchgfx7Outline6moveToEii+0x38>
9001650c:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
90016510:	4291      	cmp	r1, r2
90016512:	d01a      	beq.n	9001654a <_ZN8touchgfx7Outline6moveToEii+0x6e>
90016514:	88df      	ldrh	r7, [r3, #6]
90016516:	889a      	ldrh	r2, [r3, #4]
90016518:	433a      	orrs	r2, r7
9001651a:	d010      	beq.n	9001653e <_ZN8touchgfx7Outline6moveToEii+0x62>
9001651c:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
90016520:	2a00      	cmp	r2, #0
90016522:	db0c      	blt.n	9001653e <_ZN8touchgfx7Outline6moveToEii+0x62>
90016524:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
90016526:	42ba      	cmp	r2, r7
90016528:	da09      	bge.n	9001653e <_ZN8touchgfx7Outline6moveToEii+0x62>
9001652a:	e9d4 7201 	ldrd	r7, r2, [r4, #4]
9001652e:	42ba      	cmp	r2, r7
90016530:	f102 0201 	add.w	r2, r2, #1
90016534:	bf38      	it	cc
90016536:	3308      	addcc	r3, #8
90016538:	60a2      	str	r2, [r4, #8]
9001653a:	bf38      	it	cc
9001653c:	6123      	strcc	r3, [r4, #16]
9001653e:	6923      	ldr	r3, [r4, #16]
90016540:	2200      	movs	r2, #0
90016542:	8018      	strh	r0, [r3, #0]
90016544:	8059      	strh	r1, [r3, #2]
90016546:	809a      	strh	r2, [r3, #4]
90016548:	80da      	strh	r2, [r3, #6]
9001654a:	6166      	str	r6, [r4, #20]
9001654c:	6225      	str	r5, [r4, #32]
9001654e:	e9c4 5606 	strd	r5, r6, [r4, #24]
90016552:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

90016554 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj>:
90016554:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
90016558:	b0d0      	sub	sp, #320	; 0x140
9001655a:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
9001655e:	466c      	mov	r4, sp
90016560:	4627      	mov	r7, r4
90016562:	1a0d      	subs	r5, r1, r0
90016564:	f100 0308 	add.w	r3, r0, #8
90016568:	2d48      	cmp	r5, #72	; 0x48
9001656a:	f340 80d5 	ble.w	90016718 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1c4>
9001656e:	112d      	asrs	r5, r5, #4
90016570:	f9b0 c006 	ldrsh.w	ip, [r0, #6]
90016574:	f9b0 9000 	ldrsh.w	r9, [r0]
90016578:	eb00 02c5 	add.w	r2, r0, r5, lsl #3
9001657c:	f9b0 8002 	ldrsh.w	r8, [r0, #2]
90016580:	f9b0 e004 	ldrsh.w	lr, [r0, #4]
90016584:	6816      	ldr	r6, [r2, #0]
90016586:	6006      	str	r6, [r0, #0]
90016588:	6856      	ldr	r6, [r2, #4]
9001658a:	6046      	str	r6, [r0, #4]
9001658c:	f820 9035 	strh.w	r9, [r0, r5, lsl #3]
90016590:	f8a2 8002 	strh.w	r8, [r2, #2]
90016594:	f8a2 e004 	strh.w	lr, [r2, #4]
90016598:	f8a2 c006 	strh.w	ip, [r2, #6]
9001659c:	f1a1 0208 	sub.w	r2, r1, #8
900165a0:	f931 5c06 	ldrsh.w	r5, [r1, #-6]
900165a4:	f9b0 c00a 	ldrsh.w	ip, [r0, #10]
900165a8:	4565      	cmp	r5, ip
900165aa:	db06      	blt.n	900165ba <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x66>
900165ac:	d119      	bne.n	900165e2 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x8e>
900165ae:	f9b0 6008 	ldrsh.w	r6, [r0, #8]
900165b2:	f931 5c08 	ldrsh.w	r5, [r1, #-8]
900165b6:	42ae      	cmp	r6, r5
900165b8:	dd13      	ble.n	900165e2 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x8e>
900165ba:	460e      	mov	r6, r1
900165bc:	f9b0 9008 	ldrsh.w	r9, [r0, #8]
900165c0:	f9b0 800c 	ldrsh.w	r8, [r0, #12]
900165c4:	f856 5d08 	ldr.w	r5, [r6, #-8]!
900165c8:	f9b0 e00e 	ldrsh.w	lr, [r0, #14]
900165cc:	601d      	str	r5, [r3, #0]
900165ce:	6875      	ldr	r5, [r6, #4]
900165d0:	605d      	str	r5, [r3, #4]
900165d2:	f821 9c08 	strh.w	r9, [r1, #-8]
900165d6:	f821 cc06 	strh.w	ip, [r1, #-6]
900165da:	f821 8c04 	strh.w	r8, [r1, #-4]
900165de:	f821 ec02 	strh.w	lr, [r1, #-2]
900165e2:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
900165e6:	f9b0 500a 	ldrsh.w	r5, [r0, #10]
900165ea:	42ae      	cmp	r6, r5
900165ec:	db06      	blt.n	900165fc <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xa8>
900165ee:	d116      	bne.n	9001661e <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xca>
900165f0:	f9b0 c000 	ldrsh.w	ip, [r0]
900165f4:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
900165f8:	45ac      	cmp	ip, r5
900165fa:	da10      	bge.n	9001661e <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xca>
900165fc:	681d      	ldr	r5, [r3, #0]
900165fe:	f9b0 8000 	ldrsh.w	r8, [r0]
90016602:	f9b0 e004 	ldrsh.w	lr, [r0, #4]
90016606:	f9b0 c006 	ldrsh.w	ip, [r0, #6]
9001660a:	6005      	str	r5, [r0, #0]
9001660c:	685d      	ldr	r5, [r3, #4]
9001660e:	f8a0 8008 	strh.w	r8, [r0, #8]
90016612:	6045      	str	r5, [r0, #4]
90016614:	8146      	strh	r6, [r0, #10]
90016616:	f8a0 e00c 	strh.w	lr, [r0, #12]
9001661a:	f8a0 c00e 	strh.w	ip, [r0, #14]
9001661e:	f931 5c06 	ldrsh.w	r5, [r1, #-6]
90016622:	f9b0 c002 	ldrsh.w	ip, [r0, #2]
90016626:	4565      	cmp	r5, ip
90016628:	db06      	blt.n	90016638 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xe4>
9001662a:	d119      	bne.n	90016660 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
9001662c:	f931 6c08 	ldrsh.w	r6, [r1, #-8]
90016630:	f9b0 5000 	ldrsh.w	r5, [r0]
90016634:	42ae      	cmp	r6, r5
90016636:	da13      	bge.n	90016660 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
90016638:	460e      	mov	r6, r1
9001663a:	f9b0 9000 	ldrsh.w	r9, [r0]
9001663e:	f9b0 8004 	ldrsh.w	r8, [r0, #4]
90016642:	f856 5d08 	ldr.w	r5, [r6, #-8]!
90016646:	f9b0 e006 	ldrsh.w	lr, [r0, #6]
9001664a:	6005      	str	r5, [r0, #0]
9001664c:	6875      	ldr	r5, [r6, #4]
9001664e:	6045      	str	r5, [r0, #4]
90016650:	f821 9c08 	strh.w	r9, [r1, #-8]
90016654:	f821 cc06 	strh.w	ip, [r1, #-6]
90016658:	f821 8c04 	strh.w	r8, [r1, #-4]
9001665c:	f821 ec02 	strh.w	lr, [r1, #-2]
90016660:	3308      	adds	r3, #8
90016662:	f9b0 c002 	ldrsh.w	ip, [r0, #2]
90016666:	f9b3 e002 	ldrsh.w	lr, [r3, #2]
9001666a:	45e6      	cmp	lr, ip
9001666c:	dbf8      	blt.n	90016660 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
9001666e:	d105      	bne.n	9001667c <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x128>
90016670:	f9b3 6000 	ldrsh.w	r6, [r3]
90016674:	f9b0 5000 	ldrsh.w	r5, [r0]
90016678:	42ae      	cmp	r6, r5
9001667a:	dbf1      	blt.n	90016660 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
9001667c:	4615      	mov	r5, r2
9001667e:	3a08      	subs	r2, #8
90016680:	f9b2 6002 	ldrsh.w	r6, [r2, #2]
90016684:	45b4      	cmp	ip, r6
90016686:	dbf9      	blt.n	9001667c <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x128>
90016688:	d105      	bne.n	90016696 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x142>
9001668a:	f9b0 8000 	ldrsh.w	r8, [r0]
9001668e:	f9b2 6000 	ldrsh.w	r6, [r2]
90016692:	45b0      	cmp	r8, r6
90016694:	dbf2      	blt.n	9001667c <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x128>
90016696:	4293      	cmp	r3, r2
90016698:	f1a5 0608 	sub.w	r6, r5, #8
9001669c:	d816      	bhi.n	900166cc <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x178>
9001669e:	f8d6 c000 	ldr.w	ip, [r6]
900166a2:	f9b3 a000 	ldrsh.w	sl, [r3]
900166a6:	f9b3 9004 	ldrsh.w	r9, [r3, #4]
900166aa:	f9b3 8006 	ldrsh.w	r8, [r3, #6]
900166ae:	f8c3 c000 	str.w	ip, [r3]
900166b2:	f8d6 c004 	ldr.w	ip, [r6, #4]
900166b6:	f8c3 c004 	str.w	ip, [r3, #4]
900166ba:	f825 ac08 	strh.w	sl, [r5, #-8]
900166be:	f825 ec06 	strh.w	lr, [r5, #-6]
900166c2:	f825 9c04 	strh.w	r9, [r5, #-4]
900166c6:	f825 8c02 	strh.w	r8, [r5, #-2]
900166ca:	e7c9      	b.n	90016660 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
900166cc:	f8d6 e000 	ldr.w	lr, [r6]
900166d0:	f9b0 a000 	ldrsh.w	sl, [r0]
900166d4:	f9b0 9004 	ldrsh.w	r9, [r0, #4]
900166d8:	f9b0 8006 	ldrsh.w	r8, [r0, #6]
900166dc:	f8c0 e000 	str.w	lr, [r0]
900166e0:	f8d6 e004 	ldr.w	lr, [r6, #4]
900166e4:	1a16      	subs	r6, r2, r0
900166e6:	f8c0 e004 	str.w	lr, [r0, #4]
900166ea:	f825 ac08 	strh.w	sl, [r5, #-8]
900166ee:	f825 cc06 	strh.w	ip, [r5, #-6]
900166f2:	f825 9c04 	strh.w	r9, [r5, #-4]
900166f6:	f825 8c02 	strh.w	r8, [r5, #-2]
900166fa:	1acd      	subs	r5, r1, r3
900166fc:	10ed      	asrs	r5, r5, #3
900166fe:	ebb5 0fe6 	cmp.w	r5, r6, asr #3
90016702:	bfb5      	itete	lt
90016704:	e9c4 0200 	strdlt	r0, r2, [r4]
90016708:	e9c4 3100 	strdge	r3, r1, [r4]
9001670c:	460a      	movlt	r2, r1
9001670e:	4603      	movge	r3, r0
90016710:	3408      	adds	r4, #8
90016712:	4618      	mov	r0, r3
90016714:	4611      	mov	r1, r2
90016716:	e724      	b.n	90016562 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xe>
90016718:	4299      	cmp	r1, r3
9001671a:	d927      	bls.n	9001676c <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x218>
9001671c:	f1a3 0210 	sub.w	r2, r3, #16
90016720:	f9b2 c012 	ldrsh.w	ip, [r2, #18]
90016724:	f9b2 500a 	ldrsh.w	r5, [r2, #10]
90016728:	45ac      	cmp	ip, r5
9001672a:	db06      	blt.n	9001673a <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1e6>
9001672c:	d11c      	bne.n	90016768 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x214>
9001672e:	f9b2 6010 	ldrsh.w	r6, [r2, #16]
90016732:	f9b2 5008 	ldrsh.w	r5, [r2, #8]
90016736:	42ae      	cmp	r6, r5
90016738:	da16      	bge.n	90016768 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x214>
9001673a:	4615      	mov	r5, r2
9001673c:	f9b2 9010 	ldrsh.w	r9, [r2, #16]
90016740:	f9b2 8014 	ldrsh.w	r8, [r2, #20]
90016744:	3a08      	subs	r2, #8
90016746:	f855 6f08 	ldr.w	r6, [r5, #8]!
9001674a:	f9b2 e01e 	ldrsh.w	lr, [r2, #30]
9001674e:	6196      	str	r6, [r2, #24]
90016750:	42a8      	cmp	r0, r5
90016752:	686e      	ldr	r6, [r5, #4]
90016754:	f8a2 9010 	strh.w	r9, [r2, #16]
90016758:	61d6      	str	r6, [r2, #28]
9001675a:	f8a2 c012 	strh.w	ip, [r2, #18]
9001675e:	f8a2 8014 	strh.w	r8, [r2, #20]
90016762:	f8a2 e016 	strh.w	lr, [r2, #22]
90016766:	d1db      	bne.n	90016720 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1cc>
90016768:	3308      	adds	r3, #8
9001676a:	e7d5      	b.n	90016718 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1c4>
9001676c:	42bc      	cmp	r4, r7
9001676e:	d903      	bls.n	90016778 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x224>
90016770:	e954 0102 	ldrd	r0, r1, [r4, #-8]
90016774:	3c08      	subs	r4, #8
90016776:	e6f4      	b.n	90016562 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xe>
90016778:	b050      	add	sp, #320	; 0x140
9001677a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

9001677e <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv>:
9001677e:	b510      	push	{r4, lr}
90016780:	6a43      	ldr	r3, [r0, #36]	; 0x24
90016782:	4604      	mov	r4, r0
90016784:	07da      	lsls	r2, r3, #31
90016786:	d507      	bpl.n	90016798 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x1a>
90016788:	e9d0 1207 	ldrd	r1, r2, [r0, #28]
9001678c:	f7ff fe8c 	bl	900164a8 <_ZN8touchgfx7Outline6lineToEii>
90016790:	6a43      	ldr	r3, [r0, #36]	; 0x24
90016792:	f023 0301 	bic.w	r3, r3, #1
90016796:	6243      	str	r3, [r0, #36]	; 0x24
90016798:	6a63      	ldr	r3, [r4, #36]	; 0x24
9001679a:	079b      	lsls	r3, r3, #30
9001679c:	d521      	bpl.n	900167e2 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x64>
9001679e:	6923      	ldr	r3, [r4, #16]
900167a0:	88d9      	ldrh	r1, [r3, #6]
900167a2:	889a      	ldrh	r2, [r3, #4]
900167a4:	430a      	orrs	r2, r1
900167a6:	d010      	beq.n	900167ca <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x4c>
900167a8:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
900167ac:	2a00      	cmp	r2, #0
900167ae:	db0c      	blt.n	900167ca <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x4c>
900167b0:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
900167b2:	428a      	cmp	r2, r1
900167b4:	da09      	bge.n	900167ca <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x4c>
900167b6:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
900167ba:	4291      	cmp	r1, r2
900167bc:	f102 0201 	add.w	r2, r2, #1
900167c0:	bf88      	it	hi
900167c2:	3308      	addhi	r3, #8
900167c4:	60a2      	str	r2, [r4, #8]
900167c6:	bf88      	it	hi
900167c8:	6123      	strhi	r3, [r4, #16]
900167ca:	68a1      	ldr	r1, [r4, #8]
900167cc:	b129      	cbz	r1, 900167da <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x5c>
900167ce:	6863      	ldr	r3, [r4, #4]
900167d0:	4299      	cmp	r1, r3
900167d2:	d802      	bhi.n	900167da <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x5c>
900167d4:	68e0      	ldr	r0, [r4, #12]
900167d6:	f7ff febd 	bl	90016554 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj>
900167da:	6a63      	ldr	r3, [r4, #36]	; 0x24
900167dc:	f023 0302 	bic.w	r3, r3, #2
900167e0:	6263      	str	r3, [r4, #36]	; 0x24
900167e2:	68e0      	ldr	r0, [r4, #12]
900167e4:	bd10      	pop	{r4, pc}
	...

900167e8 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj>:
900167e8:	4b02      	ldr	r3, [pc, #8]	; (900167f4 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj+0xc>)
900167ea:	6018      	str	r0, [r3, #0]
900167ec:	4b02      	ldr	r3, [pc, #8]	; (900167f8 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj+0x10>)
900167ee:	6019      	str	r1, [r3, #0]
900167f0:	4770      	bx	lr
900167f2:	bf00      	nop
900167f4:	240281f4 	.word	0x240281f4
900167f8:	240281f8 	.word	0x240281f8

900167fc <_ZN8touchgfx20CanvasWidgetRenderer11resetBufferEv>:
900167fc:	2300      	movs	r3, #0
900167fe:	4a02      	ldr	r2, [pc, #8]	; (90016808 <_ZN8touchgfx20CanvasWidgetRenderer11resetBufferEv+0xc>)
90016800:	6013      	str	r3, [r2, #0]
90016802:	4a02      	ldr	r2, [pc, #8]	; (9001680c <_ZN8touchgfx20CanvasWidgetRenderer11resetBufferEv+0x10>)
90016804:	6013      	str	r3, [r2, #0]
90016806:	4770      	bx	lr
90016808:	240281f4 	.word	0x240281f4
9001680c:	240281f8 	.word	0x240281f8

90016810 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv>:
90016810:	4b01      	ldr	r3, [pc, #4]	; (90016818 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv+0x8>)
90016812:	6818      	ldr	r0, [r3, #0]
90016814:	4770      	bx	lr
90016816:	bf00      	nop
90016818:	240281f4 	.word	0x240281f4

9001681c <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv>:
9001681c:	4b01      	ldr	r3, [pc, #4]	; (90016824 <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv+0x8>)
9001681e:	6818      	ldr	r0, [r3, #0]
90016820:	4770      	bx	lr
90016822:	bf00      	nop
90016824:	240281f8 	.word	0x240281f8

90016828 <_ZN8touchgfx3LCD27supportDynamicBitmapDrawingENS_6Bitmap12BitmapFormatE>:
90016828:	b510      	push	{r4, lr}
9001682a:	6803      	ldr	r3, [r0, #0]
9001682c:	460c      	mov	r4, r1
9001682e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90016830:	4798      	blx	r3
90016832:	1b03      	subs	r3, r0, r4
90016834:	4258      	negs	r0, r3
90016836:	4158      	adcs	r0, r3
90016838:	bd10      	pop	{r4, pc}
	...

9001683c <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE>:
9001683c:	4b01      	ldr	r3, [pc, #4]	; (90016844 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE+0x8>)
9001683e:	6019      	str	r1, [r3, #0]
90016840:	4770      	bx	lr
90016842:	bf00      	nop
90016844:	240281fc 	.word	0x240281fc

90016848 <_ZN8touchgfx3LCD18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
90016848:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001684c:	4696      	mov	lr, r2
9001684e:	b097      	sub	sp, #92	; 0x5c
90016850:	4605      	mov	r5, r0
90016852:	4614      	mov	r4, r2
90016854:	460e      	mov	r6, r1
90016856:	461f      	mov	r7, r3
90016858:	f10d 0c1c 	add.w	ip, sp, #28
9001685c:	f8bd 8088 	ldrh.w	r8, [sp, #136]	; 0x88
90016860:	f89d 908c 	ldrb.w	r9, [sp, #140]	; 0x8c
90016864:	f8bd a090 	ldrh.w	sl, [sp, #144]	; 0x90
90016868:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
9001686c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
90016870:	f8de 3000 	ldr.w	r3, [lr]
90016874:	f104 0e14 	add.w	lr, r4, #20
90016878:	f8cc 3000 	str.w	r3, [ip]
9001687c:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
90016880:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
90016884:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
90016888:	f8de 3000 	ldr.w	r3, [lr]
9001688c:	f104 0e28 	add.w	lr, r4, #40	; 0x28
90016890:	f8cc 3000 	str.w	r3, [ip]
90016894:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
90016898:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
9001689c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
900168a0:	f8de 3000 	ldr.w	r3, [lr]
900168a4:	4631      	mov	r1, r6
900168a6:	9a21      	ldr	r2, [sp, #132]	; 0x84
900168a8:	4628      	mov	r0, r5
900168aa:	f8cc 3000 	str.w	r3, [ip]
900168ae:	682b      	ldr	r3, [r5, #0]
900168b0:	9201      	str	r2, [sp, #4]
900168b2:	9a20      	ldr	r2, [sp, #128]	; 0x80
900168b4:	f8cd 8008 	str.w	r8, [sp, #8]
900168b8:	9200      	str	r2, [sp, #0]
900168ba:	aa07      	add	r2, sp, #28
900168bc:	e9cd 9a03 	strd	r9, sl, [sp, #12]
900168c0:	f8d3 b03c 	ldr.w	fp, [r3, #60]	; 0x3c
900168c4:	463b      	mov	r3, r7
900168c6:	47d8      	blx	fp
900168c8:	46a6      	mov	lr, r4
900168ca:	f10d 0c1c 	add.w	ip, sp, #28
900168ce:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
900168d2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
900168d6:	f8de 3000 	ldr.w	r3, [lr]
900168da:	f104 0e28 	add.w	lr, r4, #40	; 0x28
900168de:	343c      	adds	r4, #60	; 0x3c
900168e0:	f8cc 3000 	str.w	r3, [ip]
900168e4:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
900168e8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
900168ec:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
900168f0:	f8de 3000 	ldr.w	r3, [lr]
900168f4:	f8cc 3000 	str.w	r3, [ip]
900168f8:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
900168fc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
900168fe:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
90016902:	6823      	ldr	r3, [r4, #0]
90016904:	4631      	mov	r1, r6
90016906:	4628      	mov	r0, r5
90016908:	f8cc 3000 	str.w	r3, [ip]
9001690c:	682b      	ldr	r3, [r5, #0]
9001690e:	e9cd 9a03 	strd	r9, sl, [sp, #12]
90016912:	9a21      	ldr	r2, [sp, #132]	; 0x84
90016914:	f8cd 8008 	str.w	r8, [sp, #8]
90016918:	9201      	str	r2, [sp, #4]
9001691a:	9a20      	ldr	r2, [sp, #128]	; 0x80
9001691c:	9200      	str	r2, [sp, #0]
9001691e:	aa07      	add	r2, sp, #28
90016920:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
90016922:	463b      	mov	r3, r7
90016924:	47a0      	blx	r4
90016926:	b017      	add	sp, #92	; 0x5c
90016928:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

9001692c <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht>:
9001692c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90016930:	b08d      	sub	sp, #52	; 0x34
90016932:	4688      	mov	r8, r1
90016934:	f8d3 c000 	ldr.w	ip, [r3]
90016938:	9916      	ldr	r1, [sp, #88]	; 0x58
9001693a:	f8bd 4070 	ldrh.w	r4, [sp, #112]	; 0x70
9001693e:	680f      	ldr	r7, [r1, #0]
90016940:	ed92 4a09 	vldr	s8, [r2, #36]	; 0x24
90016944:	eba7 070c 	sub.w	r7, r7, ip
90016948:	edd2 4a0b 	vldr	s9, [r2, #44]	; 0x2c
9001694c:	edd3 6a07 	vldr	s13, [r3, #28]
90016950:	42bc      	cmp	r4, r7
90016952:	9918      	ldr	r1, [sp, #96]	; 0x60
90016954:	f8dd a064 	ldr.w	sl, [sp, #100]	; 0x64
90016958:	bfa8      	it	ge
9001695a:	463c      	movge	r4, r7
9001695c:	f9b1 9000 	ldrsh.w	r9, [r1]
90016960:	f9ba 1000 	ldrsh.w	r1, [sl]
90016964:	ee07 4a90 	vmov	s15, r4
90016968:	eb09 0e0c 	add.w	lr, r9, ip
9001696c:	edd3 1a0a 	vldr	s3, [r3, #40]	; 0x28
90016970:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
90016974:	edd2 7a0d 	vldr	s15, [r2, #52]	; 0x34
90016978:	ed93 2a0d 	vldr	s4, [r3, #52]	; 0x34
9001697c:	4571      	cmp	r1, lr
9001697e:	ee25 4a04 	vmul.f32	s8, s10, s8
90016982:	ee65 4a24 	vmul.f32	s9, s10, s9
90016986:	ee25 5a27 	vmul.f32	s10, s10, s15
9001698a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
9001698e:	ee71 0aa4 	vadd.f32	s1, s3, s9
90016992:	ee32 1a05 	vadd.f32	s2, s4, s10
90016996:	ee87 7aa6 	vdiv.f32	s14, s15, s13
9001699a:	ee36 0a84 	vadd.f32	s0, s13, s8
9001699e:	ee61 1a87 	vmul.f32	s3, s3, s14
900169a2:	ee22 2a07 	vmul.f32	s4, s4, s14
900169a6:	f340 808c 	ble.w	90016ac2 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x196>
900169aa:	eba1 060e 	sub.w	r6, r1, lr
900169ae:	fb96 f5f4 	sdiv	r5, r6, r4
900169b2:	ee07 5a10 	vmov	s14, r5
900169b6:	2d00      	cmp	r5, #0
900169b8:	fb04 6615 	mls	r6, r4, r5, r6
900169bc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
900169c0:	eea7 0a04 	vfma.f32	s0, s14, s8
900169c4:	eee7 0a24 	vfma.f32	s1, s14, s9
900169c8:	eea7 1a05 	vfma.f32	s2, s14, s10
900169cc:	dd12      	ble.n	900169f4 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xc8>
900169ce:	ee70 6a44 	vsub.f32	s13, s0, s8
900169d2:	ee70 1ae4 	vsub.f32	s3, s1, s9
900169d6:	ee31 2a45 	vsub.f32	s4, s2, s10
900169da:	eef5 6a40 	vcmp.f32	s13, #0.0
900169de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
900169e2:	bf14      	ite	ne
900169e4:	ee87 7aa6 	vdivne.f32	s14, s15, s13
900169e8:	eeb0 7a67 	vmoveq.f32	s14, s15
900169ec:	ee61 1a87 	vmul.f32	s3, s3, s14
900169f0:	ee22 2a07 	vmul.f32	s4, s4, s14
900169f4:	fb05 f204 	mul.w	r2, r5, r4
900169f8:	1abf      	subs	r7, r7, r2
900169fa:	4494      	add	ip, r2
900169fc:	f8ba 2004 	ldrh.w	r2, [sl, #4]
90016a00:	4411      	add	r1, r2
90016a02:	eb09 020c 	add.w	r2, r9, ip
90016a06:	b209      	sxth	r1, r1
90016a08:	443a      	add	r2, r7
90016a0a:	428a      	cmp	r2, r1
90016a0c:	bfc4      	itt	gt
90016a0e:	eba1 0209 	subgt.w	r2, r1, r9
90016a12:	eba2 070c 	subgt.w	r7, r2, ip
90016a16:	2f00      	cmp	r7, #0
90016a18:	dd50      	ble.n	90016abc <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x190>
90016a1a:	fb97 f1f4 	sdiv	r1, r7, r4
90016a1e:	fb04 7211 	mls	r2, r4, r1, r7
90016a22:	b90a      	cbnz	r2, 90016a28 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xfc>
90016a24:	3901      	subs	r1, #1
90016a26:	4622      	mov	r2, r4
90016a28:	eec7 3a80 	vdiv.f32	s7, s15, s0
90016a2c:	6840      	ldr	r0, [r0, #4]
90016a2e:	f89d b06c 	ldrb.w	fp, [sp, #108]	; 0x6c
90016a32:	44b6      	add	lr, r6
90016a34:	f8d0 a000 	ldr.w	sl, [r0]
90016a38:	2900      	cmp	r1, #0
90016a3a:	bfcc      	ite	gt
90016a3c:	46a1      	movgt	r9, r4
90016a3e:	4691      	movle	r9, r2
90016a40:	900b      	str	r0, [sp, #44]	; 0x2c
90016a42:	9817      	ldr	r0, [sp, #92]	; 0x5c
90016a44:	fb04 e505 	mla	r5, r4, r5, lr
90016a48:	eef0 6a42 	vmov.f32	s13, s4
90016a4c:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
90016a50:	9008      	str	r0, [sp, #32]
90016a52:	eeb0 7a61 	vmov.f32	s14, s3
90016a56:	9818      	ldr	r0, [sp, #96]	; 0x60
90016a58:	695b      	ldr	r3, [r3, #20]
90016a5a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
90016a5e:	f9b0 b002 	ldrsh.w	fp, [r0, #2]
90016a62:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
90016a66:	980b      	ldr	r0, [sp, #44]	; 0x2c
90016a68:	445b      	add	r3, fp
90016a6a:	9307      	str	r3, [sp, #28]
90016a6c:	ee16 3a90 	vmov	r3, s13
90016a70:	e9cd 8505 	strd	r8, r5, [sp, #20]
90016a74:	ee60 2aa3 	vmul.f32	s5, s1, s7
90016a78:	ee21 3a23 	vmul.f32	s6, s2, s7
90016a7c:	ee72 7ae1 	vsub.f32	s15, s5, s3
90016a80:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
90016a84:	ee17 7a90 	vmov	r7, s15
90016a88:	ee73 7a42 	vsub.f32	s15, s6, s4
90016a8c:	fb97 f7f4 	sdiv	r7, r7, r4
90016a90:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
90016a94:	ee17 ca90 	vmov	ip, s15
90016a98:	fb9c fcf4 	sdiv	ip, ip, r4
90016a9c:	fb0c 3306 	mla	r3, ip, r6, r3
90016aa0:	9302      	str	r3, [sp, #8]
90016aa2:	ee17 3a10 	vmov	r3, s14
90016aa6:	e9cd 7c03 	strd	r7, ip, [sp, #12]
90016aaa:	fb07 3706 	mla	r7, r7, r6, r3
90016aae:	eba9 0306 	sub.w	r3, r9, r6
90016ab2:	e9cd 4700 	strd	r4, r7, [sp]
90016ab6:	f8da 4008 	ldr.w	r4, [sl, #8]
90016aba:	47a0      	blx	r4
90016abc:	b00d      	add	sp, #52	; 0x34
90016abe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90016ac2:	2500      	movs	r5, #0
90016ac4:	462e      	mov	r6, r5
90016ac6:	e799      	b.n	900169fc <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd0>

90016ac8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
90016ac8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90016acc:	b0db      	sub	sp, #364	; 0x16c
90016ace:	461d      	mov	r5, r3
90016ad0:	4614      	mov	r4, r2
90016ad2:	f8bd 3198 	ldrh.w	r3, [sp, #408]	; 0x198
90016ad6:	910f      	str	r1, [sp, #60]	; 0x3c
90016ad8:	4629      	mov	r1, r5
90016ada:	930a      	str	r3, [sp, #40]	; 0x28
90016adc:	f89d 319c 	ldrb.w	r3, [sp, #412]	; 0x19c
90016ae0:	9009      	str	r0, [sp, #36]	; 0x24
90016ae2:	930b      	str	r3, [sp, #44]	; 0x2c
90016ae4:	f8bd 31a0 	ldrh.w	r3, [sp, #416]	; 0x1a0
90016ae8:	f8dd b194 	ldr.w	fp, [sp, #404]	; 0x194
90016aec:	9310      	str	r3, [sp, #64]	; 0x40
90016aee:	6803      	ldr	r3, [r0, #0]
90016af0:	6c5f      	ldr	r7, [r3, #68]	; 0x44
90016af2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
90016af6:	47b8      	blx	r7
90016af8:	9b09      	ldr	r3, [sp, #36]	; 0x24
90016afa:	6058      	str	r0, [r3, #4]
90016afc:	2800      	cmp	r0, #0
90016afe:	f000 83a1 	beq.w	90017244 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
90016b02:	682b      	ldr	r3, [r5, #0]
90016b04:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
90016b08:	ed94 7a02 	vldr	s14, [r4, #8]
90016b0c:	9314      	str	r3, [sp, #80]	; 0x50
90016b0e:	686b      	ldr	r3, [r5, #4]
90016b10:	eeb4 7ae7 	vcmpe.f32	s14, s15
90016b14:	9315      	str	r3, [sp, #84]	; 0x54
90016b16:	4bc1      	ldr	r3, [pc, #772]	; (90016e1c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x354>)
90016b18:	7819      	ldrb	r1, [r3, #0]
90016b1a:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
90016b1e:	2900      	cmp	r1, #0
90016b20:	bf16      	itet	ne
90016b22:	4619      	movne	r1, r3
90016b24:	4611      	moveq	r1, r2
90016b26:	4613      	movne	r3, r2
90016b28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
90016b2c:	9116      	str	r1, [sp, #88]	; 0x58
90016b2e:	e9cd 3217 	strd	r3, r2, [sp, #92]	; 0x5c
90016b32:	f240 8387 	bls.w	90017244 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
90016b36:	ed94 7a07 	vldr	s14, [r4, #28]
90016b3a:	eeb4 7ae7 	vcmpe.f32	s14, s15
90016b3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
90016b42:	f240 837f 	bls.w	90017244 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
90016b46:	ed94 7a0c 	vldr	s14, [r4, #48]	; 0x30
90016b4a:	eeb4 7ae7 	vcmpe.f32	s14, s15
90016b4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
90016b52:	f240 8377 	bls.w	90017244 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
90016b56:	6822      	ldr	r2, [r4, #0]
90016b58:	4bb1      	ldr	r3, [pc, #708]	; (90016e20 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x358>)
90016b5a:	429a      	cmp	r2, r3
90016b5c:	f2c0 8372 	blt.w	90017244 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
90016b60:	49b0      	ldr	r1, [pc, #704]	; (90016e24 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x35c>)
90016b62:	6963      	ldr	r3, [r4, #20]
90016b64:	428a      	cmp	r2, r1
90016b66:	f300 836d 	bgt.w	90017244 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
90016b6a:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
90016b6e:	48ae      	ldr	r0, [pc, #696]	; (90016e28 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x360>)
90016b70:	33ff      	adds	r3, #255	; 0xff
90016b72:	4283      	cmp	r3, r0
90016b74:	f200 8366 	bhi.w	90017244 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
90016b78:	6aa3      	ldr	r3, [r4, #40]	; 0x28
90016b7a:	4dac      	ldr	r5, [pc, #688]	; (90016e2c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x364>)
90016b7c:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
90016b80:	33ff      	adds	r3, #255	; 0xff
90016b82:	42ab      	cmp	r3, r5
90016b84:	f200 835e 	bhi.w	90017244 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
90016b88:	6862      	ldr	r2, [r4, #4]
90016b8a:	f502 331c 	add.w	r3, r2, #159744	; 0x27000
90016b8e:	33ff      	adds	r3, #255	; 0xff
90016b90:	4283      	cmp	r3, r0
90016b92:	f200 8357 	bhi.w	90017244 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
90016b96:	69a1      	ldr	r1, [r4, #24]
90016b98:	f501 331c 	add.w	r3, r1, #159744	; 0x27000
90016b9c:	33ff      	adds	r3, #255	; 0xff
90016b9e:	4283      	cmp	r3, r0
90016ba0:	f200 8350 	bhi.w	90017244 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
90016ba4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
90016ba6:	f503 301c 	add.w	r0, r3, #159744	; 0x27000
90016baa:	30ff      	adds	r0, #255	; 0xff
90016bac:	42a8      	cmp	r0, r5
90016bae:	f200 8349 	bhi.w	90017244 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
90016bb2:	428a      	cmp	r2, r1
90016bb4:	f280 8110 	bge.w	90016dd8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x310>
90016bb8:	429a      	cmp	r2, r3
90016bba:	f300 8119 	bgt.w	90016df0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x328>
90016bbe:	4299      	cmp	r1, r3
90016bc0:	f280 811d 	bge.w	90016dfe <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x336>
90016bc4:	2502      	movs	r5, #2
90016bc6:	2701      	movs	r7, #1
90016bc8:	46a9      	mov	r9, r5
90016bca:	46b8      	mov	r8, r7
90016bcc:	f04f 0a00 	mov.w	sl, #0
90016bd0:	4621      	mov	r1, r4
90016bd2:	a849      	add	r0, sp, #292	; 0x124
90016bd4:	f003 fdc4 	bl	9001a760 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>
90016bd8:	4622      	mov	r2, r4
90016bda:	4653      	mov	r3, sl
90016bdc:	a949      	add	r1, sp, #292	; 0x124
90016bde:	f8cd 9000 	str.w	r9, [sp]
90016be2:	a819      	add	r0, sp, #100	; 0x64
90016be4:	f003 feec 	bl	9001a9c0 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
90016be8:	4622      	mov	r2, r4
90016bea:	4653      	mov	r3, sl
90016bec:	a949      	add	r1, sp, #292	; 0x124
90016bee:	f8cd 8000 	str.w	r8, [sp]
90016bf2:	a829      	add	r0, sp, #164	; 0xa4
90016bf4:	f003 fee4 	bl	9001a9c0 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
90016bf8:	4643      	mov	r3, r8
90016bfa:	4622      	mov	r2, r4
90016bfc:	a949      	add	r1, sp, #292	; 0x124
90016bfe:	f8cd 9000 	str.w	r9, [sp]
90016c02:	a839      	add	r0, sp, #228	; 0xe4
90016c04:	f003 fedc 	bl	9001a9c0 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
90016c08:	42af      	cmp	r7, r5
90016c0a:	af12      	add	r7, sp, #72	; 0x48
90016c0c:	bfb7      	itett	lt
90016c0e:	2300      	movlt	r3, #0
90016c10:	2301      	movge	r3, #1
90016c12:	ad29      	addlt	r5, sp, #164	; 0xa4
90016c14:	ac19      	addlt	r4, sp, #100	; 0x64
90016c16:	bfb1      	iteee	lt
90016c18:	930e      	strlt	r3, [sp, #56]	; 0x38
90016c1a:	ad19      	addge	r5, sp, #100	; 0x64
90016c1c:	930e      	strge	r3, [sp, #56]	; 0x38
90016c1e:	ac29      	addge	r4, sp, #164	; 0xa4
90016c20:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
90016c22:	e893 0003 	ldmia.w	r3, {r0, r1}
90016c26:	e887 0003 	stmia.w	r7, {r0, r1}
90016c2a:	b928      	cbnz	r0, 90016c38 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x170>
90016c2c:	4b80      	ldr	r3, [pc, #512]	; (90016e30 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x368>)
90016c2e:	6818      	ldr	r0, [r3, #0]
90016c30:	6803      	ldr	r3, [r0, #0]
90016c32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
90016c34:	4798      	blx	r3
90016c36:	6038      	str	r0, [r7, #0]
90016c38:	9b64      	ldr	r3, [sp, #400]	; 0x190
90016c3a:	f8bb 0006 	ldrh.w	r0, [fp, #6]
90016c3e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
90016c42:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
90016c44:	930c      	str	r3, [sp, #48]	; 0x30
90016c46:	990c      	ldr	r1, [sp, #48]	; 0x30
90016c48:	6963      	ldr	r3, [r4, #20]
90016c4a:	440b      	add	r3, r1
90016c4c:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
90016c50:	4408      	add	r0, r1
90016c52:	b200      	sxth	r0, r0
90016c54:	4283      	cmp	r3, r0
90016c56:	900d      	str	r0, [sp, #52]	; 0x34
90016c58:	f280 80dd 	bge.w	90016e16 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x34e>
90016c5c:	428b      	cmp	r3, r1
90016c5e:	da08      	bge.n	90016c72 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
90016c60:	2a00      	cmp	r2, #0
90016c62:	dd06      	ble.n	90016c72 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
90016c64:	1acb      	subs	r3, r1, r3
90016c66:	429a      	cmp	r2, r3
90016c68:	f2c0 80e4 	blt.w	90016e34 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36c>
90016c6c:	2b00      	cmp	r3, #0
90016c6e:	f300 80e2 	bgt.w	90016e36 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36e>
90016c72:	6967      	ldr	r7, [r4, #20]
90016c74:	f10d 0850 	add.w	r8, sp, #80	; 0x50
90016c78:	9b0c      	ldr	r3, [sp, #48]	; 0x30
90016c7a:	443b      	add	r3, r7
90016c7c:	461f      	mov	r7, r3
90016c7e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
90016c80:	1bdf      	subs	r7, r3, r7
90016c82:	4297      	cmp	r7, r2
90016c84:	bfa8      	it	ge
90016c86:	4617      	movge	r7, r2
90016c88:	2f00      	cmp	r7, #0
90016c8a:	f340 8166 	ble.w	90016f5a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x492>
90016c8e:	9b64      	ldr	r3, [sp, #400]	; 0x190
90016c90:	6829      	ldr	r1, [r5, #0]
90016c92:	f9b3 2000 	ldrsh.w	r2, [r3]
90016c96:	f9bb 3000 	ldrsh.w	r3, [fp]
90016c9a:	4411      	add	r1, r2
90016c9c:	6820      	ldr	r0, [r4, #0]
90016c9e:	4299      	cmp	r1, r3
90016ca0:	dd1a      	ble.n	90016cd8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
90016ca2:	f8bb 1004 	ldrh.w	r1, [fp, #4]
90016ca6:	4402      	add	r2, r0
90016ca8:	440b      	add	r3, r1
90016caa:	b21b      	sxth	r3, r3
90016cac:	429a      	cmp	r2, r3
90016cae:	dc13      	bgt.n	90016cd8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
90016cb0:	9a10      	ldr	r2, [sp, #64]	; 0x40
90016cb2:	a912      	add	r1, sp, #72	; 0x48
90016cb4:	9b09      	ldr	r3, [sp, #36]	; 0x24
90016cb6:	9809      	ldr	r0, [sp, #36]	; 0x24
90016cb8:	681b      	ldr	r3, [r3, #0]
90016cba:	9206      	str	r2, [sp, #24]
90016cbc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
90016cbe:	9500      	str	r5, [sp, #0]
90016cc0:	9205      	str	r2, [sp, #20]
90016cc2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
90016cc4:	e9cd b203 	strd	fp, r2, [sp, #12]
90016cc8:	9a64      	ldr	r2, [sp, #400]	; 0x190
90016cca:	e9cd 8201 	strd	r8, r2, [sp, #4]
90016cce:	aa49      	add	r2, sp, #292	; 0x124
90016cd0:	f8d3 9048 	ldr.w	r9, [r3, #72]	; 0x48
90016cd4:	4623      	mov	r3, r4
90016cd6:	47c8      	blx	r9
90016cd8:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
90016cdc:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
90016ce0:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
90016ce4:	ee37 7a27 	vadd.f32	s14, s14, s15
90016ce8:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
90016cec:	68a1      	ldr	r1, [r4, #8]
90016cee:	ee77 7aa6 	vadd.f32	s15, s15, s13
90016cf2:	ed94 6a08 	vldr	s12, [r4, #32]
90016cf6:	edd4 6a07 	vldr	s13, [r4, #28]
90016cfa:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
90016cfe:	ee76 6a86 	vadd.f32	s13, s13, s12
90016d02:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
90016d06:	e9d4 2300 	ldrd	r2, r3, [r4]
90016d0a:	edc4 6a07 	vstr	s13, [r4, #28]
90016d0e:	441a      	add	r2, r3
90016d10:	6963      	ldr	r3, [r4, #20]
90016d12:	3301      	adds	r3, #1
90016d14:	6022      	str	r2, [r4, #0]
90016d16:	6163      	str	r3, [r4, #20]
90016d18:	69a3      	ldr	r3, [r4, #24]
90016d1a:	3b01      	subs	r3, #1
90016d1c:	61a3      	str	r3, [r4, #24]
90016d1e:	6923      	ldr	r3, [r4, #16]
90016d20:	440b      	add	r3, r1
90016d22:	68e1      	ldr	r1, [r4, #12]
90016d24:	428b      	cmp	r3, r1
90016d26:	6123      	str	r3, [r4, #16]
90016d28:	db15      	blt.n	90016d56 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x28e>
90016d2a:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
90016d2e:	3201      	adds	r2, #1
90016d30:	1a5b      	subs	r3, r3, r1
90016d32:	ee76 6a26 	vadd.f32	s13, s12, s13
90016d36:	6022      	str	r2, [r4, #0]
90016d38:	6123      	str	r3, [r4, #16]
90016d3a:	edc4 6a07 	vstr	s13, [r4, #28]
90016d3e:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
90016d42:	ee36 7a87 	vadd.f32	s14, s13, s14
90016d46:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
90016d4a:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
90016d4e:	ee77 7a27 	vadd.f32	s15, s14, s15
90016d52:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
90016d56:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
90016d5a:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
90016d5e:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
90016d62:	ee37 7a27 	vadd.f32	s14, s14, s15
90016d66:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
90016d6a:	68a9      	ldr	r1, [r5, #8]
90016d6c:	ee77 7aa6 	vadd.f32	s15, s15, s13
90016d70:	ed95 6a08 	vldr	s12, [r5, #32]
90016d74:	edd5 6a07 	vldr	s13, [r5, #28]
90016d78:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
90016d7c:	ee76 6a86 	vadd.f32	s13, s13, s12
90016d80:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
90016d84:	e9d5 2300 	ldrd	r2, r3, [r5]
90016d88:	edc5 6a07 	vstr	s13, [r5, #28]
90016d8c:	441a      	add	r2, r3
90016d8e:	696b      	ldr	r3, [r5, #20]
90016d90:	3301      	adds	r3, #1
90016d92:	602a      	str	r2, [r5, #0]
90016d94:	616b      	str	r3, [r5, #20]
90016d96:	69ab      	ldr	r3, [r5, #24]
90016d98:	3b01      	subs	r3, #1
90016d9a:	61ab      	str	r3, [r5, #24]
90016d9c:	692b      	ldr	r3, [r5, #16]
90016d9e:	440b      	add	r3, r1
90016da0:	68e9      	ldr	r1, [r5, #12]
90016da2:	428b      	cmp	r3, r1
90016da4:	612b      	str	r3, [r5, #16]
90016da6:	db15      	blt.n	90016dd4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x30c>
90016da8:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
90016dac:	3201      	adds	r2, #1
90016dae:	1a5b      	subs	r3, r3, r1
90016db0:	ee76 6a26 	vadd.f32	s13, s12, s13
90016db4:	602a      	str	r2, [r5, #0]
90016db6:	612b      	str	r3, [r5, #16]
90016db8:	edc5 6a07 	vstr	s13, [r5, #28]
90016dbc:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
90016dc0:	ee36 7a87 	vadd.f32	s14, s13, s14
90016dc4:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
90016dc8:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
90016dcc:	ee77 7a27 	vadd.f32	s15, s14, s15
90016dd0:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
90016dd4:	3f01      	subs	r7, #1
90016dd6:	e757      	b.n	90016c88 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1c0>
90016dd8:	4299      	cmp	r1, r3
90016dda:	dc13      	bgt.n	90016e04 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x33c>
90016ddc:	429a      	cmp	r2, r3
90016dde:	da14      	bge.n	90016e0a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x342>
90016de0:	2502      	movs	r5, #2
90016de2:	2703      	movs	r7, #3
90016de4:	f04f 0800 	mov.w	r8, #0
90016de8:	46a9      	mov	r9, r5
90016dea:	f04f 0a01 	mov.w	sl, #1
90016dee:	e6ef      	b.n	90016bd0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
90016df0:	2501      	movs	r5, #1
90016df2:	2700      	movs	r7, #0
90016df4:	46a9      	mov	r9, r5
90016df6:	46b8      	mov	r8, r7
90016df8:	f04f 0a02 	mov.w	sl, #2
90016dfc:	e6e8      	b.n	90016bd0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
90016dfe:	2501      	movs	r5, #1
90016e00:	2702      	movs	r7, #2
90016e02:	e6e1      	b.n	90016bc8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x100>
90016e04:	2500      	movs	r5, #0
90016e06:	2701      	movs	r7, #1
90016e08:	e7f4      	b.n	90016df4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x32c>
90016e0a:	2702      	movs	r7, #2
90016e0c:	2503      	movs	r5, #3
90016e0e:	f04f 0900 	mov.w	r9, #0
90016e12:	46b8      	mov	r8, r7
90016e14:	e7e9      	b.n	90016dea <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x322>
90016e16:	4613      	mov	r3, r2
90016e18:	e728      	b.n	90016c6c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1a4>
90016e1a:	bf00      	nop
90016e1c:	240281e4 	.word	0x240281e4
90016e20:	fffd8f01 	.word	0xfffd8f01
90016e24:	00027100 	.word	0x00027100
90016e28:	0004e1ff 	.word	0x0004e1ff
90016e2c:	0004e1fe 	.word	0x0004e1fe
90016e30:	240281ec 	.word	0x240281ec
90016e34:	4613      	mov	r3, r2
90016e36:	992b      	ldr	r1, [sp, #172]	; 0xac
90016e38:	469e      	mov	lr, r3
90016e3a:	9f2e      	ldr	r7, [sp, #184]	; 0xb8
90016e3c:	469c      	mov	ip, r3
90016e3e:	9111      	str	r1, [sp, #68]	; 0x44
90016e40:	f04f 0900 	mov.w	r9, #0
90016e44:	eddd 4a34 	vldr	s9, [sp, #208]	; 0xd0
90016e48:	ed9d 7a33 	vldr	s14, [sp, #204]	; 0xcc
90016e4c:	ed9d 4a37 	vldr	s8, [sp, #220]	; 0xdc
90016e50:	eddd 7a36 	vldr	s15, [sp, #216]	; 0xd8
90016e54:	eddd 3a31 	vldr	s7, [sp, #196]	; 0xc4
90016e58:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
90016e5c:	ed9d 5a32 	vldr	s10, [sp, #200]	; 0xc8
90016e60:	eddd 5a35 	vldr	s11, [sp, #212]	; 0xd4
90016e64:	ed9d 6a38 	vldr	s12, [sp, #224]	; 0xe0
90016e68:	e9dd 0a29 	ldrd	r0, sl, [sp, #164]	; 0xa4
90016e6c:	e9dd 812c 	ldrd	r8, r1, [sp, #176]	; 0xb0
90016e70:	f1bc 0f00 	cmp.w	ip, #0
90016e74:	d147      	bne.n	90016f06 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x43e>
90016e76:	eb03 0c07 	add.w	ip, r3, r7
90016e7a:	1ad7      	subs	r7, r2, r3
90016e7c:	f1b9 0f00 	cmp.w	r9, #0
90016e80:	d009      	beq.n	90016e96 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3ce>
90016e82:	9029      	str	r0, [sp, #164]	; 0xa4
90016e84:	ed8d 7a33 	vstr	s14, [sp, #204]	; 0xcc
90016e88:	edcd 7a36 	vstr	s15, [sp, #216]	; 0xd8
90016e8c:	edcd 6a30 	vstr	s13, [sp, #192]	; 0xc0
90016e90:	912d      	str	r1, [sp, #180]	; 0xb4
90016e92:	e9cd c72e 	strd	ip, r7, [sp, #184]	; 0xb8
90016e96:	991b      	ldr	r1, [sp, #108]	; 0x6c
90016e98:	f04f 0800 	mov.w	r8, #0
90016e9c:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
90016ea0:	9111      	str	r1, [sp, #68]	; 0x44
90016ea2:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
90016ea6:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
90016eaa:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
90016eae:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
90016eb2:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
90016eb6:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
90016eba:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
90016ebe:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
90016ec2:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
90016ec6:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
90016eca:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
90016ece:	f1be 0f00 	cmp.w	lr, #0
90016ed2:	d031      	beq.n	90016f38 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x470>
90016ed4:	9e11      	ldr	r6, [sp, #68]	; 0x44
90016ed6:	4450      	add	r0, sl
90016ed8:	ee76 6aa4 	vadd.f32	s13, s13, s9
90016edc:	4431      	add	r1, r6
90016ede:	ee37 7a04 	vadd.f32	s14, s14, s8
90016ee2:	ee77 7aa3 	vadd.f32	s15, s15, s7
90016ee6:	4549      	cmp	r1, r9
90016ee8:	db08      	blt.n	90016efc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x434>
90016eea:	ee77 7a85 	vadd.f32	s15, s15, s10
90016eee:	3001      	adds	r0, #1
90016ef0:	ee76 6aa5 	vadd.f32	s13, s13, s11
90016ef4:	eba1 0109 	sub.w	r1, r1, r9
90016ef8:	ee37 7a06 	vadd.f32	s14, s14, s12
90016efc:	f10e 3eff 	add.w	lr, lr, #4294967295
90016f00:	f04f 0801 	mov.w	r8, #1
90016f04:	e7e3      	b.n	90016ece <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x406>
90016f06:	9e11      	ldr	r6, [sp, #68]	; 0x44
90016f08:	4450      	add	r0, sl
90016f0a:	ee37 7a24 	vadd.f32	s14, s14, s9
90016f0e:	4431      	add	r1, r6
90016f10:	ee77 7a84 	vadd.f32	s15, s15, s8
90016f14:	ee76 6aa3 	vadd.f32	s13, s13, s7
90016f18:	4541      	cmp	r1, r8
90016f1a:	db08      	blt.n	90016f2e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x466>
90016f1c:	ee76 6a85 	vadd.f32	s13, s13, s10
90016f20:	3001      	adds	r0, #1
90016f22:	ee37 7a25 	vadd.f32	s14, s14, s11
90016f26:	eba1 0108 	sub.w	r1, r1, r8
90016f2a:	ee77 7a86 	vadd.f32	s15, s15, s12
90016f2e:	f10c 3cff 	add.w	ip, ip, #4294967295
90016f32:	f04f 0901 	mov.w	r9, #1
90016f36:	e79b      	b.n	90016e70 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3a8>
90016f38:	449c      	add	ip, r3
90016f3a:	1aff      	subs	r7, r7, r3
90016f3c:	f1b8 0f00 	cmp.w	r8, #0
90016f40:	d009      	beq.n	90016f56 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x48e>
90016f42:	9019      	str	r0, [sp, #100]	; 0x64
90016f44:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
90016f48:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
90016f4c:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
90016f50:	911d      	str	r1, [sp, #116]	; 0x74
90016f52:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
90016f56:	1ad2      	subs	r2, r2, r3
90016f58:	e68b      	b.n	90016c72 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
90016f5a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
90016f5c:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
90016f5e:	2b00      	cmp	r3, #0
90016f60:	f000 80d1 	beq.w	90017106 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63e>
90016f64:	ad19      	add	r5, sp, #100	; 0x64
90016f66:	ac39      	add	r4, sp, #228	; 0xe4
90016f68:	9b64      	ldr	r3, [sp, #400]	; 0x190
90016f6a:	f8bb 0006 	ldrh.w	r0, [fp, #6]
90016f6e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
90016f72:	930c      	str	r3, [sp, #48]	; 0x30
90016f74:	990c      	ldr	r1, [sp, #48]	; 0x30
90016f76:	6963      	ldr	r3, [r4, #20]
90016f78:	440b      	add	r3, r1
90016f7a:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
90016f7e:	4408      	add	r0, r1
90016f80:	b200      	sxth	r0, r0
90016f82:	4283      	cmp	r3, r0
90016f84:	900d      	str	r0, [sp, #52]	; 0x34
90016f86:	f280 80c1 	bge.w	9001710c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x644>
90016f8a:	428b      	cmp	r3, r1
90016f8c:	da08      	bge.n	90016fa0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
90016f8e:	2a00      	cmp	r2, #0
90016f90:	dd06      	ble.n	90016fa0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
90016f92:	1acb      	subs	r3, r1, r3
90016f94:	429a      	cmp	r2, r3
90016f96:	f2c0 80bb 	blt.w	90017110 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x648>
90016f9a:	2b00      	cmp	r3, #0
90016f9c:	f300 80b9 	bgt.w	90017112 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x64a>
90016fa0:	6967      	ldr	r7, [r4, #20]
90016fa2:	f10d 0850 	add.w	r8, sp, #80	; 0x50
90016fa6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
90016fa8:	443b      	add	r3, r7
90016faa:	461f      	mov	r7, r3
90016fac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
90016fae:	1bdf      	subs	r7, r3, r7
90016fb0:	4297      	cmp	r7, r2
90016fb2:	bfa8      	it	ge
90016fb4:	4617      	movge	r7, r2
90016fb6:	2f00      	cmp	r7, #0
90016fb8:	f340 813c 	ble.w	90017234 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x76c>
90016fbc:	9b64      	ldr	r3, [sp, #400]	; 0x190
90016fbe:	6829      	ldr	r1, [r5, #0]
90016fc0:	f9b3 2000 	ldrsh.w	r2, [r3]
90016fc4:	f9bb 3000 	ldrsh.w	r3, [fp]
90016fc8:	4411      	add	r1, r2
90016fca:	6820      	ldr	r0, [r4, #0]
90016fcc:	4299      	cmp	r1, r3
90016fce:	dd1a      	ble.n	90017006 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
90016fd0:	f8bb 1004 	ldrh.w	r1, [fp, #4]
90016fd4:	4402      	add	r2, r0
90016fd6:	440b      	add	r3, r1
90016fd8:	b21b      	sxth	r3, r3
90016fda:	429a      	cmp	r2, r3
90016fdc:	dc13      	bgt.n	90017006 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
90016fde:	9a10      	ldr	r2, [sp, #64]	; 0x40
90016fe0:	a912      	add	r1, sp, #72	; 0x48
90016fe2:	9b09      	ldr	r3, [sp, #36]	; 0x24
90016fe4:	9809      	ldr	r0, [sp, #36]	; 0x24
90016fe6:	681b      	ldr	r3, [r3, #0]
90016fe8:	9206      	str	r2, [sp, #24]
90016fea:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
90016fec:	9500      	str	r5, [sp, #0]
90016fee:	9205      	str	r2, [sp, #20]
90016ff0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
90016ff2:	e9cd b203 	strd	fp, r2, [sp, #12]
90016ff6:	9a64      	ldr	r2, [sp, #400]	; 0x190
90016ff8:	e9cd 8201 	strd	r8, r2, [sp, #4]
90016ffc:	aa49      	add	r2, sp, #292	; 0x124
90016ffe:	f8d3 9048 	ldr.w	r9, [r3, #72]	; 0x48
90017002:	4623      	mov	r3, r4
90017004:	47c8      	blx	r9
90017006:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
9001700a:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
9001700e:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
90017012:	ee37 7a27 	vadd.f32	s14, s14, s15
90017016:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
9001701a:	68a1      	ldr	r1, [r4, #8]
9001701c:	ee77 7aa6 	vadd.f32	s15, s15, s13
90017020:	ed94 6a08 	vldr	s12, [r4, #32]
90017024:	edd4 6a07 	vldr	s13, [r4, #28]
90017028:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
9001702c:	ee76 6a86 	vadd.f32	s13, s13, s12
90017030:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
90017034:	e9d4 2300 	ldrd	r2, r3, [r4]
90017038:	edc4 6a07 	vstr	s13, [r4, #28]
9001703c:	441a      	add	r2, r3
9001703e:	6963      	ldr	r3, [r4, #20]
90017040:	3301      	adds	r3, #1
90017042:	6022      	str	r2, [r4, #0]
90017044:	6163      	str	r3, [r4, #20]
90017046:	69a3      	ldr	r3, [r4, #24]
90017048:	3b01      	subs	r3, #1
9001704a:	61a3      	str	r3, [r4, #24]
9001704c:	6923      	ldr	r3, [r4, #16]
9001704e:	440b      	add	r3, r1
90017050:	68e1      	ldr	r1, [r4, #12]
90017052:	428b      	cmp	r3, r1
90017054:	6123      	str	r3, [r4, #16]
90017056:	db15      	blt.n	90017084 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x5bc>
90017058:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
9001705c:	3201      	adds	r2, #1
9001705e:	1a5b      	subs	r3, r3, r1
90017060:	ee76 6a26 	vadd.f32	s13, s12, s13
90017064:	6022      	str	r2, [r4, #0]
90017066:	6123      	str	r3, [r4, #16]
90017068:	edc4 6a07 	vstr	s13, [r4, #28]
9001706c:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
90017070:	ee36 7a87 	vadd.f32	s14, s13, s14
90017074:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
90017078:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
9001707c:	ee77 7a27 	vadd.f32	s15, s14, s15
90017080:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
90017084:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
90017088:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
9001708c:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
90017090:	ee37 7a27 	vadd.f32	s14, s14, s15
90017094:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
90017098:	68a9      	ldr	r1, [r5, #8]
9001709a:	ee77 7aa6 	vadd.f32	s15, s15, s13
9001709e:	ed95 6a08 	vldr	s12, [r5, #32]
900170a2:	edd5 6a07 	vldr	s13, [r5, #28]
900170a6:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
900170aa:	ee76 6a86 	vadd.f32	s13, s13, s12
900170ae:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
900170b2:	e9d5 2300 	ldrd	r2, r3, [r5]
900170b6:	edc5 6a07 	vstr	s13, [r5, #28]
900170ba:	441a      	add	r2, r3
900170bc:	696b      	ldr	r3, [r5, #20]
900170be:	3301      	adds	r3, #1
900170c0:	602a      	str	r2, [r5, #0]
900170c2:	616b      	str	r3, [r5, #20]
900170c4:	69ab      	ldr	r3, [r5, #24]
900170c6:	3b01      	subs	r3, #1
900170c8:	61ab      	str	r3, [r5, #24]
900170ca:	692b      	ldr	r3, [r5, #16]
900170cc:	440b      	add	r3, r1
900170ce:	68e9      	ldr	r1, [r5, #12]
900170d0:	428b      	cmp	r3, r1
900170d2:	612b      	str	r3, [r5, #16]
900170d4:	db15      	blt.n	90017102 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63a>
900170d6:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
900170da:	3201      	adds	r2, #1
900170dc:	1a5b      	subs	r3, r3, r1
900170de:	ee76 6a26 	vadd.f32	s13, s12, s13
900170e2:	602a      	str	r2, [r5, #0]
900170e4:	612b      	str	r3, [r5, #16]
900170e6:	edc5 6a07 	vstr	s13, [r5, #28]
900170ea:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
900170ee:	ee36 7a87 	vadd.f32	s14, s13, s14
900170f2:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
900170f6:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
900170fa:	ee77 7a27 	vadd.f32	s15, s14, s15
900170fe:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
90017102:	3f01      	subs	r7, #1
90017104:	e757      	b.n	90016fb6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4ee>
90017106:	ad39      	add	r5, sp, #228	; 0xe4
90017108:	ac19      	add	r4, sp, #100	; 0x64
9001710a:	e72d      	b.n	90016f68 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4a0>
9001710c:	4613      	mov	r3, r2
9001710e:	e744      	b.n	90016f9a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d2>
90017110:	4613      	mov	r3, r2
90017112:	9e3b      	ldr	r6, [sp, #236]	; 0xec
90017114:	469e      	mov	lr, r3
90017116:	f8dd c0f8 	ldr.w	ip, [sp, #248]	; 0xf8
9001711a:	461f      	mov	r7, r3
9001711c:	ed9d 7a43 	vldr	s14, [sp, #268]	; 0x10c
90017120:	f04f 0900 	mov.w	r9, #0
90017124:	eddd 4a44 	vldr	s9, [sp, #272]	; 0x110
90017128:	eddd 7a46 	vldr	s15, [sp, #280]	; 0x118
9001712c:	ed9d 4a47 	vldr	s8, [sp, #284]	; 0x11c
90017130:	eddd 6a40 	vldr	s13, [sp, #256]	; 0x100
90017134:	eddd 3a41 	vldr	s7, [sp, #260]	; 0x104
90017138:	993d      	ldr	r1, [sp, #244]	; 0xf4
9001713a:	f8dd 80f0 	ldr.w	r8, [sp, #240]	; 0xf0
9001713e:	ed9d 5a42 	vldr	s10, [sp, #264]	; 0x108
90017142:	eddd 5a45 	vldr	s11, [sp, #276]	; 0x114
90017146:	ed9d 6a48 	vldr	s12, [sp, #288]	; 0x120
9001714a:	960e      	str	r6, [sp, #56]	; 0x38
9001714c:	e9dd 0a39 	ldrd	r0, sl, [sp, #228]	; 0xe4
90017150:	2f00      	cmp	r7, #0
90017152:	d146      	bne.n	900171e2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x71a>
90017154:	449c      	add	ip, r3
90017156:	1ad7      	subs	r7, r2, r3
90017158:	f1b9 0f00 	cmp.w	r9, #0
9001715c:	d009      	beq.n	90017172 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6aa>
9001715e:	9039      	str	r0, [sp, #228]	; 0xe4
90017160:	913d      	str	r1, [sp, #244]	; 0xf4
90017162:	edcd 6a40 	vstr	s13, [sp, #256]	; 0x100
90017166:	ed8d 7a43 	vstr	s14, [sp, #268]	; 0x10c
9001716a:	edcd 7a46 	vstr	s15, [sp, #280]	; 0x118
9001716e:	e9cd c73e 	strd	ip, r7, [sp, #248]	; 0xf8
90017172:	991b      	ldr	r1, [sp, #108]	; 0x6c
90017174:	f04f 0800 	mov.w	r8, #0
90017178:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
9001717c:	910e      	str	r1, [sp, #56]	; 0x38
9001717e:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
90017182:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
90017186:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
9001718a:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
9001718e:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
90017192:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
90017196:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
9001719a:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
9001719e:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
900171a2:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
900171a6:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
900171aa:	f1be 0f00 	cmp.w	lr, #0
900171ae:	d030      	beq.n	90017212 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x74a>
900171b0:	9e0e      	ldr	r6, [sp, #56]	; 0x38
900171b2:	4450      	add	r0, sl
900171b4:	ee76 6aa4 	vadd.f32	s13, s13, s9
900171b8:	4431      	add	r1, r6
900171ba:	ee37 7a04 	vadd.f32	s14, s14, s8
900171be:	ee77 7aa3 	vadd.f32	s15, s15, s7
900171c2:	4549      	cmp	r1, r9
900171c4:	db08      	blt.n	900171d8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x710>
900171c6:	ee77 7a85 	vadd.f32	s15, s15, s10
900171ca:	3001      	adds	r0, #1
900171cc:	ee76 6aa5 	vadd.f32	s13, s13, s11
900171d0:	eba1 0109 	sub.w	r1, r1, r9
900171d4:	ee37 7a06 	vadd.f32	s14, s14, s12
900171d8:	f10e 3eff 	add.w	lr, lr, #4294967295
900171dc:	f04f 0801 	mov.w	r8, #1
900171e0:	e7e3      	b.n	900171aa <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6e2>
900171e2:	9e0e      	ldr	r6, [sp, #56]	; 0x38
900171e4:	4450      	add	r0, sl
900171e6:	ee37 7a24 	vadd.f32	s14, s14, s9
900171ea:	4431      	add	r1, r6
900171ec:	ee77 7a84 	vadd.f32	s15, s15, s8
900171f0:	ee76 6aa3 	vadd.f32	s13, s13, s7
900171f4:	4541      	cmp	r1, r8
900171f6:	db08      	blt.n	9001720a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x742>
900171f8:	ee76 6a85 	vadd.f32	s13, s13, s10
900171fc:	3001      	adds	r0, #1
900171fe:	ee37 7a25 	vadd.f32	s14, s14, s11
90017202:	eba1 0108 	sub.w	r1, r1, r8
90017206:	ee77 7a86 	vadd.f32	s15, s15, s12
9001720a:	3f01      	subs	r7, #1
9001720c:	f04f 0901 	mov.w	r9, #1
90017210:	e79e      	b.n	90017150 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x688>
90017212:	449c      	add	ip, r3
90017214:	1aff      	subs	r7, r7, r3
90017216:	f1b8 0f00 	cmp.w	r8, #0
9001721a:	d009      	beq.n	90017230 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x768>
9001721c:	9019      	str	r0, [sp, #100]	; 0x64
9001721e:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
90017222:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
90017226:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
9001722a:	911d      	str	r1, [sp, #116]	; 0x74
9001722c:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
90017230:	1ad2      	subs	r2, r2, r3
90017232:	e6b5      	b.n	90016fa0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
90017234:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
90017236:	681b      	ldr	r3, [r3, #0]
90017238:	b923      	cbnz	r3, 90017244 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
9001723a:	4b04      	ldr	r3, [pc, #16]	; (9001724c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x784>)
9001723c:	6818      	ldr	r0, [r3, #0]
9001723e:	6803      	ldr	r3, [r0, #0]
90017240:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90017242:	4798      	blx	r3
90017244:	b05b      	add	sp, #364	; 0x16c
90017246:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9001724a:	bf00      	nop
9001724c:	240281ec 	.word	0x240281ec

90017250 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE>:
90017250:	b570      	push	{r4, r5, r6, lr}
90017252:	4604      	mov	r4, r0
90017254:	2500      	movs	r5, #0
90017256:	9805      	ldr	r0, [sp, #20]
90017258:	f89d 601c 	ldrb.w	r6, [sp, #28]
9001725c:	6061      	str	r1, [r4, #4]
9001725e:	8263      	strh	r3, [r4, #18]
90017260:	f89d 1010 	ldrb.w	r1, [sp, #16]
90017264:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
90017268:	8025      	strh	r5, [r4, #0]
9001726a:	7221      	strb	r1, [r4, #8]
9001726c:	7266      	strb	r6, [r4, #9]
9001726e:	60e0      	str	r0, [r4, #12]
90017270:	8222      	strh	r2, [r4, #16]
90017272:	82a3      	strh	r3, [r4, #20]
90017274:	82e5      	strh	r5, [r4, #22]
90017276:	8325      	strh	r5, [r4, #24]
90017278:	8365      	strh	r5, [r4, #26]
9001727a:	83a5      	strh	r5, [r4, #28]
9001727c:	83e5      	strh	r5, [r4, #30]
9001727e:	8425      	strh	r5, [r4, #32]
90017280:	f884 5022 	strb.w	r5, [r4, #34]	; 0x22
90017284:	b32e      	cbz	r6, 900172d2 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
90017286:	6803      	ldr	r3, [r0, #0]
90017288:	695b      	ldr	r3, [r3, #20]
9001728a:	4798      	blx	r3
9001728c:	4606      	mov	r6, r0
9001728e:	b300      	cbz	r0, 900172d2 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
90017290:	68e0      	ldr	r0, [r4, #12]
90017292:	4631      	mov	r1, r6
90017294:	6803      	ldr	r3, [r0, #0]
90017296:	68db      	ldr	r3, [r3, #12]
90017298:	4798      	blx	r3
9001729a:	4605      	mov	r5, r0
9001729c:	b1c8      	cbz	r0, 900172d2 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
9001729e:	7b43      	ldrb	r3, [r0, #13]
900172a0:	7a82      	ldrb	r2, [r0, #10]
900172a2:	005b      	lsls	r3, r3, #1
900172a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
900172a8:	4313      	orrs	r3, r2
900172aa:	8423      	strh	r3, [r4, #32]
900172ac:	7a63      	ldrb	r3, [r4, #9]
900172ae:	2b06      	cmp	r3, #6
900172b0:	d10f      	bne.n	900172d2 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
900172b2:	68e0      	ldr	r0, [r4, #12]
900172b4:	462a      	mov	r2, r5
900172b6:	4631      	mov	r1, r6
900172b8:	6803      	ldr	r3, [r0, #0]
900172ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
900172bc:	4798      	blx	r3
900172be:	7b6b      	ldrb	r3, [r5, #13]
900172c0:	005b      	lsls	r3, r3, #1
900172c2:	f403 7280 	and.w	r2, r3, #256	; 0x100
900172c6:	7aab      	ldrb	r3, [r5, #10]
900172c8:	4313      	orrs	r3, r2
900172ca:	4418      	add	r0, r3
900172cc:	8c23      	ldrh	r3, [r4, #32]
900172ce:	4418      	add	r0, r3
900172d0:	8420      	strh	r0, [r4, #32]
900172d2:	4620      	mov	r0, r4
900172d4:	bd70      	pop	{r4, r5, r6, pc}

900172d6 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>:
900172d6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
900172da:	2400      	movs	r4, #0
900172dc:	b085      	sub	sp, #20
900172de:	4681      	mov	r9, r0
900172e0:	4688      	mov	r8, r1
900172e2:	4692      	mov	sl, r2
900172e4:	469b      	mov	fp, r3
900172e6:	4627      	mov	r7, r4
900172e8:	4625      	mov	r5, r4
900172ea:	4626      	mov	r6, r4
900172ec:	4554      	cmp	r4, sl
900172ee:	da2a      	bge.n	90017346 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
900172f0:	2300      	movs	r3, #0
900172f2:	9303      	str	r3, [sp, #12]
900172f4:	f64f 63ff 	movw	r3, #65279	; 0xfeff
900172f8:	429d      	cmp	r5, r3
900172fa:	d004      	beq.n	90017306 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x30>
900172fc:	f242 030b 	movw	r3, #8203	; 0x200b
90017300:	429d      	cmp	r5, r3
90017302:	bf18      	it	ne
90017304:	462f      	movne	r7, r5
90017306:	ab03      	add	r3, sp, #12
90017308:	4642      	mov	r2, r8
9001730a:	4659      	mov	r1, fp
9001730c:	4648      	mov	r0, r9
9001730e:	f003 f83d 	bl	9001a38c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
90017312:	4605      	mov	r5, r0
90017314:	b1b8      	cbz	r0, 90017346 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
90017316:	280a      	cmp	r0, #10
90017318:	d015      	beq.n	90017346 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
9001731a:	9a03      	ldr	r2, [sp, #12]
9001731c:	b18a      	cbz	r2, 90017342 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x6c>
9001731e:	7b50      	ldrb	r0, [r2, #13]
90017320:	4639      	mov	r1, r7
90017322:	7a93      	ldrb	r3, [r2, #10]
90017324:	0040      	lsls	r0, r0, #1
90017326:	8895      	ldrh	r5, [r2, #4]
90017328:	f400 7080 	and.w	r0, r0, #256	; 0x100
9001732c:	4303      	orrs	r3, r0
9001732e:	4640      	mov	r0, r8
90017330:	9301      	str	r3, [sp, #4]
90017332:	f8d8 3000 	ldr.w	r3, [r8]
90017336:	6c5b      	ldr	r3, [r3, #68]	; 0x44
90017338:	4798      	blx	r3
9001733a:	9b01      	ldr	r3, [sp, #4]
9001733c:	4418      	add	r0, r3
9001733e:	4406      	add	r6, r0
90017340:	b2b6      	uxth	r6, r6
90017342:	3401      	adds	r4, #1
90017344:	e7d2      	b.n	900172ec <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x16>
90017346:	4630      	mov	r0, r6
90017348:	b005      	add	sp, #20
9001734a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

9001734e <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>:
9001734e:	2a02      	cmp	r2, #2
90017350:	b530      	push	{r4, r5, lr}
90017352:	d011      	beq.n	90017378 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x2a>
90017354:	2a03      	cmp	r2, #3
90017356:	d01c      	beq.n	90017392 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x44>
90017358:	2a01      	cmp	r2, #1
9001735a:	d10c      	bne.n	90017376 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
9001735c:	888b      	ldrh	r3, [r1, #4]
9001735e:	8801      	ldrh	r1, [r0, #0]
90017360:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
90017364:	1a5b      	subs	r3, r3, r1
90017366:	8844      	ldrh	r4, [r0, #2]
90017368:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
9001736c:	1a9b      	subs	r3, r3, r2
9001736e:	8004      	strh	r4, [r0, #0]
90017370:	8081      	strh	r1, [r0, #4]
90017372:	8043      	strh	r3, [r0, #2]
90017374:	80c2      	strh	r2, [r0, #6]
90017376:	bd30      	pop	{r4, r5, pc}
90017378:	88cb      	ldrh	r3, [r1, #6]
9001737a:	8842      	ldrh	r2, [r0, #2]
9001737c:	1a9b      	subs	r3, r3, r2
9001737e:	88c2      	ldrh	r2, [r0, #6]
90017380:	1a9b      	subs	r3, r3, r2
90017382:	888a      	ldrh	r2, [r1, #4]
90017384:	8801      	ldrh	r1, [r0, #0]
90017386:	8043      	strh	r3, [r0, #2]
90017388:	1a52      	subs	r2, r2, r1
9001738a:	8881      	ldrh	r1, [r0, #4]
9001738c:	1a52      	subs	r2, r2, r1
9001738e:	8002      	strh	r2, [r0, #0]
90017390:	e7f1      	b.n	90017376 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
90017392:	88cb      	ldrh	r3, [r1, #6]
90017394:	8841      	ldrh	r1, [r0, #2]
90017396:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
9001739a:	1a5b      	subs	r3, r3, r1
9001739c:	f9b0 5000 	ldrsh.w	r5, [r0]
900173a0:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
900173a4:	1a9b      	subs	r3, r3, r2
900173a6:	8045      	strh	r5, [r0, #2]
900173a8:	8082      	strh	r2, [r0, #4]
900173aa:	8003      	strh	r3, [r0, #0]
900173ac:	80c4      	strh	r4, [r0, #6]
900173ae:	e7e2      	b.n	90017376 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>

900173b0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>:
900173b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
900173b4:	b09f      	sub	sp, #124	; 0x7c
900173b6:	9116      	str	r1, [sp, #88]	; 0x58
900173b8:	9317      	str	r3, [sp, #92]	; 0x5c
900173ba:	9929      	ldr	r1, [sp, #164]	; 0xa4
900173bc:	9b29      	ldr	r3, [sp, #164]	; 0xa4
900173be:	8809      	ldrh	r1, [r1, #0]
900173c0:	889b      	ldrh	r3, [r3, #4]
900173c2:	f8dd 80a8 	ldr.w	r8, [sp, #168]	; 0xa8
900173c6:	440b      	add	r3, r1
900173c8:	9212      	str	r2, [sp, #72]	; 0x48
900173ca:	f89d 20b8 	ldrb.w	r2, [sp, #184]	; 0xb8
900173ce:	b21b      	sxth	r3, r3
900173d0:	9011      	str	r0, [sp, #68]	; 0x44
900173d2:	f89d b0ac 	ldrb.w	fp, [sp, #172]	; 0xac
900173d6:	9310      	str	r3, [sp, #64]	; 0x40
900173d8:	f8d8 3000 	ldr.w	r3, [r8]
900173dc:	f9bd 60a0 	ldrsh.w	r6, [sp, #160]	; 0xa0
900173e0:	7b19      	ldrb	r1, [r3, #12]
900173e2:	7adb      	ldrb	r3, [r3, #11]
900173e4:	9114      	str	r1, [sp, #80]	; 0x50
900173e6:	9315      	str	r3, [sp, #84]	; 0x54
900173e8:	2a00      	cmp	r2, #0
900173ea:	d06a      	beq.n	900174c2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x112>
900173ec:	f898 3010 	ldrb.w	r3, [r8, #16]
900173f0:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
900173f2:	2b06      	cmp	r3, #6
900173f4:	bf14      	ite	ne
900173f6:	2301      	movne	r3, #1
900173f8:	2302      	moveq	r3, #2
900173fa:	4413      	add	r3, r2
900173fc:	f04f 0900 	mov.w	r9, #0
90017400:	930f      	str	r3, [sp, #60]	; 0x3c
90017402:	464c      	mov	r4, r9
90017404:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
90017408:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
9001740c:	e9dd 320e 	ldrd	r3, r2, [sp, #56]	; 0x38
90017410:	4293      	cmp	r3, r2
90017412:	f280 808f 	bge.w	90017534 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x184>
90017416:	2300      	movs	r3, #0
90017418:	e9cd 331c 	strd	r3, r3, [sp, #112]	; 0x70
9001741c:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
90017420:	f64f 63ff 	movw	r3, #65279	; 0xfeff
90017424:	429c      	cmp	r4, r3
90017426:	d006      	beq.n	90017436 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x86>
90017428:	9b0d      	ldr	r3, [sp, #52]	; 0x34
9001742a:	f242 020b 	movw	r2, #8203	; 0x200b
9001742e:	4294      	cmp	r4, r2
90017430:	bf18      	it	ne
90017432:	4623      	movne	r3, r4
90017434:	930d      	str	r3, [sp, #52]	; 0x34
90017436:	9b0e      	ldr	r3, [sp, #56]	; 0x38
90017438:	992d      	ldr	r1, [sp, #180]	; 0xb4
9001743a:	f8d8 2000 	ldr.w	r2, [r8]
9001743e:	428b      	cmp	r3, r1
90017440:	db41      	blt.n	900174c6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x116>
90017442:	6813      	ldr	r3, [r2, #0]
90017444:	4610      	mov	r0, r2
90017446:	695b      	ldr	r3, [r3, #20]
90017448:	4798      	blx	r3
9001744a:	4604      	mov	r4, r0
9001744c:	f8d8 0000 	ldr.w	r0, [r8]
90017450:	aa1d      	add	r2, sp, #116	; 0x74
90017452:	4621      	mov	r1, r4
90017454:	6803      	ldr	r3, [r0, #0]
90017456:	689d      	ldr	r5, [r3, #8]
90017458:	f10d 036f 	add.w	r3, sp, #111	; 0x6f
9001745c:	47a8      	blx	r5
9001745e:	901c      	str	r0, [sp, #112]	; 0x70
90017460:	f64f 63ff 	movw	r3, #65279	; 0xfeff
90017464:	429c      	cmp	r4, r3
90017466:	f000 80ec 	beq.w	90017642 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
9001746a:	f242 030b 	movw	r3, #8203	; 0x200b
9001746e:	429c      	cmp	r4, r3
90017470:	f000 80e7 	beq.w	90017642 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
90017474:	2c00      	cmp	r4, #0
90017476:	f000 80f9 	beq.w	9001766c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2bc>
9001747a:	2c0a      	cmp	r4, #10
9001747c:	d060      	beq.n	90017540 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x190>
9001747e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
90017480:	b36a      	cbz	r2, 900174de <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x12e>
90017482:	8894      	ldrh	r4, [r2, #4]
90017484:	f1bb 0f00 	cmp.w	fp, #0
90017488:	d03b      	beq.n	90017502 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x152>
9001748a:	f892 900d 	ldrb.w	r9, [r2, #13]
9001748e:	f1bb 0f01 	cmp.w	fp, #1
90017492:	ea4f 0949 	mov.w	r9, r9, lsl #1
90017496:	f409 7380 	and.w	r3, r9, #256	; 0x100
9001749a:	f892 900a 	ldrb.w	r9, [r2, #10]
9001749e:	ea49 0903 	orr.w	r9, r9, r3
900174a2:	d134      	bne.n	9001750e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x15e>
900174a4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
900174a6:	eba6 0609 	sub.w	r6, r6, r9
900174aa:	2b00      	cmp	r3, #0
900174ac:	d14f      	bne.n	9001754e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19e>
900174ae:	9a14      	ldr	r2, [sp, #80]	; 0x50
900174b0:	eb09 0306 	add.w	r3, r9, r6
900174b4:	4413      	add	r3, r2
900174b6:	9a29      	ldr	r2, [sp, #164]	; 0xa4
900174b8:	f9b2 2000 	ldrsh.w	r2, [r2]
900174bc:	4293      	cmp	r3, r2
900174be:	da51      	bge.n	90017564 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b4>
900174c0:	e038      	b.n	90017534 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x184>
900174c2:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
900174c4:	e79a      	b.n	900173fc <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x4c>
900174c6:	f10d 036f 	add.w	r3, sp, #111	; 0x6f
900174ca:	4659      	mov	r1, fp
900174cc:	982c      	ldr	r0, [sp, #176]	; 0xb0
900174ce:	9301      	str	r3, [sp, #4]
900174d0:	ab1d      	add	r3, sp, #116	; 0x74
900174d2:	9300      	str	r3, [sp, #0]
900174d4:	ab1c      	add	r3, sp, #112	; 0x70
900174d6:	f002 ffa2 	bl	9001a41e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>
900174da:	4604      	mov	r4, r0
900174dc:	e7c0      	b.n	90017460 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xb0>
900174de:	f8d8 0000 	ldr.w	r0, [r8]
900174e2:	6803      	ldr	r3, [r0, #0]
900174e4:	691b      	ldr	r3, [r3, #16]
900174e6:	4798      	blx	r3
900174e8:	f64f 63ff 	movw	r3, #65279	; 0xfeff
900174ec:	4298      	cmp	r0, r3
900174ee:	f000 80a8 	beq.w	90017642 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
900174f2:	f242 030b 	movw	r3, #8203	; 0x200b
900174f6:	4298      	cmp	r0, r3
900174f8:	f000 80a3 	beq.w	90017642 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
900174fc:	f1bb 0f00 	cmp.w	fp, #0
90017500:	d100      	bne.n	90017504 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x154>
90017502:	444e      	add	r6, r9
90017504:	9a1c      	ldr	r2, [sp, #112]	; 0x70
90017506:	2a00      	cmp	r2, #0
90017508:	d1bf      	bne.n	9001748a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xda>
9001750a:	4691      	mov	r9, r2
9001750c:	e099      	b.n	90017642 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
9001750e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
90017510:	2b00      	cmp	r3, #0
90017512:	f000 80ad 	beq.w	90017670 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2c0>
90017516:	f1bb 0f00 	cmp.w	fp, #0
9001751a:	d118      	bne.n	9001754e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19e>
9001751c:	f8d8 0000 	ldr.w	r0, [r8]
90017520:	990d      	ldr	r1, [sp, #52]	; 0x34
90017522:	6803      	ldr	r3, [r0, #0]
90017524:	6c5b      	ldr	r3, [r3, #68]	; 0x44
90017526:	4798      	blx	r3
90017528:	4406      	add	r6, r0
9001752a:	9b15      	ldr	r3, [sp, #84]	; 0x54
9001752c:	9a10      	ldr	r2, [sp, #64]	; 0x40
9001752e:	1af3      	subs	r3, r6, r3
90017530:	4293      	cmp	r3, r2
90017532:	dd17      	ble.n	90017564 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b4>
90017534:	2c00      	cmp	r4, #0
90017536:	f000 8099 	beq.w	9001766c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2bc>
9001753a:	2c0a      	cmp	r4, #10
9001753c:	f040 8087 	bne.w	9001764e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x29e>
90017540:	240a      	movs	r4, #10
90017542:	fab4 f084 	clz	r0, r4
90017546:	0940      	lsrs	r0, r0, #5
90017548:	b01f      	add	sp, #124	; 0x7c
9001754a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9001754e:	f8d8 0000 	ldr.w	r0, [r8]
90017552:	990d      	ldr	r1, [sp, #52]	; 0x34
90017554:	6803      	ldr	r3, [r0, #0]
90017556:	6c5b      	ldr	r3, [r3, #68]	; 0x44
90017558:	4798      	blx	r3
9001755a:	f1bb 0f01 	cmp.w	fp, #1
9001755e:	eba6 0600 	sub.w	r6, r6, r0
90017562:	d0a4      	beq.n	900174ae <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xfe>
90017564:	981c      	ldr	r0, [sp, #112]	; 0x70
90017566:	9b29      	ldr	r3, [sp, #164]	; 0xa4
90017568:	f990 1009 	ldrsb.w	r1, [r0, #9]
9001756c:	f9b3 7000 	ldrsh.w	r7, [r3]
90017570:	7b43      	ldrb	r3, [r0, #13]
90017572:	4431      	add	r1, r6
90017574:	015b      	lsls	r3, r3, #5
90017576:	f403 7280 	and.w	r2, r3, #256	; 0x100
9001757a:	7983      	ldrb	r3, [r0, #6]
9001757c:	4313      	orrs	r3, r2
9001757e:	440b      	add	r3, r1
90017580:	42bb      	cmp	r3, r7
90017582:	db5e      	blt.n	90017642 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
90017584:	9b10      	ldr	r3, [sp, #64]	; 0x40
90017586:	4299      	cmp	r1, r3
90017588:	da5b      	bge.n	90017642 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
9001758a:	f8d8 0000 	ldr.w	r0, [r8]
9001758e:	42b7      	cmp	r7, r6
90017590:	6803      	ldr	r3, [r0, #0]
90017592:	bfcc      	ite	gt
90017594:	1bbf      	subgt	r7, r7, r6
90017596:	2700      	movle	r7, #0
90017598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
9001759a:	bfc8      	it	gt
9001759c:	b2bf      	uxthgt	r7, r7
9001759e:	4798      	blx	r3
900175a0:	9b1c      	ldr	r3, [sp, #112]	; 0x70
900175a2:	7b5a      	ldrb	r2, [r3, #13]
900175a4:	00d1      	lsls	r1, r2, #3
900175a6:	f401 7580 	and.w	r5, r1, #256	; 0x100
900175aa:	7a19      	ldrb	r1, [r3, #8]
900175ac:	4329      	orrs	r1, r5
900175ae:	0655      	lsls	r5, r2, #25
900175b0:	9d17      	ldr	r5, [sp, #92]	; 0x5c
900175b2:	bf48      	it	mi
900175b4:	f5a1 7100 	submi.w	r1, r1, #512	; 0x200
900175b8:	4405      	add	r5, r0
900175ba:	bf48      	it	mi
900175bc:	b209      	sxthmi	r1, r1
900175be:	1a6d      	subs	r5, r5, r1
900175c0:	9929      	ldr	r1, [sp, #164]	; 0xa4
900175c2:	b2ad      	uxth	r5, r5
900175c4:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
900175c8:	fa0f fa85 	sxth.w	sl, r5
900175cc:	4551      	cmp	r1, sl
900175ce:	dd3c      	ble.n	9001764a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x29a>
900175d0:	0112      	lsls	r2, r2, #4
900175d2:	79d8      	ldrb	r0, [r3, #7]
900175d4:	f402 7280 	and.w	r2, r2, #256	; 0x100
900175d8:	4302      	orrs	r2, r0
900175da:	4492      	add	sl, r2
900175dc:	4551      	cmp	r1, sl
900175de:	dc30      	bgt.n	90017642 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
900175e0:	1b4d      	subs	r5, r1, r5
900175e2:	468a      	mov	sl, r1
900175e4:	b22d      	sxth	r5, r5
900175e6:	9319      	str	r3, [sp, #100]	; 0x64
900175e8:	b2ad      	uxth	r5, r5
900175ea:	9b11      	ldr	r3, [sp, #68]	; 0x44
900175ec:	f8d8 0000 	ldr.w	r0, [r8]
900175f0:	681a      	ldr	r2, [r3, #0]
900175f2:	6801      	ldr	r1, [r0, #0]
900175f4:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
900175f6:	9a1d      	ldr	r2, [sp, #116]	; 0x74
900175f8:	9313      	str	r3, [sp, #76]	; 0x4c
900175fa:	9218      	str	r2, [sp, #96]	; 0x60
900175fc:	6c09      	ldr	r1, [r1, #64]	; 0x40
900175fe:	4788      	blx	r1
90017600:	f898 1006 	ldrb.w	r1, [r8, #6]
90017604:	9b19      	ldr	r3, [sp, #100]	; 0x64
90017606:	910b      	str	r1, [sp, #44]	; 0x2c
90017608:	f898 100e 	ldrb.w	r1, [r8, #14]
9001760c:	9a18      	ldr	r2, [sp, #96]	; 0x60
9001760e:	910a      	str	r1, [sp, #40]	; 0x28
90017610:	f89d 106f 	ldrb.w	r1, [sp, #111]	; 0x6f
90017614:	9109      	str	r1, [sp, #36]	; 0x24
90017616:	f8d8 1008 	ldr.w	r1, [r8, #8]
9001761a:	9305      	str	r3, [sp, #20]
9001761c:	9b29      	ldr	r3, [sp, #164]	; 0xa4
9001761e:	9206      	str	r2, [sp, #24]
90017620:	9304      	str	r3, [sp, #16]
90017622:	9b12      	ldr	r3, [sp, #72]	; 0x48
90017624:	f8cd a004 	str.w	sl, [sp, #4]
90017628:	e9cd 7502 	strd	r7, r5, [sp, #8]
9001762c:	4437      	add	r7, r6
9001762e:	9d13      	ldr	r5, [sp, #76]	; 0x4c
90017630:	b23f      	sxth	r7, r7
90017632:	e9cd 0107 	strd	r0, r1, [sp, #28]
90017636:	9700      	str	r7, [sp, #0]
90017638:	9916      	ldr	r1, [sp, #88]	; 0x58
9001763a:	681a      	ldr	r2, [r3, #0]
9001763c:	9811      	ldr	r0, [sp, #68]	; 0x44
9001763e:	685b      	ldr	r3, [r3, #4]
90017640:	47a8      	blx	r5
90017642:	9b0e      	ldr	r3, [sp, #56]	; 0x38
90017644:	3301      	adds	r3, #1
90017646:	930e      	str	r3, [sp, #56]	; 0x38
90017648:	e6e0      	b.n	9001740c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x5c>
9001764a:	2500      	movs	r5, #0
9001764c:	e7cb      	b.n	900175e6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x236>
9001764e:	9d0e      	ldr	r5, [sp, #56]	; 0x38
90017650:	3501      	adds	r5, #1
90017652:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
90017654:	429d      	cmp	r5, r3
90017656:	f6bf af74 	bge.w	90017542 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x192>
9001765a:	4659      	mov	r1, fp
9001765c:	982c      	ldr	r0, [sp, #176]	; 0xb0
9001765e:	f7f0 fd57 	bl	90008110 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
90017662:	4604      	mov	r4, r0
90017664:	b110      	cbz	r0, 9001766c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2bc>
90017666:	280a      	cmp	r0, #10
90017668:	d1f2      	bne.n	90017650 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2a0>
9001766a:	e769      	b.n	90017540 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x190>
9001766c:	2400      	movs	r4, #0
9001766e:	e768      	b.n	90017542 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x192>
90017670:	f1bb 0f00 	cmp.w	fp, #0
90017674:	f43f af59 	beq.w	9001752a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x17a>
90017678:	e774      	b.n	90017564 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b4>

9001767a <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>:
9001767a:	b530      	push	{r4, r5, lr}
9001767c:	8ac4      	ldrh	r4, [r0, #22]
9001767e:	8b45      	ldrh	r5, [r0, #26]
90017680:	8343      	strh	r3, [r0, #26]
90017682:	442c      	add	r4, r5
90017684:	1ae4      	subs	r4, r4, r3
90017686:	8b83      	ldrh	r3, [r0, #28]
90017688:	82c4      	strh	r4, [r0, #22]
9001768a:	8b04      	ldrh	r4, [r0, #24]
9001768c:	4422      	add	r2, r4
9001768e:	440c      	add	r4, r1
90017690:	1a59      	subs	r1, r3, r1
90017692:	83c2      	strh	r2, [r0, #30]
90017694:	8304      	strh	r4, [r0, #24]
90017696:	8381      	strh	r1, [r0, #28]
90017698:	bd30      	pop	{r4, r5, pc}

9001769a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>:
9001769a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001769e:	4604      	mov	r4, r0
900176a0:	8a47      	ldrh	r7, [r0, #18]
900176a2:	68c0      	ldr	r0, [r0, #12]
900176a4:	b085      	sub	sp, #20
900176a6:	6803      	ldr	r3, [r0, #0]
900176a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
900176aa:	4798      	blx	r3
900176ac:	f9b4 6014 	ldrsh.w	r6, [r4, #20]
900176b0:	7a63      	ldrb	r3, [r4, #9]
900176b2:	eb06 0640 	add.w	r6, r6, r0, lsl #1
900176b6:	3b01      	subs	r3, #1
900176b8:	42b7      	cmp	r7, r6
900176ba:	bfac      	ite	ge
900176bc:	f04f 0900 	movge.w	r9, #0
900176c0:	f04f 0901 	movlt.w	r9, #1
900176c4:	2b05      	cmp	r3, #5
900176c6:	d804      	bhi.n	900176d2 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x38>
900176c8:	e8df f003 	tbb	[pc, r3]
900176cc:	470f0854 	.word	0x470f0854
900176d0:	4c4c      	.short	0x4c4c
900176d2:	2500      	movs	r5, #0
900176d4:	46a9      	mov	r9, r5
900176d6:	462e      	mov	r6, r5
900176d8:	462f      	mov	r7, r5
900176da:	e00e      	b.n	900176fa <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x60>
900176dc:	42b7      	cmp	r7, r6
900176de:	f04f 0500 	mov.w	r5, #0
900176e2:	bfb4      	ite	lt
900176e4:	2600      	movlt	r6, #0
900176e6:	2601      	movge	r6, #1
900176e8:	e7f6      	b.n	900176d8 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x3e>
900176ea:	42b7      	cmp	r7, r6
900176ec:	464d      	mov	r5, r9
900176ee:	f04f 0900 	mov.w	r9, #0
900176f2:	bfb4      	ite	lt
900176f4:	2600      	movlt	r6, #0
900176f6:	2601      	movge	r6, #1
900176f8:	464f      	mov	r7, r9
900176fa:	f04f 0800 	mov.w	r8, #0
900176fe:	f8a4 8016 	strh.w	r8, [r4, #22]
90017702:	f8a4 8018 	strh.w	r8, [r4, #24]
90017706:	f8cd 8004 	str.w	r8, [sp, #4]
9001770a:	2300      	movs	r3, #0
9001770c:	9303      	str	r3, [sp, #12]
9001770e:	8823      	ldrh	r3, [r4, #0]
90017710:	2b20      	cmp	r3, #32
90017712:	d033      	beq.n	9001777c <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xe2>
90017714:	f242 010b 	movw	r1, #8203	; 0x200b
90017718:	1a5a      	subs	r2, r3, r1
9001771a:	f1d2 0a00 	rsbs	sl, r2, #0
9001771e:	eb4a 0a02 	adc.w	sl, sl, r2
90017722:	f64f 62ff 	movw	r2, #65279	; 0xfeff
90017726:	4293      	cmp	r3, r2
90017728:	d008      	beq.n	9001773c <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xa2>
9001772a:	428b      	cmp	r3, r1
9001772c:	9a01      	ldr	r2, [sp, #4]
9001772e:	bf0e      	itee	eq
90017730:	f04f 0a01 	moveq.w	sl, #1
90017734:	461a      	movne	r2, r3
90017736:	f04f 0a00 	movne.w	sl, #0
9001773a:	9201      	str	r2, [sp, #4]
9001773c:	ab03      	add	r3, sp, #12
9001773e:	68e2      	ldr	r2, [r4, #12]
90017740:	7a21      	ldrb	r1, [r4, #8]
90017742:	6860      	ldr	r0, [r4, #4]
90017744:	f002 fe22 	bl	9001a38c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
90017748:	8020      	strh	r0, [r4, #0]
9001774a:	b9d8      	cbnz	r0, 90017784 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xea>
9001774c:	8ba2      	ldrh	r2, [r4, #28]
9001774e:	2300      	movs	r3, #0
90017750:	4611      	mov	r1, r2
90017752:	4620      	mov	r0, r4
90017754:	f7ff ff91 	bl	9001767a <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
90017758:	e06e      	b.n	90017838 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x19e>
9001775a:	2500      	movs	r5, #0
9001775c:	2701      	movs	r7, #1
9001775e:	46a9      	mov	r9, r5
90017760:	462e      	mov	r6, r5
90017762:	e7ca      	b.n	900176fa <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x60>
90017764:	42b7      	cmp	r7, r6
90017766:	f04f 0500 	mov.w	r5, #0
9001776a:	bfb4      	ite	lt
9001776c:	2700      	movlt	r7, #0
9001776e:	2701      	movge	r7, #1
90017770:	462e      	mov	r6, r5
90017772:	e7c2      	b.n	900176fa <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x60>
90017774:	2500      	movs	r5, #0
90017776:	2601      	movs	r6, #1
90017778:	46a9      	mov	r9, r5
9001777a:	e7ad      	b.n	900176d8 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x3e>
9001777c:	9301      	str	r3, [sp, #4]
9001777e:	f04f 0a01 	mov.w	sl, #1
90017782:	e7db      	b.n	9001773c <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xa2>
90017784:	8b63      	ldrh	r3, [r4, #26]
90017786:	280a      	cmp	r0, #10
90017788:	f103 0301 	add.w	r3, r3, #1
9001778c:	8363      	strh	r3, [r4, #26]
9001778e:	d0dd      	beq.n	9001774c <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xb2>
90017790:	9a03      	ldr	r2, [sp, #12]
90017792:	bb62      	cbnz	r2, 900177ee <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x154>
90017794:	f64f 63ff 	movw	r3, #65279	; 0xfeff
90017798:	4298      	cmp	r0, r3
9001779a:	d003      	beq.n	900177a4 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x10a>
9001779c:	f242 030b 	movw	r3, #8203	; 0x200b
900177a0:	4298      	cmp	r0, r3
900177a2:	d1b2      	bne.n	9001770a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
900177a4:	8823      	ldrh	r3, [r4, #0]
900177a6:	8ba1      	ldrh	r1, [r4, #28]
900177a8:	2b20      	cmp	r3, #32
900177aa:	d003      	beq.n	900177b4 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x11a>
900177ac:	f242 000b 	movw	r0, #8203	; 0x200b
900177b0:	4283      	cmp	r3, r0
900177b2:	d131      	bne.n	90017818 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x17e>
900177b4:	f1ba 0f00 	cmp.w	sl, #0
900177b8:	bf0a      	itet	eq
900177ba:	4688      	moveq	r8, r1
900177bc:	4650      	movne	r0, sl
900177be:	2001      	moveq	r0, #1
900177c0:	440a      	add	r2, r1
900177c2:	8b23      	ldrh	r3, [r4, #24]
900177c4:	f8b4 c010 	ldrh.w	ip, [r4, #16]
900177c8:	b292      	uxth	r2, r2
900177ca:	83a2      	strh	r2, [r4, #28]
900177cc:	4413      	add	r3, r2
900177ce:	f1b9 0f00 	cmp.w	r9, #0
900177d2:	d102      	bne.n	900177da <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x140>
900177d4:	2d00      	cmp	r5, #0
900177d6:	d042      	beq.n	9001785e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1c4>
900177d8:	b300      	cbz	r0, 9001781c <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x182>
900177da:	8c21      	ldrh	r1, [r4, #32]
900177dc:	4419      	add	r1, r3
900177de:	458c      	cmp	ip, r1
900177e0:	da37      	bge.n	90017852 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1b8>
900177e2:	8ae1      	ldrh	r1, [r4, #22]
900177e4:	2900      	cmp	r1, #0
900177e6:	d034      	beq.n	90017852 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1b8>
900177e8:	4563      	cmp	r3, ip
900177ea:	dd8e      	ble.n	9001770a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
900177ec:	e01d      	b.n	9001782a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x190>
900177ee:	8893      	ldrh	r3, [r2, #4]
900177f0:	9901      	ldr	r1, [sp, #4]
900177f2:	8023      	strh	r3, [r4, #0]
900177f4:	f892 b00d 	ldrb.w	fp, [r2, #13]
900177f8:	ea4f 0b4b 	mov.w	fp, fp, lsl #1
900177fc:	f40b 7080 	and.w	r0, fp, #256	; 0x100
90017800:	f892 b00a 	ldrb.w	fp, [r2, #10]
90017804:	ea4b 0b00 	orr.w	fp, fp, r0
90017808:	68e0      	ldr	r0, [r4, #12]
9001780a:	6803      	ldr	r3, [r0, #0]
9001780c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
9001780e:	4798      	blx	r3
90017810:	eb0b 0200 	add.w	r2, fp, r0
90017814:	b292      	uxth	r2, r2
90017816:	e7c5      	b.n	900177a4 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x10a>
90017818:	2000      	movs	r0, #0
9001781a:	e7d1      	b.n	900177c0 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x126>
9001781c:	4563      	cmp	r3, ip
9001781e:	f77f af74 	ble.w	9001770a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
90017822:	8ae3      	ldrh	r3, [r4, #22]
90017824:	2b00      	cmp	r3, #0
90017826:	f43f af70 	beq.w	9001770a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
9001782a:	2301      	movs	r3, #1
9001782c:	8c22      	ldrh	r2, [r4, #32]
9001782e:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
90017832:	8be3      	ldrh	r3, [r4, #30]
90017834:	4413      	add	r3, r2
90017836:	83e3      	strh	r3, [r4, #30]
90017838:	68e0      	ldr	r0, [r4, #12]
9001783a:	6803      	ldr	r3, [r0, #0]
9001783c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
9001783e:	4798      	blx	r3
90017840:	f9b4 3014 	ldrsh.w	r3, [r4, #20]
90017844:	4418      	add	r0, r3
90017846:	8a63      	ldrh	r3, [r4, #18]
90017848:	1a18      	subs	r0, r3, r0
9001784a:	8260      	strh	r0, [r4, #18]
9001784c:	b005      	add	sp, #20
9001784e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90017852:	2300      	movs	r3, #0
90017854:	4611      	mov	r1, r2
90017856:	4620      	mov	r0, r4
90017858:	f7ff ff0f 	bl	9001767a <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
9001785c:	e755      	b.n	9001770a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
9001785e:	4563      	cmp	r3, ip
90017860:	dd14      	ble.n	9001788c <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1f2>
90017862:	b117      	cbz	r7, 9001786a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1d0>
90017864:	2301      	movs	r3, #1
90017866:	460a      	mov	r2, r1
90017868:	e772      	b.n	90017750 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xb6>
9001786a:	2e00      	cmp	r6, #0
9001786c:	f43f af4d 	beq.w	9001770a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
90017870:	2800      	cmp	r0, #0
90017872:	f47f af4a 	bne.w	9001770a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
90017876:	f1ba 0f00 	cmp.w	sl, #0
9001787a:	d002      	beq.n	90017882 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1e8>
9001787c:	2301      	movs	r3, #1
9001787e:	4642      	mov	r2, r8
90017880:	e767      	b.n	90017752 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xb8>
90017882:	8ae3      	ldrh	r3, [r4, #22]
90017884:	2b00      	cmp	r3, #0
90017886:	f43f af40 	beq.w	9001770a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
9001788a:	e7d5      	b.n	90017838 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x19e>
9001788c:	2800      	cmp	r0, #0
9001788e:	f47f af3c 	bne.w	9001770a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
90017892:	f1ba 0f00 	cmp.w	sl, #0
90017896:	f43f af38 	beq.w	9001770a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
9001789a:	2301      	movs	r3, #1
9001789c:	4642      	mov	r2, r8
9001789e:	e7da      	b.n	90017856 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1bc>

900178a0 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>:
900178a0:	b5f0      	push	{r4, r5, r6, r7, lr}
900178a2:	4605      	mov	r5, r0
900178a4:	b08f      	sub	sp, #60	; 0x3c
900178a6:	4617      	mov	r7, r2
900178a8:	461c      	mov	r4, r3
900178aa:	460e      	mov	r6, r1
900178ac:	b1d1      	cbz	r1, 900178e4 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x44>
900178ae:	681b      	ldr	r3, [r3, #0]
900178b0:	4620      	mov	r0, r4
900178b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
900178b4:	4798      	blx	r3
900178b6:	4240      	negs	r0, r0
900178b8:	9603      	str	r6, [sp, #12]
900178ba:	f64f 73ff 	movw	r3, #65535	; 0xffff
900178be:	b200      	sxth	r0, r0
900178c0:	9700      	str	r7, [sp, #0]
900178c2:	f8bd 2050 	ldrh.w	r2, [sp, #80]	; 0x50
900178c6:	4629      	mov	r1, r5
900178c8:	e9cd 4001 	strd	r4, r0, [sp, #4]
900178cc:	2401      	movs	r4, #1
900178ce:	a805      	add	r0, sp, #20
900178d0:	f7ff fcbe 	bl	90017250 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE>
900178d4:	a805      	add	r0, sp, #20
900178d6:	f7ff fee0 	bl	9001769a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
900178da:	f8bd 3014 	ldrh.w	r3, [sp, #20]
900178de:	b163      	cbz	r3, 900178fa <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x5a>
900178e0:	3401      	adds	r4, #1
900178e2:	e7f7      	b.n	900178d4 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x34>
900178e4:	2401      	movs	r4, #1
900178e6:	f002 fe1d 	bl	9001a524 <_ZN8touchgfx12TextProvider11getNextCharEv>
900178ea:	280a      	cmp	r0, #10
900178ec:	4628      	mov	r0, r5
900178ee:	bf08      	it	eq
900178f0:	3401      	addeq	r4, #1
900178f2:	f002 fe17 	bl	9001a524 <_ZN8touchgfx12TextProvider11getNextCharEv>
900178f6:	2800      	cmp	r0, #0
900178f8:	d1f7      	bne.n	900178ea <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x4a>
900178fa:	b2a0      	uxth	r0, r4
900178fc:	b00f      	add	sp, #60	; 0x3c
900178fe:	bdf0      	pop	{r4, r5, r6, r7, pc}

90017900 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>:
90017900:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90017904:	b0e3      	sub	sp, #396	; 0x18c
90017906:	461c      	mov	r4, r3
90017908:	4683      	mov	fp, r0
9001790a:	4688      	mov	r8, r1
9001790c:	9b6c      	ldr	r3, [sp, #432]	; 0x1b0
9001790e:	2b00      	cmp	r3, #0
90017910:	f000 810f 	beq.w	90017b32 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x232>
90017914:	6823      	ldr	r3, [r4, #0]
90017916:	2b00      	cmp	r3, #0
90017918:	f000 810b 	beq.w	90017b32 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x232>
9001791c:	7ba3      	ldrb	r3, [r4, #14]
9001791e:	2b00      	cmp	r3, #0
90017920:	f000 8107 	beq.w	90017b32 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x232>
90017924:	ad0a      	add	r5, sp, #40	; 0x28
90017926:	6810      	ldr	r0, [r2, #0]
90017928:	6851      	ldr	r1, [r2, #4]
9001792a:	462b      	mov	r3, r5
9001792c:	f9b8 2004 	ldrsh.w	r2, [r8, #4]
90017930:	c303      	stmia	r3!, {r0, r1}
90017932:	2100      	movs	r1, #0
90017934:	f9b8 3006 	ldrsh.w	r3, [r8, #6]
90017938:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
9001793c:	4628      	mov	r0, r5
9001793e:	910c      	str	r1, [sp, #48]	; 0x30
90017940:	a90c      	add	r1, sp, #48	; 0x30
90017942:	79a2      	ldrb	r2, [r4, #6]
90017944:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
90017948:	f7ff fd01 	bl	9001734e <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
9001794c:	a90c      	add	r1, sp, #48	; 0x30
9001794e:	79a2      	ldrb	r2, [r4, #6]
90017950:	4608      	mov	r0, r1
90017952:	f7ff fcfc 	bl	9001734e <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
90017956:	a817      	add	r0, sp, #92	; 0x5c
90017958:	f002 f9b7 	bl	90019cca <_ZN8touchgfx12TextProviderC1Ev>
9001795c:	6820      	ldr	r0, [r4, #0]
9001795e:	6803      	ldr	r3, [r0, #0]
90017960:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
90017962:	4798      	blx	r3
90017964:	4606      	mov	r6, r0
90017966:	6820      	ldr	r0, [r4, #0]
90017968:	6803      	ldr	r3, [r0, #0]
9001796a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
9001796c:	4798      	blx	r3
9001796e:	4633      	mov	r3, r6
90017970:	9a6d      	ldr	r2, [sp, #436]	; 0x1b4
90017972:	996c      	ldr	r1, [sp, #432]	; 0x1b0
90017974:	9000      	str	r0, [sp, #0]
90017976:	a817      	add	r0, sp, #92	; 0x5c
90017978:	f002 fa02 	bl	90019d80 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
9001797c:	6820      	ldr	r0, [r4, #0]
9001797e:	f894 a004 	ldrb.w	sl, [r4, #4]
90017982:	6803      	ldr	r3, [r0, #0]
90017984:	6b9b      	ldr	r3, [r3, #56]	; 0x38
90017986:	4798      	blx	r3
90017988:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
9001798c:	6823      	ldr	r3, [r4, #0]
9001798e:	4607      	mov	r7, r0
90017990:	4406      	add	r6, r0
90017992:	a830      	add	r0, sp, #192	; 0xc0
90017994:	f893 9009 	ldrb.w	r9, [r3, #9]
90017998:	f002 f997 	bl	90019cca <_ZN8touchgfx12TextProviderC1Ev>
9001799c:	7c23      	ldrb	r3, [r4, #16]
9001799e:	b17b      	cbz	r3, 900179c0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xc0>
900179a0:	6820      	ldr	r0, [r4, #0]
900179a2:	6803      	ldr	r3, [r0, #0]
900179a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
900179a6:	4798      	blx	r3
900179a8:	9009      	str	r0, [sp, #36]	; 0x24
900179aa:	6820      	ldr	r0, [r4, #0]
900179ac:	6802      	ldr	r2, [r0, #0]
900179ae:	6d12      	ldr	r2, [r2, #80]	; 0x50
900179b0:	4790      	blx	r2
900179b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
900179b4:	9000      	str	r0, [sp, #0]
900179b6:	a830      	add	r0, sp, #192	; 0xc0
900179b8:	9a6d      	ldr	r2, [sp, #436]	; 0x1b4
900179ba:	996c      	ldr	r1, [sp, #432]	; 0x1b0
900179bc:	f002 f9e0 	bl	90019d80 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
900179c0:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
900179c4:	a80e      	add	r0, sp, #56	; 0x38
900179c6:	7be2      	ldrb	r2, [r4, #15]
900179c8:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
900179cc:	1a8a      	subs	r2, r1, r2
900179ce:	7c21      	ldrb	r1, [r4, #16]
900179d0:	9103      	str	r1, [sp, #12]
900179d2:	b292      	uxth	r2, r2
900179d4:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
900179d8:	9102      	str	r1, [sp, #8]
900179da:	6821      	ldr	r1, [r4, #0]
900179dc:	9101      	str	r1, [sp, #4]
900179de:	7961      	ldrb	r1, [r4, #5]
900179e0:	9100      	str	r1, [sp, #0]
900179e2:	a930      	add	r1, sp, #192	; 0xc0
900179e4:	f7ff fc34 	bl	90017250 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE>
900179e8:	2e00      	cmp	r6, #0
900179ea:	dc5b      	bgt.n	90017aa4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a4>
900179ec:	af17      	add	r7, sp, #92	; 0x5c
900179ee:	f04f 0900 	mov.w	r9, #0
900179f2:	7c23      	ldrb	r3, [r4, #16]
900179f4:	2b00      	cmp	r3, #0
900179f6:	f000 80ae 	beq.w	90017b56 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x256>
900179fa:	a80e      	add	r0, sp, #56	; 0x38
900179fc:	f7ff fe4d 	bl	9001769a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
90017a00:	f1ba 0f00 	cmp.w	sl, #0
90017a04:	f000 80a2 	beq.w	90017b4c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x24c>
90017a08:	7c23      	ldrb	r3, [r4, #16]
90017a0a:	2264      	movs	r2, #100	; 0x64
90017a0c:	4639      	mov	r1, r7
90017a0e:	a849      	add	r0, sp, #292	; 0x124
90017a10:	9309      	str	r3, [sp, #36]	; 0x24
90017a12:	f010 f9b4 	bl	90027d7e <memcpy>
90017a16:	9b09      	ldr	r3, [sp, #36]	; 0x24
90017a18:	2b00      	cmp	r3, #0
90017a1a:	f000 80a4 	beq.w	90017b66 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x266>
90017a1e:	f9bd 3056 	ldrsh.w	r3, [sp, #86]	; 0x56
90017a22:	7922      	ldrb	r2, [r4, #4]
90017a24:	2a01      	cmp	r2, #1
90017a26:	f040 8087 	bne.w	90017b38 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
90017a2a:	f9bd 0034 	ldrsh.w	r0, [sp, #52]	; 0x34
90017a2e:	1ac0      	subs	r0, r0, r3
90017a30:	2302      	movs	r3, #2
90017a32:	fb90 f0f3 	sdiv	r0, r0, r3
90017a36:	b200      	sxth	r0, r0
90017a38:	7c23      	ldrb	r3, [r4, #16]
90017a3a:	2b00      	cmp	r3, #0
90017a3c:	f000 8088 	beq.w	90017b50 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x250>
90017a40:	f8bd 204e 	ldrh.w	r2, [sp, #78]	; 0x4e
90017a44:	f89d 105a 	ldrb.w	r1, [sp, #90]	; 0x5a
90017a48:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
90017a4c:	e9cd 2105 	strd	r2, r1, [sp, #20]
90017a50:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
90017a54:	2100      	movs	r1, #0
90017a56:	4410      	add	r0, r2
90017a58:	4642      	mov	r2, r8
90017a5a:	b200      	sxth	r0, r0
90017a5c:	e9cd 9703 	strd	r9, r7, [sp, #12]
90017a60:	9000      	str	r0, [sp, #0]
90017a62:	4658      	mov	r0, fp
90017a64:	e9cd 5401 	strd	r5, r4, [sp, #4]
90017a68:	f7ff fca2 	bl	900173b0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>
90017a6c:	2800      	cmp	r0, #0
90017a6e:	d160      	bne.n	90017b32 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x232>
90017a70:	b2b2      	uxth	r2, r6
90017a72:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
90017a76:	f8bd 1036 	ldrh.w	r1, [sp, #54]	; 0x36
90017a7a:	4413      	add	r3, r2
90017a7c:	1a8a      	subs	r2, r1, r2
90017a7e:	b21b      	sxth	r3, r3
90017a80:	f8ad 2036 	strh.w	r2, [sp, #54]	; 0x36
90017a84:	f89d 205a 	ldrb.w	r2, [sp, #90]	; 0x5a
90017a88:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
90017a8c:	2a00      	cmp	r2, #0
90017a8e:	d150      	bne.n	90017b32 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x232>
90017a90:	6822      	ldr	r2, [r4, #0]
90017a92:	8869      	ldrh	r1, [r5, #2]
90017a94:	7a12      	ldrb	r2, [r2, #8]
90017a96:	1a9b      	subs	r3, r3, r2
90017a98:	88ea      	ldrh	r2, [r5, #6]
90017a9a:	440a      	add	r2, r1
90017a9c:	b212      	sxth	r2, r2
90017a9e:	4293      	cmp	r3, r2
90017aa0:	dda7      	ble.n	900179f2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xf2>
90017aa2:	e046      	b.n	90017b32 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x232>
90017aa4:	7c23      	ldrb	r3, [r4, #16]
90017aa6:	444f      	add	r7, r9
90017aa8:	b1c3      	cbz	r3, 90017adc <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1dc>
90017aaa:	f64f 79ff 	movw	r9, #65535	; 0xffff
90017aae:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
90017ab2:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
90017ab6:	443b      	add	r3, r7
90017ab8:	4293      	cmp	r3, r2
90017aba:	da97      	bge.n	900179ec <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xec>
90017abc:	a80e      	add	r0, sp, #56	; 0x38
90017abe:	f7ff fdec 	bl	9001769a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
90017ac2:	f8bd 304e 	ldrh.w	r3, [sp, #78]	; 0x4e
90017ac6:	3b01      	subs	r3, #1
90017ac8:	b29b      	uxth	r3, r3
90017aca:	454b      	cmp	r3, r9
90017acc:	9309      	str	r3, [sp, #36]	; 0x24
90017ace:	d021      	beq.n	90017b14 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x214>
90017ad0:	7961      	ldrb	r1, [r4, #5]
90017ad2:	a817      	add	r0, sp, #92	; 0x5c
90017ad4:	f7f0 fb1c 	bl	90008110 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
90017ad8:	9b09      	ldr	r3, [sp, #36]	; 0x24
90017ada:	e7f4      	b.n	90017ac6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1c6>
90017adc:	fa1f f986 	uxth.w	r9, r6
90017ae0:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
90017ae4:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
90017ae8:	443b      	add	r3, r7
90017aea:	4293      	cmp	r3, r2
90017aec:	f6bf af7e 	bge.w	900179ec <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xec>
90017af0:	a817      	add	r0, sp, #92	; 0x5c
90017af2:	f002 fd17 	bl	9001a524 <_ZN8touchgfx12TextProvider11getNextCharEv>
90017af6:	b1e0      	cbz	r0, 90017b32 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x232>
90017af8:	280a      	cmp	r0, #10
90017afa:	d1f1      	bne.n	90017ae0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1e0>
90017afc:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
90017b00:	444b      	add	r3, r9
90017b02:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
90017b06:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
90017b0a:	eba3 0309 	sub.w	r3, r3, r9
90017b0e:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
90017b12:	e7e5      	b.n	90017ae0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1e0>
90017b14:	b2b3      	uxth	r3, r6
90017b16:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
90017b1a:	441a      	add	r2, r3
90017b1c:	f8ad 2032 	strh.w	r2, [sp, #50]	; 0x32
90017b20:	f8bd 2036 	ldrh.w	r2, [sp, #54]	; 0x36
90017b24:	1ad3      	subs	r3, r2, r3
90017b26:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
90017b2a:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
90017b2e:	2b00      	cmp	r3, #0
90017b30:	d1bd      	bne.n	90017aae <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1ae>
90017b32:	b063      	add	sp, #396	; 0x18c
90017b34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90017b38:	2a02      	cmp	r2, #2
90017b3a:	d105      	bne.n	90017b48 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x248>
90017b3c:	7be2      	ldrb	r2, [r4, #15]
90017b3e:	f8bd 0034 	ldrh.w	r0, [sp, #52]	; 0x34
90017b42:	1a80      	subs	r0, r0, r2
90017b44:	1ac0      	subs	r0, r0, r3
90017b46:	e776      	b.n	90017a36 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x136>
90017b48:	2000      	movs	r0, #0
90017b4a:	e775      	b.n	90017a38 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x138>
90017b4c:	7be0      	ldrb	r0, [r4, #15]
90017b4e:	e773      	b.n	90017a38 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x138>
90017b50:	f647 72ff 	movw	r2, #32767	; 0x7fff
90017b54:	e776      	b.n	90017a44 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x144>
90017b56:	f1ba 0f00 	cmp.w	sl, #0
90017b5a:	d0f7      	beq.n	90017b4c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x24c>
90017b5c:	2264      	movs	r2, #100	; 0x64
90017b5e:	4639      	mov	r1, r7
90017b60:	a849      	add	r0, sp, #292	; 0x124
90017b62:	f010 f90c 	bl	90027d7e <memcpy>
90017b66:	2300      	movs	r3, #0
90017b68:	f647 72ff 	movw	r2, #32767	; 0x7fff
90017b6c:	6821      	ldr	r1, [r4, #0]
90017b6e:	a849      	add	r0, sp, #292	; 0x124
90017b70:	f7ff fbb1 	bl	900172d6 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
90017b74:	b203      	sxth	r3, r0
90017b76:	e754      	b.n	90017a22 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x122>

90017b78 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>:
90017b78:	2b03      	cmp	r3, #3
90017b7a:	d818      	bhi.n	90017bae <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x36>
90017b7c:	e8df f003 	tbb	[pc, r3]
90017b80:	130d0602 	.word	0x130d0602
90017b84:	f9b0 2000 	ldrsh.w	r2, [r0]
90017b88:	1850      	adds	r0, r2, r1
90017b8a:	4770      	bx	lr
90017b8c:	8803      	ldrh	r3, [r0, #0]
90017b8e:	8880      	ldrh	r0, [r0, #4]
90017b90:	4418      	add	r0, r3
90017b92:	b200      	sxth	r0, r0
90017b94:	1a80      	subs	r0, r0, r2
90017b96:	3801      	subs	r0, #1
90017b98:	4770      	bx	lr
90017b9a:	8803      	ldrh	r3, [r0, #0]
90017b9c:	8880      	ldrh	r0, [r0, #4]
90017b9e:	4418      	add	r0, r3
90017ba0:	b200      	sxth	r0, r0
90017ba2:	1a40      	subs	r0, r0, r1
90017ba4:	e7f7      	b.n	90017b96 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x1e>
90017ba6:	f9b0 0000 	ldrsh.w	r0, [r0]
90017baa:	4410      	add	r0, r2
90017bac:	4770      	bx	lr
90017bae:	2000      	movs	r0, #0
90017bb0:	4770      	bx	lr

90017bb2 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>:
90017bb2:	2b03      	cmp	r3, #3
90017bb4:	d817      	bhi.n	90017be6 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x34>
90017bb6:	e8df f003 	tbb	[pc, r3]
90017bba:	0602      	.short	0x0602
90017bbc:	1009      	.short	0x1009
90017bbe:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
90017bc2:	1850      	adds	r0, r2, r1
90017bc4:	4770      	bx	lr
90017bc6:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
90017bca:	e7fa      	b.n	90017bc2 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x10>
90017bcc:	8843      	ldrh	r3, [r0, #2]
90017bce:	88c0      	ldrh	r0, [r0, #6]
90017bd0:	4418      	add	r0, r3
90017bd2:	b200      	sxth	r0, r0
90017bd4:	1a80      	subs	r0, r0, r2
90017bd6:	3801      	subs	r0, #1
90017bd8:	4770      	bx	lr
90017bda:	8843      	ldrh	r3, [r0, #2]
90017bdc:	88c0      	ldrh	r0, [r0, #6]
90017bde:	4418      	add	r0, r3
90017be0:	b200      	sxth	r0, r0
90017be2:	1a40      	subs	r0, r0, r1
90017be4:	e7f7      	b.n	90017bd6 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x24>
90017be6:	2000      	movs	r0, #0
90017be8:	4770      	bx	lr
	...

90017bec <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE>:
90017bec:	4b01      	ldr	r3, [pc, #4]	; (90017bf4 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE+0x8>)
90017bee:	2200      	movs	r2, #0
90017bf0:	601a      	str	r2, [r3, #0]
90017bf2:	4770      	bx	lr
90017bf4:	240281fc 	.word	0x240281fc

90017bf8 <_ZN8touchgfx16TouchCalibration4clzuEm>:
90017bf8:	4603      	mov	r3, r0
90017bfa:	b1c8      	cbz	r0, 90017c30 <_ZN8touchgfx16TouchCalibration4clzuEm+0x38>
90017bfc:	0c02      	lsrs	r2, r0, #16
90017bfe:	0412      	lsls	r2, r2, #16
90017c00:	b9a2      	cbnz	r2, 90017c2c <_ZN8touchgfx16TouchCalibration4clzuEm+0x34>
90017c02:	0403      	lsls	r3, r0, #16
90017c04:	2010      	movs	r0, #16
90017c06:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
90017c0a:	bf04      	itt	eq
90017c0c:	021b      	lsleq	r3, r3, #8
90017c0e:	3008      	addeq	r0, #8
90017c10:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
90017c14:	bf04      	itt	eq
90017c16:	011b      	lsleq	r3, r3, #4
90017c18:	3004      	addeq	r0, #4
90017c1a:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
90017c1e:	bf04      	itt	eq
90017c20:	009b      	lsleq	r3, r3, #2
90017c22:	3002      	addeq	r0, #2
90017c24:	2b00      	cmp	r3, #0
90017c26:	db04      	blt.n	90017c32 <_ZN8touchgfx16TouchCalibration4clzuEm+0x3a>
90017c28:	3001      	adds	r0, #1
90017c2a:	4770      	bx	lr
90017c2c:	2000      	movs	r0, #0
90017c2e:	e7ea      	b.n	90017c06 <_ZN8touchgfx16TouchCalibration4clzuEm+0xe>
90017c30:	2020      	movs	r0, #32
90017c32:	4770      	bx	lr

90017c34 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>:
90017c34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90017c38:	b087      	sub	sp, #28
90017c3a:	4681      	mov	r9, r0
90017c3c:	4698      	mov	r8, r3
90017c3e:	4610      	mov	r0, r2
90017c40:	460d      	mov	r5, r1
90017c42:	e9dd 4710 	ldrd	r4, r7, [sp, #64]	; 0x40
90017c46:	b981      	cbnz	r1, 90017c6a <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x36>
90017c48:	b14b      	cbz	r3, 90017c5e <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x2a>
90017c4a:	460b      	mov	r3, r1
90017c4c:	464a      	mov	r2, r9
90017c4e:	4641      	mov	r1, r8
90017c50:	e9cd 4700 	strd	r4, r7, [sp]
90017c54:	f7ff ffee 	bl	90017c34 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
90017c58:	b007      	add	sp, #28
90017c5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90017c5e:	f04f 33ff 	mov.w	r3, #4294967295
90017c62:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
90017c66:	603b      	str	r3, [r7, #0]
90017c68:	e7f6      	b.n	90017c58 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>
90017c6a:	fa32 fa01 	lsrs.w	sl, r2, r1
90017c6e:	d107      	bne.n	90017c80 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x4c>
90017c70:	fb09 f602 	mul.w	r6, r9, r2
90017c74:	fbb6 f0f4 	udiv	r0, r6, r4
90017c78:	fb04 6610 	mls	r6, r4, r0, r6
90017c7c:	603e      	str	r6, [r7, #0]
90017c7e:	e7eb      	b.n	90017c58 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>
90017c80:	2601      	movs	r6, #1
90017c82:	fa09 fb01 	lsl.w	fp, r9, r1
90017c86:	408e      	lsls	r6, r1
90017c88:	fbbb f3f4 	udiv	r3, fp, r4
90017c8c:	3e01      	subs	r6, #1
90017c8e:	9302      	str	r3, [sp, #8]
90017c90:	fb0a f303 	mul.w	r3, sl, r3
90017c94:	4016      	ands	r6, r2
90017c96:	9303      	str	r3, [sp, #12]
90017c98:	4630      	mov	r0, r6
90017c9a:	f7ff ffad 	bl	90017bf8 <_ZN8touchgfx16TouchCalibration4clzuEm>
90017c9e:	464a      	mov	r2, r9
90017ca0:	460b      	mov	r3, r1
90017ca2:	4601      	mov	r1, r0
90017ca4:	4630      	mov	r0, r6
90017ca6:	e9cd 4700 	strd	r4, r7, [sp]
90017caa:	f7ff ffc3 	bl	90017c34 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
90017cae:	9b02      	ldr	r3, [sp, #8]
90017cb0:	4606      	mov	r6, r0
90017cb2:	eb05 0108 	add.w	r1, r5, r8
90017cb6:	fb04 bb13 	mls	fp, r4, r3, fp
90017cba:	4658      	mov	r0, fp
90017cbc:	f7ff ff9c 	bl	90017bf8 <_ZN8touchgfx16TouchCalibration4clzuEm>
90017cc0:	ab05      	add	r3, sp, #20
90017cc2:	465a      	mov	r2, fp
90017cc4:	e9cd 4300 	strd	r4, r3, [sp]
90017cc8:	4603      	mov	r3, r0
90017cca:	4650      	mov	r0, sl
90017ccc:	f7ff ffb2 	bl	90017c34 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
90017cd0:	6839      	ldr	r1, [r7, #0]
90017cd2:	9a05      	ldr	r2, [sp, #20]
90017cd4:	9b03      	ldr	r3, [sp, #12]
90017cd6:	4411      	add	r1, r2
90017cd8:	fbb1 f2f4 	udiv	r2, r1, r4
90017cdc:	18d3      	adds	r3, r2, r3
90017cde:	fb04 1412 	mls	r4, r4, r2, r1
90017ce2:	441e      	add	r6, r3
90017ce4:	603c      	str	r4, [r7, #0]
90017ce6:	4430      	add	r0, r6
90017ce8:	e7b6      	b.n	90017c58 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>

90017cea <_ZN8touchgfx16TouchCalibration6muldivEllllRl>:
90017cea:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
90017cee:	b085      	sub	sp, #20
90017cf0:	f1b0 0900 	subs.w	r9, r0, #0
90017cf4:	461d      	mov	r5, r3
90017cf6:	4617      	mov	r7, r2
90017cf8:	9c0c      	ldr	r4, [sp, #48]	; 0x30
90017cfa:	bfbb      	ittet	lt
90017cfc:	f1c9 0900 	rsblt	r9, r9, #0
90017d00:	f04f 36ff 	movlt.w	r6, #4294967295
90017d04:	2601      	movge	r6, #1
90017d06:	6823      	ldrlt	r3, [r4, #0]
90017d08:	bfbc      	itt	lt
90017d0a:	425b      	neglt	r3, r3
90017d0c:	6023      	strlt	r3, [r4, #0]
90017d0e:	2a00      	cmp	r2, #0
90017d10:	da04      	bge.n	90017d1c <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x32>
90017d12:	6823      	ldr	r3, [r4, #0]
90017d14:	4257      	negs	r7, r2
90017d16:	4276      	negs	r6, r6
90017d18:	425b      	negs	r3, r3
90017d1a:	6023      	str	r3, [r4, #0]
90017d1c:	2d00      	cmp	r5, #0
90017d1e:	4638      	mov	r0, r7
90017d20:	bfba      	itte	lt
90017d22:	426d      	neglt	r5, r5
90017d24:	f04f 38ff 	movlt.w	r8, #4294967295
90017d28:	f04f 0801 	movge.w	r8, #1
90017d2c:	f7ff ff64 	bl	90017bf8 <_ZN8touchgfx16TouchCalibration4clzuEm>
90017d30:	ab03      	add	r3, sp, #12
90017d32:	463a      	mov	r2, r7
90017d34:	e9cd 5300 	strd	r5, r3, [sp]
90017d38:	4603      	mov	r3, r0
90017d3a:	4648      	mov	r0, r9
90017d3c:	f7ff ff7a 	bl	90017c34 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
90017d40:	6823      	ldr	r3, [r4, #0]
90017d42:	9a03      	ldr	r2, [sp, #12]
90017d44:	4546      	cmp	r6, r8
90017d46:	441a      	add	r2, r3
90017d48:	fb92 f3f5 	sdiv	r3, r2, r5
90017d4c:	4418      	add	r0, r3
90017d4e:	fb05 2313 	mls	r3, r5, r3, r2
90017d52:	bf18      	it	ne
90017d54:	4240      	negne	r0, r0
90017d56:	1c72      	adds	r2, r6, #1
90017d58:	6023      	str	r3, [r4, #0]
90017d5a:	d105      	bne.n	90017d68 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7e>
90017d5c:	2b00      	cmp	r3, #0
90017d5e:	f1c3 0200 	rsb	r2, r3, #0
90017d62:	db0b      	blt.n	90017d7c <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x92>
90017d64:	6022      	str	r2, [r4, #0]
90017d66:	e006      	b.n	90017d76 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
90017d68:	2e01      	cmp	r6, #1
90017d6a:	d104      	bne.n	90017d76 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
90017d6c:	2b00      	cmp	r3, #0
90017d6e:	da02      	bge.n	90017d76 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
90017d70:	442b      	add	r3, r5
90017d72:	3801      	subs	r0, #1
90017d74:	6023      	str	r3, [r4, #0]
90017d76:	b005      	add	sp, #20
90017d78:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
90017d7c:	3801      	subs	r0, #1
90017d7e:	1b52      	subs	r2, r2, r5
90017d80:	e7f0      	b.n	90017d64 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7a>
	...

90017d84 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>:
90017d84:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
90017d88:	4c1c      	ldr	r4, [pc, #112]	; (90017dfc <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x78>)
90017d8a:	4605      	mov	r5, r0
90017d8c:	6807      	ldr	r7, [r0, #0]
90017d8e:	69a3      	ldr	r3, [r4, #24]
90017d90:	b92b      	cbnz	r3, 90017d9e <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x1a>
90017d92:	6840      	ldr	r0, [r0, #4]
90017d94:	e9c5 7000 	strd	r7, r0, [r5]
90017d98:	b004      	add	sp, #16
90017d9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
90017d9e:	f04f 0802 	mov.w	r8, #2
90017da2:	68a2      	ldr	r2, [r4, #8]
90017da4:	ae04      	add	r6, sp, #16
90017da6:	6820      	ldr	r0, [r4, #0]
90017da8:	fb93 f1f8 	sdiv	r1, r3, r8
90017dac:	440a      	add	r2, r1
90017dae:	69e1      	ldr	r1, [r4, #28]
90017db0:	f846 2d04 	str.w	r2, [r6, #-4]!
90017db4:	463a      	mov	r2, r7
90017db6:	9600      	str	r6, [sp, #0]
90017db8:	f7ff ff97 	bl	90017cea <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
90017dbc:	69a3      	ldr	r3, [r4, #24]
90017dbe:	4607      	mov	r7, r0
90017dc0:	686a      	ldr	r2, [r5, #4]
90017dc2:	6a21      	ldr	r1, [r4, #32]
90017dc4:	9600      	str	r6, [sp, #0]
90017dc6:	6860      	ldr	r0, [r4, #4]
90017dc8:	f7ff ff8f 	bl	90017cea <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
90017dcc:	69a3      	ldr	r3, [r4, #24]
90017dce:	6962      	ldr	r2, [r4, #20]
90017dd0:	4407      	add	r7, r0
90017dd2:	6a61      	ldr	r1, [r4, #36]	; 0x24
90017dd4:	9600      	str	r6, [sp, #0]
90017dd6:	68e0      	ldr	r0, [r4, #12]
90017dd8:	fb93 f8f8 	sdiv	r8, r3, r8
90017ddc:	4442      	add	r2, r8
90017dde:	9203      	str	r2, [sp, #12]
90017de0:	682a      	ldr	r2, [r5, #0]
90017de2:	f7ff ff82 	bl	90017cea <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
90017de6:	4680      	mov	r8, r0
90017de8:	9600      	str	r6, [sp, #0]
90017dea:	69a3      	ldr	r3, [r4, #24]
90017dec:	686a      	ldr	r2, [r5, #4]
90017dee:	6aa1      	ldr	r1, [r4, #40]	; 0x28
90017df0:	6920      	ldr	r0, [r4, #16]
90017df2:	f7ff ff7a 	bl	90017cea <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
90017df6:	4440      	add	r0, r8
90017df8:	e7cc      	b.n	90017d94 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x10>
90017dfa:	bf00      	nop
90017dfc:	24028200 	.word	0x24028200

90017e00 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>:
90017e00:	4b07      	ldr	r3, [pc, #28]	; (90017e20 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x20>)
90017e02:	781b      	ldrb	r3, [r3, #0]
90017e04:	2b01      	cmp	r3, #1
90017e06:	d109      	bne.n	90017e1c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x1c>
90017e08:	f9b1 3000 	ldrsh.w	r3, [r1]
90017e0c:	f9b0 2000 	ldrsh.w	r2, [r0]
90017e10:	8003      	strh	r3, [r0, #0]
90017e12:	4b04      	ldr	r3, [pc, #16]	; (90017e24 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x24>)
90017e14:	881b      	ldrh	r3, [r3, #0]
90017e16:	3b01      	subs	r3, #1
90017e18:	1a9b      	subs	r3, r3, r2
90017e1a:	800b      	strh	r3, [r1, #0]
90017e1c:	4770      	bx	lr
90017e1e:	bf00      	nop
90017e20:	240281e4 	.word	0x240281e4
90017e24:	240281e0 	.word	0x240281e0

90017e28 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>:
90017e28:	4b07      	ldr	r3, [pc, #28]	; (90017e48 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x20>)
90017e2a:	b510      	push	{r4, lr}
90017e2c:	781b      	ldrb	r3, [r3, #0]
90017e2e:	2b01      	cmp	r3, #1
90017e30:	d108      	bne.n	90017e44 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x1c>
90017e32:	4b06      	ldr	r3, [pc, #24]	; (90017e4c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x24>)
90017e34:	880c      	ldrh	r4, [r1, #0]
90017e36:	881b      	ldrh	r3, [r3, #0]
90017e38:	f9b0 2000 	ldrsh.w	r2, [r0]
90017e3c:	3b01      	subs	r3, #1
90017e3e:	1b1b      	subs	r3, r3, r4
90017e40:	8003      	strh	r3, [r0, #0]
90017e42:	800a      	strh	r2, [r1, #0]
90017e44:	bd10      	pop	{r4, pc}
90017e46:	bf00      	nop
90017e48:	240281e4 	.word	0x240281e4
90017e4c:	240281e0 	.word	0x240281e0

90017e50 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>:
90017e50:	4b0a      	ldr	r3, [pc, #40]	; (90017e7c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x2c>)
90017e52:	b510      	push	{r4, lr}
90017e54:	781b      	ldrb	r3, [r3, #0]
90017e56:	2b01      	cmp	r3, #1
90017e58:	d10e      	bne.n	90017e78 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x28>
90017e5a:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
90017e5e:	8843      	ldrh	r3, [r0, #2]
90017e60:	f9b0 4000 	ldrsh.w	r4, [r0]
90017e64:	18ca      	adds	r2, r1, r3
90017e66:	4b06      	ldr	r3, [pc, #24]	; (90017e80 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x30>)
90017e68:	8044      	strh	r4, [r0, #2]
90017e6a:	881b      	ldrh	r3, [r3, #0]
90017e6c:	1a9b      	subs	r3, r3, r2
90017e6e:	8003      	strh	r3, [r0, #0]
90017e70:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
90017e74:	8081      	strh	r1, [r0, #4]
90017e76:	80c3      	strh	r3, [r0, #6]
90017e78:	bd10      	pop	{r4, pc}
90017e7a:	bf00      	nop
90017e7c:	240281e4 	.word	0x240281e4
90017e80:	240281e0 	.word	0x240281e0

90017e84 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>:
90017e84:	4b08      	ldr	r3, [pc, #32]	; (90017ea8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x24>)
90017e86:	781b      	ldrb	r3, [r3, #0]
90017e88:	2b01      	cmp	r3, #1
90017e8a:	d10c      	bne.n	90017ea6 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x22>
90017e8c:	8803      	ldrh	r3, [r0, #0]
90017e8e:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
90017e92:	8842      	ldrh	r2, [r0, #2]
90017e94:	8002      	strh	r2, [r0, #0]
90017e96:	185a      	adds	r2, r3, r1
90017e98:	4b04      	ldr	r3, [pc, #16]	; (90017eac <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x28>)
90017e9a:	881b      	ldrh	r3, [r3, #0]
90017e9c:	1a9b      	subs	r3, r3, r2
90017e9e:	8043      	strh	r3, [r0, #2]
90017ea0:	88c3      	ldrh	r3, [r0, #6]
90017ea2:	80c1      	strh	r1, [r0, #6]
90017ea4:	8083      	strh	r3, [r0, #4]
90017ea6:	4770      	bx	lr
90017ea8:	240281e4 	.word	0x240281e4
90017eac:	240281e0 	.word	0x240281e0

90017eb0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>:
90017eb0:	4b07      	ldr	r3, [pc, #28]	; (90017ed0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x20>)
90017eb2:	b510      	push	{r4, lr}
90017eb4:	781b      	ldrb	r3, [r3, #0]
90017eb6:	2b01      	cmp	r3, #1
90017eb8:	d108      	bne.n	90017ecc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x1c>
90017eba:	f9b1 3000 	ldrsh.w	r3, [r1]
90017ebe:	f9b0 4000 	ldrsh.w	r4, [r0]
90017ec2:	8003      	strh	r3, [r0, #0]
90017ec4:	8893      	ldrh	r3, [r2, #4]
90017ec6:	3b01      	subs	r3, #1
90017ec8:	1b1b      	subs	r3, r3, r4
90017eca:	800b      	strh	r3, [r1, #0]
90017ecc:	bd10      	pop	{r4, pc}
90017ece:	bf00      	nop
90017ed0:	240281e4 	.word	0x240281e4

90017ed4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>:
90017ed4:	4b0a      	ldr	r3, [pc, #40]	; (90017f00 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x2c>)
90017ed6:	460a      	mov	r2, r1
90017ed8:	b510      	push	{r4, lr}
90017eda:	781b      	ldrb	r3, [r3, #0]
90017edc:	2b01      	cmp	r3, #1
90017ede:	d10d      	bne.n	90017efc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x28>
90017ee0:	8881      	ldrh	r1, [r0, #4]
90017ee2:	8803      	ldrh	r3, [r0, #0]
90017ee4:	440b      	add	r3, r1
90017ee6:	4601      	mov	r1, r0
90017ee8:	3b01      	subs	r3, #1
90017eea:	f821 3b02 	strh.w	r3, [r1], #2
90017eee:	f7ff ffdf 	bl	90017eb0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
90017ef2:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
90017ef6:	88c2      	ldrh	r2, [r0, #6]
90017ef8:	80c3      	strh	r3, [r0, #6]
90017efa:	8082      	strh	r2, [r0, #4]
90017efc:	bd10      	pop	{r4, pc}
90017efe:	bf00      	nop
90017f00:	240281e4 	.word	0x240281e4

90017f04 <_ZN8touchgfx11Application19changeToStartScreenEv>:
90017f04:	4770      	bx	lr
	...

90017f08 <_ZN8touchgfx11Application13requestRedrawEv>:
90017f08:	4b06      	ldr	r3, [pc, #24]	; (90017f24 <_ZN8touchgfx11Application13requestRedrawEv+0x1c>)
90017f0a:	2100      	movs	r1, #0
90017f0c:	f9b3 2000 	ldrsh.w	r2, [r3]
90017f10:	4b05      	ldr	r3, [pc, #20]	; (90017f28 <_ZN8touchgfx11Application13requestRedrawEv+0x20>)
90017f12:	f8c0 1130 	str.w	r1, [r0, #304]	; 0x130
90017f16:	f9b3 3000 	ldrsh.w	r3, [r3]
90017f1a:	f8a0 2134 	strh.w	r2, [r0, #308]	; 0x134
90017f1e:	f8a0 3136 	strh.w	r3, [r0, #310]	; 0x136
90017f22:	4770      	bx	lr
90017f24:	240281e0 	.word	0x240281e0
90017f28:	240281e2 	.word	0x240281e2

90017f2c <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE>:
90017f2c:	4b03      	ldr	r3, [pc, #12]	; (90017f3c <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0x10>)
90017f2e:	6818      	ldr	r0, [r3, #0]
90017f30:	b110      	cbz	r0, 90017f38 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0xc>
90017f32:	6803      	ldr	r3, [r0, #0]
90017f34:	699b      	ldr	r3, [r3, #24]
90017f36:	4718      	bx	r3
90017f38:	4770      	bx	lr
90017f3a:	bf00      	nop
90017f3c:	24028230 	.word	0x24028230

90017f40 <_ZN8touchgfx11Application29handlePendingScreenTransitionEv>:
90017f40:	4770      	bx	lr
	...

90017f44 <_ZN8touchgfx11Application4drawEv>:
90017f44:	4b09      	ldr	r3, [pc, #36]	; (90017f6c <_ZN8touchgfx11Application4drawEv+0x28>)
90017f46:	b507      	push	{r0, r1, r2, lr}
90017f48:	f9b3 2000 	ldrsh.w	r2, [r3]
90017f4c:	2100      	movs	r1, #0
90017f4e:	4b08      	ldr	r3, [pc, #32]	; (90017f70 <_ZN8touchgfx11Application4drawEv+0x2c>)
90017f50:	9100      	str	r1, [sp, #0]
90017f52:	4669      	mov	r1, sp
90017f54:	f9b3 3000 	ldrsh.w	r3, [r3]
90017f58:	f8ad 2004 	strh.w	r2, [sp, #4]
90017f5c:	f8ad 3006 	strh.w	r3, [sp, #6]
90017f60:	6803      	ldr	r3, [r0, #0]
90017f62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
90017f64:	4798      	blx	r3
90017f66:	b003      	add	sp, #12
90017f68:	f85d fb04 	ldr.w	pc, [sp], #4
90017f6c:	240281e0 	.word	0x240281e0
90017f70:	240281e2 	.word	0x240281e2

90017f74 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE>:
90017f74:	4b03      	ldr	r3, [pc, #12]	; (90017f84 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0x10>)
90017f76:	6818      	ldr	r0, [r3, #0]
90017f78:	b110      	cbz	r0, 90017f80 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0xc>
90017f7a:	6803      	ldr	r3, [r0, #0]
90017f7c:	69db      	ldr	r3, [r3, #28]
90017f7e:	4718      	bx	r3
90017f80:	4770      	bx	lr
90017f82:	bf00      	nop
90017f84:	24028230 	.word	0x24028230

90017f88 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE>:
90017f88:	4b03      	ldr	r3, [pc, #12]	; (90017f98 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0x10>)
90017f8a:	6818      	ldr	r0, [r3, #0]
90017f8c:	b110      	cbz	r0, 90017f94 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0xc>
90017f8e:	6803      	ldr	r3, [r0, #0]
90017f90:	6a1b      	ldr	r3, [r3, #32]
90017f92:	4718      	bx	r3
90017f94:	4770      	bx	lr
90017f96:	bf00      	nop
90017f98:	24028230 	.word	0x24028230

90017f9c <_ZN8touchgfx11Application16clearCachedAreasEv>:
90017f9c:	2300      	movs	r3, #0
90017f9e:	f8a0 30ec 	strh.w	r3, [r0, #236]	; 0xec
90017fa2:	4770      	bx	lr

90017fa4 <_ZN8touchgfx11Application14handleKeyEventEh>:
90017fa4:	4b03      	ldr	r3, [pc, #12]	; (90017fb4 <_ZN8touchgfx11Application14handleKeyEventEh+0x10>)
90017fa6:	6818      	ldr	r0, [r3, #0]
90017fa8:	b110      	cbz	r0, 90017fb0 <_ZN8touchgfx11Application14handleKeyEventEh+0xc>
90017faa:	6803      	ldr	r3, [r0, #0]
90017fac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
90017fae:	4718      	bx	r3
90017fb0:	4770      	bx	lr
90017fb2:	bf00      	nop
90017fb4:	24028230 	.word	0x24028230

90017fb8 <_ZN8touchgfx11ApplicationD1Ev>:
90017fb8:	4770      	bx	lr

90017fba <_ZN8touchgfx11ApplicationD0Ev>:
90017fba:	b510      	push	{r4, lr}
90017fbc:	4604      	mov	r4, r0
90017fbe:	f44f 719e 	mov.w	r1, #316	; 0x13c
90017fc2:	f00f fb18 	bl	900275f6 <_ZdlPvj>
90017fc6:	4620      	mov	r0, r4
90017fc8:	bd10      	pop	{r4, pc}

90017fca <_ZNK8touchgfx4Rect9intersectERKS0_>:
90017fca:	b510      	push	{r4, lr}
90017fcc:	f9b1 4000 	ldrsh.w	r4, [r1]
90017fd0:	888a      	ldrh	r2, [r1, #4]
90017fd2:	f9b0 3000 	ldrsh.w	r3, [r0]
90017fd6:	4422      	add	r2, r4
90017fd8:	b212      	sxth	r2, r2
90017fda:	4293      	cmp	r3, r2
90017fdc:	da15      	bge.n	9001800a <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
90017fde:	8882      	ldrh	r2, [r0, #4]
90017fe0:	4413      	add	r3, r2
90017fe2:	b21b      	sxth	r3, r3
90017fe4:	429c      	cmp	r4, r3
90017fe6:	da10      	bge.n	9001800a <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
90017fe8:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
90017fec:	88c9      	ldrh	r1, [r1, #6]
90017fee:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
90017ff2:	4419      	add	r1, r3
90017ff4:	b209      	sxth	r1, r1
90017ff6:	428a      	cmp	r2, r1
90017ff8:	da07      	bge.n	9001800a <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
90017ffa:	88c0      	ldrh	r0, [r0, #6]
90017ffc:	4410      	add	r0, r2
90017ffe:	b200      	sxth	r0, r0
90018000:	4283      	cmp	r3, r0
90018002:	bfac      	ite	ge
90018004:	2000      	movge	r0, #0
90018006:	2001      	movlt	r0, #1
90018008:	bd10      	pop	{r4, pc}
9001800a:	2000      	movs	r0, #0
9001800c:	e7fc      	b.n	90018008 <_ZNK8touchgfx4Rect9intersectERKS0_+0x3e>

9001800e <_ZN8touchgfx4Rect10restrictToEss>:
9001800e:	f9b0 3000 	ldrsh.w	r3, [r0]
90018012:	2b00      	cmp	r3, #0
90018014:	b510      	push	{r4, lr}
90018016:	da04      	bge.n	90018022 <_ZN8touchgfx4Rect10restrictToEss+0x14>
90018018:	8884      	ldrh	r4, [r0, #4]
9001801a:	4423      	add	r3, r4
9001801c:	8083      	strh	r3, [r0, #4]
9001801e:	2300      	movs	r3, #0
90018020:	8003      	strh	r3, [r0, #0]
90018022:	f9b0 4000 	ldrsh.w	r4, [r0]
90018026:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
9001802a:	1b09      	subs	r1, r1, r4
9001802c:	428b      	cmp	r3, r1
9001802e:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
90018032:	bfc8      	it	gt
90018034:	8081      	strhgt	r1, [r0, #4]
90018036:	2b00      	cmp	r3, #0
90018038:	da04      	bge.n	90018044 <_ZN8touchgfx4Rect10restrictToEss+0x36>
9001803a:	88c1      	ldrh	r1, [r0, #6]
9001803c:	440b      	add	r3, r1
9001803e:	80c3      	strh	r3, [r0, #6]
90018040:	2300      	movs	r3, #0
90018042:	8043      	strh	r3, [r0, #2]
90018044:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
90018048:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
9001804c:	1a52      	subs	r2, r2, r1
9001804e:	4293      	cmp	r3, r2
90018050:	bfc8      	it	gt
90018052:	80c2      	strhgt	r2, [r0, #6]
90018054:	bd10      	pop	{r4, pc}
	...

90018058 <_ZN8touchgfx11Application4drawERNS_4RectE>:
90018058:	4b10      	ldr	r3, [pc, #64]	; (9001809c <_ZN8touchgfx11Application4drawERNS_4RectE+0x44>)
9001805a:	b510      	push	{r4, lr}
9001805c:	460c      	mov	r4, r1
9001805e:	f9b3 2000 	ldrsh.w	r2, [r3]
90018062:	4b0f      	ldr	r3, [pc, #60]	; (900180a0 <_ZN8touchgfx11Application4drawERNS_4RectE+0x48>)
90018064:	4620      	mov	r0, r4
90018066:	f9b3 1000 	ldrsh.w	r1, [r3]
9001806a:	f7ff ffd0 	bl	9001800e <_ZN8touchgfx4Rect10restrictToEss>
9001806e:	4b0d      	ldr	r3, [pc, #52]	; (900180a4 <_ZN8touchgfx11Application4drawERNS_4RectE+0x4c>)
90018070:	6818      	ldr	r0, [r3, #0]
90018072:	b190      	cbz	r0, 9001809a <_ZN8touchgfx11Application4drawERNS_4RectE+0x42>
90018074:	6803      	ldr	r3, [r0, #0]
90018076:	4621      	mov	r1, r4
90018078:	689b      	ldr	r3, [r3, #8]
9001807a:	4798      	blx	r3
9001807c:	4b0a      	ldr	r3, [pc, #40]	; (900180a8 <_ZN8touchgfx11Application4drawERNS_4RectE+0x50>)
9001807e:	6818      	ldr	r0, [r3, #0]
90018080:	b118      	cbz	r0, 9001808a <_ZN8touchgfx11Application4drawERNS_4RectE+0x32>
90018082:	6803      	ldr	r3, [r0, #0]
90018084:	4621      	mov	r1, r4
90018086:	689b      	ldr	r3, [r3, #8]
90018088:	4798      	blx	r3
9001808a:	4b08      	ldr	r3, [pc, #32]	; (900180ac <_ZN8touchgfx11Application4drawERNS_4RectE+0x54>)
9001808c:	4621      	mov	r1, r4
9001808e:	6818      	ldr	r0, [r3, #0]
90018090:	6803      	ldr	r3, [r0, #0]
90018092:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
90018096:	69db      	ldr	r3, [r3, #28]
90018098:	4718      	bx	r3
9001809a:	bd10      	pop	{r4, pc}
9001809c:	240281e2 	.word	0x240281e2
900180a0:	240281e0 	.word	0x240281e0
900180a4:	24028230 	.word	0x24028230
900180a8:	2402822c 	.word	0x2402822c
900180ac:	240281ec 	.word	0x240281ec

900180b0 <_ZNK8touchgfx4Rect8includesERKS0_>:
900180b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
900180b2:	4606      	mov	r6, r0
900180b4:	4608      	mov	r0, r1
900180b6:	460f      	mov	r7, r1
900180b8:	f7fa febf 	bl	90012e3a <_ZNK8touchgfx4Rect7isEmptyEv>
900180bc:	b9e8      	cbnz	r0, 900180fa <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
900180be:	f9b7 5000 	ldrsh.w	r5, [r7]
900180c2:	f9b6 4000 	ldrsh.w	r4, [r6]
900180c6:	42a5      	cmp	r5, r4
900180c8:	db17      	blt.n	900180fa <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
900180ca:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
900180ce:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
900180d2:	429a      	cmp	r2, r3
900180d4:	db11      	blt.n	900180fa <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
900180d6:	88b9      	ldrh	r1, [r7, #4]
900180d8:	440d      	add	r5, r1
900180da:	88b1      	ldrh	r1, [r6, #4]
900180dc:	440c      	add	r4, r1
900180de:	b22d      	sxth	r5, r5
900180e0:	b224      	sxth	r4, r4
900180e2:	42a5      	cmp	r5, r4
900180e4:	dc09      	bgt.n	900180fa <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
900180e6:	88f8      	ldrh	r0, [r7, #6]
900180e8:	4410      	add	r0, r2
900180ea:	88f2      	ldrh	r2, [r6, #6]
900180ec:	4413      	add	r3, r2
900180ee:	b200      	sxth	r0, r0
900180f0:	b21b      	sxth	r3, r3
900180f2:	4298      	cmp	r0, r3
900180f4:	bfcc      	ite	gt
900180f6:	2000      	movgt	r0, #0
900180f8:	2001      	movle	r0, #1
900180fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

900180fc <_ZN8touchgfx11Application11getInstanceEv>:
900180fc:	4b01      	ldr	r3, [pc, #4]	; (90018104 <_ZN8touchgfx11Application11getInstanceEv+0x8>)
900180fe:	6818      	ldr	r0, [r3, #0]
90018100:	4770      	bx	lr
90018102:	bf00      	nop
90018104:	24028240 	.word	0x24028240

90018108 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv>:
90018108:	2300      	movs	r3, #0
9001810a:	b510      	push	{r4, lr}
9001810c:	f8a0 30a4 	strh.w	r3, [r0, #164]	; 0xa4
90018110:	4604      	mov	r4, r0
90018112:	f8b0 3080 	ldrh.w	r3, [r0, #128]	; 0x80
90018116:	f8a0 30a6 	strh.w	r3, [r0, #166]	; 0xa6
9001811a:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	; 0xa4
9001811e:	f8b4 20a6 	ldrh.w	r2, [r4, #166]	; 0xa6
90018122:	429a      	cmp	r2, r3
90018124:	d90e      	bls.n	90018144 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x3c>
90018126:	18e2      	adds	r2, r4, r3
90018128:	f892 2084 	ldrb.w	r2, [r2, #132]	; 0x84
9001812c:	b122      	cbz	r2, 90018138 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x30>
9001812e:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
90018132:	6803      	ldr	r3, [r0, #0]
90018134:	6d1b      	ldr	r3, [r3, #80]	; 0x50
90018136:	4798      	blx	r3
90018138:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	; 0xa4
9001813c:	3301      	adds	r3, #1
9001813e:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
90018142:	e7ea      	b.n	9001811a <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x12>
90018144:	bd10      	pop	{r4, pc}

90018146 <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE>:
90018146:	b530      	push	{r4, r5, lr}
90018148:	2200      	movs	r2, #0
9001814a:	f8b0 5080 	ldrh.w	r5, [r0, #128]	; 0x80
9001814e:	b293      	uxth	r3, r2
90018150:	429d      	cmp	r5, r3
90018152:	d90e      	bls.n	90018172 <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE+0x2c>
90018154:	f850 3022 	ldr.w	r3, [r0, r2, lsl #2]
90018158:	428b      	cmp	r3, r1
9001815a:	d10b      	bne.n	90018174 <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE+0x2e>
9001815c:	1884      	adds	r4, r0, r2
9001815e:	f894 3084 	ldrb.w	r3, [r4, #132]	; 0x84
90018162:	b13b      	cbz	r3, 90018174 <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE+0x2e>
90018164:	3b01      	subs	r3, #1
90018166:	b2db      	uxtb	r3, r3
90018168:	f884 3084 	strb.w	r3, [r4, #132]	; 0x84
9001816c:	b90b      	cbnz	r3, 90018172 <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE+0x2c>
9001816e:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
90018172:	bd30      	pop	{r4, r5, pc}
90018174:	3201      	adds	r2, #1
90018176:	e7ea      	b.n	9001814e <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE+0x8>

90018178 <_ZN8touchgfx11Application12TimerWidgets5clearEv>:
90018178:	2300      	movs	r3, #0
9001817a:	f100 0284 	add.w	r2, r0, #132	; 0x84
9001817e:	30a4      	adds	r0, #164	; 0xa4
90018180:	f820 3c24 	strh.w	r3, [r0, #-36]
90018184:	f802 3b01 	strb.w	r3, [r2], #1
90018188:	4282      	cmp	r2, r0
9001818a:	d1fb      	bne.n	90018184 <_ZN8touchgfx11Application12TimerWidgets5clearEv+0xc>
9001818c:	4770      	bx	lr
	...

90018190 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE>:
90018190:	b570      	push	{r4, r5, r6, lr}
90018192:	4c0b      	ldr	r4, [pc, #44]	; (900181c0 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x30>)
90018194:	4605      	mov	r5, r0
90018196:	460e      	mov	r6, r1
90018198:	6820      	ldr	r0, [r4, #0]
9001819a:	b110      	cbz	r0, 900181a2 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x12>
9001819c:	6803      	ldr	r3, [r0, #0]
9001819e:	695b      	ldr	r3, [r3, #20]
900181a0:	4798      	blx	r3
900181a2:	1d28      	adds	r0, r5, #4
900181a4:	f7ff ffe8 	bl	90018178 <_ZN8touchgfx11Application12TimerWidgets5clearEv>
900181a8:	6026      	str	r6, [r4, #0]
900181aa:	6833      	ldr	r3, [r6, #0]
900181ac:	4630      	mov	r0, r6
900181ae:	68db      	ldr	r3, [r3, #12]
900181b0:	4798      	blx	r3
900181b2:	682b      	ldr	r3, [r5, #0]
900181b4:	4628      	mov	r0, r5
900181b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
900181b8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
900181bc:	4718      	bx	r3
900181be:	bf00      	nop
900181c0:	24028230 	.word	0x24028230

900181c4 <_ZN8touchgfx11Application12TimerWidgets7compactEv>:
900181c4:	2300      	movs	r3, #0
900181c6:	f8b0 c080 	ldrh.w	ip, [r0, #128]	; 0x80
900181ca:	f8b0 10a4 	ldrh.w	r1, [r0, #164]	; 0xa4
900181ce:	461a      	mov	r2, r3
900181d0:	b5f0      	push	{r4, r5, r6, r7, lr}
900181d2:	461c      	mov	r4, r3
900181d4:	461d      	mov	r5, r3
900181d6:	459c      	cmp	ip, r3
900181d8:	dd1a      	ble.n	90018210 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x4c>
900181da:	18c6      	adds	r6, r0, r3
900181dc:	f896 6084 	ldrb.w	r6, [r6, #132]	; 0x84
900181e0:	b16e      	cbz	r6, 900181fe <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x3a>
900181e2:	429a      	cmp	r2, r3
900181e4:	d008      	beq.n	900181f8 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x34>
900181e6:	f850 7023 	ldr.w	r7, [r0, r3, lsl #2]
900181ea:	fa1f fe82 	uxth.w	lr, r2
900181ee:	f840 702e 	str.w	r7, [r0, lr, lsl #2]
900181f2:	1887      	adds	r7, r0, r2
900181f4:	f887 6084 	strb.w	r6, [r7, #132]	; 0x84
900181f8:	3201      	adds	r2, #1
900181fa:	3301      	adds	r3, #1
900181fc:	e7eb      	b.n	900181d6 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x12>
900181fe:	4299      	cmp	r1, r3
90018200:	f8b0 60a6 	ldrh.w	r6, [r0, #166]	; 0xa6
90018204:	bfa8      	it	ge
90018206:	3501      	addge	r5, #1
90018208:	429e      	cmp	r6, r3
9001820a:	bfc8      	it	gt
9001820c:	3401      	addgt	r4, #1
9001820e:	e7f4      	b.n	900181fa <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x36>
90018210:	f8b0 30a6 	ldrh.w	r3, [r0, #166]	; 0xa6
90018214:	1b49      	subs	r1, r1, r5
90018216:	1b1b      	subs	r3, r3, r4
90018218:	f8a0 10a4 	strh.w	r1, [r0, #164]	; 0xa4
9001821c:	f8a0 30a6 	strh.w	r3, [r0, #166]	; 0xa6
90018220:	f8b0 3080 	ldrh.w	r3, [r0, #128]	; 0x80
90018224:	4293      	cmp	r3, r2
90018226:	dd03      	ble.n	90018230 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x6c>
90018228:	3b01      	subs	r3, #1
9001822a:	f8a0 3080 	strh.w	r3, [r0, #128]	; 0x80
9001822e:	e7f7      	b.n	90018220 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x5c>
90018230:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

90018234 <_ZN8touchgfx11Application15handleTickEventEv>:
90018234:	b570      	push	{r4, r5, r6, lr}
90018236:	4d16      	ldr	r5, [pc, #88]	; (90018290 <_ZN8touchgfx11Application15handleTickEventEv+0x5c>)
90018238:	4604      	mov	r4, r0
9001823a:	6828      	ldr	r0, [r5, #0]
9001823c:	b140      	cbz	r0, 90018250 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
9001823e:	7a03      	ldrb	r3, [r0, #8]
90018240:	b933      	cbnz	r3, 90018250 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
90018242:	f884 3138 	strb.w	r3, [r4, #312]	; 0x138
90018246:	6803      	ldr	r3, [r0, #0]
90018248:	689b      	ldr	r3, [r3, #8]
9001824a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
9001824e:	4718      	bx	r3
90018250:	f894 3138 	ldrb.w	r3, [r4, #312]	; 0x138
90018254:	4e0f      	ldr	r6, [pc, #60]	; (90018294 <_ZN8touchgfx11Application15handleTickEventEv+0x60>)
90018256:	b973      	cbnz	r3, 90018276 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
90018258:	b168      	cbz	r0, 90018276 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
9001825a:	7a03      	ldrb	r3, [r0, #8]
9001825c:	b15b      	cbz	r3, 90018276 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
9001825e:	6830      	ldr	r0, [r6, #0]
90018260:	b110      	cbz	r0, 90018268 <_ZN8touchgfx11Application15handleTickEventEv+0x34>
90018262:	6803      	ldr	r3, [r0, #0]
90018264:	691b      	ldr	r3, [r3, #16]
90018266:	4798      	blx	r3
90018268:	6828      	ldr	r0, [r5, #0]
9001826a:	6803      	ldr	r3, [r0, #0]
9001826c:	68db      	ldr	r3, [r3, #12]
9001826e:	4798      	blx	r3
90018270:	2301      	movs	r3, #1
90018272:	f884 3138 	strb.w	r3, [r4, #312]	; 0x138
90018276:	3404      	adds	r4, #4
90018278:	4620      	mov	r0, r4
9001827a:	f7ff ff45 	bl	90018108 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv>
9001827e:	4620      	mov	r0, r4
90018280:	f7ff ffa0 	bl	900181c4 <_ZN8touchgfx11Application12TimerWidgets7compactEv>
90018284:	6830      	ldr	r0, [r6, #0]
90018286:	b110      	cbz	r0, 9001828e <_ZN8touchgfx11Application15handleTickEventEv+0x5a>
90018288:	6803      	ldr	r3, [r0, #0]
9001828a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
9001828c:	e7dd      	b.n	9001824a <_ZN8touchgfx11Application15handleTickEventEv+0x16>
9001828e:	bd70      	pop	{r4, r5, r6, pc}
90018290:	24028234 	.word	0x24028234
90018294:	24028230 	.word	0x24028230

90018298 <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE>:
90018298:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
9001829a:	2300      	movs	r3, #0
9001829c:	4604      	mov	r4, r0
9001829e:	460d      	mov	r5, r1
900182a0:	f8b0 1080 	ldrh.w	r1, [r0, #128]	; 0x80
900182a4:	4618      	mov	r0, r3
900182a6:	b29a      	uxth	r2, r3
900182a8:	4291      	cmp	r1, r2
900182aa:	d912      	bls.n	900182d2 <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE+0x3a>
900182ac:	f854 7023 	ldr.w	r7, [r4, r3, lsl #2]
900182b0:	18e6      	adds	r6, r4, r3
900182b2:	42af      	cmp	r7, r5
900182b4:	f896 2084 	ldrb.w	r2, [r6, #132]	; 0x84
900182b8:	d105      	bne.n	900182c6 <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE+0x2e>
900182ba:	2aff      	cmp	r2, #255	; 0xff
900182bc:	d002      	beq.n	900182c4 <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE+0x2c>
900182be:	3201      	adds	r2, #1
900182c0:	f886 2084 	strb.w	r2, [r6, #132]	; 0x84
900182c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
900182c6:	2a00      	cmp	r2, #0
900182c8:	f103 0301 	add.w	r3, r3, #1
900182cc:	bf08      	it	eq
900182ce:	2001      	moveq	r0, #1
900182d0:	e7e9      	b.n	900182a6 <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE+0xe>
900182d2:	b120      	cbz	r0, 900182de <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE+0x46>
900182d4:	2920      	cmp	r1, #32
900182d6:	d102      	bne.n	900182de <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE+0x46>
900182d8:	4620      	mov	r0, r4
900182da:	f7ff ff73 	bl	900181c4 <_ZN8touchgfx11Application12TimerWidgets7compactEv>
900182de:	f8b4 3080 	ldrh.w	r3, [r4, #128]	; 0x80
900182e2:	2b1f      	cmp	r3, #31
900182e4:	d8ee      	bhi.n	900182c4 <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE+0x2c>
900182e6:	18e2      	adds	r2, r4, r3
900182e8:	2101      	movs	r1, #1
900182ea:	f882 1084 	strb.w	r1, [r2, #132]	; 0x84
900182ee:	185a      	adds	r2, r3, r1
900182f0:	f8a4 2080 	strh.w	r2, [r4, #128]	; 0x80
900182f4:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
900182f8:	e7e4      	b.n	900182c4 <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE+0x2c>

900182fa <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>:
900182fa:	4603      	mov	r3, r0
900182fc:	f100 0140 	add.w	r1, r0, #64	; 0x40
90018300:	2200      	movs	r2, #0
90018302:	801a      	strh	r2, [r3, #0]
90018304:	3308      	adds	r3, #8
90018306:	f823 2c06 	strh.w	r2, [r3, #-6]
9001830a:	f823 2c04 	strh.w	r2, [r3, #-4]
9001830e:	f823 2c02 	strh.w	r2, [r3, #-2]
90018312:	428b      	cmp	r3, r1
90018314:	d1f5      	bne.n	90018302 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev+0x8>
90018316:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
9001831a:	4770      	bx	lr

9001831c <_ZN8touchgfx11ApplicationC1Ev>:
9001831c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
9001831e:	4b1d      	ldr	r3, [pc, #116]	; (90018394 <_ZN8touchgfx11ApplicationC1Ev+0x78>)
90018320:	4606      	mov	r6, r0
90018322:	4604      	mov	r4, r0
90018324:	2500      	movs	r5, #0
90018326:	f846 3b04 	str.w	r3, [r6], #4
9001832a:	22a8      	movs	r2, #168	; 0xa8
9001832c:	2100      	movs	r1, #0
9001832e:	4630      	mov	r0, r6
90018330:	f00f fc44 	bl	90027bbc <memset>
90018334:	f8a4 5084 	strh.w	r5, [r4, #132]	; 0x84
90018338:	f104 00ac 	add.w	r0, r4, #172	; 0xac
9001833c:	4f16      	ldr	r7, [pc, #88]	; (90018398 <_ZN8touchgfx11ApplicationC1Ev+0x7c>)
9001833e:	f7ff ffdc 	bl	900182fa <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
90018342:	f104 00ee 	add.w	r0, r4, #238	; 0xee
90018346:	f7ff ffd8 	bl	900182fa <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
9001834a:	f8a4 5130 	strh.w	r5, [r4, #304]	; 0x130
9001834e:	f8a4 5132 	strh.w	r5, [r4, #306]	; 0x132
90018352:	f8a4 5134 	strh.w	r5, [r4, #308]	; 0x134
90018356:	f8a4 5136 	strh.w	r5, [r4, #310]	; 0x136
9001835a:	f884 5138 	strb.w	r5, [r4, #312]	; 0x138
9001835e:	490f      	ldr	r1, [pc, #60]	; (9001839c <_ZN8touchgfx11ApplicationC1Ev+0x80>)
90018360:	480f      	ldr	r0, [pc, #60]	; (900183a0 <_ZN8touchgfx11ApplicationC1Ev+0x84>)
90018362:	f00e fd1d 	bl	90026da0 <CRC_Lock>
90018366:	4b0f      	ldr	r3, [pc, #60]	; (900183a4 <_ZN8touchgfx11ApplicationC1Ev+0x88>)
90018368:	b158      	cbz	r0, 90018382 <_ZN8touchgfx11ApplicationC1Ev+0x66>
9001836a:	801d      	strh	r5, [r3, #0]
9001836c:	2300      	movs	r3, #0
9001836e:	4a0e      	ldr	r2, [pc, #56]	; (900183a8 <_ZN8touchgfx11ApplicationC1Ev+0x8c>)
90018370:	4630      	mov	r0, r6
90018372:	6013      	str	r3, [r2, #0]
90018374:	4a0d      	ldr	r2, [pc, #52]	; (900183ac <_ZN8touchgfx11ApplicationC1Ev+0x90>)
90018376:	603b      	str	r3, [r7, #0]
90018378:	6013      	str	r3, [r2, #0]
9001837a:	f7ff fefd 	bl	90018178 <_ZN8touchgfx11Application12TimerWidgets5clearEv>
9001837e:	4620      	mov	r0, r4
90018380:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
90018382:	f44f 6280 	mov.w	r2, #1024	; 0x400
90018386:	2002      	movs	r0, #2
90018388:	801a      	strh	r2, [r3, #0]
9001838a:	6038      	str	r0, [r7, #0]
9001838c:	f001 faf0 	bl	90019970 <_ZN8touchgfx6Screen4drawEv>
90018390:	e7ec      	b.n	9001836c <_ZN8touchgfx11ApplicationC1Ev+0x50>
90018392:	bf00      	nop
90018394:	9002c37c 	.word	0x9002c37c
90018398:	24028230 	.word	0x24028230
9001839c:	b5e8b5cd 	.word	0xb5e8b5cd
900183a0:	f407a5c2 	.word	0xf407a5c2
900183a4:	24000068 	.word	0x24000068
900183a8:	24028240 	.word	0x24028240
900183ac:	24028234 	.word	0x24028234

900183b0 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>:
900183b0:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
900183b4:	3b01      	subs	r3, #1
900183b6:	b29b      	uxth	r3, r3
900183b8:	428b      	cmp	r3, r1
900183ba:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
900183be:	b510      	push	{r4, lr}
900183c0:	d908      	bls.n	900183d4 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x24>
900183c2:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
900183c6:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
900183ca:	681a      	ldr	r2, [r3, #0]
900183cc:	f840 2031 	str.w	r2, [r0, r1, lsl #3]
900183d0:	685a      	ldr	r2, [r3, #4]
900183d2:	6062      	str	r2, [r4, #4]
900183d4:	bd10      	pop	{r4, pc}
	...

900183d8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>:
900183d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
900183dc:	b08f      	sub	sp, #60	; 0x3c
900183de:	4b8f      	ldr	r3, [pc, #572]	; (9001861c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x244>)
900183e0:	4683      	mov	fp, r0
900183e2:	ac0a      	add	r4, sp, #40	; 0x28
900183e4:	e884 0006 	stmia.w	r4, {r1, r2}
900183e8:	f9b3 2000 	ldrsh.w	r2, [r3]
900183ec:	4620      	mov	r0, r4
900183ee:	4b8c      	ldr	r3, [pc, #560]	; (90018620 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x248>)
900183f0:	f9b3 1000 	ldrsh.w	r1, [r3]
900183f4:	f7ff fe0b 	bl	9001800e <_ZN8touchgfx4Rect10restrictToEss>
900183f8:	4620      	mov	r0, r4
900183fa:	f7fa fd1e 	bl	90012e3a <_ZNK8touchgfx4Rect7isEmptyEv>
900183fe:	2800      	cmp	r0, #0
90018400:	d16a      	bne.n	900184d8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
90018402:	9403      	str	r4, [sp, #12]
90018404:	f8bb 40ec 	ldrh.w	r4, [fp, #236]	; 0xec
90018408:	f10b 03ac 	add.w	r3, fp, #172	; 0xac
9001840c:	eb0b 05c4 	add.w	r5, fp, r4, lsl #3
90018410:	9301      	str	r3, [sp, #4]
90018412:	35a4      	adds	r5, #164	; 0xa4
90018414:	b15c      	cbz	r4, 9001842e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56>
90018416:	4629      	mov	r1, r5
90018418:	9803      	ldr	r0, [sp, #12]
9001841a:	f7ff fe49 	bl	900180b0 <_ZNK8touchgfx4Rect8includesERKS0_>
9001841e:	3c01      	subs	r4, #1
90018420:	b118      	cbz	r0, 9001842a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52>
90018422:	b2a1      	uxth	r1, r4
90018424:	9801      	ldr	r0, [sp, #4]
90018426:	f7ff ffc3 	bl	900183b0 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
9001842a:	3d08      	subs	r5, #8
9001842c:	e7f2      	b.n	90018414 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3c>
9001842e:	f8bb 80ec 	ldrh.w	r8, [fp, #236]	; 0xec
90018432:	f108 33ff 	add.w	r3, r8, #4294967295
90018436:	f8cd 8010 	str.w	r8, [sp, #16]
9001843a:	9302      	str	r3, [sp, #8]
9001843c:	ea4f 03c8 	mov.w	r3, r8, lsl #3
90018440:	f103 04a4 	add.w	r4, r3, #164	; 0xa4
90018444:	9306      	str	r3, [sp, #24]
90018446:	445c      	add	r4, fp
90018448:	2500      	movs	r5, #0
9001844a:	4626      	mov	r6, r4
9001844c:	f8cd 8014 	str.w	r8, [sp, #20]
90018450:	462f      	mov	r7, r5
90018452:	9b05      	ldr	r3, [sp, #20]
90018454:	2b00      	cmp	r3, #0
90018456:	d073      	beq.n	90018540 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x168>
90018458:	9903      	ldr	r1, [sp, #12]
9001845a:	4630      	mov	r0, r6
9001845c:	f7ff fdb5 	bl	90017fca <_ZNK8touchgfx4Rect9intersectERKS0_>
90018460:	b350      	cbz	r0, 900184b8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xe0>
90018462:	f9bd e028 	ldrsh.w	lr, [sp, #40]	; 0x28
90018466:	f9b6 c000 	ldrsh.w	ip, [r6]
9001846a:	f9bd a02a 	ldrsh.w	sl, [sp, #42]	; 0x2a
9001846e:	45e6      	cmp	lr, ip
90018470:	f9b6 9002 	ldrsh.w	r9, [r6, #2]
90018474:	db33      	blt.n	900184de <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x106>
90018476:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
9001847a:	88b3      	ldrh	r3, [r6, #4]
9001847c:	4472      	add	r2, lr
9001847e:	4463      	add	r3, ip
90018480:	b212      	sxth	r2, r2
90018482:	b21b      	sxth	r3, r3
90018484:	429a      	cmp	r2, r3
90018486:	dc2a      	bgt.n	900184de <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x106>
90018488:	fa1f f289 	uxth.w	r2, r9
9001848c:	88f3      	ldrh	r3, [r6, #6]
9001848e:	45ca      	cmp	sl, r9
90018490:	f8bd 102e 	ldrh.w	r1, [sp, #46]	; 0x2e
90018494:	4413      	add	r3, r2
90018496:	fa1f fc8a 	uxth.w	ip, sl
9001849a:	b29b      	uxth	r3, r3
9001849c:	fa0f fe83 	sxth.w	lr, r3
900184a0:	db0f      	blt.n	900184c2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xea>
900184a2:	eba3 030c 	sub.w	r3, r3, ip
900184a6:	1ac9      	subs	r1, r1, r3
900184a8:	b209      	sxth	r1, r1
900184aa:	2900      	cmp	r1, #0
900184ac:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
900184b0:	dd12      	ble.n	900184d8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
900184b2:	f8ad e02a 	strh.w	lr, [sp, #42]	; 0x2a
900184b6:	4605      	mov	r5, r0
900184b8:	9b05      	ldr	r3, [sp, #20]
900184ba:	3e08      	subs	r6, #8
900184bc:	3b01      	subs	r3, #1
900184be:	9305      	str	r3, [sp, #20]
900184c0:	e7c7      	b.n	90018452 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x7a>
900184c2:	4461      	add	r1, ip
900184c4:	b209      	sxth	r1, r1
900184c6:	4571      	cmp	r1, lr
900184c8:	dc38      	bgt.n	9001853c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
900184ca:	eba2 020c 	sub.w	r2, r2, ip
900184ce:	b212      	sxth	r2, r2
900184d0:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
900184d4:	2a00      	cmp	r2, #0
900184d6:	dcee      	bgt.n	900184b6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xde>
900184d8:	b00f      	add	sp, #60	; 0x3c
900184da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
900184de:	45ca      	cmp	sl, r9
900184e0:	db2c      	blt.n	9001853c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
900184e2:	f8bd 302e 	ldrh.w	r3, [sp, #46]	; 0x2e
900184e6:	449a      	add	sl, r3
900184e8:	88f3      	ldrh	r3, [r6, #6]
900184ea:	4499      	add	r9, r3
900184ec:	fa0f fa8a 	sxth.w	sl, sl
900184f0:	fa0f f989 	sxth.w	r9, r9
900184f4:	45ca      	cmp	sl, r9
900184f6:	dc21      	bgt.n	9001853c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
900184f8:	fa1f f28c 	uxth.w	r2, ip
900184fc:	88b3      	ldrh	r3, [r6, #4]
900184fe:	45e6      	cmp	lr, ip
90018500:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
90018504:	4413      	add	r3, r2
90018506:	fa1f f98e 	uxth.w	r9, lr
9001850a:	b29b      	uxth	r3, r3
9001850c:	fa0f fa83 	sxth.w	sl, r3
90018510:	db0a      	blt.n	90018528 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x150>
90018512:	eba3 0309 	sub.w	r3, r3, r9
90018516:	1ac9      	subs	r1, r1, r3
90018518:	b209      	sxth	r1, r1
9001851a:	2900      	cmp	r1, #0
9001851c:	f8ad 102c 	strh.w	r1, [sp, #44]	; 0x2c
90018520:	ddda      	ble.n	900184d8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
90018522:	f8ad a028 	strh.w	sl, [sp, #40]	; 0x28
90018526:	e7c6      	b.n	900184b6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xde>
90018528:	4449      	add	r1, r9
9001852a:	b209      	sxth	r1, r1
9001852c:	4551      	cmp	r1, sl
9001852e:	dc05      	bgt.n	9001853c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
90018530:	eba2 0209 	sub.w	r2, r2, r9
90018534:	b212      	sxth	r2, r2
90018536:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
9001853a:	e7cb      	b.n	900184d4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xfc>
9001853c:	4607      	mov	r7, r0
9001853e:	e7bb      	b.n	900184b8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xe0>
90018540:	2d00      	cmp	r5, #0
90018542:	d181      	bne.n	90018448 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x70>
90018544:	2f00      	cmp	r7, #0
90018546:	f000 81dd 	beq.w	90018904 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52c>
9001854a:	f9bd 6028 	ldrsh.w	r6, [sp, #40]	; 0x28
9001854e:	f9bd 702a 	ldrsh.w	r7, [sp, #42]	; 0x2a
90018552:	b2b3      	uxth	r3, r6
90018554:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
90018558:	b2b9      	uxth	r1, r7
9001855a:	f8bd a02e 	ldrh.w	sl, [sp, #46]	; 0x2e
9001855e:	441a      	add	r2, r3
90018560:	448a      	add	sl, r1
90018562:	9105      	str	r1, [sp, #20]
90018564:	b292      	uxth	r2, r2
90018566:	fa1f fa8a 	uxth.w	sl, sl
9001856a:	fa0f f882 	sxth.w	r8, r2
9001856e:	fa0f f98a 	sxth.w	r9, sl
90018572:	e9cd 2307 	strd	r2, r3, [sp, #28]
90018576:	9b04      	ldr	r3, [sp, #16]
90018578:	2b00      	cmp	r3, #0
9001857a:	d053      	beq.n	90018624 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x24c>
9001857c:	9903      	ldr	r1, [sp, #12]
9001857e:	4620      	mov	r0, r4
90018580:	f7ff fd23 	bl	90017fca <_ZNK8touchgfx4Rect9intersectERKS0_>
90018584:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
90018588:	b1c0      	cbz	r0, 900185bc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
9001858a:	f9b4 e000 	ldrsh.w	lr, [r4]
9001858e:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
90018592:	4576      	cmp	r6, lr
90018594:	dc23      	bgt.n	900185de <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
90018596:	f8b4 c004 	ldrh.w	ip, [r4, #4]
9001859a:	44f4      	add	ip, lr
9001859c:	fa0f fc8c 	sxth.w	ip, ip
900185a0:	45e0      	cmp	r8, ip
900185a2:	db1c      	blt.n	900185de <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
900185a4:	428f      	cmp	r7, r1
900185a6:	fa1f fc81 	uxth.w	ip, r1
900185aa:	88e1      	ldrh	r1, [r4, #6]
900185ac:	dc0d      	bgt.n	900185ca <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f2>
900185ae:	ebaa 0c0c 	sub.w	ip, sl, ip
900185b2:	f8a4 9002 	strh.w	r9, [r4, #2]
900185b6:	eba1 010c 	sub.w	r1, r1, ip
900185ba:	80e1      	strh	r1, [r4, #6]
900185bc:	4628      	mov	r0, r5
900185be:	9904      	ldr	r1, [sp, #16]
900185c0:	3c08      	subs	r4, #8
900185c2:	4605      	mov	r5, r0
900185c4:	3901      	subs	r1, #1
900185c6:	9104      	str	r1, [sp, #16]
900185c8:	e7d3      	b.n	90018572 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x19a>
900185ca:	4461      	add	r1, ip
900185cc:	b209      	sxth	r1, r1
900185ce:	4549      	cmp	r1, r9
900185d0:	dcf5      	bgt.n	900185be <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
900185d2:	9905      	ldr	r1, [sp, #20]
900185d4:	eba1 0c0c 	sub.w	ip, r1, ip
900185d8:	f8a4 c006 	strh.w	ip, [r4, #6]
900185dc:	e7ee      	b.n	900185bc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
900185de:	428f      	cmp	r7, r1
900185e0:	dced      	bgt.n	900185be <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
900185e2:	f8b4 c006 	ldrh.w	ip, [r4, #6]
900185e6:	4461      	add	r1, ip
900185e8:	b209      	sxth	r1, r1
900185ea:	4589      	cmp	r9, r1
900185ec:	dbe7      	blt.n	900185be <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
900185ee:	4576      	cmp	r6, lr
900185f0:	fa1f fc8e 	uxth.w	ip, lr
900185f4:	88a1      	ldrh	r1, [r4, #4]
900185f6:	dc07      	bgt.n	90018608 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x230>
900185f8:	eba2 0c0c 	sub.w	ip, r2, ip
900185fc:	f8a4 8000 	strh.w	r8, [r4]
90018600:	eba1 010c 	sub.w	r1, r1, ip
90018604:	80a1      	strh	r1, [r4, #4]
90018606:	e7d9      	b.n	900185bc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
90018608:	4461      	add	r1, ip
9001860a:	b209      	sxth	r1, r1
9001860c:	4588      	cmp	r8, r1
9001860e:	dbd6      	blt.n	900185be <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
90018610:	eba3 0c0c 	sub.w	ip, r3, ip
90018614:	f8a4 c004 	strh.w	ip, [r4, #4]
90018618:	e7d0      	b.n	900185bc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
9001861a:	bf00      	nop
9001861c:	240281e2 	.word	0x240281e2
90018620:	240281e0 	.word	0x240281e0
90018624:	2d00      	cmp	r5, #0
90018626:	f000 816d 	beq.w	90018904 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52c>
9001862a:	9b06      	ldr	r3, [sp, #24]
9001862c:	445b      	add	r3, fp
9001862e:	461c      	mov	r4, r3
90018630:	9b02      	ldr	r3, [sp, #8]
90018632:	3301      	adds	r3, #1
90018634:	f000 8166 	beq.w	90018904 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52c>
90018638:	f104 05a4 	add.w	r5, r4, #164	; 0xa4
9001863c:	9803      	ldr	r0, [sp, #12]
9001863e:	4629      	mov	r1, r5
90018640:	f7ff fd36 	bl	900180b0 <_ZNK8touchgfx4Rect8includesERKS0_>
90018644:	b120      	cbz	r0, 90018650 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x278>
90018646:	f8bd 1008 	ldrh.w	r1, [sp, #8]
9001864a:	9801      	ldr	r0, [sp, #4]
9001864c:	f7ff feb0 	bl	900183b0 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
90018650:	9903      	ldr	r1, [sp, #12]
90018652:	4628      	mov	r0, r5
90018654:	f7ff fcb9 	bl	90017fca <_ZNK8touchgfx4Rect9intersectERKS0_>
90018658:	2800      	cmp	r0, #0
9001865a:	f000 809c 	beq.w	90018796 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3be>
9001865e:	f9b4 90a4 	ldrsh.w	r9, [r4, #164]	; 0xa4
90018662:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	; 0xa8
90018666:	fa1f f189 	uxth.w	r1, r9
9001866a:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	; 0x28
9001866e:	9309      	str	r3, [sp, #36]	; 0x24
90018670:	eb01 0c03 	add.w	ip, r1, r3
90018674:	b283      	uxth	r3, r0
90018676:	4548      	cmp	r0, r9
90018678:	f9bd e02a 	ldrsh.w	lr, [sp, #42]	; 0x2a
9001867c:	fa1f fa8c 	uxth.w	sl, ip
90018680:	f8bd c02c 	ldrh.w	ip, [sp, #44]	; 0x2c
90018684:	f9b4 20a6 	ldrsh.w	r2, [r4, #166]	; 0xa6
90018688:	eb03 050c 	add.w	r5, r3, ip
9001868c:	b2ad      	uxth	r5, r5
9001868e:	9505      	str	r5, [sp, #20]
90018690:	f9bd 5014 	ldrsh.w	r5, [sp, #20]
90018694:	9504      	str	r5, [sp, #16]
90018696:	f8bb 50ec 	ldrh.w	r5, [fp, #236]	; 0xec
9001869a:	f340 8099 	ble.w	900187d0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3f8>
9001869e:	1a5b      	subs	r3, r3, r1
900186a0:	4596      	cmp	lr, r2
900186a2:	fa0f f08a 	sxth.w	r0, sl
900186a6:	b29b      	uxth	r3, r3
900186a8:	b21e      	sxth	r6, r3
900186aa:	dd2e      	ble.n	9001870a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x332>
900186ac:	9f02      	ldr	r7, [sp, #8]
900186ae:	fa1f fe8e 	uxth.w	lr, lr
900186b2:	b292      	uxth	r2, r2
900186b4:	f8bd 402e 	ldrh.w	r4, [sp, #46]	; 0x2e
900186b8:	eb0b 08c7 	add.w	r8, fp, r7, lsl #3
900186bc:	9f04      	ldr	r7, [sp, #16]
900186be:	ebae 0102 	sub.w	r1, lr, r2
900186c2:	44a6      	add	lr, r4
900186c4:	1a3f      	subs	r7, r7, r0
900186c6:	f8b8 00b2 	ldrh.w	r0, [r8, #178]	; 0xb2
900186ca:	b289      	uxth	r1, r1
900186cc:	4402      	add	r2, r0
900186ce:	fa0f fe8e 	sxth.w	lr, lr
900186d2:	b20d      	sxth	r5, r1
900186d4:	b212      	sxth	r2, r2
900186d6:	436f      	muls	r7, r5
900186d8:	ebae 0202 	sub.w	r2, lr, r2
900186dc:	4372      	muls	r2, r6
900186de:	4297      	cmp	r7, r2
900186e0:	db09      	blt.n	900186f6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x31e>
900186e2:	f8b8 20ac 	ldrh.w	r2, [r8, #172]	; 0xac
900186e6:	f8a8 50b2 	strh.w	r5, [r8, #178]	; 0xb2
900186ea:	449c      	add	ip, r3
900186ec:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
900186f0:	f8ad c02c 	strh.w	ip, [sp, #44]	; 0x2c
900186f4:	e686      	b.n	90018404 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
900186f6:	4421      	add	r1, r4
900186f8:	f8b8 30ae 	ldrh.w	r3, [r8, #174]	; 0xae
900186fc:	f8a8 60b0 	strh.w	r6, [r8, #176]	; 0xb0
90018700:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
90018704:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
90018708:	e67c      	b.n	90018404 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
9001870a:	9f04      	ldr	r7, [sp, #16]
9001870c:	42b8      	cmp	r0, r7
9001870e:	da27      	bge.n	90018760 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x388>
90018710:	9902      	ldr	r1, [sp, #8]
90018712:	1a3f      	subs	r7, r7, r0
90018714:	f8bd 502e 	ldrh.w	r5, [sp, #46]	; 0x2e
90018718:	eb0b 04c1 	add.w	r4, fp, r1, lsl #3
9001871c:	eb05 010e 	add.w	r1, r5, lr
90018720:	fa1f f881 	uxth.w	r8, r1
90018724:	f8b4 10b2 	ldrh.w	r1, [r4, #178]	; 0xb2
90018728:	4411      	add	r1, r2
9001872a:	fa0f f988 	sxth.w	r9, r8
9001872e:	eba2 020e 	sub.w	r2, r2, lr
90018732:	eba1 0108 	sub.w	r1, r1, r8
90018736:	4372      	muls	r2, r6
90018738:	b289      	uxth	r1, r1
9001873a:	fa0f f881 	sxth.w	r8, r1
9001873e:	fb08 f707 	mul.w	r7, r8, r7
90018742:	42ba      	cmp	r2, r7
90018744:	dc06      	bgt.n	90018754 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x37c>
90018746:	f8a4 90ae 	strh.w	r9, [r4, #174]	; 0xae
9001874a:	f8a4 80b2 	strh.w	r8, [r4, #178]	; 0xb2
9001874e:	f8b4 20ac 	ldrh.w	r2, [r4, #172]	; 0xac
90018752:	e7ca      	b.n	900186ea <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x312>
90018754:	4429      	add	r1, r5
90018756:	f8a4 60b0 	strh.w	r6, [r4, #176]	; 0xb0
9001875a:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
9001875e:	e651      	b.n	90018404 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
90018760:	9805      	ldr	r0, [sp, #20]
90018762:	2d06      	cmp	r5, #6
90018764:	ebaa 0000 	sub.w	r0, sl, r0
90018768:	b280      	uxth	r0, r0
9001876a:	fa0f fe80 	sxth.w	lr, r0
9001876e:	d817      	bhi.n	900187a0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3c8>
90018770:	9b04      	ldr	r3, [sp, #16]
90018772:	f9b4 10aa 	ldrsh.w	r1, [r4, #170]	; 0xaa
90018776:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
9001877a:	1c6b      	adds	r3, r5, #1
9001877c:	f8a4 e0a8 	strh.w	lr, [r4, #168]	; 0xa8
90018780:	f8ab 30ec 	strh.w	r3, [fp, #236]	; 0xec
90018784:	9b01      	ldr	r3, [sp, #4]
90018786:	9801      	ldr	r0, [sp, #4]
90018788:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
9001878c:	f820 9035 	strh.w	r9, [r0, r5, lsl #3]
90018790:	805a      	strh	r2, [r3, #2]
90018792:	809e      	strh	r6, [r3, #4]
90018794:	80d9      	strh	r1, [r3, #6]
90018796:	9b02      	ldr	r3, [sp, #8]
90018798:	3c08      	subs	r4, #8
9001879a:	3b01      	subs	r3, #1
9001879c:	9302      	str	r3, [sp, #8]
9001879e:	e747      	b.n	90018630 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x258>
900187a0:	9a02      	ldr	r2, [sp, #8]
900187a2:	45b6      	cmp	lr, r6
900187a4:	ea4f 02c2 	mov.w	r2, r2, lsl #3
900187a8:	db0d      	blt.n	900187c6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3ee>
900187aa:	449c      	add	ip, r3
900187ac:	445a      	add	r2, fp
900187ae:	f8ad 9028 	strh.w	r9, [sp, #40]	; 0x28
900187b2:	fa1f fc8c 	uxth.w	ip, ip
900187b6:	f8a2 e0b0 	strh.w	lr, [r2, #176]	; 0xb0
900187ba:	f8ad c02c 	strh.w	ip, [sp, #44]	; 0x2c
900187be:	448c      	add	ip, r1
900187c0:	f8a2 c0ac 	strh.w	ip, [r2, #172]	; 0xac
900187c4:	e61e      	b.n	90018404 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
900187c6:	445a      	add	r2, fp
900187c8:	4484      	add	ip, r0
900187ca:	f8a2 60b0 	strh.w	r6, [r2, #176]	; 0xb0
900187ce:	e78f      	b.n	900186f0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
900187d0:	fa1f f18e 	uxth.w	r1, lr
900187d4:	f8bd 602e 	ldrh.w	r6, [sp, #46]	; 0x2e
900187d8:	b293      	uxth	r3, r2
900187da:	4596      	cmp	lr, r2
900187dc:	eb01 0806 	add.w	r8, r1, r6
900187e0:	9306      	str	r3, [sp, #24]
900187e2:	fa1f f888 	uxth.w	r8, r8
900187e6:	9f06      	ldr	r7, [sp, #24]
900187e8:	fa0f f388 	sxth.w	r3, r8
900187ec:	9307      	str	r3, [sp, #28]
900187ee:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	; 0xaa
900187f2:	443b      	add	r3, r7
900187f4:	b29b      	uxth	r3, r3
900187f6:	9308      	str	r3, [sp, #32]
900187f8:	da24      	bge.n	90018844 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x46c>
900187fa:	9905      	ldr	r1, [sp, #20]
900187fc:	eba3 0308 	sub.w	r3, r3, r8
90018800:	eba2 020e 	sub.w	r2, r2, lr
90018804:	eba9 0000 	sub.w	r0, r9, r0
90018808:	ebaa 0401 	sub.w	r4, sl, r1
9001880c:	b29b      	uxth	r3, r3
9001880e:	b2a4      	uxth	r4, r4
90018810:	b219      	sxth	r1, r3
90018812:	b225      	sxth	r5, r4
90018814:	4348      	muls	r0, r1
90018816:	436a      	muls	r2, r5
90018818:	4282      	cmp	r2, r0
9001881a:	9a02      	ldr	r2, [sp, #8]
9001881c:	ea4f 02c2 	mov.w	r2, r2, lsl #3
90018820:	445a      	add	r2, fp
90018822:	dc06      	bgt.n	90018832 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x45a>
90018824:	9b07      	ldr	r3, [sp, #28]
90018826:	44a4      	add	ip, r4
90018828:	f8a2 10b2 	strh.w	r1, [r2, #178]	; 0xb2
9001882c:	f8a2 30ae 	strh.w	r3, [r2, #174]	; 0xae
90018830:	e75e      	b.n	900186f0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
90018832:	9904      	ldr	r1, [sp, #16]
90018834:	f8a2 50b0 	strh.w	r5, [r2, #176]	; 0xb0
90018838:	f8a2 10ac 	strh.w	r1, [r2, #172]	; 0xac
9001883c:	4433      	add	r3, r6
9001883e:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
90018842:	e5df      	b.n	90018404 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
90018844:	9f06      	ldr	r7, [sp, #24]
90018846:	9b04      	ldr	r3, [sp, #16]
90018848:	1bc9      	subs	r1, r1, r7
9001884a:	fa0f f78a 	sxth.w	r7, sl
9001884e:	b289      	uxth	r1, r1
90018850:	429f      	cmp	r7, r3
90018852:	fa0f fe81 	sxth.w	lr, r1
90018856:	dd23      	ble.n	900188a0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4c8>
90018858:	9a05      	ldr	r2, [sp, #20]
9001885a:	eba9 0000 	sub.w	r0, r9, r0
9001885e:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
90018862:	ebaa 0202 	sub.w	r2, sl, r2
90018866:	9d07      	ldr	r5, [sp, #28]
90018868:	fb0e f000 	mul.w	r0, lr, r0
9001886c:	b292      	uxth	r2, r2
9001886e:	eba5 0a03 	sub.w	sl, r5, r3
90018872:	9b02      	ldr	r3, [sp, #8]
90018874:	b214      	sxth	r4, r2
90018876:	00db      	lsls	r3, r3, #3
90018878:	fb04 fa0a 	mul.w	sl, r4, sl
9001887c:	445b      	add	r3, fp
9001887e:	4550      	cmp	r0, sl
90018880:	db03      	blt.n	9001888a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4b2>
90018882:	f8a3 e0b2 	strh.w	lr, [r3, #178]	; 0xb2
90018886:	4494      	add	ip, r2
90018888:	e732      	b.n	900186f0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
9001888a:	9a04      	ldr	r2, [sp, #16]
9001888c:	4431      	add	r1, r6
9001888e:	f8a3 40b0 	strh.w	r4, [r3, #176]	; 0xb0
90018892:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
90018896:	f8b3 30ae 	ldrh.w	r3, [r3, #174]	; 0xae
9001889a:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
9001889e:	e75c      	b.n	9001875a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x382>
900188a0:	9b08      	ldr	r3, [sp, #32]
900188a2:	2d06      	cmp	r5, #6
900188a4:	eba3 0308 	sub.w	r3, r3, r8
900188a8:	b29b      	uxth	r3, r3
900188aa:	b218      	sxth	r0, r3
900188ac:	d813      	bhi.n	900188d6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4fe>
900188ae:	9b07      	ldr	r3, [sp, #28]
900188b0:	f8a4 00aa 	strh.w	r0, [r4, #170]	; 0xaa
900188b4:	f8a4 30a6 	strh.w	r3, [r4, #166]	; 0xa6
900188b8:	1c6b      	adds	r3, r5, #1
900188ba:	9901      	ldr	r1, [sp, #4]
900188bc:	f8ab 30ec 	strh.w	r3, [fp, #236]	; 0xec
900188c0:	9b01      	ldr	r3, [sp, #4]
900188c2:	f821 9035 	strh.w	r9, [r1, r5, lsl #3]
900188c6:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
900188ca:	805a      	strh	r2, [r3, #2]
900188cc:	9a09      	ldr	r2, [sp, #36]	; 0x24
900188ce:	f8a3 e006 	strh.w	lr, [r3, #6]
900188d2:	809a      	strh	r2, [r3, #4]
900188d4:	e75f      	b.n	90018796 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3be>
900188d6:	9c02      	ldr	r4, [sp, #8]
900188d8:	4570      	cmp	r0, lr
900188da:	ea4f 04c4 	mov.w	r4, r4, lsl #3
900188de:	db0d      	blt.n	900188fc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x524>
900188e0:	4431      	add	r1, r6
900188e2:	9b06      	ldr	r3, [sp, #24]
900188e4:	445c      	add	r4, fp
900188e6:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
900188ea:	b289      	uxth	r1, r1
900188ec:	f8a4 00b2 	strh.w	r0, [r4, #178]	; 0xb2
900188f0:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
900188f4:	4419      	add	r1, r3
900188f6:	f8a4 10ae 	strh.w	r1, [r4, #174]	; 0xae
900188fa:	e583      	b.n	90018404 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
900188fc:	445c      	add	r4, fp
900188fe:	f8a4 e0b2 	strh.w	lr, [r4, #178]	; 0xb2
90018902:	e79b      	b.n	9001883c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x464>
90018904:	f8bb 60ec 	ldrh.w	r6, [fp, #236]	; 0xec
90018908:	2e07      	cmp	r6, #7
9001890a:	ea4f 04c6 	mov.w	r4, r6, lsl #3
9001890e:	d812      	bhi.n	90018936 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x55e>
90018910:	1c75      	adds	r5, r6, #1
90018912:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	; 0x28
90018916:	f9bd 102a 	ldrsh.w	r1, [sp, #42]	; 0x2a
9001891a:	f8ab 50ec 	strh.w	r5, [fp, #236]	; 0xec
9001891e:	9d01      	ldr	r5, [sp, #4]
90018920:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	; 0x2c
90018924:	442c      	add	r4, r5
90018926:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	; 0x2e
9001892a:	f825 0036 	strh.w	r0, [r5, r6, lsl #3]
9001892e:	8061      	strh	r1, [r4, #2]
90018930:	80a2      	strh	r2, [r4, #4]
90018932:	80e3      	strh	r3, [r4, #6]
90018934:	e5d0      	b.n	900184d8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
90018936:	f10b 03ac 	add.w	r3, fp, #172	; 0xac
9001893a:	3e01      	subs	r6, #1
9001893c:	445c      	add	r4, fp
9001893e:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
90018942:	f04f 37ff 	mov.w	r7, #4294967295
90018946:	2500      	movs	r5, #0
90018948:	9305      	str	r3, [sp, #20]
9001894a:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	; 0xa8
9001894e:	1e72      	subs	r2, r6, #1
90018950:	9302      	str	r3, [sp, #8]
90018952:	4691      	mov	r9, r2
90018954:	f9b4 30aa 	ldrsh.w	r3, [r4, #170]	; 0xaa
90018958:	9304      	str	r3, [sp, #16]
9001895a:	f104 03a4 	add.w	r3, r4, #164	; 0xa4
9001895e:	f1b9 3fff 	cmp.w	r9, #4294967295
90018962:	6818      	ldr	r0, [r3, #0]
90018964:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
90018968:	9207      	str	r2, [sp, #28]
9001896a:	bf16      	itet	ne
9001896c:	9905      	ldrne	r1, [sp, #20]
9001896e:	f8dd e00c 	ldreq.w	lr, [sp, #12]
90018972:	eb01 0ec9 	addne.w	lr, r1, r9, lsl #3
90018976:	9306      	str	r3, [sp, #24]
90018978:	f8be 1006 	ldrh.w	r1, [lr, #6]
9001897c:	f8be 8004 	ldrh.w	r8, [lr, #4]
90018980:	fb18 f801 	smulbb	r8, r8, r1
90018984:	6859      	ldr	r1, [r3, #4]
90018986:	e8ac 0003 	stmia.w	ip!, {r0, r1}
9001898a:	4671      	mov	r1, lr
9001898c:	a80c      	add	r0, sp, #48	; 0x30
9001898e:	f7fb ff78 	bl	90014882 <_ZN8touchgfx4Rect11expandToFitERKS0_>
90018992:	f8bd 1036 	ldrh.w	r1, [sp, #54]	; 0x36
90018996:	f8bd 0034 	ldrh.w	r0, [sp, #52]	; 0x34
9001899a:	f04f 0c08 	mov.w	ip, #8
9001899e:	9b04      	ldr	r3, [sp, #16]
900189a0:	9a02      	ldr	r2, [sp, #8]
900189a2:	fb10 f001 	smulbb	r0, r0, r1
900189a6:	fb02 8803 	mla	r8, r2, r3, r8
900189aa:	eba0 0108 	sub.w	r1, r0, r8
900189ae:	fb90 f0fc 	sdiv	r0, r0, ip
900189b2:	4288      	cmp	r0, r1
900189b4:	dc20      	bgt.n	900189f8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x620>
900189b6:	4551      	cmp	r1, sl
900189b8:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
900189bc:	da03      	bge.n	900189c6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5ee>
900189be:	b1d9      	cbz	r1, 900189f8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x620>
900189c0:	468a      	mov	sl, r1
900189c2:	464f      	mov	r7, r9
900189c4:	4635      	mov	r5, r6
900189c6:	f109 39ff 	add.w	r9, r9, #4294967295
900189ca:	f119 0f02 	cmn.w	r9, #2
900189ce:	d1c6      	bne.n	9001895e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x586>
900189d0:	4616      	mov	r6, r2
900189d2:	3201      	adds	r2, #1
900189d4:	f1a4 0408 	sub.w	r4, r4, #8
900189d8:	d1b7      	bne.n	9001894a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x572>
900189da:	9b01      	ldr	r3, [sp, #4]
900189dc:	b2ac      	uxth	r4, r5
900189de:	00ed      	lsls	r5, r5, #3
900189e0:	1958      	adds	r0, r3, r5
900189e2:	1c7b      	adds	r3, r7, #1
900189e4:	d10b      	bne.n	900189fe <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x626>
900189e6:	4601      	mov	r1, r0
900189e8:	9803      	ldr	r0, [sp, #12]
900189ea:	f7fb ff4a 	bl	90014882 <_ZN8touchgfx4Rect11expandToFitERKS0_>
900189ee:	4621      	mov	r1, r4
900189f0:	9801      	ldr	r0, [sp, #4]
900189f2:	f7ff fcdd 	bl	900183b0 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
900189f6:	e505      	b.n	90018404 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
900189f8:	464f      	mov	r7, r9
900189fa:	4635      	mov	r5, r6
900189fc:	e7ed      	b.n	900189da <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x602>
900189fe:	9b01      	ldr	r3, [sp, #4]
90018a00:	00ff      	lsls	r7, r7, #3
90018a02:	445d      	add	r5, fp
90018a04:	19d9      	adds	r1, r3, r7
90018a06:	445f      	add	r7, fp
90018a08:	f7fb ff3b 	bl	90014882 <_ZN8touchgfx4Rect11expandToFitERKS0_>
90018a0c:	9b03      	ldr	r3, [sp, #12]
90018a0e:	cb03      	ldmia	r3!, {r0, r1}
90018a10:	9b03      	ldr	r3, [sp, #12]
90018a12:	f8c7 00ac 	str.w	r0, [r7, #172]	; 0xac
90018a16:	f8c7 10b0 	str.w	r1, [r7, #176]	; 0xb0
90018a1a:	f855 0fac 	ldr.w	r0, [r5, #172]!
90018a1e:	6869      	ldr	r1, [r5, #4]
90018a20:	c303      	stmia	r3!, {r0, r1}
90018a22:	e7e4      	b.n	900189ee <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x616>

90018a24 <_ZN8touchgfx11Application10invalidateEv>:
90018a24:	4b09      	ldr	r3, [pc, #36]	; (90018a4c <_ZN8touchgfx11Application10invalidateEv+0x28>)
90018a26:	b082      	sub	sp, #8
90018a28:	2100      	movs	r1, #0
90018a2a:	f9b3 2000 	ldrsh.w	r2, [r3]
90018a2e:	4b08      	ldr	r3, [pc, #32]	; (90018a50 <_ZN8touchgfx11Application10invalidateEv+0x2c>)
90018a30:	9100      	str	r1, [sp, #0]
90018a32:	f9b3 3000 	ldrsh.w	r3, [r3]
90018a36:	f8ad 2004 	strh.w	r2, [sp, #4]
90018a3a:	f8ad 3006 	strh.w	r3, [sp, #6]
90018a3e:	ab02      	add	r3, sp, #8
90018a40:	e913 0006 	ldmdb	r3, {r1, r2}
90018a44:	b002      	add	sp, #8
90018a46:	f7ff bcc7 	b.w	900183d8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
90018a4a:	bf00      	nop
90018a4c:	240281e0 	.word	0x240281e0
90018a50:	240281e2 	.word	0x240281e2

90018a54 <_ZN8touchgfx11Application15drawCachedAreasEv>:
90018a54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90018a58:	f500 7698 	add.w	r6, r0, #304	; 0x130
90018a5c:	b09b      	sub	sp, #108	; 0x6c
90018a5e:	4604      	mov	r4, r0
90018a60:	4630      	mov	r0, r6
90018a62:	f7fa f9ea 	bl	90012e3a <_ZNK8touchgfx4Rect7isEmptyEv>
90018a66:	4605      	mov	r5, r0
90018a68:	b940      	cbnz	r0, 90018a7c <_ZN8touchgfx11Application15drawCachedAreasEv+0x28>
90018a6a:	4620      	mov	r0, r4
90018a6c:	e896 0006 	ldmia.w	r6, {r1, r2}
90018a70:	f7ff fcb2 	bl	900183d8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
90018a74:	f8c4 5130 	str.w	r5, [r4, #304]	; 0x130
90018a78:	f8c4 5134 	str.w	r5, [r4, #308]	; 0x134
90018a7c:	4bc8      	ldr	r3, [pc, #800]	; (90018da0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x34c>)
90018a7e:	681b      	ldr	r3, [r3, #0]
90018a80:	2b00      	cmp	r3, #0
90018a82:	d03e      	beq.n	90018b02 <_ZN8touchgfx11Application15drawCachedAreasEv+0xae>
90018a84:	4dc7      	ldr	r5, [pc, #796]	; (90018da4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x350>)
90018a86:	4628      	mov	r0, r5
90018a88:	f7fa f9d7 	bl	90012e3a <_ZNK8touchgfx4Rect7isEmptyEv>
90018a8c:	4606      	mov	r6, r0
90018a8e:	2800      	cmp	r0, #0
90018a90:	d137      	bne.n	90018b02 <_ZN8touchgfx11Application15drawCachedAreasEv+0xae>
90018a92:	4628      	mov	r0, r5
90018a94:	f7ff f9dc 	bl	90017e50 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
90018a98:	6829      	ldr	r1, [r5, #0]
90018a9a:	686a      	ldr	r2, [r5, #4]
90018a9c:	4620      	mov	r0, r4
90018a9e:	f7ff fc9b 	bl	900183d8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
90018aa2:	802e      	strh	r6, [r5, #0]
90018aa4:	806e      	strh	r6, [r5, #2]
90018aa6:	80ae      	strh	r6, [r5, #4]
90018aa8:	80ee      	strh	r6, [r5, #6]
90018aaa:	ae09      	add	r6, sp, #36	; 0x24
90018aac:	4630      	mov	r0, r6
90018aae:	f7ff fc24 	bl	900182fa <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
90018ab2:	4abd      	ldr	r2, [pc, #756]	; (90018da8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x354>)
90018ab4:	f8b4 70ec 	ldrh.w	r7, [r4, #236]	; 0xec
90018ab8:	f104 00ac 	add.w	r0, r4, #172	; 0xac
90018abc:	8815      	ldrh	r5, [r2, #0]
90018abe:	9202      	str	r2, [sp, #8]
90018ac0:	462b      	mov	r3, r5
90018ac2:	429f      	cmp	r7, r3
90018ac4:	d924      	bls.n	90018b10 <_ZN8touchgfx11Application15drawCachedAreasEv+0xbc>
90018ac6:	f8bd 1064 	ldrh.w	r1, [sp, #100]	; 0x64
90018aca:	2907      	cmp	r1, #7
90018acc:	d816      	bhi.n	90018afc <_ZN8touchgfx11Application15drawCachedAreasEv+0xa8>
90018ace:	eb00 02c3 	add.w	r2, r0, r3, lsl #3
90018ad2:	f930 8033 	ldrsh.w	r8, [r0, r3, lsl #3]
90018ad6:	f9b2 9002 	ldrsh.w	r9, [r2, #2]
90018ada:	f9b2 e004 	ldrsh.w	lr, [r2, #4]
90018ade:	f9b2 c006 	ldrsh.w	ip, [r2, #6]
90018ae2:	1c4a      	adds	r2, r1, #1
90018ae4:	f8ad 2064 	strh.w	r2, [sp, #100]	; 0x64
90018ae8:	eb06 02c1 	add.w	r2, r6, r1, lsl #3
90018aec:	f826 8031 	strh.w	r8, [r6, r1, lsl #3]
90018af0:	f8a2 9002 	strh.w	r9, [r2, #2]
90018af4:	f8a2 e004 	strh.w	lr, [r2, #4]
90018af8:	f8a2 c006 	strh.w	ip, [r2, #6]
90018afc:	3301      	adds	r3, #1
90018afe:	b29b      	uxth	r3, r3
90018b00:	e7df      	b.n	90018ac2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x6e>
90018b02:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	; 0xec
90018b06:	2b00      	cmp	r3, #0
90018b08:	d1cf      	bne.n	90018aaa <_ZN8touchgfx11Application15drawCachedAreasEv+0x56>
90018b0a:	b01b      	add	sp, #108	; 0x6c
90018b0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90018b10:	462f      	mov	r7, r5
90018b12:	f8b4 312e 	ldrh.w	r3, [r4, #302]	; 0x12e
90018b16:	42bb      	cmp	r3, r7
90018b18:	d90b      	bls.n	90018b32 <_ZN8touchgfx11Application15drawCachedAreasEv+0xde>
90018b1a:	eb04 03c7 	add.w	r3, r4, r7, lsl #3
90018b1e:	3701      	adds	r7, #1
90018b20:	4620      	mov	r0, r4
90018b22:	f8d3 10ee 	ldr.w	r1, [r3, #238]	; 0xee
90018b26:	b2bf      	uxth	r7, r7
90018b28:	f8d3 20f2 	ldr.w	r2, [r3, #242]	; 0xf2
90018b2c:	f7ff fc54 	bl	900183d8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
90018b30:	e7ef      	b.n	90018b12 <_ZN8touchgfx11Application15drawCachedAreasEv+0xbe>
90018b32:	4a9e      	ldr	r2, [pc, #632]	; (90018dac <_ZN8touchgfx11Application15drawCachedAreasEv+0x358>)
90018b34:	6813      	ldr	r3, [r2, #0]
90018b36:	4690      	mov	r8, r2
90018b38:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
90018b3c:	2b01      	cmp	r3, #1
90018b3e:	f040 80e4 	bne.w	90018d0a <_ZN8touchgfx11Application15drawCachedAreasEv+0x2b6>
90018b42:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
90018b46:	4629      	mov	r1, r5
90018b48:	f8b4 70ec 	ldrh.w	r7, [r4, #236]	; 0xec
90018b4c:	2500      	movs	r5, #0
90018b4e:	33ae      	adds	r3, #174	; 0xae
90018b50:	428f      	cmp	r7, r1
90018b52:	f103 0308 	add.w	r3, r3, #8
90018b56:	dd0a      	ble.n	90018b6e <_ZN8touchgfx11Application15drawCachedAreasEv+0x11a>
90018b58:	f833 2c08 	ldrh.w	r2, [r3, #-8]
90018b5c:	3101      	adds	r1, #1
90018b5e:	f833 0c04 	ldrh.w	r0, [r3, #-4]
90018b62:	4402      	add	r2, r0
90018b64:	b212      	sxth	r2, r2
90018b66:	4295      	cmp	r5, r2
90018b68:	bfb8      	it	lt
90018b6a:	4615      	movlt	r5, r2
90018b6c:	e7f0      	b.n	90018b50 <_ZN8touchgfx11Application15drawCachedAreasEv+0xfc>
90018b6e:	4b90      	ldr	r3, [pc, #576]	; (90018db0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x35c>)
90018b70:	f8df b238 	ldr.w	fp, [pc, #568]	; 90018dac <_ZN8touchgfx11Application15drawCachedAreasEv+0x358>
90018b74:	881b      	ldrh	r3, [r3, #0]
90018b76:	46d8      	mov	r8, fp
90018b78:	2b0f      	cmp	r3, #15
90018b7a:	bf8c      	ite	hi
90018b7c:	ea4f 0ad3 	movhi.w	sl, r3, lsr #3
90018b80:	f04f 0a01 	movls.w	sl, #1
90018b84:	2300      	movs	r3, #0
90018b86:	e9cd 3305 	strd	r3, r3, [sp, #20]
90018b8a:	f8bd 701a 	ldrh.w	r7, [sp, #26]
90018b8e:	f8bd 0016 	ldrh.w	r0, [sp, #22]
90018b92:	4438      	add	r0, r7
90018b94:	b207      	sxth	r7, r0
90018b96:	f8db 0000 	ldr.w	r0, [fp]
90018b9a:	42bd      	cmp	r5, r7
90018b9c:	6803      	ldr	r3, [r0, #0]
90018b9e:	f340 8084 	ble.w	90018caa <_ZN8touchgfx11Application15drawCachedAreasEv+0x256>
90018ba2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
90018ba6:	4798      	blx	r3
90018ba8:	eb07 030a 	add.w	r3, r7, sl
90018bac:	4298      	cmp	r0, r3
90018bae:	da07      	bge.n	90018bc0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x16c>
90018bb0:	4285      	cmp	r5, r0
90018bb2:	dd05      	ble.n	90018bc0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x16c>
90018bb4:	4287      	cmp	r7, r0
90018bb6:	dd6d      	ble.n	90018c94 <_ZN8touchgfx11Application15drawCachedAreasEv+0x240>
90018bb8:	2f00      	cmp	r7, #0
90018bba:	dd6b      	ble.n	90018c94 <_ZN8touchgfx11Application15drawCachedAreasEv+0x240>
90018bbc:	4628      	mov	r0, r5
90018bbe:	e004      	b.n	90018bca <_ZN8touchgfx11Application15drawCachedAreasEv+0x176>
90018bc0:	4287      	cmp	r7, r0
90018bc2:	dcfb      	bgt.n	90018bbc <_ZN8touchgfx11Application15drawCachedAreasEv+0x168>
90018bc4:	42a8      	cmp	r0, r5
90018bc6:	bfa8      	it	ge
90018bc8:	4628      	movge	r0, r5
90018bca:	4b7a      	ldr	r3, [pc, #488]	; (90018db4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x360>)
90018bcc:	1bc0      	subs	r0, r0, r7
90018bce:	2200      	movs	r2, #0
90018bd0:	f8ad 7016 	strh.w	r7, [sp, #22]
90018bd4:	f9b3 3000 	ldrsh.w	r3, [r3]
90018bd8:	f8ad 2014 	strh.w	r2, [sp, #20]
90018bdc:	f8ad 3018 	strh.w	r3, [sp, #24]
90018be0:	9b02      	ldr	r3, [sp, #8]
90018be2:	f8ad 001a 	strh.w	r0, [sp, #26]
90018be6:	881f      	ldrh	r7, [r3, #0]
90018be8:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	; 0xec
90018bec:	42bb      	cmp	r3, r7
90018bee:	d9cc      	bls.n	90018b8a <_ZN8touchgfx11Application15drawCachedAreasEv+0x136>
90018bf0:	eb04 02c7 	add.w	r2, r4, r7, lsl #3
90018bf4:	ab07      	add	r3, sp, #28
90018bf6:	f852 0fac 	ldr.w	r0, [r2, #172]!
90018bfa:	6851      	ldr	r1, [r2, #4]
90018bfc:	c303      	stmia	r3!, {r0, r1}
90018bfe:	a905      	add	r1, sp, #20
90018c00:	a807      	add	r0, sp, #28
90018c02:	f7ff f9e2 	bl	90017fca <_ZNK8touchgfx4Rect9intersectERKS0_>
90018c06:	2800      	cmp	r0, #0
90018c08:	d04c      	beq.n	90018ca4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x250>
90018c0a:	f9bd 001c 	ldrsh.w	r0, [sp, #28]
90018c0e:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
90018c12:	f8bd 9020 	ldrh.w	r9, [sp, #32]
90018c16:	4686      	mov	lr, r0
90018c18:	4290      	cmp	r0, r2
90018c1a:	f9bd 101e 	ldrsh.w	r1, [sp, #30]
90018c1e:	4448      	add	r0, r9
90018c20:	f8bd 9018 	ldrh.w	r9, [sp, #24]
90018c24:	bfb8      	it	lt
90018c26:	4696      	movlt	lr, r2
90018c28:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
90018c2c:	444a      	add	r2, r9
90018c2e:	b280      	uxth	r0, r0
90018c30:	4299      	cmp	r1, r3
90018c32:	468c      	mov	ip, r1
90018c34:	b292      	uxth	r2, r2
90018c36:	9303      	str	r3, [sp, #12]
90018c38:	bfb8      	it	lt
90018c3a:	469c      	movlt	ip, r3
90018c3c:	b203      	sxth	r3, r0
90018c3e:	fa0f f982 	sxth.w	r9, r2
90018c42:	f8ad e01c 	strh.w	lr, [sp, #28]
90018c46:	f8ad c01e 	strh.w	ip, [sp, #30]
90018c4a:	454b      	cmp	r3, r9
90018c4c:	bfb8      	it	lt
90018c4e:	4602      	movlt	r2, r0
90018c50:	9b03      	ldr	r3, [sp, #12]
90018c52:	eba2 020e 	sub.w	r2, r2, lr
90018c56:	f8ad 2020 	strh.w	r2, [sp, #32]
90018c5a:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
90018c5e:	4411      	add	r1, r2
90018c60:	f8bd 201a 	ldrh.w	r2, [sp, #26]
90018c64:	4413      	add	r3, r2
90018c66:	b289      	uxth	r1, r1
90018c68:	b29b      	uxth	r3, r3
90018c6a:	b208      	sxth	r0, r1
90018c6c:	b21a      	sxth	r2, r3
90018c6e:	4290      	cmp	r0, r2
90018c70:	bfb8      	it	lt
90018c72:	460b      	movlt	r3, r1
90018c74:	eba3 030c 	sub.w	r3, r3, ip
90018c78:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
90018c7c:	a807      	add	r0, sp, #28
90018c7e:	f7fa f8dc 	bl	90012e3a <_ZNK8touchgfx4Rect7isEmptyEv>
90018c82:	b920      	cbnz	r0, 90018c8e <_ZN8touchgfx11Application15drawCachedAreasEv+0x23a>
90018c84:	6823      	ldr	r3, [r4, #0]
90018c86:	a907      	add	r1, sp, #28
90018c88:	4620      	mov	r0, r4
90018c8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
90018c8c:	4798      	blx	r3
90018c8e:	3701      	adds	r7, #1
90018c90:	b2bf      	uxth	r7, r7
90018c92:	e7a9      	b.n	90018be8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x194>
90018c94:	f8d8 0000 	ldr.w	r0, [r8]
90018c98:	2101      	movs	r1, #1
90018c9a:	6803      	ldr	r3, [r0, #0]
90018c9c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
90018ca0:	4798      	blx	r3
90018ca2:	e772      	b.n	90018b8a <_ZN8touchgfx11Application15drawCachedAreasEv+0x136>
90018ca4:	e9cd 0007 	strd	r0, r0, [sp, #28]
90018ca8:	e7e8      	b.n	90018c7c <_ZN8touchgfx11Application15drawCachedAreasEv+0x228>
90018caa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
90018cac:	4798      	blx	r3
90018cae:	4b42      	ldr	r3, [pc, #264]	; (90018db8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x364>)
90018cb0:	781b      	ldrb	r3, [r3, #0]
90018cb2:	2b00      	cmp	r3, #0
90018cb4:	f43f af29 	beq.w	90018b0a <_ZN8touchgfx11Application15drawCachedAreasEv+0xb6>
90018cb8:	2300      	movs	r3, #0
90018cba:	f8bd 5064 	ldrh.w	r5, [sp, #100]	; 0x64
90018cbe:	f104 00ee 	add.w	r0, r4, #238	; 0xee
90018cc2:	f8a4 312e 	strh.w	r3, [r4, #302]	; 0x12e
90018cc6:	9b02      	ldr	r3, [sp, #8]
90018cc8:	881b      	ldrh	r3, [r3, #0]
90018cca:	429d      	cmp	r5, r3
90018ccc:	f67f af1d 	bls.w	90018b0a <_ZN8touchgfx11Application15drawCachedAreasEv+0xb6>
90018cd0:	f8b4 112e 	ldrh.w	r1, [r4, #302]	; 0x12e
90018cd4:	2907      	cmp	r1, #7
90018cd6:	d815      	bhi.n	90018d04 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2b0>
90018cd8:	eb06 02c3 	add.w	r2, r6, r3, lsl #3
90018cdc:	f936 8033 	ldrsh.w	r8, [r6, r3, lsl #3]
90018ce0:	f9b2 e002 	ldrsh.w	lr, [r2, #2]
90018ce4:	f9b2 c004 	ldrsh.w	ip, [r2, #4]
90018ce8:	f9b2 7006 	ldrsh.w	r7, [r2, #6]
90018cec:	1c4a      	adds	r2, r1, #1
90018cee:	f8a4 212e 	strh.w	r2, [r4, #302]	; 0x12e
90018cf2:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
90018cf6:	f820 8031 	strh.w	r8, [r0, r1, lsl #3]
90018cfa:	f8a2 e002 	strh.w	lr, [r2, #2]
90018cfe:	f8a2 c004 	strh.w	ip, [r2, #4]
90018d02:	80d7      	strh	r7, [r2, #6]
90018d04:	3301      	adds	r3, #1
90018d06:	b29b      	uxth	r3, r3
90018d08:	e7df      	b.n	90018cca <_ZN8touchgfx11Application15drawCachedAreasEv+0x276>
90018d0a:	2b02      	cmp	r3, #2
90018d0c:	f040 8135 	bne.w	90018f7a <_ZN8touchgfx11Application15drawCachedAreasEv+0x526>
90018d10:	4b2a      	ldr	r3, [pc, #168]	; (90018dbc <_ZN8touchgfx11Application15drawCachedAreasEv+0x368>)
90018d12:	f104 09ac 	add.w	r9, r4, #172	; 0xac
90018d16:	781b      	ldrb	r3, [r3, #0]
90018d18:	2b01      	cmp	r3, #1
90018d1a:	f000 809c 	beq.w	90018e56 <_ZN8touchgfx11Application15drawCachedAreasEv+0x402>
90018d1e:	9b02      	ldr	r3, [sp, #8]
90018d20:	f8b4 20ec 	ldrh.w	r2, [r4, #236]	; 0xec
90018d24:	f8b3 b000 	ldrh.w	fp, [r3]
90018d28:	f10b 0b01 	add.w	fp, fp, #1
90018d2c:	fa1f fb8b 	uxth.w	fp, fp
90018d30:	2a00      	cmp	r2, #0
90018d32:	d0bc      	beq.n	90018cae <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
90018d34:	f8b4 50ae 	ldrh.w	r5, [r4, #174]	; 0xae
90018d38:	4659      	mov	r1, fp
90018d3a:	f8b4 30b2 	ldrh.w	r3, [r4, #178]	; 0xb2
90018d3e:	f04f 0800 	mov.w	r8, #0
90018d42:	441d      	add	r5, r3
90018d44:	b22d      	sxth	r5, r5
90018d46:	b28b      	uxth	r3, r1
90018d48:	ea4f 07c8 	mov.w	r7, r8, lsl #3
90018d4c:	429a      	cmp	r2, r3
90018d4e:	f240 80c0 	bls.w	90018ed2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x47e>
90018d52:	4427      	add	r7, r4
90018d54:	eb04 0ec1 	add.w	lr, r4, r1, lsl #3
90018d58:	4608      	mov	r0, r1
90018d5a:	f9b7 30ae 	ldrsh.w	r3, [r7, #174]	; 0xae
90018d5e:	f9be c0ae 	ldrsh.w	ip, [lr, #174]	; 0xae
90018d62:	4563      	cmp	r3, ip
90018d64:	f340 80a2 	ble.w	90018eac <_ZN8touchgfx11Application15drawCachedAreasEv+0x458>
90018d68:	f8be 50b2 	ldrh.w	r5, [lr, #178]	; 0xb2
90018d6c:	4465      	add	r5, ip
90018d6e:	b22d      	sxth	r5, r5
90018d70:	429d      	cmp	r5, r3
90018d72:	bfa8      	it	ge
90018d74:	461d      	movge	r5, r3
90018d76:	3101      	adds	r1, #1
90018d78:	4680      	mov	r8, r0
90018d7a:	e7e4      	b.n	90018d46 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2f2>
90018d7c:	d10b      	bne.n	90018d96 <_ZN8touchgfx11Application15drawCachedAreasEv+0x342>
90018d7e:	f9b5 c0b2 	ldrsh.w	ip, [r5, #178]	; 0xb2
90018d82:	f9ba 10b2 	ldrsh.w	r1, [sl, #178]	; 0xb2
90018d86:	458c      	cmp	ip, r1
90018d88:	bfb4      	ite	lt
90018d8a:	469c      	movlt	ip, r3
90018d8c:	46bc      	movge	ip, r7
90018d8e:	4572      	cmp	r2, lr
90018d90:	bfb8      	it	lt
90018d92:	4672      	movlt	r2, lr
90018d94:	e087      	b.n	90018ea6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x452>
90018d96:	428a      	cmp	r2, r1
90018d98:	46bc      	mov	ip, r7
90018d9a:	bfb8      	it	lt
90018d9c:	460a      	movlt	r2, r1
90018d9e:	e082      	b.n	90018ea6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x452>
90018da0:	2402822c 	.word	0x2402822c
90018da4:	24028238 	.word	0x24028238
90018da8:	24000068 	.word	0x24000068
90018dac:	240281ec 	.word	0x240281ec
90018db0:	240281e2 	.word	0x240281e2
90018db4:	240281e0 	.word	0x240281e0
90018db8:	240281ea 	.word	0x240281ea
90018dbc:	240281e4 	.word	0x240281e4
90018dc0:	1961      	adds	r1, r4, r5
90018dc2:	ab07      	add	r3, sp, #28
90018dc4:	f851 0fac 	ldr.w	r0, [r1, #172]!
90018dc8:	6849      	ldr	r1, [r1, #4]
90018dca:	c303      	stmia	r3!, {r0, r1}
90018dcc:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
90018dd0:	a807      	add	r0, sp, #28
90018dd2:	f8bd 101c 	ldrh.w	r1, [sp, #28]
90018dd6:	2b13      	cmp	r3, #19
90018dd8:	440b      	add	r3, r1
90018dda:	bfd8      	it	le
90018ddc:	f9bd 201c 	ldrshle.w	r2, [sp, #28]
90018de0:	1a9b      	subs	r3, r3, r2
90018de2:	f8ad 201c 	strh.w	r2, [sp, #28]
90018de6:	f8ad 3020 	strh.w	r3, [sp, #32]
90018dea:	f7ff f84b 	bl	90017e84 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
90018dee:	a807      	add	r0, sp, #28
90018df0:	f7fa f823 	bl	90012e3a <_ZNK8touchgfx4Rect7isEmptyEv>
90018df4:	bb78      	cbnz	r0, 90018e56 <_ZN8touchgfx11Application15drawCachedAreasEv+0x402>
90018df6:	f9bd c022 	ldrsh.w	ip, [sp, #34]	; 0x22
90018dfa:	4425      	add	r5, r4
90018dfc:	f8d8 0000 	ldr.w	r0, [r8]
90018e00:	f1bc 0f14 	cmp.w	ip, #20
90018e04:	f8bd 3020 	ldrh.w	r3, [sp, #32]
90018e08:	f8d0 e000 	ldr.w	lr, [r0]
90018e0c:	bfa8      	it	ge
90018e0e:	f04f 0c14 	movge.w	ip, #20
90018e12:	f8bd 201e 	ldrh.w	r2, [sp, #30]
90018e16:	f8bd 101c 	ldrh.w	r1, [sp, #28]
90018e1a:	fa1f fc8c 	uxth.w	ip, ip
90018e1e:	f8cd c000 	str.w	ip, [sp]
90018e22:	f8de a090 	ldr.w	sl, [lr, #144]	; 0x90
90018e26:	47d0      	blx	sl
90018e28:	4682      	mov	sl, r0
90018e2a:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
90018e2e:	a807      	add	r0, sp, #28
90018e30:	f7ff f80e 	bl	90017e50 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
90018e34:	6823      	ldr	r3, [r4, #0]
90018e36:	4620      	mov	r0, r4
90018e38:	a907      	add	r1, sp, #28
90018e3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
90018e3c:	4798      	blx	r3
90018e3e:	f8b5 00b0 	ldrh.w	r0, [r5, #176]	; 0xb0
90018e42:	eba0 000a 	sub.w	r0, r0, sl
90018e46:	b200      	sxth	r0, r0
90018e48:	f8a5 00b0 	strh.w	r0, [r5, #176]	; 0xb0
90018e4c:	b918      	cbnz	r0, 90018e56 <_ZN8touchgfx11Application15drawCachedAreasEv+0x402>
90018e4e:	b2b9      	uxth	r1, r7
90018e50:	4648      	mov	r0, r9
90018e52:	f7ff faad 	bl	900183b0 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
90018e56:	f8b4 b0ec 	ldrh.w	fp, [r4, #236]	; 0xec
90018e5a:	f1bb 0f00 	cmp.w	fp, #0
90018e5e:	f43f af26 	beq.w	90018cae <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
90018e62:	9b02      	ldr	r3, [sp, #8]
90018e64:	2700      	movs	r7, #0
90018e66:	f9b4 20ac 	ldrsh.w	r2, [r4, #172]	; 0xac
90018e6a:	881b      	ldrh	r3, [r3, #0]
90018e6c:	3301      	adds	r3, #1
90018e6e:	b29b      	uxth	r3, r3
90018e70:	b299      	uxth	r1, r3
90018e72:	00fd      	lsls	r5, r7, #3
90018e74:	458b      	cmp	fp, r1
90018e76:	d9a3      	bls.n	90018dc0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x36c>
90018e78:	4425      	add	r5, r4
90018e7a:	eb04 0ac3 	add.w	sl, r4, r3, lsl #3
90018e7e:	469c      	mov	ip, r3
90018e80:	f8b5 10b0 	ldrh.w	r1, [r5, #176]	; 0xb0
90018e84:	f8b5 00ac 	ldrh.w	r0, [r5, #172]	; 0xac
90018e88:	f9ba e0ac 	ldrsh.w	lr, [sl, #172]	; 0xac
90018e8c:	4408      	add	r0, r1
90018e8e:	f8ba 10b0 	ldrh.w	r1, [sl, #176]	; 0xb0
90018e92:	4471      	add	r1, lr
90018e94:	b200      	sxth	r0, r0
90018e96:	b209      	sxth	r1, r1
90018e98:	4288      	cmp	r0, r1
90018e9a:	f6bf af6f 	bge.w	90018d7c <_ZN8touchgfx11Application15drawCachedAreasEv+0x328>
90018e9e:	4586      	cmp	lr, r0
90018ea0:	4672      	mov	r2, lr
90018ea2:	bfb8      	it	lt
90018ea4:	4602      	movlt	r2, r0
90018ea6:	3301      	adds	r3, #1
90018ea8:	4667      	mov	r7, ip
90018eaa:	e7e1      	b.n	90018e70 <_ZN8touchgfx11Application15drawCachedAreasEv+0x41c>
90018eac:	d10c      	bne.n	90018ec8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x474>
90018eae:	f9b7 70b0 	ldrsh.w	r7, [r7, #176]	; 0xb0
90018eb2:	f9be 00b0 	ldrsh.w	r0, [lr, #176]	; 0xb0
90018eb6:	4287      	cmp	r7, r0
90018eb8:	bfb4      	ite	lt
90018eba:	4608      	movlt	r0, r1
90018ebc:	4640      	movge	r0, r8
90018ebe:	f8be 70b2 	ldrh.w	r7, [lr, #178]	; 0xb2
90018ec2:	443b      	add	r3, r7
90018ec4:	b21b      	sxth	r3, r3
90018ec6:	e753      	b.n	90018d70 <_ZN8touchgfx11Application15drawCachedAreasEv+0x31c>
90018ec8:	4565      	cmp	r5, ip
90018eca:	4640      	mov	r0, r8
90018ecc:	bfa8      	it	ge
90018ece:	4665      	movge	r5, ip
90018ed0:	e751      	b.n	90018d76 <_ZN8touchgfx11Application15drawCachedAreasEv+0x322>
90018ed2:	eb09 0007 	add.w	r0, r9, r7
90018ed6:	4427      	add	r7, r4
90018ed8:	9203      	str	r2, [sp, #12]
90018eda:	f9b7 a0b2 	ldrsh.w	sl, [r7, #178]	; 0xb2
90018ede:	f1ba 0f13 	cmp.w	sl, #19
90018ee2:	bfde      	ittt	le
90018ee4:	f8b7 50ae 	ldrhle.w	r5, [r7, #174]	; 0xae
90018ee8:	4455      	addle	r5, sl
90018eea:	b22d      	sxthle	r5, r5
90018eec:	f7f9 ffa5 	bl	90012e3a <_ZNK8touchgfx4Rect7isEmptyEv>
90018ef0:	9a03      	ldr	r2, [sp, #12]
90018ef2:	2800      	cmp	r0, #0
90018ef4:	f47f af1c 	bne.w	90018d30 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2dc>
90018ef8:	f9b7 20ae 	ldrsh.w	r2, [r7, #174]	; 0xae
90018efc:	fa1f fa8a 	uxth.w	sl, sl
90018f00:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
90018f04:	1aad      	subs	r5, r5, r2
90018f06:	4829      	ldr	r0, [pc, #164]	; (90018fac <_ZN8touchgfx11Application15drawCachedAreasEv+0x558>)
90018f08:	f9b7 10ac 	ldrsh.w	r1, [r7, #172]	; 0xac
90018f0c:	2d14      	cmp	r5, #20
90018f0e:	f9b7 30b0 	ldrsh.w	r3, [r7, #176]	; 0xb0
90018f12:	6800      	ldr	r0, [r0, #0]
90018f14:	bfa8      	it	ge
90018f16:	2514      	movge	r5, #20
90018f18:	f8ad 101c 	strh.w	r1, [sp, #28]
90018f1c:	f8ad 201e 	strh.w	r2, [sp, #30]
90018f20:	b289      	uxth	r1, r1
90018f22:	f8ad 3020 	strh.w	r3, [sp, #32]
90018f26:	b2ad      	uxth	r5, r5
90018f28:	f8d0 c000 	ldr.w	ip, [r0]
90018f2c:	b292      	uxth	r2, r2
90018f2e:	4555      	cmp	r5, sl
90018f30:	bf94      	ite	ls
90018f32:	9500      	strls	r5, [sp, #0]
90018f34:	f8cd a000 	strhi.w	sl, [sp]
90018f38:	b29b      	uxth	r3, r3
90018f3a:	f8dc 5090 	ldr.w	r5, [ip, #144]	; 0x90
90018f3e:	47a8      	blx	r5
90018f40:	6823      	ldr	r3, [r4, #0]
90018f42:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
90018f46:	a907      	add	r1, sp, #28
90018f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
90018f4a:	4620      	mov	r0, r4
90018f4c:	4798      	blx	r3
90018f4e:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
90018f52:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
90018f56:	f8b7 20ae 	ldrh.w	r2, [r7, #174]	; 0xae
90018f5a:	1a5b      	subs	r3, r3, r1
90018f5c:	440a      	add	r2, r1
90018f5e:	b21b      	sxth	r3, r3
90018f60:	f8a7 20ae 	strh.w	r2, [r7, #174]	; 0xae
90018f64:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
90018f68:	2b00      	cmp	r3, #0
90018f6a:	f47f aed8 	bne.w	90018d1e <_ZN8touchgfx11Application15drawCachedAreasEv+0x2ca>
90018f6e:	fa1f f188 	uxth.w	r1, r8
90018f72:	4648      	mov	r0, r9
90018f74:	f7ff fa1c 	bl	900183b0 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
90018f78:	e6d1      	b.n	90018d1e <_ZN8touchgfx11Application15drawCachedAreasEv+0x2ca>
90018f7a:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	; 0xec
90018f7e:	42ab      	cmp	r3, r5
90018f80:	f67f ae95 	bls.w	90018cae <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
90018f84:	eb04 02c5 	add.w	r2, r4, r5, lsl #3
90018f88:	ab07      	add	r3, sp, #28
90018f8a:	f852 0fac 	ldr.w	r0, [r2, #172]!
90018f8e:	6851      	ldr	r1, [r2, #4]
90018f90:	c303      	stmia	r3!, {r0, r1}
90018f92:	a807      	add	r0, sp, #28
90018f94:	f7f9 ff51 	bl	90012e3a <_ZNK8touchgfx4Rect7isEmptyEv>
90018f98:	b920      	cbnz	r0, 90018fa4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x550>
90018f9a:	6823      	ldr	r3, [r4, #0]
90018f9c:	a907      	add	r1, sp, #28
90018f9e:	4620      	mov	r0, r4
90018fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
90018fa2:	4798      	blx	r3
90018fa4:	3501      	adds	r5, #1
90018fa6:	b2ad      	uxth	r5, r5
90018fa8:	e7e7      	b.n	90018f7a <_ZN8touchgfx11Application15drawCachedAreasEv+0x526>
90018faa:	bf00      	nop
90018fac:	240281ec 	.word	0x240281ec

90018fb0 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE>:
90018fb0:	4b03      	ldr	r3, [pc, #12]	; (90018fc0 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE+0x10>)
90018fb2:	2200      	movs	r2, #0
90018fb4:	801a      	strh	r2, [r3, #0]
90018fb6:	805a      	strh	r2, [r3, #2]
90018fb8:	809a      	strh	r2, [r3, #4]
90018fba:	80da      	strh	r2, [r3, #6]
90018fbc:	4770      	bx	lr
90018fbe:	bf00      	nop
90018fc0:	24028238 	.word	0x24028238

90018fc4 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>:
90018fc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90018fc8:	b09d      	sub	sp, #116	; 0x74
90018fca:	4606      	mov	r6, r0
90018fcc:	4614      	mov	r4, r2
90018fce:	468a      	mov	sl, r1
90018fd0:	a803      	add	r0, sp, #12
90018fd2:	461d      	mov	r5, r3
90018fd4:	f000 fe79 	bl	90019cca <_ZN8touchgfx12TextProviderC1Ev>
90018fd8:	6833      	ldr	r3, [r6, #0]
90018fda:	4630      	mov	r0, r6
90018fdc:	f242 0b0b 	movw	fp, #8203	; 0x200b
90018fe0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
90018fe2:	4798      	blx	r3
90018fe4:	6833      	ldr	r3, [r6, #0]
90018fe6:	4607      	mov	r7, r0
90018fe8:	4630      	mov	r0, r6
90018fea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
90018fec:	4798      	blx	r3
90018fee:	462a      	mov	r2, r5
90018ff0:	2500      	movs	r5, #0
90018ff2:	4621      	mov	r1, r4
90018ff4:	9000      	str	r0, [sp, #0]
90018ff6:	463b      	mov	r3, r7
90018ff8:	462c      	mov	r4, r5
90018ffa:	46a9      	mov	r9, r5
90018ffc:	46a8      	mov	r8, r5
90018ffe:	a803      	add	r0, sp, #12
90019000:	f000 febe 	bl	90019d80 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
90019004:	2300      	movs	r3, #0
90019006:	9302      	str	r3, [sp, #8]
90019008:	f64f 63ff 	movw	r3, #65279	; 0xfeff
9001900c:	429c      	cmp	r4, r3
9001900e:	d002      	beq.n	90019016 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x52>
90019010:	455c      	cmp	r4, fp
90019012:	bf18      	it	ne
90019014:	4625      	movne	r5, r4
90019016:	ab02      	add	r3, sp, #8
90019018:	4632      	mov	r2, r6
9001901a:	4651      	mov	r1, sl
9001901c:	a803      	add	r0, sp, #12
9001901e:	f001 f9b5 	bl	9001a38c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
90019022:	4604      	mov	r4, r0
90019024:	b108      	cbz	r0, 9001902a <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x66>
90019026:	280a      	cmp	r0, #10
90019028:	d10a      	bne.n	90019040 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x7c>
9001902a:	45c1      	cmp	r9, r8
9001902c:	bf38      	it	cc
9001902e:	46c1      	movcc	r9, r8
90019030:	f04f 0800 	mov.w	r8, #0
90019034:	2c00      	cmp	r4, #0
90019036:	d1e5      	bne.n	90019004 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
90019038:	4648      	mov	r0, r9
9001903a:	b01d      	add	sp, #116	; 0x74
9001903c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90019040:	9a02      	ldr	r2, [sp, #8]
90019042:	2a00      	cmp	r2, #0
90019044:	d0de      	beq.n	90019004 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
90019046:	7b57      	ldrb	r7, [r2, #13]
90019048:	4629      	mov	r1, r5
9001904a:	6833      	ldr	r3, [r6, #0]
9001904c:	007f      	lsls	r7, r7, #1
9001904e:	8894      	ldrh	r4, [r2, #4]
90019050:	6c5b      	ldr	r3, [r3, #68]	; 0x44
90019052:	f407 7080 	and.w	r0, r7, #256	; 0x100
90019056:	7a97      	ldrb	r7, [r2, #10]
90019058:	4307      	orrs	r7, r0
9001905a:	4630      	mov	r0, r6
9001905c:	4798      	blx	r3
9001905e:	4438      	add	r0, r7
90019060:	4480      	add	r8, r0
90019062:	fa1f f888 	uxth.w	r8, r8
90019066:	e7e5      	b.n	90019034 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x70>

90019068 <_ZNK8touchgfx4Font12getCharWidthEt>:
90019068:	b508      	push	{r3, lr}
9001906a:	6803      	ldr	r3, [r0, #0]
9001906c:	68db      	ldr	r3, [r3, #12]
9001906e:	4798      	blx	r3
90019070:	b128      	cbz	r0, 9001907e <_ZNK8touchgfx4Font12getCharWidthEt+0x16>
90019072:	7b43      	ldrb	r3, [r0, #13]
90019074:	7a80      	ldrb	r0, [r0, #10]
90019076:	005b      	lsls	r3, r3, #1
90019078:	f403 7380 	and.w	r3, r3, #256	; 0x100
9001907c:	4318      	orrs	r0, r3
9001907e:	bd08      	pop	{r3, pc}

90019080 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz>:
90019080:	b40e      	push	{r1, r2, r3}
90019082:	b5f0      	push	{r4, r5, r6, r7, lr}
90019084:	b09e      	sub	sp, #120	; 0x78
90019086:	4605      	mov	r5, r0
90019088:	ab23      	add	r3, sp, #140	; 0x8c
9001908a:	a805      	add	r0, sp, #20
9001908c:	f853 4b04 	ldr.w	r4, [r3], #4
90019090:	9303      	str	r3, [sp, #12]
90019092:	f000 fe1a 	bl	90019cca <_ZN8touchgfx12TextProviderC1Ev>
90019096:	682b      	ldr	r3, [r5, #0]
90019098:	4628      	mov	r0, r5
9001909a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
9001909c:	4798      	blx	r3
9001909e:	682b      	ldr	r3, [r5, #0]
900190a0:	4606      	mov	r6, r0
900190a2:	4628      	mov	r0, r5
900190a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
900190a6:	4798      	blx	r3
900190a8:	4633      	mov	r3, r6
900190aa:	4621      	mov	r1, r4
900190ac:	ae1e      	add	r6, sp, #120	; 0x78
900190ae:	2400      	movs	r4, #0
900190b0:	9000      	str	r0, [sp, #0]
900190b2:	9a03      	ldr	r2, [sp, #12]
900190b4:	a805      	add	r0, sp, #20
900190b6:	f000 fe63 	bl	90019d80 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
900190ba:	f846 4d68 	str.w	r4, [r6, #-104]!
900190be:	462a      	mov	r2, r5
900190c0:	4633      	mov	r3, r6
900190c2:	4621      	mov	r1, r4
900190c4:	a805      	add	r0, sp, #20
900190c6:	f001 f961 	bl	9001a38c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
900190ca:	b300      	cbz	r0, 9001910e <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x8e>
900190cc:	280a      	cmp	r0, #10
900190ce:	d01a      	beq.n	90019106 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
900190d0:	9f04      	ldr	r7, [sp, #16]
900190d2:	b1c7      	cbz	r7, 90019106 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
900190d4:	7b78      	ldrb	r0, [r7, #13]
900190d6:	7a3b      	ldrb	r3, [r7, #8]
900190d8:	00c1      	lsls	r1, r0, #3
900190da:	88ea      	ldrh	r2, [r5, #6]
900190dc:	f401 7180 	and.w	r1, r1, #256	; 0x100
900190e0:	4319      	orrs	r1, r3
900190e2:	0643      	lsls	r3, r0, #25
900190e4:	ea4f 1000 	mov.w	r0, r0, lsl #4
900190e8:	bf48      	it	mi
900190ea:	f5a1 7300 	submi.w	r3, r1, #512	; 0x200
900190ee:	f400 7080 	and.w	r0, r0, #256	; 0x100
900190f2:	bf48      	it	mi
900190f4:	b219      	sxthmi	r1, r3
900190f6:	79fb      	ldrb	r3, [r7, #7]
900190f8:	4303      	orrs	r3, r0
900190fa:	4413      	add	r3, r2
900190fc:	1a5b      	subs	r3, r3, r1
900190fe:	b21b      	sxth	r3, r3
90019100:	429c      	cmp	r4, r3
90019102:	bfb8      	it	lt
90019104:	461c      	movlt	r4, r3
90019106:	4633      	mov	r3, r6
90019108:	462a      	mov	r2, r5
9001910a:	2100      	movs	r1, #0
9001910c:	e7da      	b.n	900190c4 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x44>
9001910e:	b2a0      	uxth	r0, r4
90019110:	b01e      	add	sp, #120	; 0x78
90019112:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
90019116:	b003      	add	sp, #12
90019118:	4770      	bx	lr

9001911a <_ZNK8touchgfx4Font20getMinimumTextHeightEv>:
9001911a:	7a43      	ldrb	r3, [r0, #9]
9001911c:	8880      	ldrh	r0, [r0, #4]
9001911e:	4418      	add	r0, r3
90019120:	b280      	uxth	r0, r0
90019122:	4770      	bx	lr

90019124 <_ZNK8touchgfx4Font13getFontHeightEv>:
90019124:	6803      	ldr	r3, [r0, #0]
90019126:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90019128:	4718      	bx	r3

9001912a <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz>:
9001912a:	b40e      	push	{r1, r2, r3}
9001912c:	b570      	push	{r4, r5, r6, lr}
9001912e:	b09d      	sub	sp, #116	; 0x74
90019130:	4604      	mov	r4, r0
90019132:	ab21      	add	r3, sp, #132	; 0x84
90019134:	a803      	add	r0, sp, #12
90019136:	f853 5b04 	ldr.w	r5, [r3], #4
9001913a:	9302      	str	r3, [sp, #8]
9001913c:	f000 fdc5 	bl	90019cca <_ZN8touchgfx12TextProviderC1Ev>
90019140:	6823      	ldr	r3, [r4, #0]
90019142:	4620      	mov	r0, r4
90019144:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
90019146:	4798      	blx	r3
90019148:	6823      	ldr	r3, [r4, #0]
9001914a:	4606      	mov	r6, r0
9001914c:	4620      	mov	r0, r4
9001914e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
90019150:	2401      	movs	r4, #1
90019152:	4798      	blx	r3
90019154:	4633      	mov	r3, r6
90019156:	9000      	str	r0, [sp, #0]
90019158:	4629      	mov	r1, r5
9001915a:	9a02      	ldr	r2, [sp, #8]
9001915c:	a803      	add	r0, sp, #12
9001915e:	f000 fe0f 	bl	90019d80 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
90019162:	a803      	add	r0, sp, #12
90019164:	f001 f9de 	bl	9001a524 <_ZN8touchgfx12TextProvider11getNextCharEv>
90019168:	b2a3      	uxth	r3, r4
9001916a:	b138      	cbz	r0, 9001917c <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x52>
9001916c:	280a      	cmp	r0, #10
9001916e:	a803      	add	r0, sp, #12
90019170:	bf04      	itt	eq
90019172:	3301      	addeq	r3, #1
90019174:	b21c      	sxtheq	r4, r3
90019176:	f001 f9d5 	bl	9001a524 <_ZN8touchgfx12TextProvider11getNextCharEv>
9001917a:	e7f5      	b.n	90019168 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x3e>
9001917c:	4618      	mov	r0, r3
9001917e:	b01d      	add	sp, #116	; 0x74
90019180:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
90019184:	b003      	add	sp, #12
90019186:	4770      	bx	lr

90019188 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz>:
90019188:	b40e      	push	{r1, r2, r3}
9001918a:	b5f0      	push	{r4, r5, r6, r7, lr}
9001918c:	b09e      	sub	sp, #120	; 0x78
9001918e:	4604      	mov	r4, r0
90019190:	ab23      	add	r3, sp, #140	; 0x8c
90019192:	a805      	add	r0, sp, #20
90019194:	f853 5b04 	ldr.w	r5, [r3], #4
90019198:	9303      	str	r3, [sp, #12]
9001919a:	f000 fd96 	bl	90019cca <_ZN8touchgfx12TextProviderC1Ev>
9001919e:	6823      	ldr	r3, [r4, #0]
900191a0:	4620      	mov	r0, r4
900191a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
900191a4:	4798      	blx	r3
900191a6:	6823      	ldr	r3, [r4, #0]
900191a8:	4606      	mov	r6, r0
900191aa:	4620      	mov	r0, r4
900191ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
900191ae:	4798      	blx	r3
900191b0:	4633      	mov	r3, r6
900191b2:	4629      	mov	r1, r5
900191b4:	9000      	str	r0, [sp, #0]
900191b6:	9a03      	ldr	r2, [sp, #12]
900191b8:	a805      	add	r0, sp, #20
900191ba:	f000 fde1 	bl	90019d80 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
900191be:	ad1e      	add	r5, sp, #120	; 0x78
900191c0:	2100      	movs	r1, #0
900191c2:	f647 76ff 	movw	r6, #32767	; 0x7fff
900191c6:	4622      	mov	r2, r4
900191c8:	a805      	add	r0, sp, #20
900191ca:	f845 1d68 	str.w	r1, [r5, #-104]!
900191ce:	462b      	mov	r3, r5
900191d0:	f001 f8dc 	bl	9001a38c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
900191d4:	b1d8      	cbz	r0, 9001920e <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x86>
900191d6:	280a      	cmp	r0, #10
900191d8:	d012      	beq.n	90019200 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x78>
900191da:	9804      	ldr	r0, [sp, #16]
900191dc:	b180      	cbz	r0, 90019200 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x78>
900191de:	7b47      	ldrb	r7, [r0, #13]
900191e0:	88e2      	ldrh	r2, [r4, #6]
900191e2:	00fb      	lsls	r3, r7, #3
900191e4:	f403 7180 	and.w	r1, r3, #256	; 0x100
900191e8:	7a03      	ldrb	r3, [r0, #8]
900191ea:	430b      	orrs	r3, r1
900191ec:	0679      	lsls	r1, r7, #25
900191ee:	bf44      	itt	mi
900191f0:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
900191f4:	b21b      	sxthmi	r3, r3
900191f6:	1ad3      	subs	r3, r2, r3
900191f8:	b21b      	sxth	r3, r3
900191fa:	429e      	cmp	r6, r3
900191fc:	bfa8      	it	ge
900191fe:	461e      	movge	r6, r3
90019200:	462b      	mov	r3, r5
90019202:	4622      	mov	r2, r4
90019204:	2100      	movs	r1, #0
90019206:	a805      	add	r0, sp, #20
90019208:	f001 f8c0 	bl	9001a38c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
9001920c:	e7e2      	b.n	900191d4 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x4c>
9001920e:	4630      	mov	r0, r6
90019210:	b01e      	add	sp, #120	; 0x78
90019212:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
90019216:	b003      	add	sp, #12
90019218:	4770      	bx	lr

9001921a <_ZNK8touchgfx8Drawable10invalidateEv>:
9001921a:	b513      	push	{r0, r1, r4, lr}
9001921c:	6803      	ldr	r3, [r0, #0]
9001921e:	2400      	movs	r4, #0
90019220:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
90019224:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
90019228:	f8ad 1004 	strh.w	r1, [sp, #4]
9001922c:	4669      	mov	r1, sp
9001922e:	691b      	ldr	r3, [r3, #16]
90019230:	9400      	str	r4, [sp, #0]
90019232:	f8ad 2006 	strh.w	r2, [sp, #6]
90019236:	4798      	blx	r3
90019238:	b002      	add	sp, #8
9001923a:	bd10      	pop	{r4, pc}

9001923c <_ZN8touchgfx8Drawable20getSolidRectAbsoluteEv>:
9001923c:	b538      	push	{r3, r4, r5, lr}
9001923e:	680b      	ldr	r3, [r1, #0]
90019240:	460c      	mov	r4, r1
90019242:	4605      	mov	r5, r0
90019244:	68db      	ldr	r3, [r3, #12]
90019246:	4798      	blx	r3
90019248:	6823      	ldr	r3, [r4, #0]
9001924a:	4620      	mov	r0, r4
9001924c:	4629      	mov	r1, r5
9001924e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90019250:	4798      	blx	r3
90019252:	4628      	mov	r0, r5
90019254:	bd38      	pop	{r3, r4, r5, pc}

90019256 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE>:
90019256:	b410      	push	{r4}
90019258:	880a      	ldrh	r2, [r1, #0]
9001925a:	8884      	ldrh	r4, [r0, #4]
9001925c:	4422      	add	r2, r4
9001925e:	800a      	strh	r2, [r1, #0]
90019260:	884a      	ldrh	r2, [r1, #2]
90019262:	88c4      	ldrh	r4, [r0, #6]
90019264:	4422      	add	r2, r4
90019266:	804a      	strh	r2, [r1, #2]
90019268:	6940      	ldr	r0, [r0, #20]
9001926a:	b120      	cbz	r0, 90019276 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE+0x20>
9001926c:	6803      	ldr	r3, [r0, #0]
9001926e:	f85d 4b04 	ldr.w	r4, [sp], #4
90019272:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90019274:	4718      	bx	r3
90019276:	f85d 4b04 	ldr.w	r4, [sp], #4
9001927a:	4770      	bx	lr

9001927c <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE>:
9001927c:	b570      	push	{r4, r5, r6, lr}
9001927e:	8882      	ldrh	r2, [r0, #4]
90019280:	460c      	mov	r4, r1
90019282:	880b      	ldrh	r3, [r1, #0]
90019284:	4605      	mov	r5, r0
90019286:	4413      	add	r3, r2
90019288:	800b      	strh	r3, [r1, #0]
9001928a:	884b      	ldrh	r3, [r1, #2]
9001928c:	88c2      	ldrh	r2, [r0, #6]
9001928e:	4413      	add	r3, r2
90019290:	804b      	strh	r3, [r1, #2]
90019292:	1d01      	adds	r1, r0, #4
90019294:	4620      	mov	r0, r4
90019296:	f7f9 fd8d 	bl	90012db4 <_ZN8touchgfx4RectaNERKS0_>
9001929a:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
9001929e:	2b00      	cmp	r3, #0
900192a0:	dd0b      	ble.n	900192ba <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
900192a2:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
900192a6:	2b00      	cmp	r3, #0
900192a8:	dd07      	ble.n	900192ba <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
900192aa:	6968      	ldr	r0, [r5, #20]
900192ac:	b128      	cbz	r0, 900192ba <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
900192ae:	6803      	ldr	r3, [r0, #0]
900192b0:	4621      	mov	r1, r4
900192b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
900192b4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
900192b8:	4718      	bx	r3
900192ba:	bd70      	pop	{r4, r5, r6, pc}

900192bc <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE>:
900192bc:	b570      	push	{r4, r5, r6, lr}
900192be:	8882      	ldrh	r2, [r0, #4]
900192c0:	460c      	mov	r4, r1
900192c2:	880b      	ldrh	r3, [r1, #0]
900192c4:	4605      	mov	r5, r0
900192c6:	4413      	add	r3, r2
900192c8:	800b      	strh	r3, [r1, #0]
900192ca:	884b      	ldrh	r3, [r1, #2]
900192cc:	88c2      	ldrh	r2, [r0, #6]
900192ce:	4413      	add	r3, r2
900192d0:	804b      	strh	r3, [r1, #2]
900192d2:	1d01      	adds	r1, r0, #4
900192d4:	4620      	mov	r0, r4
900192d6:	f7f9 fd6d 	bl	90012db4 <_ZN8touchgfx4RectaNERKS0_>
900192da:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
900192de:	2b00      	cmp	r3, #0
900192e0:	dd18      	ble.n	90019314 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x58>
900192e2:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
900192e6:	2b00      	cmp	r3, #0
900192e8:	dd14      	ble.n	90019314 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x58>
900192ea:	6968      	ldr	r0, [r5, #20]
900192ec:	b128      	cbz	r0, 900192fa <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x3e>
900192ee:	6803      	ldr	r3, [r0, #0]
900192f0:	4621      	mov	r1, r4
900192f2:	691b      	ldr	r3, [r3, #16]
900192f4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
900192f8:	4718      	bx	r3
900192fa:	4b07      	ldr	r3, [pc, #28]	; (90019318 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5c>)
900192fc:	681b      	ldr	r3, [r3, #0]
900192fe:	3304      	adds	r3, #4
90019300:	429d      	cmp	r5, r3
90019302:	d107      	bne.n	90019314 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x58>
90019304:	f7fe fefa 	bl	900180fc <_ZN8touchgfx11Application11getInstanceEv>
90019308:	6821      	ldr	r1, [r4, #0]
9001930a:	6862      	ldr	r2, [r4, #4]
9001930c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
90019310:	f7ff b862 	b.w	900183d8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
90019314:	bd70      	pop	{r4, r5, r6, pc}
90019316:	bf00      	nop
90019318:	24028230 	.word	0x24028230

9001931c <_ZN8touchgfx8Drawable12moveRelativeEss>:
9001931c:	b570      	push	{r4, r5, r6, lr}
9001931e:	4604      	mov	r4, r0
90019320:	4616      	mov	r6, r2
90019322:	460d      	mov	r5, r1
90019324:	b901      	cbnz	r1, 90019328 <_ZN8touchgfx8Drawable12moveRelativeEss+0xc>
90019326:	b192      	cbz	r2, 9001934e <_ZN8touchgfx8Drawable12moveRelativeEss+0x32>
90019328:	6823      	ldr	r3, [r4, #0]
9001932a:	4620      	mov	r0, r4
9001932c:	699b      	ldr	r3, [r3, #24]
9001932e:	4798      	blx	r3
90019330:	88e2      	ldrh	r2, [r4, #6]
90019332:	88a1      	ldrh	r1, [r4, #4]
90019334:	4620      	mov	r0, r4
90019336:	4432      	add	r2, r6
90019338:	4429      	add	r1, r5
9001933a:	b212      	sxth	r2, r2
9001933c:	b209      	sxth	r1, r1
9001933e:	f7fa f809 	bl	90013354 <_ZN8touchgfx8Drawable5setXYEss>
90019342:	6823      	ldr	r3, [r4, #0]
90019344:	4620      	mov	r0, r4
90019346:	699b      	ldr	r3, [r3, #24]
90019348:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
9001934c:	4718      	bx	r3
9001934e:	bd70      	pop	{r4, r5, r6, pc}

90019350 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>:
90019350:	b510      	push	{r4, lr}
90019352:	2300      	movs	r3, #0
90019354:	4604      	mov	r4, r0
90019356:	4608      	mov	r0, r1
90019358:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
9001935c:	8023      	strh	r3, [r4, #0]
9001935e:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
90019362:	8063      	strh	r3, [r4, #2]
90019364:	6803      	ldr	r3, [r0, #0]
90019366:	80a1      	strh	r1, [r4, #4]
90019368:	4621      	mov	r1, r4
9001936a:	80e2      	strh	r2, [r4, #6]
9001936c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9001936e:	4798      	blx	r3
90019370:	4620      	mov	r0, r4
90019372:	bd10      	pop	{r4, pc}

90019374 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt>:
90019374:	b530      	push	{r4, r5, lr}
90019376:	8083      	strh	r3, [r0, #4]
90019378:	f8bd 300c 	ldrh.w	r3, [sp, #12]
9001937c:	f89d 5018 	ldrb.w	r5, [sp, #24]
90019380:	80c3      	strh	r3, [r0, #6]
90019382:	f89d 3010 	ldrb.w	r3, [sp, #16]
90019386:	6141      	str	r1, [r0, #20]
90019388:	7203      	strb	r3, [r0, #8]
9001938a:	f89d 3014 	ldrb.w	r3, [sp, #20]
9001938e:	8302      	strh	r2, [r0, #24]
90019390:	7243      	strb	r3, [r0, #9]
90019392:	7a83      	ldrb	r3, [r0, #10]
90019394:	f365 0306 	bfi	r3, r5, #0, #7
90019398:	f89d 501c 	ldrb.w	r5, [sp, #28]
9001939c:	f365 13c7 	bfi	r3, r5, #7, #1
900193a0:	7283      	strb	r3, [r0, #10]
900193a2:	f89d 3020 	ldrb.w	r3, [sp, #32]
900193a6:	72c3      	strb	r3, [r0, #11]
900193a8:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
900193ac:	7303      	strb	r3, [r0, #12]
900193ae:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
900193b2:	81c3      	strh	r3, [r0, #14]
900193b4:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
900193b8:	8203      	strh	r3, [r0, #16]
900193ba:	4b01      	ldr	r3, [pc, #4]	; (900193c0 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt+0x4c>)
900193bc:	6003      	str	r3, [r0, #0]
900193be:	bd30      	pop	{r4, r5, pc}
900193c0:	9002c3c8 	.word	0x9002c3c8

900193c4 <_ZNK8touchgfx9ConstFont4findEt>:
900193c4:	b5f0      	push	{r4, r5, r6, r7, lr}
900193c6:	6944      	ldr	r4, [r0, #20]
900193c8:	b3bc      	cbz	r4, 9001943a <_ZNK8touchgfx9ConstFont4findEt+0x76>
900193ca:	88a3      	ldrh	r3, [r4, #4]
900193cc:	8b02      	ldrh	r2, [r0, #24]
900193ce:	1acb      	subs	r3, r1, r3
900193d0:	f102 32ff 	add.w	r2, r2, #4294967295
900193d4:	d431      	bmi.n	9001943a <_ZNK8touchgfx9ConstFont4findEt+0x76>
900193d6:	4293      	cmp	r3, r2
900193d8:	dd0c      	ble.n	900193f4 <_ZNK8touchgfx9ConstFont4findEt+0x30>
900193da:	230e      	movs	r3, #14
900193dc:	fb03 4302 	mla	r3, r3, r2, r4
900193e0:	889b      	ldrh	r3, [r3, #4]
900193e2:	1a5b      	subs	r3, r3, r1
900193e4:	1ad3      	subs	r3, r2, r3
900193e6:	429a      	cmp	r2, r3
900193e8:	db27      	blt.n	9001943a <_ZNK8touchgfx9ConstFont4findEt+0x76>
900193ea:	2b00      	cmp	r3, #0
900193ec:	bfbc      	itt	lt
900193ee:	2302      	movlt	r3, #2
900193f0:	fb92 f3f3 	sdivlt	r3, r2, r3
900193f4:	2500      	movs	r5, #0
900193f6:	260e      	movs	r6, #14
900193f8:	4295      	cmp	r5, r2
900193fa:	dc1e      	bgt.n	9001943a <_ZNK8touchgfx9ConstFont4findEt+0x76>
900193fc:	fb06 4003 	mla	r0, r6, r3, r4
90019400:	8887      	ldrh	r7, [r0, #4]
90019402:	42b9      	cmp	r1, r7
90019404:	d01a      	beq.n	9001943c <_ZNK8touchgfx9ConstFont4findEt+0x78>
90019406:	d20d      	bcs.n	90019424 <_ZNK8touchgfx9ConstFont4findEt+0x60>
90019408:	1e5a      	subs	r2, r3, #1
9001940a:	4295      	cmp	r5, r2
9001940c:	dc15      	bgt.n	9001943a <_ZNK8touchgfx9ConstFont4findEt+0x76>
9001940e:	f830 3c0a 	ldrh.w	r3, [r0, #-10]
90019412:	1a5b      	subs	r3, r3, r1
90019414:	1ad3      	subs	r3, r2, r3
90019416:	429a      	cmp	r2, r3
90019418:	db0f      	blt.n	9001943a <_ZNK8touchgfx9ConstFont4findEt+0x76>
9001941a:	429d      	cmp	r5, r3
9001941c:	ddec      	ble.n	900193f8 <_ZNK8touchgfx9ConstFont4findEt+0x34>
9001941e:	1953      	adds	r3, r2, r5
90019420:	105b      	asrs	r3, r3, #1
90019422:	e7e9      	b.n	900193f8 <_ZNK8touchgfx9ConstFont4findEt+0x34>
90019424:	1c5d      	adds	r5, r3, #1
90019426:	42aa      	cmp	r2, r5
90019428:	db07      	blt.n	9001943a <_ZNK8touchgfx9ConstFont4findEt+0x76>
9001942a:	8a43      	ldrh	r3, [r0, #18]
9001942c:	1acb      	subs	r3, r1, r3
9001942e:	442b      	add	r3, r5
90019430:	429d      	cmp	r5, r3
90019432:	dc02      	bgt.n	9001943a <_ZNK8touchgfx9ConstFont4findEt+0x76>
90019434:	429a      	cmp	r2, r3
90019436:	dadf      	bge.n	900193f8 <_ZNK8touchgfx9ConstFont4findEt+0x34>
90019438:	e7f1      	b.n	9001941e <_ZNK8touchgfx9ConstFont4findEt+0x5a>
9001943a:	2000      	movs	r0, #0
9001943c:	bdf0      	pop	{r4, r5, r6, r7, pc}

9001943e <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh>:
9001943e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
90019440:	4604      	mov	r4, r0
90019442:	4617      	mov	r7, r2
90019444:	461e      	mov	r6, r3
90019446:	b911      	cbnz	r1, 9001944e <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
90019448:	2500      	movs	r5, #0
9001944a:	4628      	mov	r0, r5
9001944c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
9001944e:	290a      	cmp	r1, #10
90019450:	d0fa      	beq.n	90019448 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
90019452:	f64f 62ff 	movw	r2, #65279	; 0xfeff
90019456:	4291      	cmp	r1, r2
90019458:	d0f6      	beq.n	90019448 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
9001945a:	f242 020b 	movw	r2, #8203	; 0x200b
9001945e:	4291      	cmp	r1, r2
90019460:	d0f2      	beq.n	90019448 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
90019462:	f7ff ffaf 	bl	900193c4 <_ZNK8touchgfx9ConstFont4findEt>
90019466:	4605      	mov	r5, r0
90019468:	b950      	cbnz	r0, 90019480 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x42>
9001946a:	6823      	ldr	r3, [r4, #0]
9001946c:	4620      	mov	r0, r4
9001946e:	691b      	ldr	r3, [r3, #16]
90019470:	4798      	blx	r3
90019472:	4601      	mov	r1, r0
90019474:	4620      	mov	r0, r4
90019476:	f7ff ffa5 	bl	900193c4 <_ZNK8touchgfx9ConstFont4findEt>
9001947a:	4605      	mov	r5, r0
9001947c:	2800      	cmp	r0, #0
9001947e:	d0e3      	beq.n	90019448 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
90019480:	6823      	ldr	r3, [r4, #0]
90019482:	4629      	mov	r1, r5
90019484:	4620      	mov	r0, r4
90019486:	6d5b      	ldr	r3, [r3, #84]	; 0x54
90019488:	4798      	blx	r3
9001948a:	6038      	str	r0, [r7, #0]
9001948c:	6823      	ldr	r3, [r4, #0]
9001948e:	4620      	mov	r0, r4
90019490:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
90019492:	4798      	blx	r3
90019494:	7030      	strb	r0, [r6, #0]
90019496:	e7d8      	b.n	9001944a <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xc>

90019498 <_ZN8touchgfx4clzuEm>:
90019498:	4603      	mov	r3, r0
9001949a:	b1c8      	cbz	r0, 900194d0 <_ZN8touchgfx4clzuEm+0x38>
9001949c:	0c02      	lsrs	r2, r0, #16
9001949e:	0412      	lsls	r2, r2, #16
900194a0:	b9a2      	cbnz	r2, 900194cc <_ZN8touchgfx4clzuEm+0x34>
900194a2:	0403      	lsls	r3, r0, #16
900194a4:	2010      	movs	r0, #16
900194a6:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
900194aa:	bf04      	itt	eq
900194ac:	021b      	lsleq	r3, r3, #8
900194ae:	3008      	addeq	r0, #8
900194b0:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
900194b4:	bf04      	itt	eq
900194b6:	011b      	lsleq	r3, r3, #4
900194b8:	3004      	addeq	r0, #4
900194ba:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
900194be:	bf04      	itt	eq
900194c0:	009b      	lsleq	r3, r3, #2
900194c2:	3002      	addeq	r0, #2
900194c4:	2b00      	cmp	r3, #0
900194c6:	db04      	blt.n	900194d2 <_ZN8touchgfx4clzuEm+0x3a>
900194c8:	3001      	adds	r0, #1
900194ca:	4770      	bx	lr
900194cc:	2000      	movs	r0, #0
900194ce:	e7ea      	b.n	900194a6 <_ZN8touchgfx4clzuEm+0xe>
900194d0:	2020      	movs	r0, #32
900194d2:	4770      	bx	lr

900194d4 <_ZN8touchgfx7muldivuEmmmRm>:
900194d4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
900194d8:	4680      	mov	r8, r0
900194da:	460f      	mov	r7, r1
900194dc:	4615      	mov	r5, r2
900194de:	461e      	mov	r6, r3
900194e0:	f7ff ffda 	bl	90019498 <_ZN8touchgfx4clzuEm>
900194e4:	b998      	cbnz	r0, 9001950e <_ZN8touchgfx7muldivuEmmmRm+0x3a>
900194e6:	4608      	mov	r0, r1
900194e8:	f7ff ffd6 	bl	90019498 <_ZN8touchgfx4clzuEm>
900194ec:	2800      	cmp	r0, #0
900194ee:	dd08      	ble.n	90019502 <_ZN8touchgfx7muldivuEmmmRm+0x2e>
900194f0:	4633      	mov	r3, r6
900194f2:	462a      	mov	r2, r5
900194f4:	4641      	mov	r1, r8
900194f6:	4638      	mov	r0, r7
900194f8:	f7ff ffec 	bl	900194d4 <_ZN8touchgfx7muldivuEmmmRm>
900194fc:	b003      	add	sp, #12
900194fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90019502:	f04f 33ff 	mov.w	r3, #4294967295
90019506:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
9001950a:	6033      	str	r3, [r6, #0]
9001950c:	e7f6      	b.n	900194fc <_ZN8touchgfx7muldivuEmmmRm+0x28>
9001950e:	fa31 f900 	lsrs.w	r9, r1, r0
90019512:	fb01 f308 	mul.w	r3, r1, r8
90019516:	d105      	bne.n	90019524 <_ZN8touchgfx7muldivuEmmmRm+0x50>
90019518:	fbb3 f0f5 	udiv	r0, r3, r5
9001951c:	fb05 3510 	mls	r5, r5, r0, r3
90019520:	6035      	str	r5, [r6, #0]
90019522:	e7eb      	b.n	900194fc <_ZN8touchgfx7muldivuEmmmRm+0x28>
90019524:	2301      	movs	r3, #1
90019526:	fa08 fb00 	lsl.w	fp, r8, r0
9001952a:	462a      	mov	r2, r5
9001952c:	4641      	mov	r1, r8
9001952e:	fa03 f000 	lsl.w	r0, r3, r0
90019532:	4633      	mov	r3, r6
90019534:	fbbb faf5 	udiv	sl, fp, r5
90019538:	3801      	subs	r0, #1
9001953a:	fb09 f40a 	mul.w	r4, r9, sl
9001953e:	4038      	ands	r0, r7
90019540:	f7ff ffc8 	bl	900194d4 <_ZN8touchgfx7muldivuEmmmRm>
90019544:	462a      	mov	r2, r5
90019546:	4607      	mov	r7, r0
90019548:	ab01      	add	r3, sp, #4
9001954a:	fb05 b11a 	mls	r1, r5, sl, fp
9001954e:	4648      	mov	r0, r9
90019550:	f7ff ffc0 	bl	900194d4 <_ZN8touchgfx7muldivuEmmmRm>
90019554:	9b01      	ldr	r3, [sp, #4]
90019556:	6832      	ldr	r2, [r6, #0]
90019558:	441a      	add	r2, r3
9001955a:	fbb2 f3f5 	udiv	r3, r2, r5
9001955e:	441c      	add	r4, r3
90019560:	fb05 2513 	mls	r5, r5, r3, r2
90019564:	443c      	add	r4, r7
90019566:	4420      	add	r0, r4
90019568:	e7da      	b.n	90019520 <_ZN8touchgfx7muldivuEmmmRm+0x4c>

9001956a <_ZN8touchgfx6muldivElllRl>:
9001956a:	b573      	push	{r0, r1, r4, r5, r6, lr}
9001956c:	2800      	cmp	r0, #0
9001956e:	461e      	mov	r6, r3
90019570:	bfba      	itte	lt
90019572:	4240      	neglt	r0, r0
90019574:	f04f 34ff 	movlt.w	r4, #4294967295
90019578:	2401      	movge	r4, #1
9001957a:	2900      	cmp	r1, #0
9001957c:	bfbc      	itt	lt
9001957e:	4249      	neglt	r1, r1
90019580:	4264      	neglt	r4, r4
90019582:	2a00      	cmp	r2, #0
90019584:	bfb6      	itet	lt
90019586:	4265      	neglt	r5, r4
90019588:	4625      	movge	r5, r4
9001958a:	4252      	neglt	r2, r2
9001958c:	4288      	cmp	r0, r1
9001958e:	bfc2      	ittt	gt
90019590:	4603      	movgt	r3, r0
90019592:	4608      	movgt	r0, r1
90019594:	4619      	movgt	r1, r3
90019596:	ab01      	add	r3, sp, #4
90019598:	f7ff ff9c 	bl	900194d4 <_ZN8touchgfx7muldivuEmmmRm>
9001959c:	9b01      	ldr	r3, [sp, #4]
9001959e:	4368      	muls	r0, r5
900195a0:	435c      	muls	r4, r3
900195a2:	6034      	str	r4, [r6, #0]
900195a4:	b002      	add	sp, #8
900195a6:	bd70      	pop	{r4, r5, r6, pc}

900195a8 <_ZN8touchgfx6muldivElll>:
900195a8:	b573      	push	{r0, r1, r4, r5, r6, lr}
900195aa:	4606      	mov	r6, r0
900195ac:	ab01      	add	r3, sp, #4
900195ae:	460d      	mov	r5, r1
900195b0:	4614      	mov	r4, r2
900195b2:	f7ff ffda 	bl	9001956a <_ZN8touchgfx6muldivElllRl>
900195b6:	2e00      	cmp	r6, #0
900195b8:	db20      	blt.n	900195fc <_ZN8touchgfx6muldivElll+0x54>
900195ba:	bf14      	ite	ne
900195bc:	2301      	movne	r3, #1
900195be:	2300      	moveq	r3, #0
900195c0:	2d00      	cmp	r5, #0
900195c2:	db1e      	blt.n	90019602 <_ZN8touchgfx6muldivElll+0x5a>
900195c4:	bf14      	ite	ne
900195c6:	2201      	movne	r2, #1
900195c8:	2200      	moveq	r2, #0
900195ca:	2c00      	cmp	r4, #0
900195cc:	fb03 f202 	mul.w	r2, r3, r2
900195d0:	db1a      	blt.n	90019608 <_ZN8touchgfx6muldivElll+0x60>
900195d2:	bf14      	ite	ne
900195d4:	2301      	movne	r3, #1
900195d6:	2300      	moveq	r3, #0
900195d8:	4353      	muls	r3, r2
900195da:	2b01      	cmp	r3, #1
900195dc:	d117      	bne.n	9001960e <_ZN8touchgfx6muldivElll+0x66>
900195de:	2c00      	cmp	r4, #0
900195e0:	9b01      	ldr	r3, [sp, #4]
900195e2:	bfb8      	it	lt
900195e4:	4264      	neglt	r4, r4
900195e6:	2b00      	cmp	r3, #0
900195e8:	f104 0401 	add.w	r4, r4, #1
900195ec:	bfb8      	it	lt
900195ee:	425b      	neglt	r3, r3
900195f0:	ebb3 0f64 	cmp.w	r3, r4, asr #1
900195f4:	db00      	blt.n	900195f8 <_ZN8touchgfx6muldivElll+0x50>
900195f6:	3001      	adds	r0, #1
900195f8:	b002      	add	sp, #8
900195fa:	bd70      	pop	{r4, r5, r6, pc}
900195fc:	f04f 33ff 	mov.w	r3, #4294967295
90019600:	e7de      	b.n	900195c0 <_ZN8touchgfx6muldivElll+0x18>
90019602:	f04f 32ff 	mov.w	r2, #4294967295
90019606:	e7e0      	b.n	900195ca <_ZN8touchgfx6muldivElll+0x22>
90019608:	f04f 33ff 	mov.w	r3, #4294967295
9001960c:	e7e4      	b.n	900195d8 <_ZN8touchgfx6muldivElll+0x30>
9001960e:	3301      	adds	r3, #1
90019610:	d1f2      	bne.n	900195f8 <_ZN8touchgfx6muldivElll+0x50>
90019612:	9b01      	ldr	r3, [sp, #4]
90019614:	2c00      	cmp	r4, #0
90019616:	bfb8      	it	lt
90019618:	4264      	neglt	r4, r4
9001961a:	2b00      	cmp	r3, #0
9001961c:	bfb8      	it	lt
9001961e:	425b      	neglt	r3, r3
90019620:	ebb3 0f64 	cmp.w	r3, r4, asr #1
90019624:	bfc8      	it	gt
90019626:	f100 30ff 	addgt.w	r0, r0, #4294967295
9001962a:	e7e5      	b.n	900195f8 <_ZN8touchgfx6muldivElll+0x50>

9001962c <_ZNK8touchgfx10ClickEvent12getEventTypeEv>:
9001962c:	2000      	movs	r0, #0
9001962e:	4770      	bx	lr

90019630 <_ZNK8touchgfx9DragEvent12getEventTypeEv>:
90019630:	2001      	movs	r0, #1
90019632:	4770      	bx	lr

90019634 <_ZNK8touchgfx12GestureEvent12getEventTypeEv>:
90019634:	2002      	movs	r0, #2
90019636:	4770      	bx	lr

90019638 <_ZN8touchgfx6ScreenD1Ev>:
90019638:	4770      	bx	lr

9001963a <_ZN8touchgfx6Screen11setupScreenEv>:
9001963a:	4770      	bx	lr

9001963c <_ZN8touchgfx12GestureEventD1Ev>:
9001963c:	4770      	bx	lr

9001963e <_ZN8touchgfx9DragEventD1Ev>:
9001963e:	4770      	bx	lr

90019640 <_ZN8touchgfx10ClickEventD1Ev>:
90019640:	4770      	bx	lr

90019642 <_ZN8touchgfx10ClickEventD0Ev>:
90019642:	b510      	push	{r4, lr}
90019644:	4604      	mov	r4, r0
90019646:	210c      	movs	r1, #12
90019648:	f00d ffd5 	bl	900275f6 <_ZdlPvj>
9001964c:	4620      	mov	r0, r4
9001964e:	bd10      	pop	{r4, pc}

90019650 <_ZN8touchgfx9DragEventD0Ev>:
90019650:	b510      	push	{r4, lr}
90019652:	4604      	mov	r4, r0
90019654:	2110      	movs	r1, #16
90019656:	f00d ffce 	bl	900275f6 <_ZdlPvj>
9001965a:	4620      	mov	r0, r4
9001965c:	bd10      	pop	{r4, pc}

9001965e <_ZN8touchgfx12GestureEventD0Ev>:
9001965e:	b510      	push	{r4, lr}
90019660:	4604      	mov	r4, r0
90019662:	210c      	movs	r1, #12
90019664:	f00d ffc7 	bl	900275f6 <_ZdlPvj>
90019668:	4620      	mov	r0, r4
9001966a:	bd10      	pop	{r4, pc}

9001966c <_ZN8touchgfx6ScreenD0Ev>:
9001966c:	b510      	push	{r4, lr}
9001966e:	4604      	mov	r4, r0
90019670:	213c      	movs	r1, #60	; 0x3c
90019672:	f00d ffc0 	bl	900275f6 <_ZdlPvj>
90019676:	4620      	mov	r0, r4
90019678:	bd10      	pop	{r4, pc}
	...

9001967c <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE>:
9001967c:	b530      	push	{r4, r5, lr}
9001967e:	460d      	mov	r5, r1
90019680:	6b01      	ldr	r1, [r0, #48]	; 0x30
90019682:	b087      	sub	sp, #28
90019684:	4604      	mov	r4, r0
90019686:	b301      	cbz	r1, 900196ca <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x4e>
90019688:	a801      	add	r0, sp, #4
9001968a:	f7ff fe61 	bl	90019350 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
9001968e:	892a      	ldrh	r2, [r5, #8]
90019690:	f8bd 3004 	ldrh.w	r3, [sp, #4]
90019694:	7928      	ldrb	r0, [r5, #4]
90019696:	1ad2      	subs	r2, r2, r3
90019698:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
9001969a:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
9001969e:	441a      	add	r2, r3
900196a0:	896b      	ldrh	r3, [r5, #10]
900196a2:	f8bd 5006 	ldrh.w	r5, [sp, #6]
900196a6:	f88d 0010 	strb.w	r0, [sp, #16]
900196aa:	1b5b      	subs	r3, r3, r5
900196ac:	8ee5      	ldrh	r5, [r4, #54]	; 0x36
900196ae:	6b20      	ldr	r0, [r4, #48]	; 0x30
900196b0:	442b      	add	r3, r5
900196b2:	4d07      	ldr	r5, [pc, #28]	; (900196d0 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x54>)
900196b4:	f8ad 1012 	strh.w	r1, [sp, #18]
900196b8:	a903      	add	r1, sp, #12
900196ba:	9503      	str	r5, [sp, #12]
900196bc:	f8ad 2014 	strh.w	r2, [sp, #20]
900196c0:	f8ad 3016 	strh.w	r3, [sp, #22]
900196c4:	6803      	ldr	r3, [r0, #0]
900196c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
900196c8:	4798      	blx	r3
900196ca:	b007      	add	sp, #28
900196cc:	bd30      	pop	{r4, r5, pc}
900196ce:	bf00      	nop
900196d0:	9002c450 	.word	0x9002c450

900196d4 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE>:
900196d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
900196d8:	6b03      	ldr	r3, [r0, #48]	; 0x30
900196da:	b08a      	sub	sp, #40	; 0x28
900196dc:	4604      	mov	r4, r0
900196de:	460d      	mov	r5, r1
900196e0:	b113      	cbz	r3, 900196e8 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x14>
900196e2:	790b      	ldrb	r3, [r1, #4]
900196e4:	2b00      	cmp	r3, #0
900196e6:	d044      	beq.n	90019772 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
900196e8:	f104 0804 	add.w	r8, r4, #4
900196ec:	a803      	add	r0, sp, #12
900196ee:	4641      	mov	r1, r8
900196f0:	f7ff fe2e 	bl	90019350 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
900196f4:	792b      	ldrb	r3, [r5, #4]
900196f6:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
900196fa:	f9bd 600e 	ldrsh.w	r6, [sp, #14]
900196fe:	b983      	cbnz	r3, 90019722 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x4e>
90019700:	f104 0336 	add.w	r3, r4, #54	; 0x36
90019704:	892a      	ldrh	r2, [r5, #8]
90019706:	88e9      	ldrh	r1, [r5, #6]
90019708:	4640      	mov	r0, r8
9001970a:	1b92      	subs	r2, r2, r6
9001970c:	9301      	str	r3, [sp, #4]
9001970e:	1bc9      	subs	r1, r1, r7
90019710:	f104 0334 	add.w	r3, r4, #52	; 0x34
90019714:	b212      	sxth	r2, r2
90019716:	9300      	str	r3, [sp, #0]
90019718:	b209      	sxth	r1, r1
9001971a:	f104 0330 	add.w	r3, r4, #48	; 0x30
9001971e:	f7f9 fa67 	bl	90012bf0 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>
90019722:	6b21      	ldr	r1, [r4, #48]	; 0x30
90019724:	b329      	cbz	r1, 90019772 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
90019726:	a805      	add	r0, sp, #20
90019728:	f7ff fe12 	bl	90019350 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
9001972c:	f8bd 2014 	ldrh.w	r2, [sp, #20]
90019730:	792b      	ldrb	r3, [r5, #4]
90019732:	a907      	add	r1, sp, #28
90019734:	1abf      	subs	r7, r7, r2
90019736:	88ea      	ldrh	r2, [r5, #6]
90019738:	6b20      	ldr	r0, [r4, #48]	; 0x30
9001973a:	4417      	add	r7, r2
9001973c:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
9001973e:	f88d 3020 	strb.w	r3, [sp, #32]
90019742:	4417      	add	r7, r2
90019744:	f8bd 2016 	ldrh.w	r2, [sp, #22]
90019748:	1ab6      	subs	r6, r6, r2
9001974a:	892a      	ldrh	r2, [r5, #8]
9001974c:	f8ad 7022 	strh.w	r7, [sp, #34]	; 0x22
90019750:	4416      	add	r6, r2
90019752:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
90019754:	4416      	add	r6, r2
90019756:	4a08      	ldr	r2, [pc, #32]	; (90019778 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0xa4>)
90019758:	f8ad 6024 	strh.w	r6, [sp, #36]	; 0x24
9001975c:	2600      	movs	r6, #0
9001975e:	9207      	str	r2, [sp, #28]
90019760:	f8ad 6026 	strh.w	r6, [sp, #38]	; 0x26
90019764:	6803      	ldr	r3, [r0, #0]
90019766:	6c5b      	ldr	r3, [r3, #68]	; 0x44
90019768:	4798      	blx	r3
9001976a:	792b      	ldrb	r3, [r5, #4]
9001976c:	b10b      	cbz	r3, 90019772 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
9001976e:	e9c4 660c 	strd	r6, r6, [r4, #48]	; 0x30
90019772:	b00a      	add	sp, #40	; 0x28
90019774:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
90019778:	9002c428 	.word	0x9002c428

9001977c <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE>:
9001977c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
90019780:	460c      	mov	r4, r1
90019782:	6b01      	ldr	r1, [r0, #48]	; 0x30
90019784:	b088      	sub	sp, #32
90019786:	4605      	mov	r5, r0
90019788:	2900      	cmp	r1, #0
9001978a:	d06d      	beq.n	90019868 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xec>
9001978c:	4668      	mov	r0, sp
9001978e:	f7ff fddf 	bl	90019350 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
90019792:	8ea9      	ldrh	r1, [r5, #52]	; 0x34
90019794:	88e3      	ldrh	r3, [r4, #6]
90019796:	f9bd 8000 	ldrsh.w	r8, [sp]
9001979a:	440b      	add	r3, r1
9001979c:	f9bd 7002 	ldrsh.w	r7, [sp, #2]
900197a0:	b21b      	sxth	r3, r3
900197a2:	4543      	cmp	r3, r8
900197a4:	db31      	blt.n	9001980a <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
900197a6:	f8bd c004 	ldrh.w	ip, [sp, #4]
900197aa:	44c4      	add	ip, r8
900197ac:	fa0f fc8c 	sxth.w	ip, ip
900197b0:	4563      	cmp	r3, ip
900197b2:	da2a      	bge.n	9001980a <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
900197b4:	8eea      	ldrh	r2, [r5, #54]	; 0x36
900197b6:	8926      	ldrh	r6, [r4, #8]
900197b8:	4416      	add	r6, r2
900197ba:	b236      	sxth	r6, r6
900197bc:	42be      	cmp	r6, r7
900197be:	db24      	blt.n	9001980a <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
900197c0:	f8bd 0006 	ldrh.w	r0, [sp, #6]
900197c4:	4438      	add	r0, r7
900197c6:	b200      	sxth	r0, r0
900197c8:	4286      	cmp	r6, r0
900197ca:	da1e      	bge.n	9001980a <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
900197cc:	8963      	ldrh	r3, [r4, #10]
900197ce:	4419      	add	r1, r3
900197d0:	b209      	sxth	r1, r1
900197d2:	4541      	cmp	r1, r8
900197d4:	db08      	blt.n	900197e8 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
900197d6:	4561      	cmp	r1, ip
900197d8:	da06      	bge.n	900197e8 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
900197da:	89a3      	ldrh	r3, [r4, #12]
900197dc:	441a      	add	r2, r3
900197de:	b212      	sxth	r2, r2
900197e0:	42ba      	cmp	r2, r7
900197e2:	db01      	blt.n	900197e8 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
900197e4:	4282      	cmp	r2, r0
900197e6:	db10      	blt.n	9001980a <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
900197e8:	4b21      	ldr	r3, [pc, #132]	; (90019870 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf4>)
900197ea:	a904      	add	r1, sp, #16
900197ec:	6b28      	ldr	r0, [r5, #48]	; 0x30
900197ee:	9304      	str	r3, [sp, #16]
900197f0:	2302      	movs	r3, #2
900197f2:	f88d 3014 	strb.w	r3, [sp, #20]
900197f6:	2300      	movs	r3, #0
900197f8:	f8ad 3016 	strh.w	r3, [sp, #22]
900197fc:	f8ad 3018 	strh.w	r3, [sp, #24]
90019800:	f8ad 301a 	strh.w	r3, [sp, #26]
90019804:	6803      	ldr	r3, [r0, #0]
90019806:	6c5b      	ldr	r3, [r3, #68]	; 0x44
90019808:	4798      	blx	r3
9001980a:	1d29      	adds	r1, r5, #4
9001980c:	a802      	add	r0, sp, #8
9001980e:	f7ff fd9f 	bl	90019350 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
90019812:	f8bd 3008 	ldrh.w	r3, [sp, #8]
90019816:	88e0      	ldrh	r0, [r4, #6]
90019818:	eba3 0808 	sub.w	r8, r3, r8
9001981c:	f8bd 300a 	ldrh.w	r3, [sp, #10]
90019820:	7921      	ldrb	r1, [r4, #4]
90019822:	fa1f f888 	uxth.w	r8, r8
90019826:	1bdf      	subs	r7, r3, r7
90019828:	f8b5 c034 	ldrh.w	ip, [r5, #52]	; 0x34
9001982c:	b2bb      	uxth	r3, r7
9001982e:	4440      	add	r0, r8
90019830:	8922      	ldrh	r2, [r4, #8]
90019832:	8967      	ldrh	r7, [r4, #10]
90019834:	4460      	add	r0, ip
90019836:	89a4      	ldrh	r4, [r4, #12]
90019838:	441a      	add	r2, r3
9001983a:	8eee      	ldrh	r6, [r5, #54]	; 0x36
9001983c:	44b8      	add	r8, r7
9001983e:	4423      	add	r3, r4
90019840:	f8ad 0016 	strh.w	r0, [sp, #22]
90019844:	4432      	add	r2, r6
90019846:	44e0      	add	r8, ip
90019848:	4433      	add	r3, r6
9001984a:	4c0a      	ldr	r4, [pc, #40]	; (90019874 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf8>)
9001984c:	6b28      	ldr	r0, [r5, #48]	; 0x30
9001984e:	f88d 1014 	strb.w	r1, [sp, #20]
90019852:	a904      	add	r1, sp, #16
90019854:	9404      	str	r4, [sp, #16]
90019856:	f8ad 2018 	strh.w	r2, [sp, #24]
9001985a:	f8ad 801a 	strh.w	r8, [sp, #26]
9001985e:	f8ad 301c 	strh.w	r3, [sp, #28]
90019862:	6803      	ldr	r3, [r0, #0]
90019864:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
90019866:	4798      	blx	r3
90019868:	b008      	add	sp, #32
9001986a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
9001986e:	bf00      	nop
90019870:	9002c428 	.word	0x9002c428
90019874:	9002c43c 	.word	0x9002c43c

90019878 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>:
90019878:	b537      	push	{r0, r1, r2, r4, r5, lr}
9001987a:	4604      	mov	r4, r0
9001987c:	f934 2f0c 	ldrsh.w	r2, [r4, #12]!
90019880:	3201      	adds	r2, #1
90019882:	d112      	bne.n	900198aa <_ZN8touchgfx8Drawable20getCachedVisibleRectEv+0x32>
90019884:	2500      	movs	r5, #0
90019886:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
9001988a:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
9001988e:	6803      	ldr	r3, [r0, #0]
90019890:	9500      	str	r5, [sp, #0]
90019892:	466d      	mov	r5, sp
90019894:	f8ad 1004 	strh.w	r1, [sp, #4]
90019898:	f8ad 2006 	strh.w	r2, [sp, #6]
9001989c:	4629      	mov	r1, r5
9001989e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
900198a0:	4798      	blx	r3
900198a2:	e895 0003 	ldmia.w	r5, {r0, r1}
900198a6:	e884 0003 	stmia.w	r4, {r0, r1}
900198aa:	4620      	mov	r0, r4
900198ac:	b003      	add	sp, #12
900198ae:	bd30      	pop	{r4, r5, pc}

900198b0 <_ZN8touchgfx8Drawable13getCachedAbsXEv>:
900198b0:	b513      	push	{r0, r1, r4, lr}
900198b2:	f9b0 3020 	ldrsh.w	r3, [r0, #32]
900198b6:	4604      	mov	r4, r0
900198b8:	3301      	adds	r3, #1
900198ba:	d109      	bne.n	900198d0 <_ZN8touchgfx8Drawable13getCachedAbsXEv+0x20>
900198bc:	4601      	mov	r1, r0
900198be:	4668      	mov	r0, sp
900198c0:	f7ff fd46 	bl	90019350 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
900198c4:	f8bd 3000 	ldrh.w	r3, [sp]
900198c8:	8423      	strh	r3, [r4, #32]
900198ca:	f8bd 3002 	ldrh.w	r3, [sp, #2]
900198ce:	8463      	strh	r3, [r4, #34]	; 0x22
900198d0:	f9b4 0020 	ldrsh.w	r0, [r4, #32]
900198d4:	b002      	add	sp, #8
900198d6:	bd10      	pop	{r4, pc}

900198d8 <_ZN8touchgfx8Drawable13getCachedAbsYEv>:
900198d8:	b513      	push	{r0, r1, r4, lr}
900198da:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	; 0x22
900198de:	4604      	mov	r4, r0
900198e0:	3301      	adds	r3, #1
900198e2:	d109      	bne.n	900198f8 <_ZN8touchgfx8Drawable13getCachedAbsYEv+0x20>
900198e4:	4601      	mov	r1, r0
900198e6:	4668      	mov	r0, sp
900198e8:	f7ff fd32 	bl	90019350 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
900198ec:	f8bd 3000 	ldrh.w	r3, [sp]
900198f0:	8423      	strh	r3, [r4, #32]
900198f2:	f8bd 3002 	ldrh.w	r3, [sp, #2]
900198f6:	8463      	strh	r3, [r4, #34]	; 0x22
900198f8:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	; 0x22
900198fc:	b002      	add	sp, #8
900198fe:	bd10      	pop	{r4, pc}

90019900 <_ZN8touchgfx6ScreenC1Ev>:
90019900:	b570      	push	{r4, r5, r6, lr}
90019902:	4b17      	ldr	r3, [pc, #92]	; (90019960 <_ZN8touchgfx6ScreenC1Ev+0x60>)
90019904:	4605      	mov	r5, r0
90019906:	4a17      	ldr	r2, [pc, #92]	; (90019964 <_ZN8touchgfx6ScreenC1Ev+0x64>)
90019908:	2101      	movs	r1, #1
9001990a:	f845 3b04 	str.w	r3, [r5], #4
9001990e:	2300      	movs	r3, #0
90019910:	6042      	str	r2, [r0, #4]
90019912:	4604      	mov	r4, r0
90019914:	8103      	strh	r3, [r0, #8]
90019916:	8143      	strh	r3, [r0, #10]
90019918:	8183      	strh	r3, [r0, #12]
9001991a:	81c3      	strh	r3, [r0, #14]
9001991c:	8203      	strh	r3, [r0, #16]
9001991e:	8243      	strh	r3, [r0, #18]
90019920:	8283      	strh	r3, [r0, #20]
90019922:	82c3      	strh	r3, [r0, #22]
90019924:	6203      	str	r3, [r0, #32]
90019926:	8483      	strh	r3, [r0, #36]	; 0x24
90019928:	84c3      	strh	r3, [r0, #38]	; 0x26
9001992a:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
9001992e:	6343      	str	r3, [r0, #52]	; 0x34
90019930:	f880 1029 	strb.w	r1, [r0, #41]	; 0x29
90019934:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
90019938:	e9c0 3306 	strd	r3, r3, [r0, #24]
9001993c:	e9c0 330b 	strd	r3, r3, [r0, #44]	; 0x2c
90019940:	4b09      	ldr	r3, [pc, #36]	; (90019968 <_ZN8touchgfx6ScreenC1Ev+0x68>)
90019942:	4628      	mov	r0, r5
90019944:	f9b3 6000 	ldrsh.w	r6, [r3]
90019948:	6b93      	ldr	r3, [r2, #56]	; 0x38
9001994a:	4a08      	ldr	r2, [pc, #32]	; (9001996c <_ZN8touchgfx6ScreenC1Ev+0x6c>)
9001994c:	f9b2 1000 	ldrsh.w	r1, [r2]
90019950:	4798      	blx	r3
90019952:	6863      	ldr	r3, [r4, #4]
90019954:	4628      	mov	r0, r5
90019956:	4631      	mov	r1, r6
90019958:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
9001995a:	4798      	blx	r3
9001995c:	4620      	mov	r0, r4
9001995e:	bd70      	pop	{r4, r5, r6, pc}
90019960:	9002c464 	.word	0x9002c464
90019964:	9002bc68 	.word	0x9002bc68
90019968:	240281e2 	.word	0x240281e2
9001996c:	240281e0 	.word	0x240281e0

90019970 <_ZN8touchgfx6Screen4drawEv>:
90019970:	4b09      	ldr	r3, [pc, #36]	; (90019998 <_ZN8touchgfx6Screen4drawEv+0x28>)
90019972:	b507      	push	{r0, r1, r2, lr}
90019974:	f9b3 2000 	ldrsh.w	r2, [r3]
90019978:	2100      	movs	r1, #0
9001997a:	4b08      	ldr	r3, [pc, #32]	; (9001999c <_ZN8touchgfx6Screen4drawEv+0x2c>)
9001997c:	9100      	str	r1, [sp, #0]
9001997e:	4669      	mov	r1, sp
90019980:	f9b3 3000 	ldrsh.w	r3, [r3]
90019984:	f8ad 2004 	strh.w	r2, [sp, #4]
90019988:	f8ad 3006 	strh.w	r3, [sp, #6]
9001998c:	6803      	ldr	r3, [r0, #0]
9001998e:	689b      	ldr	r3, [r3, #8]
90019990:	4798      	blx	r3
90019992:	b003      	add	sp, #12
90019994:	f85d fb04 	ldr.w	pc, [sp], #4
90019998:	240281e0 	.word	0x240281e0
9001999c:	240281e2 	.word	0x240281e2

900199a0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>:
900199a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
900199a4:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
900199a8:	b089      	sub	sp, #36	; 0x24
900199aa:	4680      	mov	r8, r0
900199ac:	460c      	mov	r4, r1
900199ae:	2b00      	cmp	r3, #0
900199b0:	4615      	mov	r5, r2
900199b2:	dd0e      	ble.n	900199d2 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
900199b4:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
900199b8:	2b00      	cmp	r3, #0
900199ba:	dd0a      	ble.n	900199d2 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
900199bc:	4628      	mov	r0, r5
900199be:	f7ff ff5b 	bl	90019878 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
900199c2:	4621      	mov	r1, r4
900199c4:	f7fe fb01 	bl	90017fca <_ZNK8touchgfx4Rect9intersectERKS0_>
900199c8:	69eb      	ldr	r3, [r5, #28]
900199ca:	b928      	cbnz	r0, 900199d8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x38>
900199cc:	461d      	mov	r5, r3
900199ce:	2b00      	cmp	r3, #0
900199d0:	d1f4      	bne.n	900199bc <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1c>
900199d2:	b009      	add	sp, #36	; 0x24
900199d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
900199d8:	ae04      	add	r6, sp, #16
900199da:	2b00      	cmp	r3, #0
900199dc:	f000 80b5 	beq.w	90019b4a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
900199e0:	682b      	ldr	r3, [r5, #0]
900199e2:	4629      	mov	r1, r5
900199e4:	a802      	add	r0, sp, #8
900199e6:	68db      	ldr	r3, [r3, #12]
900199e8:	4798      	blx	r3
900199ea:	4628      	mov	r0, r5
900199ec:	f7ff ff60 	bl	900198b0 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
900199f0:	f8bd 7008 	ldrh.w	r7, [sp, #8]
900199f4:	4407      	add	r7, r0
900199f6:	4628      	mov	r0, r5
900199f8:	f7ff ff6e 	bl	900198d8 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
900199fc:	f8bd 300a 	ldrh.w	r3, [sp, #10]
90019a00:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
90019a04:	b23f      	sxth	r7, r7
90019a06:	4418      	add	r0, r3
90019a08:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
90019a0c:	4621      	mov	r1, r4
90019a0e:	f8ad 2014 	strh.w	r2, [sp, #20]
90019a12:	f8ad 0012 	strh.w	r0, [sp, #18]
90019a16:	4630      	mov	r0, r6
90019a18:	f8ad 3016 	strh.w	r3, [sp, #22]
90019a1c:	f8ad 7010 	strh.w	r7, [sp, #16]
90019a20:	f7f9 f9c8 	bl	90012db4 <_ZN8touchgfx4RectaNERKS0_>
90019a24:	4628      	mov	r0, r5
90019a26:	f7ff ff27 	bl	90019878 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
90019a2a:	ab06      	add	r3, sp, #24
90019a2c:	4602      	mov	r2, r0
90019a2e:	e896 0003 	ldmia.w	r6, {r0, r1}
90019a32:	e883 0003 	stmia.w	r3, {r0, r1}
90019a36:	4611      	mov	r1, r2
90019a38:	4618      	mov	r0, r3
90019a3a:	f7f9 f9bb 	bl	90012db4 <_ZN8touchgfx4RectaNERKS0_>
90019a3e:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
90019a42:	f9b4 1000 	ldrsh.w	r1, [r4]
90019a46:	f9bd a01a 	ldrsh.w	sl, [sp, #26]
90019a4a:	4299      	cmp	r1, r3
90019a4c:	f9bd b01c 	ldrsh.w	fp, [sp, #28]
90019a50:	f9bd 901e 	ldrsh.w	r9, [sp, #30]
90019a54:	d10b      	bne.n	90019a6e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
90019a56:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
90019a5a:	4552      	cmp	r2, sl
90019a5c:	d107      	bne.n	90019a6e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
90019a5e:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
90019a62:	455a      	cmp	r2, fp
90019a64:	d103      	bne.n	90019a6e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
90019a66:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
90019a6a:	454a      	cmp	r2, r9
90019a6c:	d06d      	beq.n	90019b4a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
90019a6e:	f1bb 0f00 	cmp.w	fp, #0
90019a72:	dd65      	ble.n	90019b40 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
90019a74:	f1b9 0f00 	cmp.w	r9, #0
90019a78:	dd62      	ble.n	90019b40 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
90019a7a:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
90019a7e:	fa1f f08a 	uxth.w	r0, sl
90019a82:	4552      	cmp	r2, sl
90019a84:	9000      	str	r0, [sp, #0]
90019a86:	da12      	bge.n	90019aae <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x10e>
90019a88:	9301      	str	r3, [sp, #4]
90019a8a:	9b00      	ldr	r3, [sp, #0]
90019a8c:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
90019a90:	f8ad 2012 	strh.w	r2, [sp, #18]
90019a94:	1a9a      	subs	r2, r3, r2
90019a96:	f8ad 1010 	strh.w	r1, [sp, #16]
90019a9a:	4631      	mov	r1, r6
90019a9c:	f8ad 0014 	strh.w	r0, [sp, #20]
90019aa0:	4640      	mov	r0, r8
90019aa2:	f8ad 2016 	strh.w	r2, [sp, #22]
90019aa6:	69ea      	ldr	r2, [r5, #28]
90019aa8:	f7ff ff7a 	bl	900199a0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
90019aac:	9b01      	ldr	r3, [sp, #4]
90019aae:	f9b4 2000 	ldrsh.w	r2, [r4]
90019ab2:	b29f      	uxth	r7, r3
90019ab4:	429a      	cmp	r2, r3
90019ab6:	da0d      	bge.n	90019ad4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x134>
90019ab8:	f8ad 2010 	strh.w	r2, [sp, #16]
90019abc:	1aba      	subs	r2, r7, r2
90019abe:	f8ad a012 	strh.w	sl, [sp, #18]
90019ac2:	4631      	mov	r1, r6
90019ac4:	f8ad 2014 	strh.w	r2, [sp, #20]
90019ac8:	4640      	mov	r0, r8
90019aca:	f8ad 9016 	strh.w	r9, [sp, #22]
90019ace:	69ea      	ldr	r2, [r5, #28]
90019ad0:	f7ff ff66 	bl	900199a0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
90019ad4:	8822      	ldrh	r2, [r4, #0]
90019ad6:	445f      	add	r7, fp
90019ad8:	88a3      	ldrh	r3, [r4, #4]
90019ada:	b2bf      	uxth	r7, r7
90019adc:	4413      	add	r3, r2
90019ade:	b23a      	sxth	r2, r7
90019ae0:	b29b      	uxth	r3, r3
90019ae2:	b219      	sxth	r1, r3
90019ae4:	4291      	cmp	r1, r2
90019ae6:	dd0d      	ble.n	90019b04 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x164>
90019ae8:	1bdb      	subs	r3, r3, r7
90019aea:	f8ad 2010 	strh.w	r2, [sp, #16]
90019aee:	f8ad a012 	strh.w	sl, [sp, #18]
90019af2:	4631      	mov	r1, r6
90019af4:	f8ad 3014 	strh.w	r3, [sp, #20]
90019af8:	4640      	mov	r0, r8
90019afa:	f8ad 9016 	strh.w	r9, [sp, #22]
90019afe:	69ea      	ldr	r2, [r5, #28]
90019b00:	f7ff ff4e 	bl	900199a0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
90019b04:	88e2      	ldrh	r2, [r4, #6]
90019b06:	8863      	ldrh	r3, [r4, #2]
90019b08:	4413      	add	r3, r2
90019b0a:	9a00      	ldr	r2, [sp, #0]
90019b0c:	444a      	add	r2, r9
90019b0e:	b29b      	uxth	r3, r3
90019b10:	fa1f f982 	uxth.w	r9, r2
90019b14:	b219      	sxth	r1, r3
90019b16:	fa0f f289 	sxth.w	r2, r9
90019b1a:	428a      	cmp	r2, r1
90019b1c:	da15      	bge.n	90019b4a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
90019b1e:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
90019b22:	eba3 0309 	sub.w	r3, r3, r9
90019b26:	f9b4 0000 	ldrsh.w	r0, [r4]
90019b2a:	f8ad 1014 	strh.w	r1, [sp, #20]
90019b2e:	4631      	mov	r1, r6
90019b30:	f8ad 0010 	strh.w	r0, [sp, #16]
90019b34:	f8ad 2012 	strh.w	r2, [sp, #18]
90019b38:	f8ad 3016 	strh.w	r3, [sp, #22]
90019b3c:	69ea      	ldr	r2, [r5, #28]
90019b3e:	e001      	b.n	90019b44 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a4>
90019b40:	69ea      	ldr	r2, [r5, #28]
90019b42:	4621      	mov	r1, r4
90019b44:	4640      	mov	r0, r8
90019b46:	f7ff ff2b 	bl	900199a0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
90019b4a:	4628      	mov	r0, r5
90019b4c:	f7ff fe94 	bl	90019878 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
90019b50:	6861      	ldr	r1, [r4, #4]
90019b52:	4602      	mov	r2, r0
90019b54:	4633      	mov	r3, r6
90019b56:	6820      	ldr	r0, [r4, #0]
90019b58:	c303      	stmia	r3!, {r0, r1}
90019b5a:	4611      	mov	r1, r2
90019b5c:	4630      	mov	r0, r6
90019b5e:	f7f9 f929 	bl	90012db4 <_ZN8touchgfx4RectaNERKS0_>
90019b62:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
90019b66:	2b00      	cmp	r3, #0
90019b68:	f77f af33 	ble.w	900199d2 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
90019b6c:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
90019b70:	2b00      	cmp	r3, #0
90019b72:	f77f af2e 	ble.w	900199d2 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
90019b76:	4628      	mov	r0, r5
90019b78:	f7ff fe9a 	bl	900198b0 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
90019b7c:	f8bd 3010 	ldrh.w	r3, [sp, #16]
90019b80:	1a18      	subs	r0, r3, r0
90019b82:	f8ad 0010 	strh.w	r0, [sp, #16]
90019b86:	4628      	mov	r0, r5
90019b88:	f7ff fea6 	bl	900198d8 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
90019b8c:	f8bd 3012 	ldrh.w	r3, [sp, #18]
90019b90:	4631      	mov	r1, r6
90019b92:	1a18      	subs	r0, r3, r0
90019b94:	f8ad 0012 	strh.w	r0, [sp, #18]
90019b98:	4628      	mov	r0, r5
90019b9a:	682b      	ldr	r3, [r5, #0]
90019b9c:	689b      	ldr	r3, [r3, #8]
90019b9e:	4798      	blx	r3
90019ba0:	e717      	b.n	900199d2 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>

90019ba2 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>:
90019ba2:	b570      	push	{r4, r5, r6, lr}
90019ba4:	1d06      	adds	r6, r0, #4
90019ba6:	b086      	sub	sp, #24
90019ba8:	460c      	mov	r4, r1
90019baa:	2300      	movs	r3, #0
90019bac:	4631      	mov	r1, r6
90019bae:	4605      	mov	r5, r0
90019bb0:	a802      	add	r0, sp, #8
90019bb2:	9301      	str	r3, [sp, #4]
90019bb4:	f7ff fbcc 	bl	90019350 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
90019bb8:	f8bd 3008 	ldrh.w	r3, [sp, #8]
90019bbc:	8822      	ldrh	r2, [r4, #0]
90019bbe:	f8bd 100a 	ldrh.w	r1, [sp, #10]
90019bc2:	1ad2      	subs	r2, r2, r3
90019bc4:	8863      	ldrh	r3, [r4, #2]
90019bc6:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
90019bca:	1a5b      	subs	r3, r3, r1
90019bcc:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
90019bd0:	f8ad 2010 	strh.w	r2, [sp, #16]
90019bd4:	aa01      	add	r2, sp, #4
90019bd6:	f8ad 0014 	strh.w	r0, [sp, #20]
90019bda:	4630      	mov	r0, r6
90019bdc:	f8ad 1016 	strh.w	r1, [sp, #22]
90019be0:	a904      	add	r1, sp, #16
90019be2:	f8ad 3012 	strh.w	r3, [sp, #18]
90019be6:	f7f9 f9bd 	bl	90012f64 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>
90019bea:	9a01      	ldr	r2, [sp, #4]
90019bec:	b11a      	cbz	r2, 90019bf6 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE+0x54>
90019bee:	4621      	mov	r1, r4
90019bf0:	4628      	mov	r0, r5
90019bf2:	f7ff fed5 	bl	900199a0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
90019bf6:	b006      	add	sp, #24
90019bf8:	bd70      	pop	{r4, r5, r6, pc}

90019bfa <_ZN8touchgfx6Screen4drawERNS_4RectE>:
90019bfa:	4602      	mov	r2, r0
90019bfc:	b530      	push	{r4, r5, lr}
90019bfe:	4604      	mov	r4, r0
90019c00:	b085      	sub	sp, #20
90019c02:	f852 0f08 	ldr.w	r0, [r2, #8]!
90019c06:	460d      	mov	r5, r1
90019c08:	466b      	mov	r3, sp
90019c0a:	6851      	ldr	r1, [r2, #4]
90019c0c:	c303      	stmia	r3!, {r0, r1}
90019c0e:	4629      	mov	r1, r5
90019c10:	4668      	mov	r0, sp
90019c12:	f7f9 f8cf 	bl	90012db4 <_ZN8touchgfx4RectaNERKS0_>
90019c16:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
90019c1a:	b12b      	cbz	r3, 90019c28 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2e>
90019c1c:	4669      	mov	r1, sp
90019c1e:	4620      	mov	r0, r4
90019c20:	f7ff ffbf 	bl	90019ba2 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>
90019c24:	b005      	add	sp, #20
90019c26:	bd30      	pop	{r4, r5, pc}
90019c28:	3404      	adds	r4, #4
90019c2a:	a802      	add	r0, sp, #8
90019c2c:	4621      	mov	r1, r4
90019c2e:	f7ff fb8f 	bl	90019350 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
90019c32:	f8bd 3000 	ldrh.w	r3, [sp]
90019c36:	f8bd 2008 	ldrh.w	r2, [sp, #8]
90019c3a:	4669      	mov	r1, sp
90019c3c:	4620      	mov	r0, r4
90019c3e:	1a9b      	subs	r3, r3, r2
90019c40:	f8bd 200a 	ldrh.w	r2, [sp, #10]
90019c44:	f8ad 3000 	strh.w	r3, [sp]
90019c48:	f8bd 3002 	ldrh.w	r3, [sp, #2]
90019c4c:	1a9b      	subs	r3, r3, r2
90019c4e:	f8ad 3002 	strh.w	r3, [sp, #2]
90019c52:	f7f9 f94e 	bl	90012ef2 <_ZNK8touchgfx9Container4drawERKNS_4RectE>
90019c56:	e7e5      	b.n	90019c24 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2a>

90019c58 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>:
90019c58:	460b      	mov	r3, r1
90019c5a:	680a      	ldr	r2, [r1, #0]
90019c5c:	1d01      	adds	r1, r0, #4
90019c5e:	6992      	ldr	r2, [r2, #24]
90019c60:	4618      	mov	r0, r3
90019c62:	4710      	bx	r2

90019c64 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst>:
90019c64:	4298      	cmp	r0, r3
90019c66:	d200      	bcs.n	90019c6a <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst+0x6>
90019c68:	b913      	cbnz	r3, 90019c70 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst+0xc>
90019c6a:	440a      	add	r2, r1
90019c6c:	b210      	sxth	r0, r2
90019c6e:	4770      	bx	lr
90019c70:	ee07 0a90 	vmov	s15, r0
90019c74:	eef8 6a67 	vcvt.f32.u32	s13, s15
90019c78:	ee07 3a90 	vmov	s15, r3
90019c7c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
90019c80:	ee86 7aa7 	vdiv.f32	s14, s13, s15
90019c84:	ee07 2a90 	vmov	s15, r2
90019c88:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
90019c8c:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
90019c90:	ee07 1a90 	vmov	s15, r1
90019c94:	eef8 7ae7 	vcvt.f32.s32	s15, s15
90019c98:	ee37 7a66 	vsub.f32	s14, s14, s13
90019c9c:	ee67 5a07 	vmul.f32	s11, s14, s14
90019ca0:	eee5 6a87 	vfma.f32	s13, s11, s14
90019ca4:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
90019ca8:	eee6 7a26 	vfma.f32	s15, s12, s13
90019cac:	eef5 7ac0 	vcmpe.f32	s15, #0.0
90019cb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
90019cb4:	bfcc      	ite	gt
90019cb6:	ee77 7a87 	vaddgt.f32	s15, s15, s14
90019cba:	ee77 7ac7 	vsuble.f32	s15, s15, s14
90019cbe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
90019cc2:	ee17 3a90 	vmov	r3, s15
90019cc6:	b218      	sxth	r0, r3
90019cc8:	4770      	bx	lr

90019cca <_ZN8touchgfx12TextProviderC1Ev>:
90019cca:	b538      	push	{r3, r4, r5, lr}
90019ccc:	2500      	movs	r5, #0
90019cce:	2302      	movs	r3, #2
90019cd0:	4604      	mov	r4, r0
90019cd2:	220e      	movs	r2, #14
90019cd4:	7403      	strb	r3, [r0, #16]
90019cd6:	4629      	mov	r1, r5
90019cd8:	6145      	str	r5, [r0, #20]
90019cda:	7605      	strb	r5, [r0, #24]
90019cdc:	83c5      	strh	r5, [r0, #30]
90019cde:	8405      	strh	r5, [r0, #32]
90019ce0:	86c5      	strh	r5, [r0, #54]	; 0x36
90019ce2:	8705      	strh	r5, [r0, #56]	; 0x38
90019ce4:	87c5      	strh	r5, [r0, #62]	; 0x3e
90019ce6:	f8a0 5040 	strh.w	r5, [r0, #64]	; 0x40
90019cea:	e9c0 5500 	strd	r5, r5, [r0]
90019cee:	e9c0 5511 	strd	r5, r5, [r0, #68]	; 0x44
90019cf2:	304c      	adds	r0, #76	; 0x4c
90019cf4:	f00d ff62 	bl	90027bbc <memset>
90019cf8:	2301      	movs	r3, #1
90019cfa:	4620      	mov	r0, r4
90019cfc:	f8a4 505a 	strh.w	r5, [r4, #90]	; 0x5a
90019d00:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
90019d04:	f8a4 505e 	strh.w	r5, [r4, #94]	; 0x5e
90019d08:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
90019d0c:	f884 5061 	strb.w	r5, [r4, #97]	; 0x61
90019d10:	f7ee fa4e 	bl	900081b0 <_ZN8touchgfx12TextProvider18initializeInternalEv>
90019d14:	4620      	mov	r0, r4
90019d16:	bd38      	pop	{r3, r4, r5, pc}

90019d18 <_ZN8touchgfx12TextProvider11endOfStringEv>:
90019d18:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
90019d1a:	eb00 0043 	add.w	r0, r0, r3, lsl #1
90019d1e:	8c40      	ldrh	r0, [r0, #34]	; 0x22
90019d20:	fab0 f080 	clz	r0, r0
90019d24:	0940      	lsrs	r0, r0, #5
90019d26:	4770      	bx	lr

90019d28 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>:
90019d28:	b530      	push	{r4, r5, lr}
90019d2a:	2500      	movs	r5, #0
90019d2c:	2401      	movs	r4, #1
90019d2e:	6843      	ldr	r3, [r0, #4]
90019d30:	b913      	cbnz	r3, 90019d38 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x10>
90019d32:	6803      	ldr	r3, [r0, #0]
90019d34:	b313      	cbz	r3, 90019d7c <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
90019d36:	6043      	str	r3, [r0, #4]
90019d38:	7e03      	ldrb	r3, [r0, #24]
90019d3a:	b143      	cbz	r3, 90019d4e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x26>
90019d3c:	6943      	ldr	r3, [r0, #20]
90019d3e:	b12b      	cbz	r3, 90019d4c <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
90019d40:	881a      	ldrh	r2, [r3, #0]
90019d42:	b11a      	cbz	r2, 90019d4c <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
90019d44:	1c9a      	adds	r2, r3, #2
90019d46:	6142      	str	r2, [r0, #20]
90019d48:	8818      	ldrh	r0, [r3, #0]
90019d4a:	bd30      	pop	{r4, r5, pc}
90019d4c:	7605      	strb	r5, [r0, #24]
90019d4e:	6843      	ldr	r3, [r0, #4]
90019d50:	8819      	ldrh	r1, [r3, #0]
90019d52:	b199      	cbz	r1, 90019d7c <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
90019d54:	1c9a      	adds	r2, r3, #2
90019d56:	2902      	cmp	r1, #2
90019d58:	6042      	str	r2, [r0, #4]
90019d5a:	d1f5      	bne.n	90019d48 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x20>
90019d5c:	7c03      	ldrb	r3, [r0, #16]
90019d5e:	2b01      	cmp	r3, #1
90019d60:	d8e5      	bhi.n	90019d2e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
90019d62:	1c5a      	adds	r2, r3, #1
90019d64:	3302      	adds	r3, #2
90019d66:	7402      	strb	r2, [r0, #16]
90019d68:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
90019d6c:	6143      	str	r3, [r0, #20]
90019d6e:	2b00      	cmp	r3, #0
90019d70:	d0dd      	beq.n	90019d2e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
90019d72:	881b      	ldrh	r3, [r3, #0]
90019d74:	2b00      	cmp	r3, #0
90019d76:	d0da      	beq.n	90019d2e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
90019d78:	7604      	strb	r4, [r0, #24]
90019d7a:	e7d8      	b.n	90019d2e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
90019d7c:	2000      	movs	r0, #0
90019d7e:	e7e4      	b.n	90019d4a <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x22>

90019d80 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>:
90019d80:	6001      	str	r1, [r0, #0]
90019d82:	2100      	movs	r1, #0
90019d84:	b430      	push	{r4, r5}
90019d86:	6041      	str	r1, [r0, #4]
90019d88:	6815      	ldr	r5, [r2, #0]
90019d8a:	6085      	str	r5, [r0, #8]
90019d8c:	6852      	ldr	r2, [r2, #4]
90019d8e:	6443      	str	r3, [r0, #68]	; 0x44
90019d90:	9b02      	ldr	r3, [sp, #8]
90019d92:	60c2      	str	r2, [r0, #12]
90019d94:	7401      	strb	r1, [r0, #16]
90019d96:	6141      	str	r1, [r0, #20]
90019d98:	7601      	strb	r1, [r0, #24]
90019d9a:	8701      	strh	r1, [r0, #56]	; 0x38
90019d9c:	8401      	strh	r1, [r0, #32]
90019d9e:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
90019da2:	6483      	str	r3, [r0, #72]	; 0x48
90019da4:	bc30      	pop	{r4, r5}
90019da6:	f7ee ba03 	b.w	900081b0 <_ZN8touchgfx12TextProvider18initializeInternalEv>

90019daa <_ZN8touchgfx12TextProvider10initializeEPKtS2_PKNS_24FontContextualFormsTableEz>:
90019daa:	b408      	push	{r3}
90019dac:	b510      	push	{r4, lr}
90019dae:	b085      	sub	sp, #20
90019db0:	ac07      	add	r4, sp, #28
90019db2:	f854 3b04 	ldr.w	r3, [r4], #4
90019db6:	9300      	str	r3, [sp, #0]
90019db8:	4613      	mov	r3, r2
90019dba:	4622      	mov	r2, r4
90019dbc:	9403      	str	r4, [sp, #12]
90019dbe:	f7ff ffdf 	bl	90019d80 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
90019dc2:	b005      	add	sp, #20
90019dc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
90019dc8:	b001      	add	sp, #4
90019dca:	4770      	bx	lr

90019dcc <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>:
90019dcc:	b5f0      	push	{r4, r5, r6, r7, lr}
90019dce:	4605      	mov	r5, r0
90019dd0:	4608      	mov	r0, r1
90019dd2:	b1f1      	cbz	r1, 90019e12 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x46>
90019dd4:	f105 044c 	add.w	r4, r5, #76	; 0x4c
90019dd8:	460b      	mov	r3, r1
90019dda:	f101 0708 	add.w	r7, r1, #8
90019dde:	4622      	mov	r2, r4
90019de0:	6818      	ldr	r0, [r3, #0]
90019de2:	3308      	adds	r3, #8
90019de4:	f853 1c04 	ldr.w	r1, [r3, #-4]
90019de8:	4626      	mov	r6, r4
90019dea:	42bb      	cmp	r3, r7
90019dec:	c603      	stmia	r6!, {r0, r1}
90019dee:	4634      	mov	r4, r6
90019df0:	d1f6      	bne.n	90019de0 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x14>
90019df2:	6818      	ldr	r0, [r3, #0]
90019df4:	6030      	str	r0, [r6, #0]
90019df6:	4610      	mov	r0, r2
90019df8:	889b      	ldrh	r3, [r3, #4]
90019dfa:	80b3      	strh	r3, [r6, #4]
90019dfc:	f895 3059 	ldrb.w	r3, [r5, #89]	; 0x59
90019e00:	015b      	lsls	r3, r3, #5
90019e02:	f403 7180 	and.w	r1, r3, #256	; 0x100
90019e06:	f895 3052 	ldrb.w	r3, [r5, #82]	; 0x52
90019e0a:	430b      	orrs	r3, r1
90019e0c:	425b      	negs	r3, r3
90019e0e:	f885 3055 	strb.w	r3, [r5, #85]	; 0x55
90019e12:	bdf0      	pop	{r4, r5, r6, r7, pc}

90019e14 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>:
90019e14:	b538      	push	{r3, r4, r5, lr}
90019e16:	460c      	mov	r4, r1
90019e18:	6811      	ldr	r1, [r2, #0]
90019e1a:	4610      	mov	r0, r2
90019e1c:	68cd      	ldr	r5, [r1, #12]
90019e1e:	4619      	mov	r1, r3
90019e20:	47a8      	blx	r5
90019e22:	2800      	cmp	r0, #0
90019e24:	bf08      	it	eq
90019e26:	4620      	moveq	r0, r4
90019e28:	bd38      	pop	{r3, r4, r5, pc}
	...

90019e2c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>:
90019e2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
90019e2e:	4604      	mov	r4, r0
90019e30:	4615      	mov	r5, r2
90019e32:	4608      	mov	r0, r1
90019e34:	b93a      	cbnz	r2, 90019e46 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1a>
90019e36:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
90019e3a:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
90019e3e:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
90019e42:	4628      	mov	r0, r5
90019e44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
90019e46:	f892 c00d 	ldrb.w	ip, [r2, #13]
90019e4a:	f46f 6763 	mvn.w	r7, #3632	; 0xe30
90019e4e:	8893      	ldrh	r3, [r2, #4]
90019e50:	ea4f 160c 	mov.w	r6, ip, lsl #4
90019e54:	f406 7280 	and.w	r2, r6, #256	; 0x100
90019e58:	79ee      	ldrb	r6, [r5, #7]
90019e5a:	4316      	orrs	r6, r2
90019e5c:	19da      	adds	r2, r3, r7
90019e5e:	b291      	uxth	r1, r2
90019e60:	b2b7      	uxth	r7, r6
90019e62:	291d      	cmp	r1, #29
90019e64:	d87b      	bhi.n	90019f5e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x132>
90019e66:	2201      	movs	r2, #1
90019e68:	10f6      	asrs	r6, r6, #3
90019e6a:	408a      	lsls	r2, r1
90019e6c:	4974      	ldr	r1, [pc, #464]	; (9001a040 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x214>)
90019e6e:	420a      	tst	r2, r1
90019e70:	d12e      	bne.n	90019ed0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa4>
90019e72:	f412 7f60 	tst.w	r2, #896	; 0x380
90019e76:	d072      	beq.n	90019f5e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x132>
90019e78:	f104 024c 	add.w	r2, r4, #76	; 0x4c
90019e7c:	462b      	mov	r3, r5
90019e7e:	f105 0e08 	add.w	lr, r5, #8
90019e82:	4615      	mov	r5, r2
90019e84:	6818      	ldr	r0, [r3, #0]
90019e86:	3308      	adds	r3, #8
90019e88:	f853 1c04 	ldr.w	r1, [r3, #-4]
90019e8c:	4694      	mov	ip, r2
90019e8e:	4573      	cmp	r3, lr
90019e90:	e8ac 0003 	stmia.w	ip!, {r0, r1}
90019e94:	4662      	mov	r2, ip
90019e96:	d1f5      	bne.n	90019e84 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x58>
90019e98:	6818      	ldr	r0, [r3, #0]
90019e9a:	f8cc 0000 	str.w	r0, [ip]
90019e9e:	889b      	ldrh	r3, [r3, #4]
90019ea0:	f8ac 3004 	strh.w	r3, [ip, #4]
90019ea4:	b2b3      	uxth	r3, r6
90019ea6:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
90019eaa:	f894 0059 	ldrb.w	r0, [r4, #89]	; 0x59
90019eae:	1aca      	subs	r2, r1, r3
90019eb0:	1bcf      	subs	r7, r1, r7
90019eb2:	f020 0060 	bic.w	r0, r0, #96	; 0x60
90019eb6:	b292      	uxth	r2, r2
90019eb8:	1afb      	subs	r3, r7, r3
90019eba:	f884 2054 	strb.w	r2, [r4, #84]	; 0x54
90019ebe:	10d2      	asrs	r2, r2, #3
90019ec0:	f002 0260 	and.w	r2, r2, #96	; 0x60
90019ec4:	4302      	orrs	r2, r0
90019ec6:	f884 2059 	strb.w	r2, [r4, #89]	; 0x59
90019eca:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
90019ece:	e7b8      	b.n	90019e42 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
90019ed0:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
90019ed2:	eb04 0343 	add.w	r3, r4, r3, lsl #1
90019ed6:	8c59      	ldrh	r1, [r3, #34]	; 0x22
90019ed8:	f640 6333 	movw	r3, #3635	; 0xe33
90019edc:	4299      	cmp	r1, r3
90019ede:	d110      	bne.n	90019f02 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xd6>
90019ee0:	6803      	ldr	r3, [r0, #0]
90019ee2:	68db      	ldr	r3, [r3, #12]
90019ee4:	4798      	blx	r3
90019ee6:	7b41      	ldrb	r1, [r0, #13]
90019ee8:	00cb      	lsls	r3, r1, #3
90019eea:	f403 7280 	and.w	r2, r3, #256	; 0x100
90019eee:	7a03      	ldrb	r3, [r0, #8]
90019ef0:	0648      	lsls	r0, r1, #25
90019ef2:	ea43 0302 	orr.w	r3, r3, r2
90019ef6:	bf44      	itt	mi
90019ef8:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
90019efc:	b21b      	sxthmi	r3, r3
90019efe:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
90019f02:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
90019f06:	462a      	mov	r2, r5
90019f08:	f105 0c08 	add.w	ip, r5, #8
90019f0c:	443b      	add	r3, r7
90019f0e:	4433      	add	r3, r6
90019f10:	f104 064c 	add.w	r6, r4, #76	; 0x4c
90019f14:	b29b      	uxth	r3, r3
90019f16:	4635      	mov	r5, r6
90019f18:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
90019f1c:	6810      	ldr	r0, [r2, #0]
90019f1e:	3208      	adds	r2, #8
90019f20:	f852 1c04 	ldr.w	r1, [r2, #-4]
90019f24:	4637      	mov	r7, r6
90019f26:	4562      	cmp	r2, ip
90019f28:	c703      	stmia	r7!, {r0, r1}
90019f2a:	463e      	mov	r6, r7
90019f2c:	d1f6      	bne.n	90019f1c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xf0>
90019f2e:	6810      	ldr	r0, [r2, #0]
90019f30:	6038      	str	r0, [r7, #0]
90019f32:	8892      	ldrh	r2, [r2, #4]
90019f34:	80ba      	strh	r2, [r7, #4]
90019f36:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
90019f3a:	10db      	asrs	r3, r3, #3
90019f3c:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
90019f40:	f003 0360 	and.w	r3, r3, #96	; 0x60
90019f44:	f022 0260 	bic.w	r2, r2, #96	; 0x60
90019f48:	4313      	orrs	r3, r2
90019f4a:	f894 205e 	ldrb.w	r2, [r4, #94]	; 0x5e
90019f4e:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
90019f52:	f894 3055 	ldrb.w	r3, [r4, #85]	; 0x55
90019f56:	1a9b      	subs	r3, r3, r2
90019f58:	f884 3055 	strb.w	r3, [r4, #85]	; 0x55
90019f5c:	e771      	b.n	90019e42 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
90019f5e:	f023 0204 	bic.w	r2, r3, #4
90019f62:	f640 611b 	movw	r1, #3611	; 0xe1b
90019f66:	428a      	cmp	r2, r1
90019f68:	d003      	beq.n	90019f72 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x146>
90019f6a:	f640 621d 	movw	r2, #3613	; 0xe1d
90019f6e:	4293      	cmp	r3, r2
90019f70:	d120      	bne.n	90019fb4 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x188>
90019f72:	3b01      	subs	r3, #1
90019f74:	4602      	mov	r2, r0
90019f76:	4629      	mov	r1, r5
90019f78:	4620      	mov	r0, r4
90019f7a:	b29b      	uxth	r3, r3
90019f7c:	f7ff ff4a 	bl	90019e14 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
90019f80:	7b41      	ldrb	r1, [r0, #13]
90019f82:	00cb      	lsls	r3, r1, #3
90019f84:	0649      	lsls	r1, r1, #25
90019f86:	f403 7280 	and.w	r2, r3, #256	; 0x100
90019f8a:	7a03      	ldrb	r3, [r0, #8]
90019f8c:	ea43 0302 	orr.w	r3, r3, r2
90019f90:	bf44      	itt	mi
90019f92:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
90019f96:	b21b      	sxthmi	r3, r3
90019f98:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
90019f9c:	7b6b      	ldrb	r3, [r5, #13]
90019f9e:	7aaa      	ldrb	r2, [r5, #10]
90019fa0:	005b      	lsls	r3, r3, #1
90019fa2:	f403 7380 	and.w	r3, r3, #256	; 0x100
90019fa6:	4313      	orrs	r3, r2
90019fa8:	115a      	asrs	r2, r3, #5
90019faa:	eb02 0393 	add.w	r3, r2, r3, lsr #2
90019fae:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
90019fb2:	e035      	b.n	9001a020 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1f4>
90019fb4:	ea4f 02cc 	mov.w	r2, ip, lsl #3
90019fb8:	f01c 0f40 	tst.w	ip, #64	; 0x40
90019fbc:	f402 7180 	and.w	r1, r2, #256	; 0x100
90019fc0:	7a2a      	ldrb	r2, [r5, #8]
90019fc2:	ea42 0201 	orr.w	r2, r2, r1
90019fc6:	f640 6109 	movw	r1, #3593	; 0xe09
90019fca:	bf1c      	itt	ne
90019fcc:	f5a2 7200 	subne.w	r2, r2, #512	; 0x200
90019fd0:	b212      	sxthne	r2, r2
90019fd2:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
90019fd6:	f023 0210 	bic.w	r2, r3, #16
90019fda:	428a      	cmp	r2, r1
90019fdc:	d003      	beq.n	90019fe6 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1ba>
90019fde:	f640 6213 	movw	r2, #3603	; 0xe13
90019fe2:	4293      	cmp	r3, r2
90019fe4:	d129      	bne.n	9001a03a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x20e>
90019fe6:	7b6e      	ldrb	r6, [r5, #13]
90019fe8:	4629      	mov	r1, r5
90019fea:	0076      	lsls	r6, r6, #1
90019fec:	f406 7280 	and.w	r2, r6, #256	; 0x100
90019ff0:	7aae      	ldrb	r6, [r5, #10]
90019ff2:	4316      	orrs	r6, r2
90019ff4:	f640 6213 	movw	r2, #3603	; 0xe13
90019ff8:	4293      	cmp	r3, r2
90019ffa:	4602      	mov	r2, r0
90019ffc:	4620      	mov	r0, r4
90019ffe:	bf16      	itet	ne
9001a000:	f103 33ff 	addne.w	r3, r3, #4294967295
9001a004:	f640 630c 	movweq	r3, #3596	; 0xe0c
9001a008:	b29b      	uxthne	r3, r3
9001a00a:	f7ff ff03 	bl	90019e14 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
9001a00e:	7b43      	ldrb	r3, [r0, #13]
9001a010:	7a82      	ldrb	r2, [r0, #10]
9001a012:	005b      	lsls	r3, r3, #1
9001a014:	f403 7380 	and.w	r3, r3, #256	; 0x100
9001a018:	4313      	orrs	r3, r2
9001a01a:	1af6      	subs	r6, r6, r3
9001a01c:	f8a4 605e 	strh.w	r6, [r4, #94]	; 0x5e
9001a020:	7b69      	ldrb	r1, [r5, #13]
9001a022:	00cb      	lsls	r3, r1, #3
9001a024:	f403 7280 	and.w	r2, r3, #256	; 0x100
9001a028:	7a2b      	ldrb	r3, [r5, #8]
9001a02a:	4313      	orrs	r3, r2
9001a02c:	064a      	lsls	r2, r1, #25
9001a02e:	bf44      	itt	mi
9001a030:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
9001a034:	b21b      	sxthmi	r3, r3
9001a036:	1bdb      	subs	r3, r3, r7
9001a038:	e747      	b.n	90019eca <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x9e>
9001a03a:	2300      	movs	r3, #0
9001a03c:	e7b7      	b.n	90019fae <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x182>
9001a03e:	bf00      	nop
9001a040:	3fc00079 	.word	0x3fc00079

9001a044 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>:
9001a044:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
9001a048:	4604      	mov	r4, r0
9001a04a:	b942      	cbnz	r2, 9001a05e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1a>
9001a04c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
9001a050:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
9001a054:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
9001a058:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
9001a05c:	e047      	b.n	9001a0ee <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
9001a05e:	7b51      	ldrb	r1, [r2, #13]
9001a060:	8893      	ldrh	r3, [r2, #4]
9001a062:	010d      	lsls	r5, r1, #4
9001a064:	f405 7080 	and.w	r0, r5, #256	; 0x100
9001a068:	79d5      	ldrb	r5, [r2, #7]
9001a06a:	4305      	orrs	r5, r0
9001a06c:	2d04      	cmp	r5, #4
9001a06e:	bfcc      	ite	gt
9001a070:	ea4f 0e95 	movgt.w	lr, r5, lsr #2
9001a074:	f04f 0e01 	movle.w	lr, #1
9001a078:	f5b3 6fdd 	cmp.w	r3, #1768	; 0x6e8
9001a07c:	f200 80ab 	bhi.w	9001a1d6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x192>
9001a080:	f240 60e7 	movw	r0, #1767	; 0x6e7
9001a084:	4283      	cmp	r3, r0
9001a086:	d216      	bcs.n	9001a0b6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
9001a088:	f240 605b 	movw	r0, #1627	; 0x65b
9001a08c:	4283      	cmp	r3, r0
9001a08e:	d859      	bhi.n	9001a144 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x100>
9001a090:	f240 6057 	movw	r0, #1623	; 0x657
9001a094:	4283      	cmp	r3, r0
9001a096:	d20e      	bcs.n	9001a0b6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
9001a098:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
9001a09c:	d24a      	bcs.n	9001a134 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xf0>
9001a09e:	f240 604e 	movw	r0, #1614	; 0x64e
9001a0a2:	4283      	cmp	r3, r0
9001a0a4:	d207      	bcs.n	9001a0b6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
9001a0a6:	f240 601a 	movw	r0, #1562	; 0x61a
9001a0aa:	4283      	cmp	r3, r0
9001a0ac:	d02a      	beq.n	9001a104 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
9001a0ae:	d821      	bhi.n	9001a0f4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xb0>
9001a0b0:	f5b3 6fc2 	cmp.w	r3, #1552	; 0x610
9001a0b4:	d35b      	bcc.n	9001a16e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
9001a0b6:	f9b4 305a 	ldrsh.w	r3, [r4, #90]	; 0x5a
9001a0ba:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
9001a0be:	f040 80d0 	bne.w	9001a262 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
9001a0c2:	f9b4 005c 	ldrsh.w	r0, [r4, #92]	; 0x5c
9001a0c6:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
9001a0ca:	f040 80ca 	bne.w	9001a262 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
9001a0ce:	00cb      	lsls	r3, r1, #3
9001a0d0:	0649      	lsls	r1, r1, #25
9001a0d2:	f403 7080 	and.w	r0, r3, #256	; 0x100
9001a0d6:	7a13      	ldrb	r3, [r2, #8]
9001a0d8:	ea43 0300 	orr.w	r3, r3, r0
9001a0dc:	bf44      	itt	mi
9001a0de:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
9001a0e2:	b21b      	sxthmi	r3, r3
9001a0e4:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
9001a0e8:	1b5d      	subs	r5, r3, r5
9001a0ea:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
9001a0ee:	4610      	mov	r0, r2
9001a0f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
9001a0f4:	f240 604b 	movw	r0, #1611	; 0x64b
9001a0f8:	4283      	cmp	r3, r0
9001a0fa:	d338      	bcc.n	9001a16e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
9001a0fc:	f240 604c 	movw	r0, #1612	; 0x64c
9001a100:	4283      	cmp	r3, r0
9001a102:	d9d8      	bls.n	9001a0b6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
9001a104:	f9b4 005a 	ldrsh.w	r0, [r4, #90]	; 0x5a
9001a108:	f9b4 305c 	ldrsh.w	r3, [r4, #92]	; 0x5c
9001a10c:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
9001a110:	f040 80f3 	bne.w	9001a2fa <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b6>
9001a114:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
9001a118:	f040 80ef 	bne.w	9001a2fa <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b6>
9001a11c:	00cb      	lsls	r3, r1, #3
9001a11e:	064e      	lsls	r6, r1, #25
9001a120:	f403 7080 	and.w	r0, r3, #256	; 0x100
9001a124:	7a13      	ldrb	r3, [r2, #8]
9001a126:	ea43 0300 	orr.w	r3, r3, r0
9001a12a:	bf44      	itt	mi
9001a12c:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
9001a130:	b21b      	sxthmi	r3, r3
9001a132:	e7d9      	b.n	9001a0e8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa4>
9001a134:	f240 6054 	movw	r0, #1620	; 0x654
9001a138:	4283      	cmp	r3, r0
9001a13a:	d8e3      	bhi.n	9001a104 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
9001a13c:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
9001a140:	d9e0      	bls.n	9001a104 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
9001a142:	e7b8      	b.n	9001a0b6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
9001a144:	f240 6074 	movw	r0, #1652	; 0x674
9001a148:	4283      	cmp	r3, r0
9001a14a:	d0b4      	beq.n	9001a0b6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
9001a14c:	d82d      	bhi.n	9001a1aa <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x166>
9001a14e:	f240 605e 	movw	r0, #1630	; 0x65e
9001a152:	4283      	cmp	r3, r0
9001a154:	d804      	bhi.n	9001a160 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x11c>
9001a156:	f240 605d 	movw	r0, #1629	; 0x65d
9001a15a:	4283      	cmp	r3, r0
9001a15c:	d3d2      	bcc.n	9001a104 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
9001a15e:	e7aa      	b.n	9001a0b6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
9001a160:	f240 605f 	movw	r0, #1631	; 0x65f
9001a164:	4283      	cmp	r3, r0
9001a166:	d0cd      	beq.n	9001a104 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
9001a168:	f5b3 6fce 	cmp.w	r3, #1648	; 0x670
9001a16c:	d0a3      	beq.n	9001a0b6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
9001a16e:	00cb      	lsls	r3, r1, #3
9001a170:	0649      	lsls	r1, r1, #25
9001a172:	f403 7080 	and.w	r0, r3, #256	; 0x100
9001a176:	7a13      	ldrb	r3, [r2, #8]
9001a178:	ea43 0300 	orr.w	r3, r3, r0
9001a17c:	bf44      	itt	mi
9001a17e:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
9001a182:	b21b      	sxthmi	r3, r3
9001a184:	1b5d      	subs	r5, r3, r5
9001a186:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
9001a18a:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
9001a18e:	7b53      	ldrb	r3, [r2, #13]
9001a190:	015b      	lsls	r3, r3, #5
9001a192:	f403 7180 	and.w	r1, r3, #256	; 0x100
9001a196:	7993      	ldrb	r3, [r2, #6]
9001a198:	430b      	orrs	r3, r1
9001a19a:	2105      	movs	r1, #5
9001a19c:	005b      	lsls	r3, r3, #1
9001a19e:	fb93 f3f1 	sdiv	r3, r3, r1
9001a1a2:	f992 1009 	ldrsb.w	r1, [r2, #9]
9001a1a6:	440b      	add	r3, r1
9001a1a8:	e756      	b.n	9001a058 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x14>
9001a1aa:	f240 60e2 	movw	r0, #1762	; 0x6e2
9001a1ae:	4283      	cmp	r3, r0
9001a1b0:	d809      	bhi.n	9001a1c6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x182>
9001a1b2:	f240 60df 	movw	r0, #1759	; 0x6df
9001a1b6:	4283      	cmp	r3, r0
9001a1b8:	f4bf af7d 	bcs.w	9001a0b6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
9001a1bc:	f2a3 63d6 	subw	r3, r3, #1750	; 0x6d6
9001a1c0:	2b05      	cmp	r3, #5
9001a1c2:	d8d4      	bhi.n	9001a16e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
9001a1c4:	e777      	b.n	9001a0b6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
9001a1c6:	f240 60e3 	movw	r0, #1763	; 0x6e3
9001a1ca:	4283      	cmp	r3, r0
9001a1cc:	d09a      	beq.n	9001a104 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
9001a1ce:	f240 60e4 	movw	r0, #1764	; 0x6e4
9001a1d2:	4283      	cmp	r3, r0
9001a1d4:	e7ca      	b.n	9001a16c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
9001a1d6:	f5b3 6f0f 	cmp.w	r3, #2288	; 0x8f0
9001a1da:	d22b      	bcs.n	9001a234 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1f0>
9001a1dc:	f640 00ed 	movw	r0, #2285	; 0x8ed
9001a1e0:	4283      	cmp	r3, r0
9001a1e2:	d28f      	bcs.n	9001a104 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
9001a1e4:	f640 00e5 	movw	r0, #2277	; 0x8e5
9001a1e8:	4283      	cmp	r3, r0
9001a1ea:	d816      	bhi.n	9001a21a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d6>
9001a1ec:	f640 00e4 	movw	r0, #2276	; 0x8e4
9001a1f0:	4283      	cmp	r3, r0
9001a1f2:	f4bf af60 	bcs.w	9001a0b6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
9001a1f6:	f240 60ec 	movw	r0, #1772	; 0x6ec
9001a1fa:	4283      	cmp	r3, r0
9001a1fc:	d80a      	bhi.n	9001a214 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d0>
9001a1fe:	f240 60eb 	movw	r0, #1771	; 0x6eb
9001a202:	4283      	cmp	r3, r0
9001a204:	f4bf af57 	bcs.w	9001a0b6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
9001a208:	f240 60ea 	movw	r0, #1770	; 0x6ea
9001a20c:	4283      	cmp	r3, r0
9001a20e:	f43f af79 	beq.w	9001a104 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
9001a212:	e7ac      	b.n	9001a16e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
9001a214:	f240 60ed 	movw	r0, #1773	; 0x6ed
9001a218:	e7f8      	b.n	9001a20c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1c8>
9001a21a:	f640 00e8 	movw	r0, #2280	; 0x8e8
9001a21e:	4283      	cmp	r3, r0
9001a220:	d802      	bhi.n	9001a228 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e4>
9001a222:	f640 00e7 	movw	r0, #2279	; 0x8e7
9001a226:	e798      	b.n	9001a15a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x116>
9001a228:	f640 00e9 	movw	r0, #2281	; 0x8e9
9001a22c:	4283      	cmp	r3, r0
9001a22e:	f47f af42 	bne.w	9001a0b6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
9001a232:	e767      	b.n	9001a104 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
9001a234:	f640 00f6 	movw	r0, #2294	; 0x8f6
9001a238:	4283      	cmp	r3, r0
9001a23a:	f43f af63 	beq.w	9001a104 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
9001a23e:	d802      	bhi.n	9001a246 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x202>
9001a240:	f640 00f2 	movw	r0, #2290	; 0x8f2
9001a244:	e7f2      	b.n	9001a22c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e8>
9001a246:	f640 00fa 	movw	r0, #2298	; 0x8fa
9001a24a:	4283      	cmp	r3, r0
9001a24c:	d805      	bhi.n	9001a25a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x216>
9001a24e:	f640 00f9 	movw	r0, #2297	; 0x8f9
9001a252:	4283      	cmp	r3, r0
9001a254:	f4ff af2f 	bcc.w	9001a0b6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
9001a258:	e754      	b.n	9001a104 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
9001a25a:	f640 00fe 	movw	r0, #2302	; 0x8fe
9001a25e:	4283      	cmp	r3, r0
9001a260:	e7af      	b.n	9001a1c2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x17e>
9001a262:	f104 0c4c 	add.w	ip, r4, #76	; 0x4c
9001a266:	4617      	mov	r7, r2
9001a268:	f102 0808 	add.w	r8, r2, #8
9001a26c:	4666      	mov	r6, ip
9001a26e:	6838      	ldr	r0, [r7, #0]
9001a270:	3708      	adds	r7, #8
9001a272:	f857 1c04 	ldr.w	r1, [r7, #-4]
9001a276:	46e6      	mov	lr, ip
9001a278:	4547      	cmp	r7, r8
9001a27a:	e8ae 0003 	stmia.w	lr!, {r0, r1}
9001a27e:	46f4      	mov	ip, lr
9001a280:	d1f5      	bne.n	9001a26e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x22a>
9001a282:	6838      	ldr	r0, [r7, #0]
9001a284:	f8ce 0000 	str.w	r0, [lr]
9001a288:	88b9      	ldrh	r1, [r7, #4]
9001a28a:	f8ae 1004 	strh.w	r1, [lr, #4]
9001a28e:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	; 0x5e
9001a292:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
9001a296:	d009      	beq.n	9001a2ac <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x268>
9001a298:	7b51      	ldrb	r1, [r2, #13]
9001a29a:	7992      	ldrb	r2, [r2, #6]
9001a29c:	0149      	lsls	r1, r1, #5
9001a29e:	f401 7180 	and.w	r1, r1, #256	; 0x100
9001a2a2:	4311      	orrs	r1, r2
9001a2a4:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
9001a2a8:	f884 0055 	strb.w	r0, [r4, #85]	; 0x55
9001a2ac:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
9001a2b0:	b2ad      	uxth	r5, r5
9001a2b2:	d00d      	beq.n	9001a2d0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x28c>
9001a2b4:	442b      	add	r3, r5
9001a2b6:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
9001a2ba:	b29b      	uxth	r3, r3
9001a2bc:	f022 0260 	bic.w	r2, r2, #96	; 0x60
9001a2c0:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
9001a2c4:	10db      	asrs	r3, r3, #3
9001a2c6:	f003 0360 	and.w	r3, r3, #96	; 0x60
9001a2ca:	4313      	orrs	r3, r2
9001a2cc:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
9001a2d0:	f894 1059 	ldrb.w	r1, [r4, #89]	; 0x59
9001a2d4:	00cb      	lsls	r3, r1, #3
9001a2d6:	064f      	lsls	r7, r1, #25
9001a2d8:	f403 7280 	and.w	r2, r3, #256	; 0x100
9001a2dc:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
9001a2e0:	ea43 0302 	orr.w	r3, r3, r2
9001a2e4:	bf44      	itt	mi
9001a2e6:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
9001a2ea:	b21b      	sxthmi	r3, r3
9001a2ec:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
9001a2f0:	1b5b      	subs	r3, r3, r5
9001a2f2:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
9001a2f6:	4632      	mov	r2, r6
9001a2f8:	e6f9      	b.n	9001a0ee <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
9001a2fa:	f104 0c4c 	add.w	ip, r4, #76	; 0x4c
9001a2fe:	4617      	mov	r7, r2
9001a300:	f102 0908 	add.w	r9, r2, #8
9001a304:	4666      	mov	r6, ip
9001a306:	6838      	ldr	r0, [r7, #0]
9001a308:	3708      	adds	r7, #8
9001a30a:	f857 1c04 	ldr.w	r1, [r7, #-4]
9001a30e:	46e0      	mov	r8, ip
9001a310:	454f      	cmp	r7, r9
9001a312:	e8a8 0003 	stmia.w	r8!, {r0, r1}
9001a316:	46c4      	mov	ip, r8
9001a318:	d1f5      	bne.n	9001a306 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2c2>
9001a31a:	6838      	ldr	r0, [r7, #0]
9001a31c:	f8c8 0000 	str.w	r0, [r8]
9001a320:	88b9      	ldrh	r1, [r7, #4]
9001a322:	f8a8 1004 	strh.w	r1, [r8, #4]
9001a326:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	; 0x5e
9001a32a:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
9001a32e:	d009      	beq.n	9001a344 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x300>
9001a330:	7b51      	ldrb	r1, [r2, #13]
9001a332:	7992      	ldrb	r2, [r2, #6]
9001a334:	0149      	lsls	r1, r1, #5
9001a336:	f401 7180 	and.w	r1, r1, #256	; 0x100
9001a33a:	4311      	orrs	r1, r2
9001a33c:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
9001a340:	f884 0055 	strb.w	r0, [r4, #85]	; 0x55
9001a344:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
9001a348:	d00e      	beq.n	9001a368 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x324>
9001a34a:	eba3 030e 	sub.w	r3, r3, lr
9001a34e:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
9001a352:	b29b      	uxth	r3, r3
9001a354:	f022 0260 	bic.w	r2, r2, #96	; 0x60
9001a358:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
9001a35c:	10db      	asrs	r3, r3, #3
9001a35e:	f003 0360 	and.w	r3, r3, #96	; 0x60
9001a362:	4313      	orrs	r3, r2
9001a364:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
9001a368:	f894 1059 	ldrb.w	r1, [r4, #89]	; 0x59
9001a36c:	00cb      	lsls	r3, r1, #3
9001a36e:	0648      	lsls	r0, r1, #25
9001a370:	f403 7280 	and.w	r2, r3, #256	; 0x100
9001a374:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
9001a378:	ea43 0302 	orr.w	r3, r3, r2
9001a37c:	bf44      	itt	mi
9001a37e:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
9001a382:	b21b      	sxthmi	r3, r3
9001a384:	1b5d      	subs	r5, r3, r5
9001a386:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
9001a38a:	e7b4      	b.n	9001a2f6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b2>

9001a38c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>:
9001a38c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
9001a390:	461e      	mov	r6, r3
9001a392:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
9001a394:	4604      	mov	r4, r0
9001a396:	4617      	mov	r7, r2
9001a398:	eb00 0343 	add.w	r3, r0, r3, lsl #1
9001a39c:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
9001a3a0:	f7ed feb6 	bl	90008110 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
9001a3a4:	4605      	mov	r5, r0
9001a3a6:	b918      	cbnz	r0, 9001a3b0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x24>
9001a3a8:	6030      	str	r0, [r6, #0]
9001a3aa:	4628      	mov	r0, r5
9001a3ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
9001a3b0:	683b      	ldr	r3, [r7, #0]
9001a3b2:	4601      	mov	r1, r0
9001a3b4:	4638      	mov	r0, r7
9001a3b6:	68db      	ldr	r3, [r3, #12]
9001a3b8:	4798      	blx	r3
9001a3ba:	f5a8 63c0 	sub.w	r3, r8, #1536	; 0x600
9001a3be:	4602      	mov	r2, r0
9001a3c0:	6030      	str	r0, [r6, #0]
9001a3c2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
9001a3c6:	d213      	bcs.n	9001a3f0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x64>
9001a3c8:	4643      	mov	r3, r8
9001a3ca:	4639      	mov	r1, r7
9001a3cc:	4620      	mov	r0, r4
9001a3ce:	f7ff fe39 	bl	9001a044 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
9001a3d2:	6030      	str	r0, [r6, #0]
9001a3d4:	6833      	ldr	r3, [r6, #0]
9001a3d6:	b143      	cbz	r3, 9001a3ea <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x5e>
9001a3d8:	7b5a      	ldrb	r2, [r3, #13]
9001a3da:	7a9b      	ldrb	r3, [r3, #10]
9001a3dc:	0052      	lsls	r2, r2, #1
9001a3de:	f402 7280 	and.w	r2, r2, #256	; 0x100
9001a3e2:	4313      	orrs	r3, r2
9001a3e4:	bf0c      	ite	eq
9001a3e6:	2301      	moveq	r3, #1
9001a3e8:	2300      	movne	r3, #0
9001a3ea:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
9001a3ee:	e7dc      	b.n	9001a3aa <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x1e>
9001a3f0:	f5a5 6360 	sub.w	r3, r5, #3584	; 0xe00
9001a3f4:	b29b      	uxth	r3, r3
9001a3f6:	2b7f      	cmp	r3, #127	; 0x7f
9001a3f8:	d804      	bhi.n	9001a404 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x78>
9001a3fa:	4639      	mov	r1, r7
9001a3fc:	4620      	mov	r0, r4
9001a3fe:	f7ff fd15 	bl	90019e2c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
9001a402:	e7e6      	b.n	9001a3d2 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>
9001a404:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
9001a408:	2b00      	cmp	r3, #0
9001a40a:	d0e3      	beq.n	9001a3d4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
9001a40c:	f640 1302 	movw	r3, #2306	; 0x902
9001a410:	429d      	cmp	r5, r3
9001a412:	d1df      	bne.n	9001a3d4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
9001a414:	4601      	mov	r1, r0
9001a416:	4620      	mov	r0, r4
9001a418:	f7ff fcd8 	bl	90019dcc <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
9001a41c:	e7d9      	b.n	9001a3d2 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>

9001a41e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>:
9001a41e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
9001a422:	461e      	mov	r6, r3
9001a424:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
9001a426:	4604      	mov	r4, r0
9001a428:	4617      	mov	r7, r2
9001a42a:	eb00 0343 	add.w	r3, r0, r3, lsl #1
9001a42e:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
9001a432:	f7ed fe6d 	bl	90008110 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
9001a436:	4605      	mov	r5, r0
9001a438:	b918      	cbnz	r0, 9001a442 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x24>
9001a43a:	6030      	str	r0, [r6, #0]
9001a43c:	4628      	mov	r0, r5
9001a43e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
9001a442:	683b      	ldr	r3, [r7, #0]
9001a444:	4601      	mov	r1, r0
9001a446:	4638      	mov	r0, r7
9001a448:	f8d3 9008 	ldr.w	r9, [r3, #8]
9001a44c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
9001a450:	47c8      	blx	r9
9001a452:	f5a8 63c0 	sub.w	r3, r8, #1536	; 0x600
9001a456:	4602      	mov	r2, r0
9001a458:	6030      	str	r0, [r6, #0]
9001a45a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
9001a45e:	d213      	bcs.n	9001a488 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x6a>
9001a460:	4643      	mov	r3, r8
9001a462:	4639      	mov	r1, r7
9001a464:	4620      	mov	r0, r4
9001a466:	f7ff fded 	bl	9001a044 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
9001a46a:	6030      	str	r0, [r6, #0]
9001a46c:	6833      	ldr	r3, [r6, #0]
9001a46e:	b143      	cbz	r3, 9001a482 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x64>
9001a470:	7b5a      	ldrb	r2, [r3, #13]
9001a472:	7a9b      	ldrb	r3, [r3, #10]
9001a474:	0052      	lsls	r2, r2, #1
9001a476:	f402 7280 	and.w	r2, r2, #256	; 0x100
9001a47a:	4313      	orrs	r3, r2
9001a47c:	bf0c      	ite	eq
9001a47e:	2301      	moveq	r3, #1
9001a480:	2300      	movne	r3, #0
9001a482:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
9001a486:	e7d9      	b.n	9001a43c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x1e>
9001a488:	f5a5 6360 	sub.w	r3, r5, #3584	; 0xe00
9001a48c:	b29b      	uxth	r3, r3
9001a48e:	2b7f      	cmp	r3, #127	; 0x7f
9001a490:	d804      	bhi.n	9001a49c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x7e>
9001a492:	4639      	mov	r1, r7
9001a494:	4620      	mov	r0, r4
9001a496:	f7ff fcc9 	bl	90019e2c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
9001a49a:	e7e6      	b.n	9001a46a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4c>
9001a49c:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
9001a4a0:	2b00      	cmp	r3, #0
9001a4a2:	d0e3      	beq.n	9001a46c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4e>
9001a4a4:	f640 1302 	movw	r3, #2306	; 0x902
9001a4a8:	429d      	cmp	r5, r3
9001a4aa:	d1df      	bne.n	9001a46c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4e>
9001a4ac:	4601      	mov	r1, r0
9001a4ae:	4620      	mov	r0, r4
9001a4b0:	f7ff fc8c 	bl	90019dcc <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
9001a4b4:	e7d9      	b.n	9001a46a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4c>

9001a4b6 <_ZN8touchgfx12TextProvider15fillInputBufferEv>:
9001a4b6:	b510      	push	{r4, lr}
9001a4b8:	4604      	mov	r4, r0
9001a4ba:	f8b4 1040 	ldrh.w	r1, [r4, #64]	; 0x40
9001a4be:	8f23      	ldrh	r3, [r4, #56]	; 0x38
9001a4c0:	b1e1      	cbz	r1, 9001a4fc <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x46>
9001a4c2:	2b0a      	cmp	r3, #10
9001a4c4:	d02d      	beq.n	9001a522 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x6c>
9001a4c6:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
9001a4c8:	3901      	subs	r1, #1
9001a4ca:	eb04 0042 	add.w	r0, r4, r2, lsl #1
9001a4ce:	8f40      	ldrh	r0, [r0, #58]	; 0x3a
9001a4d0:	f8a4 1040 	strh.w	r1, [r4, #64]	; 0x40
9001a4d4:	1c51      	adds	r1, r2, #1
9001a4d6:	b289      	uxth	r1, r1
9001a4d8:	2901      	cmp	r1, #1
9001a4da:	bf8a      	itet	hi
9001a4dc:	f102 32ff 	addhi.w	r2, r2, #4294967295
9001a4e0:	87e1      	strhls	r1, [r4, #62]	; 0x3e
9001a4e2:	87e2      	strhhi	r2, [r4, #62]	; 0x3e
9001a4e4:	1c5a      	adds	r2, r3, #1
9001a4e6:	8722      	strh	r2, [r4, #56]	; 0x38
9001a4e8:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
9001a4ea:	4413      	add	r3, r2
9001a4ec:	b29b      	uxth	r3, r3
9001a4ee:	2b09      	cmp	r3, #9
9001a4f0:	bf88      	it	hi
9001a4f2:	3b0a      	subhi	r3, #10
9001a4f4:	eb04 0343 	add.w	r3, r4, r3, lsl #1
9001a4f8:	8458      	strh	r0, [r3, #34]	; 0x22
9001a4fa:	e7de      	b.n	9001a4ba <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4>
9001a4fc:	8f23      	ldrh	r3, [r4, #56]	; 0x38
9001a4fe:	2b0a      	cmp	r3, #10
9001a500:	d00f      	beq.n	9001a522 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x6c>
9001a502:	4620      	mov	r0, r4
9001a504:	f7ff fc10 	bl	90019d28 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
9001a508:	8f23      	ldrh	r3, [r4, #56]	; 0x38
9001a50a:	1c5a      	adds	r2, r3, #1
9001a50c:	8722      	strh	r2, [r4, #56]	; 0x38
9001a50e:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
9001a510:	4413      	add	r3, r2
9001a512:	b29b      	uxth	r3, r3
9001a514:	2b09      	cmp	r3, #9
9001a516:	bf88      	it	hi
9001a518:	3b0a      	subhi	r3, #10
9001a51a:	eb04 0343 	add.w	r3, r4, r3, lsl #1
9001a51e:	8458      	strh	r0, [r3, #34]	; 0x22
9001a520:	e7ec      	b.n	9001a4fc <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x46>
9001a522:	bd10      	pop	{r4, pc}

9001a524 <_ZN8touchgfx12TextProvider11getNextCharEv>:
9001a524:	b538      	push	{r3, r4, r5, lr}
9001a526:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
9001a528:	4604      	mov	r4, r0
9001a52a:	eb00 0243 	add.w	r2, r0, r3, lsl #1
9001a52e:	8c55      	ldrh	r5, [r2, #34]	; 0x22
9001a530:	8f02      	ldrh	r2, [r0, #56]	; 0x38
9001a532:	3a01      	subs	r2, #1
9001a534:	8702      	strh	r2, [r0, #56]	; 0x38
9001a536:	1c5a      	adds	r2, r3, #1
9001a538:	b292      	uxth	r2, r2
9001a53a:	2a09      	cmp	r2, #9
9001a53c:	bf8a      	itet	hi
9001a53e:	3b09      	subhi	r3, #9
9001a540:	86c2      	strhls	r2, [r0, #54]	; 0x36
9001a542:	86c3      	strhhi	r3, [r0, #54]	; 0x36
9001a544:	f7ff ffb7 	bl	9001a4b6 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
9001a548:	8c23      	ldrh	r3, [r4, #32]
9001a54a:	2b01      	cmp	r3, #1
9001a54c:	bf9c      	itt	ls
9001a54e:	3301      	addls	r3, #1
9001a550:	8423      	strhls	r3, [r4, #32]
9001a552:	8be3      	ldrh	r3, [r4, #30]
9001a554:	b90b      	cbnz	r3, 9001a55a <_ZN8touchgfx12TextProvider11getNextCharEv+0x36>
9001a556:	2302      	movs	r3, #2
9001a558:	83e3      	strh	r3, [r4, #30]
9001a55a:	8be3      	ldrh	r3, [r4, #30]
9001a55c:	4628      	mov	r0, r5
9001a55e:	3b01      	subs	r3, #1
9001a560:	b29b      	uxth	r3, r3
9001a562:	83e3      	strh	r3, [r4, #30]
9001a564:	eb04 0443 	add.w	r4, r4, r3, lsl #1
9001a568:	8365      	strh	r5, [r4, #26]
9001a56a:	bd38      	pop	{r3, r4, r5, pc}

9001a56c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>:
9001a56c:	428a      	cmp	r2, r1
9001a56e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
9001a572:	8ec7      	ldrh	r7, [r0, #54]	; 0x36
9001a574:	d932      	bls.n	9001a5dc <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x70>
9001a576:	8f05      	ldrh	r5, [r0, #56]	; 0x38
9001a578:	1a54      	subs	r4, r2, r1
9001a57a:	f8b0 8040 	ldrh.w	r8, [r0, #64]	; 0x40
9001a57e:	19ee      	adds	r6, r5, r7
9001a580:	fa1f fe84 	uxth.w	lr, r4
9001a584:	f8b0 c03e 	ldrh.w	ip, [r0, #62]	; 0x3e
9001a588:	3e01      	subs	r6, #1
9001a58a:	b2b4      	uxth	r4, r6
9001a58c:	eba4 090e 	sub.w	r9, r4, lr
9001a590:	fa1f f989 	uxth.w	r9, r9
9001a594:	2c09      	cmp	r4, #9
9001a596:	4626      	mov	r6, r4
9001a598:	bf88      	it	hi
9001a59a:	f1a4 060a 	subhi.w	r6, r4, #10
9001a59e:	f1bc 0f00 	cmp.w	ip, #0
9001a5a2:	f104 34ff 	add.w	r4, r4, #4294967295
9001a5a6:	bf08      	it	eq
9001a5a8:	f04f 0c02 	moveq.w	ip, #2
9001a5ac:	eb00 0646 	add.w	r6, r0, r6, lsl #1
9001a5b0:	b2a4      	uxth	r4, r4
9001a5b2:	f10c 3cff 	add.w	ip, ip, #4294967295
9001a5b6:	f8b6 a022 	ldrh.w	sl, [r6, #34]	; 0x22
9001a5ba:	454c      	cmp	r4, r9
9001a5bc:	fa1f fc8c 	uxth.w	ip, ip
9001a5c0:	eb00 064c 	add.w	r6, r0, ip, lsl #1
9001a5c4:	f8a6 a03a 	strh.w	sl, [r6, #58]	; 0x3a
9001a5c8:	d1e4      	bne.n	9001a594 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x28>
9001a5ca:	eba5 050e 	sub.w	r5, r5, lr
9001a5ce:	eb0e 0408 	add.w	r4, lr, r8
9001a5d2:	f8a0 c03e 	strh.w	ip, [r0, #62]	; 0x3e
9001a5d6:	8705      	strh	r5, [r0, #56]	; 0x38
9001a5d8:	f8a0 4040 	strh.w	r4, [r0, #64]	; 0x40
9001a5dc:	8f04      	ldrh	r4, [r0, #56]	; 0x38
9001a5de:	250a      	movs	r5, #10
9001a5e0:	1a64      	subs	r4, r4, r1
9001a5e2:	4439      	add	r1, r7
9001a5e4:	b289      	uxth	r1, r1
9001a5e6:	8704      	strh	r4, [r0, #56]	; 0x38
9001a5e8:	2909      	cmp	r1, #9
9001a5ea:	bf88      	it	hi
9001a5ec:	390a      	subhi	r1, #10
9001a5ee:	86c1      	strh	r1, [r0, #54]	; 0x36
9001a5f0:	b18a      	cbz	r2, 9001a616 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xaa>
9001a5f2:	8f01      	ldrh	r1, [r0, #56]	; 0x38
9001a5f4:	3a01      	subs	r2, #1
9001a5f6:	3101      	adds	r1, #1
9001a5f8:	b292      	uxth	r2, r2
9001a5fa:	f833 4012 	ldrh.w	r4, [r3, r2, lsl #1]
9001a5fe:	8701      	strh	r1, [r0, #56]	; 0x38
9001a600:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
9001a602:	b901      	cbnz	r1, 9001a606 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x9a>
9001a604:	86c5      	strh	r5, [r0, #54]	; 0x36
9001a606:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
9001a608:	3901      	subs	r1, #1
9001a60a:	b289      	uxth	r1, r1
9001a60c:	86c1      	strh	r1, [r0, #54]	; 0x36
9001a60e:	eb00 0141 	add.w	r1, r0, r1, lsl #1
9001a612:	844c      	strh	r4, [r1, #34]	; 0x22
9001a614:	e7ec      	b.n	9001a5f0 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x84>
9001a616:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
9001a61a:	f7ff bf4c 	b.w	9001a4b6 <_ZN8touchgfx12TextProvider15fillInputBufferEv>

9001a61e <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>:
9001a61e:	b570      	push	{r4, r5, r6, lr}
9001a620:	2500      	movs	r5, #0
9001a622:	4295      	cmp	r5, r2
9001a624:	d011      	beq.n	9001a64a <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x2c>
9001a626:	8bc4      	ldrh	r4, [r0, #30]
9001a628:	f831 6b02 	ldrh.w	r6, [r1], #2
9001a62c:	4414      	add	r4, r2
9001a62e:	3c01      	subs	r4, #1
9001a630:	1b64      	subs	r4, r4, r5
9001a632:	b2a4      	uxth	r4, r4
9001a634:	2c01      	cmp	r4, #1
9001a636:	bf88      	it	hi
9001a638:	3c02      	subhi	r4, #2
9001a63a:	eb00 0444 	add.w	r4, r0, r4, lsl #1
9001a63e:	8b64      	ldrh	r4, [r4, #26]
9001a640:	42b4      	cmp	r4, r6
9001a642:	d117      	bne.n	9001a674 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x56>
9001a644:	3501      	adds	r5, #1
9001a646:	b2ad      	uxth	r5, r5
9001a648:	e7eb      	b.n	9001a622 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x4>
9001a64a:	f8bd 2010 	ldrh.w	r2, [sp, #16]
9001a64e:	2400      	movs	r4, #0
9001a650:	4413      	add	r3, r2
9001a652:	b2a2      	uxth	r2, r4
9001a654:	429a      	cmp	r2, r3
9001a656:	da0f      	bge.n	9001a678 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x5a>
9001a658:	8ec6      	ldrh	r6, [r0, #54]	; 0x36
9001a65a:	f831 5014 	ldrh.w	r5, [r1, r4, lsl #1]
9001a65e:	3401      	adds	r4, #1
9001a660:	4432      	add	r2, r6
9001a662:	b292      	uxth	r2, r2
9001a664:	2a09      	cmp	r2, #9
9001a666:	bf88      	it	hi
9001a668:	3a0a      	subhi	r2, #10
9001a66a:	eb00 0242 	add.w	r2, r0, r2, lsl #1
9001a66e:	8c52      	ldrh	r2, [r2, #34]	; 0x22
9001a670:	42aa      	cmp	r2, r5
9001a672:	d0ee      	beq.n	9001a652 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x34>
9001a674:	2000      	movs	r0, #0
9001a676:	bd70      	pop	{r4, r5, r6, pc}
9001a678:	2001      	movs	r0, #1
9001a67a:	e7fc      	b.n	9001a676 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x58>

9001a67c <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>:
9001a67c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001a680:	4605      	mov	r5, r0
9001a682:	4616      	mov	r6, r2
9001a684:	1c8c      	adds	r4, r1, #2
9001a686:	8809      	ldrh	r1, [r1, #0]
9001a688:	ea4f 3a11 	mov.w	sl, r1, lsr #12
9001a68c:	f834 301a 	ldrh.w	r3, [r4, sl, lsl #1]
9001a690:	42b3      	cmp	r3, r6
9001a692:	d124      	bne.n	9001a6de <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x62>
9001a694:	f3c1 2903 	ubfx	r9, r1, #8, #4
9001a698:	f3c1 1803 	ubfx	r8, r1, #4, #4
9001a69c:	f001 070f 	and.w	r7, r1, #15
9001a6a0:	4652      	mov	r2, sl
9001a6a2:	f8cd 8000 	str.w	r8, [sp]
9001a6a6:	464b      	mov	r3, r9
9001a6a8:	4621      	mov	r1, r4
9001a6aa:	4628      	mov	r0, r5
9001a6ac:	f7ff ffb7 	bl	9001a61e <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>
9001a6b0:	4683      	mov	fp, r0
9001a6b2:	b168      	cbz	r0, 9001a6d0 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x54>
9001a6b4:	eb0a 0109 	add.w	r1, sl, r9
9001a6b8:	463a      	mov	r2, r7
9001a6ba:	4628      	mov	r0, r5
9001a6bc:	4441      	add	r1, r8
9001a6be:	eb04 0341 	add.w	r3, r4, r1, lsl #1
9001a6c2:	4649      	mov	r1, r9
9001a6c4:	f7ff ff52 	bl	9001a56c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>
9001a6c8:	4658      	mov	r0, fp
9001a6ca:	b003      	add	sp, #12
9001a6cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9001a6d0:	eb07 010a 	add.w	r1, r7, sl
9001a6d4:	4449      	add	r1, r9
9001a6d6:	4441      	add	r1, r8
9001a6d8:	eb04 0141 	add.w	r1, r4, r1, lsl #1
9001a6dc:	e7d2      	b.n	9001a684 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x8>
9001a6de:	f04f 0b00 	mov.w	fp, #0
9001a6e2:	e7f1      	b.n	9001a6c8 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x4c>

9001a6e4 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>:
9001a6e4:	b570      	push	{r4, r5, r6, lr}
9001a6e6:	8810      	ldrh	r0, [r2, #0]
9001a6e8:	4298      	cmp	r0, r3
9001a6ea:	d817      	bhi.n	9001a71c <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
9001a6ec:	1e48      	subs	r0, r1, #1
9001a6ee:	f832 0020 	ldrh.w	r0, [r2, r0, lsl #2]
9001a6f2:	4298      	cmp	r0, r3
9001a6f4:	d312      	bcc.n	9001a71c <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
9001a6f6:	2400      	movs	r4, #0
9001a6f8:	428c      	cmp	r4, r1
9001a6fa:	d20f      	bcs.n	9001a71c <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
9001a6fc:	1860      	adds	r0, r4, r1
9001a6fe:	1040      	asrs	r0, r0, #1
9001a700:	f832 6020 	ldrh.w	r6, [r2, r0, lsl #2]
9001a704:	0085      	lsls	r5, r0, #2
9001a706:	42b3      	cmp	r3, r6
9001a708:	d902      	bls.n	9001a710 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x2c>
9001a70a:	3001      	adds	r0, #1
9001a70c:	b284      	uxth	r4, r0
9001a70e:	e7f3      	b.n	9001a6f8 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
9001a710:	d201      	bcs.n	9001a716 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x32>
9001a712:	b281      	uxth	r1, r0
9001a714:	e7f0      	b.n	9001a6f8 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
9001a716:	442a      	add	r2, r5
9001a718:	8850      	ldrh	r0, [r2, #2]
9001a71a:	bd70      	pop	{r4, r5, r6, pc}
9001a71c:	2000      	movs	r0, #0
9001a71e:	e7fc      	b.n	9001a71a <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x36>

9001a720 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>:
9001a720:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
9001a724:	6c45      	ldr	r5, [r0, #68]	; 0x44
9001a726:	4604      	mov	r4, r0
9001a728:	260b      	movs	r6, #11
9001a72a:	886f      	ldrh	r7, [r5, #2]
9001a72c:	087f      	lsrs	r7, r7, #1
9001a72e:	3e01      	subs	r6, #1
9001a730:	d013      	beq.n	9001a75a <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
9001a732:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
9001a734:	462a      	mov	r2, r5
9001a736:	4639      	mov	r1, r7
9001a738:	4620      	mov	r0, r4
9001a73a:	eb04 0343 	add.w	r3, r4, r3, lsl #1
9001a73e:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
9001a742:	4643      	mov	r3, r8
9001a744:	f7ff ffce 	bl	9001a6e4 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>
9001a748:	b138      	cbz	r0, 9001a75a <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
9001a74a:	eb05 0140 	add.w	r1, r5, r0, lsl #1
9001a74e:	4642      	mov	r2, r8
9001a750:	4620      	mov	r0, r4
9001a752:	f7ff ff93 	bl	9001a67c <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>
9001a756:	2800      	cmp	r0, #0
9001a758:	d1e9      	bne.n	9001a72e <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0xe>
9001a75a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

9001a760 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>:
9001a760:	b570      	push	{r4, r5, r6, lr}
9001a762:	694a      	ldr	r2, [r1, #20]
9001a764:	6a8d      	ldr	r5, [r1, #40]	; 0x28
9001a766:	684b      	ldr	r3, [r1, #4]
9001a768:	1b54      	subs	r4, r2, r5
9001a76a:	6ace      	ldr	r6, [r1, #44]	; 0x2c
9001a76c:	f000 8106 	beq.w	9001a97c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x21c>
9001a770:	1b9b      	subs	r3, r3, r6
9001a772:	d003      	beq.n	9001a77c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
9001a774:	4363      	muls	r3, r4
9001a776:	2210      	movs	r2, #16
9001a778:	fb93 f3f2 	sdiv	r3, r3, r2
9001a77c:	680c      	ldr	r4, [r1, #0]
9001a77e:	698a      	ldr	r2, [r1, #24]
9001a780:	1b65      	subs	r5, r4, r5
9001a782:	f000 80fd 	beq.w	9001a980 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x220>
9001a786:	1b92      	subs	r2, r2, r6
9001a788:	d003      	beq.n	9001a792 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
9001a78a:	436a      	muls	r2, r5
9001a78c:	2410      	movs	r4, #16
9001a78e:	fb92 f2f4 	sdiv	r2, r2, r4
9001a792:	1a9b      	subs	r3, r3, r2
9001a794:	ed9f 4a89 	vldr	s8, [pc, #548]	; 9001a9bc <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x25c>
9001a798:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
9001a79c:	460a      	mov	r2, r1
9001a79e:	ee07 3a90 	vmov	s15, r3
9001a7a2:	f100 040c 	add.w	r4, r0, #12
9001a7a6:	4603      	mov	r3, r0
9001a7a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
9001a7ac:	ee67 7a84 	vmul.f32	s15, s15, s8
9001a7b0:	ee87 3a27 	vdiv.f32	s6, s14, s15
9001a7b4:	eeb1 6a43 	vneg.f32	s12, s6
9001a7b8:	edd2 7a02 	vldr	s15, [r2, #8]
9001a7bc:	3214      	adds	r2, #20
9001a7be:	eec7 6a27 	vdiv.f32	s13, s14, s15
9001a7c2:	ece3 6a01 	vstmia	r3!, {s13}
9001a7c6:	429c      	cmp	r4, r3
9001a7c8:	ed52 7a02 	vldr	s15, [r2, #-8]
9001a7cc:	ee67 7aa6 	vmul.f32	s15, s15, s13
9001a7d0:	edc3 7a02 	vstr	s15, [r3, #8]
9001a7d4:	ed52 7a01 	vldr	s15, [r2, #-4]
9001a7d8:	ee67 7aa6 	vmul.f32	s15, s15, s13
9001a7dc:	edc3 7a05 	vstr	s15, [r3, #20]
9001a7e0:	d1ea      	bne.n	9001a7b8 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x58>
9001a7e2:	6aca      	ldr	r2, [r1, #44]	; 0x2c
9001a7e4:	698b      	ldr	r3, [r1, #24]
9001a7e6:	edd0 4a02 	vldr	s9, [r0, #8]
9001a7ea:	1a9b      	subs	r3, r3, r2
9001a7ec:	edd0 3a00 	vldr	s7, [r0]
9001a7f0:	edd0 6a01 	vldr	s13, [r0, #4]
9001a7f4:	ee07 3a90 	vmov	s15, r3
9001a7f8:	684b      	ldr	r3, [r1, #4]
9001a7fa:	ee76 6ae4 	vsub.f32	s13, s13, s9
9001a7fe:	ed90 5a05 	vldr	s10, [r0, #20]
9001a802:	1a9b      	subs	r3, r3, r2
9001a804:	eef8 7ae7 	vcvt.f32.s32	s15, s15
9001a808:	ee73 4ae4 	vsub.f32	s9, s7, s9
9001a80c:	ed90 2a03 	vldr	s4, [r0, #12]
9001a810:	ee07 3a10 	vmov	s14, r3
9001a814:	edd0 5a04 	vldr	s11, [r0, #16]
9001a818:	ee67 7a84 	vmul.f32	s15, s15, s8
9001a81c:	ed90 1a07 	vldr	s2, [r0, #28]
9001a820:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
9001a824:	edd0 2a06 	vldr	s5, [r0, #24]
9001a828:	ee75 5ac5 	vsub.f32	s11, s11, s10
9001a82c:	ee64 7ae7 	vnmul.f32	s15, s9, s15
9001a830:	ee27 7a04 	vmul.f32	s14, s14, s8
9001a834:	ee32 5a45 	vsub.f32	s10, s4, s10
9001a838:	eee6 7a87 	vfma.f32	s15, s13, s14
9001a83c:	ee67 7a83 	vmul.f32	s15, s15, s6
9001a840:	edc0 7a09 	vstr	s15, [r0, #36]	; 0x24
9001a844:	6a8c      	ldr	r4, [r1, #40]	; 0x28
9001a846:	694a      	ldr	r2, [r1, #20]
9001a848:	1b13      	subs	r3, r2, r4
9001a84a:	ee07 3a10 	vmov	s14, r3
9001a84e:	680b      	ldr	r3, [r1, #0]
9001a850:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
9001a854:	1b1b      	subs	r3, r3, r4
9001a856:	ee27 7a04 	vmul.f32	s14, s14, s8
9001a85a:	ee64 4ac7 	vnmul.f32	s9, s9, s14
9001a85e:	ee07 3a10 	vmov	s14, r3
9001a862:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
9001a866:	ee27 7a04 	vmul.f32	s14, s14, s8
9001a86a:	eee6 4a87 	vfma.f32	s9, s13, s14
9001a86e:	ee64 4a86 	vmul.f32	s9, s9, s12
9001a872:	edc0 4a0a 	vstr	s9, [r0, #40]	; 0x28
9001a876:	6aca      	ldr	r2, [r1, #44]	; 0x2c
9001a878:	698b      	ldr	r3, [r1, #24]
9001a87a:	1a9b      	subs	r3, r3, r2
9001a87c:	ee06 3a90 	vmov	s13, r3
9001a880:	684b      	ldr	r3, [r1, #4]
9001a882:	1a9b      	subs	r3, r3, r2
9001a884:	eef8 6ae6 	vcvt.f32.s32	s13, s13
9001a888:	ee07 3a10 	vmov	s14, r3
9001a88c:	ee66 6a84 	vmul.f32	s13, s13, s8
9001a890:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
9001a894:	ee65 6a66 	vnmul.f32	s13, s10, s13
9001a898:	ee27 7a04 	vmul.f32	s14, s14, s8
9001a89c:	eee5 6a87 	vfma.f32	s13, s11, s14
9001a8a0:	ee66 6a83 	vmul.f32	s13, s13, s6
9001a8a4:	edc0 6a0b 	vstr	s13, [r0, #44]	; 0x2c
9001a8a8:	6a8c      	ldr	r4, [r1, #40]	; 0x28
9001a8aa:	694a      	ldr	r2, [r1, #20]
9001a8ac:	1b13      	subs	r3, r2, r4
9001a8ae:	ee07 3a10 	vmov	s14, r3
9001a8b2:	680b      	ldr	r3, [r1, #0]
9001a8b4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
9001a8b8:	1b1b      	subs	r3, r3, r4
9001a8ba:	ee27 7a04 	vmul.f32	s14, s14, s8
9001a8be:	ee25 5a47 	vnmul.f32	s10, s10, s14
9001a8c2:	ee07 3a10 	vmov	s14, r3
9001a8c6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
9001a8ca:	ee27 7a04 	vmul.f32	s14, s14, s8
9001a8ce:	eea5 5a87 	vfma.f32	s10, s11, s14
9001a8d2:	edd0 5a08 	vldr	s11, [r0, #32]
9001a8d6:	ee31 1a65 	vsub.f32	s2, s2, s11
9001a8da:	ee72 5ae5 	vsub.f32	s11, s5, s11
9001a8de:	ee25 5a06 	vmul.f32	s10, s10, s12
9001a8e2:	ed80 5a0c 	vstr	s10, [r0, #48]	; 0x30
9001a8e6:	6aca      	ldr	r2, [r1, #44]	; 0x2c
9001a8e8:	698b      	ldr	r3, [r1, #24]
9001a8ea:	1a9b      	subs	r3, r3, r2
9001a8ec:	ee07 3a10 	vmov	s14, r3
9001a8f0:	684b      	ldr	r3, [r1, #4]
9001a8f2:	1a9b      	subs	r3, r3, r2
9001a8f4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
9001a8f8:	ee01 3a90 	vmov	s3, r3
9001a8fc:	ee27 7a04 	vmul.f32	s14, s14, s8
9001a900:	eef8 1ae1 	vcvt.f32.s32	s3, s3
9001a904:	ee25 7ac7 	vnmul.f32	s14, s11, s14
9001a908:	ee61 1a84 	vmul.f32	s3, s3, s8
9001a90c:	eea1 7a21 	vfma.f32	s14, s2, s3
9001a910:	ee27 7a03 	vmul.f32	s14, s14, s6
9001a914:	ed80 7a0d 	vstr	s14, [r0, #52]	; 0x34
9001a918:	6a8c      	ldr	r4, [r1, #40]	; 0x28
9001a91a:	694a      	ldr	r2, [r1, #20]
9001a91c:	1b13      	subs	r3, r2, r4
9001a91e:	ee03 3a10 	vmov	s6, r3
9001a922:	680b      	ldr	r3, [r1, #0]
9001a924:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
9001a928:	1b1b      	subs	r3, r3, r4
9001a92a:	ee23 3a04 	vmul.f32	s6, s6, s8
9001a92e:	ee65 5ac3 	vnmul.f32	s11, s11, s6
9001a932:	ee03 3a10 	vmov	s6, r3
9001a936:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
9001a93a:	ee23 4a04 	vmul.f32	s8, s6, s8
9001a93e:	eee1 5a04 	vfma.f32	s11, s2, s8
9001a942:	ee25 6a86 	vmul.f32	s12, s11, s12
9001a946:	ee62 5a67 	vnmul.f32	s11, s4, s15
9001a94a:	ed80 6a0e 	vstr	s12, [r0, #56]	; 0x38
9001a94e:	eee3 5aa6 	vfma.f32	s11, s7, s13
9001a952:	eef5 5ac0 	vcmpe.f32	s11, #0.0
9001a956:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
9001a95a:	dd13      	ble.n	9001a984 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x224>
9001a95c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
9001a960:	ee62 7ae7 	vnmul.f32	s15, s5, s15
9001a964:	63c3      	str	r3, [r0, #60]	; 0x3c
9001a966:	eee3 7a87 	vfma.f32	s15, s7, s14
9001a96a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
9001a96e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
9001a972:	dd15      	ble.n	9001a9a0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x240>
9001a974:	f44f 4300 	mov.w	r3, #32768	; 0x8000
9001a978:	6403      	str	r3, [r0, #64]	; 0x40
9001a97a:	bd70      	pop	{r4, r5, r6, pc}
9001a97c:	4623      	mov	r3, r4
9001a97e:	e6fd      	b.n	9001a77c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
9001a980:	462a      	mov	r2, r5
9001a982:	e706      	b.n	9001a792 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
9001a984:	d502      	bpl.n	9001a98c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x22c>
9001a986:	f647 73ff 	movw	r3, #32767	; 0x7fff
9001a98a:	e7e9      	b.n	9001a960 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x200>
9001a98c:	ee22 2a64 	vnmul.f32	s4, s4, s9
9001a990:	eea3 2a85 	vfma.f32	s4, s7, s10
9001a994:	eeb5 2ac0 	vcmpe.f32	s4, #0.0
9001a998:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
9001a99c:	dade      	bge.n	9001a95c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1fc>
9001a99e:	e7f2      	b.n	9001a986 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x226>
9001a9a0:	d502      	bpl.n	9001a9a8 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x248>
9001a9a2:	f647 73ff 	movw	r3, #32767	; 0x7fff
9001a9a6:	e7e7      	b.n	9001a978 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x218>
9001a9a8:	ee62 4ae4 	vnmul.f32	s9, s5, s9
9001a9ac:	eee3 4a86 	vfma.f32	s9, s7, s12
9001a9b0:	eef5 4ac0 	vcmpe.f32	s9, #0.0
9001a9b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
9001a9b8:	dadc      	bge.n	9001a974 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x214>
9001a9ba:	e7f2      	b.n	9001a9a2 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x242>
9001a9bc:	3d800000 	.word	0x3d800000

9001a9c0 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>:
9001a9c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
9001a9c4:	2714      	movs	r7, #20
9001a9c6:	435f      	muls	r7, r3
9001a9c8:	eb02 0c07 	add.w	ip, r2, r7
9001a9cc:	f8dc 5004 	ldr.w	r5, [ip, #4]
9001a9d0:	f115 0e0f 	adds.w	lr, r5, #15
9001a9d4:	f100 80a2 	bmi.w	9001ab1c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x15c>
9001a9d8:	ea4f 1e2e 	mov.w	lr, lr, asr #4
9001a9dc:	9c08      	ldr	r4, [sp, #32]
9001a9de:	2614      	movs	r6, #20
9001a9e0:	f8c0 e014 	str.w	lr, [r0, #20]
9001a9e4:	4366      	muls	r6, r4
9001a9e6:	eb02 0806 	add.w	r8, r2, r6
9001a9ea:	f8d8 5004 	ldr.w	r5, [r8, #4]
9001a9ee:	f115 040f 	adds.w	r4, r5, #15
9001a9f2:	f100 809f 	bmi.w	9001ab34 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x174>
9001a9f6:	1124      	asrs	r4, r4, #4
9001a9f8:	eba4 040e 	sub.w	r4, r4, lr
9001a9fc:	6184      	str	r4, [r0, #24]
9001a9fe:	2c00      	cmp	r4, #0
9001aa00:	f000 808a 	beq.w	9001ab18 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x158>
9001aa04:	f8dc 9004 	ldr.w	r9, [ip, #4]
9001aa08:	f8d8 4004 	ldr.w	r4, [r8, #4]
9001aa0c:	5995      	ldr	r5, [r2, r6]
9001aa0e:	eba4 0809 	sub.w	r8, r4, r9
9001aa12:	59d4      	ldr	r4, [r2, r7]
9001aa14:	eba5 0a04 	sub.w	sl, r5, r4
9001aa18:	ea4f 1608 	mov.w	r6, r8, lsl #4
9001aa1c:	ea4f 150a 	mov.w	r5, sl, lsl #4
9001aa20:	fb0e fe05 	mul.w	lr, lr, r5
9001aa24:	fb0a ee19 	mls	lr, sl, r9, lr
9001aa28:	fb08 e404 	mla	r4, r8, r4, lr
9001aa2c:	3c01      	subs	r4, #1
9001aa2e:	19a4      	adds	r4, r4, r6
9001aa30:	f100 808c 	bmi.w	9001ab4c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x18c>
9001aa34:	fb94 fef6 	sdiv	lr, r4, r6
9001aa38:	fb06 441e 	mls	r4, r6, lr, r4
9001aa3c:	f8c0 e000 	str.w	lr, [r0]
9001aa40:	6104      	str	r4, [r0, #16]
9001aa42:	2d00      	cmp	r5, #0
9001aa44:	f2c0 8095 	blt.w	9001ab72 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1b2>
9001aa48:	fb95 f4f6 	sdiv	r4, r5, r6
9001aa4c:	fb06 5514 	mls	r5, r6, r4, r5
9001aa50:	6044      	str	r4, [r0, #4]
9001aa52:	6085      	str	r5, [r0, #8]
9001aa54:	60c6      	str	r6, [r0, #12]
9001aa56:	eb01 0383 	add.w	r3, r1, r3, lsl #2
9001aa5a:	f8dc 4004 	ldr.w	r4, [ip, #4]
9001aa5e:	6945      	ldr	r5, [r0, #20]
9001aa60:	59d2      	ldr	r2, [r2, r7]
9001aa62:	ebc4 1405 	rsb	r4, r4, r5, lsl #4
9001aa66:	eddf 6a4b 	vldr	s13, [pc, #300]	; 9001ab94 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1d4>
9001aa6a:	ed91 6a0a 	vldr	s12, [r1, #40]	; 0x28
9001aa6e:	ee07 4a10 	vmov	s14, r4
9001aa72:	6804      	ldr	r4, [r0, #0]
9001aa74:	ebc2 1204 	rsb	r2, r2, r4, lsl #4
9001aa78:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
9001aa7c:	ee07 2a90 	vmov	s15, r2
9001aa80:	ee27 7a26 	vmul.f32	s14, s14, s13
9001aa84:	eef8 7ae7 	vcvt.f32.s32	s15, s15
9001aa88:	ee67 7aa6 	vmul.f32	s15, s15, s13
9001aa8c:	edd3 6a00 	vldr	s13, [r3]
9001aa90:	eee6 6a07 	vfma.f32	s13, s12, s14
9001aa94:	ed91 6a09 	vldr	s12, [r1, #36]	; 0x24
9001aa98:	eee6 6a27 	vfma.f32	s13, s12, s15
9001aa9c:	edc0 6a07 	vstr	s13, [r0, #28]
9001aaa0:	edd0 6a01 	vldr	s13, [r0, #4]
9001aaa4:	edd1 5a09 	vldr	s11, [r1, #36]	; 0x24
9001aaa8:	eef8 6ae6 	vcvt.f32.s32	s13, s13
9001aaac:	ed91 6a0a 	vldr	s12, [r1, #40]	; 0x28
9001aab0:	eea6 6aa5 	vfma.f32	s12, s13, s11
9001aab4:	ed80 6a08 	vstr	s12, [r0, #32]
9001aab8:	6a4a      	ldr	r2, [r1, #36]	; 0x24
9001aaba:	6242      	str	r2, [r0, #36]	; 0x24
9001aabc:	edd1 5a0c 	vldr	s11, [r1, #48]	; 0x30
9001aac0:	ed93 6a03 	vldr	s12, [r3, #12]
9001aac4:	eea5 6a87 	vfma.f32	s12, s11, s14
9001aac8:	edd1 5a0b 	vldr	s11, [r1, #44]	; 0x2c
9001aacc:	eea5 6aa7 	vfma.f32	s12, s11, s15
9001aad0:	ed80 6a0a 	vstr	s12, [r0, #40]	; 0x28
9001aad4:	edd1 5a0b 	vldr	s11, [r1, #44]	; 0x2c
9001aad8:	ed91 6a0c 	vldr	s12, [r1, #48]	; 0x30
9001aadc:	eea6 6aa5 	vfma.f32	s12, s13, s11
9001aae0:	ed80 6a0b 	vstr	s12, [r0, #44]	; 0x2c
9001aae4:	6aca      	ldr	r2, [r1, #44]	; 0x2c
9001aae6:	6302      	str	r2, [r0, #48]	; 0x30
9001aae8:	ed93 6a06 	vldr	s12, [r3, #24]
9001aaec:	edd1 5a0e 	vldr	s11, [r1, #56]	; 0x38
9001aaf0:	eea5 6a87 	vfma.f32	s12, s11, s14
9001aaf4:	eeb0 7a46 	vmov.f32	s14, s12
9001aaf8:	ed91 6a0d 	vldr	s12, [r1, #52]	; 0x34
9001aafc:	eea6 7a27 	vfma.f32	s14, s12, s15
9001ab00:	ed80 7a0d 	vstr	s14, [r0, #52]	; 0x34
9001ab04:	ed91 7a0d 	vldr	s14, [r1, #52]	; 0x34
9001ab08:	edd1 7a0e 	vldr	s15, [r1, #56]	; 0x38
9001ab0c:	eee6 7a87 	vfma.f32	s15, s13, s14
9001ab10:	edc0 7a0e 	vstr	s15, [r0, #56]	; 0x38
9001ab14:	6b4b      	ldr	r3, [r1, #52]	; 0x34
9001ab16:	63c3      	str	r3, [r0, #60]	; 0x3c
9001ab18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
9001ab1c:	2410      	movs	r4, #16
9001ab1e:	f1c5 0501 	rsb	r5, r5, #1
9001ab22:	fb9e fef4 	sdiv	lr, lr, r4
9001ab26:	f015 050f 	ands.w	r5, r5, #15
9001ab2a:	bf18      	it	ne
9001ab2c:	2501      	movne	r5, #1
9001ab2e:	ebae 0e05 	sub.w	lr, lr, r5
9001ab32:	e753      	b.n	9001a9dc <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1c>
9001ab34:	f04f 0910 	mov.w	r9, #16
9001ab38:	f1c5 0501 	rsb	r5, r5, #1
9001ab3c:	fb94 f4f9 	sdiv	r4, r4, r9
9001ab40:	f015 050f 	ands.w	r5, r5, #15
9001ab44:	bf18      	it	ne
9001ab46:	2501      	movne	r5, #1
9001ab48:	1b64      	subs	r4, r4, r5
9001ab4a:	e755      	b.n	9001a9f8 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x38>
9001ab4c:	4264      	negs	r4, r4
9001ab4e:	fb94 fef6 	sdiv	lr, r4, r6
9001ab52:	f1ce 0800 	rsb	r8, lr, #0
9001ab56:	fb06 441e 	mls	r4, r6, lr, r4
9001ab5a:	f8c0 8000 	str.w	r8, [r0]
9001ab5e:	6104      	str	r4, [r0, #16]
9001ab60:	2c00      	cmp	r4, #0
9001ab62:	f43f af6e 	beq.w	9001aa42 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x82>
9001ab66:	ea6f 0e0e 	mvn.w	lr, lr
9001ab6a:	1b34      	subs	r4, r6, r4
9001ab6c:	f8c0 e000 	str.w	lr, [r0]
9001ab70:	e766      	b.n	9001aa40 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x80>
9001ab72:	426d      	negs	r5, r5
9001ab74:	fb95 f4f6 	sdiv	r4, r5, r6
9001ab78:	f1c4 0e00 	rsb	lr, r4, #0
9001ab7c:	fb06 5514 	mls	r5, r6, r4, r5
9001ab80:	f8c0 e004 	str.w	lr, [r0, #4]
9001ab84:	6085      	str	r5, [r0, #8]
9001ab86:	2d00      	cmp	r5, #0
9001ab88:	f43f af64 	beq.w	9001aa54 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x94>
9001ab8c:	43e4      	mvns	r4, r4
9001ab8e:	1b75      	subs	r5, r6, r5
9001ab90:	6044      	str	r4, [r0, #4]
9001ab92:	e75e      	b.n	9001aa52 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x92>
9001ab94:	3d800000 	.word	0x3d800000

9001ab98 <_ZN8touchgfx7Unicode6strlenEPKt>:
9001ab98:	4602      	mov	r2, r0
9001ab9a:	b148      	cbz	r0, 9001abb0 <_ZN8touchgfx7Unicode6strlenEPKt+0x18>
9001ab9c:	2300      	movs	r3, #0
9001ab9e:	b298      	uxth	r0, r3
9001aba0:	3301      	adds	r3, #1
9001aba2:	eb02 0143 	add.w	r1, r2, r3, lsl #1
9001aba6:	f831 1c02 	ldrh.w	r1, [r1, #-2]
9001abaa:	2900      	cmp	r1, #0
9001abac:	d1f7      	bne.n	9001ab9e <_ZN8touchgfx7Unicode6strlenEPKt+0x6>
9001abae:	4770      	bx	lr
9001abb0:	4770      	bx	lr

9001abb2 <_ZN8touchgfx7Unicode7strncpyEPtPKct>:
9001abb2:	b530      	push	{r4, r5, lr}
9001abb4:	4604      	mov	r4, r0
9001abb6:	b159      	cbz	r1, 9001abd0 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1e>
9001abb8:	b148      	cbz	r0, 9001abce <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
9001abba:	2300      	movs	r3, #0
9001abbc:	b298      	uxth	r0, r3
9001abbe:	4282      	cmp	r2, r0
9001abc0:	d905      	bls.n	9001abce <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
9001abc2:	5ccd      	ldrb	r5, [r1, r3]
9001abc4:	f824 5013 	strh.w	r5, [r4, r3, lsl #1]
9001abc8:	3301      	adds	r3, #1
9001abca:	2d00      	cmp	r5, #0
9001abcc:	d1f6      	bne.n	9001abbc <_ZN8touchgfx7Unicode7strncpyEPtPKct+0xa>
9001abce:	bd30      	pop	{r4, r5, pc}
9001abd0:	4608      	mov	r0, r1
9001abd2:	e7fc      	b.n	9001abce <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>

9001abd4 <_ZN8touchgfx7Unicode4utoaEmPtti.part.2>:
9001abd4:	b5f0      	push	{r4, r5, r6, r7, lr}
9001abd6:	468c      	mov	ip, r1
9001abd8:	b08b      	sub	sp, #44	; 0x2c
9001abda:	2100      	movs	r1, #0
9001abdc:	ae01      	add	r6, sp, #4
9001abde:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
9001abe2:	211f      	movs	r1, #31
9001abe4:	fbb0 f7f3 	udiv	r7, r0, r3
9001abe8:	fb03 0517 	mls	r5, r3, r7, r0
9001abec:	4638      	mov	r0, r7
9001abee:	b2ec      	uxtb	r4, r5
9001abf0:	2d09      	cmp	r5, #9
9001abf2:	bfd4      	ite	le
9001abf4:	3430      	addle	r4, #48	; 0x30
9001abf6:	3457      	addgt	r4, #87	; 0x57
9001abf8:	b2e4      	uxtb	r4, r4
9001abfa:	558c      	strb	r4, [r1, r6]
9001abfc:	1e4c      	subs	r4, r1, #1
9001abfe:	b92f      	cbnz	r7, 9001ac0c <_ZN8touchgfx7Unicode4utoaEmPtti.part.2+0x38>
9001ac00:	4431      	add	r1, r6
9001ac02:	4660      	mov	r0, ip
9001ac04:	f7ff ffd5 	bl	9001abb2 <_ZN8touchgfx7Unicode7strncpyEPtPKct>
9001ac08:	b00b      	add	sp, #44	; 0x2c
9001ac0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
9001ac0c:	4621      	mov	r1, r4
9001ac0e:	e7e9      	b.n	9001abe4 <_ZN8touchgfx7Unicode4utoaEmPtti.part.2+0x10>

9001ac10 <_ZN8touchgfx7Unicode4itoaElPtti>:
9001ac10:	b5f0      	push	{r4, r5, r6, r7, lr}
9001ac12:	4607      	mov	r7, r0
9001ac14:	b08b      	sub	sp, #44	; 0x2c
9001ac16:	4608      	mov	r0, r1
9001ac18:	b341      	cbz	r1, 9001ac6c <_ZN8touchgfx7Unicode4itoaElPtti+0x5c>
9001ac1a:	1e99      	subs	r1, r3, #2
9001ac1c:	2922      	cmp	r1, #34	; 0x22
9001ac1e:	d825      	bhi.n	9001ac6c <_ZN8touchgfx7Unicode4itoaElPtti+0x5c>
9001ac20:	2100      	movs	r1, #0
9001ac22:	463c      	mov	r4, r7
9001ac24:	261f      	movs	r6, #31
9001ac26:	f10d 0c04 	add.w	ip, sp, #4
9001ac2a:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
9001ac2e:	1e71      	subs	r1, r6, #1
9001ac30:	fb94 fef3 	sdiv	lr, r4, r3
9001ac34:	fb03 441e 	mls	r4, r3, lr, r4
9001ac38:	ea84 75e4 	eor.w	r5, r4, r4, asr #31
9001ac3c:	eba5 75e4 	sub.w	r5, r5, r4, asr #31
9001ac40:	b2ec      	uxtb	r4, r5
9001ac42:	2d09      	cmp	r5, #9
9001ac44:	bfd4      	ite	le
9001ac46:	3430      	addle	r4, #48	; 0x30
9001ac48:	3457      	addgt	r4, #87	; 0x57
9001ac4a:	b2e4      	uxtb	r4, r4
9001ac4c:	f80c 4006 	strb.w	r4, [ip, r6]
9001ac50:	4674      	mov	r4, lr
9001ac52:	b96c      	cbnz	r4, 9001ac70 <_ZN8touchgfx7Unicode4itoaElPtti+0x60>
9001ac54:	2f00      	cmp	r7, #0
9001ac56:	da05      	bge.n	9001ac64 <_ZN8touchgfx7Unicode4itoaElPtti+0x54>
9001ac58:	ab0a      	add	r3, sp, #40	; 0x28
9001ac5a:	4419      	add	r1, r3
9001ac5c:	232d      	movs	r3, #45	; 0x2d
9001ac5e:	f801 3c24 	strb.w	r3, [r1, #-36]
9001ac62:	1eb1      	subs	r1, r6, #2
9001ac64:	3101      	adds	r1, #1
9001ac66:	4461      	add	r1, ip
9001ac68:	f7ff ffa3 	bl	9001abb2 <_ZN8touchgfx7Unicode7strncpyEPtPKct>
9001ac6c:	b00b      	add	sp, #44	; 0x2c
9001ac6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
9001ac70:	460e      	mov	r6, r1
9001ac72:	e7dc      	b.n	9001ac2e <_ZN8touchgfx7Unicode4itoaElPtti+0x1e>

9001ac74 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt>:
9001ac74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001ac78:	b085      	sub	sp, #20
9001ac7a:	4691      	mov	r9, r2
9001ac7c:	6802      	ldr	r2, [r0, #0]
9001ac7e:	4688      	mov	r8, r1
9001ac80:	461c      	mov	r4, r3
9001ac82:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
9001ac86:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
9001ac8a:	4683      	mov	fp, r0
9001ac8c:	4610      	mov	r0, r2
9001ac8e:	9103      	str	r1, [sp, #12]
9001ac90:	9302      	str	r3, [sp, #8]
9001ac92:	9201      	str	r2, [sp, #4]
9001ac94:	f7ff ff80 	bl	9001ab98 <_ZN8touchgfx7Unicode6strlenEPKt>
9001ac98:	f1b8 0f00 	cmp.w	r8, #0
9001ac9c:	bf0c      	ite	eq
9001ac9e:	4684      	moveq	ip, r0
9001aca0:	f100 0c01 	addne.w	ip, r0, #1
9001aca4:	f1b9 0f69 	cmp.w	r9, #105	; 0x69
9001aca8:	f89d 6038 	ldrb.w	r6, [sp, #56]	; 0x38
9001acac:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
9001acae:	fa1f fc8c 	uxth.w	ip, ip
9001acb2:	9d13      	ldr	r5, [sp, #76]	; 0x4c
9001acb4:	f8dd a054 	ldr.w	sl, [sp, #84]	; 0x54
9001acb8:	9903      	ldr	r1, [sp, #12]
9001acba:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
9001acbe:	d041      	beq.n	9001ad44 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xd0>
9001acc0:	d834      	bhi.n	9001ad2c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xb8>
9001acc2:	f1b9 0f63 	cmp.w	r9, #99	; 0x63
9001acc6:	d059      	beq.n	9001ad7c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x108>
9001acc8:	f1b9 0f64 	cmp.w	r9, #100	; 0x64
9001accc:	d03a      	beq.n	9001ad44 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xd0>
9001acce:	f1b9 0f58 	cmp.w	r9, #88	; 0x58
9001acd2:	d034      	beq.n	9001ad3e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xca>
9001acd4:	2400      	movs	r4, #0
9001acd6:	f8bd 2050 	ldrh.w	r2, [sp, #80]	; 0x50
9001acda:	3a01      	subs	r2, #1
9001acdc:	b169      	cbz	r1, 9001acfa <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
9001acde:	9911      	ldr	r1, [sp, #68]	; 0x44
9001ace0:	458c      	cmp	ip, r1
9001ace2:	da09      	bge.n	9001acf8 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x84>
9001ace4:	eba1 010c 	sub.w	r1, r1, ip
9001ace8:	b289      	uxth	r1, r1
9001acea:	b933      	cbnz	r3, 9001acfa <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
9001acec:	2e00      	cmp	r6, #0
9001acee:	d051      	beq.n	9001ad94 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x120>
9001acf0:	2800      	cmp	r0, #0
9001acf2:	d04f      	beq.n	9001ad94 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x120>
9001acf4:	440c      	add	r4, r1
9001acf6:	b2a4      	uxth	r4, r4
9001acf8:	2100      	movs	r1, #0
9001acfa:	682b      	ldr	r3, [r5, #0]
9001acfc:	4293      	cmp	r3, r2
9001acfe:	da07      	bge.n	9001ad10 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9c>
9001ad00:	f1b8 0f00 	cmp.w	r8, #0
9001ad04:	d004      	beq.n	9001ad10 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9c>
9001ad06:	f82a 8013 	strh.w	r8, [sl, r3, lsl #1]
9001ad0a:	682b      	ldr	r3, [r5, #0]
9001ad0c:	3301      	adds	r3, #1
9001ad0e:	602b      	str	r3, [r5, #0]
9001ad10:	2730      	movs	r7, #48	; 0x30
9001ad12:	2c00      	cmp	r4, #0
9001ad14:	d04e      	beq.n	9001adb4 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
9001ad16:	682e      	ldr	r6, [r5, #0]
9001ad18:	3c01      	subs	r4, #1
9001ad1a:	42b2      	cmp	r2, r6
9001ad1c:	b2a4      	uxth	r4, r4
9001ad1e:	dd49      	ble.n	9001adb4 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
9001ad20:	f82a 7016 	strh.w	r7, [sl, r6, lsl #1]
9001ad24:	682b      	ldr	r3, [r5, #0]
9001ad26:	3301      	adds	r3, #1
9001ad28:	602b      	str	r3, [r5, #0]
9001ad2a:	e7f2      	b.n	9001ad12 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9e>
9001ad2c:	f1b9 0f73 	cmp.w	r9, #115	; 0x73
9001ad30:	d01d      	beq.n	9001ad6e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xfa>
9001ad32:	f1b9 0f78 	cmp.w	r9, #120	; 0x78
9001ad36:	d002      	beq.n	9001ad3e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xca>
9001ad38:	f1b9 0f6f 	cmp.w	r9, #111	; 0x6f
9001ad3c:	e7c9      	b.n	9001acd2 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x5e>
9001ad3e:	4684      	mov	ip, r0
9001ad40:	f04f 0800 	mov.w	r8, #0
9001ad44:	2c00      	cmp	r4, #0
9001ad46:	d0c6      	beq.n	9001acd6 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
9001ad48:	b947      	cbnz	r7, 9001ad5c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xe8>
9001ad4a:	2801      	cmp	r0, #1
9001ad4c:	d106      	bne.n	9001ad5c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xe8>
9001ad4e:	8814      	ldrh	r4, [r2, #0]
9001ad50:	2c30      	cmp	r4, #48	; 0x30
9001ad52:	bf02      	ittt	eq
9001ad54:	3202      	addeq	r2, #2
9001ad56:	4638      	moveq	r0, r7
9001ad58:	f8cb 2000 	streq.w	r2, [fp]
9001ad5c:	45bc      	cmp	ip, r7
9001ad5e:	da14      	bge.n	9001ad8a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x116>
9001ad60:	b2bf      	uxth	r7, r7
9001ad62:	eba7 040c 	sub.w	r4, r7, ip
9001ad66:	46bc      	mov	ip, r7
9001ad68:	b2a4      	uxth	r4, r4
9001ad6a:	2600      	movs	r6, #0
9001ad6c:	e7b3      	b.n	9001acd6 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
9001ad6e:	4684      	mov	ip, r0
9001ad70:	b16c      	cbz	r4, 9001ad8e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x11a>
9001ad72:	42b8      	cmp	r0, r7
9001ad74:	dd00      	ble.n	9001ad78 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x104>
9001ad76:	b2b8      	uxth	r0, r7
9001ad78:	2400      	movs	r4, #0
9001ad7a:	e003      	b.n	9001ad84 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x110>
9001ad7c:	f04f 0c01 	mov.w	ip, #1
9001ad80:	2400      	movs	r4, #0
9001ad82:	4660      	mov	r0, ip
9001ad84:	4626      	mov	r6, r4
9001ad86:	46a0      	mov	r8, r4
9001ad88:	e7a5      	b.n	9001acd6 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
9001ad8a:	2400      	movs	r4, #0
9001ad8c:	e7ed      	b.n	9001ad6a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xf6>
9001ad8e:	4626      	mov	r6, r4
9001ad90:	46a0      	mov	r8, r4
9001ad92:	e7a0      	b.n	9001acd6 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
9001ad94:	2900      	cmp	r1, #0
9001ad96:	d0b0      	beq.n	9001acfa <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
9001ad98:	2720      	movs	r7, #32
9001ad9a:	682e      	ldr	r6, [r5, #0]
9001ad9c:	2900      	cmp	r1, #0
9001ad9e:	d0ac      	beq.n	9001acfa <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
9001ada0:	3901      	subs	r1, #1
9001ada2:	4296      	cmp	r6, r2
9001ada4:	b289      	uxth	r1, r1
9001ada6:	daa7      	bge.n	9001acf8 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x84>
9001ada8:	f82a 7016 	strh.w	r7, [sl, r6, lsl #1]
9001adac:	682b      	ldr	r3, [r5, #0]
9001adae:	3301      	adds	r3, #1
9001adb0:	602b      	str	r3, [r5, #0]
9001adb2:	e7f2      	b.n	9001ad9a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x126>
9001adb4:	b188      	cbz	r0, 9001adda <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x166>
9001adb6:	682b      	ldr	r3, [r5, #0]
9001adb8:	3801      	subs	r0, #1
9001adba:	429a      	cmp	r2, r3
9001adbc:	b280      	uxth	r0, r0
9001adbe:	dd0c      	ble.n	9001adda <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x166>
9001adc0:	f8db 3000 	ldr.w	r3, [fp]
9001adc4:	1c9c      	adds	r4, r3, #2
9001adc6:	f8cb 4000 	str.w	r4, [fp]
9001adca:	881c      	ldrh	r4, [r3, #0]
9001adcc:	682b      	ldr	r3, [r5, #0]
9001adce:	f82a 4013 	strh.w	r4, [sl, r3, lsl #1]
9001add2:	682b      	ldr	r3, [r5, #0]
9001add4:	3301      	adds	r3, #1
9001add6:	602b      	str	r3, [r5, #0]
9001add8:	e7ec      	b.n	9001adb4 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
9001adda:	2620      	movs	r6, #32
9001addc:	b151      	cbz	r1, 9001adf4 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x180>
9001adde:	6828      	ldr	r0, [r5, #0]
9001ade0:	3901      	subs	r1, #1
9001ade2:	4282      	cmp	r2, r0
9001ade4:	b289      	uxth	r1, r1
9001ade6:	dd05      	ble.n	9001adf4 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x180>
9001ade8:	f82a 6010 	strh.w	r6, [sl, r0, lsl #1]
9001adec:	682b      	ldr	r3, [r5, #0]
9001adee:	3301      	adds	r3, #1
9001adf0:	602b      	str	r3, [r5, #0]
9001adf2:	e7f3      	b.n	9001addc <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x168>
9001adf4:	b005      	add	sp, #20
9001adf6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

9001adfa <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_>:
9001adfa:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
9001adfe:	2400      	movs	r4, #0
9001ae00:	e9dd 8c07 	ldrd	r8, ip, [sp, #28]
9001ae04:	e9dd e609 	ldrd	lr, r6, [sp, #36]	; 0x24
9001ae08:	e9dd 750b 	ldrd	r7, r5, [sp, #44]	; 0x2c
9001ae0c:	8014      	strh	r4, [r2, #0]
9001ae0e:	701c      	strb	r4, [r3, #0]
9001ae10:	f888 4000 	strb.w	r4, [r8]
9001ae14:	f88c 4000 	strb.w	r4, [ip]
9001ae18:	f88e 4000 	strb.w	r4, [lr]
9001ae1c:	703c      	strb	r4, [r7, #0]
9001ae1e:	6804      	ldr	r4, [r0, #0]
9001ae20:	b1a4      	cbz	r4, 9001ae4c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x52>
9001ae22:	8824      	ldrh	r4, [r4, #0]
9001ae24:	f04f 0901 	mov.w	r9, #1
9001ae28:	b314      	cbz	r4, 9001ae70 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
9001ae2a:	2c2b      	cmp	r4, #43	; 0x2b
9001ae2c:	d001      	beq.n	9001ae32 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x38>
9001ae2e:	2c20      	cmp	r4, #32
9001ae30:	d110      	bne.n	9001ae54 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x5a>
9001ae32:	8014      	strh	r4, [r2, #0]
9001ae34:	6804      	ldr	r4, [r0, #0]
9001ae36:	b10c      	cbz	r4, 9001ae3c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x42>
9001ae38:	3402      	adds	r4, #2
9001ae3a:	6004      	str	r4, [r0, #0]
9001ae3c:	680c      	ldr	r4, [r1, #0]
9001ae3e:	b10c      	cbz	r4, 9001ae44 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x4a>
9001ae40:	3401      	adds	r4, #1
9001ae42:	600c      	str	r4, [r1, #0]
9001ae44:	6804      	ldr	r4, [r0, #0]
9001ae46:	b17c      	cbz	r4, 9001ae68 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x6e>
9001ae48:	8824      	ldrh	r4, [r4, #0]
9001ae4a:	e7ed      	b.n	9001ae28 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2e>
9001ae4c:	680c      	ldr	r4, [r1, #0]
9001ae4e:	b17c      	cbz	r4, 9001ae70 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
9001ae50:	7824      	ldrb	r4, [r4, #0]
9001ae52:	e7e7      	b.n	9001ae24 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2a>
9001ae54:	2c2d      	cmp	r4, #45	; 0x2d
9001ae56:	d102      	bne.n	9001ae5e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x64>
9001ae58:	f883 9000 	strb.w	r9, [r3]
9001ae5c:	e7ea      	b.n	9001ae34 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x3a>
9001ae5e:	2c23      	cmp	r4, #35	; 0x23
9001ae60:	d107      	bne.n	9001ae72 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x78>
9001ae62:	f888 9000 	strb.w	r9, [r8]
9001ae66:	e7e5      	b.n	9001ae34 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x3a>
9001ae68:	680c      	ldr	r4, [r1, #0]
9001ae6a:	b10c      	cbz	r4, 9001ae70 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
9001ae6c:	7824      	ldrb	r4, [r4, #0]
9001ae6e:	e7db      	b.n	9001ae28 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2e>
9001ae70:	2400      	movs	r4, #0
9001ae72:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
9001ae76:	2b09      	cmp	r3, #9
9001ae78:	d901      	bls.n	9001ae7e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x84>
9001ae7a:	2c2a      	cmp	r4, #42	; 0x2a
9001ae7c:	d122      	bne.n	9001aec4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
9001ae7e:	2301      	movs	r3, #1
9001ae80:	2c30      	cmp	r4, #48	; 0x30
9001ae82:	f88e 3000 	strb.w	r3, [lr]
9001ae86:	d10d      	bne.n	9001aea4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xaa>
9001ae88:	f88c 3000 	strb.w	r3, [ip]
9001ae8c:	6803      	ldr	r3, [r0, #0]
9001ae8e:	b10b      	cbz	r3, 9001ae94 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x9a>
9001ae90:	3302      	adds	r3, #2
9001ae92:	6003      	str	r3, [r0, #0]
9001ae94:	680b      	ldr	r3, [r1, #0]
9001ae96:	b10b      	cbz	r3, 9001ae9c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xa2>
9001ae98:	3301      	adds	r3, #1
9001ae9a:	600b      	str	r3, [r1, #0]
9001ae9c:	6803      	ldr	r3, [r0, #0]
9001ae9e:	2b00      	cmp	r3, #0
9001aea0:	d02f      	beq.n	9001af02 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x108>
9001aea2:	881c      	ldrh	r4, [r3, #0]
9001aea4:	2c2a      	cmp	r4, #42	; 0x2a
9001aea6:	d135      	bne.n	9001af14 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x11a>
9001aea8:	f04f 33ff 	mov.w	r3, #4294967295
9001aeac:	6033      	str	r3, [r6, #0]
9001aeae:	6803      	ldr	r3, [r0, #0]
9001aeb0:	b10b      	cbz	r3, 9001aeb6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xbc>
9001aeb2:	3302      	adds	r3, #2
9001aeb4:	6003      	str	r3, [r0, #0]
9001aeb6:	680b      	ldr	r3, [r1, #0]
9001aeb8:	b10b      	cbz	r3, 9001aebe <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xc4>
9001aeba:	3301      	adds	r3, #1
9001aebc:	600b      	str	r3, [r1, #0]
9001aebe:	6803      	ldr	r3, [r0, #0]
9001aec0:	b31b      	cbz	r3, 9001af0a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x110>
9001aec2:	881c      	ldrh	r4, [r3, #0]
9001aec4:	2c2e      	cmp	r4, #46	; 0x2e
9001aec6:	d11a      	bne.n	9001aefe <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
9001aec8:	2301      	movs	r3, #1
9001aeca:	703b      	strb	r3, [r7, #0]
9001aecc:	6803      	ldr	r3, [r0, #0]
9001aece:	b10b      	cbz	r3, 9001aed4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xda>
9001aed0:	3302      	adds	r3, #2
9001aed2:	6003      	str	r3, [r0, #0]
9001aed4:	680b      	ldr	r3, [r1, #0]
9001aed6:	b10b      	cbz	r3, 9001aedc <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xe2>
9001aed8:	3301      	adds	r3, #1
9001aeda:	600b      	str	r3, [r1, #0]
9001aedc:	6803      	ldr	r3, [r0, #0]
9001aede:	2b00      	cmp	r3, #0
9001aee0:	d036      	beq.n	9001af50 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x156>
9001aee2:	881b      	ldrh	r3, [r3, #0]
9001aee4:	2b2a      	cmp	r3, #42	; 0x2a
9001aee6:	d137      	bne.n	9001af58 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x15e>
9001aee8:	f04f 33ff 	mov.w	r3, #4294967295
9001aeec:	602b      	str	r3, [r5, #0]
9001aeee:	6803      	ldr	r3, [r0, #0]
9001aef0:	b10b      	cbz	r3, 9001aef6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xfc>
9001aef2:	3302      	adds	r3, #2
9001aef4:	6003      	str	r3, [r0, #0]
9001aef6:	680b      	ldr	r3, [r1, #0]
9001aef8:	b10b      	cbz	r3, 9001aefe <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
9001aefa:	3301      	adds	r3, #1
9001aefc:	600b      	str	r3, [r1, #0]
9001aefe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
9001af02:	680c      	ldr	r4, [r1, #0]
9001af04:	b134      	cbz	r4, 9001af14 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x11a>
9001af06:	7824      	ldrb	r4, [r4, #0]
9001af08:	e7cc      	b.n	9001aea4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xaa>
9001af0a:	680b      	ldr	r3, [r1, #0]
9001af0c:	2b00      	cmp	r3, #0
9001af0e:	d0f6      	beq.n	9001aefe <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
9001af10:	781c      	ldrb	r4, [r3, #0]
9001af12:	e7d7      	b.n	9001aec4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
9001af14:	2300      	movs	r3, #0
9001af16:	220a      	movs	r2, #10
9001af18:	6033      	str	r3, [r6, #0]
9001af1a:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
9001af1e:	fa1f f38c 	uxth.w	r3, ip
9001af22:	2b09      	cmp	r3, #9
9001af24:	d8ce      	bhi.n	9001aec4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
9001af26:	6833      	ldr	r3, [r6, #0]
9001af28:	fb02 c303 	mla	r3, r2, r3, ip
9001af2c:	6033      	str	r3, [r6, #0]
9001af2e:	6803      	ldr	r3, [r0, #0]
9001af30:	b10b      	cbz	r3, 9001af36 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x13c>
9001af32:	3302      	adds	r3, #2
9001af34:	6003      	str	r3, [r0, #0]
9001af36:	680b      	ldr	r3, [r1, #0]
9001af38:	b10b      	cbz	r3, 9001af3e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x144>
9001af3a:	3301      	adds	r3, #1
9001af3c:	600b      	str	r3, [r1, #0]
9001af3e:	6803      	ldr	r3, [r0, #0]
9001af40:	b10b      	cbz	r3, 9001af46 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x14c>
9001af42:	881c      	ldrh	r4, [r3, #0]
9001af44:	e7e9      	b.n	9001af1a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
9001af46:	680c      	ldr	r4, [r1, #0]
9001af48:	2c00      	cmp	r4, #0
9001af4a:	d0e6      	beq.n	9001af1a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
9001af4c:	7824      	ldrb	r4, [r4, #0]
9001af4e:	e7e4      	b.n	9001af1a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
9001af50:	680b      	ldr	r3, [r1, #0]
9001af52:	b10b      	cbz	r3, 9001af58 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x15e>
9001af54:	781b      	ldrb	r3, [r3, #0]
9001af56:	e7c5      	b.n	9001aee4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xea>
9001af58:	2200      	movs	r2, #0
9001af5a:	240a      	movs	r4, #10
9001af5c:	602a      	str	r2, [r5, #0]
9001af5e:	3b30      	subs	r3, #48	; 0x30
9001af60:	682a      	ldr	r2, [r5, #0]
9001af62:	b29e      	uxth	r6, r3
9001af64:	2e09      	cmp	r6, #9
9001af66:	d813      	bhi.n	9001af90 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x196>
9001af68:	fb04 3302 	mla	r3, r4, r2, r3
9001af6c:	602b      	str	r3, [r5, #0]
9001af6e:	6803      	ldr	r3, [r0, #0]
9001af70:	b10b      	cbz	r3, 9001af76 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x17c>
9001af72:	3302      	adds	r3, #2
9001af74:	6003      	str	r3, [r0, #0]
9001af76:	680b      	ldr	r3, [r1, #0]
9001af78:	b10b      	cbz	r3, 9001af7e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x184>
9001af7a:	3301      	adds	r3, #1
9001af7c:	600b      	str	r3, [r1, #0]
9001af7e:	6803      	ldr	r3, [r0, #0]
9001af80:	b10b      	cbz	r3, 9001af86 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x18c>
9001af82:	881b      	ldrh	r3, [r3, #0]
9001af84:	e7eb      	b.n	9001af5e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
9001af86:	680b      	ldr	r3, [r1, #0]
9001af88:	2b00      	cmp	r3, #0
9001af8a:	d0e8      	beq.n	9001af5e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
9001af8c:	781b      	ldrb	r3, [r3, #0]
9001af8e:	e7e6      	b.n	9001af5e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
9001af90:	2a06      	cmp	r2, #6
9001af92:	bfa8      	it	ge
9001af94:	2206      	movge	r2, #6
9001af96:	602a      	str	r2, [r5, #0]
9001af98:	e7b1      	b.n	9001aefe <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>

9001af9a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list>:
9001af9a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001af9e:	b0a3      	sub	sp, #140	; 0x8c
9001afa0:	2600      	movs	r6, #0
9001afa2:	4607      	mov	r7, r0
9001afa4:	4688      	mov	r8, r1
9001afa6:	f10d 0944 	add.w	r9, sp, #68	; 0x44
9001afaa:	4631      	mov	r1, r6
9001afac:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
9001afae:	4648      	mov	r0, r9
9001afb0:	960d      	str	r6, [sp, #52]	; 0x34
9001afb2:	e9cd 3208 	strd	r3, r2, [sp, #32]
9001afb6:	2242      	movs	r2, #66	; 0x42
9001afb8:	f00c fe00 	bl	90027bbc <memset>
9001afbc:	b15f      	cbz	r7, 9001afd6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x3c>
9001afbe:	f108 3aff 	add.w	sl, r8, #4294967295
9001afc2:	9a09      	ldr	r2, [sp, #36]	; 0x24
9001afc4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
9001afc6:	b152      	cbz	r2, 9001afde <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x44>
9001afc8:	8812      	ldrh	r2, [r2, #0]
9001afca:	b10a      	cbz	r2, 9001afd0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x36>
9001afcc:	459a      	cmp	sl, r3
9001afce:	dc2e      	bgt.n	9001b02e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x94>
9001afd0:	2200      	movs	r2, #0
9001afd2:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
9001afd6:	4638      	mov	r0, r7
9001afd8:	b023      	add	sp, #140	; 0x8c
9001afda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9001afde:	9a08      	ldr	r2, [sp, #32]
9001afe0:	2a00      	cmp	r2, #0
9001afe2:	d0f5      	beq.n	9001afd0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x36>
9001afe4:	7812      	ldrb	r2, [r2, #0]
9001afe6:	e7f0      	b.n	9001afca <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x30>
9001afe8:	2d00      	cmp	r5, #0
9001afea:	d0ea      	beq.n	9001afc2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
9001afec:	782a      	ldrb	r2, [r5, #0]
9001afee:	b142      	cbz	r2, 9001b002 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x68>
9001aff0:	2a25      	cmp	r2, #37	; 0x25
9001aff2:	d001      	beq.n	9001aff8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x5e>
9001aff4:	459a      	cmp	sl, r3
9001aff6:	dc08      	bgt.n	9001b00a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x70>
9001aff8:	f1bb 0f00 	cmp.w	fp, #0
9001affc:	d121      	bne.n	9001b042 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xa8>
9001affe:	2d00      	cmp	r5, #0
9001b000:	d0df      	beq.n	9001afc2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
9001b002:	782a      	ldrb	r2, [r5, #0]
9001b004:	f04f 0b00 	mov.w	fp, #0
9001b008:	e01d      	b.n	9001b046 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xac>
9001b00a:	f1bb 0f00 	cmp.w	fp, #0
9001b00e:	d077      	beq.n	9001b100 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x166>
9001b010:	f8bb 2000 	ldrh.w	r2, [fp]
9001b014:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
9001b018:	f1bb 0f00 	cmp.w	fp, #0
9001b01c:	d002      	beq.n	9001b024 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x8a>
9001b01e:	f10b 0202 	add.w	r2, fp, #2
9001b022:	9209      	str	r2, [sp, #36]	; 0x24
9001b024:	b10d      	cbz	r5, 9001b02a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x90>
9001b026:	3501      	adds	r5, #1
9001b028:	9508      	str	r5, [sp, #32]
9001b02a:	3301      	adds	r3, #1
9001b02c:	930d      	str	r3, [sp, #52]	; 0x34
9001b02e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
9001b030:	e9dd 5b08 	ldrd	r5, fp, [sp, #32]
9001b034:	f1bb 0f00 	cmp.w	fp, #0
9001b038:	d0d6      	beq.n	9001afe8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x4e>
9001b03a:	f8bb 2000 	ldrh.w	r2, [fp]
9001b03e:	2a00      	cmp	r2, #0
9001b040:	d1d6      	bne.n	9001aff0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x56>
9001b042:	f8bb 2000 	ldrh.w	r2, [fp]
9001b046:	2a00      	cmp	r2, #0
9001b048:	d0bb      	beq.n	9001afc2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
9001b04a:	459a      	cmp	sl, r3
9001b04c:	ddb9      	ble.n	9001afc2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
9001b04e:	f8ad 6032 	strh.w	r6, [sp, #50]	; 0x32
9001b052:	f88d 602d 	strb.w	r6, [sp, #45]	; 0x2d
9001b056:	f88d 602e 	strb.w	r6, [sp, #46]	; 0x2e
9001b05a:	f88d 602f 	strb.w	r6, [sp, #47]	; 0x2f
9001b05e:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
9001b062:	960e      	str	r6, [sp, #56]	; 0x38
9001b064:	f88d 6031 	strb.w	r6, [sp, #49]	; 0x31
9001b068:	960f      	str	r6, [sp, #60]	; 0x3c
9001b06a:	f1bb 0f00 	cmp.w	fp, #0
9001b06e:	d002      	beq.n	9001b076 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xdc>
9001b070:	f10b 0302 	add.w	r3, fp, #2
9001b074:	9309      	str	r3, [sp, #36]	; 0x24
9001b076:	b10d      	cbz	r5, 9001b07c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xe2>
9001b078:	1c6b      	adds	r3, r5, #1
9001b07a:	9308      	str	r3, [sp, #32]
9001b07c:	ab0f      	add	r3, sp, #60	; 0x3c
9001b07e:	f10d 0232 	add.w	r2, sp, #50	; 0x32
9001b082:	a908      	add	r1, sp, #32
9001b084:	a809      	add	r0, sp, #36	; 0x24
9001b086:	9305      	str	r3, [sp, #20]
9001b088:	f10d 0331 	add.w	r3, sp, #49	; 0x31
9001b08c:	9304      	str	r3, [sp, #16]
9001b08e:	ab0e      	add	r3, sp, #56	; 0x38
9001b090:	9303      	str	r3, [sp, #12]
9001b092:	ab0c      	add	r3, sp, #48	; 0x30
9001b094:	9302      	str	r3, [sp, #8]
9001b096:	f10d 032f 	add.w	r3, sp, #47	; 0x2f
9001b09a:	9301      	str	r3, [sp, #4]
9001b09c:	f10d 032e 	add.w	r3, sp, #46	; 0x2e
9001b0a0:	9300      	str	r3, [sp, #0]
9001b0a2:	f10d 032d 	add.w	r3, sp, #45	; 0x2d
9001b0a6:	f7ff fea8 	bl	9001adfa <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_>
9001b0aa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
9001b0ac:	2b00      	cmp	r3, #0
9001b0ae:	bfbf      	itttt	lt
9001b0b0:	6823      	ldrlt	r3, [r4, #0]
9001b0b2:	3404      	addlt	r4, #4
9001b0b4:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
9001b0b8:	930e      	strlt	r3, [sp, #56]	; 0x38
9001b0ba:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
9001b0bc:	2b00      	cmp	r3, #0
9001b0be:	bfbe      	ittt	lt
9001b0c0:	6823      	ldrlt	r3, [r4, #0]
9001b0c2:	3404      	addlt	r4, #4
9001b0c4:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
9001b0c8:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
9001b0cc:	bfb8      	it	lt
9001b0ce:	930f      	strlt	r3, [sp, #60]	; 0x3c
9001b0d0:	b1d9      	cbz	r1, 9001b10a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x170>
9001b0d2:	880b      	ldrh	r3, [r1, #0]
9001b0d4:	2b69      	cmp	r3, #105	; 0x69
9001b0d6:	d01f      	beq.n	9001b118 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
9001b0d8:	d82f      	bhi.n	9001b13a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1a0>
9001b0da:	2b58      	cmp	r3, #88	; 0x58
9001b0dc:	d01c      	beq.n	9001b118 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
9001b0de:	d818      	bhi.n	9001b112 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x178>
9001b0e0:	2b25      	cmp	r3, #37	; 0x25
9001b0e2:	d034      	beq.n	9001b14e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1b4>
9001b0e4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
9001b0e6:	e9cd 5b08 	strd	r5, fp, [sp, #32]
9001b0ea:	f1bb 0f00 	cmp.w	fp, #0
9001b0ee:	f000 80b7 	beq.w	9001b260 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2c6>
9001b0f2:	f8bb 5000 	ldrh.w	r5, [fp]
9001b0f6:	f827 5013 	strh.w	r5, [r7, r3, lsl #1]
9001b0fa:	3301      	adds	r3, #1
9001b0fc:	930d      	str	r3, [sp, #52]	; 0x34
9001b0fe:	e029      	b.n	9001b154 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ba>
9001b100:	b10d      	cbz	r5, 9001b106 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x16c>
9001b102:	782a      	ldrb	r2, [r5, #0]
9001b104:	e786      	b.n	9001b014 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x7a>
9001b106:	462a      	mov	r2, r5
9001b108:	e784      	b.n	9001b014 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x7a>
9001b10a:	2a00      	cmp	r2, #0
9001b10c:	d0ea      	beq.n	9001b0e4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14a>
9001b10e:	7813      	ldrb	r3, [r2, #0]
9001b110:	e7e0      	b.n	9001b0d4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x13a>
9001b112:	3b63      	subs	r3, #99	; 0x63
9001b114:	2b01      	cmp	r3, #1
9001b116:	d8e5      	bhi.n	9001b0e4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14a>
9001b118:	f8cd 9040 	str.w	r9, [sp, #64]	; 0x40
9001b11c:	b329      	cbz	r1, 9001b16a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1d0>
9001b11e:	880b      	ldrh	r3, [r1, #0]
9001b120:	2b69      	cmp	r3, #105	; 0x69
9001b122:	d063      	beq.n	9001b1ec <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x252>
9001b124:	d825      	bhi.n	9001b172 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1d8>
9001b126:	2b63      	cmp	r3, #99	; 0x63
9001b128:	d038      	beq.n	9001b19c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x202>
9001b12a:	2b64      	cmp	r3, #100	; 0x64
9001b12c:	d05e      	beq.n	9001b1ec <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x252>
9001b12e:	2b58      	cmp	r3, #88	; 0x58
9001b130:	d07a      	beq.n	9001b228 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28e>
9001b132:	f8ad 6044 	strh.w	r6, [sp, #68]	; 0x44
9001b136:	4625      	mov	r5, r4
9001b138:	e036      	b.n	9001b1a8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
9001b13a:	2b73      	cmp	r3, #115	; 0x73
9001b13c:	d0ec      	beq.n	9001b118 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
9001b13e:	d802      	bhi.n	9001b146 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ac>
9001b140:	2b6f      	cmp	r3, #111	; 0x6f
9001b142:	d1cf      	bne.n	9001b0e4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14a>
9001b144:	e7e8      	b.n	9001b118 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
9001b146:	2b75      	cmp	r3, #117	; 0x75
9001b148:	d0e6      	beq.n	9001b118 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
9001b14a:	2b78      	cmp	r3, #120	; 0x78
9001b14c:	e7f9      	b.n	9001b142 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1a8>
9001b14e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
9001b150:	f827 3012 	strh.w	r3, [r7, r2, lsl #1]
9001b154:	9b09      	ldr	r3, [sp, #36]	; 0x24
9001b156:	b10b      	cbz	r3, 9001b15c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1c2>
9001b158:	3302      	adds	r3, #2
9001b15a:	9309      	str	r3, [sp, #36]	; 0x24
9001b15c:	9b08      	ldr	r3, [sp, #32]
9001b15e:	2b00      	cmp	r3, #0
9001b160:	f43f af2f 	beq.w	9001afc2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
9001b164:	3301      	adds	r3, #1
9001b166:	9308      	str	r3, [sp, #32]
9001b168:	e72b      	b.n	9001afc2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
9001b16a:	2a00      	cmp	r2, #0
9001b16c:	d0e1      	beq.n	9001b132 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x198>
9001b16e:	7813      	ldrb	r3, [r2, #0]
9001b170:	e7d6      	b.n	9001b120 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x186>
9001b172:	2b73      	cmp	r3, #115	; 0x73
9001b174:	d036      	beq.n	9001b1e4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x24a>
9001b176:	d807      	bhi.n	9001b188 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ee>
9001b178:	2b6f      	cmp	r3, #111	; 0x6f
9001b17a:	d1da      	bne.n	9001b132 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x198>
9001b17c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
9001b17e:	1d25      	adds	r5, r4, #4
9001b180:	2308      	movs	r3, #8
9001b182:	eba8 0202 	sub.w	r2, r8, r2
9001b186:	e049      	b.n	9001b21c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x282>
9001b188:	2b75      	cmp	r3, #117	; 0x75
9001b18a:	d042      	beq.n	9001b212 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x278>
9001b18c:	2b78      	cmp	r3, #120	; 0x78
9001b18e:	d1d0      	bne.n	9001b132 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x198>
9001b190:	9a0d      	ldr	r2, [sp, #52]	; 0x34
9001b192:	1d25      	adds	r5, r4, #4
9001b194:	2310      	movs	r3, #16
9001b196:	eba8 0202 	sub.w	r2, r8, r2
9001b19a:	e03f      	b.n	9001b21c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x282>
9001b19c:	6823      	ldr	r3, [r4, #0]
9001b19e:	1d25      	adds	r5, r4, #4
9001b1a0:	f8ad 6046 	strh.w	r6, [sp, #70]	; 0x46
9001b1a4:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
9001b1a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
9001b1aa:	f8bd 1032 	ldrh.w	r1, [sp, #50]	; 0x32
9001b1ae:	2b00      	cmp	r3, #0
9001b1b0:	d051      	beq.n	9001b256 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2bc>
9001b1b2:	881a      	ldrh	r2, [r3, #0]
9001b1b4:	a80d      	add	r0, sp, #52	; 0x34
9001b1b6:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
9001b1ba:	462c      	mov	r4, r5
9001b1bc:	9005      	str	r0, [sp, #20]
9001b1be:	f89d 002d 	ldrb.w	r0, [sp, #45]	; 0x2d
9001b1c2:	9004      	str	r0, [sp, #16]
9001b1c4:	980e      	ldr	r0, [sp, #56]	; 0x38
9001b1c6:	9003      	str	r0, [sp, #12]
9001b1c8:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
9001b1cc:	9002      	str	r0, [sp, #8]
9001b1ce:	980f      	ldr	r0, [sp, #60]	; 0x3c
9001b1d0:	9001      	str	r0, [sp, #4]
9001b1d2:	f89d 002f 	ldrb.w	r0, [sp, #47]	; 0x2f
9001b1d6:	e9cd 8706 	strd	r8, r7, [sp, #24]
9001b1da:	9000      	str	r0, [sp, #0]
9001b1dc:	a810      	add	r0, sp, #64	; 0x40
9001b1de:	f7ff fd49 	bl	9001ac74 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt>
9001b1e2:	e7b7      	b.n	9001b154 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ba>
9001b1e4:	1d25      	adds	r5, r4, #4
9001b1e6:	6823      	ldr	r3, [r4, #0]
9001b1e8:	9310      	str	r3, [sp, #64]	; 0x40
9001b1ea:	e7dd      	b.n	9001b1a8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
9001b1ec:	9a0d      	ldr	r2, [sp, #52]	; 0x34
9001b1ee:	230a      	movs	r3, #10
9001b1f0:	4649      	mov	r1, r9
9001b1f2:	6820      	ldr	r0, [r4, #0]
9001b1f4:	eba8 0202 	sub.w	r2, r8, r2
9001b1f8:	1d25      	adds	r5, r4, #4
9001b1fa:	b292      	uxth	r2, r2
9001b1fc:	f7ff fd08 	bl	9001ac10 <_ZN8touchgfx7Unicode4itoaElPtti>
9001b200:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
9001b204:	2b2d      	cmp	r3, #45	; 0x2d
9001b206:	d1cf      	bne.n	9001b1a8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
9001b208:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
9001b20c:	9b10      	ldr	r3, [sp, #64]	; 0x40
9001b20e:	3302      	adds	r3, #2
9001b210:	e7ea      	b.n	9001b1e8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x24e>
9001b212:	9a0d      	ldr	r2, [sp, #52]	; 0x34
9001b214:	1d25      	adds	r5, r4, #4
9001b216:	230a      	movs	r3, #10
9001b218:	eba8 0202 	sub.w	r2, r8, r2
9001b21c:	b292      	uxth	r2, r2
9001b21e:	4649      	mov	r1, r9
9001b220:	6820      	ldr	r0, [r4, #0]
9001b222:	f7ff fcd7 	bl	9001abd4 <_ZN8touchgfx7Unicode4utoaEmPtti.part.2>
9001b226:	e7bf      	b.n	9001b1a8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
9001b228:	9a0d      	ldr	r2, [sp, #52]	; 0x34
9001b22a:	2310      	movs	r3, #16
9001b22c:	4649      	mov	r1, r9
9001b22e:	6820      	ldr	r0, [r4, #0]
9001b230:	eba8 0202 	sub.w	r2, r8, r2
9001b234:	1d25      	adds	r5, r4, #4
9001b236:	b292      	uxth	r2, r2
9001b238:	f7ff fccc 	bl	9001abd4 <_ZN8touchgfx7Unicode4utoaEmPtti.part.2>
9001b23c:	f10d 0242 	add.w	r2, sp, #66	; 0x42
9001b240:	f832 3f02 	ldrh.w	r3, [r2, #2]!
9001b244:	2b00      	cmp	r3, #0
9001b246:	d0af      	beq.n	9001b1a8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
9001b248:	f1a3 0161 	sub.w	r1, r3, #97	; 0x61
9001b24c:	2919      	cmp	r1, #25
9001b24e:	d8f7      	bhi.n	9001b240 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2a6>
9001b250:	3b20      	subs	r3, #32
9001b252:	8013      	strh	r3, [r2, #0]
9001b254:	e7f4      	b.n	9001b240 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2a6>
9001b256:	9a08      	ldr	r2, [sp, #32]
9001b258:	2a00      	cmp	r2, #0
9001b25a:	d0ab      	beq.n	9001b1b4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x21a>
9001b25c:	7812      	ldrb	r2, [r2, #0]
9001b25e:	e7a9      	b.n	9001b1b4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x21a>
9001b260:	2d00      	cmp	r5, #0
9001b262:	f43f af48 	beq.w	9001b0f6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x15c>
9001b266:	782d      	ldrb	r5, [r5, #0]
9001b268:	e745      	b.n	9001b0f6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x15c>

9001b26a <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>:
9001b26a:	b507      	push	{r0, r1, r2, lr}
9001b26c:	9300      	str	r3, [sp, #0]
9001b26e:	4613      	mov	r3, r2
9001b270:	2200      	movs	r2, #0
9001b272:	f7ff fe92 	bl	9001af9a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list>
9001b276:	b003      	add	sp, #12
9001b278:	f85d fb04 	ldr.w	pc, [sp], #4

9001b27c <_ZN8touchgfx7Unicode8snprintfEPttPKcz>:
9001b27c:	b40c      	push	{r2, r3}
9001b27e:	b507      	push	{r0, r1, r2, lr}
9001b280:	ab04      	add	r3, sp, #16
9001b282:	f853 2b04 	ldr.w	r2, [r3], #4
9001b286:	9301      	str	r3, [sp, #4]
9001b288:	f7ff ffef 	bl	9001b26a <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>
9001b28c:	b003      	add	sp, #12
9001b28e:	f85d eb04 	ldr.w	lr, [sp], #4
9001b292:	b002      	add	sp, #8
9001b294:	4770      	bx	lr
	...

9001b298 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>:
9001b298:	4b01      	ldr	r3, [pc, #4]	; (9001b2a0 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE+0x8>)
9001b29a:	6018      	str	r0, [r3, #0]
9001b29c:	4770      	bx	lr
9001b29e:	bf00      	nop
9001b2a0:	24028254 	.word	0x24028254

9001b2a4 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>:
9001b2a4:	4b06      	ldr	r3, [pc, #24]	; (9001b2c0 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x1c>)
9001b2a6:	881a      	ldrh	r2, [r3, #0]
9001b2a8:	4282      	cmp	r2, r0
9001b2aa:	d807      	bhi.n	9001b2bc <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x18>
9001b2ac:	4b05      	ldr	r3, [pc, #20]	; (9001b2c4 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x20>)
9001b2ae:	881b      	ldrh	r3, [r3, #0]
9001b2b0:	4413      	add	r3, r2
9001b2b2:	4298      	cmp	r0, r3
9001b2b4:	bfac      	ite	ge
9001b2b6:	2000      	movge	r0, #0
9001b2b8:	2001      	movlt	r0, #1
9001b2ba:	4770      	bx	lr
9001b2bc:	2000      	movs	r0, #0
9001b2be:	4770      	bx	lr
9001b2c0:	24028274 	.word	0x24028274
9001b2c4:	24028278 	.word	0x24028278

9001b2c8 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>:
9001b2c8:	b508      	push	{r3, lr}
9001b2ca:	4601      	mov	r1, r0
9001b2cc:	f7ff ffea 	bl	9001b2a4 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
9001b2d0:	b118      	cbz	r0, 9001b2da <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x12>
9001b2d2:	4b02      	ldr	r3, [pc, #8]	; (9001b2dc <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x14>)
9001b2d4:	681b      	ldr	r3, [r3, #0]
9001b2d6:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
9001b2da:	bd08      	pop	{r3, pc}
9001b2dc:	24028258 	.word	0x24028258

9001b2e0 <_ZN8touchgfx6Bitmap10clearCacheEv>:
9001b2e0:	b5f0      	push	{r4, r5, r6, r7, lr}
9001b2e2:	4c24      	ldr	r4, [pc, #144]	; (9001b374 <_ZN8touchgfx6Bitmap10clearCacheEv+0x94>)
9001b2e4:	6823      	ldr	r3, [r4, #0]
9001b2e6:	2b00      	cmp	r3, #0
9001b2e8:	d042      	beq.n	9001b370 <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
9001b2ea:	4a23      	ldr	r2, [pc, #140]	; (9001b378 <_ZN8touchgfx6Bitmap10clearCacheEv+0x98>)
9001b2ec:	4d23      	ldr	r5, [pc, #140]	; (9001b37c <_ZN8touchgfx6Bitmap10clearCacheEv+0x9c>)
9001b2ee:	8811      	ldrh	r1, [r2, #0]
9001b2f0:	f8b5 c000 	ldrh.w	ip, [r5]
9001b2f4:	4822      	ldr	r0, [pc, #136]	; (9001b380 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa0>)
9001b2f6:	4461      	add	r1, ip
9001b2f8:	1c4a      	adds	r2, r1, #1
9001b2fa:	008f      	lsls	r7, r1, #2
9001b2fc:	f022 0201 	bic.w	r2, r2, #1
9001b300:	19de      	adds	r6, r3, r7
9001b302:	0412      	lsls	r2, r2, #16
9001b304:	6006      	str	r6, [r0, #0]
9001b306:	4e1f      	ldr	r6, [pc, #124]	; (9001b384 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa4>)
9001b308:	0c12      	lsrs	r2, r2, #16
9001b30a:	eb07 0742 	add.w	r7, r7, r2, lsl #1
9001b30e:	19da      	adds	r2, r3, r7
9001b310:	6032      	str	r2, [r6, #0]
9001b312:	220e      	movs	r2, #14
9001b314:	fb02 f20c 	mul.w	r2, r2, ip
9001b318:	3203      	adds	r2, #3
9001b31a:	f022 0203 	bic.w	r2, r2, #3
9001b31e:	443a      	add	r2, r7
9001b320:	4f19      	ldr	r7, [pc, #100]	; (9001b388 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa8>)
9001b322:	4413      	add	r3, r2
9001b324:	603b      	str	r3, [r7, #0]
9001b326:	2300      	movs	r3, #0
9001b328:	4f18      	ldr	r7, [pc, #96]	; (9001b38c <_ZN8touchgfx6Bitmap10clearCacheEv+0xac>)
9001b32a:	469c      	mov	ip, r3
9001b32c:	803b      	strh	r3, [r7, #0]
9001b32e:	4f18      	ldr	r7, [pc, #96]	; (9001b390 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb0>)
9001b330:	683f      	ldr	r7, [r7, #0]
9001b332:	1aba      	subs	r2, r7, r2
9001b334:	4f17      	ldr	r7, [pc, #92]	; (9001b394 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb4>)
9001b336:	603a      	str	r2, [r7, #0]
9001b338:	f64f 77ff 	movw	r7, #65535	; 0xffff
9001b33c:	4a16      	ldr	r2, [pc, #88]	; (9001b398 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb8>)
9001b33e:	8013      	strh	r3, [r2, #0]
9001b340:	428b      	cmp	r3, r1
9001b342:	d10d      	bne.n	9001b360 <_ZN8touchgfx6Bitmap10clearCacheEv+0x80>
9001b344:	882d      	ldrh	r5, [r5, #0]
9001b346:	2300      	movs	r3, #0
9001b348:	6830      	ldr	r0, [r6, #0]
9001b34a:	240e      	movs	r4, #14
9001b34c:	429d      	cmp	r5, r3
9001b34e:	d90f      	bls.n	9001b370 <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
9001b350:	fb04 0203 	mla	r2, r4, r3, r0
9001b354:	3301      	adds	r3, #1
9001b356:	7b11      	ldrb	r1, [r2, #12]
9001b358:	f36f 1145 	bfc	r1, #5, #1
9001b35c:	7311      	strb	r1, [r2, #12]
9001b35e:	e7f5      	b.n	9001b34c <_ZN8touchgfx6Bitmap10clearCacheEv+0x6c>
9001b360:	6822      	ldr	r2, [r4, #0]
9001b362:	f842 c023 	str.w	ip, [r2, r3, lsl #2]
9001b366:	6802      	ldr	r2, [r0, #0]
9001b368:	f822 7013 	strh.w	r7, [r2, r3, lsl #1]
9001b36c:	3301      	adds	r3, #1
9001b36e:	e7e7      	b.n	9001b340 <_ZN8touchgfx6Bitmap10clearCacheEv+0x60>
9001b370:	bdf0      	pop	{r4, r5, r6, r7, pc}
9001b372:	bf00      	nop
9001b374:	24028258 	.word	0x24028258
9001b378:	24028274 	.word	0x24028274
9001b37c:	24028278 	.word	0x24028278
9001b380:	2402826c 	.word	0x2402826c
9001b384:	2402825c 	.word	0x2402825c
9001b388:	24028264 	.word	0x24028264
9001b38c:	24028276 	.word	0x24028276
9001b390:	24028260 	.word	0x24028260
9001b394:	24028270 	.word	0x24028270
9001b398:	24028268 	.word	0x24028268

9001b39c <_ZN8touchgfx6Bitmap8setCacheEPtmm>:
9001b39c:	4b06      	ldr	r3, [pc, #24]	; (9001b3b8 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x1c>)
9001b39e:	681b      	ldr	r3, [r3, #0]
9001b3a0:	b943      	cbnz	r3, 9001b3b4 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
9001b3a2:	b139      	cbz	r1, 9001b3b4 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
9001b3a4:	4b05      	ldr	r3, [pc, #20]	; (9001b3bc <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x20>)
9001b3a6:	801a      	strh	r2, [r3, #0]
9001b3a8:	4b05      	ldr	r3, [pc, #20]	; (9001b3c0 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x24>)
9001b3aa:	6019      	str	r1, [r3, #0]
9001b3ac:	4b05      	ldr	r3, [pc, #20]	; (9001b3c4 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x28>)
9001b3ae:	6018      	str	r0, [r3, #0]
9001b3b0:	f7ff bf96 	b.w	9001b2e0 <_ZN8touchgfx6Bitmap10clearCacheEv>
9001b3b4:	4770      	bx	lr
9001b3b6:	bf00      	nop
9001b3b8:	24028264 	.word	0x24028264
9001b3bc:	24028278 	.word	0x24028278
9001b3c0:	24028260 	.word	0x24028260
9001b3c4:	24028258 	.word	0x24028258

9001b3c8 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>:
9001b3c8:	b470      	push	{r4, r5, r6}
9001b3ca:	4c07      	ldr	r4, [pc, #28]	; (9001b3e8 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x20>)
9001b3cc:	4605      	mov	r5, r0
9001b3ce:	4610      	mov	r0, r2
9001b3d0:	9a03      	ldr	r2, [sp, #12]
9001b3d2:	6826      	ldr	r6, [r4, #0]
9001b3d4:	b936      	cbnz	r6, 9001b3e4 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x1c>
9001b3d6:	6025      	str	r5, [r4, #0]
9001b3d8:	4c04      	ldr	r4, [pc, #16]	; (9001b3ec <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x24>)
9001b3da:	8021      	strh	r1, [r4, #0]
9001b3dc:	4619      	mov	r1, r3
9001b3de:	bc70      	pop	{r4, r5, r6}
9001b3e0:	f7ff bfdc 	b.w	9001b39c <_ZN8touchgfx6Bitmap8setCacheEPtmm>
9001b3e4:	bc70      	pop	{r4, r5, r6}
9001b3e6:	4770      	bx	lr
9001b3e8:	2402827c 	.word	0x2402827c
9001b3ec:	24028274 	.word	0x24028274

9001b3f0 <_ZNK8touchgfx6Bitmap8getWidthEv>:
9001b3f0:	4a12      	ldr	r2, [pc, #72]	; (9001b43c <_ZNK8touchgfx6Bitmap8getWidthEv+0x4c>)
9001b3f2:	8803      	ldrh	r3, [r0, #0]
9001b3f4:	8812      	ldrh	r2, [r2, #0]
9001b3f6:	4293      	cmp	r3, r2
9001b3f8:	d207      	bcs.n	9001b40a <_ZNK8touchgfx6Bitmap8getWidthEv+0x1a>
9001b3fa:	4a11      	ldr	r2, [pc, #68]	; (9001b440 <_ZNK8touchgfx6Bitmap8getWidthEv+0x50>)
9001b3fc:	2114      	movs	r1, #20
9001b3fe:	6812      	ldr	r2, [r2, #0]
9001b400:	fb01 2303 	mla	r3, r1, r3, r2
9001b404:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
9001b408:	4770      	bx	lr
9001b40a:	490e      	ldr	r1, [pc, #56]	; (9001b444 <_ZNK8touchgfx6Bitmap8getWidthEv+0x54>)
9001b40c:	8809      	ldrh	r1, [r1, #0]
9001b40e:	4411      	add	r1, r2
9001b410:	428b      	cmp	r3, r1
9001b412:	da04      	bge.n	9001b41e <_ZNK8touchgfx6Bitmap8getWidthEv+0x2e>
9001b414:	1a9b      	subs	r3, r3, r2
9001b416:	4a0c      	ldr	r2, [pc, #48]	; (9001b448 <_ZNK8touchgfx6Bitmap8getWidthEv+0x58>)
9001b418:	210e      	movs	r1, #14
9001b41a:	6812      	ldr	r2, [r2, #0]
9001b41c:	e7f0      	b.n	9001b400 <_ZNK8touchgfx6Bitmap8getWidthEv+0x10>
9001b41e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
9001b422:	4293      	cmp	r3, r2
9001b424:	d108      	bne.n	9001b438 <_ZNK8touchgfx6Bitmap8getWidthEv+0x48>
9001b426:	4b09      	ldr	r3, [pc, #36]	; (9001b44c <_ZNK8touchgfx6Bitmap8getWidthEv+0x5c>)
9001b428:	781b      	ldrb	r3, [r3, #0]
9001b42a:	b91b      	cbnz	r3, 9001b434 <_ZNK8touchgfx6Bitmap8getWidthEv+0x44>
9001b42c:	4b08      	ldr	r3, [pc, #32]	; (9001b450 <_ZNK8touchgfx6Bitmap8getWidthEv+0x60>)
9001b42e:	f9b3 0000 	ldrsh.w	r0, [r3]
9001b432:	4770      	bx	lr
9001b434:	4b07      	ldr	r3, [pc, #28]	; (9001b454 <_ZNK8touchgfx6Bitmap8getWidthEv+0x64>)
9001b436:	e7fa      	b.n	9001b42e <_ZNK8touchgfx6Bitmap8getWidthEv+0x3e>
9001b438:	2000      	movs	r0, #0
9001b43a:	4770      	bx	lr
9001b43c:	24028274 	.word	0x24028274
9001b440:	2402827c 	.word	0x2402827c
9001b444:	24028278 	.word	0x24028278
9001b448:	2402825c 	.word	0x2402825c
9001b44c:	240281e4 	.word	0x240281e4
9001b450:	240281e6 	.word	0x240281e6
9001b454:	240281e8 	.word	0x240281e8

9001b458 <_ZNK8touchgfx6Bitmap9getHeightEv>:
9001b458:	4a12      	ldr	r2, [pc, #72]	; (9001b4a4 <_ZNK8touchgfx6Bitmap9getHeightEv+0x4c>)
9001b45a:	8803      	ldrh	r3, [r0, #0]
9001b45c:	8812      	ldrh	r2, [r2, #0]
9001b45e:	4293      	cmp	r3, r2
9001b460:	d207      	bcs.n	9001b472 <_ZNK8touchgfx6Bitmap9getHeightEv+0x1a>
9001b462:	4a11      	ldr	r2, [pc, #68]	; (9001b4a8 <_ZNK8touchgfx6Bitmap9getHeightEv+0x50>)
9001b464:	2114      	movs	r1, #20
9001b466:	6812      	ldr	r2, [r2, #0]
9001b468:	fb01 2303 	mla	r3, r1, r3, r2
9001b46c:	f9b3 000a 	ldrsh.w	r0, [r3, #10]
9001b470:	4770      	bx	lr
9001b472:	490e      	ldr	r1, [pc, #56]	; (9001b4ac <_ZNK8touchgfx6Bitmap9getHeightEv+0x54>)
9001b474:	8809      	ldrh	r1, [r1, #0]
9001b476:	4411      	add	r1, r2
9001b478:	428b      	cmp	r3, r1
9001b47a:	da04      	bge.n	9001b486 <_ZNK8touchgfx6Bitmap9getHeightEv+0x2e>
9001b47c:	1a9b      	subs	r3, r3, r2
9001b47e:	4a0c      	ldr	r2, [pc, #48]	; (9001b4b0 <_ZNK8touchgfx6Bitmap9getHeightEv+0x58>)
9001b480:	210e      	movs	r1, #14
9001b482:	6812      	ldr	r2, [r2, #0]
9001b484:	e7f0      	b.n	9001b468 <_ZNK8touchgfx6Bitmap9getHeightEv+0x10>
9001b486:	f64f 72fe 	movw	r2, #65534	; 0xfffe
9001b48a:	4293      	cmp	r3, r2
9001b48c:	d108      	bne.n	9001b4a0 <_ZNK8touchgfx6Bitmap9getHeightEv+0x48>
9001b48e:	4b09      	ldr	r3, [pc, #36]	; (9001b4b4 <_ZNK8touchgfx6Bitmap9getHeightEv+0x5c>)
9001b490:	781b      	ldrb	r3, [r3, #0]
9001b492:	b91b      	cbnz	r3, 9001b49c <_ZNK8touchgfx6Bitmap9getHeightEv+0x44>
9001b494:	4b08      	ldr	r3, [pc, #32]	; (9001b4b8 <_ZNK8touchgfx6Bitmap9getHeightEv+0x60>)
9001b496:	f9b3 0000 	ldrsh.w	r0, [r3]
9001b49a:	4770      	bx	lr
9001b49c:	4b07      	ldr	r3, [pc, #28]	; (9001b4bc <_ZNK8touchgfx6Bitmap9getHeightEv+0x64>)
9001b49e:	e7fa      	b.n	9001b496 <_ZNK8touchgfx6Bitmap9getHeightEv+0x3e>
9001b4a0:	2000      	movs	r0, #0
9001b4a2:	4770      	bx	lr
9001b4a4:	24028274 	.word	0x24028274
9001b4a8:	2402827c 	.word	0x2402827c
9001b4ac:	24028278 	.word	0x24028278
9001b4b0:	2402825c 	.word	0x2402825c
9001b4b4:	240281e4 	.word	0x240281e4
9001b4b8:	240281e8 	.word	0x240281e8
9001b4bc:	240281e6 	.word	0x240281e6

9001b4c0 <_ZNK8touchgfx6Bitmap12getSolidRectEv>:
9001b4c0:	4a1f      	ldr	r2, [pc, #124]	; (9001b540 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x80>)
9001b4c2:	b510      	push	{r4, lr}
9001b4c4:	880b      	ldrh	r3, [r1, #0]
9001b4c6:	8812      	ldrh	r2, [r2, #0]
9001b4c8:	4293      	cmp	r3, r2
9001b4ca:	d213      	bcs.n	9001b4f4 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x34>
9001b4cc:	4a1d      	ldr	r2, [pc, #116]	; (9001b544 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x84>)
9001b4ce:	2114      	movs	r1, #20
9001b4d0:	6812      	ldr	r2, [r2, #0]
9001b4d2:	fb01 2303 	mla	r3, r1, r3, r2
9001b4d6:	f9b3 400c 	ldrsh.w	r4, [r3, #12]
9001b4da:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
9001b4de:	8a1a      	ldrh	r2, [r3, #16]
9001b4e0:	8a5b      	ldrh	r3, [r3, #18]
9001b4e2:	f3c2 020c 	ubfx	r2, r2, #0, #13
9001b4e6:	8004      	strh	r4, [r0, #0]
9001b4e8:	f3c3 030c 	ubfx	r3, r3, #0, #13
9001b4ec:	8041      	strh	r1, [r0, #2]
9001b4ee:	8082      	strh	r2, [r0, #4]
9001b4f0:	80c3      	strh	r3, [r0, #6]
9001b4f2:	e00e      	b.n	9001b512 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x52>
9001b4f4:	4914      	ldr	r1, [pc, #80]	; (9001b548 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x88>)
9001b4f6:	8809      	ldrh	r1, [r1, #0]
9001b4f8:	4411      	add	r1, r2
9001b4fa:	428b      	cmp	r3, r1
9001b4fc:	da0a      	bge.n	9001b514 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x54>
9001b4fe:	1a9b      	subs	r3, r3, r2
9001b500:	4a12      	ldr	r2, [pc, #72]	; (9001b54c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x8c>)
9001b502:	210e      	movs	r1, #14
9001b504:	6812      	ldr	r2, [r2, #0]
9001b506:	fb01 2303 	mla	r3, r1, r3, r2
9001b50a:	681a      	ldr	r2, [r3, #0]
9001b50c:	6002      	str	r2, [r0, #0]
9001b50e:	685a      	ldr	r2, [r3, #4]
9001b510:	6042      	str	r2, [r0, #4]
9001b512:	bd10      	pop	{r4, pc}
9001b514:	f64f 72fe 	movw	r2, #65534	; 0xfffe
9001b518:	4293      	cmp	r3, r2
9001b51a:	d10b      	bne.n	9001b534 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x74>
9001b51c:	4b0c      	ldr	r3, [pc, #48]	; (9001b550 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x90>)
9001b51e:	f9b3 1000 	ldrsh.w	r1, [r3]
9001b522:	4b0c      	ldr	r3, [pc, #48]	; (9001b554 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x94>)
9001b524:	8081      	strh	r1, [r0, #4]
9001b526:	f9b3 2000 	ldrsh.w	r2, [r3]
9001b52a:	2300      	movs	r3, #0
9001b52c:	80c2      	strh	r2, [r0, #6]
9001b52e:	8003      	strh	r3, [r0, #0]
9001b530:	8043      	strh	r3, [r0, #2]
9001b532:	e7ee      	b.n	9001b512 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x52>
9001b534:	2300      	movs	r3, #0
9001b536:	8003      	strh	r3, [r0, #0]
9001b538:	8043      	strh	r3, [r0, #2]
9001b53a:	8083      	strh	r3, [r0, #4]
9001b53c:	e7d8      	b.n	9001b4f0 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x30>
9001b53e:	bf00      	nop
9001b540:	24028274 	.word	0x24028274
9001b544:	2402827c 	.word	0x2402827c
9001b548:	24028278 	.word	0x24028278
9001b54c:	2402825c 	.word	0x2402825c
9001b550:	240281e0 	.word	0x240281e0
9001b554:	240281e2 	.word	0x240281e2

9001b558 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>:
9001b558:	4a17      	ldr	r2, [pc, #92]	; (9001b5b8 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x60>)
9001b55a:	8803      	ldrh	r3, [r0, #0]
9001b55c:	8812      	ldrh	r2, [r2, #0]
9001b55e:	4293      	cmp	r3, r2
9001b560:	d213      	bcs.n	9001b58a <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x32>
9001b562:	4a16      	ldr	r2, [pc, #88]	; (9001b5bc <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x64>)
9001b564:	2114      	movs	r1, #20
9001b566:	6812      	ldr	r2, [r2, #0]
9001b568:	fb01 2303 	mla	r3, r1, r3, r2
9001b56c:	8a1a      	ldrh	r2, [r3, #16]
9001b56e:	8919      	ldrh	r1, [r3, #8]
9001b570:	f3c2 020c 	ubfx	r2, r2, #0, #13
9001b574:	428a      	cmp	r2, r1
9001b576:	db1d      	blt.n	9001b5b4 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5c>
9001b578:	8a58      	ldrh	r0, [r3, #18]
9001b57a:	f3c0 000c 	ubfx	r0, r0, #0, #13
9001b57e:	895b      	ldrh	r3, [r3, #10]
9001b580:	4298      	cmp	r0, r3
9001b582:	bfac      	ite	ge
9001b584:	2000      	movge	r0, #0
9001b586:	2001      	movlt	r0, #1
9001b588:	4770      	bx	lr
9001b58a:	490d      	ldr	r1, [pc, #52]	; (9001b5c0 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x68>)
9001b58c:	8809      	ldrh	r1, [r1, #0]
9001b58e:	4411      	add	r1, r2
9001b590:	428b      	cmp	r3, r1
9001b592:	da0d      	bge.n	9001b5b0 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x58>
9001b594:	1a9b      	subs	r3, r3, r2
9001b596:	4a0b      	ldr	r2, [pc, #44]	; (9001b5c4 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x6c>)
9001b598:	210e      	movs	r1, #14
9001b59a:	6812      	ldr	r2, [r2, #0]
9001b59c:	fb01 2303 	mla	r3, r1, r3, r2
9001b5a0:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
9001b5a4:	891a      	ldrh	r2, [r3, #8]
9001b5a6:	4291      	cmp	r1, r2
9001b5a8:	db04      	blt.n	9001b5b4 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5c>
9001b5aa:	f9b3 0006 	ldrsh.w	r0, [r3, #6]
9001b5ae:	e7e6      	b.n	9001b57e <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x26>
9001b5b0:	2000      	movs	r0, #0
9001b5b2:	4770      	bx	lr
9001b5b4:	2001      	movs	r0, #1
9001b5b6:	4770      	bx	lr
9001b5b8:	24028274 	.word	0x24028274
9001b5bc:	2402827c 	.word	0x2402827c
9001b5c0:	24028278 	.word	0x24028278
9001b5c4:	2402825c 	.word	0x2402825c

9001b5c8 <_ZNK8touchgfx6Bitmap7getDataEv>:
9001b5c8:	4a12      	ldr	r2, [pc, #72]	; (9001b614 <_ZNK8touchgfx6Bitmap7getDataEv+0x4c>)
9001b5ca:	8803      	ldrh	r3, [r0, #0]
9001b5cc:	8811      	ldrh	r1, [r2, #0]
9001b5ce:	428b      	cmp	r3, r1
9001b5d0:	d20b      	bcs.n	9001b5ea <_ZNK8touchgfx6Bitmap7getDataEv+0x22>
9001b5d2:	4a11      	ldr	r2, [pc, #68]	; (9001b618 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
9001b5d4:	6812      	ldr	r2, [r2, #0]
9001b5d6:	b112      	cbz	r2, 9001b5de <_ZNK8touchgfx6Bitmap7getDataEv+0x16>
9001b5d8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
9001b5dc:	b9c0      	cbnz	r0, 9001b610 <_ZNK8touchgfx6Bitmap7getDataEv+0x48>
9001b5de:	4a0f      	ldr	r2, [pc, #60]	; (9001b61c <_ZNK8touchgfx6Bitmap7getDataEv+0x54>)
9001b5e0:	6811      	ldr	r1, [r2, #0]
9001b5e2:	2214      	movs	r2, #20
9001b5e4:	4353      	muls	r3, r2
9001b5e6:	58c8      	ldr	r0, [r1, r3]
9001b5e8:	4770      	bx	lr
9001b5ea:	4a0d      	ldr	r2, [pc, #52]	; (9001b620 <_ZNK8touchgfx6Bitmap7getDataEv+0x58>)
9001b5ec:	8812      	ldrh	r2, [r2, #0]
9001b5ee:	440a      	add	r2, r1
9001b5f0:	4293      	cmp	r3, r2
9001b5f2:	da04      	bge.n	9001b5fe <_ZNK8touchgfx6Bitmap7getDataEv+0x36>
9001b5f4:	4a08      	ldr	r2, [pc, #32]	; (9001b618 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
9001b5f6:	6812      	ldr	r2, [r2, #0]
9001b5f8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
9001b5fc:	4770      	bx	lr
9001b5fe:	f64f 72fe 	movw	r2, #65534	; 0xfffe
9001b602:	4293      	cmp	r3, r2
9001b604:	d103      	bne.n	9001b60e <_ZNK8touchgfx6Bitmap7getDataEv+0x46>
9001b606:	4b07      	ldr	r3, [pc, #28]	; (9001b624 <_ZNK8touchgfx6Bitmap7getDataEv+0x5c>)
9001b608:	681b      	ldr	r3, [r3, #0]
9001b60a:	6c58      	ldr	r0, [r3, #68]	; 0x44
9001b60c:	4770      	bx	lr
9001b60e:	2000      	movs	r0, #0
9001b610:	4770      	bx	lr
9001b612:	bf00      	nop
9001b614:	24028274 	.word	0x24028274
9001b618:	24028258 	.word	0x24028258
9001b61c:	2402827c 	.word	0x2402827c
9001b620:	24028278 	.word	0x24028278
9001b624:	240281ec 	.word	0x240281ec

9001b628 <_ZNK8touchgfx6Bitmap12getExtraDataEv>:
9001b628:	4b24      	ldr	r3, [pc, #144]	; (9001b6bc <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x94>)
9001b62a:	8802      	ldrh	r2, [r0, #0]
9001b62c:	8818      	ldrh	r0, [r3, #0]
9001b62e:	4282      	cmp	r2, r0
9001b630:	d221      	bcs.n	9001b676 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x4e>
9001b632:	4b23      	ldr	r3, [pc, #140]	; (9001b6c0 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>)
9001b634:	6819      	ldr	r1, [r3, #0]
9001b636:	2314      	movs	r3, #20
9001b638:	fb03 1302 	mla	r3, r3, r2, r1
9001b63c:	6858      	ldr	r0, [r3, #4]
9001b63e:	2800      	cmp	r0, #0
9001b640:	d03a      	beq.n	9001b6b8 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
9001b642:	4920      	ldr	r1, [pc, #128]	; (9001b6c4 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
9001b644:	6809      	ldr	r1, [r1, #0]
9001b646:	2900      	cmp	r1, #0
9001b648:	d036      	beq.n	9001b6b8 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
9001b64a:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
9001b64e:	2900      	cmp	r1, #0
9001b650:	d032      	beq.n	9001b6b8 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
9001b652:	891a      	ldrh	r2, [r3, #8]
9001b654:	8958      	ldrh	r0, [r3, #10]
9001b656:	4350      	muls	r0, r2
9001b658:	7c5a      	ldrb	r2, [r3, #17]
9001b65a:	7cdb      	ldrb	r3, [r3, #19]
9001b65c:	0952      	lsrs	r2, r2, #5
9001b65e:	f3c3 1342 	ubfx	r3, r3, #5, #3
9001b662:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
9001b666:	2b0b      	cmp	r3, #11
9001b668:	bf18      	it	ne
9001b66a:	0040      	lslne	r0, r0, #1
9001b66c:	3003      	adds	r0, #3
9001b66e:	f020 0003 	bic.w	r0, r0, #3
9001b672:	4408      	add	r0, r1
9001b674:	4770      	bx	lr
9001b676:	4b14      	ldr	r3, [pc, #80]	; (9001b6c8 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa0>)
9001b678:	881b      	ldrh	r3, [r3, #0]
9001b67a:	4403      	add	r3, r0
9001b67c:	429a      	cmp	r2, r3
9001b67e:	da1a      	bge.n	9001b6b6 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
9001b680:	4b12      	ldr	r3, [pc, #72]	; (9001b6cc <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa4>)
9001b682:	1a10      	subs	r0, r2, r0
9001b684:	210e      	movs	r1, #14
9001b686:	681b      	ldr	r3, [r3, #0]
9001b688:	fb01 3000 	mla	r0, r1, r0, r3
9001b68c:	7b03      	ldrb	r3, [r0, #12]
9001b68e:	f003 031f 	and.w	r3, r3, #31
9001b692:	2b0b      	cmp	r3, #11
9001b694:	d10b      	bne.n	9001b6ae <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x86>
9001b696:	8903      	ldrh	r3, [r0, #8]
9001b698:	8940      	ldrh	r0, [r0, #10]
9001b69a:	4358      	muls	r0, r3
9001b69c:	4b09      	ldr	r3, [pc, #36]	; (9001b6c4 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
9001b69e:	3003      	adds	r0, #3
9001b6a0:	6819      	ldr	r1, [r3, #0]
9001b6a2:	f020 0303 	bic.w	r3, r0, #3
9001b6a6:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
9001b6aa:	4418      	add	r0, r3
9001b6ac:	4770      	bx	lr
9001b6ae:	2b0d      	cmp	r3, #13
9001b6b0:	d101      	bne.n	9001b6b6 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
9001b6b2:	300d      	adds	r0, #13
9001b6b4:	4770      	bx	lr
9001b6b6:	2000      	movs	r0, #0
9001b6b8:	4770      	bx	lr
9001b6ba:	bf00      	nop
9001b6bc:	24028274 	.word	0x24028274
9001b6c0:	2402827c 	.word	0x2402827c
9001b6c4:	24028258 	.word	0x24028258
9001b6c8:	24028278 	.word	0x24028278
9001b6cc:	2402825c 	.word	0x2402825c

9001b6d0 <_ZNK8touchgfx6Bitmap9getFormatEv>:
9001b6d0:	4a17      	ldr	r2, [pc, #92]	; (9001b730 <_ZNK8touchgfx6Bitmap9getFormatEv+0x60>)
9001b6d2:	b510      	push	{r4, lr}
9001b6d4:	8803      	ldrh	r3, [r0, #0]
9001b6d6:	8812      	ldrh	r2, [r2, #0]
9001b6d8:	4293      	cmp	r3, r2
9001b6da:	d20c      	bcs.n	9001b6f6 <_ZNK8touchgfx6Bitmap9getFormatEv+0x26>
9001b6dc:	4a15      	ldr	r2, [pc, #84]	; (9001b734 <_ZNK8touchgfx6Bitmap9getFormatEv+0x64>)
9001b6de:	2114      	movs	r1, #20
9001b6e0:	6812      	ldr	r2, [r2, #0]
9001b6e2:	fb01 2303 	mla	r3, r1, r3, r2
9001b6e6:	7c58      	ldrb	r0, [r3, #17]
9001b6e8:	0942      	lsrs	r2, r0, #5
9001b6ea:	7cd8      	ldrb	r0, [r3, #19]
9001b6ec:	f3c0 1042 	ubfx	r0, r0, #5, #3
9001b6f0:	ea40 00c2 	orr.w	r0, r0, r2, lsl #3
9001b6f4:	bd10      	pop	{r4, pc}
9001b6f6:	4910      	ldr	r1, [pc, #64]	; (9001b738 <_ZNK8touchgfx6Bitmap9getFormatEv+0x68>)
9001b6f8:	8809      	ldrh	r1, [r1, #0]
9001b6fa:	4411      	add	r1, r2
9001b6fc:	428b      	cmp	r3, r1
9001b6fe:	da09      	bge.n	9001b714 <_ZNK8touchgfx6Bitmap9getFormatEv+0x44>
9001b700:	1a9b      	subs	r3, r3, r2
9001b702:	4a0e      	ldr	r2, [pc, #56]	; (9001b73c <_ZNK8touchgfx6Bitmap9getFormatEv+0x6c>)
9001b704:	210e      	movs	r1, #14
9001b706:	6812      	ldr	r2, [r2, #0]
9001b708:	fb01 2303 	mla	r3, r1, r3, r2
9001b70c:	7b18      	ldrb	r0, [r3, #12]
9001b70e:	f000 001f 	and.w	r0, r0, #31
9001b712:	e7ef      	b.n	9001b6f4 <_ZNK8touchgfx6Bitmap9getFormatEv+0x24>
9001b714:	f64f 72fe 	movw	r2, #65534	; 0xfffe
9001b718:	4293      	cmp	r3, r2
9001b71a:	d106      	bne.n	9001b72a <_ZNK8touchgfx6Bitmap9getFormatEv+0x5a>
9001b71c:	f7f7 fe28 	bl	90013370 <_ZN8touchgfx3HAL3lcdEv>
9001b720:	6803      	ldr	r3, [r0, #0]
9001b722:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
9001b726:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9001b728:	4718      	bx	r3
9001b72a:	2000      	movs	r0, #0
9001b72c:	e7e2      	b.n	9001b6f4 <_ZNK8touchgfx6Bitmap9getFormatEv+0x24>
9001b72e:	bf00      	nop
9001b730:	24028274 	.word	0x24028274
9001b734:	2402827c 	.word	0x2402827c
9001b738:	24028278 	.word	0x24028278
9001b73c:	2402825c 	.word	0x2402825c

9001b740 <_ZNK8touchgfx8LCD16bpp8bitDepthEv>:
9001b740:	2010      	movs	r0, #16
9001b742:	4770      	bx	lr

9001b744 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv>:
9001b744:	4b02      	ldr	r3, [pc, #8]	; (9001b750 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0xc>)
9001b746:	8818      	ldrh	r0, [r3, #0]
9001b748:	0040      	lsls	r0, r0, #1
9001b74a:	b280      	uxth	r0, r0
9001b74c:	4770      	bx	lr
9001b74e:	bf00      	nop
9001b750:	240281e6 	.word	0x240281e6

9001b754 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
9001b754:	2bff      	cmp	r3, #255	; 0xff
9001b756:	d050      	beq.n	9001b7fa <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa6>
9001b758:	2a0b      	cmp	r2, #11
9001b75a:	d04a      	beq.n	9001b7f2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
9001b75c:	d80e      	bhi.n	9001b77c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x28>
9001b75e:	2a03      	cmp	r2, #3
9001b760:	d03f      	beq.n	9001b7e2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8e>
9001b762:	d804      	bhi.n	9001b76e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
9001b764:	2a01      	cmp	r2, #1
9001b766:	d03e      	beq.n	9001b7e6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x92>
9001b768:	d93f      	bls.n	9001b7ea <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x96>
9001b76a:	6b80      	ldr	r0, [r0, #56]	; 0x38
9001b76c:	4770      	bx	lr
9001b76e:	2a09      	cmp	r2, #9
9001b770:	d03f      	beq.n	9001b7f2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
9001b772:	d83c      	bhi.n	9001b7ee <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
9001b774:	2a08      	cmp	r2, #8
9001b776:	d03a      	beq.n	9001b7ee <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
9001b778:	2000      	movs	r0, #0
9001b77a:	4770      	bx	lr
9001b77c:	2a2f      	cmp	r2, #47	; 0x2f
9001b77e:	d024      	beq.n	9001b7ca <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x76>
9001b780:	d80d      	bhi.n	9001b79e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x4a>
9001b782:	2a2d      	cmp	r2, #45	; 0x2d
9001b784:	d014      	beq.n	9001b7b0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x5c>
9001b786:	d826      	bhi.n	9001b7d6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x82>
9001b788:	2a2c      	cmp	r2, #44	; 0x2c
9001b78a:	d1f5      	bne.n	9001b778 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
9001b78c:	684b      	ldr	r3, [r1, #4]
9001b78e:	781b      	ldrb	r3, [r3, #0]
9001b790:	2b01      	cmp	r3, #1
9001b792:	d018      	beq.n	9001b7c6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x72>
9001b794:	d323      	bcc.n	9001b7de <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8a>
9001b796:	2b02      	cmp	r3, #2
9001b798:	d1ee      	bne.n	9001b778 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
9001b79a:	6880      	ldr	r0, [r0, #8]
9001b79c:	4770      	bx	lr
9001b79e:	2a31      	cmp	r2, #49	; 0x31
9001b7a0:	d004      	beq.n	9001b7ac <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x58>
9001b7a2:	d328      	bcc.n	9001b7f6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
9001b7a4:	2a32      	cmp	r2, #50	; 0x32
9001b7a6:	d026      	beq.n	9001b7f6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
9001b7a8:	2a33      	cmp	r2, #51	; 0x33
9001b7aa:	d1e5      	bne.n	9001b778 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
9001b7ac:	6f00      	ldr	r0, [r0, #112]	; 0x70
9001b7ae:	4770      	bx	lr
9001b7b0:	684b      	ldr	r3, [r1, #4]
9001b7b2:	781b      	ldrb	r3, [r3, #0]
9001b7b4:	2b01      	cmp	r3, #1
9001b7b6:	d004      	beq.n	9001b7c2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
9001b7b8:	d30b      	bcc.n	9001b7d2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
9001b7ba:	2b02      	cmp	r3, #2
9001b7bc:	d1dc      	bne.n	9001b778 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
9001b7be:	6900      	ldr	r0, [r0, #16]
9001b7c0:	4770      	bx	lr
9001b7c2:	6a00      	ldr	r0, [r0, #32]
9001b7c4:	4770      	bx	lr
9001b7c6:	6980      	ldr	r0, [r0, #24]
9001b7c8:	4770      	bx	lr
9001b7ca:	684b      	ldr	r3, [r1, #4]
9001b7cc:	781b      	ldrb	r3, [r3, #0]
9001b7ce:	2b00      	cmp	r3, #0
9001b7d0:	d1d2      	bne.n	9001b778 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
9001b7d2:	6b00      	ldr	r0, [r0, #48]	; 0x30
9001b7d4:	4770      	bx	lr
9001b7d6:	684b      	ldr	r3, [r1, #4]
9001b7d8:	781b      	ldrb	r3, [r3, #0]
9001b7da:	2b00      	cmp	r3, #0
9001b7dc:	d1cc      	bne.n	9001b778 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
9001b7de:	6a80      	ldr	r0, [r0, #40]	; 0x28
9001b7e0:	4770      	bx	lr
9001b7e2:	6c80      	ldr	r0, [r0, #72]	; 0x48
9001b7e4:	4770      	bx	lr
9001b7e6:	6d00      	ldr	r0, [r0, #80]	; 0x50
9001b7e8:	4770      	bx	lr
9001b7ea:	6c00      	ldr	r0, [r0, #64]	; 0x40
9001b7ec:	4770      	bx	lr
9001b7ee:	6d80      	ldr	r0, [r0, #88]	; 0x58
9001b7f0:	4770      	bx	lr
9001b7f2:	6e00      	ldr	r0, [r0, #96]	; 0x60
9001b7f4:	4770      	bx	lr
9001b7f6:	6e80      	ldr	r0, [r0, #104]	; 0x68
9001b7f8:	4770      	bx	lr
9001b7fa:	2a0b      	cmp	r2, #11
9001b7fc:	d049      	beq.n	9001b892 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
9001b7fe:	d80e      	bhi.n	9001b81e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xca>
9001b800:	2a03      	cmp	r2, #3
9001b802:	d040      	beq.n	9001b886 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x132>
9001b804:	d804      	bhi.n	9001b810 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xbc>
9001b806:	2a01      	cmp	r2, #1
9001b808:	d03f      	beq.n	9001b88a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x136>
9001b80a:	d940      	bls.n	9001b88e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13a>
9001b80c:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
9001b80e:	4770      	bx	lr
9001b810:	2a09      	cmp	r2, #9
9001b812:	d03e      	beq.n	9001b892 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
9001b814:	d801      	bhi.n	9001b81a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc6>
9001b816:	2a08      	cmp	r2, #8
9001b818:	d1ae      	bne.n	9001b778 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
9001b81a:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
9001b81c:	4770      	bx	lr
9001b81e:	2a2f      	cmp	r2, #47	; 0x2f
9001b820:	d024      	beq.n	9001b86c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x118>
9001b822:	d80d      	bhi.n	9001b840 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xec>
9001b824:	2a2d      	cmp	r2, #45	; 0x2d
9001b826:	d014      	beq.n	9001b852 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xfe>
9001b828:	d826      	bhi.n	9001b878 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x124>
9001b82a:	2a2c      	cmp	r2, #44	; 0x2c
9001b82c:	d1a4      	bne.n	9001b778 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
9001b82e:	684b      	ldr	r3, [r1, #4]
9001b830:	781b      	ldrb	r3, [r3, #0]
9001b832:	2b01      	cmp	r3, #1
9001b834:	d018      	beq.n	9001b868 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x114>
9001b836:	d324      	bcc.n	9001b882 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x12e>
9001b838:	2b02      	cmp	r3, #2
9001b83a:	d19d      	bne.n	9001b778 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
9001b83c:	68c0      	ldr	r0, [r0, #12]
9001b83e:	4770      	bx	lr
9001b840:	2a31      	cmp	r2, #49	; 0x31
9001b842:	d004      	beq.n	9001b84e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xfa>
9001b844:	d327      	bcc.n	9001b896 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x142>
9001b846:	2a32      	cmp	r2, #50	; 0x32
9001b848:	d025      	beq.n	9001b896 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x142>
9001b84a:	2a33      	cmp	r2, #51	; 0x33
9001b84c:	d194      	bne.n	9001b778 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
9001b84e:	6f40      	ldr	r0, [r0, #116]	; 0x74
9001b850:	4770      	bx	lr
9001b852:	684b      	ldr	r3, [r1, #4]
9001b854:	781b      	ldrb	r3, [r3, #0]
9001b856:	2b01      	cmp	r3, #1
9001b858:	d004      	beq.n	9001b864 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x110>
9001b85a:	d30b      	bcc.n	9001b874 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x120>
9001b85c:	2b02      	cmp	r3, #2
9001b85e:	d18b      	bne.n	9001b778 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
9001b860:	6940      	ldr	r0, [r0, #20]
9001b862:	4770      	bx	lr
9001b864:	6a40      	ldr	r0, [r0, #36]	; 0x24
9001b866:	4770      	bx	lr
9001b868:	69c0      	ldr	r0, [r0, #28]
9001b86a:	4770      	bx	lr
9001b86c:	684b      	ldr	r3, [r1, #4]
9001b86e:	781b      	ldrb	r3, [r3, #0]
9001b870:	2b00      	cmp	r3, #0
9001b872:	d181      	bne.n	9001b778 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
9001b874:	6b40      	ldr	r0, [r0, #52]	; 0x34
9001b876:	4770      	bx	lr
9001b878:	684b      	ldr	r3, [r1, #4]
9001b87a:	781b      	ldrb	r3, [r3, #0]
9001b87c:	2b00      	cmp	r3, #0
9001b87e:	f47f af7b 	bne.w	9001b778 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
9001b882:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
9001b884:	4770      	bx	lr
9001b886:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
9001b888:	4770      	bx	lr
9001b88a:	6d40      	ldr	r0, [r0, #84]	; 0x54
9001b88c:	4770      	bx	lr
9001b88e:	6c40      	ldr	r0, [r0, #68]	; 0x44
9001b890:	4770      	bx	lr
9001b892:	6e40      	ldr	r0, [r0, #100]	; 0x64
9001b894:	4770      	bx	lr
9001b896:	6ec0      	ldr	r0, [r0, #108]	; 0x6c
9001b898:	4770      	bx	lr

9001b89a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
9001b89a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001b89e:	b087      	sub	sp, #28
9001b8a0:	9815      	ldr	r0, [sp, #84]	; 0x54
9001b8a2:	9205      	str	r2, [sp, #20]
9001b8a4:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
9001b8a8:	9101      	str	r1, [sp, #4]
9001b8aa:	9202      	str	r2, [sp, #8]
9001b8ac:	6841      	ldr	r1, [r0, #4]
9001b8ae:	f8dd e060 	ldr.w	lr, [sp, #96]	; 0x60
9001b8b2:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
9001b8b6:	fb01 2404 	mla	r4, r1, r4, r2
9001b8ba:	6802      	ldr	r2, [r0, #0]
9001b8bc:	eb02 0444 	add.w	r4, r2, r4, lsl #1
9001b8c0:	f8de 2000 	ldr.w	r2, [lr]
9001b8c4:	9203      	str	r2, [sp, #12]
9001b8c6:	f8de 2004 	ldr.w	r2, [lr, #4]
9001b8ca:	3204      	adds	r2, #4
9001b8cc:	9204      	str	r2, [sp, #16]
9001b8ce:	9a02      	ldr	r2, [sp, #8]
9001b8d0:	43d6      	mvns	r6, r2
9001b8d2:	b2f6      	uxtb	r6, r6
9001b8d4:	9a01      	ldr	r2, [sp, #4]
9001b8d6:	2a00      	cmp	r2, #0
9001b8d8:	dc03      	bgt.n	9001b8e2 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
9001b8da:	9a05      	ldr	r2, [sp, #20]
9001b8dc:	2a00      	cmp	r2, #0
9001b8de:	f340 8129 	ble.w	9001bb34 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
9001b8e2:	9a11      	ldr	r2, [sp, #68]	; 0x44
9001b8e4:	f9be c008 	ldrsh.w	ip, [lr, #8]
9001b8e8:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
9001b8ec:	9a12      	ldr	r2, [sp, #72]	; 0x48
9001b8ee:	f9be 700c 	ldrsh.w	r7, [lr, #12]
9001b8f2:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
9001b8f6:	2b00      	cmp	r3, #0
9001b8f8:	dd0e      	ble.n	9001b918 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
9001b8fa:	1408      	asrs	r0, r1, #16
9001b8fc:	d405      	bmi.n	9001b90a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
9001b8fe:	4560      	cmp	r0, ip
9001b900:	da03      	bge.n	9001b90a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
9001b902:	1410      	asrs	r0, r2, #16
9001b904:	d401      	bmi.n	9001b90a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
9001b906:	42b8      	cmp	r0, r7
9001b908:	db07      	blt.n	9001b91a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
9001b90a:	9813      	ldr	r0, [sp, #76]	; 0x4c
9001b90c:	3b01      	subs	r3, #1
9001b90e:	3402      	adds	r4, #2
9001b910:	4401      	add	r1, r0
9001b912:	9814      	ldr	r0, [sp, #80]	; 0x50
9001b914:	4402      	add	r2, r0
9001b916:	e7ee      	b.n	9001b8f6 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
9001b918:	d071      	beq.n	9001b9fe <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
9001b91a:	1e58      	subs	r0, r3, #1
9001b91c:	9d13      	ldr	r5, [sp, #76]	; 0x4c
9001b91e:	fb05 1500 	mla	r5, r5, r0, r1
9001b922:	142d      	asrs	r5, r5, #16
9001b924:	d45f      	bmi.n	9001b9e6 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
9001b926:	4565      	cmp	r5, ip
9001b928:	da5d      	bge.n	9001b9e6 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
9001b92a:	9d14      	ldr	r5, [sp, #80]	; 0x50
9001b92c:	fb05 2000 	mla	r0, r5, r0, r2
9001b930:	1400      	asrs	r0, r0, #16
9001b932:	d458      	bmi.n	9001b9e6 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
9001b934:	42b8      	cmp	r0, r7
9001b936:	da56      	bge.n	9001b9e6 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
9001b938:	4699      	mov	r9, r3
9001b93a:	46a2      	mov	sl, r4
9001b93c:	f8bd b008 	ldrh.w	fp, [sp, #8]
9001b940:	f1b9 0f00 	cmp.w	r9, #0
9001b944:	dd57      	ble.n	9001b9f6 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15c>
9001b946:	ea4f 4c22 	mov.w	ip, r2, asr #16
9001b94a:	f9be 7008 	ldrsh.w	r7, [lr, #8]
9001b94e:	9803      	ldr	r0, [sp, #12]
9001b950:	140d      	asrs	r5, r1, #16
9001b952:	f109 39ff 	add.w	r9, r9, #4294967295
9001b956:	fb07 000c 	mla	r0, r7, ip, r0
9001b95a:	5d40      	ldrb	r0, [r0, r5]
9001b95c:	9d04      	ldr	r5, [sp, #16]
9001b95e:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
9001b962:	f8ba 5000 	ldrh.w	r5, [sl]
9001b966:	ea4f 2c20 	mov.w	ip, r0, asr #8
9001b96a:	122f      	asrs	r7, r5, #8
9001b96c:	ea4f 08e5 	mov.w	r8, r5, asr #3
9001b970:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
9001b974:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
9001b978:	00ed      	lsls	r5, r5, #3
9001b97a:	f008 08fc 	and.w	r8, r8, #252	; 0xfc
9001b97e:	fb17 f706 	smulbb	r7, r7, r6
9001b982:	b2ed      	uxtb	r5, r5
9001b984:	fb18 f806 	smulbb	r8, r8, r6
9001b988:	fb0c 7c0b 	mla	ip, ip, fp, r7
9001b98c:	10c7      	asrs	r7, r0, #3
9001b98e:	fb15 f506 	smulbb	r5, r5, r6
9001b992:	00c0      	lsls	r0, r0, #3
9001b994:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
9001b998:	fa1f fc8c 	uxth.w	ip, ip
9001b99c:	b2c0      	uxtb	r0, r0
9001b99e:	fb07 870b 	mla	r7, r7, fp, r8
9001b9a2:	fb00 500b 	mla	r0, r0, fp, r5
9001b9a6:	f10c 0501 	add.w	r5, ip, #1
9001b9aa:	b2bf      	uxth	r7, r7
9001b9ac:	b280      	uxth	r0, r0
9001b9ae:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
9001b9b2:	f107 0801 	add.w	r8, r7, #1
9001b9b6:	1c45      	adds	r5, r0, #1
9001b9b8:	eb08 2817 	add.w	r8, r8, r7, lsr #8
9001b9bc:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
9001b9c0:	eb05 2510 	add.w	r5, r5, r0, lsr #8
9001b9c4:	9813      	ldr	r0, [sp, #76]	; 0x4c
9001b9c6:	ea4f 1858 	mov.w	r8, r8, lsr #5
9001b9ca:	f3c5 25c4 	ubfx	r5, r5, #11, #5
9001b9ce:	4401      	add	r1, r0
9001b9d0:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
9001b9d4:	9814      	ldr	r0, [sp, #80]	; 0x50
9001b9d6:	ea45 0c0c 	orr.w	ip, r5, ip
9001b9da:	4402      	add	r2, r0
9001b9dc:	ea4c 0c08 	orr.w	ip, ip, r8
9001b9e0:	f82a cb02 	strh.w	ip, [sl], #2
9001b9e4:	e7ac      	b.n	9001b940 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
9001b9e6:	f04f 0800 	mov.w	r8, #0
9001b9ea:	f8bd a008 	ldrh.w	sl, [sp, #8]
9001b9ee:	eb03 0008 	add.w	r0, r3, r8
9001b9f2:	2800      	cmp	r0, #0
9001b9f4:	dc41      	bgt.n	9001ba7a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
9001b9f6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
9001b9fa:	eb04 0443 	add.w	r4, r4, r3, lsl #1
9001b9fe:	9b01      	ldr	r3, [sp, #4]
9001ba00:	2b00      	cmp	r3, #0
9001ba02:	f340 8097 	ble.w	9001bb34 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
9001ba06:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
9001ba0a:	9b10      	ldr	r3, [sp, #64]	; 0x40
9001ba0c:	ee30 0a04 	vadd.f32	s0, s0, s8
9001ba10:	ee70 0aa4 	vadd.f32	s1, s1, s9
9001ba14:	eef0 6a62 	vmov.f32	s13, s5
9001ba18:	eec7 7a00 	vdiv.f32	s15, s14, s0
9001ba1c:	ee31 1a05 	vadd.f32	s2, s2, s10
9001ba20:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
9001ba24:	edcd 6a11 	vstr	s13, [sp, #68]	; 0x44
9001ba28:	eef0 6a43 	vmov.f32	s13, s6
9001ba2c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
9001ba30:	edcd 6a12 	vstr	s13, [sp, #72]	; 0x48
9001ba34:	ee20 7aa7 	vmul.f32	s14, s1, s15
9001ba38:	ee61 7a27 	vmul.f32	s15, s2, s15
9001ba3c:	ee77 2a62 	vsub.f32	s5, s14, s5
9001ba40:	ee37 3ac3 	vsub.f32	s6, s15, s6
9001ba44:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
9001ba48:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
9001ba4c:	ee12 2a90 	vmov	r2, s5
9001ba50:	eef0 2a47 	vmov.f32	s5, s14
9001ba54:	fb92 f3f3 	sdiv	r3, r2, r3
9001ba58:	ee13 2a10 	vmov	r2, s6
9001ba5c:	9313      	str	r3, [sp, #76]	; 0x4c
9001ba5e:	9b10      	ldr	r3, [sp, #64]	; 0x40
9001ba60:	eeb0 3a67 	vmov.f32	s6, s15
9001ba64:	fb92 f3f3 	sdiv	r3, r2, r3
9001ba68:	9314      	str	r3, [sp, #80]	; 0x50
9001ba6a:	9b01      	ldr	r3, [sp, #4]
9001ba6c:	9a05      	ldr	r2, [sp, #20]
9001ba6e:	3b01      	subs	r3, #1
9001ba70:	9301      	str	r3, [sp, #4]
9001ba72:	9b10      	ldr	r3, [sp, #64]	; 0x40
9001ba74:	bf08      	it	eq
9001ba76:	4613      	moveq	r3, r2
9001ba78:	e72c      	b.n	9001b8d4 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
9001ba7a:	140f      	asrs	r7, r1, #16
9001ba7c:	d453      	bmi.n	9001bb26 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
9001ba7e:	f8de 5008 	ldr.w	r5, [lr, #8]
9001ba82:	42bd      	cmp	r5, r7
9001ba84:	dd4f      	ble.n	9001bb26 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
9001ba86:	ea5f 4c22 	movs.w	ip, r2, asr #16
9001ba8a:	d44c      	bmi.n	9001bb26 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
9001ba8c:	f8de 000c 	ldr.w	r0, [lr, #12]
9001ba90:	4560      	cmp	r0, ip
9001ba92:	dd48      	ble.n	9001bb26 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
9001ba94:	9803      	ldr	r0, [sp, #12]
9001ba96:	b22d      	sxth	r5, r5
9001ba98:	fb0c 0505 	mla	r5, ip, r5, r0
9001ba9c:	5de8      	ldrb	r0, [r5, r7]
9001ba9e:	9d04      	ldr	r5, [sp, #16]
9001baa0:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
9001baa4:	f06f 0501 	mvn.w	r5, #1
9001baa8:	fb05 fb08 	mul.w	fp, r5, r8
9001baac:	ea4f 2c20 	mov.w	ip, r0, asr #8
9001bab0:	f834 500b 	ldrh.w	r5, [r4, fp]
9001bab4:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
9001bab8:	122f      	asrs	r7, r5, #8
9001baba:	ea4f 09e5 	mov.w	r9, r5, asr #3
9001babe:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
9001bac2:	00ed      	lsls	r5, r5, #3
9001bac4:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
9001bac8:	fb17 f706 	smulbb	r7, r7, r6
9001bacc:	b2ed      	uxtb	r5, r5
9001bace:	fb19 f906 	smulbb	r9, r9, r6
9001bad2:	fb0c 7c0a 	mla	ip, ip, sl, r7
9001bad6:	10c7      	asrs	r7, r0, #3
9001bad8:	fb15 f506 	smulbb	r5, r5, r6
9001badc:	00c0      	lsls	r0, r0, #3
9001bade:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
9001bae2:	fa1f fc8c 	uxth.w	ip, ip
9001bae6:	b2c0      	uxtb	r0, r0
9001bae8:	fb07 970a 	mla	r7, r7, sl, r9
9001baec:	fb00 500a 	mla	r0, r0, sl, r5
9001baf0:	f10c 0501 	add.w	r5, ip, #1
9001baf4:	b2bf      	uxth	r7, r7
9001baf6:	b280      	uxth	r0, r0
9001baf8:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
9001bafc:	f107 0901 	add.w	r9, r7, #1
9001bb00:	1c45      	adds	r5, r0, #1
9001bb02:	eb09 2917 	add.w	r9, r9, r7, lsr #8
9001bb06:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
9001bb0a:	eb05 2510 	add.w	r5, r5, r0, lsr #8
9001bb0e:	ea4f 1959 	mov.w	r9, r9, lsr #5
9001bb12:	f3c5 25c4 	ubfx	r5, r5, #11, #5
9001bb16:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
9001bb1a:	ea45 0c0c 	orr.w	ip, r5, ip
9001bb1e:	ea4c 0c09 	orr.w	ip, ip, r9
9001bb22:	f824 c00b 	strh.w	ip, [r4, fp]
9001bb26:	9813      	ldr	r0, [sp, #76]	; 0x4c
9001bb28:	f108 38ff 	add.w	r8, r8, #4294967295
9001bb2c:	4401      	add	r1, r0
9001bb2e:	9814      	ldr	r0, [sp, #80]	; 0x50
9001bb30:	4402      	add	r2, r0
9001bb32:	e75c      	b.n	9001b9ee <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
9001bb34:	b007      	add	sp, #28
9001bb36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

9001bb3a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
9001bb3a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001bb3e:	b085      	sub	sp, #20
9001bb40:	4693      	mov	fp, r2
9001bb42:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
9001bb46:	9e13      	ldr	r6, [sp, #76]	; 0x4c
9001bb48:	9d16      	ldr	r5, [sp, #88]	; 0x58
9001bb4a:	6870      	ldr	r0, [r6, #4]
9001bb4c:	9100      	str	r1, [sp, #0]
9001bb4e:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
9001bb52:	e9dd ec11 	ldrd	lr, ip, [sp, #68]	; 0x44
9001bb56:	fb00 2404 	mla	r4, r0, r4, r2
9001bb5a:	6832      	ldr	r2, [r6, #0]
9001bb5c:	eb02 0444 	add.w	r4, r2, r4, lsl #1
9001bb60:	682a      	ldr	r2, [r5, #0]
9001bb62:	9201      	str	r2, [sp, #4]
9001bb64:	686a      	ldr	r2, [r5, #4]
9001bb66:	3204      	adds	r2, #4
9001bb68:	9202      	str	r2, [sp, #8]
9001bb6a:	9a00      	ldr	r2, [sp, #0]
9001bb6c:	2a00      	cmp	r2, #0
9001bb6e:	dc03      	bgt.n	9001bb78 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
9001bb70:	f1bb 0f00 	cmp.w	fp, #0
9001bb74:	f340 80a0 	ble.w	9001bcb8 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17e>
9001bb78:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
9001bb7a:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
9001bb7e:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
9001bb82:	9a10      	ldr	r2, [sp, #64]	; 0x40
9001bb84:	f9b5 800c 	ldrsh.w	r8, [r5, #12]
9001bb88:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
9001bb8c:	2b00      	cmp	r3, #0
9001bb8e:	dd0c      	ble.n	9001bbaa <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
9001bb90:	1406      	asrs	r6, r0, #16
9001bb92:	d405      	bmi.n	9001bba0 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
9001bb94:	454e      	cmp	r6, r9
9001bb96:	da03      	bge.n	9001bba0 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
9001bb98:	1416      	asrs	r6, r2, #16
9001bb9a:	d401      	bmi.n	9001bba0 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
9001bb9c:	4546      	cmp	r6, r8
9001bb9e:	db05      	blt.n	9001bbac <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
9001bba0:	4470      	add	r0, lr
9001bba2:	4462      	add	r2, ip
9001bba4:	3b01      	subs	r3, #1
9001bba6:	3402      	adds	r4, #2
9001bba8:	e7f0      	b.n	9001bb8c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
9001bbaa:	d00f      	beq.n	9001bbcc <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
9001bbac:	1e5e      	subs	r6, r3, #1
9001bbae:	fb0e 0706 	mla	r7, lr, r6, r0
9001bbb2:	143f      	asrs	r7, r7, #16
9001bbb4:	d541      	bpl.n	9001bc3a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x100>
9001bbb6:	eb04 0643 	add.w	r6, r4, r3, lsl #1
9001bbba:	4698      	mov	r8, r3
9001bbbc:	9603      	str	r6, [sp, #12]
9001bbbe:	f1b8 0f00 	cmp.w	r8, #0
9001bbc2:	dc59      	bgt.n	9001bc78 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
9001bbc4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
9001bbc8:	eb04 0443 	add.w	r4, r4, r3, lsl #1
9001bbcc:	9b00      	ldr	r3, [sp, #0]
9001bbce:	2b00      	cmp	r3, #0
9001bbd0:	dd72      	ble.n	9001bcb8 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17e>
9001bbd2:	ee30 0a04 	vadd.f32	s0, s0, s8
9001bbd6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
9001bbd8:	ee70 0aa4 	vadd.f32	s1, s1, s9
9001bbdc:	eeb0 6a62 	vmov.f32	s12, s5
9001bbe0:	eec6 7a80 	vdiv.f32	s15, s13, s0
9001bbe4:	ee31 1a05 	vadd.f32	s2, s2, s10
9001bbe8:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
9001bbec:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
9001bbf0:	eeb0 6a43 	vmov.f32	s12, s6
9001bbf4:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
9001bbf8:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
9001bbfc:	ee20 7aa7 	vmul.f32	s14, s1, s15
9001bc00:	ee61 7a27 	vmul.f32	s15, s2, s15
9001bc04:	ee77 2a62 	vsub.f32	s5, s14, s5
9001bc08:	ee37 3ac3 	vsub.f32	s6, s15, s6
9001bc0c:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
9001bc10:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
9001bc14:	ee12 2a90 	vmov	r2, s5
9001bc18:	eef0 2a47 	vmov.f32	s5, s14
9001bc1c:	fb92 fef3 	sdiv	lr, r2, r3
9001bc20:	ee13 2a10 	vmov	r2, s6
9001bc24:	eeb0 3a67 	vmov.f32	s6, s15
9001bc28:	fb92 fcf3 	sdiv	ip, r2, r3
9001bc2c:	9b00      	ldr	r3, [sp, #0]
9001bc2e:	3b01      	subs	r3, #1
9001bc30:	9300      	str	r3, [sp, #0]
9001bc32:	9b0e      	ldr	r3, [sp, #56]	; 0x38
9001bc34:	bf08      	it	eq
9001bc36:	465b      	moveq	r3, fp
9001bc38:	e797      	b.n	9001bb6a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
9001bc3a:	454f      	cmp	r7, r9
9001bc3c:	dabb      	bge.n	9001bbb6 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
9001bc3e:	fb0c 2606 	mla	r6, ip, r6, r2
9001bc42:	1436      	asrs	r6, r6, #16
9001bc44:	d4b7      	bmi.n	9001bbb6 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
9001bc46:	4546      	cmp	r6, r8
9001bc48:	dab5      	bge.n	9001bbb6 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
9001bc4a:	461e      	mov	r6, r3
9001bc4c:	46a0      	mov	r8, r4
9001bc4e:	2e00      	cmp	r6, #0
9001bc50:	ddb8      	ble.n	9001bbc4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
9001bc52:	1417      	asrs	r7, r2, #16
9001bc54:	f9b5 a008 	ldrsh.w	sl, [r5, #8]
9001bc58:	9901      	ldr	r1, [sp, #4]
9001bc5a:	ea4f 4920 	mov.w	r9, r0, asr #16
9001bc5e:	4462      	add	r2, ip
9001bc60:	4470      	add	r0, lr
9001bc62:	fb0a 1707 	mla	r7, sl, r7, r1
9001bc66:	9902      	ldr	r1, [sp, #8]
9001bc68:	3e01      	subs	r6, #1
9001bc6a:	f817 7009 	ldrb.w	r7, [r7, r9]
9001bc6e:	f831 7017 	ldrh.w	r7, [r1, r7, lsl #1]
9001bc72:	f828 7b02 	strh.w	r7, [r8], #2
9001bc76:	e7ea      	b.n	9001bc4e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x114>
9001bc78:	ea5f 4920 	movs.w	r9, r0, asr #16
9001bc7c:	d417      	bmi.n	9001bcae <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
9001bc7e:	68ae      	ldr	r6, [r5, #8]
9001bc80:	454e      	cmp	r6, r9
9001bc82:	dd14      	ble.n	9001bcae <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
9001bc84:	ea5f 4a22 	movs.w	sl, r2, asr #16
9001bc88:	d411      	bmi.n	9001bcae <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
9001bc8a:	68ef      	ldr	r7, [r5, #12]
9001bc8c:	4557      	cmp	r7, sl
9001bc8e:	dd0e      	ble.n	9001bcae <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
9001bc90:	9f01      	ldr	r7, [sp, #4]
9001bc92:	b236      	sxth	r6, r6
9001bc94:	f06f 0101 	mvn.w	r1, #1
9001bc98:	fb0a 7606 	mla	r6, sl, r6, r7
9001bc9c:	9f02      	ldr	r7, [sp, #8]
9001bc9e:	f816 6009 	ldrb.w	r6, [r6, r9]
9001bca2:	f837 7016 	ldrh.w	r7, [r7, r6, lsl #1]
9001bca6:	fb01 f608 	mul.w	r6, r1, r8
9001bcaa:	9903      	ldr	r1, [sp, #12]
9001bcac:	538f      	strh	r7, [r1, r6]
9001bcae:	4470      	add	r0, lr
9001bcb0:	4462      	add	r2, ip
9001bcb2:	f108 38ff 	add.w	r8, r8, #4294967295
9001bcb6:	e782      	b.n	9001bbbe <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
9001bcb8:	b005      	add	sp, #20
9001bcba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

9001bcbe <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
9001bcbe:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001bcc2:	b087      	sub	sp, #28
9001bcc4:	9c15      	ldr	r4, [sp, #84]	; 0x54
9001bcc6:	9205      	str	r2, [sp, #20]
9001bcc8:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
9001bccc:	9102      	str	r1, [sp, #8]
9001bcce:	9203      	str	r2, [sp, #12]
9001bcd0:	6861      	ldr	r1, [r4, #4]
9001bcd2:	f8dd c060 	ldr.w	ip, [sp, #96]	; 0x60
9001bcd6:	e9dd 2016 	ldrd	r2, r0, [sp, #88]	; 0x58
9001bcda:	fb01 2000 	mla	r0, r1, r0, r2
9001bcde:	6822      	ldr	r2, [r4, #0]
9001bce0:	eb02 0240 	add.w	r2, r2, r0, lsl #1
9001bce4:	9200      	str	r2, [sp, #0]
9001bce6:	f8dc 2000 	ldr.w	r2, [ip]
9001bcea:	9204      	str	r2, [sp, #16]
9001bcec:	f8dc 2004 	ldr.w	r2, [ip, #4]
9001bcf0:	3204      	adds	r2, #4
9001bcf2:	9201      	str	r2, [sp, #4]
9001bcf4:	9a03      	ldr	r2, [sp, #12]
9001bcf6:	43d5      	mvns	r5, r2
9001bcf8:	b2ed      	uxtb	r5, r5
9001bcfa:	9a02      	ldr	r2, [sp, #8]
9001bcfc:	2a00      	cmp	r2, #0
9001bcfe:	dc03      	bgt.n	9001bd08 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
9001bd00:	9a05      	ldr	r2, [sp, #20]
9001bd02:	2a00      	cmp	r2, #0
9001bd04:	f340 812c 	ble.w	9001bf60 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
9001bd08:	9a11      	ldr	r2, [sp, #68]	; 0x44
9001bd0a:	f9bc e008 	ldrsh.w	lr, [ip, #8]
9001bd0e:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
9001bd12:	9a12      	ldr	r2, [sp, #72]	; 0x48
9001bd14:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
9001bd18:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
9001bd1c:	2b00      	cmp	r3, #0
9001bd1e:	dd10      	ble.n	9001bd42 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
9001bd20:	140c      	asrs	r4, r1, #16
9001bd22:	d405      	bmi.n	9001bd30 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
9001bd24:	4574      	cmp	r4, lr
9001bd26:	da03      	bge.n	9001bd30 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
9001bd28:	1414      	asrs	r4, r2, #16
9001bd2a:	d401      	bmi.n	9001bd30 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
9001bd2c:	42bc      	cmp	r4, r7
9001bd2e:	db09      	blt.n	9001bd44 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
9001bd30:	9c13      	ldr	r4, [sp, #76]	; 0x4c
9001bd32:	3b01      	subs	r3, #1
9001bd34:	9800      	ldr	r0, [sp, #0]
9001bd36:	4421      	add	r1, r4
9001bd38:	9c14      	ldr	r4, [sp, #80]	; 0x50
9001bd3a:	3002      	adds	r0, #2
9001bd3c:	4422      	add	r2, r4
9001bd3e:	9000      	str	r0, [sp, #0]
9001bd40:	e7ec      	b.n	9001bd1c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
9001bd42:	d071      	beq.n	9001be28 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16a>
9001bd44:	1e5c      	subs	r4, r3, #1
9001bd46:	9e13      	ldr	r6, [sp, #76]	; 0x4c
9001bd48:	fb06 1604 	mla	r6, r6, r4, r1
9001bd4c:	1436      	asrs	r6, r6, #16
9001bd4e:	d45d      	bmi.n	9001be0c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
9001bd50:	4576      	cmp	r6, lr
9001bd52:	da5b      	bge.n	9001be0c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
9001bd54:	9e14      	ldr	r6, [sp, #80]	; 0x50
9001bd56:	fb06 2404 	mla	r4, r6, r4, r2
9001bd5a:	1424      	asrs	r4, r4, #16
9001bd5c:	d456      	bmi.n	9001be0c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
9001bd5e:	42bc      	cmp	r4, r7
9001bd60:	da54      	bge.n	9001be0c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
9001bd62:	4698      	mov	r8, r3
9001bd64:	f8dd 9000 	ldr.w	r9, [sp]
9001bd68:	f8bd a00c 	ldrh.w	sl, [sp, #12]
9001bd6c:	f1b8 0f00 	cmp.w	r8, #0
9001bd70:	dd54      	ble.n	9001be1c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15e>
9001bd72:	f9bc 7008 	ldrsh.w	r7, [ip, #8]
9001bd76:	1414      	asrs	r4, r2, #16
9001bd78:	9804      	ldr	r0, [sp, #16]
9001bd7a:	140e      	asrs	r6, r1, #16
9001bd7c:	f108 38ff 	add.w	r8, r8, #4294967295
9001bd80:	fb07 0404 	mla	r4, r7, r4, r0
9001bd84:	9801      	ldr	r0, [sp, #4]
9001bd86:	f814 e006 	ldrb.w	lr, [r4, r6]
9001bd8a:	f8b9 4000 	ldrh.w	r4, [r9]
9001bd8e:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
9001bd92:	1227      	asrs	r7, r4, #8
9001bd94:	eb00 0b0e 	add.w	fp, r0, lr
9001bd98:	f810 e00e 	ldrb.w	lr, [r0, lr]
9001bd9c:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
9001bda0:	9813      	ldr	r0, [sp, #76]	; 0x4c
9001bda2:	f89b 6002 	ldrb.w	r6, [fp, #2]
9001bda6:	f89b b001 	ldrb.w	fp, [fp, #1]
9001bdaa:	4401      	add	r1, r0
9001bdac:	fb16 f60a 	smulbb	r6, r6, sl
9001bdb0:	9814      	ldr	r0, [sp, #80]	; 0x50
9001bdb2:	fb1b fb0a 	smulbb	fp, fp, sl
9001bdb6:	fb07 6705 	mla	r7, r7, r5, r6
9001bdba:	10e6      	asrs	r6, r4, #3
9001bdbc:	00e4      	lsls	r4, r4, #3
9001bdbe:	4402      	add	r2, r0
9001bdc0:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
9001bdc4:	b2bf      	uxth	r7, r7
9001bdc6:	b2e4      	uxtb	r4, r4
9001bdc8:	fb06 b605 	mla	r6, r6, r5, fp
9001bdcc:	fb14 f405 	smulbb	r4, r4, r5
9001bdd0:	b2b6      	uxth	r6, r6
9001bdd2:	fb0e 4e0a 	mla	lr, lr, sl, r4
9001bdd6:	1c7c      	adds	r4, r7, #1
9001bdd8:	f106 0b01 	add.w	fp, r6, #1
9001bddc:	fa1f fe8e 	uxth.w	lr, lr
9001bde0:	eb04 2717 	add.w	r7, r4, r7, lsr #8
9001bde4:	f10e 0401 	add.w	r4, lr, #1
9001bde8:	eb0b 2b16 	add.w	fp, fp, r6, lsr #8
9001bdec:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
9001bdf0:	eb04 241e 	add.w	r4, r4, lr, lsr #8
9001bdf4:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
9001bdf8:	f3c4 24c4 	ubfx	r4, r4, #11, #5
9001bdfc:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
9001be00:	4327      	orrs	r7, r4
9001be02:	ea47 070b 	orr.w	r7, r7, fp
9001be06:	f829 7b02 	strh.w	r7, [r9], #2
9001be0a:	e7af      	b.n	9001bd6c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
9001be0c:	f04f 0e00 	mov.w	lr, #0
9001be10:	f8bd 900c 	ldrh.w	r9, [sp, #12]
9001be14:	eb03 040e 	add.w	r4, r3, lr
9001be18:	2c00      	cmp	r4, #0
9001be1a:	dc43      	bgt.n	9001bea4 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
9001be1c:	9a00      	ldr	r2, [sp, #0]
9001be1e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
9001be22:	eb02 0343 	add.w	r3, r2, r3, lsl #1
9001be26:	9300      	str	r3, [sp, #0]
9001be28:	9b02      	ldr	r3, [sp, #8]
9001be2a:	2b00      	cmp	r3, #0
9001be2c:	f340 8098 	ble.w	9001bf60 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
9001be30:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
9001be34:	9b10      	ldr	r3, [sp, #64]	; 0x40
9001be36:	ee30 0a04 	vadd.f32	s0, s0, s8
9001be3a:	ee70 0aa4 	vadd.f32	s1, s1, s9
9001be3e:	eef0 6a62 	vmov.f32	s13, s5
9001be42:	eec7 7a00 	vdiv.f32	s15, s14, s0
9001be46:	ee31 1a05 	vadd.f32	s2, s2, s10
9001be4a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
9001be4e:	edcd 6a11 	vstr	s13, [sp, #68]	; 0x44
9001be52:	eef0 6a43 	vmov.f32	s13, s6
9001be56:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
9001be5a:	edcd 6a12 	vstr	s13, [sp, #72]	; 0x48
9001be5e:	ee20 7aa7 	vmul.f32	s14, s1, s15
9001be62:	ee61 7a27 	vmul.f32	s15, s2, s15
9001be66:	ee77 2a62 	vsub.f32	s5, s14, s5
9001be6a:	ee37 3ac3 	vsub.f32	s6, s15, s6
9001be6e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
9001be72:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
9001be76:	ee12 2a90 	vmov	r2, s5
9001be7a:	eef0 2a47 	vmov.f32	s5, s14
9001be7e:	fb92 f3f3 	sdiv	r3, r2, r3
9001be82:	ee13 2a10 	vmov	r2, s6
9001be86:	9313      	str	r3, [sp, #76]	; 0x4c
9001be88:	9b10      	ldr	r3, [sp, #64]	; 0x40
9001be8a:	eeb0 3a67 	vmov.f32	s6, s15
9001be8e:	fb92 f3f3 	sdiv	r3, r2, r3
9001be92:	9314      	str	r3, [sp, #80]	; 0x50
9001be94:	9b02      	ldr	r3, [sp, #8]
9001be96:	9a05      	ldr	r2, [sp, #20]
9001be98:	3b01      	subs	r3, #1
9001be9a:	9302      	str	r3, [sp, #8]
9001be9c:	9b10      	ldr	r3, [sp, #64]	; 0x40
9001be9e:	bf08      	it	eq
9001bea0:	4613      	moveq	r3, r2
9001bea2:	e72a      	b.n	9001bcfa <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
9001bea4:	140f      	asrs	r7, r1, #16
9001bea6:	d454      	bmi.n	9001bf52 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
9001bea8:	f8dc 6008 	ldr.w	r6, [ip, #8]
9001beac:	42be      	cmp	r6, r7
9001beae:	dd50      	ble.n	9001bf52 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
9001beb0:	ea5f 4822 	movs.w	r8, r2, asr #16
9001beb4:	d44d      	bmi.n	9001bf52 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
9001beb6:	f8dc 400c 	ldr.w	r4, [ip, #12]
9001beba:	4544      	cmp	r4, r8
9001bebc:	dd49      	ble.n	9001bf52 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
9001bebe:	9c04      	ldr	r4, [sp, #16]
9001bec0:	b236      	sxth	r6, r6
9001bec2:	f06f 0001 	mvn.w	r0, #1
9001bec6:	fb08 4606 	mla	r6, r8, r6, r4
9001beca:	9c01      	ldr	r4, [sp, #4]
9001becc:	fb00 fa0e 	mul.w	sl, r0, lr
9001bed0:	9800      	ldr	r0, [sp, #0]
9001bed2:	f816 8007 	ldrb.w	r8, [r6, r7]
9001bed6:	eb08 0848 	add.w	r8, r8, r8, lsl #1
9001beda:	eb04 0b08 	add.w	fp, r4, r8
9001bede:	f830 400a 	ldrh.w	r4, [r0, sl]
9001bee2:	9801      	ldr	r0, [sp, #4]
9001bee4:	f89b 6002 	ldrb.w	r6, [fp, #2]
9001bee8:	1227      	asrs	r7, r4, #8
9001beea:	f89b b001 	ldrb.w	fp, [fp, #1]
9001beee:	fb16 f609 	smulbb	r6, r6, r9
9001bef2:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
9001bef6:	f810 8008 	ldrb.w	r8, [r0, r8]
9001befa:	fb1b fb09 	smulbb	fp, fp, r9
9001befe:	fb07 6705 	mla	r7, r7, r5, r6
9001bf02:	10e6      	asrs	r6, r4, #3
9001bf04:	00e4      	lsls	r4, r4, #3
9001bf06:	9800      	ldr	r0, [sp, #0]
9001bf08:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
9001bf0c:	b2bf      	uxth	r7, r7
9001bf0e:	b2e4      	uxtb	r4, r4
9001bf10:	fb06 b605 	mla	r6, r6, r5, fp
9001bf14:	fb14 f405 	smulbb	r4, r4, r5
9001bf18:	b2b6      	uxth	r6, r6
9001bf1a:	fb08 4809 	mla	r8, r8, r9, r4
9001bf1e:	1c7c      	adds	r4, r7, #1
9001bf20:	f106 0b01 	add.w	fp, r6, #1
9001bf24:	fa1f f888 	uxth.w	r8, r8
9001bf28:	eb04 2717 	add.w	r7, r4, r7, lsr #8
9001bf2c:	f108 0401 	add.w	r4, r8, #1
9001bf30:	eb0b 2b16 	add.w	fp, fp, r6, lsr #8
9001bf34:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
9001bf38:	eb04 2418 	add.w	r4, r4, r8, lsr #8
9001bf3c:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
9001bf40:	f3c4 24c4 	ubfx	r4, r4, #11, #5
9001bf44:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
9001bf48:	4327      	orrs	r7, r4
9001bf4a:	ea47 070b 	orr.w	r7, r7, fp
9001bf4e:	f820 700a 	strh.w	r7, [r0, sl]
9001bf52:	9813      	ldr	r0, [sp, #76]	; 0x4c
9001bf54:	f10e 3eff 	add.w	lr, lr, #4294967295
9001bf58:	4401      	add	r1, r0
9001bf5a:	9814      	ldr	r0, [sp, #80]	; 0x50
9001bf5c:	4402      	add	r2, r0
9001bf5e:	e759      	b.n	9001be14 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
9001bf60:	b007      	add	sp, #28
9001bf62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

9001bf68 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
9001bf68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001bf6c:	b085      	sub	sp, #20
9001bf6e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
9001bf72:	9e13      	ldr	r6, [sp, #76]	; 0x4c
9001bf74:	9d16      	ldr	r5, [sp, #88]	; 0x58
9001bf76:	9203      	str	r2, [sp, #12]
9001bf78:	6870      	ldr	r0, [r6, #4]
9001bf7a:	686f      	ldr	r7, [r5, #4]
9001bf7c:	f8dd c044 	ldr.w	ip, [sp, #68]	; 0x44
9001bf80:	3704      	adds	r7, #4
9001bf82:	9101      	str	r1, [sp, #4]
9001bf84:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
9001bf88:	fb00 2404 	mla	r4, r0, r4, r2
9001bf8c:	6832      	ldr	r2, [r6, #0]
9001bf8e:	eb02 0444 	add.w	r4, r2, r4, lsl #1
9001bf92:	682a      	ldr	r2, [r5, #0]
9001bf94:	9202      	str	r2, [sp, #8]
9001bf96:	9a01      	ldr	r2, [sp, #4]
9001bf98:	2a00      	cmp	r2, #0
9001bf9a:	dc03      	bgt.n	9001bfa4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
9001bf9c:	9a03      	ldr	r2, [sp, #12]
9001bf9e:	2a00      	cmp	r2, #0
9001bfa0:	f340 80cc 	ble.w	9001c13c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
9001bfa4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
9001bfa6:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
9001bfaa:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
9001bfae:	9a10      	ldr	r2, [sp, #64]	; 0x40
9001bfb0:	f9b5 800c 	ldrsh.w	r8, [r5, #12]
9001bfb4:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
9001bfb8:	2b00      	cmp	r3, #0
9001bfba:	dd0d      	ble.n	9001bfd8 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
9001bfbc:	1406      	asrs	r6, r0, #16
9001bfbe:	d405      	bmi.n	9001bfcc <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
9001bfc0:	454e      	cmp	r6, r9
9001bfc2:	da03      	bge.n	9001bfcc <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
9001bfc4:	1416      	asrs	r6, r2, #16
9001bfc6:	d401      	bmi.n	9001bfcc <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
9001bfc8:	4546      	cmp	r6, r8
9001bfca:	db06      	blt.n	9001bfda <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
9001bfcc:	9e12      	ldr	r6, [sp, #72]	; 0x48
9001bfce:	4460      	add	r0, ip
9001bfd0:	3b01      	subs	r3, #1
9001bfd2:	3402      	adds	r4, #2
9001bfd4:	4432      	add	r2, r6
9001bfd6:	e7ef      	b.n	9001bfb8 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
9001bfd8:	d00f      	beq.n	9001bffa <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
9001bfda:	1e5e      	subs	r6, r3, #1
9001bfdc:	fb0c 0e06 	mla	lr, ip, r6, r0
9001bfe0:	ea5f 4e2e 	movs.w	lr, lr, asr #16
9001bfe4:	d543      	bpl.n	9001c06e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x106>
9001bfe6:	4698      	mov	r8, r3
9001bfe8:	eb04 0a43 	add.w	sl, r4, r3, lsl #1
9001bfec:	f1b8 0f00 	cmp.w	r8, #0
9001bff0:	dc71      	bgt.n	9001c0d6 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16e>
9001bff2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
9001bff6:	eb04 0443 	add.w	r4, r4, r3, lsl #1
9001bffa:	9b01      	ldr	r3, [sp, #4]
9001bffc:	2b00      	cmp	r3, #0
9001bffe:	f340 809d 	ble.w	9001c13c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
9001c002:	ee30 0a04 	vadd.f32	s0, s0, s8
9001c006:	9b0e      	ldr	r3, [sp, #56]	; 0x38
9001c008:	ee70 0aa4 	vadd.f32	s1, s1, s9
9001c00c:	eeb0 6a62 	vmov.f32	s12, s5
9001c010:	eec6 7a80 	vdiv.f32	s15, s13, s0
9001c014:	ee31 1a05 	vadd.f32	s2, s2, s10
9001c018:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
9001c01c:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
9001c020:	eeb0 6a43 	vmov.f32	s12, s6
9001c024:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
9001c028:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
9001c02c:	ee20 7aa7 	vmul.f32	s14, s1, s15
9001c030:	ee61 7a27 	vmul.f32	s15, s2, s15
9001c034:	ee77 2a62 	vsub.f32	s5, s14, s5
9001c038:	ee37 3ac3 	vsub.f32	s6, s15, s6
9001c03c:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
9001c040:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
9001c044:	ee12 2a90 	vmov	r2, s5
9001c048:	eef0 2a47 	vmov.f32	s5, s14
9001c04c:	fb92 fcf3 	sdiv	ip, r2, r3
9001c050:	ee13 2a10 	vmov	r2, s6
9001c054:	eeb0 3a67 	vmov.f32	s6, s15
9001c058:	fb92 f3f3 	sdiv	r3, r2, r3
9001c05c:	9312      	str	r3, [sp, #72]	; 0x48
9001c05e:	9b01      	ldr	r3, [sp, #4]
9001c060:	9a03      	ldr	r2, [sp, #12]
9001c062:	3b01      	subs	r3, #1
9001c064:	9301      	str	r3, [sp, #4]
9001c066:	9b0e      	ldr	r3, [sp, #56]	; 0x38
9001c068:	bf08      	it	eq
9001c06a:	4613      	moveq	r3, r2
9001c06c:	e793      	b.n	9001bf96 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
9001c06e:	45ce      	cmp	lr, r9
9001c070:	dab9      	bge.n	9001bfe6 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
9001c072:	9912      	ldr	r1, [sp, #72]	; 0x48
9001c074:	fb01 2606 	mla	r6, r1, r6, r2
9001c078:	1436      	asrs	r6, r6, #16
9001c07a:	d4b4      	bmi.n	9001bfe6 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
9001c07c:	4546      	cmp	r6, r8
9001c07e:	dab2      	bge.n	9001bfe6 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
9001c080:	4698      	mov	r8, r3
9001c082:	46a2      	mov	sl, r4
9001c084:	f1b8 0f00 	cmp.w	r8, #0
9001c088:	ddb3      	ble.n	9001bff2 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
9001c08a:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
9001c08e:	1416      	asrs	r6, r2, #16
9001c090:	9902      	ldr	r1, [sp, #8]
9001c092:	ea4f 4e20 	mov.w	lr, r0, asr #16
9001c096:	f108 38ff 	add.w	r8, r8, #4294967295
9001c09a:	4460      	add	r0, ip
9001c09c:	fb09 1606 	mla	r6, r9, r6, r1
9001c0a0:	4928      	ldr	r1, [pc, #160]	; (9001c144 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1dc>)
9001c0a2:	f816 e00e 	ldrb.w	lr, [r6, lr]
9001c0a6:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
9001c0aa:	eb07 0b0e 	add.w	fp, r7, lr
9001c0ae:	f89b 6001 	ldrb.w	r6, [fp, #1]
9001c0b2:	f89b 9002 	ldrb.w	r9, [fp, #2]
9001c0b6:	00f6      	lsls	r6, r6, #3
9001c0b8:	ea01 2909 	and.w	r9, r1, r9, lsl #8
9001c0bc:	9912      	ldr	r1, [sp, #72]	; 0x48
9001c0be:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
9001c0c2:	440a      	add	r2, r1
9001c0c4:	ea49 0606 	orr.w	r6, r9, r6
9001c0c8:	f817 900e 	ldrb.w	r9, [r7, lr]
9001c0cc:	ea46 06d9 	orr.w	r6, r6, r9, lsr #3
9001c0d0:	f82a 6b02 	strh.w	r6, [sl], #2
9001c0d4:	e7d6      	b.n	9001c084 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
9001c0d6:	ea5f 4920 	movs.w	r9, r0, asr #16
9001c0da:	d429      	bmi.n	9001c130 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
9001c0dc:	68ae      	ldr	r6, [r5, #8]
9001c0de:	454e      	cmp	r6, r9
9001c0e0:	dd26      	ble.n	9001c130 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
9001c0e2:	ea5f 4b22 	movs.w	fp, r2, asr #16
9001c0e6:	d423      	bmi.n	9001c130 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
9001c0e8:	68e9      	ldr	r1, [r5, #12]
9001c0ea:	4559      	cmp	r1, fp
9001c0ec:	dd20      	ble.n	9001c130 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
9001c0ee:	fa0f fe86 	sxth.w	lr, r6
9001c0f2:	9902      	ldr	r1, [sp, #8]
9001c0f4:	fb0b 1e0e 	mla	lr, fp, lr, r1
9001c0f8:	f06f 0101 	mvn.w	r1, #1
9001c0fc:	f81e e009 	ldrb.w	lr, [lr, r9]
9001c100:	fb01 f908 	mul.w	r9, r1, r8
9001c104:	f2a1 71fe 	subw	r1, r1, #2046	; 0x7fe
9001c108:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
9001c10c:	eb07 060e 	add.w	r6, r7, lr
9001c110:	f896 b002 	ldrb.w	fp, [r6, #2]
9001c114:	7876      	ldrb	r6, [r6, #1]
9001c116:	ea01 2b0b 	and.w	fp, r1, fp, lsl #8
9001c11a:	00f6      	lsls	r6, r6, #3
9001c11c:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
9001c120:	ea4b 0606 	orr.w	r6, fp, r6
9001c124:	f817 b00e 	ldrb.w	fp, [r7, lr]
9001c128:	ea46 06db 	orr.w	r6, r6, fp, lsr #3
9001c12c:	f82a 6009 	strh.w	r6, [sl, r9]
9001c130:	9912      	ldr	r1, [sp, #72]	; 0x48
9001c132:	4460      	add	r0, ip
9001c134:	f108 38ff 	add.w	r8, r8, #4294967295
9001c138:	440a      	add	r2, r1
9001c13a:	e757      	b.n	9001bfec <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
9001c13c:	b005      	add	sp, #20
9001c13e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9001c142:	bf00      	nop
9001c144:	fffff800 	.word	0xfffff800

9001c148 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
9001c148:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001c14c:	b087      	sub	sp, #28
9001c14e:	468b      	mov	fp, r1
9001c150:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
9001c154:	9815      	ldr	r0, [sp, #84]	; 0x54
9001c156:	9204      	str	r2, [sp, #16]
9001c158:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
9001c15c:	6841      	ldr	r1, [r0, #4]
9001c15e:	9205      	str	r2, [sp, #20]
9001c160:	f8dd c060 	ldr.w	ip, [sp, #96]	; 0x60
9001c164:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
9001c168:	fb01 2404 	mla	r4, r1, r4, r2
9001c16c:	6802      	ldr	r2, [r0, #0]
9001c16e:	eb02 0444 	add.w	r4, r2, r4, lsl #1
9001c172:	f8dc 2000 	ldr.w	r2, [ip]
9001c176:	9201      	str	r2, [sp, #4]
9001c178:	f8dc 2004 	ldr.w	r2, [ip, #4]
9001c17c:	3204      	adds	r2, #4
9001c17e:	9202      	str	r2, [sp, #8]
9001c180:	f1bb 0f00 	cmp.w	fp, #0
9001c184:	dc03      	bgt.n	9001c18e <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46>
9001c186:	9a04      	ldr	r2, [sp, #16]
9001c188:	2a00      	cmp	r2, #0
9001c18a:	f340 8138 	ble.w	9001c3fe <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
9001c18e:	9a11      	ldr	r2, [sp, #68]	; 0x44
9001c190:	f9bc 7008 	ldrsh.w	r7, [ip, #8]
9001c194:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
9001c198:	9a12      	ldr	r2, [sp, #72]	; 0x48
9001c19a:	f9bc 600c 	ldrsh.w	r6, [ip, #12]
9001c19e:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
9001c1a2:	2b00      	cmp	r3, #0
9001c1a4:	dd0e      	ble.n	9001c1c4 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
9001c1a6:	1402      	asrs	r2, r0, #16
9001c1a8:	d405      	bmi.n	9001c1b6 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
9001c1aa:	42ba      	cmp	r2, r7
9001c1ac:	da03      	bge.n	9001c1b6 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
9001c1ae:	140a      	asrs	r2, r1, #16
9001c1b0:	d401      	bmi.n	9001c1b6 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
9001c1b2:	42b2      	cmp	r2, r6
9001c1b4:	db07      	blt.n	9001c1c6 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
9001c1b6:	9a13      	ldr	r2, [sp, #76]	; 0x4c
9001c1b8:	3b01      	subs	r3, #1
9001c1ba:	3402      	adds	r4, #2
9001c1bc:	4410      	add	r0, r2
9001c1be:	9a14      	ldr	r2, [sp, #80]	; 0x50
9001c1c0:	4411      	add	r1, r2
9001c1c2:	e7ee      	b.n	9001c1a2 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
9001c1c4:	d019      	beq.n	9001c1fa <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
9001c1c6:	1e5a      	subs	r2, r3, #1
9001c1c8:	9d13      	ldr	r5, [sp, #76]	; 0x4c
9001c1ca:	fb05 0502 	mla	r5, r5, r2, r0
9001c1ce:	142d      	asrs	r5, r5, #16
9001c1d0:	d409      	bmi.n	9001c1e6 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
9001c1d2:	42bd      	cmp	r5, r7
9001c1d4:	da07      	bge.n	9001c1e6 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
9001c1d6:	9d14      	ldr	r5, [sp, #80]	; 0x50
9001c1d8:	fb05 1202 	mla	r2, r5, r2, r1
9001c1dc:	1412      	asrs	r2, r2, #16
9001c1de:	d402      	bmi.n	9001c1e6 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
9001c1e0:	42b2      	cmp	r2, r6
9001c1e2:	f2c0 80ac 	blt.w	9001c33e <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f6>
9001c1e6:	f04f 0e00 	mov.w	lr, #0
9001c1ea:	eb03 020e 	add.w	r2, r3, lr
9001c1ee:	2a00      	cmp	r2, #0
9001c1f0:	dc3e      	bgt.n	9001c270 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
9001c1f2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
9001c1f6:	eb04 0443 	add.w	r4, r4, r3, lsl #1
9001c1fa:	f1bb 0f00 	cmp.w	fp, #0
9001c1fe:	f340 80fe 	ble.w	9001c3fe <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
9001c202:	ee30 0a04 	vadd.f32	s0, s0, s8
9001c206:	9b10      	ldr	r3, [sp, #64]	; 0x40
9001c208:	ee70 0aa4 	vadd.f32	s1, s1, s9
9001c20c:	f1bb 0b01 	subs.w	fp, fp, #1
9001c210:	eeb0 6a62 	vmov.f32	s12, s5
9001c214:	eec6 7a80 	vdiv.f32	s15, s13, s0
9001c218:	ee31 1a05 	vadd.f32	s2, s2, s10
9001c21c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
9001c220:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
9001c224:	eeb0 6a43 	vmov.f32	s12, s6
9001c228:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
9001c22c:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
9001c230:	ee20 7aa7 	vmul.f32	s14, s1, s15
9001c234:	ee61 7a27 	vmul.f32	s15, s2, s15
9001c238:	ee77 2a62 	vsub.f32	s5, s14, s5
9001c23c:	ee37 3ac3 	vsub.f32	s6, s15, s6
9001c240:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
9001c244:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
9001c248:	ee12 2a90 	vmov	r2, s5
9001c24c:	eef0 2a47 	vmov.f32	s5, s14
9001c250:	fb92 f3f3 	sdiv	r3, r2, r3
9001c254:	ee13 2a10 	vmov	r2, s6
9001c258:	9313      	str	r3, [sp, #76]	; 0x4c
9001c25a:	9b10      	ldr	r3, [sp, #64]	; 0x40
9001c25c:	eeb0 3a67 	vmov.f32	s6, s15
9001c260:	fb92 f3f3 	sdiv	r3, r2, r3
9001c264:	9a04      	ldr	r2, [sp, #16]
9001c266:	9314      	str	r3, [sp, #80]	; 0x50
9001c268:	9b10      	ldr	r3, [sp, #64]	; 0x40
9001c26a:	bf08      	it	eq
9001c26c:	4613      	moveq	r3, r2
9001c26e:	e787      	b.n	9001c180 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
9001c270:	1406      	asrs	r6, r0, #16
9001c272:	d45d      	bmi.n	9001c330 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
9001c274:	f8dc 5008 	ldr.w	r5, [ip, #8]
9001c278:	42b5      	cmp	r5, r6
9001c27a:	dd59      	ble.n	9001c330 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
9001c27c:	140f      	asrs	r7, r1, #16
9001c27e:	d457      	bmi.n	9001c330 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
9001c280:	f8dc 200c 	ldr.w	r2, [ip, #12]
9001c284:	42ba      	cmp	r2, r7
9001c286:	dd53      	ble.n	9001c330 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
9001c288:	9a01      	ldr	r2, [sp, #4]
9001c28a:	b22d      	sxth	r5, r5
9001c28c:	fb07 2505 	mla	r5, r7, r5, r2
9001c290:	5daa      	ldrb	r2, [r5, r6]
9001c292:	9d02      	ldr	r5, [sp, #8]
9001c294:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
9001c298:	0e2e      	lsrs	r6, r5, #24
9001c29a:	d049      	beq.n	9001c330 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
9001c29c:	f06f 0201 	mvn.w	r2, #1
9001c2a0:	f3c5 2a07 	ubfx	sl, r5, #8, #8
9001c2a4:	fb02 f20e 	mul.w	r2, r2, lr
9001c2a8:	f834 8002 	ldrh.w	r8, [r4, r2]
9001c2ac:	9203      	str	r2, [sp, #12]
9001c2ae:	9a05      	ldr	r2, [sp, #20]
9001c2b0:	ea4f 2728 	mov.w	r7, r8, asr #8
9001c2b4:	4356      	muls	r6, r2
9001c2b6:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
9001c2ba:	1c72      	adds	r2, r6, #1
9001c2bc:	eb02 2226 	add.w	r2, r2, r6, asr #8
9001c2c0:	f3c5 4607 	ubfx	r6, r5, #16, #8
9001c2c4:	b2ed      	uxtb	r5, r5
9001c2c6:	1212      	asrs	r2, r2, #8
9001c2c8:	fa1f f982 	uxth.w	r9, r2
9001c2cc:	43d2      	mvns	r2, r2
9001c2ce:	fb16 f609 	smulbb	r6, r6, r9
9001c2d2:	b2d2      	uxtb	r2, r2
9001c2d4:	fb15 f509 	smulbb	r5, r5, r9
9001c2d8:	fb07 6702 	mla	r7, r7, r2, r6
9001c2dc:	ea4f 06e8 	mov.w	r6, r8, asr #3
9001c2e0:	fb1a fa09 	smulbb	sl, sl, r9
9001c2e4:	ea4f 08c8 	mov.w	r8, r8, lsl #3
9001c2e8:	b2bf      	uxth	r7, r7
9001c2ea:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
9001c2ee:	fa5f f888 	uxtb.w	r8, r8
9001c2f2:	fb06 a602 	mla	r6, r6, r2, sl
9001c2f6:	fb08 5502 	mla	r5, r8, r2, r5
9001c2fa:	1c7a      	adds	r2, r7, #1
9001c2fc:	b2b6      	uxth	r6, r6
9001c2fe:	b2ad      	uxth	r5, r5
9001c300:	eb02 2717 	add.w	r7, r2, r7, lsr #8
9001c304:	9a03      	ldr	r2, [sp, #12]
9001c306:	f105 0a01 	add.w	sl, r5, #1
9001c30a:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
9001c30e:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
9001c312:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
9001c316:	ea4a 0707 	orr.w	r7, sl, r7
9001c31a:	f106 0a01 	add.w	sl, r6, #1
9001c31e:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
9001c322:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
9001c326:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
9001c32a:	ea47 070a 	orr.w	r7, r7, sl
9001c32e:	52a7      	strh	r7, [r4, r2]
9001c330:	9a13      	ldr	r2, [sp, #76]	; 0x4c
9001c332:	f10e 3eff 	add.w	lr, lr, #4294967295
9001c336:	4410      	add	r0, r2
9001c338:	9a14      	ldr	r2, [sp, #80]	; 0x50
9001c33a:	4411      	add	r1, r2
9001c33c:	e755      	b.n	9001c1ea <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
9001c33e:	f04f 0800 	mov.w	r8, #0
9001c342:	eba3 0208 	sub.w	r2, r3, r8
9001c346:	2a00      	cmp	r2, #0
9001c348:	f77f af53 	ble.w	9001c1f2 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
9001c34c:	f9bc 6008 	ldrsh.w	r6, [ip, #8]
9001c350:	140a      	asrs	r2, r1, #16
9001c352:	9f01      	ldr	r7, [sp, #4]
9001c354:	1405      	asrs	r5, r0, #16
9001c356:	fb06 7202 	mla	r2, r6, r2, r7
9001c35a:	5d52      	ldrb	r2, [r2, r5]
9001c35c:	9d02      	ldr	r5, [sp, #8]
9001c35e:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
9001c362:	0e2e      	lsrs	r6, r5, #24
9001c364:	d044      	beq.n	9001c3f0 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a8>
9001c366:	9a05      	ldr	r2, [sp, #20]
9001c368:	f3c5 2a07 	ubfx	sl, r5, #8, #8
9001c36c:	f834 e018 	ldrh.w	lr, [r4, r8, lsl #1]
9001c370:	4356      	muls	r6, r2
9001c372:	ea4f 272e 	mov.w	r7, lr, asr #8
9001c376:	1c72      	adds	r2, r6, #1
9001c378:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
9001c37c:	eb02 2226 	add.w	r2, r2, r6, asr #8
9001c380:	f3c5 4607 	ubfx	r6, r5, #16, #8
9001c384:	b2ed      	uxtb	r5, r5
9001c386:	1212      	asrs	r2, r2, #8
9001c388:	fa1f f982 	uxth.w	r9, r2
9001c38c:	43d2      	mvns	r2, r2
9001c38e:	fb16 f609 	smulbb	r6, r6, r9
9001c392:	b2d2      	uxtb	r2, r2
9001c394:	fb15 f509 	smulbb	r5, r5, r9
9001c398:	fb07 6702 	mla	r7, r7, r2, r6
9001c39c:	ea4f 06ee 	mov.w	r6, lr, asr #3
9001c3a0:	fb1a fa09 	smulbb	sl, sl, r9
9001c3a4:	ea4f 0ece 	mov.w	lr, lr, lsl #3
9001c3a8:	b2bf      	uxth	r7, r7
9001c3aa:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
9001c3ae:	fa5f fe8e 	uxtb.w	lr, lr
9001c3b2:	fb06 a602 	mla	r6, r6, r2, sl
9001c3b6:	fb0e 5502 	mla	r5, lr, r2, r5
9001c3ba:	1c7a      	adds	r2, r7, #1
9001c3bc:	b2b6      	uxth	r6, r6
9001c3be:	b2ad      	uxth	r5, r5
9001c3c0:	eb02 2717 	add.w	r7, r2, r7, lsr #8
9001c3c4:	f105 0a01 	add.w	sl, r5, #1
9001c3c8:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
9001c3cc:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
9001c3d0:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
9001c3d4:	ea4a 0707 	orr.w	r7, sl, r7
9001c3d8:	f106 0a01 	add.w	sl, r6, #1
9001c3dc:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
9001c3e0:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
9001c3e4:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
9001c3e8:	ea47 070a 	orr.w	r7, r7, sl
9001c3ec:	f824 7018 	strh.w	r7, [r4, r8, lsl #1]
9001c3f0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
9001c3f2:	f108 0801 	add.w	r8, r8, #1
9001c3f6:	4410      	add	r0, r2
9001c3f8:	9a14      	ldr	r2, [sp, #80]	; 0x50
9001c3fa:	4411      	add	r1, r2
9001c3fc:	e7a1      	b.n	9001c342 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
9001c3fe:	b007      	add	sp, #28
9001c400:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

9001c404 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
9001c404:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001c408:	b085      	sub	sp, #20
9001c40a:	468b      	mov	fp, r1
9001c40c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
9001c410:	9813      	ldr	r0, [sp, #76]	; 0x4c
9001c412:	9203      	str	r2, [sp, #12]
9001c414:	6841      	ldr	r1, [r0, #4]
9001c416:	f8dd e058 	ldr.w	lr, [sp, #88]	; 0x58
9001c41a:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
9001c41e:	fb01 2404 	mla	r4, r1, r4, r2
9001c422:	6802      	ldr	r2, [r0, #0]
9001c424:	eb02 0444 	add.w	r4, r2, r4, lsl #1
9001c428:	f8de 2000 	ldr.w	r2, [lr]
9001c42c:	9200      	str	r2, [sp, #0]
9001c42e:	f8de 2004 	ldr.w	r2, [lr, #4]
9001c432:	3204      	adds	r2, #4
9001c434:	9201      	str	r2, [sp, #4]
9001c436:	f1bb 0f00 	cmp.w	fp, #0
9001c43a:	dc03      	bgt.n	9001c444 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
9001c43c:	9a03      	ldr	r2, [sp, #12]
9001c43e:	2a00      	cmp	r2, #0
9001c440:	f340 8153 	ble.w	9001c6ea <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e6>
9001c444:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
9001c446:	f9be 7008 	ldrsh.w	r7, [lr, #8]
9001c44a:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
9001c44e:	9a10      	ldr	r2, [sp, #64]	; 0x40
9001c450:	f9be 600c 	ldrsh.w	r6, [lr, #12]
9001c454:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
9001c458:	2b00      	cmp	r3, #0
9001c45a:	dd0e      	ble.n	9001c47a <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
9001c45c:	1408      	asrs	r0, r1, #16
9001c45e:	d405      	bmi.n	9001c46c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
9001c460:	42b8      	cmp	r0, r7
9001c462:	da03      	bge.n	9001c46c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
9001c464:	1410      	asrs	r0, r2, #16
9001c466:	d401      	bmi.n	9001c46c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
9001c468:	42b0      	cmp	r0, r6
9001c46a:	db07      	blt.n	9001c47c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
9001c46c:	9811      	ldr	r0, [sp, #68]	; 0x44
9001c46e:	3b01      	subs	r3, #1
9001c470:	3402      	adds	r4, #2
9001c472:	4401      	add	r1, r0
9001c474:	9812      	ldr	r0, [sp, #72]	; 0x48
9001c476:	4402      	add	r2, r0
9001c478:	e7ee      	b.n	9001c458 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
9001c47a:	d017      	beq.n	9001c4ac <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
9001c47c:	1e58      	subs	r0, r3, #1
9001c47e:	9d11      	ldr	r5, [sp, #68]	; 0x44
9001c480:	fb05 1500 	mla	r5, r5, r0, r1
9001c484:	142d      	asrs	r5, r5, #16
9001c486:	d409      	bmi.n	9001c49c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
9001c488:	42bd      	cmp	r5, r7
9001c48a:	da07      	bge.n	9001c49c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
9001c48c:	9d12      	ldr	r5, [sp, #72]	; 0x48
9001c48e:	fb05 2000 	mla	r0, r5, r0, r2
9001c492:	1400      	asrs	r0, r0, #16
9001c494:	d402      	bmi.n	9001c49c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
9001c496:	42b0      	cmp	r0, r6
9001c498:	f2c0 80bc 	blt.w	9001c614 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x210>
9001c49c:	2600      	movs	r6, #0
9001c49e:	1998      	adds	r0, r3, r6
9001c4a0:	2800      	cmp	r0, #0
9001c4a2:	dc3e      	bgt.n	9001c522 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
9001c4a4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
9001c4a8:	eb04 0443 	add.w	r4, r4, r3, lsl #1
9001c4ac:	f1bb 0f00 	cmp.w	fp, #0
9001c4b0:	f340 811b 	ble.w	9001c6ea <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e6>
9001c4b4:	ee30 0a04 	vadd.f32	s0, s0, s8
9001c4b8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
9001c4ba:	ee70 0aa4 	vadd.f32	s1, s1, s9
9001c4be:	f1bb 0b01 	subs.w	fp, fp, #1
9001c4c2:	eeb0 6a62 	vmov.f32	s12, s5
9001c4c6:	eec6 7a80 	vdiv.f32	s15, s13, s0
9001c4ca:	ee31 1a05 	vadd.f32	s2, s2, s10
9001c4ce:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
9001c4d2:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
9001c4d6:	eeb0 6a43 	vmov.f32	s12, s6
9001c4da:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
9001c4de:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
9001c4e2:	ee20 7aa7 	vmul.f32	s14, s1, s15
9001c4e6:	ee61 7a27 	vmul.f32	s15, s2, s15
9001c4ea:	ee77 2a62 	vsub.f32	s5, s14, s5
9001c4ee:	ee37 3ac3 	vsub.f32	s6, s15, s6
9001c4f2:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
9001c4f6:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
9001c4fa:	ee12 2a90 	vmov	r2, s5
9001c4fe:	eef0 2a47 	vmov.f32	s5, s14
9001c502:	fb92 f3f3 	sdiv	r3, r2, r3
9001c506:	ee13 2a10 	vmov	r2, s6
9001c50a:	9311      	str	r3, [sp, #68]	; 0x44
9001c50c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
9001c50e:	eeb0 3a67 	vmov.f32	s6, s15
9001c512:	fb92 f3f3 	sdiv	r3, r2, r3
9001c516:	9a03      	ldr	r2, [sp, #12]
9001c518:	9312      	str	r3, [sp, #72]	; 0x48
9001c51a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
9001c51c:	bf08      	it	eq
9001c51e:	4613      	moveq	r3, r2
9001c520:	e789      	b.n	9001c436 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32>
9001c522:	140f      	asrs	r7, r1, #16
9001c524:	d426      	bmi.n	9001c574 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
9001c526:	f8de 5008 	ldr.w	r5, [lr, #8]
9001c52a:	42bd      	cmp	r5, r7
9001c52c:	dd22      	ble.n	9001c574 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
9001c52e:	ea5f 4c22 	movs.w	ip, r2, asr #16
9001c532:	d41f      	bmi.n	9001c574 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
9001c534:	f8de 000c 	ldr.w	r0, [lr, #12]
9001c538:	4560      	cmp	r0, ip
9001c53a:	dd1b      	ble.n	9001c574 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
9001c53c:	9800      	ldr	r0, [sp, #0]
9001c53e:	b22d      	sxth	r5, r5
9001c540:	fb0c 0505 	mla	r5, ip, r5, r0
9001c544:	5de8      	ldrb	r0, [r5, r7]
9001c546:	9d01      	ldr	r5, [sp, #4]
9001c548:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
9001c54c:	0e07      	lsrs	r7, r0, #24
9001c54e:	2fff      	cmp	r7, #255	; 0xff
9001c550:	d116      	bne.n	9001c580 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
9001c552:	f06f 0501 	mvn.w	r5, #1
9001c556:	fb05 f706 	mul.w	r7, r5, r6
9001c55a:	f2a5 75fe 	subw	r5, r5, #2046	; 0x7fe
9001c55e:	ea05 2c10 	and.w	ip, r5, r0, lsr #8
9001c562:	0945      	lsrs	r5, r0, #5
9001c564:	f3c0 00c4 	ubfx	r0, r0, #3, #5
9001c568:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
9001c56c:	ea4c 0505 	orr.w	r5, ip, r5
9001c570:	4305      	orrs	r5, r0
9001c572:	53e5      	strh	r5, [r4, r7]
9001c574:	9811      	ldr	r0, [sp, #68]	; 0x44
9001c576:	3e01      	subs	r6, #1
9001c578:	4401      	add	r1, r0
9001c57a:	9812      	ldr	r0, [sp, #72]	; 0x48
9001c57c:	4402      	add	r2, r0
9001c57e:	e78e      	b.n	9001c49e <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
9001c580:	b2fd      	uxtb	r5, r7
9001c582:	2f00      	cmp	r7, #0
9001c584:	d0f6      	beq.n	9001c574 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
9001c586:	f06f 0701 	mvn.w	r7, #1
9001c58a:	fa1f f985 	uxth.w	r9, r5
9001c58e:	43ed      	mvns	r5, r5
9001c590:	f3c0 2a07 	ubfx	sl, r0, #8, #8
9001c594:	4377      	muls	r7, r6
9001c596:	fb1a fa09 	smulbb	sl, sl, r9
9001c59a:	b2ed      	uxtb	r5, r5
9001c59c:	f834 8007 	ldrh.w	r8, [r4, r7]
9001c5a0:	9702      	str	r7, [sp, #8]
9001c5a2:	f3c0 4707 	ubfx	r7, r0, #16, #8
9001c5a6:	ea4f 2c28 	mov.w	ip, r8, asr #8
9001c5aa:	fb17 f709 	smulbb	r7, r7, r9
9001c5ae:	b2c0      	uxtb	r0, r0
9001c5b0:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
9001c5b4:	fb10 f009 	smulbb	r0, r0, r9
9001c5b8:	fb0c 7c05 	mla	ip, ip, r5, r7
9001c5bc:	ea4f 07e8 	mov.w	r7, r8, asr #3
9001c5c0:	ea4f 08c8 	mov.w	r8, r8, lsl #3
9001c5c4:	fa1f fc8c 	uxth.w	ip, ip
9001c5c8:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
9001c5cc:	fa5f f888 	uxtb.w	r8, r8
9001c5d0:	fb07 a705 	mla	r7, r7, r5, sl
9001c5d4:	fb08 0005 	mla	r0, r8, r5, r0
9001c5d8:	f10c 0501 	add.w	r5, ip, #1
9001c5dc:	b2bf      	uxth	r7, r7
9001c5de:	b280      	uxth	r0, r0
9001c5e0:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
9001c5e4:	f100 0a01 	add.w	sl, r0, #1
9001c5e8:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
9001c5ec:	eb0a 2a10 	add.w	sl, sl, r0, lsr #8
9001c5f0:	9802      	ldr	r0, [sp, #8]
9001c5f2:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
9001c5f6:	ea4a 0c0c 	orr.w	ip, sl, ip
9001c5fa:	f107 0a01 	add.w	sl, r7, #1
9001c5fe:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
9001c602:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
9001c606:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
9001c60a:	ea4c 0c0a 	orr.w	ip, ip, sl
9001c60e:	f824 c000 	strh.w	ip, [r4, r0]
9001c612:	e7af      	b.n	9001c574 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
9001c614:	f04f 0800 	mov.w	r8, #0
9001c618:	eba3 0008 	sub.w	r0, r3, r8
9001c61c:	2800      	cmp	r0, #0
9001c61e:	f77f af41 	ble.w	9001c4a4 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
9001c622:	f9be 6008 	ldrsh.w	r6, [lr, #8]
9001c626:	1410      	asrs	r0, r2, #16
9001c628:	9f00      	ldr	r7, [sp, #0]
9001c62a:	140d      	asrs	r5, r1, #16
9001c62c:	fb06 7000 	mla	r0, r6, r0, r7
9001c630:	5d40      	ldrb	r0, [r0, r5]
9001c632:	9d01      	ldr	r5, [sp, #4]
9001c634:	f855 5020 	ldr.w	r5, [r5, r0, lsl #2]
9001c638:	0e2e      	lsrs	r6, r5, #24
9001c63a:	2eff      	cmp	r6, #255	; 0xff
9001c63c:	d112      	bne.n	9001c664 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x260>
9001c63e:	482c      	ldr	r0, [pc, #176]	; (9001c6f0 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ec>)
9001c640:	ea00 2615 	and.w	r6, r0, r5, lsr #8
9001c644:	0968      	lsrs	r0, r5, #5
9001c646:	f3c5 05c4 	ubfx	r5, r5, #3, #5
9001c64a:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
9001c64e:	4330      	orrs	r0, r6
9001c650:	4328      	orrs	r0, r5
9001c652:	f824 0018 	strh.w	r0, [r4, r8, lsl #1]
9001c656:	9811      	ldr	r0, [sp, #68]	; 0x44
9001c658:	f108 0801 	add.w	r8, r8, #1
9001c65c:	4401      	add	r1, r0
9001c65e:	9812      	ldr	r0, [sp, #72]	; 0x48
9001c660:	4402      	add	r2, r0
9001c662:	e7d9      	b.n	9001c618 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
9001c664:	b2f0      	uxtb	r0, r6
9001c666:	2e00      	cmp	r6, #0
9001c668:	d0f5      	beq.n	9001c656 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
9001c66a:	f834 c018 	ldrh.w	ip, [r4, r8, lsl #1]
9001c66e:	fa1f f980 	uxth.w	r9, r0
9001c672:	f3c5 4607 	ubfx	r6, r5, #16, #8
9001c676:	43c0      	mvns	r0, r0
9001c678:	ea4f 272c 	mov.w	r7, ip, asr #8
9001c67c:	f3c5 2a07 	ubfx	sl, r5, #8, #8
9001c680:	fb16 f609 	smulbb	r6, r6, r9
9001c684:	b2c0      	uxtb	r0, r0
9001c686:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
9001c68a:	b2ed      	uxtb	r5, r5
9001c68c:	fb1a fa09 	smulbb	sl, sl, r9
9001c690:	fb07 6700 	mla	r7, r7, r0, r6
9001c694:	ea4f 06ec 	mov.w	r6, ip, asr #3
9001c698:	fb15 f509 	smulbb	r5, r5, r9
9001c69c:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
9001c6a0:	b2bf      	uxth	r7, r7
9001c6a2:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
9001c6a6:	fa5f fc8c 	uxtb.w	ip, ip
9001c6aa:	fb06 a600 	mla	r6, r6, r0, sl
9001c6ae:	fb0c 5500 	mla	r5, ip, r0, r5
9001c6b2:	1c78      	adds	r0, r7, #1
9001c6b4:	b2b6      	uxth	r6, r6
9001c6b6:	b2ad      	uxth	r5, r5
9001c6b8:	eb00 2717 	add.w	r7, r0, r7, lsr #8
9001c6bc:	f105 0a01 	add.w	sl, r5, #1
9001c6c0:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
9001c6c4:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
9001c6c8:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
9001c6cc:	ea4a 0707 	orr.w	r7, sl, r7
9001c6d0:	f106 0a01 	add.w	sl, r6, #1
9001c6d4:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
9001c6d8:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
9001c6dc:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
9001c6e0:	ea47 070a 	orr.w	r7, r7, sl
9001c6e4:	f824 7018 	strh.w	r7, [r4, r8, lsl #1]
9001c6e8:	e7b5      	b.n	9001c656 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
9001c6ea:	b005      	add	sp, #20
9001c6ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9001c6f0:	fffff800 	.word	0xfffff800

9001c6f4 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
9001c6f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001c6f8:	b087      	sub	sp, #28
9001c6fa:	468b      	mov	fp, r1
9001c6fc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
9001c700:	9c15      	ldr	r4, [sp, #84]	; 0x54
9001c702:	9204      	str	r2, [sp, #16]
9001c704:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
9001c708:	6861      	ldr	r1, [r4, #4]
9001c70a:	9205      	str	r2, [sp, #20]
9001c70c:	f8dd e060 	ldr.w	lr, [sp, #96]	; 0x60
9001c710:	e9dd 2016 	ldrd	r2, r0, [sp, #88]	; 0x58
9001c714:	fb01 2000 	mla	r0, r1, r0, r2
9001c718:	6822      	ldr	r2, [r4, #0]
9001c71a:	eb02 0040 	add.w	r0, r2, r0, lsl #1
9001c71e:	f8de 2000 	ldr.w	r2, [lr]
9001c722:	9201      	str	r2, [sp, #4]
9001c724:	f8de 2004 	ldr.w	r2, [lr, #4]
9001c728:	9202      	str	r2, [sp, #8]
9001c72a:	f1bb 0f00 	cmp.w	fp, #0
9001c72e:	dc03      	bgt.n	9001c738 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44>
9001c730:	9a04      	ldr	r2, [sp, #16]
9001c732:	2a00      	cmp	r2, #0
9001c734:	f340 8142 	ble.w	9001c9bc <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c8>
9001c738:	9a11      	ldr	r2, [sp, #68]	; 0x44
9001c73a:	f9be 7008 	ldrsh.w	r7, [lr, #8]
9001c73e:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
9001c742:	9a12      	ldr	r2, [sp, #72]	; 0x48
9001c744:	f9be 600c 	ldrsh.w	r6, [lr, #12]
9001c748:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
9001c74c:	2b00      	cmp	r3, #0
9001c74e:	dd0e      	ble.n	9001c76e <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
9001c750:	140c      	asrs	r4, r1, #16
9001c752:	d405      	bmi.n	9001c760 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
9001c754:	42bc      	cmp	r4, r7
9001c756:	da03      	bge.n	9001c760 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
9001c758:	1414      	asrs	r4, r2, #16
9001c75a:	d401      	bmi.n	9001c760 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
9001c75c:	42b4      	cmp	r4, r6
9001c75e:	db07      	blt.n	9001c770 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
9001c760:	9c13      	ldr	r4, [sp, #76]	; 0x4c
9001c762:	3b01      	subs	r3, #1
9001c764:	3002      	adds	r0, #2
9001c766:	4421      	add	r1, r4
9001c768:	9c14      	ldr	r4, [sp, #80]	; 0x50
9001c76a:	4422      	add	r2, r4
9001c76c:	e7ee      	b.n	9001c74c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
9001c76e:	d019      	beq.n	9001c7a4 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
9001c770:	1e5c      	subs	r4, r3, #1
9001c772:	9d13      	ldr	r5, [sp, #76]	; 0x4c
9001c774:	fb05 1504 	mla	r5, r5, r4, r1
9001c778:	142d      	asrs	r5, r5, #16
9001c77a:	d409      	bmi.n	9001c790 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
9001c77c:	42bd      	cmp	r5, r7
9001c77e:	da07      	bge.n	9001c790 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
9001c780:	9d14      	ldr	r5, [sp, #80]	; 0x50
9001c782:	fb05 2404 	mla	r4, r5, r4, r2
9001c786:	1424      	asrs	r4, r4, #16
9001c788:	d402      	bmi.n	9001c790 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
9001c78a:	42b4      	cmp	r4, r6
9001c78c:	f2c0 80b1 	blt.w	9001c8f2 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fe>
9001c790:	f04f 0800 	mov.w	r8, #0
9001c794:	eb03 0408 	add.w	r4, r3, r8
9001c798:	2c00      	cmp	r4, #0
9001c79a:	dc3e      	bgt.n	9001c81a <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
9001c79c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
9001c7a0:	eb00 0043 	add.w	r0, r0, r3, lsl #1
9001c7a4:	f1bb 0f00 	cmp.w	fp, #0
9001c7a8:	f340 8108 	ble.w	9001c9bc <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c8>
9001c7ac:	ee30 0a04 	vadd.f32	s0, s0, s8
9001c7b0:	9b10      	ldr	r3, [sp, #64]	; 0x40
9001c7b2:	ee70 0aa4 	vadd.f32	s1, s1, s9
9001c7b6:	f1bb 0b01 	subs.w	fp, fp, #1
9001c7ba:	eeb0 6a62 	vmov.f32	s12, s5
9001c7be:	eec6 7a80 	vdiv.f32	s15, s13, s0
9001c7c2:	ee31 1a05 	vadd.f32	s2, s2, s10
9001c7c6:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
9001c7ca:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
9001c7ce:	eeb0 6a43 	vmov.f32	s12, s6
9001c7d2:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
9001c7d6:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
9001c7da:	ee20 7aa7 	vmul.f32	s14, s1, s15
9001c7de:	ee61 7a27 	vmul.f32	s15, s2, s15
9001c7e2:	ee77 2a62 	vsub.f32	s5, s14, s5
9001c7e6:	ee37 3ac3 	vsub.f32	s6, s15, s6
9001c7ea:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
9001c7ee:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
9001c7f2:	ee12 2a90 	vmov	r2, s5
9001c7f6:	eef0 2a47 	vmov.f32	s5, s14
9001c7fa:	fb92 f3f3 	sdiv	r3, r2, r3
9001c7fe:	ee13 2a10 	vmov	r2, s6
9001c802:	9313      	str	r3, [sp, #76]	; 0x4c
9001c804:	9b10      	ldr	r3, [sp, #64]	; 0x40
9001c806:	eeb0 3a67 	vmov.f32	s6, s15
9001c80a:	fb92 f3f3 	sdiv	r3, r2, r3
9001c80e:	9a04      	ldr	r2, [sp, #16]
9001c810:	9314      	str	r3, [sp, #80]	; 0x50
9001c812:	9b10      	ldr	r3, [sp, #64]	; 0x40
9001c814:	bf08      	it	eq
9001c816:	4613      	moveq	r3, r2
9001c818:	e787      	b.n	9001c72a <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
9001c81a:	140e      	asrs	r6, r1, #16
9001c81c:	d462      	bmi.n	9001c8e4 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
9001c81e:	f8de 5008 	ldr.w	r5, [lr, #8]
9001c822:	42b5      	cmp	r5, r6
9001c824:	dd5e      	ble.n	9001c8e4 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
9001c826:	1417      	asrs	r7, r2, #16
9001c828:	d45c      	bmi.n	9001c8e4 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
9001c82a:	f8de 400c 	ldr.w	r4, [lr, #12]
9001c82e:	42bc      	cmp	r4, r7
9001c830:	dd58      	ble.n	9001c8e4 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
9001c832:	b22d      	sxth	r5, r5
9001c834:	9c02      	ldr	r4, [sp, #8]
9001c836:	fb07 6505 	mla	r5, r7, r5, r6
9001c83a:	5d66      	ldrb	r6, [r4, r5]
9001c83c:	2e00      	cmp	r6, #0
9001c83e:	d051      	beq.n	9001c8e4 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
9001c840:	9c01      	ldr	r4, [sp, #4]
9001c842:	f834 9015 	ldrh.w	r9, [r4, r5, lsl #1]
9001c846:	f06f 0401 	mvn.w	r4, #1
9001c84a:	fb04 f408 	mul.w	r4, r4, r8
9001c84e:	ea4f 2c29 	mov.w	ip, r9, asr #8
9001c852:	5b05      	ldrh	r5, [r0, r4]
9001c854:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
9001c858:	9403      	str	r4, [sp, #12]
9001c85a:	9c05      	ldr	r4, [sp, #20]
9001c85c:	ea4f 0ae5 	mov.w	sl, r5, asr #3
9001c860:	4366      	muls	r6, r4
9001c862:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
9001c866:	1c74      	adds	r4, r6, #1
9001c868:	eb04 2416 	add.w	r4, r4, r6, lsr #8
9001c86c:	122e      	asrs	r6, r5, #8
9001c86e:	1224      	asrs	r4, r4, #8
9001c870:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
9001c874:	00ed      	lsls	r5, r5, #3
9001c876:	b2a7      	uxth	r7, r4
9001c878:	43e4      	mvns	r4, r4
9001c87a:	b2ed      	uxtb	r5, r5
9001c87c:	b2e4      	uxtb	r4, r4
9001c87e:	fb16 f604 	smulbb	r6, r6, r4
9001c882:	fb15 f504 	smulbb	r5, r5, r4
9001c886:	fb0c 6c07 	mla	ip, ip, r7, r6
9001c88a:	ea4f 06e9 	mov.w	r6, r9, asr #3
9001c88e:	fb1a fa04 	smulbb	sl, sl, r4
9001c892:	ea4f 09c9 	mov.w	r9, r9, lsl #3
9001c896:	fa1f fc8c 	uxth.w	ip, ip
9001c89a:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
9001c89e:	fa5f f989 	uxtb.w	r9, r9
9001c8a2:	fb06 a607 	mla	r6, r6, r7, sl
9001c8a6:	f10c 0401 	add.w	r4, ip, #1
9001c8aa:	fb09 5507 	mla	r5, r9, r7, r5
9001c8ae:	eb04 2c1c 	add.w	ip, r4, ip, lsr #8
9001c8b2:	9c03      	ldr	r4, [sp, #12]
9001c8b4:	b2ad      	uxth	r5, r5
9001c8b6:	b2b6      	uxth	r6, r6
9001c8b8:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
9001c8bc:	f105 0a01 	add.w	sl, r5, #1
9001c8c0:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
9001c8c4:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
9001c8c8:	ea4a 0c0c 	orr.w	ip, sl, ip
9001c8cc:	f106 0a01 	add.w	sl, r6, #1
9001c8d0:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
9001c8d4:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
9001c8d8:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
9001c8dc:	ea4c 0c0a 	orr.w	ip, ip, sl
9001c8e0:	f820 c004 	strh.w	ip, [r0, r4]
9001c8e4:	9c13      	ldr	r4, [sp, #76]	; 0x4c
9001c8e6:	f108 38ff 	add.w	r8, r8, #4294967295
9001c8ea:	4421      	add	r1, r4
9001c8ec:	9c14      	ldr	r4, [sp, #80]	; 0x50
9001c8ee:	4422      	add	r2, r4
9001c8f0:	e750      	b.n	9001c794 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
9001c8f2:	f04f 0900 	mov.w	r9, #0
9001c8f6:	eba3 0409 	sub.w	r4, r3, r9
9001c8fa:	2c00      	cmp	r4, #0
9001c8fc:	f77f af4e 	ble.w	9001c79c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
9001c900:	f9be 6008 	ldrsh.w	r6, [lr, #8]
9001c904:	140d      	asrs	r5, r1, #16
9001c906:	1414      	asrs	r4, r2, #16
9001c908:	fb06 5404 	mla	r4, r6, r4, r5
9001c90c:	9d02      	ldr	r5, [sp, #8]
9001c90e:	5d2e      	ldrb	r6, [r5, r4]
9001c910:	2e00      	cmp	r6, #0
9001c912:	d04c      	beq.n	9001c9ae <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
9001c914:	9d01      	ldr	r5, [sp, #4]
9001c916:	f835 8014 	ldrh.w	r8, [r5, r4, lsl #1]
9001c91a:	9c05      	ldr	r4, [sp, #20]
9001c91c:	f830 5019 	ldrh.w	r5, [r0, r9, lsl #1]
9001c920:	ea4f 2c28 	mov.w	ip, r8, asr #8
9001c924:	4366      	muls	r6, r4
9001c926:	ea4f 0ae5 	mov.w	sl, r5, asr #3
9001c92a:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
9001c92e:	1c74      	adds	r4, r6, #1
9001c930:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
9001c934:	eb04 2416 	add.w	r4, r4, r6, lsr #8
9001c938:	122e      	asrs	r6, r5, #8
9001c93a:	1224      	asrs	r4, r4, #8
9001c93c:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
9001c940:	00ed      	lsls	r5, r5, #3
9001c942:	b2a7      	uxth	r7, r4
9001c944:	43e4      	mvns	r4, r4
9001c946:	b2ed      	uxtb	r5, r5
9001c948:	b2e4      	uxtb	r4, r4
9001c94a:	fb16 f604 	smulbb	r6, r6, r4
9001c94e:	fb15 f504 	smulbb	r5, r5, r4
9001c952:	fb0c 6c07 	mla	ip, ip, r7, r6
9001c956:	ea4f 06e8 	mov.w	r6, r8, asr #3
9001c95a:	fb1a fa04 	smulbb	sl, sl, r4
9001c95e:	ea4f 08c8 	mov.w	r8, r8, lsl #3
9001c962:	fa1f fc8c 	uxth.w	ip, ip
9001c966:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
9001c96a:	fa5f f888 	uxtb.w	r8, r8
9001c96e:	fb06 a607 	mla	r6, r6, r7, sl
9001c972:	f10c 0401 	add.w	r4, ip, #1
9001c976:	fb08 5507 	mla	r5, r8, r7, r5
9001c97a:	eb04 2c1c 	add.w	ip, r4, ip, lsr #8
9001c97e:	b2ad      	uxth	r5, r5
9001c980:	b2b6      	uxth	r6, r6
9001c982:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
9001c986:	f105 0a01 	add.w	sl, r5, #1
9001c98a:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
9001c98e:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
9001c992:	ea4a 0c0c 	orr.w	ip, sl, ip
9001c996:	f106 0a01 	add.w	sl, r6, #1
9001c99a:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
9001c99e:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
9001c9a2:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
9001c9a6:	ea4c 0c0a 	orr.w	ip, ip, sl
9001c9aa:	f820 c019 	strh.w	ip, [r0, r9, lsl #1]
9001c9ae:	9c13      	ldr	r4, [sp, #76]	; 0x4c
9001c9b0:	f109 0901 	add.w	r9, r9, #1
9001c9b4:	4421      	add	r1, r4
9001c9b6:	9c14      	ldr	r4, [sp, #80]	; 0x50
9001c9b8:	4422      	add	r2, r4
9001c9ba:	e79c      	b.n	9001c8f6 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x202>
9001c9bc:	b007      	add	sp, #28
9001c9be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

9001c9c2 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
9001c9c2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001c9c6:	b085      	sub	sp, #20
9001c9c8:	468b      	mov	fp, r1
9001c9ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
9001c9ce:	9c13      	ldr	r4, [sp, #76]	; 0x4c
9001c9d0:	9203      	str	r2, [sp, #12]
9001c9d2:	6861      	ldr	r1, [r4, #4]
9001c9d4:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
9001c9d8:	e9dd 2014 	ldrd	r2, r0, [sp, #80]	; 0x50
9001c9dc:	fb01 2000 	mla	r0, r1, r0, r2
9001c9e0:	6822      	ldr	r2, [r4, #0]
9001c9e2:	eb02 0040 	add.w	r0, r2, r0, lsl #1
9001c9e6:	f8d8 2000 	ldr.w	r2, [r8]
9001c9ea:	9200      	str	r2, [sp, #0]
9001c9ec:	f8d8 2004 	ldr.w	r2, [r8, #4]
9001c9f0:	9201      	str	r2, [sp, #4]
9001c9f2:	f1bb 0f00 	cmp.w	fp, #0
9001c9f6:	dc03      	bgt.n	9001ca00 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
9001c9f8:	9a03      	ldr	r2, [sp, #12]
9001c9fa:	2a00      	cmp	r2, #0
9001c9fc:	f340 8146 	ble.w	9001cc8c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
9001ca00:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
9001ca02:	f9b8 7008 	ldrsh.w	r7, [r8, #8]
9001ca06:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
9001ca0a:	9a10      	ldr	r2, [sp, #64]	; 0x40
9001ca0c:	f9b8 600c 	ldrsh.w	r6, [r8, #12]
9001ca10:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
9001ca14:	2b00      	cmp	r3, #0
9001ca16:	dd0e      	ble.n	9001ca36 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
9001ca18:	140c      	asrs	r4, r1, #16
9001ca1a:	d405      	bmi.n	9001ca28 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
9001ca1c:	42bc      	cmp	r4, r7
9001ca1e:	da03      	bge.n	9001ca28 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
9001ca20:	1414      	asrs	r4, r2, #16
9001ca22:	d401      	bmi.n	9001ca28 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
9001ca24:	42b4      	cmp	r4, r6
9001ca26:	db07      	blt.n	9001ca38 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
9001ca28:	9c11      	ldr	r4, [sp, #68]	; 0x44
9001ca2a:	3b01      	subs	r3, #1
9001ca2c:	3002      	adds	r0, #2
9001ca2e:	4421      	add	r1, r4
9001ca30:	9c12      	ldr	r4, [sp, #72]	; 0x48
9001ca32:	4422      	add	r2, r4
9001ca34:	e7ee      	b.n	9001ca14 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
9001ca36:	d017      	beq.n	9001ca68 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
9001ca38:	1e5c      	subs	r4, r3, #1
9001ca3a:	9d11      	ldr	r5, [sp, #68]	; 0x44
9001ca3c:	fb05 1504 	mla	r5, r5, r4, r1
9001ca40:	142d      	asrs	r5, r5, #16
9001ca42:	d409      	bmi.n	9001ca58 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
9001ca44:	42bd      	cmp	r5, r7
9001ca46:	da07      	bge.n	9001ca58 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
9001ca48:	9d12      	ldr	r5, [sp, #72]	; 0x48
9001ca4a:	fb05 2404 	mla	r4, r5, r4, r2
9001ca4e:	1424      	asrs	r4, r4, #16
9001ca50:	d402      	bmi.n	9001ca58 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
9001ca52:	42b4      	cmp	r4, r6
9001ca54:	f2c0 80b3 	blt.w	9001cbbe <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fc>
9001ca58:	2600      	movs	r6, #0
9001ca5a:	199c      	adds	r4, r3, r6
9001ca5c:	2c00      	cmp	r4, #0
9001ca5e:	dc3e      	bgt.n	9001cade <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
9001ca60:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
9001ca64:	eb00 0043 	add.w	r0, r0, r3, lsl #1
9001ca68:	f1bb 0f00 	cmp.w	fp, #0
9001ca6c:	f340 810e 	ble.w	9001cc8c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
9001ca70:	ee30 0a04 	vadd.f32	s0, s0, s8
9001ca74:	9b0e      	ldr	r3, [sp, #56]	; 0x38
9001ca76:	ee70 0aa4 	vadd.f32	s1, s1, s9
9001ca7a:	f1bb 0b01 	subs.w	fp, fp, #1
9001ca7e:	eeb0 6a62 	vmov.f32	s12, s5
9001ca82:	eec6 7a80 	vdiv.f32	s15, s13, s0
9001ca86:	ee31 1a05 	vadd.f32	s2, s2, s10
9001ca8a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
9001ca8e:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
9001ca92:	eeb0 6a43 	vmov.f32	s12, s6
9001ca96:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
9001ca9a:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
9001ca9e:	ee20 7aa7 	vmul.f32	s14, s1, s15
9001caa2:	ee61 7a27 	vmul.f32	s15, s2, s15
9001caa6:	ee77 2a62 	vsub.f32	s5, s14, s5
9001caaa:	ee37 3ac3 	vsub.f32	s6, s15, s6
9001caae:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
9001cab2:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
9001cab6:	ee12 2a90 	vmov	r2, s5
9001caba:	eef0 2a47 	vmov.f32	s5, s14
9001cabe:	fb92 f3f3 	sdiv	r3, r2, r3
9001cac2:	ee13 2a10 	vmov	r2, s6
9001cac6:	9311      	str	r3, [sp, #68]	; 0x44
9001cac8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
9001caca:	eeb0 3a67 	vmov.f32	s6, s15
9001cace:	fb92 f3f3 	sdiv	r3, r2, r3
9001cad2:	9a03      	ldr	r2, [sp, #12]
9001cad4:	9312      	str	r3, [sp, #72]	; 0x48
9001cad6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
9001cad8:	bf08      	it	eq
9001cada:	4613      	moveq	r3, r2
9001cadc:	e789      	b.n	9001c9f2 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
9001cade:	140f      	asrs	r7, r1, #16
9001cae0:	d418      	bmi.n	9001cb14 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
9001cae2:	f8d8 5008 	ldr.w	r5, [r8, #8]
9001cae6:	42bd      	cmp	r5, r7
9001cae8:	dd14      	ble.n	9001cb14 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
9001caea:	ea5f 4c22 	movs.w	ip, r2, asr #16
9001caee:	d411      	bmi.n	9001cb14 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
9001caf0:	f8d8 400c 	ldr.w	r4, [r8, #12]
9001caf4:	4564      	cmp	r4, ip
9001caf6:	dd0d      	ble.n	9001cb14 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
9001caf8:	b22d      	sxth	r5, r5
9001cafa:	9c01      	ldr	r4, [sp, #4]
9001cafc:	fb0c 7505 	mla	r5, ip, r5, r7
9001cb00:	5d64      	ldrb	r4, [r4, r5]
9001cb02:	2cff      	cmp	r4, #255	; 0xff
9001cb04:	d10c      	bne.n	9001cb20 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15e>
9001cb06:	9c00      	ldr	r4, [sp, #0]
9001cb08:	f834 5015 	ldrh.w	r5, [r4, r5, lsl #1]
9001cb0c:	f06f 0401 	mvn.w	r4, #1
9001cb10:	4374      	muls	r4, r6
9001cb12:	5305      	strh	r5, [r0, r4]
9001cb14:	9c11      	ldr	r4, [sp, #68]	; 0x44
9001cb16:	3e01      	subs	r6, #1
9001cb18:	4421      	add	r1, r4
9001cb1a:	9c12      	ldr	r4, [sp, #72]	; 0x48
9001cb1c:	4422      	add	r2, r4
9001cb1e:	e79c      	b.n	9001ca5a <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
9001cb20:	2c00      	cmp	r4, #0
9001cb22:	d0f7      	beq.n	9001cb14 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
9001cb24:	9f00      	ldr	r7, [sp, #0]
9001cb26:	fa1f fc84 	uxth.w	ip, r4
9001cb2a:	43e4      	mvns	r4, r4
9001cb2c:	f837 9015 	ldrh.w	r9, [r7, r5, lsl #1]
9001cb30:	f06f 0501 	mvn.w	r5, #1
9001cb34:	b2e4      	uxtb	r4, r4
9001cb36:	4375      	muls	r5, r6
9001cb38:	ea4f 2e29 	mov.w	lr, r9, asr #8
9001cb3c:	9502      	str	r5, [sp, #8]
9001cb3e:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
9001cb42:	5b45      	ldrh	r5, [r0, r5]
9001cb44:	122f      	asrs	r7, r5, #8
9001cb46:	ea4f 0ae5 	mov.w	sl, r5, asr #3
9001cb4a:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
9001cb4e:	00ed      	lsls	r5, r5, #3
9001cb50:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
9001cb54:	fb17 f704 	smulbb	r7, r7, r4
9001cb58:	b2ed      	uxtb	r5, r5
9001cb5a:	fb1a fa04 	smulbb	sl, sl, r4
9001cb5e:	fb0e 7e0c 	mla	lr, lr, ip, r7
9001cb62:	ea4f 07e9 	mov.w	r7, r9, asr #3
9001cb66:	fb15 f504 	smulbb	r5, r5, r4
9001cb6a:	ea4f 09c9 	mov.w	r9, r9, lsl #3
9001cb6e:	fa1f fe8e 	uxth.w	lr, lr
9001cb72:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
9001cb76:	fa5f f989 	uxtb.w	r9, r9
9001cb7a:	fb07 a70c 	mla	r7, r7, ip, sl
9001cb7e:	f10e 0401 	add.w	r4, lr, #1
9001cb82:	fb09 550c 	mla	r5, r9, ip, r5
9001cb86:	eb04 2e1e 	add.w	lr, r4, lr, lsr #8
9001cb8a:	9c02      	ldr	r4, [sp, #8]
9001cb8c:	b2ad      	uxth	r5, r5
9001cb8e:	b2bf      	uxth	r7, r7
9001cb90:	f40e 4e78 	and.w	lr, lr, #63488	; 0xf800
9001cb94:	f105 0a01 	add.w	sl, r5, #1
9001cb98:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
9001cb9c:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
9001cba0:	ea4a 0e0e 	orr.w	lr, sl, lr
9001cba4:	f107 0a01 	add.w	sl, r7, #1
9001cba8:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
9001cbac:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
9001cbb0:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
9001cbb4:	ea4e 0e0a 	orr.w	lr, lr, sl
9001cbb8:	f820 e004 	strh.w	lr, [r0, r4]
9001cbbc:	e7aa      	b.n	9001cb14 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
9001cbbe:	f04f 0900 	mov.w	r9, #0
9001cbc2:	eba3 0409 	sub.w	r4, r3, r9
9001cbc6:	2c00      	cmp	r4, #0
9001cbc8:	f77f af4a 	ble.w	9001ca60 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
9001cbcc:	1414      	asrs	r4, r2, #16
9001cbce:	f9b8 6008 	ldrsh.w	r6, [r8, #8]
9001cbd2:	140d      	asrs	r5, r1, #16
9001cbd4:	fb06 5504 	mla	r5, r6, r4, r5
9001cbd8:	9c01      	ldr	r4, [sp, #4]
9001cbda:	5d64      	ldrb	r4, [r4, r5]
9001cbdc:	2cff      	cmp	r4, #255	; 0xff
9001cbde:	d10b      	bne.n	9001cbf8 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
9001cbe0:	9c00      	ldr	r4, [sp, #0]
9001cbe2:	f834 4015 	ldrh.w	r4, [r4, r5, lsl #1]
9001cbe6:	f820 4019 	strh.w	r4, [r0, r9, lsl #1]
9001cbea:	9c11      	ldr	r4, [sp, #68]	; 0x44
9001cbec:	f109 0901 	add.w	r9, r9, #1
9001cbf0:	4421      	add	r1, r4
9001cbf2:	9c12      	ldr	r4, [sp, #72]	; 0x48
9001cbf4:	4422      	add	r2, r4
9001cbf6:	e7e4      	b.n	9001cbc2 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
9001cbf8:	2c00      	cmp	r4, #0
9001cbfa:	d0f6      	beq.n	9001cbea <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
9001cbfc:	9e00      	ldr	r6, [sp, #0]
9001cbfe:	b2a7      	uxth	r7, r4
9001cc00:	43e4      	mvns	r4, r4
9001cc02:	f836 e015 	ldrh.w	lr, [r6, r5, lsl #1]
9001cc06:	f830 5019 	ldrh.w	r5, [r0, r9, lsl #1]
9001cc0a:	b2e4      	uxtb	r4, r4
9001cc0c:	ea4f 2c2e 	mov.w	ip, lr, asr #8
9001cc10:	122e      	asrs	r6, r5, #8
9001cc12:	ea4f 0ae5 	mov.w	sl, r5, asr #3
9001cc16:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
9001cc1a:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
9001cc1e:	00ed      	lsls	r5, r5, #3
9001cc20:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
9001cc24:	fb16 f604 	smulbb	r6, r6, r4
9001cc28:	b2ed      	uxtb	r5, r5
9001cc2a:	fb1a fa04 	smulbb	sl, sl, r4
9001cc2e:	fb0c 6c07 	mla	ip, ip, r7, r6
9001cc32:	ea4f 06ee 	mov.w	r6, lr, asr #3
9001cc36:	fb15 f504 	smulbb	r5, r5, r4
9001cc3a:	ea4f 0ece 	mov.w	lr, lr, lsl #3
9001cc3e:	fa1f fc8c 	uxth.w	ip, ip
9001cc42:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
9001cc46:	fa5f fe8e 	uxtb.w	lr, lr
9001cc4a:	fb06 a607 	mla	r6, r6, r7, sl
9001cc4e:	f10c 0401 	add.w	r4, ip, #1
9001cc52:	fb0e 5507 	mla	r5, lr, r7, r5
9001cc56:	eb04 2c1c 	add.w	ip, r4, ip, lsr #8
9001cc5a:	b2ad      	uxth	r5, r5
9001cc5c:	b2b6      	uxth	r6, r6
9001cc5e:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
9001cc62:	f105 0a01 	add.w	sl, r5, #1
9001cc66:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
9001cc6a:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
9001cc6e:	ea4a 0c0c 	orr.w	ip, sl, ip
9001cc72:	f106 0a01 	add.w	sl, r6, #1
9001cc76:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
9001cc7a:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
9001cc7e:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
9001cc82:	ea4c 0c0a 	orr.w	ip, ip, sl
9001cc86:	f820 c019 	strh.w	ip, [r0, r9, lsl #1]
9001cc8a:	e7ae      	b.n	9001cbea <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
9001cc8c:	b005      	add	sp, #20
9001cc8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

9001cc92 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
9001cc92:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001cc96:	b085      	sub	sp, #20
9001cc98:	9813      	ldr	r0, [sp, #76]	; 0x4c
9001cc9a:	9203      	str	r2, [sp, #12]
9001cc9c:	f89d 205c 	ldrb.w	r2, [sp, #92]	; 0x5c
9001cca0:	9100      	str	r1, [sp, #0]
9001cca2:	9201      	str	r2, [sp, #4]
9001cca4:	6841      	ldr	r1, [r0, #4]
9001cca6:	f8dd e058 	ldr.w	lr, [sp, #88]	; 0x58
9001ccaa:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
9001ccae:	fb01 2404 	mla	r4, r1, r4, r2
9001ccb2:	6802      	ldr	r2, [r0, #0]
9001ccb4:	eb02 0444 	add.w	r4, r2, r4, lsl #1
9001ccb8:	f8de 2000 	ldr.w	r2, [lr]
9001ccbc:	9202      	str	r2, [sp, #8]
9001ccbe:	9a01      	ldr	r2, [sp, #4]
9001ccc0:	43d6      	mvns	r6, r2
9001ccc2:	b2f6      	uxtb	r6, r6
9001ccc4:	9a00      	ldr	r2, [sp, #0]
9001ccc6:	2a00      	cmp	r2, #0
9001ccc8:	dc03      	bgt.n	9001ccd2 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
9001ccca:	9a03      	ldr	r2, [sp, #12]
9001cccc:	2a00      	cmp	r2, #0
9001ccce:	f340 8124 	ble.w	9001cf1a <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
9001ccd2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
9001ccd4:	f9be c008 	ldrsh.w	ip, [lr, #8]
9001ccd8:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
9001ccdc:	9a10      	ldr	r2, [sp, #64]	; 0x40
9001ccde:	f9be 700c 	ldrsh.w	r7, [lr, #12]
9001cce2:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
9001cce6:	2b00      	cmp	r3, #0
9001cce8:	dd0e      	ble.n	9001cd08 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
9001ccea:	1408      	asrs	r0, r1, #16
9001ccec:	d405      	bmi.n	9001ccfa <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
9001ccee:	4560      	cmp	r0, ip
9001ccf0:	da03      	bge.n	9001ccfa <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
9001ccf2:	1410      	asrs	r0, r2, #16
9001ccf4:	d401      	bmi.n	9001ccfa <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
9001ccf6:	42b8      	cmp	r0, r7
9001ccf8:	db07      	blt.n	9001cd0a <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
9001ccfa:	9811      	ldr	r0, [sp, #68]	; 0x44
9001ccfc:	3b01      	subs	r3, #1
9001ccfe:	3402      	adds	r4, #2
9001cd00:	4401      	add	r1, r0
9001cd02:	9812      	ldr	r0, [sp, #72]	; 0x48
9001cd04:	4402      	add	r2, r0
9001cd06:	e7ee      	b.n	9001cce6 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
9001cd08:	d06e      	beq.n	9001cde8 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
9001cd0a:	1e58      	subs	r0, r3, #1
9001cd0c:	9d11      	ldr	r5, [sp, #68]	; 0x44
9001cd0e:	fb05 1500 	mla	r5, r5, r0, r1
9001cd12:	142d      	asrs	r5, r5, #16
9001cd14:	d45c      	bmi.n	9001cdd0 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
9001cd16:	4565      	cmp	r5, ip
9001cd18:	da5a      	bge.n	9001cdd0 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
9001cd1a:	9d12      	ldr	r5, [sp, #72]	; 0x48
9001cd1c:	fb05 2000 	mla	r0, r5, r0, r2
9001cd20:	1400      	asrs	r0, r0, #16
9001cd22:	d455      	bmi.n	9001cdd0 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
9001cd24:	42b8      	cmp	r0, r7
9001cd26:	da53      	bge.n	9001cdd0 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
9001cd28:	4699      	mov	r9, r3
9001cd2a:	46a2      	mov	sl, r4
9001cd2c:	f8bd b004 	ldrh.w	fp, [sp, #4]
9001cd30:	f1b9 0f00 	cmp.w	r9, #0
9001cd34:	dd54      	ble.n	9001cde0 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
9001cd36:	f9be 7008 	ldrsh.w	r7, [lr, #8]
9001cd3a:	140d      	asrs	r5, r1, #16
9001cd3c:	1410      	asrs	r0, r2, #16
9001cd3e:	f109 39ff 	add.w	r9, r9, #4294967295
9001cd42:	fb07 5000 	mla	r0, r7, r0, r5
9001cd46:	9d02      	ldr	r5, [sp, #8]
9001cd48:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
9001cd4c:	f8ba 5000 	ldrh.w	r5, [sl]
9001cd50:	ea4f 2c20 	mov.w	ip, r0, asr #8
9001cd54:	122f      	asrs	r7, r5, #8
9001cd56:	ea4f 08e5 	mov.w	r8, r5, asr #3
9001cd5a:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
9001cd5e:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
9001cd62:	00ed      	lsls	r5, r5, #3
9001cd64:	f008 08fc 	and.w	r8, r8, #252	; 0xfc
9001cd68:	fb17 f706 	smulbb	r7, r7, r6
9001cd6c:	b2ed      	uxtb	r5, r5
9001cd6e:	fb18 f806 	smulbb	r8, r8, r6
9001cd72:	fb0c 7c0b 	mla	ip, ip, fp, r7
9001cd76:	10c7      	asrs	r7, r0, #3
9001cd78:	fb15 f506 	smulbb	r5, r5, r6
9001cd7c:	00c0      	lsls	r0, r0, #3
9001cd7e:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
9001cd82:	fa1f fc8c 	uxth.w	ip, ip
9001cd86:	b2c0      	uxtb	r0, r0
9001cd88:	fb07 870b 	mla	r7, r7, fp, r8
9001cd8c:	fb00 500b 	mla	r0, r0, fp, r5
9001cd90:	f10c 0501 	add.w	r5, ip, #1
9001cd94:	b2bf      	uxth	r7, r7
9001cd96:	b280      	uxth	r0, r0
9001cd98:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
9001cd9c:	f107 0801 	add.w	r8, r7, #1
9001cda0:	1c45      	adds	r5, r0, #1
9001cda2:	eb08 2817 	add.w	r8, r8, r7, lsr #8
9001cda6:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
9001cdaa:	eb05 2510 	add.w	r5, r5, r0, lsr #8
9001cdae:	9811      	ldr	r0, [sp, #68]	; 0x44
9001cdb0:	ea4f 1858 	mov.w	r8, r8, lsr #5
9001cdb4:	f3c5 25c4 	ubfx	r5, r5, #11, #5
9001cdb8:	4401      	add	r1, r0
9001cdba:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
9001cdbe:	9812      	ldr	r0, [sp, #72]	; 0x48
9001cdc0:	ea45 0c0c 	orr.w	ip, r5, ip
9001cdc4:	4402      	add	r2, r0
9001cdc6:	ea4c 0c08 	orr.w	ip, ip, r8
9001cdca:	f82a cb02 	strh.w	ip, [sl], #2
9001cdce:	e7af      	b.n	9001cd30 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
9001cdd0:	f04f 0800 	mov.w	r8, #0
9001cdd4:	f8bd a004 	ldrh.w	sl, [sp, #4]
9001cdd8:	eb03 0008 	add.w	r0, r3, r8
9001cddc:	2800      	cmp	r0, #0
9001cdde:	dc41      	bgt.n	9001ce64 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
9001cde0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
9001cde4:	eb04 0443 	add.w	r4, r4, r3, lsl #1
9001cde8:	9b00      	ldr	r3, [sp, #0]
9001cdea:	2b00      	cmp	r3, #0
9001cdec:	f340 8095 	ble.w	9001cf1a <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
9001cdf0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
9001cdf4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
9001cdf6:	ee30 0a04 	vadd.f32	s0, s0, s8
9001cdfa:	ee70 0aa4 	vadd.f32	s1, s1, s9
9001cdfe:	eef0 6a62 	vmov.f32	s13, s5
9001ce02:	eec7 7a00 	vdiv.f32	s15, s14, s0
9001ce06:	ee31 1a05 	vadd.f32	s2, s2, s10
9001ce0a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
9001ce0e:	edcd 6a0f 	vstr	s13, [sp, #60]	; 0x3c
9001ce12:	eef0 6a43 	vmov.f32	s13, s6
9001ce16:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
9001ce1a:	edcd 6a10 	vstr	s13, [sp, #64]	; 0x40
9001ce1e:	ee20 7aa7 	vmul.f32	s14, s1, s15
9001ce22:	ee61 7a27 	vmul.f32	s15, s2, s15
9001ce26:	ee77 2a62 	vsub.f32	s5, s14, s5
9001ce2a:	ee37 3ac3 	vsub.f32	s6, s15, s6
9001ce2e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
9001ce32:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
9001ce36:	ee12 2a90 	vmov	r2, s5
9001ce3a:	eef0 2a47 	vmov.f32	s5, s14
9001ce3e:	fb92 f3f3 	sdiv	r3, r2, r3
9001ce42:	ee13 2a10 	vmov	r2, s6
9001ce46:	9311      	str	r3, [sp, #68]	; 0x44
9001ce48:	9b0e      	ldr	r3, [sp, #56]	; 0x38
9001ce4a:	eeb0 3a67 	vmov.f32	s6, s15
9001ce4e:	fb92 f3f3 	sdiv	r3, r2, r3
9001ce52:	9312      	str	r3, [sp, #72]	; 0x48
9001ce54:	9b00      	ldr	r3, [sp, #0]
9001ce56:	9a03      	ldr	r2, [sp, #12]
9001ce58:	3b01      	subs	r3, #1
9001ce5a:	9300      	str	r3, [sp, #0]
9001ce5c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
9001ce5e:	bf08      	it	eq
9001ce60:	4613      	moveq	r3, r2
9001ce62:	e72f      	b.n	9001ccc4 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32>
9001ce64:	140f      	asrs	r7, r1, #16
9001ce66:	d451      	bmi.n	9001cf0c <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
9001ce68:	f8de 5008 	ldr.w	r5, [lr, #8]
9001ce6c:	42bd      	cmp	r5, r7
9001ce6e:	dd4d      	ble.n	9001cf0c <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
9001ce70:	ea5f 4c22 	movs.w	ip, r2, asr #16
9001ce74:	d44a      	bmi.n	9001cf0c <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
9001ce76:	f8de 000c 	ldr.w	r0, [lr, #12]
9001ce7a:	4560      	cmp	r0, ip
9001ce7c:	dd46      	ble.n	9001cf0c <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
9001ce7e:	b22d      	sxth	r5, r5
9001ce80:	9802      	ldr	r0, [sp, #8]
9001ce82:	fb0c 7505 	mla	r5, ip, r5, r7
9001ce86:	f830 0015 	ldrh.w	r0, [r0, r5, lsl #1]
9001ce8a:	f06f 0501 	mvn.w	r5, #1
9001ce8e:	fb05 fb08 	mul.w	fp, r5, r8
9001ce92:	ea4f 2c20 	mov.w	ip, r0, asr #8
9001ce96:	f834 500b 	ldrh.w	r5, [r4, fp]
9001ce9a:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
9001ce9e:	122f      	asrs	r7, r5, #8
9001cea0:	ea4f 09e5 	mov.w	r9, r5, asr #3
9001cea4:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
9001cea8:	00ed      	lsls	r5, r5, #3
9001ceaa:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
9001ceae:	fb17 f706 	smulbb	r7, r7, r6
9001ceb2:	b2ed      	uxtb	r5, r5
9001ceb4:	fb19 f906 	smulbb	r9, r9, r6
9001ceb8:	fb0c 7c0a 	mla	ip, ip, sl, r7
9001cebc:	10c7      	asrs	r7, r0, #3
9001cebe:	fb15 f506 	smulbb	r5, r5, r6
9001cec2:	00c0      	lsls	r0, r0, #3
9001cec4:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
9001cec8:	fa1f fc8c 	uxth.w	ip, ip
9001cecc:	b2c0      	uxtb	r0, r0
9001cece:	fb07 970a 	mla	r7, r7, sl, r9
9001ced2:	fb00 500a 	mla	r0, r0, sl, r5
9001ced6:	f10c 0501 	add.w	r5, ip, #1
9001ceda:	b2bf      	uxth	r7, r7
9001cedc:	b280      	uxth	r0, r0
9001cede:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
9001cee2:	f107 0901 	add.w	r9, r7, #1
9001cee6:	1c45      	adds	r5, r0, #1
9001cee8:	eb09 2917 	add.w	r9, r9, r7, lsr #8
9001ceec:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
9001cef0:	eb05 2510 	add.w	r5, r5, r0, lsr #8
9001cef4:	ea4f 1959 	mov.w	r9, r9, lsr #5
9001cef8:	f3c5 25c4 	ubfx	r5, r5, #11, #5
9001cefc:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
9001cf00:	ea45 0c0c 	orr.w	ip, r5, ip
9001cf04:	ea4c 0c09 	orr.w	ip, ip, r9
9001cf08:	f824 c00b 	strh.w	ip, [r4, fp]
9001cf0c:	9811      	ldr	r0, [sp, #68]	; 0x44
9001cf0e:	f108 38ff 	add.w	r8, r8, #4294967295
9001cf12:	4401      	add	r1, r0
9001cf14:	9812      	ldr	r0, [sp, #72]	; 0x48
9001cf16:	4402      	add	r2, r0
9001cf18:	e75e      	b.n	9001cdd8 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
9001cf1a:	b005      	add	sp, #20
9001cf1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

9001cf20 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
9001cf20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001cf24:	b085      	sub	sp, #20
9001cf26:	4693      	mov	fp, r2
9001cf28:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
9001cf2c:	9e13      	ldr	r6, [sp, #76]	; 0x4c
9001cf2e:	9d16      	ldr	r5, [sp, #88]	; 0x58
9001cf30:	6870      	ldr	r0, [r6, #4]
9001cf32:	9101      	str	r1, [sp, #4]
9001cf34:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
9001cf38:	e9dd ec11 	ldrd	lr, ip, [sp, #68]	; 0x44
9001cf3c:	fb00 2404 	mla	r4, r0, r4, r2
9001cf40:	6832      	ldr	r2, [r6, #0]
9001cf42:	eb02 0444 	add.w	r4, r2, r4, lsl #1
9001cf46:	682a      	ldr	r2, [r5, #0]
9001cf48:	9202      	str	r2, [sp, #8]
9001cf4a:	9a01      	ldr	r2, [sp, #4]
9001cf4c:	2a00      	cmp	r2, #0
9001cf4e:	dc03      	bgt.n	9001cf58 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
9001cf50:	f1bb 0f00 	cmp.w	fp, #0
9001cf54:	f340 809a 	ble.w	9001d08c <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
9001cf58:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
9001cf5a:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
9001cf5e:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
9001cf62:	9a10      	ldr	r2, [sp, #64]	; 0x40
9001cf64:	f9b5 800c 	ldrsh.w	r8, [r5, #12]
9001cf68:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
9001cf6c:	2b00      	cmp	r3, #0
9001cf6e:	dd0c      	ble.n	9001cf8a <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
9001cf70:	1406      	asrs	r6, r0, #16
9001cf72:	d405      	bmi.n	9001cf80 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
9001cf74:	454e      	cmp	r6, r9
9001cf76:	da03      	bge.n	9001cf80 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
9001cf78:	1416      	asrs	r6, r2, #16
9001cf7a:	d401      	bmi.n	9001cf80 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
9001cf7c:	4546      	cmp	r6, r8
9001cf7e:	db05      	blt.n	9001cf8c <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
9001cf80:	4470      	add	r0, lr
9001cf82:	4462      	add	r2, ip
9001cf84:	3b01      	subs	r3, #1
9001cf86:	3402      	adds	r4, #2
9001cf88:	e7f0      	b.n	9001cf6c <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
9001cf8a:	d00f      	beq.n	9001cfac <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
9001cf8c:	1e5e      	subs	r6, r3, #1
9001cf8e:	fb0e 0706 	mla	r7, lr, r6, r0
9001cf92:	143f      	asrs	r7, r7, #16
9001cf94:	d541      	bpl.n	9001d01a <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xfa>
9001cf96:	eb04 0643 	add.w	r6, r4, r3, lsl #1
9001cf9a:	4698      	mov	r8, r3
9001cf9c:	9603      	str	r6, [sp, #12]
9001cf9e:	f1b8 0f00 	cmp.w	r8, #0
9001cfa2:	dc56      	bgt.n	9001d052 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x132>
9001cfa4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
9001cfa8:	eb04 0443 	add.w	r4, r4, r3, lsl #1
9001cfac:	9b01      	ldr	r3, [sp, #4]
9001cfae:	2b00      	cmp	r3, #0
9001cfb0:	dd6c      	ble.n	9001d08c <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
9001cfb2:	ee30 0a04 	vadd.f32	s0, s0, s8
9001cfb6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
9001cfb8:	ee70 0aa4 	vadd.f32	s1, s1, s9
9001cfbc:	eeb0 6a62 	vmov.f32	s12, s5
9001cfc0:	eec6 7a80 	vdiv.f32	s15, s13, s0
9001cfc4:	ee31 1a05 	vadd.f32	s2, s2, s10
9001cfc8:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
9001cfcc:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
9001cfd0:	eeb0 6a43 	vmov.f32	s12, s6
9001cfd4:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
9001cfd8:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
9001cfdc:	ee20 7aa7 	vmul.f32	s14, s1, s15
9001cfe0:	ee61 7a27 	vmul.f32	s15, s2, s15
9001cfe4:	ee77 2a62 	vsub.f32	s5, s14, s5
9001cfe8:	ee37 3ac3 	vsub.f32	s6, s15, s6
9001cfec:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
9001cff0:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
9001cff4:	ee12 2a90 	vmov	r2, s5
9001cff8:	eef0 2a47 	vmov.f32	s5, s14
9001cffc:	fb92 fef3 	sdiv	lr, r2, r3
9001d000:	ee13 2a10 	vmov	r2, s6
9001d004:	eeb0 3a67 	vmov.f32	s6, s15
9001d008:	fb92 fcf3 	sdiv	ip, r2, r3
9001d00c:	9b01      	ldr	r3, [sp, #4]
9001d00e:	3b01      	subs	r3, #1
9001d010:	9301      	str	r3, [sp, #4]
9001d012:	9b0e      	ldr	r3, [sp, #56]	; 0x38
9001d014:	bf08      	it	eq
9001d016:	465b      	moveq	r3, fp
9001d018:	e797      	b.n	9001cf4a <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a>
9001d01a:	454f      	cmp	r7, r9
9001d01c:	dabb      	bge.n	9001cf96 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
9001d01e:	fb0c 2606 	mla	r6, ip, r6, r2
9001d022:	1436      	asrs	r6, r6, #16
9001d024:	d4b7      	bmi.n	9001cf96 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
9001d026:	4546      	cmp	r6, r8
9001d028:	dab5      	bge.n	9001cf96 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
9001d02a:	461e      	mov	r6, r3
9001d02c:	46a0      	mov	r8, r4
9001d02e:	2e00      	cmp	r6, #0
9001d030:	ddb8      	ble.n	9001cfa4 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
9001d032:	1417      	asrs	r7, r2, #16
9001d034:	f9b5 a008 	ldrsh.w	sl, [r5, #8]
9001d038:	ea4f 4920 	mov.w	r9, r0, asr #16
9001d03c:	9902      	ldr	r1, [sp, #8]
9001d03e:	4470      	add	r0, lr
9001d040:	4462      	add	r2, ip
9001d042:	fb0a 9707 	mla	r7, sl, r7, r9
9001d046:	3e01      	subs	r6, #1
9001d048:	f831 7017 	ldrh.w	r7, [r1, r7, lsl #1]
9001d04c:	f828 7b02 	strh.w	r7, [r8], #2
9001d050:	e7ed      	b.n	9001d02e <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10e>
9001d052:	ea5f 4920 	movs.w	r9, r0, asr #16
9001d056:	d414      	bmi.n	9001d082 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
9001d058:	68ae      	ldr	r6, [r5, #8]
9001d05a:	454e      	cmp	r6, r9
9001d05c:	dd11      	ble.n	9001d082 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
9001d05e:	ea5f 4a22 	movs.w	sl, r2, asr #16
9001d062:	d40e      	bmi.n	9001d082 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
9001d064:	68ef      	ldr	r7, [r5, #12]
9001d066:	4557      	cmp	r7, sl
9001d068:	dd0b      	ble.n	9001d082 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
9001d06a:	b236      	sxth	r6, r6
9001d06c:	f06f 0101 	mvn.w	r1, #1
9001d070:	9f02      	ldr	r7, [sp, #8]
9001d072:	fb0a 9606 	mla	r6, sl, r6, r9
9001d076:	f837 7016 	ldrh.w	r7, [r7, r6, lsl #1]
9001d07a:	fb01 f608 	mul.w	r6, r1, r8
9001d07e:	9903      	ldr	r1, [sp, #12]
9001d080:	538f      	strh	r7, [r1, r6]
9001d082:	4470      	add	r0, lr
9001d084:	4462      	add	r2, ip
9001d086:	f108 38ff 	add.w	r8, r8, #4294967295
9001d08a:	e788      	b.n	9001cf9e <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
9001d08c:	b005      	add	sp, #20
9001d08e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

9001d092 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
9001d092:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001d096:	b087      	sub	sp, #28
9001d098:	468b      	mov	fp, r1
9001d09a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
9001d09e:	9815      	ldr	r0, [sp, #84]	; 0x54
9001d0a0:	9203      	str	r2, [sp, #12]
9001d0a2:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
9001d0a6:	6841      	ldr	r1, [r0, #4]
9001d0a8:	9204      	str	r2, [sp, #16]
9001d0aa:	f8dd 9060 	ldr.w	r9, [sp, #96]	; 0x60
9001d0ae:	e9dd 2516 	ldrd	r2, r5, [sp, #88]	; 0x58
9001d0b2:	fb01 2505 	mla	r5, r1, r5, r2
9001d0b6:	6802      	ldr	r2, [r0, #0]
9001d0b8:	eb02 0545 	add.w	r5, r2, r5, lsl #1
9001d0bc:	f8d9 2000 	ldr.w	r2, [r9]
9001d0c0:	9201      	str	r2, [sp, #4]
9001d0c2:	f1bb 0f00 	cmp.w	fp, #0
9001d0c6:	dc03      	bgt.n	9001d0d0 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
9001d0c8:	9a03      	ldr	r2, [sp, #12]
9001d0ca:	2a00      	cmp	r2, #0
9001d0cc:	f340 8158 	ble.w	9001d380 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ee>
9001d0d0:	9a11      	ldr	r2, [sp, #68]	; 0x44
9001d0d2:	f9b9 7008 	ldrsh.w	r7, [r9, #8]
9001d0d6:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
9001d0da:	9a12      	ldr	r2, [sp, #72]	; 0x48
9001d0dc:	f9b9 600c 	ldrsh.w	r6, [r9, #12]
9001d0e0:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
9001d0e4:	2b00      	cmp	r3, #0
9001d0e6:	dd0e      	ble.n	9001d106 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
9001d0e8:	1402      	asrs	r2, r0, #16
9001d0ea:	d405      	bmi.n	9001d0f8 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
9001d0ec:	42ba      	cmp	r2, r7
9001d0ee:	da03      	bge.n	9001d0f8 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
9001d0f0:	140a      	asrs	r2, r1, #16
9001d0f2:	d401      	bmi.n	9001d0f8 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
9001d0f4:	42b2      	cmp	r2, r6
9001d0f6:	db07      	blt.n	9001d108 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
9001d0f8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
9001d0fa:	3b01      	subs	r3, #1
9001d0fc:	3502      	adds	r5, #2
9001d0fe:	4410      	add	r0, r2
9001d100:	9a14      	ldr	r2, [sp, #80]	; 0x50
9001d102:	4411      	add	r1, r2
9001d104:	e7ee      	b.n	9001d0e4 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
9001d106:	d017      	beq.n	9001d138 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
9001d108:	1e5a      	subs	r2, r3, #1
9001d10a:	9c13      	ldr	r4, [sp, #76]	; 0x4c
9001d10c:	fb04 0402 	mla	r4, r4, r2, r0
9001d110:	1424      	asrs	r4, r4, #16
9001d112:	d409      	bmi.n	9001d128 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
9001d114:	42bc      	cmp	r4, r7
9001d116:	da07      	bge.n	9001d128 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
9001d118:	9c14      	ldr	r4, [sp, #80]	; 0x50
9001d11a:	fb04 1202 	mla	r2, r4, r2, r1
9001d11e:	1412      	asrs	r2, r2, #16
9001d120:	d402      	bmi.n	9001d128 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
9001d122:	42b2      	cmp	r2, r6
9001d124:	f2c0 80bf 	blt.w	9001d2a6 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
9001d128:	2700      	movs	r7, #0
9001d12a:	19da      	adds	r2, r3, r7
9001d12c:	2a00      	cmp	r2, #0
9001d12e:	dc3e      	bgt.n	9001d1ae <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
9001d130:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
9001d134:	eb05 0543 	add.w	r5, r5, r3, lsl #1
9001d138:	f1bb 0f00 	cmp.w	fp, #0
9001d13c:	f340 8120 	ble.w	9001d380 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ee>
9001d140:	ee30 0a04 	vadd.f32	s0, s0, s8
9001d144:	9b10      	ldr	r3, [sp, #64]	; 0x40
9001d146:	ee70 0aa4 	vadd.f32	s1, s1, s9
9001d14a:	f1bb 0b01 	subs.w	fp, fp, #1
9001d14e:	eeb0 6a62 	vmov.f32	s12, s5
9001d152:	eec6 7a80 	vdiv.f32	s15, s13, s0
9001d156:	ee31 1a05 	vadd.f32	s2, s2, s10
9001d15a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
9001d15e:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
9001d162:	eeb0 6a43 	vmov.f32	s12, s6
9001d166:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
9001d16a:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
9001d16e:	ee20 7aa7 	vmul.f32	s14, s1, s15
9001d172:	ee61 7a27 	vmul.f32	s15, s2, s15
9001d176:	ee77 2a62 	vsub.f32	s5, s14, s5
9001d17a:	ee37 3ac3 	vsub.f32	s6, s15, s6
9001d17e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
9001d182:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
9001d186:	ee12 2a90 	vmov	r2, s5
9001d18a:	eef0 2a47 	vmov.f32	s5, s14
9001d18e:	fb92 f3f3 	sdiv	r3, r2, r3
9001d192:	ee13 2a10 	vmov	r2, s6
9001d196:	9313      	str	r3, [sp, #76]	; 0x4c
9001d198:	9b10      	ldr	r3, [sp, #64]	; 0x40
9001d19a:	eeb0 3a67 	vmov.f32	s6, s15
9001d19e:	fb92 f3f3 	sdiv	r3, r2, r3
9001d1a2:	9a03      	ldr	r2, [sp, #12]
9001d1a4:	9314      	str	r3, [sp, #80]	; 0x50
9001d1a6:	9b10      	ldr	r3, [sp, #64]	; 0x40
9001d1a8:	bf08      	it	eq
9001d1aa:	4613      	moveq	r3, r2
9001d1ac:	e789      	b.n	9001d0c2 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
9001d1ae:	1406      	asrs	r6, r0, #16
9001d1b0:	d42d      	bmi.n	9001d20e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
9001d1b2:	f8d9 4008 	ldr.w	r4, [r9, #8]
9001d1b6:	42b4      	cmp	r4, r6
9001d1b8:	dd29      	ble.n	9001d20e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
9001d1ba:	ea5f 4c21 	movs.w	ip, r1, asr #16
9001d1be:	d426      	bmi.n	9001d20e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
9001d1c0:	f8d9 200c 	ldr.w	r2, [r9, #12]
9001d1c4:	4562      	cmp	r2, ip
9001d1c6:	dd22      	ble.n	9001d20e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
9001d1c8:	b224      	sxth	r4, r4
9001d1ca:	9a01      	ldr	r2, [sp, #4]
9001d1cc:	fb0c 6404 	mla	r4, ip, r4, r6
9001d1d0:	f852 4024 	ldr.w	r4, [r2, r4, lsl #2]
9001d1d4:	0e22      	lsrs	r2, r4, #24
9001d1d6:	d01a      	beq.n	9001d20e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
9001d1d8:	9e04      	ldr	r6, [sp, #16]
9001d1da:	4372      	muls	r2, r6
9001d1dc:	1c56      	adds	r6, r2, #1
9001d1de:	eb06 2222 	add.w	r2, r6, r2, asr #8
9001d1e2:	0a26      	lsrs	r6, r4, #8
9001d1e4:	1212      	asrs	r2, r2, #8
9001d1e6:	9605      	str	r6, [sp, #20]
9001d1e8:	2aff      	cmp	r2, #255	; 0xff
9001d1ea:	d116      	bne.n	9001d21a <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x188>
9001d1ec:	f06f 0201 	mvn.w	r2, #1
9001d1f0:	f426 66ff 	bic.w	r6, r6, #2040	; 0x7f8
9001d1f4:	fb02 fc07 	mul.w	ip, r2, r7
9001d1f8:	0962      	lsrs	r2, r4, #5
9001d1fa:	f026 0607 	bic.w	r6, r6, #7
9001d1fe:	f3c4 04c4 	ubfx	r4, r4, #3, #5
9001d202:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
9001d206:	4316      	orrs	r6, r2
9001d208:	4326      	orrs	r6, r4
9001d20a:	f825 600c 	strh.w	r6, [r5, ip]
9001d20e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
9001d210:	3f01      	subs	r7, #1
9001d212:	4410      	add	r0, r2
9001d214:	9a14      	ldr	r2, [sp, #80]	; 0x50
9001d216:	4411      	add	r1, r2
9001d218:	e787      	b.n	9001d12a <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
9001d21a:	f06f 0601 	mvn.w	r6, #1
9001d21e:	fa1f fa82 	uxth.w	sl, r2
9001d222:	f3c4 4c07 	ubfx	ip, r4, #16, #8
9001d226:	43d2      	mvns	r2, r2
9001d228:	437e      	muls	r6, r7
9001d22a:	b2e4      	uxtb	r4, r4
9001d22c:	fb1c fc0a 	smulbb	ip, ip, sl
9001d230:	b2d2      	uxtb	r2, r2
9001d232:	f835 8006 	ldrh.w	r8, [r5, r6]
9001d236:	fb14 f40a 	smulbb	r4, r4, sl
9001d23a:	9602      	str	r6, [sp, #8]
9001d23c:	ea4f 2e28 	mov.w	lr, r8, asr #8
9001d240:	f89d 6014 	ldrb.w	r6, [sp, #20]
9001d244:	fb16 f60a 	smulbb	r6, r6, sl
9001d248:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
9001d24c:	fb0e ce02 	mla	lr, lr, r2, ip
9001d250:	ea4f 0ce8 	mov.w	ip, r8, asr #3
9001d254:	ea4f 08c8 	mov.w	r8, r8, lsl #3
9001d258:	fa1f fe8e 	uxth.w	lr, lr
9001d25c:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
9001d260:	fa5f f888 	uxtb.w	r8, r8
9001d264:	fb0c 6c02 	mla	ip, ip, r2, r6
9001d268:	fb08 4402 	mla	r4, r8, r2, r4
9001d26c:	f10e 0201 	add.w	r2, lr, #1
9001d270:	fa1f fc8c 	uxth.w	ip, ip
9001d274:	b2a4      	uxth	r4, r4
9001d276:	eb02 2e1e 	add.w	lr, r2, lr, lsr #8
9001d27a:	9a02      	ldr	r2, [sp, #8]
9001d27c:	1c66      	adds	r6, r4, #1
9001d27e:	f40e 4e78 	and.w	lr, lr, #63488	; 0xf800
9001d282:	eb06 2614 	add.w	r6, r6, r4, lsr #8
9001d286:	f3c6 26c4 	ubfx	r6, r6, #11, #5
9001d28a:	ea46 0e0e 	orr.w	lr, r6, lr
9001d28e:	f10c 0601 	add.w	r6, ip, #1
9001d292:	eb06 261c 	add.w	r6, r6, ip, lsr #8
9001d296:	0976      	lsrs	r6, r6, #5
9001d298:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
9001d29c:	ea4e 0e06 	orr.w	lr, lr, r6
9001d2a0:	f825 e002 	strh.w	lr, [r5, r2]
9001d2a4:	e7b3      	b.n	9001d20e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
9001d2a6:	f04f 0800 	mov.w	r8, #0
9001d2aa:	eba3 0208 	sub.w	r2, r3, r8
9001d2ae:	2a00      	cmp	r2, #0
9001d2b0:	f77f af3e 	ble.w	9001d130 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
9001d2b4:	1404      	asrs	r4, r0, #16
9001d2b6:	f9b9 6008 	ldrsh.w	r6, [r9, #8]
9001d2ba:	140a      	asrs	r2, r1, #16
9001d2bc:	fb06 4202 	mla	r2, r6, r2, r4
9001d2c0:	9c01      	ldr	r4, [sp, #4]
9001d2c2:	f854 4022 	ldr.w	r4, [r4, r2, lsl #2]
9001d2c6:	0e22      	lsrs	r2, r4, #24
9001d2c8:	d015      	beq.n	9001d2f6 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x264>
9001d2ca:	9e04      	ldr	r6, [sp, #16]
9001d2cc:	4372      	muls	r2, r6
9001d2ce:	1c56      	adds	r6, r2, #1
9001d2d0:	eb06 2222 	add.w	r2, r6, r2, asr #8
9001d2d4:	0a26      	lsrs	r6, r4, #8
9001d2d6:	1212      	asrs	r2, r2, #8
9001d2d8:	2aff      	cmp	r2, #255	; 0xff
9001d2da:	d113      	bne.n	9001d304 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x272>
9001d2dc:	0962      	lsrs	r2, r4, #5
9001d2de:	f426 66ff 	bic.w	r6, r6, #2040	; 0x7f8
9001d2e2:	f3c4 04c4 	ubfx	r4, r4, #3, #5
9001d2e6:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
9001d2ea:	f026 0607 	bic.w	r6, r6, #7
9001d2ee:	4316      	orrs	r6, r2
9001d2f0:	4326      	orrs	r6, r4
9001d2f2:	f825 6018 	strh.w	r6, [r5, r8, lsl #1]
9001d2f6:	9a13      	ldr	r2, [sp, #76]	; 0x4c
9001d2f8:	f108 0801 	add.w	r8, r8, #1
9001d2fc:	4410      	add	r0, r2
9001d2fe:	9a14      	ldr	r2, [sp, #80]	; 0x50
9001d300:	4411      	add	r1, r2
9001d302:	e7d2      	b.n	9001d2aa <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x218>
9001d304:	f835 e018 	ldrh.w	lr, [r5, r8, lsl #1]
9001d308:	fa1f fa82 	uxth.w	sl, r2
9001d30c:	f3c4 4707 	ubfx	r7, r4, #16, #8
9001d310:	43d2      	mvns	r2, r2
9001d312:	ea4f 2c2e 	mov.w	ip, lr, asr #8
9001d316:	fb17 f70a 	smulbb	r7, r7, sl
9001d31a:	b2d2      	uxtb	r2, r2
9001d31c:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
9001d320:	b2e4      	uxtb	r4, r4
9001d322:	b2f6      	uxtb	r6, r6
9001d324:	fb0c 7c02 	mla	ip, ip, r2, r7
9001d328:	ea4f 07ee 	mov.w	r7, lr, asr #3
9001d32c:	fb14 f40a 	smulbb	r4, r4, sl
9001d330:	ea4f 0ece 	mov.w	lr, lr, lsl #3
9001d334:	fa1f fc8c 	uxth.w	ip, ip
9001d338:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
9001d33c:	fb16 f60a 	smulbb	r6, r6, sl
9001d340:	fa5f fe8e 	uxtb.w	lr, lr
9001d344:	fb0e 4402 	mla	r4, lr, r2, r4
9001d348:	fb07 6702 	mla	r7, r7, r2, r6
9001d34c:	f10c 0201 	add.w	r2, ip, #1
9001d350:	b2a4      	uxth	r4, r4
9001d352:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
9001d356:	1c66      	adds	r6, r4, #1
9001d358:	b2bf      	uxth	r7, r7
9001d35a:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
9001d35e:	eb06 2614 	add.w	r6, r6, r4, lsr #8
9001d362:	f3c6 26c4 	ubfx	r6, r6, #11, #5
9001d366:	ea46 0c0c 	orr.w	ip, r6, ip
9001d36a:	1c7e      	adds	r6, r7, #1
9001d36c:	eb06 2617 	add.w	r6, r6, r7, lsr #8
9001d370:	0976      	lsrs	r6, r6, #5
9001d372:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
9001d376:	ea4c 0c06 	orr.w	ip, ip, r6
9001d37a:	f825 c018 	strh.w	ip, [r5, r8, lsl #1]
9001d37e:	e7ba      	b.n	9001d2f6 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x264>
9001d380:	b007      	add	sp, #28
9001d382:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

9001d388 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
9001d388:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001d38c:	b085      	sub	sp, #20
9001d38e:	468b      	mov	fp, r1
9001d390:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
9001d394:	9813      	ldr	r0, [sp, #76]	; 0x4c
9001d396:	9203      	str	r2, [sp, #12]
9001d398:	6841      	ldr	r1, [r0, #4]
9001d39a:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
9001d39e:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
9001d3a2:	fb01 2404 	mla	r4, r1, r4, r2
9001d3a6:	6802      	ldr	r2, [r0, #0]
9001d3a8:	eb02 0444 	add.w	r4, r2, r4, lsl #1
9001d3ac:	f8d8 2000 	ldr.w	r2, [r8]
9001d3b0:	9201      	str	r2, [sp, #4]
9001d3b2:	f1bb 0f00 	cmp.w	fp, #0
9001d3b6:	dc03      	bgt.n	9001d3c0 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
9001d3b8:	9a03      	ldr	r2, [sp, #12]
9001d3ba:	2a00      	cmp	r2, #0
9001d3bc:	f340 814f 	ble.w	9001d65e <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d6>
9001d3c0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
9001d3c2:	f9b8 7008 	ldrsh.w	r7, [r8, #8]
9001d3c6:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
9001d3ca:	9a10      	ldr	r2, [sp, #64]	; 0x40
9001d3cc:	f9b8 600c 	ldrsh.w	r6, [r8, #12]
9001d3d0:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
9001d3d4:	2b00      	cmp	r3, #0
9001d3d6:	dd0e      	ble.n	9001d3f6 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
9001d3d8:	1408      	asrs	r0, r1, #16
9001d3da:	d405      	bmi.n	9001d3e8 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
9001d3dc:	42b8      	cmp	r0, r7
9001d3de:	da03      	bge.n	9001d3e8 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
9001d3e0:	1410      	asrs	r0, r2, #16
9001d3e2:	d401      	bmi.n	9001d3e8 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
9001d3e4:	42b0      	cmp	r0, r6
9001d3e6:	db07      	blt.n	9001d3f8 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
9001d3e8:	9811      	ldr	r0, [sp, #68]	; 0x44
9001d3ea:	3b01      	subs	r3, #1
9001d3ec:	3402      	adds	r4, #2
9001d3ee:	4401      	add	r1, r0
9001d3f0:	9812      	ldr	r0, [sp, #72]	; 0x48
9001d3f2:	4402      	add	r2, r0
9001d3f4:	e7ee      	b.n	9001d3d4 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
9001d3f6:	d017      	beq.n	9001d428 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
9001d3f8:	1e58      	subs	r0, r3, #1
9001d3fa:	9d11      	ldr	r5, [sp, #68]	; 0x44
9001d3fc:	fb05 1500 	mla	r5, r5, r0, r1
9001d400:	142d      	asrs	r5, r5, #16
9001d402:	d409      	bmi.n	9001d418 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
9001d404:	42bd      	cmp	r5, r7
9001d406:	da07      	bge.n	9001d418 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
9001d408:	9d12      	ldr	r5, [sp, #72]	; 0x48
9001d40a:	fb05 2000 	mla	r0, r5, r0, r2
9001d40e:	1400      	asrs	r0, r0, #16
9001d410:	d402      	bmi.n	9001d418 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
9001d412:	42b0      	cmp	r0, r6
9001d414:	f2c0 80ba 	blt.w	9001d58c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
9001d418:	2600      	movs	r6, #0
9001d41a:	1998      	adds	r0, r3, r6
9001d41c:	2800      	cmp	r0, #0
9001d41e:	dc3e      	bgt.n	9001d49e <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
9001d420:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
9001d424:	eb04 0443 	add.w	r4, r4, r3, lsl #1
9001d428:	f1bb 0f00 	cmp.w	fp, #0
9001d42c:	f340 8117 	ble.w	9001d65e <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d6>
9001d430:	ee30 0a04 	vadd.f32	s0, s0, s8
9001d434:	9b0e      	ldr	r3, [sp, #56]	; 0x38
9001d436:	ee70 0aa4 	vadd.f32	s1, s1, s9
9001d43a:	f1bb 0b01 	subs.w	fp, fp, #1
9001d43e:	eeb0 6a62 	vmov.f32	s12, s5
9001d442:	eec6 7a80 	vdiv.f32	s15, s13, s0
9001d446:	ee31 1a05 	vadd.f32	s2, s2, s10
9001d44a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
9001d44e:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
9001d452:	eeb0 6a43 	vmov.f32	s12, s6
9001d456:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
9001d45a:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
9001d45e:	ee20 7aa7 	vmul.f32	s14, s1, s15
9001d462:	ee61 7a27 	vmul.f32	s15, s2, s15
9001d466:	ee77 2a62 	vsub.f32	s5, s14, s5
9001d46a:	ee37 3ac3 	vsub.f32	s6, s15, s6
9001d46e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
9001d472:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
9001d476:	ee12 2a90 	vmov	r2, s5
9001d47a:	eef0 2a47 	vmov.f32	s5, s14
9001d47e:	fb92 f3f3 	sdiv	r3, r2, r3
9001d482:	ee13 2a10 	vmov	r2, s6
9001d486:	9311      	str	r3, [sp, #68]	; 0x44
9001d488:	9b0e      	ldr	r3, [sp, #56]	; 0x38
9001d48a:	eeb0 3a67 	vmov.f32	s6, s15
9001d48e:	fb92 f3f3 	sdiv	r3, r2, r3
9001d492:	9a03      	ldr	r2, [sp, #12]
9001d494:	9312      	str	r3, [sp, #72]	; 0x48
9001d496:	9b0e      	ldr	r3, [sp, #56]	; 0x38
9001d498:	bf08      	it	eq
9001d49a:	4613      	moveq	r3, r2
9001d49c:	e789      	b.n	9001d3b2 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a>
9001d49e:	140f      	asrs	r7, r1, #16
9001d4a0:	d424      	bmi.n	9001d4ec <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
9001d4a2:	f8d8 5008 	ldr.w	r5, [r8, #8]
9001d4a6:	42bd      	cmp	r5, r7
9001d4a8:	dd20      	ble.n	9001d4ec <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
9001d4aa:	ea5f 4c22 	movs.w	ip, r2, asr #16
9001d4ae:	d41d      	bmi.n	9001d4ec <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
9001d4b0:	f8d8 000c 	ldr.w	r0, [r8, #12]
9001d4b4:	4560      	cmp	r0, ip
9001d4b6:	dd19      	ble.n	9001d4ec <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
9001d4b8:	b22d      	sxth	r5, r5
9001d4ba:	9801      	ldr	r0, [sp, #4]
9001d4bc:	fb0c 7505 	mla	r5, ip, r5, r7
9001d4c0:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
9001d4c4:	0e07      	lsrs	r7, r0, #24
9001d4c6:	2fff      	cmp	r7, #255	; 0xff
9001d4c8:	d116      	bne.n	9001d4f8 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
9001d4ca:	f06f 0501 	mvn.w	r5, #1
9001d4ce:	fb05 f706 	mul.w	r7, r5, r6
9001d4d2:	f2a5 75fe 	subw	r5, r5, #2046	; 0x7fe
9001d4d6:	ea05 2c10 	and.w	ip, r5, r0, lsr #8
9001d4da:	0945      	lsrs	r5, r0, #5
9001d4dc:	f3c0 00c4 	ubfx	r0, r0, #3, #5
9001d4e0:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
9001d4e4:	ea4c 0505 	orr.w	r5, ip, r5
9001d4e8:	4305      	orrs	r5, r0
9001d4ea:	53e5      	strh	r5, [r4, r7]
9001d4ec:	9811      	ldr	r0, [sp, #68]	; 0x44
9001d4ee:	3e01      	subs	r6, #1
9001d4f0:	4401      	add	r1, r0
9001d4f2:	9812      	ldr	r0, [sp, #72]	; 0x48
9001d4f4:	4402      	add	r2, r0
9001d4f6:	e790      	b.n	9001d41a <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
9001d4f8:	b2fd      	uxtb	r5, r7
9001d4fa:	2f00      	cmp	r7, #0
9001d4fc:	d0f6      	beq.n	9001d4ec <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
9001d4fe:	f06f 0701 	mvn.w	r7, #1
9001d502:	fa1f f985 	uxth.w	r9, r5
9001d506:	43ed      	mvns	r5, r5
9001d508:	f3c0 2a07 	ubfx	sl, r0, #8, #8
9001d50c:	4377      	muls	r7, r6
9001d50e:	fb1a fa09 	smulbb	sl, sl, r9
9001d512:	b2ed      	uxtb	r5, r5
9001d514:	f834 e007 	ldrh.w	lr, [r4, r7]
9001d518:	9702      	str	r7, [sp, #8]
9001d51a:	f3c0 4707 	ubfx	r7, r0, #16, #8
9001d51e:	ea4f 2c2e 	mov.w	ip, lr, asr #8
9001d522:	fb17 f709 	smulbb	r7, r7, r9
9001d526:	b2c0      	uxtb	r0, r0
9001d528:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
9001d52c:	fb10 f009 	smulbb	r0, r0, r9
9001d530:	fb0c 7c05 	mla	ip, ip, r5, r7
9001d534:	ea4f 07ee 	mov.w	r7, lr, asr #3
9001d538:	ea4f 0ece 	mov.w	lr, lr, lsl #3
9001d53c:	fa1f fc8c 	uxth.w	ip, ip
9001d540:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
9001d544:	fa5f fe8e 	uxtb.w	lr, lr
9001d548:	fb07 a705 	mla	r7, r7, r5, sl
9001d54c:	fb0e 0005 	mla	r0, lr, r5, r0
9001d550:	f10c 0501 	add.w	r5, ip, #1
9001d554:	b2bf      	uxth	r7, r7
9001d556:	b280      	uxth	r0, r0
9001d558:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
9001d55c:	f100 0a01 	add.w	sl, r0, #1
9001d560:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
9001d564:	eb0a 2a10 	add.w	sl, sl, r0, lsr #8
9001d568:	9802      	ldr	r0, [sp, #8]
9001d56a:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
9001d56e:	ea4a 0c0c 	orr.w	ip, sl, ip
9001d572:	f107 0a01 	add.w	sl, r7, #1
9001d576:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
9001d57a:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
9001d57e:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
9001d582:	ea4c 0c0a 	orr.w	ip, ip, sl
9001d586:	f824 c000 	strh.w	ip, [r4, r0]
9001d58a:	e7af      	b.n	9001d4ec <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
9001d58c:	f04f 0e00 	mov.w	lr, #0
9001d590:	eba3 000e 	sub.w	r0, r3, lr
9001d594:	2800      	cmp	r0, #0
9001d596:	f77f af43 	ble.w	9001d420 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
9001d59a:	f9b8 6008 	ldrsh.w	r6, [r8, #8]
9001d59e:	140d      	asrs	r5, r1, #16
9001d5a0:	1410      	asrs	r0, r2, #16
9001d5a2:	fb06 5000 	mla	r0, r6, r0, r5
9001d5a6:	9d01      	ldr	r5, [sp, #4]
9001d5a8:	f855 5020 	ldr.w	r5, [r5, r0, lsl #2]
9001d5ac:	0e2e      	lsrs	r6, r5, #24
9001d5ae:	2eff      	cmp	r6, #255	; 0xff
9001d5b0:	d112      	bne.n	9001d5d8 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x250>
9001d5b2:	482c      	ldr	r0, [pc, #176]	; (9001d664 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2dc>)
9001d5b4:	ea00 2615 	and.w	r6, r0, r5, lsr #8
9001d5b8:	0968      	lsrs	r0, r5, #5
9001d5ba:	f3c5 05c4 	ubfx	r5, r5, #3, #5
9001d5be:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
9001d5c2:	4330      	orrs	r0, r6
9001d5c4:	4328      	orrs	r0, r5
9001d5c6:	f824 001e 	strh.w	r0, [r4, lr, lsl #1]
9001d5ca:	9811      	ldr	r0, [sp, #68]	; 0x44
9001d5cc:	f10e 0e01 	add.w	lr, lr, #1
9001d5d0:	4401      	add	r1, r0
9001d5d2:	9812      	ldr	r0, [sp, #72]	; 0x48
9001d5d4:	4402      	add	r2, r0
9001d5d6:	e7db      	b.n	9001d590 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
9001d5d8:	b2f0      	uxtb	r0, r6
9001d5da:	2e00      	cmp	r6, #0
9001d5dc:	d0f5      	beq.n	9001d5ca <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
9001d5de:	f834 c01e 	ldrh.w	ip, [r4, lr, lsl #1]
9001d5e2:	fa1f f980 	uxth.w	r9, r0
9001d5e6:	f3c5 4607 	ubfx	r6, r5, #16, #8
9001d5ea:	43c0      	mvns	r0, r0
9001d5ec:	ea4f 272c 	mov.w	r7, ip, asr #8
9001d5f0:	f3c5 2a07 	ubfx	sl, r5, #8, #8
9001d5f4:	fb16 f609 	smulbb	r6, r6, r9
9001d5f8:	b2c0      	uxtb	r0, r0
9001d5fa:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
9001d5fe:	b2ed      	uxtb	r5, r5
9001d600:	fb1a fa09 	smulbb	sl, sl, r9
9001d604:	fb07 6700 	mla	r7, r7, r0, r6
9001d608:	ea4f 06ec 	mov.w	r6, ip, asr #3
9001d60c:	fb15 f509 	smulbb	r5, r5, r9
9001d610:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
9001d614:	b2bf      	uxth	r7, r7
9001d616:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
9001d61a:	fa5f fc8c 	uxtb.w	ip, ip
9001d61e:	fb06 a600 	mla	r6, r6, r0, sl
9001d622:	fb0c 5500 	mla	r5, ip, r0, r5
9001d626:	1c78      	adds	r0, r7, #1
9001d628:	b2b6      	uxth	r6, r6
9001d62a:	b2ad      	uxth	r5, r5
9001d62c:	eb00 2717 	add.w	r7, r0, r7, lsr #8
9001d630:	f105 0a01 	add.w	sl, r5, #1
9001d634:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
9001d638:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
9001d63c:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
9001d640:	ea4a 0707 	orr.w	r7, sl, r7
9001d644:	f106 0a01 	add.w	sl, r6, #1
9001d648:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
9001d64c:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
9001d650:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
9001d654:	ea47 070a 	orr.w	r7, r7, sl
9001d658:	f824 701e 	strh.w	r7, [r4, lr, lsl #1]
9001d65c:	e7b5      	b.n	9001d5ca <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
9001d65e:	b005      	add	sp, #20
9001d660:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9001d664:	fffff800 	.word	0xfffff800

9001d668 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
9001d668:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001d66c:	b087      	sub	sp, #28
9001d66e:	468b      	mov	fp, r1
9001d670:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
9001d674:	9815      	ldr	r0, [sp, #84]	; 0x54
9001d676:	9203      	str	r2, [sp, #12]
9001d678:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
9001d67c:	6841      	ldr	r1, [r0, #4]
9001d67e:	9204      	str	r2, [sp, #16]
9001d680:	f8dd 9060 	ldr.w	r9, [sp, #96]	; 0x60
9001d684:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
9001d688:	fb01 2404 	mla	r4, r1, r4, r2
9001d68c:	6802      	ldr	r2, [r0, #0]
9001d68e:	eb02 0444 	add.w	r4, r2, r4, lsl #1
9001d692:	f8d9 2008 	ldr.w	r2, [r9, #8]
9001d696:	3201      	adds	r2, #1
9001d698:	f022 0201 	bic.w	r2, r2, #1
9001d69c:	9200      	str	r2, [sp, #0]
9001d69e:	f8d9 2000 	ldr.w	r2, [r9]
9001d6a2:	9201      	str	r2, [sp, #4]
9001d6a4:	f1bb 0f00 	cmp.w	fp, #0
9001d6a8:	dc03      	bgt.n	9001d6b2 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
9001d6aa:	9a03      	ldr	r2, [sp, #12]
9001d6ac:	2a00      	cmp	r2, #0
9001d6ae:	f340 816a 	ble.w	9001d986 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
9001d6b2:	9a11      	ldr	r2, [sp, #68]	; 0x44
9001d6b4:	f9b9 7008 	ldrsh.w	r7, [r9, #8]
9001d6b8:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
9001d6bc:	9a12      	ldr	r2, [sp, #72]	; 0x48
9001d6be:	f9b9 600c 	ldrsh.w	r6, [r9, #12]
9001d6c2:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
9001d6c6:	2b00      	cmp	r3, #0
9001d6c8:	dd0e      	ble.n	9001d6e8 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
9001d6ca:	1402      	asrs	r2, r0, #16
9001d6cc:	d405      	bmi.n	9001d6da <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
9001d6ce:	42ba      	cmp	r2, r7
9001d6d0:	da03      	bge.n	9001d6da <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
9001d6d2:	140a      	asrs	r2, r1, #16
9001d6d4:	d401      	bmi.n	9001d6da <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
9001d6d6:	42b2      	cmp	r2, r6
9001d6d8:	db07      	blt.n	9001d6ea <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
9001d6da:	9a13      	ldr	r2, [sp, #76]	; 0x4c
9001d6dc:	3b01      	subs	r3, #1
9001d6de:	3402      	adds	r4, #2
9001d6e0:	4410      	add	r0, r2
9001d6e2:	9a14      	ldr	r2, [sp, #80]	; 0x50
9001d6e4:	4411      	add	r1, r2
9001d6e6:	e7ee      	b.n	9001d6c6 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
9001d6e8:	d017      	beq.n	9001d71a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
9001d6ea:	1e5a      	subs	r2, r3, #1
9001d6ec:	9d13      	ldr	r5, [sp, #76]	; 0x4c
9001d6ee:	fb05 0502 	mla	r5, r5, r2, r0
9001d6f2:	142d      	asrs	r5, r5, #16
9001d6f4:	d409      	bmi.n	9001d70a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
9001d6f6:	42bd      	cmp	r5, r7
9001d6f8:	da07      	bge.n	9001d70a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
9001d6fa:	9d14      	ldr	r5, [sp, #80]	; 0x50
9001d6fc:	fb05 1202 	mla	r2, r5, r2, r1
9001d700:	1412      	asrs	r2, r2, #16
9001d702:	d402      	bmi.n	9001d70a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
9001d704:	42b2      	cmp	r2, r6
9001d706:	f2c0 80c8 	blt.w	9001d89a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x232>
9001d70a:	2700      	movs	r7, #0
9001d70c:	19da      	adds	r2, r3, r7
9001d70e:	2a00      	cmp	r2, #0
9001d710:	dc3e      	bgt.n	9001d790 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
9001d712:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
9001d716:	eb04 0443 	add.w	r4, r4, r3, lsl #1
9001d71a:	f1bb 0f00 	cmp.w	fp, #0
9001d71e:	f340 8132 	ble.w	9001d986 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
9001d722:	ee30 0a04 	vadd.f32	s0, s0, s8
9001d726:	9b10      	ldr	r3, [sp, #64]	; 0x40
9001d728:	ee70 0aa4 	vadd.f32	s1, s1, s9
9001d72c:	f1bb 0b01 	subs.w	fp, fp, #1
9001d730:	eeb0 6a62 	vmov.f32	s12, s5
9001d734:	eec6 7a80 	vdiv.f32	s15, s13, s0
9001d738:	ee31 1a05 	vadd.f32	s2, s2, s10
9001d73c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
9001d740:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
9001d744:	eeb0 6a43 	vmov.f32	s12, s6
9001d748:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
9001d74c:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
9001d750:	ee20 7aa7 	vmul.f32	s14, s1, s15
9001d754:	ee61 7a27 	vmul.f32	s15, s2, s15
9001d758:	ee77 2a62 	vsub.f32	s5, s14, s5
9001d75c:	ee37 3ac3 	vsub.f32	s6, s15, s6
9001d760:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
9001d764:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
9001d768:	ee12 2a90 	vmov	r2, s5
9001d76c:	eef0 2a47 	vmov.f32	s5, s14
9001d770:	fb92 f3f3 	sdiv	r3, r2, r3
9001d774:	ee13 2a10 	vmov	r2, s6
9001d778:	9313      	str	r3, [sp, #76]	; 0x4c
9001d77a:	9b10      	ldr	r3, [sp, #64]	; 0x40
9001d77c:	eeb0 3a67 	vmov.f32	s6, s15
9001d780:	fb92 f3f3 	sdiv	r3, r2, r3
9001d784:	9a03      	ldr	r2, [sp, #12]
9001d786:	9314      	str	r3, [sp, #80]	; 0x50
9001d788:	9b10      	ldr	r3, [sp, #64]	; 0x40
9001d78a:	bf08      	it	eq
9001d78c:	4613      	moveq	r3, r2
9001d78e:	e789      	b.n	9001d6a4 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
9001d790:	1405      	asrs	r5, r0, #16
9001d792:	d436      	bmi.n	9001d802 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
9001d794:	f8d9 2008 	ldr.w	r2, [r9, #8]
9001d798:	42aa      	cmp	r2, r5
9001d79a:	dd32      	ble.n	9001d802 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
9001d79c:	140e      	asrs	r6, r1, #16
9001d79e:	d430      	bmi.n	9001d802 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
9001d7a0:	f8d9 200c 	ldr.w	r2, [r9, #12]
9001d7a4:	42b2      	cmp	r2, r6
9001d7a6:	dd2c      	ble.n	9001d802 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
9001d7a8:	9a00      	ldr	r2, [sp, #0]
9001d7aa:	fb06 5502 	mla	r5, r6, r2, r5
9001d7ae:	9e01      	ldr	r6, [sp, #4]
9001d7b0:	086a      	lsrs	r2, r5, #1
9001d7b2:	5cb2      	ldrb	r2, [r6, r2]
9001d7b4:	07ee      	lsls	r6, r5, #31
9001d7b6:	bf54      	ite	pl
9001d7b8:	f002 020f 	andpl.w	r2, r2, #15
9001d7bc:	1112      	asrmi	r2, r2, #4
9001d7be:	eb02 1202 	add.w	r2, r2, r2, lsl #4
9001d7c2:	b2d2      	uxtb	r2, r2
9001d7c4:	b1ea      	cbz	r2, 9001d802 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
9001d7c6:	9d04      	ldr	r5, [sp, #16]
9001d7c8:	436a      	muls	r2, r5
9001d7ca:	1c55      	adds	r5, r2, #1
9001d7cc:	eb05 2222 	add.w	r2, r5, r2, asr #8
9001d7d0:	4d6e      	ldr	r5, [pc, #440]	; (9001d98c <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x324>)
9001d7d2:	1212      	asrs	r2, r2, #8
9001d7d4:	682d      	ldr	r5, [r5, #0]
9001d7d6:	2aff      	cmp	r2, #255	; 0xff
9001d7d8:	ea4f 2615 	mov.w	r6, r5, lsr #8
9001d7dc:	9605      	str	r6, [sp, #20]
9001d7de:	d116      	bne.n	9001d80e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
9001d7e0:	f06f 0201 	mvn.w	r2, #1
9001d7e4:	f426 66ff 	bic.w	r6, r6, #2040	; 0x7f8
9001d7e8:	fb02 fc07 	mul.w	ip, r2, r7
9001d7ec:	096a      	lsrs	r2, r5, #5
9001d7ee:	f026 0607 	bic.w	r6, r6, #7
9001d7f2:	f3c5 05c4 	ubfx	r5, r5, #3, #5
9001d7f6:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
9001d7fa:	4316      	orrs	r6, r2
9001d7fc:	432e      	orrs	r6, r5
9001d7fe:	f824 600c 	strh.w	r6, [r4, ip]
9001d802:	9a13      	ldr	r2, [sp, #76]	; 0x4c
9001d804:	3f01      	subs	r7, #1
9001d806:	4410      	add	r0, r2
9001d808:	9a14      	ldr	r2, [sp, #80]	; 0x50
9001d80a:	4411      	add	r1, r2
9001d80c:	e77e      	b.n	9001d70c <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa4>
9001d80e:	f06f 0601 	mvn.w	r6, #1
9001d812:	fa1f fa82 	uxth.w	sl, r2
9001d816:	f3c5 4c07 	ubfx	ip, r5, #16, #8
9001d81a:	43d2      	mvns	r2, r2
9001d81c:	437e      	muls	r6, r7
9001d81e:	b2ed      	uxtb	r5, r5
9001d820:	fb1c fc0a 	smulbb	ip, ip, sl
9001d824:	b2d2      	uxtb	r2, r2
9001d826:	f834 8006 	ldrh.w	r8, [r4, r6]
9001d82a:	fb15 f50a 	smulbb	r5, r5, sl
9001d82e:	9602      	str	r6, [sp, #8]
9001d830:	ea4f 2e28 	mov.w	lr, r8, asr #8
9001d834:	f89d 6014 	ldrb.w	r6, [sp, #20]
9001d838:	fb16 f60a 	smulbb	r6, r6, sl
9001d83c:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
9001d840:	fb0e ce02 	mla	lr, lr, r2, ip
9001d844:	ea4f 0ce8 	mov.w	ip, r8, asr #3
9001d848:	ea4f 08c8 	mov.w	r8, r8, lsl #3
9001d84c:	fa1f fe8e 	uxth.w	lr, lr
9001d850:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
9001d854:	fa5f f888 	uxtb.w	r8, r8
9001d858:	fb0c 6c02 	mla	ip, ip, r2, r6
9001d85c:	fb08 5502 	mla	r5, r8, r2, r5
9001d860:	f10e 0201 	add.w	r2, lr, #1
9001d864:	fa1f fc8c 	uxth.w	ip, ip
9001d868:	b2ad      	uxth	r5, r5
9001d86a:	eb02 2e1e 	add.w	lr, r2, lr, lsr #8
9001d86e:	9a02      	ldr	r2, [sp, #8]
9001d870:	1c6e      	adds	r6, r5, #1
9001d872:	f40e 4e78 	and.w	lr, lr, #63488	; 0xf800
9001d876:	eb06 2615 	add.w	r6, r6, r5, lsr #8
9001d87a:	f3c6 26c4 	ubfx	r6, r6, #11, #5
9001d87e:	ea46 0e0e 	orr.w	lr, r6, lr
9001d882:	f10c 0601 	add.w	r6, ip, #1
9001d886:	eb06 261c 	add.w	r6, r6, ip, lsr #8
9001d88a:	0976      	lsrs	r6, r6, #5
9001d88c:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
9001d890:	ea4e 0e06 	orr.w	lr, lr, r6
9001d894:	f824 e002 	strh.w	lr, [r4, r2]
9001d898:	e7b3      	b.n	9001d802 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
9001d89a:	f04f 0800 	mov.w	r8, #0
9001d89e:	eba3 0208 	sub.w	r2, r3, r8
9001d8a2:	2a00      	cmp	r2, #0
9001d8a4:	f77f af35 	ble.w	9001d712 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
9001d8a8:	1402      	asrs	r2, r0, #16
9001d8aa:	9e00      	ldr	r6, [sp, #0]
9001d8ac:	140d      	asrs	r5, r1, #16
9001d8ae:	fb06 2505 	mla	r5, r6, r5, r2
9001d8b2:	9e01      	ldr	r6, [sp, #4]
9001d8b4:	086a      	lsrs	r2, r5, #1
9001d8b6:	07ed      	lsls	r5, r5, #31
9001d8b8:	5cb2      	ldrb	r2, [r6, r2]
9001d8ba:	bf54      	ite	pl
9001d8bc:	f002 020f 	andpl.w	r2, r2, #15
9001d8c0:	1112      	asrmi	r2, r2, #4
9001d8c2:	eb02 1202 	add.w	r2, r2, r2, lsl #4
9001d8c6:	b2d2      	uxtb	r2, r2
9001d8c8:	b1c2      	cbz	r2, 9001d8fc <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
9001d8ca:	9d04      	ldr	r5, [sp, #16]
9001d8cc:	436a      	muls	r2, r5
9001d8ce:	1c55      	adds	r5, r2, #1
9001d8d0:	eb05 2222 	add.w	r2, r5, r2, asr #8
9001d8d4:	4d2d      	ldr	r5, [pc, #180]	; (9001d98c <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x324>)
9001d8d6:	1212      	asrs	r2, r2, #8
9001d8d8:	682e      	ldr	r6, [r5, #0]
9001d8da:	2aff      	cmp	r2, #255	; 0xff
9001d8dc:	ea4f 2516 	mov.w	r5, r6, lsr #8
9001d8e0:	d113      	bne.n	9001d90a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
9001d8e2:	0972      	lsrs	r2, r6, #5
9001d8e4:	f425 65ff 	bic.w	r5, r5, #2040	; 0x7f8
9001d8e8:	f3c6 06c4 	ubfx	r6, r6, #3, #5
9001d8ec:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
9001d8f0:	f025 0507 	bic.w	r5, r5, #7
9001d8f4:	4315      	orrs	r5, r2
9001d8f6:	4335      	orrs	r5, r6
9001d8f8:	f824 5018 	strh.w	r5, [r4, r8, lsl #1]
9001d8fc:	9a13      	ldr	r2, [sp, #76]	; 0x4c
9001d8fe:	f108 0801 	add.w	r8, r8, #1
9001d902:	4410      	add	r0, r2
9001d904:	9a14      	ldr	r2, [sp, #80]	; 0x50
9001d906:	4411      	add	r1, r2
9001d908:	e7c9      	b.n	9001d89e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
9001d90a:	f834 e018 	ldrh.w	lr, [r4, r8, lsl #1]
9001d90e:	fa1f fa82 	uxth.w	sl, r2
9001d912:	f3c6 4707 	ubfx	r7, r6, #16, #8
9001d916:	43d2      	mvns	r2, r2
9001d918:	ea4f 2c2e 	mov.w	ip, lr, asr #8
9001d91c:	fb17 f70a 	smulbb	r7, r7, sl
9001d920:	b2d2      	uxtb	r2, r2
9001d922:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
9001d926:	b2f6      	uxtb	r6, r6
9001d928:	b2ed      	uxtb	r5, r5
9001d92a:	fb0c 7c02 	mla	ip, ip, r2, r7
9001d92e:	ea4f 07ee 	mov.w	r7, lr, asr #3
9001d932:	fb16 f60a 	smulbb	r6, r6, sl
9001d936:	ea4f 0ece 	mov.w	lr, lr, lsl #3
9001d93a:	fa1f fc8c 	uxth.w	ip, ip
9001d93e:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
9001d942:	fb15 f50a 	smulbb	r5, r5, sl
9001d946:	fa5f fe8e 	uxtb.w	lr, lr
9001d94a:	fb0e 6602 	mla	r6, lr, r2, r6
9001d94e:	fb07 5702 	mla	r7, r7, r2, r5
9001d952:	f10c 0201 	add.w	r2, ip, #1
9001d956:	b2b6      	uxth	r6, r6
9001d958:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
9001d95c:	1c75      	adds	r5, r6, #1
9001d95e:	b2bf      	uxth	r7, r7
9001d960:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
9001d964:	eb05 2516 	add.w	r5, r5, r6, lsr #8
9001d968:	f3c5 25c4 	ubfx	r5, r5, #11, #5
9001d96c:	ea45 0c0c 	orr.w	ip, r5, ip
9001d970:	1c7d      	adds	r5, r7, #1
9001d972:	eb05 2517 	add.w	r5, r5, r7, lsr #8
9001d976:	096d      	lsrs	r5, r5, #5
9001d978:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
9001d97c:	ea4c 0c05 	orr.w	ip, ip, r5
9001d980:	f824 c018 	strh.w	ip, [r4, r8, lsl #1]
9001d984:	e7ba      	b.n	9001d8fc <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
9001d986:	b007      	add	sp, #28
9001d988:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9001d98c:	240281fc 	.word	0x240281fc

9001d990 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
9001d990:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001d994:	b087      	sub	sp, #28
9001d996:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
9001d99a:	f8df 8308 	ldr.w	r8, [pc, #776]	; 9001dca4 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x314>
9001d99e:	9815      	ldr	r0, [sp, #84]	; 0x54
9001d9a0:	9101      	str	r1, [sp, #4]
9001d9a2:	9205      	str	r2, [sp, #20]
9001d9a4:	6841      	ldr	r1, [r0, #4]
9001d9a6:	f8dd b060 	ldr.w	fp, [sp, #96]	; 0x60
9001d9aa:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
9001d9ae:	fb01 2404 	mla	r4, r1, r4, r2
9001d9b2:	6802      	ldr	r2, [r0, #0]
9001d9b4:	eb02 0444 	add.w	r4, r2, r4, lsl #1
9001d9b8:	f8db 2008 	ldr.w	r2, [fp, #8]
9001d9bc:	3201      	adds	r2, #1
9001d9be:	f022 0201 	bic.w	r2, r2, #1
9001d9c2:	9202      	str	r2, [sp, #8]
9001d9c4:	f8db 2000 	ldr.w	r2, [fp]
9001d9c8:	9203      	str	r2, [sp, #12]
9001d9ca:	9a01      	ldr	r2, [sp, #4]
9001d9cc:	2a00      	cmp	r2, #0
9001d9ce:	dc03      	bgt.n	9001d9d8 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
9001d9d0:	9a05      	ldr	r2, [sp, #20]
9001d9d2:	2a00      	cmp	r2, #0
9001d9d4:	f340 8162 	ble.w	9001dc9c <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
9001d9d8:	9a11      	ldr	r2, [sp, #68]	; 0x44
9001d9da:	f9bb 7008 	ldrsh.w	r7, [fp, #8]
9001d9de:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
9001d9e2:	9a12      	ldr	r2, [sp, #72]	; 0x48
9001d9e4:	f9bb 600c 	ldrsh.w	r6, [fp, #12]
9001d9e8:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
9001d9ec:	2b00      	cmp	r3, #0
9001d9ee:	dd0e      	ble.n	9001da0e <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
9001d9f0:	1402      	asrs	r2, r0, #16
9001d9f2:	d405      	bmi.n	9001da00 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
9001d9f4:	42ba      	cmp	r2, r7
9001d9f6:	da03      	bge.n	9001da00 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
9001d9f8:	140a      	asrs	r2, r1, #16
9001d9fa:	d401      	bmi.n	9001da00 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
9001d9fc:	42b2      	cmp	r2, r6
9001d9fe:	db07      	blt.n	9001da10 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
9001da00:	9a13      	ldr	r2, [sp, #76]	; 0x4c
9001da02:	3b01      	subs	r3, #1
9001da04:	3402      	adds	r4, #2
9001da06:	4410      	add	r0, r2
9001da08:	9a14      	ldr	r2, [sp, #80]	; 0x50
9001da0a:	4411      	add	r1, r2
9001da0c:	e7ee      	b.n	9001d9ec <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
9001da0e:	d017      	beq.n	9001da40 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
9001da10:	1e5a      	subs	r2, r3, #1
9001da12:	9d13      	ldr	r5, [sp, #76]	; 0x4c
9001da14:	fb05 0502 	mla	r5, r5, r2, r0
9001da18:	142d      	asrs	r5, r5, #16
9001da1a:	d409      	bmi.n	9001da30 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
9001da1c:	42bd      	cmp	r5, r7
9001da1e:	da07      	bge.n	9001da30 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
9001da20:	9d14      	ldr	r5, [sp, #80]	; 0x50
9001da22:	fb05 1202 	mla	r2, r5, r2, r1
9001da26:	1412      	asrs	r2, r2, #16
9001da28:	d402      	bmi.n	9001da30 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
9001da2a:	42b2      	cmp	r2, r6
9001da2c:	f2c0 80c3 	blt.w	9001dbb6 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x226>
9001da30:	2500      	movs	r5, #0
9001da32:	195a      	adds	r2, r3, r5
9001da34:	2a00      	cmp	r2, #0
9001da36:	dc3f      	bgt.n	9001dab8 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
9001da38:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
9001da3c:	eb04 0443 	add.w	r4, r4, r3, lsl #1
9001da40:	9b01      	ldr	r3, [sp, #4]
9001da42:	2b00      	cmp	r3, #0
9001da44:	f340 812a 	ble.w	9001dc9c <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
9001da48:	ee30 0a04 	vadd.f32	s0, s0, s8
9001da4c:	9b10      	ldr	r3, [sp, #64]	; 0x40
9001da4e:	ee70 0aa4 	vadd.f32	s1, s1, s9
9001da52:	eeb0 6a62 	vmov.f32	s12, s5
9001da56:	eec6 7a80 	vdiv.f32	s15, s13, s0
9001da5a:	ee31 1a05 	vadd.f32	s2, s2, s10
9001da5e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
9001da62:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
9001da66:	eeb0 6a43 	vmov.f32	s12, s6
9001da6a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
9001da6e:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
9001da72:	ee20 7aa7 	vmul.f32	s14, s1, s15
9001da76:	ee61 7a27 	vmul.f32	s15, s2, s15
9001da7a:	ee77 2a62 	vsub.f32	s5, s14, s5
9001da7e:	ee37 3ac3 	vsub.f32	s6, s15, s6
9001da82:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
9001da86:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
9001da8a:	ee12 2a90 	vmov	r2, s5
9001da8e:	eef0 2a47 	vmov.f32	s5, s14
9001da92:	fb92 f3f3 	sdiv	r3, r2, r3
9001da96:	ee13 2a10 	vmov	r2, s6
9001da9a:	9313      	str	r3, [sp, #76]	; 0x4c
9001da9c:	9b10      	ldr	r3, [sp, #64]	; 0x40
9001da9e:	eeb0 3a67 	vmov.f32	s6, s15
9001daa2:	fb92 f3f3 	sdiv	r3, r2, r3
9001daa6:	9314      	str	r3, [sp, #80]	; 0x50
9001daa8:	9b01      	ldr	r3, [sp, #4]
9001daaa:	9a05      	ldr	r2, [sp, #20]
9001daac:	3b01      	subs	r3, #1
9001daae:	9301      	str	r3, [sp, #4]
9001dab0:	9b10      	ldr	r3, [sp, #64]	; 0x40
9001dab2:	bf08      	it	eq
9001dab4:	4613      	moveq	r3, r2
9001dab6:	e788      	b.n	9001d9ca <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
9001dab8:	1406      	asrs	r6, r0, #16
9001daba:	d42c      	bmi.n	9001db16 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
9001dabc:	f8db 2008 	ldr.w	r2, [fp, #8]
9001dac0:	42b2      	cmp	r2, r6
9001dac2:	dd28      	ble.n	9001db16 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
9001dac4:	140f      	asrs	r7, r1, #16
9001dac6:	d426      	bmi.n	9001db16 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
9001dac8:	f8db 200c 	ldr.w	r2, [fp, #12]
9001dacc:	42ba      	cmp	r2, r7
9001dace:	dd22      	ble.n	9001db16 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
9001dad0:	9a02      	ldr	r2, [sp, #8]
9001dad2:	fb07 6602 	mla	r6, r7, r2, r6
9001dad6:	9f03      	ldr	r7, [sp, #12]
9001dad8:	0872      	lsrs	r2, r6, #1
9001dada:	07f6      	lsls	r6, r6, #31
9001dadc:	5cba      	ldrb	r2, [r7, r2]
9001dade:	bf54      	ite	pl
9001dae0:	f002 020f 	andpl.w	r2, r2, #15
9001dae4:	1112      	asrmi	r2, r2, #4
9001dae6:	eb02 1202 	add.w	r2, r2, r2, lsl #4
9001daea:	b2d2      	uxtb	r2, r2
9001daec:	2aff      	cmp	r2, #255	; 0xff
9001daee:	d118      	bne.n	9001db22 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x192>
9001daf0:	f06f 0601 	mvn.w	r6, #1
9001daf4:	f8d8 2000 	ldr.w	r2, [r8]
9001daf8:	fb06 f705 	mul.w	r7, r6, r5
9001dafc:	f2a6 76fe 	subw	r6, r6, #2046	; 0x7fe
9001db00:	ea06 2c12 	and.w	ip, r6, r2, lsr #8
9001db04:	0956      	lsrs	r6, r2, #5
9001db06:	f3c2 02c4 	ubfx	r2, r2, #3, #5
9001db0a:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
9001db0e:	ea4c 0606 	orr.w	r6, ip, r6
9001db12:	4316      	orrs	r6, r2
9001db14:	53e6      	strh	r6, [r4, r7]
9001db16:	9a13      	ldr	r2, [sp, #76]	; 0x4c
9001db18:	3d01      	subs	r5, #1
9001db1a:	4410      	add	r0, r2
9001db1c:	9a14      	ldr	r2, [sp, #80]	; 0x50
9001db1e:	4411      	add	r1, r2
9001db20:	e787      	b.n	9001da32 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
9001db22:	2a00      	cmp	r2, #0
9001db24:	d0f7      	beq.n	9001db16 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
9001db26:	f06f 0601 	mvn.w	r6, #1
9001db2a:	f8d8 c000 	ldr.w	ip, [r8]
9001db2e:	fa1f f982 	uxth.w	r9, r2
9001db32:	43d2      	mvns	r2, r2
9001db34:	436e      	muls	r6, r5
9001db36:	f3cc 2a07 	ubfx	sl, ip, #8, #8
9001db3a:	b2d2      	uxtb	r2, r2
9001db3c:	f834 e006 	ldrh.w	lr, [r4, r6]
9001db40:	fb1a fa09 	smulbb	sl, sl, r9
9001db44:	9604      	str	r6, [sp, #16]
9001db46:	f3cc 4607 	ubfx	r6, ip, #16, #8
9001db4a:	ea4f 272e 	mov.w	r7, lr, asr #8
9001db4e:	fb16 f609 	smulbb	r6, r6, r9
9001db52:	fa5f fc8c 	uxtb.w	ip, ip
9001db56:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
9001db5a:	fb1c fc09 	smulbb	ip, ip, r9
9001db5e:	fb07 6702 	mla	r7, r7, r2, r6
9001db62:	ea4f 06ee 	mov.w	r6, lr, asr #3
9001db66:	ea4f 0ece 	mov.w	lr, lr, lsl #3
9001db6a:	b2bf      	uxth	r7, r7
9001db6c:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
9001db70:	fa5f fe8e 	uxtb.w	lr, lr
9001db74:	fb06 a602 	mla	r6, r6, r2, sl
9001db78:	fb0e cc02 	mla	ip, lr, r2, ip
9001db7c:	1c7a      	adds	r2, r7, #1
9001db7e:	b2b6      	uxth	r6, r6
9001db80:	fa1f fc8c 	uxth.w	ip, ip
9001db84:	eb02 2717 	add.w	r7, r2, r7, lsr #8
9001db88:	9a04      	ldr	r2, [sp, #16]
9001db8a:	f10c 0a01 	add.w	sl, ip, #1
9001db8e:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
9001db92:	eb0a 2a1c 	add.w	sl, sl, ip, lsr #8
9001db96:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
9001db9a:	ea4a 0707 	orr.w	r7, sl, r7
9001db9e:	f106 0a01 	add.w	sl, r6, #1
9001dba2:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
9001dba6:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
9001dbaa:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
9001dbae:	ea47 070a 	orr.w	r7, r7, sl
9001dbb2:	52a7      	strh	r7, [r4, r2]
9001dbb4:	e7af      	b.n	9001db16 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
9001dbb6:	f04f 0e00 	mov.w	lr, #0
9001dbba:	eba3 020e 	sub.w	r2, r3, lr
9001dbbe:	2a00      	cmp	r2, #0
9001dbc0:	f77f af3a 	ble.w	9001da38 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
9001dbc4:	1402      	asrs	r2, r0, #16
9001dbc6:	9e02      	ldr	r6, [sp, #8]
9001dbc8:	140d      	asrs	r5, r1, #16
9001dbca:	fb06 2505 	mla	r5, r6, r5, r2
9001dbce:	9e03      	ldr	r6, [sp, #12]
9001dbd0:	086a      	lsrs	r2, r5, #1
9001dbd2:	07ed      	lsls	r5, r5, #31
9001dbd4:	5cb2      	ldrb	r2, [r6, r2]
9001dbd6:	bf54      	ite	pl
9001dbd8:	f002 020f 	andpl.w	r2, r2, #15
9001dbdc:	1112      	asrmi	r2, r2, #4
9001dbde:	eb02 1202 	add.w	r2, r2, r2, lsl #4
9001dbe2:	b2d2      	uxtb	r2, r2
9001dbe4:	2aff      	cmp	r2, #255	; 0xff
9001dbe6:	d115      	bne.n	9001dc14 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x284>
9001dbe8:	f8d8 5000 	ldr.w	r5, [r8]
9001dbec:	f6a2 02ff 	subw	r2, r2, #2303	; 0x8ff
9001dbf0:	ea02 2615 	and.w	r6, r2, r5, lsr #8
9001dbf4:	096a      	lsrs	r2, r5, #5
9001dbf6:	f3c5 05c4 	ubfx	r5, r5, #3, #5
9001dbfa:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
9001dbfe:	4332      	orrs	r2, r6
9001dc00:	432a      	orrs	r2, r5
9001dc02:	f824 201e 	strh.w	r2, [r4, lr, lsl #1]
9001dc06:	9a13      	ldr	r2, [sp, #76]	; 0x4c
9001dc08:	f10e 0e01 	add.w	lr, lr, #1
9001dc0c:	4410      	add	r0, r2
9001dc0e:	9a14      	ldr	r2, [sp, #80]	; 0x50
9001dc10:	4411      	add	r1, r2
9001dc12:	e7d2      	b.n	9001dbba <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
9001dc14:	2a00      	cmp	r2, #0
9001dc16:	d0f6      	beq.n	9001dc06 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
9001dc18:	f8d8 7000 	ldr.w	r7, [r8]
9001dc1c:	fa1f f982 	uxth.w	r9, r2
9001dc20:	f834 c01e 	ldrh.w	ip, [r4, lr, lsl #1]
9001dc24:	43d2      	mvns	r2, r2
9001dc26:	f3c7 4507 	ubfx	r5, r7, #16, #8
9001dc2a:	f3c7 2a07 	ubfx	sl, r7, #8, #8
9001dc2e:	ea4f 262c 	mov.w	r6, ip, asr #8
9001dc32:	fb15 f509 	smulbb	r5, r5, r9
9001dc36:	b2d2      	uxtb	r2, r2
9001dc38:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
9001dc3c:	b2ff      	uxtb	r7, r7
9001dc3e:	fb1a fa09 	smulbb	sl, sl, r9
9001dc42:	fb06 5602 	mla	r6, r6, r2, r5
9001dc46:	ea4f 05ec 	mov.w	r5, ip, asr #3
9001dc4a:	fb17 f709 	smulbb	r7, r7, r9
9001dc4e:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
9001dc52:	b2b6      	uxth	r6, r6
9001dc54:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
9001dc58:	fa5f fc8c 	uxtb.w	ip, ip
9001dc5c:	fb05 a502 	mla	r5, r5, r2, sl
9001dc60:	fb0c 7702 	mla	r7, ip, r2, r7
9001dc64:	1c72      	adds	r2, r6, #1
9001dc66:	b2ad      	uxth	r5, r5
9001dc68:	b2bf      	uxth	r7, r7
9001dc6a:	eb02 2616 	add.w	r6, r2, r6, lsr #8
9001dc6e:	f107 0a01 	add.w	sl, r7, #1
9001dc72:	f406 4678 	and.w	r6, r6, #63488	; 0xf800
9001dc76:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
9001dc7a:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
9001dc7e:	ea4a 0606 	orr.w	r6, sl, r6
9001dc82:	f105 0a01 	add.w	sl, r5, #1
9001dc86:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
9001dc8a:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
9001dc8e:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
9001dc92:	ea46 060a 	orr.w	r6, r6, sl
9001dc96:	f824 601e 	strh.w	r6, [r4, lr, lsl #1]
9001dc9a:	e7b4      	b.n	9001dc06 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
9001dc9c:	b007      	add	sp, #28
9001dc9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9001dca2:	bf00      	nop
9001dca4:	240281fc 	.word	0x240281fc

9001dca8 <_ZN8touchgfx8LCD16bppD1Ev>:
9001dca8:	4770      	bx	lr

9001dcaa <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGAD1Ev>:
9001dcaa:	4770      	bx	lr

9001dcac <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GAD1Ev>:
9001dcac:	4770      	bx	lr

9001dcae <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGAD1Ev>:
9001dcae:	4770      	bx	lr

9001dcb0 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GAD1Ev>:
9001dcb0:	4770      	bx	lr

9001dcb2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
9001dcb2:	4770      	bx	lr

9001dcb4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
9001dcb4:	4770      	bx	lr

9001dcb6 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
9001dcb6:	4770      	bx	lr

9001dcb8 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
9001dcb8:	4770      	bx	lr

9001dcba <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGAD1Ev>:
9001dcba:	4770      	bx	lr

9001dcbc <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GAD1Ev>:
9001dcbc:	4770      	bx	lr

9001dcbe <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
9001dcbe:	4770      	bx	lr

9001dcc0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GAD1Ev>:
9001dcc0:	4770      	bx	lr

9001dcc2 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGAD1Ev>:
9001dcc2:	4770      	bx	lr

9001dcc4 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GAD1Ev>:
9001dcc4:	4770      	bx	lr

9001dcc6 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGAD1Ev>:
9001dcc6:	4770      	bx	lr

9001dcc8 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GAD1Ev>:
9001dcc8:	4770      	bx	lr

9001dcca <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
9001dcca:	4770      	bx	lr

9001dccc <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
9001dccc:	4770      	bx	lr

9001dcce <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
9001dcce:	4770      	bx	lr

9001dcd0 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
9001dcd0:	4770      	bx	lr

9001dcd2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
9001dcd2:	4770      	bx	lr

9001dcd4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
9001dcd4:	4770      	bx	lr

9001dcd6 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
9001dcd6:	4770      	bx	lr

9001dcd8 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
9001dcd8:	4770      	bx	lr

9001dcda <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGAD1Ev>:
9001dcda:	4770      	bx	lr

9001dcdc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GAD1Ev>:
9001dcdc:	4770      	bx	lr

9001dcde <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGAD1Ev>:
9001dcde:	4770      	bx	lr

9001dce0 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GAD1Ev>:
9001dce0:	4770      	bx	lr

9001dce2 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t>:
9001dce2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
9001dce6:	b088      	sub	sp, #32
9001dce8:	4606      	mov	r6, r0
9001dcea:	4688      	mov	r8, r1
9001dcec:	4691      	mov	r9, r2
9001dcee:	ac08      	add	r4, sp, #32
9001dcf0:	f824 3d0c 	strh.w	r3, [r4, #-12]!
9001dcf4:	4620      	mov	r0, r4
9001dcf6:	f7fd fc67 	bl	9001b5c8 <_ZNK8touchgfx6Bitmap7getDataEv>
9001dcfa:	6833      	ldr	r3, [r6, #0]
9001dcfc:	4605      	mov	r5, r0
9001dcfe:	4620      	mov	r0, r4
9001dd00:	699f      	ldr	r7, [r3, #24]
9001dd02:	f7fd fb75 	bl	9001b3f0 <_ZNK8touchgfx6Bitmap8getWidthEv>
9001dd06:	4682      	mov	sl, r0
9001dd08:	4620      	mov	r0, r4
9001dd0a:	f7fd fba5 	bl	9001b458 <_ZNK8touchgfx6Bitmap9getHeightEv>
9001dd0e:	9500      	str	r5, [sp, #0]
9001dd10:	464b      	mov	r3, r9
9001dd12:	4642      	mov	r2, r8
9001dd14:	4631      	mov	r1, r6
9001dd16:	e9cd a001 	strd	sl, r0, [sp, #4]
9001dd1a:	a806      	add	r0, sp, #24
9001dd1c:	47b8      	blx	r7
9001dd1e:	4628      	mov	r0, r5
9001dd20:	b008      	add	sp, #32
9001dd22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

9001dd28 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE>:
9001dd28:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
9001dd2c:	2300      	movs	r3, #0
9001dd2e:	9300      	str	r3, [sp, #0]
9001dd30:	4b3d      	ldr	r3, [pc, #244]	; (9001de28 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x100>)
9001dd32:	781b      	ldrb	r3, [r3, #0]
9001dd34:	2b00      	cmp	r3, #0
9001dd36:	d137      	bne.n	9001dda8 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x80>
9001dd38:	4a3c      	ldr	r2, [pc, #240]	; (9001de2c <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>)
9001dd3a:	f9b2 2000 	ldrsh.w	r2, [r2]
9001dd3e:	f8ad 2004 	strh.w	r2, [sp, #4]
9001dd42:	2b00      	cmp	r3, #0
9001dd44:	d132      	bne.n	9001ddac <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x84>
9001dd46:	4b3a      	ldr	r3, [pc, #232]	; (9001de30 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x108>)
9001dd48:	f9b3 3000 	ldrsh.w	r3, [r3]
9001dd4c:	ac02      	add	r4, sp, #8
9001dd4e:	6808      	ldr	r0, [r1, #0]
9001dd50:	f8ad 3006 	strh.w	r3, [sp, #6]
9001dd54:	ab02      	add	r3, sp, #8
9001dd56:	6849      	ldr	r1, [r1, #4]
9001dd58:	4d36      	ldr	r5, [pc, #216]	; (9001de34 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x10c>)
9001dd5a:	c303      	stmia	r3!, {r0, r1}
9001dd5c:	4669      	mov	r1, sp
9001dd5e:	4620      	mov	r0, r4
9001dd60:	f7fa f8b8 	bl	90017ed4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
9001dd64:	4668      	mov	r0, sp
9001dd66:	f7fa f88d 	bl	90017e84 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
9001dd6a:	f8bd 3008 	ldrh.w	r3, [sp, #8]
9001dd6e:	f8bd 2000 	ldrh.w	r2, [sp]
9001dd72:	462f      	mov	r7, r5
9001dd74:	6828      	ldr	r0, [r5, #0]
9001dd76:	4413      	add	r3, r2
9001dd78:	f8bd 2002 	ldrh.w	r2, [sp, #2]
9001dd7c:	f8ad 3008 	strh.w	r3, [sp, #8]
9001dd80:	f8bd 300a 	ldrh.w	r3, [sp, #10]
9001dd84:	4413      	add	r3, r2
9001dd86:	f8ad 300a 	strh.w	r3, [sp, #10]
9001dd8a:	6803      	ldr	r3, [r0, #0]
9001dd8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
9001dd8e:	4798      	blx	r3
9001dd90:	f010 0f01 	tst.w	r0, #1
9001dd94:	d00c      	beq.n	9001ddb0 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x88>
9001dd96:	6828      	ldr	r0, [r5, #0]
9001dd98:	6803      	ldr	r3, [r0, #0]
9001dd9a:	e894 0006 	ldmia.w	r4, {r1, r2}
9001dd9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
9001dda0:	4798      	blx	r3
9001dda2:	b004      	add	sp, #16
9001dda4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
9001dda8:	4a21      	ldr	r2, [pc, #132]	; (9001de30 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x108>)
9001ddaa:	e7c6      	b.n	9001dd3a <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x12>
9001ddac:	4b1f      	ldr	r3, [pc, #124]	; (9001de2c <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>)
9001ddae:	e7cb      	b.n	9001dd48 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x20>
9001ddb0:	6838      	ldr	r0, [r7, #0]
9001ddb2:	f9bd 800c 	ldrsh.w	r8, [sp, #12]
9001ddb6:	6803      	ldr	r3, [r0, #0]
9001ddb8:	f9bd 500e 	ldrsh.w	r5, [sp, #14]
9001ddbc:	ea4f 0848 	mov.w	r8, r8, lsl #1
9001ddc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
9001ddc2:	4798      	blx	r3
9001ddc4:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
9001ddc8:	f8bd 200a 	ldrh.w	r2, [sp, #10]
9001ddcc:	f8bd 6004 	ldrh.w	r6, [sp, #4]
9001ddd0:	fb16 3602 	smlabb	r6, r6, r2, r3
9001ddd4:	eb00 0646 	add.w	r6, r0, r6, lsl #1
9001ddd8:	6838      	ldr	r0, [r7, #0]
9001ddda:	6803      	ldr	r3, [r0, #0]
9001dddc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
9001ddde:	4798      	blx	r3
9001dde0:	4a12      	ldr	r2, [pc, #72]	; (9001de2c <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>)
9001dde2:	f9bd 400a 	ldrsh.w	r4, [sp, #10]
9001dde6:	8813      	ldrh	r3, [r2, #0]
9001dde8:	4691      	mov	r9, r2
9001ddea:	f9bd 1008 	ldrsh.w	r1, [sp, #8]
9001ddee:	435d      	muls	r5, r3
9001ddf0:	fb03 1404 	mla	r4, r3, r4, r1
9001ddf4:	eb00 0444 	add.w	r4, r0, r4, lsl #1
9001ddf8:	eb04 0545 	add.w	r5, r4, r5, lsl #1
9001ddfc:	6838      	ldr	r0, [r7, #0]
9001ddfe:	42ac      	cmp	r4, r5
9001de00:	6803      	ldr	r3, [r0, #0]
9001de02:	d20e      	bcs.n	9001de22 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xfa>
9001de04:	f8d3 a034 	ldr.w	sl, [r3, #52]	; 0x34
9001de08:	4632      	mov	r2, r6
9001de0a:	4643      	mov	r3, r8
9001de0c:	4621      	mov	r1, r4
9001de0e:	47d0      	blx	sl
9001de10:	f8b9 3000 	ldrh.w	r3, [r9]
9001de14:	eb04 0443 	add.w	r4, r4, r3, lsl #1
9001de18:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
9001de1c:	eb06 0643 	add.w	r6, r6, r3, lsl #1
9001de20:	e7ec      	b.n	9001ddfc <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xd4>
9001de22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9001de24:	4798      	blx	r3
9001de26:	e7bc      	b.n	9001dda2 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x7a>
9001de28:	240281e4 	.word	0x240281e4
9001de2c:	240281e6 	.word	0x240281e6
9001de30:	240281e8 	.word	0x240281e8
9001de34:	240281ec 	.word	0x240281ec

9001de38 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb>:
9001de38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001de3c:	b08b      	sub	sp, #44	; 0x2c
9001de3e:	460f      	mov	r7, r1
9001de40:	4616      	mov	r6, r2
9001de42:	f89d b050 	ldrb.w	fp, [sp, #80]	; 0x50
9001de46:	f89d 4054 	ldrb.w	r4, [sp, #84]	; 0x54
9001de4a:	f1bb 0f00 	cmp.w	fp, #0
9001de4e:	d049      	beq.n	9001dee4 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xac>
9001de50:	6810      	ldr	r0, [r2, #0]
9001de52:	ad06      	add	r5, sp, #24
9001de54:	6851      	ldr	r1, [r2, #4]
9001de56:	c503      	stmia	r5!, {r0, r1}
9001de58:	6818      	ldr	r0, [r3, #0]
9001de5a:	ad08      	add	r5, sp, #32
9001de5c:	6859      	ldr	r1, [r3, #4]
9001de5e:	c503      	stmia	r5!, {r0, r1}
9001de60:	a806      	add	r0, sp, #24
9001de62:	f7fa f80f 	bl	90017e84 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
9001de66:	4631      	mov	r1, r6
9001de68:	a808      	add	r0, sp, #32
9001de6a:	f7fa f833 	bl	90017ed4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
9001de6e:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
9001de72:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
9001de76:	f8bd 601c 	ldrh.w	r6, [sp, #28]
9001de7a:	f9bd 8024 	ldrsh.w	r8, [sp, #36]	; 0x24
9001de7e:	fb16 2103 	smlabb	r1, r6, r3, r2
9001de82:	f9bd 5026 	ldrsh.w	r5, [sp, #38]	; 0x26
9001de86:	eb07 0641 	add.w	r6, r7, r1, lsl #1
9001de8a:	f8bd 1018 	ldrh.w	r1, [sp, #24]
9001de8e:	4f5f      	ldr	r7, [pc, #380]	; (9001e00c <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d4>)
9001de90:	440a      	add	r2, r1
9001de92:	6838      	ldr	r0, [r7, #0]
9001de94:	46b9      	mov	r9, r7
9001de96:	f8ad 2020 	strh.w	r2, [sp, #32]
9001de9a:	f8bd 201a 	ldrh.w	r2, [sp, #26]
9001de9e:	4413      	add	r3, r2
9001dea0:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
9001dea4:	6803      	ldr	r3, [r0, #0]
9001dea6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
9001dea8:	4798      	blx	r3
9001deaa:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
9001deae:	d01c      	beq.n	9001deea <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb2>
9001deb0:	f010 0f04 	tst.w	r0, #4
9001deb4:	d01d      	beq.n	9001def2 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xba>
9001deb6:	f8d9 0000 	ldr.w	r0, [r9]
9001deba:	2700      	movs	r7, #0
9001debc:	b2ad      	uxth	r5, r5
9001debe:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
9001dec2:	6801      	ldr	r1, [r0, #0]
9001dec4:	f8bd 2020 	ldrh.w	r2, [sp, #32]
9001dec8:	f8cd b00c 	str.w	fp, [sp, #12]
9001decc:	9501      	str	r5, [sp, #4]
9001dece:	e9cd 4704 	strd	r4, r7, [sp, #16]
9001ded2:	f8bd 401c 	ldrh.w	r4, [sp, #28]
9001ded6:	9402      	str	r4, [sp, #8]
9001ded8:	fa1f f488 	uxth.w	r4, r8
9001dedc:	9400      	str	r4, [sp, #0]
9001dede:	6c4c      	ldr	r4, [r1, #68]	; 0x44
9001dee0:	4631      	mov	r1, r6
9001dee2:	47a0      	blx	r4
9001dee4:	b00b      	add	sp, #44	; 0x2c
9001dee6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9001deea:	b914      	cbnz	r4, 9001def2 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xba>
9001deec:	f010 0f01 	tst.w	r0, #1
9001def0:	e7e0      	b.n	9001deb4 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x7c>
9001def2:	f8d9 0000 	ldr.w	r0, [r9]
9001def6:	ea4f 0748 	mov.w	r7, r8, lsl #1
9001defa:	6803      	ldr	r3, [r0, #0]
9001defc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
9001defe:	4798      	blx	r3
9001df00:	4b43      	ldr	r3, [pc, #268]	; (9001e010 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d8>)
9001df02:	f9bd 4022 	ldrsh.w	r4, [sp, #34]	; 0x22
9001df06:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
9001df0a:	881a      	ldrh	r2, [r3, #0]
9001df0c:	469a      	mov	sl, r3
9001df0e:	f9bd 1020 	ldrsh.w	r1, [sp, #32]
9001df12:	fb05 f502 	mul.w	r5, r5, r2
9001df16:	fb02 1404 	mla	r4, r2, r4, r1
9001df1a:	eb00 0444 	add.w	r4, r0, r4, lsl #1
9001df1e:	d059      	beq.n	9001dfd4 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x19c>
9001df20:	f1cb 09ff 	rsb	r9, fp, #255	; 0xff
9001df24:	eb04 0545 	add.w	r5, r4, r5, lsl #1
9001df28:	fa1f f28b 	uxth.w	r2, fp
9001df2c:	469e      	mov	lr, r3
9001df2e:	fa1f f989 	uxth.w	r9, r9
9001df32:	42ac      	cmp	r4, r5
9001df34:	d264      	bcs.n	9001e000 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1c8>
9001df36:	eb04 0a07 	add.w	sl, r4, r7
9001df3a:	4554      	cmp	r4, sl
9001df3c:	d23d      	bcs.n	9001dfba <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x182>
9001df3e:	8821      	ldrh	r1, [r4, #0]
9001df40:	f836 3b02 	ldrh.w	r3, [r6], #2
9001df44:	1208      	asrs	r0, r1, #8
9001df46:	ea4f 2c23 	mov.w	ip, r3, asr #8
9001df4a:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
9001df4e:	ea4f 0be1 	mov.w	fp, r1, asr #3
9001df52:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
9001df56:	00c9      	lsls	r1, r1, #3
9001df58:	fb10 f009 	smulbb	r0, r0, r9
9001df5c:	f00b 0bfc 	and.w	fp, fp, #252	; 0xfc
9001df60:	b2c9      	uxtb	r1, r1
9001df62:	fb0c 0c02 	mla	ip, ip, r2, r0
9001df66:	10d8      	asrs	r0, r3, #3
9001df68:	fb1b fb09 	smulbb	fp, fp, r9
9001df6c:	00db      	lsls	r3, r3, #3
9001df6e:	fa1f fc8c 	uxth.w	ip, ip
9001df72:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
9001df76:	fb11 f109 	smulbb	r1, r1, r9
9001df7a:	b2db      	uxtb	r3, r3
9001df7c:	fb00 b002 	mla	r0, r0, r2, fp
9001df80:	f10c 0b01 	add.w	fp, ip, #1
9001df84:	fb03 1302 	mla	r3, r3, r2, r1
9001df88:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
9001df8c:	b29b      	uxth	r3, r3
9001df8e:	b280      	uxth	r0, r0
9001df90:	f40c 4b78 	and.w	fp, ip, #63488	; 0xf800
9001df94:	f103 0c01 	add.w	ip, r3, #1
9001df98:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
9001df9c:	1c43      	adds	r3, r0, #1
9001df9e:	eb03 2010 	add.w	r0, r3, r0, lsr #8
9001dfa2:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
9001dfa6:	0940      	lsrs	r0, r0, #5
9001dfa8:	ea4c 0c0b 	orr.w	ip, ip, fp
9001dfac:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
9001dfb0:	ea4c 0c00 	orr.w	ip, ip, r0
9001dfb4:	f824 cb02 	strh.w	ip, [r4], #2
9001dfb8:	e7bf      	b.n	9001df3a <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x102>
9001dfba:	f8be 3000 	ldrh.w	r3, [lr]
9001dfbe:	eba3 0308 	sub.w	r3, r3, r8
9001dfc2:	eb04 0443 	add.w	r4, r4, r3, lsl #1
9001dfc6:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
9001dfca:	eba3 0308 	sub.w	r3, r3, r8
9001dfce:	eb06 0643 	add.w	r6, r6, r3, lsl #1
9001dfd2:	e7ae      	b.n	9001df32 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xfa>
9001dfd4:	eb04 0545 	add.w	r5, r4, r5, lsl #1
9001dfd8:	f8d9 0000 	ldr.w	r0, [r9]
9001dfdc:	42ac      	cmp	r4, r5
9001dfde:	6803      	ldr	r3, [r0, #0]
9001dfe0:	d20e      	bcs.n	9001e000 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1c8>
9001dfe2:	f8d3 8034 	ldr.w	r8, [r3, #52]	; 0x34
9001dfe6:	4632      	mov	r2, r6
9001dfe8:	463b      	mov	r3, r7
9001dfea:	4621      	mov	r1, r4
9001dfec:	47c0      	blx	r8
9001dfee:	f8ba 3000 	ldrh.w	r3, [sl]
9001dff2:	eb04 0443 	add.w	r4, r4, r3, lsl #1
9001dff6:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
9001dffa:	eb06 0643 	add.w	r6, r6, r3, lsl #1
9001dffe:	e7eb      	b.n	9001dfd8 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1a0>
9001e000:	4b02      	ldr	r3, [pc, #8]	; (9001e00c <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d4>)
9001e002:	6818      	ldr	r0, [r3, #0]
9001e004:	6803      	ldr	r3, [r0, #0]
9001e006:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9001e008:	4798      	blx	r3
9001e00a:	e76b      	b.n	9001dee4 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xac>
9001e00c:	240281ec 	.word	0x240281ec
9001e010:	240281e6 	.word	0x240281e6

9001e014 <_ZN8touchgfx8LCD16bppD0Ev>:
9001e014:	b510      	push	{r4, lr}
9001e016:	4604      	mov	r4, r0
9001e018:	2178      	movs	r1, #120	; 0x78
9001e01a:	f009 faec 	bl	900275f6 <_ZdlPvj>
9001e01e:	4620      	mov	r0, r4
9001e020:	bd10      	pop	{r4, pc}

9001e022 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGAD0Ev>:
9001e022:	b510      	push	{r4, lr}
9001e024:	4604      	mov	r4, r0
9001e026:	2104      	movs	r1, #4
9001e028:	f009 fae5 	bl	900275f6 <_ZdlPvj>
9001e02c:	4620      	mov	r0, r4
9001e02e:	bd10      	pop	{r4, pc}

9001e030 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GAD0Ev>:
9001e030:	b510      	push	{r4, lr}
9001e032:	4604      	mov	r4, r0
9001e034:	2104      	movs	r1, #4
9001e036:	f009 fade 	bl	900275f6 <_ZdlPvj>
9001e03a:	4620      	mov	r0, r4
9001e03c:	bd10      	pop	{r4, pc}

9001e03e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGAD0Ev>:
9001e03e:	b510      	push	{r4, lr}
9001e040:	4604      	mov	r4, r0
9001e042:	2104      	movs	r1, #4
9001e044:	f009 fad7 	bl	900275f6 <_ZdlPvj>
9001e048:	4620      	mov	r0, r4
9001e04a:	bd10      	pop	{r4, pc}

9001e04c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GAD0Ev>:
9001e04c:	b510      	push	{r4, lr}
9001e04e:	4604      	mov	r4, r0
9001e050:	2104      	movs	r1, #4
9001e052:	f009 fad0 	bl	900275f6 <_ZdlPvj>
9001e056:	4620      	mov	r0, r4
9001e058:	bd10      	pop	{r4, pc}

9001e05a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
9001e05a:	b510      	push	{r4, lr}
9001e05c:	4604      	mov	r4, r0
9001e05e:	2104      	movs	r1, #4
9001e060:	f009 fac9 	bl	900275f6 <_ZdlPvj>
9001e064:	4620      	mov	r0, r4
9001e066:	bd10      	pop	{r4, pc}

9001e068 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
9001e068:	b510      	push	{r4, lr}
9001e06a:	4604      	mov	r4, r0
9001e06c:	2104      	movs	r1, #4
9001e06e:	f009 fac2 	bl	900275f6 <_ZdlPvj>
9001e072:	4620      	mov	r0, r4
9001e074:	bd10      	pop	{r4, pc}

9001e076 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
9001e076:	b510      	push	{r4, lr}
9001e078:	4604      	mov	r4, r0
9001e07a:	2104      	movs	r1, #4
9001e07c:	f009 fabb 	bl	900275f6 <_ZdlPvj>
9001e080:	4620      	mov	r0, r4
9001e082:	bd10      	pop	{r4, pc}

9001e084 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
9001e084:	b510      	push	{r4, lr}
9001e086:	4604      	mov	r4, r0
9001e088:	2104      	movs	r1, #4
9001e08a:	f009 fab4 	bl	900275f6 <_ZdlPvj>
9001e08e:	4620      	mov	r0, r4
9001e090:	bd10      	pop	{r4, pc}

9001e092 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
9001e092:	b510      	push	{r4, lr}
9001e094:	4604      	mov	r4, r0
9001e096:	2104      	movs	r1, #4
9001e098:	f009 faad 	bl	900275f6 <_ZdlPvj>
9001e09c:	4620      	mov	r0, r4
9001e09e:	bd10      	pop	{r4, pc}

9001e0a0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
9001e0a0:	b510      	push	{r4, lr}
9001e0a2:	4604      	mov	r4, r0
9001e0a4:	2104      	movs	r1, #4
9001e0a6:	f009 faa6 	bl	900275f6 <_ZdlPvj>
9001e0aa:	4620      	mov	r0, r4
9001e0ac:	bd10      	pop	{r4, pc}

9001e0ae <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
9001e0ae:	b510      	push	{r4, lr}
9001e0b0:	4604      	mov	r4, r0
9001e0b2:	2104      	movs	r1, #4
9001e0b4:	f009 fa9f 	bl	900275f6 <_ZdlPvj>
9001e0b8:	4620      	mov	r0, r4
9001e0ba:	bd10      	pop	{r4, pc}

9001e0bc <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
9001e0bc:	b510      	push	{r4, lr}
9001e0be:	4604      	mov	r4, r0
9001e0c0:	2104      	movs	r1, #4
9001e0c2:	f009 fa98 	bl	900275f6 <_ZdlPvj>
9001e0c6:	4620      	mov	r0, r4
9001e0c8:	bd10      	pop	{r4, pc}

9001e0ca <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGAD0Ev>:
9001e0ca:	b510      	push	{r4, lr}
9001e0cc:	4604      	mov	r4, r0
9001e0ce:	2104      	movs	r1, #4
9001e0d0:	f009 fa91 	bl	900275f6 <_ZdlPvj>
9001e0d4:	4620      	mov	r0, r4
9001e0d6:	bd10      	pop	{r4, pc}

9001e0d8 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GAD0Ev>:
9001e0d8:	b510      	push	{r4, lr}
9001e0da:	4604      	mov	r4, r0
9001e0dc:	2104      	movs	r1, #4
9001e0de:	f009 fa8a 	bl	900275f6 <_ZdlPvj>
9001e0e2:	4620      	mov	r0, r4
9001e0e4:	bd10      	pop	{r4, pc}

9001e0e6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
9001e0e6:	b510      	push	{r4, lr}
9001e0e8:	4604      	mov	r4, r0
9001e0ea:	2104      	movs	r1, #4
9001e0ec:	f009 fa83 	bl	900275f6 <_ZdlPvj>
9001e0f0:	4620      	mov	r0, r4
9001e0f2:	bd10      	pop	{r4, pc}

9001e0f4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GAD0Ev>:
9001e0f4:	b510      	push	{r4, lr}
9001e0f6:	4604      	mov	r4, r0
9001e0f8:	2104      	movs	r1, #4
9001e0fa:	f009 fa7c 	bl	900275f6 <_ZdlPvj>
9001e0fe:	4620      	mov	r0, r4
9001e100:	bd10      	pop	{r4, pc}

9001e102 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGAD0Ev>:
9001e102:	b510      	push	{r4, lr}
9001e104:	4604      	mov	r4, r0
9001e106:	2104      	movs	r1, #4
9001e108:	f009 fa75 	bl	900275f6 <_ZdlPvj>
9001e10c:	4620      	mov	r0, r4
9001e10e:	bd10      	pop	{r4, pc}

9001e110 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GAD0Ev>:
9001e110:	b510      	push	{r4, lr}
9001e112:	4604      	mov	r4, r0
9001e114:	2104      	movs	r1, #4
9001e116:	f009 fa6e 	bl	900275f6 <_ZdlPvj>
9001e11a:	4620      	mov	r0, r4
9001e11c:	bd10      	pop	{r4, pc}

9001e11e <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGAD0Ev>:
9001e11e:	b510      	push	{r4, lr}
9001e120:	4604      	mov	r4, r0
9001e122:	2104      	movs	r1, #4
9001e124:	f009 fa67 	bl	900275f6 <_ZdlPvj>
9001e128:	4620      	mov	r0, r4
9001e12a:	bd10      	pop	{r4, pc}

9001e12c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GAD0Ev>:
9001e12c:	b510      	push	{r4, lr}
9001e12e:	4604      	mov	r4, r0
9001e130:	2104      	movs	r1, #4
9001e132:	f009 fa60 	bl	900275f6 <_ZdlPvj>
9001e136:	4620      	mov	r0, r4
9001e138:	bd10      	pop	{r4, pc}

9001e13a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
9001e13a:	b510      	push	{r4, lr}
9001e13c:	4604      	mov	r4, r0
9001e13e:	2104      	movs	r1, #4
9001e140:	f009 fa59 	bl	900275f6 <_ZdlPvj>
9001e144:	4620      	mov	r0, r4
9001e146:	bd10      	pop	{r4, pc}

9001e148 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
9001e148:	b510      	push	{r4, lr}
9001e14a:	4604      	mov	r4, r0
9001e14c:	2104      	movs	r1, #4
9001e14e:	f009 fa52 	bl	900275f6 <_ZdlPvj>
9001e152:	4620      	mov	r0, r4
9001e154:	bd10      	pop	{r4, pc}

9001e156 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
9001e156:	b510      	push	{r4, lr}
9001e158:	4604      	mov	r4, r0
9001e15a:	2104      	movs	r1, #4
9001e15c:	f009 fa4b 	bl	900275f6 <_ZdlPvj>
9001e160:	4620      	mov	r0, r4
9001e162:	bd10      	pop	{r4, pc}

9001e164 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
9001e164:	b510      	push	{r4, lr}
9001e166:	4604      	mov	r4, r0
9001e168:	2104      	movs	r1, #4
9001e16a:	f009 fa44 	bl	900275f6 <_ZdlPvj>
9001e16e:	4620      	mov	r0, r4
9001e170:	bd10      	pop	{r4, pc}

9001e172 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGAD0Ev>:
9001e172:	b510      	push	{r4, lr}
9001e174:	4604      	mov	r4, r0
9001e176:	2104      	movs	r1, #4
9001e178:	f009 fa3d 	bl	900275f6 <_ZdlPvj>
9001e17c:	4620      	mov	r0, r4
9001e17e:	bd10      	pop	{r4, pc}

9001e180 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GAD0Ev>:
9001e180:	b510      	push	{r4, lr}
9001e182:	4604      	mov	r4, r0
9001e184:	2104      	movs	r1, #4
9001e186:	f009 fa36 	bl	900275f6 <_ZdlPvj>
9001e18a:	4620      	mov	r0, r4
9001e18c:	bd10      	pop	{r4, pc}

9001e18e <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGAD0Ev>:
9001e18e:	b510      	push	{r4, lr}
9001e190:	4604      	mov	r4, r0
9001e192:	2104      	movs	r1, #4
9001e194:	f009 fa2f 	bl	900275f6 <_ZdlPvj>
9001e198:	4620      	mov	r0, r4
9001e19a:	bd10      	pop	{r4, pc}

9001e19c <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GAD0Ev>:
9001e19c:	b510      	push	{r4, lr}
9001e19e:	4604      	mov	r4, r0
9001e1a0:	2104      	movs	r1, #4
9001e1a2:	f009 fa28 	bl	900275f6 <_ZdlPvj>
9001e1a6:	4620      	mov	r0, r4
9001e1a8:	bd10      	pop	{r4, pc}
	...

9001e1ac <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss>:
9001e1ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001e1b0:	b091      	sub	sp, #68	; 0x44
9001e1b2:	469b      	mov	fp, r3
9001e1b4:	4616      	mov	r6, r2
9001e1b6:	f9b3 2000 	ldrsh.w	r2, [r3]
9001e1ba:	f10d 0828 	add.w	r8, sp, #40	; 0x28
9001e1be:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
9001e1c2:	f9bd 906c 	ldrsh.w	r9, [sp, #108]	; 0x6c
9001e1c6:	4604      	mov	r4, r0
9001e1c8:	f9bd 7070 	ldrsh.w	r7, [sp, #112]	; 0x70
9001e1cc:	4640      	mov	r0, r8
9001e1ce:	460d      	mov	r5, r1
9001e1d0:	4659      	mov	r1, fp
9001e1d2:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
9001e1d6:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
9001e1da:	f8ad 902c 	strh.w	r9, [sp, #44]	; 0x2c
9001e1de:	f8ad 702e 	strh.w	r7, [sp, #46]	; 0x2e
9001e1e2:	f7f4 fde7 	bl	90012db4 <_ZN8touchgfx4RectaNERKS0_>
9001e1e6:	4631      	mov	r1, r6
9001e1e8:	4640      	mov	r0, r8
9001e1ea:	f7f4 fde3 	bl	90012db4 <_ZN8touchgfx4RectaNERKS0_>
9001e1ee:	4b74      	ldr	r3, [pc, #464]	; (9001e3c0 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x214>)
9001e1f0:	8818      	ldrh	r0, [r3, #0]
9001e1f2:	4b74      	ldr	r3, [pc, #464]	; (9001e3c4 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x218>)
9001e1f4:	b202      	sxth	r2, r0
9001e1f6:	8819      	ldrh	r1, [r3, #0]
9001e1f8:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
9001e1fc:	b20e      	sxth	r6, r1
9001e1fe:	2b00      	cmp	r3, #0
9001e200:	da07      	bge.n	9001e212 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x66>
9001e202:	f8bd c02c 	ldrh.w	ip, [sp, #44]	; 0x2c
9001e206:	4463      	add	r3, ip
9001e208:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
9001e20c:	2300      	movs	r3, #0
9001e20e:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
9001e212:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
9001e216:	f9bd c02c 	ldrsh.w	ip, [sp, #44]	; 0x2c
9001e21a:	1ad2      	subs	r2, r2, r3
9001e21c:	4594      	cmp	ip, r2
9001e21e:	bfc4      	itt	gt
9001e220:	1ac2      	subgt	r2, r0, r3
9001e222:	f8ad 202c 	strhgt.w	r2, [sp, #44]	; 0x2c
9001e226:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	; 0x2a
9001e22a:	2a00      	cmp	r2, #0
9001e22c:	da07      	bge.n	9001e23e <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x92>
9001e22e:	f8bd c02e 	ldrh.w	ip, [sp, #46]	; 0x2e
9001e232:	4462      	add	r2, ip
9001e234:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
9001e238:	2200      	movs	r2, #0
9001e23a:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
9001e23e:	f9bd a02a 	ldrsh.w	sl, [sp, #42]	; 0x2a
9001e242:	f9bd 202e 	ldrsh.w	r2, [sp, #46]	; 0x2e
9001e246:	eba6 060a 	sub.w	r6, r6, sl
9001e24a:	42b2      	cmp	r2, r6
9001e24c:	bfc4      	itt	gt
9001e24e:	eba1 020a 	subgt.w	r2, r1, sl
9001e252:	f8ad 202e 	strhgt.w	r2, [sp, #46]	; 0x2e
9001e256:	4a5c      	ldr	r2, [pc, #368]	; (9001e3c8 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x21c>)
9001e258:	7812      	ldrb	r2, [r2, #0]
9001e25a:	b9a2      	cbnz	r2, 9001e286 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xda>
9001e25c:	f9bd 602c 	ldrsh.w	r6, [sp, #44]	; 0x2c
9001e260:	4286      	cmp	r6, r0
9001e262:	4640      	mov	r0, r8
9001e264:	9303      	str	r3, [sp, #12]
9001e266:	bf14      	ite	ne
9001e268:	2600      	movne	r6, #0
9001e26a:	2601      	moveq	r6, #1
9001e26c:	f7f4 fde5 	bl	90012e3a <_ZNK8touchgfx4Rect7isEmptyEv>
9001e270:	9b03      	ldr	r3, [sp, #12]
9001e272:	b160      	cbz	r0, 9001e28e <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xe2>
9001e274:	2300      	movs	r3, #0
9001e276:	8023      	strh	r3, [r4, #0]
9001e278:	8063      	strh	r3, [r4, #2]
9001e27a:	80a3      	strh	r3, [r4, #4]
9001e27c:	4620      	mov	r0, r4
9001e27e:	80e3      	strh	r3, [r4, #6]
9001e280:	b011      	add	sp, #68	; 0x44
9001e282:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9001e286:	f9bd 602e 	ldrsh.w	r6, [sp, #46]	; 0x2e
9001e28a:	428e      	cmp	r6, r1
9001e28c:	e7e9      	b.n	9001e262 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xb6>
9001e28e:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	; 0x2c
9001e292:	a90e      	add	r1, sp, #56	; 0x38
9001e294:	900e      	str	r0, [sp, #56]	; 0x38
9001e296:	a80c      	add	r0, sp, #48	; 0x30
9001e298:	9205      	str	r2, [sp, #20]
9001e29a:	f9bd 202e 	ldrsh.w	r2, [sp, #46]	; 0x2e
9001e29e:	f8ad 903c 	strh.w	r9, [sp, #60]	; 0x3c
9001e2a2:	9206      	str	r2, [sp, #24]
9001e2a4:	f8bb 2000 	ldrh.w	r2, [fp]
9001e2a8:	f8ad 703e 	strh.w	r7, [sp, #62]	; 0x3e
9001e2ac:	1a9b      	subs	r3, r3, r2
9001e2ae:	b21b      	sxth	r3, r3
9001e2b0:	9303      	str	r3, [sp, #12]
9001e2b2:	f8bb 3002 	ldrh.w	r3, [fp, #2]
9001e2b6:	f8df b118 	ldr.w	fp, [pc, #280]	; 9001e3d0 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x224>
9001e2ba:	ebaa 0a03 	sub.w	sl, sl, r3
9001e2be:	fa0f f38a 	sxth.w	r3, sl
9001e2c2:	9304      	str	r3, [sp, #16]
9001e2c4:	9b03      	ldr	r3, [sp, #12]
9001e2c6:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
9001e2ca:	9b04      	ldr	r3, [sp, #16]
9001e2cc:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
9001e2d0:	9b05      	ldr	r3, [sp, #20]
9001e2d2:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
9001e2d6:	9b06      	ldr	r3, [sp, #24]
9001e2d8:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
9001e2dc:	f7f9 fdfa 	bl	90017ed4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
9001e2e0:	4640      	mov	r0, r8
9001e2e2:	f7f9 fdcf 	bl	90017e84 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
9001e2e6:	a80e      	add	r0, sp, #56	; 0x38
9001e2e8:	f7f9 fdcc 	bl	90017e84 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
9001e2ec:	4b37      	ldr	r3, [pc, #220]	; (9001e3cc <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x220>)
9001e2ee:	4628      	mov	r0, r5
9001e2f0:	f9bd a03c 	ldrsh.w	sl, [sp, #60]	; 0x3c
9001e2f4:	881b      	ldrh	r3, [r3, #0]
9001e2f6:	9307      	str	r3, [sp, #28]
9001e2f8:	682b      	ldr	r3, [r5, #0]
9001e2fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
9001e2fc:	4798      	blx	r3
9001e2fe:	f8bd 5032 	ldrh.w	r5, [sp, #50]	; 0x32
9001e302:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
9001e306:	4681      	mov	r9, r0
9001e308:	f8db 0000 	ldr.w	r0, [fp]
9001e30c:	fb1a 3305 	smlabb	r3, sl, r5, r3
9001e310:	9d1a      	ldr	r5, [sp, #104]	; 0x68
9001e312:	eb05 0543 	add.w	r5, r5, r3, lsl #1
9001e316:	6803      	ldr	r3, [r0, #0]
9001e318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
9001e31a:	4798      	blx	r3
9001e31c:	4607      	mov	r7, r0
9001e31e:	f8db 0000 	ldr.w	r0, [fp]
9001e322:	f9bd 1028 	ldrsh.w	r1, [sp, #40]	; 0x28
9001e326:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	; 0x2a
9001e32a:	6803      	ldr	r3, [r0, #0]
9001e32c:	9109      	str	r1, [sp, #36]	; 0x24
9001e32e:	9208      	str	r2, [sp, #32]
9001e330:	6b9b      	ldr	r3, [r3, #56]	; 0x38
9001e332:	4798      	blx	r3
9001e334:	f010 0f01 	tst.w	r0, #1
9001e338:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
9001e33c:	d012      	beq.n	9001e364 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1b8>
9001e33e:	f8db 0000 	ldr.w	r0, [fp]
9001e342:	f9bd 2034 	ldrsh.w	r2, [sp, #52]	; 0x34
9001e346:	6803      	ldr	r3, [r0, #0]
9001e348:	9200      	str	r2, [sp, #0]
9001e34a:	6ede      	ldr	r6, [r3, #108]	; 0x6c
9001e34c:	462b      	mov	r3, r5
9001e34e:	e898 0006 	ldmia.w	r8, {r1, r2}
9001e352:	47b0      	blx	r6
9001e354:	9b03      	ldr	r3, [sp, #12]
9001e356:	8023      	strh	r3, [r4, #0]
9001e358:	9b04      	ldr	r3, [sp, #16]
9001e35a:	8063      	strh	r3, [r4, #2]
9001e35c:	9b05      	ldr	r3, [sp, #20]
9001e35e:	80a3      	strh	r3, [r4, #4]
9001e360:	9b06      	ldr	r3, [sp, #24]
9001e362:	e78b      	b.n	9001e27c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xd0>
9001e364:	fb09 f202 	mul.w	r2, r9, r2
9001e368:	f9bd 3036 	ldrsh.w	r3, [sp, #54]	; 0x36
9001e36c:	eb02 0141 	add.w	r1, r2, r1, lsl #1
9001e370:	440f      	add	r7, r1
9001e372:	b166      	cbz	r6, 9001e38e <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1e2>
9001e374:	9a07      	ldr	r2, [sp, #28]
9001e376:	4592      	cmp	sl, r2
9001e378:	d109      	bne.n	9001e38e <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1e2>
9001e37a:	f8db 0000 	ldr.w	r0, [fp]
9001e37e:	fb09 f303 	mul.w	r3, r9, r3
9001e382:	4629      	mov	r1, r5
9001e384:	6802      	ldr	r2, [r0, #0]
9001e386:	6b56      	ldr	r6, [r2, #52]	; 0x34
9001e388:	463a      	mov	r2, r7
9001e38a:	47b0      	blx	r6
9001e38c:	e7e2      	b.n	9001e354 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1a8>
9001e38e:	fb0a f303 	mul.w	r3, sl, r3
9001e392:	ea4f 064a 	mov.w	r6, sl, lsl #1
9001e396:	f8df b038 	ldr.w	fp, [pc, #56]	; 9001e3d0 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x224>
9001e39a:	eb05 0843 	add.w	r8, r5, r3, lsl #1
9001e39e:	4545      	cmp	r5, r8
9001e3a0:	d2d8      	bcs.n	9001e354 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1a8>
9001e3a2:	f8db 0000 	ldr.w	r0, [fp]
9001e3a6:	4629      	mov	r1, r5
9001e3a8:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
9001e3ac:	4435      	add	r5, r6
9001e3ae:	6802      	ldr	r2, [r0, #0]
9001e3b0:	005b      	lsls	r3, r3, #1
9001e3b2:	f8d2 a034 	ldr.w	sl, [r2, #52]	; 0x34
9001e3b6:	463a      	mov	r2, r7
9001e3b8:	47d0      	blx	sl
9001e3ba:	444f      	add	r7, r9
9001e3bc:	e7ef      	b.n	9001e39e <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1f2>
9001e3be:	bf00      	nop
9001e3c0:	240281e0 	.word	0x240281e0
9001e3c4:	240281e2 	.word	0x240281e2
9001e3c8:	240281e4 	.word	0x240281e4
9001e3cc:	240281e6 	.word	0x240281e6
9001e3d0:	240281ec 	.word	0x240281ec

9001e3d4 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh>:
9001e3d4:	b5f0      	push	{r4, r5, r6, r7, lr}
9001e3d6:	4606      	mov	r6, r0
9001e3d8:	b087      	sub	sp, #28
9001e3da:	460c      	mov	r4, r1
9001e3dc:	4617      	mov	r7, r2
9001e3de:	461d      	mov	r5, r3
9001e3e0:	b333      	cbz	r3, 9001e430 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
9001e3e2:	4608      	mov	r0, r1
9001e3e4:	f7f4 fd29 	bl	90012e3a <_ZNK8touchgfx4Rect7isEmptyEv>
9001e3e8:	bb10      	cbnz	r0, 9001e430 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
9001e3ea:	6820      	ldr	r0, [r4, #0]
9001e3ec:	ab04      	add	r3, sp, #16
9001e3ee:	6861      	ldr	r1, [r4, #4]
9001e3f0:	4c1b      	ldr	r4, [pc, #108]	; (9001e460 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x8c>)
9001e3f2:	c303      	stmia	r3!, {r0, r1}
9001e3f4:	a804      	add	r0, sp, #16
9001e3f6:	f7f9 fd45 	bl	90017e84 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
9001e3fa:	6820      	ldr	r0, [r4, #0]
9001e3fc:	6803      	ldr	r3, [r0, #0]
9001e3fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
9001e400:	4798      	blx	r3
9001e402:	2dff      	cmp	r5, #255	; 0xff
9001e404:	d016      	beq.n	9001e434 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x60>
9001e406:	f010 0f08 	tst.w	r0, #8
9001e40a:	6820      	ldr	r0, [r4, #0]
9001e40c:	d015      	beq.n	9001e43a <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x66>
9001e40e:	2400      	movs	r4, #0
9001e410:	6801      	ldr	r1, [r0, #0]
9001e412:	f8bd 3012 	ldrh.w	r3, [sp, #18]
9001e416:	f8bd 2010 	ldrh.w	r2, [sp, #16]
9001e41a:	e9cd 5402 	strd	r5, r4, [sp, #8]
9001e41e:	f8bd 4016 	ldrh.w	r4, [sp, #22]
9001e422:	9401      	str	r4, [sp, #4]
9001e424:	f8bd 4014 	ldrh.w	r4, [sp, #20]
9001e428:	9400      	str	r4, [sp, #0]
9001e42a:	6e0c      	ldr	r4, [r1, #96]	; 0x60
9001e42c:	4639      	mov	r1, r7
9001e42e:	47a0      	blx	r4
9001e430:	b007      	add	sp, #28
9001e432:	bdf0      	pop	{r4, r5, r6, r7, pc}
9001e434:	f010 0f02 	tst.w	r0, #2
9001e438:	e7e7      	b.n	9001e40a <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x36>
9001e43a:	6803      	ldr	r3, [r0, #0]
9001e43c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
9001e43e:	4798      	blx	r3
9001e440:	4b08      	ldr	r3, [pc, #32]	; (9001e464 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x90>)
9001e442:	4601      	mov	r1, r0
9001e444:	4630      	mov	r0, r6
9001e446:	881a      	ldrh	r2, [r3, #0]
9001e448:	6833      	ldr	r3, [r6, #0]
9001e44a:	e9cd 7500 	strd	r7, r5, [sp]
9001e44e:	6a5d      	ldr	r5, [r3, #36]	; 0x24
9001e450:	ab04      	add	r3, sp, #16
9001e452:	47a8      	blx	r5
9001e454:	6820      	ldr	r0, [r4, #0]
9001e456:	6803      	ldr	r3, [r0, #0]
9001e458:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9001e45a:	4798      	blx	r3
9001e45c:	e7e8      	b.n	9001e430 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
9001e45e:	bf00      	nop
9001e460:	240281ec 	.word	0x240281ec
9001e464:	240281e6 	.word	0x240281e6

9001e468 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh>:
9001e468:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
9001e46c:	f89d 7024 	ldrb.w	r7, [sp, #36]	; 0x24
9001e470:	4688      	mov	r8, r1
9001e472:	4614      	mov	r4, r2
9001e474:	461d      	mov	r5, r3
9001e476:	9e08      	ldr	r6, [sp, #32]
9001e478:	2f00      	cmp	r7, #0
9001e47a:	f000 80ab 	beq.w	9001e5d4 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>
9001e47e:	4618      	mov	r0, r3
9001e480:	f7f4 fcdb 	bl	90012e3a <_ZNK8touchgfx4Rect7isEmptyEv>
9001e484:	2800      	cmp	r0, #0
9001e486:	f040 80a5 	bne.w	9001e5d4 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>
9001e48a:	f9b5 1000 	ldrsh.w	r1, [r5]
9001e48e:	2fff      	cmp	r7, #255	; 0xff
9001e490:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
9001e494:	f9b5 0004 	ldrsh.w	r0, [r5, #4]
9001e498:	fb04 1303 	mla	r3, r4, r3, r1
9001e49c:	f9b5 5006 	ldrsh.w	r5, [r5, #6]
9001e4a0:	eba4 0200 	sub.w	r2, r4, r0
9001e4a4:	eb08 0143 	add.w	r1, r8, r3, lsl #1
9001e4a8:	fb04 f505 	mul.w	r5, r4, r5
9001e4ac:	ea4f 2816 	mov.w	r8, r6, lsr #8
9001e4b0:	eb01 0545 	add.w	r5, r1, r5, lsl #1
9001e4b4:	d04a      	beq.n	9001e54c <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xe4>
9001e4b6:	b2bc      	uxth	r4, r7
9001e4b8:	f1c7 0cff 	rsb	ip, r7, #255	; 0xff
9001e4bc:	f3c6 4e07 	ubfx	lr, r6, #16, #8
9001e4c0:	fa5f f788 	uxtb.w	r7, r8
9001e4c4:	b2f3      	uxtb	r3, r6
9001e4c6:	0040      	lsls	r0, r0, #1
9001e4c8:	fb0e fe04 	mul.w	lr, lr, r4
9001e4cc:	4367      	muls	r7, r4
9001e4ce:	ea4f 0842 	mov.w	r8, r2, lsl #1
9001e4d2:	4363      	muls	r3, r4
9001e4d4:	fa1f fc8c 	uxth.w	ip, ip
9001e4d8:	42a9      	cmp	r1, r5
9001e4da:	d27b      	bcs.n	9001e5d4 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>
9001e4dc:	eb01 0900 	add.w	r9, r1, r0
9001e4e0:	4549      	cmp	r1, r9
9001e4e2:	d231      	bcs.n	9001e548 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xe0>
9001e4e4:	880a      	ldrh	r2, [r1, #0]
9001e4e6:	1214      	asrs	r4, r2, #8
9001e4e8:	10d6      	asrs	r6, r2, #3
9001e4ea:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
9001e4ee:	00d2      	lsls	r2, r2, #3
9001e4f0:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
9001e4f4:	b2d2      	uxtb	r2, r2
9001e4f6:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
9001e4fa:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
9001e4fe:	fb14 f40c 	smulbb	r4, r4, ip
9001e502:	ea46 1696 	orr.w	r6, r6, r6, lsr #6
9001e506:	fb12 f20c 	smulbb	r2, r2, ip
9001e50a:	fb16 f60c 	smulbb	r6, r6, ip
9001e50e:	4474      	add	r4, lr
9001e510:	441a      	add	r2, r3
9001e512:	b2a4      	uxth	r4, r4
9001e514:	443e      	add	r6, r7
9001e516:	b292      	uxth	r2, r2
9001e518:	f104 0a01 	add.w	sl, r4, #1
9001e51c:	b2b6      	uxth	r6, r6
9001e51e:	eb0a 2414 	add.w	r4, sl, r4, lsr #8
9001e522:	f102 0a01 	add.w	sl, r2, #1
9001e526:	eb0a 2212 	add.w	r2, sl, r2, lsr #8
9001e52a:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
9001e52e:	f3c2 22c4 	ubfx	r2, r2, #11, #5
9001e532:	4322      	orrs	r2, r4
9001e534:	1c74      	adds	r4, r6, #1
9001e536:	eb04 2616 	add.w	r6, r4, r6, lsr #8
9001e53a:	0976      	lsrs	r6, r6, #5
9001e53c:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
9001e540:	4332      	orrs	r2, r6
9001e542:	f821 2b02 	strh.w	r2, [r1], #2
9001e546:	e7cb      	b.n	9001e4e0 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x78>
9001e548:	4441      	add	r1, r8
9001e54a:	e7c5      	b.n	9001e4d8 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x70>
9001e54c:	0973      	lsrs	r3, r6, #5
9001e54e:	4f22      	ldr	r7, [pc, #136]	; (9001e5d8 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x170>)
9001e550:	f3c6 06c4 	ubfx	r6, r6, #3, #5
9001e554:	ea08 0707 	and.w	r7, r8, r7
9001e558:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
9001e55c:	433b      	orrs	r3, r7
9001e55e:	07e7      	lsls	r7, r4, #31
9001e560:	ea43 0306 	orr.w	r3, r3, r6
9001e564:	b29b      	uxth	r3, r3
9001e566:	d50b      	bpl.n	9001e580 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x118>
9001e568:	0040      	lsls	r0, r0, #1
9001e56a:	0052      	lsls	r2, r2, #1
9001e56c:	42a9      	cmp	r1, r5
9001e56e:	d231      	bcs.n	9001e5d4 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>
9001e570:	180c      	adds	r4, r1, r0
9001e572:	42a1      	cmp	r1, r4
9001e574:	d202      	bcs.n	9001e57c <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x114>
9001e576:	f821 3b02 	strh.w	r3, [r1], #2
9001e57a:	e7fa      	b.n	9001e572 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x10a>
9001e57c:	4411      	add	r1, r2
9001e57e:	e7f5      	b.n	9001e56c <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x104>
9001e580:	078e      	lsls	r6, r1, #30
9001e582:	d008      	beq.n	9001e596 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x12e>
9001e584:	0066      	lsls	r6, r4, #1
9001e586:	460a      	mov	r2, r1
9001e588:	42aa      	cmp	r2, r5
9001e58a:	d202      	bcs.n	9001e592 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x12a>
9001e58c:	8013      	strh	r3, [r2, #0]
9001e58e:	4432      	add	r2, r6
9001e590:	e7fa      	b.n	9001e588 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x120>
9001e592:	3102      	adds	r1, #2
9001e594:	3801      	subs	r0, #1
9001e596:	07c2      	lsls	r2, r0, #31
9001e598:	d50b      	bpl.n	9001e5b2 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x14a>
9001e59a:	f100 4200 	add.w	r2, r0, #2147483648	; 0x80000000
9001e59e:	0066      	lsls	r6, r4, #1
9001e5a0:	3a01      	subs	r2, #1
9001e5a2:	eb01 0242 	add.w	r2, r1, r2, lsl #1
9001e5a6:	42aa      	cmp	r2, r5
9001e5a8:	d202      	bcs.n	9001e5b0 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x148>
9001e5aa:	8013      	strh	r3, [r2, #0]
9001e5ac:	4432      	add	r2, r6
9001e5ae:	e7fa      	b.n	9001e5a6 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x13e>
9001e5b0:	3801      	subs	r0, #1
9001e5b2:	b178      	cbz	r0, 9001e5d4 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>
9001e5b4:	1040      	asrs	r0, r0, #1
9001e5b6:	ea43 4303 	orr.w	r3, r3, r3, lsl #16
9001e5ba:	0080      	lsls	r0, r0, #2
9001e5bc:	0064      	lsls	r4, r4, #1
9001e5be:	42a9      	cmp	r1, r5
9001e5c0:	d208      	bcs.n	9001e5d4 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>
9001e5c2:	180e      	adds	r6, r1, r0
9001e5c4:	460a      	mov	r2, r1
9001e5c6:	42b2      	cmp	r2, r6
9001e5c8:	d202      	bcs.n	9001e5d0 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x168>
9001e5ca:	f842 3b04 	str.w	r3, [r2], #4
9001e5ce:	e7fa      	b.n	9001e5c6 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x15e>
9001e5d0:	4421      	add	r1, r4
9001e5d2:	e7f4      	b.n	9001e5be <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x156>
9001e5d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
9001e5d8:	00fff800 	.word	0x00fff800

9001e5dc <_ZN8touchgfx8LCD16bppC1Ev>:
9001e5dc:	2200      	movs	r2, #0
9001e5de:	4910      	ldr	r1, [pc, #64]	; (9001e620 <_ZN8touchgfx8LCD16bppC1Ev+0x44>)
9001e5e0:	6042      	str	r2, [r0, #4]
9001e5e2:	6001      	str	r1, [r0, #0]
9001e5e4:	e9c0 2202 	strd	r2, r2, [r0, #8]
9001e5e8:	e9c0 2204 	strd	r2, r2, [r0, #16]
9001e5ec:	e9c0 2206 	strd	r2, r2, [r0, #24]
9001e5f0:	e9c0 2208 	strd	r2, r2, [r0, #32]
9001e5f4:	e9c0 220a 	strd	r2, r2, [r0, #40]	; 0x28
9001e5f8:	e9c0 220c 	strd	r2, r2, [r0, #48]	; 0x30
9001e5fc:	e9c0 220e 	strd	r2, r2, [r0, #56]	; 0x38
9001e600:	e9c0 2210 	strd	r2, r2, [r0, #64]	; 0x40
9001e604:	e9c0 2212 	strd	r2, r2, [r0, #72]	; 0x48
9001e608:	e9c0 2214 	strd	r2, r2, [r0, #80]	; 0x50
9001e60c:	e9c0 2216 	strd	r2, r2, [r0, #88]	; 0x58
9001e610:	e9c0 2218 	strd	r2, r2, [r0, #96]	; 0x60
9001e614:	e9c0 221a 	strd	r2, r2, [r0, #104]	; 0x68
9001e618:	e9c0 221c 	strd	r2, r2, [r0, #112]	; 0x70
9001e61c:	4770      	bx	lr
9001e61e:	bf00      	nop
9001e620:	9002c6c8 	.word	0x9002c6c8

9001e624 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>:
9001e624:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001e628:	b08d      	sub	sp, #52	; 0x34
9001e62a:	460d      	mov	r5, r1
9001e62c:	4604      	mov	r4, r0
9001e62e:	4699      	mov	r9, r3
9001e630:	6808      	ldr	r0, [r1, #0]
9001e632:	ab08      	add	r3, sp, #32
9001e634:	6849      	ldr	r1, [r1, #4]
9001e636:	c303      	stmia	r3!, {r0, r1}
9001e638:	6810      	ldr	r0, [r2, #0]
9001e63a:	ab0a      	add	r3, sp, #40	; 0x28
9001e63c:	6851      	ldr	r1, [r2, #4]
9001e63e:	c303      	stmia	r3!, {r0, r1}
9001e640:	a808      	add	r0, sp, #32
9001e642:	f7f9 fc1f 	bl	90017e84 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
9001e646:	4629      	mov	r1, r5
9001e648:	a80a      	add	r0, sp, #40	; 0x28
9001e64a:	4d67      	ldr	r5, [pc, #412]	; (9001e7e8 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c4>)
9001e64c:	f7f9 fc42 	bl	90017ed4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
9001e650:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
9001e654:	f9bd 302a 	ldrsh.w	r3, [sp, #42]	; 0x2a
9001e658:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
9001e65c:	6828      	ldr	r0, [r5, #0]
9001e65e:	fb11 2103 	smlabb	r1, r1, r3, r2
9001e662:	f9bd 802c 	ldrsh.w	r8, [sp, #44]	; 0x2c
9001e666:	f9bd 602e 	ldrsh.w	r6, [sp, #46]	; 0x2e
9001e66a:	eb04 0481 	add.w	r4, r4, r1, lsl #2
9001e66e:	f8bd 1020 	ldrh.w	r1, [sp, #32]
9001e672:	440a      	add	r2, r1
9001e674:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
9001e678:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
9001e67c:	4413      	add	r3, r2
9001e67e:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
9001e682:	6803      	ldr	r3, [r0, #0]
9001e684:	6b9b      	ldr	r3, [r3, #56]	; 0x38
9001e686:	4798      	blx	r3
9001e688:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
9001e68c:	d119      	bne.n	9001e6c2 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x9e>
9001e68e:	f010 0f20 	tst.w	r0, #32
9001e692:	6828      	ldr	r0, [r5, #0]
9001e694:	d018      	beq.n	9001e6c8 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xa4>
9001e696:	2500      	movs	r5, #0
9001e698:	6801      	ldr	r1, [r0, #0]
9001e69a:	b2b6      	uxth	r6, r6
9001e69c:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
9001e6a0:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
9001e6a4:	9601      	str	r6, [sp, #4]
9001e6a6:	e9cd 9503 	strd	r9, r5, [sp, #12]
9001e6aa:	f8bd 5024 	ldrh.w	r5, [sp, #36]	; 0x24
9001e6ae:	9502      	str	r5, [sp, #8]
9001e6b0:	fa1f f588 	uxth.w	r5, r8
9001e6b4:	9500      	str	r5, [sp, #0]
9001e6b6:	6d0d      	ldr	r5, [r1, #80]	; 0x50
9001e6b8:	4621      	mov	r1, r4
9001e6ba:	47a8      	blx	r5
9001e6bc:	b00d      	add	sp, #52	; 0x34
9001e6be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9001e6c2:	f010 0f40 	tst.w	r0, #64	; 0x40
9001e6c6:	e7e4      	b.n	9001e692 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x6e>
9001e6c8:	6803      	ldr	r3, [r0, #0]
9001e6ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
9001e6cc:	4798      	blx	r3
9001e6ce:	4947      	ldr	r1, [pc, #284]	; (9001e7ec <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c8>)
9001e6d0:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	; 0x2a
9001e6d4:	880b      	ldrh	r3, [r1, #0]
9001e6d6:	468a      	mov	sl, r1
9001e6d8:	f9bd 5028 	ldrsh.w	r5, [sp, #40]	; 0x28
9001e6dc:	fb03 5202 	mla	r2, r3, r2, r5
9001e6e0:	4373      	muls	r3, r6
9001e6e2:	eb00 0042 	add.w	r0, r0, r2, lsl #1
9001e6e6:	eb00 0343 	add.w	r3, r0, r3, lsl #1
9001e6ea:	9307      	str	r3, [sp, #28]
9001e6ec:	ea4f 0348 	mov.w	r3, r8, lsl #1
9001e6f0:	9306      	str	r3, [sp, #24]
9001e6f2:	9b07      	ldr	r3, [sp, #28]
9001e6f4:	4298      	cmp	r0, r3
9001e6f6:	d270      	bcs.n	9001e7da <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1b6>
9001e6f8:	9b06      	ldr	r3, [sp, #24]
9001e6fa:	4621      	mov	r1, r4
9001e6fc:	eb00 0b03 	add.w	fp, r0, r3
9001e700:	4558      	cmp	r0, fp
9001e702:	d25d      	bcs.n	9001e7c0 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x19c>
9001e704:	f851 4b04 	ldr.w	r4, [r1], #4
9001e708:	0e23      	lsrs	r3, r4, #24
9001e70a:	d014      	beq.n	9001e736 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x112>
9001e70c:	2bff      	cmp	r3, #255	; 0xff
9001e70e:	ea4f 2c14 	mov.w	ip, r4, lsr #8
9001e712:	d112      	bne.n	9001e73a <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x116>
9001e714:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
9001e718:	d10f      	bne.n	9001e73a <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x116>
9001e71a:	0963      	lsrs	r3, r4, #5
9001e71c:	f42c 6cff 	bic.w	ip, ip, #2040	; 0x7f8
9001e720:	f3c4 04c4 	ubfx	r4, r4, #3, #5
9001e724:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
9001e728:	f02c 0c07 	bic.w	ip, ip, #7
9001e72c:	ea43 0c0c 	orr.w	ip, r3, ip
9001e730:	ea4c 0404 	orr.w	r4, ip, r4
9001e734:	8004      	strh	r4, [r0, #0]
9001e736:	3002      	adds	r0, #2
9001e738:	e7e2      	b.n	9001e700 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xdc>
9001e73a:	fb09 f303 	mul.w	r3, r9, r3
9001e73e:	8807      	ldrh	r7, [r0, #0]
9001e740:	f3c4 4e07 	ubfx	lr, r4, #16, #8
9001e744:	fa5f fc8c 	uxtb.w	ip, ip
9001e748:	1c5a      	adds	r2, r3, #1
9001e74a:	123e      	asrs	r6, r7, #8
9001e74c:	10fd      	asrs	r5, r7, #3
9001e74e:	eb02 2223 	add.w	r2, r2, r3, asr #8
9001e752:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
9001e756:	00ff      	lsls	r7, r7, #3
9001e758:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
9001e75c:	1212      	asrs	r2, r2, #8
9001e75e:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
9001e762:	b293      	uxth	r3, r2
9001e764:	43d2      	mvns	r2, r2
9001e766:	b2ff      	uxtb	r7, r7
9001e768:	fb1e fe03 	smulbb	lr, lr, r3
9001e76c:	b2d2      	uxtb	r2, r2
9001e76e:	fb1c fc03 	smulbb	ip, ip, r3
9001e772:	b2e4      	uxtb	r4, r4
9001e774:	fb06 e602 	mla	r6, r6, r2, lr
9001e778:	ea45 1595 	orr.w	r5, r5, r5, lsr #6
9001e77c:	fb14 f403 	smulbb	r4, r4, r3
9001e780:	ea47 1757 	orr.w	r7, r7, r7, lsr #5
9001e784:	b2b6      	uxth	r6, r6
9001e786:	fb05 c502 	mla	r5, r5, r2, ip
9001e78a:	fb07 4702 	mla	r7, r7, r2, r4
9001e78e:	f106 0e01 	add.w	lr, r6, #1
9001e792:	b2ad      	uxth	r5, r5
9001e794:	b2bf      	uxth	r7, r7
9001e796:	eb0e 2616 	add.w	r6, lr, r6, lsr #8
9001e79a:	f105 0c01 	add.w	ip, r5, #1
9001e79e:	f406 4e78 	and.w	lr, r6, #63488	; 0xf800
9001e7a2:	1c7e      	adds	r6, r7, #1
9001e7a4:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
9001e7a8:	eb06 2617 	add.w	r6, r6, r7, lsr #8
9001e7ac:	096d      	lsrs	r5, r5, #5
9001e7ae:	f3c6 26c4 	ubfx	r6, r6, #11, #5
9001e7b2:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
9001e7b6:	ea46 060e 	orr.w	r6, r6, lr
9001e7ba:	432e      	orrs	r6, r5
9001e7bc:	8006      	strh	r6, [r0, #0]
9001e7be:	e7ba      	b.n	9001e736 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x112>
9001e7c0:	f8ba 3000 	ldrh.w	r3, [sl]
9001e7c4:	f9bd 4024 	ldrsh.w	r4, [sp, #36]	; 0x24
9001e7c8:	eba3 0308 	sub.w	r3, r3, r8
9001e7cc:	eba4 0408 	sub.w	r4, r4, r8
9001e7d0:	eb00 0043 	add.w	r0, r0, r3, lsl #1
9001e7d4:	eb01 0484 	add.w	r4, r1, r4, lsl #2
9001e7d8:	e78b      	b.n	9001e6f2 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xce>
9001e7da:	4b03      	ldr	r3, [pc, #12]	; (9001e7e8 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c4>)
9001e7dc:	6818      	ldr	r0, [r3, #0]
9001e7de:	6803      	ldr	r3, [r0, #0]
9001e7e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9001e7e2:	4798      	blx	r3
9001e7e4:	e76a      	b.n	9001e6bc <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x98>
9001e7e6:	bf00      	nop
9001e7e8:	240281ec 	.word	0x240281ec
9001e7ec:	240281e6 	.word	0x240281e6

9001e7f0 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>:
9001e7f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
9001e7f4:	b085      	sub	sp, #20
9001e7f6:	6810      	ldr	r0, [r2, #0]
9001e7f8:	460c      	mov	r4, r1
9001e7fa:	6851      	ldr	r1, [r2, #4]
9001e7fc:	466d      	mov	r5, sp
9001e7fe:	4616      	mov	r6, r2
9001e800:	c503      	stmia	r5!, {r0, r1}
9001e802:	6818      	ldr	r0, [r3, #0]
9001e804:	6859      	ldr	r1, [r3, #4]
9001e806:	c503      	stmia	r5!, {r0, r1}
9001e808:	4668      	mov	r0, sp
9001e80a:	4d2e      	ldr	r5, [pc, #184]	; (9001e8c4 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xd4>)
9001e80c:	f7f9 fb3a 	bl	90017e84 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
9001e810:	4631      	mov	r1, r6
9001e812:	a802      	add	r0, sp, #8
9001e814:	4e2c      	ldr	r6, [pc, #176]	; (9001e8c8 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xd8>)
9001e816:	f7f9 fb5d 	bl	90017ed4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
9001e81a:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
9001e81e:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
9001e822:	f8bd 1004 	ldrh.w	r1, [sp, #4]
9001e826:	6828      	ldr	r0, [r5, #0]
9001e828:	fb11 2103 	smlabb	r1, r1, r3, r2
9001e82c:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
9001e830:	f9bd 800e 	ldrsh.w	r8, [sp, #14]
9001e834:	eb04 0481 	add.w	r4, r4, r1, lsl #2
9001e838:	f8bd 1000 	ldrh.w	r1, [sp]
9001e83c:	440a      	add	r2, r1
9001e83e:	f8ad 2008 	strh.w	r2, [sp, #8]
9001e842:	f8bd 2002 	ldrh.w	r2, [sp, #2]
9001e846:	4413      	add	r3, r2
9001e848:	f8ad 300a 	strh.w	r3, [sp, #10]
9001e84c:	6803      	ldr	r3, [r0, #0]
9001e84e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
9001e850:	4798      	blx	r3
9001e852:	8833      	ldrh	r3, [r6, #0]
9001e854:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
9001e858:	ea4f 0c47 	mov.w	ip, r7, lsl #1
9001e85c:	f9bd 1008 	ldrsh.w	r1, [sp, #8]
9001e860:	f8df e068 	ldr.w	lr, [pc, #104]	; 9001e8cc <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xdc>
9001e864:	fb03 1202 	mla	r2, r3, r2, r1
9001e868:	fb08 f303 	mul.w	r3, r8, r3
9001e86c:	eb00 0042 	add.w	r0, r0, r2, lsl #1
9001e870:	eb00 0343 	add.w	r3, r0, r3, lsl #1
9001e874:	4298      	cmp	r0, r3
9001e876:	d21d      	bcs.n	9001e8b4 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xc4>
9001e878:	eb00 080c 	add.w	r8, r0, ip
9001e87c:	4540      	cmp	r0, r8
9001e87e:	d20f      	bcs.n	9001e8a0 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xb0>
9001e880:	f854 1b04 	ldr.w	r1, [r4], #4
9001e884:	ea4f 1951 	mov.w	r9, r1, lsr #5
9001e888:	ea0e 2211 	and.w	r2, lr, r1, lsr #8
9001e88c:	f3c1 01c4 	ubfx	r1, r1, #3, #5
9001e890:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
9001e894:	ea42 0209 	orr.w	r2, r2, r9
9001e898:	430a      	orrs	r2, r1
9001e89a:	f820 2b02 	strh.w	r2, [r0], #2
9001e89e:	e7ed      	b.n	9001e87c <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0x8c>
9001e8a0:	8832      	ldrh	r2, [r6, #0]
9001e8a2:	1bd2      	subs	r2, r2, r7
9001e8a4:	eb00 0042 	add.w	r0, r0, r2, lsl #1
9001e8a8:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
9001e8ac:	1bd2      	subs	r2, r2, r7
9001e8ae:	eb04 0482 	add.w	r4, r4, r2, lsl #2
9001e8b2:	e7df      	b.n	9001e874 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0x84>
9001e8b4:	6828      	ldr	r0, [r5, #0]
9001e8b6:	6803      	ldr	r3, [r0, #0]
9001e8b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9001e8ba:	4798      	blx	r3
9001e8bc:	b005      	add	sp, #20
9001e8be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
9001e8c2:	bf00      	nop
9001e8c4:	240281ec 	.word	0x240281ec
9001e8c8:	240281e6 	.word	0x240281e6
9001e8cc:	fffff800 	.word	0xfffff800

9001e8d0 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>:
9001e8d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
9001e8d4:	b08e      	sub	sp, #56	; 0x38
9001e8d6:	460e      	mov	r6, r1
9001e8d8:	4604      	mov	r4, r0
9001e8da:	461d      	mov	r5, r3
9001e8dc:	6808      	ldr	r0, [r1, #0]
9001e8de:	ab0a      	add	r3, sp, #40	; 0x28
9001e8e0:	6849      	ldr	r1, [r1, #4]
9001e8e2:	f8df 81d4 	ldr.w	r8, [pc, #468]	; 9001eab8 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e8>
9001e8e6:	f8df 91d4 	ldr.w	r9, [pc, #468]	; 9001eabc <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1ec>
9001e8ea:	c303      	stmia	r3!, {r0, r1}
9001e8ec:	6810      	ldr	r0, [r2, #0]
9001e8ee:	ab0c      	add	r3, sp, #48	; 0x30
9001e8f0:	6851      	ldr	r1, [r2, #4]
9001e8f2:	c303      	stmia	r3!, {r0, r1}
9001e8f4:	a80a      	add	r0, sp, #40	; 0x28
9001e8f6:	f7f9 fac5 	bl	90017e84 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
9001e8fa:	4631      	mov	r1, r6
9001e8fc:	a80c      	add	r0, sp, #48	; 0x30
9001e8fe:	f7f9 fae9 	bl	90017ed4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
9001e902:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	; 0x30
9001e906:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
9001e90a:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
9001e90e:	f8d8 0000 	ldr.w	r0, [r8]
9001e912:	fb11 2103 	smlabb	r1, r1, r3, r2
9001e916:	f9bd 7034 	ldrsh.w	r7, [sp, #52]	; 0x34
9001e91a:	f9bd 6036 	ldrsh.w	r6, [sp, #54]	; 0x36
9001e91e:	eb01 0141 	add.w	r1, r1, r1, lsl #1
9001e922:	440c      	add	r4, r1
9001e924:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
9001e928:	440a      	add	r2, r1
9001e92a:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
9001e92e:	f8bd 202a 	ldrh.w	r2, [sp, #42]	; 0x2a
9001e932:	4413      	add	r3, r2
9001e934:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
9001e938:	6803      	ldr	r3, [r0, #0]
9001e93a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
9001e93c:	4798      	blx	r3
9001e93e:	2dff      	cmp	r5, #255	; 0xff
9001e940:	d124      	bne.n	9001e98c <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xbc>
9001e942:	f010 0f01 	tst.w	r0, #1
9001e946:	f8d8 0000 	ldr.w	r0, [r8]
9001e94a:	d022      	beq.n	9001e992 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xc2>
9001e94c:	2100      	movs	r1, #0
9001e94e:	f04f 0e01 	mov.w	lr, #1
9001e952:	f8d0 c000 	ldr.w	ip, [r0]
9001e956:	b2b6      	uxth	r6, r6
9001e958:	f8cd e018 	str.w	lr, [sp, #24]
9001e95c:	b2bf      	uxth	r7, r7
9001e95e:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
9001e962:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
9001e966:	e9cd 1107 	strd	r1, r1, [sp, #28]
9001e96a:	f8b9 e000 	ldrh.w	lr, [r9]
9001e96e:	9503      	str	r5, [sp, #12]
9001e970:	9601      	str	r6, [sp, #4]
9001e972:	9700      	str	r7, [sp, #0]
9001e974:	e9cd 1e04 	strd	r1, lr, [sp, #16]
9001e978:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
9001e97c:	9102      	str	r1, [sp, #8]
9001e97e:	4621      	mov	r1, r4
9001e980:	f8dc 5040 	ldr.w	r5, [ip, #64]	; 0x40
9001e984:	47a8      	blx	r5
9001e986:	b00e      	add	sp, #56	; 0x38
9001e988:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
9001e98c:	f010 0f04 	tst.w	r0, #4
9001e990:	e7d9      	b.n	9001e946 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x76>
9001e992:	6803      	ldr	r3, [r0, #0]
9001e994:	6a9b      	ldr	r3, [r3, #40]	; 0x28
9001e996:	4798      	blx	r3
9001e998:	f8b9 3000 	ldrh.w	r3, [r9]
9001e99c:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	; 0x32
9001e9a0:	ea4f 0e47 	mov.w	lr, r7, lsl #1
9001e9a4:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	; 0x30
9001e9a8:	435e      	muls	r6, r3
9001e9aa:	f9bd c02c 	ldrsh.w	ip, [sp, #44]	; 0x2c
9001e9ae:	2dff      	cmp	r5, #255	; 0xff
9001e9b0:	fb03 1202 	mla	r2, r3, r2, r1
9001e9b4:	ebac 0c07 	sub.w	ip, ip, r7
9001e9b8:	eba3 0707 	sub.w	r7, r3, r7
9001e9bc:	eb00 0042 	add.w	r0, r0, r2, lsl #1
9001e9c0:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
9001e9c4:	eb00 0646 	add.w	r6, r0, r6, lsl #1
9001e9c8:	ea4f 0747 	mov.w	r7, r7, lsl #1
9001e9cc:	d049      	beq.n	9001ea62 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x192>
9001e9ce:	43eb      	mvns	r3, r5
9001e9d0:	fa1f f985 	uxth.w	r9, r5
9001e9d4:	b2db      	uxtb	r3, r3
9001e9d6:	42b0      	cmp	r0, r6
9001e9d8:	d266      	bcs.n	9001eaa8 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d8>
9001e9da:	eb00 0a0e 	add.w	sl, r0, lr
9001e9de:	4550      	cmp	r0, sl
9001e9e0:	4621      	mov	r1, r4
9001e9e2:	f104 0403 	add.w	r4, r4, #3
9001e9e6:	d25b      	bcs.n	9001eaa0 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d0>
9001e9e8:	8802      	ldrh	r2, [r0, #0]
9001e9ea:	f814 1c01 	ldrb.w	r1, [r4, #-1]
9001e9ee:	ea4f 2822 	mov.w	r8, r2, asr #8
9001e9f2:	fb11 f109 	smulbb	r1, r1, r9
9001e9f6:	10d5      	asrs	r5, r2, #3
9001e9f8:	f008 08f8 	and.w	r8, r8, #248	; 0xf8
9001e9fc:	00d2      	lsls	r2, r2, #3
9001e9fe:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
9001ea02:	ea48 1858 	orr.w	r8, r8, r8, lsr #5
9001ea06:	ea45 1595 	orr.w	r5, r5, r5, lsr #6
9001ea0a:	fb08 1803 	mla	r8, r8, r3, r1
9001ea0e:	f814 1c02 	ldrb.w	r1, [r4, #-2]
9001ea12:	b2d2      	uxtb	r2, r2
9001ea14:	fb11 f109 	smulbb	r1, r1, r9
9001ea18:	fa1f f888 	uxth.w	r8, r8
9001ea1c:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
9001ea20:	fb05 1503 	mla	r5, r5, r3, r1
9001ea24:	f814 1c03 	ldrb.w	r1, [r4, #-3]
9001ea28:	fb11 f109 	smulbb	r1, r1, r9
9001ea2c:	b2ad      	uxth	r5, r5
9001ea2e:	fb02 1203 	mla	r2, r2, r3, r1
9001ea32:	f108 0101 	add.w	r1, r8, #1
9001ea36:	b292      	uxth	r2, r2
9001ea38:	eb01 2818 	add.w	r8, r1, r8, lsr #8
9001ea3c:	1c51      	adds	r1, r2, #1
9001ea3e:	f408 4878 	and.w	r8, r8, #63488	; 0xf800
9001ea42:	eb01 2212 	add.w	r2, r1, r2, lsr #8
9001ea46:	1c69      	adds	r1, r5, #1
9001ea48:	eb01 2515 	add.w	r5, r1, r5, lsr #8
9001ea4c:	f3c2 22c4 	ubfx	r2, r2, #11, #5
9001ea50:	096d      	lsrs	r5, r5, #5
9001ea52:	ea42 0208 	orr.w	r2, r2, r8
9001ea56:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
9001ea5a:	432a      	orrs	r2, r5
9001ea5c:	f820 2b02 	strh.w	r2, [r0], #2
9001ea60:	e7bd      	b.n	9001e9de <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x10e>
9001ea62:	4a14      	ldr	r2, [pc, #80]	; (9001eab4 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e4>)
9001ea64:	42b0      	cmp	r0, r6
9001ea66:	d21f      	bcs.n	9001eaa8 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d8>
9001ea68:	eb00 050e 	add.w	r5, r0, lr
9001ea6c:	42a8      	cmp	r0, r5
9001ea6e:	4621      	mov	r1, r4
9001ea70:	f104 0403 	add.w	r4, r4, #3
9001ea74:	d210      	bcs.n	9001ea98 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1c8>
9001ea76:	f814 3c02 	ldrb.w	r3, [r4, #-2]
9001ea7a:	f814 1c01 	ldrb.w	r1, [r4, #-1]
9001ea7e:	00db      	lsls	r3, r3, #3
9001ea80:	ea02 2101 	and.w	r1, r2, r1, lsl #8
9001ea84:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
9001ea88:	430b      	orrs	r3, r1
9001ea8a:	f814 1c03 	ldrb.w	r1, [r4, #-3]
9001ea8e:	ea43 03d1 	orr.w	r3, r3, r1, lsr #3
9001ea92:	f820 3b02 	strh.w	r3, [r0], #2
9001ea96:	e7e9      	b.n	9001ea6c <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x19c>
9001ea98:	4438      	add	r0, r7
9001ea9a:	eb01 040c 	add.w	r4, r1, ip
9001ea9e:	e7e1      	b.n	9001ea64 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x194>
9001eaa0:	4438      	add	r0, r7
9001eaa2:	eb01 040c 	add.w	r4, r1, ip
9001eaa6:	e796      	b.n	9001e9d6 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x106>
9001eaa8:	4b03      	ldr	r3, [pc, #12]	; (9001eab8 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e8>)
9001eaaa:	6818      	ldr	r0, [r3, #0]
9001eaac:	6803      	ldr	r3, [r0, #0]
9001eaae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9001eab0:	4798      	blx	r3
9001eab2:	e768      	b.n	9001e986 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xb6>
9001eab4:	fffff800 	.word	0xfffff800
9001eab8:	240281ec 	.word	0x240281ec
9001eabc:	240281e6 	.word	0x240281e6

9001eac0 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb>:
9001eac0:	b4f0      	push	{r4, r5, r6, r7}
9001eac2:	4616      	mov	r6, r2
9001eac4:	461c      	mov	r4, r3
9001eac6:	460d      	mov	r5, r1
9001eac8:	9a04      	ldr	r2, [sp, #16]
9001eaca:	2e01      	cmp	r6, #1
9001eacc:	f89d 3014 	ldrb.w	r3, [sp, #20]
9001ead0:	f89d 7018 	ldrb.w	r7, [sp, #24]
9001ead4:	d012      	beq.n	9001eafc <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x3c>
9001ead6:	d303      	bcc.n	9001eae0 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x20>
9001ead8:	2e02      	cmp	r6, #2
9001eada:	d00a      	beq.n	9001eaf2 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x32>
9001eadc:	bcf0      	pop	{r4, r5, r6, r7}
9001eade:	4770      	bx	lr
9001eae0:	6805      	ldr	r5, [r0, #0]
9001eae2:	e9cd 3704 	strd	r3, r7, [sp, #16]
9001eae6:	68ed      	ldr	r5, [r5, #12]
9001eae8:	4613      	mov	r3, r2
9001eaea:	4622      	mov	r2, r4
9001eaec:	46ac      	mov	ip, r5
9001eaee:	bcf0      	pop	{r4, r5, r6, r7}
9001eaf0:	4760      	bx	ip
9001eaf2:	4621      	mov	r1, r4
9001eaf4:	4628      	mov	r0, r5
9001eaf6:	bcf0      	pop	{r4, r5, r6, r7}
9001eaf8:	f7ff bd94 	b.w	9001e624 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
9001eafc:	4621      	mov	r1, r4
9001eafe:	4628      	mov	r0, r5
9001eb00:	bcf0      	pop	{r4, r5, r6, r7}
9001eb02:	f7ff bee5 	b.w	9001e8d0 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>
	...

9001eb08 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>:
9001eb08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001eb0c:	b093      	sub	sp, #76	; 0x4c
9001eb0e:	4681      	mov	r9, r0
9001eb10:	4688      	mov	r8, r1
9001eb12:	6810      	ldr	r0, [r2, #0]
9001eb14:	6851      	ldr	r1, [r2, #4]
9001eb16:	ac0e      	add	r4, sp, #56	; 0x38
9001eb18:	4616      	mov	r6, r2
9001eb1a:	f89d a070 	ldrb.w	sl, [sp, #112]	; 0x70
9001eb1e:	4f6b      	ldr	r7, [pc, #428]	; (9001eccc <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c4>)
9001eb20:	c403      	stmia	r4!, {r0, r1}
9001eb22:	6818      	ldr	r0, [r3, #0]
9001eb24:	ac10      	add	r4, sp, #64	; 0x40
9001eb26:	6859      	ldr	r1, [r3, #4]
9001eb28:	c403      	stmia	r4!, {r0, r1}
9001eb2a:	a80e      	add	r0, sp, #56	; 0x38
9001eb2c:	f7f9 f9aa 	bl	90017e84 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
9001eb30:	4631      	mov	r1, r6
9001eb32:	a810      	add	r0, sp, #64	; 0x40
9001eb34:	4e66      	ldr	r6, [pc, #408]	; (9001ecd0 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c8>)
9001eb36:	f7f9 f9cd 	bl	90017ed4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
9001eb3a:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	; 0x40
9001eb3e:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	; 0x42
9001eb42:	f8bd 103c 	ldrh.w	r1, [sp, #60]	; 0x3c
9001eb46:	6830      	ldr	r0, [r6, #0]
9001eb48:	fb11 2103 	smlabb	r1, r1, r3, r2
9001eb4c:	f9bd 4044 	ldrsh.w	r4, [sp, #68]	; 0x44
9001eb50:	f9bd 5046 	ldrsh.w	r5, [sp, #70]	; 0x46
9001eb54:	4489      	add	r9, r1
9001eb56:	f8bd 1038 	ldrh.w	r1, [sp, #56]	; 0x38
9001eb5a:	440a      	add	r2, r1
9001eb5c:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
9001eb60:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
9001eb64:	4413      	add	r3, r2
9001eb66:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
9001eb6a:	6803      	ldr	r3, [r0, #0]
9001eb6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
9001eb6e:	4798      	blx	r3
9001eb70:	f010 0f80 	tst.w	r0, #128	; 0x80
9001eb74:	6830      	ldr	r0, [r6, #0]
9001eb76:	d01d      	beq.n	9001ebb4 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xac>
9001eb78:	2200      	movs	r2, #0
9001eb7a:	6801      	ldr	r1, [r0, #0]
9001eb7c:	b2a4      	uxth	r4, r4
9001eb7e:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
9001eb82:	b2ad      	uxth	r5, r5
9001eb84:	e9cd 2208 	strd	r2, r2, [sp, #32]
9001eb88:	220b      	movs	r2, #11
9001eb8a:	9207      	str	r2, [sp, #28]
9001eb8c:	883a      	ldrh	r2, [r7, #0]
9001eb8e:	9502      	str	r5, [sp, #8]
9001eb90:	9206      	str	r2, [sp, #24]
9001eb92:	2201      	movs	r2, #1
9001eb94:	9401      	str	r4, [sp, #4]
9001eb96:	e9cd a204 	strd	sl, r2, [sp, #16]
9001eb9a:	f8bd 203c 	ldrh.w	r2, [sp, #60]	; 0x3c
9001eb9e:	9203      	str	r2, [sp, #12]
9001eba0:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
9001eba4:	9200      	str	r2, [sp, #0]
9001eba6:	4642      	mov	r2, r8
9001eba8:	6bcc      	ldr	r4, [r1, #60]	; 0x3c
9001ebaa:	4649      	mov	r1, r9
9001ebac:	47a0      	blx	r4
9001ebae:	b013      	add	sp, #76	; 0x4c
9001ebb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9001ebb4:	6803      	ldr	r3, [r0, #0]
9001ebb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
9001ebb8:	4798      	blx	r3
9001ebba:	883b      	ldrh	r3, [r7, #0]
9001ebbc:	f9bd 2042 	ldrsh.w	r2, [sp, #66]	; 0x42
9001ebc0:	f04f 0e04 	mov.w	lr, #4
9001ebc4:	f9bd 1040 	ldrsh.w	r1, [sp, #64]	; 0x40
9001ebc8:	435d      	muls	r5, r3
9001ebca:	fb03 1202 	mla	r2, r3, r2, r1
9001ebce:	eb00 0042 	add.w	r0, r0, r2, lsl #1
9001ebd2:	eb00 0245 	add.w	r2, r0, r5, lsl #1
9001ebd6:	920c      	str	r2, [sp, #48]	; 0x30
9001ebd8:	f9bd 203c 	ldrsh.w	r2, [sp, #60]	; 0x3c
9001ebdc:	1b12      	subs	r2, r2, r4
9001ebde:	920d      	str	r2, [sp, #52]	; 0x34
9001ebe0:	0062      	lsls	r2, r4, #1
9001ebe2:	1b1c      	subs	r4, r3, r4
9001ebe4:	920a      	str	r2, [sp, #40]	; 0x28
9001ebe6:	0063      	lsls	r3, r4, #1
9001ebe8:	930b      	str	r3, [sp, #44]	; 0x2c
9001ebea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
9001ebec:	4298      	cmp	r0, r3
9001ebee:	d266      	bcs.n	9001ecbe <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1b6>
9001ebf0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
9001ebf2:	eb00 0b03 	add.w	fp, r0, r3
9001ebf6:	4558      	cmp	r0, fp
9001ebf8:	d25c      	bcs.n	9001ecb4 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1ac>
9001ebfa:	f819 3b01 	ldrb.w	r3, [r9], #1
9001ebfe:	fb1e e303 	smlabb	r3, lr, r3, lr
9001ec02:	f858 2003 	ldr.w	r2, [r8, r3]
9001ec06:	0e11      	lsrs	r1, r2, #24
9001ec08:	d012      	beq.n	9001ec30 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
9001ec0a:	29ff      	cmp	r1, #255	; 0xff
9001ec0c:	ea4f 2712 	mov.w	r7, r2, lsr #8
9001ec10:	d110      	bne.n	9001ec34 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
9001ec12:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
9001ec16:	d10d      	bne.n	9001ec34 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
9001ec18:	0953      	lsrs	r3, r2, #5
9001ec1a:	f427 67ff 	bic.w	r7, r7, #2040	; 0x7f8
9001ec1e:	f3c2 02c4 	ubfx	r2, r2, #3, #5
9001ec22:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
9001ec26:	f027 0707 	bic.w	r7, r7, #7
9001ec2a:	431f      	orrs	r7, r3
9001ec2c:	433a      	orrs	r2, r7
9001ec2e:	8002      	strh	r2, [r0, #0]
9001ec30:	3002      	adds	r0, #2
9001ec32:	e7e0      	b.n	9001ebf6 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xee>
9001ec34:	fb0a f101 	mul.w	r1, sl, r1
9001ec38:	8806      	ldrh	r6, [r0, #0]
9001ec3a:	f3c2 4c07 	ubfx	ip, r2, #16, #8
9001ec3e:	b2d2      	uxtb	r2, r2
9001ec40:	1c4b      	adds	r3, r1, #1
9001ec42:	1235      	asrs	r5, r6, #8
9001ec44:	10f4      	asrs	r4, r6, #3
9001ec46:	eb03 2321 	add.w	r3, r3, r1, asr #8
9001ec4a:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
9001ec4e:	00f6      	lsls	r6, r6, #3
9001ec50:	f004 04fc 	and.w	r4, r4, #252	; 0xfc
9001ec54:	121b      	asrs	r3, r3, #8
9001ec56:	b2f6      	uxtb	r6, r6
9001ec58:	b299      	uxth	r1, r3
9001ec5a:	43db      	mvns	r3, r3
9001ec5c:	ea45 1555 	orr.w	r5, r5, r5, lsr #5
9001ec60:	fb1c fc01 	smulbb	ip, ip, r1
9001ec64:	b2db      	uxtb	r3, r3
9001ec66:	fb12 f201 	smulbb	r2, r2, r1
9001ec6a:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
9001ec6e:	fb05 c503 	mla	r5, r5, r3, ip
9001ec72:	b2ff      	uxtb	r7, r7
9001ec74:	fb06 2203 	mla	r2, r6, r3, r2
9001ec78:	ea44 1494 	orr.w	r4, r4, r4, lsr #6
9001ec7c:	fb17 f701 	smulbb	r7, r7, r1
9001ec80:	b2ad      	uxth	r5, r5
9001ec82:	b292      	uxth	r2, r2
9001ec84:	fb04 7403 	mla	r4, r4, r3, r7
9001ec88:	f105 0c01 	add.w	ip, r5, #1
9001ec8c:	1c57      	adds	r7, r2, #1
9001ec8e:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
9001ec92:	eb07 2712 	add.w	r7, r7, r2, lsr #8
9001ec96:	b2a4      	uxth	r4, r4
9001ec98:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
9001ec9c:	f3c7 27c4 	ubfx	r7, r7, #11, #5
9001eca0:	433d      	orrs	r5, r7
9001eca2:	1c67      	adds	r7, r4, #1
9001eca4:	eb07 2414 	add.w	r4, r7, r4, lsr #8
9001eca8:	0964      	lsrs	r4, r4, #5
9001ecaa:	f404 64fc 	and.w	r4, r4, #2016	; 0x7e0
9001ecae:	4325      	orrs	r5, r4
9001ecb0:	8005      	strh	r5, [r0, #0]
9001ecb2:	e7bd      	b.n	9001ec30 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
9001ecb4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
9001ecb6:	4418      	add	r0, r3
9001ecb8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
9001ecba:	4499      	add	r9, r3
9001ecbc:	e795      	b.n	9001ebea <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xe2>
9001ecbe:	4b04      	ldr	r3, [pc, #16]	; (9001ecd0 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c8>)
9001ecc0:	6818      	ldr	r0, [r3, #0]
9001ecc2:	6803      	ldr	r3, [r0, #0]
9001ecc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9001ecc6:	4798      	blx	r3
9001ecc8:	e771      	b.n	9001ebae <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xa6>
9001ecca:	bf00      	nop
9001eccc:	240281e6 	.word	0x240281e6
9001ecd0:	240281ec 	.word	0x240281ec

9001ecd4 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h>:
9001ecd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001ecd8:	b087      	sub	sp, #28
9001ecda:	4680      	mov	r8, r0
9001ecdc:	460d      	mov	r5, r1
9001ecde:	4614      	mov	r4, r2
9001ece0:	f89d 6040 	ldrb.w	r6, [sp, #64]	; 0x40
9001ece4:	2e00      	cmp	r6, #0
9001ece6:	f000 80b9 	beq.w	9001ee5c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x188>
9001ecea:	6810      	ldr	r0, [r2, #0]
9001ecec:	af02      	add	r7, sp, #8
9001ecee:	6851      	ldr	r1, [r2, #4]
9001ecf0:	c703      	stmia	r7!, {r0, r1}
9001ecf2:	6818      	ldr	r0, [r3, #0]
9001ecf4:	af04      	add	r7, sp, #16
9001ecf6:	6859      	ldr	r1, [r3, #4]
9001ecf8:	c703      	stmia	r7!, {r0, r1}
9001ecfa:	a802      	add	r0, sp, #8
9001ecfc:	f7f9 f8c2 	bl	90017e84 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
9001ed00:	4621      	mov	r1, r4
9001ed02:	a804      	add	r0, sp, #16
9001ed04:	f7f9 f8e6 	bl	90017ed4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
9001ed08:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
9001ed0c:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
9001ed10:	f8bd 400c 	ldrh.w	r4, [sp, #12]
9001ed14:	f9bd 7016 	ldrsh.w	r7, [sp, #22]
9001ed18:	fb14 2103 	smlabb	r1, r4, r3, r2
9001ed1c:	eb08 0401 	add.w	r4, r8, r1
9001ed20:	f8bd 1008 	ldrh.w	r1, [sp, #8]
9001ed24:	f9bd 8014 	ldrsh.w	r8, [sp, #20]
9001ed28:	440a      	add	r2, r1
9001ed2a:	ea4f 0a48 	mov.w	sl, r8, lsl #1
9001ed2e:	f8ad 2010 	strh.w	r2, [sp, #16]
9001ed32:	f8bd 200a 	ldrh.w	r2, [sp, #10]
9001ed36:	4413      	add	r3, r2
9001ed38:	f8ad 3012 	strh.w	r3, [sp, #18]
9001ed3c:	4b49      	ldr	r3, [pc, #292]	; (9001ee64 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x190>)
9001ed3e:	6818      	ldr	r0, [r3, #0]
9001ed40:	6803      	ldr	r3, [r0, #0]
9001ed42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
9001ed44:	4798      	blx	r3
9001ed46:	4b48      	ldr	r3, [pc, #288]	; (9001ee68 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x194>)
9001ed48:	f9bd 1012 	ldrsh.w	r1, [sp, #18]
9001ed4c:	2eff      	cmp	r6, #255	; 0xff
9001ed4e:	881a      	ldrh	r2, [r3, #0]
9001ed50:	f9bd c010 	ldrsh.w	ip, [sp, #16]
9001ed54:	fb02 c101 	mla	r1, r2, r1, ip
9001ed58:	fb02 f207 	mul.w	r2, r2, r7
9001ed5c:	eb00 0041 	add.w	r0, r0, r1, lsl #1
9001ed60:	f105 0104 	add.w	r1, r5, #4
9001ed64:	461d      	mov	r5, r3
9001ed66:	d05a      	beq.n	9001ee1e <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x14a>
9001ed68:	f1c6 0eff 	rsb	lr, r6, #255	; 0xff
9001ed6c:	eb00 0242 	add.w	r2, r0, r2, lsl #1
9001ed70:	b2b6      	uxth	r6, r6
9001ed72:	9301      	str	r3, [sp, #4]
9001ed74:	fa1f fe8e 	uxth.w	lr, lr
9001ed78:	4282      	cmp	r2, r0
9001ed7a:	d96a      	bls.n	9001ee52 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x17e>
9001ed7c:	eb00 0b0a 	add.w	fp, r0, sl
9001ed80:	4583      	cmp	fp, r0
9001ed82:	d940      	bls.n	9001ee06 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x132>
9001ed84:	8805      	ldrh	r5, [r0, #0]
9001ed86:	f814 3b01 	ldrb.w	r3, [r4], #1
9001ed8a:	122f      	asrs	r7, r5, #8
9001ed8c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
9001ed90:	ea4f 09e5 	mov.w	r9, r5, asr #3
9001ed94:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
9001ed98:	00ed      	lsls	r5, r5, #3
9001ed9a:	ea4f 2c23 	mov.w	ip, r3, asr #8
9001ed9e:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
9001eda2:	fb17 f70e 	smulbb	r7, r7, lr
9001eda6:	b2ed      	uxtb	r5, r5
9001eda8:	fb19 f90e 	smulbb	r9, r9, lr
9001edac:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
9001edb0:	fb15 f50e 	smulbb	r5, r5, lr
9001edb4:	fb0c 7c06 	mla	ip, ip, r6, r7
9001edb8:	10df      	asrs	r7, r3, #3
9001edba:	00db      	lsls	r3, r3, #3
9001edbc:	fa1f fc8c 	uxth.w	ip, ip
9001edc0:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
9001edc4:	b2db      	uxtb	r3, r3
9001edc6:	fb07 9706 	mla	r7, r7, r6, r9
9001edca:	f10c 0901 	add.w	r9, ip, #1
9001edce:	fb03 5306 	mla	r3, r3, r6, r5
9001edd2:	eb09 2c1c 	add.w	ip, r9, ip, lsr #8
9001edd6:	b29b      	uxth	r3, r3
9001edd8:	f40c 4978 	and.w	r9, ip, #63488	; 0xf800
9001eddc:	b2bf      	uxth	r7, r7
9001edde:	f103 0c01 	add.w	ip, r3, #1
9001ede2:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
9001ede6:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
9001edea:	ea4c 0c09 	orr.w	ip, ip, r9
9001edee:	f107 0901 	add.w	r9, r7, #1
9001edf2:	eb09 2717 	add.w	r7, r9, r7, lsr #8
9001edf6:	097f      	lsrs	r7, r7, #5
9001edf8:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
9001edfc:	ea4c 0c07 	orr.w	ip, ip, r7
9001ee00:	f820 cb02 	strh.w	ip, [r0], #2
9001ee04:	e7bc      	b.n	9001ed80 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xac>
9001ee06:	9b01      	ldr	r3, [sp, #4]
9001ee08:	881b      	ldrh	r3, [r3, #0]
9001ee0a:	eba3 0308 	sub.w	r3, r3, r8
9001ee0e:	eb00 0043 	add.w	r0, r0, r3, lsl #1
9001ee12:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
9001ee16:	eba3 0308 	sub.w	r3, r3, r8
9001ee1a:	441c      	add	r4, r3
9001ee1c:	e7ac      	b.n	9001ed78 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xa4>
9001ee1e:	eb00 0242 	add.w	r2, r0, r2, lsl #1
9001ee22:	4282      	cmp	r2, r0
9001ee24:	d915      	bls.n	9001ee52 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x17e>
9001ee26:	eb00 060a 	add.w	r6, r0, sl
9001ee2a:	4286      	cmp	r6, r0
9001ee2c:	d906      	bls.n	9001ee3c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x168>
9001ee2e:	f814 3b01 	ldrb.w	r3, [r4], #1
9001ee32:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
9001ee36:	f820 3b02 	strh.w	r3, [r0], #2
9001ee3a:	e7f6      	b.n	9001ee2a <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x156>
9001ee3c:	882b      	ldrh	r3, [r5, #0]
9001ee3e:	eba3 0308 	sub.w	r3, r3, r8
9001ee42:	eb00 0043 	add.w	r0, r0, r3, lsl #1
9001ee46:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
9001ee4a:	eba3 0308 	sub.w	r3, r3, r8
9001ee4e:	441c      	add	r4, r3
9001ee50:	e7e7      	b.n	9001ee22 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x14e>
9001ee52:	4b04      	ldr	r3, [pc, #16]	; (9001ee64 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x190>)
9001ee54:	6818      	ldr	r0, [r3, #0]
9001ee56:	6803      	ldr	r3, [r0, #0]
9001ee58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9001ee5a:	4798      	blx	r3
9001ee5c:	b007      	add	sp, #28
9001ee5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9001ee62:	bf00      	nop
9001ee64:	240281ec 	.word	0x240281ec
9001ee68:	240281e6 	.word	0x240281e6

9001ee6c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>:
9001ee6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001ee70:	b091      	sub	sp, #68	; 0x44
9001ee72:	4680      	mov	r8, r0
9001ee74:	460f      	mov	r7, r1
9001ee76:	4614      	mov	r4, r2
9001ee78:	f89d 5068 	ldrb.w	r5, [sp, #104]	; 0x68
9001ee7c:	2d00      	cmp	r5, #0
9001ee7e:	d051      	beq.n	9001ef24 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xb8>
9001ee80:	6810      	ldr	r0, [r2, #0]
9001ee82:	ae0c      	add	r6, sp, #48	; 0x30
9001ee84:	6851      	ldr	r1, [r2, #4]
9001ee86:	f8df 9200 	ldr.w	r9, [pc, #512]	; 9001f088 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x21c>
9001ee8a:	c603      	stmia	r6!, {r0, r1}
9001ee8c:	6818      	ldr	r0, [r3, #0]
9001ee8e:	ae0e      	add	r6, sp, #56	; 0x38
9001ee90:	6859      	ldr	r1, [r3, #4]
9001ee92:	c603      	stmia	r6!, {r0, r1}
9001ee94:	a80c      	add	r0, sp, #48	; 0x30
9001ee96:	f7f8 fff5 	bl	90017e84 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
9001ee9a:	4621      	mov	r1, r4
9001ee9c:	a80e      	add	r0, sp, #56	; 0x38
9001ee9e:	f7f9 f819 	bl	90017ed4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
9001eea2:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
9001eea6:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
9001eeaa:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
9001eeae:	f8d9 0000 	ldr.w	r0, [r9]
9001eeb2:	fb11 2103 	smlabb	r1, r1, r3, r2
9001eeb6:	f9bd 603c 	ldrsh.w	r6, [sp, #60]	; 0x3c
9001eeba:	f9bd a03e 	ldrsh.w	sl, [sp, #62]	; 0x3e
9001eebe:	eb08 0401 	add.w	r4, r8, r1
9001eec2:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
9001eec6:	f8df 81c4 	ldr.w	r8, [pc, #452]	; 9001f08c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x220>
9001eeca:	440a      	add	r2, r1
9001eecc:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
9001eed0:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
9001eed4:	4413      	add	r3, r2
9001eed6:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
9001eeda:	6803      	ldr	r3, [r0, #0]
9001eedc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
9001eede:	4798      	blx	r3
9001eee0:	f010 0f80 	tst.w	r0, #128	; 0x80
9001eee4:	f8d9 0000 	ldr.w	r0, [r9]
9001eee8:	d01f      	beq.n	9001ef2a <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xbe>
9001eeea:	2200      	movs	r2, #0
9001eeec:	6801      	ldr	r1, [r0, #0]
9001eeee:	b2b6      	uxth	r6, r6
9001eef0:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
9001eef4:	e9cd 2208 	strd	r2, r2, [sp, #32]
9001eef8:	220b      	movs	r2, #11
9001eefa:	9207      	str	r2, [sp, #28]
9001eefc:	f8b8 2000 	ldrh.w	r2, [r8]
9001ef00:	9601      	str	r6, [sp, #4]
9001ef02:	9206      	str	r2, [sp, #24]
9001ef04:	2201      	movs	r2, #1
9001ef06:	e9cd 5204 	strd	r5, r2, [sp, #16]
9001ef0a:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
9001ef0e:	9203      	str	r2, [sp, #12]
9001ef10:	fa1f f28a 	uxth.w	r2, sl
9001ef14:	9202      	str	r2, [sp, #8]
9001ef16:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
9001ef1a:	9200      	str	r2, [sp, #0]
9001ef1c:	463a      	mov	r2, r7
9001ef1e:	6bcd      	ldr	r5, [r1, #60]	; 0x3c
9001ef20:	4621      	mov	r1, r4
9001ef22:	47a8      	blx	r5
9001ef24:	b011      	add	sp, #68	; 0x44
9001ef26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9001ef2a:	6803      	ldr	r3, [r0, #0]
9001ef2c:	ea4f 0946 	mov.w	r9, r6, lsl #1
9001ef30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
9001ef32:	4798      	blx	r3
9001ef34:	f8b8 2000 	ldrh.w	r2, [r8]
9001ef38:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
9001ef3c:	2dff      	cmp	r5, #255	; 0xff
9001ef3e:	f9bd 1038 	ldrsh.w	r1, [sp, #56]	; 0x38
9001ef42:	fb0a fa02 	mul.w	sl, sl, r2
9001ef46:	fb02 1303 	mla	r3, r2, r3, r1
9001ef4a:	eb00 0043 	add.w	r0, r0, r3, lsl #1
9001ef4e:	d062      	beq.n	9001f016 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1aa>
9001ef50:	ea6f 0c05 	mvn.w	ip, r5
9001ef54:	eb00 034a 	add.w	r3, r0, sl, lsl #1
9001ef58:	b2ad      	uxth	r5, r5
9001ef5a:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
9001ef5e:	fa5f fc8c 	uxtb.w	ip, ip
9001ef62:	930a      	str	r3, [sp, #40]	; 0x28
9001ef64:	9b0a      	ldr	r3, [sp, #40]	; 0x28
9001ef66:	4298      	cmp	r0, r3
9001ef68:	f080 8085 	bcs.w	9001f076 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x20a>
9001ef6c:	eb00 0b09 	add.w	fp, r0, r9
9001ef70:	4558      	cmp	r0, fp
9001ef72:	d246      	bcs.n	9001f002 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x196>
9001ef74:	f814 eb01 	ldrb.w	lr, [r4], #1
9001ef78:	2303      	movs	r3, #3
9001ef7a:	2204      	movs	r2, #4
9001ef7c:	fb13 2e0e 	smlabb	lr, r3, lr, r2
9001ef80:	8803      	ldrh	r3, [r0, #0]
9001ef82:	eb07 0a0e 	add.w	sl, r7, lr
9001ef86:	1219      	asrs	r1, r3, #8
9001ef88:	10da      	asrs	r2, r3, #3
9001ef8a:	f817 e00e 	ldrb.w	lr, [r7, lr]
9001ef8e:	f89a 8002 	ldrb.w	r8, [sl, #2]
9001ef92:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
9001ef96:	00db      	lsls	r3, r3, #3
9001ef98:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
9001ef9c:	fb18 f805 	smulbb	r8, r8, r5
9001efa0:	ea41 1151 	orr.w	r1, r1, r1, lsr #5
9001efa4:	fb1e fe05 	smulbb	lr, lr, r5
9001efa8:	b2db      	uxtb	r3, r3
9001efaa:	fb01 810c 	mla	r1, r1, ip, r8
9001efae:	f89a 8001 	ldrb.w	r8, [sl, #1]
9001efb2:	ea42 1292 	orr.w	r2, r2, r2, lsr #6
9001efb6:	fb18 f805 	smulbb	r8, r8, r5
9001efba:	ea43 1353 	orr.w	r3, r3, r3, lsr #5
9001efbe:	b289      	uxth	r1, r1
9001efc0:	fb02 820c 	mla	r2, r2, ip, r8
9001efc4:	fb03 e30c 	mla	r3, r3, ip, lr
9001efc8:	f101 0801 	add.w	r8, r1, #1
9001efcc:	b292      	uxth	r2, r2
9001efce:	b29b      	uxth	r3, r3
9001efd0:	eb08 2111 	add.w	r1, r8, r1, lsr #8
9001efd4:	f102 0801 	add.w	r8, r2, #1
9001efd8:	f103 0e01 	add.w	lr, r3, #1
9001efdc:	eb08 2812 	add.w	r8, r8, r2, lsr #8
9001efe0:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
9001efe4:	eb0e 2e13 	add.w	lr, lr, r3, lsr #8
9001efe8:	ea4f 1858 	mov.w	r8, r8, lsr #5
9001efec:	f3ce 2ec4 	ubfx	lr, lr, #11, #5
9001eff0:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
9001eff4:	ea4e 0101 	orr.w	r1, lr, r1
9001eff8:	ea41 0108 	orr.w	r1, r1, r8
9001effc:	f820 1b02 	strh.w	r1, [r0], #2
9001f000:	e7b6      	b.n	9001ef70 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x104>
9001f002:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
9001f004:	881b      	ldrh	r3, [r3, #0]
9001f006:	1b9b      	subs	r3, r3, r6
9001f008:	eb00 0043 	add.w	r0, r0, r3, lsl #1
9001f00c:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
9001f010:	1b9b      	subs	r3, r3, r6
9001f012:	441c      	add	r4, r3
9001f014:	e7a6      	b.n	9001ef64 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xf8>
9001f016:	eb00 0a4a 	add.w	sl, r0, sl, lsl #1
9001f01a:	2203      	movs	r2, #3
9001f01c:	2504      	movs	r5, #4
9001f01e:	4919      	ldr	r1, [pc, #100]	; (9001f084 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x218>)
9001f020:	4550      	cmp	r0, sl
9001f022:	d228      	bcs.n	9001f076 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x20a>
9001f024:	eb00 0c09 	add.w	ip, r0, r9
9001f028:	4560      	cmp	r0, ip
9001f02a:	4623      	mov	r3, r4
9001f02c:	d219      	bcs.n	9001f062 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1f6>
9001f02e:	f893 e000 	ldrb.w	lr, [r3]
9001f032:	3401      	adds	r4, #1
9001f034:	fb12 5e0e 	smlabb	lr, r2, lr, r5
9001f038:	eb07 0b0e 	add.w	fp, r7, lr
9001f03c:	f817 e00e 	ldrb.w	lr, [r7, lr]
9001f040:	f89b 3002 	ldrb.w	r3, [fp, #2]
9001f044:	f89b b001 	ldrb.w	fp, [fp, #1]
9001f048:	ea01 2303 	and.w	r3, r1, r3, lsl #8
9001f04c:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
9001f050:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
9001f054:	ea43 030b 	orr.w	r3, r3, fp
9001f058:	ea43 03de 	orr.w	r3, r3, lr, lsr #3
9001f05c:	f820 3b02 	strh.w	r3, [r0], #2
9001f060:	e7e2      	b.n	9001f028 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1bc>
9001f062:	f8b8 3000 	ldrh.w	r3, [r8]
9001f066:	1b9b      	subs	r3, r3, r6
9001f068:	eb00 0043 	add.w	r0, r0, r3, lsl #1
9001f06c:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
9001f070:	1b9b      	subs	r3, r3, r6
9001f072:	441c      	add	r4, r3
9001f074:	e7d4      	b.n	9001f020 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1b4>
9001f076:	4b04      	ldr	r3, [pc, #16]	; (9001f088 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x21c>)
9001f078:	6818      	ldr	r0, [r3, #0]
9001f07a:	6803      	ldr	r3, [r0, #0]
9001f07c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9001f07e:	4798      	blx	r3
9001f080:	e750      	b.n	9001ef24 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xb8>
9001f082:	bf00      	nop
9001f084:	fffff800 	.word	0xfffff800
9001f088:	240281ec 	.word	0x240281ec
9001f08c:	240281e6 	.word	0x240281e6

9001f090 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>:
9001f090:	b430      	push	{r4, r5}
9001f092:	780d      	ldrb	r5, [r1, #0]
9001f094:	f89d 4008 	ldrb.w	r4, [sp, #8]
9001f098:	2d01      	cmp	r5, #1
9001f09a:	d00a      	beq.n	9001f0b2 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x22>
9001f09c:	d305      	bcc.n	9001f0aa <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x1a>
9001f09e:	2d02      	cmp	r5, #2
9001f0a0:	d10b      	bne.n	9001f0ba <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x2a>
9001f0a2:	9402      	str	r4, [sp, #8]
9001f0a4:	bc30      	pop	{r4, r5}
9001f0a6:	f7ff be15 	b.w	9001ecd4 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h>
9001f0aa:	9402      	str	r4, [sp, #8]
9001f0ac:	bc30      	pop	{r4, r5}
9001f0ae:	f7ff bd2b 	b.w	9001eb08 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>
9001f0b2:	9402      	str	r4, [sp, #8]
9001f0b4:	bc30      	pop	{r4, r5}
9001f0b6:	f7ff bed9 	b.w	9001ee6c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>
9001f0ba:	bc30      	pop	{r4, r5}
9001f0bc:	4770      	bx	lr
	...

9001f0c0 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>:
9001f0c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001f0c4:	b087      	sub	sp, #28
9001f0c6:	4604      	mov	r4, r0
9001f0c8:	460e      	mov	r6, r1
9001f0ca:	6810      	ldr	r0, [r2, #0]
9001f0cc:	6851      	ldr	r1, [r2, #4]
9001f0ce:	ad02      	add	r5, sp, #8
9001f0d0:	4617      	mov	r7, r2
9001f0d2:	f89d a040 	ldrb.w	sl, [sp, #64]	; 0x40
9001f0d6:	f8df 9230 	ldr.w	r9, [pc, #560]	; 9001f308 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x248>
9001f0da:	c503      	stmia	r5!, {r0, r1}
9001f0dc:	6818      	ldr	r0, [r3, #0]
9001f0de:	ad04      	add	r5, sp, #16
9001f0e0:	6859      	ldr	r1, [r3, #4]
9001f0e2:	c503      	stmia	r5!, {r0, r1}
9001f0e4:	a802      	add	r0, sp, #8
9001f0e6:	f7f8 fecd 	bl	90017e84 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
9001f0ea:	4639      	mov	r1, r7
9001f0ec:	a804      	add	r0, sp, #16
9001f0ee:	f7f8 fef1 	bl	90017ed4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
9001f0f2:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
9001f0f6:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
9001f0fa:	f8bd 100c 	ldrh.w	r1, [sp, #12]
9001f0fe:	f9bd 8014 	ldrsh.w	r8, [sp, #20]
9001f102:	fb11 2103 	smlabb	r1, r1, r3, r2
9001f106:	f9bd 5016 	ldrsh.w	r5, [sp, #22]
9001f10a:	eb04 0441 	add.w	r4, r4, r1, lsl #1
9001f10e:	440e      	add	r6, r1
9001f110:	f8bd 1008 	ldrh.w	r1, [sp, #8]
9001f114:	440a      	add	r2, r1
9001f116:	f8ad 2010 	strh.w	r2, [sp, #16]
9001f11a:	f8bd 200a 	ldrh.w	r2, [sp, #10]
9001f11e:	4413      	add	r3, r2
9001f120:	f8ad 3012 	strh.w	r3, [sp, #18]
9001f124:	4b77      	ldr	r3, [pc, #476]	; (9001f304 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x244>)
9001f126:	6818      	ldr	r0, [r3, #0]
9001f128:	6803      	ldr	r3, [r0, #0]
9001f12a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
9001f12c:	4798      	blx	r3
9001f12e:	f8b9 b000 	ldrh.w	fp, [r9]
9001f132:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
9001f136:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
9001f13a:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
9001f13e:	fb05 f50b 	mul.w	r5, r5, fp
9001f142:	fb0b 2303 	mla	r3, fp, r3, r2
9001f146:	eb00 0043 	add.w	r0, r0, r3, lsl #1
9001f14a:	ea4f 0348 	mov.w	r3, r8, lsl #1
9001f14e:	9300      	str	r3, [sp, #0]
9001f150:	d069      	beq.n	9001f226 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x166>
9001f152:	eb00 0b45 	add.w	fp, r0, r5, lsl #1
9001f156:	4558      	cmp	r0, fp
9001f158:	f080 80cc 	bcs.w	9001f2f4 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x234>
9001f15c:	9b00      	ldr	r3, [sp, #0]
9001f15e:	4631      	mov	r1, r6
9001f160:	18c3      	adds	r3, r0, r3
9001f162:	9301      	str	r3, [sp, #4]
9001f164:	9b01      	ldr	r3, [sp, #4]
9001f166:	4298      	cmp	r0, r3
9001f168:	d24f      	bcs.n	9001f20a <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x14a>
9001f16a:	f811 2b01 	ldrb.w	r2, [r1], #1
9001f16e:	2a00      	cmp	r2, #0
9001f170:	d048      	beq.n	9001f204 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x144>
9001f172:	fb0a f202 	mul.w	r2, sl, r2
9001f176:	1c53      	adds	r3, r2, #1
9001f178:	eb03 2312 	add.w	r3, r3, r2, lsr #8
9001f17c:	121b      	asrs	r3, r3, #8
9001f17e:	d041      	beq.n	9001f204 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x144>
9001f180:	8802      	ldrh	r2, [r0, #0]
9001f182:	b29e      	uxth	r6, r3
9001f184:	f8b4 c000 	ldrh.w	ip, [r4]
9001f188:	43db      	mvns	r3, r3
9001f18a:	1215      	asrs	r5, r2, #8
9001f18c:	b2db      	uxtb	r3, r3
9001f18e:	ea4f 272c 	mov.w	r7, ip, asr #8
9001f192:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
9001f196:	ea4f 0ee2 	mov.w	lr, r2, asr #3
9001f19a:	fb15 f503 	smulbb	r5, r5, r3
9001f19e:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
9001f1a2:	00d2      	lsls	r2, r2, #3
9001f1a4:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
9001f1a8:	fb07 5706 	mla	r7, r7, r6, r5
9001f1ac:	ea4f 05ec 	mov.w	r5, ip, asr #3
9001f1b0:	b2d2      	uxtb	r2, r2
9001f1b2:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
9001f1b6:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
9001f1ba:	fb1e fe03 	smulbb	lr, lr, r3
9001f1be:	b2bf      	uxth	r7, r7
9001f1c0:	fb12 f203 	smulbb	r2, r2, r3
9001f1c4:	fa5f fc8c 	uxtb.w	ip, ip
9001f1c8:	fb05 e506 	mla	r5, r5, r6, lr
9001f1cc:	f107 0e01 	add.w	lr, r7, #1
9001f1d0:	fb0c 2c06 	mla	ip, ip, r6, r2
9001f1d4:	eb0e 2717 	add.w	r7, lr, r7, lsr #8
9001f1d8:	fa1f fc8c 	uxth.w	ip, ip
9001f1dc:	f407 4e78 	and.w	lr, r7, #63488	; 0xf800
9001f1e0:	b2ad      	uxth	r5, r5
9001f1e2:	f10c 0701 	add.w	r7, ip, #1
9001f1e6:	eb07 271c 	add.w	r7, r7, ip, lsr #8
9001f1ea:	f3c7 27c4 	ubfx	r7, r7, #11, #5
9001f1ee:	ea47 070e 	orr.w	r7, r7, lr
9001f1f2:	f105 0e01 	add.w	lr, r5, #1
9001f1f6:	eb0e 2515 	add.w	r5, lr, r5, lsr #8
9001f1fa:	096d      	lsrs	r5, r5, #5
9001f1fc:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
9001f200:	432f      	orrs	r7, r5
9001f202:	8007      	strh	r7, [r0, #0]
9001f204:	3002      	adds	r0, #2
9001f206:	3402      	adds	r4, #2
9001f208:	e7ac      	b.n	9001f164 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0xa4>
9001f20a:	f8b9 3000 	ldrh.w	r3, [r9]
9001f20e:	f9bd 600c 	ldrsh.w	r6, [sp, #12]
9001f212:	eba3 0308 	sub.w	r3, r3, r8
9001f216:	eba6 0608 	sub.w	r6, r6, r8
9001f21a:	eb00 0043 	add.w	r0, r0, r3, lsl #1
9001f21e:	eb04 0446 	add.w	r4, r4, r6, lsl #1
9001f222:	440e      	add	r6, r1
9001f224:	e797      	b.n	9001f156 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x96>
9001f226:	eb00 0545 	add.w	r5, r0, r5, lsl #1
9001f22a:	42a8      	cmp	r0, r5
9001f22c:	d262      	bcs.n	9001f2f4 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x234>
9001f22e:	9b00      	ldr	r3, [sp, #0]
9001f230:	4631      	mov	r1, r6
9001f232:	eb00 0b03 	add.w	fp, r0, r3
9001f236:	4558      	cmp	r0, fp
9001f238:	d24e      	bcs.n	9001f2d8 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x218>
9001f23a:	f811 3b01 	ldrb.w	r3, [r1], #1
9001f23e:	b12b      	cbz	r3, 9001f24c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x18c>
9001f240:	2bff      	cmp	r3, #255	; 0xff
9001f242:	f8b4 e000 	ldrh.w	lr, [r4]
9001f246:	d104      	bne.n	9001f252 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x192>
9001f248:	f8a0 e000 	strh.w	lr, [r0]
9001f24c:	3002      	adds	r0, #2
9001f24e:	3402      	adds	r4, #2
9001f250:	e7f1      	b.n	9001f236 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x176>
9001f252:	8802      	ldrh	r2, [r0, #0]
9001f254:	b29f      	uxth	r7, r3
9001f256:	43db      	mvns	r3, r3
9001f258:	ea4f 2c2e 	mov.w	ip, lr, asr #8
9001f25c:	1216      	asrs	r6, r2, #8
9001f25e:	b2db      	uxtb	r3, r3
9001f260:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
9001f264:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
9001f268:	ea4f 0ae2 	mov.w	sl, r2, asr #3
9001f26c:	00d2      	lsls	r2, r2, #3
9001f26e:	fb16 f603 	smulbb	r6, r6, r3
9001f272:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
9001f276:	b2d2      	uxtb	r2, r2
9001f278:	fb0c 6c07 	mla	ip, ip, r7, r6
9001f27c:	ea4f 06ee 	mov.w	r6, lr, asr #3
9001f280:	fb1a fa03 	smulbb	sl, sl, r3
9001f284:	ea4f 0ece 	mov.w	lr, lr, lsl #3
9001f288:	fa1f fc8c 	uxth.w	ip, ip
9001f28c:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
9001f290:	fb12 f303 	smulbb	r3, r2, r3
9001f294:	fa5f fe8e 	uxtb.w	lr, lr
9001f298:	fb06 a607 	mla	r6, r6, r7, sl
9001f29c:	f10c 0201 	add.w	r2, ip, #1
9001f2a0:	fb0e 3307 	mla	r3, lr, r7, r3
9001f2a4:	b2b6      	uxth	r6, r6
9001f2a6:	b29b      	uxth	r3, r3
9001f2a8:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
9001f2ac:	f106 0a01 	add.w	sl, r6, #1
9001f2b0:	f40c 4278 	and.w	r2, ip, #63488	; 0xf800
9001f2b4:	f103 0c01 	add.w	ip, r3, #1
9001f2b8:	eb0a 2616 	add.w	r6, sl, r6, lsr #8
9001f2bc:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
9001f2c0:	0976      	lsrs	r6, r6, #5
9001f2c2:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
9001f2c6:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
9001f2ca:	ea4c 0c02 	orr.w	ip, ip, r2
9001f2ce:	ea4c 0c06 	orr.w	ip, ip, r6
9001f2d2:	f8a0 c000 	strh.w	ip, [r0]
9001f2d6:	e7b9      	b.n	9001f24c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x18c>
9001f2d8:	f8b9 3000 	ldrh.w	r3, [r9]
9001f2dc:	f9bd 600c 	ldrsh.w	r6, [sp, #12]
9001f2e0:	eba3 0308 	sub.w	r3, r3, r8
9001f2e4:	eba6 0608 	sub.w	r6, r6, r8
9001f2e8:	eb00 0043 	add.w	r0, r0, r3, lsl #1
9001f2ec:	eb04 0446 	add.w	r4, r4, r6, lsl #1
9001f2f0:	440e      	add	r6, r1
9001f2f2:	e79a      	b.n	9001f22a <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x16a>
9001f2f4:	4b03      	ldr	r3, [pc, #12]	; (9001f304 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x244>)
9001f2f6:	6818      	ldr	r0, [r3, #0]
9001f2f8:	6803      	ldr	r3, [r0, #0]
9001f2fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9001f2fc:	4798      	blx	r3
9001f2fe:	b007      	add	sp, #28
9001f300:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9001f304:	240281ec 	.word	0x240281ec
9001f308:	240281e6 	.word	0x240281e6

9001f30c <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb>:
9001f30c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001f310:	b089      	sub	sp, #36	; 0x24
9001f312:	4682      	mov	sl, r0
9001f314:	460f      	mov	r7, r1
9001f316:	4691      	mov	r9, r2
9001f318:	f89d 604c 	ldrb.w	r6, [sp, #76]	; 0x4c
9001f31c:	4698      	mov	r8, r3
9001f31e:	9c12      	ldr	r4, [sp, #72]	; 0x48
9001f320:	2e00      	cmp	r6, #0
9001f322:	d036      	beq.n	9001f392 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
9001f324:	4608      	mov	r0, r1
9001f326:	f7fc f863 	bl	9001b3f0 <_ZNK8touchgfx6Bitmap8getWidthEv>
9001f32a:	4605      	mov	r5, r0
9001f32c:	4638      	mov	r0, r7
9001f32e:	f7fc f893 	bl	9001b458 <_ZNK8touchgfx6Bitmap9getHeightEv>
9001f332:	f8ad 000e 	strh.w	r0, [sp, #14]
9001f336:	4638      	mov	r0, r7
9001f338:	f8ad 9008 	strh.w	r9, [sp, #8]
9001f33c:	f8ad 500c 	strh.w	r5, [sp, #12]
9001f340:	f8ad 800a 	strh.w	r8, [sp, #10]
9001f344:	f7fc f940 	bl	9001b5c8 <_ZNK8touchgfx6Bitmap7getDataEv>
9001f348:	4605      	mov	r5, r0
9001f34a:	4638      	mov	r0, r7
9001f34c:	f7fc f96c 	bl	9001b628 <_ZNK8touchgfx6Bitmap12getExtraDataEv>
9001f350:	4681      	mov	r9, r0
9001f352:	4638      	mov	r0, r7
9001f354:	f7fc f9bc 	bl	9001b6d0 <_ZNK8touchgfx6Bitmap9getFormatEv>
9001f358:	280b      	cmp	r0, #11
9001f35a:	d81a      	bhi.n	9001f392 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
9001f35c:	e8df f000 	tbb	[pc, r0]
9001f360:	1906aebd 	.word	0x1906aebd
9001f364:	19191919 	.word	0x19191919
9001f368:	b5191919 	.word	0xb5191919
9001f36c:	4bb0      	ldr	r3, [pc, #704]	; (9001f630 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x324>)
9001f36e:	6818      	ldr	r0, [r3, #0]
9001f370:	6803      	ldr	r3, [r0, #0]
9001f372:	6b9b      	ldr	r3, [r3, #56]	; 0x38
9001f374:	4798      	blx	r3
9001f376:	2eff      	cmp	r6, #255	; 0xff
9001f378:	d121      	bne.n	9001f3be <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xb2>
9001f37a:	0683      	lsls	r3, r0, #26
9001f37c:	d41f      	bmi.n	9001f3be <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xb2>
9001f37e:	4638      	mov	r0, r7
9001f380:	f7fc f8ea 	bl	9001b558 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
9001f384:	b940      	cbnz	r0, 9001f398 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x8c>
9001f386:	4623      	mov	r3, r4
9001f388:	aa02      	add	r2, sp, #8
9001f38a:	4629      	mov	r1, r5
9001f38c:	4650      	mov	r0, sl
9001f38e:	f7ff fa2f 	bl	9001e7f0 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>
9001f392:	b009      	add	sp, #36	; 0x24
9001f394:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9001f398:	f10d 0818 	add.w	r8, sp, #24
9001f39c:	4639      	mov	r1, r7
9001f39e:	af04      	add	r7, sp, #16
9001f3a0:	4640      	mov	r0, r8
9001f3a2:	f7fc f88d 	bl	9001b4c0 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
9001f3a6:	e898 0003 	ldmia.w	r8, {r0, r1}
9001f3aa:	e887 0003 	stmia.w	r7, {r0, r1}
9001f3ae:	4638      	mov	r0, r7
9001f3b0:	4621      	mov	r1, r4
9001f3b2:	f7f3 fcff 	bl	90012db4 <_ZN8touchgfx4RectaNERKS0_>
9001f3b6:	4638      	mov	r0, r7
9001f3b8:	f7f3 fd3f 	bl	90012e3a <_ZNK8touchgfx4Rect7isEmptyEv>
9001f3bc:	b130      	cbz	r0, 9001f3cc <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc0>
9001f3be:	4633      	mov	r3, r6
9001f3c0:	4622      	mov	r2, r4
9001f3c2:	a902      	add	r1, sp, #8
9001f3c4:	4628      	mov	r0, r5
9001f3c6:	f7ff f92d 	bl	9001e624 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
9001f3ca:	e7e2      	b.n	9001f392 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
9001f3cc:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
9001f3d0:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
9001f3d4:	4293      	cmp	r3, r2
9001f3d6:	dd12      	ble.n	9001f3fe <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xf2>
9001f3d8:	1a9b      	subs	r3, r3, r2
9001f3da:	f9b4 0000 	ldrsh.w	r0, [r4]
9001f3de:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
9001f3e2:	f8ad 0018 	strh.w	r0, [sp, #24]
9001f3e6:	4628      	mov	r0, r5
9001f3e8:	f8ad 201a 	strh.w	r2, [sp, #26]
9001f3ec:	4642      	mov	r2, r8
9001f3ee:	f8ad 101c 	strh.w	r1, [sp, #28]
9001f3f2:	a902      	add	r1, sp, #8
9001f3f4:	f8ad 301e 	strh.w	r3, [sp, #30]
9001f3f8:	4633      	mov	r3, r6
9001f3fa:	f7ff f913 	bl	9001e624 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
9001f3fe:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
9001f402:	f9b4 2000 	ldrsh.w	r2, [r4]
9001f406:	4293      	cmp	r3, r2
9001f408:	dd12      	ble.n	9001f430 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x124>
9001f40a:	1a9b      	subs	r3, r3, r2
9001f40c:	f9bd 0012 	ldrsh.w	r0, [sp, #18]
9001f410:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
9001f414:	f8ad 2018 	strh.w	r2, [sp, #24]
9001f418:	4642      	mov	r2, r8
9001f41a:	f8ad 001a 	strh.w	r0, [sp, #26]
9001f41e:	4628      	mov	r0, r5
9001f420:	f8ad 301c 	strh.w	r3, [sp, #28]
9001f424:	23ff      	movs	r3, #255	; 0xff
9001f426:	f8ad 101e 	strh.w	r1, [sp, #30]
9001f42a:	a902      	add	r1, sp, #8
9001f42c:	f7ff f8fa 	bl	9001e624 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
9001f430:	463b      	mov	r3, r7
9001f432:	aa02      	add	r2, sp, #8
9001f434:	4629      	mov	r1, r5
9001f436:	4650      	mov	r0, sl
9001f438:	f7ff f9da 	bl	9001e7f0 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>
9001f43c:	88a2      	ldrh	r2, [r4, #4]
9001f43e:	8823      	ldrh	r3, [r4, #0]
9001f440:	f8bd 1014 	ldrh.w	r1, [sp, #20]
9001f444:	4413      	add	r3, r2
9001f446:	f8bd 2010 	ldrh.w	r2, [sp, #16]
9001f44a:	440a      	add	r2, r1
9001f44c:	b29b      	uxth	r3, r3
9001f44e:	b292      	uxth	r2, r2
9001f450:	b218      	sxth	r0, r3
9001f452:	b211      	sxth	r1, r2
9001f454:	4288      	cmp	r0, r1
9001f456:	dd12      	ble.n	9001f47e <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x172>
9001f458:	1a9b      	subs	r3, r3, r2
9001f45a:	f9bd 0016 	ldrsh.w	r0, [sp, #22]
9001f45e:	f9bd 6012 	ldrsh.w	r6, [sp, #18]
9001f462:	4642      	mov	r2, r8
9001f464:	f8ad 1018 	strh.w	r1, [sp, #24]
9001f468:	a902      	add	r1, sp, #8
9001f46a:	f8ad 301c 	strh.w	r3, [sp, #28]
9001f46e:	23ff      	movs	r3, #255	; 0xff
9001f470:	f8ad 001e 	strh.w	r0, [sp, #30]
9001f474:	4628      	mov	r0, r5
9001f476:	f8ad 601a 	strh.w	r6, [sp, #26]
9001f47a:	f7ff f8d3 	bl	9001e624 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
9001f47e:	88e2      	ldrh	r2, [r4, #6]
9001f480:	8863      	ldrh	r3, [r4, #2]
9001f482:	f8bd 1016 	ldrh.w	r1, [sp, #22]
9001f486:	4413      	add	r3, r2
9001f488:	f8bd 2012 	ldrh.w	r2, [sp, #18]
9001f48c:	440a      	add	r2, r1
9001f48e:	b29b      	uxth	r3, r3
9001f490:	b292      	uxth	r2, r2
9001f492:	b218      	sxth	r0, r3
9001f494:	b211      	sxth	r1, r2
9001f496:	4288      	cmp	r0, r1
9001f498:	f77f af7b 	ble.w	9001f392 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
9001f49c:	1a9b      	subs	r3, r3, r2
9001f49e:	f9b4 6000 	ldrsh.w	r6, [r4]
9001f4a2:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
9001f4a6:	4642      	mov	r2, r8
9001f4a8:	f8ad 301e 	strh.w	r3, [sp, #30]
9001f4ac:	23ff      	movs	r3, #255	; 0xff
9001f4ae:	f8ad 6018 	strh.w	r6, [sp, #24]
9001f4b2:	f8ad 101a 	strh.w	r1, [sp, #26]
9001f4b6:	f8ad 001c 	strh.w	r0, [sp, #28]
9001f4ba:	e782      	b.n	9001f3c2 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xb6>
9001f4bc:	4633      	mov	r3, r6
9001f4be:	4622      	mov	r2, r4
9001f4c0:	a902      	add	r1, sp, #8
9001f4c2:	4628      	mov	r0, r5
9001f4c4:	f7ff fa04 	bl	9001e8d0 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>
9001f4c8:	e763      	b.n	9001f392 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
9001f4ca:	9600      	str	r6, [sp, #0]
9001f4cc:	4623      	mov	r3, r4
9001f4ce:	aa02      	add	r2, sp, #8
9001f4d0:	4649      	mov	r1, r9
9001f4d2:	4628      	mov	r0, r5
9001f4d4:	f7ff fddc 	bl	9001f090 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>
9001f4d8:	e75b      	b.n	9001f392 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
9001f4da:	4638      	mov	r0, r7
9001f4dc:	f7fc f83c 	bl	9001b558 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
9001f4e0:	b950      	cbnz	r0, 9001f4f8 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x1ec>
9001f4e2:	f8da 3000 	ldr.w	r3, [sl]
9001f4e6:	aa02      	add	r2, sp, #8
9001f4e8:	4629      	mov	r1, r5
9001f4ea:	e9cd 6000 	strd	r6, r0, [sp]
9001f4ee:	4650      	mov	r0, sl
9001f4f0:	68de      	ldr	r6, [r3, #12]
9001f4f2:	4623      	mov	r3, r4
9001f4f4:	47b0      	blx	r6
9001f4f6:	e74c      	b.n	9001f392 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
9001f4f8:	f10d 0818 	add.w	r8, sp, #24
9001f4fc:	4639      	mov	r1, r7
9001f4fe:	af04      	add	r7, sp, #16
9001f500:	4640      	mov	r0, r8
9001f502:	f7fb ffdd 	bl	9001b4c0 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
9001f506:	e898 0003 	ldmia.w	r8, {r0, r1}
9001f50a:	e887 0003 	stmia.w	r7, {r0, r1}
9001f50e:	4638      	mov	r0, r7
9001f510:	4621      	mov	r1, r4
9001f512:	f7f3 fc4f 	bl	90012db4 <_ZN8touchgfx4RectaNERKS0_>
9001f516:	4638      	mov	r0, r7
9001f518:	f7f3 fc8f 	bl	90012e3a <_ZNK8touchgfx4Rect7isEmptyEv>
9001f51c:	b138      	cbz	r0, 9001f52e <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x222>
9001f51e:	4623      	mov	r3, r4
9001f520:	9600      	str	r6, [sp, #0]
9001f522:	aa02      	add	r2, sp, #8
9001f524:	4649      	mov	r1, r9
9001f526:	4628      	mov	r0, r5
9001f528:	f7ff fdca 	bl	9001f0c0 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
9001f52c:	e731      	b.n	9001f392 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
9001f52e:	f8da 3000 	ldr.w	r3, [sl]
9001f532:	aa02      	add	r2, sp, #8
9001f534:	4629      	mov	r1, r5
9001f536:	e9cd 6000 	strd	r6, r0, [sp]
9001f53a:	4650      	mov	r0, sl
9001f53c:	f8d3 b00c 	ldr.w	fp, [r3, #12]
9001f540:	463b      	mov	r3, r7
9001f542:	47d8      	blx	fp
9001f544:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
9001f548:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
9001f54c:	4293      	cmp	r3, r2
9001f54e:	dd13      	ble.n	9001f578 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x26c>
9001f550:	f9b4 0000 	ldrsh.w	r0, [r4]
9001f554:	1a9b      	subs	r3, r3, r2
9001f556:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
9001f55a:	f8ad 0018 	strh.w	r0, [sp, #24]
9001f55e:	4628      	mov	r0, r5
9001f560:	f8ad 201a 	strh.w	r2, [sp, #26]
9001f564:	aa02      	add	r2, sp, #8
9001f566:	f8ad 101c 	strh.w	r1, [sp, #28]
9001f56a:	4649      	mov	r1, r9
9001f56c:	f8ad 301e 	strh.w	r3, [sp, #30]
9001f570:	4643      	mov	r3, r8
9001f572:	9600      	str	r6, [sp, #0]
9001f574:	f7ff fda4 	bl	9001f0c0 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
9001f578:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
9001f57c:	f9b4 2000 	ldrsh.w	r2, [r4]
9001f580:	4293      	cmp	r3, r2
9001f582:	dd13      	ble.n	9001f5ac <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x2a0>
9001f584:	1a9b      	subs	r3, r3, r2
9001f586:	f9bd 0012 	ldrsh.w	r0, [sp, #18]
9001f58a:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
9001f58e:	f8ad 2018 	strh.w	r2, [sp, #24]
9001f592:	aa02      	add	r2, sp, #8
9001f594:	f8ad 001a 	strh.w	r0, [sp, #26]
9001f598:	4628      	mov	r0, r5
9001f59a:	f8ad 301c 	strh.w	r3, [sp, #28]
9001f59e:	4643      	mov	r3, r8
9001f5a0:	f8ad 101e 	strh.w	r1, [sp, #30]
9001f5a4:	4649      	mov	r1, r9
9001f5a6:	9600      	str	r6, [sp, #0]
9001f5a8:	f7ff fd8a 	bl	9001f0c0 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
9001f5ac:	88a2      	ldrh	r2, [r4, #4]
9001f5ae:	8823      	ldrh	r3, [r4, #0]
9001f5b0:	f8bd 1014 	ldrh.w	r1, [sp, #20]
9001f5b4:	4413      	add	r3, r2
9001f5b6:	f8bd 2010 	ldrh.w	r2, [sp, #16]
9001f5ba:	440a      	add	r2, r1
9001f5bc:	b29b      	uxth	r3, r3
9001f5be:	b292      	uxth	r2, r2
9001f5c0:	b218      	sxth	r0, r3
9001f5c2:	b211      	sxth	r1, r2
9001f5c4:	4288      	cmp	r0, r1
9001f5c6:	dd13      	ble.n	9001f5f0 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x2e4>
9001f5c8:	1a9b      	subs	r3, r3, r2
9001f5ca:	f9bd 0016 	ldrsh.w	r0, [sp, #22]
9001f5ce:	f9bd 7012 	ldrsh.w	r7, [sp, #18]
9001f5d2:	aa02      	add	r2, sp, #8
9001f5d4:	f8ad 1018 	strh.w	r1, [sp, #24]
9001f5d8:	4649      	mov	r1, r9
9001f5da:	f8ad 301c 	strh.w	r3, [sp, #28]
9001f5de:	4643      	mov	r3, r8
9001f5e0:	f8ad 001e 	strh.w	r0, [sp, #30]
9001f5e4:	4628      	mov	r0, r5
9001f5e6:	9600      	str	r6, [sp, #0]
9001f5e8:	f8ad 701a 	strh.w	r7, [sp, #26]
9001f5ec:	f7ff fd68 	bl	9001f0c0 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
9001f5f0:	88e2      	ldrh	r2, [r4, #6]
9001f5f2:	8863      	ldrh	r3, [r4, #2]
9001f5f4:	f8bd 1016 	ldrh.w	r1, [sp, #22]
9001f5f8:	4413      	add	r3, r2
9001f5fa:	f8bd 2012 	ldrh.w	r2, [sp, #18]
9001f5fe:	440a      	add	r2, r1
9001f600:	b29b      	uxth	r3, r3
9001f602:	b292      	uxth	r2, r2
9001f604:	b218      	sxth	r0, r3
9001f606:	b211      	sxth	r1, r2
9001f608:	4288      	cmp	r0, r1
9001f60a:	f77f aec2 	ble.w	9001f392 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
9001f60e:	f9b4 7000 	ldrsh.w	r7, [r4]
9001f612:	1a9b      	subs	r3, r3, r2
9001f614:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
9001f618:	f8ad 301e 	strh.w	r3, [sp, #30]
9001f61c:	4643      	mov	r3, r8
9001f61e:	f8ad 7018 	strh.w	r7, [sp, #24]
9001f622:	f8ad 101a 	strh.w	r1, [sp, #26]
9001f626:	f8ad 001c 	strh.w	r0, [sp, #28]
9001f62a:	9600      	str	r6, [sp, #0]
9001f62c:	e779      	b.n	9001f522 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x216>
9001f62e:	bf00      	nop
9001f630:	240281ec 	.word	0x240281ec

9001f634 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE>:
9001f634:	b180      	cbz	r0, 9001f658 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x24>
9001f636:	2903      	cmp	r1, #3
9001f638:	d81c      	bhi.n	9001f674 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x40>
9001f63a:	e8df f001 	tbb	[pc, r1]
9001f63e:	1d02      	.short	0x1d02
9001f640:	1f08      	.short	0x1f08
9001f642:	4b10      	ldr	r3, [pc, #64]	; (9001f684 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x50>)
9001f644:	8818      	ldrh	r0, [r3, #0]
9001f646:	f3c0 000e 	ubfx	r0, r0, #0, #15
9001f64a:	4240      	negs	r0, r0
9001f64c:	4770      	bx	lr
9001f64e:	4b0d      	ldr	r3, [pc, #52]	; (9001f684 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x50>)
9001f650:	8818      	ldrh	r0, [r3, #0]
9001f652:	f3c0 000e 	ubfx	r0, r0, #0, #15
9001f656:	4770      	bx	lr
9001f658:	2903      	cmp	r1, #3
9001f65a:	d80b      	bhi.n	9001f674 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x40>
9001f65c:	a301      	add	r3, pc, #4	; (adr r3, 9001f664 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x30>)
9001f65e:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
9001f662:	bf00      	nop
9001f664:	9001f679 	.word	0x9001f679
9001f668:	9001f64f 	.word	0x9001f64f
9001f66c:	9001f67d 	.word	0x9001f67d
9001f670:	9001f643 	.word	0x9001f643
9001f674:	2000      	movs	r0, #0
9001f676:	4770      	bx	lr
9001f678:	2001      	movs	r0, #1
9001f67a:	4770      	bx	lr
9001f67c:	f04f 30ff 	mov.w	r0, #4294967295
9001f680:	4770      	bx	lr
9001f682:	bf00      	nop
9001f684:	240281e6 	.word	0x240281e6

9001f688 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE>:
9001f688:	b180      	cbz	r0, 9001f6ac <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x24>
9001f68a:	2903      	cmp	r1, #3
9001f68c:	d81c      	bhi.n	9001f6c8 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x40>
9001f68e:	e8df f001 	tbb	[pc, r1]
9001f692:	021d      	.short	0x021d
9001f694:	071f      	.short	0x071f
9001f696:	4b10      	ldr	r3, [pc, #64]	; (9001f6d8 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x50>)
9001f698:	8818      	ldrh	r0, [r3, #0]
9001f69a:	f3c0 000e 	ubfx	r0, r0, #0, #15
9001f69e:	4770      	bx	lr
9001f6a0:	4b0d      	ldr	r3, [pc, #52]	; (9001f6d8 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x50>)
9001f6a2:	8818      	ldrh	r0, [r3, #0]
9001f6a4:	f3c0 000e 	ubfx	r0, r0, #0, #15
9001f6a8:	4240      	negs	r0, r0
9001f6aa:	4770      	bx	lr
9001f6ac:	2903      	cmp	r1, #3
9001f6ae:	d80b      	bhi.n	9001f6c8 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x40>
9001f6b0:	a301      	add	r3, pc, #4	; (adr r3, 9001f6b8 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x30>)
9001f6b2:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
9001f6b6:	bf00      	nop
9001f6b8:	9001f697 	.word	0x9001f697
9001f6bc:	9001f6d1 	.word	0x9001f6d1
9001f6c0:	9001f6a1 	.word	0x9001f6a1
9001f6c4:	9001f6cd 	.word	0x9001f6cd
9001f6c8:	2000      	movs	r0, #0
9001f6ca:	4770      	bx	lr
9001f6cc:	2001      	movs	r0, #1
9001f6ce:	4770      	bx	lr
9001f6d0:	f04f 30ff 	mov.w	r0, #4294967295
9001f6d4:	4770      	bx	lr
9001f6d6:	bf00      	nop
9001f6d8:	240281e6 	.word	0x240281e6

9001f6dc <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE>:
9001f6dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001f6e0:	b099      	sub	sp, #100	; 0x64
9001f6e2:	910b      	str	r1, [sp, #44]	; 0x2c
9001f6e4:	a914      	add	r1, sp, #80	; 0x50
9001f6e6:	f9bd 4088 	ldrsh.w	r4, [sp, #136]	; 0x88
9001f6ea:	f8bd 5090 	ldrh.w	r5, [sp, #144]	; 0x90
9001f6ee:	f8bd 6094 	ldrh.w	r6, [sp, #148]	; 0x94
9001f6f2:	f89d 80ac 	ldrb.w	r8, [sp, #172]	; 0xac
9001f6f6:	f89d a0b4 	ldrb.w	sl, [sp, #180]	; 0xb4
9001f6fa:	e881 000c 	stmia.w	r1, {r2, r3}
9001f6fe:	f9bd 308c 	ldrsh.w	r3, [sp, #140]	; 0x8c
9001f702:	e9dd 2126 	ldrd	r2, r1, [sp, #152]	; 0x98
9001f706:	9309      	str	r3, [sp, #36]	; 0x24
9001f708:	f891 900d 	ldrb.w	r9, [r1, #13]
9001f70c:	f89d 30a4 	ldrb.w	r3, [sp, #164]	; 0xa4
9001f710:	ea4f 1749 	mov.w	r7, r9, lsl #5
9001f714:	9310      	str	r3, [sp, #64]	; 0x40
9001f716:	f89d 30b0 	ldrb.w	r3, [sp, #176]	; 0xb0
9001f71a:	930c      	str	r3, [sp, #48]	; 0x30
9001f71c:	f407 7380 	and.w	r3, r7, #256	; 0x100
9001f720:	798f      	ldrb	r7, [r1, #6]
9001f722:	431f      	orrs	r7, r3
9001f724:	f000 8195 	beq.w	9001fa52 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
9001f728:	ea4f 1909 	mov.w	r9, r9, lsl #4
9001f72c:	f409 7380 	and.w	r3, r9, #256	; 0x100
9001f730:	f891 9007 	ldrb.w	r9, [r1, #7]
9001f734:	ea59 0903 	orrs.w	r9, r9, r3
9001f738:	f000 818b 	beq.w	9001fa52 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
9001f73c:	f991 3009 	ldrsb.w	r3, [r1, #9]
9001f740:	b29b      	uxth	r3, r3
9001f742:	2d00      	cmp	r5, #0
9001f744:	f000 812e 	beq.w	9001f9a4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2c8>
9001f748:	1aed      	subs	r5, r5, r3
9001f74a:	b2ad      	uxth	r5, r5
9001f74c:	042b      	lsls	r3, r5, #16
9001f74e:	d502      	bpl.n	9001f756 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x7a>
9001f750:	1b64      	subs	r4, r4, r5
9001f752:	2500      	movs	r5, #0
9001f754:	b224      	sxth	r4, r4
9001f756:	f9b2 1000 	ldrsh.w	r1, [r2]
9001f75a:	a814      	add	r0, sp, #80	; 0x50
9001f75c:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
9001f760:	428c      	cmp	r4, r1
9001f762:	b28b      	uxth	r3, r1
9001f764:	bfbf      	itttt	lt
9001f766:	18ed      	addlt	r5, r5, r3
9001f768:	1b2c      	sublt	r4, r5, r4
9001f76a:	b2a5      	uxthlt	r5, r4
9001f76c:	460c      	movlt	r4, r1
9001f76e:	8891      	ldrh	r1, [r2, #4]
9001f770:	440b      	add	r3, r1
9001f772:	4621      	mov	r1, r4
9001f774:	b21b      	sxth	r3, r3
9001f776:	930f      	str	r3, [sp, #60]	; 0x3c
9001f778:	88d3      	ldrh	r3, [r2, #6]
9001f77a:	8852      	ldrh	r2, [r2, #2]
9001f77c:	4413      	add	r3, r2
9001f77e:	9a09      	ldr	r2, [sp, #36]	; 0x24
9001f780:	b21b      	sxth	r3, r3
9001f782:	930d      	str	r3, [sp, #52]	; 0x34
9001f784:	4bbd      	ldr	r3, [pc, #756]	; (9001fa7c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a0>)
9001f786:	f893 b000 	ldrb.w	fp, [r3]
9001f78a:	f10b 3cff 	add.w	ip, fp, #4294967295
9001f78e:	f1dc 0300 	rsbs	r3, ip, #0
9001f792:	eb43 030c 	adc.w	r3, r3, ip
9001f796:	930e      	str	r3, [sp, #56]	; 0x38
9001f798:	4653      	mov	r3, sl
9001f79a:	f7f8 f9ed 	bl	90017b78 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>
9001f79e:	4621      	mov	r1, r4
9001f7a0:	f8ad 005c 	strh.w	r0, [sp, #92]	; 0x5c
9001f7a4:	4653      	mov	r3, sl
9001f7a6:	9a09      	ldr	r2, [sp, #36]	; 0x24
9001f7a8:	a814      	add	r0, sp, #80	; 0x50
9001f7aa:	f7f8 fa02 	bl	90017bb2 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>
9001f7ae:	a918      	add	r1, sp, #96	; 0x60
9001f7b0:	f821 0d02 	strh.w	r0, [r1, #-2]!
9001f7b4:	a817      	add	r0, sp, #92	; 0x5c
9001f7b6:	f7f8 fb23 	bl	90017e00 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>
9001f7ba:	f1ba 0f00 	cmp.w	sl, #0
9001f7be:	f040 80f4 	bne.w	9001f9aa <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2ce>
9001f7c2:	f1bb 0f01 	cmp.w	fp, #1
9001f7c6:	f040 80f8 	bne.w	9001f9ba <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2de>
9001f7ca:	9b10      	ldr	r3, [sp, #64]	; 0x40
9001f7cc:	2b00      	cmp	r3, #0
9001f7ce:	f040 8145 	bne.w	9001fa5c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x380>
9001f7d2:	b2ba      	uxth	r2, r7
9001f7d4:	b905      	cbnz	r5, 9001f7d8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xfc>
9001f7d6:	b16e      	cbz	r6, 9001f7f4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x118>
9001f7d8:	fb06 5302 	mla	r3, r6, r2, r5
9001f7dc:	9828      	ldr	r0, [sp, #160]	; 0xa0
9001f7de:	4631      	mov	r1, r6
9001f7e0:	fb08 f303 	mul.w	r3, r8, r3
9001f7e4:	f003 0607 	and.w	r6, r3, #7
9001f7e8:	eb00 03d3 	add.w	r3, r0, r3, lsr #3
9001f7ec:	9328      	str	r3, [sp, #160]	; 0xa0
9001f7ee:	eba9 0301 	sub.w	r3, r9, r1
9001f7f2:	930a      	str	r3, [sp, #40]	; 0x28
9001f7f4:	4651      	mov	r1, sl
9001f7f6:	980e      	ldr	r0, [sp, #56]	; 0x38
9001f7f8:	f7ff ff1c 	bl	9001f634 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE>
9001f7fc:	4681      	mov	r9, r0
9001f7fe:	980e      	ldr	r0, [sp, #56]	; 0x38
9001f800:	f7ff ff42 	bl	9001f688 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE>
9001f804:	9b0d      	ldr	r3, [sp, #52]	; 0x34
9001f806:	9909      	ldr	r1, [sp, #36]	; 0x24
9001f808:	4683      	mov	fp, r0
9001f80a:	eba3 0a01 	sub.w	sl, r3, r1
9001f80e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
9001f810:	459a      	cmp	sl, r3
9001f812:	bfa8      	it	ge
9001f814:	469a      	movge	sl, r3
9001f816:	f1ba 0f00 	cmp.w	sl, #0
9001f81a:	f340 811a 	ble.w	9001fa52 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
9001f81e:	1b64      	subs	r4, r4, r5
9001f820:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
9001f822:	1b1c      	subs	r4, r3, r4
9001f824:	42bc      	cmp	r4, r7
9001f826:	bfd4      	ite	le
9001f828:	ebc5 0504 	rsble	r5, r5, r4
9001f82c:	ebc5 0507 	rsbgt	r5, r5, r7
9001f830:	2d00      	cmp	r5, #0
9001f832:	f340 810e 	ble.w	9001fa52 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
9001f836:	1b52      	subs	r2, r2, r5
9001f838:	fb08 f302 	mul.w	r3, r8, r2
9001f83c:	930f      	str	r3, [sp, #60]	; 0x3c
9001f83e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
9001f840:	2b00      	cmp	r3, #0
9001f842:	f040 8116 	bne.w	9001fa72 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x396>
9001f846:	4b8e      	ldr	r3, [pc, #568]	; (9001fa80 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a4>)
9001f848:	6818      	ldr	r0, [r3, #0]
9001f84a:	6803      	ldr	r3, [r0, #0]
9001f84c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
9001f84e:	4798      	blx	r3
9001f850:	2301      	movs	r3, #1
9001f852:	4a8c      	ldr	r2, [pc, #560]	; (9001fa84 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a8>)
9001f854:	fa03 f308 	lsl.w	r3, r3, r8
9001f858:	8811      	ldrh	r1, [r2, #0]
9001f85a:	f9bd 205c 	ldrsh.w	r2, [sp, #92]	; 0x5c
9001f85e:	3b01      	subs	r3, #1
9001f860:	b2db      	uxtb	r3, r3
9001f862:	930e      	str	r3, [sp, #56]	; 0x38
9001f864:	f9bd 305e 	ldrsh.w	r3, [sp, #94]	; 0x5e
9001f868:	fb01 2303 	mla	r3, r1, r3, r2
9001f86c:	eb00 0343 	add.w	r3, r0, r3, lsl #1
9001f870:	930a      	str	r3, [sp, #40]	; 0x28
9001f872:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
9001f874:	f3c3 4307 	ubfx	r3, r3, #16, #8
9001f878:	9313      	str	r3, [sp, #76]	; 0x4c
9001f87a:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
9001f87c:	0a19      	lsrs	r1, r3, #8
9001f87e:	b2cb      	uxtb	r3, r1
9001f880:	9312      	str	r3, [sp, #72]	; 0x48
9001f882:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
9001f884:	b2db      	uxtb	r3, r3
9001f886:	9311      	str	r3, [sp, #68]	; 0x44
9001f888:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
9001f88a:	095a      	lsrs	r2, r3, #5
9001f88c:	4b7e      	ldr	r3, [pc, #504]	; (9001fa88 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ac>)
9001f88e:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
9001f892:	400b      	ands	r3, r1
9001f894:	4313      	orrs	r3, r2
9001f896:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
9001f898:	f3c2 02c4 	ubfx	r2, r2, #3, #5
9001f89c:	4313      	orrs	r3, r2
9001f89e:	b29b      	uxth	r3, r3
9001f8a0:	9310      	str	r3, [sp, #64]	; 0x40
9001f8a2:	9b28      	ldr	r3, [sp, #160]	; 0xa0
9001f8a4:	781a      	ldrb	r2, [r3, #0]
9001f8a6:	ea4f 0349 	mov.w	r3, r9, lsl #1
9001f8aa:	fb05 b919 	mls	r9, r5, r9, fp
9001f8ae:	4132      	asrs	r2, r6
9001f8b0:	fb03 fb05 	mul.w	fp, r3, r5
9001f8b4:	930d      	str	r3, [sp, #52]	; 0x34
9001f8b6:	b2d2      	uxtb	r2, r2
9001f8b8:	eb0b 0b49 	add.w	fp, fp, r9, lsl #1
9001f8bc:	f11a 3aff 	adds.w	sl, sl, #4294967295
9001f8c0:	f0c0 80f5 	bcc.w	9001faae <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3d2>
9001f8c4:	46ae      	mov	lr, r5
9001f8c6:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
9001f8ca:	f11e 3eff 	adds.w	lr, lr, #4294967295
9001f8ce:	f0c0 80dd 	bcc.w	9001fa8c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3b0>
9001f8d2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
9001f8d4:	4013      	ands	r3, r2
9001f8d6:	d055      	beq.n	9001f984 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2a8>
9001f8d8:	20ff      	movs	r0, #255	; 0xff
9001f8da:	990e      	ldr	r1, [sp, #56]	; 0x38
9001f8dc:	fb90 f1f1 	sdiv	r1, r0, r1
9001f8e0:	434b      	muls	r3, r1
9001f8e2:	2bfe      	cmp	r3, #254	; 0xfe
9001f8e4:	dd03      	ble.n	9001f8ee <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x212>
9001f8e6:	990c      	ldr	r1, [sp, #48]	; 0x30
9001f8e8:	4281      	cmp	r1, r0
9001f8ea:	f000 80c4 	beq.w	9001fa76 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39a>
9001f8ee:	990c      	ldr	r1, [sp, #48]	; 0x30
9001f8f0:	f8bc 4000 	ldrh.w	r4, [ip]
9001f8f4:	fb11 f303 	smulbb	r3, r1, r3
9001f8f8:	1220      	asrs	r0, r4, #8
9001f8fa:	b29b      	uxth	r3, r3
9001f8fc:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
9001f900:	1c59      	adds	r1, r3, #1
9001f902:	ea40 1050 	orr.w	r0, r0, r0, lsr #5
9001f906:	eb01 2313 	add.w	r3, r1, r3, lsr #8
9001f90a:	10e1      	asrs	r1, r4, #3
9001f90c:	f3c3 2307 	ubfx	r3, r3, #8, #8
9001f910:	00e4      	lsls	r4, r4, #3
9001f912:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
9001f916:	b29f      	uxth	r7, r3
9001f918:	43db      	mvns	r3, r3
9001f91a:	ea41 1191 	orr.w	r1, r1, r1, lsr #6
9001f91e:	b2db      	uxtb	r3, r3
9001f920:	b2e4      	uxtb	r4, r4
9001f922:	9309      	str	r3, [sp, #36]	; 0x24
9001f924:	9b13      	ldr	r3, [sp, #76]	; 0x4c
9001f926:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
9001f92a:	fb13 f907 	smulbb	r9, r3, r7
9001f92e:	9b09      	ldr	r3, [sp, #36]	; 0x24
9001f930:	fb00 9003 	mla	r0, r0, r3, r9
9001f934:	9b12      	ldr	r3, [sp, #72]	; 0x48
9001f936:	fb13 f907 	smulbb	r9, r3, r7
9001f93a:	9b09      	ldr	r3, [sp, #36]	; 0x24
9001f93c:	b280      	uxth	r0, r0
9001f93e:	fb01 9103 	mla	r1, r1, r3, r9
9001f942:	9b11      	ldr	r3, [sp, #68]	; 0x44
9001f944:	fb13 f707 	smulbb	r7, r3, r7
9001f948:	9b09      	ldr	r3, [sp, #36]	; 0x24
9001f94a:	b289      	uxth	r1, r1
9001f94c:	fb04 7403 	mla	r4, r4, r3, r7
9001f950:	1c43      	adds	r3, r0, #1
9001f952:	b2a4      	uxth	r4, r4
9001f954:	eb03 2010 	add.w	r0, r3, r0, lsr #8
9001f958:	f104 0901 	add.w	r9, r4, #1
9001f95c:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
9001f960:	eb09 2914 	add.w	r9, r9, r4, lsr #8
9001f964:	f3c9 29c4 	ubfx	r9, r9, #11, #5
9001f968:	ea49 0000 	orr.w	r0, r9, r0
9001f96c:	f101 0901 	add.w	r9, r1, #1
9001f970:	eb09 2911 	add.w	r9, r9, r1, lsr #8
9001f974:	ea4f 1959 	mov.w	r9, r9, lsr #5
9001f978:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
9001f97c:	ea40 0009 	orr.w	r0, r0, r9
9001f980:	f8ac 0000 	strh.w	r0, [ip]
9001f984:	4446      	add	r6, r8
9001f986:	b2b6      	uxth	r6, r6
9001f988:	2e07      	cmp	r6, #7
9001f98a:	bf89      	itett	hi
9001f98c:	9b28      	ldrhi	r3, [sp, #160]	; 0xa0
9001f98e:	fa42 f208 	asrls.w	r2, r2, r8
9001f992:	2600      	movhi	r6, #0
9001f994:	785a      	ldrbhi	r2, [r3, #1]
9001f996:	bf8a      	itet	hi
9001f998:	3301      	addhi	r3, #1
9001f99a:	b2d2      	uxtbls	r2, r2
9001f99c:	9328      	strhi	r3, [sp, #160]	; 0xa0
9001f99e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
9001f9a0:	449c      	add	ip, r3
9001f9a2:	e792      	b.n	9001f8ca <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1ee>
9001f9a4:	441c      	add	r4, r3
9001f9a6:	b224      	sxth	r4, r4
9001f9a8:	e6d5      	b.n	9001f756 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x7a>
9001f9aa:	f1ba 0f01 	cmp.w	sl, #1
9001f9ae:	f47f af0c 	bne.w	9001f7ca <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
9001f9b2:	f1bb 0f01 	cmp.w	fp, #1
9001f9b6:	f47f af08 	bne.w	9001f7ca <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
9001f9ba:	f8df b0c4 	ldr.w	fp, [pc, #196]	; 9001fa80 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a4>
9001f9be:	f8db 0000 	ldr.w	r0, [fp]
9001f9c2:	6803      	ldr	r3, [r0, #0]
9001f9c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
9001f9c6:	4798      	blx	r3
9001f9c8:	f410 7380 	ands.w	r3, r0, #256	; 0x100
9001f9cc:	465a      	mov	r2, fp
9001f9ce:	d006      	beq.n	9001f9de <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x302>
9001f9d0:	f1b8 0f04 	cmp.w	r8, #4
9001f9d4:	d140      	bne.n	9001fa58 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x37c>
9001f9d6:	9b10      	ldr	r3, [sp, #64]	; 0x40
9001f9d8:	3300      	adds	r3, #0
9001f9da:	bf18      	it	ne
9001f9dc:	2301      	movne	r3, #1
9001f9de:	0580      	lsls	r0, r0, #22
9001f9e0:	d56e      	bpl.n	9001fac0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3e4>
9001f9e2:	f1b8 0f08 	cmp.w	r8, #8
9001f9e6:	d16b      	bne.n	9001fac0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3e4>
9001f9e8:	2b00      	cmp	r3, #0
9001f9ea:	bf0c      	ite	eq
9001f9ec:	f44f 7100 	moveq.w	r1, #512	; 0x200
9001f9f0:	f44f 7180 	movne.w	r1, #256	; 0x100
9001f9f4:	2d00      	cmp	r5, #0
9001f9f6:	f47f aee8 	bne.w	9001f7ca <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
9001f9fa:	2e00      	cmp	r6, #0
9001f9fc:	f47f aee5 	bne.w	9001f7ca <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
9001fa00:	19e3      	adds	r3, r4, r7
9001fa02:	980f      	ldr	r0, [sp, #60]	; 0x3c
9001fa04:	4283      	cmp	r3, r0
9001fa06:	f73f aee0 	bgt.w	9001f7ca <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
9001fa0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
9001fa0c:	980d      	ldr	r0, [sp, #52]	; 0x34
9001fa0e:	444b      	add	r3, r9
9001fa10:	4283      	cmp	r3, r0
9001fa12:	f73f aeda 	bgt.w	9001f7ca <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
9001fa16:	b2bf      	uxth	r7, r7
9001fa18:	f1b8 0f08 	cmp.w	r8, #8
9001fa1c:	6810      	ldr	r0, [r2, #0]
9001fa1e:	f04f 0500 	mov.w	r5, #0
9001fa22:	bf18      	it	ne
9001fa24:	3701      	addne	r7, #1
9001fa26:	f8bd 305e 	ldrh.w	r3, [sp, #94]	; 0x5e
9001fa2a:	6804      	ldr	r4, [r0, #0]
9001fa2c:	bf18      	it	ne
9001fa2e:	f027 0701 	bicne.w	r7, r7, #1
9001fa32:	f8bd 205c 	ldrh.w	r2, [sp, #92]	; 0x5c
9001fa36:	e9cd 1505 	strd	r1, r5, [sp, #20]
9001fa3a:	990c      	ldr	r1, [sp, #48]	; 0x30
9001fa3c:	bf18      	it	ne
9001fa3e:	b2bf      	uxthne	r7, r7
9001fa40:	9104      	str	r1, [sp, #16]
9001fa42:	992a      	ldr	r1, [sp, #168]	; 0xa8
9001fa44:	e9cd 7900 	strd	r7, r9, [sp]
9001fa48:	e9cd 7102 	strd	r7, r1, [sp, #8]
9001fa4c:	9928      	ldr	r1, [sp, #160]	; 0xa0
9001fa4e:	6d64      	ldr	r4, [r4, #84]	; 0x54
9001fa50:	47a0      	blx	r4
9001fa52:	b019      	add	sp, #100	; 0x64
9001fa54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9001fa58:	2300      	movs	r3, #0
9001fa5a:	e7c0      	b.n	9001f9de <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x302>
9001fa5c:	2208      	movs	r2, #8
9001fa5e:	fb92 f3f8 	sdiv	r3, r2, r8
9001fa62:	1e5a      	subs	r2, r3, #1
9001fa64:	443a      	add	r2, r7
9001fa66:	fb92 f2f3 	sdiv	r2, r2, r3
9001fa6a:	fb12 f203 	smulbb	r2, r2, r3
9001fa6e:	b292      	uxth	r2, r2
9001fa70:	e6b0      	b.n	9001f7d4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf8>
9001fa72:	980b      	ldr	r0, [sp, #44]	; 0x2c
9001fa74:	e6ec      	b.n	9001f850 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x174>
9001fa76:	9810      	ldr	r0, [sp, #64]	; 0x40
9001fa78:	e782      	b.n	9001f980 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2a4>
9001fa7a:	bf00      	nop
9001fa7c:	240281e4 	.word	0x240281e4
9001fa80:	240281ec 	.word	0x240281ec
9001fa84:	240281e6 	.word	0x240281e6
9001fa88:	00fff800 	.word	0x00fff800
9001fa8c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
9001fa8e:	b153      	cbz	r3, 9001faa6 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ca>
9001fa90:	441e      	add	r6, r3
9001fa92:	9b28      	ldr	r3, [sp, #160]	; 0xa0
9001fa94:	b2b6      	uxth	r6, r6
9001fa96:	eb03 03d6 	add.w	r3, r3, r6, lsr #3
9001fa9a:	f006 0607 	and.w	r6, r6, #7
9001fa9e:	781a      	ldrb	r2, [r3, #0]
9001faa0:	9328      	str	r3, [sp, #160]	; 0xa0
9001faa2:	4132      	asrs	r2, r6
9001faa4:	b2d2      	uxtb	r2, r2
9001faa6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
9001faa8:	445b      	add	r3, fp
9001faaa:	930a      	str	r3, [sp, #40]	; 0x28
9001faac:	e706      	b.n	9001f8bc <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1e0>
9001faae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
9001fab0:	2b00      	cmp	r3, #0
9001fab2:	d1ce      	bne.n	9001fa52 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
9001fab4:	4b05      	ldr	r3, [pc, #20]	; (9001facc <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3f0>)
9001fab6:	6818      	ldr	r0, [r3, #0]
9001fab8:	6803      	ldr	r3, [r0, #0]
9001faba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9001fabc:	4798      	blx	r3
9001fabe:	e7c8      	b.n	9001fa52 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
9001fac0:	2b00      	cmp	r3, #0
9001fac2:	f43f ae82 	beq.w	9001f7ca <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
9001fac6:	f44f 7180 	mov.w	r1, #256	; 0x100
9001faca:	e793      	b.n	9001f9f4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x318>
9001facc:	240281ec 	.word	0x240281ec

9001fad0 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv>:
9001fad0:	b538      	push	{r3, r4, r5, lr}
9001fad2:	4c15      	ldr	r4, [pc, #84]	; (9001fb28 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x58>)
9001fad4:	4605      	mov	r5, r0
9001fad6:	7823      	ldrb	r3, [r4, #0]
9001fad8:	f3bf 8f5b 	dmb	ish
9001fadc:	07da      	lsls	r2, r3, #31
9001fade:	d40b      	bmi.n	9001faf8 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x28>
9001fae0:	4620      	mov	r0, r4
9001fae2:	f007 fd8a 	bl	900275fa <__cxa_guard_acquire>
9001fae6:	b138      	cbz	r0, 9001faf8 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x28>
9001fae8:	4620      	mov	r0, r4
9001faea:	f007 fd92 	bl	90027612 <__cxa_guard_release>
9001faee:	4a0f      	ldr	r2, [pc, #60]	; (9001fb2c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x5c>)
9001faf0:	490f      	ldr	r1, [pc, #60]	; (9001fb30 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x60>)
9001faf2:	4810      	ldr	r0, [pc, #64]	; (9001fb34 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x64>)
9001faf4:	f007 fd7a 	bl	900275ec <__aeabi_atexit>
9001faf8:	4c0f      	ldr	r4, [pc, #60]	; (9001fb38 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x68>)
9001fafa:	7823      	ldrb	r3, [r4, #0]
9001fafc:	f3bf 8f5b 	dmb	ish
9001fb00:	07db      	lsls	r3, r3, #31
9001fb02:	d40b      	bmi.n	9001fb1c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x4c>
9001fb04:	4620      	mov	r0, r4
9001fb06:	f007 fd78 	bl	900275fa <__cxa_guard_acquire>
9001fb0a:	b138      	cbz	r0, 9001fb1c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x4c>
9001fb0c:	4620      	mov	r0, r4
9001fb0e:	f007 fd80 	bl	90027612 <__cxa_guard_release>
9001fb12:	4a06      	ldr	r2, [pc, #24]	; (9001fb2c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x5c>)
9001fb14:	4909      	ldr	r1, [pc, #36]	; (9001fb3c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x6c>)
9001fb16:	480a      	ldr	r0, [pc, #40]	; (9001fb40 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x70>)
9001fb18:	f007 fd68 	bl	900275ec <__aeabi_atexit>
9001fb1c:	4b05      	ldr	r3, [pc, #20]	; (9001fb34 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x64>)
9001fb1e:	612b      	str	r3, [r5, #16]
9001fb20:	4b07      	ldr	r3, [pc, #28]	; (9001fb40 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x70>)
9001fb22:	616b      	str	r3, [r5, #20]
9001fb24:	bd38      	pop	{r3, r4, r5, pc}
9001fb26:	bf00      	nop
9001fb28:	240282c0 	.word	0x240282c0
9001fb2c:	24000000 	.word	0x24000000
9001fb30:	9001dcdd 	.word	0x9001dcdd
9001fb34:	240000ac 	.word	0x240000ac
9001fb38:	240282c4 	.word	0x240282c4
9001fb3c:	9001dcdb 	.word	0x9001dcdb
9001fb40:	240000b0 	.word	0x240000b0

9001fb44 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv>:
9001fb44:	b538      	push	{r3, r4, r5, lr}
9001fb46:	4c15      	ldr	r4, [pc, #84]	; (9001fb9c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x58>)
9001fb48:	4605      	mov	r5, r0
9001fb4a:	7823      	ldrb	r3, [r4, #0]
9001fb4c:	f3bf 8f5b 	dmb	ish
9001fb50:	07da      	lsls	r2, r3, #31
9001fb52:	d40b      	bmi.n	9001fb6c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x28>
9001fb54:	4620      	mov	r0, r4
9001fb56:	f007 fd50 	bl	900275fa <__cxa_guard_acquire>
9001fb5a:	b138      	cbz	r0, 9001fb6c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x28>
9001fb5c:	4620      	mov	r0, r4
9001fb5e:	f007 fd58 	bl	90027612 <__cxa_guard_release>
9001fb62:	4a0f      	ldr	r2, [pc, #60]	; (9001fba0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x5c>)
9001fb64:	490f      	ldr	r1, [pc, #60]	; (9001fba4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x60>)
9001fb66:	4810      	ldr	r0, [pc, #64]	; (9001fba8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x64>)
9001fb68:	f007 fd40 	bl	900275ec <__aeabi_atexit>
9001fb6c:	4c0f      	ldr	r4, [pc, #60]	; (9001fbac <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x68>)
9001fb6e:	7823      	ldrb	r3, [r4, #0]
9001fb70:	f3bf 8f5b 	dmb	ish
9001fb74:	07db      	lsls	r3, r3, #31
9001fb76:	d40b      	bmi.n	9001fb90 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x4c>
9001fb78:	4620      	mov	r0, r4
9001fb7a:	f007 fd3e 	bl	900275fa <__cxa_guard_acquire>
9001fb7e:	b138      	cbz	r0, 9001fb90 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x4c>
9001fb80:	4620      	mov	r0, r4
9001fb82:	f007 fd46 	bl	90027612 <__cxa_guard_release>
9001fb86:	4a06      	ldr	r2, [pc, #24]	; (9001fba0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x5c>)
9001fb88:	4909      	ldr	r1, [pc, #36]	; (9001fbb0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x6c>)
9001fb8a:	480a      	ldr	r0, [pc, #40]	; (9001fbb4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x70>)
9001fb8c:	f007 fd2e 	bl	900275ec <__aeabi_atexit>
9001fb90:	4b05      	ldr	r3, [pc, #20]	; (9001fba8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x64>)
9001fb92:	60ab      	str	r3, [r5, #8]
9001fb94:	4b07      	ldr	r3, [pc, #28]	; (9001fbb4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x70>)
9001fb96:	60eb      	str	r3, [r5, #12]
9001fb98:	bd38      	pop	{r3, r4, r5, pc}
9001fb9a:	bf00      	nop
9001fb9c:	24028298 	.word	0x24028298
9001fba0:	24000000 	.word	0x24000000
9001fba4:	9001dce1 	.word	0x9001dce1
9001fba8:	24000084 	.word	0x24000084
9001fbac:	2402829c 	.word	0x2402829c
9001fbb0:	9001dcdf 	.word	0x9001dcdf
9001fbb4:	24000088 	.word	0x24000088

9001fbb8 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB565Ev>:
9001fbb8:	b510      	push	{r4, lr}
9001fbba:	4604      	mov	r4, r0
9001fbbc:	f7ff ff88 	bl	9001fad0 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv>
9001fbc0:	4620      	mov	r0, r4
9001fbc2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
9001fbc6:	f7ff bfbd 	b.w	9001fb44 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv>
	...

9001fbcc <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>:
9001fbcc:	b538      	push	{r3, r4, r5, lr}
9001fbce:	4c15      	ldr	r4, [pc, #84]	; (9001fc24 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x58>)
9001fbd0:	4605      	mov	r5, r0
9001fbd2:	7823      	ldrb	r3, [r4, #0]
9001fbd4:	f3bf 8f5b 	dmb	ish
9001fbd8:	07da      	lsls	r2, r3, #31
9001fbda:	d40b      	bmi.n	9001fbf4 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
9001fbdc:	4620      	mov	r0, r4
9001fbde:	f007 fd0c 	bl	900275fa <__cxa_guard_acquire>
9001fbe2:	b138      	cbz	r0, 9001fbf4 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
9001fbe4:	4620      	mov	r0, r4
9001fbe6:	f007 fd14 	bl	90027612 <__cxa_guard_release>
9001fbea:	4a0f      	ldr	r2, [pc, #60]	; (9001fc28 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
9001fbec:	490f      	ldr	r1, [pc, #60]	; (9001fc2c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x60>)
9001fbee:	4810      	ldr	r0, [pc, #64]	; (9001fc30 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
9001fbf0:	f007 fcfc 	bl	900275ec <__aeabi_atexit>
9001fbf4:	4c0f      	ldr	r4, [pc, #60]	; (9001fc34 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x68>)
9001fbf6:	7823      	ldrb	r3, [r4, #0]
9001fbf8:	f3bf 8f5b 	dmb	ish
9001fbfc:	07db      	lsls	r3, r3, #31
9001fbfe:	d40b      	bmi.n	9001fc18 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
9001fc00:	4620      	mov	r0, r4
9001fc02:	f007 fcfa 	bl	900275fa <__cxa_guard_acquire>
9001fc06:	b138      	cbz	r0, 9001fc18 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
9001fc08:	4620      	mov	r0, r4
9001fc0a:	f007 fd02 	bl	90027612 <__cxa_guard_release>
9001fc0e:	4a06      	ldr	r2, [pc, #24]	; (9001fc28 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
9001fc10:	4909      	ldr	r1, [pc, #36]	; (9001fc38 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x6c>)
9001fc12:	480a      	ldr	r0, [pc, #40]	; (9001fc3c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
9001fc14:	f007 fcea 	bl	900275ec <__aeabi_atexit>
9001fc18:	4b05      	ldr	r3, [pc, #20]	; (9001fc30 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
9001fc1a:	622b      	str	r3, [r5, #32]
9001fc1c:	4b07      	ldr	r3, [pc, #28]	; (9001fc3c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
9001fc1e:	626b      	str	r3, [r5, #36]	; 0x24
9001fc20:	bd38      	pop	{r3, r4, r5, pc}
9001fc22:	bf00      	nop
9001fc24:	240282c8 	.word	0x240282c8
9001fc28:	24000000 	.word	0x24000000
9001fc2c:	9001dcd5 	.word	0x9001dcd5
9001fc30:	240000b4 	.word	0x240000b4
9001fc34:	240282cc 	.word	0x240282cc
9001fc38:	9001dcd3 	.word	0x9001dcd3
9001fc3c:	240000b8 	.word	0x240000b8

9001fc40 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>:
9001fc40:	b538      	push	{r3, r4, r5, lr}
9001fc42:	4c15      	ldr	r4, [pc, #84]	; (9001fc98 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x58>)
9001fc44:	4605      	mov	r5, r0
9001fc46:	7823      	ldrb	r3, [r4, #0]
9001fc48:	f3bf 8f5b 	dmb	ish
9001fc4c:	07da      	lsls	r2, r3, #31
9001fc4e:	d40b      	bmi.n	9001fc68 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
9001fc50:	4620      	mov	r0, r4
9001fc52:	f007 fcd2 	bl	900275fa <__cxa_guard_acquire>
9001fc56:	b138      	cbz	r0, 9001fc68 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
9001fc58:	4620      	mov	r0, r4
9001fc5a:	f007 fcda 	bl	90027612 <__cxa_guard_release>
9001fc5e:	4a0f      	ldr	r2, [pc, #60]	; (9001fc9c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
9001fc60:	490f      	ldr	r1, [pc, #60]	; (9001fca0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x60>)
9001fc62:	4810      	ldr	r0, [pc, #64]	; (9001fca4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
9001fc64:	f007 fcc2 	bl	900275ec <__aeabi_atexit>
9001fc68:	4c0f      	ldr	r4, [pc, #60]	; (9001fca8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x68>)
9001fc6a:	7823      	ldrb	r3, [r4, #0]
9001fc6c:	f3bf 8f5b 	dmb	ish
9001fc70:	07db      	lsls	r3, r3, #31
9001fc72:	d40b      	bmi.n	9001fc8c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
9001fc74:	4620      	mov	r0, r4
9001fc76:	f007 fcc0 	bl	900275fa <__cxa_guard_acquire>
9001fc7a:	b138      	cbz	r0, 9001fc8c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
9001fc7c:	4620      	mov	r0, r4
9001fc7e:	f007 fcc8 	bl	90027612 <__cxa_guard_release>
9001fc82:	4a06      	ldr	r2, [pc, #24]	; (9001fc9c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
9001fc84:	4909      	ldr	r1, [pc, #36]	; (9001fcac <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x6c>)
9001fc86:	480a      	ldr	r0, [pc, #40]	; (9001fcb0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
9001fc88:	f007 fcb0 	bl	900275ec <__aeabi_atexit>
9001fc8c:	4b05      	ldr	r3, [pc, #20]	; (9001fca4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
9001fc8e:	61ab      	str	r3, [r5, #24]
9001fc90:	4b07      	ldr	r3, [pc, #28]	; (9001fcb0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
9001fc92:	61eb      	str	r3, [r5, #28]
9001fc94:	bd38      	pop	{r3, r4, r5, pc}
9001fc96:	bf00      	nop
9001fc98:	240282a0 	.word	0x240282a0
9001fc9c:	24000000 	.word	0x24000000
9001fca0:	9001dcd9 	.word	0x9001dcd9
9001fca4:	2400008c 	.word	0x2400008c
9001fca8:	240282a4 	.word	0x240282a4
9001fcac:	9001dcd7 	.word	0x9001dcd7
9001fcb0:	24000090 	.word	0x24000090

9001fcb4 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB888Ev>:
9001fcb4:	b510      	push	{r4, lr}
9001fcb6:	4604      	mov	r4, r0
9001fcb8:	f7ff ff88 	bl	9001fbcc <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>
9001fcbc:	4620      	mov	r0, r4
9001fcbe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
9001fcc2:	f7ff bfbd 	b.w	9001fc40 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>
	...

9001fcc8 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>:
9001fcc8:	b538      	push	{r3, r4, r5, lr}
9001fcca:	4c15      	ldr	r4, [pc, #84]	; (9001fd20 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x58>)
9001fccc:	4605      	mov	r5, r0
9001fcce:	7823      	ldrb	r3, [r4, #0]
9001fcd0:	f3bf 8f5b 	dmb	ish
9001fcd4:	07da      	lsls	r2, r3, #31
9001fcd6:	d40b      	bmi.n	9001fcf0 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
9001fcd8:	4620      	mov	r0, r4
9001fcda:	f007 fc8e 	bl	900275fa <__cxa_guard_acquire>
9001fcde:	b138      	cbz	r0, 9001fcf0 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
9001fce0:	4620      	mov	r0, r4
9001fce2:	f007 fc96 	bl	90027612 <__cxa_guard_release>
9001fce6:	4a0f      	ldr	r2, [pc, #60]	; (9001fd24 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
9001fce8:	490f      	ldr	r1, [pc, #60]	; (9001fd28 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x60>)
9001fcea:	4810      	ldr	r0, [pc, #64]	; (9001fd2c <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
9001fcec:	f007 fc7e 	bl	900275ec <__aeabi_atexit>
9001fcf0:	4c0f      	ldr	r4, [pc, #60]	; (9001fd30 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x68>)
9001fcf2:	7823      	ldrb	r3, [r4, #0]
9001fcf4:	f3bf 8f5b 	dmb	ish
9001fcf8:	07db      	lsls	r3, r3, #31
9001fcfa:	d40b      	bmi.n	9001fd14 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
9001fcfc:	4620      	mov	r0, r4
9001fcfe:	f007 fc7c 	bl	900275fa <__cxa_guard_acquire>
9001fd02:	b138      	cbz	r0, 9001fd14 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
9001fd04:	4620      	mov	r0, r4
9001fd06:	f007 fc84 	bl	90027612 <__cxa_guard_release>
9001fd0a:	4a06      	ldr	r2, [pc, #24]	; (9001fd24 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
9001fd0c:	4909      	ldr	r1, [pc, #36]	; (9001fd34 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x6c>)
9001fd0e:	480a      	ldr	r0, [pc, #40]	; (9001fd38 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
9001fd10:	f007 fc6c 	bl	900275ec <__aeabi_atexit>
9001fd14:	4b05      	ldr	r3, [pc, #20]	; (9001fd2c <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
9001fd16:	632b      	str	r3, [r5, #48]	; 0x30
9001fd18:	4b07      	ldr	r3, [pc, #28]	; (9001fd38 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
9001fd1a:	636b      	str	r3, [r5, #52]	; 0x34
9001fd1c:	bd38      	pop	{r3, r4, r5, pc}
9001fd1e:	bf00      	nop
9001fd20:	240282d8 	.word	0x240282d8
9001fd24:	24000000 	.word	0x24000000
9001fd28:	9001dccd 	.word	0x9001dccd
9001fd2c:	240000c4 	.word	0x240000c4
9001fd30:	240282dc 	.word	0x240282dc
9001fd34:	9001dccb 	.word	0x9001dccb
9001fd38:	240000c8 	.word	0x240000c8

9001fd3c <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>:
9001fd3c:	b538      	push	{r3, r4, r5, lr}
9001fd3e:	4c15      	ldr	r4, [pc, #84]	; (9001fd94 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x58>)
9001fd40:	4605      	mov	r5, r0
9001fd42:	7823      	ldrb	r3, [r4, #0]
9001fd44:	f3bf 8f5b 	dmb	ish
9001fd48:	07da      	lsls	r2, r3, #31
9001fd4a:	d40b      	bmi.n	9001fd64 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
9001fd4c:	4620      	mov	r0, r4
9001fd4e:	f007 fc54 	bl	900275fa <__cxa_guard_acquire>
9001fd52:	b138      	cbz	r0, 9001fd64 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
9001fd54:	4620      	mov	r0, r4
9001fd56:	f007 fc5c 	bl	90027612 <__cxa_guard_release>
9001fd5a:	4a0f      	ldr	r2, [pc, #60]	; (9001fd98 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
9001fd5c:	490f      	ldr	r1, [pc, #60]	; (9001fd9c <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x60>)
9001fd5e:	4810      	ldr	r0, [pc, #64]	; (9001fda0 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
9001fd60:	f007 fc44 	bl	900275ec <__aeabi_atexit>
9001fd64:	4c0f      	ldr	r4, [pc, #60]	; (9001fda4 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x68>)
9001fd66:	7823      	ldrb	r3, [r4, #0]
9001fd68:	f3bf 8f5b 	dmb	ish
9001fd6c:	07db      	lsls	r3, r3, #31
9001fd6e:	d40b      	bmi.n	9001fd88 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
9001fd70:	4620      	mov	r0, r4
9001fd72:	f007 fc42 	bl	900275fa <__cxa_guard_acquire>
9001fd76:	b138      	cbz	r0, 9001fd88 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
9001fd78:	4620      	mov	r0, r4
9001fd7a:	f007 fc4a 	bl	90027612 <__cxa_guard_release>
9001fd7e:	4a06      	ldr	r2, [pc, #24]	; (9001fd98 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
9001fd80:	4909      	ldr	r1, [pc, #36]	; (9001fda8 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x6c>)
9001fd82:	480a      	ldr	r0, [pc, #40]	; (9001fdac <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
9001fd84:	f007 fc32 	bl	900275ec <__aeabi_atexit>
9001fd88:	4b05      	ldr	r3, [pc, #20]	; (9001fda0 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
9001fd8a:	62ab      	str	r3, [r5, #40]	; 0x28
9001fd8c:	4b07      	ldr	r3, [pc, #28]	; (9001fdac <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
9001fd8e:	62eb      	str	r3, [r5, #44]	; 0x2c
9001fd90:	bd38      	pop	{r3, r4, r5, pc}
9001fd92:	bf00      	nop
9001fd94:	240282a8 	.word	0x240282a8
9001fd98:	24000000 	.word	0x24000000
9001fd9c:	9001dcd1 	.word	0x9001dcd1
9001fda0:	24000094 	.word	0x24000094
9001fda4:	240282ac 	.word	0x240282ac
9001fda8:	9001dccf 	.word	0x9001dccf
9001fdac:	24000098 	.word	0x24000098

9001fdb0 <_ZN8touchgfx8LCD16bpp30enableTextureMapperL8_ARGB8888Ev>:
9001fdb0:	b510      	push	{r4, lr}
9001fdb2:	4604      	mov	r4, r0
9001fdb4:	f7ff ff88 	bl	9001fcc8 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>
9001fdb8:	4620      	mov	r0, r4
9001fdba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
9001fdbe:	f7ff bfbd 	b.w	9001fd3c <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>
	...

9001fdc4 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv>:
9001fdc4:	b538      	push	{r3, r4, r5, lr}
9001fdc6:	4c15      	ldr	r4, [pc, #84]	; (9001fe1c <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x58>)
9001fdc8:	4605      	mov	r5, r0
9001fdca:	7823      	ldrb	r3, [r4, #0]
9001fdcc:	f3bf 8f5b 	dmb	ish
9001fdd0:	07da      	lsls	r2, r3, #31
9001fdd2:	d40b      	bmi.n	9001fdec <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x28>
9001fdd4:	4620      	mov	r0, r4
9001fdd6:	f007 fc10 	bl	900275fa <__cxa_guard_acquire>
9001fdda:	b138      	cbz	r0, 9001fdec <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x28>
9001fddc:	4620      	mov	r0, r4
9001fdde:	f007 fc18 	bl	90027612 <__cxa_guard_release>
9001fde2:	4a0f      	ldr	r2, [pc, #60]	; (9001fe20 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x5c>)
9001fde4:	490f      	ldr	r1, [pc, #60]	; (9001fe24 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x60>)
9001fde6:	4810      	ldr	r0, [pc, #64]	; (9001fe28 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x64>)
9001fde8:	f007 fc00 	bl	900275ec <__aeabi_atexit>
9001fdec:	4c0f      	ldr	r4, [pc, #60]	; (9001fe2c <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x68>)
9001fdee:	7823      	ldrb	r3, [r4, #0]
9001fdf0:	f3bf 8f5b 	dmb	ish
9001fdf4:	07db      	lsls	r3, r3, #31
9001fdf6:	d40b      	bmi.n	9001fe10 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x4c>
9001fdf8:	4620      	mov	r0, r4
9001fdfa:	f007 fbfe 	bl	900275fa <__cxa_guard_acquire>
9001fdfe:	b138      	cbz	r0, 9001fe10 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x4c>
9001fe00:	4620      	mov	r0, r4
9001fe02:	f007 fc06 	bl	90027612 <__cxa_guard_release>
9001fe06:	4a06      	ldr	r2, [pc, #24]	; (9001fe20 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x5c>)
9001fe08:	4909      	ldr	r1, [pc, #36]	; (9001fe30 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x6c>)
9001fe0a:	480a      	ldr	r0, [pc, #40]	; (9001fe34 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x70>)
9001fe0c:	f007 fbee 	bl	900275ec <__aeabi_atexit>
9001fe10:	4b05      	ldr	r3, [pc, #20]	; (9001fe28 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x64>)
9001fe12:	652b      	str	r3, [r5, #80]	; 0x50
9001fe14:	4b07      	ldr	r3, [pc, #28]	; (9001fe34 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x70>)
9001fe16:	656b      	str	r3, [r5, #84]	; 0x54
9001fe18:	bd38      	pop	{r3, r4, r5, pc}
9001fe1a:	bf00      	nop
9001fe1c:	240282e0 	.word	0x240282e0
9001fe20:	24000000 	.word	0x24000000
9001fe24:	9001dcbd 	.word	0x9001dcbd
9001fe28:	240000cc 	.word	0x240000cc
9001fe2c:	240282e4 	.word	0x240282e4
9001fe30:	9001dcbb 	.word	0x9001dcbb
9001fe34:	240000d0 	.word	0x240000d0

9001fe38 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv>:
9001fe38:	b538      	push	{r3, r4, r5, lr}
9001fe3a:	4c15      	ldr	r4, [pc, #84]	; (9001fe90 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x58>)
9001fe3c:	4605      	mov	r5, r0
9001fe3e:	7823      	ldrb	r3, [r4, #0]
9001fe40:	f3bf 8f5b 	dmb	ish
9001fe44:	07da      	lsls	r2, r3, #31
9001fe46:	d40b      	bmi.n	9001fe60 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x28>
9001fe48:	4620      	mov	r0, r4
9001fe4a:	f007 fbd6 	bl	900275fa <__cxa_guard_acquire>
9001fe4e:	b138      	cbz	r0, 9001fe60 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x28>
9001fe50:	4620      	mov	r0, r4
9001fe52:	f007 fbde 	bl	90027612 <__cxa_guard_release>
9001fe56:	4a0f      	ldr	r2, [pc, #60]	; (9001fe94 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x5c>)
9001fe58:	490f      	ldr	r1, [pc, #60]	; (9001fe98 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x60>)
9001fe5a:	4810      	ldr	r0, [pc, #64]	; (9001fe9c <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x64>)
9001fe5c:	f007 fbc6 	bl	900275ec <__aeabi_atexit>
9001fe60:	4c0f      	ldr	r4, [pc, #60]	; (9001fea0 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x68>)
9001fe62:	7823      	ldrb	r3, [r4, #0]
9001fe64:	f3bf 8f5b 	dmb	ish
9001fe68:	07db      	lsls	r3, r3, #31
9001fe6a:	d40b      	bmi.n	9001fe84 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x4c>
9001fe6c:	4620      	mov	r0, r4
9001fe6e:	f007 fbc4 	bl	900275fa <__cxa_guard_acquire>
9001fe72:	b138      	cbz	r0, 9001fe84 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x4c>
9001fe74:	4620      	mov	r0, r4
9001fe76:	f007 fbcc 	bl	90027612 <__cxa_guard_release>
9001fe7a:	4a06      	ldr	r2, [pc, #24]	; (9001fe94 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x5c>)
9001fe7c:	4909      	ldr	r1, [pc, #36]	; (9001fea4 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x6c>)
9001fe7e:	480a      	ldr	r0, [pc, #40]	; (9001fea8 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x70>)
9001fe80:	f007 fbb4 	bl	900275ec <__aeabi_atexit>
9001fe84:	4b05      	ldr	r3, [pc, #20]	; (9001fe9c <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x64>)
9001fe86:	64ab      	str	r3, [r5, #72]	; 0x48
9001fe88:	4b07      	ldr	r3, [pc, #28]	; (9001fea8 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x70>)
9001fe8a:	64eb      	str	r3, [r5, #76]	; 0x4c
9001fe8c:	bd38      	pop	{r3, r4, r5, pc}
9001fe8e:	bf00      	nop
9001fe90:	240282e8 	.word	0x240282e8
9001fe94:	24000000 	.word	0x24000000
9001fe98:	9001dcc1 	.word	0x9001dcc1
9001fe9c:	240000d4 	.word	0x240000d4
9001fea0:	240282ec 	.word	0x240282ec
9001fea4:	9001dcbf 	.word	0x9001dcbf
9001fea8:	240000d8 	.word	0x240000d8

9001feac <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv>:
9001feac:	b538      	push	{r3, r4, r5, lr}
9001feae:	4c15      	ldr	r4, [pc, #84]	; (9001ff04 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x58>)
9001feb0:	4605      	mov	r5, r0
9001feb2:	7823      	ldrb	r3, [r4, #0]
9001feb4:	f3bf 8f5b 	dmb	ish
9001feb8:	07da      	lsls	r2, r3, #31
9001feba:	d40b      	bmi.n	9001fed4 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x28>
9001febc:	4620      	mov	r0, r4
9001febe:	f007 fb9c 	bl	900275fa <__cxa_guard_acquire>
9001fec2:	b138      	cbz	r0, 9001fed4 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x28>
9001fec4:	4620      	mov	r0, r4
9001fec6:	f007 fba4 	bl	90027612 <__cxa_guard_release>
9001feca:	4a0f      	ldr	r2, [pc, #60]	; (9001ff08 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x5c>)
9001fecc:	490f      	ldr	r1, [pc, #60]	; (9001ff0c <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x60>)
9001fece:	4810      	ldr	r0, [pc, #64]	; (9001ff10 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x64>)
9001fed0:	f007 fb8c 	bl	900275ec <__aeabi_atexit>
9001fed4:	4c0f      	ldr	r4, [pc, #60]	; (9001ff14 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x68>)
9001fed6:	7823      	ldrb	r3, [r4, #0]
9001fed8:	f3bf 8f5b 	dmb	ish
9001fedc:	07db      	lsls	r3, r3, #31
9001fede:	d40b      	bmi.n	9001fef8 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x4c>
9001fee0:	4620      	mov	r0, r4
9001fee2:	f007 fb8a 	bl	900275fa <__cxa_guard_acquire>
9001fee6:	b138      	cbz	r0, 9001fef8 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x4c>
9001fee8:	4620      	mov	r0, r4
9001feea:	f007 fb92 	bl	90027612 <__cxa_guard_release>
9001feee:	4a06      	ldr	r2, [pc, #24]	; (9001ff08 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x5c>)
9001fef0:	4909      	ldr	r1, [pc, #36]	; (9001ff18 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x6c>)
9001fef2:	480a      	ldr	r0, [pc, #40]	; (9001ff1c <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x70>)
9001fef4:	f007 fb7a 	bl	900275ec <__aeabi_atexit>
9001fef8:	4b05      	ldr	r3, [pc, #20]	; (9001ff10 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x64>)
9001fefa:	642b      	str	r3, [r5, #64]	; 0x40
9001fefc:	4b07      	ldr	r3, [pc, #28]	; (9001ff1c <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x70>)
9001fefe:	646b      	str	r3, [r5, #68]	; 0x44
9001ff00:	bd38      	pop	{r3, r4, r5, pc}
9001ff02:	bf00      	nop
9001ff04:	240282b0 	.word	0x240282b0
9001ff08:	24000000 	.word	0x24000000
9001ff0c:	9001dcc5 	.word	0x9001dcc5
9001ff10:	2400009c 	.word	0x2400009c
9001ff14:	240282b4 	.word	0x240282b4
9001ff18:	9001dcc3 	.word	0x9001dcc3
9001ff1c:	240000a0 	.word	0x240000a0

9001ff20 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv>:
9001ff20:	b538      	push	{r3, r4, r5, lr}
9001ff22:	4c15      	ldr	r4, [pc, #84]	; (9001ff78 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x58>)
9001ff24:	4605      	mov	r5, r0
9001ff26:	7823      	ldrb	r3, [r4, #0]
9001ff28:	f3bf 8f5b 	dmb	ish
9001ff2c:	07da      	lsls	r2, r3, #31
9001ff2e:	d40b      	bmi.n	9001ff48 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x28>
9001ff30:	4620      	mov	r0, r4
9001ff32:	f007 fb62 	bl	900275fa <__cxa_guard_acquire>
9001ff36:	b138      	cbz	r0, 9001ff48 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x28>
9001ff38:	4620      	mov	r0, r4
9001ff3a:	f007 fb6a 	bl	90027612 <__cxa_guard_release>
9001ff3e:	4a0f      	ldr	r2, [pc, #60]	; (9001ff7c <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x5c>)
9001ff40:	490f      	ldr	r1, [pc, #60]	; (9001ff80 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x60>)
9001ff42:	4810      	ldr	r0, [pc, #64]	; (9001ff84 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x64>)
9001ff44:	f007 fb52 	bl	900275ec <__aeabi_atexit>
9001ff48:	4c0f      	ldr	r4, [pc, #60]	; (9001ff88 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x68>)
9001ff4a:	7823      	ldrb	r3, [r4, #0]
9001ff4c:	f3bf 8f5b 	dmb	ish
9001ff50:	07db      	lsls	r3, r3, #31
9001ff52:	d40b      	bmi.n	9001ff6c <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x4c>
9001ff54:	4620      	mov	r0, r4
9001ff56:	f007 fb50 	bl	900275fa <__cxa_guard_acquire>
9001ff5a:	b138      	cbz	r0, 9001ff6c <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x4c>
9001ff5c:	4620      	mov	r0, r4
9001ff5e:	f007 fb58 	bl	90027612 <__cxa_guard_release>
9001ff62:	4a06      	ldr	r2, [pc, #24]	; (9001ff7c <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x5c>)
9001ff64:	4909      	ldr	r1, [pc, #36]	; (9001ff8c <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x6c>)
9001ff66:	480a      	ldr	r0, [pc, #40]	; (9001ff90 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x70>)
9001ff68:	f007 fb40 	bl	900275ec <__aeabi_atexit>
9001ff6c:	4b05      	ldr	r3, [pc, #20]	; (9001ff84 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x64>)
9001ff6e:	63ab      	str	r3, [r5, #56]	; 0x38
9001ff70:	4b07      	ldr	r3, [pc, #28]	; (9001ff90 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x70>)
9001ff72:	63eb      	str	r3, [r5, #60]	; 0x3c
9001ff74:	bd38      	pop	{r3, r4, r5, pc}
9001ff76:	bf00      	nop
9001ff78:	240282d0 	.word	0x240282d0
9001ff7c:	24000000 	.word	0x24000000
9001ff80:	9001dcc9 	.word	0x9001dcc9
9001ff84:	240000bc 	.word	0x240000bc
9001ff88:	240282d4 	.word	0x240282d4
9001ff8c:	9001dcc7 	.word	0x9001dcc7
9001ff90:	240000c0 	.word	0x240000c0

9001ff94 <_ZN8touchgfx8LCD16bpp25enableTextureMapperRGB565Ev>:
9001ff94:	b510      	push	{r4, lr}
9001ff96:	4604      	mov	r4, r0
9001ff98:	f7ff ff14 	bl	9001fdc4 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv>
9001ff9c:	4620      	mov	r0, r4
9001ff9e:	f7ff ff85 	bl	9001feac <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv>
9001ffa2:	4620      	mov	r0, r4
9001ffa4:	f7ff ff48 	bl	9001fe38 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv>
9001ffa8:	4620      	mov	r0, r4
9001ffaa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
9001ffae:	f7ff bfb7 	b.w	9001ff20 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv>
	...

9001ffb4 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>:
9001ffb4:	b538      	push	{r3, r4, r5, lr}
9001ffb6:	4c15      	ldr	r4, [pc, #84]	; (9002000c <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x58>)
9001ffb8:	4605      	mov	r5, r0
9001ffba:	7823      	ldrb	r3, [r4, #0]
9001ffbc:	f3bf 8f5b 	dmb	ish
9001ffc0:	07da      	lsls	r2, r3, #31
9001ffc2:	d40b      	bmi.n	9001ffdc <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
9001ffc4:	4620      	mov	r0, r4
9001ffc6:	f007 fb18 	bl	900275fa <__cxa_guard_acquire>
9001ffca:	b138      	cbz	r0, 9001ffdc <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
9001ffcc:	4620      	mov	r0, r4
9001ffce:	f007 fb20 	bl	90027612 <__cxa_guard_release>
9001ffd2:	4a0f      	ldr	r2, [pc, #60]	; (90020010 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
9001ffd4:	490f      	ldr	r1, [pc, #60]	; (90020014 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x60>)
9001ffd6:	4810      	ldr	r0, [pc, #64]	; (90020018 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
9001ffd8:	f007 fb08 	bl	900275ec <__aeabi_atexit>
9001ffdc:	4c0f      	ldr	r4, [pc, #60]	; (9002001c <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x68>)
9001ffde:	7823      	ldrb	r3, [r4, #0]
9001ffe0:	f3bf 8f5b 	dmb	ish
9001ffe4:	07db      	lsls	r3, r3, #31
9001ffe6:	d40b      	bmi.n	90020000 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
9001ffe8:	4620      	mov	r0, r4
9001ffea:	f007 fb06 	bl	900275fa <__cxa_guard_acquire>
9001ffee:	b138      	cbz	r0, 90020000 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
9001fff0:	4620      	mov	r0, r4
9001fff2:	f007 fb0e 	bl	90027612 <__cxa_guard_release>
9001fff6:	4a06      	ldr	r2, [pc, #24]	; (90020010 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
9001fff8:	4909      	ldr	r1, [pc, #36]	; (90020020 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x6c>)
9001fffa:	480a      	ldr	r0, [pc, #40]	; (90020024 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
9001fffc:	f007 faf6 	bl	900275ec <__aeabi_atexit>
90020000:	4b05      	ldr	r3, [pc, #20]	; (90020018 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
90020002:	662b      	str	r3, [r5, #96]	; 0x60
90020004:	4b07      	ldr	r3, [pc, #28]	; (90020024 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
90020006:	666b      	str	r3, [r5, #100]	; 0x64
90020008:	bd38      	pop	{r3, r4, r5, pc}
9002000a:	bf00      	nop
9002000c:	240282b8 	.word	0x240282b8
90020010:	24000000 	.word	0x24000000
90020014:	9001dcb5 	.word	0x9001dcb5
90020018:	240000a4 	.word	0x240000a4
9002001c:	240282bc 	.word	0x240282bc
90020020:	9001dcb3 	.word	0x9001dcb3
90020024:	240000a8 	.word	0x240000a8

90020028 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv>:
90020028:	b538      	push	{r3, r4, r5, lr}
9002002a:	4c15      	ldr	r4, [pc, #84]	; (90020080 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x58>)
9002002c:	4605      	mov	r5, r0
9002002e:	7823      	ldrb	r3, [r4, #0]
90020030:	f3bf 8f5b 	dmb	ish
90020034:	07da      	lsls	r2, r3, #31
90020036:	d40b      	bmi.n	90020050 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
90020038:	4620      	mov	r0, r4
9002003a:	f007 fade 	bl	900275fa <__cxa_guard_acquire>
9002003e:	b138      	cbz	r0, 90020050 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
90020040:	4620      	mov	r0, r4
90020042:	f007 fae6 	bl	90027612 <__cxa_guard_release>
90020046:	4a0f      	ldr	r2, [pc, #60]	; (90020084 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
90020048:	490f      	ldr	r1, [pc, #60]	; (90020088 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x60>)
9002004a:	4810      	ldr	r0, [pc, #64]	; (9002008c <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
9002004c:	f007 face 	bl	900275ec <__aeabi_atexit>
90020050:	4c0f      	ldr	r4, [pc, #60]	; (90020090 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x68>)
90020052:	7823      	ldrb	r3, [r4, #0]
90020054:	f3bf 8f5b 	dmb	ish
90020058:	07db      	lsls	r3, r3, #31
9002005a:	d40b      	bmi.n	90020074 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
9002005c:	4620      	mov	r0, r4
9002005e:	f007 facc 	bl	900275fa <__cxa_guard_acquire>
90020062:	b138      	cbz	r0, 90020074 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
90020064:	4620      	mov	r0, r4
90020066:	f007 fad4 	bl	90027612 <__cxa_guard_release>
9002006a:	4a06      	ldr	r2, [pc, #24]	; (90020084 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
9002006c:	4909      	ldr	r1, [pc, #36]	; (90020094 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x6c>)
9002006e:	480a      	ldr	r0, [pc, #40]	; (90020098 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
90020070:	f007 fabc 	bl	900275ec <__aeabi_atexit>
90020074:	4b05      	ldr	r3, [pc, #20]	; (9002008c <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
90020076:	65ab      	str	r3, [r5, #88]	; 0x58
90020078:	4b07      	ldr	r3, [pc, #28]	; (90020098 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
9002007a:	65eb      	str	r3, [r5, #92]	; 0x5c
9002007c:	bd38      	pop	{r3, r4, r5, pc}
9002007e:	bf00      	nop
90020080:	24028290 	.word	0x24028290
90020084:	24000000 	.word	0x24000000
90020088:	9001dcb9 	.word	0x9001dcb9
9002008c:	2400007c 	.word	0x2400007c
90020090:	24028294 	.word	0x24028294
90020094:	9001dcb7 	.word	0x9001dcb7
90020098:	24000080 	.word	0x24000080

9002009c <_ZN8touchgfx8LCD16bpp27enableTextureMapperARGB8888Ev>:
9002009c:	b510      	push	{r4, lr}
9002009e:	4604      	mov	r4, r0
900200a0:	f7ff ff88 	bl	9001ffb4 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>
900200a4:	4620      	mov	r0, r4
900200a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
900200aa:	f7ff bfbd 	b.w	90020028 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv>
	...

900200b0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv>:
900200b0:	b538      	push	{r3, r4, r5, lr}
900200b2:	4c15      	ldr	r4, [pc, #84]	; (90020108 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x58>)
900200b4:	4605      	mov	r5, r0
900200b6:	7823      	ldrb	r3, [r4, #0]
900200b8:	f3bf 8f5b 	dmb	ish
900200bc:	07da      	lsls	r2, r3, #31
900200be:	d40b      	bmi.n	900200d8 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
900200c0:	4620      	mov	r0, r4
900200c2:	f007 fa9a 	bl	900275fa <__cxa_guard_acquire>
900200c6:	b138      	cbz	r0, 900200d8 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
900200c8:	4620      	mov	r0, r4
900200ca:	f007 faa2 	bl	90027612 <__cxa_guard_release>
900200ce:	4a0f      	ldr	r2, [pc, #60]	; (9002010c <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
900200d0:	490f      	ldr	r1, [pc, #60]	; (90020110 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x60>)
900200d2:	4810      	ldr	r0, [pc, #64]	; (90020114 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
900200d4:	f007 fa8a 	bl	900275ec <__aeabi_atexit>
900200d8:	4c0f      	ldr	r4, [pc, #60]	; (90020118 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x68>)
900200da:	7823      	ldrb	r3, [r4, #0]
900200dc:	f3bf 8f5b 	dmb	ish
900200e0:	07db      	lsls	r3, r3, #31
900200e2:	d40b      	bmi.n	900200fc <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
900200e4:	4620      	mov	r0, r4
900200e6:	f007 fa88 	bl	900275fa <__cxa_guard_acquire>
900200ea:	b138      	cbz	r0, 900200fc <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
900200ec:	4620      	mov	r0, r4
900200ee:	f007 fa90 	bl	90027612 <__cxa_guard_release>
900200f2:	4a06      	ldr	r2, [pc, #24]	; (9002010c <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
900200f4:	4909      	ldr	r1, [pc, #36]	; (9002011c <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x6c>)
900200f6:	480a      	ldr	r0, [pc, #40]	; (90020120 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
900200f8:	f007 fa78 	bl	900275ec <__aeabi_atexit>
900200fc:	4b05      	ldr	r3, [pc, #20]	; (90020114 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
900200fe:	672b      	str	r3, [r5, #112]	; 0x70
90020100:	4b07      	ldr	r3, [pc, #28]	; (90020120 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
90020102:	676b      	str	r3, [r5, #116]	; 0x74
90020104:	bd38      	pop	{r3, r4, r5, pc}
90020106:	bf00      	nop
90020108:	24028288 	.word	0x24028288
9002010c:	24000000 	.word	0x24000000
90020110:	9001dcad 	.word	0x9001dcad
90020114:	24000074 	.word	0x24000074
90020118:	2402828c 	.word	0x2402828c
9002011c:	9001dcab 	.word	0x9001dcab
90020120:	24000078 	.word	0x24000078

90020124 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv>:
90020124:	b538      	push	{r3, r4, r5, lr}
90020126:	4c15      	ldr	r4, [pc, #84]	; (9002017c <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x58>)
90020128:	4605      	mov	r5, r0
9002012a:	7823      	ldrb	r3, [r4, #0]
9002012c:	f3bf 8f5b 	dmb	ish
90020130:	07da      	lsls	r2, r3, #31
90020132:	d40b      	bmi.n	9002014c <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
90020134:	4620      	mov	r0, r4
90020136:	f007 fa60 	bl	900275fa <__cxa_guard_acquire>
9002013a:	b138      	cbz	r0, 9002014c <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
9002013c:	4620      	mov	r0, r4
9002013e:	f007 fa68 	bl	90027612 <__cxa_guard_release>
90020142:	4a0f      	ldr	r2, [pc, #60]	; (90020180 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
90020144:	490f      	ldr	r1, [pc, #60]	; (90020184 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x60>)
90020146:	4810      	ldr	r0, [pc, #64]	; (90020188 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
90020148:	f007 fa50 	bl	900275ec <__aeabi_atexit>
9002014c:	4c0f      	ldr	r4, [pc, #60]	; (9002018c <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x68>)
9002014e:	7823      	ldrb	r3, [r4, #0]
90020150:	f3bf 8f5b 	dmb	ish
90020154:	07db      	lsls	r3, r3, #31
90020156:	d40b      	bmi.n	90020170 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
90020158:	4620      	mov	r0, r4
9002015a:	f007 fa4e 	bl	900275fa <__cxa_guard_acquire>
9002015e:	b138      	cbz	r0, 90020170 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
90020160:	4620      	mov	r0, r4
90020162:	f007 fa56 	bl	90027612 <__cxa_guard_release>
90020166:	4a06      	ldr	r2, [pc, #24]	; (90020180 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
90020168:	4909      	ldr	r1, [pc, #36]	; (90020190 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x6c>)
9002016a:	480a      	ldr	r0, [pc, #40]	; (90020194 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
9002016c:	f007 fa3e 	bl	900275ec <__aeabi_atexit>
90020170:	4b05      	ldr	r3, [pc, #20]	; (90020188 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
90020172:	66ab      	str	r3, [r5, #104]	; 0x68
90020174:	4b07      	ldr	r3, [pc, #28]	; (90020194 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
90020176:	66eb      	str	r3, [r5, #108]	; 0x6c
90020178:	bd38      	pop	{r3, r4, r5, pc}
9002017a:	bf00      	nop
9002017c:	24028280 	.word	0x24028280
90020180:	24000000 	.word	0x24000000
90020184:	9001dcb1 	.word	0x9001dcb1
90020188:	2400006c 	.word	0x2400006c
9002018c:	24028284 	.word	0x24028284
90020190:	9001dcaf 	.word	0x9001dcaf
90020194:	24000070 	.word	0x24000070

90020198 <_ZN8touchgfx8LCD16bpp21enableTextureMapperA4Ev>:
90020198:	b510      	push	{r4, lr}
9002019a:	4604      	mov	r4, r0
9002019c:	f7ff ff88 	bl	900200b0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv>
900201a0:	4620      	mov	r0, r4
900201a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
900201a6:	f7ff bfbd 	b.w	90020124 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv>

900201aa <_ZN8touchgfx8LCD16bpp22enableTextureMapperAllEv>:
900201aa:	b510      	push	{r4, lr}
900201ac:	4604      	mov	r4, r0
900201ae:	f7ff fff3 	bl	90020198 <_ZN8touchgfx8LCD16bpp21enableTextureMapperA4Ev>
900201b2:	4620      	mov	r0, r4
900201b4:	f7ff ff72 	bl	9002009c <_ZN8touchgfx8LCD16bpp27enableTextureMapperARGB8888Ev>
900201b8:	4620      	mov	r0, r4
900201ba:	f7ff fdf9 	bl	9001fdb0 <_ZN8touchgfx8LCD16bpp30enableTextureMapperL8_ARGB8888Ev>
900201be:	4620      	mov	r0, r4
900201c0:	f7ff fcfa 	bl	9001fbb8 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB565Ev>
900201c4:	4620      	mov	r0, r4
900201c6:	f7ff fd75 	bl	9001fcb4 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB888Ev>
900201ca:	4620      	mov	r0, r4
900201cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
900201d0:	f7ff bee0 	b.w	9001ff94 <_ZN8touchgfx8LCD16bpp25enableTextureMapperRGB565Ev>

900201d4 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh>:
900201d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
900201d8:	e9dd 450b 	ldrd	r4, r5, [sp, #44]	; 0x2c
900201dc:	f9bd e024 	ldrsh.w	lr, [sp, #36]	; 0x24
900201e0:	2d00      	cmp	r5, #0
900201e2:	f9bd b028 	ldrsh.w	fp, [sp, #40]	; 0x28
900201e6:	fb05 4c0e 	mla	ip, r5, lr, r4
900201ea:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
900201ee:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
900201f2:	f89d 603c 	ldrb.w	r6, [sp, #60]	; 0x3c
900201f6:	eb02 0a0c 	add.w	sl, r2, ip
900201fa:	8808      	ldrh	r0, [r1, #0]
900201fc:	f2c0 80b0 	blt.w	90020360 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x18c>
90020200:	45ab      	cmp	fp, r5
90020202:	f340 80ad 	ble.w	90020360 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x18c>
90020206:	2c00      	cmp	r4, #0
90020208:	f2c0 80a8 	blt.w	9002035c <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x188>
9002020c:	45a6      	cmp	lr, r4
9002020e:	f340 80a5 	ble.w	9002035c <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x188>
90020212:	f812 200c 	ldrb.w	r2, [r2, ip]
90020216:	f833 8012 	ldrh.w	r8, [r3, r2, lsl #1]
9002021a:	1c62      	adds	r2, r4, #1
9002021c:	f100 80a3 	bmi.w	90020366 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x192>
90020220:	4596      	cmp	lr, r2
90020222:	f340 80a0 	ble.w	90020366 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x192>
90020226:	f1b9 0f00 	cmp.w	r9, #0
9002022a:	f000 809c 	beq.w	90020366 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x192>
9002022e:	f89a 2001 	ldrb.w	r2, [sl, #1]
90020232:	f833 c012 	ldrh.w	ip, [r3, r2, lsl #1]
90020236:	3501      	adds	r5, #1
90020238:	f100 8099 	bmi.w	9002036e <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x19a>
9002023c:	45ab      	cmp	fp, r5
9002023e:	f340 8096 	ble.w	9002036e <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x19a>
90020242:	2f00      	cmp	r7, #0
90020244:	f000 8093 	beq.w	9002036e <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x19a>
90020248:	2c00      	cmp	r4, #0
9002024a:	f2c0 808e 	blt.w	9002036a <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x196>
9002024e:	45a6      	cmp	lr, r4
90020250:	f340 808b 	ble.w	9002036a <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x196>
90020254:	f81a 200e 	ldrb.w	r2, [sl, lr]
90020258:	f833 5012 	ldrh.w	r5, [r3, r2, lsl #1]
9002025c:	3401      	adds	r4, #1
9002025e:	f100 8089 	bmi.w	90020374 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1a0>
90020262:	45a6      	cmp	lr, r4
90020264:	f340 8086 	ble.w	90020374 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1a0>
90020268:	f1b9 0f00 	cmp.w	r9, #0
9002026c:	f000 8082 	beq.w	90020374 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1a0>
90020270:	44d6      	add	lr, sl
90020272:	f89e 2001 	ldrb.w	r2, [lr, #1]
90020276:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
9002027a:	ea4f 4408 	mov.w	r4, r8, lsl #16
9002027e:	f428 68fc 	bic.w	r8, r8, #2016	; 0x7e0
90020282:	fb19 fe07 	smulbb	lr, r9, r7
90020286:	f1c7 0210 	rsb	r2, r7, #16
9002028a:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
9002028e:	f3ce 0ec7 	ubfx	lr, lr, #3, #8
90020292:	eba2 0209 	sub.w	r2, r2, r9
90020296:	ea44 0808 	orr.w	r8, r4, r8
9002029a:	ea4f 440c 	mov.w	r4, ip, lsl #16
9002029e:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
900202a2:	eb0e 0242 	add.w	r2, lr, r2, lsl #1
900202a6:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
900202aa:	ebce 0747 	rsb	r7, lr, r7, lsl #1
900202ae:	ea44 0c0c 	orr.w	ip, r4, ip
900202b2:	ebce 0449 	rsb	r4, lr, r9, lsl #1
900202b6:	fb04 f40c 	mul.w	r4, r4, ip
900202ba:	fb02 4808 	mla	r8, r2, r8, r4
900202be:	041a      	lsls	r2, r3, #16
900202c0:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
900202c4:	b2b4      	uxth	r4, r6
900202c6:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
900202ca:	43f6      	mvns	r6, r6
900202cc:	4313      	orrs	r3, r2
900202ce:	042a      	lsls	r2, r5, #16
900202d0:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
900202d4:	b2f6      	uxtb	r6, r6
900202d6:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
900202da:	fb0e 8303 	mla	r3, lr, r3, r8
900202de:	432a      	orrs	r2, r5
900202e0:	fb07 3202 	mla	r2, r7, r2, r3
900202e4:	10c7      	asrs	r7, r0, #3
900202e6:	0d53      	lsrs	r3, r2, #21
900202e8:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
900202ec:	0952      	lsrs	r2, r2, #5
900202ee:	fb17 f706 	smulbb	r7, r7, r6
900202f2:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
900202f6:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
900202fa:	431a      	orrs	r2, r3
900202fc:	b293      	uxth	r3, r2
900202fe:	1202      	asrs	r2, r0, #8
90020300:	121d      	asrs	r5, r3, #8
90020302:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
90020306:	00c0      	lsls	r0, r0, #3
90020308:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
9002030c:	fb12 f206 	smulbb	r2, r2, r6
90020310:	b2c0      	uxtb	r0, r0
90020312:	fb05 2504 	mla	r5, r5, r4, r2
90020316:	10da      	asrs	r2, r3, #3
90020318:	fb10 f006 	smulbb	r0, r0, r6
9002031c:	00db      	lsls	r3, r3, #3
9002031e:	b2ad      	uxth	r5, r5
90020320:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
90020324:	b2db      	uxtb	r3, r3
90020326:	fb02 7204 	mla	r2, r2, r4, r7
9002032a:	fb03 0004 	mla	r0, r3, r4, r0
9002032e:	1c6b      	adds	r3, r5, #1
90020330:	b292      	uxth	r2, r2
90020332:	b280      	uxth	r0, r0
90020334:	eb03 2515 	add.w	r5, r3, r5, lsr #8
90020338:	1c43      	adds	r3, r0, #1
9002033a:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
9002033e:	eb03 2310 	add.w	r3, r3, r0, lsr #8
90020342:	1c50      	adds	r0, r2, #1
90020344:	eb00 2212 	add.w	r2, r0, r2, lsr #8
90020348:	f3c3 23c4 	ubfx	r3, r3, #11, #5
9002034c:	0952      	lsrs	r2, r2, #5
9002034e:	432b      	orrs	r3, r5
90020350:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
90020354:	4313      	orrs	r3, r2
90020356:	800b      	strh	r3, [r1, #0]
90020358:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9002035c:	4680      	mov	r8, r0
9002035e:	e75c      	b.n	9002021a <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x46>
90020360:	4684      	mov	ip, r0
90020362:	4680      	mov	r8, r0
90020364:	e767      	b.n	90020236 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x62>
90020366:	4684      	mov	ip, r0
90020368:	e765      	b.n	90020236 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x62>
9002036a:	4605      	mov	r5, r0
9002036c:	e776      	b.n	9002025c <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x88>
9002036e:	4603      	mov	r3, r0
90020370:	4605      	mov	r5, r0
90020372:	e782      	b.n	9002027a <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa6>
90020374:	4603      	mov	r3, r0
90020376:	e780      	b.n	9002027a <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa6>

90020378 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
90020378:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9002037c:	b099      	sub	sp, #100	; 0x64
9002037e:	9215      	str	r2, [sp, #84]	; 0x54
90020380:	9309      	str	r3, [sp, #36]	; 0x24
90020382:	9a27      	ldr	r2, [sp, #156]	; 0x9c
90020384:	f89d 30ac 	ldrb.w	r3, [sp, #172]	; 0xac
90020388:	9016      	str	r0, [sp, #88]	; 0x58
9002038a:	930d      	str	r3, [sp, #52]	; 0x34
9002038c:	6850      	ldr	r0, [r2, #4]
9002038e:	910c      	str	r1, [sp, #48]	; 0x30
90020390:	6812      	ldr	r2, [r2, #0]
90020392:	e9dd 1328 	ldrd	r1, r3, [sp, #160]	; 0xa0
90020396:	e9dd a523 	ldrd	sl, r5, [sp, #140]	; 0x8c
9002039a:	fb00 1303 	mla	r3, r0, r3, r1
9002039e:	eb02 0843 	add.w	r8, r2, r3, lsl #1
900203a2:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
900203a4:	681b      	ldr	r3, [r3, #0]
900203a6:	930b      	str	r3, [sp, #44]	; 0x2c
900203a8:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
900203aa:	685e      	ldr	r6, [r3, #4]
900203ac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
900203ae:	3604      	adds	r6, #4
900203b0:	43db      	mvns	r3, r3
900203b2:	b2db      	uxtb	r3, r3
900203b4:	930a      	str	r3, [sp, #40]	; 0x28
900203b6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
900203b8:	2b00      	cmp	r3, #0
900203ba:	dc03      	bgt.n	900203c4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
900203bc:	9b15      	ldr	r3, [sp, #84]	; 0x54
900203be:	2b00      	cmp	r3, #0
900203c0:	f340 8225 	ble.w	9002080e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x496>
900203c4:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
900203c6:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
900203ca:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
900203ce:	1e48      	subs	r0, r1, #1
900203d0:	1e57      	subs	r7, r2, #1
900203d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
900203d4:	2b00      	cmp	r3, #0
900203d6:	f340 80e3 	ble.w	900205a0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
900203da:	ea5f 4c2a 	movs.w	ip, sl, asr #16
900203de:	ea4f 4325 	mov.w	r3, r5, asr #16
900203e2:	d406      	bmi.n	900203f2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
900203e4:	4584      	cmp	ip, r0
900203e6:	da04      	bge.n	900203f2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
900203e8:	2b00      	cmp	r3, #0
900203ea:	db02      	blt.n	900203f2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
900203ec:	42bb      	cmp	r3, r7
900203ee:	f2c0 80d8 	blt.w	900205a2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
900203f2:	f11c 0c01 	adds.w	ip, ip, #1
900203f6:	f100 80c9 	bmi.w	9002058c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
900203fa:	4561      	cmp	r1, ip
900203fc:	f2c0 80c6 	blt.w	9002058c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
90020400:	3301      	adds	r3, #1
90020402:	f100 80c3 	bmi.w	9002058c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
90020406:	429a      	cmp	r2, r3
90020408:	f2c0 80c0 	blt.w	9002058c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
9002040c:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
90020410:	4647      	mov	r7, r8
90020412:	f1bb 0f00 	cmp.w	fp, #0
90020416:	f340 80e3 	ble.w	900205e0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x268>
9002041a:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
9002041c:	ea4f 4c25 	mov.w	ip, r5, asr #16
90020420:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
90020422:	f3ca 3003 	ubfx	r0, sl, #12, #4
90020426:	f8d2 e00c 	ldr.w	lr, [r2, #12]
9002042a:	ea5f 422a 	movs.w	r2, sl, asr #16
9002042e:	f3c5 3103 	ubfx	r1, r5, #12, #4
90020432:	689b      	ldr	r3, [r3, #8]
90020434:	f100 8121 	bmi.w	9002067a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x302>
90020438:	f103 39ff 	add.w	r9, r3, #4294967295
9002043c:	454a      	cmp	r2, r9
9002043e:	f280 811c 	bge.w	9002067a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x302>
90020442:	f1bc 0f00 	cmp.w	ip, #0
90020446:	f2c0 8118 	blt.w	9002067a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x302>
9002044a:	f10e 39ff 	add.w	r9, lr, #4294967295
9002044e:	45cc      	cmp	ip, r9
90020450:	f280 8113 	bge.w	9002067a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x302>
90020454:	b21b      	sxth	r3, r3
90020456:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
90020458:	fb0c 2203 	mla	r2, ip, r3, r2
9002045c:	eb04 0902 	add.w	r9, r4, r2
90020460:	5ca2      	ldrb	r2, [r4, r2]
90020462:	f836 e012 	ldrh.w	lr, [r6, r2, lsl #1]
90020466:	2800      	cmp	r0, #0
90020468:	f000 80fe 	beq.w	90020668 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f0>
9002046c:	f899 2001 	ldrb.w	r2, [r9, #1]
90020470:	f836 2012 	ldrh.w	r2, [r6, r2, lsl #1]
90020474:	9211      	str	r2, [sp, #68]	; 0x44
90020476:	b151      	cbz	r1, 9002048e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
90020478:	eb09 0203 	add.w	r2, r9, r3
9002047c:	f819 3003 	ldrb.w	r3, [r9, r3]
90020480:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
90020484:	930f      	str	r3, [sp, #60]	; 0x3c
90020486:	7853      	ldrb	r3, [r2, #1]
90020488:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
9002048c:	9312      	str	r3, [sp, #72]	; 0x48
9002048e:	9b11      	ldr	r3, [sp, #68]	; 0x44
90020490:	fb10 f201 	smulbb	r2, r0, r1
90020494:	9c12      	ldr	r4, [sp, #72]	; 0x48
90020496:	ea4f 4c03 	mov.w	ip, r3, lsl #16
9002049a:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
9002049e:	f424 64fc 	bic.w	r4, r4, #2016	; 0x7e0
900204a2:	10d2      	asrs	r2, r2, #3
900204a4:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
900204a8:	ebc2 0940 	rsb	r9, r2, r0, lsl #1
900204ac:	ea4c 0c03 	orr.w	ip, ip, r3
900204b0:	9b12      	ldr	r3, [sp, #72]	; 0x48
900204b2:	041b      	lsls	r3, r3, #16
900204b4:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
900204b8:	4323      	orrs	r3, r4
900204ba:	9c0a      	ldr	r4, [sp, #40]	; 0x28
900204bc:	4353      	muls	r3, r2
900204be:	fb09 330c 	mla	r3, r9, ip, r3
900204c2:	ea4f 4c0e 	mov.w	ip, lr, lsl #16
900204c6:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
900204ca:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
900204ce:	ea4c 0e0e 	orr.w	lr, ip, lr
900204d2:	f1c1 0c10 	rsb	ip, r1, #16
900204d6:	ebac 0c00 	sub.w	ip, ip, r0
900204da:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
900204de:	ebc2 0241 	rsb	r2, r2, r1, lsl #1
900204e2:	fb0c 3c0e 	mla	ip, ip, lr, r3
900204e6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
900204e8:	0418      	lsls	r0, r3, #16
900204ea:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
900204ee:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
900204f2:	4318      	orrs	r0, r3
900204f4:	fb02 c200 	mla	r2, r2, r0, ip
900204f8:	8838      	ldrh	r0, [r7, #0]
900204fa:	0d53      	lsrs	r3, r2, #21
900204fc:	0952      	lsrs	r2, r2, #5
900204fe:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
90020502:	1201      	asrs	r1, r0, #8
90020504:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
90020508:	ea4f 0ee0 	mov.w	lr, r0, asr #3
9002050c:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
90020510:	00c0      	lsls	r0, r0, #3
90020512:	431a      	orrs	r2, r3
90020514:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
90020518:	fb11 f104 	smulbb	r1, r1, r4
9002051c:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
90020520:	b292      	uxth	r2, r2
90020522:	fb1e fe04 	smulbb	lr, lr, r4
90020526:	b2c0      	uxtb	r0, r0
90020528:	ea4f 2c22 	mov.w	ip, r2, asr #8
9002052c:	fb10 f004 	smulbb	r0, r0, r4
90020530:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
90020534:	fb0c 1c03 	mla	ip, ip, r3, r1
90020538:	10d1      	asrs	r1, r2, #3
9002053a:	00d2      	lsls	r2, r2, #3
9002053c:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
90020540:	fa1f fc8c 	uxth.w	ip, ip
90020544:	b2d2      	uxtb	r2, r2
90020546:	fb01 e103 	mla	r1, r1, r3, lr
9002054a:	fb02 0303 	mla	r3, r2, r3, r0
9002054e:	b289      	uxth	r1, r1
90020550:	b29a      	uxth	r2, r3
90020552:	f10c 0301 	add.w	r3, ip, #1
90020556:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
9002055a:	1c53      	adds	r3, r2, #1
9002055c:	eb03 2312 	add.w	r3, r3, r2, lsr #8
90020560:	1c4a      	adds	r2, r1, #1
90020562:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
90020566:	eb02 2111 	add.w	r1, r2, r1, lsr #8
9002056a:	f3c3 23c4 	ubfx	r3, r3, #11, #5
9002056e:	0949      	lsrs	r1, r1, #5
90020570:	ea43 030c 	orr.w	r3, r3, ip
90020574:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
90020578:	430b      	orrs	r3, r1
9002057a:	803b      	strh	r3, [r7, #0]
9002057c:	9b25      	ldr	r3, [sp, #148]	; 0x94
9002057e:	3702      	adds	r7, #2
90020580:	f10b 3bff 	add.w	fp, fp, #4294967295
90020584:	449a      	add	sl, r3
90020586:	9b26      	ldr	r3, [sp, #152]	; 0x98
90020588:	441d      	add	r5, r3
9002058a:	e742      	b.n	90020412 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
9002058c:	9b25      	ldr	r3, [sp, #148]	; 0x94
9002058e:	f108 0802 	add.w	r8, r8, #2
90020592:	449a      	add	sl, r3
90020594:	9b26      	ldr	r3, [sp, #152]	; 0x98
90020596:	441d      	add	r5, r3
90020598:	9b09      	ldr	r3, [sp, #36]	; 0x24
9002059a:	3b01      	subs	r3, #1
9002059c:	9309      	str	r3, [sp, #36]	; 0x24
9002059e:	e718      	b.n	900203d2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
900205a0:	d023      	beq.n	900205ea <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x272>
900205a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
900205a4:	9825      	ldr	r0, [sp, #148]	; 0x94
900205a6:	3b01      	subs	r3, #1
900205a8:	fb00 a003 	mla	r0, r0, r3, sl
900205ac:	1400      	asrs	r0, r0, #16
900205ae:	f53f af2d 	bmi.w	9002040c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
900205b2:	3901      	subs	r1, #1
900205b4:	4288      	cmp	r0, r1
900205b6:	f6bf af29 	bge.w	9002040c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
900205ba:	9926      	ldr	r1, [sp, #152]	; 0x98
900205bc:	fb01 5303 	mla	r3, r1, r3, r5
900205c0:	141b      	asrs	r3, r3, #16
900205c2:	f53f af23 	bmi.w	9002040c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
900205c6:	3a01      	subs	r2, #1
900205c8:	4293      	cmp	r3, r2
900205ca:	f6bf af1f 	bge.w	9002040c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
900205ce:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
900205d2:	f8bd 9034 	ldrh.w	r9, [sp, #52]	; 0x34
900205d6:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
900205da:	f1be 0f00 	cmp.w	lr, #0
900205de:	dc6c      	bgt.n	900206ba <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
900205e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
900205e2:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
900205e6:	eb08 0844 	add.w	r8, r8, r4, lsl #1
900205ea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
900205ec:	2b00      	cmp	r3, #0
900205ee:	f340 810e 	ble.w	9002080e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x496>
900205f2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
900205f6:	9b22      	ldr	r3, [sp, #136]	; 0x88
900205f8:	ee30 0a04 	vadd.f32	s0, s0, s8
900205fc:	ee70 0aa4 	vadd.f32	s1, s1, s9
90020600:	eef0 6a62 	vmov.f32	s13, s5
90020604:	eec7 7a00 	vdiv.f32	s15, s14, s0
90020608:	ee31 1a05 	vadd.f32	s2, s2, s10
9002060c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
90020610:	ee16 aa90 	vmov	sl, s13
90020614:	eef0 6a43 	vmov.f32	s13, s6
90020618:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
9002061c:	ee16 5a90 	vmov	r5, s13
90020620:	ee20 7aa7 	vmul.f32	s14, s1, s15
90020624:	ee61 7a27 	vmul.f32	s15, s2, s15
90020628:	ee77 2a62 	vsub.f32	s5, s14, s5
9002062c:	ee37 3ac3 	vsub.f32	s6, s15, s6
90020630:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
90020634:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
90020638:	ee12 2a90 	vmov	r2, s5
9002063c:	eef0 2a47 	vmov.f32	s5, s14
90020640:	fb92 f3f3 	sdiv	r3, r2, r3
90020644:	ee13 2a10 	vmov	r2, s6
90020648:	9325      	str	r3, [sp, #148]	; 0x94
9002064a:	9b22      	ldr	r3, [sp, #136]	; 0x88
9002064c:	eeb0 3a67 	vmov.f32	s6, s15
90020650:	fb92 f3f3 	sdiv	r3, r2, r3
90020654:	9326      	str	r3, [sp, #152]	; 0x98
90020656:	9b0c      	ldr	r3, [sp, #48]	; 0x30
90020658:	9a15      	ldr	r2, [sp, #84]	; 0x54
9002065a:	3b01      	subs	r3, #1
9002065c:	930c      	str	r3, [sp, #48]	; 0x30
9002065e:	9b22      	ldr	r3, [sp, #136]	; 0x88
90020660:	bf08      	it	eq
90020662:	4613      	moveq	r3, r2
90020664:	9309      	str	r3, [sp, #36]	; 0x24
90020666:	e6a6      	b.n	900203b6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
90020668:	2900      	cmp	r1, #0
9002066a:	f43f af10 	beq.w	9002048e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
9002066e:	f819 3003 	ldrb.w	r3, [r9, r3]
90020672:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
90020676:	930f      	str	r3, [sp, #60]	; 0x3c
90020678:	e709      	b.n	9002048e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
9002067a:	f112 0901 	adds.w	r9, r2, #1
9002067e:	f53f af7d 	bmi.w	9002057c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
90020682:	454b      	cmp	r3, r9
90020684:	f6ff af7a 	blt.w	9002057c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
90020688:	f11c 0901 	adds.w	r9, ip, #1
9002068c:	f53f af76 	bmi.w	9002057c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
90020690:	45ce      	cmp	lr, r9
90020692:	f6ff af73 	blt.w	9002057c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
90020696:	9c0d      	ldr	r4, [sp, #52]	; 0x34
90020698:	b21b      	sxth	r3, r3
9002069a:	9202      	str	r2, [sp, #8]
9002069c:	fa0f f28e 	sxth.w	r2, lr
900206a0:	9300      	str	r3, [sp, #0]
900206a2:	4633      	mov	r3, r6
900206a4:	9201      	str	r2, [sp, #4]
900206a6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
900206a8:	e9cd 1405 	strd	r1, r4, [sp, #20]
900206ac:	e9cd c003 	strd	ip, r0, [sp, #12]
900206b0:	4639      	mov	r1, r7
900206b2:	9816      	ldr	r0, [sp, #88]	; 0x58
900206b4:	f7ff fd8e 	bl	900201d4 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh>
900206b8:	e760      	b.n	9002057c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
900206ba:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
900206bc:	ea4f 422a 	mov.w	r2, sl, asr #16
900206c0:	1429      	asrs	r1, r5, #16
900206c2:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
900206c4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
900206c8:	f3ca 3c03 	ubfx	ip, sl, #12, #4
900206cc:	f3c5 3003 	ubfx	r0, r5, #12, #4
900206d0:	fb03 2101 	mla	r1, r3, r1, r2
900206d4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
900206d6:	440a      	add	r2, r1
900206d8:	5c61      	ldrb	r1, [r4, r1]
900206da:	f836 1011 	ldrh.w	r1, [r6, r1, lsl #1]
900206de:	f1bc 0f00 	cmp.w	ip, #0
900206e2:	f000 808c 	beq.w	900207fe <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x486>
900206e6:	7857      	ldrb	r7, [r2, #1]
900206e8:	f836 4017 	ldrh.w	r4, [r6, r7, lsl #1]
900206ec:	9413      	str	r4, [sp, #76]	; 0x4c
900206ee:	b140      	cbz	r0, 90020702 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
900206f0:	18d7      	adds	r7, r2, r3
900206f2:	5cd3      	ldrb	r3, [r2, r3]
900206f4:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
900206f8:	9310      	str	r3, [sp, #64]	; 0x40
900206fa:	787b      	ldrb	r3, [r7, #1]
900206fc:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
90020700:	9314      	str	r3, [sp, #80]	; 0x50
90020702:	9b13      	ldr	r3, [sp, #76]	; 0x4c
90020704:	fb1c f200 	smulbb	r2, ip, r0
90020708:	9c14      	ldr	r4, [sp, #80]	; 0x50
9002070a:	f10e 3eff 	add.w	lr, lr, #4294967295
9002070e:	041f      	lsls	r7, r3, #16
90020710:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
90020714:	10d2      	asrs	r2, r2, #3
90020716:	f424 6bfc 	bic.w	fp, r4, #2016	; 0x7e0
9002071a:	f007 67fc 	and.w	r7, r7, #132120576	; 0x7e00000
9002071e:	431f      	orrs	r7, r3
90020720:	ebc2 034c 	rsb	r3, r2, ip, lsl #1
90020724:	9317      	str	r3, [sp, #92]	; 0x5c
90020726:	9b14      	ldr	r3, [sp, #80]	; 0x50
90020728:	9c17      	ldr	r4, [sp, #92]	; 0x5c
9002072a:	041b      	lsls	r3, r3, #16
9002072c:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
90020730:	ea43 030b 	orr.w	r3, r3, fp
90020734:	ea4f 4b01 	mov.w	fp, r1, lsl #16
90020738:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
9002073c:	4353      	muls	r3, r2
9002073e:	fb04 3707 	mla	r7, r4, r7, r3
90020742:	f00b 63fc 	and.w	r3, fp, #132120576	; 0x7e00000
90020746:	9c0a      	ldr	r4, [sp, #40]	; 0x28
90020748:	ea43 0b01 	orr.w	fp, r3, r1
9002074c:	f1c0 0110 	rsb	r1, r0, #16
90020750:	9b10      	ldr	r3, [sp, #64]	; 0x40
90020752:	eba1 0c0c 	sub.w	ip, r1, ip
90020756:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
9002075a:	ebc2 0240 	rsb	r2, r2, r0, lsl #1
9002075e:	fb0c 770b 	mla	r7, ip, fp, r7
90020762:	ea4f 4c03 	mov.w	ip, r3, lsl #16
90020766:	f423 6bfc 	bic.w	fp, r3, #2016	; 0x7e0
9002076a:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
9002076e:	ea4c 0c0b 	orr.w	ip, ip, fp
90020772:	fb02 770c 	mla	r7, r2, ip, r7
90020776:	9a0e      	ldr	r2, [sp, #56]	; 0x38
90020778:	0d79      	lsrs	r1, r7, #21
9002077a:	8812      	ldrh	r2, [r2, #0]
9002077c:	097f      	lsrs	r7, r7, #5
9002077e:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
90020782:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
90020786:	430f      	orrs	r7, r1
90020788:	1211      	asrs	r1, r2, #8
9002078a:	b2bb      	uxth	r3, r7
9002078c:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
90020790:	10d7      	asrs	r7, r2, #3
90020792:	fb11 f104 	smulbb	r1, r1, r4
90020796:	1218      	asrs	r0, r3, #8
90020798:	00d2      	lsls	r2, r2, #3
9002079a:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
9002079e:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
900207a2:	fb17 f704 	smulbb	r7, r7, r4
900207a6:	b2d2      	uxtb	r2, r2
900207a8:	fb00 1009 	mla	r0, r0, r9, r1
900207ac:	10d9      	asrs	r1, r3, #3
900207ae:	fb12 f204 	smulbb	r2, r2, r4
900207b2:	00db      	lsls	r3, r3, #3
900207b4:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
900207b8:	b280      	uxth	r0, r0
900207ba:	b2db      	uxtb	r3, r3
900207bc:	fb01 7109 	mla	r1, r1, r9, r7
900207c0:	fb03 2309 	mla	r3, r3, r9, r2
900207c4:	1c42      	adds	r2, r0, #1
900207c6:	b289      	uxth	r1, r1
900207c8:	b29b      	uxth	r3, r3
900207ca:	eb02 2010 	add.w	r0, r2, r0, lsr #8
900207ce:	1c4f      	adds	r7, r1, #1
900207d0:	1c5a      	adds	r2, r3, #1
900207d2:	eb07 2111 	add.w	r1, r7, r1, lsr #8
900207d6:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
900207da:	eb02 2213 	add.w	r2, r2, r3, lsr #8
900207de:	9b0e      	ldr	r3, [sp, #56]	; 0x38
900207e0:	0949      	lsrs	r1, r1, #5
900207e2:	f3c2 22c4 	ubfx	r2, r2, #11, #5
900207e6:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
900207ea:	4310      	orrs	r0, r2
900207ec:	4308      	orrs	r0, r1
900207ee:	f823 0b02 	strh.w	r0, [r3], #2
900207f2:	930e      	str	r3, [sp, #56]	; 0x38
900207f4:	9b25      	ldr	r3, [sp, #148]	; 0x94
900207f6:	449a      	add	sl, r3
900207f8:	9b26      	ldr	r3, [sp, #152]	; 0x98
900207fa:	441d      	add	r5, r3
900207fc:	e6ed      	b.n	900205da <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x262>
900207fe:	2800      	cmp	r0, #0
90020800:	f43f af7f 	beq.w	90020702 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
90020804:	5cd3      	ldrb	r3, [r2, r3]
90020806:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
9002080a:	9310      	str	r3, [sp, #64]	; 0x40
9002080c:	e779      	b.n	90020702 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
9002080e:	b019      	add	sp, #100	; 0x64
90020810:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

90020814 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>:
90020814:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
90020818:	e9dd 480a 	ldrd	r4, r8, [sp, #40]	; 0x28
9002081c:	f9bd e020 	ldrsh.w	lr, [sp, #32]
90020820:	f1b8 0f00 	cmp.w	r8, #0
90020824:	f9bd a024 	ldrsh.w	sl, [sp, #36]	; 0x24
90020828:	fb08 470e 	mla	r7, r8, lr, r4
9002082c:	f89d 5030 	ldrb.w	r5, [sp, #48]	; 0x30
90020830:	f89d 6034 	ldrb.w	r6, [sp, #52]	; 0x34
90020834:	eb02 0907 	add.w	r9, r2, r7
90020838:	8808      	ldrh	r0, [r1, #0]
9002083a:	db67      	blt.n	9002090c <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xf8>
9002083c:	45c2      	cmp	sl, r8
9002083e:	dd65      	ble.n	9002090c <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xf8>
90020840:	2c00      	cmp	r4, #0
90020842:	db61      	blt.n	90020908 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xf4>
90020844:	45a6      	cmp	lr, r4
90020846:	dd5f      	ble.n	90020908 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xf4>
90020848:	5dd2      	ldrb	r2, [r2, r7]
9002084a:	f833 c012 	ldrh.w	ip, [r3, r2, lsl #1]
9002084e:	1c62      	adds	r2, r4, #1
90020850:	d45f      	bmi.n	90020912 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xfe>
90020852:	4596      	cmp	lr, r2
90020854:	dd5d      	ble.n	90020912 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xfe>
90020856:	2d00      	cmp	r5, #0
90020858:	d05b      	beq.n	90020912 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xfe>
9002085a:	f899 2001 	ldrb.w	r2, [r9, #1]
9002085e:	f833 7012 	ldrh.w	r7, [r3, r2, lsl #1]
90020862:	f118 0801 	adds.w	r8, r8, #1
90020866:	d458      	bmi.n	9002091a <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x106>
90020868:	45c2      	cmp	sl, r8
9002086a:	dd56      	ble.n	9002091a <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x106>
9002086c:	2e00      	cmp	r6, #0
9002086e:	d054      	beq.n	9002091a <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x106>
90020870:	2c00      	cmp	r4, #0
90020872:	db50      	blt.n	90020916 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x102>
90020874:	45a6      	cmp	lr, r4
90020876:	dd4e      	ble.n	90020916 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x102>
90020878:	f819 200e 	ldrb.w	r2, [r9, lr]
9002087c:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
90020880:	3401      	adds	r4, #1
90020882:	d407      	bmi.n	90020894 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>
90020884:	45a6      	cmp	lr, r4
90020886:	dd05      	ble.n	90020894 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>
90020888:	b125      	cbz	r5, 90020894 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>
9002088a:	44ce      	add	lr, r9
9002088c:	f89e 0001 	ldrb.w	r0, [lr, #1]
90020890:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
90020894:	fb15 f406 	smulbb	r4, r5, r6
90020898:	ea4f 430c 	mov.w	r3, ip, lsl #16
9002089c:	ea4f 4e07 	mov.w	lr, r7, lsl #16
900208a0:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
900208a4:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
900208a8:	f3c4 04c7 	ubfx	r4, r4, #3, #8
900208ac:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
900208b0:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
900208b4:	ea43 0c0c 	orr.w	ip, r3, ip
900208b8:	f1c6 0310 	rsb	r3, r6, #16
900208bc:	ea4e 0707 	orr.w	r7, lr, r7
900208c0:	ebc4 0646 	rsb	r6, r4, r6, lsl #1
900208c4:	1b5b      	subs	r3, r3, r5
900208c6:	ebc4 0545 	rsb	r5, r4, r5, lsl #1
900208ca:	eb04 0343 	add.w	r3, r4, r3, lsl #1
900208ce:	437d      	muls	r5, r7
900208d0:	fb03 5c0c 	mla	ip, r3, ip, r5
900208d4:	0403      	lsls	r3, r0, #16
900208d6:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
900208da:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
900208de:	4318      	orrs	r0, r3
900208e0:	0413      	lsls	r3, r2, #16
900208e2:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
900208e6:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
900208ea:	fb04 c000 	mla	r0, r4, r0, ip
900208ee:	4313      	orrs	r3, r2
900208f0:	fb06 0003 	mla	r0, r6, r3, r0
900208f4:	0d43      	lsrs	r3, r0, #21
900208f6:	0940      	lsrs	r0, r0, #5
900208f8:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
900208fc:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
90020900:	4318      	orrs	r0, r3
90020902:	8008      	strh	r0, [r1, #0]
90020904:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
90020908:	4684      	mov	ip, r0
9002090a:	e7a0      	b.n	9002084e <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x3a>
9002090c:	4607      	mov	r7, r0
9002090e:	4684      	mov	ip, r0
90020910:	e7a7      	b.n	90020862 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x4e>
90020912:	4607      	mov	r7, r0
90020914:	e7a5      	b.n	90020862 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x4e>
90020916:	4602      	mov	r2, r0
90020918:	e7b2      	b.n	90020880 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x6c>
9002091a:	4602      	mov	r2, r0
9002091c:	e7ba      	b.n	90020894 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>

9002091e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
9002091e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90020922:	b093      	sub	sp, #76	; 0x4c
90020924:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
90020928:	920f      	str	r2, [sp, #60]	; 0x3c
9002092a:	9a21      	ldr	r2, [sp, #132]	; 0x84
9002092c:	9010      	str	r0, [sp, #64]	; 0x40
9002092e:	9108      	str	r1, [sp, #32]
90020930:	6850      	ldr	r0, [r2, #4]
90020932:	9306      	str	r3, [sp, #24]
90020934:	6812      	ldr	r2, [r2, #0]
90020936:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	; 0x88
9002093a:	e9dd 461d 	ldrd	r4, r6, [sp, #116]	; 0x74
9002093e:	fb00 1303 	mla	r3, r0, r3, r1
90020942:	eb02 0943 	add.w	r9, r2, r3, lsl #1
90020946:	9b24      	ldr	r3, [sp, #144]	; 0x90
90020948:	681b      	ldr	r3, [r3, #0]
9002094a:	9307      	str	r3, [sp, #28]
9002094c:	9b24      	ldr	r3, [sp, #144]	; 0x90
9002094e:	685f      	ldr	r7, [r3, #4]
90020950:	3704      	adds	r7, #4
90020952:	9b08      	ldr	r3, [sp, #32]
90020954:	2b00      	cmp	r3, #0
90020956:	dc03      	bgt.n	90020960 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
90020958:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
9002095a:	2b00      	cmp	r3, #0
9002095c:	f340 81b2 	ble.w	90020cc4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a6>
90020960:	9b24      	ldr	r3, [sp, #144]	; 0x90
90020962:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
90020966:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
9002096a:	1e48      	subs	r0, r1, #1
9002096c:	f102 3cff 	add.w	ip, r2, #4294967295
90020970:	9b06      	ldr	r3, [sp, #24]
90020972:	2b00      	cmp	r3, #0
90020974:	f340 80a9 	ble.w	90020aca <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
90020978:	ea5f 4e24 	movs.w	lr, r4, asr #16
9002097c:	ea4f 4326 	mov.w	r3, r6, asr #16
90020980:	d406      	bmi.n	90020990 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
90020982:	4586      	cmp	lr, r0
90020984:	da04      	bge.n	90020990 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
90020986:	2b00      	cmp	r3, #0
90020988:	db02      	blt.n	90020990 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
9002098a:	4563      	cmp	r3, ip
9002098c:	f2c0 809e 	blt.w	90020acc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ae>
90020990:	f11e 0e01 	adds.w	lr, lr, #1
90020994:	f100 808f 	bmi.w	90020ab6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
90020998:	4571      	cmp	r1, lr
9002099a:	f2c0 808c 	blt.w	90020ab6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
9002099e:	3301      	adds	r3, #1
900209a0:	f100 8089 	bmi.w	90020ab6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
900209a4:	429a      	cmp	r2, r3
900209a6:	f2c0 8086 	blt.w	90020ab6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
900209aa:	f8dd b018 	ldr.w	fp, [sp, #24]
900209ae:	46c8      	mov	r8, r9
900209b0:	f1bb 0f00 	cmp.w	fp, #0
900209b4:	f340 80a6 	ble.w	90020b04 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
900209b8:	9a24      	ldr	r2, [sp, #144]	; 0x90
900209ba:	ea4f 4c26 	mov.w	ip, r6, asr #16
900209be:	9b24      	ldr	r3, [sp, #144]	; 0x90
900209c0:	f3c4 3003 	ubfx	r0, r4, #12, #4
900209c4:	f8d2 e00c 	ldr.w	lr, [r2, #12]
900209c8:	1422      	asrs	r2, r4, #16
900209ca:	f3c6 3103 	ubfx	r1, r6, #12, #4
900209ce:	689b      	ldr	r3, [r3, #8]
900209d0:	f100 80e3 	bmi.w	90020b9a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
900209d4:	f103 3aff 	add.w	sl, r3, #4294967295
900209d8:	4552      	cmp	r2, sl
900209da:	f280 80de 	bge.w	90020b9a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
900209de:	f1bc 0f00 	cmp.w	ip, #0
900209e2:	f2c0 80da 	blt.w	90020b9a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
900209e6:	f10e 3aff 	add.w	sl, lr, #4294967295
900209ea:	45d4      	cmp	ip, sl
900209ec:	f280 80d5 	bge.w	90020b9a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
900209f0:	b21b      	sxth	r3, r3
900209f2:	9d07      	ldr	r5, [sp, #28]
900209f4:	fb0c 2203 	mla	r2, ip, r3, r2
900209f8:	eb05 0a02 	add.w	sl, r5, r2
900209fc:	5caa      	ldrb	r2, [r5, r2]
900209fe:	f837 e012 	ldrh.w	lr, [r7, r2, lsl #1]
90020a02:	2800      	cmp	r0, #0
90020a04:	f000 80c0 	beq.w	90020b88 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
90020a08:	f89a 2001 	ldrb.w	r2, [sl, #1]
90020a0c:	f837 2012 	ldrh.w	r2, [r7, r2, lsl #1]
90020a10:	920b      	str	r2, [sp, #44]	; 0x2c
90020a12:	b151      	cbz	r1, 90020a2a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10c>
90020a14:	eb0a 0203 	add.w	r2, sl, r3
90020a18:	f81a 3003 	ldrb.w	r3, [sl, r3]
90020a1c:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
90020a20:	9309      	str	r3, [sp, #36]	; 0x24
90020a22:	7853      	ldrb	r3, [r2, #1]
90020a24:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
90020a28:	930c      	str	r3, [sp, #48]	; 0x30
90020a2a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
90020a2c:	fb10 f201 	smulbb	r2, r0, r1
90020a30:	9d0c      	ldr	r5, [sp, #48]	; 0x30
90020a32:	ea4f 4c03 	mov.w	ip, r3, lsl #16
90020a36:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
90020a3a:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
90020a3e:	10d2      	asrs	r2, r2, #3
90020a40:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
90020a44:	ebc2 0a40 	rsb	sl, r2, r0, lsl #1
90020a48:	ea4c 0c03 	orr.w	ip, ip, r3
90020a4c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
90020a4e:	041b      	lsls	r3, r3, #16
90020a50:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
90020a54:	432b      	orrs	r3, r5
90020a56:	4353      	muls	r3, r2
90020a58:	fb0a 330c 	mla	r3, sl, ip, r3
90020a5c:	ea4f 4c0e 	mov.w	ip, lr, lsl #16
90020a60:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
90020a64:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
90020a68:	ea4c 0e0e 	orr.w	lr, ip, lr
90020a6c:	f1c1 0c10 	rsb	ip, r1, #16
90020a70:	ebac 0c00 	sub.w	ip, ip, r0
90020a74:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
90020a78:	ebc2 0241 	rsb	r2, r2, r1, lsl #1
90020a7c:	fb0c 3c0e 	mla	ip, ip, lr, r3
90020a80:	9b09      	ldr	r3, [sp, #36]	; 0x24
90020a82:	0418      	lsls	r0, r3, #16
90020a84:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
90020a88:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
90020a8c:	4318      	orrs	r0, r3
90020a8e:	fb02 c200 	mla	r2, r2, r0, ip
90020a92:	0d53      	lsrs	r3, r2, #21
90020a94:	0952      	lsrs	r2, r2, #5
90020a96:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
90020a9a:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
90020a9e:	431a      	orrs	r2, r3
90020aa0:	f8a8 2000 	strh.w	r2, [r8]
90020aa4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
90020aa6:	f108 0802 	add.w	r8, r8, #2
90020aaa:	f10b 3bff 	add.w	fp, fp, #4294967295
90020aae:	441c      	add	r4, r3
90020ab0:	9b20      	ldr	r3, [sp, #128]	; 0x80
90020ab2:	441e      	add	r6, r3
90020ab4:	e77c      	b.n	900209b0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
90020ab6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
90020ab8:	f109 0902 	add.w	r9, r9, #2
90020abc:	441c      	add	r4, r3
90020abe:	9b20      	ldr	r3, [sp, #128]	; 0x80
90020ac0:	441e      	add	r6, r3
90020ac2:	9b06      	ldr	r3, [sp, #24]
90020ac4:	3b01      	subs	r3, #1
90020ac6:	9306      	str	r3, [sp, #24]
90020ac8:	e752      	b.n	90020970 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
90020aca:	d020      	beq.n	90020b0e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
90020acc:	9b06      	ldr	r3, [sp, #24]
90020ace:	981f      	ldr	r0, [sp, #124]	; 0x7c
90020ad0:	3b01      	subs	r3, #1
90020ad2:	fb00 4003 	mla	r0, r0, r3, r4
90020ad6:	1400      	asrs	r0, r0, #16
90020ad8:	f53f af67 	bmi.w	900209aa <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
90020adc:	3901      	subs	r1, #1
90020ade:	4288      	cmp	r0, r1
90020ae0:	f6bf af63 	bge.w	900209aa <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
90020ae4:	9920      	ldr	r1, [sp, #128]	; 0x80
90020ae6:	fb01 6303 	mla	r3, r1, r3, r6
90020aea:	141b      	asrs	r3, r3, #16
90020aec:	f53f af5d 	bmi.w	900209aa <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
90020af0:	3a01      	subs	r2, #1
90020af2:	4293      	cmp	r3, r2
90020af4:	f6bf af59 	bge.w	900209aa <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
90020af8:	f8dd 8018 	ldr.w	r8, [sp, #24]
90020afc:	46ca      	mov	sl, r9
90020afe:	f1b8 0f00 	cmp.w	r8, #0
90020b02:	dc67      	bgt.n	90020bd4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
90020b04:	9b06      	ldr	r3, [sp, #24]
90020b06:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
90020b0a:	eb09 0945 	add.w	r9, r9, r5, lsl #1
90020b0e:	9b08      	ldr	r3, [sp, #32]
90020b10:	2b00      	cmp	r3, #0
90020b12:	f340 80d7 	ble.w	90020cc4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a6>
90020b16:	ee30 0a04 	vadd.f32	s0, s0, s8
90020b1a:	9b1c      	ldr	r3, [sp, #112]	; 0x70
90020b1c:	ee70 0aa4 	vadd.f32	s1, s1, s9
90020b20:	eeb0 6a62 	vmov.f32	s12, s5
90020b24:	eec6 7a80 	vdiv.f32	s15, s13, s0
90020b28:	ee31 1a05 	vadd.f32	s2, s2, s10
90020b2c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
90020b30:	ee16 4a10 	vmov	r4, s12
90020b34:	eeb0 6a43 	vmov.f32	s12, s6
90020b38:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
90020b3c:	ee16 6a10 	vmov	r6, s12
90020b40:	ee20 7aa7 	vmul.f32	s14, s1, s15
90020b44:	ee61 7a27 	vmul.f32	s15, s2, s15
90020b48:	ee77 2a62 	vsub.f32	s5, s14, s5
90020b4c:	ee37 3ac3 	vsub.f32	s6, s15, s6
90020b50:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
90020b54:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
90020b58:	ee12 2a90 	vmov	r2, s5
90020b5c:	eef0 2a47 	vmov.f32	s5, s14
90020b60:	fb92 f3f3 	sdiv	r3, r2, r3
90020b64:	ee13 2a10 	vmov	r2, s6
90020b68:	931f      	str	r3, [sp, #124]	; 0x7c
90020b6a:	9b1c      	ldr	r3, [sp, #112]	; 0x70
90020b6c:	eeb0 3a67 	vmov.f32	s6, s15
90020b70:	fb92 f3f3 	sdiv	r3, r2, r3
90020b74:	9320      	str	r3, [sp, #128]	; 0x80
90020b76:	9b08      	ldr	r3, [sp, #32]
90020b78:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
90020b7a:	3b01      	subs	r3, #1
90020b7c:	9308      	str	r3, [sp, #32]
90020b7e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
90020b80:	bf08      	it	eq
90020b82:	4613      	moveq	r3, r2
90020b84:	9306      	str	r3, [sp, #24]
90020b86:	e6e4      	b.n	90020952 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
90020b88:	2900      	cmp	r1, #0
90020b8a:	f43f af4e 	beq.w	90020a2a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10c>
90020b8e:	f81a 3003 	ldrb.w	r3, [sl, r3]
90020b92:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
90020b96:	9309      	str	r3, [sp, #36]	; 0x24
90020b98:	e747      	b.n	90020a2a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10c>
90020b9a:	f112 0a01 	adds.w	sl, r2, #1
90020b9e:	d481      	bmi.n	90020aa4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
90020ba0:	4553      	cmp	r3, sl
90020ba2:	f6ff af7f 	blt.w	90020aa4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
90020ba6:	f11c 0a01 	adds.w	sl, ip, #1
90020baa:	f53f af7b 	bmi.w	90020aa4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
90020bae:	45d6      	cmp	lr, sl
90020bb0:	f6ff af78 	blt.w	90020aa4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
90020bb4:	b21b      	sxth	r3, r3
90020bb6:	e9cd 2c02 	strd	r2, ip, [sp, #8]
90020bba:	fa0f f28e 	sxth.w	r2, lr
90020bbe:	9300      	str	r3, [sp, #0]
90020bc0:	463b      	mov	r3, r7
90020bc2:	9201      	str	r2, [sp, #4]
90020bc4:	9a07      	ldr	r2, [sp, #28]
90020bc6:	e9cd 0104 	strd	r0, r1, [sp, #16]
90020bca:	4641      	mov	r1, r8
90020bcc:	9810      	ldr	r0, [sp, #64]	; 0x40
90020bce:	f7ff fe21 	bl	90020814 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>
90020bd2:	e767      	b.n	90020aa4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
90020bd4:	9b24      	ldr	r3, [sp, #144]	; 0x90
90020bd6:	1422      	asrs	r2, r4, #16
90020bd8:	1431      	asrs	r1, r6, #16
90020bda:	9d07      	ldr	r5, [sp, #28]
90020bdc:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
90020be0:	f3c4 3e03 	ubfx	lr, r4, #12, #4
90020be4:	f3c6 3003 	ubfx	r0, r6, #12, #4
90020be8:	fb03 2101 	mla	r1, r3, r1, r2
90020bec:	9a07      	ldr	r2, [sp, #28]
90020bee:	440a      	add	r2, r1
90020bf0:	5c69      	ldrb	r1, [r5, r1]
90020bf2:	f837 1011 	ldrh.w	r1, [r7, r1, lsl #1]
90020bf6:	f1be 0f00 	cmp.w	lr, #0
90020bfa:	d05c      	beq.n	90020cb6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x398>
90020bfc:	f892 c001 	ldrb.w	ip, [r2, #1]
90020c00:	f837 501c 	ldrh.w	r5, [r7, ip, lsl #1]
90020c04:	950d      	str	r5, [sp, #52]	; 0x34
90020c06:	b150      	cbz	r0, 90020c1e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x300>
90020c08:	eb02 0c03 	add.w	ip, r2, r3
90020c0c:	5cd3      	ldrb	r3, [r2, r3]
90020c0e:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
90020c12:	930a      	str	r3, [sp, #40]	; 0x28
90020c14:	f89c 3001 	ldrb.w	r3, [ip, #1]
90020c18:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
90020c1c:	930e      	str	r3, [sp, #56]	; 0x38
90020c1e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
90020c20:	fb1e f200 	smulbb	r2, lr, r0
90020c24:	9d0e      	ldr	r5, [sp, #56]	; 0x38
90020c26:	f108 38ff 	add.w	r8, r8, #4294967295
90020c2a:	ea4f 4c03 	mov.w	ip, r3, lsl #16
90020c2e:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
90020c32:	10d2      	asrs	r2, r2, #3
90020c34:	f425 6bfc 	bic.w	fp, r5, #2016	; 0x7e0
90020c38:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
90020c3c:	ea4c 0c03 	orr.w	ip, ip, r3
90020c40:	ebc2 034e 	rsb	r3, r2, lr, lsl #1
90020c44:	9311      	str	r3, [sp, #68]	; 0x44
90020c46:	9b0e      	ldr	r3, [sp, #56]	; 0x38
90020c48:	9d11      	ldr	r5, [sp, #68]	; 0x44
90020c4a:	041b      	lsls	r3, r3, #16
90020c4c:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
90020c50:	ea43 030b 	orr.w	r3, r3, fp
90020c54:	ea4f 4b01 	mov.w	fp, r1, lsl #16
90020c58:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
90020c5c:	4353      	muls	r3, r2
90020c5e:	fb05 3c0c 	mla	ip, r5, ip, r3
90020c62:	f00b 63fc 	and.w	r3, fp, #132120576	; 0x7e00000
90020c66:	ea43 0b01 	orr.w	fp, r3, r1
90020c6a:	f1c0 0110 	rsb	r1, r0, #16
90020c6e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
90020c70:	eba1 0e0e 	sub.w	lr, r1, lr
90020c74:	eb02 0e4e 	add.w	lr, r2, lr, lsl #1
90020c78:	ebc2 0240 	rsb	r2, r2, r0, lsl #1
90020c7c:	fb0e cc0b 	mla	ip, lr, fp, ip
90020c80:	ea4f 4b03 	mov.w	fp, r3, lsl #16
90020c84:	f423 6efc 	bic.w	lr, r3, #2016	; 0x7e0
90020c88:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
90020c8c:	ea4b 0e0e 	orr.w	lr, fp, lr
90020c90:	fb02 cc0e 	mla	ip, r2, lr, ip
90020c94:	ea4f 535c 	mov.w	r3, ip, lsr #21
90020c98:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
90020c9c:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
90020ca0:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
90020ca4:	ea43 0c0c 	orr.w	ip, r3, ip
90020ca8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
90020caa:	441c      	add	r4, r3
90020cac:	9b20      	ldr	r3, [sp, #128]	; 0x80
90020cae:	f82a cb02 	strh.w	ip, [sl], #2
90020cb2:	441e      	add	r6, r3
90020cb4:	e723      	b.n	90020afe <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
90020cb6:	2800      	cmp	r0, #0
90020cb8:	d0b1      	beq.n	90020c1e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x300>
90020cba:	5cd3      	ldrb	r3, [r2, r3]
90020cbc:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
90020cc0:	930a      	str	r3, [sp, #40]	; 0x28
90020cc2:	e7ac      	b.n	90020c1e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x300>
90020cc4:	b013      	add	sp, #76	; 0x4c
90020cc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

90020cca <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh>:
90020cca:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90020cce:	880d      	ldrh	r5, [r1, #0]
90020cd0:	b087      	sub	sp, #28
90020cd2:	10ef      	asrs	r7, r5, #3
90020cd4:	9103      	str	r1, [sp, #12]
90020cd6:	ea4f 2a25 	mov.w	sl, r5, asr #8
90020cda:	f9bd 9040 	ldrsh.w	r9, [sp, #64]	; 0x40
90020cde:	00ed      	lsls	r5, r5, #3
90020ce0:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
90020ce4:	f00a 0af8 	and.w	sl, sl, #248	; 0xf8
90020ce8:	f9bd b044 	ldrsh.w	fp, [sp, #68]	; 0x44
90020cec:	b2ed      	uxtb	r5, r5
90020cee:	9701      	str	r7, [sp, #4]
90020cf0:	f89d 4050 	ldrb.w	r4, [sp, #80]	; 0x50
90020cf4:	9502      	str	r5, [sp, #8]
90020cf6:	9d01      	ldr	r5, [sp, #4]
90020cf8:	9902      	ldr	r1, [sp, #8]
90020cfa:	022d      	lsls	r5, r5, #8
90020cfc:	f89d e054 	ldrb.w	lr, [sp, #84]	; 0x54
90020d00:	f89d 8058 	ldrb.w	r8, [sp, #88]	; 0x58
90020d04:	ea45 450a 	orr.w	r5, r5, sl, lsl #16
90020d08:	e9dd 0612 	ldrd	r0, r6, [sp, #72]	; 0x48
90020d0c:	430d      	orrs	r5, r1
90020d0e:	fb06 0709 	mla	r7, r6, r9, r0
90020d12:	2e00      	cmp	r6, #0
90020d14:	9505      	str	r5, [sp, #20]
90020d16:	eb02 0c07 	add.w	ip, r2, r7
90020d1a:	f2c0 80b6 	blt.w	90020e8a <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c0>
90020d1e:	45b3      	cmp	fp, r6
90020d20:	f340 80b3 	ble.w	90020e8a <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c0>
90020d24:	2800      	cmp	r0, #0
90020d26:	f2c0 80ae 	blt.w	90020e86 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1bc>
90020d2a:	4581      	cmp	r9, r0
90020d2c:	f340 80ab 	ble.w	90020e86 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1bc>
90020d30:	5dd7      	ldrb	r7, [r2, r7]
90020d32:	eb07 0747 	add.w	r7, r7, r7, lsl #1
90020d36:	441f      	add	r7, r3
90020d38:	1c42      	adds	r2, r0, #1
90020d3a:	f100 80a9 	bmi.w	90020e90 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c6>
90020d3e:	4591      	cmp	r9, r2
90020d40:	f340 80a6 	ble.w	90020e90 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c6>
90020d44:	2c00      	cmp	r4, #0
90020d46:	f000 80a3 	beq.w	90020e90 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c6>
90020d4a:	f89c 5001 	ldrb.w	r5, [ip, #1]
90020d4e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
90020d52:	441d      	add	r5, r3
90020d54:	3601      	adds	r6, #1
90020d56:	f100 809f 	bmi.w	90020e98 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ce>
90020d5a:	45b3      	cmp	fp, r6
90020d5c:	f340 809c 	ble.w	90020e98 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ce>
90020d60:	f1be 0f00 	cmp.w	lr, #0
90020d64:	f000 8098 	beq.w	90020e98 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ce>
90020d68:	2800      	cmp	r0, #0
90020d6a:	f2c0 8093 	blt.w	90020e94 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ca>
90020d6e:	4581      	cmp	r9, r0
90020d70:	f340 8090 	ble.w	90020e94 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ca>
90020d74:	f81c 6009 	ldrb.w	r6, [ip, r9]
90020d78:	eb06 0646 	add.w	r6, r6, r6, lsl #1
90020d7c:	441e      	add	r6, r3
90020d7e:	3001      	adds	r0, #1
90020d80:	f100 808d 	bmi.w	90020e9e <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1d4>
90020d84:	4581      	cmp	r9, r0
90020d86:	f340 808a 	ble.w	90020e9e <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1d4>
90020d8a:	2c00      	cmp	r4, #0
90020d8c:	f000 8087 	beq.w	90020e9e <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1d4>
90020d90:	44e1      	add	r9, ip
90020d92:	f899 2001 	ldrb.w	r2, [r9, #1]
90020d96:	eb02 0242 	add.w	r2, r2, r2, lsl #1
90020d9a:	4413      	add	r3, r2
90020d9c:	b2a4      	uxth	r4, r4
90020d9e:	f897 c002 	ldrb.w	ip, [r7, #2]
90020da2:	fa1f fe8e 	uxth.w	lr, lr
90020da6:	9901      	ldr	r1, [sp, #4]
90020da8:	fb04 fb0e 	mul.w	fp, r4, lr
90020dac:	0124      	lsls	r4, r4, #4
90020dae:	ebcb 1e0e 	rsb	lr, fp, lr, lsl #4
90020db2:	f5c4 7980 	rsb	r9, r4, #256	; 0x100
90020db6:	eba4 040b 	sub.w	r4, r4, fp
90020dba:	fa1f f08e 	uxth.w	r0, lr
90020dbe:	b2a2      	uxth	r2, r4
90020dc0:	78ac      	ldrb	r4, [r5, #2]
90020dc2:	eba9 0900 	sub.w	r9, r9, r0
90020dc6:	fa1f fe88 	uxth.w	lr, r8
90020dca:	4354      	muls	r4, r2
90020dcc:	ea6f 0808 	mvn.w	r8, r8
90020dd0:	fa1f f989 	uxth.w	r9, r9
90020dd4:	fa5f f888 	uxtb.w	r8, r8
90020dd8:	fb09 440c 	mla	r4, r9, ip, r4
90020ddc:	f896 c002 	ldrb.w	ip, [r6, #2]
90020de0:	fb1a fa08 	smulbb	sl, sl, r8
90020de4:	fb00 440c 	mla	r4, r0, ip, r4
90020de8:	f893 c002 	ldrb.w	ip, [r3, #2]
90020dec:	fb0b 4c0c 	mla	ip, fp, ip, r4
90020df0:	787c      	ldrb	r4, [r7, #1]
90020df2:	783f      	ldrb	r7, [r7, #0]
90020df4:	f3cc 2c07 	ubfx	ip, ip, #8, #8
90020df8:	fb0c ac0e 	mla	ip, ip, lr, sl
90020dfc:	f895 a001 	ldrb.w	sl, [r5, #1]
90020e00:	782d      	ldrb	r5, [r5, #0]
90020e02:	fb02 fa0a 	mul.w	sl, r2, sl
90020e06:	fa1f fc8c 	uxth.w	ip, ip
90020e0a:	436a      	muls	r2, r5
90020e0c:	7835      	ldrb	r5, [r6, #0]
90020e0e:	fb09 aa04 	mla	sl, r9, r4, sl
90020e12:	7874      	ldrb	r4, [r6, #1]
90020e14:	fb09 2207 	mla	r2, r9, r7, r2
90020e18:	fb00 aa04 	mla	sl, r0, r4, sl
90020e1c:	785c      	ldrb	r4, [r3, #1]
90020e1e:	fb00 2005 	mla	r0, r0, r5, r2
90020e22:	781b      	ldrb	r3, [r3, #0]
90020e24:	fb0b a404 	mla	r4, fp, r4, sl
90020e28:	fb11 fa08 	smulbb	sl, r1, r8
90020e2c:	fb0b 0b03 	mla	fp, fp, r3, r0
90020e30:	9b02      	ldr	r3, [sp, #8]
90020e32:	f3c4 2407 	ubfx	r4, r4, #8, #8
90020e36:	fb13 f808 	smulbb	r8, r3, r8
90020e3a:	f3cb 2b07 	ubfx	fp, fp, #8, #8
90020e3e:	fb04 a40e 	mla	r4, r4, lr, sl
90020e42:	f10c 0301 	add.w	r3, ip, #1
90020e46:	fb0b 8e0e 	mla	lr, fp, lr, r8
90020e4a:	b2a4      	uxth	r4, r4
90020e4c:	fa1f fe8e 	uxth.w	lr, lr
90020e50:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
90020e54:	f104 0a01 	add.w	sl, r4, #1
90020e58:	f40c 4378 	and.w	r3, ip, #63488	; 0xf800
90020e5c:	f10e 0c01 	add.w	ip, lr, #1
90020e60:	eb0a 2414 	add.w	r4, sl, r4, lsr #8
90020e64:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
90020e68:	0964      	lsrs	r4, r4, #5
90020e6a:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
90020e6e:	f404 64fc 	and.w	r4, r4, #2016	; 0x7e0
90020e72:	ea4c 0c03 	orr.w	ip, ip, r3
90020e76:	9b03      	ldr	r3, [sp, #12]
90020e78:	ea4c 0c04 	orr.w	ip, ip, r4
90020e7c:	f8a3 c000 	strh.w	ip, [r3]
90020e80:	b007      	add	sp, #28
90020e82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90020e86:	af05      	add	r7, sp, #20
90020e88:	e756      	b.n	90020d38 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x6e>
90020e8a:	ad05      	add	r5, sp, #20
90020e8c:	462f      	mov	r7, r5
90020e8e:	e761      	b.n	90020d54 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x8a>
90020e90:	ad05      	add	r5, sp, #20
90020e92:	e75f      	b.n	90020d54 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x8a>
90020e94:	ae05      	add	r6, sp, #20
90020e96:	e772      	b.n	90020d7e <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xb4>
90020e98:	ab05      	add	r3, sp, #20
90020e9a:	461e      	mov	r6, r3
90020e9c:	e77e      	b.n	90020d9c <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xd2>
90020e9e:	ab05      	add	r3, sp, #20
90020ea0:	e77c      	b.n	90020d9c <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xd2>

90020ea2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
90020ea2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90020ea6:	b095      	sub	sp, #84	; 0x54
90020ea8:	9212      	str	r2, [sp, #72]	; 0x48
90020eaa:	9309      	str	r3, [sp, #36]	; 0x24
90020eac:	9a23      	ldr	r2, [sp, #140]	; 0x8c
90020eae:	f89d 309c 	ldrb.w	r3, [sp, #156]	; 0x9c
90020eb2:	9013      	str	r0, [sp, #76]	; 0x4c
90020eb4:	930f      	str	r3, [sp, #60]	; 0x3c
90020eb6:	6850      	ldr	r0, [r2, #4]
90020eb8:	910e      	str	r1, [sp, #56]	; 0x38
90020eba:	6812      	ldr	r2, [r2, #0]
90020ebc:	e9dd 1324 	ldrd	r1, r3, [sp, #144]	; 0x90
90020ec0:	fb00 1303 	mla	r3, r0, r3, r1
90020ec4:	eb02 0343 	add.w	r3, r2, r3, lsl #1
90020ec8:	930a      	str	r3, [sp, #40]	; 0x28
90020eca:	9b26      	ldr	r3, [sp, #152]	; 0x98
90020ecc:	681b      	ldr	r3, [r3, #0]
90020ece:	930d      	str	r3, [sp, #52]	; 0x34
90020ed0:	9b26      	ldr	r3, [sp, #152]	; 0x98
90020ed2:	685c      	ldr	r4, [r3, #4]
90020ed4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
90020ed6:	3404      	adds	r4, #4
90020ed8:	43db      	mvns	r3, r3
90020eda:	b2db      	uxtb	r3, r3
90020edc:	930b      	str	r3, [sp, #44]	; 0x2c
90020ede:	9b0e      	ldr	r3, [sp, #56]	; 0x38
90020ee0:	2b00      	cmp	r3, #0
90020ee2:	dc03      	bgt.n	90020eec <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
90020ee4:	9b12      	ldr	r3, [sp, #72]	; 0x48
90020ee6:	2b00      	cmp	r3, #0
90020ee8:	f340 8255 	ble.w	90021396 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f4>
90020eec:	9b26      	ldr	r3, [sp, #152]	; 0x98
90020eee:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
90020ef2:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
90020ef6:	1e48      	subs	r0, r1, #1
90020ef8:	1e55      	subs	r5, r2, #1
90020efa:	9b09      	ldr	r3, [sp, #36]	; 0x24
90020efc:	2b00      	cmp	r3, #0
90020efe:	f340 80f9 	ble.w	900210f4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
90020f02:	9e1f      	ldr	r6, [sp, #124]	; 0x7c
90020f04:	9b20      	ldr	r3, [sp, #128]	; 0x80
90020f06:	1436      	asrs	r6, r6, #16
90020f08:	ea4f 4323 	mov.w	r3, r3, asr #16
90020f0c:	d406      	bmi.n	90020f1c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
90020f0e:	4286      	cmp	r6, r0
90020f10:	da04      	bge.n	90020f1c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
90020f12:	2b00      	cmp	r3, #0
90020f14:	db02      	blt.n	90020f1c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
90020f16:	42ab      	cmp	r3, r5
90020f18:	f2c0 80ed 	blt.w	900210f6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x254>
90020f1c:	3601      	adds	r6, #1
90020f1e:	f100 80da 	bmi.w	900210d6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
90020f22:	42b1      	cmp	r1, r6
90020f24:	f2c0 80d7 	blt.w	900210d6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
90020f28:	3301      	adds	r3, #1
90020f2a:	f100 80d4 	bmi.w	900210d6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
90020f2e:	429a      	cmp	r2, r3
90020f30:	f2c0 80d1 	blt.w	900210d6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
90020f34:	9b09      	ldr	r3, [sp, #36]	; 0x24
90020f36:	9311      	str	r3, [sp, #68]	; 0x44
90020f38:	9b0a      	ldr	r3, [sp, #40]	; 0x28
90020f3a:	930c      	str	r3, [sp, #48]	; 0x30
90020f3c:	9b11      	ldr	r3, [sp, #68]	; 0x44
90020f3e:	2b00      	cmp	r3, #0
90020f40:	f340 80fa 	ble.w	90021138 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
90020f44:	9826      	ldr	r0, [sp, #152]	; 0x98
90020f46:	9b20      	ldr	r3, [sp, #128]	; 0x80
90020f48:	9a20      	ldr	r2, [sp, #128]	; 0x80
90020f4a:	68c6      	ldr	r6, [r0, #12]
90020f4c:	141d      	asrs	r5, r3, #16
90020f4e:	981f      	ldr	r0, [sp, #124]	; 0x7c
90020f50:	f3c2 3103 	ubfx	r1, r2, #12, #4
90020f54:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
90020f56:	9a26      	ldr	r2, [sp, #152]	; 0x98
90020f58:	1400      	asrs	r0, r0, #16
90020f5a:	f3c3 3303 	ubfx	r3, r3, #12, #4
90020f5e:	6892      	ldr	r2, [r2, #8]
90020f60:	f100 813e 	bmi.w	900211e0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
90020f64:	1e57      	subs	r7, r2, #1
90020f66:	42b8      	cmp	r0, r7
90020f68:	f280 813a 	bge.w	900211e0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
90020f6c:	2d00      	cmp	r5, #0
90020f6e:	f2c0 8137 	blt.w	900211e0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
90020f72:	1e77      	subs	r7, r6, #1
90020f74:	42bd      	cmp	r5, r7
90020f76:	f280 8133 	bge.w	900211e0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
90020f7a:	b212      	sxth	r2, r2
90020f7c:	fb05 0002 	mla	r0, r5, r2, r0
90020f80:	9d0d      	ldr	r5, [sp, #52]	; 0x34
90020f82:	f815 a000 	ldrb.w	sl, [r5, r0]
90020f86:	182e      	adds	r6, r5, r0
90020f88:	eb0a 0a4a 	add.w	sl, sl, sl, lsl #1
90020f8c:	eb04 050a 	add.w	r5, r4, sl
90020f90:	2b00      	cmp	r3, #0
90020f92:	f000 8117 	beq.w	900211c4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
90020f96:	f896 c001 	ldrb.w	ip, [r6, #1]
90020f9a:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
90020f9e:	44a4      	add	ip, r4
90020fa0:	2900      	cmp	r1, #0
90020fa2:	f000 8117 	beq.w	900211d4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
90020fa6:	18b0      	adds	r0, r6, r2
90020fa8:	5cb2      	ldrb	r2, [r6, r2]
90020faa:	7840      	ldrb	r0, [r0, #1]
90020fac:	eb02 0242 	add.w	r2, r2, r2, lsl #1
90020fb0:	eb00 0040 	add.w	r0, r0, r0, lsl #1
90020fb4:	4422      	add	r2, r4
90020fb6:	4420      	add	r0, r4
90020fb8:	b29b      	uxth	r3, r3
90020fba:	f89c 7002 	ldrb.w	r7, [ip, #2]
90020fbe:	b289      	uxth	r1, r1
90020fc0:	f895 b002 	ldrb.w	fp, [r5, #2]
90020fc4:	9e0c      	ldr	r6, [sp, #48]	; 0x30
90020fc6:	fb03 f901 	mul.w	r9, r3, r1
90020fca:	011b      	lsls	r3, r3, #4
90020fcc:	f8b6 e000 	ldrh.w	lr, [r6]
90020fd0:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
90020fd4:	f5c3 7880 	rsb	r8, r3, #256	; 0x100
90020fd8:	eba3 0309 	sub.w	r3, r3, r9
90020fdc:	f8bd 603c 	ldrh.w	r6, [sp, #60]	; 0x3c
90020fe0:	b289      	uxth	r1, r1
90020fe2:	f814 a00a 	ldrb.w	sl, [r4, sl]
90020fe6:	b29b      	uxth	r3, r3
90020fe8:	eba8 0801 	sub.w	r8, r8, r1
90020fec:	435f      	muls	r7, r3
90020fee:	fa1f f888 	uxth.w	r8, r8
90020ff2:	9310      	str	r3, [sp, #64]	; 0x40
90020ff4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
90020ff6:	fb08 770b 	mla	r7, r8, fp, r7
90020ffa:	f892 b002 	ldrb.w	fp, [r2, #2]
90020ffe:	fb01 770b 	mla	r7, r1, fp, r7
90021002:	f890 b002 	ldrb.w	fp, [r0, #2]
90021006:	fb09 770b 	mla	r7, r9, fp, r7
9002100a:	ea4f 2b2e 	mov.w	fp, lr, asr #8
9002100e:	f00b 0bf8 	and.w	fp, fp, #248	; 0xf8
90021012:	f3c7 2707 	ubfx	r7, r7, #8, #8
90021016:	fb1b fb03 	smulbb	fp, fp, r3
9002101a:	9b10      	ldr	r3, [sp, #64]	; 0x40
9002101c:	fb07 b706 	mla	r7, r7, r6, fp
90021020:	f895 b001 	ldrb.w	fp, [r5, #1]
90021024:	f89c 5001 	ldrb.w	r5, [ip, #1]
90021028:	f89c c000 	ldrb.w	ip, [ip]
9002102c:	b2bf      	uxth	r7, r7
9002102e:	435d      	muls	r5, r3
90021030:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
90021032:	fb08 550b 	mla	r5, r8, fp, r5
90021036:	f892 b001 	ldrb.w	fp, [r2, #1]
9002103a:	fb01 550b 	mla	r5, r1, fp, r5
9002103e:	f890 b001 	ldrb.w	fp, [r0, #1]
90021042:	fb09 550b 	mla	r5, r9, fp, r5
90021046:	ea4f 0bee 	mov.w	fp, lr, asr #3
9002104a:	ea4f 0ece 	mov.w	lr, lr, lsl #3
9002104e:	f00b 0bfc 	and.w	fp, fp, #252	; 0xfc
90021052:	f3c5 2507 	ubfx	r5, r5, #8, #8
90021056:	fa5f fe8e 	uxtb.w	lr, lr
9002105a:	fb1b fb03 	smulbb	fp, fp, r3
9002105e:	9b10      	ldr	r3, [sp, #64]	; 0x40
90021060:	fb03 f30c 	mul.w	r3, r3, ip
90021064:	f892 c000 	ldrb.w	ip, [r2]
90021068:	fb05 b506 	mla	r5, r5, r6, fp
9002106c:	fb08 330a 	mla	r3, r8, sl, r3
90021070:	b2ad      	uxth	r5, r5
90021072:	fb01 330c 	mla	r3, r1, ip, r3
90021076:	f890 c000 	ldrb.w	ip, [r0]
9002107a:	f105 0b01 	add.w	fp, r5, #1
9002107e:	fb09 3c0c 	mla	ip, r9, ip, r3
90021082:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
90021084:	eb0b 2515 	add.w	r5, fp, r5, lsr #8
90021088:	fb1e fe03 	smulbb	lr, lr, r3
9002108c:	f3cc 2c07 	ubfx	ip, ip, #8, #8
90021090:	1c7b      	adds	r3, r7, #1
90021092:	096d      	lsrs	r5, r5, #5
90021094:	fb0c e606 	mla	r6, ip, r6, lr
90021098:	eb03 2717 	add.w	r7, r3, r7, lsr #8
9002109c:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
900210a0:	b2b6      	uxth	r6, r6
900210a2:	f407 4378 	and.w	r3, r7, #63488	; 0xf800
900210a6:	1c77      	adds	r7, r6, #1
900210a8:	eb07 2716 	add.w	r7, r7, r6, lsr #8
900210ac:	f3c7 27c4 	ubfx	r7, r7, #11, #5
900210b0:	431f      	orrs	r7, r3
900210b2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
900210b4:	433d      	orrs	r5, r7
900210b6:	801d      	strh	r5, [r3, #0]
900210b8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
900210ba:	9a21      	ldr	r2, [sp, #132]	; 0x84
900210bc:	3302      	adds	r3, #2
900210be:	930c      	str	r3, [sp, #48]	; 0x30
900210c0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
900210c2:	4413      	add	r3, r2
900210c4:	9a22      	ldr	r2, [sp, #136]	; 0x88
900210c6:	931f      	str	r3, [sp, #124]	; 0x7c
900210c8:	9b20      	ldr	r3, [sp, #128]	; 0x80
900210ca:	4413      	add	r3, r2
900210cc:	9320      	str	r3, [sp, #128]	; 0x80
900210ce:	9b11      	ldr	r3, [sp, #68]	; 0x44
900210d0:	3b01      	subs	r3, #1
900210d2:	9311      	str	r3, [sp, #68]	; 0x44
900210d4:	e732      	b.n	90020f3c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
900210d6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
900210d8:	9e21      	ldr	r6, [sp, #132]	; 0x84
900210da:	4433      	add	r3, r6
900210dc:	9e22      	ldr	r6, [sp, #136]	; 0x88
900210de:	931f      	str	r3, [sp, #124]	; 0x7c
900210e0:	9b20      	ldr	r3, [sp, #128]	; 0x80
900210e2:	4433      	add	r3, r6
900210e4:	9320      	str	r3, [sp, #128]	; 0x80
900210e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
900210e8:	3b01      	subs	r3, #1
900210ea:	9309      	str	r3, [sp, #36]	; 0x24
900210ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
900210ee:	3302      	adds	r3, #2
900210f0:	930a      	str	r3, [sp, #40]	; 0x28
900210f2:	e702      	b.n	90020efa <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
900210f4:	d027      	beq.n	90021146 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a4>
900210f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
900210f8:	9821      	ldr	r0, [sp, #132]	; 0x84
900210fa:	3b01      	subs	r3, #1
900210fc:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
900210fe:	fb00 5003 	mla	r0, r0, r3, r5
90021102:	1400      	asrs	r0, r0, #16
90021104:	f53f af16 	bmi.w	90020f34 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
90021108:	3901      	subs	r1, #1
9002110a:	4288      	cmp	r0, r1
9002110c:	f6bf af12 	bge.w	90020f34 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
90021110:	9922      	ldr	r1, [sp, #136]	; 0x88
90021112:	9820      	ldr	r0, [sp, #128]	; 0x80
90021114:	fb01 0303 	mla	r3, r1, r3, r0
90021118:	141b      	asrs	r3, r3, #16
9002111a:	f53f af0b 	bmi.w	90020f34 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
9002111e:	3a01      	subs	r2, #1
90021120:	4293      	cmp	r3, r2
90021122:	f6bf af07 	bge.w	90020f34 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
90021126:	9b09      	ldr	r3, [sp, #36]	; 0x24
90021128:	f8bd a03c 	ldrh.w	sl, [sp, #60]	; 0x3c
9002112c:	9311      	str	r3, [sp, #68]	; 0x44
9002112e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
90021130:	930c      	str	r3, [sp, #48]	; 0x30
90021132:	9b11      	ldr	r3, [sp, #68]	; 0x44
90021134:	2b00      	cmp	r3, #0
90021136:	dc70      	bgt.n	9002121a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x378>
90021138:	9b09      	ldr	r3, [sp, #36]	; 0x24
9002113a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
9002113c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
90021140:	eb02 0343 	add.w	r3, r2, r3, lsl #1
90021144:	930a      	str	r3, [sp, #40]	; 0x28
90021146:	9b0e      	ldr	r3, [sp, #56]	; 0x38
90021148:	2b00      	cmp	r3, #0
9002114a:	f340 8124 	ble.w	90021396 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f4>
9002114e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
90021152:	9b1e      	ldr	r3, [sp, #120]	; 0x78
90021154:	ee30 0a04 	vadd.f32	s0, s0, s8
90021158:	ee70 0aa4 	vadd.f32	s1, s1, s9
9002115c:	eef0 6a62 	vmov.f32	s13, s5
90021160:	eec7 7a00 	vdiv.f32	s15, s14, s0
90021164:	ee31 1a05 	vadd.f32	s2, s2, s10
90021168:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
9002116c:	edcd 6a1f 	vstr	s13, [sp, #124]	; 0x7c
90021170:	eef0 6a43 	vmov.f32	s13, s6
90021174:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
90021178:	edcd 6a20 	vstr	s13, [sp, #128]	; 0x80
9002117c:	ee20 7aa7 	vmul.f32	s14, s1, s15
90021180:	ee61 7a27 	vmul.f32	s15, s2, s15
90021184:	ee77 2a62 	vsub.f32	s5, s14, s5
90021188:	ee37 3ac3 	vsub.f32	s6, s15, s6
9002118c:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
90021190:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
90021194:	ee12 2a90 	vmov	r2, s5
90021198:	eef0 2a47 	vmov.f32	s5, s14
9002119c:	fb92 f3f3 	sdiv	r3, r2, r3
900211a0:	ee13 2a10 	vmov	r2, s6
900211a4:	9321      	str	r3, [sp, #132]	; 0x84
900211a6:	9b1e      	ldr	r3, [sp, #120]	; 0x78
900211a8:	eeb0 3a67 	vmov.f32	s6, s15
900211ac:	fb92 f3f3 	sdiv	r3, r2, r3
900211b0:	9322      	str	r3, [sp, #136]	; 0x88
900211b2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
900211b4:	9a12      	ldr	r2, [sp, #72]	; 0x48
900211b6:	3b01      	subs	r3, #1
900211b8:	930e      	str	r3, [sp, #56]	; 0x38
900211ba:	9b1e      	ldr	r3, [sp, #120]	; 0x78
900211bc:	bf08      	it	eq
900211be:	4613      	moveq	r3, r2
900211c0:	9309      	str	r3, [sp, #36]	; 0x24
900211c2:	e68c      	b.n	90020ede <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
900211c4:	b149      	cbz	r1, 900211da <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x338>
900211c6:	5cb2      	ldrb	r2, [r6, r2]
900211c8:	4628      	mov	r0, r5
900211ca:	eb02 0242 	add.w	r2, r2, r2, lsl #1
900211ce:	4422      	add	r2, r4
900211d0:	46ac      	mov	ip, r5
900211d2:	e6f1      	b.n	90020fb8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
900211d4:	4628      	mov	r0, r5
900211d6:	462a      	mov	r2, r5
900211d8:	e6ee      	b.n	90020fb8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
900211da:	4628      	mov	r0, r5
900211dc:	462a      	mov	r2, r5
900211de:	e7f7      	b.n	900211d0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32e>
900211e0:	1c47      	adds	r7, r0, #1
900211e2:	f53f af69 	bmi.w	900210b8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
900211e6:	42ba      	cmp	r2, r7
900211e8:	f6ff af66 	blt.w	900210b8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
900211ec:	1c6f      	adds	r7, r5, #1
900211ee:	f53f af63 	bmi.w	900210b8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
900211f2:	42be      	cmp	r6, r7
900211f4:	f6ff af60 	blt.w	900210b8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
900211f8:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
900211fa:	b236      	sxth	r6, r6
900211fc:	b212      	sxth	r2, r2
900211fe:	9002      	str	r0, [sp, #8]
90021200:	9601      	str	r6, [sp, #4]
90021202:	9200      	str	r2, [sp, #0]
90021204:	9813      	ldr	r0, [sp, #76]	; 0x4c
90021206:	e9cd 1705 	strd	r1, r7, [sp, #20]
9002120a:	e9cd 5303 	strd	r5, r3, [sp, #12]
9002120e:	e9dd 120c 	ldrd	r1, r2, [sp, #48]	; 0x30
90021212:	4623      	mov	r3, r4
90021214:	f7ff fd59 	bl	90020cca <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh>
90021218:	e74e      	b.n	900210b8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
9002121a:	9a20      	ldr	r2, [sp, #128]	; 0x80
9002121c:	9820      	ldr	r0, [sp, #128]	; 0x80
9002121e:	f3c2 3103 	ubfx	r1, r2, #12, #4
90021222:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
90021224:	9a26      	ldr	r2, [sp, #152]	; 0x98
90021226:	1400      	asrs	r0, r0, #16
90021228:	142d      	asrs	r5, r5, #16
9002122a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
9002122c:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
90021230:	f3c3 3303 	ubfx	r3, r3, #12, #4
90021234:	fb02 5000 	mla	r0, r2, r0, r5
90021238:	9d0d      	ldr	r5, [sp, #52]	; 0x34
9002123a:	f815 9000 	ldrb.w	r9, [r5, r0]
9002123e:	182e      	adds	r6, r5, r0
90021240:	eb09 0949 	add.w	r9, r9, r9, lsl #1
90021244:	eb04 0509 	add.w	r5, r4, r9
90021248:	2b00      	cmp	r3, #0
9002124a:	f000 8096 	beq.w	9002137a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d8>
9002124e:	7877      	ldrb	r7, [r6, #1]
90021250:	eb07 0747 	add.w	r7, r7, r7, lsl #1
90021254:	4427      	add	r7, r4
90021256:	2900      	cmp	r1, #0
90021258:	f000 8097 	beq.w	9002138a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e8>
9002125c:	18b0      	adds	r0, r6, r2
9002125e:	5cb2      	ldrb	r2, [r6, r2]
90021260:	7840      	ldrb	r0, [r0, #1]
90021262:	eb02 0242 	add.w	r2, r2, r2, lsl #1
90021266:	eb00 0040 	add.w	r0, r0, r0, lsl #1
9002126a:	4422      	add	r2, r4
9002126c:	4420      	add	r0, r4
9002126e:	b29b      	uxth	r3, r3
90021270:	9e0c      	ldr	r6, [sp, #48]	; 0x30
90021272:	b289      	uxth	r1, r1
90021274:	f895 b002 	ldrb.w	fp, [r5, #2]
90021278:	f8b6 c000 	ldrh.w	ip, [r6]
9002127c:	fb03 f801 	mul.w	r8, r3, r1
90021280:	011b      	lsls	r3, r3, #4
90021282:	78be      	ldrb	r6, [r7, #2]
90021284:	ebc8 1101 	rsb	r1, r8, r1, lsl #4
90021288:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
9002128c:	eba3 0308 	sub.w	r3, r3, r8
90021290:	f814 9009 	ldrb.w	r9, [r4, r9]
90021294:	b289      	uxth	r1, r1
90021296:	b29b      	uxth	r3, r3
90021298:	ebae 0e01 	sub.w	lr, lr, r1
9002129c:	435e      	muls	r6, r3
9002129e:	fa1f fe8e 	uxth.w	lr, lr
900212a2:	9310      	str	r3, [sp, #64]	; 0x40
900212a4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
900212a6:	fb0e 660b 	mla	r6, lr, fp, r6
900212aa:	f892 b002 	ldrb.w	fp, [r2, #2]
900212ae:	fb01 660b 	mla	r6, r1, fp, r6
900212b2:	f890 b002 	ldrb.w	fp, [r0, #2]
900212b6:	fb08 660b 	mla	r6, r8, fp, r6
900212ba:	ea4f 2b2c 	mov.w	fp, ip, asr #8
900212be:	f00b 0bf8 	and.w	fp, fp, #248	; 0xf8
900212c2:	f3c6 2607 	ubfx	r6, r6, #8, #8
900212c6:	fb1b fb03 	smulbb	fp, fp, r3
900212ca:	9b10      	ldr	r3, [sp, #64]	; 0x40
900212cc:	fb06 b60a 	mla	r6, r6, sl, fp
900212d0:	f895 b001 	ldrb.w	fp, [r5, #1]
900212d4:	787d      	ldrb	r5, [r7, #1]
900212d6:	783f      	ldrb	r7, [r7, #0]
900212d8:	b2b6      	uxth	r6, r6
900212da:	435d      	muls	r5, r3
900212dc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
900212de:	fb0e 550b 	mla	r5, lr, fp, r5
900212e2:	f892 b001 	ldrb.w	fp, [r2, #1]
900212e6:	fb01 550b 	mla	r5, r1, fp, r5
900212ea:	f890 b001 	ldrb.w	fp, [r0, #1]
900212ee:	fb08 550b 	mla	r5, r8, fp, r5
900212f2:	ea4f 0bec 	mov.w	fp, ip, asr #3
900212f6:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
900212fa:	f00b 0bfc 	and.w	fp, fp, #252	; 0xfc
900212fe:	f3c5 2507 	ubfx	r5, r5, #8, #8
90021302:	fa5f fc8c 	uxtb.w	ip, ip
90021306:	fb1b fb03 	smulbb	fp, fp, r3
9002130a:	9b10      	ldr	r3, [sp, #64]	; 0x40
9002130c:	437b      	muls	r3, r7
9002130e:	7817      	ldrb	r7, [r2, #0]
90021310:	fb05 b50a 	mla	r5, r5, sl, fp
90021314:	fb0e 3309 	mla	r3, lr, r9, r3
90021318:	b2ad      	uxth	r5, r5
9002131a:	fb01 3307 	mla	r3, r1, r7, r3
9002131e:	7807      	ldrb	r7, [r0, #0]
90021320:	f105 0b01 	add.w	fp, r5, #1
90021324:	fb08 3707 	mla	r7, r8, r7, r3
90021328:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
9002132a:	eb0b 2515 	add.w	r5, fp, r5, lsr #8
9002132e:	fb1c fc03 	smulbb	ip, ip, r3
90021332:	f3c7 2707 	ubfx	r7, r7, #8, #8
90021336:	1c73      	adds	r3, r6, #1
90021338:	096d      	lsrs	r5, r5, #5
9002133a:	fb07 c70a 	mla	r7, r7, sl, ip
9002133e:	eb03 2616 	add.w	r6, r3, r6, lsr #8
90021342:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
90021346:	b2bf      	uxth	r7, r7
90021348:	9b0c      	ldr	r3, [sp, #48]	; 0x30
9002134a:	f406 4678 	and.w	r6, r6, #63488	; 0xf800
9002134e:	1c7a      	adds	r2, r7, #1
90021350:	eb02 2217 	add.w	r2, r2, r7, lsr #8
90021354:	f3c2 22c4 	ubfx	r2, r2, #11, #5
90021358:	4316      	orrs	r6, r2
9002135a:	9a21      	ldr	r2, [sp, #132]	; 0x84
9002135c:	432e      	orrs	r6, r5
9002135e:	f823 6b02 	strh.w	r6, [r3], #2
90021362:	930c      	str	r3, [sp, #48]	; 0x30
90021364:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
90021366:	4413      	add	r3, r2
90021368:	9a22      	ldr	r2, [sp, #136]	; 0x88
9002136a:	931f      	str	r3, [sp, #124]	; 0x7c
9002136c:	9b20      	ldr	r3, [sp, #128]	; 0x80
9002136e:	4413      	add	r3, r2
90021370:	9320      	str	r3, [sp, #128]	; 0x80
90021372:	9b11      	ldr	r3, [sp, #68]	; 0x44
90021374:	3b01      	subs	r3, #1
90021376:	9311      	str	r3, [sp, #68]	; 0x44
90021378:	e6db      	b.n	90021132 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x290>
9002137a:	b149      	cbz	r1, 90021390 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ee>
9002137c:	5cb2      	ldrb	r2, [r6, r2]
9002137e:	4628      	mov	r0, r5
90021380:	eb02 0242 	add.w	r2, r2, r2, lsl #1
90021384:	4422      	add	r2, r4
90021386:	462f      	mov	r7, r5
90021388:	e771      	b.n	9002126e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3cc>
9002138a:	4628      	mov	r0, r5
9002138c:	462a      	mov	r2, r5
9002138e:	e76e      	b.n	9002126e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3cc>
90021390:	4628      	mov	r0, r5
90021392:	462a      	mov	r2, r5
90021394:	e7f7      	b.n	90021386 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
90021396:	b015      	add	sp, #84	; 0x54
90021398:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

9002139c <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh>:
9002139c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
900213a0:	880f      	ldrh	r7, [r1, #0]
900213a2:	f9bd e030 	ldrsh.w	lr, [sp, #48]	; 0x30
900213a6:	023c      	lsls	r4, r7, #8
900213a8:	f9bd 9034 	ldrsh.w	r9, [sp, #52]	; 0x34
900213ac:	f89d 0040 	ldrb.w	r0, [sp, #64]	; 0x40
900213b0:	f404 0b78 	and.w	fp, r4, #16252928	; 0xf80000
900213b4:	017c      	lsls	r4, r7, #5
900213b6:	00ff      	lsls	r7, r7, #3
900213b8:	f89d 6044 	ldrb.w	r6, [sp, #68]	; 0x44
900213bc:	f404 447c 	and.w	r4, r4, #64512	; 0xfc00
900213c0:	b2ff      	uxtb	r7, r7
900213c2:	ea4b 0404 	orr.w	r4, fp, r4
900213c6:	e9dd c50e 	ldrd	ip, r5, [sp, #56]	; 0x38
900213ca:	4327      	orrs	r7, r4
900213cc:	fb05 ca0e 	mla	sl, r5, lr, ip
900213d0:	2d00      	cmp	r5, #0
900213d2:	9701      	str	r7, [sp, #4]
900213d4:	eb02 080a 	add.w	r8, r2, sl
900213d8:	db7e      	blt.n	900214d8 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x13c>
900213da:	45a9      	cmp	r9, r5
900213dc:	dd7c      	ble.n	900214d8 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x13c>
900213de:	f1bc 0f00 	cmp.w	ip, #0
900213e2:	db77      	blt.n	900214d4 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x138>
900213e4:	45e6      	cmp	lr, ip
900213e6:	dd75      	ble.n	900214d4 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x138>
900213e8:	f812 700a 	ldrb.w	r7, [r2, sl]
900213ec:	eb07 0747 	add.w	r7, r7, r7, lsl #1
900213f0:	441f      	add	r7, r3
900213f2:	f11c 0201 	adds.w	r2, ip, #1
900213f6:	d472      	bmi.n	900214de <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x142>
900213f8:	4596      	cmp	lr, r2
900213fa:	dd70      	ble.n	900214de <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x142>
900213fc:	2800      	cmp	r0, #0
900213fe:	d06e      	beq.n	900214de <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x142>
90021400:	f898 4001 	ldrb.w	r4, [r8, #1]
90021404:	eb04 0444 	add.w	r4, r4, r4, lsl #1
90021408:	441c      	add	r4, r3
9002140a:	3501      	adds	r5, #1
9002140c:	d46b      	bmi.n	900214e6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x14a>
9002140e:	45a9      	cmp	r9, r5
90021410:	dd69      	ble.n	900214e6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x14a>
90021412:	2e00      	cmp	r6, #0
90021414:	d067      	beq.n	900214e6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x14a>
90021416:	f1bc 0f00 	cmp.w	ip, #0
9002141a:	db62      	blt.n	900214e2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x146>
9002141c:	45e6      	cmp	lr, ip
9002141e:	dd60      	ble.n	900214e2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x146>
90021420:	f818 500e 	ldrb.w	r5, [r8, lr]
90021424:	eb05 0545 	add.w	r5, r5, r5, lsl #1
90021428:	441d      	add	r5, r3
9002142a:	f11c 0201 	adds.w	r2, ip, #1
9002142e:	d45d      	bmi.n	900214ec <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x150>
90021430:	4596      	cmp	lr, r2
90021432:	dd5b      	ble.n	900214ec <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x150>
90021434:	2800      	cmp	r0, #0
90021436:	d059      	beq.n	900214ec <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x150>
90021438:	44c6      	add	lr, r8
9002143a:	f89e 2001 	ldrb.w	r2, [lr, #1]
9002143e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
90021442:	4413      	add	r3, r2
90021444:	b280      	uxth	r0, r0
90021446:	f897 e002 	ldrb.w	lr, [r7, #2]
9002144a:	b2b2      	uxth	r2, r6
9002144c:	f897 9000 	ldrb.w	r9, [r7]
90021450:	787f      	ldrb	r7, [r7, #1]
90021452:	fb00 f602 	mul.w	r6, r0, r2
90021456:	0100      	lsls	r0, r0, #4
90021458:	ebc6 1202 	rsb	r2, r6, r2, lsl #4
9002145c:	f5c0 7880 	rsb	r8, r0, #256	; 0x100
90021460:	1b80      	subs	r0, r0, r6
90021462:	fa1f fc82 	uxth.w	ip, r2
90021466:	b282      	uxth	r2, r0
90021468:	78a0      	ldrb	r0, [r4, #2]
9002146a:	eba8 080c 	sub.w	r8, r8, ip
9002146e:	4350      	muls	r0, r2
90021470:	fa1f f888 	uxth.w	r8, r8
90021474:	fb08 0e0e 	mla	lr, r8, lr, r0
90021478:	78a8      	ldrb	r0, [r5, #2]
9002147a:	fb0c e000 	mla	r0, ip, r0, lr
9002147e:	f893 e002 	ldrb.w	lr, [r3, #2]
90021482:	fb06 0e0e 	mla	lr, r6, lr, r0
90021486:	f40e 4078 	and.w	r0, lr, #63488	; 0xf800
9002148a:	f894 e000 	ldrb.w	lr, [r4]
9002148e:	fb02 fe0e 	mul.w	lr, r2, lr
90021492:	fb08 e909 	mla	r9, r8, r9, lr
90021496:	f895 e000 	ldrb.w	lr, [r5]
9002149a:	fb0c 990e 	mla	r9, ip, lr, r9
9002149e:	f893 e000 	ldrb.w	lr, [r3]
900214a2:	785b      	ldrb	r3, [r3, #1]
900214a4:	fb06 9e0e 	mla	lr, r6, lr, r9
900214a8:	f3ce 2ec4 	ubfx	lr, lr, #11, #5
900214ac:	ea4e 0e00 	orr.w	lr, lr, r0
900214b0:	7860      	ldrb	r0, [r4, #1]
900214b2:	4350      	muls	r0, r2
900214b4:	786a      	ldrb	r2, [r5, #1]
900214b6:	fb08 0007 	mla	r0, r8, r7, r0
900214ba:	fb0c 0202 	mla	r2, ip, r2, r0
900214be:	fb06 2303 	mla	r3, r6, r3, r2
900214c2:	095b      	lsrs	r3, r3, #5
900214c4:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
900214c8:	ea4e 0303 	orr.w	r3, lr, r3
900214cc:	800b      	strh	r3, [r1, #0]
900214ce:	b003      	add	sp, #12
900214d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
900214d4:	af01      	add	r7, sp, #4
900214d6:	e78c      	b.n	900213f2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x56>
900214d8:	ac01      	add	r4, sp, #4
900214da:	4627      	mov	r7, r4
900214dc:	e795      	b.n	9002140a <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x6e>
900214de:	ac01      	add	r4, sp, #4
900214e0:	e793      	b.n	9002140a <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x6e>
900214e2:	ad01      	add	r5, sp, #4
900214e4:	e7a1      	b.n	9002142a <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x8e>
900214e6:	ab01      	add	r3, sp, #4
900214e8:	461d      	mov	r5, r3
900214ea:	e7ab      	b.n	90021444 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xa8>
900214ec:	ab01      	add	r3, sp, #4
900214ee:	e7a9      	b.n	90021444 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xa8>

900214f0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
900214f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
900214f4:	b08f      	sub	sp, #60	; 0x3c
900214f6:	920c      	str	r2, [sp, #48]	; 0x30
900214f8:	9a1d      	ldr	r2, [sp, #116]	; 0x74
900214fa:	900d      	str	r0, [sp, #52]	; 0x34
900214fc:	910a      	str	r1, [sp, #40]	; 0x28
900214fe:	6850      	ldr	r0, [r2, #4]
90021500:	9306      	str	r3, [sp, #24]
90021502:	6812      	ldr	r2, [r2, #0]
90021504:	e9dd 131e 	ldrd	r1, r3, [sp, #120]	; 0x78
90021508:	e9dd b519 	ldrd	fp, r5, [sp, #100]	; 0x64
9002150c:	fb00 1303 	mla	r3, r0, r3, r1
90021510:	eb02 0343 	add.w	r3, r2, r3, lsl #1
90021514:	9307      	str	r3, [sp, #28]
90021516:	9b20      	ldr	r3, [sp, #128]	; 0x80
90021518:	681b      	ldr	r3, [r3, #0]
9002151a:	9308      	str	r3, [sp, #32]
9002151c:	9b20      	ldr	r3, [sp, #128]	; 0x80
9002151e:	685c      	ldr	r4, [r3, #4]
90021520:	3404      	adds	r4, #4
90021522:	9b0a      	ldr	r3, [sp, #40]	; 0x28
90021524:	2b00      	cmp	r3, #0
90021526:	dc03      	bgt.n	90021530 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
90021528:	9b0c      	ldr	r3, [sp, #48]	; 0x30
9002152a:	2b00      	cmp	r3, #0
9002152c:	f340 81d5 	ble.w	900218da <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ea>
90021530:	9b20      	ldr	r3, [sp, #128]	; 0x80
90021532:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
90021536:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
9002153a:	1e48      	subs	r0, r1, #1
9002153c:	1e56      	subs	r6, r2, #1
9002153e:	9b06      	ldr	r3, [sp, #24]
90021540:	2b00      	cmp	r3, #0
90021542:	f340 80b6 	ble.w	900216b2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
90021546:	ea5f 472b 	movs.w	r7, fp, asr #16
9002154a:	ea4f 4325 	mov.w	r3, r5, asr #16
9002154e:	d406      	bmi.n	9002155e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
90021550:	4287      	cmp	r7, r0
90021552:	da04      	bge.n	9002155e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
90021554:	2b00      	cmp	r3, #0
90021556:	db02      	blt.n	9002155e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
90021558:	42b3      	cmp	r3, r6
9002155a:	f2c0 80ab 	blt.w	900216b4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c4>
9002155e:	3701      	adds	r7, #1
90021560:	f100 809c 	bmi.w	9002169c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
90021564:	42b9      	cmp	r1, r7
90021566:	f2c0 8099 	blt.w	9002169c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
9002156a:	3301      	adds	r3, #1
9002156c:	f100 8096 	bmi.w	9002169c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
90021570:	429a      	cmp	r2, r3
90021572:	f2c0 8093 	blt.w	9002169c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
90021576:	9b06      	ldr	r3, [sp, #24]
90021578:	930b      	str	r3, [sp, #44]	; 0x2c
9002157a:	9b07      	ldr	r3, [sp, #28]
9002157c:	9309      	str	r3, [sp, #36]	; 0x24
9002157e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
90021580:	2b00      	cmp	r3, #0
90021582:	f340 80b4 	ble.w	900216ee <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fe>
90021586:	9820      	ldr	r0, [sp, #128]	; 0x80
90021588:	142e      	asrs	r6, r5, #16
9002158a:	9a20      	ldr	r2, [sp, #128]	; 0x80
9002158c:	f3cb 3303 	ubfx	r3, fp, #12, #4
90021590:	68c7      	ldr	r7, [r0, #12]
90021592:	ea5f 402b 	movs.w	r0, fp, asr #16
90021596:	f3c5 3103 	ubfx	r1, r5, #12, #4
9002159a:	6892      	ldr	r2, [r2, #8]
9002159c:	f100 80fb 	bmi.w	90021796 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
900215a0:	f102 3cff 	add.w	ip, r2, #4294967295
900215a4:	4560      	cmp	r0, ip
900215a6:	f280 80f6 	bge.w	90021796 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
900215aa:	2e00      	cmp	r6, #0
900215ac:	f2c0 80f3 	blt.w	90021796 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
900215b0:	f107 3cff 	add.w	ip, r7, #4294967295
900215b4:	4566      	cmp	r6, ip
900215b6:	f280 80ee 	bge.w	90021796 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
900215ba:	b212      	sxth	r2, r2
900215bc:	fb06 0002 	mla	r0, r6, r2, r0
900215c0:	9e08      	ldr	r6, [sp, #32]
900215c2:	1837      	adds	r7, r6, r0
900215c4:	5c30      	ldrb	r0, [r6, r0]
900215c6:	eb00 0840 	add.w	r8, r0, r0, lsl #1
900215ca:	eb04 0c08 	add.w	ip, r4, r8
900215ce:	2b00      	cmp	r3, #0
900215d0:	f000 80d3 	beq.w	9002177a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
900215d4:	787e      	ldrb	r6, [r7, #1]
900215d6:	eb06 0646 	add.w	r6, r6, r6, lsl #1
900215da:	4426      	add	r6, r4
900215dc:	2900      	cmp	r1, #0
900215de:	f000 80d4 	beq.w	9002178a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
900215e2:	18b8      	adds	r0, r7, r2
900215e4:	5cba      	ldrb	r2, [r7, r2]
900215e6:	7840      	ldrb	r0, [r0, #1]
900215e8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
900215ec:	eb00 0040 	add.w	r0, r0, r0, lsl #1
900215f0:	4422      	add	r2, r4
900215f2:	4420      	add	r0, r4
900215f4:	b29b      	uxth	r3, r3
900215f6:	78b7      	ldrb	r7, [r6, #2]
900215f8:	b289      	uxth	r1, r1
900215fa:	f89c a002 	ldrb.w	sl, [ip, #2]
900215fe:	f89c c001 	ldrb.w	ip, [ip, #1]
90021602:	fb03 f901 	mul.w	r9, r3, r1
90021606:	011b      	lsls	r3, r3, #4
90021608:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
9002160c:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
90021610:	eba3 0309 	sub.w	r3, r3, r9
90021614:	b289      	uxth	r1, r1
90021616:	b29b      	uxth	r3, r3
90021618:	ebae 0e01 	sub.w	lr, lr, r1
9002161c:	435f      	muls	r7, r3
9002161e:	fa1f fe8e 	uxth.w	lr, lr
90021622:	fb0e 770a 	mla	r7, lr, sl, r7
90021626:	f892 a002 	ldrb.w	sl, [r2, #2]
9002162a:	fb01 770a 	mla	r7, r1, sl, r7
9002162e:	f890 a002 	ldrb.w	sl, [r0, #2]
90021632:	fb09 7a0a 	mla	sl, r9, sl, r7
90021636:	f814 7008 	ldrb.w	r7, [r4, r8]
9002163a:	f896 8000 	ldrb.w	r8, [r6]
9002163e:	7876      	ldrb	r6, [r6, #1]
90021640:	f40a 4a78 	and.w	sl, sl, #63488	; 0xf800
90021644:	fb03 f808 	mul.w	r8, r3, r8
90021648:	4373      	muls	r3, r6
9002164a:	fb0e 8807 	mla	r8, lr, r7, r8
9002164e:	7817      	ldrb	r7, [r2, #0]
90021650:	fb0e 330c 	mla	r3, lr, ip, r3
90021654:	fb01 8807 	mla	r8, r1, r7, r8
90021658:	7807      	ldrb	r7, [r0, #0]
9002165a:	fb09 8707 	mla	r7, r9, r7, r8
9002165e:	f3c7 27c4 	ubfx	r7, r7, #11, #5
90021662:	ea47 070a 	orr.w	r7, r7, sl
90021666:	f892 a001 	ldrb.w	sl, [r2, #1]
9002166a:	fb01 310a 	mla	r1, r1, sl, r3
9002166e:	f890 a001 	ldrb.w	sl, [r0, #1]
90021672:	9b09      	ldr	r3, [sp, #36]	; 0x24
90021674:	fb09 1a0a 	mla	sl, r9, sl, r1
90021678:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
9002167c:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
90021680:	ea47 070a 	orr.w	r7, r7, sl
90021684:	801f      	strh	r7, [r3, #0]
90021686:	9b09      	ldr	r3, [sp, #36]	; 0x24
90021688:	3302      	adds	r3, #2
9002168a:	9309      	str	r3, [sp, #36]	; 0x24
9002168c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
9002168e:	449b      	add	fp, r3
90021690:	9b1c      	ldr	r3, [sp, #112]	; 0x70
90021692:	441d      	add	r5, r3
90021694:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
90021696:	3b01      	subs	r3, #1
90021698:	930b      	str	r3, [sp, #44]	; 0x2c
9002169a:	e770      	b.n	9002157e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
9002169c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
9002169e:	449b      	add	fp, r3
900216a0:	9b1c      	ldr	r3, [sp, #112]	; 0x70
900216a2:	441d      	add	r5, r3
900216a4:	9b06      	ldr	r3, [sp, #24]
900216a6:	3b01      	subs	r3, #1
900216a8:	9306      	str	r3, [sp, #24]
900216aa:	9b07      	ldr	r3, [sp, #28]
900216ac:	3302      	adds	r3, #2
900216ae:	9307      	str	r3, [sp, #28]
900216b0:	e745      	b.n	9002153e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e>
900216b2:	d023      	beq.n	900216fc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20c>
900216b4:	9b06      	ldr	r3, [sp, #24]
900216b6:	981b      	ldr	r0, [sp, #108]	; 0x6c
900216b8:	3b01      	subs	r3, #1
900216ba:	fb00 b003 	mla	r0, r0, r3, fp
900216be:	1400      	asrs	r0, r0, #16
900216c0:	f53f af59 	bmi.w	90021576 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
900216c4:	3901      	subs	r1, #1
900216c6:	4288      	cmp	r0, r1
900216c8:	f6bf af55 	bge.w	90021576 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
900216cc:	991c      	ldr	r1, [sp, #112]	; 0x70
900216ce:	fb01 5303 	mla	r3, r1, r3, r5
900216d2:	141b      	asrs	r3, r3, #16
900216d4:	f53f af4f 	bmi.w	90021576 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
900216d8:	3a01      	subs	r2, #1
900216da:	4293      	cmp	r3, r2
900216dc:	f6bf af4b 	bge.w	90021576 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
900216e0:	9b06      	ldr	r3, [sp, #24]
900216e2:	9309      	str	r3, [sp, #36]	; 0x24
900216e4:	9b07      	ldr	r3, [sp, #28]
900216e6:	930b      	str	r3, [sp, #44]	; 0x2c
900216e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
900216ea:	2b00      	cmp	r3, #0
900216ec:	dc70      	bgt.n	900217d0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
900216ee:	9b06      	ldr	r3, [sp, #24]
900216f0:	9a07      	ldr	r2, [sp, #28]
900216f2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
900216f6:	eb02 0343 	add.w	r3, r2, r3, lsl #1
900216fa:	9307      	str	r3, [sp, #28]
900216fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
900216fe:	2b00      	cmp	r3, #0
90021700:	f340 80eb 	ble.w	900218da <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ea>
90021704:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
90021708:	9b18      	ldr	r3, [sp, #96]	; 0x60
9002170a:	ee30 0a04 	vadd.f32	s0, s0, s8
9002170e:	ee70 0aa4 	vadd.f32	s1, s1, s9
90021712:	eef0 6a62 	vmov.f32	s13, s5
90021716:	eec7 7a00 	vdiv.f32	s15, s14, s0
9002171a:	ee31 1a05 	vadd.f32	s2, s2, s10
9002171e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
90021722:	ee16 ba90 	vmov	fp, s13
90021726:	eef0 6a43 	vmov.f32	s13, s6
9002172a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
9002172e:	ee16 5a90 	vmov	r5, s13
90021732:	ee20 7aa7 	vmul.f32	s14, s1, s15
90021736:	ee61 7a27 	vmul.f32	s15, s2, s15
9002173a:	ee77 2a62 	vsub.f32	s5, s14, s5
9002173e:	ee37 3ac3 	vsub.f32	s6, s15, s6
90021742:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
90021746:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
9002174a:	ee12 2a90 	vmov	r2, s5
9002174e:	eef0 2a47 	vmov.f32	s5, s14
90021752:	fb92 f3f3 	sdiv	r3, r2, r3
90021756:	ee13 2a10 	vmov	r2, s6
9002175a:	931b      	str	r3, [sp, #108]	; 0x6c
9002175c:	9b18      	ldr	r3, [sp, #96]	; 0x60
9002175e:	eeb0 3a67 	vmov.f32	s6, s15
90021762:	fb92 f3f3 	sdiv	r3, r2, r3
90021766:	931c      	str	r3, [sp, #112]	; 0x70
90021768:	9b0a      	ldr	r3, [sp, #40]	; 0x28
9002176a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
9002176c:	3b01      	subs	r3, #1
9002176e:	930a      	str	r3, [sp, #40]	; 0x28
90021770:	9b18      	ldr	r3, [sp, #96]	; 0x60
90021772:	bf08      	it	eq
90021774:	4613      	moveq	r3, r2
90021776:	9306      	str	r3, [sp, #24]
90021778:	e6d3      	b.n	90021522 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32>
9002177a:	b149      	cbz	r1, 90021790 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a0>
9002177c:	5cba      	ldrb	r2, [r7, r2]
9002177e:	4660      	mov	r0, ip
90021780:	eb02 0242 	add.w	r2, r2, r2, lsl #1
90021784:	4422      	add	r2, r4
90021786:	4666      	mov	r6, ip
90021788:	e734      	b.n	900215f4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x104>
9002178a:	4660      	mov	r0, ip
9002178c:	4662      	mov	r2, ip
9002178e:	e731      	b.n	900215f4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x104>
90021790:	4660      	mov	r0, ip
90021792:	4662      	mov	r2, ip
90021794:	e7f7      	b.n	90021786 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
90021796:	f110 0c01 	adds.w	ip, r0, #1
9002179a:	f53f af74 	bmi.w	90021686 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
9002179e:	4562      	cmp	r2, ip
900217a0:	f6ff af71 	blt.w	90021686 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
900217a4:	f116 0c01 	adds.w	ip, r6, #1
900217a8:	f53f af6d 	bmi.w	90021686 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
900217ac:	4567      	cmp	r7, ip
900217ae:	f6ff af6a 	blt.w	90021686 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
900217b2:	b23f      	sxth	r7, r7
900217b4:	b212      	sxth	r2, r2
900217b6:	9701      	str	r7, [sp, #4]
900217b8:	9200      	str	r2, [sp, #0]
900217ba:	e9cd 3104 	strd	r3, r1, [sp, #16]
900217be:	e9cd 0602 	strd	r0, r6, [sp, #8]
900217c2:	4623      	mov	r3, r4
900217c4:	980d      	ldr	r0, [sp, #52]	; 0x34
900217c6:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
900217ca:	f7ff fde7 	bl	9002139c <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh>
900217ce:	e75a      	b.n	90021686 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
900217d0:	9a20      	ldr	r2, [sp, #128]	; 0x80
900217d2:	ea4f 462b 	mov.w	r6, fp, asr #16
900217d6:	1428      	asrs	r0, r5, #16
900217d8:	f3cb 3303 	ubfx	r3, fp, #12, #4
900217dc:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
900217e0:	f3c5 3103 	ubfx	r1, r5, #12, #4
900217e4:	fb02 6000 	mla	r0, r2, r0, r6
900217e8:	9e08      	ldr	r6, [sp, #32]
900217ea:	f816 8000 	ldrb.w	r8, [r6, r0]
900217ee:	1837      	adds	r7, r6, r0
900217f0:	eb08 0848 	add.w	r8, r8, r8, lsl #1
900217f4:	eb04 0c08 	add.w	ip, r4, r8
900217f8:	2b00      	cmp	r3, #0
900217fa:	d060      	beq.n	900218be <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ce>
900217fc:	787e      	ldrb	r6, [r7, #1]
900217fe:	eb06 0646 	add.w	r6, r6, r6, lsl #1
90021802:	4426      	add	r6, r4
90021804:	2900      	cmp	r1, #0
90021806:	d062      	beq.n	900218ce <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3de>
90021808:	18b8      	adds	r0, r7, r2
9002180a:	5cba      	ldrb	r2, [r7, r2]
9002180c:	7840      	ldrb	r0, [r0, #1]
9002180e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
90021812:	eb00 0040 	add.w	r0, r0, r0, lsl #1
90021816:	4422      	add	r2, r4
90021818:	4420      	add	r0, r4
9002181a:	b29b      	uxth	r3, r3
9002181c:	78b7      	ldrb	r7, [r6, #2]
9002181e:	b289      	uxth	r1, r1
90021820:	f89c a002 	ldrb.w	sl, [ip, #2]
90021824:	f89c c001 	ldrb.w	ip, [ip, #1]
90021828:	fb03 f901 	mul.w	r9, r3, r1
9002182c:	011b      	lsls	r3, r3, #4
9002182e:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
90021832:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
90021836:	eba3 0309 	sub.w	r3, r3, r9
9002183a:	b289      	uxth	r1, r1
9002183c:	b29b      	uxth	r3, r3
9002183e:	ebae 0e01 	sub.w	lr, lr, r1
90021842:	435f      	muls	r7, r3
90021844:	fa1f fe8e 	uxth.w	lr, lr
90021848:	fb0e 770a 	mla	r7, lr, sl, r7
9002184c:	f892 a002 	ldrb.w	sl, [r2, #2]
90021850:	fb01 770a 	mla	r7, r1, sl, r7
90021854:	f890 a002 	ldrb.w	sl, [r0, #2]
90021858:	fb09 7a0a 	mla	sl, r9, sl, r7
9002185c:	f814 7008 	ldrb.w	r7, [r4, r8]
90021860:	f896 8000 	ldrb.w	r8, [r6]
90021864:	7876      	ldrb	r6, [r6, #1]
90021866:	f40a 4a78 	and.w	sl, sl, #63488	; 0xf800
9002186a:	fb03 f808 	mul.w	r8, r3, r8
9002186e:	4373      	muls	r3, r6
90021870:	7856      	ldrb	r6, [r2, #1]
90021872:	fb0e 8807 	mla	r8, lr, r7, r8
90021876:	7817      	ldrb	r7, [r2, #0]
90021878:	fb0e 330c 	mla	r3, lr, ip, r3
9002187c:	fb01 8807 	mla	r8, r1, r7, r8
90021880:	7807      	ldrb	r7, [r0, #0]
90021882:	fb01 3306 	mla	r3, r1, r6, r3
90021886:	fb09 8707 	mla	r7, r9, r7, r8
9002188a:	f3c7 27c4 	ubfx	r7, r7, #11, #5
9002188e:	ea47 070a 	orr.w	r7, r7, sl
90021892:	f890 a001 	ldrb.w	sl, [r0, #1]
90021896:	fb09 3a0a 	mla	sl, r9, sl, r3
9002189a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
9002189c:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
900218a0:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
900218a4:	ea47 070a 	orr.w	r7, r7, sl
900218a8:	f823 7b02 	strh.w	r7, [r3], #2
900218ac:	930b      	str	r3, [sp, #44]	; 0x2c
900218ae:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
900218b0:	449b      	add	fp, r3
900218b2:	9b1c      	ldr	r3, [sp, #112]	; 0x70
900218b4:	441d      	add	r5, r3
900218b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
900218b8:	3b01      	subs	r3, #1
900218ba:	9309      	str	r3, [sp, #36]	; 0x24
900218bc:	e714      	b.n	900216e8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f8>
900218be:	b149      	cbz	r1, 900218d4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e4>
900218c0:	5cba      	ldrb	r2, [r7, r2]
900218c2:	4660      	mov	r0, ip
900218c4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
900218c8:	4422      	add	r2, r4
900218ca:	4666      	mov	r6, ip
900218cc:	e7a5      	b.n	9002181a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32a>
900218ce:	4660      	mov	r0, ip
900218d0:	4662      	mov	r2, ip
900218d2:	e7a2      	b.n	9002181a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32a>
900218d4:	4660      	mov	r0, ip
900218d6:	4662      	mov	r2, ip
900218d8:	e7f7      	b.n	900218ca <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3da>
900218da:	b00f      	add	sp, #60	; 0x3c
900218dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

900218e0 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh>:
900218e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
900218e4:	b085      	sub	sp, #20
900218e6:	e9dd 7410 	ldrd	r7, r4, [sp, #64]	; 0x40
900218ea:	f9bd c038 	ldrsh.w	ip, [sp, #56]	; 0x38
900218ee:	9102      	str	r1, [sp, #8]
900218f0:	2c00      	cmp	r4, #0
900218f2:	fb04 710c 	mla	r1, r4, ip, r7
900218f6:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	; 0x3c
900218fa:	f89d 6048 	ldrb.w	r6, [sp, #72]	; 0x48
900218fe:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
90021902:	eb02 0e01 	add.w	lr, r2, r1
90021906:	f2c0 8122 	blt.w	90021b4e <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x26e>
9002190a:	45a0      	cmp	r8, r4
9002190c:	f340 811f 	ble.w	90021b4e <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x26e>
90021910:	2f00      	cmp	r7, #0
90021912:	f2c0 811a 	blt.w	90021b4a <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x26a>
90021916:	45bc      	cmp	ip, r7
90021918:	f340 8117 	ble.w	90021b4a <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x26a>
9002191c:	5c52      	ldrb	r2, [r2, r1]
9002191e:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
90021922:	1c7a      	adds	r2, r7, #1
90021924:	f100 8116 	bmi.w	90021b54 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x274>
90021928:	4594      	cmp	ip, r2
9002192a:	f340 8113 	ble.w	90021b54 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x274>
9002192e:	2e00      	cmp	r6, #0
90021930:	f000 8112 	beq.w	90021b58 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x278>
90021934:	f89e 2001 	ldrb.w	r2, [lr, #1]
90021938:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
9002193c:	3401      	adds	r4, #1
9002193e:	f100 810f 	bmi.w	90021b60 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x280>
90021942:	45a0      	cmp	r8, r4
90021944:	f340 810c 	ble.w	90021b60 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x280>
90021948:	2800      	cmp	r0, #0
9002194a:	f000 810c 	beq.w	90021b66 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x286>
9002194e:	2f00      	cmp	r7, #0
90021950:	f2c0 8104 	blt.w	90021b5c <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x27c>
90021954:	45bc      	cmp	ip, r7
90021956:	f340 8101 	ble.w	90021b5c <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x27c>
9002195a:	f81e 200c 	ldrb.w	r2, [lr, ip]
9002195e:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
90021962:	3701      	adds	r7, #1
90021964:	f100 8102 	bmi.w	90021b6c <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x28c>
90021968:	45bc      	cmp	ip, r7
9002196a:	f340 80ff 	ble.w	90021b6c <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x28c>
9002196e:	2e00      	cmp	r6, #0
90021970:	f000 80fe 	beq.w	90021b70 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x290>
90021974:	44f4      	add	ip, lr
90021976:	f89c 2001 	ldrb.w	r2, [ip, #1]
9002197a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
9002197e:	b2b6      	uxth	r6, r6
90021980:	b280      	uxth	r0, r0
90021982:	ea4f 6a11 	mov.w	sl, r1, lsr #24
90021986:	fb00 fe06 	mul.w	lr, r0, r6
9002198a:	0136      	lsls	r6, r6, #4
9002198c:	ea4f 6b15 	mov.w	fp, r5, lsr #24
90021990:	ebce 1000 	rsb	r0, lr, r0, lsl #4
90021994:	eba6 070e 	sub.w	r7, r6, lr
90021998:	f5c6 7380 	rsb	r3, r6, #256	; 0x100
9002199c:	ea4f 6914 	mov.w	r9, r4, lsr #24
900219a0:	b280      	uxth	r0, r0
900219a2:	b2bf      	uxth	r7, r7
900219a4:	1a1b      	subs	r3, r3, r0
900219a6:	ea4f 6812 	mov.w	r8, r2, lsr #24
900219aa:	fb0a f607 	mul.w	r6, sl, r7
900219ae:	b29b      	uxth	r3, r3
900219b0:	fb0b 6603 	mla	r6, fp, r3, r6
900219b4:	fb00 6609 	mla	r6, r0, r9, r6
900219b8:	fb0e 6608 	mla	r6, lr, r8, r6
900219bc:	f3c6 2607 	ubfx	r6, r6, #8, #8
900219c0:	9600      	str	r6, [sp, #0]
900219c2:	2e00      	cmp	r6, #0
900219c4:	f000 80be 	beq.w	90021b44 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x264>
900219c8:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
900219cc:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
900219d0:	9e02      	ldr	r6, [sp, #8]
900219d2:	fb0b fc0c 	mul.w	ip, fp, ip
900219d6:	fb0b f505 	mul.w	r5, fp, r5
900219da:	8836      	ldrh	r6, [r6, #0]
900219dc:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
900219e0:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
900219e4:	9501      	str	r5, [sp, #4]
900219e6:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
900219ea:	44dc      	add	ip, fp
900219ec:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
900219f0:	f00c 15ff 	and.w	r5, ip, #16711935	; 0xff00ff
900219f4:	9503      	str	r5, [sp, #12]
900219f6:	9d01      	ldr	r5, [sp, #4]
900219f8:	f505 7c80 	add.w	ip, r5, #256	; 0x100
900219fc:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
90021a00:	f001 1cff 	and.w	ip, r1, #16711935	; 0xff00ff
90021a04:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
90021a08:	fb0a fc0c 	mul.w	ip, sl, ip
90021a0c:	ea4f 2b15 	mov.w	fp, r5, lsr #8
90021a10:	fb0a fa01 	mul.w	sl, sl, r1
90021a14:	ea4f 251c 	mov.w	r5, ip, lsr #8
90021a18:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
90021a1c:	f50a 7180 	add.w	r1, sl, #256	; 0x100
90021a20:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
90021a24:	eb01 2a1a 	add.w	sl, r1, sl, lsr #8
90021a28:	4465      	add	r5, ip
90021a2a:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
90021a2e:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
90021a32:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
90021a36:	fb09 fc0c 	mul.w	ip, r9, ip
90021a3a:	0a2d      	lsrs	r5, r5, #8
90021a3c:	fb09 f904 	mul.w	r9, r9, r4
90021a40:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
90021a44:	ea4f 211c 	mov.w	r1, ip, lsr #8
90021a48:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
90021a4c:	f509 7480 	add.w	r4, r9, #256	; 0x100
90021a50:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
90021a54:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
90021a58:	437d      	muls	r5, r7
90021a5a:	eb04 2919 	add.w	r9, r4, r9, lsr #8
90021a5e:	f002 14ff 	and.w	r4, r2, #16711935	; 0xff00ff
90021a62:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
90021a66:	4461      	add	r1, ip
90021a68:	fb08 f404 	mul.w	r4, r8, r4
90021a6c:	ea4f 2919 	mov.w	r9, r9, lsr #8
90021a70:	fb08 f802 	mul.w	r8, r8, r2
90021a74:	0a09      	lsrs	r1, r1, #8
90021a76:	0a22      	lsrs	r2, r4, #8
90021a78:	f104 1401 	add.w	r4, r4, #65537	; 0x10001
90021a7c:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
90021a80:	fb07 f70a 	mul.w	r7, r7, sl
90021a84:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
90021a88:	4414      	add	r4, r2
90021a8a:	f508 7280 	add.w	r2, r8, #256	; 0x100
90021a8e:	0a24      	lsrs	r4, r4, #8
90021a90:	eb02 2818 	add.w	r8, r2, r8, lsr #8
90021a94:	9a03      	ldr	r2, [sp, #12]
90021a96:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
90021a9a:	fb02 5503 	mla	r5, r2, r3, r5
90021a9e:	ea4f 2818 	mov.w	r8, r8, lsr #8
90021aa2:	9a00      	ldr	r2, [sp, #0]
90021aa4:	fb04 540e 	mla	r4, r4, lr, r5
90021aa8:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
90021aac:	1235      	asrs	r5, r6, #8
90021aae:	fb01 4100 	mla	r1, r1, r0, r4
90021ab2:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
90021ab6:	0a09      	lsrs	r1, r1, #8
90021ab8:	f001 14ff 	and.w	r4, r1, #16711935	; 0xff00ff
90021abc:	f40b 417f 	and.w	r1, fp, #65280	; 0xff00
90021ac0:	fb03 7101 	mla	r1, r3, r1, r7
90021ac4:	fb0e 1e08 	mla	lr, lr, r8, r1
90021ac8:	f409 417f 	and.w	r1, r9, #65280	; 0xff00
90021acc:	fb00 e101 	mla	r1, r0, r1, lr
90021ad0:	f89d 0050 	ldrb.w	r0, [sp, #80]	; 0x50
90021ad4:	b287      	uxth	r7, r0
90021ad6:	0a09      	lsrs	r1, r1, #8
90021ad8:	437a      	muls	r2, r7
90021ada:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
90021ade:	1c53      	adds	r3, r2, #1
90021ae0:	4321      	orrs	r1, r4
90021ae2:	eb03 2312 	add.w	r3, r3, r2, lsr #8
90021ae6:	0c0a      	lsrs	r2, r1, #16
90021ae8:	f3c1 2407 	ubfx	r4, r1, #8, #8
90021aec:	ea6f 2313 	mvn.w	r3, r3, lsr #8
90021af0:	b2c8      	uxtb	r0, r1
90021af2:	fb12 f207 	smulbb	r2, r2, r7
90021af6:	fb14 f407 	smulbb	r4, r4, r7
90021afa:	b2db      	uxtb	r3, r3
90021afc:	fb10 f007 	smulbb	r0, r0, r7
90021b00:	fb05 2503 	mla	r5, r5, r3, r2
90021b04:	10f2      	asrs	r2, r6, #3
90021b06:	00f6      	lsls	r6, r6, #3
90021b08:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
90021b0c:	b2ad      	uxth	r5, r5
90021b0e:	b2f6      	uxtb	r6, r6
90021b10:	fb02 4203 	mla	r2, r2, r3, r4
90021b14:	fb06 0303 	mla	r3, r6, r3, r0
90021b18:	b294      	uxth	r4, r2
90021b1a:	b299      	uxth	r1, r3
90021b1c:	1c6b      	adds	r3, r5, #1
90021b1e:	1c62      	adds	r2, r4, #1
90021b20:	eb03 2515 	add.w	r5, r3, r5, lsr #8
90021b24:	1c4b      	adds	r3, r1, #1
90021b26:	eb02 2214 	add.w	r2, r2, r4, lsr #8
90021b2a:	eb03 2311 	add.w	r3, r3, r1, lsr #8
90021b2e:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
90021b32:	0952      	lsrs	r2, r2, #5
90021b34:	f3c3 23c4 	ubfx	r3, r3, #11, #5
90021b38:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
90021b3c:	432b      	orrs	r3, r5
90021b3e:	4313      	orrs	r3, r2
90021b40:	9a02      	ldr	r2, [sp, #8]
90021b42:	8013      	strh	r3, [r2, #0]
90021b44:	b005      	add	sp, #20
90021b46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90021b4a:	2500      	movs	r5, #0
90021b4c:	e6e9      	b.n	90021922 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x42>
90021b4e:	2100      	movs	r1, #0
90021b50:	460d      	mov	r5, r1
90021b52:	e6f3      	b.n	9002193c <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x5c>
90021b54:	2100      	movs	r1, #0
90021b56:	e6f1      	b.n	9002193c <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x5c>
90021b58:	4631      	mov	r1, r6
90021b5a:	e6ef      	b.n	9002193c <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x5c>
90021b5c:	2400      	movs	r4, #0
90021b5e:	e700      	b.n	90021962 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x82>
90021b60:	2200      	movs	r2, #0
90021b62:	4614      	mov	r4, r2
90021b64:	e70b      	b.n	9002197e <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x9e>
90021b66:	4602      	mov	r2, r0
90021b68:	4604      	mov	r4, r0
90021b6a:	e708      	b.n	9002197e <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x9e>
90021b6c:	2200      	movs	r2, #0
90021b6e:	e706      	b.n	9002197e <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x9e>
90021b70:	4632      	mov	r2, r6
90021b72:	e704      	b.n	9002197e <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x9e>

90021b74 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
90021b74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90021b78:	b09f      	sub	sp, #124	; 0x7c
90021b7a:	921b      	str	r2, [sp, #108]	; 0x6c
90021b7c:	9309      	str	r3, [sp, #36]	; 0x24
90021b7e:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
90021b80:	f89d 30c4 	ldrb.w	r3, [sp, #196]	; 0xc4
90021b84:	901d      	str	r0, [sp, #116]	; 0x74
90021b86:	931c      	str	r3, [sp, #112]	; 0x70
90021b88:	6850      	ldr	r0, [r2, #4]
90021b8a:	9119      	str	r1, [sp, #100]	; 0x64
90021b8c:	6812      	ldr	r2, [r2, #0]
90021b8e:	9d2a      	ldr	r5, [sp, #168]	; 0xa8
90021b90:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
90021b94:	fb00 1303 	mla	r3, r0, r3, r1
90021b98:	eb02 0343 	add.w	r3, r2, r3, lsl #1
90021b9c:	930c      	str	r3, [sp, #48]	; 0x30
90021b9e:	9b30      	ldr	r3, [sp, #192]	; 0xc0
90021ba0:	681b      	ldr	r3, [r3, #0]
90021ba2:	9312      	str	r3, [sp, #72]	; 0x48
90021ba4:	9b30      	ldr	r3, [sp, #192]	; 0xc0
90021ba6:	685e      	ldr	r6, [r3, #4]
90021ba8:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
90021bac:	3604      	adds	r6, #4
90021bae:	930d      	str	r3, [sp, #52]	; 0x34
90021bb0:	9b19      	ldr	r3, [sp, #100]	; 0x64
90021bb2:	2b00      	cmp	r3, #0
90021bb4:	dc03      	bgt.n	90021bbe <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
90021bb6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
90021bb8:	2b00      	cmp	r3, #0
90021bba:	f340 8387 	ble.w	900222cc <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x758>
90021bbe:	9b30      	ldr	r3, [sp, #192]	; 0xc0
90021bc0:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
90021bc4:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
90021bc8:	1e48      	subs	r0, r1, #1
90021bca:	1e57      	subs	r7, r2, #1
90021bcc:	9b09      	ldr	r3, [sp, #36]	; 0x24
90021bce:	2b00      	cmp	r3, #0
90021bd0:	f340 8194 	ble.w	90021efc <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x388>
90021bd4:	9c29      	ldr	r4, [sp, #164]	; 0xa4
90021bd6:	142b      	asrs	r3, r5, #16
90021bd8:	ea5f 4c24 	movs.w	ip, r4, asr #16
90021bdc:	d406      	bmi.n	90021bec <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
90021bde:	4584      	cmp	ip, r0
90021be0:	da04      	bge.n	90021bec <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
90021be2:	2b00      	cmp	r3, #0
90021be4:	db02      	blt.n	90021bec <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
90021be6:	42bb      	cmp	r3, r7
90021be8:	f2c0 8189 	blt.w	90021efe <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
90021bec:	f11c 0c01 	adds.w	ip, ip, #1
90021bf0:	f100 8177 	bmi.w	90021ee2 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
90021bf4:	4561      	cmp	r1, ip
90021bf6:	f2c0 8174 	blt.w	90021ee2 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
90021bfa:	3301      	adds	r3, #1
90021bfc:	f100 8171 	bmi.w	90021ee2 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
90021c00:	429a      	cmp	r2, r3
90021c02:	f2c0 816e 	blt.w	90021ee2 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
90021c06:	9b09      	ldr	r3, [sp, #36]	; 0x24
90021c08:	9f0c      	ldr	r7, [sp, #48]	; 0x30
90021c0a:	931a      	str	r3, [sp, #104]	; 0x68
90021c0c:	9b1a      	ldr	r3, [sp, #104]	; 0x68
90021c0e:	2b00      	cmp	r3, #0
90021c10:	f340 8193 	ble.w	90021f3a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c6>
90021c14:	9b29      	ldr	r3, [sp, #164]	; 0xa4
90021c16:	ea4f 4c25 	mov.w	ip, r5, asr #16
90021c1a:	f3c5 3103 	ubfx	r1, r5, #12, #4
90021c1e:	f3c3 3203 	ubfx	r2, r3, #12, #4
90021c22:	9b30      	ldr	r3, [sp, #192]	; 0xc0
90021c24:	e9d3 0e02 	ldrd	r0, lr, [r3, #8]
90021c28:	9b29      	ldr	r3, [sp, #164]	; 0xa4
90021c2a:	141b      	asrs	r3, r3, #16
90021c2c:	f100 81d6 	bmi.w	90021fdc <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x468>
90021c30:	f100 38ff 	add.w	r8, r0, #4294967295
90021c34:	4543      	cmp	r3, r8
90021c36:	f280 81d1 	bge.w	90021fdc <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x468>
90021c3a:	f1bc 0f00 	cmp.w	ip, #0
90021c3e:	f2c0 81cd 	blt.w	90021fdc <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x468>
90021c42:	f10e 38ff 	add.w	r8, lr, #4294967295
90021c46:	45c4      	cmp	ip, r8
90021c48:	f280 81c8 	bge.w	90021fdc <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x468>
90021c4c:	b200      	sxth	r0, r0
90021c4e:	9c12      	ldr	r4, [sp, #72]	; 0x48
90021c50:	fb0c 3300 	mla	r3, ip, r0, r3
90021c54:	eb04 0803 	add.w	r8, r4, r3
90021c58:	5ce3      	ldrb	r3, [r4, r3]
90021c5a:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
90021c5e:	ea4f 6e13 	mov.w	lr, r3, lsr #24
90021c62:	2a00      	cmp	r2, #0
90021c64:	f000 81af 	beq.w	90021fc6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
90021c68:	f898 c001 	ldrb.w	ip, [r8, #1]
90021c6c:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
90021c70:	940e      	str	r4, [sp, #56]	; 0x38
90021c72:	0e24      	lsrs	r4, r4, #24
90021c74:	9415      	str	r4, [sp, #84]	; 0x54
90021c76:	b179      	cbz	r1, 90021c98 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x124>
90021c78:	eb08 0c00 	add.w	ip, r8, r0
90021c7c:	f818 0000 	ldrb.w	r0, [r8, r0]
90021c80:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
90021c84:	900a      	str	r0, [sp, #40]	; 0x28
90021c86:	0e00      	lsrs	r0, r0, #24
90021c88:	9013      	str	r0, [sp, #76]	; 0x4c
90021c8a:	f89c 0001 	ldrb.w	r0, [ip, #1]
90021c8e:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
90021c92:	900f      	str	r0, [sp, #60]	; 0x3c
90021c94:	0e00      	lsrs	r0, r0, #24
90021c96:	9016      	str	r0, [sp, #88]	; 0x58
90021c98:	b292      	uxth	r2, r2
90021c9a:	9815      	ldr	r0, [sp, #84]	; 0x54
90021c9c:	b289      	uxth	r1, r1
90021c9e:	9c13      	ldr	r4, [sp, #76]	; 0x4c
90021ca0:	fb02 f901 	mul.w	r9, r2, r1
90021ca4:	0112      	lsls	r2, r2, #4
90021ca6:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
90021caa:	eba2 0809 	sub.w	r8, r2, r9
90021cae:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
90021cb2:	b289      	uxth	r1, r1
90021cb4:	fa1f f888 	uxth.w	r8, r8
90021cb8:	1a52      	subs	r2, r2, r1
90021cba:	fb08 f000 	mul.w	r0, r8, r0
90021cbe:	b292      	uxth	r2, r2
90021cc0:	fb02 000e 	mla	r0, r2, lr, r0
90021cc4:	fb01 0004 	mla	r0, r1, r4, r0
90021cc8:	9c16      	ldr	r4, [sp, #88]	; 0x58
90021cca:	fb09 0004 	mla	r0, r9, r4, r0
90021cce:	f3c0 2007 	ubfx	r0, r0, #8, #8
90021cd2:	2800      	cmp	r0, #0
90021cd4:	f000 80fa 	beq.w	90021ecc <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
90021cd8:	f1be 0fff 	cmp.w	lr, #255	; 0xff
90021cdc:	d01b      	beq.n	90021d16 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
90021cde:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
90021ce2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
90021ce6:	fb0e fa0a 	mul.w	sl, lr, sl
90021cea:	fb0e fe03 	mul.w	lr, lr, r3
90021cee:	ea4f 231a 	mov.w	r3, sl, lsr #8
90021cf2:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
90021cf6:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
90021cfa:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
90021cfe:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
90021d02:	4453      	add	r3, sl
90021d04:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
90021d08:	0a1b      	lsrs	r3, r3, #8
90021d0a:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
90021d0e:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
90021d12:	ea43 030c 	orr.w	r3, r3, ip
90021d16:	9c15      	ldr	r4, [sp, #84]	; 0x54
90021d18:	2cff      	cmp	r4, #255	; 0xff
90021d1a:	d021      	beq.n	90021d60 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ec>
90021d1c:	9c0e      	ldr	r4, [sp, #56]	; 0x38
90021d1e:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
90021d22:	9c15      	ldr	r4, [sp, #84]	; 0x54
90021d24:	fb04 fb0b 	mul.w	fp, r4, fp
90021d28:	9c0e      	ldr	r4, [sp, #56]	; 0x38
90021d2a:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
90021d2e:	9c15      	ldr	r4, [sp, #84]	; 0x54
90021d30:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
90021d34:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
90021d38:	fb04 fa0a 	mul.w	sl, r4, sl
90021d3c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
90021d40:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
90021d44:	44de      	add	lr, fp
90021d46:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
90021d4a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
90021d4e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
90021d52:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
90021d56:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
90021d5a:	ea4e 040a 	orr.w	r4, lr, sl
90021d5e:	940e      	str	r4, [sp, #56]	; 0x38
90021d60:	9c13      	ldr	r4, [sp, #76]	; 0x4c
90021d62:	2cff      	cmp	r4, #255	; 0xff
90021d64:	d021      	beq.n	90021daa <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
90021d66:	9c0a      	ldr	r4, [sp, #40]	; 0x28
90021d68:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
90021d6c:	9c13      	ldr	r4, [sp, #76]	; 0x4c
90021d6e:	fb04 fb0b 	mul.w	fp, r4, fp
90021d72:	9c0a      	ldr	r4, [sp, #40]	; 0x28
90021d74:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
90021d78:	9c13      	ldr	r4, [sp, #76]	; 0x4c
90021d7a:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
90021d7e:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
90021d82:	fb04 fa0a 	mul.w	sl, r4, sl
90021d86:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
90021d8a:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
90021d8e:	44de      	add	lr, fp
90021d90:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
90021d94:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
90021d98:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
90021d9c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
90021da0:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
90021da4:	ea4e 040a 	orr.w	r4, lr, sl
90021da8:	940a      	str	r4, [sp, #40]	; 0x28
90021daa:	9c16      	ldr	r4, [sp, #88]	; 0x58
90021dac:	2cff      	cmp	r4, #255	; 0xff
90021dae:	d021      	beq.n	90021df4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x280>
90021db0:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
90021db2:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
90021db6:	9c16      	ldr	r4, [sp, #88]	; 0x58
90021db8:	fb04 fb0b 	mul.w	fp, r4, fp
90021dbc:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
90021dbe:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
90021dc2:	9c16      	ldr	r4, [sp, #88]	; 0x58
90021dc4:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
90021dc8:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
90021dcc:	fb04 fa0a 	mul.w	sl, r4, sl
90021dd0:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
90021dd4:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
90021dd8:	44de      	add	lr, fp
90021dda:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
90021dde:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
90021de2:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
90021de6:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
90021dea:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
90021dee:	ea4e 040a 	orr.w	r4, lr, sl
90021df2:	940f      	str	r4, [sp, #60]	; 0x3c
90021df4:	9c0e      	ldr	r4, [sp, #56]	; 0x38
90021df6:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
90021dfa:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
90021dfe:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
90021e02:	9c0a      	ldr	r4, [sp, #40]	; 0x28
90021e04:	fb08 fc0c 	mul.w	ip, r8, ip
90021e08:	fb02 cc0e 	mla	ip, r2, lr, ip
90021e0c:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
90021e10:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
90021e12:	fb01 cc0e 	mla	ip, r1, lr, ip
90021e16:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
90021e1a:	9c0e      	ldr	r4, [sp, #56]	; 0x38
90021e1c:	fb09 cc0e 	mla	ip, r9, lr, ip
90021e20:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
90021e24:	9c0d      	ldr	r4, [sp, #52]	; 0x34
90021e26:	fb08 f80e 	mul.w	r8, r8, lr
90021e2a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
90021e2e:	fb02 8303 	mla	r3, r2, r3, r8
90021e32:	9a0a      	ldr	r2, [sp, #40]	; 0x28
90021e34:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
90021e38:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
90021e3c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
90021e3e:	fb01 330a 	mla	r3, r1, sl, r3
90021e42:	f402 417f 	and.w	r1, r2, #65280	; 0xff00
90021e46:	9a0d      	ldr	r2, [sp, #52]	; 0x34
90021e48:	fb09 3901 	mla	r9, r9, r1, r3
90021e4c:	883b      	ldrh	r3, [r7, #0]
90021e4e:	4342      	muls	r2, r0
90021e50:	ea4f 2919 	mov.w	r9, r9, lsr #8
90021e54:	1c50      	adds	r0, r2, #1
90021e56:	1219      	asrs	r1, r3, #8
90021e58:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
90021e5c:	eb00 2012 	add.w	r0, r0, r2, lsr #8
90021e60:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
90021e64:	ea4c 0c09 	orr.w	ip, ip, r9
90021e68:	ea6f 2010 	mvn.w	r0, r0, lsr #8
90021e6c:	ea4f 421c 	mov.w	r2, ip, lsr #16
90021e70:	f3cc 2e07 	ubfx	lr, ip, #8, #8
90021e74:	b2c0      	uxtb	r0, r0
90021e76:	fb12 f204 	smulbb	r2, r2, r4
90021e7a:	fa5f fc8c 	uxtb.w	ip, ip
90021e7e:	fb1e fe04 	smulbb	lr, lr, r4
90021e82:	fb01 2100 	mla	r1, r1, r0, r2
90021e86:	10da      	asrs	r2, r3, #3
90021e88:	fb1c fc04 	smulbb	ip, ip, r4
90021e8c:	00db      	lsls	r3, r3, #3
90021e8e:	b289      	uxth	r1, r1
90021e90:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
90021e94:	b2db      	uxtb	r3, r3
90021e96:	fb02 e200 	mla	r2, r2, r0, lr
90021e9a:	fb03 c300 	mla	r3, r3, r0, ip
90021e9e:	b292      	uxth	r2, r2
90021ea0:	fa1f fc83 	uxth.w	ip, r3
90021ea4:	1c4b      	adds	r3, r1, #1
90021ea6:	eb03 2111 	add.w	r1, r3, r1, lsr #8
90021eaa:	f10c 0301 	add.w	r3, ip, #1
90021eae:	eb03 231c 	add.w	r3, r3, ip, lsr #8
90021eb2:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
90021eb6:	f3c3 23c4 	ubfx	r3, r3, #11, #5
90021eba:	430b      	orrs	r3, r1
90021ebc:	1c51      	adds	r1, r2, #1
90021ebe:	eb01 2212 	add.w	r2, r1, r2, lsr #8
90021ec2:	0952      	lsrs	r2, r2, #5
90021ec4:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
90021ec8:	4313      	orrs	r3, r2
90021eca:	803b      	strh	r3, [r7, #0]
90021ecc:	9b2b      	ldr	r3, [sp, #172]	; 0xac
90021ece:	3702      	adds	r7, #2
90021ed0:	9a29      	ldr	r2, [sp, #164]	; 0xa4
90021ed2:	441a      	add	r2, r3
90021ed4:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
90021ed6:	441d      	add	r5, r3
90021ed8:	9b1a      	ldr	r3, [sp, #104]	; 0x68
90021eda:	9229      	str	r2, [sp, #164]	; 0xa4
90021edc:	3b01      	subs	r3, #1
90021ede:	931a      	str	r3, [sp, #104]	; 0x68
90021ee0:	e694      	b.n	90021c0c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
90021ee2:	9b2b      	ldr	r3, [sp, #172]	; 0xac
90021ee4:	9c29      	ldr	r4, [sp, #164]	; 0xa4
90021ee6:	441c      	add	r4, r3
90021ee8:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
90021eea:	441d      	add	r5, r3
90021eec:	9b09      	ldr	r3, [sp, #36]	; 0x24
90021eee:	9429      	str	r4, [sp, #164]	; 0xa4
90021ef0:	3b01      	subs	r3, #1
90021ef2:	9309      	str	r3, [sp, #36]	; 0x24
90021ef4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
90021ef6:	3302      	adds	r3, #2
90021ef8:	930c      	str	r3, [sp, #48]	; 0x30
90021efa:	e667      	b.n	90021bcc <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
90021efc:	d024      	beq.n	90021f48 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3d4>
90021efe:	9b09      	ldr	r3, [sp, #36]	; 0x24
90021f00:	982b      	ldr	r0, [sp, #172]	; 0xac
90021f02:	3b01      	subs	r3, #1
90021f04:	9c29      	ldr	r4, [sp, #164]	; 0xa4
90021f06:	fb00 4003 	mla	r0, r0, r3, r4
90021f0a:	1400      	asrs	r0, r0, #16
90021f0c:	f53f ae7b 	bmi.w	90021c06 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
90021f10:	3901      	subs	r1, #1
90021f12:	4288      	cmp	r0, r1
90021f14:	f6bf ae77 	bge.w	90021c06 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
90021f18:	992c      	ldr	r1, [sp, #176]	; 0xb0
90021f1a:	fb01 5303 	mla	r3, r1, r3, r5
90021f1e:	141b      	asrs	r3, r3, #16
90021f20:	f53f ae71 	bmi.w	90021c06 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
90021f24:	3a01      	subs	r2, #1
90021f26:	4293      	cmp	r3, r2
90021f28:	f6bf ae6d 	bge.w	90021c06 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
90021f2c:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
90021f30:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
90021f34:	f1bb 0f00 	cmp.w	fp, #0
90021f38:	dc70      	bgt.n	9002201c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a8>
90021f3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
90021f3c:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
90021f40:	9b0c      	ldr	r3, [sp, #48]	; 0x30
90021f42:	eb03 0344 	add.w	r3, r3, r4, lsl #1
90021f46:	930c      	str	r3, [sp, #48]	; 0x30
90021f48:	9b19      	ldr	r3, [sp, #100]	; 0x64
90021f4a:	2b00      	cmp	r3, #0
90021f4c:	f340 81be 	ble.w	900222cc <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x758>
90021f50:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
90021f54:	9b28      	ldr	r3, [sp, #160]	; 0xa0
90021f56:	ee30 0a04 	vadd.f32	s0, s0, s8
90021f5a:	ee70 0aa4 	vadd.f32	s1, s1, s9
90021f5e:	eef0 6a62 	vmov.f32	s13, s5
90021f62:	eec7 7a00 	vdiv.f32	s15, s14, s0
90021f66:	ee31 1a05 	vadd.f32	s2, s2, s10
90021f6a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
90021f6e:	edcd 6a29 	vstr	s13, [sp, #164]	; 0xa4
90021f72:	eef0 6a43 	vmov.f32	s13, s6
90021f76:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
90021f7a:	ee16 5a90 	vmov	r5, s13
90021f7e:	ee20 7aa7 	vmul.f32	s14, s1, s15
90021f82:	ee61 7a27 	vmul.f32	s15, s2, s15
90021f86:	ee77 2a62 	vsub.f32	s5, s14, s5
90021f8a:	ee37 3ac3 	vsub.f32	s6, s15, s6
90021f8e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
90021f92:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
90021f96:	ee12 2a90 	vmov	r2, s5
90021f9a:	eef0 2a47 	vmov.f32	s5, s14
90021f9e:	fb92 f3f3 	sdiv	r3, r2, r3
90021fa2:	ee13 2a10 	vmov	r2, s6
90021fa6:	932b      	str	r3, [sp, #172]	; 0xac
90021fa8:	9b28      	ldr	r3, [sp, #160]	; 0xa0
90021faa:	eeb0 3a67 	vmov.f32	s6, s15
90021fae:	fb92 f3f3 	sdiv	r3, r2, r3
90021fb2:	932c      	str	r3, [sp, #176]	; 0xb0
90021fb4:	9b19      	ldr	r3, [sp, #100]	; 0x64
90021fb6:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
90021fb8:	3b01      	subs	r3, #1
90021fba:	9319      	str	r3, [sp, #100]	; 0x64
90021fbc:	9b28      	ldr	r3, [sp, #160]	; 0xa0
90021fbe:	bf08      	it	eq
90021fc0:	4613      	moveq	r3, r2
90021fc2:	9309      	str	r3, [sp, #36]	; 0x24
90021fc4:	e5f4      	b.n	90021bb0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
90021fc6:	2900      	cmp	r1, #0
90021fc8:	f43f ae66 	beq.w	90021c98 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x124>
90021fcc:	f818 0000 	ldrb.w	r0, [r8, r0]
90021fd0:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
90021fd4:	900a      	str	r0, [sp, #40]	; 0x28
90021fd6:	0e00      	lsrs	r0, r0, #24
90021fd8:	9013      	str	r0, [sp, #76]	; 0x4c
90021fda:	e65d      	b.n	90021c98 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x124>
90021fdc:	f113 0801 	adds.w	r8, r3, #1
90021fe0:	f53f af74 	bmi.w	90021ecc <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
90021fe4:	4540      	cmp	r0, r8
90021fe6:	f6ff af71 	blt.w	90021ecc <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
90021fea:	f11c 0801 	adds.w	r8, ip, #1
90021fee:	f53f af6d 	bmi.w	90021ecc <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
90021ff2:	45c6      	cmp	lr, r8
90021ff4:	f6ff af6a 	blt.w	90021ecc <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
90021ff8:	9c1c      	ldr	r4, [sp, #112]	; 0x70
90021ffa:	b200      	sxth	r0, r0
90021ffc:	9302      	str	r3, [sp, #8]
90021ffe:	fa0f f38e 	sxth.w	r3, lr
90022002:	9000      	str	r0, [sp, #0]
90022004:	9301      	str	r3, [sp, #4]
90022006:	4633      	mov	r3, r6
90022008:	981d      	ldr	r0, [sp, #116]	; 0x74
9002200a:	e9cd 1405 	strd	r1, r4, [sp, #20]
9002200e:	e9cd c203 	strd	ip, r2, [sp, #12]
90022012:	4639      	mov	r1, r7
90022014:	9a12      	ldr	r2, [sp, #72]	; 0x48
90022016:	f7ff fc63 	bl	900218e0 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh>
9002201a:	e757      	b.n	90021ecc <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
9002201c:	9b29      	ldr	r3, [sp, #164]	; 0xa4
9002201e:	f3c5 3003 	ubfx	r0, r5, #12, #4
90022022:	9c29      	ldr	r4, [sp, #164]	; 0xa4
90022024:	f3c3 3203 	ubfx	r2, r3, #12, #4
90022028:	9b30      	ldr	r3, [sp, #192]	; 0xc0
9002202a:	1427      	asrs	r7, r4, #16
9002202c:	9c12      	ldr	r4, [sp, #72]	; 0x48
9002202e:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
90022032:	142b      	asrs	r3, r5, #16
90022034:	fb01 7303 	mla	r3, r1, r3, r7
90022038:	18e7      	adds	r7, r4, r3
9002203a:	5ce3      	ldrb	r3, [r4, r3]
9002203c:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
90022040:	ea4f 6c13 	mov.w	ip, r3, lsr #24
90022044:	2a00      	cmp	r2, #0
90022046:	f000 8137 	beq.w	900222b8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x744>
9002204a:	f897 e001 	ldrb.w	lr, [r7, #1]
9002204e:	f856 402e 	ldr.w	r4, [r6, lr, lsl #2]
90022052:	9410      	str	r4, [sp, #64]	; 0x40
90022054:	0e24      	lsrs	r4, r4, #24
90022056:	9417      	str	r4, [sp, #92]	; 0x5c
90022058:	b170      	cbz	r0, 90022078 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x504>
9002205a:	eb07 0e01 	add.w	lr, r7, r1
9002205e:	5c79      	ldrb	r1, [r7, r1]
90022060:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
90022064:	910b      	str	r1, [sp, #44]	; 0x2c
90022066:	0e09      	lsrs	r1, r1, #24
90022068:	9114      	str	r1, [sp, #80]	; 0x50
9002206a:	f89e 1001 	ldrb.w	r1, [lr, #1]
9002206e:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
90022072:	9111      	str	r1, [sp, #68]	; 0x44
90022074:	0e09      	lsrs	r1, r1, #24
90022076:	9118      	str	r1, [sp, #96]	; 0x60
90022078:	b292      	uxth	r2, r2
9002207a:	9917      	ldr	r1, [sp, #92]	; 0x5c
9002207c:	b280      	uxth	r0, r0
9002207e:	9c14      	ldr	r4, [sp, #80]	; 0x50
90022080:	fb02 f800 	mul.w	r8, r2, r0
90022084:	0112      	lsls	r2, r2, #4
90022086:	ebc8 1000 	rsb	r0, r8, r0, lsl #4
9002208a:	eba2 0e08 	sub.w	lr, r2, r8
9002208e:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
90022092:	b280      	uxth	r0, r0
90022094:	fa1f fe8e 	uxth.w	lr, lr
90022098:	1a12      	subs	r2, r2, r0
9002209a:	fb0e f101 	mul.w	r1, lr, r1
9002209e:	b292      	uxth	r2, r2
900220a0:	fb02 110c 	mla	r1, r2, ip, r1
900220a4:	fb00 1104 	mla	r1, r0, r4, r1
900220a8:	9c18      	ldr	r4, [sp, #96]	; 0x60
900220aa:	fb08 1104 	mla	r1, r8, r4, r1
900220ae:	f3c1 2107 	ubfx	r1, r1, #8, #8
900220b2:	2900      	cmp	r1, #0
900220b4:	f000 80f5 	beq.w	900222a2 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72e>
900220b8:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
900220bc:	d019      	beq.n	900220f2 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x57e>
900220be:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
900220c2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
900220c6:	fb0c fa0a 	mul.w	sl, ip, sl
900220ca:	fb0c fc03 	mul.w	ip, ip, r3
900220ce:	ea4f 231a 	mov.w	r3, sl, lsr #8
900220d2:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
900220d6:	f50c 7780 	add.w	r7, ip, #256	; 0x100
900220da:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
900220de:	eb07 271c 	add.w	r7, r7, ip, lsr #8
900220e2:	4453      	add	r3, sl
900220e4:	0a3f      	lsrs	r7, r7, #8
900220e6:	0a1b      	lsrs	r3, r3, #8
900220e8:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
900220ec:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
900220f0:	433b      	orrs	r3, r7
900220f2:	9c17      	ldr	r4, [sp, #92]	; 0x5c
900220f4:	2cff      	cmp	r4, #255	; 0xff
900220f6:	d020      	beq.n	9002213a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c6>
900220f8:	9c10      	ldr	r4, [sp, #64]	; 0x40
900220fa:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
900220fe:	9c17      	ldr	r4, [sp, #92]	; 0x5c
90022100:	4367      	muls	r7, r4
90022102:	9c10      	ldr	r4, [sp, #64]	; 0x40
90022104:	ea4f 2c17 	mov.w	ip, r7, lsr #8
90022108:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
9002210c:	9c17      	ldr	r4, [sp, #92]	; 0x5c
9002210e:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
90022112:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
90022116:	fb04 fa0a 	mul.w	sl, r4, sl
9002211a:	44bc      	add	ip, r7
9002211c:	f50a 7780 	add.w	r7, sl, #256	; 0x100
90022120:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
90022124:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
90022128:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
9002212c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
90022130:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
90022134:	ea4c 040a 	orr.w	r4, ip, sl
90022138:	9410      	str	r4, [sp, #64]	; 0x40
9002213a:	9c14      	ldr	r4, [sp, #80]	; 0x50
9002213c:	2cff      	cmp	r4, #255	; 0xff
9002213e:	d020      	beq.n	90022182 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60e>
90022140:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
90022142:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
90022146:	9c14      	ldr	r4, [sp, #80]	; 0x50
90022148:	4367      	muls	r7, r4
9002214a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
9002214c:	ea4f 2c17 	mov.w	ip, r7, lsr #8
90022150:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
90022154:	9c14      	ldr	r4, [sp, #80]	; 0x50
90022156:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
9002215a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
9002215e:	fb04 fa0a 	mul.w	sl, r4, sl
90022162:	44bc      	add	ip, r7
90022164:	f50a 7780 	add.w	r7, sl, #256	; 0x100
90022168:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
9002216c:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
90022170:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
90022174:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
90022178:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
9002217c:	ea4c 040a 	orr.w	r4, ip, sl
90022180:	940b      	str	r4, [sp, #44]	; 0x2c
90022182:	9c18      	ldr	r4, [sp, #96]	; 0x60
90022184:	2cff      	cmp	r4, #255	; 0xff
90022186:	d020      	beq.n	900221ca <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x656>
90022188:	9c11      	ldr	r4, [sp, #68]	; 0x44
9002218a:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
9002218e:	9c18      	ldr	r4, [sp, #96]	; 0x60
90022190:	4367      	muls	r7, r4
90022192:	9c11      	ldr	r4, [sp, #68]	; 0x44
90022194:	ea4f 2c17 	mov.w	ip, r7, lsr #8
90022198:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
9002219c:	9c18      	ldr	r4, [sp, #96]	; 0x60
9002219e:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
900221a2:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
900221a6:	fb04 fa0a 	mul.w	sl, r4, sl
900221aa:	44bc      	add	ip, r7
900221ac:	f50a 7780 	add.w	r7, sl, #256	; 0x100
900221b0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
900221b4:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
900221b8:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
900221bc:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
900221c0:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
900221c4:	ea4c 040a 	orr.w	r4, ip, sl
900221c8:	9411      	str	r4, [sp, #68]	; 0x44
900221ca:	9c10      	ldr	r4, [sp, #64]	; 0x40
900221cc:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
900221d0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
900221d4:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
900221d8:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
900221da:	fb0e f707 	mul.w	r7, lr, r7
900221de:	fb02 770c 	mla	r7, r2, ip, r7
900221e2:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
900221e6:	9c11      	ldr	r4, [sp, #68]	; 0x44
900221e8:	fb00 770c 	mla	r7, r0, ip, r7
900221ec:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
900221f0:	9c10      	ldr	r4, [sp, #64]	; 0x40
900221f2:	fb08 770c 	mla	r7, r8, ip, r7
900221f6:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
900221fa:	9c0d      	ldr	r4, [sp, #52]	; 0x34
900221fc:	fb0e fe0c 	mul.w	lr, lr, ip
90022200:	0a3f      	lsrs	r7, r7, #8
90022202:	fb02 e303 	mla	r3, r2, r3, lr
90022206:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
90022208:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
9002220c:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
90022210:	9a11      	ldr	r2, [sp, #68]	; 0x44
90022212:	fb00 330a 	mla	r3, r0, sl, r3
90022216:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
9002221a:	f8b9 0000 	ldrh.w	r0, [r9]
9002221e:	fb08 3c0c 	mla	ip, r8, ip, r3
90022222:	9b0d      	ldr	r3, [sp, #52]	; 0x34
90022224:	1202      	asrs	r2, r0, #8
90022226:	434b      	muls	r3, r1
90022228:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
9002222c:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
90022230:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
90022234:	1c59      	adds	r1, r3, #1
90022236:	ea47 070c 	orr.w	r7, r7, ip
9002223a:	eb01 2113 	add.w	r1, r1, r3, lsr #8
9002223e:	0c3b      	lsrs	r3, r7, #16
90022240:	ea6f 2111 	mvn.w	r1, r1, lsr #8
90022244:	f3c7 2c07 	ubfx	ip, r7, #8, #8
90022248:	b2ff      	uxtb	r7, r7
9002224a:	fb13 f304 	smulbb	r3, r3, r4
9002224e:	b2c9      	uxtb	r1, r1
90022250:	fb1c fc04 	smulbb	ip, ip, r4
90022254:	fb02 3201 	mla	r2, r2, r1, r3
90022258:	10c3      	asrs	r3, r0, #3
9002225a:	fb17 f704 	smulbb	r7, r7, r4
9002225e:	00c0      	lsls	r0, r0, #3
90022260:	b292      	uxth	r2, r2
90022262:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
90022266:	b2c0      	uxtb	r0, r0
90022268:	fb03 c301 	mla	r3, r3, r1, ip
9002226c:	f102 0c01 	add.w	ip, r2, #1
90022270:	fb00 7001 	mla	r0, r0, r1, r7
90022274:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
90022278:	b280      	uxth	r0, r0
9002227a:	f402 4c78 	and.w	ip, r2, #63488	; 0xf800
9002227e:	b29b      	uxth	r3, r3
90022280:	1c42      	adds	r2, r0, #1
90022282:	eb02 2210 	add.w	r2, r2, r0, lsr #8
90022286:	f3c2 22c4 	ubfx	r2, r2, #11, #5
9002228a:	ea42 020c 	orr.w	r2, r2, ip
9002228e:	f103 0c01 	add.w	ip, r3, #1
90022292:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
90022296:	095b      	lsrs	r3, r3, #5
90022298:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
9002229c:	431a      	orrs	r2, r3
9002229e:	f8a9 2000 	strh.w	r2, [r9]
900222a2:	9b2b      	ldr	r3, [sp, #172]	; 0xac
900222a4:	f109 0902 	add.w	r9, r9, #2
900222a8:	9a29      	ldr	r2, [sp, #164]	; 0xa4
900222aa:	f10b 3bff 	add.w	fp, fp, #4294967295
900222ae:	441a      	add	r2, r3
900222b0:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
900222b2:	9229      	str	r2, [sp, #164]	; 0xa4
900222b4:	441d      	add	r5, r3
900222b6:	e63d      	b.n	90021f34 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c0>
900222b8:	2800      	cmp	r0, #0
900222ba:	f43f aedd 	beq.w	90022078 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x504>
900222be:	5c79      	ldrb	r1, [r7, r1]
900222c0:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
900222c4:	910b      	str	r1, [sp, #44]	; 0x2c
900222c6:	0e09      	lsrs	r1, r1, #24
900222c8:	9114      	str	r1, [sp, #80]	; 0x50
900222ca:	e6d5      	b.n	90022078 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x504>
900222cc:	b01f      	add	sp, #124	; 0x7c
900222ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

900222d2 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh>:
900222d2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
900222d6:	b089      	sub	sp, #36	; 0x24
900222d8:	9101      	str	r1, [sp, #4]
900222da:	9801      	ldr	r0, [sp, #4]
900222dc:	f9bd c048 	ldrsh.w	ip, [sp, #72]	; 0x48
900222e0:	8800      	ldrh	r0, [r0, #0]
900222e2:	f9bd 804c 	ldrsh.w	r8, [sp, #76]	; 0x4c
900222e6:	1206      	asrs	r6, r0, #8
900222e8:	f89d 5058 	ldrb.w	r5, [sp, #88]	; 0x58
900222ec:	f89d 405c 	ldrb.w	r4, [sp, #92]	; 0x5c
900222f0:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
900222f4:	9602      	str	r6, [sp, #8]
900222f6:	10c6      	asrs	r6, r0, #3
900222f8:	00c0      	lsls	r0, r0, #3
900222fa:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
900222fe:	b2c0      	uxtb	r0, r0
90022300:	9603      	str	r6, [sp, #12]
90022302:	9004      	str	r0, [sp, #16]
90022304:	e9dd 1714 	ldrd	r1, r7, [sp, #80]	; 0x50
90022308:	fb07 100c 	mla	r0, r7, ip, r1
9002230c:	2f00      	cmp	r7, #0
9002230e:	eb02 0e00 	add.w	lr, r2, r0
90022312:	f2c0 810a 	blt.w	9002252a <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x258>
90022316:	45b8      	cmp	r8, r7
90022318:	f340 8107 	ble.w	9002252a <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x258>
9002231c:	2900      	cmp	r1, #0
9002231e:	f2c0 8102 	blt.w	90022526 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x254>
90022322:	458c      	cmp	ip, r1
90022324:	f340 80ff 	ble.w	90022526 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x254>
90022328:	5c12      	ldrb	r2, [r2, r0]
9002232a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
9002232e:	1c4a      	adds	r2, r1, #1
90022330:	f100 80fe 	bmi.w	90022530 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x25e>
90022334:	4594      	cmp	ip, r2
90022336:	f340 80fb 	ble.w	90022530 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x25e>
9002233a:	2d00      	cmp	r5, #0
9002233c:	f000 80fa 	beq.w	90022534 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x262>
90022340:	f89e 2001 	ldrb.w	r2, [lr, #1]
90022344:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
90022348:	3701      	adds	r7, #1
9002234a:	f100 80f7 	bmi.w	9002253c <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x26a>
9002234e:	45b8      	cmp	r8, r7
90022350:	f340 80f4 	ble.w	9002253c <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x26a>
90022354:	2c00      	cmp	r4, #0
90022356:	f000 80f4 	beq.w	90022542 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x270>
9002235a:	2900      	cmp	r1, #0
9002235c:	eb0e 020c 	add.w	r2, lr, ip
90022360:	f2c0 80ea 	blt.w	90022538 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x266>
90022364:	458c      	cmp	ip, r1
90022366:	f340 80e7 	ble.w	90022538 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x266>
9002236a:	f81e 700c 	ldrb.w	r7, [lr, ip]
9002236e:	f853 7027 	ldr.w	r7, [r3, r7, lsl #2]
90022372:	3101      	adds	r1, #1
90022374:	f100 80e8 	bmi.w	90022548 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x276>
90022378:	458c      	cmp	ip, r1
9002237a:	f340 80e5 	ble.w	90022548 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x276>
9002237e:	2d00      	cmp	r5, #0
90022380:	f000 80e4 	beq.w	9002254c <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x27a>
90022384:	7852      	ldrb	r2, [r2, #1]
90022386:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
9002238a:	0e0b      	lsrs	r3, r1, #24
9002238c:	f007 1cff 	and.w	ip, r7, #16711935	; 0xff00ff
90022390:	ea4f 6a10 	mov.w	sl, r0, lsr #24
90022394:	9300      	str	r3, [sp, #0]
90022396:	b2a4      	uxth	r4, r4
90022398:	b2ab      	uxth	r3, r5
9002239a:	f000 15ff 	and.w	r5, r0, #16711935	; 0xff00ff
9002239e:	ea4f 6b16 	mov.w	fp, r6, lsr #24
900223a2:	fb03 f904 	mul.w	r9, r3, r4
900223a6:	011b      	lsls	r3, r3, #4
900223a8:	fb0a f505 	mul.w	r5, sl, r5
900223ac:	ea4f 6817 	mov.w	r8, r7, lsr #24
900223b0:	eba3 0e09 	sub.w	lr, r3, r9
900223b4:	f5c3 7280 	rsb	r2, r3, #256	; 0x100
900223b8:	f400 437f 	and.w	r3, r0, #65280	; 0xff00
900223bc:	0a28      	lsrs	r0, r5, #8
900223be:	f105 1501 	add.w	r5, r5, #65537	; 0x10001
900223c2:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
900223c6:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
900223ca:	fb0a f303 	mul.w	r3, sl, r3
900223ce:	fb08 f707 	mul.w	r7, r8, r7
900223d2:	ebc9 1404 	rsb	r4, r9, r4, lsl #4
900223d6:	4405      	add	r5, r0
900223d8:	fb08 fc0c 	mul.w	ip, r8, ip
900223dc:	b2a4      	uxth	r4, r4
900223de:	0a2d      	lsrs	r5, r5, #8
900223e0:	fa1f fe8e 	uxth.w	lr, lr
900223e4:	1b12      	subs	r2, r2, r4
900223e6:	f005 10ff 	and.w	r0, r5, #16711935	; 0xff00ff
900223ea:	b292      	uxth	r2, r2
900223ec:	9005      	str	r0, [sp, #20]
900223ee:	f503 7080 	add.w	r0, r3, #256	; 0x100
900223f2:	eb00 2313 	add.w	r3, r0, r3, lsr #8
900223f6:	ea4f 201c 	mov.w	r0, ip, lsr #8
900223fa:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
900223fe:	0a1b      	lsrs	r3, r3, #8
90022400:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
90022404:	9306      	str	r3, [sp, #24]
90022406:	f006 13ff 	and.w	r3, r6, #16711935	; 0xff00ff
9002240a:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
9002240e:	4460      	add	r0, ip
90022410:	fb0b f303 	mul.w	r3, fp, r3
90022414:	fb0b f606 	mul.w	r6, fp, r6
90022418:	0a00      	lsrs	r0, r0, #8
9002241a:	0a1d      	lsrs	r5, r3, #8
9002241c:	f103 1301 	add.w	r3, r3, #65537	; 0x10001
90022420:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
90022424:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
90022428:	441d      	add	r5, r3
9002242a:	f506 7380 	add.w	r3, r6, #256	; 0x100
9002242e:	eb03 2616 	add.w	r6, r3, r6, lsr #8
90022432:	f507 7380 	add.w	r3, r7, #256	; 0x100
90022436:	0a2d      	lsrs	r5, r5, #8
90022438:	eb03 2317 	add.w	r3, r3, r7, lsr #8
9002243c:	f001 17ff 	and.w	r7, r1, #16711935	; 0xff00ff
90022440:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
90022444:	0a36      	lsrs	r6, r6, #8
90022446:	0a1b      	lsrs	r3, r3, #8
90022448:	fb05 f50e 	mul.w	r5, r5, lr
9002244c:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
90022450:	9307      	str	r3, [sp, #28]
90022452:	0e0b      	lsrs	r3, r1, #24
90022454:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
90022458:	fb0e f606 	mul.w	r6, lr, r6
9002245c:	435f      	muls	r7, r3
9002245e:	4359      	muls	r1, r3
90022460:	9b05      	ldr	r3, [sp, #20]
90022462:	ea4f 2c17 	mov.w	ip, r7, lsr #8
90022466:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
9002246a:	fb03 5502 	mla	r5, r3, r2, r5
9002246e:	9b06      	ldr	r3, [sp, #24]
90022470:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
90022474:	fb0e fe0b 	mul.w	lr, lr, fp
90022478:	44bc      	add	ip, r7
9002247a:	f501 7780 	add.w	r7, r1, #256	; 0x100
9002247e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
90022482:	eb07 2111 	add.w	r1, r7, r1, lsr #8
90022486:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
9002248a:	0a09      	lsrs	r1, r1, #8
9002248c:	fb0c 5509 	mla	r5, ip, r9, r5
90022490:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
90022494:	fb00 5504 	mla	r5, r0, r4, r5
90022498:	f403 407f 	and.w	r0, r3, #65280	; 0xff00
9002249c:	9b07      	ldr	r3, [sp, #28]
9002249e:	fb02 6000 	mla	r0, r2, r0, r6
900224a2:	0a2d      	lsrs	r5, r5, #8
900224a4:	fb02 e20a 	mla	r2, r2, sl, lr
900224a8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
900224ac:	fb09 0001 	mla	r0, r9, r1, r0
900224b0:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
900224b4:	fb04 0003 	mla	r0, r4, r3, r0
900224b8:	9b00      	ldr	r3, [sp, #0]
900224ba:	fb04 2408 	mla	r4, r4, r8, r2
900224be:	9a04      	ldr	r2, [sp, #16]
900224c0:	0a00      	lsrs	r0, r0, #8
900224c2:	fb09 4903 	mla	r9, r9, r3, r4
900224c6:	9b02      	ldr	r3, [sp, #8]
900224c8:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
900224cc:	ea6f 2929 	mvn.w	r9, r9, asr #8
900224d0:	4305      	orrs	r5, r0
900224d2:	fa5f f989 	uxtb.w	r9, r9
900224d6:	fb03 f109 	mul.w	r1, r3, r9
900224da:	9b03      	ldr	r3, [sp, #12]
900224dc:	fb03 f309 	mul.w	r3, r3, r9
900224e0:	fb02 f909 	mul.w	r9, r2, r9
900224e4:	1c4a      	adds	r2, r1, #1
900224e6:	1c58      	adds	r0, r3, #1
900224e8:	eb02 2111 	add.w	r1, r2, r1, lsr #8
900224ec:	eb00 2013 	add.w	r0, r0, r3, lsr #8
900224f0:	0c2a      	lsrs	r2, r5, #16
900224f2:	0a2b      	lsrs	r3, r5, #8
900224f4:	eb02 2211 	add.w	r2, r2, r1, lsr #8
900224f8:	eb03 2310 	add.w	r3, r3, r0, lsr #8
900224fc:	0212      	lsls	r2, r2, #8
900224fe:	00db      	lsls	r3, r3, #3
90022500:	f402 4278 	and.w	r2, r2, #63488	; 0xf800
90022504:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
90022508:	4313      	orrs	r3, r2
9002250a:	f109 0201 	add.w	r2, r9, #1
9002250e:	eb02 2919 	add.w	r9, r2, r9, lsr #8
90022512:	eb05 2519 	add.w	r5, r5, r9, lsr #8
90022516:	f3c5 05c4 	ubfx	r5, r5, #3, #5
9002251a:	431d      	orrs	r5, r3
9002251c:	9b01      	ldr	r3, [sp, #4]
9002251e:	801d      	strh	r5, [r3, #0]
90022520:	b009      	add	sp, #36	; 0x24
90022522:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90022526:	2000      	movs	r0, #0
90022528:	e701      	b.n	9002232e <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x5c>
9002252a:	2600      	movs	r6, #0
9002252c:	4630      	mov	r0, r6
9002252e:	e70b      	b.n	90022348 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x76>
90022530:	2600      	movs	r6, #0
90022532:	e709      	b.n	90022348 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x76>
90022534:	462e      	mov	r6, r5
90022536:	e707      	b.n	90022348 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x76>
90022538:	2700      	movs	r7, #0
9002253a:	e71a      	b.n	90022372 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xa0>
9002253c:	2100      	movs	r1, #0
9002253e:	460f      	mov	r7, r1
90022540:	e723      	b.n	9002238a <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xb8>
90022542:	4621      	mov	r1, r4
90022544:	4627      	mov	r7, r4
90022546:	e720      	b.n	9002238a <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xb8>
90022548:	2100      	movs	r1, #0
9002254a:	e71e      	b.n	9002238a <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xb8>
9002254c:	4629      	mov	r1, r5
9002254e:	e71c      	b.n	9002238a <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xb8>

90022550 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
90022550:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90022554:	b09b      	sub	sp, #108	; 0x6c
90022556:	9218      	str	r2, [sp, #96]	; 0x60
90022558:	9a29      	ldr	r2, [sp, #164]	; 0xa4
9002255a:	9019      	str	r0, [sp, #100]	; 0x64
9002255c:	9116      	str	r1, [sp, #88]	; 0x58
9002255e:	6850      	ldr	r0, [r2, #4]
90022560:	9307      	str	r3, [sp, #28]
90022562:	6812      	ldr	r2, [r2, #0]
90022564:	9d26      	ldr	r5, [sp, #152]	; 0x98
90022566:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	; 0xa8
9002256a:	fb00 1303 	mla	r3, r0, r3, r1
9002256e:	eb02 0343 	add.w	r3, r2, r3, lsl #1
90022572:	930a      	str	r3, [sp, #40]	; 0x28
90022574:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
90022576:	681b      	ldr	r3, [r3, #0]
90022578:	930f      	str	r3, [sp, #60]	; 0x3c
9002257a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
9002257c:	685e      	ldr	r6, [r3, #4]
9002257e:	3604      	adds	r6, #4
90022580:	9b16      	ldr	r3, [sp, #88]	; 0x58
90022582:	2b00      	cmp	r3, #0
90022584:	dc03      	bgt.n	9002258e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
90022586:	9b18      	ldr	r3, [sp, #96]	; 0x60
90022588:	2b00      	cmp	r3, #0
9002258a:	f340 8373 	ble.w	90022c74 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x724>
9002258e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
90022590:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
90022594:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
90022598:	1e48      	subs	r0, r1, #1
9002259a:	1e57      	subs	r7, r2, #1
9002259c:	9b07      	ldr	r3, [sp, #28]
9002259e:	2b00      	cmp	r3, #0
900225a0:	f340 818f 	ble.w	900228c2 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x372>
900225a4:	9c25      	ldr	r4, [sp, #148]	; 0x94
900225a6:	142b      	asrs	r3, r5, #16
900225a8:	ea5f 4c24 	movs.w	ip, r4, asr #16
900225ac:	d406      	bmi.n	900225bc <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
900225ae:	4584      	cmp	ip, r0
900225b0:	da04      	bge.n	900225bc <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
900225b2:	2b00      	cmp	r3, #0
900225b4:	db02      	blt.n	900225bc <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
900225b6:	42bb      	cmp	r3, r7
900225b8:	f2c0 8184 	blt.w	900228c4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x374>
900225bc:	f11c 0c01 	adds.w	ip, ip, #1
900225c0:	f100 8172 	bmi.w	900228a8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
900225c4:	4561      	cmp	r1, ip
900225c6:	f2c0 816f 	blt.w	900228a8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
900225ca:	3301      	adds	r3, #1
900225cc:	f100 816c 	bmi.w	900228a8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
900225d0:	429a      	cmp	r2, r3
900225d2:	f2c0 8169 	blt.w	900228a8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
900225d6:	9b07      	ldr	r3, [sp, #28]
900225d8:	9f0a      	ldr	r7, [sp, #40]	; 0x28
900225da:	9317      	str	r3, [sp, #92]	; 0x5c
900225dc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
900225de:	2b00      	cmp	r3, #0
900225e0:	f340 818e 	ble.w	90022900 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b0>
900225e4:	9b25      	ldr	r3, [sp, #148]	; 0x94
900225e6:	ea4f 4c25 	mov.w	ip, r5, asr #16
900225ea:	f3c5 3003 	ubfx	r0, r5, #12, #4
900225ee:	f3c3 3203 	ubfx	r2, r3, #12, #4
900225f2:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
900225f4:	e9d3 1e02 	ldrd	r1, lr, [r3, #8]
900225f8:	9b25      	ldr	r3, [sp, #148]	; 0x94
900225fa:	141b      	asrs	r3, r3, #16
900225fc:	f100 81d1 	bmi.w	900229a2 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
90022600:	f101 38ff 	add.w	r8, r1, #4294967295
90022604:	4543      	cmp	r3, r8
90022606:	f280 81cc 	bge.w	900229a2 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
9002260a:	f1bc 0f00 	cmp.w	ip, #0
9002260e:	f2c0 81c8 	blt.w	900229a2 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
90022612:	f10e 38ff 	add.w	r8, lr, #4294967295
90022616:	45c4      	cmp	ip, r8
90022618:	f280 81c3 	bge.w	900229a2 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
9002261c:	b209      	sxth	r1, r1
9002261e:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
90022620:	fb0c 3301 	mla	r3, ip, r1, r3
90022624:	eb04 0803 	add.w	r8, r4, r3
90022628:	5ce3      	ldrb	r3, [r4, r3]
9002262a:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
9002262e:	ea4f 6e13 	mov.w	lr, r3, lsr #24
90022632:	2a00      	cmp	r2, #0
90022634:	f000 81aa 	beq.w	9002298c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x43c>
90022638:	f898 c001 	ldrb.w	ip, [r8, #1]
9002263c:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
90022640:	940b      	str	r4, [sp, #44]	; 0x2c
90022642:	0e24      	lsrs	r4, r4, #24
90022644:	9412      	str	r4, [sp, #72]	; 0x48
90022646:	b178      	cbz	r0, 90022668 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
90022648:	eb08 0c01 	add.w	ip, r8, r1
9002264c:	f818 1001 	ldrb.w	r1, [r8, r1]
90022650:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
90022654:	9108      	str	r1, [sp, #32]
90022656:	0e09      	lsrs	r1, r1, #24
90022658:	9110      	str	r1, [sp, #64]	; 0x40
9002265a:	f89c 1001 	ldrb.w	r1, [ip, #1]
9002265e:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
90022662:	910c      	str	r1, [sp, #48]	; 0x30
90022664:	0e09      	lsrs	r1, r1, #24
90022666:	9113      	str	r1, [sp, #76]	; 0x4c
90022668:	b292      	uxth	r2, r2
9002266a:	9912      	ldr	r1, [sp, #72]	; 0x48
9002266c:	b280      	uxth	r0, r0
9002266e:	9c10      	ldr	r4, [sp, #64]	; 0x40
90022670:	fb02 f900 	mul.w	r9, r2, r0
90022674:	0112      	lsls	r2, r2, #4
90022676:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
9002267a:	eba2 0809 	sub.w	r8, r2, r9
9002267e:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
90022682:	b280      	uxth	r0, r0
90022684:	fa1f f888 	uxth.w	r8, r8
90022688:	1a12      	subs	r2, r2, r0
9002268a:	fb08 f101 	mul.w	r1, r8, r1
9002268e:	b292      	uxth	r2, r2
90022690:	fb02 110e 	mla	r1, r2, lr, r1
90022694:	fb00 1104 	mla	r1, r0, r4, r1
90022698:	9c13      	ldr	r4, [sp, #76]	; 0x4c
9002269a:	fb09 1104 	mla	r1, r9, r4, r1
9002269e:	f3c1 2107 	ubfx	r1, r1, #8, #8
900226a2:	2900      	cmp	r1, #0
900226a4:	f000 80f5 	beq.w	90022892 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
900226a8:	f1be 0fff 	cmp.w	lr, #255	; 0xff
900226ac:	d01b      	beq.n	900226e6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
900226ae:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
900226b2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
900226b6:	fb0e fa0a 	mul.w	sl, lr, sl
900226ba:	fb0e fe03 	mul.w	lr, lr, r3
900226be:	ea4f 231a 	mov.w	r3, sl, lsr #8
900226c2:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
900226c6:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
900226ca:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
900226ce:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
900226d2:	4453      	add	r3, sl
900226d4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
900226d8:	0a1b      	lsrs	r3, r3, #8
900226da:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
900226de:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
900226e2:	ea43 030c 	orr.w	r3, r3, ip
900226e6:	9c12      	ldr	r4, [sp, #72]	; 0x48
900226e8:	2cff      	cmp	r4, #255	; 0xff
900226ea:	d021      	beq.n	90022730 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
900226ec:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
900226ee:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
900226f2:	9c12      	ldr	r4, [sp, #72]	; 0x48
900226f4:	fb04 fb0b 	mul.w	fp, r4, fp
900226f8:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
900226fa:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
900226fe:	9c12      	ldr	r4, [sp, #72]	; 0x48
90022700:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
90022704:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
90022708:	fb04 fa0a 	mul.w	sl, r4, sl
9002270c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
90022710:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
90022714:	44de      	add	lr, fp
90022716:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
9002271a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
9002271e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
90022722:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
90022726:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
9002272a:	ea4e 040a 	orr.w	r4, lr, sl
9002272e:	940b      	str	r4, [sp, #44]	; 0x2c
90022730:	9c10      	ldr	r4, [sp, #64]	; 0x40
90022732:	2cff      	cmp	r4, #255	; 0xff
90022734:	d021      	beq.n	9002277a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
90022736:	9c08      	ldr	r4, [sp, #32]
90022738:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
9002273c:	9c10      	ldr	r4, [sp, #64]	; 0x40
9002273e:	fb04 fb0b 	mul.w	fp, r4, fp
90022742:	9c08      	ldr	r4, [sp, #32]
90022744:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
90022748:	9c10      	ldr	r4, [sp, #64]	; 0x40
9002274a:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
9002274e:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
90022752:	fb04 fa0a 	mul.w	sl, r4, sl
90022756:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
9002275a:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
9002275e:	44de      	add	lr, fp
90022760:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
90022764:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
90022768:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
9002276c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
90022770:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
90022774:	ea4e 040a 	orr.w	r4, lr, sl
90022778:	9408      	str	r4, [sp, #32]
9002277a:	9c13      	ldr	r4, [sp, #76]	; 0x4c
9002277c:	2cff      	cmp	r4, #255	; 0xff
9002277e:	d021      	beq.n	900227c4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x274>
90022780:	9c0c      	ldr	r4, [sp, #48]	; 0x30
90022782:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
90022786:	9c13      	ldr	r4, [sp, #76]	; 0x4c
90022788:	fb04 fb0b 	mul.w	fp, r4, fp
9002278c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
9002278e:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
90022792:	9c13      	ldr	r4, [sp, #76]	; 0x4c
90022794:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
90022798:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
9002279c:	fb04 fa0a 	mul.w	sl, r4, sl
900227a0:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
900227a4:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
900227a8:	44de      	add	lr, fp
900227aa:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
900227ae:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
900227b2:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
900227b6:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
900227ba:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
900227be:	ea4e 040a 	orr.w	r4, lr, sl
900227c2:	940c      	str	r4, [sp, #48]	; 0x30
900227c4:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
900227c6:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
900227ca:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
900227ce:	43c9      	mvns	r1, r1
900227d0:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
900227d4:	9c08      	ldr	r4, [sp, #32]
900227d6:	fb08 fc0c 	mul.w	ip, r8, ip
900227da:	fb02 cc0e 	mla	ip, r2, lr, ip
900227de:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
900227e2:	9c0c      	ldr	r4, [sp, #48]	; 0x30
900227e4:	fb00 cc0e 	mla	ip, r0, lr, ip
900227e8:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
900227ec:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
900227ee:	fb09 cc0e 	mla	ip, r9, lr, ip
900227f2:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
900227f6:	fb08 f80e 	mul.w	r8, r8, lr
900227fa:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
900227fe:	fa5f fe81 	uxtb.w	lr, r1
90022802:	fb02 8303 	mla	r3, r2, r3, r8
90022806:	9a08      	ldr	r2, [sp, #32]
90022808:	f8b7 8000 	ldrh.w	r8, [r7]
9002280c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
90022810:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
90022814:	9a0c      	ldr	r2, [sp, #48]	; 0x30
90022816:	ea4f 01c8 	mov.w	r1, r8, lsl #3
9002281a:	fb00 330a 	mla	r3, r0, sl, r3
9002281e:	f402 407f 	and.w	r0, r2, #65280	; 0xff00
90022822:	ea4f 2228 	mov.w	r2, r8, asr #8
90022826:	fb09 3900 	mla	r9, r9, r0, r3
9002282a:	ea4f 00e8 	mov.w	r0, r8, asr #3
9002282e:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
90022832:	b2c9      	uxtb	r1, r1
90022834:	ea4f 2919 	mov.w	r9, r9, lsr #8
90022838:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
9002283c:	fb02 f20e 	mul.w	r2, r2, lr
90022840:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
90022844:	fb00 f00e 	mul.w	r0, r0, lr
90022848:	1c53      	adds	r3, r2, #1
9002284a:	fb01 f10e 	mul.w	r1, r1, lr
9002284e:	ea4c 0c09 	orr.w	ip, ip, r9
90022852:	eb03 2212 	add.w	r2, r3, r2, lsr #8
90022856:	ea4f 431c 	mov.w	r3, ip, lsr #16
9002285a:	eb03 2312 	add.w	r3, r3, r2, lsr #8
9002285e:	4a60      	ldr	r2, [pc, #384]	; (900229e0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x490>)
90022860:	b2db      	uxtb	r3, r3
90022862:	ea02 2203 	and.w	r2, r2, r3, lsl #8
90022866:	1c43      	adds	r3, r0, #1
90022868:	eb03 2010 	add.w	r0, r3, r0, lsr #8
9002286c:	ea4f 231c 	mov.w	r3, ip, lsr #8
90022870:	eb03 2310 	add.w	r3, r3, r0, lsr #8
90022874:	00db      	lsls	r3, r3, #3
90022876:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
9002287a:	4313      	orrs	r3, r2
9002287c:	1c4a      	adds	r2, r1, #1
9002287e:	eb02 2111 	add.w	r1, r2, r1, lsr #8
90022882:	eb0c 2c11 	add.w	ip, ip, r1, lsr #8
90022886:	f3cc 0cc4 	ubfx	ip, ip, #3, #5
9002288a:	ea4c 0c03 	orr.w	ip, ip, r3
9002288e:	f8a7 c000 	strh.w	ip, [r7]
90022892:	9b27      	ldr	r3, [sp, #156]	; 0x9c
90022894:	3702      	adds	r7, #2
90022896:	9a25      	ldr	r2, [sp, #148]	; 0x94
90022898:	441a      	add	r2, r3
9002289a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
9002289c:	441d      	add	r5, r3
9002289e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
900228a0:	9225      	str	r2, [sp, #148]	; 0x94
900228a2:	3b01      	subs	r3, #1
900228a4:	9317      	str	r3, [sp, #92]	; 0x5c
900228a6:	e699      	b.n	900225dc <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
900228a8:	9b27      	ldr	r3, [sp, #156]	; 0x9c
900228aa:	9c25      	ldr	r4, [sp, #148]	; 0x94
900228ac:	441c      	add	r4, r3
900228ae:	9b28      	ldr	r3, [sp, #160]	; 0xa0
900228b0:	441d      	add	r5, r3
900228b2:	9b07      	ldr	r3, [sp, #28]
900228b4:	9425      	str	r4, [sp, #148]	; 0x94
900228b6:	3b01      	subs	r3, #1
900228b8:	9307      	str	r3, [sp, #28]
900228ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
900228bc:	3302      	adds	r3, #2
900228be:	930a      	str	r3, [sp, #40]	; 0x28
900228c0:	e66c      	b.n	9002259c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
900228c2:	d024      	beq.n	9002290e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3be>
900228c4:	9b07      	ldr	r3, [sp, #28]
900228c6:	9827      	ldr	r0, [sp, #156]	; 0x9c
900228c8:	3b01      	subs	r3, #1
900228ca:	9c25      	ldr	r4, [sp, #148]	; 0x94
900228cc:	fb00 4003 	mla	r0, r0, r3, r4
900228d0:	1400      	asrs	r0, r0, #16
900228d2:	f53f ae80 	bmi.w	900225d6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
900228d6:	3901      	subs	r1, #1
900228d8:	4288      	cmp	r0, r1
900228da:	f6bf ae7c 	bge.w	900225d6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
900228de:	9928      	ldr	r1, [sp, #160]	; 0xa0
900228e0:	fb01 5303 	mla	r3, r1, r3, r5
900228e4:	141b      	asrs	r3, r3, #16
900228e6:	f53f ae76 	bmi.w	900225d6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
900228ea:	3a01      	subs	r2, #1
900228ec:	4293      	cmp	r3, r2
900228ee:	f6bf ae72 	bge.w	900225d6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
900228f2:	f8dd b01c 	ldr.w	fp, [sp, #28]
900228f6:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
900228fa:	f1bb 0f00 	cmp.w	fp, #0
900228fe:	dc71      	bgt.n	900229e4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x494>
90022900:	9b07      	ldr	r3, [sp, #28]
90022902:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
90022906:	9b0a      	ldr	r3, [sp, #40]	; 0x28
90022908:	eb03 0344 	add.w	r3, r3, r4, lsl #1
9002290c:	930a      	str	r3, [sp, #40]	; 0x28
9002290e:	9b16      	ldr	r3, [sp, #88]	; 0x58
90022910:	2b00      	cmp	r3, #0
90022912:	f340 81af 	ble.w	90022c74 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x724>
90022916:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
9002291a:	9b24      	ldr	r3, [sp, #144]	; 0x90
9002291c:	ee30 0a04 	vadd.f32	s0, s0, s8
90022920:	ee70 0aa4 	vadd.f32	s1, s1, s9
90022924:	eef0 6a62 	vmov.f32	s13, s5
90022928:	eec7 7a00 	vdiv.f32	s15, s14, s0
9002292c:	ee31 1a05 	vadd.f32	s2, s2, s10
90022930:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
90022934:	edcd 6a25 	vstr	s13, [sp, #148]	; 0x94
90022938:	eef0 6a43 	vmov.f32	s13, s6
9002293c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
90022940:	ee16 5a90 	vmov	r5, s13
90022944:	ee20 7aa7 	vmul.f32	s14, s1, s15
90022948:	ee61 7a27 	vmul.f32	s15, s2, s15
9002294c:	ee77 2a62 	vsub.f32	s5, s14, s5
90022950:	ee37 3ac3 	vsub.f32	s6, s15, s6
90022954:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
90022958:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
9002295c:	ee12 2a90 	vmov	r2, s5
90022960:	eef0 2a47 	vmov.f32	s5, s14
90022964:	fb92 f3f3 	sdiv	r3, r2, r3
90022968:	ee13 2a10 	vmov	r2, s6
9002296c:	9327      	str	r3, [sp, #156]	; 0x9c
9002296e:	9b24      	ldr	r3, [sp, #144]	; 0x90
90022970:	eeb0 3a67 	vmov.f32	s6, s15
90022974:	fb92 f3f3 	sdiv	r3, r2, r3
90022978:	9328      	str	r3, [sp, #160]	; 0xa0
9002297a:	9b16      	ldr	r3, [sp, #88]	; 0x58
9002297c:	9a18      	ldr	r2, [sp, #96]	; 0x60
9002297e:	3b01      	subs	r3, #1
90022980:	9316      	str	r3, [sp, #88]	; 0x58
90022982:	9b24      	ldr	r3, [sp, #144]	; 0x90
90022984:	bf08      	it	eq
90022986:	4613      	moveq	r3, r2
90022988:	9307      	str	r3, [sp, #28]
9002298a:	e5f9      	b.n	90022580 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
9002298c:	2800      	cmp	r0, #0
9002298e:	f43f ae6b 	beq.w	90022668 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
90022992:	f818 1001 	ldrb.w	r1, [r8, r1]
90022996:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
9002299a:	9108      	str	r1, [sp, #32]
9002299c:	0e09      	lsrs	r1, r1, #24
9002299e:	9110      	str	r1, [sp, #64]	; 0x40
900229a0:	e662      	b.n	90022668 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
900229a2:	f113 0801 	adds.w	r8, r3, #1
900229a6:	f53f af74 	bmi.w	90022892 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
900229aa:	4541      	cmp	r1, r8
900229ac:	f6ff af71 	blt.w	90022892 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
900229b0:	f11c 0801 	adds.w	r8, ip, #1
900229b4:	f53f af6d 	bmi.w	90022892 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
900229b8:	45c6      	cmp	lr, r8
900229ba:	f6ff af6a 	blt.w	90022892 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
900229be:	b209      	sxth	r1, r1
900229c0:	e9cd 3c02 	strd	r3, ip, [sp, #8]
900229c4:	fa0f f38e 	sxth.w	r3, lr
900229c8:	9100      	str	r1, [sp, #0]
900229ca:	4639      	mov	r1, r7
900229cc:	9301      	str	r3, [sp, #4]
900229ce:	4633      	mov	r3, r6
900229d0:	e9cd 2004 	strd	r2, r0, [sp, #16]
900229d4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
900229d6:	9819      	ldr	r0, [sp, #100]	; 0x64
900229d8:	f7ff fc7b 	bl	900222d2 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh>
900229dc:	e759      	b.n	90022892 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
900229de:	bf00      	nop
900229e0:	fffff800 	.word	0xfffff800
900229e4:	9b25      	ldr	r3, [sp, #148]	; 0x94
900229e6:	f3c5 3003 	ubfx	r0, r5, #12, #4
900229ea:	9c25      	ldr	r4, [sp, #148]	; 0x94
900229ec:	f3c3 3203 	ubfx	r2, r3, #12, #4
900229f0:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
900229f2:	1427      	asrs	r7, r4, #16
900229f4:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
900229f6:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
900229fa:	142b      	asrs	r3, r5, #16
900229fc:	fb01 7303 	mla	r3, r1, r3, r7
90022a00:	18e7      	adds	r7, r4, r3
90022a02:	5ce3      	ldrb	r3, [r4, r3]
90022a04:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
90022a08:	ea4f 6c13 	mov.w	ip, r3, lsr #24
90022a0c:	2a00      	cmp	r2, #0
90022a0e:	f000 8127 	beq.w	90022c60 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x710>
90022a12:	f897 e001 	ldrb.w	lr, [r7, #1]
90022a16:	f856 402e 	ldr.w	r4, [r6, lr, lsl #2]
90022a1a:	940d      	str	r4, [sp, #52]	; 0x34
90022a1c:	0e24      	lsrs	r4, r4, #24
90022a1e:	9414      	str	r4, [sp, #80]	; 0x50
90022a20:	b170      	cbz	r0, 90022a40 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f0>
90022a22:	eb07 0e01 	add.w	lr, r7, r1
90022a26:	5c79      	ldrb	r1, [r7, r1]
90022a28:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
90022a2c:	9109      	str	r1, [sp, #36]	; 0x24
90022a2e:	0e09      	lsrs	r1, r1, #24
90022a30:	9111      	str	r1, [sp, #68]	; 0x44
90022a32:	f89e 1001 	ldrb.w	r1, [lr, #1]
90022a36:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
90022a3a:	910e      	str	r1, [sp, #56]	; 0x38
90022a3c:	0e09      	lsrs	r1, r1, #24
90022a3e:	9115      	str	r1, [sp, #84]	; 0x54
90022a40:	b292      	uxth	r2, r2
90022a42:	9c11      	ldr	r4, [sp, #68]	; 0x44
90022a44:	b280      	uxth	r0, r0
90022a46:	fb02 f800 	mul.w	r8, r2, r0
90022a4a:	0112      	lsls	r2, r2, #4
90022a4c:	ebc8 1000 	rsb	r0, r8, r0, lsl #4
90022a50:	eba2 0e08 	sub.w	lr, r2, r8
90022a54:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
90022a58:	9a14      	ldr	r2, [sp, #80]	; 0x50
90022a5a:	b280      	uxth	r0, r0
90022a5c:	fa1f fe8e 	uxth.w	lr, lr
90022a60:	1a09      	subs	r1, r1, r0
90022a62:	fb0e f202 	mul.w	r2, lr, r2
90022a66:	b289      	uxth	r1, r1
90022a68:	fb01 220c 	mla	r2, r1, ip, r2
90022a6c:	fb00 2204 	mla	r2, r0, r4, r2
90022a70:	9c15      	ldr	r4, [sp, #84]	; 0x54
90022a72:	fb08 2204 	mla	r2, r8, r4, r2
90022a76:	f3c2 2207 	ubfx	r2, r2, #8, #8
90022a7a:	2a00      	cmp	r2, #0
90022a7c:	f000 80e5 	beq.w	90022c4a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6fa>
90022a80:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
90022a84:	d019      	beq.n	90022aba <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56a>
90022a86:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
90022a8a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
90022a8e:	fb0c fa0a 	mul.w	sl, ip, sl
90022a92:	fb0c fc03 	mul.w	ip, ip, r3
90022a96:	ea4f 231a 	mov.w	r3, sl, lsr #8
90022a9a:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
90022a9e:	f50c 7780 	add.w	r7, ip, #256	; 0x100
90022aa2:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
90022aa6:	eb07 271c 	add.w	r7, r7, ip, lsr #8
90022aaa:	4453      	add	r3, sl
90022aac:	0a3f      	lsrs	r7, r7, #8
90022aae:	0a1b      	lsrs	r3, r3, #8
90022ab0:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
90022ab4:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
90022ab8:	433b      	orrs	r3, r7
90022aba:	9c14      	ldr	r4, [sp, #80]	; 0x50
90022abc:	2cff      	cmp	r4, #255	; 0xff
90022abe:	d020      	beq.n	90022b02 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5b2>
90022ac0:	9c0d      	ldr	r4, [sp, #52]	; 0x34
90022ac2:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
90022ac6:	9c14      	ldr	r4, [sp, #80]	; 0x50
90022ac8:	4367      	muls	r7, r4
90022aca:	9c0d      	ldr	r4, [sp, #52]	; 0x34
90022acc:	ea4f 2c17 	mov.w	ip, r7, lsr #8
90022ad0:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
90022ad4:	9c14      	ldr	r4, [sp, #80]	; 0x50
90022ad6:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
90022ada:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
90022ade:	fb04 fa0a 	mul.w	sl, r4, sl
90022ae2:	44bc      	add	ip, r7
90022ae4:	f50a 7780 	add.w	r7, sl, #256	; 0x100
90022ae8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
90022aec:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
90022af0:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
90022af4:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
90022af8:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
90022afc:	ea4c 040a 	orr.w	r4, ip, sl
90022b00:	940d      	str	r4, [sp, #52]	; 0x34
90022b02:	9c11      	ldr	r4, [sp, #68]	; 0x44
90022b04:	2cff      	cmp	r4, #255	; 0xff
90022b06:	d020      	beq.n	90022b4a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5fa>
90022b08:	9c09      	ldr	r4, [sp, #36]	; 0x24
90022b0a:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
90022b0e:	9c11      	ldr	r4, [sp, #68]	; 0x44
90022b10:	4367      	muls	r7, r4
90022b12:	9c09      	ldr	r4, [sp, #36]	; 0x24
90022b14:	ea4f 2c17 	mov.w	ip, r7, lsr #8
90022b18:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
90022b1c:	9c11      	ldr	r4, [sp, #68]	; 0x44
90022b1e:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
90022b22:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
90022b26:	fb04 fa0a 	mul.w	sl, r4, sl
90022b2a:	44bc      	add	ip, r7
90022b2c:	f50a 7780 	add.w	r7, sl, #256	; 0x100
90022b30:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
90022b34:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
90022b38:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
90022b3c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
90022b40:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
90022b44:	ea4c 040a 	orr.w	r4, ip, sl
90022b48:	9409      	str	r4, [sp, #36]	; 0x24
90022b4a:	9c15      	ldr	r4, [sp, #84]	; 0x54
90022b4c:	2cff      	cmp	r4, #255	; 0xff
90022b4e:	d020      	beq.n	90022b92 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x642>
90022b50:	9c0e      	ldr	r4, [sp, #56]	; 0x38
90022b52:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
90022b56:	9c15      	ldr	r4, [sp, #84]	; 0x54
90022b58:	4367      	muls	r7, r4
90022b5a:	9c0e      	ldr	r4, [sp, #56]	; 0x38
90022b5c:	ea4f 2c17 	mov.w	ip, r7, lsr #8
90022b60:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
90022b64:	9c15      	ldr	r4, [sp, #84]	; 0x54
90022b66:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
90022b6a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
90022b6e:	fb04 fa0a 	mul.w	sl, r4, sl
90022b72:	44bc      	add	ip, r7
90022b74:	f50a 7780 	add.w	r7, sl, #256	; 0x100
90022b78:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
90022b7c:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
90022b80:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
90022b84:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
90022b88:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
90022b8c:	ea4c 040a 	orr.w	r4, ip, sl
90022b90:	940e      	str	r4, [sp, #56]	; 0x38
90022b92:	9c0d      	ldr	r4, [sp, #52]	; 0x34
90022b94:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
90022b98:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
90022b9c:	43d2      	mvns	r2, r2
90022b9e:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
90022ba2:	9c09      	ldr	r4, [sp, #36]	; 0x24
90022ba4:	b2d2      	uxtb	r2, r2
90022ba6:	fb0e f707 	mul.w	r7, lr, r7
90022baa:	fb01 770c 	mla	r7, r1, ip, r7
90022bae:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
90022bb2:	9c0e      	ldr	r4, [sp, #56]	; 0x38
90022bb4:	fb00 770c 	mla	r7, r0, ip, r7
90022bb8:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
90022bbc:	9c0d      	ldr	r4, [sp, #52]	; 0x34
90022bbe:	fb08 770c 	mla	r7, r8, ip, r7
90022bc2:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
90022bc6:	fb0e fe0c 	mul.w	lr, lr, ip
90022bca:	0a3f      	lsrs	r7, r7, #8
90022bcc:	fb01 e303 	mla	r3, r1, r3, lr
90022bd0:	9909      	ldr	r1, [sp, #36]	; 0x24
90022bd2:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
90022bd6:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
90022bda:	990e      	ldr	r1, [sp, #56]	; 0x38
90022bdc:	fb00 330a 	mla	r3, r0, sl, r3
90022be0:	f401 4c7f 	and.w	ip, r1, #65280	; 0xff00
90022be4:	fb08 3c0c 	mla	ip, r8, ip, r3
90022be8:	f8b9 3000 	ldrh.w	r3, [r9]
90022bec:	1218      	asrs	r0, r3, #8
90022bee:	10d9      	asrs	r1, r3, #3
90022bf0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
90022bf4:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
90022bf8:	00db      	lsls	r3, r3, #3
90022bfa:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
90022bfe:	4350      	muls	r0, r2
90022c00:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
90022c04:	b2db      	uxtb	r3, r3
90022c06:	4351      	muls	r1, r2
90022c08:	ea47 070c 	orr.w	r7, r7, ip
90022c0c:	4353      	muls	r3, r2
90022c0e:	1c42      	adds	r2, r0, #1
90022c10:	eb02 2010 	add.w	r0, r2, r0, lsr #8
90022c14:	0c3a      	lsrs	r2, r7, #16
90022c16:	eb02 2010 	add.w	r0, r2, r0, lsr #8
90022c1a:	4a18      	ldr	r2, [pc, #96]	; (90022c7c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72c>)
90022c1c:	b2c0      	uxtb	r0, r0
90022c1e:	ea02 2000 	and.w	r0, r2, r0, lsl #8
90022c22:	1c4a      	adds	r2, r1, #1
90022c24:	eb02 2111 	add.w	r1, r2, r1, lsr #8
90022c28:	0a3a      	lsrs	r2, r7, #8
90022c2a:	eb02 2111 	add.w	r1, r2, r1, lsr #8
90022c2e:	00c9      	lsls	r1, r1, #3
90022c30:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
90022c34:	4301      	orrs	r1, r0
90022c36:	1c58      	adds	r0, r3, #1
90022c38:	eb00 2013 	add.w	r0, r0, r3, lsr #8
90022c3c:	eb07 2710 	add.w	r7, r7, r0, lsr #8
90022c40:	f3c7 00c4 	ubfx	r0, r7, #3, #5
90022c44:	4308      	orrs	r0, r1
90022c46:	f8a9 0000 	strh.w	r0, [r9]
90022c4a:	9b27      	ldr	r3, [sp, #156]	; 0x9c
90022c4c:	f109 0902 	add.w	r9, r9, #2
90022c50:	9a25      	ldr	r2, [sp, #148]	; 0x94
90022c52:	f10b 3bff 	add.w	fp, fp, #4294967295
90022c56:	441a      	add	r2, r3
90022c58:	9b28      	ldr	r3, [sp, #160]	; 0xa0
90022c5a:	9225      	str	r2, [sp, #148]	; 0x94
90022c5c:	441d      	add	r5, r3
90022c5e:	e64c      	b.n	900228fa <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3aa>
90022c60:	2800      	cmp	r0, #0
90022c62:	f43f aeed 	beq.w	90022a40 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f0>
90022c66:	5c79      	ldrb	r1, [r7, r1]
90022c68:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
90022c6c:	9109      	str	r1, [sp, #36]	; 0x24
90022c6e:	0e09      	lsrs	r1, r1, #24
90022c70:	9111      	str	r1, [sp, #68]	; 0x44
90022c72:	e6e5      	b.n	90022a40 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f0>
90022c74:	b01b      	add	sp, #108	; 0x6c
90022c76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90022c7a:	bf00      	nop
90022c7c:	fffff800 	.word	0xfffff800

90022c80 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh>:
90022c80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90022c84:	b085      	sub	sp, #20
90022c86:	e9dd 7010 	ldrd	r7, r0, [sp, #64]	; 0x40
90022c8a:	f9bd 6038 	ldrsh.w	r6, [sp, #56]	; 0x38
90022c8e:	2800      	cmp	r0, #0
90022c90:	9103      	str	r1, [sp, #12]
90022c92:	fb00 7406 	mla	r4, r0, r6, r7
90022c96:	f9bd b03c 	ldrsh.w	fp, [sp, #60]	; 0x3c
90022c9a:	f89d 1048 	ldrb.w	r1, [sp, #72]	; 0x48
90022c9e:	eb02 0544 	add.w	r5, r2, r4, lsl #1
90022ca2:	f89d e04c 	ldrb.w	lr, [sp, #76]	; 0x4c
90022ca6:	eb03 0904 	add.w	r9, r3, r4
90022caa:	9501      	str	r5, [sp, #4]
90022cac:	f2c0 8150 	blt.w	90022f50 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2d0>
90022cb0:	4583      	cmp	fp, r0
90022cb2:	f340 814d 	ble.w	90022f50 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2d0>
90022cb6:	2f00      	cmp	r7, #0
90022cb8:	f2c0 8146 	blt.w	90022f48 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2c8>
90022cbc:	42be      	cmp	r6, r7
90022cbe:	f340 8143 	ble.w	90022f48 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2c8>
90022cc2:	f813 c004 	ldrb.w	ip, [r3, r4]
90022cc6:	f832 3014 	ldrh.w	r3, [r2, r4, lsl #1]
90022cca:	f64f 041f 	movw	r4, #63519	; 0xf81f
90022cce:	ea4f 02ec 	mov.w	r2, ip, asr #3
90022cd2:	f423 65fc 	bic.w	r5, r3, #2016	; 0x7e0
90022cd6:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
90022cda:	4355      	muls	r5, r2
90022cdc:	fb0c f203 	mul.w	r2, ip, r3
90022ce0:	ea04 1355 	and.w	r3, r4, r5, lsr #5
90022ce4:	f605 0501 	addw	r5, r5, #2049	; 0x801
90022ce8:	441d      	add	r5, r3
90022cea:	f102 0320 	add.w	r3, r2, #32
90022cee:	eb03 2312 	add.w	r3, r3, r2, lsr #8
90022cf2:	ea04 1455 	and.w	r4, r4, r5, lsr #5
90022cf6:	0a1b      	lsrs	r3, r3, #8
90022cf8:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
90022cfc:	431c      	orrs	r4, r3
90022cfe:	1c7b      	adds	r3, r7, #1
90022d00:	f100 812b 	bmi.w	90022f5a <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2da>
90022d04:	429e      	cmp	r6, r3
90022d06:	f340 8128 	ble.w	90022f5a <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2da>
90022d0a:	2900      	cmp	r1, #0
90022d0c:	f000 8128 	beq.w	90022f60 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2e0>
90022d10:	9a01      	ldr	r2, [sp, #4]
90022d12:	f899 3001 	ldrb.w	r3, [r9, #1]
90022d16:	8855      	ldrh	r5, [r2, #2]
90022d18:	ea4f 08e3 	mov.w	r8, r3, asr #3
90022d1c:	f425 62fc 	bic.w	r2, r5, #2016	; 0x7e0
90022d20:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
90022d24:	fb08 f802 	mul.w	r8, r8, r2
90022d28:	f64f 021f 	movw	r2, #63519	; 0xf81f
90022d2c:	435d      	muls	r5, r3
90022d2e:	ea02 1a58 	and.w	sl, r2, r8, lsr #5
90022d32:	f608 0801 	addw	r8, r8, #2049	; 0x801
90022d36:	44d0      	add	r8, sl
90022d38:	f105 0a20 	add.w	sl, r5, #32
90022d3c:	eb0a 2515 	add.w	r5, sl, r5, lsr #8
90022d40:	ea02 1258 	and.w	r2, r2, r8, lsr #5
90022d44:	0a2d      	lsrs	r5, r5, #8
90022d46:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
90022d4a:	432a      	orrs	r2, r5
90022d4c:	3001      	adds	r0, #1
90022d4e:	f100 810d 	bmi.w	90022f6c <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2ec>
90022d52:	4583      	cmp	fp, r0
90022d54:	f340 810a 	ble.w	90022f6c <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2ec>
90022d58:	f1be 0f00 	cmp.w	lr, #0
90022d5c:	f000 810b 	beq.w	90022f76 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2f6>
90022d60:	2f00      	cmp	r7, #0
90022d62:	f2c0 8100 	blt.w	90022f66 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2e6>
90022d66:	42be      	cmp	r6, r7
90022d68:	f340 80fd 	ble.w	90022f66 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2e6>
90022d6c:	9801      	ldr	r0, [sp, #4]
90022d6e:	f64f 0b1f 	movw	fp, #63519	; 0xf81f
90022d72:	f819 5006 	ldrb.w	r5, [r9, r6]
90022d76:	f830 8016 	ldrh.w	r8, [r0, r6, lsl #1]
90022d7a:	ea4f 0ae5 	mov.w	sl, r5, asr #3
90022d7e:	f428 60fc 	bic.w	r0, r8, #2016	; 0x7e0
90022d82:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
90022d86:	fb0a fa00 	mul.w	sl, sl, r0
90022d8a:	fb05 f808 	mul.w	r8, r5, r8
90022d8e:	ea0b 105a 	and.w	r0, fp, sl, lsr #5
90022d92:	f60a 0a01 	addw	sl, sl, #2049	; 0x801
90022d96:	4482      	add	sl, r0
90022d98:	f108 0020 	add.w	r0, r8, #32
90022d9c:	eb00 2018 	add.w	r0, r0, r8, lsr #8
90022da0:	ea0b 1b5a 	and.w	fp, fp, sl, lsr #5
90022da4:	0a00      	lsrs	r0, r0, #8
90022da6:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
90022daa:	ea4b 0b00 	orr.w	fp, fp, r0
90022dae:	3701      	adds	r7, #1
90022db0:	f100 80e6 	bmi.w	90022f80 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x300>
90022db4:	42be      	cmp	r6, r7
90022db6:	f340 80e3 	ble.w	90022f80 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x300>
90022dba:	2900      	cmp	r1, #0
90022dbc:	f000 80e3 	beq.w	90022f86 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x306>
90022dc0:	3601      	adds	r6, #1
90022dc2:	9801      	ldr	r0, [sp, #4]
90022dc4:	f819 7006 	ldrb.w	r7, [r9, r6]
90022dc8:	f830 0016 	ldrh.w	r0, [r0, r6, lsl #1]
90022dcc:	ea4f 09e7 	mov.w	r9, r7, asr #3
90022dd0:	f420 66fc 	bic.w	r6, r0, #2016	; 0x7e0
90022dd4:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
90022dd8:	fb09 f906 	mul.w	r9, r9, r6
90022ddc:	fb07 f800 	mul.w	r8, r7, r0
90022de0:	f64f 001f 	movw	r0, #63519	; 0xf81f
90022de4:	ea00 1a59 	and.w	sl, r0, r9, lsr #5
90022de8:	f609 0901 	addw	r9, r9, #2049	; 0x801
90022dec:	44d1      	add	r9, sl
90022dee:	ea00 1659 	and.w	r6, r0, r9, lsr #5
90022df2:	f108 0020 	add.w	r0, r8, #32
90022df6:	eb00 2018 	add.w	r0, r0, r8, lsr #8
90022dfa:	0a00      	lsrs	r0, r0, #8
90022dfc:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
90022e00:	4330      	orrs	r0, r6
90022e02:	b28e      	uxth	r6, r1
90022e04:	fa1f f98e 	uxth.w	r9, lr
90022e08:	ea4f 4a04 	mov.w	sl, r4, lsl #16
90022e0c:	f424 64fc 	bic.w	r4, r4, #2016	; 0x7e0
90022e10:	fb06 f809 	mul.w	r8, r6, r9
90022e14:	0136      	lsls	r6, r6, #4
90022e16:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
90022e1a:	ebc8 1909 	rsb	r9, r8, r9, lsl #4
90022e1e:	9601      	str	r6, [sp, #4]
90022e20:	ea4a 0404 	orr.w	r4, sl, r4
90022e24:	ea4f 4a02 	mov.w	sl, r2, lsl #16
90022e28:	fa1f f689 	uxth.w	r6, r9
90022e2c:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
90022e30:	fb11 f90e 	smulbb	r9, r1, lr
90022e34:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
90022e38:	9602      	str	r6, [sp, #8]
90022e3a:	4626      	mov	r6, r4
90022e3c:	f3c9 09c7 	ubfx	r9, r9, #3, #8
90022e40:	f1ce 0410 	rsb	r4, lr, #16
90022e44:	ea4a 0202 	orr.w	r2, sl, r2
90022e48:	ea4f 4a00 	mov.w	sl, r0, lsl #16
90022e4c:	1a64      	subs	r4, r4, r1
90022e4e:	ebc9 0141 	rsb	r1, r9, r1, lsl #1
90022e52:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
90022e56:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
90022e5a:	434a      	muls	r2, r1
90022e5c:	eb09 0444 	add.w	r4, r9, r4, lsl #1
90022e60:	ea4a 0000 	orr.w	r0, sl, r0
90022e64:	9903      	ldr	r1, [sp, #12]
90022e66:	fb04 2406 	mla	r4, r4, r6, r2
90022e6a:	9e02      	ldr	r6, [sp, #8]
90022e6c:	ebc9 0e4e 	rsb	lr, r9, lr, lsl #1
90022e70:	fb09 4200 	mla	r2, r9, r0, r4
90022e74:	ea4f 440b 	mov.w	r4, fp, lsl #16
90022e78:	f42b 6bfc 	bic.w	fp, fp, #2016	; 0x7e0
90022e7c:	8808      	ldrh	r0, [r1, #0]
90022e7e:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
90022e82:	f89d 1050 	ldrb.w	r1, [sp, #80]	; 0x50
90022e86:	ea44 0b0b 	orr.w	fp, r4, fp
90022e8a:	9c01      	ldr	r4, [sp, #4]
90022e8c:	b289      	uxth	r1, r1
90022e8e:	f5c4 7480 	rsb	r4, r4, #256	; 0x100
90022e92:	fb0e 2e0b 	mla	lr, lr, fp, r2
90022e96:	1ba4      	subs	r4, r4, r6
90022e98:	9e01      	ldr	r6, [sp, #4]
90022e9a:	ea4f 525e 	mov.w	r2, lr, lsr #21
90022e9e:	eba6 0608 	sub.w	r6, r6, r8
90022ea2:	b2a4      	uxth	r4, r4
90022ea4:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
90022ea8:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
90022eac:	b2b6      	uxth	r6, r6
90022eae:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
90022eb2:	4373      	muls	r3, r6
90022eb4:	ea42 0e0e 	orr.w	lr, r2, lr
90022eb8:	fb0c 3304 	mla	r3, ip, r4, r3
90022ebc:	9c02      	ldr	r4, [sp, #8]
90022ebe:	fa1f f28e 	uxth.w	r2, lr
90022ec2:	fb04 3505 	mla	r5, r4, r5, r3
90022ec6:	10d4      	asrs	r4, r2, #3
90022ec8:	fb08 5707 	mla	r7, r8, r7, r5
90022ecc:	1215      	asrs	r5, r2, #8
90022ece:	f004 04fc 	and.w	r4, r4, #252	; 0xfc
90022ed2:	00d2      	lsls	r2, r2, #3
90022ed4:	f3c7 2707 	ubfx	r7, r7, #8, #8
90022ed8:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
90022edc:	b2d2      	uxtb	r2, r2
90022ede:	434f      	muls	r7, r1
90022ee0:	1c7b      	adds	r3, r7, #1
90022ee2:	eb03 2717 	add.w	r7, r3, r7, lsr #8
90022ee6:	1203      	asrs	r3, r0, #8
90022ee8:	ea6f 2717 	mvn.w	r7, r7, lsr #8
90022eec:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
90022ef0:	b2ff      	uxtb	r7, r7
90022ef2:	fb13 f307 	smulbb	r3, r3, r7
90022ef6:	fb05 3501 	mla	r5, r5, r1, r3
90022efa:	10c3      	asrs	r3, r0, #3
90022efc:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
90022f00:	b2ad      	uxth	r5, r5
90022f02:	fb13 f307 	smulbb	r3, r3, r7
90022f06:	fb04 3401 	mla	r4, r4, r1, r3
90022f0a:	00c3      	lsls	r3, r0, #3
90022f0c:	b2db      	uxtb	r3, r3
90022f0e:	b2a4      	uxth	r4, r4
90022f10:	fb13 f307 	smulbb	r3, r3, r7
90022f14:	fb02 3101 	mla	r1, r2, r1, r3
90022f18:	1c6b      	adds	r3, r5, #1
90022f1a:	1c62      	adds	r2, r4, #1
90022f1c:	b289      	uxth	r1, r1
90022f1e:	eb03 2515 	add.w	r5, r3, r5, lsr #8
90022f22:	1c4b      	adds	r3, r1, #1
90022f24:	eb02 2414 	add.w	r4, r2, r4, lsr #8
90022f28:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
90022f2c:	9a03      	ldr	r2, [sp, #12]
90022f2e:	eb03 2311 	add.w	r3, r3, r1, lsr #8
90022f32:	0964      	lsrs	r4, r4, #5
90022f34:	f3c3 23c4 	ubfx	r3, r3, #11, #5
90022f38:	f404 64fc 	and.w	r4, r4, #2016	; 0x7e0
90022f3c:	432b      	orrs	r3, r5
90022f3e:	4323      	orrs	r3, r4
90022f40:	8013      	strh	r3, [r2, #0]
90022f42:	b005      	add	sp, #20
90022f44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90022f48:	f04f 0c00 	mov.w	ip, #0
90022f4c:	4664      	mov	r4, ip
90022f4e:	e6d6      	b.n	90022cfe <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x7e>
90022f50:	2300      	movs	r3, #0
90022f52:	469c      	mov	ip, r3
90022f54:	461a      	mov	r2, r3
90022f56:	461c      	mov	r4, r3
90022f58:	e6f8      	b.n	90022d4c <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xcc>
90022f5a:	2300      	movs	r3, #0
90022f5c:	461a      	mov	r2, r3
90022f5e:	e6f5      	b.n	90022d4c <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xcc>
90022f60:	460b      	mov	r3, r1
90022f62:	460a      	mov	r2, r1
90022f64:	e6f2      	b.n	90022d4c <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xcc>
90022f66:	2500      	movs	r5, #0
90022f68:	46ab      	mov	fp, r5
90022f6a:	e720      	b.n	90022dae <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x12e>
90022f6c:	2700      	movs	r7, #0
90022f6e:	463d      	mov	r5, r7
90022f70:	4638      	mov	r0, r7
90022f72:	46bb      	mov	fp, r7
90022f74:	e745      	b.n	90022e02 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x182>
90022f76:	4677      	mov	r7, lr
90022f78:	4675      	mov	r5, lr
90022f7a:	4670      	mov	r0, lr
90022f7c:	46f3      	mov	fp, lr
90022f7e:	e740      	b.n	90022e02 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x182>
90022f80:	2700      	movs	r7, #0
90022f82:	4638      	mov	r0, r7
90022f84:	e73d      	b.n	90022e02 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x182>
90022f86:	460f      	mov	r7, r1
90022f88:	4608      	mov	r0, r1
90022f8a:	e73a      	b.n	90022e02 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x182>

90022f8c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
90022f8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90022f90:	b097      	sub	sp, #92	; 0x5c
90022f92:	9214      	str	r2, [sp, #80]	; 0x50
90022f94:	9308      	str	r3, [sp, #32]
90022f96:	9a25      	ldr	r2, [sp, #148]	; 0x94
90022f98:	f89d 30a4 	ldrb.w	r3, [sp, #164]	; 0xa4
90022f9c:	9015      	str	r0, [sp, #84]	; 0x54
90022f9e:	9312      	str	r3, [sp, #72]	; 0x48
90022fa0:	6850      	ldr	r0, [r2, #4]
90022fa2:	9111      	str	r1, [sp, #68]	; 0x44
90022fa4:	6812      	ldr	r2, [r2, #0]
90022fa6:	e9dd 1326 	ldrd	r1, r3, [sp, #152]	; 0x98
90022faa:	fb00 1303 	mla	r3, r0, r3, r1
90022fae:	eb02 0343 	add.w	r3, r2, r3, lsl #1
90022fb2:	9309      	str	r3, [sp, #36]	; 0x24
90022fb4:	9b28      	ldr	r3, [sp, #160]	; 0xa0
90022fb6:	681b      	ldr	r3, [r3, #0]
90022fb8:	930b      	str	r3, [sp, #44]	; 0x2c
90022fba:	9b28      	ldr	r3, [sp, #160]	; 0xa0
90022fbc:	685b      	ldr	r3, [r3, #4]
90022fbe:	930c      	str	r3, [sp, #48]	; 0x30
90022fc0:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
90022fc4:	930a      	str	r3, [sp, #40]	; 0x28
90022fc6:	9b11      	ldr	r3, [sp, #68]	; 0x44
90022fc8:	2b00      	cmp	r3, #0
90022fca:	dc03      	bgt.n	90022fd4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
90022fcc:	9b14      	ldr	r3, [sp, #80]	; 0x50
90022fce:	2b00      	cmp	r3, #0
90022fd0:	f340 83cd 	ble.w	9002376e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e2>
90022fd4:	9b28      	ldr	r3, [sp, #160]	; 0xa0
90022fd6:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
90022fda:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
90022fde:	1e48      	subs	r0, r1, #1
90022fe0:	1e55      	subs	r5, r2, #1
90022fe2:	9b08      	ldr	r3, [sp, #32]
90022fe4:	2b00      	cmp	r3, #0
90022fe6:	f340 81a5 	ble.w	90023334 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a8>
90022fea:	9e21      	ldr	r6, [sp, #132]	; 0x84
90022fec:	9b22      	ldr	r3, [sp, #136]	; 0x88
90022fee:	1436      	asrs	r6, r6, #16
90022ff0:	ea4f 4323 	mov.w	r3, r3, asr #16
90022ff4:	d406      	bmi.n	90023004 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
90022ff6:	4286      	cmp	r6, r0
90022ff8:	da04      	bge.n	90023004 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
90022ffa:	2b00      	cmp	r3, #0
90022ffc:	db02      	blt.n	90023004 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
90022ffe:	42ab      	cmp	r3, r5
90023000:	f2c0 8199 	blt.w	90023336 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3aa>
90023004:	3601      	adds	r6, #1
90023006:	f100 8186 	bmi.w	90023316 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
9002300a:	42b1      	cmp	r1, r6
9002300c:	f2c0 8183 	blt.w	90023316 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
90023010:	3301      	adds	r3, #1
90023012:	f100 8180 	bmi.w	90023316 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
90023016:	429a      	cmp	r2, r3
90023018:	f2c0 817d 	blt.w	90023316 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
9002301c:	9b08      	ldr	r3, [sp, #32]
9002301e:	f64f 061f 	movw	r6, #63519	; 0xf81f
90023022:	9f09      	ldr	r7, [sp, #36]	; 0x24
90023024:	9313      	str	r3, [sp, #76]	; 0x4c
90023026:	9b13      	ldr	r3, [sp, #76]	; 0x4c
90023028:	2b00      	cmp	r3, #0
9002302a:	f340 81a6 	ble.w	9002337a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
9002302e:	9b22      	ldr	r3, [sp, #136]	; 0x88
90023030:	9d21      	ldr	r5, [sp, #132]	; 0x84
90023032:	1418      	asrs	r0, r3, #16
90023034:	9b21      	ldr	r3, [sp, #132]	; 0x84
90023036:	142d      	asrs	r5, r5, #16
90023038:	f3c3 3103 	ubfx	r1, r3, #12, #4
9002303c:	9b22      	ldr	r3, [sp, #136]	; 0x88
9002303e:	f3c3 3c03 	ubfx	ip, r3, #12, #4
90023042:	9b28      	ldr	r3, [sp, #160]	; 0xa0
90023044:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
90023048:	f100 81fa 	bmi.w	90023440 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
9002304c:	f102 3eff 	add.w	lr, r2, #4294967295
90023050:	4575      	cmp	r5, lr
90023052:	f280 81f5 	bge.w	90023440 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
90023056:	2800      	cmp	r0, #0
90023058:	f2c0 81f2 	blt.w	90023440 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
9002305c:	f103 3eff 	add.w	lr, r3, #4294967295
90023060:	4570      	cmp	r0, lr
90023062:	f280 81ed 	bge.w	90023440 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
90023066:	b212      	sxth	r2, r2
90023068:	9b0c      	ldr	r3, [sp, #48]	; 0x30
9002306a:	fa1f fe81 	uxth.w	lr, r1
9002306e:	fb00 5002 	mla	r0, r0, r2, r5
90023072:	ea4f 150e 	mov.w	r5, lr, lsl #4
90023076:	eb03 0a00 	add.w	sl, r3, r0
9002307a:	f813 9000 	ldrb.w	r9, [r3, r0]
9002307e:	f5c5 7380 	rsb	r3, r5, #256	; 0x100
90023082:	f89a 8001 	ldrb.w	r8, [sl, #1]
90023086:	b29b      	uxth	r3, r3
90023088:	f1bc 0f00 	cmp.w	ip, #0
9002308c:	f000 81bb 	beq.w	90023406 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x47a>
90023090:	f81a 4002 	ldrb.w	r4, [sl, r2]
90023094:	eb0a 0b02 	add.w	fp, sl, r2
90023098:	fa1f fa8c 	uxth.w	sl, ip
9002309c:	940d      	str	r4, [sp, #52]	; 0x34
9002309e:	fb0a fe0e 	mul.w	lr, sl, lr
900230a2:	f89b 4001 	ldrb.w	r4, [fp, #1]
900230a6:	ebce 1a0a 	rsb	sl, lr, sl, lsl #4
900230aa:	eba5 050e 	sub.w	r5, r5, lr
900230ae:	940e      	str	r4, [sp, #56]	; 0x38
900230b0:	fa1f fa8a 	uxth.w	sl, sl
900230b4:	9c0d      	ldr	r4, [sp, #52]	; 0x34
900230b6:	b2ad      	uxth	r5, r5
900230b8:	eba3 030a 	sub.w	r3, r3, sl
900230bc:	fb08 f505 	mul.w	r5, r8, r5
900230c0:	b29b      	uxth	r3, r3
900230c2:	fb09 5303 	mla	r3, r9, r3, r5
900230c6:	fb0a 3304 	mla	r3, sl, r4, r3
900230ca:	9c0e      	ldr	r4, [sp, #56]	; 0x38
900230cc:	fb0e 3304 	mla	r3, lr, r4, r3
900230d0:	f3c3 2307 	ubfx	r3, r3, #8, #8
900230d4:	2b00      	cmp	r3, #0
900230d6:	f000 8111 	beq.w	900232fc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
900230da:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
900230dc:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
900230e0:	eb04 0540 	add.w	r5, r4, r0, lsl #1
900230e4:	f834 0010 	ldrh.w	r0, [r4, r0, lsl #1]
900230e8:	f000 8192 	beq.w	90023410 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x484>
900230ec:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
900230f0:	ea4f 0ae9 	mov.w	sl, r9, asr #3
900230f4:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
900230f8:	fb0a fe0e 	mul.w	lr, sl, lr
900230fc:	fb09 f000 	mul.w	r0, r9, r0
90023100:	ea06 195e 	and.w	r9, r6, lr, lsr #5
90023104:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
90023108:	f100 0b20 	add.w	fp, r0, #32
9002310c:	44ce      	add	lr, r9
9002310e:	eb0b 2910 	add.w	r9, fp, r0, lsr #8
90023112:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
90023116:	ea4f 2919 	mov.w	r9, r9, lsr #8
9002311a:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
9002311e:	ea4e 0909 	orr.w	r9, lr, r9
90023122:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
90023126:	8868      	ldrh	r0, [r5, #2]
90023128:	d019      	beq.n	9002315e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
9002312a:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
9002312e:	ea4f 0ae8 	mov.w	sl, r8, asr #3
90023132:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
90023136:	fb0a fe0e 	mul.w	lr, sl, lr
9002313a:	fb08 f800 	mul.w	r8, r8, r0
9002313e:	ea06 105e 	and.w	r0, r6, lr, lsr #5
90023142:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
90023146:	f108 0b20 	add.w	fp, r8, #32
9002314a:	4486      	add	lr, r0
9002314c:	eb0b 2018 	add.w	r0, fp, r8, lsr #8
90023150:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
90023154:	0a00      	lsrs	r0, r0, #8
90023156:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
9002315a:	ea4e 0000 	orr.w	r0, lr, r0
9002315e:	ea4f 4e09 	mov.w	lr, r9, lsl #16
90023162:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
90023166:	ea4f 4a00 	mov.w	sl, r0, lsl #16
9002316a:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
9002316e:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
90023172:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
90023176:	ea4e 0909 	orr.w	r9, lr, r9
9002317a:	ea4a 0000 	orr.w	r0, sl, r0
9002317e:	f1bc 0f00 	cmp.w	ip, #0
90023182:	f000 8147 	beq.w	90023414 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x488>
90023186:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
9002318a:	9c0d      	ldr	r4, [sp, #52]	; 0x34
9002318c:	3a01      	subs	r2, #1
9002318e:	2cff      	cmp	r4, #255	; 0xff
90023190:	ea4f 0242 	mov.w	r2, r2, lsl #1
90023194:	f102 0202 	add.w	r2, r2, #2
90023198:	eb05 0e02 	add.w	lr, r5, r2
9002319c:	5aaa      	ldrh	r2, [r5, r2]
9002319e:	d018      	beq.n	900231d2 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x246>
900231a0:	f422 65fc 	bic.w	r5, r2, #2016	; 0x7e0
900231a4:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
900231a8:	ea4f 08e4 	mov.w	r8, r4, asr #3
900231ac:	fb04 fa02 	mul.w	sl, r4, r2
900231b0:	fb08 f805 	mul.w	r8, r8, r5
900231b4:	f10a 0520 	add.w	r5, sl, #32
900231b8:	ea06 1258 	and.w	r2, r6, r8, lsr #5
900231bc:	f608 0801 	addw	r8, r8, #2049	; 0x801
900231c0:	eb05 251a 	add.w	r5, r5, sl, lsr #8
900231c4:	4442      	add	r2, r8
900231c6:	0a2d      	lsrs	r5, r5, #8
900231c8:	ea06 1252 	and.w	r2, r6, r2, lsr #5
900231cc:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
900231d0:	432a      	orrs	r2, r5
900231d2:	9c0e      	ldr	r4, [sp, #56]	; 0x38
900231d4:	f8be 5002 	ldrh.w	r5, [lr, #2]
900231d8:	2cff      	cmp	r4, #255	; 0xff
900231da:	d01a      	beq.n	90023212 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x286>
900231dc:	f425 6efc 	bic.w	lr, r5, #2016	; 0x7e0
900231e0:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
900231e4:	ea4f 08e4 	mov.w	r8, r4, asr #3
900231e8:	fb04 fa05 	mul.w	sl, r4, r5
900231ec:	fb08 f80e 	mul.w	r8, r8, lr
900231f0:	f10a 0e20 	add.w	lr, sl, #32
900231f4:	ea06 1558 	and.w	r5, r6, r8, lsr #5
900231f8:	f608 0801 	addw	r8, r8, #2049	; 0x801
900231fc:	eb0e 2e1a 	add.w	lr, lr, sl, lsr #8
90023200:	4445      	add	r5, r8
90023202:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
90023206:	ea06 1555 	and.w	r5, r6, r5, lsr #5
9002320a:	f40e 6efc 	and.w	lr, lr, #2016	; 0x7e0
9002320e:	ea45 050e 	orr.w	r5, r5, lr
90023212:	fb1c fe01 	smulbb	lr, ip, r1
90023216:	f1cc 0810 	rsb	r8, ip, #16
9002321a:	ea4f 4a02 	mov.w	sl, r2, lsl #16
9002321e:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
90023222:	ea4f 0eee 	mov.w	lr, lr, asr #3
90023226:	eba8 0801 	sub.w	r8, r8, r1
9002322a:	ea4f 4b05 	mov.w	fp, r5, lsl #16
9002322e:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
90023232:	ebce 0141 	rsb	r1, lr, r1, lsl #1
90023236:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
9002323a:	eb0e 0848 	add.w	r8, lr, r8, lsl #1
9002323e:	ea4a 0202 	orr.w	r2, sl, r2
90023242:	4341      	muls	r1, r0
90023244:	ebce 0c4c 	rsb	ip, lr, ip, lsl #1
90023248:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
9002324c:	fb09 1108 	mla	r1, r9, r8, r1
90023250:	ea4b 0505 	orr.w	r5, fp, r5
90023254:	fb0c 1102 	mla	r1, ip, r2, r1
90023258:	fb0e 1e05 	mla	lr, lr, r5, r1
9002325c:	ea4f 525e 	mov.w	r2, lr, lsr #21
90023260:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
90023264:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
90023268:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
9002326c:	ea42 0e0e 	orr.w	lr, r2, lr
90023270:	fa1f f28e 	uxth.w	r2, lr
90023274:	2bff      	cmp	r3, #255	; 0xff
90023276:	d103      	bne.n	90023280 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
90023278:	9912      	ldr	r1, [sp, #72]	; 0x48
9002327a:	29ff      	cmp	r1, #255	; 0xff
9002327c:	f000 80de 	beq.w	9002343c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>
90023280:	990a      	ldr	r1, [sp, #40]	; 0x28
90023282:	1215      	asrs	r5, r2, #8
90023284:	8838      	ldrh	r0, [r7, #0]
90023286:	434b      	muls	r3, r1
90023288:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
9002328c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
9002328e:	f103 0c01 	add.w	ip, r3, #1
90023292:	eb0c 2323 	add.w	r3, ip, r3, asr #8
90023296:	ea6f 2323 	mvn.w	r3, r3, asr #8
9002329a:	fa5f fc83 	uxtb.w	ip, r3
9002329e:	1203      	asrs	r3, r0, #8
900232a0:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
900232a4:	fb13 f30c 	smulbb	r3, r3, ip
900232a8:	fb05 3501 	mla	r5, r5, r1, r3
900232ac:	10c3      	asrs	r3, r0, #3
900232ae:	10d1      	asrs	r1, r2, #3
900232b0:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
900232b4:	00d2      	lsls	r2, r2, #3
900232b6:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
900232ba:	b2ad      	uxth	r5, r5
900232bc:	fb13 f30c 	smulbb	r3, r3, ip
900232c0:	b2d2      	uxtb	r2, r2
900232c2:	fb01 3104 	mla	r1, r1, r4, r3
900232c6:	00c3      	lsls	r3, r0, #3
900232c8:	b2db      	uxtb	r3, r3
900232ca:	b289      	uxth	r1, r1
900232cc:	fb13 f30c 	smulbb	r3, r3, ip
900232d0:	fb02 3304 	mla	r3, r2, r4, r3
900232d4:	b29a      	uxth	r2, r3
900232d6:	1c6b      	adds	r3, r5, #1
900232d8:	eb03 2515 	add.w	r5, r3, r5, lsr #8
900232dc:	1c53      	adds	r3, r2, #1
900232de:	eb03 2312 	add.w	r3, r3, r2, lsr #8
900232e2:	1c4a      	adds	r2, r1, #1
900232e4:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
900232e8:	eb02 2111 	add.w	r1, r2, r1, lsr #8
900232ec:	f3c3 23c4 	ubfx	r3, r3, #11, #5
900232f0:	0949      	lsrs	r1, r1, #5
900232f2:	432b      	orrs	r3, r5
900232f4:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
900232f8:	430b      	orrs	r3, r1
900232fa:	803b      	strh	r3, [r7, #0]
900232fc:	9b21      	ldr	r3, [sp, #132]	; 0x84
900232fe:	3702      	adds	r7, #2
90023300:	9a23      	ldr	r2, [sp, #140]	; 0x8c
90023302:	4413      	add	r3, r2
90023304:	9a22      	ldr	r2, [sp, #136]	; 0x88
90023306:	9321      	str	r3, [sp, #132]	; 0x84
90023308:	9b24      	ldr	r3, [sp, #144]	; 0x90
9002330a:	441a      	add	r2, r3
9002330c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
9002330e:	3b01      	subs	r3, #1
90023310:	9222      	str	r2, [sp, #136]	; 0x88
90023312:	9313      	str	r3, [sp, #76]	; 0x4c
90023314:	e687      	b.n	90023026 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
90023316:	9b21      	ldr	r3, [sp, #132]	; 0x84
90023318:	9e23      	ldr	r6, [sp, #140]	; 0x8c
9002331a:	9c22      	ldr	r4, [sp, #136]	; 0x88
9002331c:	4433      	add	r3, r6
9002331e:	9321      	str	r3, [sp, #132]	; 0x84
90023320:	9b24      	ldr	r3, [sp, #144]	; 0x90
90023322:	441c      	add	r4, r3
90023324:	9b08      	ldr	r3, [sp, #32]
90023326:	3b01      	subs	r3, #1
90023328:	9422      	str	r4, [sp, #136]	; 0x88
9002332a:	9308      	str	r3, [sp, #32]
9002332c:	9b09      	ldr	r3, [sp, #36]	; 0x24
9002332e:	3302      	adds	r3, #2
90023330:	9309      	str	r3, [sp, #36]	; 0x24
90023332:	e656      	b.n	90022fe2 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
90023334:	d028      	beq.n	90023388 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3fc>
90023336:	9b08      	ldr	r3, [sp, #32]
90023338:	9823      	ldr	r0, [sp, #140]	; 0x8c
9002333a:	3b01      	subs	r3, #1
9002333c:	9d21      	ldr	r5, [sp, #132]	; 0x84
9002333e:	fb00 5003 	mla	r0, r0, r3, r5
90023342:	1400      	asrs	r0, r0, #16
90023344:	f53f ae6a 	bmi.w	9002301c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
90023348:	3901      	subs	r1, #1
9002334a:	4288      	cmp	r0, r1
9002334c:	f6bf ae66 	bge.w	9002301c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
90023350:	9924      	ldr	r1, [sp, #144]	; 0x90
90023352:	9822      	ldr	r0, [sp, #136]	; 0x88
90023354:	fb01 0303 	mla	r3, r1, r3, r0
90023358:	141b      	asrs	r3, r3, #16
9002335a:	f53f ae5f 	bmi.w	9002301c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
9002335e:	3a01      	subs	r2, #1
90023360:	4293      	cmp	r3, r2
90023362:	f6bf ae5b 	bge.w	9002301c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
90023366:	9b08      	ldr	r3, [sp, #32]
90023368:	f64f 061f 	movw	r6, #63519	; 0xf81f
9002336c:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
90023370:	9313      	str	r3, [sp, #76]	; 0x4c
90023372:	9b13      	ldr	r3, [sp, #76]	; 0x4c
90023374:	2b00      	cmp	r3, #0
90023376:	f300 8082 	bgt.w	9002347e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f2>
9002337a:	9b08      	ldr	r3, [sp, #32]
9002337c:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
90023380:	9b09      	ldr	r3, [sp, #36]	; 0x24
90023382:	eb03 0344 	add.w	r3, r3, r4, lsl #1
90023386:	9309      	str	r3, [sp, #36]	; 0x24
90023388:	9b11      	ldr	r3, [sp, #68]	; 0x44
9002338a:	2b00      	cmp	r3, #0
9002338c:	f340 81ef 	ble.w	9002376e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e2>
90023390:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
90023394:	9b20      	ldr	r3, [sp, #128]	; 0x80
90023396:	ee30 0a04 	vadd.f32	s0, s0, s8
9002339a:	ee70 0aa4 	vadd.f32	s1, s1, s9
9002339e:	eef0 6a62 	vmov.f32	s13, s5
900233a2:	eec7 7a00 	vdiv.f32	s15, s14, s0
900233a6:	ee31 1a05 	vadd.f32	s2, s2, s10
900233aa:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
900233ae:	edcd 6a21 	vstr	s13, [sp, #132]	; 0x84
900233b2:	eef0 6a43 	vmov.f32	s13, s6
900233b6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
900233ba:	edcd 6a22 	vstr	s13, [sp, #136]	; 0x88
900233be:	ee20 7aa7 	vmul.f32	s14, s1, s15
900233c2:	ee61 7a27 	vmul.f32	s15, s2, s15
900233c6:	ee77 2a62 	vsub.f32	s5, s14, s5
900233ca:	ee37 3ac3 	vsub.f32	s6, s15, s6
900233ce:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
900233d2:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
900233d6:	ee12 2a90 	vmov	r2, s5
900233da:	eef0 2a47 	vmov.f32	s5, s14
900233de:	fb92 f3f3 	sdiv	r3, r2, r3
900233e2:	ee13 2a10 	vmov	r2, s6
900233e6:	9323      	str	r3, [sp, #140]	; 0x8c
900233e8:	9b20      	ldr	r3, [sp, #128]	; 0x80
900233ea:	eeb0 3a67 	vmov.f32	s6, s15
900233ee:	fb92 f3f3 	sdiv	r3, r2, r3
900233f2:	9324      	str	r3, [sp, #144]	; 0x90
900233f4:	9b11      	ldr	r3, [sp, #68]	; 0x44
900233f6:	9a14      	ldr	r2, [sp, #80]	; 0x50
900233f8:	3b01      	subs	r3, #1
900233fa:	9311      	str	r3, [sp, #68]	; 0x44
900233fc:	9b20      	ldr	r3, [sp, #128]	; 0x80
900233fe:	bf08      	it	eq
90023400:	4613      	moveq	r3, r2
90023402:	9308      	str	r3, [sp, #32]
90023404:	e5df      	b.n	90022fc6 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
90023406:	fb08 f505 	mul.w	r5, r8, r5
9002340a:	fb09 5303 	mla	r3, r9, r3, r5
9002340e:	e65f      	b.n	900230d0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x144>
90023410:	4681      	mov	r9, r0
90023412:	e686      	b.n	90023122 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
90023414:	f1c1 0210 	rsb	r2, r1, #16
90023418:	4341      	muls	r1, r0
9002341a:	fb09 1902 	mla	r9, r9, r2, r1
9002341e:	ea4f 0949 	mov.w	r9, r9, lsl #1
90023422:	ea4f 5259 	mov.w	r2, r9, lsr #21
90023426:	ea4f 1959 	mov.w	r9, r9, lsr #5
9002342a:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
9002342e:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
90023432:	ea42 0909 	orr.w	r9, r2, r9
90023436:	fa1f f289 	uxth.w	r2, r9
9002343a:	e71b      	b.n	90023274 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e8>
9002343c:	803a      	strh	r2, [r7, #0]
9002343e:	e75d      	b.n	900232fc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
90023440:	f115 0e01 	adds.w	lr, r5, #1
90023444:	f53f af5a 	bmi.w	900232fc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
90023448:	4572      	cmp	r2, lr
9002344a:	f6ff af57 	blt.w	900232fc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
9002344e:	f110 0e01 	adds.w	lr, r0, #1
90023452:	f53f af53 	bmi.w	900232fc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
90023456:	4573      	cmp	r3, lr
90023458:	f6ff af50 	blt.w	900232fc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
9002345c:	9c12      	ldr	r4, [sp, #72]	; 0x48
9002345e:	b21b      	sxth	r3, r3
90023460:	b212      	sxth	r2, r2
90023462:	9502      	str	r5, [sp, #8]
90023464:	9301      	str	r3, [sp, #4]
90023466:	9200      	str	r2, [sp, #0]
90023468:	e9cd 0103 	strd	r0, r1, [sp, #12]
9002346c:	e9cd c405 	strd	ip, r4, [sp, #20]
90023470:	e9dd 230b 	ldrd	r2, r3, [sp, #44]	; 0x2c
90023474:	4639      	mov	r1, r7
90023476:	9815      	ldr	r0, [sp, #84]	; 0x54
90023478:	f7ff fc02 	bl	90022c80 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh>
9002347c:	e73e      	b.n	900232fc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
9002347e:	9b21      	ldr	r3, [sp, #132]	; 0x84
90023480:	f3c3 3203 	ubfx	r2, r3, #12, #4
90023484:	9b22      	ldr	r3, [sp, #136]	; 0x88
90023486:	f3c3 3503 	ubfx	r5, r3, #12, #4
9002348a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
9002348c:	fa1f fc82 	uxth.w	ip, r2
90023490:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
90023494:	9b22      	ldr	r3, [sp, #136]	; 0x88
90023496:	ea4f 100c 	mov.w	r0, ip, lsl #4
9002349a:	141f      	asrs	r7, r3, #16
9002349c:	9b21      	ldr	r3, [sp, #132]	; 0x84
9002349e:	141b      	asrs	r3, r3, #16
900234a0:	fb01 3707 	mla	r7, r1, r7, r3
900234a4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
900234a6:	eb03 0a07 	add.w	sl, r3, r7
900234aa:	f813 9007 	ldrb.w	r9, [r3, r7]
900234ae:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
900234b2:	f89a 8001 	ldrb.w	r8, [sl, #1]
900234b6:	b29b      	uxth	r3, r3
900234b8:	2d00      	cmp	r5, #0
900234ba:	f000 813d 	beq.w	90023738 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7ac>
900234be:	f81a 4001 	ldrb.w	r4, [sl, r1]
900234c2:	eb0a 0b01 	add.w	fp, sl, r1
900234c6:	fa1f fa85 	uxth.w	sl, r5
900234ca:	940f      	str	r4, [sp, #60]	; 0x3c
900234cc:	fb0a fc0c 	mul.w	ip, sl, ip
900234d0:	f89b 4001 	ldrb.w	r4, [fp, #1]
900234d4:	ebcc 1a0a 	rsb	sl, ip, sl, lsl #4
900234d8:	eba0 000c 	sub.w	r0, r0, ip
900234dc:	9410      	str	r4, [sp, #64]	; 0x40
900234de:	fa1f fa8a 	uxth.w	sl, sl
900234e2:	b280      	uxth	r0, r0
900234e4:	eba3 030a 	sub.w	r3, r3, sl
900234e8:	fb08 f000 	mul.w	r0, r8, r0
900234ec:	b29b      	uxth	r3, r3
900234ee:	fb09 0303 	mla	r3, r9, r3, r0
900234f2:	980f      	ldr	r0, [sp, #60]	; 0x3c
900234f4:	fb0a 3300 	mla	r3, sl, r0, r3
900234f8:	fb0c 3304 	mla	r3, ip, r4, r3
900234fc:	f3c3 2307 	ubfx	r3, r3, #8, #8
90023500:	2b00      	cmp	r3, #0
90023502:	f000 810b 	beq.w	9002371c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x790>
90023506:	980b      	ldr	r0, [sp, #44]	; 0x2c
90023508:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
9002350c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
9002350e:	eb00 0047 	add.w	r0, r0, r7, lsl #1
90023512:	f834 7017 	ldrh.w	r7, [r4, r7, lsl #1]
90023516:	f000 8114 	beq.w	90023742 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7b6>
9002351a:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
9002351e:	ea4f 0ae9 	mov.w	sl, r9, asr #3
90023522:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
90023526:	fb0a fc0c 	mul.w	ip, sl, ip
9002352a:	fb09 f707 	mul.w	r7, r9, r7
9002352e:	ea06 195c 	and.w	r9, r6, ip, lsr #5
90023532:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
90023536:	f107 0b20 	add.w	fp, r7, #32
9002353a:	44cc      	add	ip, r9
9002353c:	eb0b 2917 	add.w	r9, fp, r7, lsr #8
90023540:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
90023544:	ea4f 2919 	mov.w	r9, r9, lsr #8
90023548:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
9002354c:	ea4c 0909 	orr.w	r9, ip, r9
90023550:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
90023554:	8847      	ldrh	r7, [r0, #2]
90023556:	d019      	beq.n	9002358c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x600>
90023558:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
9002355c:	ea4f 0ae8 	mov.w	sl, r8, asr #3
90023560:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
90023564:	fb0a fc0c 	mul.w	ip, sl, ip
90023568:	fb08 f807 	mul.w	r8, r8, r7
9002356c:	ea06 175c 	and.w	r7, r6, ip, lsr #5
90023570:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
90023574:	f108 0b20 	add.w	fp, r8, #32
90023578:	44bc      	add	ip, r7
9002357a:	eb0b 2718 	add.w	r7, fp, r8, lsr #8
9002357e:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
90023582:	0a3f      	lsrs	r7, r7, #8
90023584:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
90023588:	ea4c 0707 	orr.w	r7, ip, r7
9002358c:	ea4f 4c09 	mov.w	ip, r9, lsl #16
90023590:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
90023594:	ea4f 4a07 	mov.w	sl, r7, lsl #16
90023598:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
9002359c:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
900235a0:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
900235a4:	ea4c 0909 	orr.w	r9, ip, r9
900235a8:	ea4a 0707 	orr.w	r7, sl, r7
900235ac:	2d00      	cmp	r5, #0
900235ae:	f000 80ca 	beq.w	90023746 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7ba>
900235b2:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
900235b6:	3901      	subs	r1, #1
900235b8:	0049      	lsls	r1, r1, #1
900235ba:	3102      	adds	r1, #2
900235bc:	eb00 0c01 	add.w	ip, r0, r1
900235c0:	5a41      	ldrh	r1, [r0, r1]
900235c2:	980f      	ldr	r0, [sp, #60]	; 0x3c
900235c4:	28ff      	cmp	r0, #255	; 0xff
900235c6:	d019      	beq.n	900235fc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x670>
900235c8:	f421 60fc 	bic.w	r0, r1, #2016	; 0x7e0
900235cc:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
900235ce:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
900235d2:	ea4f 08e4 	mov.w	r8, r4, asr #3
900235d6:	fb04 fa01 	mul.w	sl, r4, r1
900235da:	fb08 f800 	mul.w	r8, r8, r0
900235de:	f10a 0020 	add.w	r0, sl, #32
900235e2:	ea06 1158 	and.w	r1, r6, r8, lsr #5
900235e6:	f608 0801 	addw	r8, r8, #2049	; 0x801
900235ea:	eb00 201a 	add.w	r0, r0, sl, lsr #8
900235ee:	4441      	add	r1, r8
900235f0:	0a00      	lsrs	r0, r0, #8
900235f2:	ea06 1151 	and.w	r1, r6, r1, lsr #5
900235f6:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
900235fa:	4301      	orrs	r1, r0
900235fc:	9c10      	ldr	r4, [sp, #64]	; 0x40
900235fe:	f8bc 0002 	ldrh.w	r0, [ip, #2]
90023602:	2cff      	cmp	r4, #255	; 0xff
90023604:	d01a      	beq.n	9002363c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6b0>
90023606:	f420 6cfc 	bic.w	ip, r0, #2016	; 0x7e0
9002360a:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
9002360e:	ea4f 08e4 	mov.w	r8, r4, asr #3
90023612:	fb04 fa00 	mul.w	sl, r4, r0
90023616:	fb08 f80c 	mul.w	r8, r8, ip
9002361a:	f10a 0c20 	add.w	ip, sl, #32
9002361e:	ea06 1058 	and.w	r0, r6, r8, lsr #5
90023622:	f608 0801 	addw	r8, r8, #2049	; 0x801
90023626:	eb0c 2c1a 	add.w	ip, ip, sl, lsr #8
9002362a:	4440      	add	r0, r8
9002362c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
90023630:	ea06 1050 	and.w	r0, r6, r0, lsr #5
90023634:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
90023638:	ea40 000c 	orr.w	r0, r0, ip
9002363c:	fb15 fc02 	smulbb	ip, r5, r2
90023640:	f1c5 0810 	rsb	r8, r5, #16
90023644:	ea4f 4a01 	mov.w	sl, r1, lsl #16
90023648:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
9002364c:	ea4f 0cec 	mov.w	ip, ip, asr #3
90023650:	eba8 0802 	sub.w	r8, r8, r2
90023654:	ea4f 4b00 	mov.w	fp, r0, lsl #16
90023658:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
9002365c:	ebcc 0242 	rsb	r2, ip, r2, lsl #1
90023660:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
90023664:	eb0c 0848 	add.w	r8, ip, r8, lsl #1
90023668:	ea4a 0101 	orr.w	r1, sl, r1
9002366c:	437a      	muls	r2, r7
9002366e:	ebcc 0545 	rsb	r5, ip, r5, lsl #1
90023672:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
90023676:	fb09 2208 	mla	r2, r9, r8, r2
9002367a:	ea4b 0000 	orr.w	r0, fp, r0
9002367e:	fb05 2201 	mla	r2, r5, r1, r2
90023682:	fb0c 2200 	mla	r2, ip, r0, r2
90023686:	0d57      	lsrs	r7, r2, #21
90023688:	0952      	lsrs	r2, r2, #5
9002368a:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
9002368e:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
90023692:	433a      	orrs	r2, r7
90023694:	2bff      	cmp	r3, #255	; 0xff
90023696:	b292      	uxth	r2, r2
90023698:	d102      	bne.n	900236a0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x714>
9002369a:	9912      	ldr	r1, [sp, #72]	; 0x48
9002369c:	29ff      	cmp	r1, #255	; 0xff
9002369e:	d063      	beq.n	90023768 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7dc>
900236a0:	980a      	ldr	r0, [sp, #40]	; 0x28
900236a2:	1215      	asrs	r5, r2, #8
900236a4:	f8be 1000 	ldrh.w	r1, [lr]
900236a8:	4343      	muls	r3, r0
900236aa:	9c0a      	ldr	r4, [sp, #40]	; 0x28
900236ac:	10cf      	asrs	r7, r1, #3
900236ae:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
900236b2:	1c58      	adds	r0, r3, #1
900236b4:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
900236b8:	eb00 2323 	add.w	r3, r0, r3, asr #8
900236bc:	1208      	asrs	r0, r1, #8
900236be:	ea6f 2323 	mvn.w	r3, r3, asr #8
900236c2:	00c9      	lsls	r1, r1, #3
900236c4:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
900236c8:	b2db      	uxtb	r3, r3
900236ca:	b2c9      	uxtb	r1, r1
900236cc:	fb10 f003 	smulbb	r0, r0, r3
900236d0:	fb11 f103 	smulbb	r1, r1, r3
900236d4:	fb05 0504 	mla	r5, r5, r4, r0
900236d8:	10d0      	asrs	r0, r2, #3
900236da:	fb17 f703 	smulbb	r7, r7, r3
900236de:	00d2      	lsls	r2, r2, #3
900236e0:	b2ad      	uxth	r5, r5
900236e2:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
900236e6:	b2d2      	uxtb	r2, r2
900236e8:	fb00 7004 	mla	r0, r0, r4, r7
900236ec:	1c6b      	adds	r3, r5, #1
900236ee:	fb02 1204 	mla	r2, r2, r4, r1
900236f2:	eb03 2515 	add.w	r5, r3, r5, lsr #8
900236f6:	b292      	uxth	r2, r2
900236f8:	b280      	uxth	r0, r0
900236fa:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
900236fe:	1c57      	adds	r7, r2, #1
90023700:	eb07 2712 	add.w	r7, r7, r2, lsr #8
90023704:	f3c7 27c4 	ubfx	r7, r7, #11, #5
90023708:	433d      	orrs	r5, r7
9002370a:	1c47      	adds	r7, r0, #1
9002370c:	eb07 2710 	add.w	r7, r7, r0, lsr #8
90023710:	097f      	lsrs	r7, r7, #5
90023712:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
90023716:	433d      	orrs	r5, r7
90023718:	f8ae 5000 	strh.w	r5, [lr]
9002371c:	9b21      	ldr	r3, [sp, #132]	; 0x84
9002371e:	f10e 0e02 	add.w	lr, lr, #2
90023722:	9a23      	ldr	r2, [sp, #140]	; 0x8c
90023724:	4413      	add	r3, r2
90023726:	9a22      	ldr	r2, [sp, #136]	; 0x88
90023728:	9321      	str	r3, [sp, #132]	; 0x84
9002372a:	9b24      	ldr	r3, [sp, #144]	; 0x90
9002372c:	441a      	add	r2, r3
9002372e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
90023730:	3b01      	subs	r3, #1
90023732:	9222      	str	r2, [sp, #136]	; 0x88
90023734:	9313      	str	r3, [sp, #76]	; 0x4c
90023736:	e61c      	b.n	90023372 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e6>
90023738:	fb08 f000 	mul.w	r0, r8, r0
9002373c:	fb09 0303 	mla	r3, r9, r3, r0
90023740:	e6dc      	b.n	900234fc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x570>
90023742:	46b9      	mov	r9, r7
90023744:	e704      	b.n	90023550 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c4>
90023746:	f1c2 0110 	rsb	r1, r2, #16
9002374a:	437a      	muls	r2, r7
9002374c:	fb09 2901 	mla	r9, r9, r1, r2
90023750:	ea4f 0949 	mov.w	r9, r9, lsl #1
90023754:	ea4f 5059 	mov.w	r0, r9, lsr #21
90023758:	ea4f 1259 	mov.w	r2, r9, lsr #5
9002375c:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
90023760:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
90023764:	4302      	orrs	r2, r0
90023766:	e795      	b.n	90023694 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x708>
90023768:	f8ae 2000 	strh.w	r2, [lr]
9002376c:	e7d6      	b.n	9002371c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x790>
9002376e:	b017      	add	sp, #92	; 0x5c
90023770:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

90023774 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>:
90023774:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90023778:	b085      	sub	sp, #20
9002377a:	e9dd 7010 	ldrd	r7, r0, [sp, #64]	; 0x40
9002377e:	f9bd 6038 	ldrsh.w	r6, [sp, #56]	; 0x38
90023782:	2800      	cmp	r0, #0
90023784:	9103      	str	r1, [sp, #12]
90023786:	fb00 7406 	mla	r4, r0, r6, r7
9002378a:	f9bd b03c 	ldrsh.w	fp, [sp, #60]	; 0x3c
9002378e:	f89d 1048 	ldrb.w	r1, [sp, #72]	; 0x48
90023792:	eb03 0544 	add.w	r5, r3, r4, lsl #1
90023796:	f89d e04c 	ldrb.w	lr, [sp, #76]	; 0x4c
9002379a:	eb02 0904 	add.w	r9, r2, r4
9002379e:	9501      	str	r5, [sp, #4]
900237a0:	f2c0 8141 	blt.w	90023a26 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2b2>
900237a4:	4583      	cmp	fp, r0
900237a6:	f340 813e 	ble.w	90023a26 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2b2>
900237aa:	2f00      	cmp	r7, #0
900237ac:	f2c0 8137 	blt.w	90023a1e <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2aa>
900237b0:	42be      	cmp	r6, r7
900237b2:	f340 8134 	ble.w	90023a1e <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2aa>
900237b6:	f812 c004 	ldrb.w	ip, [r2, r4]
900237ba:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
900237be:	f64f 041f 	movw	r4, #63519	; 0xf81f
900237c2:	ea4f 02ec 	mov.w	r2, ip, asr #3
900237c6:	f423 65fc 	bic.w	r5, r3, #2016	; 0x7e0
900237ca:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
900237ce:	4355      	muls	r5, r2
900237d0:	fb0c f203 	mul.w	r2, ip, r3
900237d4:	ea04 1355 	and.w	r3, r4, r5, lsr #5
900237d8:	f605 0501 	addw	r5, r5, #2049	; 0x801
900237dc:	441d      	add	r5, r3
900237de:	f102 0320 	add.w	r3, r2, #32
900237e2:	eb03 2312 	add.w	r3, r3, r2, lsr #8
900237e6:	ea04 1455 	and.w	r4, r4, r5, lsr #5
900237ea:	0a1b      	lsrs	r3, r3, #8
900237ec:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
900237f0:	431c      	orrs	r4, r3
900237f2:	1c7b      	adds	r3, r7, #1
900237f4:	f100 811c 	bmi.w	90023a30 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2bc>
900237f8:	429e      	cmp	r6, r3
900237fa:	f340 8119 	ble.w	90023a30 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2bc>
900237fe:	2900      	cmp	r1, #0
90023800:	f000 8119 	beq.w	90023a36 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2c2>
90023804:	9a01      	ldr	r2, [sp, #4]
90023806:	f899 3001 	ldrb.w	r3, [r9, #1]
9002380a:	8855      	ldrh	r5, [r2, #2]
9002380c:	ea4f 08e3 	mov.w	r8, r3, asr #3
90023810:	f425 62fc 	bic.w	r2, r5, #2016	; 0x7e0
90023814:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
90023818:	fb08 f802 	mul.w	r8, r8, r2
9002381c:	f64f 021f 	movw	r2, #63519	; 0xf81f
90023820:	435d      	muls	r5, r3
90023822:	ea02 1a58 	and.w	sl, r2, r8, lsr #5
90023826:	f608 0801 	addw	r8, r8, #2049	; 0x801
9002382a:	44d0      	add	r8, sl
9002382c:	f105 0a20 	add.w	sl, r5, #32
90023830:	eb0a 2515 	add.w	r5, sl, r5, lsr #8
90023834:	ea02 1258 	and.w	r2, r2, r8, lsr #5
90023838:	0a2d      	lsrs	r5, r5, #8
9002383a:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
9002383e:	432a      	orrs	r2, r5
90023840:	3001      	adds	r0, #1
90023842:	f100 80fe 	bmi.w	90023a42 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2ce>
90023846:	4583      	cmp	fp, r0
90023848:	f340 80fb 	ble.w	90023a42 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2ce>
9002384c:	f1be 0f00 	cmp.w	lr, #0
90023850:	f000 80fc 	beq.w	90023a4c <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2d8>
90023854:	2f00      	cmp	r7, #0
90023856:	f2c0 80f1 	blt.w	90023a3c <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2c8>
9002385a:	42be      	cmp	r6, r7
9002385c:	f340 80ee 	ble.w	90023a3c <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2c8>
90023860:	9801      	ldr	r0, [sp, #4]
90023862:	f64f 0b1f 	movw	fp, #63519	; 0xf81f
90023866:	f819 5006 	ldrb.w	r5, [r9, r6]
9002386a:	f830 8016 	ldrh.w	r8, [r0, r6, lsl #1]
9002386e:	ea4f 0ae5 	mov.w	sl, r5, asr #3
90023872:	f428 60fc 	bic.w	r0, r8, #2016	; 0x7e0
90023876:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
9002387a:	fb0a fa00 	mul.w	sl, sl, r0
9002387e:	fb05 f808 	mul.w	r8, r5, r8
90023882:	ea0b 105a 	and.w	r0, fp, sl, lsr #5
90023886:	f60a 0a01 	addw	sl, sl, #2049	; 0x801
9002388a:	4482      	add	sl, r0
9002388c:	f108 0020 	add.w	r0, r8, #32
90023890:	eb00 2018 	add.w	r0, r0, r8, lsr #8
90023894:	ea0b 1b5a 	and.w	fp, fp, sl, lsr #5
90023898:	0a00      	lsrs	r0, r0, #8
9002389a:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
9002389e:	ea4b 0b00 	orr.w	fp, fp, r0
900238a2:	3701      	adds	r7, #1
900238a4:	f100 80d7 	bmi.w	90023a56 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2e2>
900238a8:	42be      	cmp	r6, r7
900238aa:	f340 80d4 	ble.w	90023a56 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2e2>
900238ae:	2900      	cmp	r1, #0
900238b0:	f000 80d4 	beq.w	90023a5c <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2e8>
900238b4:	3601      	adds	r6, #1
900238b6:	9801      	ldr	r0, [sp, #4]
900238b8:	f819 7006 	ldrb.w	r7, [r9, r6]
900238bc:	f830 0016 	ldrh.w	r0, [r0, r6, lsl #1]
900238c0:	ea4f 09e7 	mov.w	r9, r7, asr #3
900238c4:	f420 66fc 	bic.w	r6, r0, #2016	; 0x7e0
900238c8:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
900238cc:	fb09 f906 	mul.w	r9, r9, r6
900238d0:	fb07 f800 	mul.w	r8, r7, r0
900238d4:	f64f 001f 	movw	r0, #63519	; 0xf81f
900238d8:	ea00 1a59 	and.w	sl, r0, r9, lsr #5
900238dc:	f609 0901 	addw	r9, r9, #2049	; 0x801
900238e0:	44d1      	add	r9, sl
900238e2:	ea00 1659 	and.w	r6, r0, r9, lsr #5
900238e6:	f108 0020 	add.w	r0, r8, #32
900238ea:	eb00 2018 	add.w	r0, r0, r8, lsr #8
900238ee:	0a00      	lsrs	r0, r0, #8
900238f0:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
900238f4:	4330      	orrs	r0, r6
900238f6:	b28e      	uxth	r6, r1
900238f8:	fa1f f98e 	uxth.w	r9, lr
900238fc:	ea4f 4a04 	mov.w	sl, r4, lsl #16
90023900:	f424 64fc 	bic.w	r4, r4, #2016	; 0x7e0
90023904:	fb06 f809 	mul.w	r8, r6, r9
90023908:	0136      	lsls	r6, r6, #4
9002390a:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
9002390e:	ebc8 1909 	rsb	r9, r8, r9, lsl #4
90023912:	9601      	str	r6, [sp, #4]
90023914:	ea4a 0404 	orr.w	r4, sl, r4
90023918:	ea4f 4a02 	mov.w	sl, r2, lsl #16
9002391c:	fa1f f689 	uxth.w	r6, r9
90023920:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
90023924:	fb11 f90e 	smulbb	r9, r1, lr
90023928:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
9002392c:	9602      	str	r6, [sp, #8]
9002392e:	4626      	mov	r6, r4
90023930:	f3c9 09c7 	ubfx	r9, r9, #3, #8
90023934:	f1ce 0410 	rsb	r4, lr, #16
90023938:	ea4a 0202 	orr.w	r2, sl, r2
9002393c:	ea4f 4a00 	mov.w	sl, r0, lsl #16
90023940:	1a64      	subs	r4, r4, r1
90023942:	ebc9 0141 	rsb	r1, r9, r1, lsl #1
90023946:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
9002394a:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
9002394e:	434a      	muls	r2, r1
90023950:	eb09 0444 	add.w	r4, r9, r4, lsl #1
90023954:	ea4a 0000 	orr.w	r0, sl, r0
90023958:	ebc9 0e4e 	rsb	lr, r9, lr, lsl #1
9002395c:	fb04 2406 	mla	r4, r4, r6, r2
90023960:	9903      	ldr	r1, [sp, #12]
90023962:	fb09 4200 	mla	r2, r9, r0, r4
90023966:	ea4f 440b 	mov.w	r4, fp, lsl #16
9002396a:	9801      	ldr	r0, [sp, #4]
9002396c:	f42b 6bfc 	bic.w	fp, fp, #2016	; 0x7e0
90023970:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
90023974:	8809      	ldrh	r1, [r1, #0]
90023976:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
9002397a:	ea44 0b0b 	orr.w	fp, r4, fp
9002397e:	9c02      	ldr	r4, [sp, #8]
90023980:	1b00      	subs	r0, r0, r4
90023982:	9c01      	ldr	r4, [sp, #4]
90023984:	fb0e 2e0b 	mla	lr, lr, fp, r2
90023988:	eba4 0608 	sub.w	r6, r4, r8
9002398c:	b280      	uxth	r0, r0
9002398e:	ea4f 525e 	mov.w	r2, lr, lsr #21
90023992:	b2b6      	uxth	r6, r6
90023994:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
90023998:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
9002399c:	4373      	muls	r3, r6
9002399e:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
900239a2:	fb0c 3300 	mla	r3, ip, r0, r3
900239a6:	9802      	ldr	r0, [sp, #8]
900239a8:	ea42 0e0e 	orr.w	lr, r2, lr
900239ac:	fb00 3505 	mla	r5, r0, r5, r3
900239b0:	120b      	asrs	r3, r1, #8
900239b2:	10c8      	asrs	r0, r1, #3
900239b4:	fb08 5707 	mla	r7, r8, r7, r5
900239b8:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
900239bc:	00c9      	lsls	r1, r1, #3
900239be:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
900239c2:	ea6f 2727 	mvn.w	r7, r7, asr #8
900239c6:	fa1f f28e 	uxth.w	r2, lr
900239ca:	b2c9      	uxtb	r1, r1
900239cc:	b2ff      	uxtb	r7, r7
900239ce:	437b      	muls	r3, r7
900239d0:	4378      	muls	r0, r7
900239d2:	434f      	muls	r7, r1
900239d4:	1c59      	adds	r1, r3, #1
900239d6:	eb01 2113 	add.w	r1, r1, r3, lsr #8
900239da:	1213      	asrs	r3, r2, #8
900239dc:	f023 0307 	bic.w	r3, r3, #7
900239e0:	eb03 2311 	add.w	r3, r3, r1, lsr #8
900239e4:	1c41      	adds	r1, r0, #1
900239e6:	eb01 2010 	add.w	r0, r1, r0, lsr #8
900239ea:	10d1      	asrs	r1, r2, #3
900239ec:	021b      	lsls	r3, r3, #8
900239ee:	f021 0103 	bic.w	r1, r1, #3
900239f2:	00d2      	lsls	r2, r2, #3
900239f4:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
900239f8:	eb01 2110 	add.w	r1, r1, r0, lsr #8
900239fc:	00c9      	lsls	r1, r1, #3
900239fe:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
90023a02:	430b      	orrs	r3, r1
90023a04:	1c79      	adds	r1, r7, #1
90023a06:	eb01 2717 	add.w	r7, r1, r7, lsr #8
90023a0a:	eb02 2217 	add.w	r2, r2, r7, lsr #8
90023a0e:	f3c2 02c4 	ubfx	r2, r2, #3, #5
90023a12:	431a      	orrs	r2, r3
90023a14:	9b03      	ldr	r3, [sp, #12]
90023a16:	801a      	strh	r2, [r3, #0]
90023a18:	b005      	add	sp, #20
90023a1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90023a1e:	f04f 0c00 	mov.w	ip, #0
90023a22:	4664      	mov	r4, ip
90023a24:	e6e5      	b.n	900237f2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x7e>
90023a26:	2300      	movs	r3, #0
90023a28:	469c      	mov	ip, r3
90023a2a:	461a      	mov	r2, r3
90023a2c:	461c      	mov	r4, r3
90023a2e:	e707      	b.n	90023840 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xcc>
90023a30:	2300      	movs	r3, #0
90023a32:	461a      	mov	r2, r3
90023a34:	e704      	b.n	90023840 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xcc>
90023a36:	460b      	mov	r3, r1
90023a38:	460a      	mov	r2, r1
90023a3a:	e701      	b.n	90023840 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xcc>
90023a3c:	2500      	movs	r5, #0
90023a3e:	46ab      	mov	fp, r5
90023a40:	e72f      	b.n	900238a2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x12e>
90023a42:	2700      	movs	r7, #0
90023a44:	463d      	mov	r5, r7
90023a46:	4638      	mov	r0, r7
90023a48:	46bb      	mov	fp, r7
90023a4a:	e754      	b.n	900238f6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x182>
90023a4c:	4677      	mov	r7, lr
90023a4e:	4675      	mov	r5, lr
90023a50:	4670      	mov	r0, lr
90023a52:	46f3      	mov	fp, lr
90023a54:	e74f      	b.n	900238f6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x182>
90023a56:	2700      	movs	r7, #0
90023a58:	4638      	mov	r0, r7
90023a5a:	e74c      	b.n	900238f6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x182>
90023a5c:	460f      	mov	r7, r1
90023a5e:	4608      	mov	r0, r1
90023a60:	e749      	b.n	900238f6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x182>
	...

90023a64 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
90023a64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90023a68:	b093      	sub	sp, #76	; 0x4c
90023a6a:	9210      	str	r2, [sp, #64]	; 0x40
90023a6c:	9a21      	ldr	r2, [sp, #132]	; 0x84
90023a6e:	9011      	str	r0, [sp, #68]	; 0x44
90023a70:	910e      	str	r1, [sp, #56]	; 0x38
90023a72:	6850      	ldr	r0, [r2, #4]
90023a74:	9306      	str	r3, [sp, #24]
90023a76:	6812      	ldr	r2, [r2, #0]
90023a78:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	; 0x88
90023a7c:	fb00 1303 	mla	r3, r0, r3, r1
90023a80:	eb02 0343 	add.w	r3, r2, r3, lsl #1
90023a84:	9307      	str	r3, [sp, #28]
90023a86:	9b24      	ldr	r3, [sp, #144]	; 0x90
90023a88:	681b      	ldr	r3, [r3, #0]
90023a8a:	9308      	str	r3, [sp, #32]
90023a8c:	9b24      	ldr	r3, [sp, #144]	; 0x90
90023a8e:	685b      	ldr	r3, [r3, #4]
90023a90:	9309      	str	r3, [sp, #36]	; 0x24
90023a92:	9b0e      	ldr	r3, [sp, #56]	; 0x38
90023a94:	2b00      	cmp	r3, #0
90023a96:	dc03      	bgt.n	90023aa0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
90023a98:	9b10      	ldr	r3, [sp, #64]	; 0x40
90023a9a:	2b00      	cmp	r3, #0
90023a9c:	f340 83b6 	ble.w	9002420c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a8>
90023aa0:	9b24      	ldr	r3, [sp, #144]	; 0x90
90023aa2:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
90023aa6:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
90023aaa:	1e48      	subs	r0, r1, #1
90023aac:	1e55      	subs	r5, r2, #1
90023aae:	9b06      	ldr	r3, [sp, #24]
90023ab0:	2b00      	cmp	r3, #0
90023ab2:	f340 8165 	ble.w	90023d80 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31c>
90023ab6:	9e1d      	ldr	r6, [sp, #116]	; 0x74
90023ab8:	9b1e      	ldr	r3, [sp, #120]	; 0x78
90023aba:	1436      	asrs	r6, r6, #16
90023abc:	ea4f 4323 	mov.w	r3, r3, asr #16
90023ac0:	d406      	bmi.n	90023ad0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
90023ac2:	4286      	cmp	r6, r0
90023ac4:	da04      	bge.n	90023ad0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
90023ac6:	2b00      	cmp	r3, #0
90023ac8:	db02      	blt.n	90023ad0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
90023aca:	42ab      	cmp	r3, r5
90023acc:	f2c0 8159 	blt.w	90023d82 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
90023ad0:	3601      	adds	r6, #1
90023ad2:	f100 8146 	bmi.w	90023d62 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
90023ad6:	42b1      	cmp	r1, r6
90023ad8:	f2c0 8143 	blt.w	90023d62 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
90023adc:	3301      	adds	r3, #1
90023ade:	f100 8140 	bmi.w	90023d62 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
90023ae2:	429a      	cmp	r2, r3
90023ae4:	f2c0 813d 	blt.w	90023d62 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
90023ae8:	9b06      	ldr	r3, [sp, #24]
90023aea:	f64f 061f 	movw	r6, #63519	; 0xf81f
90023aee:	9f07      	ldr	r7, [sp, #28]
90023af0:	930f      	str	r3, [sp, #60]	; 0x3c
90023af2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
90023af4:	2b00      	cmp	r3, #0
90023af6:	f340 8166 	ble.w	90023dc6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
90023afa:	9b1e      	ldr	r3, [sp, #120]	; 0x78
90023afc:	9d1d      	ldr	r5, [sp, #116]	; 0x74
90023afe:	1418      	asrs	r0, r3, #16
90023b00:	9b1d      	ldr	r3, [sp, #116]	; 0x74
90023b02:	142d      	asrs	r5, r5, #16
90023b04:	f3c3 3103 	ubfx	r1, r3, #12, #4
90023b08:	9b1e      	ldr	r3, [sp, #120]	; 0x78
90023b0a:	f3c3 3c03 	ubfx	ip, r3, #12, #4
90023b0e:	9b24      	ldr	r3, [sp, #144]	; 0x90
90023b10:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
90023b14:	f100 81f0 	bmi.w	90023ef8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x494>
90023b18:	f102 3eff 	add.w	lr, r2, #4294967295
90023b1c:	4575      	cmp	r5, lr
90023b1e:	f280 81eb 	bge.w	90023ef8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x494>
90023b22:	2800      	cmp	r0, #0
90023b24:	f2c0 81e8 	blt.w	90023ef8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x494>
90023b28:	f103 3eff 	add.w	lr, r3, #4294967295
90023b2c:	4570      	cmp	r0, lr
90023b2e:	f280 81e3 	bge.w	90023ef8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x494>
90023b32:	b212      	sxth	r2, r2
90023b34:	9b09      	ldr	r3, [sp, #36]	; 0x24
90023b36:	fa1f fe81 	uxth.w	lr, r1
90023b3a:	fb00 5002 	mla	r0, r0, r2, r5
90023b3e:	ea4f 150e 	mov.w	r5, lr, lsl #4
90023b42:	eb03 0a00 	add.w	sl, r3, r0
90023b46:	f813 9000 	ldrb.w	r9, [r3, r0]
90023b4a:	f5c5 7380 	rsb	r3, r5, #256	; 0x100
90023b4e:	f89a 8001 	ldrb.w	r8, [sl, #1]
90023b52:	b29b      	uxth	r3, r3
90023b54:	f1bc 0f00 	cmp.w	ip, #0
90023b58:	f000 817b 	beq.w	90023e52 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
90023b5c:	f81a 4002 	ldrb.w	r4, [sl, r2]
90023b60:	eb0a 0b02 	add.w	fp, sl, r2
90023b64:	fa1f fa8c 	uxth.w	sl, ip
90023b68:	940a      	str	r4, [sp, #40]	; 0x28
90023b6a:	fb0a fe0e 	mul.w	lr, sl, lr
90023b6e:	f89b 4001 	ldrb.w	r4, [fp, #1]
90023b72:	ebce 1a0a 	rsb	sl, lr, sl, lsl #4
90023b76:	eba5 050e 	sub.w	r5, r5, lr
90023b7a:	940b      	str	r4, [sp, #44]	; 0x2c
90023b7c:	fa1f fa8a 	uxth.w	sl, sl
90023b80:	9c0a      	ldr	r4, [sp, #40]	; 0x28
90023b82:	b2ad      	uxth	r5, r5
90023b84:	eba3 030a 	sub.w	r3, r3, sl
90023b88:	fb08 f505 	mul.w	r5, r8, r5
90023b8c:	b29b      	uxth	r3, r3
90023b8e:	fb09 5303 	mla	r3, r9, r3, r5
90023b92:	fb0a 3304 	mla	r3, sl, r4, r3
90023b96:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
90023b98:	fb0e 3304 	mla	r3, lr, r4, r3
90023b9c:	f3c3 2307 	ubfx	r3, r3, #8, #8
90023ba0:	2b00      	cmp	r3, #0
90023ba2:	f000 80d1 	beq.w	90023d48 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
90023ba6:	9c08      	ldr	r4, [sp, #32]
90023ba8:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
90023bac:	eb04 0540 	add.w	r5, r4, r0, lsl #1
90023bb0:	f834 0010 	ldrh.w	r0, [r4, r0, lsl #1]
90023bb4:	f000 8152 	beq.w	90023e5c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f8>
90023bb8:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
90023bbc:	ea4f 0ae9 	mov.w	sl, r9, asr #3
90023bc0:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
90023bc4:	fb0a fe0e 	mul.w	lr, sl, lr
90023bc8:	fb09 f000 	mul.w	r0, r9, r0
90023bcc:	ea06 195e 	and.w	r9, r6, lr, lsr #5
90023bd0:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
90023bd4:	f100 0b20 	add.w	fp, r0, #32
90023bd8:	44ce      	add	lr, r9
90023bda:	eb0b 2910 	add.w	r9, fp, r0, lsr #8
90023bde:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
90023be2:	ea4f 2919 	mov.w	r9, r9, lsr #8
90023be6:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
90023bea:	ea4e 0909 	orr.w	r9, lr, r9
90023bee:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
90023bf2:	8868      	ldrh	r0, [r5, #2]
90023bf4:	d019      	beq.n	90023c2a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
90023bf6:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
90023bfa:	ea4f 0ae8 	mov.w	sl, r8, asr #3
90023bfe:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
90023c02:	fb0a fe0e 	mul.w	lr, sl, lr
90023c06:	fb08 f800 	mul.w	r8, r8, r0
90023c0a:	ea06 105e 	and.w	r0, r6, lr, lsr #5
90023c0e:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
90023c12:	f108 0b20 	add.w	fp, r8, #32
90023c16:	4486      	add	lr, r0
90023c18:	eb0b 2018 	add.w	r0, fp, r8, lsr #8
90023c1c:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
90023c20:	0a00      	lsrs	r0, r0, #8
90023c22:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
90023c26:	ea4e 0000 	orr.w	r0, lr, r0
90023c2a:	ea4f 4e09 	mov.w	lr, r9, lsl #16
90023c2e:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
90023c32:	ea4f 4a00 	mov.w	sl, r0, lsl #16
90023c36:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
90023c3a:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
90023c3e:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
90023c42:	ea4e 0909 	orr.w	r9, lr, r9
90023c46:	ea4a 0000 	orr.w	r0, sl, r0
90023c4a:	f1bc 0f00 	cmp.w	ip, #0
90023c4e:	f000 8107 	beq.w	90023e60 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3fc>
90023c52:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
90023c56:	9c0a      	ldr	r4, [sp, #40]	; 0x28
90023c58:	3a01      	subs	r2, #1
90023c5a:	2cff      	cmp	r4, #255	; 0xff
90023c5c:	ea4f 0242 	mov.w	r2, r2, lsl #1
90023c60:	f102 0202 	add.w	r2, r2, #2
90023c64:	eb05 0e02 	add.w	lr, r5, r2
90023c68:	5aaa      	ldrh	r2, [r5, r2]
90023c6a:	d018      	beq.n	90023c9e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23a>
90023c6c:	f422 65fc 	bic.w	r5, r2, #2016	; 0x7e0
90023c70:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
90023c74:	ea4f 08e4 	mov.w	r8, r4, asr #3
90023c78:	fb04 fa02 	mul.w	sl, r4, r2
90023c7c:	fb08 f805 	mul.w	r8, r8, r5
90023c80:	f10a 0520 	add.w	r5, sl, #32
90023c84:	ea06 1258 	and.w	r2, r6, r8, lsr #5
90023c88:	f608 0801 	addw	r8, r8, #2049	; 0x801
90023c8c:	eb05 251a 	add.w	r5, r5, sl, lsr #8
90023c90:	4442      	add	r2, r8
90023c92:	0a2d      	lsrs	r5, r5, #8
90023c94:	ea06 1252 	and.w	r2, r6, r2, lsr #5
90023c98:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
90023c9c:	432a      	orrs	r2, r5
90023c9e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
90023ca0:	f8be 5002 	ldrh.w	r5, [lr, #2]
90023ca4:	2cff      	cmp	r4, #255	; 0xff
90023ca6:	d01a      	beq.n	90023cde <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
90023ca8:	f425 6efc 	bic.w	lr, r5, #2016	; 0x7e0
90023cac:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
90023cb0:	ea4f 08e4 	mov.w	r8, r4, asr #3
90023cb4:	fb04 fa05 	mul.w	sl, r4, r5
90023cb8:	fb08 f80e 	mul.w	r8, r8, lr
90023cbc:	f10a 0e20 	add.w	lr, sl, #32
90023cc0:	ea06 1558 	and.w	r5, r6, r8, lsr #5
90023cc4:	f608 0801 	addw	r8, r8, #2049	; 0x801
90023cc8:	eb0e 2e1a 	add.w	lr, lr, sl, lsr #8
90023ccc:	4445      	add	r5, r8
90023cce:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
90023cd2:	ea06 1555 	and.w	r5, r6, r5, lsr #5
90023cd6:	f40e 6efc 	and.w	lr, lr, #2016	; 0x7e0
90023cda:	ea45 050e 	orr.w	r5, r5, lr
90023cde:	fb1c fe01 	smulbb	lr, ip, r1
90023ce2:	f1cc 0810 	rsb	r8, ip, #16
90023ce6:	ea4f 4a02 	mov.w	sl, r2, lsl #16
90023cea:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
90023cee:	ea4f 0eee 	mov.w	lr, lr, asr #3
90023cf2:	eba8 0801 	sub.w	r8, r8, r1
90023cf6:	ea4f 4b05 	mov.w	fp, r5, lsl #16
90023cfa:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
90023cfe:	ebce 0141 	rsb	r1, lr, r1, lsl #1
90023d02:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
90023d06:	eb0e 0848 	add.w	r8, lr, r8, lsl #1
90023d0a:	ea4a 0202 	orr.w	r2, sl, r2
90023d0e:	4341      	muls	r1, r0
90023d10:	ebce 0c4c 	rsb	ip, lr, ip, lsl #1
90023d14:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
90023d18:	fb09 1108 	mla	r1, r9, r8, r1
90023d1c:	ea4b 0505 	orr.w	r5, fp, r5
90023d20:	fb0c 1102 	mla	r1, ip, r2, r1
90023d24:	fb0e 1e05 	mla	lr, lr, r5, r1
90023d28:	ea4f 525e 	mov.w	r2, lr, lsr #21
90023d2c:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
90023d30:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
90023d34:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
90023d38:	ea42 0e0e 	orr.w	lr, r2, lr
90023d3c:	fa1f f28e 	uxth.w	r2, lr
90023d40:	2bff      	cmp	r3, #255	; 0xff
90023d42:	f040 80a1 	bne.w	90023e88 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x424>
90023d46:	803a      	strh	r2, [r7, #0]
90023d48:	9b1d      	ldr	r3, [sp, #116]	; 0x74
90023d4a:	3702      	adds	r7, #2
90023d4c:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
90023d4e:	4413      	add	r3, r2
90023d50:	9a1e      	ldr	r2, [sp, #120]	; 0x78
90023d52:	931d      	str	r3, [sp, #116]	; 0x74
90023d54:	9b20      	ldr	r3, [sp, #128]	; 0x80
90023d56:	441a      	add	r2, r3
90023d58:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
90023d5a:	3b01      	subs	r3, #1
90023d5c:	921e      	str	r2, [sp, #120]	; 0x78
90023d5e:	930f      	str	r3, [sp, #60]	; 0x3c
90023d60:	e6c7      	b.n	90023af2 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
90023d62:	9b1d      	ldr	r3, [sp, #116]	; 0x74
90023d64:	9e1f      	ldr	r6, [sp, #124]	; 0x7c
90023d66:	9c1e      	ldr	r4, [sp, #120]	; 0x78
90023d68:	4433      	add	r3, r6
90023d6a:	931d      	str	r3, [sp, #116]	; 0x74
90023d6c:	9b20      	ldr	r3, [sp, #128]	; 0x80
90023d6e:	441c      	add	r4, r3
90023d70:	9b06      	ldr	r3, [sp, #24]
90023d72:	3b01      	subs	r3, #1
90023d74:	941e      	str	r4, [sp, #120]	; 0x78
90023d76:	9306      	str	r3, [sp, #24]
90023d78:	9b07      	ldr	r3, [sp, #28]
90023d7a:	3302      	adds	r3, #2
90023d7c:	9307      	str	r3, [sp, #28]
90023d7e:	e696      	b.n	90023aae <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
90023d80:	d028      	beq.n	90023dd4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
90023d82:	9b06      	ldr	r3, [sp, #24]
90023d84:	981f      	ldr	r0, [sp, #124]	; 0x7c
90023d86:	3b01      	subs	r3, #1
90023d88:	9d1d      	ldr	r5, [sp, #116]	; 0x74
90023d8a:	fb00 5003 	mla	r0, r0, r3, r5
90023d8e:	1400      	asrs	r0, r0, #16
90023d90:	f53f aeaa 	bmi.w	90023ae8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
90023d94:	3901      	subs	r1, #1
90023d96:	4288      	cmp	r0, r1
90023d98:	f6bf aea6 	bge.w	90023ae8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
90023d9c:	9920      	ldr	r1, [sp, #128]	; 0x80
90023d9e:	981e      	ldr	r0, [sp, #120]	; 0x78
90023da0:	fb01 0303 	mla	r3, r1, r3, r0
90023da4:	141b      	asrs	r3, r3, #16
90023da6:	f53f ae9f 	bmi.w	90023ae8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
90023daa:	3a01      	subs	r2, #1
90023dac:	4293      	cmp	r3, r2
90023dae:	f6bf ae9b 	bge.w	90023ae8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
90023db2:	9b06      	ldr	r3, [sp, #24]
90023db4:	f64f 061f 	movw	r6, #63519	; 0xf81f
90023db8:	f8dd e01c 	ldr.w	lr, [sp, #28]
90023dbc:	930f      	str	r3, [sp, #60]	; 0x3c
90023dbe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
90023dc0:	2b00      	cmp	r3, #0
90023dc2:	f300 80b6 	bgt.w	90023f32 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ce>
90023dc6:	9b06      	ldr	r3, [sp, #24]
90023dc8:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
90023dcc:	9b07      	ldr	r3, [sp, #28]
90023dce:	eb03 0344 	add.w	r3, r3, r4, lsl #1
90023dd2:	9307      	str	r3, [sp, #28]
90023dd4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
90023dd6:	2b00      	cmp	r3, #0
90023dd8:	f340 8218 	ble.w	9002420c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a8>
90023ddc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
90023de0:	9b1c      	ldr	r3, [sp, #112]	; 0x70
90023de2:	ee30 0a04 	vadd.f32	s0, s0, s8
90023de6:	ee70 0aa4 	vadd.f32	s1, s1, s9
90023dea:	eef0 6a62 	vmov.f32	s13, s5
90023dee:	eec7 7a00 	vdiv.f32	s15, s14, s0
90023df2:	ee31 1a05 	vadd.f32	s2, s2, s10
90023df6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
90023dfa:	edcd 6a1d 	vstr	s13, [sp, #116]	; 0x74
90023dfe:	eef0 6a43 	vmov.f32	s13, s6
90023e02:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
90023e06:	edcd 6a1e 	vstr	s13, [sp, #120]	; 0x78
90023e0a:	ee20 7aa7 	vmul.f32	s14, s1, s15
90023e0e:	ee61 7a27 	vmul.f32	s15, s2, s15
90023e12:	ee77 2a62 	vsub.f32	s5, s14, s5
90023e16:	ee37 3ac3 	vsub.f32	s6, s15, s6
90023e1a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
90023e1e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
90023e22:	ee12 2a90 	vmov	r2, s5
90023e26:	eef0 2a47 	vmov.f32	s5, s14
90023e2a:	fb92 f3f3 	sdiv	r3, r2, r3
90023e2e:	ee13 2a10 	vmov	r2, s6
90023e32:	931f      	str	r3, [sp, #124]	; 0x7c
90023e34:	9b1c      	ldr	r3, [sp, #112]	; 0x70
90023e36:	eeb0 3a67 	vmov.f32	s6, s15
90023e3a:	fb92 f3f3 	sdiv	r3, r2, r3
90023e3e:	9320      	str	r3, [sp, #128]	; 0x80
90023e40:	9b0e      	ldr	r3, [sp, #56]	; 0x38
90023e42:	9a10      	ldr	r2, [sp, #64]	; 0x40
90023e44:	3b01      	subs	r3, #1
90023e46:	930e      	str	r3, [sp, #56]	; 0x38
90023e48:	9b1c      	ldr	r3, [sp, #112]	; 0x70
90023e4a:	bf08      	it	eq
90023e4c:	4613      	moveq	r3, r2
90023e4e:	9306      	str	r3, [sp, #24]
90023e50:	e61f      	b.n	90023a92 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
90023e52:	fb08 f505 	mul.w	r5, r8, r5
90023e56:	fb09 5303 	mla	r3, r9, r3, r5
90023e5a:	e69f      	b.n	90023b9c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
90023e5c:	4681      	mov	r9, r0
90023e5e:	e6c6      	b.n	90023bee <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
90023e60:	f1c1 0210 	rsb	r2, r1, #16
90023e64:	4341      	muls	r1, r0
90023e66:	fb09 1902 	mla	r9, r9, r2, r1
90023e6a:	ea4f 0949 	mov.w	r9, r9, lsl #1
90023e6e:	ea4f 5259 	mov.w	r2, r9, lsr #21
90023e72:	ea4f 1959 	mov.w	r9, r9, lsr #5
90023e76:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
90023e7a:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
90023e7e:	ea42 0909 	orr.w	r9, r2, r9
90023e82:	fa1f f289 	uxth.w	r2, r9
90023e86:	e75b      	b.n	90023d40 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2dc>
90023e88:	f8b7 c000 	ldrh.w	ip, [r7]
90023e8c:	43db      	mvns	r3, r3
90023e8e:	ea4f 202c 	mov.w	r0, ip, asr #8
90023e92:	fa5f fe83 	uxtb.w	lr, r3
90023e96:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
90023e9a:	ea4f 05ec 	mov.w	r5, ip, asr #3
90023e9e:	ea4f 03cc 	mov.w	r3, ip, lsl #3
90023ea2:	fb00 f00e 	mul.w	r0, r0, lr
90023ea6:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
90023eaa:	b2db      	uxtb	r3, r3
90023eac:	1c41      	adds	r1, r0, #1
90023eae:	fb05 f50e 	mul.w	r5, r5, lr
90023eb2:	fb03 f30e 	mul.w	r3, r3, lr
90023eb6:	eb01 2010 	add.w	r0, r1, r0, lsr #8
90023eba:	1211      	asrs	r1, r2, #8
90023ebc:	f021 0107 	bic.w	r1, r1, #7
90023ec0:	eb01 2110 	add.w	r1, r1, r0, lsr #8
90023ec4:	48d3      	ldr	r0, [pc, #844]	; (90024214 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7b0>)
90023ec6:	b2c9      	uxtb	r1, r1
90023ec8:	ea00 2001 	and.w	r0, r0, r1, lsl #8
90023ecc:	1c69      	adds	r1, r5, #1
90023ece:	eb01 2515 	add.w	r5, r1, r5, lsr #8
90023ed2:	10d1      	asrs	r1, r2, #3
90023ed4:	00d2      	lsls	r2, r2, #3
90023ed6:	f021 0103 	bic.w	r1, r1, #3
90023eda:	eb01 2115 	add.w	r1, r1, r5, lsr #8
90023ede:	00c9      	lsls	r1, r1, #3
90023ee0:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
90023ee4:	4301      	orrs	r1, r0
90023ee6:	1c58      	adds	r0, r3, #1
90023ee8:	eb00 2313 	add.w	r3, r0, r3, lsr #8
90023eec:	eb02 2213 	add.w	r2, r2, r3, lsr #8
90023ef0:	f3c2 02c4 	ubfx	r2, r2, #3, #5
90023ef4:	430a      	orrs	r2, r1
90023ef6:	e726      	b.n	90023d46 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e2>
90023ef8:	f115 0e01 	adds.w	lr, r5, #1
90023efc:	f53f af24 	bmi.w	90023d48 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
90023f00:	4572      	cmp	r2, lr
90023f02:	f6ff af21 	blt.w	90023d48 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
90023f06:	f110 0e01 	adds.w	lr, r0, #1
90023f0a:	f53f af1d 	bmi.w	90023d48 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
90023f0e:	4573      	cmp	r3, lr
90023f10:	f6ff af1a 	blt.w	90023d48 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
90023f14:	b21b      	sxth	r3, r3
90023f16:	b212      	sxth	r2, r2
90023f18:	9301      	str	r3, [sp, #4]
90023f1a:	9200      	str	r2, [sp, #0]
90023f1c:	e9cd 1c04 	strd	r1, ip, [sp, #16]
90023f20:	e9cd 5002 	strd	r5, r0, [sp, #8]
90023f24:	e9dd 3208 	ldrd	r3, r2, [sp, #32]
90023f28:	4639      	mov	r1, r7
90023f2a:	9811      	ldr	r0, [sp, #68]	; 0x44
90023f2c:	f7ff fc22 	bl	90023774 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>
90023f30:	e70a      	b.n	90023d48 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
90023f32:	9b1d      	ldr	r3, [sp, #116]	; 0x74
90023f34:	f3c3 3203 	ubfx	r2, r3, #12, #4
90023f38:	9b1e      	ldr	r3, [sp, #120]	; 0x78
90023f3a:	f3c3 3503 	ubfx	r5, r3, #12, #4
90023f3e:	9b24      	ldr	r3, [sp, #144]	; 0x90
90023f40:	fa1f fc82 	uxth.w	ip, r2
90023f44:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
90023f48:	9b1e      	ldr	r3, [sp, #120]	; 0x78
90023f4a:	ea4f 100c 	mov.w	r0, ip, lsl #4
90023f4e:	141f      	asrs	r7, r3, #16
90023f50:	9b1d      	ldr	r3, [sp, #116]	; 0x74
90023f52:	141b      	asrs	r3, r3, #16
90023f54:	fb01 3707 	mla	r7, r1, r7, r3
90023f58:	9b09      	ldr	r3, [sp, #36]	; 0x24
90023f5a:	eb03 0a07 	add.w	sl, r3, r7
90023f5e:	f813 9007 	ldrb.w	r9, [r3, r7]
90023f62:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
90023f66:	f89a 8001 	ldrb.w	r8, [sl, #1]
90023f6a:	b29b      	uxth	r3, r3
90023f6c:	2d00      	cmp	r5, #0
90023f6e:	f000 80fe 	beq.w	9002416e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70a>
90023f72:	f81a 4001 	ldrb.w	r4, [sl, r1]
90023f76:	eb0a 0b01 	add.w	fp, sl, r1
90023f7a:	fa1f fa85 	uxth.w	sl, r5
90023f7e:	940c      	str	r4, [sp, #48]	; 0x30
90023f80:	fb0a fc0c 	mul.w	ip, sl, ip
90023f84:	f89b 4001 	ldrb.w	r4, [fp, #1]
90023f88:	ebcc 1a0a 	rsb	sl, ip, sl, lsl #4
90023f8c:	eba0 000c 	sub.w	r0, r0, ip
90023f90:	940d      	str	r4, [sp, #52]	; 0x34
90023f92:	fa1f fa8a 	uxth.w	sl, sl
90023f96:	b280      	uxth	r0, r0
90023f98:	eba3 030a 	sub.w	r3, r3, sl
90023f9c:	fb08 f000 	mul.w	r0, r8, r0
90023fa0:	b29b      	uxth	r3, r3
90023fa2:	fb09 0303 	mla	r3, r9, r3, r0
90023fa6:	980c      	ldr	r0, [sp, #48]	; 0x30
90023fa8:	fb0a 3300 	mla	r3, sl, r0, r3
90023fac:	fb0c 3304 	mla	r3, ip, r4, r3
90023fb0:	f3c3 2307 	ubfx	r3, r3, #8, #8
90023fb4:	2b00      	cmp	r3, #0
90023fb6:	f000 80cc 	beq.w	90024152 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ee>
90023fba:	9808      	ldr	r0, [sp, #32]
90023fbc:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
90023fc0:	9c08      	ldr	r4, [sp, #32]
90023fc2:	eb00 0047 	add.w	r0, r0, r7, lsl #1
90023fc6:	f834 7017 	ldrh.w	r7, [r4, r7, lsl #1]
90023fca:	f000 80d5 	beq.w	90024178 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x714>
90023fce:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
90023fd2:	ea4f 0ae9 	mov.w	sl, r9, asr #3
90023fd6:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
90023fda:	fb0a fc0c 	mul.w	ip, sl, ip
90023fde:	fb09 f707 	mul.w	r7, r9, r7
90023fe2:	ea06 195c 	and.w	r9, r6, ip, lsr #5
90023fe6:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
90023fea:	f107 0b20 	add.w	fp, r7, #32
90023fee:	44cc      	add	ip, r9
90023ff0:	eb0b 2917 	add.w	r9, fp, r7, lsr #8
90023ff4:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
90023ff8:	ea4f 2919 	mov.w	r9, r9, lsr #8
90023ffc:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
90024000:	ea4c 0909 	orr.w	r9, ip, r9
90024004:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
90024008:	8847      	ldrh	r7, [r0, #2]
9002400a:	d019      	beq.n	90024040 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5dc>
9002400c:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
90024010:	ea4f 0ae8 	mov.w	sl, r8, asr #3
90024014:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
90024018:	fb0a fc0c 	mul.w	ip, sl, ip
9002401c:	fb08 f807 	mul.w	r8, r8, r7
90024020:	ea06 175c 	and.w	r7, r6, ip, lsr #5
90024024:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
90024028:	f108 0b20 	add.w	fp, r8, #32
9002402c:	44bc      	add	ip, r7
9002402e:	eb0b 2718 	add.w	r7, fp, r8, lsr #8
90024032:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
90024036:	0a3f      	lsrs	r7, r7, #8
90024038:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
9002403c:	ea4c 0707 	orr.w	r7, ip, r7
90024040:	ea4f 4c09 	mov.w	ip, r9, lsl #16
90024044:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
90024048:	ea4f 4a07 	mov.w	sl, r7, lsl #16
9002404c:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
90024050:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
90024054:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
90024058:	ea4c 0909 	orr.w	r9, ip, r9
9002405c:	ea4a 0707 	orr.w	r7, sl, r7
90024060:	2d00      	cmp	r5, #0
90024062:	f000 808b 	beq.w	9002417c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x718>
90024066:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
9002406a:	3901      	subs	r1, #1
9002406c:	0049      	lsls	r1, r1, #1
9002406e:	3102      	adds	r1, #2
90024070:	eb00 0c01 	add.w	ip, r0, r1
90024074:	5a41      	ldrh	r1, [r0, r1]
90024076:	980c      	ldr	r0, [sp, #48]	; 0x30
90024078:	28ff      	cmp	r0, #255	; 0xff
9002407a:	d019      	beq.n	900240b0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64c>
9002407c:	f421 60fc 	bic.w	r0, r1, #2016	; 0x7e0
90024080:	9c0c      	ldr	r4, [sp, #48]	; 0x30
90024082:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
90024086:	ea4f 08e4 	mov.w	r8, r4, asr #3
9002408a:	fb04 fa01 	mul.w	sl, r4, r1
9002408e:	fb08 f800 	mul.w	r8, r8, r0
90024092:	f10a 0020 	add.w	r0, sl, #32
90024096:	ea06 1158 	and.w	r1, r6, r8, lsr #5
9002409a:	f608 0801 	addw	r8, r8, #2049	; 0x801
9002409e:	eb00 201a 	add.w	r0, r0, sl, lsr #8
900240a2:	4441      	add	r1, r8
900240a4:	0a00      	lsrs	r0, r0, #8
900240a6:	ea06 1151 	and.w	r1, r6, r1, lsr #5
900240aa:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
900240ae:	4301      	orrs	r1, r0
900240b0:	9c0d      	ldr	r4, [sp, #52]	; 0x34
900240b2:	f8bc 0002 	ldrh.w	r0, [ip, #2]
900240b6:	2cff      	cmp	r4, #255	; 0xff
900240b8:	d01a      	beq.n	900240f0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68c>
900240ba:	f420 6cfc 	bic.w	ip, r0, #2016	; 0x7e0
900240be:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
900240c2:	ea4f 08e4 	mov.w	r8, r4, asr #3
900240c6:	fb04 fa00 	mul.w	sl, r4, r0
900240ca:	fb08 f80c 	mul.w	r8, r8, ip
900240ce:	f10a 0c20 	add.w	ip, sl, #32
900240d2:	ea06 1058 	and.w	r0, r6, r8, lsr #5
900240d6:	f608 0801 	addw	r8, r8, #2049	; 0x801
900240da:	eb0c 2c1a 	add.w	ip, ip, sl, lsr #8
900240de:	4440      	add	r0, r8
900240e0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
900240e4:	ea06 1050 	and.w	r0, r6, r0, lsr #5
900240e8:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
900240ec:	ea40 000c 	orr.w	r0, r0, ip
900240f0:	fb15 fc02 	smulbb	ip, r5, r2
900240f4:	f1c5 0810 	rsb	r8, r5, #16
900240f8:	ea4f 4a01 	mov.w	sl, r1, lsl #16
900240fc:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
90024100:	ea4f 0cec 	mov.w	ip, ip, asr #3
90024104:	eba8 0802 	sub.w	r8, r8, r2
90024108:	ea4f 4b00 	mov.w	fp, r0, lsl #16
9002410c:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
90024110:	ebcc 0242 	rsb	r2, ip, r2, lsl #1
90024114:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
90024118:	eb0c 0848 	add.w	r8, ip, r8, lsl #1
9002411c:	ea4a 0101 	orr.w	r1, sl, r1
90024120:	437a      	muls	r2, r7
90024122:	ebcc 0545 	rsb	r5, ip, r5, lsl #1
90024126:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
9002412a:	fb09 2208 	mla	r2, r9, r8, r2
9002412e:	ea4b 0000 	orr.w	r0, fp, r0
90024132:	fb05 2201 	mla	r2, r5, r1, r2
90024136:	fb0c 2200 	mla	r2, ip, r0, r2
9002413a:	0d57      	lsrs	r7, r2, #21
9002413c:	0952      	lsrs	r2, r2, #5
9002413e:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
90024142:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
90024146:	433a      	orrs	r2, r7
90024148:	2bff      	cmp	r3, #255	; 0xff
9002414a:	b292      	uxth	r2, r2
9002414c:	d127      	bne.n	9002419e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x73a>
9002414e:	f8ae 2000 	strh.w	r2, [lr]
90024152:	9b1d      	ldr	r3, [sp, #116]	; 0x74
90024154:	f10e 0e02 	add.w	lr, lr, #2
90024158:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
9002415a:	4413      	add	r3, r2
9002415c:	9a1e      	ldr	r2, [sp, #120]	; 0x78
9002415e:	931d      	str	r3, [sp, #116]	; 0x74
90024160:	9b20      	ldr	r3, [sp, #128]	; 0x80
90024162:	441a      	add	r2, r3
90024164:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
90024166:	3b01      	subs	r3, #1
90024168:	921e      	str	r2, [sp, #120]	; 0x78
9002416a:	930f      	str	r3, [sp, #60]	; 0x3c
9002416c:	e627      	b.n	90023dbe <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35a>
9002416e:	fb08 f000 	mul.w	r0, r8, r0
90024172:	fb09 0303 	mla	r3, r9, r3, r0
90024176:	e71b      	b.n	90023fb0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54c>
90024178:	46b9      	mov	r9, r7
9002417a:	e743      	b.n	90024004 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a0>
9002417c:	f1c2 0110 	rsb	r1, r2, #16
90024180:	437a      	muls	r2, r7
90024182:	fb09 2901 	mla	r9, r9, r1, r2
90024186:	ea4f 0949 	mov.w	r9, r9, lsl #1
9002418a:	ea4f 5059 	mov.w	r0, r9, lsr #21
9002418e:	ea4f 1259 	mov.w	r2, r9, lsr #5
90024192:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
90024196:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
9002419a:	4302      	orrs	r2, r0
9002419c:	e7d4      	b.n	90024148 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e4>
9002419e:	f8be 7000 	ldrh.w	r7, [lr]
900241a2:	43db      	mvns	r3, r3
900241a4:	4c1b      	ldr	r4, [pc, #108]	; (90024214 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7b0>)
900241a6:	1238      	asrs	r0, r7, #8
900241a8:	fa5f fc83 	uxtb.w	ip, r3
900241ac:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
900241b0:	10fd      	asrs	r5, r7, #3
900241b2:	00fb      	lsls	r3, r7, #3
900241b4:	fb00 f00c 	mul.w	r0, r0, ip
900241b8:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
900241bc:	b2db      	uxtb	r3, r3
900241be:	fb05 f10c 	mul.w	r1, r5, ip
900241c2:	1c45      	adds	r5, r0, #1
900241c4:	fb03 f30c 	mul.w	r3, r3, ip
900241c8:	eb05 2010 	add.w	r0, r5, r0, lsr #8
900241cc:	1215      	asrs	r5, r2, #8
900241ce:	f025 0507 	bic.w	r5, r5, #7
900241d2:	eb05 2010 	add.w	r0, r5, r0, lsr #8
900241d6:	1c4d      	adds	r5, r1, #1
900241d8:	eb05 2511 	add.w	r5, r5, r1, lsr #8
900241dc:	10d1      	asrs	r1, r2, #3
900241de:	b2c0      	uxtb	r0, r0
900241e0:	f021 0103 	bic.w	r1, r1, #3
900241e4:	00d2      	lsls	r2, r2, #3
900241e6:	ea04 2000 	and.w	r0, r4, r0, lsl #8
900241ea:	eb01 2115 	add.w	r1, r1, r5, lsr #8
900241ee:	00c9      	lsls	r1, r1, #3
900241f0:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
900241f4:	4308      	orrs	r0, r1
900241f6:	1c59      	adds	r1, r3, #1
900241f8:	eb01 2313 	add.w	r3, r1, r3, lsr #8
900241fc:	eb02 2313 	add.w	r3, r2, r3, lsr #8
90024200:	f3c3 03c4 	ubfx	r3, r3, #3, #5
90024204:	4318      	orrs	r0, r3
90024206:	f8ae 0000 	strh.w	r0, [lr]
9002420a:	e7a2      	b.n	90024152 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ee>
9002420c:	b013      	add	sp, #76	; 0x4c
9002420e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90024212:	bf00      	nop
90024214:	fffff800 	.word	0xfffff800

90024218 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh>:
90024218:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
9002421c:	e9dd 4509 	ldrd	r4, r5, [sp, #36]	; 0x24
90024220:	f9bd a020 	ldrsh.w	sl, [sp, #32]
90024224:	fb05 4c03 	mla	ip, r5, r3, r4
90024228:	2d00      	cmp	r5, #0
9002422a:	f89d 902c 	ldrb.w	r9, [sp, #44]	; 0x2c
9002422e:	f89d 7030 	ldrb.w	r7, [sp, #48]	; 0x30
90024232:	eb02 0e4c 	add.w	lr, r2, ip, lsl #1
90024236:	f89d 6034 	ldrb.w	r6, [sp, #52]	; 0x34
9002423a:	8808      	ldrh	r0, [r1, #0]
9002423c:	f2c0 80a7 	blt.w	9002438e <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x176>
90024240:	45aa      	cmp	sl, r5
90024242:	f340 80a4 	ble.w	9002438e <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x176>
90024246:	2c00      	cmp	r4, #0
90024248:	f2c0 809f 	blt.w	9002438a <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x172>
9002424c:	42a3      	cmp	r3, r4
9002424e:	f340 809c 	ble.w	9002438a <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x172>
90024252:	f832 801c 	ldrh.w	r8, [r2, ip, lsl #1]
90024256:	1c62      	adds	r2, r4, #1
90024258:	f100 809c 	bmi.w	90024394 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x17c>
9002425c:	4293      	cmp	r3, r2
9002425e:	f340 8099 	ble.w	90024394 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x17c>
90024262:	f1b9 0f00 	cmp.w	r9, #0
90024266:	f000 8095 	beq.w	90024394 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x17c>
9002426a:	f8be c002 	ldrh.w	ip, [lr, #2]
9002426e:	3501      	adds	r5, #1
90024270:	f100 8094 	bmi.w	9002439c <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x184>
90024274:	45aa      	cmp	sl, r5
90024276:	f340 8091 	ble.w	9002439c <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x184>
9002427a:	2f00      	cmp	r7, #0
9002427c:	f000 808e 	beq.w	9002439c <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x184>
90024280:	2c00      	cmp	r4, #0
90024282:	f2c0 8089 	blt.w	90024398 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x180>
90024286:	42a3      	cmp	r3, r4
90024288:	f340 8086 	ble.w	90024398 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x180>
9002428c:	f83e 5013 	ldrh.w	r5, [lr, r3, lsl #1]
90024290:	3401      	adds	r4, #1
90024292:	f100 8086 	bmi.w	900243a2 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x18a>
90024296:	42a3      	cmp	r3, r4
90024298:	f340 8083 	ble.w	900243a2 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x18a>
9002429c:	f1b9 0f00 	cmp.w	r9, #0
900242a0:	d07f      	beq.n	900243a2 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x18a>
900242a2:	3301      	adds	r3, #1
900242a4:	f83e 3013 	ldrh.w	r3, [lr, r3, lsl #1]
900242a8:	ea4f 4408 	mov.w	r4, r8, lsl #16
900242ac:	f428 68fc 	bic.w	r8, r8, #2016	; 0x7e0
900242b0:	fb19 fe07 	smulbb	lr, r9, r7
900242b4:	f1c7 0210 	rsb	r2, r7, #16
900242b8:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
900242bc:	f3ce 0ec7 	ubfx	lr, lr, #3, #8
900242c0:	eba2 0209 	sub.w	r2, r2, r9
900242c4:	ea44 0808 	orr.w	r8, r4, r8
900242c8:	ea4f 440c 	mov.w	r4, ip, lsl #16
900242cc:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
900242d0:	eb0e 0242 	add.w	r2, lr, r2, lsl #1
900242d4:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
900242d8:	ebce 0747 	rsb	r7, lr, r7, lsl #1
900242dc:	ea44 0c0c 	orr.w	ip, r4, ip
900242e0:	ebce 0449 	rsb	r4, lr, r9, lsl #1
900242e4:	fb04 f40c 	mul.w	r4, r4, ip
900242e8:	fb02 4808 	mla	r8, r2, r8, r4
900242ec:	041a      	lsls	r2, r3, #16
900242ee:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
900242f2:	b2b4      	uxth	r4, r6
900242f4:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
900242f8:	43f6      	mvns	r6, r6
900242fa:	4313      	orrs	r3, r2
900242fc:	042a      	lsls	r2, r5, #16
900242fe:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
90024302:	b2f6      	uxtb	r6, r6
90024304:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
90024308:	fb0e 8303 	mla	r3, lr, r3, r8
9002430c:	432a      	orrs	r2, r5
9002430e:	fb07 3202 	mla	r2, r7, r2, r3
90024312:	10c7      	asrs	r7, r0, #3
90024314:	0d53      	lsrs	r3, r2, #21
90024316:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
9002431a:	0952      	lsrs	r2, r2, #5
9002431c:	fb17 f706 	smulbb	r7, r7, r6
90024320:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
90024324:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
90024328:	431a      	orrs	r2, r3
9002432a:	b293      	uxth	r3, r2
9002432c:	1202      	asrs	r2, r0, #8
9002432e:	121d      	asrs	r5, r3, #8
90024330:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
90024334:	00c0      	lsls	r0, r0, #3
90024336:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
9002433a:	fb12 f206 	smulbb	r2, r2, r6
9002433e:	b2c0      	uxtb	r0, r0
90024340:	fb05 2504 	mla	r5, r5, r4, r2
90024344:	10da      	asrs	r2, r3, #3
90024346:	fb10 f006 	smulbb	r0, r0, r6
9002434a:	00db      	lsls	r3, r3, #3
9002434c:	b2ad      	uxth	r5, r5
9002434e:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
90024352:	b2db      	uxtb	r3, r3
90024354:	fb02 7204 	mla	r2, r2, r4, r7
90024358:	fb03 0004 	mla	r0, r3, r4, r0
9002435c:	1c6b      	adds	r3, r5, #1
9002435e:	b292      	uxth	r2, r2
90024360:	b280      	uxth	r0, r0
90024362:	eb03 2515 	add.w	r5, r3, r5, lsr #8
90024366:	1c43      	adds	r3, r0, #1
90024368:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
9002436c:	eb03 2310 	add.w	r3, r3, r0, lsr #8
90024370:	1c50      	adds	r0, r2, #1
90024372:	eb00 2212 	add.w	r2, r0, r2, lsr #8
90024376:	f3c3 23c4 	ubfx	r3, r3, #11, #5
9002437a:	0952      	lsrs	r2, r2, #5
9002437c:	432b      	orrs	r3, r5
9002437e:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
90024382:	4313      	orrs	r3, r2
90024384:	800b      	strh	r3, [r1, #0]
90024386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
9002438a:	4680      	mov	r8, r0
9002438c:	e763      	b.n	90024256 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x3e>
9002438e:	4684      	mov	ip, r0
90024390:	4680      	mov	r8, r0
90024392:	e76c      	b.n	9002426e <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x56>
90024394:	4684      	mov	ip, r0
90024396:	e76a      	b.n	9002426e <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x56>
90024398:	4605      	mov	r5, r0
9002439a:	e779      	b.n	90024290 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x78>
9002439c:	4603      	mov	r3, r0
9002439e:	4605      	mov	r5, r0
900243a0:	e782      	b.n	900242a8 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x90>
900243a2:	4603      	mov	r3, r0
900243a4:	e780      	b.n	900242a8 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x90>

900243a6 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
900243a6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
900243aa:	b093      	sub	sp, #76	; 0x4c
900243ac:	461d      	mov	r5, r3
900243ae:	9210      	str	r2, [sp, #64]	; 0x40
900243b0:	9b21      	ldr	r3, [sp, #132]	; 0x84
900243b2:	f89d 2094 	ldrb.w	r2, [sp, #148]	; 0x94
900243b6:	910a      	str	r1, [sp, #40]	; 0x28
900243b8:	920b      	str	r2, [sp, #44]	; 0x2c
900243ba:	6859      	ldr	r1, [r3, #4]
900243bc:	681b      	ldr	r3, [r3, #0]
900243be:	9011      	str	r0, [sp, #68]	; 0x44
900243c0:	e9dd 2722 	ldrd	r2, r7, [sp, #136]	; 0x88
900243c4:	e9dd 461d 	ldrd	r4, r6, [sp, #116]	; 0x74
900243c8:	fb01 2707 	mla	r7, r1, r7, r2
900243cc:	eb03 0347 	add.w	r3, r3, r7, lsl #1
900243d0:	9307      	str	r3, [sp, #28]
900243d2:	9b24      	ldr	r3, [sp, #144]	; 0x90
900243d4:	681b      	ldr	r3, [r3, #0]
900243d6:	9309      	str	r3, [sp, #36]	; 0x24
900243d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
900243da:	43db      	mvns	r3, r3
900243dc:	b2db      	uxtb	r3, r3
900243de:	9308      	str	r3, [sp, #32]
900243e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
900243e2:	2b00      	cmp	r3, #0
900243e4:	dc03      	bgt.n	900243ee <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
900243e6:	9b10      	ldr	r3, [sp, #64]	; 0x40
900243e8:	2b00      	cmp	r3, #0
900243ea:	f340 8205 	ble.w	900247f8 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
900243ee:	9b24      	ldr	r3, [sp, #144]	; 0x90
900243f0:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
900243f4:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
900243f8:	1e48      	subs	r0, r1, #1
900243fa:	f102 3cff 	add.w	ip, r2, #4294967295
900243fe:	2d00      	cmp	r5, #0
90024400:	f340 80da 	ble.w	900245b8 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x212>
90024404:	ea5f 4e24 	movs.w	lr, r4, asr #16
90024408:	ea4f 4326 	mov.w	r3, r6, asr #16
9002440c:	d406      	bmi.n	9002441c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
9002440e:	4586      	cmp	lr, r0
90024410:	da04      	bge.n	9002441c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
90024412:	2b00      	cmp	r3, #0
90024414:	db02      	blt.n	9002441c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
90024416:	4563      	cmp	r3, ip
90024418:	f2c0 80cf 	blt.w	900245ba <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
9002441c:	f11e 0e01 	adds.w	lr, lr, #1
90024420:	f100 80c1 	bmi.w	900245a6 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
90024424:	4571      	cmp	r1, lr
90024426:	f2c0 80be 	blt.w	900245a6 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
9002442a:	3301      	adds	r3, #1
9002442c:	f100 80bb 	bmi.w	900245a6 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
90024430:	429a      	cmp	r2, r3
90024432:	f2c0 80b8 	blt.w	900245a6 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
90024436:	46a9      	mov	r9, r5
90024438:	f8dd 801c 	ldr.w	r8, [sp, #28]
9002443c:	f1b9 0f00 	cmp.w	r9, #0
90024440:	f340 80d8 	ble.w	900245f4 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x24e>
90024444:	9b24      	ldr	r3, [sp, #144]	; 0x90
90024446:	1421      	asrs	r1, r4, #16
90024448:	ea4f 4026 	mov.w	r0, r6, asr #16
9002444c:	f3c4 3203 	ubfx	r2, r4, #12, #4
90024450:	f3c6 3c03 	ubfx	ip, r6, #12, #4
90024454:	e9d3 e302 	ldrd	lr, r3, [r3, #8]
90024458:	f100 8112 	bmi.w	90024680 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2da>
9002445c:	f10e 3aff 	add.w	sl, lr, #4294967295
90024460:	4551      	cmp	r1, sl
90024462:	f280 810d 	bge.w	90024680 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2da>
90024466:	2800      	cmp	r0, #0
90024468:	f2c0 810a 	blt.w	90024680 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2da>
9002446c:	f103 3aff 	add.w	sl, r3, #4294967295
90024470:	4550      	cmp	r0, sl
90024472:	f280 8105 	bge.w	90024680 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2da>
90024476:	fa0f f38e 	sxth.w	r3, lr
9002447a:	fb00 1103 	mla	r1, r0, r3, r1
9002447e:	9809      	ldr	r0, [sp, #36]	; 0x24
90024480:	eb00 0a41 	add.w	sl, r0, r1, lsl #1
90024484:	f830 e011 	ldrh.w	lr, [r0, r1, lsl #1]
90024488:	f8ba 1002 	ldrh.w	r1, [sl, #2]
9002448c:	f1bc 0f00 	cmp.w	ip, #0
90024490:	d007      	beq.n	900244a2 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xfc>
90024492:	005b      	lsls	r3, r3, #1
90024494:	eb0a 0003 	add.w	r0, sl, r3
90024498:	f83a 3003 	ldrh.w	r3, [sl, r3]
9002449c:	930c      	str	r3, [sp, #48]	; 0x30
9002449e:	8843      	ldrh	r3, [r0, #2]
900244a0:	930d      	str	r3, [sp, #52]	; 0x34
900244a2:	ea4f 400e 	mov.w	r0, lr, lsl #16
900244a6:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
900244aa:	fb12 f30c 	smulbb	r3, r2, ip
900244ae:	ea4f 4a01 	mov.w	sl, r1, lsl #16
900244b2:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
900244b6:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
900244ba:	10db      	asrs	r3, r3, #3
900244bc:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
900244c0:	ea40 000e 	orr.w	r0, r0, lr
900244c4:	f1cc 0e10 	rsb	lr, ip, #16
900244c8:	ea4a 0101 	orr.w	r1, sl, r1
900244cc:	9f08      	ldr	r7, [sp, #32]
900244ce:	ebae 0e02 	sub.w	lr, lr, r2
900244d2:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
900244d6:	eb03 0e4e 	add.w	lr, r3, lr, lsl #1
900244da:	4351      	muls	r1, r2
900244dc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
900244de:	fb0e 1e00 	mla	lr, lr, r0, r1
900244e2:	990c      	ldr	r1, [sp, #48]	; 0x30
900244e4:	0410      	lsls	r0, r2, #16
900244e6:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
900244ea:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
900244ee:	4310      	orrs	r0, r2
900244f0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
900244f2:	0412      	lsls	r2, r2, #16
900244f4:	fb03 e000 	mla	r0, r3, r0, lr
900244f8:	f421 6efc 	bic.w	lr, r1, #2016	; 0x7e0
900244fc:	ebc3 034c 	rsb	r3, r3, ip, lsl #1
90024500:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
90024504:	ea42 020e 	orr.w	r2, r2, lr
90024508:	fb03 0302 	mla	r3, r3, r2, r0
9002450c:	f8b8 0000 	ldrh.w	r0, [r8]
90024510:	0d5a      	lsrs	r2, r3, #21
90024512:	095b      	lsrs	r3, r3, #5
90024514:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
90024518:	1201      	asrs	r1, r0, #8
9002451a:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
9002451e:	ea4f 0ee0 	mov.w	lr, r0, asr #3
90024522:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
90024526:	00c0      	lsls	r0, r0, #3
90024528:	4313      	orrs	r3, r2
9002452a:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
9002452e:	fb11 f107 	smulbb	r1, r1, r7
90024532:	b2c0      	uxtb	r0, r0
90024534:	b29b      	uxth	r3, r3
90024536:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
9002453a:	fb10 f007 	smulbb	r0, r0, r7
9002453e:	fb1e fe07 	smulbb	lr, lr, r7
90024542:	ea4f 2c23 	mov.w	ip, r3, asr #8
90024546:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
9002454a:	fb0c 1c02 	mla	ip, ip, r2, r1
9002454e:	10d9      	asrs	r1, r3, #3
90024550:	00db      	lsls	r3, r3, #3
90024552:	fa1f fc8c 	uxth.w	ip, ip
90024556:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
9002455a:	b2db      	uxtb	r3, r3
9002455c:	fb01 e102 	mla	r1, r1, r2, lr
90024560:	fb03 0302 	mla	r3, r3, r2, r0
90024564:	b289      	uxth	r1, r1
90024566:	b29a      	uxth	r2, r3
90024568:	f10c 0301 	add.w	r3, ip, #1
9002456c:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
90024570:	1c53      	adds	r3, r2, #1
90024572:	eb03 2312 	add.w	r3, r3, r2, lsr #8
90024576:	1c4a      	adds	r2, r1, #1
90024578:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
9002457c:	eb02 2111 	add.w	r1, r2, r1, lsr #8
90024580:	f3c3 23c4 	ubfx	r3, r3, #11, #5
90024584:	0949      	lsrs	r1, r1, #5
90024586:	ea43 030c 	orr.w	r3, r3, ip
9002458a:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
9002458e:	430b      	orrs	r3, r1
90024590:	f8a8 3000 	strh.w	r3, [r8]
90024594:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
90024596:	f108 0802 	add.w	r8, r8, #2
9002459a:	f109 39ff 	add.w	r9, r9, #4294967295
9002459e:	441c      	add	r4, r3
900245a0:	9b20      	ldr	r3, [sp, #128]	; 0x80
900245a2:	441e      	add	r6, r3
900245a4:	e74a      	b.n	9002443c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
900245a6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
900245a8:	3d01      	subs	r5, #1
900245aa:	441c      	add	r4, r3
900245ac:	9b20      	ldr	r3, [sp, #128]	; 0x80
900245ae:	441e      	add	r6, r3
900245b0:	9b07      	ldr	r3, [sp, #28]
900245b2:	3302      	adds	r3, #2
900245b4:	9307      	str	r3, [sp, #28]
900245b6:	e722      	b.n	900243fe <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
900245b8:	d022      	beq.n	90024600 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25a>
900245ba:	1e6b      	subs	r3, r5, #1
900245bc:	981f      	ldr	r0, [sp, #124]	; 0x7c
900245be:	fb00 4003 	mla	r0, r0, r3, r4
900245c2:	1400      	asrs	r0, r0, #16
900245c4:	f53f af37 	bmi.w	90024436 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
900245c8:	3901      	subs	r1, #1
900245ca:	4288      	cmp	r0, r1
900245cc:	f6bf af33 	bge.w	90024436 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
900245d0:	9920      	ldr	r1, [sp, #128]	; 0x80
900245d2:	fb01 6303 	mla	r3, r1, r3, r6
900245d6:	141b      	asrs	r3, r3, #16
900245d8:	f53f af2d 	bmi.w	90024436 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
900245dc:	3a01      	subs	r2, #1
900245de:	4293      	cmp	r3, r2
900245e0:	f6bf af29 	bge.w	90024436 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
900245e4:	46a8      	mov	r8, r5
900245e6:	f8dd 901c 	ldr.w	r9, [sp, #28]
900245ea:	f8bd a02c 	ldrh.w	sl, [sp, #44]	; 0x2c
900245ee:	f1b8 0f00 	cmp.w	r8, #0
900245f2:	dc60      	bgt.n	900246b6 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x310>
900245f4:	9b07      	ldr	r3, [sp, #28]
900245f6:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
900245fa:	eb03 0345 	add.w	r3, r3, r5, lsl #1
900245fe:	9307      	str	r3, [sp, #28]
90024600:	9b0a      	ldr	r3, [sp, #40]	; 0x28
90024602:	2b00      	cmp	r3, #0
90024604:	f340 80f8 	ble.w	900247f8 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
90024608:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
9002460c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
9002460e:	ee30 0a04 	vadd.f32	s0, s0, s8
90024612:	ee70 0aa4 	vadd.f32	s1, s1, s9
90024616:	eef0 6a62 	vmov.f32	s13, s5
9002461a:	eec7 7a00 	vdiv.f32	s15, s14, s0
9002461e:	ee31 1a05 	vadd.f32	s2, s2, s10
90024622:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
90024626:	ee16 4a90 	vmov	r4, s13
9002462a:	eef0 6a43 	vmov.f32	s13, s6
9002462e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
90024632:	ee16 6a90 	vmov	r6, s13
90024636:	ee20 7aa7 	vmul.f32	s14, s1, s15
9002463a:	ee61 7a27 	vmul.f32	s15, s2, s15
9002463e:	ee77 2a62 	vsub.f32	s5, s14, s5
90024642:	ee37 3ac3 	vsub.f32	s6, s15, s6
90024646:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
9002464a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
9002464e:	ee12 2a90 	vmov	r2, s5
90024652:	eef0 2a47 	vmov.f32	s5, s14
90024656:	fb92 f3f3 	sdiv	r3, r2, r3
9002465a:	ee13 2a10 	vmov	r2, s6
9002465e:	931f      	str	r3, [sp, #124]	; 0x7c
90024660:	9b1c      	ldr	r3, [sp, #112]	; 0x70
90024662:	eeb0 3a67 	vmov.f32	s6, s15
90024666:	fb92 f3f3 	sdiv	r3, r2, r3
9002466a:	9320      	str	r3, [sp, #128]	; 0x80
9002466c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
9002466e:	9a10      	ldr	r2, [sp, #64]	; 0x40
90024670:	3b01      	subs	r3, #1
90024672:	930a      	str	r3, [sp, #40]	; 0x28
90024674:	bf08      	it	eq
90024676:	4615      	moveq	r5, r2
90024678:	9b1c      	ldr	r3, [sp, #112]	; 0x70
9002467a:	bf18      	it	ne
9002467c:	461d      	movne	r5, r3
9002467e:	e6af      	b.n	900243e0 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
90024680:	f111 0a01 	adds.w	sl, r1, #1
90024684:	d486      	bmi.n	90024594 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
90024686:	45d6      	cmp	lr, sl
90024688:	db84      	blt.n	90024594 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
9002468a:	f110 0a01 	adds.w	sl, r0, #1
9002468e:	d481      	bmi.n	90024594 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
90024690:	4553      	cmp	r3, sl
90024692:	f6ff af7f 	blt.w	90024594 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
90024696:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
90024698:	b21b      	sxth	r3, r3
9002469a:	9101      	str	r1, [sp, #4]
9002469c:	4641      	mov	r1, r8
9002469e:	9300      	str	r3, [sp, #0]
900246a0:	fa0f f38e 	sxth.w	r3, lr
900246a4:	e9cd 0202 	strd	r0, r2, [sp, #8]
900246a8:	e9cd c704 	strd	ip, r7, [sp, #16]
900246ac:	9a09      	ldr	r2, [sp, #36]	; 0x24
900246ae:	9811      	ldr	r0, [sp, #68]	; 0x44
900246b0:	f7ff fdb2 	bl	90024218 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh>
900246b4:	e76e      	b.n	90024594 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
900246b6:	9b24      	ldr	r3, [sp, #144]	; 0x90
900246b8:	1430      	asrs	r0, r6, #16
900246ba:	9f09      	ldr	r7, [sp, #36]	; 0x24
900246bc:	f3c6 3e03 	ubfx	lr, r6, #12, #4
900246c0:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
900246c4:	1423      	asrs	r3, r4, #16
900246c6:	f3c4 3203 	ubfx	r2, r4, #12, #4
900246ca:	fb01 3000 	mla	r0, r1, r0, r3
900246ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
900246d0:	eb03 0340 	add.w	r3, r3, r0, lsl #1
900246d4:	f837 c010 	ldrh.w	ip, [r7, r0, lsl #1]
900246d8:	8858      	ldrh	r0, [r3, #2]
900246da:	f1be 0f00 	cmp.w	lr, #0
900246de:	d00b      	beq.n	900246f8 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x352>
900246e0:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
900246e4:	3901      	subs	r1, #1
900246e6:	0049      	lsls	r1, r1, #1
900246e8:	3102      	adds	r1, #2
900246ea:	eb03 0b01 	add.w	fp, r3, r1
900246ee:	5a5b      	ldrh	r3, [r3, r1]
900246f0:	930e      	str	r3, [sp, #56]	; 0x38
900246f2:	f8bb 3002 	ldrh.w	r3, [fp, #2]
900246f6:	930f      	str	r3, [sp, #60]	; 0x3c
900246f8:	ea4f 410c 	mov.w	r1, ip, lsl #16
900246fc:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
90024700:	fb12 f30e 	smulbb	r3, r2, lr
90024704:	ea4f 4b00 	mov.w	fp, r0, lsl #16
90024708:	f001 61fc 	and.w	r1, r1, #132120576	; 0x7e00000
9002470c:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
90024710:	10db      	asrs	r3, r3, #3
90024712:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
90024716:	ea41 010c 	orr.w	r1, r1, ip
9002471a:	f1ce 0c10 	rsb	ip, lr, #16
9002471e:	ea4b 0000 	orr.w	r0, fp, r0
90024722:	9f08      	ldr	r7, [sp, #32]
90024724:	ebac 0c02 	sub.w	ip, ip, r2
90024728:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
9002472c:	f108 38ff 	add.w	r8, r8, #4294967295
90024730:	4350      	muls	r0, r2
90024732:	eb03 0c4c 	add.w	ip, r3, ip, lsl #1
90024736:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
90024738:	fb0c 0c01 	mla	ip, ip, r1, r0
9002473c:	980e      	ldr	r0, [sp, #56]	; 0x38
9002473e:	ea4f 4b02 	mov.w	fp, r2, lsl #16
90024742:	f422 61fc 	bic.w	r1, r2, #2016	; 0x7e0
90024746:	9a0e      	ldr	r2, [sp, #56]	; 0x38
90024748:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
9002474c:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
90024750:	0412      	lsls	r2, r2, #16
90024752:	ea4b 0101 	orr.w	r1, fp, r1
90024756:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
9002475a:	fb03 c101 	mla	r1, r3, r1, ip
9002475e:	ebc3 034e 	rsb	r3, r3, lr, lsl #1
90024762:	4302      	orrs	r2, r0
90024764:	fb03 1202 	mla	r2, r3, r2, r1
90024768:	ea4f 5b52 	mov.w	fp, r2, lsr #21
9002476c:	0952      	lsrs	r2, r2, #5
9002476e:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
90024772:	f422 63fc 	bic.w	r3, r2, #2016	; 0x7e0
90024776:	f8b9 2000 	ldrh.w	r2, [r9]
9002477a:	ea4b 0303 	orr.w	r3, fp, r3
9002477e:	1211      	asrs	r1, r2, #8
90024780:	ea4f 0ce2 	mov.w	ip, r2, asr #3
90024784:	b29b      	uxth	r3, r3
90024786:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
9002478a:	00d2      	lsls	r2, r2, #3
9002478c:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
90024790:	fb11 f107 	smulbb	r1, r1, r7
90024794:	1218      	asrs	r0, r3, #8
90024796:	fb1c fc07 	smulbb	ip, ip, r7
9002479a:	b2d2      	uxtb	r2, r2
9002479c:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
900247a0:	fb12 f207 	smulbb	r2, r2, r7
900247a4:	fb00 100a 	mla	r0, r0, sl, r1
900247a8:	10d9      	asrs	r1, r3, #3
900247aa:	00db      	lsls	r3, r3, #3
900247ac:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
900247b0:	b280      	uxth	r0, r0
900247b2:	b2db      	uxtb	r3, r3
900247b4:	fb01 c10a 	mla	r1, r1, sl, ip
900247b8:	fb03 230a 	mla	r3, r3, sl, r2
900247bc:	1c42      	adds	r2, r0, #1
900247be:	b289      	uxth	r1, r1
900247c0:	b29b      	uxth	r3, r3
900247c2:	eb02 2010 	add.w	r0, r2, r0, lsr #8
900247c6:	f101 0c01 	add.w	ip, r1, #1
900247ca:	1c5a      	adds	r2, r3, #1
900247cc:	eb0c 2c11 	add.w	ip, ip, r1, lsr #8
900247d0:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
900247d4:	eb02 2213 	add.w	r2, r2, r3, lsr #8
900247d8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
900247da:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
900247de:	f3c2 22c4 	ubfx	r2, r2, #11, #5
900247e2:	441c      	add	r4, r3
900247e4:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
900247e8:	9b20      	ldr	r3, [sp, #128]	; 0x80
900247ea:	4310      	orrs	r0, r2
900247ec:	441e      	add	r6, r3
900247ee:	ea40 000c 	orr.w	r0, r0, ip
900247f2:	f829 0b02 	strh.w	r0, [r9], #2
900247f6:	e6fa      	b.n	900245ee <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
900247f8:	b013      	add	sp, #76	; 0x4c
900247fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

900247fe <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh>:
900247fe:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
90024802:	e9dd 4e08 	ldrd	r4, lr, [sp, #32]
90024806:	f9bd 901c 	ldrsh.w	r9, [sp, #28]
9002480a:	fb0e 4703 	mla	r7, lr, r3, r4
9002480e:	f1be 0f00 	cmp.w	lr, #0
90024812:	f89d 5028 	ldrb.w	r5, [sp, #40]	; 0x28
90024816:	f89d 602c 	ldrb.w	r6, [sp, #44]	; 0x2c
9002481a:	eb02 0847 	add.w	r8, r2, r7, lsl #1
9002481e:	8808      	ldrh	r0, [r1, #0]
90024820:	db60      	blt.n	900248e4 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xe6>
90024822:	45f1      	cmp	r9, lr
90024824:	dd5e      	ble.n	900248e4 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xe6>
90024826:	2c00      	cmp	r4, #0
90024828:	db5a      	blt.n	900248e0 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xe2>
9002482a:	42a3      	cmp	r3, r4
9002482c:	dd58      	ble.n	900248e0 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xe2>
9002482e:	f832 c017 	ldrh.w	ip, [r2, r7, lsl #1]
90024832:	1c62      	adds	r2, r4, #1
90024834:	d459      	bmi.n	900248ea <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xec>
90024836:	4293      	cmp	r3, r2
90024838:	dd57      	ble.n	900248ea <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xec>
9002483a:	2d00      	cmp	r5, #0
9002483c:	d055      	beq.n	900248ea <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xec>
9002483e:	f8b8 7002 	ldrh.w	r7, [r8, #2]
90024842:	f11e 0e01 	adds.w	lr, lr, #1
90024846:	d454      	bmi.n	900248f2 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf4>
90024848:	45f1      	cmp	r9, lr
9002484a:	dd52      	ble.n	900248f2 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf4>
9002484c:	2e00      	cmp	r6, #0
9002484e:	d050      	beq.n	900248f2 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf4>
90024850:	2c00      	cmp	r4, #0
90024852:	db4c      	blt.n	900248ee <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf0>
90024854:	42a3      	cmp	r3, r4
90024856:	dd4a      	ble.n	900248ee <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf0>
90024858:	f838 2013 	ldrh.w	r2, [r8, r3, lsl #1]
9002485c:	3401      	adds	r4, #1
9002485e:	d405      	bmi.n	9002486c <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>
90024860:	42a3      	cmp	r3, r4
90024862:	dd03      	ble.n	9002486c <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>
90024864:	b115      	cbz	r5, 9002486c <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>
90024866:	3301      	adds	r3, #1
90024868:	f838 0013 	ldrh.w	r0, [r8, r3, lsl #1]
9002486c:	fb15 f406 	smulbb	r4, r5, r6
90024870:	ea4f 430c 	mov.w	r3, ip, lsl #16
90024874:	ea4f 4e07 	mov.w	lr, r7, lsl #16
90024878:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
9002487c:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
90024880:	f3c4 04c7 	ubfx	r4, r4, #3, #8
90024884:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
90024888:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
9002488c:	ea43 0c0c 	orr.w	ip, r3, ip
90024890:	f1c6 0310 	rsb	r3, r6, #16
90024894:	ea4e 0707 	orr.w	r7, lr, r7
90024898:	ebc4 0646 	rsb	r6, r4, r6, lsl #1
9002489c:	1b5b      	subs	r3, r3, r5
9002489e:	ebc4 0545 	rsb	r5, r4, r5, lsl #1
900248a2:	eb04 0343 	add.w	r3, r4, r3, lsl #1
900248a6:	437d      	muls	r5, r7
900248a8:	fb03 5c0c 	mla	ip, r3, ip, r5
900248ac:	0403      	lsls	r3, r0, #16
900248ae:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
900248b2:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
900248b6:	4318      	orrs	r0, r3
900248b8:	0413      	lsls	r3, r2, #16
900248ba:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
900248be:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
900248c2:	fb04 c000 	mla	r0, r4, r0, ip
900248c6:	4313      	orrs	r3, r2
900248c8:	fb06 0003 	mla	r0, r6, r3, r0
900248cc:	0d43      	lsrs	r3, r0, #21
900248ce:	0940      	lsrs	r0, r0, #5
900248d0:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
900248d4:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
900248d8:	4318      	orrs	r0, r3
900248da:	8008      	strh	r0, [r1, #0]
900248dc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
900248e0:	4684      	mov	ip, r0
900248e2:	e7a6      	b.n	90024832 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x34>
900248e4:	4607      	mov	r7, r0
900248e6:	4684      	mov	ip, r0
900248e8:	e7ab      	b.n	90024842 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x44>
900248ea:	4607      	mov	r7, r0
900248ec:	e7a9      	b.n	90024842 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x44>
900248ee:	4602      	mov	r2, r0
900248f0:	e7b4      	b.n	9002485c <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x5e>
900248f2:	4602      	mov	r2, r0
900248f4:	e7ba      	b.n	9002486c <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>

900248f6 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
900248f6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
900248fa:	b08f      	sub	sp, #60	; 0x3c
900248fc:	461d      	mov	r5, r3
900248fe:	9b1d      	ldr	r3, [sp, #116]	; 0x74
90024900:	9107      	str	r1, [sp, #28]
90024902:	920c      	str	r2, [sp, #48]	; 0x30
90024904:	6859      	ldr	r1, [r3, #4]
90024906:	681b      	ldr	r3, [r3, #0]
90024908:	900d      	str	r0, [sp, #52]	; 0x34
9002490a:	e9dd 271e 	ldrd	r2, r7, [sp, #120]	; 0x78
9002490e:	e9dd 4619 	ldrd	r4, r6, [sp, #100]	; 0x64
90024912:	fb01 2707 	mla	r7, r1, r7, r2
90024916:	eb03 0747 	add.w	r7, r3, r7, lsl #1
9002491a:	9b20      	ldr	r3, [sp, #128]	; 0x80
9002491c:	f8d3 8000 	ldr.w	r8, [r3]
90024920:	9b07      	ldr	r3, [sp, #28]
90024922:	2b00      	cmp	r3, #0
90024924:	dc03      	bgt.n	9002492e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
90024926:	9b0c      	ldr	r3, [sp, #48]	; 0x30
90024928:	2b00      	cmp	r3, #0
9002492a:	f340 8182 	ble.w	90024c32 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33c>
9002492e:	9b20      	ldr	r3, [sp, #128]	; 0x80
90024930:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
90024934:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
90024938:	1e48      	subs	r0, r1, #1
9002493a:	f102 3cff 	add.w	ip, r2, #4294967295
9002493e:	2d00      	cmp	r5, #0
90024940:	f340 809b 	ble.w	90024a7a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x184>
90024944:	ea5f 4e24 	movs.w	lr, r4, asr #16
90024948:	ea4f 4326 	mov.w	r3, r6, asr #16
9002494c:	d406      	bmi.n	9002495c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
9002494e:	4586      	cmp	lr, r0
90024950:	da04      	bge.n	9002495c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
90024952:	2b00      	cmp	r3, #0
90024954:	db02      	blt.n	9002495c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
90024956:	4563      	cmp	r3, ip
90024958:	f2c0 8090 	blt.w	90024a7c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
9002495c:	f11e 0e01 	adds.w	lr, lr, #1
90024960:	f100 8084 	bmi.w	90024a6c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
90024964:	4571      	cmp	r1, lr
90024966:	f2c0 8081 	blt.w	90024a6c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
9002496a:	3301      	adds	r3, #1
9002496c:	d47e      	bmi.n	90024a6c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
9002496e:	429a      	cmp	r2, r3
90024970:	db7c      	blt.n	90024a6c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
90024972:	46aa      	mov	sl, r5
90024974:	46b9      	mov	r9, r7
90024976:	f1ba 0f00 	cmp.w	sl, #0
9002497a:	f340 8099 	ble.w	90024ab0 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
9002497e:	9b20      	ldr	r3, [sp, #128]	; 0x80
90024980:	1421      	asrs	r1, r4, #16
90024982:	ea4f 4026 	mov.w	r0, r6, asr #16
90024986:	f3c4 3203 	ubfx	r2, r4, #12, #4
9002498a:	f3c6 3c03 	ubfx	ip, r6, #12, #4
9002498e:	e9d3 e302 	ldrd	lr, r3, [r3, #8]
90024992:	f100 80d1 	bmi.w	90024b38 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
90024996:	f10e 3bff 	add.w	fp, lr, #4294967295
9002499a:	4559      	cmp	r1, fp
9002499c:	f280 80cc 	bge.w	90024b38 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
900249a0:	2800      	cmp	r0, #0
900249a2:	f2c0 80c9 	blt.w	90024b38 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
900249a6:	f103 3bff 	add.w	fp, r3, #4294967295
900249aa:	4558      	cmp	r0, fp
900249ac:	f280 80c4 	bge.w	90024b38 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
900249b0:	fa0f fe8e 	sxth.w	lr, lr
900249b4:	fb00 110e 	mla	r1, r0, lr, r1
900249b8:	eb08 0041 	add.w	r0, r8, r1, lsl #1
900249bc:	f838 b011 	ldrh.w	fp, [r8, r1, lsl #1]
900249c0:	8841      	ldrh	r1, [r0, #2]
900249c2:	f1bc 0f00 	cmp.w	ip, #0
900249c6:	d00b      	beq.n	900249e0 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xea>
900249c8:	f10e 4300 	add.w	r3, lr, #2147483648	; 0x80000000
900249cc:	3b01      	subs	r3, #1
900249ce:	005b      	lsls	r3, r3, #1
900249d0:	3302      	adds	r3, #2
900249d2:	eb00 0e03 	add.w	lr, r0, r3
900249d6:	5ac3      	ldrh	r3, [r0, r3]
900249d8:	9308      	str	r3, [sp, #32]
900249da:	f8be 3002 	ldrh.w	r3, [lr, #2]
900249de:	9309      	str	r3, [sp, #36]	; 0x24
900249e0:	ea4f 400b 	mov.w	r0, fp, lsl #16
900249e4:	f42b 6bfc 	bic.w	fp, fp, #2016	; 0x7e0
900249e8:	fb12 f30c 	smulbb	r3, r2, ip
900249ec:	f1cc 0e10 	rsb	lr, ip, #16
900249f0:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
900249f4:	10db      	asrs	r3, r3, #3
900249f6:	ebae 0e02 	sub.w	lr, lr, r2
900249fa:	ea40 000b 	orr.w	r0, r0, fp
900249fe:	ea4f 4b01 	mov.w	fp, r1, lsl #16
90024a02:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
90024a06:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
90024a0a:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
90024a0e:	eb03 0e4e 	add.w	lr, r3, lr, lsl #1
90024a12:	ea4b 0101 	orr.w	r1, fp, r1
90024a16:	4351      	muls	r1, r2
90024a18:	9a09      	ldr	r2, [sp, #36]	; 0x24
90024a1a:	fb0e 1e00 	mla	lr, lr, r0, r1
90024a1e:	0410      	lsls	r0, r2, #16
90024a20:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
90024a24:	9908      	ldr	r1, [sp, #32]
90024a26:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
90024a2a:	4310      	orrs	r0, r2
90024a2c:	9a08      	ldr	r2, [sp, #32]
90024a2e:	0412      	lsls	r2, r2, #16
90024a30:	fb03 e000 	mla	r0, r3, r0, lr
90024a34:	f421 6efc 	bic.w	lr, r1, #2016	; 0x7e0
90024a38:	ebc3 034c 	rsb	r3, r3, ip, lsl #1
90024a3c:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
90024a40:	ea42 020e 	orr.w	r2, r2, lr
90024a44:	fb03 0302 	mla	r3, r3, r2, r0
90024a48:	0d5a      	lsrs	r2, r3, #21
90024a4a:	095b      	lsrs	r3, r3, #5
90024a4c:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
90024a50:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
90024a54:	4313      	orrs	r3, r2
90024a56:	f8a9 3000 	strh.w	r3, [r9]
90024a5a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
90024a5c:	f109 0902 	add.w	r9, r9, #2
90024a60:	f10a 3aff 	add.w	sl, sl, #4294967295
90024a64:	441c      	add	r4, r3
90024a66:	9b1c      	ldr	r3, [sp, #112]	; 0x70
90024a68:	441e      	add	r6, r3
90024a6a:	e784      	b.n	90024976 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
90024a6c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
90024a6e:	3d01      	subs	r5, #1
90024a70:	3702      	adds	r7, #2
90024a72:	441c      	add	r4, r3
90024a74:	9b1c      	ldr	r3, [sp, #112]	; 0x70
90024a76:	441e      	add	r6, r3
90024a78:	e761      	b.n	9002493e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
90024a7a:	d01d      	beq.n	90024ab8 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
90024a7c:	1e6b      	subs	r3, r5, #1
90024a7e:	981b      	ldr	r0, [sp, #108]	; 0x6c
90024a80:	fb00 4003 	mla	r0, r0, r3, r4
90024a84:	1400      	asrs	r0, r0, #16
90024a86:	f53f af74 	bmi.w	90024972 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
90024a8a:	3901      	subs	r1, #1
90024a8c:	4288      	cmp	r0, r1
90024a8e:	f6bf af70 	bge.w	90024972 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
90024a92:	991c      	ldr	r1, [sp, #112]	; 0x70
90024a94:	fb01 6303 	mla	r3, r1, r3, r6
90024a98:	141b      	asrs	r3, r3, #16
90024a9a:	f53f af6a 	bmi.w	90024972 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
90024a9e:	3a01      	subs	r2, #1
90024aa0:	4293      	cmp	r3, r2
90024aa2:	f6bf af66 	bge.w	90024972 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
90024aa6:	46a9      	mov	r9, r5
90024aa8:	46ba      	mov	sl, r7
90024aaa:	f1b9 0f00 	cmp.w	r9, #0
90024aae:	dc5b      	bgt.n	90024b68 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x272>
90024ab0:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
90024ab4:	eb07 0745 	add.w	r7, r7, r5, lsl #1
90024ab8:	9b07      	ldr	r3, [sp, #28]
90024aba:	2b00      	cmp	r3, #0
90024abc:	f340 80b9 	ble.w	90024c32 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33c>
90024ac0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
90024ac4:	9b18      	ldr	r3, [sp, #96]	; 0x60
90024ac6:	ee30 0a04 	vadd.f32	s0, s0, s8
90024aca:	ee70 0aa4 	vadd.f32	s1, s1, s9
90024ace:	eef0 6a62 	vmov.f32	s13, s5
90024ad2:	eec7 7a00 	vdiv.f32	s15, s14, s0
90024ad6:	ee31 1a05 	vadd.f32	s2, s2, s10
90024ada:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
90024ade:	ee16 4a90 	vmov	r4, s13
90024ae2:	eef0 6a43 	vmov.f32	s13, s6
90024ae6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
90024aea:	ee16 6a90 	vmov	r6, s13
90024aee:	ee20 7aa7 	vmul.f32	s14, s1, s15
90024af2:	ee61 7a27 	vmul.f32	s15, s2, s15
90024af6:	ee77 2a62 	vsub.f32	s5, s14, s5
90024afa:	ee37 3ac3 	vsub.f32	s6, s15, s6
90024afe:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
90024b02:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
90024b06:	ee12 2a90 	vmov	r2, s5
90024b0a:	eef0 2a47 	vmov.f32	s5, s14
90024b0e:	fb92 f3f3 	sdiv	r3, r2, r3
90024b12:	ee13 2a10 	vmov	r2, s6
90024b16:	931b      	str	r3, [sp, #108]	; 0x6c
90024b18:	9b18      	ldr	r3, [sp, #96]	; 0x60
90024b1a:	eeb0 3a67 	vmov.f32	s6, s15
90024b1e:	fb92 f3f3 	sdiv	r3, r2, r3
90024b22:	931c      	str	r3, [sp, #112]	; 0x70
90024b24:	9b07      	ldr	r3, [sp, #28]
90024b26:	9a0c      	ldr	r2, [sp, #48]	; 0x30
90024b28:	3b01      	subs	r3, #1
90024b2a:	9307      	str	r3, [sp, #28]
90024b2c:	bf08      	it	eq
90024b2e:	4615      	moveq	r5, r2
90024b30:	9b18      	ldr	r3, [sp, #96]	; 0x60
90024b32:	bf18      	it	ne
90024b34:	461d      	movne	r5, r3
90024b36:	e6f3      	b.n	90024920 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a>
90024b38:	f111 0b01 	adds.w	fp, r1, #1
90024b3c:	d48d      	bmi.n	90024a5a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
90024b3e:	45de      	cmp	lr, fp
90024b40:	db8b      	blt.n	90024a5a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
90024b42:	f110 0b01 	adds.w	fp, r0, #1
90024b46:	d488      	bmi.n	90024a5a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
90024b48:	455b      	cmp	r3, fp
90024b4a:	db86      	blt.n	90024a5a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
90024b4c:	b21b      	sxth	r3, r3
90024b4e:	e9cd 1001 	strd	r1, r0, [sp, #4]
90024b52:	e9cd 2c03 	strd	r2, ip, [sp, #12]
90024b56:	9300      	str	r3, [sp, #0]
90024b58:	4642      	mov	r2, r8
90024b5a:	fa0f f38e 	sxth.w	r3, lr
90024b5e:	4649      	mov	r1, r9
90024b60:	980d      	ldr	r0, [sp, #52]	; 0x34
90024b62:	f7ff fe4c 	bl	900247fe <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh>
90024b66:	e778      	b.n	90024a5a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
90024b68:	9b20      	ldr	r3, [sp, #128]	; 0x80
90024b6a:	1420      	asrs	r0, r4, #16
90024b6c:	1431      	asrs	r1, r6, #16
90024b6e:	f3c6 3e03 	ubfx	lr, r6, #12, #4
90024b72:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
90024b76:	f3c4 3203 	ubfx	r2, r4, #12, #4
90024b7a:	fb03 0101 	mla	r1, r3, r1, r0
90024b7e:	eb08 0041 	add.w	r0, r8, r1, lsl #1
90024b82:	f838 c011 	ldrh.w	ip, [r8, r1, lsl #1]
90024b86:	8841      	ldrh	r1, [r0, #2]
90024b88:	f1be 0f00 	cmp.w	lr, #0
90024b8c:	d00b      	beq.n	90024ba6 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
90024b8e:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
90024b92:	3b01      	subs	r3, #1
90024b94:	005b      	lsls	r3, r3, #1
90024b96:	3302      	adds	r3, #2
90024b98:	eb00 0b03 	add.w	fp, r0, r3
90024b9c:	5ac3      	ldrh	r3, [r0, r3]
90024b9e:	930a      	str	r3, [sp, #40]	; 0x28
90024ba0:	f8bb 3002 	ldrh.w	r3, [fp, #2]
90024ba4:	930b      	str	r3, [sp, #44]	; 0x2c
90024ba6:	ea4f 400c 	mov.w	r0, ip, lsl #16
90024baa:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
90024bae:	fb12 f30e 	smulbb	r3, r2, lr
90024bb2:	ea4f 4b01 	mov.w	fp, r1, lsl #16
90024bb6:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
90024bba:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
90024bbe:	10db      	asrs	r3, r3, #3
90024bc0:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
90024bc4:	ea40 000c 	orr.w	r0, r0, ip
90024bc8:	f1ce 0c10 	rsb	ip, lr, #16
90024bcc:	ea4b 0101 	orr.w	r1, fp, r1
90024bd0:	f109 39ff 	add.w	r9, r9, #4294967295
90024bd4:	ebac 0c02 	sub.w	ip, ip, r2
90024bd8:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
90024bdc:	eb03 0c4c 	add.w	ip, r3, ip, lsl #1
90024be0:	4351      	muls	r1, r2
90024be2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
90024be4:	fb0c 1c00 	mla	ip, ip, r0, r1
90024be8:	990a      	ldr	r1, [sp, #40]	; 0x28
90024bea:	ea4f 4b02 	mov.w	fp, r2, lsl #16
90024bee:	f422 60fc 	bic.w	r0, r2, #2016	; 0x7e0
90024bf2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
90024bf4:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
90024bf8:	0412      	lsls	r2, r2, #16
90024bfa:	ea4b 0000 	orr.w	r0, fp, r0
90024bfe:	f421 6bfc 	bic.w	fp, r1, #2016	; 0x7e0
90024c02:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
90024c06:	fb03 c000 	mla	r0, r3, r0, ip
90024c0a:	ebc3 034e 	rsb	r3, r3, lr, lsl #1
90024c0e:	ea42 0b0b 	orr.w	fp, r2, fp
90024c12:	fb03 000b 	mla	r0, r3, fp, r0
90024c16:	0d43      	lsrs	r3, r0, #21
90024c18:	0940      	lsrs	r0, r0, #5
90024c1a:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
90024c1e:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
90024c22:	4318      	orrs	r0, r3
90024c24:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
90024c26:	441c      	add	r4, r3
90024c28:	9b1c      	ldr	r3, [sp, #112]	; 0x70
90024c2a:	f82a 0b02 	strh.w	r0, [sl], #2
90024c2e:	441e      	add	r6, r3
90024c30:	e73b      	b.n	90024aaa <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
90024c32:	b00f      	add	sp, #60	; 0x3c
90024c34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

90024c38 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh>:
90024c38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90024c3c:	b085      	sub	sp, #20
90024c3e:	e9dd 740f 	ldrd	r7, r4, [sp, #60]	; 0x3c
90024c42:	9102      	str	r1, [sp, #8]
90024c44:	2c00      	cmp	r4, #0
90024c46:	fb04 7103 	mla	r1, r4, r3, r7
90024c4a:	f9bd e038 	ldrsh.w	lr, [sp, #56]	; 0x38
90024c4e:	f89d 6044 	ldrb.w	r6, [sp, #68]	; 0x44
90024c52:	eb02 0c81 	add.w	ip, r2, r1, lsl #2
90024c56:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
90024c5a:	f2c0 811b 	blt.w	90024e94 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x25c>
90024c5e:	45a6      	cmp	lr, r4
90024c60:	f340 8118 	ble.w	90024e94 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x25c>
90024c64:	2f00      	cmp	r7, #0
90024c66:	f2c0 8113 	blt.w	90024e90 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x258>
90024c6a:	42bb      	cmp	r3, r7
90024c6c:	f340 8110 	ble.w	90024e90 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x258>
90024c70:	f852 5021 	ldr.w	r5, [r2, r1, lsl #2]
90024c74:	1c7a      	adds	r2, r7, #1
90024c76:	f100 8110 	bmi.w	90024e9a <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x262>
90024c7a:	4293      	cmp	r3, r2
90024c7c:	f340 810d 	ble.w	90024e9a <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x262>
90024c80:	2e00      	cmp	r6, #0
90024c82:	f000 810c 	beq.w	90024e9e <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x266>
90024c86:	f8dc 1004 	ldr.w	r1, [ip, #4]
90024c8a:	3401      	adds	r4, #1
90024c8c:	f100 810b 	bmi.w	90024ea6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x26e>
90024c90:	45a6      	cmp	lr, r4
90024c92:	f340 8108 	ble.w	90024ea6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x26e>
90024c96:	2800      	cmp	r0, #0
90024c98:	f000 8108 	beq.w	90024eac <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x274>
90024c9c:	2f00      	cmp	r7, #0
90024c9e:	f2c0 8100 	blt.w	90024ea2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x26a>
90024ca2:	42bb      	cmp	r3, r7
90024ca4:	f340 80fd 	ble.w	90024ea2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x26a>
90024ca8:	f85c 4023 	ldr.w	r4, [ip, r3, lsl #2]
90024cac:	3701      	adds	r7, #1
90024cae:	f100 8100 	bmi.w	90024eb2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x27a>
90024cb2:	42bb      	cmp	r3, r7
90024cb4:	f340 80fd 	ble.w	90024eb2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x27a>
90024cb8:	2e00      	cmp	r6, #0
90024cba:	f000 80fc 	beq.w	90024eb6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x27e>
90024cbe:	3301      	adds	r3, #1
90024cc0:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
90024cc4:	b2b6      	uxth	r6, r6
90024cc6:	b280      	uxth	r0, r0
90024cc8:	ea4f 6a11 	mov.w	sl, r1, lsr #24
90024ccc:	fb00 fe06 	mul.w	lr, r0, r6
90024cd0:	0136      	lsls	r6, r6, #4
90024cd2:	ea4f 6b15 	mov.w	fp, r5, lsr #24
90024cd6:	ebce 1000 	rsb	r0, lr, r0, lsl #4
90024cda:	eba6 070e 	sub.w	r7, r6, lr
90024cde:	f5c6 7380 	rsb	r3, r6, #256	; 0x100
90024ce2:	ea4f 6914 	mov.w	r9, r4, lsr #24
90024ce6:	b280      	uxth	r0, r0
90024ce8:	b2bf      	uxth	r7, r7
90024cea:	1a1b      	subs	r3, r3, r0
90024cec:	ea4f 6812 	mov.w	r8, r2, lsr #24
90024cf0:	fb0a f607 	mul.w	r6, sl, r7
90024cf4:	b29b      	uxth	r3, r3
90024cf6:	fb0b 6603 	mla	r6, fp, r3, r6
90024cfa:	fb00 6609 	mla	r6, r0, r9, r6
90024cfe:	fb0e 6608 	mla	r6, lr, r8, r6
90024d02:	f3c6 2607 	ubfx	r6, r6, #8, #8
90024d06:	9600      	str	r6, [sp, #0]
90024d08:	2e00      	cmp	r6, #0
90024d0a:	f000 80be 	beq.w	90024e8a <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x252>
90024d0e:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
90024d12:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
90024d16:	9e02      	ldr	r6, [sp, #8]
90024d18:	fb0b fc0c 	mul.w	ip, fp, ip
90024d1c:	fb0b f505 	mul.w	r5, fp, r5
90024d20:	8836      	ldrh	r6, [r6, #0]
90024d22:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
90024d26:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
90024d2a:	9501      	str	r5, [sp, #4]
90024d2c:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
90024d30:	44dc      	add	ip, fp
90024d32:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
90024d36:	f00c 15ff 	and.w	r5, ip, #16711935	; 0xff00ff
90024d3a:	9503      	str	r5, [sp, #12]
90024d3c:	9d01      	ldr	r5, [sp, #4]
90024d3e:	f505 7c80 	add.w	ip, r5, #256	; 0x100
90024d42:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
90024d46:	f001 1cff 	and.w	ip, r1, #16711935	; 0xff00ff
90024d4a:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
90024d4e:	fb0a fc0c 	mul.w	ip, sl, ip
90024d52:	ea4f 2b15 	mov.w	fp, r5, lsr #8
90024d56:	fb0a fa01 	mul.w	sl, sl, r1
90024d5a:	ea4f 251c 	mov.w	r5, ip, lsr #8
90024d5e:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
90024d62:	f50a 7180 	add.w	r1, sl, #256	; 0x100
90024d66:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
90024d6a:	eb01 2a1a 	add.w	sl, r1, sl, lsr #8
90024d6e:	4465      	add	r5, ip
90024d70:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
90024d74:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
90024d78:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
90024d7c:	fb09 fc0c 	mul.w	ip, r9, ip
90024d80:	0a2d      	lsrs	r5, r5, #8
90024d82:	fb09 f904 	mul.w	r9, r9, r4
90024d86:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
90024d8a:	ea4f 211c 	mov.w	r1, ip, lsr #8
90024d8e:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
90024d92:	f509 7480 	add.w	r4, r9, #256	; 0x100
90024d96:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
90024d9a:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
90024d9e:	437d      	muls	r5, r7
90024da0:	eb04 2919 	add.w	r9, r4, r9, lsr #8
90024da4:	f002 14ff 	and.w	r4, r2, #16711935	; 0xff00ff
90024da8:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
90024dac:	4461      	add	r1, ip
90024dae:	fb08 f404 	mul.w	r4, r8, r4
90024db2:	ea4f 2919 	mov.w	r9, r9, lsr #8
90024db6:	fb08 f802 	mul.w	r8, r8, r2
90024dba:	0a09      	lsrs	r1, r1, #8
90024dbc:	0a22      	lsrs	r2, r4, #8
90024dbe:	f104 1401 	add.w	r4, r4, #65537	; 0x10001
90024dc2:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
90024dc6:	fb07 f70a 	mul.w	r7, r7, sl
90024dca:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
90024dce:	4414      	add	r4, r2
90024dd0:	f508 7280 	add.w	r2, r8, #256	; 0x100
90024dd4:	0a24      	lsrs	r4, r4, #8
90024dd6:	eb02 2818 	add.w	r8, r2, r8, lsr #8
90024dda:	9a03      	ldr	r2, [sp, #12]
90024ddc:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
90024de0:	fb02 5503 	mla	r5, r2, r3, r5
90024de4:	ea4f 2818 	mov.w	r8, r8, lsr #8
90024de8:	9a00      	ldr	r2, [sp, #0]
90024dea:	fb04 540e 	mla	r4, r4, lr, r5
90024dee:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
90024df2:	1235      	asrs	r5, r6, #8
90024df4:	fb01 4100 	mla	r1, r1, r0, r4
90024df8:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
90024dfc:	0a09      	lsrs	r1, r1, #8
90024dfe:	f001 14ff 	and.w	r4, r1, #16711935	; 0xff00ff
90024e02:	f40b 417f 	and.w	r1, fp, #65280	; 0xff00
90024e06:	fb03 7101 	mla	r1, r3, r1, r7
90024e0a:	fb0e 1e08 	mla	lr, lr, r8, r1
90024e0e:	f409 417f 	and.w	r1, r9, #65280	; 0xff00
90024e12:	fb00 e101 	mla	r1, r0, r1, lr
90024e16:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
90024e1a:	b287      	uxth	r7, r0
90024e1c:	0a09      	lsrs	r1, r1, #8
90024e1e:	437a      	muls	r2, r7
90024e20:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
90024e24:	1c53      	adds	r3, r2, #1
90024e26:	4321      	orrs	r1, r4
90024e28:	eb03 2312 	add.w	r3, r3, r2, lsr #8
90024e2c:	0c0a      	lsrs	r2, r1, #16
90024e2e:	f3c1 2407 	ubfx	r4, r1, #8, #8
90024e32:	ea6f 2313 	mvn.w	r3, r3, lsr #8
90024e36:	b2c8      	uxtb	r0, r1
90024e38:	fb12 f207 	smulbb	r2, r2, r7
90024e3c:	fb14 f407 	smulbb	r4, r4, r7
90024e40:	b2db      	uxtb	r3, r3
90024e42:	fb10 f007 	smulbb	r0, r0, r7
90024e46:	fb05 2503 	mla	r5, r5, r3, r2
90024e4a:	10f2      	asrs	r2, r6, #3
90024e4c:	00f6      	lsls	r6, r6, #3
90024e4e:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
90024e52:	b2ad      	uxth	r5, r5
90024e54:	b2f6      	uxtb	r6, r6
90024e56:	fb02 4203 	mla	r2, r2, r3, r4
90024e5a:	fb06 0303 	mla	r3, r6, r3, r0
90024e5e:	b294      	uxth	r4, r2
90024e60:	b299      	uxth	r1, r3
90024e62:	1c6b      	adds	r3, r5, #1
90024e64:	1c62      	adds	r2, r4, #1
90024e66:	eb03 2515 	add.w	r5, r3, r5, lsr #8
90024e6a:	1c4b      	adds	r3, r1, #1
90024e6c:	eb02 2214 	add.w	r2, r2, r4, lsr #8
90024e70:	eb03 2311 	add.w	r3, r3, r1, lsr #8
90024e74:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
90024e78:	0952      	lsrs	r2, r2, #5
90024e7a:	f3c3 23c4 	ubfx	r3, r3, #11, #5
90024e7e:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
90024e82:	432b      	orrs	r3, r5
90024e84:	4313      	orrs	r3, r2
90024e86:	9a02      	ldr	r2, [sp, #8]
90024e88:	8013      	strh	r3, [r2, #0]
90024e8a:	b005      	add	sp, #20
90024e8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90024e90:	2500      	movs	r5, #0
90024e92:	e6ef      	b.n	90024c74 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x3c>
90024e94:	2100      	movs	r1, #0
90024e96:	460d      	mov	r5, r1
90024e98:	e6f7      	b.n	90024c8a <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x52>
90024e9a:	2100      	movs	r1, #0
90024e9c:	e6f5      	b.n	90024c8a <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x52>
90024e9e:	4631      	mov	r1, r6
90024ea0:	e6f3      	b.n	90024c8a <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x52>
90024ea2:	2400      	movs	r4, #0
90024ea4:	e702      	b.n	90024cac <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x74>
90024ea6:	2200      	movs	r2, #0
90024ea8:	4614      	mov	r4, r2
90024eaa:	e70b      	b.n	90024cc4 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8c>
90024eac:	4602      	mov	r2, r0
90024eae:	4604      	mov	r4, r0
90024eb0:	e708      	b.n	90024cc4 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8c>
90024eb2:	2200      	movs	r2, #0
90024eb4:	e706      	b.n	90024cc4 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8c>
90024eb6:	4632      	mov	r2, r6
90024eb8:	e704      	b.n	90024cc4 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8c>

90024eba <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
90024eba:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90024ebe:	b09d      	sub	sp, #116	; 0x74
90024ec0:	9219      	str	r2, [sp, #100]	; 0x64
90024ec2:	9307      	str	r3, [sp, #28]
90024ec4:	9a2b      	ldr	r2, [sp, #172]	; 0xac
90024ec6:	f89d 30bc 	ldrb.w	r3, [sp, #188]	; 0xbc
90024eca:	901b      	str	r0, [sp, #108]	; 0x6c
90024ecc:	931a      	str	r3, [sp, #104]	; 0x68
90024ece:	6850      	ldr	r0, [r2, #4]
90024ed0:	9117      	str	r1, [sp, #92]	; 0x5c
90024ed2:	6812      	ldr	r2, [r2, #0]
90024ed4:	e9dd 132c 	ldrd	r1, r3, [sp, #176]	; 0xb0
90024ed8:	e9dd 4627 	ldrd	r4, r6, [sp, #156]	; 0x9c
90024edc:	fb00 1303 	mla	r3, r0, r3, r1
90024ee0:	eb02 0343 	add.w	r3, r2, r3, lsl #1
90024ee4:	930a      	str	r3, [sp, #40]	; 0x28
90024ee6:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
90024ee8:	681b      	ldr	r3, [r3, #0]
90024eea:	9310      	str	r3, [sp, #64]	; 0x40
90024eec:	f8bd 3068 	ldrh.w	r3, [sp, #104]	; 0x68
90024ef0:	930b      	str	r3, [sp, #44]	; 0x2c
90024ef2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
90024ef4:	2b00      	cmp	r3, #0
90024ef6:	dc03      	bgt.n	90024f00 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46>
90024ef8:	9b19      	ldr	r3, [sp, #100]	; 0x64
90024efa:	2b00      	cmp	r3, #0
90024efc:	f340 8375 	ble.w	900255ea <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x730>
90024f00:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
90024f02:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
90024f06:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
90024f0a:	1e48      	subs	r0, r1, #1
90024f0c:	1e57      	subs	r7, r2, #1
90024f0e:	9b07      	ldr	r3, [sp, #28]
90024f10:	2b00      	cmp	r3, #0
90024f12:	f340 818e 	ble.w	90025232 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x378>
90024f16:	ea5f 4c24 	movs.w	ip, r4, asr #16
90024f1a:	ea4f 4326 	mov.w	r3, r6, asr #16
90024f1e:	d406      	bmi.n	90024f2e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
90024f20:	4584      	cmp	ip, r0
90024f22:	da04      	bge.n	90024f2e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
90024f24:	2b00      	cmp	r3, #0
90024f26:	db02      	blt.n	90024f2e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
90024f28:	42bb      	cmp	r3, r7
90024f2a:	f2c0 8183 	blt.w	90025234 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37a>
90024f2e:	f11c 0c01 	adds.w	ip, ip, #1
90024f32:	f100 8173 	bmi.w	9002521c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
90024f36:	4561      	cmp	r1, ip
90024f38:	f2c0 8170 	blt.w	9002521c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
90024f3c:	3301      	adds	r3, #1
90024f3e:	f100 816d 	bmi.w	9002521c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
90024f42:	429a      	cmp	r2, r3
90024f44:	f2c0 816a 	blt.w	9002521c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
90024f48:	9b07      	ldr	r3, [sp, #28]
90024f4a:	9f0a      	ldr	r7, [sp, #40]	; 0x28
90024f4c:	9318      	str	r3, [sp, #96]	; 0x60
90024f4e:	9b18      	ldr	r3, [sp, #96]	; 0x60
90024f50:	2b00      	cmp	r3, #0
90024f52:	f340 818c 	ble.w	9002526e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b4>
90024f56:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
90024f58:	ea4f 4c26 	mov.w	ip, r6, asr #16
90024f5c:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
90024f5e:	f3c4 3003 	ubfx	r0, r4, #12, #4
90024f62:	f8d2 e00c 	ldr.w	lr, [r2, #12]
90024f66:	1422      	asrs	r2, r4, #16
90024f68:	f3c6 3103 	ubfx	r1, r6, #12, #4
90024f6c:	689b      	ldr	r3, [r3, #8]
90024f6e:	f100 81cd 	bmi.w	9002530c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
90024f72:	f103 38ff 	add.w	r8, r3, #4294967295
90024f76:	4542      	cmp	r2, r8
90024f78:	f280 81c8 	bge.w	9002530c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
90024f7c:	f1bc 0f00 	cmp.w	ip, #0
90024f80:	f2c0 81c4 	blt.w	9002530c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
90024f84:	f10e 38ff 	add.w	r8, lr, #4294967295
90024f88:	45c4      	cmp	ip, r8
90024f8a:	f280 81bf 	bge.w	9002530c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
90024f8e:	b21b      	sxth	r3, r3
90024f90:	9d10      	ldr	r5, [sp, #64]	; 0x40
90024f92:	fb0c 2203 	mla	r2, ip, r3, r2
90024f96:	eb05 0882 	add.w	r8, r5, r2, lsl #2
90024f9a:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
90024f9e:	ea4f 6e12 	mov.w	lr, r2, lsr #24
90024fa2:	2800      	cmp	r0, #0
90024fa4:	f000 81a9 	beq.w	900252fa <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x440>
90024fa8:	f8d8 5004 	ldr.w	r5, [r8, #4]
90024fac:	950c      	str	r5, [sp, #48]	; 0x30
90024fae:	0e2d      	lsrs	r5, r5, #24
90024fb0:	9513      	str	r5, [sp, #76]	; 0x4c
90024fb2:	b181      	cbz	r1, 90024fd6 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
90024fb4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
90024fb8:	3b01      	subs	r3, #1
90024fba:	009b      	lsls	r3, r3, #2
90024fbc:	3304      	adds	r3, #4
90024fbe:	eb08 0c03 	add.w	ip, r8, r3
90024fc2:	f858 3003 	ldr.w	r3, [r8, r3]
90024fc6:	9308      	str	r3, [sp, #32]
90024fc8:	0e1b      	lsrs	r3, r3, #24
90024fca:	9311      	str	r3, [sp, #68]	; 0x44
90024fcc:	f8dc 3004 	ldr.w	r3, [ip, #4]
90024fd0:	930d      	str	r3, [sp, #52]	; 0x34
90024fd2:	0e1b      	lsrs	r3, r3, #24
90024fd4:	9314      	str	r3, [sp, #80]	; 0x50
90024fd6:	b280      	uxth	r0, r0
90024fd8:	9d11      	ldr	r5, [sp, #68]	; 0x44
90024fda:	b289      	uxth	r1, r1
90024fdc:	fb00 f901 	mul.w	r9, r0, r1
90024fe0:	0100      	lsls	r0, r0, #4
90024fe2:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
90024fe6:	eba0 0809 	sub.w	r8, r0, r9
90024fea:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
90024fee:	9813      	ldr	r0, [sp, #76]	; 0x4c
90024ff0:	b289      	uxth	r1, r1
90024ff2:	fa1f f888 	uxth.w	r8, r8
90024ff6:	1a5b      	subs	r3, r3, r1
90024ff8:	fb08 f000 	mul.w	r0, r8, r0
90024ffc:	b29b      	uxth	r3, r3
90024ffe:	fb03 000e 	mla	r0, r3, lr, r0
90025002:	fb01 0005 	mla	r0, r1, r5, r0
90025006:	9d14      	ldr	r5, [sp, #80]	; 0x50
90025008:	fb09 0005 	mla	r0, r9, r5, r0
9002500c:	f3c0 2007 	ubfx	r0, r0, #8, #8
90025010:	2800      	cmp	r0, #0
90025012:	f000 80fa 	beq.w	9002520a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
90025016:	f1be 0fff 	cmp.w	lr, #255	; 0xff
9002501a:	d01b      	beq.n	90025054 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
9002501c:	f002 1aff 	and.w	sl, r2, #16711935	; 0xff00ff
90025020:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
90025024:	fb0e fa0a 	mul.w	sl, lr, sl
90025028:	fb0e fe02 	mul.w	lr, lr, r2
9002502c:	ea4f 221a 	mov.w	r2, sl, lsr #8
90025030:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
90025034:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
90025038:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
9002503c:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
90025040:	4452      	add	r2, sl
90025042:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
90025046:	0a12      	lsrs	r2, r2, #8
90025048:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
9002504c:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
90025050:	ea42 020c 	orr.w	r2, r2, ip
90025054:	9d13      	ldr	r5, [sp, #76]	; 0x4c
90025056:	2dff      	cmp	r5, #255	; 0xff
90025058:	d021      	beq.n	9002509e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e4>
9002505a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
9002505c:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
90025060:	9d13      	ldr	r5, [sp, #76]	; 0x4c
90025062:	fb05 fb0b 	mul.w	fp, r5, fp
90025066:	9d0c      	ldr	r5, [sp, #48]	; 0x30
90025068:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
9002506c:	9d13      	ldr	r5, [sp, #76]	; 0x4c
9002506e:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
90025072:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
90025076:	fb05 fa0a 	mul.w	sl, r5, sl
9002507a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
9002507e:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
90025082:	44de      	add	lr, fp
90025084:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
90025088:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
9002508c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
90025090:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
90025094:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
90025098:	ea4e 050a 	orr.w	r5, lr, sl
9002509c:	950c      	str	r5, [sp, #48]	; 0x30
9002509e:	9d11      	ldr	r5, [sp, #68]	; 0x44
900250a0:	2dff      	cmp	r5, #255	; 0xff
900250a2:	d021      	beq.n	900250e8 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22e>
900250a4:	9d08      	ldr	r5, [sp, #32]
900250a6:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
900250aa:	9d11      	ldr	r5, [sp, #68]	; 0x44
900250ac:	fb05 fb0b 	mul.w	fp, r5, fp
900250b0:	9d08      	ldr	r5, [sp, #32]
900250b2:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
900250b6:	9d11      	ldr	r5, [sp, #68]	; 0x44
900250b8:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
900250bc:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
900250c0:	fb05 fa0a 	mul.w	sl, r5, sl
900250c4:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
900250c8:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
900250cc:	44de      	add	lr, fp
900250ce:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
900250d2:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
900250d6:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
900250da:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
900250de:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
900250e2:	ea4e 050a 	orr.w	r5, lr, sl
900250e6:	9508      	str	r5, [sp, #32]
900250e8:	9d14      	ldr	r5, [sp, #80]	; 0x50
900250ea:	2dff      	cmp	r5, #255	; 0xff
900250ec:	d021      	beq.n	90025132 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
900250ee:	9d0d      	ldr	r5, [sp, #52]	; 0x34
900250f0:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
900250f4:	9d14      	ldr	r5, [sp, #80]	; 0x50
900250f6:	fb05 fb0b 	mul.w	fp, r5, fp
900250fa:	9d0d      	ldr	r5, [sp, #52]	; 0x34
900250fc:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
90025100:	9d14      	ldr	r5, [sp, #80]	; 0x50
90025102:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
90025106:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
9002510a:	fb05 fa0a 	mul.w	sl, r5, sl
9002510e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
90025112:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
90025116:	44de      	add	lr, fp
90025118:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
9002511c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
90025120:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
90025124:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
90025128:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
9002512c:	ea4e 050a 	orr.w	r5, lr, sl
90025130:	950d      	str	r5, [sp, #52]	; 0x34
90025132:	9d0c      	ldr	r5, [sp, #48]	; 0x30
90025134:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
90025138:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
9002513c:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
90025140:	9d08      	ldr	r5, [sp, #32]
90025142:	fb08 fc0c 	mul.w	ip, r8, ip
90025146:	fb03 cc0e 	mla	ip, r3, lr, ip
9002514a:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
9002514e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
90025150:	fb01 cc0e 	mla	ip, r1, lr, ip
90025154:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
90025158:	9d0c      	ldr	r5, [sp, #48]	; 0x30
9002515a:	fb09 cc0e 	mla	ip, r9, lr, ip
9002515e:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
90025162:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
90025164:	fb08 f80e 	mul.w	r8, r8, lr
90025168:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
9002516c:	fb03 8202 	mla	r2, r3, r2, r8
90025170:	9b08      	ldr	r3, [sp, #32]
90025172:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
90025176:	f403 4a7f 	and.w	sl, r3, #65280	; 0xff00
9002517a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
9002517c:	fb01 220a 	mla	r2, r1, sl, r2
90025180:	f403 417f 	and.w	r1, r3, #65280	; 0xff00
90025184:	883b      	ldrh	r3, [r7, #0]
90025186:	fb09 2901 	mla	r9, r9, r1, r2
9002518a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
9002518c:	1219      	asrs	r1, r3, #8
9002518e:	4342      	muls	r2, r0
90025190:	ea4f 2919 	mov.w	r9, r9, lsr #8
90025194:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
90025198:	1c50      	adds	r0, r2, #1
9002519a:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
9002519e:	eb00 2012 	add.w	r0, r0, r2, lsr #8
900251a2:	ea4c 0c09 	orr.w	ip, ip, r9
900251a6:	ea6f 2010 	mvn.w	r0, r0, lsr #8
900251aa:	ea4f 421c 	mov.w	r2, ip, lsr #16
900251ae:	f3cc 2e07 	ubfx	lr, ip, #8, #8
900251b2:	fa5f fc8c 	uxtb.w	ip, ip
900251b6:	fb12 f205 	smulbb	r2, r2, r5
900251ba:	b2c0      	uxtb	r0, r0
900251bc:	fb1c fc05 	smulbb	ip, ip, r5
900251c0:	fb01 2100 	mla	r1, r1, r0, r2
900251c4:	10da      	asrs	r2, r3, #3
900251c6:	fb1e fe05 	smulbb	lr, lr, r5
900251ca:	00db      	lsls	r3, r3, #3
900251cc:	b289      	uxth	r1, r1
900251ce:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
900251d2:	b2db      	uxtb	r3, r3
900251d4:	fb02 e200 	mla	r2, r2, r0, lr
900251d8:	fb03 c300 	mla	r3, r3, r0, ip
900251dc:	b292      	uxth	r2, r2
900251de:	fa1f fc83 	uxth.w	ip, r3
900251e2:	1c4b      	adds	r3, r1, #1
900251e4:	eb03 2111 	add.w	r1, r3, r1, lsr #8
900251e8:	f10c 0301 	add.w	r3, ip, #1
900251ec:	eb03 231c 	add.w	r3, r3, ip, lsr #8
900251f0:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
900251f4:	f3c3 23c4 	ubfx	r3, r3, #11, #5
900251f8:	430b      	orrs	r3, r1
900251fa:	1c51      	adds	r1, r2, #1
900251fc:	eb01 2212 	add.w	r2, r1, r2, lsr #8
90025200:	0952      	lsrs	r2, r2, #5
90025202:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
90025206:	4313      	orrs	r3, r2
90025208:	803b      	strh	r3, [r7, #0]
9002520a:	9b29      	ldr	r3, [sp, #164]	; 0xa4
9002520c:	3702      	adds	r7, #2
9002520e:	441c      	add	r4, r3
90025210:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
90025212:	441e      	add	r6, r3
90025214:	9b18      	ldr	r3, [sp, #96]	; 0x60
90025216:	3b01      	subs	r3, #1
90025218:	9318      	str	r3, [sp, #96]	; 0x60
9002521a:	e698      	b.n	90024f4e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
9002521c:	9b29      	ldr	r3, [sp, #164]	; 0xa4
9002521e:	441c      	add	r4, r3
90025220:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
90025222:	441e      	add	r6, r3
90025224:	9b07      	ldr	r3, [sp, #28]
90025226:	3b01      	subs	r3, #1
90025228:	9307      	str	r3, [sp, #28]
9002522a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
9002522c:	3302      	adds	r3, #2
9002522e:	930a      	str	r3, [sp, #40]	; 0x28
90025230:	e66d      	b.n	90024f0e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
90025232:	d023      	beq.n	9002527c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c2>
90025234:	9b07      	ldr	r3, [sp, #28]
90025236:	9829      	ldr	r0, [sp, #164]	; 0xa4
90025238:	3b01      	subs	r3, #1
9002523a:	fb00 4003 	mla	r0, r0, r3, r4
9002523e:	1400      	asrs	r0, r0, #16
90025240:	f53f ae82 	bmi.w	90024f48 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
90025244:	3901      	subs	r1, #1
90025246:	4288      	cmp	r0, r1
90025248:	f6bf ae7e 	bge.w	90024f48 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
9002524c:	992a      	ldr	r1, [sp, #168]	; 0xa8
9002524e:	fb01 6303 	mla	r3, r1, r3, r6
90025252:	141b      	asrs	r3, r3, #16
90025254:	f53f ae78 	bmi.w	90024f48 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
90025258:	3a01      	subs	r2, #1
9002525a:	4293      	cmp	r3, r2
9002525c:	f6bf ae74 	bge.w	90024f48 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
90025260:	f8dd b01c 	ldr.w	fp, [sp, #28]
90025264:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
90025268:	f1bb 0f00 	cmp.w	fp, #0
9002526c:	dc6c      	bgt.n	90025348 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48e>
9002526e:	9b07      	ldr	r3, [sp, #28]
90025270:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
90025274:	9b0a      	ldr	r3, [sp, #40]	; 0x28
90025276:	eb03 0345 	add.w	r3, r3, r5, lsl #1
9002527a:	930a      	str	r3, [sp, #40]	; 0x28
9002527c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
9002527e:	2b00      	cmp	r3, #0
90025280:	f340 81b3 	ble.w	900255ea <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x730>
90025284:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
90025288:	9b26      	ldr	r3, [sp, #152]	; 0x98
9002528a:	ee30 0a04 	vadd.f32	s0, s0, s8
9002528e:	ee70 0aa4 	vadd.f32	s1, s1, s9
90025292:	eef0 6a62 	vmov.f32	s13, s5
90025296:	eec7 7a00 	vdiv.f32	s15, s14, s0
9002529a:	ee31 1a05 	vadd.f32	s2, s2, s10
9002529e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
900252a2:	ee16 4a90 	vmov	r4, s13
900252a6:	eef0 6a43 	vmov.f32	s13, s6
900252aa:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
900252ae:	ee16 6a90 	vmov	r6, s13
900252b2:	ee20 7aa7 	vmul.f32	s14, s1, s15
900252b6:	ee61 7a27 	vmul.f32	s15, s2, s15
900252ba:	ee77 2a62 	vsub.f32	s5, s14, s5
900252be:	ee37 3ac3 	vsub.f32	s6, s15, s6
900252c2:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
900252c6:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
900252ca:	ee12 2a90 	vmov	r2, s5
900252ce:	eef0 2a47 	vmov.f32	s5, s14
900252d2:	fb92 f3f3 	sdiv	r3, r2, r3
900252d6:	ee13 2a10 	vmov	r2, s6
900252da:	9329      	str	r3, [sp, #164]	; 0xa4
900252dc:	9b26      	ldr	r3, [sp, #152]	; 0x98
900252de:	eeb0 3a67 	vmov.f32	s6, s15
900252e2:	fb92 f3f3 	sdiv	r3, r2, r3
900252e6:	932a      	str	r3, [sp, #168]	; 0xa8
900252e8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
900252ea:	9a19      	ldr	r2, [sp, #100]	; 0x64
900252ec:	3b01      	subs	r3, #1
900252ee:	9317      	str	r3, [sp, #92]	; 0x5c
900252f0:	9b26      	ldr	r3, [sp, #152]	; 0x98
900252f2:	bf08      	it	eq
900252f4:	4613      	moveq	r3, r2
900252f6:	9307      	str	r3, [sp, #28]
900252f8:	e5fb      	b.n	90024ef2 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
900252fa:	2900      	cmp	r1, #0
900252fc:	f43f ae6b 	beq.w	90024fd6 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
90025300:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
90025304:	9308      	str	r3, [sp, #32]
90025306:	0e1b      	lsrs	r3, r3, #24
90025308:	9311      	str	r3, [sp, #68]	; 0x44
9002530a:	e664      	b.n	90024fd6 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
9002530c:	f112 0801 	adds.w	r8, r2, #1
90025310:	f53f af7b 	bmi.w	9002520a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
90025314:	4543      	cmp	r3, r8
90025316:	f6ff af78 	blt.w	9002520a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
9002531a:	f11c 0801 	adds.w	r8, ip, #1
9002531e:	f53f af74 	bmi.w	9002520a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
90025322:	45c6      	cmp	lr, r8
90025324:	f6ff af71 	blt.w	9002520a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
90025328:	9d1a      	ldr	r5, [sp, #104]	; 0x68
9002532a:	b21b      	sxth	r3, r3
9002532c:	9201      	str	r2, [sp, #4]
9002532e:	fa0f f28e 	sxth.w	r2, lr
90025332:	e9cd 1504 	strd	r1, r5, [sp, #16]
90025336:	e9cd c002 	strd	ip, r0, [sp, #8]
9002533a:	9200      	str	r2, [sp, #0]
9002533c:	4639      	mov	r1, r7
9002533e:	9a10      	ldr	r2, [sp, #64]	; 0x40
90025340:	981b      	ldr	r0, [sp, #108]	; 0x6c
90025342:	f7ff fc79 	bl	90024c38 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh>
90025346:	e760      	b.n	9002520a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
90025348:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
9002534a:	1427      	asrs	r7, r4, #16
9002534c:	9d10      	ldr	r5, [sp, #64]	; 0x40
9002534e:	f3c4 3203 	ubfx	r2, r4, #12, #4
90025352:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
90025356:	1433      	asrs	r3, r6, #16
90025358:	f3c6 3003 	ubfx	r0, r6, #12, #4
9002535c:	fb01 7303 	mla	r3, r1, r3, r7
90025360:	eb05 0783 	add.w	r7, r5, r3, lsl #2
90025364:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
90025368:	ea4f 6c13 	mov.w	ip, r3, lsr #24
9002536c:	2a00      	cmp	r2, #0
9002536e:	f000 8133 	beq.w	900255d8 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x71e>
90025372:	687d      	ldr	r5, [r7, #4]
90025374:	950e      	str	r5, [sp, #56]	; 0x38
90025376:	0e2d      	lsrs	r5, r5, #24
90025378:	9515      	str	r5, [sp, #84]	; 0x54
9002537a:	b178      	cbz	r0, 9002539c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e2>
9002537c:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
90025380:	3901      	subs	r1, #1
90025382:	0089      	lsls	r1, r1, #2
90025384:	3104      	adds	r1, #4
90025386:	eb07 0e01 	add.w	lr, r7, r1
9002538a:	5879      	ldr	r1, [r7, r1]
9002538c:	9109      	str	r1, [sp, #36]	; 0x24
9002538e:	0e09      	lsrs	r1, r1, #24
90025390:	9112      	str	r1, [sp, #72]	; 0x48
90025392:	f8de 1004 	ldr.w	r1, [lr, #4]
90025396:	910f      	str	r1, [sp, #60]	; 0x3c
90025398:	0e09      	lsrs	r1, r1, #24
9002539a:	9116      	str	r1, [sp, #88]	; 0x58
9002539c:	b292      	uxth	r2, r2
9002539e:	9915      	ldr	r1, [sp, #84]	; 0x54
900253a0:	b280      	uxth	r0, r0
900253a2:	9d12      	ldr	r5, [sp, #72]	; 0x48
900253a4:	fb02 f800 	mul.w	r8, r2, r0
900253a8:	0112      	lsls	r2, r2, #4
900253aa:	ebc8 1000 	rsb	r0, r8, r0, lsl #4
900253ae:	eba2 0e08 	sub.w	lr, r2, r8
900253b2:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
900253b6:	b280      	uxth	r0, r0
900253b8:	fa1f fe8e 	uxth.w	lr, lr
900253bc:	1a12      	subs	r2, r2, r0
900253be:	fb0e f101 	mul.w	r1, lr, r1
900253c2:	b292      	uxth	r2, r2
900253c4:	fb02 110c 	mla	r1, r2, ip, r1
900253c8:	fb00 1105 	mla	r1, r0, r5, r1
900253cc:	9d16      	ldr	r5, [sp, #88]	; 0x58
900253ce:	fb08 1105 	mla	r1, r8, r5, r1
900253d2:	f3c1 2107 	ubfx	r1, r1, #8, #8
900253d6:	2900      	cmp	r1, #0
900253d8:	f000 80f5 	beq.w	900255c6 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70c>
900253dc:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
900253e0:	d019      	beq.n	90025416 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x55c>
900253e2:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
900253e6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
900253ea:	fb0c fa0a 	mul.w	sl, ip, sl
900253ee:	fb0c fc03 	mul.w	ip, ip, r3
900253f2:	ea4f 231a 	mov.w	r3, sl, lsr #8
900253f6:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
900253fa:	f50c 7780 	add.w	r7, ip, #256	; 0x100
900253fe:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
90025402:	eb07 271c 	add.w	r7, r7, ip, lsr #8
90025406:	4453      	add	r3, sl
90025408:	0a3f      	lsrs	r7, r7, #8
9002540a:	0a1b      	lsrs	r3, r3, #8
9002540c:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
90025410:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
90025414:	433b      	orrs	r3, r7
90025416:	9d15      	ldr	r5, [sp, #84]	; 0x54
90025418:	2dff      	cmp	r5, #255	; 0xff
9002541a:	d020      	beq.n	9002545e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a4>
9002541c:	9d0e      	ldr	r5, [sp, #56]	; 0x38
9002541e:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
90025422:	9d15      	ldr	r5, [sp, #84]	; 0x54
90025424:	436f      	muls	r7, r5
90025426:	9d0e      	ldr	r5, [sp, #56]	; 0x38
90025428:	ea4f 2c17 	mov.w	ip, r7, lsr #8
9002542c:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
90025430:	9d15      	ldr	r5, [sp, #84]	; 0x54
90025432:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
90025436:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
9002543a:	fb05 fa0a 	mul.w	sl, r5, sl
9002543e:	44bc      	add	ip, r7
90025440:	f50a 7780 	add.w	r7, sl, #256	; 0x100
90025444:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
90025448:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
9002544c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
90025450:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
90025454:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
90025458:	ea4c 050a 	orr.w	r5, ip, sl
9002545c:	950e      	str	r5, [sp, #56]	; 0x38
9002545e:	9d12      	ldr	r5, [sp, #72]	; 0x48
90025460:	2dff      	cmp	r5, #255	; 0xff
90025462:	d020      	beq.n	900254a6 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5ec>
90025464:	9d09      	ldr	r5, [sp, #36]	; 0x24
90025466:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
9002546a:	9d12      	ldr	r5, [sp, #72]	; 0x48
9002546c:	436f      	muls	r7, r5
9002546e:	9d09      	ldr	r5, [sp, #36]	; 0x24
90025470:	ea4f 2c17 	mov.w	ip, r7, lsr #8
90025474:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
90025478:	9d12      	ldr	r5, [sp, #72]	; 0x48
9002547a:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
9002547e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
90025482:	fb05 fa0a 	mul.w	sl, r5, sl
90025486:	44bc      	add	ip, r7
90025488:	f50a 7780 	add.w	r7, sl, #256	; 0x100
9002548c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
90025490:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
90025494:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
90025498:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
9002549c:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
900254a0:	ea4c 050a 	orr.w	r5, ip, sl
900254a4:	9509      	str	r5, [sp, #36]	; 0x24
900254a6:	9d16      	ldr	r5, [sp, #88]	; 0x58
900254a8:	2dff      	cmp	r5, #255	; 0xff
900254aa:	d020      	beq.n	900254ee <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x634>
900254ac:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
900254ae:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
900254b2:	9d16      	ldr	r5, [sp, #88]	; 0x58
900254b4:	436f      	muls	r7, r5
900254b6:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
900254b8:	ea4f 2c17 	mov.w	ip, r7, lsr #8
900254bc:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
900254c0:	9d16      	ldr	r5, [sp, #88]	; 0x58
900254c2:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
900254c6:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
900254ca:	fb05 fa0a 	mul.w	sl, r5, sl
900254ce:	44bc      	add	ip, r7
900254d0:	f50a 7780 	add.w	r7, sl, #256	; 0x100
900254d4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
900254d8:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
900254dc:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
900254e0:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
900254e4:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
900254e8:	ea4c 050a 	orr.w	r5, ip, sl
900254ec:	950f      	str	r5, [sp, #60]	; 0x3c
900254ee:	9d0e      	ldr	r5, [sp, #56]	; 0x38
900254f0:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
900254f4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
900254f8:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
900254fc:	9d09      	ldr	r5, [sp, #36]	; 0x24
900254fe:	fb0e f707 	mul.w	r7, lr, r7
90025502:	fb02 770c 	mla	r7, r2, ip, r7
90025506:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
9002550a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
9002550c:	fb00 770c 	mla	r7, r0, ip, r7
90025510:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
90025514:	9d0e      	ldr	r5, [sp, #56]	; 0x38
90025516:	fb08 770c 	mla	r7, r8, ip, r7
9002551a:	f405 4c7f 	and.w	ip, r5, #65280	; 0xff00
9002551e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
90025520:	fb0e fe0c 	mul.w	lr, lr, ip
90025524:	0a3f      	lsrs	r7, r7, #8
90025526:	fb02 e303 	mla	r3, r2, r3, lr
9002552a:	9a09      	ldr	r2, [sp, #36]	; 0x24
9002552c:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
90025530:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
90025534:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
90025536:	fb00 330a 	mla	r3, r0, sl, r3
9002553a:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
9002553e:	f8b9 0000 	ldrh.w	r0, [r9]
90025542:	fb08 3c0c 	mla	ip, r8, ip, r3
90025546:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
90025548:	1202      	asrs	r2, r0, #8
9002554a:	4359      	muls	r1, r3
9002554c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
90025550:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
90025554:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
90025558:	1c4b      	adds	r3, r1, #1
9002555a:	ea47 070c 	orr.w	r7, r7, ip
9002555e:	eb03 2111 	add.w	r1, r3, r1, lsr #8
90025562:	0c3b      	lsrs	r3, r7, #16
90025564:	ea6f 2111 	mvn.w	r1, r1, lsr #8
90025568:	f3c7 2c07 	ubfx	ip, r7, #8, #8
9002556c:	b2ff      	uxtb	r7, r7
9002556e:	fb13 f305 	smulbb	r3, r3, r5
90025572:	b2c9      	uxtb	r1, r1
90025574:	fb17 f705 	smulbb	r7, r7, r5
90025578:	fb02 3201 	mla	r2, r2, r1, r3
9002557c:	10c3      	asrs	r3, r0, #3
9002557e:	fb1c fc05 	smulbb	ip, ip, r5
90025582:	00c0      	lsls	r0, r0, #3
90025584:	b292      	uxth	r2, r2
90025586:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
9002558a:	b2c0      	uxtb	r0, r0
9002558c:	fb03 c301 	mla	r3, r3, r1, ip
90025590:	fb00 7001 	mla	r0, r0, r1, r7
90025594:	1c51      	adds	r1, r2, #1
90025596:	b29b      	uxth	r3, r3
90025598:	b280      	uxth	r0, r0
9002559a:	eb01 2212 	add.w	r2, r1, r2, lsr #8
9002559e:	f100 0c01 	add.w	ip, r0, #1
900255a2:	f402 4278 	and.w	r2, r2, #63488	; 0xf800
900255a6:	eb0c 2c10 	add.w	ip, ip, r0, lsr #8
900255aa:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
900255ae:	ea4c 0202 	orr.w	r2, ip, r2
900255b2:	f103 0c01 	add.w	ip, r3, #1
900255b6:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
900255ba:	095b      	lsrs	r3, r3, #5
900255bc:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
900255c0:	431a      	orrs	r2, r3
900255c2:	f8a9 2000 	strh.w	r2, [r9]
900255c6:	9b29      	ldr	r3, [sp, #164]	; 0xa4
900255c8:	f109 0902 	add.w	r9, r9, #2
900255cc:	f10b 3bff 	add.w	fp, fp, #4294967295
900255d0:	441c      	add	r4, r3
900255d2:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
900255d4:	441e      	add	r6, r3
900255d6:	e647      	b.n	90025268 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ae>
900255d8:	2800      	cmp	r0, #0
900255da:	f43f aedf 	beq.w	9002539c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e2>
900255de:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
900255e2:	9109      	str	r1, [sp, #36]	; 0x24
900255e4:	0e09      	lsrs	r1, r1, #24
900255e6:	9112      	str	r1, [sp, #72]	; 0x48
900255e8:	e6d8      	b.n	9002539c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e2>
900255ea:	b01d      	add	sp, #116	; 0x74
900255ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

900255f0 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh>:
900255f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
900255f4:	b085      	sub	sp, #20
900255f6:	e9dd 740f 	ldrd	r7, r4, [sp, #60]	; 0x3c
900255fa:	9102      	str	r1, [sp, #8]
900255fc:	2c00      	cmp	r4, #0
900255fe:	fb04 7103 	mla	r1, r4, r3, r7
90025602:	f9bd e038 	ldrsh.w	lr, [sp, #56]	; 0x38
90025606:	f89d 6044 	ldrb.w	r6, [sp, #68]	; 0x44
9002560a:	eb02 0c81 	add.w	ip, r2, r1, lsl #2
9002560e:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
90025612:	f2c0 810c 	blt.w	9002582e <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x23e>
90025616:	45a6      	cmp	lr, r4
90025618:	f340 8109 	ble.w	9002582e <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x23e>
9002561c:	2f00      	cmp	r7, #0
9002561e:	f2c0 8104 	blt.w	9002582a <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x23a>
90025622:	42bb      	cmp	r3, r7
90025624:	f340 8101 	ble.w	9002582a <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x23a>
90025628:	f852 5021 	ldr.w	r5, [r2, r1, lsl #2]
9002562c:	1c7a      	adds	r2, r7, #1
9002562e:	f100 8101 	bmi.w	90025834 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x244>
90025632:	4293      	cmp	r3, r2
90025634:	f340 80fe 	ble.w	90025834 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x244>
90025638:	2e00      	cmp	r6, #0
9002563a:	f000 80fd 	beq.w	90025838 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x248>
9002563e:	f8dc 1004 	ldr.w	r1, [ip, #4]
90025642:	3401      	adds	r4, #1
90025644:	f100 80fc 	bmi.w	90025840 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x250>
90025648:	45a6      	cmp	lr, r4
9002564a:	f340 80f9 	ble.w	90025840 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x250>
9002564e:	2800      	cmp	r0, #0
90025650:	f000 80f9 	beq.w	90025846 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x256>
90025654:	2f00      	cmp	r7, #0
90025656:	eb0c 0283 	add.w	r2, ip, r3, lsl #2
9002565a:	f2c0 80ef 	blt.w	9002583c <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x24c>
9002565e:	42bb      	cmp	r3, r7
90025660:	f340 80ec 	ble.w	9002583c <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x24c>
90025664:	f85c 4023 	ldr.w	r4, [ip, r3, lsl #2]
90025668:	3701      	adds	r7, #1
9002566a:	f100 80ef 	bmi.w	9002584c <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x25c>
9002566e:	42bb      	cmp	r3, r7
90025670:	f340 80ec 	ble.w	9002584c <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x25c>
90025674:	2e00      	cmp	r6, #0
90025676:	f000 80eb 	beq.w	90025850 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x260>
9002567a:	6852      	ldr	r2, [r2, #4]
9002567c:	b2b6      	uxth	r6, r6
9002567e:	b280      	uxth	r0, r0
90025680:	ea4f 6a11 	mov.w	sl, r1, lsr #24
90025684:	fb00 fe06 	mul.w	lr, r0, r6
90025688:	0136      	lsls	r6, r6, #4
9002568a:	ea4f 6b15 	mov.w	fp, r5, lsr #24
9002568e:	ebce 1000 	rsb	r0, lr, r0, lsl #4
90025692:	eba6 070e 	sub.w	r7, r6, lr
90025696:	f5c6 7380 	rsb	r3, r6, #256	; 0x100
9002569a:	ea4f 6914 	mov.w	r9, r4, lsr #24
9002569e:	b280      	uxth	r0, r0
900256a0:	b2bf      	uxth	r7, r7
900256a2:	1a1b      	subs	r3, r3, r0
900256a4:	ea4f 6812 	mov.w	r8, r2, lsr #24
900256a8:	fb07 f60a 	mul.w	r6, r7, sl
900256ac:	b29b      	uxth	r3, r3
900256ae:	fb0b 6603 	mla	r6, fp, r3, r6
900256b2:	fb00 6609 	mla	r6, r0, r9, r6
900256b6:	fb0e 6608 	mla	r6, lr, r8, r6
900256ba:	f3c6 2607 	ubfx	r6, r6, #8, #8
900256be:	9600      	str	r6, [sp, #0]
900256c0:	2e00      	cmp	r6, #0
900256c2:	f000 80af 	beq.w	90025824 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x234>
900256c6:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
900256ca:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
900256ce:	9e02      	ldr	r6, [sp, #8]
900256d0:	fb0b fc0c 	mul.w	ip, fp, ip
900256d4:	fb0b f505 	mul.w	r5, fp, r5
900256d8:	8836      	ldrh	r6, [r6, #0]
900256da:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
900256de:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
900256e2:	9501      	str	r5, [sp, #4]
900256e4:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
900256e8:	44dc      	add	ip, fp
900256ea:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
900256ee:	f00c 15ff 	and.w	r5, ip, #16711935	; 0xff00ff
900256f2:	9503      	str	r5, [sp, #12]
900256f4:	9d01      	ldr	r5, [sp, #4]
900256f6:	f505 7c80 	add.w	ip, r5, #256	; 0x100
900256fa:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
900256fe:	f001 1cff 	and.w	ip, r1, #16711935	; 0xff00ff
90025702:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
90025706:	fb0a fc0c 	mul.w	ip, sl, ip
9002570a:	ea4f 2b15 	mov.w	fp, r5, lsr #8
9002570e:	fb0a fa01 	mul.w	sl, sl, r1
90025712:	ea4f 251c 	mov.w	r5, ip, lsr #8
90025716:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
9002571a:	f50a 7180 	add.w	r1, sl, #256	; 0x100
9002571e:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
90025722:	eb01 2a1a 	add.w	sl, r1, sl, lsr #8
90025726:	4465      	add	r5, ip
90025728:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
9002572c:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
90025730:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
90025734:	fb09 fc0c 	mul.w	ip, r9, ip
90025738:	0a2d      	lsrs	r5, r5, #8
9002573a:	fb09 f904 	mul.w	r9, r9, r4
9002573e:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
90025742:	ea4f 211c 	mov.w	r1, ip, lsr #8
90025746:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
9002574a:	f509 7480 	add.w	r4, r9, #256	; 0x100
9002574e:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
90025752:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
90025756:	437d      	muls	r5, r7
90025758:	eb04 2919 	add.w	r9, r4, r9, lsr #8
9002575c:	f002 14ff 	and.w	r4, r2, #16711935	; 0xff00ff
90025760:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
90025764:	4461      	add	r1, ip
90025766:	fb08 f404 	mul.w	r4, r8, r4
9002576a:	ea4f 2919 	mov.w	r9, r9, lsr #8
9002576e:	fb08 f802 	mul.w	r8, r8, r2
90025772:	0a09      	lsrs	r1, r1, #8
90025774:	0a22      	lsrs	r2, r4, #8
90025776:	f104 1401 	add.w	r4, r4, #65537	; 0x10001
9002577a:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
9002577e:	fb07 f70a 	mul.w	r7, r7, sl
90025782:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
90025786:	4414      	add	r4, r2
90025788:	f508 7280 	add.w	r2, r8, #256	; 0x100
9002578c:	0a24      	lsrs	r4, r4, #8
9002578e:	eb02 2818 	add.w	r8, r2, r8, lsr #8
90025792:	9a03      	ldr	r2, [sp, #12]
90025794:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
90025798:	fb02 5503 	mla	r5, r2, r3, r5
9002579c:	ea4f 2818 	mov.w	r8, r8, lsr #8
900257a0:	fb04 540e 	mla	r4, r4, lr, r5
900257a4:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
900257a8:	fb01 4100 	mla	r1, r1, r0, r4
900257ac:	0a09      	lsrs	r1, r1, #8
900257ae:	f001 14ff 	and.w	r4, r1, #16711935	; 0xff00ff
900257b2:	f40b 417f 	and.w	r1, fp, #65280	; 0xff00
900257b6:	fb03 7101 	mla	r1, r3, r1, r7
900257ba:	9b00      	ldr	r3, [sp, #0]
900257bc:	fb0e 1e08 	mla	lr, lr, r8, r1
900257c0:	f409 417f 	and.w	r1, r9, #65280	; 0xff00
900257c4:	43da      	mvns	r2, r3
900257c6:	1233      	asrs	r3, r6, #8
900257c8:	fb00 e101 	mla	r1, r0, r1, lr
900257cc:	10f0      	asrs	r0, r6, #3
900257ce:	b2d2      	uxtb	r2, r2
900257d0:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
900257d4:	0a09      	lsrs	r1, r1, #8
900257d6:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
900257da:	00f6      	lsls	r6, r6, #3
900257dc:	4353      	muls	r3, r2
900257de:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
900257e2:	4350      	muls	r0, r2
900257e4:	b2f6      	uxtb	r6, r6
900257e6:	4321      	orrs	r1, r4
900257e8:	4356      	muls	r6, r2
900257ea:	1c5a      	adds	r2, r3, #1
900257ec:	eb02 2213 	add.w	r2, r2, r3, lsr #8
900257f0:	0c0b      	lsrs	r3, r1, #16
900257f2:	eb03 2312 	add.w	r3, r3, r2, lsr #8
900257f6:	1c42      	adds	r2, r0, #1
900257f8:	eb02 2010 	add.w	r0, r2, r0, lsr #8
900257fc:	0a0a      	lsrs	r2, r1, #8
900257fe:	021b      	lsls	r3, r3, #8
90025800:	eb02 2210 	add.w	r2, r2, r0, lsr #8
90025804:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
90025808:	00d2      	lsls	r2, r2, #3
9002580a:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
9002580e:	4313      	orrs	r3, r2
90025810:	1c72      	adds	r2, r6, #1
90025812:	eb02 2616 	add.w	r6, r2, r6, lsr #8
90025816:	eb01 2116 	add.w	r1, r1, r6, lsr #8
9002581a:	f3c1 01c4 	ubfx	r1, r1, #3, #5
9002581e:	4319      	orrs	r1, r3
90025820:	9b02      	ldr	r3, [sp, #8]
90025822:	8019      	strh	r1, [r3, #0]
90025824:	b005      	add	sp, #20
90025826:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9002582a:	2500      	movs	r5, #0
9002582c:	e6fe      	b.n	9002562c <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x3c>
9002582e:	2100      	movs	r1, #0
90025830:	460d      	mov	r5, r1
90025832:	e706      	b.n	90025642 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x52>
90025834:	2100      	movs	r1, #0
90025836:	e704      	b.n	90025642 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x52>
90025838:	4631      	mov	r1, r6
9002583a:	e702      	b.n	90025642 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x52>
9002583c:	2400      	movs	r4, #0
9002583e:	e713      	b.n	90025668 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x78>
90025840:	2200      	movs	r2, #0
90025842:	4614      	mov	r4, r2
90025844:	e71a      	b.n	9002567c <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x8c>
90025846:	4602      	mov	r2, r0
90025848:	4604      	mov	r4, r0
9002584a:	e717      	b.n	9002567c <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x8c>
9002584c:	2200      	movs	r2, #0
9002584e:	e715      	b.n	9002567c <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x8c>
90025850:	4632      	mov	r2, r6
90025852:	e713      	b.n	9002567c <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x8c>

90025854 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
90025854:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90025858:	b09b      	sub	sp, #108	; 0x6c
9002585a:	9218      	str	r2, [sp, #96]	; 0x60
9002585c:	9a29      	ldr	r2, [sp, #164]	; 0xa4
9002585e:	9019      	str	r0, [sp, #100]	; 0x64
90025860:	9116      	str	r1, [sp, #88]	; 0x58
90025862:	6850      	ldr	r0, [r2, #4]
90025864:	9307      	str	r3, [sp, #28]
90025866:	6812      	ldr	r2, [r2, #0]
90025868:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	; 0xa8
9002586c:	e9dd 4625 	ldrd	r4, r6, [sp, #148]	; 0x94
90025870:	fb00 1303 	mla	r3, r0, r3, r1
90025874:	eb02 0343 	add.w	r3, r2, r3, lsl #1
90025878:	930a      	str	r3, [sp, #40]	; 0x28
9002587a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
9002587c:	681b      	ldr	r3, [r3, #0]
9002587e:	930f      	str	r3, [sp, #60]	; 0x3c
90025880:	9b16      	ldr	r3, [sp, #88]	; 0x58
90025882:	2b00      	cmp	r3, #0
90025884:	dc03      	bgt.n	9002588e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
90025886:	9b18      	ldr	r3, [sp, #96]	; 0x60
90025888:	2b00      	cmp	r3, #0
9002588a:	f340 8387 	ble.w	90025f9c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x748>
9002588e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
90025890:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
90025894:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
90025898:	1e48      	subs	r0, r1, #1
9002589a:	1e57      	subs	r7, r2, #1
9002589c:	9b07      	ldr	r3, [sp, #28]
9002589e:	2b00      	cmp	r3, #0
900258a0:	f340 8166 	ble.w	90025b70 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31c>
900258a4:	ea5f 4c24 	movs.w	ip, r4, asr #16
900258a8:	ea4f 4326 	mov.w	r3, r6, asr #16
900258ac:	d406      	bmi.n	900258bc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
900258ae:	4584      	cmp	ip, r0
900258b0:	da04      	bge.n	900258bc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
900258b2:	2b00      	cmp	r3, #0
900258b4:	db02      	blt.n	900258bc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
900258b6:	42bb      	cmp	r3, r7
900258b8:	f2c0 815b 	blt.w	90025b72 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
900258bc:	f11c 0c01 	adds.w	ip, ip, #1
900258c0:	f100 814b 	bmi.w	90025b5a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
900258c4:	4561      	cmp	r1, ip
900258c6:	f2c0 8148 	blt.w	90025b5a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
900258ca:	3301      	adds	r3, #1
900258cc:	f100 8145 	bmi.w	90025b5a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
900258d0:	429a      	cmp	r2, r3
900258d2:	f2c0 8142 	blt.w	90025b5a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
900258d6:	9b07      	ldr	r3, [sp, #28]
900258d8:	9f0a      	ldr	r7, [sp, #40]	; 0x28
900258da:	9317      	str	r3, [sp, #92]	; 0x5c
900258dc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
900258de:	2b00      	cmp	r3, #0
900258e0:	f340 8165 	ble.w	90025bae <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35a>
900258e4:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
900258e6:	ea4f 4c26 	mov.w	ip, r6, asr #16
900258ea:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
900258ec:	f3c4 3103 	ubfx	r1, r4, #12, #4
900258f0:	f8d2 e00c 	ldr.w	lr, [r2, #12]
900258f4:	1422      	asrs	r2, r4, #16
900258f6:	f3c6 3003 	ubfx	r0, r6, #12, #4
900258fa:	689b      	ldr	r3, [r3, #8]
900258fc:	f100 81d5 	bmi.w	90025caa <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x456>
90025900:	f103 38ff 	add.w	r8, r3, #4294967295
90025904:	4542      	cmp	r2, r8
90025906:	f280 81d0 	bge.w	90025caa <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x456>
9002590a:	f1bc 0f00 	cmp.w	ip, #0
9002590e:	f2c0 81cc 	blt.w	90025caa <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x456>
90025912:	f10e 38ff 	add.w	r8, lr, #4294967295
90025916:	45c4      	cmp	ip, r8
90025918:	f280 81c7 	bge.w	90025caa <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x456>
9002591c:	b21b      	sxth	r3, r3
9002591e:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
90025920:	fb0c 2203 	mla	r2, ip, r3, r2
90025924:	eb05 0882 	add.w	r8, r5, r2, lsl #2
90025928:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
9002592c:	ea4f 6e12 	mov.w	lr, r2, lsr #24
90025930:	2900      	cmp	r1, #0
90025932:	f000 8182 	beq.w	90025c3a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e6>
90025936:	f8d8 5004 	ldr.w	r5, [r8, #4]
9002593a:	950b      	str	r5, [sp, #44]	; 0x2c
9002593c:	0e2d      	lsrs	r5, r5, #24
9002593e:	9512      	str	r5, [sp, #72]	; 0x48
90025940:	b180      	cbz	r0, 90025964 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x110>
90025942:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
90025946:	3b01      	subs	r3, #1
90025948:	009b      	lsls	r3, r3, #2
9002594a:	3304      	adds	r3, #4
9002594c:	eb08 0c03 	add.w	ip, r8, r3
90025950:	f858 3003 	ldr.w	r3, [r8, r3]
90025954:	9308      	str	r3, [sp, #32]
90025956:	0e1b      	lsrs	r3, r3, #24
90025958:	9310      	str	r3, [sp, #64]	; 0x40
9002595a:	f8dc 3004 	ldr.w	r3, [ip, #4]
9002595e:	930c      	str	r3, [sp, #48]	; 0x30
90025960:	0e1b      	lsrs	r3, r3, #24
90025962:	9313      	str	r3, [sp, #76]	; 0x4c
90025964:	b289      	uxth	r1, r1
90025966:	9b12      	ldr	r3, [sp, #72]	; 0x48
90025968:	b280      	uxth	r0, r0
9002596a:	9d10      	ldr	r5, [sp, #64]	; 0x40
9002596c:	fb01 f900 	mul.w	r9, r1, r0
90025970:	0109      	lsls	r1, r1, #4
90025972:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
90025976:	eba1 0809 	sub.w	r8, r1, r9
9002597a:	f5c1 7180 	rsb	r1, r1, #256	; 0x100
9002597e:	b280      	uxth	r0, r0
90025980:	fa1f f888 	uxth.w	r8, r8
90025984:	1a09      	subs	r1, r1, r0
90025986:	fb08 f303 	mul.w	r3, r8, r3
9002598a:	b289      	uxth	r1, r1
9002598c:	fb01 330e 	mla	r3, r1, lr, r3
90025990:	fb00 3305 	mla	r3, r0, r5, r3
90025994:	9d13      	ldr	r5, [sp, #76]	; 0x4c
90025996:	fb09 3305 	mla	r3, r9, r5, r3
9002599a:	f3c3 2307 	ubfx	r3, r3, #8, #8
9002599e:	2b00      	cmp	r3, #0
900259a0:	f000 80d2 	beq.w	90025b48 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
900259a4:	f1be 0fff 	cmp.w	lr, #255	; 0xff
900259a8:	d01b      	beq.n	900259e2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18e>
900259aa:	f002 1aff 	and.w	sl, r2, #16711935	; 0xff00ff
900259ae:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
900259b2:	fb0e fa0a 	mul.w	sl, lr, sl
900259b6:	fb0e fe02 	mul.w	lr, lr, r2
900259ba:	ea4f 221a 	mov.w	r2, sl, lsr #8
900259be:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
900259c2:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
900259c6:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
900259ca:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
900259ce:	4452      	add	r2, sl
900259d0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
900259d4:	0a12      	lsrs	r2, r2, #8
900259d6:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
900259da:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
900259de:	ea42 020c 	orr.w	r2, r2, ip
900259e2:	9d12      	ldr	r5, [sp, #72]	; 0x48
900259e4:	2dff      	cmp	r5, #255	; 0xff
900259e6:	d021      	beq.n	90025a2c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d8>
900259e8:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
900259ea:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
900259ee:	9d12      	ldr	r5, [sp, #72]	; 0x48
900259f0:	fb05 fb0b 	mul.w	fp, r5, fp
900259f4:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
900259f6:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
900259fa:	9d12      	ldr	r5, [sp, #72]	; 0x48
900259fc:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
90025a00:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
90025a04:	fb05 fa0a 	mul.w	sl, r5, sl
90025a08:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
90025a0c:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
90025a10:	44de      	add	lr, fp
90025a12:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
90025a16:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
90025a1a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
90025a1e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
90025a22:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
90025a26:	ea4e 050a 	orr.w	r5, lr, sl
90025a2a:	950b      	str	r5, [sp, #44]	; 0x2c
90025a2c:	9d10      	ldr	r5, [sp, #64]	; 0x40
90025a2e:	2dff      	cmp	r5, #255	; 0xff
90025a30:	d021      	beq.n	90025a76 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x222>
90025a32:	9d08      	ldr	r5, [sp, #32]
90025a34:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
90025a38:	9d10      	ldr	r5, [sp, #64]	; 0x40
90025a3a:	fb05 fb0b 	mul.w	fp, r5, fp
90025a3e:	9d08      	ldr	r5, [sp, #32]
90025a40:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
90025a44:	9d10      	ldr	r5, [sp, #64]	; 0x40
90025a46:	fb05 fa0e 	mul.w	sl, r5, lr
90025a4a:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
90025a4e:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
90025a52:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
90025a56:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
90025a5a:	44de      	add	lr, fp
90025a5c:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
90025a60:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
90025a64:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
90025a68:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
90025a6c:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
90025a70:	ea4e 050a 	orr.w	r5, lr, sl
90025a74:	9508      	str	r5, [sp, #32]
90025a76:	9d13      	ldr	r5, [sp, #76]	; 0x4c
90025a78:	2dff      	cmp	r5, #255	; 0xff
90025a7a:	d021      	beq.n	90025ac0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26c>
90025a7c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
90025a7e:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
90025a82:	9d13      	ldr	r5, [sp, #76]	; 0x4c
90025a84:	fb05 fb0b 	mul.w	fp, r5, fp
90025a88:	9d0c      	ldr	r5, [sp, #48]	; 0x30
90025a8a:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
90025a8e:	9d13      	ldr	r5, [sp, #76]	; 0x4c
90025a90:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
90025a94:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
90025a98:	fb05 fa0a 	mul.w	sl, r5, sl
90025a9c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
90025aa0:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
90025aa4:	44de      	add	lr, fp
90025aa6:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
90025aaa:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
90025aae:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
90025ab2:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
90025ab6:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
90025aba:	ea4e 050a 	orr.w	r5, lr, sl
90025abe:	950c      	str	r5, [sp, #48]	; 0x30
90025ac0:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
90025ac2:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
90025ac6:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
90025aca:	2bff      	cmp	r3, #255	; 0xff
90025acc:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
90025ad0:	9d08      	ldr	r5, [sp, #32]
90025ad2:	fb08 fc0c 	mul.w	ip, r8, ip
90025ad6:	fb01 cc0e 	mla	ip, r1, lr, ip
90025ada:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
90025ade:	9d0c      	ldr	r5, [sp, #48]	; 0x30
90025ae0:	fb00 cc0e 	mla	ip, r0, lr, ip
90025ae4:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
90025ae8:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
90025aea:	fb09 cc0e 	mla	ip, r9, lr, ip
90025aee:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
90025af2:	fb08 f80e 	mul.w	r8, r8, lr
90025af6:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
90025afa:	fb01 8202 	mla	r2, r1, r2, r8
90025afe:	9908      	ldr	r1, [sp, #32]
90025b00:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
90025b04:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
90025b08:	990c      	ldr	r1, [sp, #48]	; 0x30
90025b0a:	fb00 220a 	mla	r2, r0, sl, r2
90025b0e:	f401 407f 	and.w	r0, r1, #65280	; 0xff00
90025b12:	fb09 2900 	mla	r9, r9, r0, r2
90025b16:	ea4f 2919 	mov.w	r9, r9, lsr #8
90025b1a:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
90025b1e:	ea4c 0c09 	orr.w	ip, ip, r9
90025b22:	ea4f 221c 	mov.w	r2, ip, lsr #8
90025b26:	f040 8091 	bne.w	90025c4c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f8>
90025b2a:	ea4f 135c 	mov.w	r3, ip, lsr #5
90025b2e:	f422 62ff 	bic.w	r2, r2, #2040	; 0x7f8
90025b32:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
90025b36:	f022 0207 	bic.w	r2, r2, #7
90025b3a:	431a      	orrs	r2, r3
90025b3c:	f3cc 0cc4 	ubfx	ip, ip, #3, #5
90025b40:	ea4c 0c02 	orr.w	ip, ip, r2
90025b44:	f8a7 c000 	strh.w	ip, [r7]
90025b48:	9b27      	ldr	r3, [sp, #156]	; 0x9c
90025b4a:	3702      	adds	r7, #2
90025b4c:	441c      	add	r4, r3
90025b4e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
90025b50:	441e      	add	r6, r3
90025b52:	9b17      	ldr	r3, [sp, #92]	; 0x5c
90025b54:	3b01      	subs	r3, #1
90025b56:	9317      	str	r3, [sp, #92]	; 0x5c
90025b58:	e6c0      	b.n	900258dc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x88>
90025b5a:	9b27      	ldr	r3, [sp, #156]	; 0x9c
90025b5c:	441c      	add	r4, r3
90025b5e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
90025b60:	441e      	add	r6, r3
90025b62:	9b07      	ldr	r3, [sp, #28]
90025b64:	3b01      	subs	r3, #1
90025b66:	9307      	str	r3, [sp, #28]
90025b68:	9b0a      	ldr	r3, [sp, #40]	; 0x28
90025b6a:	3302      	adds	r3, #2
90025b6c:	930a      	str	r3, [sp, #40]	; 0x28
90025b6e:	e695      	b.n	9002589c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
90025b70:	d024      	beq.n	90025bbc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x368>
90025b72:	9b07      	ldr	r3, [sp, #28]
90025b74:	9827      	ldr	r0, [sp, #156]	; 0x9c
90025b76:	3b01      	subs	r3, #1
90025b78:	fb00 4003 	mla	r0, r0, r3, r4
90025b7c:	1400      	asrs	r0, r0, #16
90025b7e:	f53f aeaa 	bmi.w	900258d6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
90025b82:	3901      	subs	r1, #1
90025b84:	4288      	cmp	r0, r1
90025b86:	f6bf aea6 	bge.w	900258d6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
90025b8a:	9928      	ldr	r1, [sp, #160]	; 0xa0
90025b8c:	fb01 6303 	mla	r3, r1, r3, r6
90025b90:	141b      	asrs	r3, r3, #16
90025b92:	f53f aea0 	bmi.w	900258d6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
90025b96:	3a01      	subs	r2, #1
90025b98:	4293      	cmp	r3, r2
90025b9a:	f6bf ae9c 	bge.w	900258d6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
90025b9e:	f8dd b01c 	ldr.w	fp, [sp, #28]
90025ba2:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
90025ba6:	f1bb 0f00 	cmp.w	fp, #0
90025baa:	f300 809a 	bgt.w	90025ce2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48e>
90025bae:	9b07      	ldr	r3, [sp, #28]
90025bb0:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
90025bb4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
90025bb6:	eb03 0345 	add.w	r3, r3, r5, lsl #1
90025bba:	930a      	str	r3, [sp, #40]	; 0x28
90025bbc:	9b16      	ldr	r3, [sp, #88]	; 0x58
90025bbe:	2b00      	cmp	r3, #0
90025bc0:	f340 81ec 	ble.w	90025f9c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x748>
90025bc4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
90025bc8:	9b24      	ldr	r3, [sp, #144]	; 0x90
90025bca:	ee30 0a04 	vadd.f32	s0, s0, s8
90025bce:	ee70 0aa4 	vadd.f32	s1, s1, s9
90025bd2:	eef0 6a62 	vmov.f32	s13, s5
90025bd6:	eec7 7a00 	vdiv.f32	s15, s14, s0
90025bda:	ee31 1a05 	vadd.f32	s2, s2, s10
90025bde:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
90025be2:	ee16 4a90 	vmov	r4, s13
90025be6:	eef0 6a43 	vmov.f32	s13, s6
90025bea:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
90025bee:	ee16 6a90 	vmov	r6, s13
90025bf2:	ee20 7aa7 	vmul.f32	s14, s1, s15
90025bf6:	ee61 7a27 	vmul.f32	s15, s2, s15
90025bfa:	ee77 2a62 	vsub.f32	s5, s14, s5
90025bfe:	ee37 3ac3 	vsub.f32	s6, s15, s6
90025c02:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
90025c06:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
90025c0a:	ee12 2a90 	vmov	r2, s5
90025c0e:	eef0 2a47 	vmov.f32	s5, s14
90025c12:	fb92 f3f3 	sdiv	r3, r2, r3
90025c16:	ee13 2a10 	vmov	r2, s6
90025c1a:	9327      	str	r3, [sp, #156]	; 0x9c
90025c1c:	9b24      	ldr	r3, [sp, #144]	; 0x90
90025c1e:	eeb0 3a67 	vmov.f32	s6, s15
90025c22:	fb92 f3f3 	sdiv	r3, r2, r3
90025c26:	9328      	str	r3, [sp, #160]	; 0xa0
90025c28:	9b16      	ldr	r3, [sp, #88]	; 0x58
90025c2a:	9a18      	ldr	r2, [sp, #96]	; 0x60
90025c2c:	3b01      	subs	r3, #1
90025c2e:	9316      	str	r3, [sp, #88]	; 0x58
90025c30:	9b24      	ldr	r3, [sp, #144]	; 0x90
90025c32:	bf08      	it	eq
90025c34:	4613      	moveq	r3, r2
90025c36:	9307      	str	r3, [sp, #28]
90025c38:	e622      	b.n	90025880 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c>
90025c3a:	2800      	cmp	r0, #0
90025c3c:	f43f ae92 	beq.w	90025964 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x110>
90025c40:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
90025c44:	9308      	str	r3, [sp, #32]
90025c46:	0e1b      	lsrs	r3, r3, #24
90025c48:	9310      	str	r3, [sp, #64]	; 0x40
90025c4a:	e68b      	b.n	90025964 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x110>
90025c4c:	8839      	ldrh	r1, [r7, #0]
90025c4e:	43db      	mvns	r3, r3
90025c50:	4dd4      	ldr	r5, [pc, #848]	; (90025fa4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x750>)
90025c52:	ea4f 2e21 	mov.w	lr, r1, asr #8
90025c56:	fa5f f883 	uxtb.w	r8, r3
90025c5a:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
90025c5e:	10c8      	asrs	r0, r1, #3
90025c60:	00cb      	lsls	r3, r1, #3
90025c62:	fb0e fe08 	mul.w	lr, lr, r8
90025c66:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
90025c6a:	b2db      	uxtb	r3, r3
90025c6c:	f10e 0101 	add.w	r1, lr, #1
90025c70:	fb00 f008 	mul.w	r0, r0, r8
90025c74:	fb03 f308 	mul.w	r3, r3, r8
90025c78:	eb01 2e1e 	add.w	lr, r1, lr, lsr #8
90025c7c:	ea4f 411c 	mov.w	r1, ip, lsr #16
90025c80:	eb01 211e 	add.w	r1, r1, lr, lsr #8
90025c84:	f100 0e01 	add.w	lr, r0, #1
90025c88:	eb0e 2010 	add.w	r0, lr, r0, lsr #8
90025c8c:	b2c9      	uxtb	r1, r1
90025c8e:	eb02 2210 	add.w	r2, r2, r0, lsr #8
90025c92:	ea05 2101 	and.w	r1, r5, r1, lsl #8
90025c96:	00d2      	lsls	r2, r2, #3
90025c98:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
90025c9c:	430a      	orrs	r2, r1
90025c9e:	1c59      	adds	r1, r3, #1
90025ca0:	eb01 2313 	add.w	r3, r1, r3, lsr #8
90025ca4:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
90025ca8:	e748      	b.n	90025b3c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e8>
90025caa:	f112 0801 	adds.w	r8, r2, #1
90025cae:	f53f af4b 	bmi.w	90025b48 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
90025cb2:	4543      	cmp	r3, r8
90025cb4:	f6ff af48 	blt.w	90025b48 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
90025cb8:	f11c 0801 	adds.w	r8, ip, #1
90025cbc:	f53f af44 	bmi.w	90025b48 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
90025cc0:	45c6      	cmp	lr, r8
90025cc2:	f6ff af41 	blt.w	90025b48 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
90025cc6:	b21b      	sxth	r3, r3
90025cc8:	e9cd 2c01 	strd	r2, ip, [sp, #4]
90025ccc:	fa0f f28e 	sxth.w	r2, lr
90025cd0:	e9cd 1003 	strd	r1, r0, [sp, #12]
90025cd4:	9200      	str	r2, [sp, #0]
90025cd6:	4639      	mov	r1, r7
90025cd8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
90025cda:	9819      	ldr	r0, [sp, #100]	; 0x64
90025cdc:	f7ff fc88 	bl	900255f0 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh>
90025ce0:	e732      	b.n	90025b48 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
90025ce2:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
90025ce4:	1421      	asrs	r1, r4, #16
90025ce6:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
90025ce8:	f3c4 3203 	ubfx	r2, r4, #12, #4
90025cec:	f9b3 7008 	ldrsh.w	r7, [r3, #8]
90025cf0:	1433      	asrs	r3, r6, #16
90025cf2:	f3c6 3003 	ubfx	r0, r6, #12, #4
90025cf6:	fb07 1303 	mla	r3, r7, r3, r1
90025cfa:	990f      	ldr	r1, [sp, #60]	; 0x3c
90025cfc:	eb01 0183 	add.w	r1, r1, r3, lsl #2
90025d00:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
90025d04:	ea4f 6c13 	mov.w	ip, r3, lsr #24
90025d08:	2a00      	cmp	r2, #0
90025d0a:	f000 8108 	beq.w	90025f1e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ca>
90025d0e:	684d      	ldr	r5, [r1, #4]
90025d10:	950d      	str	r5, [sp, #52]	; 0x34
90025d12:	0e2d      	lsrs	r5, r5, #24
90025d14:	9514      	str	r5, [sp, #80]	; 0x50
90025d16:	b178      	cbz	r0, 90025d38 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
90025d18:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
90025d1c:	3f01      	subs	r7, #1
90025d1e:	00bf      	lsls	r7, r7, #2
90025d20:	3704      	adds	r7, #4
90025d22:	eb01 0e07 	add.w	lr, r1, r7
90025d26:	59c9      	ldr	r1, [r1, r7]
90025d28:	9109      	str	r1, [sp, #36]	; 0x24
90025d2a:	0e09      	lsrs	r1, r1, #24
90025d2c:	9111      	str	r1, [sp, #68]	; 0x44
90025d2e:	f8de 1004 	ldr.w	r1, [lr, #4]
90025d32:	910e      	str	r1, [sp, #56]	; 0x38
90025d34:	0e09      	lsrs	r1, r1, #24
90025d36:	9115      	str	r1, [sp, #84]	; 0x54
90025d38:	b292      	uxth	r2, r2
90025d3a:	9d11      	ldr	r5, [sp, #68]	; 0x44
90025d3c:	b280      	uxth	r0, r0
90025d3e:	fb02 f900 	mul.w	r9, r2, r0
90025d42:	0112      	lsls	r2, r2, #4
90025d44:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
90025d48:	eba2 0e09 	sub.w	lr, r2, r9
90025d4c:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
90025d50:	9a14      	ldr	r2, [sp, #80]	; 0x50
90025d52:	b280      	uxth	r0, r0
90025d54:	fa1f fe8e 	uxth.w	lr, lr
90025d58:	1a09      	subs	r1, r1, r0
90025d5a:	fb0e f202 	mul.w	r2, lr, r2
90025d5e:	b289      	uxth	r1, r1
90025d60:	fb01 220c 	mla	r2, r1, ip, r2
90025d64:	fb00 2205 	mla	r2, r0, r5, r2
90025d68:	9d15      	ldr	r5, [sp, #84]	; 0x54
90025d6a:	fb09 2205 	mla	r2, r9, r5, r2
90025d6e:	f3c2 2207 	ubfx	r2, r2, #8, #8
90025d72:	2a00      	cmp	r2, #0
90025d74:	f000 80ca 	beq.w	90025f0c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6b8>
90025d78:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
90025d7c:	d019      	beq.n	90025db2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x55e>
90025d7e:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
90025d82:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
90025d86:	fb0c fa0a 	mul.w	sl, ip, sl
90025d8a:	fb0c fc03 	mul.w	ip, ip, r3
90025d8e:	ea4f 231a 	mov.w	r3, sl, lsr #8
90025d92:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
90025d96:	f50c 7780 	add.w	r7, ip, #256	; 0x100
90025d9a:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
90025d9e:	eb07 271c 	add.w	r7, r7, ip, lsr #8
90025da2:	4453      	add	r3, sl
90025da4:	0a3f      	lsrs	r7, r7, #8
90025da6:	0a1b      	lsrs	r3, r3, #8
90025da8:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
90025dac:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
90025db0:	433b      	orrs	r3, r7
90025db2:	9d14      	ldr	r5, [sp, #80]	; 0x50
90025db4:	2dff      	cmp	r5, #255	; 0xff
90025db6:	d020      	beq.n	90025dfa <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a6>
90025db8:	9d0d      	ldr	r5, [sp, #52]	; 0x34
90025dba:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
90025dbe:	9d14      	ldr	r5, [sp, #80]	; 0x50
90025dc0:	436f      	muls	r7, r5
90025dc2:	9d0d      	ldr	r5, [sp, #52]	; 0x34
90025dc4:	ea4f 2c17 	mov.w	ip, r7, lsr #8
90025dc8:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
90025dcc:	9d14      	ldr	r5, [sp, #80]	; 0x50
90025dce:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
90025dd2:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
90025dd6:	fb05 fa0a 	mul.w	sl, r5, sl
90025dda:	44bc      	add	ip, r7
90025ddc:	f50a 7780 	add.w	r7, sl, #256	; 0x100
90025de0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
90025de4:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
90025de8:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
90025dec:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
90025df0:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
90025df4:	ea4c 050a 	orr.w	r5, ip, sl
90025df8:	950d      	str	r5, [sp, #52]	; 0x34
90025dfa:	9d11      	ldr	r5, [sp, #68]	; 0x44
90025dfc:	2dff      	cmp	r5, #255	; 0xff
90025dfe:	d020      	beq.n	90025e42 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5ee>
90025e00:	9d09      	ldr	r5, [sp, #36]	; 0x24
90025e02:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
90025e06:	9d11      	ldr	r5, [sp, #68]	; 0x44
90025e08:	436f      	muls	r7, r5
90025e0a:	9d09      	ldr	r5, [sp, #36]	; 0x24
90025e0c:	f405 4c7f 	and.w	ip, r5, #65280	; 0xff00
90025e10:	9d11      	ldr	r5, [sp, #68]	; 0x44
90025e12:	fb05 fa0c 	mul.w	sl, r5, ip
90025e16:	ea4f 2c17 	mov.w	ip, r7, lsr #8
90025e1a:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
90025e1e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
90025e22:	44bc      	add	ip, r7
90025e24:	f50a 7780 	add.w	r7, sl, #256	; 0x100
90025e28:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
90025e2c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
90025e30:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
90025e34:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
90025e38:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
90025e3c:	ea4c 050a 	orr.w	r5, ip, sl
90025e40:	9509      	str	r5, [sp, #36]	; 0x24
90025e42:	9d15      	ldr	r5, [sp, #84]	; 0x54
90025e44:	2dff      	cmp	r5, #255	; 0xff
90025e46:	d020      	beq.n	90025e8a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x636>
90025e48:	9d0e      	ldr	r5, [sp, #56]	; 0x38
90025e4a:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
90025e4e:	9d15      	ldr	r5, [sp, #84]	; 0x54
90025e50:	436f      	muls	r7, r5
90025e52:	9d0e      	ldr	r5, [sp, #56]	; 0x38
90025e54:	ea4f 2c17 	mov.w	ip, r7, lsr #8
90025e58:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
90025e5c:	9d15      	ldr	r5, [sp, #84]	; 0x54
90025e5e:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
90025e62:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
90025e66:	fb05 fa0a 	mul.w	sl, r5, sl
90025e6a:	44bc      	add	ip, r7
90025e6c:	f50a 7780 	add.w	r7, sl, #256	; 0x100
90025e70:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
90025e74:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
90025e78:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
90025e7c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
90025e80:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
90025e84:	ea4c 050a 	orr.w	r5, ip, sl
90025e88:	950e      	str	r5, [sp, #56]	; 0x38
90025e8a:	9d0d      	ldr	r5, [sp, #52]	; 0x34
90025e8c:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
90025e90:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
90025e94:	2aff      	cmp	r2, #255	; 0xff
90025e96:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
90025e9a:	9d09      	ldr	r5, [sp, #36]	; 0x24
90025e9c:	fb0e f707 	mul.w	r7, lr, r7
90025ea0:	fb01 770c 	mla	r7, r1, ip, r7
90025ea4:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
90025ea8:	9d0e      	ldr	r5, [sp, #56]	; 0x38
90025eaa:	fb00 770c 	mla	r7, r0, ip, r7
90025eae:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
90025eb2:	9d0d      	ldr	r5, [sp, #52]	; 0x34
90025eb4:	fb09 770c 	mla	r7, r9, ip, r7
90025eb8:	f405 4c7f 	and.w	ip, r5, #65280	; 0xff00
90025ebc:	fb0e fe0c 	mul.w	lr, lr, ip
90025ec0:	ea4f 2717 	mov.w	r7, r7, lsr #8
90025ec4:	fb01 e303 	mla	r3, r1, r3, lr
90025ec8:	9909      	ldr	r1, [sp, #36]	; 0x24
90025eca:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
90025ece:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
90025ed2:	990e      	ldr	r1, [sp, #56]	; 0x38
90025ed4:	fb00 330a 	mla	r3, r0, sl, r3
90025ed8:	f401 4c7f 	and.w	ip, r1, #65280	; 0xff00
90025edc:	fb09 3c0c 	mla	ip, r9, ip, r3
90025ee0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
90025ee4:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
90025ee8:	ea47 070c 	orr.w	r7, r7, ip
90025eec:	ea4f 2317 	mov.w	r3, r7, lsr #8
90025ef0:	d11e      	bne.n	90025f30 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6dc>
90025ef2:	097a      	lsrs	r2, r7, #5
90025ef4:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
90025ef8:	f3c7 07c4 	ubfx	r7, r7, #3, #5
90025efc:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
90025f00:	f023 0307 	bic.w	r3, r3, #7
90025f04:	4313      	orrs	r3, r2
90025f06:	431f      	orrs	r7, r3
90025f08:	f8a8 7000 	strh.w	r7, [r8]
90025f0c:	9b27      	ldr	r3, [sp, #156]	; 0x9c
90025f0e:	f108 0802 	add.w	r8, r8, #2
90025f12:	f10b 3bff 	add.w	fp, fp, #4294967295
90025f16:	441c      	add	r4, r3
90025f18:	9b28      	ldr	r3, [sp, #160]	; 0xa0
90025f1a:	441e      	add	r6, r3
90025f1c:	e643      	b.n	90025ba6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x352>
90025f1e:	2800      	cmp	r0, #0
90025f20:	f43f af0a 	beq.w	90025d38 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
90025f24:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
90025f28:	9109      	str	r1, [sp, #36]	; 0x24
90025f2a:	0e09      	lsrs	r1, r1, #24
90025f2c:	9111      	str	r1, [sp, #68]	; 0x44
90025f2e:	e703      	b.n	90025d38 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
90025f30:	f8b8 1000 	ldrh.w	r1, [r8]
90025f34:	43d2      	mvns	r2, r2
90025f36:	ea4f 2c21 	mov.w	ip, r1, asr #8
90025f3a:	fa5f fe82 	uxtb.w	lr, r2
90025f3e:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
90025f42:	10c8      	asrs	r0, r1, #3
90025f44:	00ca      	lsls	r2, r1, #3
90025f46:	fb0c fc0e 	mul.w	ip, ip, lr
90025f4a:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
90025f4e:	b2d2      	uxtb	r2, r2
90025f50:	f10c 0101 	add.w	r1, ip, #1
90025f54:	fb00 f00e 	mul.w	r0, r0, lr
90025f58:	fb02 f20e 	mul.w	r2, r2, lr
90025f5c:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
90025f60:	0c39      	lsrs	r1, r7, #16
90025f62:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
90025f66:	490f      	ldr	r1, [pc, #60]	; (90025fa4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x750>)
90025f68:	fa5f fc8c 	uxtb.w	ip, ip
90025f6c:	ea01 2c0c 	and.w	ip, r1, ip, lsl #8
90025f70:	1c41      	adds	r1, r0, #1
90025f72:	eb01 2010 	add.w	r0, r1, r0, lsr #8
90025f76:	1c51      	adds	r1, r2, #1
90025f78:	eb03 2010 	add.w	r0, r3, r0, lsr #8
90025f7c:	eb01 2212 	add.w	r2, r1, r2, lsr #8
90025f80:	00c0      	lsls	r0, r0, #3
90025f82:	eb07 2712 	add.w	r7, r7, r2, lsr #8
90025f86:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
90025f8a:	f3c7 07c4 	ubfx	r7, r7, #3, #5
90025f8e:	ea4c 0c00 	orr.w	ip, ip, r0
90025f92:	ea47 0c0c 	orr.w	ip, r7, ip
90025f96:	f8a8 c000 	strh.w	ip, [r8]
90025f9a:	e7b7      	b.n	90025f0c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6b8>
90025f9c:	b01b      	add	sp, #108	; 0x6c
90025f9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90025fa2:	bf00      	nop
90025fa4:	fffff800 	.word	0xfffff800

90025fa8 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh>:
90025fa8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
90025fac:	e9dd 050a 	ldrd	r0, r5, [sp, #40]	; 0x28
90025fb0:	f9bd 8020 	ldrsh.w	r8, [sp, #32]
90025fb4:	2d00      	cmp	r5, #0
90025fb6:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
90025fba:	f89d 7030 	ldrb.w	r7, [sp, #48]	; 0x30
90025fbe:	fb05 0e03 	mla	lr, r5, r3, r0
90025fc2:	f89d c034 	ldrb.w	ip, [sp, #52]	; 0x34
90025fc6:	f2c0 808c 	blt.w	900260e2 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x13a>
90025fca:	45a9      	cmp	r9, r5
90025fcc:	f340 8089 	ble.w	900260e2 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x13a>
90025fd0:	2800      	cmp	r0, #0
90025fd2:	f2c0 8084 	blt.w	900260de <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x136>
90025fd6:	4580      	cmp	r8, r0
90025fd8:	f340 8081 	ble.w	900260de <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x136>
90025fdc:	ea4f 045e 	mov.w	r4, lr, lsr #1
90025fe0:	f01e 0f01 	tst.w	lr, #1
90025fe4:	5d16      	ldrb	r6, [r2, r4]
90025fe6:	bf0c      	ite	eq
90025fe8:	f006 060f 	andeq.w	r6, r6, #15
90025fec:	1136      	asrne	r6, r6, #4
90025fee:	eb06 1606 	add.w	r6, r6, r6, lsl #4
90025ff2:	b2f6      	uxtb	r6, r6
90025ff4:	1c44      	adds	r4, r0, #1
90025ff6:	d477      	bmi.n	900260e8 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x140>
90025ff8:	45a0      	cmp	r8, r4
90025ffa:	dd75      	ble.n	900260e8 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x140>
90025ffc:	2f00      	cmp	r7, #0
90025ffe:	d075      	beq.n	900260ec <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x144>
90026000:	f10e 0a01 	add.w	sl, lr, #1
90026004:	ea4f 045a 	mov.w	r4, sl, lsr #1
90026008:	f01a 0f01 	tst.w	sl, #1
9002600c:	5d14      	ldrb	r4, [r2, r4]
9002600e:	bf0c      	ite	eq
90026010:	f004 040f 	andeq.w	r4, r4, #15
90026014:	1124      	asrne	r4, r4, #4
90026016:	eb04 1404 	add.w	r4, r4, r4, lsl #4
9002601a:	b2e4      	uxtb	r4, r4
9002601c:	3501      	adds	r5, #1
9002601e:	d469      	bmi.n	900260f4 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x14c>
90026020:	45a9      	cmp	r9, r5
90026022:	dd67      	ble.n	900260f4 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x14c>
90026024:	f1bc 0f00 	cmp.w	ip, #0
90026028:	d067      	beq.n	900260fa <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x152>
9002602a:	2800      	cmp	r0, #0
9002602c:	db60      	blt.n	900260f0 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x148>
9002602e:	4580      	cmp	r8, r0
90026030:	dd5e      	ble.n	900260f0 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x148>
90026032:	eb03 090e 	add.w	r9, r3, lr
90026036:	ea4f 0559 	mov.w	r5, r9, lsr #1
9002603a:	f019 0f01 	tst.w	r9, #1
9002603e:	5d55      	ldrb	r5, [r2, r5]
90026040:	bf0c      	ite	eq
90026042:	f005 050f 	andeq.w	r5, r5, #15
90026046:	112d      	asrne	r5, r5, #4
90026048:	eb05 1505 	add.w	r5, r5, r5, lsl #4
9002604c:	b2ed      	uxtb	r5, r5
9002604e:	3001      	adds	r0, #1
90026050:	d456      	bmi.n	90026100 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x158>
90026052:	4580      	cmp	r8, r0
90026054:	dd54      	ble.n	90026100 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x158>
90026056:	2f00      	cmp	r7, #0
90026058:	d054      	beq.n	90026104 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x15c>
9002605a:	3301      	adds	r3, #1
9002605c:	449e      	add	lr, r3
9002605e:	ea4f 035e 	mov.w	r3, lr, lsr #1
90026062:	f01e 0f01 	tst.w	lr, #1
90026066:	5cd0      	ldrb	r0, [r2, r3]
90026068:	bf0c      	ite	eq
9002606a:	f000 000f 	andeq.w	r0, r0, #15
9002606e:	1100      	asrne	r0, r0, #4
90026070:	eb00 1000 	add.w	r0, r0, r0, lsl #4
90026074:	b2c3      	uxtb	r3, r0
90026076:	b2ba      	uxth	r2, r7
90026078:	fa1f fc8c 	uxth.w	ip, ip
9002607c:	fb02 f00c 	mul.w	r0, r2, ip
90026080:	0112      	lsls	r2, r2, #4
90026082:	ebc0 1c0c 	rsb	ip, r0, ip, lsl #4
90026086:	f5c2 7780 	rsb	r7, r2, #256	; 0x100
9002608a:	1a12      	subs	r2, r2, r0
9002608c:	fa1f fc8c 	uxth.w	ip, ip
90026090:	b292      	uxth	r2, r2
90026092:	eba7 070c 	sub.w	r7, r7, ip
90026096:	4362      	muls	r2, r4
90026098:	b2bf      	uxth	r7, r7
9002609a:	fb06 2207 	mla	r2, r6, r7, r2
9002609e:	fb0c 2505 	mla	r5, ip, r5, r2
900260a2:	fb00 5303 	mla	r3, r0, r3, r5
900260a6:	f3c3 2307 	ubfx	r3, r3, #8, #8
900260aa:	b1b3      	cbz	r3, 900260da <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x132>
900260ac:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
900260b0:	435a      	muls	r2, r3
900260b2:	1c53      	adds	r3, r2, #1
900260b4:	eb03 2312 	add.w	r3, r3, r2, lsr #8
900260b8:	4a2d      	ldr	r2, [pc, #180]	; (90026170 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1c8>)
900260ba:	121b      	asrs	r3, r3, #8
900260bc:	6812      	ldr	r2, [r2, #0]
900260be:	2bff      	cmp	r3, #255	; 0xff
900260c0:	ea4f 2612 	mov.w	r6, r2, lsr #8
900260c4:	d120      	bne.n	90026108 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x160>
900260c6:	0950      	lsrs	r0, r2, #5
900260c8:	4b2a      	ldr	r3, [pc, #168]	; (90026174 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1cc>)
900260ca:	f3c2 02c4 	ubfx	r2, r2, #3, #5
900260ce:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
900260d2:	4033      	ands	r3, r6
900260d4:	4318      	orrs	r0, r3
900260d6:	4302      	orrs	r2, r0
900260d8:	800a      	strh	r2, [r1, #0]
900260da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
900260de:	2600      	movs	r6, #0
900260e0:	e788      	b.n	90025ff4 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x4c>
900260e2:	2400      	movs	r4, #0
900260e4:	4626      	mov	r6, r4
900260e6:	e799      	b.n	9002601c <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x74>
900260e8:	2400      	movs	r4, #0
900260ea:	e797      	b.n	9002601c <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x74>
900260ec:	463c      	mov	r4, r7
900260ee:	e795      	b.n	9002601c <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x74>
900260f0:	2500      	movs	r5, #0
900260f2:	e7ac      	b.n	9002604e <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xa6>
900260f4:	2300      	movs	r3, #0
900260f6:	461d      	mov	r5, r3
900260f8:	e7bd      	b.n	90026076 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xce>
900260fa:	4663      	mov	r3, ip
900260fc:	4665      	mov	r5, ip
900260fe:	e7ba      	b.n	90026076 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xce>
90026100:	2300      	movs	r3, #0
90026102:	e7b8      	b.n	90026076 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xce>
90026104:	463b      	mov	r3, r7
90026106:	e7b6      	b.n	90026076 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xce>
90026108:	880d      	ldrh	r5, [r1, #0]
9002610a:	b29f      	uxth	r7, r3
9002610c:	f3c2 4007 	ubfx	r0, r2, #16, #8
90026110:	43db      	mvns	r3, r3
90026112:	122c      	asrs	r4, r5, #8
90026114:	fb10 f007 	smulbb	r0, r0, r7
90026118:	b2db      	uxtb	r3, r3
9002611a:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
9002611e:	b2f6      	uxtb	r6, r6
90026120:	b2d2      	uxtb	r2, r2
90026122:	fb04 0403 	mla	r4, r4, r3, r0
90026126:	10e8      	asrs	r0, r5, #3
90026128:	fb12 f207 	smulbb	r2, r2, r7
9002612c:	00ed      	lsls	r5, r5, #3
9002612e:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
90026132:	b2a4      	uxth	r4, r4
90026134:	fb16 f607 	smulbb	r6, r6, r7
90026138:	b2ed      	uxtb	r5, r5
9002613a:	fb00 6603 	mla	r6, r0, r3, r6
9002613e:	fb05 2303 	mla	r3, r5, r3, r2
90026142:	b2b0      	uxth	r0, r6
90026144:	b29a      	uxth	r2, r3
90026146:	1c63      	adds	r3, r4, #1
90026148:	eb03 2414 	add.w	r4, r3, r4, lsr #8
9002614c:	1c53      	adds	r3, r2, #1
9002614e:	eb03 2312 	add.w	r3, r3, r2, lsr #8
90026152:	1c42      	adds	r2, r0, #1
90026154:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
90026158:	eb02 2010 	add.w	r0, r2, r0, lsr #8
9002615c:	f3c3 23c4 	ubfx	r3, r3, #11, #5
90026160:	0940      	lsrs	r0, r0, #5
90026162:	4323      	orrs	r3, r4
90026164:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
90026168:	4303      	orrs	r3, r0
9002616a:	800b      	strh	r3, [r1, #0]
9002616c:	e7b5      	b.n	900260da <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x132>
9002616e:	bf00      	nop
90026170:	240281fc 	.word	0x240281fc
90026174:	00fff800 	.word	0x00fff800

90026178 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
90026178:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9002617c:	b097      	sub	sp, #92	; 0x5c
9002617e:	9214      	str	r2, [sp, #80]	; 0x50
90026180:	9309      	str	r3, [sp, #36]	; 0x24
90026182:	9a25      	ldr	r2, [sp, #148]	; 0x94
90026184:	f89d 30a4 	ldrb.w	r3, [sp, #164]	; 0xa4
90026188:	9015      	str	r0, [sp, #84]	; 0x54
9002618a:	910d      	str	r1, [sp, #52]	; 0x34
9002618c:	6850      	ldr	r0, [r2, #4]
9002618e:	930f      	str	r3, [sp, #60]	; 0x3c
90026190:	6812      	ldr	r2, [r2, #0]
90026192:	e9dd 1326 	ldrd	r1, r3, [sp, #152]	; 0x98
90026196:	e9dd 4621 	ldrd	r4, r6, [sp, #132]	; 0x84
9002619a:	fb00 1303 	mla	r3, r0, r3, r1
9002619e:	eb02 0943 	add.w	r9, r2, r3, lsl #1
900261a2:	9b28      	ldr	r3, [sp, #160]	; 0xa0
900261a4:	689b      	ldr	r3, [r3, #8]
900261a6:	3301      	adds	r3, #1
900261a8:	f023 0301 	bic.w	r3, r3, #1
900261ac:	930a      	str	r3, [sp, #40]	; 0x28
900261ae:	9b28      	ldr	r3, [sp, #160]	; 0xa0
900261b0:	681f      	ldr	r7, [r3, #0]
900261b2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
900261b4:	2b00      	cmp	r3, #0
900261b6:	dc03      	bgt.n	900261c0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
900261b8:	9b14      	ldr	r3, [sp, #80]	; 0x50
900261ba:	2b00      	cmp	r3, #0
900261bc:	f340 8289 	ble.w	900266d2 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x55a>
900261c0:	9b28      	ldr	r3, [sp, #160]	; 0xa0
900261c2:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
900261c6:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
900261ca:	1e48      	subs	r0, r1, #1
900261cc:	f102 3cff 	add.w	ip, r2, #4294967295
900261d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
900261d2:	2b00      	cmp	r3, #0
900261d4:	f340 80c5 	ble.w	90026362 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
900261d8:	ea5f 4e24 	movs.w	lr, r4, asr #16
900261dc:	ea4f 4326 	mov.w	r3, r6, asr #16
900261e0:	d406      	bmi.n	900261f0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
900261e2:	4586      	cmp	lr, r0
900261e4:	da04      	bge.n	900261f0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
900261e6:	2b00      	cmp	r3, #0
900261e8:	db02      	blt.n	900261f0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
900261ea:	4563      	cmp	r3, ip
900261ec:	f2c0 80ba 	blt.w	90026364 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ec>
900261f0:	f11e 0e01 	adds.w	lr, lr, #1
900261f4:	f100 80ab 	bmi.w	9002634e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d6>
900261f8:	4571      	cmp	r1, lr
900261fa:	f2c0 80a8 	blt.w	9002634e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d6>
900261fe:	3301      	adds	r3, #1
90026200:	f100 80a5 	bmi.w	9002634e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d6>
90026204:	429a      	cmp	r2, r3
90026206:	f2c0 80a2 	blt.w	9002634e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d6>
9002620a:	9b09      	ldr	r3, [sp, #36]	; 0x24
9002620c:	46c8      	mov	r8, r9
9002620e:	f9bd a028 	ldrsh.w	sl, [sp, #40]	; 0x28
90026212:	930e      	str	r3, [sp, #56]	; 0x38
90026214:	9b0e      	ldr	r3, [sp, #56]	; 0x38
90026216:	2b00      	cmp	r3, #0
90026218:	f340 80c4 	ble.w	900263a4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22c>
9002621c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
9002621e:	1430      	asrs	r0, r6, #16
90026220:	f3c4 3203 	ubfx	r2, r4, #12, #4
90026224:	f3c6 3103 	ubfx	r1, r6, #12, #4
90026228:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
9002622c:	1423      	asrs	r3, r4, #16
9002622e:	f100 814f 	bmi.w	900264d0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
90026232:	f10c 3bff 	add.w	fp, ip, #4294967295
90026236:	455b      	cmp	r3, fp
90026238:	f280 814a 	bge.w	900264d0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
9002623c:	2800      	cmp	r0, #0
9002623e:	f2c0 8147 	blt.w	900264d0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
90026242:	f10e 3bff 	add.w	fp, lr, #4294967295
90026246:	4558      	cmp	r0, fp
90026248:	f280 8142 	bge.w	900264d0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
9002624c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
9002624e:	fb00 3305 	mla	r3, r0, r5, r3
90026252:	0858      	lsrs	r0, r3, #1
90026254:	07dd      	lsls	r5, r3, #31
90026256:	f817 c000 	ldrb.w	ip, [r7, r0]
9002625a:	bf54      	ite	pl
9002625c:	f00c 0c0f 	andpl.w	ip, ip, #15
90026260:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
90026264:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
90026268:	fa5f fc8c 	uxtb.w	ip, ip
9002626c:	2a00      	cmp	r2, #0
9002626e:	f000 80dd 	beq.w	9002642c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b4>
90026272:	1c58      	adds	r0, r3, #1
90026274:	ea4f 0e50 	mov.w	lr, r0, lsr #1
90026278:	07c0      	lsls	r0, r0, #31
9002627a:	f817 e00e 	ldrb.w	lr, [r7, lr]
9002627e:	bf54      	ite	pl
90026280:	f00e 0e0f 	andpl.w	lr, lr, #15
90026284:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
90026288:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
9002628c:	fa5f f08e 	uxtb.w	r0, lr
90026290:	9010      	str	r0, [sp, #64]	; 0x40
90026292:	b1d9      	cbz	r1, 900262cc <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
90026294:	4453      	add	r3, sl
90026296:	0858      	lsrs	r0, r3, #1
90026298:	07dd      	lsls	r5, r3, #31
9002629a:	f103 0301 	add.w	r3, r3, #1
9002629e:	5c38      	ldrb	r0, [r7, r0]
900262a0:	bf54      	ite	pl
900262a2:	f000 000f 	andpl.w	r0, r0, #15
900262a6:	1100      	asrmi	r0, r0, #4
900262a8:	07dd      	lsls	r5, r3, #31
900262aa:	eb00 1000 	add.w	r0, r0, r0, lsl #4
900262ae:	b2c0      	uxtb	r0, r0
900262b0:	900b      	str	r0, [sp, #44]	; 0x2c
900262b2:	ea4f 0053 	mov.w	r0, r3, lsr #1
900262b6:	f817 e000 	ldrb.w	lr, [r7, r0]
900262ba:	bf54      	ite	pl
900262bc:	f00e 030f 	andpl.w	r3, lr, #15
900262c0:	ea4f 132e 	movmi.w	r3, lr, asr #4
900262c4:	eb03 1303 	add.w	r3, r3, r3, lsl #4
900262c8:	b2db      	uxtb	r3, r3
900262ca:	9311      	str	r3, [sp, #68]	; 0x44
900262cc:	b292      	uxth	r2, r2
900262ce:	9d10      	ldr	r5, [sp, #64]	; 0x40
900262d0:	b289      	uxth	r1, r1
900262d2:	fb02 f301 	mul.w	r3, r2, r1
900262d6:	0112      	lsls	r2, r2, #4
900262d8:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
900262dc:	f5c2 7080 	rsb	r0, r2, #256	; 0x100
900262e0:	1ad2      	subs	r2, r2, r3
900262e2:	b289      	uxth	r1, r1
900262e4:	b292      	uxth	r2, r2
900262e6:	1a40      	subs	r0, r0, r1
900262e8:	436a      	muls	r2, r5
900262ea:	b280      	uxth	r0, r0
900262ec:	fb0c 2c00 	mla	ip, ip, r0, r2
900262f0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
900262f2:	fb01 c102 	mla	r1, r1, r2, ip
900262f6:	9a11      	ldr	r2, [sp, #68]	; 0x44
900262f8:	fb03 1302 	mla	r3, r3, r2, r1
900262fc:	f3c3 2307 	ubfx	r3, r3, #8, #8
90026300:	b1db      	cbz	r3, 9002633a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
90026302:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
90026304:	4353      	muls	r3, r2
90026306:	1c5a      	adds	r2, r3, #1
90026308:	eb02 2313 	add.w	r3, r2, r3, lsr #8
9002630c:	4ac6      	ldr	r2, [pc, #792]	; (90026628 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>)
9002630e:	121b      	asrs	r3, r3, #8
90026310:	6812      	ldr	r2, [r2, #0]
90026312:	2bff      	cmp	r3, #255	; 0xff
90026314:	ea4f 2c12 	mov.w	ip, r2, lsr #8
90026318:	f040 8099 	bne.w	9002644e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d6>
9002631c:	0953      	lsrs	r3, r2, #5
9002631e:	f42c 6cff 	bic.w	ip, ip, #2040	; 0x7f8
90026322:	f3c2 02c4 	ubfx	r2, r2, #3, #5
90026326:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
9002632a:	f02c 0c07 	bic.w	ip, ip, #7
9002632e:	ea43 0c0c 	orr.w	ip, r3, ip
90026332:	ea4c 0202 	orr.w	r2, ip, r2
90026336:	f8a8 2000 	strh.w	r2, [r8]
9002633a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
9002633c:	f108 0802 	add.w	r8, r8, #2
90026340:	441c      	add	r4, r3
90026342:	9b24      	ldr	r3, [sp, #144]	; 0x90
90026344:	441e      	add	r6, r3
90026346:	9b0e      	ldr	r3, [sp, #56]	; 0x38
90026348:	3b01      	subs	r3, #1
9002634a:	930e      	str	r3, [sp, #56]	; 0x38
9002634c:	e762      	b.n	90026214 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
9002634e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
90026350:	f109 0902 	add.w	r9, r9, #2
90026354:	441c      	add	r4, r3
90026356:	9b24      	ldr	r3, [sp, #144]	; 0x90
90026358:	441e      	add	r6, r3
9002635a:	9b09      	ldr	r3, [sp, #36]	; 0x24
9002635c:	3b01      	subs	r3, #1
9002635e:	9309      	str	r3, [sp, #36]	; 0x24
90026360:	e736      	b.n	900261d0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
90026362:	d024      	beq.n	900263ae <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
90026364:	9b09      	ldr	r3, [sp, #36]	; 0x24
90026366:	9823      	ldr	r0, [sp, #140]	; 0x8c
90026368:	3b01      	subs	r3, #1
9002636a:	fb00 4003 	mla	r0, r0, r3, r4
9002636e:	1400      	asrs	r0, r0, #16
90026370:	f53f af4b 	bmi.w	9002620a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
90026374:	3901      	subs	r1, #1
90026376:	4288      	cmp	r0, r1
90026378:	f6bf af47 	bge.w	9002620a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
9002637c:	9924      	ldr	r1, [sp, #144]	; 0x90
9002637e:	fb01 6303 	mla	r3, r1, r3, r6
90026382:	141b      	asrs	r3, r3, #16
90026384:	f53f af41 	bmi.w	9002620a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
90026388:	3a01      	subs	r2, #1
9002638a:	4293      	cmp	r3, r2
9002638c:	f6bf af3d 	bge.w	9002620a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
90026390:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
90026394:	46c8      	mov	r8, r9
90026396:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
9002639a:	930e      	str	r3, [sp, #56]	; 0x38
9002639c:	f1bb 0f00 	cmp.w	fp, #0
900263a0:	f300 80b7 	bgt.w	90026512 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39a>
900263a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
900263a6:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
900263aa:	eb09 0945 	add.w	r9, r9, r5, lsl #1
900263ae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
900263b0:	2b00      	cmp	r3, #0
900263b2:	f340 818e 	ble.w	900266d2 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x55a>
900263b6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
900263ba:	9b20      	ldr	r3, [sp, #128]	; 0x80
900263bc:	ee30 0a04 	vadd.f32	s0, s0, s8
900263c0:	ee70 0aa4 	vadd.f32	s1, s1, s9
900263c4:	eef0 6a62 	vmov.f32	s13, s5
900263c8:	eec7 7a00 	vdiv.f32	s15, s14, s0
900263cc:	ee31 1a05 	vadd.f32	s2, s2, s10
900263d0:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
900263d4:	ee16 4a90 	vmov	r4, s13
900263d8:	eef0 6a43 	vmov.f32	s13, s6
900263dc:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
900263e0:	ee16 6a90 	vmov	r6, s13
900263e4:	ee20 7aa7 	vmul.f32	s14, s1, s15
900263e8:	ee61 7a27 	vmul.f32	s15, s2, s15
900263ec:	ee77 2a62 	vsub.f32	s5, s14, s5
900263f0:	ee37 3ac3 	vsub.f32	s6, s15, s6
900263f4:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
900263f8:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
900263fc:	ee12 2a90 	vmov	r2, s5
90026400:	eef0 2a47 	vmov.f32	s5, s14
90026404:	fb92 f3f3 	sdiv	r3, r2, r3
90026408:	ee13 2a10 	vmov	r2, s6
9002640c:	9323      	str	r3, [sp, #140]	; 0x8c
9002640e:	9b20      	ldr	r3, [sp, #128]	; 0x80
90026410:	eeb0 3a67 	vmov.f32	s6, s15
90026414:	fb92 f3f3 	sdiv	r3, r2, r3
90026418:	9324      	str	r3, [sp, #144]	; 0x90
9002641a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
9002641c:	9a14      	ldr	r2, [sp, #80]	; 0x50
9002641e:	3b01      	subs	r3, #1
90026420:	930d      	str	r3, [sp, #52]	; 0x34
90026422:	9b20      	ldr	r3, [sp, #128]	; 0x80
90026424:	bf08      	it	eq
90026426:	4613      	moveq	r3, r2
90026428:	9309      	str	r3, [sp, #36]	; 0x24
9002642a:	e6c2      	b.n	900261b2 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
9002642c:	2900      	cmp	r1, #0
9002642e:	f43f af4d 	beq.w	900262cc <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
90026432:	eb0a 0003 	add.w	r0, sl, r3
90026436:	0843      	lsrs	r3, r0, #1
90026438:	07c0      	lsls	r0, r0, #31
9002643a:	5cfb      	ldrb	r3, [r7, r3]
9002643c:	bf54      	ite	pl
9002643e:	f003 030f 	andpl.w	r3, r3, #15
90026442:	111b      	asrmi	r3, r3, #4
90026444:	eb03 1303 	add.w	r3, r3, r3, lsl #4
90026448:	b2db      	uxtb	r3, r3
9002644a:	930b      	str	r3, [sp, #44]	; 0x2c
9002644c:	e73e      	b.n	900262cc <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
9002644e:	f8b8 e000 	ldrh.w	lr, [r8]
90026452:	fa1f fb83 	uxth.w	fp, r3
90026456:	f3c2 4107 	ubfx	r1, r2, #16, #8
9002645a:	43db      	mvns	r3, r3
9002645c:	ea4f 202e 	mov.w	r0, lr, asr #8
90026460:	fb11 f10b 	smulbb	r1, r1, fp
90026464:	b2db      	uxtb	r3, r3
90026466:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
9002646a:	fa5f fc8c 	uxtb.w	ip, ip
9002646e:	b2d2      	uxtb	r2, r2
90026470:	fb00 1003 	mla	r0, r0, r3, r1
90026474:	ea4f 01ee 	mov.w	r1, lr, asr #3
90026478:	fb1c fc0b 	smulbb	ip, ip, fp
9002647c:	ea4f 0ece 	mov.w	lr, lr, lsl #3
90026480:	b280      	uxth	r0, r0
90026482:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
90026486:	fb12 fb0b 	smulbb	fp, r2, fp
9002648a:	fa5f fe8e 	uxtb.w	lr, lr
9002648e:	fb01 cc03 	mla	ip, r1, r3, ip
90026492:	fb0e bb03 	mla	fp, lr, r3, fp
90026496:	1c43      	adds	r3, r0, #1
90026498:	fa1f fc8c 	uxth.w	ip, ip
9002649c:	fa1f fb8b 	uxth.w	fp, fp
900264a0:	eb03 2010 	add.w	r0, r3, r0, lsr #8
900264a4:	f10c 0101 	add.w	r1, ip, #1
900264a8:	f400 4378 	and.w	r3, r0, #63488	; 0xf800
900264ac:	f10b 0001 	add.w	r0, fp, #1
900264b0:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
900264b4:	eb00 201b 	add.w	r0, r0, fp, lsr #8
900264b8:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
900264bc:	f3c0 20c4 	ubfx	r0, r0, #11, #5
900264c0:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
900264c4:	4318      	orrs	r0, r3
900264c6:	ea40 000c 	orr.w	r0, r0, ip
900264ca:	f8a8 0000 	strh.w	r0, [r8]
900264ce:	e734      	b.n	9002633a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
900264d0:	f113 0b01 	adds.w	fp, r3, #1
900264d4:	f53f af31 	bmi.w	9002633a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
900264d8:	45dc      	cmp	ip, fp
900264da:	f6ff af2e 	blt.w	9002633a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
900264de:	f110 0b01 	adds.w	fp, r0, #1
900264e2:	f53f af2a 	bmi.w	9002633a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
900264e6:	45de      	cmp	lr, fp
900264e8:	f6ff af27 	blt.w	9002633a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
900264ec:	9302      	str	r3, [sp, #8]
900264ee:	fa0f f38e 	sxth.w	r3, lr
900264f2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
900264f4:	9301      	str	r3, [sp, #4]
900264f6:	fa0f f38c 	sxth.w	r3, ip
900264fa:	e9cd 0203 	strd	r0, r2, [sp, #12]
900264fe:	e9cd 1505 	strd	r1, r5, [sp, #20]
90026502:	9300      	str	r3, [sp, #0]
90026504:	463a      	mov	r2, r7
90026506:	4653      	mov	r3, sl
90026508:	4641      	mov	r1, r8
9002650a:	9815      	ldr	r0, [sp, #84]	; 0x54
9002650c:	f7ff fd4c 	bl	90025fa8 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh>
90026510:	e713      	b.n	9002633a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
90026512:	1422      	asrs	r2, r4, #16
90026514:	9d0a      	ldr	r5, [sp, #40]	; 0x28
90026516:	1433      	asrs	r3, r6, #16
90026518:	f3c4 3103 	ubfx	r1, r4, #12, #4
9002651c:	f3c6 3003 	ubfx	r0, r6, #12, #4
90026520:	fb05 2303 	mla	r3, r5, r3, r2
90026524:	085a      	lsrs	r2, r3, #1
90026526:	07dd      	lsls	r5, r3, #31
90026528:	5cba      	ldrb	r2, [r7, r2]
9002652a:	bf54      	ite	pl
9002652c:	f002 020f 	andpl.w	r2, r2, #15
90026530:	1112      	asrmi	r2, r2, #4
90026532:	eb02 1202 	add.w	r2, r2, r2, lsl #4
90026536:	b2d2      	uxtb	r2, r2
90026538:	2900      	cmp	r1, #0
9002653a:	d077      	beq.n	9002662c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
9002653c:	f103 0e01 	add.w	lr, r3, #1
90026540:	ea4f 0c5e 	mov.w	ip, lr, lsr #1
90026544:	f01e 0f01 	tst.w	lr, #1
90026548:	f817 c00c 	ldrb.w	ip, [r7, ip]
9002654c:	bf0c      	ite	eq
9002654e:	f00c 0c0f 	andeq.w	ip, ip, #15
90026552:	ea4f 1c2c 	movne.w	ip, ip, asr #4
90026556:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
9002655a:	fa5f f58c 	uxtb.w	r5, ip
9002655e:	9512      	str	r5, [sp, #72]	; 0x48
90026560:	b308      	cbz	r0, 900265a6 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42e>
90026562:	9d0e      	ldr	r5, [sp, #56]	; 0x38
90026564:	442b      	add	r3, r5
90026566:	ea4f 0c53 	mov.w	ip, r3, lsr #1
9002656a:	07dd      	lsls	r5, r3, #31
9002656c:	f103 0301 	add.w	r3, r3, #1
90026570:	f817 c00c 	ldrb.w	ip, [r7, ip]
90026574:	bf54      	ite	pl
90026576:	f00c 0c0f 	andpl.w	ip, ip, #15
9002657a:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
9002657e:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
90026582:	fa5f f58c 	uxtb.w	r5, ip
90026586:	ea4f 0c53 	mov.w	ip, r3, lsr #1
9002658a:	950c      	str	r5, [sp, #48]	; 0x30
9002658c:	07dd      	lsls	r5, r3, #31
9002658e:	f817 c00c 	ldrb.w	ip, [r7, ip]
90026592:	bf54      	ite	pl
90026594:	f00c 0c0f 	andpl.w	ip, ip, #15
90026598:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
9002659c:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
900265a0:	fa5f f38c 	uxtb.w	r3, ip
900265a4:	9313      	str	r3, [sp, #76]	; 0x4c
900265a6:	b289      	uxth	r1, r1
900265a8:	9d12      	ldr	r5, [sp, #72]	; 0x48
900265aa:	b280      	uxth	r0, r0
900265ac:	fb01 f300 	mul.w	r3, r1, r0
900265b0:	0109      	lsls	r1, r1, #4
900265b2:	ebc3 1000 	rsb	r0, r3, r0, lsl #4
900265b6:	f5c1 7c80 	rsb	ip, r1, #256	; 0x100
900265ba:	1ac9      	subs	r1, r1, r3
900265bc:	b280      	uxth	r0, r0
900265be:	b289      	uxth	r1, r1
900265c0:	ebac 0c00 	sub.w	ip, ip, r0
900265c4:	4369      	muls	r1, r5
900265c6:	fa1f fc8c 	uxth.w	ip, ip
900265ca:	fb02 120c 	mla	r2, r2, ip, r1
900265ce:	990c      	ldr	r1, [sp, #48]	; 0x30
900265d0:	fb00 2001 	mla	r0, r0, r1, r2
900265d4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
900265d6:	fb03 0302 	mla	r3, r3, r2, r0
900265da:	f3c3 2307 	ubfx	r3, r3, #8, #8
900265de:	b1d3      	cbz	r3, 90026616 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
900265e0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
900265e2:	4353      	muls	r3, r2
900265e4:	1c5a      	adds	r2, r3, #1
900265e6:	eb02 2313 	add.w	r3, r2, r3, lsr #8
900265ea:	4a0f      	ldr	r2, [pc, #60]	; (90026628 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>)
900265ec:	121b      	asrs	r3, r3, #8
900265ee:	6812      	ldr	r2, [r2, #0]
900265f0:	2bff      	cmp	r3, #255	; 0xff
900265f2:	ea4f 2c12 	mov.w	ip, r2, lsr #8
900265f6:	d12d      	bne.n	90026654 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4dc>
900265f8:	0953      	lsrs	r3, r2, #5
900265fa:	f42c 6cff 	bic.w	ip, ip, #2040	; 0x7f8
900265fe:	f3c2 02c4 	ubfx	r2, r2, #3, #5
90026602:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
90026606:	f02c 0c07 	bic.w	ip, ip, #7
9002660a:	ea43 0c0c 	orr.w	ip, r3, ip
9002660e:	ea4c 0202 	orr.w	r2, ip, r2
90026612:	f8a8 2000 	strh.w	r2, [r8]
90026616:	9b23      	ldr	r3, [sp, #140]	; 0x8c
90026618:	f108 0802 	add.w	r8, r8, #2
9002661c:	f10b 3bff 	add.w	fp, fp, #4294967295
90026620:	441c      	add	r4, r3
90026622:	9b24      	ldr	r3, [sp, #144]	; 0x90
90026624:	441e      	add	r6, r3
90026626:	e6b9      	b.n	9002639c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
90026628:	240281fc 	.word	0x240281fc
9002662c:	2800      	cmp	r0, #0
9002662e:	d0ba      	beq.n	900265a6 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42e>
90026630:	9d0e      	ldr	r5, [sp, #56]	; 0x38
90026632:	442b      	add	r3, r5
90026634:	ea4f 0c53 	mov.w	ip, r3, lsr #1
90026638:	07db      	lsls	r3, r3, #31
9002663a:	f817 c00c 	ldrb.w	ip, [r7, ip]
9002663e:	bf54      	ite	pl
90026640:	f00c 0c0f 	andpl.w	ip, ip, #15
90026644:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
90026648:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
9002664c:	fa5f f38c 	uxtb.w	r3, ip
90026650:	930c      	str	r3, [sp, #48]	; 0x30
90026652:	e7a8      	b.n	900265a6 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42e>
90026654:	f8b8 e000 	ldrh.w	lr, [r8]
90026658:	fa1f fa83 	uxth.w	sl, r3
9002665c:	f3c2 4107 	ubfx	r1, r2, #16, #8
90026660:	43db      	mvns	r3, r3
90026662:	ea4f 202e 	mov.w	r0, lr, asr #8
90026666:	fb11 f10a 	smulbb	r1, r1, sl
9002666a:	b2db      	uxtb	r3, r3
9002666c:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
90026670:	b2d2      	uxtb	r2, r2
90026672:	fa5f fc8c 	uxtb.w	ip, ip
90026676:	fb00 1003 	mla	r0, r0, r3, r1
9002667a:	ea4f 01ee 	mov.w	r1, lr, asr #3
9002667e:	fb12 f20a 	smulbb	r2, r2, sl
90026682:	ea4f 0ece 	mov.w	lr, lr, lsl #3
90026686:	b280      	uxth	r0, r0
90026688:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
9002668c:	fb1c fc0a 	smulbb	ip, ip, sl
90026690:	fa5f fe8e 	uxtb.w	lr, lr
90026694:	fb0e 2203 	mla	r2, lr, r3, r2
90026698:	fb01 cc03 	mla	ip, r1, r3, ip
9002669c:	1c43      	adds	r3, r0, #1
9002669e:	b292      	uxth	r2, r2
900266a0:	eb03 2010 	add.w	r0, r3, r0, lsr #8
900266a4:	1c51      	adds	r1, r2, #1
900266a6:	fa1f fc8c 	uxth.w	ip, ip
900266aa:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
900266ae:	eb01 2112 	add.w	r1, r1, r2, lsr #8
900266b2:	f3c1 21c4 	ubfx	r1, r1, #11, #5
900266b6:	4308      	orrs	r0, r1
900266b8:	f10c 0101 	add.w	r1, ip, #1
900266bc:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
900266c0:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
900266c4:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
900266c8:	ea40 000c 	orr.w	r0, r0, ip
900266cc:	f8a8 0000 	strh.w	r0, [r8]
900266d0:	e7a1      	b.n	90026616 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
900266d2:	b017      	add	sp, #92	; 0x5c
900266d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

900266d8 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh>:
900266d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
900266dc:	e9dd 050a 	ldrd	r0, r5, [sp, #40]	; 0x28
900266e0:	f9bd 8020 	ldrsh.w	r8, [sp, #32]
900266e4:	2d00      	cmp	r5, #0
900266e6:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
900266ea:	f89d 7030 	ldrb.w	r7, [sp, #48]	; 0x30
900266ee:	fb05 0e03 	mla	lr, r5, r3, r0
900266f2:	f89d c034 	ldrb.w	ip, [sp, #52]	; 0x34
900266f6:	f2c0 80b0 	blt.w	9002685a <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x182>
900266fa:	45a9      	cmp	r9, r5
900266fc:	f340 80ad 	ble.w	9002685a <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x182>
90026700:	2800      	cmp	r0, #0
90026702:	f2c0 80a8 	blt.w	90026856 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x17e>
90026706:	4580      	cmp	r8, r0
90026708:	f340 80a5 	ble.w	90026856 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x17e>
9002670c:	ea4f 045e 	mov.w	r4, lr, lsr #1
90026710:	f01e 0f01 	tst.w	lr, #1
90026714:	5d16      	ldrb	r6, [r2, r4]
90026716:	bf0c      	ite	eq
90026718:	f006 060f 	andeq.w	r6, r6, #15
9002671c:	1136      	asrne	r6, r6, #4
9002671e:	eb06 1606 	add.w	r6, r6, r6, lsl #4
90026722:	b2f6      	uxtb	r6, r6
90026724:	1c44      	adds	r4, r0, #1
90026726:	f100 809b 	bmi.w	90026860 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x188>
9002672a:	45a0      	cmp	r8, r4
9002672c:	f340 8098 	ble.w	90026860 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x188>
90026730:	2f00      	cmp	r7, #0
90026732:	f000 8097 	beq.w	90026864 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x18c>
90026736:	f10e 0a01 	add.w	sl, lr, #1
9002673a:	ea4f 045a 	mov.w	r4, sl, lsr #1
9002673e:	f01a 0f01 	tst.w	sl, #1
90026742:	5d14      	ldrb	r4, [r2, r4]
90026744:	bf0c      	ite	eq
90026746:	f004 040f 	andeq.w	r4, r4, #15
9002674a:	1124      	asrne	r4, r4, #4
9002674c:	eb04 1404 	add.w	r4, r4, r4, lsl #4
90026750:	b2e4      	uxtb	r4, r4
90026752:	3501      	adds	r5, #1
90026754:	f100 808a 	bmi.w	9002686c <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x194>
90026758:	45a9      	cmp	r9, r5
9002675a:	f340 8087 	ble.w	9002686c <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x194>
9002675e:	f1bc 0f00 	cmp.w	ip, #0
90026762:	f000 8086 	beq.w	90026872 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x19a>
90026766:	2800      	cmp	r0, #0
90026768:	db7e      	blt.n	90026868 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x190>
9002676a:	4580      	cmp	r8, r0
9002676c:	dd7c      	ble.n	90026868 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x190>
9002676e:	eb03 090e 	add.w	r9, r3, lr
90026772:	ea4f 0559 	mov.w	r5, r9, lsr #1
90026776:	f019 0f01 	tst.w	r9, #1
9002677a:	5d55      	ldrb	r5, [r2, r5]
9002677c:	bf0c      	ite	eq
9002677e:	f005 050f 	andeq.w	r5, r5, #15
90026782:	112d      	asrne	r5, r5, #4
90026784:	eb05 1505 	add.w	r5, r5, r5, lsl #4
90026788:	b2ed      	uxtb	r5, r5
9002678a:	3001      	adds	r0, #1
9002678c:	d474      	bmi.n	90026878 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a0>
9002678e:	4580      	cmp	r8, r0
90026790:	dd72      	ble.n	90026878 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a0>
90026792:	2f00      	cmp	r7, #0
90026794:	d072      	beq.n	9002687c <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a4>
90026796:	3301      	adds	r3, #1
90026798:	449e      	add	lr, r3
9002679a:	ea4f 035e 	mov.w	r3, lr, lsr #1
9002679e:	f01e 0f01 	tst.w	lr, #1
900267a2:	5cd0      	ldrb	r0, [r2, r3]
900267a4:	bf0c      	ite	eq
900267a6:	f000 000f 	andeq.w	r0, r0, #15
900267aa:	1100      	asrne	r0, r0, #4
900267ac:	eb00 1000 	add.w	r0, r0, r0, lsl #4
900267b0:	b2c3      	uxtb	r3, r0
900267b2:	b2ba      	uxth	r2, r7
900267b4:	fa1f fc8c 	uxth.w	ip, ip
900267b8:	fb02 f00c 	mul.w	r0, r2, ip
900267bc:	0112      	lsls	r2, r2, #4
900267be:	ebc0 1c0c 	rsb	ip, r0, ip, lsl #4
900267c2:	f5c2 7780 	rsb	r7, r2, #256	; 0x100
900267c6:	1a12      	subs	r2, r2, r0
900267c8:	fa1f fc8c 	uxth.w	ip, ip
900267cc:	b292      	uxth	r2, r2
900267ce:	eba7 070c 	sub.w	r7, r7, ip
900267d2:	4362      	muls	r2, r4
900267d4:	b2bf      	uxth	r7, r7
900267d6:	fb06 2207 	mla	r2, r6, r7, r2
900267da:	fb0c 2505 	mla	r5, ip, r5, r2
900267de:	fb00 5303 	mla	r3, r0, r3, r5
900267e2:	f3c3 2307 	ubfx	r3, r3, #8, #8
900267e6:	b3a3      	cbz	r3, 90026852 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x17a>
900267e8:	4a25      	ldr	r2, [pc, #148]	; (90026880 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a8>)
900267ea:	880e      	ldrh	r6, [r1, #0]
900267ec:	6815      	ldr	r5, [r2, #0]
900267ee:	b29a      	uxth	r2, r3
900267f0:	1234      	asrs	r4, r6, #8
900267f2:	43db      	mvns	r3, r3
900267f4:	f3c5 4007 	ubfx	r0, r5, #16, #8
900267f8:	f3c5 2707 	ubfx	r7, r5, #8, #8
900267fc:	b2db      	uxtb	r3, r3
900267fe:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
90026802:	fb10 f002 	smulbb	r0, r0, r2
90026806:	b2ed      	uxtb	r5, r5
90026808:	fb17 f702 	smulbb	r7, r7, r2
9002680c:	fb04 0403 	mla	r4, r4, r3, r0
90026810:	10f0      	asrs	r0, r6, #3
90026812:	fb15 f202 	smulbb	r2, r5, r2
90026816:	00f6      	lsls	r6, r6, #3
90026818:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
9002681c:	b2a4      	uxth	r4, r4
9002681e:	b2f6      	uxtb	r6, r6
90026820:	fb00 7003 	mla	r0, r0, r3, r7
90026824:	fb06 2303 	mla	r3, r6, r3, r2
90026828:	b280      	uxth	r0, r0
9002682a:	b29a      	uxth	r2, r3
9002682c:	1c63      	adds	r3, r4, #1
9002682e:	eb03 2414 	add.w	r4, r3, r4, lsr #8
90026832:	1c53      	adds	r3, r2, #1
90026834:	eb03 2312 	add.w	r3, r3, r2, lsr #8
90026838:	1c42      	adds	r2, r0, #1
9002683a:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
9002683e:	eb02 2010 	add.w	r0, r2, r0, lsr #8
90026842:	f3c3 23c4 	ubfx	r3, r3, #11, #5
90026846:	0940      	lsrs	r0, r0, #5
90026848:	4323      	orrs	r3, r4
9002684a:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
9002684e:	4303      	orrs	r3, r0
90026850:	800b      	strh	r3, [r1, #0]
90026852:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
90026856:	2600      	movs	r6, #0
90026858:	e764      	b.n	90026724 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x4c>
9002685a:	2400      	movs	r4, #0
9002685c:	4626      	mov	r6, r4
9002685e:	e778      	b.n	90026752 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x7a>
90026860:	2400      	movs	r4, #0
90026862:	e776      	b.n	90026752 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x7a>
90026864:	463c      	mov	r4, r7
90026866:	e774      	b.n	90026752 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x7a>
90026868:	2500      	movs	r5, #0
9002686a:	e78e      	b.n	9002678a <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xb2>
9002686c:	2300      	movs	r3, #0
9002686e:	461d      	mov	r5, r3
90026870:	e79f      	b.n	900267b2 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xda>
90026872:	4663      	mov	r3, ip
90026874:	4665      	mov	r5, ip
90026876:	e79c      	b.n	900267b2 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xda>
90026878:	2300      	movs	r3, #0
9002687a:	e79a      	b.n	900267b2 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xda>
9002687c:	463b      	mov	r3, r7
9002687e:	e798      	b.n	900267b2 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xda>
90026880:	240281fc 	.word	0x240281fc

90026884 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
90026884:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90026888:	b093      	sub	sp, #76	; 0x4c
9002688a:	461d      	mov	r5, r3
9002688c:	920c      	str	r2, [sp, #48]	; 0x30
9002688e:	9a21      	ldr	r2, [sp, #132]	; 0x84
90026890:	9011      	str	r0, [sp, #68]	; 0x44
90026892:	9107      	str	r1, [sp, #28]
90026894:	6850      	ldr	r0, [r2, #4]
90026896:	6812      	ldr	r2, [r2, #0]
90026898:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	; 0x88
9002689c:	e9dd 461d 	ldrd	r4, r6, [sp, #116]	; 0x74
900268a0:	fb00 1303 	mla	r3, r0, r3, r1
900268a4:	eb02 0943 	add.w	r9, r2, r3, lsl #1
900268a8:	9b24      	ldr	r3, [sp, #144]	; 0x90
900268aa:	689b      	ldr	r3, [r3, #8]
900268ac:	3301      	adds	r3, #1
900268ae:	f023 0301 	bic.w	r3, r3, #1
900268b2:	9306      	str	r3, [sp, #24]
900268b4:	9b24      	ldr	r3, [sp, #144]	; 0x90
900268b6:	681f      	ldr	r7, [r3, #0]
900268b8:	9b07      	ldr	r3, [sp, #28]
900268ba:	2b00      	cmp	r3, #0
900268bc:	dc03      	bgt.n	900268c6 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
900268be:	9b0c      	ldr	r3, [sp, #48]	; 0x30
900268c0:	2b00      	cmp	r3, #0
900268c2:	f340 8267 	ble.w	90026d94 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x510>
900268c6:	9b24      	ldr	r3, [sp, #144]	; 0x90
900268c8:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
900268cc:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
900268d0:	1e48      	subs	r0, r1, #1
900268d2:	f102 3cff 	add.w	ip, r2, #4294967295
900268d6:	2d00      	cmp	r5, #0
900268d8:	f340 80b7 	ble.w	90026a4a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
900268dc:	ea5f 4e24 	movs.w	lr, r4, asr #16
900268e0:	ea4f 4326 	mov.w	r3, r6, asr #16
900268e4:	d406      	bmi.n	900268f4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
900268e6:	4586      	cmp	lr, r0
900268e8:	da04      	bge.n	900268f4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
900268ea:	2b00      	cmp	r3, #0
900268ec:	db02      	blt.n	900268f4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
900268ee:	4563      	cmp	r3, ip
900268f0:	f2c0 80ac 	blt.w	90026a4c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
900268f4:	f11e 0e01 	adds.w	lr, lr, #1
900268f8:	f100 809f 	bmi.w	90026a3a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
900268fc:	4571      	cmp	r1, lr
900268fe:	f2c0 809c 	blt.w	90026a3a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
90026902:	3301      	adds	r3, #1
90026904:	f100 8099 	bmi.w	90026a3a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
90026908:	429a      	cmp	r2, r3
9002690a:	f2c0 8096 	blt.w	90026a3a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
9002690e:	46c8      	mov	r8, r9
90026910:	f9bd a018 	ldrsh.w	sl, [sp, #24]
90026914:	9509      	str	r5, [sp, #36]	; 0x24
90026916:	9b09      	ldr	r3, [sp, #36]	; 0x24
90026918:	2b00      	cmp	r3, #0
9002691a:	f340 80b5 	ble.w	90026a88 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
9002691e:	f3c4 3303 	ubfx	r3, r4, #12, #4
90026922:	1430      	asrs	r0, r6, #16
90026924:	f3c6 3103 	ubfx	r1, r6, #12, #4
90026928:	9308      	str	r3, [sp, #32]
9002692a:	9b24      	ldr	r3, [sp, #144]	; 0x90
9002692c:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
90026930:	1423      	asrs	r3, r4, #16
90026932:	f100 813f 	bmi.w	90026bb4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
90026936:	f10c 3bff 	add.w	fp, ip, #4294967295
9002693a:	455b      	cmp	r3, fp
9002693c:	f280 813a 	bge.w	90026bb4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
90026940:	2800      	cmp	r0, #0
90026942:	f2c0 8137 	blt.w	90026bb4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
90026946:	f10e 3bff 	add.w	fp, lr, #4294967295
9002694a:	4558      	cmp	r0, fp
9002694c:	f280 8132 	bge.w	90026bb4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
90026950:	9a06      	ldr	r2, [sp, #24]
90026952:	fb00 3302 	mla	r3, r0, r2, r3
90026956:	0858      	lsrs	r0, r3, #1
90026958:	07da      	lsls	r2, r3, #31
9002695a:	9a08      	ldr	r2, [sp, #32]
9002695c:	f817 c000 	ldrb.w	ip, [r7, r0]
90026960:	bf54      	ite	pl
90026962:	f00c 0c0f 	andpl.w	ip, ip, #15
90026966:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
9002696a:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
9002696e:	fa5f fc8c 	uxtb.w	ip, ip
90026972:	2a00      	cmp	r2, #0
90026974:	f000 80cc 	beq.w	90026b10 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
90026978:	1c58      	adds	r0, r3, #1
9002697a:	ea4f 0e50 	mov.w	lr, r0, lsr #1
9002697e:	07c0      	lsls	r0, r0, #31
90026980:	f817 e00e 	ldrb.w	lr, [r7, lr]
90026984:	bf54      	ite	pl
90026986:	f00e 0e0f 	andpl.w	lr, lr, #15
9002698a:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
9002698e:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
90026992:	fa5f fe8e 	uxtb.w	lr, lr
90026996:	f8cd e034 	str.w	lr, [sp, #52]	; 0x34
9002699a:	b1b9      	cbz	r1, 900269cc <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
9002699c:	4453      	add	r3, sl
9002699e:	0858      	lsrs	r0, r3, #1
900269a0:	07da      	lsls	r2, r3, #31
900269a2:	5c38      	ldrb	r0, [r7, r0]
900269a4:	bf54      	ite	pl
900269a6:	f000 000f 	andpl.w	r0, r0, #15
900269aa:	1100      	asrmi	r0, r0, #4
900269ac:	eb00 1000 	add.w	r0, r0, r0, lsl #4
900269b0:	b2c0      	uxtb	r0, r0
900269b2:	900a      	str	r0, [sp, #40]	; 0x28
900269b4:	1c58      	adds	r0, r3, #1
900269b6:	0843      	lsrs	r3, r0, #1
900269b8:	07c2      	lsls	r2, r0, #31
900269ba:	5cfb      	ldrb	r3, [r7, r3]
900269bc:	bf54      	ite	pl
900269be:	f003 030f 	andpl.w	r3, r3, #15
900269c2:	111b      	asrmi	r3, r3, #4
900269c4:	eb03 1303 	add.w	r3, r3, r3, lsl #4
900269c8:	b2db      	uxtb	r3, r3
900269ca:	930e      	str	r3, [sp, #56]	; 0x38
900269cc:	f8bd 2020 	ldrh.w	r2, [sp, #32]
900269d0:	b289      	uxth	r1, r1
900269d2:	fb02 f301 	mul.w	r3, r2, r1
900269d6:	0112      	lsls	r2, r2, #4
900269d8:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
900269dc:	f5c2 7080 	rsb	r0, r2, #256	; 0x100
900269e0:	1ad2      	subs	r2, r2, r3
900269e2:	b289      	uxth	r1, r1
900269e4:	b292      	uxth	r2, r2
900269e6:	1a40      	subs	r0, r0, r1
900269e8:	fa1f fe80 	uxth.w	lr, r0
900269ec:	980d      	ldr	r0, [sp, #52]	; 0x34
900269ee:	4342      	muls	r2, r0
900269f0:	fb0c 2c0e 	mla	ip, ip, lr, r2
900269f4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
900269f6:	fb01 c102 	mla	r1, r1, r2, ip
900269fa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
900269fc:	fb03 1302 	mla	r3, r3, r2, r1
90026a00:	f3c3 2307 	ubfx	r3, r3, #8, #8
90026a04:	2bff      	cmp	r3, #255	; 0xff
90026a06:	f040 8094 	bne.w	90026b32 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ae>
90026a0a:	4bbf      	ldr	r3, [pc, #764]	; (90026d08 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x484>)
90026a0c:	681a      	ldr	r2, [r3, #0]
90026a0e:	4bbf      	ldr	r3, [pc, #764]	; (90026d0c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x488>)
90026a10:	0951      	lsrs	r1, r2, #5
90026a12:	ea03 2312 	and.w	r3, r3, r2, lsr #8
90026a16:	f3c2 02c4 	ubfx	r2, r2, #3, #5
90026a1a:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
90026a1e:	430b      	orrs	r3, r1
90026a20:	4313      	orrs	r3, r2
90026a22:	f8a8 3000 	strh.w	r3, [r8]
90026a26:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
90026a28:	f108 0802 	add.w	r8, r8, #2
90026a2c:	441c      	add	r4, r3
90026a2e:	9b20      	ldr	r3, [sp, #128]	; 0x80
90026a30:	441e      	add	r6, r3
90026a32:	9b09      	ldr	r3, [sp, #36]	; 0x24
90026a34:	3b01      	subs	r3, #1
90026a36:	9309      	str	r3, [sp, #36]	; 0x24
90026a38:	e76d      	b.n	90026916 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
90026a3a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
90026a3c:	3d01      	subs	r5, #1
90026a3e:	f109 0902 	add.w	r9, r9, #2
90026a42:	441c      	add	r4, r3
90026a44:	9b20      	ldr	r3, [sp, #128]	; 0x80
90026a46:	441e      	add	r6, r3
90026a48:	e745      	b.n	900268d6 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
90026a4a:	d021      	beq.n	90026a90 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20c>
90026a4c:	1e6b      	subs	r3, r5, #1
90026a4e:	981f      	ldr	r0, [sp, #124]	; 0x7c
90026a50:	fb00 4003 	mla	r0, r0, r3, r4
90026a54:	1400      	asrs	r0, r0, #16
90026a56:	f53f af5a 	bmi.w	9002690e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
90026a5a:	3901      	subs	r1, #1
90026a5c:	4288      	cmp	r0, r1
90026a5e:	f6bf af56 	bge.w	9002690e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
90026a62:	9920      	ldr	r1, [sp, #128]	; 0x80
90026a64:	fb01 6303 	mla	r3, r1, r3, r6
90026a68:	141b      	asrs	r3, r3, #16
90026a6a:	f53f af50 	bmi.w	9002690e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
90026a6e:	3a01      	subs	r2, #1
90026a70:	4293      	cmp	r3, r2
90026a72:	f6bf af4c 	bge.w	9002690e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
90026a76:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
90026a7a:	46a8      	mov	r8, r5
90026a7c:	46ce      	mov	lr, r9
90026a7e:	9308      	str	r3, [sp, #32]
90026a80:	f1b8 0f00 	cmp.w	r8, #0
90026a84:	f300 80b6 	bgt.w	90026bf4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
90026a88:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
90026a8c:	eb09 0945 	add.w	r9, r9, r5, lsl #1
90026a90:	9b07      	ldr	r3, [sp, #28]
90026a92:	2b00      	cmp	r3, #0
90026a94:	f340 817e 	ble.w	90026d94 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x510>
90026a98:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
90026a9c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
90026a9e:	ee30 0a04 	vadd.f32	s0, s0, s8
90026aa2:	ee70 0aa4 	vadd.f32	s1, s1, s9
90026aa6:	eef0 6a62 	vmov.f32	s13, s5
90026aaa:	eec7 7a00 	vdiv.f32	s15, s14, s0
90026aae:	ee31 1a05 	vadd.f32	s2, s2, s10
90026ab2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
90026ab6:	ee16 4a90 	vmov	r4, s13
90026aba:	eef0 6a43 	vmov.f32	s13, s6
90026abe:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
90026ac2:	ee16 6a90 	vmov	r6, s13
90026ac6:	ee20 7aa7 	vmul.f32	s14, s1, s15
90026aca:	ee61 7a27 	vmul.f32	s15, s2, s15
90026ace:	ee77 2a62 	vsub.f32	s5, s14, s5
90026ad2:	ee37 3ac3 	vsub.f32	s6, s15, s6
90026ad6:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
90026ada:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
90026ade:	ee12 2a90 	vmov	r2, s5
90026ae2:	eef0 2a47 	vmov.f32	s5, s14
90026ae6:	fb92 f3f3 	sdiv	r3, r2, r3
90026aea:	ee13 2a10 	vmov	r2, s6
90026aee:	931f      	str	r3, [sp, #124]	; 0x7c
90026af0:	9b1c      	ldr	r3, [sp, #112]	; 0x70
90026af2:	eeb0 3a67 	vmov.f32	s6, s15
90026af6:	fb92 f3f3 	sdiv	r3, r2, r3
90026afa:	9320      	str	r3, [sp, #128]	; 0x80
90026afc:	9b07      	ldr	r3, [sp, #28]
90026afe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
90026b00:	3b01      	subs	r3, #1
90026b02:	9307      	str	r3, [sp, #28]
90026b04:	bf08      	it	eq
90026b06:	4615      	moveq	r5, r2
90026b08:	9b1c      	ldr	r3, [sp, #112]	; 0x70
90026b0a:	bf18      	it	ne
90026b0c:	461d      	movne	r5, r3
90026b0e:	e6d3      	b.n	900268b8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
90026b10:	2900      	cmp	r1, #0
90026b12:	f43f af5b 	beq.w	900269cc <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
90026b16:	eb0a 0003 	add.w	r0, sl, r3
90026b1a:	0843      	lsrs	r3, r0, #1
90026b1c:	07c0      	lsls	r0, r0, #31
90026b1e:	5cfb      	ldrb	r3, [r7, r3]
90026b20:	bf54      	ite	pl
90026b22:	f003 030f 	andpl.w	r3, r3, #15
90026b26:	111b      	asrmi	r3, r3, #4
90026b28:	eb03 1303 	add.w	r3, r3, r3, lsl #4
90026b2c:	b2db      	uxtb	r3, r3
90026b2e:	930a      	str	r3, [sp, #40]	; 0x28
90026b30:	e74c      	b.n	900269cc <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
90026b32:	2b00      	cmp	r3, #0
90026b34:	f43f af77 	beq.w	90026a26 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
90026b38:	4a73      	ldr	r2, [pc, #460]	; (90026d08 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x484>)
90026b3a:	fa1f fe83 	uxth.w	lr, r3
90026b3e:	f8b8 c000 	ldrh.w	ip, [r8]
90026b42:	43db      	mvns	r3, r3
90026b44:	6810      	ldr	r0, [r2, #0]
90026b46:	ea4f 212c 	mov.w	r1, ip, asr #8
90026b4a:	f3c0 4207 	ubfx	r2, r0, #16, #8
90026b4e:	b2db      	uxtb	r3, r3
90026b50:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
90026b54:	f3c0 2b07 	ubfx	fp, r0, #8, #8
90026b58:	fb12 f20e 	smulbb	r2, r2, lr
90026b5c:	b2c0      	uxtb	r0, r0
90026b5e:	fb1b fb0e 	smulbb	fp, fp, lr
90026b62:	fb01 2103 	mla	r1, r1, r3, r2
90026b66:	ea4f 02ec 	mov.w	r2, ip, asr #3
90026b6a:	fb10 fe0e 	smulbb	lr, r0, lr
90026b6e:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
90026b72:	b289      	uxth	r1, r1
90026b74:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
90026b78:	fa5f fc8c 	uxtb.w	ip, ip
90026b7c:	fb02 b203 	mla	r2, r2, r3, fp
90026b80:	1c48      	adds	r0, r1, #1
90026b82:	fb0c e303 	mla	r3, ip, r3, lr
90026b86:	b292      	uxth	r2, r2
90026b88:	b29b      	uxth	r3, r3
90026b8a:	eb00 2111 	add.w	r1, r0, r1, lsr #8
90026b8e:	f102 0b01 	add.w	fp, r2, #1
90026b92:	f401 4078 	and.w	r0, r1, #63488	; 0xf800
90026b96:	1c59      	adds	r1, r3, #1
90026b98:	eb0b 2212 	add.w	r2, fp, r2, lsr #8
90026b9c:	eb01 2113 	add.w	r1, r1, r3, lsr #8
90026ba0:	0952      	lsrs	r2, r2, #5
90026ba2:	f3c1 21c4 	ubfx	r1, r1, #11, #5
90026ba6:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
90026baa:	4301      	orrs	r1, r0
90026bac:	4311      	orrs	r1, r2
90026bae:	f8a8 1000 	strh.w	r1, [r8]
90026bb2:	e738      	b.n	90026a26 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
90026bb4:	f113 0b01 	adds.w	fp, r3, #1
90026bb8:	f53f af35 	bmi.w	90026a26 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
90026bbc:	45dc      	cmp	ip, fp
90026bbe:	f6ff af32 	blt.w	90026a26 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
90026bc2:	f110 0b01 	adds.w	fp, r0, #1
90026bc6:	f53f af2e 	bmi.w	90026a26 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
90026bca:	45de      	cmp	lr, fp
90026bcc:	f6ff af2b 	blt.w	90026a26 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
90026bd0:	9302      	str	r3, [sp, #8]
90026bd2:	fa0f f38e 	sxth.w	r3, lr
90026bd6:	9a08      	ldr	r2, [sp, #32]
90026bd8:	9301      	str	r3, [sp, #4]
90026bda:	fa0f f38c 	sxth.w	r3, ip
90026bde:	9105      	str	r1, [sp, #20]
90026be0:	4641      	mov	r1, r8
90026be2:	9300      	str	r3, [sp, #0]
90026be4:	4653      	mov	r3, sl
90026be6:	e9cd 0203 	strd	r0, r2, [sp, #12]
90026bea:	463a      	mov	r2, r7
90026bec:	9811      	ldr	r0, [sp, #68]	; 0x44
90026bee:	f7ff fd73 	bl	900266d8 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh>
90026bf2:	e718      	b.n	90026a26 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
90026bf4:	1422      	asrs	r2, r4, #16
90026bf6:	9906      	ldr	r1, [sp, #24]
90026bf8:	1433      	asrs	r3, r6, #16
90026bfa:	f3c4 3003 	ubfx	r0, r4, #12, #4
90026bfe:	f3c6 3c03 	ubfx	ip, r6, #12, #4
90026c02:	fb01 2303 	mla	r3, r1, r3, r2
90026c06:	085a      	lsrs	r2, r3, #1
90026c08:	07d9      	lsls	r1, r3, #31
90026c0a:	5cba      	ldrb	r2, [r7, r2]
90026c0c:	bf54      	ite	pl
90026c0e:	f002 020f 	andpl.w	r2, r2, #15
90026c12:	1112      	asrmi	r2, r2, #4
90026c14:	eb02 1202 	add.w	r2, r2, r2, lsl #4
90026c18:	b2d2      	uxtb	r2, r2
90026c1a:	2800      	cmp	r0, #0
90026c1c:	d063      	beq.n	90026ce6 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x462>
90026c1e:	f103 0a01 	add.w	sl, r3, #1
90026c22:	ea4f 015a 	mov.w	r1, sl, lsr #1
90026c26:	f01a 0f01 	tst.w	sl, #1
90026c2a:	5c79      	ldrb	r1, [r7, r1]
90026c2c:	bf0c      	ite	eq
90026c2e:	f001 010f 	andeq.w	r1, r1, #15
90026c32:	1109      	asrne	r1, r1, #4
90026c34:	eb01 1101 	add.w	r1, r1, r1, lsl #4
90026c38:	b2c9      	uxtb	r1, r1
90026c3a:	910f      	str	r1, [sp, #60]	; 0x3c
90026c3c:	f1bc 0f00 	cmp.w	ip, #0
90026c40:	d01a      	beq.n	90026c78 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f4>
90026c42:	9908      	ldr	r1, [sp, #32]
90026c44:	440b      	add	r3, r1
90026c46:	0859      	lsrs	r1, r3, #1
90026c48:	f013 0f01 	tst.w	r3, #1
90026c4c:	f103 0301 	add.w	r3, r3, #1
90026c50:	5c79      	ldrb	r1, [r7, r1]
90026c52:	bf0c      	ite	eq
90026c54:	f001 010f 	andeq.w	r1, r1, #15
90026c58:	1109      	asrne	r1, r1, #4
90026c5a:	eb01 1101 	add.w	r1, r1, r1, lsl #4
90026c5e:	b2c9      	uxtb	r1, r1
90026c60:	910b      	str	r1, [sp, #44]	; 0x2c
90026c62:	0859      	lsrs	r1, r3, #1
90026c64:	07db      	lsls	r3, r3, #31
90026c66:	5c79      	ldrb	r1, [r7, r1]
90026c68:	bf54      	ite	pl
90026c6a:	f001 010f 	andpl.w	r1, r1, #15
90026c6e:	1109      	asrmi	r1, r1, #4
90026c70:	eb01 1101 	add.w	r1, r1, r1, lsl #4
90026c74:	b2c9      	uxtb	r1, r1
90026c76:	9110      	str	r1, [sp, #64]	; 0x40
90026c78:	b280      	uxth	r0, r0
90026c7a:	fa1f fc8c 	uxth.w	ip, ip
90026c7e:	fb00 f30c 	mul.w	r3, r0, ip
90026c82:	0100      	lsls	r0, r0, #4
90026c84:	ebc3 1c0c 	rsb	ip, r3, ip, lsl #4
90026c88:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
90026c8c:	1ac0      	subs	r0, r0, r3
90026c8e:	fa1f fc8c 	uxth.w	ip, ip
90026c92:	b280      	uxth	r0, r0
90026c94:	eba1 010c 	sub.w	r1, r1, ip
90026c98:	fa1f fa81 	uxth.w	sl, r1
90026c9c:	990f      	ldr	r1, [sp, #60]	; 0x3c
90026c9e:	4348      	muls	r0, r1
90026ca0:	990b      	ldr	r1, [sp, #44]	; 0x2c
90026ca2:	fb02 020a 	mla	r2, r2, sl, r0
90026ca6:	fb0c 2c01 	mla	ip, ip, r1, r2
90026caa:	9a10      	ldr	r2, [sp, #64]	; 0x40
90026cac:	fb03 c302 	mla	r3, r3, r2, ip
90026cb0:	f3c3 2307 	ubfx	r3, r3, #8, #8
90026cb4:	2bff      	cmp	r3, #255	; 0xff
90026cb6:	d12b      	bne.n	90026d10 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48c>
90026cb8:	4b13      	ldr	r3, [pc, #76]	; (90026d08 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x484>)
90026cba:	681a      	ldr	r2, [r3, #0]
90026cbc:	4b13      	ldr	r3, [pc, #76]	; (90026d0c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x488>)
90026cbe:	0951      	lsrs	r1, r2, #5
90026cc0:	ea03 2312 	and.w	r3, r3, r2, lsr #8
90026cc4:	f3c2 02c4 	ubfx	r2, r2, #3, #5
90026cc8:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
90026ccc:	430b      	orrs	r3, r1
90026cce:	4313      	orrs	r3, r2
90026cd0:	f8ae 3000 	strh.w	r3, [lr]
90026cd4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
90026cd6:	f10e 0e02 	add.w	lr, lr, #2
90026cda:	f108 38ff 	add.w	r8, r8, #4294967295
90026cde:	441c      	add	r4, r3
90026ce0:	9b20      	ldr	r3, [sp, #128]	; 0x80
90026ce2:	441e      	add	r6, r3
90026ce4:	e6cc      	b.n	90026a80 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fc>
90026ce6:	f1bc 0f00 	cmp.w	ip, #0
90026cea:	d0c5      	beq.n	90026c78 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f4>
90026cec:	9908      	ldr	r1, [sp, #32]
90026cee:	440b      	add	r3, r1
90026cf0:	0859      	lsrs	r1, r3, #1
90026cf2:	07db      	lsls	r3, r3, #31
90026cf4:	5c79      	ldrb	r1, [r7, r1]
90026cf6:	bf54      	ite	pl
90026cf8:	f001 010f 	andpl.w	r1, r1, #15
90026cfc:	1109      	asrmi	r1, r1, #4
90026cfe:	eb01 1101 	add.w	r1, r1, r1, lsl #4
90026d02:	b2c9      	uxtb	r1, r1
90026d04:	910b      	str	r1, [sp, #44]	; 0x2c
90026d06:	e7b7      	b.n	90026c78 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f4>
90026d08:	240281fc 	.word	0x240281fc
90026d0c:	fffff800 	.word	0xfffff800
90026d10:	2b00      	cmp	r3, #0
90026d12:	d0df      	beq.n	90026cd4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x450>
90026d14:	4a21      	ldr	r2, [pc, #132]	; (90026d9c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x518>)
90026d16:	fa1f fa83 	uxth.w	sl, r3
90026d1a:	f8be c000 	ldrh.w	ip, [lr]
90026d1e:	43db      	mvns	r3, r3
90026d20:	6810      	ldr	r0, [r2, #0]
90026d22:	ea4f 212c 	mov.w	r1, ip, asr #8
90026d26:	f3c0 4207 	ubfx	r2, r0, #16, #8
90026d2a:	b2db      	uxtb	r3, r3
90026d2c:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
90026d30:	f3c0 2b07 	ubfx	fp, r0, #8, #8
90026d34:	fb12 f20a 	smulbb	r2, r2, sl
90026d38:	b2c0      	uxtb	r0, r0
90026d3a:	fb1b fb0a 	smulbb	fp, fp, sl
90026d3e:	fb01 2103 	mla	r1, r1, r3, r2
90026d42:	ea4f 02ec 	mov.w	r2, ip, asr #3
90026d46:	fb10 f00a 	smulbb	r0, r0, sl
90026d4a:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
90026d4e:	b289      	uxth	r1, r1
90026d50:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
90026d54:	fa5f fc8c 	uxtb.w	ip, ip
90026d58:	fb02 b203 	mla	r2, r2, r3, fp
90026d5c:	fb0c 0003 	mla	r0, ip, r3, r0
90026d60:	1c4b      	adds	r3, r1, #1
90026d62:	b292      	uxth	r2, r2
90026d64:	b280      	uxth	r0, r0
90026d66:	eb03 2111 	add.w	r1, r3, r1, lsr #8
90026d6a:	f100 0b01 	add.w	fp, r0, #1
90026d6e:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
90026d72:	eb0b 2b10 	add.w	fp, fp, r0, lsr #8
90026d76:	f3cb 2bc4 	ubfx	fp, fp, #11, #5
90026d7a:	ea4b 0101 	orr.w	r1, fp, r1
90026d7e:	f102 0b01 	add.w	fp, r2, #1
90026d82:	eb0b 2212 	add.w	r2, fp, r2, lsr #8
90026d86:	0952      	lsrs	r2, r2, #5
90026d88:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
90026d8c:	4311      	orrs	r1, r2
90026d8e:	f8ae 1000 	strh.w	r1, [lr]
90026d92:	e79f      	b.n	90026cd4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x450>
90026d94:	b013      	add	sp, #76	; 0x4c
90026d96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90026d9a:	bf00      	nop
90026d9c:	240281fc 	.word	0x240281fc

90026da0 <CRC_Lock>:
90026da0:	4a20      	ldr	r2, [pc, #128]	; (90026e24 <CRC_Lock+0x84>)
90026da2:	b530      	push	{r4, r5, lr}
90026da4:	6813      	ldr	r3, [r2, #0]
90026da6:	f64f 74f0 	movw	r4, #65520	; 0xfff0
90026daa:	f24c 2540 	movw	r5, #49728	; 0xc240
90026dae:	f023 0301 	bic.w	r3, r3, #1
90026db2:	6013      	str	r3, [r2, #0]
90026db4:	4b1c      	ldr	r3, [pc, #112]	; (90026e28 <CRC_Lock+0x88>)
90026db6:	681a      	ldr	r2, [r3, #0]
90026db8:	4022      	ands	r2, r4
90026dba:	42aa      	cmp	r2, r5
90026dbc:	d005      	beq.n	90026dca <CRC_Lock+0x2a>
90026dbe:	681b      	ldr	r3, [r3, #0]
90026dc0:	f24c 2270 	movw	r2, #49776	; 0xc270
90026dc4:	4023      	ands	r3, r4
90026dc6:	4293      	cmp	r3, r2
90026dc8:	d124      	bne.n	90026e14 <CRC_Lock+0x74>
90026dca:	4b18      	ldr	r3, [pc, #96]	; (90026e2c <CRC_Lock+0x8c>)
90026dcc:	681b      	ldr	r3, [r3, #0]
90026dce:	bb0b      	cbnz	r3, 90026e14 <CRC_Lock+0x74>
90026dd0:	4b17      	ldr	r3, [pc, #92]	; (90026e30 <CRC_Lock+0x90>)
90026dd2:	681a      	ldr	r2, [r3, #0]
90026dd4:	f3c2 020b 	ubfx	r2, r2, #0, #12
90026dd8:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
90026ddc:	d00d      	beq.n	90026dfa <CRC_Lock+0x5a>
90026dde:	681a      	ldr	r2, [r3, #0]
90026de0:	f240 4483 	movw	r4, #1155	; 0x483
90026de4:	f3c2 020b 	ubfx	r2, r2, #0, #12
90026de8:	42a2      	cmp	r2, r4
90026dea:	d006      	beq.n	90026dfa <CRC_Lock+0x5a>
90026dec:	681b      	ldr	r3, [r3, #0]
90026dee:	f240 4285 	movw	r2, #1157	; 0x485
90026df2:	f3c3 030b 	ubfx	r3, r3, #0, #12
90026df6:	4293      	cmp	r3, r2
90026df8:	d10c      	bne.n	90026e14 <CRC_Lock+0x74>
90026dfa:	4b0e      	ldr	r3, [pc, #56]	; (90026e34 <CRC_Lock+0x94>)
90026dfc:	2201      	movs	r2, #1
90026dfe:	601a      	str	r2, [r3, #0]
90026e00:	681a      	ldr	r2, [r3, #0]
90026e02:	2a00      	cmp	r2, #0
90026e04:	d1fc      	bne.n	90026e00 <CRC_Lock+0x60>
90026e06:	4b0c      	ldr	r3, [pc, #48]	; (90026e38 <CRC_Lock+0x98>)
90026e08:	6018      	str	r0, [r3, #0]
90026e0a:	6818      	ldr	r0, [r3, #0]
90026e0c:	1a43      	subs	r3, r0, r1
90026e0e:	4258      	negs	r0, r3
90026e10:	4158      	adcs	r0, r3
90026e12:	bd30      	pop	{r4, r5, pc}
90026e14:	4b09      	ldr	r3, [pc, #36]	; (90026e3c <CRC_Lock+0x9c>)
90026e16:	2201      	movs	r2, #1
90026e18:	601a      	str	r2, [r3, #0]
90026e1a:	681a      	ldr	r2, [r3, #0]
90026e1c:	2a00      	cmp	r2, #0
90026e1e:	d1fc      	bne.n	90026e1a <CRC_Lock+0x7a>
90026e20:	4b07      	ldr	r3, [pc, #28]	; (90026e40 <CRC_Lock+0xa0>)
90026e22:	e7f1      	b.n	90026e08 <CRC_Lock+0x68>
90026e24:	e0002000 	.word	0xe0002000
90026e28:	e000ed00 	.word	0xe000ed00
90026e2c:	e0042000 	.word	0xe0042000
90026e30:	5c001000 	.word	0x5c001000
90026e34:	58024c08 	.word	0x58024c08
90026e38:	58024c00 	.word	0x58024c00
90026e3c:	40023008 	.word	0x40023008
90026e40:	40023000 	.word	0x40023000

90026e44 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>:
90026e44:	6101      	str	r1, [r0, #16]
90026e46:	4770      	bx	lr

90026e48 <_ZN8touchgfx8Gestures4tickEv>:
90026e48:	7b83      	ldrb	r3, [r0, #14]
90026e4a:	b14b      	cbz	r3, 90026e60 <_ZN8touchgfx8Gestures4tickEv+0x18>
90026e4c:	8903      	ldrh	r3, [r0, #8]
90026e4e:	3301      	adds	r3, #1
90026e50:	b29b      	uxth	r3, r3
90026e52:	2b07      	cmp	r3, #7
90026e54:	8103      	strh	r3, [r0, #8]
90026e56:	bf81      	itttt	hi
90026e58:	2300      	movhi	r3, #0
90026e5a:	8143      	strhhi	r3, [r0, #10]
90026e5c:	8183      	strhhi	r3, [r0, #12]
90026e5e:	7383      	strbhi	r3, [r0, #14]
90026e60:	4770      	bx	lr
	...

90026e64 <_ZN8touchgfx8Gestures17registerDragEventEtttt>:
90026e64:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
90026e68:	4698      	mov	r8, r3
90026e6a:	8883      	ldrh	r3, [r0, #4]
90026e6c:	4604      	mov	r4, r0
90026e6e:	4617      	mov	r7, r2
90026e70:	f8ad 3006 	strh.w	r3, [sp, #6]
90026e74:	eba8 0303 	sub.w	r3, r8, r3
90026e78:	4a19      	ldr	r2, [pc, #100]	; (90026ee0 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x7c>)
90026e7a:	460e      	mov	r6, r1
90026e7c:	b21b      	sxth	r3, r3
90026e7e:	88c1      	ldrh	r1, [r0, #6]
90026e80:	9200      	str	r2, [sp, #0]
90026e82:	2000      	movs	r0, #0
90026e84:	2b00      	cmp	r3, #0
90026e86:	8aa2      	ldrh	r2, [r4, #20]
90026e88:	f8bd 5028 	ldrh.w	r5, [sp, #40]	; 0x28
90026e8c:	bfb8      	it	lt
90026e8e:	425b      	neglt	r3, r3
90026e90:	f88d 0004 	strb.w	r0, [sp, #4]
90026e94:	f8ad 1008 	strh.w	r1, [sp, #8]
90026e98:	b21b      	sxth	r3, r3
90026e9a:	f8ad 800a 	strh.w	r8, [sp, #10]
90026e9e:	f8ad 500c 	strh.w	r5, [sp, #12]
90026ea2:	4293      	cmp	r3, r2
90026ea4:	dc07      	bgt.n	90026eb6 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x52>
90026ea6:	1a69      	subs	r1, r5, r1
90026ea8:	b209      	sxth	r1, r1
90026eaa:	2900      	cmp	r1, #0
90026eac:	bfb8      	it	lt
90026eae:	4249      	neglt	r1, r1
90026eb0:	b209      	sxth	r1, r1
90026eb2:	428a      	cmp	r2, r1
90026eb4:	da10      	bge.n	90026ed8 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x74>
90026eb6:	6920      	ldr	r0, [r4, #16]
90026eb8:	4669      	mov	r1, sp
90026eba:	eba8 0606 	sub.w	r6, r8, r6
90026ebe:	1bef      	subs	r7, r5, r7
90026ec0:	6803      	ldr	r3, [r0, #0]
90026ec2:	685b      	ldr	r3, [r3, #4]
90026ec4:	4798      	blx	r3
90026ec6:	2300      	movs	r3, #0
90026ec8:	2001      	movs	r0, #1
90026eca:	8166      	strh	r6, [r4, #10]
90026ecc:	8123      	strh	r3, [r4, #8]
90026ece:	81a7      	strh	r7, [r4, #12]
90026ed0:	f8a4 8004 	strh.w	r8, [r4, #4]
90026ed4:	80e5      	strh	r5, [r4, #6]
90026ed6:	73a0      	strb	r0, [r4, #14]
90026ed8:	b004      	add	sp, #16
90026eda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
90026ede:	bf00      	nop
90026ee0:	9002c43c 	.word	0x9002c43c

90026ee4 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>:
90026ee4:	b5f0      	push	{r4, r5, r6, r7, lr}
90026ee6:	461e      	mov	r6, r3
90026ee8:	1e4b      	subs	r3, r1, #1
90026eea:	b085      	sub	sp, #20
90026eec:	4604      	mov	r4, r0
90026eee:	2b01      	cmp	r3, #1
90026ef0:	460d      	mov	r5, r1
90026ef2:	4617      	mov	r7, r2
90026ef4:	d84b      	bhi.n	90026f8e <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xaa>
90026ef6:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
90026efa:	1cd3      	adds	r3, r2, #3
90026efc:	b29b      	uxth	r3, r3
90026efe:	2b06      	cmp	r3, #6
90026f00:	d916      	bls.n	90026f30 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x4c>
90026f02:	f8df c0a0 	ldr.w	ip, [pc, #160]	; 90026fa4 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
90026f06:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
90026f0a:	f8cd c004 	str.w	ip, [sp, #4]
90026f0e:	f04f 0c00 	mov.w	ip, #0
90026f12:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
90026f16:	6900      	ldr	r0, [r0, #16]
90026f18:	f8ad 100c 	strh.w	r1, [sp, #12]
90026f1c:	a901      	add	r1, sp, #4
90026f1e:	f88d c008 	strb.w	ip, [sp, #8]
90026f22:	f8ad 200a 	strh.w	r2, [sp, #10]
90026f26:	f8ad 300e 	strh.w	r3, [sp, #14]
90026f2a:	6803      	ldr	r3, [r0, #0]
90026f2c:	689b      	ldr	r3, [r3, #8]
90026f2e:	4798      	blx	r3
90026f30:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
90026f34:	1cd3      	adds	r3, r2, #3
90026f36:	b29b      	uxth	r3, r3
90026f38:	2b06      	cmp	r3, #6
90026f3a:	d916      	bls.n	90026f6a <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
90026f3c:	f8df c064 	ldr.w	ip, [pc, #100]	; 90026fa4 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
90026f40:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
90026f44:	f8cd c004 	str.w	ip, [sp, #4]
90026f48:	f04f 0c01 	mov.w	ip, #1
90026f4c:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
90026f50:	6920      	ldr	r0, [r4, #16]
90026f52:	f8ad 100c 	strh.w	r1, [sp, #12]
90026f56:	a901      	add	r1, sp, #4
90026f58:	f88d c008 	strb.w	ip, [sp, #8]
90026f5c:	f8ad 200a 	strh.w	r2, [sp, #10]
90026f60:	f8ad 300e 	strh.w	r3, [sp, #14]
90026f64:	6803      	ldr	r3, [r0, #0]
90026f66:	689b      	ldr	r3, [r3, #8]
90026f68:	4798      	blx	r3
90026f6a:	4b0d      	ldr	r3, [pc, #52]	; (90026fa0 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xbc>)
90026f6c:	a901      	add	r1, sp, #4
90026f6e:	6920      	ldr	r0, [r4, #16]
90026f70:	9301      	str	r3, [sp, #4]
90026f72:	2300      	movs	r3, #0
90026f74:	f88d 5008 	strb.w	r5, [sp, #8]
90026f78:	f8ad 700a 	strh.w	r7, [sp, #10]
90026f7c:	f8ad 600c 	strh.w	r6, [sp, #12]
90026f80:	f8ad 300e 	strh.w	r3, [sp, #14]
90026f84:	6803      	ldr	r3, [r0, #0]
90026f86:	681b      	ldr	r3, [r3, #0]
90026f88:	4798      	blx	r3
90026f8a:	b005      	add	sp, #20
90026f8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
90026f8e:	2900      	cmp	r1, #0
90026f90:	d1eb      	bne.n	90026f6a <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
90026f92:	80a2      	strh	r2, [r4, #4]
90026f94:	80c6      	strh	r6, [r0, #6]
90026f96:	60a1      	str	r1, [r4, #8]
90026f98:	81a1      	strh	r1, [r4, #12]
90026f9a:	73a1      	strb	r1, [r4, #14]
90026f9c:	e7e5      	b.n	90026f6a <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
90026f9e:	bf00      	nop
90026fa0:	9002c428 	.word	0x9002c428
90026fa4:	9002c450 	.word	0x9002c450

90026fa8 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.5>:
90026fa8:	10c9      	asrs	r1, r1, #3
90026faa:	2900      	cmp	r1, #0
90026fac:	bfb8      	it	lt
90026fae:	4249      	neglt	r1, r1
90026fb0:	2801      	cmp	r0, #1
90026fb2:	d108      	bne.n	90026fc6 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.5+0x1e>
90026fb4:	f3c1 0008 	ubfx	r0, r1, #0, #9
90026fb8:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
90026fbc:	4601      	mov	r1, r0
90026fbe:	dd02      	ble.n	90026fc6 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.5+0x1e>
90026fc0:	f5c0 7000 	rsb	r0, r0, #512	; 0x200
90026fc4:	4770      	bx	lr
90026fc6:	29ff      	cmp	r1, #255	; 0xff
90026fc8:	bfa8      	it	ge
90026fca:	21ff      	movge	r1, #255	; 0xff
90026fcc:	4608      	mov	r0, r1
90026fce:	4770      	bx	lr

90026fd0 <_ZN8touchgfx10Rasterizer6lineToEii>:
90026fd0:	b410      	push	{r4}
90026fd2:	e9d0 3401 	ldrd	r3, r4, [r0, #4]
90026fd6:	429c      	cmp	r4, r3
90026fd8:	d803      	bhi.n	90026fe2 <_ZN8touchgfx10Rasterizer6lineToEii+0x12>
90026fda:	f85d 4b04 	ldr.w	r4, [sp], #4
90026fde:	f7ef ba63 	b.w	900164a8 <_ZN8touchgfx7Outline6lineToEii>
90026fe2:	f85d 4b04 	ldr.w	r4, [sp], #4
90026fe6:	4770      	bx	lr

90026fe8 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh>:
90026fe8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90026fec:	b08b      	sub	sp, #44	; 0x2c
90026fee:	4606      	mov	r6, r0
90026ff0:	468a      	mov	sl, r1
90026ff2:	e9cd 2306 	strd	r2, r3, [sp, #24]
90026ff6:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
90026ffa:	9308      	str	r3, [sp, #32]
90026ffc:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
90027000:	9309      	str	r3, [sp, #36]	; 0x24
90027002:	f7ef fbbc 	bl	9001677e <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv>
90027006:	68b5      	ldr	r5, [r6, #8]
90027008:	4604      	mov	r4, r0
9002700a:	2d00      	cmp	r5, #0
9002700c:	d044      	beq.n	90027098 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb0>
9002700e:	6873      	ldr	r3, [r6, #4]
90027010:	42ab      	cmp	r3, r5
90027012:	d33d      	bcc.n	90027090 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xa8>
90027014:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
90027018:	f04f 0800 	mov.w	r8, #0
9002701c:	f9b6 2034 	ldrsh.w	r2, [r6, #52]	; 0x34
90027020:	eb02 0b03 	add.w	fp, r2, r3
90027024:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
90027028:	fb02 1203 	mla	r2, r2, r3, r1
9002702c:	9205      	str	r2, [sp, #20]
9002702e:	1e6a      	subs	r2, r5, #1
90027030:	9204      	str	r2, [sp, #16]
90027032:	f9b4 9002 	ldrsh.w	r9, [r4, #2]
90027036:	f9b4 7000 	ldrsh.w	r7, [r4]
9002703a:	454b      	cmp	r3, r9
9002703c:	463a      	mov	r2, r7
9002703e:	d008      	beq.n	90027052 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x6a>
90027040:	f9b6 3034 	ldrsh.w	r3, [r6, #52]	; 0x34
90027044:	eb03 0b09 	add.w	fp, r3, r9
90027048:	e9dd 1306 	ldrd	r1, r3, [sp, #24]
9002704c:	fb03 1309 	mla	r3, r3, r9, r1
90027050:	9305      	str	r3, [sp, #20]
90027052:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
90027056:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
9002705a:	4498      	add	r8, r3
9002705c:	9b04      	ldr	r3, [sp, #16]
9002705e:	3b01      	subs	r3, #1
90027060:	9304      	str	r3, [sp, #16]
90027062:	9b04      	ldr	r3, [sp, #16]
90027064:	3301      	adds	r3, #1
90027066:	d015      	beq.n	90027094 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xac>
90027068:	f934 3f08 	ldrsh.w	r3, [r4, #8]!
9002706c:	42bb      	cmp	r3, r7
9002706e:	d117      	bne.n	900270a0 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb8>
90027070:	f9b4 0002 	ldrsh.w	r0, [r4, #2]
90027074:	9b04      	ldr	r3, [sp, #16]
90027076:	4548      	cmp	r0, r9
90027078:	f103 33ff 	add.w	r3, r3, #4294967295
9002707c:	d17d      	bne.n	9002717a <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x192>
9002707e:	f9b4 0006 	ldrsh.w	r0, [r4, #6]
90027082:	4401      	add	r1, r0
90027084:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
90027088:	4480      	add	r8, r0
9002708a:	e7e9      	b.n	90027060 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x78>
9002708c:	461f      	mov	r7, r3
9002708e:	e042      	b.n	90027116 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x12e>
90027090:	2000      	movs	r0, #0
90027092:	e002      	b.n	9002709a <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb2>
90027094:	2900      	cmp	r1, #0
90027096:	d16d      	bne.n	90027174 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x18c>
90027098:	2001      	movs	r0, #1
9002709a:	b00b      	add	sp, #44	; 0x2c
9002709c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
900270a0:	b379      	cbz	r1, 90027102 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x11a>
900270a2:	2f00      	cmp	r7, #0
900270a4:	db29      	blt.n	900270fa <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x112>
900270a6:	f9b6 3036 	ldrsh.w	r3, [r6, #54]	; 0x36
900270aa:	42bb      	cmp	r3, r7
900270ac:	dd25      	ble.n	900270fa <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x112>
900270ae:	ebc1 1188 	rsb	r1, r1, r8, lsl #6
900270b2:	f896 0030 	ldrb.w	r0, [r6, #48]	; 0x30
900270b6:	f7ff ff77 	bl	90026fa8 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.5>
900270ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
900270bc:	fb10 f003 	smulbb	r0, r0, r3
900270c0:	b280      	uxth	r0, r0
900270c2:	1c41      	adds	r1, r0, #1
900270c4:	eb01 2110 	add.w	r1, r1, r0, lsr #8
900270c8:	1209      	asrs	r1, r1, #8
900270ca:	f011 0fff 	tst.w	r1, #255	; 0xff
900270ce:	d014      	beq.n	900270fa <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x112>
900270d0:	b2c9      	uxtb	r1, r1
900270d2:	9808      	ldr	r0, [sp, #32]
900270d4:	b2ba      	uxth	r2, r7
900270d6:	8e73      	ldrh	r3, [r6, #50]	; 0x32
900270d8:	9102      	str	r1, [sp, #8]
900270da:	2101      	movs	r1, #1
900270dc:	4413      	add	r3, r2
900270de:	4402      	add	r2, r0
900270e0:	9101      	str	r1, [sp, #4]
900270e2:	fa0f f18b 	sxth.w	r1, fp
900270e6:	f8da 0000 	ldr.w	r0, [sl]
900270ea:	b21b      	sxth	r3, r3
900270ec:	9100      	str	r1, [sp, #0]
900270ee:	b212      	sxth	r2, r2
900270f0:	6941      	ldr	r1, [r0, #20]
900270f2:	4650      	mov	r0, sl
900270f4:	460d      	mov	r5, r1
900270f6:	9905      	ldr	r1, [sp, #20]
900270f8:	47a8      	blx	r5
900270fa:	9b04      	ldr	r3, [sp, #16]
900270fc:	1c7a      	adds	r2, r7, #1
900270fe:	3301      	adds	r3, #1
90027100:	d0ca      	beq.n	90027098 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb0>
90027102:	f9b4 7000 	ldrsh.w	r7, [r4]
90027106:	1abb      	subs	r3, r7, r2
90027108:	2b00      	cmp	r3, #0
9002710a:	dd31      	ble.n	90027170 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
9002710c:	2a00      	cmp	r2, #0
9002710e:	dabd      	bge.n	9002708c <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xa4>
90027110:	2f00      	cmp	r7, #0
90027112:	dd2d      	ble.n	90027170 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
90027114:	2200      	movs	r2, #0
90027116:	f9b6 3036 	ldrsh.w	r3, [r6, #54]	; 0x36
9002711a:	19d1      	adds	r1, r2, r7
9002711c:	4299      	cmp	r1, r3
9002711e:	db02      	blt.n	90027126 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x13e>
90027120:	1a9f      	subs	r7, r3, r2
90027122:	2f00      	cmp	r7, #0
90027124:	dd24      	ble.n	90027170 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
90027126:	ea4f 1188 	mov.w	r1, r8, lsl #6
9002712a:	f896 0030 	ldrb.w	r0, [r6, #48]	; 0x30
9002712e:	f7ff ff3b 	bl	90026fa8 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.5>
90027132:	9b09      	ldr	r3, [sp, #36]	; 0x24
90027134:	fb10 f003 	smulbb	r0, r0, r3
90027138:	b280      	uxth	r0, r0
9002713a:	1c41      	adds	r1, r0, #1
9002713c:	eb01 2110 	add.w	r1, r1, r0, lsr #8
90027140:	1209      	asrs	r1, r1, #8
90027142:	f011 0fff 	tst.w	r1, #255	; 0xff
90027146:	d013      	beq.n	90027170 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
90027148:	b292      	uxth	r2, r2
9002714a:	9808      	ldr	r0, [sp, #32]
9002714c:	b2c9      	uxtb	r1, r1
9002714e:	8e73      	ldrh	r3, [r6, #50]	; 0x32
90027150:	b23f      	sxth	r7, r7
90027152:	4413      	add	r3, r2
90027154:	9102      	str	r1, [sp, #8]
90027156:	4402      	add	r2, r0
90027158:	fa0f f18b 	sxth.w	r1, fp
9002715c:	f8da 0000 	ldr.w	r0, [sl]
90027160:	b21b      	sxth	r3, r3
90027162:	9100      	str	r1, [sp, #0]
90027164:	b212      	sxth	r2, r2
90027166:	9701      	str	r7, [sp, #4]
90027168:	9905      	ldr	r1, [sp, #20]
9002716a:	6947      	ldr	r7, [r0, #20]
9002716c:	4650      	mov	r0, sl
9002716e:	47b8      	blx	r7
90027170:	464b      	mov	r3, r9
90027172:	e75e      	b.n	90027032 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x4a>
90027174:	2f00      	cmp	r7, #0
90027176:	da96      	bge.n	900270a6 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xbe>
90027178:	e78e      	b.n	90027098 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb0>
9002717a:	2900      	cmp	r1, #0
9002717c:	d0f8      	beq.n	90027170 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
9002717e:	e790      	b.n	900270a2 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xba>

90027180 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE>:
90027180:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
90027184:	4b4a      	ldr	r3, [pc, #296]	; (900272b0 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x130>)
90027186:	2500      	movs	r5, #0
90027188:	f100 0620 	add.w	r6, r0, #32
9002718c:	4604      	mov	r4, r0
9002718e:	4690      	mov	r8, r2
90027190:	f100 0718 	add.w	r7, r0, #24
90027194:	e9c0 3100 	strd	r3, r1, [r0]
90027198:	e9c0 5502 	strd	r5, r5, [r0, #8]
9002719c:	e9c0 5504 	strd	r5, r5, [r0, #16]
900271a0:	e9c0 5506 	strd	r5, r5, [r0, #24]
900271a4:	4630      	mov	r0, r6
900271a6:	f7ee fcc5 	bl	90015b34 <_ZN8touchgfx7OutlineC1Ev>
900271aa:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
900271ae:	f8a4 5052 	strh.w	r5, [r4, #82]	; 0x52
900271b2:	f8a4 5054 	strh.w	r5, [r4, #84]	; 0x54
900271b6:	f8a4 5056 	strh.w	r5, [r4, #86]	; 0x56
900271ba:	f884 5058 	strb.w	r5, [r4, #88]	; 0x58
900271be:	f884 5059 	strb.w	r5, [r4, #89]	; 0x59
900271c2:	f8a4 5064 	strh.w	r5, [r4, #100]	; 0x64
900271c6:	f8d4 c004 	ldr.w	ip, [r4, #4]
900271ca:	9500      	str	r5, [sp, #0]
900271cc:	e9c4 5517 	strd	r5, r5, [r4, #92]	; 0x5c
900271d0:	e9c4 551a 	strd	r5, r5, [r4, #104]	; 0x68
900271d4:	f9b8 2000 	ldrsh.w	r2, [r8]
900271d8:	f8b8 0004 	ldrh.w	r0, [r8, #4]
900271dc:	f9bc 9008 	ldrsh.w	r9, [ip, #8]
900271e0:	4410      	add	r0, r2
900271e2:	f9bc e00a 	ldrsh.w	lr, [ip, #10]
900271e6:	b280      	uxth	r0, r0
900271e8:	fa0f fa80 	sxth.w	sl, r0
900271ec:	45aa      	cmp	sl, r5
900271ee:	dd5c      	ble.n	900272aa <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x12a>
900271f0:	4591      	cmp	r9, r2
900271f2:	dd5a      	ble.n	900272aa <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x12a>
900271f4:	f9b8 1002 	ldrsh.w	r1, [r8, #2]
900271f8:	f8b8 3006 	ldrh.w	r3, [r8, #6]
900271fc:	440b      	add	r3, r1
900271fe:	b29b      	uxth	r3, r3
90027200:	b21d      	sxth	r5, r3
90027202:	2d00      	cmp	r5, #0
90027204:	dd51      	ble.n	900272aa <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x12a>
90027206:	458e      	cmp	lr, r1
90027208:	dd4f      	ble.n	900272aa <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x12a>
9002720a:	45d1      	cmp	r9, sl
9002720c:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
90027210:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
90027214:	bfb8      	it	lt
90027216:	fa1f f089 	uxthlt.w	r0, r9
9002721a:	45ae      	cmp	lr, r5
9002721c:	f8ad 2000 	strh.w	r2, [sp]
90027220:	bfb8      	it	lt
90027222:	fa1f f38e 	uxthlt.w	r3, lr
90027226:	1a80      	subs	r0, r0, r2
90027228:	f8ad 1002 	strh.w	r1, [sp, #2]
9002722c:	1a5b      	subs	r3, r3, r1
9002722e:	f8ad 0004 	strh.w	r0, [sp, #4]
90027232:	f8ad 3006 	strh.w	r3, [sp, #6]
90027236:	466d      	mov	r5, sp
90027238:	e895 0003 	ldmia.w	r5, {r0, r1}
9002723c:	e887 0003 	stmia.w	r7, {r0, r1}
90027240:	f8dc 3000 	ldr.w	r3, [ip]
90027244:	4660      	mov	r0, ip
90027246:	4639      	mov	r1, r7
90027248:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9002724a:	4798      	blx	r3
9002724c:	6861      	ldr	r1, [r4, #4]
9002724e:	4628      	mov	r0, r5
90027250:	3104      	adds	r1, #4
90027252:	f7f0 fe3f 	bl	90017ed4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
90027256:	4638      	mov	r0, r7
90027258:	f7f0 fe14 	bl	90017e84 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
9002725c:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
90027260:	f8bd 2000 	ldrh.w	r2, [sp]
90027264:	4630      	mov	r0, r6
90027266:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
9002726a:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52
9002726e:	f7ee fc45 	bl	90015afc <_ZN8touchgfx7Outline5resetEv>
90027272:	f9bd 3000 	ldrsh.w	r3, [sp]
90027276:	f9b4 201e 	ldrsh.w	r2, [r4, #30]
9002727a:	4620      	mov	r0, r4
9002727c:	015b      	lsls	r3, r3, #5
9002727e:	60a3      	str	r3, [r4, #8]
90027280:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
90027284:	015b      	lsls	r3, r3, #5
90027286:	60e3      	str	r3, [r4, #12]
90027288:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
9002728c:	015b      	lsls	r3, r3, #5
9002728e:	6123      	str	r3, [r4, #16]
90027290:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
90027294:	015b      	lsls	r3, r3, #5
90027296:	6163      	str	r3, [r4, #20]
90027298:	f9b4 301c 	ldrsh.w	r3, [r4, #28]
9002729c:	f8a4 3056 	strh.w	r3, [r4, #86]	; 0x56
900272a0:	e9c4 3212 	strd	r3, r2, [r4, #72]	; 0x48
900272a4:	b002      	add	sp, #8
900272a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
900272aa:	2300      	movs	r3, #0
900272ac:	9301      	str	r3, [sp, #4]
900272ae:	e7c2      	b.n	90027236 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0xb6>
900272b0:	9002c720 	.word	0x9002c720

900272b4 <_ZN8touchgfx6Canvas5closeEv>:
900272b4:	b538      	push	{r3, r4, r5, lr}
900272b6:	f890 3058 	ldrb.w	r3, [r0, #88]	; 0x58
900272ba:	4604      	mov	r4, r0
900272bc:	b193      	cbz	r3, 900272e4 <_ZN8touchgfx6Canvas5closeEv+0x30>
900272be:	f890 3064 	ldrb.w	r3, [r0, #100]	; 0x64
900272c2:	f890 2065 	ldrb.w	r2, [r0, #101]	; 0x65
900272c6:	4213      	tst	r3, r2
900272c8:	d10c      	bne.n	900272e4 <_ZN8touchgfx6Canvas5closeEv+0x30>
900272ca:	f100 0520 	add.w	r5, r0, #32
900272ce:	b123      	cbz	r3, 900272da <_ZN8touchgfx6Canvas5closeEv+0x26>
900272d0:	e9d0 1217 	ldrd	r1, r2, [r0, #92]	; 0x5c
900272d4:	4628      	mov	r0, r5
900272d6:	f7ff fe7b 	bl	90026fd0 <_ZN8touchgfx10Rasterizer6lineToEii>
900272da:	4628      	mov	r0, r5
900272dc:	e9d4 121a 	ldrd	r1, r2, [r4, #104]	; 0x68
900272e0:	f7ff fe76 	bl	90026fd0 <_ZN8touchgfx10Rasterizer6lineToEii>
900272e4:	2300      	movs	r3, #0
900272e6:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
900272ea:	e9d4 0309 	ldrd	r0, r3, [r4, #36]	; 0x24
900272ee:	4298      	cmp	r0, r3
900272f0:	bf34      	ite	cc
900272f2:	2000      	movcc	r0, #0
900272f4:	2001      	movcs	r0, #1
900272f6:	bd38      	pop	{r3, r4, r5, pc}

900272f8 <_ZN8touchgfx6Canvas6renderEh>:
900272f8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
900272fc:	4604      	mov	r4, r0
900272fe:	6840      	ldr	r0, [r0, #4]
90027300:	460d      	mov	r5, r1
90027302:	6803      	ldr	r3, [r0, #0]
90027304:	6e5b      	ldr	r3, [r3, #100]	; 0x64
90027306:	4798      	blx	r3
90027308:	fb10 f105 	smulbb	r1, r0, r5
9002730c:	b289      	uxth	r1, r1
9002730e:	1c4d      	adds	r5, r1, #1
90027310:	eb05 2511 	add.w	r5, r5, r1, lsr #8
90027314:	122d      	asrs	r5, r5, #8
90027316:	f000 8097 	beq.w	90027448 <_ZN8touchgfx6Canvas6renderEh+0x150>
9002731a:	f894 3059 	ldrb.w	r3, [r4, #89]	; 0x59
9002731e:	2b00      	cmp	r3, #0
90027320:	f000 8092 	beq.w	90027448 <_ZN8touchgfx6Canvas6renderEh+0x150>
90027324:	4620      	mov	r0, r4
90027326:	f7ff ffc5 	bl	900272b4 <_ZN8touchgfx6Canvas5closeEv>
9002732a:	4607      	mov	r7, r0
9002732c:	2800      	cmp	r0, #0
9002732e:	d043      	beq.n	900273b8 <_ZN8touchgfx6Canvas6renderEh+0xc0>
90027330:	6863      	ldr	r3, [r4, #4]
90027332:	4e46      	ldr	r6, [pc, #280]	; (9002744c <_ZN8touchgfx6Canvas6renderEh+0x154>)
90027334:	6a98      	ldr	r0, [r3, #40]	; 0x28
90027336:	6837      	ldr	r7, [r6, #0]
90027338:	6803      	ldr	r3, [r0, #0]
9002733a:	689b      	ldr	r3, [r3, #8]
9002733c:	4798      	blx	r3
9002733e:	4601      	mov	r1, r0
90027340:	4638      	mov	r0, r7
90027342:	f7ec fc51 	bl	90013be8 <_ZN8touchgfx3HAL33lockFrameBufferForRenderingMethodENS0_15RenderingMethodE>
90027346:	4607      	mov	r7, r0
90027348:	f7ec f812 	bl	90013370 <_ZN8touchgfx3HAL3lcdEv>
9002734c:	6803      	ldr	r3, [r0, #0]
9002734e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90027350:	4798      	blx	r3
90027352:	4680      	mov	r8, r0
90027354:	f7ec f80c 	bl	90013370 <_ZN8touchgfx3HAL3lcdEv>
90027358:	6803      	ldr	r3, [r0, #0]
9002735a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9002735c:	4798      	blx	r3
9002735e:	280b      	cmp	r0, #11
90027360:	d857      	bhi.n	90027412 <_ZN8touchgfx6Canvas6renderEh+0x11a>
90027362:	e8df f000 	tbb	[pc, r0]
90027366:	584d      	.short	0x584d
90027368:	2d560668 	.word	0x2d560668
9002736c:	6161613d 	.word	0x6161613d
90027370:	6161      	.short	0x6161
90027372:	f9b4 1018 	ldrsh.w	r1, [r4, #24]
90027376:	2208      	movs	r2, #8
90027378:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
9002737c:	fb91 f2f2 	sdiv	r2, r1, r2
90027380:	fb08 2303 	mla	r3, r8, r3, r2
90027384:	441f      	add	r7, r3
90027386:	424b      	negs	r3, r1
90027388:	f001 0107 	and.w	r1, r1, #7
9002738c:	f003 0307 	and.w	r3, r3, #7
90027390:	bf58      	it	pl
90027392:	4259      	negpl	r1, r3
90027394:	b2c9      	uxtb	r1, r1
90027396:	6860      	ldr	r0, [r4, #4]
90027398:	b2ed      	uxtb	r5, r5
9002739a:	fa0f f388 	sxth.w	r3, r8
9002739e:	463a      	mov	r2, r7
900273a0:	e9cd 1500 	strd	r1, r5, [sp]
900273a4:	6a81      	ldr	r1, [r0, #40]	; 0x28
900273a6:	f104 0020 	add.w	r0, r4, #32
900273aa:	f7ff fe1d 	bl	90026fe8 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh>
900273ae:	4607      	mov	r7, r0
900273b0:	6830      	ldr	r0, [r6, #0]
900273b2:	6803      	ldr	r3, [r0, #0]
900273b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
900273b6:	4798      	blx	r3
900273b8:	4638      	mov	r0, r7
900273ba:	b002      	add	sp, #8
900273bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
900273c0:	f9b4 1018 	ldrsh.w	r1, [r4, #24]
900273c4:	2204      	movs	r2, #4
900273c6:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
900273ca:	fb91 f2f2 	sdiv	r2, r1, r2
900273ce:	fb08 2303 	mla	r3, r8, r3, r2
900273d2:	441f      	add	r7, r3
900273d4:	424b      	negs	r3, r1
900273d6:	f001 0103 	and.w	r1, r1, #3
900273da:	f003 0303 	and.w	r3, r3, #3
900273de:	e7d7      	b.n	90027390 <_ZN8touchgfx6Canvas6renderEh+0x98>
900273e0:	f9b4 1018 	ldrsh.w	r1, [r4, #24]
900273e4:	2202      	movs	r2, #2
900273e6:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
900273ea:	2900      	cmp	r1, #0
900273ec:	fb91 f2f2 	sdiv	r2, r1, r2
900273f0:	f001 0101 	and.w	r1, r1, #1
900273f4:	fb08 2303 	mla	r3, r8, r3, r2
900273f8:	bfb8      	it	lt
900273fa:	4249      	neglt	r1, r1
900273fc:	441f      	add	r7, r3
900273fe:	e7c9      	b.n	90027394 <_ZN8touchgfx6Canvas6renderEh+0x9c>
90027400:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
90027404:	f9b4 2018 	ldrsh.w	r2, [r4, #24]
90027408:	fb08 f303 	mul.w	r3, r8, r3
9002740c:	eb03 0342 	add.w	r3, r3, r2, lsl #1
90027410:	441f      	add	r7, r3
90027412:	2100      	movs	r1, #0
90027414:	e7bf      	b.n	90027396 <_ZN8touchgfx6Canvas6renderEh+0x9e>
90027416:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
9002741a:	2103      	movs	r1, #3
9002741c:	fb08 f203 	mul.w	r2, r8, r3
90027420:	8b23      	ldrh	r3, [r4, #24]
90027422:	fb13 2301 	smlabb	r3, r3, r1, r2
90027426:	e7f3      	b.n	90027410 <_ZN8touchgfx6Canvas6renderEh+0x118>
90027428:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
9002742c:	f9b4 2018 	ldrsh.w	r2, [r4, #24]
90027430:	fb08 2303 	mla	r3, r8, r3, r2
90027434:	e7ec      	b.n	90027410 <_ZN8touchgfx6Canvas6renderEh+0x118>
90027436:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
9002743a:	f9b4 2018 	ldrsh.w	r2, [r4, #24]
9002743e:	fb08 f303 	mul.w	r3, r8, r3
90027442:	eb03 0382 	add.w	r3, r3, r2, lsl #2
90027446:	e7e3      	b.n	90027410 <_ZN8touchgfx6Canvas6renderEh+0x118>
90027448:	2701      	movs	r7, #1
9002744a:	e7b5      	b.n	900273b8 <_ZN8touchgfx6Canvas6renderEh+0xc0>
9002744c:	240281ec 	.word	0x240281ec

90027450 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>:
90027450:	4b07      	ldr	r3, [pc, #28]	; (90027470 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_+0x20>)
90027452:	b510      	push	{r4, lr}
90027454:	781b      	ldrb	r3, [r3, #0]
90027456:	2b01      	cmp	r3, #1
90027458:	d108      	bne.n	9002746c <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_+0x1c>
9002745a:	6843      	ldr	r3, [r0, #4]
9002745c:	6814      	ldr	r4, [r2, #0]
9002745e:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
90027462:	680b      	ldr	r3, [r1, #0]
90027464:	ebc3 1340 	rsb	r3, r3, r0, lsl #5
90027468:	6013      	str	r3, [r2, #0]
9002746a:	600c      	str	r4, [r1, #0]
9002746c:	bd10      	pop	{r4, pc}
9002746e:	bf00      	nop
90027470:	240281e4 	.word	0x240281e4

90027474 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>:
90027474:	b513      	push	{r0, r1, r4, lr}
90027476:	f890 3058 	ldrb.w	r3, [r0, #88]	; 0x58
9002747a:	4604      	mov	r4, r0
9002747c:	e9cd 2100 	strd	r2, r1, [sp]
90027480:	b9a3      	cbnz	r3, 900274ac <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x38>
90027482:	466a      	mov	r2, sp
90027484:	a901      	add	r1, sp, #4
90027486:	4620      	mov	r0, r4
90027488:	f7ff ffe2 	bl	90027450 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>
9002748c:	68a3      	ldr	r3, [r4, #8]
9002748e:	9901      	ldr	r1, [sp, #4]
90027490:	9a00      	ldr	r2, [sp, #0]
90027492:	1ac9      	subs	r1, r1, r3
90027494:	68e3      	ldr	r3, [r4, #12]
90027496:	1ad2      	subs	r2, r2, r3
90027498:	9101      	str	r1, [sp, #4]
9002749a:	2a00      	cmp	r2, #0
9002749c:	9200      	str	r2, [sp, #0]
9002749e:	da0b      	bge.n	900274b8 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x44>
900274a0:	2301      	movs	r3, #1
900274a2:	2900      	cmp	r1, #0
900274a4:	da0e      	bge.n	900274c4 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x50>
900274a6:	f043 0304 	orr.w	r3, r3, #4
900274aa:	e013      	b.n	900274d4 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x60>
900274ac:	f7ff ff02 	bl	900272b4 <_ZN8touchgfx6Canvas5closeEv>
900274b0:	2800      	cmp	r0, #0
900274b2:	d1e6      	bne.n	90027482 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0xe>
900274b4:	b002      	add	sp, #8
900274b6:	bd10      	pop	{r4, pc}
900274b8:	6963      	ldr	r3, [r4, #20]
900274ba:	429a      	cmp	r2, r3
900274bc:	bfac      	ite	ge
900274be:	2302      	movge	r3, #2
900274c0:	2300      	movlt	r3, #0
900274c2:	e7ee      	b.n	900274a2 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x2e>
900274c4:	6920      	ldr	r0, [r4, #16]
900274c6:	4281      	cmp	r1, r0
900274c8:	bfac      	ite	ge
900274ca:	2008      	movge	r0, #8
900274cc:	2000      	movlt	r0, #0
900274ce:	4318      	orrs	r0, r3
900274d0:	b2c3      	uxtb	r3, r0
900274d2:	b158      	cbz	r0, 900274ec <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x78>
900274d4:	2200      	movs	r2, #0
900274d6:	f884 2058 	strb.w	r2, [r4, #88]	; 0x58
900274da:	9901      	ldr	r1, [sp, #4]
900274dc:	9a00      	ldr	r2, [sp, #0]
900274de:	66a1      	str	r1, [r4, #104]	; 0x68
900274e0:	66e2      	str	r2, [r4, #108]	; 0x6c
900274e2:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
900274e6:	e9c4 1217 	strd	r1, r2, [r4, #92]	; 0x5c
900274ea:	e7e3      	b.n	900274b4 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x40>
900274ec:	f884 0065 	strb.w	r0, [r4, #101]	; 0x65
900274f0:	e9d4 3009 	ldrd	r3, r0, [r4, #36]	; 0x24
900274f4:	4298      	cmp	r0, r3
900274f6:	d803      	bhi.n	90027500 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x8c>
900274f8:	f104 0020 	add.w	r0, r4, #32
900274fc:	f7ee ffee 	bl	900164dc <_ZN8touchgfx7Outline6moveToEii>
90027500:	2301      	movs	r3, #1
90027502:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
90027506:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
9002750a:	2300      	movs	r3, #0
9002750c:	e7e5      	b.n	900274da <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x66>

9002750e <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>:
9002750e:	b573      	push	{r0, r1, r4, r5, r6, lr}
90027510:	ab02      	add	r3, sp, #8
90027512:	4604      	mov	r4, r0
90027514:	9101      	str	r1, [sp, #4]
90027516:	a901      	add	r1, sp, #4
90027518:	f843 2d08 	str.w	r2, [r3, #-8]!
9002751c:	461a      	mov	r2, r3
9002751e:	f7ff ff97 	bl	90027450 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>
90027522:	68a3      	ldr	r3, [r4, #8]
90027524:	9901      	ldr	r1, [sp, #4]
90027526:	9a00      	ldr	r2, [sp, #0]
90027528:	1ac9      	subs	r1, r1, r3
9002752a:	68e3      	ldr	r3, [r4, #12]
9002752c:	1ad2      	subs	r2, r2, r3
9002752e:	9101      	str	r1, [sp, #4]
90027530:	2a00      	cmp	r2, #0
90027532:	9200      	str	r2, [sp, #0]
90027534:	db1c      	blt.n	90027570 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x62>
90027536:	6963      	ldr	r3, [r4, #20]
90027538:	429a      	cmp	r2, r3
9002753a:	bfac      	ite	ge
9002753c:	2002      	movge	r0, #2
9002753e:	2000      	movlt	r0, #0
90027540:	2900      	cmp	r1, #0
90027542:	db17      	blt.n	90027574 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x66>
90027544:	6923      	ldr	r3, [r4, #16]
90027546:	4299      	cmp	r1, r3
90027548:	bfac      	ite	ge
9002754a:	2308      	movge	r3, #8
9002754c:	2300      	movlt	r3, #0
9002754e:	4303      	orrs	r3, r0
90027550:	f894 0064 	ldrb.w	r0, [r4, #100]	; 0x64
90027554:	b2dd      	uxtb	r5, r3
90027556:	b978      	cbnz	r0, 90027578 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x6a>
90027558:	f104 0020 	add.w	r0, r4, #32
9002755c:	f7ff fd38 	bl	90026fd0 <_ZN8touchgfx10Rasterizer6lineToEii>
90027560:	9b01      	ldr	r3, [sp, #4]
90027562:	f884 5064 	strb.w	r5, [r4, #100]	; 0x64
90027566:	65e3      	str	r3, [r4, #92]	; 0x5c
90027568:	9b00      	ldr	r3, [sp, #0]
9002756a:	6623      	str	r3, [r4, #96]	; 0x60
9002756c:	b002      	add	sp, #8
9002756e:	bd70      	pop	{r4, r5, r6, pc}
90027570:	2001      	movs	r0, #1
90027572:	e7e5      	b.n	90027540 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x32>
90027574:	2304      	movs	r3, #4
90027576:	e7ea      	b.n	9002754e <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x40>
90027578:	b113      	cbz	r3, 90027580 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x72>
9002757a:	ea10 0305 	ands.w	r3, r0, r5
9002757e:	d11c      	bne.n	900275ba <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0xac>
90027580:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
90027584:	f104 0620 	add.w	r6, r4, #32
90027588:	e9d4 1217 	ldrd	r1, r2, [r4, #92]	; 0x5c
9002758c:	b98b      	cbnz	r3, 900275b2 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0xa4>
9002758e:	f884 0065 	strb.w	r0, [r4, #101]	; 0x65
90027592:	e9d4 3009 	ldrd	r3, r0, [r4, #36]	; 0x24
90027596:	4298      	cmp	r0, r3
90027598:	d802      	bhi.n	900275a0 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x92>
9002759a:	4630      	mov	r0, r6
9002759c:	f7ee ff9e 	bl	900164dc <_ZN8touchgfx7Outline6moveToEii>
900275a0:	2301      	movs	r3, #1
900275a2:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
900275a6:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
900275aa:	4630      	mov	r0, r6
900275ac:	e9dd 2100 	ldrd	r2, r1, [sp]
900275b0:	e7d4      	b.n	9002755c <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x4e>
900275b2:	4630      	mov	r0, r6
900275b4:	f7ff fd0c 	bl	90026fd0 <_ZN8touchgfx10Rasterizer6lineToEii>
900275b8:	e7f7      	b.n	900275aa <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x9c>
900275ba:	461d      	mov	r5, r3
900275bc:	e7d0      	b.n	90027560 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x52>
	...

900275c0 <_ZN8touchgfx6CanvasD1Ev>:
900275c0:	4b04      	ldr	r3, [pc, #16]	; (900275d4 <_ZN8touchgfx6CanvasD1Ev+0x14>)
900275c2:	b510      	push	{r4, lr}
900275c4:	4604      	mov	r4, r0
900275c6:	f840 3b20 	str.w	r3, [r0], #32
900275ca:	f7ee fa8f 	bl	90015aec <_ZN8touchgfx7OutlineD1Ev>
900275ce:	4620      	mov	r0, r4
900275d0:	bd10      	pop	{r4, pc}
900275d2:	bf00      	nop
900275d4:	9002c720 	.word	0x9002c720

900275d8 <_ZN8touchgfx6CanvasD0Ev>:
900275d8:	b510      	push	{r4, lr}
900275da:	4604      	mov	r4, r0
900275dc:	f7ff fff0 	bl	900275c0 <_ZN8touchgfx6CanvasD1Ev>
900275e0:	2170      	movs	r1, #112	; 0x70
900275e2:	4620      	mov	r0, r4
900275e4:	f000 f807 	bl	900275f6 <_ZdlPvj>
900275e8:	4620      	mov	r0, r4
900275ea:	bd10      	pop	{r4, pc}

900275ec <__aeabi_atexit>:
900275ec:	460b      	mov	r3, r1
900275ee:	4601      	mov	r1, r0
900275f0:	4618      	mov	r0, r3
900275f2:	f000 b90f 	b.w	90027814 <__cxa_atexit>

900275f6 <_ZdlPvj>:
900275f6:	f000 b812 	b.w	9002761e <_ZdlPv>

900275fa <__cxa_guard_acquire>:
900275fa:	6803      	ldr	r3, [r0, #0]
900275fc:	07db      	lsls	r3, r3, #31
900275fe:	d406      	bmi.n	9002760e <__cxa_guard_acquire+0x14>
90027600:	7843      	ldrb	r3, [r0, #1]
90027602:	b103      	cbz	r3, 90027606 <__cxa_guard_acquire+0xc>
90027604:	deff      	udf	#255	; 0xff
90027606:	2301      	movs	r3, #1
90027608:	7043      	strb	r3, [r0, #1]
9002760a:	4618      	mov	r0, r3
9002760c:	4770      	bx	lr
9002760e:	2000      	movs	r0, #0
90027610:	4770      	bx	lr

90027612 <__cxa_guard_release>:
90027612:	2301      	movs	r3, #1
90027614:	6003      	str	r3, [r0, #0]
90027616:	4770      	bx	lr

90027618 <__cxa_pure_virtual>:
90027618:	b508      	push	{r3, lr}
9002761a:	f000 f80f 	bl	9002763c <_ZSt9terminatev>

9002761e <_ZdlPv>:
9002761e:	f000 b845 	b.w	900276ac <free>

90027622 <_ZN10__cxxabiv111__terminateEPFvvE>:
90027622:	b508      	push	{r3, lr}
90027624:	4780      	blx	r0
90027626:	f000 f80e 	bl	90027646 <abort>
	...

9002762c <_ZSt13get_terminatev>:
9002762c:	4b02      	ldr	r3, [pc, #8]	; (90027638 <_ZSt13get_terminatev+0xc>)
9002762e:	6818      	ldr	r0, [r3, #0]
90027630:	f3bf 8f5b 	dmb	ish
90027634:	4770      	bx	lr
90027636:	bf00      	nop
90027638:	240000dc 	.word	0x240000dc

9002763c <_ZSt9terminatev>:
9002763c:	b508      	push	{r3, lr}
9002763e:	f7ff fff5 	bl	9002762c <_ZSt13get_terminatev>
90027642:	f7ff ffee 	bl	90027622 <_ZN10__cxxabiv111__terminateEPFvvE>

90027646 <abort>:
90027646:	b508      	push	{r3, lr}
90027648:	2006      	movs	r0, #6
9002764a:	f000 faf9 	bl	90027c40 <raise>
9002764e:	2001      	movs	r0, #1
90027650:	f7dd fbc0 	bl	90004dd4 <_exit>

90027654 <__assert_func>:
90027654:	b51f      	push	{r0, r1, r2, r3, r4, lr}
90027656:	4614      	mov	r4, r2
90027658:	461a      	mov	r2, r3
9002765a:	4b09      	ldr	r3, [pc, #36]	; (90027680 <__assert_func+0x2c>)
9002765c:	681b      	ldr	r3, [r3, #0]
9002765e:	4605      	mov	r5, r0
90027660:	68d8      	ldr	r0, [r3, #12]
90027662:	b14c      	cbz	r4, 90027678 <__assert_func+0x24>
90027664:	4b07      	ldr	r3, [pc, #28]	; (90027684 <__assert_func+0x30>)
90027666:	9100      	str	r1, [sp, #0]
90027668:	e9cd 3401 	strd	r3, r4, [sp, #4]
9002766c:	4906      	ldr	r1, [pc, #24]	; (90027688 <__assert_func+0x34>)
9002766e:	462b      	mov	r3, r5
90027670:	f000 f982 	bl	90027978 <fiprintf>
90027674:	f7ff ffe7 	bl	90027646 <abort>
90027678:	4b04      	ldr	r3, [pc, #16]	; (9002768c <__assert_func+0x38>)
9002767a:	461c      	mov	r4, r3
9002767c:	e7f3      	b.n	90027666 <__assert_func+0x12>
9002767e:	bf00      	nop
90027680:	24000138 	.word	0x24000138
90027684:	9002c72c 	.word	0x9002c72c
90027688:	9002c739 	.word	0x9002c739
9002768c:	9002c767 	.word	0x9002c767

90027690 <atexit>:
90027690:	2300      	movs	r3, #0
90027692:	4601      	mov	r1, r0
90027694:	461a      	mov	r2, r3
90027696:	4618      	mov	r0, r3
90027698:	f000 bb80 	b.w	90027d9c <__register_exitproc>

9002769c <malloc>:
9002769c:	4b02      	ldr	r3, [pc, #8]	; (900276a8 <malloc+0xc>)
9002769e:	4601      	mov	r1, r0
900276a0:	6818      	ldr	r0, [r3, #0]
900276a2:	f000 b82b 	b.w	900276fc <_malloc_r>
900276a6:	bf00      	nop
900276a8:	24000138 	.word	0x24000138

900276ac <free>:
900276ac:	4b02      	ldr	r3, [pc, #8]	; (900276b8 <free+0xc>)
900276ae:	4601      	mov	r1, r0
900276b0:	6818      	ldr	r0, [r3, #0]
900276b2:	f000 bbd1 	b.w	90027e58 <_free_r>
900276b6:	bf00      	nop
900276b8:	24000138 	.word	0x24000138

900276bc <sbrk_aligned>:
900276bc:	b570      	push	{r4, r5, r6, lr}
900276be:	4e0e      	ldr	r6, [pc, #56]	; (900276f8 <sbrk_aligned+0x3c>)
900276c0:	460c      	mov	r4, r1
900276c2:	6831      	ldr	r1, [r6, #0]
900276c4:	4605      	mov	r5, r0
900276c6:	b911      	cbnz	r1, 900276ce <sbrk_aligned+0x12>
900276c8:	f000 fb0a 	bl	90027ce0 <_sbrk_r>
900276cc:	6030      	str	r0, [r6, #0]
900276ce:	4621      	mov	r1, r4
900276d0:	4628      	mov	r0, r5
900276d2:	f000 fb05 	bl	90027ce0 <_sbrk_r>
900276d6:	1c43      	adds	r3, r0, #1
900276d8:	d00a      	beq.n	900276f0 <sbrk_aligned+0x34>
900276da:	1cc4      	adds	r4, r0, #3
900276dc:	f024 0403 	bic.w	r4, r4, #3
900276e0:	42a0      	cmp	r0, r4
900276e2:	d007      	beq.n	900276f4 <sbrk_aligned+0x38>
900276e4:	1a21      	subs	r1, r4, r0
900276e6:	4628      	mov	r0, r5
900276e8:	f000 fafa 	bl	90027ce0 <_sbrk_r>
900276ec:	3001      	adds	r0, #1
900276ee:	d101      	bne.n	900276f4 <sbrk_aligned+0x38>
900276f0:	f04f 34ff 	mov.w	r4, #4294967295
900276f4:	4620      	mov	r0, r4
900276f6:	bd70      	pop	{r4, r5, r6, pc}
900276f8:	240282f4 	.word	0x240282f4

900276fc <_malloc_r>:
900276fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
90027700:	1ccd      	adds	r5, r1, #3
90027702:	f025 0503 	bic.w	r5, r5, #3
90027706:	3508      	adds	r5, #8
90027708:	2d0c      	cmp	r5, #12
9002770a:	bf38      	it	cc
9002770c:	250c      	movcc	r5, #12
9002770e:	2d00      	cmp	r5, #0
90027710:	4607      	mov	r7, r0
90027712:	db01      	blt.n	90027718 <_malloc_r+0x1c>
90027714:	42a9      	cmp	r1, r5
90027716:	d905      	bls.n	90027724 <_malloc_r+0x28>
90027718:	230c      	movs	r3, #12
9002771a:	603b      	str	r3, [r7, #0]
9002771c:	2600      	movs	r6, #0
9002771e:	4630      	mov	r0, r6
90027720:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
90027724:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 900277f8 <_malloc_r+0xfc>
90027728:	f000 f868 	bl	900277fc <__malloc_lock>
9002772c:	f8d8 3000 	ldr.w	r3, [r8]
90027730:	461c      	mov	r4, r3
90027732:	bb5c      	cbnz	r4, 9002778c <_malloc_r+0x90>
90027734:	4629      	mov	r1, r5
90027736:	4638      	mov	r0, r7
90027738:	f7ff ffc0 	bl	900276bc <sbrk_aligned>
9002773c:	1c43      	adds	r3, r0, #1
9002773e:	4604      	mov	r4, r0
90027740:	d155      	bne.n	900277ee <_malloc_r+0xf2>
90027742:	f8d8 4000 	ldr.w	r4, [r8]
90027746:	4626      	mov	r6, r4
90027748:	2e00      	cmp	r6, #0
9002774a:	d145      	bne.n	900277d8 <_malloc_r+0xdc>
9002774c:	2c00      	cmp	r4, #0
9002774e:	d048      	beq.n	900277e2 <_malloc_r+0xe6>
90027750:	6823      	ldr	r3, [r4, #0]
90027752:	4631      	mov	r1, r6
90027754:	4638      	mov	r0, r7
90027756:	eb04 0903 	add.w	r9, r4, r3
9002775a:	f000 fac1 	bl	90027ce0 <_sbrk_r>
9002775e:	4581      	cmp	r9, r0
90027760:	d13f      	bne.n	900277e2 <_malloc_r+0xe6>
90027762:	6821      	ldr	r1, [r4, #0]
90027764:	1a6d      	subs	r5, r5, r1
90027766:	4629      	mov	r1, r5
90027768:	4638      	mov	r0, r7
9002776a:	f7ff ffa7 	bl	900276bc <sbrk_aligned>
9002776e:	3001      	adds	r0, #1
90027770:	d037      	beq.n	900277e2 <_malloc_r+0xe6>
90027772:	6823      	ldr	r3, [r4, #0]
90027774:	442b      	add	r3, r5
90027776:	6023      	str	r3, [r4, #0]
90027778:	f8d8 3000 	ldr.w	r3, [r8]
9002777c:	2b00      	cmp	r3, #0
9002777e:	d038      	beq.n	900277f2 <_malloc_r+0xf6>
90027780:	685a      	ldr	r2, [r3, #4]
90027782:	42a2      	cmp	r2, r4
90027784:	d12b      	bne.n	900277de <_malloc_r+0xe2>
90027786:	2200      	movs	r2, #0
90027788:	605a      	str	r2, [r3, #4]
9002778a:	e00f      	b.n	900277ac <_malloc_r+0xb0>
9002778c:	6822      	ldr	r2, [r4, #0]
9002778e:	1b52      	subs	r2, r2, r5
90027790:	d41f      	bmi.n	900277d2 <_malloc_r+0xd6>
90027792:	2a0b      	cmp	r2, #11
90027794:	d917      	bls.n	900277c6 <_malloc_r+0xca>
90027796:	1961      	adds	r1, r4, r5
90027798:	42a3      	cmp	r3, r4
9002779a:	6025      	str	r5, [r4, #0]
9002779c:	bf18      	it	ne
9002779e:	6059      	strne	r1, [r3, #4]
900277a0:	6863      	ldr	r3, [r4, #4]
900277a2:	bf08      	it	eq
900277a4:	f8c8 1000 	streq.w	r1, [r8]
900277a8:	5162      	str	r2, [r4, r5]
900277aa:	604b      	str	r3, [r1, #4]
900277ac:	4638      	mov	r0, r7
900277ae:	f104 060b 	add.w	r6, r4, #11
900277b2:	f000 f829 	bl	90027808 <__malloc_unlock>
900277b6:	f026 0607 	bic.w	r6, r6, #7
900277ba:	1d23      	adds	r3, r4, #4
900277bc:	1af2      	subs	r2, r6, r3
900277be:	d0ae      	beq.n	9002771e <_malloc_r+0x22>
900277c0:	1b9b      	subs	r3, r3, r6
900277c2:	50a3      	str	r3, [r4, r2]
900277c4:	e7ab      	b.n	9002771e <_malloc_r+0x22>
900277c6:	42a3      	cmp	r3, r4
900277c8:	6862      	ldr	r2, [r4, #4]
900277ca:	d1dd      	bne.n	90027788 <_malloc_r+0x8c>
900277cc:	f8c8 2000 	str.w	r2, [r8]
900277d0:	e7ec      	b.n	900277ac <_malloc_r+0xb0>
900277d2:	4623      	mov	r3, r4
900277d4:	6864      	ldr	r4, [r4, #4]
900277d6:	e7ac      	b.n	90027732 <_malloc_r+0x36>
900277d8:	4634      	mov	r4, r6
900277da:	6876      	ldr	r6, [r6, #4]
900277dc:	e7b4      	b.n	90027748 <_malloc_r+0x4c>
900277de:	4613      	mov	r3, r2
900277e0:	e7cc      	b.n	9002777c <_malloc_r+0x80>
900277e2:	230c      	movs	r3, #12
900277e4:	603b      	str	r3, [r7, #0]
900277e6:	4638      	mov	r0, r7
900277e8:	f000 f80e 	bl	90027808 <__malloc_unlock>
900277ec:	e797      	b.n	9002771e <_malloc_r+0x22>
900277ee:	6025      	str	r5, [r4, #0]
900277f0:	e7dc      	b.n	900277ac <_malloc_r+0xb0>
900277f2:	605b      	str	r3, [r3, #4]
900277f4:	deff      	udf	#255	; 0xff
900277f6:	bf00      	nop
900277f8:	240282f0 	.word	0x240282f0

900277fc <__malloc_lock>:
900277fc:	4801      	ldr	r0, [pc, #4]	; (90027804 <__malloc_lock+0x8>)
900277fe:	f000 babc 	b.w	90027d7a <__retarget_lock_acquire_recursive>
90027802:	bf00      	nop
90027804:	24028439 	.word	0x24028439

90027808 <__malloc_unlock>:
90027808:	4801      	ldr	r0, [pc, #4]	; (90027810 <__malloc_unlock+0x8>)
9002780a:	f000 bab7 	b.w	90027d7c <__retarget_lock_release_recursive>
9002780e:	bf00      	nop
90027810:	24028439 	.word	0x24028439

90027814 <__cxa_atexit>:
90027814:	b510      	push	{r4, lr}
90027816:	4c05      	ldr	r4, [pc, #20]	; (9002782c <__cxa_atexit+0x18>)
90027818:	4613      	mov	r3, r2
9002781a:	b12c      	cbz	r4, 90027828 <__cxa_atexit+0x14>
9002781c:	460a      	mov	r2, r1
9002781e:	4601      	mov	r1, r0
90027820:	2002      	movs	r0, #2
90027822:	f000 fabb 	bl	90027d9c <__register_exitproc>
90027826:	bd10      	pop	{r4, pc}
90027828:	4620      	mov	r0, r4
9002782a:	e7fc      	b.n	90027826 <__cxa_atexit+0x12>
9002782c:	90027d9d 	.word	0x90027d9d

90027830 <std>:
90027830:	2300      	movs	r3, #0
90027832:	b510      	push	{r4, lr}
90027834:	4604      	mov	r4, r0
90027836:	e9c0 3300 	strd	r3, r3, [r0]
9002783a:	e9c0 3304 	strd	r3, r3, [r0, #16]
9002783e:	6083      	str	r3, [r0, #8]
90027840:	8181      	strh	r1, [r0, #12]
90027842:	6643      	str	r3, [r0, #100]	; 0x64
90027844:	81c2      	strh	r2, [r0, #14]
90027846:	6183      	str	r3, [r0, #24]
90027848:	4619      	mov	r1, r3
9002784a:	2208      	movs	r2, #8
9002784c:	305c      	adds	r0, #92	; 0x5c
9002784e:	f000 f9b5 	bl	90027bbc <memset>
90027852:	4b0d      	ldr	r3, [pc, #52]	; (90027888 <std+0x58>)
90027854:	6263      	str	r3, [r4, #36]	; 0x24
90027856:	4b0d      	ldr	r3, [pc, #52]	; (9002788c <std+0x5c>)
90027858:	62a3      	str	r3, [r4, #40]	; 0x28
9002785a:	4b0d      	ldr	r3, [pc, #52]	; (90027890 <std+0x60>)
9002785c:	62e3      	str	r3, [r4, #44]	; 0x2c
9002785e:	4b0d      	ldr	r3, [pc, #52]	; (90027894 <std+0x64>)
90027860:	6323      	str	r3, [r4, #48]	; 0x30
90027862:	4b0d      	ldr	r3, [pc, #52]	; (90027898 <std+0x68>)
90027864:	6224      	str	r4, [r4, #32]
90027866:	429c      	cmp	r4, r3
90027868:	d006      	beq.n	90027878 <std+0x48>
9002786a:	f103 0268 	add.w	r2, r3, #104	; 0x68
9002786e:	4294      	cmp	r4, r2
90027870:	d002      	beq.n	90027878 <std+0x48>
90027872:	33d0      	adds	r3, #208	; 0xd0
90027874:	429c      	cmp	r4, r3
90027876:	d105      	bne.n	90027884 <std+0x54>
90027878:	f104 0058 	add.w	r0, r4, #88	; 0x58
9002787c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
90027880:	f000 ba7a 	b.w	90027d78 <__retarget_lock_init_recursive>
90027884:	bd10      	pop	{r4, pc}
90027886:	bf00      	nop
90027888:	900279d9 	.word	0x900279d9
9002788c:	900279fb 	.word	0x900279fb
90027890:	90027a33 	.word	0x90027a33
90027894:	90027a57 	.word	0x90027a57
90027898:	240282f8 	.word	0x240282f8

9002789c <stdio_exit_handler>:
9002789c:	4a02      	ldr	r2, [pc, #8]	; (900278a8 <stdio_exit_handler+0xc>)
9002789e:	4903      	ldr	r1, [pc, #12]	; (900278ac <stdio_exit_handler+0x10>)
900278a0:	4803      	ldr	r0, [pc, #12]	; (900278b0 <stdio_exit_handler+0x14>)
900278a2:	f000 b87b 	b.w	9002799c <_fwalk_sglue>
900278a6:	bf00      	nop
900278a8:	240000e0 	.word	0x240000e0
900278ac:	900285a5 	.word	0x900285a5
900278b0:	240000ec 	.word	0x240000ec

900278b4 <cleanup_stdio>:
900278b4:	6841      	ldr	r1, [r0, #4]
900278b6:	4b0c      	ldr	r3, [pc, #48]	; (900278e8 <cleanup_stdio+0x34>)
900278b8:	4299      	cmp	r1, r3
900278ba:	b510      	push	{r4, lr}
900278bc:	4604      	mov	r4, r0
900278be:	d001      	beq.n	900278c4 <cleanup_stdio+0x10>
900278c0:	f000 fe70 	bl	900285a4 <_fflush_r>
900278c4:	68a1      	ldr	r1, [r4, #8]
900278c6:	4b09      	ldr	r3, [pc, #36]	; (900278ec <cleanup_stdio+0x38>)
900278c8:	4299      	cmp	r1, r3
900278ca:	d002      	beq.n	900278d2 <cleanup_stdio+0x1e>
900278cc:	4620      	mov	r0, r4
900278ce:	f000 fe69 	bl	900285a4 <_fflush_r>
900278d2:	68e1      	ldr	r1, [r4, #12]
900278d4:	4b06      	ldr	r3, [pc, #24]	; (900278f0 <cleanup_stdio+0x3c>)
900278d6:	4299      	cmp	r1, r3
900278d8:	d004      	beq.n	900278e4 <cleanup_stdio+0x30>
900278da:	4620      	mov	r0, r4
900278dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
900278e0:	f000 be60 	b.w	900285a4 <_fflush_r>
900278e4:	bd10      	pop	{r4, pc}
900278e6:	bf00      	nop
900278e8:	240282f8 	.word	0x240282f8
900278ec:	24028360 	.word	0x24028360
900278f0:	240283c8 	.word	0x240283c8

900278f4 <global_stdio_init.part.0>:
900278f4:	b510      	push	{r4, lr}
900278f6:	4b0b      	ldr	r3, [pc, #44]	; (90027924 <global_stdio_init.part.0+0x30>)
900278f8:	4c0b      	ldr	r4, [pc, #44]	; (90027928 <global_stdio_init.part.0+0x34>)
900278fa:	4a0c      	ldr	r2, [pc, #48]	; (9002792c <global_stdio_init.part.0+0x38>)
900278fc:	601a      	str	r2, [r3, #0]
900278fe:	4620      	mov	r0, r4
90027900:	2200      	movs	r2, #0
90027902:	2104      	movs	r1, #4
90027904:	f7ff ff94 	bl	90027830 <std>
90027908:	f104 0068 	add.w	r0, r4, #104	; 0x68
9002790c:	2201      	movs	r2, #1
9002790e:	2109      	movs	r1, #9
90027910:	f7ff ff8e 	bl	90027830 <std>
90027914:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
90027918:	2202      	movs	r2, #2
9002791a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
9002791e:	2112      	movs	r1, #18
90027920:	f7ff bf86 	b.w	90027830 <std>
90027924:	24028430 	.word	0x24028430
90027928:	240282f8 	.word	0x240282f8
9002792c:	9002789d 	.word	0x9002789d

90027930 <__sfp_lock_acquire>:
90027930:	4801      	ldr	r0, [pc, #4]	; (90027938 <__sfp_lock_acquire+0x8>)
90027932:	f000 ba22 	b.w	90027d7a <__retarget_lock_acquire_recursive>
90027936:	bf00      	nop
90027938:	2402843a 	.word	0x2402843a

9002793c <__sfp_lock_release>:
9002793c:	4801      	ldr	r0, [pc, #4]	; (90027944 <__sfp_lock_release+0x8>)
9002793e:	f000 ba1d 	b.w	90027d7c <__retarget_lock_release_recursive>
90027942:	bf00      	nop
90027944:	2402843a 	.word	0x2402843a

90027948 <__sinit>:
90027948:	b510      	push	{r4, lr}
9002794a:	4604      	mov	r4, r0
9002794c:	f7ff fff0 	bl	90027930 <__sfp_lock_acquire>
90027950:	6a23      	ldr	r3, [r4, #32]
90027952:	b11b      	cbz	r3, 9002795c <__sinit+0x14>
90027954:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
90027958:	f7ff bff0 	b.w	9002793c <__sfp_lock_release>
9002795c:	4b04      	ldr	r3, [pc, #16]	; (90027970 <__sinit+0x28>)
9002795e:	6223      	str	r3, [r4, #32]
90027960:	4b04      	ldr	r3, [pc, #16]	; (90027974 <__sinit+0x2c>)
90027962:	681b      	ldr	r3, [r3, #0]
90027964:	2b00      	cmp	r3, #0
90027966:	d1f5      	bne.n	90027954 <__sinit+0xc>
90027968:	f7ff ffc4 	bl	900278f4 <global_stdio_init.part.0>
9002796c:	e7f2      	b.n	90027954 <__sinit+0xc>
9002796e:	bf00      	nop
90027970:	900278b5 	.word	0x900278b5
90027974:	24028430 	.word	0x24028430

90027978 <fiprintf>:
90027978:	b40e      	push	{r1, r2, r3}
9002797a:	b503      	push	{r0, r1, lr}
9002797c:	4601      	mov	r1, r0
9002797e:	ab03      	add	r3, sp, #12
90027980:	4805      	ldr	r0, [pc, #20]	; (90027998 <fiprintf+0x20>)
90027982:	f853 2b04 	ldr.w	r2, [r3], #4
90027986:	6800      	ldr	r0, [r0, #0]
90027988:	9301      	str	r3, [sp, #4]
9002798a:	f000 fadb 	bl	90027f44 <_vfiprintf_r>
9002798e:	b002      	add	sp, #8
90027990:	f85d eb04 	ldr.w	lr, [sp], #4
90027994:	b003      	add	sp, #12
90027996:	4770      	bx	lr
90027998:	24000138 	.word	0x24000138

9002799c <_fwalk_sglue>:
9002799c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
900279a0:	4607      	mov	r7, r0
900279a2:	4688      	mov	r8, r1
900279a4:	4614      	mov	r4, r2
900279a6:	2600      	movs	r6, #0
900279a8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
900279ac:	f1b9 0901 	subs.w	r9, r9, #1
900279b0:	d505      	bpl.n	900279be <_fwalk_sglue+0x22>
900279b2:	6824      	ldr	r4, [r4, #0]
900279b4:	2c00      	cmp	r4, #0
900279b6:	d1f7      	bne.n	900279a8 <_fwalk_sglue+0xc>
900279b8:	4630      	mov	r0, r6
900279ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
900279be:	89ab      	ldrh	r3, [r5, #12]
900279c0:	2b01      	cmp	r3, #1
900279c2:	d907      	bls.n	900279d4 <_fwalk_sglue+0x38>
900279c4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
900279c8:	3301      	adds	r3, #1
900279ca:	d003      	beq.n	900279d4 <_fwalk_sglue+0x38>
900279cc:	4629      	mov	r1, r5
900279ce:	4638      	mov	r0, r7
900279d0:	47c0      	blx	r8
900279d2:	4306      	orrs	r6, r0
900279d4:	3568      	adds	r5, #104	; 0x68
900279d6:	e7e9      	b.n	900279ac <_fwalk_sglue+0x10>

900279d8 <__sread>:
900279d8:	b510      	push	{r4, lr}
900279da:	460c      	mov	r4, r1
900279dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
900279e0:	f000 f958 	bl	90027c94 <_read_r>
900279e4:	2800      	cmp	r0, #0
900279e6:	bfab      	itete	ge
900279e8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
900279ea:	89a3      	ldrhlt	r3, [r4, #12]
900279ec:	181b      	addge	r3, r3, r0
900279ee:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
900279f2:	bfac      	ite	ge
900279f4:	6563      	strge	r3, [r4, #84]	; 0x54
900279f6:	81a3      	strhlt	r3, [r4, #12]
900279f8:	bd10      	pop	{r4, pc}

900279fa <__swrite>:
900279fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
900279fe:	461f      	mov	r7, r3
90027a00:	898b      	ldrh	r3, [r1, #12]
90027a02:	05db      	lsls	r3, r3, #23
90027a04:	4605      	mov	r5, r0
90027a06:	460c      	mov	r4, r1
90027a08:	4616      	mov	r6, r2
90027a0a:	d505      	bpl.n	90027a18 <__swrite+0x1e>
90027a0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
90027a10:	2302      	movs	r3, #2
90027a12:	2200      	movs	r2, #0
90027a14:	f000 f92c 	bl	90027c70 <_lseek_r>
90027a18:	89a3      	ldrh	r3, [r4, #12]
90027a1a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
90027a1e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
90027a22:	81a3      	strh	r3, [r4, #12]
90027a24:	4632      	mov	r2, r6
90027a26:	463b      	mov	r3, r7
90027a28:	4628      	mov	r0, r5
90027a2a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
90027a2e:	f000 b967 	b.w	90027d00 <_write_r>

90027a32 <__sseek>:
90027a32:	b510      	push	{r4, lr}
90027a34:	460c      	mov	r4, r1
90027a36:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
90027a3a:	f000 f919 	bl	90027c70 <_lseek_r>
90027a3e:	1c43      	adds	r3, r0, #1
90027a40:	89a3      	ldrh	r3, [r4, #12]
90027a42:	bf15      	itete	ne
90027a44:	6560      	strne	r0, [r4, #84]	; 0x54
90027a46:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
90027a4a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
90027a4e:	81a3      	strheq	r3, [r4, #12]
90027a50:	bf18      	it	ne
90027a52:	81a3      	strhne	r3, [r4, #12]
90027a54:	bd10      	pop	{r4, pc}

90027a56 <__sclose>:
90027a56:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
90027a5a:	f000 b8f9 	b.w	90027c50 <_close_r>

90027a5e <__swbuf_r>:
90027a5e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
90027a60:	460e      	mov	r6, r1
90027a62:	4614      	mov	r4, r2
90027a64:	4605      	mov	r5, r0
90027a66:	b118      	cbz	r0, 90027a70 <__swbuf_r+0x12>
90027a68:	6a03      	ldr	r3, [r0, #32]
90027a6a:	b90b      	cbnz	r3, 90027a70 <__swbuf_r+0x12>
90027a6c:	f7ff ff6c 	bl	90027948 <__sinit>
90027a70:	69a3      	ldr	r3, [r4, #24]
90027a72:	60a3      	str	r3, [r4, #8]
90027a74:	89a3      	ldrh	r3, [r4, #12]
90027a76:	071a      	lsls	r2, r3, #28
90027a78:	d525      	bpl.n	90027ac6 <__swbuf_r+0x68>
90027a7a:	6923      	ldr	r3, [r4, #16]
90027a7c:	b31b      	cbz	r3, 90027ac6 <__swbuf_r+0x68>
90027a7e:	6823      	ldr	r3, [r4, #0]
90027a80:	6922      	ldr	r2, [r4, #16]
90027a82:	1a98      	subs	r0, r3, r2
90027a84:	6963      	ldr	r3, [r4, #20]
90027a86:	b2f6      	uxtb	r6, r6
90027a88:	4283      	cmp	r3, r0
90027a8a:	4637      	mov	r7, r6
90027a8c:	dc04      	bgt.n	90027a98 <__swbuf_r+0x3a>
90027a8e:	4621      	mov	r1, r4
90027a90:	4628      	mov	r0, r5
90027a92:	f000 fd87 	bl	900285a4 <_fflush_r>
90027a96:	b9e0      	cbnz	r0, 90027ad2 <__swbuf_r+0x74>
90027a98:	68a3      	ldr	r3, [r4, #8]
90027a9a:	3b01      	subs	r3, #1
90027a9c:	60a3      	str	r3, [r4, #8]
90027a9e:	6823      	ldr	r3, [r4, #0]
90027aa0:	1c5a      	adds	r2, r3, #1
90027aa2:	6022      	str	r2, [r4, #0]
90027aa4:	701e      	strb	r6, [r3, #0]
90027aa6:	6962      	ldr	r2, [r4, #20]
90027aa8:	1c43      	adds	r3, r0, #1
90027aaa:	429a      	cmp	r2, r3
90027aac:	d004      	beq.n	90027ab8 <__swbuf_r+0x5a>
90027aae:	89a3      	ldrh	r3, [r4, #12]
90027ab0:	07db      	lsls	r3, r3, #31
90027ab2:	d506      	bpl.n	90027ac2 <__swbuf_r+0x64>
90027ab4:	2e0a      	cmp	r6, #10
90027ab6:	d104      	bne.n	90027ac2 <__swbuf_r+0x64>
90027ab8:	4621      	mov	r1, r4
90027aba:	4628      	mov	r0, r5
90027abc:	f000 fd72 	bl	900285a4 <_fflush_r>
90027ac0:	b938      	cbnz	r0, 90027ad2 <__swbuf_r+0x74>
90027ac2:	4638      	mov	r0, r7
90027ac4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
90027ac6:	4621      	mov	r1, r4
90027ac8:	4628      	mov	r0, r5
90027aca:	f000 f805 	bl	90027ad8 <__swsetup_r>
90027ace:	2800      	cmp	r0, #0
90027ad0:	d0d5      	beq.n	90027a7e <__swbuf_r+0x20>
90027ad2:	f04f 37ff 	mov.w	r7, #4294967295
90027ad6:	e7f4      	b.n	90027ac2 <__swbuf_r+0x64>

90027ad8 <__swsetup_r>:
90027ad8:	b538      	push	{r3, r4, r5, lr}
90027ada:	4b2a      	ldr	r3, [pc, #168]	; (90027b84 <__swsetup_r+0xac>)
90027adc:	4605      	mov	r5, r0
90027ade:	6818      	ldr	r0, [r3, #0]
90027ae0:	460c      	mov	r4, r1
90027ae2:	b118      	cbz	r0, 90027aec <__swsetup_r+0x14>
90027ae4:	6a03      	ldr	r3, [r0, #32]
90027ae6:	b90b      	cbnz	r3, 90027aec <__swsetup_r+0x14>
90027ae8:	f7ff ff2e 	bl	90027948 <__sinit>
90027aec:	89a3      	ldrh	r3, [r4, #12]
90027aee:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
90027af2:	0718      	lsls	r0, r3, #28
90027af4:	d422      	bmi.n	90027b3c <__swsetup_r+0x64>
90027af6:	06d9      	lsls	r1, r3, #27
90027af8:	d407      	bmi.n	90027b0a <__swsetup_r+0x32>
90027afa:	2309      	movs	r3, #9
90027afc:	602b      	str	r3, [r5, #0]
90027afe:	f042 0340 	orr.w	r3, r2, #64	; 0x40
90027b02:	81a3      	strh	r3, [r4, #12]
90027b04:	f04f 30ff 	mov.w	r0, #4294967295
90027b08:	e034      	b.n	90027b74 <__swsetup_r+0x9c>
90027b0a:	0758      	lsls	r0, r3, #29
90027b0c:	d512      	bpl.n	90027b34 <__swsetup_r+0x5c>
90027b0e:	6b61      	ldr	r1, [r4, #52]	; 0x34
90027b10:	b141      	cbz	r1, 90027b24 <__swsetup_r+0x4c>
90027b12:	f104 0344 	add.w	r3, r4, #68	; 0x44
90027b16:	4299      	cmp	r1, r3
90027b18:	d002      	beq.n	90027b20 <__swsetup_r+0x48>
90027b1a:	4628      	mov	r0, r5
90027b1c:	f000 f99c 	bl	90027e58 <_free_r>
90027b20:	2300      	movs	r3, #0
90027b22:	6363      	str	r3, [r4, #52]	; 0x34
90027b24:	89a3      	ldrh	r3, [r4, #12]
90027b26:	f023 0324 	bic.w	r3, r3, #36	; 0x24
90027b2a:	81a3      	strh	r3, [r4, #12]
90027b2c:	2300      	movs	r3, #0
90027b2e:	6063      	str	r3, [r4, #4]
90027b30:	6923      	ldr	r3, [r4, #16]
90027b32:	6023      	str	r3, [r4, #0]
90027b34:	89a3      	ldrh	r3, [r4, #12]
90027b36:	f043 0308 	orr.w	r3, r3, #8
90027b3a:	81a3      	strh	r3, [r4, #12]
90027b3c:	6923      	ldr	r3, [r4, #16]
90027b3e:	b94b      	cbnz	r3, 90027b54 <__swsetup_r+0x7c>
90027b40:	89a3      	ldrh	r3, [r4, #12]
90027b42:	f403 7320 	and.w	r3, r3, #640	; 0x280
90027b46:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
90027b4a:	d003      	beq.n	90027b54 <__swsetup_r+0x7c>
90027b4c:	4621      	mov	r1, r4
90027b4e:	4628      	mov	r0, r5
90027b50:	f000 fd76 	bl	90028640 <__smakebuf_r>
90027b54:	89a0      	ldrh	r0, [r4, #12]
90027b56:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
90027b5a:	f010 0301 	ands.w	r3, r0, #1
90027b5e:	d00a      	beq.n	90027b76 <__swsetup_r+0x9e>
90027b60:	2300      	movs	r3, #0
90027b62:	60a3      	str	r3, [r4, #8]
90027b64:	6963      	ldr	r3, [r4, #20]
90027b66:	425b      	negs	r3, r3
90027b68:	61a3      	str	r3, [r4, #24]
90027b6a:	6923      	ldr	r3, [r4, #16]
90027b6c:	b943      	cbnz	r3, 90027b80 <__swsetup_r+0xa8>
90027b6e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
90027b72:	d1c4      	bne.n	90027afe <__swsetup_r+0x26>
90027b74:	bd38      	pop	{r3, r4, r5, pc}
90027b76:	0781      	lsls	r1, r0, #30
90027b78:	bf58      	it	pl
90027b7a:	6963      	ldrpl	r3, [r4, #20]
90027b7c:	60a3      	str	r3, [r4, #8]
90027b7e:	e7f4      	b.n	90027b6a <__swsetup_r+0x92>
90027b80:	2000      	movs	r0, #0
90027b82:	e7f7      	b.n	90027b74 <__swsetup_r+0x9c>
90027b84:	24000138 	.word	0x24000138

90027b88 <memmove>:
90027b88:	4288      	cmp	r0, r1
90027b8a:	b510      	push	{r4, lr}
90027b8c:	eb01 0402 	add.w	r4, r1, r2
90027b90:	d902      	bls.n	90027b98 <memmove+0x10>
90027b92:	4284      	cmp	r4, r0
90027b94:	4623      	mov	r3, r4
90027b96:	d807      	bhi.n	90027ba8 <memmove+0x20>
90027b98:	1e43      	subs	r3, r0, #1
90027b9a:	42a1      	cmp	r1, r4
90027b9c:	d008      	beq.n	90027bb0 <memmove+0x28>
90027b9e:	f811 2b01 	ldrb.w	r2, [r1], #1
90027ba2:	f803 2f01 	strb.w	r2, [r3, #1]!
90027ba6:	e7f8      	b.n	90027b9a <memmove+0x12>
90027ba8:	4402      	add	r2, r0
90027baa:	4601      	mov	r1, r0
90027bac:	428a      	cmp	r2, r1
90027bae:	d100      	bne.n	90027bb2 <memmove+0x2a>
90027bb0:	bd10      	pop	{r4, pc}
90027bb2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
90027bb6:	f802 4d01 	strb.w	r4, [r2, #-1]!
90027bba:	e7f7      	b.n	90027bac <memmove+0x24>

90027bbc <memset>:
90027bbc:	4402      	add	r2, r0
90027bbe:	4603      	mov	r3, r0
90027bc0:	4293      	cmp	r3, r2
90027bc2:	d100      	bne.n	90027bc6 <memset+0xa>
90027bc4:	4770      	bx	lr
90027bc6:	f803 1b01 	strb.w	r1, [r3], #1
90027bca:	e7f9      	b.n	90027bc0 <memset+0x4>

90027bcc <strncmp>:
90027bcc:	b510      	push	{r4, lr}
90027bce:	b16a      	cbz	r2, 90027bec <strncmp+0x20>
90027bd0:	3901      	subs	r1, #1
90027bd2:	1884      	adds	r4, r0, r2
90027bd4:	f810 2b01 	ldrb.w	r2, [r0], #1
90027bd8:	f811 3f01 	ldrb.w	r3, [r1, #1]!
90027bdc:	429a      	cmp	r2, r3
90027bde:	d103      	bne.n	90027be8 <strncmp+0x1c>
90027be0:	42a0      	cmp	r0, r4
90027be2:	d001      	beq.n	90027be8 <strncmp+0x1c>
90027be4:	2a00      	cmp	r2, #0
90027be6:	d1f5      	bne.n	90027bd4 <strncmp+0x8>
90027be8:	1ad0      	subs	r0, r2, r3
90027bea:	bd10      	pop	{r4, pc}
90027bec:	4610      	mov	r0, r2
90027bee:	e7fc      	b.n	90027bea <strncmp+0x1e>

90027bf0 <_raise_r>:
90027bf0:	291f      	cmp	r1, #31
90027bf2:	b538      	push	{r3, r4, r5, lr}
90027bf4:	4604      	mov	r4, r0
90027bf6:	460d      	mov	r5, r1
90027bf8:	d904      	bls.n	90027c04 <_raise_r+0x14>
90027bfa:	2316      	movs	r3, #22
90027bfc:	6003      	str	r3, [r0, #0]
90027bfe:	f04f 30ff 	mov.w	r0, #4294967295
90027c02:	bd38      	pop	{r3, r4, r5, pc}
90027c04:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
90027c06:	b112      	cbz	r2, 90027c0e <_raise_r+0x1e>
90027c08:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
90027c0c:	b94b      	cbnz	r3, 90027c22 <_raise_r+0x32>
90027c0e:	4620      	mov	r0, r4
90027c10:	f000 f864 	bl	90027cdc <_getpid_r>
90027c14:	462a      	mov	r2, r5
90027c16:	4601      	mov	r1, r0
90027c18:	4620      	mov	r0, r4
90027c1a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
90027c1e:	f000 b84b 	b.w	90027cb8 <_kill_r>
90027c22:	2b01      	cmp	r3, #1
90027c24:	d00a      	beq.n	90027c3c <_raise_r+0x4c>
90027c26:	1c59      	adds	r1, r3, #1
90027c28:	d103      	bne.n	90027c32 <_raise_r+0x42>
90027c2a:	2316      	movs	r3, #22
90027c2c:	6003      	str	r3, [r0, #0]
90027c2e:	2001      	movs	r0, #1
90027c30:	e7e7      	b.n	90027c02 <_raise_r+0x12>
90027c32:	2400      	movs	r4, #0
90027c34:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
90027c38:	4628      	mov	r0, r5
90027c3a:	4798      	blx	r3
90027c3c:	2000      	movs	r0, #0
90027c3e:	e7e0      	b.n	90027c02 <_raise_r+0x12>

90027c40 <raise>:
90027c40:	4b02      	ldr	r3, [pc, #8]	; (90027c4c <raise+0xc>)
90027c42:	4601      	mov	r1, r0
90027c44:	6818      	ldr	r0, [r3, #0]
90027c46:	f7ff bfd3 	b.w	90027bf0 <_raise_r>
90027c4a:	bf00      	nop
90027c4c:	24000138 	.word	0x24000138

90027c50 <_close_r>:
90027c50:	b538      	push	{r3, r4, r5, lr}
90027c52:	4d06      	ldr	r5, [pc, #24]	; (90027c6c <_close_r+0x1c>)
90027c54:	2300      	movs	r3, #0
90027c56:	4604      	mov	r4, r0
90027c58:	4608      	mov	r0, r1
90027c5a:	602b      	str	r3, [r5, #0]
90027c5c:	f7dd f8dc 	bl	90004e18 <_close>
90027c60:	1c43      	adds	r3, r0, #1
90027c62:	d102      	bne.n	90027c6a <_close_r+0x1a>
90027c64:	682b      	ldr	r3, [r5, #0]
90027c66:	b103      	cbz	r3, 90027c6a <_close_r+0x1a>
90027c68:	6023      	str	r3, [r4, #0]
90027c6a:	bd38      	pop	{r3, r4, r5, pc}
90027c6c:	24028434 	.word	0x24028434

90027c70 <_lseek_r>:
90027c70:	b538      	push	{r3, r4, r5, lr}
90027c72:	4d07      	ldr	r5, [pc, #28]	; (90027c90 <_lseek_r+0x20>)
90027c74:	4604      	mov	r4, r0
90027c76:	4608      	mov	r0, r1
90027c78:	4611      	mov	r1, r2
90027c7a:	2200      	movs	r2, #0
90027c7c:	602a      	str	r2, [r5, #0]
90027c7e:	461a      	mov	r2, r3
90027c80:	f7dd f8d6 	bl	90004e30 <_lseek>
90027c84:	1c43      	adds	r3, r0, #1
90027c86:	d102      	bne.n	90027c8e <_lseek_r+0x1e>
90027c88:	682b      	ldr	r3, [r5, #0]
90027c8a:	b103      	cbz	r3, 90027c8e <_lseek_r+0x1e>
90027c8c:	6023      	str	r3, [r4, #0]
90027c8e:	bd38      	pop	{r3, r4, r5, pc}
90027c90:	24028434 	.word	0x24028434

90027c94 <_read_r>:
90027c94:	b538      	push	{r3, r4, r5, lr}
90027c96:	4d07      	ldr	r5, [pc, #28]	; (90027cb4 <_read_r+0x20>)
90027c98:	4604      	mov	r4, r0
90027c9a:	4608      	mov	r0, r1
90027c9c:	4611      	mov	r1, r2
90027c9e:	2200      	movs	r2, #0
90027ca0:	602a      	str	r2, [r5, #0]
90027ca2:	461a      	mov	r2, r3
90027ca4:	f7dd f89c 	bl	90004de0 <_read>
90027ca8:	1c43      	adds	r3, r0, #1
90027caa:	d102      	bne.n	90027cb2 <_read_r+0x1e>
90027cac:	682b      	ldr	r3, [r5, #0]
90027cae:	b103      	cbz	r3, 90027cb2 <_read_r+0x1e>
90027cb0:	6023      	str	r3, [r4, #0]
90027cb2:	bd38      	pop	{r3, r4, r5, pc}
90027cb4:	24028434 	.word	0x24028434

90027cb8 <_kill_r>:
90027cb8:	b538      	push	{r3, r4, r5, lr}
90027cba:	4d07      	ldr	r5, [pc, #28]	; (90027cd8 <_kill_r+0x20>)
90027cbc:	2300      	movs	r3, #0
90027cbe:	4604      	mov	r4, r0
90027cc0:	4608      	mov	r0, r1
90027cc2:	4611      	mov	r1, r2
90027cc4:	602b      	str	r3, [r5, #0]
90027cc6:	f7dd f87b 	bl	90004dc0 <_kill>
90027cca:	1c43      	adds	r3, r0, #1
90027ccc:	d102      	bne.n	90027cd4 <_kill_r+0x1c>
90027cce:	682b      	ldr	r3, [r5, #0]
90027cd0:	b103      	cbz	r3, 90027cd4 <_kill_r+0x1c>
90027cd2:	6023      	str	r3, [r4, #0]
90027cd4:	bd38      	pop	{r3, r4, r5, pc}
90027cd6:	bf00      	nop
90027cd8:	24028434 	.word	0x24028434

90027cdc <_getpid_r>:
90027cdc:	f7dd b86e 	b.w	90004dbc <_getpid>

90027ce0 <_sbrk_r>:
90027ce0:	b538      	push	{r3, r4, r5, lr}
90027ce2:	4d06      	ldr	r5, [pc, #24]	; (90027cfc <_sbrk_r+0x1c>)
90027ce4:	2300      	movs	r3, #0
90027ce6:	4604      	mov	r4, r0
90027ce8:	4608      	mov	r0, r1
90027cea:	602b      	str	r3, [r5, #0]
90027cec:	f7dd f8a2 	bl	90004e34 <_sbrk>
90027cf0:	1c43      	adds	r3, r0, #1
90027cf2:	d102      	bne.n	90027cfa <_sbrk_r+0x1a>
90027cf4:	682b      	ldr	r3, [r5, #0]
90027cf6:	b103      	cbz	r3, 90027cfa <_sbrk_r+0x1a>
90027cf8:	6023      	str	r3, [r4, #0]
90027cfa:	bd38      	pop	{r3, r4, r5, pc}
90027cfc:	24028434 	.word	0x24028434

90027d00 <_write_r>:
90027d00:	b538      	push	{r3, r4, r5, lr}
90027d02:	4d07      	ldr	r5, [pc, #28]	; (90027d20 <_write_r+0x20>)
90027d04:	4604      	mov	r4, r0
90027d06:	4608      	mov	r0, r1
90027d08:	4611      	mov	r1, r2
90027d0a:	2200      	movs	r2, #0
90027d0c:	602a      	str	r2, [r5, #0]
90027d0e:	461a      	mov	r2, r3
90027d10:	f7dd f874 	bl	90004dfc <_write>
90027d14:	1c43      	adds	r3, r0, #1
90027d16:	d102      	bne.n	90027d1e <_write_r+0x1e>
90027d18:	682b      	ldr	r3, [r5, #0]
90027d1a:	b103      	cbz	r3, 90027d1e <_write_r+0x1e>
90027d1c:	6023      	str	r3, [r4, #0]
90027d1e:	bd38      	pop	{r3, r4, r5, pc}
90027d20:	24028434 	.word	0x24028434

90027d24 <__errno>:
90027d24:	4b01      	ldr	r3, [pc, #4]	; (90027d2c <__errno+0x8>)
90027d26:	6818      	ldr	r0, [r3, #0]
90027d28:	4770      	bx	lr
90027d2a:	bf00      	nop
90027d2c:	24000138 	.word	0x24000138

90027d30 <__libc_init_array>:
90027d30:	b570      	push	{r4, r5, r6, lr}
90027d32:	4d0d      	ldr	r5, [pc, #52]	; (90027d68 <__libc_init_array+0x38>)
90027d34:	4c0d      	ldr	r4, [pc, #52]	; (90027d6c <__libc_init_array+0x3c>)
90027d36:	1b64      	subs	r4, r4, r5
90027d38:	10a4      	asrs	r4, r4, #2
90027d3a:	2600      	movs	r6, #0
90027d3c:	42a6      	cmp	r6, r4
90027d3e:	d109      	bne.n	90027d54 <__libc_init_array+0x24>
90027d40:	4d0b      	ldr	r5, [pc, #44]	; (90027d70 <__libc_init_array+0x40>)
90027d42:	4c0c      	ldr	r4, [pc, #48]	; (90027d74 <__libc_init_array+0x44>)
90027d44:	f000 fcda 	bl	900286fc <_init>
90027d48:	1b64      	subs	r4, r4, r5
90027d4a:	10a4      	asrs	r4, r4, #2
90027d4c:	2600      	movs	r6, #0
90027d4e:	42a6      	cmp	r6, r4
90027d50:	d105      	bne.n	90027d5e <__libc_init_array+0x2e>
90027d52:	bd70      	pop	{r4, r5, r6, pc}
90027d54:	f855 3b04 	ldr.w	r3, [r5], #4
90027d58:	4798      	blx	r3
90027d5a:	3601      	adds	r6, #1
90027d5c:	e7ee      	b.n	90027d3c <__libc_init_array+0xc>
90027d5e:	f855 3b04 	ldr.w	r3, [r5], #4
90027d62:	4798      	blx	r3
90027d64:	3601      	adds	r6, #1
90027d66:	e7f2      	b.n	90027d4e <__libc_init_array+0x1e>
90027d68:	9002c958 	.word	0x9002c958
90027d6c:	9002c958 	.word	0x9002c958
90027d70:	9002c958 	.word	0x9002c958
90027d74:	9002c974 	.word	0x9002c974

90027d78 <__retarget_lock_init_recursive>:
90027d78:	4770      	bx	lr

90027d7a <__retarget_lock_acquire_recursive>:
90027d7a:	4770      	bx	lr

90027d7c <__retarget_lock_release_recursive>:
90027d7c:	4770      	bx	lr

90027d7e <memcpy>:
90027d7e:	440a      	add	r2, r1
90027d80:	4291      	cmp	r1, r2
90027d82:	f100 33ff 	add.w	r3, r0, #4294967295
90027d86:	d100      	bne.n	90027d8a <memcpy+0xc>
90027d88:	4770      	bx	lr
90027d8a:	b510      	push	{r4, lr}
90027d8c:	f811 4b01 	ldrb.w	r4, [r1], #1
90027d90:	f803 4f01 	strb.w	r4, [r3, #1]!
90027d94:	4291      	cmp	r1, r2
90027d96:	d1f9      	bne.n	90027d8c <memcpy+0xe>
90027d98:	bd10      	pop	{r4, pc}
	...

90027d9c <__register_exitproc>:
90027d9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
90027da0:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 90027e54 <__register_exitproc+0xb8>
90027da4:	4606      	mov	r6, r0
90027da6:	f8d8 0000 	ldr.w	r0, [r8]
90027daa:	461f      	mov	r7, r3
90027dac:	460d      	mov	r5, r1
90027dae:	4691      	mov	r9, r2
90027db0:	f7ff ffe3 	bl	90027d7a <__retarget_lock_acquire_recursive>
90027db4:	4b23      	ldr	r3, [pc, #140]	; (90027e44 <__register_exitproc+0xa8>)
90027db6:	681c      	ldr	r4, [r3, #0]
90027db8:	b934      	cbnz	r4, 90027dc8 <__register_exitproc+0x2c>
90027dba:	4c23      	ldr	r4, [pc, #140]	; (90027e48 <__register_exitproc+0xac>)
90027dbc:	601c      	str	r4, [r3, #0]
90027dbe:	4b23      	ldr	r3, [pc, #140]	; (90027e4c <__register_exitproc+0xb0>)
90027dc0:	b113      	cbz	r3, 90027dc8 <__register_exitproc+0x2c>
90027dc2:	681b      	ldr	r3, [r3, #0]
90027dc4:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
90027dc8:	6863      	ldr	r3, [r4, #4]
90027dca:	2b1f      	cmp	r3, #31
90027dcc:	dd07      	ble.n	90027dde <__register_exitproc+0x42>
90027dce:	f8d8 0000 	ldr.w	r0, [r8]
90027dd2:	f7ff ffd3 	bl	90027d7c <__retarget_lock_release_recursive>
90027dd6:	f04f 30ff 	mov.w	r0, #4294967295
90027dda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
90027dde:	b32e      	cbz	r6, 90027e2c <__register_exitproc+0x90>
90027de0:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
90027de4:	b968      	cbnz	r0, 90027e02 <__register_exitproc+0x66>
90027de6:	4b1a      	ldr	r3, [pc, #104]	; (90027e50 <__register_exitproc+0xb4>)
90027de8:	2b00      	cmp	r3, #0
90027dea:	d0f0      	beq.n	90027dce <__register_exitproc+0x32>
90027dec:	f44f 7084 	mov.w	r0, #264	; 0x108
90027df0:	f7ff fc54 	bl	9002769c <malloc>
90027df4:	2800      	cmp	r0, #0
90027df6:	d0ea      	beq.n	90027dce <__register_exitproc+0x32>
90027df8:	2300      	movs	r3, #0
90027dfa:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
90027dfe:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
90027e02:	6863      	ldr	r3, [r4, #4]
90027e04:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
90027e08:	2201      	movs	r2, #1
90027e0a:	409a      	lsls	r2, r3
90027e0c:	eb00 0183 	add.w	r1, r0, r3, lsl #2
90027e10:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
90027e14:	4313      	orrs	r3, r2
90027e16:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
90027e1a:	2e02      	cmp	r6, #2
90027e1c:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
90027e20:	bf02      	ittt	eq
90027e22:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
90027e26:	4313      	orreq	r3, r2
90027e28:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
90027e2c:	6863      	ldr	r3, [r4, #4]
90027e2e:	f8d8 0000 	ldr.w	r0, [r8]
90027e32:	1c5a      	adds	r2, r3, #1
90027e34:	3302      	adds	r3, #2
90027e36:	6062      	str	r2, [r4, #4]
90027e38:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
90027e3c:	f7ff ff9e 	bl	90027d7c <__retarget_lock_release_recursive>
90027e40:	2000      	movs	r0, #0
90027e42:	e7ca      	b.n	90027dda <__register_exitproc+0x3e>
90027e44:	240284c8 	.word	0x240284c8
90027e48:	2402843c 	.word	0x2402843c
90027e4c:	9002c768 	.word	0x9002c768
90027e50:	9002769d 	.word	0x9002769d
90027e54:	2400013c 	.word	0x2400013c

90027e58 <_free_r>:
90027e58:	b537      	push	{r0, r1, r2, r4, r5, lr}
90027e5a:	2900      	cmp	r1, #0
90027e5c:	d044      	beq.n	90027ee8 <_free_r+0x90>
90027e5e:	f851 3c04 	ldr.w	r3, [r1, #-4]
90027e62:	9001      	str	r0, [sp, #4]
90027e64:	2b00      	cmp	r3, #0
90027e66:	f1a1 0404 	sub.w	r4, r1, #4
90027e6a:	bfb8      	it	lt
90027e6c:	18e4      	addlt	r4, r4, r3
90027e6e:	f7ff fcc5 	bl	900277fc <__malloc_lock>
90027e72:	4a1e      	ldr	r2, [pc, #120]	; (90027eec <_free_r+0x94>)
90027e74:	9801      	ldr	r0, [sp, #4]
90027e76:	6813      	ldr	r3, [r2, #0]
90027e78:	b933      	cbnz	r3, 90027e88 <_free_r+0x30>
90027e7a:	6063      	str	r3, [r4, #4]
90027e7c:	6014      	str	r4, [r2, #0]
90027e7e:	b003      	add	sp, #12
90027e80:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
90027e84:	f7ff bcc0 	b.w	90027808 <__malloc_unlock>
90027e88:	42a3      	cmp	r3, r4
90027e8a:	d908      	bls.n	90027e9e <_free_r+0x46>
90027e8c:	6825      	ldr	r5, [r4, #0]
90027e8e:	1961      	adds	r1, r4, r5
90027e90:	428b      	cmp	r3, r1
90027e92:	bf01      	itttt	eq
90027e94:	6819      	ldreq	r1, [r3, #0]
90027e96:	685b      	ldreq	r3, [r3, #4]
90027e98:	1949      	addeq	r1, r1, r5
90027e9a:	6021      	streq	r1, [r4, #0]
90027e9c:	e7ed      	b.n	90027e7a <_free_r+0x22>
90027e9e:	461a      	mov	r2, r3
90027ea0:	685b      	ldr	r3, [r3, #4]
90027ea2:	b10b      	cbz	r3, 90027ea8 <_free_r+0x50>
90027ea4:	42a3      	cmp	r3, r4
90027ea6:	d9fa      	bls.n	90027e9e <_free_r+0x46>
90027ea8:	6811      	ldr	r1, [r2, #0]
90027eaa:	1855      	adds	r5, r2, r1
90027eac:	42a5      	cmp	r5, r4
90027eae:	d10b      	bne.n	90027ec8 <_free_r+0x70>
90027eb0:	6824      	ldr	r4, [r4, #0]
90027eb2:	4421      	add	r1, r4
90027eb4:	1854      	adds	r4, r2, r1
90027eb6:	42a3      	cmp	r3, r4
90027eb8:	6011      	str	r1, [r2, #0]
90027eba:	d1e0      	bne.n	90027e7e <_free_r+0x26>
90027ebc:	681c      	ldr	r4, [r3, #0]
90027ebe:	685b      	ldr	r3, [r3, #4]
90027ec0:	6053      	str	r3, [r2, #4]
90027ec2:	440c      	add	r4, r1
90027ec4:	6014      	str	r4, [r2, #0]
90027ec6:	e7da      	b.n	90027e7e <_free_r+0x26>
90027ec8:	d902      	bls.n	90027ed0 <_free_r+0x78>
90027eca:	230c      	movs	r3, #12
90027ecc:	6003      	str	r3, [r0, #0]
90027ece:	e7d6      	b.n	90027e7e <_free_r+0x26>
90027ed0:	6825      	ldr	r5, [r4, #0]
90027ed2:	1961      	adds	r1, r4, r5
90027ed4:	428b      	cmp	r3, r1
90027ed6:	bf04      	itt	eq
90027ed8:	6819      	ldreq	r1, [r3, #0]
90027eda:	685b      	ldreq	r3, [r3, #4]
90027edc:	6063      	str	r3, [r4, #4]
90027ede:	bf04      	itt	eq
90027ee0:	1949      	addeq	r1, r1, r5
90027ee2:	6021      	streq	r1, [r4, #0]
90027ee4:	6054      	str	r4, [r2, #4]
90027ee6:	e7ca      	b.n	90027e7e <_free_r+0x26>
90027ee8:	b003      	add	sp, #12
90027eea:	bd30      	pop	{r4, r5, pc}
90027eec:	240282f0 	.word	0x240282f0

90027ef0 <__sfputc_r>:
90027ef0:	6893      	ldr	r3, [r2, #8]
90027ef2:	3b01      	subs	r3, #1
90027ef4:	2b00      	cmp	r3, #0
90027ef6:	b410      	push	{r4}
90027ef8:	6093      	str	r3, [r2, #8]
90027efa:	da08      	bge.n	90027f0e <__sfputc_r+0x1e>
90027efc:	6994      	ldr	r4, [r2, #24]
90027efe:	42a3      	cmp	r3, r4
90027f00:	db01      	blt.n	90027f06 <__sfputc_r+0x16>
90027f02:	290a      	cmp	r1, #10
90027f04:	d103      	bne.n	90027f0e <__sfputc_r+0x1e>
90027f06:	f85d 4b04 	ldr.w	r4, [sp], #4
90027f0a:	f7ff bda8 	b.w	90027a5e <__swbuf_r>
90027f0e:	6813      	ldr	r3, [r2, #0]
90027f10:	1c58      	adds	r0, r3, #1
90027f12:	6010      	str	r0, [r2, #0]
90027f14:	7019      	strb	r1, [r3, #0]
90027f16:	4608      	mov	r0, r1
90027f18:	f85d 4b04 	ldr.w	r4, [sp], #4
90027f1c:	4770      	bx	lr

90027f1e <__sfputs_r>:
90027f1e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
90027f20:	4606      	mov	r6, r0
90027f22:	460f      	mov	r7, r1
90027f24:	4614      	mov	r4, r2
90027f26:	18d5      	adds	r5, r2, r3
90027f28:	42ac      	cmp	r4, r5
90027f2a:	d101      	bne.n	90027f30 <__sfputs_r+0x12>
90027f2c:	2000      	movs	r0, #0
90027f2e:	e007      	b.n	90027f40 <__sfputs_r+0x22>
90027f30:	f814 1b01 	ldrb.w	r1, [r4], #1
90027f34:	463a      	mov	r2, r7
90027f36:	4630      	mov	r0, r6
90027f38:	f7ff ffda 	bl	90027ef0 <__sfputc_r>
90027f3c:	1c43      	adds	r3, r0, #1
90027f3e:	d1f3      	bne.n	90027f28 <__sfputs_r+0xa>
90027f40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

90027f44 <_vfiprintf_r>:
90027f44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90027f48:	460d      	mov	r5, r1
90027f4a:	b09d      	sub	sp, #116	; 0x74
90027f4c:	4614      	mov	r4, r2
90027f4e:	4698      	mov	r8, r3
90027f50:	4606      	mov	r6, r0
90027f52:	b118      	cbz	r0, 90027f5c <_vfiprintf_r+0x18>
90027f54:	6a03      	ldr	r3, [r0, #32]
90027f56:	b90b      	cbnz	r3, 90027f5c <_vfiprintf_r+0x18>
90027f58:	f7ff fcf6 	bl	90027948 <__sinit>
90027f5c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
90027f5e:	07d9      	lsls	r1, r3, #31
90027f60:	d405      	bmi.n	90027f6e <_vfiprintf_r+0x2a>
90027f62:	89ab      	ldrh	r3, [r5, #12]
90027f64:	059a      	lsls	r2, r3, #22
90027f66:	d402      	bmi.n	90027f6e <_vfiprintf_r+0x2a>
90027f68:	6da8      	ldr	r0, [r5, #88]	; 0x58
90027f6a:	f7ff ff06 	bl	90027d7a <__retarget_lock_acquire_recursive>
90027f6e:	89ab      	ldrh	r3, [r5, #12]
90027f70:	071b      	lsls	r3, r3, #28
90027f72:	d501      	bpl.n	90027f78 <_vfiprintf_r+0x34>
90027f74:	692b      	ldr	r3, [r5, #16]
90027f76:	b99b      	cbnz	r3, 90027fa0 <_vfiprintf_r+0x5c>
90027f78:	4629      	mov	r1, r5
90027f7a:	4630      	mov	r0, r6
90027f7c:	f7ff fdac 	bl	90027ad8 <__swsetup_r>
90027f80:	b170      	cbz	r0, 90027fa0 <_vfiprintf_r+0x5c>
90027f82:	6e6b      	ldr	r3, [r5, #100]	; 0x64
90027f84:	07dc      	lsls	r4, r3, #31
90027f86:	d504      	bpl.n	90027f92 <_vfiprintf_r+0x4e>
90027f88:	f04f 30ff 	mov.w	r0, #4294967295
90027f8c:	b01d      	add	sp, #116	; 0x74
90027f8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90027f92:	89ab      	ldrh	r3, [r5, #12]
90027f94:	0598      	lsls	r0, r3, #22
90027f96:	d4f7      	bmi.n	90027f88 <_vfiprintf_r+0x44>
90027f98:	6da8      	ldr	r0, [r5, #88]	; 0x58
90027f9a:	f7ff feef 	bl	90027d7c <__retarget_lock_release_recursive>
90027f9e:	e7f3      	b.n	90027f88 <_vfiprintf_r+0x44>
90027fa0:	2300      	movs	r3, #0
90027fa2:	9309      	str	r3, [sp, #36]	; 0x24
90027fa4:	2320      	movs	r3, #32
90027fa6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
90027faa:	f8cd 800c 	str.w	r8, [sp, #12]
90027fae:	2330      	movs	r3, #48	; 0x30
90027fb0:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 90028164 <_vfiprintf_r+0x220>
90027fb4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
90027fb8:	f04f 0901 	mov.w	r9, #1
90027fbc:	4623      	mov	r3, r4
90027fbe:	469a      	mov	sl, r3
90027fc0:	f813 2b01 	ldrb.w	r2, [r3], #1
90027fc4:	b10a      	cbz	r2, 90027fca <_vfiprintf_r+0x86>
90027fc6:	2a25      	cmp	r2, #37	; 0x25
90027fc8:	d1f9      	bne.n	90027fbe <_vfiprintf_r+0x7a>
90027fca:	ebba 0b04 	subs.w	fp, sl, r4
90027fce:	d00b      	beq.n	90027fe8 <_vfiprintf_r+0xa4>
90027fd0:	465b      	mov	r3, fp
90027fd2:	4622      	mov	r2, r4
90027fd4:	4629      	mov	r1, r5
90027fd6:	4630      	mov	r0, r6
90027fd8:	f7ff ffa1 	bl	90027f1e <__sfputs_r>
90027fdc:	3001      	adds	r0, #1
90027fde:	f000 80a9 	beq.w	90028134 <_vfiprintf_r+0x1f0>
90027fe2:	9a09      	ldr	r2, [sp, #36]	; 0x24
90027fe4:	445a      	add	r2, fp
90027fe6:	9209      	str	r2, [sp, #36]	; 0x24
90027fe8:	f89a 3000 	ldrb.w	r3, [sl]
90027fec:	2b00      	cmp	r3, #0
90027fee:	f000 80a1 	beq.w	90028134 <_vfiprintf_r+0x1f0>
90027ff2:	2300      	movs	r3, #0
90027ff4:	f04f 32ff 	mov.w	r2, #4294967295
90027ff8:	e9cd 2305 	strd	r2, r3, [sp, #20]
90027ffc:	f10a 0a01 	add.w	sl, sl, #1
90028000:	9304      	str	r3, [sp, #16]
90028002:	9307      	str	r3, [sp, #28]
90028004:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
90028008:	931a      	str	r3, [sp, #104]	; 0x68
9002800a:	4654      	mov	r4, sl
9002800c:	2205      	movs	r2, #5
9002800e:	f814 1b01 	ldrb.w	r1, [r4], #1
90028012:	4854      	ldr	r0, [pc, #336]	; (90028164 <_vfiprintf_r+0x220>)
90028014:	f7d8 f974 	bl	90000300 <memchr>
90028018:	9a04      	ldr	r2, [sp, #16]
9002801a:	b9d8      	cbnz	r0, 90028054 <_vfiprintf_r+0x110>
9002801c:	06d1      	lsls	r1, r2, #27
9002801e:	bf44      	itt	mi
90028020:	2320      	movmi	r3, #32
90028022:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
90028026:	0713      	lsls	r3, r2, #28
90028028:	bf44      	itt	mi
9002802a:	232b      	movmi	r3, #43	; 0x2b
9002802c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
90028030:	f89a 3000 	ldrb.w	r3, [sl]
90028034:	2b2a      	cmp	r3, #42	; 0x2a
90028036:	d015      	beq.n	90028064 <_vfiprintf_r+0x120>
90028038:	9a07      	ldr	r2, [sp, #28]
9002803a:	4654      	mov	r4, sl
9002803c:	2000      	movs	r0, #0
9002803e:	f04f 0c0a 	mov.w	ip, #10
90028042:	4621      	mov	r1, r4
90028044:	f811 3b01 	ldrb.w	r3, [r1], #1
90028048:	3b30      	subs	r3, #48	; 0x30
9002804a:	2b09      	cmp	r3, #9
9002804c:	d94d      	bls.n	900280ea <_vfiprintf_r+0x1a6>
9002804e:	b1b0      	cbz	r0, 9002807e <_vfiprintf_r+0x13a>
90028050:	9207      	str	r2, [sp, #28]
90028052:	e014      	b.n	9002807e <_vfiprintf_r+0x13a>
90028054:	eba0 0308 	sub.w	r3, r0, r8
90028058:	fa09 f303 	lsl.w	r3, r9, r3
9002805c:	4313      	orrs	r3, r2
9002805e:	9304      	str	r3, [sp, #16]
90028060:	46a2      	mov	sl, r4
90028062:	e7d2      	b.n	9002800a <_vfiprintf_r+0xc6>
90028064:	9b03      	ldr	r3, [sp, #12]
90028066:	1d19      	adds	r1, r3, #4
90028068:	681b      	ldr	r3, [r3, #0]
9002806a:	9103      	str	r1, [sp, #12]
9002806c:	2b00      	cmp	r3, #0
9002806e:	bfbb      	ittet	lt
90028070:	425b      	neglt	r3, r3
90028072:	f042 0202 	orrlt.w	r2, r2, #2
90028076:	9307      	strge	r3, [sp, #28]
90028078:	9307      	strlt	r3, [sp, #28]
9002807a:	bfb8      	it	lt
9002807c:	9204      	strlt	r2, [sp, #16]
9002807e:	7823      	ldrb	r3, [r4, #0]
90028080:	2b2e      	cmp	r3, #46	; 0x2e
90028082:	d10c      	bne.n	9002809e <_vfiprintf_r+0x15a>
90028084:	7863      	ldrb	r3, [r4, #1]
90028086:	2b2a      	cmp	r3, #42	; 0x2a
90028088:	d134      	bne.n	900280f4 <_vfiprintf_r+0x1b0>
9002808a:	9b03      	ldr	r3, [sp, #12]
9002808c:	1d1a      	adds	r2, r3, #4
9002808e:	681b      	ldr	r3, [r3, #0]
90028090:	9203      	str	r2, [sp, #12]
90028092:	2b00      	cmp	r3, #0
90028094:	bfb8      	it	lt
90028096:	f04f 33ff 	movlt.w	r3, #4294967295
9002809a:	3402      	adds	r4, #2
9002809c:	9305      	str	r3, [sp, #20]
9002809e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 90028174 <_vfiprintf_r+0x230>
900280a2:	7821      	ldrb	r1, [r4, #0]
900280a4:	2203      	movs	r2, #3
900280a6:	4650      	mov	r0, sl
900280a8:	f7d8 f92a 	bl	90000300 <memchr>
900280ac:	b138      	cbz	r0, 900280be <_vfiprintf_r+0x17a>
900280ae:	9b04      	ldr	r3, [sp, #16]
900280b0:	eba0 000a 	sub.w	r0, r0, sl
900280b4:	2240      	movs	r2, #64	; 0x40
900280b6:	4082      	lsls	r2, r0
900280b8:	4313      	orrs	r3, r2
900280ba:	3401      	adds	r4, #1
900280bc:	9304      	str	r3, [sp, #16]
900280be:	f814 1b01 	ldrb.w	r1, [r4], #1
900280c2:	4829      	ldr	r0, [pc, #164]	; (90028168 <_vfiprintf_r+0x224>)
900280c4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
900280c8:	2206      	movs	r2, #6
900280ca:	f7d8 f919 	bl	90000300 <memchr>
900280ce:	2800      	cmp	r0, #0
900280d0:	d03f      	beq.n	90028152 <_vfiprintf_r+0x20e>
900280d2:	4b26      	ldr	r3, [pc, #152]	; (9002816c <_vfiprintf_r+0x228>)
900280d4:	bb1b      	cbnz	r3, 9002811e <_vfiprintf_r+0x1da>
900280d6:	9b03      	ldr	r3, [sp, #12]
900280d8:	3307      	adds	r3, #7
900280da:	f023 0307 	bic.w	r3, r3, #7
900280de:	3308      	adds	r3, #8
900280e0:	9303      	str	r3, [sp, #12]
900280e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
900280e4:	443b      	add	r3, r7
900280e6:	9309      	str	r3, [sp, #36]	; 0x24
900280e8:	e768      	b.n	90027fbc <_vfiprintf_r+0x78>
900280ea:	fb0c 3202 	mla	r2, ip, r2, r3
900280ee:	460c      	mov	r4, r1
900280f0:	2001      	movs	r0, #1
900280f2:	e7a6      	b.n	90028042 <_vfiprintf_r+0xfe>
900280f4:	2300      	movs	r3, #0
900280f6:	3401      	adds	r4, #1
900280f8:	9305      	str	r3, [sp, #20]
900280fa:	4619      	mov	r1, r3
900280fc:	f04f 0c0a 	mov.w	ip, #10
90028100:	4620      	mov	r0, r4
90028102:	f810 2b01 	ldrb.w	r2, [r0], #1
90028106:	3a30      	subs	r2, #48	; 0x30
90028108:	2a09      	cmp	r2, #9
9002810a:	d903      	bls.n	90028114 <_vfiprintf_r+0x1d0>
9002810c:	2b00      	cmp	r3, #0
9002810e:	d0c6      	beq.n	9002809e <_vfiprintf_r+0x15a>
90028110:	9105      	str	r1, [sp, #20]
90028112:	e7c4      	b.n	9002809e <_vfiprintf_r+0x15a>
90028114:	fb0c 2101 	mla	r1, ip, r1, r2
90028118:	4604      	mov	r4, r0
9002811a:	2301      	movs	r3, #1
9002811c:	e7f0      	b.n	90028100 <_vfiprintf_r+0x1bc>
9002811e:	ab03      	add	r3, sp, #12
90028120:	9300      	str	r3, [sp, #0]
90028122:	462a      	mov	r2, r5
90028124:	4b12      	ldr	r3, [pc, #72]	; (90028170 <_vfiprintf_r+0x22c>)
90028126:	a904      	add	r1, sp, #16
90028128:	4630      	mov	r0, r6
9002812a:	f3af 8000 	nop.w
9002812e:	4607      	mov	r7, r0
90028130:	1c78      	adds	r0, r7, #1
90028132:	d1d6      	bne.n	900280e2 <_vfiprintf_r+0x19e>
90028134:	6e6b      	ldr	r3, [r5, #100]	; 0x64
90028136:	07d9      	lsls	r1, r3, #31
90028138:	d405      	bmi.n	90028146 <_vfiprintf_r+0x202>
9002813a:	89ab      	ldrh	r3, [r5, #12]
9002813c:	059a      	lsls	r2, r3, #22
9002813e:	d402      	bmi.n	90028146 <_vfiprintf_r+0x202>
90028140:	6da8      	ldr	r0, [r5, #88]	; 0x58
90028142:	f7ff fe1b 	bl	90027d7c <__retarget_lock_release_recursive>
90028146:	89ab      	ldrh	r3, [r5, #12]
90028148:	065b      	lsls	r3, r3, #25
9002814a:	f53f af1d 	bmi.w	90027f88 <_vfiprintf_r+0x44>
9002814e:	9809      	ldr	r0, [sp, #36]	; 0x24
90028150:	e71c      	b.n	90027f8c <_vfiprintf_r+0x48>
90028152:	ab03      	add	r3, sp, #12
90028154:	9300      	str	r3, [sp, #0]
90028156:	462a      	mov	r2, r5
90028158:	4b05      	ldr	r3, [pc, #20]	; (90028170 <_vfiprintf_r+0x22c>)
9002815a:	a904      	add	r1, sp, #16
9002815c:	4630      	mov	r0, r6
9002815e:	f000 f879 	bl	90028254 <_printf_i>
90028162:	e7e4      	b.n	9002812e <_vfiprintf_r+0x1ea>
90028164:	9002c76c 	.word	0x9002c76c
90028168:	9002c776 	.word	0x9002c776
9002816c:	00000000 	.word	0x00000000
90028170:	90027f1f 	.word	0x90027f1f
90028174:	9002c772 	.word	0x9002c772

90028178 <_printf_common>:
90028178:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
9002817c:	4616      	mov	r6, r2
9002817e:	4699      	mov	r9, r3
90028180:	688a      	ldr	r2, [r1, #8]
90028182:	690b      	ldr	r3, [r1, #16]
90028184:	f8dd 8020 	ldr.w	r8, [sp, #32]
90028188:	4293      	cmp	r3, r2
9002818a:	bfb8      	it	lt
9002818c:	4613      	movlt	r3, r2
9002818e:	6033      	str	r3, [r6, #0]
90028190:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
90028194:	4607      	mov	r7, r0
90028196:	460c      	mov	r4, r1
90028198:	b10a      	cbz	r2, 9002819e <_printf_common+0x26>
9002819a:	3301      	adds	r3, #1
9002819c:	6033      	str	r3, [r6, #0]
9002819e:	6823      	ldr	r3, [r4, #0]
900281a0:	0699      	lsls	r1, r3, #26
900281a2:	bf42      	ittt	mi
900281a4:	6833      	ldrmi	r3, [r6, #0]
900281a6:	3302      	addmi	r3, #2
900281a8:	6033      	strmi	r3, [r6, #0]
900281aa:	6825      	ldr	r5, [r4, #0]
900281ac:	f015 0506 	ands.w	r5, r5, #6
900281b0:	d106      	bne.n	900281c0 <_printf_common+0x48>
900281b2:	f104 0a19 	add.w	sl, r4, #25
900281b6:	68e3      	ldr	r3, [r4, #12]
900281b8:	6832      	ldr	r2, [r6, #0]
900281ba:	1a9b      	subs	r3, r3, r2
900281bc:	42ab      	cmp	r3, r5
900281be:	dc26      	bgt.n	9002820e <_printf_common+0x96>
900281c0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
900281c4:	1e13      	subs	r3, r2, #0
900281c6:	6822      	ldr	r2, [r4, #0]
900281c8:	bf18      	it	ne
900281ca:	2301      	movne	r3, #1
900281cc:	0692      	lsls	r2, r2, #26
900281ce:	d42b      	bmi.n	90028228 <_printf_common+0xb0>
900281d0:	f104 0243 	add.w	r2, r4, #67	; 0x43
900281d4:	4649      	mov	r1, r9
900281d6:	4638      	mov	r0, r7
900281d8:	47c0      	blx	r8
900281da:	3001      	adds	r0, #1
900281dc:	d01e      	beq.n	9002821c <_printf_common+0xa4>
900281de:	6823      	ldr	r3, [r4, #0]
900281e0:	6922      	ldr	r2, [r4, #16]
900281e2:	f003 0306 	and.w	r3, r3, #6
900281e6:	2b04      	cmp	r3, #4
900281e8:	bf02      	ittt	eq
900281ea:	68e5      	ldreq	r5, [r4, #12]
900281ec:	6833      	ldreq	r3, [r6, #0]
900281ee:	1aed      	subeq	r5, r5, r3
900281f0:	68a3      	ldr	r3, [r4, #8]
900281f2:	bf0c      	ite	eq
900281f4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
900281f8:	2500      	movne	r5, #0
900281fa:	4293      	cmp	r3, r2
900281fc:	bfc4      	itt	gt
900281fe:	1a9b      	subgt	r3, r3, r2
90028200:	18ed      	addgt	r5, r5, r3
90028202:	2600      	movs	r6, #0
90028204:	341a      	adds	r4, #26
90028206:	42b5      	cmp	r5, r6
90028208:	d11a      	bne.n	90028240 <_printf_common+0xc8>
9002820a:	2000      	movs	r0, #0
9002820c:	e008      	b.n	90028220 <_printf_common+0xa8>
9002820e:	2301      	movs	r3, #1
90028210:	4652      	mov	r2, sl
90028212:	4649      	mov	r1, r9
90028214:	4638      	mov	r0, r7
90028216:	47c0      	blx	r8
90028218:	3001      	adds	r0, #1
9002821a:	d103      	bne.n	90028224 <_printf_common+0xac>
9002821c:	f04f 30ff 	mov.w	r0, #4294967295
90028220:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
90028224:	3501      	adds	r5, #1
90028226:	e7c6      	b.n	900281b6 <_printf_common+0x3e>
90028228:	18e1      	adds	r1, r4, r3
9002822a:	1c5a      	adds	r2, r3, #1
9002822c:	2030      	movs	r0, #48	; 0x30
9002822e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
90028232:	4422      	add	r2, r4
90028234:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
90028238:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
9002823c:	3302      	adds	r3, #2
9002823e:	e7c7      	b.n	900281d0 <_printf_common+0x58>
90028240:	2301      	movs	r3, #1
90028242:	4622      	mov	r2, r4
90028244:	4649      	mov	r1, r9
90028246:	4638      	mov	r0, r7
90028248:	47c0      	blx	r8
9002824a:	3001      	adds	r0, #1
9002824c:	d0e6      	beq.n	9002821c <_printf_common+0xa4>
9002824e:	3601      	adds	r6, #1
90028250:	e7d9      	b.n	90028206 <_printf_common+0x8e>
	...

90028254 <_printf_i>:
90028254:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
90028258:	7e0f      	ldrb	r7, [r1, #24]
9002825a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
9002825c:	2f78      	cmp	r7, #120	; 0x78
9002825e:	4691      	mov	r9, r2
90028260:	4680      	mov	r8, r0
90028262:	460c      	mov	r4, r1
90028264:	469a      	mov	sl, r3
90028266:	f101 0243 	add.w	r2, r1, #67	; 0x43
9002826a:	d807      	bhi.n	9002827c <_printf_i+0x28>
9002826c:	2f62      	cmp	r7, #98	; 0x62
9002826e:	d80a      	bhi.n	90028286 <_printf_i+0x32>
90028270:	2f00      	cmp	r7, #0
90028272:	f000 80d4 	beq.w	9002841e <_printf_i+0x1ca>
90028276:	2f58      	cmp	r7, #88	; 0x58
90028278:	f000 80c0 	beq.w	900283fc <_printf_i+0x1a8>
9002827c:	f104 0542 	add.w	r5, r4, #66	; 0x42
90028280:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
90028284:	e03a      	b.n	900282fc <_printf_i+0xa8>
90028286:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
9002828a:	2b15      	cmp	r3, #21
9002828c:	d8f6      	bhi.n	9002827c <_printf_i+0x28>
9002828e:	a101      	add	r1, pc, #4	; (adr r1, 90028294 <_printf_i+0x40>)
90028290:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
90028294:	900282ed 	.word	0x900282ed
90028298:	90028301 	.word	0x90028301
9002829c:	9002827d 	.word	0x9002827d
900282a0:	9002827d 	.word	0x9002827d
900282a4:	9002827d 	.word	0x9002827d
900282a8:	9002827d 	.word	0x9002827d
900282ac:	90028301 	.word	0x90028301
900282b0:	9002827d 	.word	0x9002827d
900282b4:	9002827d 	.word	0x9002827d
900282b8:	9002827d 	.word	0x9002827d
900282bc:	9002827d 	.word	0x9002827d
900282c0:	90028405 	.word	0x90028405
900282c4:	9002832d 	.word	0x9002832d
900282c8:	900283bf 	.word	0x900283bf
900282cc:	9002827d 	.word	0x9002827d
900282d0:	9002827d 	.word	0x9002827d
900282d4:	90028427 	.word	0x90028427
900282d8:	9002827d 	.word	0x9002827d
900282dc:	9002832d 	.word	0x9002832d
900282e0:	9002827d 	.word	0x9002827d
900282e4:	9002827d 	.word	0x9002827d
900282e8:	900283c7 	.word	0x900283c7
900282ec:	682b      	ldr	r3, [r5, #0]
900282ee:	1d1a      	adds	r2, r3, #4
900282f0:	681b      	ldr	r3, [r3, #0]
900282f2:	602a      	str	r2, [r5, #0]
900282f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
900282f8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
900282fc:	2301      	movs	r3, #1
900282fe:	e09f      	b.n	90028440 <_printf_i+0x1ec>
90028300:	6820      	ldr	r0, [r4, #0]
90028302:	682b      	ldr	r3, [r5, #0]
90028304:	0607      	lsls	r7, r0, #24
90028306:	f103 0104 	add.w	r1, r3, #4
9002830a:	6029      	str	r1, [r5, #0]
9002830c:	d501      	bpl.n	90028312 <_printf_i+0xbe>
9002830e:	681e      	ldr	r6, [r3, #0]
90028310:	e003      	b.n	9002831a <_printf_i+0xc6>
90028312:	0646      	lsls	r6, r0, #25
90028314:	d5fb      	bpl.n	9002830e <_printf_i+0xba>
90028316:	f9b3 6000 	ldrsh.w	r6, [r3]
9002831a:	2e00      	cmp	r6, #0
9002831c:	da03      	bge.n	90028326 <_printf_i+0xd2>
9002831e:	232d      	movs	r3, #45	; 0x2d
90028320:	4276      	negs	r6, r6
90028322:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
90028326:	485a      	ldr	r0, [pc, #360]	; (90028490 <_printf_i+0x23c>)
90028328:	230a      	movs	r3, #10
9002832a:	e012      	b.n	90028352 <_printf_i+0xfe>
9002832c:	682b      	ldr	r3, [r5, #0]
9002832e:	6820      	ldr	r0, [r4, #0]
90028330:	1d19      	adds	r1, r3, #4
90028332:	6029      	str	r1, [r5, #0]
90028334:	0605      	lsls	r5, r0, #24
90028336:	d501      	bpl.n	9002833c <_printf_i+0xe8>
90028338:	681e      	ldr	r6, [r3, #0]
9002833a:	e002      	b.n	90028342 <_printf_i+0xee>
9002833c:	0641      	lsls	r1, r0, #25
9002833e:	d5fb      	bpl.n	90028338 <_printf_i+0xe4>
90028340:	881e      	ldrh	r6, [r3, #0]
90028342:	4853      	ldr	r0, [pc, #332]	; (90028490 <_printf_i+0x23c>)
90028344:	2f6f      	cmp	r7, #111	; 0x6f
90028346:	bf0c      	ite	eq
90028348:	2308      	moveq	r3, #8
9002834a:	230a      	movne	r3, #10
9002834c:	2100      	movs	r1, #0
9002834e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
90028352:	6865      	ldr	r5, [r4, #4]
90028354:	60a5      	str	r5, [r4, #8]
90028356:	2d00      	cmp	r5, #0
90028358:	bfa2      	ittt	ge
9002835a:	6821      	ldrge	r1, [r4, #0]
9002835c:	f021 0104 	bicge.w	r1, r1, #4
90028360:	6021      	strge	r1, [r4, #0]
90028362:	b90e      	cbnz	r6, 90028368 <_printf_i+0x114>
90028364:	2d00      	cmp	r5, #0
90028366:	d04b      	beq.n	90028400 <_printf_i+0x1ac>
90028368:	4615      	mov	r5, r2
9002836a:	fbb6 f1f3 	udiv	r1, r6, r3
9002836e:	fb03 6711 	mls	r7, r3, r1, r6
90028372:	5dc7      	ldrb	r7, [r0, r7]
90028374:	f805 7d01 	strb.w	r7, [r5, #-1]!
90028378:	4637      	mov	r7, r6
9002837a:	42bb      	cmp	r3, r7
9002837c:	460e      	mov	r6, r1
9002837e:	d9f4      	bls.n	9002836a <_printf_i+0x116>
90028380:	2b08      	cmp	r3, #8
90028382:	d10b      	bne.n	9002839c <_printf_i+0x148>
90028384:	6823      	ldr	r3, [r4, #0]
90028386:	07de      	lsls	r6, r3, #31
90028388:	d508      	bpl.n	9002839c <_printf_i+0x148>
9002838a:	6923      	ldr	r3, [r4, #16]
9002838c:	6861      	ldr	r1, [r4, #4]
9002838e:	4299      	cmp	r1, r3
90028390:	bfde      	ittt	le
90028392:	2330      	movle	r3, #48	; 0x30
90028394:	f805 3c01 	strble.w	r3, [r5, #-1]
90028398:	f105 35ff 	addle.w	r5, r5, #4294967295
9002839c:	1b52      	subs	r2, r2, r5
9002839e:	6122      	str	r2, [r4, #16]
900283a0:	f8cd a000 	str.w	sl, [sp]
900283a4:	464b      	mov	r3, r9
900283a6:	aa03      	add	r2, sp, #12
900283a8:	4621      	mov	r1, r4
900283aa:	4640      	mov	r0, r8
900283ac:	f7ff fee4 	bl	90028178 <_printf_common>
900283b0:	3001      	adds	r0, #1
900283b2:	d14a      	bne.n	9002844a <_printf_i+0x1f6>
900283b4:	f04f 30ff 	mov.w	r0, #4294967295
900283b8:	b004      	add	sp, #16
900283ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
900283be:	6823      	ldr	r3, [r4, #0]
900283c0:	f043 0320 	orr.w	r3, r3, #32
900283c4:	6023      	str	r3, [r4, #0]
900283c6:	4833      	ldr	r0, [pc, #204]	; (90028494 <_printf_i+0x240>)
900283c8:	2778      	movs	r7, #120	; 0x78
900283ca:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
900283ce:	6823      	ldr	r3, [r4, #0]
900283d0:	6829      	ldr	r1, [r5, #0]
900283d2:	061f      	lsls	r7, r3, #24
900283d4:	f851 6b04 	ldr.w	r6, [r1], #4
900283d8:	d402      	bmi.n	900283e0 <_printf_i+0x18c>
900283da:	065f      	lsls	r7, r3, #25
900283dc:	bf48      	it	mi
900283de:	b2b6      	uxthmi	r6, r6
900283e0:	07df      	lsls	r7, r3, #31
900283e2:	bf48      	it	mi
900283e4:	f043 0320 	orrmi.w	r3, r3, #32
900283e8:	6029      	str	r1, [r5, #0]
900283ea:	bf48      	it	mi
900283ec:	6023      	strmi	r3, [r4, #0]
900283ee:	b91e      	cbnz	r6, 900283f8 <_printf_i+0x1a4>
900283f0:	6823      	ldr	r3, [r4, #0]
900283f2:	f023 0320 	bic.w	r3, r3, #32
900283f6:	6023      	str	r3, [r4, #0]
900283f8:	2310      	movs	r3, #16
900283fa:	e7a7      	b.n	9002834c <_printf_i+0xf8>
900283fc:	4824      	ldr	r0, [pc, #144]	; (90028490 <_printf_i+0x23c>)
900283fe:	e7e4      	b.n	900283ca <_printf_i+0x176>
90028400:	4615      	mov	r5, r2
90028402:	e7bd      	b.n	90028380 <_printf_i+0x12c>
90028404:	682b      	ldr	r3, [r5, #0]
90028406:	6826      	ldr	r6, [r4, #0]
90028408:	6961      	ldr	r1, [r4, #20]
9002840a:	1d18      	adds	r0, r3, #4
9002840c:	6028      	str	r0, [r5, #0]
9002840e:	0635      	lsls	r5, r6, #24
90028410:	681b      	ldr	r3, [r3, #0]
90028412:	d501      	bpl.n	90028418 <_printf_i+0x1c4>
90028414:	6019      	str	r1, [r3, #0]
90028416:	e002      	b.n	9002841e <_printf_i+0x1ca>
90028418:	0670      	lsls	r0, r6, #25
9002841a:	d5fb      	bpl.n	90028414 <_printf_i+0x1c0>
9002841c:	8019      	strh	r1, [r3, #0]
9002841e:	2300      	movs	r3, #0
90028420:	6123      	str	r3, [r4, #16]
90028422:	4615      	mov	r5, r2
90028424:	e7bc      	b.n	900283a0 <_printf_i+0x14c>
90028426:	682b      	ldr	r3, [r5, #0]
90028428:	1d1a      	adds	r2, r3, #4
9002842a:	602a      	str	r2, [r5, #0]
9002842c:	681d      	ldr	r5, [r3, #0]
9002842e:	6862      	ldr	r2, [r4, #4]
90028430:	2100      	movs	r1, #0
90028432:	4628      	mov	r0, r5
90028434:	f7d7 ff64 	bl	90000300 <memchr>
90028438:	b108      	cbz	r0, 9002843e <_printf_i+0x1ea>
9002843a:	1b40      	subs	r0, r0, r5
9002843c:	6060      	str	r0, [r4, #4]
9002843e:	6863      	ldr	r3, [r4, #4]
90028440:	6123      	str	r3, [r4, #16]
90028442:	2300      	movs	r3, #0
90028444:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
90028448:	e7aa      	b.n	900283a0 <_printf_i+0x14c>
9002844a:	6923      	ldr	r3, [r4, #16]
9002844c:	462a      	mov	r2, r5
9002844e:	4649      	mov	r1, r9
90028450:	4640      	mov	r0, r8
90028452:	47d0      	blx	sl
90028454:	3001      	adds	r0, #1
90028456:	d0ad      	beq.n	900283b4 <_printf_i+0x160>
90028458:	6823      	ldr	r3, [r4, #0]
9002845a:	079b      	lsls	r3, r3, #30
9002845c:	d413      	bmi.n	90028486 <_printf_i+0x232>
9002845e:	68e0      	ldr	r0, [r4, #12]
90028460:	9b03      	ldr	r3, [sp, #12]
90028462:	4298      	cmp	r0, r3
90028464:	bfb8      	it	lt
90028466:	4618      	movlt	r0, r3
90028468:	e7a6      	b.n	900283b8 <_printf_i+0x164>
9002846a:	2301      	movs	r3, #1
9002846c:	4632      	mov	r2, r6
9002846e:	4649      	mov	r1, r9
90028470:	4640      	mov	r0, r8
90028472:	47d0      	blx	sl
90028474:	3001      	adds	r0, #1
90028476:	d09d      	beq.n	900283b4 <_printf_i+0x160>
90028478:	3501      	adds	r5, #1
9002847a:	68e3      	ldr	r3, [r4, #12]
9002847c:	9903      	ldr	r1, [sp, #12]
9002847e:	1a5b      	subs	r3, r3, r1
90028480:	42ab      	cmp	r3, r5
90028482:	dcf2      	bgt.n	9002846a <_printf_i+0x216>
90028484:	e7eb      	b.n	9002845e <_printf_i+0x20a>
90028486:	2500      	movs	r5, #0
90028488:	f104 0619 	add.w	r6, r4, #25
9002848c:	e7f5      	b.n	9002847a <_printf_i+0x226>
9002848e:	bf00      	nop
90028490:	9002c77d 	.word	0x9002c77d
90028494:	9002c78e 	.word	0x9002c78e

90028498 <__sflush_r>:
90028498:	898a      	ldrh	r2, [r1, #12]
9002849a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
9002849e:	4605      	mov	r5, r0
900284a0:	0710      	lsls	r0, r2, #28
900284a2:	460c      	mov	r4, r1
900284a4:	d458      	bmi.n	90028558 <__sflush_r+0xc0>
900284a6:	684b      	ldr	r3, [r1, #4]
900284a8:	2b00      	cmp	r3, #0
900284aa:	dc05      	bgt.n	900284b8 <__sflush_r+0x20>
900284ac:	6c0b      	ldr	r3, [r1, #64]	; 0x40
900284ae:	2b00      	cmp	r3, #0
900284b0:	dc02      	bgt.n	900284b8 <__sflush_r+0x20>
900284b2:	2000      	movs	r0, #0
900284b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
900284b8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
900284ba:	2e00      	cmp	r6, #0
900284bc:	d0f9      	beq.n	900284b2 <__sflush_r+0x1a>
900284be:	2300      	movs	r3, #0
900284c0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
900284c4:	682f      	ldr	r7, [r5, #0]
900284c6:	6a21      	ldr	r1, [r4, #32]
900284c8:	602b      	str	r3, [r5, #0]
900284ca:	d032      	beq.n	90028532 <__sflush_r+0x9a>
900284cc:	6d60      	ldr	r0, [r4, #84]	; 0x54
900284ce:	89a3      	ldrh	r3, [r4, #12]
900284d0:	075a      	lsls	r2, r3, #29
900284d2:	d505      	bpl.n	900284e0 <__sflush_r+0x48>
900284d4:	6863      	ldr	r3, [r4, #4]
900284d6:	1ac0      	subs	r0, r0, r3
900284d8:	6b63      	ldr	r3, [r4, #52]	; 0x34
900284da:	b10b      	cbz	r3, 900284e0 <__sflush_r+0x48>
900284dc:	6c23      	ldr	r3, [r4, #64]	; 0x40
900284de:	1ac0      	subs	r0, r0, r3
900284e0:	2300      	movs	r3, #0
900284e2:	4602      	mov	r2, r0
900284e4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
900284e6:	6a21      	ldr	r1, [r4, #32]
900284e8:	4628      	mov	r0, r5
900284ea:	47b0      	blx	r6
900284ec:	1c43      	adds	r3, r0, #1
900284ee:	89a3      	ldrh	r3, [r4, #12]
900284f0:	d106      	bne.n	90028500 <__sflush_r+0x68>
900284f2:	6829      	ldr	r1, [r5, #0]
900284f4:	291d      	cmp	r1, #29
900284f6:	d82b      	bhi.n	90028550 <__sflush_r+0xb8>
900284f8:	4a29      	ldr	r2, [pc, #164]	; (900285a0 <__sflush_r+0x108>)
900284fa:	410a      	asrs	r2, r1
900284fc:	07d6      	lsls	r6, r2, #31
900284fe:	d427      	bmi.n	90028550 <__sflush_r+0xb8>
90028500:	2200      	movs	r2, #0
90028502:	6062      	str	r2, [r4, #4]
90028504:	04d9      	lsls	r1, r3, #19
90028506:	6922      	ldr	r2, [r4, #16]
90028508:	6022      	str	r2, [r4, #0]
9002850a:	d504      	bpl.n	90028516 <__sflush_r+0x7e>
9002850c:	1c42      	adds	r2, r0, #1
9002850e:	d101      	bne.n	90028514 <__sflush_r+0x7c>
90028510:	682b      	ldr	r3, [r5, #0]
90028512:	b903      	cbnz	r3, 90028516 <__sflush_r+0x7e>
90028514:	6560      	str	r0, [r4, #84]	; 0x54
90028516:	6b61      	ldr	r1, [r4, #52]	; 0x34
90028518:	602f      	str	r7, [r5, #0]
9002851a:	2900      	cmp	r1, #0
9002851c:	d0c9      	beq.n	900284b2 <__sflush_r+0x1a>
9002851e:	f104 0344 	add.w	r3, r4, #68	; 0x44
90028522:	4299      	cmp	r1, r3
90028524:	d002      	beq.n	9002852c <__sflush_r+0x94>
90028526:	4628      	mov	r0, r5
90028528:	f7ff fc96 	bl	90027e58 <_free_r>
9002852c:	2000      	movs	r0, #0
9002852e:	6360      	str	r0, [r4, #52]	; 0x34
90028530:	e7c0      	b.n	900284b4 <__sflush_r+0x1c>
90028532:	2301      	movs	r3, #1
90028534:	4628      	mov	r0, r5
90028536:	47b0      	blx	r6
90028538:	1c41      	adds	r1, r0, #1
9002853a:	d1c8      	bne.n	900284ce <__sflush_r+0x36>
9002853c:	682b      	ldr	r3, [r5, #0]
9002853e:	2b00      	cmp	r3, #0
90028540:	d0c5      	beq.n	900284ce <__sflush_r+0x36>
90028542:	2b1d      	cmp	r3, #29
90028544:	d001      	beq.n	9002854a <__sflush_r+0xb2>
90028546:	2b16      	cmp	r3, #22
90028548:	d101      	bne.n	9002854e <__sflush_r+0xb6>
9002854a:	602f      	str	r7, [r5, #0]
9002854c:	e7b1      	b.n	900284b2 <__sflush_r+0x1a>
9002854e:	89a3      	ldrh	r3, [r4, #12]
90028550:	f043 0340 	orr.w	r3, r3, #64	; 0x40
90028554:	81a3      	strh	r3, [r4, #12]
90028556:	e7ad      	b.n	900284b4 <__sflush_r+0x1c>
90028558:	690f      	ldr	r7, [r1, #16]
9002855a:	2f00      	cmp	r7, #0
9002855c:	d0a9      	beq.n	900284b2 <__sflush_r+0x1a>
9002855e:	0793      	lsls	r3, r2, #30
90028560:	680e      	ldr	r6, [r1, #0]
90028562:	bf08      	it	eq
90028564:	694b      	ldreq	r3, [r1, #20]
90028566:	600f      	str	r7, [r1, #0]
90028568:	bf18      	it	ne
9002856a:	2300      	movne	r3, #0
9002856c:	eba6 0807 	sub.w	r8, r6, r7
90028570:	608b      	str	r3, [r1, #8]
90028572:	f1b8 0f00 	cmp.w	r8, #0
90028576:	dd9c      	ble.n	900284b2 <__sflush_r+0x1a>
90028578:	6a21      	ldr	r1, [r4, #32]
9002857a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
9002857c:	4643      	mov	r3, r8
9002857e:	463a      	mov	r2, r7
90028580:	4628      	mov	r0, r5
90028582:	47b0      	blx	r6
90028584:	2800      	cmp	r0, #0
90028586:	dc06      	bgt.n	90028596 <__sflush_r+0xfe>
90028588:	89a3      	ldrh	r3, [r4, #12]
9002858a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
9002858e:	81a3      	strh	r3, [r4, #12]
90028590:	f04f 30ff 	mov.w	r0, #4294967295
90028594:	e78e      	b.n	900284b4 <__sflush_r+0x1c>
90028596:	4407      	add	r7, r0
90028598:	eba8 0800 	sub.w	r8, r8, r0
9002859c:	e7e9      	b.n	90028572 <__sflush_r+0xda>
9002859e:	bf00      	nop
900285a0:	dfbffffe 	.word	0xdfbffffe

900285a4 <_fflush_r>:
900285a4:	b538      	push	{r3, r4, r5, lr}
900285a6:	690b      	ldr	r3, [r1, #16]
900285a8:	4605      	mov	r5, r0
900285aa:	460c      	mov	r4, r1
900285ac:	b913      	cbnz	r3, 900285b4 <_fflush_r+0x10>
900285ae:	2500      	movs	r5, #0
900285b0:	4628      	mov	r0, r5
900285b2:	bd38      	pop	{r3, r4, r5, pc}
900285b4:	b118      	cbz	r0, 900285be <_fflush_r+0x1a>
900285b6:	6a03      	ldr	r3, [r0, #32]
900285b8:	b90b      	cbnz	r3, 900285be <_fflush_r+0x1a>
900285ba:	f7ff f9c5 	bl	90027948 <__sinit>
900285be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
900285c2:	2b00      	cmp	r3, #0
900285c4:	d0f3      	beq.n	900285ae <_fflush_r+0xa>
900285c6:	6e62      	ldr	r2, [r4, #100]	; 0x64
900285c8:	07d0      	lsls	r0, r2, #31
900285ca:	d404      	bmi.n	900285d6 <_fflush_r+0x32>
900285cc:	0599      	lsls	r1, r3, #22
900285ce:	d402      	bmi.n	900285d6 <_fflush_r+0x32>
900285d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
900285d2:	f7ff fbd2 	bl	90027d7a <__retarget_lock_acquire_recursive>
900285d6:	4628      	mov	r0, r5
900285d8:	4621      	mov	r1, r4
900285da:	f7ff ff5d 	bl	90028498 <__sflush_r>
900285de:	6e63      	ldr	r3, [r4, #100]	; 0x64
900285e0:	07da      	lsls	r2, r3, #31
900285e2:	4605      	mov	r5, r0
900285e4:	d4e4      	bmi.n	900285b0 <_fflush_r+0xc>
900285e6:	89a3      	ldrh	r3, [r4, #12]
900285e8:	059b      	lsls	r3, r3, #22
900285ea:	d4e1      	bmi.n	900285b0 <_fflush_r+0xc>
900285ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
900285ee:	f7ff fbc5 	bl	90027d7c <__retarget_lock_release_recursive>
900285f2:	e7dd      	b.n	900285b0 <_fflush_r+0xc>

900285f4 <__swhatbuf_r>:
900285f4:	b570      	push	{r4, r5, r6, lr}
900285f6:	460c      	mov	r4, r1
900285f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
900285fc:	2900      	cmp	r1, #0
900285fe:	b096      	sub	sp, #88	; 0x58
90028600:	4615      	mov	r5, r2
90028602:	461e      	mov	r6, r3
90028604:	da0d      	bge.n	90028622 <__swhatbuf_r+0x2e>
90028606:	89a3      	ldrh	r3, [r4, #12]
90028608:	f013 0f80 	tst.w	r3, #128	; 0x80
9002860c:	f04f 0100 	mov.w	r1, #0
90028610:	bf0c      	ite	eq
90028612:	f44f 6380 	moveq.w	r3, #1024	; 0x400
90028616:	2340      	movne	r3, #64	; 0x40
90028618:	2000      	movs	r0, #0
9002861a:	6031      	str	r1, [r6, #0]
9002861c:	602b      	str	r3, [r5, #0]
9002861e:	b016      	add	sp, #88	; 0x58
90028620:	bd70      	pop	{r4, r5, r6, pc}
90028622:	466a      	mov	r2, sp
90028624:	f000 f848 	bl	900286b8 <_fstat_r>
90028628:	2800      	cmp	r0, #0
9002862a:	dbec      	blt.n	90028606 <__swhatbuf_r+0x12>
9002862c:	9901      	ldr	r1, [sp, #4]
9002862e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
90028632:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
90028636:	4259      	negs	r1, r3
90028638:	4159      	adcs	r1, r3
9002863a:	f44f 6380 	mov.w	r3, #1024	; 0x400
9002863e:	e7eb      	b.n	90028618 <__swhatbuf_r+0x24>

90028640 <__smakebuf_r>:
90028640:	898b      	ldrh	r3, [r1, #12]
90028642:	b573      	push	{r0, r1, r4, r5, r6, lr}
90028644:	079d      	lsls	r5, r3, #30
90028646:	4606      	mov	r6, r0
90028648:	460c      	mov	r4, r1
9002864a:	d507      	bpl.n	9002865c <__smakebuf_r+0x1c>
9002864c:	f104 0347 	add.w	r3, r4, #71	; 0x47
90028650:	6023      	str	r3, [r4, #0]
90028652:	6123      	str	r3, [r4, #16]
90028654:	2301      	movs	r3, #1
90028656:	6163      	str	r3, [r4, #20]
90028658:	b002      	add	sp, #8
9002865a:	bd70      	pop	{r4, r5, r6, pc}
9002865c:	ab01      	add	r3, sp, #4
9002865e:	466a      	mov	r2, sp
90028660:	f7ff ffc8 	bl	900285f4 <__swhatbuf_r>
90028664:	9900      	ldr	r1, [sp, #0]
90028666:	4605      	mov	r5, r0
90028668:	4630      	mov	r0, r6
9002866a:	f7ff f847 	bl	900276fc <_malloc_r>
9002866e:	b948      	cbnz	r0, 90028684 <__smakebuf_r+0x44>
90028670:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
90028674:	059a      	lsls	r2, r3, #22
90028676:	d4ef      	bmi.n	90028658 <__smakebuf_r+0x18>
90028678:	f023 0303 	bic.w	r3, r3, #3
9002867c:	f043 0302 	orr.w	r3, r3, #2
90028680:	81a3      	strh	r3, [r4, #12]
90028682:	e7e3      	b.n	9002864c <__smakebuf_r+0xc>
90028684:	89a3      	ldrh	r3, [r4, #12]
90028686:	6020      	str	r0, [r4, #0]
90028688:	f043 0380 	orr.w	r3, r3, #128	; 0x80
9002868c:	81a3      	strh	r3, [r4, #12]
9002868e:	9b00      	ldr	r3, [sp, #0]
90028690:	6163      	str	r3, [r4, #20]
90028692:	9b01      	ldr	r3, [sp, #4]
90028694:	6120      	str	r0, [r4, #16]
90028696:	b15b      	cbz	r3, 900286b0 <__smakebuf_r+0x70>
90028698:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
9002869c:	4630      	mov	r0, r6
9002869e:	f000 f81d 	bl	900286dc <_isatty_r>
900286a2:	b128      	cbz	r0, 900286b0 <__smakebuf_r+0x70>
900286a4:	89a3      	ldrh	r3, [r4, #12]
900286a6:	f023 0303 	bic.w	r3, r3, #3
900286aa:	f043 0301 	orr.w	r3, r3, #1
900286ae:	81a3      	strh	r3, [r4, #12]
900286b0:	89a3      	ldrh	r3, [r4, #12]
900286b2:	431d      	orrs	r5, r3
900286b4:	81a5      	strh	r5, [r4, #12]
900286b6:	e7cf      	b.n	90028658 <__smakebuf_r+0x18>

900286b8 <_fstat_r>:
900286b8:	b538      	push	{r3, r4, r5, lr}
900286ba:	4d07      	ldr	r5, [pc, #28]	; (900286d8 <_fstat_r+0x20>)
900286bc:	2300      	movs	r3, #0
900286be:	4604      	mov	r4, r0
900286c0:	4608      	mov	r0, r1
900286c2:	4611      	mov	r1, r2
900286c4:	602b      	str	r3, [r5, #0]
900286c6:	f7dc fbab 	bl	90004e20 <_fstat>
900286ca:	1c43      	adds	r3, r0, #1
900286cc:	d102      	bne.n	900286d4 <_fstat_r+0x1c>
900286ce:	682b      	ldr	r3, [r5, #0]
900286d0:	b103      	cbz	r3, 900286d4 <_fstat_r+0x1c>
900286d2:	6023      	str	r3, [r4, #0]
900286d4:	bd38      	pop	{r3, r4, r5, pc}
900286d6:	bf00      	nop
900286d8:	24028434 	.word	0x24028434

900286dc <_isatty_r>:
900286dc:	b538      	push	{r3, r4, r5, lr}
900286de:	4d06      	ldr	r5, [pc, #24]	; (900286f8 <_isatty_r+0x1c>)
900286e0:	2300      	movs	r3, #0
900286e2:	4604      	mov	r4, r0
900286e4:	4608      	mov	r0, r1
900286e6:	602b      	str	r3, [r5, #0]
900286e8:	f7dc fba0 	bl	90004e2c <_isatty>
900286ec:	1c43      	adds	r3, r0, #1
900286ee:	d102      	bne.n	900286f6 <_isatty_r+0x1a>
900286f0:	682b      	ldr	r3, [r5, #0]
900286f2:	b103      	cbz	r3, 900286f6 <_isatty_r+0x1a>
900286f4:	6023      	str	r3, [r4, #0]
900286f6:	bd38      	pop	{r3, r4, r5, pc}
900286f8:	24028434 	.word	0x24028434

900286fc <_init>:
900286fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
900286fe:	bf00      	nop
90028700:	bcf8      	pop	{r3, r4, r5, r6, r7}
90028702:	bc08      	pop	{r3}
90028704:	469e      	mov	lr, r3
90028706:	4770      	bx	lr

90028708 <_fini>:
90028708:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
9002870a:	bf00      	nop
9002870c:	bcf8      	pop	{r3, r4, r5, r6, r7}
9002870e:	bc08      	pop	{r3}
90028710:	469e      	mov	lr, r3
90028712:	4770      	bx	lr
